{
  "text": "This beginner's DevOps course is your first \nstep toward a DevOps engineering role.  \nIt is taught by the CEO and co founder of LayerCI.\nThe goal of this course will be for regular \ndevelopers and regular engineering practitioners  \nto learn fundamental DevOps concepts so that \nthey can go towards the DevOps engineering role.  \nWe'll also be talking about DevOps \nbroadly in the introduction. But  \nbeyond that will primarily be talking \nabout the engineering side of things.\nDevOps is a methodology that helps \nengineering teams build products  \nbetter by continuously integrating user feedback.\nAnd if you google DevOps, and you look for \npictures, you'll often see ones like this,  \nit really helps understand how DevOps \nis different than the traditional way  \nof thinking about software developed. \nBack in the day, software was developed,  \nmuch like things would be developed in a \nfactory. So any input would be programming,  \nand then the output, you'd have a product that \nyou could put on a CD, and you'd sell it to users.\nBut since the advent of the Internet, \nand have continuously updatable software,  \nit's become really easy to launch things and get \nuser feedback and integrate that into the current  \nproduct instead of making a new version of the \nproduct. So websites like Facebook, continuously  \nupgrade instead of requiring you to buy, you \nknow, a new version of Facebook, unlike, you know,  \nold games, like some city would require you to buy \na new version of SimCity. And that idea is really  \nformalized by DevOps, the sections are planning, \nwhere you take a set of features that you want  \nto build. And you work with your team to make some \nspecifications for those features might look like,\nyou code them. So developers on your team will \nbuild out these features so that they can be  \nreleased. And of course, they're built. So for \na website, you might take the source code and  \nbundle it into JavaScript that a user's browser \ncould run. For a video game, you might make  \nreleases for various different versions that \nrun on Linux and versions that run on Windows  \nand versions that run in the browser. So you \ntake these built artifacts, and you test them.  \nSo testing is both automatic and manual. \nAutomatic testing is usually colloquially known  \nas continuous integration. And manual testing \nis colloquially known as quality assurance, QA.\nAnd then after it's tested, and you know, the \nstakeholders have all given their feedback,  \nit's released. And continuous deployment \nstrategies, releasing and deploying all happens  \nautomatically after a change is known to be good. \nThere's a lot of automation that can be done here.  \nIn larger teams. There's, you know, popular tools \nlike Spinnaker by netflix that we'll talk about  \nin later talks. But the core idea is you want to \ntake the software, and you want to send it to your  \nusers in a way that they don't notice if there's \nproblems. So if there's an experimental UI change,  \nyou might show it to a few percentage of \nusers and get their feedback before you  \nshow it broadly. Again, a company like Facebook, \nwhich has billions of users, even if 1% of their  \nusers complain, they'll get hundreds of millions \nof emails, the release is built and deployed. So  \ndeploying means it's released to your users for a \nwebsite, it would mean it's publicly accessible on  \nthe internet. For a CD ROM, you know, you bundle \nyour things onto a CD and you distribute that  \nfor a mobile release, you'd build the artifact \nand you submit it to the App Store. And then  \nthe App Store would review it and then publish \na new update that your users could download.\nAnd then you operate it. Operating \nis primarily things like scaling,  \nmaking sure that enough resources exist for \nthe load, adding more servers as required.  \nconfiguring things dealing with \narchitectural problems, essentially,  \non monitoring. So as your users use your software, \nand especially as they submit things, and start  \njobs and create posts on your forums, you want \nto make sure that those posts are all healthy.\nAnd then finally, you take all this feedback, \nand you put it back to the planning stage.  \nSo the planning stage takes all the user feedback \ntakes all of the things that the operations and  \ndeployments, teams learned about deploying \nand scaling the product. And then use that  \nto build out new features, solve bugs, and make \nnew versions of the back end and new versions of  \nthe architecture. And then just continues in the \ncycle. And this is what people mean when they say,  \nour company uses DevOps, or our company is \ntech forward, or our company is digitally  \ntransformed. They mean that instead of taking a \nset of requirements and building one artifact,  \nwhich is then shipped, it's a continuous cycle \nof taking feedback. You know, in these two weeks  \nScrum cycles, usually, and producing software \nthat users actually want to use that they've  \nhad some say in producing DevOps engineering is \nanother common part of DevOps. So beyond just  \nthe methodology, which is something that maybe \nthe technical leaders and CEO would care about,  \nthere's a subfield of DevOps engineering, \nand this is usually what engineers mean.\nYou know when they say DevOps, and \nthat's usually what job postings  \nmean when they say DevOps. So if a job \nposting is asking for a DevOps engineer,  \nyou know, they're not asking for \nsomeone that can plan and deploy  \ncode. They're mostly asking for someone that \ncan build a test, release, deploy and monitor.\nSo the three pillars of DevOps engineering, our \npull request automation, deployment, automation,  \nand application performance management. And we'll \nget into specifics about those. But the idea is,  \npull request automation helps developers build \nthings faster, and helps them understand whether  \ntheir proposed change is good, faster. Deployment \nautomation, helps you deploy your code in a way  \nthat users don't complain. Again, Facebook has \nlots of deployment automation, because if they  \njust threw their code out into the void, \nevery time a developer made a change,  \nthere'd be hundreds of millions of complaints. And \napplication performance management is automation  \naround making sure that things are healthy. So \nautomatically detecting downtime, automatically  \nwaking someone up, if you know, the site goes \ndown overnight, automatically rolling back  \nthings if there's a problem. And we'll get into \nthe specifics of all of these in future talks.\nThe first pillar, which I mentioned \nwas pull request automation  \nhas primarily to do with the developer feedback \ncycle. So developers share work with each other  \nby proposing these atomic sets of changes \ncalled pull requests. And by atomic I mean,  \nthey're full featured on their own, \nthey don't require other things to run.  \nFirst, it's like if a developer proposes a pull \nrequest, they should be expecting that that change  \nis good. And as far as they can tell, the change \nfulfills some business requirements. And then  \nwhat they have to do is get through some gates. \nSo organizations and pull request automation,  \ntheir goal is to make sure that developers can \ntell very quickly whether their change is good  \nor not. So for example, if you're working on a \nwebsite, and the developer proposes a change that  \nadds a typo, that's something that can easily \nbe automatically detected. And if you set up  \na typo gate that says no change may go in if it \ncontains a typo, that would be an easy way to make  \nsure that developers get automatic feedback about \ntheir changes. People say pull requests, you know,  \nas of 2021, usually they mean Git. So Git is \na technology originally popularized by Linux,  \nand it helps developers make these sorts of \nchanges and share them with each other. a pull  \nrequest is usually reviewed by at least one other \nprogrammer and something called a code review,  \nwhere the other programmer will tell you about \ncode style will tell the proposing programmer,  \nwhether there's architectural problems, scaling \nproblems, subjective things that can't easily be  \nautomated. But that process of review can also be \ngreatly facilitated by a DevOps technology stack.  \nAnd DevOps automation can help with things like \nephemeral environments, and from linting. And  \nfrom all of these other automations that we'll \nget into, after the code review has been done.  \nUsually, an engineering manager or product manager \nin charge of the functionality being proposed,  \nwill get feedback. So if you create a new button, \non a website, you'd like the designer that  \ndesigned the button, and you'd like the product \nmanager that requested the button be created.  \nBoth give feedback because if the button is \nphrased poorly, if it's placed poorly, if it's not  \nmobile, responsive, those are all problems that \nwould require another merge request. So it would  \nbe great if the original merge request fulfilled \nall of the requirements, the first time it was  \nproposed. And so usually, non technical people \nwill give feedback on pull requests as necessary.\nSo what can be automated for a DevOps engineer,\nyou can automate things like\nautomated test running, per change ephemeral \nenvironments, automated security scanning,  \nnotifications through reviewers, getting the \nright people to review it at the right time.  \nAnd the end goal of all this automation is that \na developer should be able to propose a change  \nand get it merged the same day they propose the \nchange. That's a huge organizational benefit,  \nbecause it means that critical bugs can be very \nquickly fixed and merged and deployed without  \nneeding a special process. And it also means that \ndevelopers aren't bogged down in bureaucracy,  \nthey can propose changes once they get through \nall the gates, the change will be deployed,  \nthere isn't additional special gates that \nthey need to discover. So for example, if the  \nproper gates and automations have been set up, \na developer should be able to change a web page  \nwithout having to ask everyone in the company. \nWhether this web page is used in certain workflows  \nor not. By virtue of passing the tests and passing \nthe QA review, it's assumed that the new change is  \ngood. And if a problem does arise, a new gate \ncan be added to the automation so that in the  \nfuture problems don't occur. The second pillar is \ndeployment automation. And the famous post from  \n2000s, the founder of Stack Overflow, places Can \nyou make a build in one step as the second most  \nimportant question for a development organization, \nand things haven't really changed since then.\nThe efficiency of the build process isn't the \nonly goal of deployment automation. However,  \nother goals include the deployment strategies, I \ntalked about Canary deployments where you want to  \nshow a feature to one user at a time starting \nnew versions of your application without causing  \ndowntime. If you have to shut off your \nwebsite, before upgrading it, and then  \nturning on the new version, the visitors that \nvisit the website in the middle of the upgrade  \nwill notice downtime. So there's clever \ndeployment strategies you can do to avoid that.  \nAnd finally, rolling back versions \nin case something goes wrong.\nIt's easy to overcomplicate the planets. Many \ncompanies have complex internal platforms  \nfor building and distributing releases. \nBroadly, success and deployment automation  \nis finding the appropriate deployment tools to \nfulfill business goals and configuring them.  \nAnd then ideal world there should be little \nto no custom code for deploying. So off the  \nshelf solutions like Spinnaker and harness are \nwonderful places to start for this sort of thing.\nFinally, application performance management, even \nthe best code can be hamstrung by operational  \nerrors. There's a famous case where a user put a \nbunch of spaces at the end of their post in Stack  \nOverflow. And they brought down Stack Overflow, \nwhich is a very popular developer website,  \nbecause Stack Overflow hadn't deployed their code \nin a way that would deal well with a bunch of  \nwhitespace. So a bunch of space characters at the \nend of a post, even with the best code, and even  \nwith the simplest things like just a messaging \nboard, it's easy to have faults that make it to  \nproduction and are only uncovered by users. So \napplication performance management ensures that  \nmetrics like how long it's taking for requests \nto be processed, how many servers are being used,  \nall of those key health metrics are being \nprocessed. And if there's a problem, like if all  \nof the requests to the landing page are suddenly \ntaking a long time, the appropriate people can  \nbe notified automatically, instead of an engineer \ndiscovering on Twitter that their website is down.\nLogging. So as a program executes, it will \nproduce logs. And the logs generally have  \ninformation about the state of things. \nIt's useful to be able to map back logs,  \nlike, you know, a user visited the website with \ninformation about that user. So what was their IP  \naddress? What was their username, what resource \ndid they access and what resources were used  \nfor fulfilling that access. So if they had to \nload something from a database, and the database  \nwas slow, it's useful to be able to say, the user \nhad a slow experience because their request was  \nfulfilled slowly. But the request was fulfilled \nslowly because it was fulfilled from the database  \nslowly. So mapping these requests all the way down \nto their constituent components is very useful.\nmonitoring. So again, I mentioned metrics \nand automatically alerting people, but taking  \nthe logs and metrics, how slower things how \nmuch memory is left, and deciding what to do. So  \nif there's a bunch of load, you might decide \nbased on the metrics to automatically scale  \nthe number of servers, so add more web servers \nas they're being used. Based on the logs,  \nif there's errors, you might want to automatically \nfile tickets for engineers to look into them.  \nAnd if there's a downtime, you might want to call \nsomeone the person on call so that they wake up  \nand take care of the downtime. And they can drop \neverything, they can have a pager, so to speak.  \nAnd that's alerting. So alerting is when fault \nis detected, some trigger has occurred based on  \nthe metrics, some number of requests or to slow \nthings are unhealthy, you know, users are going  \nto notice degraded performance, someone should be \nnotified or something should be done some action,  \na new product, shouldn't dive into DevOps, \nengineering all at once. So all of that I've  \ntalked about our end goals for really large \norganizations like Netflix and Facebook,\ndevelopers that add automation \nas a situation required.  \nSo a new startup with no users building a website.\npillars two and three are essentially useless \noutages won't be noticed by anyone. Something like  \na downtime won't be noticed by anyone. It doesn't \nnecessarily matter. You don't even necessarily  \nneed to run automated tests, a useful stack for \nsomeone there would be something like that low  \nfive, or sell or our product where you can get \nstaging environments to collaborate with other  \ndevelopers. But that's about as far as you care \nfor testing wise, you just get to an environments  \nfor every proposed change. And you can play around \nwith it yourself to see in a manual QA setting,  \nwhether it's good or not a team building an app \nfor 10 enterprise users. So enterprise users are  \nmuch more sensitive to downtime. So test coverage \nand business hours alerting should be priorities.  \nOn logging and log aggregation error \ncollection, there is popular tools like century  \nand code Cove for automated test running, there's \ntools like bit rise and circle ci vaporizes are  \nknown for mobile testing, and for alerting \nThere's a famous tool called Pedro duty that  \nkeeps track of who should be notified if there's \na downtime. And so during business hours,  \nyou might assign someone to be the person \nthat isn't supposed to take any meetings  \nfor the day. If there's a downtime, they \nwill drop everything and solve the problem.\nAnd a social media app like Reddit might\nbe using a large combination of things so \ncentury for catching errors in the website,  \nElasticsearch LogStash, Kibana is a popular \nway of collecting and looking at logs.  \npingdom will check whether certain \npages are taking too long to respond.  \nlaunchdarkly lets you add feature flags. So \nyou can say whether a feature is enabled for  \nsome group of users or not, should the new landing \npage be shown to users in North America or Europe,  \nin terraform, lets you automate the deployment \nprocess. So given a set of servers and a set of  \nthings that need to run on the servers, terraform \nwill help you automatically create a plan to  \nensure that the right things \nare running in the right places.\nAnd the conclusion of all of this is that DevOps \nengineering is vital for developer teams. By being  \ncognizant of its three pillars, customers will \nhave a confusing and disappointing experience,  \nyou know, things will go down, things \nwon't scale properly, things will be slow.  \nAnd so it's really important to keep the \nthree pillars in mind as you're scaling an  \nengineering organization, or if you're being \nhired as a DevOps engineer. new products don't  \nneed to automate very much. However, as the \nproduct matures, and it gets more users,  \nit's more and more important to automate DevOps \nengineering and to dedicate more resources to it.\nVery good morning to code review automation. Let's \ntalk about testing, which is going to be really  \nvital baseline information for when we talk about \ncontinuous integration, and other code review  \nautomation topic. So test driven development is \na coding methodology, where tests are written  \nbefore the code is written. And, you know, we're \ngonna explain tests and test driven development in  \nterms of coffeemakers. So enjoy this picture \nof a nice coffee maker, as we continue.\ntest driven development spun around for a long \ntime. It was popularized in the early 2000s. And  \nthe idea is simple, but it requires knowledge of \nhow things came to be for it to really make sense.\nSo, historically, common words in software \ndevelopment, like quality assurance, QA,  \nand unit test have roots in factories building \nphysical products. If you were running a factory  \nbuilding coffeemakers, you would test that \nit worked at varying levels of completion.\nSo unit tests, ensure individual \ncomponents work on their own.  \nDoes the heater work? Does the tank hold \nwater? integration tests? ensure a few  \ncomponents work together? Does the \nheater heat the water in the tank?\nsystem end to end tests? ensure \neverything works together?  \nDoes the coffee maker brew a cup of coffee\nacceptance tests after being launched, sent to \ncustomers? Are they satisfied with the result? Are  \nthey confused with the button layout or breaking \nthe coffeemaker within their warranty period?\nAll of these tests have software analogies, it's \nuseful to know which components break in order  \nto diagnose a problem. But it's also useful to \nknow that the whole system is working correctly.  \nBecause even if every individual component works \non its own, and if your coffeemaker doesn't heat  \nwater with its heater, that's going to be \na problem when it comes to making coffee.\nThat's really the idea for testing. But \nlet's get into test driven development,  \nwhich is the methodology built on top of \ntesting that's become so popular in the past  \n10 or 20 years. Most developers that aren't using \ntest driven development have a similar workflow,  \nthey'll choose something to work on. Based on our \nidea of DevOps, it would be in the planning phase,  \nthe developers would find something \nto work on in the planning phase,  \nthey build it, so they'd write code, and they'd \nmake a build from that code. And then they test  \nit. So they've read small scripts that made \nsure that their code was working correctly.  \nIf you're making a function that adds two numbers, \nyou might pass it to into unexpected The result is  \nfour. And that would be a good indication \nthat your function was working correctly.\nSo steps one and three, as it turns out, are \nvery connected. The tests written at the end  \nessentially codify the specification, what is \nsuccess for building a coffeemaker, it should  \nheat up in five seconds. So write a test for that. \nIt shouldn't brew coffee have sufficient strength,  \nso write a test for that, and so on. test driven \ndevelopment uses the similarity of steps one in  \nthree to flip this process. So first, developers \nchoose something to work on. And then they write  \nthe tests before reading the code. So they \nwrite tests that are currently failing because  \nthe specification isn't satisfied. And then they \nwrite code, until all of the specifications they  \nwrote in step two are satisfied. So they might \nmake a testing regimen that would work if the  \ncoffeemaker succeeded, and then build the cheapest \ncoffeemaker, which satisfies that testing regimen.\nAnd the end result is the same. So the software \nis built, it's tested, and it matches the  \nspecifications. But it's significantly \neasier in a lot of cases to write code.  \nIf you write the tests first because you know what \nyou're building and it forces you to think about  \nwhich things are important to work on and which \nthings can be put into a later set of change.\nSo this is a very quick video to discuss \ntesting. And the next video, we'll talk  \nabout continuous integration, which is really the \nDevOps continuation of this idea. See you there.\nSo we've talked about testing, where developers \nread scripts that make sure that their code  \ncontinues working way off into the future years \nafter they've made their code. And that leads  \nus into our discussion of ci, which is really \none of the big topics that people talk about  \nin a DevOps context. And ci stands for continuous \nintegration. It refers to developers continuously  \npushing small changes to a central repository \nnumerous times per day. And those changes are  \nverified by automated computer software that \nruns the tests that the programmers have defined.\nSo we've gone over what tests are. So let's \ntalk about why a company would use ci.\nWell, ci is really the first step in automating \nDevOps. Imagine the very simplest scenario where a  \nsingle developer is making a program \nthat'll be used by a small group of users.\nThat developer makes the original program releases \nit, and the project slowly builds traction.\nNow, imagine that developer has \na critical bug a year later.\nAnd they go back to the old code, and they \nsay, like, gee, this is really bad code.  \nI've become a better programmer since a year \nago. I don't really understand what's going on  \nhere. But that's really how development works. \nProgrammers get better year after year. And  \nthey have to read and understand the bad code \nthat they wrote just a year ago. And the only  \nway to be confident making changes to that legacy \ncode that might just be a year old, is to have ci\nci improves developer speed, because new changes \ncan be made confidently without having to worry  \nabout breaking existing functionality. As long \nas the tests pass ci also reduces customer churn.  \nproblems in the software are much less likely to \noccur. If you have comprehensive tests that run  \nautomatically. As long as you get those check \nmarks, you can be reasonably sure that the  \ncore features of your application will continue \nworking. So how would you integrate ci into your  \ndevelopment process? First, let's talk about the \ncommon branch based development process that many  \ndevelopment teams use. So first, developers \nwork on a feature branch. So they'll take  \nthe files that are most current, the ones \nshown to customers at a specific set of time,  \nthey'll branch off of it. So they'll make \na new copy of the files to work on their  \ntheir feature independently of all of the other \ndevelopers working on things that make changes  \nto the various components. So this feature makes \na change to the mobile app, and to the website.\nAnd then on that branch, they'll push it back \nto the repository, which is usually something  \nlike GitHub, git lab or Bitbucket. And then \nthat repository will run ci, so the CI will  \nbe configured on the repository side, it'll run \nall of the tests that the programmer has defined.  \nAnd then the results of those \ntests will be attached to the  \npull request. And the pull request is the \ndeveloper asking to take their code and to merge  \nit into the central repository that users will \nbe shown. So you take the feature branch here,\nand you put it at the end, and all of the \nother commits that are being shown to users.  \nAnd so this commit is now the one \nthat will be shown to users next,  \nand the next time is a deployment, the features \nthat the programmer meet will be visible to users.  \nAnd the best part is it doesn't cost you \nanything a central Git repositories like GitHub,  \ngit lab and Bitbucket. Most have generous \nfree tiers, even for organizations minus some  \nsecurity and access control, you know, permissions \nfeatures that you might need. As you scale up, and  \nci providers like layer ci, GitHub actions, git \nlab pipelines, all have generous features as well.  \nTheir ci, you know, is really made for people \nworking on websites, that's maybe something to  \nconsider. But if you're really early on in your \nprojects lifecycle, it doesn't really matter  \nwhich ci provider to use. Of course, there's one \nthing to take away from the discussion of ci,  \nit's that ci is a vital tool, it's really \nthe first thing that should be automated in  \nmost pull request automation schemes. Because \nit's so easy. developers should be writing these  \ntests regardless. And so if you don't run the \ntests automatically, slowly, people will break  \nthings without realizing that they're breaking \nthem. And users will notice those broken things.\nAnd following best practices like feature \nbranches and ci is a really easy way to  \nscale a developer team. With just ci, \na developer team can easily scale from  \none to 10 developers. And at some point in \nthere, you'll have to start worrying about  \nother pull request automation topics, like \nthe ones we'll cover in the next section.\ntalk a lot about theory. But let's \nget practical for a little bit just  \nto round out our understanding of \nhow these DevOps concepts work.  \nLet's look at what setting up ci \nlooks like for an actual repository.\ntorey\nThis is the live chat example. It's \nan open source version of slack.  \nThat's used as a demo repository throughout layer \nthree is internal documentation. Let's say for  \nthis open source version of slack, we'd like to \nrun tests every time a developer proposed changes,  \nso that in the pull requests tab, we'd be \nable to know whether a change was good.  \nIn particular, let's say a developer \nwas changing the color of the website.\nIn the main website, After you log in\nthe top bar in sidebar purple,  \nperhaps the customer has requested \nthat the color be blue. Instead,\nif we asked a developer on our team to make this \nchange, they would go to the necessary design file\nand edit the color.\nIn this case, there are two colors to change.\nIf the developer opened this pull request, it'd \nbe very difficult for us to review their change.\nWithout a CI system, all we \ncan see is the file change  \nand the description of the commit. So we can see \nthat they've edited main dot CSS, and that they've  \nchanged these color values. But it's very hard \nto understand the ramifications of this. And it's  \nespecially hard to understand whether this will \nhave negative side effects for existing users,  \nespecially for changes that are less \ntrivial than just changing a color.\nFor this request, if I was asked to review it, \nI would have to pull these changes onto my local  \ndeveloper machine, run the script locally, and \nthen evaluate the changes locally. Or I could ask  \nthe developer to set up a screen sharing session, \nand they could walk me through the changes. Both  \nof these add a lot of friction to the development \nprocess. It'd be better if I could evaluate their  \nchanges without needing any involvement \nat all entirely through a web interface.\nBut continuous integration helps. Continuous \nIntegration allows developers to set up  \ncomprehensive tests, so that if something \ndoesn't work anymore, after a proposed change,  \nit says right in the pull request.\nLet's close this change for now, and look at \nthe repository to understand how to set up ci.\nAnd this repository. One of the services is called \nCypress. And it's an end to end Testing Service.\nIt contains several configurations. \nAnd these configurations  \ninteract with the page with a fake browser.\nFor example, this test enters \na username and password,  \nand then logs in and then ensures \nthat the user is actually locked in\nthis test goes to the message area enters a \nrandom message and ensures that the message  \nhas actually been submitted that it's \nviewable in the remaining chat area.\nWith enough end to end tests,  \nyou can be reasonably confident \nthat a chat system like this one\ncontinues working.\nSo we'd like to run these tests every \ntime a developer proposes a change.  \nTo do so we'll have to \ninstall a plug in into GitHub,  \nset up the server to run after every pull \nrequest and run this test against the new server.\nTo do that, let's set up layers here.\nFor our use cases, it's easy to just \ninstall it directly onto our GitHub account.\nWe can now install it onto our GitHub repository.\nAnd now, it's listed here. This means that  \nwe've successfully installed \nLera ci onto this repository.\nHowever, nothing will happen yet. \nBecause there are no configuration files,  \nwe need to set up a configuration \nfile for this repository that will  \nstart the whole stack and then run \nthe tests in Cypress as required.\nLet's do that now. Because our \nrepository is Docker compose based.  \nLet's use the Docker compose \nexample as a starting point.\nHere, we're going to install Docker, which \nis a containerization technology. We'll talk  \nmore about containers versus virtual \nmachines later on these sets of talks.  \nInstall Docker compose, which is again a way of \nrunning multiple containers at the same time,  \nthese these concepts will become \nclear later on in this talk.\nWe copy the repository files into the test runner.\nWe build all of the services, we start all of \nthe services and then we deploy the pipeline.\nLet's skip the blank for now we'll talk about that \nin the deployment section of this DevOps course.\nAnd after all the services \nare started, let's run tests.\nLuckily, I've already pre set up a script \nfor this, so I can copy my configuration.\nSo to recap, what this configuration will do is\ninstall the necessary software, in \nthis case, Docker and Docker compose,\ncopy the repository files, \nbuild all of the micro services,  \nstart them all locally within the test \nrunner, and then run our tests against them.\nSo now that we've installed \nlayer ci onto our repository,  \nall we have to do is add this configuration, \nand we'll have set up ci for it.\nSo let's click Add File,\nwe'll name it layer file. This is \nhow layer C is configuration files  \nand other ci providers will have \ndifferent file names, of course,\nwe'll copy our configuration.\nAnd we'll commit the file.\nSo now that we've set up ci, we can see that \nthere was a dot next to the commit name.\nAnd that dot turns into a checkmark \nwhen the tests have passed.  \nThis means that every time a developer pushes \nnew code and our source code management tool,  \nlook at a success metric. Namely, whether \nthe tests have passed or not automatically,  \nthey won't have to run the test themselves. \nAnd the reviewer won't have to trust that the  \noriginal developer has actually \ntested that the change works.\nSo let's go back to our original \nproposed change of changing the colors  \nin production from blue to purple.\nHere, we're going to make our \nchange and reopen the pull request.  \nBut because we've configured a CI provider \nfor it, we'll be able to see that the tests  \nare running automatically directly \nin the pull request view itself.\nNow, when our developer asks us for a review, \nit'll be much easier for us to be able to tell  \nwhether the change has negatively affected our \ncustomers workflows. In particular, because we've  \nconfigured Cypress and later ci to check that \nlogging in and posting messages still work. Well  \nknow that for this change, even though many files \nmight have been changed, the core workflows still  \nwork, which gives us a degree of confidence that \nnothing terribly bad has happened with the code.\nSo we can look at the file change for our \nfirst idea of what the developer has done.\nAnd then we can view what the CI is doing. \nSo if we open the relevant pipeline,\nwe'll see that the tests are in progress of \nrunning, the new version of the application has  \nbeen built and started within the CI runner. \nAnd the tests are running one by one. Here,  \nit's tested that you can post chat messages \nwithin our alternative slacks chat page,  \nthe landing page loads, and \nlogging in works correctly.\nSo now within our pull request view, we'll be \nable to see a big checkmark here, which shows  \nthat all of the relevant ci checks have passed. \nAnd then you can even automate within GitHub or  \nother source code management platforms that \ncertain checks must pass entirely. So you can  \nautomate that all ci checks must pass before \na change could be merged. Let's make sure that  \ndevelopers are never reviewing code that's so \nobviously broken that it's breaking your tests.  \nAnd you don't only have to run end to end tests \nhere. You can also run linters unit tests and  \nother versions of tests, which we talked about \nthroughout this series of talks. And now that  \nI'm happy with the change, I've reviewed \nthe files, and I see that the CI has passed,  \nI can merge it with a great deal more confidence \nthan if I didn't have this automation in place.\nThat's it for setting up ci and an applied  \nsetting. Let's get back to \ntheory for a little bit.\nContinuing on the topic of testing \nand continuous integration,  \nlet's talk about code coverage. So code coverage \nquantitatively measures how comprehensive\nThe tests for a code base are, you might think \nthat you have enough tests to find all of the  \ncommon bugs and to really check all of the \nfunctionality of your app. But it's hard to  \nput a number on it. Unless you're measuring \ncode coverage. This is what a code coverage  \ngraph looks like from a popular tool. \nEach of these squares represents a file,  \nand the color represents how many tests are \ncovering that file. So bright green means 100%  \nof the file is tested. And bright red means \nnone of the file is tested. So that would  \nbe a priority of a file that should either \nbe tested or excluded from the measurement.\nSo let's say you're taking \nover an existing code base,  \nit's relatively large at 100,000 lines of code.\nOver the years, it's been adopted by a couple \n100 users, and you're expected to maintain it  \nand add features without harming those users. So \nthe first place you look at is the unit tests,  \nwhich we discussed earlier. But they weren't \nreally prioritized by the previous maintainers.  \nSo there's a mismatch of libraries and naming \nconventions. And it's kind of hard to tell  \nwhich tests are testing which files \nand which files need to be tested.  \nAnd before you write any new features, \nyou'd like an objective way to measure  \nhow sensitive certain parts of the codebase are to \nbeing changed. If something has very comprehensive  \ntests, you'll be much less scared to make changes \nand add features that touch that part of the code  \nthan if there's a part of the code that doesn't \nhave pests. So this is where code coverage really  \nshines. You've got a complicated code base that \nhas existing users, you'd like to enforce that  \ntests are written so that things aren't broken \nin an objective way. So getting into the first  \ncode of this whole series, let's look at this \nJavaScript function, which I will make bigger.\nSo this is a very simple \nfunction, if not a bit contrived.\nIt takes a number.\nAnd it defines a few variables. It loops up to \nthat number, pushing strings into a results list.\nAnd then every 50 elements, it pushes \na special string into the results list.\nSo this whole function is 10 lines of \ncode. But not all 10 lines are equal. So  \nreally, there's three kinds of lines in a \nprogram like this. There's the syntax lines,  \nlike these closing ones that don't actually \nhave any code in them. They're simply syntactic  \nconstructs for the programmers benefit. \nThey don't you know, it doesn't even  \nmake sense to test these because how would \nyou test that a semi colon existed or not?\nThere's logic lines like this one, which \nactually have side effects. And by side effects,  \nI mean that these lines, if you remove them, \nwould change the behavior of the program.\nAnd those branch lines like this one, \nwhich changed the flow of the program.  \nSo for loops, and if statements in programming are \nused, as constructs that change the order of the  \ncommands that run, so this if \nstatement, if it evaluates to true,  \nwould run this line. And if it didn't evaluate to \ntrue, it wouldn't run this line. So to reiterate,  \nthe three kinds of lines are syntactical ones that \ndon't do anything. The actual logic ones that have  \neffects, and the branch ones that \nchange which lines of code execute.\nAnd code coverage is usually defined \nas line coverage. So it's the ratio  \nof the non syntax lines which are executed by \ntests over the total number of non syntax lines.\nSo again, consider this test.\nIf you expect the function \nshould work with the input to  \nand you manually calculate what the \nfunction should return for the input to\nthis would be a unit test for your function.  \nBut since you're only executing it on the input \nto this if statement, which requires an input  \nof at least 50 to execute, wouldn't run. So you'd \nbe testing this line, it would execute this line,  \nit would execute and this line, which \nwould also execute, so you'd be executing\nfive out of six lines,\nand the deed that would be 83% test \ncoverage. So just the single test gets  \nus most of the way to understanding our \nfunction and understanding its problems.\nrelated concept is called branch coverage. So \ninstead of measuring how many lines of code it  \nmeasures groups of lines, in our example, \nabove, there's only two branches. There is  \nthe main branch. There's the body of the for \nloop, and there's actually a third branch called  \nThe if statement body. So here at this line \nwill always execute the body of the for loop.\nwill only execute if i is less than n. so here \nyou need and to be greater than or equal to one,  \nor these lines to execute. And this line will \nonly execute if i is greater than or equal to 49.\nAnd so branch coverage would be how many \nindividual branches out of these three are  \nevaluated to true by a test. So you'd like \nto know how many of all of the branches  \nare tested. And this is useful because if this \nline of code executes, then this line of code  \nwill always execute. So treating them both as \nindividual things that need to be tested, doesn't  \nreally mean as much as taking the bodies of these \nstatements as things that need to be tested.\nAnd if you measured the test with branch coverage,  \nyou'd see the two of the three branches \nor x evaluated during the test.\nSo when should you care about this line coverage \nin branch coverage, we've already discussed one  \nscenario where you've inherited an existing code \nbase. However, it's important in many different  \nsituations. In general, you should measure \nand optimize for code coverage. If any of  \nthe following are true. Your product has users. \nAnd those users might leave if they're affected  \nby bugs, in which case, it's important to \nmeasure code coverage because it lets you  \nwork with your team to improve the code coverage \nand reduce the number of bugs. You're working  \nwith developers that aren't immediately \ntrustworthy, like contractors or insurance,  \nthat you're bringing them into your code base, \nthey need to make changes in some fixed timescale,  \nlike form up internship. So they can immediately \nbecome experts in the entire code base.  \nAnd you'd like them to be able to make changes \nwithout worrying too much about things breaking.\nOr, if you're working on a very large code \nbases, many individually testable components.  \nYour code coverage analysis can complement test \ndriven development, which we talked about in the  \nprevious talk, to make sure that everyone on the \nteam is generally working on important things,  \nand that the things they make \nwon't break in the future.\nSo it's a common mistake in code review automation \nto make things too rigid before the product has  \nenough users, if you force developers to get \n100% branch coverage, so to write two to five  \nunit tests for every function, it's going to \nmake them much slower at developing features  \nthat users will actually notice. Remember \nthat tests are never viewed by users.  \nSo the only thing that users care about is the \nstability of the system. So if you have an MVP,  \nor if you have a product that doesn't have very \nmany active users, yet, it might not be worth  \nit to measure or optimized for branch coverage. \nuntil those users care a lot about stability.\nAnd by writing unit tests, and other types of \ntests, an important thing to keep in mind is that  \ndevelopers are solidifying the implementations \nof features that they might have to throw out.  \nIf you build a feature, and it ends up not \nbeing something that your users actually want,  \nit's always a better idea to throw out \nthat feature, then build it long term. So  \nif a developer builds a feature, and writes many \ntests for it to improve the code coverage of that  \nfeature, they'll be much more likely not to throw \nit out, because they'll feel a sense of ownership.  \nAnd they'll feel a sense of sunk cost in having \nbuilt this feature and made it good, so to speak.  \nSo it's important not to over optimize for \nthese things before, they're important. And  \nit's a subjective idea. But really, you'll notice \nwhen your users start complaining about stability.\nSo organizationally, there are some \ncommon policies related to code coverage.\nThe first one is useful when you inherit a code \nbase. And the policy is that code coverage must  \nnot decrease. This one is one of the easiest ones \nto automate. It's especially useful if you're  \ntaking over an existing code base, as I mentioned. \nAnd the idea is that code coverage ratio should  \nnever decrease. If the current code has 75% of \nits lines tested, and your new change introduces  \n40 lines of code, at least 30 of those lines \nwill need to be tested. Otherwise, your changes,  \ncode coverage would be less than 75% 30 out of 40. \nAnd you'd be decreasing the average code coverage.\nAs with most code coverage policies, this will \nincrease stability, so there'll be less bugs  \nbecause things will be better tested at the \nexpense of developer speed. So developers  \nwill have to make some complicated tests, \nand they might spend a lot of time making  \ntesting infrastructure. So features will be \nshipped less quickly if you make this sort of  \npolicy. And if you enforce it \nwith code review automation.\nunfortunate side effect of this policy is \nthat changes that would be harder to test  \nsuch as integrations will be less \nlikely to be worked on by developers.  \nSo developers are incentivized by \ntheir paycheck and by their manager to  \nship features quickly to make many features \nper Scrum cycle. And so if certain features are  \nharder to test, because they require internet \nconnectivity, or connected third party API's,  \nthose features will be harder to make and \nharder to test. And so developers will be\nless likely to make them regardless of \nwhether they're important to the users or not.  \nSo it might be useful to have an exemptions policy \nin place for things like third party integrations.  \nIf your organization decides to go for this \ncode coverage must not decrease policy.\nAnother useful policy is code owners for test \nfiles. If you've used code coverage automation  \nto keep code well tested, it's often beneficial to \ndefine code owners for the tests themselves. This  \nmeans that developers can change implementation \ndetails without formal reviewers. But logic  \nchanges. So the tests define what success means \nfor a function or for an algorithm, then, changing  \nthe tests for a new implementation would need \nto be approved by a senior developer or manager.\nin GitHub, with an engineering manager, a GitHub \ncode owners file might contain this, which means  \nthat spec dot j s is a common JavaScript testing, \nnaming convention. And at engineering manager  \nusername means if, if there's a file called code \nowners, which contains this, then the engineering  \nmanager will need to approve any change, which \nchanges a test, which is probably a good policy.\nSo if you're working in a large code base \nwith test driven development, especially,\nor if you're hiring interns, or contractors, or if \nyour users are especially sensitive to bugs, and  \nyou're afraid that they'll have a bad experience, \nif the even small bugs make it to them,  \nit might be in your team's best interest to \ninstall a code coverage measurement tool.  \nAnd at the time of writing, these \nare the three most common ones in  \nthe open source world code coverage, \ncoveralls and Code Climate.\nSo we've talked about testing, and we've talked \nabout continuous integration. And those are  \nreally like the initial things that are set up \nin a DevOps code review automation pipeline.  \nBut the problem is that it requires the \ndevelopers to be on board. And of course,  \ndevelopers are probably busy building \nfeatures and might not necessarily want to  \nmake tests or improve test coverage. \nSo let's talk about linting,  \nwhich is something that approximates testing, but \ndoesn't need the developers to spend any time.\nlinters are programs that look at a program source \ncode, and find problems automatically. They're a  \ncommon feature of pull request automation, because \nthey ensure that obvious bugs do not make it to  \nproduction, obvious here in quotes. So an example \nof linting. Let's again, look at a JavaScript  \nprogram, the very simple one, you should \nunderstand even if you don't know JavaScript,\nit defines a variable var x equals five, \nand defines a function but continues  \nafter the open bracket, which is generally \nconsidered bad practice. It uses let for the  \nsecond variable and defines it with the same name \nas the first one. So this is just confusing, and,  \nyou know, wouldn't be called good code, a code \nreviewer would mentioned this in a code review.\nAnd then it says while x is less than 100, \nconsole, log x, and then it closes the while loop  \non this line, and it messes up the end Det. These \nthree lines should be indented for consistency,  \nand then it closes the function. Finally, you \nshould realize that this while loop goes forever.  \nx isn't incremented in the body of the while \nloop. So just by looking at the code statically  \nwithout running any environment or looking \nat the code with a browser even, you can  \ntell that this loop will run forever, and that's \nprobably something a programmer didn't intend.\nSo\nmuch of this feedback could be automated, a set \nof rules like don't shadow variables. Never name  \na variable in an inner scope that has the \nsame name as a variable in an outer scope  \ncould be applied to each proposed change, so that \nhuman reviewers would not have to waste effort  \nleaving code style comments. tools that \nmaintain and run such lists are called linters.\nrelevantly, another class of code review \nfeedback has to do with code style.  \nIt's easy for coder bureaus to waste time pointing \nout stylistic choices like tabs versus spaces, or  \ncamel case versus pothole case. These \ndiscussions bring no value to end users,  \nyou know, your customers don't care what case \nyour code is written in. And ultimately, they just  \nserve to cause resentment and missed \ndeadlines within engineering teams.  \nIf a review takes an extra couple hours \nbecause of comments like this, that's a  \ncouple hours that the programmer could have been \nfocusing their attention on another feature.\nSo engineering organizations should eventually \nadopt to maintain a global style guide.\nBut in most cases, just starting with \nsomething like the Google Style Guide,  \nwhich is open source and available at \nthis link, is a great starting point.\nThese guides often come with linter \nconfigurations, which help everything\nStay stylistically similar, and some programming \nlanguages like Python and go come with their own  \nstyle guides and automation, like Pep \neight. In the case of Python that will  \nmake it easy for developers using those \nprogramming languages to stay in a unified style.\nan organizational thing you can do for code \nstyle is to knit, or which stands for nitpicking.  \nInstead of blocking at the code review stage, if \nthere's review feedback that a code style review  \nfeedback, it might be better for code reviewers \nto leave small review comments called mitts.  \nSo they'd say knit full colon \nshouldn't be styled this way.\nThis is great. Because it allows the reviewers to  \nmerge something with a few pieces of feedback \nso that ours don't have to be spent on  \na small piece of refactoring that could be \ndone in a later state at a later point of time.\nOnce the style guide is adopted, it's possible \nto configure tools to automatically format code  \nto follow the Style Guide, which tools are called \nAuto formatters. And the programming language go,  \nwhich we use at layer ci, a command such as \nthe following would use the standard format  \nare the one that comes with go to clean up \nall of the source files in the repository.  \nSo we'd use the Janu, find command, \nfind the files that have a go extension,  \nand we'd exec go format on them. And this \nwill take all of the source files and then  \nformat them with their style guides \nso that they all pass the style guide.\nAnd of course, if your ci system is running tests \nautomatically, every time your code is pushed,  \nthe code could be automatically limited as \nwell. Programmers shouldn't have to wait for  \na human reviewer to tell them whether the code is \nlimited and styled appropriately. In most cases,  \nit's cheap and convenient to run linting and \nformatting automatically with a CI system.\nSo an easy solution is you get another \ncheckmark. To get something set up quickly,  \nit's a good start to make lint act the same as \nrunning a unit test in ci, so add an x if the  \ncode isn't listed properly, and then the developer \ncan very quickly get stylistic feedback without  \nneeding to talk to another human or wasting their \nreviewers time for getting this sort of feedback.\nAnd a CI configuration that might look like this.  \nSo copy the project files, run the linting the \nscript. And then if the linting script fails,  \nthe whole pipeline would fail. This approach \nstops reviewers from the picking style, it passed  \nthe linter is a perfectly reasonable response to \nan overly zealous code reviewer. So even simple  \nautomation like this can improve the development \nspeed of entire development teams. It also stops  \nreviewers from having to give style feedback at \nall, at all of the checks for code review pass,  \nlike it passes all of the linters \ndone the committed stylistically Okay,  \nthe reviewer might still leave some feedback for \nfuture reference, but they shouldn't be blocking  \ncommits getting to production because of small \nstylistic choices that aren't even in the linter.\nA better long term solution is \nto set up a commit back button,  \nwhich is common idea that happens all over \nthe place and code review automation. But  \nin this specific example, it might look like \nthis. So you'd say if the code is not limited,\nrun, yes, lint with the dash dash fix flag,  \nwhich again, goes through all of the source \nfiles. Yes, lint is the linter for JavaScript.  \nSo this would go through all of the source files. \nFor each of them, it would apply the linting\nrules, and it would fix any stylistic \nerrors. And then it would create a commit\nan additional, you know set of file changes \non top of what the developers proposing.  \nAnd it would create a new branch with a suffix \nlisted. And it would push to that branch.  \nSo that developer pushes unlimited code, the bot \nwould automatically create a commit which lifted  \neverything and it would create a new branch so \nthat if the developers code was known to be good,  \nthe reviewer could simply merge the Linton \nbranch instead of the developers original one.  \nAnd then we failed the pipeline with lint \nfailed. This means that the unlimited version  \ncan't be merged. But the limited one, assuming \nall the feedback that isn't listed related,\ncould be merged. So we'd have two branches, the \none the developers proposing and the limited one,  \nthe code reviewer would look at the one that \nwasn't rented. They'd say whether it was good  \nor not, like the logic of the commit was good. \nAnd if it was good, then the reviewer in GitHub  \ncould merge this branch instead of \nthe one they were asked to review.  \nThis branch would be the same as the original \none with an additional commit on top of it.\nSo some examples of limiters \nfor many programming languages.  \nJavaScript the standard as a 2021 is Eastlands. \nTypeScript. Also now uses Eastlands, Python you\npiland and flake eight. c++ is much more \nsubjective. But a common choice is Google  \nCPP lens from the Google style guide mentioned \nabove, go comes with a format called go format,  \nwhich acts somewhat like a linter. Although \nthere's additional libraries available for rules  \nbeyond that, Java has checkstyle and find bugs, \nmaybe older options, but there's a lot of choices  \nfor languages like Java. And Ruby has broke \nrubocop and pronto. We've seen users commonly use\nand Java, JavaScript C sharp, and many other \nlanguages can be lifted with sonar cube,  \nwhich is a popular static analysis \nframework that is commonly used at  \nlarger enterprises. But it has an open source \nversion, that is a good place to start for  \n10 developer teams that would \nlike to set up static analysis.\nAnd finally, it was a startup called \nDeep source that we've talked to\nstartup to startup. And they're doing all sorts \nof interesting stuff with static analysis as well.  \nStatic Analysis is just the practice of \nlooking at source code without running it  \nand finding bugs. So I'd encourage \nyou to look at deep source as well.\nSo in comparison to most other code automation \ntools, linters are exceptionally easy to set up.  \nAny team with more than one developer \nshould almost immediately set up a linter.  \nTo catch obvious bugs like infinite loops. Just \nby looking at the code, the linter would be  \nable to tell you whether there was a common \nprogrammatic error like an infinite loop.\nAutomatic linting comes standard has many code \neditors. So it would be wise to teach developers  \nhow to configure their code editors to use \nthe existing linting rules that your team  \nhas set up in the CI automation, so that the \ndevelopers don't have to wait to push their  \ncode to get this feedback, they can get the \nyellow squigglies directly in their editor.\nAnd then teams working on earlier products. \nMentors can help avoid writing unit tests at all.\nInstead of relying on a test \nsuite, you can rely often on  \na static analysis to find common bugs \nlike the code not compiling at all or\ninfinite loops or stylistic problems. \nThis helps small teams refer their product  \nhas many users get feedback without \nneeding to lock things in with tests.\nRight. So that's it for linting and \ncode style. We'll see in the next video.\nLet's finish up our discussion of \ncode review automation by talking  \nabout ephemeral environments, which are \nreally the latest and greatest when it  \ncomes to doing code reviews and helping \ndevelopers get their changes merged.\nephemeral environments are temporary environments \nthat contain a self contained version of the  \nentire application. Generally, for every feature \nbranch, they're often spun up by a slack bot,  \nor automatically on every commit using DevOps \nplatforms like later ci itself, or Heroku.\nTemporary environments are overtaking traditional \nci platforms as the most valuable DevOps code  \nreview experience. Because these environments \nare made on every change all of the stakeholders,  \nnot just developers, but the product, people in \nthe designers can review a change without needing  \nthat set up a developer environment or asking to \nscreen share with the developer that proposed it.\nSo for a more concrete example, let's \nsay developer is changing something  \non a website. So they're changing, you know, \nthe front end or the back end, or, you know,  \nsome component of the website. And they'd \nlike to get feedback on the proposed change.  \nSo a code reviewer would look at the \ncode and they might not understand what  \nthe visual ramifications of that change \nare. But within the femoral environments,  \nwithin the code review view itself, the reviewer \nwould just have to click that button there.\nI'll zoom in. So within GitHub, this is what the \nreviewer would see. They'd See The Description,  \nthe code change, but also a button to view the \nephemeral environment. And when they click that  \nbutton, it wakes up a version of the website \nspecifically with this proposed change in it  \nso that the reviewer can actually \ntake a look at things and  \nsee whether the changes is visually \nand workflow wise, working well.\nIn general, ephemeral environments \nlike halfway between development  \nenvironments and staging environments. \nAt the extreme staging is entirely  \nreplaced by formal environments in \nsomething called continuous staging.\nBenefits of ephemeral environments. \nWell, the most common reason to adopt  \nan ephemeral environment workflow is that is that \nit accelerates the software development lifecycle.  \nDevelopers can review the results of changes \nvisually, instead of needing to exclusively give  \nfeedback on the code change itself. Additionally, \ndevelopers can share their work with non technical  \ncollaborators such as designers as easily \nassuring a link to the proposed version.\nSo\nYou could post a slack message like this \nsaying, could you go to this link and  \ngive me feedback instead of needing to \nset up a zoom call to share your screen  \nto get the other person to \nlook at your proposed changes.\nThe hardest part of setting up ephemeral \nenvironments are dealing with state.  \nSo dealing with things like \ndatabases and microservices,\nby their nature, you know, ephemeral \nenvironments are temporary.  \nThey're isolated from production environments, and \nreally only lasts as long as a pull request does.  \nA reviewer should be able to delete a resource \nin a review. So they should be able to see if you  \nknow, deleting a user still works without fear \nof that affecting the production environments.  \nSo in the early implementation of ephemeral \nenvironments, it might make sense to connect  \nAPI servers with read only permissions to a \nstaging database. So if you're using AWS, you  \nmight have an Iam role that has read only access \nto the database. But in that case, you wouldn't be  \nable to sign up to the service, for example, \nbecause that would require database rights.  \nThe end goal should be to have a fresh \ncopy of the database for every commit.  \nSo every time a developer \nproposes a change, they get  \nthe new database specifically for their \nenvironment that they can do whatever they want in\nan ideal ephemeral database has \nthree attributes. It's pre populated,  \nso it contains representative anonymized data. \nThe past security audits of PII, personally  \nidentifiable information must be scrubbed \nfrom databases used in ephemeral environments.  \nIt should be undoable. So if in the course of \nreview data is deleted, it should be easy to reset  \nthe database to its original state. This is also \ncrucial for reading destructive end to end tests,  \nwhich we'll get into later. \nAnd it should be migrated,  \nthe database should use the schema currently \nused in production, it's not very useful to  \nknow if something's working with an old version \nof the schema. One of the most common classes  \nof problems uncovered by formal environments or \nbroken or nonperformance database migrations.\nAnother hard problem to solve with ephemeral \nenvironments is the life cycle. So when would you  \ncreate them and when you destroy them? The classic \napproach is to title lifecycle of a pull request  \nto the lifecycle of an ephemeral environments. So \nif the developer opens a pull request, create an  \nenvironment for them, keep it running 24. Seven \nuntil the developer deletes the environment.\nThe biggest factor to consider there is cost. \nIf each FML environment costs 10% of production.  \nSo it's 10% cheaper, and you have 30 open pull \nrequests, you'd be quadrupling your monthly costs.  \nSo you know, that's an expensive developer tool.\nAnother approach is to create a chat ops bot that \nallows creating new environments for a specific  \nbranch with a specific timeout. So for example, \nthe user type slash PR bot creates in the GitHub  \nissue description that could create an environment \nor in Slack, the user could do the same thing.\nThis requires the environment to be provisioned \nat the time that it's required, which can be slow.  \nAnd it's again, hard to tell when to delete these.  \nThe best approach is to create an \nephemeral environment for every change.  \nSo similar to the PR workflow, but \nhibernate them as they're provisioned.\nThere's only a few providers that do this. So one \nis Heroku, which will, with Heroku review app can  \nturn on and off environments. And the other \none is layer ci, shameless plug, I suppose.\nSo as users use the environments, and layer \nci, there'll be a hybrid ninja not enough.  \nYou can automate this yourself with memory \nsnapshotting, but it's somewhat involved. So  \nthis might be something that's better \nleft to using a third party for.\nAnd back to that idea of continuous staging.\nThe idea is to merge staging ephemeral \nenvironments and a CI pipeline altogether. So this  \nis kind of layer ci itself primarily sells to our \nusers. As your ephemeral environments become more  \npowerful and easier to create. They approach and \novertake many aspects of traditional continuous  \nintegration pipelines. So if you can set up \nthe website, and the back end and the database,  \nthen it's relatively easy to run tests because \ntests are usually much easier to wrap them the  \nentire back end. At its logical conclusion, this \nconcept becomes continuous staging, where ci CD  \nand ephemeral environments form a single \nci CD flow where a single base sets up all  \nof the requirements for everything. And then that \nforks off into the unit tests but also the server  \nbut also how the review environment but also the \nlinter is everything comes from that common base.\nIf you're going to make them \nyourself, you should probably budget  \nabout a month, or a month of time \nit took to set up your environment.  \nSo if your production environment has many \ndifferent microservices and has many different  \ndatabases, it'll be relatively difficult \nto set up an ephemeral environment flow.  \nLarge companies like Facebook have set \nthis up for their internal pull requests.\nBut they haven't hired developer teams, \ninfrastructure software engineers that do this.  \nSo if you're a smaller company, you might want to \nstick to a hosted service again, like layer ci,  \ninstead of making it yourself up to \nmaybe when you have about 20 developers.\nAnd to avoid having to micromanage \nstarting and stopping environments,  \nit's easiest to use a hosted provider. If \nyou're doing just front end development.  \nSome popular choices are for cell netlify. But \nif you're doing full stack deployments, really  \nthe only choices available right now are layer \nci itself and Heroku review apps. There are some  \noptions available in many source code platforms \nlike Git lab has a environments feature.  \nBut it's not really truly an ephemeral \nenvironments feature. So you should  \nexplore all of those options \nmake an informed decision.\nSo that was ephemeral environments. \nAnd that concludes our discussion of  \ncode review automation.\nBecause pull request automation is \nsuch a core part of DevOps engineering,  \nlet's do another applied tutorial here.\nIn this example, we'll be setting up \na femoral environments the same way  \nwe talked about before using a hosted \nplatform for the sake of simplicity.\nSo because we've already set up ci for this \nrepository, we already have our layer file,  \nwhich is our CI configuration. However, many ci \nproviders including layer ci, Roku, and others  \ncan set up ephemeral environments, which \nare small production deployments you can use  \nto evaluate the changes live as a reviewer. Again, \nlet's say we're changing the color this time back  \nfrom blue to purple. And we'd like someone to be \nable to efficiently review our change, not just by  \nlooking at the test results, but also by looking \nat the federal environments. To read manual QA,  \nyou might see, in this case, it's actually very \neasy to set up. Let's go to our web micro service.\nLet's create a new file.\nHere, we'll make another layer file so that  \nthey run in parallel. And we'll \nsay from our base layer file,\nwe'll say expose website.\nAnd we'll expose the website running inside the \nrunner itself. Later ci has this expose website  \ndirective, but many other providers have \nsimilar functionality that you can set up.\nAnd let's jump right to \ncreating a pull request for it.\nSo here, our code reviewer would \nnot only see the test results,  \nas you can see, those are \nhere, the initial layer file.\nLet's look at the actual  \ngraph to understand better what's going on. Here \nwe have our tests running in the main layer file.\nThe main layer file has again built all of \nthe services started all of the services.  \nAnd now it's running our Cypress tests \nthe same way it did in the CI chapter.\nBut after the Cypress tests run, we'll have a \nsecond environment, which is inheriting from  \nthe first and that second environment will have \na clickable link that can be used for manual QA.\nSo let's see that here.\nThe snapshot is done being taken of the tests,  \nwhich means that the ephemeral \nenvironment can start being built.\nAnd now you can see that it's built a staging \nserver button, and you can connect to it here.\nSo in our actual pull request, now that all \nof the tests and ci services have passed,\nwe can click the femoral environment button.\nAs soon as it appears.\nWe could click the main layer file details,\nwe can click the services \nweb ephemeral environment,\nand we can click View website. And \nwhat this does is it wakes up the  \npipeline which we initially set up to run our \ntests. But it forwards the internet visible link  \nto the web server inside. So here \nwe've created a fresh environment,  \nspecifically for this test, and we can see \nthat the test has run and sent the message.\nAnd we can evaluate this change so we can \ntest that creating channels works for example.\nAnd that in the test channel, it's \nstill possible to set messages.\nThis means that you don't need 100% test coverage \nto be able to understand the nuance of a channel\nFor every pull request, you'll be able to \nspin up a new environments automatically,  \nand then wake up that environment \nwhen a review needs to be completed.\nAnd now that we're satisfied with the environment \nworks correctly, we can merge the pull request.\nAnd from now on, all changes which edit \nthe website can be manually curated,  \nso the reviewer can check that things work, \nbut also a QA team or a designer or a product  \nmanager might be able to check that \nthe change actually changes what it's  \nsupposed to do. That's it for formal \nenvironments. Let's get back to theory.\nWelcome to DevOps Academy deployments. And this \none, we'll be talking about foundational concepts.  \nAnd primarily, when you talk about \ndeploying, you're talking about VMs.  \nAnd you're talking about containers. And \ncontainers are often also known as Docker.  \nSo let's talk about the difference between those \ntwo. Before we talk about deploying anything.\nPeople talk about DevOps deployments, they're \nusually talking about the point that Linux,  \na large portion of all \ndeployments are to Linux servers.  \nAnd containers are really only defined in \nterms of Linux, in production as of right now.\nSo with all that in mind, let's \ntalk about Linux in the abstract.  \nSo what Linux really helps you do is take care \nof four things when you're writing programs,  \nit takes care of memory. So programs need memory \nto do things, memory is also known as Ram.  \nAnd since you only have a finite amount of it, \nLinux itself needs to figure out which programs  \nwill get which sections of memory, so which ram \nsticks will have which programs running on them.\nLinux also takes care of processors. So \nif you're running two things in parallel,  \nLinux will make sure that the right amount \nof processors are dedicated to both.\nIf you're, if you've ever run very computationally \nintensive tasks on a laptop, you might notice that  \nyour browser gets laggy. That's because \nit's not getting enough processor time.  \nSo if you're running production \nworkloads, Linux needs to make sure  \nthat every program is getting its fair share \nof processor time to run the actual program.\nBecause disk, so Linux takes the files of all \nprograms and allocate space on the disk for them,  \nyou might have multiple disks, and you might \nhave both spinning disks and solid state drives,  \nyou might even have disks shared across networks. \nSo Linux takes care of all of that and make sure  \nthat the right files are on the right disks, \nand that programs have access to those files.\nAnd finally, there's devices. So \neven beyond disk memory, and CPU,  \nthere's things like GPU. So for \nmachine learning, you see GPU often,  \nand things like network cards, which \nyou use for connecting to the internet.\nLinux needs to take these individual resources \nand allocate them to processes. So if you have  \nfive processes trying to connect to the internet \nat the same time, but only one network card,  \nLinux needs to make sure that the right \nmessages are sent to the right websites  \nupstream. And the responses are sent \nto the right programs downstream.\nSo in a diagram, this is \nwhat that would look like.  \nSo here we have three programs, Chrome, \nNotepad, and Spotify. And they're all  \nrunning in Linux. So this is assuming you have \na Linux server running these three programs.\nAnd here you have the four shared resources. So \nChrome, asks for CPU, and Linux will allocate  \nsome of the CPU time to Chrome. And it'll also \nallocate something notepad and some to Spotify.  \nAnd similarly for all the other shared resources.\nSo this is great, but there's too much \nsharing going on. What I mean by that is that  \nprograms know about each other. So if you \nhad a program that accept expected a file at  \nhome calling file dot txt, \nthen it could create that file,  \nbut another program could delete or read that \nfile. so files can be read across programs. And  \nthat means those programs can communicate between \neach other, which isn't always what you want.\nSo, for example, programmers often use \ndifferent versions of Python. Python is  \na popular programming language. And \nthere's two popular versions used.  \nOne is Python two, and one is Python three, but \nthey're both called Python. So if the file at  \nuser bin Python is a Python two executable, and \nyou try to run a Python three program with it,  \nthen that program would error because you'd be \nusing the wrong version of Python to run it.  \nHowever, some of your programs might need Python \ntwo, and some of them might be Python three.  \nSo here, there's cross talk between programs in \nthat they're both reading user bin Python, but  \nthey expect there to be different files there. So \nthat's what I mean by programs overshare sometimes\nThey need different versions \nof files at the same place.  \nAnd so you can't really run \nboth programs at the same time.\nSimilarly, two web servers might listen \nto Port 80. That's how websites allow you  \nto connect to them. So if you're running \ntwo web servers that both expects Port 80,  \nto be open, the first one will start \ncorrectly. And the second one will crash,  \nsaying that Port 80 is already used these \nsorts of problems of sharing resources  \nis really where virtual machines and containers \nshine. They allow you to separate resources like  \nfiles and ports between programs so that \nprograms can't step on each other's feet.\nSo here, if you are running your \nthree programs in that container,  \nit would look remarkably similar. \nSo Chrome would be running,  \nbut it would be running within a container. \nAnd that container would be talking to Linux,  \nwhich would then allocate the container \nresources. And similarly for the other programs.\nNow, this might not make sense yet. But let's talk \nabout what actually happens when you put something  \nin a container like this. So what happens when \nthere's a container between a program and Linux?\nThe big change is that each \nprogram will get its own  \nversion of shared resources \nlike files and network ports.\nThe container running chrome might create \na file at tilby slash chrome slash cash.  \nWhile the container running notepad could \nread that file and see that it didn't exist,  \nthey get different copies \nof all of the systems files,  \nso that they couldn't talk amongst each \nother, or have conflicting Python versions.\nSimilarly, if you had two web servers running \nthat both expected to be able to open port 81,  \nwould be able to open port 80 in their container, \nand the other would be able to open port 80 in  \ntheir container. So you can have two programs \nboth thinking that there are the only program  \nlistening on port 80. But really, they'd \nbe isolated within their own containers.\nSo in Linux containers work by creating \nnamespaces, which are a Linux feature  \nthat groups shared resources together. If \nyou had five processes running together  \nwithin a Docker container, they'd still \nbe running within Linux itself. But they  \nwould not see the other processes, the \nones on the main Linux machine itself.  \nSo within the container, if you ran PS, au x, and \nyou counted how many lines of output there were  \nVSD UX is how you see the running commands \nin the Linux machine, you might see 10. And  \nthat means that there was 10 processes visible \nto you within the container. But within Linux,  \nso within the container up here, if you said how \nmany processes were running, it would say there's  \n10 processes. But within Linux itself, you'd see \nhundreds of processes running, including the 10  \nfrom this container. So the containers are kind \nof sandboxed or namespaced, into a single group of  \nprocesses where the processes can't see the files \noutside of the container, or the processes or the  \nnetwork ports outside of the container. They \nonly see the ports within this container.\nSo essentially, what's happening is the programs \nare asking, what are the contents of user lib  \nPython, in our example before and instead of \nanswering truthfully, Linux is answering with  \nthe contents of another file. So the container \nsays what is user lib Python, and then Docker,  \nif you were using Docker for your containers would \nrespond with the contents of this file var lib,  \nDocker overlay Fs one user lib Python, which is \na totally separate file in the global system.  \nSo each container would have \nits own view of the files.\nThis little deception allows programs to run in \nparallel, because Linux would be would respond  \nwith different files for each container. One \ncontainer could have Python pointing at a Python  \ntwo executable, and one container could have \nPython pointing at a Python three executable.\nSo if that's how containers work, then \nhow to VMs work, how are they different?\nWell, VMs are very similar to \nemulators. If you've ever seen  \nsomeone running an older video game on \na modern computer, they're using a VM.\nSo the idea for containers \nwas to provide fake Linux.\nWithin the container they don't really \nknow they're running with within a  \ncontainer. They see files, but the files \nare simply pointing at a different place  \nwithin the real Linux installation. The \nidea for VMs is to produce fake versions  \none level below that. So pretty produce fake \nversions of the CPU, RAM disk and devices.\nThe VM equivalent of Docker \nis called a hypervisor.  \nIt's the program which is in charge of creating \nthe VMs. So when a VM is running something,  \nit corresponds to an instance \nof the hypervisor within Linux.\nThe hypervisor might lie to the VM and say \nthere's one SSD attached. There's one drive  \nattached and then has 50 gigabytes of capacity. \nBut then when the VM writes to that drive,  \nit would instead go to a file, it wouldn't go to \na real drive. And then on the host, it might be\nThis file. So when the VM itself is writing to \nthe file, it's actually going through this file,  \nwhich is very similar to the deception of \nmatching files directly that the container  \nhad. But there's some practical differences. The \nfirst is that VMs are very powerful. You can use  \nthem to run other operating systems, such as \nMac OS, or Windows, and different hardware  \nconfigurations, you can emulate a gamecube, \nor an apple two within a Linux hypervisor.\nin containers, it's the processes that are being \nlied to, they must still have been the sort of  \nthing that would run within Linux itself. But \nin VMs, there's a nested operating system that  \ngenerally doesn't know it's not talking to the \nreal hardware. When the OS writes things to its  \ndrive, for example, those rights are sent to \na file in Linux instead of a physical drive.\nSo\nwhen the process writes to the \noperating system within the VM,  \nthat operating system sends the right to \na drive, or what it thinks is a drive,  \nbut that drive goes through Linux, \nand Linux actually maps it to a file.\nVarious benchmarks show that CPUs and VMs are \nabout 10 to 20%, slower than containers. VMs also  \nusually use 50 to 100% more storage, because they \nneed all of the things that an operating system  \nwould need. Duplicate containers don't need all of \nthe files, they only need the application files.  \nAnd finally, VMs use about 200 megabytes more \nmemory for the operating system itself. Again,  \ncontainers don't need all of the operating system \nbecause it's the processes that are being lied to.  \nSo VMs use more memory, they're \nslower, and they need more storage.\nSo given these performance benefits, it looks \nlike containers are almost always a better choice.  \nAnd in most cases they are However,  \nthere's a few cases where VMs are a better \nchoice. Again, VMs mean virtual machines.\nIf you run in untrusted, so user supplied \ncode, it's difficult to be confident that  \nthey can't escape a container. This \nhas gotten better in recent years,  \nbut it's long been a contentious point. Virtual \nMachines are much older and much more mature. So  \nif you're running untrusted code, usually it's \na good idea to put that within a container.\nIf you're running a Windows or Mac OS script, \nso you're running a script that only runs on  \nanother operating system, you'd need to use a \nVM for similar reasons. Or if you're running  \nan old video game that doesn't run in Linux, \nand you'd like to run it on a Linux computer,  \nyou'd need to VM. And vice versa, if you're \nusing VMs, and other operating systems,  \nif you'd like to run a Linux program in Windows, \nyou'd usually have to use a VM to run it.\nAnd finally, you can emulate hardware \ndevices like graphics cards with a VM.\nSo if you're testing that your graphics card \nworks correctly, you could emulate the response  \nthat it would give and then test that the \noperating system is working as expected.\nSo that's the big difference \nbetween VMs and containers.  \nAnd these are really the two \nthings that you often deploy.  \nSo let's go into actual deployment strategies \nin the next talk. I'll see you there.\nLet's keep talking about deployments. So rolling \ndeployments are one of the most popular deployment  \nstrategies. And we'll talk about the pros and cons \nof different deployment strategies throughout this  \nsection. Rolling deployments themselves work \nby starting a new version of the application,  \nsending traffic to the new version, to make sure \neverything's okay, and then showing off the old  \nversion and repeating that until all versions of \nthe old version or versions of the new version.  \nI realize I've said version many times. So let's  \nlook at pictures that will \nhelp illustrate the point.\nThis is the myrn app. myrn stands for \nMongoDB, Node JS, react, and express js. Here,  \nthe user's web browser connects to \nboth the front end and the back end,  \nwhere front end is the stuff that the user \nsees. And back end is the services that  \nprovide connections to the database. So if \nyou log in, you're connecting to the back end.  \nIf you're just viewing the landing page, \nyou're connecting to the front end.  \nLet's say your app has enough traffic that users \nwill notice if it goes down for a little while.  \nHow would you push a new version of the \napplication without causing downtime.  \nThis is where rolling deployments come in. The \nhigh level algorithm for a rolling deployment  \nlooks like this. So you create an instance of \nthe new version of the backend say, you wait  \nuntil it's up. So you keep trying to connect to \nit until you get a response that satisfactory.  \nAnd then you delete an old version and \nroute the traffic to the new version.  \nIf any instances of the old version still \nexist, go back to step one and repeat.\nAnd our myrn example, we'd initially \nsee three instances of the initial  \nversion and one instance of the new \nversion. And we'd repeat the process\nUntil we had three instances of the new version \nand one instance of the initial version.  \nSo here, all of the versions are the back end.\nAnd we add a new version of the new back end. And \nwe turn off a version of the old back end. And we  \nkeep repeating that. So as time goes on, the red \nones replaced the pink ones. And then after a few  \nloops of this, the only ones remaining are red \nones, we've added a red one, remove the pink one,  \nadded the red one, remove the pink one. And we're \nred is the newest version of the application.\nSo what are the benefits of rolling deployments \nover other ways of deploying things? Well, they're  \nwell supported. Rolling deployments are relatively \nstraightforward to implement. In most cases,  \nthey're natively supported. And several \norchestrators, if you've heard of Kubernetes,  \nfor example, Kubernetes helps you with \nthis. AWS, Amazon Elastic Beanstalk  \nalso supports rolling deployments.\nThey don't have huge bursts. So in another \ndeployment strategy, which we'll talk about,  \nif you had three versions of the back end, you \nneed to start six in total, to deploy the new  \nversion, and then you turn off the old three. \nSo doubles for the duration of the deployments,  \nthe amount of things running, which might \nbe difficult if you have a finite number  \nof servers, for example. It's also not \nuncommon for services like databases  \nto limit the amount of connections. So if you \nhad six versions of the backend connecting to  \nthe database, now that might be too much load \non the database, so that could cause problems.\nAnd really, deployments are easily reverted. If  \nin the course of an upgrade, you notice \nproblems, it's usually easy to reverse  \nthe rolling deployment by just going in the \nopposite direction, removing a red adding a pink,\nyou can go in the opposite direction as \nwell to rollback which is an important  \ncharacteristic of deploying \nbecause things always go wrong.\nThe downsides of rolling deployments are they \ncan be slow to run. So if you have 100 replicas,  \nand you're replacing one at a time, and it \ntakes 20 seconds, it would take 2000 seconds  \nto replace all of the versions, which \nis quite a long time for deployment.\nThis can be mitigated by increasing the number of \nservices being turned on and shut off at a time,  \nwhich is sometimes called a burst \nlimit, or a rolling deployment size.\nThe other problem is API compatibility, which \nis the biggest problem of rolling deployments.  \nSo if you add a new version of an API endpoint to \nyour back end, and consume it in your front end,  \nthen since you're not switching them both at \nthe same time, you might have version one of  \nyour back end serving a request for version two of \nyour front end. And then that API wouldn't exist,  \nso there'd be errors visible to the user for \nthe duration of the deployment. This can be  \nmitigated with complicated routing techniques, \nbut it's generally better to make API is backwards  \ncompatible. So make version two of the front end \nbe compatible with version one of the back end.  \nSo rolling deployments are relatively simple \nto understand and generally well supported.  \nIf your users mind when there's \ndowntime, it's an excellent first step  \nto deploy using a rolling deployment strategy. \nThe key programming consideration is to ensure  \nthat services can consume both the old version \nand the new version of services API's. If this  \ncontract was violated, users might see errors \nfor the duration of the deployments. Let's  \ntalk more about deployment strategies. \nAnd we'll go into bluegreen deployments.\nAnother deployment strategy people \noften see are bluegreen deployments.  \nTo set up a bluegreen. Deployment teams \nneed to disambiguate which services will be  \nconsistently deployed, and which services will \nbe shared across versions of the application.  \nI'll explain a little bit more of what I mean by \nthat in the next section, a database server would  \nbe a shared resource, multiple versions of the \napp would connect to the server at the same time,  \nand a standard deployment would generally \nnot upgrade or modify the database.\nIn our mern example, all of the \nother services or cluster resources,  \nnew versions of them would be \ndeployed on every prod push.\nSo in a bluegreen deployment strategy, where \nyou're upgrading the JavaScript or the myrn app,  \nthis is what that would look like. So there's \na blue version, and a green version of the  \napplication where each is a fully standalone \nstack. But we're each connects to a shared  \ndatabase, and the database is not part of blue \nor green. It's a shared resource used by both  \nbluegreen deployments are so called because they \nmaintain two separate clusters, one named blue and  \none named green out of convention. If the current \nversion of the application is deployed to blue,  \nwe deploy the new version to green \nand use it as a staging environment  \nto ensure that the new version of the app \nworks correctly before setting users to it.\nAfter we're confident that the new \nversion of the software works correctly,  \nwe'd move over production load from blue to green,  \nand then repeat the cycle in \nthe opposite direction. So here\nWe started with the users being sent to blue, \nwhich contains version one of the application. And  \nthen we're investigating that version two works. \nAnd after we're certain that version two works,  \nwill route users to version two. And \nthen the version one is unused. And we  \ncan shut it off and replace it with version three,  \nmake sure it works, and then switch user traffic \nover to it over and over again. On the benefits  \nside, bluegreen deployments are conceptually \nvery easy to understand. To set them up,  \nyou just have to create two identical production \nenvironments and send requests to either one or  \nthe other, which is relatively simple with \nservices like Amazon elastic load balancing.\nThey're also quite powerful, longer running \ntasks, like downloads can continue running  \nin the old version of the application after \ntraffic is switched over to the new version.  \nSo if a user has an established \nconnection to green,  \nand you've switched everyone else over to blue, \nthat connection can continue finishing whatever  \nit was doing. So if you're watching video, and \nyou'd like to download it entirely to the user,  \nwhich might take minutes that can continue \ngoing even during a prod push. Additionally,  \nbluegreen deployments can be extended to many \ndifferent workflows, which we'll discuss.\nThere's a few notable drawbacks to bluegreen \ndeployments, it's difficult to deploy a hotfix,  \nfor example, to revert a change, because the \nold cluster might be running longer running  \ntasks and unavailable to switch to. So if \nyou have version one of the application,  \nyou switch over to version two, you realize \nversion two is having problems, you might want to  \npush version three very quickly, which addresses \nthose problems. But version one would be the  \nonly place you could deploy version three. So you \nwouldn't be able to do that. It's also finicky to  \ntransfer load between the clusters, if resources \nautoscale, which we'll talk about later on,  \nand load is transferred all at once the \nnew cluster might not have enough resources  \nallocated to serve the surge of requests, because \nrequests went all at once to peak production load.\nAnd finally, if one cluster modifies the \nshared service, like adding a column to a  \ntable in the database, it may affect the other \ncluster despite it not being the live one.\nSo here's some common extensions to \nbluegreen deployments. As I mentioned,  \nthey're very extensible. And many teams set up \nadvanced workflows around bluegreen deployments  \nto improve stability and deployment velocity. The \nfirst idea is a natural extension of bluegreen  \ndeployments, which I call rainbow deployments, but \nI don't think there's a standard term for them.  \nInstead of only having two clusters, some \nteams keep an arbitrary number of clusters,  \nso blue, green, red, yellow, so on. This is useful \nwhen you're running very long running tasks.  \nIf you're working on a distributed web scraper, \nand you're scraping tasks take days, for example,  \nyou might need your clusters to \nlast until the last job is finished,  \nto ensure things continue working as \nexpected. So with the rainbow deployments,  \nyou'd keep all of the clusters that are \nstill processing tasks around or if you're  \ndoing something like video encoding for long \nvideos, you don't want to shut off the cluster  \nthat's in the middle of encoding a long video \nbecause that work would have to be redone.\nIn a regular deployment of clusters \nthat only be shut off after all  \nof their long running jobs are done processing.\nSome teams rely heavily on manual QA and \ndon't use continuous deployment. They're  \noften building desktop or mobile apps, which \nneeds to be published on longer release cycles.  \nSo if example.com is being routed to the blue \ncluster, it would be relatively simple to deploy  \na new version of the application to the green \ncluster endpoints new.example.com. to that. And  \nwith this setup, the new version of the app could \nbe tested against the production database in the  \nvery environment that will soon become production. \nSuch tests are often called acceptance tests,  \nbecause they're happening in production with \nproduction data, with nothing like no privileged  \naccess to the code base. So for a game, you might \nhave the new release available, or the API's for  \nthe new release available and have your QA testers \ntest that. And after the QA testers give the Go  \nahead, you can point the game client to the new \nversion, and then switch the labels of the to\nanother useful add on to bluegreen deployments. \nAnd really deployments in general is called the  \ncanary deployment. So if the new version of your \napp contains subjective changes, such as editing  \nthe UI, it might be ill advised to push them \nto all users at once. Facebook has billions  \nof users. So if even 1% of their users complained \nabout a change, that would be overwhelming amounts  \nof feedback. The changes may break users workflows \nand need to be modified or rolled back in response  \nto user feedback. So in the context of a bluegreen \ndeployments, a canary deployment would be to an  \nextension which routes maybe 5% of user traffic to \nthe new version of the application. And check that  \nthose users don't have negative feedback before \nswitching the rest of the users over. So if blue  \nwas version one green was version two, we'd have \n95% going to version one. 5% going to version two\nWe'd wait to see if anyone on version two \ncomplained. If not, then we'd route everyone  \nto version two. And we'd shut off version \none, and then put version three in that one.\nSo bluegreen deployments are powerful \nand extensible deployment strategy  \nthat works well with teams that \nare deploying a few times per day.  \nWith strategy only really starts being \nproblematic. It can use deployment scenarios,  \nwhere there's many services being \ndeployed many times per day.\nAlright, let's keep talking about deployment. \nAnd I'll see you in the next talk.\ncontinuous deployment can sound daunting, but \nit's not actually as difficult as it might seem,  \nin many cases. Let's take a look back at \nour current example, and how it's deployed.\nSo, in our README, we've  \nhelpfully added this little line, which is \nhow we're currently deploying to production.\nIf we look at our hosted version, slug, which is \nhosted at this domain, we can see that the color  \nis still purple, despite having changed \nthe color to blue in the previous video.\nThe reason that it's still purple is \nthat we haven't production pushed,  \nwe haven't pushed the new version of \nthe code, which contains the blue color.\nAnd oftentimes, requiring human intervention \nto deploy is simply unfeasible, especially as  \nproduct skill. So to deploy, let's run \nthe deployment process manually first,  \nand then let's talk about how to automate \nit with a continuous deployment system.\nSo here, we'll use a terminal and simply \nrun the command directly from the read.\nThis developer computer comes with \nthe SSH key required to deploy  \notherwise it would be difficult to \ndisseminate this SSH key to all developers,  \nwhich needed the ability to \ndeploy new versions of code.\nHere we can see that it's \nusing Docker compose rebuilt,  \nwe'll talk more about how to \nset up a Docker file later on.\nNow, if we refresh the page,\nwe can see that the deployment has \ncreated a new version of the application,  \nwhich is blue, so it's picked up the color \nchange which was merged in the previous commit.\nSo continuous deployment, we'd like it to run on  \nmerges to the main branch, we don't \nwant to deploy a feature branches  \nbefore they've been reviewed. For that, \nwe can set up a very simple configuration.\nWe could write this configuration \nfile in any directory,  \nbut let's write it in the API directory for now.\nSo we'll create another layer file\nwill inherit from the testing layer file to  \nmake sure that the deployment \nruns after tests have passed.\nAnd will only run the deployment \nif the branch is the main branch.\nHowever, if it is the main branch, \nwe'd like to set up a secret  \nand use that secret for our SSH key and \nthen use that SSH key to run the script.\nLet's do that now.\nAnd then hopefully gives us the \ndirectives we need to expose the SSH key.\nWhat's appose?\nFor now we're exposing the SSH key which is \nused to authenticate with a production machine  \nwithin the CI process itself.\nOne other thing we need to do is change \nthe ownership to be more restrictive.  \nThis is required for SSH, but it might not \nbe required for other deployment processes.\nSo now that we have our SSH key within the CI \nserver, and these steps are running after tests  \nare passed, all we have to do is copy our command \nand run it as if it was part of a CI process.\nAll this configuration does is wait for tests to \npass, check that the branch is the main branch,  \nand then use the SSH key to deploy \na new version of the application.\nLet's create a new pull request with \nthese changes and see how that looks.\nWe can see that as before the ephemeral \nenvironment and ci services have being  \nbuilt. But this API service is also being \nbuilt the API being the directory which  \ncontains our continuous deployment process. \nLet's take a look at what the pipeline\nactually looks like Instructure.\nso here we can see\nthat the application has been built successfully,  \nand is being started, just as in their \nregular ci without CD process. So we're  \nrunning our continuous integration, but not our \ncontinuous deployment step and this layer file.\nAnd we can see the tests are running.\nAs usual, the test running process  \nrequires starting a fake browser. \nSo this takes around 30 seconds.\nAnd then after the tests pass, we'll see that the  \ndeployment process runs. So the \ntests lead to the second level.\ngraph, these are usually called \nthe build stages in a CI CD system.\nSo here, we can see\nthat the step was skipped because \nthe branch was not the main branch,  \nwhich is exactly what we wanted. However, \nnow if we merge this pull request,\nwe'll create a new merge branch on the main \nbranch. And we'll run the CI process once again.\nHere.\nAnd because this is the main branch,  \nthe deployment process itself will be running. \nSo let's take a look at what that looks like.\nWe're simply loading the environment \nto run the command and right now.\nAnd here, we can see that the deployment \nis running within ci itself. So instead of  \nneeding to run it as an individual developer, \nyou can simply run this SSH command within ci.  \nAnd this idea of deploying automatically from \na CI process is called continuous deployment.\nSo let's work through that whole process \nend to end once just to make sure that it's  \nclear on the deployment automation side of things.\nSo let's change the color, again, for the \nmain landing page, just to make sure that  \nit's visible if a change gets pushed correctly.\nAnd again, we'll change the two colors.\nAnd we'll create a new pull request.\nAnd now our reviewer will have a lot of \ninformation about whether this change is  \ngood or not. So the reviewer will be \nable to see both the files changed.\nSo they'll see all we've \ndone is change a few colors,\nwe'll be able to look at the CI process itself.\nSo they'll be able to see that tests are running.\nSo in particular, that the application \nbuilds start successfully, tests run against,\nthey'll be able to look at \nan ephemeral environment  \nwithin minutes of me creating this new change.\nAnd if they approve the change, it'll be shown \nto users in a short period of time, this whole  \nprocess will only take about a minute, with the \nlongest part being these automated browser tests.\nOne by one, these steps should become green.\nAgain, this is the base. This is the \nephemeral environment. This is the  \ncontinuous deployment process. And this is \nthe egg gets status. This is the one that  \nthe administrators of GitHub might mark as \nrequired. So that only if all of the checks pass,  \ncan the commit be merged and shown to users. so \nhere we can see that everything has passed. Let's  \ntake a look at the ephemeral environment just to \ndouble check that the color is the one we want.\nWe can see that from the thermal \nenvironment, we change the color to be this  \nrose ish red, perhaps this is the color \nthat was desired. So we'll say that this  \nis correct. And the test has passed and \nsuccessfully posted a message. So we know  \nthat the functionality of the application \nhas continued to work after this change.\nAfter we merge it\nbe the end to end test deploy \nprocess for for this merge commit.\nIf we take a look at that,\nwe'll see that because we \nmerged to the main branch\nthe deployment is already running. in \nproduction, we're creating a production build.  \nAnd in a short period of time, the production \nserver should have the latest version of  \nour application running on it. So here \nit's restarting the production instance.\nAnd the snapshot is being taken. So everything is \nsucceeded, we've successfully pushed if we go to  \nour website, it is now the shade of red that \nwe've changed. And that's what an end to end  \nci CD, ephemeral environment pipeline \ngenerally looks like at a very high level.\nAlright, so let's talk more about \ndeployment automation in the next section,\ntalked about deployment strategies. But that's \nnot the only thing in deployments. Deployment  \nstrategies help you reduce downtime and deploy \nin a way that doesn't affect your users.  \nBut another key consideration for deployment is \nmaking sure that there's enough resources for  \nyour containers or VMs. So that if there's a large \nburst of users, your application doesn't go down.\nSo let's say you're building a CI system,  \nthis hits close to home because I have \ncoursework at layer ci, a CI company,\nyour users would push code, you'd \nhave to spin up runners to run tests  \nagainst that code. And you'd see bursts of \ntraffic during the users business hours.  \nAnd you'd see significantly less \ntraffic outside of those business hours.  \nFor a peak load of 10,000 concurrency runs, \nyou'd need at least 10,000 runners provisioned.\nHowever, at night, outside of peak hours,  \nyou wouldn't really need all 10,000 \nrunners, most of them would sit idle.\nSo your usage might look like this, which \nis also indicative of a lot of applications,  \nyour lowest point is maybe 500. Runners required, \nand your highest point is 10,000 runners required.  \nSo you need 20 times more workers from the highest \npoints in the day to the lowest points in the day.\nIn an ideal world, you'd be able to create or \ndestroy these runners as necessary. during peak  \nhours, you'd be able to create new ones, and then \noff peak hours, you'd be able to destroy them.  \nThat's the idea for auto scaling.\nIt's only possible to create and destroy \nworkers because of cloud providers.  \nAt their enormous scale, it's possible \nto offer servers for cheap on small one  \nhour leases. The most popular technology \nat the time of this post or this video,  \nis AWS easy to spot instances, which act exactly \nlike cloud hosted VMs with large discounts if  \nyou provision them for short periods of time. \nAnother popular technology for auto scaling  \nis Kubernetes horizontal pod auto scaling, which \nsounds daunting. But since many providers provide  \nKubernetes out of the box, you can just assume \nthat if you're using Kubernetes, and containers,  \nyou'll get auto scaling if you configure \nit correctly. Just to illustrate,  \nif you're using Microsoft's as your as your cloud \nprovider, there's resources for auto scaling  \nVMs. And for containers. If you're using AWS, \nthere's again, resources for VMs and containers.  \nAnd if you're using Google Cloud, there's \nresources for VMs and containers. auto  \nscaling is usually discussed on the timeline \nof one hour chunks of work. If you took the  \nconcept of auto scaling and took it to its limit, \nyou'd get serverless defined resources that are  \nquickly started and use them on the timeline \nof milliseconds. So one to 100 milliseconds.\nFor example, a web server might not need to \nexist at all until a visitor requests the page.  \nInstead, it could be spun up specifically for that \nrequest, serve the page and then shut back down.\nThat's exactly the idea for serverless. \nIt's almost like taking auto scaling, so  \nprovisioning resources as the required and doing \nit very quickly on very small time intervals.\nserverless is primarily used for services \nthat are somewhat fast to start in stateless,  \nyou wouldn't run something like a CI job \nor a CI run within a serverless framework.  \nBut you might run something like a \nweb server or notification service.\nauto scaling is primarily used for services \nthat are slower to start or require state, you'd  \nlikely run a CI job within an auto scaled VM or \ncontainer, and not within a serverless container.\nAs a 2021, the distinction between the models is \nbecoming quite blurred. serverless containers are  \nbecoming popular. And they often run for upwards \nof an hour. serverless containers act exactly like  \ncontainers, but they're created and turned off in \na serverless manner. So in response to a trigger.\nWithin a few years, it's likely \nthat serverless and auto scaling  \nwill converge into a single unified interface.  \nSo I'm excited about that. That's that's \ngoing to be the future of deployment.\nAnd that ends our discussion of auto scaling \nand serverless. I'll see you in the next talk.\nAnother key concept in deployment \nautomation is service discovery.\nA database might be at one IP address, so 10 dot \n1.1 dot 1.6 by four three chosen arbitrarily,  \nwhile the web server would be at \nanother IP address 10.1 dot 1.2 8080.\nAnd they'd have to discover each other, because \nthe web server needs to talk to the database,  \nand the database might have \ncalls to the web server,  \nthose get even more complicated as you add more \ncopies of your web server, or add entirely new  \nservices. Again, let's consider the myrn app \nfrom elsewhere in the academy DevOps series.\nSo you have a web browser, the user themselves is \nvisiting your website. They're connecting to your  \nfront end, and they're connecting \nto your backend making API calls.  \nAnd your back end is connecting to a database.\nHere, there's three services that need to be \ndiscovered. The browser needs to learn that  \nexample.com corresponds to the front end, \nan example.com slash API corresponds to the  \nback end. And the back end needs to land on the \ndatabase is that 10.111 dot 1.3, for example.  \nSo the backend needs to know the IP address and \nport of the database. And the browser needs to  \nknow the IP address and port of the backend and \nthe front end. In the very simplest configuration,  \neverything is manually configured the back end \nand front end or add static IPS. And given host  \nnames within DNS Domain Name System, it's the \nmapping of example.com to an IP address on the  \ninternet. And the back end is configured \nto connect to MongoDB at a specific port.  \nSo your DNS configuration, this is the CloudFlare \nconfiguration page, which has a DNS provider  \nwould look like this. So if the user visits \nexample.com, send them to this IP address.\nAnd if they visit api.example.com, \nsend them to that IP address.  \nSo this is all manually configured. And we've \njust manually put the IP addresses in this.\nAnd then within the backend, we'd \nread an environment variable,  \nwhich is a dictionary of key value pairs that \nare easily set when you're deploying things. So  \nyou'd say connect to the environment \nvariable, specifying the MongoDB port,\nand then connect to Port 27017, \nwhich is the default MongoDB port.\nAnd then when you're starting the backend,  \nyou just have to specify the IP \naddress that MongoDB is running in.\nThis configuration is completely fine. For \nsimple products, it's difficult to mess up.  \nIt's relatively secure, and it doesn't over \ncomplicate things, you can go pretty far with a  \nsimple configuration. Most products could launch \nan MVP without any service discovery at all.\nBut you'll know that you need to start caring \nabout complicating your service discovery when  \nyou see one of the following. So you need zero \ndowntime deployments. You can't hard code things  \nlike this if you want to do rolling deployments. \nBecause you can't easily automate where the  \narrows point to, you can't automatically change \nthe IP address. If you're doing such a simple  \ndeployment strategy. For example, if you have \nmore than a couple microservices, it's gonna  \nget hard to remember where they all are. And if \nyou're deploying to several environments, like  \nif you have a developer environment, a staging \nenvironment, and ephemeral environments, and  \nproduction environments that all have different \nIP addresses, it's gonna get pretty unwieldy to  \nset the IP addresses all over the place. So let's \nfocus on zero downtime deployments because they're  \nillustrative of the broader problem. Before \nthat, though, let's talk about reverse proxies,  \nwhich are another crucial system design and \nDevOps concept. The idea for a zero downtime  \ndeployment is simple. As we've seen, you start \na new version of the back end and front end, you  \nwait till they're up, and then you shut off the \nold version of the backend and front end. So this  \nhappens in both rolling and bluegreen deployments. \nHowever, it's difficult to update the IP addresses  \nin DNS itself. If our rolling deployments \nrequired changing these values directly in DNS,  \nthat wouldn't work very well, for various \nreasons. And particular, DNS can take a long  \ntime to propagate users in other countries than \nthe United States, for example, might take days  \nto see the new IP address, and they'd still \nbe trying to connect to the old version.\nThe solution is to add a web server that acts \nas the gateway to the front end and back end,  \nwe'd be able to change where it points to \nwithout changing the DNS configuration itself.  \nSo web servers like these are called \nreverse proxies. And they're really  \ncrucial for setting up zero downtime \ndeployments, and for service discovery itself.\nSo taking our myrn app and adding this level \nof complexity, the user's web browser would  \ninstead connect to the reverse proxy. So the user \nwould ask the DNS system where is example.com\nThe DNS system would respond with, oh, it's here,\nthe IP address of the reverse proxy. And then \nthe reverse proxy would take the user's request  \nand send it to the appropriate, they view \non that front end or back end, depending  \non what the user asked to connect to. And then \nfrom there, everything else would be the same.\nSo if you're running a deployments, \nlike a rolling deployments,  \nthe proxy could choose which of v1 or v2 \nof the front end or back end to send the  \nusers request to, and that would just \nbe by changing a configuration file.\nAnd then after your deployment is done, you \ncould turn off version one, and the reverse  \nproxy could route traffic entirely diversion \nto a straightforward approach is to store the  \nservice IPS in a hash table. So implicitly, \nin the process of running at the moment,  \nwe assumed that our reverse proxy would be able \nto know the IPS of the new versions of our apps,  \nwhich is exactly the statements of service \ndiscovery. And so that needing to manually  \ntell our reverse proxy where the front \nend and back end live. So where is the  \nIP address of version two of our back end, it \nwould be convenient if we could automate it.\nWhen the new versions come online,  \nthey can update the value for the key back end and \nfront end with their own IPS in this hash table.  \nAnd then the reverse proxy could watch for changes \nto the table and use that for routing decisions.\nFor a very concrete example, which is about \nas close as we're going to get to code in this  \nset of videos, let's look \nat this nginx configuration.  \nnginx is a very popular reverse proxy. And it's \nvery commonly used in large tech companies.\nAnd it lets you define where various host names \ngo, if you pointed example.com, to the nginx,  \nreverse proxy, again, in the picture, this \nwould be nginx, the user thinks they're  \nconnecting to your website, but they'd \nbe sending the request to nginx. Asking,  \nfor example, COMM And nginx would take their \nexample and forward it to your actual front end.  \nSo nginx just has to learn where \nthe IP for your front end is.  \nAnd that's what this configuration would \ndo. So we're telling nginx directly,\ntake this key from this file,\nand then use conf D, which reads from a hash \ntable and updates the configuration file,  \nand then send the user there. So\nall you need is a key value store, which has a \nkey fob where the front end IP is the current  \nfront end version. And then to run your rolling \ndeployments, you'd start a new front end version,  \ncheck that it was alive, and then you just change \nthe key in the hash table to point to the new one.  \nAnd then constantly would pick up that \nchange, replace this value with the new IP  \nof version two of the front \nend, and then reload nginx,  \nwhich would change the arrow to the \nnew version of the front end like this.\nThat was a lot to deal with. So\nlet's back up a bit, all you'd need \nto do is update your front end,  \nto set the key in the hash table for \nIPS front end to be the front ends IP,  \nand then make your back end do the \nsame for the back end location.  \nAnd that way, when the new version of the \napplication starts, it would update the key  \nin the table. And then nginx would start routing \nusers to the new version of the application.\nThis is what proxy passing means and nginx. So  \nyou see this proxy pass directive. \nBut this is all very complicated.  \nIt's just an illustrative point of if you were \nto implement this yourself, how would you do it?\nThe most common thing used in industry \nis service discovery by using DNS itself.  \nSo DNS, we thought of before as the \nslow protocol that might take days  \nto propagate changes across the \nnetwork. But you can run DNS locally.\nAnd that's the industry standard.\nSo let's talk about DNS a little bit.\nThe idea for DNS is just to map host names to \nIPS. When you visit layer ci.com. For example,  \nthe global DNS system will first map \nthe name latest.com, to the addresses  \nat the time of this video 104 dot 217 9.86 and \n172 dot six 7.16 9.106, which are just arbitrary  \ncomputers connected to the internet. And you \ncan use the Digg command on a website to see  \nwhere those addresses are. So this is saying for \nthe key layer ci.com the values are these two.\nAnd usually when people mentioned \nDNS, they mean the global service.  \nSo visiting websites on the internet. However, as \nI mentioned, it's possible to run DNS internally.  \nIt would be ideal if in our nginx configuration, \nwe could specify HTTP full colon slash slash front  \nend and then have front end resolve \nto the IP of our front end service.  \nThat way we wouldn't have to change \nanything except for the DNS configuration.\nThat's exactly how DNS based \nservice discovery works.  \nyou configure your services to query a server \nyou control for DNS queries and then this\nSo instead of saying MongoDB, full colon \nslash slash, process and MongoDB, you just say  \nMongoDB full colon slash slash \nMongo, where Mongo is a key  \nin the key value pairs in \nthe DNS that you control.\nOf course, it's not trivial to deploy \nyour own DNS server. In practice,  \nthough there are popular options like core DNS,  \nthe most likely thing you do is use a cloud \nprovider or Kubernetes internal solutions.\nSo the end result you'd \nget is something like this,  \nthe user's web browser would connect to nginx. \nThinking it was the website nginx would ask  \nthe DNS provider, where is the API right \nnow, the cloud provider would respond with  \nthis is the IP address, given the deployments, \nso blue, green, or rolling deployments,  \nthis is what we currently want users to visit \nwhen they want to visit the API. And then\nthis would correspond to version \none or version two of the backend.  \nAnd then the proxy would \nforward the request there,  \nthe request to be fulfilled, and then we go \nback to the proxy, and then back to the user.\nSo the conclusion of all of this is that service \ndiscovery is tricky, but vitally important as a  \nfoundational building block for these deployment \nstrategies. And for deployment automation in  \ngeneral, if you configure service discovery \nin an appropriate manner for your deployments,  \nso DNS based in a Kubernetes cluster, for example, \nit makes significantly easier for developers to  \nhave microservices that talk to each other, \ninstead of having a developer have to write  \nconnect a MongoDB app, and then deal with where \nMongoDB actually is. They can simply say connect  \nto MongoDB at MongoDB colon slash slash Mongo. \nAnd then you as the DevOps platform engineer can  \nconfigure where that Mongo always points to the \nright place the right IP address. By decoupling  \nthe application logic from the deployment \nlogic, you'll help the developers on your  \nteam build faster, and you'll be able to deploy \nit more easily. So that's it for deployments.  \nLet's go on to the next and final pillar, \nwhich is application performance management.\nThere aren't that many general topics \nin application performance management,  \nso this section will be a little bit shorter. \nWe'll go into more detail in future sections  \nin the DevOps Academy. But just \nfor this introductory video series,  \nlet's talk about two core concepts. \nThe first of which is log aggregation.  \nAnd it's a way of collecting and tagging \napplication logs from many different services  \ninto a single dashboard that can easily be \nsearched. One of the first systems that have to be  \nbuilt out in an application performance management \nsystem is log aggregation. Just as a reminder,  \napplication performance management is the part \nof the DevOps lifecycle where things have been  \nbuilt and deployed. And you need to make \nsure that they're continuously working  \nso they have enough resources allocated to \nthem. And errors aren't being shown to users.\nIn most production deployments, there are many \nrelated events that emit logs across services. At  \nGoogle, a single search might hit five different \nservices before being returned to the user. If you  \ngot unexpected search results, that might mean \na logic problem in any of the five services.  \nAnd log aggregation helps companies like \nGoogle diagnose problems in production,  \nthey built a single dashboard where they can \nmap every request unique ID. So if you search  \nsomething, your search will get a unique ID \nand then every time that search is passing  \nthrough a different service, that service will \nconnect that ID to what they're currently doing.\nThis is the essence of a good \nlog aggregation platform,  \nefficiently collect logs from everywhere that \nemits them and make them easily searchable.  \nIn the case of a fault. Again, this is our \nmain app, the users web browser connects to  \na back end and the front end, and the \nback end then connects to a database.\nIf the user told us, the page turned \nall white and printed an error message,  \nwe would be hard pressed to diagnose \nthe problem with our current stack,  \nthe user would need to manually send us the \nerror and we'd need to match it with relevant  \nlogs in the other three services. Let's \ntake a look at Elk, a popular open source  \nlog aggregation stack named after its three \ncomponents, Elasticsearch, LogStash and cabana.\nIf we installed it in our burn app, we'd get three \nnew services. So the users web browser, again  \nwould connect to our front end and back end. The \nback end would connect to Mongo, and all of these  \nservices, the browser, the front end, the back \nend and Mongo would all send logs to LogStash.\nAnd then the way that these three components work,  \nthe components of ALK Elasticsearch Log \nStash and cabana is that all of the others\nServices send logs to LogStash. LogStash \ntakes these logs, which are text emitted by  \nthe application. For example, the web browser. \nWhen you visit a web page, the web page might  \nlog this visitor access this page at this \ntime. And that's an example of a log message.  \nThose logs would be sent to LogStash, which would \nextract things from them. So for that log message,  \nuser did thing a time, it would extract the time \nand extract the message and extract the user and  \ninclude those all as tags. So the message \nwould be an object of tags and message so  \nthat you could search them easily. You could say, \nfind all of the requests made by a specific user.\nBut LogStash doesn't store things itself. \nIt stores things in Elasticsearch,  \nwhich is efficient database for querying text. \nAnd Elastic Search exposes the results as Kibana\nand cabana is a web server that connects \nto Elasticsearch and allows administrators  \nas the DevOps person or other people \non your team, the on call engineer to  \nview the logs in production \nwhenever there's a major fault.\nSo you as the administrator would connect to \ncabana cabana would query Elastic Search for  \nlogs matching whatever you wanted. You could say, \nhey, cabana, in the search bar, I want to find  \nerrors. And cabana would say Elastic Search \nfinds the messages which contain the string  \nerror. And then Elasticsearch would return \nresults that had been populated by LogStash  \nand LogStash would have been samples \nresults from all of the other services.  \nIf you visited a web page, this might \nbe the sort of log that is emitted.\nAnd it might be processed into an object like \nthis. So it has a format, a date, and a simple  \ntime format. That's the same for all messages \nemitted by all different services, you'd have a  \nservice which service submitted the log, and you'd \nhave the message, the actual content of the log.\nAnd the processor, LogStash itself would often \nbe connected to the internet so that JavaScript  \nin the browser can catch errors and send them to \nLogStash. Although there are additional services  \nlike century that might be better suited \nfor that. How would we use elk to diagnose  \na production problem? Well, let's say a user says \nI saw error code 1234567. When I tried to do this,  \nwith elk setup, we'd have to go to cabana, enter \n1234567 in the search bar, press Enter. And then  \nthat would show us the logs that corresponded \nto that. And one of the logs might say, internal  \nserver error returning 1234567. And we'd see that \nthe service that emitted that log was back end,  \nand we'd see what time that blog was \nemitted at. So we could go to the  \ntime in that log. And we could look \nat the messages above and below it  \nin the backend. And then we could see a better \npicture of what happened for the user's request.\nAnd we'd be able to repeat this process \ngoing to other services until we found  \nwhat actually caused the problem for the user.\nThe final piece of the puzzle is ensuring \nthat logs are only visible to administrators.  \nAs logs can contain sensitive information like \ntokens, it's important that only authenticated  \nusers can access them. You wouldn't want to \nexpose Kibana to the internet without some  \nway of authenticating. My favorite way of doing \nthis is to add a reverse proxy like nginx. Again,  \nour friend nginx and then have the auth request \nmechanism check that the user is logged in.  \nSo in our back end, we could \nadd something like this,  \nwhich simply returns a successful status. If \nthe user visits example.com slash auth request  \nand there an admin, it would return a successful \nstatus. And if they're not admin, it would return  \nan unauthorized status. And then we could \nconfigure nginx. Again, as mentioned in previous  \nvideos, to have these location blocks, the slash \nprivate location would connect to slash off.  \nAnd then we could make sure that if this was slash \nlogs, for example, that the user was logged in,  \nbecause with this auth request directive, if \nthe user visits slash logs, and they're not an  \nadministrator, they wouldn't be able to access \nthem. Alternatively, Elasticsearch itself is run  \nby a company called elastic and they have a paid \nversion, which contains something called x pack,  \nwhich facilitates this as well. So you can go for \neither a reverse proxy which authenticates users,  \nor the paid version of the application.\nAs an aside, you can use log \naggregation as an extra test.  \nSo in your ci pipelines, where you \nwant to tell if code is good or not,  \nyou can repurpose your log aggregation stack \nto ensure that no warnings or errors occur  \nwhile the tests run. If your end to end test \nlooks like this. So you're starting your stack,  \nyou're starting your logging stack. You're \nrunning your tests with NPM run test. You could  \nadd an extra step which queries Elastic Search for \nlogs matching error, and you could make sure that\nThere are no logs, that printed error. \nAnd then even if all of your tests pass,  \nif there's an error going on, that error might \nbe important despite all the tests passing.  \nSo this adds a free extra check to your ci stack.\nAnd there's a few examples of log aggregation \nplatforms. There's Elasticsearch, LogStash,  \nKibana, which we talked about, there's fluent D \nis another popular open source choice. There's  \ndata dog, which is very commonly used at larger \nenterprises. It's a hosted offering. And there's  \nlog DNA, which is another hosted offering. \nAnd those cloud providers also provide logging  \nfacilities like AWS, cloudwatch logs. So log \naggregation is a key tool for diagnosing problems  \nin production. It's relatively simple to install \na turnkey solution like elk or cloud watch,  \nand it makes diagnosing and triage problems \nand production significantly easier.  \nThat's it for log aggregation. \nI'll see you in the next talk.\nPlus topic we're going to talk \nabout is metric aggregation.  \nmetrics are simply data points that tell \nyou how healthy production is. So as you  \ncan see on the screen, things like CPU usage, \nmemory usage, disk IO, file, system fullness,  \nare all important production metrics that you \nmight care about. If log aggregation is the  \nfirst tool to set up for production monitoring, \nmetrics, monitoring would be the second. They're  \nboth indispensable for finding production faults, \nand debugging performance and stability problems.\nLog aggregation primarily deals with text, \nlogs or textual Of course. In contrast,  \nmetric aggregation deals with numbers. How \nlong did something take his memory being used?\nIt's frighteningly difficult to understand \nwhat's going on in a production system.  \nNetflix, for example, measures \n2.5 billion different time series  \nto monitor the health of their production \ndeployments. Successful metric monitoring is  \nbeing able to automatically notify the necessary \nteams when something goes wrong in production.\nLet's keep looking at open source implementations \nof DevOps tools to keep things general.  \nPrometheus is a tool originally deployed at \nSoundCloud is one of the most popular metrics  \nservers. And this is what it looks like. Similarly \nstructured, the inputs are sent to the retrieval,  \nthings like nodes would send how much disk usage \nthey have to the media server, but also how  \nlong services are taking ALC itself would parse \nnumbers out of logs and send them to permit this.  \nAnd then promethease figures out what get services \nfrom using service discovery from the previous  \nvideo. And then it takes those and it stores it \nin a time series database equivalent for numbers,  \nwhat Elasticsearch is for text, and then that \nstored on the Prometheus server node itself.\nAnd then finally, there's a front end. So other \nservices can query promethease. To do things, one  \nthing you might want to do is if there's something \nterribly wrong, like your website is down,  \nyou might want to connect a pager duty \nor email someone or send someone a text  \nmessage with Twilio, beyond call engineer \nand tell them that something is wrong.\nBut you might also want to query \nmetrics to get a view like this one.  \nAnd that's what prom qL is used for. So grafana \nis the view that dark view with the graphs.  \nAnd it's common way of viewing these \ntime series. But you can make your own  \nand you can make API's. And there's many \nother front ends that connected previous.\nThe diagram above is daunting, but it's quite \nsimilar to the architecture that we discussed  \nfor log aggregation frameworks. There's four key \ncomponents. Like I mentioned, the time series  \ndatabase actually stores the measurements, \nretrieval, the alert manager and the web UI.\nSo the sorts of metrics we collect. Well, \nthere's a lot of subjectivity about which  \nmetrics are important based on what your \nproduct does and what your users are.  \nBut here's a few ideas for what you \nstore in something like promethease.\nSo request fulfillment times, these are very \nuseful for understanding when systems are  \ngetting overloaded, or if a newly pushed \nchange has negatively impact performance.\nThe format times are often parsed out of \nlogs using a regular expression, for example,  \nor taken out of a field in a database.\nFor a website or REST API, a common request \nfulfillment time would be time to response  \nfor web sites and rest API's. A common request \nfulfillment time would be time to response.\nThat way slow web pages could be \ndiscovered and identified in production.\nA related metric that is very indicative of \nproblems his request counts, and if there's  \na huge spike in requests per second, it's \nvery likely that at least a few production  \nsystems will have trouble scaling. Watching \nrequest counts can also be used to detect and\nmitigate attacks like denial of service attacks,  \nwhich are when attackers sent many malicious \nrequests to services in production.\nThe last common metric across many \ntypes of companies is server resources.  \nHere's a few examples. So the database size \nand maximum database size. If you have two  \nterabytes of disk for your database and your 1.5 \nterabytes in, you might want to alert someone to  \nincrease the amount of disk available for the \ndatabase or delete things that are being unused  \nweb server memory. So if your web server \nis taking a lot of requests per second and  \ndoing a lot of processing, it might require \nmore memory. So if it runs out of memory,  \nit would crash and your users wouldn't \nbe able to access your website anymore.\nNetwork throughput. So if you're downloading \nmany things, or uploading many things,  \nyou can saturate your network. And that \nwould also cause degraded performance.  \nAnd a final one is TLS certificate expiry \ntime. So this lock in the browser that uses  \nTLS certificates to see whether the browser \nis secure or not, are used all over the place  \ninternally. And these cause problems if they're \nnot measured, and they're not alerted for.  \nSo for example, Google Voice had an outage in \n2021, Google of all companies wasn't measuring  \nwhen their TLS certificates would expire. \nAnd that caused an outage a few months ago.\nSo production faults very rarely look \nlike no users can access anything.  \nThere are often a gradual ramp, \ncertain API's taking longer and longer,  \nand then eventually everything breaks. portal \nanalysis is an easy way to pare down production  \nstatistics into something actionable. A website \nmight measure how long it takes for websites to  \nfully load their landing page to notice \nwhen there's a very obvious production  \nissue. So with cuartel analysis, you'd split \nrequest times and many different buckets.  \nHow long did the slowest 1% of users take? \nHow long did the slowest 5% of users take?  \nHow long did the slowest 25% of users take. \nSo if your landing page is slower when users  \nare logged in and logged out, just by visiting \nwithout a logged in user, you might not notice  \nthat the web page is very slow. But users \nthat are logged in, would show up in the 1%  \nof requests bucket, and you'd see that those \nusers are having a bad degraded experience.\nOr when example stackoverflow.com itself was \nnotified of an outage because their landing  \npage was taking a long time to respond \nto requests due to a specific post that  \nwas published to stack overflow. For metrics \nanalysis, there's many common production tools.  \nThere's Prometheus and grafana. As we \nmentioned, there's data dog, again,  \nnot only log aggregation, but metrics aggregation \nas well. There's New Relic, which is I would say  \nmaybe the old reliable option. And there's \nagain, cloud providers by their own versions  \nof this. There's AWS cloudwatch metrics, Google \nCloud monitoring, and as your monitor metrics.\nThat's it for application performance \nmanagement. Thanks for watching.\n",
  "words": [
    "beginner",
    "devops",
    "course",
    "first",
    "step",
    "toward",
    "devops",
    "engineering",
    "role",
    "taught",
    "ceo",
    "co",
    "founder",
    "layerci",
    "goal",
    "course",
    "regular",
    "developers",
    "regular",
    "engineering",
    "practitioners",
    "learn",
    "fundamental",
    "devops",
    "concepts",
    "go",
    "towards",
    "devops",
    "engineering",
    "role",
    "also",
    "talking",
    "devops",
    "broadly",
    "introduction",
    "beyond",
    "primarily",
    "talking",
    "engineering",
    "side",
    "things",
    "devops",
    "methodology",
    "helps",
    "engineering",
    "teams",
    "build",
    "products",
    "better",
    "continuously",
    "integrating",
    "user",
    "feedback",
    "google",
    "devops",
    "look",
    "pictures",
    "often",
    "see",
    "ones",
    "like",
    "really",
    "helps",
    "understand",
    "devops",
    "different",
    "traditional",
    "way",
    "thinking",
    "software",
    "developed",
    "back",
    "day",
    "software",
    "developed",
    "much",
    "like",
    "things",
    "would",
    "developed",
    "factory",
    "input",
    "would",
    "programming",
    "output",
    "product",
    "could",
    "put",
    "cd",
    "sell",
    "users",
    "since",
    "advent",
    "internet",
    "continuously",
    "updatable",
    "software",
    "become",
    "really",
    "easy",
    "launch",
    "things",
    "get",
    "user",
    "feedback",
    "integrate",
    "current",
    "product",
    "instead",
    "making",
    "new",
    "version",
    "product",
    "websites",
    "like",
    "facebook",
    "continuously",
    "upgrade",
    "instead",
    "requiring",
    "buy",
    "know",
    "new",
    "version",
    "facebook",
    "unlike",
    "know",
    "old",
    "games",
    "like",
    "city",
    "would",
    "require",
    "buy",
    "new",
    "version",
    "simcity",
    "idea",
    "really",
    "formalized",
    "devops",
    "sections",
    "planning",
    "take",
    "set",
    "features",
    "want",
    "build",
    "work",
    "team",
    "make",
    "specifications",
    "features",
    "might",
    "look",
    "like",
    "code",
    "developers",
    "team",
    "build",
    "features",
    "released",
    "course",
    "built",
    "website",
    "might",
    "take",
    "source",
    "code",
    "bundle",
    "javascript",
    "user",
    "browser",
    "could",
    "run",
    "video",
    "game",
    "might",
    "make",
    "releases",
    "various",
    "different",
    "versions",
    "run",
    "linux",
    "versions",
    "run",
    "windows",
    "versions",
    "run",
    "browser",
    "take",
    "built",
    "artifacts",
    "test",
    "testing",
    "automatic",
    "manual",
    "automatic",
    "testing",
    "usually",
    "colloquially",
    "known",
    "continuous",
    "integration",
    "manual",
    "testing",
    "colloquially",
    "known",
    "quality",
    "assurance",
    "qa",
    "tested",
    "know",
    "stakeholders",
    "given",
    "feedback",
    "released",
    "continuous",
    "deployment",
    "strategies",
    "releasing",
    "deploying",
    "happens",
    "automatically",
    "change",
    "known",
    "good",
    "lot",
    "automation",
    "done",
    "larger",
    "teams",
    "know",
    "popular",
    "tools",
    "like",
    "spinnaker",
    "netflix",
    "talk",
    "later",
    "talks",
    "core",
    "idea",
    "want",
    "take",
    "software",
    "want",
    "send",
    "users",
    "way",
    "notice",
    "problems",
    "experimental",
    "ui",
    "change",
    "might",
    "show",
    "percentage",
    "users",
    "get",
    "feedback",
    "show",
    "broadly",
    "company",
    "like",
    "facebook",
    "billions",
    "users",
    "even",
    "1",
    "users",
    "complain",
    "get",
    "hundreds",
    "millions",
    "emails",
    "release",
    "built",
    "deployed",
    "deploying",
    "means",
    "released",
    "users",
    "website",
    "would",
    "mean",
    "publicly",
    "accessible",
    "internet",
    "cd",
    "rom",
    "know",
    "bundle",
    "things",
    "onto",
    "cd",
    "distribute",
    "mobile",
    "release",
    "build",
    "artifact",
    "submit",
    "app",
    "store",
    "app",
    "store",
    "would",
    "review",
    "publish",
    "new",
    "update",
    "users",
    "could",
    "download",
    "operate",
    "operating",
    "primarily",
    "things",
    "like",
    "scaling",
    "making",
    "sure",
    "enough",
    "resources",
    "exist",
    "load",
    "adding",
    "servers",
    "required",
    "configuring",
    "things",
    "dealing",
    "architectural",
    "problems",
    "essentially",
    "monitoring",
    "users",
    "use",
    "software",
    "especially",
    "submit",
    "things",
    "start",
    "jobs",
    "create",
    "posts",
    "forums",
    "want",
    "make",
    "sure",
    "posts",
    "healthy",
    "finally",
    "take",
    "feedback",
    "put",
    "back",
    "planning",
    "stage",
    "planning",
    "stage",
    "takes",
    "user",
    "feedback",
    "takes",
    "things",
    "operations",
    "deployments",
    "teams",
    "learned",
    "deploying",
    "scaling",
    "product",
    "use",
    "build",
    "new",
    "features",
    "solve",
    "bugs",
    "make",
    "new",
    "versions",
    "back",
    "end",
    "new",
    "versions",
    "architecture",
    "continues",
    "cycle",
    "people",
    "mean",
    "say",
    "company",
    "uses",
    "devops",
    "company",
    "tech",
    "forward",
    "company",
    "digitally",
    "transformed",
    "mean",
    "instead",
    "taking",
    "set",
    "requirements",
    "building",
    "one",
    "artifact",
    "shipped",
    "continuous",
    "cycle",
    "taking",
    "feedback",
    "know",
    "two",
    "weeks",
    "scrum",
    "cycles",
    "usually",
    "producing",
    "software",
    "users",
    "actually",
    "want",
    "use",
    "say",
    "producing",
    "devops",
    "engineering",
    "another",
    "common",
    "part",
    "devops",
    "beyond",
    "methodology",
    "something",
    "maybe",
    "technical",
    "leaders",
    "ceo",
    "would",
    "care",
    "subfield",
    "devops",
    "engineering",
    "usually",
    "engineers",
    "mean",
    "know",
    "say",
    "devops",
    "usually",
    "job",
    "postings",
    "mean",
    "say",
    "devops",
    "job",
    "posting",
    "asking",
    "devops",
    "engineer",
    "know",
    "asking",
    "someone",
    "plan",
    "deploy",
    "code",
    "mostly",
    "asking",
    "someone",
    "build",
    "test",
    "release",
    "deploy",
    "monitor",
    "three",
    "pillars",
    "devops",
    "engineering",
    "pull",
    "request",
    "automation",
    "deployment",
    "automation",
    "application",
    "performance",
    "management",
    "get",
    "specifics",
    "idea",
    "pull",
    "request",
    "automation",
    "helps",
    "developers",
    "build",
    "things",
    "faster",
    "helps",
    "understand",
    "whether",
    "proposed",
    "change",
    "good",
    "faster",
    "deployment",
    "automation",
    "helps",
    "deploy",
    "code",
    "way",
    "users",
    "complain",
    "facebook",
    "lots",
    "deployment",
    "automation",
    "threw",
    "code",
    "void",
    "every",
    "time",
    "developer",
    "made",
    "change",
    "hundreds",
    "millions",
    "complaints",
    "application",
    "performance",
    "management",
    "automation",
    "around",
    "making",
    "sure",
    "things",
    "healthy",
    "automatically",
    "detecting",
    "downtime",
    "automatically",
    "waking",
    "someone",
    "know",
    "site",
    "goes",
    "overnight",
    "automatically",
    "rolling",
    "back",
    "things",
    "problem",
    "get",
    "specifics",
    "future",
    "talks",
    "first",
    "pillar",
    "mentioned",
    "pull",
    "request",
    "automation",
    "primarily",
    "developer",
    "feedback",
    "cycle",
    "developers",
    "share",
    "work",
    "proposing",
    "atomic",
    "sets",
    "changes",
    "called",
    "pull",
    "requests",
    "atomic",
    "mean",
    "full",
    "featured",
    "require",
    "things",
    "run",
    "first",
    "like",
    "developer",
    "proposes",
    "pull",
    "request",
    "expecting",
    "change",
    "good",
    "far",
    "tell",
    "change",
    "fulfills",
    "business",
    "requirements",
    "get",
    "gates",
    "organizations",
    "pull",
    "request",
    "automation",
    "goal",
    "make",
    "sure",
    "developers",
    "tell",
    "quickly",
    "whether",
    "change",
    "good",
    "example",
    "working",
    "website",
    "developer",
    "proposes",
    "change",
    "adds",
    "typo",
    "something",
    "easily",
    "automatically",
    "detected",
    "set",
    "typo",
    "gate",
    "says",
    "change",
    "may",
    "go",
    "contains",
    "typo",
    "would",
    "easy",
    "way",
    "make",
    "sure",
    "developers",
    "get",
    "automatic",
    "feedback",
    "changes",
    "people",
    "say",
    "pull",
    "requests",
    "know",
    "2021",
    "usually",
    "mean",
    "git",
    "git",
    "technology",
    "originally",
    "popularized",
    "linux",
    "helps",
    "developers",
    "make",
    "sorts",
    "changes",
    "share",
    "pull",
    "request",
    "usually",
    "reviewed",
    "least",
    "one",
    "programmer",
    "something",
    "called",
    "code",
    "review",
    "programmer",
    "tell",
    "code",
    "style",
    "tell",
    "proposing",
    "programmer",
    "whether",
    "architectural",
    "problems",
    "scaling",
    "problems",
    "subjective",
    "things",
    "ca",
    "easily",
    "automated",
    "process",
    "review",
    "also",
    "greatly",
    "facilitated",
    "devops",
    "technology",
    "stack",
    "devops",
    "automation",
    "help",
    "things",
    "like",
    "ephemeral",
    "environments",
    "linting",
    "automations",
    "get",
    "code",
    "review",
    "done",
    "usually",
    "engineering",
    "manager",
    "product",
    "manager",
    "charge",
    "functionality",
    "proposed",
    "get",
    "feedback",
    "create",
    "new",
    "button",
    "website",
    "like",
    "designer",
    "designed",
    "button",
    "like",
    "product",
    "manager",
    "requested",
    "button",
    "created",
    "give",
    "feedback",
    "button",
    "phrased",
    "poorly",
    "placed",
    "poorly",
    "mobile",
    "responsive",
    "problems",
    "would",
    "require",
    "another",
    "merge",
    "request",
    "would",
    "great",
    "original",
    "merge",
    "request",
    "fulfilled",
    "requirements",
    "first",
    "time",
    "proposed",
    "usually",
    "non",
    "technical",
    "people",
    "give",
    "feedback",
    "pull",
    "requests",
    "necessary",
    "automated",
    "devops",
    "engineer",
    "automate",
    "things",
    "like",
    "automated",
    "test",
    "running",
    "per",
    "change",
    "ephemeral",
    "environments",
    "automated",
    "security",
    "scanning",
    "notifications",
    "reviewers",
    "getting",
    "right",
    "people",
    "review",
    "right",
    "time",
    "end",
    "goal",
    "automation",
    "developer",
    "able",
    "propose",
    "change",
    "get",
    "merged",
    "day",
    "propose",
    "change",
    "huge",
    "organizational",
    "benefit",
    "means",
    "critical",
    "bugs",
    "quickly",
    "fixed",
    "merged",
    "deployed",
    "without",
    "needing",
    "special",
    "process",
    "also",
    "means",
    "developers",
    "bogged",
    "bureaucracy",
    "propose",
    "changes",
    "get",
    "gates",
    "change",
    "deployed",
    "additional",
    "special",
    "gates",
    "need",
    "discover",
    "example",
    "proper",
    "gates",
    "automations",
    "set",
    "developer",
    "able",
    "change",
    "web",
    "page",
    "without",
    "ask",
    "everyone",
    "company",
    "whether",
    "web",
    "page",
    "used",
    "certain",
    "workflows",
    "virtue",
    "passing",
    "tests",
    "passing",
    "qa",
    "review",
    "assumed",
    "new",
    "change",
    "good",
    "problem",
    "arise",
    "new",
    "gate",
    "added",
    "automation",
    "future",
    "problems",
    "occur",
    "second",
    "pillar",
    "deployment",
    "automation",
    "famous",
    "post",
    "2000s",
    "founder",
    "stack",
    "overflow",
    "places",
    "make",
    "build",
    "one",
    "step",
    "second",
    "important",
    "question",
    "development",
    "organization",
    "things",
    "really",
    "changed",
    "since",
    "efficiency",
    "build",
    "process",
    "goal",
    "deployment",
    "automation",
    "however",
    "goals",
    "include",
    "deployment",
    "strategies",
    "talked",
    "canary",
    "deployments",
    "want",
    "show",
    "feature",
    "one",
    "user",
    "time",
    "starting",
    "new",
    "versions",
    "application",
    "without",
    "causing",
    "downtime",
    "shut",
    "website",
    "upgrading",
    "turning",
    "new",
    "version",
    "visitors",
    "visit",
    "website",
    "middle",
    "upgrade",
    "notice",
    "downtime",
    "clever",
    "deployment",
    "strategies",
    "avoid",
    "finally",
    "rolling",
    "back",
    "versions",
    "case",
    "something",
    "goes",
    "wrong",
    "easy",
    "overcomplicate",
    "planets",
    "many",
    "companies",
    "complex",
    "internal",
    "platforms",
    "building",
    "distributing",
    "releases",
    "broadly",
    "success",
    "deployment",
    "automation",
    "finding",
    "appropriate",
    "deployment",
    "tools",
    "fulfill",
    "business",
    "goals",
    "configuring",
    "ideal",
    "world",
    "little",
    "custom",
    "code",
    "deploying",
    "shelf",
    "solutions",
    "like",
    "spinnaker",
    "harness",
    "wonderful",
    "places",
    "start",
    "sort",
    "thing",
    "finally",
    "application",
    "performance",
    "management",
    "even",
    "best",
    "code",
    "hamstrung",
    "operational",
    "errors",
    "famous",
    "case",
    "user",
    "put",
    "bunch",
    "spaces",
    "end",
    "post",
    "stack",
    "overflow",
    "brought",
    "stack",
    "overflow",
    "popular",
    "developer",
    "website",
    "stack",
    "overflow",
    "deployed",
    "code",
    "way",
    "would",
    "deal",
    "well",
    "bunch",
    "whitespace",
    "bunch",
    "space",
    "characters",
    "end",
    "post",
    "even",
    "best",
    "code",
    "even",
    "simplest",
    "things",
    "like",
    "messaging",
    "board",
    "easy",
    "faults",
    "make",
    "production",
    "uncovered",
    "users",
    "application",
    "performance",
    "management",
    "ensures",
    "metrics",
    "like",
    "long",
    "taking",
    "requests",
    "processed",
    "many",
    "servers",
    "used",
    "key",
    "health",
    "metrics",
    "processed",
    "problem",
    "like",
    "requests",
    "landing",
    "page",
    "suddenly",
    "taking",
    "long",
    "time",
    "appropriate",
    "people",
    "notified",
    "automatically",
    "instead",
    "engineer",
    "discovering",
    "twitter",
    "website",
    "logging",
    "program",
    "executes",
    "produce",
    "logs",
    "logs",
    "generally",
    "information",
    "state",
    "things",
    "useful",
    "able",
    "map",
    "back",
    "logs",
    "like",
    "know",
    "user",
    "visited",
    "website",
    "information",
    "user",
    "ip",
    "address",
    "username",
    "resource",
    "access",
    "resources",
    "used",
    "fulfilling",
    "access",
    "load",
    "something",
    "database",
    "database",
    "slow",
    "useful",
    "able",
    "say",
    "user",
    "slow",
    "experience",
    "request",
    "fulfilled",
    "slowly",
    "request",
    "fulfilled",
    "slowly",
    "fulfilled",
    "database",
    "slowly",
    "mapping",
    "requests",
    "way",
    "constituent",
    "components",
    "useful",
    "monitoring",
    "mentioned",
    "metrics",
    "automatically",
    "alerting",
    "people",
    "taking",
    "logs",
    "metrics",
    "slower",
    "things",
    "much",
    "memory",
    "left",
    "deciding",
    "bunch",
    "load",
    "might",
    "decide",
    "based",
    "metrics",
    "automatically",
    "scale",
    "number",
    "servers",
    "add",
    "web",
    "servers",
    "used",
    "based",
    "logs",
    "errors",
    "might",
    "want",
    "automatically",
    "file",
    "tickets",
    "engineers",
    "look",
    "downtime",
    "might",
    "want",
    "call",
    "someone",
    "person",
    "call",
    "wake",
    "take",
    "care",
    "downtime",
    "drop",
    "everything",
    "pager",
    "speak",
    "alerting",
    "alerting",
    "fault",
    "detected",
    "trigger",
    "occurred",
    "based",
    "metrics",
    "number",
    "requests",
    "slow",
    "things",
    "unhealthy",
    "know",
    "users",
    "going",
    "notice",
    "degraded",
    "performance",
    "someone",
    "notified",
    "something",
    "done",
    "action",
    "new",
    "product",
    "dive",
    "devops",
    "engineering",
    "talked",
    "end",
    "goals",
    "really",
    "large",
    "organizations",
    "like",
    "netflix",
    "facebook",
    "developers",
    "add",
    "automation",
    "situation",
    "required",
    "new",
    "startup",
    "users",
    "building",
    "website",
    "pillars",
    "two",
    "three",
    "essentially",
    "useless",
    "outages",
    "wo",
    "noticed",
    "anyone",
    "something",
    "like",
    "downtime",
    "wo",
    "noticed",
    "anyone",
    "necessarily",
    "matter",
    "even",
    "necessarily",
    "need",
    "run",
    "automated",
    "tests",
    "useful",
    "stack",
    "someone",
    "would",
    "something",
    "like",
    "low",
    "five",
    "sell",
    "product",
    "get",
    "staging",
    "environments",
    "collaborate",
    "developers",
    "far",
    "care",
    "testing",
    "wise",
    "get",
    "environments",
    "every",
    "proposed",
    "change",
    "play",
    "around",
    "see",
    "manual",
    "qa",
    "setting",
    "whether",
    "good",
    "team",
    "building",
    "app",
    "10",
    "enterprise",
    "users",
    "enterprise",
    "users",
    "much",
    "sensitive",
    "downtime",
    "test",
    "coverage",
    "business",
    "hours",
    "alerting",
    "priorities",
    "logging",
    "log",
    "aggregation",
    "error",
    "collection",
    "popular",
    "tools",
    "like",
    "century",
    "code",
    "cove",
    "automated",
    "test",
    "running",
    "tools",
    "like",
    "bit",
    "rise",
    "circle",
    "ci",
    "vaporizes",
    "known",
    "mobile",
    "testing",
    "alerting",
    "famous",
    "tool",
    "called",
    "pedro",
    "duty",
    "keeps",
    "track",
    "notified",
    "downtime",
    "business",
    "hours",
    "might",
    "assign",
    "someone",
    "person",
    "supposed",
    "take",
    "meetings",
    "day",
    "downtime",
    "drop",
    "everything",
    "solve",
    "problem",
    "social",
    "media",
    "app",
    "like",
    "reddit",
    "might",
    "using",
    "large",
    "combination",
    "things",
    "century",
    "catching",
    "errors",
    "website",
    "elasticsearch",
    "logstash",
    "kibana",
    "popular",
    "way",
    "collecting",
    "looking",
    "logs",
    "pingdom",
    "check",
    "whether",
    "certain",
    "pages",
    "taking",
    "long",
    "respond",
    "launchdarkly",
    "lets",
    "add",
    "feature",
    "flags",
    "say",
    "whether",
    "feature",
    "enabled",
    "group",
    "users",
    "new",
    "landing",
    "page",
    "shown",
    "users",
    "north",
    "america",
    "europe",
    "terraform",
    "lets",
    "automate",
    "deployment",
    "process",
    "given",
    "set",
    "servers",
    "set",
    "things",
    "need",
    "run",
    "servers",
    "terraform",
    "help",
    "automatically",
    "create",
    "plan",
    "ensure",
    "right",
    "things",
    "running",
    "right",
    "places",
    "conclusion",
    "devops",
    "engineering",
    "vital",
    "developer",
    "teams",
    "cognizant",
    "three",
    "pillars",
    "customers",
    "confusing",
    "disappointing",
    "experience",
    "know",
    "things",
    "go",
    "things",
    "wo",
    "scale",
    "properly",
    "things",
    "slow",
    "really",
    "important",
    "keep",
    "three",
    "pillars",
    "mind",
    "scaling",
    "engineering",
    "organization",
    "hired",
    "devops",
    "engineer",
    "new",
    "products",
    "need",
    "automate",
    "much",
    "however",
    "product",
    "matures",
    "gets",
    "users",
    "important",
    "automate",
    "devops",
    "engineering",
    "dedicate",
    "resources",
    "good",
    "morning",
    "code",
    "review",
    "automation",
    "let",
    "talk",
    "testing",
    "going",
    "really",
    "vital",
    "baseline",
    "information",
    "talk",
    "continuous",
    "integration",
    "code",
    "review",
    "automation",
    "topic",
    "test",
    "driven",
    "development",
    "coding",
    "methodology",
    "tests",
    "written",
    "code",
    "written",
    "know",
    "gon",
    "na",
    "explain",
    "tests",
    "test",
    "driven",
    "development",
    "terms",
    "coffeemakers",
    "enjoy",
    "picture",
    "nice",
    "coffee",
    "maker",
    "continue",
    "test",
    "driven",
    "development",
    "spun",
    "around",
    "long",
    "time",
    "popularized",
    "early",
    "2000s",
    "idea",
    "simple",
    "requires",
    "knowledge",
    "things",
    "came",
    "really",
    "make",
    "sense",
    "historically",
    "common",
    "words",
    "software",
    "development",
    "like",
    "quality",
    "assurance",
    "qa",
    "unit",
    "test",
    "roots",
    "factories",
    "building",
    "physical",
    "products",
    "running",
    "factory",
    "building",
    "coffeemakers",
    "would",
    "test",
    "worked",
    "varying",
    "levels",
    "completion",
    "unit",
    "tests",
    "ensure",
    "individual",
    "components",
    "work",
    "heater",
    "work",
    "tank",
    "hold",
    "water",
    "integration",
    "tests",
    "ensure",
    "components",
    "work",
    "together",
    "heater",
    "heat",
    "water",
    "tank",
    "system",
    "end",
    "end",
    "tests",
    "ensure",
    "everything",
    "works",
    "together",
    "coffee",
    "maker",
    "brew",
    "cup",
    "coffee",
    "acceptance",
    "tests",
    "launched",
    "sent",
    "customers",
    "satisfied",
    "result",
    "confused",
    "button",
    "layout",
    "breaking",
    "coffeemaker",
    "within",
    "warranty",
    "period",
    "tests",
    "software",
    "analogies",
    "useful",
    "know",
    "components",
    "break",
    "order",
    "diagnose",
    "problem",
    "also",
    "useful",
    "know",
    "whole",
    "system",
    "working",
    "correctly",
    "even",
    "every",
    "individual",
    "component",
    "works",
    "coffeemaker",
    "heat",
    "water",
    "heater",
    "going",
    "problem",
    "comes",
    "making",
    "coffee",
    "really",
    "idea",
    "testing",
    "let",
    "get",
    "test",
    "driven",
    "development",
    "methodology",
    "built",
    "top",
    "testing",
    "become",
    "popular",
    "past",
    "10",
    "20",
    "years",
    "developers",
    "using",
    "test",
    "driven",
    "development",
    "similar",
    "workflow",
    "choose",
    "something",
    "work",
    "based",
    "idea",
    "devops",
    "would",
    "planning",
    "phase",
    "developers",
    "would",
    "find",
    "something",
    "work",
    "planning",
    "phase",
    "build",
    "write",
    "code",
    "make",
    "build",
    "code",
    "test",
    "read",
    "small",
    "scripts",
    "made",
    "sure",
    "code",
    "working",
    "correctly",
    "making",
    "function",
    "adds",
    "two",
    "numbers",
    "might",
    "pass",
    "unexpected",
    "result",
    "four",
    "would",
    "good",
    "indication",
    "function",
    "working",
    "correctly",
    "steps",
    "one",
    "three",
    "turns",
    "connected",
    "tests",
    "written",
    "end",
    "essentially",
    "codify",
    "specification",
    "success",
    "building",
    "coffeemaker",
    "heat",
    "five",
    "seconds",
    "write",
    "test",
    "brew",
    "coffee",
    "sufficient",
    "strength",
    "write",
    "test",
    "test",
    "driven",
    "development",
    "uses",
    "similarity",
    "steps",
    "one",
    "three",
    "flip",
    "process",
    "first",
    "developers",
    "choose",
    "something",
    "work",
    "write",
    "tests",
    "reading",
    "code",
    "write",
    "tests",
    "currently",
    "failing",
    "specification",
    "satisfied",
    "write",
    "code",
    "specifications",
    "wrote",
    "step",
    "two",
    "satisfied",
    "might",
    "make",
    "testing",
    "regimen",
    "would",
    "work",
    "coffeemaker",
    "succeeded",
    "build",
    "cheapest",
    "coffeemaker",
    "satisfies",
    "testing",
    "regimen",
    "end",
    "result",
    "software",
    "built",
    "tested",
    "matches",
    "specifications",
    "significantly",
    "easier",
    "lot",
    "cases",
    "write",
    "code",
    "write",
    "tests",
    "first",
    "know",
    "building",
    "forces",
    "think",
    "things",
    "important",
    "work",
    "things",
    "put",
    "later",
    "set",
    "change",
    "quick",
    "video",
    "discuss",
    "testing",
    "next",
    "video",
    "talk",
    "continuous",
    "integration",
    "really",
    "devops",
    "continuation",
    "idea",
    "see",
    "talked",
    "testing",
    "developers",
    "read",
    "scripts",
    "make",
    "sure",
    "code",
    "continues",
    "working",
    "way",
    "future",
    "years",
    "made",
    "code",
    "leads",
    "us",
    "discussion",
    "ci",
    "really",
    "one",
    "big",
    "topics",
    "people",
    "talk",
    "devops",
    "context",
    "ci",
    "stands",
    "continuous",
    "integration",
    "refers",
    "developers",
    "continuously",
    "pushing",
    "small",
    "changes",
    "central",
    "repository",
    "numerous",
    "times",
    "per",
    "day",
    "changes",
    "verified",
    "automated",
    "computer",
    "software",
    "runs",
    "tests",
    "programmers",
    "defined",
    "gone",
    "tests",
    "let",
    "talk",
    "company",
    "would",
    "use",
    "ci",
    "well",
    "ci",
    "really",
    "first",
    "step",
    "automating",
    "devops",
    "imagine",
    "simplest",
    "scenario",
    "single",
    "developer",
    "making",
    "program",
    "used",
    "small",
    "group",
    "users",
    "developer",
    "makes",
    "original",
    "program",
    "releases",
    "project",
    "slowly",
    "builds",
    "traction",
    "imagine",
    "developer",
    "critical",
    "bug",
    "year",
    "later",
    "go",
    "back",
    "old",
    "code",
    "say",
    "like",
    "gee",
    "really",
    "bad",
    "code",
    "become",
    "better",
    "programmer",
    "since",
    "year",
    "ago",
    "really",
    "understand",
    "going",
    "really",
    "development",
    "works",
    "programmers",
    "get",
    "better",
    "year",
    "year",
    "read",
    "understand",
    "bad",
    "code",
    "wrote",
    "year",
    "ago",
    "way",
    "confident",
    "making",
    "changes",
    "legacy",
    "code",
    "might",
    "year",
    "old",
    "ci",
    "ci",
    "improves",
    "developer",
    "speed",
    "new",
    "changes",
    "made",
    "confidently",
    "without",
    "worry",
    "breaking",
    "existing",
    "functionality",
    "long",
    "tests",
    "pass",
    "ci",
    "also",
    "reduces",
    "customer",
    "churn",
    "problems",
    "software",
    "much",
    "less",
    "likely",
    "occur",
    "comprehensive",
    "tests",
    "run",
    "automatically",
    "long",
    "get",
    "check",
    "marks",
    "reasonably",
    "sure",
    "core",
    "features",
    "application",
    "continue",
    "working",
    "would",
    "integrate",
    "ci",
    "development",
    "process",
    "first",
    "let",
    "talk",
    "common",
    "branch",
    "based",
    "development",
    "process",
    "many",
    "development",
    "teams",
    "use",
    "first",
    "developers",
    "work",
    "feature",
    "branch",
    "take",
    "files",
    "current",
    "ones",
    "shown",
    "customers",
    "specific",
    "set",
    "time",
    "branch",
    "make",
    "new",
    "copy",
    "files",
    "work",
    "feature",
    "independently",
    "developers",
    "working",
    "things",
    "make",
    "changes",
    "various",
    "components",
    "feature",
    "makes",
    "change",
    "mobile",
    "app",
    "website",
    "branch",
    "push",
    "back",
    "repository",
    "usually",
    "something",
    "like",
    "github",
    "git",
    "lab",
    "bitbucket",
    "repository",
    "run",
    "ci",
    "ci",
    "configured",
    "repository",
    "side",
    "run",
    "tests",
    "programmer",
    "defined",
    "results",
    "tests",
    "attached",
    "pull",
    "request",
    "pull",
    "request",
    "developer",
    "asking",
    "take",
    "code",
    "merge",
    "central",
    "repository",
    "users",
    "shown",
    "take",
    "feature",
    "branch",
    "put",
    "end",
    "commits",
    "shown",
    "users",
    "commit",
    "one",
    "shown",
    "users",
    "next",
    "next",
    "time",
    "deployment",
    "features",
    "programmer",
    "meet",
    "visible",
    "users",
    "best",
    "part",
    "cost",
    "anything",
    "central",
    "git",
    "repositories",
    "like",
    "github",
    "git",
    "lab",
    "bitbucket",
    "generous",
    "free",
    "tiers",
    "even",
    "organizations",
    "minus",
    "security",
    "access",
    "control",
    "know",
    "permissions",
    "features",
    "might",
    "need",
    "scale",
    "ci",
    "providers",
    "like",
    "layer",
    "ci",
    "github",
    "actions",
    "git",
    "lab",
    "pipelines",
    "generous",
    "features",
    "well",
    "ci",
    "know",
    "really",
    "made",
    "people",
    "working",
    "websites",
    "maybe",
    "something",
    "consider",
    "really",
    "early",
    "projects",
    "lifecycle",
    "really",
    "matter",
    "ci",
    "provider",
    "use",
    "course",
    "one",
    "thing",
    "take",
    "away",
    "discussion",
    "ci",
    "ci",
    "vital",
    "tool",
    "really",
    "first",
    "thing",
    "automated",
    "pull",
    "request",
    "automation",
    "schemes",
    "easy",
    "developers",
    "writing",
    "tests",
    "regardless",
    "run",
    "tests",
    "automatically",
    "slowly",
    "people",
    "break",
    "things",
    "without",
    "realizing",
    "breaking",
    "users",
    "notice",
    "broken",
    "things",
    "following",
    "best",
    "practices",
    "like",
    "feature",
    "branches",
    "ci",
    "really",
    "easy",
    "way",
    "scale",
    "developer",
    "team",
    "ci",
    "developer",
    "team",
    "easily",
    "scale",
    "one",
    "10",
    "developers",
    "point",
    "start",
    "worrying",
    "pull",
    "request",
    "automation",
    "topics",
    "like",
    "ones",
    "cover",
    "next",
    "section",
    "talk",
    "lot",
    "theory",
    "let",
    "get",
    "practical",
    "little",
    "bit",
    "round",
    "understanding",
    "devops",
    "concepts",
    "work",
    "let",
    "look",
    "setting",
    "ci",
    "looks",
    "like",
    "actual",
    "repository",
    "torey",
    "live",
    "chat",
    "example",
    "open",
    "source",
    "version",
    "slack",
    "used",
    "demo",
    "repository",
    "throughout",
    "layer",
    "three",
    "internal",
    "documentation",
    "let",
    "say",
    "open",
    "source",
    "version",
    "slack",
    "like",
    "run",
    "tests",
    "every",
    "time",
    "developer",
    "proposed",
    "changes",
    "pull",
    "requests",
    "tab",
    "able",
    "know",
    "whether",
    "change",
    "good",
    "particular",
    "let",
    "say",
    "developer",
    "changing",
    "color",
    "website",
    "main",
    "website",
    "log",
    "top",
    "bar",
    "sidebar",
    "purple",
    "perhaps",
    "customer",
    "requested",
    "color",
    "blue",
    "instead",
    "asked",
    "developer",
    "team",
    "make",
    "change",
    "would",
    "go",
    "necessary",
    "design",
    "file",
    "edit",
    "color",
    "case",
    "two",
    "colors",
    "change",
    "developer",
    "opened",
    "pull",
    "request",
    "difficult",
    "us",
    "review",
    "change",
    "without",
    "ci",
    "system",
    "see",
    "file",
    "change",
    "description",
    "commit",
    "see",
    "edited",
    "main",
    "dot",
    "css",
    "changed",
    "color",
    "values",
    "hard",
    "understand",
    "ramifications",
    "especially",
    "hard",
    "understand",
    "whether",
    "negative",
    "side",
    "effects",
    "existing",
    "users",
    "especially",
    "changes",
    "less",
    "trivial",
    "changing",
    "color",
    "request",
    "asked",
    "review",
    "would",
    "pull",
    "changes",
    "onto",
    "local",
    "developer",
    "machine",
    "run",
    "script",
    "locally",
    "evaluate",
    "changes",
    "locally",
    "could",
    "ask",
    "developer",
    "set",
    "screen",
    "sharing",
    "session",
    "could",
    "walk",
    "changes",
    "add",
    "lot",
    "friction",
    "development",
    "process",
    "better",
    "could",
    "evaluate",
    "changes",
    "without",
    "needing",
    "involvement",
    "entirely",
    "web",
    "interface",
    "continuous",
    "integration",
    "helps",
    "continuous",
    "integration",
    "allows",
    "developers",
    "set",
    "comprehensive",
    "tests",
    "something",
    "work",
    "anymore",
    "proposed",
    "change",
    "says",
    "right",
    "pull",
    "request",
    "let",
    "close",
    "change",
    "look",
    "repository",
    "understand",
    "set",
    "ci",
    "repository",
    "one",
    "services",
    "called",
    "cypress",
    "end",
    "end",
    "testing",
    "service",
    "contains",
    "several",
    "configurations",
    "configurations",
    "interact",
    "page",
    "fake",
    "browser",
    "example",
    "test",
    "enters",
    "username",
    "password",
    "logs",
    "ensures",
    "user",
    "actually",
    "locked",
    "test",
    "goes",
    "message",
    "area",
    "enters",
    "random",
    "message",
    "ensures",
    "message",
    "actually",
    "submitted",
    "viewable",
    "remaining",
    "chat",
    "area",
    "enough",
    "end",
    "end",
    "tests",
    "reasonably",
    "confident",
    "chat",
    "system",
    "like",
    "one",
    "continues",
    "working",
    "like",
    "run",
    "tests",
    "every",
    "time",
    "developer",
    "proposes",
    "change",
    "install",
    "plug",
    "github",
    "set",
    "server",
    "run",
    "every",
    "pull",
    "request",
    "run",
    "test",
    "new",
    "server",
    "let",
    "set",
    "layers",
    "use",
    "cases",
    "easy",
    "install",
    "directly",
    "onto",
    "github",
    "account",
    "install",
    "onto",
    "github",
    "repository",
    "listed",
    "means",
    "successfully",
    "installed",
    "lera",
    "ci",
    "onto",
    "repository",
    "however",
    "nothing",
    "happen",
    "yet",
    "configuration",
    "files",
    "need",
    "set",
    "configuration",
    "file",
    "repository",
    "start",
    "whole",
    "stack",
    "run",
    "tests",
    "cypress",
    "required",
    "let",
    "repository",
    "docker",
    "compose",
    "based",
    "let",
    "use",
    "docker",
    "compose",
    "example",
    "starting",
    "point",
    "going",
    "install",
    "docker",
    "containerization",
    "technology",
    "talk",
    "containers",
    "versus",
    "virtual",
    "machines",
    "later",
    "sets",
    "talks",
    "install",
    "docker",
    "compose",
    "way",
    "running",
    "multiple",
    "containers",
    "time",
    "concepts",
    "become",
    "clear",
    "later",
    "talk",
    "copy",
    "repository",
    "files",
    "test",
    "runner",
    "build",
    "services",
    "start",
    "services",
    "deploy",
    "pipeline",
    "let",
    "skip",
    "blank",
    "talk",
    "deployment",
    "section",
    "devops",
    "course",
    "services",
    "started",
    "let",
    "run",
    "tests",
    "luckily",
    "already",
    "pre",
    "set",
    "script",
    "copy",
    "configuration",
    "recap",
    "configuration",
    "install",
    "necessary",
    "software",
    "case",
    "docker",
    "docker",
    "compose",
    "copy",
    "repository",
    "files",
    "build",
    "micro",
    "services",
    "start",
    "locally",
    "within",
    "test",
    "runner",
    "run",
    "tests",
    "installed",
    "layer",
    "ci",
    "onto",
    "repository",
    "add",
    "configuration",
    "set",
    "ci",
    "let",
    "click",
    "add",
    "file",
    "name",
    "layer",
    "file",
    "layer",
    "c",
    "configuration",
    "files",
    "ci",
    "providers",
    "different",
    "file",
    "names",
    "course",
    "copy",
    "configuration",
    "commit",
    "file",
    "set",
    "ci",
    "see",
    "dot",
    "next",
    "commit",
    "name",
    "dot",
    "turns",
    "checkmark",
    "tests",
    "passed",
    "means",
    "every",
    "time",
    "developer",
    "pushes",
    "new",
    "code",
    "source",
    "code",
    "management",
    "tool",
    "look",
    "success",
    "metric",
    "namely",
    "whether",
    "tests",
    "passed",
    "automatically",
    "wo",
    "run",
    "test",
    "reviewer",
    "wo",
    "trust",
    "original",
    "developer",
    "actually",
    "tested",
    "change",
    "works",
    "let",
    "go",
    "back",
    "original",
    "proposed",
    "change",
    "changing",
    "colors",
    "production",
    "blue",
    "purple",
    "going",
    "make",
    "change",
    "reopen",
    "pull",
    "request",
    "configured",
    "ci",
    "provider",
    "able",
    "see",
    "tests",
    "running",
    "automatically",
    "directly",
    "pull",
    "request",
    "view",
    "developer",
    "asks",
    "us",
    "review",
    "much",
    "easier",
    "us",
    "able",
    "tell",
    "whether",
    "change",
    "negatively",
    "affected",
    "customers",
    "workflows",
    "particular",
    "configured",
    "cypress",
    "later",
    "ci",
    "check",
    "logging",
    "posting",
    "messages",
    "still",
    "work",
    "well",
    "know",
    "change",
    "even",
    "though",
    "many",
    "files",
    "might",
    "changed",
    "core",
    "workflows",
    "still",
    "work",
    "gives",
    "us",
    "degree",
    "confidence",
    "nothing",
    "terribly",
    "bad",
    "happened",
    "code",
    "look",
    "file",
    "change",
    "first",
    "idea",
    "developer",
    "done",
    "view",
    "ci",
    "open",
    "relevant",
    "pipeline",
    "see",
    "tests",
    "progress",
    "running",
    "new",
    "version",
    "application",
    "built",
    "started",
    "within",
    "ci",
    "runner",
    "tests",
    "running",
    "one",
    "one",
    "tested",
    "post",
    "chat",
    "messages",
    "within",
    "alternative",
    "slacks",
    "chat",
    "page",
    "landing",
    "page",
    "loads",
    "logging",
    "works",
    "correctly",
    "within",
    "pull",
    "request",
    "view",
    "able",
    "see",
    "big",
    "checkmark",
    "shows",
    "relevant",
    "ci",
    "checks",
    "passed",
    "even",
    "automate",
    "within",
    "github",
    "source",
    "code",
    "management",
    "platforms",
    "certain",
    "checks",
    "must",
    "pass",
    "entirely",
    "automate",
    "ci",
    "checks",
    "must",
    "pass",
    "change",
    "could",
    "merged",
    "let",
    "make",
    "sure",
    "developers",
    "never",
    "reviewing",
    "code",
    "obviously",
    "broken",
    "breaking",
    "tests",
    "run",
    "end",
    "end",
    "tests",
    "also",
    "run",
    "linters",
    "unit",
    "tests",
    "versions",
    "tests",
    "talked",
    "throughout",
    "series",
    "talks",
    "happy",
    "change",
    "reviewed",
    "files",
    "see",
    "ci",
    "passed",
    "merge",
    "great",
    "deal",
    "confidence",
    "automation",
    "place",
    "setting",
    "ci",
    "applied",
    "setting",
    "let",
    "get",
    "back",
    "theory",
    "little",
    "bit",
    "continuing",
    "topic",
    "testing",
    "continuous",
    "integration",
    "let",
    "talk",
    "code",
    "coverage",
    "code",
    "coverage",
    "quantitatively",
    "measures",
    "comprehensive",
    "tests",
    "code",
    "base",
    "might",
    "think",
    "enough",
    "tests",
    "find",
    "common",
    "bugs",
    "really",
    "check",
    "functionality",
    "app",
    "hard",
    "put",
    "number",
    "unless",
    "measuring",
    "code",
    "coverage",
    "code",
    "coverage",
    "graph",
    "looks",
    "like",
    "popular",
    "tool",
    "squares",
    "represents",
    "file",
    "color",
    "represents",
    "many",
    "tests",
    "covering",
    "file",
    "bright",
    "green",
    "means",
    "100",
    "file",
    "tested",
    "bright",
    "red",
    "means",
    "none",
    "file",
    "tested",
    "would",
    "priority",
    "file",
    "either",
    "tested",
    "excluded",
    "measurement",
    "let",
    "say",
    "taking",
    "existing",
    "code",
    "base",
    "relatively",
    "large",
    "lines",
    "code",
    "years",
    "adopted",
    "couple",
    "100",
    "users",
    "expected",
    "maintain",
    "add",
    "features",
    "without",
    "harming",
    "users",
    "first",
    "place",
    "look",
    "unit",
    "tests",
    "discussed",
    "earlier",
    "really",
    "prioritized",
    "previous",
    "maintainers",
    "mismatch",
    "libraries",
    "naming",
    "conventions",
    "kind",
    "hard",
    "tell",
    "tests",
    "testing",
    "files",
    "files",
    "need",
    "tested",
    "write",
    "new",
    "features",
    "like",
    "objective",
    "way",
    "measure",
    "sensitive",
    "certain",
    "parts",
    "codebase",
    "changed",
    "something",
    "comprehensive",
    "tests",
    "much",
    "less",
    "scared",
    "make",
    "changes",
    "add",
    "features",
    "touch",
    "part",
    "code",
    "part",
    "code",
    "pests",
    "code",
    "coverage",
    "really",
    "shines",
    "got",
    "complicated",
    "code",
    "base",
    "existing",
    "users",
    "like",
    "enforce",
    "tests",
    "written",
    "things",
    "broken",
    "objective",
    "way",
    "getting",
    "first",
    "code",
    "whole",
    "series",
    "let",
    "look",
    "javascript",
    "function",
    "make",
    "bigger",
    "simple",
    "function",
    "bit",
    "contrived",
    "takes",
    "number",
    "defines",
    "variables",
    "loops",
    "number",
    "pushing",
    "strings",
    "results",
    "list",
    "every",
    "50",
    "elements",
    "pushes",
    "special",
    "string",
    "results",
    "list",
    "whole",
    "function",
    "10",
    "lines",
    "code",
    "10",
    "lines",
    "equal",
    "really",
    "three",
    "kinds",
    "lines",
    "program",
    "like",
    "syntax",
    "lines",
    "like",
    "closing",
    "ones",
    "actually",
    "code",
    "simply",
    "syntactic",
    "constructs",
    "programmers",
    "benefit",
    "know",
    "even",
    "make",
    "sense",
    "test",
    "would",
    "test",
    "semi",
    "colon",
    "existed",
    "logic",
    "lines",
    "like",
    "one",
    "actually",
    "side",
    "effects",
    "side",
    "effects",
    "mean",
    "lines",
    "remove",
    "would",
    "change",
    "behavior",
    "program",
    "branch",
    "lines",
    "like",
    "one",
    "changed",
    "flow",
    "program",
    "loops",
    "statements",
    "programming",
    "used",
    "constructs",
    "change",
    "order",
    "commands",
    "run",
    "statement",
    "evaluates",
    "true",
    "would",
    "run",
    "line",
    "evaluate",
    "true",
    "would",
    "run",
    "line",
    "reiterate",
    "three",
    "kinds",
    "lines",
    "syntactical",
    "ones",
    "anything",
    "actual",
    "logic",
    "ones",
    "effects",
    "branch",
    "ones",
    "change",
    "lines",
    "code",
    "execute",
    "code",
    "coverage",
    "usually",
    "defined",
    "line",
    "coverage",
    "ratio",
    "non",
    "syntax",
    "lines",
    "executed",
    "tests",
    "total",
    "number",
    "non",
    "syntax",
    "lines",
    "consider",
    "test",
    "expect",
    "function",
    "work",
    "input",
    "manually",
    "calculate",
    "function",
    "return",
    "input",
    "would",
    "unit",
    "test",
    "function",
    "since",
    "executing",
    "input",
    "statement",
    "requires",
    "input",
    "least",
    "50",
    "execute",
    "would",
    "run",
    "testing",
    "line",
    "would",
    "execute",
    "line",
    "would",
    "execute",
    "line",
    "would",
    "also",
    "execute",
    "executing",
    "five",
    "six",
    "lines",
    "deed",
    "would",
    "83",
    "test",
    "coverage",
    "single",
    "test",
    "gets",
    "us",
    "way",
    "understanding",
    "function",
    "understanding",
    "problems",
    "related",
    "concept",
    "called",
    "branch",
    "coverage",
    "instead",
    "measuring",
    "many",
    "lines",
    "code",
    "measures",
    "groups",
    "lines",
    "example",
    "two",
    "branches",
    "main",
    "branch",
    "body",
    "loop",
    "actually",
    "third",
    "branch",
    "called",
    "statement",
    "body",
    "line",
    "always",
    "execute",
    "body",
    "loop",
    "execute",
    "less",
    "need",
    "greater",
    "equal",
    "one",
    "lines",
    "execute",
    "line",
    "execute",
    "greater",
    "equal",
    "branch",
    "coverage",
    "would",
    "many",
    "individual",
    "branches",
    "three",
    "evaluated",
    "true",
    "test",
    "like",
    "know",
    "many",
    "branches",
    "tested",
    "useful",
    "line",
    "code",
    "executes",
    "line",
    "code",
    "always",
    "execute",
    "treating",
    "individual",
    "things",
    "need",
    "tested",
    "really",
    "mean",
    "much",
    "taking",
    "bodies",
    "statements",
    "things",
    "need",
    "tested",
    "measured",
    "test",
    "branch",
    "coverage",
    "see",
    "two",
    "three",
    "branches",
    "x",
    "evaluated",
    "test",
    "care",
    "line",
    "coverage",
    "branch",
    "coverage",
    "already",
    "discussed",
    "one",
    "scenario",
    "inherited",
    "existing",
    "code",
    "base",
    "however",
    "important",
    "many",
    "different",
    "situations",
    "general",
    "measure",
    "optimize",
    "code",
    "coverage",
    "following",
    "true",
    "product",
    "users",
    "users",
    "might",
    "leave",
    "affected",
    "bugs",
    "case",
    "important",
    "measure",
    "code",
    "coverage",
    "lets",
    "work",
    "team",
    "improve",
    "code",
    "coverage",
    "reduce",
    "number",
    "bugs",
    "working",
    "developers",
    "immediately",
    "trustworthy",
    "like",
    "contractors",
    "insurance",
    "bringing",
    "code",
    "base",
    "need",
    "make",
    "changes",
    "fixed",
    "timescale",
    "like",
    "form",
    "internship",
    "immediately",
    "become",
    "experts",
    "entire",
    "code",
    "base",
    "like",
    "able",
    "make",
    "changes",
    "without",
    "worrying",
    "much",
    "things",
    "breaking",
    "working",
    "large",
    "code",
    "bases",
    "many",
    "individually",
    "testable",
    "components",
    "code",
    "coverage",
    "analysis",
    "complement",
    "test",
    "driven",
    "development",
    "talked",
    "previous",
    "talk",
    "make",
    "sure",
    "everyone",
    "team",
    "generally",
    "working",
    "important",
    "things",
    "things",
    "make",
    "wo",
    "break",
    "future",
    "common",
    "mistake",
    "code",
    "review",
    "automation",
    "make",
    "things",
    "rigid",
    "product",
    "enough",
    "users",
    "force",
    "developers",
    "get",
    "100",
    "branch",
    "coverage",
    "write",
    "two",
    "five",
    "unit",
    "tests",
    "every",
    "function",
    "going",
    "make",
    "much",
    "slower",
    "developing",
    "features",
    "users",
    "actually",
    "notice",
    "remember",
    "tests",
    "never",
    "viewed",
    "users",
    "thing",
    "users",
    "care",
    "stability",
    "system",
    "mvp",
    "product",
    "many",
    "active",
    "users",
    "yet",
    "might",
    "worth",
    "measure",
    "optimized",
    "branch",
    "coverage",
    "users",
    "care",
    "lot",
    "stability",
    "writing",
    "unit",
    "tests",
    "types",
    "tests",
    "important",
    "thing",
    "keep",
    "mind",
    "developers",
    "solidifying",
    "implementations",
    "features",
    "might",
    "throw",
    "build",
    "feature",
    "ends",
    "something",
    "users",
    "actually",
    "want",
    "always",
    "better",
    "idea",
    "throw",
    "feature",
    "build",
    "long",
    "term",
    "developer",
    "builds",
    "feature",
    "writes",
    "many",
    "tests",
    "improve",
    "code",
    "coverage",
    "feature",
    "much",
    "likely",
    "throw",
    "feel",
    "sense",
    "ownership",
    "feel",
    "sense",
    "sunk",
    "cost",
    "built",
    "feature",
    "made",
    "good",
    "speak",
    "important",
    "optimize",
    "things",
    "important",
    "subjective",
    "idea",
    "really",
    "notice",
    "users",
    "start",
    "complaining",
    "stability",
    "organizationally",
    "common",
    "policies",
    "related",
    "code",
    "coverage",
    "first",
    "one",
    "useful",
    "inherit",
    "code",
    "base",
    "policy",
    "code",
    "coverage",
    "must",
    "decrease",
    "one",
    "one",
    "easiest",
    "ones",
    "automate",
    "especially",
    "useful",
    "taking",
    "existing",
    "code",
    "base",
    "mentioned",
    "idea",
    "code",
    "coverage",
    "ratio",
    "never",
    "decrease",
    "current",
    "code",
    "75",
    "lines",
    "tested",
    "new",
    "change",
    "introduces",
    "40",
    "lines",
    "code",
    "least",
    "30",
    "lines",
    "need",
    "tested",
    "otherwise",
    "changes",
    "code",
    "coverage",
    "would",
    "less",
    "75",
    "30",
    "decreasing",
    "average",
    "code",
    "coverage",
    "code",
    "coverage",
    "policies",
    "increase",
    "stability",
    "less",
    "bugs",
    "things",
    "better",
    "tested",
    "expense",
    "developer",
    "speed",
    "developers",
    "make",
    "complicated",
    "tests",
    "might",
    "spend",
    "lot",
    "time",
    "making",
    "testing",
    "infrastructure",
    "features",
    "shipped",
    "less",
    "quickly",
    "make",
    "sort",
    "policy",
    "enforce",
    "code",
    "review",
    "automation",
    "unfortunate",
    "side",
    "effect",
    "policy",
    "changes",
    "would",
    "harder",
    "test",
    "integrations",
    "less",
    "likely",
    "worked",
    "developers",
    "developers",
    "incentivized",
    "paycheck",
    "manager",
    "ship",
    "features",
    "quickly",
    "make",
    "many",
    "features",
    "per",
    "scrum",
    "cycle",
    "certain",
    "features",
    "harder",
    "test",
    "require",
    "internet",
    "connectivity",
    "connected",
    "third",
    "party",
    "api",
    "features",
    "harder",
    "make",
    "harder",
    "test",
    "developers",
    "less",
    "likely",
    "make",
    "regardless",
    "whether",
    "important",
    "users",
    "might",
    "useful",
    "exemptions",
    "policy",
    "place",
    "things",
    "like",
    "third",
    "party",
    "integrations",
    "organization",
    "decides",
    "go",
    "code",
    "coverage",
    "must",
    "decrease",
    "policy",
    "another",
    "useful",
    "policy",
    "code",
    "owners",
    "test",
    "files",
    "used",
    "code",
    "coverage",
    "automation",
    "keep",
    "code",
    "well",
    "tested",
    "often",
    "beneficial",
    "define",
    "code",
    "owners",
    "tests",
    "means",
    "developers",
    "change",
    "implementation",
    "details",
    "without",
    "formal",
    "reviewers",
    "logic",
    "changes",
    "tests",
    "define",
    "success",
    "means",
    "function",
    "algorithm",
    "changing",
    "tests",
    "new",
    "implementation",
    "would",
    "need",
    "approved",
    "senior",
    "developer",
    "manager",
    "github",
    "engineering",
    "manager",
    "github",
    "code",
    "owners",
    "file",
    "might",
    "contain",
    "means",
    "spec",
    "dot",
    "j",
    "common",
    "javascript",
    "testing",
    "naming",
    "convention",
    "engineering",
    "manager",
    "username",
    "means",
    "file",
    "called",
    "code",
    "owners",
    "contains",
    "engineering",
    "manager",
    "need",
    "approve",
    "change",
    "changes",
    "test",
    "probably",
    "good",
    "policy",
    "working",
    "large",
    "code",
    "base",
    "test",
    "driven",
    "development",
    "especially",
    "hiring",
    "interns",
    "contractors",
    "users",
    "especially",
    "sensitive",
    "bugs",
    "afraid",
    "bad",
    "experience",
    "even",
    "small",
    "bugs",
    "make",
    "might",
    "team",
    "best",
    "interest",
    "install",
    "code",
    "coverage",
    "measurement",
    "tool",
    "time",
    "writing",
    "three",
    "common",
    "ones",
    "open",
    "source",
    "world",
    "code",
    "coverage",
    "coveralls",
    "code",
    "climate",
    "talked",
    "testing",
    "talked",
    "continuous",
    "integration",
    "really",
    "like",
    "initial",
    "things",
    "set",
    "devops",
    "code",
    "review",
    "automation",
    "pipeline",
    "problem",
    "requires",
    "developers",
    "board",
    "course",
    "developers",
    "probably",
    "busy",
    "building",
    "features",
    "might",
    "necessarily",
    "want",
    "make",
    "tests",
    "improve",
    "test",
    "coverage",
    "let",
    "talk",
    "linting",
    "something",
    "approximates",
    "testing",
    "need",
    "developers",
    "spend",
    "time",
    "linters",
    "programs",
    "look",
    "program",
    "source",
    "code",
    "find",
    "problems",
    "automatically",
    "common",
    "feature",
    "pull",
    "request",
    "automation",
    "ensure",
    "obvious",
    "bugs",
    "make",
    "production",
    "obvious",
    "quotes",
    "example",
    "linting",
    "let",
    "look",
    "javascript",
    "program",
    "simple",
    "one",
    "understand",
    "even",
    "know",
    "javascript",
    "defines",
    "variable",
    "var",
    "x",
    "equals",
    "five",
    "defines",
    "function",
    "continues",
    "open",
    "bracket",
    "generally",
    "considered",
    "bad",
    "practice",
    "uses",
    "let",
    "second",
    "variable",
    "defines",
    "name",
    "first",
    "one",
    "confusing",
    "know",
    "would",
    "called",
    "good",
    "code",
    "code",
    "reviewer",
    "would",
    "mentioned",
    "code",
    "review",
    "says",
    "x",
    "less",
    "100",
    "console",
    "log",
    "x",
    "closes",
    "loop",
    "line",
    "messes",
    "end",
    "det",
    "three",
    "lines",
    "indented",
    "consistency",
    "closes",
    "function",
    "finally",
    "realize",
    "loop",
    "goes",
    "forever",
    "x",
    "incremented",
    "body",
    "loop",
    "looking",
    "code",
    "statically",
    "without",
    "running",
    "environment",
    "looking",
    "code",
    "browser",
    "even",
    "tell",
    "loop",
    "run",
    "forever",
    "probably",
    "something",
    "programmer",
    "intend",
    "much",
    "feedback",
    "could",
    "automated",
    "set",
    "rules",
    "like",
    "shadow",
    "variables",
    "never",
    "name",
    "variable",
    "inner",
    "scope",
    "name",
    "variable",
    "outer",
    "scope",
    "could",
    "applied",
    "proposed",
    "change",
    "human",
    "reviewers",
    "would",
    "waste",
    "effort",
    "leaving",
    "code",
    "style",
    "comments",
    "tools",
    "maintain",
    "run",
    "lists",
    "called",
    "linters",
    "relevantly",
    "another",
    "class",
    "code",
    "review",
    "feedback",
    "code",
    "style",
    "easy",
    "coder",
    "bureaus",
    "waste",
    "time",
    "pointing",
    "stylistic",
    "choices",
    "like",
    "tabs",
    "versus",
    "spaces",
    "camel",
    "case",
    "versus",
    "pothole",
    "case",
    "discussions",
    "bring",
    "value",
    "end",
    "users",
    "know",
    "customers",
    "care",
    "case",
    "code",
    "written",
    "ultimately",
    "serve",
    "cause",
    "resentment",
    "missed",
    "deadlines",
    "within",
    "engineering",
    "teams",
    "review",
    "takes",
    "extra",
    "couple",
    "hours",
    "comments",
    "like",
    "couple",
    "hours",
    "programmer",
    "could",
    "focusing",
    "attention",
    "another",
    "feature",
    "engineering",
    "organizations",
    "eventually",
    "adopt",
    "maintain",
    "global",
    "style",
    "guide",
    "cases",
    "starting",
    "something",
    "like",
    "google",
    "style",
    "guide",
    "open",
    "source",
    "available",
    "link",
    "great",
    "starting",
    "point",
    "guides",
    "often",
    "come",
    "linter",
    "configurations",
    "help",
    "everything",
    "stay",
    "stylistically",
    "similar",
    "programming",
    "languages",
    "like",
    "python",
    "go",
    "come",
    "style",
    "guides",
    "automation",
    "like",
    "pep",
    "eight",
    "case",
    "python",
    "make",
    "easy",
    "developers",
    "using",
    "programming",
    "languages",
    "stay",
    "unified",
    "style",
    "organizational",
    "thing",
    "code",
    "style",
    "knit",
    "stands",
    "nitpicking",
    "instead",
    "blocking",
    "code",
    "review",
    "stage",
    "review",
    "feedback",
    "code",
    "style",
    "review",
    "feedback",
    "might",
    "better",
    "code",
    "reviewers",
    "leave",
    "small",
    "review",
    "comments",
    "called",
    "mitts",
    "say",
    "knit",
    "full",
    "colon",
    "styled",
    "way",
    "great",
    "allows",
    "reviewers",
    "merge",
    "something",
    "pieces",
    "feedback",
    "spent",
    "small",
    "piece",
    "refactoring",
    "could",
    "done",
    "later",
    "state",
    "later",
    "point",
    "time",
    "style",
    "guide",
    "adopted",
    "possible",
    "configure",
    "tools",
    "automatically",
    "format",
    "code",
    "follow",
    "style",
    "guide",
    "tools",
    "called",
    "auto",
    "formatters",
    "programming",
    "language",
    "go",
    "use",
    "layer",
    "ci",
    "command",
    "following",
    "would",
    "use",
    "standard",
    "format",
    "one",
    "comes",
    "go",
    "clean",
    "source",
    "files",
    "repository",
    "use",
    "janu",
    "find",
    "command",
    "find",
    "files",
    "go",
    "extension",
    "exec",
    "go",
    "format",
    "take",
    "source",
    "files",
    "format",
    "style",
    "guides",
    "pass",
    "style",
    "guide",
    "course",
    "ci",
    "system",
    "running",
    "tests",
    "automatically",
    "every",
    "time",
    "code",
    "pushed",
    "code",
    "could",
    "automatically",
    "limited",
    "well",
    "programmers",
    "wait",
    "human",
    "reviewer",
    "tell",
    "whether",
    "code",
    "limited",
    "styled",
    "appropriately",
    "cases",
    "cheap",
    "convenient",
    "run",
    "linting",
    "formatting",
    "automatically",
    "ci",
    "system",
    "easy",
    "solution",
    "get",
    "another",
    "checkmark",
    "get",
    "something",
    "set",
    "quickly",
    "good",
    "start",
    "make",
    "lint",
    "act",
    "running",
    "unit",
    "test",
    "ci",
    "add",
    "x",
    "code",
    "listed",
    "properly",
    "developer",
    "quickly",
    "get",
    "stylistic",
    "feedback",
    "without",
    "needing",
    "talk",
    "another",
    "human",
    "wasting",
    "reviewers",
    "time",
    "getting",
    "sort",
    "feedback",
    "ci",
    "configuration",
    "might",
    "look",
    "like",
    "copy",
    "project",
    "files",
    "run",
    "linting",
    "script",
    "linting",
    "script",
    "fails",
    "whole",
    "pipeline",
    "would",
    "fail",
    "approach",
    "stops",
    "reviewers",
    "picking",
    "style",
    "passed",
    "linter",
    "perfectly",
    "reasonable",
    "response",
    "overly",
    "zealous",
    "code",
    "reviewer",
    "even",
    "simple",
    "automation",
    "like",
    "improve",
    "development",
    "speed",
    "entire",
    "development",
    "teams",
    "also",
    "stops",
    "reviewers",
    "give",
    "style",
    "feedback",
    "checks",
    "code",
    "review",
    "pass",
    "like",
    "passes",
    "linters",
    "done",
    "committed",
    "stylistically",
    "okay",
    "reviewer",
    "might",
    "still",
    "leave",
    "feedback",
    "future",
    "reference",
    "blocking",
    "commits",
    "getting",
    "production",
    "small",
    "stylistic",
    "choices",
    "even",
    "linter",
    "better",
    "long",
    "term",
    "solution",
    "set",
    "commit",
    "back",
    "button",
    "common",
    "idea",
    "happens",
    "place",
    "code",
    "review",
    "automation",
    "specific",
    "example",
    "might",
    "look",
    "like",
    "say",
    "code",
    "limited",
    "run",
    "yes",
    "lint",
    "dash",
    "dash",
    "fix",
    "flag",
    "goes",
    "source",
    "files",
    "yes",
    "lint",
    "linter",
    "javascript",
    "would",
    "go",
    "source",
    "files",
    "would",
    "apply",
    "linting",
    "rules",
    "would",
    "fix",
    "stylistic",
    "errors",
    "would",
    "create",
    "commit",
    "additional",
    "know",
    "set",
    "file",
    "changes",
    "top",
    "developers",
    "proposing",
    "would",
    "create",
    "new",
    "branch",
    "suffix",
    "listed",
    "would",
    "push",
    "branch",
    "developer",
    "pushes",
    "unlimited",
    "code",
    "bot",
    "would",
    "automatically",
    "create",
    "commit",
    "lifted",
    "everything",
    "would",
    "create",
    "new",
    "branch",
    "developers",
    "code",
    "known",
    "good",
    "reviewer",
    "could",
    "simply",
    "merge",
    "linton",
    "branch",
    "instead",
    "developers",
    "original",
    "one",
    "failed",
    "pipeline",
    "lint",
    "failed",
    "means",
    "unlimited",
    "version",
    "ca",
    "merged",
    "limited",
    "one",
    "assuming",
    "feedback",
    "listed",
    "related",
    "could",
    "merged",
    "two",
    "branches",
    "one",
    "developers",
    "proposing",
    "limited",
    "one",
    "code",
    "reviewer",
    "would",
    "look",
    "one",
    "rented",
    "say",
    "whether",
    "good",
    "like",
    "logic",
    "commit",
    "good",
    "good",
    "reviewer",
    "github",
    "could",
    "merge",
    "branch",
    "instead",
    "one",
    "asked",
    "review",
    "branch",
    "would",
    "original",
    "one",
    "additional",
    "commit",
    "top",
    "examples",
    "limiters",
    "many",
    "programming",
    "languages",
    "javascript",
    "standard",
    "2021",
    "eastlands",
    "typescript",
    "also",
    "uses",
    "eastlands",
    "python",
    "piland",
    "flake",
    "eight",
    "much",
    "subjective",
    "common",
    "choice",
    "google",
    "cpp",
    "lens",
    "google",
    "style",
    "guide",
    "mentioned",
    "go",
    "comes",
    "format",
    "called",
    "go",
    "format",
    "acts",
    "somewhat",
    "like",
    "linter",
    "although",
    "additional",
    "libraries",
    "available",
    "rules",
    "beyond",
    "java",
    "checkstyle",
    "find",
    "bugs",
    "maybe",
    "older",
    "options",
    "lot",
    "choices",
    "languages",
    "like",
    "java",
    "ruby",
    "broke",
    "rubocop",
    "pronto",
    "seen",
    "users",
    "commonly",
    "use",
    "java",
    "javascript",
    "c",
    "sharp",
    "many",
    "languages",
    "lifted",
    "sonar",
    "cube",
    "popular",
    "static",
    "analysis",
    "framework",
    "commonly",
    "used",
    "larger",
    "enterprises",
    "open",
    "source",
    "version",
    "good",
    "place",
    "start",
    "10",
    "developer",
    "teams",
    "would",
    "like",
    "set",
    "static",
    "analysis",
    "finally",
    "startup",
    "called",
    "deep",
    "source",
    "talked",
    "startup",
    "startup",
    "sorts",
    "interesting",
    "stuff",
    "static",
    "analysis",
    "well",
    "static",
    "analysis",
    "practice",
    "looking",
    "source",
    "code",
    "without",
    "running",
    "finding",
    "bugs",
    "encourage",
    "look",
    "deep",
    "source",
    "well",
    "comparison",
    "code",
    "automation",
    "tools",
    "linters",
    "exceptionally",
    "easy",
    "set",
    "team",
    "one",
    "developer",
    "almost",
    "immediately",
    "set",
    "linter",
    "catch",
    "obvious",
    "bugs",
    "like",
    "infinite",
    "loops",
    "looking",
    "code",
    "linter",
    "would",
    "able",
    "tell",
    "whether",
    "common",
    "programmatic",
    "error",
    "like",
    "infinite",
    "loop",
    "automatic",
    "linting",
    "comes",
    "standard",
    "many",
    "code",
    "editors",
    "would",
    "wise",
    "teach",
    "developers",
    "configure",
    "code",
    "editors",
    "use",
    "existing",
    "linting",
    "rules",
    "team",
    "set",
    "ci",
    "automation",
    "developers",
    "wait",
    "push",
    "code",
    "get",
    "feedback",
    "get",
    "yellow",
    "squigglies",
    "directly",
    "editor",
    "teams",
    "working",
    "earlier",
    "products",
    "mentors",
    "help",
    "avoid",
    "writing",
    "unit",
    "tests",
    "instead",
    "relying",
    "test",
    "suite",
    "rely",
    "often",
    "static",
    "analysis",
    "find",
    "common",
    "bugs",
    "like",
    "code",
    "compiling",
    "infinite",
    "loops",
    "stylistic",
    "problems",
    "helps",
    "small",
    "teams",
    "refer",
    "product",
    "many",
    "users",
    "get",
    "feedback",
    "without",
    "needing",
    "lock",
    "things",
    "tests",
    "right",
    "linting",
    "code",
    "style",
    "see",
    "next",
    "video",
    "let",
    "finish",
    "discussion",
    "code",
    "review",
    "automation",
    "talking",
    "ephemeral",
    "environments",
    "really",
    "latest",
    "greatest",
    "comes",
    "code",
    "reviews",
    "helping",
    "developers",
    "get",
    "changes",
    "merged",
    "ephemeral",
    "environments",
    "temporary",
    "environments",
    "contain",
    "self",
    "contained",
    "version",
    "entire",
    "application",
    "generally",
    "every",
    "feature",
    "branch",
    "often",
    "spun",
    "slack",
    "bot",
    "automatically",
    "every",
    "commit",
    "using",
    "devops",
    "platforms",
    "like",
    "later",
    "ci",
    "heroku",
    "temporary",
    "environments",
    "overtaking",
    "traditional",
    "ci",
    "platforms",
    "valuable",
    "devops",
    "code",
    "review",
    "experience",
    "environments",
    "made",
    "every",
    "change",
    "stakeholders",
    "developers",
    "product",
    "people",
    "designers",
    "review",
    "change",
    "without",
    "needing",
    "set",
    "developer",
    "environment",
    "asking",
    "screen",
    "share",
    "developer",
    "proposed",
    "concrete",
    "example",
    "let",
    "say",
    "developer",
    "changing",
    "something",
    "website",
    "changing",
    "know",
    "front",
    "end",
    "back",
    "end",
    "know",
    "component",
    "website",
    "like",
    "get",
    "feedback",
    "proposed",
    "change",
    "code",
    "reviewer",
    "would",
    "look",
    "code",
    "might",
    "understand",
    "visual",
    "ramifications",
    "change",
    "within",
    "femoral",
    "environments",
    "within",
    "code",
    "review",
    "view",
    "reviewer",
    "would",
    "click",
    "button",
    "zoom",
    "within",
    "github",
    "reviewer",
    "would",
    "see",
    "see",
    "description",
    "code",
    "change",
    "also",
    "button",
    "view",
    "ephemeral",
    "environment",
    "click",
    "button",
    "wakes",
    "version",
    "website",
    "specifically",
    "proposed",
    "change",
    "reviewer",
    "actually",
    "take",
    "look",
    "things",
    "see",
    "whether",
    "changes",
    "visually",
    "workflow",
    "wise",
    "working",
    "well",
    "general",
    "ephemeral",
    "environments",
    "like",
    "halfway",
    "development",
    "environments",
    "staging",
    "environments",
    "extreme",
    "staging",
    "entirely",
    "replaced",
    "formal",
    "environments",
    "something",
    "called",
    "continuous",
    "staging",
    "benefits",
    "ephemeral",
    "environments",
    "well",
    "common",
    "reason",
    "adopt",
    "ephemeral",
    "environment",
    "workflow",
    "accelerates",
    "software",
    "development",
    "lifecycle",
    "developers",
    "review",
    "results",
    "changes",
    "visually",
    "instead",
    "needing",
    "exclusively",
    "give",
    "feedback",
    "code",
    "change",
    "additionally",
    "developers",
    "share",
    "work",
    "non",
    "technical",
    "collaborators",
    "designers",
    "easily",
    "assuring",
    "link",
    "proposed",
    "version",
    "could",
    "post",
    "slack",
    "message",
    "like",
    "saying",
    "could",
    "go",
    "link",
    "give",
    "feedback",
    "instead",
    "needing",
    "set",
    "zoom",
    "call",
    "share",
    "screen",
    "get",
    "person",
    "look",
    "proposed",
    "changes",
    "hardest",
    "part",
    "setting",
    "ephemeral",
    "environments",
    "dealing",
    "state",
    "dealing",
    "things",
    "like",
    "databases",
    "microservices",
    "nature",
    "know",
    "ephemeral",
    "environments",
    "temporary",
    "isolated",
    "production",
    "environments",
    "really",
    "lasts",
    "long",
    "pull",
    "request",
    "reviewer",
    "able",
    "delete",
    "resource",
    "review",
    "able",
    "see",
    "know",
    "deleting",
    "user",
    "still",
    "works",
    "without",
    "fear",
    "affecting",
    "production",
    "environments",
    "early",
    "implementation",
    "ephemeral",
    "environments",
    "might",
    "make",
    "sense",
    "connect",
    "api",
    "servers",
    "read",
    "permissions",
    "staging",
    "database",
    "using",
    "aws",
    "might",
    "iam",
    "role",
    "read",
    "access",
    "database",
    "case",
    "would",
    "able",
    "sign",
    "service",
    "example",
    "would",
    "require",
    "database",
    "rights",
    "end",
    "goal",
    "fresh",
    "copy",
    "database",
    "every",
    "commit",
    "every",
    "time",
    "developer",
    "proposes",
    "change",
    "get",
    "new",
    "database",
    "specifically",
    "environment",
    "whatever",
    "want",
    "ideal",
    "ephemeral",
    "database",
    "three",
    "attributes",
    "pre",
    "populated",
    "contains",
    "representative",
    "anonymized",
    "data",
    "past",
    "security",
    "audits",
    "pii",
    "personally",
    "identifiable",
    "information",
    "must",
    "scrubbed",
    "databases",
    "used",
    "ephemeral",
    "environments",
    "undoable",
    "course",
    "review",
    "data",
    "deleted",
    "easy",
    "reset",
    "database",
    "original",
    "state",
    "also",
    "crucial",
    "reading",
    "destructive",
    "end",
    "end",
    "tests",
    "get",
    "later",
    "migrated",
    "database",
    "use",
    "schema",
    "currently",
    "used",
    "production",
    "useful",
    "know",
    "something",
    "working",
    "old",
    "version",
    "schema",
    "one",
    "common",
    "classes",
    "problems",
    "uncovered",
    "formal",
    "environments",
    "broken",
    "nonperformance",
    "database",
    "migrations",
    "another",
    "hard",
    "problem",
    "solve",
    "ephemeral",
    "environments",
    "life",
    "cycle",
    "would",
    "create",
    "destroy",
    "classic",
    "approach",
    "title",
    "lifecycle",
    "pull",
    "request",
    "lifecycle",
    "ephemeral",
    "environments",
    "developer",
    "opens",
    "pull",
    "request",
    "create",
    "environment",
    "keep",
    "running",
    "seven",
    "developer",
    "deletes",
    "environment",
    "biggest",
    "factor",
    "consider",
    "cost",
    "fml",
    "environment",
    "costs",
    "10",
    "production",
    "10",
    "cheaper",
    "30",
    "open",
    "pull",
    "requests",
    "quadrupling",
    "monthly",
    "costs",
    "know",
    "expensive",
    "developer",
    "tool",
    "another",
    "approach",
    "create",
    "chat",
    "ops",
    "bot",
    "allows",
    "creating",
    "new",
    "environments",
    "specific",
    "branch",
    "specific",
    "timeout",
    "example",
    "user",
    "type",
    "slash",
    "pr",
    "bot",
    "creates",
    "github",
    "issue",
    "description",
    "could",
    "create",
    "environment",
    "slack",
    "user",
    "could",
    "thing",
    "requires",
    "environment",
    "provisioned",
    "time",
    "required",
    "slow",
    "hard",
    "tell",
    "delete",
    "best",
    "approach",
    "create",
    "ephemeral",
    "environment",
    "every",
    "change",
    "similar",
    "pr",
    "workflow",
    "hibernate",
    "provisioned",
    "providers",
    "one",
    "heroku",
    "heroku",
    "review",
    "app",
    "turn",
    "environments",
    "one",
    "layer",
    "ci",
    "shameless",
    "plug",
    "suppose",
    "users",
    "use",
    "environments",
    "layer",
    "ci",
    "hybrid",
    "ninja",
    "enough",
    "automate",
    "memory",
    "snapshotting",
    "somewhat",
    "involved",
    "might",
    "something",
    "better",
    "left",
    "using",
    "third",
    "party",
    "back",
    "idea",
    "continuous",
    "staging",
    "idea",
    "merge",
    "staging",
    "ephemeral",
    "environments",
    "ci",
    "pipeline",
    "altogether",
    "kind",
    "layer",
    "ci",
    "primarily",
    "sells",
    "users",
    "ephemeral",
    "environments",
    "become",
    "powerful",
    "easier",
    "create",
    "approach",
    "overtake",
    "many",
    "aspects",
    "traditional",
    "continuous",
    "integration",
    "pipelines",
    "set",
    "website",
    "back",
    "end",
    "database",
    "relatively",
    "easy",
    "run",
    "tests",
    "tests",
    "usually",
    "much",
    "easier",
    "wrap",
    "entire",
    "back",
    "end",
    "logical",
    "conclusion",
    "concept",
    "becomes",
    "continuous",
    "staging",
    "ci",
    "cd",
    "ephemeral",
    "environments",
    "form",
    "single",
    "ci",
    "cd",
    "flow",
    "single",
    "base",
    "sets",
    "requirements",
    "everything",
    "forks",
    "unit",
    "tests",
    "also",
    "server",
    "also",
    "review",
    "environment",
    "also",
    "linter",
    "everything",
    "comes",
    "common",
    "base",
    "going",
    "make",
    "probably",
    "budget",
    "month",
    "month",
    "time",
    "took",
    "set",
    "environment",
    "production",
    "environment",
    "many",
    "different",
    "microservices",
    "many",
    "different",
    "databases",
    "relatively",
    "difficult",
    "set",
    "ephemeral",
    "environment",
    "flow",
    "large",
    "companies",
    "like",
    "facebook",
    "set",
    "internal",
    "pull",
    "requests",
    "hired",
    "developer",
    "teams",
    "infrastructure",
    "software",
    "engineers",
    "smaller",
    "company",
    "might",
    "want",
    "stick",
    "hosted",
    "service",
    "like",
    "layer",
    "ci",
    "instead",
    "making",
    "maybe",
    "20",
    "developers",
    "avoid",
    "micromanage",
    "starting",
    "stopping",
    "environments",
    "easiest",
    "use",
    "hosted",
    "provider",
    "front",
    "end",
    "development",
    "popular",
    "choices",
    "cell",
    "netlify",
    "full",
    "stack",
    "deployments",
    "really",
    "choices",
    "available",
    "right",
    "layer",
    "ci",
    "heroku",
    "review",
    "apps",
    "options",
    "available",
    "many",
    "source",
    "code",
    "platforms",
    "like",
    "git",
    "lab",
    "environments",
    "feature",
    "really",
    "truly",
    "ephemeral",
    "environments",
    "feature",
    "explore",
    "options",
    "make",
    "informed",
    "decision",
    "ephemeral",
    "environments",
    "concludes",
    "discussion",
    "code",
    "review",
    "automation",
    "pull",
    "request",
    "automation",
    "core",
    "part",
    "devops",
    "engineering",
    "let",
    "another",
    "applied",
    "tutorial",
    "example",
    "setting",
    "femoral",
    "environments",
    "way",
    "talked",
    "using",
    "hosted",
    "platform",
    "sake",
    "simplicity",
    "already",
    "set",
    "ci",
    "repository",
    "already",
    "layer",
    "file",
    "ci",
    "configuration",
    "however",
    "many",
    "ci",
    "providers",
    "including",
    "layer",
    "ci",
    "roku",
    "others",
    "set",
    "ephemeral",
    "environments",
    "small",
    "production",
    "deployments",
    "use",
    "evaluate",
    "changes",
    "live",
    "reviewer",
    "let",
    "say",
    "changing",
    "color",
    "time",
    "back",
    "blue",
    "purple",
    "like",
    "someone",
    "able",
    "efficiently",
    "review",
    "change",
    "looking",
    "test",
    "results",
    "also",
    "looking",
    "federal",
    "environments",
    "read",
    "manual",
    "qa",
    "might",
    "see",
    "case",
    "actually",
    "easy",
    "set",
    "let",
    "go",
    "web",
    "micro",
    "service",
    "let",
    "create",
    "new",
    "file",
    "make",
    "another",
    "layer",
    "file",
    "run",
    "parallel",
    "say",
    "base",
    "layer",
    "file",
    "say",
    "expose",
    "website",
    "expose",
    "website",
    "running",
    "inside",
    "runner",
    "later",
    "ci",
    "expose",
    "website",
    "directive",
    "many",
    "providers",
    "similar",
    "functionality",
    "set",
    "let",
    "jump",
    "right",
    "creating",
    "pull",
    "request",
    "code",
    "reviewer",
    "would",
    "see",
    "test",
    "results",
    "see",
    "initial",
    "layer",
    "file",
    "let",
    "look",
    "actual",
    "graph",
    "understand",
    "better",
    "going",
    "tests",
    "running",
    "main",
    "layer",
    "file",
    "main",
    "layer",
    "file",
    "built",
    "services",
    "started",
    "services",
    "running",
    "cypress",
    "tests",
    "way",
    "ci",
    "chapter",
    "cypress",
    "tests",
    "run",
    "second",
    "environment",
    "inheriting",
    "first",
    "second",
    "environment",
    "clickable",
    "link",
    "used",
    "manual",
    "qa",
    "let",
    "see",
    "snapshot",
    "done",
    "taken",
    "tests",
    "means",
    "ephemeral",
    "environment",
    "start",
    "built",
    "see",
    "built",
    "staging",
    "server",
    "button",
    "connect",
    "actual",
    "pull",
    "request",
    "tests",
    "ci",
    "services",
    "passed",
    "click",
    "femoral",
    "environment",
    "button",
    "soon",
    "appears",
    "could",
    "click",
    "main",
    "layer",
    "file",
    "details",
    "click",
    "services",
    "web",
    "ephemeral",
    "environment",
    "click",
    "view",
    "website",
    "wakes",
    "pipeline",
    "initially",
    "set",
    "run",
    "tests",
    "forwards",
    "internet",
    "visible",
    "link",
    "web",
    "server",
    "inside",
    "created",
    "fresh",
    "environment",
    "specifically",
    "test",
    "see",
    "test",
    "run",
    "sent",
    "message",
    "evaluate",
    "change",
    "test",
    "creating",
    "channels",
    "works",
    "example",
    "test",
    "channel",
    "still",
    "possible",
    "set",
    "messages",
    "means",
    "need",
    "100",
    "test",
    "coverage",
    "able",
    "understand",
    "nuance",
    "channel",
    "every",
    "pull",
    "request",
    "able",
    "spin",
    "new",
    "environments",
    "automatically",
    "wake",
    "environment",
    "review",
    "needs",
    "completed",
    "satisfied",
    "environment",
    "works",
    "correctly",
    "merge",
    "pull",
    "request",
    "changes",
    "edit",
    "website",
    "manually",
    "curated",
    "reviewer",
    "check",
    "things",
    "work",
    "also",
    "qa",
    "team",
    "designer",
    "product",
    "manager",
    "might",
    "able",
    "check",
    "change",
    "actually",
    "changes",
    "supposed",
    "formal",
    "environments",
    "let",
    "get",
    "back",
    "theory",
    "welcome",
    "devops",
    "academy",
    "deployments",
    "one",
    "talking",
    "foundational",
    "concepts",
    "primarily",
    "talk",
    "deploying",
    "talking",
    "vms",
    "talking",
    "containers",
    "containers",
    "often",
    "also",
    "known",
    "docker",
    "let",
    "talk",
    "difference",
    "two",
    "talk",
    "deploying",
    "anything",
    "people",
    "talk",
    "devops",
    "deployments",
    "usually",
    "talking",
    "point",
    "linux",
    "large",
    "portion",
    "deployments",
    "linux",
    "servers",
    "containers",
    "really",
    "defined",
    "terms",
    "linux",
    "production",
    "right",
    "mind",
    "let",
    "talk",
    "linux",
    "abstract",
    "linux",
    "really",
    "helps",
    "take",
    "care",
    "four",
    "things",
    "writing",
    "programs",
    "takes",
    "care",
    "memory",
    "programs",
    "need",
    "memory",
    "things",
    "memory",
    "also",
    "known",
    "ram",
    "since",
    "finite",
    "amount",
    "linux",
    "needs",
    "figure",
    "programs",
    "get",
    "sections",
    "memory",
    "ram",
    "sticks",
    "programs",
    "running",
    "linux",
    "also",
    "takes",
    "care",
    "processors",
    "running",
    "two",
    "things",
    "parallel",
    "linux",
    "make",
    "sure",
    "right",
    "amount",
    "processors",
    "dedicated",
    "ever",
    "run",
    "computationally",
    "intensive",
    "tasks",
    "laptop",
    "might",
    "notice",
    "browser",
    "gets",
    "laggy",
    "getting",
    "enough",
    "processor",
    "time",
    "running",
    "production",
    "workloads",
    "linux",
    "needs",
    "make",
    "sure",
    "every",
    "program",
    "getting",
    "fair",
    "share",
    "processor",
    "time",
    "run",
    "actual",
    "program",
    "disk",
    "linux",
    "takes",
    "files",
    "programs",
    "allocate",
    "space",
    "disk",
    "might",
    "multiple",
    "disks",
    "might",
    "spinning",
    "disks",
    "solid",
    "state",
    "drives",
    "might",
    "even",
    "disks",
    "shared",
    "across",
    "networks",
    "linux",
    "takes",
    "care",
    "make",
    "sure",
    "right",
    "files",
    "right",
    "disks",
    "programs",
    "access",
    "files",
    "finally",
    "devices",
    "even",
    "beyond",
    "disk",
    "memory",
    "cpu",
    "things",
    "like",
    "gpu",
    "machine",
    "learning",
    "see",
    "gpu",
    "often",
    "things",
    "like",
    "network",
    "cards",
    "use",
    "connecting",
    "internet",
    "linux",
    "needs",
    "take",
    "individual",
    "resources",
    "allocate",
    "processes",
    "five",
    "processes",
    "trying",
    "connect",
    "internet",
    "time",
    "one",
    "network",
    "card",
    "linux",
    "needs",
    "make",
    "sure",
    "right",
    "messages",
    "sent",
    "right",
    "websites",
    "upstream",
    "responses",
    "sent",
    "right",
    "programs",
    "downstream",
    "diagram",
    "would",
    "look",
    "like",
    "three",
    "programs",
    "chrome",
    "notepad",
    "spotify",
    "running",
    "linux",
    "assuming",
    "linux",
    "server",
    "running",
    "three",
    "programs",
    "four",
    "shared",
    "resources",
    "chrome",
    "asks",
    "cpu",
    "linux",
    "allocate",
    "cpu",
    "time",
    "chrome",
    "also",
    "allocate",
    "something",
    "notepad",
    "spotify",
    "similarly",
    "shared",
    "resources",
    "great",
    "much",
    "sharing",
    "going",
    "mean",
    "programs",
    "know",
    "program",
    "accept",
    "expected",
    "file",
    "home",
    "calling",
    "file",
    "dot",
    "txt",
    "could",
    "create",
    "file",
    "another",
    "program",
    "could",
    "delete",
    "read",
    "file",
    "files",
    "read",
    "across",
    "programs",
    "means",
    "programs",
    "communicate",
    "always",
    "want",
    "example",
    "programmers",
    "often",
    "use",
    "different",
    "versions",
    "python",
    "python",
    "popular",
    "programming",
    "language",
    "two",
    "popular",
    "versions",
    "used",
    "one",
    "python",
    "two",
    "one",
    "python",
    "three",
    "called",
    "python",
    "file",
    "user",
    "bin",
    "python",
    "python",
    "two",
    "executable",
    "try",
    "run",
    "python",
    "three",
    "program",
    "program",
    "would",
    "error",
    "using",
    "wrong",
    "version",
    "python",
    "run",
    "however",
    "programs",
    "might",
    "need",
    "python",
    "two",
    "might",
    "python",
    "three",
    "cross",
    "talk",
    "programs",
    "reading",
    "user",
    "bin",
    "python",
    "expect",
    "different",
    "files",
    "mean",
    "programs",
    "overshare",
    "sometimes",
    "need",
    "different",
    "versions",
    "files",
    "place",
    "ca",
    "really",
    "run",
    "programs",
    "time",
    "similarly",
    "two",
    "web",
    "servers",
    "might",
    "listen",
    "port",
    "websites",
    "allow",
    "connect",
    "running",
    "two",
    "web",
    "servers",
    "expects",
    "port",
    "80",
    "open",
    "first",
    "one",
    "start",
    "correctly",
    "second",
    "one",
    "crash",
    "saying",
    "port",
    "80",
    "already",
    "used",
    "sorts",
    "problems",
    "sharing",
    "resources",
    "really",
    "virtual",
    "machines",
    "containers",
    "shine",
    "allow",
    "separate",
    "resources",
    "like",
    "files",
    "ports",
    "programs",
    "programs",
    "ca",
    "step",
    "feet",
    "running",
    "three",
    "programs",
    "container",
    "would",
    "look",
    "remarkably",
    "similar",
    "chrome",
    "would",
    "running",
    "would",
    "running",
    "within",
    "container",
    "container",
    "would",
    "talking",
    "linux",
    "would",
    "allocate",
    "container",
    "resources",
    "similarly",
    "programs",
    "might",
    "make",
    "sense",
    "yet",
    "let",
    "talk",
    "actually",
    "happens",
    "put",
    "something",
    "container",
    "like",
    "happens",
    "container",
    "program",
    "linux",
    "big",
    "change",
    "program",
    "get",
    "version",
    "shared",
    "resources",
    "like",
    "files",
    "network",
    "ports",
    "container",
    "running",
    "chrome",
    "might",
    "create",
    "file",
    "tilby",
    "slash",
    "chrome",
    "slash",
    "cash",
    "container",
    "running",
    "notepad",
    "could",
    "read",
    "file",
    "see",
    "exist",
    "get",
    "different",
    "copies",
    "systems",
    "files",
    "could",
    "talk",
    "amongst",
    "conflicting",
    "python",
    "versions",
    "similarly",
    "two",
    "web",
    "servers",
    "running",
    "expected",
    "able",
    "open",
    "port",
    "81",
    "would",
    "able",
    "open",
    "port",
    "80",
    "container",
    "would",
    "able",
    "open",
    "port",
    "80",
    "container",
    "two",
    "programs",
    "thinking",
    "program",
    "listening",
    "port",
    "really",
    "isolated",
    "within",
    "containers",
    "linux",
    "containers",
    "work",
    "creating",
    "namespaces",
    "linux",
    "feature",
    "groups",
    "shared",
    "resources",
    "together",
    "five",
    "processes",
    "running",
    "together",
    "within",
    "docker",
    "container",
    "still",
    "running",
    "within",
    "linux",
    "would",
    "see",
    "processes",
    "ones",
    "main",
    "linux",
    "machine",
    "within",
    "container",
    "ran",
    "ps",
    "au",
    "x",
    "counted",
    "many",
    "lines",
    "output",
    "vsd",
    "ux",
    "see",
    "running",
    "commands",
    "linux",
    "machine",
    "might",
    "see",
    "means",
    "10",
    "processes",
    "visible",
    "within",
    "container",
    "within",
    "linux",
    "within",
    "container",
    "said",
    "many",
    "processes",
    "running",
    "would",
    "say",
    "10",
    "processes",
    "within",
    "linux",
    "see",
    "hundreds",
    "processes",
    "running",
    "including",
    "10",
    "container",
    "containers",
    "kind",
    "sandboxed",
    "namespaced",
    "single",
    "group",
    "processes",
    "processes",
    "ca",
    "see",
    "files",
    "outside",
    "container",
    "processes",
    "network",
    "ports",
    "outside",
    "container",
    "see",
    "ports",
    "within",
    "container",
    "essentially",
    "happening",
    "programs",
    "asking",
    "contents",
    "user",
    "lib",
    "python",
    "example",
    "instead",
    "answering",
    "truthfully",
    "linux",
    "answering",
    "contents",
    "another",
    "file",
    "container",
    "says",
    "user",
    "lib",
    "python",
    "docker",
    "using",
    "docker",
    "containers",
    "would",
    "respond",
    "contents",
    "file",
    "var",
    "lib",
    "docker",
    "overlay",
    "fs",
    "one",
    "user",
    "lib",
    "python",
    "totally",
    "separate",
    "file",
    "global",
    "system",
    "container",
    "would",
    "view",
    "files",
    "little",
    "deception",
    "allows",
    "programs",
    "run",
    "parallel",
    "linux",
    "would",
    "would",
    "respond",
    "different",
    "files",
    "container",
    "one",
    "container",
    "could",
    "python",
    "pointing",
    "python",
    "two",
    "executable",
    "one",
    "container",
    "could",
    "python",
    "pointing",
    "python",
    "three",
    "executable",
    "containers",
    "work",
    "vms",
    "work",
    "different",
    "well",
    "vms",
    "similar",
    "emulators",
    "ever",
    "seen",
    "someone",
    "running",
    "older",
    "video",
    "game",
    "modern",
    "computer",
    "using",
    "vm",
    "idea",
    "containers",
    "provide",
    "fake",
    "linux",
    "within",
    "container",
    "really",
    "know",
    "running",
    "within",
    "container",
    "see",
    "files",
    "files",
    "simply",
    "pointing",
    "different",
    "place",
    "within",
    "real",
    "linux",
    "installation",
    "idea",
    "vms",
    "produce",
    "fake",
    "versions",
    "one",
    "level",
    "pretty",
    "produce",
    "fake",
    "versions",
    "cpu",
    "ram",
    "disk",
    "devices",
    "vm",
    "equivalent",
    "docker",
    "called",
    "hypervisor",
    "program",
    "charge",
    "creating",
    "vms",
    "vm",
    "running",
    "something",
    "corresponds",
    "instance",
    "hypervisor",
    "within",
    "linux",
    "hypervisor",
    "might",
    "lie",
    "vm",
    "say",
    "one",
    "ssd",
    "attached",
    "one",
    "drive",
    "attached",
    "50",
    "gigabytes",
    "capacity",
    "vm",
    "writes",
    "drive",
    "would",
    "instead",
    "go",
    "file",
    "would",
    "go",
    "real",
    "drive",
    "host",
    "might",
    "file",
    "vm",
    "writing",
    "file",
    "actually",
    "going",
    "file",
    "similar",
    "deception",
    "matching",
    "files",
    "directly",
    "container",
    "practical",
    "differences",
    "first",
    "vms",
    "powerful",
    "use",
    "run",
    "operating",
    "systems",
    "mac",
    "os",
    "windows",
    "different",
    "hardware",
    "configurations",
    "emulate",
    "gamecube",
    "apple",
    "two",
    "within",
    "linux",
    "hypervisor",
    "containers",
    "processes",
    "lied",
    "must",
    "still",
    "sort",
    "thing",
    "would",
    "run",
    "within",
    "linux",
    "vms",
    "nested",
    "operating",
    "system",
    "generally",
    "know",
    "talking",
    "real",
    "hardware",
    "os",
    "writes",
    "things",
    "drive",
    "example",
    "rights",
    "sent",
    "file",
    "linux",
    "instead",
    "physical",
    "drive",
    "process",
    "writes",
    "operating",
    "system",
    "within",
    "vm",
    "operating",
    "system",
    "sends",
    "right",
    "drive",
    "thinks",
    "drive",
    "drive",
    "goes",
    "linux",
    "linux",
    "actually",
    "maps",
    "file",
    "various",
    "benchmarks",
    "show",
    "cpus",
    "vms",
    "10",
    "20",
    "slower",
    "containers",
    "vms",
    "also",
    "usually",
    "use",
    "50",
    "100",
    "storage",
    "need",
    "things",
    "operating",
    "system",
    "would",
    "need",
    "duplicate",
    "containers",
    "need",
    "files",
    "need",
    "application",
    "files",
    "finally",
    "vms",
    "use",
    "200",
    "megabytes",
    "memory",
    "operating",
    "system",
    "containers",
    "need",
    "operating",
    "system",
    "processes",
    "lied",
    "vms",
    "use",
    "memory",
    "slower",
    "need",
    "storage",
    "given",
    "performance",
    "benefits",
    "looks",
    "like",
    "containers",
    "almost",
    "always",
    "better",
    "choice",
    "cases",
    "however",
    "cases",
    "vms",
    "better",
    "choice",
    "vms",
    "mean",
    "virtual",
    "machines",
    "run",
    "untrusted",
    "user",
    "supplied",
    "code",
    "difficult",
    "confident",
    "ca",
    "escape",
    "container",
    "gotten",
    "better",
    "recent",
    "years",
    "long",
    "contentious",
    "point",
    "virtual",
    "machines",
    "much",
    "older",
    "much",
    "mature",
    "running",
    "untrusted",
    "code",
    "usually",
    "good",
    "idea",
    "put",
    "within",
    "container",
    "running",
    "windows",
    "mac",
    "os",
    "script",
    "running",
    "script",
    "runs",
    "another",
    "operating",
    "system",
    "need",
    "use",
    "vm",
    "similar",
    "reasons",
    "running",
    "old",
    "video",
    "game",
    "run",
    "linux",
    "like",
    "run",
    "linux",
    "computer",
    "need",
    "vm",
    "vice",
    "versa",
    "using",
    "vms",
    "operating",
    "systems",
    "like",
    "run",
    "linux",
    "program",
    "windows",
    "usually",
    "use",
    "vm",
    "run",
    "finally",
    "emulate",
    "hardware",
    "devices",
    "like",
    "graphics",
    "cards",
    "vm",
    "testing",
    "graphics",
    "card",
    "works",
    "correctly",
    "could",
    "emulate",
    "response",
    "would",
    "give",
    "test",
    "operating",
    "system",
    "working",
    "expected",
    "big",
    "difference",
    "vms",
    "containers",
    "really",
    "two",
    "things",
    "often",
    "deploy",
    "let",
    "go",
    "actual",
    "deployment",
    "strategies",
    "next",
    "talk",
    "see",
    "let",
    "keep",
    "talking",
    "deployments",
    "rolling",
    "deployments",
    "one",
    "popular",
    "deployment",
    "strategies",
    "talk",
    "pros",
    "cons",
    "different",
    "deployment",
    "strategies",
    "throughout",
    "section",
    "rolling",
    "deployments",
    "work",
    "starting",
    "new",
    "version",
    "application",
    "sending",
    "traffic",
    "new",
    "version",
    "make",
    "sure",
    "everything",
    "okay",
    "showing",
    "old",
    "version",
    "repeating",
    "versions",
    "old",
    "version",
    "versions",
    "new",
    "version",
    "realize",
    "said",
    "version",
    "many",
    "times",
    "let",
    "look",
    "pictures",
    "help",
    "illustrate",
    "point",
    "myrn",
    "app",
    "myrn",
    "stands",
    "mongodb",
    "node",
    "js",
    "react",
    "express",
    "js",
    "user",
    "web",
    "browser",
    "connects",
    "front",
    "end",
    "back",
    "end",
    "front",
    "end",
    "stuff",
    "user",
    "sees",
    "back",
    "end",
    "services",
    "provide",
    "connections",
    "database",
    "log",
    "connecting",
    "back",
    "end",
    "viewing",
    "landing",
    "page",
    "connecting",
    "front",
    "end",
    "let",
    "say",
    "app",
    "enough",
    "traffic",
    "users",
    "notice",
    "goes",
    "little",
    "would",
    "push",
    "new",
    "version",
    "application",
    "without",
    "causing",
    "downtime",
    "rolling",
    "deployments",
    "come",
    "high",
    "level",
    "algorithm",
    "rolling",
    "deployment",
    "looks",
    "like",
    "create",
    "instance",
    "new",
    "version",
    "backend",
    "say",
    "wait",
    "keep",
    "trying",
    "connect",
    "get",
    "response",
    "satisfactory",
    "delete",
    "old",
    "version",
    "route",
    "traffic",
    "new",
    "version",
    "instances",
    "old",
    "version",
    "still",
    "exist",
    "go",
    "back",
    "step",
    "one",
    "repeat",
    "myrn",
    "example",
    "initially",
    "see",
    "three",
    "instances",
    "initial",
    "version",
    "one",
    "instance",
    "new",
    "version",
    "repeat",
    "process",
    "three",
    "instances",
    "new",
    "version",
    "one",
    "instance",
    "initial",
    "version",
    "versions",
    "back",
    "end",
    "add",
    "new",
    "version",
    "new",
    "back",
    "end",
    "turn",
    "version",
    "old",
    "back",
    "end",
    "keep",
    "repeating",
    "time",
    "goes",
    "red",
    "ones",
    "replaced",
    "pink",
    "ones",
    "loops",
    "ones",
    "remaining",
    "red",
    "ones",
    "added",
    "red",
    "one",
    "remove",
    "pink",
    "one",
    "added",
    "red",
    "one",
    "remove",
    "pink",
    "one",
    "red",
    "newest",
    "version",
    "application",
    "benefits",
    "rolling",
    "deployments",
    "ways",
    "deploying",
    "things",
    "well",
    "well",
    "supported",
    "rolling",
    "deployments",
    "relatively",
    "straightforward",
    "implement",
    "cases",
    "natively",
    "supported",
    "several",
    "orchestrators",
    "heard",
    "kubernetes",
    "example",
    "kubernetes",
    "helps",
    "aws",
    "amazon",
    "elastic",
    "beanstalk",
    "also",
    "supports",
    "rolling",
    "deployments",
    "huge",
    "bursts",
    "another",
    "deployment",
    "strategy",
    "talk",
    "three",
    "versions",
    "back",
    "end",
    "need",
    "start",
    "six",
    "total",
    "deploy",
    "new",
    "version",
    "turn",
    "old",
    "three",
    "doubles",
    "duration",
    "deployments",
    "amount",
    "things",
    "running",
    "might",
    "difficult",
    "finite",
    "number",
    "servers",
    "example",
    "also",
    "uncommon",
    "services",
    "like",
    "databases",
    "limit",
    "amount",
    "connections",
    "six",
    "versions",
    "backend",
    "connecting",
    "database",
    "might",
    "much",
    "load",
    "database",
    "could",
    "cause",
    "problems",
    "really",
    "deployments",
    "easily",
    "reverted",
    "course",
    "upgrade",
    "notice",
    "problems",
    "usually",
    "easy",
    "reverse",
    "rolling",
    "deployment",
    "going",
    "opposite",
    "direction",
    "removing",
    "red",
    "adding",
    "pink",
    "go",
    "opposite",
    "direction",
    "well",
    "rollback",
    "important",
    "characteristic",
    "deploying",
    "things",
    "always",
    "go",
    "wrong",
    "downsides",
    "rolling",
    "deployments",
    "slow",
    "run",
    "100",
    "replicas",
    "replacing",
    "one",
    "time",
    "takes",
    "20",
    "seconds",
    "would",
    "take",
    "2000",
    "seconds",
    "replace",
    "versions",
    "quite",
    "long",
    "time",
    "deployment",
    "mitigated",
    "increasing",
    "number",
    "services",
    "turned",
    "shut",
    "time",
    "sometimes",
    "called",
    "burst",
    "limit",
    "rolling",
    "deployment",
    "size",
    "problem",
    "api",
    "compatibility",
    "biggest",
    "problem",
    "rolling",
    "deployments",
    "add",
    "new",
    "version",
    "api",
    "endpoint",
    "back",
    "end",
    "consume",
    "front",
    "end",
    "since",
    "switching",
    "time",
    "might",
    "version",
    "one",
    "back",
    "end",
    "serving",
    "request",
    "version",
    "two",
    "front",
    "end",
    "api",
    "would",
    "exist",
    "errors",
    "visible",
    "user",
    "duration",
    "deployment",
    "mitigated",
    "complicated",
    "routing",
    "techniques",
    "generally",
    "better",
    "make",
    "api",
    "backwards",
    "compatible",
    "make",
    "version",
    "two",
    "front",
    "end",
    "compatible",
    "version",
    "one",
    "back",
    "end",
    "rolling",
    "deployments",
    "relatively",
    "simple",
    "understand",
    "generally",
    "well",
    "supported",
    "users",
    "mind",
    "downtime",
    "excellent",
    "first",
    "step",
    "deploy",
    "using",
    "rolling",
    "deployment",
    "strategy",
    "key",
    "programming",
    "consideration",
    "ensure",
    "services",
    "consume",
    "old",
    "version",
    "new",
    "version",
    "services",
    "api",
    "contract",
    "violated",
    "users",
    "might",
    "see",
    "errors",
    "duration",
    "deployments",
    "let",
    "talk",
    "deployment",
    "strategies",
    "go",
    "bluegreen",
    "deployments",
    "another",
    "deployment",
    "strategy",
    "people",
    "often",
    "see",
    "bluegreen",
    "deployments",
    "set",
    "bluegreen",
    "deployment",
    "teams",
    "need",
    "disambiguate",
    "services",
    "consistently",
    "deployed",
    "services",
    "shared",
    "across",
    "versions",
    "application",
    "explain",
    "little",
    "bit",
    "mean",
    "next",
    "section",
    "database",
    "server",
    "would",
    "shared",
    "resource",
    "multiple",
    "versions",
    "app",
    "would",
    "connect",
    "server",
    "time",
    "standard",
    "deployment",
    "would",
    "generally",
    "upgrade",
    "modify",
    "database",
    "mern",
    "example",
    "services",
    "cluster",
    "resources",
    "new",
    "versions",
    "would",
    "deployed",
    "every",
    "prod",
    "push",
    "bluegreen",
    "deployment",
    "strategy",
    "upgrading",
    "javascript",
    "myrn",
    "app",
    "would",
    "look",
    "like",
    "blue",
    "version",
    "green",
    "version",
    "application",
    "fully",
    "standalone",
    "stack",
    "connects",
    "shared",
    "database",
    "database",
    "part",
    "blue",
    "green",
    "shared",
    "resource",
    "used",
    "bluegreen",
    "deployments",
    "called",
    "maintain",
    "two",
    "separate",
    "clusters",
    "one",
    "named",
    "blue",
    "one",
    "named",
    "green",
    "convention",
    "current",
    "version",
    "application",
    "deployed",
    "blue",
    "deploy",
    "new",
    "version",
    "green",
    "use",
    "staging",
    "environment",
    "ensure",
    "new",
    "version",
    "app",
    "works",
    "correctly",
    "setting",
    "users",
    "confident",
    "new",
    "version",
    "software",
    "works",
    "correctly",
    "move",
    "production",
    "load",
    "blue",
    "green",
    "repeat",
    "cycle",
    "opposite",
    "direction",
    "started",
    "users",
    "sent",
    "blue",
    "contains",
    "version",
    "one",
    "application",
    "investigating",
    "version",
    "two",
    "works",
    "certain",
    "version",
    "two",
    "works",
    "route",
    "users",
    "version",
    "two",
    "version",
    "one",
    "unused",
    "shut",
    "replace",
    "version",
    "three",
    "make",
    "sure",
    "works",
    "switch",
    "user",
    "traffic",
    "benefits",
    "side",
    "bluegreen",
    "deployments",
    "conceptually",
    "easy",
    "understand",
    "set",
    "create",
    "two",
    "identical",
    "production",
    "environments",
    "send",
    "requests",
    "either",
    "one",
    "relatively",
    "simple",
    "services",
    "like",
    "amazon",
    "elastic",
    "load",
    "balancing",
    "also",
    "quite",
    "powerful",
    "longer",
    "running",
    "tasks",
    "like",
    "downloads",
    "continue",
    "running",
    "old",
    "version",
    "application",
    "traffic",
    "switched",
    "new",
    "version",
    "user",
    "established",
    "connection",
    "green",
    "switched",
    "everyone",
    "else",
    "blue",
    "connection",
    "continue",
    "finishing",
    "whatever",
    "watching",
    "video",
    "like",
    "download",
    "entirely",
    "user",
    "might",
    "take",
    "minutes",
    "continue",
    "going",
    "even",
    "prod",
    "push",
    "additionally",
    "bluegreen",
    "deployments",
    "extended",
    "many",
    "different",
    "workflows",
    "discuss",
    "notable",
    "drawbacks",
    "bluegreen",
    "deployments",
    "difficult",
    "deploy",
    "hotfix",
    "example",
    "revert",
    "change",
    "old",
    "cluster",
    "might",
    "running",
    "longer",
    "running",
    "tasks",
    "unavailable",
    "switch",
    "version",
    "one",
    "application",
    "switch",
    "version",
    "two",
    "realize",
    "version",
    "two",
    "problems",
    "might",
    "want",
    "push",
    "version",
    "three",
    "quickly",
    "addresses",
    "problems",
    "version",
    "one",
    "would",
    "place",
    "could",
    "deploy",
    "version",
    "three",
    "would",
    "able",
    "also",
    "finicky",
    "transfer",
    "load",
    "clusters",
    "resources",
    "autoscale",
    "talk",
    "later",
    "load",
    "transferred",
    "new",
    "cluster",
    "might",
    "enough",
    "resources",
    "allocated",
    "serve",
    "surge",
    "requests",
    "requests",
    "went",
    "peak",
    "production",
    "load",
    "finally",
    "one",
    "cluster",
    "modifies",
    "shared",
    "service",
    "like",
    "adding",
    "column",
    "table",
    "database",
    "may",
    "affect",
    "cluster",
    "despite",
    "live",
    "one",
    "common",
    "extensions",
    "bluegreen",
    "deployments",
    "mentioned",
    "extensible",
    "many",
    "teams",
    "set",
    "advanced",
    "workflows",
    "around",
    "bluegreen",
    "deployments",
    "improve",
    "stability",
    "deployment",
    "velocity",
    "first",
    "idea",
    "natural",
    "extension",
    "bluegreen",
    "deployments",
    "call",
    "rainbow",
    "deployments",
    "think",
    "standard",
    "term",
    "instead",
    "two",
    "clusters",
    "teams",
    "keep",
    "arbitrary",
    "number",
    "clusters",
    "blue",
    "green",
    "red",
    "yellow",
    "useful",
    "running",
    "long",
    "running",
    "tasks",
    "working",
    "distributed",
    "web",
    "scraper",
    "scraping",
    "tasks",
    "take",
    "days",
    "example",
    "might",
    "need",
    "clusters",
    "last",
    "last",
    "job",
    "finished",
    "ensure",
    "things",
    "continue",
    "working",
    "expected",
    "rainbow",
    "deployments",
    "keep",
    "clusters",
    "still",
    "processing",
    "tasks",
    "around",
    "something",
    "like",
    "video",
    "encoding",
    "long",
    "videos",
    "want",
    "shut",
    "cluster",
    "middle",
    "encoding",
    "long",
    "video",
    "work",
    "would",
    "redone",
    "regular",
    "deployment",
    "clusters",
    "shut",
    "long",
    "running",
    "jobs",
    "done",
    "processing",
    "teams",
    "rely",
    "heavily",
    "manual",
    "qa",
    "use",
    "continuous",
    "deployment",
    "often",
    "building",
    "desktop",
    "mobile",
    "apps",
    "needs",
    "published",
    "longer",
    "release",
    "cycles",
    "routed",
    "blue",
    "cluster",
    "would",
    "relatively",
    "simple",
    "deploy",
    "new",
    "version",
    "application",
    "green",
    "cluster",
    "endpoints",
    "setup",
    "new",
    "version",
    "app",
    "could",
    "tested",
    "production",
    "database",
    "environment",
    "soon",
    "become",
    "production",
    "tests",
    "often",
    "called",
    "acceptance",
    "tests",
    "happening",
    "production",
    "production",
    "data",
    "nothing",
    "like",
    "privileged",
    "access",
    "code",
    "base",
    "game",
    "might",
    "new",
    "release",
    "available",
    "api",
    "new",
    "release",
    "available",
    "qa",
    "testers",
    "test",
    "qa",
    "testers",
    "give",
    "go",
    "ahead",
    "point",
    "game",
    "client",
    "new",
    "version",
    "switch",
    "labels",
    "another",
    "useful",
    "add",
    "bluegreen",
    "deployments",
    "really",
    "deployments",
    "general",
    "called",
    "canary",
    "deployment",
    "new",
    "version",
    "app",
    "contains",
    "subjective",
    "changes",
    "editing",
    "ui",
    "might",
    "ill",
    "advised",
    "push",
    "users",
    "facebook",
    "billions",
    "users",
    "even",
    "1",
    "users",
    "complained",
    "change",
    "would",
    "overwhelming",
    "amounts",
    "feedback",
    "changes",
    "may",
    "break",
    "users",
    "workflows",
    "need",
    "modified",
    "rolled",
    "back",
    "response",
    "user",
    "feedback",
    "context",
    "bluegreen",
    "deployments",
    "canary",
    "deployment",
    "would",
    "extension",
    "routes",
    "maybe",
    "5",
    "user",
    "traffic",
    "new",
    "version",
    "application",
    "check",
    "users",
    "negative",
    "feedback",
    "switching",
    "rest",
    "users",
    "blue",
    "version",
    "one",
    "green",
    "version",
    "two",
    "95",
    "going",
    "version",
    "one",
    "5",
    "going",
    "version",
    "two",
    "wait",
    "see",
    "anyone",
    "version",
    "two",
    "complained",
    "route",
    "everyone",
    "version",
    "two",
    "shut",
    "version",
    "one",
    "put",
    "version",
    "three",
    "one",
    "bluegreen",
    "deployments",
    "powerful",
    "extensible",
    "deployment",
    "strategy",
    "works",
    "well",
    "teams",
    "deploying",
    "times",
    "per",
    "day",
    "strategy",
    "really",
    "starts",
    "problematic",
    "use",
    "deployment",
    "scenarios",
    "many",
    "services",
    "deployed",
    "many",
    "times",
    "per",
    "day",
    "alright",
    "let",
    "keep",
    "talking",
    "deployment",
    "see",
    "next",
    "talk",
    "continuous",
    "deployment",
    "sound",
    "daunting",
    "actually",
    "difficult",
    "might",
    "seem",
    "many",
    "cases",
    "let",
    "take",
    "look",
    "back",
    "current",
    "example",
    "deployed",
    "readme",
    "helpfully",
    "added",
    "little",
    "line",
    "currently",
    "deploying",
    "production",
    "look",
    "hosted",
    "version",
    "slug",
    "hosted",
    "domain",
    "see",
    "color",
    "still",
    "purple",
    "despite",
    "changed",
    "color",
    "blue",
    "previous",
    "video",
    "reason",
    "still",
    "purple",
    "production",
    "pushed",
    "pushed",
    "new",
    "version",
    "code",
    "contains",
    "blue",
    "color",
    "oftentimes",
    "requiring",
    "human",
    "intervention",
    "deploy",
    "simply",
    "unfeasible",
    "especially",
    "product",
    "skill",
    "deploy",
    "let",
    "run",
    "deployment",
    "process",
    "manually",
    "first",
    "let",
    "talk",
    "automate",
    "continuous",
    "deployment",
    "system",
    "use",
    "terminal",
    "simply",
    "run",
    "command",
    "directly",
    "read",
    "developer",
    "computer",
    "comes",
    "ssh",
    "key",
    "required",
    "deploy",
    "otherwise",
    "would",
    "difficult",
    "disseminate",
    "ssh",
    "key",
    "developers",
    "needed",
    "ability",
    "deploy",
    "new",
    "versions",
    "code",
    "see",
    "using",
    "docker",
    "compose",
    "rebuilt",
    "talk",
    "set",
    "docker",
    "file",
    "later",
    "refresh",
    "page",
    "see",
    "deployment",
    "created",
    "new",
    "version",
    "application",
    "blue",
    "picked",
    "color",
    "change",
    "merged",
    "previous",
    "commit",
    "continuous",
    "deployment",
    "like",
    "run",
    "merges",
    "main",
    "branch",
    "want",
    "deploy",
    "feature",
    "branches",
    "reviewed",
    "set",
    "simple",
    "configuration",
    "could",
    "write",
    "configuration",
    "file",
    "directory",
    "let",
    "write",
    "api",
    "directory",
    "create",
    "another",
    "layer",
    "file",
    "inherit",
    "testing",
    "layer",
    "file",
    "make",
    "sure",
    "deployment",
    "runs",
    "tests",
    "passed",
    "run",
    "deployment",
    "branch",
    "main",
    "branch",
    "however",
    "main",
    "branch",
    "like",
    "set",
    "secret",
    "use",
    "secret",
    "ssh",
    "key",
    "use",
    "ssh",
    "key",
    "run",
    "script",
    "let",
    "hopefully",
    "gives",
    "us",
    "directives",
    "need",
    "expose",
    "ssh",
    "key",
    "appose",
    "exposing",
    "ssh",
    "key",
    "used",
    "authenticate",
    "production",
    "machine",
    "within",
    "ci",
    "process",
    "one",
    "thing",
    "need",
    "change",
    "ownership",
    "restrictive",
    "required",
    "ssh",
    "might",
    "required",
    "deployment",
    "processes",
    "ssh",
    "key",
    "within",
    "ci",
    "server",
    "steps",
    "running",
    "tests",
    "passed",
    "copy",
    "command",
    "run",
    "part",
    "ci",
    "process",
    "configuration",
    "wait",
    "tests",
    "pass",
    "check",
    "branch",
    "main",
    "branch",
    "use",
    "ssh",
    "key",
    "deploy",
    "new",
    "version",
    "application",
    "let",
    "create",
    "new",
    "pull",
    "request",
    "changes",
    "see",
    "looks",
    "see",
    "ephemeral",
    "environment",
    "ci",
    "services",
    "built",
    "api",
    "service",
    "also",
    "built",
    "api",
    "directory",
    "contains",
    "continuous",
    "deployment",
    "process",
    "let",
    "take",
    "look",
    "pipeline",
    "actually",
    "looks",
    "like",
    "instructure",
    "see",
    "application",
    "built",
    "successfully",
    "started",
    "regular",
    "ci",
    "without",
    "cd",
    "process",
    "running",
    "continuous",
    "integration",
    "continuous",
    "deployment",
    "step",
    "layer",
    "file",
    "see",
    "tests",
    "running",
    "usual",
    "test",
    "running",
    "process",
    "requires",
    "starting",
    "fake",
    "browser",
    "takes",
    "around",
    "30",
    "seconds",
    "tests",
    "pass",
    "see",
    "deployment",
    "process",
    "runs",
    "tests",
    "lead",
    "second",
    "level",
    "graph",
    "usually",
    "called",
    "build",
    "stages",
    "ci",
    "cd",
    "system",
    "see",
    "step",
    "skipped",
    "branch",
    "main",
    "branch",
    "exactly",
    "wanted",
    "however",
    "merge",
    "pull",
    "request",
    "create",
    "new",
    "merge",
    "branch",
    "main",
    "branch",
    "run",
    "ci",
    "process",
    "main",
    "branch",
    "deployment",
    "process",
    "running",
    "let",
    "take",
    "look",
    "looks",
    "like",
    "simply",
    "loading",
    "environment",
    "run",
    "command",
    "right",
    "see",
    "deployment",
    "running",
    "within",
    "ci",
    "instead",
    "needing",
    "run",
    "individual",
    "developer",
    "simply",
    "run",
    "ssh",
    "command",
    "within",
    "ci",
    "idea",
    "deploying",
    "automatically",
    "ci",
    "process",
    "called",
    "continuous",
    "deployment",
    "let",
    "work",
    "whole",
    "process",
    "end",
    "end",
    "make",
    "sure",
    "clear",
    "deployment",
    "automation",
    "side",
    "things",
    "let",
    "change",
    "color",
    "main",
    "landing",
    "page",
    "make",
    "sure",
    "visible",
    "change",
    "gets",
    "pushed",
    "correctly",
    "change",
    "two",
    "colors",
    "create",
    "new",
    "pull",
    "request",
    "reviewer",
    "lot",
    "information",
    "whether",
    "change",
    "good",
    "reviewer",
    "able",
    "see",
    "files",
    "changed",
    "see",
    "done",
    "change",
    "colors",
    "able",
    "look",
    "ci",
    "process",
    "able",
    "see",
    "tests",
    "running",
    "particular",
    "application",
    "builds",
    "start",
    "successfully",
    "tests",
    "run",
    "able",
    "look",
    "ephemeral",
    "environment",
    "within",
    "minutes",
    "creating",
    "new",
    "change",
    "approve",
    "change",
    "shown",
    "users",
    "short",
    "period",
    "time",
    "whole",
    "process",
    "take",
    "minute",
    "longest",
    "part",
    "automated",
    "browser",
    "tests",
    "one",
    "one",
    "steps",
    "become",
    "green",
    "base",
    "ephemeral",
    "environment",
    "continuous",
    "deployment",
    "process",
    "egg",
    "gets",
    "status",
    "one",
    "administrators",
    "github",
    "might",
    "mark",
    "required",
    "checks",
    "pass",
    "commit",
    "merged",
    "shown",
    "users",
    "see",
    "everything",
    "passed",
    "let",
    "take",
    "look",
    "ephemeral",
    "environment",
    "double",
    "check",
    "color",
    "one",
    "want",
    "see",
    "thermal",
    "environment",
    "change",
    "color",
    "rose",
    "ish",
    "red",
    "perhaps",
    "color",
    "desired",
    "say",
    "correct",
    "test",
    "passed",
    "successfully",
    "posted",
    "message",
    "know",
    "functionality",
    "application",
    "continued",
    "work",
    "change",
    "merge",
    "end",
    "end",
    "test",
    "deploy",
    "process",
    "merge",
    "commit",
    "take",
    "look",
    "see",
    "merged",
    "main",
    "branch",
    "deployment",
    "already",
    "running",
    "production",
    "creating",
    "production",
    "build",
    "short",
    "period",
    "time",
    "production",
    "server",
    "latest",
    "version",
    "application",
    "running",
    "restarting",
    "production",
    "instance",
    "snapshot",
    "taken",
    "everything",
    "succeeded",
    "successfully",
    "pushed",
    "go",
    "website",
    "shade",
    "red",
    "changed",
    "end",
    "end",
    "ci",
    "cd",
    "ephemeral",
    "environment",
    "pipeline",
    "generally",
    "looks",
    "like",
    "high",
    "level",
    "alright",
    "let",
    "talk",
    "deployment",
    "automation",
    "next",
    "section",
    "talked",
    "deployment",
    "strategies",
    "thing",
    "deployments",
    "deployment",
    "strategies",
    "help",
    "reduce",
    "downtime",
    "deploy",
    "way",
    "affect",
    "users",
    "another",
    "key",
    "consideration",
    "deployment",
    "making",
    "sure",
    "enough",
    "resources",
    "containers",
    "vms",
    "large",
    "burst",
    "users",
    "application",
    "go",
    "let",
    "say",
    "building",
    "ci",
    "system",
    "hits",
    "close",
    "home",
    "coursework",
    "layer",
    "ci",
    "ci",
    "company",
    "users",
    "would",
    "push",
    "code",
    "spin",
    "runners",
    "run",
    "tests",
    "code",
    "see",
    "bursts",
    "traffic",
    "users",
    "business",
    "hours",
    "see",
    "significantly",
    "less",
    "traffic",
    "outside",
    "business",
    "hours",
    "peak",
    "load",
    "concurrency",
    "runs",
    "need",
    "least",
    "runners",
    "provisioned",
    "however",
    "night",
    "outside",
    "peak",
    "hours",
    "would",
    "really",
    "need",
    "runners",
    "would",
    "sit",
    "idle",
    "usage",
    "might",
    "look",
    "like",
    "also",
    "indicative",
    "lot",
    "applications",
    "lowest",
    "point",
    "maybe",
    "runners",
    "required",
    "highest",
    "point",
    "runners",
    "required",
    "need",
    "20",
    "times",
    "workers",
    "highest",
    "points",
    "day",
    "lowest",
    "points",
    "day",
    "ideal",
    "world",
    "able",
    "create",
    "destroy",
    "runners",
    "necessary",
    "peak",
    "hours",
    "able",
    "create",
    "new",
    "ones",
    "peak",
    "hours",
    "able",
    "destroy",
    "idea",
    "auto",
    "scaling",
    "possible",
    "create",
    "destroy",
    "workers",
    "cloud",
    "providers",
    "enormous",
    "scale",
    "possible",
    "offer",
    "servers",
    "cheap",
    "small",
    "one",
    "hour",
    "leases",
    "popular",
    "technology",
    "time",
    "post",
    "video",
    "aws",
    "easy",
    "spot",
    "instances",
    "act",
    "exactly",
    "like",
    "cloud",
    "hosted",
    "vms",
    "large",
    "discounts",
    "provision",
    "short",
    "periods",
    "time",
    "another",
    "popular",
    "technology",
    "auto",
    "scaling",
    "kubernetes",
    "horizontal",
    "pod",
    "auto",
    "scaling",
    "sounds",
    "daunting",
    "since",
    "many",
    "providers",
    "provide",
    "kubernetes",
    "box",
    "assume",
    "using",
    "kubernetes",
    "containers",
    "get",
    "auto",
    "scaling",
    "configure",
    "correctly",
    "illustrate",
    "using",
    "microsoft",
    "cloud",
    "provider",
    "resources",
    "auto",
    "scaling",
    "vms",
    "containers",
    "using",
    "aws",
    "resources",
    "vms",
    "containers",
    "using",
    "google",
    "cloud",
    "resources",
    "vms",
    "containers",
    "auto",
    "scaling",
    "usually",
    "discussed",
    "timeline",
    "one",
    "hour",
    "chunks",
    "work",
    "took",
    "concept",
    "auto",
    "scaling",
    "took",
    "limit",
    "get",
    "serverless",
    "defined",
    "resources",
    "quickly",
    "started",
    "use",
    "timeline",
    "milliseconds",
    "one",
    "100",
    "milliseconds",
    "example",
    "web",
    "server",
    "might",
    "need",
    "exist",
    "visitor",
    "requests",
    "page",
    "instead",
    "could",
    "spun",
    "specifically",
    "request",
    "serve",
    "page",
    "shut",
    "back",
    "exactly",
    "idea",
    "serverless",
    "almost",
    "like",
    "taking",
    "auto",
    "scaling",
    "provisioning",
    "resources",
    "required",
    "quickly",
    "small",
    "time",
    "intervals",
    "serverless",
    "primarily",
    "used",
    "services",
    "somewhat",
    "fast",
    "start",
    "stateless",
    "would",
    "run",
    "something",
    "like",
    "ci",
    "job",
    "ci",
    "run",
    "within",
    "serverless",
    "framework",
    "might",
    "run",
    "something",
    "like",
    "web",
    "server",
    "notification",
    "service",
    "auto",
    "scaling",
    "primarily",
    "used",
    "services",
    "slower",
    "start",
    "require",
    "state",
    "likely",
    "run",
    "ci",
    "job",
    "within",
    "auto",
    "scaled",
    "vm",
    "container",
    "within",
    "serverless",
    "container",
    "2021",
    "distinction",
    "models",
    "becoming",
    "quite",
    "blurred",
    "serverless",
    "containers",
    "becoming",
    "popular",
    "often",
    "run",
    "upwards",
    "hour",
    "serverless",
    "containers",
    "act",
    "exactly",
    "like",
    "containers",
    "created",
    "turned",
    "serverless",
    "manner",
    "response",
    "trigger",
    "within",
    "years",
    "likely",
    "serverless",
    "auto",
    "scaling",
    "converge",
    "single",
    "unified",
    "interface",
    "excited",
    "going",
    "future",
    "deployment",
    "ends",
    "discussion",
    "auto",
    "scaling",
    "serverless",
    "see",
    "next",
    "talk",
    "another",
    "key",
    "concept",
    "deployment",
    "automation",
    "service",
    "discovery",
    "database",
    "might",
    "one",
    "ip",
    "address",
    "10",
    "dot",
    "dot",
    "four",
    "three",
    "chosen",
    "arbitrarily",
    "web",
    "server",
    "would",
    "another",
    "ip",
    "address",
    "dot",
    "discover",
    "web",
    "server",
    "needs",
    "talk",
    "database",
    "database",
    "might",
    "calls",
    "web",
    "server",
    "get",
    "even",
    "complicated",
    "add",
    "copies",
    "web",
    "server",
    "add",
    "entirely",
    "new",
    "services",
    "let",
    "consider",
    "myrn",
    "app",
    "elsewhere",
    "academy",
    "devops",
    "series",
    "web",
    "browser",
    "user",
    "visiting",
    "website",
    "connecting",
    "front",
    "end",
    "connecting",
    "backend",
    "making",
    "api",
    "calls",
    "back",
    "end",
    "connecting",
    "database",
    "three",
    "services",
    "need",
    "discovered",
    "browser",
    "needs",
    "learn",
    "corresponds",
    "front",
    "end",
    "slash",
    "api",
    "corresponds",
    "back",
    "end",
    "back",
    "end",
    "needs",
    "land",
    "database",
    "dot",
    "example",
    "backend",
    "needs",
    "know",
    "ip",
    "address",
    "port",
    "database",
    "browser",
    "needs",
    "know",
    "ip",
    "address",
    "port",
    "backend",
    "front",
    "end",
    "simplest",
    "configuration",
    "everything",
    "manually",
    "configured",
    "back",
    "end",
    "front",
    "end",
    "add",
    "static",
    "ips",
    "given",
    "host",
    "names",
    "within",
    "dns",
    "domain",
    "name",
    "system",
    "mapping",
    "ip",
    "address",
    "internet",
    "back",
    "end",
    "configured",
    "connect",
    "mongodb",
    "specific",
    "port",
    "dns",
    "configuration",
    "cloudflare",
    "configuration",
    "page",
    "dns",
    "provider",
    "would",
    "look",
    "like",
    "user",
    "visits",
    "send",
    "ip",
    "address",
    "visit",
    "send",
    "ip",
    "address",
    "manually",
    "configured",
    "manually",
    "put",
    "ip",
    "addresses",
    "within",
    "backend",
    "read",
    "environment",
    "variable",
    "dictionary",
    "key",
    "value",
    "pairs",
    "easily",
    "set",
    "deploying",
    "things",
    "say",
    "connect",
    "environment",
    "variable",
    "specifying",
    "mongodb",
    "port",
    "connect",
    "port",
    "27017",
    "default",
    "mongodb",
    "port",
    "starting",
    "backend",
    "specify",
    "ip",
    "address",
    "mongodb",
    "running",
    "configuration",
    "completely",
    "fine",
    "simple",
    "products",
    "difficult",
    "mess",
    "relatively",
    "secure",
    "complicate",
    "things",
    "go",
    "pretty",
    "far",
    "simple",
    "configuration",
    "products",
    "could",
    "launch",
    "mvp",
    "without",
    "service",
    "discovery",
    "know",
    "need",
    "start",
    "caring",
    "complicating",
    "service",
    "discovery",
    "see",
    "one",
    "following",
    "need",
    "zero",
    "downtime",
    "deployments",
    "ca",
    "hard",
    "code",
    "things",
    "like",
    "want",
    "rolling",
    "deployments",
    "ca",
    "easily",
    "automate",
    "arrows",
    "point",
    "ca",
    "automatically",
    "change",
    "ip",
    "address",
    "simple",
    "deployment",
    "strategy",
    "example",
    "couple",
    "microservices",
    "gon",
    "na",
    "get",
    "hard",
    "remember",
    "deploying",
    "several",
    "environments",
    "like",
    "developer",
    "environment",
    "staging",
    "environment",
    "ephemeral",
    "environments",
    "production",
    "environments",
    "different",
    "ip",
    "addresses",
    "gon",
    "na",
    "get",
    "pretty",
    "unwieldy",
    "set",
    "ip",
    "addresses",
    "place",
    "let",
    "focus",
    "zero",
    "downtime",
    "deployments",
    "illustrative",
    "broader",
    "problem",
    "though",
    "let",
    "talk",
    "reverse",
    "proxies",
    "another",
    "crucial",
    "system",
    "design",
    "devops",
    "concept",
    "idea",
    "zero",
    "downtime",
    "deployment",
    "simple",
    "seen",
    "start",
    "new",
    "version",
    "back",
    "end",
    "front",
    "end",
    "wait",
    "till",
    "shut",
    "old",
    "version",
    "backend",
    "front",
    "end",
    "happens",
    "rolling",
    "bluegreen",
    "deployments",
    "however",
    "difficult",
    "update",
    "ip",
    "addresses",
    "dns",
    "rolling",
    "deployments",
    "required",
    "changing",
    "values",
    "directly",
    "dns",
    "would",
    "work",
    "well",
    "various",
    "reasons",
    "particular",
    "dns",
    "take",
    "long",
    "time",
    "propagate",
    "users",
    "countries",
    "united",
    "states",
    "example",
    "might",
    "take",
    "days",
    "see",
    "new",
    "ip",
    "address",
    "still",
    "trying",
    "connect",
    "old",
    "version",
    "solution",
    "add",
    "web",
    "server",
    "acts",
    "gateway",
    "front",
    "end",
    "back",
    "end",
    "able",
    "change",
    "points",
    "without",
    "changing",
    "dns",
    "configuration",
    "web",
    "servers",
    "like",
    "called",
    "reverse",
    "proxies",
    "really",
    "crucial",
    "setting",
    "zero",
    "downtime",
    "deployments",
    "service",
    "discovery",
    "taking",
    "myrn",
    "app",
    "adding",
    "level",
    "complexity",
    "user",
    "web",
    "browser",
    "would",
    "instead",
    "connect",
    "reverse",
    "proxy",
    "user",
    "would",
    "ask",
    "dns",
    "system",
    "dns",
    "system",
    "would",
    "respond",
    "oh",
    "ip",
    "address",
    "reverse",
    "proxy",
    "reverse",
    "proxy",
    "would",
    "take",
    "user",
    "request",
    "send",
    "appropriate",
    "view",
    "front",
    "end",
    "back",
    "end",
    "depending",
    "user",
    "asked",
    "connect",
    "everything",
    "else",
    "would",
    "running",
    "deployments",
    "like",
    "rolling",
    "deployments",
    "proxy",
    "could",
    "choose",
    "v1",
    "v2",
    "front",
    "end",
    "back",
    "end",
    "send",
    "users",
    "request",
    "would",
    "changing",
    "configuration",
    "file",
    "deployment",
    "done",
    "could",
    "turn",
    "version",
    "one",
    "reverse",
    "proxy",
    "could",
    "route",
    "traffic",
    "entirely",
    "diversion",
    "straightforward",
    "approach",
    "store",
    "service",
    "ips",
    "hash",
    "table",
    "implicitly",
    "process",
    "running",
    "moment",
    "assumed",
    "reverse",
    "proxy",
    "would",
    "able",
    "know",
    "ips",
    "new",
    "versions",
    "apps",
    "exactly",
    "statements",
    "service",
    "discovery",
    "needing",
    "manually",
    "tell",
    "reverse",
    "proxy",
    "front",
    "end",
    "back",
    "end",
    "live",
    "ip",
    "address",
    "version",
    "two",
    "back",
    "end",
    "would",
    "convenient",
    "could",
    "automate",
    "new",
    "versions",
    "come",
    "online",
    "update",
    "value",
    "key",
    "back",
    "end",
    "front",
    "end",
    "ips",
    "hash",
    "table",
    "reverse",
    "proxy",
    "could",
    "watch",
    "changes",
    "table",
    "use",
    "routing",
    "decisions",
    "concrete",
    "example",
    "close",
    "going",
    "get",
    "code",
    "set",
    "videos",
    "let",
    "look",
    "nginx",
    "configuration",
    "nginx",
    "popular",
    "reverse",
    "proxy",
    "commonly",
    "used",
    "large",
    "tech",
    "companies",
    "lets",
    "define",
    "various",
    "host",
    "names",
    "go",
    "pointed",
    "nginx",
    "reverse",
    "proxy",
    "picture",
    "would",
    "nginx",
    "user",
    "thinks",
    "connecting",
    "website",
    "sending",
    "request",
    "nginx",
    "asking",
    "example",
    "comm",
    "nginx",
    "would",
    "take",
    "example",
    "forward",
    "actual",
    "front",
    "end",
    "nginx",
    "learn",
    "ip",
    "front",
    "end",
    "configuration",
    "would",
    "telling",
    "nginx",
    "directly",
    "take",
    "key",
    "file",
    "use",
    "conf",
    "reads",
    "hash",
    "table",
    "updates",
    "configuration",
    "file",
    "send",
    "user",
    "need",
    "key",
    "value",
    "store",
    "key",
    "fob",
    "front",
    "end",
    "ip",
    "current",
    "front",
    "end",
    "version",
    "run",
    "rolling",
    "deployments",
    "start",
    "new",
    "front",
    "end",
    "version",
    "check",
    "alive",
    "change",
    "key",
    "hash",
    "table",
    "point",
    "new",
    "one",
    "constantly",
    "would",
    "pick",
    "change",
    "replace",
    "value",
    "new",
    "ip",
    "version",
    "two",
    "front",
    "end",
    "reload",
    "nginx",
    "would",
    "change",
    "arrow",
    "new",
    "version",
    "front",
    "end",
    "like",
    "lot",
    "deal",
    "let",
    "back",
    "bit",
    "need",
    "update",
    "front",
    "end",
    "set",
    "key",
    "hash",
    "table",
    "ips",
    "front",
    "end",
    "front",
    "ends",
    "ip",
    "make",
    "back",
    "end",
    "back",
    "end",
    "location",
    "way",
    "new",
    "version",
    "application",
    "starts",
    "would",
    "update",
    "key",
    "table",
    "nginx",
    "would",
    "start",
    "routing",
    "users",
    "new",
    "version",
    "application",
    "proxy",
    "passing",
    "means",
    "nginx",
    "see",
    "proxy",
    "pass",
    "directive",
    "complicated",
    "illustrative",
    "point",
    "implement",
    "would",
    "common",
    "thing",
    "used",
    "industry",
    "service",
    "discovery",
    "using",
    "dns",
    "dns",
    "thought",
    "slow",
    "protocol",
    "might",
    "take",
    "days",
    "propagate",
    "changes",
    "across",
    "network",
    "run",
    "dns",
    "locally",
    "industry",
    "standard",
    "let",
    "talk",
    "dns",
    "little",
    "bit",
    "idea",
    "dns",
    "map",
    "host",
    "names",
    "ips",
    "visit",
    "layer",
    "example",
    "global",
    "dns",
    "system",
    "first",
    "map",
    "name",
    "addresses",
    "time",
    "video",
    "104",
    "dot",
    "217",
    "172",
    "dot",
    "six",
    "arbitrary",
    "computers",
    "connected",
    "internet",
    "use",
    "digg",
    "command",
    "website",
    "see",
    "addresses",
    "saying",
    "key",
    "layer",
    "values",
    "two",
    "usually",
    "people",
    "mentioned",
    "dns",
    "mean",
    "global",
    "service",
    "visiting",
    "websites",
    "internet",
    "however",
    "mentioned",
    "possible",
    "run",
    "dns",
    "internally",
    "would",
    "ideal",
    "nginx",
    "configuration",
    "could",
    "specify",
    "http",
    "full",
    "colon",
    "slash",
    "slash",
    "front",
    "end",
    "front",
    "end",
    "resolve",
    "ip",
    "front",
    "end",
    "service",
    "way",
    "would",
    "change",
    "anything",
    "except",
    "dns",
    "configuration",
    "exactly",
    "dns",
    "based",
    "service",
    "discovery",
    "works",
    "configure",
    "services",
    "query",
    "server",
    "control",
    "dns",
    "queries",
    "instead",
    "saying",
    "mongodb",
    "full",
    "colon",
    "slash",
    "slash",
    "process",
    "mongodb",
    "say",
    "mongodb",
    "full",
    "colon",
    "slash",
    "slash",
    "mongo",
    "mongo",
    "key",
    "key",
    "value",
    "pairs",
    "dns",
    "control",
    "course",
    "trivial",
    "deploy",
    "dns",
    "server",
    "practice",
    "though",
    "popular",
    "options",
    "like",
    "core",
    "dns",
    "likely",
    "thing",
    "use",
    "cloud",
    "provider",
    "kubernetes",
    "internal",
    "solutions",
    "end",
    "result",
    "get",
    "something",
    "like",
    "user",
    "web",
    "browser",
    "would",
    "connect",
    "nginx",
    "thinking",
    "website",
    "nginx",
    "would",
    "ask",
    "dns",
    "provider",
    "api",
    "right",
    "cloud",
    "provider",
    "would",
    "respond",
    "ip",
    "address",
    "given",
    "deployments",
    "blue",
    "green",
    "rolling",
    "deployments",
    "currently",
    "want",
    "users",
    "visit",
    "want",
    "visit",
    "api",
    "would",
    "correspond",
    "version",
    "one",
    "version",
    "two",
    "backend",
    "proxy",
    "would",
    "forward",
    "request",
    "request",
    "fulfilled",
    "go",
    "back",
    "proxy",
    "back",
    "user",
    "conclusion",
    "service",
    "discovery",
    "tricky",
    "vitally",
    "important",
    "foundational",
    "building",
    "block",
    "deployment",
    "strategies",
    "deployment",
    "automation",
    "general",
    "configure",
    "service",
    "discovery",
    "appropriate",
    "manner",
    "deployments",
    "dns",
    "based",
    "kubernetes",
    "cluster",
    "example",
    "makes",
    "significantly",
    "easier",
    "developers",
    "microservices",
    "talk",
    "instead",
    "developer",
    "write",
    "connect",
    "mongodb",
    "app",
    "deal",
    "mongodb",
    "actually",
    "simply",
    "say",
    "connect",
    "mongodb",
    "mongodb",
    "colon",
    "slash",
    "slash",
    "mongo",
    "devops",
    "platform",
    "engineer",
    "configure",
    "mongo",
    "always",
    "points",
    "right",
    "place",
    "right",
    "ip",
    "address",
    "decoupling",
    "application",
    "logic",
    "deployment",
    "logic",
    "help",
    "developers",
    "team",
    "build",
    "faster",
    "able",
    "deploy",
    "easily",
    "deployments",
    "let",
    "go",
    "next",
    "final",
    "pillar",
    "application",
    "performance",
    "management",
    "many",
    "general",
    "topics",
    "application",
    "performance",
    "management",
    "section",
    "little",
    "bit",
    "shorter",
    "go",
    "detail",
    "future",
    "sections",
    "devops",
    "academy",
    "introductory",
    "video",
    "series",
    "let",
    "talk",
    "two",
    "core",
    "concepts",
    "first",
    "log",
    "aggregation",
    "way",
    "collecting",
    "tagging",
    "application",
    "logs",
    "many",
    "different",
    "services",
    "single",
    "dashboard",
    "easily",
    "searched",
    "one",
    "first",
    "systems",
    "built",
    "application",
    "performance",
    "management",
    "system",
    "log",
    "aggregation",
    "reminder",
    "application",
    "performance",
    "management",
    "part",
    "devops",
    "lifecycle",
    "things",
    "built",
    "deployed",
    "need",
    "make",
    "sure",
    "continuously",
    "working",
    "enough",
    "resources",
    "allocated",
    "errors",
    "shown",
    "users",
    "production",
    "deployments",
    "many",
    "related",
    "events",
    "emit",
    "logs",
    "across",
    "services",
    "google",
    "single",
    "search",
    "might",
    "hit",
    "five",
    "different",
    "services",
    "returned",
    "user",
    "got",
    "unexpected",
    "search",
    "results",
    "might",
    "mean",
    "logic",
    "problem",
    "five",
    "services",
    "log",
    "aggregation",
    "helps",
    "companies",
    "like",
    "google",
    "diagnose",
    "problems",
    "production",
    "built",
    "single",
    "dashboard",
    "map",
    "every",
    "request",
    "unique",
    "id",
    "search",
    "something",
    "search",
    "get",
    "unique",
    "id",
    "every",
    "time",
    "search",
    "passing",
    "different",
    "service",
    "service",
    "connect",
    "id",
    "currently",
    "essence",
    "good",
    "log",
    "aggregation",
    "platform",
    "efficiently",
    "collect",
    "logs",
    "everywhere",
    "emits",
    "make",
    "easily",
    "searchable",
    "case",
    "fault",
    "main",
    "app",
    "users",
    "web",
    "browser",
    "connects",
    "back",
    "end",
    "front",
    "end",
    "back",
    "end",
    "connects",
    "database",
    "user",
    "told",
    "us",
    "page",
    "turned",
    "white",
    "printed",
    "error",
    "message",
    "would",
    "hard",
    "pressed",
    "diagnose",
    "problem",
    "current",
    "stack",
    "user",
    "would",
    "need",
    "manually",
    "send",
    "us",
    "error",
    "need",
    "match",
    "relevant",
    "logs",
    "three",
    "services",
    "let",
    "take",
    "look",
    "elk",
    "popular",
    "open",
    "source",
    "log",
    "aggregation",
    "stack",
    "named",
    "three",
    "components",
    "elasticsearch",
    "logstash",
    "cabana",
    "installed",
    "burn",
    "app",
    "get",
    "three",
    "new",
    "services",
    "users",
    "web",
    "browser",
    "would",
    "connect",
    "front",
    "end",
    "back",
    "end",
    "back",
    "end",
    "would",
    "connect",
    "mongo",
    "services",
    "browser",
    "front",
    "end",
    "back",
    "end",
    "mongo",
    "would",
    "send",
    "logs",
    "logstash",
    "way",
    "three",
    "components",
    "work",
    "components",
    "alk",
    "elasticsearch",
    "log",
    "stash",
    "cabana",
    "others",
    "services",
    "send",
    "logs",
    "logstash",
    "logstash",
    "takes",
    "logs",
    "text",
    "emitted",
    "application",
    "example",
    "web",
    "browser",
    "visit",
    "web",
    "page",
    "web",
    "page",
    "might",
    "log",
    "visitor",
    "access",
    "page",
    "time",
    "example",
    "log",
    "message",
    "logs",
    "would",
    "sent",
    "logstash",
    "would",
    "extract",
    "things",
    "log",
    "message",
    "user",
    "thing",
    "time",
    "would",
    "extract",
    "time",
    "extract",
    "message",
    "extract",
    "user",
    "include",
    "tags",
    "message",
    "would",
    "object",
    "tags",
    "message",
    "could",
    "search",
    "easily",
    "could",
    "say",
    "find",
    "requests",
    "made",
    "specific",
    "user",
    "logstash",
    "store",
    "things",
    "stores",
    "things",
    "elasticsearch",
    "efficient",
    "database",
    "querying",
    "text",
    "elastic",
    "search",
    "exposes",
    "results",
    "kibana",
    "cabana",
    "web",
    "server",
    "connects",
    "elasticsearch",
    "allows",
    "administrators",
    "devops",
    "person",
    "people",
    "team",
    "call",
    "engineer",
    "view",
    "logs",
    "production",
    "whenever",
    "major",
    "fault",
    "administrator",
    "would",
    "connect",
    "cabana",
    "cabana",
    "would",
    "query",
    "elastic",
    "search",
    "logs",
    "matching",
    "whatever",
    "wanted",
    "could",
    "say",
    "hey",
    "cabana",
    "search",
    "bar",
    "want",
    "find",
    "errors",
    "cabana",
    "would",
    "say",
    "elastic",
    "search",
    "finds",
    "messages",
    "contain",
    "string",
    "error",
    "elasticsearch",
    "would",
    "return",
    "results",
    "populated",
    "logstash",
    "logstash",
    "would",
    "samples",
    "results",
    "services",
    "visited",
    "web",
    "page",
    "might",
    "sort",
    "log",
    "emitted",
    "might",
    "processed",
    "object",
    "like",
    "format",
    "date",
    "simple",
    "time",
    "format",
    "messages",
    "emitted",
    "different",
    "services",
    "service",
    "service",
    "submitted",
    "log",
    "message",
    "actual",
    "content",
    "log",
    "processor",
    "logstash",
    "would",
    "often",
    "connected",
    "internet",
    "javascript",
    "browser",
    "catch",
    "errors",
    "send",
    "logstash",
    "although",
    "additional",
    "services",
    "like",
    "century",
    "might",
    "better",
    "suited",
    "would",
    "use",
    "elk",
    "diagnose",
    "production",
    "problem",
    "well",
    "let",
    "say",
    "user",
    "says",
    "saw",
    "error",
    "code",
    "tried",
    "elk",
    "setup",
    "go",
    "cabana",
    "enter",
    "1234567",
    "search",
    "bar",
    "press",
    "enter",
    "would",
    "show",
    "us",
    "logs",
    "corresponded",
    "one",
    "logs",
    "might",
    "say",
    "internal",
    "server",
    "error",
    "returning",
    "see",
    "service",
    "emitted",
    "log",
    "back",
    "end",
    "see",
    "time",
    "blog",
    "emitted",
    "could",
    "go",
    "time",
    "log",
    "could",
    "look",
    "messages",
    "backend",
    "could",
    "see",
    "better",
    "picture",
    "happened",
    "user",
    "request",
    "able",
    "repeat",
    "process",
    "going",
    "services",
    "found",
    "actually",
    "caused",
    "problem",
    "user",
    "final",
    "piece",
    "puzzle",
    "ensuring",
    "logs",
    "visible",
    "administrators",
    "logs",
    "contain",
    "sensitive",
    "information",
    "like",
    "tokens",
    "important",
    "authenticated",
    "users",
    "access",
    "would",
    "want",
    "expose",
    "kibana",
    "internet",
    "without",
    "way",
    "authenticating",
    "favorite",
    "way",
    "add",
    "reverse",
    "proxy",
    "like",
    "nginx",
    "friend",
    "nginx",
    "auth",
    "request",
    "mechanism",
    "check",
    "user",
    "logged",
    "back",
    "end",
    "could",
    "add",
    "something",
    "like",
    "simply",
    "returns",
    "successful",
    "status",
    "user",
    "visits",
    "slash",
    "auth",
    "request",
    "admin",
    "would",
    "return",
    "successful",
    "status",
    "admin",
    "would",
    "return",
    "unauthorized",
    "status",
    "could",
    "configure",
    "nginx",
    "mentioned",
    "previous",
    "videos",
    "location",
    "blocks",
    "slash",
    "private",
    "location",
    "would",
    "connect",
    "slash",
    "could",
    "make",
    "sure",
    "slash",
    "logs",
    "example",
    "user",
    "logged",
    "auth",
    "request",
    "directive",
    "user",
    "visits",
    "slash",
    "logs",
    "administrator",
    "would",
    "able",
    "access",
    "alternatively",
    "elasticsearch",
    "run",
    "company",
    "called",
    "elastic",
    "paid",
    "version",
    "contains",
    "something",
    "called",
    "x",
    "pack",
    "facilitates",
    "well",
    "go",
    "either",
    "reverse",
    "proxy",
    "authenticates",
    "users",
    "paid",
    "version",
    "application",
    "aside",
    "use",
    "log",
    "aggregation",
    "extra",
    "test",
    "ci",
    "pipelines",
    "want",
    "tell",
    "code",
    "good",
    "repurpose",
    "log",
    "aggregation",
    "stack",
    "ensure",
    "warnings",
    "errors",
    "occur",
    "tests",
    "run",
    "end",
    "end",
    "test",
    "looks",
    "like",
    "starting",
    "stack",
    "starting",
    "logging",
    "stack",
    "running",
    "tests",
    "npm",
    "run",
    "test",
    "could",
    "add",
    "extra",
    "step",
    "queries",
    "elastic",
    "search",
    "logs",
    "matching",
    "error",
    "could",
    "make",
    "sure",
    "logs",
    "printed",
    "error",
    "even",
    "tests",
    "pass",
    "error",
    "going",
    "error",
    "might",
    "important",
    "despite",
    "tests",
    "passing",
    "adds",
    "free",
    "extra",
    "check",
    "ci",
    "stack",
    "examples",
    "log",
    "aggregation",
    "platforms",
    "elasticsearch",
    "logstash",
    "kibana",
    "talked",
    "fluent",
    "another",
    "popular",
    "open",
    "source",
    "choice",
    "data",
    "dog",
    "commonly",
    "used",
    "larger",
    "enterprises",
    "hosted",
    "offering",
    "log",
    "dna",
    "another",
    "hosted",
    "offering",
    "cloud",
    "providers",
    "also",
    "provide",
    "logging",
    "facilities",
    "like",
    "aws",
    "cloudwatch",
    "logs",
    "log",
    "aggregation",
    "key",
    "tool",
    "diagnosing",
    "problems",
    "production",
    "relatively",
    "simple",
    "install",
    "turnkey",
    "solution",
    "like",
    "elk",
    "cloud",
    "watch",
    "makes",
    "diagnosing",
    "triage",
    "problems",
    "production",
    "significantly",
    "easier",
    "log",
    "aggregation",
    "see",
    "next",
    "talk",
    "plus",
    "topic",
    "going",
    "talk",
    "metric",
    "aggregation",
    "metrics",
    "simply",
    "data",
    "points",
    "tell",
    "healthy",
    "production",
    "see",
    "screen",
    "things",
    "like",
    "cpu",
    "usage",
    "memory",
    "usage",
    "disk",
    "io",
    "file",
    "system",
    "fullness",
    "important",
    "production",
    "metrics",
    "might",
    "care",
    "log",
    "aggregation",
    "first",
    "tool",
    "set",
    "production",
    "monitoring",
    "metrics",
    "monitoring",
    "would",
    "second",
    "indispensable",
    "finding",
    "production",
    "faults",
    "debugging",
    "performance",
    "stability",
    "problems",
    "log",
    "aggregation",
    "primarily",
    "deals",
    "text",
    "logs",
    "textual",
    "course",
    "contrast",
    "metric",
    "aggregation",
    "deals",
    "numbers",
    "long",
    "something",
    "take",
    "memory",
    "used",
    "frighteningly",
    "difficult",
    "understand",
    "going",
    "production",
    "system",
    "netflix",
    "example",
    "measures",
    "billion",
    "different",
    "time",
    "series",
    "monitor",
    "health",
    "production",
    "deployments",
    "successful",
    "metric",
    "monitoring",
    "able",
    "automatically",
    "notify",
    "necessary",
    "teams",
    "something",
    "goes",
    "wrong",
    "production",
    "let",
    "keep",
    "looking",
    "open",
    "source",
    "implementations",
    "devops",
    "tools",
    "keep",
    "things",
    "general",
    "prometheus",
    "tool",
    "originally",
    "deployed",
    "soundcloud",
    "one",
    "popular",
    "metrics",
    "servers",
    "looks",
    "like",
    "similarly",
    "structured",
    "inputs",
    "sent",
    "retrieval",
    "things",
    "like",
    "nodes",
    "would",
    "send",
    "much",
    "disk",
    "usage",
    "media",
    "server",
    "also",
    "long",
    "services",
    "taking",
    "alc",
    "would",
    "parse",
    "numbers",
    "logs",
    "send",
    "permit",
    "promethease",
    "figures",
    "get",
    "services",
    "using",
    "service",
    "discovery",
    "previous",
    "video",
    "takes",
    "stores",
    "time",
    "series",
    "database",
    "equivalent",
    "numbers",
    "elasticsearch",
    "text",
    "stored",
    "prometheus",
    "server",
    "node",
    "finally",
    "front",
    "end",
    "services",
    "query",
    "promethease",
    "things",
    "one",
    "thing",
    "might",
    "want",
    "something",
    "terribly",
    "wrong",
    "like",
    "website",
    "might",
    "want",
    "connect",
    "pager",
    "duty",
    "email",
    "someone",
    "send",
    "someone",
    "text",
    "message",
    "twilio",
    "beyond",
    "call",
    "engineer",
    "tell",
    "something",
    "wrong",
    "might",
    "also",
    "want",
    "query",
    "metrics",
    "get",
    "view",
    "like",
    "one",
    "prom",
    "ql",
    "used",
    "grafana",
    "view",
    "dark",
    "view",
    "graphs",
    "common",
    "way",
    "viewing",
    "time",
    "series",
    "make",
    "make",
    "api",
    "many",
    "front",
    "ends",
    "connected",
    "previous",
    "diagram",
    "daunting",
    "quite",
    "similar",
    "architecture",
    "discussed",
    "log",
    "aggregation",
    "frameworks",
    "four",
    "key",
    "components",
    "like",
    "mentioned",
    "time",
    "series",
    "database",
    "actually",
    "stores",
    "measurements",
    "retrieval",
    "alert",
    "manager",
    "web",
    "ui",
    "sorts",
    "metrics",
    "collect",
    "well",
    "lot",
    "subjectivity",
    "metrics",
    "important",
    "based",
    "product",
    "users",
    "ideas",
    "store",
    "something",
    "like",
    "promethease",
    "request",
    "fulfillment",
    "times",
    "useful",
    "understanding",
    "systems",
    "getting",
    "overloaded",
    "newly",
    "pushed",
    "change",
    "negatively",
    "impact",
    "performance",
    "format",
    "times",
    "often",
    "parsed",
    "logs",
    "using",
    "regular",
    "expression",
    "example",
    "taken",
    "field",
    "database",
    "website",
    "rest",
    "api",
    "common",
    "request",
    "fulfillment",
    "time",
    "would",
    "time",
    "response",
    "web",
    "sites",
    "rest",
    "api",
    "common",
    "request",
    "fulfillment",
    "time",
    "would",
    "time",
    "response",
    "way",
    "slow",
    "web",
    "pages",
    "could",
    "discovered",
    "identified",
    "production",
    "related",
    "metric",
    "indicative",
    "problems",
    "request",
    "counts",
    "huge",
    "spike",
    "requests",
    "per",
    "second",
    "likely",
    "least",
    "production",
    "systems",
    "trouble",
    "scaling",
    "watching",
    "request",
    "counts",
    "also",
    "used",
    "detect",
    "mitigate",
    "attacks",
    "like",
    "denial",
    "service",
    "attacks",
    "attackers",
    "sent",
    "many",
    "malicious",
    "requests",
    "services",
    "production",
    "last",
    "common",
    "metric",
    "across",
    "many",
    "types",
    "companies",
    "server",
    "resources",
    "examples",
    "database",
    "size",
    "maximum",
    "database",
    "size",
    "two",
    "terabytes",
    "disk",
    "database",
    "terabytes",
    "might",
    "want",
    "alert",
    "someone",
    "increase",
    "amount",
    "disk",
    "available",
    "database",
    "delete",
    "things",
    "unused",
    "web",
    "server",
    "memory",
    "web",
    "server",
    "taking",
    "lot",
    "requests",
    "per",
    "second",
    "lot",
    "processing",
    "might",
    "require",
    "memory",
    "runs",
    "memory",
    "would",
    "crash",
    "users",
    "would",
    "able",
    "access",
    "website",
    "anymore",
    "network",
    "throughput",
    "downloading",
    "many",
    "things",
    "uploading",
    "many",
    "things",
    "saturate",
    "network",
    "would",
    "also",
    "cause",
    "degraded",
    "performance",
    "final",
    "one",
    "tls",
    "certificate",
    "expiry",
    "time",
    "lock",
    "browser",
    "uses",
    "tls",
    "certificates",
    "see",
    "whether",
    "browser",
    "secure",
    "used",
    "place",
    "internally",
    "cause",
    "problems",
    "measured",
    "alerted",
    "example",
    "google",
    "voice",
    "outage",
    "2021",
    "google",
    "companies",
    "measuring",
    "tls",
    "certificates",
    "would",
    "expire",
    "caused",
    "outage",
    "months",
    "ago",
    "production",
    "faults",
    "rarely",
    "look",
    "like",
    "users",
    "access",
    "anything",
    "often",
    "gradual",
    "ramp",
    "certain",
    "api",
    "taking",
    "longer",
    "longer",
    "eventually",
    "everything",
    "breaks",
    "portal",
    "analysis",
    "easy",
    "way",
    "pare",
    "production",
    "statistics",
    "something",
    "actionable",
    "website",
    "might",
    "measure",
    "long",
    "takes",
    "websites",
    "fully",
    "load",
    "landing",
    "page",
    "notice",
    "obvious",
    "production",
    "issue",
    "cuartel",
    "analysis",
    "split",
    "request",
    "times",
    "many",
    "different",
    "buckets",
    "long",
    "slowest",
    "1",
    "users",
    "take",
    "long",
    "slowest",
    "5",
    "users",
    "take",
    "long",
    "slowest",
    "25",
    "users",
    "take",
    "landing",
    "page",
    "slower",
    "users",
    "logged",
    "logged",
    "visiting",
    "without",
    "logged",
    "user",
    "might",
    "notice",
    "web",
    "page",
    "slow",
    "users",
    "logged",
    "would",
    "show",
    "1",
    "requests",
    "bucket",
    "see",
    "users",
    "bad",
    "degraded",
    "experience",
    "example",
    "notified",
    "outage",
    "landing",
    "page",
    "taking",
    "long",
    "time",
    "respond",
    "requests",
    "due",
    "specific",
    "post",
    "published",
    "stack",
    "overflow",
    "metrics",
    "analysis",
    "many",
    "common",
    "production",
    "tools",
    "prometheus",
    "grafana",
    "mentioned",
    "data",
    "dog",
    "log",
    "aggregation",
    "metrics",
    "aggregation",
    "well",
    "new",
    "relic",
    "would",
    "say",
    "maybe",
    "old",
    "reliable",
    "option",
    "cloud",
    "providers",
    "versions",
    "aws",
    "cloudwatch",
    "metrics",
    "google",
    "cloud",
    "monitoring",
    "monitor",
    "metrics",
    "application",
    "performance",
    "management",
    "thanks",
    "watching"
  ],
  "keywords": [
    "devops",
    "course",
    "first",
    "step",
    "engineering",
    "developers",
    "go",
    "also",
    "talking",
    "primarily",
    "side",
    "things",
    "helps",
    "teams",
    "build",
    "products",
    "better",
    "user",
    "feedback",
    "google",
    "look",
    "often",
    "see",
    "ones",
    "like",
    "really",
    "understand",
    "different",
    "way",
    "software",
    "back",
    "day",
    "much",
    "would",
    "programming",
    "product",
    "could",
    "put",
    "cd",
    "users",
    "since",
    "internet",
    "become",
    "easy",
    "get",
    "current",
    "instead",
    "making",
    "new",
    "version",
    "websites",
    "facebook",
    "know",
    "old",
    "require",
    "idea",
    "take",
    "set",
    "features",
    "want",
    "work",
    "team",
    "make",
    "might",
    "code",
    "built",
    "website",
    "source",
    "javascript",
    "browser",
    "run",
    "video",
    "versions",
    "linux",
    "test",
    "testing",
    "manual",
    "usually",
    "known",
    "continuous",
    "integration",
    "qa",
    "tested",
    "deployment",
    "strategies",
    "deploying",
    "automatically",
    "change",
    "good",
    "lot",
    "automation",
    "done",
    "popular",
    "tools",
    "talk",
    "later",
    "core",
    "send",
    "notice",
    "problems",
    "show",
    "company",
    "even",
    "release",
    "deployed",
    "means",
    "mean",
    "onto",
    "app",
    "store",
    "review",
    "operating",
    "scaling",
    "sure",
    "enough",
    "resources",
    "load",
    "servers",
    "required",
    "monitoring",
    "use",
    "especially",
    "start",
    "create",
    "finally",
    "takes",
    "deployments",
    "bugs",
    "end",
    "cycle",
    "people",
    "say",
    "taking",
    "building",
    "one",
    "two",
    "actually",
    "another",
    "common",
    "part",
    "something",
    "maybe",
    "care",
    "asking",
    "engineer",
    "someone",
    "deploy",
    "three",
    "pull",
    "request",
    "application",
    "performance",
    "management",
    "whether",
    "proposed",
    "every",
    "time",
    "developer",
    "made",
    "around",
    "downtime",
    "goes",
    "rolling",
    "problem",
    "future",
    "mentioned",
    "share",
    "changes",
    "called",
    "requests",
    "full",
    "tell",
    "business",
    "quickly",
    "example",
    "working",
    "easily",
    "contains",
    "git",
    "programmer",
    "style",
    "ca",
    "automated",
    "process",
    "stack",
    "help",
    "ephemeral",
    "environments",
    "linting",
    "manager",
    "button",
    "give",
    "merge",
    "original",
    "automate",
    "running",
    "per",
    "reviewers",
    "getting",
    "right",
    "able",
    "merged",
    "without",
    "needing",
    "need",
    "web",
    "page",
    "used",
    "certain",
    "workflows",
    "tests",
    "second",
    "post",
    "important",
    "development",
    "changed",
    "however",
    "talked",
    "feature",
    "starting",
    "shut",
    "visit",
    "case",
    "wrong",
    "many",
    "companies",
    "platforms",
    "little",
    "thing",
    "best",
    "errors",
    "well",
    "production",
    "metrics",
    "long",
    "key",
    "landing",
    "logging",
    "program",
    "logs",
    "generally",
    "information",
    "state",
    "useful",
    "ip",
    "address",
    "access",
    "database",
    "slow",
    "components",
    "slower",
    "memory",
    "based",
    "scale",
    "number",
    "add",
    "file",
    "call",
    "everything",
    "going",
    "large",
    "wo",
    "five",
    "staging",
    "setting",
    "10",
    "coverage",
    "hours",
    "log",
    "aggregation",
    "error",
    "bit",
    "ci",
    "tool",
    "using",
    "elasticsearch",
    "logstash",
    "looking",
    "check",
    "respond",
    "shown",
    "ensure",
    "keep",
    "let",
    "driven",
    "continue",
    "simple",
    "sense",
    "unit",
    "individual",
    "system",
    "works",
    "sent",
    "within",
    "whole",
    "correctly",
    "comes",
    "similar",
    "find",
    "write",
    "read",
    "small",
    "function",
    "pass",
    "easier",
    "cases",
    "next",
    "us",
    "repository",
    "times",
    "runs",
    "single",
    "year",
    "bad",
    "existing",
    "less",
    "likely",
    "branch",
    "files",
    "specific",
    "copy",
    "push",
    "github",
    "configured",
    "results",
    "commit",
    "visible",
    "providers",
    "layer",
    "provider",
    "writing",
    "branches",
    "point",
    "section",
    "looks",
    "actual",
    "chat",
    "open",
    "changing",
    "color",
    "main",
    "blue",
    "difficult",
    "dot",
    "hard",
    "script",
    "entirely",
    "services",
    "service",
    "message",
    "install",
    "server",
    "directly",
    "configuration",
    "docker",
    "containers",
    "pipeline",
    "started",
    "already",
    "click",
    "name",
    "passed",
    "metric",
    "reviewer",
    "view",
    "messages",
    "still",
    "must",
    "series",
    "place",
    "base",
    "green",
    "100",
    "red",
    "relatively",
    "lines",
    "previous",
    "simply",
    "colon",
    "logic",
    "line",
    "execute",
    "manually",
    "loop",
    "always",
    "x",
    "general",
    "analysis",
    "stability",
    "policy",
    "api",
    "programs",
    "variable",
    "environment",
    "value",
    "guide",
    "available",
    "linter",
    "python",
    "configure",
    "format",
    "auto",
    "command",
    "standard",
    "pushed",
    "wait",
    "approach",
    "response",
    "static",
    "front",
    "connect",
    "aws",
    "data",
    "creating",
    "slash",
    "hosted",
    "needs",
    "vms",
    "tasks",
    "disk",
    "shared",
    "across",
    "network",
    "connecting",
    "processes",
    "chrome",
    "port",
    "container",
    "systems",
    "vm",
    "drive",
    "traffic",
    "myrn",
    "mongodb",
    "backend",
    "kubernetes",
    "elastic",
    "strategy",
    "reverse",
    "bluegreen",
    "cluster",
    "clusters",
    "addresses",
    "table",
    "ssh",
    "exactly",
    "runners",
    "cloud",
    "serverless",
    "discovery",
    "ips",
    "dns",
    "proxy",
    "nginx",
    "mongo",
    "search",
    "cabana",
    "logged"
  ]
}