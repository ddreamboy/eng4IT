{
  "text": "how do you decide what your next step on\na project is let's hope you're not\nrelying on a role of the dice especially\nwhen the decision concerns something as\ncostly as software development in that\ncase we suggest a tried and true method\nlike the software development life cycle\nor\nsdlc it's a standardized process that\ndescribes different stages of building\nhighquality software sdlc was conceived\nin the 1970s as a way of formulating the\ndevelopment of large-scale Business\nSystems but it prevails today as a\nreminder of What stages a product goes\nthrough on the way to eventual we hope\nsuccess there are many methodologies\naddressing this sequence of stages that\nyou might have heard of so today we will\ntalk about the phases of sdlc and the\nmethodologies applying\n[Music]\nthem the father of the software\ndevelopment life cycle was a computer\nscientist and a director at Lockheed\nsoftware Technology Center in Austin\nwhen instant\nwroy in his influential article managing\nthe development of large software\nsystems he described implementation\nsteps that are similar to what we use\ntoday there are generally six stages of\nsoftware development covered in\nsdlc planning and\nAnalysis it's sometimes also called\nrequirement analysis or has analysis as\na separate stage before or after\nplanning all in all at this prolonged\nstage the product team collects business\nand use requirements about what the\nfinal product must do and how it should\nwork cost and time estimation scoping\nand other planning activities all go\nhere this is such an extensive phase\nthat we have several videos covering\nsoftware planning so make sure to check\nthem out after this one second is\ndesigning after the planning stage you\nprepare the product's architecture and\ndesign here a software architect\nanalyzes the requirements and sets the\nhighlevel structure of the future\nsystems describing what components on go\nwhere and how they interact with one\nanother they will also select a\ntechnology for development user\nexperience and visual design can also be\ndrafted at this stage clearly without\nthis stage the following one can't\nhappen the next phase development is a\nstage where programmers use the\narchitect's design to write code that\nwill finally turn the vision into a real\nthing this is where some aspects of the\nfinal product will be first revealed to\nstakeholders then testing more quality\nassurance takes place testers and QA\nprofessionals review the products code\nand useability for bugs and errors so\nthey can be fixed before the next\nstage deployment is when the product is\nreleased to the\nusers sometimes this stage is combined\nwith the following one maintenance where\nfeedback is constantly gathered and the\nproduct receives continuous updates and\nsupport this includes both fixes and new\nfeatures sometimes there's a prototyping\nstage between planning and designing a\nprototype is a simplified version of the\nproduct used to validate the idea before\nany major work begins it doesn't even\nhave to be coded the design can be used\nto receive feedback from stakeholders\nand users a prototype is the best way to\nverify requirements with minimal effort\nand costs so the number of phases and\ntheir titles can differ depending on the\nspecifics of the projects or a\nparticular methodology but a common\nunderstanding Remains the Same you start\nwith a plan then then you design and\ndevelop after that you test and then\nrelease a product but by itself sdlc is\njust a concept and it's used as a base\nfor several models you apply that will\ngive your project Clarity and help\ndeliver the best results so what are\nthey waterfall was the first software\ndevelopment approach described in Rey's\narticle back in the 1970s and it adheres\nstrictly to the sdlc stages the main\nidea is that each stage starts only\nafter the previous one is finished the\ntimeline due dates and deliverables are\nclearly set the waterfall model was\nborrowed from the construction and\nManufacturing Industries where it makes\ntotal sense you need to wait for the\nblueprints before laying any bricks this\nmodel is very straightforward and well\ndefined and the team can focus on just\none phase at each point in time so the\nproject is easier to manage but today\nit's fallen out of favor in the\nengineering World why\nthe main reason is that it's the\nopposite of flexible whenever you need\nto make a change in requirements or\ndesign you need to roll back to stage\none and do the whole cycle all over\nagain what if at the Finish Line you've\nidentified some unforeseen risks that\nshould have been mitigated during\nplanning when testing happens so late in\nthe process and stages don't overlap it\ninevitably leads to blown deadlines and\nbudgets so in modern software\ndevelopment a different approach is used\ntoday agile philosophy is the king the\nagile Manifesto which was written by 17\nsoftware developers in 2001 was a direct\nresponse to the heavyweight waterfall\nmethodology among its 12 principles\nthere are calls to welcome change even\nin late development stages and to\ndeliver software continuously and early\nagile solved the waterfall drawbacks in\na few ways firstly the testing phase\nisn't separate from the building phase\nbut rather it's done at every iteration\nfor example in scrum one of the\nFrameworks based on agile the\ndevelopment is broken down into smaller\nCycles\nSprints Sprints are considered to be\npart of the scrum development framework\nand they are short periods of time\ntypically lasting from 1 to 4 weeks at\neach Sprint cycle the team Works through\nall stages at the end of the Sprint the\nfinished piece of product is shown to\nstakeholders the short feedback loop\nallows devs to adapt quickly and find\nnew approaches faster without\ncompromising the delivery date another\nkey change that agile brought to the\ndevelopment life cycle is the approach\nto planning or more specifically to\ndocumentation one of the main values\nlisted in the agile Manifesto says\nworking software over comprehensive\ndocumentation but the assumption that\nagile teams use little to no docs is\nwrong in waterfall the idea was to\ncreate detailed documentation covering\nproject goals and the working process as\nwell as precise budget and time\nestimates for agile where change is\nwelcome this would be just a waste of\ntime so the idea is to produce only\nessential docks that is just barely good\nenough yes this is a real term in agile\nplus it must be a collaborative effort\nwhere a tech writer asks the team for\nfeedback and encourages others to share\ntheir ideas if you want to learn more\nabout documentation types and how\nthey're created we have a few videos\nyou'll find useful while originally\nagile was more of a philosophy today it\nhas loads of specific tools and\ntechniques such Frameworks as scrum lean\nextreme programming or conon are also\nclassified as agile approaches even\nthough they existed before the agile\nManifesto was formulated they now fall\nunder the agile umbrella each framework\nhas its best applications and specific\ntool set apart from the aforementioned\nscrum there's a lean methodology that\nfocuses on eliminating waste and at its\ncore is a feedback loop for testing your\nassumptions it consists of three\nrecurrent steps build which basically\nmeans drafting some version of the\nproduct such as an\nMVP measure meaning collecting feedback\nand evaluating if this version of the\nproduct succeeds and learn drawing\nconclusions and deciding how you refine\nyour product for the next Loop another\nframework called Extreme programming or\nXP uses the usual life cycle but\nemphasizes the technical aspect of\ndevelopment\nit uses such practices as test driven\ndevelopment code refactoring pair\nprogramming and more also kbon is more\nof a management method than a framework\nsince it uses so-called conon boards to\nvisualize work for efficiency there are\nmany more Frameworks in the Agile\ndevelopment process that can be used\ndepending on what the team wants or the\nproject\nrequires around 2008 A New Concept\nemerged from agile that drastically\nchanged how software is built and\nreleased today\ndevops is one of the most discussed\ndevelopment approaches employed by such\nGiants as Amazon Netflix Google and\nFacebook it stands for development and\noperations devops introduces a cultural\nshift where different teams work\ntogether developers qas and operations\nare no longer writing the code testing\nit and deploying and supporting the code\napart from one another now they merge\ninto a single team often having\nmulti-disciplinary skills devops life\ncycle is typically visualized as an\ninfinity loop representing the\ndevelopment processes on the left side\nand operations on the right side a team\ncollaborates and communicates throughout\neach phase we have a whole separate\nvideo covering devops and a video series\nabout all devops aspects you need to\nknow so check it out after this one\nwhat's important is that devops uses\ntypical agile planning the product\ndevelopment has rough objectives\noutlined and only the few future Sprints\nare detailed so while agile is focused\non identifying features that users will\nlike devops make sure that existing\nprocesses are optimized and streamlined\nto do that devops uses CI\nCD continuous integration and continuous\ndelivery or cicd is a set of principles\nthat allow developers to deliver\nfrequent code changes it means that\nteams integrate code on a daily or even\nan hourly basis by merging code changes\nin a central repository and preparing\nfor deployment at any moment basically\nall changes new features and Bug fixes\nare always ready to be deployed and the\nproduct can be updated multiple times\nper day continuously delivering value to\nusers HubSpot shared that they add 200\nto 300 deployments a day using cicd\nNetflix orchestrates over 20,000\ndeployments daily in 2022 11% of organiz\nIz ation were considered high devops\nperformers and deployed 417 more times\nthan low performers this is of course\nachieved by high levels of Automation\nand the infrastructure that connects all\naspects of product delivery and a\nunified\necosystem although cicd facilitates\nagile practices such as getting feedback\nquickly and detecting errors in the\nearly stages it doesn't require short\niterations and introduces automation to\nthe development life cycle even in agile\nintroducing product changes can be a\nlong process especially today when\ntechnological innovations happen so fast\nand consumer needs change easily so cicd\nsolves this problem by adapting in a\nshort amount of time without disrupting\nthe whole development flow and consumers\nget to see the new features added in\nreal time and provide their feedback\ninstantly for 60 years the phases of the\nsoftware development life cycle remained\nrelatively unchanged regardless of\nwhether you're building a house a rocket\nship or an app you will need to plan\ndesign build test deploy and maintain\nthe product what matters is the\nrelations between these phases now when\ntesters and devs collaborate or are even\ncapable of doing the same job you don't\nneed to separate those tasks much\nautomation tools made it possible to do\nmany things at the same time and shrink\nthe cycle to days and hours agile and\nmany models and approaches that spurted\nfrom it have remained relevant for\ndecades perhaps they will last another\ndecade or maybe a new hip technology\nwill show us a more efficient way to\nfollow the product development path\nregardless we will keep you\nupdated let us know if you enjoyed the\nvideo like And subscribe if you want\nmore videos like this we'll see you soon\nin the next\n[Music]\nvideo yeah\n",
  "words": [
    "decide",
    "next",
    "step",
    "project",
    "let",
    "hope",
    "relying",
    "role",
    "dice",
    "especially",
    "decision",
    "concerns",
    "something",
    "costly",
    "software",
    "development",
    "case",
    "suggest",
    "tried",
    "true",
    "method",
    "like",
    "software",
    "development",
    "life",
    "cycle",
    "sdlc",
    "standardized",
    "process",
    "describes",
    "different",
    "stages",
    "building",
    "highquality",
    "software",
    "sdlc",
    "conceived",
    "1970s",
    "way",
    "formulating",
    "development",
    "business",
    "systems",
    "prevails",
    "today",
    "reminder",
    "stages",
    "product",
    "goes",
    "way",
    "eventual",
    "hope",
    "success",
    "many",
    "methodologies",
    "addressing",
    "sequence",
    "stages",
    "might",
    "heard",
    "today",
    "talk",
    "phases",
    "sdlc",
    "methodologies",
    "applying",
    "music",
    "father",
    "software",
    "development",
    "life",
    "cycle",
    "computer",
    "scientist",
    "director",
    "lockheed",
    "software",
    "technology",
    "center",
    "austin",
    "instant",
    "wroy",
    "influential",
    "article",
    "managing",
    "development",
    "large",
    "software",
    "systems",
    "described",
    "implementation",
    "steps",
    "similar",
    "use",
    "today",
    "generally",
    "six",
    "stages",
    "software",
    "development",
    "covered",
    "sdlc",
    "planning",
    "analysis",
    "sometimes",
    "also",
    "called",
    "requirement",
    "analysis",
    "analysis",
    "separate",
    "stage",
    "planning",
    "prolonged",
    "stage",
    "product",
    "team",
    "collects",
    "business",
    "use",
    "requirements",
    "final",
    "product",
    "must",
    "work",
    "cost",
    "time",
    "estimation",
    "scoping",
    "planning",
    "activities",
    "go",
    "extensive",
    "phase",
    "several",
    "videos",
    "covering",
    "software",
    "planning",
    "make",
    "sure",
    "check",
    "one",
    "second",
    "designing",
    "planning",
    "stage",
    "prepare",
    "product",
    "architecture",
    "design",
    "software",
    "architect",
    "analyzes",
    "requirements",
    "sets",
    "highlevel",
    "structure",
    "future",
    "systems",
    "describing",
    "components",
    "go",
    "interact",
    "one",
    "another",
    "also",
    "select",
    "technology",
    "development",
    "user",
    "experience",
    "visual",
    "design",
    "also",
    "drafted",
    "stage",
    "clearly",
    "without",
    "stage",
    "following",
    "one",
    "ca",
    "happen",
    "next",
    "phase",
    "development",
    "stage",
    "programmers",
    "use",
    "architect",
    "design",
    "write",
    "code",
    "finally",
    "turn",
    "vision",
    "real",
    "thing",
    "aspects",
    "final",
    "product",
    "first",
    "revealed",
    "stakeholders",
    "testing",
    "quality",
    "assurance",
    "takes",
    "place",
    "testers",
    "qa",
    "professionals",
    "review",
    "products",
    "code",
    "useability",
    "bugs",
    "errors",
    "fixed",
    "next",
    "stage",
    "deployment",
    "product",
    "released",
    "users",
    "sometimes",
    "stage",
    "combined",
    "following",
    "one",
    "maintenance",
    "feedback",
    "constantly",
    "gathered",
    "product",
    "receives",
    "continuous",
    "updates",
    "support",
    "includes",
    "fixes",
    "new",
    "features",
    "sometimes",
    "prototyping",
    "stage",
    "planning",
    "designing",
    "prototype",
    "simplified",
    "version",
    "product",
    "used",
    "validate",
    "idea",
    "major",
    "work",
    "begins",
    "even",
    "coded",
    "design",
    "used",
    "receive",
    "feedback",
    "stakeholders",
    "users",
    "prototype",
    "best",
    "way",
    "verify",
    "requirements",
    "minimal",
    "effort",
    "costs",
    "number",
    "phases",
    "titles",
    "differ",
    "depending",
    "specifics",
    "projects",
    "particular",
    "methodology",
    "common",
    "understanding",
    "remains",
    "start",
    "plan",
    "design",
    "develop",
    "test",
    "release",
    "product",
    "sdlc",
    "concept",
    "used",
    "base",
    "several",
    "models",
    "apply",
    "give",
    "project",
    "clarity",
    "help",
    "deliver",
    "best",
    "results",
    "waterfall",
    "first",
    "software",
    "development",
    "approach",
    "described",
    "rey",
    "article",
    "back",
    "1970s",
    "adheres",
    "strictly",
    "sdlc",
    "stages",
    "main",
    "idea",
    "stage",
    "starts",
    "previous",
    "one",
    "finished",
    "timeline",
    "due",
    "dates",
    "deliverables",
    "clearly",
    "set",
    "waterfall",
    "model",
    "borrowed",
    "construction",
    "manufacturing",
    "industries",
    "makes",
    "total",
    "sense",
    "need",
    "wait",
    "blueprints",
    "laying",
    "bricks",
    "model",
    "straightforward",
    "well",
    "defined",
    "team",
    "focus",
    "one",
    "phase",
    "point",
    "time",
    "project",
    "easier",
    "manage",
    "today",
    "fallen",
    "favor",
    "engineering",
    "world",
    "main",
    "reason",
    "opposite",
    "flexible",
    "whenever",
    "need",
    "make",
    "change",
    "requirements",
    "design",
    "need",
    "roll",
    "back",
    "stage",
    "one",
    "whole",
    "cycle",
    "finish",
    "line",
    "identified",
    "unforeseen",
    "risks",
    "mitigated",
    "planning",
    "testing",
    "happens",
    "late",
    "process",
    "stages",
    "overlap",
    "inevitably",
    "leads",
    "blown",
    "deadlines",
    "budgets",
    "modern",
    "software",
    "development",
    "different",
    "approach",
    "used",
    "today",
    "agile",
    "philosophy",
    "king",
    "agile",
    "manifesto",
    "written",
    "17",
    "software",
    "developers",
    "2001",
    "direct",
    "response",
    "heavyweight",
    "waterfall",
    "methodology",
    "among",
    "12",
    "principles",
    "calls",
    "welcome",
    "change",
    "even",
    "late",
    "development",
    "stages",
    "deliver",
    "software",
    "continuously",
    "early",
    "agile",
    "solved",
    "waterfall",
    "drawbacks",
    "ways",
    "firstly",
    "testing",
    "phase",
    "separate",
    "building",
    "phase",
    "rather",
    "done",
    "every",
    "iteration",
    "example",
    "scrum",
    "one",
    "frameworks",
    "based",
    "agile",
    "development",
    "broken",
    "smaller",
    "cycles",
    "sprints",
    "sprints",
    "considered",
    "part",
    "scrum",
    "development",
    "framework",
    "short",
    "periods",
    "time",
    "typically",
    "lasting",
    "1",
    "4",
    "weeks",
    "sprint",
    "cycle",
    "team",
    "works",
    "stages",
    "end",
    "sprint",
    "finished",
    "piece",
    "product",
    "shown",
    "stakeholders",
    "short",
    "feedback",
    "loop",
    "allows",
    "devs",
    "adapt",
    "quickly",
    "find",
    "new",
    "approaches",
    "faster",
    "without",
    "compromising",
    "delivery",
    "date",
    "another",
    "key",
    "change",
    "agile",
    "brought",
    "development",
    "life",
    "cycle",
    "approach",
    "planning",
    "specifically",
    "documentation",
    "one",
    "main",
    "values",
    "listed",
    "agile",
    "manifesto",
    "says",
    "working",
    "software",
    "comprehensive",
    "documentation",
    "assumption",
    "agile",
    "teams",
    "use",
    "little",
    "docs",
    "wrong",
    "waterfall",
    "idea",
    "create",
    "detailed",
    "documentation",
    "covering",
    "project",
    "goals",
    "working",
    "process",
    "well",
    "precise",
    "budget",
    "time",
    "estimates",
    "agile",
    "change",
    "welcome",
    "would",
    "waste",
    "time",
    "idea",
    "produce",
    "essential",
    "docks",
    "barely",
    "good",
    "enough",
    "yes",
    "real",
    "term",
    "agile",
    "plus",
    "must",
    "collaborative",
    "effort",
    "tech",
    "writer",
    "asks",
    "team",
    "feedback",
    "encourages",
    "others",
    "share",
    "ideas",
    "want",
    "learn",
    "documentation",
    "types",
    "created",
    "videos",
    "find",
    "useful",
    "originally",
    "agile",
    "philosophy",
    "today",
    "loads",
    "specific",
    "tools",
    "techniques",
    "frameworks",
    "scrum",
    "lean",
    "extreme",
    "programming",
    "conon",
    "also",
    "classified",
    "agile",
    "approaches",
    "even",
    "though",
    "existed",
    "agile",
    "manifesto",
    "formulated",
    "fall",
    "agile",
    "umbrella",
    "framework",
    "best",
    "applications",
    "specific",
    "tool",
    "set",
    "apart",
    "aforementioned",
    "scrum",
    "lean",
    "methodology",
    "focuses",
    "eliminating",
    "waste",
    "core",
    "feedback",
    "loop",
    "testing",
    "assumptions",
    "consists",
    "three",
    "recurrent",
    "steps",
    "build",
    "basically",
    "means",
    "drafting",
    "version",
    "product",
    "mvp",
    "measure",
    "meaning",
    "collecting",
    "feedback",
    "evaluating",
    "version",
    "product",
    "succeeds",
    "learn",
    "drawing",
    "conclusions",
    "deciding",
    "refine",
    "product",
    "next",
    "loop",
    "another",
    "framework",
    "called",
    "extreme",
    "programming",
    "xp",
    "uses",
    "usual",
    "life",
    "cycle",
    "emphasizes",
    "technical",
    "aspect",
    "development",
    "uses",
    "practices",
    "test",
    "driven",
    "development",
    "code",
    "refactoring",
    "pair",
    "programming",
    "also",
    "kbon",
    "management",
    "method",
    "framework",
    "since",
    "uses",
    "conon",
    "boards",
    "visualize",
    "work",
    "efficiency",
    "many",
    "frameworks",
    "agile",
    "development",
    "process",
    "used",
    "depending",
    "team",
    "wants",
    "project",
    "requires",
    "around",
    "2008",
    "new",
    "concept",
    "emerged",
    "agile",
    "drastically",
    "changed",
    "software",
    "built",
    "released",
    "today",
    "devops",
    "one",
    "discussed",
    "development",
    "approaches",
    "employed",
    "giants",
    "amazon",
    "netflix",
    "google",
    "facebook",
    "stands",
    "development",
    "operations",
    "devops",
    "introduces",
    "cultural",
    "shift",
    "different",
    "teams",
    "work",
    "together",
    "developers",
    "qas",
    "operations",
    "longer",
    "writing",
    "code",
    "testing",
    "deploying",
    "supporting",
    "code",
    "apart",
    "one",
    "another",
    "merge",
    "single",
    "team",
    "often",
    "skills",
    "devops",
    "life",
    "cycle",
    "typically",
    "visualized",
    "infinity",
    "loop",
    "representing",
    "development",
    "processes",
    "left",
    "side",
    "operations",
    "right",
    "side",
    "team",
    "collaborates",
    "communicates",
    "throughout",
    "phase",
    "whole",
    "separate",
    "video",
    "covering",
    "devops",
    "video",
    "series",
    "devops",
    "aspects",
    "need",
    "know",
    "check",
    "one",
    "important",
    "devops",
    "uses",
    "typical",
    "agile",
    "planning",
    "product",
    "development",
    "rough",
    "objectives",
    "outlined",
    "future",
    "sprints",
    "detailed",
    "agile",
    "focused",
    "identifying",
    "features",
    "users",
    "like",
    "devops",
    "make",
    "sure",
    "existing",
    "processes",
    "optimized",
    "streamlined",
    "devops",
    "uses",
    "ci",
    "cd",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "cicd",
    "set",
    "principles",
    "allow",
    "developers",
    "deliver",
    "frequent",
    "code",
    "changes",
    "means",
    "teams",
    "integrate",
    "code",
    "daily",
    "even",
    "hourly",
    "basis",
    "merging",
    "code",
    "changes",
    "central",
    "repository",
    "preparing",
    "deployment",
    "moment",
    "basically",
    "changes",
    "new",
    "features",
    "bug",
    "fixes",
    "always",
    "ready",
    "deployed",
    "product",
    "updated",
    "multiple",
    "times",
    "per",
    "day",
    "continuously",
    "delivering",
    "value",
    "users",
    "hubspot",
    "shared",
    "add",
    "200",
    "300",
    "deployments",
    "day",
    "using",
    "cicd",
    "netflix",
    "orchestrates",
    "deployments",
    "daily",
    "2022",
    "11",
    "organiz",
    "iz",
    "ation",
    "considered",
    "high",
    "devops",
    "performers",
    "deployed",
    "417",
    "times",
    "low",
    "performers",
    "course",
    "achieved",
    "high",
    "levels",
    "automation",
    "infrastructure",
    "connects",
    "aspects",
    "product",
    "delivery",
    "unified",
    "ecosystem",
    "although",
    "cicd",
    "facilitates",
    "agile",
    "practices",
    "getting",
    "feedback",
    "quickly",
    "detecting",
    "errors",
    "early",
    "stages",
    "require",
    "short",
    "iterations",
    "introduces",
    "automation",
    "development",
    "life",
    "cycle",
    "even",
    "agile",
    "introducing",
    "product",
    "changes",
    "long",
    "process",
    "especially",
    "today",
    "technological",
    "innovations",
    "happen",
    "fast",
    "consumer",
    "needs",
    "change",
    "easily",
    "cicd",
    "solves",
    "problem",
    "adapting",
    "short",
    "amount",
    "time",
    "without",
    "disrupting",
    "whole",
    "development",
    "flow",
    "consumers",
    "get",
    "see",
    "new",
    "features",
    "added",
    "real",
    "time",
    "provide",
    "feedback",
    "instantly",
    "60",
    "years",
    "phases",
    "software",
    "development",
    "life",
    "cycle",
    "remained",
    "relatively",
    "unchanged",
    "regardless",
    "whether",
    "building",
    "house",
    "rocket",
    "ship",
    "app",
    "need",
    "plan",
    "design",
    "build",
    "test",
    "deploy",
    "maintain",
    "product",
    "matters",
    "relations",
    "phases",
    "testers",
    "devs",
    "collaborate",
    "even",
    "capable",
    "job",
    "need",
    "separate",
    "tasks",
    "much",
    "automation",
    "tools",
    "made",
    "possible",
    "many",
    "things",
    "time",
    "shrink",
    "cycle",
    "days",
    "hours",
    "agile",
    "many",
    "models",
    "approaches",
    "spurted",
    "remained",
    "relevant",
    "decades",
    "perhaps",
    "last",
    "another",
    "decade",
    "maybe",
    "new",
    "hip",
    "technology",
    "show",
    "us",
    "efficient",
    "way",
    "follow",
    "product",
    "development",
    "path",
    "regardless",
    "keep",
    "updated",
    "let",
    "us",
    "know",
    "enjoyed",
    "video",
    "like",
    "subscribe",
    "want",
    "videos",
    "like",
    "see",
    "soon",
    "next",
    "music",
    "video",
    "yeah"
  ],
  "keywords": [
    "next",
    "project",
    "let",
    "hope",
    "especially",
    "software",
    "development",
    "method",
    "like",
    "life",
    "cycle",
    "sdlc",
    "process",
    "different",
    "stages",
    "building",
    "1970s",
    "way",
    "business",
    "systems",
    "today",
    "product",
    "many",
    "methodologies",
    "phases",
    "music",
    "technology",
    "article",
    "described",
    "steps",
    "use",
    "planning",
    "analysis",
    "sometimes",
    "also",
    "called",
    "separate",
    "stage",
    "team",
    "requirements",
    "final",
    "must",
    "work",
    "time",
    "go",
    "phase",
    "several",
    "videos",
    "covering",
    "make",
    "sure",
    "check",
    "one",
    "designing",
    "design",
    "architect",
    "future",
    "another",
    "clearly",
    "without",
    "following",
    "happen",
    "code",
    "real",
    "aspects",
    "first",
    "stakeholders",
    "testing",
    "testers",
    "errors",
    "deployment",
    "released",
    "users",
    "feedback",
    "continuous",
    "fixes",
    "new",
    "features",
    "prototype",
    "version",
    "used",
    "idea",
    "even",
    "best",
    "effort",
    "depending",
    "methodology",
    "plan",
    "test",
    "concept",
    "models",
    "deliver",
    "waterfall",
    "approach",
    "back",
    "main",
    "finished",
    "set",
    "model",
    "need",
    "well",
    "change",
    "whole",
    "late",
    "agile",
    "philosophy",
    "manifesto",
    "developers",
    "principles",
    "welcome",
    "continuously",
    "early",
    "scrum",
    "frameworks",
    "sprints",
    "considered",
    "framework",
    "short",
    "typically",
    "sprint",
    "loop",
    "devs",
    "quickly",
    "find",
    "approaches",
    "delivery",
    "documentation",
    "working",
    "teams",
    "detailed",
    "waste",
    "want",
    "learn",
    "specific",
    "tools",
    "lean",
    "extreme",
    "programming",
    "conon",
    "apart",
    "build",
    "basically",
    "means",
    "uses",
    "practices",
    "devops",
    "netflix",
    "operations",
    "introduces",
    "processes",
    "side",
    "video",
    "know",
    "cicd",
    "changes",
    "daily",
    "deployed",
    "updated",
    "times",
    "day",
    "deployments",
    "high",
    "performers",
    "automation",
    "see",
    "remained",
    "regardless",
    "us"
  ]
}