{
  "text": "hi there my front and friends I always\nenjoy when people complain that there's\ntoo many ways to do something in CSS but\nthey seem perfectly happy when we can do\nthe same thing multiple ways in\nJavaScript but of course whenever we end\nup with multiple ways to do the same\nthing it's usually because one is better\nin a specific situation over one of our\nother options one example of this in\nJavaScript is that there's a bunch of\ndifferent ways to create functions and\ntoday I brought Christopher Dandy with\nme to help break them down because as\nwell as I know CSS he knows his way\naround JavaScript thank you for joining\nme today Chris and yeah why are there so\nmany ways to make different functions in\nJavaScript Kevin thanks so much for\nhaving me I don't know why there's so\nmany ways I know why there's at least\ntwo different ways I do not know for the\nlife of me why there's three um so let's\ntalk about it so um I'm going to start\nwith the OG ways to declare functions\nand then we'll get into like the new way\nI use new and quotes because it's been\naround for a while now it's still kind\nof irks me but I'm also an old man who\nyells at the clouds so um like the\noriginal old school way to declare\nfunctions function declarations is to\nuse the function operator or keyword\nfollowed by the function\nname uh and then you've got your\nparentheses with any sort of variables\nor um parameters that are being declared\non the function and your curly brackets\nand then inside those curly brackets is\nwhere the stuff happens so in this case\nI'm taking two numbers I'm adding them\ntogether and I'm returning the result\nand I could do something like add three\nand four and it's going to to return\nseven um there's also a function\nexpression where you have a function\nusually Anonymous but I have sometimes\nseen people do things where they like\nthey create a named function and then\nalso assign it to a variable I don't\nknow why you would do this but I do\nsometimes see it done and so here I've\ngot an anonymous function that then gets\nassigned to the ad variable and so I can\ndo the exact same thing here I've got my\ntwo numbers uh they get added together\nand return turned and I could do\nsomething like add three and four and\nI'm going to get back seven the question\naround these is always why would you\nfavor one versus the other for the most\npart they work exactly the same except\nwith one weirdish little kind of gotcha\nEd Edge case around something called\nhoisting so um\nwhen the browser runs so actually let me\nlet me start with this so here I've got\nan ad function and a ract function uh\nand I'm declaring them with function\ndeclarations or I'm assign I'm creating\nthem as a function declaration I can run\nthe ad function after after I've\ndeclared it or I can run the subtract\nfunction before I've declared it when\nthe browser loads a Javascript file it's\nnot like HTML where it just kind of\ninstantly starts doing all the things or\neven CSS where it starts painting all\nthe things because JavaScript is a\nscripting language the browser actually\nreads through the whole thing first to\nunderstand all the different pieces and\nthen it goes through it again and runs\nit top to bottom um when it does that\nfirst read through it does this thing\ncalled hoisting it doesn't actually move\nanything around in the file but it\nalready knows there's a function called\nadd and this is what it does so uh and\nin this case there's a function called\nsubtract and I know what it does so\nthat's the reason why this works even\nthough I haven't said what subtract does\nhere the browser runs it just fine\nbecause it's done a read through it\nalready knows okay there's a function\ncalled subtract and it does a thing um\nand I know what that thing is so I can I\ncan just do it but when you use function\nExpressions it actually works a little\nbit differently so because I have a\nvariable that is being assigned an\nanonymous function the browser doesn't\nHoist the function that's assigned to\nthe variable um or that true for any\nvariable so I could have a bunch of\nvariables that were just other things\nright so let name equal Chris for\nexample when the browser does its first\npass it knows there's a variable called\nname it does not have a value for that\nyet it hasn't executed the code so it\nhasn't assigned any sort of value to\nthat variable yet and so as a result\nwhen we try to declare a function with a\nfunction expression and then run it\nbefore we've expressed it we get an\nuncaught reference error um cannot\naccess subtract before initialization so\nin this case what's happening is the\nbrowser knows there's a variable called\nsubtract it has no idea that it's a\nfunction could be a string could be\nsomething it just knows the variable\nexists so then when it goes to actually\nrun the code it hits this and it's like\nI don't know what to do here yet um\nwhereas if I do it this way it works as\nyou would expect um and so you're not\noften in a situation where you're trying\nto run code before you've declared it\nbut I do sometimes see people who like\nto organize their code where they have\nall of the stuff that runs up at the top\nand then all of the kind of the\nDeclarations of those things down below\nit so if you like to structure your code\nthat way you have to use a function\ndeclaration you cannot use a function\nexpression or you're going to run into\nerrors I personally tend to favor\nfunction declarations but aside from the\nhoisting thing it is entirely a matter\nof personal preference that's that\nbefore I move on uh this is actually\nrelevant to when we start to talk about\nArrow functions but any questions there\nKevin you know hoisting seems well I\nknow there's a bit more to it than than\njust that but it you know I think at its\nBas level that's a pretty easy way to\nunderstand what's going on there um yeah\nand yeah it makes sense and I think\nwe've all seen that that error that\nyou've you've shown in there um the one\nquestion I'd actually would have is it's\na little bit off topic maybe but you\nwere just talking about the different\nways to organize the code\nwhere some people like to have you said\neverything going on and then the the\nfunctions declared lower down do you\nhave a preference one way or the other\nfor that I do yeah so I um if you look\nat my code uh I almost always have them\nset up where I've got my variables up at\nthe top and then in the middle I've got\nmy like methods and functions so\nanything that sets up what's supposed to\nrun and then down at the end I've got my\ninitializations and event listeners um\nand so if my codee is really big I'll\nsometimes even set it up like this right\nbut so I might have something like uh\nyou know let name equal Chris and then I\nhave um you know my functions so say\nhello and this is going to do something\nstupid like um it's going to console log\nhello hello name and then down at the\nvery end I'm actually going to run that\ncode so this is a really common common\nstructure in my code bases usually\nthey're not big enough that I need these\nheadings here but I have on occasion if\nI've got like really large code bases\nit's nice to have these these physical\nbreaks so you can see how things work um\nbut this is often how my code code works\nor if I'm like getting elements right if\nI'm going to set up a an event listener\nof some some kind um I'll have my you\nknow my thing up here where I'm getting\nlet's say I'm getting my form and then\ndown here I'm um I'm adding an event\nlistener uh it would help if I could\ntype um you know I'm listening for the\nsubmit event and I'm GNA have some sort\nof like Handler for that that'll get\ndeclared up up over here so you'll see\nthis a lot in in my code I want to\nstress this is a personal preference\nthere are so many different ways to do\nthis and none of them are inherently\nright or wrong it's just you know what\nwhat feels most natural and readable to\nyou um and if you're working on a team\nI'd say stick with Team conventions but\nif you're doing solo projects just pick\nthe thing that's easiest for you to\nreason about and maintain in the long\nrun so that brings us to Arrow functions\nArrow functions came about as a way to\naddress some of the idiosyncrasies of\ntraditional functions and also give them\na potentially terser syntax depending on\nyour use case we'll talk about some of\nthat but first let's just talk about the\ngeneral way of writing them so um if I\nhave a traditional function here so I've\ngot my my original ad function as a\nfunction expression the arrow function\nversion you drop the function keyword\nand drop a fat Arrow between the\nparentheses and the curly brackets or\ncurly braces otherwise you can keep it\nexactly the same so the difference\nbetween a function expression and an\narrow function is is just I remove the\nword function I add this this little\narrow thing here um there's more to it\nthan that but that's you know kind of at\na high level um the thing about Arrow\nfunctions if you want them to be named\nyou cannot write them as a function\ndeclaration there's no way to do like uh\nlike this that that doesn't exist uh so\nit has to it has to be a function\nexpression so again be mindful of\nhoisting in that case it's a reason why\nwe talked about that but there is also a\nway to write this in a more Abridged\nsyntax if you have an arrow function\nthat is only returning things you can um\nyou can drop the curly brackets all\ntogether and it'll still work so in this\ncase this is going to give me the same\nexact result as this did and this is\nwhere a lot of folks start to really\nlike Arrow functions because can keep\nthem really compactly on just one line\nthe one big advantage of Arrow functions\nis um they do not override the this\nkeyword in JavaScript and so this is\nwhere developers start to really love\nthem this is confusing as as heck um\nit's it's it's a keyword whose\ndefinition or the the thing that's\nassigned to it changes depending on\nwhere it's invoked but it's used heavily\nin JavaScript classes and forgive me\nKevin because I know I'm probably\ngetting way too into the weeds but this\nis the best way I could think of to kind\nof explain this concept here yeah no\nit's I've got this JavaScript class that\nI can use to create a new instance of a\nthing and then run some methods on it so\nin this case I've get this calculator I\npass in some sort of Base number and\nthen I can run the add method on it so\nhere I'm going to add five to 42 and the\nnew value of count will be 47 I promise\nI'm I'm terrible at\nmath so the way this works in the class\nI've got this thing called The\nConstructor this sets up the instance um\nand I'm assigning a a total to the\ninstance to this with whatever my start\nvalue was in this case it's zero by\ndefault or if you pass something in it's\nthat number um and then I've got this\nadd method here where I am accepting any\nnumber of numbers and then as an array\nand I'm going to Loop through them or it\nturns them into an array I should say uh\nand then I'm going to Loop through each\none and add them to my total um the\nproblem here is inside this function\nthis no longer refers to the same thing\nas here so if we were to jump over to\nthe browser and take a look at this I've\ngot this error here cannot read property\nof undefined when trying to read total\num we can actually we can see this in\naction so if I if I console log this um\nwe get just this undefined thing this\ndoesn't even exist inside this function\nwhereas if I were to log it here inside\nadd uh it refers to my calculator\ninstance with the total of\n42 um so one of the ways the developers\nhistorically would try to get around\nthis is they would assign this to some\nother variable and then use that inside\nthe function instead I'm using instance\nhere but used to see let that equal this\nall the time back in like the jQuery era\num just all over code let that equal\nthis it was so confusing I never had any\nidea what was going on but if I jump\nover to the browser you can see now it\nworks now we get 47 uh you the the\nexpected number Arrow\nfunctions prevent you from having to do\nlet that equal this or let instance\nequal this um so so in an arrow\nfunction this does not get adjusted at\nall so whatever it was in the the parent\nscope it is inside the arrow function so\nnow instead of having to to let instance\nequals this and instance total I can\njust say this total plus equals number\nand it will add it so if we jump over\nthe browser and reload I still get\n47 uh and this is where in my opinion\nthe real value of Arrow functions starts\nto come in when you start doing things\nlike working with classes and prototypes\nand you need to preserve this for some\nreason that's where they really win um\none other thing you can see I'm doing\nhere because there is only one argument\nI don't even have to have the\nparenthesis here I can just drop them\nentirely and so you'll um actually even\nnow that I think about it these curly\nbrackets are optional as well so I could\ndo something like um like this and uh\nthis here actually let's let's reload it\nI'm still getting 47s so this is for\ndevelopers who like tur code and I not\none of them I like verbose code because\nI I think it's easier to read um but if\nyou're someone who really like super\nshort code and code golf um Arrow\nfunctions are also a boon in that regard\nbecause they allow you to keep things\nmuch smaller um here this this\nmulti-line thing becomes just a single\nline of code that's the different ways\nto write functions if we want to get\ninto which one should you use and when\nagain personal preference so I know a\nlot of newer developers tend to use\nArrow functions for literally everything\nuh I think it's what they teach in a lot\nof like school programs and boot camps\nand stuff now um I'm old so I tend to\nuse function declarations for everything\nexcept when there's some beneficial\nreason to use Arrow functions so I'll\nuse Arrow functions inside like classes\nand web components but um other than\nthat it's function declarations for me\nand if you'd like to continue learning\nsome JavaScript from Chris I've put a\nlink down in the description that goes\nover to his site he's together a special\npage for people who have watched this\nvideo that has the source code from\neverything that we've looked at today\nand also a whole bunch of Articles and\nother things that you might find helpful\nthank you very much for watching and of\ncourse until next time don't forget to\nmake your corner of the internet just a\nlittle bit more awesome\n",
  "words": [
    "hi",
    "front",
    "friends",
    "always",
    "enjoy",
    "people",
    "complain",
    "many",
    "ways",
    "something",
    "css",
    "seem",
    "perfectly",
    "happy",
    "thing",
    "multiple",
    "ways",
    "javascript",
    "course",
    "whenever",
    "end",
    "multiple",
    "ways",
    "thing",
    "usually",
    "one",
    "better",
    "specific",
    "situation",
    "one",
    "options",
    "one",
    "example",
    "javascript",
    "bunch",
    "different",
    "ways",
    "create",
    "functions",
    "today",
    "brought",
    "christopher",
    "dandy",
    "help",
    "break",
    "well",
    "know",
    "css",
    "knows",
    "way",
    "around",
    "javascript",
    "thank",
    "joining",
    "today",
    "chris",
    "yeah",
    "many",
    "ways",
    "make",
    "different",
    "functions",
    "javascript",
    "kevin",
    "thanks",
    "much",
    "know",
    "many",
    "ways",
    "know",
    "least",
    "two",
    "different",
    "ways",
    "know",
    "life",
    "three",
    "um",
    "let",
    "talk",
    "um",
    "going",
    "start",
    "og",
    "ways",
    "declare",
    "functions",
    "get",
    "like",
    "new",
    "way",
    "use",
    "new",
    "quotes",
    "around",
    "still",
    "kind",
    "irks",
    "also",
    "old",
    "man",
    "yells",
    "clouds",
    "um",
    "like",
    "original",
    "old",
    "school",
    "way",
    "declare",
    "functions",
    "function",
    "declarations",
    "use",
    "function",
    "operator",
    "keyword",
    "followed",
    "function",
    "name",
    "uh",
    "got",
    "parentheses",
    "sort",
    "variables",
    "um",
    "parameters",
    "declared",
    "function",
    "curly",
    "brackets",
    "inside",
    "curly",
    "brackets",
    "stuff",
    "happens",
    "case",
    "taking",
    "two",
    "numbers",
    "adding",
    "together",
    "returning",
    "result",
    "could",
    "something",
    "like",
    "add",
    "three",
    "four",
    "going",
    "return",
    "seven",
    "um",
    "also",
    "function",
    "expression",
    "function",
    "usually",
    "anonymous",
    "sometimes",
    "seen",
    "people",
    "things",
    "like",
    "create",
    "named",
    "function",
    "also",
    "assign",
    "variable",
    "know",
    "would",
    "sometimes",
    "see",
    "done",
    "got",
    "anonymous",
    "function",
    "gets",
    "assigned",
    "ad",
    "variable",
    "exact",
    "thing",
    "got",
    "two",
    "numbers",
    "uh",
    "get",
    "added",
    "together",
    "return",
    "turned",
    "could",
    "something",
    "like",
    "add",
    "three",
    "four",
    "going",
    "get",
    "back",
    "seven",
    "question",
    "around",
    "always",
    "would",
    "favor",
    "one",
    "versus",
    "part",
    "work",
    "exactly",
    "except",
    "one",
    "weirdish",
    "little",
    "kind",
    "gotcha",
    "ed",
    "edge",
    "case",
    "around",
    "something",
    "called",
    "hoisting",
    "um",
    "browser",
    "runs",
    "actually",
    "let",
    "let",
    "start",
    "got",
    "ad",
    "function",
    "ract",
    "function",
    "uh",
    "declaring",
    "function",
    "declarations",
    "assign",
    "creating",
    "function",
    "declaration",
    "run",
    "ad",
    "function",
    "declared",
    "run",
    "subtract",
    "function",
    "declared",
    "browser",
    "loads",
    "javascript",
    "file",
    "like",
    "html",
    "kind",
    "instantly",
    "starts",
    "things",
    "even",
    "css",
    "starts",
    "painting",
    "things",
    "javascript",
    "scripting",
    "language",
    "browser",
    "actually",
    "reads",
    "whole",
    "thing",
    "first",
    "understand",
    "different",
    "pieces",
    "goes",
    "runs",
    "top",
    "bottom",
    "um",
    "first",
    "read",
    "thing",
    "called",
    "hoisting",
    "actually",
    "move",
    "anything",
    "around",
    "file",
    "already",
    "knows",
    "function",
    "called",
    "add",
    "uh",
    "case",
    "function",
    "called",
    "subtract",
    "know",
    "reason",
    "works",
    "even",
    "though",
    "said",
    "subtract",
    "browser",
    "runs",
    "fine",
    "done",
    "read",
    "already",
    "knows",
    "okay",
    "function",
    "called",
    "subtract",
    "thing",
    "um",
    "know",
    "thing",
    "use",
    "function",
    "expressions",
    "actually",
    "works",
    "little",
    "bit",
    "differently",
    "variable",
    "assigned",
    "anonymous",
    "function",
    "browser",
    "hoist",
    "function",
    "assigned",
    "variable",
    "um",
    "true",
    "variable",
    "could",
    "bunch",
    "variables",
    "things",
    "right",
    "let",
    "name",
    "equal",
    "chris",
    "example",
    "browser",
    "first",
    "pass",
    "knows",
    "variable",
    "called",
    "name",
    "value",
    "yet",
    "executed",
    "code",
    "assigned",
    "sort",
    "value",
    "variable",
    "yet",
    "result",
    "try",
    "declare",
    "function",
    "function",
    "expression",
    "run",
    "expressed",
    "get",
    "uncaught",
    "reference",
    "error",
    "um",
    "access",
    "subtract",
    "initialization",
    "case",
    "happening",
    "browser",
    "knows",
    "variable",
    "called",
    "subtract",
    "idea",
    "function",
    "could",
    "string",
    "could",
    "something",
    "knows",
    "variable",
    "exists",
    "goes",
    "actually",
    "run",
    "code",
    "hits",
    "like",
    "know",
    "yet",
    "um",
    "whereas",
    "way",
    "works",
    "would",
    "expect",
    "um",
    "often",
    "situation",
    "trying",
    "run",
    "code",
    "declared",
    "sometimes",
    "see",
    "people",
    "like",
    "organize",
    "code",
    "stuff",
    "runs",
    "top",
    "kind",
    "declarations",
    "things",
    "like",
    "structure",
    "code",
    "way",
    "use",
    "function",
    "declaration",
    "use",
    "function",
    "expression",
    "going",
    "run",
    "errors",
    "personally",
    "tend",
    "favor",
    "function",
    "declarations",
    "aside",
    "hoisting",
    "thing",
    "entirely",
    "matter",
    "personal",
    "preference",
    "move",
    "uh",
    "actually",
    "relevant",
    "start",
    "talk",
    "arrow",
    "functions",
    "questions",
    "kevin",
    "know",
    "hoisting",
    "seems",
    "well",
    "know",
    "bit",
    "know",
    "think",
    "bas",
    "level",
    "pretty",
    "easy",
    "way",
    "understand",
    "going",
    "um",
    "yeah",
    "yeah",
    "makes",
    "sense",
    "think",
    "seen",
    "error",
    "shown",
    "um",
    "one",
    "question",
    "actually",
    "would",
    "little",
    "bit",
    "topic",
    "maybe",
    "talking",
    "different",
    "ways",
    "organize",
    "code",
    "people",
    "like",
    "said",
    "everything",
    "going",
    "functions",
    "declared",
    "lower",
    "preference",
    "one",
    "way",
    "yeah",
    "um",
    "look",
    "code",
    "uh",
    "almost",
    "always",
    "set",
    "got",
    "variables",
    "top",
    "middle",
    "got",
    "like",
    "methods",
    "functions",
    "anything",
    "sets",
    "supposed",
    "run",
    "end",
    "got",
    "initializations",
    "event",
    "listeners",
    "um",
    "codee",
    "really",
    "big",
    "sometimes",
    "even",
    "set",
    "like",
    "right",
    "might",
    "something",
    "like",
    "uh",
    "know",
    "let",
    "name",
    "equal",
    "chris",
    "um",
    "know",
    "functions",
    "say",
    "hello",
    "going",
    "something",
    "stupid",
    "like",
    "um",
    "going",
    "console",
    "log",
    "hello",
    "hello",
    "name",
    "end",
    "actually",
    "going",
    "run",
    "code",
    "really",
    "common",
    "common",
    "structure",
    "code",
    "bases",
    "usually",
    "big",
    "enough",
    "need",
    "headings",
    "occasion",
    "got",
    "like",
    "really",
    "large",
    "code",
    "bases",
    "nice",
    "physical",
    "breaks",
    "see",
    "things",
    "work",
    "um",
    "often",
    "code",
    "code",
    "works",
    "like",
    "getting",
    "elements",
    "right",
    "going",
    "set",
    "event",
    "listener",
    "kind",
    "um",
    "know",
    "thing",
    "getting",
    "let",
    "say",
    "getting",
    "form",
    "um",
    "adding",
    "event",
    "listener",
    "uh",
    "would",
    "help",
    "could",
    "type",
    "um",
    "know",
    "listening",
    "submit",
    "event",
    "gna",
    "sort",
    "like",
    "handler",
    "get",
    "declared",
    "see",
    "lot",
    "code",
    "want",
    "stress",
    "personal",
    "preference",
    "many",
    "different",
    "ways",
    "none",
    "inherently",
    "right",
    "wrong",
    "know",
    "feels",
    "natural",
    "readable",
    "um",
    "working",
    "team",
    "say",
    "stick",
    "team",
    "conventions",
    "solo",
    "projects",
    "pick",
    "thing",
    "easiest",
    "reason",
    "maintain",
    "long",
    "run",
    "brings",
    "us",
    "arrow",
    "functions",
    "arrow",
    "functions",
    "came",
    "way",
    "address",
    "idiosyncrasies",
    "traditional",
    "functions",
    "also",
    "give",
    "potentially",
    "terser",
    "syntax",
    "depending",
    "use",
    "case",
    "talk",
    "first",
    "let",
    "talk",
    "general",
    "way",
    "writing",
    "um",
    "traditional",
    "function",
    "got",
    "original",
    "ad",
    "function",
    "function",
    "expression",
    "arrow",
    "function",
    "version",
    "drop",
    "function",
    "keyword",
    "drop",
    "fat",
    "arrow",
    "parentheses",
    "curly",
    "brackets",
    "curly",
    "braces",
    "otherwise",
    "keep",
    "exactly",
    "difference",
    "function",
    "expression",
    "arrow",
    "function",
    "remove",
    "word",
    "function",
    "add",
    "little",
    "arrow",
    "thing",
    "um",
    "know",
    "kind",
    "high",
    "level",
    "um",
    "thing",
    "arrow",
    "functions",
    "want",
    "named",
    "write",
    "function",
    "declaration",
    "way",
    "like",
    "uh",
    "like",
    "exist",
    "uh",
    "function",
    "expression",
    "mindful",
    "hoisting",
    "case",
    "reason",
    "talked",
    "also",
    "way",
    "write",
    "abridged",
    "syntax",
    "arrow",
    "function",
    "returning",
    "things",
    "um",
    "drop",
    "curly",
    "brackets",
    "together",
    "still",
    "work",
    "case",
    "going",
    "give",
    "exact",
    "result",
    "lot",
    "folks",
    "start",
    "really",
    "like",
    "arrow",
    "functions",
    "keep",
    "really",
    "compactly",
    "one",
    "line",
    "one",
    "big",
    "advantage",
    "arrow",
    "functions",
    "um",
    "override",
    "keyword",
    "javascript",
    "developers",
    "start",
    "really",
    "love",
    "confusing",
    "heck",
    "um",
    "keyword",
    "whose",
    "definition",
    "thing",
    "assigned",
    "changes",
    "depending",
    "invoked",
    "used",
    "heavily",
    "javascript",
    "classes",
    "forgive",
    "kevin",
    "know",
    "probably",
    "getting",
    "way",
    "weeds",
    "best",
    "way",
    "could",
    "think",
    "kind",
    "explain",
    "concept",
    "yeah",
    "got",
    "javascript",
    "class",
    "use",
    "create",
    "new",
    "instance",
    "thing",
    "run",
    "methods",
    "case",
    "get",
    "calculator",
    "pass",
    "sort",
    "base",
    "number",
    "run",
    "add",
    "method",
    "going",
    "add",
    "five",
    "42",
    "new",
    "value",
    "count",
    "47",
    "promise",
    "terrible",
    "math",
    "way",
    "works",
    "class",
    "got",
    "thing",
    "called",
    "constructor",
    "sets",
    "instance",
    "um",
    "assigning",
    "total",
    "instance",
    "whatever",
    "start",
    "value",
    "case",
    "zero",
    "default",
    "pass",
    "something",
    "number",
    "um",
    "got",
    "add",
    "method",
    "accepting",
    "number",
    "numbers",
    "array",
    "going",
    "loop",
    "turns",
    "array",
    "say",
    "uh",
    "going",
    "loop",
    "one",
    "add",
    "total",
    "um",
    "problem",
    "inside",
    "function",
    "longer",
    "refers",
    "thing",
    "jump",
    "browser",
    "take",
    "look",
    "got",
    "error",
    "read",
    "property",
    "undefined",
    "trying",
    "read",
    "total",
    "um",
    "actually",
    "see",
    "action",
    "console",
    "log",
    "um",
    "get",
    "undefined",
    "thing",
    "even",
    "exist",
    "inside",
    "function",
    "whereas",
    "log",
    "inside",
    "add",
    "uh",
    "refers",
    "calculator",
    "instance",
    "total",
    "42",
    "um",
    "one",
    "ways",
    "developers",
    "historically",
    "would",
    "try",
    "get",
    "around",
    "would",
    "assign",
    "variable",
    "use",
    "inside",
    "function",
    "instead",
    "using",
    "instance",
    "used",
    "see",
    "let",
    "equal",
    "time",
    "back",
    "like",
    "jquery",
    "era",
    "um",
    "code",
    "let",
    "equal",
    "confusing",
    "never",
    "idea",
    "going",
    "jump",
    "browser",
    "see",
    "works",
    "get",
    "47",
    "uh",
    "expected",
    "number",
    "arrow",
    "functions",
    "prevent",
    "let",
    "equal",
    "let",
    "instance",
    "equal",
    "um",
    "arrow",
    "function",
    "get",
    "adjusted",
    "whatever",
    "parent",
    "scope",
    "inside",
    "arrow",
    "function",
    "instead",
    "let",
    "instance",
    "equals",
    "instance",
    "total",
    "say",
    "total",
    "plus",
    "equals",
    "number",
    "add",
    "jump",
    "browser",
    "reload",
    "still",
    "get",
    "47",
    "uh",
    "opinion",
    "real",
    "value",
    "arrow",
    "functions",
    "starts",
    "come",
    "start",
    "things",
    "like",
    "working",
    "classes",
    "prototypes",
    "need",
    "preserve",
    "reason",
    "really",
    "win",
    "um",
    "one",
    "thing",
    "see",
    "one",
    "argument",
    "even",
    "parenthesis",
    "drop",
    "entirely",
    "um",
    "actually",
    "even",
    "think",
    "curly",
    "brackets",
    "optional",
    "well",
    "could",
    "something",
    "like",
    "um",
    "like",
    "uh",
    "actually",
    "let",
    "let",
    "reload",
    "still",
    "getting",
    "47s",
    "developers",
    "like",
    "tur",
    "code",
    "one",
    "like",
    "verbose",
    "code",
    "think",
    "easier",
    "read",
    "um",
    "someone",
    "really",
    "like",
    "super",
    "short",
    "code",
    "code",
    "golf",
    "um",
    "arrow",
    "functions",
    "also",
    "boon",
    "regard",
    "allow",
    "keep",
    "things",
    "much",
    "smaller",
    "um",
    "thing",
    "becomes",
    "single",
    "line",
    "code",
    "different",
    "ways",
    "write",
    "functions",
    "want",
    "get",
    "one",
    "use",
    "personal",
    "preference",
    "know",
    "lot",
    "newer",
    "developers",
    "tend",
    "use",
    "arrow",
    "functions",
    "literally",
    "everything",
    "uh",
    "think",
    "teach",
    "lot",
    "like",
    "school",
    "programs",
    "boot",
    "camps",
    "stuff",
    "um",
    "old",
    "tend",
    "use",
    "function",
    "declarations",
    "everything",
    "except",
    "beneficial",
    "reason",
    "use",
    "arrow",
    "functions",
    "use",
    "arrow",
    "functions",
    "inside",
    "like",
    "classes",
    "web",
    "components",
    "um",
    "function",
    "declarations",
    "like",
    "continue",
    "learning",
    "javascript",
    "chris",
    "put",
    "link",
    "description",
    "goes",
    "site",
    "together",
    "special",
    "page",
    "people",
    "watched",
    "video",
    "source",
    "code",
    "everything",
    "looked",
    "today",
    "also",
    "whole",
    "bunch",
    "articles",
    "things",
    "might",
    "find",
    "helpful",
    "thank",
    "much",
    "watching",
    "course",
    "next",
    "time",
    "forget",
    "make",
    "corner",
    "internet",
    "little",
    "bit",
    "awesome"
  ],
  "keywords": [
    "always",
    "people",
    "many",
    "ways",
    "something",
    "css",
    "thing",
    "javascript",
    "end",
    "usually",
    "one",
    "bunch",
    "different",
    "create",
    "functions",
    "today",
    "well",
    "know",
    "knows",
    "way",
    "around",
    "chris",
    "yeah",
    "kevin",
    "much",
    "two",
    "three",
    "um",
    "let",
    "talk",
    "going",
    "start",
    "declare",
    "get",
    "like",
    "new",
    "use",
    "still",
    "kind",
    "also",
    "old",
    "function",
    "declarations",
    "keyword",
    "name",
    "uh",
    "got",
    "sort",
    "variables",
    "declared",
    "curly",
    "brackets",
    "inside",
    "stuff",
    "case",
    "numbers",
    "together",
    "result",
    "could",
    "add",
    "expression",
    "anonymous",
    "sometimes",
    "things",
    "assign",
    "variable",
    "would",
    "see",
    "assigned",
    "ad",
    "work",
    "little",
    "called",
    "hoisting",
    "browser",
    "runs",
    "actually",
    "declaration",
    "run",
    "subtract",
    "starts",
    "even",
    "first",
    "goes",
    "top",
    "read",
    "reason",
    "works",
    "bit",
    "right",
    "equal",
    "pass",
    "value",
    "yet",
    "code",
    "error",
    "tend",
    "personal",
    "preference",
    "arrow",
    "think",
    "everything",
    "set",
    "event",
    "really",
    "big",
    "say",
    "hello",
    "log",
    "getting",
    "lot",
    "want",
    "drop",
    "keep",
    "write",
    "developers",
    "classes",
    "instance",
    "number",
    "47",
    "total",
    "jump"
  ]
}