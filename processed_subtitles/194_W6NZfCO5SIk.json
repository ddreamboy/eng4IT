{
  "text": "In this 3-minute introduction, I'm going\nto answer four frequently asked questions\nabout JavaScript. \nWhat is JavaScript, what can you do with\nit, where does JavaScript code run and\nwhat is the difference between\nJavaScript and ECMAScript. So let's\nstart with the first question. What is\nJavaScript? JavaScript is one of the most\npopular and widely used programming\nlanguages in the world right now. It's\ngrowing faster than any other\nprogramming languages and big companies\nlike Netflix, Walmart, and PayPal build\nentire applications around JavaScript.\nAnd here's the average salary of a\nJavaScript developer in the United\nStates. That is $72,000 a year. So\nit's a great opportunity to get a good\njob out of learning JavaScript. You can\nwork as a front-end developer or a\nback-end developer or a full stack\ndeveloper who knows both the front end\nand the back end. Now, the second question.\nWhat can you do with JavaScript? For a\nlong time,\njavascript was only used in browsers to\nbuild interactive web pages some\ndevelopers refer to javascript as a toy\nlanguage but those days are gone because\nof huge community support and\ninvestments by large companies like\nFacebook and Google these days you can\nbuild full-blown web or mobile apps as\nwell as real time networking\napplications like chats and video\nstreaming services command-line tools or\neven games here's an example a third\nquestion where does JavaScript code run\njavascript was originally designed to\nrun only in browsers so every browser\nhas what we call a JavaScript engine\nthat can execute JavaScript code for\nexample the JavaScript engines in\nfirefox and chrome are SpiderMonkey and\nv8 in 2009 a very clever engineer called\nRyan Dahl took the open-source\nJavaScript engine in chrome and embedded\nit inside a C++ program he called that\nprogram node the node is a C++ program\nthat includes Google's v8 JavaScript\nengine now with this we can run\nJavaScript code out\nof a browser so we can pass our\nJavaScript code to node for execution\nand this means with JavaScript we can\nbuild the backend for our web and mobile\napplications so in a nutshell JavaScript\ncode can be run inside of a browser or\nin node browsers and node provide a\nruntime environment for our JavaScript\ncode and finally the last question what\nis the difference between JavaScript and\nEggman script well ECMO script is just a\nspecification javascript is a\nprogramming language that confirms to\nthis specification so we have this\norganization called a comma which is\nresponsible for defining standards they\ntake care of this Eggman script\nspecification the first version of\nEggman script was released in 1997 then\nstarting from 2015\nACMA has been working on annual releases\nof a newest specification so in 2015\nthey released a kimono script 2015 which\nis also called ECMO script version 6 or\nes6 for short this specification defined\nmany new features for JavaScript alright\nenough theory\nlet's see javascript in action so every\nbrowser has a JavaScript engine and we\ncan easily write JavaScript code here\nwithout any additional tools of course\nthis is not how we build real-world\napplications but this is just for a\nquick demo so open up Chrome right click\non an empty area and go to inspect now\nthis opens up chrome developer tools\nhere select the console tab this is our\nJavaScript console and we can write any\nvalid JavaScript code here so type this\nconsole dot log put a single code here\nand then hello world another single code\nto terminate close the parentheses and\nadd a semicolon at the end now as you go\nthrough the course you're going to\nunderstand exactly what all this means\nfor now don't worry about it so now I'll\npress ENTER and you can see the hello\nworld message on the console we can also\nwrite mathematical expressions here for\nexample two plus two we get four or we\ncan do something like this alert\npractices single coat yo enter and\nhere's an alert in the next lecture I'm\ngoing to talk about setting up your\ndevelopment environment for writing\nJavaScript code\nin order to write javascript code you\nneed a code editor there are various\ncode editors out there including Visual\nStudio code or yes code sublime text\natom and so on\nout of these my favorite is Visual\nStudio code that you can download from\ncode that Visual Studio comm it's a very\nsimple lightweight cross-platform and\npowerful editor so if you don't have\nVisual Studio code on your machine go\nahead and download it the other thing I\nwanted to install is note you can\ndownload note from nodejs\norg now technically you don't\nnecessarily need know to execute\nJavaScript because as I explained before\nyou can execute JavaScript code inside\nof a browser or EndNote but it's good to\nhave node on your machine because we use\nthat to install third-party libraries\nand also later in this section I'm going\nto show you a preview of node so pause\nthe video now and download Visual Studio\ncode as well as note once you're done\ncome back continue watching\nto create a new folder call that J s\ndash basics the name doesn't really\nmatter we just want to have a folder for\nwriting all the code in this course now\ndrag and drop this folder into visual\nstudio code okay we've got this folder\nopen let's add a new file here index dot\nHTML now you don't really need to know\nHTML in order to take this course but if\nyou want to be a front-end developer you\nshould know your HTML well now in this\nfile I want you to type an exclamation\nmark and then press tab this generates\nsome basic HTML boilerplate we don't\nreally care about any of this code here\nwe're gonna use this as a host for our\nJavaScript code you're gonna see that in\nthe next lecture so save the changes now\nopen the extensions tab here\nhere in this box search for live server\nso live server is a very lightweight web\nserver that we're going to use to serve\nour web application so install this then\nyou will have to restart Visual Studio\ncode when you're done go to the Explorer\ntab right click index.html and select\nopen with live server\nthis will open up Chrome or your default\nbrowser and point it to this address\nthat's where our web application is\nserved from now currently we have an\nempty page now to make sure that\neverything is working properly let's go\nback to visual studio code here in the\nbody section let's add an h1 press tab\nand type hello world now save the\nchanges back in the browser we can see\nthis page is refreshed automatically and\nwe've got the hello world heading here\nin the next lecture you're going to\nwrite your first JavaScript code\nall right now we're ready to write our\nfirst Java Script code in order to write\nJavaScript code here we need a script\nelement there are two places where we\ncan add a script element we can add it\nhere in a head section or in the body\nsection the best practice is to put the\nscript element at the end of the body\nsection after all the existing elements\nso here after h1 I'm gonna type script\nand press tab this is our script element\nnow why did I say that as a best\npractice you should put this script\nelement here well there are two reasons\nfor that one reason is that the browser\nparses this file from top to bottom so\nif you put this script element here in\nthe head section you might have a lot of\nJavaScript code there so your browser\nmay get busy parsing and executing that\nJavaScript code and it won't be able to\nrender the content of the page so this\nwill create a bad user experience your\nuser looks at your web page it's white\nor blank while your browser is busy\nparsing and executing your JavaScript\ncode so that's reason 1 the second\nreason is that almost always the code\nthat we have in between script elements\nneeds to talk to the elements on this\nweb page for example we may want to show\nor hide some elements so by adding the\ncode here at the end of the body section\nwe'll be confident that all these\nelements are rendered by the browser now\nthere are exceptions to this rule\nsometimes you're using third-party code\nthat has to be placed in the head\nsection but these are exceptions as I\ntold you before as a best practice you\nshould add your JavaScript code at the\nend of the body section now here we're\ngonna write the same code that you wrote\nin the last lecture console dot log\nhello world but we're going to talk\nabout this in a little bit more detail\nwhat we have here is a statement a\nstatement is a piece of code that\nexpresses an action to be carried out in\nthis case we want to log\na message on the console all statements\nin JavaScript should be terminated by a\nsemicolon what we have here in between\nsingle codes is called\na string a string is a sequence of\ncharacters now in JavaScript we also\nhave this notation we can add two\nslashes and this represents a comet so\nhere we can add some description to our\ncode and this description is ignored by\nthe JavaScript engine it's not executed\nit's purely for documenting the code\nwhen you wanna explain to other\ndevelopers why you have written this\ncode this way you don't explain what the\ncode does because that should be clear\nin the code itself so here I don't want\nto write something like logging\nsomething on the console that's so\nobvious in the code right instead we\nwant to explain why's and a house so for\nthis demo I'm just gonna add a simple\ncomment this is my first JavaScript code\nnow save the changes back in the browser\nwe need to bring the console back up so\nright click somewhere and go to inspect\nor alternatively you can use a shortcut\nthat is alt command an eye on Mac or alt\ncontrol eye on windows that brings up\nthe console tab if the console tab is\nnot immediately visible make sure to\nselect it here and here you can see the\nhello world message\nnow while we can easily write javascript\ncode in between the script element in a\nreal-world application you have\nthousands or even millions of code we\ndon't want to write all that code in\nline here we want to extract and\nseparate our JavaScript code from our\nHTML code let me give you a metaphor\nthink of your house in your bedroom you\nhave your bed and your clothes you don't\nstore your clothes in the kitchen this\nis what we call separation of concerns\nwe have the same principle in\nprogramming so we want to separate HTML\nwhich is all about content from\nJavaScript which is all about behavior\nhow should your web page behave what\nshould happen when we hover our mouse\nover a given element maybe something\nshould pop up maybe something should be\nhidden so we use JavaScript to implement\nbehavior so open up the Explorer window\nadd a new file cut in index the j/s now\nback in index dot HTML cut all this\nJavaScript code here and then paste it\nin index J s now in this simple\napplication we have a single file a\nsingle javascript file in a real world\napplication we have hundreds or even\nthousands of JavaScript files later in\nthe course you will learn how to combine\nthese files into a bundle and serve that\nbundle to the client now save the\nchanges back in index.html now that all\nour JavaScript code is in a separate\nfile we need to reference that file here\nso let's add an attribute here SRC which\nis short for source and set it to index\nthat j/s so this tells the browser that\nour JavaScript code is now in index that\nis save the changes back in the browser\nyou can still see the hello world\nmessage and that confirms that our code\nis still working in the next lecture we\nare going to execute this code in node\nso in the last lecture we executed this\npiece of JavaScript code inside of a\nbrowser in this lecture I'm going to\nshow you how to run the same code in\nnode so I'm assuming that you have\ninstalled node on your machine if not\nhead over to node.js org and download\nthe latest version of node now if you're\non Windows open up command prompt if\nyou're on Mac open up terminal and head\nover to the folder you created earlier\nnow in this folder we run node and pass\nthe name of our javascript file that is\nindex dot JSON c node is a program that\nincludes google's v8 JavaScript engine\nwe can give it a piece of JavaScript\ncode and it will execute that code for\nus just like how we can execute some\nJavaScript code in a browser so node is\na runtime environment for executing\nJavaScript code now let me show you a\ntip here in vs code we have an\nintegrated terminal so you're gonna have\nto explicitly open up a separate\nterminal window so here on the top under\nthe View menu look we have integrated\nterminal note the shortcut here that's\nthe shortcut for mac and windows you're\ngonna have a different shortcut so\nselect this and here's our integrated\nterminal pointing to the same folder\nwhere we created our files so you don't\nhave to explicitly navigate to this\nfolder and here we can run node indexed\nat j/s as well now in this course we're\nnot gonna work with node anymore because\nnode is a complex separate topic in fact\nI have a comprehensive course about node\nwith 14 hours of content so once you\nfinish this course if you want to learn\nnode you can always look at my note\ncourse\nwell hello it's mahshar thank you for\nwatching my javascript tutorial I just\nwanted to quickly let you know that this\ntutorial is part of my complete\nJavaScript course where you can learn\nabout all the essential concepts in\nJavaScript the course is packed with\nlots of exercises and solutions and by\nthe end of watching the course you will\nalso receive a certificate of completion\nin case you're interested you can find a\nlink in the video description and if not\nthat's perfectly fine continue watching\nas the next section is coming up\nlet's start this section by a discussion\nof variables which are one of the most\nfundamental concepts in JavaScript and\nany other programming languages in\nprogramming we use a variable to store\ndata temporarily in a computer's memory\nso we store our data somewhere and give\nthat memory location and name and with\nthis name we can read the data at the\ngiven location in the future here is a\nmetaphor think of the boxes you use to\norganize your stuff you put your stuff\nin various boxes and put a label on each\nbox with this you can easily find your\nstuff right a variable is like a box\nwhat we put inside the box is the value\nthat we assign to a variable that's the\ndata and the label that we put on the\nbox is the name of our variable now\nlet's see this in code so here in index\nJas I'm gonna declare a variable now\npreviously in the old days before es6 we\nuse the VAR keyword to declare a\nvariable but there are issues with var\nas you will find out later in the course\nso going forward from es6 the best\npractice is to use the lead keyword to\ndeclare a variable now we need to give\nthis variable a name or an identifier\nand this is like the label we put on a\nbox so I'm gonna call this name and\nfinally we need to terminate this\ndeclaration with a semicolon now let's\nlog this on the console and see what we\nget\nso console that log name once again we\nneed to terminate this statement with a\nsemicolon save the changes and here in\nthe console we see undefined so by\ndefault variables that we defined in\nJavaScript their value is undefined now\nwe can optionally initialize this\nvariable so I'm gonna set this to a\nstring which is a sequence of characters\nlike Marsh note that I'm using single\nquote you can also use double quotes\ndifferent developers have different\npreferences but it's more common to use\nsingle quotes for declaring strings in\nJavaScript now when we save the changes\ninstead of one\nwe see Marsh on the console so here in\nthis example we have declared a variable\ncalled name and we have set that to this\nvalue to this string now we have a few\nrules for naming these variables here\nare the rules\nfirst is that they cannot be a reserved\nkeyword so in JavaScript we have\nreserved keywords let is one of them\nyou also have if else VAR and so on now\nyou don't have to memorize this list if\nyou try to use one of these names you're\ngonna get an error for example if I\nchange this to if notice red underline\nthis is indicating that this is not a\nvalid identifier okay so revert it back\nnow the second rule is that they should\nbe meaningful we want to have meaningful\nnames like meaningful labels I've seen\ndevelopers using names like a or PE or a\none or I don't know X these variable\nnames do not give us any clue what is\nthe purpose of these variables what kind\nof data are restoring at that memory\nlocation so always use meaningful and\ndescriptive names okay now back to name\nthe third rule is that they cannot start\nwith a number so we cannot have a\nvariable like one name but again going\nback to the second rule why would you\nwant to call it variable one name it's\nmeaningless right so always use\nmeaningful names the fourth rule is that\nthey cannot contain a space or - so if\nyou have multiple words you need to put\nthem together here is an example let's\nimagine we want to declare a variable\ncalled first name so first name and note\nthat here I'm using camel notation so\nthe first letter of the first word\nshould be lowercase and the first letter\nof every word after should be uppercase\nthis is what we call camel notation\nwhich is the convention we use in\nJavaScript to name our variables another\nthing you need to know about these\nvariable names is\nthey are case-sensitive so if I declare\nanother variable call it first name but\nmake the F uppercase these two variables\nare different but as I told you before\nif you stick to camel notation you\nwouldn't end up with a variable name\nlike this and finally the last thing you\nneed to know about these variables is\nthat if you want to declare multiple\nvariables there are two ways to do this\nyou can declare them on one line and\nseparate them using a comma so first\nname and then last name now in this case\nI have not initialized either of these\nvariables they're both undefined I can\noptionally initialize one or both of\nthem so I can set this to Marsh and I\ncan leave last name undefined or set it\nto my last name Hammad on e but the\nmodern best practice is to declare each\nvariable on a single line so we\nterminate this first declaration with a\nsemicolon and declare the second\nvariable on a new line that's the modern\nbest practice next we're going to look\nat constants\nalright now let's declare a variable\ncalled interest rate so let interest\nrate and we set this to 0.3 now this is\nthe initial value we can always change\nthat later so we can set interest rate\nto let's say 1 now if you log this on\nthe console of course we're going to see\nthe new value right so save the changes\nand here's one on the console however in\na real-world application there are\nsituations that we don't want the value\nof a variable to change because\notherwise it's going to create all kinds\nof bugs in our application in those\nsituations instead of a variable we use\na constant so the value of a variable as\nthe name implies can change but the\nvalue of a constant cannot change so\nhere if we change let to Const now\ninterest rate will be a constant so when\nI save the changes you're going to see\nan error in the console on line 3 where\nwe reassign interest rate so let's have\na look\nsave the changes and here's the error\nuncut type error assignment 2 constant\nvariable we can see this error happen in\nindex dot JSP\nbut if you click here you can see the\nline in code where this error occurred\nso we cannot reassign a constant all\nright now back to the console so here's\nthe best practice if you don't need to\nreassign constant should be your default\nchoice otherwise if you need to reassign\na variable use let\nso you have learned how to declare and\ninitialize a variable now you might be\nwondering what are the kind of values\nthat we can assign to a variable well\nyou have seen strings but we have more\ntypes basically in JavaScript we have\ntwo categories of types on one side we\nhave primitives also called value types\nand the other types we have reference\ntypes in this lecture we're going to\nfocus on primitives and you're going to\nlearn about reference types later in the\ncourse now in the category of primitives\nwe have strings numbers bully ends\nundefined and not let's look at each of\nthese in action so here we have a\nvariable called name which is set to\nyour string what we have here is what we\ncall a string literal that's just a\nfancy name for a string now let's\ndeclare a variable and set it to a\nnumber so let H be set back to 30 and by\nthe way I'm not 30 years old but don't\ntell anyone okay\nso this is what we call a number litora\nnow let's declare a boolean a boolean\ncan be either true or false\nso let is a proved to be true this is\nwhat we call a boolean literal and we\nuse this in situations where we want to\nhave some logic for example if the order\nis approved then it needs to be shipped\nso the value of a boolean variable can\nbe true or false and by the way note\nthat both true and false are reserved\nkeywords so they cannot be variable\nnames ok now you have seen undefined\nbefore so I can declare another variable\nfirst name\nif we don't initialize it by default its\nvalue is undefined\nbut we can also explicitly set this to\nundefined but that's not very common in\ncontrast we have another keyword that is\nnot so let me declare another variable\nand set this to no we use null in\nsituations where we want to\nplease heed me clear the value of\nvariable for example you may want to\npresent the user with a list of colors\nif the user has no selection you want to\nset the selected color variable to know\nin the future if the user selects a\ncolor then we're going to reassign this\nvariable to a color like red and then if\nthey click red again perhaps we want to\nremove the selection so we set this back\ntool not so we use norm in situations\nwhere we want to clear the value of a\nvariable so these are the examples of\nprimitives or value types we have\nstrings numbers boolean's undefined and\nno now in es6 we have another primitive\nthat is symbol and you're going to learn\nabout that later in the course\none thing that separates JavaScript from\na lot of programming languages is that\njavascript is a dynamic language what do\nthey mean by dynamic well we have two\ntypes of programming languages\nstatic languages or dynamic languages in\nstatic languages when we declare a\nvariable the type of that variable is\nset and it cannot be changed in the\nfuture in a dynamic language like\nJavaScript the type of a variable can\nchange at runtime let's see this in code\nso back in the example from the last\nlecture we have declared this name\nvariable and we have set that to your\nstring so the type of name is currently\na string but it can change in the future\nlet's take a look so here in the console\nwe can execute some JavaScript code we\nhave this type of operator and with that\nwe can check the type of a variable so\nafter that we add the name of the\nvariable in this case our name variable\nso note that the type of name is a\nstring now if we reassign name to a\ndifferent value like a number and check\nits type look the type is now changed to\na number this is what we call a dynamic\nlanguage so unlike static languages the\ntype of these variables will be\ndetermined at runtime based on the\nvalues that we assigned to them now\nlet's take a look at a few more examples\nof the type of operator and by the way\nnote that type of is another reserved\nkeyword so you cannot have a variable\ncalled type off so we can clear the\nconsole by pressing ctrl + L so now\nlet's take a look at type of age it's a\nnumber now if you change age to a\nfloating-point number and I know it\ndoesn't make sense but let's just stick\nto this for this example thirty point\none and then look at type of age it's\nstill a number so in JavaScript unlike\nother programming languages we don't\nhave two kinds of numbers we don't have\nfloating-point numbers and integers all\nnumbers are of type number now let's\nlook at the type of he's approved it's a\nboolean as I told you before what about\nthe first name let's have a look type of\nfirst name it's undefined and that's\nfunny because the value of this variable\nis undefined\nbut this type is also undefined what\ndoes this mean well earlier I told you\nthat we have two categories of types we\nhave primitives or value types and\nreference types in the primitive types\ncategory we have strings numbers boolean\nundefined and no so undefined is\nactually a type but is also a value in\nthis example because we have set\nfirst-name to undefined as a value it's\ntype is also undefined okay now what\nabout selected color let's have a look\nso type of selected color the type of\nthis variable is an object what is an\nobject that's the topic for the next\nlecture\nso you have seen all the primitive types\nin JavaScript now let's take a look at\nthe reference types in the reference\ntypes category we have objects arrays\nand functions in this lecture we're\ngoing to explore objects and you will\nlearn about arrays and functions later\nin this section so what is an object an\nobject in JavaScript and other\nprogramming languages is like an object\nin real life think of a person a person\nhas name age address and so on these are\nthe properties of a person you have the\nsame concept in JavaScript so when we're\ndealing with multiple related variables\nwe can put these variables inside of an\nobject for example here we have two\nvariables name and age they're highly\nrelated they are part of the\nrepresentation of a person so instead of\ndeclaring two variables we can declare a\nperson object and then instead of\nreferencing these two different\nvariables we can just reference the\nperson object\nit makes our code cleaner so let's see\nhow we can declare a person object we\nstart with let or Const if we don't want\nto reassign the person object and set it\nto an object literal so this syntax we\nhave here these curly braces is what we\ncall an object literal now between these\ncurly braces we add one or more key\nvalue pairs so the keys are what we call\nthe properties of this object in this\ncase we want this person object to have\ntwo properties or two keys name and age\nso we add name here that's the key then\nwe add a colon and after that we set the\nvalue so maash now we add a comma and\nadd another key value pair age 30 so now\nwe have a person object with two\nproperties or two key value pairs name\nand age and with that we don't need\nthese two variables now this lock person\non the console\nso that log person save the changes so\nhere's our personal object again note\nthe object literal syntax so we have\ncurly braces and in between them we have\none or more key value pairs and these\nare the properties of the personal\nobject now there are two ways to work\nwith these properties let's say we want\nto change the name of this person so we\nneed to access the name property there\nare two ways the first way is what we\ncall the dot notation so we add the name\nof our object in this case person dot\nnow you can see its properties we have\nage and name so we can change the value\nof name to John now we can use the dot\nnotation to also read the value of a\nproperty so here on line 10 instead of\nlogin the person object we can log its\nname property save the changes and in\nthe console we get John the other way to\naccess a property is using bracket\nnotation so bracket notation so instead\nof dot we use square brackets and we\npass a string that determines the name\nof the target property so single or\ndouble quotes\nbut single quotes are more common the\nname of the target property is name so\nwe can change that to a same Mary again\nwhen reading that we can use the dot\nnotation or the bracket notation if we\nsave the changes now we get Mary on the\nconsole now you might be asking which\napproach is better dot notation or\nbracket notation well as you can see dot\nnotation is a bit more concise it's\nshorter so that should be your default\nchoice however bracket notation has its\nown users sometimes you don't know the\nname of the target property until the\nruntime for example in our user\ninterface the user might be selecting\nthe name of the target property in that\ncase at the time of writing code we\ndon't know what\nproperty we're going to access that is\ngoing to be selected at runtime by the\nuser so we might have another variable\nsomewhere else like selection that\ndetermines the name of the target\nproperty that the user is selecting and\nthat can change at runtime with this we\ncan access that property using the\nbracket notation in a dynamic way so we\npass selection here and we get the same\nresult okay now if this is confusing\ndon't worry you're going to see this\nagain in the future as you gain more\nexperience with JavaScript for now just\nstick to the dot notation because that's\ncleaner and easier next we're going to\nlook at arrays\nsometimes in your applications you might\nbe dealing with a list of objects for\nexample the list of products in a\nshopping cart or the list of colors the\nuser has selected in situations like\nthat you use an array to store that list\nlet me show you how so here I'm gonna\ndeclare another variable called selected\ncolors note that I'm using a meaningful\nname I don't have SC or some other weird\nname selected colors now we can\ninitialize this and set it to an empty\narray so these square brackets are what\nwe call array literal and they indicate\nan empty array now we can initialize\nthis array and add a couple of items\nlike red and blue let's Lock this on the\nconsole so console the log selected\ncolors save the changes so here's our\narray with two elements we can expand\nthat note that each element has an index\nand that determines the position of that\nelement in the array so the index of the\nfirst element is zero and the index of\nthe second element is one so if you want\nto access an element in an array we use\nthis index here's how for example let's\nsay you want to display the first\nelement in this array you use the square\nbrackets and then specify the index save\nthe changes and now we have red now\nearlier I told you that JavaScript is a\ndynamic language so the type of\nvariables can change at runtime the same\nprinciple applies to our arrays so the\nlengths of arrays as well as the type of\nobjects we have in an array are dynamic\nthey can change so aligned - we\ninitialize this array with two elements\nright now on line 3 we can add another\nelement to this array so the array will\nexpand so let's say selected colors of 2\nthat means the third item in this array\nis going to be green now let's display\nthis array on the console\nso we have an array with three elements\nso the length is dynamic it can change\nalso the type of objects we have in this\narray is dynamic so unlike other\nprogramming languages where every item\nor every object in the array should have\nthe same type in JavaScript we can store\ndifferent types in an array so we can\nmake the last element a number save the\nchanges now we have two strings and a\nnumber so the objects in the array as\nwell as the size of the array are\ndynamic now technically an array is an\nobject so just like the personal object\nwe defined in the last lecture it has a\nbunch of key value pairs or properties\nthat we can access using the dot\nnotation let me prove that to you so\nhere on the console let's look at the\ntype of selected colors so the type of\nthis array is an object so an array is\nan object in JavaScript so here on line\n4 we can look at the properties of this\narray or this object using the dot\nnotation look these are all the\nproperties defined in arrays in\nJavaScript so every time we declare an\narray using square brackets that array\nwill automatically receive these\nproperties we didn't explicitly define\nthem they're just somehow magically\ninherited from somewhere else we're\ngoing to learn about that later when we\ntalk about prototypes now in this\nlecture we're going to look at one of\nthese properties that is the length\nproperty this property returns the\nnumber of items or elements in an array\nso save the changes you can see we have\nthree elements in this array now later\nin the course we have a comprehensive\nsection about arrays you'll learn about\nall kinds of operations we can perform\non arrays for now all I want you to take\naway is that an array is a data\nstructure that we use to represent a\nlist of items\nin the category of reference types you\nhave learned about objects and arrays\nnow let's take a look at functions\nfunctions are one of the fundamental\nbuilding blocks in JavaScript a function\nis basically a set of statements that\nperforms a task or calculates a value\nlet me show you a couple of examples so\nI'm going to declare a function using\nthe function keyword now we need to give\nit a name let's call that greet after\nthat we need to add parentheses that's\npart of the syntax for declaring\nfunctions and then curly braces now what\nwe have here inside the curly braces is\nwhat we refer to as the body of this\nfunction and this is where we add all\nthese statements to define some kind of\nlogic in our application for example the\nlogic for this function should be to\ndisplay a message on the console so here\nwe can add console the log hello world\nnow note that here we have a statement\nso we terminated with a semicolon but\nwhen we are declaring a function we\ndon't need to add semicolon at the end\nbecause we are not declaring it like a\nvariable like this okay this is a\nfunction declaration right so now we\nhave a function we can call this\nfunction like this so we add the name of\nthe function and parentheses again and\nthen semicolon to indicate that this is\na statement save the changes now we have\nhello world on the console but that's\npretty boring what would we do this let\nme show you how to make this more\ninteresting our functions can have\ninputs and these inputs can change how\nthe function behaves so let's say\ninstead of displaying hello world we\nwant to display the name of the person\nhere like hello John so we can add a\nvariable here in between parentheses we\nrefer to this variable as a parameter\nso this greet function has one parameter\ncalled name and essentially name is like\na variable that is only meaningful\ninside\ndysfunction so inside of this function\nwe can work with this name variable but\nit will not be accessible outside of\nthis function the name is an input to\nthis function so instead of displaying\nhello world we can display hello\nthen add a plus here to concatenate two\nstrings so we can add name after now\nwhen calling the great function we need\nto pass a value for the name variable or\nname parameter more accurately so we can\npass John here now we refer to this as\nan argument so John is an argument to\nthe greet function a name is a parameter\nof the greet function it's one of the\nthings that a lot of programmers don't\nknow they don't know the difference\nbetween a parameter and an argument so a\nparameter is what we have here at the\ntime of declaration but the argument is\nthe actual value with supply for that\nparameter okay\nnow let's save the changes so we have\nhello John now we can reuse this\nfunction but with a different input so\nwe can copy this line here and change on\nto Mary save the changes now we have two\ndifferent messages on the console now a\nfunction can have multiple parameters so\nhere we can separate parameters using a\ncomma so let's add another parameter\nlike last name now we can change our\nconsole not blog add a space here and\nthen display the last name\nnow when calling this great function we\nshould pass another argument for the\nlast name right but let's see what\nhappens if we don't do this so I'm gonna\nsave the changes\nsee what we got hello John undefined\nbecause as I told you before the default\nvalue of variables in JavaScript is\nundefined so because we did not pass a\nvalue for the last name by default it's\nundefined so I'm gonna pass another\nargument here we separate them using a\ncomma John Smith\nand we don't need the second call to the\ngreet function save the changes now we\nhave hello John Smith\nnow there is a cleaner way to write this\ncode on line three\nall these concatenations are kind of\nugly they're getting in the way later in\nthe course I'll show you how to use\ntemplate literals to clean up this code\nfor now don't worry about it let's look\nat another example of a function so this\nfunction we have here is performing a\ntask so performing a task is task is to\ndisplay something on the console but\nsometimes our functions might calculate\nsomething so here is an example of a\nfunction that calculates a value so\nagain function let's call this function\nsquare this function should take a\nparameter let's call that number now we\nneed to calculate the square of that\nnumber that is number times number just\nbasic math right now we need to return\nthis value to whoever is calling this\nfunction for that we use the return\nkeyword that's another reserved keyword\nso you cannot have a variable called\nreturn okay now instead of calling the\ngreet function let's call the square\nfunction so square we pass two now this\nreturns a value so we can use that value\nto initialize a variable for example we\ncan declare another variable called\nnumber and set it to a square of 2 and\nthen we can display that on the console\nsave the changes so we get 4 now in this\nparticular example we don't necessarily\nhave to declare a separate variable if\nall we want to do is to display the\nsquare of 2 on the console we can\nexclude this variable declaration and\nsimply pass square of 2 to console.log\nso when the JavaScript engine execute\nthis code first is going to call this\nfunction it would get a value and then\npass that value to console dot lock\nlet's save the changes and look we still\nget 4 now I have a question for you how\nmany function calls do you think we have\nin this code we have to function costs\nsquare of two is one function call let\nme delete this temporarily but consult\nthat lock is also another function call\nright because here we have parentheses\nso recalling the log function which is\ndefined somewhere and passing an\nargument we can pass a simple string\nlike hello or we can pass an expression\nthat expression can be a call to another\nfunction like square of two okay so this\nis the basics of functions again later\nin the course we have a comprehensive\nsection about functions for now all I\nwant you to take away is that a function\nis a set of statements that either\nperforms a task or calculate and returns\na value a real world application is\nessentially a collection of hundreds or\nthousands of functions working together\nto provide the functionality of that\napplication\nhi there it's me mosh again you seem to\nbe very enthusiastic about learning\nJavaScript so I want to congratulate you\nfor your determination for learning if\nyou want to learn more from me I highly\nencourage you to enroll in my JavaScript\ncourse you can watch this course online\nor offline as many times as you want at\nyour own pace the course comes with\nplenty of exercises and solutions and\nyou will also receive a certificate of\ncompletion by the end of watching the\ncourse in case you're interested the\nlink is in the video description have a\ngreat day and I hope to see you in the\ncourse\n",
  "words": [
    "introduction",
    "going",
    "answer",
    "four",
    "frequently",
    "asked",
    "questions",
    "javascript",
    "javascript",
    "javascript",
    "code",
    "run",
    "difference",
    "javascript",
    "ecmascript",
    "let",
    "start",
    "first",
    "question",
    "javascript",
    "javascript",
    "one",
    "popular",
    "widely",
    "used",
    "programming",
    "languages",
    "world",
    "right",
    "growing",
    "faster",
    "programming",
    "languages",
    "big",
    "companies",
    "like",
    "netflix",
    "walmart",
    "paypal",
    "build",
    "entire",
    "applications",
    "around",
    "javascript",
    "average",
    "salary",
    "javascript",
    "developer",
    "united",
    "states",
    "year",
    "great",
    "opportunity",
    "get",
    "good",
    "job",
    "learning",
    "javascript",
    "work",
    "developer",
    "developer",
    "full",
    "stack",
    "developer",
    "knows",
    "front",
    "end",
    "back",
    "end",
    "second",
    "question",
    "javascript",
    "long",
    "time",
    "javascript",
    "used",
    "browsers",
    "build",
    "interactive",
    "web",
    "pages",
    "developers",
    "refer",
    "javascript",
    "toy",
    "language",
    "days",
    "gone",
    "huge",
    "community",
    "support",
    "investments",
    "large",
    "companies",
    "like",
    "facebook",
    "google",
    "days",
    "build",
    "web",
    "mobile",
    "apps",
    "well",
    "real",
    "time",
    "networking",
    "applications",
    "like",
    "chats",
    "video",
    "streaming",
    "services",
    "tools",
    "even",
    "games",
    "example",
    "third",
    "question",
    "javascript",
    "code",
    "run",
    "javascript",
    "originally",
    "designed",
    "run",
    "browsers",
    "every",
    "browser",
    "call",
    "javascript",
    "engine",
    "execute",
    "javascript",
    "code",
    "example",
    "javascript",
    "engines",
    "firefox",
    "chrome",
    "spidermonkey",
    "v8",
    "2009",
    "clever",
    "engineer",
    "called",
    "ryan",
    "dahl",
    "took",
    "javascript",
    "engine",
    "chrome",
    "embedded",
    "inside",
    "program",
    "called",
    "program",
    "node",
    "node",
    "program",
    "includes",
    "google",
    "v8",
    "javascript",
    "engine",
    "run",
    "javascript",
    "code",
    "browser",
    "pass",
    "javascript",
    "code",
    "node",
    "execution",
    "means",
    "javascript",
    "build",
    "backend",
    "web",
    "mobile",
    "applications",
    "nutshell",
    "javascript",
    "code",
    "run",
    "inside",
    "browser",
    "node",
    "browsers",
    "node",
    "provide",
    "runtime",
    "environment",
    "javascript",
    "code",
    "finally",
    "last",
    "question",
    "difference",
    "javascript",
    "eggman",
    "script",
    "well",
    "ecmo",
    "script",
    "specification",
    "javascript",
    "programming",
    "language",
    "confirms",
    "specification",
    "organization",
    "called",
    "comma",
    "responsible",
    "defining",
    "standards",
    "take",
    "care",
    "eggman",
    "script",
    "specification",
    "first",
    "version",
    "eggman",
    "script",
    "released",
    "1997",
    "starting",
    "2015",
    "acma",
    "working",
    "annual",
    "releases",
    "newest",
    "specification",
    "2015",
    "released",
    "kimono",
    "script",
    "2015",
    "also",
    "called",
    "ecmo",
    "script",
    "version",
    "6",
    "es6",
    "short",
    "specification",
    "defined",
    "many",
    "new",
    "features",
    "javascript",
    "alright",
    "enough",
    "theory",
    "let",
    "see",
    "javascript",
    "action",
    "every",
    "browser",
    "javascript",
    "engine",
    "easily",
    "write",
    "javascript",
    "code",
    "without",
    "additional",
    "tools",
    "course",
    "build",
    "applications",
    "quick",
    "demo",
    "open",
    "chrome",
    "right",
    "click",
    "empty",
    "area",
    "go",
    "inspect",
    "opens",
    "chrome",
    "developer",
    "tools",
    "select",
    "console",
    "tab",
    "javascript",
    "console",
    "write",
    "valid",
    "javascript",
    "code",
    "type",
    "console",
    "dot",
    "log",
    "put",
    "single",
    "code",
    "hello",
    "world",
    "another",
    "single",
    "code",
    "terminate",
    "close",
    "parentheses",
    "add",
    "semicolon",
    "end",
    "go",
    "course",
    "going",
    "understand",
    "exactly",
    "means",
    "worry",
    "press",
    "enter",
    "see",
    "hello",
    "world",
    "message",
    "console",
    "also",
    "write",
    "mathematical",
    "expressions",
    "example",
    "two",
    "plus",
    "two",
    "get",
    "four",
    "something",
    "like",
    "alert",
    "practices",
    "single",
    "coat",
    "yo",
    "enter",
    "alert",
    "next",
    "lecture",
    "going",
    "talk",
    "setting",
    "development",
    "environment",
    "writing",
    "javascript",
    "code",
    "order",
    "write",
    "javascript",
    "code",
    "need",
    "code",
    "editor",
    "various",
    "code",
    "editors",
    "including",
    "visual",
    "studio",
    "code",
    "yes",
    "code",
    "sublime",
    "text",
    "atom",
    "favorite",
    "visual",
    "studio",
    "code",
    "download",
    "code",
    "visual",
    "studio",
    "comm",
    "simple",
    "lightweight",
    "powerful",
    "editor",
    "visual",
    "studio",
    "code",
    "machine",
    "go",
    "ahead",
    "download",
    "thing",
    "wanted",
    "install",
    "note",
    "download",
    "note",
    "nodejs",
    "org",
    "technically",
    "necessarily",
    "need",
    "know",
    "execute",
    "javascript",
    "explained",
    "execute",
    "javascript",
    "code",
    "inside",
    "browser",
    "endnote",
    "good",
    "node",
    "machine",
    "use",
    "install",
    "libraries",
    "also",
    "later",
    "section",
    "going",
    "show",
    "preview",
    "node",
    "pause",
    "video",
    "download",
    "visual",
    "studio",
    "code",
    "well",
    "note",
    "done",
    "come",
    "back",
    "continue",
    "watching",
    "create",
    "new",
    "folder",
    "call",
    "j",
    "dash",
    "basics",
    "name",
    "really",
    "matter",
    "want",
    "folder",
    "writing",
    "code",
    "course",
    "drag",
    "drop",
    "folder",
    "visual",
    "studio",
    "code",
    "okay",
    "got",
    "folder",
    "open",
    "let",
    "add",
    "new",
    "file",
    "index",
    "dot",
    "html",
    "really",
    "need",
    "know",
    "html",
    "order",
    "take",
    "course",
    "want",
    "developer",
    "know",
    "html",
    "well",
    "file",
    "want",
    "type",
    "exclamation",
    "mark",
    "press",
    "tab",
    "generates",
    "basic",
    "html",
    "boilerplate",
    "really",
    "care",
    "code",
    "gon",
    "na",
    "use",
    "host",
    "javascript",
    "code",
    "gon",
    "na",
    "see",
    "next",
    "lecture",
    "save",
    "changes",
    "open",
    "extensions",
    "tab",
    "box",
    "search",
    "live",
    "server",
    "live",
    "server",
    "lightweight",
    "web",
    "server",
    "going",
    "use",
    "serve",
    "web",
    "application",
    "install",
    "restart",
    "visual",
    "studio",
    "code",
    "done",
    "go",
    "explorer",
    "tab",
    "right",
    "click",
    "select",
    "open",
    "live",
    "server",
    "open",
    "chrome",
    "default",
    "browser",
    "point",
    "address",
    "web",
    "application",
    "served",
    "currently",
    "empty",
    "page",
    "make",
    "sure",
    "everything",
    "working",
    "properly",
    "let",
    "go",
    "back",
    "visual",
    "studio",
    "code",
    "body",
    "section",
    "let",
    "add",
    "h1",
    "press",
    "tab",
    "type",
    "hello",
    "world",
    "save",
    "changes",
    "back",
    "browser",
    "see",
    "page",
    "refreshed",
    "automatically",
    "got",
    "hello",
    "world",
    "heading",
    "next",
    "lecture",
    "going",
    "write",
    "first",
    "javascript",
    "code",
    "right",
    "ready",
    "write",
    "first",
    "java",
    "script",
    "code",
    "order",
    "write",
    "javascript",
    "code",
    "need",
    "script",
    "element",
    "two",
    "places",
    "add",
    "script",
    "element",
    "add",
    "head",
    "section",
    "body",
    "section",
    "best",
    "practice",
    "put",
    "script",
    "element",
    "end",
    "body",
    "section",
    "existing",
    "elements",
    "h1",
    "gon",
    "na",
    "type",
    "script",
    "press",
    "tab",
    "script",
    "element",
    "say",
    "best",
    "practice",
    "put",
    "script",
    "element",
    "well",
    "two",
    "reasons",
    "one",
    "reason",
    "browser",
    "parses",
    "file",
    "top",
    "bottom",
    "put",
    "script",
    "element",
    "head",
    "section",
    "might",
    "lot",
    "javascript",
    "code",
    "browser",
    "may",
    "get",
    "busy",
    "parsing",
    "executing",
    "javascript",
    "code",
    "wo",
    "able",
    "render",
    "content",
    "page",
    "create",
    "bad",
    "user",
    "experience",
    "user",
    "looks",
    "web",
    "page",
    "white",
    "blank",
    "browser",
    "busy",
    "parsing",
    "executing",
    "javascript",
    "code",
    "reason",
    "1",
    "second",
    "reason",
    "almost",
    "always",
    "code",
    "script",
    "elements",
    "needs",
    "talk",
    "elements",
    "web",
    "page",
    "example",
    "may",
    "want",
    "show",
    "hide",
    "elements",
    "adding",
    "code",
    "end",
    "body",
    "section",
    "confident",
    "elements",
    "rendered",
    "browser",
    "exceptions",
    "rule",
    "sometimes",
    "using",
    "code",
    "placed",
    "head",
    "section",
    "exceptions",
    "told",
    "best",
    "practice",
    "add",
    "javascript",
    "code",
    "end",
    "body",
    "section",
    "gon",
    "na",
    "write",
    "code",
    "wrote",
    "last",
    "lecture",
    "console",
    "dot",
    "log",
    "hello",
    "world",
    "going",
    "talk",
    "little",
    "bit",
    "detail",
    "statement",
    "statement",
    "piece",
    "code",
    "expresses",
    "action",
    "carried",
    "case",
    "want",
    "log",
    "message",
    "console",
    "statements",
    "javascript",
    "terminated",
    "semicolon",
    "single",
    "codes",
    "called",
    "string",
    "string",
    "sequence",
    "characters",
    "javascript",
    "also",
    "notation",
    "add",
    "two",
    "slashes",
    "represents",
    "comet",
    "add",
    "description",
    "code",
    "description",
    "ignored",
    "javascript",
    "engine",
    "executed",
    "purely",
    "documenting",
    "code",
    "wan",
    "na",
    "explain",
    "developers",
    "written",
    "code",
    "way",
    "explain",
    "code",
    "clear",
    "code",
    "want",
    "write",
    "something",
    "like",
    "logging",
    "something",
    "console",
    "obvious",
    "code",
    "right",
    "instead",
    "want",
    "explain",
    "house",
    "demo",
    "gon",
    "na",
    "add",
    "simple",
    "comment",
    "first",
    "javascript",
    "code",
    "save",
    "changes",
    "back",
    "browser",
    "need",
    "bring",
    "console",
    "back",
    "right",
    "click",
    "somewhere",
    "go",
    "inspect",
    "alternatively",
    "use",
    "shortcut",
    "alt",
    "command",
    "eye",
    "mac",
    "alt",
    "control",
    "eye",
    "windows",
    "brings",
    "console",
    "tab",
    "console",
    "tab",
    "immediately",
    "visible",
    "make",
    "sure",
    "select",
    "see",
    "hello",
    "world",
    "message",
    "easily",
    "write",
    "javascript",
    "code",
    "script",
    "element",
    "application",
    "thousands",
    "even",
    "millions",
    "code",
    "want",
    "write",
    "code",
    "line",
    "want",
    "extract",
    "separate",
    "javascript",
    "code",
    "html",
    "code",
    "let",
    "give",
    "metaphor",
    "think",
    "house",
    "bedroom",
    "bed",
    "clothes",
    "store",
    "clothes",
    "kitchen",
    "call",
    "separation",
    "concerns",
    "principle",
    "programming",
    "want",
    "separate",
    "html",
    "content",
    "javascript",
    "behavior",
    "web",
    "page",
    "behave",
    "happen",
    "hover",
    "mouse",
    "given",
    "element",
    "maybe",
    "something",
    "pop",
    "maybe",
    "something",
    "hidden",
    "use",
    "javascript",
    "implement",
    "behavior",
    "open",
    "explorer",
    "window",
    "add",
    "new",
    "file",
    "cut",
    "index",
    "back",
    "index",
    "dot",
    "html",
    "cut",
    "javascript",
    "code",
    "paste",
    "index",
    "j",
    "simple",
    "application",
    "single",
    "file",
    "single",
    "javascript",
    "file",
    "real",
    "world",
    "application",
    "hundreds",
    "even",
    "thousands",
    "javascript",
    "files",
    "later",
    "course",
    "learn",
    "combine",
    "files",
    "bundle",
    "serve",
    "bundle",
    "client",
    "save",
    "changes",
    "back",
    "javascript",
    "code",
    "separate",
    "file",
    "need",
    "reference",
    "file",
    "let",
    "add",
    "attribute",
    "src",
    "short",
    "source",
    "set",
    "index",
    "tells",
    "browser",
    "javascript",
    "code",
    "index",
    "save",
    "changes",
    "back",
    "browser",
    "still",
    "see",
    "hello",
    "world",
    "message",
    "confirms",
    "code",
    "still",
    "working",
    "next",
    "lecture",
    "going",
    "execute",
    "code",
    "node",
    "last",
    "lecture",
    "executed",
    "piece",
    "javascript",
    "code",
    "inside",
    "browser",
    "lecture",
    "going",
    "show",
    "run",
    "code",
    "node",
    "assuming",
    "installed",
    "node",
    "machine",
    "head",
    "org",
    "download",
    "latest",
    "version",
    "node",
    "windows",
    "open",
    "command",
    "prompt",
    "mac",
    "open",
    "terminal",
    "head",
    "folder",
    "created",
    "earlier",
    "folder",
    "run",
    "node",
    "pass",
    "name",
    "javascript",
    "file",
    "index",
    "dot",
    "json",
    "c",
    "node",
    "program",
    "includes",
    "google",
    "v8",
    "javascript",
    "engine",
    "give",
    "piece",
    "javascript",
    "code",
    "execute",
    "code",
    "us",
    "like",
    "execute",
    "javascript",
    "code",
    "browser",
    "node",
    "runtime",
    "environment",
    "executing",
    "javascript",
    "code",
    "let",
    "show",
    "tip",
    "vs",
    "code",
    "integrated",
    "terminal",
    "gon",
    "na",
    "explicitly",
    "open",
    "separate",
    "terminal",
    "window",
    "top",
    "view",
    "menu",
    "look",
    "integrated",
    "terminal",
    "note",
    "shortcut",
    "shortcut",
    "mac",
    "windows",
    "gon",
    "na",
    "different",
    "shortcut",
    "select",
    "integrated",
    "terminal",
    "pointing",
    "folder",
    "created",
    "files",
    "explicitly",
    "navigate",
    "folder",
    "run",
    "node",
    "indexed",
    "well",
    "course",
    "gon",
    "na",
    "work",
    "node",
    "anymore",
    "node",
    "complex",
    "separate",
    "topic",
    "fact",
    "comprehensive",
    "course",
    "node",
    "14",
    "hours",
    "content",
    "finish",
    "course",
    "want",
    "learn",
    "node",
    "always",
    "look",
    "note",
    "course",
    "well",
    "hello",
    "mahshar",
    "thank",
    "watching",
    "javascript",
    "tutorial",
    "wanted",
    "quickly",
    "let",
    "know",
    "tutorial",
    "part",
    "complete",
    "javascript",
    "course",
    "learn",
    "essential",
    "concepts",
    "javascript",
    "course",
    "packed",
    "lots",
    "exercises",
    "solutions",
    "end",
    "watching",
    "course",
    "also",
    "receive",
    "certificate",
    "completion",
    "case",
    "interested",
    "find",
    "link",
    "video",
    "description",
    "perfectly",
    "fine",
    "continue",
    "watching",
    "next",
    "section",
    "coming",
    "let",
    "start",
    "section",
    "discussion",
    "variables",
    "one",
    "fundamental",
    "concepts",
    "javascript",
    "programming",
    "languages",
    "programming",
    "use",
    "variable",
    "store",
    "data",
    "temporarily",
    "computer",
    "memory",
    "store",
    "data",
    "somewhere",
    "give",
    "memory",
    "location",
    "name",
    "name",
    "read",
    "data",
    "given",
    "location",
    "future",
    "metaphor",
    "think",
    "boxes",
    "use",
    "organize",
    "stuff",
    "put",
    "stuff",
    "various",
    "boxes",
    "put",
    "label",
    "box",
    "easily",
    "find",
    "stuff",
    "right",
    "variable",
    "like",
    "box",
    "put",
    "inside",
    "box",
    "value",
    "assign",
    "variable",
    "data",
    "label",
    "put",
    "box",
    "name",
    "variable",
    "let",
    "see",
    "code",
    "index",
    "jas",
    "gon",
    "na",
    "declare",
    "variable",
    "previously",
    "old",
    "days",
    "es6",
    "use",
    "var",
    "keyword",
    "declare",
    "variable",
    "issues",
    "var",
    "find",
    "later",
    "course",
    "going",
    "forward",
    "es6",
    "best",
    "practice",
    "use",
    "lead",
    "keyword",
    "declare",
    "variable",
    "need",
    "give",
    "variable",
    "name",
    "identifier",
    "like",
    "label",
    "put",
    "box",
    "gon",
    "na",
    "call",
    "name",
    "finally",
    "need",
    "terminate",
    "declaration",
    "semicolon",
    "let",
    "log",
    "console",
    "see",
    "get",
    "console",
    "log",
    "name",
    "need",
    "terminate",
    "statement",
    "semicolon",
    "save",
    "changes",
    "console",
    "see",
    "undefined",
    "default",
    "variables",
    "defined",
    "javascript",
    "value",
    "undefined",
    "optionally",
    "initialize",
    "variable",
    "gon",
    "na",
    "set",
    "string",
    "sequence",
    "characters",
    "like",
    "marsh",
    "note",
    "using",
    "single",
    "quote",
    "also",
    "use",
    "double",
    "quotes",
    "different",
    "developers",
    "different",
    "preferences",
    "common",
    "use",
    "single",
    "quotes",
    "declaring",
    "strings",
    "javascript",
    "save",
    "changes",
    "instead",
    "one",
    "see",
    "marsh",
    "console",
    "example",
    "declared",
    "variable",
    "called",
    "name",
    "set",
    "value",
    "string",
    "rules",
    "naming",
    "variables",
    "rules",
    "first",
    "reserved",
    "keyword",
    "javascript",
    "reserved",
    "keywords",
    "let",
    "one",
    "also",
    "else",
    "var",
    "memorize",
    "list",
    "try",
    "use",
    "one",
    "names",
    "gon",
    "na",
    "get",
    "error",
    "example",
    "change",
    "notice",
    "red",
    "underline",
    "indicating",
    "valid",
    "identifier",
    "okay",
    "revert",
    "back",
    "second",
    "rule",
    "meaningful",
    "want",
    "meaningful",
    "names",
    "like",
    "meaningful",
    "labels",
    "seen",
    "developers",
    "using",
    "names",
    "like",
    "pe",
    "one",
    "know",
    "x",
    "variable",
    "names",
    "give",
    "us",
    "clue",
    "purpose",
    "variables",
    "kind",
    "data",
    "restoring",
    "memory",
    "location",
    "always",
    "use",
    "meaningful",
    "descriptive",
    "names",
    "okay",
    "back",
    "name",
    "third",
    "rule",
    "start",
    "number",
    "variable",
    "like",
    "one",
    "name",
    "going",
    "back",
    "second",
    "rule",
    "would",
    "want",
    "call",
    "variable",
    "one",
    "name",
    "meaningless",
    "right",
    "always",
    "use",
    "meaningful",
    "names",
    "fourth",
    "rule",
    "contain",
    "space",
    "multiple",
    "words",
    "need",
    "put",
    "together",
    "example",
    "let",
    "imagine",
    "want",
    "declare",
    "variable",
    "called",
    "first",
    "name",
    "first",
    "name",
    "note",
    "using",
    "camel",
    "notation",
    "first",
    "letter",
    "first",
    "word",
    "lowercase",
    "first",
    "letter",
    "every",
    "word",
    "uppercase",
    "call",
    "camel",
    "notation",
    "convention",
    "use",
    "javascript",
    "name",
    "variables",
    "another",
    "thing",
    "need",
    "know",
    "variable",
    "names",
    "declare",
    "another",
    "variable",
    "call",
    "first",
    "name",
    "make",
    "f",
    "uppercase",
    "two",
    "variables",
    "different",
    "told",
    "stick",
    "camel",
    "notation",
    "would",
    "end",
    "variable",
    "name",
    "like",
    "finally",
    "last",
    "thing",
    "need",
    "know",
    "variables",
    "want",
    "declare",
    "multiple",
    "variables",
    "two",
    "ways",
    "declare",
    "one",
    "line",
    "separate",
    "using",
    "comma",
    "first",
    "name",
    "last",
    "name",
    "case",
    "initialized",
    "either",
    "variables",
    "undefined",
    "optionally",
    "initialize",
    "one",
    "set",
    "marsh",
    "leave",
    "last",
    "name",
    "undefined",
    "set",
    "last",
    "name",
    "hammad",
    "e",
    "modern",
    "best",
    "practice",
    "declare",
    "variable",
    "single",
    "line",
    "terminate",
    "first",
    "declaration",
    "semicolon",
    "declare",
    "second",
    "variable",
    "new",
    "line",
    "modern",
    "best",
    "practice",
    "next",
    "going",
    "look",
    "constants",
    "alright",
    "let",
    "declare",
    "variable",
    "called",
    "interest",
    "rate",
    "let",
    "interest",
    "rate",
    "set",
    "initial",
    "value",
    "always",
    "change",
    "later",
    "set",
    "interest",
    "rate",
    "let",
    "say",
    "1",
    "log",
    "console",
    "course",
    "going",
    "see",
    "new",
    "value",
    "right",
    "save",
    "changes",
    "one",
    "console",
    "however",
    "application",
    "situations",
    "want",
    "value",
    "variable",
    "change",
    "otherwise",
    "going",
    "create",
    "kinds",
    "bugs",
    "application",
    "situations",
    "instead",
    "variable",
    "use",
    "constant",
    "value",
    "variable",
    "name",
    "implies",
    "change",
    "value",
    "constant",
    "change",
    "change",
    "let",
    "const",
    "interest",
    "rate",
    "constant",
    "save",
    "changes",
    "going",
    "see",
    "error",
    "console",
    "line",
    "3",
    "reassign",
    "interest",
    "rate",
    "let",
    "look",
    "save",
    "changes",
    "error",
    "uncut",
    "type",
    "error",
    "assignment",
    "2",
    "constant",
    "variable",
    "see",
    "error",
    "happen",
    "index",
    "dot",
    "jsp",
    "click",
    "see",
    "line",
    "code",
    "error",
    "occurred",
    "reassign",
    "constant",
    "right",
    "back",
    "console",
    "best",
    "practice",
    "need",
    "reassign",
    "constant",
    "default",
    "choice",
    "otherwise",
    "need",
    "reassign",
    "variable",
    "use",
    "let",
    "learned",
    "declare",
    "initialize",
    "variable",
    "might",
    "wondering",
    "kind",
    "values",
    "assign",
    "variable",
    "well",
    "seen",
    "strings",
    "types",
    "basically",
    "javascript",
    "two",
    "categories",
    "types",
    "one",
    "side",
    "primitives",
    "also",
    "called",
    "value",
    "types",
    "types",
    "reference",
    "types",
    "lecture",
    "going",
    "focus",
    "primitives",
    "going",
    "learn",
    "reference",
    "types",
    "later",
    "course",
    "category",
    "primitives",
    "strings",
    "numbers",
    "bully",
    "ends",
    "undefined",
    "let",
    "look",
    "action",
    "variable",
    "called",
    "name",
    "set",
    "string",
    "call",
    "string",
    "literal",
    "fancy",
    "name",
    "string",
    "let",
    "declare",
    "variable",
    "set",
    "number",
    "let",
    "h",
    "set",
    "back",
    "30",
    "way",
    "30",
    "years",
    "old",
    "tell",
    "anyone",
    "okay",
    "call",
    "number",
    "litora",
    "let",
    "declare",
    "boolean",
    "boolean",
    "either",
    "true",
    "false",
    "let",
    "proved",
    "true",
    "call",
    "boolean",
    "literal",
    "use",
    "situations",
    "want",
    "logic",
    "example",
    "order",
    "approved",
    "needs",
    "shipped",
    "value",
    "boolean",
    "variable",
    "true",
    "false",
    "way",
    "note",
    "true",
    "false",
    "reserved",
    "keywords",
    "variable",
    "names",
    "ok",
    "seen",
    "undefined",
    "declare",
    "another",
    "variable",
    "first",
    "name",
    "initialize",
    "default",
    "value",
    "undefined",
    "also",
    "explicitly",
    "set",
    "undefined",
    "common",
    "contrast",
    "another",
    "keyword",
    "let",
    "declare",
    "another",
    "variable",
    "set",
    "use",
    "null",
    "situations",
    "want",
    "please",
    "heed",
    "clear",
    "value",
    "variable",
    "example",
    "may",
    "want",
    "present",
    "user",
    "list",
    "colors",
    "user",
    "selection",
    "want",
    "set",
    "selected",
    "color",
    "variable",
    "know",
    "future",
    "user",
    "selects",
    "color",
    "going",
    "reassign",
    "variable",
    "color",
    "like",
    "red",
    "click",
    "red",
    "perhaps",
    "want",
    "remove",
    "selection",
    "set",
    "back",
    "tool",
    "use",
    "norm",
    "situations",
    "want",
    "clear",
    "value",
    "variable",
    "examples",
    "primitives",
    "value",
    "types",
    "strings",
    "numbers",
    "boolean",
    "undefined",
    "es6",
    "another",
    "primitive",
    "symbol",
    "going",
    "learn",
    "later",
    "course",
    "one",
    "thing",
    "separates",
    "javascript",
    "lot",
    "programming",
    "languages",
    "javascript",
    "dynamic",
    "language",
    "mean",
    "dynamic",
    "well",
    "two",
    "types",
    "programming",
    "languages",
    "static",
    "languages",
    "dynamic",
    "languages",
    "static",
    "languages",
    "declare",
    "variable",
    "type",
    "variable",
    "set",
    "changed",
    "future",
    "dynamic",
    "language",
    "like",
    "javascript",
    "type",
    "variable",
    "change",
    "runtime",
    "let",
    "see",
    "code",
    "back",
    "example",
    "last",
    "lecture",
    "declared",
    "name",
    "variable",
    "set",
    "string",
    "type",
    "name",
    "currently",
    "string",
    "change",
    "future",
    "let",
    "take",
    "look",
    "console",
    "execute",
    "javascript",
    "code",
    "type",
    "operator",
    "check",
    "type",
    "variable",
    "add",
    "name",
    "variable",
    "case",
    "name",
    "variable",
    "note",
    "type",
    "name",
    "string",
    "reassign",
    "name",
    "different",
    "value",
    "like",
    "number",
    "check",
    "type",
    "look",
    "type",
    "changed",
    "number",
    "call",
    "dynamic",
    "language",
    "unlike",
    "static",
    "languages",
    "type",
    "variables",
    "determined",
    "runtime",
    "based",
    "values",
    "assigned",
    "let",
    "take",
    "look",
    "examples",
    "type",
    "operator",
    "way",
    "note",
    "type",
    "another",
    "reserved",
    "keyword",
    "variable",
    "called",
    "type",
    "clear",
    "console",
    "pressing",
    "ctrl",
    "l",
    "let",
    "take",
    "look",
    "type",
    "age",
    "number",
    "change",
    "age",
    "number",
    "know",
    "make",
    "sense",
    "let",
    "stick",
    "example",
    "thirty",
    "point",
    "one",
    "look",
    "type",
    "age",
    "still",
    "number",
    "javascript",
    "unlike",
    "programming",
    "languages",
    "two",
    "kinds",
    "numbers",
    "numbers",
    "integers",
    "numbers",
    "type",
    "number",
    "let",
    "look",
    "type",
    "approved",
    "boolean",
    "told",
    "first",
    "name",
    "let",
    "look",
    "type",
    "first",
    "name",
    "undefined",
    "funny",
    "value",
    "variable",
    "undefined",
    "type",
    "also",
    "undefined",
    "mean",
    "well",
    "earlier",
    "told",
    "two",
    "categories",
    "types",
    "primitives",
    "value",
    "types",
    "reference",
    "types",
    "primitive",
    "types",
    "category",
    "strings",
    "numbers",
    "boolean",
    "undefined",
    "undefined",
    "actually",
    "type",
    "also",
    "value",
    "example",
    "set",
    "undefined",
    "value",
    "type",
    "also",
    "undefined",
    "okay",
    "selected",
    "color",
    "let",
    "look",
    "type",
    "selected",
    "color",
    "type",
    "variable",
    "object",
    "object",
    "topic",
    "next",
    "lecture",
    "seen",
    "primitive",
    "types",
    "javascript",
    "let",
    "take",
    "look",
    "reference",
    "types",
    "reference",
    "types",
    "category",
    "objects",
    "arrays",
    "functions",
    "lecture",
    "going",
    "explore",
    "objects",
    "learn",
    "arrays",
    "functions",
    "later",
    "section",
    "object",
    "object",
    "javascript",
    "programming",
    "languages",
    "like",
    "object",
    "real",
    "life",
    "think",
    "person",
    "person",
    "name",
    "age",
    "address",
    "properties",
    "person",
    "concept",
    "javascript",
    "dealing",
    "multiple",
    "related",
    "variables",
    "put",
    "variables",
    "inside",
    "object",
    "example",
    "two",
    "variables",
    "name",
    "age",
    "highly",
    "related",
    "part",
    "representation",
    "person",
    "instead",
    "declaring",
    "two",
    "variables",
    "declare",
    "person",
    "object",
    "instead",
    "referencing",
    "two",
    "different",
    "variables",
    "reference",
    "person",
    "object",
    "makes",
    "code",
    "cleaner",
    "let",
    "see",
    "declare",
    "person",
    "object",
    "start",
    "let",
    "const",
    "want",
    "reassign",
    "person",
    "object",
    "set",
    "object",
    "literal",
    "syntax",
    "curly",
    "braces",
    "call",
    "object",
    "literal",
    "curly",
    "braces",
    "add",
    "one",
    "key",
    "value",
    "pairs",
    "keys",
    "call",
    "properties",
    "object",
    "case",
    "want",
    "person",
    "object",
    "two",
    "properties",
    "two",
    "keys",
    "name",
    "age",
    "add",
    "name",
    "key",
    "add",
    "colon",
    "set",
    "value",
    "maash",
    "add",
    "comma",
    "add",
    "another",
    "key",
    "value",
    "pair",
    "age",
    "30",
    "person",
    "object",
    "two",
    "properties",
    "two",
    "key",
    "value",
    "pairs",
    "name",
    "age",
    "need",
    "two",
    "variables",
    "lock",
    "person",
    "console",
    "log",
    "person",
    "save",
    "changes",
    "personal",
    "object",
    "note",
    "object",
    "literal",
    "syntax",
    "curly",
    "braces",
    "one",
    "key",
    "value",
    "pairs",
    "properties",
    "personal",
    "object",
    "two",
    "ways",
    "work",
    "properties",
    "let",
    "say",
    "want",
    "change",
    "name",
    "person",
    "need",
    "access",
    "name",
    "property",
    "two",
    "ways",
    "first",
    "way",
    "call",
    "dot",
    "notation",
    "add",
    "name",
    "object",
    "case",
    "person",
    "dot",
    "see",
    "properties",
    "age",
    "name",
    "change",
    "value",
    "name",
    "john",
    "use",
    "dot",
    "notation",
    "also",
    "read",
    "value",
    "property",
    "line",
    "10",
    "instead",
    "login",
    "person",
    "object",
    "log",
    "name",
    "property",
    "save",
    "changes",
    "console",
    "get",
    "john",
    "way",
    "access",
    "property",
    "using",
    "bracket",
    "notation",
    "bracket",
    "notation",
    "instead",
    "dot",
    "use",
    "square",
    "brackets",
    "pass",
    "string",
    "determines",
    "name",
    "target",
    "property",
    "single",
    "double",
    "quotes",
    "single",
    "quotes",
    "common",
    "name",
    "target",
    "property",
    "name",
    "change",
    "mary",
    "reading",
    "use",
    "dot",
    "notation",
    "bracket",
    "notation",
    "save",
    "changes",
    "get",
    "mary",
    "console",
    "might",
    "asking",
    "approach",
    "better",
    "dot",
    "notation",
    "bracket",
    "notation",
    "well",
    "see",
    "dot",
    "notation",
    "bit",
    "concise",
    "shorter",
    "default",
    "choice",
    "however",
    "bracket",
    "notation",
    "users",
    "sometimes",
    "know",
    "name",
    "target",
    "property",
    "runtime",
    "example",
    "user",
    "interface",
    "user",
    "might",
    "selecting",
    "name",
    "target",
    "property",
    "case",
    "time",
    "writing",
    "code",
    "know",
    "property",
    "going",
    "access",
    "going",
    "selected",
    "runtime",
    "user",
    "might",
    "another",
    "variable",
    "somewhere",
    "else",
    "like",
    "selection",
    "determines",
    "name",
    "target",
    "property",
    "user",
    "selecting",
    "change",
    "runtime",
    "access",
    "property",
    "using",
    "bracket",
    "notation",
    "dynamic",
    "way",
    "pass",
    "selection",
    "get",
    "result",
    "okay",
    "confusing",
    "worry",
    "going",
    "see",
    "future",
    "gain",
    "experience",
    "javascript",
    "stick",
    "dot",
    "notation",
    "cleaner",
    "easier",
    "next",
    "going",
    "look",
    "arrays",
    "sometimes",
    "applications",
    "might",
    "dealing",
    "list",
    "objects",
    "example",
    "list",
    "products",
    "shopping",
    "cart",
    "list",
    "colors",
    "user",
    "selected",
    "situations",
    "like",
    "use",
    "array",
    "store",
    "list",
    "let",
    "show",
    "gon",
    "na",
    "declare",
    "another",
    "variable",
    "called",
    "selected",
    "colors",
    "note",
    "using",
    "meaningful",
    "name",
    "sc",
    "weird",
    "name",
    "selected",
    "colors",
    "initialize",
    "set",
    "empty",
    "array",
    "square",
    "brackets",
    "call",
    "array",
    "literal",
    "indicate",
    "empty",
    "array",
    "initialize",
    "array",
    "add",
    "couple",
    "items",
    "like",
    "red",
    "blue",
    "let",
    "lock",
    "console",
    "console",
    "log",
    "selected",
    "colors",
    "save",
    "changes",
    "array",
    "two",
    "elements",
    "expand",
    "note",
    "element",
    "index",
    "determines",
    "position",
    "element",
    "array",
    "index",
    "first",
    "element",
    "zero",
    "index",
    "second",
    "element",
    "one",
    "want",
    "access",
    "element",
    "array",
    "use",
    "index",
    "example",
    "let",
    "say",
    "want",
    "display",
    "first",
    "element",
    "array",
    "use",
    "square",
    "brackets",
    "specify",
    "index",
    "save",
    "changes",
    "red",
    "earlier",
    "told",
    "javascript",
    "dynamic",
    "language",
    "type",
    "variables",
    "change",
    "runtime",
    "principle",
    "applies",
    "arrays",
    "lengths",
    "arrays",
    "well",
    "type",
    "objects",
    "array",
    "dynamic",
    "change",
    "aligned",
    "initialize",
    "array",
    "two",
    "elements",
    "right",
    "line",
    "3",
    "add",
    "another",
    "element",
    "array",
    "array",
    "expand",
    "let",
    "say",
    "selected",
    "colors",
    "2",
    "means",
    "third",
    "item",
    "array",
    "going",
    "green",
    "let",
    "display",
    "array",
    "console",
    "array",
    "three",
    "elements",
    "length",
    "dynamic",
    "change",
    "also",
    "type",
    "objects",
    "array",
    "dynamic",
    "unlike",
    "programming",
    "languages",
    "every",
    "item",
    "every",
    "object",
    "array",
    "type",
    "javascript",
    "store",
    "different",
    "types",
    "array",
    "make",
    "last",
    "element",
    "number",
    "save",
    "changes",
    "two",
    "strings",
    "number",
    "objects",
    "array",
    "well",
    "size",
    "array",
    "dynamic",
    "technically",
    "array",
    "object",
    "like",
    "personal",
    "object",
    "defined",
    "last",
    "lecture",
    "bunch",
    "key",
    "value",
    "pairs",
    "properties",
    "access",
    "using",
    "dot",
    "notation",
    "let",
    "prove",
    "console",
    "let",
    "look",
    "type",
    "selected",
    "colors",
    "type",
    "array",
    "object",
    "array",
    "object",
    "javascript",
    "line",
    "4",
    "look",
    "properties",
    "array",
    "object",
    "using",
    "dot",
    "notation",
    "look",
    "properties",
    "defined",
    "arrays",
    "javascript",
    "every",
    "time",
    "declare",
    "array",
    "using",
    "square",
    "brackets",
    "array",
    "automatically",
    "receive",
    "properties",
    "explicitly",
    "define",
    "somehow",
    "magically",
    "inherited",
    "somewhere",
    "else",
    "going",
    "learn",
    "later",
    "talk",
    "prototypes",
    "lecture",
    "going",
    "look",
    "one",
    "properties",
    "length",
    "property",
    "property",
    "returns",
    "number",
    "items",
    "elements",
    "array",
    "save",
    "changes",
    "see",
    "three",
    "elements",
    "array",
    "later",
    "course",
    "comprehensive",
    "section",
    "arrays",
    "learn",
    "kinds",
    "operations",
    "perform",
    "arrays",
    "want",
    "take",
    "away",
    "array",
    "data",
    "structure",
    "use",
    "represent",
    "list",
    "items",
    "category",
    "reference",
    "types",
    "learned",
    "objects",
    "arrays",
    "let",
    "take",
    "look",
    "functions",
    "functions",
    "one",
    "fundamental",
    "building",
    "blocks",
    "javascript",
    "function",
    "basically",
    "set",
    "statements",
    "performs",
    "task",
    "calculates",
    "value",
    "let",
    "show",
    "couple",
    "examples",
    "going",
    "declare",
    "function",
    "using",
    "function",
    "keyword",
    "need",
    "give",
    "name",
    "let",
    "call",
    "greet",
    "need",
    "add",
    "parentheses",
    "part",
    "syntax",
    "declaring",
    "functions",
    "curly",
    "braces",
    "inside",
    "curly",
    "braces",
    "refer",
    "body",
    "function",
    "add",
    "statements",
    "define",
    "kind",
    "logic",
    "application",
    "example",
    "logic",
    "function",
    "display",
    "message",
    "console",
    "add",
    "console",
    "log",
    "hello",
    "world",
    "note",
    "statement",
    "terminated",
    "semicolon",
    "declaring",
    "function",
    "need",
    "add",
    "semicolon",
    "end",
    "declaring",
    "like",
    "variable",
    "like",
    "okay",
    "function",
    "declaration",
    "right",
    "function",
    "call",
    "function",
    "like",
    "add",
    "name",
    "function",
    "parentheses",
    "semicolon",
    "indicate",
    "statement",
    "save",
    "changes",
    "hello",
    "world",
    "console",
    "pretty",
    "boring",
    "would",
    "let",
    "show",
    "make",
    "interesting",
    "functions",
    "inputs",
    "inputs",
    "change",
    "function",
    "behaves",
    "let",
    "say",
    "instead",
    "displaying",
    "hello",
    "world",
    "want",
    "display",
    "name",
    "person",
    "like",
    "hello",
    "john",
    "add",
    "variable",
    "parentheses",
    "refer",
    "variable",
    "parameter",
    "greet",
    "function",
    "one",
    "parameter",
    "called",
    "name",
    "essentially",
    "name",
    "like",
    "variable",
    "meaningful",
    "inside",
    "dysfunction",
    "inside",
    "function",
    "work",
    "name",
    "variable",
    "accessible",
    "outside",
    "function",
    "name",
    "input",
    "function",
    "instead",
    "displaying",
    "hello",
    "world",
    "display",
    "hello",
    "add",
    "plus",
    "concatenate",
    "two",
    "strings",
    "add",
    "name",
    "calling",
    "great",
    "function",
    "need",
    "pass",
    "value",
    "name",
    "variable",
    "name",
    "parameter",
    "accurately",
    "pass",
    "john",
    "refer",
    "argument",
    "john",
    "argument",
    "greet",
    "function",
    "name",
    "parameter",
    "greet",
    "function",
    "one",
    "things",
    "lot",
    "programmers",
    "know",
    "know",
    "difference",
    "parameter",
    "argument",
    "parameter",
    "time",
    "declaration",
    "argument",
    "actual",
    "value",
    "supply",
    "parameter",
    "okay",
    "let",
    "save",
    "changes",
    "hello",
    "john",
    "reuse",
    "function",
    "different",
    "input",
    "copy",
    "line",
    "change",
    "mary",
    "save",
    "changes",
    "two",
    "different",
    "messages",
    "console",
    "function",
    "multiple",
    "parameters",
    "separate",
    "parameters",
    "using",
    "comma",
    "let",
    "add",
    "another",
    "parameter",
    "like",
    "last",
    "name",
    "change",
    "console",
    "blog",
    "add",
    "space",
    "display",
    "last",
    "name",
    "calling",
    "great",
    "function",
    "pass",
    "another",
    "argument",
    "last",
    "name",
    "right",
    "let",
    "see",
    "happens",
    "gon",
    "na",
    "save",
    "changes",
    "see",
    "got",
    "hello",
    "john",
    "undefined",
    "told",
    "default",
    "value",
    "variables",
    "javascript",
    "undefined",
    "pass",
    "value",
    "last",
    "name",
    "default",
    "undefined",
    "gon",
    "na",
    "pass",
    "another",
    "argument",
    "separate",
    "using",
    "comma",
    "john",
    "smith",
    "need",
    "second",
    "call",
    "greet",
    "function",
    "save",
    "changes",
    "hello",
    "john",
    "smith",
    "cleaner",
    "way",
    "write",
    "code",
    "line",
    "three",
    "concatenations",
    "kind",
    "ugly",
    "getting",
    "way",
    "later",
    "course",
    "show",
    "use",
    "template",
    "literals",
    "clean",
    "code",
    "worry",
    "let",
    "look",
    "another",
    "example",
    "function",
    "function",
    "performing",
    "task",
    "performing",
    "task",
    "task",
    "display",
    "something",
    "console",
    "sometimes",
    "functions",
    "might",
    "calculate",
    "something",
    "example",
    "function",
    "calculates",
    "value",
    "function",
    "let",
    "call",
    "function",
    "square",
    "function",
    "take",
    "parameter",
    "let",
    "call",
    "number",
    "need",
    "calculate",
    "square",
    "number",
    "number",
    "times",
    "number",
    "basic",
    "math",
    "right",
    "need",
    "return",
    "value",
    "whoever",
    "calling",
    "function",
    "use",
    "return",
    "keyword",
    "another",
    "reserved",
    "keyword",
    "variable",
    "called",
    "return",
    "okay",
    "instead",
    "calling",
    "greet",
    "function",
    "let",
    "call",
    "square",
    "function",
    "square",
    "pass",
    "two",
    "returns",
    "value",
    "use",
    "value",
    "initialize",
    "variable",
    "example",
    "declare",
    "another",
    "variable",
    "called",
    "number",
    "set",
    "square",
    "2",
    "display",
    "console",
    "save",
    "changes",
    "get",
    "4",
    "particular",
    "example",
    "necessarily",
    "declare",
    "separate",
    "variable",
    "want",
    "display",
    "square",
    "2",
    "console",
    "exclude",
    "variable",
    "declaration",
    "simply",
    "pass",
    "square",
    "2",
    "javascript",
    "engine",
    "execute",
    "code",
    "first",
    "going",
    "call",
    "function",
    "would",
    "get",
    "value",
    "pass",
    "value",
    "console",
    "dot",
    "lock",
    "let",
    "save",
    "changes",
    "look",
    "still",
    "get",
    "4",
    "question",
    "many",
    "function",
    "calls",
    "think",
    "code",
    "function",
    "costs",
    "square",
    "two",
    "one",
    "function",
    "call",
    "let",
    "delete",
    "temporarily",
    "consult",
    "lock",
    "also",
    "another",
    "function",
    "call",
    "right",
    "parentheses",
    "recalling",
    "log",
    "function",
    "defined",
    "somewhere",
    "passing",
    "argument",
    "pass",
    "simple",
    "string",
    "like",
    "hello",
    "pass",
    "expression",
    "expression",
    "call",
    "another",
    "function",
    "like",
    "square",
    "two",
    "okay",
    "basics",
    "functions",
    "later",
    "course",
    "comprehensive",
    "section",
    "functions",
    "want",
    "take",
    "away",
    "function",
    "set",
    "statements",
    "either",
    "performs",
    "task",
    "calculate",
    "returns",
    "value",
    "real",
    "world",
    "application",
    "essentially",
    "collection",
    "hundreds",
    "thousands",
    "functions",
    "working",
    "together",
    "provide",
    "functionality",
    "application",
    "hi",
    "mosh",
    "seem",
    "enthusiastic",
    "learning",
    "javascript",
    "want",
    "congratulate",
    "determination",
    "learning",
    "want",
    "learn",
    "highly",
    "encourage",
    "enroll",
    "javascript",
    "course",
    "watch",
    "course",
    "online",
    "offline",
    "many",
    "times",
    "want",
    "pace",
    "course",
    "comes",
    "plenty",
    "exercises",
    "solutions",
    "also",
    "receive",
    "certificate",
    "completion",
    "end",
    "watching",
    "course",
    "case",
    "interested",
    "link",
    "video",
    "description",
    "great",
    "day",
    "hope",
    "see",
    "course"
  ],
  "keywords": [
    "going",
    "javascript",
    "code",
    "run",
    "let",
    "first",
    "question",
    "one",
    "programming",
    "languages",
    "world",
    "right",
    "like",
    "build",
    "applications",
    "developer",
    "get",
    "end",
    "back",
    "second",
    "time",
    "web",
    "language",
    "well",
    "example",
    "every",
    "browser",
    "call",
    "engine",
    "execute",
    "chrome",
    "called",
    "inside",
    "node",
    "pass",
    "runtime",
    "last",
    "script",
    "specification",
    "comma",
    "take",
    "also",
    "defined",
    "new",
    "see",
    "write",
    "course",
    "open",
    "click",
    "go",
    "console",
    "tab",
    "type",
    "dot",
    "log",
    "put",
    "single",
    "hello",
    "another",
    "parentheses",
    "add",
    "semicolon",
    "message",
    "two",
    "something",
    "next",
    "lecture",
    "need",
    "visual",
    "studio",
    "download",
    "note",
    "know",
    "use",
    "later",
    "section",
    "show",
    "watching",
    "folder",
    "name",
    "want",
    "okay",
    "file",
    "index",
    "html",
    "gon",
    "na",
    "save",
    "changes",
    "box",
    "application",
    "default",
    "page",
    "make",
    "body",
    "element",
    "head",
    "best",
    "practice",
    "elements",
    "say",
    "might",
    "user",
    "always",
    "rule",
    "using",
    "told",
    "statement",
    "case",
    "string",
    "notation",
    "way",
    "instead",
    "somewhere",
    "line",
    "separate",
    "give",
    "store",
    "learn",
    "reference",
    "set",
    "terminal",
    "look",
    "different",
    "variables",
    "variable",
    "data",
    "future",
    "value",
    "declare",
    "keyword",
    "declaration",
    "undefined",
    "initialize",
    "declaring",
    "strings",
    "reserved",
    "list",
    "names",
    "error",
    "change",
    "red",
    "meaningful",
    "number",
    "interest",
    "rate",
    "situations",
    "constant",
    "reassign",
    "2",
    "types",
    "primitives",
    "numbers",
    "literal",
    "boolean",
    "colors",
    "selected",
    "color",
    "dynamic",
    "age",
    "object",
    "objects",
    "arrays",
    "functions",
    "person",
    "properties",
    "curly",
    "braces",
    "key",
    "access",
    "property",
    "john",
    "bracket",
    "square",
    "target",
    "array",
    "display",
    "function",
    "task",
    "greet",
    "parameter",
    "argument"
  ]
}