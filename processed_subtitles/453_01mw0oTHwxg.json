{
  "text": "In our previous video, we showed \nyou how we hacked the TP-Link router  \nand got a win in the Pwn2Own competition..\nOne of the most frequent \nquestions we got asked was:  \nhow did we get initial access \nto the device to perform recon?\nToday, we will show you the exact techniques \nwe used and how you can do the same  \nto get a root shell in many IoT devices.\nSo sit back and enjoy the ride!\nHey guys this is Pedro from the Flashback Team.\nAnd I am Radek.\nAnd today we are here to show you  \nwhat is UART and what you can do with \nit from a hacker's point of view.\nSo have fun and if you enjoy the video please \nlike, please subscribe but more importantly  \nplease share with friends colleagues \nor whoever might be interested in it.\nSo let's get going.\nUART is an extremely important \nprotocol that is used in many devices.\nIt allows components to speak \nto each other and you'll find  \nalmost any embedded device like \nrouters, cameras, phones or even cars.\nBut for us we are the mostly interested \nin UART as a debug interface.\nWhat can we do with UART?\nMost embedded devices will  \nhave a serial console which is used for various \npurposes during manufacturing, for debugging, etc.\nAnd if we're lucky when we \nconnect to it we get a root shell.\nThis will help us do recon on \nthe device, debug exploits etc. \nWe can also use it to explore the file \nsystem, to dump the firmware and in some  \ncases even perform attacks such as attacking \nthe bootloader, accessing encrypted memory, etc.\nOf course not all that glitters is gold.\nSometimes, device manufacturers disable the \nUART serial console before shipping a device.\nSometimes we can bypass restrictions \n,there's a certain secret key combination  \nwe have to enter at boot to activate the \nconsole, they also might have a login.\nThis login might have an easy to guess password \nor a very hard randomised per device password.\nWe might also land in a sort of restricted shell \nthat allows us to run some commands but not many,  \nand then we have to find a way to bypass it.\nOr in some cases we only get a read-only console.\nThis is just showing a bootlog \nshowing what's happening,  \nand there's nothing we can do, \nwe cannot interact with it.\nThe good news is that we're hackers right?\nWe can always find a way.\nWe can use command injection or other tricks  \nto bypass some shell restrictions \nand execute the command we want.\nWe can also try to guess the login password either \nby cracking it or by inspecting the firmware.\nIn some cases we can even dump the firmware \nover an UART restricted serial shell.\nWe can also try to interrupt the bootloader \nand use some other tricks to get a root shell.\nAnd the thing is even if you just \nget a read-only console and there's  \nno way to bypass it, it can still be very useful.\nFor example we can use the bootlog to see what's \nhappening on device, what services are being  \nstarted, what components are there in the board, \nwhere is the memory, where's the file system  \nand in some cases, we've seen this \nin the past, we have passwords echoed  \ninto this bootlog which we can use to \nenter ssh or some services like that.\nBut also very importantly, we have crash \nlogs from our exploitation attempts.\nLet's say you only have read-only access \nto a console, you can only see what's  \nhappening but you know there's a \nservice and you're attacking it.\nYou're fuzzing it or you're sending network \npackets, and if there's a crash, it is very  \nlikely that this boot log will contain the \ncrash dump, showing you what's on the registers,  \nwhat's happening at crash time, etc, which \ncan be very useful to debug an exploit.\nOK, good intro Pedro.\nLet's continue and try to understand \nhow UART communication works.\nWe know that UART is a serial \ncommunication protocol between two devices.\nIn this case a device A which wants \nto speak to device B (our target).\nWe use the connection from our transmission \nline (TX) to a receiver line on target (RX).\nAnd the same goes in the opposite \ndirection, the target will send data  \non its TX line and the data will \nend up on our end on the RX line.\nAnd both devices have to be grounded.\nBut how do we really find a physical \nUART interface on the target?\nWell in most of the cases we'll be \nlooking for a sequence of paths or pins.\nWe know that we need three pins \nto connect to: RX, TX and Ground.\nWe can ignore the VCC (power) \npin which is usually also there.\nIt is where the power line from \nthe target device is routed,  \nbut we don't really need for our purpose.\nIf we additionally find a mark for the \npin number one, then it's even better,  \nas it might confirm that we're \nlooking on some sort of interface.\nBut remember: the mark only informs us which \nside of the pins should be referenced from. \nBut the UART interface does \nnot always look the same.\nYou will need some experience to \nquickly narrow down your candidates.\nLet's take a quick look at some examples.\nHere we have a NETGEAR router.\nThe UART interface is marked with a red square.\nIn this case we are super lucky, the \npins are already soldered and labelled.\nIt could not be easier than this.\nOn this device the UART interface is a row of \nfour pins, with a triangle marking pin number one.\nWe might have to solder our own pin header \nand identify the RX, TX and the Ground.\nAnd here we don't have the pin \nheaders but the pins are labelled.\nNot too bad, still saves us some time.\nOh that's a good one, it's a security camera.\nYou can see it has an interface \nthat is so called edge connector.\nThe vendor most likely has \na special connector for it,  \nbut you can do without. Just find the \nRX, TX and Ground and you're good to go.\nAnother camera example but this time \nthere are no through holes but a pad.\nNotice the very tiny marks of RX and TX.\nIf you want to connect to this one,  \nthe best will be to use articulated arms \nthat I have showed you in a previous video.\nOr just solder wires into it.\nAnd the last example: it's a Tesla \necu with a card edge connector.\nSo now you can see that there are many variations  \nhow the UART interface could \nbe implemented on a device.\nBut this is not a complete list. In some cases \nthe pins might be hidden or removed completely.\nAs we now know how to find a \ncandidate for the UART interface,  \nlet's go to the next step: how to find \nout the purpose of each of the pins.\nI would start off with the \nmulti meter and the Ground pin.\nSimply switch the multi \nmeter into continuity mode,  \nfind a grounded element on the \nrouter and move the probe one by one.\nWhen you hear the beep sound that is your ground.\nNow you are ready to find TX and RX.\nYou could use a logic analyser for \nthat or continue with the multi meter.\nWith the router powered on, \ntest the remaining pins.\nA pin with constant 3.3 volt  \nis most likely a power pin.\nYou don't need it now.\nA pin with 0 volts is probably a RX, \nas it would expect data from you.\nA pin that has a floating voltage is a TX, as \nthat's the data that the router is sending.\nAs we have found out the purpose of each pin, \nwe can try to communicate with the router.\nFor this we need a device that \ncan speak UART, like this one.\nI connect it to my computer via the USB \nport and wire it up with the target.\nRemember the RX goes to TX and TX goes to RX.\nGround goes to Ground.\nOK, everything wired up.\nNow we need software that can use the UART \ndevice and actually speak with the target.\nI like to use the screen Linux tool \nbut let's use the minicom this time  \nas probably more people are familiar \nwith it for serial communication.\nPower up the target... oh snap!\nWhat is that?\nWell I must have messed up something in the \nsettings, let's take a quick look into that.\nDamn... that's a lot of things that can go wrong.\nOK it's time to dig more into \nthe UART protocol itself.\nUART sends data in well-defined frames.\nThe frame always starts with a \"start bit\" \nto indicate the beginning of the frame.\nThen the data follows.\nIn most of the cases it will be 8 bits of data but \nthe protocol specifies it can be from 5 to 9 bits.\nAfter that a parity comes.\nThe purpose of the parity bit is to indicate \npotential errors in the transmission.\nDepending on the mode it \ncounts the number of ones,  \nand by adding or not adding a parity \nbit it tries to make them odd or even.\nBut the parity bit is really an optional \nfield and actually it is very rarely used.\nThe frame end is indicated with a stop \nbit, it can be one, one and a half or two  \nbits in size. But again in most of the \ncases it will be just one bit in size.\nLet's assume we would like to send the \ndata with the letter A, which is 0x41. \nWe have the high line that indicates a \npositive voltage, for example 3.3 volt,  \nand the low line at zero volts.\nBy default the line idles in high so that means if \nyou want to start the transmission of our frame,  \nwe have to pull it down to zero volts to \nindicate to the target we are sending a zero.\nNow the data comes in. \nIt is sent with the least significant bit first, \nas in, you know, in 0x41 the first bit is one.\nThe voltage has to rise to indicate it.\nThen a bunch of zeros comes, then a \none and the most significant bit zero,  \nand that's the end of the data part.\nIn this example I have also included a \nparity bit but for completeness only.  \nAs said before it is rarely used in our targets.\nThe frame is closed with a stop bit.\nAnd the last thing that you \nneed to know is the baud rate.\nThe baud indicates how fast the \ndata will be sent over the wire  \nso it is crucial that the receiver and the \ntransmitter have set the same baud rate.\nThere are a few defined rates \nin the protocol, but most common  \nare 9,600 for some older or less powerful \ndevices and 115,200 bits per second.\nOK, now with all that information we \ncan simply try to see what happened,  \nour target didn't want to speak properly with us.\nLet's look into the wire and see what UART \nframes have been transmitted and we'll find out.\nWe can use a logic analyser such as this one.\nIt's Saleae - it is a 4 channel version which  \nmeans I can intercept traffic \non 4 wires at the same time.\nIt will help us to understand how \nthe voltage changes on the wire  \n,which we can interpret as logical one or zero.\nOn the reverse you can see it pin out.\nG stands for Ground and the channels.\nSo I use the pin headers to hook the logic  \nanalyser to the Ground and \nthe TX pin on the router.\nNow connect the logic analyser to the computer \nand wait for it to be discovered by the software.\nPower up the router and let's \nfind out what is sent on the wire.\nThis is an interface for the Saleae.\nWe'll see what is happening on the wire of \nchannel 0 for both digital and analog inputs.\nLet's hit that play button and intercept the data.\nOh yes baby something is \ncoming up, let's dig into it!\nWhen I zoom in you can see \nindividual changes in the voltage.\nThat will represent logical data of course.\nAs we assume we are looking at the UART \nlet's find some more occurring waves  \nto calculate the baud rate or, you know, \nhow fast the bits are sent on the wire.\nIf we measure the width of the logical one \nwave we can use the calculator to get the rate.\nIt's quite easy: you just take \none and divide the one by the  \nwidth of the bit and we adjust for the units as \nwe are working with seconds and microseconds.\nNow we know we need to use 115,200 baud rate.\nLet's add the analyser of the async \nserial and confirm our assumption.\nInput channel 0... now we know the bit rate...\n8 bits of data per frame, 1 stop bit, \nno priority bit, basically all standard.\nOK, let's quickly look at the \nbeginning of the communication.\nWe can see the idle which is pulled \ndown, that would indicate the start bit.\nThen 8 bits of data, and the stop bit.\nSo far so good.\nLet's change the data according to ASCII.\nOh that looks like proper data!\nI think I have figured out the baud right now.\nLet's confirm with minicom again but I have \na good feeling we're gonna win this one.\nminicom here we come.\nLet's pop that help window.\nI'm interested in configuring \nminicom so I press O.\nNow press E so I can set the speed of the device.\nAnd again E so we set it to 115,200.\nNotice the remaining settings: we say 8 \nbits of data, no parity and 1 stop bit.\nPower up the target...\nFinally! This is the boot \nlock of the router! We win!\nLet's stop that auto boot.\nWhy it doesn't react?\nAh yes! Do you remember from the \nprevious video, we had to use that super  \nneat hack to connect the RX line of the router?\nLet me quickly explain you how \nwe could deal with that problem.\nI took a picture of the \ntarget and loaded it to GIMP.\nI am sorry it might look small but I didn't \nfind a way to increase the font in GIMP.\nOn the picture we see the main CPU \nand a lot of traces that go from it.\nAnd some of the traces are going \nto the area of the UART interface,  \nthat is usually a really good sign.\nSo this is our busted RX pin. \nNotice a connection to that R24 pad.\nMaybe it was a resistor that TP-Link decided \nto remove to disable the UART; I don't know.\nBut then I measured it and I knew there is no  \nconnection between the pin \nand the rest of the line.\nAnd if you would be tracing the line, you \nwould notice that it disappears at some point.\nIt's because the PCB are multi-layered which \nmeans that trace is run on various levels.\nHowever for a simpler PCB we can try to \nvisually connect them, let me show you how.\nI coloured both traces: the \nTX with pink and RX with red.\nThen if i use the settings \nfor the transparent level  \nand align pictures of front and back, \nyou can trace them kind of end to end.\nWe can even remove the green colour \nwhich could help us visualise it better.\nSo now we can see that both RX and \nTX do terminate in the main CPU.\nYou could try to find a datasheet for that chip \nand confirm it, but I will skip it for now.\nTo recap: we know that our RX line is broken.\nThat's why we can't send data to it.\nSo all we have to do is to reconnect it again, \nand we did it by placing that paperclip bridge.\nSo now the line is connected, and we have a very \nhigh probability that we can send data over it  \nand eventually get root shells via UART.\nPlease share this video and \nsubscribe to the channel.\nIf you haven't seen our previous video where we \npresent a complete walk through how to gain remote  \ncode execution on this router, please check it \nout you'll be able to understand this much better.\nMake sure to visit our website, flashback.sh,  \nwhere we upload more technical \ndocuments and security advisories.\nTake care.\n",
  "words": [
    "previous",
    "video",
    "showed",
    "hacked",
    "router",
    "got",
    "win",
    "pwn2own",
    "competition",
    "one",
    "frequent",
    "questions",
    "got",
    "asked",
    "get",
    "initial",
    "access",
    "device",
    "perform",
    "recon",
    "today",
    "show",
    "exact",
    "techniques",
    "used",
    "get",
    "root",
    "shell",
    "many",
    "iot",
    "devices",
    "sit",
    "back",
    "enjoy",
    "ride",
    "hey",
    "guys",
    "pedro",
    "flashback",
    "team",
    "radek",
    "today",
    "show",
    "uart",
    "hacker",
    "point",
    "view",
    "fun",
    "enjoy",
    "video",
    "please",
    "like",
    "please",
    "subscribe",
    "importantly",
    "please",
    "share",
    "friends",
    "colleagues",
    "whoever",
    "might",
    "interested",
    "let",
    "get",
    "going",
    "uart",
    "extremely",
    "important",
    "protocol",
    "used",
    "many",
    "devices",
    "allows",
    "components",
    "speak",
    "find",
    "almost",
    "embedded",
    "device",
    "like",
    "routers",
    "cameras",
    "phones",
    "even",
    "cars",
    "us",
    "mostly",
    "interested",
    "uart",
    "debug",
    "interface",
    "uart",
    "embedded",
    "devices",
    "serial",
    "console",
    "used",
    "various",
    "purposes",
    "manufacturing",
    "debugging",
    "etc",
    "lucky",
    "connect",
    "get",
    "root",
    "shell",
    "help",
    "us",
    "recon",
    "device",
    "debug",
    "exploits",
    "etc",
    "also",
    "use",
    "explore",
    "file",
    "system",
    "dump",
    "firmware",
    "cases",
    "even",
    "perform",
    "attacks",
    "attacking",
    "bootloader",
    "accessing",
    "encrypted",
    "memory",
    "etc",
    "course",
    "glitters",
    "gold",
    "sometimes",
    "device",
    "manufacturers",
    "disable",
    "uart",
    "serial",
    "console",
    "shipping",
    "device",
    "sometimes",
    "bypass",
    "restrictions",
    "certain",
    "secret",
    "key",
    "combination",
    "enter",
    "boot",
    "activate",
    "console",
    "also",
    "might",
    "login",
    "login",
    "might",
    "easy",
    "guess",
    "password",
    "hard",
    "randomised",
    "per",
    "device",
    "password",
    "might",
    "also",
    "land",
    "sort",
    "restricted",
    "shell",
    "allows",
    "us",
    "run",
    "commands",
    "many",
    "find",
    "way",
    "bypass",
    "cases",
    "get",
    "console",
    "showing",
    "bootlog",
    "showing",
    "happening",
    "nothing",
    "interact",
    "good",
    "news",
    "hackers",
    "right",
    "always",
    "find",
    "way",
    "use",
    "command",
    "injection",
    "tricks",
    "bypass",
    "shell",
    "restrictions",
    "execute",
    "command",
    "want",
    "also",
    "try",
    "guess",
    "login",
    "password",
    "either",
    "cracking",
    "inspecting",
    "firmware",
    "cases",
    "even",
    "dump",
    "firmware",
    "uart",
    "restricted",
    "serial",
    "shell",
    "also",
    "try",
    "interrupt",
    "bootloader",
    "use",
    "tricks",
    "get",
    "root",
    "shell",
    "thing",
    "even",
    "get",
    "console",
    "way",
    "bypass",
    "still",
    "useful",
    "example",
    "use",
    "bootlog",
    "see",
    "happening",
    "device",
    "services",
    "started",
    "components",
    "board",
    "memory",
    "file",
    "system",
    "cases",
    "seen",
    "past",
    "passwords",
    "echoed",
    "bootlog",
    "use",
    "enter",
    "ssh",
    "services",
    "like",
    "also",
    "importantly",
    "crash",
    "logs",
    "exploitation",
    "attempts",
    "let",
    "say",
    "access",
    "console",
    "see",
    "happening",
    "know",
    "service",
    "attacking",
    "fuzzing",
    "sending",
    "network",
    "packets",
    "crash",
    "likely",
    "boot",
    "log",
    "contain",
    "crash",
    "dump",
    "showing",
    "registers",
    "happening",
    "crash",
    "time",
    "etc",
    "useful",
    "debug",
    "exploit",
    "ok",
    "good",
    "intro",
    "pedro",
    "let",
    "continue",
    "try",
    "understand",
    "uart",
    "communication",
    "works",
    "know",
    "uart",
    "serial",
    "communication",
    "protocol",
    "two",
    "devices",
    "case",
    "device",
    "wants",
    "speak",
    "device",
    "b",
    "target",
    "use",
    "connection",
    "transmission",
    "line",
    "tx",
    "receiver",
    "line",
    "target",
    "rx",
    "goes",
    "opposite",
    "direction",
    "target",
    "send",
    "data",
    "tx",
    "line",
    "data",
    "end",
    "end",
    "rx",
    "line",
    "devices",
    "grounded",
    "really",
    "find",
    "physical",
    "uart",
    "interface",
    "target",
    "well",
    "cases",
    "looking",
    "sequence",
    "paths",
    "pins",
    "know",
    "need",
    "three",
    "pins",
    "connect",
    "rx",
    "tx",
    "ground",
    "ignore",
    "vcc",
    "power",
    "pin",
    "usually",
    "also",
    "power",
    "line",
    "target",
    "device",
    "routed",
    "really",
    "need",
    "purpose",
    "additionally",
    "find",
    "mark",
    "pin",
    "number",
    "one",
    "even",
    "better",
    "might",
    "confirm",
    "looking",
    "sort",
    "interface",
    "remember",
    "mark",
    "informs",
    "us",
    "side",
    "pins",
    "referenced",
    "uart",
    "interface",
    "always",
    "look",
    "need",
    "experience",
    "quickly",
    "narrow",
    "candidates",
    "let",
    "take",
    "quick",
    "look",
    "examples",
    "netgear",
    "router",
    "uart",
    "interface",
    "marked",
    "red",
    "square",
    "case",
    "super",
    "lucky",
    "pins",
    "already",
    "soldered",
    "labelled",
    "could",
    "easier",
    "device",
    "uart",
    "interface",
    "row",
    "four",
    "pins",
    "triangle",
    "marking",
    "pin",
    "number",
    "one",
    "might",
    "solder",
    "pin",
    "header",
    "identify",
    "rx",
    "tx",
    "ground",
    "pin",
    "headers",
    "pins",
    "labelled",
    "bad",
    "still",
    "saves",
    "us",
    "time",
    "oh",
    "good",
    "one",
    "security",
    "camera",
    "see",
    "interface",
    "called",
    "edge",
    "connector",
    "vendor",
    "likely",
    "special",
    "connector",
    "without",
    "find",
    "rx",
    "tx",
    "ground",
    "good",
    "go",
    "another",
    "camera",
    "example",
    "time",
    "holes",
    "pad",
    "notice",
    "tiny",
    "marks",
    "rx",
    "tx",
    "want",
    "connect",
    "one",
    "best",
    "use",
    "articulated",
    "arms",
    "showed",
    "previous",
    "video",
    "solder",
    "wires",
    "last",
    "example",
    "tesla",
    "ecu",
    "card",
    "edge",
    "connector",
    "see",
    "many",
    "variations",
    "uart",
    "interface",
    "could",
    "implemented",
    "device",
    "complete",
    "list",
    "cases",
    "pins",
    "might",
    "hidden",
    "removed",
    "completely",
    "know",
    "find",
    "candidate",
    "uart",
    "interface",
    "let",
    "go",
    "next",
    "step",
    "find",
    "purpose",
    "pins",
    "would",
    "start",
    "multi",
    "meter",
    "ground",
    "pin",
    "simply",
    "switch",
    "multi",
    "meter",
    "continuity",
    "mode",
    "find",
    "grounded",
    "element",
    "router",
    "move",
    "probe",
    "one",
    "one",
    "hear",
    "beep",
    "sound",
    "ground",
    "ready",
    "find",
    "tx",
    "rx",
    "could",
    "use",
    "logic",
    "analyser",
    "continue",
    "multi",
    "meter",
    "router",
    "powered",
    "test",
    "remaining",
    "pins",
    "pin",
    "constant",
    "volt",
    "likely",
    "power",
    "pin",
    "need",
    "pin",
    "0",
    "volts",
    "probably",
    "rx",
    "would",
    "expect",
    "data",
    "pin",
    "floating",
    "voltage",
    "tx",
    "data",
    "router",
    "sending",
    "found",
    "purpose",
    "pin",
    "try",
    "communicate",
    "router",
    "need",
    "device",
    "speak",
    "uart",
    "like",
    "one",
    "connect",
    "computer",
    "via",
    "usb",
    "port",
    "wire",
    "target",
    "remember",
    "rx",
    "goes",
    "tx",
    "tx",
    "goes",
    "rx",
    "ground",
    "goes",
    "ground",
    "ok",
    "everything",
    "wired",
    "need",
    "software",
    "use",
    "uart",
    "device",
    "actually",
    "speak",
    "target",
    "like",
    "use",
    "screen",
    "linux",
    "tool",
    "let",
    "use",
    "minicom",
    "time",
    "probably",
    "people",
    "familiar",
    "serial",
    "communication",
    "power",
    "target",
    "oh",
    "snap",
    "well",
    "must",
    "messed",
    "something",
    "settings",
    "let",
    "take",
    "quick",
    "look",
    "damn",
    "lot",
    "things",
    "go",
    "wrong",
    "ok",
    "time",
    "dig",
    "uart",
    "protocol",
    "uart",
    "sends",
    "data",
    "frames",
    "frame",
    "always",
    "starts",
    "start",
    "bit",
    "indicate",
    "beginning",
    "frame",
    "data",
    "follows",
    "cases",
    "8",
    "bits",
    "data",
    "protocol",
    "specifies",
    "5",
    "9",
    "bits",
    "parity",
    "comes",
    "purpose",
    "parity",
    "bit",
    "indicate",
    "potential",
    "errors",
    "transmission",
    "depending",
    "mode",
    "counts",
    "number",
    "ones",
    "adding",
    "adding",
    "parity",
    "bit",
    "tries",
    "make",
    "odd",
    "even",
    "parity",
    "bit",
    "really",
    "optional",
    "field",
    "actually",
    "rarely",
    "used",
    "frame",
    "end",
    "indicated",
    "stop",
    "bit",
    "one",
    "one",
    "half",
    "two",
    "bits",
    "size",
    "cases",
    "one",
    "bit",
    "size",
    "let",
    "assume",
    "would",
    "like",
    "send",
    "data",
    "letter",
    "0x41",
    "high",
    "line",
    "indicates",
    "positive",
    "voltage",
    "example",
    "volt",
    "low",
    "line",
    "zero",
    "volts",
    "default",
    "line",
    "idles",
    "high",
    "means",
    "want",
    "start",
    "transmission",
    "frame",
    "pull",
    "zero",
    "volts",
    "indicate",
    "target",
    "sending",
    "zero",
    "data",
    "comes",
    "sent",
    "least",
    "significant",
    "bit",
    "first",
    "know",
    "0x41",
    "first",
    "bit",
    "one",
    "voltage",
    "rise",
    "indicate",
    "bunch",
    "zeros",
    "comes",
    "one",
    "significant",
    "bit",
    "zero",
    "end",
    "data",
    "part",
    "example",
    "also",
    "included",
    "parity",
    "bit",
    "completeness",
    "said",
    "rarely",
    "used",
    "targets",
    "frame",
    "closed",
    "stop",
    "bit",
    "last",
    "thing",
    "need",
    "know",
    "baud",
    "rate",
    "baud",
    "indicates",
    "fast",
    "data",
    "sent",
    "wire",
    "crucial",
    "receiver",
    "transmitter",
    "set",
    "baud",
    "rate",
    "defined",
    "rates",
    "protocol",
    "common",
    "older",
    "less",
    "powerful",
    "devices",
    "bits",
    "per",
    "second",
    "ok",
    "information",
    "simply",
    "try",
    "see",
    "happened",
    "target",
    "want",
    "speak",
    "properly",
    "us",
    "let",
    "look",
    "wire",
    "see",
    "uart",
    "frames",
    "transmitted",
    "find",
    "use",
    "logic",
    "analyser",
    "one",
    "saleae",
    "4",
    "channel",
    "version",
    "means",
    "intercept",
    "traffic",
    "4",
    "wires",
    "time",
    "help",
    "us",
    "understand",
    "voltage",
    "changes",
    "wire",
    "interpret",
    "logical",
    "one",
    "zero",
    "reverse",
    "see",
    "pin",
    "g",
    "stands",
    "ground",
    "channels",
    "use",
    "pin",
    "headers",
    "hook",
    "logic",
    "analyser",
    "ground",
    "tx",
    "pin",
    "router",
    "connect",
    "logic",
    "analyser",
    "computer",
    "wait",
    "discovered",
    "software",
    "power",
    "router",
    "let",
    "find",
    "sent",
    "wire",
    "interface",
    "saleae",
    "see",
    "happening",
    "wire",
    "channel",
    "0",
    "digital",
    "analog",
    "inputs",
    "let",
    "hit",
    "play",
    "button",
    "intercept",
    "data",
    "oh",
    "yes",
    "baby",
    "something",
    "coming",
    "let",
    "dig",
    "zoom",
    "see",
    "individual",
    "changes",
    "voltage",
    "represent",
    "logical",
    "data",
    "course",
    "assume",
    "looking",
    "uart",
    "let",
    "find",
    "occurring",
    "waves",
    "calculate",
    "baud",
    "rate",
    "know",
    "fast",
    "bits",
    "sent",
    "wire",
    "measure",
    "width",
    "logical",
    "one",
    "wave",
    "use",
    "calculator",
    "get",
    "rate",
    "quite",
    "easy",
    "take",
    "one",
    "divide",
    "one",
    "width",
    "bit",
    "adjust",
    "units",
    "working",
    "seconds",
    "microseconds",
    "know",
    "need",
    "use",
    "baud",
    "rate",
    "let",
    "add",
    "analyser",
    "async",
    "serial",
    "confirm",
    "assumption",
    "input",
    "channel",
    "0",
    "know",
    "bit",
    "rate",
    "8",
    "bits",
    "data",
    "per",
    "frame",
    "1",
    "stop",
    "bit",
    "priority",
    "bit",
    "basically",
    "standard",
    "ok",
    "let",
    "quickly",
    "look",
    "beginning",
    "communication",
    "see",
    "idle",
    "pulled",
    "would",
    "indicate",
    "start",
    "bit",
    "8",
    "bits",
    "data",
    "stop",
    "bit",
    "far",
    "good",
    "let",
    "change",
    "data",
    "according",
    "ascii",
    "oh",
    "looks",
    "like",
    "proper",
    "data",
    "think",
    "figured",
    "baud",
    "right",
    "let",
    "confirm",
    "minicom",
    "good",
    "feeling",
    "gon",
    "na",
    "win",
    "one",
    "minicom",
    "come",
    "let",
    "pop",
    "help",
    "window",
    "interested",
    "configuring",
    "minicom",
    "press",
    "press",
    "e",
    "set",
    "speed",
    "device",
    "e",
    "set",
    "notice",
    "remaining",
    "settings",
    "say",
    "8",
    "bits",
    "data",
    "parity",
    "1",
    "stop",
    "bit",
    "power",
    "target",
    "finally",
    "boot",
    "lock",
    "router",
    "win",
    "let",
    "stop",
    "auto",
    "boot",
    "react",
    "ah",
    "yes",
    "remember",
    "previous",
    "video",
    "use",
    "super",
    "neat",
    "hack",
    "connect",
    "rx",
    "line",
    "router",
    "let",
    "quickly",
    "explain",
    "could",
    "deal",
    "problem",
    "took",
    "picture",
    "target",
    "loaded",
    "gimp",
    "sorry",
    "might",
    "look",
    "small",
    "find",
    "way",
    "increase",
    "font",
    "gimp",
    "picture",
    "see",
    "main",
    "cpu",
    "lot",
    "traces",
    "go",
    "traces",
    "going",
    "area",
    "uart",
    "interface",
    "usually",
    "really",
    "good",
    "sign",
    "busted",
    "rx",
    "pin",
    "notice",
    "connection",
    "r24",
    "pad",
    "maybe",
    "resistor",
    "decided",
    "remove",
    "disable",
    "uart",
    "know",
    "measured",
    "knew",
    "connection",
    "pin",
    "rest",
    "line",
    "would",
    "tracing",
    "line",
    "would",
    "notice",
    "disappears",
    "point",
    "pcb",
    "means",
    "trace",
    "run",
    "various",
    "levels",
    "however",
    "simpler",
    "pcb",
    "try",
    "visually",
    "connect",
    "let",
    "show",
    "coloured",
    "traces",
    "tx",
    "pink",
    "rx",
    "red",
    "use",
    "settings",
    "transparent",
    "level",
    "align",
    "pictures",
    "front",
    "back",
    "trace",
    "kind",
    "end",
    "end",
    "even",
    "remove",
    "green",
    "colour",
    "could",
    "help",
    "us",
    "visualise",
    "better",
    "see",
    "rx",
    "tx",
    "terminate",
    "main",
    "cpu",
    "could",
    "try",
    "find",
    "datasheet",
    "chip",
    "confirm",
    "skip",
    "recap",
    "know",
    "rx",
    "line",
    "broken",
    "ca",
    "send",
    "data",
    "reconnect",
    "placing",
    "paperclip",
    "bridge",
    "line",
    "connected",
    "high",
    "probability",
    "send",
    "data",
    "eventually",
    "get",
    "root",
    "shells",
    "via",
    "uart",
    "please",
    "share",
    "video",
    "subscribe",
    "channel",
    "seen",
    "previous",
    "video",
    "present",
    "complete",
    "walk",
    "gain",
    "remote",
    "code",
    "execution",
    "router",
    "please",
    "check",
    "able",
    "understand",
    "much",
    "better",
    "make",
    "sure",
    "visit",
    "website",
    "upload",
    "technical",
    "documents",
    "security",
    "advisories",
    "take",
    "care"
  ],
  "keywords": [
    "previous",
    "video",
    "router",
    "win",
    "one",
    "get",
    "device",
    "show",
    "used",
    "root",
    "shell",
    "many",
    "devices",
    "uart",
    "please",
    "like",
    "might",
    "interested",
    "let",
    "protocol",
    "speak",
    "find",
    "even",
    "us",
    "debug",
    "interface",
    "serial",
    "console",
    "etc",
    "connect",
    "help",
    "also",
    "use",
    "dump",
    "firmware",
    "cases",
    "bypass",
    "boot",
    "login",
    "password",
    "per",
    "way",
    "showing",
    "bootlog",
    "happening",
    "good",
    "always",
    "want",
    "try",
    "example",
    "see",
    "crash",
    "know",
    "sending",
    "likely",
    "time",
    "ok",
    "understand",
    "communication",
    "target",
    "connection",
    "transmission",
    "line",
    "tx",
    "rx",
    "goes",
    "send",
    "data",
    "end",
    "really",
    "looking",
    "pins",
    "need",
    "ground",
    "power",
    "pin",
    "purpose",
    "number",
    "better",
    "confirm",
    "remember",
    "look",
    "quickly",
    "take",
    "could",
    "oh",
    "connector",
    "go",
    "notice",
    "would",
    "start",
    "multi",
    "meter",
    "logic",
    "analyser",
    "0",
    "volts",
    "voltage",
    "wire",
    "minicom",
    "settings",
    "frame",
    "bit",
    "indicate",
    "8",
    "bits",
    "parity",
    "comes",
    "stop",
    "high",
    "zero",
    "means",
    "sent",
    "baud",
    "rate",
    "set",
    "channel",
    "logical",
    "traces"
  ]
}