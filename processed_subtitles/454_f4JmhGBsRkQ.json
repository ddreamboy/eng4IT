{
  "text": "hey everyone welcome to my channel take\nB store or in my last video we discussed\nabout what is the Internet of Things\nwhat is web of things and how web of\nthings is complementing Internet of\nThings if you want to get a brief\nintroduction about Internet of Things\nand type of things please check out the\nlink in the description in today's video\nwe are going to discuss about widely\nused web protocols in Internet of Things\napplications such as HTTP web sockets\nand mqtt so let's start with HTTP HTTP\nstands for hypertext Transfer Protocol\nHTTP perhaps the most popular\napplication protocol used in the\ninternet and in today's web in order to\nsend and receive messages between\nvarious systems in the network HTTP and\na symmetric request response\nclient-server protocol so meaning the\nclient will request for an information\nfrom the server and the server will\nrespond with the requested information\nif it is available in the Internet HTTP\nis stateless so meaning the server will\nnot remember the previous requests sent\nby the client so all the requests sent\nby the client to the server is\nindependent okay so in the diagram you\ncan see a client and a server for\nexample the client is requesting for an\ninformation so we are going to browse a\nwebsite here so the client is requesting\nfor\nwww.hp.com then the server is checking\nfor this information in the Internet and\nonce it finds this information its\nresponding with the beautiful web page\nthat's how this HTTP protocol works in\nsimple this has two DP protocol always\nruns over TCP and IP TCP is from the\ntransport layer and IP is from the\nnetwork layer of the OSI model so let's\ntalk in detail about HTTP over tcp/ip in\nmy next slide I should TP over tcp/ip as\nI said before has TTP runs over tcp/ip\nin most of the scenario the reason\nbehind this is let's say you are\nrequesting for an information from the\nclient to the server or the class the\nserver is responding to the clients\nrequest there should be a packet\ndelivery guarantee okay so that's the\nmain reason HTTP always runs over\nCPI P because TCP has a property so the\nproperty of TCP is the TCP will provide\nan acknowledgment okay\nso whereas UDP does not provide any\nacknowledgement\nokay so TCP stands for a transmission\ncontrol protocol\nwhereas IP stands for Internet Protocol\nso TCP is used to provide a\ncommunication between two systems or two\ncomputers or to two machines in the\nnetwork and IP is used to provide\nrouting between these devices and each\ndevice will be provided with the IP\naddress in order to identify and send\nthe data and packets between these\ndevices okay\nso TCP IP is a transport and network\nlayer protocol used to communicate\nbetween two machines using the IP\naddress you can you can send and receive\nmessages okay\nso you from the diagram below you can\nsee IP is on the layer 3 and TCP is on\nthe layer 4 whereas HTTP is running over\nthe TCP IP ok so let's see how this high\nstreet EP works in Internet of Things\nbefore I talk about how this HTTP works\nin Internet of Things I want to\nintroduce a new term called rest rest\nstands for representational state\ntransfer so basically the rest is\nstandard or you can consider it as a\ndesign ok\nto communicate between systems on the\nweb where as HTTP implementation based\non rest standard ok so a rest is\nstandard or design and HTTP is an\nimplementation following that standard\nok so if any architecture in the web\nfollows the rest standards it is said to\nbe a restful ok by default if a device\nis working based on this standard means\nin order to access the device the device\nshould provide a REST API so API means\napplication programming interface\nbasically it's a it's a set of rules in\norder to make programs talk to each\nother or you can say web services talk\nto each other ok ok so let's take an\nexample here so I have a client\nit can be any of your smart phones or\nyour laptops or browsers whatever so and\nI have a smart bulb which supports HTTP\nand it's running a web server inside ok\nand the device provide REST API which\nsupports a get put and delay so what\ndoes this I get put until it so\nbasically these are all the HTTP verbs\nwe call so when you are searching for a\nwebsite in from your browser by default\nyou are making a get request ok that's\nhow this HTTP works in normal scenario\nso but but when it comes to REST API\nthere are some other HTTP verbs we will\nhave the option to use for example put\nand delete so put you when you will\nusers in order to change the state of a\nbulb you can use put request and if you\nwant to remove this device or if you\nwant to delete this little device from\nthe so you can use a delete request ok\nso now I have a client I have a smart\nbulb\nsupporting this HTTP protocol providing\na REST API I'm going to make a put\nrequest for example the web server\ninside the smart bulb is accessible over\nHTTP colon slash slash with a web server\ncalm flashbulb slash property /\n- this HTTP endpoint and the bulb will\nturn on when once I make and the server\nwill respond with some kind of status\ncode as I said 200 ok okay this is the\nacknowledgement the server will make to\nthe client ok so I received your request\nI have turned on so so ok 200 ok so it's\nsaying I'm fine now ok so that's how\nthis has TTP works in Internet of Things\nso basically it can be anything you can\nlet's say you have a smart sensor you\nhave any kind of IOT devices each device\nwill support some some kind of HTTP\nverbs get put post to delete so anything\nso basically how this is how the hash\nTTP works in Internet of Things ok now\nlet's talk about the WebSocket so what\nis a web socket so web socket is a\ncommunication protocol providing full\nduplex communication between the client\nand the server over a single\nsee IP connection okay so how WebSocket\nis different from hash TT HTTP is\nunidirectional meaning the client will\nsend a request to the server in one\ndirection and the server will respond to\nthe client in another direction so\nbasically it's just uni direction but in\nWebSockets scenario both your client and\nserver will establish a full duplex\ncommunication and the connection between\nthe client and server will always remind\nopen as long as the client or server\nexplicitly close it okay so a WebSocket\nis also an application layer protocol\nlocated at layer 7 in the OSI model and\nit's depends on that transport\ntransmission control protocol at layer 4\nokay so today the most of the modern\nbrowsers which we are using like firefox\nchrome everything supports this\nWebSocket\nso basically WebSocket is one of the\nhtml5 standard ok so a lot of web\napplications today support WebSocket and\nthere are wide range of IOT applications\nor under development using this website\nso let's see so here you can see so\nbasically the client and server is a\nbi-directional communication between the\nclient and server using a single tcp/ip\nconnection in order to send and receive\nmessages so now let's see how this web\nsocket works in Internet of Things ok I\nhave a client so it can be anything as I\nsaid you know smartphone or browser and\nI have a smart but supporting web socket\nok so basically how this celeb socket\nworks is the client will always do a\nhandshake with this server first so for\nexample it's going to use a hash TTP get\nrequest by mentioning that upgrade my\nconnection to WebSocket ok once the\nserver received this request from the\nclient it will respond with one not one\nI am switching the protocol to WebSocket\nok so now the bust is back mul and the\nclient will have a full duplex\nconnection so meaning the client can\nsend anything to the smart bulb and the\nsmart bulb can send anything all its\ninformation to that client in real time\nok so that's how this web socket works\nso you should always make a handshake\nwith the server first the clients up if\nthe server supports or\nbut bulb supports WebSocket it will\nrespond with one not one status quo if\nit does not support it will still run\nalong the HTTP you can access it over a\nREST API if it supports okay so if any\nof the client or server want to close\nthe connection they can close the\nconnection of this WebSocket okay so\nthat's how simple the WebSocket is so we\ncan use it for a lot of real-time\napplications and why we need to use\nWebSocket so web socket is basically an\ninternet standard and it's it's all of\nthe commonly and widely used web\ntechnologies in modern web browsers\nnowadays okay so web sockets are not\nblocked by firewall and can traverse\nproxies so meaning that subcircuit\nalways complements HTTP so so it can run\non a port port 80 or port 443 in order\nto provide a secure web socket okay\nweb socket is useful for real-time\ncommunications without any delay in IOT\napplications so you can always use if\nyou want to sense a data you to show it\non your dashboard you can always use a\nWebSocket connection in order to send\nreal-time information okay then web\nsocket used very less bandwidth than\nHTTP okay whenever the HTTP you are\nmaking a request to the server\nthere are you're going to make a some\nkind of high bandwidth in order to make\na request and get respond but web socket\nsince the claw the connection is always\nopen the bandwidth requirement is very\nminimum then HTTP and of course\nWebSocket is faster than HTTP okay so\nthese are all the advantages of using\nthe socket over HTTP\nbut if battery base to devices if you're\nhaving means it's always good to use\nHTTP because WebSocket you are going to\nmake connection between a client and\nserver always open which will drain the\nbattery very fast okay okay now let's\ntalk about\nmqtt MQTT stands for message queuing\ntelemetry transport so I can strongly\nsay this is one of the trendy protocol\nused by a lot of companies or developers\naround the world okay for IOT based\napplications so basically what is MQTT\nso MQTT is an application\nprotocol similar to HTTP and WebSocket\nlocated at layer 7 in OSI model which\nworks on publish/subscribe concept so in\nWebSocket and HTTP we call it was the\nresponse but here it is a\npublish/subscribe concept ok\nso it runs on the top of a tcp/ip\nsimilar to past UDP and absorption here\nthere will be a mediator we use ok we\nwill use to communicate or we you to\nsend data between your sensor and your\nclient device or whatever so we call it\na broker ok so we always use a broker in\norder to send and receive data so the\nbroker can either being local or in the\nInternet let's say if you want to\ncommunicate locally ok you can use the\nlocal broker or let's say you want to\ncommunicate with Internet your device is\nsomewhere and you want to access it\nsomewhere from the world so you can use\nyou can use your broker available on the\nInternet there are a lot of public\nbrokers like hi you\nmosquito is a local broker so lot of\nbrokers are available open source\nbrokers are available which you can make\nuse of and one of the key feature of\nthose mqtt is this mqtt offers a quality\nof service ok so basically the immediate\ne offers three level of cures so what\ndoes it mean so QoS zero he was one key\nword to so Q and s 0 means it's just\nfire-and-forget so meaning what are the\nmessages you published ok there won't be\nany delivery guarantee so whether the\nsubscriber may get your message or may\nnot so there won't be any guarantee for\nyour messages qrz 1 means\ndeliver at least once okay so for\nexample the published messages will be\ndelivered to the subscriber at least\nonce QoS - meaning deliver exactly once\nso the published messages will be\ndelivered exactly once to the\nsubscribers so whoever subscribed to\nthis particular topic the message will\nbe delivered exactly once okay so this\nis one of the key feature offered by\nMQTT so basically this MQTT will publish\nand subscribe via some\nsome some kind of parameters called we\ncall it topics okay so basically all the\ninformations or all the sensor data\nwhatever we published we will publish on\na topic the subscriber will subscribe to\nthis topic in order to read the data\nokay so maybe let's take a look into a\nreal life example so now let's see how\nthis MQTT works in the Internet of\nThings scenario okay let's say you own a\nsmart car or an autonomous car we're\njust having a lot of sensors like radar\nsensors laser sensors ultrasonic sensors\nokay and you're planning to use mqtt in\norder to monitor the performance of the\ncar and you want to get the data in real\ntime and you want to monitor it in a\ndashboard okay so now you're going to\nuse a public trend broker which is\navailable on the Internet and what\nyou're going to do is you are going to\npublish your sensor data to this broker\nso in this mqt scenario your smart car\nand your client device both are clients\nand your broker is a sower okay so your\nsmart car will publish the sensor data\nto the broker on the topic sensors slash\nRaider which publish the radar data and\nsensors slash ultrasonic which publish\nthe ultrasonic sensors data and you are\nusing your client device in order to\nsubscribe to this particular topic so\nsubscribe sensor slash trader subscribe\nsensor slash ultrasonic once you\nsubscribe the broker will publish the\ninformation to you so sensor slash\nultrasonic publish sensor Schlatter data\npublisher so you can able to read this\ndata sent by the smart card so basically\nthis publish and subscribe it's it's\nhappening through tcp/ip okay so that's\nhow this MQTT works in a real world\nscenario so the smart car and the broker\nso meaning the client and the server\nwill always try to remain or try to keep\nits connection open as long as possible\nokay the sparked car will always send a\nfrequent ping request to the broker in\norder to ensure that the connection is\nalways open to ensure that quality\nof service so that's how this MQTT works\nand now why MQTT why I need to use mqtt\nso let's take an example like you own a\nfarmland and you want to monitor your\nfarmland by deploying some sensors\naround the farmland okay so and there is\nno proper network connection there\nbecause palm lines will be somewhere\naround the corner and there won't be any\nproper network connection there so you\ncan use MQTT protocol under such\nscenario okay so MQTT is mainly used for\nconstraint devices with a limited\nbandwidth or a limited battery so those\nkind of devices so mqt always uses less\nbattery power to publish and subscribe\ndata okay and as you can see the\nconnection is always a secure using TLS\nso meaning the publish and subscribe\nsubscribed data is always encrypted over\nthe web okay and mqt has a wide range of\napplications and that's the reason\namputees widely adapter in a lot of IOT\napplication nowadays okay so I hope you\nguys enjoyed this session and I hope you\nguys understood what is the difference\nbetween various IOT protocols like HTTP\nMQTT and WebSocket and I hope you can\nconfidently choose your protocols based\non your needs and you can build your eye\nout the applications okay so thanks guys\nand thanks for watching\nso your comments are welcome so every\nday I'm trying to improve myself so\nwhatever your thoughts you can just put\nit in YouTube comments and please\nsubscribe to the channel and I will be\nmaking a lot of new videos and we'll be\ntalking about about open source cloud\nand a lot of tracks are on the way so\nlet's make technology easy PC for\neveryone and have a good\n",
  "words": [
    "hey",
    "everyone",
    "welcome",
    "channel",
    "take",
    "b",
    "store",
    "last",
    "video",
    "discussed",
    "internet",
    "things",
    "web",
    "things",
    "web",
    "things",
    "complementing",
    "internet",
    "things",
    "want",
    "get",
    "brief",
    "introduction",
    "internet",
    "things",
    "type",
    "things",
    "please",
    "check",
    "link",
    "description",
    "today",
    "video",
    "going",
    "discuss",
    "widely",
    "used",
    "web",
    "protocols",
    "internet",
    "things",
    "applications",
    "http",
    "web",
    "sockets",
    "mqtt",
    "let",
    "start",
    "http",
    "http",
    "stands",
    "hypertext",
    "transfer",
    "protocol",
    "http",
    "perhaps",
    "popular",
    "application",
    "protocol",
    "used",
    "internet",
    "today",
    "web",
    "order",
    "send",
    "receive",
    "messages",
    "various",
    "systems",
    "network",
    "http",
    "symmetric",
    "request",
    "response",
    "protocol",
    "meaning",
    "client",
    "request",
    "information",
    "server",
    "server",
    "respond",
    "requested",
    "information",
    "available",
    "internet",
    "http",
    "stateless",
    "meaning",
    "server",
    "remember",
    "previous",
    "requests",
    "sent",
    "client",
    "requests",
    "sent",
    "client",
    "server",
    "independent",
    "okay",
    "diagram",
    "see",
    "client",
    "server",
    "example",
    "client",
    "requesting",
    "information",
    "going",
    "browse",
    "website",
    "client",
    "requesting",
    "server",
    "checking",
    "information",
    "internet",
    "finds",
    "information",
    "responding",
    "beautiful",
    "web",
    "page",
    "http",
    "protocol",
    "works",
    "simple",
    "two",
    "dp",
    "protocol",
    "always",
    "runs",
    "tcp",
    "ip",
    "tcp",
    "transport",
    "layer",
    "ip",
    "network",
    "layer",
    "osi",
    "model",
    "let",
    "talk",
    "detail",
    "http",
    "next",
    "slide",
    "tp",
    "said",
    "ttp",
    "runs",
    "scenario",
    "reason",
    "behind",
    "let",
    "say",
    "requesting",
    "information",
    "client",
    "server",
    "class",
    "server",
    "responding",
    "clients",
    "request",
    "packet",
    "delivery",
    "guarantee",
    "okay",
    "main",
    "reason",
    "http",
    "always",
    "runs",
    "cpi",
    "p",
    "tcp",
    "property",
    "property",
    "tcp",
    "tcp",
    "provide",
    "acknowledgment",
    "okay",
    "whereas",
    "udp",
    "provide",
    "acknowledgement",
    "okay",
    "tcp",
    "stands",
    "transmission",
    "control",
    "protocol",
    "whereas",
    "ip",
    "stands",
    "internet",
    "protocol",
    "tcp",
    "used",
    "provide",
    "communication",
    "two",
    "systems",
    "two",
    "computers",
    "two",
    "machines",
    "network",
    "ip",
    "used",
    "provide",
    "routing",
    "devices",
    "device",
    "provided",
    "ip",
    "address",
    "order",
    "identify",
    "send",
    "data",
    "packets",
    "devices",
    "okay",
    "tcp",
    "ip",
    "transport",
    "network",
    "layer",
    "protocol",
    "used",
    "communicate",
    "two",
    "machines",
    "using",
    "ip",
    "address",
    "send",
    "receive",
    "messages",
    "okay",
    "diagram",
    "see",
    "ip",
    "layer",
    "3",
    "tcp",
    "layer",
    "4",
    "whereas",
    "http",
    "running",
    "tcp",
    "ip",
    "ok",
    "let",
    "see",
    "high",
    "street",
    "ep",
    "works",
    "internet",
    "things",
    "talk",
    "http",
    "works",
    "internet",
    "things",
    "want",
    "introduce",
    "new",
    "term",
    "called",
    "rest",
    "rest",
    "stands",
    "representational",
    "state",
    "transfer",
    "basically",
    "rest",
    "standard",
    "consider",
    "design",
    "ok",
    "communicate",
    "systems",
    "web",
    "http",
    "implementation",
    "based",
    "rest",
    "standard",
    "ok",
    "rest",
    "standard",
    "design",
    "http",
    "implementation",
    "following",
    "standard",
    "ok",
    "architecture",
    "web",
    "follows",
    "rest",
    "standards",
    "said",
    "restful",
    "ok",
    "default",
    "device",
    "working",
    "based",
    "standard",
    "means",
    "order",
    "access",
    "device",
    "device",
    "provide",
    "rest",
    "api",
    "api",
    "means",
    "application",
    "programming",
    "interface",
    "basically",
    "set",
    "rules",
    "order",
    "make",
    "programs",
    "talk",
    "say",
    "web",
    "services",
    "talk",
    "ok",
    "ok",
    "let",
    "take",
    "example",
    "client",
    "smart",
    "phones",
    "laptops",
    "browsers",
    "whatever",
    "smart",
    "bulb",
    "supports",
    "http",
    "running",
    "web",
    "server",
    "inside",
    "ok",
    "device",
    "provide",
    "rest",
    "api",
    "supports",
    "get",
    "put",
    "delay",
    "get",
    "put",
    "basically",
    "http",
    "verbs",
    "call",
    "searching",
    "website",
    "browser",
    "default",
    "making",
    "get",
    "request",
    "ok",
    "http",
    "works",
    "normal",
    "scenario",
    "comes",
    "rest",
    "api",
    "http",
    "verbs",
    "option",
    "use",
    "example",
    "put",
    "delete",
    "put",
    "users",
    "order",
    "change",
    "state",
    "bulb",
    "use",
    "put",
    "request",
    "want",
    "remove",
    "device",
    "want",
    "delete",
    "little",
    "device",
    "use",
    "delete",
    "request",
    "ok",
    "client",
    "smart",
    "bulb",
    "supporting",
    "http",
    "protocol",
    "providing",
    "rest",
    "api",
    "going",
    "make",
    "put",
    "request",
    "example",
    "web",
    "server",
    "inside",
    "smart",
    "bulb",
    "accessible",
    "http",
    "colon",
    "slash",
    "slash",
    "web",
    "server",
    "calm",
    "flashbulb",
    "slash",
    "property",
    "http",
    "endpoint",
    "bulb",
    "turn",
    "make",
    "server",
    "respond",
    "kind",
    "status",
    "code",
    "said",
    "200",
    "ok",
    "okay",
    "acknowledgement",
    "server",
    "make",
    "client",
    "ok",
    "received",
    "request",
    "turned",
    "ok",
    "200",
    "ok",
    "saying",
    "fine",
    "ok",
    "ttp",
    "works",
    "internet",
    "things",
    "basically",
    "anything",
    "let",
    "say",
    "smart",
    "sensor",
    "kind",
    "iot",
    "devices",
    "device",
    "support",
    "kind",
    "http",
    "verbs",
    "get",
    "put",
    "post",
    "delete",
    "anything",
    "basically",
    "hash",
    "ttp",
    "works",
    "internet",
    "things",
    "ok",
    "let",
    "talk",
    "websocket",
    "web",
    "socket",
    "web",
    "socket",
    "communication",
    "protocol",
    "providing",
    "full",
    "duplex",
    "communication",
    "client",
    "server",
    "single",
    "see",
    "ip",
    "connection",
    "okay",
    "websocket",
    "different",
    "hash",
    "tt",
    "http",
    "unidirectional",
    "meaning",
    "client",
    "send",
    "request",
    "server",
    "one",
    "direction",
    "server",
    "respond",
    "client",
    "another",
    "direction",
    "basically",
    "uni",
    "direction",
    "websockets",
    "scenario",
    "client",
    "server",
    "establish",
    "full",
    "duplex",
    "communication",
    "connection",
    "client",
    "server",
    "always",
    "remind",
    "open",
    "long",
    "client",
    "server",
    "explicitly",
    "close",
    "okay",
    "websocket",
    "also",
    "application",
    "layer",
    "protocol",
    "located",
    "layer",
    "7",
    "osi",
    "model",
    "depends",
    "transport",
    "transmission",
    "control",
    "protocol",
    "layer",
    "4",
    "okay",
    "today",
    "modern",
    "browsers",
    "using",
    "like",
    "firefox",
    "chrome",
    "everything",
    "supports",
    "websocket",
    "basically",
    "websocket",
    "one",
    "html5",
    "standard",
    "ok",
    "lot",
    "web",
    "applications",
    "today",
    "support",
    "websocket",
    "wide",
    "range",
    "iot",
    "applications",
    "development",
    "using",
    "website",
    "let",
    "see",
    "see",
    "basically",
    "client",
    "server",
    "communication",
    "client",
    "server",
    "using",
    "single",
    "connection",
    "order",
    "send",
    "receive",
    "messages",
    "let",
    "see",
    "web",
    "socket",
    "works",
    "internet",
    "things",
    "ok",
    "client",
    "anything",
    "said",
    "know",
    "smartphone",
    "browser",
    "smart",
    "supporting",
    "web",
    "socket",
    "ok",
    "basically",
    "celeb",
    "socket",
    "works",
    "client",
    "always",
    "handshake",
    "server",
    "first",
    "example",
    "going",
    "use",
    "hash",
    "ttp",
    "get",
    "request",
    "mentioning",
    "upgrade",
    "connection",
    "websocket",
    "ok",
    "server",
    "received",
    "request",
    "client",
    "respond",
    "one",
    "one",
    "switching",
    "protocol",
    "websocket",
    "ok",
    "bust",
    "back",
    "mul",
    "client",
    "full",
    "duplex",
    "connection",
    "meaning",
    "client",
    "send",
    "anything",
    "smart",
    "bulb",
    "smart",
    "bulb",
    "send",
    "anything",
    "information",
    "client",
    "real",
    "time",
    "ok",
    "web",
    "socket",
    "works",
    "always",
    "make",
    "handshake",
    "server",
    "first",
    "clients",
    "server",
    "supports",
    "bulb",
    "supports",
    "websocket",
    "respond",
    "one",
    "one",
    "status",
    "quo",
    "support",
    "still",
    "run",
    "along",
    "http",
    "access",
    "rest",
    "api",
    "supports",
    "okay",
    "client",
    "server",
    "want",
    "close",
    "connection",
    "close",
    "connection",
    "websocket",
    "okay",
    "simple",
    "websocket",
    "use",
    "lot",
    "applications",
    "need",
    "use",
    "websocket",
    "web",
    "socket",
    "basically",
    "internet",
    "standard",
    "commonly",
    "widely",
    "used",
    "web",
    "technologies",
    "modern",
    "web",
    "browsers",
    "nowadays",
    "okay",
    "web",
    "sockets",
    "blocked",
    "firewall",
    "traverse",
    "proxies",
    "meaning",
    "subcircuit",
    "always",
    "complements",
    "http",
    "run",
    "port",
    "port",
    "80",
    "port",
    "443",
    "order",
    "provide",
    "secure",
    "web",
    "socket",
    "okay",
    "web",
    "socket",
    "useful",
    "communications",
    "without",
    "delay",
    "iot",
    "applications",
    "always",
    "use",
    "want",
    "sense",
    "data",
    "show",
    "dashboard",
    "always",
    "use",
    "websocket",
    "connection",
    "order",
    "send",
    "information",
    "okay",
    "web",
    "socket",
    "used",
    "less",
    "bandwidth",
    "http",
    "okay",
    "whenever",
    "http",
    "making",
    "request",
    "server",
    "going",
    "make",
    "kind",
    "high",
    "bandwidth",
    "order",
    "make",
    "request",
    "get",
    "respond",
    "web",
    "socket",
    "since",
    "claw",
    "connection",
    "always",
    "open",
    "bandwidth",
    "requirement",
    "minimum",
    "http",
    "course",
    "websocket",
    "faster",
    "http",
    "okay",
    "advantages",
    "using",
    "socket",
    "http",
    "battery",
    "base",
    "devices",
    "means",
    "always",
    "good",
    "use",
    "http",
    "websocket",
    "going",
    "make",
    "connection",
    "client",
    "server",
    "always",
    "open",
    "drain",
    "battery",
    "fast",
    "okay",
    "okay",
    "let",
    "talk",
    "mqtt",
    "mqtt",
    "stands",
    "message",
    "queuing",
    "telemetry",
    "transport",
    "strongly",
    "say",
    "one",
    "trendy",
    "protocol",
    "used",
    "lot",
    "companies",
    "developers",
    "around",
    "world",
    "okay",
    "iot",
    "based",
    "applications",
    "basically",
    "mqtt",
    "mqtt",
    "application",
    "protocol",
    "similar",
    "http",
    "websocket",
    "located",
    "layer",
    "7",
    "osi",
    "model",
    "works",
    "concept",
    "websocket",
    "http",
    "call",
    "response",
    "concept",
    "ok",
    "runs",
    "top",
    "similar",
    "past",
    "udp",
    "absorption",
    "mediator",
    "use",
    "ok",
    "use",
    "communicate",
    "send",
    "data",
    "sensor",
    "client",
    "device",
    "whatever",
    "call",
    "broker",
    "ok",
    "always",
    "use",
    "broker",
    "order",
    "send",
    "receive",
    "data",
    "broker",
    "either",
    "local",
    "internet",
    "let",
    "say",
    "want",
    "communicate",
    "locally",
    "ok",
    "use",
    "local",
    "broker",
    "let",
    "say",
    "want",
    "communicate",
    "internet",
    "device",
    "somewhere",
    "want",
    "access",
    "somewhere",
    "world",
    "use",
    "use",
    "broker",
    "available",
    "internet",
    "lot",
    "public",
    "brokers",
    "like",
    "hi",
    "mosquito",
    "local",
    "broker",
    "lot",
    "brokers",
    "available",
    "open",
    "source",
    "brokers",
    "available",
    "make",
    "use",
    "one",
    "key",
    "feature",
    "mqtt",
    "mqtt",
    "offers",
    "quality",
    "service",
    "ok",
    "basically",
    "immediate",
    "e",
    "offers",
    "three",
    "level",
    "cures",
    "mean",
    "qos",
    "zero",
    "one",
    "key",
    "word",
    "q",
    "0",
    "means",
    "meaning",
    "messages",
    "published",
    "ok",
    "wo",
    "delivery",
    "guarantee",
    "whether",
    "subscriber",
    "may",
    "get",
    "message",
    "may",
    "wo",
    "guarantee",
    "messages",
    "qrz",
    "1",
    "means",
    "deliver",
    "least",
    "okay",
    "example",
    "published",
    "messages",
    "delivered",
    "subscriber",
    "least",
    "qos",
    "meaning",
    "deliver",
    "exactly",
    "published",
    "messages",
    "delivered",
    "exactly",
    "subscribers",
    "whoever",
    "subscribed",
    "particular",
    "topic",
    "message",
    "delivered",
    "exactly",
    "okay",
    "one",
    "key",
    "feature",
    "offered",
    "mqtt",
    "basically",
    "mqtt",
    "publish",
    "subscribe",
    "via",
    "kind",
    "parameters",
    "called",
    "call",
    "topics",
    "okay",
    "basically",
    "informations",
    "sensor",
    "data",
    "whatever",
    "published",
    "publish",
    "topic",
    "subscriber",
    "subscribe",
    "topic",
    "order",
    "read",
    "data",
    "okay",
    "maybe",
    "let",
    "take",
    "look",
    "real",
    "life",
    "example",
    "let",
    "see",
    "mqtt",
    "works",
    "internet",
    "things",
    "scenario",
    "okay",
    "let",
    "say",
    "smart",
    "car",
    "autonomous",
    "car",
    "lot",
    "sensors",
    "like",
    "radar",
    "sensors",
    "laser",
    "sensors",
    "ultrasonic",
    "sensors",
    "okay",
    "planning",
    "use",
    "mqtt",
    "order",
    "monitor",
    "performance",
    "car",
    "want",
    "get",
    "data",
    "real",
    "time",
    "want",
    "monitor",
    "dashboard",
    "okay",
    "going",
    "use",
    "public",
    "trend",
    "broker",
    "available",
    "internet",
    "going",
    "going",
    "publish",
    "sensor",
    "data",
    "broker",
    "mqt",
    "scenario",
    "smart",
    "car",
    "client",
    "device",
    "clients",
    "broker",
    "sower",
    "okay",
    "smart",
    "car",
    "publish",
    "sensor",
    "data",
    "broker",
    "topic",
    "sensors",
    "slash",
    "raider",
    "publish",
    "radar",
    "data",
    "sensors",
    "slash",
    "ultrasonic",
    "publish",
    "ultrasonic",
    "sensors",
    "data",
    "using",
    "client",
    "device",
    "order",
    "subscribe",
    "particular",
    "topic",
    "subscribe",
    "sensor",
    "slash",
    "trader",
    "subscribe",
    "sensor",
    "slash",
    "ultrasonic",
    "subscribe",
    "broker",
    "publish",
    "information",
    "sensor",
    "slash",
    "ultrasonic",
    "publish",
    "sensor",
    "schlatter",
    "data",
    "publisher",
    "able",
    "read",
    "data",
    "sent",
    "smart",
    "card",
    "basically",
    "publish",
    "subscribe",
    "happening",
    "okay",
    "mqtt",
    "works",
    "real",
    "world",
    "scenario",
    "smart",
    "car",
    "broker",
    "meaning",
    "client",
    "server",
    "always",
    "try",
    "remain",
    "try",
    "keep",
    "connection",
    "open",
    "long",
    "possible",
    "okay",
    "sparked",
    "car",
    "always",
    "send",
    "frequent",
    "ping",
    "request",
    "broker",
    "order",
    "ensure",
    "connection",
    "always",
    "open",
    "ensure",
    "quality",
    "service",
    "mqtt",
    "works",
    "mqtt",
    "need",
    "use",
    "mqtt",
    "let",
    "take",
    "example",
    "like",
    "farmland",
    "want",
    "monitor",
    "farmland",
    "deploying",
    "sensors",
    "around",
    "farmland",
    "okay",
    "proper",
    "network",
    "connection",
    "palm",
    "lines",
    "somewhere",
    "around",
    "corner",
    "wo",
    "proper",
    "network",
    "connection",
    "use",
    "mqtt",
    "protocol",
    "scenario",
    "okay",
    "mqtt",
    "mainly",
    "used",
    "constraint",
    "devices",
    "limited",
    "bandwidth",
    "limited",
    "battery",
    "kind",
    "devices",
    "mqt",
    "always",
    "uses",
    "less",
    "battery",
    "power",
    "publish",
    "subscribe",
    "data",
    "okay",
    "see",
    "connection",
    "always",
    "secure",
    "using",
    "tls",
    "meaning",
    "publish",
    "subscribe",
    "subscribed",
    "data",
    "always",
    "encrypted",
    "web",
    "okay",
    "mqt",
    "wide",
    "range",
    "applications",
    "reason",
    "amputees",
    "widely",
    "adapter",
    "lot",
    "iot",
    "application",
    "nowadays",
    "okay",
    "hope",
    "guys",
    "enjoyed",
    "session",
    "hope",
    "guys",
    "understood",
    "difference",
    "various",
    "iot",
    "protocols",
    "like",
    "http",
    "mqtt",
    "websocket",
    "hope",
    "confidently",
    "choose",
    "protocols",
    "based",
    "needs",
    "build",
    "eye",
    "applications",
    "okay",
    "thanks",
    "guys",
    "thanks",
    "watching",
    "comments",
    "welcome",
    "every",
    "day",
    "trying",
    "improve",
    "whatever",
    "thoughts",
    "put",
    "youtube",
    "comments",
    "please",
    "subscribe",
    "channel",
    "making",
    "lot",
    "new",
    "videos",
    "talking",
    "open",
    "source",
    "cloud",
    "lot",
    "tracks",
    "way",
    "let",
    "make",
    "technology",
    "easy",
    "pc",
    "everyone",
    "good"
  ],
  "keywords": [
    "take",
    "internet",
    "things",
    "web",
    "want",
    "get",
    "today",
    "going",
    "used",
    "applications",
    "http",
    "mqtt",
    "let",
    "stands",
    "protocol",
    "application",
    "order",
    "send",
    "receive",
    "messages",
    "network",
    "request",
    "meaning",
    "client",
    "information",
    "server",
    "respond",
    "available",
    "okay",
    "see",
    "example",
    "works",
    "two",
    "always",
    "runs",
    "tcp",
    "ip",
    "transport",
    "layer",
    "talk",
    "said",
    "ttp",
    "scenario",
    "say",
    "provide",
    "communication",
    "devices",
    "device",
    "data",
    "communicate",
    "using",
    "ok",
    "rest",
    "basically",
    "standard",
    "based",
    "means",
    "api",
    "make",
    "smart",
    "whatever",
    "bulb",
    "supports",
    "put",
    "call",
    "use",
    "delete",
    "slash",
    "kind",
    "anything",
    "sensor",
    "iot",
    "websocket",
    "socket",
    "connection",
    "one",
    "open",
    "like",
    "lot",
    "real",
    "bandwidth",
    "battery",
    "broker",
    "published",
    "topic",
    "publish",
    "subscribe",
    "car",
    "sensors",
    "ultrasonic"
  ]
}