{
  "text": "YOLO V8 one of the most powerful computer \nvision Technologies ever made in this video  \nI'm going to show you how to do object \ndetection image classification image  \nsegmentation and pose detection on your own \ncustom data using yolo V8 I'm going to show  \nyou the entire process how to annotate your \ndata how to do the training how to analyze the  \nperformance of the model you trained and how \nto use the model to make predictions this  \nis a full comprehensive tutorial on \nyolo V8 and now let's get started\nhey my name is Felipe and welcome to my channel \nin this video we are going to train an object  \ndetector using yolo V8 and I'm going to walk you \nstep by step through the entire process from how  \nto collect the data you need in order to train an \nobject detector how to annotate the data using a  \ncomputer vision annotation tool how to structure \nthe data into the exact format you need in order  \nto use yolo V8, how to do the training and \nI'm going to show you two different ways to  \ndo it; from your local environment and also from \na Google collab and how to test the performance  \nofthea model you trained so this is going to be \na super comprehensive step-by-step guide of  \neverything you need to know in order to train \nan object detector using yolo v8 on your own  \ncustom data set so let's get started so let's \nstart with this tutorial let's start with this  \nprocess and the first thing we need to do is to \ncollect data the data collection is the first step  \nin this process remember that if you want to train \nan object detector or any type of machine learning  \nmodel you definitely need data, the algorithm, the\nspecific algorithm you're going to use in this  \ncase yolo V8 is very very important but the data \nis as important as the algorithm if you don't have  \ndata you cannot train any machine learning model \nthat's very important so let me show you the data  \nI am going to use in this process these are some \nimages I have  \ndownloaded and which I'm going to use in order \nto train this object detector and let me show  \nyou a few of them these are some images of alpacas \nthis is an alpaca data set I have downloaded for  \ntoday's tutorial and you can see these are all \nimages containing alpacas in different postures  \nand in different situations right so this is \nexactly the data I am going to use in this process  \nbut obviously you could use whatever data set you \nwant you could use exactly the same data set I am  \ngoing to use or you can just collect the data \nyourself you could just take your cell phone or  \nyour camera or whatever and you can just take the \npictures the photos the images you are going  \nto use you can just do your own data collection \nor something else you could do is to just use a  \na publicly available data set so let \nme show you this data set this is the open image  \ndataset version 7 and this is a dataset which is \npublicly available and you can definitely use it  \nin order to work on today's tutorial in order to \ntrain the object detector we are going to train  \non todays tutorial so let me show you how it looks \nlike if I go to explore and I select detection  \nuh you can see that I'm going to unselect all \nthese options you can see that this is a huge  \ndata set containing many many many many many \nmany many many categories I don't know how  \nmany but they are many this is a huge data set \nit contains millions of images, hundreds of  \nthousands if not millions of annotations thousands \nof categories this is a super super huge data set  \nand you can see that you have many many different \ncategories now we are looking at trumpet and you  \ncan see these are different images with trumpets \nand from each one of these images we have a  \nbounding box around the trumpet and if I show you \nanother one for example we also have Beetle and in  \nthis category you can see we have many different \nimages from many different type of beetles so  \nthis is another example or if I show you this one \nwhich is bottle and we have many different images  \ncontaining bottles for example there you can see \nmany different type of bottles and in all cases we  \nhave a bounding box around the bottle and I could\nshow you I don't know how many examples because  \nthere are many many many different categories \nso remember the first step in this process is  \nthe data collection this is the data I am going \nto to use in this project which is a dataset  \nof alpacas and you can use the exact same data \nI am using if you want to you can use the same  \ndata set of alpacas or you can just collect your \nown data set by using your cell phone your camera  \nor something like that or you can also download \nthe images from a publicly available dataset  \nfor example the open images dataset version 7. if you \ndecide to use open images dataset version 7 let  \nme show you another category which is alpaca this \nis exactly from where I have downloaded all of the  \nimages of alpacas so if in case you decide to use \nthis publicly available data set I can provide you  \nwith a couple of scripts I have used in order to \ndownload all this data in order to parse through  \nall the different annotations and to \nformat this data in the exact format we need  \nin order to work on today's tutorial so in case \nyou decide to use open image data set I am going  \nto give you a couple of scripts which are going to \nbe super super useful for you so that's that's all  \nI can say about the data collection remember you \nneed to collect data if you want to train an object  \ndetector and you have all those different ways \nto do it and all these different categories and  \nall these different options so now let's move on \nto the next step and now let's continue with the  \ndata annotation you have collected a lot of images \nas I have over here you have a lot of images which  \nyou have collected yourself or maybe you have \ndownloaded this data from a publicly available  \ndata set and now it's the time to annotate this \ndata set maybe you were lucky enough when you were  \ncreating the dataset and maybe this data set you \nare using is already annotated maybe you already  \nhave all the bounding boxes from all of your \nobjects from all your categories maybe that's  \nthe case so you don't really need to annotate your \ndata but in any other case for example if you were  \nusing a custom data set, a dataset you have collected \nyourself with your own cell phone your camera and  \nso on something you have collected in that case \nyou definitely need to annotate your data so in  \norder to make this process more comprehensive in \norder to show you like the entire process let me  \nshow you as well how to annotate data so we are \ngoing to use this tool which is CVAT this is a  \nlabeling tool I have used it many many times in \nmany projects I would say it's one of my favorite  \ntools I have used pretty much absolutely all \nthe object detection computer vision related  \nannotation tools I have used maybe I haven't used \nthem all but I have used many many of them and if  \nyou are familiar with annotation tools you would \nknow that there are many many of them and none of  \nthem is perfect I will say all of the different \nannotation tools have their advantages and their  \ndisadvantages and for some situations you prefer \nto use one of them and for other situations it's  \nbetter to use another one CVAT has many advantages \nand it also has a few disadvantages I'm not saying  \nit's perfect but nevertheless this is a tool I \nhave used in many projects and I really really  \nlike it so let me show you how to use it you \nhave to go to cvat.ai and then you select try  \nfor free there are different pricing options \nbut if you are going to work on your own or or  \nin a very small team you \ncan definitely use the free version so I have  \nalready logged in this is already logged into my \naccount but if you don't have an account then you  \nwill have to create a new one  so you \nyou're going to see like a sign up page and you  \ncan just create a new account and then you can \njust logged in into that account so once you are  \nlogged into this annotation tool you need to \ngo to projects and then create a new one I'm  \ngoing to create a project which is called alpaca \ndetector because this is the project I am going  \nto be working in and I'm going to add a label \nwhich in my case is going to be only one label  \nwhich is alpaca and then that's pretty much all \nsubmit and open I have created the project it has  \none label which is alpaca remember if your project \nhas many many different labels add all the labels  \nyou need, and then I will go here which is create \na new task I am going to create a new annotation  \ntask and I'm going to call this task something \nlike alpaca detector annotation task zero zero one  \nthis is from the project alpaca detector and this \nwill take all the labels from that project now  \nyou need to upload all the images you are going to \nannotate so in my case I'm obviously not going to  \nannotate all the images because you can see these \nare too many images and it doesn't make any sense  \nto annotate all these images in this video These \nare 452 images so I'm not going to annotate them  \nall but I'm going to select a few in order to show \nyou how exactly this annotation tool works and how  \nexactly you can use it in your project also in my \ncase as I have already as I have downloaded these  \nimages from a publicly available data set from \nthe open images dataset version 7 I already  \nhave the annotations I already have all the \nbounding boxes so in my case I don't really need  \nto annotate this data because I already have the \nannotations but I'm going to pretend I don't so  \nI can just label a few images and I can show you \nhow it works so now I go back here and I'm just  \ngoing to select something like this many images \nright yeah I'm just going to select this many  \nimages I'm going to open these images and then \nI'm going to click on submit and open right so  \nthis is going to create this task and at the same \ntime it's going to open this task so we can start  \nworking on our annotation process okay so this is \nthe task I have just created I'm going to click  \nhere in job number and this and the job number \nand this will open all the images and now I'm  \ngoing to start annotating all these images so we \nare working on an object detection problem so we  \nare going to annotate bounding boxes we need to \ngo here and for example if we will be detecting  \nmany different categories we would select what \nis the category we are going to label now and and that's  \nit in my case I'm going to label always the same \ncategory which is alpaca so I don't really need to  \ndo anything here so I'm going to select shape \nand let me show you how I do it I'm going to  \nclick in the upper left corner and then in the \nbottom right corner so the idea is to enclose the  \nobject and only the object right the idea is to \ndraw a bonding box around the object\nyou only want to enclose this object \nand you can see that we have other animals in the  \nback right we have other alpacas so I'm just going \nto label them too and there is a shortcut which is  \npressing the letter N and you can just create \na new bounding box so that's another one this  \nis another one this is another alpaca and this is \nthe last one okay that's pretty much all so once  \nyou're ready you can just press Ctrl s that's \ngoing to save the annotations I recommend you  \nto press Ctrl S as often as possible because it's \nalways a good practice so now everything is saved  \nI can just continue to the next image now we are \ngoing to annotate this alpaca and I'm going to do  \nexactly the same process I can start here obviously \nyou can just start in whatever corner you want  \nand I'm going to do something like this okay \nthis image is completely annotated I'm going to  \ncontinue to the next image in this case I am going \nto annotate this alpaca too. this is not a real  \nalpaca but I want my object detector to be able \nto detect these type of objects too so I'm going  \nto annotate it as well this is going to be a very \ngood exercise because if you want to work  \nas a machine learning engineer or as a computer \nvisual engineer annotating data is something  \nyou have to do very often, actually training \nmachine learning models is something you have to  \ndo very often so usually the data annotation is \ndone by other people, right, it is done by annotator s \nthere are different \nservices you can hire in order to annotate data  \nbut in whatever case whatever service you use \nit's always a very good practice to annotate  \nsome of the images yourself right because if \nyou annotate some of the images yourself  \nyou are going to be more familiar with the data \nand you're also going to be more familiar on how  \nto instruct the annotators on how to annotate this \nparticular data for example in this case it's not  \nreally challenging we just have to annotate these \ntwo objects but let me show you there will be  \nother cases because there will be always situations \nwhich are a little confusing in this case it's not  \nconfusing either I have just to I have to label \nthat object but for example a few images ago  \nwhen we were annotating this image if an annotator \nis working on this image that person is going  \nto ask you what do I do here should I annotate \nthis image or not right if an annotator is working  \non this image and the instructions you provide \nare not clear enough the person is going  \nto ask you hey what do I do here should I annotate \nthis image or not is this an alpaca or not so for  \nexample that situation, another situation will be \nwhat happened here which we had many different  \nalpacas in the background and some of them for \nexample this one is a little occluded so there  \ncould be an annotator someone who ask you hey do \nyou want me to annotate absolutely every single  \nalpaca or maybe I can just draw a huge bonding box \nhere in the background and just say everything  \nin the background is an alpaca it's something that \nwhen an annotator is working on the images they  \nare going to have many many different questions \nregarding how to annotate the data and they are  \nall perfect questions and very good questions \nbecause this is exactly what's about I mean when  \nyou are annotating data you are defining exactly \nwhat are the objects you are going to detect right  \nso um what I'm going is that if you annotate some \nof the images yourself you are going to be more  \nfamiliar on what are all the different situations \nand what exactly is going on with your data so you  \nare more clear in exactly what are the objects \nyou want to detect right so let's continue this  \nis only to show a few examples this is another \nsituation in my case I want to say that both of  \nthem are alpacas so I'm just going to say \nsomething like this but there could be another person  \nwho says no this is only one annotation \nis something like this right I'm just going  \nto draw one bonding box enclosing both of them \nsomething that and it will be a good criteria I  \nmean it will be a criteria which I guess it would \nbe fine but uh whatever your criteria would be\nyou need one right you need a criteria so while you \nare annotating some of the images is that you  \nare going to further understand what exactly is \nan alpaca what exactly is the object you want to  \nconsider as alpaca so I'm just going to continue \nthis is another case which may not be clear but  \nI'm just going to say this is an alpaca this \nblack one which we can only see this part and  \nwe don't really see the head but I'm going to \nsay it's an alpaca anyway  \nthis one too this one too this one too also this \nis something that always happens to me when I am  \nworking when I am annotating images that I am more \naware of all the diversity of all these images for  \nexample this is a perfect perfect example because \nwe have an alpaca which is being reflected on a  \nmirror and it's only like a very small \nsection of the alpaca it's only like a  \nvery small uh piece of the alpacas face so what \ndo we do here I am going to annotate this one too  \nbecause yeah that's my criteria but another person \ncould say no this is not the object I want to detect  \nthis is only the object I want to detect and maybe \nanother person would say no this is not an alpaca  \nalpacas don't really apply makeup on them this is \nnot real so I'm not going to annotate this image  \nyou get the idea right there could be many different \nsituations and the only way you get familiar  \nwith all the different type of situations \nis if you annotate some of the images yourself  \nso now let's continue in my case I'm going \nto do something like this  \nbecause yeah I would say the most important \nobject is this one and then other ones are like...  \nyeah it's not really that important if we detect \nthem or not okay so let's continue this is very  \nsimilar to another image I don't know how many I have \nselected but I think we have only a few left\nI don't know if this type of animals are natural... I'm very surprised about this like  \nthe head right it's like it has a lot of \nhair over here and then it's completely  \nhairless the entire body I mean I don't know I'm \nsurprised maybe they are made like that or maybe  \nit's like a natural alpaca who cares who cares... \nlet's continue so we have let's see how many  \nwe have only a few left so let's continue uh let's \nsee if we find any other strange situation which  \nwe have to Define if that's an alpaca or not so \nI can show you an additional example also when you  \nare annotating you could Define your bounding box \nin many many different ways for example in this  \ncase we could Define it like this we could Define \nit like this I mean we could Define it super super  \nfit to the object something like this super super \nfit and we could enclose exactly the object or we  \ncould be a little more relaxed right for example \nsomething like this would be okay too and if we want  \nto do it like this it will be okay too right you \ndon't have to be super super super accurate you  \ncould be like a little more relaxed and it's \ngoing to work anyway uh now in this last one\nand that's pretty much all \nand this is the last one okay\nI'm going to do something like this now I'm \ngoing to take this I think this is also alpaca  \nbut anyway I'm just going to annotate this part \nso that's pretty much all, I'm going to save and  \nthose are the few images I have selected in order \nto show you how to use this annotation tool so  \nthat's pretty much all for the data annotation and \nremember this is also a very important step this  \nis a very important task in this process because \nif we want to train an object detector we need  \ndata and we need annotated data so this is a very \nvery important part in this process remember this  \ntools cvat this is only one of the many many \nmany available image annotation tools, you  \ncan definitely use another one if you want it's \nperfectly fine it's not like you have to use this  \none, at all, you can use whatever annotation tool \nyou want but this is a tool I think it's very easy  \nto use I like the fact it's very easy to use it's \nalso a web application so you don't really need  \nto download anything to your computer you can \njust go ahead and use it from the web that's also  \none of its advantages so yeah so this is a \ntool I showed you in this video how to use in order  \nto train this object detector so this is going \nto be all for this step and now let's continue  \nwith the next part in this process and now that \nwe have collected and annotated all of our data  \nnow it comes the time to format this data to \nstructure this data into the format we need  \nin order to train an object detector using yolo V8 \nwhen you're working in machine learning and you're  \ntraining a machine learning model every single \nalgorithm you work with it's going to have its own  \nrequirements on how to input the data that's going \nto happen with absolutely every single algorithm  \nyou will work with it's going to happen with yolo \nwith all the different YOLO versions and it's  \ngoing to happen with absolutely every single \nalgorithm you are working with so especially yolov8\nneeds the data in a very specific format so \nI created this step in this process so we can  \njust take all the data we have generated all the \nimages and all the annotations and we can convert  \nall these images into the format we need in order \nto input this data into yolo V8 so let me show  \nyou exactly how we are going to do that if you \nhave annotated data using cvat you have to go to  \ntasks and then you have to select this option and \nit's export task data set it's going to ask you  \nthe export format so you can export this data into \nmany different formats and you're going to choose  \nyou're going to scroll all the way down and you're \ngoing to choose YOLO 1.1 right then you can also  \nsave the images but in this case it's not really \nneeded we don't really need the images we already  \nhave the images and you're just going to click ok \nnow if you wait a few seconds or a few minutes if  \nyou have a very large data set you are going to \ndownload a file like this and if I open this file  \nyou are going to see all these different files \nright you can see we have four different files so  \nactually three files and a directory and if I open \nthe directory this is what you are going to see  \nwhich is many many different file names and if I \ngo back to the images directory you will see that  \nall these images file names they all look pretty \nmuch the same right you can see that the file name  \nthe structure for this file name looks pretty \nmuch the same as the one with as the ones we have  \njust downloaded from cvat so basically the way \nit works is that when you are downloading this  \ndata into this format into the YOLO format every \nsingle annotation file is going to be downloaded  \nwith the same name as the image you have annotated \nbut with a different extension so if you have an  \nimage which was called something.jpg then The \nannotation file for that specific image will be  \nsomething.txt right so that's the way it works \nand if I open this image you are going to see  \nsomething like this you're going to see in this \ncase only one row but let me show you another  \none which contains more than one annotation I \nremember there were many for example this one  \nwhich contains two different rows and each one of \nthese rows is a different object in my case as I  \nonly have alpacas in this data set each one of \nthese rows is a different alpaca and this is how  \nyou can make sense of this information the first \ncharacter is the class, the class you are detecting  \nI wanted to enlarge the entire file and \nI don't know what I'm doing there okay\nokay the first number is the class you are \ndetecting in in my case I only have one so  \nit's only a zero because it's my only class and \nthen these four numbers which Define the bounding  \nbox right this is encoded in the YOLO format which \nmeans that the first two numbers are the position  \nof the center of the bounding box then you have \nthe width of your bounding box and then the  \nheight of your bounding box, you will notice \nthese are all float numbers and this basically  \nmeans that it's relative to the entire size of \nthe image so these are the annotations we have  \ndownloaded and this is in the exact same format \nwe need in order to train this object detector  \nso remember when I was downloading these \nannotations we noticed there were many many many  \ndifferent options all of these different options \nare different formats in which we could save the  \nannotations and this is very important because you \ndefinitely need to download YOLO because we are  \ngoing to work with yolo and everything it's pretty \nmuch ready as we need it in order to input into  \nyolo V8 right if you select YOLO that's exactly \nthe same format you need in order to continue with  \nthe next steps and if you have your data into \na different format maybe if you have already  \ncollected and annotate your data and you have your \ndata in whatever other format please remember you  \nwill need to convert these images or actually to \nconvert these annotations into the YOLO format  \nnow this is one of the things we need for \nthe data this is one of the things we need in  \norder to we need to format in order to structure \nthe data in a way we can use this object detector  \nwith yolo V8 but another thing we should do is \nto create very specific directories containing this  \ndata right we are going to need two directories \none of them should be called images and the other  \none should be called labels you definitely need \nto input these names you cannot choose whatever  \nname you want you need to choose these two names \nright the images should be located in an directory  \ncalled images and the labels should be located in \na directory called labels that's the way yolo V8  \nworks so you need to create these two directories \nwithin your image directory is where you are going  \nto have your images if I click here you can \nsee that these are all my images they are all  \nwithin the images directory they are all within \nthe train directory which is within the images  \ndirectory this directry is not absolutely needed \nright you could perfectly take all your images all  \nthese images and you could just paste all your \nimages here right in the images directory and  \neverything will be just fine but if you want you \ncould do something exactly as I did over here and  \nyou could have an additional directory which is \nin between images and your images  \nand you can call this whatever way you want this \nis a very good strategy in case you want to have  \nfor example a train directory containing all the \ntraining images and then another directory which  \ncould be called validation for example and this \nis where you are going to have many images in  \norder to validate your process your training \nprocess your algorithm and you could do the  \nsame with an additional directory which could be \ncalled test for example or you can just use these  \ndirectories in order to label the data right \nto create different versions of your data which is  \nanother thing which is very commonly done so you \ncould create many directories for many different  \npurposes and that will be perfectly fine but you \ncould also just paste all the images here and  \nthat's also perfectly fine and you can see that \nfor the labels directory I did exactly the same we  \nhave a directory which is called train and within \nthis directory is that we have all these different  \nfiles and for each one of these files let me \nshow you like this it's going to be much better\nfor each one of these files for each one of \nthese txt files we will have an image in the  \nimages directory which is called exactly the \nsame exactly the same file name but a different  \nextension right so in this case this one is called \n.txt and this one is called .jpg but you can  \nsee that it's exactly exactly the same file name \nfor example the first image is called oa2ea8f  \nand so on and that's exactly the same name as \nfor the first image in the images directory  \nwhich is called oa2ea8f and so on so basically for \nabsolutely every image in your images directory  \nyou need to have an annotations file and a file in \nthe labels directory which is called exactly the  \nsame exactly the same but with a different extension \nif your images are .jpg your annotations files  \nare .txt so that's another thing which also \ndefines the structure you'll need for your data  \nand that's pretty much all so remember you need \nto have two directories one of them is called  \nimages, the other one is called labels within the images \ndirectories is where you're going to have all your  \nimages and within your labels directories is where \nyou will have all your annotations, all your labels  \nand for absolutely every single image in your \nimages directory you will need to have a file  \nin the labels directory which is called exactly \nthe same but with a different extension if  \nyour images are .jpg your annotation files should \nbe .txt and the labels should be expressed in  \nthe yolo format which is as many rows as \nobjects in that image and every single one  \nof these rows should have the same structure you \nare going to have five terms the first one of them  \nis the class ID in my case I only have one class \nID I'm only detecting alpacas so in my case this  \nnumber will always be zero but if you're detecting \nmore than one class then you will have different  \nnumbers then you have the position the X and Y \nposition of the center of the bounding box and  \nthen you will have the width and then you will \nhave the height and everything will be expressed  \nin relative coordinates so basically this is \nthe structure you need for your data  \nand this is what this step is about so that's \npretty much all about converting the data or about  \nformatting the data and now let's move on to the \ntraining now it's where we are going to take all  \nthis data and we are going to train our object \ndetector using yolo V8 so now that we have  \ntaken the data into the format we need in order to \ntrain yolo v8 now comes the time for the training  \nnow it comes the time where we are going to take \nthis custom data set and we are going to train an  \nobject detector using yolo V8 so this is yolo \nV8 official repository one of the things  \nI like the most about YOLO V8 is that in order \nto train an object detector we can do it either  \nwith python with only a few python \ninstructions or we can also use a command line  \nutility let me see if I find it over here we can \nalso execute a command like this in our terminal  \nsomething that looks like this and that's pretty \nmuch all we need to do in order to train this  \nobject detector that's something I really really \nliked that's something I'm definitely going to  \nuse in our projects from now on because I think \nit's a very very convenient and a very easy way  \nto train an object detector or a machine learning \nmodel so this is the first thing we should notice  \nabout yolo V8 there are two different ways \nin which we can train an object detector we  \ncan either do it in python as we usually do or \nwe can run a command in our terminal I'm going  \nto show you both ways so you're familiar with both \nways and also I mentioned that I am going to show  \nyou the entire process on a local environment in a \npython project and I'm also going to show you this  \nprocess in a google colab so I I know there are \npeople who prefer to work in a local environment I  \nam one of those people and I know that there are \nother people who prefer to work on a Google colab  \nso depending on in which group are you I \nam going to show you both ways to do it so you  \ncan just choose the one you like the most so let's \nstart with it and now let's go to pycharm this is  \na pycharm project I created for this training and \nthis is the file we are going to edit in order to  \ntrain the object detector so the first thing I'm \ngoing to do is to just copy a few lines I'm just  \ngoing to copy everything and I'm going to remove \neverything we don't need copy and paste so we want  \nto build a new model from scratch so we are going \nto keep this sentence and then we are going  \nto train a model so we are just going to remove \neverything but the first sentence and that's all  \nright these are the two lines we need in order to \ntrain an object detector using yolo V8 now we are  \ngoing to do some adjustments, obviously the \nfirst thing we need to do is to import  \nultralytics which is a library we need to use in \norder to import yolo, in order to train a yolo  \nV8 model and this is a python Library we need to \ninstall as we usually do we go to our terminal and  \nwe do something like pip install and the library \nname in my case nothing is going to happen because  \nI have already installed this library but please \nremember to install it and also please mind that  \nwhen you are installing this Library this library \nhas many many dependencies so you are going to  \ninstall many many many many different python \npackages so it's going to take a lot of space  \nso definitely please be ready for that because you \nneed a lot of available space in order to install  \nthis library and it's also going to take \nsome time because you are installing many many  \nmany different packages but anyway let's continue \nplease remember to install this library and these  \nare the two sentences we need in order to run \nthis training from a python script  \nso this sentence we're just going to leave it as \nit is this is where we are loading the specific  \nyolo V8 architecture the specific yolo V8  model we are going to use you can see that  \nwe can choose from any of all of these different \nmodels these are different versions or these are  \ndifferent sizes for yolo V8 you can see we have \nNano small medium large or extra large we are  \nusing the Nano version which is the smallest one \nor is the lightest one, so this is the one we are going  \nto use, the yolo V8 Nano, the yolo V8 n then about \nthe training about this other sentence we need to  \nedit this file right we need a yaml file which \nis going to contain all the configuration for our  \ntraining so I have created this file and I have \nnamed this file config.yaml I'm not sure if this  \nis the most appropriate name but anyway this is \nthe name I have chosen for this file so what I'm  \ngoing to do is just edit this parameter and I'm \ngoing to input config.yaml this is where the  \nconfig.yaml is located this is where the main.pi \nis located, they are in the same directory so if I do  \nthis it's going to work just fine and then let \nme show you the structure for this config.yaml  \nyou can see that this is a very very very simple \nconfiguration file we only have a few Keys which  \nare PATH train val and then names right let's \nstart with the names let's start with this this  \nis where you are going to set all your different \nclasses right you are training an object detector  \nyou are detecting many different categories many \ndifferent classes and this is where you are going  \nto input is where you're going to type all of \nthose different classes in my case I'm  \njust detecting alpacas that's the only class \nI am detecting so I only have one class, is the  \nnumber zero and it's called alpaca but if you are \ndetecting additional objects please remember to  \ninclude all the list of all the objects you are \ndetecting, then about these three parameters these  \nthree arguments the path is the absolute path to \nyour directory containing images and annotations  \nand please remember to include the absolute path. \nI ran some issues when I was trying to specify  \na relative path relative from this directory from \nmy current directory where this project is created  \nto the directory where my data is located when \nI was using a relative path I had some issues  \nand then I noticed that there were other people \nhaving issues as well I noticed that in the GitHub  \nrepository from YOLO V8 I noticed this is in the \nthe issues section there were other people having  \nissues when they were specifying a relative path \nso the way I fixed it and it's a very good way to  \nfix it it's a very easy way to fix it it's just \nspecifying an absolute path remember this should  \nbe an absolute path so this is the path to this \ndirectory to the directory contain the images  \nand the labels directories so this is this is the \npath you need to specify here and then you have to  \nspecify the relative path from this location to \nwhere your images are located like the specific  \nimages are located right in my case they are in \nimages/train relative to this path if I show you  \nthis location which is my root directory then if \nI go to images/train this is where my images are  \nlocated right so that's exactly what I need to \nspecify and then you can see that this is the  \ntrain data this is the data the algorithm is going \nto use as training data and then we have another  \nkeyword which is val right the validation dataset \nin this case we are going to specify the  \nsame data as we used for training and the reason \nI'm doing this is because we want to keep things  \nsimple in this tutorial I'm just going to show \nyou the entire process of how to train an object  \ndetector using yolo V8 on a custom data set \nI want to keep things simple so I'm just going  \nto use the same data so that's pretty much all \nfor this configuration file now going back to  \nmain that's pretty much all we need in order to \ntrain an object detector using yolo V8  \nfrom python that's how simple it is so now I'm \ngoing to execute this file I'm going to change the  \nnumber of epochs I'm going to do this for only \none Epoch because the only thing I'm going to  \nshow you for now is how it is executed, I'm going to \nshow you the entire process and once we notice  \nhow everything is working once we know\neverything is up and running everything is  \nworking fine we can just continue but let's just \ndo this process let's just do this training for  \nonly one Epoch so we can continue you can see that \nnow it's loading the data it has already loaded \nthe data you can make use of all the different \ninformation of this debugging  \ninformation we can see here you can see now \nwe were loading 452 images and we were able  \nto load all the images right 452 from 452 and if \nI scroll down you can see that we have additional  \ninformation additional values which are related \nto the training process this is how the training  \nprocess is going right we are training this object \ndetector and this additional information which we  \nare given through this process so for now the \nonly thing we have to do is only waiting we  \nhave to wait until this process is completed so \nI am going to stop this video now and I'm going  \nto fast forward this video until the end of this \ntraining and let's see what happens okay so the  \ntraining is now completed and you can see that \nwe have an output which says results saved to  \nruns/detect/train39 so if I go to that directory \nruns/detect and train39 you can see that we have  \nmany many different files and these files are related to how the training process  \nwas done right for example if I show you these \nimages these are a few batches of images which  \nwere used in order to train this algorithm \nyou can see the name is train batch0  \nand train batch1 I think we have a train batch2 so we have a lot of different images of a lot  \nof different alpacas of different images we used \nfor training and they were all put together they  \nwere all concatenated into these huge images so \nwe can see exactly the images which were used for  \ntraining and The annotation on top of them right \nthe bonding boxes on top of them and we also have  \nsimilar images but for the validation dataset\nright remember in this case we are using the same  \ndata as validation as we use for training so it's \nexactly the same data it's not different data but  \nthese were the labels in the validation data set \nwhich is the training data set and these were the  \npredictions on the same images right you can see \nthat we are not detecting anything we don't have  \nabsolutely any prediction we don't have absolutely \nany bounding box this is because we are doing a  \nvery shallow training we are doing a very dummy \ntraining we are training this algorithm only for one epoch \nthis was only an example to show you the output \nhow it looks like to show you the entire process  \nbut it is not a real training but nevertheless \nthese are some files I'm going to  \nshow you better when we are in the next step \nfor now let me show you how the training is done  \nfrom the command line from the terminal using the \ncommand I showed you over here using a command like  \nthis and also let me show you how this training \nis done on a Google colab so going to the terminal  \nif we type something like this yolo detect train \ndata I have to specify the configuration file  \nwhich is config.yaml and then model yolov8n.yaml  \nand then the number of epochs this  \nit's exactly the same as we did here exactly the \nsame is going to produce exactly the same output  \nI'm just going to change the number of epochs for \none so we make it exactly the same and let's see  \nwhat happens you can see that it we have exactly \nthe same output we have loaded all the images and  \nnow we are starting a new training process and \nafter this training process we are going to have  \na new run which we have already created the new \ndirectory which is train40 and this is where  \nwe are going to save all the information related \nto this training process so I'm not going to do  \nit because it's going to be exactly the same as \nas the one we did before but this is exactly how  \nyou should use the command line or how you \ncan use this utility in order to do this training  \nfrom the terminal you can see how simple it is \nit's amazing how simple it is it's just amazing  \nand now let me show you how everything is done \nfrom a Google colab so now let's go back to the  \nbrowser so I can show you this notebook I created \nin order to train yolo V8 from a Google colab  \nif you're not familiar with Google collab the way \nyou can create a new notebook is going to Google  \nDrive you can click new more and you select \nthe option Google collaboratory this is going  \nto create a new google colab notebook and you \ncan just use that notebook to train this object  \ndetector now let me show you this notebook and \nyou can see that it contains only one two three  \nfour five cells this is how simple this will \nbe the first thing you need to do is to upload  \nthe data you are going to use in order to train \nthis detector it's going to be exactly the same  \ndata as we used before so these are exactly \nthe same directories the images directory and  \nthe label directory we used before and then \nthe first thing we need to do is to  \nexecute this cell which mounts Google Drive into \nthis instance of google collab so the only  \nthing I'm doing is just I just pressed \nenter into this cell and this may take some time  \nbut it's basically the only thing it does is \nto connect to Google Drive so we can just access  \nthe data we have in Google Drive so I'm going to \nselect my account and then allow and that's pretty  \nmuch all then it all comes to where you have the \ndata in your Google drive right in the specific  \ndirectory where you have uploaded the data in \nmy case my data is located in this path right  \nthis is my home in Google Drive and then this \nis the relative path to the location of where  \nI have the data and where I have all the files \nrelated to this project so remember to specify this  \nroot directory as the directory where you have \nuploaded your data and that's pretty much all  \nand then I'm just going to execute this cell \nso I save this variable I'm going to execute  \nthis other cell which is pip install ultralytics the \nsame command I ran from the terminal in my local  \nenvironment now I'm going to run it in Google \ncollab remember you have to start this command by  \nthe exclamation mark which means you are running \na command in the terminal where this process is  \nbeing executed or where this notebook is being \nlaunched so remember to include the exclamation  \nmark everything seems to be okay everything \nseems to be ready and now we can continue to  \nthe next cell which is this one you can see that \nwe have done exactly the same structure we have  \ninput exactly the same lines as in our \nlocal environment if I show you this again you  \ncan see we have imported ultralytics then we have \ndefined this yolo object and then we have called  \nmodel.train and this is exactly the same as we are \ndoing here obviously we are going to need another  \nyaml file we are going to need a yaml file in our \nGoogle Drive and this is the file I have specified  \nwhich it's like exactly the same \nconfiguration as in the um as in the in the  \nyaml file I showed you in my local environment is \nexactly the same idea so this is exactly what you  \nshould do now you should specify an absolute \npath to your Google Drive directory that's the  \nonly difference so that's the only difference \nand I see I have a very small mistake because  \nI see I have data here and here I have just \nuploaded images and labels in the directory  \nbut they are not within another rectory which \nis called Data so let me do something I'm going  \nto create a new directory which is called Data \nimages labels I'm just going to put everything  \nhere right so everything is consistent so now \neverything is okay images then train and then the  \nimages are within this directory so everything \nis okay now let's go back to the Google collab  \nevery time you make an edit or every time you do \nsomething on Google Drive it's always a good idea to  \nrestart your runtime so that's what I'm going \nto do I'm going to execute the commands again  \nI don't really need to pip install this Library \nagain because it's already installed into this  \nenvironment and then I'm going to execute this \nfile I think I have to do an additional edit which  \nis uh this file now it's called google_colab_config.yaml and that's pretty much all I'm just going  \nto run it for one Epoch so everything is exactly \nthe same as we did in our local environment and  \nnow let's see what happens so you can see that \nwe are doing exactly the same process everything  \nlooks pretty much the same as it did before we \nare loading the data we are just loading the  \nmodels everything it's going fine and \nthis is going to be pretty much the same process  \nas before you can see that now it takes \nsome additional time to load the data because now  \nyou have... you are running this environment you're \nrunning this notebook in a given environment and  \nyou're taking the data from your Google Drive so \nit takes some time it's it's a slower process but  \nit's definitely the same idea so the only thing we \nneed to do now is just to wait until all this uh  \nprocess to be completed and that's pretty much all \nI think it doesn't really make any sense to wait  \nbecause it's like it's going to be exactly the \nsame process we did from our local environment  \nat the end of this execution we are going to have \nall the results in a given directory which is the  \ndirectory of the notebook which is running this \nprocess so at the end of this process please  \nremember to execute this command which is going \nto take all the files you have defined in this  \nruns directory which contains all the runs you \nhave made all the results you have produced and  \nit's going to take all this directory \ninto the directory you have chosen for your files  \nand your data and your google collab and so on \nplease remember to do this because otherwise  \nyou would not be able to access this data and \nthis data which contains all the results and  \neverything you have just trained so this is how \nyou can train an object detector  \nusing yolo V8 in a Google collab and you can \nsee that the process is very straightforward and  \nit's pretty much exactly the same process exactly \nthe same idea as we did you in our local environment  \nand that's it so that's how easy it is to train \nan object detector using yolo Y8 once you have  \ndone everything we did with the data right once \nyou have collected the data you have annotated  \ndata you have taken everything into the format \nyolo V8 needs in order to train an object  \ndetector once everything is completed then \nrunning this process running this training  \nis super straightforward so that's going to be \nall about this training process and now let's  \ncontinue with the testing now let's see how these \nmodels we have trained how they performed right  \nlet's move to the next step and this is the last \nstep in this process this is where we are going  \nto take the model we produced in the training \nstep and we're going to test how it performs  \nthis is the last step in this process this is how \nwe are going to complete this training of an object  \ndetector using yolo v8, so once we have trained \na model we go to the uh to this directory remember  \nto the directory I showed you before regarding... the \ndirectory where all the information was saved  \nwhere all the information regarding this training \nprocess was saved and obviously I I'm not going to  \nshow you the training we just did because it was \nlike a very shallow training like a very dummy  \ntraining but instead I'm going to show you the \nresults from another training I did when I Was  \npreparing this video where I conducted exactly the \nsame process but the training process was done for  \n100 epochs so it was like a more deeper training \nright so let me show you all the files we have  \nproduced so you know what are all the different \ntools you have in order to test the performance of  \nthe model you have trained so basically you have \na confusion Matrix which is going to give you a  \nlot of information regarding how the different \nclasses are predicted or how all the different  \nclasses are confused right if you are familiar \nwith how a confusion Matrix looks like or it  \nshould look like then you will know how to read \nthis information basically this is going to give  \nyou information regarding how all the different \nclasses were confused in my case I only have  \none class which is alpaca but you can see that \nthis generates another category which is like  \nuh the default category which is background and we \nhave some information here it doesn't really say  \nmuch it says how these classes are confused but \ngiven that this is an object detector I think the  \nmost valuable information it's in other metrics in \nother outputs so we are not really going to mind  \nthis confusion Matrix then you have some plots \nsome curves for example this is the F1 confidence  \ncurve we are not going to mind this plot either \nremember we are just starting to train an  \nobject detector using yolo V8 the idea for this \ntutorial is to make it like a very introductory training  \na very introductory process so we are not going to \nmind in all these different uh plots we have over  \nhere because it involves a lot of knowledge and \na lot of expertise to extract all the information  \nfrom these plots and it's not really the idea for \nthis tutorial let's do things differently let's  \nfocus on this plot which is also available in \nthe results which were saved into this directory  \nand you can see that we have many many many \ndifferent plots you can definitely go crazy  \nanalyzing all the information you have here \nbecause you have one two three four five  \nten different plots you could knock yourself out \nanalyzing and just extracting all the information  \nfrom all these different plots but again the idea \nis to make it a very introductory video and a very  \nintroductory tutorial so long story short I'm \njust going to give you one tip of something the  \none thing you should focus on these plots for now \nif you're going to take something from this video  \nfrom how to test the performance of a model \nyou have just trained using yolo v8 to train an object  \ndetector is this make sure your loss is going \ndown right you have many plots some of them are  \nrelated to the loss function which are this one this \none and this one this is for the training set and  \nthese are related to the validation set make \nsure all of your losses are going down right this  \nis like a very I would say a very simple way to \nanalyze these functions or to analyze these plots  \nbut that's... I will say that that's more powerful \nthat it would appear make sure all your losses are  \ngoing down because given the loss function we \ncould have many different situations we could  \nhave a loss function which is going down which \nI would say it's a very good situation we could  \nhave a loss function which started to go down and \nthen just it looks something like a flat line and  \nif we are in something that looks like a flat line \nit means that our training process has stuck so it  \ncould be a good thing because maybe the the \nalgorithm the machine learning model really  \nlearned everything he had to learn about this \ndata so maybe a flat line is not really a bad  \nthing maybe I don't know you you would have to \nanalyze other stuff or if you look at your loss  \nfunction you could also have a situation \nwhere your loss function is going up right  \nthat's the other situation and if you my friend \nhave a loss function which is going up then you  \nhave a huge problem then something is obviously \nnot right with your training and that's why I'm  \nsaying that analyzing your loss function what \nhappens with your loss is going to give you a  \nlot of information ideally it should go down if \nit's going down then everything is going well  \nmost likely, if its something like a flatline \nwell it could be a good thing or a bad thing I  \ndon't know we could be in different situations \nbut if it's going up you have done something  \nsuper super wrong I don't know what's going on \nin your code I don't know what's going on in  \nyour training process but something is obviously \nwrong right so that's like a very simple and a  \nvery naive way to analyze all this information \nbut trust me that's going to give you a lot a  \nlot of information you know or to start working \non this testing the performance of this model  \nbut I would say that looking at the plots and analyzing \nall this information and so on I would say that's  \nmore about research, that's what people \nwho do research like to do and I'm more like  \na freelancer I don't really do  research so \nI'm going to show you another way to analyze this  \nperformance, the model we have just \ntrained which from my perspective it's a more...  \nit makes more sense to analyze it like this and it \ninvolves to see how it performs with real \ndata right how it performs with data you have \nused in order to make your inferences and to  \nsee what happens so the first step in this more \npractical more visual evaluation of this model of  \nhow this model performs is looking at these images \nand remember that before when we looked at these  \nimages we had this one which was regarding the \nlabels in the validation set and then this other  \none which were the predictions were completely \nempty now you can see that the the predictions  \nwe have produced they are not completely empty \nand we are detecting the position of our alpacas  \nsuper super accurately we have some mistakes \nactually for example here we are detecting  \na person as an alpaca here we are detecting also \na person as  an alpaca and we have some missdetections  \nfor example this should be in alpaca and it's not \nbeing detected so we have some missdetections but you  \ncan see that the the results are pretty much okay \nright everything looks pretty much okay the same  \nabout here if we go here we are detecting pretty \nmuch everything we have a Missdetection here we  \nhave an error over here because we are detecting \nan alpaca where there is actually nothing so things are  \nnot perfect but everything seems to be pretty much \nokay that's the first way in which we are going to  \nanalyze the performance of this model which is \na lot because this is like a very visual way to  \nsee how it performs we are not looking at plots we \nare not looking at metrics right we are looking at  \nreal examples and to see how this model performs \non real data maybe I am biased to analyze things  \nlike this because I'm a freelancer and the way it \nusually works when you are a freelancer is that  \nif you are building this model to deliver this \nproject for a client and you tell your client oh  \nyeah the model was perfect take a look at all \nthese plots take a look at all these metrics  \neverything was just amazing and then your client \ntests the model and it doesn't work the client  \nwill not care about all the pretty plots and so \non right so that's why I don't really mind a lot  \nabout these plots maybe I am biased because I am a \nfreelancer and that's how freelancing works but I  \nprefer to do like a more visual evaluation \nso that's the first step we will do and we  \ncan notice already we are having a better \nperformance we are having an okay performance  \nbut this data we are currently looking at right \nnow remember the validation data it was pretty  \nmuch the same data we use as training so this \ndoesn't really say much I'm going to show you  \nhow it performs on data which the algorithm have \nnever seen with completely and absolutely unseen  \ndata and this is a very good practice if you \nwant to test the performance of a model, so I have  \nprepared a few videos so let me show you these \nvideos they are basically... remember this is  \ncompletely unseen data and this is the first video \nyou can see that this is an alpaca which is just  \nbeing an alpaca which is just walking around \nit's doing its alpaca stuff it's having an  \nalpaca everyday life it's just being an alpaca \nright it's walking around from one place to  \nthe other doing uh doing nothing no it's doing \nits alpaca stuff which is a lot this is one of  \nthe videos I have prepared this is another video \nwhich is also an alpaca doing alpaca related stuff  \num so this is another video we are going to \nsee remember this is completely unseen data and  \nI also have another video over here so I'm \ngoing to show you how the model performs on these  \nthree videos I have made a script in Python \nwhich loads these videos and just calls the  \npredict method from yolo v8, we \nare loading the model we have trained and we are  \napplying all the predictions to this model and \nwe are seeing how it performs on these videos  \nso this is the first video I showed you and these \nare the detections we are getting you can see  \nwe are getting an absolutely perfect detection \nremember this is completely unseen data and we are  \ngetting I'm not going to say 100 perfect detection \nbecause we're not but I would say it's pretty good  \nI will say it's pretty pretty good in order to \nstart working on this training process uh yeah  \nI would say it's pretty good so this is one of \nthe examples then let me show you another example  \nwhich is this one and this is the other video \nI showed you and you can see that we are also  \ndetecting exactly the position of the alpaca \nin some cases the text is going outside of the  \nframe because we don't really have space but \neverything seems to be okay in this video too  \nso we are taking exactly the position of this uh \nalpaca the bonding box in some cases is not really  \nfit to the alpaca face but yeah but everything \nseems to be working fine and then the other video  \nI showed you you can see in this case the detection \nis a little broken we have many missdetections  \nbut now everything is much better and yeah in \nthis case it's working better too it's working  \nwell I would say in these three examples this one \nit's the one that's performing better and then the  \nother one I really like how it performed too in \nthis case where the alpaca was like starting its  \nalpaca Journey... we have like a very \ngood detection and a very stable detection then it  \nlike breaks a little but nevertheless I would say \nit's okay it's also detecting this alpaca over  \nhere so uh I will say it's working pretty much \nokay so this is pretty much how we are going to  \ndo the testing in this phase remember that if you \nwant to test the performance of the model you have  \njust trained using yellow V8 you will have a lot \nof information in this directory which is created  \nwhen you are yolo the model at the end of your \ntraining process you will have all of these files  \nand you will have a lot of information to knock \nyourself out to go crazy analyzing all these  \ndifferent plots and so on or you can just keep it \nsimple and just take a look at what happened with  \nthe training loss and the validation \nloss and so on all the loss functions make sure  \nthey are going down that's the very least thing \nyou need to make sure of and then you can just  \nsee how it performs with a few images or with \na few videos, take a look how it performs  \nwith unseen data and you can make decisions from \nthere maybe you can just use the model as it is  \nor you can just decide to train it again in this \ncase if I analyze all this information I see that  \nthe loss functions are going down and not \nonly they are going down but I notice that there  \nis a lot of space to to improve this training, to \nimprove the performance because we haven't reached  \nthat moment where everything just appears to be \nstuck right like that a flat line we are very far  \naway from there so that's something I would do \nI would do a new deeper training so we can just  \ncontinue learning about this process also I w \nchange the validation data for something that's  \ncompletely different from the training \ndata so we have even more information and that's  \npretty much what I would do in order to iterate in \norder to make a better model and a more powerful model\nhey my name is Felipe and welcome to my \nchannel in this video I'm going to show you  \nhow to make an image classifier using Yolo \nV8 on your own custom data I'm going to show  \nyou every single step of this process from how \nto organize the data so it complies with Yolo V8  \nhow to do the training in your local computer \nand also from a Google Colab how to validate the  \nperformance of the model you trained and finally \nhow to take the image classifier in order to  \nmake new predictions I'm going to show you the \nentire process this is going to be an amazing  \ntutorial and now let's get started so on today's \ntutorial I'm going to show you how to train an  \nimage classifier using yolo V8 on your own \ncustom data set so let's get started and the  \nfirst thing I'm going to do is to show you the \ndata I am going to use in this tutorial which is  \na weather related dataset let me show you the \ndifferent categories we have and let me show  \nyou all the different images how they look like \nwe have four different categories and they are  \ncloudy, rain, shine and sunrise now let me show you \neach one of these categories for example the cloudy  \ncategory this is how the images look like you \ncan see that in each one of these images we have a  \nsky which is completely cloudy right we have many \ndifferent clouds for each one of these images now  \nthe sunrise category it's basically many different \npictures of sunrises so this is how this category  \nlook like and now for the shine category we have a \nsky which is completely completely clear and with  \na super super bright sun right you have the sun \nin each one of these images and it's super super  \nbright and this is the rainy category and you can \nsee these are many different pictures of super  \nrainy days so this is basically the dara set I am \ngoing to use in this tutorial but obviously you  \ncan apply absolutely everything I'm going to show \nyou today to absolutely any type of data set you  \nare going to be able to build any type of image \nclassifier with everything I'm going to say in  \nthis tutorial now let me show you the structure \nyou need for your data because if you're going  \nto train an image specifier or if you're going \nto use yolo V8 yes the data is super super  \nimportant but you also need to structure to give \nlike a format to all of your data so it complies  \nwith the way yolo V8 expects your data to be \nright yolo V8 requires your data to be in a  \ngiven format in a given structure so I'm going \nto show you exactly how to structure your file  \nsystem so everything looks the way it shloud to train \nan image classifier using yolo V8 so if I show  \nyou I have a directory which is called weather \ndata set this is going to be the root directory  \nyou can call this directory whatever you want but \nyou need a directory which is going to be your  \nroot directory and inside this directory you can \nsee we have two different folders one of them is  \ncalled train and the other one is called val and \nthis is exactly where you are going to have your  \ntraining dataset and your validation dataset right \nit's very important you name these directories  \nexactly like this one of them should be called \ntrain and the other one val now if I show you within  \nthe train directory this is where we are \ngoing to have our four directories containing  \nall the different images for all of our categories \nbasically you need to have as many directories as  \ncategories you want to classify with your model so \nin my case I want to classify an image into four  \ndifferent categories and this is why I have four \ndifferent directories  \neach one of these directories is named as the category \nI want to classify my images in right when one  \nof them is called cloudy the ther one \nis called rain then shine and then sunrise and  \nthese are the categories I want to classify all my \nimages and then within these directories, these  \nfolders is where I have all my data within cloudy \nis where I have all my data related to the Cloudy  \ncategory and so on right the same happens for \nthe rain and the shine and the sunrise category  \nso this is basically the structure you need for \nyour data the structure you need for your file  \nsystem in order to comply with what yolo v8\nis expecting for your data and then if I go  \nto the val folder you can see I have exactly the \nsame structure I have four different directories  \nand they are named under the categories I want \nto classify all my images and then if I open  \nthis directory it's exactly the same you can \nsee that I only have different images for that  \nspecific category now this is very important \nbecause from now on everything is going to be  \nsuper super straightforward if you have created \nthis structure for your file system if your data  \nis exactly in the structure I show you there \nis going to be super simple to train an image  \nclassifier in yolov8 so this is very very \nvery important now I'm going to show you three  \ndifferent ways in which you can train an image \nclassifier using yolo V8 so let's start with the  \nfirst way which is using a python script we are \ngoing to make a very very simple script in Python  \nin order to train this model and let me show \nyou how to do it so let's go to pycharm this is  \na pycharm project I created for todays tutorial\nand the first thing you should do \nif you want to work with yolo V8 is to install a couple of\ndependencies a couple of python packages \nthese are two packages we are going to use in  \nthis tutorial one of them is ultralytics and the \nother one is numpy, ultralytics is very very very  \nvery super important because this is exactly the \nlibrary you need in order to import yolo, in  \norder to train this model using yolo V8 so you \ndefinitely need these two packages, now in order to  \ninstall these packages this is how we are going to \ndo it I'm going to show you a way to install these  \npackages which is going to work with whatever your \nOS right if you are a Linux user or if you are a  \nWindows user if you use Mac it doesn't matter it's \ngoing to work anyway so you need to go to file  \nthen settings and then you have to select python \ninterpreter right this is the python interpreter  \nwe are going to use you can see that I'm using \npython 3.8 and then you need to click on plus  \nand this is where you're going to find... you're \ngoing to search for the packages you want to  \ninstall in my case I'm going to search for \nultralytics and the version I'm going to use  \nlet me copy the version first it's this one so I'm \njust going to file setting then Ultralytics again  \nand then the version is this one okay and then I \nclick on install package in my case I have already  \ninstalled this dependency so nothing is going \nto happen on my computer but please remember  \nto do it on your computer because otherwise you \nwill not be able to use or you're not going to  \nbe able to do anything of what we are going \nto be doing today now let's see numpy what's  \nexactly the version we are going to use we're \ngoing to use 1.24.2 so file settings Plus numpy\n1.4 24.2 so everything is okay now install package \nthis is like uh everything it's okay numpy has  \nbeen installed successfully so now we are ready \nto continue once we you have installed these two  \ndependencies these two packages now you're ready \nto continue and now you're ready to install your  \nown image classifier using yolo V8 so let's \ngo to main this is the file we are going to  \nuse in order to code everything we need in order \nto train this classifier and let me show you   \nexactly what's the code you need to type in order \nto do this training I'm going over here to the  \nGitHub repository of yolo V8 and I'm going to \nselect the classification section right I'm going  \nfor the classification and then here I'm going \nto click on classification docs this is going  \nto open a new file a new URL a new website a new \npage and this is exactly the all the information  \nwe need in order to train this image classifier \nI'm just going scroll down and I'm going to the  \ntrain section and this is what we're going to do I'm \ngoing to copy and paste this line which is the one  \nin the middle the one that says load a pre-trained \nmodel recommended for training I'm just going to  \ncopy and then I'm going back to Pycharm and I'm \njust going to paste it obviously we need to import  \nyolo otherwise this is not going to work \nso I'm going to say from ultralytics import YOLO\nand that's pretty much all you can see now we \nare creating our model, we are creating the  \nobject we are going to use as our model and \nthen I'm just going to copy and paste this last  \nline which is model.train I'm going to paste it \nhere and then I'm going to make a few edits I'm  \ngoing to leave this value I'm going to leave \nthe image size in 64 but then for the number of  \nepochs I'm going to set it in 1 right because \nthe first thing we're going to do is we're going  \nto do a very very dummy training in order to make \nsure everything works as expected in order to make  \nsure everything works properly and once we are \ncompletely and 100% sure everything is okay we are  \ngoing to move forward with a more deeper training \nand with a more real training right but for now  \nlet's just do the training for one Epoch and let's \nsee how it goes then for data this is where you're  \ngoing to specify the absolute part to the data \nyou are going to train this model with right in  \nmy case it's going to be this weather dataset so I'm \njust going to copy and paste the absolute path of  \nthis data set which is this... I'm going to copy this \npath and I'm going to paste it here right this is the \ndata I am going to use remember that you need to \nspecify the absolute path to the root directory  \nof your data and remember you need to structure \nyour data into the exact format that I already  \nmentioned right otherwise this is not going to \nwork and that's everything we need in order to  \ntrain this image classifier so the only thing I'm \ngoing to do is to press play I'm going to run this  \nscript so let's see what happens remember we are \nrunning this training we are doing this process  \nfor only one Epoch because we need to make sure \neverything works properly and once everything  \nis working properly we are just going to edit \nthis value we're going to make this training  \nfor more epochs but you can see everything seems \nto be working properly so everything seems to be  \nokay and everything seems to be completed and \neverything seems to be ready so that's it and  \nyou can see that the results have been saved here \nin run/classify/train12 so let me show you  \nexactly where this directory where this location \nis in my file system if I go to the project the  \npycharm project I created into my file system \nthis is exactly the project I created this is the  \nfile we are currently working in the main.py file \nand this is where my data is located and this is  \nwhere the runs directory the runs folder will be \nlocated this is where it will be created you  \ncan see that within runs we have another directory \nwhich is called classify and here is where you  \nwill have many many many folders for each one of \nyour training processes and you can see that in  \nmy case I have trained this classifier many many \nmany different times while I Was preparing this  \nvideo so there are many directories for me but \nthis is exactly the one which was just created  \nthe train12 right train12 this is exactly \nthe directory which was just created and if  \nI open this directory you can see we have another \ndirectory and then we have two files I'm going to  \nexplain what exactly all these different files and \nall these different folders are and exactly what's  \nthe information we have in all these files but \nI'm going to do it later on this tutorial when  \nwe are validating this training process right \nfor now just remember all the results will be  \nsaved here will be saved within \nthis folder within the runs folder and then within  \nclassify and then a new directory a new folder \nwill be created for the training process you have  \njust executed right this is something you need to \nremember for now but later on this tutorial I'm  \ngoing to show you exactly how you can validate the \ntraining using the information that's within this  \ndirectory but for now let's continue I'm going \nto show you now a different way in which you can  \ntrain this image classifier using yolo V8 I'm \ngoing to do... I'm going to show you how to do it  \nusing the command line using this utility and this \nis actually like a very very straightforward way  \nto do this training let me show you you can see that \nwe have three different examples I'm just going to  \nselect this one I'm going to copy and paste this \ninstruction this line and I'm going to show you  \nhow it I'm just going to paste it here and you can \nsee that we have many different parameters right  \nin the first word is yolo this is the utility \nwe are going to execute then classify this is  \nthe task we are going to execute we are going to \ntrain an image classifier and then we are going  \nto train it so we need... we have another keyword \nwhich is train and then we have these arguments  \ndata model and epochs and also image size I'm \ngoing to do exactly the same with image size  \nI'm just going to leave this value in 64 but then \nI'm going to edit all the other values so actually  \nI'm going to the number of epochs and I'm \nalso going to edit data for the number of epochs  \nlet's do something similar I'm just going to do \nit for one epoch so we make sure everything runs  \nsmoothly and everything runs properly and then \nwe can do like a more serious training a more  \nreal training for more epochs this is exactly \nthe model I'm going to use so I'm not going to  \nedit this keyword either and then I'm going to \nedit this argument and I'm just going to say  \nthis is the absolute path to my data so this is \ngoing to be exactly the same as I have over here\nsomething like this okay and that's pretty much \nall the only thing I need to do now I'm going to  \ncopy and paste this sentence and I'm just going \nto a terminal and I'm going to do something like  \nthis right I'm just copying I have just copy and \npaste that sentence and you can see that that's  \nall we need to do in order to train this image \nclassifiers using yolov8 you can see that the model...  \nthe training process has started and everything \nis running super super smoothly so everything is  \ngoing super super well that's all right that's a \nvery very quick way and a very straightforward way  \nto do this training you can see the training has \njust been completed and this is exactly where the  \nresults have been saved to runs/classify/train13, \nso everything is completed everything is ready  \nyou can see how simple how fast is to train an \nimage classifier just by running this command  \nnow I'm going to show you another way to do this \ntraining which is using a google colab we are going  \nto use a Jupiter notebook we are going to use a \nnotebook in a Google collab in order to train this  \nmodel and this is also like a very good way to do \nit so let me show you how to do it so basically  \nyou need to go to google drive you need to go to \nyour Google Drive you need to select new then more  \ngoogle collaboratory and this is going to \nopen a new notebook this is going to open  \na new notebook in Google Colab and \nis exactly what you need to do in order  \nto use this notebook to train yolo v8 \nnow I'm going to show you a notebook  \nI have already created in order to train \nthis model which is this one is called\ntrain.ipymb and obviusly I'm going to give you \nexactly this notebook in the GitHub repository  \nof today's video of today's tutorial so you can \njust use this notebook if you want now I'm going  \nto show you all these different cells everything \nthat's already writen on this notebook so  \nyou can... so you understand how exactly to use it \nand how it works and what exactly you are doing  \nat each step so let's start with the first step \nanother thing you need to do if you want to  \ntrain this image classifier is to upload all \nthe data with all the images and with all your  \ncategories into Google Drive obviously for \nexample in my case this is where I have my  \nweather data set you can see that this directory \nis exactly this same directory I have over here  \nweather data set within weather data set there \nare two directories which are train and val  \nif I if I open this directory you can see we \nalso have traiin and val so this is exactly  \nexactly the same data as in my local computer now \nthis is something very important because remember  \nto do it because you need the data in your Google \nDrive in order to train this model using a Google  \ncollab this is a very very important step please \nremember to upload your data into Google Drive  \nnow once your data is in Google Drive then you \nneed to be able to access your data from the  \nGoogle collab and in order to do that you need \nto execute this cell if I click enter you can see  \nthat now I'm going to be asked if I want \nto connect Google collab with Google Drive and the  \nonly thing I need to do is to say I accept there \nyou can see that it's requesting for my permission  \nI say connect to Google Drive and then  \nI select my account and then basically is to  \nscroll down to the bottom of this page and to \nclick allow and it's going to allow Google collab  \nto access all the data you have in your Google \nDrive so this is a very very very important step  \nnow something that's very important is that \nyou need to be able to access your data so you need  \nto know where your data is located in the Google \ndrive right you need to know exactly what's the path  \nwhat's the location of your data in Google Drive \nin my case let me show you my Google Drive you  \ncan see that my data is located into a directory \nthis is my root directory which is my drive then  \nI have another directory which is called computer \nvision engineer then another directory which is  \nimage classification yolo V8 and then data and \nthen this is where my weather data set is located  \nin your case it's going to be different obviously \nit depends on where exactly you have uploaded your  \ndata so something you may want to do is just to \nclick this... ls you can say something like ls and  \nthen you say something like content my Gdrive \nmy drive right you execute this command and if I  \nexecute this command you're going to see a very \nvery long list of files which are basically all  \nthe files which are in my root directory in \nGoogle Drive and for example this is where  \nI have the directory which is called computer \nvideo engineer and if I do ls you're going to  \nsee all these different directories if I say \nsomething like image classification yolo V8  \nthen this is data train.ipymb which is \nexactly this notebook and then if I say data\nthis is exactly where the weather data set is \nlocated right so do something like that because  \nyou definitely need to know what is the path of \nyour data in Google collab right you definitely  \nneed to do it in order to continue to The \nNext Step this is very important because if  \nyou haven't set your data properly if your data \nlocation is not set properly then yolo V8 will  \nnot be able to train your model this is very very \nimportant so in my case this is exactly where the  \ndata the weather data set is located right this is \nthe path to the weather dataset so this is the the cell  \nI am going to execute and this is the value I'm \ngoing to save in this value in data dir now  \nI'm going to continue then we need to pip install \nultralytics which is the library we need in order  \nto train this model in order to use yolo V8 now \nthe only thing you need to do is to execute this  \ncell and everything will run super smoothly you \ncan see that we have already completed this  \nprocess now I'm going to continue and the only \nthing we need to do now is to execute this cell  \nand you can see that the code we have in this \ncell is very very similar to the code we have  \nover here right basically we are running a python \nscript from a Google collab that's all we're doing  \nso you can see we are importing OS and also we \nare importing the YOLO Library we are importing  \nfrom ultralytics we're importing yolo and \nthen we are doing exactly the same as we are  \ndoing before and this is where we are using the \ndata directory the data dir variable we have  \ndefined over here right so this is why it's \nvery very important you set this variable properly  \nso the only thing I'm going to do... I'm going to \ndo exactly the same as before I'm just going to  \ndo this training for only one Epoch so we make \nsure everything's okay I'm going to press enter  \nand that should be it in order to do all \nthis training the first time you execute  \nthis training it may take a little longer because \nyou are downloading all the weights and you're  \ndownloading the models and everything but uh after \nthat everything should be much much quicker okay  \nso you can see that now the training process is \nin progress everything is going super super  \nwell and from now on the only thing we need to do \nis to edit the number of epochs so we do like a  \nmore deeper training but I will say everything is \nworking super super properly so now let's move to  \nthe other cells so I show you what exactly you \nneed to do once everything is completed once  \neverything is completed the only thing you need to \ndo is to run this cell so you are copying you are  \ngoing to copy all your results which were saved \non this directory you're going to copy everything  \non your Google drive right because remember you \nare working on a Google colab you're working  \non an environment which is your Google collab \nenvironment if you don't do something like this  \nit's going to be super super hard for you to get \nthe data you have just trained right to get your  \nresults to get your model your weights is going to \nbe super super hard because everything is located  \nin your Google collab environment and long story \nshort is going to be much much simpler and much  \nmuch better if you just do something like this \nand you just copy everything all the results which  \nwere saved in this directory into your Google \nDrive it's going to be much much better because  \nit's going to be much easier to download the weights \nto download the results and so on so now I'm just  \ngoing to wait a couple of minutes so everything is \ncompleted over here and then I can show you how to  \ncopy the results into your Google Drive okay now \nthe training process has been completed and you  \ncan see that the results have been saved into runs \nclassify train so this has a very similar output  \nto the one we just noticed when we were training on \nour local environment now the only thing we need  \nto do is to copy everything into our Google Drive \nso everything is much much simpler if you want  \nto download these results or to do whatever we \nwant so the only thing I'm going to do is to run  \nthis cell and everything will be copied into this \ndirectory which is the same directory where I have  \nmy data and where I have my my Google collab right \nnow you can see that everything has been copied  \nalready this is the directory I have just copied \nthis is the time this is the current time so this  \nis the result of the cell I have just executed and \nif I go to runs classify train you can see that  \nthese are all the results we have generated this \nis the CSV file containing many different results  \nwhich I'm going to show you in a few minutes \nand these are the weights and so on so from now  \non if we want to get this data or if we want to \nanalyze this data the only thing we need to do is  \nto select runs and then we just need to click \ndownload and it is going to download all this  \ndirectory into your local drive right you can see \neverything is being zipping and once everything  \nis zipped this directory will be downloaded \ninto my local computer and you can see that this  \ndirectory has just been downloaded so everything \nis working just fine now this is pretty much all in  \norder to show you three different ways in which \nyou can train an image classifier using yolo V8  \nand now let's do the deeper training right I'm \njust going to take this script and I'm going to  \nedit the number of epochs so we do this training \nfor something like 20 epochs I have already been  \ndoing some tests and 20 epochs is just enough for \nthis dataset for the data set I am using in this  \ntutorial so 20 will be just fine now the only \nthing we need to do is to click on run I'm just  \ngoing to run this script as it is and everything \nwill be exactly the same as before everything will  \nbe exactly the same right we are just we just need \nto wait until this process is completely we don't  \nneed to do anything from now on but this process \nwill be executed for 20 epochs so the only thing  \nI'm going to do is to wait until this process is \ncompleted and once everything is completed we are  \ngoing to validate this training process I'm going \nto show you how to analyze if all this process was  \ndone successfully or not if you have successfully \ntrained a good image classifier or not so I'm  \njust going to pause the recording here and I'm \ngoing to fast forward until this is completed  \nokay so the training process has been completed \nand now let me show you all the results which  \nwere saved here into runs classify and train14 \nnow let me show you this directory this  \nfolder in my local computer if I go to runs \nclassify and then train14 this is where all  \nthe results have been saved and this is everything \nwe are going to analyze now, now we are going to  \ndecide if the model we have trained is a good \nmodel or not we are going to decide if this  \nis a model we can use or not so you can see that \nthere are two files args.yaml and results.csv and  \nanother directory called weights let's start \nby args.yaml if I open this file you can see  \nthat this is something like a config file and \nthis is exactly the entire configuration file  \nwhich we have just used in order to train this \nmodel this is very important because this is a  \nsuper super comprehensive list of all the hyper \nparameters we have used in order to train this  \nmodel and for example the only parameters we have \nspecified are image size number of epochs and then  \ndata the location of the data we have just used \nand you can see that we have a keyword which is  \ndata then epochs then image size and then we \nhave many many many other keywords as well  \nthis is very important because these are \nabsolutely all the keywords we have used  \nwe have used all these default values which were \nset for all these different keywords and this is  \nimportant in case we want to train a new model \nand we want to make some changes into some of  \nthese hyper parameters now let me show you the \nother file which is the results.csv file I would   \nsay this is much more important this is like the \nfile containing all the information we need  \nin order to decide if this is a good model or not \nand you can see that we have many different rows  \neach row for one of our training epochs right we \nhave trained this model for 20 epochs and you can  \nsee that we have 20 rows for each one of these \nepochs and for each one of these rows we have all  \nthis different information and we are going to \nfocus on these three values on the training lose  \nthe accuracy, this is the accuracy of the \nvalidation set and then also the validation  \nloss right these are the three keywords in which \nwe are going to focus on this tutorial in order  \nto validate this model and I'm going to give you \nlike a very very quick tip like a very quick way  \nin order to analyze this training process which \nis make sure the training loss and the validation  \nloss are going down through this training process \nand also make sure the accuracy goes up and I know  \nyou're thinking hey this is a very simple way \nto analyze this process felpe yeah I agree with  \nyou this is a very simple way but at the same \ntime it's very robust this is like a a very  \nsimple but at the same time very powerful way to \ndecide if you have a good model or not now we can  \nanalyze all these numbers but I think it's going \nto be much much better and it's going to be much  \nmuch prettier if we make a plot with all these \nnumbers right because we have epochs in this  \num in this column in this coordinate and \nwe also have all these different values  \nand we can definitely plot these values across all \nthese different epochs so let me show you a python  \nfile I have created and this is exactly what \nthis python file does this file is called  \nplot_metrics and if I open this file you can see that \nit basically we need to set the path to our results.csv  \nfile in our case I'm going to set it to \ntrain14 and you can see this is run/classify/train14  \nand thenresults.csv and then this is only \nlike some logic some very simple logic to take all  \nthe data from these results.csv file and to do \nsome plots with it right that's all we are doing  \nwe're just taking the data and doing some plots \nand this file will be available in the GitHub  \nrepository of this project of this tutorial so you \ncan definitely take this file and you can just use  \nit to to plot your functions as well all I'm going \nto do now is just press play and you can see that  \nif we wait only a few seconds we get all these \ntwo plots right and this is all the information  \nin our CSV file right everything I showed you \nover here it's summarized on these two plots  \nso this is exactly what I mean with make sure your \nloss is going down this is your   \nloss in the training set and in the validation \nset in the training set we are plotting the loss  \nin blue and in the validation set is red and you \ncan see that in both cases the loss is going down  \nright which is exactly what we expect it's exactly \nwhat we want now this is a very very simple way to  \nanalyze this process but trust me this is also a \nvery powerful way right this is something that's  \nvery very healthy something that looks like \nthis it's very healthy and then for this other  \nplot which is how the validation accuracy evolves \nthrough this training process you can see that the  \nevaluation accuracy goes up when we increase the \nnumber of epochs right you can see that starting  \nfrom the 10th Epoch or so everything starts to be \nlike somehow iddle right we are not really gaining  \na lot of accuracy from here but we are not losing \naccuracy either right we are just in something  \nlike a plateau and this this is exactly how a  \nvalidation accuracy plot should look like right we  \nare starting from a very low value and then we \nare just increasing our accuracy until we reach  \na very high value of accuracy right this is like \na very healthy training process now obviously we  \ncould make this process even better if we just \ntune if we just change some of these parameters  \nand if we do like a more customized training I'm \nsure we are... we will be able to have a better model  \nright because remember we are using all the default \nvalues so as it usually goes if we make like a  \nmore customized training and \nwe try different parameters and so on we should  \nbe able to get like a better model but obviously \nwe're not going to do it in this tutorial because  \nI just wanted to show you like the end-to-end of \nhow to train this image classifier but remember  \nyou could do it even better than this if you make \nlike a more custom model so this is pretty much  \nall for analyzing these plots which are the \nvalidation accuracy and the loss function in  \norder to validate your training and then it's like \nthis directory which is the weights directory  \nyou can see that this directory is called weights \nand this is exactly where the models will be saved  \nthis is very important because you have trained \na model and now obviously you want this model in  \norder to use it in your images in your data and \nthis is exactly where you are going to find this  \nmodel and you can see that you have two different \nfiles one of them is called last.pt another one  \nis called best.pt now let me explain exactly what \nthese two files are and exactly what they mean so  \nremember how this training process works right \nremember that you have a model you have a deep  \nlearning model which is comprised of many many \nmany different weights and the way it goes is  \nthat at the end of every Epoch right at the end of \nthe first Epoch of the second epoch of the third  \nepoch and so on you are updating the weights \nof your model you are updating the weights of  \nyour architecture of your deep learning model so \nthe way it works is that at the end of every  \nEpoch you have a model available which is a model \nyou have trained so far with all the process you  \nhave followed so far so last.pt means that \nyou are taking the model which was the result of  \nthe last Epoch of your training process right \nremember at the end of absolutely every single  \nEpoch you have a model available which you can \ndefinitely use if you want to in order to produce  \nyour inferences and so on, so last.pt only \nmeans that you are taking the last Model the model  \nwhich was produced at the end of your training \nprocess at the end of the last Epoch in your  \ntraining process so at the end of the 20th Epoch \nin our training process we are producing this model  \nWhich is last.pt but you may Wonder hey Felipe \nyeah it's great because at the end of our  \ntraining process our accuracy is something \nlike a 93% right a 93% it's  \na very good accuracy but if we take the accuracy \nif we take the model at the end of the 16th Epoch  \nfor example our accuracy it's higher it's a \n94.9 % maybe it makes more sense to take  \nthat model instead right because we have an even \nbetter accuracy we have an even higher accuracy  \nand if you ask me something like that I would say \nyeah you're perfectly right you're you're super  \nsuper right that's a very valid argument and \nthat's exactly what the best.pt model is right  \nwe are saving the weights of the best model in \nour entire training process so if we look at  \nour data the best model in our training process is \nthis one if I'm not mistaken right it's the model  \nwe produced at the end of the 16th Epoch and our \naccuracy our validation accuracy was 94.9%  \nso this is definitely higher than the accuracy \nwe got at the end of this training process  \nwhich has which was a 93.5 and if we will take \nthe best model we have produced in the entire  \nprocess in the entire training process then \nwe will definitely need to take this model so  \nthis is exactly what best.pt represents is the \nbest training the best model you have trained  \nin your training process and if you ask me what I \nusually do is take in the model which was produced  \nat the end of the training process right what \nI usually do is take in the last,pt file  \nbecause I consider that if this is a model we \nhave produced at the end of the training process  \nin this model we are summarizing much more \ninformation right because we are considering  \nmuch more data we are considering much more \neverything in all this training process many  \nthings are going on many many things are going \non and remember there's a lot of Randomness in  \nthis training process so I, me, personally \nI consider that if I take the model which was  \ntrained at the end of this process is a much \nbetter option that if I choose a another one  \nif I choose like the best model or the model which \ngot the highest accuracy but it's not the last  \nModel that's what I usually do I usually take \nthe last model which was produced at the end of  \nthe training process but if you want to take the \nbest model if you want to take best.pt \nit also makes sense because you are taking the model \nwhich produced the highest accuracy right  \nso you can do either one of them and I think it's \na very a good option that's why you have these  \ntwo files because you can use one of them or you \ncan use the other one and I would say that making  \nlike a very very like the best decision on which \nmode to use depends on many different variables  \ndepends on many different things depends on your \ndata depends on your problem depends on your use  \ncase depends on your training process \ndepends on many many different things which is  \nthe best option right so remember you have these \ntwo models and it's all up to you it's all up to  \nyour specific project and it's all up to your \npreferences which model you want to use right  \nif the best model which you have produced through \nthe entire training process or if you want to use  \nthe last Model the model which you have produced \nat the end of your training process so now let's  \ngo back to pycharm because now it's time to make \nour inferences now it's time to predict new   \nsamples right and we are going to input an image \nand we're going to use our image classifier in order to  \npredict which category this image belongs to so \nlet me show you how to do it I'm going to import  \nfrom ultralytics import YOLO and then \nlet's go back to this page because now we  \nare going to move to the predict section and \nthe only thing I'm going to do is to copy  \nthis sentence... going to paste it here and then \nI'm going to specify the path the absolute path  \nto the model which we have trained right \nwe don't really need to make it like the  \nabsolute path we can use the relative path \nso I'm going to do something like this right  \nsorry something like this so this is the path to \nthe model we have just trained right this is the  \nlast model which we produce at the end of this \ntraining process and this is the model I'm going  \nto use in order to show you how this works and \nnow let's copy this additional sentence which is  \nresults = model and the model path the image \npath right you can see that you can use an image  \nin your local computer in your file system or you \ncan also use something like an URL for example  \nin this case in this example which is in the \nyolo V8 website you can see that the example is  \nusing an URL and this is also going to work so \nin my case I'm going to use an image in my local  \ncomputer I'm going to use one of the images I used \nfor training because I only want to show you how  \nthis works but obviously you can use whatever \ndata whatever image you want so this is the  \nimage I am going to use I'm just going to use I'm \njust going to inference this image right which is  \nthe first image in my Sunrise category data so \nthis is going to be something like sunrise1.jpg\nand this is pretty much all so these are \nthe results the first thing I'm going to  \ndo is just trying to run this code and let's see \nwhat happens everything should run smoothly but  \nthis is where we are going to see if we have an \nerror or something like that we may need to wait a  \ncouple seconds and everything seems to be working \nfine because we didn't get an error so what I'm  \ngoing to do now is I'm going to print results \nbecause I want to show you a couple of things  \nso this is the entire information we are getting \nwhen we are printing results right you can see  \nthat this is a lot of information we have these \nprobabilities which is the inferences we are  \nmaking this is exactly the result of applying \nour image classifier and then we have a lot of  \ninformation another object or another result \nwhich is very important is this one which are  \nthe names of the categories we have just trained \nour image classifier on right you can see this is  \ncloudy rain shine sunrise and also you can see \nthat we have different integer values for each one  \nof these categories so this is something like a \ndictionary because we are going to have a result  \nfrom applying our image classifier and then \nwith this result which is going to be an integer  \nwe are going to call this dictionary we're \ngoing to call this object because we want to  \nknow exactly what's the name of the category we \nhave just inferenced right so this is how we're  \ngoing to do it I'm going to call another variable \nwhich is going to be names something like  \nnames dictionary names_dict and this is results \nzero because results is a list in this case  \nwe only want to access the first element because \nwe are only predicting an individual image so this  \nis the element we want and then we are \ngoing to call Dot names and that's pretty much  \nall then I'm going to Define another variable \nwhich is props and this is results 0 dot props  \nand this is the probability Vector of all the \ndifferent categories we are trying to classify  \nright so we are going to have a length 4 array \nwith the probabilities of the different classes  \nwe are classifying right so let me show you how \nprops looks like I'm going to print props and I'm  \ngoing to do something else I'm going to say to \nlist so we make this object into a list we are  \nusing yolo which is based on pytorch so if we \ndon't do this if we don't call this method we will  \nbe working with a torch object right with a tensor \nso we don't really want to do that so that's why  \nI'm doing this tolist now I'm going to print \nprops so I show you how it looks like and I'll  \nshow you how to continue from here okay you can \nsee that this is a result we got from applying from  \nprinting props and you can see that this is a list \nwith four elements one two three and four and each  \none of these elements are the probabilities \nof this image to be one of these categories  \nright let's print the names too so we have all \nthe information in our screen I want to show  \nyou I want to show you something so I'm going to \nprint sorry this wasn't names this was names dict\nand now let's wait a couple of seconds I want \nto show you not only the probabilities but  \nalso the class names so it's a little more clear what \nexactly I'm going to show you now so this means  \nthat this number is the probability for this \nimage to be cloudy right this other number is  \nthe probability for this image to be rain this \nother number is probability to be shine and  \nthen this last number is the probability to be \nsunrise and you can see by the values that we  \nare definitely classifying this image as Sunrise \nright because this is almost a one this is almost  \nlike a super super confident and absolutely \nconfident classification so this is exactly  \nthe category we are classifying for this image and \nthis is how to make sense of this information so  \nwhat I'm going to do now is to print names dicts \nand then I'm going to call np dot  arg max\nand then I'm going to input the probability list \nI just showed you and obviously I need to import\nnumpy as np otherwise is not going to work and \nbasically what we are doing here is that we  \nare looking at this list the one containing all \nfour probabilities we are taking a look at the  \nmaximum number which in this case is this one and \nwe are taking the index of this maximum number so  \nin this case this is the first element so this is \nthe index 0 this is one this is two and this is  \nthree right so from this um from calling np dot \narg max props we are getting three and then we  \nare calling the third element of the names_dicts \nobject so we go here and we see that 3 belongs to  \nthe sunrise category and if we look at this image \nagain we are going to see we are in fact plotting  \na sunrise let me show you so everything seems to \nbe working fine and this is going to be all for  \ntoday this is exactly how you can train an image \nclassifier using yolo V8 in your own custom data  \nand this is going to be all for this tutorial \nso in my previous videos I showed you how \nto train an image classifier and an object  \ndetector using yolo V8 now is the time for \nsemantic segmentation I'm going to show you  \nthe entire process of how to train a semantic \nsegmentation algorithm using yolo V8 from  \nhow to annotate the data how to train \nthe model in your local environment and  \nalso from a google colab and finally a super super \ncomprehensive guide on how to validate the model  \nyou trained my name is Felipe welcome \nto my channel and now let's get started  \nso let's start with tpday's tutorial and the first \nthing I'm going to do is to show you the data  \nwe are going to be using today so this is a \ndataset I have prepared for today's tutorial and  \nyou can see that these are images of ducks we are \ngoing to be using a duck dataset today and this is  \nexactly how the images look like now for each one \nof our images for absolutely every single one of  \nour images we are going to have a binary mask we \nare going to have an image a binary image where  \nabsolutely every single Pixel is either white or \nblack and absolutely every single white pixel it's  \nthe location of our objects all the white pixels \nare the location of the objects we are interested  \nin in this case the objects are our Ducks so let \nme show you an example so it's a little more  \nclear what I mean regarding the white pixels are \nthe location of our objects so this is a random  \nimage in my data set this a random image of a duck \nand this exactly its binary mask so take a look  \nwhat happens when I align the these two images \nand when I apply something like a transparency  \nyou can see that the binary mask is giving us the \nexact location of the duck in this image so this  \nis exactly what it means that the white pixels are \nthe location of our objects so this is exactly the  \ndata I am going to using in this tutorial and now \nlet me show you from where I have downloaded this  \ndata set this a dataset I have found in the \nopen images dataset version 7. let me show you  \nthis dataset super super quickly this is an \namazing dataset that you can use for many different  \ncomputer vision related tasks for example if I \ngo to segmentation you can see that we have many  \nmany many different categories now we are looking \nat a random category of phones this is for example  \na semantic segmentation data set of phones and \nlet me show you if I go here and I scroll down  \nyou can see that one of the categories is here \nduck so this is for example the exact same data  \nI am going to be using in this tutorial this is \nthe exact same duck dataset I am going to be  \nusing in order to train a semantic segmentation \nalgorithm using yolo V8 and obviously you could  \ndownload the exact same data I am going to use in \nthis tutorial if you go to open images dataset  \nversion 7 you can just download the exact same \nduck dataset I am going to be using today or you  \ncan also download another dataset of other categories \nso this is about the data I am going to use in  \nthis project and this is about where you can \ndownload the exact same data if you want to, now  \nlet me show you a website you can use in order \nto annotate your data because in my case I have  \ndownloaded a dataset which is already annotated \nso I don't have to annotate absolutely any of my  \nimages absolutely all of my images already have \nits binary masks right I already have the masks  \nfor absolutely all the images in my data set but \nbut if you're building your data set from scratch  \nchances are you will need to annotate your images \nso let me give you this tool which is going to  \ngive you which is going to be super super useful \nin case you need to annotate your data it's called  \ncvat and you can find it in cvat.ai and this is \na very very popular computer vision annotation  \ntool I have used it I don't know how many times \nin my projects and it's very very popular and  \nit's very useful so I'm going to show you how to \nuse this tool in order to annotate your images  \nso the first thing we need to do is to go to \nstart using cvat this is going to ask you to  \neither register if you don't have an user already \nor to login right I already have an user so  \nthis is logged into my account and now let me show \nyou how I'm going to do in order to annotate a few  \nimages actually I'm going to annotate only one \nimage because I am only going to show you how to  \nuse it in order to create a binary mask for your \nproject but I'm just going to do it with only one  \nimage because it's yeah you only need to see the \nprocess and that's going to be all so I'm going  \nto projects I'm going to here to the plus button \ncreate a new project the name of this project will  \nbe duck semantic sem seg this will be the name \nof my project and it will contain only one label  \nwhich is duck so I'm going to press continue \nand that's pretty much all submit and open\nnow I'm going to create a task this is already \nyeah create new task the task name will be duck\ntask\nzero one it doesn't really matter the name so \nI just I just selected a random name then I'm  \ngoing to add an image I'm just going to select \nthis image I'm just going to annotate one image  \nso this is going to be enough and submit and open \nso this is going to take a couple of seconds this  \nis where you need to select all of your images \nall the images you want to annotate but in my  \ncase I'm only going to select one so I'm going to \npress here in Job so this is going to open The  \nannotation job right now I'm going to show you how \nyou can annotate this image how you can create a  \nbinary mask for this image you need to go here to \ndraw new polygon then shape so I'm going to start  \nover here and this is pretty much all we need to \ndo in order to create this semantic segmentation  \ndata set for this image right in order to create \nthe binary mask for this image you can see that  \nI'm just trying to follow the Contour of this \nobject and you may notice that the Contour  \nI am following is not perfect obviously this is \nnot perfect and it doesn't have to be perfect  \nif you're creating a dataset if you are creating \nthe mask of an image if you are creating the  \nmask of an object then it definitely doesn't need \nto be pixel wise perfect right you need to make a  \ngood mask obviously but something like this as \nI am doing right now will be more than enough  \nso this is a very time consuming process you \ncan see and this is why I have selected only  \none because if I do many many images it's going \nto take me a lot of time and it doesn't make any  \nsense because the idea is only for you to \nsee how to annotate the images right so you can  \nsee that I'm following the Contour okay and this \nis an interesting part because we have reached the  \nduck's hand or its leg or something like that \nthis part of the duck's body and you can see  \nthat this is beneath the water this is below the \nwater and this is where you're going to ask  \nyourself do you need to annotate this part or not \ndo you need to annotate this part as if it's part  \nof the duck or not because you could say yeah \nit's definitely part of this duck but you are not  \nreally seeing a lot of this object right it's like \npart of the water as well so this is where you're  \ngoing to ask yourself if you need to annotate this \npart or not and in my case I'm going to annotate  \nit but it's like you can do either way in all of \nthose sections in all of those parts where you are  \nnot 100% convinced then that's like a discussion \nyou could do it you could not do it it's up to you  \nso annotating a few images is always a good \npractice because you are going to see many many  \ndifferent situations as I have just seen over \nhere right where I have just seen with this part  \nof the duck which now I am super super curious \nwhat's the name if you know what's the name  \nof this part of the duck's body please let \nme know in the comments below I think it's  \ncalled hand right because it's something like \na hand they have over there but let me know if  \nit has another name and you if you know \nit please let me know in the comments below  \nnow let's continue you can see I'm almost there \nI have almost completed the mask of this duck  \nnow I only have to complete this \npeak or whatever it's called  \nit seems I don't really know much about ducks \nAnatomy I don't really know what is the name of this  \npart either so anyway I have already completed \nand once I am completed I have to press shift N and  \nthat's going to be all so this is the mask this \nis a binary mask I have generated for this object  \nfor this duck and this is going to be pretty \nmuch all what I have to do now is to click save  \nyou can see that this is this is definitely not \na perfect mask this is not a perfect like pixel  \nwise perfect mask because there are some parts \nof this duck which are not within the mask but it  \ndoesn't matter make it as perfect as possible but \nif it's not 100% perfect it's not the end of the  \nworld nothing happens so I have already saved this \nimage and what I need to do now is to download  \nthis data so I can show you how to download the \ndata you have just annotated in order to create  \nyour data set so this is what I'm going to do \nI'm going to select this part this option over  \nhere and I'm going to export task data set and \nthen I'm going to select this option which is  \nsegmentation mask 1.1 I'm just going to \nselect that option and I'm going to click  \nok so that's going to be all we only \nneed to wait a couple of minutes and  \nthat's pretty much all the data has been \ndownloaded now I'm going to open this file  \nand basically the images you are interested in \nare going to be here right you can see in my  \ncase I only have one image but this is where \nyou're going to have many many many images  \nand please mind the color you will get all these \nimages in right in my case I have a download this  \nimage in red it doesn't really matter just mind \nthat you could have something different than  \nwhite but once you have all your images what \nyou need to do is to create a directory I'm  \ngoing to show you how I do it I am going maybe \nhere and I'm going to create a very temporal  \ndirectory which I'm going to call tmp and this \nis where I'm going to locate this image right  \nand I am going to I'm going to create two \ndirectories one of them is going to be masks\nand then the other one is going to be called \nlabels and you're going to see why in only a  \nminute and this is where I'm going to locate \nthe mask here and then I am going to pycharm  \nbecause I have created a script a python script \nwhich is going to take care of a very very very  \nimportant process we have created masks which are \nimages which are binary images and that's perfect  \nbecause that's exactly the information we need in \norder to train a semantic segmentation algorithm  \nbut the way yolo V8 works we need to convert \nthis image this binary image into a different  \ntype of file we are going to keep exactly the \nsame information but we are going to convert  \nthis image into another type of file so let \nme show you how this is a phyton file I have  \ncreated in order to take care of this process \nand the only thing you need to do is to edit  \nthese fields this is where you're going to put \nall the masks this is a directory which is going  \nto contain all the masks you have generated \nand this is going to be the output directory  \nyou can see that these two variables are already \nnamed properly in my case because this is the tmp  \ndirectory I have just created this is where \nI have located the mask I have just generated  \nwith cvat and this is my output directory \nso take a look what happens when I press play  \nso the script has just been executed everything \nis okay this is the mask I have input and  \nthis is the file which was generated from this \nmask and this looks super super super absolutely  \ncrazy right it's a lot of numbers it's like \na very very crazy thing without going to the  \ndetails let's just say that this is exactly the \nsame information we had here this is exactly  \nexactly the same information we have here but in \na different format let's let's keep the idea right  \nexactly the same information in a different format \nand that's exactly the format yolo V8 needs  \nin order to train the semantic segmentation \nmodel so this is exactly what you need to do  \nonce you have created all of your masks you need \nto download these files into your computer and  \nthen please execute this script so you can \nconvert your images into a different type of files  \nand obviously this script will be available in \nthe GitHub repository of today's tutorial so  \nthat's pretty much all in order to create \nyour annotations in order to download these  \nannotations and in order to format everything the \nway you should now let me show you the structure  \nyou need to format the way you need to structure \nall of your file system so it complies with  \nyolov8 remember this is something we have already \ndone in our previous tutorials regarding yolov8  \nonce you have your data you need to structure \nyour data you need to format your data you need to  \nstructure your file system so yolo V8 finds \nabsolutely where everything is located right  \nyou're going to locate your images in a given \ndirectory you're going to locate your annotations  \nyour labels in another directory so everything \nis just the way yolov8 expects it to be  \nright so let me show you I have a directory \nwhich is my root directory which is called Data  \nwithin data I have three directories but this \ndirectory the Masks directory is not really  \nneeded it's just there because that's the way I \ngot my masks my data but it's not really needed  \nin order to show you this directory which is the \none containing all of my binary masks in order  \nto be more clear that this is not needed for this \npart of this process what I'm going to do is I'm  \ngoing to delete this directory right now it's \ngone okay now we only have two directories and  \nthese are exactly the directories we need in this \npart of this process where we are creating all  \nthe structure for our data so images you can see \nthat we have two directories one of them is called  \nimages the other one is called labels within \nimages we have two other directories one of them is  \ncalled train and the other one is called val and \ntrain is the directory where we are going to  \nhave all of our training data this is where we are \ngoing to have all of our training images these are  \nall the images yolo V8 is going to use in order \nto train the model in order to train the semantic  \nsegmentation model then val also contains images \nand these are the images we are going to use in  \norder to validate the model right so remember you \nneed to have two directories one of them should be  \ncalled train is very important the name it should \nbe called train and the other one should be called val  \nnow going back you can see that we have two \ndirectories one of them is images the other one  \nis labels and if I go within labels you can see \nthat there are two directories also they are named  \ntrain and val and if I open these directories \nthese are the type of files I have generated with  \nthe exact same script I showed you a few minutes \nago so within labels we have two directories  \ntrain and val and train are all the annotations \nwe have generated from the training data from the  \ntraining masks right and long story short we have \nour root directory within the root directory have  \ntwo directories one of them is called images \nthe other one is called labels within images  \nwe have two directories train and val within \ntrain and within val it's all of our data all  \nof our images and within labels it's exactly the \nsame structure two directories train and val and  \nwithin train and within val it's where we locate \nall of our annotations right that's exactly the  \nstructure you need for your data please remember \nto structure your file system like this otherwise  \nyou may have an issue when you are trying to train \na semantic segmentation model using yolo V8  \nso that's pretty much all in order how to \nstructure the data and now let's move to  \nthe interesting part let's move to the most fun \npart which is training this semantic segmentation  \nmodel now let's move to pycharm and I will show \nyou how to train it from your local environment  \nso let's continue this is a pycharm project I \ncreated for today's tutorial please remember to  \ninstall this project requirements otherwise you \nwill not be able to use yolo V8 now let's go  \nto train.py this is a python script I created and \nthis is where we are going to do all the coding we  \nneed in order to train the semantic segmentation \nmodel using yolo V8 and now let's go back to the  \nyoloV8 official repository because let's see \nhow exactly we can use this YOLO this model in  \norder to train this semantic segmentation model \nI'm going to the segmentation section and I'm  \ngoing to click on segmentation Docs now this \nis going to be very very straightforward I'm  \ngoing to train I'm going to copy this sentence \nwhich is load a pre-trained model and then going  \nback to pycharm I'm just going to copy paste and \nthen I am going to from ultralytics import YOLO\nthen I'm also going to copy this sentence \nwhich is a model.train I'm going to change  \nthe number of epochs of 2 something like one \nbecause remember it's always very very healthy  \nit's always a very good idea to do like a very \ndummy training to train the model for only one  \nEpoch to make sure everything is okay to make \nsure everything runs smoothly and then you do  \nlike a more more deeper training so I'm going \nto change the number of epochs and then I'm  \nalso going to change the config file I'm going \nto use this config file which is a config file  \nI have over here and obviously you will find this \nconfig file in the repository of today's video so  \nlong story short you can see that you \nhave many many different keywords but the only  \none that you need to edit is this one right this \nis the absolute path to your data in my case if  \nI copy and paste this path over here you can see \nthat this is the directory which contains the  \nimages and the labels directories so long \nstory short just remember to edit this path to  \nthe path to the location of your data because \nif you have already structured everything in  \nthe way I mentioned in the way I show you in \nthis video then everything else will be just  \nfine right the train and the val keywords are \nvery good as it is I mean you can just leave  \neverything as it is but please remember to edit \nthis field which is the location of your data  \nnow going back to train.py this is pretty much \nall we need to do in order to train the semantic  \nsegmentation model so I'm just going to press \nplay and let's see what happens and you can see  \neverything is going well we are training our model \nbut everything it's taken forever everything is  \njust going to take forever even though we are only \ntraining this model for only one Epoch everything  \nis going to take a lot of time so what I'm going \nto do instead is just press stop I'm going to stop  \nthis training everything is going well I'm not \nstopping this training because I had an error  \nor something no everything is going well but I am \ngoing to repeat the exactly the same process from  \na Jupiter notebook in my Google collab because \nif I use Google collab I'm going to have access  \nto a free GPU and it's going to make the process \nmuch much much much faster so I am going to use  \na google colab in order to train this model and \nI recommend you to use a Google collab as well  \nso I'm going to show you how to do it from \nyour Google collab environment please remember  \nto upload your data before doing anything in \nGoogle colab please remember to upload your  \ndata otherwise it's not going to work for example \nhere you can see I have many directories one  \nof these directories is data and within data you \nhave labels and images and these are exactly the  \nsame directories I have over here so I have \nalready uploaded my data into my Google Drive  \nplease remember to do it too otherwise you will \nnot be able to do everything we're going to do  \njust now right so that's one of the things you \nneed to upload and then also remember to upload  \nthis config.yaml file the same file I showed you \nin my local computer you also need this file here  \nthe only thing you will need to edit is this \npath because now you need to specify the path  \nthe location of your data in Google Drive so I'm \ngoing to show you exactly how to locate your data  \ninto your Google Drive and now let's move to the \nJupiter notebook obviously I'm going to give you  \nthis notebook this is going to be in the GitHub \nrepository of today's tutorial so you can just  \nuse this notebook I'm just going to show you how \nto execute absolutely every single cell and how  \neverything works right and exactly how everything \nexactly what everything means right exactly what  \nare you doing absolutely every single cell so the \nfirst thing I'm doing is just connecting  \nmy Google collab environment we google drive because \nremember we need to access data from Google Drive  \nso we definitely need to allow google collab to \naccess Google Drive so I'm just going to select  \nmy account and then I scroll all the way down and \npress allow that's going to be pretty much all we  \nneed to wait a couple of seconds and now let's \ncontinue what I'm going to do now is to Define  \nthis variable which is data dir and this is \nthe location of my data in my Google Drive now  \nplease mind this path this location because please \nmind the way this is structured right please mind  \nthe first word is content then gdrive then my \ndrive and then is my relative path to my data so  \nif you want to know exactly where you have upload \nyour data if you're not completely sure where you  \nhave uploaded your data what you can do is to do \nan ls like I'm doing right now and it's going  \nto give you all the files you have in the root \ndirectory of your Google Drive then from there  \njust navigate until the directory where you have \nuploaded your data in my case is my drive computer vision  \nengineer image segmentation yolo V8 and then \ndata that's exactly where my data is located in  \nGoogle Drive if I go to this directory you can see \nthat this is my drive then you can see that this  \nis my drive then computer vision engineer image \nsegmentation yolo V8 and then data and this  \nis exactly what I have over here so once you have \nlocated your data the only thing you need to do is  \nto edit this cell and to press enter so everything \nis ready now I'm going to install ultralytics so  \nI can use yolo V8 from The Notebook and this \nis going to take a few seconds but this is going  \nto be ready in no time, something you need to \ndo from your Google colab is to go to runtime  \nand change runtime type just make sure it \nsays GPU just make sure you are using Google  \ncollab with GPU because if you are not using a \ngoogle collab with GPU everything is pretty much  \npointless right so just remember to check if \nyou are using a Google colab with GPU or not just  \ndo it before you start all this process because \notherwise you will need to run absolutely  \neverything again so let's continue I have already \ninstalled ultralytics and now I am going to  \nrun this cell and if you realize this is exactly \nexactly the same type of information the same code  \nI have over here in my local environment right I'm \njust defining a model and then I am just training  \nthis model so what I need to do now is just \npress enter and also mind that I have specified  \nthe config file right the location of my config \nfile and now I'm going to run a full training or  \nactually I'm going to run a training for 10 epochs \nso this is what I'm going to do and this is also  \ngoing to take some time although we are going to \nuse a GPU this is going to take a few minutes as  \nwell so what I'm going to do now is just I'm going \nto wait until this is completed and I'm going to  \npause my recording here and I'm just going to fast \nforward this video until this process is completed  \nokay so the training process is now completed we \nhave trained this model and everything is just  \nfine and you can see the results have been saved \nhere under runs segment and train2. so the only  \nthing we need to do now is to get the results we \ngot from this training we need to get the weights  \nwe need to get all the results all the different \nmetrics or the different plots because what we  \nneed to do now is to analyze this training process \nwe need to validate that everything is just fine  \nright so what we are going to do now is to get \nall this information and the easiest way to do  \nit is just running this command what we will do \nwhen running this command we are going to copy  \nall the content in the this directory \nwhere the results have been saved under our  \nGoogle Drive right remember to edit this URL, remember \nto edit this path, this location, because  \nyou want to copy everything into a directory into \nyour Google Drive so just make sure everything is  \nokay make sure this location makes sense and you \ncan just execute this cell and you're going to  \ncopy everything into your Google Drive now let me \nshow you my Google Drive I have already executed  \nthis cell so everything is under my Google Drive \nthis is the runs directory which was created when I ran  \nthat cell and under this other directory which is \ncalled segment we have train2 so these are all  \nof our results these are the results we are now \ngoing to analyze so what I'm going to do now is  \njust to download this directory and once we have \nthis directory into our local computer then we are  \ngoing to take a look at all the plots at all the \nmetrics and I'm going to tell you exactly what  \nI usually do in order to validate this training \nprocess so everything is now downloaded everything  \nis now completed and let's take a look at these \nfiles so what I'm going to do is I'm just going to  \ncopy everything into my desktop I need to do some \ncleaning by the way so these are all the results  \nwe got from this training process you can see that \nthis is a lot of information this is definitely  \na lot of information right we have many many \ndifferent files we have many different everything  \nwe have the weights over here we have a lot of \ninformation so let me tell you let me give you  \nmy recommendation about how to do this evaluation \nhow to do this validation from all these plots and  \nfrom all of these results I would recommend you \nto focus on two things one of them is this plot  \none of them is all of these metrics \nand then I'm also going to show you how to take  \na look at these results at these predictions \nfrom these images but for now let's start here  \nyou can see that this is a lot of information \nthese are a lot of metrics and you can  \ndefinitely knock yourself out analyzing all the \ninformation you have here you can definitely go  \ncrazy analyzing all of this information all \nof these plots but I'm going to show you like  \na very very simple and a very straightforward way \nto do this analysis to do this validation this is  \nsomething that I have already mentioned in my \nprevious videos on yolo V8 on how to train a  \nmodel and how to validate this model which is take \na look what happens with the loss function take a  \nlook what happens with your loss plots with all \nthe plots which are related to the loss function  \nand as this is a semantic segmentation type \nof algorithm I would tell you take a look what  \nhappens with this loss with the segmentation loss \nI would say take a look what happens\nwith the training loss and the validation loss\nand long story short just make sure the loss \nfunction goes down right if your loss function is  \ngoing down it's likely things are going well it's \nnot a guarantee maybe things are not really going  \nthat well and the model it doesn't really perform \nthat well it may happen but I would say that if the  \nloss function is going down it's a very good sign \nif at the contrary your loss function is going up  \nI would say you have a very very serious problem \nI would say there is something which is seriously  \nwrong with your training process or with your \ndata or with your annotations or with something  \nyou have done something seriously wrong or there's \nsomething seriously wrong with your data but I'm  \ntalking about something amazingly wrong seriously \nwrong right if your loss solution is going up  \nI don't know what's going on but something is \ngoing on do you see what I mean so having a  \nloss function which is going down yeah it's not \na guarantee of success I mean it's not like it's  \na good model for sure no you may have a \nsituation where you haven't trained a good model  \nand your loss function is going down anyway but I \nwould say that it's a very very good sign at the  \nvery least your training loss and your validation \nloss should go down and I'm talking about a trend  \nof going down right for example here we have a \nfew epochs in which the loss function is going up  \nthat's okay that's not a problem we are looking \nfor a trend we should have a trend for the loss  \nfunction to go down and that's exactly what \nwe have in this situation so long story short  \nthat's my recommendation on how to do this this \nvalidation how to do this analysis on all the  \nmetrics we have over here for now focus on these \ntwo and make sure they are going down and then  \nin order to continue with this process with \nthis validation is that we are going to take  \na look at what happens with our predictions how \nis this model performing with some data with some  \npredictions and for this we are going to take \na look what happens with all of these images  \nright you can see that these are some batches \nand these are some some of our labels some of  \nour annotations for all of these images and then \nthese are some of the predictions for these images  \nright so we are going to take a look what happens \nhere and for example I'm going to show you these  \nresults, the first image, and you can see \nthat looking at this image which again these are  \nnot our predictions but this is our data these are \nour annotations these are our labels you can see  \nthat there are many many many missing annotations \nfor example in this image we only have one  \nmask we only have the mask for one or four ducks \nwe have one two three four five dogs but only one  \nof them is annotated we have a similar behavior \nhere only one of the ducks is annotated here  \nis something similar only one of them is annotated \nand the same happens for absolutely every single  \none of these images so there are a lot of missing \nannotations in this data we are currently looking  at\nand if I look at the predictions now these are \nthe same images but these are our predictions we  \ncan see that nevertheless we had a lot of missing \nannotations the predictions don't really look  \nthat bad right for example in this case we are \ndetecting One Two Three of the five Ducks we  \nso we have an even better prediction that we have \nover here I would say it's not a perfect detection  \nbut I would say it's very good right it's like \nit's not 100% accurate but it's like very good  \nand I would say it's definitely better than the \ndata we used to train this model so that's what  \nhappens with the first image and if I take a look \nat the other images I can see a similar Behavior  \nright this is the data \nwe used for training this algorithm and these are  \nthe predictions we got for these images and \nso on right it seems It's like exactly the  \nsame behavior exactly the same situation for \nthis image as well so my conclusions by looking  \nat these images by looking at these predictions \nis that the model is not perfect but I would say  \nperforms very well especially considering that \nthe data we are using to train this model seems  \nto be not perfect seems to have a lot a lot \nof missing detections have a lot of missing  \nelements right a lot of missing objects so \nthat's our conclusion that's my conclusion by  \nlooking at these results and that's \nanother reason for which I don't recommend  \nyou to go crazy analyzing these plots because when \nyou are analyzing these plots remember the only  \nthing you're doing is that you are comparing your \ndata the data you are using in order to train this  \nmodel with your predictions right the only thing \nyou're doing, you're comparing your data with  \nyour predictions with the predictions you had with \nthe model right so as the only thing you are doing  \nis a comparison between these two things then \nif you have many missing annotations or many missing  \nobjects or if you have many different errors \nin your data in the data you're using to train  \nthe algorithm then this comparison it's a little \nmeaningless right it doesn't really make a lot of  \nsense because if you're just comparing one thing \nagainst the other but the thing you are comparing  \nwith has a lot of Errors it has a lot of \nmissing objects and so on maybe the comparison  \ndoesn't make any a lot of sense whatsoever right \nthat's why I also recommend you to not go crazy  \nwhen you are analyzing these plots because they \nare going to give you a lot of information but  \nyou are going to have even more information \nwhen you are analyzing all of these results  \nand this is a very very very good example of what \nhappens in real life when you are training a model  \nin a real project because remember that building \nan entire dataset, a dataset which is 100%  \nclean and absolutely 100% perfect is very very very \nexpensive so this is a very good example of what  \nhappens in real life usually the data you're using \nto train the model, to train the algorithm has a  \nfew errors and sometimes there are many many many \nerrors so this is a very good example of how this  \nvalidation process looks like with data which \nis very similar to the data we have in real life  \nwhich in most cases is not perfect my conclusion \nfrom this evaluation for this validation could be  \nimproving the data taking a look what's going \non with the data and the next step would be to  \nimprove the data and by looking at these results \none of the ways in which I could improve this data  \nis by using the predictions I'm getting instead \nof the annotations I I used to train this model  \nyou see what I mean if the annotations if the \npredictions we are getting are even better that  \nthe annotations maybe our next step will be to use \nthese predictions in order to train a new model do  \nyou see what I mean so the by analyzing all of \nthese results you are going to make decisions  \non how to move forward on how to continue and \nthis is a very good example of how this process  \nlook like in a real project this is pretty much \nhow it works or how it looks like when you are  \nworking in a project when you are working either \nin a company or if you're a freelancer and you're  \ndelivering a project for a client this is pretty \nmuch what happens right there are errors things  \nhappen and you need to make a decision given all \nthe information you get with all this analysis  \nso that's going to be all in order to show you \nthis very simple and very straightforward way in  \norder to validate this training process in order \nto make some conclusions regarding what's going on  \nright and regarding to make some decisions you \nknow how to how to move forward this project  \nor this training process and now let me show you \nsomething else which is within this directory the  \nweights folder this is where your weights will be \nlocated right because if you are training a model  \nis because you want to have a model in order to \nmake predictions in order to make inferences and  \nthis is where your models will be located this \nis where your model will be saved and this is  \nsomething I have already mentioned in one of my \nprevious videos regarding yolo V8 remember you  \nwill have two models one of them is called last.pt \nanother one is best.pt and the way it works is  \nthat remember that when you are training a model at \nthe end of absolutely every single Epoch you are  \nupdating your weights you are updating your model \nso at the end of absolutely every single epoch  \nyou already have a model which is available \nwhich you can use if you want to so last.pt  \nmeans that you are getting the last model \nthe model you got at the end of your training  \nprocess so in this case I am training a network \nfor 10 epochs if I remember correctly so this is  \nthe model we got at the end of the tenth Epoch and \nthen base.pt means that you are getting the best  \nmodel the best model you train during the entire \ntraining process if I show you the metrics again  \nlet's see the metrics over here you can see that \nwe have many metrics which are related to the  \nloss function and then other metrics related to the \naccuracy on how this model is performing and the  \nway yolov8 decides what's the best model \nin this case which is a semantic segmentation type  \nof problem may be related to the loss function \nmaybe it's taking the model at which you got the  \nminimum loss or it may be related to some of these \nplots some of these performances which are related  \nto the accuracy to the performance maybe it's getting \nthe model for which you got the maximum Precision  \nfor example or the maximum recall or something \nlike that I'm not 100% sure I should look at the  \ndocumentation but the way it usually goes is \nthat last.pt is the last Model you trained so  \nit's at the end of your training process and then \nbest.pt is your best model and this best model is  \ndecided under some criteria so that's basically \nhow it works and what I usually do is taking  \nlast.pt because I consider that last.pt is \ntaking, is considering, way more information much  \nmore information because we are taking much more \ndata we are taking much more everything right in  \nall the training process we are doing many many \ndifferent things so if you take the last model  \nyou are summarizing way more information that's \nthe way I see it so usually I take the last model  \nusually I take last.pt and that's pretty \nmuch all in order to show you this validation  \nhow validating this model looks like and now \nlet's move to the prediction let's see how we can  \nuse this model in order to make inferences in \norder to make predictions so let's see how we  \ncan do that so let's go to pycharm let's go to \nthe pycharm project of today's tutorial and this  \nis a python script I created in order to do these \npredictions this python file is called predict.py  \nand this is what we're going to do I'm going to \nstart importing from ultralytics import YOLO and  \nthen I am going to define the model path the model \nwe are going to use which in our case let's use  \nlast.pt from these results, from this directory, \nso I am going to specify something like this...   \nlast.pt and then let's define an image path let's \ndefine the image we are going to use in order to  \nget our inferences so the image will be located... \nthis will be from the... from the validation set I'm  \njust going to choose a random image something \nlike this one so I am going to copy paste\nI am just going to paste it here so this \nis the image we're going to use in order to test  \nthis model in order to make our predictions \nand now I'm going to import CV2 as well  \nbecause I'm going to open I'm going to read this \nimage and then I am going to get this image shape  \nso this will be something like this this will be \nimage and then this is image.shape okay and now  \nthe only thing we need to do is to get our model \nby doing something like YOLO and then model path  \nokay and then we are going to get the results by \ncalling model of our image right and this is it  \nthis is all we need to do in order to get our \nresults in order to get our inferences but now  \nlet's do something else I am going to iterate for \nresult in results and now let's take a look at  \nthis mask let's take a look at this prediction \nso I'm going to iterate like this for j, mask  \nin result dot masks dot data and then I am \ngoing to say something like mask Dot numpy\ntimes 255 and this is our mask \nand then I am going to resize it\nto the size of the image so I'm going to input the \nmask and then this will be if I am not mistaking  \nthe order is this one W and then H so this is just \nthe way it works this this is how we need to do it  \nin order to get the prediction and then in order \nto resize this prediction back to the size of the  \noriginal image so this is how it goes and now the \nonly thing we need to do is to call CV2 imwrite  \nand I'm going to save it I'm going to save it here \nand the name will be something like that let's  \ncall it output this is only a test so we don't \nreally need to go crazy with the name let's call  \nit output.png and this will be our mask and that's \npretty much all that's pretty much all let's see  \nwhat happens I'm going to press play Let's see if \neverything is okay or if we have some error okay  \nso I did get an error and yeah this is because \nwe need to enumerate I forgot the enumerate we  \nare not using J actually so I could just iterate \nin mask but let's do it like this okay everything  \nran smoothly everything is okay we didn't get any \nerror and now if I go back to this folder to this  \ndirectory I can see this is the output this is the \noutput we got and now in order to make absolutely  \nand 100% sure everything is okay and this is a good \nmask this is a good prediction I'm going to make  \nan overlay I'm very excited I don't know if you \ncan tell but I'm very excited I'm just going to  \ntake this image over here and then I'm going back \nhere and I'm going to take the original image I'm  \ngoing to do an overlay so this will be raise to top \nI'm going to align these two images together and  \nnow let's make a transparency and let's see what \nhappens and you can see that we may not get like  \na 100% perfect mask but it's pretty well it's like \na very very good mask especially considering the  \nerrors we detected in our data so this is amazing \nthis is a very good detection  \nthis is a very good result so this is going to be \nall for this tutorial and this is exactly how you  \ncan train a semantic segmentation model using \nyolo V8 and this is the entire process from how to  \nannotate the data how to train the model and how \nto validate this model and then how to make some  \npredictions so this is going to be all for today \nso this is exactly what you will be able to do \nwith today's tutorial in this video we're going  \nto work with pose detection using yolo V8 and \nI'm going to show you the entire process from how  \nto annotate your custom data for free using a \ncomputer vision annotation tool how to prepare  \nyour data and your file system for training \nthis pose detector how to do the training in your  \nlocal computer and also from a Google collab and \nhow to do a super comprehensive evaluation of the  \nmodel you trained this is a much more complex \nproblem in my previous tutorials I showed you how  \nto train an image classifier using yolo V8 an \nobject detector and an image segmentation model  \nand I would say that today's model this keypoint \ndetector is much more complex than everything we  \ndid before this is going to be an amazing tutorial \nmy name is Felipe welcome to my channel and now  \nlet's get started and now let me show you the data \nwe are going to use on this tutorial we're going  \nto use the AWA pose dataset and let me show you \nexactly how this data looks like so you can see  \nthat these are pictures of many different animals \ncurrently we are looking at antelopes these are  \npictures of many different antelopes and if I \nscroll down in this directory you are going to see  \nI also have other animals for example here this is \na bobcat which is some sort of feline some sort of  \ncat you can see that these are many different \npictures of this animal and if I scroll down  \na little more you are going to see I also have \nbuffaloes so we also have pictures of buffaloes  \nand if I continue scrolling down you are going to \nsee other pictures of other animals for example  \nhere I have a Chihuahua and you get the idea \nright we have pictures of many many many different  \nanimals and all these animals are quadrupeds \nbecause this is a quadrupeds keypoint detection \ndataset now let me show you the key points \nwe are going to be detecting for each one of  \nthese animals and you can see that these are many \nmany different key points we have 39 key points  \nin total which is a lot and we are detecting many \ndifferent parts for example the nose the eyes the  \njaw the tail the legs and also the ears the horns \nor whatever they're called something like antlers  \nit doesn't matter we are detecting many many \ndifferent parts in these quadrupeds so this  \nis exactly the data we are going to be using today \nI thought it was like a very very cool dataset to use  \nin pose detection and now let's continue so I'm \ngoing to show you how to do the entire process  \nof training a pose detector using yolo V8 on your \ncustom data and in my case the data I am going to  \nuse in this tutorial is already annotated right \nso I already have the annotations for this data  \nbut if you are training this pose detector on \nyour custom data then most likely you will need  \nto annotate the data yourself so I'm going to \nshow you how you can do that I'm going to show  \nyou how to do the entire annotation process \nusing CVAT which is a very very popular and a  \nvery awesome annotation tool for computer vision \nand let me show you how to do it so I'm going to  \ncvat.ai this is CVAT website and I'm going \nto click here where it says start using cvat  \nI'm going to show you how to create a project how \nto create a task and how to do all the annotation  \nnow I'm going to project and I'm going to \nclick the plus button I'm going to click  \nhere and create new project and this is going \nto be key Point detection this is going to be  \nquadruped key Point detection which is exactly \nwhat we are going to be doing then add label  \nand I'm going to add quadruped continue \nand that's pretty much all submit and open  \nthis is where you are going to add absolutely \nall the labels you have in your custom data in  \nmy case I only have one label which is quadruped \nnow let's continue now I'm going to create a task  \ncreate new task the name of this task will be \nsomething like quadruped key Point detection\ntask zero zero one and I am going to add an \nimage I'm going to I'm going to show you how  \nto annotate this data with only one image \nso I'm only going to select the first one  \nand then I'm going to click here in submit and \ncontinue we have to wait a couple of minutes  \nuntil the data is uploaded into the server and \nonce everything is completed we need to go to  \ntasks this is our project and this is a task we \nhave just created and I'm going to click in open  \nso this is pretty much all now I'm going to \nclick here this is going to open the task and  \nnow we need to start our annotation process so \nyou need to click here where it says draw  \nnew points and you need to select the number of \npoints you are going to annotate in my case I'm  \ngoing to annotate 39 points but you need to select \nas many points as you are going to annotate so now  \nI'm going to click here in shape and we need to \nstart our annotation process and something that's  \nvery very very important is that once you are \nannotating your data you need to follow a given  \norder right once you are annotating all of your \nkey points you need to follow a given order with  \nyour key points if I show you this image again \nyou can see that we have many many different  \nkey points we have the location of all the key \npoints but we don't really have any information  \nregarding the order of these key points right \nthis is very very important because you cannot  \nfollow any random order you need to follow a \ngiven order you need to follow always the same  \norder when you are annotating your data so this is \nfor example the order I am going to follow in this  \ntutorial you can see that the first key point \nI'm going to annotate is nose then upper jaw  \nthen lower jaw mouth end right and so on right \nyou need to specify a given order for your data  \nnow I'm going to start this annotation process \nso the first point is nose which I'm going to set  \nover here then the next one is upper jaw which \nis going to be something like this lower jaw  \nhere mouth end right and this is the right from \nthe perspective of this animal right so this is  \ngoing to be here now mouth and left and I don't \nreally see the mouth end left but I'm going to  \nsay it's around here and I'm going to share a \nfew comments later on this tutorial regarding  \nthe visibility of our key points right but for now \nlet's just continue now the next one is right  \neye then right earbase which is here and then \nright ear and which is over here and I'm just  \ngoing to continue with all of this list and I'm \ngoing to resume this video when I'm completed  \nand these are the last two body middle right \nwhich is around here and body middle left which is  \naround here I don't see it but is around here and \nyou can see that this is all these are my 39 key  \npoints and now let me show you how you can export \nthis data but before, before please remember to  \nclick save otherwise... it's always a good practice \nto click save and not only you need the key points  \nbut you also need to draw a bonding box around \nyour object this is very very very important and  \nI'm going to tell you why in a few minutes but for \nnow remember that not only you need to annotate  \nall of your key points but you also need to draw \na bonding box enclosing your object so this is  \nhow I did it and I'm going to click save again \nthis is the only image I'm going to annotate  \nbut please remember to follow exactly the same \nprocess for all of your images I'm now going to  \ntasks and I'm going to show you how to export this \ndata you need to click here and Export task dataset  \nnow you need to click here and you can see that \nthere are many many different options in which you  \ncan export your data and one of these options is \ncoco key points 1.0 and this is very important  \nbecause this is the exact format we need for our \ndata but I have tried to export the data into this  \nformat and it's not working for some reason it's \nnot working so I'm going to show you how to do it  \nin cvat for images 1.1 so click here then okay \nand then you just have to wait until everything  \nis downloaded once everything is fully exported \nyou are going to see a file a zip file and within  \nthis file there will be an another file called \nannotations.xml now let me open this file so I  \ncan show you how it looks like you are going to \nsee something like this and at the bottom of this  \nfile you are going to see all of your annotations \nand all the images you have annotated and its  \nannotations right so this is exactly the \ndata you are going to generate using cvat  \nnow let me show you something else I have created \na python project for today's tutorial and let me  \nshow you a script I created in this python project \nand this script will be super super super useful  \nbecause now that you have your annotations now \nthat you have your data you need to convert  \nyour annotations into the exact format you need \nin order to use this pose detector using YOLO V8  \nso let me show you basically you need to specify \ntwo variables one of them is the location of your  \nannotations.xml file and you also need to specify \nthe location of the directory where you want all  \nyour data to be saved right this script is going \nto parse through this XML file is going to parse  \nthrough this file and it's going to extract all \nof your annotations and it's going to save all of  \nyour annotations into the exact format you need \nin order to use yolo V8 so remember to specify  \nthese two paths these two variables one of them is \nthe location of your XML file and then where you  \nwant all of your newly created annotations to be \nsaved right where you want this output directory  \nso once you have set these two variables the only \nthing you need to do is to run this script and  \neverything will run super super smoothly and \nremember this script will be available in The  \ngithub repository of today's tutorial so you \ncan just go ahead and use it in order to convert  \nall of your data into the format you need to use \nyolo V8 and now let's continue now I'm going to  \nshow you how you need to format how you need to \nstructure all of your data and your file system  \nso it complies with yolov8 so you can see that \nthis is a directory which is called data and this  \nis the root directory where my data is located you \nneed a directory which will be the root directory  \nwhere your data will be saved where your data \nwill be located within this root directory  \nyou can see I have two folders one of them is \ncalled images and the other one is called labels  \nit's very important that you name these two \nfolders exactly like this one of them should  \nbe called images and the other one should be \ncalled labels that's very important now if I  \nopen one of these folders you can see I have two \nother folders one of them is called train another  \none is called val and it's very important that \nyou name these directories exactly like this one  \nof them should be called train and the other \none should be called val So within train is  \nwhere we will have all of our training data all of \nour training images right you can see that these  \nare all of our images which are all the images \nwe are going to use as training data and within  \nval it's exactly the same these are all the images \nwe are going to use as validation data as our  \nvalidation set right so within images we have two \ndirectories one of them is called train the other  \none is called val and within each one of this \ndirectories each one of these directories is  \nwhere we have all of our data all the data we are \ngoing to use in order to train this model all the  \nimages we are going to use in order to train \nthis model but we also have additional data which  \nare the labels now let me show you how this other \nfolder looks like you can see that within labels  \nwe also have two directories which are also \ncalled train and val and it's very important  \nthat you name these two directories exactly like \nthis one of them should be called train and the  \nother one should be called val and if I open \nthe train directory you can see that we have  \nmany many many txt files and these are basically \nall of our labels for the training data for all of  \nour training images if I go back to images train \nyou can see that for absolutely every single one  \nof these images we have an annotation file right \nfor absolutely every single one of these images  \nwe are going to have a txt file in this folder \nand now let me show you for the other directory  \nfor val it's exactly exactly the same but for the \nvalidation data for the validation images right so  \nif I go back again you can see that we have  \nthe root directory then images labels within  \nimages we have two directories train and val and \nwithin each one of these directories is where we  \nhave all of our images and if we go to labels we \nhave also two directories train and val and within  \neach one of these directories is where we have all \nof our labels so this is exactly how you need to  \nstructure your file system and now let me show you \none of these annotations files one of these labels  \nfiles from the inside let me show you how they \nlook like so this is a random annotations file  \nthis is a random txt file and this is exactly how you \nneed to put all the data inside these files the  \nannotations are specified in the Coco Key Point \nformat which is a very popular format for pose  \ndetection now let me show you something I'm going \nto do something which I'm obviously not going  \nto save the changes but this is going to be much \nbetter in order to show you how these annotations  \nformat works right how it looks like so basically \nyou can see the first number is a zero and this  \nis our class ID in my case I'm only I only have \none class which is quadrupled so in my case this  \nnumber will always be zero but if you are making \nthis project and you have many many different  \nclasses please remember that this number should be \nthe class ID so if you have different classes you  \nwill have different numbers here now the next four \nnumbers are the bounding box of your object right  \nremember in cvat when we were annotating this \ndata I showed you that not only we need to annotate  \nthe key points but we also need to annotate the \nbounding box right and we annotated the bounding  \nbox so these four elements the four elements \nthat come after the class ID are the bounding  \nbox right and this bounding box is specified in \nthe yolo format which is the X and Y position  \nof the center of the bonding box and then the \nwidth and then the height of your bounding box  \nthis is very important so this number these two \nnumbers are the X Y position of the center of your  \nbounding box and then the width and the height \nand then all of the other numbers let me show  \nyou, you can see that we have these two numbers \nwhich are a float and then we have the number 2  \nand then we have exactly the same two numbers and \nanother 2 then two numbers and another 2 then  \nwe have three zeros right this looks like very \nvery strange so now let's go back to my browser  \nbecause I want to show you this website which is \ncocodataset.org and this is where we are going to  \nsee exactly how this format works so if I go back \nto key Point detection you can see that this is  \nour explanation about how this format works and \nif I read something which is here you can see  \nthat absolutely every single key point will be \nspecified as X and Y and a visibility flag V so  \nthis means that for absolutely every single key \npoint we are going to have three values we are  \ngoing to have the X and Y position of that given \nkey point and we are also going to have another  \nvalue which is V which is the visibility right \nremember we were going to talk about visibility  \nlater on this tutorial this is later on \nthis tutorial so you can see that V has three  \npossible values V could be zero and this means \nthat the key point is not labeled and in this  \ncase X and Y is going to be 0 too or V equal 1 and \nthis means the key point is labeled but it's not  \nvisible or V could be 2 and this means the key \npoint is labeled and it's also visible and if we go  \nback to the to this file to the annotations you \ncan see that if we start over here we have two  \nnumbers and then we have a 2 which means this key \npoint is annotated, is labeled, and is also visible  \nnow if we continue you can see that we have two \nnumbers and then we have another two which means  \nthis other key point is also visible now if we \ncontinue you can see exactly the same two numbers  \nand then a two and then if we continue you can see \nthat this... we have three zeros and we are in this  \nsituation right V equals zero so we also have x \nand y equal to zero and this means the key point  \nis not labeled for this image right so long story \nshort after the bounding box all the other numbers  \nwill be the key points and you will have two \nvalues for the X and Y position and then the third  \nvalue will be the visibility of that given key \npoint now this is one of the possible formats in  \nwhich you could format your data and this is going \nto work just fine but YOLO V8 also supports a key  \nPoint annotation with only two values which means \nthat if you don't have the visibility information  \nfor all of your key points then it doesn't matter \nbecause yolo V8 also supports you input your key  \npoints with only the X and Y coordinates so long \nstory short we have the first number which is the  \nclass ID then we have four numbers which are the \nbounding box and then all of the other numbers  \nare the key points and you can specify your key \npoints with three coordinates for every key point  \nwhich means we have the X and Y and also the \nvisibility for that key point or you can specify  \nall of your key points with only two coordinates \nwhich means its the X are the Y coordinate of that  \ngiven key point so this is the way you need to \nlabel your data is the way you need to structure  \nall of your annotations and please remember to \ndo it this way otherwise it's not going to work  \nso now I'm just going to press Ctrl z because \nobviously I'm not going to save all of  \nthose changes and that's pretty much all about how \nto format your data how to format your file system  \nand how to put your data into the exact format \nyou need in order to train this pose detector  \nusing yolov8 and now let's go back to pycharm \nlet's go back to the pycharm project I created for  \ntoday's tutorial and the first thing you need to \ndo if you want to train this pose detector using  \nyolo V8 is to install the Project's requirements \nwhich is basically ultralytics so please remember  \nto install this package before starting with this \ntraining because otherwise you will not be able  \nto train a pose detector using yolo v8 so once \nyou have installed ultralytics let's go back here  \nto this file I created which is train.py I'm going \nto show you exactly what you need to code in this  \nfile in order to do your training and in order \nto do so let's go back here which is ultralytics  \nwebsite and let's go to the pose page and let's \nscroll down until this section over here and the  \nonly thing I'm going to do is I'm going to copy \nand paste this line and then I'm going to copy and  \npaste this other line right so this is basically \nall we need to do in order to train this model and  \nobviously I need to import from ultralytics import \nYOLO and that's pretty much all so this sentence  \nover here we can just leave it as it is we can \njust leave it in this default value but this one  \nI am going to make a couple of changes I'm going \nto change the number of epochs I'm going to train  \nfor only one Epoch for now and I'm also going to \nchange the location of the configuration  \nfile I'm going to use this file which is \nconfig.yaml and now I'm going to show you how this  \nconfig.yaml looks like so you can see that this is \nthe configuration file I am going to use in this  \ntutorial we have three sections one of them for \ndata then key points and then classes and let's  \ngo to the data section first this is where you're \ngoing to specify all the locations to your data  \nto your images and your labels so basically you \nneed to specify the root directory the directory  \ncontaining your data which in my case is this one \nremember the root directory this is the directory  \nwhich contains the images and the labels folders \nand then you need to specify what's the location  \nof the training images and the validation images, \nif you have made everything as I show you in this  \ntutorial as I showed you a few minutes ago then \nyou can just leave these two lines in these values  \nright you can just leave everything as it is and \neverything will work just fine the only thing  \nyou need to edit is the location of your root \ndirectory now let's go to this section over here  \nwhich is the key points and we have two keywords \nwhich are key Point shape and flip index and these  \ntwo keywords are completely and absolutely new for \nus this is something we haven't seen before in any  \nof my previous tutorials about yolo V8 and you \ncan see that in the case of key Point shape in my  \ncase it says 39 3. that's because I have 39 key \npoints and I'm using the X Y and V format right  \nI'm using three values for every single key point \nso in my case this that's why I have a 3 over here  \nso this is how many key points you have in your \ndata and this is what format are you using if you  \nuse you're using the X Y format in that case you \nwill need to specify a 2 or if you're using the  \nX Y and V format and in that case you will need \nto set a 3 as I am doing over here so that's for  \nkey Point shape and now let me explain what flip \nindex is and in order to further explain what this  \nkeyword means I made a drawing over here where I'm \ngoing to show you exactly what it means so you can  \nsee that this is a random image in my data set and \nactually this is the same image I used in order  \nto show you how The annotation process looks like \nfor this data and you can see this is a quadruped  \nwith all of its key points drawn on top right \nnow let me show you what happens if I flip this  \nimage horizontally right this is what I get you \ncan see that this is exactly the same image but  \nthe only thing I did was to flip it horizontally \nif I flip an image horizontally now everything  \nthat used to be one of the sides now is the other \nside right everything that used to be the right  \nside now is the left side and the other way around \neverything that used to be the left side now it's  \nthe right side that's only what happens when you \nare flipping an image horizontally but remember  \nwe had many many different key points and many of \nthese key points were related to one of the sides  \nfor example we had a key point for the right eye we \nalso had key points for the right ear we had key  \npoints for the right legs and the same situation \nfor the left eye the left ear and the left legs  \nright many of our key points are related to one of \nthe sides if we flip the image horizontally then  \nwe should be doing something with all of these key \npoints which are related to one of the sides right  \nwhen we are training a model using yoloV8 \nwhen we are training this type of model one  \nof the steps one of the stages in this process \nin the training process is to do something  \nwhich is called Data augmentation and this data \naugmentation means that we are taking the data  \nand we are doing different Transformations with \nthis data one of the Transformations we are doing  \nis related to flipping the image right so we are \ngoing to be flipping some of our images at random  \nand every time we are going to be doing an \nhorizontal flip we are going to have a situation  \nlike this so now let's go back to this \nlist which is the list of all the different key  \npoints we have in this data set right remember I \nalready showed you this list when I was annotating  \nthis image and remember we start with the nose \nthen the upper jaw then the lower jaw and so on  \nso you can see that some of these key points are \nrelated for example in this case to to the right  \nside this is related to the left side we have \nmany key points over here which are related  \nto the right side then we have many key points \nwhich are related to the left side then we have  \nother key points which are not related to any of \nthe sides for example neck base neck end throat  \nback these are generic key points and they are \nnot related to any of the sides and we will need  \nto do something with all the key points which are \nrelated to one of the sides for example these two  \nthen all of these over here and so on right you \nget the idea that's exactly what we need to do  \nand that's exactly what this flip index keyword \ndoes right that's exactly the idea the intuition  \nbehind this flip index so let's go through this \nlist you can see that the first element is nose  \nand if we think about a nose it's right in the \nmiddle and nothing is going to happen when we  \nflip the image right the nose will continue \nbeing the nose will remain as the nose and  \nthen the next element is the upper jaw exactly \nthe same nothing will happen with the upper jaw  \nwill remain being the upper jaw after we flip the \nimage horizontally the same will happen with the  \nlower jaw but when we get to this element this \nis the mouth end right and we will have an issue  \nhere here because the mouth end right when we flip \nthe image horizontally will be the mouth end left  \nand the next element which is mouth end left when \nwe flip the image horizontally now it will be the  \nmouth end right you get the idea these two values \nthese two key points will be flipped when we flip  \nour image right and now let's take a look at this \nlist we have over here which is the value for flip  \nindex and you can see that the first element is \nzero then one then two then four three right so  \nwe are flipping these two values right instead of \nhaving a 3 4 which will be like the natural order  \nwe have a 4 3 we are flipping these two values \nand these are exactly the indexes of these two key  \npoints in the key Point order so long story short \nthe only thing we will need to do in order to fix  \nthis issue we will have when we are flipping our \nimages horizontally the only thing we will need to  \ndo is going through all of our key points and all of \nthe key points which are related to the right side  \nwe need to flip them in order to make them the \nleft side right we only need to flip the right  \nand the left side that's the only thing we need \nto do and that's what we need to specify here in  \nthis list this is how the flipping will be done \nso please be super super careful with this list  \nand this remember means how your indexes will be \nflipped when the image is flipped horizontally  \nnow let's move to this section and these are all \nof your names of all of your objects in my case  \nI only have one object which is quadrupled so in \nmy case this is very simple but please remember  \nto specify all the names and all the class IDs \nfor absolutely all of your names in my case I  \nonly have one in class ID which is zero and means \nquadrupled so that's pretty much all for the  \nconfig.yaml and now we let's go back to train.py \nand let's continue so once you have specified  \nthis configuration file and you have specified \neverything we have over here the only thing you  \nneed to do is to execute this script and that's \nall that's how easy it is to train this model but  \nI'm going to stop this training because otherwise \nit's going to take a lot of time if I train this  \nmodel locally  it's going to \ntake a lot of time I have been doing some tests  \nalready and yeah it's going to take forever if I \ndo it locally but this is exactly the process you  \nshould follow if you want to train this model \nin your local environment but I mentioned that  \nI'm also going to show you how to train it in a \ngoogle collab so now let's go to my browser and  \nlet's see exactly how we can do this training from \na Google collab the first thing you will need to  \ndo is going to your Google Drive and you will need \nto upload absolutely all of your data obviously  \nbecause otherwise you will not be able to train \nthis model from your Google Drive and also you  \nwill need to upload your config.yaml file and \neverything will be just exactly the same as the  \nfile I showed you in my local computer but you will \nneed to edit this field which is the path right  \nyou can see this path over here you will need to \nedit this with the path to your data in Google  \nDrive this is very important and otherwise nothing is \ngoing to work so please remember you need to edit  \nthis path and I'm going to show you exactly how \nto know what's the location of your data in your  \nGoogle Drive now let's go back to this Google \ncolab this is the Google colab I created for  \nthis tutorial for this training and obviously you \nwill be able to find this notebook in the GitHub  \nrepository of today's tutorial so for now just \nfollow along you can see that we have only  \na few cells and the only thing I'm going to do \nis to execute these cells one by one so I'm going  \nto start with the first one which is connecting \nmy Google colab environment with Google Drive  \nand now the only thing I have to do is to select \nmy account then I scroll all the way down and I  \nclick allow and that's basically all we need to do \nin order to connect our Google collab with Google  \nDrive so this way Google collab will be able to \naccess the data you have in your Google Drive  \nwe have to wait a few seconds and that's pretty \nmuch all you can see that everything has been  \nmounted here in content gdrive and now the \nnext step is to install Ultralytics right because  \nremember we are going to use ultralytics which is \nthe python package we need to use in order to use  \nyolo V8 and the only thing we need to do is to \nexecute this cell and everything is now completed  \nnow in order to continue with the next two cells \nyou need to know where your data is located in  \nyour Google Drive the only thing I'm going to do \nis to execute this cell and this is going to list  \nabsolutely all the files in \nmy Google Drive and in my root directory right  \nyou can see these are many many many files and \nfrom here the only thing I would need to do is to  \nfind where my data is located in my case it's \nlocated in this folder if I do an ls again  \nthis is the content of this folder so the only \nthing I need to do is to locate this directory  \nand then that's it right this is \nthe content of this directory which  \nis where my data is located so the only \nthing I need to do is something like this  \nand that's the content of my data \ndirectory which contains the two folders images  \nand labels now that you know where your data is \nlocated in your Google Drive now you can just  \ncopy and paste this path in your config \nfile right now that you know exactly where your  \ndata is located you can just come here and \nyou can edit this field and you can just put  \nwherever your data is located and then you need \nto specify the location of your config.yaml file  \nand once you set this location over here you are \nall set and the only thing you need to do is to  \nclick enter right you need to execute this \ncell and that's going to be pretty much all  \nnow everything is being executed this is going \nto take some time the first thing is going to do is  \ndownload all the weights into this Google collab \nenvironment and that's pretty much all it's going  \nto get all the data and then it's going to do \nthe training okay now the training process has  \nbeen completed and you can see that the results \nhave been saved here in run pose train4. so  \nI'm going to show you how to execute this cell so \nwe copy the entire content of the runs directory  \ninto your Google Drive Right remember that the \nidea of this training process is to download the  \nresults to download the weights to download the entire \nresults which have been saved here and the way to  \ndo it or one of the ways to do it I would say the \neasiest way to do it is to copy everything into  \nGoogle Drive and then just download everything \nfrom Google Drive so this is the simplest  \nway to do it and please remember to edit this path \nto the path where you want everything to be copied  \nwhen you execute this cell so let me show you if \nI go back to my Google Drive you can see this is  \nthe runs directory which was just generated \nand within this directory is where we have  \nthis train4 which is the result of the training \nprocess we have just executed so everything seems  \nto be okay and what we will need to do now is to \ndownload this directory into our local computer  \nnow remember this was a very very dummy training \nthis is a training we did for only one Epoch  \nobviously you will need to do like a deeper \ntraining if you really want to train your pose  \ndetector on your data one Epoch it's it's very \nunlikely to be sufficient you will need to do  \nlike a deeper training in my case I have already \ntrained the model with my data and I did it for  \n100 epochs right I did it before starting this \ntutorial so everything is already trained and  \nwe can just analyze the results so now let's move \nto my local computer so I can show you exactly how  \nto validate the model I trained using yolo V8 \nand you can see that these are many many different  \nplots many different functions we are plotting a \nlot of information but we are going to focus in  \nthe loss function and specifically we are going to \nfocus in this loss which is the loss function related  \nto the pose so we are going to focus on the pose \nloss related to the training set and the pose loss  \nin the validation set and if we look at the training \nset you can see that the loss is going down but  \nnot only is going down but I would say that's going \nto continue going down for even more epochs right  \nyou can see that the trend is that it's going \ndown and it's going to keep going down for more  \niterations for more epochs we haven't reached \na plateau and I would say that we are very far  \naway of any Plateau right so this is a very good \nsign and it means the training process is going  \nsuper well and it means that the model has \nextra capacity it has more capacity so we could  \ncontinue training this model and it will continue \nlearning more about this data that's what I take  \nby looking at this pose loss in the training set \nand if we look at exactly the same function but in  \nthe validation set we can see that it's going down \nso that's a good thing but I have the impression  \nthat it's starting to be something like a plateau \nright it's not very clear because it's happening  \nright in the end of this \ntraining process but you can see that it somehow  \nseems like this is going to be a plateau from now \non right at the very least we can see that it's  \ngoing down that's absolutely and 100% clear and \nthen it's unclear what will happen from now one or  \nwhat would have happened if I would have trained \nthis model for more epochs but it seems we may have  \nreached a plateau and that's something we need to \nkeep in mind in this validation process but now  \nlet's take a look at exactly how it's performing \nwith some images so the way I'm going to do it is  \nlike this I am going to open this image which is \nthe it's one of the batches in the validation set  \nand these are our labels right these are not \nour predictions but these are the labels the  \nannotations now I'm going to keep this open and \nI'm going to open exactly the same batch but our  \npredictions right this is going to be a very good \nway to analyze the results because now we have a  \nlot of images and we need to make more conclusions \nwe need to take a look at more samples we  \nneed to... this is a much more complex problem in \nmy previous tutorials I showed you how to train  \nan image classifier using yolo V8 an object \ndetector and an image segmentation model and I would  \nsay that today's model this keypoint detector is \nmuch more complex than everything we did before so  \nthis validation process will be more complex as \nwell now if you look at all of these images I'm  \ngoing to focus on only one of them I'm going to \nfocus on this dog on this Dalmatian and I'm going  \nto show you exactly what's going on here let's \nfocus on this animal first and you can see that  \nbasically these are all of our key points\nbasically this is our ground truth these are all of  \nour annotations and these are all our predictions \nand you can see that it looks pretty well it looks  \nvery very well I would say that if we look at all \nof these key points which are around the face  \nI would say they are perfect I would say they are \nvery very good and then if we look at these  \nkeypoints over here you can see that it's very good \nas well if we look at these three key points it's  \nalso very good these two key points over here as \nwell it's it's very good too and then if we look  \nat the legs I can see something is going on here \nbecause I don't really see these two key points  \nso we are not detecting the legs and if I look at \nthe legs entirely I would say something is going on  \nbecause I don't really see... I think we have an \nissue in the legs and also you can see that this  \nkey point which is at the end of the tail we are \nnot detecting this key Point either so we  \nhave some issues we have an issue in the tail and we \nhave an issue around the legs but everything else  \nI would say that is pretty good I don't know what \nyou think but I think it's pretty pretty good so  \nthis is one of the examples and now let me show \nyou another one which is in another batch  \nagain these are the annotations and these are the \npredictions so let me show you what happens in  \nthis rhinoceros let me show you what happens \nthese are our annotations and these are our  \npredictions and you can see that we have a similar \nsituation around the face I would say everything  \nit's just okay we have like a very good detection \nthen over here we have very good detection too  \nthese three points are very well detected then \nover here everything is okay and then we also  \nhave an issue around the legs right we are not \ndetecting all the key points in the legs properly  \nthe same happens over here with this other leg and \nthe same happens in the tail, this keypoint  \nwhich is the end tail and then everything \nelse seems to be working super properly we are  \ndetecting all the key points but we have an issue \naround the legs and around the tail and now let me  \nshow you other examples for example this one over \nhere you can see that in this case we have the  \nanimal in a different posture so it's a little \nmore challenging for the model and you can  \nsee that in this case we are detecting the face \nvery very well actually we're not detecting this  \neye but other than that all of the other key \npoints around the face are very well detected  \nand you can see these three key points over here \neverything is okay this one is okay this one too  \nand then you can see that we have other key points \nwhich are also very well detected but we have  \nan issue again around the legs right and that's \npretty much what I noticed by looking at many of  \nthese examples right in many of these situations \nwe have many different situations because there  \nare different animals they are in different \npostures they are in different everything so  \nwe are going to notice different situations but \nafter inspecting a few of these images I had the  \nimpression that the model is performing very very \nvery well but we may have an issue around the legs  \nand around the tail that was my impression \nby analyzing many of these pictures so by  \ncombining this information all the information \nwe got by analyzing this images, all the  \nkeypoints, how they were detected and so on and \nalso combining everything with the loss function  \nwith this plot regarding the loss function in \nthe training set and in the validation set my  \nconclusions from here will be to make a deeper \ntraining to train this model for even more epochs  \nand I'm curious to see what will happen in that \nsituation because if I look at the training loss I  \nreally like what I see I think this model have way \nmore capacity I think we could train for I don't  \nknow 50 more epochs 100 more epochs and I think we \nwill be in a very good situation the training loss  \nwill continue to go down and it will continue \nto go down in this way right it seems we are very  \nfar away from the plateau but if I look at the \nvalidation loss I'm not completely and  \nabsolutely sure what happens from now on so what \nI would do now in order to improve these results or  \nin order to try to improve these results will be \nto continue training for more epochs and I would  \nsee what happens next I would see what happens \nwith this loss and then I would see what happens  \nby analyzing these images again right that would \nbe my next step by analyzing all this information  \nso this is a very good example of how to analyze \nyour model how to analyze your data and your plots  \nand so on in a more complex example as this one \nbecause remember that now we are trying to detect...  \nnow we are trying to learn something that's way \nmore complex as we did in our previous tutorials  \nnow we are not trying to learn like a bounding \nbox or a mask but we are trying to learn the  \nentire structure of a quadruped so that's... trust \nme it's way more complex than everything we have  \nmade so far so this is a very good example of how \nto validate a model when the problem is a little  \nmore complex take a look at the loss function \ntake a look what's going on take a look in the  \ntraining set and the validation set and also \ntake a look at some examples and then just make  \nsome conclusions in my case what I would do is to \ntrain for more epochs and also please remember  \nthat we are always using the default values of \nthis training right we are training this model  \nusing all the default values the only values we are \nspecifying are the image size and the number of  \nepochs and that's it and if I show you the entire \nconfiguration file we are using is this one and  \nyou can see that we have many many many many many \nmany hyperparameters so another next step in case a  \ndeeper training is not enough another Next Step \nwould be to play around with the different hyper  \nparameters and to find another combination of \nthe parameters which would be better for our  \nuse case that's very important because if you are \napproaching a more complex problem like this one  \nlike the one I am doing right now I would say that \nit's not very realistic to expect everything goes  \nsuper super well from the first attempt by using \nall the default values right I would say   \nif the problem you are trying to solve it's \nmuch more complex then most likely you would need  \nto play around with the different hyper parameters \nand you would need to find a combination of hyper  \nparameters that suits well with your problem \nwith your project so that's what I can say  \nabout this validation process and now let me show \nyou something else which is where the weights are  \nlocated within this folder you will see another \nfolder which is called weights and within weights  \nyou are going to see two files which are \nbest.pt and last.pt these are the modes you  \ngenerated with this training process and this \nis something that I have already mentioned in  \nmy previous tutorials but I'm going to say it \nagain last.pt is the model you trained at the  \nend of your training process and best.pt means \nthat this is the best model you trained in the  \nentire training process so you have these two \nmodels and you can just choose the one you like  \nthe most and what I usually do is taking last.pt \nI consider that this is a much more robust  \nmodel so this is the one I usually consider when \nI'm making my predictions and that's pretty much  \nall I can say about this validation, about validating \nthis model and now it's time to make our  \npredictions so let's get back to pycharm let me \nshow you this file which is called inference.py  \nthis is the file we are going to use in order to \nmake predictions with the model we just trained  \nso let me show you how to do it I'm going to \nstart importing from ultralytics import YOLO\nultralytics import YOLO and then \nI'm going to Define my model path  \nI am going to specify the location of the model \nwe just trained right which is this one in my  \ncase this is the location of my model I'm going \nto select last.pt and I'm also going to set  \nthe path to an image, to an image I'm going to use \nin order to show you how to make predictions my  \nimage will be located in samples wolf.jpg let me \nshow you super quickly the image I'm going to use  \nin order to show you how to make predictions with \nyolo V8 let's go to samples and this is exactly  \nthe image I am going to use you can see that \nthis is the image of a wolf which is obviously a  \nquadruped so it's going to be an amazing image in \norder to show you how to use this model now let's  \nget back to pycharm and let's do something \nlike this I'm going to define my model like  \nYOLO model path and then we're going to \nsay something like results equal to model  \nimage path and I'm going to select the first \nelement because as we are predicting only one  \nimage the first element will be just fine and then \nit's just about iterating for result in results  \nand this will be something like for keypoint \nin result key points dot to list\nthere and for now the only thing \nI'm going to do is to print keypoints  \nso we make sure everything \nis okay and let's see what happens\nokay it seems I have an error and I think I know \nwhat's the error to list goes without the  \nunderscore so let's see now okay now everything \nseems to be okay and what I'm going to do now  \nis I'm going to import cv2 because I am going to \nread the image and I'm going to plot all the keypoints  \non top of this image right that's going to \nbe a very good way to show you how to predict all  \nthese key points so cv2 imread image path this \nis going to be image and now I'm going to call  \nCV2 dot put text maybe it's a very good idea to \nput the text of each one of these key points to  \nput the key Point number on top of each one of \nthese key points so this is going to be image  \nthen the key Point number will be... let's do it \nlike this keep point index key point in enumerate\nokay and then string key Point \nindex okay now the location\nand remember this is how my key points look \nlike we have three values and the values  \nwe care about in this moment are these \ntwo because these are the X Y position  \nof the key point so I'm just going to \ndo something like int keypoint zero  \nand int keypoint one okay now I have to select \nthe font which I'm going to set in this one font  \ncursey Simplex then the font size which I'm going \nto set in one for now then the color something is  \nnot right let me see I think I'm not closing \nthese brackets I think that's reason one two\nokay there let's see now everything's okay okay\nnow the color which I'm going to set in \ngreen so this is something like this and  \nthen the text width which I'm going to \nset in two and this is going to be all for  \nnow now let's see how it looks like right I'm \ngoing to call cv2 imshow image and my image  \nthen cv2 wait key zero okay and that's pretty \nmuch all what we are doing here is plotting  \nthe image and drawing all the key points on top \nof this image with the key Point number on each  \nkey point right so it's going to be easier to \nknow exactly what we are detecting in the entire  \nimage and as a result everything looks pretty well \nbut I'm going to do something so I can improve the  \nvisualization I am going to make the font size \nequal to 0.5 and I'm going to press play again  \nokay now the visualization is a little better and \nyou can see that everything looks pretty pretty  \nwell right we are plotting all the key points on \ntop of our image and this is exactly how you can  \nmake predictions using YOLO V8 so the last thing \nI'm going to show you is to open this file the  \nclass names and let's take a look at exactly what \nwe are detecting right so you can see here 0 we  \nhave the nose then upper jaw lower jaw mouth end \nright mouth end left and so on right you can see  \nthat for example 21 we are somewhere around here \nwhich is back middle it makes sense then 37 we are  \naround here body middle right and then 36 belly \nbottom so everything looks pretty pretty well  \nand you can see that we are still getting the \nissues we notice in the other pictures which  \nis the legs are not very well detected and the \nend tail is not very well detected either but  \neverything else seems pretty pretty pretty well \nso this is going to be all for this tutorial \non yolo V8 my name is Felipe I'm a computer vision  \nengineer and this is exactly the type of videos and \nthe type of tutorials I make in this channel if  \nyou enjoyed this video I invite you to click the \nlike button and I also invite you to take a look  \nat these two videos over there this is going to be \nall for today and see you on my next video [Music]\n",
  "words": [
    "yolo",
    "v8",
    "one",
    "powerful",
    "computer",
    "vision",
    "technologies",
    "ever",
    "made",
    "video",
    "going",
    "show",
    "object",
    "detection",
    "image",
    "classification",
    "image",
    "segmentation",
    "pose",
    "detection",
    "custom",
    "data",
    "using",
    "yolo",
    "v8",
    "going",
    "show",
    "entire",
    "process",
    "annotate",
    "data",
    "training",
    "analyze",
    "performance",
    "model",
    "trained",
    "use",
    "model",
    "make",
    "predictions",
    "full",
    "comprehensive",
    "tutorial",
    "yolo",
    "v8",
    "let",
    "get",
    "started",
    "hey",
    "name",
    "felipe",
    "welcome",
    "channel",
    "video",
    "going",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "going",
    "walk",
    "step",
    "step",
    "entire",
    "process",
    "collect",
    "data",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "annotate",
    "data",
    "using",
    "computer",
    "vision",
    "annotation",
    "tool",
    "structure",
    "data",
    "exact",
    "format",
    "need",
    "order",
    "use",
    "yolo",
    "v8",
    "training",
    "going",
    "show",
    "two",
    "different",
    "ways",
    "local",
    "environment",
    "also",
    "google",
    "collab",
    "test",
    "performance",
    "ofthea",
    "model",
    "trained",
    "going",
    "super",
    "comprehensive",
    "guide",
    "everything",
    "need",
    "know",
    "order",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "custom",
    "data",
    "set",
    "let",
    "get",
    "started",
    "let",
    "start",
    "tutorial",
    "let",
    "start",
    "process",
    "first",
    "thing",
    "need",
    "collect",
    "data",
    "data",
    "collection",
    "first",
    "step",
    "process",
    "remember",
    "want",
    "train",
    "object",
    "detector",
    "type",
    "machine",
    "learning",
    "model",
    "definitely",
    "need",
    "data",
    "algorithm",
    "specific",
    "algorithm",
    "going",
    "use",
    "case",
    "yolo",
    "v8",
    "important",
    "data",
    "important",
    "algorithm",
    "data",
    "train",
    "machine",
    "learning",
    "model",
    "important",
    "let",
    "show",
    "data",
    "going",
    "use",
    "process",
    "images",
    "downloaded",
    "going",
    "use",
    "order",
    "train",
    "object",
    "detector",
    "let",
    "show",
    "images",
    "alpacas",
    "alpaca",
    "data",
    "set",
    "downloaded",
    "today",
    "tutorial",
    "see",
    "images",
    "containing",
    "alpacas",
    "different",
    "postures",
    "different",
    "situations",
    "right",
    "exactly",
    "data",
    "going",
    "use",
    "process",
    "obviously",
    "could",
    "use",
    "whatever",
    "data",
    "set",
    "want",
    "could",
    "use",
    "exactly",
    "data",
    "set",
    "going",
    "use",
    "collect",
    "data",
    "could",
    "take",
    "cell",
    "phone",
    "camera",
    "whatever",
    "take",
    "pictures",
    "photos",
    "images",
    "going",
    "use",
    "data",
    "collection",
    "something",
    "else",
    "could",
    "use",
    "publicly",
    "available",
    "data",
    "set",
    "let",
    "show",
    "data",
    "set",
    "open",
    "image",
    "dataset",
    "version",
    "7",
    "dataset",
    "publicly",
    "available",
    "definitely",
    "use",
    "order",
    "work",
    "today",
    "tutorial",
    "order",
    "train",
    "object",
    "detector",
    "going",
    "train",
    "todays",
    "tutorial",
    "let",
    "show",
    "looks",
    "like",
    "go",
    "explore",
    "select",
    "detection",
    "uh",
    "see",
    "going",
    "unselect",
    "options",
    "see",
    "huge",
    "data",
    "set",
    "containing",
    "many",
    "many",
    "many",
    "many",
    "many",
    "many",
    "many",
    "many",
    "categories",
    "know",
    "many",
    "many",
    "huge",
    "data",
    "set",
    "contains",
    "millions",
    "images",
    "hundreds",
    "thousands",
    "millions",
    "annotations",
    "thousands",
    "categories",
    "super",
    "super",
    "huge",
    "data",
    "set",
    "see",
    "many",
    "many",
    "different",
    "categories",
    "looking",
    "trumpet",
    "see",
    "different",
    "images",
    "trumpets",
    "one",
    "images",
    "bounding",
    "box",
    "around",
    "trumpet",
    "show",
    "another",
    "one",
    "example",
    "also",
    "beetle",
    "category",
    "see",
    "many",
    "different",
    "images",
    "many",
    "different",
    "type",
    "beetles",
    "another",
    "example",
    "show",
    "one",
    "bottle",
    "many",
    "different",
    "images",
    "containing",
    "bottles",
    "example",
    "see",
    "many",
    "different",
    "type",
    "bottles",
    "cases",
    "bounding",
    "box",
    "around",
    "bottle",
    "could",
    "show",
    "know",
    "many",
    "examples",
    "many",
    "many",
    "many",
    "different",
    "categories",
    "remember",
    "first",
    "step",
    "process",
    "data",
    "collection",
    "data",
    "going",
    "use",
    "project",
    "dataset",
    "alpacas",
    "use",
    "exact",
    "data",
    "using",
    "want",
    "use",
    "data",
    "set",
    "alpacas",
    "collect",
    "data",
    "set",
    "using",
    "cell",
    "phone",
    "camera",
    "something",
    "like",
    "also",
    "download",
    "images",
    "publicly",
    "available",
    "dataset",
    "example",
    "open",
    "images",
    "dataset",
    "version",
    "decide",
    "use",
    "open",
    "images",
    "dataset",
    "version",
    "7",
    "let",
    "show",
    "another",
    "category",
    "alpaca",
    "exactly",
    "downloaded",
    "images",
    "alpacas",
    "case",
    "decide",
    "use",
    "publicly",
    "available",
    "data",
    "set",
    "provide",
    "couple",
    "scripts",
    "used",
    "order",
    "download",
    "data",
    "order",
    "parse",
    "different",
    "annotations",
    "format",
    "data",
    "exact",
    "format",
    "need",
    "order",
    "work",
    "today",
    "tutorial",
    "case",
    "decide",
    "use",
    "open",
    "image",
    "data",
    "set",
    "going",
    "give",
    "couple",
    "scripts",
    "going",
    "super",
    "super",
    "useful",
    "say",
    "data",
    "collection",
    "remember",
    "need",
    "collect",
    "data",
    "want",
    "train",
    "object",
    "detector",
    "different",
    "ways",
    "different",
    "categories",
    "different",
    "options",
    "let",
    "move",
    "next",
    "step",
    "let",
    "continue",
    "data",
    "annotation",
    "collected",
    "lot",
    "images",
    "lot",
    "images",
    "collected",
    "maybe",
    "downloaded",
    "data",
    "publicly",
    "available",
    "data",
    "set",
    "time",
    "annotate",
    "data",
    "set",
    "maybe",
    "lucky",
    "enough",
    "creating",
    "dataset",
    "maybe",
    "data",
    "set",
    "using",
    "already",
    "annotated",
    "maybe",
    "already",
    "bounding",
    "boxes",
    "objects",
    "categories",
    "maybe",
    "case",
    "really",
    "need",
    "annotate",
    "data",
    "case",
    "example",
    "using",
    "custom",
    "data",
    "set",
    "dataset",
    "collected",
    "cell",
    "phone",
    "camera",
    "something",
    "collected",
    "case",
    "definitely",
    "need",
    "annotate",
    "data",
    "order",
    "make",
    "process",
    "comprehensive",
    "order",
    "show",
    "like",
    "entire",
    "process",
    "let",
    "show",
    "well",
    "annotate",
    "data",
    "going",
    "use",
    "tool",
    "cvat",
    "labeling",
    "tool",
    "used",
    "many",
    "many",
    "times",
    "many",
    "projects",
    "would",
    "say",
    "one",
    "favorite",
    "tools",
    "used",
    "pretty",
    "much",
    "absolutely",
    "object",
    "detection",
    "computer",
    "vision",
    "related",
    "annotation",
    "tools",
    "used",
    "maybe",
    "used",
    "used",
    "many",
    "many",
    "familiar",
    "annotation",
    "tools",
    "would",
    "know",
    "many",
    "many",
    "none",
    "perfect",
    "say",
    "different",
    "annotation",
    "tools",
    "advantages",
    "disadvantages",
    "situations",
    "prefer",
    "use",
    "one",
    "situations",
    "better",
    "use",
    "another",
    "one",
    "cvat",
    "many",
    "advantages",
    "also",
    "disadvantages",
    "saying",
    "perfect",
    "nevertheless",
    "tool",
    "used",
    "many",
    "projects",
    "really",
    "really",
    "like",
    "let",
    "show",
    "use",
    "go",
    "select",
    "try",
    "free",
    "different",
    "pricing",
    "options",
    "going",
    "work",
    "small",
    "team",
    "definitely",
    "use",
    "free",
    "version",
    "already",
    "logged",
    "already",
    "logged",
    "account",
    "account",
    "create",
    "new",
    "one",
    "going",
    "see",
    "like",
    "sign",
    "page",
    "create",
    "new",
    "account",
    "logged",
    "account",
    "logged",
    "annotation",
    "tool",
    "need",
    "go",
    "projects",
    "create",
    "new",
    "one",
    "going",
    "create",
    "project",
    "called",
    "alpaca",
    "detector",
    "project",
    "going",
    "working",
    "going",
    "add",
    "label",
    "case",
    "going",
    "one",
    "label",
    "alpaca",
    "pretty",
    "much",
    "submit",
    "open",
    "created",
    "project",
    "one",
    "label",
    "alpaca",
    "remember",
    "project",
    "many",
    "many",
    "different",
    "labels",
    "add",
    "labels",
    "need",
    "go",
    "create",
    "new",
    "task",
    "going",
    "create",
    "new",
    "annotation",
    "task",
    "going",
    "call",
    "task",
    "something",
    "like",
    "alpaca",
    "detector",
    "annotation",
    "task",
    "zero",
    "zero",
    "one",
    "project",
    "alpaca",
    "detector",
    "take",
    "labels",
    "project",
    "need",
    "upload",
    "images",
    "going",
    "annotate",
    "case",
    "obviously",
    "going",
    "annotate",
    "images",
    "see",
    "many",
    "images",
    "make",
    "sense",
    "annotate",
    "images",
    "video",
    "452",
    "images",
    "going",
    "annotate",
    "going",
    "select",
    "order",
    "show",
    "exactly",
    "annotation",
    "tool",
    "works",
    "exactly",
    "use",
    "project",
    "also",
    "case",
    "already",
    "downloaded",
    "images",
    "publicly",
    "available",
    "data",
    "set",
    "open",
    "images",
    "dataset",
    "version",
    "7",
    "already",
    "annotations",
    "already",
    "bounding",
    "boxes",
    "case",
    "really",
    "need",
    "annotate",
    "data",
    "already",
    "annotations",
    "going",
    "pretend",
    "label",
    "images",
    "show",
    "works",
    "go",
    "back",
    "going",
    "select",
    "something",
    "like",
    "many",
    "images",
    "right",
    "yeah",
    "going",
    "select",
    "many",
    "images",
    "going",
    "open",
    "images",
    "going",
    "click",
    "submit",
    "open",
    "right",
    "going",
    "create",
    "task",
    "time",
    "going",
    "open",
    "task",
    "start",
    "working",
    "annotation",
    "process",
    "okay",
    "task",
    "created",
    "going",
    "click",
    "job",
    "number",
    "job",
    "number",
    "open",
    "images",
    "going",
    "start",
    "annotating",
    "images",
    "working",
    "object",
    "detection",
    "problem",
    "going",
    "annotate",
    "bounding",
    "boxes",
    "need",
    "go",
    "example",
    "detecting",
    "many",
    "different",
    "categories",
    "would",
    "select",
    "category",
    "going",
    "label",
    "case",
    "going",
    "label",
    "always",
    "category",
    "alpaca",
    "really",
    "need",
    "anything",
    "going",
    "select",
    "shape",
    "let",
    "show",
    "going",
    "click",
    "upper",
    "left",
    "corner",
    "bottom",
    "right",
    "corner",
    "idea",
    "enclose",
    "object",
    "object",
    "right",
    "idea",
    "draw",
    "bonding",
    "box",
    "around",
    "object",
    "want",
    "enclose",
    "object",
    "see",
    "animals",
    "back",
    "right",
    "alpacas",
    "going",
    "label",
    "shortcut",
    "pressing",
    "letter",
    "n",
    "create",
    "new",
    "bounding",
    "box",
    "another",
    "one",
    "another",
    "one",
    "another",
    "alpaca",
    "last",
    "one",
    "okay",
    "pretty",
    "much",
    "ready",
    "press",
    "ctrl",
    "going",
    "save",
    "annotations",
    "recommend",
    "press",
    "ctrl",
    "often",
    "possible",
    "always",
    "good",
    "practice",
    "everything",
    "saved",
    "continue",
    "next",
    "image",
    "going",
    "annotate",
    "alpaca",
    "going",
    "exactly",
    "process",
    "start",
    "obviously",
    "start",
    "whatever",
    "corner",
    "want",
    "going",
    "something",
    "like",
    "okay",
    "image",
    "completely",
    "annotated",
    "going",
    "continue",
    "next",
    "image",
    "case",
    "going",
    "annotate",
    "alpaca",
    "real",
    "alpaca",
    "want",
    "object",
    "detector",
    "able",
    "detect",
    "type",
    "objects",
    "going",
    "annotate",
    "well",
    "going",
    "good",
    "exercise",
    "want",
    "work",
    "machine",
    "learning",
    "engineer",
    "computer",
    "visual",
    "engineer",
    "annotating",
    "data",
    "something",
    "often",
    "actually",
    "training",
    "machine",
    "learning",
    "models",
    "something",
    "often",
    "usually",
    "data",
    "annotation",
    "done",
    "people",
    "right",
    "done",
    "annotator",
    "different",
    "services",
    "hire",
    "order",
    "annotate",
    "data",
    "whatever",
    "case",
    "whatever",
    "service",
    "use",
    "always",
    "good",
    "practice",
    "annotate",
    "images",
    "right",
    "annotate",
    "images",
    "going",
    "familiar",
    "data",
    "also",
    "going",
    "familiar",
    "instruct",
    "annotators",
    "annotate",
    "particular",
    "data",
    "example",
    "case",
    "really",
    "challenging",
    "annotate",
    "two",
    "objects",
    "let",
    "show",
    "cases",
    "always",
    "situations",
    "little",
    "confusing",
    "case",
    "confusing",
    "either",
    "label",
    "object",
    "example",
    "images",
    "ago",
    "annotating",
    "image",
    "annotator",
    "working",
    "image",
    "person",
    "going",
    "ask",
    "annotate",
    "image",
    "right",
    "annotator",
    "working",
    "image",
    "instructions",
    "provide",
    "clear",
    "enough",
    "person",
    "going",
    "ask",
    "hey",
    "annotate",
    "image",
    "alpaca",
    "example",
    "situation",
    "another",
    "situation",
    "happened",
    "many",
    "different",
    "alpacas",
    "background",
    "example",
    "one",
    "little",
    "occluded",
    "could",
    "annotator",
    "someone",
    "ask",
    "hey",
    "want",
    "annotate",
    "absolutely",
    "every",
    "single",
    "alpaca",
    "maybe",
    "draw",
    "huge",
    "bonding",
    "box",
    "background",
    "say",
    "everything",
    "background",
    "alpaca",
    "something",
    "annotator",
    "working",
    "images",
    "going",
    "many",
    "many",
    "different",
    "questions",
    "regarding",
    "annotate",
    "data",
    "perfect",
    "questions",
    "good",
    "questions",
    "exactly",
    "mean",
    "annotating",
    "data",
    "defining",
    "exactly",
    "objects",
    "going",
    "detect",
    "right",
    "um",
    "going",
    "annotate",
    "images",
    "going",
    "familiar",
    "different",
    "situations",
    "exactly",
    "going",
    "data",
    "clear",
    "exactly",
    "objects",
    "want",
    "detect",
    "right",
    "let",
    "continue",
    "show",
    "examples",
    "another",
    "situation",
    "case",
    "want",
    "say",
    "alpacas",
    "going",
    "say",
    "something",
    "like",
    "could",
    "another",
    "person",
    "says",
    "one",
    "annotation",
    "something",
    "like",
    "right",
    "going",
    "draw",
    "one",
    "bonding",
    "box",
    "enclosing",
    "something",
    "good",
    "criteria",
    "mean",
    "criteria",
    "guess",
    "would",
    "fine",
    "uh",
    "whatever",
    "criteria",
    "would",
    "need",
    "one",
    "right",
    "need",
    "criteria",
    "annotating",
    "images",
    "going",
    "understand",
    "exactly",
    "alpaca",
    "exactly",
    "object",
    "want",
    "consider",
    "alpaca",
    "going",
    "continue",
    "another",
    "case",
    "may",
    "clear",
    "going",
    "say",
    "alpaca",
    "black",
    "one",
    "see",
    "part",
    "really",
    "see",
    "head",
    "going",
    "say",
    "alpaca",
    "anyway",
    "one",
    "one",
    "one",
    "also",
    "something",
    "always",
    "happens",
    "working",
    "annotating",
    "images",
    "aware",
    "diversity",
    "images",
    "example",
    "perfect",
    "perfect",
    "example",
    "alpaca",
    "reflected",
    "mirror",
    "like",
    "small",
    "section",
    "alpaca",
    "like",
    "small",
    "uh",
    "piece",
    "alpacas",
    "face",
    "going",
    "annotate",
    "one",
    "yeah",
    "criteria",
    "another",
    "person",
    "could",
    "say",
    "object",
    "want",
    "detect",
    "object",
    "want",
    "detect",
    "maybe",
    "another",
    "person",
    "would",
    "say",
    "alpaca",
    "alpacas",
    "really",
    "apply",
    "makeup",
    "real",
    "going",
    "annotate",
    "image",
    "get",
    "idea",
    "right",
    "could",
    "many",
    "different",
    "situations",
    "way",
    "get",
    "familiar",
    "different",
    "type",
    "situations",
    "annotate",
    "images",
    "let",
    "continue",
    "case",
    "going",
    "something",
    "like",
    "yeah",
    "would",
    "say",
    "important",
    "object",
    "one",
    "ones",
    "like",
    "yeah",
    "really",
    "important",
    "detect",
    "okay",
    "let",
    "continue",
    "similar",
    "another",
    "image",
    "know",
    "many",
    "selected",
    "think",
    "left",
    "know",
    "type",
    "animals",
    "natural",
    "surprised",
    "like",
    "head",
    "right",
    "like",
    "lot",
    "hair",
    "completely",
    "hairless",
    "entire",
    "body",
    "mean",
    "know",
    "surprised",
    "maybe",
    "made",
    "like",
    "maybe",
    "like",
    "natural",
    "alpaca",
    "cares",
    "cares",
    "let",
    "continue",
    "let",
    "see",
    "many",
    "left",
    "let",
    "continue",
    "uh",
    "let",
    "see",
    "find",
    "strange",
    "situation",
    "define",
    "alpaca",
    "show",
    "additional",
    "example",
    "also",
    "annotating",
    "could",
    "define",
    "bounding",
    "box",
    "many",
    "many",
    "different",
    "ways",
    "example",
    "case",
    "could",
    "define",
    "like",
    "could",
    "define",
    "like",
    "mean",
    "could",
    "define",
    "super",
    "super",
    "fit",
    "object",
    "something",
    "like",
    "super",
    "super",
    "fit",
    "could",
    "enclose",
    "exactly",
    "object",
    "could",
    "little",
    "relaxed",
    "right",
    "example",
    "something",
    "like",
    "would",
    "okay",
    "want",
    "like",
    "okay",
    "right",
    "super",
    "super",
    "super",
    "accurate",
    "could",
    "like",
    "little",
    "relaxed",
    "going",
    "work",
    "anyway",
    "uh",
    "last",
    "one",
    "pretty",
    "much",
    "last",
    "one",
    "okay",
    "going",
    "something",
    "like",
    "going",
    "take",
    "think",
    "also",
    "alpaca",
    "anyway",
    "going",
    "annotate",
    "part",
    "pretty",
    "much",
    "going",
    "save",
    "images",
    "selected",
    "order",
    "show",
    "use",
    "annotation",
    "tool",
    "pretty",
    "much",
    "data",
    "annotation",
    "remember",
    "also",
    "important",
    "step",
    "important",
    "task",
    "process",
    "want",
    "train",
    "object",
    "detector",
    "need",
    "data",
    "need",
    "annotated",
    "data",
    "important",
    "part",
    "process",
    "remember",
    "tools",
    "cvat",
    "one",
    "many",
    "many",
    "many",
    "available",
    "image",
    "annotation",
    "tools",
    "definitely",
    "use",
    "another",
    "one",
    "want",
    "perfectly",
    "fine",
    "like",
    "use",
    "one",
    "use",
    "whatever",
    "annotation",
    "tool",
    "want",
    "tool",
    "think",
    "easy",
    "use",
    "like",
    "fact",
    "easy",
    "use",
    "also",
    "web",
    "application",
    "really",
    "need",
    "download",
    "anything",
    "computer",
    "go",
    "ahead",
    "use",
    "web",
    "also",
    "one",
    "advantages",
    "yeah",
    "tool",
    "showed",
    "video",
    "use",
    "order",
    "train",
    "object",
    "detector",
    "going",
    "step",
    "let",
    "continue",
    "next",
    "part",
    "process",
    "collected",
    "annotated",
    "data",
    "comes",
    "time",
    "format",
    "data",
    "structure",
    "data",
    "format",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "working",
    "machine",
    "learning",
    "training",
    "machine",
    "learning",
    "model",
    "every",
    "single",
    "algorithm",
    "work",
    "going",
    "requirements",
    "input",
    "data",
    "going",
    "happen",
    "absolutely",
    "every",
    "single",
    "algorithm",
    "work",
    "going",
    "happen",
    "yolo",
    "different",
    "yolo",
    "versions",
    "going",
    "happen",
    "absolutely",
    "every",
    "single",
    "algorithm",
    "working",
    "especially",
    "yolov8",
    "needs",
    "data",
    "specific",
    "format",
    "created",
    "step",
    "process",
    "take",
    "data",
    "generated",
    "images",
    "annotations",
    "convert",
    "images",
    "format",
    "need",
    "order",
    "input",
    "data",
    "yolo",
    "v8",
    "let",
    "show",
    "exactly",
    "going",
    "annotated",
    "data",
    "using",
    "cvat",
    "go",
    "tasks",
    "select",
    "option",
    "export",
    "task",
    "data",
    "set",
    "going",
    "ask",
    "export",
    "format",
    "export",
    "data",
    "many",
    "different",
    "formats",
    "going",
    "choose",
    "going",
    "scroll",
    "way",
    "going",
    "choose",
    "yolo",
    "right",
    "also",
    "save",
    "images",
    "case",
    "really",
    "needed",
    "really",
    "need",
    "images",
    "already",
    "images",
    "going",
    "click",
    "ok",
    "wait",
    "seconds",
    "minutes",
    "large",
    "data",
    "set",
    "going",
    "download",
    "file",
    "like",
    "open",
    "file",
    "going",
    "see",
    "different",
    "files",
    "right",
    "see",
    "four",
    "different",
    "files",
    "actually",
    "three",
    "files",
    "directory",
    "open",
    "directory",
    "going",
    "see",
    "many",
    "many",
    "different",
    "file",
    "names",
    "go",
    "back",
    "images",
    "directory",
    "see",
    "images",
    "file",
    "names",
    "look",
    "pretty",
    "much",
    "right",
    "see",
    "file",
    "name",
    "structure",
    "file",
    "name",
    "looks",
    "pretty",
    "much",
    "one",
    "ones",
    "downloaded",
    "cvat",
    "basically",
    "way",
    "works",
    "downloading",
    "data",
    "format",
    "yolo",
    "format",
    "every",
    "single",
    "annotation",
    "file",
    "going",
    "downloaded",
    "name",
    "image",
    "annotated",
    "different",
    "extension",
    "image",
    "called",
    "annotation",
    "file",
    "specific",
    "image",
    "right",
    "way",
    "works",
    "open",
    "image",
    "going",
    "see",
    "something",
    "like",
    "going",
    "see",
    "case",
    "one",
    "row",
    "let",
    "show",
    "another",
    "one",
    "contains",
    "one",
    "annotation",
    "remember",
    "many",
    "example",
    "one",
    "contains",
    "two",
    "different",
    "rows",
    "one",
    "rows",
    "different",
    "object",
    "case",
    "alpacas",
    "data",
    "set",
    "one",
    "rows",
    "different",
    "alpaca",
    "make",
    "sense",
    "information",
    "first",
    "character",
    "class",
    "class",
    "detecting",
    "wanted",
    "enlarge",
    "entire",
    "file",
    "know",
    "okay",
    "okay",
    "first",
    "number",
    "class",
    "detecting",
    "case",
    "one",
    "zero",
    "class",
    "four",
    "numbers",
    "define",
    "bounding",
    "box",
    "right",
    "encoded",
    "yolo",
    "format",
    "means",
    "first",
    "two",
    "numbers",
    "position",
    "center",
    "bounding",
    "box",
    "width",
    "bounding",
    "box",
    "height",
    "bounding",
    "box",
    "notice",
    "float",
    "numbers",
    "basically",
    "means",
    "relative",
    "entire",
    "size",
    "image",
    "annotations",
    "downloaded",
    "exact",
    "format",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "remember",
    "downloading",
    "annotations",
    "noticed",
    "many",
    "many",
    "many",
    "different",
    "options",
    "different",
    "options",
    "different",
    "formats",
    "could",
    "save",
    "annotations",
    "important",
    "definitely",
    "need",
    "download",
    "yolo",
    "going",
    "work",
    "yolo",
    "everything",
    "pretty",
    "much",
    "ready",
    "need",
    "order",
    "input",
    "yolo",
    "v8",
    "right",
    "select",
    "yolo",
    "exactly",
    "format",
    "need",
    "order",
    "continue",
    "next",
    "steps",
    "data",
    "different",
    "format",
    "maybe",
    "already",
    "collected",
    "annotate",
    "data",
    "data",
    "whatever",
    "format",
    "please",
    "remember",
    "need",
    "convert",
    "images",
    "actually",
    "convert",
    "annotations",
    "yolo",
    "format",
    "one",
    "things",
    "need",
    "data",
    "one",
    "things",
    "need",
    "order",
    "need",
    "format",
    "order",
    "structure",
    "data",
    "way",
    "use",
    "object",
    "detector",
    "yolo",
    "v8",
    "another",
    "thing",
    "create",
    "specific",
    "directories",
    "containing",
    "data",
    "right",
    "going",
    "need",
    "two",
    "directories",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "definitely",
    "need",
    "input",
    "names",
    "choose",
    "whatever",
    "name",
    "want",
    "need",
    "choose",
    "two",
    "names",
    "right",
    "images",
    "located",
    "directory",
    "called",
    "images",
    "labels",
    "located",
    "directory",
    "called",
    "labels",
    "way",
    "yolo",
    "v8",
    "works",
    "need",
    "create",
    "two",
    "directories",
    "within",
    "image",
    "directory",
    "going",
    "images",
    "click",
    "see",
    "images",
    "within",
    "images",
    "directory",
    "within",
    "train",
    "directory",
    "within",
    "images",
    "directory",
    "directry",
    "absolutely",
    "needed",
    "right",
    "could",
    "perfectly",
    "take",
    "images",
    "images",
    "could",
    "paste",
    "images",
    "right",
    "images",
    "directory",
    "everything",
    "fine",
    "want",
    "could",
    "something",
    "exactly",
    "could",
    "additional",
    "directory",
    "images",
    "images",
    "call",
    "whatever",
    "way",
    "want",
    "good",
    "strategy",
    "case",
    "want",
    "example",
    "train",
    "directory",
    "containing",
    "training",
    "images",
    "another",
    "directory",
    "could",
    "called",
    "validation",
    "example",
    "going",
    "many",
    "images",
    "order",
    "validate",
    "process",
    "training",
    "process",
    "algorithm",
    "could",
    "additional",
    "directory",
    "could",
    "called",
    "test",
    "example",
    "use",
    "directories",
    "order",
    "label",
    "data",
    "right",
    "create",
    "different",
    "versions",
    "data",
    "another",
    "thing",
    "commonly",
    "done",
    "could",
    "create",
    "many",
    "directories",
    "many",
    "different",
    "purposes",
    "perfectly",
    "fine",
    "could",
    "also",
    "paste",
    "images",
    "also",
    "perfectly",
    "fine",
    "see",
    "labels",
    "directory",
    "exactly",
    "directory",
    "called",
    "train",
    "within",
    "directory",
    "different",
    "files",
    "one",
    "files",
    "let",
    "show",
    "like",
    "going",
    "much",
    "better",
    "one",
    "files",
    "one",
    "txt",
    "files",
    "image",
    "images",
    "directory",
    "called",
    "exactly",
    "exactly",
    "file",
    "name",
    "different",
    "extension",
    "right",
    "case",
    "one",
    "called",
    "one",
    "called",
    "see",
    "exactly",
    "exactly",
    "file",
    "name",
    "example",
    "first",
    "image",
    "called",
    "oa2ea8f",
    "exactly",
    "name",
    "first",
    "image",
    "images",
    "directory",
    "called",
    "oa2ea8f",
    "basically",
    "absolutely",
    "every",
    "image",
    "images",
    "directory",
    "need",
    "annotations",
    "file",
    "file",
    "labels",
    "directory",
    "called",
    "exactly",
    "exactly",
    "different",
    "extension",
    "images",
    "annotations",
    "files",
    "another",
    "thing",
    "also",
    "defines",
    "structure",
    "need",
    "data",
    "pretty",
    "much",
    "remember",
    "need",
    "two",
    "directories",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "within",
    "images",
    "directories",
    "going",
    "images",
    "within",
    "labels",
    "directories",
    "annotations",
    "labels",
    "absolutely",
    "every",
    "single",
    "image",
    "images",
    "directory",
    "need",
    "file",
    "labels",
    "directory",
    "called",
    "exactly",
    "different",
    "extension",
    "images",
    "annotation",
    "files",
    "labels",
    "expressed",
    "yolo",
    "format",
    "many",
    "rows",
    "objects",
    "image",
    "every",
    "single",
    "one",
    "rows",
    "structure",
    "going",
    "five",
    "terms",
    "first",
    "one",
    "class",
    "id",
    "case",
    "one",
    "class",
    "id",
    "detecting",
    "alpacas",
    "case",
    "number",
    "always",
    "zero",
    "detecting",
    "one",
    "class",
    "different",
    "numbers",
    "position",
    "x",
    "position",
    "center",
    "bounding",
    "box",
    "width",
    "height",
    "everything",
    "expressed",
    "relative",
    "coordinates",
    "basically",
    "structure",
    "need",
    "data",
    "step",
    "pretty",
    "much",
    "converting",
    "data",
    "formatting",
    "data",
    "let",
    "move",
    "training",
    "going",
    "take",
    "data",
    "going",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "taken",
    "data",
    "format",
    "need",
    "order",
    "train",
    "yolo",
    "v8",
    "comes",
    "time",
    "training",
    "comes",
    "time",
    "going",
    "take",
    "custom",
    "data",
    "set",
    "going",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "yolo",
    "v8",
    "official",
    "repository",
    "one",
    "things",
    "like",
    "yolo",
    "v8",
    "order",
    "train",
    "object",
    "detector",
    "either",
    "python",
    "python",
    "instructions",
    "also",
    "use",
    "command",
    "line",
    "utility",
    "let",
    "see",
    "find",
    "also",
    "execute",
    "command",
    "like",
    "terminal",
    "something",
    "looks",
    "like",
    "pretty",
    "much",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "something",
    "really",
    "really",
    "liked",
    "something",
    "definitely",
    "going",
    "use",
    "projects",
    "think",
    "convenient",
    "easy",
    "way",
    "train",
    "object",
    "detector",
    "machine",
    "learning",
    "model",
    "first",
    "thing",
    "notice",
    "yolo",
    "v8",
    "two",
    "different",
    "ways",
    "train",
    "object",
    "detector",
    "either",
    "python",
    "usually",
    "run",
    "command",
    "terminal",
    "going",
    "show",
    "ways",
    "familiar",
    "ways",
    "also",
    "mentioned",
    "going",
    "show",
    "entire",
    "process",
    "local",
    "environment",
    "python",
    "project",
    "also",
    "going",
    "show",
    "process",
    "google",
    "colab",
    "know",
    "people",
    "prefer",
    "work",
    "local",
    "environment",
    "one",
    "people",
    "know",
    "people",
    "prefer",
    "work",
    "google",
    "colab",
    "depending",
    "group",
    "going",
    "show",
    "ways",
    "choose",
    "one",
    "like",
    "let",
    "start",
    "let",
    "go",
    "pycharm",
    "pycharm",
    "project",
    "created",
    "training",
    "file",
    "going",
    "edit",
    "order",
    "train",
    "object",
    "detector",
    "first",
    "thing",
    "going",
    "copy",
    "lines",
    "going",
    "copy",
    "everything",
    "going",
    "remove",
    "everything",
    "need",
    "copy",
    "paste",
    "want",
    "build",
    "new",
    "model",
    "scratch",
    "going",
    "keep",
    "sentence",
    "going",
    "train",
    "model",
    "going",
    "remove",
    "everything",
    "first",
    "sentence",
    "right",
    "two",
    "lines",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "going",
    "adjustments",
    "obviously",
    "first",
    "thing",
    "need",
    "import",
    "ultralytics",
    "library",
    "need",
    "use",
    "order",
    "import",
    "yolo",
    "order",
    "train",
    "yolo",
    "v8",
    "model",
    "python",
    "library",
    "need",
    "install",
    "usually",
    "go",
    "terminal",
    "something",
    "like",
    "pip",
    "install",
    "library",
    "name",
    "case",
    "nothing",
    "going",
    "happen",
    "already",
    "installed",
    "library",
    "please",
    "remember",
    "install",
    "also",
    "please",
    "mind",
    "installing",
    "library",
    "library",
    "many",
    "many",
    "dependencies",
    "going",
    "install",
    "many",
    "many",
    "many",
    "many",
    "different",
    "python",
    "packages",
    "going",
    "take",
    "lot",
    "space",
    "definitely",
    "please",
    "ready",
    "need",
    "lot",
    "available",
    "space",
    "order",
    "install",
    "library",
    "also",
    "going",
    "take",
    "time",
    "installing",
    "many",
    "many",
    "many",
    "different",
    "packages",
    "anyway",
    "let",
    "continue",
    "please",
    "remember",
    "install",
    "library",
    "two",
    "sentences",
    "need",
    "order",
    "run",
    "training",
    "python",
    "script",
    "sentence",
    "going",
    "leave",
    "loading",
    "specific",
    "yolo",
    "v8",
    "architecture",
    "specific",
    "yolo",
    "v8",
    "model",
    "going",
    "use",
    "see",
    "choose",
    "different",
    "models",
    "different",
    "versions",
    "different",
    "sizes",
    "yolo",
    "v8",
    "see",
    "nano",
    "small",
    "medium",
    "large",
    "extra",
    "large",
    "using",
    "nano",
    "version",
    "smallest",
    "one",
    "lightest",
    "one",
    "one",
    "going",
    "use",
    "yolo",
    "v8",
    "nano",
    "yolo",
    "v8",
    "n",
    "training",
    "sentence",
    "need",
    "edit",
    "file",
    "right",
    "need",
    "yaml",
    "file",
    "going",
    "contain",
    "configuration",
    "training",
    "created",
    "file",
    "named",
    "file",
    "sure",
    "appropriate",
    "name",
    "anyway",
    "name",
    "chosen",
    "file",
    "going",
    "edit",
    "parameter",
    "going",
    "input",
    "located",
    "located",
    "directory",
    "going",
    "work",
    "fine",
    "let",
    "show",
    "structure",
    "see",
    "simple",
    "configuration",
    "file",
    "keys",
    "path",
    "train",
    "val",
    "names",
    "right",
    "let",
    "start",
    "names",
    "let",
    "start",
    "going",
    "set",
    "different",
    "classes",
    "right",
    "training",
    "object",
    "detector",
    "detecting",
    "many",
    "different",
    "categories",
    "many",
    "different",
    "classes",
    "going",
    "input",
    "going",
    "type",
    "different",
    "classes",
    "case",
    "detecting",
    "alpacas",
    "class",
    "detecting",
    "one",
    "class",
    "number",
    "zero",
    "called",
    "alpaca",
    "detecting",
    "additional",
    "objects",
    "please",
    "remember",
    "include",
    "list",
    "objects",
    "detecting",
    "three",
    "parameters",
    "three",
    "arguments",
    "path",
    "absolute",
    "path",
    "directory",
    "containing",
    "images",
    "annotations",
    "please",
    "remember",
    "include",
    "absolute",
    "path",
    "ran",
    "issues",
    "trying",
    "specify",
    "relative",
    "path",
    "relative",
    "directory",
    "current",
    "directory",
    "project",
    "created",
    "directory",
    "data",
    "located",
    "using",
    "relative",
    "path",
    "issues",
    "noticed",
    "people",
    "issues",
    "well",
    "noticed",
    "github",
    "repository",
    "yolo",
    "v8",
    "noticed",
    "issues",
    "section",
    "people",
    "issues",
    "specifying",
    "relative",
    "path",
    "way",
    "fixed",
    "good",
    "way",
    "fix",
    "easy",
    "way",
    "fix",
    "specifying",
    "absolute",
    "path",
    "remember",
    "absolute",
    "path",
    "path",
    "directory",
    "directory",
    "contain",
    "images",
    "labels",
    "directories",
    "path",
    "need",
    "specify",
    "specify",
    "relative",
    "path",
    "location",
    "images",
    "located",
    "like",
    "specific",
    "images",
    "located",
    "right",
    "case",
    "relative",
    "path",
    "show",
    "location",
    "root",
    "directory",
    "go",
    "images",
    "located",
    "right",
    "exactly",
    "need",
    "specify",
    "see",
    "train",
    "data",
    "data",
    "algorithm",
    "going",
    "use",
    "training",
    "data",
    "another",
    "keyword",
    "val",
    "right",
    "validation",
    "dataset",
    "case",
    "going",
    "specify",
    "data",
    "used",
    "training",
    "reason",
    "want",
    "keep",
    "things",
    "simple",
    "tutorial",
    "going",
    "show",
    "entire",
    "process",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "custom",
    "data",
    "set",
    "want",
    "keep",
    "things",
    "simple",
    "going",
    "use",
    "data",
    "pretty",
    "much",
    "configuration",
    "file",
    "going",
    "back",
    "main",
    "pretty",
    "much",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "python",
    "simple",
    "going",
    "execute",
    "file",
    "going",
    "change",
    "number",
    "epochs",
    "going",
    "one",
    "epoch",
    "thing",
    "going",
    "show",
    "executed",
    "going",
    "show",
    "entire",
    "process",
    "notice",
    "everything",
    "working",
    "know",
    "everything",
    "running",
    "everything",
    "working",
    "fine",
    "continue",
    "let",
    "process",
    "let",
    "training",
    "one",
    "epoch",
    "continue",
    "see",
    "loading",
    "data",
    "already",
    "loaded",
    "data",
    "make",
    "use",
    "different",
    "information",
    "debugging",
    "information",
    "see",
    "see",
    "loading",
    "452",
    "images",
    "able",
    "load",
    "images",
    "right",
    "452",
    "452",
    "scroll",
    "see",
    "additional",
    "information",
    "additional",
    "values",
    "related",
    "training",
    "process",
    "training",
    "process",
    "going",
    "right",
    "training",
    "object",
    "detector",
    "additional",
    "information",
    "given",
    "process",
    "thing",
    "waiting",
    "wait",
    "process",
    "completed",
    "going",
    "stop",
    "video",
    "going",
    "fast",
    "forward",
    "video",
    "end",
    "training",
    "let",
    "see",
    "happens",
    "okay",
    "training",
    "completed",
    "see",
    "output",
    "says",
    "results",
    "saved",
    "go",
    "directory",
    "train39",
    "see",
    "many",
    "many",
    "different",
    "files",
    "files",
    "related",
    "training",
    "process",
    "done",
    "right",
    "example",
    "show",
    "images",
    "batches",
    "images",
    "used",
    "order",
    "train",
    "algorithm",
    "see",
    "name",
    "train",
    "batch0",
    "train",
    "batch1",
    "think",
    "train",
    "batch2",
    "lot",
    "different",
    "images",
    "lot",
    "different",
    "alpacas",
    "different",
    "images",
    "used",
    "training",
    "put",
    "together",
    "concatenated",
    "huge",
    "images",
    "see",
    "exactly",
    "images",
    "used",
    "training",
    "annotation",
    "top",
    "right",
    "bonding",
    "boxes",
    "top",
    "also",
    "similar",
    "images",
    "validation",
    "dataset",
    "right",
    "remember",
    "case",
    "using",
    "data",
    "validation",
    "use",
    "training",
    "exactly",
    "data",
    "different",
    "data",
    "labels",
    "validation",
    "data",
    "set",
    "training",
    "data",
    "set",
    "predictions",
    "images",
    "right",
    "see",
    "detecting",
    "anything",
    "absolutely",
    "prediction",
    "absolutely",
    "bounding",
    "box",
    "shallow",
    "training",
    "dummy",
    "training",
    "training",
    "algorithm",
    "one",
    "epoch",
    "example",
    "show",
    "output",
    "looks",
    "like",
    "show",
    "entire",
    "process",
    "real",
    "training",
    "nevertheless",
    "files",
    "going",
    "show",
    "better",
    "next",
    "step",
    "let",
    "show",
    "training",
    "done",
    "command",
    "line",
    "terminal",
    "using",
    "command",
    "showed",
    "using",
    "command",
    "like",
    "also",
    "let",
    "show",
    "training",
    "done",
    "google",
    "colab",
    "going",
    "terminal",
    "type",
    "something",
    "like",
    "yolo",
    "detect",
    "train",
    "data",
    "specify",
    "configuration",
    "file",
    "model",
    "number",
    "epochs",
    "exactly",
    "exactly",
    "going",
    "produce",
    "exactly",
    "output",
    "going",
    "change",
    "number",
    "epochs",
    "one",
    "make",
    "exactly",
    "let",
    "see",
    "happens",
    "see",
    "exactly",
    "output",
    "loaded",
    "images",
    "starting",
    "new",
    "training",
    "process",
    "training",
    "process",
    "going",
    "new",
    "run",
    "already",
    "created",
    "new",
    "directory",
    "train40",
    "going",
    "save",
    "information",
    "related",
    "training",
    "process",
    "going",
    "going",
    "exactly",
    "one",
    "exactly",
    "use",
    "command",
    "line",
    "use",
    "utility",
    "order",
    "training",
    "terminal",
    "see",
    "simple",
    "amazing",
    "simple",
    "amazing",
    "let",
    "show",
    "everything",
    "done",
    "google",
    "colab",
    "let",
    "go",
    "back",
    "browser",
    "show",
    "notebook",
    "created",
    "order",
    "train",
    "yolo",
    "v8",
    "google",
    "colab",
    "familiar",
    "google",
    "collab",
    "way",
    "create",
    "new",
    "notebook",
    "going",
    "google",
    "drive",
    "click",
    "new",
    "select",
    "option",
    "google",
    "collaboratory",
    "going",
    "create",
    "new",
    "google",
    "colab",
    "notebook",
    "use",
    "notebook",
    "train",
    "object",
    "detector",
    "let",
    "show",
    "notebook",
    "see",
    "contains",
    "one",
    "two",
    "three",
    "four",
    "five",
    "cells",
    "simple",
    "first",
    "thing",
    "need",
    "upload",
    "data",
    "going",
    "use",
    "order",
    "train",
    "detector",
    "going",
    "exactly",
    "data",
    "used",
    "exactly",
    "directories",
    "images",
    "directory",
    "label",
    "directory",
    "used",
    "first",
    "thing",
    "need",
    "execute",
    "cell",
    "mounts",
    "google",
    "drive",
    "instance",
    "google",
    "collab",
    "thing",
    "pressed",
    "enter",
    "cell",
    "may",
    "take",
    "time",
    "basically",
    "thing",
    "connect",
    "google",
    "drive",
    "access",
    "data",
    "google",
    "drive",
    "going",
    "select",
    "account",
    "allow",
    "pretty",
    "much",
    "comes",
    "data",
    "google",
    "drive",
    "right",
    "specific",
    "directory",
    "uploaded",
    "data",
    "case",
    "data",
    "located",
    "path",
    "right",
    "home",
    "google",
    "drive",
    "relative",
    "path",
    "location",
    "data",
    "files",
    "related",
    "project",
    "remember",
    "specify",
    "root",
    "directory",
    "directory",
    "uploaded",
    "data",
    "pretty",
    "much",
    "going",
    "execute",
    "cell",
    "save",
    "variable",
    "going",
    "execute",
    "cell",
    "pip",
    "install",
    "ultralytics",
    "command",
    "ran",
    "terminal",
    "local",
    "environment",
    "going",
    "run",
    "google",
    "collab",
    "remember",
    "start",
    "command",
    "exclamation",
    "mark",
    "means",
    "running",
    "command",
    "terminal",
    "process",
    "executed",
    "notebook",
    "launched",
    "remember",
    "include",
    "exclamation",
    "mark",
    "everything",
    "seems",
    "okay",
    "everything",
    "seems",
    "ready",
    "continue",
    "next",
    "cell",
    "one",
    "see",
    "done",
    "exactly",
    "structure",
    "input",
    "exactly",
    "lines",
    "local",
    "environment",
    "show",
    "see",
    "imported",
    "ultralytics",
    "defined",
    "yolo",
    "object",
    "called",
    "exactly",
    "obviously",
    "going",
    "need",
    "another",
    "yaml",
    "file",
    "going",
    "need",
    "yaml",
    "file",
    "google",
    "drive",
    "file",
    "specified",
    "like",
    "exactly",
    "configuration",
    "um",
    "yaml",
    "file",
    "showed",
    "local",
    "environment",
    "exactly",
    "idea",
    "exactly",
    "specify",
    "absolute",
    "path",
    "google",
    "drive",
    "directory",
    "difference",
    "difference",
    "see",
    "small",
    "mistake",
    "see",
    "data",
    "uploaded",
    "images",
    "labels",
    "directory",
    "within",
    "another",
    "rectory",
    "called",
    "data",
    "let",
    "something",
    "going",
    "create",
    "new",
    "directory",
    "called",
    "data",
    "images",
    "labels",
    "going",
    "put",
    "everything",
    "right",
    "everything",
    "consistent",
    "everything",
    "okay",
    "images",
    "train",
    "images",
    "within",
    "directory",
    "everything",
    "okay",
    "let",
    "go",
    "back",
    "google",
    "collab",
    "every",
    "time",
    "make",
    "edit",
    "every",
    "time",
    "something",
    "google",
    "drive",
    "always",
    "good",
    "idea",
    "restart",
    "runtime",
    "going",
    "going",
    "execute",
    "commands",
    "really",
    "need",
    "pip",
    "install",
    "library",
    "already",
    "installed",
    "environment",
    "going",
    "execute",
    "file",
    "think",
    "additional",
    "edit",
    "uh",
    "file",
    "called",
    "pretty",
    "much",
    "going",
    "run",
    "one",
    "epoch",
    "everything",
    "exactly",
    "local",
    "environment",
    "let",
    "see",
    "happens",
    "see",
    "exactly",
    "process",
    "everything",
    "looks",
    "pretty",
    "much",
    "loading",
    "data",
    "loading",
    "models",
    "everything",
    "going",
    "fine",
    "going",
    "pretty",
    "much",
    "process",
    "see",
    "takes",
    "additional",
    "time",
    "load",
    "data",
    "running",
    "environment",
    "running",
    "notebook",
    "given",
    "environment",
    "taking",
    "data",
    "google",
    "drive",
    "takes",
    "time",
    "slower",
    "process",
    "definitely",
    "idea",
    "thing",
    "need",
    "wait",
    "uh",
    "process",
    "completed",
    "pretty",
    "much",
    "think",
    "really",
    "make",
    "sense",
    "wait",
    "like",
    "going",
    "exactly",
    "process",
    "local",
    "environment",
    "end",
    "execution",
    "going",
    "results",
    "given",
    "directory",
    "directory",
    "notebook",
    "running",
    "process",
    "end",
    "process",
    "please",
    "remember",
    "execute",
    "command",
    "going",
    "take",
    "files",
    "defined",
    "runs",
    "directory",
    "contains",
    "runs",
    "made",
    "results",
    "produced",
    "going",
    "take",
    "directory",
    "directory",
    "chosen",
    "files",
    "data",
    "google",
    "collab",
    "please",
    "remember",
    "otherwise",
    "would",
    "able",
    "access",
    "data",
    "data",
    "contains",
    "results",
    "everything",
    "trained",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "google",
    "collab",
    "see",
    "process",
    "straightforward",
    "pretty",
    "much",
    "exactly",
    "process",
    "exactly",
    "idea",
    "local",
    "environment",
    "easy",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "y8",
    "done",
    "everything",
    "data",
    "right",
    "collected",
    "data",
    "annotated",
    "data",
    "taken",
    "everything",
    "format",
    "yolo",
    "v8",
    "needs",
    "order",
    "train",
    "object",
    "detector",
    "everything",
    "completed",
    "running",
    "process",
    "running",
    "training",
    "super",
    "straightforward",
    "going",
    "training",
    "process",
    "let",
    "continue",
    "testing",
    "let",
    "see",
    "models",
    "trained",
    "performed",
    "right",
    "let",
    "move",
    "next",
    "step",
    "last",
    "step",
    "process",
    "going",
    "take",
    "model",
    "produced",
    "training",
    "step",
    "going",
    "test",
    "performs",
    "last",
    "step",
    "process",
    "going",
    "complete",
    "training",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "trained",
    "model",
    "go",
    "uh",
    "directory",
    "remember",
    "directory",
    "showed",
    "regarding",
    "directory",
    "information",
    "saved",
    "information",
    "regarding",
    "training",
    "process",
    "saved",
    "obviously",
    "going",
    "show",
    "training",
    "like",
    "shallow",
    "training",
    "like",
    "dummy",
    "training",
    "instead",
    "going",
    "show",
    "results",
    "another",
    "training",
    "preparing",
    "video",
    "conducted",
    "exactly",
    "process",
    "training",
    "process",
    "done",
    "100",
    "epochs",
    "like",
    "deeper",
    "training",
    "right",
    "let",
    "show",
    "files",
    "produced",
    "know",
    "different",
    "tools",
    "order",
    "test",
    "performance",
    "model",
    "trained",
    "basically",
    "confusion",
    "matrix",
    "going",
    "give",
    "lot",
    "information",
    "regarding",
    "different",
    "classes",
    "predicted",
    "different",
    "classes",
    "confused",
    "right",
    "familiar",
    "confusion",
    "matrix",
    "looks",
    "like",
    "look",
    "like",
    "know",
    "read",
    "information",
    "basically",
    "going",
    "give",
    "information",
    "regarding",
    "different",
    "classes",
    "confused",
    "case",
    "one",
    "class",
    "alpaca",
    "see",
    "generates",
    "another",
    "category",
    "like",
    "uh",
    "default",
    "category",
    "background",
    "information",
    "really",
    "say",
    "much",
    "says",
    "classes",
    "confused",
    "given",
    "object",
    "detector",
    "think",
    "valuable",
    "information",
    "metrics",
    "outputs",
    "really",
    "going",
    "mind",
    "confusion",
    "matrix",
    "plots",
    "curves",
    "example",
    "f1",
    "confidence",
    "curve",
    "going",
    "mind",
    "plot",
    "either",
    "remember",
    "starting",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "idea",
    "tutorial",
    "make",
    "like",
    "introductory",
    "training",
    "introductory",
    "process",
    "going",
    "mind",
    "different",
    "uh",
    "plots",
    "involves",
    "lot",
    "knowledge",
    "lot",
    "expertise",
    "extract",
    "information",
    "plots",
    "really",
    "idea",
    "tutorial",
    "let",
    "things",
    "differently",
    "let",
    "focus",
    "plot",
    "also",
    "available",
    "results",
    "saved",
    "directory",
    "see",
    "many",
    "many",
    "many",
    "different",
    "plots",
    "definitely",
    "go",
    "crazy",
    "analyzing",
    "information",
    "one",
    "two",
    "three",
    "four",
    "five",
    "ten",
    "different",
    "plots",
    "could",
    "knock",
    "analyzing",
    "extracting",
    "information",
    "different",
    "plots",
    "idea",
    "make",
    "introductory",
    "video",
    "introductory",
    "tutorial",
    "long",
    "story",
    "short",
    "going",
    "give",
    "one",
    "tip",
    "something",
    "one",
    "thing",
    "focus",
    "plots",
    "going",
    "take",
    "something",
    "video",
    "test",
    "performance",
    "model",
    "trained",
    "using",
    "yolo",
    "v8",
    "train",
    "object",
    "detector",
    "make",
    "sure",
    "loss",
    "going",
    "right",
    "many",
    "plots",
    "related",
    "loss",
    "function",
    "one",
    "one",
    "one",
    "training",
    "set",
    "related",
    "validation",
    "set",
    "make",
    "sure",
    "losses",
    "going",
    "right",
    "like",
    "would",
    "say",
    "simple",
    "way",
    "analyze",
    "functions",
    "analyze",
    "plots",
    "say",
    "powerful",
    "would",
    "appear",
    "make",
    "sure",
    "losses",
    "going",
    "given",
    "loss",
    "function",
    "could",
    "many",
    "different",
    "situations",
    "could",
    "loss",
    "function",
    "going",
    "would",
    "say",
    "good",
    "situation",
    "could",
    "loss",
    "function",
    "started",
    "go",
    "looks",
    "something",
    "like",
    "flat",
    "line",
    "something",
    "looks",
    "like",
    "flat",
    "line",
    "means",
    "training",
    "process",
    "stuck",
    "could",
    "good",
    "thing",
    "maybe",
    "algorithm",
    "machine",
    "learning",
    "model",
    "really",
    "learned",
    "everything",
    "learn",
    "data",
    "maybe",
    "flat",
    "line",
    "really",
    "bad",
    "thing",
    "maybe",
    "know",
    "would",
    "analyze",
    "stuff",
    "look",
    "loss",
    "function",
    "could",
    "also",
    "situation",
    "loss",
    "function",
    "going",
    "right",
    "situation",
    "friend",
    "loss",
    "function",
    "going",
    "huge",
    "problem",
    "something",
    "obviously",
    "right",
    "training",
    "saying",
    "analyzing",
    "loss",
    "function",
    "happens",
    "loss",
    "going",
    "give",
    "lot",
    "information",
    "ideally",
    "go",
    "going",
    "everything",
    "going",
    "well",
    "likely",
    "something",
    "like",
    "flatline",
    "well",
    "could",
    "good",
    "thing",
    "bad",
    "thing",
    "know",
    "could",
    "different",
    "situations",
    "going",
    "done",
    "something",
    "super",
    "super",
    "wrong",
    "know",
    "going",
    "code",
    "know",
    "going",
    "training",
    "process",
    "something",
    "obviously",
    "wrong",
    "right",
    "like",
    "simple",
    "naive",
    "way",
    "analyze",
    "information",
    "trust",
    "going",
    "give",
    "lot",
    "lot",
    "information",
    "know",
    "start",
    "working",
    "testing",
    "performance",
    "model",
    "would",
    "say",
    "looking",
    "plots",
    "analyzing",
    "information",
    "would",
    "say",
    "research",
    "people",
    "research",
    "like",
    "like",
    "freelancer",
    "really",
    "research",
    "going",
    "show",
    "another",
    "way",
    "analyze",
    "performance",
    "model",
    "trained",
    "perspective",
    "makes",
    "sense",
    "analyze",
    "like",
    "involves",
    "see",
    "performs",
    "real",
    "data",
    "right",
    "performs",
    "data",
    "used",
    "order",
    "make",
    "inferences",
    "see",
    "happens",
    "first",
    "step",
    "practical",
    "visual",
    "evaluation",
    "model",
    "model",
    "performs",
    "looking",
    "images",
    "remember",
    "looked",
    "images",
    "one",
    "regarding",
    "labels",
    "validation",
    "set",
    "one",
    "predictions",
    "completely",
    "empty",
    "see",
    "predictions",
    "produced",
    "completely",
    "empty",
    "detecting",
    "position",
    "alpacas",
    "super",
    "super",
    "accurately",
    "mistakes",
    "actually",
    "example",
    "detecting",
    "person",
    "alpaca",
    "detecting",
    "also",
    "person",
    "alpaca",
    "missdetections",
    "example",
    "alpaca",
    "detected",
    "missdetections",
    "see",
    "results",
    "pretty",
    "much",
    "okay",
    "right",
    "everything",
    "looks",
    "pretty",
    "much",
    "okay",
    "go",
    "detecting",
    "pretty",
    "much",
    "everything",
    "missdetection",
    "error",
    "detecting",
    "alpaca",
    "actually",
    "nothing",
    "things",
    "perfect",
    "everything",
    "seems",
    "pretty",
    "much",
    "okay",
    "first",
    "way",
    "going",
    "analyze",
    "performance",
    "model",
    "lot",
    "like",
    "visual",
    "way",
    "see",
    "performs",
    "looking",
    "plots",
    "looking",
    "metrics",
    "right",
    "looking",
    "real",
    "examples",
    "see",
    "model",
    "performs",
    "real",
    "data",
    "maybe",
    "biased",
    "analyze",
    "things",
    "like",
    "freelancer",
    "way",
    "usually",
    "works",
    "freelancer",
    "building",
    "model",
    "deliver",
    "project",
    "client",
    "tell",
    "client",
    "oh",
    "yeah",
    "model",
    "perfect",
    "take",
    "look",
    "plots",
    "take",
    "look",
    "metrics",
    "everything",
    "amazing",
    "client",
    "tests",
    "model",
    "work",
    "client",
    "care",
    "pretty",
    "plots",
    "right",
    "really",
    "mind",
    "lot",
    "plots",
    "maybe",
    "biased",
    "freelancer",
    "freelancing",
    "works",
    "prefer",
    "like",
    "visual",
    "evaluation",
    "first",
    "step",
    "notice",
    "already",
    "better",
    "performance",
    "okay",
    "performance",
    "data",
    "currently",
    "looking",
    "right",
    "remember",
    "validation",
    "data",
    "pretty",
    "much",
    "data",
    "use",
    "training",
    "really",
    "say",
    "much",
    "going",
    "show",
    "performs",
    "data",
    "algorithm",
    "never",
    "seen",
    "completely",
    "absolutely",
    "unseen",
    "data",
    "good",
    "practice",
    "want",
    "test",
    "performance",
    "model",
    "prepared",
    "videos",
    "let",
    "show",
    "videos",
    "basically",
    "remember",
    "completely",
    "unseen",
    "data",
    "first",
    "video",
    "see",
    "alpaca",
    "alpaca",
    "walking",
    "around",
    "alpaca",
    "stuff",
    "alpaca",
    "everyday",
    "life",
    "alpaca",
    "right",
    "walking",
    "around",
    "one",
    "place",
    "uh",
    "nothing",
    "alpaca",
    "stuff",
    "lot",
    "one",
    "videos",
    "prepared",
    "another",
    "video",
    "also",
    "alpaca",
    "alpaca",
    "related",
    "stuff",
    "um",
    "another",
    "video",
    "going",
    "see",
    "remember",
    "completely",
    "unseen",
    "data",
    "also",
    "another",
    "video",
    "going",
    "show",
    "model",
    "performs",
    "three",
    "videos",
    "made",
    "script",
    "python",
    "loads",
    "videos",
    "calls",
    "predict",
    "method",
    "yolo",
    "v8",
    "loading",
    "model",
    "trained",
    "applying",
    "predictions",
    "model",
    "seeing",
    "performs",
    "videos",
    "first",
    "video",
    "showed",
    "detections",
    "getting",
    "see",
    "getting",
    "absolutely",
    "perfect",
    "detection",
    "remember",
    "completely",
    "unseen",
    "data",
    "getting",
    "going",
    "say",
    "100",
    "perfect",
    "detection",
    "would",
    "say",
    "pretty",
    "good",
    "say",
    "pretty",
    "pretty",
    "good",
    "order",
    "start",
    "working",
    "training",
    "process",
    "uh",
    "yeah",
    "would",
    "say",
    "pretty",
    "good",
    "one",
    "examples",
    "let",
    "show",
    "another",
    "example",
    "one",
    "video",
    "showed",
    "see",
    "also",
    "detecting",
    "exactly",
    "position",
    "alpaca",
    "cases",
    "text",
    "going",
    "outside",
    "frame",
    "really",
    "space",
    "everything",
    "seems",
    "okay",
    "video",
    "taking",
    "exactly",
    "position",
    "uh",
    "alpaca",
    "bonding",
    "box",
    "cases",
    "really",
    "fit",
    "alpaca",
    "face",
    "yeah",
    "everything",
    "seems",
    "working",
    "fine",
    "video",
    "showed",
    "see",
    "case",
    "detection",
    "little",
    "broken",
    "many",
    "missdetections",
    "everything",
    "much",
    "better",
    "yeah",
    "case",
    "working",
    "better",
    "working",
    "well",
    "would",
    "say",
    "three",
    "examples",
    "one",
    "one",
    "performing",
    "better",
    "one",
    "really",
    "like",
    "performed",
    "case",
    "alpaca",
    "like",
    "starting",
    "alpaca",
    "journey",
    "like",
    "good",
    "detection",
    "stable",
    "detection",
    "like",
    "breaks",
    "little",
    "nevertheless",
    "would",
    "say",
    "okay",
    "also",
    "detecting",
    "alpaca",
    "uh",
    "say",
    "working",
    "pretty",
    "much",
    "okay",
    "pretty",
    "much",
    "going",
    "testing",
    "phase",
    "remember",
    "want",
    "test",
    "performance",
    "model",
    "trained",
    "using",
    "yellow",
    "v8",
    "lot",
    "information",
    "directory",
    "created",
    "yolo",
    "model",
    "end",
    "training",
    "process",
    "files",
    "lot",
    "information",
    "knock",
    "go",
    "crazy",
    "analyzing",
    "different",
    "plots",
    "keep",
    "simple",
    "take",
    "look",
    "happened",
    "training",
    "loss",
    "validation",
    "loss",
    "loss",
    "functions",
    "make",
    "sure",
    "going",
    "least",
    "thing",
    "need",
    "make",
    "sure",
    "see",
    "performs",
    "images",
    "videos",
    "take",
    "look",
    "performs",
    "unseen",
    "data",
    "make",
    "decisions",
    "maybe",
    "use",
    "model",
    "decide",
    "train",
    "case",
    "analyze",
    "information",
    "see",
    "loss",
    "functions",
    "going",
    "going",
    "notice",
    "lot",
    "space",
    "improve",
    "training",
    "improve",
    "performance",
    "reached",
    "moment",
    "everything",
    "appears",
    "stuck",
    "right",
    "like",
    "flat",
    "line",
    "far",
    "away",
    "something",
    "would",
    "would",
    "new",
    "deeper",
    "training",
    "continue",
    "learning",
    "process",
    "also",
    "w",
    "change",
    "validation",
    "data",
    "something",
    "completely",
    "different",
    "training",
    "data",
    "even",
    "information",
    "pretty",
    "much",
    "would",
    "order",
    "iterate",
    "order",
    "make",
    "better",
    "model",
    "powerful",
    "model",
    "hey",
    "name",
    "felipe",
    "welcome",
    "channel",
    "video",
    "going",
    "show",
    "make",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "custom",
    "data",
    "going",
    "show",
    "every",
    "single",
    "step",
    "process",
    "organize",
    "data",
    "complies",
    "yolo",
    "v8",
    "training",
    "local",
    "computer",
    "also",
    "google",
    "colab",
    "validate",
    "performance",
    "model",
    "trained",
    "finally",
    "take",
    "image",
    "classifier",
    "order",
    "make",
    "new",
    "predictions",
    "going",
    "show",
    "entire",
    "process",
    "going",
    "amazing",
    "tutorial",
    "let",
    "get",
    "started",
    "today",
    "tutorial",
    "going",
    "show",
    "train",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "custom",
    "data",
    "set",
    "let",
    "get",
    "started",
    "first",
    "thing",
    "going",
    "show",
    "data",
    "going",
    "use",
    "tutorial",
    "weather",
    "related",
    "dataset",
    "let",
    "show",
    "different",
    "categories",
    "let",
    "show",
    "different",
    "images",
    "look",
    "like",
    "four",
    "different",
    "categories",
    "cloudy",
    "rain",
    "shine",
    "sunrise",
    "let",
    "show",
    "one",
    "categories",
    "example",
    "cloudy",
    "category",
    "images",
    "look",
    "like",
    "see",
    "one",
    "images",
    "sky",
    "completely",
    "cloudy",
    "right",
    "many",
    "different",
    "clouds",
    "one",
    "images",
    "sunrise",
    "category",
    "basically",
    "many",
    "different",
    "pictures",
    "sunrises",
    "category",
    "look",
    "like",
    "shine",
    "category",
    "sky",
    "completely",
    "completely",
    "clear",
    "super",
    "super",
    "bright",
    "sun",
    "right",
    "sun",
    "one",
    "images",
    "super",
    "super",
    "bright",
    "rainy",
    "category",
    "see",
    "many",
    "different",
    "pictures",
    "super",
    "rainy",
    "days",
    "basically",
    "dara",
    "set",
    "going",
    "use",
    "tutorial",
    "obviously",
    "apply",
    "absolutely",
    "everything",
    "going",
    "show",
    "today",
    "absolutely",
    "type",
    "data",
    "set",
    "going",
    "able",
    "build",
    "type",
    "image",
    "classifier",
    "everything",
    "going",
    "say",
    "tutorial",
    "let",
    "show",
    "structure",
    "need",
    "data",
    "going",
    "train",
    "image",
    "specifier",
    "going",
    "use",
    "yolo",
    "v8",
    "yes",
    "data",
    "super",
    "super",
    "important",
    "also",
    "need",
    "structure",
    "give",
    "like",
    "format",
    "data",
    "complies",
    "way",
    "yolo",
    "v8",
    "expects",
    "data",
    "right",
    "yolo",
    "v8",
    "requires",
    "data",
    "given",
    "format",
    "given",
    "structure",
    "going",
    "show",
    "exactly",
    "structure",
    "file",
    "system",
    "everything",
    "looks",
    "way",
    "shloud",
    "train",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "show",
    "directory",
    "called",
    "weather",
    "data",
    "set",
    "going",
    "root",
    "directory",
    "call",
    "directory",
    "whatever",
    "want",
    "need",
    "directory",
    "going",
    "root",
    "directory",
    "inside",
    "directory",
    "see",
    "two",
    "different",
    "folders",
    "one",
    "called",
    "train",
    "one",
    "called",
    "val",
    "exactly",
    "going",
    "training",
    "dataset",
    "validation",
    "dataset",
    "right",
    "important",
    "name",
    "directories",
    "exactly",
    "like",
    "one",
    "called",
    "train",
    "one",
    "val",
    "show",
    "within",
    "train",
    "directory",
    "going",
    "four",
    "directories",
    "containing",
    "different",
    "images",
    "categories",
    "basically",
    "need",
    "many",
    "directories",
    "categories",
    "want",
    "classify",
    "model",
    "case",
    "want",
    "classify",
    "image",
    "four",
    "different",
    "categories",
    "four",
    "different",
    "directories",
    "one",
    "directories",
    "named",
    "category",
    "want",
    "classify",
    "images",
    "right",
    "one",
    "called",
    "cloudy",
    "ther",
    "one",
    "called",
    "rain",
    "shine",
    "sunrise",
    "categories",
    "want",
    "classify",
    "images",
    "within",
    "directories",
    "folders",
    "data",
    "within",
    "cloudy",
    "data",
    "related",
    "cloudy",
    "category",
    "right",
    "happens",
    "rain",
    "shine",
    "sunrise",
    "category",
    "basically",
    "structure",
    "need",
    "data",
    "structure",
    "need",
    "file",
    "system",
    "order",
    "comply",
    "yolo",
    "v8",
    "expecting",
    "data",
    "go",
    "val",
    "folder",
    "see",
    "exactly",
    "structure",
    "four",
    "different",
    "directories",
    "named",
    "categories",
    "want",
    "classify",
    "images",
    "open",
    "directory",
    "exactly",
    "see",
    "different",
    "images",
    "specific",
    "category",
    "important",
    "everything",
    "going",
    "super",
    "super",
    "straightforward",
    "created",
    "structure",
    "file",
    "system",
    "data",
    "exactly",
    "structure",
    "show",
    "going",
    "super",
    "simple",
    "train",
    "image",
    "classifier",
    "yolov8",
    "important",
    "going",
    "show",
    "three",
    "different",
    "ways",
    "train",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "let",
    "start",
    "first",
    "way",
    "using",
    "python",
    "script",
    "going",
    "make",
    "simple",
    "script",
    "python",
    "order",
    "train",
    "model",
    "let",
    "show",
    "let",
    "go",
    "pycharm",
    "pycharm",
    "project",
    "created",
    "todays",
    "tutorial",
    "first",
    "thing",
    "want",
    "work",
    "yolo",
    "v8",
    "install",
    "couple",
    "dependencies",
    "couple",
    "python",
    "packages",
    "two",
    "packages",
    "going",
    "use",
    "tutorial",
    "one",
    "ultralytics",
    "one",
    "numpy",
    "ultralytics",
    "super",
    "important",
    "exactly",
    "library",
    "need",
    "order",
    "import",
    "yolo",
    "order",
    "train",
    "model",
    "using",
    "yolo",
    "v8",
    "definitely",
    "need",
    "two",
    "packages",
    "order",
    "install",
    "packages",
    "going",
    "going",
    "show",
    "way",
    "install",
    "packages",
    "going",
    "work",
    "whatever",
    "os",
    "right",
    "linux",
    "user",
    "windows",
    "user",
    "use",
    "mac",
    "matter",
    "going",
    "work",
    "anyway",
    "need",
    "go",
    "file",
    "settings",
    "select",
    "python",
    "interpreter",
    "right",
    "python",
    "interpreter",
    "going",
    "use",
    "see",
    "using",
    "python",
    "need",
    "click",
    "plus",
    "going",
    "find",
    "going",
    "search",
    "packages",
    "want",
    "install",
    "case",
    "going",
    "search",
    "ultralytics",
    "version",
    "going",
    "use",
    "let",
    "copy",
    "version",
    "first",
    "one",
    "going",
    "file",
    "setting",
    "ultralytics",
    "version",
    "one",
    "okay",
    "click",
    "install",
    "package",
    "case",
    "already",
    "installed",
    "dependency",
    "nothing",
    "going",
    "happen",
    "computer",
    "please",
    "remember",
    "computer",
    "otherwise",
    "able",
    "use",
    "going",
    "able",
    "anything",
    "going",
    "today",
    "let",
    "see",
    "numpy",
    "exactly",
    "version",
    "going",
    "use",
    "going",
    "use",
    "file",
    "settings",
    "plus",
    "numpy",
    "everything",
    "okay",
    "install",
    "package",
    "like",
    "uh",
    "everything",
    "okay",
    "numpy",
    "installed",
    "successfully",
    "ready",
    "continue",
    "installed",
    "two",
    "dependencies",
    "two",
    "packages",
    "ready",
    "continue",
    "ready",
    "install",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "let",
    "go",
    "main",
    "file",
    "going",
    "use",
    "order",
    "code",
    "everything",
    "need",
    "order",
    "train",
    "classifier",
    "let",
    "show",
    "exactly",
    "code",
    "need",
    "type",
    "order",
    "training",
    "going",
    "github",
    "repository",
    "yolo",
    "v8",
    "going",
    "select",
    "classification",
    "section",
    "right",
    "going",
    "classification",
    "going",
    "click",
    "classification",
    "docs",
    "going",
    "open",
    "new",
    "file",
    "new",
    "url",
    "new",
    "website",
    "new",
    "page",
    "exactly",
    "information",
    "need",
    "order",
    "train",
    "image",
    "classifier",
    "going",
    "scroll",
    "going",
    "train",
    "section",
    "going",
    "going",
    "copy",
    "paste",
    "line",
    "one",
    "middle",
    "one",
    "says",
    "load",
    "model",
    "recommended",
    "training",
    "going",
    "copy",
    "going",
    "back",
    "pycharm",
    "going",
    "paste",
    "obviously",
    "need",
    "import",
    "yolo",
    "otherwise",
    "going",
    "work",
    "going",
    "say",
    "ultralytics",
    "import",
    "yolo",
    "pretty",
    "much",
    "see",
    "creating",
    "model",
    "creating",
    "object",
    "going",
    "use",
    "model",
    "going",
    "copy",
    "paste",
    "last",
    "line",
    "going",
    "paste",
    "going",
    "make",
    "edits",
    "going",
    "leave",
    "value",
    "going",
    "leave",
    "image",
    "size",
    "64",
    "number",
    "epochs",
    "going",
    "set",
    "1",
    "right",
    "first",
    "thing",
    "going",
    "going",
    "dummy",
    "training",
    "order",
    "make",
    "sure",
    "everything",
    "works",
    "expected",
    "order",
    "make",
    "sure",
    "everything",
    "works",
    "properly",
    "completely",
    "100",
    "sure",
    "everything",
    "okay",
    "going",
    "move",
    "forward",
    "deeper",
    "training",
    "real",
    "training",
    "right",
    "let",
    "training",
    "one",
    "epoch",
    "let",
    "see",
    "goes",
    "data",
    "going",
    "specify",
    "absolute",
    "part",
    "data",
    "going",
    "train",
    "model",
    "right",
    "case",
    "going",
    "weather",
    "dataset",
    "going",
    "copy",
    "paste",
    "absolute",
    "path",
    "data",
    "set",
    "going",
    "copy",
    "path",
    "going",
    "paste",
    "right",
    "data",
    "going",
    "use",
    "remember",
    "need",
    "specify",
    "absolute",
    "path",
    "root",
    "directory",
    "data",
    "remember",
    "need",
    "structure",
    "data",
    "exact",
    "format",
    "already",
    "mentioned",
    "right",
    "otherwise",
    "going",
    "work",
    "everything",
    "need",
    "order",
    "train",
    "image",
    "classifier",
    "thing",
    "going",
    "press",
    "play",
    "going",
    "run",
    "script",
    "let",
    "see",
    "happens",
    "remember",
    "running",
    "training",
    "process",
    "one",
    "epoch",
    "need",
    "make",
    "sure",
    "everything",
    "works",
    "properly",
    "everything",
    "working",
    "properly",
    "going",
    "edit",
    "value",
    "going",
    "make",
    "training",
    "epochs",
    "see",
    "everything",
    "seems",
    "working",
    "properly",
    "everything",
    "seems",
    "okay",
    "everything",
    "seems",
    "completed",
    "everything",
    "seems",
    "ready",
    "see",
    "results",
    "saved",
    "let",
    "show",
    "exactly",
    "directory",
    "location",
    "file",
    "system",
    "go",
    "project",
    "pycharm",
    "project",
    "created",
    "file",
    "system",
    "exactly",
    "project",
    "created",
    "file",
    "currently",
    "working",
    "file",
    "data",
    "located",
    "runs",
    "directory",
    "runs",
    "folder",
    "located",
    "created",
    "see",
    "within",
    "runs",
    "another",
    "directory",
    "called",
    "classify",
    "many",
    "many",
    "many",
    "folders",
    "one",
    "training",
    "processes",
    "see",
    "case",
    "trained",
    "classifier",
    "many",
    "many",
    "many",
    "different",
    "times",
    "preparing",
    "video",
    "many",
    "directories",
    "exactly",
    "one",
    "created",
    "train12",
    "right",
    "train12",
    "exactly",
    "directory",
    "created",
    "open",
    "directory",
    "see",
    "another",
    "directory",
    "two",
    "files",
    "going",
    "explain",
    "exactly",
    "different",
    "files",
    "different",
    "folders",
    "exactly",
    "information",
    "files",
    "going",
    "later",
    "tutorial",
    "validating",
    "training",
    "process",
    "right",
    "remember",
    "results",
    "saved",
    "saved",
    "within",
    "folder",
    "within",
    "runs",
    "folder",
    "within",
    "classify",
    "new",
    "directory",
    "new",
    "folder",
    "created",
    "training",
    "process",
    "executed",
    "right",
    "something",
    "need",
    "remember",
    "later",
    "tutorial",
    "going",
    "show",
    "exactly",
    "validate",
    "training",
    "using",
    "information",
    "within",
    "directory",
    "let",
    "continue",
    "going",
    "show",
    "different",
    "way",
    "train",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "going",
    "going",
    "show",
    "using",
    "command",
    "line",
    "using",
    "utility",
    "actually",
    "like",
    "straightforward",
    "way",
    "training",
    "let",
    "show",
    "see",
    "three",
    "different",
    "examples",
    "going",
    "select",
    "one",
    "going",
    "copy",
    "paste",
    "instruction",
    "line",
    "going",
    "show",
    "going",
    "paste",
    "see",
    "many",
    "different",
    "parameters",
    "right",
    "first",
    "word",
    "yolo",
    "utility",
    "going",
    "execute",
    "classify",
    "task",
    "going",
    "execute",
    "going",
    "train",
    "image",
    "classifier",
    "going",
    "train",
    "need",
    "another",
    "keyword",
    "train",
    "arguments",
    "data",
    "model",
    "epochs",
    "also",
    "image",
    "size",
    "going",
    "exactly",
    "image",
    "size",
    "going",
    "leave",
    "value",
    "64",
    "going",
    "edit",
    "values",
    "actually",
    "going",
    "number",
    "epochs",
    "also",
    "going",
    "edit",
    "data",
    "number",
    "epochs",
    "let",
    "something",
    "similar",
    "going",
    "one",
    "epoch",
    "make",
    "sure",
    "everything",
    "runs",
    "smoothly",
    "everything",
    "runs",
    "properly",
    "like",
    "serious",
    "training",
    "real",
    "training",
    "epochs",
    "exactly",
    "model",
    "going",
    "use",
    "going",
    "edit",
    "keyword",
    "either",
    "going",
    "edit",
    "argument",
    "going",
    "say",
    "absolute",
    "path",
    "data",
    "going",
    "exactly",
    "something",
    "like",
    "okay",
    "pretty",
    "much",
    "thing",
    "need",
    "going",
    "copy",
    "paste",
    "sentence",
    "going",
    "terminal",
    "going",
    "something",
    "like",
    "right",
    "copying",
    "copy",
    "paste",
    "sentence",
    "see",
    "need",
    "order",
    "train",
    "image",
    "classifiers",
    "using",
    "yolov8",
    "see",
    "model",
    "training",
    "process",
    "started",
    "everything",
    "running",
    "super",
    "super",
    "smoothly",
    "everything",
    "going",
    "super",
    "super",
    "well",
    "right",
    "quick",
    "way",
    "straightforward",
    "way",
    "training",
    "see",
    "training",
    "completed",
    "exactly",
    "results",
    "saved",
    "everything",
    "completed",
    "everything",
    "ready",
    "see",
    "simple",
    "fast",
    "train",
    "image",
    "classifier",
    "running",
    "command",
    "going",
    "show",
    "another",
    "way",
    "training",
    "using",
    "google",
    "colab",
    "going",
    "use",
    "jupiter",
    "notebook",
    "going",
    "use",
    "notebook",
    "google",
    "collab",
    "order",
    "train",
    "model",
    "also",
    "like",
    "good",
    "way",
    "let",
    "show",
    "basically",
    "need",
    "go",
    "google",
    "drive",
    "need",
    "go",
    "google",
    "drive",
    "need",
    "select",
    "new",
    "google",
    "collaboratory",
    "going",
    "open",
    "new",
    "notebook",
    "going",
    "open",
    "new",
    "notebook",
    "google",
    "colab",
    "exactly",
    "need",
    "order",
    "use",
    "notebook",
    "train",
    "yolo",
    "v8",
    "going",
    "show",
    "notebook",
    "already",
    "created",
    "order",
    "train",
    "model",
    "one",
    "called",
    "obviusly",
    "going",
    "give",
    "exactly",
    "notebook",
    "github",
    "repository",
    "today",
    "video",
    "today",
    "tutorial",
    "use",
    "notebook",
    "want",
    "going",
    "show",
    "different",
    "cells",
    "everything",
    "already",
    "writen",
    "notebook",
    "understand",
    "exactly",
    "use",
    "works",
    "exactly",
    "step",
    "let",
    "start",
    "first",
    "step",
    "another",
    "thing",
    "need",
    "want",
    "train",
    "image",
    "classifier",
    "upload",
    "data",
    "images",
    "categories",
    "google",
    "drive",
    "obviously",
    "example",
    "case",
    "weather",
    "data",
    "set",
    "see",
    "directory",
    "exactly",
    "directory",
    "weather",
    "data",
    "set",
    "within",
    "weather",
    "data",
    "set",
    "two",
    "directories",
    "train",
    "val",
    "open",
    "directory",
    "see",
    "also",
    "traiin",
    "val",
    "exactly",
    "exactly",
    "data",
    "local",
    "computer",
    "something",
    "important",
    "remember",
    "need",
    "data",
    "google",
    "drive",
    "order",
    "train",
    "model",
    "using",
    "google",
    "collab",
    "important",
    "step",
    "please",
    "remember",
    "upload",
    "data",
    "google",
    "drive",
    "data",
    "google",
    "drive",
    "need",
    "able",
    "access",
    "data",
    "google",
    "collab",
    "order",
    "need",
    "execute",
    "cell",
    "click",
    "enter",
    "see",
    "going",
    "asked",
    "want",
    "connect",
    "google",
    "collab",
    "google",
    "drive",
    "thing",
    "need",
    "say",
    "accept",
    "see",
    "requesting",
    "permission",
    "say",
    "connect",
    "google",
    "drive",
    "select",
    "account",
    "basically",
    "scroll",
    "bottom",
    "page",
    "click",
    "allow",
    "going",
    "allow",
    "google",
    "collab",
    "access",
    "data",
    "google",
    "drive",
    "important",
    "step",
    "something",
    "important",
    "need",
    "able",
    "access",
    "data",
    "need",
    "know",
    "data",
    "located",
    "google",
    "drive",
    "right",
    "need",
    "know",
    "exactly",
    "path",
    "location",
    "data",
    "google",
    "drive",
    "case",
    "let",
    "show",
    "google",
    "drive",
    "see",
    "data",
    "located",
    "directory",
    "root",
    "directory",
    "drive",
    "another",
    "directory",
    "called",
    "computer",
    "vision",
    "engineer",
    "another",
    "directory",
    "image",
    "classification",
    "yolo",
    "v8",
    "data",
    "weather",
    "data",
    "set",
    "located",
    "case",
    "going",
    "different",
    "obviously",
    "depends",
    "exactly",
    "uploaded",
    "data",
    "something",
    "may",
    "want",
    "click",
    "ls",
    "say",
    "something",
    "like",
    "ls",
    "say",
    "something",
    "like",
    "content",
    "gdrive",
    "drive",
    "right",
    "execute",
    "command",
    "execute",
    "command",
    "going",
    "see",
    "long",
    "list",
    "files",
    "basically",
    "files",
    "root",
    "directory",
    "google",
    "drive",
    "example",
    "directory",
    "called",
    "computer",
    "video",
    "engineer",
    "ls",
    "going",
    "see",
    "different",
    "directories",
    "say",
    "something",
    "like",
    "image",
    "classification",
    "yolo",
    "v8",
    "data",
    "exactly",
    "notebook",
    "say",
    "data",
    "exactly",
    "weather",
    "data",
    "set",
    "located",
    "right",
    "something",
    "like",
    "definitely",
    "need",
    "know",
    "path",
    "data",
    "google",
    "collab",
    "right",
    "definitely",
    "need",
    "order",
    "continue",
    "next",
    "step",
    "important",
    "set",
    "data",
    "properly",
    "data",
    "location",
    "set",
    "properly",
    "yolo",
    "v8",
    "able",
    "train",
    "model",
    "important",
    "case",
    "exactly",
    "data",
    "weather",
    "data",
    "set",
    "located",
    "right",
    "path",
    "weather",
    "dataset",
    "cell",
    "going",
    "execute",
    "value",
    "going",
    "save",
    "value",
    "data",
    "dir",
    "going",
    "continue",
    "need",
    "pip",
    "install",
    "ultralytics",
    "library",
    "need",
    "order",
    "train",
    "model",
    "order",
    "use",
    "yolo",
    "v8",
    "thing",
    "need",
    "execute",
    "cell",
    "everything",
    "run",
    "super",
    "smoothly",
    "see",
    "already",
    "completed",
    "process",
    "going",
    "continue",
    "thing",
    "need",
    "execute",
    "cell",
    "see",
    "code",
    "cell",
    "similar",
    "code",
    "right",
    "basically",
    "running",
    "python",
    "script",
    "google",
    "collab",
    "see",
    "importing",
    "os",
    "also",
    "importing",
    "yolo",
    "library",
    "importing",
    "ultralytics",
    "importing",
    "yolo",
    "exactly",
    "using",
    "data",
    "directory",
    "data",
    "dir",
    "variable",
    "defined",
    "right",
    "important",
    "set",
    "variable",
    "properly",
    "thing",
    "going",
    "going",
    "exactly",
    "going",
    "training",
    "one",
    "epoch",
    "make",
    "sure",
    "everything",
    "okay",
    "going",
    "press",
    "enter",
    "order",
    "training",
    "first",
    "time",
    "execute",
    "training",
    "may",
    "take",
    "little",
    "longer",
    "downloading",
    "weights",
    "downloading",
    "models",
    "everything",
    "uh",
    "everything",
    "much",
    "much",
    "quicker",
    "okay",
    "see",
    "training",
    "process",
    "progress",
    "everything",
    "going",
    "super",
    "super",
    "well",
    "thing",
    "need",
    "edit",
    "number",
    "epochs",
    "like",
    "deeper",
    "training",
    "say",
    "everything",
    "working",
    "super",
    "super",
    "properly",
    "let",
    "move",
    "cells",
    "show",
    "exactly",
    "need",
    "everything",
    "completed",
    "everything",
    "completed",
    "thing",
    "need",
    "run",
    "cell",
    "copying",
    "going",
    "copy",
    "results",
    "saved",
    "directory",
    "going",
    "copy",
    "everything",
    "google",
    "drive",
    "right",
    "remember",
    "working",
    "google",
    "colab",
    "working",
    "environment",
    "google",
    "collab",
    "environment",
    "something",
    "like",
    "going",
    "super",
    "super",
    "hard",
    "get",
    "data",
    "trained",
    "right",
    "get",
    "results",
    "get",
    "model",
    "weights",
    "going",
    "super",
    "super",
    "hard",
    "everything",
    "located",
    "google",
    "collab",
    "environment",
    "long",
    "story",
    "short",
    "going",
    "much",
    "much",
    "simpler",
    "much",
    "much",
    "better",
    "something",
    "like",
    "copy",
    "everything",
    "results",
    "saved",
    "directory",
    "google",
    "drive",
    "going",
    "much",
    "much",
    "better",
    "going",
    "much",
    "easier",
    "download",
    "weights",
    "download",
    "results",
    "going",
    "wait",
    "couple",
    "minutes",
    "everything",
    "completed",
    "show",
    "copy",
    "results",
    "google",
    "drive",
    "okay",
    "training",
    "process",
    "completed",
    "see",
    "results",
    "saved",
    "runs",
    "classify",
    "train",
    "similar",
    "output",
    "one",
    "noticed",
    "training",
    "local",
    "environment",
    "thing",
    "need",
    "copy",
    "everything",
    "google",
    "drive",
    "everything",
    "much",
    "much",
    "simpler",
    "want",
    "download",
    "results",
    "whatever",
    "want",
    "thing",
    "going",
    "run",
    "cell",
    "everything",
    "copied",
    "directory",
    "directory",
    "data",
    "google",
    "collab",
    "right",
    "see",
    "everything",
    "copied",
    "already",
    "directory",
    "copied",
    "time",
    "current",
    "time",
    "result",
    "cell",
    "executed",
    "go",
    "runs",
    "classify",
    "train",
    "see",
    "results",
    "generated",
    "csv",
    "file",
    "containing",
    "many",
    "different",
    "results",
    "going",
    "show",
    "minutes",
    "weights",
    "want",
    "get",
    "data",
    "want",
    "analyze",
    "data",
    "thing",
    "need",
    "select",
    "runs",
    "need",
    "click",
    "download",
    "going",
    "download",
    "directory",
    "local",
    "drive",
    "right",
    "see",
    "everything",
    "zipping",
    "everything",
    "zipped",
    "directory",
    "downloaded",
    "local",
    "computer",
    "see",
    "directory",
    "downloaded",
    "everything",
    "working",
    "fine",
    "pretty",
    "much",
    "order",
    "show",
    "three",
    "different",
    "ways",
    "train",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "let",
    "deeper",
    "training",
    "right",
    "going",
    "take",
    "script",
    "going",
    "edit",
    "number",
    "epochs",
    "training",
    "something",
    "like",
    "20",
    "epochs",
    "already",
    "tests",
    "20",
    "epochs",
    "enough",
    "dataset",
    "data",
    "set",
    "using",
    "tutorial",
    "20",
    "fine",
    "thing",
    "need",
    "click",
    "run",
    "going",
    "run",
    "script",
    "everything",
    "exactly",
    "everything",
    "exactly",
    "right",
    "need",
    "wait",
    "process",
    "completely",
    "need",
    "anything",
    "process",
    "executed",
    "20",
    "epochs",
    "thing",
    "going",
    "wait",
    "process",
    "completed",
    "everything",
    "completed",
    "going",
    "validate",
    "training",
    "process",
    "going",
    "show",
    "analyze",
    "process",
    "done",
    "successfully",
    "successfully",
    "trained",
    "good",
    "image",
    "classifier",
    "going",
    "pause",
    "recording",
    "going",
    "fast",
    "forward",
    "completed",
    "okay",
    "training",
    "process",
    "completed",
    "let",
    "show",
    "results",
    "saved",
    "runs",
    "classify",
    "train14",
    "let",
    "show",
    "directory",
    "folder",
    "local",
    "computer",
    "go",
    "runs",
    "classify",
    "train14",
    "results",
    "saved",
    "everything",
    "going",
    "analyze",
    "going",
    "decide",
    "model",
    "trained",
    "good",
    "model",
    "going",
    "decide",
    "model",
    "use",
    "see",
    "two",
    "files",
    "another",
    "directory",
    "called",
    "weights",
    "let",
    "start",
    "open",
    "file",
    "see",
    "something",
    "like",
    "config",
    "file",
    "exactly",
    "entire",
    "configuration",
    "file",
    "used",
    "order",
    "train",
    "model",
    "important",
    "super",
    "super",
    "comprehensive",
    "list",
    "hyper",
    "parameters",
    "used",
    "order",
    "train",
    "model",
    "example",
    "parameters",
    "specified",
    "image",
    "size",
    "number",
    "epochs",
    "data",
    "location",
    "data",
    "used",
    "see",
    "keyword",
    "data",
    "epochs",
    "image",
    "size",
    "many",
    "many",
    "many",
    "keywords",
    "well",
    "important",
    "absolutely",
    "keywords",
    "used",
    "used",
    "default",
    "values",
    "set",
    "different",
    "keywords",
    "important",
    "case",
    "want",
    "train",
    "new",
    "model",
    "want",
    "make",
    "changes",
    "hyper",
    "parameters",
    "let",
    "show",
    "file",
    "file",
    "would",
    "say",
    "much",
    "important",
    "like",
    "file",
    "containing",
    "information",
    "need",
    "order",
    "decide",
    "good",
    "model",
    "see",
    "many",
    "different",
    "rows",
    "row",
    "one",
    "training",
    "epochs",
    "right",
    "trained",
    "model",
    "20",
    "epochs",
    "see",
    "20",
    "rows",
    "one",
    "epochs",
    "one",
    "rows",
    "different",
    "information",
    "going",
    "focus",
    "three",
    "values",
    "training",
    "lose",
    "accuracy",
    "accuracy",
    "validation",
    "set",
    "also",
    "validation",
    "loss",
    "right",
    "three",
    "keywords",
    "going",
    "focus",
    "tutorial",
    "order",
    "validate",
    "model",
    "going",
    "give",
    "like",
    "quick",
    "tip",
    "like",
    "quick",
    "way",
    "order",
    "analyze",
    "training",
    "process",
    "make",
    "sure",
    "training",
    "loss",
    "validation",
    "loss",
    "going",
    "training",
    "process",
    "also",
    "make",
    "sure",
    "accuracy",
    "goes",
    "know",
    "thinking",
    "hey",
    "simple",
    "way",
    "analyze",
    "process",
    "felpe",
    "yeah",
    "agree",
    "simple",
    "way",
    "time",
    "robust",
    "like",
    "simple",
    "time",
    "powerful",
    "way",
    "decide",
    "good",
    "model",
    "analyze",
    "numbers",
    "think",
    "going",
    "much",
    "much",
    "better",
    "going",
    "much",
    "much",
    "prettier",
    "make",
    "plot",
    "numbers",
    "right",
    "epochs",
    "um",
    "column",
    "coordinate",
    "also",
    "different",
    "values",
    "definitely",
    "plot",
    "values",
    "across",
    "different",
    "epochs",
    "let",
    "show",
    "python",
    "file",
    "created",
    "exactly",
    "python",
    "file",
    "file",
    "called",
    "open",
    "file",
    "see",
    "basically",
    "need",
    "set",
    "path",
    "file",
    "case",
    "going",
    "set",
    "train14",
    "see",
    "like",
    "logic",
    "simple",
    "logic",
    "take",
    "data",
    "file",
    "plots",
    "right",
    "taking",
    "data",
    "plots",
    "file",
    "available",
    "github",
    "repository",
    "project",
    "tutorial",
    "definitely",
    "take",
    "file",
    "use",
    "plot",
    "functions",
    "well",
    "going",
    "press",
    "play",
    "see",
    "wait",
    "seconds",
    "get",
    "two",
    "plots",
    "right",
    "information",
    "csv",
    "file",
    "right",
    "everything",
    "showed",
    "summarized",
    "two",
    "plots",
    "exactly",
    "mean",
    "make",
    "sure",
    "loss",
    "going",
    "loss",
    "training",
    "set",
    "validation",
    "set",
    "training",
    "set",
    "plotting",
    "loss",
    "blue",
    "validation",
    "set",
    "red",
    "see",
    "cases",
    "loss",
    "going",
    "right",
    "exactly",
    "expect",
    "exactly",
    "want",
    "simple",
    "way",
    "analyze",
    "process",
    "trust",
    "also",
    "powerful",
    "way",
    "right",
    "something",
    "healthy",
    "something",
    "looks",
    "like",
    "healthy",
    "plot",
    "validation",
    "accuracy",
    "evolves",
    "training",
    "process",
    "see",
    "evaluation",
    "accuracy",
    "goes",
    "increase",
    "number",
    "epochs",
    "right",
    "see",
    "starting",
    "10th",
    "epoch",
    "everything",
    "starts",
    "like",
    "somehow",
    "iddle",
    "right",
    "really",
    "gaining",
    "lot",
    "accuracy",
    "losing",
    "accuracy",
    "either",
    "right",
    "something",
    "like",
    "plateau",
    "exactly",
    "validation",
    "accuracy",
    "plot",
    "look",
    "like",
    "right",
    "starting",
    "low",
    "value",
    "increasing",
    "accuracy",
    "reach",
    "high",
    "value",
    "accuracy",
    "right",
    "like",
    "healthy",
    "training",
    "process",
    "obviously",
    "could",
    "make",
    "process",
    "even",
    "better",
    "tune",
    "change",
    "parameters",
    "like",
    "customized",
    "training",
    "sure",
    "able",
    "better",
    "model",
    "right",
    "remember",
    "using",
    "default",
    "values",
    "usually",
    "goes",
    "make",
    "like",
    "customized",
    "training",
    "try",
    "different",
    "parameters",
    "able",
    "get",
    "like",
    "better",
    "model",
    "obviously",
    "going",
    "tutorial",
    "wanted",
    "show",
    "like",
    "train",
    "image",
    "classifier",
    "remember",
    "could",
    "even",
    "better",
    "make",
    "like",
    "custom",
    "model",
    "pretty",
    "much",
    "analyzing",
    "plots",
    "validation",
    "accuracy",
    "loss",
    "function",
    "order",
    "validate",
    "training",
    "like",
    "directory",
    "weights",
    "directory",
    "see",
    "directory",
    "called",
    "weights",
    "exactly",
    "models",
    "saved",
    "important",
    "trained",
    "model",
    "obviously",
    "want",
    "model",
    "order",
    "use",
    "images",
    "data",
    "exactly",
    "going",
    "find",
    "model",
    "see",
    "two",
    "different",
    "files",
    "one",
    "called",
    "another",
    "one",
    "called",
    "let",
    "explain",
    "exactly",
    "two",
    "files",
    "exactly",
    "mean",
    "remember",
    "training",
    "process",
    "works",
    "right",
    "remember",
    "model",
    "deep",
    "learning",
    "model",
    "comprised",
    "many",
    "many",
    "many",
    "different",
    "weights",
    "way",
    "goes",
    "end",
    "every",
    "epoch",
    "right",
    "end",
    "first",
    "epoch",
    "second",
    "epoch",
    "third",
    "epoch",
    "updating",
    "weights",
    "model",
    "updating",
    "weights",
    "architecture",
    "deep",
    "learning",
    "model",
    "way",
    "works",
    "end",
    "every",
    "epoch",
    "model",
    "available",
    "model",
    "trained",
    "far",
    "process",
    "followed",
    "far",
    "means",
    "taking",
    "model",
    "result",
    "last",
    "epoch",
    "training",
    "process",
    "right",
    "remember",
    "end",
    "absolutely",
    "every",
    "single",
    "epoch",
    "model",
    "available",
    "definitely",
    "use",
    "want",
    "order",
    "produce",
    "inferences",
    "means",
    "taking",
    "last",
    "model",
    "model",
    "produced",
    "end",
    "training",
    "process",
    "end",
    "last",
    "epoch",
    "training",
    "process",
    "end",
    "20th",
    "epoch",
    "training",
    "process",
    "producing",
    "model",
    "may",
    "wonder",
    "hey",
    "felipe",
    "yeah",
    "great",
    "end",
    "training",
    "process",
    "accuracy",
    "something",
    "like",
    "93",
    "right",
    "93",
    "good",
    "accuracy",
    "take",
    "accuracy",
    "take",
    "model",
    "end",
    "16th",
    "epoch",
    "example",
    "accuracy",
    "higher",
    "maybe",
    "makes",
    "sense",
    "take",
    "model",
    "instead",
    "right",
    "even",
    "better",
    "accuracy",
    "even",
    "higher",
    "accuracy",
    "ask",
    "something",
    "like",
    "would",
    "say",
    "yeah",
    "perfectly",
    "right",
    "super",
    "super",
    "right",
    "valid",
    "argument",
    "exactly",
    "model",
    "right",
    "saving",
    "weights",
    "best",
    "model",
    "entire",
    "training",
    "process",
    "look",
    "data",
    "best",
    "model",
    "training",
    "process",
    "one",
    "mistaken",
    "right",
    "model",
    "produced",
    "end",
    "16th",
    "epoch",
    "accuracy",
    "validation",
    "accuracy",
    "definitely",
    "higher",
    "accuracy",
    "got",
    "end",
    "training",
    "process",
    "take",
    "best",
    "model",
    "produced",
    "entire",
    "process",
    "entire",
    "training",
    "process",
    "definitely",
    "need",
    "take",
    "model",
    "exactly",
    "represents",
    "best",
    "training",
    "best",
    "model",
    "trained",
    "training",
    "process",
    "ask",
    "usually",
    "take",
    "model",
    "produced",
    "end",
    "training",
    "process",
    "right",
    "usually",
    "take",
    "last",
    "pt",
    "file",
    "consider",
    "model",
    "produced",
    "end",
    "training",
    "process",
    "model",
    "summarizing",
    "much",
    "information",
    "right",
    "considering",
    "much",
    "data",
    "considering",
    "much",
    "everything",
    "training",
    "process",
    "many",
    "things",
    "going",
    "many",
    "many",
    "things",
    "going",
    "remember",
    "lot",
    "randomness",
    "training",
    "process",
    "personally",
    "consider",
    "take",
    "model",
    "trained",
    "end",
    "process",
    "much",
    "better",
    "option",
    "choose",
    "another",
    "one",
    "choose",
    "like",
    "best",
    "model",
    "model",
    "got",
    "highest",
    "accuracy",
    "last",
    "model",
    "usually",
    "usually",
    "take",
    "last",
    "model",
    "produced",
    "end",
    "training",
    "process",
    "want",
    "take",
    "best",
    "model",
    "want",
    "take",
    "also",
    "makes",
    "sense",
    "taking",
    "model",
    "produced",
    "highest",
    "accuracy",
    "right",
    "either",
    "one",
    "think",
    "good",
    "option",
    "two",
    "files",
    "use",
    "one",
    "use",
    "one",
    "would",
    "say",
    "making",
    "like",
    "like",
    "best",
    "decision",
    "mode",
    "use",
    "depends",
    "many",
    "different",
    "variables",
    "depends",
    "many",
    "different",
    "things",
    "depends",
    "data",
    "depends",
    "problem",
    "depends",
    "use",
    "case",
    "depends",
    "training",
    "process",
    "depends",
    "many",
    "many",
    "different",
    "things",
    "best",
    "option",
    "right",
    "remember",
    "two",
    "models",
    "specific",
    "project",
    "preferences",
    "model",
    "want",
    "use",
    "right",
    "best",
    "model",
    "produced",
    "entire",
    "training",
    "process",
    "want",
    "use",
    "last",
    "model",
    "model",
    "produced",
    "end",
    "training",
    "process",
    "let",
    "go",
    "back",
    "pycharm",
    "time",
    "make",
    "inferences",
    "time",
    "predict",
    "new",
    "samples",
    "right",
    "going",
    "input",
    "image",
    "going",
    "use",
    "image",
    "classifier",
    "order",
    "predict",
    "category",
    "image",
    "belongs",
    "let",
    "show",
    "going",
    "import",
    "ultralytics",
    "import",
    "yolo",
    "let",
    "go",
    "back",
    "page",
    "going",
    "move",
    "predict",
    "section",
    "thing",
    "going",
    "copy",
    "sentence",
    "going",
    "paste",
    "going",
    "specify",
    "path",
    "absolute",
    "path",
    "model",
    "trained",
    "right",
    "really",
    "need",
    "make",
    "like",
    "absolute",
    "path",
    "use",
    "relative",
    "path",
    "going",
    "something",
    "like",
    "right",
    "sorry",
    "something",
    "like",
    "path",
    "model",
    "trained",
    "right",
    "last",
    "model",
    "produce",
    "end",
    "training",
    "process",
    "model",
    "going",
    "use",
    "order",
    "show",
    "works",
    "let",
    "copy",
    "additional",
    "sentence",
    "results",
    "model",
    "model",
    "path",
    "image",
    "path",
    "right",
    "see",
    "use",
    "image",
    "local",
    "computer",
    "file",
    "system",
    "also",
    "use",
    "something",
    "like",
    "url",
    "example",
    "case",
    "example",
    "yolo",
    "v8",
    "website",
    "see",
    "example",
    "using",
    "url",
    "also",
    "going",
    "work",
    "case",
    "going",
    "use",
    "image",
    "local",
    "computer",
    "going",
    "use",
    "one",
    "images",
    "used",
    "training",
    "want",
    "show",
    "works",
    "obviously",
    "use",
    "whatever",
    "data",
    "whatever",
    "image",
    "want",
    "image",
    "going",
    "use",
    "going",
    "use",
    "going",
    "inference",
    "image",
    "right",
    "first",
    "image",
    "sunrise",
    "category",
    "data",
    "going",
    "something",
    "like",
    "pretty",
    "much",
    "results",
    "first",
    "thing",
    "going",
    "trying",
    "run",
    "code",
    "let",
    "see",
    "happens",
    "everything",
    "run",
    "smoothly",
    "going",
    "see",
    "error",
    "something",
    "like",
    "may",
    "need",
    "wait",
    "couple",
    "seconds",
    "everything",
    "seems",
    "working",
    "fine",
    "get",
    "error",
    "going",
    "going",
    "print",
    "results",
    "want",
    "show",
    "couple",
    "things",
    "entire",
    "information",
    "getting",
    "printing",
    "results",
    "right",
    "see",
    "lot",
    "information",
    "probabilities",
    "inferences",
    "making",
    "exactly",
    "result",
    "applying",
    "image",
    "classifier",
    "lot",
    "information",
    "another",
    "object",
    "another",
    "result",
    "important",
    "one",
    "names",
    "categories",
    "trained",
    "image",
    "classifier",
    "right",
    "see",
    "cloudy",
    "rain",
    "shine",
    "sunrise",
    "also",
    "see",
    "different",
    "integer",
    "values",
    "one",
    "categories",
    "something",
    "like",
    "dictionary",
    "going",
    "result",
    "applying",
    "image",
    "classifier",
    "result",
    "going",
    "integer",
    "going",
    "call",
    "dictionary",
    "going",
    "call",
    "object",
    "want",
    "know",
    "exactly",
    "name",
    "category",
    "inferenced",
    "right",
    "going",
    "going",
    "call",
    "another",
    "variable",
    "going",
    "names",
    "something",
    "like",
    "names",
    "dictionary",
    "results",
    "zero",
    "results",
    "list",
    "case",
    "want",
    "access",
    "first",
    "element",
    "predicting",
    "individual",
    "image",
    "element",
    "want",
    "going",
    "call",
    "dot",
    "names",
    "pretty",
    "much",
    "going",
    "define",
    "another",
    "variable",
    "props",
    "results",
    "0",
    "dot",
    "props",
    "probability",
    "vector",
    "different",
    "categories",
    "trying",
    "classify",
    "right",
    "going",
    "length",
    "4",
    "array",
    "probabilities",
    "different",
    "classes",
    "classifying",
    "right",
    "let",
    "show",
    "props",
    "looks",
    "like",
    "going",
    "print",
    "props",
    "going",
    "something",
    "else",
    "going",
    "say",
    "list",
    "make",
    "object",
    "list",
    "using",
    "yolo",
    "based",
    "pytorch",
    "call",
    "method",
    "working",
    "torch",
    "object",
    "right",
    "tensor",
    "really",
    "want",
    "tolist",
    "going",
    "print",
    "props",
    "show",
    "looks",
    "like",
    "show",
    "continue",
    "okay",
    "see",
    "result",
    "got",
    "applying",
    "printing",
    "props",
    "see",
    "list",
    "four",
    "elements",
    "one",
    "two",
    "three",
    "four",
    "one",
    "elements",
    "probabilities",
    "image",
    "one",
    "categories",
    "right",
    "let",
    "print",
    "names",
    "information",
    "screen",
    "want",
    "show",
    "want",
    "show",
    "something",
    "going",
    "print",
    "sorry",
    "names",
    "names",
    "dict",
    "let",
    "wait",
    "couple",
    "seconds",
    "want",
    "show",
    "probabilities",
    "also",
    "class",
    "names",
    "little",
    "clear",
    "exactly",
    "going",
    "show",
    "means",
    "number",
    "probability",
    "image",
    "cloudy",
    "right",
    "number",
    "probability",
    "image",
    "rain",
    "number",
    "probability",
    "shine",
    "last",
    "number",
    "probability",
    "sunrise",
    "see",
    "values",
    "definitely",
    "classifying",
    "image",
    "sunrise",
    "right",
    "almost",
    "one",
    "almost",
    "like",
    "super",
    "super",
    "confident",
    "absolutely",
    "confident",
    "classification",
    "exactly",
    "category",
    "classifying",
    "image",
    "make",
    "sense",
    "information",
    "going",
    "print",
    "names",
    "dicts",
    "going",
    "call",
    "np",
    "dot",
    "arg",
    "max",
    "going",
    "input",
    "probability",
    "list",
    "showed",
    "obviously",
    "need",
    "import",
    "numpy",
    "np",
    "otherwise",
    "going",
    "work",
    "basically",
    "looking",
    "list",
    "one",
    "containing",
    "four",
    "probabilities",
    "taking",
    "look",
    "maximum",
    "number",
    "case",
    "one",
    "taking",
    "index",
    "maximum",
    "number",
    "case",
    "first",
    "element",
    "index",
    "0",
    "one",
    "two",
    "three",
    "right",
    "um",
    "calling",
    "np",
    "dot",
    "arg",
    "max",
    "props",
    "getting",
    "three",
    "calling",
    "third",
    "element",
    "object",
    "go",
    "see",
    "3",
    "belongs",
    "sunrise",
    "category",
    "look",
    "image",
    "going",
    "see",
    "fact",
    "plotting",
    "sunrise",
    "let",
    "show",
    "everything",
    "seems",
    "working",
    "fine",
    "going",
    "today",
    "exactly",
    "train",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "custom",
    "data",
    "going",
    "tutorial",
    "previous",
    "videos",
    "showed",
    "train",
    "image",
    "classifier",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "time",
    "semantic",
    "segmentation",
    "going",
    "show",
    "entire",
    "process",
    "train",
    "semantic",
    "segmentation",
    "algorithm",
    "using",
    "yolo",
    "v8",
    "annotate",
    "data",
    "train",
    "model",
    "local",
    "environment",
    "also",
    "google",
    "colab",
    "finally",
    "super",
    "super",
    "comprehensive",
    "guide",
    "validate",
    "model",
    "trained",
    "name",
    "felipe",
    "welcome",
    "channel",
    "let",
    "get",
    "started",
    "let",
    "start",
    "tpday",
    "tutorial",
    "first",
    "thing",
    "going",
    "show",
    "data",
    "going",
    "using",
    "today",
    "dataset",
    "prepared",
    "today",
    "tutorial",
    "see",
    "images",
    "ducks",
    "going",
    "using",
    "duck",
    "dataset",
    "today",
    "exactly",
    "images",
    "look",
    "like",
    "one",
    "images",
    "absolutely",
    "every",
    "single",
    "one",
    "images",
    "going",
    "binary",
    "mask",
    "going",
    "image",
    "binary",
    "image",
    "absolutely",
    "every",
    "single",
    "pixel",
    "either",
    "white",
    "black",
    "absolutely",
    "every",
    "single",
    "white",
    "pixel",
    "location",
    "objects",
    "white",
    "pixels",
    "location",
    "objects",
    "interested",
    "case",
    "objects",
    "ducks",
    "let",
    "show",
    "example",
    "little",
    "clear",
    "mean",
    "regarding",
    "white",
    "pixels",
    "location",
    "objects",
    "random",
    "image",
    "data",
    "set",
    "random",
    "image",
    "duck",
    "exactly",
    "binary",
    "mask",
    "take",
    "look",
    "happens",
    "align",
    "two",
    "images",
    "apply",
    "something",
    "like",
    "transparency",
    "see",
    "binary",
    "mask",
    "giving",
    "us",
    "exact",
    "location",
    "duck",
    "image",
    "exactly",
    "means",
    "white",
    "pixels",
    "location",
    "objects",
    "exactly",
    "data",
    "going",
    "using",
    "tutorial",
    "let",
    "show",
    "downloaded",
    "data",
    "set",
    "dataset",
    "found",
    "open",
    "images",
    "dataset",
    "version",
    "let",
    "show",
    "dataset",
    "super",
    "super",
    "quickly",
    "amazing",
    "dataset",
    "use",
    "many",
    "different",
    "computer",
    "vision",
    "related",
    "tasks",
    "example",
    "go",
    "segmentation",
    "see",
    "many",
    "many",
    "many",
    "different",
    "categories",
    "looking",
    "random",
    "category",
    "phones",
    "example",
    "semantic",
    "segmentation",
    "data",
    "set",
    "phones",
    "let",
    "show",
    "go",
    "scroll",
    "see",
    "one",
    "categories",
    "duck",
    "example",
    "exact",
    "data",
    "going",
    "using",
    "tutorial",
    "exact",
    "duck",
    "dataset",
    "going",
    "using",
    "order",
    "train",
    "semantic",
    "segmentation",
    "algorithm",
    "using",
    "yolo",
    "v8",
    "obviously",
    "could",
    "download",
    "exact",
    "data",
    "going",
    "use",
    "tutorial",
    "go",
    "open",
    "images",
    "dataset",
    "version",
    "7",
    "download",
    "exact",
    "duck",
    "dataset",
    "going",
    "using",
    "today",
    "also",
    "download",
    "another",
    "dataset",
    "categories",
    "data",
    "going",
    "use",
    "project",
    "download",
    "exact",
    "data",
    "want",
    "let",
    "show",
    "website",
    "use",
    "order",
    "annotate",
    "data",
    "case",
    "downloaded",
    "dataset",
    "already",
    "annotated",
    "annotate",
    "absolutely",
    "images",
    "absolutely",
    "images",
    "already",
    "binary",
    "masks",
    "right",
    "already",
    "masks",
    "absolutely",
    "images",
    "data",
    "set",
    "building",
    "data",
    "set",
    "scratch",
    "chances",
    "need",
    "annotate",
    "images",
    "let",
    "give",
    "tool",
    "going",
    "give",
    "going",
    "super",
    "super",
    "useful",
    "case",
    "need",
    "annotate",
    "data",
    "called",
    "cvat",
    "find",
    "popular",
    "computer",
    "vision",
    "annotation",
    "tool",
    "used",
    "know",
    "many",
    "times",
    "projects",
    "popular",
    "useful",
    "going",
    "show",
    "use",
    "tool",
    "order",
    "annotate",
    "images",
    "first",
    "thing",
    "need",
    "go",
    "start",
    "using",
    "cvat",
    "going",
    "ask",
    "either",
    "register",
    "user",
    "already",
    "login",
    "right",
    "already",
    "user",
    "logged",
    "account",
    "let",
    "show",
    "going",
    "order",
    "annotate",
    "images",
    "actually",
    "going",
    "annotate",
    "one",
    "image",
    "going",
    "show",
    "use",
    "order",
    "create",
    "binary",
    "mask",
    "project",
    "going",
    "one",
    "image",
    "yeah",
    "need",
    "see",
    "process",
    "going",
    "going",
    "projects",
    "going",
    "plus",
    "button",
    "create",
    "new",
    "project",
    "name",
    "project",
    "duck",
    "semantic",
    "sem",
    "seg",
    "name",
    "project",
    "contain",
    "one",
    "label",
    "duck",
    "going",
    "press",
    "continue",
    "pretty",
    "much",
    "submit",
    "open",
    "going",
    "create",
    "task",
    "already",
    "yeah",
    "create",
    "new",
    "task",
    "task",
    "name",
    "duck",
    "task",
    "zero",
    "one",
    "really",
    "matter",
    "name",
    "selected",
    "random",
    "name",
    "going",
    "add",
    "image",
    "going",
    "select",
    "image",
    "going",
    "annotate",
    "one",
    "image",
    "going",
    "enough",
    "submit",
    "open",
    "going",
    "take",
    "couple",
    "seconds",
    "need",
    "select",
    "images",
    "images",
    "want",
    "annotate",
    "case",
    "going",
    "select",
    "one",
    "going",
    "press",
    "job",
    "going",
    "open",
    "annotation",
    "job",
    "right",
    "going",
    "show",
    "annotate",
    "image",
    "create",
    "binary",
    "mask",
    "image",
    "need",
    "go",
    "draw",
    "new",
    "polygon",
    "shape",
    "going",
    "start",
    "pretty",
    "much",
    "need",
    "order",
    "create",
    "semantic",
    "segmentation",
    "data",
    "set",
    "image",
    "right",
    "order",
    "create",
    "binary",
    "mask",
    "image",
    "see",
    "trying",
    "follow",
    "contour",
    "object",
    "may",
    "notice",
    "contour",
    "following",
    "perfect",
    "obviously",
    "perfect",
    "perfect",
    "creating",
    "dataset",
    "creating",
    "mask",
    "image",
    "creating",
    "mask",
    "object",
    "definitely",
    "need",
    "pixel",
    "wise",
    "perfect",
    "right",
    "need",
    "make",
    "good",
    "mask",
    "obviously",
    "something",
    "like",
    "right",
    "enough",
    "time",
    "consuming",
    "process",
    "see",
    "selected",
    "one",
    "many",
    "many",
    "images",
    "going",
    "take",
    "lot",
    "time",
    "make",
    "sense",
    "idea",
    "see",
    "annotate",
    "images",
    "right",
    "see",
    "following",
    "contour",
    "okay",
    "interesting",
    "part",
    "reached",
    "duck",
    "hand",
    "leg",
    "something",
    "like",
    "part",
    "duck",
    "body",
    "see",
    "beneath",
    "water",
    "water",
    "going",
    "ask",
    "need",
    "annotate",
    "part",
    "need",
    "annotate",
    "part",
    "part",
    "duck",
    "could",
    "say",
    "yeah",
    "definitely",
    "part",
    "duck",
    "really",
    "seeing",
    "lot",
    "object",
    "right",
    "like",
    "part",
    "water",
    "well",
    "going",
    "ask",
    "need",
    "annotate",
    "part",
    "case",
    "going",
    "annotate",
    "like",
    "either",
    "way",
    "sections",
    "parts",
    "100",
    "convinced",
    "like",
    "discussion",
    "could",
    "could",
    "annotating",
    "images",
    "always",
    "good",
    "practice",
    "going",
    "see",
    "many",
    "many",
    "different",
    "situations",
    "seen",
    "right",
    "seen",
    "part",
    "duck",
    "super",
    "super",
    "curious",
    "name",
    "know",
    "name",
    "part",
    "duck",
    "body",
    "please",
    "let",
    "know",
    "comments",
    "think",
    "called",
    "hand",
    "right",
    "something",
    "like",
    "hand",
    "let",
    "know",
    "another",
    "name",
    "know",
    "please",
    "let",
    "know",
    "comments",
    "let",
    "continue",
    "see",
    "almost",
    "almost",
    "completed",
    "mask",
    "duck",
    "complete",
    "peak",
    "whatever",
    "called",
    "seems",
    "really",
    "know",
    "much",
    "ducks",
    "anatomy",
    "really",
    "know",
    "name",
    "part",
    "either",
    "anyway",
    "already",
    "completed",
    "completed",
    "press",
    "shift",
    "n",
    "going",
    "mask",
    "binary",
    "mask",
    "generated",
    "object",
    "duck",
    "going",
    "pretty",
    "much",
    "click",
    "save",
    "see",
    "definitely",
    "perfect",
    "mask",
    "perfect",
    "like",
    "pixel",
    "wise",
    "perfect",
    "mask",
    "parts",
    "duck",
    "within",
    "mask",
    "matter",
    "make",
    "perfect",
    "possible",
    "100",
    "perfect",
    "end",
    "world",
    "nothing",
    "happens",
    "already",
    "saved",
    "image",
    "need",
    "download",
    "data",
    "show",
    "download",
    "data",
    "annotated",
    "order",
    "create",
    "data",
    "set",
    "going",
    "going",
    "select",
    "part",
    "option",
    "going",
    "export",
    "task",
    "data",
    "set",
    "going",
    "select",
    "option",
    "segmentation",
    "mask",
    "going",
    "select",
    "option",
    "going",
    "click",
    "ok",
    "going",
    "need",
    "wait",
    "couple",
    "minutes",
    "pretty",
    "much",
    "data",
    "downloaded",
    "going",
    "open",
    "file",
    "basically",
    "images",
    "interested",
    "going",
    "right",
    "see",
    "case",
    "one",
    "image",
    "going",
    "many",
    "many",
    "many",
    "images",
    "please",
    "mind",
    "color",
    "get",
    "images",
    "right",
    "case",
    "download",
    "image",
    "red",
    "really",
    "matter",
    "mind",
    "could",
    "something",
    "different",
    "white",
    "images",
    "need",
    "create",
    "directory",
    "going",
    "show",
    "going",
    "maybe",
    "going",
    "create",
    "temporal",
    "directory",
    "going",
    "call",
    "tmp",
    "going",
    "locate",
    "image",
    "right",
    "going",
    "going",
    "create",
    "two",
    "directories",
    "one",
    "going",
    "masks",
    "one",
    "going",
    "called",
    "labels",
    "going",
    "see",
    "minute",
    "going",
    "locate",
    "mask",
    "going",
    "pycharm",
    "created",
    "script",
    "python",
    "script",
    "going",
    "take",
    "care",
    "important",
    "process",
    "created",
    "masks",
    "images",
    "binary",
    "images",
    "perfect",
    "exactly",
    "information",
    "need",
    "order",
    "train",
    "semantic",
    "segmentation",
    "algorithm",
    "way",
    "yolo",
    "v8",
    "works",
    "need",
    "convert",
    "image",
    "binary",
    "image",
    "different",
    "type",
    "file",
    "going",
    "keep",
    "exactly",
    "information",
    "going",
    "convert",
    "image",
    "another",
    "type",
    "file",
    "let",
    "show",
    "phyton",
    "file",
    "created",
    "order",
    "take",
    "care",
    "process",
    "thing",
    "need",
    "edit",
    "fields",
    "going",
    "put",
    "masks",
    "directory",
    "going",
    "contain",
    "masks",
    "generated",
    "going",
    "output",
    "directory",
    "see",
    "two",
    "variables",
    "already",
    "named",
    "properly",
    "case",
    "tmp",
    "directory",
    "created",
    "located",
    "mask",
    "generated",
    "cvat",
    "output",
    "directory",
    "take",
    "look",
    "happens",
    "press",
    "play",
    "script",
    "executed",
    "everything",
    "okay",
    "mask",
    "input",
    "file",
    "generated",
    "mask",
    "looks",
    "super",
    "super",
    "super",
    "absolutely",
    "crazy",
    "right",
    "lot",
    "numbers",
    "like",
    "crazy",
    "thing",
    "without",
    "going",
    "details",
    "let",
    "say",
    "exactly",
    "information",
    "exactly",
    "exactly",
    "information",
    "different",
    "format",
    "let",
    "let",
    "keep",
    "idea",
    "right",
    "exactly",
    "information",
    "different",
    "format",
    "exactly",
    "format",
    "yolo",
    "v8",
    "needs",
    "order",
    "train",
    "semantic",
    "segmentation",
    "model",
    "exactly",
    "need",
    "created",
    "masks",
    "need",
    "download",
    "files",
    "computer",
    "please",
    "execute",
    "script",
    "convert",
    "images",
    "different",
    "type",
    "files",
    "obviously",
    "script",
    "available",
    "github",
    "repository",
    "today",
    "tutorial",
    "pretty",
    "much",
    "order",
    "create",
    "annotations",
    "order",
    "download",
    "annotations",
    "order",
    "format",
    "everything",
    "way",
    "let",
    "show",
    "structure",
    "need",
    "format",
    "way",
    "need",
    "structure",
    "file",
    "system",
    "complies",
    "yolov8",
    "remember",
    "something",
    "already",
    "done",
    "previous",
    "tutorials",
    "regarding",
    "yolov8",
    "data",
    "need",
    "structure",
    "data",
    "need",
    "format",
    "data",
    "need",
    "structure",
    "file",
    "system",
    "yolo",
    "v8",
    "finds",
    "absolutely",
    "everything",
    "located",
    "right",
    "going",
    "locate",
    "images",
    "given",
    "directory",
    "going",
    "locate",
    "annotations",
    "labels",
    "another",
    "directory",
    "everything",
    "way",
    "yolov8",
    "expects",
    "right",
    "let",
    "show",
    "directory",
    "root",
    "directory",
    "called",
    "data",
    "within",
    "data",
    "three",
    "directories",
    "directory",
    "masks",
    "directory",
    "really",
    "needed",
    "way",
    "got",
    "masks",
    "data",
    "really",
    "needed",
    "order",
    "show",
    "directory",
    "one",
    "containing",
    "binary",
    "masks",
    "order",
    "clear",
    "needed",
    "part",
    "process",
    "going",
    "going",
    "delete",
    "directory",
    "right",
    "gone",
    "okay",
    "two",
    "directories",
    "exactly",
    "directories",
    "need",
    "part",
    "process",
    "creating",
    "structure",
    "data",
    "images",
    "see",
    "two",
    "directories",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "within",
    "images",
    "two",
    "directories",
    "one",
    "called",
    "train",
    "one",
    "called",
    "val",
    "train",
    "directory",
    "going",
    "training",
    "data",
    "going",
    "training",
    "images",
    "images",
    "yolo",
    "v8",
    "going",
    "use",
    "order",
    "train",
    "model",
    "order",
    "train",
    "semantic",
    "segmentation",
    "model",
    "val",
    "also",
    "contains",
    "images",
    "images",
    "going",
    "use",
    "order",
    "validate",
    "model",
    "right",
    "remember",
    "need",
    "two",
    "directories",
    "one",
    "called",
    "train",
    "important",
    "name",
    "called",
    "train",
    "one",
    "called",
    "val",
    "going",
    "back",
    "see",
    "two",
    "directories",
    "one",
    "images",
    "one",
    "labels",
    "go",
    "within",
    "labels",
    "see",
    "two",
    "directories",
    "also",
    "named",
    "train",
    "val",
    "open",
    "directories",
    "type",
    "files",
    "generated",
    "exact",
    "script",
    "showed",
    "minutes",
    "ago",
    "within",
    "labels",
    "two",
    "directories",
    "train",
    "val",
    "train",
    "annotations",
    "generated",
    "training",
    "data",
    "training",
    "masks",
    "right",
    "long",
    "story",
    "short",
    "root",
    "directory",
    "within",
    "root",
    "directory",
    "two",
    "directories",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "within",
    "images",
    "two",
    "directories",
    "train",
    "val",
    "within",
    "train",
    "within",
    "val",
    "data",
    "images",
    "within",
    "labels",
    "exactly",
    "structure",
    "two",
    "directories",
    "train",
    "val",
    "within",
    "train",
    "within",
    "val",
    "locate",
    "annotations",
    "right",
    "exactly",
    "structure",
    "need",
    "data",
    "please",
    "remember",
    "structure",
    "file",
    "system",
    "like",
    "otherwise",
    "may",
    "issue",
    "trying",
    "train",
    "semantic",
    "segmentation",
    "model",
    "using",
    "yolo",
    "v8",
    "pretty",
    "much",
    "order",
    "structure",
    "data",
    "let",
    "move",
    "interesting",
    "part",
    "let",
    "move",
    "fun",
    "part",
    "training",
    "semantic",
    "segmentation",
    "model",
    "let",
    "move",
    "pycharm",
    "show",
    "train",
    "local",
    "environment",
    "let",
    "continue",
    "pycharm",
    "project",
    "created",
    "today",
    "tutorial",
    "please",
    "remember",
    "install",
    "project",
    "requirements",
    "otherwise",
    "able",
    "use",
    "yolo",
    "v8",
    "let",
    "go",
    "python",
    "script",
    "created",
    "going",
    "coding",
    "need",
    "order",
    "train",
    "semantic",
    "segmentation",
    "model",
    "using",
    "yolo",
    "v8",
    "let",
    "go",
    "back",
    "yolov8",
    "official",
    "repository",
    "let",
    "see",
    "exactly",
    "use",
    "yolo",
    "model",
    "order",
    "train",
    "semantic",
    "segmentation",
    "model",
    "going",
    "segmentation",
    "section",
    "going",
    "click",
    "segmentation",
    "docs",
    "going",
    "straightforward",
    "going",
    "train",
    "going",
    "copy",
    "sentence",
    "load",
    "model",
    "going",
    "back",
    "pycharm",
    "going",
    "copy",
    "paste",
    "going",
    "ultralytics",
    "import",
    "yolo",
    "also",
    "going",
    "copy",
    "sentence",
    "going",
    "change",
    "number",
    "epochs",
    "2",
    "something",
    "like",
    "one",
    "remember",
    "always",
    "healthy",
    "always",
    "good",
    "idea",
    "like",
    "dummy",
    "training",
    "train",
    "model",
    "one",
    "epoch",
    "make",
    "sure",
    "everything",
    "okay",
    "make",
    "sure",
    "everything",
    "runs",
    "smoothly",
    "like",
    "deeper",
    "training",
    "going",
    "change",
    "number",
    "epochs",
    "also",
    "going",
    "change",
    "config",
    "file",
    "going",
    "use",
    "config",
    "file",
    "config",
    "file",
    "obviously",
    "find",
    "config",
    "file",
    "repository",
    "today",
    "video",
    "long",
    "story",
    "short",
    "see",
    "many",
    "many",
    "different",
    "keywords",
    "one",
    "need",
    "edit",
    "one",
    "right",
    "absolute",
    "path",
    "data",
    "case",
    "copy",
    "paste",
    "path",
    "see",
    "directory",
    "contains",
    "images",
    "labels",
    "directories",
    "long",
    "story",
    "short",
    "remember",
    "edit",
    "path",
    "path",
    "location",
    "data",
    "already",
    "structured",
    "everything",
    "way",
    "mentioned",
    "way",
    "show",
    "video",
    "everything",
    "else",
    "fine",
    "right",
    "train",
    "val",
    "keywords",
    "good",
    "mean",
    "leave",
    "everything",
    "please",
    "remember",
    "edit",
    "field",
    "location",
    "data",
    "going",
    "back",
    "pretty",
    "much",
    "need",
    "order",
    "train",
    "semantic",
    "segmentation",
    "model",
    "going",
    "press",
    "play",
    "let",
    "see",
    "happens",
    "see",
    "everything",
    "going",
    "well",
    "training",
    "model",
    "everything",
    "taken",
    "forever",
    "everything",
    "going",
    "take",
    "forever",
    "even",
    "though",
    "training",
    "model",
    "one",
    "epoch",
    "everything",
    "going",
    "take",
    "lot",
    "time",
    "going",
    "instead",
    "press",
    "stop",
    "going",
    "stop",
    "training",
    "everything",
    "going",
    "well",
    "stopping",
    "training",
    "error",
    "something",
    "everything",
    "going",
    "well",
    "going",
    "repeat",
    "exactly",
    "process",
    "jupiter",
    "notebook",
    "google",
    "collab",
    "use",
    "google",
    "collab",
    "going",
    "access",
    "free",
    "gpu",
    "going",
    "make",
    "process",
    "much",
    "much",
    "much",
    "much",
    "faster",
    "going",
    "use",
    "google",
    "colab",
    "order",
    "train",
    "model",
    "recommend",
    "use",
    "google",
    "collab",
    "well",
    "going",
    "show",
    "google",
    "collab",
    "environment",
    "please",
    "remember",
    "upload",
    "data",
    "anything",
    "google",
    "colab",
    "please",
    "remember",
    "upload",
    "data",
    "otherwise",
    "going",
    "work",
    "example",
    "see",
    "many",
    "directories",
    "one",
    "directories",
    "data",
    "within",
    "data",
    "labels",
    "images",
    "exactly",
    "directories",
    "already",
    "uploaded",
    "data",
    "google",
    "drive",
    "please",
    "remember",
    "otherwise",
    "able",
    "everything",
    "going",
    "right",
    "one",
    "things",
    "need",
    "upload",
    "also",
    "remember",
    "upload",
    "file",
    "file",
    "showed",
    "local",
    "computer",
    "also",
    "need",
    "file",
    "thing",
    "need",
    "edit",
    "path",
    "need",
    "specify",
    "path",
    "location",
    "data",
    "google",
    "drive",
    "going",
    "show",
    "exactly",
    "locate",
    "data",
    "google",
    "drive",
    "let",
    "move",
    "jupiter",
    "notebook",
    "obviously",
    "going",
    "give",
    "notebook",
    "going",
    "github",
    "repository",
    "today",
    "tutorial",
    "use",
    "notebook",
    "going",
    "show",
    "execute",
    "absolutely",
    "every",
    "single",
    "cell",
    "everything",
    "works",
    "right",
    "exactly",
    "everything",
    "exactly",
    "everything",
    "means",
    "right",
    "exactly",
    "absolutely",
    "every",
    "single",
    "cell",
    "first",
    "thing",
    "connecting",
    "google",
    "collab",
    "environment",
    "google",
    "drive",
    "remember",
    "need",
    "access",
    "data",
    "google",
    "drive",
    "definitely",
    "need",
    "allow",
    "google",
    "collab",
    "access",
    "google",
    "drive",
    "going",
    "select",
    "account",
    "scroll",
    "way",
    "press",
    "allow",
    "going",
    "pretty",
    "much",
    "need",
    "wait",
    "couple",
    "seconds",
    "let",
    "continue",
    "going",
    "define",
    "variable",
    "data",
    "dir",
    "location",
    "data",
    "google",
    "drive",
    "please",
    "mind",
    "path",
    "location",
    "please",
    "mind",
    "way",
    "structured",
    "right",
    "please",
    "mind",
    "first",
    "word",
    "content",
    "gdrive",
    "drive",
    "relative",
    "path",
    "data",
    "want",
    "know",
    "exactly",
    "upload",
    "data",
    "completely",
    "sure",
    "uploaded",
    "data",
    "ls",
    "like",
    "right",
    "going",
    "give",
    "files",
    "root",
    "directory",
    "google",
    "drive",
    "navigate",
    "directory",
    "uploaded",
    "data",
    "case",
    "drive",
    "computer",
    "vision",
    "engineer",
    "image",
    "segmentation",
    "yolo",
    "v8",
    "data",
    "exactly",
    "data",
    "located",
    "google",
    "drive",
    "go",
    "directory",
    "see",
    "drive",
    "see",
    "drive",
    "computer",
    "vision",
    "engineer",
    "image",
    "segmentation",
    "yolo",
    "v8",
    "data",
    "exactly",
    "located",
    "data",
    "thing",
    "need",
    "edit",
    "cell",
    "press",
    "enter",
    "everything",
    "ready",
    "going",
    "install",
    "ultralytics",
    "use",
    "yolo",
    "v8",
    "notebook",
    "going",
    "take",
    "seconds",
    "going",
    "ready",
    "time",
    "something",
    "need",
    "google",
    "colab",
    "go",
    "runtime",
    "change",
    "runtime",
    "type",
    "make",
    "sure",
    "says",
    "gpu",
    "make",
    "sure",
    "using",
    "google",
    "collab",
    "gpu",
    "using",
    "google",
    "collab",
    "gpu",
    "everything",
    "pretty",
    "much",
    "pointless",
    "right",
    "remember",
    "check",
    "using",
    "google",
    "colab",
    "gpu",
    "start",
    "process",
    "otherwise",
    "need",
    "run",
    "absolutely",
    "everything",
    "let",
    "continue",
    "already",
    "installed",
    "ultralytics",
    "going",
    "run",
    "cell",
    "realize",
    "exactly",
    "exactly",
    "type",
    "information",
    "code",
    "local",
    "environment",
    "right",
    "defining",
    "model",
    "training",
    "model",
    "need",
    "press",
    "enter",
    "also",
    "mind",
    "specified",
    "config",
    "file",
    "right",
    "location",
    "config",
    "file",
    "going",
    "run",
    "full",
    "training",
    "actually",
    "going",
    "run",
    "training",
    "10",
    "epochs",
    "going",
    "also",
    "going",
    "take",
    "time",
    "although",
    "going",
    "use",
    "gpu",
    "going",
    "take",
    "minutes",
    "well",
    "going",
    "going",
    "wait",
    "completed",
    "going",
    "pause",
    "recording",
    "going",
    "fast",
    "forward",
    "video",
    "process",
    "completed",
    "okay",
    "training",
    "process",
    "completed",
    "trained",
    "model",
    "everything",
    "fine",
    "see",
    "results",
    "saved",
    "runs",
    "segment",
    "train2",
    "thing",
    "need",
    "get",
    "results",
    "got",
    "training",
    "need",
    "get",
    "weights",
    "need",
    "get",
    "results",
    "different",
    "metrics",
    "different",
    "plots",
    "need",
    "analyze",
    "training",
    "process",
    "need",
    "validate",
    "everything",
    "fine",
    "right",
    "going",
    "get",
    "information",
    "easiest",
    "way",
    "running",
    "command",
    "running",
    "command",
    "going",
    "copy",
    "content",
    "directory",
    "results",
    "saved",
    "google",
    "drive",
    "right",
    "remember",
    "edit",
    "url",
    "remember",
    "edit",
    "path",
    "location",
    "want",
    "copy",
    "everything",
    "directory",
    "google",
    "drive",
    "make",
    "sure",
    "everything",
    "okay",
    "make",
    "sure",
    "location",
    "makes",
    "sense",
    "execute",
    "cell",
    "going",
    "copy",
    "everything",
    "google",
    "drive",
    "let",
    "show",
    "google",
    "drive",
    "already",
    "executed",
    "cell",
    "everything",
    "google",
    "drive",
    "runs",
    "directory",
    "created",
    "ran",
    "cell",
    "directory",
    "called",
    "segment",
    "train2",
    "results",
    "results",
    "going",
    "analyze",
    "going",
    "download",
    "directory",
    "directory",
    "local",
    "computer",
    "going",
    "take",
    "look",
    "plots",
    "metrics",
    "going",
    "tell",
    "exactly",
    "usually",
    "order",
    "validate",
    "training",
    "process",
    "everything",
    "downloaded",
    "everything",
    "completed",
    "let",
    "take",
    "look",
    "files",
    "going",
    "going",
    "copy",
    "everything",
    "desktop",
    "need",
    "cleaning",
    "way",
    "results",
    "got",
    "training",
    "process",
    "see",
    "lot",
    "information",
    "definitely",
    "lot",
    "information",
    "right",
    "many",
    "many",
    "different",
    "files",
    "many",
    "different",
    "everything",
    "weights",
    "lot",
    "information",
    "let",
    "tell",
    "let",
    "give",
    "recommendation",
    "evaluation",
    "validation",
    "plots",
    "results",
    "would",
    "recommend",
    "focus",
    "two",
    "things",
    "one",
    "plot",
    "one",
    "metrics",
    "also",
    "going",
    "show",
    "take",
    "look",
    "results",
    "predictions",
    "images",
    "let",
    "start",
    "see",
    "lot",
    "information",
    "lot",
    "metrics",
    "definitely",
    "knock",
    "analyzing",
    "information",
    "definitely",
    "go",
    "crazy",
    "analyzing",
    "information",
    "plots",
    "going",
    "show",
    "like",
    "simple",
    "straightforward",
    "way",
    "analysis",
    "validation",
    "something",
    "already",
    "mentioned",
    "previous",
    "videos",
    "yolo",
    "v8",
    "train",
    "model",
    "validate",
    "model",
    "take",
    "look",
    "happens",
    "loss",
    "function",
    "take",
    "look",
    "happens",
    "loss",
    "plots",
    "plots",
    "related",
    "loss",
    "function",
    "semantic",
    "segmentation",
    "type",
    "algorithm",
    "would",
    "tell",
    "take",
    "look",
    "happens",
    "loss",
    "segmentation",
    "loss",
    "would",
    "say",
    "take",
    "look",
    "happens",
    "training",
    "loss",
    "validation",
    "loss",
    "long",
    "story",
    "short",
    "make",
    "sure",
    "loss",
    "function",
    "goes",
    "right",
    "loss",
    "function",
    "going",
    "likely",
    "things",
    "going",
    "well",
    "guarantee",
    "maybe",
    "things",
    "really",
    "going",
    "well",
    "model",
    "really",
    "perform",
    "well",
    "may",
    "happen",
    "would",
    "say",
    "loss",
    "function",
    "going",
    "good",
    "sign",
    "contrary",
    "loss",
    "function",
    "going",
    "would",
    "say",
    "serious",
    "problem",
    "would",
    "say",
    "something",
    "seriously",
    "wrong",
    "training",
    "process",
    "data",
    "annotations",
    "something",
    "done",
    "something",
    "seriously",
    "wrong",
    "something",
    "seriously",
    "wrong",
    "data",
    "talking",
    "something",
    "amazingly",
    "wrong",
    "seriously",
    "wrong",
    "right",
    "loss",
    "solution",
    "going",
    "know",
    "going",
    "something",
    "going",
    "see",
    "mean",
    "loss",
    "function",
    "going",
    "yeah",
    "guarantee",
    "success",
    "mean",
    "like",
    "good",
    "model",
    "sure",
    "may",
    "situation",
    "trained",
    "good",
    "model",
    "loss",
    "function",
    "going",
    "anyway",
    "would",
    "say",
    "good",
    "sign",
    "least",
    "training",
    "loss",
    "validation",
    "loss",
    "go",
    "talking",
    "trend",
    "going",
    "right",
    "example",
    "epochs",
    "loss",
    "function",
    "going",
    "okay",
    "problem",
    "looking",
    "trend",
    "trend",
    "loss",
    "function",
    "go",
    "exactly",
    "situation",
    "long",
    "story",
    "short",
    "recommendation",
    "validation",
    "analysis",
    "metrics",
    "focus",
    "two",
    "make",
    "sure",
    "going",
    "order",
    "continue",
    "process",
    "validation",
    "going",
    "take",
    "look",
    "happens",
    "predictions",
    "model",
    "performing",
    "data",
    "predictions",
    "going",
    "take",
    "look",
    "happens",
    "images",
    "right",
    "see",
    "batches",
    "labels",
    "annotations",
    "images",
    "predictions",
    "images",
    "right",
    "going",
    "take",
    "look",
    "happens",
    "example",
    "going",
    "show",
    "results",
    "first",
    "image",
    "see",
    "looking",
    "image",
    "predictions",
    "data",
    "annotations",
    "labels",
    "see",
    "many",
    "many",
    "many",
    "missing",
    "annotations",
    "example",
    "image",
    "one",
    "mask",
    "mask",
    "one",
    "four",
    "ducks",
    "one",
    "two",
    "three",
    "four",
    "five",
    "dogs",
    "one",
    "annotated",
    "similar",
    "behavior",
    "one",
    "ducks",
    "annotated",
    "something",
    "similar",
    "one",
    "annotated",
    "happens",
    "absolutely",
    "every",
    "single",
    "one",
    "images",
    "lot",
    "missing",
    "annotations",
    "data",
    "currently",
    "looking",
    "look",
    "predictions",
    "images",
    "predictions",
    "see",
    "nevertheless",
    "lot",
    "missing",
    "annotations",
    "predictions",
    "really",
    "look",
    "bad",
    "right",
    "example",
    "case",
    "detecting",
    "one",
    "two",
    "three",
    "five",
    "ducks",
    "even",
    "better",
    "prediction",
    "would",
    "say",
    "perfect",
    "detection",
    "would",
    "say",
    "good",
    "right",
    "like",
    "100",
    "accurate",
    "like",
    "good",
    "would",
    "say",
    "definitely",
    "better",
    "data",
    "used",
    "train",
    "model",
    "happens",
    "first",
    "image",
    "take",
    "look",
    "images",
    "see",
    "similar",
    "behavior",
    "right",
    "data",
    "used",
    "training",
    "algorithm",
    "predictions",
    "got",
    "images",
    "right",
    "seems",
    "like",
    "exactly",
    "behavior",
    "exactly",
    "situation",
    "image",
    "well",
    "conclusions",
    "looking",
    "images",
    "looking",
    "predictions",
    "model",
    "perfect",
    "would",
    "say",
    "performs",
    "well",
    "especially",
    "considering",
    "data",
    "using",
    "train",
    "model",
    "seems",
    "perfect",
    "seems",
    "lot",
    "lot",
    "missing",
    "detections",
    "lot",
    "missing",
    "elements",
    "right",
    "lot",
    "missing",
    "objects",
    "conclusion",
    "conclusion",
    "looking",
    "results",
    "another",
    "reason",
    "recommend",
    "go",
    "crazy",
    "analyzing",
    "plots",
    "analyzing",
    "plots",
    "remember",
    "thing",
    "comparing",
    "data",
    "data",
    "using",
    "order",
    "train",
    "model",
    "predictions",
    "right",
    "thing",
    "comparing",
    "data",
    "predictions",
    "predictions",
    "model",
    "right",
    "thing",
    "comparison",
    "two",
    "things",
    "many",
    "missing",
    "annotations",
    "many",
    "missing",
    "objects",
    "many",
    "different",
    "errors",
    "data",
    "data",
    "using",
    "train",
    "algorithm",
    "comparison",
    "little",
    "meaningless",
    "right",
    "really",
    "make",
    "lot",
    "sense",
    "comparing",
    "one",
    "thing",
    "thing",
    "comparing",
    "lot",
    "errors",
    "lot",
    "missing",
    "objects",
    "maybe",
    "comparison",
    "make",
    "lot",
    "sense",
    "whatsoever",
    "right",
    "also",
    "recommend",
    "go",
    "crazy",
    "analyzing",
    "plots",
    "going",
    "give",
    "lot",
    "information",
    "going",
    "even",
    "information",
    "analyzing",
    "results",
    "good",
    "example",
    "happens",
    "real",
    "life",
    "training",
    "model",
    "real",
    "project",
    "remember",
    "building",
    "entire",
    "dataset",
    "dataset",
    "100",
    "clean",
    "absolutely",
    "100",
    "perfect",
    "expensive",
    "good",
    "example",
    "happens",
    "real",
    "life",
    "usually",
    "data",
    "using",
    "train",
    "model",
    "train",
    "algorithm",
    "errors",
    "sometimes",
    "many",
    "many",
    "many",
    "errors",
    "good",
    "example",
    "validation",
    "process",
    "looks",
    "like",
    "data",
    "similar",
    "data",
    "real",
    "life",
    "cases",
    "perfect",
    "conclusion",
    "evaluation",
    "validation",
    "could",
    "improving",
    "data",
    "taking",
    "look",
    "going",
    "data",
    "next",
    "step",
    "would",
    "improve",
    "data",
    "looking",
    "results",
    "one",
    "ways",
    "could",
    "improve",
    "data",
    "using",
    "predictions",
    "getting",
    "instead",
    "annotations",
    "used",
    "train",
    "model",
    "see",
    "mean",
    "annotations",
    "predictions",
    "getting",
    "even",
    "better",
    "annotations",
    "maybe",
    "next",
    "step",
    "use",
    "predictions",
    "order",
    "train",
    "new",
    "model",
    "see",
    "mean",
    "analyzing",
    "results",
    "going",
    "make",
    "decisions",
    "move",
    "forward",
    "continue",
    "good",
    "example",
    "process",
    "look",
    "like",
    "real",
    "project",
    "pretty",
    "much",
    "works",
    "looks",
    "like",
    "working",
    "project",
    "working",
    "either",
    "company",
    "freelancer",
    "delivering",
    "project",
    "client",
    "pretty",
    "much",
    "happens",
    "right",
    "errors",
    "things",
    "happen",
    "need",
    "make",
    "decision",
    "given",
    "information",
    "get",
    "analysis",
    "going",
    "order",
    "show",
    "simple",
    "straightforward",
    "way",
    "order",
    "validate",
    "training",
    "process",
    "order",
    "make",
    "conclusions",
    "regarding",
    "going",
    "right",
    "regarding",
    "make",
    "decisions",
    "know",
    "move",
    "forward",
    "project",
    "training",
    "process",
    "let",
    "show",
    "something",
    "else",
    "within",
    "directory",
    "weights",
    "folder",
    "weights",
    "located",
    "right",
    "training",
    "model",
    "want",
    "model",
    "order",
    "make",
    "predictions",
    "order",
    "make",
    "inferences",
    "models",
    "located",
    "model",
    "saved",
    "something",
    "already",
    "mentioned",
    "one",
    "previous",
    "videos",
    "regarding",
    "yolo",
    "v8",
    "remember",
    "two",
    "models",
    "one",
    "called",
    "another",
    "one",
    "way",
    "works",
    "remember",
    "training",
    "model",
    "end",
    "absolutely",
    "every",
    "single",
    "epoch",
    "updating",
    "weights",
    "updating",
    "model",
    "end",
    "absolutely",
    "every",
    "single",
    "epoch",
    "already",
    "model",
    "available",
    "use",
    "want",
    "means",
    "getting",
    "last",
    "model",
    "model",
    "got",
    "end",
    "training",
    "process",
    "case",
    "training",
    "network",
    "10",
    "epochs",
    "remember",
    "correctly",
    "model",
    "got",
    "end",
    "tenth",
    "epoch",
    "means",
    "getting",
    "best",
    "model",
    "best",
    "model",
    "train",
    "entire",
    "training",
    "process",
    "show",
    "metrics",
    "let",
    "see",
    "metrics",
    "see",
    "many",
    "metrics",
    "related",
    "loss",
    "function",
    "metrics",
    "related",
    "accuracy",
    "model",
    "performing",
    "way",
    "yolov8",
    "decides",
    "best",
    "model",
    "case",
    "semantic",
    "segmentation",
    "type",
    "problem",
    "may",
    "related",
    "loss",
    "function",
    "maybe",
    "taking",
    "model",
    "got",
    "minimum",
    "loss",
    "may",
    "related",
    "plots",
    "performances",
    "related",
    "accuracy",
    "performance",
    "maybe",
    "getting",
    "model",
    "got",
    "maximum",
    "precision",
    "example",
    "maximum",
    "recall",
    "something",
    "like",
    "100",
    "sure",
    "look",
    "documentation",
    "way",
    "usually",
    "goes",
    "last",
    "model",
    "trained",
    "end",
    "training",
    "process",
    "best",
    "model",
    "best",
    "model",
    "decided",
    "criteria",
    "basically",
    "works",
    "usually",
    "taking",
    "consider",
    "taking",
    "considering",
    "way",
    "information",
    "much",
    "information",
    "taking",
    "much",
    "data",
    "taking",
    "much",
    "everything",
    "right",
    "training",
    "process",
    "many",
    "many",
    "different",
    "things",
    "take",
    "last",
    "model",
    "summarizing",
    "way",
    "information",
    "way",
    "see",
    "usually",
    "take",
    "last",
    "model",
    "usually",
    "take",
    "pretty",
    "much",
    "order",
    "show",
    "validation",
    "validating",
    "model",
    "looks",
    "like",
    "let",
    "move",
    "prediction",
    "let",
    "see",
    "use",
    "model",
    "order",
    "make",
    "inferences",
    "order",
    "make",
    "predictions",
    "let",
    "see",
    "let",
    "go",
    "pycharm",
    "let",
    "go",
    "pycharm",
    "project",
    "today",
    "tutorial",
    "python",
    "script",
    "created",
    "order",
    "predictions",
    "python",
    "file",
    "called",
    "going",
    "going",
    "start",
    "importing",
    "ultralytics",
    "import",
    "yolo",
    "going",
    "define",
    "model",
    "path",
    "model",
    "going",
    "use",
    "case",
    "let",
    "use",
    "results",
    "directory",
    "going",
    "specify",
    "something",
    "like",
    "let",
    "define",
    "image",
    "path",
    "let",
    "define",
    "image",
    "going",
    "use",
    "order",
    "get",
    "inferences",
    "image",
    "located",
    "validation",
    "set",
    "going",
    "choose",
    "random",
    "image",
    "something",
    "like",
    "one",
    "going",
    "copy",
    "paste",
    "going",
    "paste",
    "image",
    "going",
    "use",
    "order",
    "test",
    "model",
    "order",
    "make",
    "predictions",
    "going",
    "import",
    "cv2",
    "well",
    "going",
    "open",
    "going",
    "read",
    "image",
    "going",
    "get",
    "image",
    "shape",
    "something",
    "like",
    "image",
    "okay",
    "thing",
    "need",
    "get",
    "model",
    "something",
    "like",
    "yolo",
    "model",
    "path",
    "okay",
    "going",
    "get",
    "results",
    "calling",
    "model",
    "image",
    "right",
    "need",
    "order",
    "get",
    "results",
    "order",
    "get",
    "inferences",
    "let",
    "something",
    "else",
    "going",
    "iterate",
    "result",
    "results",
    "let",
    "take",
    "look",
    "mask",
    "let",
    "take",
    "look",
    "prediction",
    "going",
    "iterate",
    "like",
    "j",
    "mask",
    "result",
    "dot",
    "masks",
    "dot",
    "data",
    "going",
    "say",
    "something",
    "like",
    "mask",
    "dot",
    "numpy",
    "times",
    "255",
    "mask",
    "going",
    "resize",
    "size",
    "image",
    "going",
    "input",
    "mask",
    "mistaking",
    "order",
    "one",
    "w",
    "h",
    "way",
    "works",
    "need",
    "order",
    "get",
    "prediction",
    "order",
    "resize",
    "prediction",
    "back",
    "size",
    "original",
    "image",
    "goes",
    "thing",
    "need",
    "call",
    "cv2",
    "imwrite",
    "going",
    "save",
    "going",
    "save",
    "name",
    "something",
    "like",
    "let",
    "call",
    "output",
    "test",
    "really",
    "need",
    "go",
    "crazy",
    "name",
    "let",
    "call",
    "mask",
    "pretty",
    "much",
    "pretty",
    "much",
    "let",
    "see",
    "happens",
    "going",
    "press",
    "play",
    "let",
    "see",
    "everything",
    "okay",
    "error",
    "okay",
    "get",
    "error",
    "yeah",
    "need",
    "enumerate",
    "forgot",
    "enumerate",
    "using",
    "j",
    "actually",
    "could",
    "iterate",
    "mask",
    "let",
    "like",
    "okay",
    "everything",
    "ran",
    "smoothly",
    "everything",
    "okay",
    "get",
    "error",
    "go",
    "back",
    "folder",
    "directory",
    "see",
    "output",
    "output",
    "got",
    "order",
    "make",
    "absolutely",
    "100",
    "sure",
    "everything",
    "okay",
    "good",
    "mask",
    "good",
    "prediction",
    "going",
    "make",
    "overlay",
    "excited",
    "know",
    "tell",
    "excited",
    "going",
    "take",
    "image",
    "going",
    "back",
    "going",
    "take",
    "original",
    "image",
    "going",
    "overlay",
    "raise",
    "top",
    "going",
    "align",
    "two",
    "images",
    "together",
    "let",
    "make",
    "transparency",
    "let",
    "see",
    "happens",
    "see",
    "may",
    "get",
    "like",
    "100",
    "perfect",
    "mask",
    "pretty",
    "well",
    "like",
    "good",
    "mask",
    "especially",
    "considering",
    "errors",
    "detected",
    "data",
    "amazing",
    "good",
    "detection",
    "good",
    "result",
    "going",
    "tutorial",
    "exactly",
    "train",
    "semantic",
    "segmentation",
    "model",
    "using",
    "yolo",
    "v8",
    "entire",
    "process",
    "annotate",
    "data",
    "train",
    "model",
    "validate",
    "model",
    "make",
    "predictions",
    "going",
    "today",
    "exactly",
    "able",
    "today",
    "tutorial",
    "video",
    "going",
    "work",
    "pose",
    "detection",
    "using",
    "yolo",
    "v8",
    "going",
    "show",
    "entire",
    "process",
    "annotate",
    "custom",
    "data",
    "free",
    "using",
    "computer",
    "vision",
    "annotation",
    "tool",
    "prepare",
    "data",
    "file",
    "system",
    "training",
    "pose",
    "detector",
    "training",
    "local",
    "computer",
    "also",
    "google",
    "collab",
    "super",
    "comprehensive",
    "evaluation",
    "model",
    "trained",
    "much",
    "complex",
    "problem",
    "previous",
    "tutorials",
    "showed",
    "train",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "object",
    "detector",
    "image",
    "segmentation",
    "model",
    "would",
    "say",
    "today",
    "model",
    "keypoint",
    "detector",
    "much",
    "complex",
    "everything",
    "going",
    "amazing",
    "tutorial",
    "name",
    "felipe",
    "welcome",
    "channel",
    "let",
    "get",
    "started",
    "let",
    "show",
    "data",
    "going",
    "use",
    "tutorial",
    "going",
    "use",
    "awa",
    "pose",
    "dataset",
    "let",
    "show",
    "exactly",
    "data",
    "looks",
    "like",
    "see",
    "pictures",
    "many",
    "different",
    "animals",
    "currently",
    "looking",
    "antelopes",
    "pictures",
    "many",
    "different",
    "antelopes",
    "scroll",
    "directory",
    "going",
    "see",
    "also",
    "animals",
    "example",
    "bobcat",
    "sort",
    "feline",
    "sort",
    "cat",
    "see",
    "many",
    "different",
    "pictures",
    "animal",
    "scroll",
    "little",
    "going",
    "see",
    "also",
    "buffaloes",
    "also",
    "pictures",
    "buffaloes",
    "continue",
    "scrolling",
    "going",
    "see",
    "pictures",
    "animals",
    "example",
    "chihuahua",
    "get",
    "idea",
    "right",
    "pictures",
    "many",
    "many",
    "many",
    "different",
    "animals",
    "animals",
    "quadrupeds",
    "quadrupeds",
    "keypoint",
    "detection",
    "dataset",
    "let",
    "show",
    "key",
    "points",
    "going",
    "detecting",
    "one",
    "animals",
    "see",
    "many",
    "many",
    "different",
    "key",
    "points",
    "39",
    "key",
    "points",
    "total",
    "lot",
    "detecting",
    "many",
    "different",
    "parts",
    "example",
    "nose",
    "eyes",
    "jaw",
    "tail",
    "legs",
    "also",
    "ears",
    "horns",
    "whatever",
    "called",
    "something",
    "like",
    "antlers",
    "matter",
    "detecting",
    "many",
    "many",
    "different",
    "parts",
    "quadrupeds",
    "exactly",
    "data",
    "going",
    "using",
    "today",
    "thought",
    "like",
    "cool",
    "dataset",
    "use",
    "pose",
    "detection",
    "let",
    "continue",
    "going",
    "show",
    "entire",
    "process",
    "training",
    "pose",
    "detector",
    "using",
    "yolo",
    "v8",
    "custom",
    "data",
    "case",
    "data",
    "going",
    "use",
    "tutorial",
    "already",
    "annotated",
    "right",
    "already",
    "annotations",
    "data",
    "training",
    "pose",
    "detector",
    "custom",
    "data",
    "likely",
    "need",
    "annotate",
    "data",
    "going",
    "show",
    "going",
    "show",
    "entire",
    "annotation",
    "process",
    "using",
    "cvat",
    "popular",
    "awesome",
    "annotation",
    "tool",
    "computer",
    "vision",
    "let",
    "show",
    "going",
    "cvat",
    "website",
    "going",
    "click",
    "says",
    "start",
    "using",
    "cvat",
    "going",
    "show",
    "create",
    "project",
    "create",
    "task",
    "annotation",
    "going",
    "project",
    "going",
    "click",
    "plus",
    "button",
    "going",
    "click",
    "create",
    "new",
    "project",
    "going",
    "key",
    "point",
    "detection",
    "going",
    "quadruped",
    "key",
    "point",
    "detection",
    "exactly",
    "going",
    "add",
    "label",
    "going",
    "add",
    "quadruped",
    "continue",
    "pretty",
    "much",
    "submit",
    "open",
    "going",
    "add",
    "absolutely",
    "labels",
    "custom",
    "data",
    "case",
    "one",
    "label",
    "quadruped",
    "let",
    "continue",
    "going",
    "create",
    "task",
    "create",
    "new",
    "task",
    "name",
    "task",
    "something",
    "like",
    "quadruped",
    "key",
    "point",
    "detection",
    "task",
    "zero",
    "zero",
    "one",
    "going",
    "add",
    "image",
    "going",
    "going",
    "show",
    "annotate",
    "data",
    "one",
    "image",
    "going",
    "select",
    "first",
    "one",
    "going",
    "click",
    "submit",
    "continue",
    "wait",
    "couple",
    "minutes",
    "data",
    "uploaded",
    "server",
    "everything",
    "completed",
    "need",
    "go",
    "tasks",
    "project",
    "task",
    "created",
    "going",
    "click",
    "open",
    "pretty",
    "much",
    "going",
    "click",
    "going",
    "open",
    "task",
    "need",
    "start",
    "annotation",
    "process",
    "need",
    "click",
    "says",
    "draw",
    "new",
    "points",
    "need",
    "select",
    "number",
    "points",
    "going",
    "annotate",
    "case",
    "going",
    "annotate",
    "39",
    "points",
    "need",
    "select",
    "many",
    "points",
    "going",
    "annotate",
    "going",
    "click",
    "shape",
    "need",
    "start",
    "annotation",
    "process",
    "something",
    "important",
    "annotating",
    "data",
    "need",
    "follow",
    "given",
    "order",
    "right",
    "annotating",
    "key",
    "points",
    "need",
    "follow",
    "given",
    "order",
    "key",
    "points",
    "show",
    "image",
    "see",
    "many",
    "many",
    "different",
    "key",
    "points",
    "location",
    "key",
    "points",
    "really",
    "information",
    "regarding",
    "order",
    "key",
    "points",
    "right",
    "important",
    "follow",
    "random",
    "order",
    "need",
    "follow",
    "given",
    "order",
    "need",
    "follow",
    "always",
    "order",
    "annotating",
    "data",
    "example",
    "order",
    "going",
    "follow",
    "tutorial",
    "see",
    "first",
    "key",
    "point",
    "going",
    "annotate",
    "nose",
    "upper",
    "jaw",
    "lower",
    "jaw",
    "mouth",
    "end",
    "right",
    "right",
    "need",
    "specify",
    "given",
    "order",
    "data",
    "going",
    "start",
    "annotation",
    "process",
    "first",
    "point",
    "nose",
    "going",
    "set",
    "next",
    "one",
    "upper",
    "jaw",
    "going",
    "something",
    "like",
    "lower",
    "jaw",
    "mouth",
    "end",
    "right",
    "right",
    "perspective",
    "animal",
    "right",
    "going",
    "mouth",
    "left",
    "really",
    "see",
    "mouth",
    "end",
    "left",
    "going",
    "say",
    "around",
    "going",
    "share",
    "comments",
    "later",
    "tutorial",
    "regarding",
    "visibility",
    "key",
    "points",
    "right",
    "let",
    "continue",
    "next",
    "one",
    "right",
    "eye",
    "right",
    "earbase",
    "right",
    "ear",
    "going",
    "continue",
    "list",
    "going",
    "resume",
    "video",
    "completed",
    "last",
    "two",
    "body",
    "middle",
    "right",
    "around",
    "body",
    "middle",
    "left",
    "around",
    "see",
    "around",
    "see",
    "39",
    "key",
    "points",
    "let",
    "show",
    "export",
    "data",
    "please",
    "remember",
    "click",
    "save",
    "otherwise",
    "always",
    "good",
    "practice",
    "click",
    "save",
    "need",
    "key",
    "points",
    "also",
    "need",
    "draw",
    "bonding",
    "box",
    "around",
    "object",
    "important",
    "going",
    "tell",
    "minutes",
    "remember",
    "need",
    "annotate",
    "key",
    "points",
    "also",
    "need",
    "draw",
    "bonding",
    "box",
    "enclosing",
    "object",
    "going",
    "click",
    "save",
    "image",
    "going",
    "annotate",
    "please",
    "remember",
    "follow",
    "exactly",
    "process",
    "images",
    "going",
    "tasks",
    "going",
    "show",
    "export",
    "data",
    "need",
    "click",
    "export",
    "task",
    "dataset",
    "need",
    "click",
    "see",
    "many",
    "many",
    "different",
    "options",
    "export",
    "data",
    "one",
    "options",
    "coco",
    "key",
    "points",
    "important",
    "exact",
    "format",
    "need",
    "data",
    "tried",
    "export",
    "data",
    "format",
    "working",
    "reason",
    "working",
    "going",
    "show",
    "cvat",
    "images",
    "click",
    "okay",
    "wait",
    "everything",
    "downloaded",
    "everything",
    "fully",
    "exported",
    "going",
    "see",
    "file",
    "zip",
    "file",
    "within",
    "file",
    "another",
    "file",
    "called",
    "let",
    "open",
    "file",
    "show",
    "looks",
    "like",
    "going",
    "see",
    "something",
    "like",
    "bottom",
    "file",
    "going",
    "see",
    "annotations",
    "images",
    "annotated",
    "annotations",
    "right",
    "exactly",
    "data",
    "going",
    "generate",
    "using",
    "cvat",
    "let",
    "show",
    "something",
    "else",
    "created",
    "python",
    "project",
    "today",
    "tutorial",
    "let",
    "show",
    "script",
    "created",
    "python",
    "project",
    "script",
    "super",
    "super",
    "super",
    "useful",
    "annotations",
    "data",
    "need",
    "convert",
    "annotations",
    "exact",
    "format",
    "need",
    "order",
    "use",
    "pose",
    "detector",
    "using",
    "yolo",
    "v8",
    "let",
    "show",
    "basically",
    "need",
    "specify",
    "two",
    "variables",
    "one",
    "location",
    "file",
    "also",
    "need",
    "specify",
    "location",
    "directory",
    "want",
    "data",
    "saved",
    "right",
    "script",
    "going",
    "parse",
    "xml",
    "file",
    "going",
    "parse",
    "file",
    "going",
    "extract",
    "annotations",
    "going",
    "save",
    "annotations",
    "exact",
    "format",
    "need",
    "order",
    "use",
    "yolo",
    "v8",
    "remember",
    "specify",
    "two",
    "paths",
    "two",
    "variables",
    "one",
    "location",
    "xml",
    "file",
    "want",
    "newly",
    "created",
    "annotations",
    "saved",
    "right",
    "want",
    "output",
    "directory",
    "set",
    "two",
    "variables",
    "thing",
    "need",
    "run",
    "script",
    "everything",
    "run",
    "super",
    "super",
    "smoothly",
    "remember",
    "script",
    "available",
    "github",
    "repository",
    "today",
    "tutorial",
    "go",
    "ahead",
    "use",
    "order",
    "convert",
    "data",
    "format",
    "need",
    "use",
    "yolo",
    "v8",
    "let",
    "continue",
    "going",
    "show",
    "need",
    "format",
    "need",
    "structure",
    "data",
    "file",
    "system",
    "complies",
    "yolov8",
    "see",
    "directory",
    "called",
    "data",
    "root",
    "directory",
    "data",
    "located",
    "need",
    "directory",
    "root",
    "directory",
    "data",
    "saved",
    "data",
    "located",
    "within",
    "root",
    "directory",
    "see",
    "two",
    "folders",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "important",
    "name",
    "two",
    "folders",
    "exactly",
    "like",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "important",
    "open",
    "one",
    "folders",
    "see",
    "two",
    "folders",
    "one",
    "called",
    "train",
    "another",
    "one",
    "called",
    "val",
    "important",
    "name",
    "directories",
    "exactly",
    "like",
    "one",
    "called",
    "train",
    "one",
    "called",
    "val",
    "within",
    "train",
    "training",
    "data",
    "training",
    "images",
    "right",
    "see",
    "images",
    "images",
    "going",
    "use",
    "training",
    "data",
    "within",
    "val",
    "exactly",
    "images",
    "going",
    "use",
    "validation",
    "data",
    "validation",
    "set",
    "right",
    "within",
    "images",
    "two",
    "directories",
    "one",
    "called",
    "train",
    "one",
    "called",
    "val",
    "within",
    "one",
    "directories",
    "one",
    "directories",
    "data",
    "data",
    "going",
    "use",
    "order",
    "train",
    "model",
    "images",
    "going",
    "use",
    "order",
    "train",
    "model",
    "also",
    "additional",
    "data",
    "labels",
    "let",
    "show",
    "folder",
    "looks",
    "like",
    "see",
    "within",
    "labels",
    "also",
    "two",
    "directories",
    "also",
    "called",
    "train",
    "val",
    "important",
    "name",
    "two",
    "directories",
    "exactly",
    "like",
    "one",
    "called",
    "train",
    "one",
    "called",
    "val",
    "open",
    "train",
    "directory",
    "see",
    "many",
    "many",
    "many",
    "txt",
    "files",
    "basically",
    "labels",
    "training",
    "data",
    "training",
    "images",
    "go",
    "back",
    "images",
    "train",
    "see",
    "absolutely",
    "every",
    "single",
    "one",
    "images",
    "annotation",
    "file",
    "right",
    "absolutely",
    "every",
    "single",
    "one",
    "images",
    "going",
    "txt",
    "file",
    "folder",
    "let",
    "show",
    "directory",
    "val",
    "exactly",
    "exactly",
    "validation",
    "data",
    "validation",
    "images",
    "right",
    "go",
    "back",
    "see",
    "root",
    "directory",
    "images",
    "labels",
    "within",
    "images",
    "two",
    "directories",
    "train",
    "val",
    "within",
    "one",
    "directories",
    "images",
    "go",
    "labels",
    "also",
    "two",
    "directories",
    "train",
    "val",
    "within",
    "one",
    "directories",
    "labels",
    "exactly",
    "need",
    "structure",
    "file",
    "system",
    "let",
    "show",
    "one",
    "annotations",
    "files",
    "one",
    "labels",
    "files",
    "inside",
    "let",
    "show",
    "look",
    "like",
    "random",
    "annotations",
    "file",
    "random",
    "txt",
    "file",
    "exactly",
    "need",
    "put",
    "data",
    "inside",
    "files",
    "annotations",
    "specified",
    "coco",
    "key",
    "point",
    "format",
    "popular",
    "format",
    "pose",
    "detection",
    "let",
    "show",
    "something",
    "going",
    "something",
    "obviously",
    "going",
    "save",
    "changes",
    "going",
    "much",
    "better",
    "order",
    "show",
    "annotations",
    "format",
    "works",
    "right",
    "looks",
    "like",
    "basically",
    "see",
    "first",
    "number",
    "zero",
    "class",
    "id",
    "case",
    "one",
    "class",
    "quadrupled",
    "case",
    "number",
    "always",
    "zero",
    "making",
    "project",
    "many",
    "many",
    "different",
    "classes",
    "please",
    "remember",
    "number",
    "class",
    "id",
    "different",
    "classes",
    "different",
    "numbers",
    "next",
    "four",
    "numbers",
    "bounding",
    "box",
    "object",
    "right",
    "remember",
    "cvat",
    "annotating",
    "data",
    "showed",
    "need",
    "annotate",
    "key",
    "points",
    "also",
    "need",
    "annotate",
    "bounding",
    "box",
    "right",
    "annotated",
    "bounding",
    "box",
    "four",
    "elements",
    "four",
    "elements",
    "come",
    "class",
    "id",
    "bounding",
    "box",
    "right",
    "bounding",
    "box",
    "specified",
    "yolo",
    "format",
    "x",
    "position",
    "center",
    "bonding",
    "box",
    "width",
    "height",
    "bounding",
    "box",
    "important",
    "number",
    "two",
    "numbers",
    "x",
    "position",
    "center",
    "bounding",
    "box",
    "width",
    "height",
    "numbers",
    "let",
    "show",
    "see",
    "two",
    "numbers",
    "float",
    "number",
    "2",
    "exactly",
    "two",
    "numbers",
    "another",
    "2",
    "two",
    "numbers",
    "another",
    "2",
    "three",
    "zeros",
    "right",
    "looks",
    "like",
    "strange",
    "let",
    "go",
    "back",
    "browser",
    "want",
    "show",
    "website",
    "going",
    "see",
    "exactly",
    "format",
    "works",
    "go",
    "back",
    "key",
    "point",
    "detection",
    "see",
    "explanation",
    "format",
    "works",
    "read",
    "something",
    "see",
    "absolutely",
    "every",
    "single",
    "key",
    "point",
    "specified",
    "x",
    "visibility",
    "flag",
    "v",
    "means",
    "absolutely",
    "every",
    "single",
    "key",
    "point",
    "going",
    "three",
    "values",
    "going",
    "x",
    "position",
    "given",
    "key",
    "point",
    "also",
    "going",
    "another",
    "value",
    "v",
    "visibility",
    "right",
    "remember",
    "going",
    "talk",
    "visibility",
    "later",
    "tutorial",
    "later",
    "tutorial",
    "see",
    "v",
    "three",
    "possible",
    "values",
    "v",
    "could",
    "zero",
    "means",
    "key",
    "point",
    "labeled",
    "case",
    "x",
    "going",
    "0",
    "v",
    "equal",
    "1",
    "means",
    "key",
    "point",
    "labeled",
    "visible",
    "v",
    "could",
    "2",
    "means",
    "key",
    "point",
    "labeled",
    "also",
    "visible",
    "go",
    "back",
    "file",
    "annotations",
    "see",
    "start",
    "two",
    "numbers",
    "2",
    "means",
    "key",
    "point",
    "annotated",
    "labeled",
    "also",
    "visible",
    "continue",
    "see",
    "two",
    "numbers",
    "another",
    "two",
    "means",
    "key",
    "point",
    "also",
    "visible",
    "continue",
    "see",
    "exactly",
    "two",
    "numbers",
    "two",
    "continue",
    "see",
    "three",
    "zeros",
    "situation",
    "right",
    "v",
    "equals",
    "zero",
    "also",
    "x",
    "equal",
    "zero",
    "means",
    "key",
    "point",
    "labeled",
    "image",
    "right",
    "long",
    "story",
    "short",
    "bounding",
    "box",
    "numbers",
    "key",
    "points",
    "two",
    "values",
    "x",
    "position",
    "third",
    "value",
    "visibility",
    "given",
    "key",
    "point",
    "one",
    "possible",
    "formats",
    "could",
    "format",
    "data",
    "going",
    "work",
    "fine",
    "yolo",
    "v8",
    "also",
    "supports",
    "key",
    "point",
    "annotation",
    "two",
    "values",
    "means",
    "visibility",
    "information",
    "key",
    "points",
    "matter",
    "yolo",
    "v8",
    "also",
    "supports",
    "input",
    "key",
    "points",
    "x",
    "coordinates",
    "long",
    "story",
    "short",
    "first",
    "number",
    "class",
    "id",
    "four",
    "numbers",
    "bounding",
    "box",
    "numbers",
    "key",
    "points",
    "specify",
    "key",
    "points",
    "three",
    "coordinates",
    "every",
    "key",
    "point",
    "means",
    "x",
    "also",
    "visibility",
    "key",
    "point",
    "specify",
    "key",
    "points",
    "two",
    "coordinates",
    "means",
    "x",
    "coordinate",
    "given",
    "key",
    "point",
    "way",
    "need",
    "label",
    "data",
    "way",
    "need",
    "structure",
    "annotations",
    "please",
    "remember",
    "way",
    "otherwise",
    "going",
    "work",
    "going",
    "press",
    "ctrl",
    "z",
    "obviously",
    "going",
    "save",
    "changes",
    "pretty",
    "much",
    "format",
    "data",
    "format",
    "file",
    "system",
    "put",
    "data",
    "exact",
    "format",
    "need",
    "order",
    "train",
    "pose",
    "detector",
    "using",
    "yolov8",
    "let",
    "go",
    "back",
    "pycharm",
    "let",
    "go",
    "back",
    "pycharm",
    "project",
    "created",
    "today",
    "tutorial",
    "first",
    "thing",
    "need",
    "want",
    "train",
    "pose",
    "detector",
    "using",
    "yolo",
    "v8",
    "install",
    "project",
    "requirements",
    "basically",
    "ultralytics",
    "please",
    "remember",
    "install",
    "package",
    "starting",
    "training",
    "otherwise",
    "able",
    "train",
    "pose",
    "detector",
    "using",
    "yolo",
    "v8",
    "installed",
    "ultralytics",
    "let",
    "go",
    "back",
    "file",
    "created",
    "going",
    "show",
    "exactly",
    "need",
    "code",
    "file",
    "order",
    "training",
    "order",
    "let",
    "go",
    "back",
    "ultralytics",
    "website",
    "let",
    "go",
    "pose",
    "page",
    "let",
    "scroll",
    "section",
    "thing",
    "going",
    "going",
    "copy",
    "paste",
    "line",
    "going",
    "copy",
    "paste",
    "line",
    "right",
    "basically",
    "need",
    "order",
    "train",
    "model",
    "obviously",
    "need",
    "import",
    "ultralytics",
    "import",
    "yolo",
    "pretty",
    "much",
    "sentence",
    "leave",
    "leave",
    "default",
    "value",
    "one",
    "going",
    "make",
    "couple",
    "changes",
    "going",
    "change",
    "number",
    "epochs",
    "going",
    "train",
    "one",
    "epoch",
    "also",
    "going",
    "change",
    "location",
    "configuration",
    "file",
    "going",
    "use",
    "file",
    "going",
    "show",
    "looks",
    "like",
    "see",
    "configuration",
    "file",
    "going",
    "use",
    "tutorial",
    "three",
    "sections",
    "one",
    "data",
    "key",
    "points",
    "classes",
    "let",
    "go",
    "data",
    "section",
    "first",
    "going",
    "specify",
    "locations",
    "data",
    "images",
    "labels",
    "basically",
    "need",
    "specify",
    "root",
    "directory",
    "directory",
    "containing",
    "data",
    "case",
    "one",
    "remember",
    "root",
    "directory",
    "directory",
    "contains",
    "images",
    "labels",
    "folders",
    "need",
    "specify",
    "location",
    "training",
    "images",
    "validation",
    "images",
    "made",
    "everything",
    "show",
    "tutorial",
    "showed",
    "minutes",
    "ago",
    "leave",
    "two",
    "lines",
    "values",
    "right",
    "leave",
    "everything",
    "everything",
    "work",
    "fine",
    "thing",
    "need",
    "edit",
    "location",
    "root",
    "directory",
    "let",
    "go",
    "section",
    "key",
    "points",
    "two",
    "keywords",
    "key",
    "point",
    "shape",
    "flip",
    "index",
    "two",
    "keywords",
    "completely",
    "absolutely",
    "new",
    "us",
    "something",
    "seen",
    "previous",
    "tutorials",
    "yolo",
    "v8",
    "see",
    "case",
    "key",
    "point",
    "shape",
    "case",
    "says",
    "39",
    "39",
    "key",
    "points",
    "using",
    "x",
    "v",
    "format",
    "right",
    "using",
    "three",
    "values",
    "every",
    "single",
    "key",
    "point",
    "case",
    "3",
    "many",
    "key",
    "points",
    "data",
    "format",
    "using",
    "use",
    "using",
    "x",
    "format",
    "case",
    "need",
    "specify",
    "2",
    "using",
    "x",
    "v",
    "format",
    "case",
    "need",
    "set",
    "3",
    "key",
    "point",
    "shape",
    "let",
    "explain",
    "flip",
    "index",
    "order",
    "explain",
    "keyword",
    "means",
    "made",
    "drawing",
    "going",
    "show",
    "exactly",
    "means",
    "see",
    "random",
    "image",
    "data",
    "set",
    "actually",
    "image",
    "used",
    "order",
    "show",
    "annotation",
    "process",
    "looks",
    "like",
    "data",
    "see",
    "quadruped",
    "key",
    "points",
    "drawn",
    "top",
    "right",
    "let",
    "show",
    "happens",
    "flip",
    "image",
    "horizontally",
    "right",
    "get",
    "see",
    "exactly",
    "image",
    "thing",
    "flip",
    "horizontally",
    "flip",
    "image",
    "horizontally",
    "everything",
    "used",
    "one",
    "sides",
    "side",
    "right",
    "everything",
    "used",
    "right",
    "side",
    "left",
    "side",
    "way",
    "around",
    "everything",
    "used",
    "left",
    "side",
    "right",
    "side",
    "happens",
    "flipping",
    "image",
    "horizontally",
    "remember",
    "many",
    "many",
    "different",
    "key",
    "points",
    "many",
    "key",
    "points",
    "related",
    "one",
    "sides",
    "example",
    "key",
    "point",
    "right",
    "eye",
    "also",
    "key",
    "points",
    "right",
    "ear",
    "key",
    "points",
    "right",
    "legs",
    "situation",
    "left",
    "eye",
    "left",
    "ear",
    "left",
    "legs",
    "right",
    "many",
    "key",
    "points",
    "related",
    "one",
    "sides",
    "flip",
    "image",
    "horizontally",
    "something",
    "key",
    "points",
    "related",
    "one",
    "sides",
    "right",
    "training",
    "model",
    "using",
    "yolov8",
    "training",
    "type",
    "model",
    "one",
    "steps",
    "one",
    "stages",
    "process",
    "training",
    "process",
    "something",
    "called",
    "data",
    "augmentation",
    "data",
    "augmentation",
    "means",
    "taking",
    "data",
    "different",
    "transformations",
    "data",
    "one",
    "transformations",
    "related",
    "flipping",
    "image",
    "right",
    "going",
    "flipping",
    "images",
    "random",
    "every",
    "time",
    "going",
    "horizontal",
    "flip",
    "going",
    "situation",
    "like",
    "let",
    "go",
    "back",
    "list",
    "list",
    "different",
    "key",
    "points",
    "data",
    "set",
    "right",
    "remember",
    "already",
    "showed",
    "list",
    "annotating",
    "image",
    "remember",
    "start",
    "nose",
    "upper",
    "jaw",
    "lower",
    "jaw",
    "see",
    "key",
    "points",
    "related",
    "example",
    "case",
    "right",
    "side",
    "related",
    "left",
    "side",
    "many",
    "key",
    "points",
    "related",
    "right",
    "side",
    "many",
    "key",
    "points",
    "related",
    "left",
    "side",
    "key",
    "points",
    "related",
    "sides",
    "example",
    "neck",
    "base",
    "neck",
    "end",
    "throat",
    "back",
    "generic",
    "key",
    "points",
    "related",
    "sides",
    "need",
    "something",
    "key",
    "points",
    "related",
    "one",
    "sides",
    "example",
    "two",
    "right",
    "get",
    "idea",
    "exactly",
    "need",
    "exactly",
    "flip",
    "index",
    "keyword",
    "right",
    "exactly",
    "idea",
    "intuition",
    "behind",
    "flip",
    "index",
    "let",
    "go",
    "list",
    "see",
    "first",
    "element",
    "nose",
    "think",
    "nose",
    "right",
    "middle",
    "nothing",
    "going",
    "happen",
    "flip",
    "image",
    "right",
    "nose",
    "continue",
    "nose",
    "remain",
    "nose",
    "next",
    "element",
    "upper",
    "jaw",
    "exactly",
    "nothing",
    "happen",
    "upper",
    "jaw",
    "remain",
    "upper",
    "jaw",
    "flip",
    "image",
    "horizontally",
    "happen",
    "lower",
    "jaw",
    "get",
    "element",
    "mouth",
    "end",
    "right",
    "issue",
    "mouth",
    "end",
    "right",
    "flip",
    "image",
    "horizontally",
    "mouth",
    "end",
    "left",
    "next",
    "element",
    "mouth",
    "end",
    "left",
    "flip",
    "image",
    "horizontally",
    "mouth",
    "end",
    "right",
    "get",
    "idea",
    "two",
    "values",
    "two",
    "key",
    "points",
    "flipped",
    "flip",
    "image",
    "right",
    "let",
    "take",
    "look",
    "list",
    "value",
    "flip",
    "index",
    "see",
    "first",
    "element",
    "zero",
    "one",
    "two",
    "four",
    "three",
    "right",
    "flipping",
    "two",
    "values",
    "right",
    "instead",
    "3",
    "4",
    "like",
    "natural",
    "order",
    "4",
    "3",
    "flipping",
    "two",
    "values",
    "exactly",
    "indexes",
    "two",
    "key",
    "points",
    "key",
    "point",
    "order",
    "long",
    "story",
    "short",
    "thing",
    "need",
    "order",
    "fix",
    "issue",
    "flipping",
    "images",
    "horizontally",
    "thing",
    "need",
    "going",
    "key",
    "points",
    "key",
    "points",
    "related",
    "right",
    "side",
    "need",
    "flip",
    "order",
    "make",
    "left",
    "side",
    "right",
    "need",
    "flip",
    "right",
    "left",
    "side",
    "thing",
    "need",
    "need",
    "specify",
    "list",
    "flipping",
    "done",
    "please",
    "super",
    "super",
    "careful",
    "list",
    "remember",
    "means",
    "indexes",
    "flipped",
    "image",
    "flipped",
    "horizontally",
    "let",
    "move",
    "section",
    "names",
    "objects",
    "case",
    "one",
    "object",
    "quadrupled",
    "case",
    "simple",
    "please",
    "remember",
    "specify",
    "names",
    "class",
    "ids",
    "absolutely",
    "names",
    "case",
    "one",
    "class",
    "id",
    "zero",
    "means",
    "quadrupled",
    "pretty",
    "much",
    "let",
    "go",
    "back",
    "let",
    "continue",
    "specified",
    "configuration",
    "file",
    "specified",
    "everything",
    "thing",
    "need",
    "execute",
    "script",
    "easy",
    "train",
    "model",
    "going",
    "stop",
    "training",
    "otherwise",
    "going",
    "take",
    "lot",
    "time",
    "train",
    "model",
    "locally",
    "going",
    "take",
    "lot",
    "time",
    "tests",
    "already",
    "yeah",
    "going",
    "take",
    "forever",
    "locally",
    "exactly",
    "process",
    "follow",
    "want",
    "train",
    "model",
    "local",
    "environment",
    "mentioned",
    "also",
    "going",
    "show",
    "train",
    "google",
    "collab",
    "let",
    "go",
    "browser",
    "let",
    "see",
    "exactly",
    "training",
    "google",
    "collab",
    "first",
    "thing",
    "need",
    "going",
    "google",
    "drive",
    "need",
    "upload",
    "absolutely",
    "data",
    "obviously",
    "otherwise",
    "able",
    "train",
    "model",
    "google",
    "drive",
    "also",
    "need",
    "upload",
    "file",
    "everything",
    "exactly",
    "file",
    "showed",
    "local",
    "computer",
    "need",
    "edit",
    "field",
    "path",
    "right",
    "see",
    "path",
    "need",
    "edit",
    "path",
    "data",
    "google",
    "drive",
    "important",
    "otherwise",
    "nothing",
    "going",
    "work",
    "please",
    "remember",
    "need",
    "edit",
    "path",
    "going",
    "show",
    "exactly",
    "know",
    "location",
    "data",
    "google",
    "drive",
    "let",
    "go",
    "back",
    "google",
    "colab",
    "google",
    "colab",
    "created",
    "tutorial",
    "training",
    "obviously",
    "able",
    "find",
    "notebook",
    "github",
    "repository",
    "today",
    "tutorial",
    "follow",
    "along",
    "see",
    "cells",
    "thing",
    "going",
    "execute",
    "cells",
    "one",
    "one",
    "going",
    "start",
    "first",
    "one",
    "connecting",
    "google",
    "colab",
    "environment",
    "google",
    "drive",
    "thing",
    "select",
    "account",
    "scroll",
    "way",
    "click",
    "allow",
    "basically",
    "need",
    "order",
    "connect",
    "google",
    "collab",
    "google",
    "drive",
    "way",
    "google",
    "collab",
    "able",
    "access",
    "data",
    "google",
    "drive",
    "wait",
    "seconds",
    "pretty",
    "much",
    "see",
    "everything",
    "mounted",
    "content",
    "gdrive",
    "next",
    "step",
    "install",
    "ultralytics",
    "right",
    "remember",
    "going",
    "use",
    "ultralytics",
    "python",
    "package",
    "need",
    "use",
    "order",
    "use",
    "yolo",
    "v8",
    "thing",
    "need",
    "execute",
    "cell",
    "everything",
    "completed",
    "order",
    "continue",
    "next",
    "two",
    "cells",
    "need",
    "know",
    "data",
    "located",
    "google",
    "drive",
    "thing",
    "going",
    "execute",
    "cell",
    "going",
    "list",
    "absolutely",
    "files",
    "google",
    "drive",
    "root",
    "directory",
    "right",
    "see",
    "many",
    "many",
    "many",
    "files",
    "thing",
    "would",
    "need",
    "find",
    "data",
    "located",
    "case",
    "located",
    "folder",
    "ls",
    "content",
    "folder",
    "thing",
    "need",
    "locate",
    "directory",
    "right",
    "content",
    "directory",
    "data",
    "located",
    "thing",
    "need",
    "something",
    "like",
    "content",
    "data",
    "directory",
    "contains",
    "two",
    "folders",
    "images",
    "labels",
    "know",
    "data",
    "located",
    "google",
    "drive",
    "copy",
    "paste",
    "path",
    "config",
    "file",
    "right",
    "know",
    "exactly",
    "data",
    "located",
    "come",
    "edit",
    "field",
    "put",
    "wherever",
    "data",
    "located",
    "need",
    "specify",
    "location",
    "file",
    "set",
    "location",
    "set",
    "thing",
    "need",
    "click",
    "enter",
    "right",
    "need",
    "execute",
    "cell",
    "going",
    "pretty",
    "much",
    "everything",
    "executed",
    "going",
    "take",
    "time",
    "first",
    "thing",
    "going",
    "download",
    "weights",
    "google",
    "collab",
    "environment",
    "pretty",
    "much",
    "going",
    "get",
    "data",
    "going",
    "training",
    "okay",
    "training",
    "process",
    "completed",
    "see",
    "results",
    "saved",
    "run",
    "pose",
    "train4",
    "going",
    "show",
    "execute",
    "cell",
    "copy",
    "entire",
    "content",
    "runs",
    "directory",
    "google",
    "drive",
    "right",
    "remember",
    "idea",
    "training",
    "process",
    "download",
    "results",
    "download",
    "weights",
    "download",
    "entire",
    "results",
    "saved",
    "way",
    "one",
    "ways",
    "would",
    "say",
    "easiest",
    "way",
    "copy",
    "everything",
    "google",
    "drive",
    "download",
    "everything",
    "google",
    "drive",
    "simplest",
    "way",
    "please",
    "remember",
    "edit",
    "path",
    "path",
    "want",
    "everything",
    "copied",
    "execute",
    "cell",
    "let",
    "show",
    "go",
    "back",
    "google",
    "drive",
    "see",
    "runs",
    "directory",
    "generated",
    "within",
    "directory",
    "train4",
    "result",
    "training",
    "process",
    "executed",
    "everything",
    "seems",
    "okay",
    "need",
    "download",
    "directory",
    "local",
    "computer",
    "remember",
    "dummy",
    "training",
    "training",
    "one",
    "epoch",
    "obviously",
    "need",
    "like",
    "deeper",
    "training",
    "really",
    "want",
    "train",
    "pose",
    "detector",
    "data",
    "one",
    "epoch",
    "unlikely",
    "sufficient",
    "need",
    "like",
    "deeper",
    "training",
    "case",
    "already",
    "trained",
    "model",
    "data",
    "100",
    "epochs",
    "right",
    "starting",
    "tutorial",
    "everything",
    "already",
    "trained",
    "analyze",
    "results",
    "let",
    "move",
    "local",
    "computer",
    "show",
    "exactly",
    "validate",
    "model",
    "trained",
    "using",
    "yolo",
    "v8",
    "see",
    "many",
    "many",
    "different",
    "plots",
    "many",
    "different",
    "functions",
    "plotting",
    "lot",
    "information",
    "going",
    "focus",
    "loss",
    "function",
    "specifically",
    "going",
    "focus",
    "loss",
    "loss",
    "function",
    "related",
    "pose",
    "going",
    "focus",
    "pose",
    "loss",
    "related",
    "training",
    "set",
    "pose",
    "loss",
    "validation",
    "set",
    "look",
    "training",
    "set",
    "see",
    "loss",
    "going",
    "going",
    "would",
    "say",
    "going",
    "continue",
    "going",
    "even",
    "epochs",
    "right",
    "see",
    "trend",
    "going",
    "going",
    "keep",
    "going",
    "iterations",
    "epochs",
    "reached",
    "plateau",
    "would",
    "say",
    "far",
    "away",
    "plateau",
    "right",
    "good",
    "sign",
    "means",
    "training",
    "process",
    "going",
    "super",
    "well",
    "means",
    "model",
    "extra",
    "capacity",
    "capacity",
    "could",
    "continue",
    "training",
    "model",
    "continue",
    "learning",
    "data",
    "take",
    "looking",
    "pose",
    "loss",
    "training",
    "set",
    "look",
    "exactly",
    "function",
    "validation",
    "set",
    "see",
    "going",
    "good",
    "thing",
    "impression",
    "starting",
    "something",
    "like",
    "plateau",
    "right",
    "clear",
    "happening",
    "right",
    "end",
    "training",
    "process",
    "see",
    "somehow",
    "seems",
    "like",
    "going",
    "plateau",
    "right",
    "least",
    "see",
    "going",
    "absolutely",
    "100",
    "clear",
    "unclear",
    "happen",
    "one",
    "would",
    "happened",
    "would",
    "trained",
    "model",
    "epochs",
    "seems",
    "may",
    "reached",
    "plateau",
    "something",
    "need",
    "keep",
    "mind",
    "validation",
    "process",
    "let",
    "take",
    "look",
    "exactly",
    "performing",
    "images",
    "way",
    "going",
    "like",
    "going",
    "open",
    "image",
    "one",
    "batches",
    "validation",
    "set",
    "labels",
    "right",
    "predictions",
    "labels",
    "annotations",
    "going",
    "keep",
    "open",
    "going",
    "open",
    "exactly",
    "batch",
    "predictions",
    "right",
    "going",
    "good",
    "way",
    "analyze",
    "results",
    "lot",
    "images",
    "need",
    "make",
    "conclusions",
    "need",
    "take",
    "look",
    "samples",
    "need",
    "much",
    "complex",
    "problem",
    "previous",
    "tutorials",
    "showed",
    "train",
    "image",
    "classifier",
    "using",
    "yolo",
    "v8",
    "object",
    "detector",
    "image",
    "segmentation",
    "model",
    "would",
    "say",
    "today",
    "model",
    "keypoint",
    "detector",
    "much",
    "complex",
    "everything",
    "validation",
    "process",
    "complex",
    "well",
    "look",
    "images",
    "going",
    "focus",
    "one",
    "going",
    "focus",
    "dog",
    "dalmatian",
    "going",
    "show",
    "exactly",
    "going",
    "let",
    "focus",
    "animal",
    "first",
    "see",
    "basically",
    "key",
    "points",
    "basically",
    "ground",
    "truth",
    "annotations",
    "predictions",
    "see",
    "looks",
    "pretty",
    "well",
    "looks",
    "well",
    "would",
    "say",
    "look",
    "key",
    "points",
    "around",
    "face",
    "would",
    "say",
    "perfect",
    "would",
    "say",
    "good",
    "look",
    "keypoints",
    "see",
    "good",
    "well",
    "look",
    "three",
    "key",
    "points",
    "also",
    "good",
    "two",
    "key",
    "points",
    "well",
    "good",
    "look",
    "legs",
    "see",
    "something",
    "going",
    "really",
    "see",
    "two",
    "key",
    "points",
    "detecting",
    "legs",
    "look",
    "legs",
    "entirely",
    "would",
    "say",
    "something",
    "going",
    "really",
    "see",
    "think",
    "issue",
    "legs",
    "also",
    "see",
    "key",
    "point",
    "end",
    "tail",
    "detecting",
    "key",
    "point",
    "either",
    "issues",
    "issue",
    "tail",
    "issue",
    "around",
    "legs",
    "everything",
    "else",
    "would",
    "say",
    "pretty",
    "good",
    "know",
    "think",
    "think",
    "pretty",
    "pretty",
    "good",
    "one",
    "examples",
    "let",
    "show",
    "another",
    "one",
    "another",
    "batch",
    "annotations",
    "predictions",
    "let",
    "show",
    "happens",
    "rhinoceros",
    "let",
    "show",
    "happens",
    "annotations",
    "predictions",
    "see",
    "similar",
    "situation",
    "around",
    "face",
    "would",
    "say",
    "everything",
    "okay",
    "like",
    "good",
    "detection",
    "good",
    "detection",
    "three",
    "points",
    "well",
    "detected",
    "everything",
    "okay",
    "also",
    "issue",
    "around",
    "legs",
    "right",
    "detecting",
    "key",
    "points",
    "legs",
    "properly",
    "happens",
    "leg",
    "happens",
    "tail",
    "keypoint",
    "end",
    "tail",
    "everything",
    "else",
    "seems",
    "working",
    "super",
    "properly",
    "detecting",
    "key",
    "points",
    "issue",
    "around",
    "legs",
    "around",
    "tail",
    "let",
    "show",
    "examples",
    "example",
    "one",
    "see",
    "case",
    "animal",
    "different",
    "posture",
    "little",
    "challenging",
    "model",
    "see",
    "case",
    "detecting",
    "face",
    "well",
    "actually",
    "detecting",
    "eye",
    "key",
    "points",
    "around",
    "face",
    "well",
    "detected",
    "see",
    "three",
    "key",
    "points",
    "everything",
    "okay",
    "one",
    "okay",
    "one",
    "see",
    "key",
    "points",
    "also",
    "well",
    "detected",
    "issue",
    "around",
    "legs",
    "right",
    "pretty",
    "much",
    "noticed",
    "looking",
    "many",
    "examples",
    "right",
    "many",
    "situations",
    "many",
    "different",
    "situations",
    "different",
    "animals",
    "different",
    "postures",
    "different",
    "everything",
    "going",
    "notice",
    "different",
    "situations",
    "inspecting",
    "images",
    "impression",
    "model",
    "performing",
    "well",
    "may",
    "issue",
    "around",
    "legs",
    "around",
    "tail",
    "impression",
    "analyzing",
    "many",
    "pictures",
    "combining",
    "information",
    "information",
    "got",
    "analyzing",
    "images",
    "keypoints",
    "detected",
    "also",
    "combining",
    "everything",
    "loss",
    "function",
    "plot",
    "regarding",
    "loss",
    "function",
    "training",
    "set",
    "validation",
    "set",
    "conclusions",
    "make",
    "deeper",
    "training",
    "train",
    "model",
    "even",
    "epochs",
    "curious",
    "see",
    "happen",
    "situation",
    "look",
    "training",
    "loss",
    "really",
    "like",
    "see",
    "think",
    "model",
    "way",
    "capacity",
    "think",
    "could",
    "train",
    "know",
    "50",
    "epochs",
    "100",
    "epochs",
    "think",
    "good",
    "situation",
    "training",
    "loss",
    "continue",
    "go",
    "continue",
    "go",
    "way",
    "right",
    "seems",
    "far",
    "away",
    "plateau",
    "look",
    "validation",
    "loss",
    "completely",
    "absolutely",
    "sure",
    "happens",
    "would",
    "order",
    "improve",
    "results",
    "order",
    "try",
    "improve",
    "results",
    "continue",
    "training",
    "epochs",
    "would",
    "see",
    "happens",
    "next",
    "would",
    "see",
    "happens",
    "loss",
    "would",
    "see",
    "happens",
    "analyzing",
    "images",
    "right",
    "would",
    "next",
    "step",
    "analyzing",
    "information",
    "good",
    "example",
    "analyze",
    "model",
    "analyze",
    "data",
    "plots",
    "complex",
    "example",
    "one",
    "remember",
    "trying",
    "detect",
    "trying",
    "learn",
    "something",
    "way",
    "complex",
    "previous",
    "tutorials",
    "trying",
    "learn",
    "like",
    "bounding",
    "box",
    "mask",
    "trying",
    "learn",
    "entire",
    "structure",
    "quadruped",
    "trust",
    "way",
    "complex",
    "everything",
    "made",
    "far",
    "good",
    "example",
    "validate",
    "model",
    "problem",
    "little",
    "complex",
    "take",
    "look",
    "loss",
    "function",
    "take",
    "look",
    "going",
    "take",
    "look",
    "training",
    "set",
    "validation",
    "set",
    "also",
    "take",
    "look",
    "examples",
    "make",
    "conclusions",
    "case",
    "would",
    "train",
    "epochs",
    "also",
    "please",
    "remember",
    "always",
    "using",
    "default",
    "values",
    "training",
    "right",
    "training",
    "model",
    "using",
    "default",
    "values",
    "values",
    "specifying",
    "image",
    "size",
    "number",
    "epochs",
    "show",
    "entire",
    "configuration",
    "file",
    "using",
    "one",
    "see",
    "many",
    "many",
    "many",
    "many",
    "many",
    "many",
    "hyperparameters",
    "another",
    "next",
    "step",
    "case",
    "deeper",
    "training",
    "enough",
    "another",
    "next",
    "step",
    "would",
    "play",
    "around",
    "different",
    "hyper",
    "parameters",
    "find",
    "another",
    "combination",
    "parameters",
    "would",
    "better",
    "use",
    "case",
    "important",
    "approaching",
    "complex",
    "problem",
    "like",
    "one",
    "like",
    "one",
    "right",
    "would",
    "say",
    "realistic",
    "expect",
    "everything",
    "goes",
    "super",
    "super",
    "well",
    "first",
    "attempt",
    "using",
    "default",
    "values",
    "right",
    "would",
    "say",
    "problem",
    "trying",
    "solve",
    "much",
    "complex",
    "likely",
    "would",
    "need",
    "play",
    "around",
    "different",
    "hyper",
    "parameters",
    "would",
    "need",
    "find",
    "combination",
    "hyper",
    "parameters",
    "suits",
    "well",
    "problem",
    "project",
    "say",
    "validation",
    "process",
    "let",
    "show",
    "something",
    "else",
    "weights",
    "located",
    "within",
    "folder",
    "see",
    "another",
    "folder",
    "called",
    "weights",
    "within",
    "weights",
    "going",
    "see",
    "two",
    "files",
    "modes",
    "generated",
    "training",
    "process",
    "something",
    "already",
    "mentioned",
    "previous",
    "tutorials",
    "going",
    "say",
    "model",
    "trained",
    "end",
    "training",
    "process",
    "means",
    "best",
    "model",
    "trained",
    "entire",
    "training",
    "process",
    "two",
    "models",
    "choose",
    "one",
    "like",
    "usually",
    "taking",
    "consider",
    "much",
    "robust",
    "model",
    "one",
    "usually",
    "consider",
    "making",
    "predictions",
    "pretty",
    "much",
    "say",
    "validation",
    "validating",
    "model",
    "time",
    "make",
    "predictions",
    "let",
    "get",
    "back",
    "pycharm",
    "let",
    "show",
    "file",
    "called",
    "file",
    "going",
    "use",
    "order",
    "make",
    "predictions",
    "model",
    "trained",
    "let",
    "show",
    "going",
    "start",
    "importing",
    "ultralytics",
    "import",
    "yolo",
    "ultralytics",
    "import",
    "yolo",
    "going",
    "define",
    "model",
    "path",
    "going",
    "specify",
    "location",
    "model",
    "trained",
    "right",
    "one",
    "case",
    "location",
    "model",
    "going",
    "select",
    "also",
    "going",
    "set",
    "path",
    "image",
    "image",
    "going",
    "use",
    "order",
    "show",
    "make",
    "predictions",
    "image",
    "located",
    "samples",
    "let",
    "show",
    "super",
    "quickly",
    "image",
    "going",
    "use",
    "order",
    "show",
    "make",
    "predictions",
    "yolo",
    "v8",
    "let",
    "go",
    "samples",
    "exactly",
    "image",
    "going",
    "use",
    "see",
    "image",
    "wolf",
    "obviously",
    "quadruped",
    "going",
    "amazing",
    "image",
    "order",
    "show",
    "use",
    "model",
    "let",
    "get",
    "back",
    "pycharm",
    "let",
    "something",
    "like",
    "going",
    "define",
    "model",
    "like",
    "yolo",
    "model",
    "path",
    "going",
    "say",
    "something",
    "like",
    "results",
    "equal",
    "model",
    "image",
    "path",
    "going",
    "select",
    "first",
    "element",
    "predicting",
    "one",
    "image",
    "first",
    "element",
    "fine",
    "iterating",
    "result",
    "results",
    "something",
    "like",
    "keypoint",
    "result",
    "key",
    "points",
    "dot",
    "list",
    "thing",
    "going",
    "print",
    "keypoints",
    "make",
    "sure",
    "everything",
    "okay",
    "let",
    "see",
    "happens",
    "okay",
    "seems",
    "error",
    "think",
    "know",
    "error",
    "list",
    "goes",
    "without",
    "underscore",
    "let",
    "see",
    "okay",
    "everything",
    "seems",
    "okay",
    "going",
    "going",
    "import",
    "cv2",
    "going",
    "read",
    "image",
    "going",
    "plot",
    "keypoints",
    "top",
    "image",
    "right",
    "going",
    "good",
    "way",
    "show",
    "predict",
    "key",
    "points",
    "cv2",
    "imread",
    "image",
    "path",
    "going",
    "image",
    "going",
    "call",
    "cv2",
    "dot",
    "put",
    "text",
    "maybe",
    "good",
    "idea",
    "put",
    "text",
    "one",
    "key",
    "points",
    "put",
    "key",
    "point",
    "number",
    "top",
    "one",
    "key",
    "points",
    "going",
    "image",
    "key",
    "point",
    "number",
    "let",
    "like",
    "keep",
    "point",
    "index",
    "key",
    "point",
    "enumerate",
    "okay",
    "string",
    "key",
    "point",
    "index",
    "okay",
    "location",
    "remember",
    "key",
    "points",
    "look",
    "like",
    "three",
    "values",
    "values",
    "care",
    "moment",
    "two",
    "x",
    "position",
    "key",
    "point",
    "going",
    "something",
    "like",
    "int",
    "keypoint",
    "zero",
    "int",
    "keypoint",
    "one",
    "okay",
    "select",
    "font",
    "going",
    "set",
    "one",
    "font",
    "cursey",
    "simplex",
    "font",
    "size",
    "going",
    "set",
    "one",
    "color",
    "something",
    "right",
    "let",
    "see",
    "think",
    "closing",
    "brackets",
    "think",
    "reason",
    "one",
    "two",
    "okay",
    "let",
    "see",
    "everything",
    "okay",
    "okay",
    "color",
    "going",
    "set",
    "green",
    "something",
    "like",
    "text",
    "width",
    "going",
    "set",
    "two",
    "going",
    "let",
    "see",
    "looks",
    "like",
    "right",
    "going",
    "call",
    "cv2",
    "imshow",
    "image",
    "image",
    "cv2",
    "wait",
    "key",
    "zero",
    "okay",
    "pretty",
    "much",
    "plotting",
    "image",
    "drawing",
    "key",
    "points",
    "top",
    "image",
    "key",
    "point",
    "number",
    "key",
    "point",
    "right",
    "going",
    "easier",
    "know",
    "exactly",
    "detecting",
    "entire",
    "image",
    "result",
    "everything",
    "looks",
    "pretty",
    "well",
    "going",
    "something",
    "improve",
    "visualization",
    "going",
    "make",
    "font",
    "size",
    "equal",
    "going",
    "press",
    "play",
    "okay",
    "visualization",
    "little",
    "better",
    "see",
    "everything",
    "looks",
    "pretty",
    "pretty",
    "well",
    "right",
    "plotting",
    "key",
    "points",
    "top",
    "image",
    "exactly",
    "make",
    "predictions",
    "using",
    "yolo",
    "v8",
    "last",
    "thing",
    "going",
    "show",
    "open",
    "file",
    "class",
    "names",
    "let",
    "take",
    "look",
    "exactly",
    "detecting",
    "right",
    "see",
    "0",
    "nose",
    "upper",
    "jaw",
    "lower",
    "jaw",
    "mouth",
    "end",
    "right",
    "mouth",
    "end",
    "left",
    "right",
    "see",
    "example",
    "21",
    "somewhere",
    "around",
    "back",
    "middle",
    "makes",
    "sense",
    "37",
    "around",
    "body",
    "middle",
    "right",
    "36",
    "belly",
    "bottom",
    "everything",
    "looks",
    "pretty",
    "pretty",
    "well",
    "see",
    "still",
    "getting",
    "issues",
    "notice",
    "pictures",
    "legs",
    "well",
    "detected",
    "end",
    "tail",
    "well",
    "detected",
    "either",
    "everything",
    "else",
    "seems",
    "pretty",
    "pretty",
    "pretty",
    "well",
    "going",
    "tutorial",
    "yolo",
    "v8",
    "name",
    "felipe",
    "computer",
    "vision",
    "engineer",
    "exactly",
    "type",
    "videos",
    "type",
    "tutorials",
    "make",
    "channel",
    "enjoyed",
    "video",
    "invite",
    "click",
    "like",
    "button",
    "also",
    "invite",
    "take",
    "look",
    "two",
    "videos",
    "going",
    "today",
    "see",
    "next",
    "video",
    "music"
  ],
  "keywords": [
    "yolo",
    "v8",
    "one",
    "computer",
    "video",
    "going",
    "show",
    "object",
    "detection",
    "image",
    "segmentation",
    "pose",
    "data",
    "using",
    "entire",
    "process",
    "annotate",
    "training",
    "analyze",
    "performance",
    "model",
    "trained",
    "use",
    "make",
    "predictions",
    "tutorial",
    "let",
    "get",
    "name",
    "train",
    "detector",
    "step",
    "need",
    "order",
    "annotation",
    "tool",
    "structure",
    "exact",
    "format",
    "two",
    "different",
    "local",
    "environment",
    "also",
    "google",
    "collab",
    "super",
    "everything",
    "know",
    "set",
    "start",
    "first",
    "thing",
    "remember",
    "want",
    "type",
    "definitely",
    "algorithm",
    "case",
    "important",
    "images",
    "downloaded",
    "alpacas",
    "alpaca",
    "today",
    "see",
    "right",
    "exactly",
    "obviously",
    "could",
    "whatever",
    "take",
    "cell",
    "something",
    "available",
    "open",
    "dataset",
    "work",
    "looks",
    "like",
    "go",
    "select",
    "uh",
    "many",
    "categories",
    "annotations",
    "looking",
    "bounding",
    "box",
    "around",
    "another",
    "example",
    "category",
    "project",
    "download",
    "used",
    "give",
    "say",
    "move",
    "next",
    "continue",
    "lot",
    "maybe",
    "time",
    "already",
    "annotated",
    "objects",
    "really",
    "well",
    "cvat",
    "would",
    "pretty",
    "much",
    "absolutely",
    "related",
    "perfect",
    "better",
    "create",
    "new",
    "called",
    "working",
    "label",
    "created",
    "labels",
    "task",
    "call",
    "zero",
    "works",
    "back",
    "yeah",
    "click",
    "okay",
    "number",
    "detecting",
    "always",
    "left",
    "idea",
    "last",
    "press",
    "save",
    "good",
    "saved",
    "completely",
    "able",
    "usually",
    "done",
    "little",
    "either",
    "situation",
    "every",
    "single",
    "regarding",
    "fine",
    "may",
    "part",
    "happens",
    "way",
    "think",
    "showed",
    "wait",
    "file",
    "files",
    "four",
    "three",
    "directory",
    "names",
    "look",
    "basically",
    "information",
    "class",
    "numbers",
    "means",
    "please",
    "things",
    "directories",
    "located",
    "within",
    "paste",
    "validation",
    "validate",
    "x",
    "python",
    "command",
    "execute",
    "run",
    "colab",
    "pycharm",
    "edit",
    "copy",
    "import",
    "ultralytics",
    "install",
    "script",
    "sure",
    "simple",
    "path",
    "val",
    "list",
    "specify",
    "location",
    "root",
    "epochs",
    "epoch",
    "values",
    "given",
    "completed",
    "end",
    "results",
    "notebook",
    "drive",
    "seems",
    "taking",
    "runs",
    "otherwise",
    "100",
    "plots",
    "analyzing",
    "loss",
    "function",
    "classifier",
    "folder",
    "weights",
    "result",
    "accuracy",
    "best",
    "semantic",
    "duck",
    "mask",
    "key",
    "points",
    "legs",
    "point",
    "flip"
  ]
}