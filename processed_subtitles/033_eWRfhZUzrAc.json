{
  "text": "in this full course you will learn the\nbasics of python programming\ni'm beau carnes with freecodecamp.org\ni've previously created one of the most\npopular javascript courses on youtube\nand i've created many python tutorials\nnow i've created this complete python\ncourse for beginners you don't need any\nprevious programming experience to\nfollow along and all you need to code in\npython is a web browser in this course i\nwill teach you all the core aspects of\nthe python programming language and i\nwill simplify the more complex topics\npython is considered one of the most\npopular programming languages in the\nworld and it's only growing in\npopularity python excels in a wide\nvariety of scenarios such as shell\nscripting task automation and web\ndevelopment and it's also the language\nof choice for data analysis and machine\nlearning but it can also adapt to create\ngames and work with embedded devices\nwe're going to jump right into it so you\ncan start coding your first python\nprogram as soon as possible to get\nstarted quickly we'll use a replit which\nis an online ide that allows users to\ncode and run programs in a variety of\ndifferent languages all in a web browser\nand later i'll show you how to get\npython set up on your local operating\nsystem after the first project i'll go\ninto more detail about each of the main\nfeatures of python the section is\ncomprehensive and detailed and in the\nfinal section you will use what you've\nbeen learning to code a blackjack game\nwith me guiding you every step of the\nway throughout the course there will be\na little repetition of some of the key\npython programming concepts to make sure\nyou have a deep understanding of the\nlanguage so let's get started we're\ngoing to start by creating a simple rock\npaper scissors game and we'll start by\ngoing to replit.com replied provided a\ngrant that made this course possible and\nreplie is going to make it super easy to\nget up and running really quickly so you\ncan either sign up or log in\nand create an account i'm just going to\nuse my google account\nokay now that you're logged into replit\nyou can either just click the create\nbutton or this plus button over here to\ncreate a new replit and i'll make sure\nto create a python replit but you can\nsee you can also select all sorts of\ndifferent programming languages oh these\nare just the ones that start with the\nword python but so there's there's tons\nof different programming languages you\ncan select but in this case we are just\ngoing to use python and then i'll click\ncreate reple\nokay so let me just kind of show off\nreplica a little bit\nthis is where we're going to create our\npython code i'm going to zoom in just a\nlittle bit so we're going to write the\ncode right here and then we can see some\noutput over on the right side and then\nyou can create different files over on\nthe left side here\nand then there's some other things like\nyou can connect to version control\nand\nif you have environment variables we're\nnot even going to be discussing those in\nthis course there's a debugger you can\nconnect to a database and just some\nother things but we're mainly going to\njust be using this main.pi program to\nwrite our program and we're going to see\nthe results in the console so i'm just\ngoing to close this files window so\nit's a little bigger here\ni'm going to start off by showing you\nhow to create a variable with python so\nthis is a rock paper scissors game and\nthere's going to be a players a player\nis going to have a choice and a computer\nis going to have a choice so i'm going\nto create a variable called player\nchoice\nand i'm going to set that equal to\nrock\nso let's look at a few components about\nthis this is the variable name player\nchoice\nand you can see\nif you\nwe use an underscore that's just kind of\nthe convention for python to use an\nunderscore if you're going to have a\nspace in the variable name and we're\ngoing to assign it that's what this\nequal sign this is the assign operator\nand we're going to assign it to a string\na string is just a word or a collection\nof characters like rock and we're going\nto put quotation marks around it now we\ncould have also used a single quotes\ninstead of double quotes as long as you\nuse the same quote on each side that's\nwhat's important so we've now created a\nvariable\ncalled\nplayerchoice and assigned it to rock and\nnow we can reference this variable later\nand whenever we reference the variable\ncalled playerchoice it's going to\nthe code is going to automatically\nreplace that player choice with rock\nso this is going to be a very\ninteractive project i hope you're\nfollowing along i hope you have already\ngot replit loaded up like this now\nthroughout this project i'm going to\ntell you what the next thing to do is\nand i want you to try doing it yourself\nbefore you watch what i'm going to do so\nperiodically you'll want to pause the\nvideo\nbased on and what i say you and try to\nimplement what i say\nbefore you come back to the video and\nwatch me implement it and see if you've\nimplemented the the same way\nso i'm just going to zoom in one more\ntime and\nthis is the first thing i want you to do\nsee if you can make another variable on\nthe next line so you're going to press\nreturn or enter to go to the next line\nand this variable should be called\ncomputer choice and you should set it to\nequal\npaper\nokay so you can pause the video and see\nif you can make a variable called\ncomputer choice and set it to equal\npaper\nso here it's pretty simple here it's\ngoing to start simple but it's going to\nget harder as we go so computer choice\nequals\npaper okay so like i said it's starting\nsimple but it's going to get more\ncomplex as we go along\nif you've done that you've now written\nyour first line of python code in this\ncourse\nokay now i'm going to talk about\nfunctions\na function is a set of code which only\nruns when it is called\nso i'm going to show you how to put this\ncode into a function\nnow one thing about python is that\nindentation is very important\nso after we create a we define the name\nof a function any line of code that's\nindented the same amount is considered\nwithin that function\nso i'm going to create a new line of\ncode at the top and i'm going to call it\nget\nchoices\nokay so we define the function with def\nand get choices and i'm going to select\nall these these two lines of code at the\nsame time and just press the tab key and\nthat's going to indent all these the\nsame amount\nand you can see sometimes they'll be\nsquiggly lines and if you hover over\nsome of the squiggly lines it will tell\nyou something in this case it just says\nthe local variable called player choice\nis assigned to but never used that's not\nnecessarily bad it's just it's just\ntelling us that usually if you create a\nvariable you're going to want to use it\nlater well we are going to use it later\nwe just haven't gotten to it yet so\nsometimes the squiggly lines will\nindicate there's some sort of error in\nthe code\nusually i think it's the color red will\nindicate an error but if it's a\ndifferent color it just may mean that\nthere's something maybe not quite right\nbut\nit's not really that big of a deal so if\nyou have a variable that's assigned to\nbut never used that's not going to stop\nyour program\nbut it's just saying that it's not this\nvariable isn't really being used for\nanything yet but we will change that\nthis function i'm going to show you how\nto call a function later but we're\ncreating a function called getchoices\nthat assigns these two variables and\nit's also i'm going to put another line\nat the very end here and it's a return\nstatement\nand i'm going to return player\nchoice\nthis will indicate what's returned when\nthis function is called so later we'll\ncall this function get choices and it\nwill return\nsomething it will return the player\nchoice which is right here we'll turn in\nthis case rock that we can use somewhere\nelse in our code\nand i did just happen to put an extra\nline here\nthat's just that's optional i put a\nblank line here just to kind of\nmake things easy to kind of organize the\ncode a little bit so\ndifferent sometimes i'll just put an\nextra line between different sections of\ncode and it just makes it easier to\nidentify the different sections when\nyou're looking at the code\nfor the computer those extra lines don't\nmean anything the indentation though\ndefinitely does mean something\nso as long as every line of code is\nindented the same amount as the previous\nline of code then it's all within the\nsame function\nokay so this is what i want you to do\nsee if you can change the return\nstatement so instead of returning player\nchoice it's returning the computer\nchoice\nso that's pretty simple\nit's now returning the computer choice\nhere\nnow i'm going to create another function\ndown here this is just going to be an\nexample function just so i can\ndemonstrate something to you and then\nwe'll delete it it's not going to be\npart of our rock paper scissors game but\ni'm going to create a new function\ncalled greeting\nand then i am going to add what it's\ngoing to do oh yeah put the semicolon\nyou also know a colon so a function\nalways has to have a colon at the end of\nhow we define it so i'm going to return\na string and it's just going to say hi\nand one thing you'll notice is that\nthere's no you don't have to put any\nanything at the end of each line some\nprogramming languages such as javascript\nyou're going to put a semicolon at the\nline at the end of the line\nbut in python it doesn't matter you\ndon't put anything at the end of each\nline so now i'm going to call the\nfunction to call the function i just\ntype the name and i put the parentheses\nat the end so it's going to say so\ngreeting is now going to call it's going\nto call this function and that's going\nto return the string hi\nnow it's not going to do anything with\nthe string because our program doesn't\ndo anything with the string that's been\nreturned it's not going to go into the\nconsole or anything but let's add\nadditional code so we will\nmake this string hi go on to the console\nfirst let me create a variable that\ntakes what this greeting function\nreturns so i'm going to type in response\nequals greeting so now we set the the\nwhat greeting is being returned to this\nvariable called response and now i can\nuse the print function\nand i can print the response and this\nwill print it to the console so now i\ncan we have this green button here this\nruns the program i'll click this green\nbutton here and now we can see it's high\nso\nthis response is getting this high from\nhere and then we're printing it right\nthere okay i'm actually going to delete\nall of this\nand what i want you to try to do now is\nto call the get choices function and\nstore the response in a variable called\nchoices and then print the value of\nchoices to the console\nso you can pause and try that really\nquick and then i'm going to show you how\nokay so remember the variable is called\nchoices\nand we're going to set that equal to\nthe get choices variable now ins or the\nget choices function now instead of\ntyping out get choices you can see that\nthis code editor is actually giving us\nsuggestions on what we want to put in\nhere so i just typed in get and you can\nsee it's now saying get choices right\nhere so i can instead of typing out the\nwhole thing i can either click there or\ni can just press the tab key and it's\ngoing to fill in the rest of that\nfunction name so that's just something\nlittle that makes it easier to write a\nprogram and you don't have to type out\nevery single thing so if you've already\ncreated a function or a variable then\nthe the code editor then reply will will\nsuggest what you may want to fill in\nwhen you're typing and most other code\neditors do something similar it's called\ncode completion so\ni'm going to but i still have to add\nparentheses at the end and now i'm going\nto print\nthe choices\n[Music]\nokay so i'm gonna just click this play\nbutton to make sure it does what we're\ntrying to do yep it clicked paper\ngreat\nnow let's talk about dictionaries\ndictionaries in python are used to store\ndata values in key value pairs so let me\njust show you an example\nokay so a dictionary is going to have\nthese curly braces at the beginning and\nend and then here's a key value pair\nthere's one it's separated by a comma\nand then here's another key value pair\nso we're setting name\nwe're setting that to equal bow and\nwe're saying the color\nto equal blue so here's the key here's\nthe value here's the key\nhere's the value\nand the key or the value in a dictionary\ncan be a variable\nlike the color we could set that we\nalready created this variable here i'm\njust going to copy the word choices and\nwe can put choices and you can see now\nit's not surrounded by the quotation\nmarks so if you surrounded by quotation\nmarks it's a string but if we don't\nsurround it by quotation marks it's\ngetting the the variable here choices so\nthis would be set to\npaper because that's what choice is\ngoing to is going to equal so we're\nabout to delete this line because that\nwas just an example\nbut now before the return statement in\nthis function we're going to add a new\nline we're going to create a variable\nnamed choices and make it equal to a\ndictionary the first key should be\nplayer with a value of the player choice\nactually this variable here\nthe second key should be computer with a\nvalue of computer choice\nand then we're going to update the\nreturn statement\nto return the the choices dictionary\nnow i'm not going to keep telling you to\npause and try it yourself so just the\nrest of this time whenever i say what\nwe're going to do you'll know that after\ni get done explaining it you can pause\nit and try it yourself but that's what\nwe're going to do now\nso i'm going to create choices\nand it's going to be a dictionary and\nthen it's going to have\na player\nthat's the key and the value is going to\nbe player\nchoice and i was just able to press tab\nto fill that in and then we're going to\nhave computer\nand it's going to be\ncomputer choice\nand you can see sometimes if it goes to\nthe next line there just won't be a line\nnumber right here\nbut i can\nmove this over for now\nand then i am going to oh i forgot to\nput the equal sign that's what that red\nsquiggly line means so because the red\nmeans there is a problem in the program\nso it's not going to run correctly now\nthe orange just means that we haven't\nused choices yet which we will right now\nbecause we're going to return\nchoices\nchoices\nokay so now we don't have any squiggly\nlines because we're using every variable\nthat we created and we're returning\nchoices here\nso you may have noticed that player\nchoice\nit does not actually get set to the\nplayer's actual choice\nso let's fix that\nthe input function gets input from a\nuser and will use it to get the player's\nchoice\nso instead of having players choice\nequal rock we're going to make players\nchoice input\nenter a choice\nrock\npaper\nscissors\nokay so this is how you get input from a\nuser we use the input function and this\nis going to be something that's going to\nbe printed\nwe'll print to the console here\nand whatever the result of this input\nwill be that the the player that the\nuser entered will get stored to this\nvariable which we then can use later in\nour program\nso let's just try that out i'll click\nrun\nand\nenter\nlet me just stop and run it again\nokay enter a choice rock paper scissors\ni'll just put rock\nand now you can see the player's choice\nwe're still printing that and it's going\nto print as rock\ngreat now let's just clean up this code\na little bit we still have this here we\ndon't need that dictionary that's not\ngoing to be part of our final code\nand now we'll make it so the computer\ncan actually make a choice\nso we're going to learn about importing\nlibraries creating lists and calling\nmethods\npython libraries are a set of useful\nfunctions so you don't have to write\ncode from scratch when you import a\nlibrary to your program you get access\nto more features without writing\nadditional code\nwith basic python it's challenging to\nget your program to do something\nrandomly but it's easy to choose\nsomething randomly using the random\nlibrary\nso let me show you how we can import the\nrandom library\nimport statements are used to import\nlibraries and they're usually put at the\ntop of a program so i'm going to press\nenter a few times here to add some lines\nat the top and i'm going to do import\nrandom\nso now we are going we we've\nimported the random library\nso we're going to use that random\nlibrary soon but now let's learn about\nlists\na list in python is used to store\nmultiple items in a single variable\nlists are surrounded by brackets and\neach item is separated by a comma so\nhere's an example i could create a\nvariable called food and set it to this\nlist it's going to have three items\npizza\ncarrots\nand eggs\n[Music]\nso this is a list of strings\nand then you can also get a random item\nfrom the list\nusing we're going to use now we've\nimported random we can get a random item\nby using that that random library so i'm\ngoing to put dinner\n[Music]\nequals\nrandom dot choice\nand then i'm going to pass in the the\nlist here\nso using the random library we can call\nchoice and then we can pass in\na list and it's going to choose a random\nitem from that list and\nand set it to equal this dinner variable\nso right now the computer choice always\nequals paper but we want it to be a\nrandom choice between rock scissors and\npaper\nso before the computer choice variable\nis created we'll create a new variable\ncalled options and assign it to a list\nof the possible options rock paper\nscissors then we'll set the computer\nchoice variable to be a random choice of\none of the items in the options list\nokay i hope you already tried this now\nbut let me show you how that's going to\nwork\nwe'll create options\nand we'll set it equal to this list\nof\nrock\n[Music]\npaper scissors\nand you can see the code editor will\noften pop up these boxes with more\ninformation about what we're doing to\ngive us some some help with what we're\ntrying to do here so we're going to set\nthis computer choice to be\nrandom\ndot choice\nfood not food i was looking at the food\ndown there that's gonna be options\nthere we go\nand let's just um try running this\nprogram and seeing what happens so i'm\ngoing to put rock\nand then we see the computer chose\nscissor it should be scissors that's why\nwe're testing it out i guess i\nspelled that wrong okay so scissors with\nan s so now let me try running it again\nand you can see it shows scissors but if\nwe run it enough time it should now it's\nchoosing paper because it's choosing it\nat random\nokay\nthat's working\nokay so now let's just delete all this\ncode after the get choices function we\ndon't need to test that get choices\nfunction anymore and now\nlet's create a new function called check\nwhen\nso you shouldn't know enough how to you\nshould know enough about how to create a\nfunction\nso def\ncheck\n[Music]\nwhen\nso this is just an empty function with\nnothing inside it yet\nbut before we add oh with the\ncolon so before we add any code inside\nthe function we're going to create some\narguments\nfunction can re functions can receive\ndata when they're called the data are\ncalled arguments so when creating a\nfunction you can specify arguments\ninside the parentheses so we've been\nusing this empty parentheses but i can\nuh put in tooth i can put in things\nwithin these parentheses\nwhen this function is called we're going\nto give it two pieces of data we're\ngoing to pass two pieces of data into\nthe function the first piece of data is\ngoing to be player the second piece of\ndata is going to be computer\nso the you can basically call these\nanything you want uh these are just\nwe're creating new variables but when we\ncall these functions we'll pass in two\npieces of information that will then be\nassigned to the variable names player\nand computer that we can use inside the\nfunction\nso for now let's\nfinish off with to a for a complete\nfunction the function has to have some\ncode within the function\nso let's just add a return statement\nthat's just going to return a list\ncontaining the elements player and\ncomputer\nso this check when function shouldn't\nactually return this\nthis is just to kind of get get it\nquickly created it should actually\nreturn different things depending on the\nplayer and computer arguments\nan if statement will allow a program to\ndo different things depending on certain\nconditions\nso an if statement will first check a\ncondition and if the condition is true\nthen all the lines of code under the if\nstatement that are indented the same\namount will execute so as a quick\nexample i can say\na equals three\nb equals five\nand then we can create an if statement\nhere\nif\na is greater than\nb\nthen we will do something like print\nyes\nor we can do if a is\nless than b or we can do if we want to\ncheck if a and b are equal we can do\neq we we'll put two equal signs now this\nis very important you never want to use\none equal sign because a single equal\nsign is the assignment operator that's\nhow you assign what variables are equal\nto so if you use a single equal sign or\nlike then if i put if a single equal\nsign b without a double equal sign that\nis going to\nset a to equal b which is not what we\nwant the double equal sign\nis going to check if a and b are the\nsame value basically it checks if two\nvalues values are equal now you can also\ndo\na not equal so if you use the\nexclamation point that's not equal or\nyou can use\nless than or equal to or you can do more\nthan or equal to\nso i'm just going to delete all this for\nnow\nso now we're going to update this risk\nturn statement uh before the return\nstatement we want to we're going to\ncheck if player if player equals\ncomputer\nand if so if true will return the string\nit's a tie\nso let's do that if player\nequals computer and this is something\nthat maybe you figured out yourself\nbefore you before you're watching this\nwill return a string and the string is\ngoing to be\nit's a tie\nokay so now it's only going to return so\na function does not have to return\nsomething\nand for this function it's only going to\nreturn something\nif this is true if player equals\ncomputer\nif not it won't return anything and just\nto make make you notice this see\nthis\nline is indented within the if statement\nwhich is indented within this function\nand just really quick thing to note\nfor a return statement parentheses are\noptional so i could also\nadd parentheses like that but you don't\nneed them but for now i'm just gonna get\nrid of them\n[Music]\nso currently when there's a tie the\nprogram now returns it's a tie\nbut how does the player know that's true\nnow let's have the program print which\noptions that the player and the computer\nchose\nyou can concatenate strings with the\nplus operator\nthat just means you can combine strings\nwith other strings or strings with\nvariables\nso let me show you how you can print\nwhich options were chosen so i'm going\nto print\nyou chose\nand then i'll put player so you chose\nand then we have to add a space here\nbecause it's going to print a space and\nthen it will choose it will print this\nso if the player chose rock we'll say\nyou chose rock\nand then we can concave so we\nconcatenated these together but we can\nadd another plus sign\nand put another string here and it's\ngoing to say\ncomputer chose oh it's like being\ncovered up here by everything computer\ncomputer chose\nnow i'm just about to type it in but see\nif you can figure out what to add at the\nend here to put in what the computer\nchose\nso computer chose\ncomputer or the the value of this\nvariable here\nso\na lot of times when with programming\nthere's a bunch of ways to do the same\nthing so this is one way to combine\nstrings and variables together there's\nanother way that's a little simpler\ncalled an f string\nso an f string will allow you to make\nstrings with and with variables and\nother python code\nso to do that you just put a variable or\nyou just put f at the beginning of a\nstring so let me just give you an\nexample so we do age equals 25 we're\ngoing to create a variable and then i'm\ngoing to make an f string we'll make it\na print statement and i'm going to put a\nstring in here but instead of starting\nwith a quotation mark it's going to\nstart with an f\nand then i'm going to put gem is and\nthen whenever you want to put a variable\nor any kind of python code we're going\nto put some curly braces and i'm just\ngoing to put the variable within the\ncurly braces\nso years old and i'll put the end of the\nstring\nor let me put a\nperiod here\nokay so gem is\nage which is going to be 25 years old so\nthe f string is just a slightly simpler\nway to combine the strings and the\nvariables so what i want you to do see\nif you can figure out how to update this\nline right here so it uses an f string\nand it uses these curly braces instead\nof all these pluses up there\nso yeah we're going to put f and i can\ndelete\na lot of these\nthings here\n[Music]\nand then i'm going to put some curly\nbraces you chose player\nthere we go okay you cho there was a\ncomma here you chose player computer\nchose\ncomputer\nokay so now we've been able to put in\nthe variable within this string with the\nf string\nso we're going to test this out uh so\nin a code\nthe code in this function never gets run\nso when we press the run button it's not\ngoing to run any of the code within the\nfunction unless the function is called\nwithin the program\nso\nwe're not going to test out this\nfunction all right now what i want you\nto do is see if you can add a line to\ncall the check when function and then\njust call it with uh rock and paper\nso we're going to just do\ncheck when\nrock\nor actually we have to pass in strings\nhere rock\npaper\nso\nthis is going to it's going to call this\nfunction with rock in terms instead of\nplayer and paper instead of computer\nso let me try stride running this\nprogram\nyou chose rock computer chose paper and\njust don't worry about these little\nicons sometimes they just block what's\nin there but it's still behind that\nlittle search icon so it's to see it's\ndoing you chose rock computer chose\npaper\nnow let's get back to checking the\nwinner\nso far this function is only going to\ncheck if there's a tie\nnow we'll start adding code to check\ndifferent wing conditions\nso let's learn about else and elif\nstatements\nokay so down here i'm just going to give\nyou i'm just going to paste an example\nso so here's the if statement if age is\ngreater than or equal to 18 it's going\nto print this else so anytime this is\nnot true then it's going to print you\nare a child\nokay now here i've combined it with\nsomething else the ellis statement ls\njust stands for else if it combines else\nand if so you have to put a condition so\nif age is greater than or equal to 18\nprint you're an adult else if now we're\ngoing to check if age is more than\ngreater than 12 you were a teenager\nelse if age is greater than 1 print you\nare a child\nor else if none of these other things\nare true we'll just print you or a baby\nso and it's it's only going to do one of\nthese\nit's going to get to the for once it\ngets to the first one that's true then\nit's not going to check the rest it's\njust going to kind of go to the next\nline of code after all these statements\nso it's just going to choose one and\nonce it gets the first one that's true\nthen it's be done with this whole\nsection of code\nyou can also check for two conditions at\nonce let me give you an example i'm just\ngoing to delete all this code and i'm\ngoing to create an alif statement here\nelif\nelse if and we're going to check if\nplayer is equal to rock\nand i'm just going to type in the word\nand\nand computer\nis equal to\nscissors\nso now i'm checking if\nboth these conditions have to be true so\nthis condition and\nthis condition have to be true before\nthe following\nstatement will happen which we're going\nto just put return\nrock smashes\n[Music]\nscissors you\nyou when\n[Music]\nokay now\nthe next thing we're going to do let's\nsee if we can figure out how to do this\nwe're going to add another lf statement\nand this time we'll check if players\nequal the rock and computer is equal to\npaper and if so we'll return paper\ncovers rock\nyou lose\nso we're going to make this kind of\neasier by just copying this code and\nthen i'm just going to paste in this and\nthen i'll just change this so players\nequal the rock and computer is equal to\npaper instead of scissors\npaper\nand it's going to say\npaper\ncovers rock\nyou lose\nand we won't even have an exclamation\npoint anymore because it's not exciting\nto lose\nokay and you can kind of see there's a\nfew we could add a few more elif\nstatements to cover all the different\nsituations\nbut instead we're going to talk about\nrefactoring\nrefactoring is the process of\nrestructuring code while keeping the\noriginal functionality when created pro\nwhen creating a program it's common to\nrefactor code to make it simpler or more\nunderstandable\nso we are actually going to refactor\nthis code that i've highlighted now\nand we are going to instead use a nested\nif statement\na nested if statement will make the code\nmore understandable at a quick glance\nlike\nso you can put an if statement inside\nanother if else or else statement\nso you'll notice here the first elf\nstatement is if player equals rock and\nthe second l of statement is if player\nequals rock so see if you can figure out\nhow to refactor this\nto\nnot have to use the and anymore we're\njust going to use one if statement and\none else statement and then an if\nstatement under that\nelif statement\nif that doesn't make sense you can just\nsee what i do right now\nso i'm going to just\nmove this down a little bit\ni'm going to actually copy and paste\nsome of these items but we're going to\nstart with l if player equals rock we're\nnot going to have this\ni'm going to put this on a new line and\nsay if computer equals scissors so first\nwe're going to check if player equals\nrock\nand then if so we're then going to check\nit's going to be a nested if statement\nif computer equals scissors and if\ncomputer equals scissors then we're\ngoing to use this this return statement\nhere\nso i have to make sure it's indented\ncorrectly it's going to re so this we\nhave\nwe have\nplayer if player equals rock then if\ncomputer equals scissors we'll return oh\nthis needs to be indented one more time\nto be on inside that if statement\nand now we don't even need this elf\nstatement this can just be an else\nstatement else\nbecause if\nthe computer equals scissors there's\nonly one other option because we already\nknow if player equals rock and computer\nequals rock will have already returned\nit's a tie\nand by the way once you return something\nthe rest of the code in a function does\nnot run so if we're returning it to tie\nnothing else after that is going to run\nso we know that computer can't equal the\nrock at this point so it's either going\nto be scissors or paper so i don't we\ndon't even have to check if computer\nequals paper because at this point\ncomputer has to equals paper and then\nwe'll just return this this line\nlet's see\nthere we go return paper covers rock\nyou lose\nso now we just basically have to add two\nmore sections similar to this so this\none is if player equals rock\nthen we have to have another section if\nplayer equals paper and then if player\nequals scissors\nand then we just have to have the the\nstuff inside is going to be pretty\nsimilar just corresponding to the\ndifferent relationships between rock\npaper scissors\nso i'm just going to copy that\nand then i will paste it here and then\none thing is important to make sure this\nelif statement\nlines up with this else statement\nand this is now going to be\npaper\nand then we are going to check if\ncomputer equals rock\nand a computer equals rock\nthen we will say that\npaper covers rock\nyou win\nor we'll say\nscissors\ncuts\npaper\nyou lose and then the final one which at\nthis point i'm sure you can figure out\non your own we're going to add one more\nsection\nand this if\nplayer equals scissors\nand then first we're going to check if\ncomputer equals paper\nif so\nwe will do\nscissors\ncuts\npaper we're just making sure we're just\nmaking it so every time the first one is\nyou win the second one is you lose but\nyou could do it the other way around\nand then we will do\nrock\nsmashes\nscissors\nyou lose\nokay we're almost finished with this\nwhole program\nso both\nthe get choices function and the check\nwin function they're both complete\nnow let code to call the functions and\nplay the game\nso first let's remove this\nthis check when\nnow we'll create a variable called\nchoices and make it equal to the result\nof calling the get choices function\nand we just have to make sure it's not\nindented it's on the the first\nthe first column i guess right here not\nended at all so we'll do\nchoices\nequals get\nchoices\n[Music]\nand one thing about this is it's going\nto return a dictionary so if we look at\nthe get choices\nso it's returning choices and it's going\nto be a dictionary like this now let me\njust copy this i'm going to show you\nsomething down here i'm going to just\npaste it down here and we'll just make\nan example of what it could look like it\ncould look like rock and paper i always\nuse rock and paper as examples because\nscissors is a\nlittle harder for me to spell\nso so that's a little easier so so let's\none thing we haven't talked about is how\nto\nuh\nhow to access a and specific element\nwithin a dictionary so this is a\ndictionary so let's say if i call this\num\nwell i'll just call it choices even\nbecause we're going to delete that and\nso we're only going to have this choices\nbut if choices equals this and let's say\ni just want to get the the choice of the\nplayer\nlet me show you how i would do that\ni'll just do\np choice for player choice and i'm going\nto put equal choices and to get just the\nthe value of the player i'm going to put\nbrackets so the brackets look like that\nand then i have to\nput the the key that i want the value of\nso the key would be player\nso if i\nput the name of the dictionary which is\nthis\nand then i put some brackets we're going\nto use brackets to identify what is the\nkey that we want the value of so here's\nthe key of the with the value of rock\nand here's a key with a value of paper\nso this is how we can get the player\nchoice and i'm sure you can under see\nhow you get the computer choices if\ninstead if\nwe take this computer word and put it\nright here\nuh computer\nokay i'm just going to get rid of all\nthis here\nand we're going to we have the get\nchoices here\nand now listen carefully to what we're\ngoing to do next\nwe are going to create a variable called\nresult and make it equal to the result\nof calling the check win function and\nwhen we call the check win function\nwe're going to pass in the value of the\nplayer key\nand the computer key\nof the choices dictionary\nso let's do that so then you'll see what\ni mean a result\nis going to be\nwe're going to call\n[Music]\ncheck\nwhen\nand then we are going to pass in\nwe're going to pass in we have choices\nplayer\nand choices\ncomputer\nso because remember we had that we i\nshowed the example that dictionary so\nwe're getting the player key the value\nof the player key and the value of the\ncomputer key\nso now we know who wins\nwe've now this result variable is going\nto be one of these strings have been\nreturned either it's a tie rock space of\nscissors paper covered rocks and so on\nso now we just have to print the result\nwe're going to\nprint\nthe result\nokay we can try out this game\ni'm going to click the run button\nokay this is why it's sometimes better\nto test a little earlier i just forgot\nthe\nsemicolon on some of these so um\nsemicolon\nand see there's a red arrow i should\nhave seen that semicolon\nand semicolon\nokay now let's try it i'm going to play\nthe program into a choice\ni'm going to do\nrock and i just noticed something else i\nwant to change so enter a choice here i\nstarted there's a parenthesis here\nthere's no parentheses at the end so\nagain i'm just going to change that\nreally quick so enter a choice and we're\ngoing to put it in parentheses here\nand\ntest again so rock okay you chose rock\ncomputer chose rock\nit's a tie okay i'm gonna play it again\npaper\nyou chose paper computer chose scissors\nscissors cuts paper you lose\nokay we just created a python game\nso hopefully this gives you a better\nunderstanding of what it's like to\nprogram in python and you you now know\nabout some of the basic concepts of\npython now there's a lot more to learn\nin python and we're going to be covering\na lot more in this course i just wanted\nto start with a game and a full program\nso just right off the bat you could go\nto program\nso in the next section i'm going to\nstart going over in detail all the most\ncommon features of python\nand we're going to cover some of the\nfeatures that we've already used in this\ngame plus a lot of additional features\nadditional common features that were not\nused in this game\nand then in the final section of the\ncourse\nwe're going to code a more complex game\na blackjack game\nso let's get started with the next\nsection\none of the quickest and easiest ways to\nget started with python is by using\nreplit.com but you may also want to get\npython running on your local computer so\nif you want to do that you can start by\ngoing on over to python.org\nand these go to the downloads menu\nand then you're going to just click\nwhat you want to download for it for so\nit's going to default to be for you the\noperating system you're on but you can\nalso go to other platforms and make sure\nyou can and then just find the platform\nthat you want to download on and there's\ngoing to be instructions on here that's\ngoing to tell you how to go about\ngetting installed on your specific\ncomputer\nso there's a few different ways to run a\npython programs and one of the ways is\nwith an interactive prompt so after you\nget installed if you open up your\nterminal and type in python or sometimes\nit's going to be python 3 depending on\nhow you got it installed you're going to\nsee this interactive prompt and then you\ncan just this is called a python rebel\nit's it's different from a rebel\ncreating with created with replit but\nyou can start coding in python right on\nhere so i could say\nname equals bow\nand then you have to make sure you\nput the the quotation marks at the end\nand now i've gotten a variable stored as\nbow and then i can just type in the\nvariable name name and it's going to\nshow you show me the value of the\nvariable and you can type in most\ndifferent python commands right into\nthis inactive prompt here\nand then i can just quit it when i'm\nready to quit\nit's also common to run python using\nvisual studio code so if you just search\nfor visual studio code you can get to\nthe the download page and then you can\njust download it for your system and\nthere's also you can download for\ndifferent systems and then once you open\nup visual studio code to get python\nworking you're going to want to install\nthe python extension so i'm going to\nclick over here to extensions and you\ncan search for python or it may just be\nlisted here under popular extensions and\ni'm just going to click install\nand this is going to make it easier to\nwork with python on visual studio code\nso now i can just kind of close some of\nthis stuff here\nand i'm going to\ncreate a new file\nand i can just call the and i can just\ntype in name\nequals\nbow\nprint\nname\nand then if i save this\nas\ntest.pi it's going to now it's going to\nadd the colors that correspond to\npython\nand then i'm just going to click this\nplay button here\nand it's going to play it's going to\nopen up a terminal window here\nand it's going to run the program and\nit's going to print bow that's what my\nprogram did if i zoom out a little bit\nyou'll be able to see the difference so\nwell we just print the name and it and\nit runs the program just like that and\nthen you can see on the terminal how the\nthe command that was used to run that so\nwe could use the same command on any\nterminal and instead of typing this\nwhole thing for the location of python 3\ni can just do python\n3 and then you this is where that file\nis located so just copy that\nand i can paste it in here and it's\ngoing to run that program\nin this section we'll learn about the\ncore features of python i'll go into\nmore detail about some of the things we\nlearned in the first project and they'll\nbe covering a lot more concepts this\nsection was heavily inspired by the\npython handbook by flavio copes and you\ncan check that out on freecodecamp news\nand like the first part of the course\ni'll be running python in replit so once\nyou get logged into replit just like i\nalready showed you before you can hit\nthe plus button here or the create\nbutton to create a new replit and then\nyou can search for the programming\nlanguage or you can just click it down\nhere python we'll just create a python\nrepel\nand then we can instantly start creating\nwriting python code in replit\nso like i showed before we got our\ndifferent files here we're just going to\nstart by using one file here and this\nwe're going to encode and this is where\nit's going to\nappear if we we run the code so i'm\ngoing to\nclose off the list of files here\nand let's just start at the beginning\nagain so you've gotten used to coding in\npython through creating a rock paper\nscissors game\nbut now we're going to\nkind of do a deep dive into all the\nbasic commands of python so there's\ngoing to be some review but we're going\nto be going into more detail about each\nof the elements and the first thing\nwe're going to talk about is variables\nso we can create a new python variable\nby assigning a value to a label using\nthe equal sign or the assignment\noperator so let me give you an example\njust like i was showing you before just\nname equals bo\nso let me just zoom in a little bit more\nhere and so now our variable name is\nname and we've assigned it the value of\nbo\nand then we can also uh create we can\ncreate a variable with a number so i\ncould do age\nequals\n39. so a variable name can be composed\nof characters numbers and an underscore\ncharacter but and it cannot start with\nthe number\nso it could be anything like name one\nit could be all capital letters\nit could\nbe it could have an underscore it can\nstart with an underscore like i said\nlike that\nand\nyou can see that these are all it's\nputting these\nred squiggly lines because it's showing\nthat that's not\nactual python code if you're going to\ncreate a variable you should be\nassigning it to a value or you should be\nusing a variable that already exists but\ni'm just showing you some different\nexamples of different variables now so\nhere's an example of an invalid variable\nname if you just start with a number\nlike that that can't be a variable\nbecause you can't start with a number\nand i couldn't put something like test\nexclamation point you can't use\nexclamation points you can't use percent\nsigns\nand other than that anything is valid\nunless it's a python keyword so there\nare some keywords a keyword is something\nthat's used to to write python like for\nif\nwhile\nimport these are all words that have\nvery specific meanings within python so\nyou cannot use them for a variable name\nnow there's no need to memorize them as\nthe python editor here will alert you if\nyou use one of those as a variable\nso that was just like\nif i say if equals\nhi\nand then you can see it's going to show\nyou right here with these squiggly lines\nthat we've done something wrong\ninvalid syntax because and then also you\ncan see that\nit turns blue this word turns blue\nbecause it's a keyword you can't use it\nas a variable name\nso like i said it's going to alert you\nif you if you use a keyword as a\nvariable and you'll start to gradually\nrecognize them as part of the python\nprogramming language syntax\nnow let's talk about talk about\nexpressions and statements in python so\nan expression is any sort of code that\nreturns a value like for instance if you\ndo one plus one or if you just do a\nstring like\nbow this is going to like this is going\nto return to this is going to return the\nstring bow so a statement on the other\nhand is an operation on a value\nso for example these are this is a\nstatement here because we have an\noperation we're assigning this to the\nvariable and then another statement\nwould be like this print\nname\nso that's going to\nbe a statement because it's doing\nsomething to the value now a program is\nformed by a series of statements and\neach statement is put on its own line\nlike we have these two lines here but\nyou can use a semicolon to have more\nthan one statement on a single line so i\ni could put a semicolon here\nand then if i run the program it's still\ngoing to print the name and let's just\ndo that we already learned how to run a\nprogram in replica click this button\nright here but we can see it's going to\nprint bow and if i put these on two\ndifferent lines it's going to do the\nsame thing if i run the program it's\ngoing to still do the same thing here\nnow let's talk about comments this is\nsomething we haven't talked about in\nthis course yet so in the python program\neverything after a hash mark is ignored\nso if i put a hash mark i can say this\nis a commented line and when we run the\nprogram this line is going to be\ncompletely ignored and then we can also\nput in inline comment if i just put the\nhash mark here this is an inline comment\nand the cool thing about most code\neditors including replit is it's going\nto put comments going to make them gray\nso you know that this isn't really part\nof the program this is just some sort of\nspecial note that the programmer wants\nto put as part of the program\nso i want to emphasize again how\nimportant indentation is so it's very\nmeaningful in python so you can't\nrandomly indent things like you can't\njust press tab here to indent here and\nhow this is kind of lined up here this\nline up here you can see this red\nsquiggly line says unexpected expected\nindent\nso some other languages do not have\nmeaningful white space an indentation\ndoesn't matter but in python indentation\nmatters\nso in this case if you try to run this\nprogram we can run this and you'll see\nan error right here showing up in red\nhere it says indentation error\nunexpected\nindent\nbecause indentation has a special\nmeaning so i can just unindent that here\neverything indented belongs to a block\nlike a control statement or a\nconditional block or a function or a\nclass body and we'll be talking more\nabout those different blocks\nnow let's talk about data types python\nhas several built-in types\nso for instance this is a string so\nanything surrounded by quotation marks\nis a string that's one data type and you\ncan check the type of a variable by\nusing the type function so i could say\ntype\nand then i'll put name and to make sure\nto be able to see in the console i'm\ngoing to print what the type is here\nand if i press if i run the program\nwe'll see that the type is the class of\nstr which stands for string\nand then we can test to see if something\nis a string by comparing it to str so i\ncould do equals equals str\nand then if i run that it's going to say\ntrue because the type of name does equal\na string\nand then we can also use is\ninstance so\ni'm going to\nuh so if we instead of doing type we do\nis\ninstance and then we\nhave to pass it two things so\nthe first thing we're going to pass it\nso we have the is instance we're passing\nit the name that's this variable and str\nwe're trying to see if name is an\ninstance of a string and if i run that\nit should say true again\nso we've been testing against the str\nclass the string class but it works the\nsame for other data types so so there\nare some data types around numbers\nso an integer number integer numbers are\nrepresented using the int class or the\nint class and floating point numbers or\nfractions are a type of are the type\nfloat so i can say age\nequals\n2\nand then we can just check\nis instance\nand i can pass in the age and then i can\npass in an int\nso if i run that\nwe're going to see that i've done\nsomething wrong\noh i spelled that wrong there we go okay\nnow i'm going to try this and we'll see\ntrue true and i can also type in float\ntrue false it's not a false or it's not\na float because it doesn't have a\ndecimal point if i\ndid 2.9\nthen it should show that it is a float\nbecause it has a decimal so python\nautomatically detects the type\nfrom the value type so it automatically\nknows this is a string it automatically\nknows this is a float but you can also\ncreate a variable of a specific type by\nusing the class constructor passing a\nvalue literal or a variable name like\nfor instance we have this and we check\nto see if this is a float and it's\nsaying false but i can make it a float\nby typing in\nfloat\nand just p putting the value\ninto the flow here so we're going to\nmake it a float so now it's true true\nand you can do the same thing with\nstrings or integers or other data types\nand you can also convert from one data\ntype to another by using the class\nconstructor so so that's basically what\nwe did we just converted this from an\ninteger to a float but i can also do\nsomething else i can convert something\nfrom\na string\nto an integer so for instance i'm going\nto we'll just get rid of this one\ncompletely here and we'll just use this\none so\na string is anything in quotation marks\nso if i do\n20 age 20 and i test if this is a an int\nit's going to say\nfalse it's not an n so i'm printing\nwhether it's an instance of an int but i\ncan convert this string\ninto an integer by just doing integer\nand this let me run the program and it\nsays true\nanother thing about this is you don't\njust have to pass in the actual data or\nthe actual string i can pass in a\nvariable so i can say number\nequals and now i'm going to make it a an\nx it says number but it's actually a\nstring but i can pass in the number here\nand then it's going to set that to age\nand it's going to be true so we create\nthe string we convert the string to an\ninteger and we tested that that age is\nan integer\nso when we do something like this this\nis called casting\nwe are it's basically trying to extract\nan integer from this string\nof course the conversion might not\nalways work depending on the value\nthat's passed so for instance if we\nwrite test here in the string\ninstead of the 20\nwe may get an air so let me just run\nthis and see now we have an error it\nsays invalid literal for\nfor int int with base 10 test so we\ncan't convert the word we can't convert\nthe string test to an integer so python\ndoes its best to do the conversion but\nit doesn't always work there are a few\nother types so let me see are some other\ncommon types of types so there's the\ntype of complex for complex numbers bool\nfor booleans list for list tuple for\ntuples range for ranges\ndict is our dictionaries and set\nis a type for sets\nand we'll explore all these soon we'll\ngo into more detail about about all\nthese different types of types well now\nlet's talk about operators we've already\nseen one operator that's this one that's\nthe assignment operator but there's also\narithmetic operators comparison\noperators logical operators bitwise\noperators and plus some interesting ones\nlike is and in so we're going to be\ngoing over a lot of those right now\nso we talked about the assignment\noperator which is used to assign a value\nto a variable or to assign a variable\nvalue to another variable now let's talk\nabout arithmetic operators\nit's just what you use to do\nmath mathematics\nso here are the different\narithmetic operators so we have plus one\nplus one equals two then minus\nmultiplication division\nwe have\nremainder so four divided by three\nequals one but there's a remainder of\none we have exponents four to the power\nof 2 is 16 and floor division\nso floor division does a\ndivision problem and then just\nbasically rounds down\nso floor division does the division and\nrounds down to the nearest whole number\nso actually this would be better seen if\nwe do four five divide by two five floor\ndivision divided by two is going to be\ntwo normally be 2.5 but floor division\nis rounding down to the nearest integer\nthe nearest whole number\nand then also note that that\nthe minus can also be a\nmake something a negative number\nso i could do 4 plus\nnegative or i mean 1 plus negative 1 and\nthen that's just going to equal 0. and\nthen the plus operator can also be used\nto concatenate string values that's\nsomething we talked about earlier but i\ncould say\nscamp\nand then put a plus\nis a good dog\nand then like if i print this out\ni put the the parentheses around it i\ncan\nand then we'll see the whole string here\nsk scamp is a good dog\nthat was the name of my first dog when i\nwas a kid so we can also combine these\narithmetic operators with the assignment\noperator let me show you what i mean so\nlet me just get rid of this here and i'm\ngoing to do age\nequals 8\nand age\nplus equals\n[Music]\n8\nand i'll do print\nage\nso we've so all these different\noperators can be assigned with it can be\ncombined with the assignment operator\nand now it's going to add\n8\nto the age so if i\nrun this it's 16. so this actually just\nmeans\nage\nequals age\nplus\neight\nso this age plus equals eight is the\nsame as saying age equals age plus eight\nso it's just going to add this number\nto the current age and set it equal to\nthe age and you can do that with any of\nthese like i could do\ntimes\nand that would be age equals age times 8\nand\n64. and so on with any of these\narithmetic operators\nokay now let's talk about comparison\noperators\nnow we talked a little bit about them\nbefore\nbut let's see some examples again so\nthis is to compare if two things are\nequal\nand then we have not equal we're\ncomparing them to see if they're not\nequal or count this is if a is\ngreater than b\nor more than b and then this this is\nless than or equal to b\nnow let me just tell you a trick of how\ni keep the keep track of which one is\ngreater than and which one is less than\nif you see this less than one if you\nkind of tilt your head a little bit it\nkind of looks like an l see like l and\nthis one doesn't look like as much of an\nl so this\nless than operator kind of in some ways\nlooks like a capital l that's kind of\njust squished over and that's how i keep\ntrack of which one is less than which\none is greater than\nand so these are all going to give\neither a false value or a true values\nspeaking of true and false\ntrue and false are examples of boolean\nthe boolean data type the boolean data\ntype just means true false or true\nso a boolean is either going to be true\nor false there's only two options\nand there are a few boolean operators\nso let me show you what the boolean the\nboolean operators are either not\nand\nor or\nso when working with two or false\nattributes\nthose work like logical and or and not\nso when you're using uh not\nit means it's not true you're checking\nyou're checking to see something is not\ntrue and means they both have to be true\nand or means either this one has to be\ntrue or this one has to be true in order\nfor the full thing to be evaluated as\ntrue\nand let me show you something about or\nnow or using an expression returns the\nvalue of the first operator operand that\nis not a false value or a falsie value\notherwise it returns the last operand so\nit's going to return\nthe first operand that is not a false\nvalue but since this is a false value\nit's returning the second operand since\nthis is a false value it returns the\nsecond one\nsince this is not a false value it will\nreturn the first one\nand this is considered a false value if\nit's just an\nempty bracket that's false so it's going\nto return the second value which just\nhappens to be false\nand since this is a false value it's\ngoing to return the second option which\nalso happens to equal to false\nso\none way to think about it for the word\nor is so the pi this is how the python\ndocs describe it if x is false\nthen why\nelse x\nso this would be like x this would be y\nif else is false then why else x\nand then for and down here let's look at\nsome examples for and and only evaluates\nthe second argument if the first one is\ntrue so if the first argument is falsy\nsuch as false zero and empty string\nempty brackets it returns that argument\notherwise it evaluates the second\nargument\nso the way the way the python docs\ndescribe it is if x is false then x\nelse y\nokay let's quickly discuss bitwise\noperators they're very rarely used only\nin very specific situations but it's\nworth knowing what these bitwise\noperators are just in case you're in the\nvery rare situation that you need to use\nthem\nand then two other types of operators\nare is and in\nnow is is called the identity operator\nit's used to compare two objects and\nreturns true if both are the same\nobjects if both are the same object and\ni'll be talking more about that later in\nthe section on objects and then in is\ncalled the membership operator this is\nused to tell if a value is contained in\na list or another sequence and we'll be\ntalking more about the in operator when\nwe're discussing lists and other\nsequences later in this course\nand the final thing i want to talk to\nyou about is the ternary operator now\nthe turn area operator in python allows\nyou to quickly define a conditional\nso here will be like kind of the slow\nway to do it without a ternary operator\nso let's say you have a function that in\nthis function is comparing age with 18\nand it's going to return true or false\ndepending on the risk result\nso instead of writing like this\nwe can implement it with a ternary\noperator so let's do death\n[Music]\nis\nadult i'll call it is adult 2 because\nit's the second way of doing it and this\ntime we're going to use the ternary\noperator it's just going to be return\ntrue\nif age\nis greater than 18\nelse\nfalse\nso you can see first we define the\nresult if the condition is true\nthen we evaluate the condition\nand then we define the result if the\ncondition is false\nit's basically an if else statement all\non a single line\nokay let's talk more about strings in\npython so a string in python is a series\nof characters enclosed in quotes in\ndouble quotes or it could be\nsingle quotes\nas long as the type of quote is the same\non both sides and we already talked\nabout how you can assign a string to a\nvariable\n[Music]\nand we already talked about how you can\nconcatenate two strings using the plus\noperator like phrase\nequals bo and then you can concatenate\nwith the plus operator\nis my\nname\n[Music]\nand then\nalso instead of putting a string here\nyou can put the variable so i could put\nname is my name and we already have the\nvariable here to equal bo so when you\nconcatenate you can concatenate the\nstrings or the variables\nyou can also append to a string using\nthe plus equal operator so let's say i\nwant to add to this name and i'm so i'm\ngoing to say name\nplus equals\nis my name so we're adding is my name to\nthe end of this so i can say\nprint\nname\nand then we can see what it looks like\nwhen you use the plus equal operator\nso bo is my name\nand then we already talked about how you\ncan convert a number to a string using\nthe\nstr class constructor like if we had age\nequals we could make this a string\nbut we passed this integer it converts\nto a string and now it's going to be a\nstring\nnow here's something new a string can be\na multi what can be multi-line when\ndefined with a special syntax so if you\nenclose it if you enclose the string in\na set of three\nquotes\nso let me show you an example get rid of\nall this\nand i'm going to\nprint an entire\nstring here\nso we're going to make this a multi-line\nstring i'm going to put three quotation\nmarks\nand then it's going to start with three\nquotation marks and end with three\nquotation marks and then i can make it\nmulti-line so i can say bo is and then i\ncan\nput some extra lines\n39\nyears old now if i print that\nand you can see it's going to print\nthe different lines here so we just made\na multi-line string\nand you can also instead of using the\ndouble quotes you can put a single quote\nas long as they're the same at the\nat the beginning and ending\nnow a string also has a set of built-in\nmethods let me show you an example so if\ni have this string\nbow but i'm going to put at the end of\nthe string i'm going to put dot\nupper and i put parentheses at the end\nso if i run this now it's going to print\nit in all capital letters\nand the same thing you can use with\nlower so if it if i had a string that\nhad a few capital letters\nokay now it's all\nlower now i can also type in a title\nand this is going to\nmake each lut so i can say\nbow\nperson\nuh and i do this so it's going to cat\nit's going to a title that's going to\nmake the first letter of each string\na capital letter\ni can also check things like i can say\nis lower and it's going to check if it's\nall lowercase letters false but if i\nmake it so it is all lowercase letters\nit's going to say true so here's just a\nlist of a few common ones\n[Music]\nyou can do is alpha to check if it\ncontains only characters\nis\nl num to\ncheck if a string contains characters or\ndigits and is not empty is decimal\nlower to make it lower case is lower\nupper is upper title starts with to\ncheck if it starts with a specific\nsubstring to check if it ends with you\ncan replace part of a string split a\nstring you can strip the white space\nfrom a string you can append new letters\nto a string you can find the position of\na substring spring string and there's a\nfew more but these are some of the most\ncommon things you can do with a string\nand then one thing to know about these\nis that they they all return a new\nmodified string they don't actually\nalter the original string so let me show\nyou what i mean by that so let's say we\nhave we'll do name equals bow again let\nme zoom in a little bit\nand we're going to\nprint\nname dot lower\nnow i'm going to print\nname\nso if i just run this\nand we first figure out what went wrong\nhere it looks like there's a few extra\nparentheses\n[Music]\nokay let's run this and you can see it's\ngoing to make it all lowercase but then\nwhen i print the name again\nit's not still lowercase because this\njust returns a brand new modified string\nit doesn't actually change anything\nin the original string\nand then you can use some global\nfunctions with strings as well so one\nfunction we haven't discussed yet is the\nl e n function which stands for length\nit can give the length of a string so\ni'm going to type an l-e-n\nand then so there's just some global\nfunctions that work with a lot of\ndifferent types of data and the length\nof this is four you can see\nand then you can use the in operator now\ni briefly mentioned the n operator\nearlier so\nlet me show you one use case so we can\nuse the in operator to check if a string\ncontains a substring like for instance i\ncan say\na u\nin\nname so let's check if name\ncontains the letters a u\nwell true it does but if if if it if it\nif it didn't if i just add an extra\nstring it's going to say\nfalse\nokay another thing with strings um\nescaping is a way to add special\ncharacters into a string\nfor example let's say we wanted to add a\ndouble quote within the string how can i\nadd a double quote into a string that's\nwrapped in double quotes if i put a\ndouble quote like that that's not going\nto work because this is going to be the\nstring and then it's not going to the\ncode editor is not going to know what to\ndo with this last little bit here\nso\nthe way to go is to escape the double\nquote inside the string with the\nbackslash character so right before this\nquote i'm going to put the backslash\ncharacter\nand then you can see it now all is all\nthe same color as a string and if i\nprint it it's going to it's not going to\nprint the backslash character so putting\na backslash is how you escape a\ncharacter and that just means\nthis\nthe the backslash character means that\nthe next character is not going to mean\nwhat it normally means\nit's going to actually just be the\nstring of that character\nand you can do the same thing with so\nwith in this particular example you may\nnot need to do it because you can always\njust put a single quote at the beginning\nand ending\nand as long as you have a different type\nof quote at the beginning and ending\nthen\nyou can put a double quote in the middle\nbut let's say you want a string that\ncontains both a single quote and double\nquote within the string\nthen you will have to backslash like if\ni just put a single quote there it's\ngoing to mess it up but if i put it\nbackslash\nnow it's going to have the single the\ndouble quote and the single quote right\nwithin the string\nand\nyou can also use the escape character\nfor\nspecial formatting characters like uh\nfor instance what if i want there to be\na new line between the first two and the\nlast two letters of the string if i do\nslash n\nthat is going to not actually just put a\nslash in let's see what happens when i\nput that this is means new line you can\nsee it says be new line a you\nand then another way a reason why you\nmay want to use an escape here like\nlet's see what happens if i do this\nthis\nthat's not looking how i want to look\nbecause it's normally normally when\nthe code is running if it sees this\nbackslash it thinks it's an escape\ncharacter so if you want to actually add\na backslash to a string you have to\nescape the backslash so now it's be\nbackslash au\nokay we're done talking about escape\ncharacters now i'm going to tell you how\nyou can get a specific character in a\nstring so given a string you can get its\ncharacter using square brackets to get a\nspecific item given its index starting\nfrom zero\nso\none thing to know about programming is\nthat\nwhenever you're counting from in most\nprogramming languages you start counting\nstarting at zero so this is going to get\nthe letter at index one so this is index\nzero the b the e is at index one index\ntwo index three so if i run that we can\nsee we are getting the e that's at index\none if i want to get the b i just put a\nzero in the brackets and we get the b\nand then we can use a negative number to\nstart counting at the end so if i put\nnegative one it's going to start here\nzero\none and that's going to be a oh you okay\ni guess when it's going backwards it's\nnot going to start zero because there is\nno negative zero that makes sense so\nnegative one is going to be the last\ncharacter in the string so negative one\nnegative two negative three and so on\nwe can also use a range using what we\ncall slicing so if i put 1 colon 2\nthis is going to be every character\nstarting at index 1\nand ending before index 2. so it starts\nat index 1 so it starts with that\ncharacter and it ends before an x2 which\nis a so that's actually only going to\nreturn an e\nbut if i put 3 here\nnow we can return a u\nand if i put bo is cool we can put one\nfurther down i'm going to put 7\nand we can see\nit's going to return part of this string\nand then you can also start if you just\nput a blank before the colon then it's\ngoing to turn everything up to it's\ngoing to start at the beginning and\nreturn everything up to character seven\nand you can also do in the opposite\ndirection so if i put a blank after the\ncolon it's going to go to the end of the\nstring so it's going to say is cool\nso let's talk about\nbooleans well we already talked more\nabout we already talked about booleans\nbut we're going to talk a little bit\nmore about boolean which is considered\nthe bool type and this can have two\nvalues true or false so i can say done\nequals\ntrue\nor you can do done\nequals false now\nnotice that it always has a capital t or\na capital f so\nif you don't put a capital t or capital\nf it won't be considered the the true\nboolean value in python\nand booleans can be especially useful\nwith the conditional co\nwith conditional control structures like\nif statements\nwell we already discussed if statements\nin the first part of the course and\nwe'll be discussing them more in detail\nlater but let me just show you an\nexample so if done and i'm going to\nerase this done because we want to be\ntrue so if done\nand then we'll say print\nyes\n[Music]\nelse\nprint\nno\nokay so i can run that and it's going to\nprint yes because done\nequals true but if done equals false\n[Music]\nthen it's just going to say\nno\nso when evaluating a value for true or\nfalse if the value is not a bool or\nboolean like if it's not true or false\nwe have some rules depending on the type\nwe're checking so numbers are always\ntrue\nexcept for the number zero\nif i put 0 here it's going to evaluate\nto false but if i put any other number\nhere it's going to be true even like\nnegative 1 or anything like that it's\ngoing to be true oh i guess\nthat i didn't put negative 1 i put\nequals 1. so if it's negative 1 that's\ngoing to be true\nso strings are always false\noh\nstrings are false only when empty\nso if i say\nbow here this is going to be true\nbecause it's not an empty string but if\ni make an empty string then it's going\nto be\nfalse\nlists tuples and sets and dictionaries\nwhich we'll talk about more later are\nfalse only when empty so it's going to\nbe if a list double star dictionary is\nis filled with something that is true\nand then also you can\ncheck if a value is a boolean so if i\nsay done equals true\ni can do\nprint\ntype we're going to check the type we're\ngoing to check if the type of done\nequals\nbool so let's check it does that equal\nboolean\ntrue it does now let's see let's\nchange this to a different type and it's\ngoing to say false so it can still\nevaluate whether this is true or false\nbut the type is not a boolean the type\nis a string\nand let me show you another example code\nso the global\nthe any function it's a global function\nit's very useful when working with\nbooleans\nit returns true if any of the values of\nthe iterable such as a list if any of\nthem are true it's going to return true\nfor all of them so\nfor instance book one read that's true\nbut book two read that's false but this\nis going to return true because it's\nchecking if any of them are true and\nthen it's going to set this to true\nnow the all function is is similar but\nreturns true if\nall of the values are true so\nwe see we have this value as true\nwe have this value as false\nwhereas any would have returned true\nthis is going to return false because it\nonly returns true if all of the values\nare true\nokay now let's talk about more\nnumber data ties we already talked about\nint an integer whole number we've\nalready talked about float which is any\nnumber with a decimal point there's\nanother type called complex\ncomplex numbers are an extension of the\nfamiliar real number system in which all\nnumbers are expressed as a sum of a real\npart\nand an imaginary part\nimaginary numbers are real multiples of\nthe imaginary unit which is the square\nroot of negative one often written\ni in mathematics or j in engineering\npython is built in support for complex\nnumbers which are written with\nthe the j notation so the imaginary part\nis written with a s with a j suffix\nso you can combine it you can use a\nliteral value like complex\nequals\ntwo plus\nthree j so the the j means it's the\nimaginary part of the number or you can\nuse the complex constructor so i can put\nnum\nequals\ncomplex\nand then i can pass in\ntwo comma three so\nthe three part is the imaginary part the\ntwo is the the real part the integer\npart\nand then once you have a complex number\nyou can get it's real or imaginary part\nlike this so i can say print\n[Music]\nnum\ndot real\nor num\ndot match\nso this is going to be the 2 this is\ngoing to be the 3. so if i just\nuh\nlet me\ni think the problem was\nnum\nnum one no so i'll do num one and num\ntwo and we're gonna do this as num two\nokay let's check this so\nthis is the real part this is the\nimaginary part you can see they're being\nreturned as floats\nand you can use the type function to\ncheck the type\nso now let's talk about some built-in\nfunctions that help with numbers so one\nof them is abs abs will return the\nabsolute value of a number so if i say\n5.5\nthat's just going to be\n5.5 but if i put negative 5.5 well\nit will be 5.5 so\n[Music]\nso if i print this see 5.5 basically it\njust makes it so it's not negative\nthen you can also use\nround so if we do round\nlet's make this just 5.5 round is going\nto round to the nearest integer so if i\ndo this it's just gonna be six so point\nfive is going to round up but if we did\nuh\nfour nine\nit's going to go down to five\nyou can also specify a second parameter\nto set the decimal points precision so\ni can\ngo to if i do\none here and i round it it's going to\ninstead of rounding to the nearest\ninteger it's now going to round to the\nnearest tenths place value or one\ndecimal point\nthere are several other math utility\nfunctions and constants that are\nprovided by the math standard library\nlike there's a math package a c math\npackage decimal pages fractions package\nthat makes it easier to work with\ndifferent types of numbers we'll explore\nsome of those more later on\nnow let's talk about in nums and noms\nare readable names that are bound to a\nconstant value so to use a noms we're\ngoing to have to import and numbs from\nthe inum standard library module\nlike this from enum import enum and now\nwe'll be talking more about\nimporting\nstuff from modules later but once you\nimport it then we can initialize a new\nand nom in this way so do class\nstate enum\nand so we can have inactive\n[Music]\nequals 0\nand active\n[Music]\nequals one\nso basically the the word state this can\nbe anywhere any\nword we like so we're setting\nuh\nbasically a variable called\nstate.inactive\nwhich is going to equal 0 or\nstate.active to equal 1.\nso\nyou can reference this how you would\nreference it you can do print\nstate\ndot\nactive\nand then if i just run the program we'll\nsee\nnow you can see it's just going to\nreturn state to active instead of one\nso to actually get the value you use\nstate to active dot value\nand then we run that and then we'll see\none here\nif you we want to just return\nstate.active that the sa that value can\nbe reached by the number assigned in the\nnum so state we can do\none\nand if i print that it's now going to\nsay state.active\nsame for using the square brackets\nnotation so i could do states\ni'll do see square brackets and put\nactive\nif i print that it's going to print\nstate that active so this is basically\nthe only way to create constants in\npython\npython is no way to enforce the variable\nshould be a constant so some people use\nenums to create a constant\nand then nobody can reassign the value\nso\nwhen we do\nstate\nor state active dot\nvalue\nso this is it's not going to be able to\nbe reassigned so basically there's two\nways to do we can do this bracket\nnotation or we can go back to the other\nway\nactive\nnow we can also list all the possible\nvalues for enum so\nour num is called state and we can now\njust print all the values oh i actually\ndid that wrong it's supposed to be a\nlist\nso this is going to list the values of\nthe state\nand we can see we have inactive 0 and\nactive is 1. and we can also count them\nusing the length function so we're going\nto print the result of a length state\nand that's just going to give us 2.\nokay let's talk about more about user\ninput now we already discussed a little\nbit in our first program\nbut you can do get user input by using\nthe input function so let's just get rid\nof all this\nand we'll do\nage\nequals input\nand we can say\nprint\nyour age is\nand then we just can concatenate that\nwith the\nvariable age and then also if you want\nto\nso let's just do a quick test and right\nnow it's looking for the age right now i\ncan put five your age is five so there's\ntwo ways to make it say what is your age\nwe can do a print statement right before\nhere\nand do what is\nyour age\nand then\nnow we can put four your age is four\nnow you can also ins instead of\nputting the print statement right before\nhere i'm going to copy this delete that\nand we can put it right in this input\nfunction\nand then i'll say it'll still say what\nis your age and i can\nput an age here\nso one thing to really realize about\nthis is that it gets the input at\nruntime meaning the program will stop\nexecution and will wait until the user\ntypes something and presses the enter\nkey\nyou can also do more complex input\nprocessing and accept input at program\ninvocation time and we'll see how to do\nthat later on\nif you want to get the input when the\nprogram is run that's going to work\nbetter for command line applications\nother kinds of applications will need a\ndifferent way of accepting input\nlet's look more at control statements\nthis is another thing we've already\ndiscussed earlier but we're going to\nreview it and and look at it in a little\nmore detail so a control statement is\nlike an if statement so if condition\nthat's this variable here equals true\nthen it's going to run everything in the\nblock a block is\nthe part that is indented one level\nusually it's going to be either four or\ntwo spaces in this case it's four spaces\nsometimes it's two spaces it doesn't\nmatter it could even be one space as\nlong as it's the same as long as every\nline of code is indented the same amount\nso if i just run that\nthe condition was true the block can be\nformed by a single line or multiple\nlines and it ends whenever you move back\nto the previous indentation level\nso\nfor instance if once we are not indented\ni can say print\noutside\nif\nso then\nthat's always going to pres it's always\ngoing to print this because it's not in\nthat if statement\nand then we have the if else statements\nwhere the else is if\nif this does not true then it's going to\ndo whatever is in here so if i just\nchange this to false\nthen it's going to\nprint whatever the condition was false\nand then we can have this series this is\nsomething that we showed in the per the\nprogram earlier but if and then elif\ncombines else and if so\nif this is not true then i'll move on to\nthis line and else\nif this is true then i'll do this else\nif this is true and it'll just keep\ngoing on and then it will always do the\nthis is if none of the other ones were\ntrue it's going to do this\nso since\nit was testing this it's not even going\nto evaluate anything later but if we\nmove this to false\nand we change this to bow\nthen it's actually going to skip all the\nway down\nall the way to this else here\nand if we do flavio\nyou can print that and then it's going\nto say hello flavio from right here\nokay that's all we're going to talk\nabout for this for now since we've\nalready covered it earlier in the course\nnow i'm going to go into more detail\nabout lists lists are an essential\npython data structure and so an example\nof a list would be let's create a list\ncalled dogs so we're going to create\nthe dog names we have roger we have sid\nand this allows you to group together\nmultiple values and reference them all\nwith a common name so we have a list of\ndogs and this is just two strings so the\nlist always going to have the opening\nclosing brackets and each item in the\nlist is going to be separated with a\ncomma and a list can hold different\ntypes of values so these are all strings\nbut we can\nhave a string\nan integer a string a\nboolean\nand you can mix different types of data\ntypes\nin a single list\nand then you can check if an item is\ncontained in a list with the in operator\nso we talked about the in operator\nearlier but let me show you how that\nworks so we're going to print here's\nwhere we can use the in operator we're\ngoing to check if roger\nis\nin\ndogs\nso let's see\nso run that true but now let's check if\nbo is in dogs well\nfalse because it's checking\nso this is how you can check if an item\nis in a list\nyou can also define a list as an empty\nstring so i could actually just\nremove all this and now we just have an\nempty list and this is obviously still\ngoing to be false because there's\nnothing in that list\nbut let's go back to when we had some\nitems in the list\nand you can reference items in a list by\ntheir indexes starting with zero so i'm\ngoing to do dogs and then i can use\nthese brackets so and now i'm going to\nput the so this is where we're going to\nreference the thing\nan item from the list and i'm going to\ntype in 0 which will be this item right\nhere roger or i could put 2 and it's\ngoing to do 0 1 2 and now we're going to\nhave sid\nand the same\nand you can use this same notation to\nupdate an item\nin a list so i'm going to add another\nline of code here and put dogs 2 is\ngoing to equal\nbo\nand now i'm just going to print the\nentire list here and now\ninstead of\nbeing roger 1 said true to roger 1 bow\ntrue\nbecause we've updated the item at index\n2 to be bo instead of sid\nnow you can also use the index method\nso\num instead of\nlike if i want to find the first item in\nthe list i could do it like this\nso you can also use a negative number\nhere\njust how we saw on the string so\nnegative 2 is going to start with one\ntwo\nactually let's do negative one so it\nshould return true here\nokay true so it starts with this one if\nyou put a negative number\nyou can also extract part of a list now\nthis is very similar to what we showed\nusing\nwith the string let me just add another\nitem here\n[Music]\nnow i am going to\nuse the colon to do part of a list so\ni'm going to 2\n4\nand so this is a slice\nso it's going to start at the second or\nzero\none\ntwo\nwhich is now bow because we change it to\nbow and it's going to go through four\nit's going to go through four but not\nover pat not including four so it's\ngoing to be 2\n3\nand then not 4 so it's just sid and true\nor bow and true because we updated 2 to\nbow\nand you can also just leave this blank\nso it's going to go through the end of\nthe list or if you\nleave the first number blank\nit's going to go it's going to start at\nthe beginning of the list and we can go\nthrough for instance index three\nand so that's a way to slice the list\nyou can also\nuse the the length function so let's\nfind out how many items are in the list\ni'll use the length the length of dogs\nis six or six items in the list we can\nalso add items to the list by using the\nappend method so i'm going to do dogs\ndot append\nand then i can\nadd an item so i can say something like\njudah and now if we see the length\nthere's now going to be 7 and if we just\nprint\nthe full list\nthen we can see that we can see all the\nitems including the one that was just\nadded we can also use the extend method\nthe extend is another way to add an item\nto a list so if i do instead of dogs\nappend i can do dogs that extend\nand then i'm going to pass in\ninstead of just passing in the string\ni'm gonna pass in\nthe item as a list so i'm gonna and it's\ngonna add it just the same but now i can\nactually\ncombine two lists together so i'm gonna\nput a five so if i do this we can see\nnow we are taking this list and\nextending it by adding this list on the\nend this is a two item list and we have\nthat six m list and now we have the\neight item list\nyou can also use the\nplus equals operator so\nto use the plus equals operator i'm\ngoing to do dogs it's the same it's\ngoing to do the same thing as extend\nso plus equals\nand then we have this list take this\nparentheses off here and it should look\nexactly the same see it's showing up the\nsame thing up here\nso the plus equals is going to be the\nsame thing as extend where it takes the\nlist that's already exists and adds this\nother list to the end\nand when you're using the extend or the\nplus equals\nyou don't want to forget the square\nbrackets\nhere so if you if you forget the square\nbrackets and let's say i'm just going to\nadd this iron to the list\nit's now actually going to put each\nletter individually here\nso if i you can kind of see it better if\ni move over here\nso it so that so you want to make sure\nyou put the the brackets\nand another thing you can do is remove\nyou can remove an item using the remove\nmethod so i'm gonna do\ndogs dot remove\nsid\nokay now i'm gonna play it here and\nit's saying\nwhat did i do wrong here\noh obviously um i'm moving sid but we've\nalready changed the element of sid to\nbow so let's remove\nquincy and let's try that\nokay so now there's no quincy\nso another common thing to do another\ncommon list method is pop so if i do\ndogs.pop\nit's going to remove and return a single\nitem so first i'm going to\n[Music]\ndo dot\nprint dogs that pop and then i'm going\nto print dog so if i\nso first it's going to return 5 that was\nthe last item that we added onto the\nlist and now when i print the list that\nitem's not in the list so pop is going\nto remove the last item from the list\nand it's going to return the last item\nit's going to return and remove the last\nitem from the list and then it's not on\nthe list anymore\nnow let's make this\nlet's let's simplify this just go back\nto the initial list and i'm going to\nchange this to items\nnow i'm going to show you how to add an\nitem in the middle of the list at a\nspecific index you can use the insert\nmethod so i'm going to do items dot\ninsert\ni'm going to put the index which is\ngoing we're going to insert at the index\nnumber two and the item is going to be\ntest\nand then i'm just going to print that\nprint\nitems\nand then i'll run that and then we can\nsee it index number two we now see the\nitem test\nnow to add multiple items at a specific\nindex you need to use slices so\nlet me show you how you do that so we're\ngoing to do a slice\nand i'm going to set that equal to\ntest\n1\ntest\n2.\nwe print that\nso now you can see we have test 1 and\ntest 2 right here\nright behind this search thing here\nand we've inserted multiple items into\nthe list starting at index 1.\nnow you can also sort a list\nso if i do\nhere we go um\nitems dot sort\nit will sort the list\nbut you have to make sure okay we have\nan error it's not supported between\nwe have a combination of ins and strings\nso let's\nmake it so it's all strings in the list\nand\nthen it should\nbe able to sort it\nokay\nnow the\nstrings are in alphabetical order and if\nwe're using integers or floats and they\nwould just be in numerical order\nnow one thing that's interesting about\nthat if i put change this to\nbow\nyou'll see now we have this at the\nbeginning and this at the end\nso\na the sort method orders uppercase\nletters first and then lowercase letters\nso to fix that actually to make it\nmake more sense we're going to change\nthat to\nbob and to fix that\nwithin the sort i'm going to i'm going\nto put key equals str dot lower\nand now\nit's going to sort these correctly how\nyou would imagine not caring about\nuppercase or lowercase letters\nsorting modifies the original list\ncontent so to avoid that you can copy\nthe list content using\nso let me show you if we do\nitems\nitems\ncopy\nequals\nitems\nand then we make a slice\nwith with nothing at the beginning and\nnothing at the end so it's going to\nstart at the beginning of the list to\nthe end of the list and now we can have\na copy and i can print\nitems copy\nso if i print that so now we see we have\nthe sorted list that's that we ran the\nsort on but we also still have\nthe original list\nso it with all the words in the original\norder\nand there is also a way to sort a list\nwithout returning a\nnew list\nthere is also a way to sort a list\nwithout modifying the original list so\ninstead of copying a list\num what i'm going to do\nis\ni items\ninstead of doing items dot sort\nwe are going to do\nwe're going to use a global function\ncalled sorted\nso in the sorted function\nwe are going to pass in two parameters\nso first is the list items\nand then the second is how we're sorting\nit so this just makes\nsure that the key the case of the\nletters don't matter and then i'm just\ngoing to print that\nnow if i run this you can see we it\nwe print printed the sorted list\nand now we're printing the list and it's\nnot it's no longer sorted because this\ncreates a new list without modifying the\noriginal list\nokay now let's learn about another data\nstructure called\ncouples\nso\nthis time i'm going to put\ntuples\nso we're using a comment here so tuples\nare another fundamental python data\nstructure they allow you to create\nimmutable groups of objects this means\nthat once a tuple is created it cannot\nbe modified so we already saw that we\ncould modify lists but tuple you can't\neven add or remove items\nthey're created in a way similar to\nlists but using parentheses instead of\nsquare brackets so\nfor instance i'm going to do names\nequals instead of using square brackets\nwe're going to do parentheses roger\nand\nsid\nokay so a tuple's order like a list so\nyou can get its values by referencing an\nindex\nan index so i could say for instance\nnames and if i do the bracket i could\nput a zero here to return\nroger\nand then you can also use the index\nmethod for instance names\ndot\nindex\nand then i can\npass in something like\nroger and then this is going to\nreturn 0\nbecause it's going to get the the index\nnumber of that so as with strings and\nlists using a negative index we'll start\nsearching from the end so i could do\nthat i can do negative one to start\nnot negative zero negative one to start\nsearching from the end here\nand you can count the items in a tuple\nwith the length function so i could do\nif i do length and then do names it's if\ni printed that it would just print 2\nbecause there are two items in that\ntuple\nthen you can also check if an item is\ncontained in a tuple with the in\noperators very similar to a list so i\ncan do this time i will print it i'll do\nprint\nroger\nin\nnames so if i print that and run it\nwe'll see true because roger is in the\nnames\nand then you can extract part of a tuple\nusing slices\njust like we could do with with strings\nand lists so i could do names and then i\ncould do\n0 starting at the whoops\n0\n2\nso that's just going to start at the\nzero index and be done at the index 2\nand then\nand then you can use the so you can get\na sorted version of the tuple using the\nsorted global function so\nremember when we were looking at lists\nwhen we used the sorted function it\ncreated a new a new list or so when\nwe're creating using the sorted function\nfor tuples it creates a new tuple so i\ncan say sorted\n[Music]\nnames\nand this would put them in alphabetical\norder they already in are in\nalphabetical order but say there is one\nmore\nword in this list\nand then\ni can print this\n[Music]\nto print the sorted version but it's not\nactually going to modify the list\nbecause you cannot modify\na tuple\nand then you can create a new tuple from\nexisting tuples using the plus operator\nso i could say something like\nnew tuple\n[Music]\nequals names and then i can use the plus\noperator\nand then i would say i would just say\ntina\nand\nquincy i could add a few i could add so\nthese will combine two tuples into a new\ntuple but you can never like i said you\ncan't actually modify the original tuple\nnow let's learn about dictionaries\ndictionaries are another very important\npython data structure\nwhile lists allow you to create\ncollections of values dictionaries allow\nyou to create key value pairs we already\ndiscussed dictionaries a little bit but\nnow we're going to discuss even more\nabout dictionaries so let me give you an\nexample of a dictionary with just one\nkey value pair so dog equals and then\nwe're going to use the curly braces to\ncreate the dictionary and i'll put name\nand then i will put\nroger and just like any type of strings\nwe could make these single quotes or\nthey could be double quotes and the\nspaces here are not very important but\nit's common to put spaces in between\nthese things for better readability\nand the key can be any immutable\nvalue so this is the key this is the\nvalue and the key can be any immutable\nvalue\nsuch as a string a number or a tuple\nthe value can be anything you want so a\ndictionary can contain multiple key\nvalue pairs so like for instance we got\nthe name we can have\nage\nand that's going to be\n8. and you can access individual key\nvalues using the notation like this so i\ncan say\ndog\nso i'm using the bracket notation i can\ndo name so if i print this it's just\ngoing to\nprint roger\nand then again i can use the single\nquotes 2 if i want\nand it still prints roger\nand then you can use the same notation\nto change the value stored at a specific\nindex\nso let's say i want to change the name\nso if i do dog\nand i'm going to say that the name\nis now going to equal\nsid\nnow i'm just going to print the whole\nthe whole thing\nand we can see the name is now sid\ninstead of roger\nso another way to get a specific element\nis to use the get method so if i do a\ndog dot\nget\nand then i\ndo name so i'm going to try to get the\nname here\nit's going to return roger so\none good thing about this is that you\ncan add a default value like let's say\ni'm going i'm searching for color\nand it's saying none it's giving it none\nbecause there is no color\nbut what if i want a default value so\ni'm going to put comma and then i'll put\nbrown\nso now if it cannot find the color in\nthe dictionary it's going to return\nbrown but if it can find the color like\nlet's say\ncolor\nand this is a\ngreen dog\nokay we'll return\ngreen\nso with the bracket notation that was\nshowing you earlier you cannot have a\ndefault value so that's one good thing\nabout the get method\nnow you can also use the pop method to\nretrieve the value of a key and delete\nthe item from the dictionary we also\nshowed the pop method for lists so for\ninstance i can say\nget dot\npop\nand then i will pass in\nname\nand then right after that i'm just going\nto print\ndog that the the whole dictionary so\nfirst we're going to get roger and then\nwhen i print the dictionary here it's\nnot going to show roger anymore because\nwe we deleted it pop will return the\nitem and delete the item\nnow you can also use a function a method\ncalled pop item the pop item method well\nlet me show you that one pop item\nit's going to retrieve and remove the\nlast key value pair inserted into the\ndictionary\nso\nin this case it should be color so if i\nrun this\nit's going to return color green and now\nwhen i print out the dictionary it's not\ngoing to show color green because that\nwas already removed it removed the last\nitem\nyou can also check if a key is contained\nin a dictionary by using the in operator\nso we're going to say we're going to try\nto find out if\ncolor\nis in\ndog if there's a key called color in dog\nwe run that and it says\ntrue another thing we can do is get a\nlist with the keys in the dictionary\nusing the keys method so if i do dog dot\nkeys\nand then we'll run that it's going to\nshow the keys so the keys are name age\nand\ncolor\nwe can see that it's inside the thing\ncalled dick keys but we can also pass\nthis into list so we return an actual\njust the list part so now we can see\nit's just an actual list name age and\ncolor\nthen we can do the same thing with\nvalues so\ninstead of dog.keys let's do\nvalues\nprint that\nand you can see we have roger 8 green we\ncan pass it into a list\nto\nreturn the app just the list here\nroger 8 green\nand then finally if we just do items\n[Music]\nit's going to return all the items in\nthe list or all the items in the\ndictionary\nand convert it into a list\nso you can see\nthis is the first item in the list this\nis the second item and then we have the\nthird item here so\nwe can see each item of the list each\nitem of the dictionary is now in a list\nand then like a lot of the other things\nwe can use the length function and i'll\njust put dog\nand we can see that there are three\nitems in dog now you can also add a new\nkey value pair to the dictionary so\nlet's say i want to do\ndog\nfood\nor i it doesn't even have to be a single\nword i could put favorite\nfood\nand i'm going to say\nmeet\nand now we're going to print\nthat\nlet's see what do we oh\nthis was supposed to i did that a little\nwrong\nthere we go this is actually how you do\nit you put use the bracket notation\nequals and let's put what it equals\nthere okay now you can see that we now\nhave a new item on the list favorite\nfood\nmeet\nthen you can also delete an item from a\nlist or a delete a key value pair so i'm\ngoing to d e l means delete dog\nor\ndog there we go and this time i'm going\nto delete\ncolor and i'm just going to use single\nquotes instead of double quotes to show\nyou that doesn't really matter the type\nof quote and now you can see we don't\nknow what color\nthis dog is it's no longer a green dog\nand then you can also copy a dictionary\nso if you want to make two copies of a\ndictionary you can do\ndo like this dog copy that's the name of\nthe new dictionary i'll do dog dot copy\nand that would be the new\ncopied version of the dictionary\nokay now we are going to talk about a\nnew thing called sets\nsets are another important python data\nstructure\nsets kind of work like tuples but\nthey're not ordered and they are\nimmutable so you can change them\nyou can also say that they kind of work\nlike dictionaries but they don't have\nkeys\nthey're all they have an immutable\nversion of a set called a frozen set so\nlet me show you how you would create a\nset so let's do names\nand you we're going to use\ncurly brackets just like that\nand\njust like that so we have two names so\nyou can see the differences the a\ndictionary\nyou use the curly brackets but there's\ngoing to be key value pairs but this\ndoesn't have key value pairs in a list\nit's just going to be a\nitem after item like this but there's\ngoing to be brackets instead of curly\nbraces\nso\none thing about the sets is that they\nare not ordered\nso sets work well when you think about\nthem as mathematical sets\nso for instance let's have we're going\nto create a set 1\nwith roger and sid and we're going to\nhave a set\n2\nwhich is just going to have\nroger\nand so you can intersect two sets so\nuh the inner intersect\nthe intersection of these two sets will\nbe set one\nand\nset\ntwo so if i just print that out print\nintersect\nand then we can just run that and we're\ngonna see what so it's just roger so the\nintersection of these two sets are just\nroger the all the items that they have\nin common you can also create a union of\ntwo sets so\ninstead of just calling this union i'll\nput\nmod for modification and so i can show a\nfew different things with the same\nvariable name and the union symbol is\njust the\nstraight line like this it's not an i\nit's just the\nstraight line\nit's on the same key as a\nas the was it the forward slash\nbackslash one of the slashes\nnow we're going to get every single item\nin both sets which happens to in this\ncase just happen to be the same as set\none but if we change this one to the\nword luna it's just a different name and\nnow we're going to get each item\nin both sets or said luna roger for the\nintersection and then we can also get\nthe difference the difference between\ntwo sets so let me change this to back\nto roger and for the difference between\ntwo sets i'll use a the minus\nand\nthe difference is just going to be sid\nthat's the only thing that's different\nbetween the two sets\nyou can also check if a set is a\nsuperset of another and if a set is a\nsubset of another so how you would do\nthat is\nso we're just saying like is this\ngreater than that which means it has\neverything of the in the other set true\nnow if we put the other direction\nis does this set have everything in this\none no it doesn't\nyou can also count items in a set with\nthe length function that's pretty\nself-explanatory i won't even show it to\nyou we've seen the link function so many\ntimes\nyou can also get you can also get a list\nfrom the items in a set by passing the\nset to the list constructor so\ni'm just going to remove this\nand we will do\nlist\nset\none\nokay so now we have a list of the set\nand then you can check if an item is\ncontained in a set with the in operator\njust like the\nlist and the other way we the other\nplaces we use the in operator and then\none more final thing about a set a set\ncannot have two of the same item so\nthat's another thing that's useful about\nsets so if i type in rogers now we have\nroger sid roger if i play this we'll see\nit's only going to\nprint sid roger it's not going to add\nthe roger twice to the set\nso that's another\nuseful thing about sets is that make\nsure there's only one of each item in\nthe the set so if you have a list that\nhas multiple items you can convert it to\na set\num and then i'll just make sure there's\nonly one of each thing in that set\nnow let's talk more about functions\nwe already talked about functions in the\nlast section but we're going to do a\nreview and then go into even more detail\nabout functions so a function lets us\ncreate a set of instructions that we can\nrun when needed and i'm just going to\npaste in a function and again the\nindentation it can be either four spaces\ntwo spaces\nas long as it's indented the exact same\namount\nso functions are essential in python and\nin many other programming languages they\nhelp us create meaningful programs\nbecause they allow us to decompose a\nprogram into manageable parts and they\npromote readability and code reuse\nso this one is a function called hello\nthat just prints hello this is the\nfunction definition\nso there's a name called hello this is\nthe name here and then the body of the\nfunction\nwhich is the the set of instructions\nand the body of the function is\neverything that's after the colon\nand everything that's indented one level\non the right\nso to run this function we must call it\nso i can just type in hello\nhello\nand then this is the syntax to to call\nthe function and i can call it multiple\ntimes so i can just copy this and paste\nit and now if i just run this program\nit's going to print hello\nthree times\nthe name of the function is very\nimportant so the name of the function is\nhello it should be the function name\nshould be descriptive so anyone calling\nit can imagine what the function does\na function can accept one or more\nparameters this is something else that\nwe saw\nbefore\nbut\ni can type in a parameter right here and\nthis becomes a variable that we can use\nin the function so i can change this\ninstead of printing hello\nit's going to print hello\nand then we'll just put name\nand now i can call the function with the\nname\nand i can actually um call it with\ndifferent names so we'll do bow\nand we'll do\nquincy\nand then if i just play that we see\nhello bo\nhello quincy\nso\nas you can see we call the function by\npassing the argument\nand again you can use single quote or\ndouble quotes here it's better to be\nconsistent just always use single quotes\nor always use double quotes\nbut for teaching i like to switch it up\nto just to emphasize that you can use\neither so let me tell you about the\ndifference between parameters and\narguments\nthese two words parameters and arguments\nare sometimes used interchangeably\nand it's common to get confused about\nthe distinction\nwe call\nparameters\nthe values accepted by the function\ninside the function definition\nand arguments are the values we pass to\nthe function when we call it also an\nargument can have a default value\nthat's applied if the argument is not\nspecified so let me show you how i would\ndo that so we have it name so right now\nit always needs to be get a name well\nfirst let me show you what would happen\nif i called the function without passing\nthe name\ni'm just going to run that and we can\nsee we're going to get an error hello\nmissing one required positional argument\nname but we can make it so you can call\nthis function without passing in a name\nwhere it's optional you can't if you\nwant so i'm going to put an equal sign\nand then i'm gonna type in my friend\nand just to make consistent make this\nconsistent i'm gonna make this all\ndouble quotes\nokay so this is now an optional argument\nso it's it's you can pass in the name\nbut if you don't pass a name it's going\nto default to my friend so i'll just run\nthis again with that default\nvalue and now it's hello bow hill quincy\nhello my friend because we called this\nand we didn't specify any argument or\nparameter and then we can also accept\nmultiple parameters so i'm just going to\nget rid of this default value and i'll\nput 8 so now we're accepting a name and\nan age so we can now use both parameters\nin our function so i can do plus\nhello\nname\n[Music]\nyou are\nand we're going to add\nthe age\nand now it's going to be passed in as a\nnumber but we're going to convert it to\na string\nso you are\n[Music]\nyears old\nand then we have to make sure we have to\nmake sure to add a space in here so\nthere'll be a space space after this\nword then the number then a space and\nthen years old\nso i'm gonna now have to pass in the\nnumber\nand now i can run this function\nnow showing the red\nsquiggly lines\ni sometimes the the red squiggly lines\nwill appear when it's\nactually correct\nso let me what am i am i doing something\nwrong here\noh i need to put the parentheses\nif the red squiggly lines appears when\nit's actually correct they'll it they'll\ngo away\nusually within a few seconds or if you\nhit enter\nso that actually was a problem i forgot\nthe parentheses at the end um so\nyou can see this is what the whole\nfunction looks like\nif it's all on one line but i'm just\ngoing to\nmove that over so hello bo you are 39\nyears old so we've used the name and the\nage\nso parameters are passed by reference\nall types in python are objects but some\nof them are immutable including integers\nbooleans floats strings and tuples this\nmeans that if you pass them as\nparameters and you modify their value\ninside the function the new value is not\nreflected outside of the function\nlet me just give you an example of that\nso if i just i'm just going to paste in\nsome new code here and we can see we\nhave this function called change and\nwe're going to pass in this value if we\npass in this this valve variable 1 to\nthe change function and we set value to\n2\nwell then we're going to print the value\nand see what happens\nand you can see it's now just 1 here so\nso it didn't change the value\nthe value so what we change inside the\nfunction doesn't affect anything from\noutside the function\nand then you can see we have these\norange squiggly lines here local\nvariable value is assigned but never\nused it's just showing that actually\nthis isn't really doing anything once\nit's inside the function and we change\nit doesn't change anything outside the\nfunction\nso if you pass an object that's not\nimmutable you do change one of its\nproperties and the change will be\nreflected outside so this was\nmutable this is immutable an object that\nwould be\nmutable would be like a dictionary so if\ni change this to a dictionary and i put\nname\nand i set it to bow\nbut then inside the change i do value\ndot name or not i'll put the the\nbrackets value name\nso the key of this dictionary and i set\nthat to sid\nand i run this we'll see now the name\nhas changed to sin so we changed we use\nthe change function to change name to\nsid and now it actually is changed\nbecause a dictionary is mutable\nso a function can also return a value\nusing the return statement\nso i'm going to update this whole thing\nand talk about return statements a\nfunction can return a value using the\nreturn statement so it's going to return\nthis name that we then can continue to\nuse in our in our program it doesn't\nhave to return name it can return\nanything that happens inside the\nfunction\nand\nthe when the function meets the return\nstatement the function ends so you can\nhave a return statement have code after\nit but it will just end like for\ninstance if you have the return\nstatement in a conditional like in an if\nstatement we can also omit\nthe return the return value\nso it's just going to end the function\nand not return anything so i had\nmentioned having the return statement in\na conditional so that's a common way to\nend a function if the starting condition\nis not met\nlike for instance if we update the\nfunction to\nthis so if not name return this so if i\nmean if not name return\nor\nelse\nyou don't even need an else because this\nwill just in the function and you don't\neven need an else this will happen if\nthere is a name now we just said that\nyou have to pass in something if you\ndon't have a default value so the way to\nget to that would just be to call the\nfunction\nwith false\nso if we call with false then it's just\ngoing to return it doesn't do anything\nbut if we call it with\nbo\nthen let's see\nhello bo so you can also return multiple\nvalues by using comma separated values\nso\nfor instance i can i'm just going to\ntake this part off here and then add a\nreturn statement\nreturn and then i can return the name i\ncan return\nbo in case that's not the name i can\nreturn\n8 and then i can call this and i'm just\ngoing to call this with sid\nand we can see what happens\nnow\noh\nit doesn't it's not it doesn't actually\nprint what's been returned but if i\nprint this\nhere we go then we can really see what\nhappens so\nin this function it's going to print\nthis but now we're also going to print\nwhat's returned so let's see what that\nlooks like so\nthis is what when we print what was\nreturned it looks like this so it's sid\nbo\n8\nso one thing related to functions and\nalso related to other parts of python is\nvariable scope\nso let's look at this\nwe've declared a variable up here and\nwhen you declare a variable that\nvariable is visible in parts of your\nprogram depending on where you declare\nit\nso if you declare a variable outside of\na function the variable is visible to\nany code running after the declare after\nthe declaration including functions so\nwe call this a global variable so we've\ndeclared this before the function so we\ncan now access it inside a function and\nalso outside the function so if i\nso we can see 8 and 8 and it shows right\nhere what's going to\nshow in the\nconsole here\nbut if we declare a variable inside a\nfunction let me give you an example if\nwe declare\nthis variable\ninside the function i'm just going to\nmove it down to here\nnow it's a\nlocal variable and it's only visible\ninside the function so let me just\ndelete with this because it's not\nactually going to be\ndoing that so if i run this we're going\nto see there's there's an error\nname\nage is not defined we're trying to print\nthe age here but since the age was\ndeclared inside the function it's not\navailable outside the function it's only\navailable\ninside the function\nso you just have to be aware sometimes\nthere's local variables that only apply\ninside the function and there's global\nvariables if you that can apply inside a\nfunction and outside a function\nokay now let's look at something else\nwith functions and this is nested\nfunctions\nfunctions in python can be nested\ninside other functions\na function defined inside a function is\nvisible only inside that function this\nis useful to create utilities that are\nuseful to a function but not useful\noutside of it so you might ask why\nshould i be hiding this function if it\ndoes no harm\nwell one because it's always best to\nhide functionality that's local to a\nfunction if it's not useful elsewhere\nalso because we can make use of closures\nwhich we'll talk more about later so so\nlook at this example so we have this\nfunction talk and inside the function we\ndefined another function called say\nand then\nwhat we\nwhat we do is that we can call that say\nfunction\ninside the function and so the way this\nworks is we pass in the phrase so here's\nthe phrase and the phrase i'm going to\nbuy the milk\nand here we do we we split it so split\nis a way to\ncreate a list\nof out of this string so we have this\nstring but it's going to split it on\nevery space so it's going to create a\nlist of each word individually and then\nwe're going to run this loop\nmore on loops later\nand we're going to for every word in the\nthe words list we're going to say\nthe word we're going to say the word\nit's just going to print the word so if\ni just run that i am going to buy the\nmilk and every time it prints it it\nprints it on a new line so this would\njust be an example because we're never\ngoing to want to use this save function\noutside the talk function so it's better\njust to put it inside the talk function\nand then i'll just paste in\nanother example here if you want to\naccess a variable defined in the outer\nfunction from the inner function\nyou first need to declare it as\nnon-local\nso\nwe're using non-local here at non-local\ncount and this allows us to access this\nvariable that was declared inside the\nout so this is the outer function count\nand we have this variable called count\nand to be able to access that variable\nin the inner function we have to\ncall non-local or we already talked\nabout variable scope and if we didn't\ncall\ncall this non-local then we could not\naccess the count variable from inside\nthe function so like for instance i'm\ngoing to run this it's going to print\nthe count which is just count plus 1 is\njust adding 1 to this number that's all\nthe function does but if i take off this\nword non-local here and i run this we're\ngoing to get an error because it doesn't\nknow what count is it doesn't know that\nwe're referring to this count in the\ninner function so we'll just put that\nback on there and then it should work\nagain\nthis is especially useful with closures\nwhich we're just about to talk about\nso closure is a special way of doing a\nfunction in python if you return a\nnested function from a function that\nnested function has access to the\nvariables defined in that function even\nif that function is not active anymore\nso let me show you an example i'm going\nto paste some code that'll be very\nsimilar to this code but just a a little\ndifferent and then i'll explain it so\nnow instead of count it's a counter so\nwe're returning count from this nested\nfunction and from the outer function\nwe're returning the nested function\nwe're returning the increment function\nand then here instead of just calling\nthe function directory the outer\nfunction we're assigning it to this\nvariable and now we're going to print\nwe're just going to call we're going to\ncall this variable which is the returned\ninner function so we're basically\ncalling the inner function and it's\nstill going it's because we're calling\nthe inner function it's not going to\nreset the count to zero every time and\nit can keep track of that value and we\nhave this\nusing a comment what it's going to\nreturn but we can also\nrun the program and we can see one two\nthree just like that so we return the\nincrement inner function and that still\nhas access to the state of the count\nvariable even though the counter\nfunction has ended\nso let's move on to\nobjects\n[Music]\neverything in python is an object\neven values of basic prim of types like\nintegers strings floats are objects\nlists are objects as well as tuples\ndictionaries and pretty much everything\nso objects have attributes and methods\nthat can be accessed using the dot\nsyntax for example let's define a new\nvariable of type int so i'm going to do\nage equals eight\nage now has access to the properties and\nmethods defined for all int objects\nthis includes for example access to the\nreal and imaginary part of that number\nso i can do\na print\nage dot real\nand then if i just run that\nthe real part is eight i can also print\nthe imaginary\npart of the number\nand manage\nand there is no imaginary part of the\nnumber so it just\ndoes zero i can also get the the bit\nlength age dot\nbit\nlength\nand if i run that\nwe can see the bit length is four so the\nbit length method returns the number of\nbits necessary to represent this number\nin binary notation\nso there's just a lot of\nthings that you can use for all int\nobjects and these are just a few of them\nso a variable holding a list value has\naccess to a different set of methods so\ni'm going to\nupdate this again we're going to do\nitems\nequals and we're going to create a list\none\ntwo\nso\ni can do\nitems dot\nappend\ni can append a three i can append\nanother item i can do\nitems dot pop\nwhich is going to\nremove and return the last item which is\nthe three\nand the methods so so these are the\nmethods of pin and pop and the methods\navailable to an object depend on the\ntype of value\nthe id global function provided by\npython lets you inspect the location in\nmemory for a particular object so for\ninstance i could do a print and i'm\ngoing to do id what's the id of the\nitems\nobject\nand we can see this is the location in\nmemory\nso some val some objects are mutable\nwhile others are immutable this is\nsomething that we already talked about a\nlittle bit that depends on the object\nitself if the object provides methods to\nchange its content then it's mutable\notherwise it's immutable\nmost most types defined by python are\nimmutable for example an int is\nimmutable there are no methods to change\nits value so if you increment the value\nlike with um\nage equals age\nplus\none\nit's actually going to create an\nentirely\nnew value\nso it it's not going to even be the same\nobject at all because age you it has to\ncreate a whole new one to reassign it\nbut something like a in in a dictionary\nit would actually be the same object but\nyou could just change different parts of\nit now let's talk more about\nloops\nso this song we already discussed a\nlittle bit in the previous section but\nloops are\none essential part of programming\nand in python we have two kinds of loops\nwhile loops and for loops\nso before i um show i'm going to paste\nin this code but i just want to show\nsomething really quick see how there's a\nline like dotted line here and a dotted\nline here this is showing the default\nindentation which we can change so i'm\nactually going to go and change\nthat really quick let me wait i think\ni'm gonna have to yeah i'm gonna zoom\nout so i can get to this and i'm gonna\nchange the indent to four and now it's\nnot going to have a little line right in\nthere so now i'm going to go back here\nand let's zoom in again\nokay so let's talk about\nwhile loops\nwhile loops are defined using the\nwhile\nkeyword\nand they repeat their block until the\nthe condition is evaluated as false so\nwhile condition equals true so\nthis particular example is an infinite\nloop it never ends because this\ncondition is always going to so if we\nrun this program which i'm not going to\ndo right now because it just goes on\nforever while this condition is true\nkeep running the code inside the loop\nall the lines of code that are indented\nthe same amount\nso let's halt the loop right after the\nfirst iteration i can do condition\nequals\nfalse\n[Music]\nso now if i run it it just runs the loop\none time\nso in this case the first iteration is\nrun as the condition is evaluated true\nand then at the second iteration the\ncondition test evaluates to false so the\ncontrol goes to the next instruction\nafter the loop which in this case there\nis no next instruction after the loop\nit's common to have a counter to stop\nthe iteration after some number of\ncycles\nso here's a while loop with a counter so\nyou you start the counter at zero and\nthen while count is less than 10.\nwe're we're gonna print this count\nequals count plus one so it's going to\nincrement the counter every time\nuntil we get to the end so it's gonna\nsee it's gonna print this until\neventually the count is\ngreater than 10\nso or 10 or 10 or greater while count is\nless than 10. so once it gets to 10 the\nloop will stop um again another way to\ndoing to do this we could have just done\nplus equals plus equals one so if i run\nthat it's going to do the exact same\nthing\nand other type is the for loop so using\nfor loops we can tell python to execute\na block for a predetermined amount of\ntimes up front and without the need of a\nseparate variable and conditional to\ncheck its value\nit's commonly used to iterate the items\nin a list so we have this list there's\nobviously four items here and then four\nitem in items so items is this list and\nthen for each item in the list we're\ngoing to print\nthe item pretty straightforward and it\nprints each item in the list\nor you can iterate a specific amount of\ntimes using the range function so let's\nsay we don't have we're not going to\ndefine this here we're just going to do\n4 item in and then here i'm going to\ntype in range\nand then i'm just going to type in a\nnumber how about\n15\nso i'm using the range function that\nbasically just returns a list and then\nif i do that we can see it's going from\n0 to 14. so the range function is going\nto return a\na list that goes from 0 to 14 so there's\n15 items and it's going to print the\nitems\nnow if we just go back a few steps to\nwhen we had the list here\nwe can i can show you how to get the\nindex so right now it's just printing\nthe items one two three four but what if\nwe want the index of the list\nwe can do that by using the by wrapping\nthe sequence in the enumerate function\nso for items in and then\ni'm going to do\nenumerate\ni'm going to pass in\nso this is going to return\neach item and\nthe index of the item and since there's\ngoing to be an item in an index\nbut it's actually the index and then the\nitem i'm going to type an index comma\nitem so this enumerate is going to get\nthe index and the item so now i can\nprint the index and the item here and if\ni run that\nso index zero item one index one item\ntwo index two item three and so on and\nit doesn't even have to be numbers we\ncan\ndo names\n[Music]\nand if i just run that whoops not that\none\nand then we can see the the index and\nthe item then let me put in some more\ncode here so i can talk about break and\ncontinue\nboth while and for loops can be\ninterrupted inside the block using\neither break or continue\ncontinue stops the current iteration and\ntells python to execute the next one\nand break stops the loop altogether and\ngoes on with the next instruction after\nthe loop ends so i'm going to just play\nthis so here we're saying if item equals\ntwo continues that means it's going to\nskip that iteration so if i play this\none three four so it's not going to it's\nnot going to get to the print item\nbecause it's actually skipped that\niteration it just\ndoesn't run any code after the continue\nif this is true\nand so it doesn't print 2. so if we\nchange this to break it will be very\nit'll be a little different here this\ntime it's going to just print one\nbecause now it's breaking out of the\nloop\nentirely and it's not going to run any\nmore iteration of the loop\nokay let's talk about another thing\nclasses classes in python\nso in addition to using the python\nprovided types we can declare our own\nclasses\nand from the classes we can instantiate\nobjects\nan object is an instance of a class\na class is the type of an object so\nhere's an example i'm going to create a\nclass called\ndog\nso\nuh to create a class you just put the\nword class and then put the the class\nname\nand\nnow\ni can i can\nadd a method for the class so to define\na method i'll just do define bark\n[Music]\nand i'm going to put the word self here\nand inside this i'll print\n[Music]\nwoof\n[Music]\nokay so self as an argument of the\nmethod\nwill point to the current object\ninstance and must be specified when\ndefining a method so when you're\ncreating a method inside a class you're\nalways going to start with self so we\ncreate an instance of a class\nwhich is an object\nlike this\nso i'm just going to put\nroger\nequals\ndog\nokay so i've created a dog just like\nthis\nand then i can\nprint\ntype\nroger so let's see what the type of this\nroger is we can see it's the class to\ndog class\nroger is a dog\na special type of method\ncalled in there's a special type of\nmethod called init which is a\nconstructor\nso let me show you how to create a\nconstructor\ndeaf\nso we can use this\na constructor like this\nto initialize one more properties when\nwe create a new object from that class\nso you can see we always have to add\nself but now these are the two\nvariables we can pass in when we create\na dog and that will associate be\nassociated with that\nthat\nobject\nso down here i can call um i can call\ndog but i can pass in roger for the name\nand\nthe age\nand now when we create this\ndog it's going to assign the name to\nself.name and it's going to assign the\nage to self.age and let me show you how\nyou can access that information\nso i'm going to print instead of\nprinting the type i'm going to do roger\ndot name\nand now it's going to when i do\nroger.name that's self.name so self is\nroger and we do self.name it's going to\nbe the name that was passed in\nand then we can also\ndo the age\nand then we can finally\ncall the bark method so we have bark\nhere now we can see what that does so\ni'm just going to run that\nand we have roger\nwe have eight\nand then\nthis is because i should have put\nparentheses here so let me put\nparentheses after bark\nand so we have wolf here so roger 8\nwolf and the reason why it says none\nhere is because i didn't have to put the\nprint see i i put pranks that was in\nthis groove if you're playing print on\neverything but calling bark\nalready prints wolf\nso when i do\nit when it's when it's printing it's\nprinting because since\nroger.bark doesn't return anything\nthere's no return statement that's why\nit printed none so there'd be two ways\nto fix that either instead of printing\nwolf i could return wolf\nor i could just not do the print here so\nlet me just take that off\nokay roger 8\nwolf\nso one important feature of class is\ninheritance let me show you an example\nof inheritance i'm going to create a new\nclass before the dog class and this is\ngoing to be\na class\ncalled\nanimal\nand the animal class i'm going to put a\nfunction called walk\nand i'm going to always pass in self\nand this is going to print\n[Music]\nwalking\n[Music]\nand then we can make the dog class\ninherent inherit from the animal class\nso we have class dog but if i put\nparentheses here\nthen i can type in animal\nand now the dog class is going to\ninherit from the animal class and now i\ncan go down here and after roger.bark i\ncan do roger.walk\nand if i run that\nokay so roger 8wolf but now it's going\nto be able to do walking and you can see\nthe dog class doesn't actually have a\nwalk method but it's getting it from\nthe animal class it's inheriting this\nmethod\nand in that way you're able to i could\ncreate a class cat a class frog\na class bird and each of them could\ninherit the walk\nmethod and then it would have\nwalking\nand we'll be doing a little more with\nclasses in the the final project\nin this course\nbecause we'll be going a little more\nover object oriented programming\nbut right now let's talk about something\nnew i'm going to just delete all this\nand we're going to be talking about\nmodules\nso every python file is a module you can\nimport a module from other files and\nthat's the base of any program of\nmoderate complexity as it promotes a\nsensible organization and code reuse so\nit's basically how you can create a\nsoftware that has multiple python\nprograms in the same piece of software\nso in the typical python program one\nfile acts as the entry point and the\nother files are modules and exposed\nfunctions that we can call from\nother files so\nlet me just show you an example i am\ngoing to\nopen up this\nfiles tab and i'm going to create a new\nfile and this is going to be called dog\ndot pi\nand now i have dog dot pi open i no\nlonger have the main dot pi open and i'm\ngoing to define\nbark\nand what bark is going to do is just\nprint\nwoof\n[Music]\nokay now i'm going to it's just going to\nautomatically save for me i'm going to\ngo back to the the python file and now\ni'm going to\nimport\ndog\nand let's see oh it's just saying it's\nunused i thought maybe this thing wrong\nbut that just means i import dog and i\nhaven't used it which i'm about to do\nright now so dog\ndot\nbark\nso now if i run this program\nit's going to say wolf but that's not\nfrom this file it's actually importing\nthis function from from the dog file so\nthat's a way you can\nbreak up your code into multiple files\nwe can also use the from import syntax\nand call the function directly\nlet me show you what i mean so instead\nof import dog i'm going to say\nfrom dog\nimport\nbark\nand then instead of calling it dog.bark\ni can just call\nbark\nbecause we're only importing bark well\nwe've imported bark directly instead of\nthe whole dog so i can run that and it\nsays\nwolf\nso\nthe first strategy allows us to load\neverything defined in a file when i just\nsaid\nimport dog that\nallows everything defined in a file so i\ncould have a bunch of function like bark\nor walk\nname or there could be a bunch of\nfunctions if i just say import dog it\nimports all of them but the second\nstrategy from dog import bark allows us\nto just pick the things we need so we're\nonly going to import the specific\nfunctions that we need\nthose modules are specific to your\nprogram and importing depends on the\nlocation of the file in the file system\nso\nsuppose you put dog.pi in a\nsubfolder for instance let's say i\ncreate a folder\nand i call it liv for library and let's\nsay i put dog.pi in this subfolder like\nthis\nnow in this folder to make this work i'm\ngoing to have to create an empty file\nnamed init.pie so i'm going to add file\nand i'll do init dot or under underscore\nunderscore init underscore underscore\ndot pi\nand this tells python that\nthe folder contains modules\nnow i'm going to go back to my main file\nand i can\ni can import dog from\nlib so i'm going to say from\nlib\nthat's that subfolder import\ndog\nand then i can do\ndog\ndot bark so let's run that to make sure\nthere's no errors it worked\ncorrectly so i was able to import this\nfile from the subfolder\nor you can reference the dog module\nspecific function by importing from\nlib.dog so i can do from\nlib.dog\nimport\nbark and now instead of calling dog.bark\ni can just call\nbark\nand it says\nwolf\nso i'm going to close this here\nand\nnow let's talk about the python standard\nlibrary so basically there's all these\npre-built modules you can\nyou can load a lot of code from the\nstandard library python exposes a lot of\nbuilt-in functionality through its\nstandard library\nthe stand library is a huge collection\nof all sorts of utilities ranging from\nmath utilities to debugging to creating\ngraphical user interfaces\nso there's a bunch of them but here's\nsome of the more common ones we have\nmath for math utilities re regular\nexpressions json to work with json date\ntime sqlite 3 os for operating system\nutilities random for random number\ngenerations\nso\nstatistics requests for http request\nhttp to create servers url lib to manage\nurls so you can import these modules\nthat allow you to get extra\nfunctionality so\nwe already looked at a little bit at the\nmath one we already looked a little bit\nat random in the the first\nuh project that we did but let's just\nkind of look at a little more how you\nwould do this so now we are going to use\nthe the math one we're going to import\nmath\nand\nso this is how you would introduce you\nwould use a module of the standard\nlibrary so we already saw how to import\nmodules that we created it's very stan\nit's very similar with the standard\nlibrary so now that i've imported math i\ncan now use\nfunctions and methods from from the math\nmodule so i can do math dot\nsquare root and i can pass in 4 and then\ni can just\nprint that so we can see what the result\nis\nokay 2.0\nor we can\njust like we shall\nwe saw before instead of importing math\ni can say\nfrom math\nimport\nsquare root and then instead of just\ndoing math dot square root i can just\ncall\nthis\nsquare root method here and it's going\nto do the same thing so that's basically\nhow it works for for all the modules in\nthe standard library okay now we're\ngoing to start going over a few kind of\nmiscellaneous\nslightly more advanced topics in python\nso we're going to talk about how to\naccept arguments from the command line\nin python\nwell first of all let's see how to run a\nprogram from the command line\nin replit so let's say we have a program\nit just says print\nhello okay so we've been running it by\njust clicking this play button but\nthere's another way to run a program in\nreplit and i go over to the shell so\nthis is the command line in replica we\ncan clear this\nand now i'm just going to type in\npython main dot pi\nokay so what we call python to run the\npython program and then we just put the\nname of our file with main.pi\nso\nwhether you're in replit or if you're\nrunning things locally\nyou should be able to\nrun a program in the same way\ndepending on how you install the program\nlocally instead of typing python you may\ntype in python 3.\nsometimes the way people install python\nit will be python 3 because we're using\nversion 3 of python\nso now let's see how you can\ncall a python a program on the command\nline and pass in some arguments right\nwhen we run the program from the command\nline\nso\na basic way to handle arguments is to\nuse the sys module from the standard\nlibrary so let me give you an example so\nfirst of all we're going to import sys\nnow just so you know usually you're\nalways going to have import statements\non the first line i'm just putting this\ncomment on the first line to remind us\nwhat we're working on right now so now\ni'm going to we're going to import the\nsys library\nnow i'm going to\nprint\nand i'm going to first i'm going to\noh\nwe're going to print the argument\ncis.arg\nthe\nso this is how we can print all the\narguments that were passed in\nwhen we called the program so so i'm\ngoing to see we have python main.pi and\nnow i'm going to put\nbow\n39\nokay so you can see it's printing the\nlist of arguments so this is basically\njust a list the first item is the name\nof file\nthen we have\nthe the first word and then the second\none and you can see they're both strings\neven though this is a number it's coming\nin\nas a string so then we could do\nsomething like this we could say name\nequals cis.arg v\nand then i would\nget the element at index 1 which is the\nname here and i could print\n[Music]\nhello\nand then we're going to do a name oh\nhello hello and then name so let's call\nthis again\nand instead of i'm not going to do 39\nit's just going to be python main.pi bow\nhello bo so we've now been able to use\nthe argument that was passed in\nnow this is a simple way to do it but\nyou\nreally would have to do a lot of work\nusing this method because you really\nshould validate the arguments make sure\nthe type is correct and you need to\nprint feedback to the user if they're\nnot using the program correctly\nso i got zoomed out a little bit and i'm\ngoing to show you this other method\nso python provides another package in\nthe standard library to help you called\narg parse so first you would insert\nimport arg parse\n[Music]\nand then let me show you\nhow you would use it\nso you call arc parse dot argument\nparser\nand then pass in the description of the\nprogram so the description of the\nprogram is this program prints the name\nof my dogs\nthen\nyou proceed to add arguments you want to\naccept\nso for this example program we are going\nto accept the c option or it can be\nslash\nc or dash that's color\nand we are going to\nbe calling it color and then later we\ncan we do\nparser.parse args\nand then we can access args\ndot color to get the color that was\npassed in and then you can specify\nwhether it's required and what help is\ngoing to go along with that so let me\nshow you how you would do that\nwe're going to do python\nmain dot pi i'm going to put dash c and\nthen i'm just going to put red\nokay so\nyou can see if i\ngo this out a little more you can see\nthis is the\ncommand i called this is the command i\nrun i pass in red and then it just\nprinted red that's what we have right\nhere\nand so let me show you what would happen\nif we if we\ndon't specify the argument so if i just\nrun it without the red so it's now\ngiving me\nsome information usage well main.pi we\nneed to put dash c and then we have to\nput a color and then it says the\nfollowing\narguments are required this dashi or\ndash sc so it's it's showing us that we\nneed to\nif we we've called the program wrong and\nwe're going to need to call it with the\ndash c\nyou can also\nset this option\nwe can set an option to have a specific\nset of values using choices so after\nrequired true after this comma i'm going\nto type in choices and i'm going to set\nthis to equal\nsee i have this empty\ndictionary\nbut i'm just going to well not a\ndictionary but\nbecause it's not going to key value\npairs i can do red\nand yellow\nso now it's it can only accept\ntwo options so i can\ncall it here\nwith\nred\nbut if i call with blue\nit will say\ninvalid choice blue i need to choose\nfrom red or yellow so\nusing this arc parse makes it easier to\ndeal with arguments and also makes it\neasier to\ncommunicate information back to the user\nabout what we're trying to get\nso there are more options with this but\nthose are those are the basics\nnow let's talk about something\ncompletely different\nlambda\nlambda\nfunctions\nso let me just give you a quick example\n[Music]\nlambda num\nnum\n[Music]\ntimes\n2. so\nlambda functions\nalso called anonymous functions are tiny\nfunctions they have no name and only\nhave one expression as their body\nso they're defined using the lambda\nkeyword and so\nthis is going to be the argument\nand this is going to be the expression\nthe body must be a single expression and\nit has to be an expression not a\nstatement so this difference is\nimportant an expression returns a value\na statement does not so it has to return\na value so the value that's being\nreturned is the number times two the\nnumber that was passed in going to\nmultiply it by 2 in this example\nso this is basically the simplest\nexample of a lambda function it just\ndoubles the value of a number and lambda\nfunctions can accept more\narguments so\nso for instance i could do\n[Music]\nlambda\na comma b\nand then we can multiply a times b\nlambda functions cannot be invoked\ndirectly but you can't assign them to\nvariables so for instance i can assign\nthis to the variable called\nmultiply so multiply is going to this\nfunction is going to be assigned to this\nvariable here so then the way that i\nwould use that i could print now i'll\nprint the result of calling multiply\nand then i pass in\ntwo\nand four\nso if i just run that okay 2 times 4 is\n8. we can see right in the console here\nand then i'm going to just\nzoom in just a little bit\nso the utility of lambda functions comes\nwhen combined with other python\nfunctionality for example in combination\nwith map filter and reduce so speaking\nof map filter and reduce that's what\nwe're going to talk about now map\nfilter\nreduce\nso python provides three useful global\nfunctions we that we can use to work\nwith collections so this is map filter\nreduce so first let's talk about\nmap and since their functions are going\nto have the\nparentheses at the end so map is used to\nrun a function\nupon each item in an iterable item like\na list and create a new list with the\nsame number of items but the values of\neach item can be changed so here's an\nexample we have this list\nand then here's the function\nand then we are going to map through\neach item in the list\nand so here's the function we're going\nto run we're going to run this function\non each item in the list\nand now we're going to get a new list so\ni can do print\nresult now if we print that i'll just\nrun that function and we can see\nokay we get a map object\nso then we can always just pass it into\nthe\nlist function\nand then we can\nrun the program again two four six so\none two three became two four\nso yeah whenever you want to do run a\nfunction on each item in a list you can\nuse map\nand when the function is a one-liner\nit's common to use a lambda function so\nwe just talked about lambda functions so\nnow let me show you how you would do\nthis as a lambda function so\ndouble\nis going this is going to be a variable\nand we're going to assign it to a lambda\nfunction\nand i'm going to\nso now this lambda function takes the\nnumber\na\nand then does a times two so and this we\njust keep the same because now we're\nusing a lambda function here and we're\ntaking each number and passing it\nthrough this function where we have the\nthe this is each number in the list and\nwe multiply it so if i run this program\nit should look exactly the same\nand we can even simplify it even more so\nthis is where lambda functions really\nshine instead of assign it assigning it\nto double first i can copy the whole\nfunction i can delete this completely\nand now i can just put it right in here\nso now we're mapping over this function\nand we don't even have to create the\nfunction in a different line and assign\nit to a variable first we can put the\nlambda function right in the same line\nright within the map and now i run this\nand it's going to give us the same\nresult so remember we started with\nwhen i first showed you this example we\nhad a much longer piece of code now\nwe've simplified it with the\nlambda function\nso the original list the original list\nis left untouched in a new list with the\nupdated values is returned by map\nthe result is a map object which is an\niterable so\nthat's why we needed to cast it to list\nto print its content\nokay now let's talk about filter\nlet me put in let me just update the\ncode here it's kind of similar but now\nwe're using filter filter takes an\niterable and returns a filter object\nwhich is another iterable but without\nsome of the original items so you can do\nso by returning true or false from the\nfiltering\nthe filtering function so here's the\nfiltering function we are going to check\nif the item passed in is even so\nso here's the list here so\nyou can see we're calling filter we pass\nin the function the filtering function\nand then the list\nand we're going to return true or false\nfrom this function so if it can be if\nit's divisible by if when you divide it\nby two we have zero remainder\nthen it's even\nso\nthat would return true so this line\nwould return true\nand then if not it would return false if\nit's odd so now any even number is going\nto be added to the result and any odd\nnumber is not going to be added to the\nresult so basically we're filtering the\nlist based on this function and then\nhere we just print\nwe convert that result to a list and if\nwe run that it's two and obviously if we\ncan just put in\nuh more numbers here\nand run that again\nwe have two four six\nand then we can just like before we can\nuse a lambda function so\ni'm just going to\ncopy this here we can just delete this\nwhole thing and we are going to put a\nlambda function here so lamb\nduh\n[Music]\nso now you can see we're just putting\nthe lambda function in the in line here\nand we are checking to see if it's this\nis going to turn true or false whether\nit's even or not\nand so i run the program and it's going\nto give me the exact same result here\nokay the final thing we're going to talk\nabout is reduce\nreduce is used to calculate a value out\nof a sequence like a list so for example\nsuppose we have this list of expenses\nstored as tuples\nand so so we had dinner 80 car repair\n180 or 120 and we want to calculate the\nsum\nof this property\nin each tuple\nin this case the cost of the expense\nso here's kind of the long way of doing\nit without using reduce\nwe basically take every expense in\nexpenses and then we add to the sum here\nand we add expense one that's going to\nbe the\nthe item at index one and then we get\nthe sum and we can print the sum so\nthat's kind of like the long way of\ndoing it without reduce but there's a\nquicker way so\nto use reduce reduce is a little\ndifferent from map and filter where it's\nnot available it's not it's not\navailable automatically we have to\nimport it from the standard library func\ntools so i'll do from\nfunk\ntools or function tools\nimport\n[Music]\nreduce\nand now i'm going to\ncreate a new i'm going to create a new\nvariable called sum\nand we're going to set it to\nreduce we're going to use reduce and now\ni'm just going to\npass in i'm going to go directly to the\nlambda function so\nlambda\nlet me just kind of explain this for a\nlittle bit so reduce the first is going\nto take a function the reduction\nfunction\nand then\nthe iterable here\nand the function has to take two\narguments\nso this the first argument is the\naccumulated value and then the the right\nargument is\nthe updated the update value from the\niterable so we're going to\ncontinue adding\nthese two item we're going to\nbasically add every item together and\nreduce\nthe\ni the numbers at the first index all\ninto down to one value by adding them\nall together so i'll just\npray here play here and then we get the\nsame number 200 and you can see it's a\nlot it's a lot quicker just to use the\nreduce function compared to the other\ncode we had previously\nokay next up we are going to talk about\nrecursion\nin\npython not recursion error just\nrecursion\nand a function in python can call itself\nthat's what recursion is and it can be\npretty useful in many scenarios a common\nway to explain recursion is by using the\nfactorial calculation\nso let me show you how you would\ncalculate factorial this isn't python\ncode this is just an example here so a\nfact when you do 3 factorial that means\nyou do 3\nyou multiply every number between three\nbetween this number and one together so\nthree times two times one equals six\nfour factorial is four times three times\ntwo times one five factorial is you know\nfive through one and so on and then\nevery number you multiply every whole\nnumber down to one so using recursion we\ncan write a function that calculates the\nfactorial of any number so let me show\nyou so here's the function you can see\ninside the function it's calling the\nsame function so a recursive function\nit's always going to have a base case\nthat's this\nand the recursive case so the base case\nis when we're going to leave the\nthe recursive function so if n is equal\nto one we're going to return one and\nthat's basically going to get out of the\nrecursive function uh but if n is not\ngoing to equal one then we have the\nrecursive the recursive case where we're\ngoing to call the function so you always\nneed to have at least you always have\nneed to have a base case so eventually\nthe recursion can stop\nif the recursion doesn't ever stop\nthen you're going to get a recursion\nerror\nbasically python by default will halt\nrecursions at 1000 calls and that's when\nyou get the recursion error so this is\ngoing to get the factorial three but\nlet's just do this a few more times so\nyou can see the difference so three\nfour\nfive and now we'll test this out\n6 24\n120.\nokay now let's talk about decorators\nso decorators in python are a way to\nchange enhance or alter in any way how a\nfunction works decorators are defined\nwith the at symbol followed by the\ndecorator name just before the function\ndefinition\nso for instance let's say we have a\nfunction\nhello\nand it's just going to be the simplest\nfunction we're just going to print\nhello\nuh so\nto make that to add a decorator i'm\ngoing to put like this an at sign and\nthen the decorator name in this\ncase we're going to type in log time so\nthe function has the log time decorator\nassigned so\nwhenever we call the hello function the\ndecorator is going to be called a\ndecorator is a function that takes a\nfunction as a parameter wraps the\nfunction in an inner function that\nperforms the job it has to do and\nreturns that inner function\nso for instance i'm going to create\nanother function here that's going to be\nthe log time function\nand now we we can do something before\nand after the function like for instance\nwe can say\nprint\nbefore\nand then after\nwe are going to print\nafter\nnow if i run this\noh and we have to call the function\nthat's always important\nnow if i run this\nbefore hello after\nso you're going to often use decorator\nfunctions when you want to change the\nbehavior of a function without modifying\nthe function itself so a few good\nexamples are when you want to add\nlogging test performance perform caching\nverify permissions and so on\nyou can also use one when you need to\nrun the same code on multiple functions\nokay now let's talk about doc strings so\ndoc strings\n[Music]\ndocumentation is hugely important not\njust to communicate to other people what\nthe goal of a function or class or\nmethod or module is but it's also it\nalso communicates to yourself when you\ncome back to your code like many months\nfrom now you might not remember all the\nknowledge you were holding in your head\nwhen you wrote the code so at that point\nreading your code and understanding what\nit's supposed to do\nso that at that point reading your code\nand understanding what it's supposed to\ndo will be a lot more difficult so a lot\nthat's one of the reasons why people add\ncomments so another way is to use a doc\nstring so let me show you what a doc\nstring looks like\nthe utility of a doc strings is that\nthey follow conventions\nso they can be processed automatically\nso this is how you would define a doc\nstring for a function\nbasically you're putting the three\nquotation marks here three quotation\nmarks there and then this is a\ndescription of what the function is\nthis is how you would define a doc\nstring for a\na class and a method so\ngot the class this is what the class\ndoes is this is what the method does\nand then it's also common to\nadd docs place a doc string at the top\nof the file so if you put a doc string\nat the top of the file it's going to\nlook like this\nand it's going to explain what the file\nis all about\nand docs stock strings can also span\nmultiple lines just like this is a\nmultiple line docs string as long as it\nhas the three quarts three quarters at\nthe top three quarts at the bottom\nand then python will process the doc\nstrings and you can use the help global\nfunction to get the documentation for a\nclass a method a function or a module\nfor example i'm going to go to the\nbottom of this and i'm going to say\nprint\nhelp\nand then i'm just going to type in\ndog now i'll run this\nand let me just run it again\nso now you're going to get information\nabout the dog we know that the dog has a\nname and age it's a class representing a\ndog and the has these specific\nmethods\nand then it says more we can get more\ninformation data descriptors defined\nhere we have\nand this is just going to give us all\nthis information\nabout\nthe dog and we and so that's why it's\ngood to use doc strings because there\nare specific standards and it makes it\neasier to get information using\ndifferent helper methods\nand standards allow\nand standards allow us to have tools to\nextract doc strings and automatically\ngenerate documentation for your code so\nbesides just this help functions there's\na lot of other methods to pull out these\ndocs strings and get information about\nyour code and next we will learn about\nannotations\npython is dynamically typed so we do not\nhave to specify the type of a variable\nor function parameter or a function\nreturn value\nannotations allow us to optionally do\nthat so if we want to actually show what\ntype we're expecting for different\nvalues so here's a function without\nannotations and then here's how we would\nmake it have annotations so uh we want\nto make this function only accept an int\nso i'm going to put colon int\nand then after here\ni'm going to put\nactually before the colon here i'm going\nto put a little arrow here\nand then i'm going to put in int so now\nwe're specifying that this function\nreceives an int and then it's also going\nto\nreturn an end\nand you can do the same thing with\nvariables so if we have a variable if i\nhad a variable called count and was\nequal to zero i can add an annotation to\nmake it be an int like that so now\nwe're specifying that this variable is\ngoing to be an integer\npython will actually ignore these\nannotations a separate tool called mypi\ncan be run standalone or integrated by\nides to automatically check for type\nerrors statically while you're coding\nit'll also help you catch tight\nmismatched bugs before even running the\ncode\na great help especially when your\nsoftware becomes large and you need to\nrefactor your code\nokay now we'll talk about exceptions\n[Music]\nit's important to have a way to handle\nerrors and python gives us exception\nhandling to do so so for exception\nhandling you would wrap lines of code in\na try block\nand then inside this block you'll put\nthe lines of code and then if an error\noccurs\npython will alert you and you can\ndetermine which kind of error occurred\nusing an accept block so\nwe're we're trying some lines of code\nhere and then we're checking for a\nspecific error and then if that error\nhappens we would handle that error but\nif a different error happens then we\nwill handle the different error you can\nalso catch\nall exceptions\nusing an accept without an error type so\nat the very end you could just do accept\nand then if you don't have an error type\nthen it's going to handle the rest of\nthe exceptions and just to make this\nclear this is just an example where it\nsays air one you have to put a specific\nerror in that spot\nyou can also put an else block at the\nend to handle that that will run if the\nno exceptions are found so if there are\nno errors in this code that's right up\nhere we can have an else and then run\nspecific code at the bottom that that\nruns if there's no errors\nand then we can have a finally block so\nanything\nin a finally block is going to just\nalways run at the end whether or not\nthere are exceptions or no exceptions\nthe code in the final block is always\ngoing to run the specific error that's\ngoing to occur depends on the operation\nyou're performing for example if you're\nreading a file you might get an eof\nerror would just look like this eof\nerror which means end of file\nif you divide a number by zero you'll\nget a zero division error if you have a\ntype conversion issue you might get a\ntype error so\nlet's try this code\nso i'm going to just delete all this and\nwe'll do result\nequals 2 divided by\n0 which\nyou cannot do\nso just print the result\nand if i run that\nwe'll see this error over here\nzero division error division by zero so\nit's going to get an error when we run\nthe code and then whenever there's an\nerror anything after the error occurs\nwill not happen so we're not going to\nprint the result because there is\nbecause the this\nthis line resulted in error so we're not\ngoing to run the following line of code\nso now let's try adding that operation\nin a\ntry block\nso i'm just going to paste it all in\nhere and so we're putting the operation\nin a try block and then we're expecting\na zero division error\nwhere we'll print cannot divide by zero\nfinally we will set the result to one\nand then print the results so let me\njust run that code see cannot divide by\nzero and then we print one we because we\nset it in the final block here\nso this try block lets us recover\ngracefully and move on with the program\nyou can raise exceptions in your own\ncode too using the raise statement so i\ncould type in raise\nand then we can raise an exception\nintentionally\nand error\nso if i just run this\nit will say\nan error because that's what we typed in\nso you can make it say anything you want\nfor your error\nand this raises a general exception and\nyou can and you can intercept it\njust like this so i could say\ntry\nand then we raise that exception\nand then we can do accept\nexception\nas error\nand then we can print\nthe error\nokay if i run that\nso now instead of we don't see all that\nred anymore because it's not stopping\nour program because of the error but\nit's now printing the error message\nright here\njust like that\nyou can also define your own exception\nclass extending from exception so i\ncould do class\ndog not\nfound\n[Music]\nexception\nand then i will\nextend from exception\n[Music]\nand then i can just put\npass for this one here let me adjust\nthat\nso\npass here just means nothing and we must\nuse it when we define a class without\nmethods or a function without code so if\nyou're not going to put anything so this\nis just an example so i can just put\npass to mean that we're not going to\nhave any code in this\nso now we can try it out so i'll just\npaste that uh so we're going to raise\ndog not found exception and then if\nwe're we're going to\ncandle this exception and just print dog\nnot found so let's try that yep dog nut\nbound because it raised this exception\nhere we can also actually do something\nin the exception\nso if i can say print\ninside\nand then i'm going to run that\nand i'll do inside and dog not bound the\nwith statement is very helpful to\nsimplify working with exception handling\nfor example when working with files each\ntime we open a file we must remember to\nclose it with makes the process more\ntransparent so let me show you some\nexample code without the with statement\nso\nwe're not going to go into a lot of\ndetails about working with files here\nbut i just want to kind of just give\nthis one quick example so if we're going\nto be working with files in python so we\ncan open the file and then we can read\nthe file we can print the content from\nthe file\nand we\nwe're going to try that because there\ncould be an exception and then finally\nwe're always going to make sure to close\nthe file\nbut\nan alternate way to do it would be like\nthis\num so with\nwe're going to open the file as file and\nthen content file.read and then print\nthe content and with using with it's\ngoing to make sure to automatically\nclose the file at the end in other words\nwe have built-in implicit exception\nhandling as close will be called\nautomatically for us\nand with can do a lot more stuff as well\nthis example is just meant to introduce\nits capabilities\nnow let's talk about third-party\npackages\nand we're going to talk about pip so\nlet's learn how to install third-party\npackages in python using pip the python\nstandard library contains a huge number\nof utilities that simplify our python\ndevelopment needs but nothing can\nsatisfy everything\nthat's why individuals and companies\ncreate packages and make them available\nas open source software for the entire\ncommunity so the modules are all\ncollected in a single place called the\npython package index which is available\navailable at pipe.org that's\npi\npi.org\nand they can be installed on the system\nusing\npip there's over 270 000 packages freely\navailable\nmost computers are already going to have\npip installed and it already has pip\ninstalled so let me show you how you\nwould install a package we'd have to go\nover to the shell here if you're not on\nreplit you can just do in your terminal\nand i'm going to clear this here\nand i'm just going to do pip\ninstall and then you can put the name of\na package for instance one popular\npackage is called the request package\nit's an http library so i can do\nrequests\nand let me just\nso you can see i have to make sure i\nspelled that right\n[Music]\nand it's going to install that package\nright now so once the we install this\npackage it's going to be available for\nall our python scripts because packages\nare installed globally and the exact\nlocation depends on the operating system\nyou can also upgrade a package to its\nlatest version by doing pip install\ndash u and then i will just put the\npackage name so in this case we'll just\ndo request again\nand then it's going to just update it to\nits\nlatest version\nin this case\nit updated from\n2.28.0 to 2.28.1\nyou can also specify a specific\nversion when you're installing\nand then you can also uninstall a\npackage so i'll do pip\nuninstall\nrequests\nand then i can say that yes i do want to\nuninstall that\nand then once when you have a package\ninstalled\ni'm just going to install request again\nand then you always have to make sure\nyou spell it right\nso once you have it installed you can do\npip show\nrequests\nand then it's going to show some\ninformation about the package\nso see we can see the name the version\nuh the summary and then a bunch of the\nauthor and a bunch of other information\nabout the package\nokay i'll just clear this\nnow we're actually gonna backtrack a\nlittle bit we already talked about lists\nbut i'm gonna talk about a more advanced\nway of using lists called\nlist\ncompression\nlist compressions so list compressions\nare a way to create lists in a very\nconcise way so suppose you have this\nlist like this it's a list of numbers\nand we'll just do\none\ntwo three\nfour five\nso we can create a new list using a list\ncompression\ncomposed by the numbers list elements to\nthe power of 2.\nlet me show you what i mean so let's get\nmake a new list numbers\npower\n[Music]\n2\nequals\nand let me just show you how you do this\nlist compression\nso this is the list compression syntax\nand if i print this\n[Music]\nwe can see that now we have every\nelement in the list to the power of two\nlist compressions are a syntax that's\nsometimes preferred over loops as it's\nmore readable when the operation can be\nwritten on a single line\nso for instance this is how you would do\nit uh with a loop so what we do in a\nsingle line up here we take a few lines\nto do\nin the method with a loop so list\ncompression just makes it\nsimpler\nand then you can do the same thing with\nmap as well\nbut again it's just a little more\ncomplex sometimes it's just simpler to\nuse a list compression using the syntax\nhere\nnow let's talk about a few more advanced\ntopics in regards to functions\npolymorphism\npolymorphism generalizes a functionality\nso it can work on different types\nit's an important concept in object\noriented programming so see in here\nwe've defined the same method on\ndifferent classes so the dog has eat and\nthe cat also has an eat method\nthen we can generate objects and we can\ncall the eat method regardless of the\nclass the object belongs to and will get\ndifferent results so we create the two\nobjects the dog and the cat here\nand we're calling the eat method on both\nobjects and if we run this you can see\nwhat we're getting eating cat dog food\neating cat food and so you could do a\nlot of things with this like maybe you\nhave a list of different animals and\nthen you can\nloop through that list and call the eat\nfunction or the eat method on each\nanimal in that list and they don't have\nto be the exact same class to be able to\nstill run the eat method\nso we build a generalized interface and\nnow we do not need to know that an\nanimal is a cat or dog we just need to\nknow that we can call eat on it\nnow let's talk about\noperator\noverloading\n[Music]\noperator overloading is an advanced\ntechnique we can use to make classes\ncomparable and to make them work with\npython operators so let's take this\nclass dog so here's a dog class and you\ncan create a dog with a name and age\nthen we'll create two dog objects we'll\ndo roger equals dog\nand we can pass the name\nand eight\n[Music]\nand then i'll make another one\nwe can use operator overloading to add a\ncustom way to compare these two objects\nbased on the age property\nso like how could you compare\nthis dog and this dog well we can make\nit possible with operator overloading so\nlet me just show you this example here\nso\nthis\nfunction here gt\nis going to compare things as to figure\nout what what is greater than you can\nnow we'll be able to compare\ntwo dog objects to see which one is\ngreater than the other and this is how\nwe're going to figure out which is\ngreater than return true if self.age is\ngreater than\nother dot age which is the other one\nyou're comparing it to else false\nnow we can\ndo print\nroger\nis greater than sid so we're trying to\nfigure out this is true or false if i\nrun this it's going to say true roger is\ngreater than sid because 8 is bigger\nthan 7. but if we like put 9 here run\nthat\nnow it's going to be false\nso in the same way we define this\nunderscore underscore gt underscore\nwhich means greater than we can also\ndefine methods for like less than\nlower or equal to greater equal to or\nnot equal\nand then you can also create methods to\ngo with different arithmetic operators\nso\nwe can do add subtract multiply\ndivision floor division mod power so you\ncan see all these different ones you can\nmake it respond to the different\noperators so the example was just a\ngreater than operator but we can\nmake functions to show how it's going to\nrespond to all these different\noperators there's even a few more\nmethods to work with other operators but\nyou get the idea we've learned a lot\nabout python and now we're going to\nbring a lot of what we've learned\ntogether to code a blackjack card game\nand in the process we'll learn about\nobject oriented programming in python so\nwe'll start by creating a new python\nproject on replit\nand i'm just going to close this tab\nhere\nand i'll zoom in just a bit\nand just like our first project\ni'm going to\nsay what i'm about to do and i want you\nto see if you can do it on your own\nbefore i show you how to do it\nand with all you've learned so far a lot\nof this you're probably going to be able\nto figure out on your own as i give you\nthe instructions without even seeing how\ni how i do it but then you can come back\nto the video and see how i do it\nor i guess you can just watch and not\neven try to do it yourself but you're\ngoing to learn a lot more if you try to\ncode this by yourself along with me as i\ndo it but right before i do the\ndifferent steps\nso the first thing we're going to do is\ncreate a\nvariable called a suit\nand set it equal to hearts and then a\nvariable called rank and set it to equal\nk for king\nand then a variable called value and set\nto equal\n10.\n[Music]\nokay simple two variables equal to\nstrings and one variable equal to an int\nso now we are going to add a print\nstatement and print the the phrase your\ncard is with a colon at the end\nand then we'll add another print\nstatement and print the rank\nso now we're just printing the variable\nhere\nand we're going to be doing a lot of\nrefactoring as we create this program\nlet's refactor this so it's just one\nprint statement that's going to print\nyour card is colon space and then the\nrank\nso we are going to be doing\nstring concatenation\n[Music]\njust like that\nso\nyou can concatenate as many strings and\nvariables as you want so let's update\nthe code so that the print function\nprint prints your card as\nk\nof\nhearts\nso we just need to add\nof and we have to make sure we put\nspaces on each side of the word of\nand then\nsuit\nand let me just\nadjust this here okay as you know you\ncan use a list in python to store\nmultiple values or items at a time so\nabove the suit variable\ncreate a suits\nvariable and assign it to a list of\nsuits in this case spades clubs hearts\ndiamonds\nwe learned about how you can use the\nbracket operator to access a specific\nelement in a list the number inside the\nbracket specifies the index of the list\nto access remember the indexes start at\nzero\nso you update the suit variable so that\nthe value of hearts come from comes from\nthe suits list\nnow we'll practice a for loop so add a\nfor loop to the end of the code that\nprints each suit\nand then we'll just test this out\ni really hope you actually are following\nalong and trying it out right before i\nshow it to you that's how you're going\nto learn the best here so spades clubs\nhearts diamonds\nnow this next thing is is just to see if\nwe can do it so it's not going to be\npart of our final code but right before\nthe loop we just added see if you can\nadd another item to the suits list\nthat's the string snakes\nthere's a few different ways to do it\nbut we will use append snakes so this is\njust going to append the word snakes at\nthe end\nof the list so if i run this we can now\nsee snakes at the bottom\nokay now we're going to start the\nprocess of representing a full deck of\ncards with python code\nso we're going to actually get rid of a\nlot of this we're going to get rid of\nall this we're just going to have the\nsuits and then we're going to have this\nfor loop at the bottom we're going to do\na lot of refactoring as we go mainly for\neducational purposes but also so we can\nget the a really good blackjack game so\nwe have a list of suits after that we're\ngoing to create a list of ranks that's a\n2 3 4 5 6 7 8 9 10 j q\nk\n[Music]\nnow before the suits list\ncreate a new variable called cards and\nassign an empty list to the variable\nyou can an empty list is just two\nbrackets with nothing inside\nnow in the cards list there should be an\nitem for each card in the deck each item\nin the suits list should be combined\nwith each item in the ranks list for a\ntotal of 52 items or cards\nlet's work our way up to that so first\nwe'll update the print statement in the\nfor loop so that it prints a list with\ntwo elements the first element should be\nsuit and the second should be the first\nelement of the ranks lists so this\nshould print\nan ace in every suit\nso i'm going to update this so it's\ngoing to be a list with\nsuit\nand ranks\nthe first item is going to be at index\nzero now let's print that out\nso we got them these four right here\nnow instead of just printing an ace in\nevery suit let's print every rank in\nevery suit\nthis can be done easily with a for loop\nnested within another for loop so inside\nthe for loop add another for loop that\nloops through the ranks\nthen update the print statement so that\nit's not just printing the first element\nin the ranks list but it's printing the\nrank from the for other for loop\nso let me show you what i mean\nwe're going to do four\nfor rank and ranks\nand then\nwe have to make sure to indent this\nprint statement so it's inside this\nother for loop\nand this is now just going to be\nrank so it's going to print the suit and\nrank and i'll just run that\nand now we with this nested for loop we\nhave every card at every rank in every\nsuit all 52 cards are printed as two\nitem lists\nan element in a list can be another list\nso instead of printing 52\ntwo item lists\nlet's append those 52 cards to the cards\nlist\nso we already have the cards list here\nit's empty but i'm going to do\ncards\ndot\nappend\nand so we're appending\nthis item\nall these items to the cards list\nso let's check what the cards list looks\nlike by printing out printing it out at\nthe bottom remember make sure this is\nnot indented at all and we'll do print\ncards\nand i'll run that\nand then here it is here so this is the\nlist it's not\none there's just a comma between each\nitem in the list here\nyou may notice that all the cards are in\norder in the cards lists\nfor a game like this though the cards\nmust be shuffled so to help with this\nimport the random module at the top of\nyour code so that's just we just do\nimport\nrandom\n[Music]\nnow we'll be able to use the the random\nmodule so this is going to import the\nrandom module which contains a variety\nof things related to random number\ngeneration\nand as you probably remember when you\nimport a python module it allows you to\nuse additional commands in your code\nspecifically we're going to be using the\nrandom.shuffle function\nso right before at the end where it says\nprint cards we're going to call\nrandom.shuffle and pass in the cards\nlist to that function\nand then if i play this here or run the\nprogram we can see that these are not in\norder anymore see ace of spades\nthree of spades king of diamonds jack of\nhearts so these are no longer in order\nbecause they've been shuffled now let's\nremove a single element from the cards\nlist this is similar to dealing a card\nfrom a deck and this can be done with\nthe pop method\nso after the cards are shuffled\nlet's create another card variable and\njust\npop off a card from the cards list and\nput it into that variable called card\nand just print that card\nso i'll do card\nequals cards dot pop\nand then instead of printing all the\ncards i'm just going to print a single\ncard i'll run the program\nsee every time i run the program you can\nsee we're getting a different card we're\ndealing a different card because it's\nbeen shuffled\nso we've already learned all about\nfunctions and now we're going to create\na function\nso create a\nfunction called shuffle that just has\nthe single line that shuffles the cards\nso it's just def shuffle\nand then i just have to make sure this\nis indented so now when we call the\nshuffle function it will shuffle the\ncards\nso right before the print statement\ncall the shuffle function and instead of\njust printing the single card print the\ncards\nso do shuffle\nand then i will print all the cards and\nlet's just try out the program\nand we can see there was a problem it's\nbecause we didn't put the the colon here\nso that's an important part of creating\na function is putting the colon there\nnow we'll create another function called\ndeal and we'll put this line inside the\nthe deal function\nso we're going to define deal\nand i'll put the colon this time and\nmake sure to\nindent that\nand we can see this has a orange\nsquiggly line underneath it because\nvariables can only be accessed in the\ncontext that they were created so the\ncard variable will not be available\noutside of the deal function\nyou can get a value out of a function by\nreturning a result using the return\nstatement so at the end we're going to\nreturn the card\nokay now we've taken care of that\nsquiggly line there so after the shuffle\nfunction is called we'll call the deal\nfunction and assign the return value to\na variable named card then we'll update\nthe print function to print card instead\nof cards\nso card\nequals\ndeal\nand then we'll just print\nthe card\nand again we\nsee a different card every time we run\nthe program\nwhat if you want the deal function to\ndeal more than one card well let's\nrefactor the deal function to and accept\nto accept an argument so any number of\narguments can appear inside the\nparentheses when a function is created\nseparated by commas inside the function\nthe arguments are assigned to variables\ncalled parameters so start by making it\nso we'll start by making it so the deal\nfunction takes an argument named number\nthen we'll make sure when we call the\nfunction we use the new parameter\nby\nmaking it so we're gonna deal two\nso i'm just gonna put number here it's\ngonna it's gonna deal a number of cards\nwe're gonna deal two and i just didn't\nsay this before but now instead this is\nnot one card anymore so we're going to\nupdate this to be cards dealt but\nthere's a special shortcut you can\neither it's going to be\ncommand or control d\nand now i'm actually selecting the card\ntwo different times see i i now have\nmultiple cursors here so basically i\nselected the word i double clicked to\nselect the word then did command or\ncontrol d now it's selecting two words\nand now i can type in\ncards\ndelt\nso now i can type in two places at one\ntime so that's a cool thing that you can\ndo in replit and you can do it in many\nother code editors and i'll run the\nprogram but it should still only deal\none card because even though we're\npassing this parameter into here we're\nnot doing anything with it yet here so\nwe want to update the deal function so\nit's going to return a list of cards\ninstead of a single card\nin the first line of the function create\nan empty list named cards delt then\nupdate the last line of the function to\nreturn cards dealt instead of return\ncard so let's do that really quick we're\ngoing to do\ncards\ndealt\nis going to equal an empty list and i'll\njust copy that and paste it\nright here\nnow do you remember how to use a the\nrange function with a for loop we talked\nabout it earlier in the course we just\nbriefly touched on it but let's create a\nfor loop that's going to\nadd a card from the deck\nfor each\ncard dealt\nso we can do that by creating a for loop\nfor x and range\nnumber now this is a common thing you're\ngoing to be doing in python creating a\nfor loop that's going to be in range\nnumber because now it's going to loop\nthis many times it's going to loop this\nmany times which is the number we passed\nin here and we're going to do a few\nthings in this for loop\nfirst we are going to\nactually do this what we already have\ncard equal cards dot pop and then we'll\ndo cards\ndelt\ndot append\ncard\nso now just this card that we popped off\nthe deck we are appending it to the\ncard's delt and then we're returning the\ncards dealt here\nso down here in the code\nlet's separate out a single card from\nthe two cards dealt\nso let's create a variable called card\nand set it equal to the first item in\nthe cards delt list\nand then we'll just print that card\ninstead of cards dealt\nso we are going to do card\nequals cards\ndelt and then we just use the brackets\nand put 0 to get the first item in that\nlist\nand then we'll just print\na card\nnow i'm just going to test out the\nprogram we're still just seeing a single\ncard here but it's doing a lot more\nbehind the scenes now\nso now let's separate out the rank part\nof a single card so after we create the\ncard there let's create a variable named\nrank and assign it the rank from the\ncard\nso we'll do rank\nequals card\nand then i have to get index one because\nthe rank is this that's the nine here\nthe second item in this card is the rank\nso each rank has a different value in\nblackjack the value of an ace or an a in\nthis in this program is 11\nor sometimes it can actually be one it's\ngoing to be 11 or 1 but we'll get to the\none part later so jack j q and k which\nis jack queen and king have the value of\n10 and then the numbers have the value\nof the number so we need to check what\nthe rank is and set the value depending\non the rank\nso this is the perfect time for a\nconditional statement specifically an if\nstatement\nbefore the final print statement or\nprogram we're going to add an if\nstatement to check if the rank equals a\nand if so we'll assign 11 to a variable\nnamed value\nso we'll do if\nrank and i hope you remember if you're\nflying along i hope you remember to use\ntwo equal signs instead of one equal\nsign here so if rank equals a\nthen value is going to equal with a\nsingle equal sign is going to equal\n11.\nnow if rank does not equal a we'll want\nto check if it equals j q or k\nthat can be done with an elif statement\nfor now we'll just create an if\nstatement to check if the rank equals j\nand then if so we will set the value to\n10.\nso we talked about the three logical\noperators and or\nand not you can use these three\noperators in conditional statements to\ncheck multiple conditions at once so we\nwant to check if\nrank is j or rank is q\nor rank is k so update the code with the\nthe and with the ors\nnow there can be any number of ls\nstatements after an if statement but at\nthe end there can only be a single else\nstatement\nand like we discussed the else is just\ngoing to be if none of the other ones\nare true so let's add an else statement\nand inside we'll just assign rank to\nvalue because we've already gotten all\nthe letters out of the way the rest are\nnumbers and we can assign it directly to\nthe value\nnow we'll\ninstead of printing the card at the end\nlet's print the rank and the value\nso i can just type in rank comma value\nand\nwhen that multiple values in a print\nstatement are listed with a comma\nseparating them both values are printed\nwith a space in between so let's test\nthis out a few times q10 five five 6 6\nso we can see every time we press it\nit's going to be a random rank and value\nnow we already talked about dictionaries\nin python it's like a list but more\ngeneral you can think of a dictionary as\na mapping between a set of indices which\nare called keys and values so key value\npairs each key maps to a value so above\nthe print statement let's create a\nvariable called rank\nunderscore dict for dictionary and\ncreate a dictionary with two items\na key value pair for the rank and a key\nvalue pair for the value\nso we have the string rank here and then\nthe actual rank variable string value\nand the actual value variable\nbefore we are\nprinting the rank variable and the value\nvariable but let's update this code so\nwe're actually getting the rank and\nvalue from the rank dictionary right\nhere\nso i'm going to copy that and then i\njust pasted that but now i'm going to\nuse bracket notation\nand so i'll put two brackets but then i\nalso have to surround this in quotation\nmarks\nand then i'm gonna\nput the rank dictionary the brackets\nand then the quotation marks because\nwe're accessing that key there\nand then i can just run the program and\nit's still doing the same thing as\nbefore just a lot more complicated as\nfar as the code goes but it's going to\nbe good to have more complicated code as\nour program is going to become more\ncomplicated as we go\nso when writing a program there are many\nways to do almost everything\nnow we're going to refactor the code to\nget the value of each rank without using\nan if statement\ninstead we'll store both the rank name\nand value in the ranks list using\ndictionaries so let's delete all the\ncode lines of code after where it says\nshuffle\nso\nhere i know we typed in a lot of stuff\nthere but it was just kind of to\npractice and now we're going to practice\na different method of doing this\nso now let's create a new card variable\na new variable called card at the end\nand let's assign to the card variable\na a single card that will deal from the\ndeck but we'll make sure that card is\nnot\nin a list so this is a little tricky i'm\ngonna do deal and i'll deal one card\nbut now i have to get\nthe first item so this is going to deal\none card but the one card is going to\ndeal is going to be in a list so i want\nto get the first item in the list which\nis going to be the only item in the list\nso i had to put the zero in brackets\nhere to get that card out of a list\nbefore it goes into the card variable\nnow we're going to update the ranks list\nso here's the the ranks list each\nelement the list should now be a\ndictionary when lists or list elements\nare long it's common to put each element\non its own line so we're going to put\neach element on its own line and each\nelement is going to have the rank and\nthe value so for instance it will be\nrank a value 11\nrank 2 value 2.\nso it's going to look like\nthis\nand i'm now i'm actually going to zoom\nout just a little bit and we have all\nthese they're all these ranks and each\none in this list\nis a dictionary each element in the list\nis a dictionary\nokay now that this is updated let's go\ndown and just print a card so we can see\nnow that we've updated that ranks list\nso print\ncard\nokay so this is what it's going to look\nlike coming from\nour list\nso we got the suit\nand then we have the rank that's also\ngoing to have the value here the rank\nand the value\nwe can see every time we click it we get\na random item\nnow let's update the code so instead of\nprinting the whole card we just\nprint the value so in this example the\nvalue is two so we just want to print\nthis to just that that value so how can\nwe update this see if you can figure out\nhow to update this line so only prints\njust the value number there\nso first of all we have to see that\nwe're in a list and we need so this is\nthe first element of the list this is\nthe second element so wait to start by\ngetting the second element of the list\nwhich is\nindex one\nand then\nwe have an object here or a dictionary i\nmean and we need to get\nso here we have this key value pair so\nwe need the value at that key so to get\nthe value of that key we are going to\nput more brackets and i'm going to put\nvalue the key of value so now with that\nshould work let's try it\nokay nine\nseven see every time it's gonna just\ngive us the value of the card\nnow we'll start defining classes that\nwill be used in order to separate out\ndifferent aspects of the game\nso classes you may remember provide a\nway of bundling data and functionality\ntogether creating a new class creates a\nnew type of object allowing new\ninstances of that type to be made an\nobject can contain a number of functions\nwhich we call methods as well as data\nthat is used by those functions called\nattributes so\nwe're going to use classes to model\nthree parts of the game a card a deck\nand a hand so far we've mainly worked on\nthe elements of the debt class\nso right after this import statement at\nthe top\nwe're going to\nmake a class a class called\ndec and we're going to put everything\nthat we've written so far in that class\nso we're just gonna do class\ndeck\ncolon\nokay now we just highlight\neverything here and then i'm gonna press\ntab\nto put everything in the class of deck\nbecause everything's\nindented a little bit\nand then these last few lines of code we\ndon't need so i'll just delete those\nthose are just for testing out\na class is like a template you can use\nthat class to create an instance of the\nclass called an object\nthen you can use the instance each\ninstance keeps track of its own state so\nyou can update an instance created from\na class and it won't impact other\nobjects created from the same class soon\nyou'll see an example of all this to\nmake it easier to understand\nbut first let's prepare a class to\ncreate an instance from it\nwhen you create an instance of a class\npython automatically calls a function\nalso called a method in the clast named\ninit remember we already discussed this\nearlier in the course so the contents of\nthis init method should be code that is\nrun one time to initialize the instance\nso at the beginning of our class let's\ncreate this init function so we'll do\ndef\nunderscore underscore init\nunderscore underscore and if you\nremember from before we always have to\npass in\nself\nto all of these\nfunctions in a class because then it\ngets itself is referring to the instance\nof the class that we've developed now\nwe're going to indent all the code\nthat's not part of the shuffle or deal\nfunction so the code will be part of\nthis new function so i'm just going to\nhighlight\nall this here\nincluding\nthe suits here and then just press\ntab\nso like i said we just added self in\nhere you should always\nall the methods in a class or all the\nfunctions should have self\nanything inside the parentheses remember\nis called an argument their variables\npass them from the color to the\nfunctions\nas i've said all functions in a class\nshould receive self as an argument and\nself represents the instance of the\nclass by using the self keyword the\nfunction can access the attributes and\nmethods of the class\nso let's make sure to add self as the\nfirst item in the parentheses of the\nother functions\nso we are going to add self here\nand then see how we already have number\nhere but we're going to hit self at the\nbeginning\nand we so we can still\ncall this function with just\na single number but it's going to also\nget a reference to the instance here now\ni want you to notice that\nthe cards here is underlying in\nred so before it wasn't when we were\nbefore we made this into a class we\ncould just access\nthis cards variable but now we cannot so\nlet's fix that\ninside a class in order to access a\nvariable in multiple functions also\ncalled methods the variable has to start\nwith self dot\nso we're going to change all instances\nof cards in every function to self.card\nstarting\nwith this so self dot cards\nnow this is going to make it so we can\naccess it in other places and then we'll\nchange this to self dot cards\nand then this is self\ndot cards\nand then self\ndot cards\nso now this will be a variable that's\nspecifically associated with the\ninstance of the deck that's created and\nthen we can access it in all of these\nother methods\nokay we can now create an instance also\ncalled an object of the deck class so at\nthe very end of the code\nlet's create a variable called deck 1\nand make it an instance of the deck\nclass\nso to make sure i'm not indented at all\nand i'll do deck\n1\nequals\ndeck there we go\nnow since we created cards with\nself.cards\nwe can access that we can access cards\nfrom the instance of the class so let's\njust print out the cards from our deck\none so do print\ndeck\none dot cards\nand we can try that out now you can see\nthe the list of all of these cards\nit has the suit\nand the rank and the value for each card\nso underneath where we created deck one\nlet's create deck two we'll create\nanother instance of another deck\nso\n[Music]\nso now we can call methods on these\ninstances and you see some of the\nmethods we have we have shuffle and deal\nso on deck 2 right after we create the\ndeck 2 let's shuffle the deck so deck\n2 dot shuffle\nand then i have to make sure to put the\nparentheses\nat the end here\nright if we print deck one let's print\ndeck two or the cards of deck two so i'm\ngonna copy that and then we'll print\ndeck two cards so now we should see that\nthe deck one cards are not shuffled and\nthe deck two cards are shuffled so let\nme move this over here i'm gonna run the\nprogram\nand let's see if we can see that where\ndeck one so here's where here's deck one\nand we can see how it's all diamonds\ndiamonds diamonds diamonds diamonds all\nthe diamonds are in a row because\nunshuffled but then if we go into deck 2\nwe can see we have diamonds clubs spades\ndiamonds hearts so these are shuffled in\ndeck 2 they are shuffled\nokay the deck works\nnow let's add safeguards to prevent\nerrors every time the deal function is\ncalled a card is removed from the cards\nlist\nyou can only remove a card if there are\ncards to remove\nso before the program tries to pop a\ncard off self.cards is to check if the\nlength of self.cards is greater than\nzero\nremember you can get the number of items\nin a list with length so see if you can\nfigure that out on your own and then i'm\nabout to show you how it's done\nso when it's going to deal here\nright as we're dealing we're going to\nadd an if statement here so if\nthe length\nof self dot cards\nis greater than zero\nand we do we don't need this parentheses\nhere so if the length of self.cards is\ngreater than zero\nthen we will\ndo this we'll pop up a card and add it\nto the cards dealt if not we just won't\ndo anything and then we'll return cards\ndealt which could be an empty array if\nthere were no cards on the deck\nnow let's add something to the shuffle\nfunction a deck with only one card does\nnot need to be shuffled so let's add the\nappropriate if statement to the shuffle\nfunction\nso we'll do\nif the length of self\ndot cards\nis\ngreater than one\nthen we will shuffle and then make sure\ni'll make sure to put the\ncolon there\nokay\nsince a card is a separate concept than\na deck\nnext we'll make a card class\nso let's create a card class with an\ninit function and in that init function\nwe'll set self.suit to equal hearts\nso hopefully you already tried this i'm\ngoing to do class\ncard\nand then i will do def\nnet\n[Music]\nand then after the suit will lose self\ndot rank and set it to a\nso currently anytime a card is created\nit will be an ace of hearts let's\nrefactor the code so the suit and rank\nare specified when a card object is\nconstructed so the init method can take\nadditional parameters besides self that\nare passed into it as objects is\nconstructed so we'll update it to take\nsuit and rank\n[Music]\nnow we'll create a special method\nthat's underscore underscore str\nunderscore underscore\nwhen a class has this specific method\nit's called when print is invoked on an\nobject from the class\nso we want to make it so when we print\nan object from the card class it will\nprint something like 10 of hearts or\nthree of clubs or something like that\nso we don't do print here we do return\nit's going to return this to the print\nstatement it's going to turn self dot\nrank\nand then we have to get\nthe rank\n[Music]\nand we do plus\nand then of or to put a string there\nplus\nself dot suit\nso now it's going to return the rank\nwhich is like 2 or a of and then the\nsuit which is one of these\nso let's just try it out real quick and\nwe go to the bottom we don't need any of\nthese to test because we're testing\nsomething completely different now let's\ndo card one\nequals\n[Music]\ncard i'm going to create a card and i\nhave to pass in remember i have to first\npass in the suit so how about hearts and\nthen i have to pass in the rank but we\nwant to make it look like these ranks so\ni'm just going to\ncopy one of these here\nand then\nafter we create the card i can just\nprint\ncard one\nlet me clear this and then i'll just run\nthat j of hearts\noh see i got the j of hearts and feel\nfree to add a few more cards like this\nand test out a few more if you want\nokay now we're going to refactor this\nslightly you remember way toward the\nbeginning of this course we talked about\nf strings so f strings allow us to put\nvariables right within a string do you\nremember how to do that let's see if you\ncan update this to use enough string\nso first we're going to create a new\nstring but we're going to start with the\nletter f\nand then\ninside this string we put curly braces\naround\nthe\npython code and we don't need these\nother strings here so\nnow we put another curly brace\nand then an\nending string here\nokay it's still showing these um red\nsquiggly lines because if i have a\ndouble quote around the strings and\nanytime other quotes are in the middle i\nhave to put a different type of quote so\nwe're going to use\nsingle quotes okay so now we can make\nthis a whole a string but we use the\nbrackets to put the variables right\nwithin the string so now we've updated\nthat to use an f string\nso currently in the deck class the last\nline of this init method\nappends a list as an item to the cards\nlist\ninstead of appending\nsuit\ncomma rank\nwe'll create and append an instance of\nthe card class\nthen afterwards when a deck is created\nit's filled with cards\nso it's just like this we're just going\nto delete that i'll put card\nand then i'll pass in a suit and they\nrank so now we're passing in\ncard instances\nso we're done with the deck and card\nclasses and we created them in such a\nway that they could basically be used\nfor any card game\nnow let's make a hand class\nthis will represent a hand in the game\nof blackjack so create a hand class and\nadd an inet method and initialize a\nvariable called self.cards that is set\nto an empty list so let's go down here\nand we can also get rid of all this test\ncode here\nso the new class is called hand\nand we'll also make the hand keep track\nof the value of the hands a self.value\nwill start it at zero\nin this blackjack game there will be a\nhuman controlled player and a program\ncontrolled dealer so let's add a dealer\nparameter in the init constructor method\nof the hand class\nand then when the hand classes create a\ndealer should be set to true or false to\nkeep track of what type of hand it is\nso i'll pass in the parameter dealer and\nthen we just have to create a variable\nand call dealer and set it to dealer so\nself dot dealer\nequals dealer\n[Music]\nif you remember from before function\nparameters can have default values so we\nwant to make it so the default value of\ndealer is false\nso then if\nwe create a hand and we don't set the\ndealer value it will automatically be\nfalse\nand i'm just going to take out these\nspaces here to make it smaller here\nso now a hand can be created\nlet's give it some functionality we'll\nadd an add card method and the method\nshould take a card list as a parameter\nand then we need to add that card list\nto the cards\nso we can use the extend function the\nextend method to append each item in\ncard list onto the cards list so it's\njust going to look like this self dot\ncards dot append no extend i mean dot\nextend\nand then we pass in\ncard list\nnow let's just add some code to test out\nwhat we have so far so let's create a\ndeck and then we will shuffle the deck\ndeck.shuffle\n[Music]\nnow we'll create a hand\nnow we can add cards to the hand so hand\ndot\nadd\ncard\nand we will deck dot deal we'll deal two\ncards into the hand\nand then we'll just print\nhand cards\nokay so this is what how it printed out\ni was expecting this to look a little\ndifferent\nbecause of this function it print it\nshould print like that\nbut i think the reason is\nbecause\nthis is a list so it's printing a list\nnot an individual card so let's change\nthis to print an individual card i'll\nprint the first card so put zero in\nthere i'll try it again nine of diamonds\nand then we can also print the next card\nthree of hearts\nand then we can also print both cards if\nwe just copy that and do\nhand that cards\nzero\nhandout cards\none\nokay ace of hearts and nine of spades so\nthose are the two cards that were dealt\nto the hand\nnow we'll go back to the hand class and\nwe'll add the ability to calculate the\nvalue of a hand so let's add a method\ncalled calculate value\nand inside the method we'll set\nself.value to zero\nnow we'll take this one step at a time\nfirst let's let's make a for loop that's\ngoing to go through every single card\nand inside the for loop we'll just set\nthe value\nof the card to a variable called card\nunderscore value so i'll do four card\nand self.cards\nokay so we're not doing anything with\nthat yet but we're going to in a second\nhere\nnow we want to make sure that this is an\ninteger\nso let's convert that to an integer if\nyou remember you just use int\n[Music]\nand then put it in print int and then\ninside the parentheses we put this value\nnot just getting the card value for each\ncard is not enough something must be\ndone with the variable so let's add that\nvalue\nto\nself.value\nso we'll do self\ndot value\nand then if you remember from before we\ncan use the plus equals to\nadd that to the current value those will\ndo a card\nvalue\nso as you may know in blackjack and ace\ncan have the value of either 11 or 1\ndepending on what is better for the\nplayer so there's a few ways to\nimplement that in code so we're going to\ndo one way that's relatively simple\nfirst we'll check if the hand has an ace\nso let's first create a variable that\nwill store whether the\nhand has an a so just be called hand has\nunderscore ace we'll set to false and\nwe'll put it right under here\nso we'll do\nhas ace and we'll set to false and since\nwe're only going to be using has ace\nwithin\nthis\nmethod we don't need to use self that\nhas ace because we're only using it here\nand now when we're going through the the\nlist of cards let's check if the the\nrank of a card is an ace and then set\nhas aced equals true\nso i'll do it\nif\ncard dot rank\nthe rank is going to be equal double\nequal sign if it equals ace\nafter this entire for loop\nwe're going to check if the card has an\nace\nand if the value is over 21\nif so then we'll just subtract 10 from\nthe value\nbecause that'll be the same as setting\nthe ace to equal one instead of 11.\nso we'll just do if has\nace\nand\nself.value\nis greater than 21\nto self.value\nminus equals\n10.\nokay and look at this this is something\ni don't think i've discussed yet\nyou could say if has\nequals true and self.value is greater\nthan 21.\nbut you can also it's like a shorthand\nyou don't have to say if has ace equals\ntrue\nif has a because has ace is just going\nto equal true or false you can just say\nif has ace so that's just the same as\nsaying if true or if false\nand so we're seeing if both of these\nevaluate the true then we will subtract\n10 from the value okay now we'll just\nadd another method to get the value of a\nhand called getvalue and the function\nwill just return self.value\nso we're going to make sure that we're\nnot we're indented correctly and do def\nget\nvalue\nreturn\nself\ndot value\nand then i have to make sure i put the\nparentheses here\nand then i have to remember to put self\nsince this is a self.value we could call\ndown here like we could call\nhand\nvalue to get the value but it's\ngenerally better to make a function to\nreturn the value so i can do get\nvalue that way there may be some extra\ncode you want to run in there like\ndepending on different conditions\nyou may want to modify the value before\nyou return it\nso it's best practice to create a method\nthat will get a value like this for you\nso currently this value that's returned\ncould be incorrect\nbecause\nif someone's going to get the value the\nvalue has to be calculated correctly\nfirst and like checking for aces and and\nother things so let's call\nlet's calculate the value before we\nreturn the value so i'm going to do self\ndot calculate value so\nthis is something that i think is new\nwhere to call calculate value from\nwithin this we're going to have to call\nself.calculatevalue\nand self will refer to the instance that\nwe're working with so we're calling the\ncalculate value on the instance that's\nthat is the the hand instance and we're\ngetting the value and then we're\nreturning the value\nokay let's create another method called\nis blackjack and it'll return true if\nthere's a blackjack and false otherwise\nso it's a blackjack if the value is 21.\nso i'm gonna do\ndef\nget or is\noh and put self here\nokay so this is going to evaluate you to\neither true or false and return true or\nfalse depending on whether there's a\nblackjack\nnow we'll create the final method in the\nhand class that will display information\nabout the hand so let's create a method\ncalled display they'll\nto start with will just print your hand\n[Music]\nokay now let's do a quick refactor\ninstead of saying your hand it should\neither say dealer's hand or your hand\ndepending on whether\nself.dealer\nis\ntrue or not\nso we're going to you to to do this all\nin one line we're going to use a few\nthings that we learned about earlier\nincluding\nternary operators\nf strings and going between double\nquotes and single quotes and then one\nother new thing we are going to make\nthis into an f string\nand then we are going to be using\nactually\nsingle quotes and double quotes within\nthis f string so if you want to use\nsingle quotes and double quotes within a\nstring\nthen you can surround it with a triple\nsingle quote so i'm going to delete this\nquote and just do three single quotes\nand then delete this quote and do three\nsingle quotes and so\nwe got the\ndouble quote\nsingle quote and now this is a triple\nquote so now we can use the double quote\nand single quotes within this string\nso i'm going to um i'm just going to\ndelete your right here and we are going\nto\nput a ternary operator to see if it's\ngoing to say dealers or yours in the\ndealer's hand or your hand so\nto do some code i'm going to put these\ncurly braces here\nand then to do this ternary operator\nwe're going to put dealer\nand now here so here's the double quote\nand here's the single quote so dealers\nit will\nreturn dealers\nif\nself.dealer\nso basically if self.dealer equals true\nso return dealers if self.dealer\nelse will return\nyour\nokay that's the line so it's going to be\nthe dealer's hand or your hand and next\nwe will add a for loop that will print\nout each of the cards\nso\nfor card and self.cards\nprint\ncard\nand then finally if the player is not\nthe dealer it should print value\nand then a colon and then print the\nvalue of the cards so to do this we can\nactually use the the not operator so\nif not\nself.dealer\n[Music]\nthen we will print\nand we'll print value\nvalue\nand then i can just put a comma to print\ntwo different items so the string and\nit'll print self dot get\nvalue\nand it's gonna when you put a comma and\ntwo different things it's gonna put a\nspace in between\nand then finally we'll just add an empty\na print statement that will print a\nblank line\nokay let's test this out by\ninstead of printing this we are going to\nprint\nhand\ndot display\nto see if this all works how we thought\nit was going to work\nso your hand k of spades two of spades\nvalue is 12. so it's actually\ncalculating that correctly because\nthat's 10 plus 2 is 12 and then it's\ngoing to print none which indicates that\nwe did something wrong which is that we\ndid not need to print this because hand\ndisplay display already prints so now\njust call hand.display\nokay so now it doesn't put none or\ndoesn't yeah it doesn't put none at the\nend so that looks right\nokay when you're playing blackjack you\ndon't get to see\neveryone else's cards\nso\nwe're going to update this so when the\ndealer's cards are printed during the\ngame\nonly the second one should display\nthe first card should display as hidden\nso in this for loop\nwhen we're displaying the cards\nwe're going to need to get access to the\ncard index since that will determine\nwhich to display\nsince we're only going to display the\nsecond card\nso let's start by updating this for loop\nso we can get access to both the card\nand the card index\nwe briefly touched on this earlier in\nthe course we're going to be using the\nenumerate function\nso\nwhen it's for card in\nand now i'm going to type in enumerate\nand i'm going to pass in self.cards\nand this is going to return the index\nand the card for each card so i'm going\nto type it index\ncomma\nand so\nin we're getting the index and the card\nfor all the items in self.cards\nand so now we just have to update what's\nin the for loop\nto print\nhidden\nif it's the first card and it's a dealer\nso we'll do\nif index\nequals zero and self.dealer\nthen\nwe will print\nhidden\nand then we can use an else\nany other time\nand let's make sure this lines up\ncorrectly any other time we will print\nthe card\nso\nwhat we did wrong here is this should be\ndouble equal sign i did almost did the\nthe main mistake you always have to\nwatch out never use a single equal sign\nwhen you're checking equality\nbecause that's the single equal sign is\nthe assignment operator so if index\nequals zero and self and we it is the\ndealer then we'll print hidden\nso in our version of the game at the end\nof the game\nthat all the dealer's cards will be\nshown so you can see what the dealer had\nso to do that we're going to create a\nnew parameter in this\ndisplay method and it's going to be\ncalled show all dealer cards with\nunderscores for spaces and we're going\nto set the default value to false\nshow\nall\ndealer\ncards\nand when the default value is going to\nbe false\nnow we'll add it to this if statement\nso\nwe'll add another\nand\nnot\nshow\nall\ndealer cards\nso\nit's going to be hidden if we're not\nshowing all the dealer cards\nbut if we are showing all the dealer\ncards then this whole if statement will\nbe false so we'll just print the card\nand there's going to be one other\nscenario where we're not going to print\nhidden if there's a blackjack then the\ngame is over the person with the\nblackjack is just going to win and then\nwe'll just print all the cards so we're\ngoing to add that to this long if\nstatement here so we'll say\nand not is\nblack jack\nand it should be\nself dot is blackjack to be able to call\nthis method here\nand since this is such a long line is\nalways going to go to this next line we\ncan do this special thing\nwe can add a slash here\nand then just go to the next line\nso\nthis slash or it's a backslash i mean\nthis backslash will indicate that the\nline continues on the following line\nokay we're done creating the hand class\nso we'll delete\neverything that we were using for\ntesting before\nokay it's time to code the final and\nlongest class that runs the game so what\ni want you to do is create a class\ncalled game and inside the class create\na method called play and inside the\nmethod create a variable called\ngamenumber with the underscore for the\nspace\nand set that to zero so class game\nand then we'll create another variable\ngames to play and set that to zero\nnow we're going to set games to play\nto be whatever the user inputs\nafter they're asked how many games do\nyou want to play\nso you may remember how to do\ninput from before\nso we just do input\nnow we want to make sure the games to\nplay is an end so we just need to\nconvert this to an end\n[Music]\nokay now let's test things so far so at\nthe end i will put g equals game i'm\ngoing to create a new game\nand then g dot play\nokay let's test this\nhow many games you want to play\nfive\nokay well it's not going to play the\ngames yet we still have to create that\nso there is a potential for an error\nhere if i do this again and i just put\nhow many games i put you or some letter\nwe're going to get an error\nso basically anytime someone puts\nsomething that's not a number is going\nto be an error\nso let's create a try accept block to\nhandle the exception\nand\nif they put something that's not a\nnumber we'll\nprint you must enter a number so let me\narrange this and we've already learned a\nlittle bit about try except blocks i'm\ngoing to put try\nand it's going to try this\nand then if that doesn't work if there's\nan exception\n[Music]\nit will print\n[Music]\nyou must enter a number\nso currently the user gets only one\nchance to input a correct value let's\nmake the program keep asking the user\nfor a value until the user enters a\nnumber this can be done with a while\nloop the while loop just keeps looping\nwhile something is true so keep looping\nuntil the user enters a number by\nputting the entire tri-catch block into\na while loop that keeps looping while\nthe game's a play is less than or equal\nto zero\n[Music]\noh and i have to make sure i spell\nwhile correctly\nokay now let's create the main game loop\nthis is a new loop that will loop one\ntime per game played it should loop\nwhile game number is less than games to\nplay and the first line of loop should\nincrement the game number by one\ninside the loop we'll create a deck\nobject in a deck variable and shuffle\nthe deck\nnow we'll create a variable called\nplayerhand and set it to a hand object\nand then we'll create a variable called\ndealerhand and set it to a hand object\nbut this time we'll make sure to specify\nthat dealer equals true\nokay this next part will be a little\nmore complicated we'll create a for loop\nthat loops two times and each iteration\nshould add a card to the player's hand\nthat is dealt from the deck and add a\ncard to the dealer's hand that is also\ndealt from the deck\n[Music]\nokay we just dealt two cards each player\nnow information is going to be printed\nto the console for each game so let's\nstart by printing an empty line\nnow we'll print an asterisk 30 times to\nmake a divider\nthere's a trick to printing something a\nlot of times so i can put an asterisk\nin in quotation marks and then just do\ntimes 30.\nso it's going to print it 30 times now\nwe'll print the current game number out\nof the total number of games\nso it'll be something like game 4 of 10\nand we'll use an f string\nand then we'll just print 30 more\nasterisks\nnow we'll display the player's hand\nand then the dealer's hand\nat this point in the game someone could\nalready have won if they got a blackjack\nthe code should check if there's a\nwinner let's put the code to check if\nthere's a winner in a separate method of\nthe game class so create a method called\ncheck winner for now the method should\njust return false\nand just make sure everything's indented\ncorrectly this should be less indented\nthan the previous line here\nthe check winner function should take\nthe playerhand and dealer hand as\narguments\nnow before this return statement\nwe're going to check if\nplayerhand.getvalue is greater than 21.\nif so we'll print you busted dealer wins\nand then return true and remember once\nthe program gets to a return statement\nnone of the following statements in the\nblock are run\n[Music]\nnow we'll use a few lf statements to\ncheck for various other conditions so\nwe'll add an lf statement to see if the\ndealer got over 21\nand then we'll print dealer busted you\nwin and then return true\n[Music]\noh and i just copied all this but this\nshould be an l if not if\nand then we'll add an lf statement to\ncheck if both players have a blackjack\nand then we'll print both players have a\nblackjack tie\nand then return true\n[Music]\nand then we'll add an elf statement to\ncheck if player hand has a blackjack and\nthen we'll print you have blackjack you\nwin\nand then return true\nand then we'll check if the dealer hand\nhas a blackjack and then say dealer has\nblackjack dealer wins\nand return true\n[Music]\nokay we're done with all the hand when\nconditions but the game can also end if\nboth players choose not to get more\ncards so we're going to add a new\nargument to the check winner method with\na default value it's going to be game\nover equals false\nso we'll add game\nover\nequals false\nif it's true that means both players\nhave chosen not to get more cards now\nwe'll use the new argument\nthe string of if and lf statements\nshould only be run\nif it's not a game over and we'll make\nsure the line returned false is not in\nthe if statement\nso\nhere we'll say\nif\nnot game\nover\nand then i'll just select all these and\nput them\nin here\nso if game over is true we'll check if\nthe player hand's value is more than the\ndeal hands value and if so we'll print\nyou in\nso we can do this with an else here\nelse\nif player\n[Music]\nand then we'll do an lf for if it's a\ntie\nso this is an lf\nand we'll say if these are\nequal to each other\nand we'll print\ntie\nand then make sure we have the correct\nemoji for a tie\n[Music]\nand then else the dealer is one\nso we'll just do\nelse\n[Music]\nand then at the exact same level of\nindentation as the else we just added\nwe'll add return true this will make the\nmethod return true if game over equals\ntrue\nnow let's go back to the play method\ninside the while loop\nand then we'll do an if statement and\nwe'll do if and then we'll call the\ncheck winner function with the player\nhand and the dealer hand so let's go\nback up here\nif self dot check\nwinner\nand then we'll enter the player hand and\nthe dealer hand\n[Music]\nso if this is true that means we should\ngo on to the next game\nto do that we do continue\nso continue is going to just go to the\nnext iteration of the loop and the loop\nwe're on is this loop so when we go to\nthe next iteration we start a new game\nat this point in the game the player\nwill be able to choose hit or stand\nso inside the while loop but not inside\nthe if statement we just added we'll\ncreate a variable called choice and set\nit to be an empty string\nthe player should be able to keep\nchoosing until the value of their hand\nis over 21. so right under the choice\nvariable we'll add a while loop that\nloops while player hand's value is less\nthan 21 and inside the loop we'll add a\nline to get the choice\nthat's either going to be hit or stand\n[Music]\nand then we'll just add this to convert\nwhatever the answer is whatever the user\nput in we are going to convert it to\nlowercase\nthe while loop we just added should also\nstop if the user's choice is stand or or\ns so we'll update the line that starts\nthe while loop to also stop if the\nchoice isn't s or stand so just do and\nchoice\nnot in\nand this is there's a few ways to do it\nbut this is kind of a new way that i'm\njust showing you here\n[Music]\nso we are checking if choice is not in\nthis list and inside the list we have\ntwo elements s or stand so if choice is\nnot in that if the choice is not s or\nstand then we'll continue the loop\nand then after the input we'll print an\nempty line\nalso we want the program to keep asking\nthe user for a choice until the user\nenters a valid choice\nthe valid choices are hs hit and stand\nso right after the last print statement\nat the same indentation we'll add a\nwhile loop that will keep looping until\nthe user enters a valid choice\nand inside that while loop we'll ask for\ninput again\nbut we'll specify it can be h or s as\nwell\n[Music]\nso this is going to look very similar to\nthis line but it's going to kind of\nclarify things just a little bit\nand then we'll print another empty line\nthe last while loop we checked if choice\nwas not in a list\noutside of the recently added a while\nloop but inside the loop we just added\nbefore that one we'll add an if\nstatement to check if choice is in the\nlist hit or h and if so we'll add a card\nto the player's hand that is dealt from\nthe deck\nand then right below that will display\nthe player's hand\noutside all the while loops about the\nplayer making a choice we'll check for a\nwinner we'll use the same if statement\nand continue statement that we use last\ntime we checked for winner so i'll just\ncopy this\nand then\nwe have to make sure it's lined up\ncorrectly\nokay so this is outside of this while\nloop so after this all is all done we\ncheck for a winner let's just add an\nempty line there to\nmake it more clear that the while loop\nis over\nnow we'll store the value of the\nplayer's hand in a variable named player\nhand value with underscores for spaces\n[Music]\nand we'll do the same thing with the\ndealer's hand\n[Music]\nremember i could use the command d or\ncontrol d to select two words at once\nand change them both at the same time\nokay the dealer should keep drawing\ncards until dealer hand value is more\nthan 17 so we'll make this happen with a\nwhile loop\nand inside the loop we'll make sure the\ndealer is dealt a card from the deck and\nthat dealer hand value is updated\nso you can try that yourself but i'm\ngoing to show you right now while\ndealer\nhand value\nis less than 17.\nthen we will do dealer\nhand dot\nadd card\nokay and after this while loop will\ndisplay the dealer's hand and when we\ncall the display method we'll make sure\nto set show all dealer cards to true\n[Music]\nand since it's the end of the game\nthat's why we're just showing all the\ncards\nnow we'll check for a winner just like\nbefore\nthen we'll print final results\nthen we'll print your hand colon and\nthen the player hand value\n[Music]\nand then the dealer's hand\nnow we'll call the check winner function\none final time\nbut this time it should not be an if\nstatement and we'll pass in the hands\nlike before but this time we'll add a\nthird argument of true to indicate that\nthe game is over\nand at this point in the code the game\nis over\nso outside the outer while loop and in\nthe play method we'll add the final line\nof saying\nthanks for playing\nso it's going to be outside that while\nloop and we'll put print\nand just to demonstrate it i use an\nescape character to add a new line so\nthis slash in is going to add a new line\nand then do thanks for playing and when\ni line this up for with the while loop i\nrealize that this entire function should\nnot be lined up with the while loop\nsometimes it gets tricky with um\nfiguring out the exact right indentation\nso if i\nkind of go up straight up here\ni should say see that this should be\nlined up with this play function\nso i'm going to come back down to this\nfunction\ni'm going to\ncopy this all\nand i'm just going to do shift tab\nto indent it all one less\nthis happens sometimes when running\npython code sometimes the indentation\ncan get all mixed up but that should be\ncorrect now and i think the red squiggly\nlines here on the return true are not a\nmistake in the code but a mistake in the\nerror checking because it comes after\nthat emoji and it doesn't know how to\nhandle the emoji but it's perfectly fine\nfor code to have emojis okay let's run\nthe program and try it out so i'll press\nplay how many games i want to play i'll\ndo three\nso game of one of three so i can see i\nhave 17 i don't know what the dealer has\nbut i'm going to s for stand\nokay it's always good to test so it says\ndeal is missing one required positional\nargument so let's go up to\nit says line 139 so this can kind of\nhelp us know where to go so let's go up\nto 139\nand yeah i want to deal a single card so\ni'm going to deal one card here\nand\nwere there any other times i did use\ndeal\ni want to\ndeal one card here\nand\nyeah i got the deal one up here so i\njust think i just forgot the deal one in\nthose places\nso uh thanks to these error messages\nwhenever you have a problem make sure to\nread the error messages and it can often\ngive you a very good idea of what you\nneed to do wrong because even says deal\nis missing one required positional\nargument the number so that can really\nhelp figure out what's wrong with your\ncode so let's try that again we'll do\nthree games\nand then this time i will hit\nand i'm going to stand\nokay so now we have another error\nso it says 173\nand oh this i can already see this is\nspelled wrong so let's go to\n173\nand\nmake sure i spell that correctly\nand make sure i spell that correctly\nokay let's try again\nhow many games you want to play three\ni'm going to hit\nand hit\nokay so the first game\nyou busted dealer wins and now we're on\ngame number two i'll hit\nand this time i will stand\nokay dealer busted you win now we're on\ngame three of three\nand i will hit\nand i will stand\nand final results your hand 20 dealer's\nhand 19\nyou win\nthanks for playing\nwe just completed this whole game\nokay we've reached the end of the course\nso you've learned the basics of python\nand if you've been coding along you've\nwritten two python programs good luck on\nyour programming journey thanks for\nwatching and remember use your code for\ngood bye bye bye\nbye bye\nokay\n",
  "words": [
    "full",
    "course",
    "learn",
    "basics",
    "python",
    "programming",
    "beau",
    "carnes",
    "previously",
    "created",
    "one",
    "popular",
    "javascript",
    "courses",
    "youtube",
    "created",
    "many",
    "python",
    "tutorials",
    "created",
    "complete",
    "python",
    "course",
    "beginners",
    "need",
    "previous",
    "programming",
    "experience",
    "follow",
    "along",
    "need",
    "code",
    "python",
    "web",
    "browser",
    "course",
    "teach",
    "core",
    "aspects",
    "python",
    "programming",
    "language",
    "simplify",
    "complex",
    "topics",
    "python",
    "considered",
    "one",
    "popular",
    "programming",
    "languages",
    "world",
    "growing",
    "popularity",
    "python",
    "excels",
    "wide",
    "variety",
    "scenarios",
    "shell",
    "scripting",
    "task",
    "automation",
    "web",
    "development",
    "also",
    "language",
    "choice",
    "data",
    "analysis",
    "machine",
    "learning",
    "also",
    "adapt",
    "create",
    "games",
    "work",
    "embedded",
    "devices",
    "going",
    "jump",
    "right",
    "start",
    "coding",
    "first",
    "python",
    "program",
    "soon",
    "possible",
    "get",
    "started",
    "quickly",
    "use",
    "replit",
    "online",
    "ide",
    "allows",
    "users",
    "code",
    "run",
    "programs",
    "variety",
    "different",
    "languages",
    "web",
    "browser",
    "later",
    "show",
    "get",
    "python",
    "set",
    "local",
    "operating",
    "system",
    "first",
    "project",
    "go",
    "detail",
    "main",
    "features",
    "python",
    "section",
    "comprehensive",
    "detailed",
    "final",
    "section",
    "use",
    "learning",
    "code",
    "blackjack",
    "game",
    "guiding",
    "every",
    "step",
    "way",
    "throughout",
    "course",
    "little",
    "repetition",
    "key",
    "python",
    "programming",
    "concepts",
    "make",
    "sure",
    "deep",
    "understanding",
    "language",
    "let",
    "get",
    "started",
    "going",
    "start",
    "creating",
    "simple",
    "rock",
    "paper",
    "scissors",
    "game",
    "start",
    "going",
    "replied",
    "provided",
    "grant",
    "made",
    "course",
    "possible",
    "replie",
    "going",
    "make",
    "super",
    "easy",
    "get",
    "running",
    "really",
    "quickly",
    "either",
    "sign",
    "log",
    "create",
    "account",
    "going",
    "use",
    "google",
    "account",
    "okay",
    "logged",
    "replit",
    "either",
    "click",
    "create",
    "button",
    "plus",
    "button",
    "create",
    "new",
    "replit",
    "make",
    "sure",
    "create",
    "python",
    "replit",
    "see",
    "also",
    "select",
    "sorts",
    "different",
    "programming",
    "languages",
    "oh",
    "ones",
    "start",
    "word",
    "python",
    "tons",
    "different",
    "programming",
    "languages",
    "select",
    "case",
    "going",
    "use",
    "python",
    "click",
    "create",
    "reple",
    "okay",
    "let",
    "kind",
    "show",
    "replica",
    "little",
    "bit",
    "going",
    "create",
    "python",
    "code",
    "going",
    "zoom",
    "little",
    "bit",
    "going",
    "write",
    "code",
    "right",
    "see",
    "output",
    "right",
    "side",
    "create",
    "different",
    "files",
    "left",
    "side",
    "things",
    "like",
    "connect",
    "version",
    "control",
    "environment",
    "variables",
    "even",
    "going",
    "discussing",
    "course",
    "debugger",
    "connect",
    "database",
    "things",
    "mainly",
    "going",
    "using",
    "program",
    "write",
    "program",
    "going",
    "see",
    "results",
    "console",
    "going",
    "close",
    "files",
    "window",
    "little",
    "bigger",
    "going",
    "start",
    "showing",
    "create",
    "variable",
    "python",
    "rock",
    "paper",
    "scissors",
    "game",
    "going",
    "players",
    "player",
    "going",
    "choice",
    "computer",
    "going",
    "choice",
    "going",
    "create",
    "variable",
    "called",
    "player",
    "choice",
    "going",
    "set",
    "equal",
    "rock",
    "let",
    "look",
    "components",
    "variable",
    "name",
    "player",
    "choice",
    "see",
    "use",
    "underscore",
    "kind",
    "convention",
    "python",
    "use",
    "underscore",
    "going",
    "space",
    "variable",
    "name",
    "going",
    "assign",
    "equal",
    "sign",
    "assign",
    "operator",
    "going",
    "assign",
    "string",
    "string",
    "word",
    "collection",
    "characters",
    "like",
    "rock",
    "going",
    "put",
    "quotation",
    "marks",
    "around",
    "could",
    "also",
    "used",
    "single",
    "quotes",
    "instead",
    "double",
    "quotes",
    "long",
    "use",
    "quote",
    "side",
    "important",
    "created",
    "variable",
    "called",
    "playerchoice",
    "assigned",
    "rock",
    "reference",
    "variable",
    "later",
    "whenever",
    "reference",
    "variable",
    "called",
    "playerchoice",
    "going",
    "code",
    "going",
    "automatically",
    "replace",
    "player",
    "choice",
    "rock",
    "going",
    "interactive",
    "project",
    "hope",
    "following",
    "along",
    "hope",
    "already",
    "got",
    "replit",
    "loaded",
    "like",
    "throughout",
    "project",
    "going",
    "tell",
    "next",
    "thing",
    "want",
    "try",
    "watch",
    "going",
    "periodically",
    "want",
    "pause",
    "video",
    "based",
    "say",
    "try",
    "implement",
    "say",
    "come",
    "back",
    "video",
    "watch",
    "implement",
    "see",
    "implemented",
    "way",
    "going",
    "zoom",
    "one",
    "time",
    "first",
    "thing",
    "want",
    "see",
    "make",
    "another",
    "variable",
    "next",
    "line",
    "going",
    "press",
    "return",
    "enter",
    "go",
    "next",
    "line",
    "variable",
    "called",
    "computer",
    "choice",
    "set",
    "equal",
    "paper",
    "okay",
    "pause",
    "video",
    "see",
    "make",
    "variable",
    "called",
    "computer",
    "choice",
    "set",
    "equal",
    "paper",
    "pretty",
    "simple",
    "going",
    "start",
    "simple",
    "going",
    "get",
    "harder",
    "go",
    "computer",
    "choice",
    "equals",
    "paper",
    "okay",
    "like",
    "said",
    "starting",
    "simple",
    "going",
    "get",
    "complex",
    "go",
    "along",
    "done",
    "written",
    "first",
    "line",
    "python",
    "code",
    "course",
    "okay",
    "going",
    "talk",
    "functions",
    "function",
    "set",
    "code",
    "runs",
    "called",
    "going",
    "show",
    "put",
    "code",
    "function",
    "one",
    "thing",
    "python",
    "indentation",
    "important",
    "create",
    "define",
    "name",
    "function",
    "line",
    "code",
    "indented",
    "amount",
    "considered",
    "within",
    "function",
    "going",
    "create",
    "new",
    "line",
    "code",
    "top",
    "going",
    "call",
    "get",
    "choices",
    "okay",
    "define",
    "function",
    "def",
    "get",
    "choices",
    "going",
    "select",
    "two",
    "lines",
    "code",
    "time",
    "press",
    "tab",
    "key",
    "going",
    "indent",
    "amount",
    "see",
    "sometimes",
    "squiggly",
    "lines",
    "hover",
    "squiggly",
    "lines",
    "tell",
    "something",
    "case",
    "says",
    "local",
    "variable",
    "called",
    "player",
    "choice",
    "assigned",
    "never",
    "used",
    "necessarily",
    "bad",
    "telling",
    "us",
    "usually",
    "create",
    "variable",
    "going",
    "want",
    "use",
    "later",
    "well",
    "going",
    "use",
    "later",
    "gotten",
    "yet",
    "sometimes",
    "squiggly",
    "lines",
    "indicate",
    "sort",
    "error",
    "code",
    "usually",
    "think",
    "color",
    "red",
    "indicate",
    "error",
    "different",
    "color",
    "may",
    "mean",
    "something",
    "maybe",
    "quite",
    "right",
    "really",
    "big",
    "deal",
    "variable",
    "assigned",
    "never",
    "used",
    "going",
    "stop",
    "program",
    "saying",
    "variable",
    "really",
    "used",
    "anything",
    "yet",
    "change",
    "function",
    "going",
    "show",
    "call",
    "function",
    "later",
    "creating",
    "function",
    "called",
    "getchoices",
    "assigns",
    "two",
    "variables",
    "also",
    "going",
    "put",
    "another",
    "line",
    "end",
    "return",
    "statement",
    "going",
    "return",
    "player",
    "choice",
    "indicate",
    "returned",
    "function",
    "called",
    "later",
    "call",
    "function",
    "get",
    "choices",
    "return",
    "something",
    "return",
    "player",
    "choice",
    "right",
    "turn",
    "case",
    "rock",
    "use",
    "somewhere",
    "else",
    "code",
    "happen",
    "put",
    "extra",
    "line",
    "optional",
    "put",
    "blank",
    "line",
    "kind",
    "make",
    "things",
    "easy",
    "kind",
    "organize",
    "code",
    "little",
    "bit",
    "different",
    "sometimes",
    "put",
    "extra",
    "line",
    "different",
    "sections",
    "code",
    "makes",
    "easier",
    "identify",
    "different",
    "sections",
    "looking",
    "code",
    "computer",
    "extra",
    "lines",
    "mean",
    "anything",
    "indentation",
    "though",
    "definitely",
    "mean",
    "something",
    "long",
    "every",
    "line",
    "code",
    "indented",
    "amount",
    "previous",
    "line",
    "code",
    "within",
    "function",
    "okay",
    "want",
    "see",
    "change",
    "return",
    "statement",
    "instead",
    "returning",
    "player",
    "choice",
    "returning",
    "computer",
    "choice",
    "pretty",
    "simple",
    "returning",
    "computer",
    "choice",
    "going",
    "create",
    "another",
    "function",
    "going",
    "example",
    "function",
    "demonstrate",
    "something",
    "delete",
    "going",
    "part",
    "rock",
    "paper",
    "scissors",
    "game",
    "going",
    "create",
    "new",
    "function",
    "called",
    "greeting",
    "going",
    "add",
    "going",
    "oh",
    "yeah",
    "put",
    "semicolon",
    "also",
    "know",
    "colon",
    "function",
    "always",
    "colon",
    "end",
    "define",
    "going",
    "return",
    "string",
    "going",
    "say",
    "hi",
    "one",
    "thing",
    "notice",
    "put",
    "anything",
    "end",
    "line",
    "programming",
    "languages",
    "javascript",
    "going",
    "put",
    "semicolon",
    "line",
    "end",
    "line",
    "python",
    "matter",
    "put",
    "anything",
    "end",
    "line",
    "going",
    "call",
    "function",
    "call",
    "function",
    "type",
    "name",
    "put",
    "parentheses",
    "end",
    "going",
    "say",
    "greeting",
    "going",
    "call",
    "going",
    "call",
    "function",
    "going",
    "return",
    "string",
    "hi",
    "going",
    "anything",
    "string",
    "program",
    "anything",
    "string",
    "returned",
    "going",
    "go",
    "console",
    "anything",
    "let",
    "add",
    "additional",
    "code",
    "make",
    "string",
    "hi",
    "go",
    "console",
    "first",
    "let",
    "create",
    "variable",
    "takes",
    "greeting",
    "function",
    "returns",
    "going",
    "type",
    "response",
    "equals",
    "greeting",
    "set",
    "greeting",
    "returned",
    "variable",
    "called",
    "response",
    "use",
    "print",
    "function",
    "print",
    "response",
    "print",
    "console",
    "green",
    "button",
    "runs",
    "program",
    "click",
    "green",
    "button",
    "see",
    "high",
    "response",
    "getting",
    "high",
    "printing",
    "right",
    "okay",
    "actually",
    "going",
    "delete",
    "want",
    "try",
    "call",
    "get",
    "choices",
    "function",
    "store",
    "response",
    "variable",
    "called",
    "choices",
    "print",
    "value",
    "choices",
    "console",
    "pause",
    "try",
    "really",
    "quick",
    "going",
    "show",
    "okay",
    "remember",
    "variable",
    "called",
    "choices",
    "going",
    "set",
    "equal",
    "get",
    "choices",
    "variable",
    "ins",
    "get",
    "choices",
    "function",
    "instead",
    "typing",
    "get",
    "choices",
    "see",
    "code",
    "editor",
    "actually",
    "giving",
    "us",
    "suggestions",
    "want",
    "put",
    "typed",
    "get",
    "see",
    "saying",
    "get",
    "choices",
    "right",
    "instead",
    "typing",
    "whole",
    "thing",
    "either",
    "click",
    "press",
    "tab",
    "key",
    "going",
    "fill",
    "rest",
    "function",
    "name",
    "something",
    "little",
    "makes",
    "easier",
    "write",
    "program",
    "type",
    "every",
    "single",
    "thing",
    "already",
    "created",
    "function",
    "variable",
    "code",
    "editor",
    "reply",
    "suggest",
    "may",
    "want",
    "fill",
    "typing",
    "code",
    "editors",
    "something",
    "similar",
    "called",
    "code",
    "completion",
    "going",
    "still",
    "add",
    "parentheses",
    "end",
    "going",
    "print",
    "choices",
    "music",
    "okay",
    "gon",
    "na",
    "click",
    "play",
    "button",
    "make",
    "sure",
    "trying",
    "yep",
    "clicked",
    "paper",
    "great",
    "let",
    "talk",
    "dictionaries",
    "dictionaries",
    "python",
    "used",
    "store",
    "data",
    "values",
    "key",
    "value",
    "pairs",
    "let",
    "show",
    "example",
    "okay",
    "dictionary",
    "going",
    "curly",
    "braces",
    "beginning",
    "end",
    "key",
    "value",
    "pair",
    "one",
    "separated",
    "comma",
    "another",
    "key",
    "value",
    "pair",
    "setting",
    "name",
    "setting",
    "equal",
    "bow",
    "saying",
    "color",
    "equal",
    "blue",
    "key",
    "value",
    "key",
    "value",
    "key",
    "value",
    "dictionary",
    "variable",
    "like",
    "color",
    "could",
    "set",
    "already",
    "created",
    "variable",
    "going",
    "copy",
    "word",
    "choices",
    "put",
    "choices",
    "see",
    "surrounded",
    "quotation",
    "marks",
    "surrounded",
    "quotation",
    "marks",
    "string",
    "surround",
    "quotation",
    "marks",
    "getting",
    "variable",
    "choices",
    "would",
    "set",
    "paper",
    "choice",
    "going",
    "going",
    "equal",
    "delete",
    "line",
    "example",
    "return",
    "statement",
    "function",
    "going",
    "add",
    "new",
    "line",
    "going",
    "create",
    "variable",
    "named",
    "choices",
    "make",
    "equal",
    "dictionary",
    "first",
    "key",
    "player",
    "value",
    "player",
    "choice",
    "actually",
    "variable",
    "second",
    "key",
    "computer",
    "value",
    "computer",
    "choice",
    "going",
    "update",
    "return",
    "statement",
    "return",
    "choices",
    "dictionary",
    "going",
    "keep",
    "telling",
    "pause",
    "try",
    "rest",
    "time",
    "whenever",
    "say",
    "going",
    "know",
    "get",
    "done",
    "explaining",
    "pause",
    "try",
    "going",
    "going",
    "create",
    "choices",
    "going",
    "dictionary",
    "going",
    "player",
    "key",
    "value",
    "going",
    "player",
    "choice",
    "able",
    "press",
    "tab",
    "fill",
    "going",
    "computer",
    "going",
    "computer",
    "choice",
    "see",
    "sometimes",
    "goes",
    "next",
    "line",
    "wo",
    "line",
    "number",
    "right",
    "move",
    "going",
    "oh",
    "forgot",
    "put",
    "equal",
    "sign",
    "red",
    "squiggly",
    "line",
    "means",
    "red",
    "means",
    "problem",
    "program",
    "going",
    "run",
    "correctly",
    "orange",
    "means",
    "used",
    "choices",
    "yet",
    "right",
    "going",
    "return",
    "choices",
    "choices",
    "okay",
    "squiggly",
    "lines",
    "using",
    "every",
    "variable",
    "created",
    "returning",
    "choices",
    "may",
    "noticed",
    "player",
    "choice",
    "actually",
    "get",
    "set",
    "player",
    "actual",
    "choice",
    "let",
    "fix",
    "input",
    "function",
    "gets",
    "input",
    "user",
    "use",
    "get",
    "player",
    "choice",
    "instead",
    "players",
    "choice",
    "equal",
    "rock",
    "going",
    "make",
    "players",
    "choice",
    "input",
    "enter",
    "choice",
    "rock",
    "paper",
    "scissors",
    "okay",
    "get",
    "input",
    "user",
    "use",
    "input",
    "function",
    "going",
    "something",
    "going",
    "printed",
    "print",
    "console",
    "whatever",
    "result",
    "input",
    "player",
    "user",
    "entered",
    "get",
    "stored",
    "variable",
    "use",
    "later",
    "program",
    "let",
    "try",
    "click",
    "run",
    "enter",
    "let",
    "stop",
    "run",
    "okay",
    "enter",
    "choice",
    "rock",
    "paper",
    "scissors",
    "put",
    "rock",
    "see",
    "player",
    "choice",
    "still",
    "printing",
    "going",
    "print",
    "rock",
    "great",
    "let",
    "clean",
    "code",
    "little",
    "bit",
    "still",
    "need",
    "dictionary",
    "going",
    "part",
    "final",
    "code",
    "make",
    "computer",
    "actually",
    "make",
    "choice",
    "going",
    "learn",
    "importing",
    "libraries",
    "creating",
    "lists",
    "calling",
    "methods",
    "python",
    "libraries",
    "set",
    "useful",
    "functions",
    "write",
    "code",
    "scratch",
    "import",
    "library",
    "program",
    "get",
    "access",
    "features",
    "without",
    "writing",
    "additional",
    "code",
    "basic",
    "python",
    "challenging",
    "get",
    "program",
    "something",
    "randomly",
    "easy",
    "choose",
    "something",
    "randomly",
    "using",
    "random",
    "library",
    "let",
    "show",
    "import",
    "random",
    "library",
    "import",
    "statements",
    "used",
    "import",
    "libraries",
    "usually",
    "put",
    "top",
    "program",
    "going",
    "press",
    "enter",
    "times",
    "add",
    "lines",
    "top",
    "going",
    "import",
    "random",
    "going",
    "imported",
    "random",
    "library",
    "going",
    "use",
    "random",
    "library",
    "soon",
    "let",
    "learn",
    "lists",
    "list",
    "python",
    "used",
    "store",
    "multiple",
    "items",
    "single",
    "variable",
    "lists",
    "surrounded",
    "brackets",
    "item",
    "separated",
    "comma",
    "example",
    "could",
    "create",
    "variable",
    "called",
    "food",
    "set",
    "list",
    "going",
    "three",
    "items",
    "pizza",
    "carrots",
    "eggs",
    "music",
    "list",
    "strings",
    "also",
    "get",
    "random",
    "item",
    "list",
    "using",
    "going",
    "use",
    "imported",
    "random",
    "get",
    "random",
    "item",
    "using",
    "random",
    "library",
    "going",
    "put",
    "dinner",
    "music",
    "equals",
    "random",
    "dot",
    "choice",
    "going",
    "pass",
    "list",
    "using",
    "random",
    "library",
    "call",
    "choice",
    "pass",
    "list",
    "going",
    "choose",
    "random",
    "item",
    "list",
    "set",
    "equal",
    "dinner",
    "variable",
    "right",
    "computer",
    "choice",
    "always",
    "equals",
    "paper",
    "want",
    "random",
    "choice",
    "rock",
    "scissors",
    "paper",
    "computer",
    "choice",
    "variable",
    "created",
    "create",
    "new",
    "variable",
    "called",
    "options",
    "assign",
    "list",
    "possible",
    "options",
    "rock",
    "paper",
    "scissors",
    "set",
    "computer",
    "choice",
    "variable",
    "random",
    "choice",
    "one",
    "items",
    "options",
    "list",
    "okay",
    "hope",
    "already",
    "tried",
    "let",
    "show",
    "going",
    "work",
    "create",
    "options",
    "set",
    "equal",
    "list",
    "rock",
    "music",
    "paper",
    "scissors",
    "see",
    "code",
    "editor",
    "often",
    "pop",
    "boxes",
    "information",
    "give",
    "us",
    "help",
    "trying",
    "going",
    "set",
    "computer",
    "choice",
    "random",
    "dot",
    "choice",
    "food",
    "food",
    "looking",
    "food",
    "gon",
    "na",
    "options",
    "go",
    "let",
    "um",
    "try",
    "running",
    "program",
    "seeing",
    "happens",
    "going",
    "put",
    "rock",
    "see",
    "computer",
    "chose",
    "scissor",
    "scissors",
    "testing",
    "guess",
    "spelled",
    "wrong",
    "okay",
    "scissors",
    "let",
    "try",
    "running",
    "see",
    "shows",
    "scissors",
    "run",
    "enough",
    "time",
    "choosing",
    "paper",
    "choosing",
    "random",
    "okay",
    "working",
    "okay",
    "let",
    "delete",
    "code",
    "get",
    "choices",
    "function",
    "need",
    "test",
    "get",
    "choices",
    "function",
    "anymore",
    "let",
    "create",
    "new",
    "function",
    "called",
    "check",
    "know",
    "enough",
    "know",
    "enough",
    "create",
    "function",
    "def",
    "check",
    "music",
    "empty",
    "function",
    "nothing",
    "inside",
    "yet",
    "add",
    "oh",
    "colon",
    "add",
    "code",
    "inside",
    "function",
    "going",
    "create",
    "arguments",
    "function",
    "functions",
    "receive",
    "data",
    "called",
    "data",
    "called",
    "arguments",
    "creating",
    "function",
    "specify",
    "arguments",
    "inside",
    "parentheses",
    "using",
    "empty",
    "parentheses",
    "uh",
    "put",
    "tooth",
    "put",
    "things",
    "within",
    "parentheses",
    "function",
    "called",
    "going",
    "give",
    "two",
    "pieces",
    "data",
    "going",
    "pass",
    "two",
    "pieces",
    "data",
    "function",
    "first",
    "piece",
    "data",
    "going",
    "player",
    "second",
    "piece",
    "data",
    "going",
    "computer",
    "basically",
    "call",
    "anything",
    "want",
    "uh",
    "creating",
    "new",
    "variables",
    "call",
    "functions",
    "pass",
    "two",
    "pieces",
    "information",
    "assigned",
    "variable",
    "names",
    "player",
    "computer",
    "use",
    "inside",
    "function",
    "let",
    "finish",
    "complete",
    "function",
    "function",
    "code",
    "within",
    "function",
    "let",
    "add",
    "return",
    "statement",
    "going",
    "return",
    "list",
    "containing",
    "elements",
    "player",
    "computer",
    "check",
    "function",
    "actually",
    "return",
    "kind",
    "get",
    "get",
    "quickly",
    "created",
    "actually",
    "return",
    "different",
    "things",
    "depending",
    "player",
    "computer",
    "arguments",
    "statement",
    "allow",
    "program",
    "different",
    "things",
    "depending",
    "certain",
    "conditions",
    "statement",
    "first",
    "check",
    "condition",
    "condition",
    "true",
    "lines",
    "code",
    "statement",
    "indented",
    "amount",
    "execute",
    "quick",
    "example",
    "say",
    "equals",
    "three",
    "b",
    "equals",
    "five",
    "create",
    "statement",
    "greater",
    "b",
    "something",
    "like",
    "print",
    "yes",
    "less",
    "b",
    "want",
    "check",
    "b",
    "equal",
    "eq",
    "put",
    "two",
    "equal",
    "signs",
    "important",
    "never",
    "want",
    "use",
    "one",
    "equal",
    "sign",
    "single",
    "equal",
    "sign",
    "assignment",
    "operator",
    "assign",
    "variables",
    "equal",
    "use",
    "single",
    "equal",
    "sign",
    "like",
    "put",
    "single",
    "equal",
    "sign",
    "b",
    "without",
    "double",
    "equal",
    "sign",
    "going",
    "set",
    "equal",
    "b",
    "want",
    "double",
    "equal",
    "sign",
    "going",
    "check",
    "b",
    "value",
    "basically",
    "checks",
    "two",
    "values",
    "values",
    "equal",
    "also",
    "equal",
    "use",
    "exclamation",
    "point",
    "equal",
    "use",
    "less",
    "equal",
    "equal",
    "going",
    "delete",
    "going",
    "update",
    "risk",
    "turn",
    "statement",
    "uh",
    "return",
    "statement",
    "want",
    "going",
    "check",
    "player",
    "player",
    "equals",
    "computer",
    "true",
    "return",
    "string",
    "tie",
    "let",
    "player",
    "equals",
    "computer",
    "something",
    "maybe",
    "figured",
    "watching",
    "return",
    "string",
    "string",
    "going",
    "tie",
    "okay",
    "going",
    "return",
    "function",
    "return",
    "something",
    "function",
    "going",
    "return",
    "something",
    "true",
    "player",
    "equals",
    "computer",
    "wo",
    "return",
    "anything",
    "make",
    "make",
    "notice",
    "see",
    "line",
    "indented",
    "within",
    "statement",
    "indented",
    "within",
    "function",
    "really",
    "quick",
    "thing",
    "note",
    "return",
    "statement",
    "parentheses",
    "optional",
    "could",
    "also",
    "add",
    "parentheses",
    "like",
    "need",
    "gon",
    "na",
    "get",
    "rid",
    "music",
    "currently",
    "tie",
    "program",
    "returns",
    "tie",
    "player",
    "know",
    "true",
    "let",
    "program",
    "print",
    "options",
    "player",
    "computer",
    "chose",
    "concatenate",
    "strings",
    "plus",
    "operator",
    "means",
    "combine",
    "strings",
    "strings",
    "strings",
    "variables",
    "let",
    "show",
    "print",
    "options",
    "chosen",
    "going",
    "print",
    "chose",
    "put",
    "player",
    "chose",
    "add",
    "space",
    "going",
    "print",
    "space",
    "choose",
    "print",
    "player",
    "chose",
    "rock",
    "say",
    "chose",
    "rock",
    "concave",
    "concatenated",
    "together",
    "add",
    "another",
    "plus",
    "sign",
    "put",
    "another",
    "string",
    "going",
    "say",
    "computer",
    "chose",
    "oh",
    "like",
    "covered",
    "everything",
    "computer",
    "computer",
    "chose",
    "type",
    "see",
    "figure",
    "add",
    "end",
    "put",
    "computer",
    "chose",
    "computer",
    "chose",
    "computer",
    "value",
    "variable",
    "lot",
    "times",
    "programming",
    "bunch",
    "ways",
    "thing",
    "one",
    "way",
    "combine",
    "strings",
    "variables",
    "together",
    "another",
    "way",
    "little",
    "simpler",
    "called",
    "f",
    "string",
    "f",
    "string",
    "allow",
    "make",
    "strings",
    "variables",
    "python",
    "code",
    "put",
    "variable",
    "put",
    "f",
    "beginning",
    "string",
    "let",
    "give",
    "example",
    "age",
    "equals",
    "25",
    "going",
    "create",
    "variable",
    "going",
    "make",
    "f",
    "string",
    "make",
    "print",
    "statement",
    "going",
    "put",
    "string",
    "instead",
    "starting",
    "quotation",
    "mark",
    "going",
    "start",
    "f",
    "going",
    "put",
    "gem",
    "whenever",
    "want",
    "put",
    "variable",
    "kind",
    "python",
    "code",
    "going",
    "put",
    "curly",
    "braces",
    "going",
    "put",
    "variable",
    "within",
    "curly",
    "braces",
    "years",
    "old",
    "put",
    "end",
    "string",
    "let",
    "put",
    "period",
    "okay",
    "gem",
    "age",
    "going",
    "25",
    "years",
    "old",
    "f",
    "string",
    "slightly",
    "simpler",
    "way",
    "combine",
    "strings",
    "variables",
    "want",
    "see",
    "figure",
    "update",
    "line",
    "right",
    "uses",
    "f",
    "string",
    "uses",
    "curly",
    "braces",
    "instead",
    "pluses",
    "yeah",
    "going",
    "put",
    "f",
    "delete",
    "lot",
    "things",
    "music",
    "going",
    "put",
    "curly",
    "braces",
    "chose",
    "player",
    "go",
    "okay",
    "cho",
    "comma",
    "chose",
    "player",
    "computer",
    "chose",
    "computer",
    "okay",
    "able",
    "put",
    "variable",
    "within",
    "string",
    "f",
    "string",
    "going",
    "test",
    "uh",
    "code",
    "code",
    "function",
    "never",
    "gets",
    "run",
    "press",
    "run",
    "button",
    "going",
    "run",
    "code",
    "within",
    "function",
    "unless",
    "function",
    "called",
    "within",
    "program",
    "going",
    "test",
    "function",
    "right",
    "want",
    "see",
    "add",
    "line",
    "call",
    "check",
    "function",
    "call",
    "uh",
    "rock",
    "paper",
    "going",
    "check",
    "rock",
    "actually",
    "pass",
    "strings",
    "rock",
    "paper",
    "going",
    "going",
    "call",
    "function",
    "rock",
    "terms",
    "instead",
    "player",
    "paper",
    "instead",
    "computer",
    "let",
    "try",
    "stride",
    "running",
    "program",
    "chose",
    "rock",
    "computer",
    "chose",
    "paper",
    "worry",
    "little",
    "icons",
    "sometimes",
    "block",
    "still",
    "behind",
    "little",
    "search",
    "icon",
    "see",
    "chose",
    "rock",
    "computer",
    "chose",
    "paper",
    "let",
    "get",
    "back",
    "checking",
    "winner",
    "far",
    "function",
    "going",
    "check",
    "tie",
    "start",
    "adding",
    "code",
    "check",
    "different",
    "wing",
    "conditions",
    "let",
    "learn",
    "else",
    "elif",
    "statements",
    "okay",
    "going",
    "give",
    "going",
    "paste",
    "example",
    "statement",
    "age",
    "greater",
    "equal",
    "18",
    "going",
    "print",
    "else",
    "anytime",
    "true",
    "going",
    "print",
    "child",
    "okay",
    "combined",
    "something",
    "else",
    "ellis",
    "statement",
    "ls",
    "stands",
    "else",
    "combines",
    "else",
    "put",
    "condition",
    "age",
    "greater",
    "equal",
    "18",
    "print",
    "adult",
    "else",
    "going",
    "check",
    "age",
    "greater",
    "12",
    "teenager",
    "else",
    "age",
    "greater",
    "1",
    "print",
    "child",
    "else",
    "none",
    "things",
    "true",
    "print",
    "baby",
    "going",
    "one",
    "going",
    "get",
    "gets",
    "first",
    "one",
    "true",
    "going",
    "check",
    "rest",
    "going",
    "kind",
    "go",
    "next",
    "line",
    "code",
    "statements",
    "going",
    "choose",
    "one",
    "gets",
    "first",
    "one",
    "true",
    "done",
    "whole",
    "section",
    "code",
    "also",
    "check",
    "two",
    "conditions",
    "let",
    "give",
    "example",
    "going",
    "delete",
    "code",
    "going",
    "create",
    "alif",
    "statement",
    "elif",
    "else",
    "going",
    "check",
    "player",
    "equal",
    "rock",
    "going",
    "type",
    "word",
    "computer",
    "equal",
    "scissors",
    "checking",
    "conditions",
    "true",
    "condition",
    "condition",
    "true",
    "following",
    "statement",
    "happen",
    "going",
    "put",
    "return",
    "rock",
    "smashes",
    "music",
    "scissors",
    "music",
    "okay",
    "next",
    "thing",
    "going",
    "let",
    "see",
    "figure",
    "going",
    "add",
    "another",
    "lf",
    "statement",
    "time",
    "check",
    "players",
    "equal",
    "rock",
    "computer",
    "equal",
    "paper",
    "return",
    "paper",
    "covers",
    "rock",
    "lose",
    "going",
    "make",
    "kind",
    "easier",
    "copying",
    "code",
    "going",
    "paste",
    "change",
    "players",
    "equal",
    "rock",
    "computer",
    "equal",
    "paper",
    "instead",
    "scissors",
    "paper",
    "going",
    "say",
    "paper",
    "covers",
    "rock",
    "lose",
    "wo",
    "even",
    "exclamation",
    "point",
    "anymore",
    "exciting",
    "lose",
    "okay",
    "kind",
    "see",
    "could",
    "add",
    "elif",
    "statements",
    "cover",
    "different",
    "situations",
    "instead",
    "going",
    "talk",
    "refactoring",
    "refactoring",
    "process",
    "restructuring",
    "code",
    "keeping",
    "original",
    "functionality",
    "created",
    "pro",
    "creating",
    "program",
    "common",
    "refactor",
    "code",
    "make",
    "simpler",
    "understandable",
    "actually",
    "going",
    "refactor",
    "code",
    "highlighted",
    "going",
    "instead",
    "use",
    "nested",
    "statement",
    "nested",
    "statement",
    "make",
    "code",
    "understandable",
    "quick",
    "glance",
    "like",
    "put",
    "statement",
    "inside",
    "another",
    "else",
    "else",
    "statement",
    "notice",
    "first",
    "elf",
    "statement",
    "player",
    "equals",
    "rock",
    "second",
    "l",
    "statement",
    "player",
    "equals",
    "rock",
    "see",
    "figure",
    "refactor",
    "use",
    "anymore",
    "going",
    "use",
    "one",
    "statement",
    "one",
    "else",
    "statement",
    "statement",
    "elif",
    "statement",
    "make",
    "sense",
    "see",
    "right",
    "going",
    "move",
    "little",
    "bit",
    "going",
    "actually",
    "copy",
    "paste",
    "items",
    "going",
    "start",
    "l",
    "player",
    "equals",
    "rock",
    "going",
    "going",
    "put",
    "new",
    "line",
    "say",
    "computer",
    "equals",
    "scissors",
    "first",
    "going",
    "check",
    "player",
    "equals",
    "rock",
    "going",
    "check",
    "going",
    "nested",
    "statement",
    "computer",
    "equals",
    "scissors",
    "computer",
    "equals",
    "scissors",
    "going",
    "use",
    "return",
    "statement",
    "make",
    "sure",
    "indented",
    "correctly",
    "going",
    "player",
    "player",
    "equals",
    "rock",
    "computer",
    "equals",
    "scissors",
    "return",
    "oh",
    "needs",
    "indented",
    "one",
    "time",
    "inside",
    "statement",
    "even",
    "need",
    "elf",
    "statement",
    "else",
    "statement",
    "else",
    "computer",
    "equals",
    "scissors",
    "one",
    "option",
    "already",
    "know",
    "player",
    "equals",
    "rock",
    "computer",
    "equals",
    "rock",
    "already",
    "returned",
    "tie",
    "way",
    "return",
    "something",
    "rest",
    "code",
    "function",
    "run",
    "returning",
    "tie",
    "nothing",
    "else",
    "going",
    "run",
    "know",
    "computer",
    "ca",
    "equal",
    "rock",
    "point",
    "either",
    "going",
    "scissors",
    "paper",
    "even",
    "check",
    "computer",
    "equals",
    "paper",
    "point",
    "computer",
    "equals",
    "paper",
    "return",
    "line",
    "let",
    "see",
    "go",
    "return",
    "paper",
    "covers",
    "rock",
    "lose",
    "basically",
    "add",
    "two",
    "sections",
    "similar",
    "one",
    "player",
    "equals",
    "rock",
    "another",
    "section",
    "player",
    "equals",
    "paper",
    "player",
    "equals",
    "scissors",
    "stuff",
    "inside",
    "going",
    "pretty",
    "similar",
    "corresponding",
    "different",
    "relationships",
    "rock",
    "paper",
    "scissors",
    "going",
    "copy",
    "paste",
    "one",
    "thing",
    "important",
    "make",
    "sure",
    "elif",
    "statement",
    "lines",
    "else",
    "statement",
    "going",
    "paper",
    "going",
    "check",
    "computer",
    "equals",
    "rock",
    "computer",
    "equals",
    "rock",
    "say",
    "paper",
    "covers",
    "rock",
    "win",
    "say",
    "scissors",
    "cuts",
    "paper",
    "lose",
    "final",
    "one",
    "point",
    "sure",
    "figure",
    "going",
    "add",
    "one",
    "section",
    "player",
    "equals",
    "scissors",
    "first",
    "going",
    "check",
    "computer",
    "equals",
    "paper",
    "scissors",
    "cuts",
    "paper",
    "making",
    "sure",
    "making",
    "every",
    "time",
    "first",
    "one",
    "win",
    "second",
    "one",
    "lose",
    "could",
    "way",
    "around",
    "rock",
    "smashes",
    "scissors",
    "lose",
    "okay",
    "almost",
    "finished",
    "whole",
    "program",
    "get",
    "choices",
    "function",
    "check",
    "win",
    "function",
    "complete",
    "let",
    "code",
    "call",
    "functions",
    "play",
    "game",
    "first",
    "let",
    "remove",
    "check",
    "create",
    "variable",
    "called",
    "choices",
    "make",
    "equal",
    "result",
    "calling",
    "get",
    "choices",
    "function",
    "make",
    "sure",
    "indented",
    "first",
    "first",
    "column",
    "guess",
    "right",
    "ended",
    "choices",
    "equals",
    "get",
    "choices",
    "music",
    "one",
    "thing",
    "going",
    "return",
    "dictionary",
    "look",
    "get",
    "choices",
    "returning",
    "choices",
    "going",
    "dictionary",
    "like",
    "let",
    "copy",
    "going",
    "show",
    "something",
    "going",
    "paste",
    "make",
    "example",
    "could",
    "look",
    "like",
    "could",
    "look",
    "like",
    "rock",
    "paper",
    "always",
    "use",
    "rock",
    "paper",
    "examples",
    "scissors",
    "little",
    "harder",
    "spell",
    "little",
    "easier",
    "let",
    "one",
    "thing",
    "talked",
    "uh",
    "access",
    "specific",
    "element",
    "within",
    "dictionary",
    "dictionary",
    "let",
    "say",
    "call",
    "um",
    "well",
    "call",
    "choices",
    "even",
    "going",
    "delete",
    "going",
    "choices",
    "choices",
    "equals",
    "let",
    "say",
    "want",
    "get",
    "choice",
    "player",
    "let",
    "show",
    "would",
    "p",
    "choice",
    "player",
    "choice",
    "going",
    "put",
    "equal",
    "choices",
    "get",
    "value",
    "player",
    "going",
    "put",
    "brackets",
    "brackets",
    "look",
    "like",
    "put",
    "key",
    "want",
    "value",
    "key",
    "would",
    "player",
    "put",
    "name",
    "dictionary",
    "put",
    "brackets",
    "going",
    "use",
    "brackets",
    "identify",
    "key",
    "want",
    "value",
    "key",
    "value",
    "rock",
    "key",
    "value",
    "paper",
    "get",
    "player",
    "choice",
    "sure",
    "see",
    "get",
    "computer",
    "choices",
    "instead",
    "take",
    "computer",
    "word",
    "put",
    "right",
    "uh",
    "computer",
    "okay",
    "going",
    "get",
    "rid",
    "going",
    "get",
    "choices",
    "listen",
    "carefully",
    "going",
    "next",
    "going",
    "create",
    "variable",
    "called",
    "result",
    "make",
    "equal",
    "result",
    "calling",
    "check",
    "win",
    "function",
    "call",
    "check",
    "win",
    "function",
    "going",
    "pass",
    "value",
    "player",
    "key",
    "computer",
    "key",
    "choices",
    "dictionary",
    "let",
    "see",
    "mean",
    "result",
    "going",
    "going",
    "call",
    "music",
    "check",
    "going",
    "pass",
    "going",
    "pass",
    "choices",
    "player",
    "choices",
    "computer",
    "remember",
    "showed",
    "example",
    "dictionary",
    "getting",
    "player",
    "key",
    "value",
    "player",
    "key",
    "value",
    "computer",
    "key",
    "know",
    "wins",
    "result",
    "variable",
    "going",
    "one",
    "strings",
    "returned",
    "either",
    "tie",
    "rock",
    "space",
    "scissors",
    "paper",
    "covered",
    "rocks",
    "print",
    "result",
    "going",
    "print",
    "result",
    "okay",
    "try",
    "game",
    "going",
    "click",
    "run",
    "button",
    "okay",
    "sometimes",
    "better",
    "test",
    "little",
    "earlier",
    "forgot",
    "semicolon",
    "um",
    "semicolon",
    "see",
    "red",
    "arrow",
    "seen",
    "semicolon",
    "semicolon",
    "okay",
    "let",
    "try",
    "going",
    "play",
    "program",
    "choice",
    "going",
    "rock",
    "noticed",
    "something",
    "else",
    "want",
    "change",
    "enter",
    "choice",
    "started",
    "parenthesis",
    "parentheses",
    "end",
    "going",
    "change",
    "really",
    "quick",
    "enter",
    "choice",
    "going",
    "put",
    "parentheses",
    "test",
    "rock",
    "okay",
    "chose",
    "rock",
    "computer",
    "chose",
    "rock",
    "tie",
    "okay",
    "gon",
    "na",
    "play",
    "paper",
    "chose",
    "paper",
    "computer",
    "chose",
    "scissors",
    "scissors",
    "cuts",
    "paper",
    "lose",
    "okay",
    "created",
    "python",
    "game",
    "hopefully",
    "gives",
    "better",
    "understanding",
    "like",
    "program",
    "python",
    "know",
    "basic",
    "concepts",
    "python",
    "lot",
    "learn",
    "python",
    "going",
    "covering",
    "lot",
    "course",
    "wanted",
    "start",
    "game",
    "full",
    "program",
    "right",
    "bat",
    "could",
    "go",
    "program",
    "next",
    "section",
    "going",
    "start",
    "going",
    "detail",
    "common",
    "features",
    "python",
    "going",
    "cover",
    "features",
    "already",
    "used",
    "game",
    "plus",
    "lot",
    "additional",
    "features",
    "additional",
    "common",
    "features",
    "used",
    "game",
    "final",
    "section",
    "course",
    "going",
    "code",
    "complex",
    "game",
    "blackjack",
    "game",
    "let",
    "get",
    "started",
    "next",
    "section",
    "one",
    "quickest",
    "easiest",
    "ways",
    "get",
    "started",
    "python",
    "using",
    "may",
    "also",
    "want",
    "get",
    "python",
    "running",
    "local",
    "computer",
    "want",
    "start",
    "going",
    "go",
    "downloads",
    "menu",
    "going",
    "click",
    "want",
    "download",
    "going",
    "default",
    "operating",
    "system",
    "also",
    "go",
    "platforms",
    "make",
    "sure",
    "find",
    "platform",
    "want",
    "download",
    "going",
    "instructions",
    "going",
    "tell",
    "go",
    "getting",
    "installed",
    "specific",
    "computer",
    "different",
    "ways",
    "run",
    "python",
    "programs",
    "one",
    "ways",
    "interactive",
    "prompt",
    "get",
    "installed",
    "open",
    "terminal",
    "type",
    "python",
    "sometimes",
    "going",
    "python",
    "3",
    "depending",
    "got",
    "installed",
    "going",
    "see",
    "interactive",
    "prompt",
    "called",
    "python",
    "rebel",
    "different",
    "rebel",
    "creating",
    "created",
    "replit",
    "start",
    "coding",
    "python",
    "right",
    "could",
    "say",
    "name",
    "equals",
    "bow",
    "make",
    "sure",
    "put",
    "quotation",
    "marks",
    "end",
    "gotten",
    "variable",
    "stored",
    "bow",
    "type",
    "variable",
    "name",
    "name",
    "going",
    "show",
    "show",
    "value",
    "variable",
    "type",
    "different",
    "python",
    "commands",
    "right",
    "inactive",
    "prompt",
    "quit",
    "ready",
    "quit",
    "also",
    "common",
    "run",
    "python",
    "using",
    "visual",
    "studio",
    "code",
    "search",
    "visual",
    "studio",
    "code",
    "get",
    "download",
    "page",
    "download",
    "system",
    "also",
    "download",
    "different",
    "systems",
    "open",
    "visual",
    "studio",
    "code",
    "get",
    "python",
    "working",
    "going",
    "want",
    "install",
    "python",
    "extension",
    "going",
    "click",
    "extensions",
    "search",
    "python",
    "may",
    "listed",
    "popular",
    "extensions",
    "going",
    "click",
    "install",
    "going",
    "make",
    "easier",
    "work",
    "python",
    "visual",
    "studio",
    "code",
    "kind",
    "close",
    "stuff",
    "going",
    "create",
    "new",
    "file",
    "call",
    "type",
    "name",
    "equals",
    "bow",
    "print",
    "name",
    "save",
    "going",
    "going",
    "add",
    "colors",
    "correspond",
    "python",
    "going",
    "click",
    "play",
    "button",
    "going",
    "play",
    "going",
    "open",
    "terminal",
    "window",
    "going",
    "run",
    "program",
    "going",
    "print",
    "bow",
    "program",
    "zoom",
    "little",
    "bit",
    "able",
    "see",
    "difference",
    "well",
    "print",
    "name",
    "runs",
    "program",
    "like",
    "see",
    "terminal",
    "command",
    "used",
    "run",
    "could",
    "use",
    "command",
    "terminal",
    "instead",
    "typing",
    "whole",
    "thing",
    "location",
    "python",
    "3",
    "python",
    "3",
    "file",
    "located",
    "copy",
    "paste",
    "going",
    "run",
    "program",
    "section",
    "learn",
    "core",
    "features",
    "python",
    "go",
    "detail",
    "things",
    "learned",
    "first",
    "project",
    "covering",
    "lot",
    "concepts",
    "section",
    "heavily",
    "inspired",
    "python",
    "handbook",
    "flavio",
    "copes",
    "check",
    "freecodecamp",
    "news",
    "like",
    "first",
    "part",
    "course",
    "running",
    "python",
    "replit",
    "get",
    "logged",
    "replit",
    "like",
    "already",
    "showed",
    "hit",
    "plus",
    "button",
    "create",
    "button",
    "create",
    "new",
    "replit",
    "search",
    "programming",
    "language",
    "click",
    "python",
    "create",
    "python",
    "repel",
    "instantly",
    "start",
    "creating",
    "writing",
    "python",
    "code",
    "replit",
    "like",
    "showed",
    "got",
    "different",
    "files",
    "going",
    "start",
    "using",
    "one",
    "file",
    "going",
    "encode",
    "going",
    "appear",
    "run",
    "code",
    "going",
    "close",
    "list",
    "files",
    "let",
    "start",
    "beginning",
    "gotten",
    "used",
    "coding",
    "python",
    "creating",
    "rock",
    "paper",
    "scissors",
    "game",
    "going",
    "kind",
    "deep",
    "dive",
    "basic",
    "commands",
    "python",
    "going",
    "review",
    "going",
    "going",
    "detail",
    "elements",
    "first",
    "thing",
    "going",
    "talk",
    "variables",
    "create",
    "new",
    "python",
    "variable",
    "assigning",
    "value",
    "label",
    "using",
    "equal",
    "sign",
    "assignment",
    "operator",
    "let",
    "give",
    "example",
    "like",
    "showing",
    "name",
    "equals",
    "bo",
    "let",
    "zoom",
    "little",
    "bit",
    "variable",
    "name",
    "name",
    "assigned",
    "value",
    "bo",
    "also",
    "uh",
    "create",
    "create",
    "variable",
    "number",
    "could",
    "age",
    "equals",
    "variable",
    "name",
    "composed",
    "characters",
    "numbers",
    "underscore",
    "character",
    "start",
    "number",
    "could",
    "anything",
    "like",
    "name",
    "one",
    "could",
    "capital",
    "letters",
    "could",
    "could",
    "underscore",
    "start",
    "underscore",
    "like",
    "said",
    "like",
    "see",
    "putting",
    "red",
    "squiggly",
    "lines",
    "showing",
    "actual",
    "python",
    "code",
    "going",
    "create",
    "variable",
    "assigning",
    "value",
    "using",
    "variable",
    "already",
    "exists",
    "showing",
    "different",
    "examples",
    "different",
    "variables",
    "example",
    "invalid",
    "variable",
    "name",
    "start",
    "number",
    "like",
    "ca",
    "variable",
    "ca",
    "start",
    "number",
    "could",
    "put",
    "something",
    "like",
    "test",
    "exclamation",
    "point",
    "ca",
    "use",
    "exclamation",
    "points",
    "ca",
    "use",
    "percent",
    "signs",
    "anything",
    "valid",
    "unless",
    "python",
    "keyword",
    "keywords",
    "keyword",
    "something",
    "used",
    "write",
    "python",
    "like",
    "import",
    "words",
    "specific",
    "meanings",
    "within",
    "python",
    "use",
    "variable",
    "name",
    "need",
    "memorize",
    "python",
    "editor",
    "alert",
    "use",
    "one",
    "variable",
    "like",
    "say",
    "equals",
    "hi",
    "see",
    "going",
    "show",
    "right",
    "squiggly",
    "lines",
    "done",
    "something",
    "wrong",
    "invalid",
    "syntax",
    "also",
    "see",
    "turns",
    "blue",
    "word",
    "turns",
    "blue",
    "keyword",
    "ca",
    "use",
    "variable",
    "name",
    "like",
    "said",
    "going",
    "alert",
    "use",
    "keyword",
    "variable",
    "start",
    "gradually",
    "recognize",
    "part",
    "python",
    "programming",
    "language",
    "syntax",
    "let",
    "talk",
    "talk",
    "expressions",
    "statements",
    "python",
    "expression",
    "sort",
    "code",
    "returns",
    "value",
    "like",
    "instance",
    "one",
    "plus",
    "one",
    "string",
    "like",
    "bow",
    "going",
    "like",
    "going",
    "return",
    "going",
    "return",
    "string",
    "bow",
    "statement",
    "hand",
    "operation",
    "value",
    "example",
    "statement",
    "operation",
    "assigning",
    "variable",
    "another",
    "statement",
    "would",
    "like",
    "print",
    "name",
    "going",
    "statement",
    "something",
    "value",
    "program",
    "formed",
    "series",
    "statements",
    "statement",
    "put",
    "line",
    "like",
    "two",
    "lines",
    "use",
    "semicolon",
    "one",
    "statement",
    "single",
    "line",
    "could",
    "put",
    "semicolon",
    "run",
    "program",
    "still",
    "going",
    "print",
    "name",
    "let",
    "already",
    "learned",
    "run",
    "program",
    "replica",
    "click",
    "button",
    "right",
    "see",
    "going",
    "print",
    "bow",
    "put",
    "two",
    "different",
    "lines",
    "going",
    "thing",
    "run",
    "program",
    "going",
    "still",
    "thing",
    "let",
    "talk",
    "comments",
    "something",
    "talked",
    "course",
    "yet",
    "python",
    "program",
    "everything",
    "hash",
    "mark",
    "ignored",
    "put",
    "hash",
    "mark",
    "say",
    "commented",
    "line",
    "run",
    "program",
    "line",
    "going",
    "completely",
    "ignored",
    "also",
    "put",
    "inline",
    "comment",
    "put",
    "hash",
    "mark",
    "inline",
    "comment",
    "cool",
    "thing",
    "code",
    "editors",
    "including",
    "replit",
    "going",
    "put",
    "comments",
    "going",
    "make",
    "gray",
    "know",
    "really",
    "part",
    "program",
    "sort",
    "special",
    "note",
    "programmer",
    "wants",
    "put",
    "part",
    "program",
    "want",
    "emphasize",
    "important",
    "indentation",
    "meaningful",
    "python",
    "ca",
    "randomly",
    "indent",
    "things",
    "like",
    "ca",
    "press",
    "tab",
    "indent",
    "kind",
    "lined",
    "line",
    "see",
    "red",
    "squiggly",
    "line",
    "says",
    "unexpected",
    "expected",
    "indent",
    "languages",
    "meaningful",
    "white",
    "space",
    "indentation",
    "matter",
    "python",
    "indentation",
    "matters",
    "case",
    "try",
    "run",
    "program",
    "run",
    "see",
    "error",
    "right",
    "showing",
    "red",
    "says",
    "indentation",
    "error",
    "unexpected",
    "indent",
    "indentation",
    "special",
    "meaning",
    "unindent",
    "everything",
    "indented",
    "belongs",
    "block",
    "like",
    "control",
    "statement",
    "conditional",
    "block",
    "function",
    "class",
    "body",
    "talking",
    "different",
    "blocks",
    "let",
    "talk",
    "data",
    "types",
    "python",
    "several",
    "types",
    "instance",
    "string",
    "anything",
    "surrounded",
    "quotation",
    "marks",
    "string",
    "one",
    "data",
    "type",
    "check",
    "type",
    "variable",
    "using",
    "type",
    "function",
    "could",
    "say",
    "type",
    "put",
    "name",
    "make",
    "sure",
    "able",
    "see",
    "console",
    "going",
    "print",
    "type",
    "press",
    "run",
    "program",
    "see",
    "type",
    "class",
    "str",
    "stands",
    "string",
    "test",
    "see",
    "something",
    "string",
    "comparing",
    "str",
    "could",
    "equals",
    "equals",
    "str",
    "run",
    "going",
    "say",
    "true",
    "type",
    "name",
    "equal",
    "string",
    "also",
    "use",
    "instance",
    "going",
    "uh",
    "instead",
    "type",
    "instance",
    "pass",
    "two",
    "things",
    "first",
    "thing",
    "going",
    "pass",
    "instance",
    "passing",
    "name",
    "variable",
    "str",
    "trying",
    "see",
    "name",
    "instance",
    "string",
    "run",
    "say",
    "true",
    "testing",
    "str",
    "class",
    "string",
    "class",
    "works",
    "data",
    "types",
    "data",
    "types",
    "around",
    "numbers",
    "integer",
    "number",
    "integer",
    "numbers",
    "represented",
    "using",
    "int",
    "class",
    "int",
    "class",
    "floating",
    "point",
    "numbers",
    "fractions",
    "type",
    "type",
    "float",
    "say",
    "age",
    "equals",
    "2",
    "check",
    "instance",
    "pass",
    "age",
    "pass",
    "int",
    "run",
    "going",
    "see",
    "done",
    "something",
    "wrong",
    "oh",
    "spelled",
    "wrong",
    "go",
    "okay",
    "going",
    "try",
    "see",
    "true",
    "true",
    "also",
    "type",
    "float",
    "true",
    "false",
    "false",
    "float",
    "decimal",
    "point",
    "show",
    "float",
    "decimal",
    "python",
    "automatically",
    "detects",
    "type",
    "value",
    "type",
    "automatically",
    "knows",
    "string",
    "automatically",
    "knows",
    "float",
    "also",
    "create",
    "variable",
    "specific",
    "type",
    "using",
    "class",
    "constructor",
    "passing",
    "value",
    "literal",
    "variable",
    "name",
    "like",
    "instance",
    "check",
    "see",
    "float",
    "saying",
    "false",
    "make",
    "float",
    "typing",
    "float",
    "p",
    "putting",
    "value",
    "flow",
    "going",
    "make",
    "float",
    "true",
    "true",
    "thing",
    "strings",
    "integers",
    "data",
    "types",
    "also",
    "convert",
    "one",
    "data",
    "type",
    "another",
    "using",
    "class",
    "constructor",
    "basically",
    "converted",
    "integer",
    "float",
    "also",
    "something",
    "else",
    "convert",
    "something",
    "string",
    "integer",
    "instance",
    "going",
    "get",
    "rid",
    "one",
    "completely",
    "use",
    "one",
    "string",
    "anything",
    "quotation",
    "marks",
    "20",
    "age",
    "20",
    "test",
    "int",
    "going",
    "say",
    "false",
    "n",
    "printing",
    "whether",
    "instance",
    "int",
    "convert",
    "string",
    "integer",
    "integer",
    "let",
    "run",
    "program",
    "says",
    "true",
    "another",
    "thing",
    "pass",
    "actual",
    "data",
    "actual",
    "string",
    "pass",
    "variable",
    "say",
    "number",
    "equals",
    "going",
    "make",
    "x",
    "says",
    "number",
    "actually",
    "string",
    "pass",
    "number",
    "going",
    "set",
    "age",
    "going",
    "true",
    "create",
    "string",
    "convert",
    "string",
    "integer",
    "tested",
    "age",
    "integer",
    "something",
    "like",
    "called",
    "casting",
    "basically",
    "trying",
    "extract",
    "integer",
    "string",
    "course",
    "conversion",
    "might",
    "always",
    "work",
    "depending",
    "value",
    "passed",
    "instance",
    "write",
    "test",
    "string",
    "instead",
    "20",
    "may",
    "get",
    "air",
    "let",
    "run",
    "see",
    "error",
    "says",
    "invalid",
    "literal",
    "int",
    "int",
    "base",
    "10",
    "test",
    "ca",
    "convert",
    "word",
    "ca",
    "convert",
    "string",
    "test",
    "integer",
    "python",
    "best",
    "conversion",
    "always",
    "work",
    "types",
    "let",
    "see",
    "common",
    "types",
    "types",
    "type",
    "complex",
    "complex",
    "numbers",
    "bool",
    "booleans",
    "list",
    "list",
    "tuple",
    "tuples",
    "range",
    "ranges",
    "dict",
    "dictionaries",
    "set",
    "type",
    "sets",
    "explore",
    "soon",
    "go",
    "detail",
    "different",
    "types",
    "types",
    "well",
    "let",
    "talk",
    "operators",
    "already",
    "seen",
    "one",
    "operator",
    "one",
    "assignment",
    "operator",
    "also",
    "arithmetic",
    "operators",
    "comparison",
    "operators",
    "logical",
    "operators",
    "bitwise",
    "operators",
    "plus",
    "interesting",
    "ones",
    "like",
    "going",
    "going",
    "lot",
    "right",
    "talked",
    "assignment",
    "operator",
    "used",
    "assign",
    "value",
    "variable",
    "assign",
    "variable",
    "value",
    "another",
    "variable",
    "let",
    "talk",
    "arithmetic",
    "operators",
    "use",
    "math",
    "mathematics",
    "different",
    "arithmetic",
    "operators",
    "plus",
    "one",
    "plus",
    "one",
    "equals",
    "two",
    "minus",
    "multiplication",
    "division",
    "remainder",
    "four",
    "divided",
    "three",
    "equals",
    "one",
    "remainder",
    "one",
    "exponents",
    "four",
    "power",
    "2",
    "16",
    "floor",
    "division",
    "floor",
    "division",
    "division",
    "problem",
    "basically",
    "rounds",
    "floor",
    "division",
    "division",
    "rounds",
    "nearest",
    "whole",
    "number",
    "actually",
    "would",
    "better",
    "seen",
    "four",
    "five",
    "divide",
    "two",
    "five",
    "floor",
    "division",
    "divided",
    "two",
    "going",
    "two",
    "normally",
    "floor",
    "division",
    "rounding",
    "nearest",
    "integer",
    "nearest",
    "whole",
    "number",
    "also",
    "note",
    "minus",
    "also",
    "make",
    "something",
    "negative",
    "number",
    "could",
    "4",
    "plus",
    "negative",
    "mean",
    "1",
    "plus",
    "negative",
    "1",
    "going",
    "equal",
    "plus",
    "operator",
    "also",
    "used",
    "concatenate",
    "string",
    "values",
    "something",
    "talked",
    "earlier",
    "could",
    "say",
    "scamp",
    "put",
    "plus",
    "good",
    "dog",
    "like",
    "print",
    "put",
    "parentheses",
    "around",
    "see",
    "whole",
    "string",
    "sk",
    "scamp",
    "good",
    "dog",
    "name",
    "first",
    "dog",
    "kid",
    "also",
    "combine",
    "arithmetic",
    "operators",
    "assignment",
    "operator",
    "let",
    "show",
    "mean",
    "let",
    "get",
    "rid",
    "going",
    "age",
    "equals",
    "8",
    "age",
    "plus",
    "equals",
    "music",
    "8",
    "print",
    "age",
    "different",
    "operators",
    "assigned",
    "combined",
    "assignment",
    "operator",
    "going",
    "add",
    "8",
    "age",
    "run",
    "actually",
    "means",
    "age",
    "equals",
    "age",
    "plus",
    "eight",
    "age",
    "plus",
    "equals",
    "eight",
    "saying",
    "age",
    "equals",
    "age",
    "plus",
    "eight",
    "going",
    "add",
    "number",
    "current",
    "age",
    "set",
    "equal",
    "age",
    "like",
    "could",
    "times",
    "would",
    "age",
    "equals",
    "age",
    "times",
    "8",
    "arithmetic",
    "operators",
    "okay",
    "let",
    "talk",
    "comparison",
    "operators",
    "talked",
    "little",
    "bit",
    "let",
    "see",
    "examples",
    "compare",
    "two",
    "things",
    "equal",
    "equal",
    "comparing",
    "see",
    "equal",
    "count",
    "greater",
    "b",
    "b",
    "less",
    "equal",
    "b",
    "let",
    "tell",
    "trick",
    "keep",
    "keep",
    "track",
    "one",
    "greater",
    "one",
    "less",
    "see",
    "less",
    "one",
    "kind",
    "tilt",
    "head",
    "little",
    "bit",
    "kind",
    "looks",
    "like",
    "l",
    "see",
    "like",
    "l",
    "one",
    "look",
    "like",
    "much",
    "l",
    "less",
    "operator",
    "kind",
    "ways",
    "looks",
    "like",
    "capital",
    "l",
    "kind",
    "squished",
    "keep",
    "track",
    "one",
    "less",
    "one",
    "greater",
    "going",
    "give",
    "either",
    "false",
    "value",
    "true",
    "values",
    "speaking",
    "true",
    "false",
    "true",
    "false",
    "examples",
    "boolean",
    "boolean",
    "data",
    "type",
    "boolean",
    "data",
    "type",
    "means",
    "true",
    "false",
    "true",
    "boolean",
    "either",
    "going",
    "true",
    "false",
    "two",
    "options",
    "boolean",
    "operators",
    "let",
    "show",
    "boolean",
    "boolean",
    "operators",
    "either",
    "working",
    "two",
    "false",
    "attributes",
    "work",
    "like",
    "logical",
    "using",
    "uh",
    "means",
    "true",
    "checking",
    "checking",
    "see",
    "something",
    "true",
    "means",
    "true",
    "means",
    "either",
    "one",
    "true",
    "one",
    "true",
    "order",
    "full",
    "thing",
    "evaluated",
    "true",
    "let",
    "show",
    "something",
    "using",
    "expression",
    "returns",
    "value",
    "first",
    "operator",
    "operand",
    "false",
    "value",
    "falsie",
    "value",
    "otherwise",
    "returns",
    "last",
    "operand",
    "going",
    "return",
    "first",
    "operand",
    "false",
    "value",
    "since",
    "false",
    "value",
    "returning",
    "second",
    "operand",
    "since",
    "false",
    "value",
    "returns",
    "second",
    "one",
    "since",
    "false",
    "value",
    "return",
    "first",
    "one",
    "considered",
    "false",
    "value",
    "empty",
    "bracket",
    "false",
    "going",
    "return",
    "second",
    "value",
    "happens",
    "false",
    "since",
    "false",
    "value",
    "going",
    "return",
    "second",
    "option",
    "also",
    "happens",
    "equal",
    "false",
    "one",
    "way",
    "think",
    "word",
    "pi",
    "python",
    "docs",
    "describe",
    "x",
    "false",
    "else",
    "x",
    "would",
    "like",
    "x",
    "would",
    "else",
    "false",
    "else",
    "x",
    "let",
    "look",
    "examples",
    "evaluates",
    "second",
    "argument",
    "first",
    "one",
    "true",
    "first",
    "argument",
    "falsy",
    "false",
    "zero",
    "empty",
    "string",
    "empty",
    "brackets",
    "returns",
    "argument",
    "otherwise",
    "evaluates",
    "second",
    "argument",
    "way",
    "way",
    "python",
    "docs",
    "describe",
    "x",
    "false",
    "x",
    "else",
    "okay",
    "let",
    "quickly",
    "discuss",
    "bitwise",
    "operators",
    "rarely",
    "used",
    "specific",
    "situations",
    "worth",
    "knowing",
    "bitwise",
    "operators",
    "case",
    "rare",
    "situation",
    "need",
    "use",
    "two",
    "types",
    "operators",
    "called",
    "identity",
    "operator",
    "used",
    "compare",
    "two",
    "objects",
    "returns",
    "true",
    "objects",
    "object",
    "talking",
    "later",
    "section",
    "objects",
    "called",
    "membership",
    "operator",
    "used",
    "tell",
    "value",
    "contained",
    "list",
    "another",
    "sequence",
    "talking",
    "operator",
    "discussing",
    "lists",
    "sequences",
    "later",
    "course",
    "final",
    "thing",
    "want",
    "talk",
    "ternary",
    "operator",
    "turn",
    "area",
    "operator",
    "python",
    "allows",
    "quickly",
    "define",
    "conditional",
    "like",
    "kind",
    "slow",
    "way",
    "without",
    "ternary",
    "operator",
    "let",
    "say",
    "function",
    "function",
    "comparing",
    "age",
    "18",
    "going",
    "return",
    "true",
    "false",
    "depending",
    "risk",
    "result",
    "instead",
    "writing",
    "like",
    "implement",
    "ternary",
    "operator",
    "let",
    "death",
    "music",
    "adult",
    "call",
    "adult",
    "2",
    "second",
    "way",
    "time",
    "going",
    "use",
    "ternary",
    "operator",
    "going",
    "return",
    "true",
    "age",
    "greater",
    "18",
    "else",
    "false",
    "see",
    "first",
    "define",
    "result",
    "condition",
    "true",
    "evaluate",
    "condition",
    "define",
    "result",
    "condition",
    "false",
    "basically",
    "else",
    "statement",
    "single",
    "line",
    "okay",
    "let",
    "talk",
    "strings",
    "python",
    "string",
    "python",
    "series",
    "characters",
    "enclosed",
    "quotes",
    "double",
    "quotes",
    "could",
    "single",
    "quotes",
    "long",
    "type",
    "quote",
    "sides",
    "already",
    "talked",
    "assign",
    "string",
    "variable",
    "music",
    "already",
    "talked",
    "concatenate",
    "two",
    "strings",
    "using",
    "plus",
    "operator",
    "like",
    "phrase",
    "equals",
    "bo",
    "concatenate",
    "plus",
    "operator",
    "name",
    "music",
    "also",
    "instead",
    "putting",
    "string",
    "put",
    "variable",
    "could",
    "put",
    "name",
    "name",
    "already",
    "variable",
    "equal",
    "bo",
    "concatenate",
    "concatenate",
    "strings",
    "variables",
    "also",
    "append",
    "string",
    "using",
    "plus",
    "equal",
    "operator",
    "let",
    "say",
    "want",
    "add",
    "name",
    "going",
    "say",
    "name",
    "plus",
    "equals",
    "name",
    "adding",
    "name",
    "end",
    "say",
    "print",
    "name",
    "see",
    "looks",
    "like",
    "use",
    "plus",
    "equal",
    "operator",
    "bo",
    "name",
    "already",
    "talked",
    "convert",
    "number",
    "string",
    "using",
    "str",
    "class",
    "constructor",
    "like",
    "age",
    "equals",
    "could",
    "make",
    "string",
    "passed",
    "integer",
    "converts",
    "string",
    "going",
    "string",
    "something",
    "new",
    "string",
    "multi",
    "defined",
    "special",
    "syntax",
    "enclose",
    "enclose",
    "string",
    "set",
    "three",
    "quotes",
    "let",
    "show",
    "example",
    "get",
    "rid",
    "going",
    "print",
    "entire",
    "string",
    "going",
    "make",
    "string",
    "going",
    "put",
    "three",
    "quotation",
    "marks",
    "going",
    "start",
    "three",
    "quotation",
    "marks",
    "end",
    "three",
    "quotation",
    "marks",
    "make",
    "say",
    "bo",
    "put",
    "extra",
    "lines",
    "39",
    "years",
    "old",
    "print",
    "see",
    "going",
    "print",
    "different",
    "lines",
    "made",
    "string",
    "also",
    "instead",
    "using",
    "double",
    "quotes",
    "put",
    "single",
    "quote",
    "long",
    "beginning",
    "ending",
    "string",
    "also",
    "set",
    "methods",
    "let",
    "show",
    "example",
    "string",
    "bow",
    "going",
    "put",
    "end",
    "string",
    "going",
    "put",
    "dot",
    "upper",
    "put",
    "parentheses",
    "end",
    "run",
    "going",
    "print",
    "capital",
    "letters",
    "thing",
    "use",
    "lower",
    "string",
    "capital",
    "letters",
    "okay",
    "lower",
    "also",
    "type",
    "title",
    "going",
    "make",
    "lut",
    "say",
    "bow",
    "person",
    "uh",
    "going",
    "cat",
    "going",
    "title",
    "going",
    "make",
    "first",
    "letter",
    "string",
    "capital",
    "letter",
    "also",
    "check",
    "things",
    "like",
    "say",
    "lower",
    "going",
    "check",
    "lowercase",
    "letters",
    "false",
    "make",
    "lowercase",
    "letters",
    "going",
    "say",
    "true",
    "list",
    "common",
    "ones",
    "music",
    "alpha",
    "check",
    "contains",
    "characters",
    "l",
    "num",
    "check",
    "string",
    "contains",
    "characters",
    "digits",
    "empty",
    "decimal",
    "lower",
    "make",
    "lower",
    "case",
    "lower",
    "upper",
    "upper",
    "title",
    "starts",
    "check",
    "starts",
    "specific",
    "substring",
    "check",
    "ends",
    "replace",
    "part",
    "string",
    "split",
    "string",
    "strip",
    "white",
    "space",
    "string",
    "append",
    "new",
    "letters",
    "string",
    "find",
    "position",
    "substring",
    "spring",
    "string",
    "common",
    "things",
    "string",
    "one",
    "thing",
    "know",
    "return",
    "new",
    "modified",
    "string",
    "actually",
    "alter",
    "original",
    "string",
    "let",
    "show",
    "mean",
    "let",
    "say",
    "name",
    "equals",
    "bow",
    "let",
    "zoom",
    "little",
    "bit",
    "going",
    "print",
    "name",
    "dot",
    "lower",
    "going",
    "print",
    "name",
    "run",
    "first",
    "figure",
    "went",
    "wrong",
    "looks",
    "like",
    "extra",
    "parentheses",
    "music",
    "okay",
    "let",
    "run",
    "see",
    "going",
    "make",
    "lowercase",
    "print",
    "name",
    "still",
    "lowercase",
    "returns",
    "brand",
    "new",
    "modified",
    "string",
    "actually",
    "change",
    "anything",
    "original",
    "string",
    "use",
    "global",
    "functions",
    "strings",
    "well",
    "one",
    "function",
    "discussed",
    "yet",
    "l",
    "e",
    "n",
    "function",
    "stands",
    "length",
    "give",
    "length",
    "string",
    "going",
    "type",
    "global",
    "functions",
    "work",
    "lot",
    "different",
    "types",
    "data",
    "length",
    "four",
    "see",
    "use",
    "operator",
    "briefly",
    "mentioned",
    "n",
    "operator",
    "earlier",
    "let",
    "show",
    "one",
    "use",
    "case",
    "use",
    "operator",
    "check",
    "string",
    "contains",
    "substring",
    "like",
    "instance",
    "say",
    "u",
    "name",
    "let",
    "check",
    "name",
    "contains",
    "letters",
    "u",
    "well",
    "true",
    "add",
    "extra",
    "string",
    "going",
    "say",
    "false",
    "okay",
    "another",
    "thing",
    "strings",
    "um",
    "escaping",
    "way",
    "add",
    "special",
    "characters",
    "string",
    "example",
    "let",
    "say",
    "wanted",
    "add",
    "double",
    "quote",
    "within",
    "string",
    "add",
    "double",
    "quote",
    "string",
    "wrapped",
    "double",
    "quotes",
    "put",
    "double",
    "quote",
    "like",
    "going",
    "work",
    "going",
    "string",
    "going",
    "code",
    "editor",
    "going",
    "know",
    "last",
    "little",
    "bit",
    "way",
    "go",
    "escape",
    "double",
    "quote",
    "inside",
    "string",
    "backslash",
    "character",
    "right",
    "quote",
    "going",
    "put",
    "backslash",
    "character",
    "see",
    "color",
    "string",
    "print",
    "going",
    "going",
    "print",
    "backslash",
    "character",
    "putting",
    "backslash",
    "escape",
    "character",
    "means",
    "backslash",
    "character",
    "means",
    "next",
    "character",
    "going",
    "mean",
    "normally",
    "means",
    "going",
    "actually",
    "string",
    "character",
    "thing",
    "particular",
    "example",
    "may",
    "need",
    "always",
    "put",
    "single",
    "quote",
    "beginning",
    "ending",
    "long",
    "different",
    "type",
    "quote",
    "beginning",
    "ending",
    "put",
    "double",
    "quote",
    "middle",
    "let",
    "say",
    "want",
    "string",
    "contains",
    "single",
    "quote",
    "double",
    "quote",
    "within",
    "string",
    "backslash",
    "like",
    "put",
    "single",
    "quote",
    "going",
    "mess",
    "put",
    "backslash",
    "going",
    "single",
    "double",
    "quote",
    "single",
    "quote",
    "right",
    "within",
    "string",
    "also",
    "use",
    "escape",
    "character",
    "special",
    "formatting",
    "characters",
    "like",
    "uh",
    "instance",
    "want",
    "new",
    "line",
    "first",
    "two",
    "last",
    "two",
    "letters",
    "string",
    "slash",
    "n",
    "going",
    "actually",
    "put",
    "slash",
    "let",
    "see",
    "happens",
    "put",
    "means",
    "new",
    "line",
    "see",
    "says",
    "new",
    "line",
    "another",
    "way",
    "reason",
    "may",
    "want",
    "use",
    "escape",
    "like",
    "let",
    "see",
    "happens",
    "looking",
    "want",
    "look",
    "normally",
    "normally",
    "code",
    "running",
    "sees",
    "backslash",
    "thinks",
    "escape",
    "character",
    "want",
    "actually",
    "add",
    "backslash",
    "string",
    "escape",
    "backslash",
    "backslash",
    "au",
    "okay",
    "done",
    "talking",
    "escape",
    "characters",
    "going",
    "tell",
    "get",
    "specific",
    "character",
    "string",
    "given",
    "string",
    "get",
    "character",
    "using",
    "square",
    "brackets",
    "get",
    "specific",
    "item",
    "given",
    "index",
    "starting",
    "zero",
    "one",
    "thing",
    "know",
    "programming",
    "whenever",
    "counting",
    "programming",
    "languages",
    "start",
    "counting",
    "starting",
    "zero",
    "going",
    "get",
    "letter",
    "index",
    "one",
    "index",
    "zero",
    "b",
    "e",
    "index",
    "one",
    "index",
    "two",
    "index",
    "three",
    "run",
    "see",
    "getting",
    "e",
    "index",
    "one",
    "want",
    "get",
    "b",
    "put",
    "zero",
    "brackets",
    "get",
    "b",
    "use",
    "negative",
    "number",
    "start",
    "counting",
    "end",
    "put",
    "negative",
    "one",
    "going",
    "start",
    "zero",
    "one",
    "going",
    "oh",
    "okay",
    "guess",
    "going",
    "backwards",
    "going",
    "start",
    "zero",
    "negative",
    "zero",
    "makes",
    "sense",
    "negative",
    "one",
    "going",
    "last",
    "character",
    "string",
    "negative",
    "one",
    "negative",
    "two",
    "negative",
    "three",
    "also",
    "use",
    "range",
    "using",
    "call",
    "slicing",
    "put",
    "1",
    "colon",
    "2",
    "going",
    "every",
    "character",
    "starting",
    "index",
    "1",
    "ending",
    "index",
    "starts",
    "index",
    "1",
    "starts",
    "character",
    "ends",
    "x2",
    "actually",
    "going",
    "return",
    "e",
    "put",
    "3",
    "return",
    "u",
    "put",
    "bo",
    "cool",
    "put",
    "one",
    "going",
    "put",
    "7",
    "see",
    "going",
    "return",
    "part",
    "string",
    "also",
    "start",
    "put",
    "blank",
    "colon",
    "going",
    "turn",
    "everything",
    "going",
    "start",
    "beginning",
    "return",
    "everything",
    "character",
    "seven",
    "also",
    "opposite",
    "direction",
    "put",
    "blank",
    "colon",
    "going",
    "go",
    "end",
    "string",
    "going",
    "say",
    "cool",
    "let",
    "talk",
    "booleans",
    "well",
    "already",
    "talked",
    "already",
    "talked",
    "booleans",
    "going",
    "talk",
    "little",
    "bit",
    "boolean",
    "considered",
    "bool",
    "type",
    "two",
    "values",
    "true",
    "false",
    "say",
    "done",
    "equals",
    "true",
    "done",
    "equals",
    "false",
    "notice",
    "always",
    "capital",
    "capital",
    "f",
    "put",
    "capital",
    "capital",
    "f",
    "wo",
    "considered",
    "true",
    "boolean",
    "value",
    "python",
    "booleans",
    "especially",
    "useful",
    "conditional",
    "co",
    "conditional",
    "control",
    "structures",
    "like",
    "statements",
    "well",
    "already",
    "discussed",
    "statements",
    "first",
    "part",
    "course",
    "discussing",
    "detail",
    "later",
    "let",
    "show",
    "example",
    "done",
    "going",
    "erase",
    "done",
    "want",
    "true",
    "done",
    "say",
    "print",
    "yes",
    "music",
    "else",
    "print",
    "okay",
    "run",
    "going",
    "print",
    "yes",
    "done",
    "equals",
    "true",
    "done",
    "equals",
    "false",
    "music",
    "going",
    "say",
    "evaluating",
    "value",
    "true",
    "false",
    "value",
    "bool",
    "boolean",
    "like",
    "true",
    "false",
    "rules",
    "depending",
    "type",
    "checking",
    "numbers",
    "always",
    "true",
    "except",
    "number",
    "zero",
    "put",
    "0",
    "going",
    "evaluate",
    "false",
    "put",
    "number",
    "going",
    "true",
    "even",
    "like",
    "negative",
    "1",
    "anything",
    "like",
    "going",
    "true",
    "oh",
    "guess",
    "put",
    "negative",
    "1",
    "put",
    "equals",
    "negative",
    "1",
    "going",
    "true",
    "strings",
    "always",
    "false",
    "oh",
    "strings",
    "false",
    "empty",
    "say",
    "bow",
    "going",
    "true",
    "empty",
    "string",
    "make",
    "empty",
    "string",
    "going",
    "false",
    "lists",
    "tuples",
    "sets",
    "dictionaries",
    "talk",
    "later",
    "false",
    "empty",
    "going",
    "list",
    "double",
    "star",
    "dictionary",
    "filled",
    "something",
    "true",
    "also",
    "check",
    "value",
    "boolean",
    "say",
    "done",
    "equals",
    "true",
    "print",
    "type",
    "going",
    "check",
    "type",
    "going",
    "check",
    "type",
    "done",
    "equals",
    "bool",
    "let",
    "check",
    "equal",
    "boolean",
    "true",
    "let",
    "see",
    "let",
    "change",
    "different",
    "type",
    "going",
    "say",
    "false",
    "still",
    "evaluate",
    "whether",
    "true",
    "false",
    "type",
    "boolean",
    "type",
    "string",
    "let",
    "show",
    "another",
    "example",
    "code",
    "global",
    "function",
    "global",
    "function",
    "useful",
    "working",
    "booleans",
    "returns",
    "true",
    "values",
    "iterable",
    "list",
    "true",
    "going",
    "return",
    "true",
    "instance",
    "book",
    "one",
    "read",
    "true",
    "book",
    "two",
    "read",
    "false",
    "going",
    "return",
    "true",
    "checking",
    "true",
    "going",
    "set",
    "true",
    "function",
    "similar",
    "returns",
    "true",
    "values",
    "true",
    "see",
    "value",
    "true",
    "value",
    "false",
    "whereas",
    "would",
    "returned",
    "true",
    "going",
    "return",
    "false",
    "returns",
    "true",
    "values",
    "true",
    "okay",
    "let",
    "talk",
    "number",
    "data",
    "ties",
    "already",
    "talked",
    "int",
    "integer",
    "whole",
    "number",
    "already",
    "talked",
    "float",
    "number",
    "decimal",
    "point",
    "another",
    "type",
    "called",
    "complex",
    "complex",
    "numbers",
    "extension",
    "familiar",
    "real",
    "number",
    "system",
    "numbers",
    "expressed",
    "sum",
    "real",
    "part",
    "imaginary",
    "part",
    "imaginary",
    "numbers",
    "real",
    "multiples",
    "imaginary",
    "unit",
    "square",
    "root",
    "negative",
    "one",
    "often",
    "written",
    "mathematics",
    "j",
    "engineering",
    "python",
    "built",
    "support",
    "complex",
    "numbers",
    "written",
    "j",
    "notation",
    "imaginary",
    "part",
    "written",
    "j",
    "suffix",
    "combine",
    "use",
    "literal",
    "value",
    "like",
    "complex",
    "equals",
    "two",
    "plus",
    "three",
    "j",
    "j",
    "means",
    "imaginary",
    "part",
    "number",
    "use",
    "complex",
    "constructor",
    "put",
    "num",
    "equals",
    "complex",
    "pass",
    "two",
    "comma",
    "three",
    "three",
    "part",
    "imaginary",
    "part",
    "two",
    "real",
    "part",
    "integer",
    "part",
    "complex",
    "number",
    "get",
    "real",
    "imaginary",
    "part",
    "like",
    "say",
    "print",
    "music",
    "num",
    "dot",
    "real",
    "num",
    "dot",
    "match",
    "going",
    "2",
    "going",
    "uh",
    "let",
    "think",
    "problem",
    "num",
    "num",
    "one",
    "num",
    "one",
    "num",
    "two",
    "gon",
    "na",
    "num",
    "two",
    "okay",
    "let",
    "check",
    "real",
    "part",
    "imaginary",
    "part",
    "see",
    "returned",
    "floats",
    "use",
    "type",
    "function",
    "check",
    "type",
    "let",
    "talk",
    "functions",
    "help",
    "numbers",
    "one",
    "abs",
    "abs",
    "return",
    "absolute",
    "value",
    "number",
    "say",
    "going",
    "put",
    "negative",
    "well",
    "music",
    "print",
    "see",
    "basically",
    "makes",
    "negative",
    "also",
    "use",
    "round",
    "round",
    "let",
    "make",
    "round",
    "going",
    "round",
    "nearest",
    "integer",
    "gon",
    "na",
    "six",
    "point",
    "five",
    "going",
    "round",
    "uh",
    "four",
    "nine",
    "going",
    "go",
    "five",
    "also",
    "specify",
    "second",
    "parameter",
    "set",
    "decimal",
    "points",
    "precision",
    "go",
    "one",
    "round",
    "going",
    "instead",
    "rounding",
    "nearest",
    "integer",
    "going",
    "round",
    "nearest",
    "tenths",
    "place",
    "value",
    "one",
    "decimal",
    "point",
    "several",
    "math",
    "utility",
    "functions",
    "constants",
    "provided",
    "math",
    "standard",
    "library",
    "like",
    "math",
    "package",
    "c",
    "math",
    "package",
    "decimal",
    "pages",
    "fractions",
    "package",
    "makes",
    "easier",
    "work",
    "different",
    "types",
    "numbers",
    "explore",
    "later",
    "let",
    "talk",
    "nums",
    "noms",
    "readable",
    "names",
    "bound",
    "constant",
    "value",
    "use",
    "noms",
    "going",
    "import",
    "numbs",
    "inum",
    "standard",
    "library",
    "module",
    "like",
    "enum",
    "import",
    "enum",
    "talking",
    "importing",
    "stuff",
    "modules",
    "later",
    "import",
    "initialize",
    "new",
    "nom",
    "way",
    "class",
    "state",
    "enum",
    "inactive",
    "music",
    "equals",
    "0",
    "active",
    "music",
    "equals",
    "one",
    "basically",
    "word",
    "state",
    "anywhere",
    "word",
    "like",
    "setting",
    "uh",
    "basically",
    "variable",
    "called",
    "going",
    "equal",
    "0",
    "equal",
    "reference",
    "would",
    "reference",
    "print",
    "state",
    "dot",
    "active",
    "run",
    "program",
    "see",
    "see",
    "going",
    "return",
    "state",
    "active",
    "instead",
    "one",
    "actually",
    "get",
    "value",
    "use",
    "state",
    "active",
    "dot",
    "value",
    "run",
    "see",
    "one",
    "want",
    "return",
    "sa",
    "value",
    "reached",
    "number",
    "assigned",
    "num",
    "state",
    "one",
    "print",
    "going",
    "say",
    "using",
    "square",
    "brackets",
    "notation",
    "could",
    "states",
    "see",
    "square",
    "brackets",
    "put",
    "active",
    "print",
    "going",
    "print",
    "state",
    "active",
    "basically",
    "way",
    "create",
    "constants",
    "python",
    "python",
    "way",
    "enforce",
    "variable",
    "constant",
    "people",
    "use",
    "enums",
    "create",
    "constant",
    "nobody",
    "reassign",
    "value",
    "state",
    "state",
    "active",
    "dot",
    "value",
    "going",
    "able",
    "reassigned",
    "basically",
    "two",
    "ways",
    "bracket",
    "notation",
    "go",
    "back",
    "way",
    "active",
    "also",
    "list",
    "possible",
    "values",
    "enum",
    "num",
    "called",
    "state",
    "print",
    "values",
    "oh",
    "actually",
    "wrong",
    "supposed",
    "list",
    "going",
    "list",
    "values",
    "state",
    "see",
    "inactive",
    "0",
    "active",
    "also",
    "count",
    "using",
    "length",
    "function",
    "going",
    "print",
    "result",
    "length",
    "state",
    "going",
    "give",
    "us",
    "okay",
    "let",
    "talk",
    "user",
    "input",
    "already",
    "discussed",
    "little",
    "bit",
    "first",
    "program",
    "get",
    "user",
    "input",
    "using",
    "input",
    "function",
    "let",
    "get",
    "rid",
    "age",
    "equals",
    "input",
    "say",
    "print",
    "age",
    "concatenate",
    "variable",
    "age",
    "also",
    "want",
    "let",
    "quick",
    "test",
    "right",
    "looking",
    "age",
    "right",
    "put",
    "five",
    "age",
    "five",
    "two",
    "ways",
    "make",
    "say",
    "age",
    "print",
    "statement",
    "right",
    "age",
    "put",
    "four",
    "age",
    "four",
    "also",
    "ins",
    "instead",
    "putting",
    "print",
    "statement",
    "right",
    "going",
    "copy",
    "delete",
    "put",
    "right",
    "input",
    "function",
    "say",
    "still",
    "say",
    "age",
    "put",
    "age",
    "one",
    "thing",
    "really",
    "realize",
    "gets",
    "input",
    "runtime",
    "meaning",
    "program",
    "stop",
    "execution",
    "wait",
    "user",
    "types",
    "something",
    "presses",
    "enter",
    "key",
    "also",
    "complex",
    "input",
    "processing",
    "accept",
    "input",
    "program",
    "invocation",
    "time",
    "see",
    "later",
    "want",
    "get",
    "input",
    "program",
    "run",
    "going",
    "work",
    "better",
    "command",
    "line",
    "applications",
    "kinds",
    "applications",
    "need",
    "different",
    "way",
    "accepting",
    "input",
    "let",
    "look",
    "control",
    "statements",
    "another",
    "thing",
    "already",
    "discussed",
    "earlier",
    "going",
    "review",
    "look",
    "little",
    "detail",
    "control",
    "statement",
    "like",
    "statement",
    "condition",
    "variable",
    "equals",
    "true",
    "going",
    "run",
    "everything",
    "block",
    "block",
    "part",
    "indented",
    "one",
    "level",
    "usually",
    "going",
    "either",
    "four",
    "two",
    "spaces",
    "case",
    "four",
    "spaces",
    "sometimes",
    "two",
    "spaces",
    "matter",
    "could",
    "even",
    "one",
    "space",
    "long",
    "long",
    "every",
    "line",
    "code",
    "indented",
    "amount",
    "run",
    "condition",
    "true",
    "block",
    "formed",
    "single",
    "line",
    "multiple",
    "lines",
    "ends",
    "whenever",
    "move",
    "back",
    "previous",
    "indentation",
    "level",
    "instance",
    "indented",
    "say",
    "print",
    "outside",
    "always",
    "going",
    "pres",
    "always",
    "going",
    "print",
    "statement",
    "else",
    "statements",
    "else",
    "true",
    "going",
    "whatever",
    "change",
    "false",
    "going",
    "print",
    "whatever",
    "condition",
    "false",
    "series",
    "something",
    "showed",
    "per",
    "program",
    "earlier",
    "elif",
    "combines",
    "else",
    "true",
    "move",
    "line",
    "else",
    "true",
    "else",
    "true",
    "keep",
    "going",
    "always",
    "none",
    "ones",
    "true",
    "going",
    "since",
    "testing",
    "even",
    "going",
    "evaluate",
    "anything",
    "later",
    "move",
    "false",
    "change",
    "bow",
    "actually",
    "going",
    "skip",
    "way",
    "way",
    "else",
    "flavio",
    "print",
    "going",
    "say",
    "hello",
    "flavio",
    "right",
    "okay",
    "going",
    "talk",
    "since",
    "already",
    "covered",
    "earlier",
    "course",
    "going",
    "go",
    "detail",
    "lists",
    "lists",
    "essential",
    "python",
    "data",
    "structure",
    "example",
    "list",
    "would",
    "let",
    "create",
    "list",
    "called",
    "dogs",
    "going",
    "create",
    "dog",
    "names",
    "roger",
    "sid",
    "allows",
    "group",
    "together",
    "multiple",
    "values",
    "reference",
    "common",
    "name",
    "list",
    "dogs",
    "two",
    "strings",
    "list",
    "always",
    "going",
    "opening",
    "closing",
    "brackets",
    "item",
    "list",
    "going",
    "separated",
    "comma",
    "list",
    "hold",
    "different",
    "types",
    "values",
    "strings",
    "string",
    "integer",
    "string",
    "boolean",
    "mix",
    "different",
    "types",
    "data",
    "types",
    "single",
    "list",
    "check",
    "item",
    "contained",
    "list",
    "operator",
    "talked",
    "operator",
    "earlier",
    "let",
    "show",
    "works",
    "going",
    "print",
    "use",
    "operator",
    "going",
    "check",
    "roger",
    "dogs",
    "let",
    "see",
    "run",
    "true",
    "let",
    "check",
    "bo",
    "dogs",
    "well",
    "false",
    "checking",
    "check",
    "item",
    "list",
    "also",
    "define",
    "list",
    "empty",
    "string",
    "could",
    "actually",
    "remove",
    "empty",
    "list",
    "obviously",
    "still",
    "going",
    "false",
    "nothing",
    "list",
    "let",
    "go",
    "back",
    "items",
    "list",
    "reference",
    "items",
    "list",
    "indexes",
    "starting",
    "zero",
    "going",
    "dogs",
    "use",
    "brackets",
    "going",
    "put",
    "going",
    "reference",
    "thing",
    "item",
    "list",
    "going",
    "type",
    "0",
    "item",
    "right",
    "roger",
    "could",
    "put",
    "2",
    "going",
    "0",
    "1",
    "2",
    "going",
    "sid",
    "use",
    "notation",
    "update",
    "item",
    "list",
    "going",
    "add",
    "another",
    "line",
    "code",
    "put",
    "dogs",
    "2",
    "going",
    "equal",
    "bo",
    "going",
    "print",
    "entire",
    "list",
    "instead",
    "roger",
    "1",
    "said",
    "true",
    "roger",
    "1",
    "bow",
    "true",
    "updated",
    "item",
    "index",
    "2",
    "bo",
    "instead",
    "sid",
    "also",
    "use",
    "index",
    "method",
    "um",
    "instead",
    "like",
    "want",
    "find",
    "first",
    "item",
    "list",
    "could",
    "like",
    "also",
    "use",
    "negative",
    "number",
    "saw",
    "string",
    "negative",
    "2",
    "going",
    "start",
    "one",
    "two",
    "actually",
    "let",
    "negative",
    "one",
    "return",
    "true",
    "okay",
    "true",
    "starts",
    "one",
    "put",
    "negative",
    "number",
    "also",
    "extract",
    "part",
    "list",
    "similar",
    "showed",
    "using",
    "string",
    "let",
    "add",
    "another",
    "item",
    "music",
    "going",
    "use",
    "colon",
    "part",
    "list",
    "going",
    "2",
    "4",
    "slice",
    "going",
    "start",
    "second",
    "zero",
    "one",
    "two",
    "bow",
    "change",
    "bow",
    "going",
    "go",
    "four",
    "going",
    "go",
    "four",
    "pat",
    "including",
    "four",
    "going",
    "2",
    "3",
    "4",
    "sid",
    "true",
    "bow",
    "true",
    "updated",
    "2",
    "bow",
    "also",
    "leave",
    "blank",
    "going",
    "go",
    "end",
    "list",
    "leave",
    "first",
    "number",
    "blank",
    "going",
    "go",
    "going",
    "start",
    "beginning",
    "list",
    "go",
    "instance",
    "index",
    "three",
    "way",
    "slice",
    "list",
    "also",
    "use",
    "length",
    "function",
    "let",
    "find",
    "many",
    "items",
    "list",
    "use",
    "length",
    "length",
    "dogs",
    "six",
    "six",
    "items",
    "list",
    "also",
    "add",
    "items",
    "list",
    "using",
    "append",
    "method",
    "going",
    "dogs",
    "dot",
    "append",
    "add",
    "item",
    "say",
    "something",
    "like",
    "judah",
    "see",
    "length",
    "going",
    "7",
    "print",
    "full",
    "list",
    "see",
    "see",
    "items",
    "including",
    "one",
    "added",
    "also",
    "use",
    "extend",
    "method",
    "extend",
    "another",
    "way",
    "add",
    "item",
    "list",
    "instead",
    "dogs",
    "append",
    "dogs",
    "extend",
    "going",
    "pass",
    "instead",
    "passing",
    "string",
    "gon",
    "na",
    "pass",
    "item",
    "list",
    "gon",
    "na",
    "gon",
    "na",
    "add",
    "actually",
    "combine",
    "two",
    "lists",
    "together",
    "gon",
    "na",
    "put",
    "five",
    "see",
    "taking",
    "list",
    "extending",
    "adding",
    "list",
    "end",
    "two",
    "item",
    "list",
    "six",
    "list",
    "eight",
    "item",
    "list",
    "also",
    "use",
    "plus",
    "equals",
    "operator",
    "use",
    "plus",
    "equals",
    "operator",
    "going",
    "dogs",
    "going",
    "thing",
    "extend",
    "plus",
    "equals",
    "list",
    "take",
    "parentheses",
    "look",
    "exactly",
    "see",
    "showing",
    "thing",
    "plus",
    "equals",
    "going",
    "thing",
    "extend",
    "takes",
    "list",
    "already",
    "exists",
    "adds",
    "list",
    "end",
    "using",
    "extend",
    "plus",
    "equals",
    "want",
    "forget",
    "square",
    "brackets",
    "forget",
    "square",
    "brackets",
    "let",
    "say",
    "going",
    "add",
    "iron",
    "list",
    "actually",
    "going",
    "put",
    "letter",
    "individually",
    "kind",
    "see",
    "better",
    "move",
    "want",
    "make",
    "sure",
    "put",
    "brackets",
    "another",
    "thing",
    "remove",
    "remove",
    "item",
    "using",
    "remove",
    "method",
    "gon",
    "na",
    "dogs",
    "dot",
    "remove",
    "sid",
    "okay",
    "gon",
    "na",
    "play",
    "saying",
    "wrong",
    "oh",
    "obviously",
    "um",
    "moving",
    "sid",
    "already",
    "changed",
    "element",
    "sid",
    "bow",
    "let",
    "remove",
    "quincy",
    "let",
    "try",
    "okay",
    "quincy",
    "another",
    "common",
    "thing",
    "another",
    "common",
    "list",
    "method",
    "pop",
    "going",
    "remove",
    "return",
    "single",
    "item",
    "first",
    "going",
    "music",
    "dot",
    "print",
    "dogs",
    "pop",
    "going",
    "print",
    "dog",
    "first",
    "going",
    "return",
    "5",
    "last",
    "item",
    "added",
    "onto",
    "list",
    "print",
    "list",
    "item",
    "list",
    "pop",
    "going",
    "remove",
    "last",
    "item",
    "list",
    "going",
    "return",
    "last",
    "item",
    "going",
    "return",
    "remove",
    "last",
    "item",
    "list",
    "list",
    "anymore",
    "let",
    "make",
    "let",
    "let",
    "simplify",
    "go",
    "back",
    "initial",
    "list",
    "going",
    "change",
    "items",
    "going",
    "show",
    "add",
    "item",
    "middle",
    "list",
    "specific",
    "index",
    "use",
    "insert",
    "method",
    "going",
    "items",
    "dot",
    "insert",
    "going",
    "put",
    "index",
    "going",
    "going",
    "insert",
    "index",
    "number",
    "two",
    "item",
    "going",
    "test",
    "going",
    "print",
    "print",
    "items",
    "run",
    "see",
    "index",
    "number",
    "two",
    "see",
    "item",
    "test",
    "add",
    "multiple",
    "items",
    "specific",
    "index",
    "need",
    "use",
    "slices",
    "let",
    "show",
    "going",
    "slice",
    "going",
    "set",
    "equal",
    "test",
    "1",
    "test",
    "print",
    "see",
    "test",
    "1",
    "test",
    "2",
    "right",
    "right",
    "behind",
    "search",
    "thing",
    "inserted",
    "multiple",
    "items",
    "list",
    "starting",
    "index",
    "also",
    "sort",
    "list",
    "go",
    "um",
    "items",
    "dot",
    "sort",
    "sort",
    "list",
    "make",
    "sure",
    "okay",
    "error",
    "supported",
    "combination",
    "ins",
    "strings",
    "let",
    "make",
    "strings",
    "list",
    "able",
    "sort",
    "okay",
    "strings",
    "alphabetical",
    "order",
    "using",
    "integers",
    "floats",
    "would",
    "numerical",
    "order",
    "one",
    "thing",
    "interesting",
    "put",
    "change",
    "bow",
    "see",
    "beginning",
    "end",
    "sort",
    "method",
    "orders",
    "uppercase",
    "letters",
    "first",
    "lowercase",
    "letters",
    "fix",
    "actually",
    "make",
    "make",
    "sense",
    "going",
    "change",
    "bob",
    "fix",
    "within",
    "sort",
    "going",
    "going",
    "put",
    "key",
    "equals",
    "str",
    "dot",
    "lower",
    "going",
    "sort",
    "correctly",
    "would",
    "imagine",
    "caring",
    "uppercase",
    "lowercase",
    "letters",
    "sorting",
    "modifies",
    "original",
    "list",
    "content",
    "avoid",
    "copy",
    "list",
    "content",
    "using",
    "let",
    "show",
    "items",
    "items",
    "copy",
    "equals",
    "items",
    "make",
    "slice",
    "nothing",
    "beginning",
    "nothing",
    "end",
    "going",
    "start",
    "beginning",
    "list",
    "end",
    "list",
    "copy",
    "print",
    "items",
    "copy",
    "print",
    "see",
    "sorted",
    "list",
    "ran",
    "sort",
    "also",
    "still",
    "original",
    "list",
    "words",
    "original",
    "order",
    "also",
    "way",
    "sort",
    "list",
    "without",
    "returning",
    "new",
    "list",
    "also",
    "way",
    "sort",
    "list",
    "without",
    "modifying",
    "original",
    "list",
    "instead",
    "copying",
    "list",
    "um",
    "going",
    "items",
    "instead",
    "items",
    "dot",
    "sort",
    "going",
    "going",
    "use",
    "global",
    "function",
    "called",
    "sorted",
    "sorted",
    "function",
    "going",
    "pass",
    "two",
    "parameters",
    "first",
    "list",
    "items",
    "second",
    "sorting",
    "makes",
    "sure",
    "key",
    "case",
    "letters",
    "matter",
    "going",
    "print",
    "run",
    "see",
    "print",
    "printed",
    "sorted",
    "list",
    "printing",
    "list",
    "longer",
    "sorted",
    "creates",
    "new",
    "list",
    "without",
    "modifying",
    "original",
    "list",
    "okay",
    "let",
    "learn",
    "another",
    "data",
    "structure",
    "called",
    "couples",
    "time",
    "going",
    "put",
    "tuples",
    "using",
    "comment",
    "tuples",
    "another",
    "fundamental",
    "python",
    "data",
    "structure",
    "allow",
    "create",
    "immutable",
    "groups",
    "objects",
    "means",
    "tuple",
    "created",
    "modified",
    "already",
    "saw",
    "could",
    "modify",
    "lists",
    "tuple",
    "ca",
    "even",
    "add",
    "remove",
    "items",
    "created",
    "way",
    "similar",
    "lists",
    "using",
    "parentheses",
    "instead",
    "square",
    "brackets",
    "instance",
    "going",
    "names",
    "equals",
    "instead",
    "using",
    "square",
    "brackets",
    "going",
    "parentheses",
    "roger",
    "sid",
    "okay",
    "tuple",
    "order",
    "like",
    "list",
    "get",
    "values",
    "referencing",
    "index",
    "index",
    "could",
    "say",
    "instance",
    "names",
    "bracket",
    "could",
    "put",
    "zero",
    "return",
    "roger",
    "also",
    "use",
    "index",
    "method",
    "instance",
    "names",
    "dot",
    "index",
    "pass",
    "something",
    "like",
    "roger",
    "going",
    "return",
    "0",
    "going",
    "get",
    "index",
    "number",
    "strings",
    "lists",
    "using",
    "negative",
    "index",
    "start",
    "searching",
    "end",
    "could",
    "negative",
    "one",
    "start",
    "negative",
    "zero",
    "negative",
    "one",
    "start",
    "searching",
    "end",
    "count",
    "items",
    "tuple",
    "length",
    "function",
    "could",
    "length",
    "names",
    "printed",
    "would",
    "print",
    "2",
    "two",
    "items",
    "tuple",
    "also",
    "check",
    "item",
    "contained",
    "tuple",
    "operators",
    "similar",
    "list",
    "time",
    "print",
    "print",
    "roger",
    "names",
    "print",
    "run",
    "see",
    "true",
    "roger",
    "names",
    "extract",
    "part",
    "tuple",
    "using",
    "slices",
    "like",
    "could",
    "strings",
    "lists",
    "could",
    "names",
    "could",
    "0",
    "starting",
    "whoops",
    "0",
    "2",
    "going",
    "start",
    "zero",
    "index",
    "done",
    "index",
    "2",
    "use",
    "get",
    "sorted",
    "version",
    "tuple",
    "using",
    "sorted",
    "global",
    "function",
    "remember",
    "looking",
    "lists",
    "used",
    "sorted",
    "function",
    "created",
    "new",
    "new",
    "list",
    "creating",
    "using",
    "sorted",
    "function",
    "tuples",
    "creates",
    "new",
    "tuple",
    "say",
    "sorted",
    "music",
    "names",
    "would",
    "put",
    "alphabetical",
    "order",
    "already",
    "alphabetical",
    "order",
    "say",
    "one",
    "word",
    "list",
    "print",
    "music",
    "print",
    "sorted",
    "version",
    "actually",
    "going",
    "modify",
    "list",
    "modify",
    "tuple",
    "create",
    "new",
    "tuple",
    "existing",
    "tuples",
    "using",
    "plus",
    "operator",
    "could",
    "say",
    "something",
    "like",
    "new",
    "tuple",
    "music",
    "equals",
    "names",
    "use",
    "plus",
    "operator",
    "would",
    "say",
    "would",
    "say",
    "tina",
    "quincy",
    "could",
    "add",
    "could",
    "add",
    "combine",
    "two",
    "tuples",
    "new",
    "tuple",
    "never",
    "like",
    "said",
    "ca",
    "actually",
    "modify",
    "original",
    "tuple",
    "let",
    "learn",
    "dictionaries",
    "dictionaries",
    "another",
    "important",
    "python",
    "data",
    "structure",
    "lists",
    "allow",
    "create",
    "collections",
    "values",
    "dictionaries",
    "allow",
    "create",
    "key",
    "value",
    "pairs",
    "already",
    "discussed",
    "dictionaries",
    "little",
    "bit",
    "going",
    "discuss",
    "even",
    "dictionaries",
    "let",
    "give",
    "example",
    "dictionary",
    "one",
    "key",
    "value",
    "pair",
    "dog",
    "equals",
    "going",
    "use",
    "curly",
    "braces",
    "create",
    "dictionary",
    "put",
    "name",
    "put",
    "roger",
    "like",
    "type",
    "strings",
    "could",
    "make",
    "single",
    "quotes",
    "could",
    "double",
    "quotes",
    "spaces",
    "important",
    "common",
    "put",
    "spaces",
    "things",
    "better",
    "readability",
    "key",
    "immutable",
    "value",
    "key",
    "value",
    "key",
    "immutable",
    "value",
    "string",
    "number",
    "tuple",
    "value",
    "anything",
    "want",
    "dictionary",
    "contain",
    "multiple",
    "key",
    "value",
    "pairs",
    "like",
    "instance",
    "got",
    "name",
    "age",
    "going",
    "access",
    "individual",
    "key",
    "values",
    "using",
    "notation",
    "like",
    "say",
    "dog",
    "using",
    "bracket",
    "notation",
    "name",
    "print",
    "going",
    "print",
    "roger",
    "use",
    "single",
    "quotes",
    "2",
    "want",
    "still",
    "prints",
    "roger",
    "use",
    "notation",
    "change",
    "value",
    "stored",
    "specific",
    "index",
    "let",
    "say",
    "want",
    "change",
    "name",
    "dog",
    "going",
    "say",
    "name",
    "going",
    "equal",
    "sid",
    "going",
    "print",
    "whole",
    "whole",
    "thing",
    "see",
    "name",
    "sid",
    "instead",
    "roger",
    "another",
    "way",
    "get",
    "specific",
    "element",
    "use",
    "get",
    "method",
    "dog",
    "dot",
    "get",
    "name",
    "going",
    "try",
    "get",
    "name",
    "going",
    "return",
    "roger",
    "one",
    "good",
    "thing",
    "add",
    "default",
    "value",
    "like",
    "let",
    "say",
    "going",
    "searching",
    "color",
    "saying",
    "none",
    "giving",
    "none",
    "color",
    "want",
    "default",
    "value",
    "going",
    "put",
    "comma",
    "put",
    "brown",
    "find",
    "color",
    "dictionary",
    "going",
    "return",
    "brown",
    "find",
    "color",
    "like",
    "let",
    "say",
    "color",
    "green",
    "dog",
    "okay",
    "return",
    "green",
    "bracket",
    "notation",
    "showing",
    "earlier",
    "default",
    "value",
    "one",
    "good",
    "thing",
    "get",
    "method",
    "also",
    "use",
    "pop",
    "method",
    "retrieve",
    "value",
    "key",
    "delete",
    "item",
    "dictionary",
    "also",
    "showed",
    "pop",
    "method",
    "lists",
    "instance",
    "say",
    "get",
    "dot",
    "pop",
    "pass",
    "name",
    "right",
    "going",
    "print",
    "dog",
    "whole",
    "dictionary",
    "first",
    "going",
    "get",
    "roger",
    "print",
    "dictionary",
    "going",
    "show",
    "roger",
    "anymore",
    "deleted",
    "pop",
    "return",
    "item",
    "delete",
    "item",
    "also",
    "use",
    "function",
    "method",
    "called",
    "pop",
    "item",
    "pop",
    "item",
    "method",
    "well",
    "let",
    "show",
    "one",
    "pop",
    "item",
    "going",
    "retrieve",
    "remove",
    "last",
    "key",
    "value",
    "pair",
    "inserted",
    "dictionary",
    "case",
    "color",
    "run",
    "going",
    "return",
    "color",
    "green",
    "print",
    "dictionary",
    "going",
    "show",
    "color",
    "green",
    "already",
    "removed",
    "removed",
    "last",
    "item",
    "also",
    "check",
    "key",
    "contained",
    "dictionary",
    "using",
    "operator",
    "going",
    "say",
    "going",
    "try",
    "find",
    "color",
    "dog",
    "key",
    "called",
    "color",
    "dog",
    "run",
    "says",
    "true",
    "another",
    "thing",
    "get",
    "list",
    "keys",
    "dictionary",
    "using",
    "keys",
    "method",
    "dog",
    "dot",
    "keys",
    "run",
    "going",
    "show",
    "keys",
    "keys",
    "name",
    "age",
    "color",
    "see",
    "inside",
    "thing",
    "called",
    "dick",
    "keys",
    "also",
    "pass",
    "list",
    "return",
    "actual",
    "list",
    "part",
    "see",
    "actual",
    "list",
    "name",
    "age",
    "color",
    "thing",
    "values",
    "instead",
    "let",
    "values",
    "print",
    "see",
    "roger",
    "8",
    "green",
    "pass",
    "list",
    "return",
    "app",
    "list",
    "roger",
    "8",
    "green",
    "finally",
    "items",
    "music",
    "going",
    "return",
    "items",
    "list",
    "items",
    "dictionary",
    "convert",
    "list",
    "see",
    "first",
    "item",
    "list",
    "second",
    "item",
    "third",
    "item",
    "see",
    "item",
    "list",
    "item",
    "dictionary",
    "list",
    "like",
    "lot",
    "things",
    "use",
    "length",
    "function",
    "put",
    "dog",
    "see",
    "three",
    "items",
    "dog",
    "also",
    "add",
    "new",
    "key",
    "value",
    "pair",
    "dictionary",
    "let",
    "say",
    "want",
    "dog",
    "food",
    "even",
    "single",
    "word",
    "could",
    "put",
    "favorite",
    "food",
    "going",
    "say",
    "meet",
    "going",
    "print",
    "let",
    "see",
    "oh",
    "supposed",
    "little",
    "wrong",
    "go",
    "actually",
    "put",
    "use",
    "bracket",
    "notation",
    "equals",
    "let",
    "put",
    "equals",
    "okay",
    "see",
    "new",
    "item",
    "list",
    "favorite",
    "food",
    "meet",
    "also",
    "delete",
    "item",
    "list",
    "delete",
    "key",
    "value",
    "pair",
    "going",
    "e",
    "l",
    "means",
    "delete",
    "dog",
    "dog",
    "go",
    "time",
    "going",
    "delete",
    "color",
    "going",
    "use",
    "single",
    "quotes",
    "instead",
    "double",
    "quotes",
    "show",
    "really",
    "matter",
    "type",
    "quote",
    "see",
    "know",
    "color",
    "dog",
    "longer",
    "green",
    "dog",
    "also",
    "copy",
    "dictionary",
    "want",
    "make",
    "two",
    "copies",
    "dictionary",
    "like",
    "dog",
    "copy",
    "name",
    "new",
    "dictionary",
    "dog",
    "dot",
    "copy",
    "would",
    "new",
    "copied",
    "version",
    "dictionary",
    "okay",
    "going",
    "talk",
    "new",
    "thing",
    "called",
    "sets",
    "sets",
    "another",
    "important",
    "python",
    "data",
    "structure",
    "sets",
    "kind",
    "work",
    "like",
    "tuples",
    "ordered",
    "immutable",
    "change",
    "also",
    "say",
    "kind",
    "work",
    "like",
    "dictionaries",
    "keys",
    "immutable",
    "version",
    "set",
    "called",
    "frozen",
    "set",
    "let",
    "show",
    "would",
    "create",
    "set",
    "let",
    "names",
    "going",
    "use",
    "curly",
    "brackets",
    "like",
    "like",
    "two",
    "names",
    "see",
    "differences",
    "dictionary",
    "use",
    "curly",
    "brackets",
    "going",
    "key",
    "value",
    "pairs",
    "key",
    "value",
    "pairs",
    "list",
    "going",
    "item",
    "item",
    "like",
    "going",
    "brackets",
    "instead",
    "curly",
    "braces",
    "one",
    "thing",
    "sets",
    "ordered",
    "sets",
    "work",
    "well",
    "think",
    "mathematical",
    "sets",
    "instance",
    "let",
    "going",
    "create",
    "set",
    "1",
    "roger",
    "sid",
    "going",
    "set",
    "2",
    "going",
    "roger",
    "intersect",
    "two",
    "sets",
    "uh",
    "inner",
    "intersect",
    "intersection",
    "two",
    "sets",
    "set",
    "one",
    "set",
    "two",
    "print",
    "print",
    "intersect",
    "run",
    "gon",
    "na",
    "see",
    "roger",
    "intersection",
    "two",
    "sets",
    "roger",
    "items",
    "common",
    "also",
    "create",
    "union",
    "two",
    "sets",
    "instead",
    "calling",
    "union",
    "put",
    "mod",
    "modification",
    "show",
    "different",
    "things",
    "variable",
    "name",
    "union",
    "symbol",
    "straight",
    "line",
    "like",
    "straight",
    "line",
    "key",
    "forward",
    "slash",
    "backslash",
    "one",
    "slashes",
    "going",
    "get",
    "every",
    "single",
    "item",
    "sets",
    "happens",
    "case",
    "happen",
    "set",
    "one",
    "change",
    "one",
    "word",
    "luna",
    "different",
    "name",
    "going",
    "get",
    "item",
    "sets",
    "said",
    "luna",
    "roger",
    "intersection",
    "also",
    "get",
    "difference",
    "difference",
    "two",
    "sets",
    "let",
    "change",
    "back",
    "roger",
    "difference",
    "two",
    "sets",
    "use",
    "minus",
    "difference",
    "going",
    "sid",
    "thing",
    "different",
    "two",
    "sets",
    "also",
    "check",
    "set",
    "superset",
    "another",
    "set",
    "subset",
    "another",
    "would",
    "saying",
    "like",
    "greater",
    "means",
    "everything",
    "set",
    "true",
    "put",
    "direction",
    "set",
    "everything",
    "one",
    "also",
    "count",
    "items",
    "set",
    "length",
    "function",
    "pretty",
    "wo",
    "even",
    "show",
    "seen",
    "link",
    "function",
    "many",
    "times",
    "also",
    "get",
    "also",
    "get",
    "list",
    "items",
    "set",
    "passing",
    "set",
    "list",
    "constructor",
    "going",
    "remove",
    "list",
    "set",
    "one",
    "okay",
    "list",
    "set",
    "check",
    "item",
    "contained",
    "set",
    "operator",
    "like",
    "list",
    "way",
    "places",
    "use",
    "operator",
    "one",
    "final",
    "thing",
    "set",
    "set",
    "two",
    "item",
    "another",
    "thing",
    "useful",
    "sets",
    "type",
    "rogers",
    "roger",
    "sid",
    "roger",
    "play",
    "see",
    "going",
    "print",
    "sid",
    "roger",
    "going",
    "add",
    "roger",
    "twice",
    "set",
    "another",
    "useful",
    "thing",
    "sets",
    "make",
    "sure",
    "one",
    "item",
    "set",
    "list",
    "multiple",
    "items",
    "convert",
    "set",
    "um",
    "make",
    "sure",
    "one",
    "thing",
    "set",
    "let",
    "talk",
    "functions",
    "already",
    "talked",
    "functions",
    "last",
    "section",
    "going",
    "review",
    "go",
    "even",
    "detail",
    "functions",
    "function",
    "lets",
    "us",
    "create",
    "set",
    "instructions",
    "run",
    "needed",
    "going",
    "paste",
    "function",
    "indentation",
    "either",
    "four",
    "spaces",
    "two",
    "spaces",
    "long",
    "indented",
    "exact",
    "amount",
    "functions",
    "essential",
    "python",
    "many",
    "programming",
    "languages",
    "help",
    "us",
    "create",
    "meaningful",
    "programs",
    "allow",
    "us",
    "decompose",
    "program",
    "manageable",
    "parts",
    "promote",
    "readability",
    "code",
    "reuse",
    "one",
    "function",
    "called",
    "hello",
    "prints",
    "hello",
    "function",
    "definition",
    "name",
    "called",
    "hello",
    "name",
    "body",
    "function",
    "set",
    "instructions",
    "body",
    "function",
    "everything",
    "colon",
    "everything",
    "indented",
    "one",
    "level",
    "right",
    "run",
    "function",
    "must",
    "call",
    "type",
    "hello",
    "hello",
    "syntax",
    "call",
    "function",
    "call",
    "multiple",
    "times",
    "copy",
    "paste",
    "run",
    "program",
    "going",
    "print",
    "hello",
    "three",
    "times",
    "name",
    "function",
    "important",
    "name",
    "function",
    "hello",
    "function",
    "name",
    "descriptive",
    "anyone",
    "calling",
    "imagine",
    "function",
    "function",
    "accept",
    "one",
    "parameters",
    "something",
    "else",
    "saw",
    "type",
    "parameter",
    "right",
    "becomes",
    "variable",
    "use",
    "function",
    "change",
    "instead",
    "printing",
    "hello",
    "going",
    "print",
    "hello",
    "put",
    "name",
    "call",
    "function",
    "name",
    "actually",
    "um",
    "call",
    "different",
    "names",
    "bow",
    "quincy",
    "play",
    "see",
    "hello",
    "bo",
    "hello",
    "quincy",
    "see",
    "call",
    "function",
    "passing",
    "argument",
    "use",
    "single",
    "quote",
    "double",
    "quotes",
    "better",
    "consistent",
    "always",
    "use",
    "single",
    "quotes",
    "always",
    "use",
    "double",
    "quotes",
    "teaching",
    "like",
    "switch",
    "emphasize",
    "use",
    "either",
    "let",
    "tell",
    "difference",
    "parameters",
    "arguments",
    "two",
    "words",
    "parameters",
    "arguments",
    "sometimes",
    "used",
    "interchangeably",
    "common",
    "get",
    "confused",
    "distinction",
    "call",
    "parameters",
    "values",
    "accepted",
    "function",
    "inside",
    "function",
    "definition",
    "arguments",
    "values",
    "pass",
    "function",
    "call",
    "also",
    "argument",
    "default",
    "value",
    "applied",
    "argument",
    "specified",
    "let",
    "show",
    "would",
    "name",
    "right",
    "always",
    "needs",
    "get",
    "name",
    "well",
    "first",
    "let",
    "show",
    "would",
    "happen",
    "called",
    "function",
    "without",
    "passing",
    "name",
    "going",
    "run",
    "see",
    "going",
    "get",
    "error",
    "hello",
    "missing",
    "one",
    "required",
    "positional",
    "argument",
    "name",
    "make",
    "call",
    "function",
    "without",
    "passing",
    "name",
    "optional",
    "ca",
    "want",
    "going",
    "put",
    "equal",
    "sign",
    "gon",
    "na",
    "type",
    "friend",
    "make",
    "consistent",
    "make",
    "consistent",
    "gon",
    "na",
    "make",
    "double",
    "quotes",
    "okay",
    "optional",
    "argument",
    "pass",
    "name",
    "pass",
    "name",
    "going",
    "default",
    "friend",
    "run",
    "default",
    "value",
    "hello",
    "bow",
    "hill",
    "quincy",
    "hello",
    "friend",
    "called",
    "specify",
    "argument",
    "parameter",
    "also",
    "accept",
    "multiple",
    "parameters",
    "going",
    "get",
    "rid",
    "default",
    "value",
    "put",
    "8",
    "accepting",
    "name",
    "age",
    "use",
    "parameters",
    "function",
    "plus",
    "hello",
    "name",
    "music",
    "going",
    "add",
    "age",
    "going",
    "passed",
    "number",
    "going",
    "convert",
    "string",
    "music",
    "years",
    "old",
    "make",
    "sure",
    "make",
    "sure",
    "add",
    "space",
    "space",
    "space",
    "word",
    "number",
    "space",
    "years",
    "old",
    "gon",
    "na",
    "pass",
    "number",
    "run",
    "function",
    "showing",
    "red",
    "squiggly",
    "lines",
    "sometimes",
    "red",
    "squiggly",
    "lines",
    "appear",
    "actually",
    "correct",
    "let",
    "something",
    "wrong",
    "oh",
    "need",
    "put",
    "parentheses",
    "red",
    "squiggly",
    "lines",
    "appears",
    "actually",
    "correct",
    "go",
    "away",
    "usually",
    "within",
    "seconds",
    "hit",
    "enter",
    "actually",
    "problem",
    "forgot",
    "parentheses",
    "end",
    "um",
    "see",
    "whole",
    "function",
    "looks",
    "like",
    "one",
    "line",
    "going",
    "move",
    "hello",
    "bo",
    "39",
    "years",
    "old",
    "used",
    "name",
    "age",
    "parameters",
    "passed",
    "reference",
    "types",
    "python",
    "objects",
    "immutable",
    "including",
    "integers",
    "booleans",
    "floats",
    "strings",
    "tuples",
    "means",
    "pass",
    "parameters",
    "modify",
    "value",
    "inside",
    "function",
    "new",
    "value",
    "reflected",
    "outside",
    "function",
    "let",
    "give",
    "example",
    "going",
    "paste",
    "new",
    "code",
    "see",
    "function",
    "called",
    "change",
    "going",
    "pass",
    "value",
    "pass",
    "valve",
    "variable",
    "1",
    "change",
    "function",
    "set",
    "value",
    "2",
    "well",
    "going",
    "print",
    "value",
    "see",
    "happens",
    "see",
    "1",
    "change",
    "value",
    "value",
    "change",
    "inside",
    "function",
    "affect",
    "anything",
    "outside",
    "function",
    "see",
    "orange",
    "squiggly",
    "lines",
    "local",
    "variable",
    "value",
    "assigned",
    "never",
    "used",
    "showing",
    "actually",
    "really",
    "anything",
    "inside",
    "function",
    "change",
    "change",
    "anything",
    "outside",
    "function",
    "pass",
    "object",
    "immutable",
    "change",
    "one",
    "properties",
    "change",
    "reflected",
    "outside",
    "mutable",
    "immutable",
    "object",
    "would",
    "mutable",
    "would",
    "like",
    "dictionary",
    "change",
    "dictionary",
    "put",
    "name",
    "set",
    "bow",
    "inside",
    "change",
    "value",
    "dot",
    "name",
    "put",
    "brackets",
    "value",
    "name",
    "key",
    "dictionary",
    "set",
    "sid",
    "run",
    "see",
    "name",
    "changed",
    "sin",
    "changed",
    "use",
    "change",
    "function",
    "change",
    "name",
    "sid",
    "actually",
    "changed",
    "dictionary",
    "mutable",
    "function",
    "also",
    "return",
    "value",
    "using",
    "return",
    "statement",
    "going",
    "update",
    "whole",
    "thing",
    "talk",
    "return",
    "statements",
    "function",
    "return",
    "value",
    "using",
    "return",
    "statement",
    "going",
    "return",
    "name",
    "continue",
    "use",
    "program",
    "return",
    "name",
    "return",
    "anything",
    "happens",
    "inside",
    "function",
    "function",
    "meets",
    "return",
    "statement",
    "function",
    "ends",
    "return",
    "statement",
    "code",
    "end",
    "like",
    "instance",
    "return",
    "statement",
    "conditional",
    "like",
    "statement",
    "also",
    "omit",
    "return",
    "return",
    "value",
    "going",
    "end",
    "function",
    "return",
    "anything",
    "mentioned",
    "return",
    "statement",
    "conditional",
    "common",
    "way",
    "end",
    "function",
    "starting",
    "condition",
    "met",
    "like",
    "instance",
    "update",
    "function",
    "name",
    "return",
    "mean",
    "name",
    "return",
    "else",
    "even",
    "need",
    "else",
    "function",
    "even",
    "need",
    "else",
    "happen",
    "name",
    "said",
    "pass",
    "something",
    "default",
    "value",
    "way",
    "get",
    "would",
    "call",
    "function",
    "false",
    "call",
    "false",
    "going",
    "return",
    "anything",
    "call",
    "bo",
    "let",
    "see",
    "hello",
    "bo",
    "also",
    "return",
    "multiple",
    "values",
    "using",
    "comma",
    "separated",
    "values",
    "instance",
    "going",
    "take",
    "part",
    "add",
    "return",
    "statement",
    "return",
    "return",
    "name",
    "return",
    "bo",
    "case",
    "name",
    "return",
    "8",
    "call",
    "going",
    "call",
    "sid",
    "see",
    "happens",
    "oh",
    "actually",
    "print",
    "returned",
    "print",
    "go",
    "really",
    "see",
    "happens",
    "function",
    "going",
    "print",
    "also",
    "going",
    "print",
    "returned",
    "let",
    "see",
    "looks",
    "like",
    "print",
    "returned",
    "looks",
    "like",
    "sid",
    "bo",
    "8",
    "one",
    "thing",
    "related",
    "functions",
    "also",
    "related",
    "parts",
    "python",
    "variable",
    "scope",
    "let",
    "look",
    "declared",
    "variable",
    "declare",
    "variable",
    "variable",
    "visible",
    "parts",
    "program",
    "depending",
    "declare",
    "declare",
    "variable",
    "outside",
    "function",
    "variable",
    "visible",
    "code",
    "running",
    "declare",
    "declaration",
    "including",
    "functions",
    "call",
    "global",
    "variable",
    "declared",
    "function",
    "access",
    "inside",
    "function",
    "also",
    "outside",
    "function",
    "see",
    "8",
    "8",
    "shows",
    "right",
    "going",
    "show",
    "console",
    "declare",
    "variable",
    "inside",
    "function",
    "let",
    "give",
    "example",
    "declare",
    "variable",
    "inside",
    "function",
    "going",
    "move",
    "local",
    "variable",
    "visible",
    "inside",
    "function",
    "let",
    "delete",
    "actually",
    "going",
    "run",
    "going",
    "see",
    "error",
    "name",
    "age",
    "defined",
    "trying",
    "print",
    "age",
    "since",
    "age",
    "declared",
    "inside",
    "function",
    "available",
    "outside",
    "function",
    "available",
    "inside",
    "function",
    "aware",
    "sometimes",
    "local",
    "variables",
    "apply",
    "inside",
    "function",
    "global",
    "variables",
    "apply",
    "inside",
    "function",
    "outside",
    "function",
    "okay",
    "let",
    "look",
    "something",
    "else",
    "functions",
    "nested",
    "functions",
    "functions",
    "python",
    "nested",
    "inside",
    "functions",
    "function",
    "defined",
    "inside",
    "function",
    "visible",
    "inside",
    "function",
    "useful",
    "create",
    "utilities",
    "useful",
    "function",
    "useful",
    "outside",
    "might",
    "ask",
    "hiding",
    "function",
    "harm",
    "well",
    "one",
    "always",
    "best",
    "hide",
    "functionality",
    "local",
    "function",
    "useful",
    "elsewhere",
    "also",
    "make",
    "use",
    "closures",
    "talk",
    "later",
    "look",
    "example",
    "function",
    "talk",
    "inside",
    "function",
    "defined",
    "another",
    "function",
    "called",
    "say",
    "call",
    "say",
    "function",
    "inside",
    "function",
    "way",
    "works",
    "pass",
    "phrase",
    "phrase",
    "phrase",
    "going",
    "buy",
    "milk",
    "split",
    "split",
    "way",
    "create",
    "list",
    "string",
    "string",
    "going",
    "split",
    "every",
    "space",
    "going",
    "create",
    "list",
    "word",
    "individually",
    "going",
    "run",
    "loop",
    "loops",
    "later",
    "going",
    "every",
    "word",
    "words",
    "list",
    "going",
    "say",
    "word",
    "going",
    "say",
    "word",
    "going",
    "print",
    "word",
    "run",
    "going",
    "buy",
    "milk",
    "every",
    "time",
    "prints",
    "prints",
    "new",
    "line",
    "would",
    "example",
    "never",
    "going",
    "want",
    "use",
    "save",
    "function",
    "outside",
    "talk",
    "function",
    "better",
    "put",
    "inside",
    "talk",
    "function",
    "paste",
    "another",
    "example",
    "want",
    "access",
    "variable",
    "defined",
    "outer",
    "function",
    "inner",
    "function",
    "first",
    "need",
    "declare",
    "using",
    "count",
    "allows",
    "us",
    "access",
    "variable",
    "declared",
    "inside",
    "outer",
    "function",
    "count",
    "variable",
    "called",
    "count",
    "able",
    "access",
    "variable",
    "inner",
    "function",
    "call",
    "already",
    "talked",
    "variable",
    "scope",
    "call",
    "call",
    "could",
    "access",
    "count",
    "variable",
    "inside",
    "function",
    "like",
    "instance",
    "going",
    "run",
    "going",
    "print",
    "count",
    "count",
    "plus",
    "1",
    "adding",
    "1",
    "number",
    "function",
    "take",
    "word",
    "run",
    "going",
    "get",
    "error",
    "know",
    "count",
    "know",
    "referring",
    "count",
    "inner",
    "function",
    "put",
    "back",
    "work",
    "especially",
    "useful",
    "closures",
    "talk",
    "closure",
    "special",
    "way",
    "function",
    "python",
    "return",
    "nested",
    "function",
    "function",
    "nested",
    "function",
    "access",
    "variables",
    "defined",
    "function",
    "even",
    "function",
    "active",
    "anymore",
    "let",
    "show",
    "example",
    "going",
    "paste",
    "code",
    "similar",
    "code",
    "little",
    "different",
    "explain",
    "instead",
    "count",
    "counter",
    "returning",
    "count",
    "nested",
    "function",
    "outer",
    "function",
    "returning",
    "nested",
    "function",
    "returning",
    "increment",
    "function",
    "instead",
    "calling",
    "function",
    "directory",
    "outer",
    "function",
    "assigning",
    "variable",
    "going",
    "print",
    "going",
    "call",
    "going",
    "call",
    "variable",
    "returned",
    "inner",
    "function",
    "basically",
    "calling",
    "inner",
    "function",
    "still",
    "going",
    "calling",
    "inner",
    "function",
    "going",
    "reset",
    "count",
    "zero",
    "every",
    "time",
    "keep",
    "track",
    "value",
    "using",
    "comment",
    "going",
    "return",
    "also",
    "run",
    "program",
    "see",
    "one",
    "two",
    "three",
    "like",
    "return",
    "increment",
    "inner",
    "function",
    "still",
    "access",
    "state",
    "count",
    "variable",
    "even",
    "though",
    "counter",
    "function",
    "ended",
    "let",
    "move",
    "objects",
    "music",
    "everything",
    "python",
    "object",
    "even",
    "values",
    "basic",
    "prim",
    "types",
    "like",
    "integers",
    "strings",
    "floats",
    "objects",
    "lists",
    "objects",
    "well",
    "tuples",
    "dictionaries",
    "pretty",
    "much",
    "everything",
    "objects",
    "attributes",
    "methods",
    "accessed",
    "using",
    "dot",
    "syntax",
    "example",
    "let",
    "define",
    "new",
    "variable",
    "type",
    "int",
    "going",
    "age",
    "equals",
    "eight",
    "age",
    "access",
    "properties",
    "methods",
    "defined",
    "int",
    "objects",
    "includes",
    "example",
    "access",
    "real",
    "imaginary",
    "part",
    "number",
    "print",
    "age",
    "dot",
    "real",
    "run",
    "real",
    "part",
    "eight",
    "also",
    "print",
    "imaginary",
    "part",
    "number",
    "manage",
    "imaginary",
    "part",
    "number",
    "zero",
    "also",
    "get",
    "bit",
    "length",
    "age",
    "dot",
    "bit",
    "length",
    "run",
    "see",
    "bit",
    "length",
    "four",
    "bit",
    "length",
    "method",
    "returns",
    "number",
    "bits",
    "necessary",
    "represent",
    "number",
    "binary",
    "notation",
    "lot",
    "things",
    "use",
    "int",
    "objects",
    "variable",
    "holding",
    "list",
    "value",
    "access",
    "different",
    "set",
    "methods",
    "going",
    "update",
    "going",
    "items",
    "equals",
    "going",
    "create",
    "list",
    "one",
    "two",
    "items",
    "dot",
    "append",
    "append",
    "three",
    "append",
    "another",
    "item",
    "items",
    "dot",
    "pop",
    "going",
    "remove",
    "return",
    "last",
    "item",
    "three",
    "methods",
    "methods",
    "pin",
    "pop",
    "methods",
    "available",
    "object",
    "depend",
    "type",
    "value",
    "id",
    "global",
    "function",
    "provided",
    "python",
    "lets",
    "inspect",
    "location",
    "memory",
    "particular",
    "object",
    "instance",
    "could",
    "print",
    "going",
    "id",
    "id",
    "items",
    "object",
    "see",
    "location",
    "memory",
    "val",
    "objects",
    "mutable",
    "others",
    "immutable",
    "something",
    "already",
    "talked",
    "little",
    "bit",
    "depends",
    "object",
    "object",
    "provides",
    "methods",
    "change",
    "content",
    "mutable",
    "otherwise",
    "immutable",
    "types",
    "defined",
    "python",
    "immutable",
    "example",
    "int",
    "immutable",
    "methods",
    "change",
    "value",
    "increment",
    "value",
    "like",
    "um",
    "age",
    "equals",
    "age",
    "plus",
    "one",
    "actually",
    "going",
    "create",
    "entirely",
    "new",
    "value",
    "going",
    "even",
    "object",
    "age",
    "create",
    "whole",
    "new",
    "one",
    "reassign",
    "something",
    "like",
    "dictionary",
    "would",
    "actually",
    "object",
    "could",
    "change",
    "different",
    "parts",
    "let",
    "talk",
    "loops",
    "song",
    "already",
    "discussed",
    "little",
    "bit",
    "previous",
    "section",
    "loops",
    "one",
    "essential",
    "part",
    "programming",
    "python",
    "two",
    "kinds",
    "loops",
    "loops",
    "loops",
    "um",
    "show",
    "going",
    "paste",
    "code",
    "want",
    "show",
    "something",
    "really",
    "quick",
    "see",
    "line",
    "like",
    "dotted",
    "line",
    "dotted",
    "line",
    "showing",
    "default",
    "indentation",
    "change",
    "actually",
    "going",
    "go",
    "change",
    "really",
    "quick",
    "let",
    "wait",
    "think",
    "gon",
    "na",
    "yeah",
    "gon",
    "na",
    "zoom",
    "get",
    "gon",
    "na",
    "change",
    "indent",
    "four",
    "going",
    "little",
    "line",
    "right",
    "going",
    "go",
    "back",
    "let",
    "zoom",
    "okay",
    "let",
    "talk",
    "loops",
    "loops",
    "defined",
    "using",
    "keyword",
    "repeat",
    "block",
    "condition",
    "evaluated",
    "false",
    "condition",
    "equals",
    "true",
    "particular",
    "example",
    "infinite",
    "loop",
    "never",
    "ends",
    "condition",
    "always",
    "going",
    "run",
    "program",
    "going",
    "right",
    "goes",
    "forever",
    "condition",
    "true",
    "keep",
    "running",
    "code",
    "inside",
    "loop",
    "lines",
    "code",
    "indented",
    "amount",
    "let",
    "halt",
    "loop",
    "right",
    "first",
    "iteration",
    "condition",
    "equals",
    "false",
    "music",
    "run",
    "runs",
    "loop",
    "one",
    "time",
    "case",
    "first",
    "iteration",
    "run",
    "condition",
    "evaluated",
    "true",
    "second",
    "iteration",
    "condition",
    "test",
    "evaluates",
    "false",
    "control",
    "goes",
    "next",
    "instruction",
    "loop",
    "case",
    "next",
    "instruction",
    "loop",
    "common",
    "counter",
    "stop",
    "iteration",
    "number",
    "cycles",
    "loop",
    "counter",
    "start",
    "counter",
    "zero",
    "count",
    "less",
    "gon",
    "na",
    "print",
    "count",
    "equals",
    "count",
    "plus",
    "one",
    "going",
    "increment",
    "counter",
    "every",
    "time",
    "get",
    "end",
    "gon",
    "na",
    "see",
    "gon",
    "na",
    "print",
    "eventually",
    "count",
    "greater",
    "10",
    "10",
    "10",
    "greater",
    "count",
    "less",
    "gets",
    "10",
    "loop",
    "stop",
    "um",
    "another",
    "way",
    "could",
    "done",
    "plus",
    "equals",
    "plus",
    "equals",
    "one",
    "run",
    "going",
    "exact",
    "thing",
    "type",
    "loop",
    "using",
    "loops",
    "tell",
    "python",
    "execute",
    "block",
    "predetermined",
    "amount",
    "times",
    "front",
    "without",
    "need",
    "separate",
    "variable",
    "conditional",
    "check",
    "value",
    "commonly",
    "used",
    "iterate",
    "items",
    "list",
    "list",
    "obviously",
    "four",
    "items",
    "four",
    "item",
    "items",
    "items",
    "list",
    "item",
    "list",
    "going",
    "print",
    "item",
    "pretty",
    "straightforward",
    "prints",
    "item",
    "list",
    "iterate",
    "specific",
    "amount",
    "times",
    "using",
    "range",
    "function",
    "let",
    "say",
    "going",
    "define",
    "going",
    "4",
    "item",
    "going",
    "type",
    "range",
    "going",
    "type",
    "number",
    "15",
    "using",
    "range",
    "function",
    "basically",
    "returns",
    "list",
    "see",
    "going",
    "0",
    "range",
    "function",
    "going",
    "return",
    "list",
    "goes",
    "0",
    "14",
    "15",
    "items",
    "going",
    "print",
    "items",
    "go",
    "back",
    "steps",
    "list",
    "show",
    "get",
    "index",
    "right",
    "printing",
    "items",
    "one",
    "two",
    "three",
    "four",
    "want",
    "index",
    "list",
    "using",
    "wrapping",
    "sequence",
    "enumerate",
    "function",
    "items",
    "going",
    "enumerate",
    "going",
    "pass",
    "going",
    "return",
    "item",
    "index",
    "item",
    "since",
    "going",
    "item",
    "index",
    "actually",
    "index",
    "item",
    "going",
    "type",
    "index",
    "comma",
    "item",
    "enumerate",
    "going",
    "get",
    "index",
    "item",
    "print",
    "index",
    "item",
    "run",
    "index",
    "zero",
    "item",
    "one",
    "index",
    "one",
    "item",
    "two",
    "index",
    "two",
    "item",
    "three",
    "even",
    "numbers",
    "names",
    "music",
    "run",
    "whoops",
    "one",
    "see",
    "index",
    "item",
    "let",
    "put",
    "code",
    "talk",
    "break",
    "continue",
    "loops",
    "interrupted",
    "inside",
    "block",
    "using",
    "either",
    "break",
    "continue",
    "continue",
    "stops",
    "current",
    "iteration",
    "tells",
    "python",
    "execute",
    "next",
    "one",
    "break",
    "stops",
    "loop",
    "altogether",
    "goes",
    "next",
    "instruction",
    "loop",
    "ends",
    "going",
    "play",
    "saying",
    "item",
    "equals",
    "two",
    "continues",
    "means",
    "going",
    "skip",
    "iteration",
    "play",
    "one",
    "three",
    "four",
    "going",
    "going",
    "get",
    "print",
    "item",
    "actually",
    "skipped",
    "iteration",
    "run",
    "code",
    "continue",
    "true",
    "print",
    "change",
    "break",
    "little",
    "different",
    "time",
    "going",
    "print",
    "one",
    "breaking",
    "loop",
    "entirely",
    "going",
    "run",
    "iteration",
    "loop",
    "okay",
    "let",
    "talk",
    "another",
    "thing",
    "classes",
    "classes",
    "python",
    "addition",
    "using",
    "python",
    "provided",
    "types",
    "declare",
    "classes",
    "classes",
    "instantiate",
    "objects",
    "object",
    "instance",
    "class",
    "class",
    "type",
    "object",
    "example",
    "going",
    "create",
    "class",
    "called",
    "dog",
    "uh",
    "create",
    "class",
    "put",
    "word",
    "class",
    "put",
    "class",
    "name",
    "add",
    "method",
    "class",
    "define",
    "method",
    "define",
    "bark",
    "music",
    "going",
    "put",
    "word",
    "self",
    "inside",
    "print",
    "music",
    "woof",
    "music",
    "okay",
    "self",
    "argument",
    "method",
    "point",
    "current",
    "object",
    "instance",
    "must",
    "specified",
    "defining",
    "method",
    "creating",
    "method",
    "inside",
    "class",
    "always",
    "going",
    "start",
    "self",
    "create",
    "instance",
    "class",
    "object",
    "like",
    "going",
    "put",
    "roger",
    "equals",
    "dog",
    "okay",
    "created",
    "dog",
    "like",
    "print",
    "type",
    "roger",
    "let",
    "see",
    "type",
    "roger",
    "see",
    "class",
    "dog",
    "class",
    "roger",
    "dog",
    "special",
    "type",
    "method",
    "called",
    "special",
    "type",
    "method",
    "called",
    "init",
    "constructor",
    "let",
    "show",
    "create",
    "constructor",
    "deaf",
    "use",
    "constructor",
    "like",
    "initialize",
    "one",
    "properties",
    "create",
    "new",
    "object",
    "class",
    "see",
    "always",
    "add",
    "self",
    "two",
    "variables",
    "pass",
    "create",
    "dog",
    "associate",
    "associated",
    "object",
    "call",
    "um",
    "call",
    "dog",
    "pass",
    "roger",
    "name",
    "age",
    "create",
    "dog",
    "going",
    "assign",
    "name",
    "going",
    "assign",
    "age",
    "let",
    "show",
    "access",
    "information",
    "going",
    "print",
    "instead",
    "printing",
    "type",
    "going",
    "roger",
    "dot",
    "name",
    "going",
    "self",
    "roger",
    "going",
    "name",
    "passed",
    "also",
    "age",
    "finally",
    "call",
    "bark",
    "method",
    "bark",
    "see",
    "going",
    "run",
    "roger",
    "eight",
    "put",
    "parentheses",
    "let",
    "put",
    "parentheses",
    "bark",
    "wolf",
    "roger",
    "8",
    "wolf",
    "reason",
    "says",
    "none",
    "put",
    "print",
    "see",
    "put",
    "pranks",
    "groove",
    "playing",
    "print",
    "everything",
    "calling",
    "bark",
    "already",
    "prints",
    "wolf",
    "printing",
    "printing",
    "since",
    "return",
    "anything",
    "return",
    "statement",
    "printed",
    "none",
    "two",
    "ways",
    "fix",
    "either",
    "instead",
    "printing",
    "wolf",
    "could",
    "return",
    "wolf",
    "could",
    "print",
    "let",
    "take",
    "okay",
    "roger",
    "8",
    "wolf",
    "one",
    "important",
    "feature",
    "class",
    "inheritance",
    "let",
    "show",
    "example",
    "inheritance",
    "going",
    "create",
    "new",
    "class",
    "dog",
    "class",
    "going",
    "class",
    "called",
    "animal",
    "animal",
    "class",
    "going",
    "put",
    "function",
    "called",
    "walk",
    "going",
    "always",
    "pass",
    "self",
    "going",
    "print",
    "music",
    "walking",
    "music",
    "make",
    "dog",
    "class",
    "inherent",
    "inherit",
    "animal",
    "class",
    "class",
    "dog",
    "put",
    "parentheses",
    "type",
    "animal",
    "dog",
    "class",
    "going",
    "inherit",
    "animal",
    "class",
    "go",
    "run",
    "okay",
    "roger",
    "8wolf",
    "going",
    "able",
    "walking",
    "see",
    "dog",
    "class",
    "actually",
    "walk",
    "method",
    "getting",
    "animal",
    "class",
    "inheriting",
    "method",
    "way",
    "able",
    "could",
    "create",
    "class",
    "cat",
    "class",
    "frog",
    "class",
    "bird",
    "could",
    "inherit",
    "walk",
    "method",
    "would",
    "walking",
    "little",
    "classes",
    "final",
    "project",
    "course",
    "going",
    "little",
    "object",
    "oriented",
    "programming",
    "right",
    "let",
    "talk",
    "something",
    "new",
    "going",
    "delete",
    "going",
    "talking",
    "modules",
    "every",
    "python",
    "file",
    "module",
    "import",
    "module",
    "files",
    "base",
    "program",
    "moderate",
    "complexity",
    "promotes",
    "sensible",
    "organization",
    "code",
    "reuse",
    "basically",
    "create",
    "software",
    "multiple",
    "python",
    "programs",
    "piece",
    "software",
    "typical",
    "python",
    "program",
    "one",
    "file",
    "acts",
    "entry",
    "point",
    "files",
    "modules",
    "exposed",
    "functions",
    "call",
    "files",
    "let",
    "show",
    "example",
    "going",
    "open",
    "files",
    "tab",
    "going",
    "create",
    "new",
    "file",
    "going",
    "called",
    "dog",
    "dot",
    "pi",
    "dog",
    "dot",
    "pi",
    "open",
    "longer",
    "main",
    "dot",
    "pi",
    "open",
    "going",
    "define",
    "bark",
    "bark",
    "going",
    "print",
    "woof",
    "music",
    "okay",
    "going",
    "going",
    "automatically",
    "save",
    "going",
    "go",
    "back",
    "python",
    "file",
    "going",
    "import",
    "dog",
    "let",
    "see",
    "oh",
    "saying",
    "unused",
    "thought",
    "maybe",
    "thing",
    "wrong",
    "means",
    "import",
    "dog",
    "used",
    "right",
    "dog",
    "dot",
    "bark",
    "run",
    "program",
    "going",
    "say",
    "wolf",
    "file",
    "actually",
    "importing",
    "function",
    "dog",
    "file",
    "way",
    "break",
    "code",
    "multiple",
    "files",
    "also",
    "use",
    "import",
    "syntax",
    "call",
    "function",
    "directly",
    "let",
    "show",
    "mean",
    "instead",
    "import",
    "dog",
    "going",
    "say",
    "dog",
    "import",
    "bark",
    "instead",
    "calling",
    "call",
    "bark",
    "importing",
    "bark",
    "well",
    "imported",
    "bark",
    "directly",
    "instead",
    "whole",
    "dog",
    "run",
    "says",
    "wolf",
    "first",
    "strategy",
    "allows",
    "us",
    "load",
    "everything",
    "defined",
    "file",
    "said",
    "import",
    "dog",
    "allows",
    "everything",
    "defined",
    "file",
    "could",
    "bunch",
    "function",
    "like",
    "bark",
    "walk",
    "name",
    "could",
    "bunch",
    "functions",
    "say",
    "import",
    "dog",
    "imports",
    "second",
    "strategy",
    "dog",
    "import",
    "bark",
    "allows",
    "us",
    "pick",
    "things",
    "need",
    "going",
    "import",
    "specific",
    "functions",
    "need",
    "modules",
    "specific",
    "program",
    "importing",
    "depends",
    "location",
    "file",
    "file",
    "system",
    "suppose",
    "put",
    "subfolder",
    "instance",
    "let",
    "say",
    "create",
    "folder",
    "call",
    "liv",
    "library",
    "let",
    "say",
    "put",
    "subfolder",
    "like",
    "folder",
    "make",
    "work",
    "going",
    "create",
    "empty",
    "file",
    "named",
    "going",
    "add",
    "file",
    "init",
    "dot",
    "underscore",
    "underscore",
    "init",
    "underscore",
    "underscore",
    "dot",
    "pi",
    "tells",
    "python",
    "folder",
    "contains",
    "modules",
    "going",
    "go",
    "back",
    "main",
    "file",
    "import",
    "dog",
    "lib",
    "going",
    "say",
    "lib",
    "subfolder",
    "import",
    "dog",
    "dog",
    "dot",
    "bark",
    "let",
    "run",
    "make",
    "sure",
    "errors",
    "worked",
    "correctly",
    "able",
    "import",
    "file",
    "subfolder",
    "reference",
    "dog",
    "module",
    "specific",
    "function",
    "importing",
    "import",
    "bark",
    "instead",
    "calling",
    "call",
    "bark",
    "says",
    "wolf",
    "going",
    "close",
    "let",
    "talk",
    "python",
    "standard",
    "library",
    "basically",
    "modules",
    "load",
    "lot",
    "code",
    "standard",
    "library",
    "python",
    "exposes",
    "lot",
    "functionality",
    "standard",
    "library",
    "stand",
    "library",
    "huge",
    "collection",
    "sorts",
    "utilities",
    "ranging",
    "math",
    "utilities",
    "debugging",
    "creating",
    "graphical",
    "user",
    "interfaces",
    "bunch",
    "common",
    "ones",
    "math",
    "math",
    "utilities",
    "regular",
    "expressions",
    "json",
    "work",
    "json",
    "date",
    "time",
    "sqlite",
    "3",
    "os",
    "operating",
    "system",
    "utilities",
    "random",
    "random",
    "number",
    "generations",
    "statistics",
    "requests",
    "http",
    "request",
    "http",
    "create",
    "servers",
    "url",
    "lib",
    "manage",
    "urls",
    "import",
    "modules",
    "allow",
    "get",
    "extra",
    "functionality",
    "already",
    "looked",
    "little",
    "bit",
    "math",
    "one",
    "already",
    "looked",
    "little",
    "bit",
    "random",
    "first",
    "uh",
    "project",
    "let",
    "kind",
    "look",
    "little",
    "would",
    "going",
    "use",
    "math",
    "one",
    "going",
    "import",
    "math",
    "would",
    "introduce",
    "would",
    "use",
    "module",
    "standard",
    "library",
    "already",
    "saw",
    "import",
    "modules",
    "created",
    "stan",
    "similar",
    "standard",
    "library",
    "imported",
    "math",
    "use",
    "functions",
    "methods",
    "math",
    "module",
    "math",
    "dot",
    "square",
    "root",
    "pass",
    "4",
    "print",
    "see",
    "result",
    "okay",
    "like",
    "shall",
    "saw",
    "instead",
    "importing",
    "math",
    "say",
    "math",
    "import",
    "square",
    "root",
    "instead",
    "math",
    "dot",
    "square",
    "root",
    "call",
    "square",
    "root",
    "method",
    "going",
    "thing",
    "basically",
    "works",
    "modules",
    "standard",
    "library",
    "okay",
    "going",
    "start",
    "going",
    "kind",
    "miscellaneous",
    "slightly",
    "advanced",
    "topics",
    "python",
    "going",
    "talk",
    "accept",
    "arguments",
    "command",
    "line",
    "python",
    "well",
    "first",
    "let",
    "see",
    "run",
    "program",
    "command",
    "line",
    "replit",
    "let",
    "say",
    "program",
    "says",
    "print",
    "hello",
    "okay",
    "running",
    "clicking",
    "play",
    "button",
    "another",
    "way",
    "run",
    "program",
    "replit",
    "go",
    "shell",
    "command",
    "line",
    "replica",
    "clear",
    "going",
    "type",
    "python",
    "main",
    "dot",
    "pi",
    "okay",
    "call",
    "python",
    "run",
    "python",
    "program",
    "put",
    "name",
    "file",
    "whether",
    "replit",
    "running",
    "things",
    "locally",
    "able",
    "run",
    "program",
    "way",
    "depending",
    "install",
    "program",
    "locally",
    "instead",
    "typing",
    "python",
    "may",
    "type",
    "python",
    "sometimes",
    "way",
    "people",
    "install",
    "python",
    "python",
    "3",
    "using",
    "version",
    "3",
    "python",
    "let",
    "see",
    "call",
    "python",
    "program",
    "command",
    "line",
    "pass",
    "arguments",
    "right",
    "run",
    "program",
    "command",
    "line",
    "basic",
    "way",
    "handle",
    "arguments",
    "use",
    "sys",
    "module",
    "standard",
    "library",
    "let",
    "give",
    "example",
    "first",
    "going",
    "import",
    "sys",
    "know",
    "usually",
    "always",
    "going",
    "import",
    "statements",
    "first",
    "line",
    "putting",
    "comment",
    "first",
    "line",
    "remind",
    "us",
    "working",
    "right",
    "going",
    "going",
    "import",
    "sys",
    "library",
    "going",
    "print",
    "going",
    "first",
    "going",
    "oh",
    "going",
    "print",
    "argument",
    "print",
    "arguments",
    "passed",
    "called",
    "program",
    "going",
    "see",
    "python",
    "going",
    "put",
    "bow",
    "39",
    "okay",
    "see",
    "printing",
    "list",
    "arguments",
    "basically",
    "list",
    "first",
    "item",
    "name",
    "file",
    "first",
    "word",
    "second",
    "one",
    "see",
    "strings",
    "even",
    "though",
    "number",
    "coming",
    "string",
    "could",
    "something",
    "like",
    "could",
    "say",
    "name",
    "equals",
    "v",
    "would",
    "get",
    "element",
    "index",
    "1",
    "name",
    "could",
    "print",
    "music",
    "hello",
    "going",
    "name",
    "oh",
    "hello",
    "hello",
    "name",
    "let",
    "call",
    "instead",
    "going",
    "39",
    "going",
    "python",
    "bow",
    "hello",
    "bo",
    "able",
    "use",
    "argument",
    "passed",
    "simple",
    "way",
    "really",
    "would",
    "lot",
    "work",
    "using",
    "method",
    "really",
    "validate",
    "arguments",
    "make",
    "sure",
    "type",
    "correct",
    "need",
    "print",
    "feedback",
    "user",
    "using",
    "program",
    "correctly",
    "got",
    "zoomed",
    "little",
    "bit",
    "going",
    "show",
    "method",
    "python",
    "provides",
    "another",
    "package",
    "standard",
    "library",
    "help",
    "called",
    "arg",
    "parse",
    "first",
    "would",
    "insert",
    "import",
    "arg",
    "parse",
    "music",
    "let",
    "show",
    "would",
    "use",
    "call",
    "arc",
    "parse",
    "dot",
    "argument",
    "parser",
    "pass",
    "description",
    "program",
    "description",
    "program",
    "program",
    "prints",
    "name",
    "dogs",
    "proceed",
    "add",
    "arguments",
    "want",
    "accept",
    "example",
    "program",
    "going",
    "accept",
    "c",
    "option",
    "slash",
    "c",
    "dash",
    "color",
    "going",
    "calling",
    "color",
    "later",
    "args",
    "access",
    "args",
    "dot",
    "color",
    "get",
    "color",
    "passed",
    "specify",
    "whether",
    "required",
    "help",
    "going",
    "go",
    "along",
    "let",
    "show",
    "would",
    "going",
    "python",
    "main",
    "dot",
    "pi",
    "going",
    "put",
    "dash",
    "c",
    "going",
    "put",
    "red",
    "okay",
    "see",
    "go",
    "little",
    "see",
    "command",
    "called",
    "command",
    "run",
    "pass",
    "red",
    "printed",
    "red",
    "right",
    "let",
    "show",
    "would",
    "happen",
    "specify",
    "argument",
    "run",
    "without",
    "red",
    "giving",
    "information",
    "usage",
    "well",
    "need",
    "put",
    "dash",
    "c",
    "put",
    "color",
    "says",
    "following",
    "arguments",
    "required",
    "dashi",
    "dash",
    "sc",
    "showing",
    "us",
    "need",
    "called",
    "program",
    "wrong",
    "going",
    "need",
    "call",
    "dash",
    "c",
    "also",
    "set",
    "option",
    "set",
    "option",
    "specific",
    "set",
    "values",
    "using",
    "choices",
    "required",
    "true",
    "comma",
    "going",
    "type",
    "choices",
    "going",
    "set",
    "equal",
    "see",
    "empty",
    "dictionary",
    "going",
    "well",
    "dictionary",
    "going",
    "key",
    "value",
    "pairs",
    "red",
    "yellow",
    "accept",
    "two",
    "options",
    "call",
    "red",
    "call",
    "blue",
    "say",
    "invalid",
    "choice",
    "blue",
    "need",
    "choose",
    "red",
    "yellow",
    "using",
    "arc",
    "parse",
    "makes",
    "easier",
    "deal",
    "arguments",
    "also",
    "makes",
    "easier",
    "communicate",
    "information",
    "back",
    "user",
    "trying",
    "get",
    "options",
    "basics",
    "let",
    "talk",
    "something",
    "completely",
    "different",
    "lambda",
    "lambda",
    "functions",
    "let",
    "give",
    "quick",
    "example",
    "music",
    "lambda",
    "num",
    "num",
    "music",
    "times",
    "lambda",
    "functions",
    "also",
    "called",
    "anonymous",
    "functions",
    "tiny",
    "functions",
    "name",
    "one",
    "expression",
    "body",
    "defined",
    "using",
    "lambda",
    "keyword",
    "going",
    "argument",
    "going",
    "expression",
    "body",
    "must",
    "single",
    "expression",
    "expression",
    "statement",
    "difference",
    "important",
    "expression",
    "returns",
    "value",
    "statement",
    "return",
    "value",
    "value",
    "returned",
    "number",
    "times",
    "two",
    "number",
    "passed",
    "going",
    "multiply",
    "2",
    "example",
    "basically",
    "simplest",
    "example",
    "lambda",
    "function",
    "doubles",
    "value",
    "number",
    "lambda",
    "functions",
    "accept",
    "arguments",
    "instance",
    "could",
    "music",
    "lambda",
    "comma",
    "b",
    "multiply",
    "times",
    "b",
    "lambda",
    "functions",
    "invoked",
    "directly",
    "ca",
    "assign",
    "variables",
    "instance",
    "assign",
    "variable",
    "called",
    "multiply",
    "multiply",
    "going",
    "function",
    "going",
    "assigned",
    "variable",
    "way",
    "would",
    "use",
    "could",
    "print",
    "print",
    "result",
    "calling",
    "multiply",
    "pass",
    "two",
    "four",
    "run",
    "okay",
    "2",
    "times",
    "4",
    "see",
    "right",
    "console",
    "going",
    "zoom",
    "little",
    "bit",
    "utility",
    "lambda",
    "functions",
    "comes",
    "combined",
    "python",
    "functionality",
    "example",
    "combination",
    "map",
    "filter",
    "reduce",
    "speaking",
    "map",
    "filter",
    "reduce",
    "going",
    "talk",
    "map",
    "filter",
    "reduce",
    "python",
    "provides",
    "three",
    "useful",
    "global",
    "functions",
    "use",
    "work",
    "collections",
    "map",
    "filter",
    "reduce",
    "first",
    "let",
    "talk",
    "map",
    "since",
    "functions",
    "going",
    "parentheses",
    "end",
    "map",
    "used",
    "run",
    "function",
    "upon",
    "item",
    "iterable",
    "item",
    "like",
    "list",
    "create",
    "new",
    "list",
    "number",
    "items",
    "values",
    "item",
    "changed",
    "example",
    "list",
    "function",
    "going",
    "map",
    "item",
    "list",
    "function",
    "going",
    "run",
    "going",
    "run",
    "function",
    "item",
    "list",
    "going",
    "get",
    "new",
    "list",
    "print",
    "result",
    "print",
    "run",
    "function",
    "see",
    "okay",
    "get",
    "map",
    "object",
    "always",
    "pass",
    "list",
    "function",
    "run",
    "program",
    "two",
    "four",
    "six",
    "one",
    "two",
    "three",
    "became",
    "two",
    "four",
    "yeah",
    "whenever",
    "want",
    "run",
    "function",
    "item",
    "list",
    "use",
    "map",
    "function",
    "common",
    "use",
    "lambda",
    "function",
    "talked",
    "lambda",
    "functions",
    "let",
    "show",
    "would",
    "lambda",
    "function",
    "double",
    "going",
    "going",
    "variable",
    "going",
    "assign",
    "lambda",
    "function",
    "going",
    "lambda",
    "function",
    "takes",
    "number",
    "times",
    "two",
    "keep",
    "using",
    "lambda",
    "function",
    "taking",
    "number",
    "passing",
    "function",
    "number",
    "list",
    "multiply",
    "run",
    "program",
    "look",
    "exactly",
    "even",
    "simplify",
    "even",
    "lambda",
    "functions",
    "really",
    "shine",
    "instead",
    "assign",
    "assigning",
    "double",
    "first",
    "copy",
    "whole",
    "function",
    "delete",
    "completely",
    "put",
    "right",
    "mapping",
    "function",
    "even",
    "create",
    "function",
    "different",
    "line",
    "assign",
    "variable",
    "first",
    "put",
    "lambda",
    "function",
    "right",
    "line",
    "right",
    "within",
    "map",
    "run",
    "going",
    "give",
    "us",
    "result",
    "remember",
    "started",
    "first",
    "showed",
    "example",
    "much",
    "longer",
    "piece",
    "code",
    "simplified",
    "lambda",
    "function",
    "original",
    "list",
    "original",
    "list",
    "left",
    "untouched",
    "new",
    "list",
    "updated",
    "values",
    "returned",
    "map",
    "result",
    "map",
    "object",
    "iterable",
    "needed",
    "cast",
    "list",
    "print",
    "content",
    "okay",
    "let",
    "talk",
    "filter",
    "let",
    "put",
    "let",
    "update",
    "code",
    "kind",
    "similar",
    "using",
    "filter",
    "filter",
    "takes",
    "iterable",
    "returns",
    "filter",
    "object",
    "another",
    "iterable",
    "without",
    "original",
    "items",
    "returning",
    "true",
    "false",
    "filtering",
    "filtering",
    "function",
    "filtering",
    "function",
    "going",
    "check",
    "item",
    "passed",
    "even",
    "list",
    "see",
    "calling",
    "filter",
    "pass",
    "function",
    "filtering",
    "function",
    "list",
    "going",
    "return",
    "true",
    "false",
    "function",
    "divisible",
    "divide",
    "two",
    "zero",
    "remainder",
    "even",
    "would",
    "return",
    "true",
    "line",
    "would",
    "return",
    "true",
    "would",
    "return",
    "false",
    "odd",
    "even",
    "number",
    "going",
    "added",
    "result",
    "odd",
    "number",
    "going",
    "added",
    "result",
    "basically",
    "filtering",
    "list",
    "based",
    "function",
    "print",
    "convert",
    "result",
    "list",
    "run",
    "two",
    "obviously",
    "put",
    "uh",
    "numbers",
    "run",
    "two",
    "four",
    "six",
    "like",
    "use",
    "lambda",
    "function",
    "going",
    "copy",
    "delete",
    "whole",
    "thing",
    "going",
    "put",
    "lambda",
    "function",
    "lamb",
    "duh",
    "music",
    "see",
    "putting",
    "lambda",
    "function",
    "line",
    "checking",
    "see",
    "going",
    "turn",
    "true",
    "false",
    "whether",
    "even",
    "run",
    "program",
    "going",
    "give",
    "exact",
    "result",
    "okay",
    "final",
    "thing",
    "going",
    "talk",
    "reduce",
    "reduce",
    "used",
    "calculate",
    "value",
    "sequence",
    "like",
    "list",
    "example",
    "suppose",
    "list",
    "expenses",
    "stored",
    "tuples",
    "dinner",
    "80",
    "car",
    "repair",
    "180",
    "120",
    "want",
    "calculate",
    "sum",
    "property",
    "tuple",
    "case",
    "cost",
    "expense",
    "kind",
    "long",
    "way",
    "without",
    "using",
    "reduce",
    "basically",
    "take",
    "every",
    "expense",
    "expenses",
    "add",
    "sum",
    "add",
    "expense",
    "one",
    "going",
    "item",
    "index",
    "one",
    "get",
    "sum",
    "print",
    "sum",
    "kind",
    "like",
    "long",
    "way",
    "without",
    "reduce",
    "quicker",
    "way",
    "use",
    "reduce",
    "reduce",
    "little",
    "different",
    "map",
    "filter",
    "available",
    "available",
    "automatically",
    "import",
    "standard",
    "library",
    "func",
    "tools",
    "funk",
    "tools",
    "function",
    "tools",
    "import",
    "music",
    "reduce",
    "going",
    "create",
    "new",
    "going",
    "create",
    "new",
    "variable",
    "called",
    "sum",
    "going",
    "set",
    "reduce",
    "going",
    "use",
    "reduce",
    "going",
    "pass",
    "going",
    "go",
    "directly",
    "lambda",
    "function",
    "lambda",
    "let",
    "kind",
    "explain",
    "little",
    "bit",
    "reduce",
    "first",
    "going",
    "take",
    "function",
    "reduction",
    "function",
    "iterable",
    "function",
    "take",
    "two",
    "arguments",
    "first",
    "argument",
    "accumulated",
    "value",
    "right",
    "argument",
    "updated",
    "update",
    "value",
    "iterable",
    "going",
    "continue",
    "adding",
    "two",
    "item",
    "going",
    "basically",
    "add",
    "every",
    "item",
    "together",
    "reduce",
    "numbers",
    "first",
    "index",
    "one",
    "value",
    "adding",
    "together",
    "pray",
    "play",
    "get",
    "number",
    "200",
    "see",
    "lot",
    "lot",
    "quicker",
    "use",
    "reduce",
    "function",
    "compared",
    "code",
    "previously",
    "okay",
    "next",
    "going",
    "talk",
    "recursion",
    "python",
    "recursion",
    "error",
    "recursion",
    "function",
    "python",
    "call",
    "recursion",
    "pretty",
    "useful",
    "many",
    "scenarios",
    "common",
    "way",
    "explain",
    "recursion",
    "using",
    "factorial",
    "calculation",
    "let",
    "show",
    "would",
    "calculate",
    "factorial",
    "python",
    "code",
    "example",
    "fact",
    "3",
    "factorial",
    "means",
    "3",
    "multiply",
    "every",
    "number",
    "three",
    "number",
    "one",
    "together",
    "three",
    "times",
    "two",
    "times",
    "one",
    "equals",
    "six",
    "four",
    "factorial",
    "four",
    "times",
    "three",
    "times",
    "two",
    "times",
    "one",
    "five",
    "factorial",
    "know",
    "five",
    "one",
    "every",
    "number",
    "multiply",
    "every",
    "whole",
    "number",
    "one",
    "using",
    "recursion",
    "write",
    "function",
    "calculates",
    "factorial",
    "number",
    "let",
    "show",
    "function",
    "see",
    "inside",
    "function",
    "calling",
    "function",
    "recursive",
    "function",
    "always",
    "going",
    "base",
    "case",
    "recursive",
    "case",
    "base",
    "case",
    "going",
    "leave",
    "recursive",
    "function",
    "n",
    "equal",
    "one",
    "going",
    "return",
    "one",
    "basically",
    "going",
    "get",
    "recursive",
    "function",
    "uh",
    "n",
    "going",
    "equal",
    "one",
    "recursive",
    "recursive",
    "case",
    "going",
    "call",
    "function",
    "always",
    "need",
    "least",
    "always",
    "need",
    "base",
    "case",
    "eventually",
    "recursion",
    "stop",
    "recursion",
    "ever",
    "stop",
    "going",
    "get",
    "recursion",
    "error",
    "basically",
    "python",
    "default",
    "halt",
    "recursions",
    "1000",
    "calls",
    "get",
    "recursion",
    "error",
    "going",
    "get",
    "factorial",
    "three",
    "let",
    "times",
    "see",
    "difference",
    "three",
    "four",
    "five",
    "test",
    "6",
    "24",
    "okay",
    "let",
    "talk",
    "decorators",
    "decorators",
    "python",
    "way",
    "change",
    "enhance",
    "alter",
    "way",
    "function",
    "works",
    "decorators",
    "defined",
    "symbol",
    "followed",
    "decorator",
    "name",
    "function",
    "definition",
    "instance",
    "let",
    "say",
    "function",
    "hello",
    "going",
    "simplest",
    "function",
    "going",
    "print",
    "hello",
    "uh",
    "make",
    "add",
    "decorator",
    "going",
    "put",
    "like",
    "sign",
    "decorator",
    "name",
    "case",
    "going",
    "type",
    "log",
    "time",
    "function",
    "log",
    "time",
    "decorator",
    "assigned",
    "whenever",
    "call",
    "hello",
    "function",
    "decorator",
    "going",
    "called",
    "decorator",
    "function",
    "takes",
    "function",
    "parameter",
    "wraps",
    "function",
    "inner",
    "function",
    "performs",
    "job",
    "returns",
    "inner",
    "function",
    "instance",
    "going",
    "create",
    "another",
    "function",
    "going",
    "log",
    "time",
    "function",
    "something",
    "function",
    "like",
    "instance",
    "say",
    "print",
    "going",
    "print",
    "run",
    "oh",
    "call",
    "function",
    "always",
    "important",
    "run",
    "hello",
    "going",
    "often",
    "use",
    "decorator",
    "functions",
    "want",
    "change",
    "behavior",
    "function",
    "without",
    "modifying",
    "function",
    "good",
    "examples",
    "want",
    "add",
    "logging",
    "test",
    "performance",
    "perform",
    "caching",
    "verify",
    "permissions",
    "also",
    "use",
    "one",
    "need",
    "run",
    "code",
    "multiple",
    "functions",
    "okay",
    "let",
    "talk",
    "doc",
    "strings",
    "doc",
    "strings",
    "music",
    "documentation",
    "hugely",
    "important",
    "communicate",
    "people",
    "goal",
    "function",
    "class",
    "method",
    "module",
    "also",
    "also",
    "communicates",
    "come",
    "back",
    "code",
    "like",
    "many",
    "months",
    "might",
    "remember",
    "knowledge",
    "holding",
    "head",
    "wrote",
    "code",
    "point",
    "reading",
    "code",
    "understanding",
    "supposed",
    "point",
    "reading",
    "code",
    "understanding",
    "supposed",
    "lot",
    "difficult",
    "lot",
    "one",
    "reasons",
    "people",
    "add",
    "comments",
    "another",
    "way",
    "use",
    "doc",
    "string",
    "let",
    "show",
    "doc",
    "string",
    "looks",
    "like",
    "utility",
    "doc",
    "strings",
    "follow",
    "conventions",
    "processed",
    "automatically",
    "would",
    "define",
    "doc",
    "string",
    "function",
    "basically",
    "putting",
    "three",
    "quotation",
    "marks",
    "three",
    "quotation",
    "marks",
    "description",
    "function",
    "would",
    "define",
    "doc",
    "string",
    "class",
    "method",
    "got",
    "class",
    "class",
    "method",
    "also",
    "common",
    "add",
    "docs",
    "place",
    "doc",
    "string",
    "top",
    "file",
    "put",
    "doc",
    "string",
    "top",
    "file",
    "going",
    "look",
    "like",
    "going",
    "explain",
    "file",
    "docs",
    "stock",
    "strings",
    "also",
    "span",
    "multiple",
    "lines",
    "like",
    "multiple",
    "line",
    "docs",
    "string",
    "long",
    "three",
    "quarts",
    "three",
    "quarters",
    "top",
    "three",
    "quarts",
    "bottom",
    "python",
    "process",
    "doc",
    "strings",
    "use",
    "help",
    "global",
    "function",
    "get",
    "documentation",
    "class",
    "method",
    "function",
    "module",
    "example",
    "going",
    "go",
    "bottom",
    "going",
    "say",
    "print",
    "help",
    "going",
    "type",
    "dog",
    "run",
    "let",
    "run",
    "going",
    "get",
    "information",
    "dog",
    "know",
    "dog",
    "name",
    "age",
    "class",
    "representing",
    "dog",
    "specific",
    "methods",
    "says",
    "get",
    "information",
    "data",
    "descriptors",
    "defined",
    "going",
    "give",
    "us",
    "information",
    "dog",
    "good",
    "use",
    "doc",
    "strings",
    "specific",
    "standards",
    "makes",
    "easier",
    "get",
    "information",
    "using",
    "different",
    "helper",
    "methods",
    "standards",
    "allow",
    "standards",
    "allow",
    "us",
    "tools",
    "extract",
    "doc",
    "strings",
    "automatically",
    "generate",
    "documentation",
    "code",
    "besides",
    "help",
    "functions",
    "lot",
    "methods",
    "pull",
    "docs",
    "strings",
    "get",
    "information",
    "code",
    "next",
    "learn",
    "annotations",
    "python",
    "dynamically",
    "typed",
    "specify",
    "type",
    "variable",
    "function",
    "parameter",
    "function",
    "return",
    "value",
    "annotations",
    "allow",
    "us",
    "optionally",
    "want",
    "actually",
    "show",
    "type",
    "expecting",
    "different",
    "values",
    "function",
    "without",
    "annotations",
    "would",
    "make",
    "annotations",
    "uh",
    "want",
    "make",
    "function",
    "accept",
    "int",
    "going",
    "put",
    "colon",
    "int",
    "going",
    "put",
    "actually",
    "colon",
    "going",
    "put",
    "little",
    "arrow",
    "going",
    "put",
    "int",
    "specifying",
    "function",
    "receives",
    "int",
    "also",
    "going",
    "return",
    "end",
    "thing",
    "variables",
    "variable",
    "variable",
    "called",
    "count",
    "equal",
    "zero",
    "add",
    "annotation",
    "make",
    "int",
    "like",
    "specifying",
    "variable",
    "going",
    "integer",
    "python",
    "actually",
    "ignore",
    "annotations",
    "separate",
    "tool",
    "called",
    "mypi",
    "run",
    "standalone",
    "integrated",
    "ides",
    "automatically",
    "check",
    "type",
    "errors",
    "statically",
    "coding",
    "also",
    "help",
    "catch",
    "tight",
    "mismatched",
    "bugs",
    "even",
    "running",
    "code",
    "great",
    "help",
    "especially",
    "software",
    "becomes",
    "large",
    "need",
    "refactor",
    "code",
    "okay",
    "talk",
    "exceptions",
    "music",
    "important",
    "way",
    "handle",
    "errors",
    "python",
    "gives",
    "us",
    "exception",
    "handling",
    "exception",
    "handling",
    "would",
    "wrap",
    "lines",
    "code",
    "try",
    "block",
    "inside",
    "block",
    "put",
    "lines",
    "code",
    "error",
    "occurs",
    "python",
    "alert",
    "determine",
    "kind",
    "error",
    "occurred",
    "using",
    "accept",
    "block",
    "trying",
    "lines",
    "code",
    "checking",
    "specific",
    "error",
    "error",
    "happens",
    "would",
    "handle",
    "error",
    "different",
    "error",
    "happens",
    "handle",
    "different",
    "error",
    "also",
    "catch",
    "exceptions",
    "using",
    "accept",
    "without",
    "error",
    "type",
    "end",
    "could",
    "accept",
    "error",
    "type",
    "going",
    "handle",
    "rest",
    "exceptions",
    "make",
    "clear",
    "example",
    "says",
    "air",
    "one",
    "put",
    "specific",
    "error",
    "spot",
    "also",
    "put",
    "else",
    "block",
    "end",
    "handle",
    "run",
    "exceptions",
    "found",
    "errors",
    "code",
    "right",
    "else",
    "run",
    "specific",
    "code",
    "bottom",
    "runs",
    "errors",
    "finally",
    "block",
    "anything",
    "finally",
    "block",
    "going",
    "always",
    "run",
    "end",
    "whether",
    "exceptions",
    "exceptions",
    "code",
    "final",
    "block",
    "always",
    "going",
    "run",
    "specific",
    "error",
    "going",
    "occur",
    "depends",
    "operation",
    "performing",
    "example",
    "reading",
    "file",
    "might",
    "get",
    "eof",
    "error",
    "would",
    "look",
    "like",
    "eof",
    "error",
    "means",
    "end",
    "file",
    "divide",
    "number",
    "zero",
    "get",
    "zero",
    "division",
    "error",
    "type",
    "conversion",
    "issue",
    "might",
    "get",
    "type",
    "error",
    "let",
    "try",
    "code",
    "going",
    "delete",
    "result",
    "equals",
    "2",
    "divided",
    "0",
    "print",
    "result",
    "run",
    "see",
    "error",
    "zero",
    "division",
    "error",
    "division",
    "zero",
    "going",
    "get",
    "error",
    "run",
    "code",
    "whenever",
    "error",
    "anything",
    "error",
    "occurs",
    "happen",
    "going",
    "print",
    "result",
    "line",
    "resulted",
    "error",
    "going",
    "run",
    "following",
    "line",
    "code",
    "let",
    "try",
    "adding",
    "operation",
    "try",
    "block",
    "going",
    "paste",
    "putting",
    "operation",
    "try",
    "block",
    "expecting",
    "zero",
    "division",
    "error",
    "print",
    "divide",
    "zero",
    "finally",
    "set",
    "result",
    "one",
    "print",
    "results",
    "let",
    "run",
    "code",
    "see",
    "divide",
    "zero",
    "print",
    "one",
    "set",
    "final",
    "block",
    "try",
    "block",
    "lets",
    "us",
    "recover",
    "gracefully",
    "move",
    "program",
    "raise",
    "exceptions",
    "code",
    "using",
    "raise",
    "statement",
    "could",
    "type",
    "raise",
    "raise",
    "exception",
    "intentionally",
    "error",
    "run",
    "say",
    "error",
    "typed",
    "make",
    "say",
    "anything",
    "want",
    "error",
    "raises",
    "general",
    "exception",
    "intercept",
    "like",
    "could",
    "say",
    "try",
    "raise",
    "exception",
    "accept",
    "exception",
    "error",
    "print",
    "error",
    "okay",
    "run",
    "instead",
    "see",
    "red",
    "anymore",
    "stopping",
    "program",
    "error",
    "printing",
    "error",
    "message",
    "right",
    "like",
    "also",
    "define",
    "exception",
    "class",
    "extending",
    "exception",
    "could",
    "class",
    "dog",
    "found",
    "music",
    "exception",
    "extend",
    "exception",
    "music",
    "put",
    "pass",
    "one",
    "let",
    "adjust",
    "pass",
    "means",
    "nothing",
    "must",
    "use",
    "define",
    "class",
    "without",
    "methods",
    "function",
    "without",
    "code",
    "going",
    "put",
    "anything",
    "example",
    "put",
    "pass",
    "mean",
    "going",
    "code",
    "try",
    "paste",
    "uh",
    "going",
    "raise",
    "dog",
    "found",
    "exception",
    "going",
    "candle",
    "exception",
    "print",
    "dog",
    "found",
    "let",
    "try",
    "yep",
    "dog",
    "nut",
    "bound",
    "raised",
    "exception",
    "also",
    "actually",
    "something",
    "exception",
    "say",
    "print",
    "inside",
    "going",
    "run",
    "inside",
    "dog",
    "bound",
    "statement",
    "helpful",
    "simplify",
    "working",
    "exception",
    "handling",
    "example",
    "working",
    "files",
    "time",
    "open",
    "file",
    "must",
    "remember",
    "close",
    "makes",
    "process",
    "transparent",
    "let",
    "show",
    "example",
    "code",
    "without",
    "statement",
    "going",
    "go",
    "lot",
    "details",
    "working",
    "files",
    "want",
    "kind",
    "give",
    "one",
    "quick",
    "example",
    "going",
    "working",
    "files",
    "python",
    "open",
    "file",
    "read",
    "file",
    "print",
    "content",
    "file",
    "going",
    "try",
    "could",
    "exception",
    "finally",
    "always",
    "going",
    "make",
    "sure",
    "close",
    "file",
    "alternate",
    "way",
    "would",
    "like",
    "um",
    "going",
    "open",
    "file",
    "file",
    "content",
    "print",
    "content",
    "using",
    "going",
    "make",
    "sure",
    "automatically",
    "close",
    "file",
    "end",
    "words",
    "implicit",
    "exception",
    "handling",
    "close",
    "called",
    "automatically",
    "us",
    "lot",
    "stuff",
    "well",
    "example",
    "meant",
    "introduce",
    "capabilities",
    "let",
    "talk",
    "packages",
    "going",
    "talk",
    "pip",
    "let",
    "learn",
    "install",
    "packages",
    "python",
    "using",
    "pip",
    "python",
    "standard",
    "library",
    "contains",
    "huge",
    "number",
    "utilities",
    "simplify",
    "python",
    "development",
    "needs",
    "nothing",
    "satisfy",
    "everything",
    "individuals",
    "companies",
    "create",
    "packages",
    "make",
    "available",
    "open",
    "source",
    "software",
    "entire",
    "community",
    "modules",
    "collected",
    "single",
    "place",
    "called",
    "python",
    "package",
    "index",
    "available",
    "available",
    "pi",
    "installed",
    "system",
    "using",
    "pip",
    "270",
    "000",
    "packages",
    "freely",
    "available",
    "computers",
    "already",
    "going",
    "pip",
    "installed",
    "already",
    "pip",
    "installed",
    "let",
    "show",
    "would",
    "install",
    "package",
    "go",
    "shell",
    "replit",
    "terminal",
    "going",
    "clear",
    "going",
    "pip",
    "install",
    "put",
    "name",
    "package",
    "instance",
    "one",
    "popular",
    "package",
    "called",
    "request",
    "package",
    "http",
    "library",
    "requests",
    "let",
    "see",
    "make",
    "sure",
    "spelled",
    "right",
    "music",
    "going",
    "install",
    "package",
    "right",
    "install",
    "package",
    "going",
    "available",
    "python",
    "scripts",
    "packages",
    "installed",
    "globally",
    "exact",
    "location",
    "depends",
    "operating",
    "system",
    "also",
    "upgrade",
    "package",
    "latest",
    "version",
    "pip",
    "install",
    "dash",
    "u",
    "put",
    "package",
    "name",
    "case",
    "request",
    "going",
    "update",
    "latest",
    "version",
    "case",
    "updated",
    "also",
    "specify",
    "specific",
    "version",
    "installing",
    "also",
    "uninstall",
    "package",
    "pip",
    "uninstall",
    "requests",
    "say",
    "yes",
    "want",
    "uninstall",
    "package",
    "installed",
    "going",
    "install",
    "request",
    "always",
    "make",
    "sure",
    "spell",
    "right",
    "installed",
    "pip",
    "show",
    "requests",
    "going",
    "show",
    "information",
    "package",
    "see",
    "see",
    "name",
    "version",
    "uh",
    "summary",
    "bunch",
    "author",
    "bunch",
    "information",
    "package",
    "okay",
    "clear",
    "actually",
    "gon",
    "na",
    "backtrack",
    "little",
    "bit",
    "already",
    "talked",
    "lists",
    "gon",
    "na",
    "talk",
    "advanced",
    "way",
    "using",
    "lists",
    "called",
    "list",
    "compression",
    "list",
    "compressions",
    "list",
    "compressions",
    "way",
    "create",
    "lists",
    "concise",
    "way",
    "suppose",
    "list",
    "like",
    "list",
    "numbers",
    "one",
    "two",
    "three",
    "four",
    "five",
    "create",
    "new",
    "list",
    "using",
    "list",
    "compression",
    "composed",
    "numbers",
    "list",
    "elements",
    "power",
    "let",
    "show",
    "mean",
    "let",
    "get",
    "make",
    "new",
    "list",
    "numbers",
    "power",
    "music",
    "2",
    "equals",
    "let",
    "show",
    "list",
    "compression",
    "list",
    "compression",
    "syntax",
    "print",
    "music",
    "see",
    "every",
    "element",
    "list",
    "power",
    "two",
    "list",
    "compressions",
    "syntax",
    "sometimes",
    "preferred",
    "loops",
    "readable",
    "operation",
    "written",
    "single",
    "line",
    "instance",
    "would",
    "uh",
    "loop",
    "single",
    "line",
    "take",
    "lines",
    "method",
    "loop",
    "list",
    "compression",
    "makes",
    "simpler",
    "thing",
    "map",
    "well",
    "little",
    "complex",
    "sometimes",
    "simpler",
    "use",
    "list",
    "compression",
    "using",
    "syntax",
    "let",
    "talk",
    "advanced",
    "topics",
    "regards",
    "functions",
    "polymorphism",
    "polymorphism",
    "generalizes",
    "functionality",
    "work",
    "different",
    "types",
    "important",
    "concept",
    "object",
    "oriented",
    "programming",
    "see",
    "defined",
    "method",
    "different",
    "classes",
    "dog",
    "eat",
    "cat",
    "also",
    "eat",
    "method",
    "generate",
    "objects",
    "call",
    "eat",
    "method",
    "regardless",
    "class",
    "object",
    "belongs",
    "get",
    "different",
    "results",
    "create",
    "two",
    "objects",
    "dog",
    "cat",
    "calling",
    "eat",
    "method",
    "objects",
    "run",
    "see",
    "getting",
    "eating",
    "cat",
    "dog",
    "food",
    "eating",
    "cat",
    "food",
    "could",
    "lot",
    "things",
    "like",
    "maybe",
    "list",
    "different",
    "animals",
    "loop",
    "list",
    "call",
    "eat",
    "function",
    "eat",
    "method",
    "animal",
    "list",
    "exact",
    "class",
    "able",
    "still",
    "run",
    "eat",
    "method",
    "build",
    "generalized",
    "interface",
    "need",
    "know",
    "animal",
    "cat",
    "dog",
    "need",
    "know",
    "call",
    "eat",
    "let",
    "talk",
    "operator",
    "overloading",
    "music",
    "operator",
    "overloading",
    "advanced",
    "technique",
    "use",
    "make",
    "classes",
    "comparable",
    "make",
    "work",
    "python",
    "operators",
    "let",
    "take",
    "class",
    "dog",
    "dog",
    "class",
    "create",
    "dog",
    "name",
    "age",
    "create",
    "two",
    "dog",
    "objects",
    "roger",
    "equals",
    "dog",
    "pass",
    "name",
    "eight",
    "music",
    "make",
    "another",
    "one",
    "use",
    "operator",
    "overloading",
    "add",
    "custom",
    "way",
    "compare",
    "two",
    "objects",
    "based",
    "age",
    "property",
    "like",
    "could",
    "compare",
    "dog",
    "dog",
    "well",
    "make",
    "possible",
    "operator",
    "overloading",
    "let",
    "show",
    "example",
    "function",
    "gt",
    "going",
    "compare",
    "things",
    "figure",
    "greater",
    "able",
    "compare",
    "two",
    "dog",
    "objects",
    "see",
    "one",
    "greater",
    "going",
    "figure",
    "greater",
    "return",
    "true",
    "greater",
    "dot",
    "age",
    "one",
    "comparing",
    "else",
    "false",
    "print",
    "roger",
    "greater",
    "sid",
    "trying",
    "figure",
    "true",
    "false",
    "run",
    "going",
    "say",
    "true",
    "roger",
    "greater",
    "sid",
    "8",
    "bigger",
    "like",
    "put",
    "9",
    "run",
    "going",
    "false",
    "way",
    "define",
    "underscore",
    "underscore",
    "gt",
    "underscore",
    "means",
    "greater",
    "also",
    "define",
    "methods",
    "like",
    "less",
    "lower",
    "equal",
    "greater",
    "equal",
    "equal",
    "also",
    "create",
    "methods",
    "go",
    "different",
    "arithmetic",
    "operators",
    "add",
    "subtract",
    "multiply",
    "division",
    "floor",
    "division",
    "mod",
    "power",
    "see",
    "different",
    "ones",
    "make",
    "respond",
    "different",
    "operators",
    "example",
    "greater",
    "operator",
    "make",
    "functions",
    "show",
    "going",
    "respond",
    "different",
    "operators",
    "even",
    "methods",
    "work",
    "operators",
    "get",
    "idea",
    "learned",
    "lot",
    "python",
    "going",
    "bring",
    "lot",
    "learned",
    "together",
    "code",
    "blackjack",
    "card",
    "game",
    "process",
    "learn",
    "object",
    "oriented",
    "programming",
    "python",
    "start",
    "creating",
    "new",
    "python",
    "project",
    "replit",
    "going",
    "close",
    "tab",
    "zoom",
    "bit",
    "like",
    "first",
    "project",
    "going",
    "say",
    "want",
    "see",
    "show",
    "learned",
    "far",
    "lot",
    "probably",
    "going",
    "able",
    "figure",
    "give",
    "instructions",
    "without",
    "even",
    "seeing",
    "come",
    "back",
    "video",
    "see",
    "guess",
    "watch",
    "even",
    "try",
    "going",
    "learn",
    "lot",
    "try",
    "code",
    "along",
    "right",
    "different",
    "steps",
    "first",
    "thing",
    "going",
    "create",
    "variable",
    "called",
    "suit",
    "set",
    "equal",
    "hearts",
    "variable",
    "called",
    "rank",
    "set",
    "equal",
    "k",
    "king",
    "variable",
    "called",
    "value",
    "set",
    "equal",
    "10",
    "music",
    "okay",
    "simple",
    "two",
    "variables",
    "equal",
    "strings",
    "one",
    "variable",
    "equal",
    "int",
    "going",
    "add",
    "print",
    "statement",
    "print",
    "phrase",
    "card",
    "colon",
    "end",
    "add",
    "another",
    "print",
    "statement",
    "print",
    "rank",
    "printing",
    "variable",
    "going",
    "lot",
    "refactoring",
    "create",
    "program",
    "let",
    "refactor",
    "one",
    "print",
    "statement",
    "going",
    "print",
    "card",
    "colon",
    "space",
    "rank",
    "going",
    "string",
    "concatenation",
    "music",
    "like",
    "concatenate",
    "many",
    "strings",
    "variables",
    "want",
    "let",
    "update",
    "code",
    "print",
    "function",
    "print",
    "prints",
    "card",
    "k",
    "hearts",
    "need",
    "add",
    "make",
    "sure",
    "put",
    "spaces",
    "side",
    "word",
    "suit",
    "let",
    "adjust",
    "okay",
    "know",
    "use",
    "list",
    "python",
    "store",
    "multiple",
    "values",
    "items",
    "time",
    "suit",
    "variable",
    "create",
    "suits",
    "variable",
    "assign",
    "list",
    "suits",
    "case",
    "spades",
    "clubs",
    "hearts",
    "diamonds",
    "learned",
    "use",
    "bracket",
    "operator",
    "access",
    "specific",
    "element",
    "list",
    "number",
    "inside",
    "bracket",
    "specifies",
    "index",
    "list",
    "access",
    "remember",
    "indexes",
    "start",
    "zero",
    "update",
    "suit",
    "variable",
    "value",
    "hearts",
    "come",
    "comes",
    "suits",
    "list",
    "practice",
    "loop",
    "add",
    "loop",
    "end",
    "code",
    "prints",
    "suit",
    "test",
    "really",
    "hope",
    "actually",
    "following",
    "along",
    "trying",
    "right",
    "show",
    "going",
    "learn",
    "best",
    "spades",
    "clubs",
    "hearts",
    "diamonds",
    "next",
    "thing",
    "see",
    "going",
    "part",
    "final",
    "code",
    "right",
    "loop",
    "added",
    "see",
    "add",
    "another",
    "item",
    "suits",
    "list",
    "string",
    "snakes",
    "different",
    "ways",
    "use",
    "append",
    "snakes",
    "going",
    "append",
    "word",
    "snakes",
    "end",
    "list",
    "run",
    "see",
    "snakes",
    "bottom",
    "okay",
    "going",
    "start",
    "process",
    "representing",
    "full",
    "deck",
    "cards",
    "python",
    "code",
    "going",
    "actually",
    "get",
    "rid",
    "lot",
    "going",
    "get",
    "rid",
    "going",
    "suits",
    "going",
    "loop",
    "bottom",
    "going",
    "lot",
    "refactoring",
    "go",
    "mainly",
    "educational",
    "purposes",
    "also",
    "get",
    "really",
    "good",
    "blackjack",
    "game",
    "list",
    "suits",
    "going",
    "create",
    "list",
    "ranks",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "j",
    "q",
    "k",
    "music",
    "suits",
    "list",
    "create",
    "new",
    "variable",
    "called",
    "cards",
    "assign",
    "empty",
    "list",
    "variable",
    "empty",
    "list",
    "two",
    "brackets",
    "nothing",
    "inside",
    "cards",
    "list",
    "item",
    "card",
    "deck",
    "item",
    "suits",
    "list",
    "combined",
    "item",
    "ranks",
    "list",
    "total",
    "52",
    "items",
    "cards",
    "let",
    "work",
    "way",
    "first",
    "update",
    "print",
    "statement",
    "loop",
    "prints",
    "list",
    "two",
    "elements",
    "first",
    "element",
    "suit",
    "second",
    "first",
    "element",
    "ranks",
    "lists",
    "print",
    "ace",
    "every",
    "suit",
    "going",
    "update",
    "going",
    "list",
    "suit",
    "ranks",
    "first",
    "item",
    "going",
    "index",
    "zero",
    "let",
    "print",
    "got",
    "four",
    "right",
    "instead",
    "printing",
    "ace",
    "every",
    "suit",
    "let",
    "print",
    "every",
    "rank",
    "every",
    "suit",
    "done",
    "easily",
    "loop",
    "nested",
    "within",
    "another",
    "loop",
    "inside",
    "loop",
    "add",
    "another",
    "loop",
    "loops",
    "ranks",
    "update",
    "print",
    "statement",
    "printing",
    "first",
    "element",
    "ranks",
    "list",
    "printing",
    "rank",
    "loop",
    "let",
    "show",
    "mean",
    "going",
    "four",
    "rank",
    "ranks",
    "make",
    "sure",
    "indent",
    "print",
    "statement",
    "inside",
    "loop",
    "going",
    "rank",
    "going",
    "print",
    "suit",
    "rank",
    "run",
    "nested",
    "loop",
    "every",
    "card",
    "every",
    "rank",
    "every",
    "suit",
    "52",
    "cards",
    "printed",
    "two",
    "item",
    "lists",
    "element",
    "list",
    "another",
    "list",
    "instead",
    "printing",
    "52",
    "two",
    "item",
    "lists",
    "let",
    "append",
    "52",
    "cards",
    "cards",
    "list",
    "already",
    "cards",
    "list",
    "empty",
    "going",
    "cards",
    "dot",
    "append",
    "appending",
    "item",
    "items",
    "cards",
    "list",
    "let",
    "check",
    "cards",
    "list",
    "looks",
    "like",
    "printing",
    "printing",
    "bottom",
    "remember",
    "make",
    "sure",
    "indented",
    "print",
    "cards",
    "run",
    "list",
    "one",
    "comma",
    "item",
    "list",
    "may",
    "notice",
    "cards",
    "order",
    "cards",
    "lists",
    "game",
    "like",
    "though",
    "cards",
    "must",
    "shuffled",
    "help",
    "import",
    "random",
    "module",
    "top",
    "code",
    "import",
    "random",
    "music",
    "able",
    "use",
    "random",
    "module",
    "going",
    "import",
    "random",
    "module",
    "contains",
    "variety",
    "things",
    "related",
    "random",
    "number",
    "generation",
    "probably",
    "remember",
    "import",
    "python",
    "module",
    "allows",
    "use",
    "additional",
    "commands",
    "code",
    "specifically",
    "going",
    "using",
    "function",
    "right",
    "end",
    "says",
    "print",
    "cards",
    "going",
    "call",
    "pass",
    "cards",
    "list",
    "function",
    "play",
    "run",
    "program",
    "see",
    "order",
    "anymore",
    "see",
    "ace",
    "spades",
    "three",
    "spades",
    "king",
    "diamonds",
    "jack",
    "hearts",
    "longer",
    "order",
    "shuffled",
    "let",
    "remove",
    "single",
    "element",
    "cards",
    "list",
    "similar",
    "dealing",
    "card",
    "deck",
    "done",
    "pop",
    "method",
    "cards",
    "shuffled",
    "let",
    "create",
    "another",
    "card",
    "variable",
    "pop",
    "card",
    "cards",
    "list",
    "put",
    "variable",
    "called",
    "card",
    "print",
    "card",
    "card",
    "equals",
    "cards",
    "dot",
    "pop",
    "instead",
    "printing",
    "cards",
    "going",
    "print",
    "single",
    "card",
    "run",
    "program",
    "see",
    "every",
    "time",
    "run",
    "program",
    "see",
    "getting",
    "different",
    "card",
    "dealing",
    "different",
    "card",
    "shuffled",
    "already",
    "learned",
    "functions",
    "going",
    "create",
    "function",
    "create",
    "function",
    "called",
    "shuffle",
    "single",
    "line",
    "shuffles",
    "cards",
    "def",
    "shuffle",
    "make",
    "sure",
    "indented",
    "call",
    "shuffle",
    "function",
    "shuffle",
    "cards",
    "right",
    "print",
    "statement",
    "call",
    "shuffle",
    "function",
    "instead",
    "printing",
    "single",
    "card",
    "print",
    "cards",
    "shuffle",
    "print",
    "cards",
    "let",
    "try",
    "program",
    "see",
    "problem",
    "put",
    "colon",
    "important",
    "part",
    "creating",
    "function",
    "putting",
    "colon",
    "create",
    "another",
    "function",
    "called",
    "deal",
    "put",
    "line",
    "inside",
    "deal",
    "function",
    "going",
    "define",
    "deal",
    "put",
    "colon",
    "time",
    "make",
    "sure",
    "indent",
    "see",
    "orange",
    "squiggly",
    "line",
    "underneath",
    "variables",
    "accessed",
    "context",
    "created",
    "card",
    "variable",
    "available",
    "outside",
    "deal",
    "function",
    "get",
    "value",
    "function",
    "returning",
    "result",
    "using",
    "return",
    "statement",
    "end",
    "going",
    "return",
    "card",
    "okay",
    "taken",
    "care",
    "squiggly",
    "line",
    "shuffle",
    "function",
    "called",
    "call",
    "deal",
    "function",
    "assign",
    "return",
    "value",
    "variable",
    "named",
    "card",
    "update",
    "print",
    "function",
    "print",
    "card",
    "instead",
    "cards",
    "card",
    "equals",
    "deal",
    "print",
    "card",
    "see",
    "different",
    "card",
    "every",
    "time",
    "run",
    "program",
    "want",
    "deal",
    "function",
    "deal",
    "one",
    "card",
    "well",
    "let",
    "refactor",
    "deal",
    "function",
    "accept",
    "accept",
    "argument",
    "number",
    "arguments",
    "appear",
    "inside",
    "parentheses",
    "function",
    "created",
    "separated",
    "commas",
    "inside",
    "function",
    "arguments",
    "assigned",
    "variables",
    "called",
    "parameters",
    "start",
    "making",
    "start",
    "making",
    "deal",
    "function",
    "takes",
    "argument",
    "named",
    "number",
    "make",
    "sure",
    "call",
    "function",
    "use",
    "new",
    "parameter",
    "making",
    "gon",
    "na",
    "deal",
    "two",
    "gon",
    "na",
    "put",
    "number",
    "gon",
    "na",
    "gon",
    "na",
    "deal",
    "number",
    "cards",
    "gon",
    "na",
    "deal",
    "two",
    "say",
    "instead",
    "one",
    "card",
    "anymore",
    "going",
    "update",
    "cards",
    "dealt",
    "special",
    "shortcut",
    "either",
    "going",
    "command",
    "control",
    "actually",
    "selecting",
    "card",
    "two",
    "different",
    "times",
    "see",
    "multiple",
    "cursors",
    "basically",
    "selected",
    "word",
    "double",
    "clicked",
    "select",
    "word",
    "command",
    "control",
    "selecting",
    "two",
    "words",
    "type",
    "cards",
    "delt",
    "type",
    "two",
    "places",
    "one",
    "time",
    "cool",
    "thing",
    "replit",
    "many",
    "code",
    "editors",
    "run",
    "program",
    "still",
    "deal",
    "one",
    "card",
    "even",
    "though",
    "passing",
    "parameter",
    "anything",
    "yet",
    "want",
    "update",
    "deal",
    "function",
    "going",
    "return",
    "list",
    "cards",
    "instead",
    "single",
    "card",
    "first",
    "line",
    "function",
    "create",
    "empty",
    "list",
    "named",
    "cards",
    "delt",
    "update",
    "last",
    "line",
    "function",
    "return",
    "cards",
    "dealt",
    "instead",
    "return",
    "card",
    "let",
    "really",
    "quick",
    "going",
    "cards",
    "dealt",
    "going",
    "equal",
    "empty",
    "list",
    "copy",
    "paste",
    "right",
    "remember",
    "use",
    "range",
    "function",
    "loop",
    "talked",
    "earlier",
    "course",
    "briefly",
    "touched",
    "let",
    "create",
    "loop",
    "going",
    "add",
    "card",
    "deck",
    "card",
    "dealt",
    "creating",
    "loop",
    "x",
    "range",
    "number",
    "common",
    "thing",
    "going",
    "python",
    "creating",
    "loop",
    "going",
    "range",
    "number",
    "going",
    "loop",
    "many",
    "times",
    "going",
    "loop",
    "many",
    "times",
    "number",
    "passed",
    "going",
    "things",
    "loop",
    "first",
    "going",
    "actually",
    "already",
    "card",
    "equal",
    "cards",
    "dot",
    "pop",
    "cards",
    "delt",
    "dot",
    "append",
    "card",
    "card",
    "popped",
    "deck",
    "appending",
    "card",
    "delt",
    "returning",
    "cards",
    "dealt",
    "code",
    "let",
    "separate",
    "single",
    "card",
    "two",
    "cards",
    "dealt",
    "let",
    "create",
    "variable",
    "called",
    "card",
    "set",
    "equal",
    "first",
    "item",
    "cards",
    "delt",
    "list",
    "print",
    "card",
    "instead",
    "cards",
    "dealt",
    "going",
    "card",
    "equals",
    "cards",
    "delt",
    "use",
    "brackets",
    "put",
    "0",
    "get",
    "first",
    "item",
    "list",
    "print",
    "card",
    "going",
    "test",
    "program",
    "still",
    "seeing",
    "single",
    "card",
    "lot",
    "behind",
    "scenes",
    "let",
    "separate",
    "rank",
    "part",
    "single",
    "card",
    "create",
    "card",
    "let",
    "create",
    "variable",
    "named",
    "rank",
    "assign",
    "rank",
    "card",
    "rank",
    "equals",
    "card",
    "get",
    "index",
    "one",
    "rank",
    "nine",
    "second",
    "item",
    "card",
    "rank",
    "rank",
    "different",
    "value",
    "blackjack",
    "value",
    "ace",
    "program",
    "11",
    "sometimes",
    "actually",
    "one",
    "going",
    "11",
    "1",
    "get",
    "one",
    "part",
    "later",
    "jack",
    "j",
    "q",
    "k",
    "jack",
    "queen",
    "king",
    "value",
    "10",
    "numbers",
    "value",
    "number",
    "need",
    "check",
    "rank",
    "set",
    "value",
    "depending",
    "rank",
    "perfect",
    "time",
    "conditional",
    "statement",
    "specifically",
    "statement",
    "final",
    "print",
    "statement",
    "program",
    "going",
    "add",
    "statement",
    "check",
    "rank",
    "equals",
    "assign",
    "11",
    "variable",
    "named",
    "value",
    "rank",
    "hope",
    "remember",
    "flying",
    "along",
    "hope",
    "remember",
    "use",
    "two",
    "equal",
    "signs",
    "instead",
    "one",
    "equal",
    "sign",
    "rank",
    "equals",
    "value",
    "going",
    "equal",
    "single",
    "equal",
    "sign",
    "going",
    "equal",
    "rank",
    "equal",
    "want",
    "check",
    "equals",
    "j",
    "q",
    "k",
    "done",
    "elif",
    "statement",
    "create",
    "statement",
    "check",
    "rank",
    "equals",
    "j",
    "set",
    "value",
    "talked",
    "three",
    "logical",
    "operators",
    "use",
    "three",
    "operators",
    "conditional",
    "statements",
    "check",
    "multiple",
    "conditions",
    "want",
    "check",
    "rank",
    "j",
    "rank",
    "q",
    "rank",
    "k",
    "update",
    "code",
    "ors",
    "number",
    "ls",
    "statements",
    "statement",
    "end",
    "single",
    "else",
    "statement",
    "like",
    "discussed",
    "else",
    "going",
    "none",
    "ones",
    "true",
    "let",
    "add",
    "else",
    "statement",
    "inside",
    "assign",
    "rank",
    "value",
    "already",
    "gotten",
    "letters",
    "way",
    "rest",
    "numbers",
    "assign",
    "directly",
    "value",
    "instead",
    "printing",
    "card",
    "end",
    "let",
    "print",
    "rank",
    "value",
    "type",
    "rank",
    "comma",
    "value",
    "multiple",
    "values",
    "print",
    "statement",
    "listed",
    "comma",
    "separating",
    "values",
    "printed",
    "space",
    "let",
    "test",
    "times",
    "q10",
    "five",
    "five",
    "6",
    "6",
    "see",
    "every",
    "time",
    "press",
    "going",
    "random",
    "rank",
    "value",
    "already",
    "talked",
    "dictionaries",
    "python",
    "like",
    "list",
    "general",
    "think",
    "dictionary",
    "mapping",
    "set",
    "indices",
    "called",
    "keys",
    "values",
    "key",
    "value",
    "pairs",
    "key",
    "maps",
    "value",
    "print",
    "statement",
    "let",
    "create",
    "variable",
    "called",
    "rank",
    "underscore",
    "dict",
    "dictionary",
    "create",
    "dictionary",
    "two",
    "items",
    "key",
    "value",
    "pair",
    "rank",
    "key",
    "value",
    "pair",
    "value",
    "string",
    "rank",
    "actual",
    "rank",
    "variable",
    "string",
    "value",
    "actual",
    "value",
    "variable",
    "printing",
    "rank",
    "variable",
    "value",
    "variable",
    "let",
    "update",
    "code",
    "actually",
    "getting",
    "rank",
    "value",
    "rank",
    "dictionary",
    "right",
    "going",
    "copy",
    "pasted",
    "going",
    "use",
    "bracket",
    "notation",
    "put",
    "two",
    "brackets",
    "also",
    "surround",
    "quotation",
    "marks",
    "gon",
    "na",
    "put",
    "rank",
    "dictionary",
    "brackets",
    "quotation",
    "marks",
    "accessing",
    "key",
    "run",
    "program",
    "still",
    "thing",
    "lot",
    "complicated",
    "far",
    "code",
    "goes",
    "going",
    "good",
    "complicated",
    "code",
    "program",
    "going",
    "become",
    "complicated",
    "go",
    "writing",
    "program",
    "many",
    "ways",
    "almost",
    "everything",
    "going",
    "refactor",
    "code",
    "get",
    "value",
    "rank",
    "without",
    "using",
    "statement",
    "instead",
    "store",
    "rank",
    "name",
    "value",
    "ranks",
    "list",
    "using",
    "dictionaries",
    "let",
    "delete",
    "code",
    "lines",
    "code",
    "says",
    "shuffle",
    "know",
    "typed",
    "lot",
    "stuff",
    "kind",
    "practice",
    "going",
    "practice",
    "different",
    "method",
    "let",
    "create",
    "new",
    "card",
    "variable",
    "new",
    "variable",
    "called",
    "card",
    "end",
    "let",
    "assign",
    "card",
    "variable",
    "single",
    "card",
    "deal",
    "deck",
    "make",
    "sure",
    "card",
    "list",
    "little",
    "tricky",
    "gon",
    "na",
    "deal",
    "deal",
    "one",
    "card",
    "get",
    "first",
    "item",
    "going",
    "deal",
    "one",
    "card",
    "one",
    "card",
    "going",
    "deal",
    "going",
    "list",
    "want",
    "get",
    "first",
    "item",
    "list",
    "going",
    "item",
    "list",
    "put",
    "zero",
    "brackets",
    "get",
    "card",
    "list",
    "goes",
    "card",
    "variable",
    "going",
    "update",
    "ranks",
    "list",
    "ranks",
    "list",
    "element",
    "list",
    "dictionary",
    "lists",
    "list",
    "elements",
    "long",
    "common",
    "put",
    "element",
    "line",
    "going",
    "put",
    "element",
    "line",
    "element",
    "going",
    "rank",
    "value",
    "instance",
    "rank",
    "value",
    "11",
    "rank",
    "2",
    "value",
    "going",
    "look",
    "like",
    "actually",
    "going",
    "zoom",
    "little",
    "bit",
    "ranks",
    "one",
    "list",
    "dictionary",
    "element",
    "list",
    "dictionary",
    "okay",
    "updated",
    "let",
    "go",
    "print",
    "card",
    "see",
    "updated",
    "ranks",
    "list",
    "print",
    "card",
    "okay",
    "going",
    "look",
    "like",
    "coming",
    "list",
    "got",
    "suit",
    "rank",
    "also",
    "going",
    "value",
    "rank",
    "value",
    "see",
    "every",
    "time",
    "click",
    "get",
    "random",
    "item",
    "let",
    "update",
    "code",
    "instead",
    "printing",
    "whole",
    "card",
    "print",
    "value",
    "example",
    "value",
    "two",
    "want",
    "print",
    "value",
    "update",
    "see",
    "figure",
    "update",
    "line",
    "prints",
    "value",
    "number",
    "first",
    "see",
    "list",
    "need",
    "first",
    "element",
    "list",
    "second",
    "element",
    "wait",
    "start",
    "getting",
    "second",
    "element",
    "list",
    "index",
    "one",
    "object",
    "dictionary",
    "mean",
    "need",
    "get",
    "key",
    "value",
    "pair",
    "need",
    "value",
    "key",
    "get",
    "value",
    "key",
    "going",
    "put",
    "brackets",
    "going",
    "put",
    "value",
    "key",
    "value",
    "work",
    "let",
    "try",
    "okay",
    "nine",
    "seven",
    "see",
    "every",
    "time",
    "gon",
    "na",
    "give",
    "us",
    "value",
    "card",
    "start",
    "defining",
    "classes",
    "used",
    "order",
    "separate",
    "different",
    "aspects",
    "game",
    "classes",
    "may",
    "remember",
    "provide",
    "way",
    "bundling",
    "data",
    "functionality",
    "together",
    "creating",
    "new",
    "class",
    "creates",
    "new",
    "type",
    "object",
    "allowing",
    "new",
    "instances",
    "type",
    "made",
    "object",
    "contain",
    "number",
    "functions",
    "call",
    "methods",
    "well",
    "data",
    "used",
    "functions",
    "called",
    "attributes",
    "going",
    "use",
    "classes",
    "model",
    "three",
    "parts",
    "game",
    "card",
    "deck",
    "hand",
    "far",
    "mainly",
    "worked",
    "elements",
    "debt",
    "class",
    "right",
    "import",
    "statement",
    "top",
    "going",
    "make",
    "class",
    "class",
    "called",
    "dec",
    "going",
    "put",
    "everything",
    "written",
    "far",
    "class",
    "gon",
    "na",
    "class",
    "deck",
    "colon",
    "okay",
    "highlight",
    "everything",
    "gon",
    "na",
    "press",
    "tab",
    "put",
    "everything",
    "class",
    "deck",
    "everything",
    "indented",
    "little",
    "bit",
    "last",
    "lines",
    "code",
    "need",
    "delete",
    "testing",
    "class",
    "like",
    "template",
    "use",
    "class",
    "create",
    "instance",
    "class",
    "called",
    "object",
    "use",
    "instance",
    "instance",
    "keeps",
    "track",
    "state",
    "update",
    "instance",
    "created",
    "class",
    "wo",
    "impact",
    "objects",
    "created",
    "class",
    "soon",
    "see",
    "example",
    "make",
    "easier",
    "understand",
    "first",
    "let",
    "prepare",
    "class",
    "create",
    "instance",
    "create",
    "instance",
    "class",
    "python",
    "automatically",
    "calls",
    "function",
    "also",
    "called",
    "method",
    "clast",
    "named",
    "init",
    "remember",
    "already",
    "discussed",
    "earlier",
    "course",
    "contents",
    "init",
    "method",
    "code",
    "run",
    "one",
    "time",
    "initialize",
    "instance",
    "beginning",
    "class",
    "let",
    "create",
    "init",
    "function",
    "def",
    "underscore",
    "underscore",
    "init",
    "underscore",
    "underscore",
    "remember",
    "always",
    "pass",
    "self",
    "functions",
    "class",
    "gets",
    "referring",
    "instance",
    "class",
    "developed",
    "going",
    "indent",
    "code",
    "part",
    "shuffle",
    "deal",
    "function",
    "code",
    "part",
    "new",
    "function",
    "going",
    "highlight",
    "including",
    "suits",
    "press",
    "tab",
    "like",
    "said",
    "added",
    "self",
    "always",
    "methods",
    "class",
    "functions",
    "self",
    "anything",
    "inside",
    "parentheses",
    "remember",
    "called",
    "argument",
    "variables",
    "pass",
    "color",
    "functions",
    "said",
    "functions",
    "class",
    "receive",
    "self",
    "argument",
    "self",
    "represents",
    "instance",
    "class",
    "using",
    "self",
    "keyword",
    "function",
    "access",
    "attributes",
    "methods",
    "class",
    "let",
    "make",
    "sure",
    "add",
    "self",
    "first",
    "item",
    "parentheses",
    "functions",
    "going",
    "add",
    "self",
    "see",
    "already",
    "number",
    "going",
    "hit",
    "self",
    "beginning",
    "still",
    "call",
    "function",
    "single",
    "number",
    "going",
    "also",
    "get",
    "reference",
    "instance",
    "want",
    "notice",
    "cards",
    "underlying",
    "red",
    "made",
    "class",
    "could",
    "access",
    "cards",
    "variable",
    "let",
    "fix",
    "inside",
    "class",
    "order",
    "access",
    "variable",
    "multiple",
    "functions",
    "also",
    "called",
    "methods",
    "variable",
    "start",
    "self",
    "dot",
    "going",
    "change",
    "instances",
    "cards",
    "every",
    "function",
    "starting",
    "self",
    "dot",
    "cards",
    "going",
    "make",
    "access",
    "places",
    "change",
    "self",
    "dot",
    "cards",
    "self",
    "dot",
    "cards",
    "self",
    "dot",
    "cards",
    "variable",
    "specifically",
    "associated",
    "instance",
    "deck",
    "created",
    "access",
    "methods",
    "okay",
    "create",
    "instance",
    "also",
    "called",
    "object",
    "deck",
    "class",
    "end",
    "code",
    "let",
    "create",
    "variable",
    "called",
    "deck",
    "1",
    "make",
    "instance",
    "deck",
    "class",
    "make",
    "sure",
    "indented",
    "deck",
    "1",
    "equals",
    "deck",
    "go",
    "since",
    "created",
    "cards",
    "access",
    "access",
    "cards",
    "instance",
    "class",
    "let",
    "print",
    "cards",
    "deck",
    "one",
    "print",
    "deck",
    "one",
    "dot",
    "cards",
    "try",
    "see",
    "list",
    "cards",
    "suit",
    "rank",
    "value",
    "card",
    "underneath",
    "created",
    "deck",
    "one",
    "let",
    "create",
    "deck",
    "two",
    "create",
    "another",
    "instance",
    "another",
    "deck",
    "music",
    "call",
    "methods",
    "instances",
    "see",
    "methods",
    "shuffle",
    "deal",
    "deck",
    "2",
    "right",
    "create",
    "deck",
    "2",
    "let",
    "shuffle",
    "deck",
    "deck",
    "2",
    "dot",
    "shuffle",
    "make",
    "sure",
    "put",
    "parentheses",
    "end",
    "right",
    "print",
    "deck",
    "one",
    "let",
    "print",
    "deck",
    "two",
    "cards",
    "deck",
    "two",
    "gon",
    "na",
    "copy",
    "print",
    "deck",
    "two",
    "cards",
    "see",
    "deck",
    "one",
    "cards",
    "shuffled",
    "deck",
    "two",
    "cards",
    "shuffled",
    "let",
    "move",
    "gon",
    "na",
    "run",
    "program",
    "let",
    "see",
    "see",
    "deck",
    "one",
    "deck",
    "one",
    "see",
    "diamonds",
    "diamonds",
    "diamonds",
    "diamonds",
    "diamonds",
    "diamonds",
    "row",
    "unshuffled",
    "go",
    "deck",
    "2",
    "see",
    "diamonds",
    "clubs",
    "spades",
    "diamonds",
    "hearts",
    "shuffled",
    "deck",
    "2",
    "shuffled",
    "okay",
    "deck",
    "works",
    "let",
    "add",
    "safeguards",
    "prevent",
    "errors",
    "every",
    "time",
    "deal",
    "function",
    "called",
    "card",
    "removed",
    "cards",
    "list",
    "remove",
    "card",
    "cards",
    "remove",
    "program",
    "tries",
    "pop",
    "card",
    "check",
    "length",
    "greater",
    "zero",
    "remember",
    "get",
    "number",
    "items",
    "list",
    "length",
    "see",
    "figure",
    "show",
    "done",
    "going",
    "deal",
    "right",
    "dealing",
    "going",
    "add",
    "statement",
    "length",
    "self",
    "dot",
    "cards",
    "greater",
    "zero",
    "need",
    "parentheses",
    "length",
    "greater",
    "zero",
    "pop",
    "card",
    "add",
    "cards",
    "dealt",
    "wo",
    "anything",
    "return",
    "cards",
    "dealt",
    "could",
    "empty",
    "array",
    "cards",
    "deck",
    "let",
    "add",
    "something",
    "shuffle",
    "function",
    "deck",
    "one",
    "card",
    "need",
    "shuffled",
    "let",
    "add",
    "appropriate",
    "statement",
    "shuffle",
    "function",
    "length",
    "self",
    "dot",
    "cards",
    "greater",
    "one",
    "shuffle",
    "make",
    "sure",
    "make",
    "sure",
    "put",
    "colon",
    "okay",
    "since",
    "card",
    "separate",
    "concept",
    "deck",
    "next",
    "make",
    "card",
    "class",
    "let",
    "create",
    "card",
    "class",
    "init",
    "function",
    "init",
    "function",
    "set",
    "equal",
    "hearts",
    "hopefully",
    "already",
    "tried",
    "going",
    "class",
    "card",
    "def",
    "net",
    "music",
    "suit",
    "lose",
    "self",
    "dot",
    "rank",
    "set",
    "currently",
    "anytime",
    "card",
    "created",
    "ace",
    "hearts",
    "let",
    "refactor",
    "code",
    "suit",
    "rank",
    "specified",
    "card",
    "object",
    "constructed",
    "init",
    "method",
    "take",
    "additional",
    "parameters",
    "besides",
    "self",
    "passed",
    "objects",
    "constructed",
    "update",
    "take",
    "suit",
    "rank",
    "music",
    "create",
    "special",
    "method",
    "underscore",
    "underscore",
    "str",
    "underscore",
    "underscore",
    "class",
    "specific",
    "method",
    "called",
    "print",
    "invoked",
    "object",
    "class",
    "want",
    "make",
    "print",
    "object",
    "card",
    "class",
    "print",
    "something",
    "like",
    "10",
    "hearts",
    "three",
    "clubs",
    "something",
    "like",
    "print",
    "return",
    "going",
    "return",
    "print",
    "statement",
    "going",
    "turn",
    "self",
    "dot",
    "rank",
    "get",
    "rank",
    "music",
    "plus",
    "put",
    "string",
    "plus",
    "self",
    "dot",
    "suit",
    "going",
    "return",
    "rank",
    "like",
    "2",
    "suit",
    "one",
    "let",
    "try",
    "real",
    "quick",
    "go",
    "bottom",
    "need",
    "test",
    "testing",
    "something",
    "completely",
    "different",
    "let",
    "card",
    "one",
    "equals",
    "music",
    "card",
    "going",
    "create",
    "card",
    "pass",
    "remember",
    "first",
    "pass",
    "suit",
    "hearts",
    "pass",
    "rank",
    "want",
    "make",
    "look",
    "like",
    "ranks",
    "going",
    "copy",
    "one",
    "create",
    "card",
    "print",
    "card",
    "one",
    "let",
    "clear",
    "run",
    "j",
    "hearts",
    "oh",
    "see",
    "got",
    "j",
    "hearts",
    "feel",
    "free",
    "add",
    "cards",
    "like",
    "test",
    "want",
    "okay",
    "going",
    "refactor",
    "slightly",
    "remember",
    "way",
    "toward",
    "beginning",
    "course",
    "talked",
    "f",
    "strings",
    "f",
    "strings",
    "allow",
    "us",
    "put",
    "variables",
    "right",
    "within",
    "string",
    "remember",
    "let",
    "see",
    "update",
    "use",
    "enough",
    "string",
    "first",
    "going",
    "create",
    "new",
    "string",
    "going",
    "start",
    "letter",
    "f",
    "inside",
    "string",
    "put",
    "curly",
    "braces",
    "around",
    "python",
    "code",
    "need",
    "strings",
    "put",
    "another",
    "curly",
    "brace",
    "ending",
    "string",
    "okay",
    "still",
    "showing",
    "um",
    "red",
    "squiggly",
    "lines",
    "double",
    "quote",
    "around",
    "strings",
    "anytime",
    "quotes",
    "middle",
    "put",
    "different",
    "type",
    "quote",
    "going",
    "use",
    "single",
    "quotes",
    "okay",
    "make",
    "whole",
    "string",
    "use",
    "brackets",
    "put",
    "variables",
    "right",
    "within",
    "string",
    "updated",
    "use",
    "f",
    "string",
    "currently",
    "deck",
    "class",
    "last",
    "line",
    "init",
    "method",
    "appends",
    "list",
    "item",
    "cards",
    "list",
    "instead",
    "appending",
    "suit",
    "comma",
    "rank",
    "create",
    "append",
    "instance",
    "card",
    "class",
    "afterwards",
    "deck",
    "created",
    "filled",
    "cards",
    "like",
    "going",
    "delete",
    "put",
    "card",
    "pass",
    "suit",
    "rank",
    "passing",
    "card",
    "instances",
    "done",
    "deck",
    "card",
    "classes",
    "created",
    "way",
    "could",
    "basically",
    "used",
    "card",
    "game",
    "let",
    "make",
    "hand",
    "class",
    "represent",
    "hand",
    "game",
    "blackjack",
    "create",
    "hand",
    "class",
    "add",
    "inet",
    "method",
    "initialize",
    "variable",
    "called",
    "set",
    "empty",
    "list",
    "let",
    "go",
    "also",
    "get",
    "rid",
    "test",
    "code",
    "new",
    "class",
    "called",
    "hand",
    "also",
    "make",
    "hand",
    "keep",
    "track",
    "value",
    "hands",
    "start",
    "zero",
    "blackjack",
    "game",
    "human",
    "controlled",
    "player",
    "program",
    "controlled",
    "dealer",
    "let",
    "add",
    "dealer",
    "parameter",
    "init",
    "constructor",
    "method",
    "hand",
    "class",
    "hand",
    "classes",
    "create",
    "dealer",
    "set",
    "true",
    "false",
    "keep",
    "track",
    "type",
    "hand",
    "pass",
    "parameter",
    "dealer",
    "create",
    "variable",
    "call",
    "dealer",
    "set",
    "dealer",
    "self",
    "dot",
    "dealer",
    "equals",
    "dealer",
    "music",
    "remember",
    "function",
    "parameters",
    "default",
    "values",
    "want",
    "make",
    "default",
    "value",
    "dealer",
    "false",
    "create",
    "hand",
    "set",
    "dealer",
    "value",
    "automatically",
    "false",
    "going",
    "take",
    "spaces",
    "make",
    "smaller",
    "hand",
    "created",
    "let",
    "give",
    "functionality",
    "add",
    "add",
    "card",
    "method",
    "method",
    "take",
    "card",
    "list",
    "parameter",
    "need",
    "add",
    "card",
    "list",
    "cards",
    "use",
    "extend",
    "function",
    "extend",
    "method",
    "append",
    "item",
    "card",
    "list",
    "onto",
    "cards",
    "list",
    "going",
    "look",
    "like",
    "self",
    "dot",
    "cards",
    "dot",
    "append",
    "extend",
    "mean",
    "dot",
    "extend",
    "pass",
    "card",
    "list",
    "let",
    "add",
    "code",
    "test",
    "far",
    "let",
    "create",
    "deck",
    "shuffle",
    "deck",
    "music",
    "create",
    "hand",
    "add",
    "cards",
    "hand",
    "hand",
    "dot",
    "add",
    "card",
    "deck",
    "dot",
    "deal",
    "deal",
    "two",
    "cards",
    "hand",
    "print",
    "hand",
    "cards",
    "okay",
    "printed",
    "expecting",
    "look",
    "little",
    "different",
    "function",
    "print",
    "print",
    "like",
    "think",
    "reason",
    "list",
    "printing",
    "list",
    "individual",
    "card",
    "let",
    "change",
    "print",
    "individual",
    "card",
    "print",
    "first",
    "card",
    "put",
    "zero",
    "try",
    "nine",
    "diamonds",
    "also",
    "print",
    "next",
    "card",
    "three",
    "hearts",
    "also",
    "print",
    "cards",
    "copy",
    "hand",
    "cards",
    "zero",
    "handout",
    "cards",
    "one",
    "okay",
    "ace",
    "hearts",
    "nine",
    "spades",
    "two",
    "cards",
    "dealt",
    "hand",
    "go",
    "back",
    "hand",
    "class",
    "add",
    "ability",
    "calculate",
    "value",
    "hand",
    "let",
    "add",
    "method",
    "called",
    "calculate",
    "value",
    "inside",
    "method",
    "set",
    "zero",
    "take",
    "one",
    "step",
    "time",
    "first",
    "let",
    "let",
    "make",
    "loop",
    "going",
    "go",
    "every",
    "single",
    "card",
    "inside",
    "loop",
    "set",
    "value",
    "card",
    "variable",
    "called",
    "card",
    "underscore",
    "value",
    "four",
    "card",
    "okay",
    "anything",
    "yet",
    "going",
    "second",
    "want",
    "make",
    "sure",
    "integer",
    "let",
    "convert",
    "integer",
    "remember",
    "use",
    "int",
    "music",
    "put",
    "print",
    "int",
    "inside",
    "parentheses",
    "put",
    "value",
    "getting",
    "card",
    "value",
    "card",
    "enough",
    "something",
    "must",
    "done",
    "variable",
    "let",
    "add",
    "value",
    "self",
    "dot",
    "value",
    "remember",
    "use",
    "plus",
    "equals",
    "add",
    "current",
    "value",
    "card",
    "value",
    "may",
    "know",
    "blackjack",
    "ace",
    "value",
    "either",
    "11",
    "1",
    "depending",
    "better",
    "player",
    "ways",
    "implement",
    "code",
    "going",
    "one",
    "way",
    "relatively",
    "simple",
    "first",
    "check",
    "hand",
    "ace",
    "let",
    "first",
    "create",
    "variable",
    "store",
    "whether",
    "hand",
    "called",
    "hand",
    "underscore",
    "ace",
    "set",
    "false",
    "put",
    "right",
    "ace",
    "set",
    "false",
    "since",
    "going",
    "using",
    "ace",
    "within",
    "method",
    "need",
    "use",
    "self",
    "ace",
    "using",
    "going",
    "list",
    "cards",
    "let",
    "check",
    "rank",
    "card",
    "ace",
    "set",
    "aced",
    "equals",
    "true",
    "card",
    "dot",
    "rank",
    "rank",
    "going",
    "equal",
    "double",
    "equal",
    "sign",
    "equals",
    "ace",
    "entire",
    "loop",
    "going",
    "check",
    "card",
    "ace",
    "value",
    "21",
    "subtract",
    "10",
    "value",
    "setting",
    "ace",
    "equal",
    "one",
    "instead",
    "ace",
    "greater",
    "21",
    "minus",
    "equals",
    "okay",
    "look",
    "something",
    "think",
    "discussed",
    "yet",
    "could",
    "say",
    "equals",
    "true",
    "greater",
    "also",
    "like",
    "shorthand",
    "say",
    "ace",
    "equals",
    "true",
    "ace",
    "going",
    "equal",
    "true",
    "false",
    "say",
    "ace",
    "saying",
    "true",
    "false",
    "seeing",
    "evaluate",
    "true",
    "subtract",
    "10",
    "value",
    "okay",
    "add",
    "another",
    "method",
    "get",
    "value",
    "hand",
    "called",
    "getvalue",
    "function",
    "return",
    "going",
    "make",
    "sure",
    "indented",
    "correctly",
    "def",
    "get",
    "value",
    "return",
    "self",
    "dot",
    "value",
    "make",
    "sure",
    "put",
    "parentheses",
    "remember",
    "put",
    "self",
    "since",
    "could",
    "call",
    "like",
    "could",
    "call",
    "hand",
    "value",
    "get",
    "value",
    "generally",
    "better",
    "make",
    "function",
    "return",
    "value",
    "get",
    "value",
    "way",
    "may",
    "extra",
    "code",
    "want",
    "run",
    "like",
    "depending",
    "different",
    "conditions",
    "may",
    "want",
    "modify",
    "value",
    "return",
    "best",
    "practice",
    "create",
    "method",
    "get",
    "value",
    "like",
    "currently",
    "value",
    "returned",
    "could",
    "incorrect",
    "someone",
    "going",
    "get",
    "value",
    "value",
    "calculated",
    "correctly",
    "first",
    "like",
    "checking",
    "aces",
    "things",
    "let",
    "call",
    "let",
    "calculate",
    "value",
    "return",
    "value",
    "going",
    "self",
    "dot",
    "calculate",
    "value",
    "something",
    "think",
    "new",
    "call",
    "calculate",
    "value",
    "within",
    "going",
    "call",
    "self",
    "refer",
    "instance",
    "working",
    "calling",
    "calculate",
    "value",
    "instance",
    "hand",
    "instance",
    "getting",
    "value",
    "returning",
    "value",
    "okay",
    "let",
    "create",
    "another",
    "method",
    "called",
    "blackjack",
    "return",
    "true",
    "blackjack",
    "false",
    "otherwise",
    "blackjack",
    "value",
    "gon",
    "na",
    "def",
    "get",
    "oh",
    "put",
    "self",
    "okay",
    "going",
    "evaluate",
    "either",
    "true",
    "false",
    "return",
    "true",
    "false",
    "depending",
    "whether",
    "blackjack",
    "create",
    "final",
    "method",
    "hand",
    "class",
    "display",
    "information",
    "hand",
    "let",
    "create",
    "method",
    "called",
    "display",
    "start",
    "print",
    "hand",
    "music",
    "okay",
    "let",
    "quick",
    "refactor",
    "instead",
    "saying",
    "hand",
    "either",
    "say",
    "dealer",
    "hand",
    "hand",
    "depending",
    "whether",
    "true",
    "going",
    "one",
    "line",
    "going",
    "use",
    "things",
    "learned",
    "earlier",
    "including",
    "ternary",
    "operators",
    "f",
    "strings",
    "going",
    "double",
    "quotes",
    "single",
    "quotes",
    "one",
    "new",
    "thing",
    "going",
    "make",
    "f",
    "string",
    "going",
    "using",
    "actually",
    "single",
    "quotes",
    "double",
    "quotes",
    "within",
    "f",
    "string",
    "want",
    "use",
    "single",
    "quotes",
    "double",
    "quotes",
    "within",
    "string",
    "surround",
    "triple",
    "single",
    "quote",
    "going",
    "delete",
    "quote",
    "three",
    "single",
    "quotes",
    "delete",
    "quote",
    "three",
    "single",
    "quotes",
    "got",
    "double",
    "quote",
    "single",
    "quote",
    "triple",
    "quote",
    "use",
    "double",
    "quote",
    "single",
    "quotes",
    "within",
    "string",
    "going",
    "um",
    "going",
    "delete",
    "right",
    "going",
    "put",
    "ternary",
    "operator",
    "see",
    "going",
    "say",
    "dealers",
    "dealer",
    "hand",
    "hand",
    "code",
    "going",
    "put",
    "curly",
    "braces",
    "ternary",
    "operator",
    "going",
    "put",
    "dealer",
    "double",
    "quote",
    "single",
    "quote",
    "dealers",
    "return",
    "dealers",
    "basically",
    "equals",
    "true",
    "return",
    "dealers",
    "else",
    "return",
    "okay",
    "line",
    "going",
    "dealer",
    "hand",
    "hand",
    "next",
    "add",
    "loop",
    "print",
    "cards",
    "card",
    "print",
    "card",
    "finally",
    "player",
    "dealer",
    "print",
    "value",
    "colon",
    "print",
    "value",
    "cards",
    "actually",
    "use",
    "operator",
    "music",
    "print",
    "print",
    "value",
    "value",
    "put",
    "comma",
    "print",
    "two",
    "different",
    "items",
    "string",
    "print",
    "self",
    "dot",
    "get",
    "value",
    "gon",
    "na",
    "put",
    "comma",
    "two",
    "different",
    "things",
    "gon",
    "na",
    "put",
    "space",
    "finally",
    "add",
    "empty",
    "print",
    "statement",
    "print",
    "blank",
    "line",
    "okay",
    "let",
    "test",
    "instead",
    "printing",
    "going",
    "print",
    "hand",
    "dot",
    "display",
    "see",
    "works",
    "thought",
    "going",
    "work",
    "hand",
    "k",
    "spades",
    "two",
    "spades",
    "value",
    "actually",
    "calculating",
    "correctly",
    "10",
    "plus",
    "2",
    "12",
    "going",
    "print",
    "none",
    "indicates",
    "something",
    "wrong",
    "need",
    "print",
    "hand",
    "display",
    "display",
    "already",
    "prints",
    "call",
    "okay",
    "put",
    "none",
    "yeah",
    "put",
    "none",
    "end",
    "looks",
    "right",
    "okay",
    "playing",
    "blackjack",
    "get",
    "see",
    "everyone",
    "else",
    "cards",
    "going",
    "update",
    "dealer",
    "cards",
    "printed",
    "game",
    "second",
    "one",
    "display",
    "first",
    "card",
    "display",
    "hidden",
    "loop",
    "displaying",
    "cards",
    "going",
    "need",
    "get",
    "access",
    "card",
    "index",
    "since",
    "determine",
    "display",
    "since",
    "going",
    "display",
    "second",
    "card",
    "let",
    "start",
    "updating",
    "loop",
    "get",
    "access",
    "card",
    "card",
    "index",
    "briefly",
    "touched",
    "earlier",
    "course",
    "going",
    "using",
    "enumerate",
    "function",
    "card",
    "going",
    "type",
    "enumerate",
    "going",
    "pass",
    "going",
    "return",
    "index",
    "card",
    "card",
    "going",
    "type",
    "index",
    "comma",
    "getting",
    "index",
    "card",
    "items",
    "update",
    "loop",
    "print",
    "hidden",
    "first",
    "card",
    "dealer",
    "index",
    "equals",
    "zero",
    "print",
    "hidden",
    "use",
    "else",
    "time",
    "let",
    "make",
    "sure",
    "lines",
    "correctly",
    "time",
    "print",
    "card",
    "wrong",
    "double",
    "equal",
    "sign",
    "almost",
    "main",
    "mistake",
    "always",
    "watch",
    "never",
    "use",
    "single",
    "equal",
    "sign",
    "checking",
    "equality",
    "single",
    "equal",
    "sign",
    "assignment",
    "operator",
    "index",
    "equals",
    "zero",
    "self",
    "dealer",
    "print",
    "hidden",
    "version",
    "game",
    "end",
    "game",
    "dealer",
    "cards",
    "shown",
    "see",
    "dealer",
    "going",
    "create",
    "new",
    "parameter",
    "display",
    "method",
    "going",
    "called",
    "show",
    "dealer",
    "cards",
    "underscores",
    "spaces",
    "going",
    "set",
    "default",
    "value",
    "false",
    "show",
    "dealer",
    "cards",
    "default",
    "value",
    "going",
    "false",
    "add",
    "statement",
    "add",
    "another",
    "show",
    "dealer",
    "cards",
    "going",
    "hidden",
    "showing",
    "dealer",
    "cards",
    "showing",
    "dealer",
    "cards",
    "whole",
    "statement",
    "false",
    "print",
    "card",
    "going",
    "one",
    "scenario",
    "going",
    "print",
    "hidden",
    "blackjack",
    "game",
    "person",
    "blackjack",
    "going",
    "win",
    "print",
    "cards",
    "going",
    "add",
    "long",
    "statement",
    "say",
    "black",
    "jack",
    "self",
    "dot",
    "blackjack",
    "able",
    "call",
    "method",
    "since",
    "long",
    "line",
    "always",
    "going",
    "go",
    "next",
    "line",
    "special",
    "thing",
    "add",
    "slash",
    "go",
    "next",
    "line",
    "slash",
    "backslash",
    "mean",
    "backslash",
    "indicate",
    "line",
    "continues",
    "following",
    "line",
    "okay",
    "done",
    "creating",
    "hand",
    "class",
    "delete",
    "everything",
    "using",
    "testing",
    "okay",
    "time",
    "code",
    "final",
    "longest",
    "class",
    "runs",
    "game",
    "want",
    "create",
    "class",
    "called",
    "game",
    "inside",
    "class",
    "create",
    "method",
    "called",
    "play",
    "inside",
    "method",
    "create",
    "variable",
    "called",
    "gamenumber",
    "underscore",
    "space",
    "set",
    "zero",
    "class",
    "game",
    "create",
    "another",
    "variable",
    "games",
    "play",
    "set",
    "zero",
    "going",
    "set",
    "games",
    "play",
    "whatever",
    "user",
    "inputs",
    "asked",
    "many",
    "games",
    "want",
    "play",
    "may",
    "remember",
    "input",
    "input",
    "want",
    "make",
    "sure",
    "games",
    "play",
    "end",
    "need",
    "convert",
    "end",
    "music",
    "okay",
    "let",
    "test",
    "things",
    "far",
    "end",
    "put",
    "g",
    "equals",
    "game",
    "going",
    "create",
    "new",
    "game",
    "g",
    "dot",
    "play",
    "okay",
    "let",
    "test",
    "many",
    "games",
    "want",
    "play",
    "five",
    "okay",
    "well",
    "going",
    "play",
    "games",
    "yet",
    "still",
    "create",
    "potential",
    "error",
    "put",
    "many",
    "games",
    "put",
    "letter",
    "going",
    "get",
    "error",
    "basically",
    "anytime",
    "someone",
    "puts",
    "something",
    "number",
    "going",
    "error",
    "let",
    "create",
    "try",
    "accept",
    "block",
    "handle",
    "exception",
    "put",
    "something",
    "number",
    "print",
    "must",
    "enter",
    "number",
    "let",
    "arrange",
    "already",
    "learned",
    "little",
    "bit",
    "try",
    "except",
    "blocks",
    "going",
    "put",
    "try",
    "going",
    "try",
    "work",
    "exception",
    "music",
    "print",
    "music",
    "must",
    "enter",
    "number",
    "currently",
    "user",
    "gets",
    "one",
    "chance",
    "input",
    "correct",
    "value",
    "let",
    "make",
    "program",
    "keep",
    "asking",
    "user",
    "value",
    "user",
    "enters",
    "number",
    "done",
    "loop",
    "loop",
    "keeps",
    "looping",
    "something",
    "true",
    "keep",
    "looping",
    "user",
    "enters",
    "number",
    "putting",
    "entire",
    "block",
    "loop",
    "keeps",
    "looping",
    "game",
    "play",
    "less",
    "equal",
    "zero",
    "music",
    "oh",
    "make",
    "sure",
    "spell",
    "correctly",
    "okay",
    "let",
    "create",
    "main",
    "game",
    "loop",
    "new",
    "loop",
    "loop",
    "one",
    "time",
    "per",
    "game",
    "played",
    "loop",
    "game",
    "number",
    "less",
    "games",
    "play",
    "first",
    "line",
    "loop",
    "increment",
    "game",
    "number",
    "one",
    "inside",
    "loop",
    "create",
    "deck",
    "object",
    "deck",
    "variable",
    "shuffle",
    "deck",
    "create",
    "variable",
    "called",
    "playerhand",
    "set",
    "hand",
    "object",
    "create",
    "variable",
    "called",
    "dealerhand",
    "set",
    "hand",
    "object",
    "time",
    "make",
    "sure",
    "specify",
    "dealer",
    "equals",
    "true",
    "okay",
    "next",
    "part",
    "little",
    "complicated",
    "create",
    "loop",
    "loops",
    "two",
    "times",
    "iteration",
    "add",
    "card",
    "player",
    "hand",
    "dealt",
    "deck",
    "add",
    "card",
    "dealer",
    "hand",
    "also",
    "dealt",
    "deck",
    "music",
    "okay",
    "dealt",
    "two",
    "cards",
    "player",
    "information",
    "going",
    "printed",
    "console",
    "game",
    "let",
    "start",
    "printing",
    "empty",
    "line",
    "print",
    "asterisk",
    "30",
    "times",
    "make",
    "divider",
    "trick",
    "printing",
    "something",
    "lot",
    "times",
    "put",
    "asterisk",
    "quotation",
    "marks",
    "times",
    "going",
    "print",
    "30",
    "times",
    "print",
    "current",
    "game",
    "number",
    "total",
    "number",
    "games",
    "something",
    "like",
    "game",
    "4",
    "10",
    "use",
    "f",
    "string",
    "print",
    "30",
    "asterisks",
    "display",
    "player",
    "hand",
    "dealer",
    "hand",
    "point",
    "game",
    "someone",
    "could",
    "already",
    "got",
    "blackjack",
    "code",
    "check",
    "winner",
    "let",
    "put",
    "code",
    "check",
    "winner",
    "separate",
    "method",
    "game",
    "class",
    "create",
    "method",
    "called",
    "check",
    "winner",
    "method",
    "return",
    "false",
    "make",
    "sure",
    "everything",
    "indented",
    "correctly",
    "less",
    "indented",
    "previous",
    "line",
    "check",
    "winner",
    "function",
    "take",
    "playerhand",
    "dealer",
    "hand",
    "arguments",
    "return",
    "statement",
    "going",
    "check",
    "greater",
    "print",
    "busted",
    "dealer",
    "wins",
    "return",
    "true",
    "remember",
    "program",
    "gets",
    "return",
    "statement",
    "none",
    "following",
    "statements",
    "block",
    "run",
    "music",
    "use",
    "lf",
    "statements",
    "check",
    "various",
    "conditions",
    "add",
    "lf",
    "statement",
    "see",
    "dealer",
    "got",
    "21",
    "print",
    "dealer",
    "busted",
    "win",
    "return",
    "true",
    "music",
    "oh",
    "copied",
    "l",
    "add",
    "lf",
    "statement",
    "check",
    "players",
    "blackjack",
    "print",
    "players",
    "blackjack",
    "tie",
    "return",
    "true",
    "music",
    "add",
    "elf",
    "statement",
    "check",
    "player",
    "hand",
    "blackjack",
    "print",
    "blackjack",
    "win",
    "return",
    "true",
    "check",
    "dealer",
    "hand",
    "blackjack",
    "say",
    "dealer",
    "blackjack",
    "dealer",
    "wins",
    "return",
    "true",
    "music",
    "okay",
    "done",
    "hand",
    "conditions",
    "game",
    "also",
    "end",
    "players",
    "choose",
    "get",
    "cards",
    "going",
    "add",
    "new",
    "argument",
    "check",
    "winner",
    "method",
    "default",
    "value",
    "going",
    "game",
    "equals",
    "false",
    "add",
    "game",
    "equals",
    "false",
    "true",
    "means",
    "players",
    "chosen",
    "get",
    "cards",
    "use",
    "new",
    "argument",
    "string",
    "lf",
    "statements",
    "run",
    "game",
    "make",
    "sure",
    "line",
    "returned",
    "false",
    "statement",
    "say",
    "game",
    "select",
    "put",
    "game",
    "true",
    "check",
    "player",
    "hand",
    "value",
    "deal",
    "hands",
    "value",
    "print",
    "else",
    "else",
    "player",
    "music",
    "lf",
    "tie",
    "lf",
    "say",
    "equal",
    "print",
    "tie",
    "make",
    "sure",
    "correct",
    "emoji",
    "tie",
    "music",
    "else",
    "dealer",
    "one",
    "else",
    "music",
    "exact",
    "level",
    "indentation",
    "else",
    "added",
    "add",
    "return",
    "true",
    "make",
    "method",
    "return",
    "true",
    "game",
    "equals",
    "true",
    "let",
    "go",
    "back",
    "play",
    "method",
    "inside",
    "loop",
    "statement",
    "call",
    "check",
    "winner",
    "function",
    "player",
    "hand",
    "dealer",
    "hand",
    "let",
    "go",
    "back",
    "self",
    "dot",
    "check",
    "winner",
    "enter",
    "player",
    "hand",
    "dealer",
    "hand",
    "music",
    "true",
    "means",
    "go",
    "next",
    "game",
    "continue",
    "continue",
    "going",
    "go",
    "next",
    "iteration",
    "loop",
    "loop",
    "loop",
    "go",
    "next",
    "iteration",
    "start",
    "new",
    "game",
    "point",
    "game",
    "player",
    "able",
    "choose",
    "hit",
    "stand",
    "inside",
    "loop",
    "inside",
    "statement",
    "added",
    "create",
    "variable",
    "called",
    "choice",
    "set",
    "empty",
    "string",
    "player",
    "able",
    "keep",
    "choosing",
    "value",
    "hand",
    "right",
    "choice",
    "variable",
    "add",
    "loop",
    "loops",
    "player",
    "hand",
    "value",
    "less",
    "21",
    "inside",
    "loop",
    "add",
    "line",
    "get",
    "choice",
    "either",
    "going",
    "hit",
    "stand",
    "music",
    "add",
    "convert",
    "whatever",
    "answer",
    "whatever",
    "user",
    "put",
    "going",
    "convert",
    "lowercase",
    "loop",
    "added",
    "also",
    "stop",
    "user",
    "choice",
    "stand",
    "update",
    "line",
    "starts",
    "loop",
    "also",
    "stop",
    "choice",
    "stand",
    "choice",
    "ways",
    "kind",
    "new",
    "way",
    "showing",
    "music",
    "checking",
    "choice",
    "list",
    "inside",
    "list",
    "two",
    "elements",
    "stand",
    "choice",
    "choice",
    "stand",
    "continue",
    "loop",
    "input",
    "print",
    "empty",
    "line",
    "also",
    "want",
    "program",
    "keep",
    "asking",
    "user",
    "choice",
    "user",
    "enters",
    "valid",
    "choice",
    "valid",
    "choices",
    "hs",
    "hit",
    "stand",
    "right",
    "last",
    "print",
    "statement",
    "indentation",
    "add",
    "loop",
    "keep",
    "looping",
    "user",
    "enters",
    "valid",
    "choice",
    "inside",
    "loop",
    "ask",
    "input",
    "specify",
    "h",
    "well",
    "music",
    "going",
    "look",
    "similar",
    "line",
    "going",
    "kind",
    "clarify",
    "things",
    "little",
    "bit",
    "print",
    "another",
    "empty",
    "line",
    "last",
    "loop",
    "checked",
    "choice",
    "list",
    "outside",
    "recently",
    "added",
    "loop",
    "inside",
    "loop",
    "added",
    "one",
    "add",
    "statement",
    "check",
    "choice",
    "list",
    "hit",
    "h",
    "add",
    "card",
    "player",
    "hand",
    "dealt",
    "deck",
    "right",
    "display",
    "player",
    "hand",
    "outside",
    "loops",
    "player",
    "making",
    "choice",
    "check",
    "winner",
    "use",
    "statement",
    "continue",
    "statement",
    "use",
    "last",
    "time",
    "checked",
    "winner",
    "copy",
    "make",
    "sure",
    "lined",
    "correctly",
    "okay",
    "outside",
    "loop",
    "done",
    "check",
    "winner",
    "let",
    "add",
    "empty",
    "line",
    "make",
    "clear",
    "loop",
    "store",
    "value",
    "player",
    "hand",
    "variable",
    "named",
    "player",
    "hand",
    "value",
    "underscores",
    "spaces",
    "music",
    "thing",
    "dealer",
    "hand",
    "music",
    "remember",
    "could",
    "use",
    "command",
    "control",
    "select",
    "two",
    "words",
    "change",
    "time",
    "okay",
    "dealer",
    "keep",
    "drawing",
    "cards",
    "dealer",
    "hand",
    "value",
    "17",
    "make",
    "happen",
    "loop",
    "inside",
    "loop",
    "make",
    "sure",
    "dealer",
    "dealt",
    "card",
    "deck",
    "dealer",
    "hand",
    "value",
    "updated",
    "try",
    "going",
    "show",
    "right",
    "dealer",
    "hand",
    "value",
    "less",
    "dealer",
    "hand",
    "dot",
    "add",
    "card",
    "okay",
    "loop",
    "display",
    "dealer",
    "hand",
    "call",
    "display",
    "method",
    "make",
    "sure",
    "set",
    "show",
    "dealer",
    "cards",
    "true",
    "music",
    "since",
    "end",
    "game",
    "showing",
    "cards",
    "check",
    "winner",
    "like",
    "print",
    "final",
    "results",
    "print",
    "hand",
    "colon",
    "player",
    "hand",
    "value",
    "music",
    "dealer",
    "hand",
    "call",
    "check",
    "winner",
    "function",
    "one",
    "final",
    "time",
    "time",
    "statement",
    "pass",
    "hands",
    "like",
    "time",
    "add",
    "third",
    "argument",
    "true",
    "indicate",
    "game",
    "point",
    "code",
    "game",
    "outside",
    "outer",
    "loop",
    "play",
    "method",
    "add",
    "final",
    "line",
    "saying",
    "thanks",
    "playing",
    "going",
    "outside",
    "loop",
    "put",
    "print",
    "demonstrate",
    "use",
    "escape",
    "character",
    "add",
    "new",
    "line",
    "slash",
    "going",
    "add",
    "new",
    "line",
    "thanks",
    "playing",
    "line",
    "loop",
    "realize",
    "entire",
    "function",
    "lined",
    "loop",
    "sometimes",
    "gets",
    "tricky",
    "um",
    "figuring",
    "exact",
    "right",
    "indentation",
    "kind",
    "go",
    "straight",
    "say",
    "see",
    "lined",
    "play",
    "function",
    "going",
    "come",
    "back",
    "function",
    "going",
    "copy",
    "going",
    "shift",
    "tab",
    "indent",
    "one",
    "less",
    "happens",
    "sometimes",
    "running",
    "python",
    "code",
    "sometimes",
    "indentation",
    "get",
    "mixed",
    "correct",
    "think",
    "red",
    "squiggly",
    "lines",
    "return",
    "true",
    "mistake",
    "code",
    "mistake",
    "error",
    "checking",
    "comes",
    "emoji",
    "know",
    "handle",
    "emoji",
    "perfectly",
    "fine",
    "code",
    "emojis",
    "okay",
    "let",
    "run",
    "program",
    "try",
    "press",
    "play",
    "many",
    "games",
    "want",
    "play",
    "three",
    "game",
    "one",
    "three",
    "see",
    "17",
    "know",
    "dealer",
    "going",
    "stand",
    "okay",
    "always",
    "good",
    "test",
    "says",
    "deal",
    "missing",
    "one",
    "required",
    "positional",
    "argument",
    "let",
    "go",
    "says",
    "line",
    "139",
    "kind",
    "help",
    "us",
    "know",
    "go",
    "let",
    "go",
    "139",
    "yeah",
    "want",
    "deal",
    "single",
    "card",
    "going",
    "deal",
    "one",
    "card",
    "times",
    "use",
    "deal",
    "want",
    "deal",
    "one",
    "card",
    "yeah",
    "got",
    "deal",
    "one",
    "think",
    "forgot",
    "deal",
    "one",
    "places",
    "uh",
    "thanks",
    "error",
    "messages",
    "whenever",
    "problem",
    "make",
    "sure",
    "read",
    "error",
    "messages",
    "often",
    "give",
    "good",
    "idea",
    "need",
    "wrong",
    "even",
    "says",
    "deal",
    "missing",
    "one",
    "required",
    "positional",
    "argument",
    "number",
    "really",
    "help",
    "figure",
    "wrong",
    "code",
    "let",
    "try",
    "three",
    "games",
    "time",
    "hit",
    "going",
    "stand",
    "okay",
    "another",
    "error",
    "says",
    "173",
    "oh",
    "already",
    "see",
    "spelled",
    "wrong",
    "let",
    "go",
    "173",
    "make",
    "sure",
    "spell",
    "correctly",
    "make",
    "sure",
    "spell",
    "correctly",
    "okay",
    "let",
    "try",
    "many",
    "games",
    "want",
    "play",
    "three",
    "going",
    "hit",
    "hit",
    "okay",
    "first",
    "game",
    "busted",
    "dealer",
    "wins",
    "game",
    "number",
    "two",
    "hit",
    "time",
    "stand",
    "okay",
    "dealer",
    "busted",
    "win",
    "game",
    "three",
    "three",
    "hit",
    "stand",
    "final",
    "results",
    "hand",
    "20",
    "dealer",
    "hand",
    "19",
    "win",
    "thanks",
    "playing",
    "completed",
    "whole",
    "game",
    "okay",
    "reached",
    "end",
    "course",
    "learned",
    "basics",
    "python",
    "coding",
    "along",
    "written",
    "two",
    "python",
    "programs",
    "good",
    "luck",
    "programming",
    "journey",
    "thanks",
    "watching",
    "remember",
    "use",
    "code",
    "good",
    "bye",
    "bye",
    "bye",
    "bye",
    "bye",
    "okay"
  ],
  "keywords": [
    "course",
    "learn",
    "python",
    "programming",
    "created",
    "one",
    "many",
    "need",
    "code",
    "complex",
    "also",
    "choice",
    "data",
    "create",
    "games",
    "work",
    "going",
    "right",
    "start",
    "first",
    "program",
    "get",
    "use",
    "replit",
    "run",
    "different",
    "later",
    "show",
    "set",
    "go",
    "section",
    "final",
    "blackjack",
    "game",
    "every",
    "way",
    "little",
    "key",
    "make",
    "sure",
    "let",
    "creating",
    "rock",
    "paper",
    "scissors",
    "running",
    "really",
    "either",
    "sign",
    "okay",
    "click",
    "button",
    "plus",
    "new",
    "see",
    "oh",
    "word",
    "case",
    "kind",
    "bit",
    "files",
    "things",
    "like",
    "variables",
    "even",
    "using",
    "showing",
    "variable",
    "player",
    "computer",
    "called",
    "equal",
    "look",
    "name",
    "underscore",
    "space",
    "assign",
    "operator",
    "string",
    "put",
    "quotation",
    "marks",
    "could",
    "used",
    "single",
    "quotes",
    "instead",
    "double",
    "long",
    "quote",
    "important",
    "automatically",
    "already",
    "got",
    "next",
    "thing",
    "want",
    "try",
    "say",
    "back",
    "time",
    "another",
    "line",
    "press",
    "return",
    "enter",
    "equals",
    "done",
    "talk",
    "functions",
    "function",
    "indentation",
    "define",
    "indented",
    "within",
    "call",
    "choices",
    "two",
    "lines",
    "sometimes",
    "squiggly",
    "something",
    "says",
    "us",
    "well",
    "sort",
    "error",
    "color",
    "red",
    "may",
    "mean",
    "deal",
    "saying",
    "anything",
    "change",
    "end",
    "statement",
    "returned",
    "else",
    "returning",
    "example",
    "delete",
    "part",
    "add",
    "know",
    "colon",
    "always",
    "type",
    "parentheses",
    "returns",
    "print",
    "getting",
    "printing",
    "actually",
    "value",
    "quick",
    "remember",
    "whole",
    "similar",
    "still",
    "music",
    "gon",
    "na",
    "play",
    "dictionaries",
    "values",
    "dictionary",
    "curly",
    "beginning",
    "comma",
    "bow",
    "copy",
    "would",
    "second",
    "update",
    "keep",
    "able",
    "number",
    "means",
    "correctly",
    "input",
    "user",
    "result",
    "lists",
    "calling",
    "methods",
    "useful",
    "import",
    "library",
    "access",
    "without",
    "random",
    "statements",
    "times",
    "list",
    "multiple",
    "items",
    "brackets",
    "item",
    "three",
    "strings",
    "dot",
    "pass",
    "pop",
    "information",
    "give",
    "help",
    "um",
    "happens",
    "chose",
    "wrong",
    "test",
    "check",
    "empty",
    "inside",
    "arguments",
    "uh",
    "basically",
    "names",
    "depending",
    "condition",
    "true",
    "b",
    "five",
    "greater",
    "less",
    "point",
    "tie",
    "everything",
    "figure",
    "lot",
    "ways",
    "f",
    "age",
    "block",
    "checking",
    "winner",
    "paste",
    "1",
    "original",
    "common",
    "ca",
    "remove",
    "talked",
    "specific",
    "element",
    "take",
    "earlier",
    "default",
    "file",
    "command",
    "hit",
    "bo",
    "numbers",
    "character",
    "letters",
    "instance",
    "hand",
    "class",
    "types",
    "integer",
    "int",
    "2",
    "false",
    "convert",
    "passed",
    "10",
    "tuple",
    "sets",
    "operators",
    "math",
    "division",
    "four",
    "negative",
    "good",
    "dog",
    "8",
    "count",
    "boolean",
    "order",
    "last",
    "since",
    "argument",
    "zero",
    "objects",
    "object",
    "append",
    "defined",
    "num",
    "length",
    "backslash",
    "square",
    "index",
    "0",
    "j",
    "standard",
    "package",
    "module",
    "state",
    "accept",
    "outside",
    "hello",
    "dogs",
    "roger",
    "sid",
    "method",
    "parameters",
    "immutable",
    "prints",
    "loop",
    "loops",
    "classes",
    "bark",
    "self",
    "init",
    "stand",
    "lambda",
    "map",
    "reduce",
    "doc",
    "exception",
    "card",
    "suit",
    "hearts",
    "rank",
    "diamonds",
    "deck",
    "cards",
    "ranks",
    "ace",
    "shuffle",
    "dealt",
    "dealer",
    "display"
  ]
}