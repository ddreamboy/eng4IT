{
  "text": "Hey there, I'm Mike, and today we're going to look\nover the top 15 Python frameworks\nyou need to master in 2023.\n(upbeat music)\nPython has quickly become\none of the most popular programming languages\ndue to its simplicity, versatility,\nand abundance of resources available to those\nlearning the language.\nIt's often the first language\nthat beginner programmers learn,\nand it's also widely used in the industry\nfor purposes ranging from web development to data analysis.\nIn this video, we'll dissect the most popular\nand useful Python frameworks that you should get to know.\nBut before we get started,\nI wanna let you know that there'll be links\nto more resources in the video's description.\nAnd remember, subscribe and ring that bell\nto get notifications\nfor future helpful content.\nNow, let's check out the top 15 Python frameworks.\nThe following are lightweight microframeworks,\nuseful when you want to create a simple app rapidly\nor have little memory consumption in your server.\nDo you want to create ridiculously light web applications\nwith no other dependencies?\nBottle is a lightweight Python microframework\ndesigned to easily build small\nor medium-sized web applications.\nIt doesn't include any external dependencies,\naside from the Python standard library.\nIts built-in templates make it easy to learn and use.\nBottle is built on top of the WSGI standard\nand is compatible with most web servers and Python versions.\nCherryPy is a minimalistic\nwebsite application development framework for Python.\nIt's an object-oriented framework that allows you\nto build web applications in the same way\nyou would with any other OOP in Python.\nIt's been around since 2002,\nand has been widely adopted in production environments\nacross a diverse range of websites,\nfrom those with simple functionality\nto those that demand high complexity.\nFor example, both giant software services Netflix and Hulu\nuse CherryPy as a part of their infrastructure.\nThe main task of CherryPy is to handle HTTP requests\nand match them with an adequate logic\nwritten by the developers.\nThis means that by default,\nCherryPy doesn't provide database access or HTML templating,\nleaving all the logic of the application to you.\nThe following are complete web frameworks\nthat include components for common web development tasks,\nsuch as database access, form handling, and security.\nUnlike microframeworks, Python web frameworks\nprovide everything you need out of the box.\nYou should really consider your needs\nwhen building a web app.\nSometimes it's more than enough to just use WordPress.\nDjango is one of the most popular\nand widely used web frameworks in the Python ecosystem.\nIt's a rock solid full stack framework\nthat includes everything you need to build\na complete web application.\nIt was first introduced in 2005\nas a Pythonic way to build a newsletter site.\nNowadays, it's one of the most used Python libraries\nfor web development,\nwith almost 8 million downloads per month.\nSome of the biggest sites ever made\nwere originally created with Django, such as Instagram,\ndiscus, Pinterest, Bitbucket, and Chess.com.\nDjango follows the model view template architecture,\nand includes built-in features such as templating,\ndatabase management, admin panel, signals,\nand views to manage the logic of your backend.\nTo master Django,\nit's advisable you have strong fundamentals\nof Python object-oriented programming,\nas well as functional programming.\nYou won't go wrong by choosing Django\nfor your next web project.\nIt's a powerful web framework\nthat provides everything you need\nto build fast and reliable websites.\nAnd if you need any additional features,\nsay the ability to create a REST API\nto use with modern front-end frameworks\nlike React or Angular, you can use extensions\nlike Django REST framework.\nPlus, Django is one of the simplest frameworks\nto set up and deploy through Kinsta.\nFastAPI is a modern web framework\nthat does one thing spectacularly well,\nbuild APIs.\nSince it's released in 2018,\nit has rapidly gained popularity\ndue to its great performance and simplicity.\nIn fact, FastAPI has over 9 million monthly downloads,\nsurpassing even full-stack frameworks like Django.\nBear in mind that FastAPI's only purpose\nis to build backend APIs.\nThat means you must have a frontend framework like Vue.js\nto display your site to your users.\nThat said, the framework is incredibly easy to work with,\nand you can even deploy an app with your FastAPI\nthrough Kinsta and your GitHub repo in mere minutes.\nPyramid is a flexible and extensible web framework\nthat's well-suited for both small and large applications.\nIt's the sweet spot between a microframework like Flask\nand a full-stack framework like Django.\nPyramid includes the most common features you would need\nwhen developing a Python web application,\nbut it'll lets you focus on only the components\nyou need for your project.\nThe following Python graphical user interface frameworks\nprovide a wide range of tools and features\nfor creating desktop applications,\nincluding support for event-driven programming,\nwidgets, and graphics.\nPyQt is one of the most popular sets of Python buildings\nfor the Qt cross-platform application framework.\nThis framework perfectly combines the simplicity of Python\nas a general purpose language,\nand the powerful Qt application framework built in C++.\nA binding is an API, think of it as like a bridge,\nbetween two programming languages.\nIn this case, the Python bindings for Qt\nmean you can use the Qt tools written originally in C++\ninside your Python code.\nBear in mind that PyQt comes with two licensing options.\nGPL version 3 is free to use,\nbut anyone you distribute it to is able to redistribute it.\nAnd Commercial,\nand this lets you keep your code private\nso you can monetize your work,\nbut you'll have to pay for a license\nfor every developer that uses it.\nCurrently, it's about $550 per developer.\nTkinter is a built-in Python GUI framework.\nIt's part of the standard library,\nso you won't have to install any additional dependencies.\nSimilar to PyQt, which uses Qt,\nTkinter uses a graphical user interface toolkit called Tk.\nIt also provides a set of tools for creating various widgets\nsuch as buttons, labels, text boxes, and menus.\nIn general, Tkinter is a great way to quickly create\nsmall GUI programs, but due to its outdated look and feel,\nyou might be better off\nchoosing a beefier framework for bigger projects.\nThe following are Python software libraries\nthat provide pre-built functionality and tools\nto help developers build and deploy machine learning models,\nsupporting common tasks such as data processing,\nmodel training and evaluation,\nas well as tools for deploying models to production.\nscikit-lern is the most popular machine learning library\nbeing used both in the tech industry and in academia.\nIt provides efficient tools for common ML tasks,\nand it's built on top of other scientific libraries\nlike Numpy and SciPy.\nTensorFlow is an open source platform\nfor building and deploying machine learning models.\nDeployed by the Google Brain team in 2015,\nit's a powerful library for deep learning,\nwith a wide range of tools\nfor building and training neural networks.\nTensorFlow can be used for a variety of tasks,\nsuch as image and language processing,\nspeech recognition, and predictive analytics.\nThese frameworks help students, scientists, and researchers\nto perform their tasks without focusing\non the low level details of the computation.\nScientific computing frameworks often include functionality\nfor linear algebra, optimization, interpolation, integration\nand other common tasks in scientific computing.\nNumPy is a scientific computing library\nthat is designed to handle multi-dimensional arrays\nand matrices of numerical data.\nIt also provides a wide range of mathematical functions\nto operate on these arrays.\nNumPy is the foundation block\nfor many other Python libraries and frameworks\nusing data science, including SciPy, Pandas,\nscikit-learn, and TensorFlow\nSciPy provides a collection of algorithms and functions\nbuilt on top of the NumPy.\nIt helps to perform common scientific and engineering tasks,\nsuch as optimization, signal processing,\nintegration, linear algebra, and more.\nThese frameworks are all about helping you\nin the tedious process of testing your code.\nIf you're using test-driven development,\nthe following frameworks are a must in your workflow.\nPytest is a widely adopted testing framework\nthat is designed to be easy to use and extend.\nIt helps you to write elegant tests\nin both small and complex Python codebases.\nUnittest is a built-in Python testing framework\nthat is based on the xUnit testing conventions.\nIt provides a Pythonic and object-oriented way\nof creating automated test cases and suites of tests.\nThese types of Python frameworks provide a set of tools\nand libraries that enable developers\nto write asynchronous code\nin a more manageable and efficient way.\nasyncio is at the heart\nof many other asynchronous frameworks.\nIt allows developers to create concurrent code\nusing the async/await syntax, and it's designed to handle\nthousands of concurrent connections.\nasyncio provides a single API\nfor multiple transport protocols,\nsuch as TCP, UDP,\nSSL/TLS, and subprocess communication.\nAiohttp is an asynchronous HTTP client/server framework\nbuilt on top of the asyncio package.\nIt provides a simple and intuitive interface\nfor handling HTTP requests and responses,\nas well as support for middleware, sessions,\nand other web development tools.\nPython frameworks can help to promote code organization,\nincrease productivity,\nand make the software development process\neasier and more efficient.\nWhich Python frameworks have you worked with\nand what's been your favorite?\nShare your thoughts in the comment section below.\nAt Kinsta, we take hosting\nand performance to the next level.\nWith our application hosting, you can run almost any app\nin a matter of minutes with full support\nfor all of your favorite languages and frameworks.\nAnd our database hosting allows for easy database creation,\nwith full control over every aspect of your project.\nExplore these features and more\nat kinsta.com/application-hosting,\nand thank you so much for watching.\nIf you found this video helpful,\nplease don't forget to like, subscribe,\nand hit the notification bell from more tutorials,\nexplainers, and helpful content like this.\n(upbeat music)\n",
  "words": [
    "hey",
    "mike",
    "today",
    "going",
    "look",
    "top",
    "15",
    "python",
    "frameworks",
    "need",
    "master",
    "2023",
    "upbeat",
    "music",
    "python",
    "quickly",
    "become",
    "one",
    "popular",
    "programming",
    "languages",
    "due",
    "simplicity",
    "versatility",
    "abundance",
    "resources",
    "available",
    "learning",
    "language",
    "often",
    "first",
    "language",
    "beginner",
    "programmers",
    "learn",
    "also",
    "widely",
    "used",
    "industry",
    "purposes",
    "ranging",
    "web",
    "development",
    "data",
    "analysis",
    "video",
    "dissect",
    "popular",
    "useful",
    "python",
    "frameworks",
    "get",
    "know",
    "get",
    "started",
    "wan",
    "na",
    "let",
    "know",
    "links",
    "resources",
    "video",
    "description",
    "remember",
    "subscribe",
    "ring",
    "bell",
    "get",
    "notifications",
    "future",
    "helpful",
    "content",
    "let",
    "check",
    "top",
    "15",
    "python",
    "frameworks",
    "following",
    "lightweight",
    "microframeworks",
    "useful",
    "want",
    "create",
    "simple",
    "app",
    "rapidly",
    "little",
    "memory",
    "consumption",
    "server",
    "want",
    "create",
    "ridiculously",
    "light",
    "web",
    "applications",
    "dependencies",
    "bottle",
    "lightweight",
    "python",
    "microframework",
    "designed",
    "easily",
    "build",
    "small",
    "web",
    "applications",
    "include",
    "external",
    "dependencies",
    "aside",
    "python",
    "standard",
    "library",
    "templates",
    "make",
    "easy",
    "learn",
    "use",
    "bottle",
    "built",
    "top",
    "wsgi",
    "standard",
    "compatible",
    "web",
    "servers",
    "python",
    "versions",
    "cherrypy",
    "minimalistic",
    "website",
    "application",
    "development",
    "framework",
    "python",
    "framework",
    "allows",
    "build",
    "web",
    "applications",
    "way",
    "would",
    "oop",
    "python",
    "around",
    "since",
    "2002",
    "widely",
    "adopted",
    "production",
    "environments",
    "across",
    "diverse",
    "range",
    "websites",
    "simple",
    "functionality",
    "demand",
    "high",
    "complexity",
    "example",
    "giant",
    "software",
    "services",
    "netflix",
    "hulu",
    "use",
    "cherrypy",
    "part",
    "infrastructure",
    "main",
    "task",
    "cherrypy",
    "handle",
    "http",
    "requests",
    "match",
    "adequate",
    "logic",
    "written",
    "developers",
    "means",
    "default",
    "cherrypy",
    "provide",
    "database",
    "access",
    "html",
    "templating",
    "leaving",
    "logic",
    "application",
    "following",
    "complete",
    "web",
    "frameworks",
    "include",
    "components",
    "common",
    "web",
    "development",
    "tasks",
    "database",
    "access",
    "form",
    "handling",
    "security",
    "unlike",
    "microframeworks",
    "python",
    "web",
    "frameworks",
    "provide",
    "everything",
    "need",
    "box",
    "really",
    "consider",
    "needs",
    "building",
    "web",
    "app",
    "sometimes",
    "enough",
    "use",
    "wordpress",
    "django",
    "one",
    "popular",
    "widely",
    "used",
    "web",
    "frameworks",
    "python",
    "ecosystem",
    "rock",
    "solid",
    "full",
    "stack",
    "framework",
    "includes",
    "everything",
    "need",
    "build",
    "complete",
    "web",
    "application",
    "first",
    "introduced",
    "2005",
    "pythonic",
    "way",
    "build",
    "newsletter",
    "site",
    "nowadays",
    "one",
    "used",
    "python",
    "libraries",
    "web",
    "development",
    "almost",
    "8",
    "million",
    "downloads",
    "per",
    "month",
    "biggest",
    "sites",
    "ever",
    "made",
    "originally",
    "created",
    "django",
    "instagram",
    "discus",
    "pinterest",
    "bitbucket",
    "django",
    "follows",
    "model",
    "view",
    "template",
    "architecture",
    "includes",
    "features",
    "templating",
    "database",
    "management",
    "admin",
    "panel",
    "signals",
    "views",
    "manage",
    "logic",
    "backend",
    "master",
    "django",
    "advisable",
    "strong",
    "fundamentals",
    "python",
    "programming",
    "well",
    "functional",
    "programming",
    "wo",
    "go",
    "wrong",
    "choosing",
    "django",
    "next",
    "web",
    "project",
    "powerful",
    "web",
    "framework",
    "provides",
    "everything",
    "need",
    "build",
    "fast",
    "reliable",
    "websites",
    "need",
    "additional",
    "features",
    "say",
    "ability",
    "create",
    "rest",
    "api",
    "use",
    "modern",
    "frameworks",
    "like",
    "react",
    "angular",
    "use",
    "extensions",
    "like",
    "django",
    "rest",
    "framework",
    "plus",
    "django",
    "one",
    "simplest",
    "frameworks",
    "set",
    "deploy",
    "kinsta",
    "fastapi",
    "modern",
    "web",
    "framework",
    "one",
    "thing",
    "spectacularly",
    "well",
    "build",
    "apis",
    "since",
    "released",
    "2018",
    "rapidly",
    "gained",
    "popularity",
    "due",
    "great",
    "performance",
    "simplicity",
    "fact",
    "fastapi",
    "9",
    "million",
    "monthly",
    "downloads",
    "surpassing",
    "even",
    "frameworks",
    "like",
    "django",
    "bear",
    "mind",
    "fastapi",
    "purpose",
    "build",
    "backend",
    "apis",
    "means",
    "must",
    "frontend",
    "framework",
    "like",
    "display",
    "site",
    "users",
    "said",
    "framework",
    "incredibly",
    "easy",
    "work",
    "even",
    "deploy",
    "app",
    "fastapi",
    "kinsta",
    "github",
    "repo",
    "mere",
    "minutes",
    "pyramid",
    "flexible",
    "extensible",
    "web",
    "framework",
    "small",
    "large",
    "applications",
    "sweet",
    "spot",
    "microframework",
    "like",
    "flask",
    "framework",
    "like",
    "django",
    "pyramid",
    "includes",
    "common",
    "features",
    "would",
    "need",
    "developing",
    "python",
    "web",
    "application",
    "lets",
    "focus",
    "components",
    "need",
    "project",
    "following",
    "python",
    "graphical",
    "user",
    "interface",
    "frameworks",
    "provide",
    "wide",
    "range",
    "tools",
    "features",
    "creating",
    "desktop",
    "applications",
    "including",
    "support",
    "programming",
    "widgets",
    "graphics",
    "pyqt",
    "one",
    "popular",
    "sets",
    "python",
    "buildings",
    "qt",
    "application",
    "framework",
    "framework",
    "perfectly",
    "combines",
    "simplicity",
    "python",
    "general",
    "purpose",
    "language",
    "powerful",
    "qt",
    "application",
    "framework",
    "built",
    "binding",
    "api",
    "think",
    "like",
    "bridge",
    "two",
    "programming",
    "languages",
    "case",
    "python",
    "bindings",
    "qt",
    "mean",
    "use",
    "qt",
    "tools",
    "written",
    "originally",
    "inside",
    "python",
    "code",
    "bear",
    "mind",
    "pyqt",
    "comes",
    "two",
    "licensing",
    "options",
    "gpl",
    "version",
    "3",
    "free",
    "use",
    "anyone",
    "distribute",
    "able",
    "redistribute",
    "commercial",
    "lets",
    "keep",
    "code",
    "private",
    "monetize",
    "work",
    "pay",
    "license",
    "every",
    "developer",
    "uses",
    "currently",
    "550",
    "per",
    "developer",
    "tkinter",
    "python",
    "gui",
    "framework",
    "part",
    "standard",
    "library",
    "wo",
    "install",
    "additional",
    "dependencies",
    "similar",
    "pyqt",
    "uses",
    "qt",
    "tkinter",
    "uses",
    "graphical",
    "user",
    "interface",
    "toolkit",
    "called",
    "tk",
    "also",
    "provides",
    "set",
    "tools",
    "creating",
    "various",
    "widgets",
    "buttons",
    "labels",
    "text",
    "boxes",
    "menus",
    "general",
    "tkinter",
    "great",
    "way",
    "quickly",
    "create",
    "small",
    "gui",
    "programs",
    "due",
    "outdated",
    "look",
    "feel",
    "might",
    "better",
    "choosing",
    "beefier",
    "framework",
    "bigger",
    "projects",
    "following",
    "python",
    "software",
    "libraries",
    "provide",
    "functionality",
    "tools",
    "help",
    "developers",
    "build",
    "deploy",
    "machine",
    "learning",
    "models",
    "supporting",
    "common",
    "tasks",
    "data",
    "processing",
    "model",
    "training",
    "evaluation",
    "well",
    "tools",
    "deploying",
    "models",
    "production",
    "popular",
    "machine",
    "learning",
    "library",
    "used",
    "tech",
    "industry",
    "academia",
    "provides",
    "efficient",
    "tools",
    "common",
    "ml",
    "tasks",
    "built",
    "top",
    "scientific",
    "libraries",
    "like",
    "numpy",
    "scipy",
    "tensorflow",
    "open",
    "source",
    "platform",
    "building",
    "deploying",
    "machine",
    "learning",
    "models",
    "deployed",
    "google",
    "brain",
    "team",
    "2015",
    "powerful",
    "library",
    "deep",
    "learning",
    "wide",
    "range",
    "tools",
    "building",
    "training",
    "neural",
    "networks",
    "tensorflow",
    "used",
    "variety",
    "tasks",
    "image",
    "language",
    "processing",
    "speech",
    "recognition",
    "predictive",
    "analytics",
    "frameworks",
    "help",
    "students",
    "scientists",
    "researchers",
    "perform",
    "tasks",
    "without",
    "focusing",
    "low",
    "level",
    "details",
    "computation",
    "scientific",
    "computing",
    "frameworks",
    "often",
    "include",
    "functionality",
    "linear",
    "algebra",
    "optimization",
    "interpolation",
    "integration",
    "common",
    "tasks",
    "scientific",
    "computing",
    "numpy",
    "scientific",
    "computing",
    "library",
    "designed",
    "handle",
    "arrays",
    "matrices",
    "numerical",
    "data",
    "also",
    "provides",
    "wide",
    "range",
    "mathematical",
    "functions",
    "operate",
    "arrays",
    "numpy",
    "foundation",
    "block",
    "many",
    "python",
    "libraries",
    "frameworks",
    "using",
    "data",
    "science",
    "including",
    "scipy",
    "pandas",
    "tensorflow",
    "scipy",
    "provides",
    "collection",
    "algorithms",
    "functions",
    "built",
    "top",
    "numpy",
    "helps",
    "perform",
    "common",
    "scientific",
    "engineering",
    "tasks",
    "optimization",
    "signal",
    "processing",
    "integration",
    "linear",
    "algebra",
    "frameworks",
    "helping",
    "tedious",
    "process",
    "testing",
    "code",
    "using",
    "development",
    "following",
    "frameworks",
    "must",
    "workflow",
    "pytest",
    "widely",
    "adopted",
    "testing",
    "framework",
    "designed",
    "easy",
    "use",
    "extend",
    "helps",
    "write",
    "elegant",
    "tests",
    "small",
    "complex",
    "python",
    "codebases",
    "unittest",
    "python",
    "testing",
    "framework",
    "based",
    "xunit",
    "testing",
    "conventions",
    "provides",
    "pythonic",
    "way",
    "creating",
    "automated",
    "test",
    "cases",
    "suites",
    "tests",
    "types",
    "python",
    "frameworks",
    "provide",
    "set",
    "tools",
    "libraries",
    "enable",
    "developers",
    "write",
    "asynchronous",
    "code",
    "manageable",
    "efficient",
    "way",
    "asyncio",
    "heart",
    "many",
    "asynchronous",
    "frameworks",
    "allows",
    "developers",
    "create",
    "concurrent",
    "code",
    "using",
    "syntax",
    "designed",
    "handle",
    "thousands",
    "concurrent",
    "connections",
    "asyncio",
    "provides",
    "single",
    "api",
    "multiple",
    "transport",
    "protocols",
    "tcp",
    "udp",
    "subprocess",
    "communication",
    "aiohttp",
    "asynchronous",
    "http",
    "framework",
    "built",
    "top",
    "asyncio",
    "package",
    "provides",
    "simple",
    "intuitive",
    "interface",
    "handling",
    "http",
    "requests",
    "responses",
    "well",
    "support",
    "middleware",
    "sessions",
    "web",
    "development",
    "tools",
    "python",
    "frameworks",
    "help",
    "promote",
    "code",
    "organization",
    "increase",
    "productivity",
    "make",
    "software",
    "development",
    "process",
    "easier",
    "efficient",
    "python",
    "frameworks",
    "worked",
    "favorite",
    "share",
    "thoughts",
    "comment",
    "section",
    "kinsta",
    "take",
    "hosting",
    "performance",
    "next",
    "level",
    "application",
    "hosting",
    "run",
    "almost",
    "app",
    "matter",
    "minutes",
    "full",
    "support",
    "favorite",
    "languages",
    "frameworks",
    "database",
    "hosting",
    "allows",
    "easy",
    "database",
    "creation",
    "full",
    "control",
    "every",
    "aspect",
    "project",
    "explore",
    "features",
    "thank",
    "much",
    "watching",
    "found",
    "video",
    "helpful",
    "please",
    "forget",
    "like",
    "subscribe",
    "hit",
    "notification",
    "bell",
    "tutorials",
    "explainers",
    "helpful",
    "content",
    "like",
    "upbeat",
    "music"
  ],
  "keywords": [
    "look",
    "top",
    "15",
    "python",
    "frameworks",
    "need",
    "master",
    "upbeat",
    "music",
    "quickly",
    "one",
    "popular",
    "programming",
    "languages",
    "due",
    "simplicity",
    "resources",
    "learning",
    "language",
    "often",
    "first",
    "learn",
    "also",
    "widely",
    "used",
    "industry",
    "web",
    "development",
    "data",
    "video",
    "useful",
    "get",
    "know",
    "let",
    "subscribe",
    "bell",
    "helpful",
    "content",
    "following",
    "lightweight",
    "microframeworks",
    "want",
    "create",
    "simple",
    "app",
    "rapidly",
    "applications",
    "dependencies",
    "bottle",
    "microframework",
    "designed",
    "build",
    "small",
    "include",
    "standard",
    "library",
    "make",
    "easy",
    "use",
    "built",
    "cherrypy",
    "application",
    "framework",
    "allows",
    "way",
    "would",
    "since",
    "adopted",
    "production",
    "range",
    "websites",
    "functionality",
    "software",
    "part",
    "handle",
    "http",
    "requests",
    "logic",
    "written",
    "developers",
    "means",
    "provide",
    "database",
    "access",
    "templating",
    "complete",
    "components",
    "common",
    "tasks",
    "handling",
    "everything",
    "building",
    "django",
    "full",
    "includes",
    "pythonic",
    "site",
    "libraries",
    "almost",
    "million",
    "downloads",
    "per",
    "originally",
    "model",
    "features",
    "backend",
    "well",
    "wo",
    "choosing",
    "next",
    "project",
    "powerful",
    "provides",
    "additional",
    "rest",
    "api",
    "modern",
    "like",
    "set",
    "deploy",
    "kinsta",
    "fastapi",
    "apis",
    "great",
    "performance",
    "even",
    "bear",
    "mind",
    "purpose",
    "must",
    "work",
    "minutes",
    "pyramid",
    "lets",
    "graphical",
    "user",
    "interface",
    "wide",
    "tools",
    "creating",
    "including",
    "support",
    "widgets",
    "pyqt",
    "qt",
    "general",
    "two",
    "code",
    "every",
    "developer",
    "uses",
    "tkinter",
    "gui",
    "help",
    "machine",
    "models",
    "processing",
    "training",
    "deploying",
    "efficient",
    "scientific",
    "numpy",
    "scipy",
    "tensorflow",
    "perform",
    "level",
    "computing",
    "linear",
    "algebra",
    "optimization",
    "integration",
    "arrays",
    "functions",
    "many",
    "using",
    "helps",
    "process",
    "testing",
    "write",
    "tests",
    "asynchronous",
    "asyncio",
    "concurrent",
    "favorite",
    "hosting"
  ]
}