{
  "text": "What does it mean to have a Bitcoin?\nMany people have heard of Bitcoin, that it's a fully digital currency \nwith no government to issue it, that no banks need to manage accounts \nand verify transactions, and that no one really knows who invented it.\nAnd yet many people don't know the answer to this question, at least not in full.\nTo get there, and to make sure that the technical details underlying \nthe answer actually feel motivated, we're going to walk through, \nstep by step, how you might have invented your own version of Bitcoin.\nWe'll start with you keeping track of payments with your friends using a communal ledger, \nand then as you start to trust your friends and the world around you less and less, \nand if you're clever enough to bring in a few ideas from cryptography to help circumvent \nthe need for trust, what you end up with is what's called a cryptocurrency.\nBitcoin is just the first implemented example of a cryptocurrency, \nand now there are thousands more on exchanges with traditional currencies.\nWalking the path of inventing your own can help to set the foundations \nfor understanding some of the more recent players in the game, \nand recognizing when and why there's room for different design choices.\nIn fact, one of the reasons I chose this topic is that in the last year there's \nbeen a huge amount of attention, investment, and hype directed at these currencies.\nI'm not going to comment or speculate on the current or future exchange rates, \nbut I think we'd all agree that anyone looking to buy a cryptocurrency should really know \nwhat it is.\nAnd I don't just mean in terms of analogies with vague connections to gold mining, \nI mean an actual direct description of what the computers are doing when we send, \nreceive, and create cryptocurrencies.\nOne thing worth stressing is that even though you and I are going to dig into \nthe details here, and that takes meaningful time, \nyou don't actually need to know those details if you just want to use the cryptocurrency, \njust like you don't need to know the details of what happens under the hood when \nyou swipe a credit card.\nLike any digital payment, there's lots of user-friendly applications that let \nyou just send and receive the currencies without thinking about what's going on.\nThe difference is that the backbone underlying this is not a bank that \nverifies transactions, instead it's a clever system of decentralized \ntrustless verification based on some of the math born in cryptography.\nBut to start I want you to actually set aside the thought \nof cryptocurrencies and all that just for a few minutes.\nWe're going to begin the story with something more down to earth, \nledgers and digital signatures.\nIf you and your friends exchange money pretty frequently, \npaying your share of the dinner bill and such, \nit can be inconvenient to exchange cash all the time.\nSo you might keep a communal ledger that records all the \npayments you intend to make at some point in the future.\nAlice pays Bob $20, Bob pays Charlie $40, things like that.\nThis ledger is going to be something public and accessible to everyone, \nlike a website where anyone can go and add new lines.\nAnd let's say at the end of every month you all get together, \nlook at the list of transactions, and settle up.\nIf you spent more than you received, you put that money in the pot, \nand if you received more than you spent, you take that money out.\nSo the protocol for being part of this very simple system might look like this.\nAnyone can add lines to the ledger, and at the end \nof every month you all get together and settle up.\nNow one problem with a public ledger like this is that anyone can add a line.\nSo what's to prevent Bob from going and writing \nAlice pays Bob $100 without Alice approving?\nHow are we supposed to trust that all of these \ntransactions are what the sender meant them to be?\nWell this is where the first bit of cryptography comes in, digital signatures.\nLike handwritten signatures, the idea here is that Alice should be able to add \nsomething next to that transaction that proves that she has seen it and that she's \napproved of it, and it should be infeasible for anyone else to forge that signature.\nAt first, it might seem like a digital signature shouldn't even be possible.\nI mean, whatever data makes up that signature can just be read and copied by a computer.\nSo how do you prevent forgeries?\nWell the way this works is that everyone generates what's called a \npublic key-private key pair, each of which looks like some string of bits.\nThe private key is sometimes also called a secret key, \nso we can abbreviate it as SK while abbreviating the public key as PK.\nAs the name suggests, this secret key is something you want to keep to yourself.\nIn the real world, your handwritten signature looks \nthe same no matter what document you're signing.\nBut a digital signature is actually much stronger, \nbecause it changes for different messages.\nIt looks like some string of 1s and 0s, commonly something like 256 bits, \nand altering the message even slightly completely changes what \nthe signature on that message should look like.\nSpeaking a little more formally, producing a signature involves a \nfunction that depends both on the message itself and on your private key.\nThe private key ensures that only you can produce that signature, \nand the fact that it depends on the message means that no one can \njust copy one of your signatures and forge it on another message.\nHand-in-hand with this is a second function used to verify that a signature is valid, \nand this is where the public key comes into play.\nAll it does is output true or false to indicate if this was a signature produced \nby the private key associated with the public key you're using for verification.\nI won't go into the details of how exactly both these functions work, \nbut the idea is that it should be completely infeasible to \nfind a valid signature if you don't know the secret key.\nSpecifically, there's no strategy better than just guessing and checking \nrandom signatures, which you can check using the public key that everyone knows.\nNow think about how many signatures there are with a length of 256 bits.\nThat's 2 to the power of 256!\nThis is a stupidly large number.\nTo call it astronomically large would be giving way too much credit to astronomy.\nIn fact, I made a supplemental video devoted just \nto illustrating what a huge number this is.\nRight here, let's just say that when you verify that a signature against a given message \nis valid, you can feel extremely confident that the only way someone could have produced \nit is if they knew the secret key associated with the public key you used for \nverification.\nMaking sure people sign transactions on the ledger is pretty good, \nbut there's one slight loophole.\nIf Alice signs a transaction like Alice pays Bob $100, \neven though Bob can't forge Alice's signature on a new message, \nhe could just copy that same line as many times as he wants.\nThat message-signature combination remains valid.\nTo get around this, we make it so that when you sign a transaction, \nthe message has to include some sort of unique ID associated with that transaction.\nThat way, if Alice pays Bob $100 multiple times, \neach one of those lines on the ledger requires a completely new signature.\nGreat, digital signatures remove a huge aspect of trust in this initial protocol.\nBut even still, if you were to really do this, \nyou would be relying on an honor system of sorts.\nNamely, you're trusting that everyone will actually follow \nthrough and settle up in cash at the end of each month.\nWhat if, for example, Charlie racks up thousands \nof dollars in debt and just refuses to show up?\nThe only real reason to revert back to cash to \nsettle up is if some people owe a lot of money.\nSo maybe you have the clever idea that you never actually have to settle up in cash as \nlong as you have some way to prevent people from spending too much more than they take in.\nMaybe you start by having everyone pay $100 into the pot, \nand then have the first few lines of the ledger read Alice gets $100, Bob gets $100, \nCharlie gets $100, etc.\nNow, just don't accept any transactions where someone \nis spending more than they already have on that ledger.\nFor example, if the first two transactions are Charlie pays Alice \n$50 and Charlie pays Bob $50, if he were to try to add Charlie pays you $20, \nthat would be invalid, as invalid as if he had never signed it.\nNotice, this means verifying a transaction requires \nknowing the full history of transactions up to that point.\nThis is also going to be true in cryptocurrencies, \nthough there is a little room for optimization.\nWhat's interesting here is that this step removes the \nconnection between the ledger and actual physical US dollars.\nIn theory, if everyone in the world was using this ledger, \nyou could live your whole life just sending and receiving money \non this ledger without ever having to convert to real US dollars.\nIn fact, to emphasize this point, let's start referring to \nthe quantities on the ledger as ledger dollars, or LD for short.\nYou are of course free to exchange ledger dollars for real US dollars.\nFor example, maybe Alice gives Bob a $10 bill in the real world in exchange for him \nadding and signing the transaction $10 Bob pays Alice $10 to this communal ledger.\nBut exchanges like that are not guaranteed by the protocol.\nIt's now more analogous to how you might exchange \ndollars for Euros or any other currency on the open market.\nIt's just its own independent thing.\nThis is the first important thing to understand about Bitcoin, \nor any other cryptocurrency.\nWhat it is, is a ledger.\nThe history of transactions is the currency.\nOf course, with Bitcoin, money doesn't enter the ledger with people buying in using cash.\nI'll get to how new money enters the ledger in just a few minutes.\nBut before that, there's actually an even more significant difference \nbetween our current system of ledger dollars and how cryptocurrencies work.\nSo far, I've said that this ledger is in some public place, \nlike a website where anyone can add new lines.\nBut that would require trusting a central location, namely, \nwho hosts the website, who controls the rules of adding new lines.\nTo remove that bit of trust, we'll have everybody keep their own copy of the ledger.\nThen when you want to make a transaction, like Alice pays Bob 100 Ledger Dollars, \nyou do broadcast that out into the world for people to hear \nand record on their own private ledgers.\nBut unless you do something more, this system is absurdly bad.\nHow could you get everyone to agree on what the right ledger is?\nWhen Bob receives a transaction, like Alice pays Bob 10 Ledger Dollars, \nhow can he be sure that everyone else received and believes that same transaction?\nThat he'll be able to later on go to Charlie and use \nthose same 10 Ledger Dollars to make a transaction?\nReally, imagine yourself just listening to transactions being broadcast.\nHow can you be sure that everyone else is recording \nthe same transactions and in the same order?\nThis is really the heart of the issue.\nThis is an interesting puzzle.\nCan you come up with a protocol for how to accept or reject transactions, \nand in what order, so that you can feel confident that anyone else in the world \nwho's following that same protocol has a personal ledger that looks the same as yours?\nThis is the problem addressed in the original Bitcoin paper.\nAt a high level, the solution that Bitcoin offers is to trust \nwhichever ledger has the most computational work put into it.\nI'll take a moment to explain exactly what that means.\nIt involves a cryptographic hash function.\nThe general idea that we'll build to is that if you use computational work as \na basis for what to trust, you can make it so that fraudulent transactions and \nconflicting ledgers require an infeasible amount of computation to bring about.\nAgain, I'll remind you that this is getting well into the weeds \nbeyond what anyone would need to know just to use a currency like this.\nBut it's a really cool idea, and if you understand it, \nyou understand the heart of Bitcoin and other cryptocurrencies.\nSo first things first, what's a hash function?\nThe inputs for one of these functions can be any kind of message or file, \nit really doesn't matter. And the output is a string of bits \nwith some kind of fixed length, like 256 bits.\nThis output is called the hash or digest of the message, \nand the intent is that it looks random.\nIt's not random, it always gives the same output for a given input.\nBut the idea is that if you slightly change the input, \nmaybe editing just one of the characters, the resulting hash changes completely.\nIn fact, for the hash function I'm showing here, called SHA256, \nthe way the output changes as you slightly change that input is entirely unpredictable.\nYou see, this is not just any hash function, it's a cryptographic hash function.\nThat means it's infeasible to compute in the reverse direction.\nIf I show you some string of 1s and 0s, and ask you to find an \ninput so that the SHA256 hash of that input gives this exact string of bits, \nyou will have no better method than to just guess and check.\nAnd again, if you want to feel for how much computation would be needed to \ngo through two to the 256 guesses, just take a look at the supplement video.\nI actually had way too much fun writing that thing.\nYou might think that if you just really dig into the details of how exactly this function \nworks, you could reverse engineer the appropriate input without having to guess and check.\nBut no one has ever figured out a way to do that.\nInterestingly, there's no cold hard rigorous proof \nthat it's hard to compute in the reverse direction.\nAnd yet, a huge amount of modern security depends on cryptographic \nhash functions and the idea that they have this property.\nIf you were to look at what algorithms underlie the secure connection \nthat your browser is making with YouTube right now, \nor that it makes with your bank, you'll likely see the name SHA256 show up in there.\nFor right now, our focus will be on how such a function can prove that a particular \nlist of transactions is associated with a large amount of computational effort.\nImagine someone shows you a list of transactions, and they say, hey, \nI found a special number so that when you put that number at the end of this list of \ntransactions, and apply SHA256 to the entire thing, \nthe first 30 bits of that output are all zeros.\nHow hard do you think it was for them to find that number?\nWell, for a random message, the probability that a hash happens to start \nwith 30 successive zeros is 1 in 2 to the 30, which is about 1 in a billion.\nAnd because SHA256 is a cryptographic hash function, \nthe only way to find a special number like that is just guessing and checking.\nSo this person almost certainly had to go through about a \nbillion different numbers before finding this special one.\nAnd once you know that number, it's really quick to verify, \nyou just run the hash and see that there are 30 zeros.\nSo in other words, you can verify that they went through a large amount of work, \nbut without having to go through that same effort yourself.\nThis is called a proof of work.\nAnd importantly, all of this work is intrinsically tied to the list of transactions.\nIf you change one of those transactions, even slightly, \nit would completely change the hash.\nSo you'd have to go through another billion guesses to find a new proof of work, \na new number that makes it so that the hash of the altered list \ntogether with this new number starts with 30 zeros.\nSo now think back to our distributed ledger situation.\nEveryone is there broadcasting transactions and we want \na way for them to agree on what the correct ledger is.\nAs I mentioned, the idea behind the original Bitcoin paper is to \nhave everyone trust whichever ledger has the most work put into it.\nThe way this works is to first organize a given ledger into blocks, \nwhere each block consists of a list of transactions together with a proof of work.\nThat is, a special number so that the hash of \nthe whole block starts with a bunch of zeros.\nFor the moment, let's say it has to start with 60 zeros, \nbut later we'll return back to a more systematic way you might want to choose that number.\n In the same way that a transaction is only considered valid when it's signed \nby the sender,\nA block is only considered valid if it has a proof of work.\nAlso, to make sure there's a standard order to these blocks, \nwe'll make it so that a block has to contain the hash of the previous block at its header.\nThat way, if you were to go back and change any one of the blocks, \nor to swap the order of two blocks, it would change the block that comes after it, \nwhich changes the block's hash, which changes the one that comes after it, and so on.\nThat would require redoing all of the work, finding a new special number \nfor each of these blocks that makes their hashes start with 60 zeros.\nBecause blocks are chained together like this, \ninstead of calling it a ledger, it's common to call it a blockchain.\nAs part of our updated protocol, we'll now allow \nanyone in the world to be a block creator.\nWhat that means is that they're going to listen for transactions being broadcast, \ncollect them into some block, and then do a whole bunch of work to find a \nspecial number that makes the hash of that block start with 60 zeros.\nOnce they find it, they broadcast out the block they found.\nTo reward a block creator for all this work, when she puts together a block, \nwe'll allow her to include a very special transaction at the top of it, \nin which she gets, say, 10 ledger dollars out of thin air.\nThis is called the block reward, and it's an exception to \nour usual rules about whether or not to accept transactions.\nIt doesn't come from anyone, so it doesn't have to be signed.\nIt also means that the total number of ledger \ndollars in our economy increases with each new block.\nCreating blocks is often called mining, since it requires doing a lot of work, \nand it introduces new bits of currency into the economy.\nBut when you hear or read about miners, keep in mind that what they're \nreally doing is listening for transactions, creating blocks, \nbroadcasting those blocks, and getting rewarded with new money for doing so.\nFrom the miners' perspective, each block is like a miniature lottery, \nwhere everyone is guessing numbers as fast as they can, \nuntil one lucky individual finds a special number that makes the hash of the block \nstart with many zeros, and they get the reward.\nFor anyone else who just wants to use this system to make payments, \ninstead of listening for transactions, they all start listening just for blocks \nbeing broadcast by miners, and updating their own personal copies of the blockchain.\nNow the key addition to our protocol is that if you hear two \ndistinct blockchains with conflicting transaction histories, \nyou defer to the longest one, the one with the most work put into it.\nIf there's a tie, just wait until you hear an \nadditional block that makes one of them longer.\nSo even though there's no central authority, and everyone is maintaining their own \ncopy of the blockchain, if everyone agrees to give preference to whichever blockchain \nhas the most work put into it, we have a way to arrive at decentralized consensus.\nTo see why this makes for a trustworthy system, \nand to understand at what point you should trust that a payment is legit, \nit's actually really helpful to walk through exactly what it would take to \nfool someone using this system.\nMaybe Alice is trying to fool Bob with a fraudulent block, \nnamely she tries to send him one that includes her paying him 100 Ledger dollars, \nbut without broadcasting that block to the rest of the network, \nthat way everyone else still thinks she has those 100 Ledger dollars.\nTo do this, she would have to find a valid proof of work before all the other miners, \neach working on their own block.\nAnd that could definitely happen, maybe Alice just \nhappens to win this miniature lottery before everyone else.\nBut Bob is still going to be hearing the broadcasts made by other miners, \nso to keep him believing this fraudulent block, \nAlice would have to do all the work herself to keep adding blocks on this \nspecial fork in Bob's blockchain that's different from what he's hearing \nfrom the rest of the miners.\nRemember, as per the protocol, Bob always trusts the longest chain he knows about.\nAlice might be able to keep this up for a few blocks if just by chance she \nfinds blocks more quickly than the rest of the miners on the network all combined.\nBut unless she has close to 50% of the computing resources among all of the miners, \nthe probability becomes overwhelming that the blockchain that all the other miners \nare working on grows faster than the single fraudulent blockchain Alice is feeding to Bob.\nSo after enough time, Bob will just reject what he's hearing from \nAlice in favor of the longer chain that everyone else is working on.\nNotice, that means you shouldn't necessarily trust a new block you hear immediately.\nInstead, you should wait for several new blocks to be added on top of it.\nIf you still haven't heard of any longer blockchains, \nyou can trust that this block is part of the same chain that everyone else is using.\nAnd with that, we've hit all the main ideas.\nThis distributed ledger system based on a proof of work is more or less \nhow the Bitcoin protocol works, and how many other cryptocurrencies work.\nThere's just a few details to clear up.\nEarlier I said that the proof of work might be to find a \nspecial number so that the hash of the block starts with 60 zeros.\nWell, the way the actual Bitcoin protocol works is to periodically change that \nnumber of zeros so that it should take, on average, 10 minutes to find a new block.\nSo as there are more and more miners added to the network, \nthe challenge gets harder and harder in such a way that this \nminiature lottery only has about one winner every 10 minutes.\nMany newer cryptocurrencies have much shorter block times than that.\nAnd all of the money in Bitcoin ultimately comes from some block reward.\nIn the beginning, these rewards were 50 Bitcoin per block.\nThere's actually a great website you can go to called Block \nExplorer that makes it easy to look through the Bitcoin blockchain.\nAnd if you look at the very first few blocks on the chain, \nthey contain no transactions other than that 50 Bitcoin reward to the miner.\nBut every 210,000 blocks, which is about every 4 years, that reward gets cut in half.\nSo right now, the reward is 12.5 Bitcoin per block.\nAnd because this reward decreases geometrically over time, \nit means there will never be more than 21 million Bitcoin in existence.\nHowever, this doesn't mean miners will stop earning money.\nIn addition to the block reward, miners can also pick up transaction fees.\nThe way this works is that whenever you make a payment, \nyou can purely optionally include a transaction fee with it \nthat will go to the miner of whichever block includes that payment.\nThe reason you might do that is to incentivize miners to actually \ninclude the transaction you broadcast into the next block.\nYou see, in Bitcoin, each block is limited to about 2400 transactions, \nwhich many critics argue is unnecessarily restrictive.\nFor comparison, Visa processes an average of about 1700 transactions per second, \nand they're capable of handling more than 24,000 per second.\nThis comparatively slow processing on Bitcoin makes for higher transaction fees, \nsince that's what determines which transactions miners choose to include in a new block.\nAll of this is far from a comprehensive coverage of cryptocurrencies.\nThere are still many nuances and alternate design choices that I haven't even touched.\nBut my hope is that this can provide a stable WaitButWhy-style tree-trunk of \nunderstanding for anyone looking to add a few more branches with further reading.\nLike I said at the start, one of the motives behind this is that a lot of money has \nstarted flowing towards cryptocurrencies, and even though I don't want to make any \nclaims about whether that's a good or bad investment, \nI really do think it's healthy for people getting into the game to at least know the \nfundamentals of the technology.\nAs always, my sincerest thanks to those of you making this channel possible on Patreon.\nI understand that not everyone is in a position to contribute, \nbut if you're still interested in helping out, \none of the best ways to do that is simply to share videos that you think \nmight be interesting or helpful to others.\nI know you know that, but it really does help.\n",
  "words": [
    "mean",
    "bitcoin",
    "many",
    "people",
    "heard",
    "bitcoin",
    "fully",
    "digital",
    "currency",
    "government",
    "issue",
    "banks",
    "need",
    "manage",
    "accounts",
    "verify",
    "transactions",
    "one",
    "really",
    "knows",
    "invented",
    "yet",
    "many",
    "people",
    "know",
    "answer",
    "question",
    "least",
    "full",
    "get",
    "make",
    "sure",
    "technical",
    "details",
    "underlying",
    "answer",
    "actually",
    "feel",
    "motivated",
    "going",
    "walk",
    "step",
    "step",
    "might",
    "invented",
    "version",
    "bitcoin",
    "start",
    "keeping",
    "track",
    "payments",
    "friends",
    "using",
    "communal",
    "ledger",
    "start",
    "trust",
    "friends",
    "world",
    "around",
    "less",
    "less",
    "clever",
    "enough",
    "bring",
    "ideas",
    "cryptography",
    "help",
    "circumvent",
    "need",
    "trust",
    "end",
    "called",
    "cryptocurrency",
    "bitcoin",
    "first",
    "implemented",
    "example",
    "cryptocurrency",
    "thousands",
    "exchanges",
    "traditional",
    "currencies",
    "walking",
    "path",
    "inventing",
    "help",
    "set",
    "foundations",
    "understanding",
    "recent",
    "players",
    "game",
    "recognizing",
    "room",
    "different",
    "design",
    "choices",
    "fact",
    "one",
    "reasons",
    "chose",
    "topic",
    "last",
    "year",
    "huge",
    "amount",
    "attention",
    "investment",
    "hype",
    "directed",
    "currencies",
    "going",
    "comment",
    "speculate",
    "current",
    "future",
    "exchange",
    "rates",
    "think",
    "agree",
    "anyone",
    "looking",
    "buy",
    "cryptocurrency",
    "really",
    "know",
    "mean",
    "terms",
    "analogies",
    "vague",
    "connections",
    "gold",
    "mining",
    "mean",
    "actual",
    "direct",
    "description",
    "computers",
    "send",
    "receive",
    "create",
    "cryptocurrencies",
    "one",
    "thing",
    "worth",
    "stressing",
    "even",
    "though",
    "going",
    "dig",
    "details",
    "takes",
    "meaningful",
    "time",
    "actually",
    "need",
    "know",
    "details",
    "want",
    "use",
    "cryptocurrency",
    "like",
    "need",
    "know",
    "details",
    "happens",
    "hood",
    "swipe",
    "credit",
    "card",
    "like",
    "digital",
    "payment",
    "lots",
    "applications",
    "let",
    "send",
    "receive",
    "currencies",
    "without",
    "thinking",
    "going",
    "difference",
    "backbone",
    "underlying",
    "bank",
    "verifies",
    "transactions",
    "instead",
    "clever",
    "system",
    "decentralized",
    "trustless",
    "verification",
    "based",
    "math",
    "born",
    "cryptography",
    "start",
    "want",
    "actually",
    "set",
    "aside",
    "thought",
    "cryptocurrencies",
    "minutes",
    "going",
    "begin",
    "story",
    "something",
    "earth",
    "ledgers",
    "digital",
    "signatures",
    "friends",
    "exchange",
    "money",
    "pretty",
    "frequently",
    "paying",
    "share",
    "dinner",
    "bill",
    "inconvenient",
    "exchange",
    "cash",
    "time",
    "might",
    "keep",
    "communal",
    "ledger",
    "records",
    "payments",
    "intend",
    "make",
    "point",
    "future",
    "alice",
    "pays",
    "bob",
    "20",
    "bob",
    "pays",
    "charlie",
    "40",
    "things",
    "like",
    "ledger",
    "going",
    "something",
    "public",
    "accessible",
    "everyone",
    "like",
    "website",
    "anyone",
    "go",
    "add",
    "new",
    "lines",
    "let",
    "say",
    "end",
    "every",
    "month",
    "get",
    "together",
    "look",
    "list",
    "transactions",
    "settle",
    "spent",
    "received",
    "put",
    "money",
    "pot",
    "received",
    "spent",
    "take",
    "money",
    "protocol",
    "part",
    "simple",
    "system",
    "might",
    "look",
    "like",
    "anyone",
    "add",
    "lines",
    "ledger",
    "end",
    "every",
    "month",
    "get",
    "together",
    "settle",
    "one",
    "problem",
    "public",
    "ledger",
    "like",
    "anyone",
    "add",
    "line",
    "prevent",
    "bob",
    "going",
    "writing",
    "alice",
    "pays",
    "bob",
    "100",
    "without",
    "alice",
    "approving",
    "supposed",
    "trust",
    "transactions",
    "sender",
    "meant",
    "well",
    "first",
    "bit",
    "cryptography",
    "comes",
    "digital",
    "signatures",
    "like",
    "handwritten",
    "signatures",
    "idea",
    "alice",
    "able",
    "add",
    "something",
    "next",
    "transaction",
    "proves",
    "seen",
    "approved",
    "infeasible",
    "anyone",
    "else",
    "forge",
    "signature",
    "first",
    "might",
    "seem",
    "like",
    "digital",
    "signature",
    "even",
    "possible",
    "mean",
    "whatever",
    "data",
    "makes",
    "signature",
    "read",
    "copied",
    "computer",
    "prevent",
    "forgeries",
    "well",
    "way",
    "works",
    "everyone",
    "generates",
    "called",
    "public",
    "key",
    "pair",
    "looks",
    "like",
    "string",
    "bits",
    "private",
    "key",
    "sometimes",
    "also",
    "called",
    "secret",
    "key",
    "abbreviate",
    "sk",
    "abbreviating",
    "public",
    "key",
    "pk",
    "name",
    "suggests",
    "secret",
    "key",
    "something",
    "want",
    "keep",
    "real",
    "world",
    "handwritten",
    "signature",
    "looks",
    "matter",
    "document",
    "signing",
    "digital",
    "signature",
    "actually",
    "much",
    "stronger",
    "changes",
    "different",
    "messages",
    "looks",
    "like",
    "string",
    "1s",
    "0s",
    "commonly",
    "something",
    "like",
    "256",
    "bits",
    "altering",
    "message",
    "even",
    "slightly",
    "completely",
    "changes",
    "signature",
    "message",
    "look",
    "like",
    "speaking",
    "little",
    "formally",
    "producing",
    "signature",
    "involves",
    "function",
    "depends",
    "message",
    "private",
    "key",
    "private",
    "key",
    "ensures",
    "produce",
    "signature",
    "fact",
    "depends",
    "message",
    "means",
    "one",
    "copy",
    "one",
    "signatures",
    "forge",
    "another",
    "message",
    "second",
    "function",
    "used",
    "verify",
    "signature",
    "valid",
    "public",
    "key",
    "comes",
    "play",
    "output",
    "true",
    "false",
    "indicate",
    "signature",
    "produced",
    "private",
    "key",
    "associated",
    "public",
    "key",
    "using",
    "verification",
    "wo",
    "go",
    "details",
    "exactly",
    "functions",
    "work",
    "idea",
    "completely",
    "infeasible",
    "find",
    "valid",
    "signature",
    "know",
    "secret",
    "key",
    "specifically",
    "strategy",
    "better",
    "guessing",
    "checking",
    "random",
    "signatures",
    "check",
    "using",
    "public",
    "key",
    "everyone",
    "knows",
    "think",
    "many",
    "signatures",
    "length",
    "256",
    "bits",
    "2",
    "power",
    "256",
    "stupidly",
    "large",
    "number",
    "call",
    "astronomically",
    "large",
    "would",
    "giving",
    "way",
    "much",
    "credit",
    "astronomy",
    "fact",
    "made",
    "supplemental",
    "video",
    "devoted",
    "illustrating",
    "huge",
    "number",
    "right",
    "let",
    "say",
    "verify",
    "signature",
    "given",
    "message",
    "valid",
    "feel",
    "extremely",
    "confident",
    "way",
    "someone",
    "could",
    "produced",
    "knew",
    "secret",
    "key",
    "associated",
    "public",
    "key",
    "used",
    "verification",
    "making",
    "sure",
    "people",
    "sign",
    "transactions",
    "ledger",
    "pretty",
    "good",
    "one",
    "slight",
    "loophole",
    "alice",
    "signs",
    "transaction",
    "like",
    "alice",
    "pays",
    "bob",
    "100",
    "even",
    "though",
    "bob",
    "ca",
    "forge",
    "alice",
    "signature",
    "new",
    "message",
    "could",
    "copy",
    "line",
    "many",
    "times",
    "wants",
    "combination",
    "remains",
    "valid",
    "get",
    "around",
    "make",
    "sign",
    "transaction",
    "message",
    "include",
    "sort",
    "unique",
    "id",
    "associated",
    "transaction",
    "way",
    "alice",
    "pays",
    "bob",
    "100",
    "multiple",
    "times",
    "one",
    "lines",
    "ledger",
    "requires",
    "completely",
    "new",
    "signature",
    "great",
    "digital",
    "signatures",
    "remove",
    "huge",
    "aspect",
    "trust",
    "initial",
    "protocol",
    "even",
    "still",
    "really",
    "would",
    "relying",
    "honor",
    "system",
    "sorts",
    "namely",
    "trusting",
    "everyone",
    "actually",
    "follow",
    "settle",
    "cash",
    "end",
    "month",
    "example",
    "charlie",
    "racks",
    "thousands",
    "dollars",
    "debt",
    "refuses",
    "show",
    "real",
    "reason",
    "revert",
    "back",
    "cash",
    "settle",
    "people",
    "owe",
    "lot",
    "money",
    "maybe",
    "clever",
    "idea",
    "never",
    "actually",
    "settle",
    "cash",
    "long",
    "way",
    "prevent",
    "people",
    "spending",
    "much",
    "take",
    "maybe",
    "start",
    "everyone",
    "pay",
    "100",
    "pot",
    "first",
    "lines",
    "ledger",
    "read",
    "alice",
    "gets",
    "100",
    "bob",
    "gets",
    "100",
    "charlie",
    "gets",
    "100",
    "etc",
    "accept",
    "transactions",
    "someone",
    "spending",
    "already",
    "ledger",
    "example",
    "first",
    "two",
    "transactions",
    "charlie",
    "pays",
    "alice",
    "50",
    "charlie",
    "pays",
    "bob",
    "50",
    "try",
    "add",
    "charlie",
    "pays",
    "20",
    "would",
    "invalid",
    "invalid",
    "never",
    "signed",
    "notice",
    "means",
    "verifying",
    "transaction",
    "requires",
    "knowing",
    "full",
    "history",
    "transactions",
    "point",
    "also",
    "going",
    "true",
    "cryptocurrencies",
    "though",
    "little",
    "room",
    "optimization",
    "interesting",
    "step",
    "removes",
    "connection",
    "ledger",
    "actual",
    "physical",
    "us",
    "dollars",
    "theory",
    "everyone",
    "world",
    "using",
    "ledger",
    "could",
    "live",
    "whole",
    "life",
    "sending",
    "receiving",
    "money",
    "ledger",
    "without",
    "ever",
    "convert",
    "real",
    "us",
    "dollars",
    "fact",
    "emphasize",
    "point",
    "let",
    "start",
    "referring",
    "quantities",
    "ledger",
    "ledger",
    "dollars",
    "ld",
    "short",
    "course",
    "free",
    "exchange",
    "ledger",
    "dollars",
    "real",
    "us",
    "dollars",
    "example",
    "maybe",
    "alice",
    "gives",
    "bob",
    "10",
    "bill",
    "real",
    "world",
    "exchange",
    "adding",
    "signing",
    "transaction",
    "10",
    "bob",
    "pays",
    "alice",
    "10",
    "communal",
    "ledger",
    "exchanges",
    "like",
    "guaranteed",
    "protocol",
    "analogous",
    "might",
    "exchange",
    "dollars",
    "euros",
    "currency",
    "open",
    "market",
    "independent",
    "thing",
    "first",
    "important",
    "thing",
    "understand",
    "bitcoin",
    "cryptocurrency",
    "ledger",
    "history",
    "transactions",
    "currency",
    "course",
    "bitcoin",
    "money",
    "enter",
    "ledger",
    "people",
    "buying",
    "using",
    "cash",
    "get",
    "new",
    "money",
    "enters",
    "ledger",
    "minutes",
    "actually",
    "even",
    "significant",
    "difference",
    "current",
    "system",
    "ledger",
    "dollars",
    "cryptocurrencies",
    "work",
    "far",
    "said",
    "ledger",
    "public",
    "place",
    "like",
    "website",
    "anyone",
    "add",
    "new",
    "lines",
    "would",
    "require",
    "trusting",
    "central",
    "location",
    "namely",
    "hosts",
    "website",
    "controls",
    "rules",
    "adding",
    "new",
    "lines",
    "remove",
    "bit",
    "trust",
    "everybody",
    "keep",
    "copy",
    "ledger",
    "want",
    "make",
    "transaction",
    "like",
    "alice",
    "pays",
    "bob",
    "100",
    "ledger",
    "dollars",
    "broadcast",
    "world",
    "people",
    "hear",
    "record",
    "private",
    "ledgers",
    "unless",
    "something",
    "system",
    "absurdly",
    "bad",
    "could",
    "get",
    "everyone",
    "agree",
    "right",
    "ledger",
    "bob",
    "receives",
    "transaction",
    "like",
    "alice",
    "pays",
    "bob",
    "10",
    "ledger",
    "dollars",
    "sure",
    "everyone",
    "else",
    "received",
    "believes",
    "transaction",
    "able",
    "later",
    "go",
    "charlie",
    "use",
    "10",
    "ledger",
    "dollars",
    "make",
    "transaction",
    "really",
    "imagine",
    "listening",
    "transactions",
    "broadcast",
    "sure",
    "everyone",
    "else",
    "recording",
    "transactions",
    "order",
    "really",
    "heart",
    "issue",
    "interesting",
    "puzzle",
    "come",
    "protocol",
    "accept",
    "reject",
    "transactions",
    "order",
    "feel",
    "confident",
    "anyone",
    "else",
    "world",
    "following",
    "protocol",
    "personal",
    "ledger",
    "looks",
    "problem",
    "addressed",
    "original",
    "bitcoin",
    "paper",
    "high",
    "level",
    "solution",
    "bitcoin",
    "offers",
    "trust",
    "whichever",
    "ledger",
    "computational",
    "work",
    "put",
    "take",
    "moment",
    "explain",
    "exactly",
    "means",
    "involves",
    "cryptographic",
    "hash",
    "function",
    "general",
    "idea",
    "build",
    "use",
    "computational",
    "work",
    "basis",
    "trust",
    "make",
    "fraudulent",
    "transactions",
    "conflicting",
    "ledgers",
    "require",
    "infeasible",
    "amount",
    "computation",
    "bring",
    "remind",
    "getting",
    "well",
    "weeds",
    "beyond",
    "anyone",
    "would",
    "need",
    "know",
    "use",
    "currency",
    "like",
    "really",
    "cool",
    "idea",
    "understand",
    "understand",
    "heart",
    "bitcoin",
    "cryptocurrencies",
    "first",
    "things",
    "first",
    "hash",
    "function",
    "inputs",
    "one",
    "functions",
    "kind",
    "message",
    "file",
    "really",
    "matter",
    "output",
    "string",
    "bits",
    "kind",
    "fixed",
    "length",
    "like",
    "256",
    "bits",
    "output",
    "called",
    "hash",
    "digest",
    "message",
    "intent",
    "looks",
    "random",
    "random",
    "always",
    "gives",
    "output",
    "given",
    "input",
    "idea",
    "slightly",
    "change",
    "input",
    "maybe",
    "editing",
    "one",
    "characters",
    "resulting",
    "hash",
    "changes",
    "completely",
    "fact",
    "hash",
    "function",
    "showing",
    "called",
    "sha256",
    "way",
    "output",
    "changes",
    "slightly",
    "change",
    "input",
    "entirely",
    "unpredictable",
    "see",
    "hash",
    "function",
    "cryptographic",
    "hash",
    "function",
    "means",
    "infeasible",
    "compute",
    "reverse",
    "direction",
    "show",
    "string",
    "1s",
    "0s",
    "ask",
    "find",
    "input",
    "sha256",
    "hash",
    "input",
    "gives",
    "exact",
    "string",
    "bits",
    "better",
    "method",
    "guess",
    "check",
    "want",
    "feel",
    "much",
    "computation",
    "would",
    "needed",
    "go",
    "two",
    "256",
    "guesses",
    "take",
    "look",
    "supplement",
    "video",
    "actually",
    "way",
    "much",
    "fun",
    "writing",
    "thing",
    "might",
    "think",
    "really",
    "dig",
    "details",
    "exactly",
    "function",
    "works",
    "could",
    "reverse",
    "engineer",
    "appropriate",
    "input",
    "without",
    "guess",
    "check",
    "one",
    "ever",
    "figured",
    "way",
    "interestingly",
    "cold",
    "hard",
    "rigorous",
    "proof",
    "hard",
    "compute",
    "reverse",
    "direction",
    "yet",
    "huge",
    "amount",
    "modern",
    "security",
    "depends",
    "cryptographic",
    "hash",
    "functions",
    "idea",
    "property",
    "look",
    "algorithms",
    "underlie",
    "secure",
    "connection",
    "browser",
    "making",
    "youtube",
    "right",
    "makes",
    "bank",
    "likely",
    "see",
    "name",
    "sha256",
    "show",
    "right",
    "focus",
    "function",
    "prove",
    "particular",
    "list",
    "transactions",
    "associated",
    "large",
    "amount",
    "computational",
    "effort",
    "imagine",
    "someone",
    "shows",
    "list",
    "transactions",
    "say",
    "hey",
    "found",
    "special",
    "number",
    "put",
    "number",
    "end",
    "list",
    "transactions",
    "apply",
    "sha256",
    "entire",
    "thing",
    "first",
    "30",
    "bits",
    "output",
    "zeros",
    "hard",
    "think",
    "find",
    "number",
    "well",
    "random",
    "message",
    "probability",
    "hash",
    "happens",
    "start",
    "30",
    "successive",
    "zeros",
    "1",
    "2",
    "30",
    "1",
    "billion",
    "sha256",
    "cryptographic",
    "hash",
    "function",
    "way",
    "find",
    "special",
    "number",
    "like",
    "guessing",
    "checking",
    "person",
    "almost",
    "certainly",
    "go",
    "billion",
    "different",
    "numbers",
    "finding",
    "special",
    "one",
    "know",
    "number",
    "really",
    "quick",
    "verify",
    "run",
    "hash",
    "see",
    "30",
    "zeros",
    "words",
    "verify",
    "went",
    "large",
    "amount",
    "work",
    "without",
    "go",
    "effort",
    "called",
    "proof",
    "work",
    "importantly",
    "work",
    "intrinsically",
    "tied",
    "list",
    "transactions",
    "change",
    "one",
    "transactions",
    "even",
    "slightly",
    "would",
    "completely",
    "change",
    "hash",
    "go",
    "another",
    "billion",
    "guesses",
    "find",
    "new",
    "proof",
    "work",
    "new",
    "number",
    "makes",
    "hash",
    "altered",
    "list",
    "together",
    "new",
    "number",
    "starts",
    "30",
    "zeros",
    "think",
    "back",
    "distributed",
    "ledger",
    "situation",
    "everyone",
    "broadcasting",
    "transactions",
    "want",
    "way",
    "agree",
    "correct",
    "ledger",
    "mentioned",
    "idea",
    "behind",
    "original",
    "bitcoin",
    "paper",
    "everyone",
    "trust",
    "whichever",
    "ledger",
    "work",
    "put",
    "way",
    "works",
    "first",
    "organize",
    "given",
    "ledger",
    "blocks",
    "block",
    "consists",
    "list",
    "transactions",
    "together",
    "proof",
    "work",
    "special",
    "number",
    "hash",
    "whole",
    "block",
    "starts",
    "bunch",
    "zeros",
    "moment",
    "let",
    "say",
    "start",
    "60",
    "zeros",
    "later",
    "return",
    "back",
    "systematic",
    "way",
    "might",
    "want",
    "choose",
    "number",
    "way",
    "transaction",
    "considered",
    "valid",
    "signed",
    "sender",
    "block",
    "considered",
    "valid",
    "proof",
    "work",
    "also",
    "make",
    "sure",
    "standard",
    "order",
    "blocks",
    "make",
    "block",
    "contain",
    "hash",
    "previous",
    "block",
    "header",
    "way",
    "go",
    "back",
    "change",
    "one",
    "blocks",
    "swap",
    "order",
    "two",
    "blocks",
    "would",
    "change",
    "block",
    "comes",
    "changes",
    "block",
    "hash",
    "changes",
    "one",
    "comes",
    "would",
    "require",
    "redoing",
    "work",
    "finding",
    "new",
    "special",
    "number",
    "blocks",
    "makes",
    "hashes",
    "start",
    "60",
    "zeros",
    "blocks",
    "chained",
    "together",
    "like",
    "instead",
    "calling",
    "ledger",
    "common",
    "call",
    "blockchain",
    "part",
    "updated",
    "protocol",
    "allow",
    "anyone",
    "world",
    "block",
    "creator",
    "means",
    "going",
    "listen",
    "transactions",
    "broadcast",
    "collect",
    "block",
    "whole",
    "bunch",
    "work",
    "find",
    "special",
    "number",
    "makes",
    "hash",
    "block",
    "start",
    "60",
    "zeros",
    "find",
    "broadcast",
    "block",
    "found",
    "reward",
    "block",
    "creator",
    "work",
    "puts",
    "together",
    "block",
    "allow",
    "include",
    "special",
    "transaction",
    "top",
    "gets",
    "say",
    "10",
    "ledger",
    "dollars",
    "thin",
    "air",
    "called",
    "block",
    "reward",
    "exception",
    "usual",
    "rules",
    "whether",
    "accept",
    "transactions",
    "come",
    "anyone",
    "signed",
    "also",
    "means",
    "total",
    "number",
    "ledger",
    "dollars",
    "economy",
    "increases",
    "new",
    "block",
    "creating",
    "blocks",
    "often",
    "called",
    "mining",
    "since",
    "requires",
    "lot",
    "work",
    "introduces",
    "new",
    "bits",
    "currency",
    "economy",
    "hear",
    "read",
    "miners",
    "keep",
    "mind",
    "really",
    "listening",
    "transactions",
    "creating",
    "blocks",
    "broadcasting",
    "blocks",
    "getting",
    "rewarded",
    "new",
    "money",
    "miners",
    "perspective",
    "block",
    "like",
    "miniature",
    "lottery",
    "everyone",
    "guessing",
    "numbers",
    "fast",
    "one",
    "lucky",
    "individual",
    "finds",
    "special",
    "number",
    "makes",
    "hash",
    "block",
    "start",
    "many",
    "zeros",
    "get",
    "reward",
    "anyone",
    "else",
    "wants",
    "use",
    "system",
    "make",
    "payments",
    "instead",
    "listening",
    "transactions",
    "start",
    "listening",
    "blocks",
    "broadcast",
    "miners",
    "updating",
    "personal",
    "copies",
    "blockchain",
    "key",
    "addition",
    "protocol",
    "hear",
    "two",
    "distinct",
    "blockchains",
    "conflicting",
    "transaction",
    "histories",
    "defer",
    "longest",
    "one",
    "one",
    "work",
    "put",
    "tie",
    "wait",
    "hear",
    "additional",
    "block",
    "makes",
    "one",
    "longer",
    "even",
    "though",
    "central",
    "authority",
    "everyone",
    "maintaining",
    "copy",
    "blockchain",
    "everyone",
    "agrees",
    "give",
    "preference",
    "whichever",
    "blockchain",
    "work",
    "put",
    "way",
    "arrive",
    "decentralized",
    "consensus",
    "see",
    "makes",
    "trustworthy",
    "system",
    "understand",
    "point",
    "trust",
    "payment",
    "legit",
    "actually",
    "really",
    "helpful",
    "walk",
    "exactly",
    "would",
    "take",
    "fool",
    "someone",
    "using",
    "system",
    "maybe",
    "alice",
    "trying",
    "fool",
    "bob",
    "fraudulent",
    "block",
    "namely",
    "tries",
    "send",
    "one",
    "includes",
    "paying",
    "100",
    "ledger",
    "dollars",
    "without",
    "broadcasting",
    "block",
    "rest",
    "network",
    "way",
    "everyone",
    "else",
    "still",
    "thinks",
    "100",
    "ledger",
    "dollars",
    "would",
    "find",
    "valid",
    "proof",
    "work",
    "miners",
    "working",
    "block",
    "could",
    "definitely",
    "happen",
    "maybe",
    "alice",
    "happens",
    "win",
    "miniature",
    "lottery",
    "everyone",
    "else",
    "bob",
    "still",
    "going",
    "hearing",
    "broadcasts",
    "made",
    "miners",
    "keep",
    "believing",
    "fraudulent",
    "block",
    "alice",
    "would",
    "work",
    "keep",
    "adding",
    "blocks",
    "special",
    "fork",
    "bob",
    "blockchain",
    "different",
    "hearing",
    "rest",
    "miners",
    "remember",
    "per",
    "protocol",
    "bob",
    "always",
    "trusts",
    "longest",
    "chain",
    "knows",
    "alice",
    "might",
    "able",
    "keep",
    "blocks",
    "chance",
    "finds",
    "blocks",
    "quickly",
    "rest",
    "miners",
    "network",
    "combined",
    "unless",
    "close",
    "50",
    "computing",
    "resources",
    "among",
    "miners",
    "probability",
    "becomes",
    "overwhelming",
    "blockchain",
    "miners",
    "working",
    "grows",
    "faster",
    "single",
    "fraudulent",
    "blockchain",
    "alice",
    "feeding",
    "bob",
    "enough",
    "time",
    "bob",
    "reject",
    "hearing",
    "alice",
    "favor",
    "longer",
    "chain",
    "everyone",
    "else",
    "working",
    "notice",
    "means",
    "necessarily",
    "trust",
    "new",
    "block",
    "hear",
    "immediately",
    "instead",
    "wait",
    "several",
    "new",
    "blocks",
    "added",
    "top",
    "still",
    "heard",
    "longer",
    "blockchains",
    "trust",
    "block",
    "part",
    "chain",
    "everyone",
    "else",
    "using",
    "hit",
    "main",
    "ideas",
    "distributed",
    "ledger",
    "system",
    "based",
    "proof",
    "work",
    "less",
    "bitcoin",
    "protocol",
    "works",
    "many",
    "cryptocurrencies",
    "work",
    "details",
    "clear",
    "earlier",
    "said",
    "proof",
    "work",
    "might",
    "find",
    "special",
    "number",
    "hash",
    "block",
    "starts",
    "60",
    "zeros",
    "well",
    "way",
    "actual",
    "bitcoin",
    "protocol",
    "works",
    "periodically",
    "change",
    "number",
    "zeros",
    "take",
    "average",
    "10",
    "minutes",
    "find",
    "new",
    "block",
    "miners",
    "added",
    "network",
    "challenge",
    "gets",
    "harder",
    "harder",
    "way",
    "miniature",
    "lottery",
    "one",
    "winner",
    "every",
    "10",
    "minutes",
    "many",
    "newer",
    "cryptocurrencies",
    "much",
    "shorter",
    "block",
    "times",
    "money",
    "bitcoin",
    "ultimately",
    "comes",
    "block",
    "reward",
    "beginning",
    "rewards",
    "50",
    "bitcoin",
    "per",
    "block",
    "actually",
    "great",
    "website",
    "go",
    "called",
    "block",
    "explorer",
    "makes",
    "easy",
    "look",
    "bitcoin",
    "blockchain",
    "look",
    "first",
    "blocks",
    "chain",
    "contain",
    "transactions",
    "50",
    "bitcoin",
    "reward",
    "miner",
    "every",
    "blocks",
    "every",
    "4",
    "years",
    "reward",
    "gets",
    "cut",
    "half",
    "right",
    "reward",
    "bitcoin",
    "per",
    "block",
    "reward",
    "decreases",
    "geometrically",
    "time",
    "means",
    "never",
    "21",
    "million",
    "bitcoin",
    "existence",
    "however",
    "mean",
    "miners",
    "stop",
    "earning",
    "money",
    "addition",
    "block",
    "reward",
    "miners",
    "also",
    "pick",
    "transaction",
    "fees",
    "way",
    "works",
    "whenever",
    "make",
    "payment",
    "purely",
    "optionally",
    "include",
    "transaction",
    "fee",
    "go",
    "miner",
    "whichever",
    "block",
    "includes",
    "payment",
    "reason",
    "might",
    "incentivize",
    "miners",
    "actually",
    "include",
    "transaction",
    "broadcast",
    "next",
    "block",
    "see",
    "bitcoin",
    "block",
    "limited",
    "2400",
    "transactions",
    "many",
    "critics",
    "argue",
    "unnecessarily",
    "restrictive",
    "comparison",
    "visa",
    "processes",
    "average",
    "1700",
    "transactions",
    "per",
    "second",
    "capable",
    "handling",
    "per",
    "second",
    "comparatively",
    "slow",
    "processing",
    "bitcoin",
    "makes",
    "higher",
    "transaction",
    "fees",
    "since",
    "determines",
    "transactions",
    "miners",
    "choose",
    "include",
    "new",
    "block",
    "far",
    "comprehensive",
    "coverage",
    "cryptocurrencies",
    "still",
    "many",
    "nuances",
    "alternate",
    "design",
    "choices",
    "even",
    "touched",
    "hope",
    "provide",
    "stable",
    "understanding",
    "anyone",
    "looking",
    "add",
    "branches",
    "reading",
    "like",
    "said",
    "start",
    "one",
    "motives",
    "behind",
    "lot",
    "money",
    "started",
    "flowing",
    "towards",
    "cryptocurrencies",
    "even",
    "though",
    "want",
    "make",
    "claims",
    "whether",
    "good",
    "bad",
    "investment",
    "really",
    "think",
    "healthy",
    "people",
    "getting",
    "game",
    "least",
    "know",
    "fundamentals",
    "technology",
    "always",
    "sincerest",
    "thanks",
    "making",
    "channel",
    "possible",
    "patreon",
    "understand",
    "everyone",
    "position",
    "contribute",
    "still",
    "interested",
    "helping",
    "one",
    "best",
    "ways",
    "simply",
    "share",
    "videos",
    "think",
    "might",
    "interesting",
    "helpful",
    "others",
    "know",
    "know",
    "really",
    "help"
  ],
  "keywords": [
    "mean",
    "bitcoin",
    "many",
    "people",
    "digital",
    "currency",
    "need",
    "verify",
    "transactions",
    "one",
    "really",
    "knows",
    "know",
    "get",
    "make",
    "sure",
    "details",
    "actually",
    "feel",
    "going",
    "step",
    "might",
    "start",
    "payments",
    "friends",
    "using",
    "communal",
    "ledger",
    "trust",
    "world",
    "less",
    "clever",
    "cryptography",
    "help",
    "end",
    "called",
    "cryptocurrency",
    "first",
    "example",
    "currencies",
    "different",
    "fact",
    "huge",
    "amount",
    "exchange",
    "think",
    "agree",
    "anyone",
    "actual",
    "send",
    "cryptocurrencies",
    "thing",
    "even",
    "though",
    "time",
    "want",
    "use",
    "like",
    "happens",
    "payment",
    "let",
    "without",
    "instead",
    "system",
    "verification",
    "minutes",
    "something",
    "ledgers",
    "signatures",
    "money",
    "cash",
    "keep",
    "point",
    "alice",
    "pays",
    "bob",
    "charlie",
    "public",
    "everyone",
    "website",
    "go",
    "add",
    "new",
    "lines",
    "say",
    "every",
    "month",
    "together",
    "look",
    "list",
    "settle",
    "received",
    "put",
    "take",
    "protocol",
    "part",
    "prevent",
    "100",
    "well",
    "comes",
    "idea",
    "able",
    "transaction",
    "infeasible",
    "else",
    "forge",
    "signature",
    "makes",
    "read",
    "way",
    "works",
    "key",
    "looks",
    "string",
    "bits",
    "private",
    "also",
    "secret",
    "real",
    "much",
    "changes",
    "256",
    "message",
    "slightly",
    "completely",
    "function",
    "depends",
    "means",
    "copy",
    "second",
    "valid",
    "output",
    "associated",
    "exactly",
    "functions",
    "work",
    "find",
    "guessing",
    "random",
    "check",
    "large",
    "number",
    "would",
    "right",
    "given",
    "someone",
    "could",
    "making",
    "times",
    "include",
    "requires",
    "still",
    "namely",
    "dollars",
    "show",
    "back",
    "lot",
    "maybe",
    "never",
    "gets",
    "accept",
    "two",
    "50",
    "signed",
    "interesting",
    "us",
    "whole",
    "gives",
    "10",
    "adding",
    "understand",
    "said",
    "require",
    "broadcast",
    "hear",
    "listening",
    "order",
    "whichever",
    "computational",
    "cryptographic",
    "hash",
    "fraudulent",
    "getting",
    "always",
    "input",
    "change",
    "sha256",
    "see",
    "reverse",
    "hard",
    "proof",
    "special",
    "30",
    "zeros",
    "billion",
    "starts",
    "broadcasting",
    "blocks",
    "block",
    "60",
    "blockchain",
    "reward",
    "miners",
    "miniature",
    "lottery",
    "longer",
    "rest",
    "network",
    "working",
    "hearing",
    "per",
    "chain"
  ]
}