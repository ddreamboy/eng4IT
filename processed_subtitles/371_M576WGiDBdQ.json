{
  "text": "hello everybody and welcome to the free\ncode camp blockchain and solidity\nbeginner to expert full course python\nEdition we're going to go through\neverything you need to know for\ndeveloping on a blockchain using\nsolidity and engaging in the future of\nFinance we're going to cover topics that\nwill teach you all the skills you need\nto become a smart contract expert that\nyou can take with you no matter which\nblockchain you're developing on\nblockchain Engineers are in extreme\ndemand and they're building billion\ndooll applications almost every day at\nthis point at the time of filming\nprotocols like a ur. finance and\nsynthetics have billions of dollars of\nlocked value in them allowing people to\nengage and decentralized finance or defi\nthis allows people to make censorship\nresistant moves and so much more some of\nthese protocols with billions of dollars\nare even less than a year old so whether\nor not you're brand new to this space or\nyou've been in here a while hi my name\nis Patrick Collins and I live in the\nsmart contract World I'll be taking you\nthrough your journey to becoming a\nblockchain and smart contract expert a\nlittle bit of background on myself I'm\nan engineer and developer Advocate on\nthe chain link protocol and I also have\nmy own blockchain infrastructure company\ncalled Alpha chain where I run different\nnodes and different infrastructure for\nblockchains including one of the main\nTechnologies we're going to be talking\nabout today which is ethereum I love\nbeing a Pioneer in the smart contract\necosystem and I love taking new users\nlike yourself along to the journey with\nus and we are going to teach you to\nbecome a smart contract expert building\nblockchain and solidity applications is\nbuilding a world of more trust and\naccountability it means building a\nfinancially free future and we get to be\nthe ones that will go down in the\nhistory books as the pioneers of this\nspace additionally blockchain and smart\ncontract engineering skills are some of\nthe most sought after in the world with\nan average salary of a solidity\ndeveloper being between $ 150 and\n$175,000 in this video we're going to\nteach you how to become one of these\ndevelopers and go out into the world and\nparticipate in the world of smart\ncontracts and the world of blockchain\nthis course is ideally for engineers who\nknow a little bit of Python Programming\nand you can have any level of smart\ncontract engineering whether you're a\ncomplete beginner to blockchains and you\ndon't even know what one is or you're an\nadvanced solidity engineer and you're\nlooking to learn more this is the\nperfect place for you having a little\nbit of experience in other\nobjectoriented programming language like\nJavaScript as well will be helpful here\ntoo and if you're brand new to coding in\ngeneral that's a right because we're\ngoing to take you step by step through\neverything if you do want a little bit\nmore in-depth python coding video there\nis a fantastic free code Camp video in\nthe description if you do prefer\nJavaScript we will also be releasing a\nJavaScript edition of this video as well\nbut everything that you learn here will\nbe applicable there and if you watch\nboth you'll learn even more you can find\nthe entire itinerary for this entire\ncourse along with all of the code\nassociated with everything that we do\nand additionally discussions and support\nand everything else in this smart\ncontract Kit full blockchain solidity\ncourse Pi GitHub repository it has a\ntable of contents and then the entire\nitinerary of everything that we're going\nto go over in this course and like I\nsaid with helpful tips resources for\ngetting support and resources for\ngetting help now for your convenience\nevery single piece of code that we're\ngoing to go over in this video has a\nGitHub repository associated with it so\nbe sure to grab the link in the\ndescription grab that GitHub repository\nand look through all the different repos\nthat we're going to give you if you ever\nget lost or need to refer to some code\nor want to copy paste some code all of\nit will be there for you it'll also be a\ngreat place to reference in the future\nwhen you're working on some project and\nyou want to remember how to do something\nso be sure to start and refer back to it\nas you watch this video so let's talk a\nlittle bit about some best practices for\nwatching this video this space moves\nreally quickly so if we show you some\ndocumentation it might be a good idea\nfor you to open that documentation up as\nwell read through it as we do so you can\nstay up to speed now we've packed a ton\nof information into this video and\nStudies have shown if you try to digest\na massive amount of information in a\nshort period of time your retention\nisn't as good so it's highly recommended\nthat every 25 minutes to half an hour\nyou take a 5 minute break and then every\ntwo hours maybe you take an additional\n30 minute or an hour long break you can\npause bookmark areas and come back later\nand learn at your own speed there are\ntime stamps in the description that will\nhelp you come back to where you left off\nand you don't even have to go in order\nif you want to bounce around from from\ntopic to topic you're absolutely free to\ndo so we're also going to get really\ntechnical with the fundamentals of\nblockchain and if you want to just jump\nright into solidity you can jump down\nthe time stamps below and get right into\nit and if you're watching this on\nYouTube you can adjust the speed that I\ntalk and then I give this presentation\nso if I'm talking way too quickly for\nyou you can slow it down or if I'm\ntalking too slowly for you you can have\nme speed up so be sure to set me at the\npace that you like best we're highly\nencouraged to pause come back and ask\nquestions the blockchain and smart\ncontract world is a very collaborative\ncommunity so if you have questions some\nof the best places that you can go going\nto stack Overflow and tagging your\nquestion with the specific technologies\nthat you're working on make an issue on\nthe GitHub repo that we're working with\ngo to stack exchange eth and make a\nquestion there as well jump into the\nDiscord of the technology that you're\nworking with or even on GitHub\ndiscussions if those are there learning\nto become a blockchain and solidity\nengineer is actually a lot more than\njust learning solidity becoming\ncomfortable with all the tools in the\nspace is going to be just as essential\nas becoming familiar with solidity\nitself and continuing the conversation\non maybe Twitter or Reddit or any of\nthese other channels and maybe even\nshowing your stuff in the next ethereum\nor chain link hackathon are going to be\nmajorly beneficial to increasing your\nskill as an engineer now before we get\nactually coding a lot of people want to\nunderstand what is actually happening\nwith all this blockchain stuff what is\nblockch what is a smart contract how did\nthis all get started and understanding\nthese core fundamentals will actually\nshape the way you code and architect\nyour smart contract applications so\nlearning these is really really critical\nhowever if you're already familiar with\nblockchain and you just want to jump\ninto the solidity feel free to grab a\ntimestamp from the description and jump\nto that\nsection now since you're here though\nyou've probably heard of Bitcoin before\nBitcoin was one of the first protocols\nto use this revolutionary technology\ncalled blockchain the Bitcoin white\npaper was released by The pseudo\nAnonymous Satoshi Nakamoto and it\noutlined how Bitcoin could be used to\nmake peer-to-peer transactions in a\ndecentralized network this network is\npowered by cryptography and allows\npeople to engage in censorship resistant\nFinance in a decentralized manner due to\nsome of the features of Bitcoin a lot of\npeople took it to be as a superior store\nof value over another asset like let's\nsay gold and that's why it's commonly\nreferred to as digital gold similar to\nGold there is a scarce and set amount of\nit on the planet and people use it to\nbuy and sell similar to other assets you\ncan read more about the original Vision\nin the white paper and there's a link to\nit in the description now this was a\nfantastic breakthrough and in a little\nbit we're actually going to look through\nhow blockchains can actually work and\nhow all of this is possible but some\npeople took this and and saw this\ntechnology and thought that they could\ndo even more a few years later a man\nnamed metallic butterin released a white\npaper describing a new protocol called\nethereum which used this same blockchain\ninfrastructure but with an additional\nfeature and in 2015 they released this\nproject called ethereum him and a number\nof other co-founders took this\nblockchain technology and applied it in\nways that people can make entire\ndecentralized applications decentralized\norganizations and build smart contracts\nand engage in agreements without a\nthird-party intermediary or centralized\ngoverning force their idea was to take\nthe same pieces that made Bitcoin great\nand add smart contracts to it and in\nfact this technically wasn't even a new\nidea back in 1994 a man named Nick Zabo\nproposed a technology called smart\ncontracts a smart contract is a\nself-executing set of instructions that\nis executed without a third-party\nintermediary they come to life on a\nblockchain and these smart contracts are\nreally going to be the core thing that\nwe're going to be working with and we're\ngoing to be developing smart contracts\nare similar to regular traditional\ncontracts that people make between each\nother but instead of writing these\ncontracts down on pen and paper or\ntyping them on the computer it's\nentirely written in code the terms of\nthe agreement are written in code and\nautomatically executed by the\ndecentralized blockchain network instead\nof being written pen and paper and\nexecuted by the two parties or three\nparties or however many parties involved\nthis was one of the main differentiators\nbetween the ethereum protocol and the\nBitcoin protocol now technically Bitcoin\ndoes also have Smart contracts however\nthey're not touring complete meaning\nthat they don't have the full range of\ncapabilities as a touring complete\napplication like ethereum this was\nactually an intentional move by the\nBitcoin developers they view the Bitcoin\nNetwork as an asset whereas ethereum and\nthe ethereum developers viewed that acid\nas an asset and also a utility for\npeople to build these smart contracts\nnow these smart contracts are\nrevolutionary Technologies and we're\ngoing to talk a little bit more about\nwhat their advantage is in a little bit\nbut they actually come with a fatal flaw\nwith what's known as the Oracle problem\nthese blockchains are deterministic\nsystems and will learn why they're\ndeterministic very soon and this\ndeterminism means that they're a Walled\nGarden meaning that everything that\nhappens in these smart contracts and on\nthis block blockchain happens in this\nlittle box now of course if you want\nthese smart contracts to actually be\nthese digital Superior agreements then\nthey need some way to interact with the\nreal world and get real data and\nexternal outside the blockchain\ncomputation this is where oracles come\ninto play oracles are devices that bring\ndata into a blockchain or execute some\ntype of external computation so great so\noracles are the solution now blockchains\ncan talk to the real world right well\nnot quite are blockchains and smart\ncontct contracts are these decentralized\napplication and in order for them to\nstay decentralized that means they would\nalso need to get their data and external\ncomputation from a decentralized manner\nas well your onchain logic will be\ndecentralized on the blockchain but\nyou'll also need your offchain data and\nexternal computation decentralized as\nwell combining these onchain logic\nsettlement layers and these offchain\ndata and external computation builds\nwhat's called hybrid smart contracts and\na large majority of defi applications\nand the largest applications today are\nthese hybrid smart contracts this is\nwhere the protocol chain link comes into\nplay chain link is a decentralized\nmodular Oracle Network that allows you\nto bring data into your smart contracts\nand do external computation and it's\nthese hybrid smart contracts that can\nhave this onchain settlement and\ninteract with the real world in some\nmeaningful way chain link is an\nincredibly powerful Oracle Network\nbecause it allows us to get data get\nRandomness do some type of upkeep or\nreally customize our smart contracts in\nany way we want and Elevate them to do\nanything that we want them to do now\nthroughout the course when we're talking\nabout smart contracts often times we are\nalso talking about hybrid smart\ncontracts smart contracts is used a\nlittle bit interchangeably with hybrid\nsmart contracts but just know that when\nwe say hybrid smart contract we're\ntalking specifically about smart\ncontracts with an offchain component now\nthroughout this video you'll hear people\nsay smart contract you'll hear people\nsay decentralized protocol decentralized\napplication or dap and they kind of all\nare a little bit interchangeable a\ndecentralized application is usually a\ncombination of several smart contracts\nand when we start coding some solidity\nyou'll see what a singular smart\ncontract or singular contract looks like\nsmart contracts are going to be what we\ncode write and deploy for the majority\nof this video and learning some of these\nfundamental concepts will allow us to be\nbetter smart contract and better\nsolidity developers now since its\nInception the ethereum protocol has\ngiven rise to many new pair paradigms\nand industries including defi nfts Dows\nor decentralized autonomous\norganizations layer 2s and so much more\nand a couple of other protocols have\ntaken this ethereum vision and gone in a\ndifferent direction with it like polygon\npolka dot or Avalanche if we learn the\ncore basics of smart contract\ndevelopment on the ethereum platform all\nthese skills translate to these other\nchains as well so don't worry about\nlearning a specific tool or chain\nbecause most of them work together\npretty seamlessly now there are a few\nexceptions to this Rule and there are\nsome smart contract platforms AKA\nblockchains that don't use solidity\nhowever learning the fundamental skills\nhere will still translate to every\nsingle other blockchain and ethereum is\nby far the most popular and most used\nsmart contract blockchain or smart\ncontract protocol you'll also hear those\nwords used a little interchangeably as\nwell sometimes I'll say blockchain or\nsometimes I'll say smart contract\nplatform smart contract protocol and the\nlike similarly chain link is the most\npopular and Powerful decentralized\nOracle Network and it's going to be the\none that we're going to focus on here\nchain link is also blockchain and smart\ncontract platform agnostic meaning it'll\nwork on ethereum Avalanche polygon polka\ndot or really any blockchain or smart\ncontract platform out there even in this\nintroduction we've already learned a lot\nso let's do a quick summary of what\nwe've talked about Bitcoin was the first\napplication to take the blockchain\ntechnology into the Limelight in into a\nmeaningful way Bitcoin is a sort of\ndigital gold able to make transactions\nbetween users as almost a sort of\ncurrency ethereum takes this blockchain\ntechnology one step further but you can\nalso build smart contract or\ndecentralized applications decentralized\nautonomous organizations and more\nbecause you can code with smart\ncontracts these smart contracts can then\naccess external data and external\ncomputation outside the blockchain using\nwhat's called oracles chain link is the\nmost powerful decentralized Oracle\nNetwork and allows us to build these\nhybrid smart contracts which is a\ncombination of decentralized onchain\nlogic settlement layer and any\ndecentralized external offchain data or\ncomputation hybrid smart contracts and\nsmart contracts are often used\ninterchangeably now you're probably\nasking yourself a lot of questions right\nnow like what makes Bitcoin so\ninteresting what makes it like a digital\ngold and how are these smart contracts\ngoing to add any value to the real world\nand that's what we're going to go into\nnext now so before we get into the\nnitty-gritty of how these blockchains\nand how these smart contracts actually\nwork from a low level let's go high\nlevel and talk about some of the\nfeatures and massive advantages that\nblockchains and smart contracts have\nover our traditional environments the\nfirst feature that these have is they\nare decentralized and you'll hear this\nterm used a lot because it has a massive\nbenefit blockchains are decentralized\nmeaning there's no centralized source\nthat controls the blockchain the\nindividuals that make up blockchain are\nknown as node operators and they are the\nindependent individuals running the\nsoftware that connects the whole\nblockchain together it's all these\ndifferent independent individuals that\nmake the blockchain and blockchain like\nnetworks decentralized we'll dive deeper\ninto that concept later a great example\nof why this is so fundamentally\ngroundbreaking is if we go back to what\nhappened recently even with Robin Hood\nand GameStop GameStop share were no\nlonger allowed to be bought because a\ncentralized entity didn't want them to\nbe bought anymore so they flipped a\nswitch and nobody could buy that stock\nanymore essentially having a single\nentity controlling the entire Financial\nMarket the fact that a single entity has\nthe power to make these choices for us\nis a travesty and blockchain is here to\nsolve that there's a narrative here\ncalled The bankless Narrative where\nusers can actually live in a world where\nthey don't have a bank bank Banks while\ngood in their own right have a history\nof doing some shady things they also\nhave the power to potentially freeze\nyour funds not letting you withdraw or\nmove or do anything because they are a\ncentralized entity that again can flip a\nswitch and control how you interact with\nyour life every day being free of these\ncentralized entities have this much\npower and this much control over your\nlife has widespread positive\nramifications transparency and\nflexibility everything that's done on a\nblockchain and all the rules that are\nmade can be seen by everyone there's no\nbackdoor deals there's no Shady\nhappenings everything that happens on\nchain you can see this means that\nthere's no special information that a\nfew have everyone has to play by the\nsame rules and everyone can see exactly\nwhat those rules are now additionally\nthis doesn't mean that everything you do\nis tracked the blockchain is pseudo\nAnonymous so you can create different\naccounts in you can interact with it in\nmany different ways this leads me to my\nfreedom point but I'll get there in a\nsecond speed and efficiency have you\never tried to make a withdrawal from the\nbank and it took 3 to five days all the\nbank is doing is adding and subtracting\nnumbers basic first grade math so why\ndoes it take so long because blockchains\nare verified by a decentralized\ncollective the settlement or withdrawal\nperiod in this case is substantially\nfaster and depending on the blockchain\nthat you're using it can be from 10\nminutes all the way down to just a\ncouple of seconds in the stock trading\nor hedphone World it can actually take\nup to a week for your buy or sell of a\nstock to go through security and\nimmutability blockchains are immutable\nwhich means they can't be changed and\nbecause of this it means that they can't\nbe tampered with or corrupted in any way\nshape or form this allows us to have\nmassive Security on our data on our\ntransactions and anything of the like if\nyour computer goes down and your backup\ncomputers go\ndown in the regular World your data is\ngone if all your data is on those two\ncomputers you're out of luck on a\nblockchain if several nodes go down it\ndoesn't matter because as long as one\nnode in the entire system is running the\ndata is safe and secure there are\nthousands or hundreds of thousands of\nnodes running these blockchain softwares\nmeaning that everything that happens\nhappens and is immutable and won't\nchange\nhacking the blockchain is nearly\nimpossible and substantially harder than\nhacking a centralized entity and this is\nalso much more secure in the asset sense\nas well instead of having gold in a\nvault or a contract written on a piece\nof paper or on your computer you have a\nasset that is locked on the blockchain\nforever and all you need to do to access\nit is have a private key or\npneumonic which is essentially a\npassword so you don't have to lug your\ngold around or lug your contracts around\nwith you it is always on the blockchain\nsmart contracts in particular remove a\nmassive conflict of interest in the\ntraditional world when we engage with\nusers or individuals they don't always\nhave our best interests at heart a lot\nof them are usually self-motivated in\nsome sense and there's nothing wrong\nwith that that's how a lot of people are\nhowever when we make an agreement with\nthem this agreement can have a massive\nconflict of interest with the user who's\nsupposed to execute that agreement let's\ntake insurance for example if I pay an\ninsurance provider $100 a month I'm\npaying them $100 and in the event that I\nget hit by a bus we've made an agreement\nor a contract that they're going to pay\nmy medical bills or bail me out however\nthey have this massive conflict of\ninterest insurance companies aren't in\nthe business of giving out money they're\nin the business of making money so even\nthough they've signed this agreement\nwhen this event occurs they still don't\nwant to pay this money out to me and if\nthey can find a loophole in the contract\nthey will because that is what they are\nmotivated to do so they sign this\nagreement but it's not in their best\ninterest to do so so they have this\nmassive conflict of interest and this is\nnative in all the agreements that we\nmake today they are the ones who decides\nwhether or not they're going to execute\ntheir agreement giving execution power\nto the party that doesn't want to\nexecute something has often led to\nfrustration now the followup is you can\nalways sue them and go through these\nprocess but now you're wasting all this\ntime going through this long process to\nget something that you should have\noriginally gotten in the first place\nthis leads me to one of the biggest\nvalue ads of smart contracts smart\ncontracts allow us to engage in\ntrustless and Trust minimized agreements\nwe currently live in a world of brand\nbased agreements if I engage in some\nagreement and I don't like the service\nthat I'm provided\nmy alternative to this is to waltz down\nthe street to another brand to another\nservice who's going to make the exact\nsame set of promises to me and then I\nhave to trust them that they're going to\nexecute Faithfully smart contracts allow\nus to move from this brand-based\nagreements to math-based agreements\nthese math-based agreements we don't\neven have to trust that they're going to\ndo the right thing hence the name\ntrustless 1+ one is always going to\nequal two in a math World whatever the\ncode determines is the input output\nthat's exactly what's going to happen\nevery single time now for me these\nreally all add up to two major pieces\nfreedom and trustless all these pieces\nallow us to live in a world that's more\naccountable more trusting more friendly\nand just better it allows us to work in\nan environment in a universe where\nthings just work it allows us us to do\nthe freedom to engage with other people\nhow we wish because there's no\ncentralized controlling body influencing\nevery action that we make all the rules\nare the same and no one's getting\nspecial treatment this brings out this\nnew world of Economic Opportunity as\nwell and as our lives become more and\nmore digital we're constantly being\nbombarded with centralized services that\nwant us to use their interface so they\ncan profit on how we interact and force\nus or push us to making the decisions\nthat they're motivated for us to make\nsmart contracts decentralized\napplications and blockchain allows us to\nbe free of these repressors and live in\nan environment that's truly free and\ntrustless so with all that high level\nbeing said let's do a quick summary of\nwhat we just learned blockchains are\ndecentralized meaning that they are not\ncontrolled by a single centralized\nentity it is run by a network of\nindependent users transparency\nblockchains are transparent everything\nthat happens on a blockchain everybody\nelse can see and everybody else can work\nwith and see that everyone's playing by\nthe same rules blockchains are quick and\nefficient especially when it comes to\nmonetary policy settlement on\nblockchains are fast and easy a\nmutability and security blockchains\ncan't be changed or tampered with or\ncorrupted and are incredibly incredibly\nsecure smart contracts remove the\nmassive conflict of interest traditional\nagreements have Smart contracts allow us\nto move away from political brand-based\nagreements to secure math-based\nagreements smart contracts allow us to\nengage in trustless and Trust minimized\nagreements smart contracts are a set of\ninstructions which when placed on a\nblockchain are self-executing pieces of\ncode not run by any centralized\nintermediary in addition smart contracts\nare typically paired with some type of\nOracle to get some information about the\nreal world when smart contracts are\npaired with an oracle they're called\nhybrid smart contracts chain link is a\nsecure decentralized modular Oracle\nNetwork used to bring data into your\nsmart contracts and also make some type\nof external computation I also briefly\nwant to mention Dows or decentralized\nautonomous organizations you'll hear\nthis referred to a lot as well\ndecentralized autonomous organizations\nare organizations that live online and\nlive in these smart contracts they're\nsimilar to a regular organization in the\ntraditional World however they have\npeople who maybe hold governance tokens\nto make voting decisions or they do all\ntheir governance on chain on this\ndecentralized settlement layer giving us\nthe freedom to engage with each other as\nwe please so now that we've taken our\nfirst dive into blockchain and smart\ncontracts and at least from a high level\nunderstood why they're so advantageous\nlet's jump in let's get an ethereum\nwallet and let's make our first\ntransaction on a live blockchain are you\nready now let's jump into ethereum we're\ngoing to make our first interaction with\nthe ethereum blockchain and once we do\nthis interaction once we make this\ntransaction then we're going to go back\nand look at what actually happened what\nwere the technical implications that\nallowed this transaction to go through\nso in order for us to interact with\nblockchain the first thing that we're\ngoing to need is an ethereum\nwallet so I'm going to go ahead and go\nto metamask because it's one of the most\npopular wallets and one of the easiest\nto use we're going to go ahead and\ndownload it I am using the brave browser\nbut it works for Chrome Firefox or\nreally any other browsers and it's just\ngoing to be a little extension in the\ntop right hand of your browser this way\nwe can really easily see at any times\nwhat we have in our\nwallet this will store all of our\nethereum based currencies so I'm going\nto go ahead and install metamask for\nbrave\nadd to Brave ADD\nextension and now we can go ahead and\nget started with working with brave this\nis the first step you absolutely need to\ntake when starting your journey and one\nof the easiest steps to take so we're\ngoing to go ahead and get started and\nwe're going to create a brand new wallet\nso we're going to go ahead and hit\ncreate wallet if you already have a\nwallet you can actually import it via I\nhave a seed phrase and we'll talk about\nthis seed phrase or secret phrase in a\nlittle bit so let's go ahead and create\ncreate a new wallet and sure we'll agree\nto help out metamask now we will create\nour password make sure that this is\nreally secure for the purpose of this\ndemo my passwords are just going to be\npassword but please don't have that be\nyour password now when I'm doing my\ntesting and when I'm doing my coding I\nactually use a separate account from the\naccount that I actually have real money\nin however if you want to use this\naccount and actually put real ethereum\nand put real money into it you\nabsolutely 100% need to back this up so\nwe're going to go ahead and click reveal\nsecret words I'm showing you guys here\nbecause uh this is just a demo and I\ndon't really care however if you show\nthis secret phrase to anybody else they\nwill have access to all the funds in\nyour application so everything that\nwe're going to do in this tutorial we're\ngoing to use fake money we're going to\nuse not real money so it doesn't matter\nhowever if you're going to actually put\nmoney in here you absolutely need to\nhave this written down because if you\nlose access to this Andor your private\nKeys which we'll talk about in a little\nbit you will lose access to your wallet\nand you will lose access to all your\nfunds so they give some tips like store\nthis phrase in a password manager like\none password write this phrase down on a\npiece of paper put it in a secure uh\nlocation memorize it whatever you want\nto do just make sure you have this\nbacked up somewhere I'm just going to go\nahead and hit download this for now and\nI'm going to save it on my computer it's\nnot best practice to save it to your\ncomputer it is much better to use a\npassword manager or write it down on a\npiece of paper or something but again\nbecause we're just demoing here I'm\ngoing I'm going to show you it here and\nwe're not going to put any real funds\ninto this so we're going to go ahead and\nhit next and it's going to ask us\nto make sure and it's going to ask us to\nverify that we actually have it written\ndown and we're going to go ahead and hit\nconfirm and great and it gives us a\ncouple other tips remember definitely\ntake these tips very seriously\nespecially if you're going to use this\nfor real money like I said for this demo\nwe're just going to use test money so\nit's not as big of a deal but if you put\nreal money in you absolutely need to\nback up this seed phrase or secret\nphrase or we're going to refer to it as\nour pneumonic phrase awesome now we can\nsee the user interface of this wallet\nand depending on your browser if you\nactually go ahead and look in your\nextensions you can pin it to your\nbrowser and you can even just click it\nand get the same interface here let's\ntake some inventory of what is actually\ngoing on in here and what we actually\nhave our pneumonic phrase that secret\nphrase that we got has given us access\nto a new account and here's the address\nof our account we can use a tool like\nether scan to view different addresses\nand what's been going on with them so if\nwe look at this address that we just\ncreated on ether scan we can see that no\ntransactions have happened it's empty it\nhas zero ether in it it has Zer doar\nworth of value in it and this address\nhere is our unique address this address\nrepresents\nexclusively this single account that\nwe've just created we'll talk a a little\nbit more about ether scan in a bit as\nit's a tool that we're going to use more\nand more now we can even click this\ncircle here and we can even create more\naccounts and give it a different account\nname we'll call it account\ntwo this one has a different address so\nif we go ahead go back to Ether scan and\nlook this up this one has a different\naddress here so we can have multiple\naddresses in here and now if I click\nthis I have two accounts account one and\naccount two\nthe pneumonic that we've been given\ngives us access to create multiple\naccounts with that same pneumonic so\nhaving that pneumonic will give us\naccess to every single account that's\never created with that pneumonic this is\nwhy securing your pneumonic is so\ncrucial especially if you create\nmultiple different accounts now each\naccount has a unique identifier with\nthem as well so so this right here is\nthe public address when we copy this\nthis is the public address of that\naccount\nhowever there's also a private key to\nwork with this account a secret key and\nwe can go ahead and view it by clicking\nthese three dots go to Account Details\nand Export private\nkey put our password in and confirm so\nthis is going to be our private key so\nthis is a single password associated\nwith this account if you give somebody\nelse access to this private key they\nwill have access to my account two they\nwon't have access to my account one\nbecause the private key key of account\ntwo is only associated with account two\nthe pneumonic however is associated with\nall accounts and this is why when people\nsay store your private keys in a safe\nplace or store your keys in a safe face\nthey're usually referring to both your\npneumonic and your private keys if you\nlose your private key you lose access to\nthis account if you lose your pneumonic\nyou lose access to all your accounts so\nlong story short back up your pneumonic\nsince it has access to everything and\nback up your private Keys too but just\nkeep in mind that only have access to\nthe individual accounts and great those\nare some of the main security pieces\nhere now what else is going on in\nmetamask is we can see this section here\nthat says ethereum main net if we click\nit we actually see a bunch of other\nnetworks in here so when you buy eth and\nwhen you work with eth you're working on\nthe ethereum main net when you interact\nwith smart contracts or defi or anything\nthings that we're going to talk about\nlater on Main net with real value you're\ngoing to be working on the main net\nhowever since we're Engineers of often\ntimes we're going to want to test our\napplications or do some type of\nintegration tests or just make sure our\ncode actually works so there's also\nwhat's called test Nets these are\nnetworks that resemble ethereum and work\nexactly the same way as ethereum does\nhowever they're not with real money and\nit's just for testing your applications\nso we can even go to Ether scan and look\nup rink be ether scan we can see the\nrink be test on Explorer we look look up\nat our address and it's the exact same\ninformation here nothing has gone on on\nrink B and this is totally different so\nwhen we make a transaction these are all\ndifferent networks and if it says test\nNetwork it's made to be made without\nreal money later on we're actually going\nto show you how to work with other evm\ncompatible Chains Don't worry about what\nevm compatible means for now but we can\nwork with avalanch polygon and other\napplications through this networks\ninterface as well so remember a test N\nblockchain is a blockchain where the\ncurrency doesn't have any real value but\nit resembles and acts exactly like the\nethereum main net so we can test our\napplications so we can test and practice\nour\napplications in fact what we're going to\ndo right now is make our first\ntransaction on the rink B test net and\nthis will simulate exactly what it's\nlike to make a transaction on the\nethereum main net so we're going to go\nto this application called the rink B\nfaucet this is where we're going to make\nour first transaction rink B is going to\nbe one of two test Nets that we're\nactually going to work with the other\ntest net that we're going to work with\nis going to be Coen it's important to\nknow how to switch between test Nets and\nevm compatible chains which is why we're\ngoing to be working with both for now\nwe're just going to be working with rink\nb a faucet is a test application that\ngives us free test ethereum hence why it\nhas no value because anybody can get it\nfor free from one of these faucets so to\nget testnet ethereum with this\napplication we actually have to post a\ntweet or a Facebook post with this tweet\nso I'm actually going to I'm going to\nsign in real quick and now that I'm\nsigned in I can post this tweet\nrequesting faucet funds\ninto and this is where I'm going to put\nmy address on the rinky ethereum test\nNetwork going to go ahead and tweet that\nout now that I have this we're going to\ncopy link to tweet and we're going to\nplace it in here and we're going to hit\ngive me ether and we're going to say 18\n75 ether for 3 days and it said funding\nrequest accepted for Patrick Alpha C\ninto this and what we can do then is if\nwe take this address again we go over to\nRinky ether\nscan we now see that the balance is\n18.75 and we can even see that in our\nwallet on the rink be Network we have\n18.75 eth but again if we look at main\nnet we have nothing there if we look at\nRobson we have nothing there we look at\nrinky we have 18.75 right so these are\nvery different networks and we've just\nmade our first\ntransaction we've been given\n18.75 eth and if we refresh this page we\nalso see that this is our first\ntransaction that was made some account\nsent us 18.75 ether from this account to\nus and we can actually even look at the\ndetails of this transaction ether scan\nis what's known as a block Explorer\nblock explorers are applications that\nallow us to see details of things that\nhappen on a blockchain easily we can see\nthe transaction details of this\ntransaction here and whenever we work\nwith smart contracts we will also see\nthem in a transaction similar to what\nwe're seeing right here and again we'll\ntalk about that soon now we can see a\nnumber of information here we see a\nunique transaction hash this hash or\nthis unique identifier uniquely\nidentifies this transaction as the key\nof what this transaction is we see that\nit was a successful transaction this is\nthe block number which we'll talk about\nin a little bit we see it was from this\nunique account which looks like they've\ndone a ton of transactions because this\nis the faucet account to our account\nthat we created value was 18.75 ether\nand then we have these transaction fees\ngas price gas limit and gas use now gas\nrefers to to the fee paid to node\noperators for successfully including a\ntransaction in a blockchain now exactly\nhow this works is actually going to\nchange pretty soon but the concept is\nbasically anytime you want to change the\nstate of blockchain whether this is\nsending some ethereum or making any type\nof transaction you actually have to pay\na little bit of ethereum or a little bit\nof that native blockchain token to\nactually execute that transaction\nwhenever we do something on the\nblockchain it costs gas and if we do\nsomething that would take a lot of\nenergy for the blockchain to do it will\ncost more gas so if I send a single\ntransaction that's going to cost 21,000\ngas however if I were to do if I were to\nsend a transaction that called the smart\ncontract function and did a whole bunch\nof other stuff it would cost more gas so\nwe see here when we got sent 18.75 eth\nwhoever sent us at eth also paid the\nblockchain miners or the blockchain\nvalidators a little bit of ethereum to\ninclude our transaction now we actually\nget to pick how much of a fee we want to\nsend with our transactions so let's look\nat another example so in our accounts in\nmetamask let's even expand the view here\nwe have two different accounts we have\naccount one and account two account one\nhas\n18.75 account two has\nzero we can actually send money from\naccount one to account two and again\nremember this is all fake money so so\nwe're going to go ahead and hit trans\ntransfer between my accounts so we're\ngoing to send money to account two and\nhere's where we can see some transaction\ndetails and we see the asset that we're\ngoing to send which we only have\nethereum in this wallet so we're only\ngoing to send ethereum later on we'll\nlearn how to get different assets into\nthis wallet we're going to choose an\namount I'm just going to choose to send\none and then we have these pieces here\nuh associated with the transaction fee\nso we have a gas price in guay and a gas\nlimit so when we send a transaction we\ncan choose a gas limit we can say hey if\nthis transaction is going to spend more\ngas than 21,000 gas we're not going to\ndo it we also get to set a gas price in\nguay but here's the quick example of\nguay versus\n[Music]\nethereum one ether is this many guay and\none guay is this much ether because if\nwe just said hey could you send me 0 0 1\nether that would be kind of really\nobnoxious so we just say semi1 way or\nsemi1 guay so I know we've been throwing\nthis gas term around for a little bit\nbut here is it basically simplified gas\nis going to be the measurement of how\nmuch computation something uses the gas\nprice is going to be how much it costs\nper unit of gas a gas limit is going to\nbe the maximum amount of gas that can be\nused in a transaction so for example if\nwe make a trans action that uses 21,000\ngas and each one gas is one guay in\nprice that means we're going to pay\n21,000 guay in transaction fee so back\nin our transaction we have we're saying\nthe gas price is going to be one gay the\ntransaction fee is going to be the gas\nthat we use which will be up to this gas\namount times the gas price so it'll be\n21,000 gay will be the trans transaction\nfee so then the question is well why\nwould we ever bump it up why would we\nwant to pay more gas price why do I even\nhave the option to pay more well and\nthis comes down to block space we'll\ntalk about this a little bit more when\nwe get into how the blockchain actually\nworks but the blockchain can only\nprocess so many transactions at a time\nand nodes and blockchain nodes can only\nprocess so many at a time so when I make\na transaction a node has to decide why\nthey want to include my transaction into\nthe block and if there are a ton of\npeople looking to make these\ntransactions then the nodes are going to\nbe highly incentivized to pick the\ntransactions that are going to give them\na high price that are going to give them\na lot of money for including that\ntransaction so this is what's called eth\ngas station and it is a a gas estimator\nof the blockchain it currently says that\nif you want to get your transaction in\nright away it's going to cost you 31 gay\nto do so\nif you want to get it in less than 5\nminutes it's going to take you maybe\nabout 21 gay so the gas prices of\nethereum fluctuate with how much people\nuse it and the gas prices of all these\nblockchains fluctuate with how much\npeople use it so this is an important\nconcept so typically when you're setting\nyour gas price in a transaction you can\ntake a look see at you know gas station\nand say okay if I want mine to go in\nright away I'm going to do ASAP if I\nwant to go in fast maybe I'll do you\nknow this fast amount standard I'll do\nthis the standard amount but it all\ndepends on how many people are looking\nto work with this blockchain at the same\ntime and and as you can see it\nfluctuates pretty quickly right it just\nwent all the way up to 46 so maybe more\npeople are using the blockchain now this\nis obviously for the eth main net and on\nthe test net there's not going to be\nthat same competition but we can still\nchange it anyway so if I go ahead and do\n100 for the gas price and I hit next and\nI hit confirm if I go to activity I now\nhave this transaction in my metamask but\nI can go ahead and view this on ether\nscan as\nwell and we can see this is what it\nlooks like when it's still processing\nthis transaction and now I can see that\nit's passed and now if we look at the\ngas price we see it's 100 gay and this\nis what we set it as when we were\nworking with it before so gas price is\n100 gay here versus our first original\ntransaction was just one guay and now if\nwe look at our metamask we can see that\nthe funds have indeed been subtracted\nfrom this account\nand they have been added to this account\nnow there's one eth in this account\nawesome and you can see the activity\nthere's one eth in here so again the\nreason that these gas prices exist is\nbecause nodes can only put so many\ntransactions into a block so they're\nhighly incentivized to input the\ntransactions that are going to give them\na higher fee so in times when a lot of\npeople are looking to use a blockchain\nprices will get very high and when very\nfew people are using a blockchain prices\nwill be very low this ether scan tool is\nincredibly incredibly powerful and we\nwill be using it more and more as time\ngoes on now here's something that's\nincredibly exciting with just this\nlittle bit of information you now know\nhow to interact with blockchains and\ninteract with the ethereum protocol so\nif you don't want to learn how to code\nanything you can go and you can start\ninteracting with ethereum and\ninteracting with protocols with just\nthis much information however I know\nmost of you guys are here to learn how\nto code so let's look under the hood of\nethereum and what is actually going on\nwith these transactions and with these\ngas and with these blockchains and\nwhat's really going on let's learn all\nthe fundamentals of a blockchain now if\nyou want to just go ahead and jump into\nthe coding go ahead and grab a timestamp\nfrom the description however learning\nexactly how the blockchain works is\ngoing to make you an incredibly powerful\ndeveloper so let's take a look at that\nfirst so we're going to be going through\nthis blockchain demo on this site right\nhere now the creator of the site has a\nfantastic video and a fantastic walkthr\nblockchain 101 it is right on their site\nso if you're looking for another\nexplanation definitely check out his\nvideo it is absolutely fantastic but the\nfirst thing that we really need to do in\norder to understand blockchain in order\nto really anything and everything that's\ngoing on here we first really need to\nunderstand this shot 256 hash or hashing\njust kind of in general let's first\nunderstand what a hash is a hash is a\nunique fixed length string meant to\nidentify any piece of data they are\ncreated by putting some piece of data\ninto a hash function in this example uh\nthe hashing algorithm used is Shaw 256\nnow ethereum actually uses uh this this\nright here for its hashing algorithm\nwhich isn't quite um sha 256 but is in\nkind of this sha family but it's it's\nreally just another way to Hash things\nand uh the specific hash algorithm\ndoesn't matter uh so much so uh this\nexample uses sha 256 but you can imagine\nit's the same as the ethereum hash\nthey're just going to you know result in\na different hash so what's going to\nhappen in this application here is\nwhatever data or whatever information we\nput into this data section here as you\ncan see below this hash changes so\nwhat's happening is this data is running\nthrough this Shaw 256 hash algorithm and\nit's outputting this unique hash so this\nhash is a unique fixed length string\nthat's going to identify like a blank\ndata piece here right so if I put in you\nknow my name like you know Patrick\nCollins this is the hash that's going to\nrepresent Patrick holls right and you\ncan see even when I put you know\ntons and tons of data in here the length\nof the string doesn't change right so\nit's always going to be the same amount\nwe can put almost any amount of data in\nhere there is an upper limit on the max\nsize of the data but for all intents and\npurposes we can pretty much put any\nlength in here and you'll see too that\nyou know every time I type in Patrick\nCollins this hash is always going to be\nthis 7 e5b right I'm going to delete it\nI'm going to do Patrick colums again you\nknow 7 e 5B it's always this this unique\nhash is always going to be unique right\nit's always going to be this fixed\nlength string here so now we can take\nthis idea right of putting this data in\nhere and we can move on to uh this\nconcept of a block so with this block\nconcept we're going to take the exact\nsame thing with this hash this this data\nsection right but instead of having\neverything just being in this this\nsingular data area right here we're\ngoing to split this data up into block\nnuns and data so all so what we're going\nto do is we're actually G to hash all\nthree of these to get to get this hatch\nright we're going to put all three of\nthese we're going to say all three of\nthese are combined uh together we're\ngoing to put every all three of them\ninto this hashing algorithm uh to figure\nit out so if I type a bunch of stuff\nhere we can see that block one with nuns\nyou know this nuns and this data we're\ngoing to get this hash and as you can\nsee actually the screen turns red this\nblock turned red now what happens when I\nhit this mind button when I hit this\nmind button it's actually going to take\nsome time it's going to think for a\nlittle bit and we can see that the nuns\nhere actually changed right the nuns is\ndifferent from what it was before and\nthis hash now starts with four zeros\nokay and then it the the back turned\ngreen when we're talking about mining\nwe're talking about miners solving some\ntype of very difficult problem that\ntakes a lot of time to do now in this\nexample here the problem that uh the\nminers had to solve was they had to find\na nuns or or a value in this nun section\nthat when hashed with at block number\none with this data it would start with\nfour zeros so the problem here the\nminers had to solve was to start with\nfour zeros and the only way for them to\nreally do that is kind of this Brute\nForce you know trying stuff so they\ntried one okay one didn't work okay two\nnope two didn't work three no four five\nsix okay five well that started with one\nzero but that's not four and they have\nto keep trying all these numbers until\nthey uh get to this one where you know\nlet's hit mine again\nwhere it has four zeros at the top at\nthe start now this specific problem\nchanges blockchain to blockchain right\nethereum has a different problem for\nminers to solve um Bitcoin has different\nproblems for minor solve but this\nconcept is going to be the same so they\nhave to take um one block is going to be\nthis this uh this concept is going to be\nall this data it's going to be the block\nnumber and it's going to be this nuns\nright and so this nuns is the solution\num is is going to be the the number that\nthey use to get like the solution to the\nproblem right so if I go to one here you\nknow and I do this\nagain going to hit mine and the nuns has\nchanged right it went from one to 33,105\nthat fulfills whatever the problem is so\nthat's really it actually so that's a\nblock and and that's really what's\nhappening when miners are mining they're\njust looking there's trial and error\nBrute Force trying to find this nun so\nso now that we know what a block is\nlet's go to the next step and figure out\nokay well what's a Block Chain so here\nwe have an example of what a block chain\nis going to look like right we have a\ncombination you know we have back here\nin the block section we have one what\none block looks like now here we have\nmultiple different blocks right each one\nof these represents a different block\nbut we have an additional column here or\nwe have additional variable here so like\nbefore you know we have block NS and\ndata right we have block nuns data but\nwe also have this thing called previous\nright and so this is actually going to\nbe pointing to the previous hash of the\nlast block so for example if we go to\nthe the last block in this blockchain it\nsays previous is 00 A8 and if we look at\nthe hash of block number four it's\n000000 a 8 and then we look at its\nprevious it's 4 Z's B9 we have 4 Z B9\nand so on all the way back to our first\nblock which has previous of just all\nzeros right and so the block with the\nprevious of all zeros is going to be\nknown as The Genesis block so You'\nprobably heard that before the Genesis\nBlock it's the first block in the\nblockchain where the previous hash\npoints to a hash that uh doesn't\nactually exist now as you can imagine\nkind of the same as how this block\nworked how the block NS and data all go\ngo through the hashing algorithm in the\nblockchain the block nuns data and\nprevious hash all go through this\nhashing algorithm to figure out you know\nwhat the hash is okay so if we go to\nover here you know for example if I type\nin you know Patrick obviously this is\nnow no longer valid right because this\nnuns uh combined with the block the data\nand the previous hash aren't going to\nsolve you know our problem of having\nfour zeros of the at the start right so\nI'm going to go and fix that and and\nthat's that's kind of an easy way to to\nsee it being broken but but let's take a\nlook if I break this block right here\nwhat happens if I if I break the data in\nhere if I do like in here you can see\nthat both of these are now read both of\nthese are now invalid right because the\nblock hash with the nuns hash with the\nnew data which is my name Patrick hash\nwithe hashed with the previous block is\nnow a brand new hash right and this\nblock is still pointing to this previous\nhash right here right is pointing to the\nprevious block and now it is wrong and\nit is messed up and now um and now its\nNuns with this previous hash is also\nwrong right and this is where when we\ntalk about uh blockchains being\nimmutable this is exactly how it's\nimmutable right because if I go back and\nI change anything you know if I just\ntyped a right here the entire blockchain\nis now invalidated because none of these\nare going to have uh nses that solve\nthis equation anymore so this is why\nblockchains are immutable is because\nanytime you change one thing you ruin\nthe rest of the blockchain okay so\nhowever though you know if if an a was\nhere originally we can go ahead and mine\nthese we can mine all these but as you\ncan see you know this is going to start\ngetting very uh computationally\nexpensive because I have to go redo uh\nbasically the entire blockchain uh and\nthe farther and farther down the line\nyou get the harder and hard it becomes\nto you know rehash and and redo all\nthese different blockchains here now\nthis makes a lot of sense right so we\nhave this block it's really hard to\nchange something in the past but if we\ndo we can just go ahead and remine it\nnow if I'm the one who controls the\nblockchain right if I'm the one who\ncontrols this you know and I want to\nchange something in the past well okay\ngreat all I got to do is change this\ndata here and then you know mine each\none of these you know obviously it's\ngoing to be very computationally\nexpensive but it's something that I can\ndo right if I'm the one who owns the\nblockchain now here's where the\ndecentralized nature or the distributed\nnature really uh makes it incredibly\npowerful so we're going to go to the\ndistributed tab here which I also refer\nto as the decentralized tab here uh and\nit's going to show us what a blockchain\nlooks like uh in a decentralized manner\nso we have this exact same uh initial\nsetup here we have distributed\nblockchain we have you know the our\nfirst blockchain which is kind of\nexactly as the one from here but we also\nhave more than one so we have Pier a\npeer B and Pier C and when people are\ntalking about peer-to-peer peer-to-peer\ntransactions they're really talking uh\nthis is kind of that concept that\nthey're talking about right so we have a\nnumber of of different peers who are\nrunning this blockchain technology\nthey're all weighted equally right each\none of these peers or each one of these\nnodes each one of these entities running\na\nblockchain has the exact same power as\nanybody else right so the way that we\ncan tell very easily which blockchain is\ncorrect or which ones are correct are by\nlooking at this end hash here right are\nby looking at where we are uh in the\nblockchain because again remember\nbecause again remember this hash that\nthis this in this last block here is\ngoing to Encompass all of the blocks\nfrom before right because this last hash\nis going to have the previous hash here\nwhich includes the previous hash here\nwhich this hash includes the previous\nhash here and which so this last hash is\nencompasses everything in here right and\nwe can look we can look at the hash of\nPier C which is four zeros and then e4b\nwe can look at the latest hash of Pier B\nwhich is 4 Z's e4b and then Pier a which\nis 4 Z e4b so all of these peers all of\nthese nodes all of these decentralized\nyou know these independent um all these\nindependent users running this\nblockchain software they're all matched\nup it's very easy for their nodes to\nlook at each other and say hey great we\nare all matched up now what let's say\nthat a decides that you know something\nhappened on the blockchain that they\ndidn't like and they wanted to go back\nand change something right so let's say\nthey change here you know obviously uh\nthe rest of their blockchain is\ninvalidated and they have to spend a lot\nof computational power to catch up to\nspeed so let's go ahead and humor it\nlet's say that they they did they ended\nup catching up uh they ended up catching\nup you know they ended up mining\neverything and now they have a valid\nblockchain right it solves the equation\nawesome however in block number three\nthere's something new right this is here\nand it shouldn't have been here this is\nsomething that perer a put in by\nthemselves all that happens now is look\nat all the blockchains that are running\nthe software and we're looking at all\nthe hashes at hash at block number five\nso p a has this new hash now 009 BC but\nPier B has a different hash 00 e4b right\nso who's right is it is it Pier a with\ntheir new stuff or is it Pier B well\nthat's where the decentralized comes in\nbecause then we can look at Pier C and\nPier C also has e4b so Pier B and Pier C\nboth say hey p a you're wrong get out\nright and Pi a will stop being able to\nparticipate in the mining rewards\nbecause they have essentially forked uh\nthe blockchain and started their own\nlittle blockchain right with their own\nhistory because they're the only ones\nwith this this piece of data in block\nthree whereas Pier B and Pier C have\nnothing in there so that really shows\nwhy uh in these blockchain worlds in\nthis decentralized world there really is\nno centralized entity you know per a you\nknow might have been maliciously\nmotivated to change you know this this\nblock number three however democracy\nrules right the majority rules in the\nblockchain pi b and Pier C both say Hey\nyou know that that's cute and all p a\nbut you're wrong right that that's not\nright now it might be a little abstract\nto just look at data and you know us\ntyping kind of random stuff in here and\nthink okay yeah that's that's data right\nthat makes sense you know just kind of\nrandom strings in here doesn't really do\nanything for us so if we actually go\nover to the Token section here this is\nwhere everything really starts to make a\nlot of sense so we have the exact same\nsetup here uh with Pier a pier B Pier C\nexcept the difference is instead of\nhaving kind of this this data section we\nhave this uh TX this transaction section\nright and this represents all the\ntransactions that are happening in this\nblock right so we're we're sending $25\nfrom Darcy to Bingle or to Bingley uh\nfour uh $427 cents here uh 1922 right\nand it's the exact same thing so this\nall these transactions are going to get\nhashed in the exact same way uh that the\ndata is going to get hashed and and this\nis why it's so powerful because again\nyou know if I want to be malicious right\nif uh if I wanted to say hey I I really\nwanted to give Jane a lot more money\nfrom Elizabeth so I'm p and I go back\nand I change it to 100 well now you know\nnot only do I does my whole blockchain\nuh get invalidated because that was so\nfar so long ago but I'm not going to\nmatch any of these other chains right\nand so my blockchain is going to be\nexcluded from the overall blockchain so\nand let's let's go ahead and fix this\nand it's the same thing if down here if\nI I become malicious and I want to send\nyou know I want uh Miss Audrey to have\nless money maybe I want to send a dollar\nand I go ahead and M it the same thing\nhere this hash now this 2a1 is not going\nto match\npib's pib's hash of BBA and it's not\ngoing to match PC's hash of BBA as well\nso the two of them are going to say hey\nthis your blockchain is invalid it's not\nmatching the majority you know you're\nout right so that's really how uh these\nblockchains work at a low level and it\nall goes back to this this understanding\nthis hash idea and using it in this very\nsophisticated manner uh to kind of\ncryptographically prove um you know\nwhere where stuff lies now the way the\nblockchain works is you instead of\nrandom stuff put in this data section\nit's actually going to be solidity code\nin here to finding ways to interact with\ndifferent blocks and different protocols\nthat are on chain or as we've said\nbefore different smart\ncontracts now the next question that you\nmight be asking is okay well how do I\nknow how can I be sure that I'm the one\nuh you know let's say this is let's say\nI'm Darcy right how can I be sure that I\nwas that Darcy was the one to actually\nsend this money here how do we know that\nDarcy sent $25 to uh Bingley well this\nis where we get into uh private keys and\npublic keys and that's what we're going\nto go into now let's just do a quick\nrecap of what we've learned in this\nsection so far right we've learned that\nethereum actually runs on this KCK 256\nbut you know we used sha to6 for this\ndemo it doesn't really matter we're just\ntalking about hashing algorithms so\nagain a hash is a unique fixed length\nstring meant to identify any piece of\ndata a hash algorithm or a hash function\nis a function or algorithm that computes\nany type of data into a unique hash\nmining is the process of finding the\nsolution to the blockchain problem in\nour example the problem was to find a\nhash that starts with four zeros\nwhenever a node mines a block they get\npaid a little bit of that gas we were\ntalking about earlier for doing so a\nblock in a blockchain is basically a\ncombination of a block nuns transaction\nand a previous hash to create this\nunique hash for this block and again\ndepending on the blockchain\nimplementation this might have a couple\nother fields or might have different\nfields but this is essentially what's\ngoing on blockchains are decentralized\nand distributed because many independent\nusers are going to run this blockchain\nsoftware and they will check and they\nwill compare against each other to see\nwhich blockchains are acting honestly\nand which ones are acting maliciously in\nthe blockchain world majority rules the\nnuns here is the answer used or the\nnumber used to get this hash now nuns is\nkind of an overloaded term it's actually\nused for a number of different reasons\nin this case we're using it to solve\nthis problem of getting you know four or\nfive zeros at the stop of the hash\nhowever in ethereum it'll also be often\nused as the number of transactions from\na given address so now we're going to\ntalk a little bit about signing these\ntransactions and and private keys and\nand some other cryptography pieces right\nbecause in this blockchain demo here we\ncan see we have all these these\nfantastic transactions right all these\nthings went through but how do we know\nthat it was Darcy who was the one to\nsend $25 uh to Bingley right how do we\nknow that actually happened and this is\nwhere all those pieces that we just\nlearned about uh in our our test net in\nour metamask account are really going to\nstart to to come to life here a little\nbit here so here we have an example of\npublic and private Keys okay at the top\nwe have this private key right that was\nthat was randomly generated uh a private\nkey is is you know as it kind of states\nis a key that you really want to keep\nsecret because you're going to be using\nthis uh as kind of your your secret\npassword for all your transactions right\nI can really pick you know any any any\nprivate key anything that I want and\nwith it uh this algorithm they're going\nto use an algorithm you know for\nethereum and Bitcoin they both use this\nelliptic curve digital signature uh\nalgorithm it's it's a variant of just a\ndigital signature algorithm and it's\ngoing to create this this public key\nright I'm really not going to go at all\ninto kind of this digital signature\nalgorithm but just know it does use some\nof these uh some of the hash uh\nknowledge that we just learned combined\nwith some other pieces uh to kind of get\nthis this public key here so I'm not\ngoing to go too deep into it but we have\nthis private key that we create and we\nget this public key now this public key\nwe want everybody to have access to\nright this is yeah whole world can see\nthis this private key we really want it\nto be uh private we don't want people to\nsee this we're going to use this private\nkey as like a password to quote unquote\ndigitally signed transactions and then\npeople can verify them with this public\nkey so let's let's see what this\nactually looks like let's pick a a\nrandom key a more secure key right cuz\nthe longer it is the the more secure\nit's going to be and if we go to\nsignatures now right um let's say we\nhave this uh this message that we want\nright we's say high world right we want\nthis to be the message what's going to\nhappen is this private key that we've\ncreated we can use to sign this data\nright remember how in the blockchain\ndemo you know we were kind of we were\nhashing stuff right we were we're using\nthis shade 256 hash to to get this hash\nwell we're doing something similar but\ninstead of hashing we're we're using\nthis digital signature algorithm to\ncreate this message signature now what's\nreally powerful about how this uh this\nalgorithm works is that you can create\nthis message signature with your private\nkey but somebody else can't derive your\nprivate key from the message signature\nand that's what makes this really really\npowerful however if we go to verify\nusing this public key right uh and so\nthis is the this is that 0403 this is\nthat same public key using this uh using\nthis public key anybody can verify oh\nlet's go ahead and sign it again anybody\ncan verify that this signature is yours\nright so you have a public a private key\njust for you so you can sign things and\na public key that anybody can verify\nsomething right so anybody can verify\nthis and let's say somebody tries to\nfake a transaction from you they say Hey\nyou know this is this is this is their\ntransaction um all they have to do is\nverify that this\nsignature against your public key and\nvery easily this whole thing turns red\nbecause uh it isn't verified right the\nthe algorithm says Hey uhuh that's wrong\nso we can go ahead and take that into\ntransactions in this exact same way so\nif I want to send money you know if I\nwant to send $400 from you know my\naddress to another address using my key\nI can sign that transaction and anybody\nelse in the world can then verif ify\nthis transaction right and this is why\nwhen people say hide your keys you know\nprotect your keys this is what we're\ntalking about in our accounts here right\nif we go to uh settings and again the\nonly reason that I'm showing you guys my\npneumonic and my private key is because\nthis is a uh this is a dumpster account\nI'm going to throw this away at the end\nof this video or I'm just not going to\nput any real money in it um\nbut when we look at our our our metamask\nhere we have this pneumonic phrase which\nallows us to easily get these different\nprivate keys right so uh pneumonic\nphrase combined uh with you know uh\nwhatever account number will get us a\nprivate key so pneumonic phrase combined\nwith one we're going to get this private\nkey and this is when we look at Account\nDetails export private\nkey confirm this is going to be the\nprivate key that we're going to use to\nsign our transactions right this if\nanybody else gets access to this private\nkey they then can sign transactions for\nus and they can send transactions for us\nand that's why we want to keep these\nprivate so uh it works the exact same\nway right so this is why it's so\nimportant to hide your private keys and\nhide your pneumonics now your ethereum\naddress is actually uh a\npiece uh is actually a piece of your\npublic key now to get our address in\nethereum all we have to do is take this\npublic key that we've created with our\nprivate key hash it using that same\nethereum hashing algorithm and then take\nthe last 20 bytes and that's how we'll\nactually derive to our um to our address\nhere now knowing the exact methodology\nof how to get the address doesn't really\nmatter because it could change\nblockchain to blockchain and could even\nchange e to um but just know that that\nis essentially how kind of these\naddresses are derived right there's some\nderivative of the public key right\nbecause the public key is public and you\nknow uh using the public key in kind of\nany public way is is totally fine um but\nnot the private game so that is how we\nsign our transactions note though this\nisn't how we send the transactions so so\nthis is just going to sign it create a\ntransaction for us to send uh we'll\nlearn later on how to send these\ntransactions so that was a lot of\ninformation there too let's do a quick\nrecap your public key is derived by\nusing a digital signature algorithm on\nyour private key right and you want to\nkeep your private key private at all\ntimes because you're going to use your\nprivate key to sign transactions signing\ntransactions with your private key you\nare the only one who can actually do\nthis because you can't get the private\nkey from a message signature however\nusing your public key you can anybody\ncan very easily verify that a signature\nthat's signed by you is in fact signed\nby you in our metamask our private keys\nare located in this Account Details\nsection you just hit uh show Private\nkeys and type in your password and\nyou'll get your your private key here a\nquick note here often times when using\nyour private key somewhere they want it\nin hexadecimal form so if we're going to\nuse our private key um for something\nlike brownie which we'll go into later\nwe need to actually append a zerox to\nthe front but we'll get into that later\nand the address of your account is\nderived from this so if you think about\nit your private key creates your public\nkey which then can create your address\nand there's a little barrier\nhere or a big barrier here because your\npriv private key you want to keep\nprivate and your public key and your\naddress can all be public information\nawesome so now that we know all the\ncryptography pieces and all the little\nnitty-gritties of how the blockchain\nactually works and how our signatures\nwork and how everything sticks together\nlet's talk a little bit about how this\nworks in actuality and what's really\ngoing on now for a lot of this each\ndifferent blockchain has slightly\ndifferent algorithms and slightly\ndifferent metrics and criteria for doing\na lot of this stuff so when we're\ntalking about these specific\nimplementations keep in mind the exact\nalgorithm might be a little bit\ndifferent but the concepts are all still\ngoing to be exactly the same hashing and\nhash function is going to be the same no\nmatter where you look a decentralized\nblockchain is going to be the same no\nmatter where you look how it's actually\nimplemented is going to be a little bit\ndifferent now traditionally when you run\nan application you know be it a website\nor something that connects to some\nserver you are interacting with a\ncentralized entity and unlike how we saw\nwith the blockchain with multiple\ndifferent peers it's going to be run by\na single centralized group now it still\ncould be run on many different servers\nbut all those servers are still going to\nbe controlled by the same centralized\ngroup blockchains as we saw run on a\nnetwork of different independent nodes\nwhen we saw Pier a pier B Pier C those\nwere different examples of different\nindependent users running the blockchain\ntechnology on their own node now when I\nuse the term node I'm usually referring\nto a single instance of a decentralized\nsystem so when I say a single node what\nI'm talking about about a blockchain I'm\ntalking about one of those perer A's\nperer B's Pier C's running that\nblockchain software I'm talking about\none server running this technology and\nagain it's this network it's this\ncombination of these nodes interacting\nwith each other that creates this entire\nblockchain what makes these so potent\ntoo is that anybody can join the network\nand that's why there's decentralized the\nbarrier to entry is a little bit of\nHardware requirements you're getting the\ncorrect materials to run the software\nand then you running the software\nanybody can join these networks and\nparticipate and that's what makes it\ntruly decentralized in fact you can go\nto GitHub right now and run your own\nethereum node in a few seconds now in\nthe traditional World applications are\nrun by centralized entities and if that\nentity goes down or is maliciously\nbribed or decides that they want to shut\noff they just can't because they're the\nones that control everything blockchains\nby contrast don't have this problem if\none node or one entity that runs several\nnodes goes down since there are so many\nother independent nod running that it\ndoesn't matter the blockchain and the\nsystem will persist so long as there is\nat least one node always running and\nluckily for us most of the most popular\nchains like Bitcoin and ethereum have\nthousands and thousands of nodes and as\nwe showed in our demo if one node acts\nmaliciously all the other nodes will\nignore that node and kick that out or or\neven punish it in some systems because\nthey can easily check everybody else's\nnote and see um okay this one is out of\nsync with the majority and yes majority\nrules when it comes to the blockchain\neach blockchain keeps a full list of\nevery transaction and interaction that's\nhappened on that blockchain and we saw\nif a node tries to act maliciously then\nall their hashers are going to be way\nout of whack and they're not going to\nmatch everybody else this gives\nblockchains this incredibly potent\nimmutability trait where nothing can be\nchanged or corrupted so in essence we\ncan think of a blockchain as a\ndecentralized database and with ethereum\nit has an extra additional feature where\nit also can do computation in a\ndecentralized manner now let's talk\nconsensus proof of work and proof of\nstake because you've probably heard\nthese before and they're really\nimportant to how these blockchains\nactually work when we went through that\nblockchain example and we did that\nmining feature this is what's known as\nproof of work proof of work and proof of\nstake fall under this umbrella of\nconsensus and consensus is a really\nimportant topic when it comes to\nblockchains consensus is defined as the\nmechanism used to reach an agreement on\nthe state or a single value on the\nblockchain especially in a decentralized\nsystem I briefly alluded to this\nconsensus mechanism in our blockchain\nexample when I said if one changes\nsomething and the other two don't then\nmajority Will Rule and kick that one out\nthis is part of that consensus mechanism\nnow very roughly a consensus protocol in\na blockchain or decentralized system can\nbe broken down into two pieces a chain\nselection algorithm and a civil\nresistance mechanism that mining piece\nthat we were doing or or the proof of\nwork algorithm is what's known as a\ncivil resistance mechanism and this is\nwhat ethereum and Bitcoin currently use\nplease note that depending on when\nyou're watching this if eth2 is out then\nit's no longer proof of work now proof\nof work is known as a civil resistance\nmechanism because it defines a way to\nfigure out who is the block author which\nnode is going to be the node who did the\nwork to find that mine and be the author\nof that block so all the other nodes can\nverify that it's accurate civil\nresistance is a blockchain's ability to\ndefend against users creating a large\nnumber of pseudo Anonymous identities to\ngain a disproportionately advantageous\ninfluence over said system and in\nlayman's terms it's basically a way for\na blockchain to defend against somebody\nmaking a bunch of fake blockchains so\nthat they can get more and more rewards\nnow there are two types of the Civil\nresistance mechanisms that we're going\nto talk about here namely proof of work\nand proof of stake let's talk about\nproof of work a little bit more in depth\nfirst in proof of work this is silver\nresistant because a single node has to\ngo through a very computational\nexpensive uh process called mining which\nwe demonstrated earlier to figure out\nthe answer to the blockchain's riddle of\nfinding that correct nuns or or whatever\nthe blockchain system has in place in\nproof of work this works because no\nmatter how many pseudo Anonymous\naccounts you make each one still has to\nundergo this very computationally\nexpensive activity of finding the answer\nto the proof of work problem or the\nproof of work riddle which again in our\ndemonstration it was finding a Nuns with\nthat first four zeros but again each\nblockchain might change the riddle or or\nchange the problem to be a little bit\ndifferent in fact some of these\nblockchains make this riddle\nintentionally hard or intentionally easy\nto change What's called the block time\nthe block time is how long it takes\nbetween blocks being published and it's\nproportional to how hard these\nalgorithms are so these problems\nactually can change depending on how\nlong they want the block time to be if a\nsystem wants the block time to be very\nvery long they just make the problem\nvery very hard if they want to be very\nshort they make the problem a lot easier\nwe'll talk about Cil ATT in a little bit\nand how they can affect the system but\nwith proof of work it's a verifiable way\nto figure out who the block author is\nand be civil resistant now you need to\ncombine this with a chain selection rule\ncreate this consensus now there's some\nconsensus protocols that have more\nfeatures but very very roughly these are\nthe two pieces that we're going to look\nat the second piece is going to be a\nchain selection rule how do we know\nwhich blockchain is actually the real\nblockchain and the true blockchain now\non bitcoin and ethereum they both use a\nform of consensus called Nakamoto\nconsensus and this is a combination of\nproof of work and longest chain roll the\ndecentralized network decides that\nwhichever blockchain has the longest\nchain or the most number of blocks on it\nis going to be the chain that they use\nthis makes a lot of sense because every\nadditional block that a chain is behind\nit's going to take more and more\ncomputation for it to come up that's why\nwhen we saw in our transaction we\nactually saw confirmations the number of\nconfirmations is the number of\nadditional blocks added on after after\nour transaction went through in a block\nso if we see confirmations as two it\nmeans that the block that our\ntransaction was in has two blocks ahead\nof it in the longest chain now I do want\nto point out that a lot of people use\nproof of work as a consensus protocol\nand I do want to say that this is a\nlittle bit inaccurate but sometimes\npeople use it interchangeably proof of\nwork is a piece of the overall consensus\nprotocol which in Bitcoin and ethereum\n1's current case is Nakamoto consensus\nNakamoto consensus is a combination of\nproof of work and this longest chain\nrule both equally and very very\nimportant now proof of work also tells\nus where these transaction fees and\nthese block rewards go to remember how\nwhen we made this transaction we had to\ntalk about gas and a transaction fee so\nwho's getting paid who is getting this\ntransaction and this transaction fee is\ngoing to the miners or the validators in\na proof of work Network they're called\nMiners And in the proof of stake Network\nthey're called validators there are a\nlittle bit and we'll get into that when\nwe talk about proof of stake in this\nproof of Works system all these nodes\nare competing against each other to find\nthe answer to the blockchain riddle\nremember in our example it was to find a\nhash that has four zeros at the start\nand again depending on the blockchain\nimplementation that riddle is going to\nbe a little bit different but all the\nnodes are trying as many as possible to\ntry to get this answer first why because\nthe first node to figure out the answer\nto the blockchain r is going to get that\ntransaction fee they're going to get\npaid paid from that now when a node gets\npaid they actually get paid in two\ndifferent ways one is going to be with a\ntransaction fee and another piece is\ngoing to be the block reward remember\nhow we talked about alternating the gas\nprice or the guay on our transaction\nwell that's the transaction fee that\nwe're going to pay to these blockchain\nnodes for including our transaction the\nblock reward is given to these nodes\nfrom the protocol from the blockchain\nitself you've probably heard of the\nBitcoin having before the having is\nreferring to this block reward getting\ncut in half and it's supposed to be cut\nin half roughly every four years this\nblock reward increases the circulating\namount of whatever cryptocurrency that\nis being rewarded for example on\nethereum the Block reward is giving out\nethereum and on bitcoin the block reward\nis giving out Bitcoin so these nodes are\ncompeting against each other to be the\nfirst one to find this transaction to be\nthe first one to find the answer to this\nproblem so that they can be the ones to\nwin both this block reward and your\ntransaction fee some blockchains like\nBitcoin for example have a time when\nthey're no longer going to give out\nblock rewards and the miners or the\nnodes are only going to get paid from\ntransaction fees now this gas fee again\nis paid by whoever initialized the\ntransaction when we got our funds from\nthe faucet there was some server and\nsomebody else was paying the transaction\nfee for us however when we sent ether\nfrom one account to another our first\naccount actually paid some transaction\nfee to send that ether in proof of stake\nthere's also a gas fee but it's paid out\nto validators instead of Miners and\nwe'll talk about that in a little bit\nnow let's talk about two types of\nattacks that can happen in these\nblockchain worlds let's talk about the\nfirst one being the cibil attack the\ncibil attack is when a user creates a\nwhole bunch of pseudo Anonymous accounts\nto try to influence a network now\nobviously on bitcoin and ethereum this\nis really really difficult because a\nuser needs to do all this work in proof\nof work or have a ton of collateral in\nproof of stake which again we'll talk\nabout in a bit the other more prevalent\nattack is what's known as a 51 percent\nattack now as we saw as part of our\nconsensus protocol these blockchains are\ngoing to agree that the longest chain is\nthe one that they're going to go with so\nlong as it matches up with 51% of the\nrest of the network this means that if\nyou have the longest chain and you have\nmore than 51% of the rest of the network\nyou can do what's called a fork in the\nnetwork and bring the network onto your\nnow longest chain now cibil attacks\nobviously are when a single node or a\nsingle entity tries to affect the\ndecentral of the network by tending to\nbe multiple different people although\nthey're just the same person or entity\nand like I said it's really difficult to\ndo in proof of work and proof of stake\nso you can see now that blockchains are\nvery Democratic whichever blockchain has\nthe most Buy in and is the longest is\nthe blockchain that the whole system is\ngoing to corroborate when nodes produce\na new block and add it to the longest\nchain the other nodes will follow this\nlongest chain that the rest of the\nnetwork is agreeing with ADD those\nblocks to their chain and follow up so\nvery small reorganizations are actually\npretty common when a blockchain chain\npicks a block from a different longest\nchain puts it on and then has to swap it\nout for another block and continue with\na different blockchain however if a\ngroup of nodes had enough nodes or\nenough power they could essentially be\n51% of the network and influence the\nnetwork in whatever direction that they\nwanted this is what's known as a 51%\nattack and it's happened on blockchains\nlike ethereum classic which is not\nethereum this is why the bigger a\nblockchain is the more decentralized and\nthe more secure it becomes so after you\nwatch this video you become a blockchain\nengineering expert I definitely\nrecommend you run a note as well because\nyou are going to increase the security\nof the network as a whole by running a\nnode so proof of work is fantastic\nbecause it allows us to very easily\nprotect against these Cil attacks and\nkeep our blockchains decentralized and\nsecure however it has some drawbacks as\nwell proof of work costs a lot of\nelectricity because every single node is\nrunning as fast as they can to win this\nrace to get the rewards this leads to\nobviously an environmental impact now\nsince proof of work Nakamoto consensus a\nlot of other protocols have taken this\nidea and gone in a different direction\nwith a different civil resistance\nprotocol a lot of them with the\nintention to be a lot more\nenvironmentally friendly and the most\npopular one right now is proof of stake\nthere are some chains that are already\nusing this proof of stake protocol and\nthat are live and thriving some of them\nare like Avalanche salana polygon polka\ndot and Tera and additionally ethereum\nis decided to upgrade to eth2 which will\nhave this proof of stake algorithm as\nwell well it'll also have some other\nfeatures which we'll talk about in a bit\nnow as a quick aside all the tools that\nwe're going to learn here are still\ngoing to work in e two so depending on\nwhen you watch this everything here is\nstill valid so let's talk about proof of\nstake now again this is a different\ncivil resistance mechanism instead of\nsolving this difficult problem proof of\nstake nodes put up some collateral that\nthey're going to behave honestly AKA\nthey stake in the example of ethereum 2\nnodes put up some ethereum as a stake\nthat they're going to behave honestly in\nthe network if they misbehave in the\nnetwork they are going to be slashed or\nremoved some of their state obviously\nthis is a very good civil resistance\nmechanism because if you try to create a\nwhole bunch of anonymous accounts then\neach one of those accounts you have to\nput up some stake and if you misbehave\nyou're going to run the risk of losing\nall the money that you put up as\ncollateral in this system miners are\nactually called validators because\nthey're no longer binding anything\nthey're actually just validating other\nnodes now unlike proof of work which\nevery node is ing to be the first one to\nfind the Block in proof of stake nodes\nare actually randomly chosen to propose\nthe new block and then the rest of the\nvalidators will validate if that node\nhas proposed the block honestly as we\nsaw with our cryptography lesson it's\nusually very easy for other nodes to\nverify if a proposal or a transaction is\nhonest now Randomness is a really\nimportant topic when we're talking about\nblockchains because keep in mind these\nblockchains are deterministic systems\nthey're walled Gardens from the rest of\nthe world and as you you know a\ndeterminate system by definition can't\nhave random numbers so how do we choose\nthe random validators in the system well\nit changes from blockchain to blockchain\nand actually choosing the node will\nchange blockchain to blockchain but in\nE2 they're using what's called randow at\nleast for the original implementation\nthis is a decentralized autonomous\norganization that collectively chooses\nthe random number and collectively\nchooses which node is going to run next\nwe aren't going to dive too deep into\nthis because there's a good chance that\nthis might change in the future but we\nwill go into Randomness Solutions in\nblockchain later on in this course now\nproof of stake obviously has some pros\nand cons as well Pros are that again it\nis a great civil resistance mechanism\nand a great way to figure out who the\nauthor of a block should be the other\nPros are that it's way less\ncomputationally expensive to figure out\nthe new block because instead of every\nsingle node on the network trying to do\nthis only one node needs to do this and\nthen the rest of the nodes just need to\nvalidate it the cons are that it's\nusually considered a slightly less\ndecentralized Network due to the upfront\nstaking costs it costs to participate\nnow this gets into a little bit of a\nphilosophical battle on how\ndecentralized is decentralized enough\nand I think that's up to the community\nto decide and as we progress I think\nwe'll learn more and more about how\ndecentralized is decentralized enough\nthe general consensus amongst blockchain\nEngineers though is that proof of stake\nis very very decentralized and very\nsecure this massive environmental impact\nImprovement is one of the two main\nreasons why eth is Shifting to eth 2 it\nreduces the environmental impact by up\nto 99% now these are the main pieces of\nproof of work and proof of stake but I\ndid want to talk about another concept\nthat's really important in these\necosystems and that is scalability when\nwe were talking about gas prices we were\nsaying that the gas prices can get\nreally high if a lot of people want to\nsend a transaction because a block only\nhas so much block space and the nodes\ncan only add so many nodes so when a lot\nof people want to use a blockchain the\ngas price\nskyrockets this is not very scalable\nbecause if we want to add more and more\npeople to these blockchains it's going\nto cost more and more to use the\nblockchains because more people are\ngoing to want to get into these blocks\nthis means that there's kind of a\nceiling to how many people can use the\nsystem because of the financial\nconstraints that will get imposed as gas\nprices keep Rising ethereum 2 is not\nonly attacking the environmental impact\nof proof of work by switching to proof\nof stake but they're also implementing\nthis new methodology called sharding and\nsharding is a solution to this\nscalability problem a sharded blockchain\nreally just means that it's going to be\na blockchain of blockchains there is a\nmain chain that's going to coordinate\neverything amongst several chains that\nhook into this main chain this means\nthat there's more chains for people to\nmake transactions on effectively\nincreasing the amount of block space\nthat there is sharding can greatly\nincrease the number of transactions on a\nblockchain layer one now there's another\nterm that might be the first time you\nheard it a layer one we're going to talk\nabout layer ones and layer twos in terms\nof scalability really quickly as well a\nlayer one refers to any base layer\nblockchain implementation bitcoin's a\nlayer one ethereum's a layer one\nAvalanche is a layer one these are the\nBas layer blockchain Solutions a layer\ntwo is any application that is added on\ntop of a layer one added on top of a\nblockchain some examples of layer twos\nare going to be chain link arbitrum or\noptimism arbitrum and optimism are very\ninteresting because they are layer twos\nthat also look to solve this scalability\nissue arbitrum and optimism are what's\nknown as rollups and they roll up their\ntransactions into a layer one like\nethereum we're not going to go too deep\ninto rollups and how they actually work\nbut all you really need to know is that\na rollup is kind of like a sharded chain\nthey derive their security from the Bas\nlayer from the layer one like ethereum\nand they bulk send their transactions\nonto the layer one they solve some of\nthe scalability issues by being another\nblockchain that people can make\ntransactions on still on kind of this\nbase ethereum layer now there different\nfrom side chains because side chains\nderive their security from their own\nprotocols rollups derive their security\nfrom the base layers so arbitrum and\noptimism for example is going to be just\nabout as secure as ethereum there's some\nfantastic guys in there that go a little\nbit deeper into rollups and I've left a\nlink in the description for you all\nright so we just talked about a lot of\nstuff so let's do a quick recap before\nmoving on ethereum and Bitcoin are\ncurrently both proof ofor blockchains\nthat follow Nakamoto consensus however\nethereum is moving to to ethereum 2\nwhich will be a proof of stake sharded\nblockchain civil attacks are prevented\ndue to protocols like proof of work and\nproof of stake 51% attacks grow\nincreasingly harder with the size of\nblockchain so you should run a node\nconsensus is the mechanism that allows a\nblockchain to agree upon what the state\nof the blockchain is sharding and\nRoll-Ups are solutions to scalability\nissues on layer ones a layer one is any\nbase blockchain implementation like\nBitcoin or ethereum a blockchain\nscalability problem is that there's not\nalways enough block space for the amount\nof transactions that want to get in them\nthis leads to very high gas prices and\nagain gas prices are how much it costs\nto interact with a\nblockchain so we've learned a ton in\nthis video so far everything that you\nwent over is going to make you 10 times\nbetter as a developer because yes being\na good developer means you understand\nthe code at a very technical level but\nif you can understand the overall\narchitecture as well you can make\ninformed decisions about how to\narchitect your design or how to build\nyour software in however you want to do\nso so with all that being said it's\nfinally time to jump into some solidity\nand jump into some code so let's do\nthis now again in the description of\nthis video there is a link to this\nGitHub repository that's going to be the\nhome base for all the code that we work\nwith in this tutorial we scroll down to\nthis main section this read me there's a\ntable of contents in here\nwe can go to lesson one simple storage\nand we'll have links helpful tips the\nitinerary of what we're going to learn\nand everything else that you need to\nwork with here all the code that we're\ngoing to be working with is located in\nthis Syle storage link that we can go\nahead and click it's in its own\ndifferent repository we can go ahead and\nclick the file to see all the code that\nwe're going to be working with so let's\njump into it additionally back in our\nfull blockchain solidity course right at\nthe top there's this resources for this\ncourse section if you have questions\nengaging in GitHub discussions stack\nexchange ethereum and stack Overflow are\ngoing to be great places to get help and\nget support I highly recommend making a\nstack\noverflow stack exchange\nethereum and a GitHub account so you can\nparticipate and engage with the\ncommunity welcome to the remix IDE or\nthe remix integrated development\nenvironment this is going to be where\nwe're starting to teach you how to work\nwith solidity and work with smart\ncontracts and deploy to blockchains\nwe're going to use remix to get us up to\nspeed as it has a lot of nice features\nthat allow us to really see and interact\nwith blockchains and really see what's\ngoing on but eventually we're actually\ngoing to move off of remix to another\nplatform but all the solidity that we're\ngoing to learn here obviously is going\nto apply everywhere as well when you\ncome to remix there's a whole lot of\ndifferent plugins like solidity learn\neth Soul hint linter and a whole bunch\nof other plugins as well well I'm going\nto go ahead and start by clicking the\nsolidity plugin but we're not going to\nuse any of these plugins for now but\nlater on you can kind of go back and and\nlearn a little bit more about what these\nplugins do so let's start perusing let's\nstart coding some things on the left\nhand side over here is where we're going\nto interact with everything so let's go\nahead and click the files up here now\nyou can always go back and peruse this a\nlittle bit more and in fact I highly\nencourage you to because that's how\nyou're going to learn the most the\nquickest but for us we're actually just\ngoing to go ahead and start with our own\nbrand new file we're going to create a\nlittle application that can store\ninformation on the blockchain for us and\nthis is our first project that we're\ngoing to do in solidity so we're\nactually going to create a new file and\nwe're going to call\nit simple storage doou all solidity has\nan extension of do Soul at the end\nstands for solidity now let's take\ninventory of what we're going to be\nworking with here this is the solidity\ncompiler tab it compiles all the\nsolidity code down to machine\nunderstandable code or machine language\nhere there's a whole bunch of different\nparameters we can choose when working\nwith sidity we can choose the compiler\nversion we can choose the language which\nwe're only going to be working with\nsolidity the evm version don't worry\nabout this for now so let's code our\nfirst solidity contract here now we are\ngoing to use something a little bit\nspecial here when we actually deploy\nthese we're going to use a JavaScript\nvirtual machine so we're going to use a\nvirtual machine that's going to simulate\nactually deploying to a test net or a\nreal Network we're not actually going to\ndeploy on a real Network we will in a\nlittle bit but just to get started we're\ngoing to work with a JavaScript VM which\nis kind of a fake environment for now\nokay testing locally and understanding\nhow to test locally will make your\ncoding experience a lot faster as you\nsaw when we sent some transactions some\nof them actually took some a lot of time\nto actually deploy we don't want to have\nto spend that much time waiting around\nfor our test to actually finish so we're\ngoing to use a JavaScript VM to kind of\ndummy it for now but let's just start\ncoding and go from there so the first\nthing that you're going to need in any\nsolidity program is the solidity version\nso that's always going to be at the top\nof your solidity code it's defined by\ndoing pragma solidity and the version\nwe're going to be using some version\nbetween 0.6.0\nand\n0.9.0 so we're saying we want to use\nanything between 0.6 and 0.9 and and as\na force of habit I just automatically\nhit command s whenever I write anything\nso that's why you saw some of this pop\nup here we can hitting command s or\ncontrols depending on if you're windows\nor not we'll hit this compile button and\nwe'll compile everything for us now if\nwe want a specific version of solidity\nwe can also do\n0.6.0 and if I go ahead and hit command\ns or compile\nour compiler will automatically vert to\n0.6.0 however if I try to do 0.8.0 with\nmy solidity at 0.6.0 it's going to give\nus an error it's going to say the source\nfile requires a different compiler\nversion we're using\n0.8.0 and this is 0.6.0 so we're going\nto go ahead and hit compile and it's\ngoing to automatically move down to\n0.6.0 we can also do carrot 0.6.0\nand this will allow us to work with\nreally any version of\n0.6 it'll work all the way up to 0.7\nwhere if we hit command s or contrl S\nthere it'll give us an error so this\nonly works with any version below 0.7\nand above 0.6 we're going to be using\nversion\n0.6.3 however in future contracts that\nwe work with we're actually going to\nwork with different versions of solidity\nthe reason we're going to be changing\nversions throughout this course is that\nsolidity is a constantly updating\nlanguage being good at switching between\nversions is going to make you an\nincredibly powerful smart contract\nengineer the next thing that we're going\nto do is we're going to Define our\ncontract so contract is a key word in\nsolidity which stands for our smart\ncontract that we're going to create you\ncan think of a contract similar to a\nclass in Java or any other\nobject-oriented programming language so\nwe're going to give our contract a name\nhere we're going to call it simple\nstorage and we're going to add this\nlittle curly bracket to say this is the\ncontents of our contract simple storage\nand I went ahead and hit command s and\nwe can see it is compiling successfully\nyou could hypothetically deploy this\nright now and this would be a valid\ncontract so great job for making it this\nfar now in solidity there are many\ndifferent types that we can work with\nlet's go into some of the types of\nsolidity we can have integers AKA whole\nnumbers they can be uint as an an\nunsigned integer meaning they're not\npositive or negative we can also have an\nINT and we would Define a variable by\ndoing uint 256 favorite number equals 5\nso we have an unsigned integer un 256\nmeans this is an integer of size 256\nbits so we can have this be up this\nnumber be up to 256 you can also do uint\nfavorite number equals 5 but if you want\nto be a little bit more precise a lot of\nprotols in a lar of smart contracts will\ndo the whole name like you\n256 we can also have booleans booleans\nare true false so we can have\nBoolean favorite bull equals true so\nthis favorite pool would be true it\ncould also be\nfalse we can have strings string\nfavorite string equals\nstring a string is a string of text here\nright it's going to be some word or\nphrase or really any these key strokes\nhere similar to the unsigned integer we\ncan have an INT\n256 favorite int equals ne5 so it could\nbe positive or negative we can have an\naddress which is going to be some type\nof ethereum\naddress so we could do\naddress favorite\naddress equals and then we can even copy\nright from our metamask and just paste\nit right in\nhere this is going to be a valid address\nhere you'll also notice that we end all\nof our statements with a semicolon we\ncan have a bytes object size 32 bits\nfavorite btes for our example we're just\ngoing to use the word cat because cat is\na string ring which can be converted\ndown into a bytes object bytes 32 means\nthat there's 32 bytes in this variable\nfavored bytes we can also do bytes 2\nbytes 3 bytes 5 Etc with a maximum size\nof bytes 32 for example we can't do\nbytes 64 we're going to be talking about\nsome other variables as well like arrays\nand mappings but let's just stick here\nfor now if you want to learn more about\nthe different types and the different\nvariables that you can use head over to\nthe solidity documentation and there's a\nlink in the G GitHub and that a\ndescription to show you this section for\nnow for our simple storage let's say we\nonly want to store numbers we don't want\nto store anything else so we're just\ngoing to go ahead and delete everything\nand just have ENT 256 favorite number at\nthe top now in solidity if I do this\nfavorite number actually does get\ninitialized even though I didn't have it\ninitialized to five if I leave it blank\nit gets initialized to the null value in\nthis case it would be initialized to\nzero so for now let's just not\ninitialize it to anything that way it'll\nget automatically initialized to zero\nthis means that when we deploy this\ncontract as of right now favorite number\nwill start off as zero if you get\nconfused you can also make a comment on\nthis you could say this will get\ninitialized to zero this double slash\nhere is the way to make comments in\nsolidity and it won't get executed as\ncode so we can write whatever we want as\nlong as it's preceded by two\nbackslashes now let's go ahead and\ncreate our first function functions or\nmethods are self-contain modules that\nwill execute some task for us and in\nsolidity it's the exact same thing\nthey're defined by the keyword function\nlet's make a function called\nstore that will change the value of this\nfavorite number here so we're going to\ncall store and we're going to allow it\nto be passed a variable so we're going\nto allow it to be passed a variable of\ntype unsigned integer\n256 and we're going to call it\nunderscore fave or\nRIT\nnumber we're going to make this a public\nfunction which we'll get to in a minute\nand all we're going to do is we're going\nto set favorite number equals to\nwhatever variable we passed in favorite\nnumber so this in its simplest form is\nhow you can define a function now just\nto visualize what we're working on so\nfar let's go ahead and deploy this\ncontract so we can actually start to\ninteract with it so if we hit this\nbutton this will bring us to the deploy\nTab and will allow us to deploy our\nsmart contract here using our JavaScript\nVM it's given us a fake account with\nsome ethereum in it it has 100 ethereum\nin it to start and same as before\nanytime we want to interact with the\nblockchain we have to pay a little bit\nof gas Even in our fake virtual machine\nhere and we want to simulate that so\nyou'll see it has some of the same\nparameters here as making a transaction\nlike gas limit for example when we\ndeploy a contract it's going to cost a\nlittle bit of ethereum or a little bit\nof gas to do so so let's go ahead and\nhit this deploy button and see what\nhappens so once we deployed with this\nvirtual machine a few things happened we\nhave remix kicking out this section down\nhere saying great job you've deployed\nsomething and if we scroll down it says\ntransactions recorded one we can look at\nall the transactions we've recorded and\nwe can see it says deployed contracts\nand we have a contract here that we've\ndeployed now let's zoom out just a hair\nhere so we can see everything a little\nbit better in this simple storage\ncontract we see this big store button\nbecause there's one public function that\nwe can actually interact with so we can\nadd this number here and we'll hit store\nand you'll see again we have a completed\ntransaction and if we look at our\ncontract we'll have paid a little bit\nmore gas right will have paid a little\nbit more to interact with this function\nbecause again anytime we want to make a\nstate change in the blockchain we have\nto pay a little bit of gas the reason\nmetamask isn't popping up is because\nwe're kind of doing it in this simulated\nenvironment so this is great however it\nlooks like we can't actually see what\nour favorite number is we can't actually\nlook at it so how do we actually make\nsure that we can view this favorite\nnumber well let's add another parameter\nto this as well if we add public\nto our favorite\nnumber we recompile by hitting command s\nor hit the compile button we delete this\ncontract and we redeploy and scroll\ndown now we'll see two buttons pop up\nthis blue button to show us favorite\nnumber which again is initialized to\nzero and we have the store function so\nlet's talk a little bit about why this\npublic variable allowed us to see this\nnew button this new favorite number\nbutton this public public keyword\ndefines the visibility of the variable\nor the function there are currently four\ndifferent types of what's called\nvisibility in solidity there's external\npublic internal and private we're mostly\ngoing to be working with public for now\nbut it's important to know how the rest\nof these work public functions can be\ncalled by anybody including variables so\noddly enough variables are a function\ncall to just look at them and return\nwhatever that variable is an external\nfunction means it can't be called by the\nsame contract it has to be called by an\nexternal contract so if in this contract\nI had this be\nexternal I couldn't call the store\nfunction couldn't call the store\nfunction inside this function because\nthe function is external it means\nsomebody outside of the contract has to\ncall this function internal functions\nhowever can only be called by other\nfunctions inside of this contract or in\nits derived contract and then private is\nthe most restrictive as private\nfunctions and state variables are only\nvisible for the contract they are\ndefined in and not derived contracts now\nthe reason that we didn't see favorite\nnumberers show up in our original\ncontract deployment is that if we don't\ngive a state variable a visibility it\nwill automatically get set to internal\nso if we want other people to be able to\nread it we have to change it to public\nnow let's see how this interaction\nactually works if we hit the favorite\nnumber button right now we'll get this\ncall thing that shows up and it'll show\nus right here that the value of favorite\nnumber is zero now this function however\nis set so that whatever value we pass it\nis going to change the favorite number\nto whatever we pass it as so if we pass\n1 two 3 hit store that transaction goes\nthrough and then hit favorite number we\ncan see the value is now one two three\nnow I will also be using transactions\nand smart contract interactions and\nfunction calls a little bit\ninterchangeably that's because on a\nblockchain whenever you call a function\nor whenever you make some State change\nto the blockchain you're actually also\nmaking a transaction that's what makes\nthis whole thing so powerful and again\nthat's why making a function call or\ndeploying a contract costs a little bit\nof gas now the reason we can access this\nfavorite number variable inside this\nfunction is because favorite number has\nThis Global or contract scope so even if\nwe made un 256 test equals 4 or equals\nequals 4 we wouldn't be able to use this\nvariable outside of this function right\nbecause it's self-contained it's\nself-contained inside this bracket and\nif I were to make another\nfunction store two\nperhaps public\nstore two doesn't know that this test\nvariable exists functions only know\nabout the variables that are in the same\nscope as them so favorite number is in\nthis Global scope because the only\nbracket that's above them is simple\nstorage and test is in this store scope\nbecause it has two brackets above it it\nhas it's inside of this store function\nand inside of this contract simple\nstorage store two isn't inside of this\nstore function or this store scope so it\ncan't access this test\nvariable so let's go ahead and make this\nback to public and we'll compile again\nI'm hitting command s to compile but you\ncan go ahead and click the button if you\nlike and let's get this now as you saw\nwhen we deploy this there's this button\nhere that we can click called favorite\nnumber we can also make a function\ncalled retrieve and make it a public\nfunction that is of type view and\nreturns un went 256\nand all this is going to do is\nreturn favorite number so we're going to\ntalk about views and returns here so I'm\ngoing to go ahead and\ncompile going to go ahead and delete\ndelete this contract going to go ahead\nand deploy it\nnow and we can see now we have two\nfunctions or two blue buttons here we\nhave retrieve and we have favorite\nnumber and if I change favorite number\nby calling the store function favorite\nnumber number and retrieve will both now\nsay it's 1 2\n3 so then the question might be well why\nis this one orange and these two are\nblue and the key relies in this view\nfunction or this view keyword there are\ntwo special keywords that Define\nfunctions that you actually don't have\nto make a transaction on and those\nkeywords are View and pure a view\nfunction means that we want to read some\nState off the blockchain so we're just\nreading on the blockchain if we're\nreading off the blockchain and we're not\nactually making a state change then we\ndon't need to make a transaction these\nblue buttons are blue because they are\nview functions public variables also\nhave view functions that's why both of\nthese are blue this technically is a\nview function and when I click it I get\nto view and I get to read the state off\nthe\nblockchain retrieve is the same way we\ncould have this without a return but it\nwouldn't do anything pure function are\nfunctions that purely do some type of\nmath we could have un 256 favorite\nnumber public pure and just have\nfavorite number plus favorite number so\nwe're doing some type of math\nhere but we're not actually saving State\nanywhere we're going to do this math but\nwe're not going to save this favorite\nnumber anywhere we're not going to save\nanything deploy this now this pure\nfunction we would have this retrieve\nfunction 1 two 3 it's blue as as well\nbecause it's again not going to change\nthe state of blockchain so view\nfunctions and pure functions are both\ngoing to have this blue\ncolor now the reason that nothing shows\nup at the bottom is because we didn't\nreturn anything all we're doing is we're\nsaying add these two numbers together\nand that's it in order for this function\nto give us something back we need to\nhave it return something so if we go\nback to this retrieve\nthis retrieve function we have to Define\nwhat we're going to return when we're\ndefining this function so we're going to\nsay this is a public function it's a\nview function because we're going to\nread some State and it's going to return\na u 256 so favorite number is a un 256\nso that's what we're going to return our\npublic variable favorite name is also a\nview function that returns a\nun26 for now let's just remove that so\nwe can work with this retrieve function\nso let's go ahead and deploy so now we\nsee we don't have this favorite number\nbutton anymore because it is no longer a\npublic function because again it gets\ninitialized to internal so we can't\nactually view it now keep in mind later\non we're going to talk about how\neverything on chain you actually can see\nand we'll talk about that a little bit\nlater though so retrieve is going to do\nzero we can call store and now retrieve\nis going to be one two three now this\napplication is great so far it allows a\nsingle person to store a favorite number\nand then go ahead and retrieve it later\nwhich is fantastic but what if we want a\nlist of people or a group of people and\nstore their favorite numbers or what if\nwe want to associate a favorite number\nwith a single person well what can we\nactually do now we have a whole number\nof different choices but the one that\nwe're going to talk about is using a\nstruct structs are ways to Define new\ntypes and solidity they're almost like\ncreating new objects as well so we can\ncreate a struct called type people and\nallow it to start storing a favorite\nnumber associated with a certain people\nso inside of our struct we can have\ndifferent types as well so we can have a\nu\n256 favorite number and we could also\nhave a\nstring name now we have a new type of\ntype people that has a favorite number\nand a name inside of it now what we\ncould do with the struct is we could say\npeople\npublic person equals equals\npeople and then inside we add the\nvariables so we could say favorite\nnumber favorite number is\ntwo and name is\npatri and of course the semicolon at the\nend and again I'm hitting command as to\nsave but you can also go ahead head and\ncompile compil out so let's go ahead\ndelete this contract and see what this\nlooks like now so now we've deployed\nthis new contract and we have this\nperson struct which at the zero index is\nthe favorite number and the variable\nstored in the first index is going to be\nthe name storing variables in solidity\nalways works in this numeric index\nfashion in fact in contract simple\nstorage you wi 256 favorite number is at\nindex zero if we were to add another\nobject here like\nBoolean favorite pool this would be at\nindex one we were to add buol favorite\npool two this would be at index two 0\none two and it works the same in structs\nthis is at index zero inside the struct\nthis is at index one inside the stru so\nwe can see the variables associated with\nthis person we're going to go ahead and\ndelete this for now because instead of\njust creating one person we actually\nwant to create a whole list of people so\nhow do we create a list of people let's\ndelete that contract and what we can do\nis we can make what's called an array an\narray is a way of storing a list or a\ngroup of some object so as you're\nstarting to see the way the syntax works\nfor defining any type of variable is\ngoing to be the type of the\nvariable the visibility of the variable\nlike public or if you don't declare it\nit gets initial Iz to\ninternal and then the name of the\nvariable it works the same with arrays\nso we'll make a people array people\narray is the\ntype we'll make it public and we'll call\nit people now if we deploy this contract\nwe go and see we now have a people array\nbut if we click this button you'll see\nthat nothing shows up the reason is\nbecause it's an empty array to start\nwith right we don't have anything inside\nof it now this type of array that we\ncreated is what's known as a dynamic\narray it's a dynamic array because it\ncan change its size right now it's of\nsize zero and if we added something to\nit it's of size one you can also create\narrays of a fixed size so if I were to\ndo people one public people this array\ncould only have a maximum of one person\ninside of it so we're going to work with\na dynamic array though because we're\nwant to add an arbit number of people\ninto here so let's go ahead and create a\nnew function called add person where we\ncan add a person to this array so we'll\ndo function add\nperson string memory name I'll talk\nabout this memory keyword in a minute\nyou went\n256\nfavorite\nnumber and then we'll make this\na public function\nand inside we'll do we'll add this\nperson to our array way to add a person\nto your arrays is using the push method\nso we're going to push a new people or a\nnew\nperson and we're going to give it those\nvariables again so we're going to give\nit we're going to give it favorite\nnumber is this variable that we passed\nin here oops this needs a bracket\nand then we're going to\ngive the name be this underscore\nname and then end\nbracket\noops zoom out again here just so I can\nsee\nstuff just needs a\nsemicolon and perfect now in that last\nclip we saw this little red box pop up\nwhenever a little red box like this pops\nup after you compile it means you have a\ncompile error this means that there's\nsomething wrong with your solidity code\nor your solidity syntax and it won't\ncompile and deploy properly red is going\nto be this compile error now we're going\nto see a bunch of yellow warnings in the\nfuture if you get a little yellow popup\nthese are okay to ignore but they\nusually have some helpful tips about\nsomething that might be going wrong in\nyour code so to summarize if it's red if\nit's red it's broken if it's yellow you\nmight want to check it out but it could\nbe okay so we can see we have our new\nfunction ad person where we pass a\nstring memory memory name and a un 256\nfavorite number and then we create this\npeople person this people object here\nand then we push it onto our people\narray and I'm going to show you another\nway we can actually create a people\nperson is just by passing favorite\nnumber and\nname getting rid of this other by\npassing favorite number and name because\nwe know that the zeroth index of people\nis favorite number in the first index of\npeople is named so we can also create a\nnew person by adding it like this now\nlet's talk about this memory keyword\nhere now in solidity there's more or\nless two ways to store information you\ncan store it in memory or in storage\nwhen you store an object in memory it\nactually means that it'll only be stored\nduring execution of the function or of\nthe contract call if we hold it in\nstorage that means that that data will\npersist even after the function executes\nstring in solidity is actually\ntechnically not a value type string is\nactually an array of bytes a variable of\ntype string is actually a special type\nof array that we can append text to so\nbecause it's technically an object we\nhave to decide where we want to store it\nin memory or in storage and since we\nonly need this name during the execution\nwe can have it be string memory name and\nthen when we create this new people\nobject we will create a new copy of this\nthis name variable into storage memory\nmeans that after execution delete this\nvariable storage means keep it forever\nthis is a little bit confusing for you\njust know that for now when you use a\nparameter that's going to be a string\nfor one of your functions you need to\ncall it string memory so let's go ahead\nand deploy this contract and see what\nhappens now now we have this new\nfunction add person and since we are\nmaking a state change here we can see\nthat this indeed is a orange button\ninstead of being a blue button so we can\nadd in here a string name We'll add\nPatrick and we'll say his favorite\nnumber is two again right now if we look\nat people see people zero there's\nnothing in here we retrieve there's\nnothing in here so we're going to add\nperson Patrick and now if we hit people\nof zero we can see that the person at\nthe zero withth index in this people\narray is going to be string Patrick if\nwe try at one there's not nothing in\nhere let's add another person we'll add\nBecca and her favorite number will be 24\nlet's add her now if we hit one we see\nfavorite number 24 string name is Becca\nand retrieve is still showing up blank\nbecause we haven't touched favorite\nnumber awesome this is great we can just\nkeep adding people however there is kind\nof an issue here what if I'm looking for\na person what if I'm looking to find\nBecca and find her favorite number in\nthis array what if I know her name but I\ndon't know her favorite number is there\nan easy way for me to find that favorite\nnumber without having to triage the\nentire array there's another data\nstructure called a mapping so let's\ncreate this new data structure so this\ndata structure is going to be of type\nmapping a mapping takes some type of key\nand spits out whatever variable it's\nmapped to so in this case if we're\nsaying we want to use the name Becca to\nfind her favorite number we would say\nthe string Becca is going to be mapped\nto the U 256 favorite number and similar\nto all the other variable declarations\nthe first part is going to be the typing\nso this is going to be a type mapping of\nstring mapped to un 256 we're going to\ngive this public visibility and we'll\ncall it name to favorite number and\nwithout adding any other functions that\nwork with it if we deploy this we can\nsee we have this blue button because\nwe're not making a state change name to\nfavorite number and if we type in Becca\nin\nhere obviously nothing's going to happen\nbecause we haven't added this mapping in\nyet so in our ad person down here let's\neven have this ad person also add to the\nmapping so we can do name to favorite\nnumber and then the key is going to be\nthis name so of Becca we're going to say\nwe're going to map the name Becca to the\nfavorite\nnumber now we're going to go ahead and\ncompile again I'm hitting command s\ndeploy we can scroll down here if we\nlook up Becca in here we're going to get\nnothing however if we\nadd\nBecca and her favorite number being\n24 this add person is going to add it\nboth to the array and to this mapping\nnow if we look up name to favorite\nnumber you see that Becca returns 24 now\none other thing I want to show you guys\njust because compilers are going to yell\nat you if you don't have them is\ntypically at the top of these contracts\nyou want to add an SPX license\nidentifier basically solidity and the\nethereum community found out that trust\non a smart contract can be better\nestablished if source code is available\nand in terms of legality and copyright\nit just makes life a lot easier if you\nadd that license identifier right at the\ntop of your solidity we're going to use\nthe MIT license identifier because it's\nthe most open license out there it means\nhey anybody can use this code and we\ndon't care so you'll see a majority of\nsolidity contracts have this SPX license\nidentifier MIT at the top and compilers\nwill yell at you a lot less awesome we\nnow have a contract that we've decided\nthat we liked it's got mappings it\nenables us to actually store people and\ntheir favorite numbers this is fantastic\nwe've done all of our testing in this\nJavaScript VM and we've decided you know\nwhat we want to deploy this to an actual\ntest net or an actual main net how do we\nactually deploy this so that other\npeople can interact with this contract\nwe are again going to use rink B because\nthat's what we use to make our first\ntransaction now again you will need some\ntype of test ethereum in your test net\nwallet so again if you get lost you can\nalways just Google rink B faucet or rink\nbe tested faucet and find a faucet or a\nbetter alternative would be to come to\nthe link token contracts in the chain\nlink documentation at docs. chain. link\nand scroll down or just look up rink be\nthis link token contracts page has the\nmost up-to-date faucets for any test net\nthat it supports so for example we get a\ntest eth faucet right here which also\njust happens to be that exact faucet\nthat we used earlier the only thing you\nneed to change in remix is we need to\nchange from JavaScript VM to injected\nweb 3\nand metamask will actually pop up and\nsay hey would you like to connect to\nthis application anytime you're working\nwith a web3 application or a web\napplication that wants to access your\nfunds or work with your metamask\nmetamask will pop up and ask for\nauthorization first this is really good\nso that we know which applications we're\nactually connected to so we're going to\ngo ahead and say next connect and we can\nsee here that we've even connected here\nand that our account on the main Network\nat zero\neth and remix even tells us hey you're\non the main Network so let's go ahead\nand switch to the rink B Network and we\ncan now\nsee we're on the rink B Network and we\nhave 17.74%\nis if we want to use our own blockchain\nnode or our own web3 provider when we do\ninjected web 3 we're saying our web 3\nprovider is our metamask which will work\nperfectly for what we're trying to do so\nsince we already have some test in\nethereum let's go ahead and deploy this\nand see what this would actually look\nlike if we deploy to a main net the\nprocess is going to be exactly the same\nright the only difference was we would\nbe on the main net instead of rank B so\nlet's go ahead hit deploy we'll uncheck\npublished ipfs hit deploy as will pop up\nasking if we want to do this transaction\nbecause remember we are deploying a\ncontract we are changing the state of\nthe blockchain so we have to pay a\nlittle bit of gas fee for it so we're\ngoing to go ahead hit confirm and we get\na link to rink be ether scan similar\nexactly as we saw before when we made a\ntransaction the difference here is that\ninstead of sending ethereum to somebody\nwe're actually making a transaction on\nthe blockchain to create a contract\nafter after a short while it will show\nup here on ether scan with a success the\nnumber of block confirmations which\nagain is the number of blocks appended\nto the block that included our\ntransaction we see from which is our\naccount here and we see two is this new\ncontract that we just created and we can\neven click it and we see that there's\nthis unique transaction hash that\ncreated a new smart contract and same as\nworking with the VM we have all the\nexact same functions in here and you can\nsee if I hit retrieve these three\nfunctions since they're not making a\nstate change you can just click them and\nno transactions will be made however\nwhat do you think is going to happen if\nI hit\nstore if you guess metamask will pop up\nyou guess correctly again we see the\nfamiliar pieces here we have a gas price\ngas limit go ahead and hit\nconfirm we get another transaction here\nand once this transaction goes through\nwe should be able to call our retrieve\nfunction and see a new number\nif we call it now nothing shows up\nbecause our original transaction hasn't\nsucceeded but I bet if we look at it\nnow okay it's still indexing but it\nlooks like it's been included if we hit\nit now we do indeed see this value here\nand we can do the same thing with adding\na person We'll add Becca we'll say her\nfavorite number is 24 menam mask will\npop up we'll go ahead and confirm the\ntransaction and if I look up Becca and\nthe name to favorite string right now\nit's going to show nothing because our\ntransaction hasn't gone through yet but\nif we wait a little bit I should\nprobably spell her name right we do see\n24 and if we look at the zero withth\nindex we also see Becca's been added\nhere as well now all this solidity code\nthat we wrote and when we interacted\nwith this blockchain here all this\nsolidity was compiled down to the evm\nalso known as the ethereum virtual\nmachine a lot of the blockchains out\nthere today are what's called evm\ncompatible and that means that all this\nsolidity and all these functions that\nwe're creating can still compile down to\nevm and deployed on their blockchain\nyou'll find out a little later when we\nlook to work on a non- ethereum based\nchain that we could still deploy our\nsolidity smart contracts to these other\nchains as well but that's a term you'll\nhear more and more the ethereum virtual\nmachine or evm now take a break give\nyourself a high five because you just\ndeployed your first smart contract and\nyou learned the basics the fundamentals\nof solidity so huge congratulations on\nhow far you've gotten now in our second\nproject we're going to take the\nfundamentals a step further and start\ngoing into the more of the intricacies\nof solidity but just as a quick recap\nthe first thing you always got to do in\nyour smart contracts is name the\nsolidity version then you'll have to\nname your contract a contract in\nsolidity is like a class and defines all\nthe functions and parameters of your\ncontract there's many different types in\nsolidity like unsigned integer 256\nBoolean and bytes we can create structs\nin solidity we can create arrays in\nsolidity we can create mappings in\nsolidity we can create functions in\nsolidity view functions don't make a\nstate change memory and storage are two\ndifferent ways to initialize where a\nvariable is going to be saved all the\nsolidity code that we're working with\ngets compiled down to the ethereum\nvirtual machine and last but not least\ncongratulations on taking your first\nstep in learning solidity let's move on\nto the next project\nall the code tips and links that we're\ngoing to be working with can be found in\nour course repository we can scroll down\nto lesson two storage Factory click it\nhere and we can see all the code we're\ngoing to be working with good luck all\nright so we've done it we've got our\nfirst contract out of the way we're\nunderstanding some of the basics of\nsolidity now let's move onward let's get\na little bit more advanced with what\nwe're going to do with our smart\ncontracts and let's build What's called\nthe factory pattern of smart contracts\nso we have our simple storage contract\nhere which is great it allows us to\nstore numbers and store favorite numbers\nassociated with different people and\nthis is great what if though I want to\nhave a lot of these simple storage\ncontracts deployed I want to give people\nthe ability to generate and deploy their\nown lists based off of this contract\nthis is where the factory pattern comes\ninto play so let's go ahead and create a\nnew contract so in this contracts folder\nI'm going to do new\nfile we're going to call this\nstorage Factory\ndoso and now we'll have a storage\nfactory. Soul now the way that we're\ngoing to do this is that you need simple\nstorage and storage Factory in the same\nfolder I have both of them in this\ncontract folder but if you have them\noutside or in a different folder that's\nokay just make sure what wherever they\nare they're in the exact same folder so\nlet's figure out how to get a contract\nto actually deploy another contract\nwe're going to add those basic pieces\nthat we added in that simple storage.\nsoul we'll add the\nspdx\nlicense\nidentifier which will be\nMIT we'll choose our solidity version\nwhich will be\npragma solidity and we'll say anything\nin the six range\nand then we'll create our contract we'll\nsay\ncontract storage Factory and we'll\ncreate our brackets here and I'm going\nto do command s or compile whatever you\nwant to do things are looking good here\ngreat so how can this contract deploy a\nsimple storage contract well the first\nthing that we're going to need to do is\nactually import this simple storage into\nour storage Factory contract we need to\nimport it so that our storage Factory\ncontract knows what a simple storage\ncontract even looks like the way that we\ncan import it is by doing the command\nimport and then the file path that the\nsimple storage is located so the file\npath for this is going to be\nat/\nsimple storage.\nSoul this means that simple storage is\nin the exact same directory as storage\nFactory doing this line is equivalent to\ncopying every everything in this\ncontract bit coming over to storage\nFactory and pasting it\nabove you can even save and compile and\nhave two contracts in the same file now\nwhat's interesting about having two\ncontracts in the same file is that when\nyou go to deploy you'll actually have a\nchoice of which one you want to deploy\nand it's the same thing if I do that\nimport statement so if I delete all this\nand I go back to\nImports simple storage do so in our\ndeploy tab still you'll see that we\nstill have our choice of which contract\nwe actually want to\ndeploy so this is how we actually import\na contract or import any type of file\nthat we want so that our contract knows\nwhat that contract looks like and can do\nso if we want this contract to then be\nable to deploy a simple storage contract\nwe're of course going to have to create\na function that can do that so we'll do\nfunction we'll call it create\nsimple storage contract we'll make this\na public function we'll do our little\nopen and close bracket in here the way\nwe can generate a contract of simple\nstorage type is by using a new keyword\nso let's create a simple storage\nvariable we'll say a variable of\ntype simple storage contract we'll name\nthis variable simple\nstorage with a lowercase s equals new\nsimple\nstorage what this line is saying is\nwe're saying we're going to create an\nobject of type simple storage\ncontract we're going to name it simple\nstorage with a lowercase s and we're\ngoing to say this is going to be a new\nsimple storage contract and we're saying\nthe simple storage contract takes no\ninput parameters of course if we deploy\nthis contract as is by going to our\ndeploy tab choosing the storage\nFactory staying on a JavaScript VM\ndeploying scrolling\ndown we have this function that doesn't\nreturn anything so we're creating new\ncontracts but we can't really read where\nthose contracts are being created we'd\nhave to look on a block Explorer like\nether scan or something so let's make a\nway for us to keep track of all the\ndifferent simple storage contracts that\nwe deploy let's let's put them in a list\nor in an array so what we can do is we\ncan\nsay simple\nstorage array of visibility public and\nwe'll call it simple storage\narray we'll initialize this simple\nstorage array and every time we deploy\nwe create one of these new simple\nstorage contracts We'll add it to our\nsimple storage arid\nso we'll do simple storage array. push\nand we'll push this simple storage\nvariable so again I'm compiling or\nhitting command s delete that most\nrecent contract we'll choose the storage\nFactory and not the simple\nstorage and we'll hit\ndeploy now if we scroll down to our\nstorage Factory we have this blue button\nwhich stands for our simple storage\narray way if we try to see what's at\nindex zero we get an error of course\nbecause we haven't added anything to it\nyet if I click this create simple\nstorage contract orange button here now\nI've created a transaction that's going\nto create a new simple storage contract\nand push it onto our simple storage\narray now if I try to access the zero\nwithth index or the first index of this\narray I'm going to get this address here\nthis is the address that this simple\nstorage contract was deployed to so\nwe've successfully deployed a contract\nto the blockchain from another contract\nand this of course is really exciting\nnow we can actually do more than just\ndeploy the contracts we can actually\ndeploy contracts from another contract\nand then call those functions as well so\nlet's create a new function where we\ncall this\nstore function and we'll also create a\nfunction where we call the retrieve\nfunction from our storage Factory so\nwe'll do function storage Factory Store\nwe're going to short-and it by saying SF\nstore we'll have it take un\n256\nsimple\nstorage index and a un\n256 underscore\nsimple\nstorage number will make this a public\nvariable as well in our little brackets\nhere and the reason I'm choosing a\nsimple storage index is because we're\ngoing to choose which simple storage\ncontract in our list that we want to\ninteract with and then we're also going\nto pass a simple storage number to\ncall on the store function which of\ncourse we need to pass a favorite number\nto anytime that you interact with a\ncontract you need two things you need\nthe address of the contract you want to\ninteract with and you also need the ABI\nfor us we figured out that we're going\nto push and get this address from this\nsimple storage array we can get the ABI\nor the application binary interface from\nthis import we'll explain the\napplication binary interface a little\nbit more later for now just know that in\norder for us to interact with this\nsimple storage contract we can just do\nsimple storage\nand\nthen we'll pass this simple storage the\naddress of that simple storage contract\nto get the address of that simple\nstorage contract we'll say grab the\naddress inside the simple storage\narray at index simple storage Index this\nwill return that contract that we want\nto interact with so we could even\nsay simple storage\nsimple storage equals simple storage at\nthat address in the\narray once we get this contract we can\nthen call any and all of its functions\nso we could call Simple\nstorage.\nstore this simple storage number now if\nwe compile this we go to our deploy tab\ndeploy the Factory hit\ndeploy open this up we can see we have a\ncouple different functions here we of\ncourse have our create simple storage\nfunction which creates the contract and\nadds it to our array we now have this SF\nstore which stores a number to one of\nthose contracts on this array and then\nwe have a lens into that simple storage\ncontract so if I create a simple storage\ncontract I can now\nstore on that zero withth contract on\nthat first contract any number that I\nwant like\n55 of course I can't really see that 55\nbecause we didn't add a retrieve\nfunctionality we didn't add a way to\nactually listen or read or retrieve that\nfavor number that we got so let's add\nthat now so we'll create a new\nfunction called sfg and this will take\nuint\n256 simple storage\nindex and as a parameter and we'll\nchoose one of these contracts on this\narray and\nreturn its favorite number calling the\nretrieve function on that\ncontract so since we're just going to be\nreading State this can be a public view\nfunction that will return a un\n256 to do this we need to access that\ncontract once again so we'll say\nsimple\nstorage simple storage\nequals simple\nstorage at that address of\nsimple storage\narray at index uncore simple\nstorage\nindex and we can\nreturn\nreturn simple\nstorage\ndot we call this retrieve\nfunction I'm just going to copy paste it\nso I don't spell it wrong simple storage\nwe'll put the semicolon here\ntoo and\nhere now if we compile this go to our\ndeploy Tab delete the most\nrecent choose the storage Factory and\nhit\ndeploy we can see we now has have an SF\nget function so let's go ahead create a\nsimple storage contract we'll store a\nfunction on the Zero withth contract\nwe'll store 55 as its favorite number\nand we'll hit that and then for sfg\nwe'll see if we can get\nthe favorite number of the zero withth\ncontract and we do indeed get 55 awesome\nwe can actually even refactor this code\nto be a little bit simpler here we don't\nneed to\nsave this simple storage contract as a\nvariable here we can actually just call\nretrieve on this whole section here\npaste retrieve at the end and just turn\nlike this\nthe same goes for our SF store we can\ndelete saving it as a\nvariable we can copy this do store paste\nit at the end here and delete this as\nwell now we'll\ncompile delete the most recent we'll\ndeploy the storage\nFactory and if we go into it create a\nsimple storage\nstore the number of\n55 see what's at the zero with index and\nwe do indeed see 55 so this is really\ncool this is a way for us to actually\ndeploy contracts and interact with\ncontracts from another contract now to\ndeploy a contract we do need all the\nfunctionality of that contract imported\nhowever to interact with the contract we\ndon't need all of the functionality we\nlearn about interfaces in the next\nlesson which will allow us to actually\ninteract with contract without having\nall of the functions defined and now I'm\ngoing to show you something really cool\nnow I'm going to show you something\nreally cool simple storage has got a lot\nof really cool functions and maybe I\nwant all these functions inside my\nstorage Factory I want my storage\nFactory to be able to create simple\nstorage contracts and I want it to be a\nsimple storage contract\nitself well what I can do\nis my storage Factory can actually\ninherit all the functions of simple\nstorage without me having to copy paste\nall these functions and all these\nvariables over to storage Factory what I\ncan do is I can do solidities version of\ninheritance I can say contract storage\nFactory is of\ntype simple storage or is of contract\nsimple storage and just by doing this\nline right here my storage Factory\ncontract now will have all of the\nfunctions and variables of simple\nstorage so it'll have a store function a\nretrieve function an ad person\nfunction a people array a name to\nfavorite number mapping it'll have\neverything because I will inherit it\nwith this is\nsyntax so if I go to my deploy tab\nnow let's look at what our last storage\nFactory was\nall we did to change this was add is\nsimple storage and we can see just the\nfour functions that we originally added\nif I delete this\nnow if I save and compile the storage\nFactory let's go ahead and deploy\nstorage\nFactory if we open this up now we can\nsee not only do we have all the\nfunctions originally defined in our\nstorage Factory but We additionally have\nall the functions from our simple\nstorage and awesome you've completed the\nsecond lesson we've learned about some\nincredibly powerful tools here we've\nlearned how to import entire chunks of\ncode from other files into our files\nwe've learned how to do inheritance\nwe've learned how to deploy contracts\nfrom our\ncontract and then we've learned how to\ninteract with different contracts from\noutside of our contract well done now is\na great time to take a breath take a\nbreather and review what you've\nlearned the GitHub repository associated\nwith this course also has all the code\nfor this lesson so let's jump into it so\nwe're back in remix now and we're going\nto go to contracts and same as before\nwe're going to create a new file we're\ngoing to call this fundme doou now same\nas last time we're actually going to add\nthis spdx license identifier MIT right\nat the top and then we're going to\nchoose our solidity version\nso we're going to go pragma\nsolidity and for this we're just going\nto do greater than or equals to\n0.6.3 and less than\n0.9.0 and great this should look pretty\nfamiliar now we're going to do contract\nfundme and we're going to get start\nworking so what again do we want this\ncontract to do we want this contract to\nbe able to accept some type typ of\npayment so let's create a new function\nthat can accept payment we'll call it\nfund so we'll do function\nfund public and we'll add a new keyword\nin here called payable when we Define a\nfunction as payable we're saying hey\nthis function can be used to pay for\nthings when you call a function every\nsingle function call has an Associated\nvalue with it whenever you make a\ntransaction you can always append a\nvalue value this value is how much wey\nor guay or finny or ether you're going\nto send with your function call or your\ntransaction as we mentioned before whey\nguay and ether are just different ways\nto talk about how much eth you're going\nto send so if we look at a way to\nethereum converter 1 e is this much way\none way is the smallest denomination of\nether you can't break up ethereum into\nanything smaller than one way this is\nwhy when you're talking about how much\nsomething costs everything always\ndefaults to way or the smallest unit of\nmeasure in theum so again for us to test\nwe're going to stick with the JavaScript\nVM for now if we hit deploy we get a new\ncontract and this button is now red it's\nred because it is a payable function so\nnow if I hit this fund\nbutton I can add a value associated with\nit so what do we want to do with this\nfunding what do we want to do when\npeople send us something well let's keep\ntrack of who sent us some funding so\nwhat we can do is we can create a new\nmapping between addresses and value so\nlet's do a\nmapping of\naddress to un 256 which will represent\nthe value we'll make this a public\nmapping and we'll call it address to\namount funded\nnow in this fund function let's keep\ntrack of all the people who sent us\nmoney or all the addresses that sent us\nsome value to do this we can use some\nkey words that go along with every\ntransaction so we'll say address to\namount\nfunded of message.\nsender\nequals or plus equals message. Val\nmessage. sender and message. Val are\nkeyword in every contract call and every\ntransaction message. sender is the\nsender of the function call and message.\nvalue is how much they\nsent so whenever we call fund now\nsomebody can send some value because\nit's payable and we're going to save\neverything in this address to amount\nfunded mapping so if we deploy this now\nin our JavaScript VM we now have again a\nnew view function called address to\namount funded and we can even hit the\ndrop down to see the full name now if I\nhit fund nothing's going to happen right\nbecause my address is going to be\nsending zero in order for me to send\nsomething I have to add some value along\nwith my transaction so let's send for\nexample one guay which is going to be\nequal to one 1 2 3 4 5 6 7 8 n this much\nway so before I hit fund here if I copy\nthis fake account which is up here and I\nput it in this address to amount funded\nit's going to return\nzero but now if I\nadd one one 2 3 4 5 6 Seven 8 nine in\nhere and we go ahead and hit fund now\nwe've now just called this fund function\nwith a value of one guay associated with\nit so if I call this address to amount\nfunded now with the same address I can\nnow see how how much we've funded this\nsmart contract and we can even add more\nguay We'll\nadd We'll add 11 guay for example we'll\ncall fund and if we call this now we can\nsee that even more has been added when\nwe send our funds to a contract this\nactually means that this contract\nwherever this is deployed now is the\nowner of this amount of ether so this is\nfantastic we now have a way to fund our\nsmart contracts now here's the thing in\nthis smart contract in this funding that\nwe're doing we want to create a minimum\nvalue for people to be able to fund our\nendeavors which whatever they may be we\nwant to set some minimum value here and\nether is great but for whatever reason\nwe want to work in USD or maybe we want\nto work in some other token so how are\nwe going to get the conversion rate from\nthat currency to a currency that we can\nuse in this smart contract well the\nfirst thing that we're going to need to\ndo to set this value is we're going to\nneed to\nknow what the eth to USD conversion rate\nis because if I want to accept ethereum\nas the token but I want it in its USD\ncurrency well then I'm going to need to\nknow what that conversion rate is so how\nare we going to get this data into our\nsmart contract where are we going to get\nthis data from now remember how we\ntalked about blockchains being\ndeterministic systems and and oracles\nbeing the bridge between blockchains and\nthe real world well this is exactly\nwhere oracles come in when we're talking\nabout these systems you know these\nblockchains they can't connect to real\nword events they can't connect to\nexternal systems they can't do external\ncomputation they're intentionally these\ndeterministic systems these walled\nGardens so in order for us to make this\nconnection we need a blockchain or we\nneed some type of of network here now\njust to get a little bit more uh\ntechnical for you if we look at a\nblockchain A blockchain can easily say 1\n+ 1 equals 2 and every other node can\neasily verify this\nhowever a blockchain can't easily say\nokay let's all grab the same random\nnumber because each node is going to get\na different random number they also\ncan't say hey let's make an API call\nbecause if one node calls the API at a\ndifferent time another node calls it or\nspecifically an HTTP get there could\npotentially get very very different\nresults and if another node tries to\nreplay these transactions by calling\nthese apis again maybe 10 years in the\nfuture there's a good chance that that\nAPI is going to be\ndepreciated and they could be hacked\nthey could be malicious etc\netc the other reason that blockchains\nintentionally can't make API calls is\nbecause then they would be making\nassumptions about the real world and\nlayer ones typically don't want to have\nan opinion on any political or\ngeopolitical issue whereas an oracle\nNetwork on the other hand can make those\nassumptions the other main thing we need\nto talk about here is centralized\noracles being main points of failures if\nyou or I say hey I'm just going to be\nthe Oracle I'm going to be the one to\nput this data on chain we now have this\nmassive centralized point of failure\nwe've done all this work to make our\ndecentralized computation decentralized\nin onchain but we ruin all the decentral\nby having a single point of failure\nremember one of the whole purposes of\nblockchain is so that not a single\nentity can flip a switch and restrict\nour freedom to interact with a\ncentralized Oracle a single entity can\nflip a switch and restrict our freedom\nto interact with each other we also need\nto get data from many different\ndecentralized sources or do any type of\ncomputation in a decentralized manner\nthis is where chain link really shines\nchain link is a modular decentralized\nOracle infrastructure and Oracle Network\nthat allows us to get data and do\nexternal computation in a highly Cil\nresistant decentralized manner it can be\nas customizable as you want as you can\nrun with one node or many nodes or do as\nmany nodes as you like now currently one\nof the most popular features of chain\nlink is their data feeds or their price\nfeeds we can even go check them out over\nat\ndata. chain.\nlink we can see a number of different\nprice feeds and the networks that are\nproviding the prices for these specific\npricing points we can see here by\nlooking at the UI there's a whole number\nof decentralized different or oracles\nreturning data for different price feeds\nthis one for example is FUSD and it's\nalso exactly the price feed that we're\nlooking for having a decentralized\nnetwork bring this data on chain and\nhave it as a reference point of\ndefinitive truth allows users to all\ncollaborate and use this common good and\nit will be cheaper more secure more\nefficient than anybody even running\ntheir own centralized Oracle so these\nprice feeds are incredibly powerful\nadditionally they're being used by some\nof the top protocols in the def5 system\nright now like synthetics which at the\ntime of recording is securing around two\nbillion do sushi swap for leveraging\ntrades set protocol commodity money a\nfor understanding the price of an\nunderlying collateral now this is an\nexample of an out-of-the-box\ndecentralized Solution that's already\nbeen packaged in a decentralized manner\nfor you to consume and for you to use\nthis makes going to production a\nthousand times easier than building\neverything yourself however if you want\nto make API calls and build your own\ndecentralized network you absolutely can\nwith the chain link API calls we're not\ngoing to go into that here because using\nthe chain link price feeds chain link VF\nkeeper Network and all these other\npre-boxed decentralized services are\ngoing to make going live and going\nmainnet a lot easier you can always make\na chain link HTTP get call as well we're\nnot going to go over this though because\nputting this into production is a little\nbit trickier and working with chain link\nVF if you ever want to try them out by\nthemselves you can always head over to\ndocs. chain. link and head over to get\nthe latest price feed there's usually a\nremix button actually that we can click\nand it will kick us out to a remix\nEdition with all the code already ready\nto go for us if we just hit this gist\nright here this will include all of our\ncode which we'll go into in a second but\nlet's go ahead and compile it we're\ngoing to deploy it to a real Network\nhere this one looks like it's actually\nfor Co so we're going to go ahead and\nswitch to Coen looks like I don't have\nany Coen ethereum so we're going to gra\nCoen faucet we can usually find\ndifferent Faucets in the chain link\ndocumentation let's look up coven\nherea there is a coven faucet here it\nlooks like in order for us to get some\nCoen ethereum here we have to log in\nwith GitHub then we can add our address\nin here and get the ethereum in the\ninterest of time I'm going to skip ahead\nfor me doing\nthat great it looks like I've got some\nCo tesed now being able to switch\nbetween test Nets is going to make you a\nlot more effective as an engineer as\nwell because you're going to be able to\nunderstand how each Network actually\nworks so now we've compiled this let's\ndeploy\nthis again minim mask is going to pop\nup and let's go ahead and click the get\nthe latest price and we can see that\nthis function does indeed return the\nlatest price of ethereum now you might\nbe asking why does this number look so\nbig well remember how we talked about\nway a and guay and ether well the reason\nthat those exist is because decimals\ndon't work in solidity so we actually\nhave to return a value that's multiplied\nby 10 to some number so this value is\nactually\n2,614 times 10 raised to the E now the\nnext question you might ask is well why\ndid we work with this on a test net why\ncouldn't we do this on a local network\nand the answer to this is because there\nis a network of nodes looking at this\ntest net and delivering data onto this\ntest net when you spin up a local\nnetwork or do a simulated VM there are\nno nodes actually doing that we'll learn\nlater how to actually mock these\ninteractions and mock a chainlink node\nreturning data onto our blockchain but\nfor now let's head back over to the\ncontract that we're working on so we can\nlearn how to implement this in any\ncontract that we ever want to another\ncontract called in this case called\nprice feed has a function called latest\nround data which returns a lot of data\nit returns a round ID which defines how\nmany times this price feed has been\nupdated it returns a price which is the\nactual conversion rate between the two\nassets it returns a started at which\ndefines when this was last updated it\nreturns a timestamp and it returns and\nanswered in round don't worry about\nanswered in round for now if you want to\ndive a little bit deeper into what these\nrounds mean and what answered in round\nmeans you can definitely check out the\nchain link documentation and some of the\nFAQs to learn more now how do we\nimplement this data feed into our funme\napplication well the first thing we're\nactually going to need to do is we're\ngoing to need to import the chain link\ncode so we're going to do import at\nchain link SLC\ncontracts SL Source\nv0.6 SL\ninterfaces SL\nagregator\nE3\ninterface.\nSoul now let's talk about what this is\nactually doing oops looks like I spelled\naggregator V3 interface wrong all right\ngreat now it's actually\nconfined so let's talk about what\nimports actually do as we know an import\nwill take whatever code you're importing\nand stick it at the top of your project\nso when we import from at chainlink\ncontracts we're actually importing from\nthe at chainlink contracts mpm package\nwe can look up at chainlink\ncontracts in\nmpm and we can see and read more about\nthis\nrepository this links us back to the\nGitHub which will tell us a little bit\nmore about what's really going on if we\nfollow that import path that we got from\nthe documentation we'll end up on this\nfile in front of me now we have what's\ncalled an interface you can see these\ncontracts don't start with the contract\nkeyword but they start with the\ninterface keyword they have the exact\nsame pragma solidity at the top but the\nthe main difference is that you can see\nthat their functions aren't completed\nthey just have the function name and\nit's return type now just to be a little\nbit more explicit here I'm actually\ngoing to go ahead and delete this import\nstatement on the top and replace it with\nthat interface code from GitHub just to\nshow you exactly what's going on however\nif you've already typed that at import\nsyntax feel free to leave it in there\nand just remember that it's going to be\nthe exact same as me copy pasting the\ninterface code in in our code here\nsolidity doesn't natively understand how\nto interact with another contract we\nhave to tell solidity what functions can\nbe called on another contract this is\nwhere interfaces are actually going to\ncome in similar to strs what we can do\nwith interfaces to find a new type so if\nwe copy all this code from this section\nand place it at the top of our code here\nabove where we're declaring a contract\nwe can actually then interact with\ncontract that have these functions if we\ngo ahead and even compile this we can\nsee this does indeed compile correctly\nremember how we said before we talked a\nlittle bit about abis well interfaces\nactually compiled down to What's called\nthe ABI or the application binary\ninterface the application binary\ninterface tells solidity what functions\ncan be called on another\ncontract we need solidity to know what\nfun functions it can use and what\nfunctions it can call other contracts\nwith and if that was a little bit\nconfusing just know anytime you're going\nto interact with another contract in\nsolidity or smart contract programming\nin general you're going to need that\ncontract's ABI we'll go into what these\nabis look like a little bit later\nanyways to simplify it interface\ncompiles down to an ABI we always need\nan ABI to interact with a contract so\nhow do we actually work with this\ncontract here to interact with an\ninterface contract it's going to work\nthe exact same way is interacting with a\nstruct or a variable let's define a new\nfunction called get version and we're\ngoing to call this version function on\nthis other\ncontract so we'll start out doing\nfunction get\nversion public remember it needs to be a\nview since we're just going to be\nreading this state and even in the\ninterface it even defines it as a view\nreturns so we'll even grab this whole\nbit right here few returns un 256 now\nthe exact same way we Define variables\nand structs we Define working with other\ncontracts and interfaces so the first\nthing is we name the type which in this\ncase is aggregator V3 interface then\nwe'd name the visibility but since again\nwe're inside of this contract we're\ngoing to skip it then let's give it a\nname we'll call it price feed since this\naggregator V3 interface Bas is going to\nbe giving us price fee then we can do\nequals and this is where we're going to\ninitialize the contract so how do we\nactually choose where to interact with\nthis contract well we just type\naggregated V3 interface and then we put\nin here the address of where this\ncontract is located in order to find\nwhere this FUSD price feed contract is\nlocated on the rink be chain we can look\nat the ethereum price feeds chain link\ndocumentation it has a ton of different\nprice feeds and even more not price\nrelated\ndata let's scroll down to rink be\nbecause again on each different chain\nthe contract address that has all this\nprice feed information is going to be\ndifferent let's scroll down and find\nFUSD which is right here and we'll copy\nit and we'll paste it into\nhere now what is this line saying it's\nsaying that we have a contract that has\nthese functions defined in the interface\nlocated at this address if that's true\nthen we should be able to call Price\nfeed dot\nversion and we should be able to return\nit whoops looks like we forgot to\nadd those here and we need a semicolon\nhere I hit controls or command s\ncompiles it looks like we're compiling\nsuccessfully and we do need to deploy\nthis on a test net remember this address\nhere is located on an actual test it's\nlocated on an actual Network it's not\ngoing to be located on our simulated\nchain here so we do need to deploy this\nto injected web 3 we do need to deploy\nour contract to rink B because the rink\nbe chain has this address we'll learn\nlater on how we actually can work with a\nsimulated chain and work with these\nprice feeds but that's much later in\nthis course so let's go ahead and save\nwe'll deploy make sure we're on injected\nweb 3 now we can go ahead and hit\ndeploy metamask is going to pop up per\nusual confirm we're going to get a\ntransaction link to Ether scan showing\nus our\ncontract and once it actually is\nconfirmed we can see we have our\ncontract right here now we have our\nfamiliar functions with one additional\nfunction we have our fund button which\nis because it's payable we have our\naddress to amount funded mapping which\nis blue because it's a view and we also\nhave this get version button that's also\nblue if we go ahead and click it we can\nsee that the version of our aggregator\nV3 interface is version 3 this is the\nthird version of the aggregator\ninterfaces hence the name aggregator V3\ninterface so we just made a contract\ncall to another contract from our\ncontract using an interface this is why\ninterfaces are so powerful because\nthey're a minimalistic view into another\ncontract so this is great we have a get\nversion function but this still isn't\nthe function that we want we want to\ncall the get price function which if we\nlook at our interface we can see there\nis a latest round data function that\nreturns an answer this is the function\nthat we're going to want to call on this\ncontract so let's go ahead and make a\nfunction that calls that instead so\nwe're going to do\nfunction get\nprice public view returns uint\n256 uh oh this latest round data\nfunction though returns five variables\nso how do we actually work with that\nwell let's find out to work with this\ncontract we're going to do the exact\nsame thing we're going to do aggregator\nV3 interface because this is the type of\nthe\ncontract price feed equals\naggregator V3 interface we'll do this\nsame address in here because this is the\nFUSD\naddress then we'll do price feed dot\nlatest round\ndata now since this is going to return\nfive different values we can actually\nhave our contract also return these five\ndifferent values we can copy paste like\nthis and literally do this\nthese five values equal Price feed.\nlatest round data and you can see that\neven compiles correctly let's adjust the\nformatting a little bit here so it looks\na little bit nicer a tupal is a list of\nobjects of potentially different types\nthis is the Syntax for getting a tupal\nwe can Define several variables inside\none of these tupal Although our compiler\nis going to give us some warnings it's\nsaying unused local variable because\nwe're not actually using these for\nanything we'll come back to this now we\ncan go ahead and do return and we can\npick one of these variables that we want\nto return answer is going to be the\nprice so we're going to do return answer\nbut uh oh we're going to run into an\nerror return tight argument int 256 is\nnot implicitly convertible to expected\ntype answer is an INT 256 and we want to\nreturn a uint 256 so how do we Rectify\nthis we can fix this by using what's\ncalled type casting if we just return\nanswer we're going to be returning the\nwrong type I however integers and\nsolidity are really easy to cast into\neach other so we can just do uint\n256 and wrap it around this answer and\nthen compile and save that instead as\nyou can see now our compiler is happy\nbecause we've changed this answer into a\nu 256 awesome so now this get price\nshould return the latest price of\nethereum in terms of USD let's go ahead\nand deploy this new contract with this\nnew function so same thing we're going\nto come to our deploy section hit the\ndeploy button oh remember we got to go\nto the fund me.so let's deploy it\nconfirm with metamask\nhere and let's scroll down to our newly\ndeployed contract as you can see we have\nour get version function which still\nworks exactly the same but we have a new\nfunction too called get price and this\nshould return a un 256 answer let's go\nahead and click it amazing we've\nactually returned an answer now again if\nyou're a little confused on why this\nnumber looks so big you have to remember\nthat this actually has eight decimals we\ncould call this decimals function on the\ncontract to learn that 1 2 3 4 5 6 7 8\nand we know that the current price of\nethereum in terms of USD is\n2,482 awesome so now that we have the\nprice we can actually get the conversion\nrate but let's clean up this function a\nlittle bit before we go on up there as\nyou can see one thing that the compiler\nis complaining about is we have a lot of\nunused local\nvariables but latest round data returns\nfive different variables so how do we\nactually return the five variables but\nmake our compiler happy with us well we\ncan actually just return blanks for each\none of these sections with commas in\nbetween each other to say hey there is a\nvariable here but we're not going to use\nit this will also make our code look a\nlot cleaner\ncleaner because now this function's a\nlot smaller we say h something's here\nwe're ignoring it in 256 answer we're\ngoing to use something's here ignore it\nsomething here ignore it and ignore this\ntoo and we can even test this out by\ncompiling\nit deploying it checking on rank\nB scrolling down hitting this and\nhitting get price and you can see indeed\nit's the exact same as before awesome so\nnow we're all done cleaning things up\nright not quite yet see the other thing\nthat's really annoying here we have this\nmassive chunk of code at the top that is\nprobably a little redundant there's a\ngood chance that a lot of our contracts\nare going to want to use this aggregated\nV3 interface so let's just go ahead and\nadd that at chainlink Contract syntax\nback in because it's going to look a lot\ncleaner here and do at chainlink SLC\ncontracts if you ever get a little bit\nconfused with what you should be\nimporting to work with their contracts\nwe can see right in the documentation at\nthe top this at syntax is what this is\ngoing to use now you can also go ahead\nand browse that mpm package of chainlink\ncontracts to see what other applications\nare in there and what other files are in\nthere or you can just peruse around the\nGitHub now the third way we can actually\ndo Imports is we can import from\ncontracts that are in the same file\nsystem as our contracts well awesome our\ncontract is starting to look more and\nmore put together now one other thing\nthat I usually like to do with these is\nI usually like to put everything into\nthe gay way standard so as we saw this\nget price had eight decimal places\nhowever the smallest unit of measure AKA\nway if you look at it has 18 1 2 3 4 5 6\n7 8 nine 10 1 2 3 4 5 6\n78 so typically in these I like to try\nto make everything have 18 decimals as\nwell you don't have to do this and it'll\nsave some gas if you don't but I usually\nlike to multiply everything so that\neverything has 18 decimal places so\nsince I know this has eight I can just\ndo 1 2 3 4 5 6 7 8 I 10 and now this\nwill return the price with 18 decimal\nplaces instead of 10 now we have the\nprice of ethereum in US dollar which is\nfantastic so we could set the price of\nour fing function to anything that we\nwant here for example let's say $50 we\ncould convert whatever value that they\nsend us to its US dollar equivalent and\nsee if it's greater than or less than\n$50 all we have to do is make a new\nfunction that converts that value that\nthey send to its US dollar equivalent so\nwe could do\nfunction get converion rate and and it\nwill take a un\n256 F amount let's get this out of the\nway for the rest of this it'll be a\npublic view function since again we're\nnot actually going to have it make any\nstate change we'll do returns you went\n256 and then in this function we can do\nuint 256 f price equals get price and we\ncan call this get price function up here\nnow we have the price in here what we\nwant to do is we want to convert\nwhatever value that they send as fth\namount let's say they send one g or\nagain that's going to be this much\nway what how do we convert this to\nFUSD well we can now do U 256 F amount\nin\nUSD equals this F price times\nthe F amount that they sent this is\nactually going\nto result in a much bigger number than\nwe're looking for and then of course\nwe're going to return it let's test this\nout and see why we have to do one more\nthing here so let's again fundme we'll\ndeploy rank\nB we'll scroll down and we have this new\nfunction called get conversion rate\nlet's grab this one guay and put it in\nhere whoa this seems like it's a really\nbig number we're saying that one guay is\nequal to 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8\nnine\n10 this many\ndollars now I don't know about you but I\ndon't think the price of even one\nethereum is that many dollars maybe in\nthe distant future but definitely not\nright now the reason that it's off is we\nhave to then actually divide by this\nnumber the reason that we have to do\nthis is because both f price and F\namount have an\nadditional 10 rais to the 18th tacked\nonto them so now we have to divide it\nout in order to get the right number so\nwe're going to\ncompile\ncompile deploy\nconfirm we can scroll down and now let's\ntry this one gu we get the conversion\nright here and we can see we get a\nnumber that makes a little bit more\nsense now remember this has 18 decimals\nas well so the real number is 1 2 3 4 5\n6 7 8 1 2 3 4 5 6 7 8 9\n10 and we know that this number is\nactually accurate because we can go\nahead and pull up a\ncalculator pop that into here and we\nknow that this is one gay in US dollar\nif we get the conversion rate we're\nsaying that this many guay equals 1 E so\nwe can check it back by multiplying this\nnumber by that and we see that we do\nactually get the price of one ethereum\nin US\ndollar so our math here checks out\nawesome now since we're on the topic of\nmath I do want to talk briefly about\nsome of the pitfalls of solidity\nespecially when it comes to math prior\nto solidity 0.8 if you added to the\nmaximum size a uint number could be it\nwould actually wrap around to the lowest\nnumber that it would be and in fact you\ncan even demo this with the contract\nhere now you don't have to follow along\nwith this contract but just watch to see\nthe example we're going to call this\noverflow do Soul now in here we're going\nto add all kind of the normal stuff\ncontract\noverflow and we're going to add a\nfunction called overflow we'll make a\npublic View and we'll have a return a\nuint 8 show you why in just a minute a\nuint 256 is a really really big number\nand it's hard to kind of Imagine going\nover the maximum cap of a un\n256 but a un 8 is a lot smaller with the\nmaximum number actually being 255 so if\nwe create a uint 8 and we call it Big\nequals\n255 and then we just do return big what\ndo we think we're going to get here for\nthis we can go ahead and use JavaScript\nVM because we're not interacting with\nany other contracts let's deploy this\nand we'll see in our contract if we call\noverflow now we're just going to get\n255 however what happens if we add one\nto this number or try to add one to this\nnumber if we do it just like this\nsolidity actually knows that there's an\nissue here and says Hey try not to do\nthis but if we typ cast this as a uint 8\nslity gets a little bit more confused\nand goes ahead and lets us do this now\nwhat do we think big is going to be it\nshould be 200 56 right but big is a u in\n8 and this is the maximum size that it\ncould be so what happens when we deploy\nthis we look down we actually get zero\nwhat happens if we do 100 and we deploy\nthat we actually get 99 and this is\nbecause integers can actually wrap\naround once you reach their maximum cap\nthey basically reset this is something\nwe need to watch out for when working\nwith solidity if we're doing\nmultiplication on really big numbers we\ncan accidentally pass this cap luckily\nas a version 0.8 of solidity it actually\nchecks for overflow and it defaults to\ncheck for overflow to increase\nreadability of code even if at it comes\na slight increase of gas costs you can\nuse this unchecked if you want to have\nit keep that wrapping functionality so\njust be aware if you're using a lower\nversion than 0.8 you're going to have to\nto do something to make up for this and\nwe could write a whole bunch of code\nhere basically to check all of our math\nor we could just import something called\nsafe maath from another package similar\nto how we imported chain link we can go\nahead and import a package called safem\nmaath from a tool called open\nZeppelin now open zeppin is an open\nsource tool that allows us to use a lot\nof already pre-built contracts we can go\nahead to their documentation and go to\ntheir utilities and see safe maath they\neven have a little sticker here saying\nsafe math is no longer needed started\nwith solidity 0.8 safe math is a tool\nand a way for us to avoid some of these\nproblems with doing math and solidity\nnow I'm not going to spend too much time\non the contracts that actually fix this\nbut we can actually import right from\nthe chain link directory as well a\nsolidity file called safe math chain\nlink and what we can do is right after\nour contract we can do using\nsafe math chain\nlink for un\n256 and what this will do is it'll use\nsafe maath chain link for all of our U\n256 and safe maath chain link doesn't\nallow for that overflow to occur\nlibraries are really similar to\ncontracts except that they're isolated\ncode that can be run in a reusable\ncontext in this case where attaching the\nsafe math chainlink library to U 256 so\nthat these overflows are automatically\nchecked for just keep in mind if you\nusing anything less than 0.8 you're\ngoing to want to use some type of safe\nmath just to check for your overflows\nnow this is for those of you who are\nfamiliar with safe math and integer\noverflows and underflows we are not\ngoing to be calling the functions that\nsafe math provides us like div add mole\nyou know all those functions simply\nbecause in 0.8 moving forward we no\nlonger have to use those and we can just\nuse our regular operators like plus and\nminus so this is great our contract is\ncoming along really well we now have a\nway to get the conversion rate of\nwhatever f is sent and turn it into US\ndollar now we can set a threshold in\nterms of US dollar but how do we\nguarantee that whatever amount that the\nusers send when they call fund is going\nto be at least $50 well first we might\nwant to set a minimum value so we can do\nun 256 minimum\nUSD equals let's say\n$50 and again since we're using\neverything in guay terms we want to then\nmultiply this by 10 ra to the\n18th and just wanted to take a pause for\na second because this line is actually\nwrong this should be raised to the 18th\nso this line should really look like\nthis where it has the double star so\napologies the rest of this has that\nsingle star but it should be the double\nstar here if you do have the single star\nthough the rest of the contract will\nstill work fine so this will be the\nminimum value it'll be $50 * 10 raised\nto the 18th so that everything has 18\ndecimals now that we have a minimum\namount how do we actually make sure that\nthis minimum amount is met in the value\nthat they send us well if you're\nfamiliar with if statements we could do\nsomething like if message.\nVal is less than minimum\nUSD then revert\nor we could do something a lot easier\nand better practice and much cleaner we\ndo what's called a require statement\nwhen a function call reaches a requir\nstatement it'll check the truthiness of\nwhatever require you've asked so in our\ncase the converted rate of message.\nvalue needs to be greater than or equal\nto our minimum\nUSD this line says that if the\nconversion rate of message. value to USD\nif they didn't send us enough ether then\nwe are going to stop executing we're\ngoing to kick it out we're going to say\nhey this doesn't count and we're going\nto do what's called a revert we're going\nto revert the transaction this means\nthat the user is going to get their\nmoney back as well as any unspent gas\nand this is highly recommended we can\nalso then additionally add a revert\nerror message something like you need to\nspend more eth\nso now let's try this out as we saw one\nguay is going to be way less than $50 so\nif we send one guay along with this fund\ncontract call it should kick out and say\nyou need to spend more eth so let's\nactually try this let's go to the deploy\ntab we'll get rid of our overflow we use\ninjected web 3 because again we are\nworking with the chain link aggregated\ncontracts that are on chain we're going\nto move to fundme and we're going to hit\ndeploy\nmet Mas going to pop off and we're going\nto hit\nconfirm now if I try to hit fund let's\nsee what happens we're getting a gas\nestimation failed says gas estimation\nerror failed with the following\nmessage execution reverted you need to\nspend more eth so the contract isn't\neven letting us make the transaction we\ncan go ahead and try to send the\ntransaction but here's what's going to\nhappen on ether scan once this goes\nthrough you can see that once this\ntransaction finished we got this status\nfail with error you need to spend more\neth we don't want to force these\ntransactions to go through if we look at\nour metamask we can even see this failed\nbit here so whenever you see these gas\nestimation failed errors usually that\nmeans something reverted or you didn't\ndo something that was required however\nif we go to Value here and we spend a\nlot more let's say 0.1\nether which if we take out our\ncalculator\n250 0.1 is going to be\n$250 this should easily be well and\nBeyond past our $50\nthreshold so let's add 0.1 ether and\nremember we got 0.1 by adding it in the\nconverter and grabbing the way again the\nway is the smallest denomination now if\nwe change this to way and hit fund this\nshould go through we go hit fund now\nyou'll see mamass pops up because mamass\ngoes oh yeah this transaction isn't\ngoing to revert and that's what we want\nso we can go ahead and hit\nconfirm and now we'll finally have sent\nsome funding to our\ncontract now that this is confirmed we\ncan go ahead and grab our address\nhere pop it into our address to amount\nand we can see that indeed our funding\nhas gone through now we can be part of\nthis crowdsourcing application with our\nminimum value which is fantastic awesome\ngreat\njob awesome so now we can fund this\ncontract with a certain minimum USD\nvalue in this case it's going to be $50\nnow you'll notice though that right now\nwe don't do anything with this money so\nwe're going to fund this contract\nhowever that's it and we don't have a\nfunction in here to actually withdraw\nthe money so there's no way that even\nthough we just sent this contract some\nmoney there's no way for us to get it\nback so how do we fix this well we can\nadd a withdraw function in here so let's\ngo ahead and add that\nfunction\nwithdraw and this is also going to be a\npayable function because we're going to\nbe transferring eth we'll make this\npublic and we can do message. sender.\ntransfer transfer is a function that we\ncan call on any address to send eth from\none address to another this transfer\nfunction sends some amount of ethereum\nto whoever it's being called on in this\ncase we're transferring ethereum to\nmessage. Sender so all we need to do now\nis Define how much we want to send well\nwe're going to send all the money that's\nbeen funded so to get all the money\nthat's been funded in this contract we\ncan do address\nthis.\nbalance now there's a couple of special\nthings going on with this line first\nwe're saying address of this\nthis is a keyword in solidity whenever\nyou refer to this you're talking about\nthe contract that you're currently in\nand when we add address of this we're\nsaying we want the address of the\ncontract that we're currently in\nwhenever you call an address and then\nthe balance attribute you can see the\nbalance in ether of a contract so with\nthis line we're saying whoever called\nthe withdraw function because whoever\ncalls the function is going to be the\nmessage. sender transfer them all of our\nmoney so let's go ahead and try this\nlet's deploy\nfundme and now let's fund this with a\nlot of ether so that we can see it we'll\nfund it with one whole\nether so that we can see it go into the\ncontract and get pulled out of the\ncontract we'll hit the fund\nbutton and you'll see we're sending one\nwhole ether into this\ncontract now if we look at our balance\nbance it's gone down from 17 to 16 or if\nyou're still at 18 it went down from 18\nso let's try to get it back if we call\nthis withdraw function now\nconfirm once this transaction goes\nthrough we should get all of our ether\nback let's look at our metamask and boom\nindeed we have got all of our e back\nhowever looking at this contract we can\nsee that hm well maybe we don't want\nanybody to be able to withdraw all the\nfunds in this contract that seems like\nit might be a really bad idea maybe we\nonly want the funding admin to be able\nto withdraw funds so how do we set this\nup in a way that only the contract owner\ncan actually withdraw funds well we\nlearned before that the require function\ncan actually stop contracts from\nexecuting unless some certain parameters\nare met we can do the same thing here\nwith\nrequire message. sender\nequals the\nowner but but we don't have an owner to\nthis contract yet so how do we get an\nowner to this contract the instant that\nwe deploy it well we could have a\nfunction called create owner what\nhappens if somebody calls this function\nright after we deploy it well then we\nwouldn't be the owner anymore so we\nactually need a function to get called\nthe instant we deploy this smart\ncontract and that's actually exactly\nwhat the Constructor does so typically\nat the top of your smart contracts\nyou'll see a Constructor and this this\nis a function that gets called the\ninstant your contract gets deployed we\ndon't even need to do add function here\nwe can literally just call\nit Constructor because it's what\nconstructs the smart contract so we'll\nmake Constructor public and whatever we\nadd in here will be immediately executed\nwhenever we deploy this contract so one\nthing that we could do so we could have\nan owner be set the instant we deploy\nthe smart contract so in the top we\ncould add\naddress owner and in our Constructor we\ncould say owner equals message. sender\nbecause the sender of this message is\ngoing to be us it's going to be whoever\ndeploys this smart contract we can even\ntest this out in the JavaScript VM to be\na little bit quicker because we're not\nactually going to be calling the fund or\nthe get price function for now oops\nlet's also make this public so that we\ncan interact and see this owner variable\nso now if we go to fund me we deploy\nthis in the JavaScript VM we should be\nable to see who the owner of this\ncontract is and it should be our address\nbecause this Constructor function should\nhave been immediately called the instant\nthat we deployed the smart contract\nawesome we can see the owner of this\nsmart contract is indeed our wallet\nbecause remember when're working with\nthe JavaScript VM our wallet is these\nfake wallets that they kind of give us\nwe can even try this with an injected\nweb 3 with deploying this\nand the owner should be this Ox 757 Etc\naddress let's go ahead and look at funme\nsee the owner and we do indeed see the\nowner is us okay great now we have an\nowner we can go down to our withdrawal\nfunction and use that same\nrequire so we can\ncall\nrequire message. sender equals\nequals owner equals equals is the way\nthat solidity understands true false\nwe're saying that message us sender has\nto equal owner now let's go ahead and\ntry this and we'll try with the\nJavaScript VM again for Speed\nreasons let's deploy this\nfundme and if we go down here we try to\ncall the withdraw function and it looks\nlike it is successful because currently\nthis is the address that deployed the\ncontract and it's also the address that\nis calling withdraw however if we switch\nto a different account and call\nwithdraw you'll see that remix actually\nfreaks out down here it says uhoh\nsomething wrong happened and this is\nessentially the required statement\nkicking out if you want to try it with\ninjected web 3 as\nwell we can absolutely do that too and\nremember the way to switch accounts in\nmetamask is to either create account\nright here or just switch like this and\nthen we'll connect with account two\nso if I try to withdraw from this second\naccount that didn't call the contract\nand I hit withdraw now it's going to\ngive us gas estimation failed because\nthe required statement is going to kick\nout but again if we switch back to\naccount one and we call withdraw\nmetamask is going to pop up and it's\ngoing to allow us to withdraw now\nobviously there's nothing in this\ncontract right now so we're going to\nwithdraw nothing but we can still call\nit it's going to do message. transfer\nzero so this is great we can now require\nthis withdraw function is only callable\nby the owner now what if we have a ton\nof contracts that want to use something\nlike this they require the message.\nSenter to be some owner or maybe it's\nmore complicated than this is there an\neasier way to wrap our functions in some\nrequire or some other executable well\nthis is where modifiers come in we can\nuse a modifier to write in the\ndefinition of our function add some\nparameter that allows it to only be\ncalled by our admin contract modifiers\nare used to change the behavior of\nfunctions in a declarative way let's\ncreate our first modifier we'll call it\nmodifier which is a key word only\nowner and we'll add this require\nstatement in here require message.\nsender equals owner then after this we\njust add an underscore and a\nsemicolon what a modifier is going to do\nis it's going to say hey before you run\nthis function do this require statement\nfirst and then wherever your underscore\nis in the modifier run the rest of the\ncode so we could also do a modifier\nwhere the underscore is up here and then\nthis is afterwards but but we want to\nrun the require first so now what we can\ndo is we can make this function withdraw\npayable only owner\npublic and what's going to happen is\nbefore we do this transfer we're\nactually going to check this modifier\nwe're actually going to run this require\nmessage. sender equals owner and then\nagain where this underscore is that's\nwhere we'll add the rest of the function\nso again for Speed reasons and since\nwe're not actually going to be\ninteracting with the chain link data\ncontract we can go to JavaScript VM\nswitch to\nfundme deploy\nand we can call withdraw obviously we\ncan call withdraw from our account but\nif we switch accounts and try to call\nwithdraw we're going to get an error\nwhich is perfect because that means our\nmodifier is working correctly awesome\nnow we have a fantastically succinct\nfundme contract here the only thing that\nwe're really missing is that when we\nwithdraw from this contract we're\nactually not updating our balances of\npeople who funded this so even after\nwith we we withdraw this is always going\nto be the same so we need to go through\nall the funders in this mapping and\nreset their balances to zero but how do\nwe actually do that we can't actually\nLoop through all the keys in a mapping\nwhen a mapping is initialized every\nsingle key is essentially initialized\nnow we obviously can't go through every\nsingle possible key on the planet\nhowever what we can do is create another\ndata structure an array something we're\nalready familiar with so let's go ahead\nand create a new funders array that way\nwe can Loop through them and reset\neveryone's balance to zero we'll do an\naddress array because it's going to be\nan array of all the funders\naddresses we'll make it public and we'll\ncall it\nfunders now when somebody funds a\ncontract what we're going to do is we're\ngoing to do funders now whenever a funer\nfunds this contract we can go ahead and\npush them onto our funders array so we\ncan do funders push message. sender\nnow if somebody funds multiple times the\nfunders array is going to be a little\nbit redundant but we're going to ignore\nthat for now now that we have an array\nof funders when we withdraw everything\nwe're going to want to reset this to\nzero when we withdraw everything we want\nto reset everyone's balance in that\nmapping to zero so we're going to do\nwhat's called a for Loop for Loop is a\nway to Loop through a range of numbers\nto do something so we're going to say\nfour\nun\n256 funer\nindex equals zero because we want to\nstart with the zeroth\nindex we're going to give it a Max size\nto go to we're going to say the funer\nindex has to be less than funders do\nlengthlength is how we get the length of\nour\narray and then we're going to say\nfunders index Plus+ this means that we\nhave an index variable called funer\nindex and it's going to start from zero\nthis Loop is going to finish whenever a\nfuner index is greater than the length\nof the funders every time we finish a\nloop we're going to add one to the funer\nindex that's what that funer index Plus+\ndoes it adds one to the funer index and\nevery time whatever code is in this for\nloop executes we're going to restart at\nthe top and all we're going to do in\nhere is we're going to\ngrab the address of the fun\nfrom our funders\narray\nfunders so the\nfun at the index in our funders array\nwe're going to use this as the key in\nour\nmapping so we're going to take address\nto amount\nfunded of funer and we're going to set\nit equal to zero so now our mapping is\ngoing to be all updated to people having\nzero funded in there we do have to do\none more thing as well we have to reset\nour funer array as well now there's a\ncouple ways to do this but a really easy\nway is just to set funders equal to a\nnew array so we could do\nfunders equals a new blank address\narray so all right it looks like we've\ngot everything in here we need right\naway when we deploy this we are set as\nthe owner we can allow anybody to fund\nwhatever public good that we're doing\nand they have to fund it with the\nminimum USD value that we actually set\nwhenever they fund we'll keep track of\nhow much they're funding and who's been\nfunding us we can get the price of the\nethereum that they send in the terms of\nUSD and we can convert it to check to\nsee if they're sending us the right\namount we have our only owner modifier\nso that we're the only ones who can\nwithdraw from the contract and when we\ndo withdraw everything from the contract\nwe reset all of the funders who have\ncurrently participated in our\ncrowdsourcing application awesome let's\nsee if everything works end to end so\nwe're going to go to fundme we're going\nto deploy it we're going to confirm from\nmetamask and remember if you're ever\nconfused about what's going on or or\nsomething weird is happening in your\ntransactions or your deployments you can\nalways go into ether scan and read more\nabout your transaction and what's going\non\nnow that our transaction has been\ndeployed let's go ahead and just take an\ninventory as what's going on we have our\nowner which is our address right here we\nhave the aggregator V3 interface version\nwhich is version 3 which we can kind of\nignore we have the price of ethereum in\nterms of USD with 18 decimals instead of\neight we have a function that allows us\nto get the conversion rate of any\nethereum amount to its dollar\nequivalent we have an array of funders\nwhich right now starts out as empty we\nhave a mapping of addresses which also\nright now starts out as empty let's go\nahead and try to fund this contract\nwe'll use way just so that we're always\non the same page and we'll fund it with\n0.1 way remember everything has 18\ndecimal places so if we want to do 0.1\nwe just do 17 so we can do one 1 2 3\nfour 5 six seven eight 1 2 3 four 5 six\nseven eight nine and that'll be 0.1\nethereum now we can go ahead and hit\nfund and we're going to send 0.1 eth to\nthis\ncontract great so if we look at the zero\nwith index of funders we can see that\nindeed we have funded this contract\nlet's even have our second account fund\nthis contract so all we got to do is\nswitch to this contract and metamask we\ncan go\nahead and put 0.1 eth back in here for\nvalue and hit\nfund now as you can see we're deploying\nthis from account two let's go ahead and\nhit\nconfirm fun at index zero is going to be\nour admin and the funer at index one is\ngoing to be our second\naccount and if we go ahead and we\nadd this funer here we can see we've\nindeed sent 0.1 ether with this account\nif we go back to our account one and put\nthis in here we can see that that\naddress also has 0.1 ether\nfantastic so let's try to be malicious\nlet's try to have account number two\nactually withdraw all the funds in here\nlet's hit this withdraw function uh oh\nthe transaction has failed we're\nrelentlessly malicious we want to send\nthis transaction regardless so even\nthough I'm not the admin of this\ncontract I've gone ahead and still tried\nto send it withdraw so what happens\nnow we can see that remix is saying hey\nsomething went wrong and again if we\nlook at ether scan we can see that there\nis a fail here since in our modifier we\ndidn't give a reason here nothing shows\nup but we could have always put a reason\nin there and something would show up so\nall right let's go ahead back to the\nactual\nadmin and now let's try to withdraw\neverything so if we hit withdraw now we\ncan go ahead and confirm what should\nhappen is everything in here should be\nback to zero and this array should be\nback to zero as well and if we watch our\naddress we can see it literally just\nwent from 04 to 6 because it got 0.1\nfrom the original funding that this\naccount put in and the 0.1 that our\nsecond account put in so now if we look\nat funer zero we can see it actually\nerrored because it is now a brand new\narray and there is nothing at index zero\nif we try to see how much this address\nnow has funded it's back down to zero\nawesome you've now learned how to deploy\na relatively simple yet effective\ncrowdsourcing application where users\ncan fund and an admin can withdraw those\nfunds to go spend them on\nthings now we've been working with remix\nso far to start our smart contract and\nour solidity development Journey remix\nis an incredibly powerful what's known\nas a web IDE or an integrated\ndevelopment environment and in my\nopinion remix should always be the\nstarting ground for anybody looking to\nstart their smart contract Journey\nbecause it is a wonderfully friendly way\nto really show what's going on behind\nthe scenes and it's really easy to see\neverything we're doing with ethereum\nwith chain link and with our smart\ncontracts now it does have some\nlimitations though it's really hard to\nintegrate other parts of different\nprojects it has some limited support for\ntesting or custom deployments it's a\nlittle tricky to save files locally you\nneed an internet connection to actually\ninteract with it and it doesn't have\npython so in order for us to deploy test\nand automate everything about our smart\ncontract development cycle we want to\nconnect our solidity and our smart\ncontracts with a more traditional\nprogramming language like python this\nway we can customize our entire\ndevelopment environment in any way that\nwe like we're first going to teach you\nall how to work with what's known as web\n3.pay which is an incredibly powerful\npython package for doing everything that\nwe want to do with smart contracts then\nonce we learned some of the basics of\nweb 3. Pi then we'll move on to Browning\nwhich is a smart contract development\nframework built on top of web 3py which\nmakes our lives even easier however it's\nstill really important to learn web 3p\nfirst because this will teach you what's\ngoing on behind the scenes of\nbrownie now for the rest of this course\nI'm going to be working with Visual\nStudio code which is an incredible ibly\npowerful text editor that will give us a\nlot of formatting and a lot of really\nnice tools to work with deploying and\ninteracting with our smart contracts if\nyou've already got vs code and Python\nand your entire coding setup set up the\nway that you like it feel free to use\nthe timestamps in the description to\nskip ahead to the next section you'll\noften hear people referring to this as\nvs code or Visual Studio code but just\nto point out this is not what you're\nlooking for right in front of you here\nVisual Studio is a different application\nmake sure you're on Visual Studio code\nif you want to be a total Hardo and just\nwork with Vim or emac or whatever else\nyou want to do you absolutely can but\nI'm going to go through setting up\nvisual studio code the way that I like\nit and if you guys want to follow along\nI highly recommend it because it's going\nto make your life a lot easier there's a\nlink to download visual studio code in\nthe GitHub repository basically all you\nhave to do is come to the site right\nhere and you can hit this big download\nbutton it should recognize what\noperating system that you're on be it\nWindows be it Mac or some other\noperating system and if it doesn't you\ncan go ahead and hit this little drop\ndown and pick one there so let's go\nahead and download visual studio code\nand open it\nup awesome once you've downloaded Visual\nStudio code this is approximately what\nyou should be seeing there's a fantastic\ngetting started section here where if\nyou're brand new to vs code and you want\nto learn a little bit more quickly you\nabsolutely can and we have some links as\nwell in our GitHub repository giving you\na crash course in vs code if you want to\nlearn more let's set this up though so\nit's going to be really friendly for us\nto be doing our smart contract\ndevelopment here so first we want to go\nto this extensions tab it looks like\nthese little blocks thing right here and\nfirst we're going to look up Python and\nyou want to install this python\nextension right here this is going to\nmake our lives a lot easier for\ninteracting with python and and doing a\nlot of things with\npython then you're going to want to go\nahead and download this and install this\nsolidity extension this is going to make\nformatting our solidity a lot easier now\nwe want to download python if you\nhaven't already so go ahead to\npython.org\nlet's go to downloads and it should\nrecognize what operating system that\nyou're on and you can just go ahead and\nhit the download button and then follow\nthe steps to download this I've already\ngot it download so I'm not going to walk\nthrough\nthis okay great now that we have python\ninstalled one of the other amazing\nthings about VSS code is you can\nactually open a terminal up inside a\nvisual studio code way you can open your\nown terminal if this is your vs code you\ncan go over on this top bar to terminal\nand select new terminal\nand you'll see something that looks like\nthis it might be a bash it might be a\nzch it might be a Powershell there's a\nlot of different types of terminals that\nyou'll be able to see by looking right\nhere we can now test to see if python is\ninstalled correctly we type in Python\nspace-- version we should get something\nthat looks like this the exact version\nof python doesn't really matter here but\nideally you're at least on python 3.8 if\npython D- version vers doesn't work you\ncan also try\npython 3-- version now if neither one of\nthose works we actually have a number of\ntroubleshooting tips in the GitHub\nrepository for this course and often\ntimes a quick Google search on whatever\nerror that you have you'll get a link\nwhich will lead you to the answer but if\nthat Google search doesn't lead you to\nthe answer then just go ahead and drop\nan issue or conversation associated with\nyour issue on the GitHub repo associated\nwith this course in particular there are\na couple of common errors that I've\ndefinitely seen a number of times so if\nyou see an issue on your instance that\nmatches something on the screen here\ndefinitely 100% be sure to check out\nthose troubleshooting tips sometimes\njust installing some of these\napplications is really the hardest part\nof doing the entire coding Journey here\nso please make sure you have Python and\nvs code installed correctly before\nmoving on and don't be discouraged if\nthis doesn't work exactly the way that\nit should right away now if you're on a\nMac you can actually hit control back\ntick and it will toggle back and forth\nbetween having the terminal open and\nclosing it I find this really helpful\nand I use it all the time instead of\nhitting buttons a key tip for\nproductivity is going to be using\nkeyboard shortcuts instead of clicking\naround all the time you'll be much\nfaster okay great we have python\ninstalled we have Python and solidity\nextensions of Visual Studio code\ninstalled let's start working on a new\nproject so in our terminal so in our\nterminal we can create some folder I've\nalready created a demos folder here you\ncan create one as well if you'd like by\ndoing\nmkdir demos since I've already done it\nthe file already already exists and then\nCD into\ndemos you can type clear or if you're on\na Mac command K to clear the terminal\nnow here's what we're going to be doing\nwe're going to be working with simple\nstorage again the exact same contracts\nbut instead we're going to be using web\n3.y so we're going to make a new\ndirectory inside of our demos folder SL\ndirectory called Web 3 Pi simple\nstorage and we're going to see\ninto this\nnew folder right here now again all the\ncompleted code is going to be in our\nGitHub and there's going to be a link to\neverything that we do in this folder in\nthis GitHub so you can always refer to\nthat if you get lost and the next thing\nthat we want to do is we want to have\nour Visual Studio code know that we're\nin this folder so we can go ahead and\nclick this files icon and hit open\nfolder and I'm just going to go to this\nweb 3 Pi simple storage and hit open and\nanother vs code will actually pop up we\ncan see on the left hand side here we\nhave a folder this will show all the\ndifferent files and folders in our web 3\nPi simple storage directory let's go\nahead and create a\nfile. so we can rightclick on this area\nand select new file and do\nsimple storage. soul and then we can go\nback to our simple storage. and remix\ncopy everything and then paste it into\nhere if you don't have it up remember\nyou can always refer back to the GitHub\nrepository which will have it in there\nfor you awesome now we have our solidity\nin its own file called Simple storage.\nSoul you'll notice that some of the\nwords are actually highlighted different\ncolors this is known as syntax\nhighlighting and it's due to the fact\nthat we added the solidity extension in\nit makes reading this code a lot easier\nnow that this file is in here we'll see\nthat we have this little Dot here\nwhenever you see this little dot this\nmeans that your vs code file isn't saved\nso we want to always save it otherwise\nwhen we compile or we go to r a script\nthings might not work correctly so we\ncan save it by going up to file and then\nselecting save or again you're going to\nwant to learn how to do the keyboard\nshortcuts because you're going to want\nto hit save often for Mac it's command s\nand for Windows it's controls now the\nother thing that you'll see is you get\nthis red line here this is vs code's way\nof telling us it thinks that there's an\nerror at this position so this is really\njust the extension being a little bit\nconfused here and we can safely ignore\nthis and normally when I'm coding I do\njust ignore it we're often going to be\nflipping back and forth between compiler\nversions so often times this isn't\nreally a helpful warning here but if it\nis really bothersome we could rightclick\nit and do something like solidity change\nGlobal compiler version or we can go to\ncode preferences settings let's close\nthis so we can see some more things in\nhere we'll look up solidity and we'll\ncome to this solidity extension config\nwhat we can do then is scroll down and\nwe can see solidity compile using remote\nversion this will allow us to choose\nwhat version we want to compile with if\nwe do\n0.6.0 and hit save and go back to simple\nstorage you'll see the Red Line is now\ngone while we have this up another\nreally helpful piece that we can do here\nis we can add what's called a formatter\nso if we scroll down to solidity format\nyou'll see that this enabl disables the\nsolidity formatter we can go from none\nto prettier then we'll also look up\nformat on Save and we want to make sure\nwe have this editor format on Save check\nmarked what we can do then is we can\ncome over to simpl\nstorage. and maybe I've got some bad\nformatting in here we'll move over\nfavorite number string name and put a\nwhole bunch of new spaces in here or\nsomething now if I hit save it\nautomatically reformats our file to look\na lot nicer so to recap we want to turn\non format on Save and if you get issues\nwith a red line under pragma solidity\nyou can just change the compiler version\nin your settings here now while we're in\nhere we're also going to go ahead and\nset up our python formatting as well so\nfirst thing that we're going to do is\nwe're going to install the black python\nformatter so we're going to open up our\nterminal here and whenever you install\npython it comes pre-installed with this\npackage called hip to check to see if\nyou have Pip installed correctly run pip\nD-\nversion now we can install the Black\nformatter by running pip install\nblack I already have it installed so\nit's going to be pretty quick for me\nthen we'll come to our settings and\nwe'll look up\npython\nformatting and we'll scroll\ndown to python formatting provider you\nmight have autop bait or none in here\nyou're going to want to change it to\nBlack this way whenever we save our\npython files now they will also get\nautomatically formatted to be very\nreadable and really nice and just to\nnote for my Demos in solidity I don't\nalways have format on save for solidity\nI do have format on save for my python\nbut I'm still going to highly recommend\nyou have format on save for both your\nPython and for your solidity anyways so\nhow are we going to actually deploy this\nwell this is where our python is going\nto come into play Let's go ahead and\ncreate a new file on the left here and\nwe'll call it deploy dopy now let's go\ninto this deploy dopy file and let's\nstart actually figuring out how we can\ndeploy this in Python and this is the\npart of the course where we start using\npython here if you're unfamiliar with\npython or a little bit weaker on python\nthere is a fantastic free code Camp\ncourse that goes through all the basics\nof python if you want to learn more I\ndefinitely recommend checking it out\nhowever we are going to walk you through\nall the scripts that we write anyway so\ndon't be afraid to just jump in and\nfollow along with what we're doing here\neven if you have no experience so the\nfirst thing that we're going to want to\nactually do is read this simple storage\nsolidity file we need to get this into\nthis deploy script so that our python\nfile knows what it's going to deploy so\nhow do we do this well we're going to\ntype with\nopen quote.\nslash simpl storage. Soul comma r\nas\nfile simple storage file equals file.\nread now what is this actually doing\nwell it's saying that we're going to\nexecute some code inside this indented\narea after the colon and then once this\ncode is finished we're actually going to\nclose this file because right now we're\nopening it we're going to close it once\nit's done the file that we're going to\nopen is going to be this simple storage.\nSoul which is located right here in this\nsame directory that we're in we're going\nto only read from it and we're going to\ncall it file and then we're going to\nread all the contents of this file and\nplace it in a variable simple storage\nfile so then we can go ahead write a\nprint statement print simple storage\nfile and if you hit save here you'll see\nthat it automatically gets formatted\nwhich is really nice if you want to run\nblack yourself you can just type black\ndot and it'll automatically format all\nthe python files in your folder here\nyou'll know that you're doing it right\nif you add a whole bunch of new lines\nand then save it anyways enough fun\nformatting let's head on down to the\nterminal and let's call python\ndeploy and we can see our terminal\nprinted everything in simple storage\nfile which is perfect now our python\nscript has what it needs to actually get\nstarted working with our solidity now\nsomething you'll see I do a lot is I\nsave a lot and if you're looking for\nsome keyboard shortcuts you can always\ndo command P at little bracket here and\nlook up keyboard shortcuts reference and\nclick this it'll bring you to this\nkeyboard's reference page based off of\nwhat operating system that you have all\nright great so now that we can actually\nread from our simple storage. file we\nactually have to compile it because\nremember back in remix every single time\nwe did anything with our files we had to\ncompile them first so we need some\ncompiler in Python luckily there is a\nfantastic python package called py X\nthat does exactly this now I also want\nto point out though that pyul X is\nactually a fork of this package called\npulk now you can still use pyul however\nI'm going to highly highly recommend\nthat you use pyul x instead as pulk X is\na lot more actively maintained than\nethereum pyk we can install it with Pip\ninstall pyk X we could even hit this\nlittle copy button move back on over\nhere paste it in and hit enter again\nI've already installed it so it's pretty\nquick for me the way that we can use it\nnow is by importing in it into our\npython here so we'll say from Suk X\nimport\ncompile standard compile standard is\ngoing to be this main function that we\nactually use to compile this code so\nlet's go ahead and compile our\nsolidity we're going to save our\ncompiled code to a variable called\ncompiled\nSoul this is going to be equal\nto us calling this compile standard\nfunction but we're going to add a lot of\nvariables and a lot of parameters into\nthis function here first thing we have\nto add is a\nlanguage which in this case is solidity\nwe're going to add in some\nsources which we're going to say our\nsources is going to be\nsimple storage.\nsoul and it's going to have some\ncontent which is equal to this simple\nstorage file variable that we me oh\nexcuse me this all has to be in a\na bracket piece as well and see if I hit\nsave here it auto formats which is\nreally nice and another quick tip you\ncan see how even my brackets are\nhighlighted in these fun colors if we go\ndown to extensions and look up bracket\nyou can add this bracket pair colorizer\nwhich will help make the brackets look a\nlittle bit nicer kind of as you see here\nyou can go ahead and install that as\nwell anyways then we'll add some\nsettings and a lot of this is a little\nbit lower level stuff than what you're\nreally going to have have to know or use\nso I'm not going to go too deep into\neverything that's actually going on here\nfor now but in our settings we're going\nto choose an output\nselection which is going to choose what\nwe output when we compile this do a\nlittle star\nhere in the star we're going to do\nanother\nstar we're going to choose our output\nlist we're going to get an ABI out\nthat's incredibly important which we've\ntalked about before we're going to get\nsome metadata we're going to get an evm\ndoite\ncode we going to get an evm do Source\nmap that's pretty much it again I'm not\ngoing to go too deep into what this\noutput selection and what these settings\nare actually doing but if you want to\nlearn more you can go to the homepage of\npyk X scroll down to the documentation\nsection and read more in the docs on\nwhat you can actually put in all the\ndifferent features that this actually\nhas the last thing we're going to do is\nwe're going to add a Suk version or\nsolidity version version we're going to\nsay\nsulk version equals and then we'll\nchoose the version that we want to use\nso we'll put in\n0.6.0 and then what we should be able to\ndo is print out this compiled\nso and we'll see just a whole bunch of\nreally really lowlevel stuff so let's go\nahead and run this we'll run python\ndeploy pi and you'll see we get this\nmassive object here which has has a\nwhole bunch of basically unreadable\npieces but this is a lot of the low-l\ncode that actually gets compiled\nwhenever we use a compiler in remix or\nnow in Python remix actually does the\nexact same thing once we compile\nsomething on remix you can actually copy\nthe bite code if you hit this little\ncopy button and copy the bite code and\ncome back to your vs code and create a\nnew file a keyboard shortcut to create a\nnew file is command n and we paste\neverything we can see there's a whole\nbunch of stuff in here these op codes\nare the low-level code that our contract\nis actually doing that actually governs\nhow this code works this is what our\nwritten code is getting compiled down to\nso solidity can actually read it and\nunderstand what's going on you'll also\nsee this thing called ABI which is in\nremix and we're even going to Output it\nright here we have this ABI thing now in\nremix if you hit copy the button on the\nABI come back create a new file paste it\nyou can see we have this long Json\nobject this is that application binary\ninterface that we've talked about so\nmuch you can see that it's actually\ndescribing all the functions and\nvariables so for example we have a\nfunction called add person and it takes\ntwo parameters a name and a favorite\nnumber so we have this input section for\nthe function and we have this section\nthat describes what the function can is\nactually doing so the name is AD person\nit doesn't have a return type it's non-p\npayable and it's a function and we can\nsee that for pretty much everything in\nhere this is the lowest digestible way\nto say hey here's where all the\nfunctions are here's what the parameter\ntypes are here's what the return types\nare going to be and everything like that\nso we're going to close it out for now\nthough so this is fantastic we've now\ncompiled our solidity typically I\nusually also like to Output it and print\nit out to a file as well so to do that\nwe'll do with\nopen compiled code.\nJson and this time instead of reading\nwe're going to wrun right and we'll call\nthis as file as well instead of doing\nfile. right we're going to do what's\ncalled adjacent do\ndump piled Soul file we do need of\ncourse to import Json also just a note I\nknow it says we're using sulk here but\nplease use sulk X still I ended up\nfilming a little bit of both versions so\nI did a little bit of a a mix and match\nbut please use sulk X even if you see\nSuk what this line is going to do is\nit's going to take our compile Soul Json\nvariable and just dump it into this file\nhere but it's going to keep it in the\nJson syntax so it's still going to be\nJson e so now if we run python deploy\npiy we'll see we have a new file in here\ncalled compile code. Json the other\nreason that I wanted to do this was\nbecause if I hit contrl s it actually\nformats this into a readable way now\nagain we can go into these settings here\nwe can look up Json\nand we can do enable Json formatter and\nthis will automatically make it so that\nwe format this Json so it's a lot more\nreadable again the reason I like to\nOutput this is because this ABI is so\nimportant and we're going to use it so\nmuch that I like to kind of be able to\nsee it and and read through it really\nquickly the rest of this lower level\nstuff like evm and bite codes and op\ncodes we don't really work with so much\nhowever as you learn more and more about\nsolidity you'll probably see more and\nmore of op code so if you really want to\nlearn a lot of really lowlevel stuffff\nlook into op codes but for the purpose\nof this tutorial we're not going to be\ngoing too deep into it okay awesome so\nwe've compiled our solidity we've even\nstored our solidity code to this\ncompiled code. Json file now what do we\ndo we probably want to deploy it and\ntest it out so how do we actually do\nthat well first we actually have to get\nthe bite code we need the bite code of\nthe file so that we can actually deploy\nit so we're going to do bite\ncode equals compiled\nSoul\ncontracts simple storage.\nSoul simple\nstorage\nevm white\ncode object all right great there we go\nso now we have our bite code we also\nneed to get our ABI so we need to get\nthe API so what we're doing here when\nwe're typing in all these words like\ncontract simple storage simple storage\nis we're walking down the Json here so\nwhen we say we want to get the bite code\nin this compiled solidity Json we want\nto go to contracts simple storage simple\nstorage evm bite code so contracts\ninside this contracts Json you got to go\nto simple storage inside this simple\nstorage. Soul there's another simple\nstorage inside that there's an AI but\nthat's not what we want we want the evm\nso we're going to scroll down aha we're\ngoing to get the evm then what do we\nwant then we want the bite code great\nand then we want the object so this is\nthe bite code of our contract it's the\nreally lowlevel stuff that the ethereum\nvirtual machine or the evm is going to\nunderstand now we also need the Avi when\nwe deploy this to a chain this is what\nwe're going to need we're going need the\nbik code and the ABI the ABI we can of\ncourse get from this kind of same method\nhere so to get this we can do\nABI equals compiled Soul same thing\ncontracts simple\nstorage. simple storage and as you can\nsee we're right here and then we can\njust grab this ABI\nobject AI we can even do print ABI we'll\ndo python\ndeveloped up high and indeed our ABI is\nprinted here awesome so now that we have\nour two main pieces to deploy this now\nall we have to do is deploy it but the\nquestion then becomes is where are we\ngoing to deploy it to which blockchain\nare we going to deploy it to in remix\nwhen we were first playing around we\nwere using a JavaScript VM or a fake or\na simulated environment we absolutely\ncould and we absolutely will learn to\ndeploy this to a test net because that's\ngoing to be the same way that we're\ngoing to deploy it to a main net but\nbefore we do that we should learn how to\ndeploy this on a simulated environment\nor something similar to that JavaScript\nVM so it's much faster and easier to\ntest things and this is where ganach is\ngoing to come to the rescue ganach is a\nsimulated or a fake blockchain that we\ncan actually use to deploy our smart\ncontracts to and have it interact like\nit's a real blockchain gach is going to\nallow us to spin up our own local\nblockchain\nand it'll look something like this now\nthe user interface is really nice\nbecause it allows us to kind of do this\noneclick blockchain to create our own\nlocal blockchain that means that this\nblockchain isn't connected to any other\nblockchain out there but it'll act like\na blockchain but it'll be a lot faster\nthan us having to interact with a\ntestnet and we control the entire\nblockchain because it's only one node\nwe're the only node so ganache great way\nto test things quickly working us\nI'm also going to show you how to work\nwith the ganach command line you can\nreally use either one depending on what\nyou want to do but a lot of the tools\nactually have buil in ganach command\nline so it's definitely really useful to\nlearn that as well so again ganach is\ngoing to be our simulated environment\nhere so what we're going to do once we\nget into ganach we can just go ahead and\nhit quick start this will automatically\nupload and get started with our own\nlocal fake blockchain you can even see\nit gives us some accounts this should\nlook pretty familiar should look very\nmetam Masky right we have an address\nhere and each one of these addresses has\na private key in your ganache you can go\nahead and just click the key and hit\nshow keys and it'll show you the account\naddress and the private key but of\ncourse these are for development\npurposes only each one of these accounts\nhas a balance associated with it we can\nsee a pneumonic or your secret phrase\nyou can see blocks transactions and a\nwhole lot of other really useful\nfeatures here and it even tells us\nhow to connect to this blockchain and\nthese are the connecting features that\nwe're going to want to use let's learn\nhow to connect to this ganach blockchain\nfrom this user interface first and then\nwe'll learn how to do the command line\nversion this is when we finally start\nworking with web 3py we can just do\npip install web\n3 and now we can start working with web\n3p right at the top a little confusingly\nwe're going to do import web 3\nfrom web 3 oops and this should be from\nweb 3 import web 3 sorry about that now\nto connect to this blockchain we choose\nwhat's called an HTTP provider if we\nlook at this ganach instance we have\nthis RPC server which has this URL HTTP\n0.0.0.0\n54 this is the URL that we're going to\nuse to connect to this blockchain in\nremix we're actually using our metamasks\ndirectly to connect to the blockchain\nhowever we want to connect directly to\nour simulated our fake blockchain right\nhere so what we're going to do is we're\ngoing to do\nW3 for connecting to\ngach W3 equals web\n3 web 3.\nHTTP\nprovider of\nHTTP\n0.0.0.0\nand it was on Port\n845 Port 845 now with everything that we\nshow you you're probably going to want\nto get really familiar with the\ndocumentation because even after being a\npro you're going to want to use it more\nand more if you want to learn more about\nother providers you can go to the\nprovids page of the documentation the\nnext thing that we're always going to\nneed as well is we're going to need the\nchain ID or the network ID what is the\nID of this blockchain and for ganach\nit's\n1337 it's supposed to be a funny Elite\nreference so we'll do chain\nID\nequals\n1337\nnow we're also going to need an\naddress an address to deploy from we can\ngo ahead and grab one of these fake\naddresses in here to work\nwith similar to how in remix when we\nwere working with the JavaScript BM we\nwere given a bunch of fake addresses\nwe're doing the same thing but with\nganach and then we're also of course\ngoing to want a private key we need the\nprivate key of course to sign our\ntransactions so we'll do private key\nequals\nthis now just note whenever you import a\nprivate key in Python you need to add an\nox to the front python is always going\nto look for the hexadecimal version of\nthe private key awesome now we have all\nthe parameters that we need for\ninteracting with and connecting to our\nganache local chain it's time to finally\ndeploy our simple storage. Soul contract\nlet's do it so the credit contract that\nwe're going to deploy with web 3.i we're\ngoing to do simple storage we're to call\nthis variable\nw3f contract and we're going to give it\nABI equals ABI and bite code equals bite\ncode great does this mean we've deployed\nit well no this just means we have a\ncontract down so we can do print simple\nstorage and you'll see if if we run\npython\ndeploy we'll see we have a new type here\nclass web 3. u. datat type. contract\nthis is another type that if you want to\nlearn more you should definitely check\nout the web 3.y documentation so we have\na contract object awesome how do we\nactually deploy this well we need to\nactually build our transaction because\nagain whenever we interact with the\nblockchain whenever we make a state\nchange and in this case we'd be\ndeploying a contract we're going to make\na state change so we first need to build\na transaction sign a transaction and\nthen send a transaction and to do that\nwe need to talk about that nuns thing\nagain remember way back in our\nblockchain demo when we used a nuns to\nsolve the answer to that really\ndifficult mining problem well the\ndefinition of nuns is just a word coined\nor used for just one occasion and in\ncryptography it's an arbitrary number\nthat can be used just once in a\ncryptographic communication so this nuns\nthat's used to find the answer is going\nto be different from another nuns that\nwe're actually going to need to make our\ntransaction see if we look at our\nmetamask and we look at our activity and\nwe look at one of the transactions we've\nmade recently on ether scan if we scroll\ndown we'll see nuns here as well this\nnuns is the number of transactions that\nour account has actually made every time\nwe make another transaction our\ntransaction is hashed with a new nuts\nthis is what's going on behind the\nscenes with our transaction and we need\nthis to send our transaction we can\nactually get our nuns by just grabbing\nour latest transaction count get\nlatest transaction we can do nuns equals\nW3\ndo.get transaction count and we'll put\nin my address this will give us the\nnumber of transactions and it'll\neffectively give us our\nnuts we can even test it out with a\nprint python ploy\nwe can see we can see that the answer is\nzero because on our local blockchain\nthis address that we're using hasn't\nbeen used before we can even go to the\ntransactions tab we can see that there\nare no transactions that have ever\noccurred on our local blockchain now to\ndeploy this contract we need to make a\ntransaction remember everything that we\ndo every time we change the state of a\nblockchain we're going to do it in a\ntransaction let's create a transaction\nobject to do this we can do\ntransaction equals simple storage which\nagain is this contract object dot\nConstructor do build transaction now as\nyou might have pointed out our simple\nstorage. doesn't actually have a\nConstructor every contract technically\nhas a Constructor this one's is just\nblank we're not telling our simple\nstorage. soul to do anything we saw back\nin our fundme example that the fundme\nexample does have a Constructor so now\nwe want to put in some parameters for\nthe transaction in web 3.i we always\nhave to give at least a couple of\nparameters we always have to give the\nchain ID which we already got from above\nwhich is\n1337 so we can just do chain\nID we need a from address in this\ncase my\naddress and then we need a\nnuns which in our case is just nuts\ngreat now we have a transaction object\nlet's even print this out and see what\nit looks\nlike whoa what's this we can see there's\neven more parameters in here than just\nwhat we made so we have value which is\nThe Ether or the ethereum that we're\ngoing to send we have gas we have our\ngas price which we could arbitrarily set\nif we'd like we have the chain ID we\nhave from address we have the nuns and\nthen we have this giant data object and\nthen two is just empty because it's\nsending it to the blockchain this giant\ndata object here is encompassing\neverything that's happening in this\nsimple storage. Soul now that's just a\ntransaction and anybody could actually\nsend this transaction as long as it's\nsigned by them so we have this\ntransaction but we need to sign it from\nsomebody since we're sending it from our\naddress our private key is going to be\nthe only key that's going to work to\nsign this remember back when we were\ntalking about public and private Keys we\nright now have a message that is\ndefining how to deploy simple storage\nbut it's not signed yet so we're going\nto need to use our private key to sign\nit to create this unique message\nsignature that we're the only ones that\ncan create the private key but anybody\nelse can verify that it was us who\nsigned it so now signed transaction\nequals web 3.\ne. account doign\ntransaction and the parameters it takes\nare going to be transaction and then\nprivate key\nsay the private key equals private key\nbecause above we've actually gone ahead\nand added our private key in here now\nguys a really really important note\nabout putting a private key in your code\nthis is really bad practice if you push\nthis to Source or you push this to\nGitHub somebody else can see a private\nkey and steal all your funds so we don't\nwant to hardcode our private keys in our\ncode like we're doing here so let's take\nthis time to talk about environment\nvariables and how to set them\nenvironment variables are variables that\nyou can set and that we set in our\nterminal and in our Command lines the\nfollowing is a way to set an environment\nvariable in Mac OS and Linux only don't\nworry we'll show a way to make an\nenvironment variable in Windows as well\nyou can set an environment variable by\nrunning something like\nexport private key equals and then\nadding whatever variable that you\nwant now if you type\nEcho dollar sign private key\nthis variable actually shows up to set\nenvironment variables with Windows the\nprocess that we're going to do is\nactually a little bit different I've\nleft a link in our GitHub to actually\nset environment variables in a Windows\nsetting and we've left a couple of\nreally helpful links for working more\nwith environment variables you should\ndefinitely check them out it's important\nto note that this export method that\nwe're doing here for creating\nenvironment variables only works for the\nduration that our shell is live so if we\nwere to close out of our shell and then\nreopen it our environment variable that\nwe set would be gone we'd have to rerun\nthat export command we're going to show\nyou a way to set environment variables\nso that you don't have to keep doing\nthat now it's also not great to have in\nPL text on your computer however it's a\nlot better than hardcoding it into our\nscript here now remember if you're using\nan account that has real money in it\nwhich I highly recommend you do not do\ndon't send this environment variable or\nthis private key or any of this code\nanywhere because then people can steal\nall your funds once we move to brownie\nwe'll show you a more effective way for\nprivate key management but for now be\ncautious here but if you followed and\nset up a brand new account that has no\nreal money and only test that money in\nit then great who cares cuz it's test\nthat it's fake money\nanyways I think I've talked about it\nenough anyways let's get back to it we\ncan actually access this environment\nvariable in Python using os. getet\nEnV we just need to import OS and now we\ncan access our private key in our script\nwithout actually hardcoding it in let's\nsee what happens if we do print private\nkey python deploy Pi you can see our\npython script was able to pull our\nprivate key from our environment\nvariable the other thing that we can do\nis create aemv file aemv file is\ntypically where people store environment\nvariables it's important to not push\nthese to Source if this is what you're\ngoing to do in this EMV file in Python\nwe can just do\nexport private key and then same as what\nwe did before add the zerx at the start\nand then private key so we could put 100\nenvironment variables in here\nexport some other VAR equals 7 if you're\ngoing to do it in this way please please\nplease always set a DOT get\nignore and make sure EMV is in here this\nwill help make it harder for you to\naccidentally push your EnV folder or\nyour EnV file to GitHub python actually\nhas a way of loading directly from a EnV\nfile without having to export our\nenvironment variables or run source. EnV\nor export or really anything and we can\ndo it with this python.\npackage if we close our shell and then\nreopen it if we run Echo some other VAR\nwe're going to get none here and in fact\nif we\nrun python develop. piy when we print\nthis environment variable we're going to\nget\nnone however we can use this EnV to have\nit pull directly from ourv so we just do\npip install python. EnV I've already\ndownloaded it so it just says\nrequirement already satisfied and then\nwhat we can do at the top of this we can\ndo\nfrom\nEnV import load. EnV and we can run\nload. EnV function right at the top this\nload. EnV looks for this EnV file and\nautomatically Imports it into our script\nso if we run this now you'll see that\nthe environment variable was\nsuccessfully imported into our script\nand now we can use it so let's let's use\nit for example with our private key\nprivate key equals os.\ngmv private key now we can even print it\nout just to\ntest we'll run our\nscript and awesome we can see our\nprivate key is being successfully pulled\nin and we didn't hardcode it into our\napplication all right let's get back\ndown to our signed transaction here now\nnow let's go ahead and print this out\nand take a look at what this looks like\nnow we can run our script and great what\nwe see here is an example of a signed\ntransaction remember this is exactly\nwhat's happening when we were looking\nback at public private Keys we are\nsigning a transaction that is actually\ndeploying a contract to the blockchain\nthat anybody can easily verify all right\nso we finally have our signed\ntransaction now we want to send this to\nthe blockchain so it actually can deploy\nlet's send this sign transaction\nwe can do transaction hash\nequals web 3. eth here's a little\nhelpful tip if you see this little box\nunderneath with suggestions show up and\nyou just hit tab it'll autocomplete the\nrest of your text here that's send raw\ntransaction and we'll give it our sign\ntransaction\ndot BR transaction this will send our\ntransaction to the blockchain now if we\nlook at our ganach and we look at\ntransactions right now it'll be empty\nbut let's see what happens when we run\nthis\nscript okay so we didn't print anything\nout but if we go to our ganache we can\nsee that a transaction actually did go\nthrough it was from the address that we\nput in here we created a contract at\nthis\naddress this is how much gas it used and\nthis is how much value was sent with it\nwe can even click on it to see more\ninformation about this now this is the\nother advantage of doing this locally is\nthat the transaction automatically went\nthrough we've sent our first transaction\nto a local blockchain and this\ntransaction is deploying a contract\ngreat work you can already see how much\nfaster this is than working with a test\nnet one other thing that's really good\npractice whenever sending a transaction\nis we wait for some block confirmations\nto happen so we can do\ntransaction receed equals web 3 .\newe for transaction\nreceipt\nTX this will have our code stop and wait\nfor this transaction hash to go through\nawesome so I just ran it again and if we\ngo to\ntransactions we can now see that there\nare two transactions here and our code\nwaited a little bit longer for this one\nto complete so of course we've deployed\na contract but how do we actually\ninteract and work with the contract\nlet's start doing that so when working\nwith contracts and we're working with\nonchain whenever we work with a contract\nwe always need two things we need the\ncontract address and the contract AI\noften times if you're looking for a\nspecific ABI of a type of contract you\ncan usually just Google it so we need to\nmake a new contract object to work with\ncontracts let's go ahead and create this\nsimple storage contract so that we can\nactually interact with it so we'll do\nsimple\nstorage equals W3 e. contract now we\nneed our address\nwhich we can get from ganach but that\nmight be a little bit hard to always be\nchecking the blockchain for a\ntransaction it's actually also in this\ntransaction receipt address equals\ntransaction receipt. contract address\nand then since we've compiled this we\nalso have our ABI\nalready ABI equals\nABI sometimes you'll see people have a\nfile called abis dopy or abis Json or\nsomething like that and they'll load\nabis in directly from there and great\nnow that we have the address and the ABI\nwe can start interacting with this\ncontract exactly as we did in remix so\nlet's do a print statement to get that\ninitial value that is returned from our\nretrieve\nfunction remember it should be\ninitialized to\nzero so if we do print simple storage\nfunctions.\nretrieve let's see what happens\nhere huh what's this we get this\nfunction retrieve bound to in these\nparentheses here so what's going on when\nmaking transactions on the blockchain\nthere's actually two different ways that\nwe can interact with them we can\ninteract with a\ncall or we can interact with a transact\nwhen we use a call\nthis is just to simulate making the\ncall and getting a return value calls\ndon't make a state change to the\nblockchain and it's similar to how in\nremix we would call these blue buttons\nand nothing on the blockchain would\nactually change we can actually also\ncall these orange buttons or these non\nview functions and just not actually\nmake a state change remix defaults these\nblue buttons to be calls and these\norange buttons to be trans\nin Python we can actually pick which one\nwe want to do a transact a transact call\nis when we actually make a state\nchange and this is when we actually have\nto build a transaction and send a\ntransaction you can always just call a\nfunction no matter what that function is\nbut just keep in mind you won't make a\nstate change you can also always\ntransact on a function even if it's just\na view and this will attempt to make a\nstate\nchange something like retrieve even if\nwe transact on it it won't make a state\nchange so for something like retrieve\nwhere we don't actually want to make a\nstate change we just Ed the call\nfunction so we'll just do dot call now\nif we try to run this you'll see we do\nget the zero because now we're actually\ncalling this transaction awesome so now\nwe have our initial value for our\nretrieve function let's keep going let's\ntry to update this favorite number using\nthis store function this we just keep\nkeep in mind is our\ninitial value of favorite number we know\nthat this store function is orange and\nwe'll actually make a transaction but if\nwe wanted to we can even just use call\non it we'll do simple\nstorage\nfunctions\nstore we'll put that 15 in here. call\nlet's see what happens when we send\nthis you can see it returned a blank\nthat's because because this store\nfunction has no return type if we give\nthis returns you went\n256 and then we say\nreturn favorite\nnumber and now we go back\nhere and we run this again you'll see\nnow that we get a 15 back if we go to\nganach you'll see that we keep making a\nwhole bunch of different contracts but\nnone of these are contract interaction\nthat's because when we call a function\nwe just simulate working with it if we\ncall retrieve again right afterwards\nyou'll see that it's still\nzero it's because calling is just a\nsimulation now let's delete all that so\nlet's actually build a new transaction\nto actually store some value into this\ncontract since we want to make a\ntransaction we got to go through the\nsame process as when we deployed this\ncontract let's first create a\ntransaction\ncall it store transaction equals simple\nstorage\nfunctions do\nstore and we'll give it some number in\nthis case 15 and then we have to do\ndot build\ntransaction and we'll put those same\npieces in here from before we're going\nto have chain ID be the chain\nID we're going to need front\nfrom me my\naddress nuns is going to be the\nnuns plus\none we're going to need to do nuns plus\none because we actually use this nuns\nalready when we create our initial\ntransaction remember a nuns can only be\nused once for each transaction so this\ntransaction is going to have to have a\ndifferent nuns than the nuns we use to\ndeploy the contract now that we have the\ntransaction let's go ahead and sign it\ndo\nsigned\nstore\nTX and we'll do web 3.\ne.\ncount do sign\ntransaction store\ntransaction and then private key\nequals private key and we'll go ahead\nand save then of course we need to send\nit so we'll do transaction hash equals\nw3e send raw\ntransaction signed store\ntransaction.\nraw transaction and let's grab that\ntransaction receipt Again by doing\ntransaction receipt equals\nw3e wait for transaction receipt and\nactually let's call\nthis send store\nTX that wait for receipt send store TX\nawesome it looks like we're following\nthe same steps here as we did\nabove we created the transaction we\nsigned the transaction and then we send\nthe\ntransaction down here we create a\ntransaction we signed the transaction we\nsent the transaction and then we waited\nfor the transaction to\nfinish so let's run\nthis all right great we still have this\nprint function printing out the current\nvalue of retrieve let's go over to\nganach and see if there's anything\ndifferent here there is instead of all\nthese contract Creations here we now\nhave a contract call we can see there's\nsome transaction data that was sent a\ndifferent amount of gas same gas\nprices however ever this actually\nupdated and sent the transaction to our\nblockchain now if we call this retrieve\nfunction\nagain this should print out our newly\nupdated value which in this case was 15\nlet's go ahead and run Python\ndeployed. and we can see it started at\nzero and then it turned to 15 awesome\nwe've made our first state change to a\ncontract that we've deployed on our\nlocal blockchain great work sometimes\nit's nice to put some lines in here to\ntell you what's going on to make it a\nlittle bit more clear so I'll put\nsomething like\ndeploying contract dot dot dot right\nbefore we deploy our\ncontract after we do it I my\ntwo\ndeployed then right before we update our\ncontract we'll print out something\nlike updating\ncontract and then right after it's done\nmaybe something like\nupdated now if we run this\nnow you'll see as this goes along we'll\nget these things printed out saying\ndeploying contract contract deployed\nupdating contract updated this will make\nthose moments when waiting for these\ncontracts to actually finish a lot\neasier doing fantastic so ganache user\ninterface is really nice because we can\nsee a lot of things that are going on\nhere however it's a little tricky to do\na lot of programmatic stuff often times\nengineer will use what's called a\ncommand line interface of ganache\ninstead of the UI so we're going to go\nahead and close this out and we're going\nto use the ganache CLI instead of that\nuser interface that we just saw and this\nis what and this is what Brown is going\nto use on the back end when we move to\nbrownie let's learn how to actually do\nthat so in order to use the ganach CLI\nor command line interface the first\nthing that we need to do is download\nnode.js yes I know this is a python\nvideo however we do need to install\nnodejs to work with the ganach CLI you\ncan come to this download page and\nchoose your operating system and\ndownload it accordingly we have a link\nto a video showing you how to do this in\nthe GitHub you'll know you've done it\nright if you can run\nnode-- version in your command line and\nyou get a version it might be 12 might\nbe 14 might be something else depending\non what version you downloaded next\nwe're actually going to install yarn\nyarn is a package manager similar to pip\nand will allow us to actually download\npieces and packages like the ganach CLI\nfrom package repository we can install\nit with mpm install D- Global yarn and\nyou'll know you've done it right if you\ncan run yarn D- version in your command\nline and you get the version outputed\nhere then we want to install the actual\nganach CLI we're going to be installing\nit with yarn so to install this we're\ngoing do yarn global\nadd ganach\nCLI this will install our ganach CLI as\na global command in our terminal we can\ntest to see if we've done it right we\ncan run ganos\nc-- version perfect we now have the\nganach CLI let's spin up a ganach chain\nwith the CLI if you have your ganach UI\nopen right now please close it otherwise\nit'll conflict so to run a local\nblockchain from the command line all you\nneed need to do is run\ngach\nCLI and the node will start running\ndirectly in your terminal if you scroll\nup you can see a lot of familiar pieces\nwe see the available accounts just like\non the UI these are the different\naddresses and then we see a whole bunch\nof different private keys this ganache\nspins up with a bunch of random\naddresses and random private keys if we\nwanted to always spin up with the exact\nsame private keys so we don't have to\nupdate our private key every time we can\ndo\nganach CLI Das Dash\ndeterministic this way we'll always get\nthe exact same private keys and the\nexact same addresses you can check out\nthe documentation see a bunch of other\nflags that you can use to run this and\nyou can see it's listening on\n127.0.0.1\n127.0.0.1 is also known as the loop back\naddress or Local Host now to work with\nganach in the command line all we need\nto do now is update our private keys and\nour addresses let's also update the HTTP\nprovider since now we're going to be\nlooking at the loop back address for my\naddress we'll scroll up to this top\naddress here and we'll place it in for\nour private key we're going to copy\nthis put it into our EMV\nfile it already has the ox at the top\nhere great now let's open up a new\nterminal you can open up a new terminal\nby hitting this plus button here and you\ncan flip back and forth by hitting this\ndrop down and flipping back to the\nganache terminal now let's go ahead and\nrun python\ndeploy we can see the exact same output\nas we got when working with the UI and\nif we flip\nover to the command line we can see\nwe've made a whole bunch of different\ncalls to our blockchain each one of\nthese calls is a specific Json RPC call\nto our blockchain that we're making to\ninteract with it we can see information\nabout the transactions that we sent this\none creates our simple storage contract\nthis one updates our simple storage\ncontract and great you now know how to\nwork with the ganach CLI and the ganache\nUI fantastic so how do we actually\ndeploy this to a test net or a real\nNetwork we were working with remix all\nwe had to do was switch to injected web\n3 and we used our metamask as our\nblockchain connection well in our script\nhere we don't have metamask natively\nwith our script so we need some way to\nconnect to the blockchain we can see\nthat when we're connecting to our own\nlocal blockchain we just use an RPC URL\nthat connects to our local blockchain to\nconnect to a test net or to a main net\nwe can actually do the exact same thing\nall we have to do is Swap this out with\nthe URL that connects us to a main net\nor a test net we can also run our own\nblockchain node similar to how we're\nrunning our own local blockchain node we\ncan run to know that actually connects\nto a real blockchain however it's not\nalways practical or really easy to do\nthis so sometimes we want to use an\nexternal or a thirdparty client that\nactually will run our blockchain for us\nlet's learn a little about infura inf.\nis an application that will give you a\nblockchain URL for you to connect with\nfor you to run whatever you want to run\nand you can get started for free let's\ngo ahead and\nregister then we just check our email\nconfirm email address and awesome now\nwe're inside of infura there's a couple\nother services out there that you can\nalso check out like Alchemy which is\nanother fantastic blockchain as a\nservice platform fura is a premium\nservice it starts out as free if you\nmake too many API calls or too many\ncalls to the URL they'll start charging\nyou but we can create a project for free\nfor now let's go ahead hit the ethereum\ntab hit create project we'll call this\nfree code\nCamp brownie\nhit create now we'll have a whole bunch\nof project keys and project secrets we\nalso have this endpoint section as well\nthis is how we're going to be deploying\nto the different networks we can see we\nhave an ethereum mainnet connection as\nwell as Robson Coen rink B and goril\ntest Nets there's also polygon in here\nas well since we want to test and deploy\nto a rink be chain we can go ahead and\nmove to rink be and then we can copy\nthis URL back in our application all we\nhave to do do is Swap this out for the\nnew URL we also have to change the chain\nID or address and the private key if you\never are confused as to what is the\nchain ID of the chain that you're\nworking on you can always check this\nchain id. Network or you can usually ask\nsomebody let's look up rink be we see\nthe chain ID is four so we'll grab four\nand we'll place that in our script now\nthis address in the private key that we\ngave it now this address and the private\nkey that we gave it aren't going to have\nany test net ring be in so we need to go\nin our metamask and grab the address\nplace that in for address and then count\ndetails export private\nkey type in our password and grab the\nprivate key go into our EMV file leave\nthe ZX and replace the rest with our\nprivate key since I have my private key\nstored as an environment variable I need\nto then run source. EnV so that my\nprivate key is now updated the reason\nwe're using this is because again since\nwe're making transactions to a test net\nwe need some test net e all right so now\nwe have everything updated for deploying\nto Rinke let's go ahead and run this\nnow as you can see it's going a lot\nslower this is because we actually have\nto wait for the contracts to get mined\nand for everything to happen on the test\nnet deploying to a test net will result\nin nearly the exact same experience that\nyou'll get when deploying to an actual\nmain net so it'll take a lot longer but\nyou can see we got the ex exact same\nresponses here now if we take this\naddress and we go to the rink be ether\nscan we can verify what just\nhappened we can see that 38 seconds ago\nwe made this transaction and then 23\nseconds ago we made this\ntransaction we can look at all the\ndifferent details of this transaction\nthat we just made from our python script\nwe can see it even tells us we created a\nsmart contract and then we made this\ncall which called this store function on\nthis contract we've learned a lot so far\nthis is fantastic now is a perfect time\nto take a break and take a quick\nbreather and reflect back on what we've\njust learned we've learned a lot about\npython deploying to our own local\nblockchain deploying to a test net and\ndeploying to a main net working more\nwith private Keys creating transactions\nsigning transactions and then sending\ntransactions\nnow as you can see there's going to be a\nlot to actually managing all the\ncontracts that we work with having to\nwrite our own compile code an ear\nstorage code is going to take a lot of\nwork and what if we wanted to interact\nwith one of the contracts that we\ndeployed in the past Well we'd have to\nkeep track of all those addresses and\nmanually update our address features\nhere with an address maybe we didn't\nwant to deploy a new contract every\nsingle time maybe we wanted to work with\na contract that we've already deployed\nwhat if we want to work with a whole\nbunch of different chains what if we\nwant to work with rink B and Main net\nand our own local network there seems to\nbe a lot to manage here and we still\nhaven't even talked about writing tests\nthis is where brownie is going to come\ninto play brownie is currently the most\npopular smart contract development\nplatform built based on python it's used\nby defi giants like .f finance curve.\nand batter out each having billions of\ndollars currently locked in value and\nthe reason that we learned a little bit\nabout web 3p first is because brownie\nheavily relies on web 3. Pi so let's do\nall this again but in Brownie and we'll\nsee how much easier it is to actually\ninteract with in our Shell let's go back\none directory and let's make a new one\nwe'll call it brownie simple\nstorage now another really cool trick\nthat VSS code has is instead of us\nhaving to go to file and open up this\nfolder in this Explorer here what we can\ndo is we can type code and then type the\ndirectory that we want to work with in\nour case this directory so we can just\ntype code Dot and we'll get a new vs\ncode\npopup inside of this brownie simple\nstorage folder let's get learning about\nBrownie and this is where you're going\nto spend the majority of your time move\nforward brownie is incredibly powerful\nand makes our lives fantastically easier\nso get ready to learn one of the most\npowerful tools in the smart contract\ndeveloping ecosystem let's go ahead and\nopen up our terminal and let's get\nstarted installing brownie it's\nrecommended to install brownie via pipex\npipex installs brownie into a virtual\nenvironment and makes it available\ndirectly from the command line once\ninstalled you'll never have to activate\na virtual environment prior to using\nbrownie which is really good to install\nit with pipex we can go ahead and run\npython DM pip install D- user\npipex once we've run that we can then\nrun python 3-m P pipex insure\npath then we want to close the terminal\nby hitting the little trash can and then\nreopen it and then we just need to run\npipex install F brownie I've already got\nit installed so that's why we see this\nhere and then just one more time we're\ngoing to close and reopen the terminal\nyou can tell you have brownie installed\ncorrectly if you run brownie Das Das\nversion and you get some output that\nlooks something like\nthis or you just run straight up\nBrownie and it'll output a bunch of\ncommands that we can run let's create\nour first brownie project we're going to\nbe using the exact same simple storage\ncode that we just went through except\nfor we're going to use it in brownie\nthis is going to make our lives a lot\neasier when working with simple storage\nto create a sample folder with\neverything we need with brownie we can\njust run Brownie and it and we will get\na new brownie project initialized in the\ndirectory that we're currently in if you\ntype LS you'll be able to see all the\nfolders that are created or you can just\nsee them on your side panel in vs code\nlet's talk really quickly about what\neach of these folders is going to do the\nbuild folder tracks a lot of really\nimportant low-level information it's\ngoing to track any interfaces that we're\nworking with or deploying it's going to\nkeep track of all of our deployments\nacross all of the different chains so we\nno longer have to manage that ourselves\nand it's going to store all of the\ncompiled code remember how in our simple\nstorage code we actually saved\neverything to this compil code. Json\nwell brownie is actually going to do all\nof that for us into this contracts\ndirectory so we can always reference it\nlater this contracts directory outside\nthe build folder is where we're going to\nput all of our contracts brownie knows\nto look inside of this folder when\nlooking for new contracts to compile\ndeploy or anything else interfaces is\nwhere we can save and store different\ninterfaces remember how when we were\nworking with chain link working with\ninterfaces makes it really easy to\ninteract with a blockchain application\nreports are to save any type of report\nyou run scripts are we can automate\ntasks like deploying calling different\nfunctions or really anything we want and\nthen we have a test folder which is\nincredibly powerful and we're going to\nbe using a lot we also have git\nattributes and G ignore which are\nhelpful when working with Version\nControl like git so let's go ahead and\nstart working with Brownie and really\nunderstand what's going on here so let's\ngo ahead and add our simple storage\ncontracts to the contracts folder so in\nhere we're just going to make a new file\nwe'll call it\nsimple storage. soulle and I'm just\ngoing to copy and paste the code I have\nfrom the simple storage that we've been\nusing this whole time let's go ahead\nhead can save that with command s okay\ngreat now that we have our contract in\nhere we can already start working with\nBrownie and even compile this code\nwithout even having to write or work\nwith our own compiler all we need to do\nis run brownie\ncompile brownie will automatically read\nthe version of solidity and then store\nall of the compile information in this\nbuild folder so if we go to contracts we\ncan see we have a simple storage. Json\nand there's a lot of familiar pieces in\nhere for example we see the ABI op code\nsection which is the lowlevel language\nwe'll see a PC map and we'll see a lot\nof useful information and great\nobviously deployments and interfaces is\nstill empty so great we've already\ncompiled our smart contract so how do we\nactually deploy this to a blockchain to\ndo this we do have to write a script\nwhich will allow us to do whatever we\nwant so we're going to create a new file\nand we're just going to call this\nsimilar to last time deploy dopy this is\nwhere we're going to Define working with\nand deploying our code brownie can run\nscripts by running brownie run in fact\nif you want to take a quick minute to\nfamiliarize yourself with all the\ndifferent commands that brownie has just\nrun Brownie and you'll see we can do a\nlot of different things we can do\nbrownie init which will create a new\nbrownie project we will do brownie bake\nwhich allows us to pull from the brownie\nmix which we'll talk about later we can\ncompile we can go into a console test\nrun we can do a lot of wonderful things\nin here if we do brownie run it'll run a\nscript for us and we can Define that we\nwant to run this deploy all we have to\ndo is add a def main So Def in Python is\nthe way to define a function we're going\nto call this function Main and for now\nlet's just say print hello and we can\nrun brownie run scripts\ndeploy and as you can see it\nautomatically does this launching thing\nso brownie defaults to always working\nwith a local ganach CLI blockchain it's\nrunning the exact same command that we\nran earlier and it has a bunch of\ndifferent flags like counts 10 a certain\nhard Fork a certain gas limit Etc so at\nthe beginning of all of our scripts if\nwe don't give brownie a network to use\nit'll spin up a local ganache and at the\nend of the script it'll tear it back\ndown typically what I like to do is\nactually put all the logic of our\ndeployment in its own function def\ndeploy simple\nstorage and we'll do pass for now and\nthen our main function we can just call\ndeploy symbol storage now in order to\ndeploy our contract let's look back at\nour web 3 Pi version of deploying this\nand see what we did so first we compiled\nit great brownie does that automatically\nthen we dumped to a file great brownie\ndoes that\nautomatically we got a bite code and an\nABI great brownie does that\nautomatically we added a local\nblockchain to use great brownie\nautomatically spins up a local ginach\nwe'll learn how to do test s in a little\nbit aha we do need an address though and\na private key so how do we actually get\nour private key get our account into\nbrownie brownie has an accounts package\nthat actually natively understands how\nto work with accounts and we can import\nit into our script here so we can do\nfrom brownie import\naccounts and with this accounts keyword\nwe can add an account a number of\ndifferent ways if we're going to work\nwith our local chain as you see here the\nganach CLI will spin up 10 fake accounts\nfor us and brownie automatically knows\nthat we can work with that account so we\ncould do something like account equals\naccount zero and then just do something\nlike print account so we're going to\ntake the account that's spun up at the\nzero withth index because this accounts\nobject is just an array so if we run\nthis\nnow brownie run\nscripts deploy it's going to spin up Us\nin address and a private key that we can\njust work with without having to define\na private key or do anything does all of\nthat for us which is fantastic we do of\ncourse still want to know how to add our\nown private keys so that we can work\nwith the test net so this is great and\nworks when we're working with a\ndevelopment Network or working with\nBrownie's automatic ganach CLI if we\nwant to work with a test net though we\nhave to do something else another way to\nadd your accounts in brownie is to use\nthe command line and actually add them\nnatively into brownie we can do brownie\naccounts new and we'll give it a name\nfree code Camp account\naccount this will then prompt us and say\nenter the private key that you wish to\nadd let's go ahead grab our private key\nfrom metamask count details export\nprivate key put your password in grab\nthe private key and then we just add ox\nand paste it in brownie will actually\npassword encrypt your private key in\nthis way so we'll give it a password and\nnow we have a new account natively\nintegrated into brownie to see it we can\ndo brownie accounts list and you'll see\nthat we have a free code Camp account\nwith this address and also a testing\naccount I made this a little bit earlier\nwe can get rid of it by running\nbrownie accounts delete testing helpful\nterminal tip time so if you hit up or\ndown on your keyboard you can actually\ntoggle through the history of the\ncommands that you've written so if you\nhit up it'll actually bring you to the\nmost recently run command which can\nallow you to run run previous commands a\nlittle bit faster and if we run Browning\naccounts list again we'll see it's now\njust free code Camp if we want to work\nwith this free code Camp account that\nwe've added to brownie via the command\nline we can get it with account equals\naccounts.\nload free code Camp account and then we\ncan do print account let's run this\nscript\nagain this time when we run the script\nit's going to ask us for the password we\nneed to enter the password to decrypt\nthe account because right now it's\npassword encrypted so we're going to\ntype in the password and it's going to\ngo ahead and execute with our unlocked\nprivate key we can see the address it\nprinted out was right here and if we\ncopy the address and we go back we can\nsee that that is correct now if we're\ngoing to talk about safety and you want\nto safely secure your keys this is one\nof the safer ways to do it because it's\nnot going to stored in git you're not\ngoing to accidentally push it up to\nGitHub or show it to anybody and it's\ngoing to be password in crypted this is\ngoing to be one of the ways that I\nhighly recommend you store your keys\noften times you're going to want to do a\nmix of working with the local ganache\nones and your own keys and we'll learn\nhow to flip back and forth between them\nin a little bit now the third way that I\nlike to use is still again using an\nenvironment variable script often times\nit's really easy just to have your\nprivate key be an environment variable\nthis way you won't have to keep putting\nthe password in every single time you\nrun a script so it's a little bit less\nsecure and just another tip for myself I\nnever put my private Keys associated\nwith wallet that have real money in them\nas environment variables or in a EnV\nfile just in case I accidentally do\nsomething really stupid I don't trust\nmyself enough so I'm going to highly\nrecommend that whatever private key that\nyou use and you store as an environment\nvariable here always have it be just\nkind of a test account that you're going\nto use to test things and then for some\nof your more serious accounts that's\nwhat you'll use the encryption for so\nlet's go ahead and create an environment\nvariable file so we'll do a new file\ncall ITV and we'll do export private key\nOx this\nnow we have a private key set as an\nenvironment variable so brownie has an\nadditional feature that allows us to\neasily work with environment variables\nin an environment variable folder we can\ntell brownie to always pull from ourv\nfile in a brownie\nconfig\nyaml this is a special file that brownie\nalways looks for to grab information\nabout where you're going to build where\nyou're going to deploy and where you're\ngoing to grab things in this config all\nwe need to do is add EnV\nand\nsetv this is telling brownie hey when\nyou run scripts grab the environment\nvariables from the EnV file and what we\ncan do is after we import OS we'll do\naccount equals accounts. add os. get EnV\nthis is how we get that environment\nvariable uh private key then let's just\nprint out that account see if we did it\nright brownie run scripts deploy\npy and\ngreat all right great so this seems to\nwork perfectly but I like to make this\nmethod even more explicit so we're going\nto take this version that we just\nlearned and improve it in our brownie\nconfig we can actually add more\ninformation about what wallets we want\nto use and when we want to use them what\nwe can do is we can add a wallets\nsection and add in here a from Key\nsection and then add that environment\nvariable private key in your yo file if\nyou surround a string with dollar sign\nand some curly brackets it will\nautomatically get transformed into the\nenvironment variable so if we go back to\ndeploy we can actually change this we\ncan grab right from our config file so\nwe'll do from brownie import accounts\nconfig and instead of using OS we can do\naccounts. add\nconfig and then we'll do wallets since\nthat's what we're defining right here\nand then from Key\nwallets\nfrom Key and this will do the exact same\nthing as our os. gmv the reason that\nthis is better is because now we have\none canonical place where we're always\ngoing to pull our private key from\ninstead of having to go through all of\nour scripts and update it based on\nwhatever we change an environment\nvariable now let's try this out brownie\nrun script\ndeploy and great we see our address\nprinted here for now let's just stick\nwith using accounts zero since we want\nto just use the account that brownie\nmakes for us with ganach now brownie is\nreally intelligent and we can actually\ngo ahead and import a contract directly\ninto our script in a web 3. Pi version\nwe opened a contract and read from it\nand that's how we were able to interact\nwith it after we deployed it in brownie\nwhat we can do is from brownie\nimport and then just the\nname of the contract simple storage then\nwe can do simple storage. deploy and\nthis is how we're going to deploy it to\na chain anytime you deploy to a chain or\nyou make a transaction you always need\nto do a from and then say who you're\ngoing to be deploying from what's the\naccount that's going to be deploying\nthis as you can see this step of just\ndeploying is much quicker\nthan what we did in web 3py in web 3py\nwe had to get the bite code and the ABI\nthen we had to get the nuns we had to\ncreate the contract we had to create the\ntransaction sign the transaction and\nthen send the transaction remember how I\nsaid before you can either make a\ntransaction or a call Brownie is smart\nenough to know whether or not what\nyou're doing is going to be a\ntransaction or a call in this case since\nwe're deploying a smart contract brownie\nis smart enough to know that ah we want\nto make a state change so let's make a\nstate\nchange it'll return a contract object so\nwe can just add print simple storage and\nwe'll see what prints so let's run this\nbrownie run scripts deploy appp awesome\nso what happened was brownie again per\nusual it launched a local ganach chain\nand then it sent a transaction to deploy\nsymbol storage and it says symbol\nstorage deploy at and then the address\nit was deployed at and we can see how\nmuch quicker this is to actually deploy\nnow let's go ahead and do exactly what\nwe did with web 3.i let's call this\ninitial retrieve function and then we'll\nupdate it with a new value of 15 but\nwe'll do it in brownie now remember\nhere's how we did it back in web 3p in\nbrownie what we're going to do is first\nwe're going to do stored\nvalue equals simple storage. retrieve\nnow since this is a view function we\ndon't have to add from account in here\nagain brownie is intelligent enough to\nknow if this is a call or a transaction\nand we know that retrieve is a view\nfunction so we know we don't actually\nhave to make a transaction here then we\ncan print out the value of stored value\nprint stored value let's go ahead and\ntry\nthis great we get zero right here\nperfect now let's try updating this so\nwe can do transaction\nequals simple\nstorage. store and in here we'd want to\ndo 15 but remember since we're doing a\ntransaction in brownie we always have to\nadd who we're going to transact from in\nthis case we're going to do from account\nsimilar to web 3. Pi we can do\ntransaction. we for how many blocks we\nwant to wait and then let's call that\nretrieve function again to see if it's\nbeen updated so we're can do\nupdated stored value equals symbol\nstorage. retrieve and then we can\nprint the updated storage\nvalue and if we run\nthis we now see we have two transactions\nhere one that deployed our original\nsimple storage contract and we called\nthe retrieve function and we returned\nzero here then we updated with our store\nfunction and then we call retrieve again\nand we see we did indeed update it to 15\nyou see how much smaller and easier and\nmore intuitive this is in Brownie and\nhow much our lives are going to be much\nbetter awesome now you've learned how to\ndeploy to a local chain now running\nthese scripts is fantastic but we need a\nway to actually automate that our\ncontracts are doing what we want them to\ndo we don't want to always have to\nmanually check that all of our stuff is\ndoing what we want it to do right we\ndon't want to have to manually check\nthat 15 is actually updating\nappropriately this is why running tests\nare so important and automating your\ntests is going to be crucial to becoming\na successful smart contract developer\nnow I do want to point out that you\nactually can write tests directly in\nsolidity and this is a great way to\nactually test your smart contracts is to\nlearn how to do it right in solidity\nhowever a lot of the professional\ndevelopers code their tests in the smart\ncontract development framework language\nlike python or JavaScript doing it in\nthis way allows you to get a lot more\nflexibility and customization with what\nyou're doing with your smart contracts\nand not being confined to whatever only\nsolidity has so let's go ahead and learn\nhow to actually write our smart contct\ncontract tests in Python this is what\nthis test folder is for so we're going\nto create a new file called\ntest simple\nstorage. piy make sure you do add test\nto the front of these because this is\nthe syntax that Pi test is going to be\nlooking for and then in our test we can\nactually set it up the exact same way we\nset up our deploy function we can do\nfrom browning import simple storage and\naccounts\nthen we can start defining our tests we\nwant a test to see that when we deploy\nour smart contract that it gets started\noff with zero in that retrieve function\nso we'll create our first test we do def\ntest\ndeploy and typically testing in smart\ncontracts or testing really in anything\nis going to be separated into three\ncategories\narranging\nacting and asserting we're going to\nbounce around and be a little bit loose\nwith this definition for the duration of\nour tutorials here however keep in mind\nthat typically this is the setup that\nyou want to use later on in one of our\nlater smart contract examples we're\ngoing to go through a much better\ntesting setup so in our arrange stage\nwe're going to set up all the pieces\nthat we need to get set up so first\nwe're going to grab an account we're\ngoing to say accounts equals account Z\nand this is really all we need to do to\nstart getting setup now for our acting\nstage we're going to deploy a simple\nsimple storage contract exactly as we\ndid with deploy so we're going to do\nsimple storage equals simple storage.\ndeploy from account then we're going to\nget our starting\nvalue starting value is going to be\nequal to simple storage\ndot retrieve and we're\n[Music]\nexpecting this to be zero\nso then all we have to do in our assert\nstage is we have to run\nassert starting value equals expected so\nlet's recap this in our arrange stage\nwe're just getting our account so that\nwe can actually make contracts then in\nour act stage we're going to deploy this\nsimple storage smart contract we're\ngoing to call the retrieve function to\nsee what its starting value is and we're\ngoing to compare to see if that starting\nvalue is what we expect and we expect it\nto be zero we can then test this with\nbrownie\ntest and per usual brownie is going to\nkick off a ganach and then it's going to\ntest this for every test you have you're\ngoing to get a little Green Dot and\nwe're going to say one pass in 1.86\nseconds which is perfect if we had\nexpected to be 15 and We R brownie test\nwe should get a fail\nhere awesome and that's exactly what we\nget now let's go ahead and test updating\nthis with 15 and see if it works as we\nwant it to so we can do a new test in\nhere we'll do def test\nupdate ding\nstorage and we'll do those three phases\narrange act and assert in our arrange\nall we need to do is get our\naccount from account zero and in this\none arranging is also going to be\ndeploying our smart\ncontract since this is really just part\nof the setup and not the act that we're\nreally testing now in our act we're\ngoing to add\nexpected to be equal to 15 and we're\ngoing to run simple storage.\nstore\nexpected and then from\naccount you'll notice this is nearly\nexactly the same as this deploy function\nhere now same as last time all we have\nto do is\nassert\nexpected equals equals\nsimple storage\ndot retrieve we're saying we want to\nstore 15 in our smart contract and then\nwhen we call our retrieve function it is\nstored correctly so let's go ahead and\nrun brownie\ntest awesome we can see two dots here\nthis means two have actually passed\ncorrectly that's great now I do want to\nquickly show you a couple of useful tips\nthat I pretty much always do when I'm\nrunning my tests if if you want to test\njust one function you can do- K Brownie\ntest- K test updating storage and we\nwill only test this test updating\nstorage we can run Brownie test-- pdb\nand add something wrong in here like 5\nequals simple storage.\nretrieve and what will happen is once\nthis kicks out and is wrong will\nactually get put into a python shell and\nnow we can check to see some variables\nin here like if I see what expected is\nexpected is 15 if I try to run simple\nstorage. retrieve expected is 15 if I\nrun simple\nstorage I'll see this is the simple\nstorage contract pdb is a really useful\nway to mess around and see okay well\nwhat did I really go wrong why is my\ntest failing another important flag is\ngoing to be dash s so you'll notice that\nno print lines actually get sent out\nwhen you're working with these tests\nif you do-\ns it'll be a little bit more robust in\ntelling you exactly what's going on and\nif we had any print lines it would print\nthe lines out as well everything that\nyou can do with brownie test actually\ncomes directly from pest so if there's\nsome flag you want to use or some\nawesome debugger you want to use you can\nuse it with brownie just by looking at\nthe pie test documentation all the tools\nare exactly the same all right we're\ncoming along fantastically we have a\nscript to deploy we have some tests we\nhave our contract this is is great but\nnow we actually want to deploy to a test\nnet how are we going to do this let's\nlook at back how we did it with web 3.y\nback in web 3. pi to deploy this to a\ntest net we just needed to add our HTTP\nweb 3 provider which was our infura\naccount and that was pretty much it and\nadd our address in our private key\nbrownie our lives are even easier\nbrownie comes prepackaged with a list of\nnetworks that it's already compatible\nwith you can see all of the networks by\nrunning\nbrownie\nnetworks list\nnow mine has a couple more actually\nbecause I've been playing around with\nthis for a long time but if you want to\nsee all the different networks you can\nlook at this list here something\nimportant to note is that there's a\ndifference between the development\nnetworks and the ethereum networks\nwhenever we deploy to a network we\ndefault to this development Network any\nnetwork that you see under this\ndevelopment section is going to be a\nnetwork that is temporary these are\nnetworks such as the temporary ganache\nNetwork that brownie automatically spins\nup when we' run any of the scripts we've\nwritten so far so this is really\nimportant to note remember anything in\nthis development section is going to get\ntorn down after it's deployed however\nthe ethereum ones are going to be our\npersistent networks anything under this\nethereum tab brownie is actually going\nto keep track of our deployment and keep\ntrack of everything in there these\nnetworks under here represent persistent\nnetworks like mainnet rink B koven Etc\nnow in our web 3.i we used an RPC URL or\nan HTTP Provider from infura to connect\nconnect to a test net we're going to use\nthat exact same methodology here so how\ndo we actually get this RPC URL this\nblockchain URL into our brownie smart\ncontract package well one of the easiest\nways is with an environment variable so\nbrownie actually already knows that\ninfura is the thing and can look\nnatively right away for infura web 3\ninfura project\nID and use our project ID from infura if\nwe go to our project back in infura and\nwe go to\nsettings you'll see the project ID is a\nlittle bit different than the whole URL\nit's just going to be this ID right here\nwe can then copy this and paste this\nright into our EMV now that we have our\nweb3 INF fur product ID directly in our\nproject if we do\nbrownie networks list any Network that\ninfura has access to you'll see a little\ninfura in colons here these are networks\nthat brownie will automatically know\nabout if we're working with infura so we\ncan see here that rink B is one of these\ninfura keys if we wanted to deploy to\nrink B we could then just\nrun brownie run scripts deploy piy and\nthen select the network with Das Network\nrink\nB now we're going to get an issue here\nbecause remember account zero only works\nwhen Brown works with a ganach CLI we\nhave to use our actual private key here\nand that's where some of those other\nversions of working with private Keys is\ngoing to come into play sometimes I'll\neven add a get account function so down\nhere we'll do def get\naccount and then in here I'll just\nnatively check if we're working on a\ndevelopment chain we'll use account zero\nand if not we'll use the method that\npulls from our config so we can check by\nseeing if\nnetwork. show\nactive equals equals\ndevelopment then\nreturn accounts zero network is another\nkeyword that brownie actually has this\nnetwork keyword allows us to interact\nwith different\nnetworks now if it's not on the\ndevelopment Network we're going to pull\ndirectly from our config so we'll\nreturn accounts.\nadd\nconfig\nwallets from Key and instead of doing\naccount equals account zero we can just\ndo account equals get\naccount now if we run browny run scripts\ndeploy to Pi Network rinky it should\npull directly from from our config\nfile and great we can actually see\ntransactions being sent directly on the\nrinky chain if we pull up ether scan the\nrink be ether scan and we take this\ntransaction has and post it into the\nrinky ether scan we can see this\ntransaction actually going through we've\ndeployed our simple storage contract and\nit's initialized to zero then we're\ngoing to go ahead and update it and it\ngets updated to 15 now once we've\ndeployed to a blockchain you'll see our\nbuild contract will actually change our\ndeployments folder will have a new\ndeployment every time you deploy to a\nblockchain brownie will actually save\nthat deployment so you can always go\nback and say hm where did I deploy that\nor what happened with that deployment\nyou'll notice that it's separated by\nChain ID remember the chain ID of rinky\nis four you'll also notice that none of\nour development deployments are in here\nagain anything that's in this\ndevelopment section isn't going to get\nsaved to the deployments area however\nanything up here in these ones will get\nsaved that's going to be really powerful\nbecause we can actually interact with\ncontracts we've already deployed onto a\nchain so let's go ahead and even add a\nnew file in here called read value this\nfunction is going to read directly from\nthe rink B blockchain and it's going to\nread from a contract that we've already\ndeployed remember we did something\nsimilar in web 3py by using the address\nand the Abi we're going to do the exact\nsame thing but in brownie so in brownie\nagain we're going to do from\nbrownie\nimport simple\nstorage\naccounts and\nconfig we'll do\ndef read\ncontract and we'll just do pass for now\nand then we'll def Main\nit's going to be read contract oops\ndidn't mean to do that down here and if\nwe run browny run\nscripts read value to\nPi Network rink B obviously right now\nnothing's going to happen so how do we\nactually interact with this simple\nstorage contract that we've already\ndeployed well this simple storage object\nis actually just an array if we were to\nprint simple\nstorage let's see what we\nget see we get this browning. network.\ncontract contract container object at\nhere this object works the same as an\narray and we can access the different\nindexes inside of it so what if we do\nprint simple storage at position\nzero you'll see we get this address here\nand if we check on ether scan we can see\nthat this is indeed the contract that we\njust\ndeployed brownie knows that we just\ndeployed it because again in our build\nsection in the deployments on the rink B\nchain which has the chain ID of for we\nhave this contract that we've deployed\nnow we can actually just directly\ninteract with this contract we can do\nsimple storage equals simple storage of\nzero or if you're always looking to get\nthe most recent deployment minus one is\na little bit easier if we always do zero\nwe're just going to get the first\ndeployment that we made and if we make\ndeployments later we're never going to\nget past it I want to always work with\nthe most recent employment so I can just\ndo minus one remember how I said\nwhenever we work with a smart contract\nwe need to know it's ABI and it's\naddress well brownie already knows what\nthe address of this contract is it's got\nit saved in this deployments folder it\nalso knows what the ABI is because when\nwe compile it we get this big Json file\nand one of the first inputs that it has\nis the ABI so brownie automatically\nknows what the ABI is and what the\naddresses already so then we can just go\nahead and run simple\nstorage.\nretrieve and print it out and we should\nsee 15 since we already updated\nit brownie run\nscripts read value to pi-- network rink\nB and great we do indeed see 15 now that\nwe know how to write some scripts and\nactually deploy things with Brownie and\nwork with brownie I'm going to show you\none of the most powerful features to\nalso work with brownie typically we\nwrite our scripts when we want something\nto be reproducible and we want to do\nsomething over and over again deploying\nsimple storage or reading a value is\nsomething that we're probably going to\nwant to do over and over again however\nmaybe we want to work with some of these\ncontracts a little bit ad hoc and get\ninto a shell where we can actually\ninteract with these contracts this is\nwhere the brownie console is actually\ngoing to come into play and make our\nlives a lot easier so what we can do is\nwe're can brownie\nconsole and what will happen is brownie\nwill actually kick us off into a console\nit has all of our contracts and\neverything already imported so if I run\nsimple storage it gives me back an array\nit's saying great that's your simple\nstorage contract since we're working on\na brand new local test environment there\nare no simple storage contracts deployed\nso what I can do is I can say account\nequals account zero\nand we now have our account that we can\nwork with accounts is one of these\nkeywords that's automatically imported\ninto our brownie console everything that\nis imported via brownie in our script is\nautomatically already imported into this\nlittle shell here so with that being\nsaid we can go ahead and even deploy our\nsimple storage contract so we can\nliterally take this line copy it paste\nit in here and you'll see exactly the\nsame thing that happens as if we ran our\nscript we get a little transaction hash\nhere and we get a simple storage\nnow if I type simple storage the simple\nstorage variable now has a storage\ncontract here if I type simple\nstorage you'll see I now have a contract\nin here the length a simple storage is\nnow one because I've deployed one simple\nstorage\ncontract if I were to deploy it again\nthe length is now two browning now knows\nI'm holding on to two simple storage\ncontracts and I've deployed two simple\nstorage contracts I can then even do\nthings like simple\nstorage.\nretrieve we can see we start with zero I\ncan go ahead and even\nrun simple storage.\nstore\n15 from\naccount and we'll see we'll get a\ntransaction now if I rerun simple\nstorage. retrieve a nice little hack\nhere is in these shells if you just hit\nthe up key you'll actually be able to go\nback in history of the shell so if I\njust hit up twice here I can go back to\nthis command and I hit enter now we see\nthe 15 is here so the brownie console is\na great way to interact with these\nscripts in a more ad hoc manner maybe we\nwant to test some weird functionality or\nmaybe we have some experiment that we\nwant to try it's a great way to really\ninteract with anything that we have in\nBrowning and the other thing is we can\ndo everything that we normally do in\nPython in here so for example I could\nwrite\nprint\nhello and it'll print out hello I could\ndo cat equals 1 + 2 and I type cat and I\nget three so this brownie shell is a\npython shell with all of our smart\ncontract features already natively\nintegrated and it's incredibly powerful\nhere we can go ahead and quit it by\ndoing quit so I know we've learned a lot\nso far I'm sure you're starting to see\nwhy working with brownie is so much\neasier and makes our lives as smart\ncontract developers a lot easier for\ntesting them deploying them and working\nwith\nthem all right let's move on to our next\nproject is we're going to take the\nfundme contract that we made recently in\nremix and actually import that one into\nbrownie with this we're going to go over\na lot more of the advanced features that\nbrownie has to offer offer us and we're\ngoing to get into some more\nsophisticated testing and deployment\nmechanisms for this so I'm going to make\na new directory\nbrowny\nfundme we're going to CD into Brownie\nfundme and remember if you hit tab it'll\nautocomplete and we're going to open\nthis up in a\nfolder again if code period doesn't work\nyou can always go up to file open folder\nand do it like that we're in our brownie\nfundme project and we're going to initi\nize a new project by running\nBrownie and it we're going to create a\nnew contract called fundme that's soul\nthis is going to be exactly what we had\nbefore for our fundme contract so if you\nhave remix up great you can go ahead and\ngrab it or you can check the GitHub\nrepository associated with this course\nand just copy paste the\ncode now typically this is where in our\nlast project we just ran browny compile\nwhat happens if we run brownie compile\nhere brownie is going to give us this\nerror it's going to say hey this Source\nwasn't found so what's going on here\nwell remix understands that at\nchainlinks contracts is an mpm package\nthat it can import from however brownie\nisn't aware of mpm packages and brownie\ncan't actually download directly from\nmpm however brownie can download\ndirectly from GitHub so we have to tell\nbrownie where it should be downloading\nthese external these third party\npackages from so that we can use them in\nour contracts here and while I'm in here\nI might as well change Global compiler\nversion to\n3.6.6 and we'll just change the compil\nversion to carot 0.6.0 so that our\nlinter is happy so we need to tell\nbrownie where to import these contracts\nfrom from GitHub instead of from npm\nluckily there is a package out there\nspecifically created for downloading\nchain link contracts the way that we can\ntell brownie where to get these from is\nin our brownie config\nso let's create our Browning\nconfig and in here we're going to create\na\ndependencies section and this is where\nwe tell brownie the\norganization SL repo name at version\nthat we want to download\nfrom so so to get these chain link\ncontracts we can look up chain link\nrounding contracts and we can use this\nrepository to get it so instead of\ndownloading from PM we're just going to\ndownload directly from this GitHub repo\nso we need to tell brownie the\norganization which going to be smart\ncontract\nkit the repository name which going to\nbe chain link brownie\ncontracts and then the version you don't\nalways have to use the latest version\nhere and in fact we can go to the past\nnine versions by clicking on the version\nhistory we're actually going to be using\n1.1.1 and yes it does look like the\nlatest version went back wordss but as\nof a recent release as a 1.2.0 version\nof this package all the releases of\nChain Lake brownie contracts is going to\nmatch exactly the at chain link\ncontracts mpm tag so that's why it looks\nlike this is an earlier version so we'll\nsay 1.1.1 so great so now brownie knows\nto download this repository from GitHub\nonce we do that everything everything in\nthis contract section will be available\nfor our solidity code to import and use\nhowever that's not the final story here\nwe also need to tell brownie what this\nat ch link thing means because we're\ndownloading from Smart contract kit\nchain link brownie contracts brownie is\ngoing okay cool well what's this at\nchain link thing so we need to tell\nbrownie whenever we're using at chain\nlink we're actually referring to this\nimport so we need to tell the compiler\nthis so let's add a new section we'll\nsay\ncompiler when it compiles sulk we need\nto\nremap at chain link\nwe say whenever you see at chain link\nhere it\nmeans we're referring to this package so\ncompiler solk mappings at chain link is\nequal to this package up here now let's\ngo ahead and try to\ncompile perfect we see here that it\ncompiles successfully and if we look in\nour build folder in the contract section\nwe now have this new folder called\ndependencies and if we even expand this\na little bit we can see it says\ndependencies smart contract kit chain\nlink Browning contracts at\n1.1.1 and this is what it downloaded\nfrom that GitHub repository it\ndownloaded aggregator V3 interface and\nsmart math chain link because we're\nusing both of those files in our\nsolidity code all right great so let's\nwrite our first script to deploy this to\na development ganache chain to Brownie's\nbuilt-in chain\nlet's do this so in scripts let's go\nahead we'll create a new file let's go\nahead and build a simple deploy script\nto work with rink B and then we'll\nactually learn how to deploy this to our\nown local ganache development chain so\nlet's build our deploy script so in\nscripts we'll do new\nfile deploy piy and we'll start by doing\ndef deploy\nfundme then we'll do pass for now and\nthen we'll do entry point of Def Main\nand we'll call deploy fundme in this\nfile of course we're going to do from\nbrownie import\nfundme so we can actually use this and\nlet's go ahead and build this deploy\nfundme function so first we're going to\nneed to get an\naccount and same as last time we used a\nfunction called get account which would\nknow to switch back and forth between if\nwe were on development or if we were\nwith an actual test net that we could\npull from our config we can actually\nonce again copy that function and use\nthat use that in our script here so once\nagain we can use that get account\nfunction that we had before what I like\nto do with this get account is add it\ninto its own file called helpful scripts\nso what I'll do is create a new file\ncalled\nhelpful scripts.\npiy and in here I'll add that get\naccount function right so literally just\npasted it from from our last project and\njust a quick recap on what this is doing\nis we're saying if the network is in\ndevelopment we're going to use the\naccounts zero syntax otherwise we're\ngoing to pull from our config and of\ncourse we're going to have to from\nbrownie import\nNetwork config accounts then of course\nin our Browning config we're going to\nhave to add wallets and from key so\nlet's go to our config do wallets\nfrom Key and we'll add our private key\nenvironment variable setup which of\ncourse means that we're going to have to\nsetv Tov and we're going to have to\ncreate new\nfile and we'll paste the exact same\nvalues from our last EMV so it's going\nto be our private key and our project ID\nkind of just a lot of the basics of the\nsetup here but now that we've added this\nget account to its own script how do we\nactually use that in our deploy script\ndepending on the version of python that\nyou're in you might actually have to\ncreate a new file first named uncore\ninit.py you might not but just in case\nlet's make it here because it doesn't\nhurt and with this now python knows that\nit can import from other scripts and\nother packages in this project so now we\ncan do from\nscripts. helpful Scripts\nimport get account so we're\nimporting that get account function from\nour helpful script here and we're going\nto make this get account function a\nlittle bit more robust a little bit\nlater but for now it'll work perfectly\nfor what we're looking to do now we can\njust run our typical deploy function\nfunme do the fundme contract equals\nfundme\ndeoy and of course we'll do\nfrom account\nbecause again since this deploy is going\nto make a state change to the blockchain\nwe always need to do a from account\nsection here then we can even do a\nlittle print we'll do a print F here so\nwe'll say\ncontract ployd\nto\nfundme address this is how we'll get the\naddress of our fundme and great we can\neven go ahead and try this out right now\nremember you'll need\nR\neum brownie runs scripts deploy up high\nD-\nNetwork rink\nB\nand perfect contract deployed here it is\nwe can even go to rink be\nether scan\nagain and we can see the contract right\nhere now this is great and all but if we\nlook at our contract it's kind of this\nblank jarble of bites here right nobody\ncan actually see this contract and and\neasily interact with it and we want to\nmake our contracts easy to interact with\nwhat we can do on ether scan is verify\nand publish our smart contracts to\nverify our smart contract all we have to\ndo is hit that verify button we'll\nchoose our solidity compiler type which\nwe know is going to be\n0.6.0 and we know we're working with the\nMIT license here\nnow to continue we would then have to\nadd in all of the rest of these pieces\nwe' have to do optimization which is\ngoing to be yes we'd enter our solidity\ncontract code below which importing\nfundme like this wouldn't actually work\nbecause ether scan doesn't know what at\nchain link contracts is so we would have\nto copy paste the code from these\nImports to the top of our contract here\nremoving these Imports and copy pasting\nthe code associated with the files is\nknown as flattening and this is an\nimportant concept for verifying our\nsmart contracts on platforms like ether\nscan however brownie has a really nice\nway to get around this actually what you\ncan\ndo is go to their main site etherscan.io\nyou can sign in and sign up and get an\nAPI key I've already signed up so I'm\ngoing to go ahead and sign in here log\nin and what we can do is we can go to my\nprofile and scroll down to API keys and\nthis is where we can create an API key\nfor us to interact with and\nprogrammatically verify our smart\ncontracts on ether scan I've already got\none here but all we need to do is hit\nadd we'll give it a name I'll call it\nverify Browning continue and we've\ncreated this new API token that will\nallow us to verify our smart contracts\nwhat we'll do to use this in brownie is\nwe'll copy this API key and we'll move\nback to our scripts here we'll set this\nAPI key as an environment variable so\nwe'll do export the name of this is\nether scan token we'll set it equal to\nthat key that we just got now to verify\nthis all we have to do then is once we\ndeploy this contract we'll tell brownie\nwhether or not we want to verify the\ncontract so after our dictionary here\nwe'll do comma publish Source equals\ntrue we're saying yes we would like to\npublish our source\ncode now if we rerun this script let's\nsee what happens again remember we'll do\nbrownie run scripts deploy\nup-- Network space\nRinke it says fundme has been deployed\nto here now we're going to say waiting\nfor API rink be. etherscan.io to process\ncontract and we're submitting our code\nfor verification here and it'll say\nverification pending verification\ncomplete pass verify it'll say where the\ncontract has been deployed and what's\nbeen done with it now if we go back to\nEther scan again we're going to have to\ngo back to rink be ether scan we\ndeployed this to rink B and we paste\nthis in we now have this little check\nmark associated with our contract and if\nwe click contract we can see all of the\ncode in here for our\ncontract we have contract fundme payable\nyou need to get more eth everything that\nwe defined in here and if we scroll up\nwe can see that they did indeed flatten\nthis contract right they pasted that\naggregator V3 interface import and they\nalso pasted that Library safe maath\nchain link now let verified we can even\nread the contract see the different\npublic variables in here such as the\nowner get version get price and all the\nexact same buttons that we saw in remix\nthis read contract section is for all\nthese view functions right the ones that\naren't going to be making a state change\nright contract is going to be for when\nwe want to call something like fund or\nwithdraw and we could even go ahead and\ninteract with this so for example we\ncould connect to web 3\nmetamask okay and it would automatically\nget connected to our metamask here then\nwe could call fund and withdraw just\nlike we did in remix if you want to give\nit a shot go for it all right we're back\nin our code editor after successfully\nverifying one of our smart contracts on\nether scan now just a quick note\nsometimes the verification process can\nbe a little bit touchy and for version\nof solidity 0.8.4 there's currently a\nbug that makes verifying a little bit\ntricky but it's being worked on so don't\nbe discouraged if it gets a little bit\nfunky so this is great that we've\nwritten a deploy script we're deploying\ndirectly to rink be however as you know\nwe're always going to want to be able to\ndeploy to our own local blockchains or\nor Brownie's built-in development chain\nso we can test a lot quicker and that\nyes so that we can write some tests but\nwe have a little bit of an issue here\nthe first issue being that our funme\ncontract currently has an address\nhardcoded to work with the rink be chain\nso in fact the way it's written right\nnow it's going to be hard to work with\nany other chain other than ring be the\nsecond bit is that these price feed\ncontracts don't exist on a local ganache\nchain or a ganach chain that brownie\nspins up there's two ways we can get\naround this we can do what's called\nforking and work on a forked simulated\nchain\nor we can deploy a mock or deploy a fake\nprice feed contract on our ganach local\ndevelopment chain deploying mocks is a\ncommon design pattern used across all\nsoftware engineering Industries and what\nit applies doing is deploying a fake\nversion of something and interacting\nwith it as if it's real so again right\nnow if I run\nbrownie\nrun scripts deployed IPI and I don't set\nthis network flag we're going to\nactually have a default spinning up a\nganach chain and it's even going to try\nto verify which it's going to run into\nan issue because we can't verify on a\nganach chain so we have a couple issues\nthat we need to address here in order\nfor us to get this to work on a ganach\nchain similar to how in this get account\nfunction in our helpful\nscripts we do a little bit checking we\nsay hey if we're on a development\nNetwork use this development accounts\nversion otherwise pull from our config\nwe can do that exact same mentality\nbut with working with these mocks so the\nfirst thing that we need to do is we\nneed to parameter tize our fundme\nsolidity smart contract so that we don't\nhave this hardcoded in here anymore so\nwhat we can do is right when we deploy\nthis contract we'll tell it what price\nfeed address it should use right when we\ncall our deploy function here instead of\nhaving it hardcoded and we can add this\nparameter to our Constructor we'll say\naddress price\nfeed as an input parameter and whatever\ninput parameter we use here is going to\nbe our Global price feed address so\ninstead of us creating these aggregator\nV3 interface contracts right in the\nfunctions here we're just going to\ncreate a global one so we\nsay aggregator V3 interface public price\nfeed and right in our Constructor right\nwhen we create this we'll set price\nfeed\nequals aggregator V3\ninterface price\nfeed and now what we can do is we can\njust delete this part because as you can\nsee this is doing the exact same thing\nit's up here this is doing aggregator V3\ninterface price feed equals aggregator\nV3 interface and then the address here\nand we're going to do the exact same\nthing but in our Constructor meaning\nright when we deploy this contract so we\ncan delete this\nand we can delete it here as well in our\nget price function we can even verify\nthis with brownie\ncompile great looks like it's compiling\nperfectly now our deploy function is\ngoing to need to look a little bit\ndifferent we're going to need to\npass the price feed\naddress to our fundme contract so do\nthis all we'd have to do is\npaste that address before we we have our\nfrom account variable here so this is\nhow you can actually pass variables to\nConstructors anything inside this\nConstructor function you can pass\nthrough brownie in our deploy script\nhere so great so we could 100% always\njust pass this rink B address here but\nthat's not really going to solve our\nproblem obviously right the problem is\nthat the problem right now is that we\nalways have this rink B address we need\nto say if we are\non a persistent Network like rink\nB use the associated\naddress otherwise deploy Mock and I know\nwe've been talking about mock we'll get\ninto them in a second but let's first\nset this one up here so we can check\nwhat network that we're on again by\nimporting from brownie this network bit\nand we can say if network. show active\ndoes not equal\ndevelopment then we'll say price\nfeed address equal\nequal this address here and we'll just\npass this price feed address now this\nstill doesn't solve our issue because\nwe're just always passing this the rink\nbe hardcoded piece here so what we want\nto do is parameter tize where we get\nthese addresses from so instead what we\ncan do is in our Browning config we can\nadd different addresses for different\nnetworks so right underneath our EnV\nWe'll add a new section called networks\nand we'll do one called rink B and we'll\nsay the F you\nUSD price feed address is going to be\nthis price feed address now what we can\ndo in our deploy\nscript is we can say if we're not on a\ndevelopment Network let's grab the\naddress from our networks section this\nway we can Define different addresses\nfor this price feed across different\nnetworks so we can add we could add a\ncoven\nsection we could add a main net section\nsection any other networks that we want\nto work with all we need to do is add\nadd these flags for those contracts so\nback in our deploy now we can say the\nprice feed address is going to get\npulled from the config instead so we'll\nsay config and this means we're going to\nhave to import\nconfig brownie say config of\nnetworks based off of the network. show\nactive\nand then we'll use the FUSD price feed\nflag\nhere perfect so this little if statement\nis going to say hey if we're not on a\ndevelopment Network pull the address\nright from the config and this will make\nit so that we can deploy to really\nanywhere that we want to deploy to but\nwhat if we are on a development chain\nwhat do we do then we can say else if\nwe're not on a development chain we're\ngoing to have to deploy a mock so right\nnow on all these live networks that\nwe're working with there is a version of\nthis price feed contract this price feed\naddress on our development chain\nobviously there won't be one because\nit's going to start off as blank so what\nwe can do is we can deploy our own\nversion of the price feed contract this\nis known as mocking and we can interact\nwith it accordingly in order for us to\ndeploy a price feed contract ourselves\nwe're obviously going to need to have\nthe solidity code associated with it so\nwhat we can do is in our contract\nsection we'll create a new folder called\ntest when you create a test test folder\nin your contracts folder this is\ntypically where mock contracts are going\nto go and we'll create a new file called\nmock\nV3\naggregator doou and this is where we'll\nadd the code for us to deploy our own\nprice feed now I'm going to show you\nanother repository pretty soon called\nthe chain link mix that we're going to\nwork with for now if you're looking for\none of these mocks I highly recommend\njust pulling it from this chain link mix\nrepository so we can grab it by going to\ncontracts test and grabbing V3 agregator\nSoul we can just copy this whole code\nand paste it into our mock V3 aggregator\ndoso this has all the same exact\nfunctions as a real price feed contract\nsuch as decimals and latest answer which\nare going to be two of the ones we use\nthe most we can also see its Constructor\nhere these are the variables that it\ntakes whenever this contract is deployed\nit takes a decimals and a IAL answer\ndecimals is of course going to be how\nmany decimals that this contract should\nhave and initial answer is going to be\nits starting value like 2000 for example\nonce we have this contract in our test\nsection we can of course run brownie\ncompile and brownie will go ahead and\ncompile this mock V3 aggregator as well\nbecause remember brownie compiles any\ncontract in this contracts folder let's\ngo back to deploy script now that we\nhave this mock V3 aggregator in here now\nwhat we can do is we can do a little l\nhere saying okay well if we are on a\ndevelopment chain let's do something\nlet's deploy these mocks so let's do a\nlittle print statement here a little\nprintf saying the Active network is\nNetwork that show\nactive do another print statement print\nF saying deploying mock dot dot dot\nlittle closing there and then this\ndoesn't need to be print F can just be a\nregular print and then now the same way\nwe import funme we can import mock V3\naggregator we can just deploy this\ncontract the same way we deploy all of\nour other contracts so we'll do mock V3\naggregator do deploy and as we just\nlearned we have to add the parameters\nThe Constructor takes which is going to\nbe decimals and initial answer so maybe\nwe'll set decimals to 18 and then maybe\nwe want to set the initial answer to\n2,000 so 2 1 2 3 1 2 3 4 5 6 7 8 9 10 1\n2 3 4 5 6 7 8 comma and of course since\nwe're deploying we got to do a\nfrom we'll use our account here we'll do\nanother\nprint\nsaying mock deployed and of course we're\ngoing to need to get this mock V3\naggregator address so we'll do mock\naggregator equals this and we'll set\nprice feed address to equal our mock\naggregator do address and now we're\ndevelopment or live Network agnostic if\nwe deploy this on a live Network we'll\nuse the address from our config\notherwise we'll use a fake aggregator\ncontract that we've deployed let's go\nahead and even try this on a development\nNetwork so we can do\ngrounding run scripts deploy py we don't\nneed a network flag here we'll hit enter\nit'll spin up the ganach and we even\nwill deploy a mock aggregator contract\nfirst and then we'll do our fundme part\nof course we are running to an issue\nbecause we're trying to verify a\ncontract on a chain that doesn't exist\nether scan doesn't know about our local\nganach chain so to fix this instead of\ndoing publish Source equals true we can\nhave this publish Source be again based\non what chain that we're on so we'll go\nback to our Browning conf\nand for rink B we'll say verify will be\ntrue but for\ndevelopment we'll say verify will be\nfalse and back in our deploy script we\nnow say publish source is going to be\npulled from our config so again we'll do\nconfig\nnetworks network. active and then we'll\ndo do get\nverify this dot get verify will make our\nlives a little bit easier if we forget\nto add verify in here you could still do\nlike this verify but you're run into\nsome index errors if you forget to\nactually put the verify so sometimes I\nget lazy and it's just a little bit\nnicer like this now if we run this again\ndeploy ipy we'll spin up our local\nganache we'll deploy a mock price feed\ncontract and then we'll deploy our\nfundme contract and it completes\nsuccessfully so this is awesome we have\na way\nP our fundme contract that uses a price\nfeed contract to our own local\ndevelopment environment with a mock AKA\na fake price feed contract this is\nawesome now this is great but our deploy\nscript is starting to look a little big\nand a little clunky so let's actually\nclean this up to make it look a lot\nnicer the first thing that we want to do\nis we want to fix this this big 2,000\nnumber just looking at right away I'm\nnot exactly sure how many zeros it has\nso to make this look a little bit nicer\nand more readable we can once again\nagain call on our friend web 3.y from\nweb3 import web 3 and down here we'll do\nweb\n3.2\nway 2000\ncomma ether this two-way function will\njust add 18 decimals to this 2,000 so\nnow this is much more readable that the\ninitial value for this is going to be\n200000 the next bit is that we're always\ndeploying this mock V3 aggregator here\nand if we already have a mock deployed\nto whatever Network that we're working\non we don't need two mocks here so what\nwe can do then is right before we deploy\nthis mock is we can do a little if\nstatement we can say\nif the length of our mock\nV3\naggregator is less than or equal to zero\nonly then will we deploy this mock V3\naggregator remember we can check the\nlength of our V3 aggregator because this\nV3 aggregator is just going to be a list\nof all the different V3 aggregators that\nwe've deployed now instead of using mock\naggregator do address we can just\nuse mock V3 aggregator minus one.\naddress so we're just saying okay great\njust use the most recently deployed mock\nV3 aggregator and then of course we\ndon't we no longer need to set this as a\nvariable and that looks a little bit\ncleaner and we'll make this a little bit\nmore efficient so this deploying MOX bit\nthough is going to be something that so\nthis deploying MOX bit though is going\nto be something that we're actually\ngoing to do relatively frequently let's\neven move this print statement up here\nso instead what I like to do is put this\nwhole mock deploying bit in its own\nfunction in our helpful scripts so let's\nopen back up our helpful scripts we'll\ndo a new function called\ndef deploy\nMox and we'll just paste that code in\nhere of course this means that in our\nhelpful scripts we're going to have to\nimport Mach V3 aggregator we'll also\nhave to do from web\n3 Port web 3 and instead of account\nwe'll just use this get account function\nnow back in our deploy script we can\njust delete this whole part replace it\nwith deploy\nMox and then import deploy MOX from our\nhelpful\nscripts and then we can also delete this\nimport now let's remove some of these\ncomments if you'd like this is starting\nto look a lot more sophisticated and\nthis is great because now we have a way\nto deploy based off if we're on a live\nchain or a development chain and then\none more thing I like to do so that\neverything is\nparameterized I like to set these as\nstatic variables in the top of our\nhelpful scripts so I'll set decimals\nequals 18 and then I'll set\nstarting price equals 2000 and then I'll\nhave mock V3 aor to deploy to Des\nweb 3.2a to starting price here so so\nlet's say now that I wanted to deploy\nthis to my own ganache instance well\nwhat we could do is we could open up our\nganache here do quick start and we'll\njust quickly create our own gach\nblockchain in our script let's go ahead\nand just run this deploy script again\nlet's see what happens instead of\nbrownie spinning up its own ganache here\nit says attached to local RPC client\nlistening at at and then this address\nhere brownie is smart enough to detect\nif you're running your own ganach\ninstance here and will automatically\nattach itself to it knowing that that is\ngoing to be a development environment if\nwe go to our ganache we'll see we have\ntwo transactions which are going to be\ncontract Creations we're going to create\na price feed contract and then also our\nfundme contract so this is great this is\ngreat for testing quickly and locally\nbut there is an issue with this for\ndevelopment networks again brownie\ndoesn't keep track of those so in our\nbuild folders if we go to deployments we\nonly are saving stuff from the rink be\nchain here so we would need to tell\nbrownie hey there's another Network that\nwe want you to work with and we want you\nto remember the deployments to that\nchain so what we can do is we can add a\nnew network to our brownie network list\nremember\nbrownie networks list we have all these\ndifferent pieces in here these are the\nones that brownie is going to not\nremember and these are going to be the\nones that brownie remembers so let's say\nwe want to deploy to a ganach chain and\nwe want brownie to remember those\ndeployments well we can add a network\nhere and this is going to be how we add\nany blockchain that we want any evm\nblockchain like Avalanche like polygon\nEtc to add a new network to the brownie\nnetworks is we'll run brownie networks\nadd we'll choose development or ethereum\nwe're going to choose ethereum because\nwe want this to be a persistent Network\ndo ethereum we'll give it a name I'm\ngoing to call this\ngach\nlocal we need to give it a host AKA and\nHTTP address which we know is right\nhere then I'm just G to make this\nlowercase and then a chain ID\nwhich for this we know is\n1337 enter now if I do brownie network\nlist I see a new blockchain called\nganach local and this is going to reach\nout to our ganos UI or our ganach\ncommand line depending on what we're\nrunning now just to note we are going to\nbe deploying to this ganach UI or ganach\nCLI a lot for the rest of this lesson so\nplease keep your ganache instance\nrunning now what I can do is I can run\nbrownie run scripts deploy pi-- Network\nganach\nlocal let's see what happens of course\nwe run into our our first issue ganach\nlocal isn't development so it's going to\ngo ahead and try to pull from our config\nfile we don't want this we want to\nactually deploy a mock for our local\nganach if a mock hasn't been deployed so\nwhat we can do is we can extend our\ndefinition of what a development\nenvironment is in our helpful SC scripts\nwe can add a flag in here we'll say\nlocal blockchain\nenvironments equals and this will be a\nlist we'll say development of course\nwill be one but we can also say\ngach local will be another and now we\ncan import this local blockchain\nenvironments into our deploy so from at\nthe top from scripts. helpful scripts do\na comma here paste that and save M gets\nreformatted which is really nice and\ninstead we'll say if network. show\nactive not in local blockchain\nenvironments then go ahead and pull from\nthe config what this is saying is it's\nsaying if whatever Network that we're on\nif it isn't development or ganach local\nthen go ahead and use a config if it is\none of these two we're going to go ahead\nand deploy a mock here now that we have\nthat let's try this again rowny run\nscripts deploy py--\nNetwork\nG local and we run into a different\nissue we're saying hey you don't\nactually have enough gas well why is\nthis let's look at our get account\nfunction aha this one is also looking\ndirectly for this development chain this\none will say if network does show active\nis\nin local blockchain environments then\nreturn accounts zero so we're saying if\nthe network we're working on is\ndevelopment or ar ganach local then just\nreturn accounts zero so let's try this\nokay we're getting closer now we're\nrunning to this key error ganach local\nwell we do know how to fix that as well\nin our config We'll add this new network\nwe'll say ganach local and we'll set\nverify to false so let's try this one\nmore time perfect now mocks have been\ndeployed and our funme has been deployed\nand if we look look in our build folder\nin deployments we now have a new chain\nID for 1337 for saving these deployments\nand it looks like in our ganach chain we\nhave these actually saved in here which\nis great now an important thing to note\nif you were to close this or delete this\nganache chain all of your contracts will\nbe lost so you won't be able to interact\nwith them again to account for this you\ncan always delete\n1337 and delete the entries in 1337 from\nyour map. Json or if you're find\ndeleting the whole build folder you\ncould delete the whole build folder so\nnow that we've deployed this let's\nactually write a script to interact with\nthis so let's create a new file we'll\ncall it fund and withdraw pi and this\nwill be the script we use to fund and\nwithdraw so let's create a function\ncalled fund we can say fundme equals the\nmost recently\ndeployed fundme we're going to have to\ndo from browning import fundme we're\ngoing to have to get an account since we\nare going to we're going to be making\nsome State changes and we just have this\nequal to get account and we can do from\nscripts. helpful\nscripts import get account let's get the\nentrance fee so we can figure out how\nmuch we want to fund ah actually sorry\nuh since this is going to resemble that\nFUSD price feed it actually only has\neight decimals two 1 2 3 for 2,000 and 1\n2 3 four 5 six s eight the reason we\nwant to do it like this too because in\nour get price function we know that it\nonly has eight decimal places so we're\nmultiplying it by an additional 10 here\nwe want it to resemble that as well so\nwe'll do eight decimals starting price\nof 2,000 with eight decimals here and\nfor our Mach V3 aggregator we're just\ngoing to use those exact values and\nwe're not going to do the web 3\nconverting we're just going to make it\nexactly those hardcoded values now we're\ngoing to want to get the entrance fee so\nI've gone ahead and actually added a\nfunction called get entrance fee to our\ncontract to make our lives a little bit\neasier here I'm going to recommend that\nyou take a look at this and then type it\nin yourself or you just copy paste it\nfrom the GitHub repository so that we\ncan use this get entrance fee because\nit's just a whole bunch of math here so\nback in our Fund in withdraw what we can\ndo then is we can do entrance\nfee equals fund\nme.get entrance fee excuse me get\nentrance\nfee and we can even print out this\nentrance fee just to see if we're doing\nit right but first we're going to want\nto run brownie run\nscripts deploy Network gach local\nbecause we changed our fundme\ndoou all right great and now we can run\nbrownie run\nscripts fund and\nwithdraw Network Mar\nlocal and whoops I need a main function\nso we'll do def\nmain F in\nhere let's rerun\nthis and great we can see this is the\nentrance fee do a little print statement\nhere print F saying\ncurrent entry fee\nis entrance\nfee do a little print\nsaying\nfunding and then we'll call\nfundme\nfund of course we're going to have to do\na\nfrom account\nand we're also going to send a value of\nentrance\nfee any low-level transaction data that\nwe want to send with our our\ntransactions and function calls will add\nin this little bracket piece here let's\nhit up let's do browny run scripts fun\nand withdraw again and great it looks\nlike it's going through perfectly\nawesome let's also do a withdraw\nfunction for the owner to\nwithdraw say fundme equal ALS\nfundme\none do account equals get\naccount and then we'll just call fundme\nwithdraw from\naccount and then right after fund is\ncalled we'll have withdraw be called and\nour main function\nhere let's go ahead and try\nthis script\nfindun withdraw\nNetwork gach\nlocal this our funding script our\nfunding transaction going through and\nthen our withdraw transaction perfect so\nit looks like our approximate\nfunctionality here works great and this\nis a script that we could run on a main\nnetwork if we like now again it's still\nmuch better for us to run so now we're\ngoing to move into actually\nwriting those tests and for these tests\nwe're going to want to quit our gachui\nlet's go ahead and write some of these\ntests create a new file called test\nfundme Pi we'll quickly speed through\nthis test because we're not going to\nlearn too much new here keep in mind\nwhen we run this test we're going to\nwant it to be able to work independent\nof the network that we're working on so\nlet's just keep that in mind let's do a\ntest just to see if we can fund and\nwithdraw so we'll do def test can fund\nand withdraw and we'll do basically\nexactly what we've done before do count\nequals get account of\ncourse we'll do from scripts that\nhelpful\nscripts import get account then we'll\nwant to deploy fundme and we can even\njust use our deploy fundme script in our\ndeploy so we can do from scripts\ndooy import Ploy fundme in an our deploy\nfundme at the bottom we'll just say\nreturn fundme so that our test can now\nhave this fundme contract for it to work\nwith so now we'll say\nfundme equals EMP Ploy fundme we'll grab\nthe entrance\nfee which will be equal to fund\nme.get entrance\nfee and then let's go ahead and fund it\nso we do transaction equals\nfundme fund\nwe'll call from\ncount we do value entrance\nfee do tx. weight one we'll do an assert\nhere we'll do\nassert fundme do\naddress to amount\nfunded it's going to be account.\naddress to the entrance fee so we want\nto check\nthat our address and the amount that we\nfunded is being adequately recorded and\nthen we'll do transaction two will be\nfundme\nwithdraw from\ncount tx2 weight\none and then we'll assert fundme address\nto amount\nfunded account. address\nequals\nz and let's go ahead and run this test\nso we do brownie\ntest and perfect looks like it's doing\nwell now you may be wondering why\nsometimes we use the dashd network flag\nand sometimes we don't in our Network\nsection brownie automatically picks a\ndefault network to use and the default\nis always set to\ndevelopment however we could set this to\nbe anything that we wanted we could set\nthe default to be ganach local we could\nset it to be rink B whatever we want it\nhere whatever you set for the default in\nyour brownie config is what the network\nwill be defaulted to so right now when\nwe run brownie test this is equivalent\nto running Browning\ntest-- Network development we can even\ngo ahead and run that too now we could\nalso run this test on rinky and we will\nin a second but often times we don't\nwant to test all of our functionality on\non rink be and on live networks because\nit's going to take a long time for them\nto run so sometimes we only want to run\ntests on our local chains well how do we\ndo that we can use py test skip\nfunctionality to do so to work with py\ntest we're going to first need to\ninstall it so go ahead and run pip\ninstall P test to demonstrate this let's\ncreate a a test that makes sure only the\nowner can withdraw and nobody else can\nso we'll call this def test\nonly owner\ncan withraw to skip this test if we're\nnot on a local network we'll first check\nthe network we'll say if network. show\nactive is not in and yep probably would\nhave guessed it we're going to pull this\nlocal blockchain environments in from\nour helpful scripts so we'll do comma\nlocal blockchain\nenvironments and we're going to say if\nthe network. show active is not in this\nlist of local blockchain environments\nwe're going to do pest. skip say only\nfor local\ntesting of course we're going to have to\nimport\nNetwork and we're also going to have to\nimport P test now if I try to run this\ntest here with\nbrownie test- K D- Network Rinke it\nShould\nSkip perfect and we do see this s here\nmeaning meaning that it skipped this\nfunction if we run this with D- Network\ndevelopment it should go ahead and run\nthis and it'll pass because nothing\nhappens in this function and it does\nperfect let's keep going so now we'll\nsay account equals get\naccount we say fundme equals deploy\nfundme and now let's get a different\naccount to try to call the withdraw\nfunction so we'll say bad actor\nequal this will just give us a blank\nrandom account uh but we do have to\nimport accounts from B here now we want\nto test to see that them calling this\nwithdraw function actually reverts them\nand causes an exception because if I try\nto do fundme do\nwithdraw\n[Music]\nfrom Bad actor right now what do you\nthink will happen well that well we know\nin our fundme doso our withdraw function\nhas the only owner modifier so\ntechnically only the owner should be\nable to call this function so what\nhappens actually we don't even need this\naccount get account bit let's just go a\nand delete that so what happens if\nsomebody else tries to call this\nwithdraw function well let's go ahead\nand test this we'll do\ngring\ntest-\nK test only owner can withdraw\nH and you can see we're getting this\nerror here wrting browning. exceptions.\nvirtual machine error revert from this\nfundme do withdraw well we want this to\nhappen we we're expecting this to happen\nso how do we test that we want this to\nhappen well we just need to tell our\ntest that we want this to happen so\nfirst we're going to have to import from\nbrownie this\nexceptions package this way we can tell\nour test exactly what exception we're\nexpecting to see then we'll say with pi\ntest do raises\nexceptions. virtual machine\nerror\nfundme\nwithdraw we'll just actually we'll just\ncopy this line down here now what this\nis telling our test is that if this\nreverts with this virtual machine error\nthat's good we're saying we want you to\nrevert when you try to call this line so\nif we delete this line and hit up and\ntry to run this again\nwe can see that it now passes and this\nis exactly what we're expecting so this\nis awesome all right we've learned a lot\nof fantastic tools for working with\nbrownie here now the last version of\ntesting that I want to show you how to\nuse is mainnet forking mainnet forking\nis incredibly powerful when we're\nworking with smart contracts on mainnet\nthat we want to test locally so let's\ntalk about forking for a minute so on\nthe left here I have a blockchain right\nan example of a blockchain this is going\nto be like a test net rink coulde or\nsomething like mainnet right this is\ngoing to be a blockchain that we\nactually deploy to now there are a whole\nbunch of blocks in here right and\nthere's a a huge chain that we can\nactually work with all this information\nis public information right this block\nis going to have like\ntransaction\ntransaction\ntransaction it's going to have you know\neach one of these blocks is going to\nhave a whole bunch of transactions and\nall this information is here in addition\nto all these transactions it's going to\nhave price feed\ncontracts a contracts you know Etc it's\ngoing to have all these different\ncontracts in it so hypothetically if\nit's all already there we should be able\nto basically copy this all this whole\nblockchain and do some simulations\nourselves and that's exactly what\nforking does a forked blockchain\nliterally takes a copy of an existing\nblockchain on the left here and brings\nit into our local computer for us to\nwork with we actually have control of\nthis blockchain since it's going to run\non our local computer similar to ganach\nnow all the interactions that we do on\nthis local blockchain are not going to\naffect the real blockchain because it's\nour local chain right it's a simulated\nblockchain but because it's simulated we\ncan go ahead and interact with price\nfeeds we can interact with a we can\ninteract with all these different\ncontracts that are already going to be\non chain meain that for is a buil-in\npart of brownie and also pulls from\ninfura the same way it works with rink B\nand Coen and everything else we can\nstart to interact with the mainnet fork\ncontracts the exact same way therefore\nso we can take this whole rink be\nsection copy it paste it and we'll just\nchange this FUSD price feed\naddress to its main net address so we'll\ngo to docs. chain. link ethereum price\nfeeds get FUSD here\ncopy that and we'll paste it into here\nand we'll change this to mainnet fork\nand since this is going to be a fork of\ncourse for verify we're going to do\nfalse now if we try to run one of our\nscripts like brownie runs scripts deoy\nD- Network main at Fork you'll see we'll\nactually run into an issue here it's\nsaying insufficient funds for transfer\nin our deploy\nscript when we do our get account and\nour helpful Scripts\nright now we're using accounts. a config\nwhile it's from key yes it's going to be\nour account which right now has zero\nmoney in it on Main net so Brownie's\nright away going to say hey you don't\nhave any money on mainnet what's the\ndeal so we need to tell brownie that\nwhen we're working with main net Fork it\nshould create us a fake account with 100\neth in it however we don't want it to\ndeploy a mock because price feed\ncontracts already exist so we don't want\nit to deploy a mock but we do want it to\nget us an account here so typically what\nI like to do is I'll add another\nvariable here and I'll call it forked\nlocal\nenvironments and I'll\nadd maintenance fork in here and I'll\nuse this now as part of my if statements\nso I'll say if network. show active in\nlocal blockchain environments\nor network. show\nactive in Fork to local environments\nthen we're going to go ahead and return\ncount zero however in our deploy piy\nmainnet Fork is not going to be in this\nlocal blockchain environment so we will\njust get our price feed from our config\nso now if I run this mainnet Fork again\nnow if we run this you'll see we'll\nstill get an error we'll get list index\nout of range so Brownie's built-in\nforking mechanism doesn't actually come\nwith its own accounts here however it\nhas these issues so what normally I like\nto do is I like to create my own custom\nmained Fork right in brownie the way we\ncan create our own development custom\nnetwork is by using the brownie\nnetworks's ad key so we can do\nbrownie networks add we'll make this a\ndevelopment network instead of a\npersistent Network and we'll call this\nmain net Fork\nDev to set this up we'll do a ganach CLI\nso we'll say the command to to run this\nFork is going to be ganach\nC the host is going to be the same as\nalways HTTP that colon 127.0.0.1\nFork is going to be equal to and this is\nwhere we just put\nhttps main\nnet. inf.\niv3 slash web 3 INF\nfura project object ID now don't hit\nenter quite yet I'm going to explain a\ncouple things so this single quote means\nrun this as is if we ran this without\nthe single quote our environment\nvariable we' get actualized here and\nwe'd always have to use whatever our\ncurrent environment variable is so we\nwant to have this little little\nsemicolon here then we would do accounts\nequal 10 this tells brownie for us to\nset up 10 fake accounts for us we'll\ngive it a pneumonic of brownie so we'll\nsay great make those accounts just have\na pneum monical Browning and we'll do\nPort equals\n8545 now once again don't hit enter\nquite yet I do want to explain one other\nthing so this is great for working with\ninfero and forking from infero however I\nhave to note that performance wise\nforking from infura has pretty much\nalways given me an issue so I prefer\nactually to Fork from this application\ncalled Alchemy and in fact if you'd like\nyou could set up all of your networks to\nwork with Alchemy uh by modifying them\nI'm going to go ahead and sign in here\nand we're going to give it an Alchemy\nURL instead of an inferior URL so I'm\ngoing to go ahead and create an app I'm\ngoing to call this fundme demo\ndescription will also be a fundme demo\nbe a development environment on the\nethereum mainnet let's create this we\ncan now view the details of this we'll\ngo to view key and we'll copy this HTTP\naddress and we'll move back over here\nand for forking\nwe can just delete everything next to\nthis\nfork and we'll just paste that in here\ninstead and let's go ahead hit enter\nyou'll know you've done this right if\nyou can see something like this mainnet\nFork dev has been added oftentimes in my\nexample I will actually just delete\nmainnet fork and have mainnet Fork dev\nbe my default for mainnet fork but for\nus we're going to go ahead and do\nmainnet Fork Dev so in our config we're\ngoing to change mainnet fork to main it\nFork Dev so since we're giving this a\ndifferent name that means in our helpful\nscripts we going to have to do a comma\nhere say mainnet fork Dev all right\ngreat now our get account should return\naccount zero for mainnet fork Dev and it\nshould actually work so let's run our\nscript again Ronnie run scripts deploy\nDas Network main net Fork Dev and\nperfect we're running our mainten Fork\nDev and it is running successfully now\nwe should also be able to test exactly\nthe same way let's look at our test real\nquick test fundme and see okay cool\nwe're going to be skipping this one\nsince main at Fork Dev isn't in the\nlocal blockchain networks but this\nshould work perfectly and then often\ntimes in my tests here I'll actually do\nlike a little plus 100 or something for\nentrance fee just in case I need like a\nlittle bit more money for whatever\nreason so now if we run Browning test--\nNetwork mainnet Fork\nDev we'll see that this does indeed pass\nand this is awesome so this is fantastic\nincredibly powerful project here now\nwe're going to teach you how to actually\nshare your code and enter the world of\nOpen Source and decentralized code the\nway the world works when sharing code\nand sharing ideas and collaborating\ntogether is they use what's called open-\nSource git repositories GitHub is an\nexample of one of these git repositories\nthat we can use to share our code and\nit's one of the dominant ways that smart\ncontract Engineers share ideas and share\ncode we are now going to learn how to\nadd our code to GitHub and then we can\neven share the code and show the world\nwhat we've built and what we've done\nthis isn't going to be a full endtoend\ngit course however there are some links\nin the course repository that will show\nyou how to work with Git work with\nGitHub and work with Version Control so\nthe first thing that we're going to do\nis we're going to come to GitHub and\nwe're going to sign up for service at\nour email\ncreate a\npassword enter your username no now\nwe'll go to our email to verify\nit continue we're going to be working\nwith some collaborative coding we're\ngoing to choose the free edition and\nperfect we are now in GitHub now that\nwe're in GitHub we're going to create\nour own first open-source repository so\nwe're either going to hit this plus\nbutton here or create repository let's\nchoose a repository name for this we'll\ngive it the same name as our main folder\nso call this brownie fundme give it a\ndescription the smart contract\napplication we'll hit create repository\nthis is where we're going to upload our\ncode to share with the world back in our\nvs code now we're going to send this\nfolder to that repository first thing we\nneed to do is installing git there are a\ncouple different ways to install git\ndepending on the version that you're on\nwe'll put this link in the description\nto our course to actually install git\nonce you have an install you should be\nable to run\nget-- version let see a get version here\nnow we're going to initialize our\nrepository here by doing get and nit\nwe're going to choose a branch name\nwe're going to call it mate we go ahead\nand add our username and email to our\nget config\nuser. name\nVols\nvideo email\nnow we're going to do a couple things to\npush all of our code to GitHub here\nhowever remember we do not want to push\nourv pieces up here so we can do a\ncouple of things we can a we go ahead\nand delete this of course but we can\nalso add in ourg ignore file aemv this\nwill help us so that we don't\naccidentally push ourv file to GitHub we\ncan choose what files we want to push by\ndoing get add and then a period And if\nwe do get status it'll Now show us all\nthe different files that we have staged\nto push to GitHub we look in here we see\nwe have git attributes G ignore ring\nconfig fundme some contracts some\nscripts but we do not have that file if\nyou were to remove EMV from.get ignore\nand you ran get add. again then we did\nget status we now see the EnV in here we\ndo not want this in here so we can do\nget remove D-\ncached we'll add EMV back to ourg ignore\nfile and then we'll run get status again\nand then we'll run get add period and\nthen get\nstatus and great we do not see that Dov\nin here so that's very good now we'll\nCommit This by get commit minus\nM first\ncommit and now we can add this folder to\nour GitHub back in our GitHub there's a\nlittle line here which even tells us how\nto do it we're going to copy this line\nright here get remote add origin https\nfree code Camp BR fundme copy that paste\nit in here hit enter and now we can just\ndo this second line get push D origin do\nget\npush origin main we're get an output\nlike this and if we go back we'll now\nsee all of our files and folders in here\nnow I've already added my email and\npassword in here but instead of this\nyou'll probably get GitHub asking you\nfor authorization you can just go ahead\nand put your GitHub username in and your\npassword in if your username and\npassword doesn't work you can come into\nGitHub go down to settings\nscroll down to developer settings\npersonal access tokens generate new\ntoken call this F Brownie and we'll want\nto give it at least repo authorization\nhere we hit generate token and instead\nof using your password you can go ahead\nand use this GitHub token amazing and\nyou now have your first GitHub\nrepository we could even come in here\nadd some topics solidity chain link p\npython brownie Etc so that we know what\nour file is about and this is incredibly\nexciting now I'm GNA even encourage you\nto pop on Twitter and share your\nexcitement I just\nmade my first first at\nGitHub\npository thanks to freecode\ncamp at solidity\nLang\nbrowny chain link if you want to tag me\nyou can also tag Patrick C and pop your\nrepo in there go ahead and tweet the\ncommunity absolutely loves hearing about\nall the Fantastic things people are\ndoing in this ecosystem so be sure to\nreach out have fun and engage I know\nwe've gone over a lot here but let's\ntalk a little bit about some some\ntesting pieces here now a big question\nyou might have is well okay so I learned\na ton of stuff we learned about mainnet\nforking I can do stuff on ganache I can\nuse Brownie's ganache I can use\nBrownie's main net Fork there's I can do\na test that there's all these places to\ndo stuff where do I need to run my tests\nthe default for every single one of your\ncontracts is as follows you always 100%\nneed to have tests that pass on a local\nbrownie spun up ganache instance that\nshould be priority number one to get all\nyour tests to pass it on this this means\nthat you will need to deploy mocks after\nthat the other place you absolutely need\nto have tests or do some type of\ndevelopment is on a test n these are\ngoing to be what's known as your\nintegration tests and we'll talk more\nabout those later so those are the two\nplaces you always need to have test\ndevelopment and a test net I think\ntesting on main net fork and your own\nlocal ganache are optional testing on\nmainnet Fork can be done and probably\nshould be done whenever all of your\ncontracts and all of your interactions\nare going to be onchain on one chain\nwithout any external offchain components\ntesting on your own local ganache is\nreally more meant for tinkering and kind\nof exploring and seeing things yourself\nso that's going to be the setup here so\ngreat now let's move into our most\nchallenging example once you pass and\nonce you complete this example you\nbasically will have all the tools to be\nan incredibly powerful smart contract\ndeveloper then after that we're going to\nshow you the chain link mix package and\nhow to do what's called a brown bake to\nautomatically open up this package with\nall these scripts and all these\ncontracts pre-built in this is going to\nmake our lives substantially easier and\nfaster for deploying our smart contracts\nhowever let's go through the process of\nunderstanding all the pieces that are\ngoing to be inside of this brownie mix\nare you ready you should be let's get\nexcited and jump\nin okay so let's get into our most\nadvanced smart contract project that\nwe've made so far this is going to be\nthe best example of a full scale\napplication and by full scale I really\nmean end to end full Suite all our\nbrownie all of our smart contracts are\nare really solid here what we're going\nto want to do is create a Lottery\napplication where anybody can enter the\nlottery and a random winner is selected\nso let's get to it and let's get started\nso first of course we going to make new\ndirectory we'll call it smart contract\nLottery CD into smart contract Lottery\nand then open that\nfolder and great we are now in our\nLottery application so let's go ahead\nand start a new\nproject browny and it we've got our\nproject here now let's create a quick\nreadme.md to explain what we're going to\nbe trying to do here so number one we're\ngoing to say users can enter the lottery\nwith f based on a USD fee so for example\nlet's set the price to be like $50 and\nthe users actually pay with ethereum so\nwe're going to have to get that\nconversion\nrate two an\nadmin will choose when the lottery is\nover and then\nthree lottery will select a random\nwinner now something important to note\nhere is since we have an admin here this\nmeans that our application isn't\nnecessarily going to be truly\ndecentralized because we have a single\nperson chooses when the lottery is over\nwe could scale this out to have maybe a\ndow being the admin or something like\nthat or we could have the lottery\nautomatically open and close based off\nsome time parameters but for the moment\nthis is the setup that we're going to\nhave keep in mind even though this is\nmuch less decentralized it's still going\nto be a great use of smart contract\ntechnology so first thing that we're\ngoing to get started with of course is\nour Lottery contract so create a new\nfile called\nlottery. soul and let's begin with our\ninitial setup here so let's choose our\nversion prag\nsolidity carat\n0.66 and this will be the version that\nwe want to work with\nhere do\ncontract\nLottery bracket here now let's think for\na second on what some of the functions\nthat are going to be what our main\nfunctions are going to be here we'll\nprobably have a function\nenter that'll be\npublic we'll probably have a function\nget entrance\nfee to get the entrance fee of the\nlottery we'll probably have a\nfunction start Lottery that only the\nadmin can call this will be public as\nwell which means we'll also probably\nhave an end Lottery\nfunction and those are really going to\nbe the main functions the user can enter\nbased off the entrance fee you can start\nthe lottery and then of course we can\nend the lottery so let's get started\nwith this enter function just because\nthis is most likely going to be the\nentry point as we know since we're going\nto want them to pay using this entry\nfunction in ethereum we're going to need\nto make this function\npayable and in here we're going to need\nto keep track of all the different\nplayers everybody who signs up for this\nLottery to keep track of all the players\nwe're going to make an\naddress payable array we'll make it\npublic call players\nand anytime somebody enters we'll just\ndo\nplayer. push message.\nsender however right now we're not\nchecking to see how much value that\nthey're actually sending we want to set\nthe price of this to be at least $50 so\nwe'll say $50 minimum so here we're\ngoing to have to do a require\nstatement requiring them to do at least\n$50 in order to do that we're probably\ngoing to need to have some function to\nget the entrance fee to check whether or\nnot how much they're sending ending is\nactually $50 so let's go ahead and make\nthat get entrance fee function now since\nwe're just going to be returning a\nnumber for get entrance fee we can\nprobably go ahead and make this a public\nView and have this\nreturn a un\n256 to get this entrance we're first\ngoing to have to have stored somewhere\nwhat the entrance fee is we're going to\nhave to store this $50 minimum somewhere\nthis is something we'd probably want to\nset right when our contract is deployed\nso where can we put stuff like that well\nin our Constructor we'll do con\nstructor public we'll create a new\nvariable outside of here we'll call it\nun\n256 public USD entry\nfee and our Constructor we set USD entry\nfee equals 50 now because I like to have\nunits of measure always in way we'll\nalso do times 10 raised to the\n18th now we have some USD entry fee\nlet's go ahead and get this entrance fee\nas we know since we're going to try to\nget a conversion right here we're going\nto want to use a chain link price feed\nso you can head on over to docs. chain.\nlink scroll down to get the latest price\nand we can even just go ahead and copy\npaste this again but for the sake of\nrobustness let's just walk through again\nhow to actually set this up we're going\nto need to pull from the price feed to\nconvert $50 to $50 an eth so let's go\nahead and create an Agra gor V3\ninterface\ninternal\nFUSD price feed and in our Constructor\nwe'll go ahead and set this we'll say\nFus price feed\nequals\nagregator V3 interface and we're going\nto want to grab an address Mark contract\naddresses but of course as you know as\nwe've learned from last time we're going\nto want to parametrize this so we're\ngoing to want to pass the address of our\nprice feed as a Constructor parameter so\nwe'll do\naddress price feed address and we'll\nhave our aggregator V3\ninterface past that price feed address\nthen of course since we're using an\naggregator V3 interface we're going to\nhave to import this from chain link so\nwe can just go ahead copy this from the\ndocumentation and paste it right at the\ntop\nor if you want to rewrite it out\nyourself feel free to do so and of\ncourse since we're doing this import\nhere new\nfile bring config\nyl we're going to want to add this as a\ndependency so we'll do\ndependencies smart contract kit SL chain\nlink bring contracts and we'll do add\n1.1.1 again\nthen\ncompiler sulk REM\nmappings at chain link\nequals this right\nhere we'll pull up our\nterminal we'll try this out do Browning\ncompile see if we're doing everything\nright we forgot an spdx license\nidentifier which is just a warning but\nlet's add it in anyways\nspdx license\nidentifier MIT I should probably spell\nme remappings right REM\nmappings and let's try to compile again\nall right lovely so we at least know\nthat we are compiling correctly awesome\nso now that we have a price feed let's\ngo ahead and set up this entrance fee so\nwe're of course going to need to get a\nprice from this price feed so we can\neven check the documentation how to do\nthat we can call this latest round data\nfunction so we could copy paste it I'm\njust going to go ahead and rewrite it\nbut again we don't need round ID started\nat timestamp or answered in round we\nonly need price so we can go ahead and\nignore these variables on our call so\nwhat we'll do is we'll do like comma in\nprice and then comma comma comma\nequals FUSD Price feed. latest round\ndata and this means we're just going to\nget the price here now we're going to\nwant to do a little bit of quick math\ntypically if we're setting the price at\n$50 and we have price feed of $2,000 per\neth we would just want to do 50 divid\n2,000 but of course since SL doesn't\nwork with decimals we can't actually\nactually just do this so we'll have to\ndo 50 times some big number divid by\n2,000 so we're going to go ahead and do\nit like that but first let's go ahead\nand convert this price from in 256 to\nuint\n256 so say U\n256 adjusted price\nequals\n256 and 256\nprice and\nthen since we\nknow we're going to be using an ethereum\nUSD price feed that has eight decimals\nlet's also just convert it to having 18\ndecimals as well so we can also do times\n10 raised to the\n10th so now we can have\n18\ndecimals now that we have this adjusted\nprice we'll do U 256 cost to enter is\ngoing to\nequal\nUSD entry fee times again we're going to\nwant to times it by some big number here\nso we'll just times it by 10 raised to\nthe\n18th this way USD entry fee has 18\ndecimals but it has an additional 18\ndecimals here that'll be canceled out\nwith our price feeds the math will work\ndivided by\nprice then we'll\nreturn cost to\nenter now of course since we're doing\nsome interesting math here it's\nrecommended to use safe math and use\nsafe math functions we're going to skip\nover the safe math functions here again\nbecause in the newer versions of\nsolidity you don't really have to use\nthem but I think it's important to note\nhere that sending this code this exact\ncode to production would be a bad idea\nfor at least the reason of the safe math\nfunctions but in any case we have a\nfunction here we think our math is\npretty good but I know for a fact that\nmy math is usually not very very good so\nlet's go ahead and do some testing as we\ncode just to make sure our get entran\nfunction is working properly so based\noff of our last lesson let's talk\nabout how do we want to test\nthis well we could do a main net Fork\nhere because we're only working with\nsome onchain contracts and some math we\nwill at some point have to do our\ndevelopment with Mox\nand of course our test net I kind of\nwant to just do a quick and dirty way so\nlet's try our main net Fork just for now\njust to see if if this is really making\nany sense if the current price of\nethereum is\n$2,500 or or this much here and we want\nthe price of this to be $50 we can do 50\ndivided by this and we get\n019 so this should be\napproximately what we get for our eth\nvalue so so if we were to write a test\ntest lottery. Pi we were to test this\nfunction we would expect to get\n0.019 or in way it'll be 1 nine 2 3 4 5\n6 7even n 10 1 2 3 four 5 six we'd\nexpect to get approximately this so\nlet's go ahead and create a function\nthat tests us so we'll do test get\nentrance fee\nand in here we'll deploy Lottery and in\nhere the first thing we need to do is\ndeploy this Lottery function of course\nso we'll do\nfrom browny import\nlottery in order to deploy this we're\ngoing to need to get an\naccount we are going to import our\nhelpful scripts from the last project to\nthis one too so we can get our get\naccounts but for the time being we can\nactually just use accounts Zero from\nbrownie so we'll say accounts zero\nshould start with death and we'll do\nLottery equals lottery.\ndeploy from\ncount and ah of course we have a\nparameter here of our price feed\naddress so we're going to have to add\nsome type of parameter here for now\nlet's just hardcode it from our config\nand we'll go into our config and we'll\nstart our networks flag we're going to\nbe working like I said said on the\nmainten it fork for this quick and dirty\nhere we call F USD price\nfeed grab the FUSD price feed from Main\nnet since we're going to be doing a main\nnet Fork\nhere pop that in\nhere now we can just\nsay from\nconfig Networks\nnetwork. show\nactive yes\nD\nFeed of course we're going to need to\nimport Network\nhere and now we can do our kind of quick\nand dirty test we can do Lottery dot get\nentrance fee\nspelling that right\nget\nyes CT lottery. getet entrance fee\nshould be greater\nthan let's just say let's just go down\non\n18 or if we wanted to make sure we're\nactually doing this right we do from\nthree or\nweb3 do web 3.2 way\n0.019 comma\nether should be greater\nthan even do 0.018 just to make sure it\nshould be less\nthan\n0.022 now these numbers are of course\ngoing to be a little bit different for\nyou and if you want you can go ahead and\nskip this part so that you don't have to\ndo the math but it is kind of nice to do\na quick sanity check saying okay like\nbased off what things are right now what\nwould this price end up to be now in our\nlast section we made a mainnet fork Dev\nNetwork I'm going to just go ahead and\ncustomize our mainnet Fork the way that\nwe showed you guys how to do mainnet\nFork Dev this way you can use accounts\nand we can be a little bit more robust\nhere to do this we're first going to\nhave to delete browny's internal\nbuilt-in main it Fork so we do\ngrounding networks\ndelete main that fork\nmain net Fork has been\ndeleted and now let's go ahead and add\nour own mainnet Fork using\nAlchemy as our ethereum\nconnection so you'll want to create a\nnew app I've already created one here\ncalled smart contract Lottery we'll view\nthe key and this is the HTTP endpoint\nthat we'll use so to do this we'll do\nBrowning networks add this will be a\ndevelopment chain we'll call this\nmaintened\nFork it'll be a ganach\nCLI the host is going to be our Local\nHost so\n127.0.0.1\nand the fork is going to be equal\nto our Alchemy H2 top\nhere we'll do a counts equal 10 that way\nwe can use the\naccounts do the New Monic\nbrownie Port is going to be\n8545 and great main it Fork has been\nadded now that we have this here we can\ngo ahead and run our test\nbrownie test d d Network main net\nFork oops looks like we got a a little\ncompile error on our math here oops it\nlooks like we're dividing by Price which\nwe need to be divided by adjusted price\nand we forgot the parentheses on latest\nround data let's try this\nagain and I put an extra comment here\nlet's try this one more\ntime lovely and it looks like we're\nforking\ncorrectly and awesome it looks like our\ntest indeed passes here of course we\nknow that we're going to want to change\nthis because this isn't a great way to\nactually test our contracts here but it\ncan be a nice sanity check and we know\nwe're going to have to refactor this as\nwell for mocks and for accounts but\nwe'll get to that in a little bit\nawesome sanity check complete let's get\nback to our contract here so we are\ngetting the cost to enter correctly\nperfect getting this entrance fee what\nthat means we can do in our enter\nfunction we can do\nrequire message. value it's got to be\ngreater than or equal\nto our get entrance fee function\nand if it's not give them an error of\nnot enough\nteeth we have a way for them to enter\nand we have a way to get the entrance\nfee but we want to make sure that we're\nnot ending the lottery before the\nlottery even starts right or we're not\nentering a lottery when a lottery hasn't\neven begun so we're going to want to\nweigh to iterate through the different\nphases of this Lottery and we can do\nthat with what's called an enum or an\nenum according to the solidity\ndocumentation enums are another way to\ncreate userdefined types in solidity we\nsaw an earlier version of doing this\nwith a struct enums are a little bit\ndifferent in that they're explicitly\nconvertible to and from all integ types\nso what does that actually mean well we\ncan have an enum like this action\nchoices go left go right go straight and\nsit still there just more readable ways\nto say go left is going to be rep\npresented at state zero go right is\ngoing to be State one go straight state\ntwo sit still state three so for our\nLottery contract we're going to want to\ncreate this new type that represents the\nlottery state so to do this we'll do\nenum Lottery State\nopen\nclosed and calculating winner this means\nthat we have a new type called Lottery\nstate with three positions open closed\nand calculating winner these different\nstates are actually represented by\nnumbers so open is actually a zero\nclosed is actually a one and calculating\nwinner is actually a two now that we\nhave this new type we can create a\nvariable of type Lottery state so we'll\nsay Lottery\nstate\npublic Lottery State and right when we\ninitialize our contract here we're going\nto want to set our Lottery state to\nbeing\nclosed so in our Constructor we do\nLottery State\nequals Lottery state. closed now since\nthese are represented by numbers as well\nwe could also just do Lottery State\nequals one because one stands for closed\nhowever it's much more readable to do\nLottery state.\nclosed now that we have a lottery state\nin our enter function we can\nrequire the lottery state\nis going to be equal to lottery state.\nopenen so we can only enter if\nsomebody's started this Lottery and\nthat's exactly what we're going to do in\nour start Lottery function we're going\nto do a require in here that the lottery\nstate is going to be equal\nto Lottery state do\nclosed we can even\nadd failure function here\nsaying and start a new Lottery yet and\nwhen we do start this Lottery we say\nLottery State\nequals Lottery state.\nopenen now when somebody starts the\nlottery they'll be able to\nenter of course this start Lottery bid\nhere needs to be called only by our\nadmin so this is where our only owner\nmodifier is once again going to come\ninto place we could write our own only\nowner modifier or we can once again use\nopen Zeppelin's access control and open\nZeppelin's ownable function instead\nwhich is what I'm going to use here so\nwe're going to go ahead and grab this\ncopy this paste it\nin import atop Zeppelin contract access\nownable and of course since we're doing\nthis we're going to have to add this\ndepend dependency into our config we're\ngoing to be using\nopen Zeppelin\nslop Zeppelin contracts at\n3.4.0 we're going to\nremap at open Zeppelin\nequals\nthis\noops then we'll say our Lottery is\nownable perfect now we'll try to compile\nthis awesome looks like brownie grabbed\neverything correctly and we're good to\ngo great now we can finally move into\nour end Lottery function this is where\nwe're actually going to choose a random\nwinner here we only want the admin to be\nthe one to actually end the lottery so\nlet's add the only owner modifier here\nand let's talk a little bit about\nRandomness because this is what we're\nlooking to do now we're looking to get a\nrandom winner here now as you know the\nblockchain is a deterministic system\nright and this is super advantageous\nbecause it allows us to do all these\nsmart contracts and have this system\nthat can actually reach consensus very\neasily random numbers are much harder if\nlet's say you had a blockchain with a\nwhole bunch of different nodes and each\nnode responds and gives their own random\nvalue well each node is never going to\nbe able to sync up and say Hey you know\nwe all agree on a random number what you\ncould do is you could base the random\nnumber on some other attributes in the\nsystem but then it's not really random\nit's actually going to be pseudo random\nso getting truly random numbers in a\ndeterministic system is actually\nimpossible and if you know a lot about\ncomputer science you actually know that\neven when you call like math.random in\nyour JavaScript what your computer is\nreally doing is it's looking at some\nplace in memory grabbing some value and\nsaying hey this is probably random\nenough here go ahead and use this now in\nsmart contracts especially when working\nwith with any type of financial\napplication such as a lottery having an\nexploitable Randomness function means\nthat your lottery is at risk of being\nhacked or destroyed and this isn't even\na fairy tale um at the time of recording\nabout 2 weeks ago I did a rundown on an\nexploit where a protocol used insecure\nRandomness and got hacked for\n$700,000 so I am going to show you this\ninsecure way first and the reason that\nI'm going to show you is that it is a\nquick and dirty way to get a pseudo\nrandom number but please do not use this\nin any any production use cases I'm\ngoing to show you a method that's often\nused to teach people how to get random\nnumbers and then we're going to explain\nwhy it's so vulnerable and not a good\nmethod of Randomness and what some\ninsecure protocols will do is they'll\nuse a globally available variable and\nhash it so in your smart contracts\nthere's actually a number of globally\navailable variables one of those as we\nsaw above it's going to be message. Val\nright it's going to be the value that's\nsent with a transaction another globally\navailable variable is going to be\nmessage. sender you can actually see a\nwhole list of these different globally\navailable variables in the solidity\ndocumentation here so since there are\nall these globally available variables a\nlot of times someone will see something\nlike block. difficulty which Returns the\ncurrent block difficulty now one of\nthese globally a now one of these\nglobally available variables is going to\nbe block difficulty or block. difficulty\nit's the current block difficulty\nremember how I said the time between\ndifferent block generation it's called\nThe Block time well you can always keep\nthat block time as is by changing the\nblock difficulty over time the harder\nthe problem or the harder the proof of\nwork algorithm the longer it's going to\ntake or the more nodes you're going to\nneed to solve that problem there's this\nconstantly recalculating metric called\nethereum difficulty or block difficulty\ndepending on the chain that you're\nworking on that constantly changes so\nyou might think this would be a great\nuse of Randomness right because it's a\nsomewhat hardto predict number so what a\nlot of people do is they think that hey\nthose sound pretty random let's use them\nas a unit of Randomness and what you'll\nsee is you'll see like something like\nuint\nkak kak 256 which is again this hashing\nalgorithm do something like ABI encode\npacked\nNS message.\nsender lock.\ndifficulty block.\ntimestamp mod players.\nlength so I know there's a whole lot\ngoing into this line and and let's talk\nabout it so first as we can see is that\nwe're casting or we're converting\neverything in here to being a un 256 the\nreason that we're doing this of course\ncourse is because we're going to want to\npick a random winner based off of an\nindex right we're going to want to pick\nsomebody some random winner in our\nplayers array or our players list so we\nsay okay whatever number that we're\ngoing to use that's going to be the\nindex of the winner that we're going to\nrandomly pick then they use K 256 which\nis again our hashing algorithm so they\nHash a whole bunch of variables together\nand they do this ai. encod packed ABI is\nanother keyword for some lowlevel work\nadd they'll add maybe a nson they'll add\nthe message. sender block. difficulty\nand block. time stamp basically what\nthey're trying to do here is take a\nbunch of seemingly random numbers mash\nthem all together in a hashing function\nand then say yeah this this is pretty\nrandom but the issue here is that the\nhashing function itself isn't random the\nhashing function is always going to be\nexactly the same K check 256 it's always\ngoing to hash everything exactly the\nsame way so we're not actually making it\nmore random by hashing it all these\nnumbers inside are the pieces that\nactually determine how random it is so\nif block to difficulty is random then\nthis will be a random method if the\nblock. difficulty isn't random then this\nwon't be a random method and block.\ndifficulty is not random difficulty can\nactually be manipulated by the\nminers in Tim\nstamp time stamp is predictable nuns is\npredictable AKA transaction number\nbecause in this regard they're using the\nnuns as some transaction number and\nmessage.\nsender is\npredictable when using a random number\nin this way the hashing algorithm is\nalways going to be the same un 256 is\nalways going to be the same we have a\npredictable number predictable\naddress a predictable\ntimestamp and then a manipulatable value\nso all this is really doing is giving\nthe miners the ability to win the\nlottery or win whatever Lottery that\nyou're working on so this isn't going to\nbe an effective way to get a random\nnumber this is an unacceptable way to\nget a random number in our applications\nyes we do have this only owner modifier\nhere which means that we are the ones\nwho are going to choose when to call\nthis so it is still centralized in that\nregard but let's just teach you the best\npractices for working with random\nnumbers right from the get-go so you\ndon't run into any issues I'll explain\nwhat this part is doing in a little bit\nin order to get a true random number we\nare going to have to look outside the\nblockchain the blockchain itself like I\nsaid is a deterministic system so we\nneed a number outside the blockchain but\nwhat we can't do is we can't use just an\nAPI that gives a random number right if\nthat API becomes corrupted if they're\nmalicious if they go down if something\nhappens Etc what we need is a provable\nway to get a random number and chain\nlink vrf is actually that solution chain\nlink vrf is stands for chain link\nverifiably Randomness function and it's\na way to get a provably random number\ninto your smart contract it has an\nonchain contract that checks the\nresponse of a chain link node to make\nsure the number is truly random using\nsome cryptography magic it's able to\ncheck a number of the parameters that\nthe chain link vrf started and ended\nwith to make sure that it's truly random\nit's already used for protocols like\navag GOI ether cards pool together and a\nwhole bunch of other protocols as well\nbecause it is a secure reliable truly\nprovable way to get a random number\nwhich is incredibly powerful in a\ndecentralized system so that's how we're\nactually going to get our random number\nhere so let's work on getting that what\nwe can do is we can go ahead and head\nright over to the chain link\ndocumentation to actually learn how to\nwork with one of these let's go over to\nthe chain link documentation just to\nmake sure that we get it right so if we\ngo to the get a random number here we\nhave all the documentation you could\never want so if you ever get lost or\nconfused you can always come right back\nhere to work with it what we're going to\ndo is we're going to deploy the their\nsimple version in remix version of\nworking with the Chain Lake VF and we're\ngoing to walk through a minimalistic\ncontract to see how it actually works in\na contract so once again we're hit this\nremix button remix pops up and we\nimmediately get this random number\nconsumer. soul in our files that we can\ncheck out so awesome so here is our\nfiles right here we can see that this is\nactually using a different chain than\nwhat we've been using we've been mostly\nworking with rink be\nbut for this demo it's actually on koven\nso we can do some work with koven here\nand remember if you do want to stay with\nrink B you can always go to this\ncontract addresses section of the\nvrf and grab these addresses to use so\nwhat's going on in this contract how do\nwe actually use this well as you can see\nthe first thing that happens is we're\nimporting some code from the chain link\npackage and our contract is inheriting\nthe abilities of this vrf consumer based\ncontract so we're going to see what\nfunctions we're actually going to use\nthat are inherited from this contract\nand the first thing that we notice is we\ncan see that our Constructor in here\ndoes some weird stuff it looks like it\nalmost has two Constructors so what's\nactually going on here well let's look\nat this vrf consumer based. contract in\nthe chain link\nGitHub so we can come to the chain link\nGitHub here we'll go to evm contracts or\ndepending on when you're watching in\nthis it's migrating to contracts at some\npoint we go to evm contracts we'll go to\nSRC so we're using v0.6 we'll go there\nand we'll look at this vrf consumer\nbase. Soul as we can see this vrf\nconsumer base that we're importing has\nits own Constructor and it takes an\naddress for the vrf coordinator this is\nthe onchain contract that actually\nchecks to make sure our numbers are\nrandom and the address of the chain link\ntoken which we'll talk about ER c20s in\na little bit what we're doing is we're\nalso inheriting The Constructor into our\ncontract so this is our Constructor for\nour random number Consumer but we can\nalso use the Constructor of the vrf\nconsumer base and this is actually how\nwe go ahead and do that we grab the\nConstructor of the vrf consumer base and\nplop it in\nhere now it's taking two addresses it's\ntaking the vrf coordinator and the link\ntoken like I said the vrf coordinator is\na contract that's been deployed on chain\nthat's going to verify that the return\nof the chain link node is truly random\nand we're going to use the link token as\na payment to the chain link node for its\nservices and then we also have a keyh\nand a fee defined inside of this\nConstructor as well keyh uniquely\nidentifies the chain link node that\nwe're going to use and then the fee is\nhow much link we're actually going to\npay to the chain link node for\ndelivering us this random number now\nlet's talk about a couple things here in\nethereum whenever you make a transaction\nyou have to pay some eth Gap\nright or transaction\ngas this is to pay the smart contract\nplatform a little bit of eth for\nperforming our transaction with a smart\ncontract with a smart contract that\noperates with an oracle we have to pay\nsome link gas or Oracle gas this is to\npay the oracles a fee for their services\nfor providing data or doing some type of\nexternal computation for smart contract\nthe question that might then follow up\nis oh okay well how come I didn't have\nto pay when we did this price feeds\nthing well for Price feeds somebody had\nactually already paid for the data to be\nreturned and if we go to data. chain.\nlink and we scroll down we can actually\nsee a list of sponsors here that are\npaying to get this data delivered so\nthey're already paying the Oracle gas to\nbring this data on chain for us since no\nother protocol is getting a random\nnumber for us we're actually going to\nhave to pay the Oracle gas here now in\nthis contract we have a function called\nget random number which is going to\nreturn a byes\n32 and what it's going to do it's going\nto call this request Randomness function\nwhich is inherited from this vrf\nconsumer base if we look in here we look\nfor\nrequest request Randomness we can see\nthere's a function right here called\nrequest Randomness this function is\ngoing to send our Oracle fee or the link\ntoken and it's going to call this\nspecific to the link token function\ncalled transfer and call this function\nis going to call a chain link node now\nI'm not going to talk now I'm not going\nto go into exactly how it's doing that\nright now but we will talk about it in a\nlittle bit so we call this request\nRandomness function and we send the keyh\nin the fee remember the keyh uniquely\nidentifies the chain link node and the\nfee is going to be how much Oracle gas\nwe're going to pay if you ever get lost\non how much to pay or what the contract\naddresses are you can always head over\nto this VR contract section and see\nwhere the most recently deployed VFS are\nhow much the fee is ETC now here's where\nit gets a little bit\ninteresting getting a random number\nactually follows What's called the\nrequest and receive style of working\nwith data let's go ahead and just try\nthis out and I'll explain what this\nmeans once we see it now we're going to\nsave the answer to this random result\nvariable here and let's just go ahead\nand try this and see what happens so\nwe're going to switch to our injected we\nthree since we're now swapping to a new\ntest Network this means that we have to\nget test net eth and test net link\nagain you can always look for the link\ntoken contracts page to find the most\nupto-date faucets so scroll down we'll\nfind coven look like this is the test at\nlink faucet and the test e faucet so\nhere's our coven faucet we'll just want\nto switch from rinky to\nkoven grab our address paste it in send\nme1 test\nlink here's our transaction we can see\nwe're\ntransferring some\nerc20 we'll take this contract address\nwe'll add it to our metamask by copying\nthe address scrolling down to add token\npacing it in here I already have the\naddress in here so I'm just going to hit\ncancel for now and we'll also want some\ntestut Coen ethereum which looks like\nthis faet has it so we'll paste the\naddress in here not a robot and we'll do\nsend me 0.1 test e and perfect now that\nwe have some test on ethereum and some\ntest on link we can proceed we're going\nto make sure we're on the coven test\nNetwork and we're going to deploy our\nrandom number Consumer gist here let's\ngo ahead and hit deploy metam Mass pops\nup we're going to go ahead and confirm I\ndidn't explain this fulfill Randomness\nfunction intentionally you'll see why in\na second and great\na random number Consumer comes up let's\ncheck what our random result is right\nnow it's obviously zero because we\nhaven't got a random number so I'm going\nto do something intentionally wrong\nbecause there's a good chance that\nyou'll run into this at some point if I\nhit get random number right now we see\nthis air gas estimation failed we have\nplenty of eth why would this fail the\nreason that it's failing is because the\ncontract doesn't have any Oracle gas so\nwe got that gas estimation failed\nbecause we need to fund this contract\naddress with some link to actually get a\nrandom number so we're going to hit this\ncopy button and this is going to copy\nthe address and we're going to come into\nour metamask here and we're going to\nsend this address we're going to paste\nit there swap to link and we'll send it\none link this is probably\nOverkill because as you saw the fee is\nonly 0.1 but we're just going to be\noverkill for\nnow and great now that this contract has\nsome test net link now we can call this\nget random number button because we can\nactually pay the chain link node to\nactually return our random number so\nwe're going to go ahead and do confirm\nand this is fantastic so we're paying a\nlittle bit of transaction gas to make\nthis transaction to make this request\nand then we're paying a little bit of\nOracle gas to make this transaction now\nso the\ntrans now so the transaction confirmed\nbut if I hit random result now it's\nstill going to be zero so why is that\nwhat's going on well getting a random\nnumber like this actually follows what's\nknown as the request and receive cycle\nof getting data you can read more about\nit here in this basic request model in\nthe documentation so in one transaction\nwe actually request some data or in this\ncase a random number and then in a\nsecond transaction The Chain Lake node\nitself will make a function call and\nreturn the data back to the smart\ncontract in this case the function that\nwe're calling is fulfill Randomness it\ncalls this fulfill Randomness with byes\n32 request ID which is going to be the\nrequest number of when we called this\nand it's going to return with this\nrandom number called Randomness so after\nwe wait a little bit if we hit random\nresult now we can see indeed our random\nnumber is in here and again the reason\nthat it's in here is because we actually\nhad two transaction occur one paid by us\nwhen we called get random number and one\npaid by the chain link node when it\ncalled fulfill Randomness now I lied to\nyou a little bit technically that vrf\ncoordinator contract calls this function\nand then the chain link node calls the\nvrf coordinator function but for\nSimplicity sake you can kind of just\nthink of it as the chain link node\nitself is calling this fulfill\nRandomness function so now that we know\nhow to do this in remix let's go ahead\nand add this to our brownie project so\nactually before we even do that we need\nto require so before we even get a\nrandom number let's change the state of\nour lottery so now we'll do Lottery\nState\nequals Lottery\nstate. calculating\nand while this is happening no other\nfunctions can be called right this will\nlock out nobody can start a lottery and\nnobody can enter a lottery while we're\ncalculating the winner awesome so now\nthat we know a little bit more about\nrandom numbers and everything that we're\ndoing here let's go ahead and try\nimplementing this now so in our chain\nlink smart contract dogs of course we're\ngoing to scroll down we're going to go\nto our get a random number bit here we\ncan copy and paste all this code as well\ninto our smart contracts so the first\nthing that we're going to need to do do\nof course is import the brf consumer\nbase code let's move back over scroll to\nthe top and we'll just paste this in\nchainlink contracts slsrc V 0.6 vrf\nconsumer base and We'll Inherit this\ninto our Lottery contract so we'll say\nLottery is vrf consumer\nbase and it's ownable let's take a look\nat this vrf consumer base in the chain\nlink GitHub here if we scroll down\nto the Constructor of our vrf consumer\nbase we can see it takes these two\nparameters the address of the vrf\ncoordinator and the address of the chain\nlink token we can use a Constructor we\ncan use a Constructor of a contract\ninherited in our contract inside our\nConstructor so what we'll want to do is\nwe want to come down to our Constructor\nand right after this public keyword we\ncan add any additional Constructors from\ninherited smart contracts\nso we'll say Constructor and this is our\nnormal Constructor and then we'll put\nthe RF consumer\nbase and we'll add the vrf consumer base\naddresses in here we know that it's\ngoing to be a vrf coordinator address\nand a link token address similar to the\nprice feed these two addresses are going\nto change based on the blockchain that\nwe're on so it'll probably make sense\nfor us to parameter tize them the same\nway we parameterz the price feed address\nso in our top\nlevel Constructor parameters we'll add\nan address for the\nvrf\ncoordinator and we'll pass this to the\nConstructor of our vrf consumer base\nthen we'll also grab an address for the\nlink token so we'll do\naddress link and we'll pass this the vrf\nconsumer based Constructor as well great\nwhat else do we need to make this work\nwell back in the documentation we can\nsee we need a fee and a key has the fee\nis associated with the link token needed\nto pay for this\nrequest so we'll make a public variable\nuint 256 public fee since this might\nchange blockchain to blockchain we'll\nhave this as an input parameter as well\nso we do un 256 undor fee and in our\nConstructor\ndo\nFe equals underscore Fe set our Global\nvariable to fee I need a Comm here no\nwhat else do we need well we need a key\nhas the key has is a way to uniquely\nidentify the chain link VF\nnode so create another one do bytes 32\npublic\nkeyh We'll add this as a parameter in\nhere\nhere byes 32\nkeyh then we'll say keyh equals undor\nkeyh perfect our contract is coming\nalong right here now that we have the\nmain pieces that we need how do we then\nrequest this random number well if we\nscroll down in the\ndocumentation we can see we have this\nrequest Randomness function that we need\nto call if we scroll back to our vrf\nconsumer based contract this request\nRandomness function is a built-in\nfunction from the vrf consumer base so\nour contract can natively call this\nrequest Randomness function right in our\ncontract and you can see it takes a key\nhas and a fee as its\nparameters so right in our end Lottery\nfunction we can add this function and we\ncan see this also returns a bytes 32\ncalled request ID this return syntax is\npretty powerful you can actually\nidentify the name of the variable you\nwant to return right in your right in\nyour function declaration so by saying\nbyes 32 requested we're saying we're\ngoing to return a byes 32 variable named\nrequest ID so right in our function here\nwe can do request\nRandomness because again that's this\nfunction that we're importing passing it\nthe keyh and the fee this will return a\nbytes 32 called request ID so this is\nactually doing this and having our\nfunction having our function declaration\ntell us that there's going to be a\nvariable name request ID is going to be\nexactly the same as if we did bytes\n32 request ID equals request Randomness\nnow this function call follows again\nwhat we've talked about as the request\nand receive mentality the request and\nreceive architecture this means that in\nthis first transaction we're going to\nrequest the data from the chain link\nOracle in a second callback transaction\nthe chain link node is going to return\nthe data to this contract into another\nfunction called fulfill Randomness so\nagain if we look back in our vrf\nconsumer base we can see it has this\nfunction raw fulfill Randomness we can\nread some of the comments in here saying\nraw fulfill Randomness is called by a\nvrf coordinator when it receives a valid\nvrf proof raw fulfill Randomness will\nthen call fulfill Randomness so there's\na little bit of contract tag going on\nbut it's going to eventually call this\nfulfill Randomness function which is\ngoing to be what we Define in here and\nthat's how our contract is going to know\nwhat to do once it gets the random\nnumber back so in our first transaction\nwe're going to end the lottery request a\nrandom number and then in a second\ntransaction later on once the chain link\nnode has created a provably random\nnumber it's going to call a second\ntransaction itself based off of what we\nDefine we just have have to call it\nfulfill\nRandomness and as you can see takes a by\n32 request ID and a random number so in\nhere we'll do fulfill Randomness takes a\nby\n32 quest ID and then a u\n256\nRandomness we don't want anyone else to\nbe able to call this function we only\nwant our chain link node to call this\nfunction so we can return a truly random\nnumber so we're going to make this an\ninternal function\nit's internal because actually the chain\nlink node is calling the vrf coordinator\nand then the VF coordinator is calling\nour fulfill Randomness so we'll make\nthis internal so that only the vrf\ncoordinator can be the one to call and\nreturn this function then we're going to\ngive it a keyword of override this\noverride keyword means that we're\noverriding the original Declaration of\nthe fulfill Randomness function our vrf\nconsumer base has a function fulfill\nRandomness defined but it doesn't have\nany parameters or anything about this\nfunction actually laid out this function\nis meant to be overridden by us and\nthat's exactly what we're doing right\nhere so in this fulfill Randomness\nfunction let's go ahead and Define\nwhat's going to happen once we get this\nrandom number back so before we can\nprocess this random number let's just\ncheck to make sure we're even in the\nright state so we'll do\nrequire our Lottery state is going to be\nequal to Lottery state do\ncalculating\nwinner and if we're not in that state\nwe'll just say\nyou aren't there\nyet my auto format is is on for this one\nso it's a it's jumping in then let's\njust do another check to make sure we\nactually get a response so we'll do\nrequire underscore\nRandomness is greater than\nzero and if it's not we'll say\nrandom not\nfound now we need to pick a random\nwinner well we need to pick a random\nwinner specifically out of our list of\nplayers our list of payable public\nplayers so our players array is just a\nlist of players so it's like one player\none player two player three player four\nand they're each at a different index\nwhat we can do then to pick a random\nwinner is to do a called a modulo\nfunction in fact let's even open remix\nto do an example of this remix let's pop\nopen a new contract call it mod. Soul do\npragma solidity carat\n0.6.0 do\ncontract\nmod and in here we'll do a\nConstructor bline Constructor and we'll\nget a global variable went 256 six\nnumber and we'll set it equal to five\nwe'll go down to\n0.6.0 save\ncompile and you let's even just get rid\nof the\nConstructor let's now create a function\ncalled dood take a un\n256 mod value it's a public\nfunction public view returns\n256 and we'll just\nreturn five\nmodulo mod\nvalue now let's go to JavaScript VM\nwe'll deploy\nthis we'll go in here so our number is\nright now five and let's learn about how\nthe modulo works if we have this dood\nfunction what we're\ndoing is module\ndivides by the number and returns\nReturns the\nremainder for example if we did five mod\n5 what do you think we're going to get\nso we're going to do five divided by\nfive and then return the remainder well\nfive divided five is one and there's no\nremainder there's no decimal there so\nfive Mod Five should be what zero\nexactly well what's five mod four then\nwell four can go into five evenly once\nbut there's one number left over so five\nmod four is going to be\none five mod 3 is going to be two five\nmod one is going to be zero right since\none goes with everything this is how the\nmod function works it's this little\npercent here we can use that mod\nfunction in our fulfill Randomness with\nthe length of our players so we can say\nU\n256 index of\nwinner it's going to be equal to the\nrandom number that we\ngot modded\nby the players. length so let's say for\nexample we had seven players sign up and\nour random number is 22 well we want to\nget one of these random seven players so\nwe would do\n22 mod 7 7 divides evenly into 22 three\ntimes with one left over 7 * 3 equals\n21 difference between 21 and 22 is 1 7 *\n4 is 28 so we know this is how we know\nwe've reached our upper limit so this is\nhow we can get a random number based off\nof the index now that we have this index\nwhat we can do is we can say the winner\nequals\nplayers of the index of\nwinner and just to keep track let's make\na new variable called recent winner at\nthe\ntop we'll do\naddress public recent\nwinner we'll grab this recent winner\ninstead of winner we'll say recent\nwinner equals players and this index of\nwinner here now that we've got a winner\nwallet we want to pay them all the money\ngathered from our enters here so what we\ncan do is we'll do this recent\nwinner. transfer\nthe entire balance of this address so\nwe'll say address of\nthis\nbalance and perfect we'll transfer them\neverything that we\nhave then of course we're going to want\nto reset the lottery so that we can\nstart from scratch we can start blank\nagain so we'll do\nplayers equals new address\npayable array size\nzero so we're just resetting players to\njust be brand new array then we're going\nto change our Lottery\nstate two being Lottery state. closed\nbecause the lottery is now complete and\nI often also like to keep track of the\nmost recent random number so at the\ntop I'll do a u 256\npublic Randomness\nvariable and in our fill Randomness I'll\nsay Randomness now equals underscore\nRandomness and perfect we now have a\ncontract here of course we haven't\nactually tried it out but we're assuming\nthat it works great so you know what\nthis means it's time to go into testing\nmode testing and development mode but\nlet's even just try to do a\nbrownie compile first looks like we have\nan issue here send and transfer are only\navailable for objects of type address\npayable not\naddresss looks like we made our recent\nwinner just an address but it needs to\nbe an address\npayable so let's try Brown and compile\nagain and beautiful we at least know\nit's compiling so that's a great sign\nlet's now move into our testing and\ndevelopment phase as you are starting to\nfigure out we can ignore these file\nimport callback not supported bugs and\nBs code for now I'm sure the solidity\nlinter will get better as time\nprogresses but great so now let's go\nahead and move into actually testing and\nworking with everything here so let's go\nahead into our scripts and we'll make a\nlittle deploy script\nfirst let's do a new\nfile call it deploy Lottery that pi and\nlet's go ahead and deploy our lottery so\nsame as always we'll do def\nmain we'll come with a new function\ncalled\nPloy\nLottery and then we'll do def\ndeploy\nLottery then we'll just have a pass R\nnow and if we run this brownie run\nscripts deploy lottery.\npiy our default network is not defined\nwhich means the default is going to be\ndevelopment we can even be verose here\ndevelopment write that in our brownie\nconfig\nrun this ganach will get spun\nup and nothing will happen because our\ndeploy Lottery function doesn't do\nanything right now awesome first thing\nwe need always to deploy a contract is\nwe need an account so we'll do account\nequals and we've been using this get\naccount function for some time that\nwe've been adding in a helpful script\nsection so that it can pull from a real\ntest net or from a local development\nenvironment if we like so to do this of\ncourse let's create our new\nhelpful\nscripts.\nPi create our uncore\ninit.py so that python recognizes it as\na package and in here we'll create a new\nfunction f get\ncount now we'll just have it pass we'll\ncopy\nthis into our deploy Lottery we'll do\nfrom scripts. helpful Scripts import get\naccount now\nthis now this is what our get account\nlooked like in our last\nproject along with that we had these\nFork local\nenvironments we also head from brownie\nimport accounts and network and\nconfig to make this look really nice\nright let's flesh this out just a little\nbit more so it's even more robust right\nnow as we know\nwe have a way to use browny's ganach\naccounts and we have a way to\nuse our environment\nvariables however there was a third\nmethod that we learned that isn't\nidentified here accounts. load and this\nis with our ID if you still have your\naccount and you still have all your\nbrownie set up if we do brownie counts\nlist you'll see we have a couple\naccounts here\nwe want our get account to be even more\nliberal so that if we wanted to use one\nof these as well we could so let's\nmodify our get account script here a\nlittle bit let's first get rid of this\nelse and rid of this indent what this\nwill do is this will be our default if\nnothing that we Define prior to this is\ndefined we'll just default to grab right\nfrom our config which since we are doing\nthat let's create our EnV we'll paste\nour different variables in here our\nprivate key web 3 INF fura need to scan\ntoken and in our brownie config of\ncourse do\nwallets from\nKey private key and now let's flesh this\nout a little bit let's add an\nindex and an\nID index equals\nnone and\nidals this way if we pass an index to\nour get account function we'll just use\nuse an index from this accounts variable\nif we pass an ID we'll have trying to do\nthis accounts. load here so now let's\nchange this up a little bit we'll say if\nan index was passed we just return\naccounts on that\nindex otherwise if we're doing a local\nblockchain we'll just return accounts to\nzero but if there's an\nID or return\naccounts. load\nID whoops we need to actually move this\nup a little\nbit so that it's before our local\nblockchain checking so now in our deploy\nLottery we could do something like get\naccount ID equals free code\nCamp oops and this is actually freecode\naccount fre code Camp account let's try\none more time it's going to ask for our\npassword here now we have a much more\nliberal get account\nfunction so now that we have a count we\ncan actually deploy our lottery so we'll\nsay Lottery equals lottery.\ndeploy this is where we're going to\nimport from brownie import our contract\nLottery and we're going to have to add\nin all these different variables so if\nwe go back over to our Lottery contract\nwe need give it a price feed address a\nvrf\ncoordinator chain link token a fee and a\nkeyh now the way we did that in fundme\nis that we did it in a way where we\nchecked to see if we were on a local\nchain or not if we weren't on a local\nchain then we would just pull our\naddresses directly from our config if we\nweren't on a local chain though we'd\ndeploy some mocks and use the address of\nthose mocks we're going to want to do\nthe same thing here but let's make our\nlives a little bit easier we can take\nthis whole process and put it into its\nown function so let's make this a little\nbit easier mentally the first thing that\nwe're going to need is this price feed\naddress if we're on a real test net of\ncourse we would just go into our brownie\nconfig and add the address which we will\ndo we'll add our rink\nB Network here in a little bit but for\nnow don't worry about\nthat but if we're not on a rink be chain\nwhat we're going to need to do is deploy\nour mock we're going to wrap all of this\nmocking and and checking into a single\nfunction called get\ncontract and we're going to add this\nfunction in our helpful\nscripts so let's create this function\ncalled get Contract do def get\nContract\npass let's talk a little bit about what\nwe want this function to do let's add\none two\nthree three double quotes here and three\ndouble quotes here to start what's\ncalled a doc string this will Define\neverything about this contract so we're\njust going to say this\nfunction\nwill grab the contract\naddresses from the brownie\nconfig if\ndefined\notherwise it will deploy a mock\nversion of that\ncontract and return that mock contract\nfor the arguments of this chain we're\ngoing to take a contract\nname this is going to be a string and\nit'll\nreturn a contract or in particular it's\ngoing to return a brownie. network.\ncontract.\nproject contract the most recently\ndeployed version of this\ncontract so for example if we have a\nmock V3 aggregator\ncontract it'll do the most recently\ndeployed version of that this minus one\nsyntax now this get Contract function if\nthis is a little confusing to you again\nwe're going to go over this chain link\nmix in a little bit and inside of this\nit has a more\nrobust description of what's going on in\nthis get Contract bit so you can check\nthat out if you want to learn more but\nlet's go ahead and actually Define this\nso we obviously want a contract name as\nan input parameter so let's go ahead and\nadd contract name in here meaning that\nthis get Contract function will get\nsomething like\nFUSD price feed right that's going to be\nthe same as what's defined in our\nBrowning config and from this name we're\ngoing to get the type of contract that\nit is contract type to do that we're\ngoing to have to create some mapping\nthat'll map the contract names to their\ntype so right above we're going to do\ncontract to mock\nand we're going to create a mapping in\nhere which will map everything out so an\nFUSD price feed is going to be of type\nMach V3\naggregator so we have to import Mach V3\naggregator from browny so now we're\nsaying anytime you see FUSD price feed\nyou know that that's going to be a Mach\nV3 aggregator if we need to deploy a mo\nso we'll say contract type is going to\nequal contract to\nmock of the contract\nname now we need to check okay do we\nactually even need to deploy a mock so\nsure let's check if we're on a local\nblockchain so we'll say if network. show\nactive is\nin our local blockchain\nenvironments and we'll skip the fork\nlocal environments because again we\ndon't need to deploy a mock price feed\naddress on a fourth local environment\nwhich say if network. show active is in\nthe local blockchain\nenvironments then we'll check to see if\none of these contracts has already been\ndeployed say if the\nlength contract\ntype it's less than or equal to zero\nthen we're going to go ahead and deploy\nMOX so this is equivalent to\ndoing something like mock\nB3\naggregator length we're checking how\nmany mock V3 aggregators have actually\nbeen deployed if none have been deployed\nwe're going to go ahead and deploy them\nso we're going to have to create this\ndeploy MOX function so we'll do def\ndeploy Mox and this is going to be the\nsame as what we\ndid in our brownie fundme right it's\ngoing to be the exact same so we'll say\ncount equals get a count\nI'm not going to put the prints in here\nbut you absolutely can say mock price\nfeed equals mock B3\n[Music]\naggregator\ndeploy we'll need to give this some\ndecimals and an initial value so right\nabove we'll do\ndecimals equals 8\ninitial value equals\n2,000 2000 2 four five six seven\neight and then our deploy Marx we'll say\ndecimals equals\ndecimals initial value equals initial\nvalue deploy decimals\nand initial value of course it's going\nto be from count and for now that's it\nsay print deployed\nall right great so now we have a way to\nactually deploy the mock price feed here\nso let's go back up to our get Contract\nfunction so we have a way to deploy the\nmock if one already isn't deployed now\nwhat we're going to want to do is we're\nwant to get that contract right we're\ngoing to want to get that mock so we'll\nsay contract equals contract type minus\none right so this is going to be equal\nto doing mock V3 a\nGregor minus one this is saying hey\nlet's grab the most recent deployment of\nthe mock V3 aggregator which is exactly\nwhat we want perfect so this will work\nperfectly for our development context\nhowever we're not always going to just\nwant to deploy to a development Network\nwe're also going to want to deploy to\ntest Nets so then we'll say else and\nthis is where we'll just grab that\ncontract from the rning config for\nexample at us price feed so we'll say\ncontract address equals\nconfig\nnetworks network. show\nactive and that contract\nname for example again if it's ethusd\npriz feed it'll be ethusd priz feed here\nand the way we're setting it up it's got\nto be the same as what's in our contract\nto mock dictionary here so up here the\nway that we did it was we actually got\nthe contract because we had its contract\ntype based off of brownie for here we're\ngoing to have to interact with the\ncontract getting those two pieces that\nwe always need which are going to be the\naddress we actually have the ABI from\nour Mach V3 aggregator type right here\nand we just got the address so we can\ncreate this new contract type by saying\ncontract equals\ncontract. from ABI and this contract\npackage can be imported right from\nBrownie and and has this function from\nABI that allows us to get a contract\nfrom its ABI and its address so we'll\njust give it a name say contract typeor\nname you do the contract\naddress and\nthen contract type.\nAI so these mock V3 aggregators and all\nthese contracts have\naavi attribute that Returns the AI they\nalso have aore name which returns their\nname so this is perfect this is how\nwe'll get the contract otherwise and\nthen at the end of all this we'll just\ndo\nreturn contract awesome so this is an\nincredibly powerful function for us to\nget a contract based off of if it's\nalready deployed as a mock or it's a\nreal true contract I know there's kind\nof a lot here but definitely check the\nGitHub repository if you're a little bit\nconfused on what's going on with this\nfunction and let's and let's also just\ndeploy this to make our lter happy why\nnot yays code's happy now but now that\nwe have this function let's go back to\nour deploy Lottery now we can do a comma\nget account now we have a get account\nfunction so let's go through this again\nthis lottery. deploy get account is\ngoing to get an FUSD price feed if we\ndon't have a mock deployed it's going to\ndeploy a mock price feed for us and\nwe're going to return that mock price\nfeed however if we're on a test net if\nwe're on a real Network we're going to\ngrab its actual address and return mock\ncontract of it our mock contract here\nhas all the same functions of a regular\ncontract so we can just use it as the\nsame this way we don't have to adjust\nthis function for whether or not we're\ndeploying to a test net or to an actual\naddress the only additional piece we\nshould put in here just for clarity so\nwe should add address here because this\nis going to return the actual contract\nand we really only want the address this\nis going to make our coding a lot more\nrobust for moving between development\nenvironments and test environments and\nworking with scripts in a really\neffective manner so now that we have\nthis incredibly powerful function let's\ngo back to the lottery and figure out\nwhat are the different pieces we need in\nhere okay great we also need a vrf\ncoordinator so to do this we're going to\ngo back to our docs. chain. link we'll\ngo to contract addresses and we could do\nmain net here but let's also just set\nthis up to work with rink B so we do\ncrlf for rink B vrf coordinator is going\nto be this address right here so we'll\ncopy it we'll go back and we're going to\nhave to do in our config is we're going\nto have to add a new network here for\nrank B do vrf\ncoordinator will be that address right\nthere and then while we're doing this\nlet's also get the rink B address for\nour price feed so price feeds rink be\nscroll down for\nFUSD FUSD here we go grab that enter\nthis will be FUSD price\nfeed paste that in here perfect so now\nwe can do get Contract vrf coordinator.\naddress of course we are going to have\nto go back to our helpful scripts\nbecause there's currently no mapping\nbetween what a vrf coordinator is and\nwhat its mock needs to be so we'll add a\ncomma\nhere and we'll do VF\ncoordinator and we need to get a mock VF\ncoordinator well first of all we don't\neven have our mock V3 aggregator so\nlet's go grab that as well so we can\ngrab both of these again I'm going to\nhighly recommend going to the chain link\nmix going into the contracts here going\nto the test folder for these different\nmocks because these are already set up\nto work with the chain link mix however\nyou can definitely go into the chain\nlink help as well go to contracts SRC\n0.6\ntests and then look for the different\nmocks in here so mock Oracle VF\ncoordinator mock Etc so we're just going\nto I'm just going to grab it though from\nthis chain link mix so let's go to vrf\ncoordinator Mock and I'm just going to\ngrab this whole thing here so do\ncontracts folder\ntest file VF\nfor for\nmock\nSoul paste it in\nhere and then while we're in here we'll\nwant to do a new file mock D3\naor\ns we'll grab this as\nwell from our train\nmix again it's got all the functions of\na price feed update\nanswer latest round Etc VF coordinator\nwalk has different functions for\nactually working with the VF coordinator\none of the specific ones in particular\nis this call back with Randomness that\nwe're going to use in our tests so our\nvrf coordinator is going to get mapped\nto our vrf for theor\nmock which will also import this from\nbring great and just to double check\neverything's working we'll want to run\nover just a quick bring compile\nmake sure we are importing our mocks\ncorrectly and everything's compiling so\nit looks like we're good there all right\nso now we\nhave get Contract Bure of coordinator.\naddress perfect what else do we need in\nhere we need a link token the chain link\ntoken is of course just another smart\ncontract so we're going to do the exact\nsame thing here get\nContract link\ntoken. address\nof course this\nmeans in our\nconfig for rink B let's add a link token\naddress we'll go to the chain link\ndocumentation go to link token\ncontracts we'll look for rink\nB we'll grab this\naddress we'll drop it in here perfect\nnow we have it in our brownie config\nwe'll also need to add it to\nour helpful\nscripts so we'll\nneed a mock link token which again we\ncan just go ahead and\ngrab from our chain link mix here we go\nto test and as you can probably see what\nI often normally do is literally just\ncopy this entire test folder project to\nproject so I'm going to copy this whole\nthing create a new file we're just going\nto call this\none link token.\nSoul contract link token perfect and\nthen in our helpful scripts we're going\nto have this be link\ntoken and of course we're going to\nimport this from\nBR great get Contract link token.\naddress perfect what else do we need we\nneed a fee and a keyh so the fee and the\nkeyh are both just numbers right these\nare aren't actually contracts so we\ndon't need to put this through that get\nContract bit what we can do is just in\nour\nconfig in our development Network we can\njust add a default for the key has and\nfor the\nfee I'm just going to set my development\nkeyh and fee equal to the rinky ones so\nto grab\nthose we go to the chain link dogs once\nagain we'll scroll down to using\nRandomness contract\naddresses we look up rink\nB grab the key hash\nhere which we'll paste in for\nboth our\ndevelopment and rink\nB and then the fee it says 0.1 link so\nwe'll just do that in way here which\nwill be one 1 2 3 4 5 six seven 8 nine\n10 1 2 3 four five six\nseven we'll do this line for ring v as\nwell now in our deploy Lottery we can\njust grab this directly from our\nBrowning config because we're always\njust going to have this default keyh and\nthis default fee here for our\ndevelopment Network so we'll do\nconfig\nnetworks network. show active\nwhich ones first the\nfee\nfee of course this means we're gonna\nhave to grab network from\nBrownie and also\nconfig then we'll do\nconfig\nnetworks network. show active\nand then of course our last bit\nhere\nfrom\naccount and then additionally as we\nlearned last time if we want to publish\nthis do publish\nSource equals\nconfig\nnetworks network. show active\nsay\ndoget\nverify and then we'll add this false bit\nhere what this is saying is get that\nverify key but if there's no verify key\nthere just default to false this way if\nwe don't set a verify key in development\nthat's fine it just won't get to verify\nthe rink B let's go ahead and said\nverify true so we can actually verify\nthis on the rink B chain and then we'll\neven do a print statement\nhere floyed\nLottery all right lovely let's try this\nout we'll do brownie run\nscripts deploy lottery. we won't set a\nnetwork flag so it'll go to the default\ndevelopment Network let's try this\nout things are compiling ganach is\nspinning up it looks like we did run\ninto a little issue here with our our\nget Contract function ah of course we\nforgot to add deploying these mocks in\nour deploy mock script whoops let's go\nahead and add that as well right now our\ndeploy mocks only deploys the mock V3\naggregator so let's add the rest of our\nmocks in\nhere we're going to need to deploy a vrf\ncoordinator Mock and a chain link token\nmodel so let's open up those contracts\nsee what they need the link token for a\nConstructor doesn't have a Constructor\nso we can just have it be blank so we'll\ndo link\ntoken.\ndeploy and all we need is a\nfrom account\nhere and then let's see what that vrf\ncoordinator mock takes VF coordinator\nmock it takes the link token as an\naddress\nperfect so then when we deploy the link\ntoken here we'll say link token equals\nlink token. deploy and then we'll do\nVF for dor\nmock deploy\ndeoy and then we'll use the link token.\naddress it's an input parameter and then\nof course\nfrom count all right so now we're\ndeploying all three of those mocks right\naway let's try this again Ry run scripts\ndeploy lottery.\npy gach SP up perfect so we can see here\nthat our mock V3 aggregator was deployed\nthen our mock link token was deployed\nthen our mock vrf coordinator was\ndeployed and then our Lottery was\ndeployed with those mocks to finded and\nwe deployed the lottery awesome now we\ncould\n100% go ahead and then run this script\non an actual test right because our\nconfig is set up well let's write some\nmore functionality for actually\ninteracting with this Lottery before we\nactually do that and then we can\nactually just run a script which will do\nall this functionality end to end\nbecause again deploying to a test net\ntakes a long time and we really only\nwant to do that when we're done and\nwe're fairly confident that everything's\nworking well let's even just delete this\nhere so now what's the next thing that\nwe'd want to do here what's the next\nthing we want to do in a script here\nwell we' probably want to go ahead and\nstart the lot so let's write a script\nthat can actually do that do\ndef start Lottery\nand in here we get our account let's get\naccount we say the lottery is going to\nbe the most recent deployment of the\nlottery and we're going to call this\nstart Lottery function here this is\nindeed Changing State so we do have to\nmake a transaction do Lottery let's\nstart\nLottery say\nfrom count\nthen we'll do a little print and just\nsay Lottery is\nstarted and then in our main function\ndown here we can even call this start\nLottery\nfunction so if we run this again on our\ndevelopment\nchain we'll see if everything works\nsmoothly here okay we did run into an\nissue and this is something that you'll\nsee from time to time typically the\nworkaround is you want to wait for that\nlast transaction to actually go through\nso we'll say starting transaction equals\nlottery. start Lottery will do starting\ntransaction. wait one browny sometimes\ngets a little confused if you don't wait\nfor the last transaction to go through\nso let's try it again and perfect we do\nget this working uh as intended so that\nis a really helpful helpful tip if you\nrun into those weird issues you'll\nnotice that even when we didn't have\nthis it's still completed successfully\nuh it just got a little confused at the\nend all right cool so what do we want to\ndo next well we probably want to enter\nthe lottery let's do Dev\nenter lottery so how do we enter the\nlottery say account equals get\naccount Lottery is going to be\nLottery minus one we need to pick some\nvalue to send when we call the enter\nfunction right because we need to send\nthat entrance fee with it so we'll say\nvalue equals lottery. getet entrance fee\nand just to be safe I usually will tack\non a little bit of whey as well because\nsometimes it might be off by like one or\ntwo or something like that so we'll do\nlottery. get entrance fee plus you know\nmaybe something like this which is like\nbarely anything then we'll do\ntransaction equals lottery. enter do\nfrom\naccount send a value which will be\nvalume\nwe'll do tx. weight and then we'll do\nprint you entered the\nlottery and we'll do this enter Lottery\nbit down here too enter\nLottery we'll run this see if our enter\nscript is working\nappropriately you entered the lottery\nlooks great and let's do our last\nfunction here we'll do def end Lottery\ncount equals get\naccount Lottery equals Lottery minus one\nwe'll make a transaction which will be\nlottery. end\nLottery now before we actually end this\nLottery we're going to need some link\ntoken in this\ncontract remember our end Lottery\nfunction calls this request Randomness\nfunction and we can only request some\nRandomness if our contract has some\nchain link token associated with it so\nwe're going to need to First fund the\ncontract and then end the lottery since\nfunding our contracts with the link\ntoken is going to be a pretty common\nfunction that we use let's go ahead and\nturn this also into a helpful script so\nlet's go to our helpful scripts we'll\nmake a new function called fund with\nlink and let's have this take a couple\nof parameters so first we want to have a\ncontract address of course we'll want to\nknow who we're going to fund with link\nwe'll set an a default account to being\nnone so if you want you can send an\naccount but you don't have to if you\ndon't want to we'll also do the same\nthing with a link token we'll say if you\nwant to use a specific link token you\ncan otherwise we'll just grab it\nourselves and then we'll also do a\ndefault amount which will set to one 1 2\n3 four 5 six seven eight nine 10 1 2 3\nfour five six seven\nwhich is going to be 0.1 link so first\nlet's get an account we'll say account\nequals we're going to do a little clever\npython stuff here we'll say account\nequals the account if somebody sent it\nif account so we're saying the account\nthat we use is going to be this account\nthing if this account thing even exists\notherwise we'll call our get account\notherwise we'll just do our regular get\naccount function then we'll do the same\nthing with the link token say the link\ntoken is going to be equal to the link\ntoken that somebody supplies as a\nparameter if they applied something as a\nparameter otherwise we'll just do that\nget Contract stuff that we did before of\nthe link\ntoken now that we have this link token\ncontract from our get Contract function\nwhich again is basically the equivalent\nof doing which again is doing this\ncontract from ABI on our link\ntoken pulling from our config or from\nour mock now we can just call the\nfunctions on this link token so we'll\nget say our transaction equals link\ntoken.\ntransfer we're going to transfer token\nto contract\naddress with certain amount and of\ncourse we'll do\nfrom\ncount do tx. we\nand then we'll do\nprint funded\ncontract then we'll even return that\ntransaction I do however want to show\nyou another way to work with this using\nthe interfaces instead of doing this\nlink token. transfer directly on the\ncontract we can use this interfaces\nsection to actually interact with some\ncontracts so right now we have our mock\nlink token in here which is great\nbecause it has all the definitions and\nall the functionalities defined in here\nsometimes you're going to have contracts\nthat you don't have everything you don't\nhave all the functionality and maybe you\nonly have the interface maybe you only\nhave some of the function definitions so\nwe can still interact with contracts\nwith just an interface because again\nthat interface will compile down to our\nAI so as another way of teaching us how\nto actually work with some of these\ncontracts what we can do is we can use\nwe can use the link token interface\nbasically the same way as we use the\nlink token contract here so again I'm in\nmy chain link mix because there's\nalready a link token interface in here\nand this will compile down to a way that\nour brownie package knows how to\ninteract with these contracts so if you\nwanted to we could just grab this go to\nour brownie section we'll do a new file\nin\ninterfaces we'll call it link token\ninterface. soul we'll paste it in here\nsave my auto format Auto formatted here\nand what we can do our helpful scripts\ninstead transaction equals\ninterface we can also just import\ninterfaces right from brownie\ninterface dot link token\ninterface and we just need to give it a\ncontract address so we can say\nlink token.\naddress excuse me we can say link token\ncontract was interface. link token\ninterface link token. address so this is\nanother way we can actually create\ncontracts to actually interact with them\nso we saw up here this contract. from\nABI which is great this is another way\nwe can do that exact same thing so then\nwe can just do link token contract.\ntransfer contract address\namount\nfrom count\nso this TX equals so this is another way\nto actually interact with contracts that\nalready exists you're probably starting\nto see that brownie has a lot of\nbuilt-in tools that make it really easy\nfor us to interact with contracts if we\nhave the ABI we can just pop it into\ncontract. from ABI and again with the\naddress and the ABI and then just give\nit some name if we have the interface we\ndon't even need to compile down to the\nAI ourselves because brownie is smart\nenough to know that it can compile down\nto the AI itself and we could just work\ndirectly with that interface which is\nincredibly powerful for now I'm going to\ncomment these two lines though and we'll\njust use the link token. transfer for\nnow now that we have a funding script or\na funding function we can import this\nfrom our helpful scripts from scripts.\nhelpful scripts import get account get\nContract fund with\nlink and we can just call in our end\nLottery function we'll do fund with link\nand parameters we just we only really\nneed a contract address because the way\nwe set this up will just automatically\ngrab a default otherwise so we can say\nlottery.\naddress that's it that's all we need and\nthen I know we're doing tx. weight right\nin the fund with link but just for to be\nrebose here we'll get the transaction\nfrom the fund with link and we'll do tx.\nwe here as\nwell then once we're funded with link\nthen we can go ahead and call all end\nLottery function because again this is\ngoing to call that request Randomness\nfunction from the chin bef we'll do end\nending\ntransaction equals lottery. end\nLottery and all we have to do is\nfrom\ncount to\nending transaction. weight\none so from our end this is really all\nthat we need to do right but remember\nwhen we call this end Lottery function\nwe're going to make a request to a chain\nlink node and that chain link node is\ngoing to respond by calling this fulfill\nRandomness function so we actually have\nto wait for that chain link node to\nfinish now typically it's within a few\nblocks so normally what we can do is we\ncan just do a Time dos\nsleep for something like 60 seconds and\ntypically in that time the chain lck\nnode will have responded so we'll just\ndo import\ntime top time. sleep and then we can see\nwho that recent winner is if that chain\nlink node responded with a recent winner\nso we can say print\nF Lottery a recent\nwinner is the new\nwinner all right now of course for those\nof you who are thinking ahead a little\nbit you might be thinking hey well\nthere's no chain link nodes watching our\nlocal ganache and you're exactly correct\nso what happens when we add our end\nLottery\nfunction to our main function here do\nyou think that we're going to actually\nget a recent winner back why are we not\nwhat do you actually think well let's\ngive it a shot do brownie run scripts\nemploy lottery\ndepy so we're doing a lot of\ntransactions here we've started the\nlottery we're entering ing the lottery\nyou entered the lottery we're sending\nsome link token now we just called the\nend Lottery function while we're waiting\nhere this is when the chain link node\nwould go ahead and start responding with\nour Randomness however as you're\nprobably astutely telling however as you\nprobably astutely guessed there's no\nchain link node that's going to call\nthis fulfill Randomness function right\nnow so for our ganache chain this will\nhypothetically end with nothing right\nthere's no chain link node actually\nresponding zero is the new winner of\ncourse this means that the chain link\nnode actually didn't respond because\nthere is no chain link node on our local\nganache for our testing purposes we're\ngoing to figure out how to actually get\naround that and deal with that awesome\nit looks like we have everything set up\nto be successful in our Lottery here but\nwe want to do our due diligence we want\nto make sure that our tests are really\nsolid on a development chain before we\nactually test this on an actual test net\nso let's jump into some of these tests\nwe've already started with this test\nlottery. piy bit here but we're going to\niterate on this and make this even\nbetter now before we get into these\ntests there's a couple things we want to\ntalk about here and that's going to be\nintegration tests and unit tests unit\ntest is a way of testing the smallest\npieces of code in an isolated system and\nwe're going to use it to Loosely Define\ntesting independent functions in our\nLottery cont we also want to do what's\ncalled integration testing which is\ngoing to be testing across multiple\ncomplex pieces typically I like to run\nmy unit tests exclusively on a\ndevelopment environment and my\nintegration tests on a test net this is\nreally helpful because we can test the\nmajority of our application like we said\non a development Network and then still\nbe able to see what actually happens on\na real testet and see what happens on\nether scan and everything like that\ntypically what people do is INS side\ntheir test folder they'll create two\ndifferent folders one for\nunit and another folder for in\ncreation since for this demo we're only\ngoing to have one file for both I'm just\ngoing to go ahead and not create this\nfolders\nbut but it's a pretty common\npractice instead what I'm going to do is\nI'm going to rename this I'm going to\nhit enter to renamed it and do\nunderscore type\nunit for unit test and we're going to\ncreate a new file called test lottery\nintegration. so this this one we'll do\nour integration tests and in this one\nwe'll do our unit tests now when writing\nunit tests we really want to test\nhypothetically every single line of code\nin our smart contract this is incredibly\nimportant of course because smart\ncontracts are open to everybody to see\nand interact with so we really want to\ntest every single line of code we have\nin here so let's go ahead and let's go\nahead and finish writing a get entrance\nfee test that will work on a local\ndevelopment Network as you can see we're\nalready going to have to re Factor this\nfrom what we originally had let's go\nahead and just delete everything under\nhere for now we already learned so much\nmore from there all right so how are we\ngoing to test this get entrance view\nfunction now so first we're going to\nwant to deploy our Lottery again since\nwe\nhave a deploy Lottery script already we\ncan just use this deployed Lottery\nscript as well if we wanted to we could\njust copy paste this whole part into our\ntest but we're just going to go ahead\nand work from this deploy Lottery script\nso we're going to import this and then\nwe can actually even get rid of this\nfrom web three line for now we can get\nrid of these two comments too and we'll\nsay from scripts. deploy\nLottery\nimport\ndeploy Lottery and this deploy Lottery\nfunction would say Lottery equals deploy\nLottery and we will return our Lottery\nnow on a unit test we'll say Lottery\nequals deploy\nLottery and this will give us our\nLottery contract once we have our\nLottery contract we can just call this\nget entrance fee so we can say entrance\nfee equals lottery. getet entrance\nfee and oops let's just make sure we're\ndoing the\nrrange\nACT certainer mentality here and we're\ngoing to want to make sure this entrance\nfee is what we expected to be so what do\nwe expect it to be well again our\nhelpful scripts is going to deploy these\nmocks right it's going to deploy this\nMock and the initial value is this 2,000\nnumber so if the\nprice of e here is\n2,000 $2,000 FUSD feed and the\nUSD entry fee is 50 we' say 2,00 over 1\nis equal to 50\nX which is going to be equal to\n0.025 so we can go ahead and even do\nthis math\nhere we can say\nexpected expected entrance\nfee is going to be equal to it's going\nto be equal to 50 divided 2,000 we'll\njust do\n0.025 but we'll do this in way do from\nweb 3 support web\n3 say this is web\n3.2 way 0.25 ether and now we'll assert\nour expected entrance fee\nequals the entrance fee now to test this\nwe'll do browny test-\nK and perfect this is working exactly as\nwe anticipated so that's awesome now as\nwe mentioned since this is a unit test\nwe really only want to run this when\nwe're working on a local environment a\nlocal blockchain environment or a local\ndevelopment Network so we'll go ahead\nand do this with pest again say if\nnetwork. show active is not in local\nblockchain\nenvironments pest. skip of course we're\ngoing to have to import\npest we're gonna have to import this\nlocal blockchain environments from our\nscripts. helpful scripts my vs code\nautomatically added that bit here now\nnow if we try to run this brownie run\nEXC brownie test\nDK get entrance Fe Das Dash Network rink\nB rink EB it should go ahead and skip\nthis perfect that's what it does what's\nthe next piece that makes sense here\nenter is going to be one of the first\nthings that these developers do so let's\ndo test def test enter but let's even be\nmore specific than that we don't want\npeople to be able to enter our lotteries\nunless the lottery is actually started\nso let's make sure that this line\nactually works so we'll call def test\ncan't enter unless started and again\nwe're only going to run this on a local\ndevelopment chain so we'll just copy\npaste this section down here we'll say\nLottery\nequals Ploy Lottery because we're going\nto want to work with the lottery and now\nwe're going to want to that when people\ntry to enter a lottery that hasn't\nstarted yet it's going to revert so we\ncan use what we've used before we'll say\nwith py test.\nraises\nexceptions. virtual machine\nerror lottery.\nenter\nfrom get\naccount\nvalue L.G get entrance\nfee of course we're going to have to\nimport both get a\ncount from our helpful\nscripts and exceptions from\nbrownie perfect and this as well is\nfollowing the\narrange this is actually act\nslash\nassert so let's go ahead and test\nthis brownie test- K test can't enter\nunless\nstarters let's do start\nEd and great that's passing as well\nlet's go ahead and keep going down this\nlist what else now that we've tested\nwhether or not they can't enter Let's\ntest whether or not they can enter so\nwe'll do def test can start and\nenter\nlottery so we're going to copy this\nagain paste it down here since we're\ngoing to work on a local blockchain do\nLottery equals\ndeploy Lottery\naccount equals get account we'll start\nthe lottery lottery. start\nstarty do\nfrom\ncount do lottery.\nenter from\ncount say value is\nlottery. getet entrance fee\nand then we'll\nassert that we've correctly added a\nplayer to this lottery so we'll assert\nlottery.\nplayers of zero it's going to be this\naccount right because we have our\nplayers array and we're going to assert\nthat we're pushing them onto our array\ncorrectly lottery. players zero equals\naccount so here's our Act\nhere is our assert so let's try this now\nbrowny test- K test can start and enter\nLottery and once again awesome things\nare looking great now let's test to see\nif we can actually end a lottery so\nwe've tested we can start a lottery so\nwe'll do Dev test can end Lottery we're\ngoing to copy this again paste it down\nhere do Lottery equals deploy\nLottery count equals get\naccount start the lottery lottery. start\nLottery now we could 100% just import\nthe rest of these functions in here like\nend Lottery enter Lottery and start\nLottery it's similar to how we're just\ndoing Lottery was deploy Lottery we\ncould absolutely do that for being very\nverbose here I'm just going to go ahead\nand and write all the functions and\ntransactions myself and this way we'll\nactually be able to test a little bit\nmore granularly\nanyways do Lottery dot start\nLottery\nfrom\ncount do lottery.\nenter\nfrom count we'll give it a\nvalue lottery. get entrance\nfee I'm going to have to do account\nof course equals get\naccount now to actually end the lottery\nwe do need to send this some link\nbecause we're calling request Randomness\nwe use our fund with link script that we\nhave and our helpful\nscripts we'll import this from our\nhelpful\nscripts we'll call fund with link on our\nLottery\ncontract once we fund with link we'll\nthen call lot lottery. end\nLottery from\ncount and then how do we actually\nknow that this is being called correctly\nwell if we look back in our Lottery\ncontract here when we call end Lottery\nwe don't we're not really doing a whole\nlot all we're doing is changing our\nstate so let's go ahead and check to see\nif our calculating winner state is\ndifferent so we'll say assert lot of\ndot Lottery\nstate is equal to what so calculating\nwinner if we scroll to our enum is in\nposition two open is zero close is one\ncalculating winner is two so we can say\ncert lottery. Lottery State equals to\ntwo we can go ahead and test this as\nwell do brownie test- K test can end\nLottery\nsee if this\nworks and it does now let's test the\nmost interesting piece of this entire\nLottery contract we're going to test\nwhether or not our fulfill function\nactually works correctly does this\ncorrectly choose a winner does it\ncorrectly pay the winner and does it\ncorrectly reset so let's go ahead and\nbuild our most complicated and most\nimportant test of this whole contract\nchoosing the winner do\ndef test can pick winner\ncorrectly let's copy paste this\nbit about getting\nstarted do Lottery\nequals employ\nLottery count equals get\naccount we'll do lottery. start\nLottery\nfrom C\nand then we'll enter with a couple\ndifferent players do lottery.\nenter let's say\nfrom\ncount\nvalue lottery. getet entrance\nfee\nenter and we'll copy this two more times\nbut instead\nwe use some different IDs do index\nequals\n1 we'll do index equals 2 these are\ngoing to be different accounts here\nbecause we're going to use a different\nindex because we want to just test for\nmultiple different people here this unit\ntest is getting drastically close to\nbeing an integration test but as I said\nwe're being a little bit loose with the\ndefinitions here now we're going to want\nto fund it with link so we can just go\nahead and copy this line here fund with\nlink Lottery and now we're going to want\nto choose a winner here and this is\nwhere we actually have to modify one\nmore thing in our Lottery contract so in\norder to test actually calling this\nfulfill Randomness function and testing\neverything in here we're going to need\nto call this fulfill Randomness\nfunction now if we look at our vrf\ncoordinator mock we have this function\ncalled call back with\nRandomness and this is the function that\nactually calls this fulfill Randomness\ndo selector which eventually will call\nthat fulfill Randomness function but\nthis is the entry point that the that\nthe node actually calls we have to\npretend to be a chain link node and call\nthis function we're going to return a\nrandom number of course we're going to\nchoose the contract we want to return to\nbut we also have to pass the original\nrequest ID associated with the original\ncall now in our Lottery contract our end\nLottery function isn't going to return\nanything and even if it did it would be\nreally difficult for us to get that\nreturn type in our python so what we\nwant to do to keep track of when this\ncontract actually entered the\ncalculating winner state is we want to\ndo what's called emitting an event\nevents are pieces of data executed in\nthe blockchain and stored in the\nblockchain but are not accessible by any\nsmart contracts you can kind of think of\nthem as the print lines of a blockchain\nor the print statements of a\nblockchain we can go to this log section\nwhich also includes all the different\nevents now there's a lot of information\nhere so we're actually going to do an\nevent ourself just so that we can see\nwhat this really looks like you can see\nhere that when we call this end Lottery\nfunction in the logs if we scroll to the\nbottom there's an event here called\nRandomness request this was spit out by\nthe vrf coordinator this was spit out by\nthe vrf consumer base that we inherited\nand it even has some data that's already\nbeen decoded one of those pieces of data\nis the request ID now to add an event we\nfirst need to create our event type so\nat the top we'll go ahead and do event\nrequested random\ns say bytes\n32 request ID so now we've identified a\nnew type of event called requested\nRandomness it's really similar to the\nenum in this regard to emit one of these\nevents all we have to do in our end\nLottery bid is we'll do emit requested\nRandomness and then request ID because\nrequested Randomness takes a byes 32\nas an input parameter and we're going to\npass it that request ID as an input\nparameter now that we have this event\nbeing emitted back in our test when we\ncall end Lottery it will actually emit\none of these events to our\ntransaction so what we can say then is\ntransaction equals lottery. end\nLottery same way we've always done\nit but now we can look inside this\ntransaction object inside of this\ntransaction object is actually an\nattribute called\nevents which stores all of our events we\ncan then look for certain event name\nwhich we know is requested Randomness so\nwe'll say out of all the events look for\nthe requested Randomness\nevent and in there in that requested\nRandomness\nevent find the request\nID request ID\nnow we can say request\nIDC me request\nID is going to get grabbed from this\nevent that we emit so these events are\ngoing to be really helpful for writing\ntests these events are also really\nhelpful for a number of other reasons\none of the big ones is is upgrading our\nsmart contracts or understanding when a\nmapping is updated but for now we're\ngoing to be using them for testing now\nthat we have this request ID what we can\ndo is pretend to be the chain link node\nand use this call back with Randomness\nfunction to dummy getting a random\nnumber back from the chain link node so\nwhat we're going to do is we're going to\ncall our get Contract\nfunction and get that vrf coordinator of\ncourse we're going to have to import it\nfrom our helpful scripts and we're going\nto call that call back with Randomness\nfunction so we're going to do dot call\nback\nwith\nRandomness and we need to pass\nit this request ID a random number and\nthen the contract to return to so we'll\ndo request ID we'll do some random\nnumber like we'll say\nstatic RNG equals\n777 so we'll say the random number that\nwe're going to return is going to be\n777 and then we'll do lottery. address\nwe're going to return it to the\nlottery once again we're going to say\nfrom count because this is making a\nstate change and now that we've got a\ncall back what we can do is do our\nasserts now so this is us dummying\ngetting a response from a chain Lake\nnode and this is how we mock responses\nin our tests to make our lives way way\neasier so now we can do we can figure\nout who the winner of this Lottery\nactually is these are our three enter\nentries\nthat means it's\n777 mod 3 since our random number is\ngoing to be 777 if we call out a\ncalculator\n777 / 3 it divides evenly so we know\nthat this means the answer to this is\ngoing to be zero AKA our account is\ngoing to be the winner so let's assert\nthe lottery do recent winner is going to\nbe equal to our account\nright because we set a recent\nwinner in here we transfer them some\nmoney we'll assert lottery.\nbalance is now zero because we're\ntransferring this account all of the\nmoney and let's even make sure that the\naccount gets more money right so we'll\ndo starting balance of our account\nstarting balance of account\nequals count. balance count. balance and\nwe'll do\nbalance\nof Lottery equals lottery. balance and\nthen we'll assert account. balance is\nnow going to be these two added together\nstarted balance of account\nplus the balance of the\nlottery because we should get all of the\nlottery winnings here\nokay so this is a long test but this is\nprobably the most important test let's\nmake sure this is doing what we want it\nto do do brownie test- K test can pick\nwinner correctly let's see if this works\noops forgot to put\na a parentheses here parentheses here\nlet's try this again and perfect we are\nactually updating paying out and running\nour Lottery correctly and fair\nwith true Randomness this is incredibly\nexciting and we've admitted events in\nour Lottery contract to use in the\noffchain event logging of ethereum I\nknow we're getting ansy to actually run\nthis on a real chain so let's go ahead\nand do our last bit here create our\nintegration test which we will run on an\nactual chain and then if we wanted to we\ngo ahead and try our deploy Lottery\nfunction on a real chain as well all\nright so let's do our integration test\nhere this is where we're going to\nactually test on a real live chain we're\ngoing to use ring be because that's the\nnetwork that we've been using this whole\ntime which is great now I'm being a\nlittle bit liberal in the way that we're\ndoing our tests here and we're just\ngoing to do one test for this\nintegration test but keep in mind you're\ngoing to want to test every piece of\nyour code so let's just create a test\ncalled def test can pick\nwinner now this is going to be the\nopposite of our unit tests our unit\ntests are only going to be on our local\nblockchains right we're going to skip if\nit's not on our local blockchains we're\ngoing to do the opposite of this one so\nwe can even just copy this or we can\ntype it out we say if our\nNetwork that's show\nactive is in those\nlocal blockchain\nenvironments then we're going to do p\ntest\nskip of course since we're grabbing\nthese pieces we're going to do from\nbrowny\nimport\nNetwork we're going to import P test and\nwe're going to do from scripts dot\nhelpful\nscripts\nimport\nlocal blockchain and\nby we're going to deploy our lottery so\nLottery equals deploy\nLottery which we're just going to grab\nfrom\nscripts deploy\nLottery support\ndeploy\nLottery do count equals get\naccount of course we're going to grab\nthat from our helpful scripts as\nwell so we'll do\nLottery that's start Lottery\nthis will be\nfrom\naccount do lottery.\nenter say this will be\nfrom\ncount we'll do some value which is going\nto be\nlottery. getet entrance\nfee and if we run into an issue here\nsometimes again we can do lottery. a get\nentrance fee plus like 100 or a th000 or\nsomething like that this is going to be\nbarely any way but for now let's keep it\nlike this then let's just copy this\nline run it again we'll have two people\nenter the lottery of course it's going\nto be us both times and great now we're\ngoing to want to actually end the\nlottery so first we're going to want to\nfund it so let's import that funding\nscript so we get fund with link or that\nfunction so we'll call our fund with\nlink function on our Lottery contract\nhere\nand then we'll go ahead and end the\nlottery so we'll say\nLottery do end\nLottery we have to do this from our main\naccount this from the admin account now\nthis is where it's going to be a little\nbit different from our integration\ntests or from our unit test in our unit\ntests we pretended that we were the vrf\ncoordinator and we called the call back\nwith Randomness we pretended that we\nwere a chain link node here we're not a\nchain link node because we're on an\nactual Network so we're actually just\ngoing to wait for that chain link node\nto respond so for Simplicity we'll just\ndo time. sleep we'll wait like a minute\nfor it to respond of course since we're\nusing\ntime we're going to want to import time\nthe top and then since account was the\nonly one to actually be in this we do\ninsert\nLottery recent\nwinner equals equals\ncount and we'll also assert lottery.\nbalance is equal zero all right great so\nwe have an integration test that we can\nrun which is going to run through pretty\nmuch the vast majority of our\nfunctionality here so we can go ahead\nand test this with\nbrownie test will be a little bit\nverbose here we'll say- K test can pick\nwinner and then of course we'll do das\nDas Network rink feed now before we run\nthis per usual we got to make sure do we\nhave any test net rink the ethereum we\ndo great do we have any test net chain\nlink we do perfect we have a\nEnV we do it's got all all of our pieces\nlet's check our brownie\nconfig envv awesome and again if you\ndon't want to use the EnV you can use\nthat other method that we showed you\nguys how to encrypt with a password that\nyou can abolutely\nuse before we run this set this to start\nLottery because that's the actual\nfunction here and we'll also need to be\nlottery. balance parentheses here sorry\nthat now we can run brownie test\nDK test can pick winner D- Network R\nwe'll also add this- s flag which will\nprint out whatever brownie is going to\nbe printing out we make everything a\nlittle bit more your Bose here and if\nyou want to you absolutely should\nbecause this is something that we'll\nhave to do at some point anyways however\nif for this tutorial you want to skip it\ngo ahead because we're actually going to\nrun through this whole process of\ndeploying and waiting again anyway so\nnow we've added all of our tests what we\ncan do is run our entire test Suite so\nwe'll do brownie test and this is going\nto run through all of our development\ntests here see it'll go really quickly\nyou see how much faster it is for us to\nrun our test on a local chain as opposed\nto doing everything on a test now so\nit's going to make your life way easier\nand we have everything passed here so we\nknow that our contract code is doing\napproximately what we want to do\nso it's time for the moment of truth\nlet's deploy this to an actual test net\nso we have our deploy Lottery script\nwhich oftentimes I'll have it be just\nthis deploy Lottery bit and then I'll\nhave some other scripts for these other\npieces or maybe I'll do it in the proudy\nconsole but just to demonstrate\neverything end to end we'll have deploy\nLottery start Lottery enter Lottery and\nend Lottery All in This one script so\nthat we can see everything end to end\nand see what it looks like on ether scan\nso let's go ahead and run this script on\na rink be Network and then we'll go jump\nonto ether scan and see everything so\nlet's do it browny run scripts deploy\nLottery Network\nRinke so first we went ahead and we\ndeployed our Lottery we got our\naddresses with our get Contract method\nwe got our fee we got our keyh we got\nour published source and everything then\nwe went ahead and verified it because of\nthis published source so if we grab this\naddress Lottery deployed here we jump\nover to Rinky ether\nscan paste this address in here we'll\nsee this contract with a little check\nmark is verified and again we'll go to\nthe read contract we can see all the\npublic variables and all the public\nfunctions we can go to right contract\nand we'll see all the transacting\nfunctions that we can interact with\nafter we get verified and things get\ndeployed we went ahead and called our\nstart Lottery function to actually start\nthe lottery got a little print line\nsaying the lottery started then we\nentered you entered the lottery we then\nfunded the contract with link so that we\ncould get our random winner back and\nthen right now our end Lottery is\nconfirmed we're just waiting this 60\nseconds right because we did this time.\nsleep and if we sit on this contract if\nwe go to transactions and we refresh we\ncan actually see some of these different\nmethod calls over you can see we did a\ncontract creation we started the lottery\nwe entered the lottery and then we\nrecently ended the lottery and you'll\nsee in our script here it says 0x blah\nblah blah is the new winner which is\nperfect right that means that the chain\nlck node actually responded we can\nactually verify that by looking in the\ncontract we'll go to read contract we\ncan go to the recent win and see\nsomebody did indeed recently win we can\nalso go to events and we can see some of\nthe events that we created you can see\nthis first event right here is this\nrequested Randomness event this is the\nevent that we called we have this end\nLottery here you can also see an\nownership transferred function that go\ncall this was called when we actually\ndeployed this in the first place now a\nlittle bit more on these events AKA\nthese logs right so topic zero this hash\nrepresents this entire event right here\nin this bit is going to be our topic one\nour first topic which represents that\nrequest ID so this is going to be the\nrequest ID awesome we have successfully\ncreated a working smart contract Lottery\nwith true provable Randomness this is\nabsolutely insane incredible job here\nnow one additional piece that I want to\ntalk about before we jump off here is\nagain in our testing a file that you're\noften going to see what's called conf\ntest\nPi python automatically knows to look\nfor this comp test file and we'll grab\ndifferent functions from it we can also\nadd external plugins fixtures hooks\ntesting root path it adds a lot of\nreally fantastic features and is a\ncommon thing that you'll see we skipped\nover in here for Simplicity but in\nfuture projects you'll probably see this\ncomp test file which has a lot of really\nnice testing configuration pieces in\nit now that was a lot of stuff to code\nand quite frankly I don't think any of\nus want to have to do that every single\ntime have to code everything from\nscratch now you can absolutely get Clon\nall of these repositories right from\ntheir GitHub but there's actually an\neven easier way for us to start with a\nblank project here and this is with\nbrownie mixes so if we Google brownie\nmixes GitHub we'll get this mixes\norganization which just has a ton of\nboilerplate code for us to go ahead get\nstarted and start developing the one\nwe're going to be working with is this\nchain lick mix piece which is forked\nfrom this official one here this gives\nus some wonderful contracts some tests a\nbrownie config and really everything\nthat we need to do to get started so if\nyou have brownie installed we can just\nbake this mix so we'll do brownie bake\nchain link mix and in our new empty\ndirectory here we'll get this new chain\nlink folder with everything inside of it\nso then we can CD to chain link and we\ncan see it has all all these pieces in\nhere here already in the contracts we\nhave a whole bunch of different samples\nof working with the vrf working with a\nprice feed working with this thing\ncalled Keepers to automate our smart\ncontracts and making API calls and\ndelivering any API call that we want to\nthe blockchain it also has a brownie\nconfig which already has a number of\nwonderful pieces in each one of these\nnetworks so that we don't have to go\ncopy paste and add it in here it's even\ngot support for test Nets like Avalanche\npoon finance and more it has a number of\nreally powerful tests including testing\nsome price feeds it has a whole bunch of\ndeployment scripts some mocking scripts\nsome helpful scripts and really\neverything that we need to get started\nand get going for starters we could run\nbrownie\ntest and it's going to compile\neverything and then on a development\nchain run all these unit tests and if we\nwanted to test this on a real test net\nwe could do brownie test D- Network ring\nor any network that we wanted if you're\nlooking for a good starter place that\nhas a lot of really powerful smart\ncontracts for you to get started I\nhighly recommend using this mix as a\nboilerplate starting point for any of\nyour contracts or any of your projects\nhere now we are cooking so we've learned\na ton of the fundamentals of working\nwith Brownie and working with smart\ncontracts now that we have kind of all\nthe building blocks though we can\nactually code a lot of these much faster\nand much more efficiently than before\none of the things that we've seen over\nand over and over again is working with\ntokens and the erc20 token standard\nwe're going to learn how to build our\nown token but before we do that let's\nunderstand why we'd even want to do this\nnow first let's define even what are ER\nc20s so er c20s are tokens that are\ndeployed on a chain using What's called\nthe erc20 token standard you can read\nmore about it in the erc20 token\nstandard here Link in the description as\nwell but basically it's a smart contract\nthat actually represents a token so it's\ntoken but it's a smart contract it's\nboth it's really cool tether chain link\nuni token and die are all examples of\nERC 20s technically chain link is an ERC\n677 as there are upgrades to the ec20\nthat some tokens take that are still\nbackwards compatible with ear c20s and\nso basically you can think of them as e\nc20s with a little additional\nfunctionality now why would I even care\nto want to make an ec20 well you can do\na lot of really cool stuff with it you\ncan make governance token you can secure\nan underlying Network you can create\nsome type of synthetic asset or really\nanything else in any case how do we\nbuild one of these ER c20s how do we\nbuild one of these tokens well all we\nhave to do is build a smart contract\nthat follows the token standard all we\nhave to do is build a smart contract\nthat has these functions it has a name\nfunction a symbol function decimals\nfunction Etc all these functions we need\nto be able to transfer it we need to be\nable to get the balance of it Etc and\nagain if you want to check out some of\nthe improvements that are still erc20\ncompatible like the ERC 677 or the ERC\n777 you definitely go check those out\nand build one of those instead so let's\ncreate a new folder and get started\nwe're going to create our new brownie\nfile of course with Brownie and knit\nit's going to start up our repository\nand start up everything that we are\ngoing to work with here we can kind of\nactually just jump in and start right\nwith our contracts so let's create a new\nfile and we'll call it our\ntoken. soul\nand this is where we're going to add all\nof our token code now since this is an\nEIP right this all this is is a smart\ncontract so what we could do is we could\ngrab all these functions copy and paste\nthem in here one at a time grab the name\ngrab the symbol grab the decimals and\nthen you know code all these up be like\nah this does some stuff blah blah blah\nor we could do it the much easier way\nright since we're Engineers we don't\nalways want to reinvent the wheel so\nonce again our friends at open\nZeppelin have some amazing contract\npackages for actually building our own\nerc20 token so we can go right to the\nopen Zepp and documentation I'm working\non the 4X version but again it doesn't\nmatter the version that you use so long\nas in our config file we add the version\nthat we're going to use which again\nwe've already gone over so let's go over\nto their erc20 documentation and this is\nthe entirety of the code that is need\nneeded to make an erc20 so we can just\ngo ahead and even copy this paste it in\nhere and boom we have some erc20 code in\nhere let's actually just change the name\nof everything in here though so we're\ngoing to call this our\ntoken. soul we have this this spdx\nlicense identifier MIT great we're going\nto be using solidity version 0.8 which I\nknow I've done a lot of this code\nactually in point in 0.6 but I highly\nrecommend working with 0.8 because it\nhas a lot of really fantastic\nimprovements to solidity you notice this\nis our first dive into using a different\nversion of solidity here you'll notice\nthat most of the syntax is exactly the\nsame there are like I said a couple of\nnice improvements with 0.8 the main one\nbeing you no longer have to use those\nsafe math functions that we talked about\nbefore um but then we're going to go\nahead and import open Zeppelin contracts\ntoken erc20 Soul now of course since\nwe're importing open Zeppelin we're\nimporting this package we got to add\nthis to our brownie config\nDio and before we even get started you\ntechnically have all the tools that you\nneed to code and deploy your own erc20\ntoken now I'm actually going to\nchallenge you to go ahead and try to\nstart a Browning project create your own\ntoken using open zeppin packages and\nthen deploy it on a test net I'm going\nto show you how to do all of it here\nanyways but challenging yourself and\ntrying to do things your own and\nexploring is really one of the fastest\nways to learn and grow in in this\nspace did you give it a shot no really\npause it now and give it a try all right\nwelcome back now we'll go through it and\nwe'll do it together of course we need\nto add these\ndependencies open\nZeppelin open Zeppelin contracts let's\ndo their version\nfour so let's even go to GitHub open\nZeppelin and we'll do 4.2.0 which was\nreleased yesterday at this time which is\ngreat\n4.2.0 and of course again\ncompiler we'll have silk\noops\nremappings we'll add at open\nZeppelin\nequals\nthis and then we're going to go ahead\nand save now we can use this at open\nZeppelin and it will refer to the open\nZeppelin contracts here so great now we\ncan go ahead and import these let's\nchange the contract name to our token\nwe're going to inherit this erc20 doou\nfrom open Zeppelin we can even go ahead\nto open Zeppelin contracts GitHub and we\ncan even see what this erc20 looks like\nso we can go to uh their contracts down\nto\ntoken\nerc20 erc20 doso and this is their\ninitiation of an erc20 which has all\nthese functions like name symbol\ndecimals total Supply Etc in our\nConstructor we're going to add an\ninitial Supply which is going to be in\nway of course so the initial supply of\nthat token and we're going to use the\nConstructor of the erc20 DOA which again\nwe can go ahead and check in the code\nhere and we can see the Constructor uses\na name and a symbol so we have a name\nwe'll call it our\ntoken and the symbol we'll do OT and\nboom that is literally all we need for\nour token here I told you this was going\nto be a much faster project now for\nscripts all we have to do create a new\nfile We'll add a one deploy token. soul\nand we'll also add a\nhelpful\nScripts excuse me this deploy token. piy\nexcuse\nme we'll just quickly add a get account\nfunction we say def get account and you\ncan go ahead and just copy paste from\nthe last one and if you want you can\nactually just copy paste from our last\nhelpful scripts because it's pretty much\ngoing to be exactly the same so that we\nhave all these wonderful uh ifs\nstatements so that we can deploy from\nreally anything that we want now in our\ndeployment token script we'll do\nfrom brownie\nimport our\ntoken and then from\nscripts\ndo helpful scripts import get count and\njust to make sure let's add\nanit Pi in here just to make sure that\nour scripts can actually import so since\nwe know since we know that we need an\ninitial Supply here let's go ahead and\ndo initial Supply equals and then we can\ndo whatever we want here if we want to\nmake it a little bit more readable we'll\nalso do from web 3 import web 3 and we\ncan do web\n3.2 way and we'll\nsay 1,000 is the initial Supply and this\nis in ether so our initial Supply is\ngoing to be 1,000 ether then we just add\nour main\nfunction do account equals get account\nwe do our token\nequals our token.\ndeploy we just add as a\nparameter initial\nSupply do\nfrom account then we'll do\nprint our token dot name and that's the\nwhole function now of course if you\ndon't have your environment variable set\nwe're going to add ourv file this is\nwhere we can add our private key\nour web 3\ninfura project ID and then if we want\nour ether scan token I'm going to skip\ndoing this for now because my\nenvironment variables are already set\nand then last but not least we'll\nadd so private key equals Ox blah blah\nblah three inferior Pro equals blah blah\nblah ether scan token equals blah blah\nblah and perfect now if we want to\nactually deploy this to a test net\nalways we have to do go into our config\nwe'll add\nwallets from\nKey We'll add our environment variable\nprivate\nkey now brownie knows where to grab this\nfrom because we've defined it in our\nhelpful scripts what I could do\nnow to brownie run scripts deploy token.\npiy and we can go ahead and see that our\ntoken is printed out we can see that we\nhave this token deployed on our local\nganach we can see our token here and\nthis is great now I can go ahead and run\nonce\nagain Network rink\nbe now if I grab this address go to the\nrink be ether scan pop it in after a\nquick refresh I can now see that my\ncontract has indeed been added and ether\nscan even picks up that it's a token now\nwhat we could do you grab this grab this\ncontract\naddress go to\nassets add it in our metamask here next\nadd tokens and you'll see we are the\nproud owners of 1,000 our tokens now\nsomething else that you might want to do\nis add this to a liquidity pool or add\nthis to a place where you can actually\ngo ahead and sell it and put it on the\nmarket you can do something like that\nit's easily as just popping onto Unis\nswap going to pool hitting more create a\npool and then adding our token in here\nwe'd have to manage the token list and\nbe sure to add the token here but we can\ngo ahead and add a token create our own\npool and automatically put it on Unis\nSwap and that's how easy it is to\nactually sell it on one of these pools\nbut all right so this was probably our\neasiest project of the course but it\nreally shows how far you've come along\neverything\nhere that we know a little bit more\nabout Defi and why it's such an amazing\namazing technology that only works in\nthe blockchain world let's look at this\nsite D5 pulse or if you want to look at\nanother one there's another fantastic\none out there called defi llama which\nalso shows a lot of these different\nprotocols in here so defi pulse is an\napplication that shows some of the top\ndef5 projects based on how much total\nasset is locked into each protocol a\nwhich currently is the number one ranked\ndefi application with\n9.32 billion in assets under management\nin terms of USD then we have some\nfantastic ones like curve compound maker\ninstadp Etc now we're going to be\nlooking at two of these protocols in\nparticular the first one of course being\na the second one is going to be a type\nof what's called a decentralized\nexchange to get started with a we're\ngoing to go to testnet\na.com dasboard and it'll bring us to a\nscreen that looks something like this\nplease connect your wallet and\neverything will be pretty empty paraso\nis what's known as a DEX or a\ndecentralized exchange it allows us to\ntrade tokens incredibly easy on the\nblockchain now there's not a whole lot\nof test net deck that actually work so\nwe're just going to look at them and and\nsimulate as if we were working on them\nfor example if I wanted to trade one eth\nfor some usdt or maybe some wrapped\nBitcoin or some D or some a or link or\nreally any token that we wanted all we\nwould need to do is connect our wallet\nhere and a swap button would show up and\nwe would go ahead and hit swap some\nother really powerful these dexes and\nreally popular ones are going to be\ncurve bance Unis Swap and it's a really\nreally easy way to go ahead and swap\nyour tokens for one another depending on\nwhat you're looking to do a is\nincredibly powerful and it's going to be\none that we're going to be working a lot\nwith because it has pretty much all the\nfundamentals of working with the D5\nprotocol that we're looking for and it\nhas a test net that we can go ahead and\ntest and simulate actually working with\nsome of these protocols so we're going\nto first work with the UI or the user\ninterface and then we're going to do\neverything here programmatically first\nthings first if you don't already have\nit make sure you have some test net\nethereum at least and again you can get\nsome test net ethereum from looking at\nthe link token contracts and going to\nkoven this one indeed uh the test net of\na right now is only on coven so we're\ngoing to go ahead here we add our copy\nour address paste it in I'm not a\nrobot 70.1 test eth remember use this\nlink token contracts page because this\nis going to have the most upto-date\nfaucets here once we see some eth in our\nCoen test net here we can go back to a\nso whereas Paras swap allows you to\nSimply swap between assets and do a lot\nof buying and selling of tokens a is a\nlending and borrowing application so we\ncan actually put down a token as\ncollateral and we can borrow and we can\ngenerate some yield from interacting\nwith this protocol borrowing and lending\nis a critical piece to doing any type of\nreally interesting Financial\napplications or financial instruments\nsuch as Short Selling being exposed to\nmore assets Etc you can also gain some\npercentage back if you look at apy it'll\ntell you how much percentage over a year\nyou'll actually get in returns from\nstaking or depositing an asset so here's\nwhat we're going to go ahead and do\nwe're going to connect to the\napplication using metamask and you'll\nsee on the deposit tab here we'll see\nour balance be 0.1 eth because that's\nhow much I currently have in my wallet\nright now what we can now do is click on\neth here click this Max button to\ndeposit some ethereum we'll hit\ncontinue and a little dashboard will pop\nup asking us okay would you like to\ndeposit clicking this deposit button\nwill actually have us deposit right onto\nthe a contract on the Coen test net make\nsure once you hit deposit here that\nyou're actually on a test set here it\nlooks like I actually have some\ninsufficient funds so I'm actually going\nto go borrow a little bit more from the\nfaucet here grab a little more from the\nfaet here we're to come back we're\nactually going to go back\nrefresh and now it says I\nhave\n0.1 we're going to deposit\n0.1 continue deposit and metamask is\ngoing to pop up saying hey are you sure\nyou want to do this right we can check\nour data we can grab this address even\nif we want pop it on to co. ether\nscan paste it in here\nwe can even double check to make sure\nthat this is indeed the right contract\nthat we want funnily enough you'll see\nthat this is the we Gateway when we\ndeposit our coven eth it actually gets\ntransferred into an erc20 version of our\nethereum and then it'll go ahead and\ndeposited into the a contract so we're\ngoing to hit confirm now we're going to\nget this pending here we have a link to\nthe Explorer which shows us this\ntransaction that's going through and\nthen we'll see that we've indeed\nsuccessfully deposited our ethereum now\ndown here you'll see a little button add\na eth to your browser wallet and we're\ngoing to go ahead and click this and\nthis will automatically add this token\nto our wallet so we're going to hit add\ntoken and we see now in assets we have\nthis a e down\nhere we could also have manually hit\nadded token got the contract address but\nAI was nice enough to just go ahead and\nadd us a little button that does it for\nus aeth is what's called an interest\nbearing token and goes up in real time\nyou'll see if I sit here long enough\nyou'll see this number actually\ncontinually going up this is the profit\ngiven to us from other people borrowing\nthe eth that we've deposited into a if\nwe go to our dashboard now we can see we\nhave 0.1 e deposited and if we roll over\nit you'll constantly see the amount go\nup and up and up we can go ahead and\nwithdraw our eth which will convert our\naeth back into eth with the additional\ninterest that we got from depositing so\ndepositing into aate will give us\ninterest back as a payment for other\npeople borrowing the eth that we've\ndeposited we can also use this eth as\nwhat's called collateral so if I go to\nthis borrow tab I can actually use the\neth to borrow some other asset maybe I\nwant to borrow D which is a stable coin\nmeant to always equal $1 usdc and usdt\nalso are meant to always reflect a\ndollar we can borrow what's called\nwrapped Bitcoin which represents the\nBitcoin price we could borrow some a\ntoken some bat token some link token we\ncan borrow all these different tokens\nnow borrowing an asset is incredibly\nincredibly powerful by borrowing you're\nallowed to obtain liquidity without\nselling your assets and borrowing is one\nof the first pieces in order to actually\nshort sell borrowing in defa protocols\nis absolutely massive because it allows\nyou to frictionlessly short sell obtain\nliquidity without closing your position\ngain yield on some deposit collateral\nyou can do a massive number of new\nthings only in the defi World such as\nflash loans now an important note on\nborrowing assets on mainnet since we're\njust borrowing it on test net and this\nisn't real money this is 100% okay to\nexperiment with and work with however if\nyou borrow an asset and you do not pay\nattention to how much you have for an\nunderlying collateral you could get\nliquidated and lose some of your funds\nso be very careful and pay a lot of\nattention if you're going to do this on\nan actual Network now let's say we want\nto borrow the a token for example we\nclick here and we can choose the amount\nthat we want to borrow now here's the\nthing since we've placed down some\ncollateral right 0.1 if the amount that\nwe borrow ends up being too high we'll\nactually get what's called liquidated\nevery time we borrow an asset we get\nsome type of Health Factor the health\nFactor represents how close to being\nliquidated you are once your health\nFactor reaches one the collateral that\nyou've actually deposited will get\nliquidated and somebody else will get\npaid to take some of your collateral\nthis is so that the the a application is\nalways solvent being solvent means it's\nnever in debt so when I want to borrow I\nwant to choose some amount that might be\na little bit safe here and so that I'm\nnot going to get liquidated so zoom in a\nlittle\nbit I'm going to choose some number\nwhere I see a health factor maybe like\n5.6 we're going to continue now we'll\nhave to choose our interest rate when we\nborrow an asset we actually have to pay\nsome interest this payment is actually\ngoing to go to the people who are\ndepositing die or depositing the asset\nthe interest rate that we're going to\npay is actually going to be paid to\nthose who are depositing the asset that\nwe're borrowing so like how we're\ngetting interest on our deposited\ncollateral others are getting interest\non their deposited collateral based off\nof how often people are borrowing it we\ncan choose a stable apy which will\nalways be 4% or a variable apy which\nwill change based off of how volatile\nand how in demand this asset is for now\nI'm going to choose variable but you can\npick whatever you want especially for\nthis demo we're going to hit continue\nI'm going to zoom out just a little bit\nand this same interface is going to show\nup we're going to go ahead and hit\nborrow metamask is going to pop up and\nask us if we really want to borrow we're\ngoing to go ahead and hit confirm and\nnow we've successfully borrowed die into\nour application we can even hit this\nlittle add die to your browser wallet to\nadd the token to our wallet now if we\nhit the button we go to assets we can\nnow see die is indeed in our token\nassets here now if we go back to our\ndashboard you'll see we have a health\nFactor score here this is a really\nimportant score if you click on this\nlittle I thing it says the health Factor\nrepresents the safety of your loan\nderived from the proportion of\ncollateral versus amount borrowed keep\nit above one to avoid liquid\nand we'll see all of our deposits here\nso we still have 0.1 in E deposited we\nalso have 28 die deposited you can see a\nwhole lot of different stats here for\nworking with our application we can\nwithdraw our die we can withdraw our e\nwe can borrow more die or we can go\nahead and repay we can either repay from\nour Wallet balance or from our current\ncollateral yes we could repay with our\ncollateral let's go ahead and do from\nour Wallet balance we'll hit Max\ncontinue and we even get this little\nthing that says you don't have enough\nfunds to repay the full amount well why\nis this the case we just borrowed this\namount it's because already since\ndepositing we've accured a little bit of\nwe've acred a little bit of extra debt\nremember we hit that variable apy and\nevery second it's going to tick up just\na little bit so let's go ahead and pay\nback what we can with our wallet we're\ngoing to confirm we're going to approve\nour do to be spent and then we're going\nto go ahead and hit the repay button and\ngray now if we go back to our dashboard\nyou can see we've repaid almost\neverything here but we have a little bit\nleft so let's just go ahead hit repay\nwith our current collateral we'll hit\nMax continue and this will use our eth\nto pay back the collateral instead of\nthe\ndie then we'll hit repay this way we'll\nhave no more debt great now if we go\nback to our dashboard we can see we have\nno more debt which is fantastic a is one\nof these applications that relies on the\nChain leag price feeds in order to\nunderstand and the ratio between how\nmuch you have deposited as collateral\nand then how much you can borrow and\ntake out if we look in our wallet now we\ncan see we still have some a eth we also\nhave some eth and now we have zero die\nbecause everything's paid back but we're\nstill gaining interest on the eth we\nhave deposited let's go ahead just\nreconnect let's go ahead back to test\nnet.\na.com and let's just withdraw all of our\neth\nnow keep in mind when working with some\nof this this is a test net right and\nworking the way we're working right now\nis just on a test net so sometimes the\ntest net doesn't work quite as well as a\nmain net because it's just for testing\nand doesn't have the exact same support\nwe were just working on the test net but\nif you want to go to a for\nreal you can go to app.\na.com connect your wallet on the\nethereum main net connect your wallet\nmove to the ethereum main net and and\ninteract with it exactly the way we just\nsaw now if we're on the mainnet here we\ncan see some additional pieces when you\ndeposit something like die yes you get\n2.3% back as interest paid to you for\ndepositing the die you also get a little\nbit of what's called a governance token\nyou also get a little bit of a token I\nknow it's really small here but this is\nan additional incentive that a has given\nthe users for working with their\nprotocol since a is a decentralized\nprotocol in order for anything to be\nimproved or anything to be updated on\nthe protocol it actually has to go\nthrough a decentralized vote so these\ngovernance tokens actually dictate and\ndecide how the protocol improves moving\nforward now that we understand how to\nwork with all of that through the UI\nlet's actually learn how to interact\nwith a and interact with defi all from\nour scripts learning how to do it this\nway will get us one step closer to being\na quantitative defi engineer or defi\nresearcher this is someone who\nprogrammatically does algorithmic trades\nalgorithmic modeling and just does\neverything in a programmatic sense\nmaking them much more efficient and\nPowerful interacting with di5 now all\nthe code that we're going to be working\nwith here it's in this ay brownie Pi\napplication and you can always refer\nback to it in the link in the\ndescription or in the link in the GitHub\nrepository and see all the code written\nyourself so with that create a new\nfolder and open up your vs code to that\nfolder and let's get into it and a has\nsome fantastic documentation that we're\ngoing to use as well link here is also\nin the description let's go ahead and\nstart\nwith our our basic brownie setup just\nwith Brownie and it and we got a new\nbrownie project we got all our folders\nin here and we are good to go now we're\nworking with brownie we're actually not\ngoing to really be deploying any\ncontracts because all the contracts that\nwe're going to work with are already\ndeployed on chain all of them are just\ngoing to be working right with a here\ncreate a quick readme.md so we can know\nwhat we're doing here number one we're\ngoing to try to deposit some eth into a\nthen we're going to\nborrow some asset with the eth\ncollateral and then if you wanted to I\nchallenge you to actually\nsell that borrowed\nasset this is what's known as Short\nSelling but we're not going to do that\nhere and then we're just going to repay\neverything\nback great and this will be the full\nfunctionality of working with a in this\ndeployed contract everything that we're\ngoing to learn here will teach you how\nto work with other contracts as well\nsuch as Paras swap or unit swap or any\nother type of swapping contract that\nwill allow us to buy and sell so let's\njust go ahead and create a script we\ncall it a\nb.p let's go ahead and create a function\ncalled def Main and we'll just do pass\nfor now the first thing that we need to\nfigure out how to do is deposit some F\ninto a when we actually deposited our F\nvia the UI you could actually see when\nwe call this deposit function if I hit\nthis deposit button here oddly enough if\nwe go to this contract address on the\nCoen ether scan we'll\nsee that this address is actually what's\ncalled a we\nGateway what a is doing like I was\nsaying before and let's go ahead and\nactually cancel this for now reject what\na is actually doing here is swapping our\nethereum for we again weth is an ERC 20\nversion of ethereum and this allows it\nto easily work with all the other ER\nc20s on the AI protocol like d usdcoin\nyou know ample forth link Etc so we\nactually have to do the that as well so\nthe first thing we're going to need to\ndo actually isn't deposit some of our\neth first thing we're going to need to\ndo is going to swap our eth for we so\nlet's even just put this in its own\nlittle script we'll call it get W.P so\nwe're going to have a function def\nmain I'm just going to do pass for now\nbut we're actually going to want to use\nthis get we function in our a bar to Pi\nso we're going to actually have a main\nand we're going to have a\ndef get\nW and our main function is just going to\ncall get W so how do we actually convert\nour e theum to we or wrapped ether we'll\neven do a little dock string here min we\nby depositing eth now to save gas we\ncould actually interact with this we\nGateway for a but I'm going to teach you\nguys how to just get we in general so we\ncan look up the we\ncontract ether scan we koven contract\nether\nscan and we'll see here we have this\nwrapped ether page and we can go to the\ncontract and we can see that this is\nindeed\nverified the way a works is\nthere's withdraw and deposit we deposit\neth into this contract and it transfers\nus some\nwe so this is the first contract that we\nactually want to interact with so we\nneed our script to be able to call this\ndeposit\ncontract so per usual the two things\nthat we need to do this are going to be\nan\nABI and an address for this we contract\nI really like just doing everything\ndirectly from the interfaces I've\nalready copy pasted the interface\ninto this here so we're going to go to\nwe interface. soul and we're just going\nto copy all this right\nhere so in our interfaces we create a\nnew file we're going to call it\niw. Soul we're going to paste it in you\ncan see this has all the exact same\nfunctions has our deposit contract\nsymbol name transfer pretty much\neverything you would expect from erc20\nplus this extra deposit piece\nwe'll call this ieth it's a common\nnaming standard to just have I in the\nname of what your contract is when\nyou're talking about an interface so we\nhave an interface now and we also have\nan address but again this is our address\non the koven network since we know ahead\nof time that we're probably going to be\nusing this on different networks like\nmainnet and koven and Etc we're actually\ngoing to create a new file we're going\nto add a brownie\nconfig hopefully this is starting to\nlook a little familiar to you now we're\ngoing to go ahead and add our networks\nin here in here we're going to go ahead\nand add koven and in here we're going to\nwrite w\ntoken and we're going to add this\naddress of the we token past it in here\nwhile we're in here we're going to add\nthe rest of our pieces we're going to\nadd\nwallets from\nKey private key and that's all we really\nneed for now speaking of which we\nprobably are still going to want to test\nthis locally now since we've done some\nwork with testing we know that for\ntesting we can do our integration test\ninte gration\ntests of Coen because there's an\nintegration test there what about our\nlocal\ntests well this is something good that\nwe're thinking about right now we know\nthat a actually has all these same\ncontracts on the main net as well well\nand we also know that we're not going to\nbe working with any oracles because of\nthat we don't actually have to deploy\nany mocks ourselves we can if we want to\nbut we don't have to what we can do is\nfor our unit\ntests we can actually just use main net\nFork Network and just Fork everything\nthat's on the main net into our own\nlocal network so instead of actually\nusing mocks we'll basically just mock\nthe entire main net and one more time\njust so that we absolutely have it here\nif you're not working with oracles and\nyou don't need to mock responses we can\njust go ahead and use a main net Fork to\nrun our unit test if you are using\noracles then it makes a lot more sense\nto do the development Network where you\ncan mock oracles and mock Oracle\nresponses with this in mind we know that\nwe're going to be doing a lot of our\ntests on Main net Fork we can go ahead\nand add a main net Fork Network here and\nthen we can just add the main net we\ntoken for mainnet for we'll look up we\ntoken ether scan\nwith token ether\nskin and we'll grab this contract\naddress remember absolutely positively\nif you want to double check that the\ncontract address that you're working\nwith is correct I highly recommend you\ndo so because if you get it wrong you\ncould accidentally add some money to a\ncontract address that you don't\nwant so we're going to have the main net\nFork address be the we token address and\nin our terminal we can do\nbrownie networks list\nand see that indeed we have a mainnet\nfork here that's going to use the ganach\nCLI to fork mainnet for us there's\nthere's a link in the description to\nrefer back to the section where we\nactually set this up so now that we have\nthe interface we know that we can\nactually compile it down to the Abbi so\nback in our get we here first thing we\nneed to do to make any transaction\nobviously is get an\naccount well this is where we can go\nback and make our helpful Scripts\nso we can go\nahead def get\naccount index equals none ID equals none\nsame as before and if you have your get\naccount function from our last demo you\ncan just go ahead and copy paste it in\nhere all right great now we have our get\naccount function so we can do account\nnow equals get account oh but we have to\nimport it in here so we'll do from\nscripts. upful Scripts\nimport get\naccount and depending on your python\nversion we'll add an init that Pi just\nso that python recognizes that scripts\nis indeed a module all right cool so we\nhave our account where we can make some\ntransactions with now let's go ahead and\nget our we contract to do this we can\nimport interfaces from rowning\nbrowning import\ninterface same as we did\nbefore and we can do we equals interface\nI\nwe and the address here is going to be\nfrom our config\nconfig\nnetworks network. show\nactive\nthen we\ntoken we also have to import config from\nBR and network as\nwell now you might be asking why aren't\nwe using the get Contract function here\nwell you can absolutely 100% go ahead\nand use that get Contract function but\nsince we're going to be testing on\nmained Fork here I know that we're\nalways going to refer back to the config\nso I'm confident that I'm not going to\nbe deploying any mocks it's better\npractice to go ahead and use that get\nContract function but for this one we'll\njust make it a little simpler and use\nthe config and now in our Browning\nconfig if we're on the coov network\nwe're going to use this one if we're on\nmainnet or main net Fork we're going to\nuse this one for going to mainnet or for\nto real production you could also have a\nmainnet network and it'll just be an\nexact copy of the main net\nfor and remember we're going to want\nourv our EnV file our environment\nvariables to get pulled from thatv file\nso we can just set it like this now\neverything in ourv file will get pulled\nin automatically great so we have an\naddress and we have an Avi which comes\nfrom the interface now we can just call\nwe can just call this deposit function\nwhere we deposit ethereum and we get we\nso now we'll just do transaction equals\nwe dot\ndeposit and we'll do\nfrom\naccount\nvalue is going to be let's just say 0.1\nso 0.1 * 10 raised to the 18 so we'll\ndeposit 0.1 and we should get 0.1 we in\nreturn do a print F\nstring received 0.1\nwe this doesn't even need to be print\nout and then we'll just return TX now\nper usual if your environment variables\naren't set such as private key we're\ngoing to want to do that so in our em\nwe're going do export private key equals\nzerox at the beginning right here we're\ngoing to export web 3\nin\nfura Project ID we'll want to add our\nweb3 INF fura project ID which we've got\nbefore if we want to use our ether scan\ntoken we absolutely can and since we're\nputting a whole bunch of stuff in EnV we\nwant to make sure in our G ignore we\nhave EnV so that we don't actually push\nthis up to gith up again if you're\nnervous about having all these amvs in\nhere you can absolutely do the accounts.\nadd or whatever other methodology you\nlike to set your enir variables anyway\nlet's go ahead and run this script now\nso we can do brownie run scripts get W\nPi Network coin generating the abis for\nmy\ninterface we have a little transaction\nhash that we can use pop into Co and\nether scan and we can see the\ntransaction going through in our\nwallets we'll get minus .1 eth and we'll\nget plus .1 we\nwe can see it's actually been\nsuccessful to add this and see this in\nour metamask we're going to grab the\ncontract address here we're going to go\nback to metamask add token paste it in\nhere add tokens and you can see we now\nhave 0.1 we if you want to switch back\nyour weth to ethereum you would just hit\nthis withdraw function or we could\nprogrammatically add a withdraw function\nin here this withdraw function\nwill withdraw and take our ethereum out\nthe contract and burn the we that\nreplace it with we so you need to swap\nyour we back to get your eth out awesome\nwe have some we and now we have an erc20\ntoken we have an erc20 token that we can\nuse to interact with the a application\nnow that we've got this get we function\nlet's go ahead and start borrowing so\nlet's go ahead and start with our\naccount it's going to equal to get\naccount which now we're going to want to\nimport right at the top like so then\nwe're going to get our we address or we\ncan even just do our erc20 address\nbecause the we token is in erc20 and\nmaybe we want to deposit some other\nerc20 we'll do\nconfig\nnetworks network. show\nactive we token and of course we're\ngoing to have to now add from\nbrownie import Network and now we'd want\nto call this get weth Contract just in\ncase we don't already have we we would\njust add another from\nscripts. get we\nimport get we but we don't actually need\nto call it right now because we already\nhave some wrapped ethereum in our Coen\naddress now if we want to test this\nthough on our local main net Fork we\nprobably will want to call this get W so\nI'm just going to add a little if if\nNetwork got show active is going to be\nour main net\nFork we should go ahead and call this\nget we function and for brownie we're\nalso going to want to import this config\nwe'll also have to add main net Fork to\nour local blockchain\nenvironments like\nso so that when we call get a account in\nour scripts it actually knows that it's\na local environment that we're working\nwith and it will just return accounts\nzero instead of us having to actually\nload a private key in every single time\nand we want to actually wait for our\ntransaction to complete here so we'll go\nahead and add this weit and then do tx.\nweight and wait for this transaction to\nactually finish otherwise brownie will\nget a little bit mad so now that we have\nthat we can run brownie run\nscripts OB borrow to Pi Network main net\nFork so you can see that actually in\nthis case testing everything on Main net\nFork is going to give us a really really\naccurate view of what doing this on\nmainnet actually is going to give us we\ndon't have to do any mocking we can\nliterally just Fork all of main net and\ngo from there we are still going to test\non Coen though in a little bit just so\nwe can see all the transactions that go\nthrough how long it takes for stuff to\nhappen just get so now that we've gotten\nsome we here we actually need to go into\nour our second bit we're going to\ndeposit some f or an AR case some we\ninto a so how do we actually do that\nwell everything that we need is going to\nbe in this a documentation here where we\ndeposit and borrow from in a is in their\ncontract this lending pool you can see\nhere The Lending pool contract is the\nmain contract for the protocol it\nexposes the user oriented actions that\ncan be invoked in solidity in web3\nlibraries these have all of the\nfunctions that we need it has deposit\nwhere we deposit our asset as a\ncollateral withdraw where we take it\nback we have borrow we have repay and we\ncan have we have swap borrow rates uh\nand a couple other interesting ones\nwhich we'll go into later but for now we\njust really need to focus on repaying\nborrowing withdrawing and depositing so\nas you probably guessed deposit is the\nfunction that we're going to work on\nright now and since this is the contract\nthat we're going to work with as always\nthe two things you need when working\nwith a contract are going to be the ABI\nand the address so we're going to get\nthis lending pool contract we're going\nto say lending\npool equals and we're actually going to\neven make a function called get lending\npool so down below we're going to do def\nget lending\npool lending pool not poll and we're\ngoing to get the lending pool address\nand the lending pool contract so we can\ninteract with it down here now something\nabout this lending pool is that the\nlending pool address can actually change\na little bit depend depending on a lot\nof different pieces so there's actually\nthis address provider which gives us the\naddress of a specific or particular\nMarket if we go back to this a UI\nthere's actually different markets so\nthere's different types of ways we can\ninteract with a we're just going to work\nwith the basic a V2 because it's easily\nthe most used on mainnet as well the\naddress provider registry will give us\nso this address provider will give us\nthe address of the lending pool for our\nMarket if we want to go across different\nmarkets we'll have to to go to the\naddress provider registry to find it but\nthe addresses in here don't change and\nthe addresses in here don't change it's\njust the lending pool address itself\nmight change so we just have to go to\nthis address provider here and there's\njust one function that we need to work\nwith it's this get lending pool which\nwill give us the address of the actual\nlending pool so don't let this confuse\nyou too much basically all we're trying\nto do is we're saying hey where is a\nlocated right now and a has a contract\nthat will always tell us where the main\na contracts are and that's this\naddresses provider right here so this is\nanother contract that we have to work\nwith and again when we have a contract\nwhat do we need we need an\nNai and we need an address so we can\nabsolutely once again we could go ahead\nand and you know copy paste like AB\nequals whatever the ABI is but we're\njust going to use an interface because\nbecause life is great with an interface\nso a couple of great things about\ninterfaces to if we know we're only\ngoing to work with one or two functions\nwe can actually just make the interfaces\nourself so in interface we could do new\nfile we could do I lending\npool address provider. soul and we can\njust add it in here oursel so we'll\nfirst do\nspdx\nlicense\nidentifier we'll do like MIT or\nsomething do pragma solidity\n0.6.0 or whatever we want to do and then\nwe'll do do\ninterface\nI lending pool addresses\nprovider EXC me this should be lending\npool\naddresses\nprovider and we know that there's only\none\nfunction called get lending\npool and we're not exactly sure what get\nlending pool is defined as but what we\ncan\ndo so we can go to\nether scan ether scan a lending pool\naddresses you can see here this is\nactually the lending pool but what we\ncan look at is the a protocol we can go\nright to the GitHub we go to\ncontracts you can see they have an\ninterfaces\nsection and they have this lending pool\naddresses provider get lending pool and\nkind of as we expected it's an external\nView and a returns and address so we can\nliterally just copy paste this and here\nand we could run with this and this\nwould work perfectly fine but this leads\nus to the next point we might as well\njust grab the whole thing this way we\nknow for a fact we're not getting\nanything wrong but yes if we wanted to\nour interface could be this right\nbecause this is going to compile oh\ncould be this because this interface is\ngoing to compile down to an ABI and the\nABI is going to say hey there's a\nfunction here and that's all the ABI is\nreally doing it's just telling us how we\ncan interact with contract but let's\njust go go ahead and add everything so\nthat if we want to interact with more\nthings we can so now we have the ABI we\nalso now need an address which we can\ndefinitely find from the a documentation\nwe can go to their deployed contract\nsection we can find lending pool\naddresses provider is going to be right\nhere we're going to copy\nthat and where are we going to put this\nwell as you know we're going to put this\nin our brownie config we're going to do\nlending\npool address is\nprovider going to paste that right there\nand since we know we're also going to do\nCoen we can also grab from Coen here so\nlending pool addresses\nprovider we're going to copy this\nhere\ndo and we're going to add this addresses\nprovider for Coen as\nwell boom now we have it for both koven\nand for Main Fort awesome so so we can\nkeep going now now that we have an AI\nand we have an address for both Coen and\nfor our mainit mainit Fork what we can\ndo now is we first get the lending\npool addresses\nprovider it's going to be from our\ninterface which again we're going to\ngrab from\nbrownie interface. I lending\npool address is\nprovider which the address of that is\ngoing to be\nconfig\nnetworks network. show\nactive\nlending\npool addresses provider and then we're\njust going to say lending pool address\nit's going to be equal to lending pool\ngoing to copy and paste it instead of\ntyping the whole thing add address\ndivider provider. get lending\npool right because again this address\nprovider has this get lending pool which\nreturns this address which is the\naddress of the lending pool then now\nthat we have this address we can\nactually return the lending pool\ncontract by once again getting the\nABI and the\naddress of the ual lending pool so we\nhave the address check we just now need\nthe API which once again we can work\nwith our wonderful interfaces here do\nnew file I lending pool so and there's\nonly going to be a couple of functions\nwe're going to work with here but a\nactually gives us the interface right\nhere and uh a actually even gives us the\ninterface The Lending pool address\nprovider for us so we can go ahead and\ncopy this pop it over into here now we\ndo need to actually change change one\nthing in here as well this interface\nImports locally with this slash so we\nactually just need to change these\nImports to actually import directly from\nGitHub instead of importing locally\nluckily this is something we already\nknow how to do so let's go to our\nBrowning\nconfig and up at the top we're going to\nadd this dependencies bit in\ndependencies so we're just going to work\nwith A's protocol right from GitHub so\nso we're going to work with\naprol\nV2 and let's see what their latest\nversion is looks like they got a couple\ndifferent versions here\n1.0.1 so let's go ahead and work with\nthis one at\n1.0.1 and then with\ncompiler\nsulk\nremappings per usual we're going to say\nat\na is going to be equal to this\ndependency this way brownie will\ndownload this right from GitHub and now\nwe can just use this at a instead so\nback in our ilending pool. soul we can\njust change this to pull right from\nGitHub and if we look in\nGitHub go to their contract section go\nto their interfaces\nsection I lending pool we know that\nwe can pull this\nfrom a SLC contracts SL\ninterfaces because we see this ey\nlending pool addresses provider right in\nhere and then this data types bit you\ncan actually look in\ncontracts this I know because I've been\nthrough already it's in\nprotocol\nlibraries\ntypes here it is Data type. so we can\njust take this exact path again and do\nat a SL\ncontracts SL\nprotocol SL\nlibraries types datat type. okay great\nso now that we've actually imported this\ninterface for us to use we can go ahead\nand compile just to make sure that\neverything is working correctly brownie\ncompile and perfect if these interfaces\nhad an issue they actually wouldn't\ncompile through brownie here so we know\nthat they're compiling correctly but\ngreat so now that we have an interface\nwe know that these interfaces compil\ndown to the ABI and we already have the\naddress here so to actually interact\nwith the lending pool now we can just do\nlending\npool equals\ninterface DOI lending\npool We'll add this lending pool address\nlending pool and then we can return\nlending pool so now we have a function\nthat goes through the lending pool\naddresses Provider from the a\ndocumentation and returns this lending\npool contract that we can now interact\nwith and we can even test this out by\njust printing this lending pool address\nin our script so we'll do brownie run\nscripts aarrow Network main net\nfork and perfect we we can see the\naddress here is printed out and there no\nerrors so we know we're doing it right\nso now that we have the actual address\nwhat we're going to do now is we're\ngoing to take this wrapped ethereum that\nwe've got this erc20 version of ethereum\nand we're going to deposit it into this\ncontract just like what we did in the\nuser interface in order to actually\nfirst deposit it we need to approve this\nerc20 token erc20 tokens have an approve\nfunction that makes sure that whenever\nwe send a token to somebody or whenever\na token calls a function that uses our\ntokens we actually have given them\npermission to do so so that's the first\nthing that we're going to actually have\nto do is we're going to have to approve\nsending our erc20 tokens and this\nresembles so since I know that we're\ngoing to have to approve a lot I'm\nactually just go and go ahead and make\nan approve erc20 token function similar\nas to what we did with the get lending\npool so we're going to need to approve\nthis erc20 so we're going to need to\napprove this C20 so let's go ahead and\nmake a function we'll call it def\napprove erc20 so how do we actually call\nthis approve function on a token\ncontract well as always we're going to\nneed the\nABI and the address of the token\ncontract same as always I told you I was\ngoing to be saying this a lot now we\ncould create our interface ourself\nlooking at all the functionalities of\nthe erc20 tokens so we could go to EIP\n20 look at the token standard find all\nthe different functions and put them\ninto our interface or we can go ahead\nand just cheat and just grab it from my\nGitHub repository here so I already have\nan ic20 doou right here and we're just\ngoing to copy everything in here and add\nit in a new file called\nic20 do soul and paste it in here so you\ncan see there are number of different\nfunctions in here we can check the\nallowance we can check the balance of\ndifferent addresses how many decimals a\ntoken has the name the symbol we can do\nsome transfers and transfer from and\nthen the function that we're going to be\nusing is this approv function so right\nhere we can already see the parameters\nthis approved function takes we're going\nto need to have a spender of who to\napprove can spend our tokens and then\nhow much they can actually spend so if\nwe come back over to approve erc20 we\nknow that for input parameters we're\nprobably going to need an amount a\nSpender address the erc20 token\naddress so which token we're actually\nallowing to\nspend and then an account right or this\nis going to be that\n[Music]\nfrom account bit so we'll just have this\nbe passed as part of the function\nparameters so let's go ahead and code\nthis let's first just do a Quick Print\nline so that people know what this\ntransaction is doing we say\napproving erc20\ntoken and then we'll get the erc20 token\nby saying ERC equals interface same as\nalways I\nerc20 and we'll give it whatever erc20\naddress that we pass to this function\nand now we can actually interact with\nthis contract and we can call that a pro\nfunction so we'll say transaction TX or\nagain TX usually stands for transaction\nequals\nerc20 approve and we're going to approve\nmove this spender\nfor an amount then we'll say\nfrom count we'll do a tx. we we'll wait\none block confirmation for it to finish\nand then once it's done we'll do\nprint approved and we'll return the\ntransaction awesome so now we have an\napprov erc20 function that we can use to\napprove any erc20 token so back up at\nour main function we can run approve\nvc20 for some amount which right now we\ndon't have\ndefined the spender is going to be this\nlending pool but the address of the\nlending pool because remember lending\npool is the entire contract we just want\nthe address the erc20 address of course\nis going to be the erc20 address and the\naccount of course is going to be our\naccount the only thing we don't have\ndefined right now is some amount which\nwe can make it really whatever we want\nto be to keep things standard let's just\ngo ahead and do 0.1 so I'm going to make\nthis a global variable say amount\nequals one 1 2 3 4 5 six 7 8 nine 10 1 2\n3 4 5 six 7even and we can go ahead and\ndo amount we're going to all these zeros\nincredibly disgusting so we're just\ngoing to refactor to do from web import\nweb and then instead of always we'll\njust\ndo 0.1 ether 0.1 which is the amount\nthat we actually want we'll say ether\nnow we can run brownie run scripts a\nborup network main net\nfork and we can go ahead and see that\nour approval function is working as\nintended Network that will always\nwhenever we run any type of can get a\nlittle Annoying let's go ahead and\nchange our default Network to main net\nFork so we don't have to do any network\nour Browning let's go back to our a\nborrowing section now so we have\neverything approved now we just need to\ngo ahead and deposit it into a\nsince we know we're probably going to\nuse this a lot too let's go ahead and\ncreate a deposit function since we have\neverything approved we can now go ahead\nand use the lending pool deposit method\nand we can check the documentation here\nor look on GitHub or ether scan to see\nwhat the parameters that it takes are so\nI'm even just going to go ahead copy all\nthis bring it over\nhere so what we can do now we can do\nlending\npool do deposit\nand then all these parameters let's go\nahead and walk through them one by one\nso first thing is going to be the\naddress of the asset which we know is\ngoing to be our erc20 address Boom the\namount of the token which we can go\nahead with our amount\nvariable address on behalf of is just\ngoing to be our account. address we're\ndepositing this collateral for ourselves\nand then referral code so refer referral\ncode is so the referral code is actually\ndeprecated and referral codes don't\nactually work anymore so we're just\nalways going to pass it zero here and\njust to make sure we know that this is\nwhat we're doing we're going to go ahead\nand print\ndepositing two three and then after\nwe're done we're going to do\nprint T and whoops looks like we forgot\nto add that final dictionary here of\nfrom\naccount ah one more thing thing here\nlet's go ahead and do TX for transaction\nequals lending pool. deposit and we're\ngoing to go ahead and once again we're\ngoing to wait for one block confirmation\nwait one transactions still being\nprocessed so now if we run brownie run\nscripts of a borrow.\npi we can see that this actually went\nthrough fine all right now that we have\nsome collateral deposited we can go\nahead and actually take out a borrow we\ncan go ahead and borrow some other asset\nquestion is going to be how much how\nmuch can we actually borrow how much\nshould we borrow what would result in a\npositive Health Factor well maybe we\nshould actually pull off chain some of\nour stats how much do we actually have\ndeposited how much collateral we have\nhow much debt we have and so on and so\nforth that way in the future when we\ndon't start clean we can take some\ninventory of where we stand with our\ncollateral and our debts at the a\ndocumentation we can go ahead and see\nthis this function\ncalled get user account data this is\ngoing to return the user account data\nacross all reserves so it's going to get\nthe total collateral that we've\ndeposited in terms of ethereum it's\ngoing to get our total debt in terms of\nethereum how much we can borrow the\nborrowing power that we have the\nliquidation threshold or how close to\nthat liquidation threshold will be the\nloan to value ratio and again this\nhealth Factor this health factor is\nobviously incredibly important because\nif it drops below one or reaches one one\nusers can call this liquidation call now\nthis function returns all these\nvariables but for now we really only\ncare about how much collateral we have\nhow much debt we have and how much we're\navailable to borrow so let's go ahead\nand write a function that will actually\nsort that out for us we'll call it get\nborrowable\ndata\nborrowable data so let's go ahead and\ncreate this def get borrowable\ndata and we're going to pass in The\nLending pool as a first parameter and\nthen the account as a second parameter\nbecause we're looking to call this\nfunction on the lending pool from an\naccount so let's go ahead and just call\nthat function so we'll do lending pool\ndoget user account data and we'll pass\nin account. address because if we look\nat the API again all that it needs is a\nuser's address to get started here and\nit returns one two 3 four five five six\nvariables so we can go\nahead and get all of them with this\nTuple syntax here so we'll say\ntotal collateral\ne total debt\neth available borrow\neth\ncurrent\nliquidation threshold loan to value and\nthen the health\nFactor so it's with this syntax here\nthat we can actually get all of these\nvariables with this one call and again\nthis get user account data is a view\nfunction so we don't need to spend any\nguess all of these variables are going\nto get returned in terms of way so let's\njust go ahead and convert these from way\nto something that makes a little bit\nmore sense to us so we want to get this\navailable borrow e so we can figure out\nhow much we can borrow let's get that in\nterms that we can actually understand\nstand so we'll do\nfway available borrow eth in terms of\nether we'll do total collateral eth\nequals web 3. from\nway we'll do total collateral eth\nether ether and then we'll do total Deb\neth equals same thing web 3. from\nway total debt eth terms of ethers and\nlet's even do a little print F statement\nfor each one of these so we'll do print\nF this F allows us to put variables\ninside the print function and we'll say\nyou\nhave total collateral\neth\nworth of eth\ndeposited we'll even copy paste that a\ncouple times and we'll change this one\nto total debt e and we'll change this\none one\nto available ar e so we'll say you have\nworth of e deposited you have total\ndeath e worth of f\nborrowed and you can\nborrow avilable bar e worth of\neth and then we're going to go ahead and\nreturn again we're going to use this\nTuple syntax so we can return two\nvariables and we're going to say a\nfloat of this available borrow\ne and a\nfloat of the total debt e the reason\nthat we have to add this float variable\nhere is that without it some of the math\nthat we're going to try to do later\nwon't pan out as well so now we have\nthis function get borrowable data we're\ngoing to pass the lending pool and we're\ngoing to pass our account here since\nwe're\nreturning the borrowable eth and the\ntotal debt we can say\nborrowable eth and then total\ndebt equals that function right there so\nlet's go ahead and try this\nout with BR run scripts a pi\nagain because in our config we have a\ndefault network of mainten\nfork things seem to be approving things\nseem to be depositing and awesome we\nhave we have our output here we\ndeposited 0.1 worth of f we have zero f\nborrowed and we can borrow 0.8 worth of\nf yes this is correct even though we\nhave 0.1 F\ndeposited we can only borrow\n0.08 this is because the liquidation\nthresholds of different assets are\ndifferent in this risk parameters\ndocumentation here we can see the\ndifferent liquidation thresholds on the\ndifferent assets we can see that\nethereum has an 80% loan to value so\nwith ethereum we can only borrow up to\n80% of the deposit assets that we have\nand if we have more than 82.5% borrowed\nwe'll actually get liquidated it also\ntells about the liquidation bonus\nReserve factor and some other helpful\npieces in here as well but now that we\nhave this borrowable eth amount we can\ngo ahead and actually borrow some Dy so\nlet's do a Quick Print saying let's\nborrow now in order for us to borrow\nsome Dy we also need to get the\nconversion rate we need to get die in\nterms of f so we're going to have to use\nsome price PR feed here luckily we\nalready know how to work with chain link\nand how to get price feeds a uses the\nchain link price feeds as well so we're\nusing the exact same conversion rate\ntools that AI is going to use so let's\ngo ahead and create a function to get us\nthis conversion rate we'll say the die\nto f price is equal to get asset price\nand then in here we'll pass the die f\nprice feed this will be the address of\nthe die ethereum conversion rate let's\ngo ahead and create this function call\ndef get asset price and the parameter it\nneeds is going to be price feed address\nso the first thing that we're going to\nneed is we're going to need to get this\ndie f price feed where can we get this\nwell as we know re usual we head over to\nthe chain link documentation we'll go to\nethereum Price feeds we'll find we grab\nthis and we'll paste it into our config\nfor main net so we can go ahead and add\nthe die f price feed in here and paste\nit into our config again if we want to\ntest this with Coen we can obviously\njust scroll\ndown for koven find the dth right here\ngrab that address pop it in for\nkoven and then we can get this the same\nway that we got the address of the we\ntoken so I'm just going to go ahead and\ncopy\nthis paste it here but instead of having\nwe token in here do do\nf price feed and now we have a way to\nchange the price feed address depending\non what network want so in our get asset\nprice function we're going to do the\nsame exact thing that we always do we're\ngoing to grab an ABI and an address to\nwork with the contract so again we can\nget the ABI by just working directly\nwith the interface so we'll say die\nf price\nfeed equals interface\ndot aggregator B3 interface because this\nis the name of the price feed\ninterface which again if we look at our\ninterfaces it looks like we don't\nactually have so what we can do is we\ncan go to the chain link GitHub or uh as\nyou guys are already starting to figure\nout all my example code has all these\ninterfaces as well but we can go right\nto the source too what we can do we go\nhere we go to\ncontracts we get to add Source we do 0.6\nthrough interfaces and right here is the\naggregator V3 interface so if we want we\ncan just copy this whole thing move back\nover to our interfaces new file and this\nfile is actually named aggregator V3\ninterface you could call it I aggregator\nV3 or aggregator V3 interface you could\nkeep it with I agregator v3. soulle to\nkeep with the convention that we have or\nyou can just call it\naggregator V3 interface. so\nto keep in line with what the chain link\ncode is actually called it I'm going to\ncall mine aggregator V3 interface you\nnotice a couple different projects have\na couple different conventions but now\nthat we have it saved we can do\ninterface. aggregator V3 interface and\nwe'll pass it this price feed address\nnow this dief price feed is going to be\na contract that we can call a function\non again we can always refer back to get\nthe latest price documentation to see\nhow to actually work with it there's\neven some python code here for working\nwith it in web 3 we're going to go ahead\nand call this latest round data function\nwhich we can also find in our aggregator\nV3 interface this latest round data\nwhich returns a round ID answer started\nat ended at and answered and round all\nwe're really concerned with is this\nanswer bit here so the way we can do\nthis is we can say latest price equals\ndie dieth price feed that latest round\ndata and instead of grabbing all five of\nthese one two three four five what we\ncan do is we can actually just\ngrab the price which is at the one index\nso round ID is at zero price is at one\nstart at two Etc so we can just\nsay the first index and then we can\nreturn a\nfloat of this latest price you can even\nprint another print F statement the die\nf price is\nlatest price so let's go ahead and run\nthis and great we have the dieth price\nfeed here which of course we know that\nlooking at this right now this isn't in\nthe right units we know that th f price\nfeed has 18 decimal places so what we\ncan do then is we know that this number\nwould be 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5\n6 7\n8 this number is really 0. Z for blah\nblah blah blah blah so maybe we don't\nwant to return it like so maybe we want\nto say the dieth price feed is and we\nadd a little bit of web 3. pi to make\nthis make a little bit more sense so\nwe'll say web 3. from way we'll add this\nlatest price bit in here comma\nether maybe we'll even do a\nconverted latest price which is going to\nbe equal to web 3 that from way latest\nprice ether and we'll print that out\ninstead so let's go ahead and run this\nagain all right that looks a little bit\nmore accurate perfect okay great now we\nhave the die e price we're getting\nreally close to being able to borrow\nthis actual asset and let's even return\nthis converted lated price here just so\nthat we're always working in units that\nwe understand okay now we're getting\nsomewhere now we can calculate the\namount of die that we want to borrow we\ncan find this by doing a little bit of\nmath we're going to do the reciprocal of\nthe die e price\ntimes our borrowable eth and just to be\nsafe we're going to times it by\n0.95 so this line we're converting our\nborrowable eth to borrowable D and then\nwe're timesing it by 95% we're timing it\nby 95% because we don't want to get\nliquidated so we're going to be a little\nbit more C cous remember how we slid\nthat sliding scale around to make it\nsafer and less safe well the lower\npercentage that we actually borrow maybe\nwe even borrow 50% of our collateral the\nsafer that we're going to be so keep\nthat in mind when you're deciding how\nmuch to actually borrow if you want to\nrun this in a production environment so\nnow that we have this amount die to\nborrow let's even print it out let's say\nprint F we are going to\nborrow amount dat to borrow die and then\nwe're finally going to do it now we will\nborrow looking at the a documentation we\ncan look at their borrow function and we\ncan see the API here let's go ahead\nlet's go ahead and call this function so\nwe'll do borrow transaction it's going\nto be equal to lending pool. borrow\nlet's look at those parameters so the\nasset that we want to borrow die address\nso first we should get a die address\nwhich we can once again we'll want to\nput in our config so we'll go over to\nour config and we'll add a die address\nor a die token here which we can find on\nether scan die token it looks like this\nis the token right here so we'll copy\nthis address for main net remember if\nyou want to run this on coven you're\nalso going to need to have a die token\nfor koven now on test Nets a actually\nchanges up where the tokens for its test\nNets are actually going to be so if we\ngo to their documentation we go to\ndeployed\ncontracts and we go to Coen here you'll\nalways see this little flag thing pop up\nsay always ensure you're using the\nlatest lending pool address since koven\nis updated from time to time it's going\nto be the same thing if we scroll down\nfor tokens they have an upto-date list\nof Coen addresses in adjacent file here\nso it looks kind of gross but if we look\nup die we can see symbol die and the\naddress of die on the Coen test net so\nsometimes this does change so if you run\ninto an issue maybe it's because the die\ntoken that you were working with on\ntheir Co test net has actually changed\nthen we're going to do config\nnetworks network. show\nactive die token great now let's move on\nto the next parameter the amount which\nwe just figured out here amount died to\nborrow which we do need to change back\nto way so we're going to do Web 3. Two\nWay amount datab borrow ether because\nright now amount datab borrow is in our\nhuman readable version which we need it\nin\nway then our interest rate mode which is\ngoing to be stable or variable stable is\nwhere the interest rate will always be\nexactly the same variable will change\ndepending on a lot of different things\ngoing on with a for safety we're just\ngoing to go ahead and add one here then\nwe're going to do a referral code and on\nbehalf of so referral codes no longer\nexist so we'll leave zero it's going to\nbe on behalf of\nourself so we'll do account. address and\nthen of course we have to do a\nfrom account then we'll wait for this\ntransaction to complete and if we' done\nthis right we should have borrowed some\ndie programmatically from the a protocol\nso let's even\nprint borrowed some\nD and we can once again call our get\nborrowable data\nfunction since this get borrowable data\nfunction will print out our new count\ninformation for how much we borrowed so\nlet's go ahead and run this on mainit\nFork\nagain awesome so if we've done this\ncorrectly we now see that we've borrowed\nsome die so we can see here we now have\n0.1 worth of f deposited\n0.059 999 worth of f\nborrowed uh and we can borrow a little\nbit more worth of F this 0.759 N9 is\nactually\nthe Dy that we've borrowed so we've\ndeposited some eth and we've borrowed\nsome dye and obvious telling us how much\nthat Dy converted to e is there so we\nactually borrowed 160 D which is great\nall right we've now learned how to\nborrow everything which is fantastic\nlet's go ahead and actually repay that\nback so we're going to call their repay\nfunction and let's just put this into\nits own function called repay all and\nwe'll give it the amount that we want to\nrepay The Lending pool address and our\naccount so let's call let's define repay\nall or we're just going to repay\neverything that we have and again we're\ngoing to add an\namount lending\npool an account for parameters so if\nwe're going to pay back this network\nfirst thing that we need to do is\nactually call the approve function and\nto prove that we're going to pay back so\nthe first thing we're going to have to\ndo per usual is we're going to actually\nhave to approve that erc20 so let's say\nhow much we're going to approve web 3.\n2way\namount ether to The Lending\npool and we'll grab it from the\nconfig\nnetworks network. show\nactive this is going to be the die token\nagain\nand of course with our account I believe\nour approve erc20 already calls weight\nso we don't have to call it here so once\nwe approve we're going to be using this\ndie that we borrowed to pay most of what\nwe have borrowed back now we're going to\ncall the repay function so we'll say\nrepay TX equals lending pool.\nrepay first we need the asset that we're\ngoing to use to repay which we're going\nto use config\nnetworks network. show\nactive die token the amount which it's\ngoing to be passed in here amount the\nrate mode which we've hardcoded to one\nand the address on behalf of which going\nto be account. address then of course we\nalways have to do front\ncount then we're going to do repay\ntx. weight we're going to wait one block\nconfirmation and then we'll print\nrepaid and if we've done all this right\nwe'll do one more print line saying you\njust\ndeposited\nborrowed and repaid with\na brownie and chain\nlink all right most moment of truth\nlet's see if this\nworks oh we did it repaid you just\ndeposited borrowed and repaid with a\nbrownie and chain link awesome work now\nif you want to what we can also do is we\ncan see if this will work with our\nwallet address here so what I can do is\nI can copy my address go to Coen ether\nscan and paste it in here right now we\ncan see that I have a whole bunch of\nlink and some ether what I can do is\nactually test everything that we just\nran through on the coven test scent and\nsee everything happened right on this\nether scan address so if we've been\nfollowing along correctly and we've\nadded contract addresses appropriately\nwe should be able to run the exact same\nscript on the Coen testnet I'm going to\ndo one additional thing here though\nI'm going to have us not repay so we can\nsee us with a little bit of debt so\nlet's go ahead and run brownie run\nscripts aapi and we'll change to network\nCoen and now it's going to take a lot\nlonger as we've seen before because\nwe're actually making these transactions\non a real Network whoops it looks like I\ngot one of the dief price feeds wrong\nfor Coen so I can once again just go\nover to the\ndocumentation do\nf it looks like this is the real address\nfor Cen so we'll copy that paste it in\nhere whoops we should also probably have\nsome we token so first let's go ahead\nand run our get W script for Coen and\nwe're going to change this account to\nget account brownie run scripts get w. p\nnetwork COV from our helpful scripts\nthat way we can actually that way we can\nactually use our wallets correctly all\nright great so now we have 0.1 we and\nactually again what we can do is grab\nthis address\nhere add token paste it in add tokens\nfor the we token now we can see we have\n0.1 we which is perfect so now that we\nhave some weth we can run the borrow\nscript a brownie run\nscripts a borrow Network\nCoen and wow we can see that everything\nwent through correctly and successfully\nso since I actually commented out this\nrepay function we still should have die\nin our address here in our wallet here\nand again we can see that by going to\nour brownie config grabbing this die\ntoken address add token custom token\ntokens next add tokens and we can see we\ndo indeed have 160 die in our wallet we\nhave no we since it'll be in a now and\nwe have borrowed die instead can also\nsee that we now have this AE if we added\nit from when we were working with the UI\nwe have this interest bearing we instead\nof regular WAP ethereum let's look at\none of these\ntransactions we can see that our borrow\ntransaction gave us some stable debt\nbearing Dy and also some Dy so we owe a\nsome Dy from this debt we got some debt\nwe got some die and we gave out some a\ninterest bearing die to the rest of the\na protocol you'll notice now if we go to\ntest net. a.com D dashboard we'll see\nexactly what our script just did we have\n160 die borrowed and we have 0.1 e\ndeposited if we want to repay our funds\nwe can do it with our current collateral\nor from our Wallet balance and you'll\nnotice something if I try to repay\neverything from my wallet all the DI\nthat I've actually borrowed you'll\nnotice we don't have enough funds to\nrepay the full amount this is because\nsince we actually borrowed a little bit\nwe've inced some of that interest so we\nactually owe more back than we\noriginally borrowed that's how the loans\nwork so when you're designing this repay\nfunctions be sure to have that in mind\nyou can also have your repay be minus\none to repay the entire debt it's\nrecommended to send it an amount\nslightly higher than the current amount\nborrowed but in any case maybe we say we\nwant to do from our current wallet we'll\nhit Max but maybe we want to actually\njust repay with our current collateral\nwe can go ahead and repay the maximum\namount again we could do this all from\nthe UI we'll approve and this is exactly\nwhat our repay function actually did and\nnow we're all repaid up we go back to\nour dashboard and we hit refresh we'll\nsee we just have a tiny bit of ethereum\nand no more borrowed assets\nawesome you've essentially learned\neverything that we need to go through\nfor here this is a massive step forward\nin teaching you how to become\nquanitative dii Wizards and build really\nrobust applications and really robust\nFinancial applications in the defi world\nnow something I want to point out even\nthough this isn't a python course and\nwe're teaching more about solidity and\nsmart contracts it's still in your best\ninterest to test these functions yes I\nknow they're python functions but it's\nstill going to be in your best interest\nto test them to make sure your\napplication always works as you expect\nit to now I'm not going to go through\nthis testing Suite that I put here but\nit's a really simple testing Suite to\ntest some of the different functions\nthat we created it can be really helpful\nespecially for something like get asset\nprice where the math might be a little\nbit off and you want to make sure it's\ncorrectly again Link in the description\nto seeing some of these tests this is\nactually going to be even easier than\nthat Lottery contract that we did since\nwe're just testing python functions and\nagain you can test these all with\nbrownie test\nall right you are all doing\nfantastically now is another fantastic\ntime to take a break go for a walk get\nsome food because our next session our\nnext lesson we're going to be learning\nabout nfts how to build them use them\nand deploy\nthem look nfts are hot right now nfts\nalso known as ERC 721s are a token\nstandard that was created on the\nethereum platform nfts stands for\nnon-fungible token and is a token\nstandard similar to the erc20 again\nerc20 is like link a maker all those\ngoodies that are found on the ethereum\nChain an nft or a non-fungible token is\na token that is non-fungible this means\nthat they are starkly unique from each\nother and one token isn't\ninterchangeable with any other token of\nits class a good way to think about it\nis$ one is interchangeable with any\nother dollar $1 is going to have the\nsame value of another dollar those are\nfungible tokens that's like ERC 20s one\nlink is always going to be equivalent to\none other link by contrast is going to\nbe nfts those of you nerds out there\nwould know like a pokemon would be a\ngood example of an nft your one Pokemon\nis going to have different stats\ndifferent move sets and isn't\ninterchangeable with any other Pokemon\nor maybe a more relatable one is like a\ntrading card a unique piece of art or\nthe like so that's what these nfts are\nthey are nonf fungible\nnon-interchangeable tokens that for the\nmoment are best represented or thought\nabout as digital pieces of art that are\nIncorruptible and have a permanent\nhistory of who's own them who's deployed\nthem Etc now like I said nfts are just a\ntoken standard so you can actually make\nthem do much more than just be art you\ncan give them stats you can make them\nbattle you can do really unique things\nwith them you can do pretty much\nwhatever you want with them but right\nnow the easiest way to think about it\nand the most popular way to think about\nit is by calling them art OT\nit's OD or some type of collectible or\njust anything that's unique now they've\nbegin getting a ton of Buzz recently\nbecause we've been seeing more and more\nof these being sold at insane prices\nlike we saw ax Infiniti sell nine plots\nof their land nine plots of their unique\nland for $1.5 million we also saw the\noriginal creator of the neon cat you\nknow this\ncat sold for like 300 eth so like I said\nthey're just tokens that are deployed on\na smart contract platform and you can\nview them on different nft platforms\nlike openc or rable and these are the\nnft marketplaces that let people buy and\nsell them you obviously can do that\nwithout these marketplaces because it's\na decentralized but they help and give a\ngood user interface so that's the basic\ngist of it let's talk some more about\nthe standards the ERC 721 standard or\nthe nft standard this is the basis of it\nall there is another standard that's\nsemi fungible tokens the 1155 we're not\ngoing to talk about that here but you\ncan check it out the main differences\nbetween a 721 and an erc20 on erc20 is\nthey have a really simple mapping\nbetween an address and how much that\naddress holds 721s have unique token IDs\neach token ID has a unique owner and in\naddition they have what's called a token\nURI which we'll talk about in a minute\neach token is unique each token ID\nrepresents a unique asset so since these\nassets are unique and we want to be able\nto visualize them and show what they\nactually look like we need to define\nthose attributes of the object if it's a\npiece of art we need a way to define\nwhat that art looks like if it's some\ntype of character in a game we need a\nway to define that character's stats in\nthe nft this is where metadata and token\nUris come in so if you know anything\nabout ethereum you know that sometimes\ngas prices can get pretty high\nespecially when it comes to storing a\nlot of space it can get really really\nexpensive so one of your first questions\nmight be well are they storing these\nimages and and these art pieces on chain\nand the answer is sometimes back when\nthey were coming up with nfts and\nartists were deploying stuff the eevs\nand the artists were like yeah art let's\ndo that art I'm just going to deploy\nthis one megabyte image onto the\nethereum chain and oh God it's so much\ngas expensive how do I delete button how\ndo I it's not um it's not delting and\nthey realized that if they put all this\nart on chain it was going to be\nincredibly expensive so to get around\nthis what they did is they put in the\nstandard What's called the token URI\nthis is a universally unique indicator\nof what that asset or what that token\nlooks like and what the attributes of\nthat token are and you can use something\nlike a centralized API or ipfs to\nactually get that token URI typical\ntoken URI has to return something in\nthis format like this where it has the\nname the image location the description\nand then any attributes below now if\nyou're like me your first question would\nprobably be wh PA from a single Source\nseems pry\ncentralized this is a current limitation\nof the nft ecosystem there is often this\ntalk of on onchain metadata versus\noffchain metadata because it is so much\neasier and cheaper to store all your\nmetadata offchain a lot of people will\nuse something like ipfs that is\ndecentralized but does take a little bit\nof centrality to keep persisting but\nthey can also use their own centralized\nAPI however obviously if that goes down\nthen you lose your image you lose\neverything associated with your nft\nbecause of this most nft marketplaces\nactually can't and won't read off\nonchain attributes or onchain metadata\nbecause they're so used to looking for\nthe token URI obviously if you do\noffchain metad data you can't do\nanything really cool or really\ninteresting or have any games with your\nnfts for example if you wanted to create\nan onchain Pokemon game all your\nattributes would need to be on chain in\norder for your Pokemon to interact with\neach other because if it was offchain\nthen that becomes a lot harder to\ncryptographically prove so if you're new\nwith nfts and you're like wait this is\nkind of a lot of information I'll make\nit easy for you if you're looking to\nrender an image of an nft add your image\nto ipfs add a metadata file pointing to\nthat image file on ipfs and then grab\nthat token URI and put it and set up as\nyour nft the chain link D and D article\ndoes a great job of walking you through\nthis and showing you how to do this so\nbe sure to read that if you're looking\nto learn how to do that so all the code\nthat we're going to be working with is\nactually available for you in this nft\nmix brownie mix it's an official brownie\nmix and it allows us to deploy these\nthree adorably cute dogs and there are\ntwo different types of contracts that\nwe're going to be working with we're\ngoing to be first working with a simple\ncollectible and then we're going to work\nwith an advanced collectible the simple\ncollectible is going to be a very simple\nERC 721 standard we're not going to\nreally add any bells and whistles other\nthan give it like a name and then our\nAdvanced collectible is going to take\nadvantage of some of those more advanced\ntrue scarcity features that we were\ntalking about so protocols like avag GOI\nand ether cards use chain link vrf to\nget verifiably random numbers to create\nverifiably scarce nfts something that's\nimportant to keep in mind is that in the\nreal world when companies create trading\ncards there's no way to prove how scarce\nor how valuable these training cards\nactually are if we use a verifiable\nrandom number then whoever is deploying\nthese nfts can't even control how rare\nthese nfts really are so we get this\nverifiable scarcity and this verifiable\nRarity which adds some value to the\ntokens if you want to just go ahead and\nwork right from the brownie mix you can\nactually just run brownie bake nft\nmix and then CD into\nnft and all of our code is going to be\nright in here we're going to go through\nand deploy and develop everything from\nscratch because we're going to actually\ntake some previous Concepts that we've\nlearned improve on them and we're going\nto learn a lot of nitty-gritty\ninteresting pieces about making this\nhybrid smart contract because these nfts\nreally are a perfect example of a hybrid\nsmart contract they have some offchain\ncomponent interaction with a random\nnumber and rest storing their metadata\nwith ipfs and I'll explain ipfs a little\nbit more in depth as we go on here so\nlet's go ahead and get to it I'm going\nto go ahead and make a new directory\ncalled nft demo I'm going to CD into\nit\ncode period and perfect I have a blank\nproject here and you already know what\nthe first step we're going to do is is\ndo Brownie and knit to create our blank\nbrownie repository now let's go ahead\nand create our first contract we'll call\nthis\nsimple collectible doou since this is\ngoing to be since this is going to be a\nsimple collectible a simple nft that\nwe're going to get started with now\nsimilar to the erc20 this ERC 721\nstandard has a number of functions that\nwe can actually work with we can go\nahead and even look at the 721 the ERC\n721 non-fungible token standard on the\ne.e. org website and we can see a sample\ninterface and some sample events and\nsome functions and kind of everything\nthat we've grown to know and love and\nonce again instead of us kind of\nrecoding copy pasting all this from\nscratch we're going to be using we're\ngoing to be using open Zepp ERC 721\ndocumentation for this now we're going\nto be working with version 3.x there is\na version 4.x that has come out using\nversion 3.x of their open Zeppelin\ncontracts is also I think a little bit\neasier to explain but again those of you\nwant to challenge yourself definitely\ntry their 4.x version so let's go ahead\nand jump right into it first we'll do\nour s our\nspdx license\nidentifier MIT then we'll choose our\nsolidity version we're going to use\npragma solidity\n0.6.0 but again most of this should work\nfor 0.8 moving forward and then we're\ngoing to go ahead and look at the open\nZeppelin erc721\ndocumentation and we're going to go\nahead and grab this line right here\nimport open Zeppelin contracts token\nearc 721 earc 72. soul you can even see\na sample erc721 that they give you and\nthis is actually going to be similar to\nthe ERC 721 that we're going to make so\nwe're going to go ahead and paste that\nand of course since we're doing this at\nopen Zeppelin contracts we're going to\nneed to create our brownie\nconfig and same as always\ndepend\ndencies it's going to\nbe open Zeppelin\nslopen Zeppelin contracts and again like\nI said we're versing we're using version\nthree so\n3.4.0 again and then we'll do\ncompiler\nSuk\nremappings and we'll say at open\nZeppelin\nequals\nthis and great let's even try to just\ncompile this right now brownie compile\nand perfect it has been compiled now\nsimilarly to our erc20 that we did with\nopen Zeppelin we're going to do the same\nstartup here so we're going to say\ncontract simple collectible is erc721\nand this is how we're going to inherit\nall those\nfunctions in the ERC 721 token standard\nhere and we can start adding our and we\ncan start coding r simple ERC 721 now\nfor our ERC 721 we're going to make it\nbe a couple of these cute adorable dogs\nso it's going to be one of these three\ndogs for our simple collectible we're\njust going to go ahead and use the Pug\nhere so so you can use any image that\nyou want for this demo um however if you\nwant to just follow along with us we can\njust download this dog we'll call it pug\ncreate a new\nfolder here called IMG and then I'm just\ngoing to add pug PNG to this IMG folder\nso this is going to be the nft that\nwe're going to deploy we're going to\ndeploy this very simple pug for our\nsmart contract so we're going to be\ndeploying this pug this is the image\nthat we're going to use for our nft it's\ngoing to be this adorable pug so let's\ngo ahead and create the rest of the\ncontract for this pug so the first thing\nwe're going to make is our\nConstructor it's going to take no input\nparameters it's going to be a public\nConstructor and then we're going to go\nahead and use the erc721\nConstructor which if we look at the\ndocumentation we give it a name and then\na symbol we're going to use the erc721\nConstructor\nparameters which is going to be a name\nwhich we're going to say is doggy and a\nsymbol which we're going to say is dog\nand\nperfect that's all we really need to do\nfor the first part this nft contract is\nactually what's known as a factory\ncontract there's a main contract and in\nit it has a list of all the nfts and the\nowners that are of this type of nft so\nin this example all of the type of nft\nis just going to be this pug and it's\njust going to be this dog and we\nactually need a function to Mint new\nnfts based off of this pug now we can\nabsolutely have an nft Factory contract\nthat only creates one single nft but\nwe're going to use this Factory\nimplementation to create multiple nfts\nwe're going to do it with a function\ncalled create collectible this will\ncreate a new nft and assign it to\nwhoever called this function so anybody\ncan come here and create a new poppy for\nthemselves or in other words adopt a\npuppy so we're going to say\nfunction create\ncollectible public and we're going to\nsay returns you\n256 you'll see why we need to do this in\na minute now when we create this\ncollectible all we're doing is we're\nassigning a new token ID to a new owner\nand if we look look at the open Zeppelin\nerc721\nGitHub we can see they have this safe\nmint function this is the function that\nthey use to Mint or create a new nft\nthis function it it takes a new address\nto which is going to be the new owner of\nthe nft and a token ID every nft in this\nFactory contract has a unique token ID\nwe're going to have our token IDs start\nfrom zero and and just increment every\ntime we have a new to token minted this\nsafe mint function calls the safe mint\nfunction which calls this minting\nfunction so if you're looking at the\ncode here this mint function is really\nthe the function that calls and creates\nthis nft you'll see actually that they\njust have two mappings that they update\nthey update this owners\nmapping which is just a mapping of token\nIDs to the owners of the token IDs and\nthen they update this\nbalances mapping which is a mapping of\nowner address to the Token count so the\nnumber of tokens that an owner actually\nhas and that's all that's happening when\nwe call this mint or in our case safe\nmint function the difference between\nsafe Min and mint is safe Min checks to\nsee if a token ID has already been used\nor not and this way we don't actually\noverride who owns tokens and who owns\ntoken IDs so we're going to use the saf\nMin function so first we need to think\nokay well we're going to need to a way\nto count these token IDs so that every\nsingle person has a unique unique token\nID so let's create a global variable un\n256 public token counter and we'll\ninitialize it token counter to zero of\ncourse this is the same as initializing\ntoken counter to zero but let's just\nmake it very explicit so when we create\na new collectible we're going to say you\nwent\n256 new token ID is going to be equal to\nthis token counter and we're going to\niterate this every time we mint a new\ntoken so for example we're going to\niterate that in this create collectible\nhere so new token ID equals token\ncounter we're going to\ncall this safe Min function since we're\ninheriting it from open Zeppelins erc721\nwe need to give it this new nft an owner\nwhich is going to be message. sender so\nwhoever calls this function and then we\nneed to give it a unique token ID which\nis going to be this new token ID now\nwhenever we miss one we're going to want\nto increment this token counter so then\nwe can say token counter equals token\ncounter + one and we can then return\nthis new token ID so we'll return the\ntoken ID of the token that we just\ncreated and boom if you're looking for\nan incredibly minimalistic contract to\ndeploy nfts this is all that you need so\nwe can run brownie\ncompile to make sure we did everything\nright and product has been compiled we\ncan see it in the build so great job job\nobviously this might be a little\ndissatisfying to you after the breakdown\nthat we just gave how do we view this\ntoken what does this token look like I\nthought we wanted this to be a doggy how\ndo we know that this looks like a dog\nhow do we get this image on the\nblockchain this is where metadata is\ngoing to come into play now if we look\nat the original ERC 721 there is this\npart called the metadata extension is\noptional for erc721 smart contracts as\nwe've talked about anytime you make a\ntransaction on chain it costs some gas\neven very tiny amounts of data can cost\nmore and more gas images are much bigger\nthan these little bits of data here and\nthey can cost a lot more gas so when\nthis standard was being created the\ndevelopers kept this in mind and knew\nthat storing entire images and entire\ngifts and entire videos on chain was\ngoing to be incredibly costly so they\nadded this piece about metadatas and\ntoken Uris the token URI is a distinct\nuniform resource identifier for a given\nasset this is an example of a URI and\nthe metadata that we're going to be\ndemoing today a URI is just a unique\nresource identifier so this can be\nsomething like https or ipfs or any URL\nstring that uniquely points to some\nmetadata your metadata file is going to\nlook like this it's going to have a\ntitle for the title of the nft can have\na type and it can have all these\ndifferent properties or stats or\nattributes for example we're going to\nhave our pug nft which is going to be\ndefined like this it's going to have a\nname as pug description is going to be\nan adorable pug pup and it's going to\nhave What's called the image URI which\ndefines what the token actually looks\nlike and if we copy paste this into\nanother browser we get returned this\nit's this token URI with this metadata\nadjacent object that's going to enable\ndifferent nft platforms to actually\nrender our nft so this is an example of\nwhat this pug is going to look like on\ndifferent nft marketplaces like openc\nplatforms like openc understand that\nthey need to show this image they need\nto use this name they need to use this\ndescription and have these traits so if\nwe look back at this nft on openc we can\nsee the name is pug we can see the\ndescription here if we go to levels we\nsee its cuteness is 100 out of 100 now\nthis of course leads us to a really\ninteresting point if we're storing the\nimage offchain then how is this image\ndecentralized if we're storing this\nimage offchain how can we guarantee this\nnft is going to stay forever now this\nleads us into a little tidbit about\nstoring data on the blockchain as of\ncurrent recording storing a lot of data\non chain can get incredibly expensive\nthe more data that you store the more\ntransactions that you have to make to\nstore that data on chain and the more\ngas that you're going to have to spend\nat the time of recording e the eum is\nabout little less than 900 GB in size if\na ton of people were to put full videos\nor or movies or massive images ethereum\nwould grow exponentially out of\nproportion and this would become\nunsustainable for the blockchain network\nas a whole so ethereum isn't great for\nactually storing a ton of data it can\nstore a lot of data but it's a lot\nbetter for doing the logic and the smart\ncontracts so there are a lot of\ndifferent platforms that are actually\nworking on this problem of storage these\nplatforms allow people to store data in\na decentralized way that isn't going to\nexponentially explode the size of\nethereum or different smart contract\nplatforms the decentralized storage\nmethodology we're going to work with is\ngoing to be ipfs or interplanetary file\nsystem and this is where we're actually\ngoing to store our image and this is\nactually where we're going to store our\nimage so that nft marketplaces know what\nour nft looks like now here's what some\nprotocols do some protocols just set up\na server and set this token URI to\ninstead be from a decentralized service\nlike ipfs and use just maybe their own\ncentralized server this is obviously a\nmassive issue because if their server\ngoes down or if they want to change the\nuh image or they want to change the\nstats all they have to do is change it\nin their server and this is why a\nprotocol like ipfs is going to be a lot\neasier quicker and more decentralized\nversion of doing this the full solution\nis going to be using something with ipfs\nand filecoin but easy solutions to do\nthat are still being built out so for\nnow we're just going to use ipfs because\nit's free it's quick and it's easy and\nit can be expanded to combine with\nfilecoin to be even easier to work with\nnow something else that I want to touch\non too when it comes to this metadata\nright now all these nft marketplaces\nonly know how to pull attributes from\nthis token URI now if we want to build\nreally cool nfts that can interact with\neach other having some attributes or\nmaybe some like like attack stats or\nattack moves like in Pokemon for example\nor trading cards we can't just store\nthese in this token URI because the\nblockchain doesn't know anything about\nthis token URI so we actually need to\nstore these attributes on chain I'm\nreally hoping in the future a lot of\nthese nft marketplaces are going to get\nbetter at and pulling metadata from\nonchain but now right now any attribute\nthat we give our nfts we actually have\nto reproduce in the token metadata and\nthe token URI as well so we've just\nlearned a lot about metadata ipfs token\nUris and everything like that let's\nupdate this simple nft to be able to\nrender on openc and render on these nft\nplatforms because right now if we were\nto deploy this nobody would know what\nthis doggy looks like so let's give it a\ntoken URI so in this crate collectible\nlet's do string\nmemory token\nURI and after we call this safe mint\nfunction there's another function that\nwe're importing called\nset token U and we're going to set the\ntoken URI for the token\nID and we're going to give it this token\nURI this will allow our nft to actually\nhave an image associated with it that we\ncan actually see so let's go ahead and\nso let's go ahead and create a script\nthat's going to deploy this nft Factory\ncontract and then create us a\ncollectible so we're going to do new\nfile we'll call it deploy and create piy\nand let's jump into our script so we'll\ndo def main first we need to start with\nan account\nand once again we can go ahead and\ncreate helpful\nscripts. py we can go ahead and copy\npaste this get account function in here\nif you want\nbut of course since we added this config\nwallet from Key we're going to go to our\nbrownie config we'll add\nwallets from Key and we're going to grab\nour private\nkey environment variable since we're\nusing a private key again we're going to\ncreate a EnV and we need our to export\nprivate key and we're also going to need\nto export our web 3 INF fura project\nID so we can just copy paste from our\nlast project the private key web3\ninferior project ID and our ether scan\ntoken so that we can actually verify\nthis on chain and we'll add a new file\nin\nITP so that older versions of python\nknow that this is indeed a package so\nwe'll go ahead and do from\nscripts. helpful scripts import get\naccount now all we have to do is import\nour simple\ncollectible and\nrun simple\ncollectible\nequals simple\ncollectible. deoy and if we look our at\nand if we look at our simple collectible\nwe have no Constructor parameters here\nso we can just do\nfrom\naccount and now this will have our\nsimple collectable deployed now we need\nto actually call this now we actually\nneed to call this create collectible\nfunction and we're going to pass it a\nstring which is going to be this token\nURI I'm going to go ahead and use this\nsample token URI that is included in our\nnft mix so if you're looking to get this\ntoken U look up nft mix Patrick Collins\nhopefully the GitHub will show right up\nand we can just go right to the scripts\nin\nhere in the simple collectible folder\ncreate\ncollectible that the big free and we're\ngoing to grab this and in our script\nwe're going to do sample token URI\nequals this now when you paste this\ntoken URI in your browser if you can't\nsee it you might have to add something\nlike ipfs companion to your browser like\nthis some browsers don't natively have\nit so so there is a link to ipfs\ncompanion for this project in the GitHub\nrepo but now that we have a token UR I\nwe can call this create collectible\nfunction so we'll do\ntransaction equals simple\ncollectible do\ncreate\ncollectible and we'll pass in this\nsample token urri and then of course\nwe'll do\nfrom\naccount we'll do tx. we we'll wait for\none block and then if we've done this\ncorrectly we'll actually be able to see\nthis nft on an nft Marketplace like\nopenc so let's do a Quick Print line\nhere we'll do print awesome you can\nnow you can view your\nnft at and we'll do this an FST string\nand this is where we're going to put the\nopenc URL for this rink B so we're going\nto say openc URL which is going to be\nequal to if we pop over to open C if we\npop over to this openc pug here on the\nrink B testnet we can go ahead and grab\nthis first start of the string so it's\ngoing to be https testnets\ndoc.io assets and then this is the\naddress of the contract so we can see\nopenc URL is going to be this slash\nwe'll put this little brackets here\nslash and then another one of these and\nthis is because the URL for here tests.\nopen.\nassets it's the contract address and\nthen the token ID on the end here so\nthis is what it's going to look like so\nin our print line awesome you can view\nyour nft open c. format simple\ncollectible. address comma and we going\ndo simple collectible\ndot token counter minus one for the most\nrecently deployed one and then we'll run\nthis now browny run\nscripts deploy and create\nNetwork\nRinke and awesome we get this print line\nhere saying awesome you can view your\nnft at https test n.c. just keep in mind\nobviously for mainnet we can't use this\ntest nuts. openc doio but assets the\naddress of the nft contract and then the\ntoken ID as well so if we go ahead click\nthis and it looks like it's already\nactually been rendered here in opy we\ncould even go ahead and hit refresh\nmetadata just in case it doesn't show up\nright away but it looks like for us it\ndid show up right away which is awesome\nsome other kind of fun Parts about openc\nis if we go to our profile here we'll\nactually be able to see all the nfts\nthat we own on this test net I've\nactually deploy this this doggy twice\nhere once to test and then once to\nactually do it great we've created our\nsimple collectible of course no project\nis complete without some tests so let's\ncreate some tests since we're also going\nto be doing an advanced collectible I'm\ngoing to skip the integration test and\nI'm just going to write a really simple\nunit test so we'll create a new folder\nwe'll call it unit and in here we'll do\na new file test simple\ncollectable dopy so let's create our\nfirst test we'll do def test can create\nsimple collectible we'll just make sure\nthat we can actually create a Syle\ncollectible now we'll make sure that\nthis is our unit test so we'll do from\nscript\nhelpful scripts import local blockchain\nenvironments and then we'll do if\nnetwork. show\nactive not in local blockchain\nenvironments pest.\nskip so of course we need to do\nfrom\nbrownie import\nNetwork and then also import py test now\nsomething that we can do here is\nactually in in our test we could go\nahead and even test our scripts by\nimporting uh deploy and create here and\ntesting this we can do something like\nreturn simple\ncollectible and in our test then we\ncould do from\nscripts deploy and create import deploy\nand\ncreate and then back in our deploy and\ncreate script we can modify this a\nlittle bit instead of main here we'll\ncall this deploy and create and then\nwe'll have our main function just call\ndeploy and create and you'll see rowny\nrun\nscripts deploy and create to Pi if we go\nahead and run this again we can just run\nthis on the development Network real\nquick instead of on rink B you'll see\nthat this does also work obviously we\nwon't actually be able to see our nft on\nopen C because this is deployed to the\nbrownie temporary ginach chain as\nopposed to a persistent rink be chain in\nour test here we could then just do we\ncould just run\nsimple\ncollectible equals deploy and\ncreate and then we'll do an insert here\nwe'll\nassert simple\ncollectible. owner of\nzero is going to be equal to get account\nand then we'll also\nimport get\ncount so we can run brownie test\nmake sure this works and perfect now\nthis was all fun and dandy but there's a\ncouple of things that we didn't go over\nand that we didn't do so let's create a\nquick readme.md for a couple of notes so\nnumber one we didn't upload an image to\nipfs ourselves so we just used a token\nURI that was already existing right we\ndidn't actually upload something to ipfs\nwe didn't go over why is\nipfs decentralized we didn't really talk\ntalk too much about what ipfs is number\nthree anyone can mint an nft\nhere with any type of stats right it's\nnot going to be it's not verifiably\nscarce or random Right This Isn't that\ncool so we want to actually build an nft\nproject that has all these pieces where\nwe upload the image to ipfs ourselves\nwe're going to talk a little bit more\nabout why ipfs is decentralized and it's\nthe preferred solution for storing nft\nmetadata and we're going to make our nft\nmore verifiably random and verifiably\nscarce like for things like ether cards\nand aboi let's go ahead and do this\nproject again but we'll integrate the\nchain link vrf to make this nft\nverifiably scarce and verifiably random\nand then we'll also teach you guys how\nto upload to ipfs and work with ipfs\nourselves so let's go ahead and do this\nso let's create a new file in our\ncontracts and we'll call it\nAdvanced collectible. soul and what\nwe're going to do here is we're going to\nmake again an nft\ncontract where the token\nURI can be one of three different dogs\nso if we look at this nft mix in the\nimages section there's a pug a shibba\nInu and a St Bernard or one of these\nthree dogs we're going to make it so\nthat when you Mint one of these nfts\nyou're going to get you're going to get\na random one of these three dogs now I'm\nnot going to go over stat generation and\nlike creating battle battling nfts or\nreally games out of these nfts if you\nguys want to see a version of those\ncontracts check out this Dungeons and\nDragons nft there's a link in the GitHub\nto see this and it actually creates\ncharacters that can do battle and have\nlike stats and attributes like um like\nattack uh Constitution and different\nthings you'd find in dung Dungeons and\nDragons this one's done actually with\ntruffle as opposed to being done with\nbrownie but all the contracts are going\nto be the same other than this\nmigrations do Soul so if you're looking\nto check this out you absolutely can it\nis a ton of fun and they have some\nreally cool images as well so be sure to\ncheck that out if you're looking for\nmore anyways here's what we're going to\nbe looking to do we're going to make an\nnft contract with a token URI can be one\nof three different types of dogs and\nit's going to be randomly selected so\nlet's go ahead and do it so first again\nwe're going to do this SPX license\nidentifier right at the top so we can go\nahead and put that there and we're going\nto even use use same solidity version\nand we're going to use open Zeppelin\nagain so we can literally just copy and\npaste that from our last project now\nwe're going to create our contract\nAdvance\ncollectible we're going to say is ERC\n721 great and then since we're going to\nwant to work with chain link vrf to get\na provably random nft we're also going\nto want to\nimport at chain linkon\ncontracts slsrc\nv0.6 vrf con\nconsumer base.\nsoul and of course that means we're\ngoing to go back to here and we're going\nto add smart contract kit SL chain\nlink\nbrownie contracts at\n1.1.1 then we're going to go ahead and\nadd the remapping in we'll say\nat chain link equals\nboom awesome so we've imported the chain\nlink bit our Advanced collectible is\nerc721 and it's going to be vrf consumer\nbase so same as always let's go ahead\nand start with the Constructor we know\nfrom our Lottery smart contract that\nwe're actually going to want to\nparametrize a lot of these pieces for\nworking with the vrf coordinator for\nworking on different chains and\ndifferent test Nets so we're going to do\naddress\nVF coordinator we're going to do address\nlink token bytes\n32 keyh and we can always head back over\nto docs. chain. link go to get a random\nnumber just in case we forget what some\nof the parameters are VF coordinator\nlink token keyh and fee great you went\n256 fee and we'll make\nthis public as well add a little curly\nbracket there\nand we can go ahead and start doing the\nrest of this of course we need to do the\nvrf consumer based Constructor and the\nerc721\nConstructor so\nvrf consumer\nbase is going to be this vrf\ncoordinator and this link\ntoken and the ERC\n721 we could parameter tize these as\nwell but we know it's going to be a dog\nso we'll do doggy and the symbol of dog\nwhich is the same as our symol\ncollectible here we know we're also\ngoing to need to do this token counter\nbit so we'll do un 256 token\ncounter and right in here we're going to\ndo token counter equals zero of course\nwe're going to need a key hash so let's\nmake this un 56 public token counter\nexcuse me we're going to do a bytes 32\npublic\nkeyh and we're going to do a un\n256 public fee and we'll set keyh\nequals\nkeyh and fee equals fee great so this is\na combination of a lot of the stuff we\ndid in our Lottery smart contract and\nsome of the pieces that from our ERC 721\nwe need the keyh the fee VF coordinator\nlink token all for the vrf consumer base\noops I should put a extra quote here and\nthen we need dog doggy and a token\ncounter for EC 721 so now we're going to\ncreate our function create\ncollectible so we're going to do\nfunction create collectible and again\nwe're going to do a string memory token\nURI but this time in our Python scripts\nwe're actually going to Define where\nwe're getting this token URI from and\nwe're going to create it ourselves but\nwe're going to make this public and it's\ngoing to\nreturn it bytes 32 remember way back in\nour Lottery when we did this event\nrequested lottery winner when we called\nthe chain link vrf we're going to do a\nsimilar thing here where we're going to\nmake an event for whenever we request\none of these new dogs and that is also\nwhat we're going to return we're going\nto return that request ID here so since\nwe're using the chain link vrf here we\ncan go ahead and call that request\nRandomness function which again head\nover the docs. chain. link this is\nimported from the ERC\n721 and then in that request and receive\nmodel it's going to call back with our\nfulfill Randomness function we're going\nto need to do a couple of different\nthings here because we want the user who\ncalled to create collectible to be the\nsame user who gets assigned the token ID\nso first we'll do bytes\n32 request ID equals\nrequest\nRandomness and we're going to pass\nobviously the key hash and the fee this\nis going to create our Randomness\nrequest to get a random breed for our\ndogs so let's go ahead and just Define a\nlittle bit of the fulfill Randomness\nfunction so we can figure out how we're\nactually going to pick a random dog well\nthe first thing that we're going to need\nis we're going to need some definition\nof what the different breeds that the\ndog can actually be and again similar to\nLottery we're going to create a new type\ncalled breed using the enum so we're\ngoing to do enum\nbreed and then we're going to give it\nthree types pug which is going to be\nstate\nzero Shiba Inu which is going to be\nState one and St Bernard which is going\nto be state three so our breed is going\nto be one of these three breeds here so\nthen in our function\nfulfill\nRandomness when we get that random\nnumber back we can use that random\nnumber to pick one of these three\nbreeds so of course we need to have a b\n32 request ID and U\n256 random\nnumber and we're going to make this\ninternal override so that only the vrf\ncoordinator can call this and what we're\ngoing to do now is we're going to select\na breed based off of this random number\nso we're going to say breed breed which\nwe're saying\nthis breed variable is of type breed\nit's going to be equal\nto breed generated from that random\nnumber mod three since we have one two\nthree different breeds awesome so this\nis how we're going to get our random\nbreed however we do need to assign this\nbreed to its token ID so now that we\nhave a random breed back how do we\nactually go ahead and assign this well\nwe're going to have to create a mapping\nto do this it'll look something like\ntoken ID\nto breed we're going to have to get our\ntoken ID\nsomehow and we're going to have to equal\nit to the breed so then our first\nquestion is okay well in order for us to\nassign this breed to the Token ID how do\nwe actually get the token ID well we're\ngoing to grab the token ID by doing U\n256 new token ID equals\ntoken\ncounter and then we'll just set the\ntoken ID to breed using this new token\nID equal to the breed so we're going to\nwant to make this token ID to breed\nmapping up here to which we can do\nmapping un\n256 map to breed and we'll call it token\nID to breed this way each token ID is\ngoing to have a very specific breed\nbased off of this mapping results\nperfect okay what else do we need in\nthis fulfillment we need to Mint the nft\nand we need to set a token URI well when\nwe Meed it before we called this safe\nmint function however message. sender\nhere is always going to be the vrf\ncoordinator since the vrf coordinator is\nactually the one calling this fulfill\nRandomness so we can't actually have\nthis just be message. sender we need to\nfigure out how we can get the original\ncaller of create collectible here how do\nwe get the original message. sender of\ncreate collectible well the answer there\nis actually going to be in another\nmapping when we call create collectible\nwe can create a mapping of request ID to\nsender and this is going to take the\nrequest ID as a\nkey and then whoever sent it as the\nvalue so we're going to create this new\nmapping at the\ntop and then actually let's make this\nother mapping public as well we'll do\nmapping bytes\n32\nto\naddress I'm we'll call this public\nrequest ID to\nSender now in our fulfill function the\nsame request ID that requested the\nrandom breed is returned so what we can\ndo is we can say address owner or\nsender is going to equal request ID to\nSender\nof request\nID and then this address owner is who\nwe're going to Safe mint the nf2 and of\ncourse while we're matching up the\nfunctions we don't want to forget to\nalways do token counter equals token\ncounter plus one at the end awesome now\nwe still need to set the token URI here\nso back in our Advanced collectible\nwe're going to have to do this set token\nuai at some point so let's actually\nthink about this for a second we're only\ngoing to know breed of our dog dog once\nthis random number is returned and we\nknow the breed of the dog is going to be\none of these three breeds it's going to\nbe a pug a shibba Inu or a s Bernard and\nlet's actually for now let's even just\ngo ahead and add those three images to\nour project here create a new folder\nwe'll call it image and you can put\nwhatever images you want in here I'm\nactually just going to download I'm\nactually just going to download the\nthree images right from the nft mix boom\nand now I have my pug my shba Inu and my\nSt Bernard in here so anyways it's going\nto be a pug shib Inu or a St Bernard\nhere we're only going to know what the\nbreed is once the random numberers\nreturned and the breed is actually going\nto govern if it's a pug shib Inu or a St\nBernard so we technically could actually\njust get rid of the input parameters for\ncrate collectible since there's going to\nbe no token URI initially created what\nwe could do is we could create a new set\ntoken URI function that sets the token\nURI based on the breed of the dog for\nthe Simplicity of this project we're\nactually just going to create our own\nset token Ur function that we're going\nto update based off the breed of the dog\na challenge for you after we finish this\nproject is to make this even more\ndecentralized and have the fulfill\nRandomness function actually be the one\nto decide what the token URI is but for\nnow in our fulfill random Mis function\nwe're going to skip setting the token\nURI and we're actually going to call it\nin a separate function we're going to\ncreate our own function called set token\nURI and we're going to pass it a un 256\ntoken ID\nstring memory token URI and we're going\nto make this a public function once this\nfulfill Randomness function is responded\nthe breed of the dog is going to be set\nright this token ID to breed is going to\nsay hey this token ID now is associated\nwith this breed which is going to be pug\nshba Inu or St Bernard all we want to to\ndo then is now that we have the onchain\nmetad data we're just going to\nreciprocate that with the offchain\nmetadata so we're going to need three\ntoken uis for those three dogs we're\ngoing to need one for pug ship Inu and\nthen obviously St Bernard however we\nwant to make it so that only the owner\nof the token ID can actually be the one\nto update the token URI so we can use a\nrequire function for this we can say\nrequire and we're going to use an\nimported open Zeppelin function called\nis approved or\nowner message\nsender token ID and we're going to do\ncomma here\nerc721\ncaller is not owner nor\napproved this is approved or owner\nfunction if we go into the erc721 GitHub\nfor open Zeppelin we can find this this\nfunction is approved or owner which\nchecks the owner of the ERC 721 of that\ntoken ID and it makes it so that only\nthe owner or somebody approved to work\nwith this token ID can actually change\nthe token URI so then we're just going\nto call that function called set token\nURI of the token ID and the token URI\nnow we're actually manually going to be\nthe ones to call this set token URI once\nthe breed has been decided we could of\ncourse like I said use a mapping at the\ntop that automatically routes it there\nbut so that we can experim experiment a\nlittle bit more and learn a little bit\nmore about ipfs we're going to leave it\na little bit more General like this and\nperfect this is pretty much the majority\nof what we're going to need for our\nerc721\ncontract obviously we still need to work\nwith ipfs and getting our token URI but\nfor the most part this is everything\nthat we need now I do I am going to\nintroduce a new best practice here\nwhenever we update a mapping typically a\ngood best practice is going to actually\nbe to emit an event so let's create an\nevent for each one of these mapping\nupdates we call\nevent requested\ncollectible and we'll do a bytes 32\nindexed request ID and we'll also do\na address requester this requested\ncollectible event is going to be emitted\nwhen we request ID to Sender because\nwe're updating the mapping here this is\nalso going to be really helpful when we\nrun our tests so we can get this request\nID similar to what we did with the\nlottery so down here we're going to do\nemit requested collectible let's\ncollectible here let's use an i instead\nof an a here collectible and we'll pass\nit this request ID and then message.\nsender we also update a mapping down\nhere with token ID to breed so we're\ngoing to do a new event we're going to\ncall event\nbreed\nassigned and we'll do a uint\n256\nindexed token\nID and then we'll do a breed\nbreed and then when we assign the breed\nhere we're going to emit breed\nassigned\nwith new token\nID and\nbreed so let's see if we did everything\nright let's do brownie compile looks\nlike we have a quick error here did you\nmean fee or fee let's do a quick\nunderscore\nthere now let's try to\ncompile much nicer all right great let's\nmove on all right so now let's take a\nlittle look see at our scripts here so\nwe have this deploy and create script\nwhich is going to work for our simple\ncollectible so let's go ahead and\nactually give them both their own folder\nso we're going to do a new folder\nwe'll call one\nsimple\ncollectible and we'll do another new\nfolder called\nAdvanced\ncollectible and we'll grab this original\ndeploy and crate and we'll place it into\nthis simple collectible folder here\nawesome now if we wanted to run this we\nwould do\nbrownie run scripts symbol collectible\ndeploy and create and we can go ahead\nand and test this out on our local\nganache here and cool looks like it's\nworking correctly great so now let's\ncreate our Advanced collectible script\nand a lot of what we're going to do is\ngoing to be the same as this simple one\ndeploy and create so I'm actually going\nto copy\nthis we're going to create a new file\ncalled deploy and create. piy we're\ngoing to paste everything in here but we\nare going to change a couple things up\nso let's do a little bit of refactoring\nfirst so this open crl we're going to be\naccessing in a couple different scripts\nso we're actually going to take this\ncopy it get rid of it in our deploy and\ncreate here and we're going to move it\nto our helpful scripts and place it\nunder here open C URL equals this script\nRight Here and Now what we do in our\nsimple deploy and create is we're going\nto do from scripts. helpful scripts\nimport open C URL we're going to delete\nthat here\nso now in this\nscript this openc URL is going to come\nfrom our helpful scripts which is what\nwe want and we're going to do the same\nthing for our deploying crate for\nadvanced okay great so I've now copied\nand pasted all the code from deploy and\ncreate into this deploy and create for\nour Advanced collectible so let's go\nahead and modify this now so instead of\nfrom brownie import simple collectible\nwe're going to import\nAdvanced collectible\nand we're going to do the same thing\ndown here and I'm even just going to go\nahead and delete\neverything before this we're going to\nchange this to\nAdvanced\ncollectible and awesome okay this is\ngoing to be our starting point and we\nactually we can even get rid of this\nsample token U great so this is going to\nbe our new starting point we've done a\nlittle bit of refactoring now open C URL\nis going to be in the helpful scripts\nwe're pulling in advanced collectible\ninstead of simple collectible\nand the rest applies we're still using\nour get account to get the account and\nnow we have this Advanced collectible\nequals Advanced collectible. deploy of\ncourse our Advanced collectible has a\ndifferent Constructor it's got a vrf\ncoordinator a link token keyh and a fee\nso we're going to have to add those as\nthe parameters in here we want to work\nwith rinky for this because the openc\nmarketplace right now for test Nets only\nworks with rink B so that's why we're\ngoing to work with rink here so let's\nget started and just grab those rink be\naddresses first so our Advanced\ncollectible needs a vrf coordinator and\na link token so if we head over to the\nchain link documentation we go to\ncontract addresses for the\nvrf we can scroll down to rink B grab\nthe vrf coordinator here and same as\nbefore we'll jump into our Browning\nconfig do\nnetworks rink\nwe'll do vrf\ncoordinator we're also going to need the\nlink token here so we'll do link\ntoken we need the key\nhas key\nhas and we need the fee which is going\nto be 0.1 link which we can do fee as 1\n1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 which\ngoing to be 0.1 you can of course just\ncopy and paste brownie configs over to\ndifferent projects because because these\nvalues are always going to be the same\nnow on our Advanced collectible deploy\nand create we can go ahead and add those\nvariables in here since we're going to\nbe interacting with actual contracts\nthat are on chain and we're going to\nwant to be able to flip back and forth\nbetween the mock versions of them we're\ngoing to bring back that get Contract\nfunction that we used before this is the\nfunction that's going to be smart enough\nto know if we need to deploy a mock or\njust grab from an actual contract I'm\ngoing to show a little fast forward of\nme rebuilding this function but feel\nfree to copy and paste it from our last\nproject now something that we do need to\ntalk about though is our deploy mock\nfunction the syntax here is going to be\nbasically exactly the same however we do\nneed to deploy a couple of mocks so make\nsure you have these in your deploy mock\nfunction specifically we're going to\nneed a mock link token and a mock vrf\ncoordinator and again feel free to just\ngrab these from our last projects\nand then of course be sure to add your\ncontract to mock dictionary where the\nlink token is mapped to the link token\nand the vrf coordinator is mapped to the\nvrf coordinator if you guys look in the\nGitHub repo there's a couple try catches\nthere um that just make it a little bit\nnicer for error handling but this is\nbasically the entire script so now what\nwe can do we can go back to our Advanced\ncollection we deploy and create import\nthis get Contract from our helpful\nscripts and we'll just replace this with\nget Contract vrf\ncoordinator get Contract link\ntoken and then for keyh and fee since\nthese don't really matter these can be\nwhatever we want and these aren't really\ncontracts we can go back to our\nconfig We'll add\nthe development Network and we'll just\nadd\nkeyh and\nfee and again since it's just testing we\ncan just go ahead and make them exactly\nthe same as rink\nbe done a lot of work now let's go ahead\nand run this on the development Network\nagain so we'll do brownie run scripts\nAdvanced deploy and create no network so\nit's going to default to development let\nsee what happens here and awesome so we\ncan see we actually did a couple of\nthings here so first we deployed this\nmock link token then we deployed our\nmock vrf\ncoordinator we finished that and then we\ndeployed our Advanced collectible all on\na local network so let's go ahead and\ncontinue here once we deploy this code\nwe're going to want to fund this\ncontract with some link the reason we're\nwant going to want to fund it with some\nlink of course is so that we can call\nthe random number I like to have my\nfunding with link also in a function so\nwe'll do fund with link and we'll give\nit an address advanc collectible.\naddress and let's go ahead and create\nthis function in Fast Forward we're\ngoing to fast forward this as well but\nfeel free to copy and paste your fund\nwith link functions from past projects\nor if you want to slow this down and\nfollow along feel free to do that too\nlet's go back to our deploy and create\nwe now have this fund with link that\nwe're going to do right here and then\nall we have to do now is call our create\ncollectible function here so we'll just\ndo Advan collectible\ndot create\ncollectible of course\nfrom\ncount and we'll do creating\nTX we'll wait one block\nconfirmation and then we'll\nprint you token has has been\ncreated so we are definitely going to\nwant to test this because we have a\nnumber of custom scripts here right so\nlet's go ahead and just do a manual test\nso we'll do brownie run\nscripts Advance collectible deploy and\ncreate and we'll do it on a development\nNetwork whoops we got to add ether here\nsorry about that in the web 3.2a one\nether so let's go ahead and run the\nscript again\nand all right it looks like everything\nworked everything was deployed new token\nhas been created great this is fantastic\nnow ideally before we do an integration\ntest we would of course write some tests\nbut I want to teach some things that are\neasier to demonstrate on an actual test\nnet so we're going to go ahead and\ndeploy this to an actual test net before\nwe write our tests so we're just going\nto run the script again and do das Dash\nNetwork rank B\nand awesome a new token has been created\nso what we can\ndo so we can grab the contract address\nonce\nagain we'll paste it into the rink be\nether scan and we can see everything in\nhere we can see we've given it a little\nbit of Link we can see our two function\ncalls one is going to be the contract\ncreation one is going to be create\ncollectible our contract has already\nbeen Auto verified actually because I\nverified this contract on rinky already\nand ether scan says Ah this bite code is\nthe exact same of another contract that\nwe've already verified and if we go to\nread contract and we go to token counter\nwe'll see one token has been created\nwe've actually created our first token\nnow what we can do in our Advanced\ncollectible scripts we can create a new\nscript and just call it create\ncollectible p and in here we'll just\ncreate a collectible so all we have to\ndo is we'll do def main per usual we'll\nhave to do\nfrom rowny import\nAdvanced\ncollectible we'll import\naccounts from our helpful\nscripts we'll\nimport fund with link in our main\nfunction we'll do account equals get\naccount\nof course we need to import this as well\nfrom our helpful\nscripts then we'll do\nAdvanced\ncollectible\nequals Advanced collectible minus one\nbecause we just want to get the most\nrecently deployed we'll fund this\ncontract with link so we'll do Advanced\ncollectible.\naddress and we'll also choose an amount\nhere we'll just do web\n3.2 way 0.1\nether so that means we also have to do\nfrom web 3 import web 3 then we'll do\ntransaction then we'll\ndo creation\ntransaction equals Advance\ncollectible. create\ncollectible\nfrom\ncount we'll do create ation transaction.\nwe wait one block\nconfirmation and then we'll\nprint\ncollectible\ncreated oops sorry I actually don't have\nto import account here or accounts\nexcuse me sorry this actually needs to\nbe amount equals excuse me now let's go\nahead and run this and what we're going\nto do is we're going to fund our\nAdvanced collectible with link which is\n0.1 link and then we're going to create\na new\nnft awesome collectible created so if\nonce\nagain we take this\naddress go back over to Ether scan do a\nquick refresh here go to our contract\nread\ncontract look at the token counter it\nmay still be one so you might have to\ngive it a second for the chain link vrf\nto respond\nrespond once the chain link VF responds\nwe'll see two in here we can also check\nthe token ID to breed if we look at zero\nwith one we'll see the breed is two and\nif we look back at our\ncontract the advanced collectible. Soul\nwe know that if the breed is two that\nmeans it's a St\nBernard see the token ID of one it has a\nbreed of one so it got randomly assigned\na shibba Inu awesome so we have tokens\nand they get randomly assigned reads\nfantastic as you can see we're doing\nkind of a lot of manual testing work\nhere right so what we're probably going\nto want to do instead is you guessed it\nautomate these tests go ahead want\ndeploy we go ahead and import that\ndeploy script that we just wrote so we\nwould do from\nscripts Advance\ncollectible deploy and create import\ndeploy and create\nand then all we have to do is call\ndeploy and\ncreate in this function we'd probably\nwant to then return the advanced\ncollectible contract so we can make sure\nthat we actually get what we want here\nso we'll say Advanced collectible equals\ndeploy and\ncrate and that'll be our\nacting step beginning we'll do\narrange and then we'll do an assert\nof we'll just check to see that the\ntoken counter has been increased do\nassert Advanced\ncollectible the token counter is equal\nto one all right great so this will\nreturn our Advanced collectible however\nwe know that since we're actually going\nto be working with a mock V Rift\ncoordinator if we look at our Advanced\ncollectible we know that the bulk of the\nwork actually comes in this fulfill\nRandomness function and we're going to\nhave to tell our mock to actually return\nand call this function so in order to do\nthat we should probably also return this\ncreating transaction here so that we can\nget the request ID remember how in our\nLottery we actually just directly called\neverything and we needed this request ID\nto call this call back with Randomness\nfunction in our test here we're actually\nusing our scripts a little bit so we\ncould either just go ahead and write out\nall the steps similar to what we did in\nthe lottery or we could adjust our\nscripts a little bit for Simplicity here\nwe're just going to go ahead and have\nthis deploying create function also\nreturn the creating transaction this way\nwe can go ahead and get the request ID\nso back in our test here that means we\nhave to do deploy and create equals\nAdvanced collectible\nand\ncreation transaction now that we have\nthis creation transaction we can use it\nto get our events and again if we look\nback in our Advanced collectible we can\nsee here that we're emitting this\nrequested collectible with request ID so\nwe can go ahead and do request\nID\nequals creation\ntransaction.\nevents we'll add the\nname of our vent here which is requested\ncollectible and then we'll\nget that request ID once we have this\nrequest ID we can then go ahead and grab\nthe vrf coordinator so from our scripts\nwe'll grab this get contract and we've\ncoded our get contract in a way that if\nthe mock has already been deployed again\nif we go back to our helpful scripts if\nthe contract has already been deployed\nthen we're just going to go ahead and\ngrab it so since here our mock will have\nalready been deployed so we don't have\nto redeploy it so we can just do get\nContract VF\ncoordinator.\ncallback with randomness\nand we'll use the request\nID we'll pick some number like 777 we\ngive it\nto the address of our Advanced\ncollectible and remember we're going to\nbe calling the call back with Randomness\nthis is what a real chain link node is\nactually going to call back and it just\nneeds the request ID the randomness\nnumber and a consumer contract so\nrequest ID random number and then the\nconsumer contract and then of course we\nhave to do a from\naccount from get\naccount and we'll import get account as\nwell now we can move into our seert\nphase so first if this is correct then\nour token counter should be at least one\nso we can\nassert Advanced collectible. token\ncounter is greater than zero\nor we could be a little bit more\nspecific here equals equals 1 we also\nshould technically be able to get the\nbreed and figure out the breed of this\nfirst token of this first collectible\nlet's go ahead and parameter tize the\n777 we'll call it random number equals\n777 we'll place that\nhere then what we can do is we can say\nseert Advanced\ncollectible. token ID to\nbreed of zero right in our fulfill\nRandomness we're going to assign the\ntoken ID to being the breed and the\nbreed is going to be this random number\nmod 3 so on our test we can say the\ntoken ID to breed of dog zero is going\nto be equal\nto random number\nmod three and this is pretty much our\nfull test so let's go ahead and run this\nwe can do that test with- K whoops it\nlooks like our simple test has actually\ngot an error now we're getting this\nmodule not found no module named\nscripts. deoy doc create this now since\nwe actually changed it is going to be\nscripts.\nsimple\ncollectible. deploy and\ncreate so now if we rerun our test we'll\nsee brownie isn't GNA airor out anymore\nso even though we skipped this test\nbrownie still compiles it to make sure\nthat everything makes sense but what we\nsee here is fantastic our Advanced\ncollectible unit test has worked\nperfectly let's go ahead and make an\nintegration test for our Advanced\ncollectible here so now we'll have our\ntest folder here and we'll have unit and\nwe'll have\nintegration our integration test is\nactually going to look really similar to\nour Advanced collectible here so I'm\njust going to go ahead and copy\neverything new file test\nAdvanced\ncollectible in\nintegration and we'll just paste\neverything in here now the only thing\nthat we're going to have to change is\nthat we're not going to be the ones to\ncall back with Randomness here we can\nremove this part we also don't need the\nrequest ID anymore since the chain link\nnode is going to be responding this\nmeans that the breed that we're going to\nget is actually going to be random so we\ncan get rid of that assert as well all\nwe need to do is wait for the\ntransaction to get called back so we're\ngoing to import time and instead of us\ncalling back with\nRandomness we're just going to\ndo time.\nsleep then we'll wait 60 seconds test\ncan create collectible we should also\ngive this a different\nname\nintegration now we should be able to\ntest this on a rink be chain and our\ntoken counter should indeed increase\nwith the chain link node actually\nresponding so now we can run brownie\ntest- k\njust that test D-\nNetwork rink\nB oh whoops right now we're skipping\nthis because we're saying only for local\ntesting now since this is going to be\nour integration test we're going to do\nthe opposite if network. active is in\nthese local blockchain environments then\nwe're going to skip it and say only for\nintegration testing all right great so\nnow we have a quick and dirty\nintegration test that we can run we're\nnot going to run it for now because\nwe're going to be working a lot with\nthis rink be chain and we're going to be\ndeploying a lot of different things and\nwe don't want to wait so long so this is\nfantastic we have a way to deploy this\nwe have a way to get these new\ncollectible tokens and create them but\nif we were to take this address right\nnow and try to view this token on\nsomething like openc we would get\nnothing back we wouldn't get any result\nright now our token doesn't have a way\nto be viewed or be visible by everybody\nelse these nft platforms don't know what\nthey look like and again this is where\nthat set token URI is is going to come\ninto play so we have to figure out a way\nto host an image and host all the\nmetadata for our token URI and the way\nthat we're going to do this is by using\nipfs and this is a lot better than\nactually hosting this on our own server\nbecause anybody can then go ahead and\nHost this image or this metadata\nthemselves now there's further\nimprovements to this with something like\nfile coin where you actually pay to have\nyour image hosted forever however ipfs\ncan hook into file coin in the future\nand is going to be a good enough\nsolution for what we're looking to do\nhere just keep in mind that what we do\nnot want to do is run this on a\ncentralized server when we spin up our\nipfs node we will be the only node that\nactually runs and actually hosts our\nimage however the image is open for\nanyone to pin to their nodes as well so\nit's much easier for us to host our\nimages in a decentralized manner what's\nbad obviously is if we just had the\nimage stored on our own centralized\nserver because if our server goes down\nthen that URL no longer exists if at\nleast one node on the ipfs network is\nhosting this image it will be available\nfor anybody to see so that's why it's\ngoing to be a much better solution than\nsome centralized server as I mentioned\ndecentralized storage is a topic that's\ngetting better and better and we're\nlooking forward to seeing more and more\nways to interact with them in any case\nwe need to create an ipfs node that's\ngoing to host some data that looks like\nthis or like what we saw with our simple\ncollectible and E to host metadata that\nwill look like this we both have to host\na metadata file and an image URI file\nwhich will host the actual image both of\nthese need to be stored on ipfs so let's\ngo ahead and create a new script\ncalled\ncreate metadata which will read offchain\nand create our metadata file so we'll\nstart our scripts PR usual with def Main\nand we'll get the most recently deployed\nAdvanced\ncollectible using this minus one syntax\nof course we're going to do\nfrom brownie\nimport\nAdvanced collectible once we have this\nAdvanced collectible we can then Loop\nthrough all of the tokens and actually\nfigure out the metadata for each one of\nthem so we'll do number\nof\nadvanced\ncollect equals Advanced collectible.\ntoken\ncounter because we want this create\nmetadata to create the metadata for\nevery single token that we've created do\na Quick Print line here just saying\nprint you have\ncreated number of\nCollectibles collectibles\nwe even run this really quick brownie\nrun\nscripts Advanced create\nmetadata Network rink B since we've\nalready run this on the rink be chain\nwe'll see you've created one collectible\nif I were to run our create collectible\nscript again and then our create\nmetadata script we' of course get more\nbut right now we only have one\ncollectible now let's Loop through all\nthese Collectibles and create their\nmetadata so we're going to create that\nthat file it looks like this and it's\ngoing to have it's going to have the\nname which is going to be based off of\nthe random breed that I got it's going\nto have the description which is based\noff of again the random breed that I got\nit's going to have an image which will\nalso be based on the random breed that I\ngot and I just put some attributes in\nhere but these attributes so we're going\nto say for each token\nID in the\nrange of number of advanced\nCollectibles for each one these Advanced\nCollectibles first we need to get the\nbreed so we're going to say the breed\nthe breed is going to be equal to\nAdvanced collectible. token ID to\nbreed of the token\nID now Advanced collectible. token ID to\nbreed this is going to return an integer\nright because again our Advanced\ncollectible this enum breed is going to\nbe 0o one or two so we actually want to\ncreate a quick mapping that represents\nthat zero was pug one is shibba Inu and\ntwo is St Bernard so I actually like to\ncreate this in a helpful\nscript called def get\nbreed and then it takes as an input it\ntakes a\nbreed\nnumber and it uses a switch statement so\nup top we'll\nsay breed mapping\nequals zero is going to be pugg\none is going to be Shiba\nInu and two is going to be Saint\nBernard so in this get breed function\nnow we can just do return breed\nmapping of that breed number that we\nget so instead of doing Advanced\ncollectible the token I do to breed we\ncan now just\ndo get breed\nand this will this will return the\nnumber and this will return the actual\nstring so we can just do from\nscripts helpful scripts import get breed\nnow that we have the breed we can start\ncreating this metadata file now what\nwe're going to want to do is we're going\nto want to have some type of format for\nour contract to always pull from so what\nI I like to do here is I'll create a new\nfolder called metadata\nand in this folder I'll have a new\nfile called sample metadata. piy and\nthen I just have meta dat template\nequals and I just have this this\ntemplate that we're always going to use\nnow in here we're going to need a\nname and then we're going to leave the\nname blank because we're going to want\nto fix it later we're going to have a\ndescription\nwhich we're also going to leave blank\nfor now we're going to have that image\nURI which we'll also leave blank and\nthen we're going to have some attributes\nwhich should be blank for this dog\nbecause we don't actually have any\nonchain attributes but I'm just going to\ngo ahead and add some to show you what\nyou could do uh if you wanted to give\nyour dog some stats you know maybe maybe\ncuteness maybe maybe raw power maybe\nspeed agility you know whatever you want\nto do so we'll do\ntrait type\nbe\ncuteness and then value is going to be\n100 this would basically say hey there's\na trait type called cuteness and the\nvalue of that is 100 so cuteness of the\ndog is 100 so now once we have this\nsample metadata file we can import this\ninto our script here so we'll say from\nmetadata. sample metadata\nimport metadata\ntemplate and another quick note you\nmight have to put put aore\ninit.py file in that metadata folder if\nyou're working on older versions of\npython and we can start creating our new\nmetadata file for this breed for this\ndog we want to save each collectible\nunder their Network and with their token\nID so let's go ahead and create a new\nfolder call it rink B and this is where\nwe'll save all of the rink B metadata\nfor all these Collectibles for all these\ntoken IDs now before we actually save it\nthough we should just check to make sure\nthat the file doesn't already exist\nright because if the file already exists\nthat means we've already created the\nmetadata for that token and we don't\nneed to so we can just go ahead and get\nthe\nmetadata file\nname which is going to be equal\nto\nmetadata network. show\nactive of course this means we need to\nimport network from browning slash\nthe token\nID token ID with a\nhyphen with the\nbreed. Json just to make sure we're\ndoing this right we can even just print\nthis\nout do a quick manual test brownie run\nscripts Advanced create\nmetadata Network\nrinky so this will be the name of the\nfile so metadata rink B token ID and\nthen the breed. Json okay cool now we\ncan actually check this to see if this\nalready exists and we're going to use a\npython Library called path so we're\ngoing to say from path lib import path\nand we're going to say if that path it's\nmetadata file\nname. exists if that path exists we'll\ndo a Quick Print saying metadata file\nname\nalready\nexists delete it to overwrite this way\nwe won't accidentally overwrite metadata\nthat we've already created and do extra\nwork so if it exists we'll print that\nout great\notherwise we can go ahead and\nprint\nprintf creating metadata\nfile metadata file name\ncan even run this real\nquick great you have one collectible\ncreating metadata file perfect so let's\ngo ahead and start creating this\nmetadata file so we're going to have to\ngive it a name description image URI and\nwe're not going to give it any\nattributes though so just name\ndescription and image URI so name is\neasy enough since this is a dictionary\nor a mapping in Python we can actually\njust go ahead and start mapping so up\nabove before the this if we'll do\ncollectible metadata it's going to be\nequal\nto this template so this is going to be\nwhere all we sort all of our metadata\nwe'll say collectible metadata of name\nis just going to be the Brie so if it's\na pug the name will be pug if it's a\nshibba Inu name will be shibba Inu if\nit's St Bernard name will be St Bernard\nand we'll give it collection\nmetadata description\nis going to be equal\nto we're going to do an F string here\nand\nadorable\nread\nbut now if we print out this collectible\nmetadata we should\nsee at least the start of the metadata\nwhich we do great name St Bernard\ndescription an adorable St Bernard pup\nof course you'll have a different random\nbreed but it should look something like\nthis now we're going to need collectible\nmetadata image URI this is where we're\ngoing to have to have our image already\nuploaded to ipfs so we can assign it to\nour metadata here so how are we going to\ndo this well we're probably going to\nneed some upload to ipfs function it's\ngoing to return our image URI and then\nwe can just set that image URI to the\ncollectible\nmetadata of image\nso let's go ahead and start doing that\nlet's create our upload to ipfs function\nnow in order to upload to ipfs we of\ncourse need to have the images ourself\nalready have them downloaded here and\nagain you can download them right from\nthe GitHub yourselves if you like to\nmake this a little bit generic we'll\nhave this upload to ipfs take a file\npath that way we can pass this image R\nupload to ipfs we're going to give it\nsome type of file path here we're going\nto have to grab that image path\nso we'll grab that image file\nname by just doing\nbreed do\nlower because right now our breeds are\nall uppercase so we're going to want to\nmake a lowercase then we're going to\nreplace the underscores with hyphens\nPNG say Plus\nPNG and then you know what let's just go\nahead and add the full path here so\nwe'll\nsay slash\nimage\nslash plus 3. lower perfect so and then\nwe'll even change this\nto image path and then we can pass this\nto our upload to ipfs so this file path\nnow is going to be the location of the\nobject that we're going to upload to\nipfs we're going to use this path\nlibrary to actually grab that path to\nupload it to ipfs so we're going to say\nwith\npath file path.\nopen RB as file path now this is a\nlittle bit of sophisticated python here\nwhat we're doing is we're taking this\npath here we're opening the file RB\nmeans we're going to open it in binary\nsince these are images that's how we're\ngoing to actually open it and we're\ngoing to upload the binary actually to\nipfs and then as F FP so we're saying\nthis opened file is going to be named FP\nor or file path we're going to do\nimage binary equals fp.png\nwill come right to the docs here and\nagain there's going to be a link in that\nGitHub and in here there are\ninstructions to to download it for\nwhatever system that you're working on\nright if you're working on Windows if\nyou're on Linux if you're on Mac these\nare the different ways to actually\ndownload this ipfs command line you'll\nknow you've done it right if you can\ntype ipfs D- verion and you see\nsomething like ipfs version 0.9.0 it's\nimportant to know that we could also do\nthe ipfs download desktop and we could\ndownload the desktop version version of\nthis and we'd see a user interface which\nlooks something like this we could\nupload our files manually and then\nmanually go ahead and grab those files\nand place it into our scripts but we're\nEngineers we want to do this\nprogrammatically in any case once we\nhave this API downloaded we can actually\nfollow the documentation here the HTTP\nAPI reference for actually uploading our\ncode we're going to be mainly working\nwith this endpoint API v0 add as this is\nthe endpoint that's actually going to\nadd our file or directory to ipfs now\nwhat we're going to want to do is we're\ngoing to actually upload our images to\nour own ipfs node we can run our own\nipfs node by doing\nipfs Damon and we'll see an output that\nlooks something like this we can even\nsee a web UI using this web UI URL here\nthis will look similar to what the ipfs\ndesktop looks like but again we're going\nto work just mainly from this Damian\nfrom our own ipfs node congratulations\nyou're running your own ipfs node right\nnow as you can see it's currently\nrunning on our own Local Host right here\nHTTP 127 0.0.1 at Port 50001 so to\nactually upload this we're going we\nfirst need to get that ipfs\nURL which is going to be equal to this\nURL right here\npaste now we want to make an API call or\na post request to this endpoint using\nthis this API v0 ad and these are all\nthe different parameters that this ad\ncan actually take in so that we can\nactually post it to ipfs for those of\nyou familiar with curl and you want to\ntest this out using a curl I've added a\ncurl into this create metadata file as a\ncomment so that you can actually go\nahead and test this if you want to use\nthis now what we're going to want to do\nto keep working with our scripts is you\nshould have like a little plus button\nsomewhere on your vs code we're going to\nhit that plus button and now we're\nactually going to have two different\nshells one which is running our ipfs\nnode and one which is running our bash\nor zch or whatever other shell that your\nOS natively works with now that we have\nthis ipfs URL we're going to grab the\nendpoint which is going to be again this\nright\nhere- ai- v0 add and we can make a post\nrequest to it so for us to do that we're\ngoing to say response equals requests\npost we're going to do the ipfs URL plus\nthe endpoint and we're going to say the\nfiles that we're going to\nupload it's going to be equal to\nfile image binary request is a python\npackage that we're going to import so\nwe're just say import requests now if we\ngo back to the ipfs documentation we can\nscroll down to see what the response\nlooks like it's going to return a bytes\na hash a name and a size now if we look\nat this sample token U we can see the\nAPI call here ipfs stores all its data\nusing a hash and if we're looking at\nthis and if we're looking at the simple\ncollectible this hash here is the hash\nthat represents this pug. Json file\neverything in ipfs gets hashed and every\nsingle piece of data has a unique hash\nwhich is why it's so fantastic if we\nwere to change anything with this image\nthis hash would be drastically different\nall we need to do is get the hash that\nipfs gives the image that we upload and\nwe go ahead and plug it into a template\nURL like this one here so what we're\ngoing to do then is we're going to say\nipfs hash is going to be equal to this\nresponse.\nJson since we're just going to jsonify\nthe response to make it look like this\nresponse here and we're going to\ngrab that hash right since it's going to\nreturn this dictionary and we just want\nthe hash here then we're going to give\nit a file\nname by saying it's going to be that\nfile\npaths split we're going to do some fancy\npython stuff here we're going to say\nminus\none to zero which basically all this\nline is doing is saying you know if we\nhave\nslash image pug.\nPNG we're going to remove\nwe're going to split it up by these\nslashes into an array and we're going to\ngrab the last part of the array so we're\nbasically just changing this to this\nwith this line right here then with this\nwe can get the image URI which is going\nto be equal to an FST string again\nhttps\nipfs.io\nipfs slash ipfs hash question mark file\nname\nequals file name and it's this format\nright here which will give us\nthis so if I go ahead and even just copy\npaste this under as a comment to show\nyou\nguys we see this part's exactly the same\nand then this is that hash here\nrepresented here and then we have\nquestion mark file name equals and then\nthe file name so excuse me this is\nactually going to be like zero hyphen\npug zero hyphen pug and that's exactly\nwhat we need we need this image URI so\nwe'll do a quick\nprint\nimage image URI and then we'll go ahead\nand return the image\nURI now since we're actually going to be\ntesting this with ipfs we can add a new\nintegration test so we'll call this test\nipfs up upload. piy now you might want\nto write a test for this and we're not\ngoing to do one but I challenge you to\nlater on maybe come back and and write\nyour own test for this upload to ipfs\nfor now we're actually just going to\nmanually test it so we're going to go\nback up to our script here and we're\ngoing to run image U equals upload to\nipfs image path and then we're going to\nget printed in image URL since we're\nworking with the St Bernard here we\nshould get a St Bernard image URI\nso if I run brownie run\nscripts\nAdvance create\nmetadata Network rink\nB let's see what happens I needed to add\nbrackets here sorry about that now let's\ntry it again awesome we were able to\ncreate this metadata file now if we go\nahead and copy\nthis paste it perfect we see exactly\nwhat we're looking for we see our St\nBernard awesome job and this has been\nuploaded to our own ipfs node now I want\nto show you guys actually another\nservice and another way we can actually\nupload these to ipfs some people don't\nwant to run their own ipfs node because\nthey're not actually going to be keeping\nit running the whole time anytime their\nnode goes down this means that nobody\nwill be able to see your image unless\nsomebody else pins your image or or uses\nyour image so what I also like to do is\nI like to upload it to some other\nthirdparty Service as well as uploading\nit to my own ipfs node so I like to\ncreate another script actually called\ndeploy to pinata so let's go to scripts\nnew\nfile upload to pinata dopy so pinata\npinata is an ipfs file management\nservice and they actually will pin\nwhatever files that we're working with\nas well so we'll have it pinned in our\nnode and they will have it pinned as\nwell so we can go ahead and\nregister awesome this is what pinata\nlooks like it's a way to upload and work\nwith ipfs and they'll give us some extra\nsupport and they have a free tier which\nis fantastic as well they have some\nwonderful documentation as well under\nthis documentation section so let's go\nahead and upload this to ipfs so that\nwhen our node goes down our images don't\ngo down so we'll do pinata base URL is\ngoing to be equal\nto\nhttps D- api. pinata Cloud you can find\nall this in the documentation as well if\nwe scroll down at the documentation\nwe're going to be using this pin file to\nipfs endpoint here and you can see that\nentire endpoint right\nhere with the base and then the endpoint\nso we're going to copy that endpoint\nwe're going to say endpoint equals\npinning SL pin file to ipfs we're going\nto choose some file\npath and for us we're just going to do\nSL image SL pug. PNG of course if you\nwant to upload some other image you\ncould you know change this file path or\nyou could even do some type of for Loop\nto pin everything uh in the image\nsection here again we're going to do\nfile name we're going to use that same\nsyntax before that's we're doing file\npath dosit\nslash some fancy python\nstuff just to get this last part and we\nalso need and we need to use some\nheaders in this post request so it's a\ntype post request we need to use some\nheaders here so we're going to say\nheaders\nequals copy this pinata API key which is\ngoing to be some API key and then we\nalso have this pinata secret API key a\nsecret API key which is going to be\nsomething else we can find these two API\nkeys if we scroll the way down we hit\nAPI Keys create a new API\nkey I'm going to call this you can make\nthis an admin key I'm just going to do\nlimit max\nusers limit max uses I'm going to set\nthis to 200 uh because I'm I'm going to\nmake this a public key so I don't want\npeople using this a million times please\nmake sure you select at least one\npermission pin file ipfs for those of\nyou guys watching you can absolutely\njust grab all these if you want you can\nmake this an admin you know do whatever\nyou want to do here since I'm only going\nto be using this pin file to ipfs that's\nall I'm going to do hit create key and\nhere are our tokens here so our API key\nis going to be right here and we're\ngoing to copy that we're going to open\nback up\nthatv and add this as one of our\nenvironment variables here so we're\ngoing to export pinata API key\nequal to that key there this API secret\nwe're going to copy and we're going to\ndo export inata API\nsecret equals that key there and we\nactually don't need this uh JWT but if\nyou guys wanted to you could copy it as\nwell so now that we have them in ourv\nfile these are now going to be\nenvironment variables that we can use\nand brownie is going to automatically\nput them into our uh environment so what\nwe can do then is we can do OS\n.\ngetv\nkinata API key and then of course we're\ngoing to have to\nimport import\nW and\nthen for our secet key it's we're going\nto do the same thing os. get\nEnV pinata API Secret\nand this is how we get those two headers\nfor uploading to Piñata then we're going\nto do a lot of the same code we did\nbefore we're going to say with path a\nfile path. openen RB for the binary as\nFP of course since we're using path\nwe're going to do from path lib\nimport\npath we're going to do the same piece\nimage binary equals\nresponse is going to be equal to\nrequests which we have to import\nrequests import\nrequest.\npoost and you a base URL plus that\nendpoint that we have and for files\noops it's going to be equal\nto\nfile and we're going to upload a couple\nof things here though we're going to\ngive it a file name we're going to do\nthe image binary that is getting really\nannoying when it keeps getting in the\nway file name image binary and then\noutside of these brackets here we're\ngoing to do comma headers\nequals equals\nheaders and then we're just going to\nprint response. Json so to have this run\nin brownie we're just going to do a def\nmain function here a nice little trick\nwe can do is we can select all this text\ntext and just hit Tab and it'll move it\nover one and perfect we can now run this\ninside of\nbrownie so we can do brownie run scripts\nupload to pinata and perfect we get a\nlittle output that's going to look\nsomething like this it's going to give\nour ipfs hash the pin size the Tim stamp\nso now if we go back to\npinata we go to pin\nmanager do a little refresh here we now\nsee our pug has actually been uploaded\nto pinata awesome work we're going to\nkeep going using the ipfs Damon to\nactually upload things but if you want\nyou could totally swap out this upload\nto ipfs to use that script that we just\ncreated to upload it via pinata instead\nof our own ipfs node anyways this upload\nto ipfs is going to return this image\nURI so we can go ahead then and set the\nimage URI it's going to be set on this\ncollectible metadata image and then all\nwe have to do is dump this collectible\nmet data into its own file and then\nupload that as well to ipfs we'll dump\nthis to its own file by doing with open\nmetadata file name and we open it with a\nW which means that we're going to write\nas\nfile json. dump collectible metadata to\nthe file so we're going have to import\nJson to do\nthis and what this is going to do is\njust going to dump this dictionary as\nJson to this collectible met metad data\nfile then we can upload to ipfs also\nthis metadata file name and this upload\nto ipfs should print out the image URI\nor in this case the metadata URI so\nlet's go ahead and try this out so\nremember we do need our ipfs Damon\nrunning and let's go back to our scripts\nand we'll do\nrowny run scripts Advanced create\nmetadata Network rank B and boom okay so\nhere is our image URI which if we click\nthis we'll be able to see looks just\nlike this and then here is our uploaded\nSt Bernard metadata file which is\nfantastic so now we have both a metad\nDAT file and we have an image URI this\nis fantastic we've uploaded both of\nthese to our ipfs and if we scroll over\ngo to our metadata file in rink B we'll\nsee we have this new file in here\nbecause we've gone ahead and saved it in\nhere it has everything that we need it\nhas same Bernard it has the description\nit has this image URI that we just\ncreated and it has some attributes that\nagain we're basically ignoring now to\nmake our lives a little bit easier and\nsince I've already actually uploaded\nthese to ipfs myself a couple times and\nsince the hashes of these are going to\nbe the exact same for all of us when we\nupload this we're going to go ahead and\njust quickly Factor this to make it a\nlittle bit easier so we don't always\nhave to have ipfs running so in our EMV\nI'm going to add a new environment\nvariable called upload ipfs and I'm\ngoing to set it equal to false so now\ndown here I'm just going to say if\n.gv\nupload\nipfs equals equals\ntrue anyway since we're going to do OS\nhere we're going to do import OS and\nbefore this I'm going to\ndoops image U equals none and we're\ngoing to\nsay image U equals image U if image URI\nwhich again I know this could be a\nlittle confusing but we're saying we're\nsetting image URI to whatever image URI\nis if image URI isn't none else we're\ngoing to create a mapping called breed\nto image URI\nof the breed so again since I've already\nuploaded them I already know what all\nthese image you eyes for these three\ndogs are going to be so up at the top\nwe're just going to create a new mapping\ncalled breed to image your\ney equals I'm actually just going to go\nahead and copy paste this whole thing\nnow you can skip this you don't have to\nrefactor here um and you can just always\nhave your Damon running and always\nupload to ipfs it's a little bit quicker\nto not always have to do that again this\nbrief image URI is in the GitHub repo\nfeel free fre to just copy paste it to\nuse it you can even click the links to\ncheck it check to see that those image\nuis are really there and this is what\nwe'll use so back down here reach IM\nimage U URI perfect and then we're also\ngoing to add if again os. getet\nEnV upload\nipfs equals equals\ntrue then we're also going to upload to\nipfs down here but this is to go and\nactually just show you how exactly we\ncould upload all this stuff to ipfs\nsince I've already done it we're going\nto make it a little bit easier on\nourselves another thing that you might\ndo is you might actually save all these\nURLs to their own file to their own Json\nobject maybe inside of the the metadata\nfolder maybe under rink be or something\nand then you could go ahead and just\npull directly from those files same\nthing with the metadata once we upload\nto ipfs we're not actually going to save\nthese URLs anywhere you could absolutely\n100% after you run this upload to ipfs\nscript we can go ahead and save it to a\nfile and pull directly from there moving\nforward but awesome Okay so we've done a\nlot of work here we have uploaded to\nipfs our metadata and our image uis so\nwe have everything that we need to\nactually just set the token URI finally\nfor our Advanced collectible we finally\ncan call this set token URI function so\nlet's go ahead and do this last bit here\nthis last set token U function function\nso let's go to scripts Advan scripts\ncreate a new file we call it set token U\nU.P and this is where we're going to set\nthe token U so we'll do def Main and in\nhere we're do a quick print print F\nworking\non network. show\nactive of course since we're using\nnetwork do from\nbrownie import Network\nclose that there and let's grab the most\nrecent\nAdvanced\ncollectible is going to be equal to\nAdvanced\ncollectible minus one since we're using\nAdvanced collectible contract let's\nimport that from brownie let's once\nagain Loop through all the tokens that\nhave been deployed so we'll do number of\nCollectibles\nequals Advanced collectible. token\ncounter\ndo a Quick\nPrint you have print F excuse\nme number of\nCollectibles token IDs and let's Loop\nthrough this list of Collectibles again\nso we'll say for each token\nID in\nrange number of\nCollectibles first we'll get the breed\nsaying breed equals\nAdvanced\ncollectible. token ID to breed of the\ntoken ID we actually have to call this\nget breed function again which luckily\nwe generalize so we can do from scripts.\nhelpful\nscripts\nimport get\nbreed and now let's first before we\nactually set the token URI let's check\nto see if it already has a token URI set\nso we're going to say if\nnot Advanced collectible. token\nURI of token\nID dot\nstarts with\nhttps so what this line is doing I know\nit's a little bit long is we're grabbing\nAdvanced collectible. token U\nof the token ID so we're grabbing this\ntoken ID's token URI and we're saying if\nit doesn't start with htps that means we\nknow that it hasn't been set so we can\ngo ahead and\nprint setting token\nURI let's actually make this a print F\nof token ID and then we can set the\ntoken U so I'm actually going to\ngeneralize this out\ninto its own\nfunction so let's go ahead and we'll do\ndef set token\nURI and as inputs this is going to take\nthe token\nID the nft contract which is going to be\nour Advanced collectible contract and\nthe token U so the first thing that\nwe're going to do we're say account\nequals get\naccount so we're going to grab this get\naccount of course from our helpful\nscripts because this set token URI is\nactually going to call that set token U\nfunction we're going to say nft\ncontract. set token\nURI of the token\nID and the token\nURI remember this is a function that we\nadded to our Advanced collectible right\nhere set token URI it takes a token ID\nand a token URI and this is going to be\nfrom of course\naccount we just created so we're going\nto say\ntransaction equals that we'll do\ntransaction. weit we wait one second for\nit or one block for it and then we'll\nprint we'll do a print F\nawesome you can\nview your nft\nat we use that open C URL\nformat nft contract. address comma token\nID then I'm just going to add another\nprint here saying please wait up to 20\nminutes and hit\nrefresh metadata hit the refresh\nmetadata button so now we have our set\ntoken URI function we can add the token\nID in here the advanced collectible\ncontract and then we just have to add\nthe token URI here so since we've\nalready uploaded and since I've already\nactually uploaded all three what you\ncould do and what I like to do is just\nhave a dictionary here so we don't\nalways have to be pulling from something\nso I have a\ndog metadata dictionary it's going to be\nequal to and we're going to add those\ndifferent dogs in here so St Bernard\nthis this St Bernard URL we're going to\npaste it here I've actually gone ahead\nlike I said and uploaded this metadata\nfor all three dogs so I'm just going to\ngo ahead and copy paste all three in\nhere again we're shortcutting a little\nbit here but what you could do is you\ncould save all these metadatas to their\nown file and you could just pull from\nthat file instead of doing kind of this\ndog metadata dictionary so in any case\nthough we're going to do dog metadata\ndictionary of breed right because dog\nmetadata dictionary of St Bernard is\ngoing to be this which again has our\nimage U has everything about our dog and\nis perfect what we also might want to do\nis write some tests around our set token\nU function of course but I'm just going\nto move on so in any case we've done a\nlot here I'm actually going to even\nclose down my ipfs\nnode and we should be just about ready\nfor everything so of course we'll run\nour brownie\ntest want to make sure that all our unit\ntests are working\ngreat which they look like they are\nworking fantastically but we are ready\nto do a full endtoend manual test here\nand you could 100% And I actually highly\nencourage you to 100% we're just going\nto run these scripts in order and look\nto see if our stuff shows up on the\nopenc nft marketplace so are you guys\nready let's do this so make sure of\ncourse your Environ variables are set\nhere make sure that your\nmetamask for rink\nB has some eth and has some link and\nthen we can go ahead and start running\nsome of these scripts so we'll do\nbrownie run scripts Advance collectible\ndeploy and crate Network rink B\nintegration test Moment of\nTruth and perfect a new token has been\ncreated awesome we can even even go grab\nthis address let's delete all these tabs\nthat we have opened up and we'll go to\nrink b. etherscan.io\nwe'll paste it in here and we can see\ncontract has been verified even though\nwe didn't verify because it matches some\nother source code we can see token\ncounter is one and we can even go to\ntoken ID to breed of zero see what breed\nit is so it's breed 2 and it looks like\nwe're getting a St Bernard again which\nis incred\nadorable we can even go to events here\nand we can see the different events\nsince this is verified we can even see\nthe name of the events so we have our\nbreed assigned event and we have our\nrequested collectible event first is an\nindex topic of token ID and then there's\nthe UN 8 breed and then we have the\nbytes 32 request ID and the address\nrequester now let's run our create\nmetadata script here so we'll do brownie\nrun Scripts Advanced create\nmetadata Network rink beam we don't have\nto run create collectible since our\ndeploying crate already does that so now\nif we run our create\nmetadata I've actually already have\nactually since this is the St Bernard\nagain I'm going to go ahead and get this\nalready exists delete to overwrite so\nwhat I'm going to do is I'm actually\ngoing to even create another one so that\nI get a new nft so I am actually going\nto run this create collectible script so\nwe're going to do brownie run scripts\nAdvance collectible create\ncollectible Network rank\nB and what this is going to do all it's\ngoing to do is it's going to fund with\nsome link which it's going to be a\nlittle bit Overkill with the link but\nthat's fine then we're going to do\nAdvance collectible. create collectible\nso we're just going to do two\ntransactions here perfect collectible\nhas now been created now I'm going to\nwait a solid 30 seconds to have that\nchain link vrf respond and I'm even\ngoing to go to the contract give it a\nquick refresh look at this token counter\nonce the chain leag vrf responds this\ntoken counter will then be two now that\nI see a token counter of two here that\nmeans that it actually has responded so\nwe can now run the create metadata\nscript and we should have a new metadata\nfile now you have two\nCollectibles zero St Bernard already\nexists deleted to overwrite create a\nmetadata file metadata rink B pug so now\nif we look in\nmetadata for rink B we have a St Bernard\nand we now have a pug awesome so we're\ngoing to set the token URI of both of\nthese if I grab this contract and I go\nto test nets.\nopenc t.\nopenc I can paste this address in and\nI'll get this doggy and then this random\nhash here right and we see there are two\ntoken U deployed again if they're not\nhere you might have to refresh but they\ndon't have the images right because we\nhaven't set the token URI so we'll go\nback look at the advanced collectible\nwe've deployed and created we've created\nanother collectible we've created their\nmetadata now all we have to do is set\nthe token\nU so brownie run scripts Advance\ncollectible set token URI Network rink B\nand this script it's going to Loop\nthrough all all of them and actually\ngoing to set those token uis so we have\nsetting token URI of zero so this\ntransaction is doing exactly\nthat and it's going to go ahead and say\nawesome here's your output and then it's\ngoing to say setting token URI of token\nID one and that's that second\ntransaction and it also gives us an\noutput to that one as well so if we've\ndone this correctly and we hit refresh\nmetadata on this test nest. open C.O\nand we do a little refresh here we can\nnow see our St Bernard which is\nfantastic and then if we change this\nfrom 0er to one since I've deployed two\nand I refresh this one's metadata and\nthen refresh the page we can now see the\nPug as well again just keep in mind\nsometimes the refreshing metadata does\ntake some time and you might have to\nwait up to 20 minutes but for all\nintents and purposes we have just\ndeployed our nfts given them token youru\neyes that aren't around centralized\nservers we can now see them on an nft\nMarketplace like openc you can let out a\nbig sigh of relief because you just did\nsomething fantastic that not a lot of\nother Engineers can do you should be\nincredibly proud of yourself at this\npoint let's take a minute go back over\nsome of the new things that we've\nlearned\nhere when deploying your smart contracts\non chain we all know that those smart\ncontracts are immutable or unchangeable\nbut what if I told you that they were\nmutable well technically I wouldn't be\ncorrect however smart contracts actually\ncan change all the time when people\ntransfer tokens when people stake in a\ncontract or really do any type of\nfunctionality those smart contracts have\nto update their balances and update\ntheir mappings and update their\nvariables to reflect this the reason\nthat they're immutable is that the logic\nitself never changes and will be on\nchain like that forever so technically\nyes once they are deployed they are\nimmutable and this is actually one of\nthe major benefits of smart contracts in\nthe first place that nobody can tamper\nwith or screw with our smart contracts\nonce we deploy them however this can be\nan issue if for example we want to\nupgrade our smart contract or protocol\nto do more things or we want to fix some\nglaring bug or issue that we have now\neven though we can't change the specific\ncode that's been deployed to an address\nwe can actually do a lot more than you\nthink we're going to explain the\ndifferent methodologies behind upgrading\nyour smart contracts and then we're\ngoing to show you how to do it now at\nfirst glance you might be thinking if\nyou can upgrade your smart contracts\nthen they're not really immutable then\nand in a way you'd be right so when\nexplaining kind of the different\nphilosophies and patterns that we can\nuse here we do need to keep in mind the\nphilosophies and decentralization\nimplications that each one of these\npatterns have as they do all have\ndifferent advantages and disadvantages\nand yes some of the disadvantages here\nare going to affect decentral so we need\nto keep that in mind and this is why\nit's so important that before you go\nahead and jump in and start deploying\nupgradeable smart contracts you\nunderstand the trade-offs we're going to\nlook at three different ways to upgrade\nyour smart contract the not really\nupgrading method the social AKA\nmigrating method and then the method\nthat you're probably here for which is\nproxies so let's talk about the not\nreally upgrading method or the\nparameterization method or whatever you\nwant to call it this is the simplest way\nto think about upgrading your smart\ncontracts and it really isn't upgrading\nour smart contracts because we can't\nreally change the logic of the smart\ncontract whatever logic that we've\nwritten is there we also can't add new\nstorage or state variables so this is\nreally not really upgrading but it is\nsomething to think about upgrades is\njust parameterizing everything whatever\nlogic that we've deployed is there and\nthat's what we're interacting with this\nfunction means we just have a whole\nbunch of Setter functions and we can\nupdate certain parameters like maybe we\nhave a reward parameter that gives out a\ntoken at 1% every year or something like\nthat maybe we have a set of function\nthat says hey update that to 2% or\nupdate that to 4% it's just a set of\nfunction that changes some variable now\nthe advantages here are obviously this\nis really simple to implement the\ndisadvantage is that if you didn't\ndidn't think of some logic or some\nfunctionality the first time you\ndeployed their smart contract that's too\nbad you're stuck with it you can't\nupdate the logic or really update\nanything uh with the parameterization\nAKA not really method and the other\nthing you have to think about is who the\nadmins are who has access to these\nSetter functions to these updating\nfunctions if it's a single person guess\nwhat you have a centralized smart\ncontract now of course you can add a\ngovernance contract to be the admin\ncontract of your protocol and that would\nbe a decentralized way of doing this so\njust keep that in mind you can do this\nmethod just need a governance protocol\nto do so another example of this might\nbe a contract registry and this is\nsomething actually that early versions\nof AA Used before you call a function\nyou actually check some contract\nregistry that is updated as a parameter\nby somebody and you get routed to that\ncontract and you do your call there\nagain this really doesn't allow us to\nhave the full functionality of upgrades\nhere you can argue that this registry is\na mix of one of the later versions but\nfor all intents and purposes this\ndoesn't really give us that flexibility\nthat we want for our upgrades but some\npeople might even think that upgrading\nyour smart contract is ruining the\ndecentral and one of the things that\nmakes Smart contracts so potent is that\nthey are immutable and that this is one\nof the benefits that they have so there\nare some people who think that you\nshouldn't add any customization or any\nupgradeability you should deploy your\ncontract and then that's it Trill bits\nhas actually argued that if you deploy\nyour contract knowing that it can't be\nchanged later you take a little bit\nextra time making sure you get\neverything right and there are often\nless security vulnerabilities because\nyou're just setting it forgetting it and\nnot looking looking at it again now if I\nwere to deploy a smart contract and I\nwanted to upgrade it with this\nphilosophy in mind that hey we got to\nkeep it immutable we could use the\nsocial Yeet method to actually upgrade\nto new versions the social Yeet method\nor the migration method is just when you\ndeploy your new contract not connected\nto the old contract in any way and by\nsocial convention you tell everybody hey\nhey this new contract this new one that\nwe just imployed yeah this is the real\none now and it's just by Convention of\npeople migrating and over into using\nthis new one that the upgrade is done\nhence my slang name of social Yeet\nbecause you Yeet the first one out of\nthe way and you move to the second\none I think I'm funny this has the\nadvantage of truly always saying hey\nthis is our immutable smart contract and\nthis is our new one this is really the\ntruest definition of a mutable because\nsince you give it no way of being\nupgraded in place then if somebody calls\nthat contract in 50,000 years in the\nfuture it'll respond exactly the same\nanother huge disadvantage here is that\nyou have to have a totally new contract\naddress so if you're an erc20 token for\nexample you have to go convince all the\nexchanges to list your new contract\naddress as the actual address keep in\nmind that when we do this we do have to\nmove the state of the first one over to\nthe second one so for example if you're\nan ERC token moving to a new version of\nthat ERC token you do have to have a way\nto take all those mappings from the\nfirst contract and move it to the second\none obviously there are ways to do this\nsince everything is on chain but if you\nhave have a million transfer calls I\ndon't want to have to write the script\nthat updates everyone's balance and\nfigures out what everyone's balance is\njust so I can migrate to my new version\nof the contract so there is a ton of\nsocial convention work here to do\ntrailer bits has actually written a\nfantastic blog on upgrading from a V1 to\na V2 or Etc with this Yeet methodology\nand they give a lot of steps for moving\nyour storage and your state variables\nover to the new contract so Link in the\ndescription if you want to read that now\nlet's get to our big ticket item so in\norder to have a really robust upgrading\nmentality or philosophy we we need to\nhave some type of methodology or\nframework that can update our state keep\nour contract address and allow us to\nupdate any type of logic in our smart\ncontracts in an easy way which leads us\nto our big ticket item the proxies\nproxies are the truest form of upgrades\nsince a user can keep interacting with\nthe protocols through these proxies and\nnot even notice that anything changed or\neven got updated now these are also the\nplaces where you can screw up the\neasiest proxies use a lot of lowlevel\nfunctionality and the main one being the\ndeleg call functionality delegate call\nis a low-level function where the code\nin the Target contract is executed in\nthe context of the calling contract and\nmessage. sender and message. value also\ndon't change so you understand what\ndelegate call means now right great and\nin English this means if I delegate call\na function in contract B from contract a\nI will do contracts B's logic in\ncontract a so if contract B has a\nfunction that says hey store this value\nin a variable up top top I'm going to\nstore that variable in contract a this\nis the PowerHouse and this combined with\nthe fall bang function allows us to\ndelegate all calls through a proxy\ncontract address to some other contract\nthis means that I can have one proxy\ncontract that will have the same address\nforever and I can just point and Route\npeople to the correct implementation\ncontract that has the logic whenever I\nwant to upgrade I just deploy a new\nimplementation contract and point proxy\nto that new implementation now whenever\na user calls a function on the proxy\ncontract I'm going to delegate call it\nto the new contract I can just call an\nadmin only function on my proxy contract\nlet's call it upgrade or something and I\nmake all the contract calls go to this\nnew contract when we're talking about\nproxies there are four pieces of\nterminology that we want to keep in mind\nfirst is the implementation contract the\nimplementation contract has all of our\nlogic and all the pieces of our protocol\nwhenever we upgrade we actually launch a\nbrand new implementation contract the\nproxy contract proxy points to which\nimplementation is the correct one and\nroutes everyone's calls to the correct\nimplementation contract you can think\nthe proxy contract sits on top of the\nimplementations the user the user is\ngoing to be making contract and function\ncalls through the proxy contract and\nthen some type of admin the admin is the\none who's going to decide when to\nupgrade and which contract to point to\nin this scenario the other cool thing\nabout the proxy and delegate call is\nthat all my storage variables are going\nto be stored in the proxy contract and\nnot in the implementation contract this\nway when I upgrade to a New Logic\ncontract all of my data will stay on the\nproxy contract so whenever I want to\nupdate my logic just point to a new\nimplementation contract if I want to add\na new storage variable or a new type of\nstorage I just add it in my logic\ncontract and the proxy contract will\npick it up now using proxies has a\ncouple of gachas and we're going to talk\nabout the gachas and then we're going to\ntalk about the different proxy contract\nmethodologies because yes there are many\nproxy contract methodologies as well and\nthis is why TR bits doesn't really\nrecommend using upgradable proxies for\nyour smart contracts because they're\nfraught with a lot of these potential\nissues not to mention again you do still\nhave some type of admin who's going to\nbe upgrading your smart contracts now if\nthis is a governance protocol then great\nyou're decentralized but if this is a\nsingle group or\nentity then we have a problem the two\nbiggest gotas are storage clashes and\nfunction selector clashes Now what is\ndoes this mean when we use delegate call\nremember we do the logic of contract B\ninside contract a so if contract B says\nwe need to set value to two we go ahead\nand set value to two but these smart\ncontracts are actually kind of dumb we\nactually set the value of whatever is in\nthe same storage location on contract a\nas contract B so if our contract looks\nlike this and we have two variables in\ncontract a we're still going to set the\nfirst storage spot on contract a to the\nnew value this is really important to\nknow because this means we can only\nappend new storage variables in new\nimplementation contracts and we can't\nreorder or change old ones this is\ncalled storage clashing and in the\nimplementations we're going to talk\nabout they all address this issue the\nnext one is called function selector\nclashes when we tell our proxies to\ndelegate call to one of these\nimplementations it uses what's called a\nfunction selector to find a function the\nfunction selector is a 4 byte hash of\nthe function name and the function\nsignature don't worry about the function\nsignature for now now it's possible that\na function in the implementation\ncontract has the same function selector\nas an admin function in the proxy\ncontract which may cause you to do\naccidentally a whole bunch of weird\nstuff for example in this sample code in\nfront of you even though these functions\nare totally different they actually have\nthe same function selector so yes we can\nrun into an issue where some harmless\nfunction like get price has the same\nfunction selector as upgrade proxy or\ndestroy proxy or something like that\nthis leads to our first out of the three\nimplementations of the proxy contracts\nthis is called the transparent proxy\npattern and this is actually going to be\nthe pattern that we're going to be\ndemoing to you today in this methodology\nadmins are only allowed to call admin\nfunctions and they can't call any\nfunctions in the implementation contract\nand users can only call functions in the\nimplementation contract and not any\nadmin contracts this way you can't ever\naccidentally have one of the two\nswapping and having a function selector\nclash and you running into a big issue\nwhere you call function you probably\nshouldn't have if you're an admin you're\ncalling admin functions if you're a user\nyou're calling implementation functions\nso if you're an admin and you build some\ncrazy awesome D5 protocol you better\ncome up with a new wallet address\nbecause you can't participate the second\ntype of proxy we're going to talk about\nis the universal upgradeable proxy or\nthe\n[Music]\nUPS this version of upgradeable\ncontracts actually puts all the logic of\nupgrading in the implementation itself\nthis way the solidity compiler will\nactually Ki out and say hey we got two\nfunctions in here that have the same\nfunction selector this is also\nadvantageous because we have one less\nread that we have to do we no longer\nhave to check in the proxy contract if\nsomeone is an admin or not this saves on\ngas of course and the proxy is also a\nlittle bit smaller because of this the\nissue is that if you deploy an\nimplementation contract without any\nupgradeable functionality you're stuck\nand it's back to the Yeet method with\nyou and the last pattern or methodology\nthat we're going to talk about is the\ndiamond pattern which doesn't number of\nthings but one of the biggest things\nthat it does it actually allows for\nmultiple implementation contracts this\naddresses a couple different issues for\nexample if your contract is so big and\nit doesn't fit into the one contract\nmaximum size you can just have multiple\ncontracts through this multi-\nimplementation method it also allows you\nto make more granular upgrades like you\ndon't have to always deploy and upgrade\nyour entire smart contract you can just\nupgrade little pieces of it if you've\nchunked them out the disadvantages here\nreally only seem like you have a lot\nmore complicated code all the proxies\nmentioned here have some type of\nethereum improvement proposal and most\nof them are in the draft phase there\nisn't really a standard here for the\nproxy that the whole Community has\nlanded on and says yes this is great\nlet's do it so for all these be sure to\njump in the discussion and give your\nthoughts all right so now that we know a\nlot more about upgrades and how they\nactually work and some different\nmethodologies behind them let's go ahead\nand learn how to actually Implement some\nof these strategies and Implement our\ncontract so that we can upgrade them now\nthere is a brownie upgrades mix directly\nin the brownie mixes organization that\nif you want to use you absolutely can\nonce again to do that it's just brownie\nbake upgrades mix and this will have all\nthe code that we're going to teach you\nhow to use right now but let's go ahead\nand build this up from scratch ourselves\nso we're going to go ahead and run\nbrownie knit this of course we're going\nto create our new Browning project here\nwe're going to be using the open\nZeppelin proxy contracts to actually\nwork with this and run with this the\nmethodology that we're going to be\nworking with is the transparent\nupgradeable proxy now they've been using\nthe universal upgradeable proxies a\nlittle bit more however the transparent\nupgradeable proxy is really fantastic\nand easy to understand so that's going\nto be the one that we're going to be\nworking with here and these are the two\ncontracts that we're going to be\nimporting directly from open Zeppelin so\nlet's get to it we're going to create a\nreally simple contract that we can\neasily tell if it's upgraded or not\nwe're going to be using the exact same\nones that open Zeppelin actually uses so\nlet's create a new file\nand this is going to be called box. Soul\nwe're just going to have it store and\nretrieve some type of value so let's\ngive the\nspdx license\nidentifier of MIT so let's pick our\nsolidity version and for this we're\nactually going to use\n0.8.0 often times you're going to have\nto quickly pick up new versions of\nsolidity anyways anyways we're going to\ndo contract box and we're going to give\nit a u\n256 private value we're going to do an\nevent\ncalled value\nchanged Going give it a un 256 new value\ngive it a function\nstore un 256 new value this is going to\nbe a public function that anybody can\ncall and all we're going to do is we're\ngoing to set value to be new\nvalue and we're going to\nemit this value changed\nevent then we're going to have a\nfunction retrieve and this will be a\npublic\nView and it's just going to\nreturn the\n256 value return value and this is going\nto be our whole contract hopefully you\ncan understand everything that's going\non in this contract I should spell\nlicense right shouldn't I now we're\ngoing to copy all of this\ncode and create a new contract called\nbox v2. so\nand we're going to paste it in and box\nversion two is going to be exactly the\nsame except we're going to add one more\nfunction called\nincrement this is going to be a public\nfunction and we're going to set value\nequals Value Plus One and we're also\ngoing to emit a value changed\nevent with that new value now this is\ngoing to be really easy for us to check\nto see if a contract has been upgraded\nor not if we can call increment on the\nsame address that we originally deployed\nbox to then this means that the contract\nhas been upgraded we shouldn't be able\nto call increment on this box contract\nbut we should be able to call it on box\nV2 perfect so that's all we need to do\nto get started now to actually work with\nthe proxies and the transparent proxy\nthat we're going to be working with we\ndo need to add them to our Browning\nproject so we're going to create a new\nfolder and we're going to call it\ntransparent\nproxy and in here we're going to add\nthose two contracts we're going to add\none called proxy admin.\nso and all we're going to do is we're\ngoing to grab all the code from the open\nZepp and proxy contract and P it right\nin\nhere since since this code is pulling\ndirectly from an open zeppin Package we\nare going to have to fiddle with the\nImports a little bit to make a match so\nbrownie can actually compile it and of\ncourse since we're going to be working\nwith a another package we have to add\nthis dependencies to our brownie\nconfig so\n[Music]\ndependencies\nopen Zeppelin slopen Zeppelin hyphen\ncontracts and for this one we are going\nto actually use\n4.1.0 then we have to do\ncompiler so\nremappings at\nopen Zeppelin it's going to be equal to\nthis dependency now while we're in here\nwe might as well do\nourv so we can get our environment\nvariables and we'll add our wallet in\nhere\nwallets from\nKey private key we can now just have\nthis be at open Zeppelin SLC\ncontracts access ownable doou and we\ndon't need to change this at all because\nwe're actually going to keep this\ntransparent upgradeable proxy\ndoole this is the second contract that\nwe're actually going to grab from open\nZeppelin so let's create a new file it's\ngoing be called transparent upgradeable\nproxy doso this exact text\nhere and we're going to copy paste this\nwhole thing from open\nZeppelin\nboom paste it in\nhere awesome and then same thing here we\njust have to little reverse engineer\nthis at open Zeppelin contracts proxy\nearc 1967 ERC 1967 proxy and perfect\nthat is exactly where we are so great\nnow if we've done this right we should\nbe able to run a\nquick Browning\ncompile oops I got to change this to\nbox\nB2 now let's run a brownie compile and\nperfect looks like we have compiled got\nsome stuff in build great everything's\nworking correctly so okay so we have our\nbox here our box V2 we have our proxy\ncontracts as well that we can use to\nupgrade this box to a new version we can\neven look if we go back to proxy of open\nZeppelin if we look at our proxy admin\nhere we see it has this function upgrade\nand call and this call is the upgrade to\nand call on the proxy contract if we\nlook in the transparent proxy this\nupgrade to in call calls upgraded to in\ncall which has been imported actually so\nwe can actually even go back back go to\nerc1 1967 proxy upgrade look for that\nagain and this is the function that it's\nactually going to call and it calls this\nupgrade 2 function which calls this set\nimplementation function and all we're\ndoing is we're doing storage slot. getet\naddress slot of this implementation slot\nthat value is going to be this new\nimplementation all it's doing is it's\nsetting the implementation slot to being\nour the new address that we want it to\nuse and we can see now if we look in the\nproxy contract the way that it actually\nworks is it has this fallback function\nwhere it's always going to delegate all\nof our calls to whatever the\nimplementation contract is this delegate\nfunction fun we look at it does a little\nbit of low-l assembly here and it uses\nthis low-l delegate call to send any\nfunction call or any call to this\ncontract to the implementation contract\nso this is exactly the function doing\nall that delegation all right so now\nthat we've dug deep into the code let's\nactually script this out and turn this\ninto a script so let's create a new file\nand we'll call it 01 deploy box. and\nthis is going to be how we're actually\ngoing to deploy the Box\nso since this is a Browning script we're\ngoing to do def main of course our\naccount it's going to be equal to get\naccount which we going to do from\nscripts.\nhelpful scripts\nimport get\naccount so let's go ahead credit a new\nfile Help full\nscripts\noops full scripts. piy\nand again we're just going to paste in\nthat get account function from our past\nhelpful\nscripts have our our get account script\nagain so we can just do account equals\nget account oh this should be sorry\nshould BEP excuse\nme do a Quick\nPrint\nploying to do network.\nshow active that means we got to do from\nbrownie import Network then we'll do box\nequals\nbox.\ndeploy\nfrom\ncount the little brackets\nhere of course since we're going to be\ndeploying this contract we also have to\nimport that from Brownie and perfect\nthis alone should just deploy the Box\ncontract right so this means we could do\nsomething like print box dot\nretrieve and it should be zero right so\nif we run brownie run\nscripts A1 deploy it'll deploy that\nwhoops we also got to add our\nEMV we don't have to put anything in\nhere yet because we're not actually\ndeploying to a real network but let's go\nahead and run this I spelled retrieve\nwrong it's probably good to spell things\nright let's try it again\nand great so we get zero here perfect\nthat's exactly what we'd expect cool\nhowever though if we\nrun box. increment this should air out\nright boom exactly it has no attribute\nincrement so this is what's known as our\nimplementation contract this box is\nimplemented it's the implementation\ncontract now we have to hook it up to a\nproxy so let's first give it a proxy\nadmin and proxy admins are optional\num and it's also recommended that if you\ndo have a proxy admin you're and you're\ngoing to use some type of def5 protocol\nsometimes it's great to have your proxy\nadmin be something like a multisig a\nnois safe which is really fantastic\nthere's going to be a link in the GitHub\nfor learning how to actually spin one of\nthose up let's go ahead and do a proxy\nadmin because they're really helpful\nanyways we could optionally we could\njust set ourselves to be the proxy admin\nbut let's set it to be this this\ncontract so we'll do proxy admin\nequals proxy admin. deploy and again\nthis will be\nfrom count and since we're using this\nproxy admin we got to import that as\nwell so if we look at the proxy admin we\nsee a couple functions here we see like\nget proxy implementation which is just\ngoing to return the address of the\nimplementation we have get proxy admin\nwhich is going to be us change proxy\nadmin we have this upgrade which is just\ngoing to call that upgrade function on\nthe proxy and and then we have upgrade\nand call upgrade and call changes the\nimplementation to the new implementation\nand then calls that initializer function\nsince we want these to be proxies you\ncan see here that we don't have a\nConstructor this is intentional instead\nwe could have some type of\ninitializer function for example maybe\nwe want to have this store be our\nConstructor instead of having a\nConstructor what we do is we call what's\ncalled our initializer function the\ninstant we deploy the contract for the\ndemo here we're just not going to have\nan initializer anyways so now we have\nthis proxy admin we have the\nimplementation contract we have the\nproxy admin let's Now hook them up to\nthe actual proxy first thing that we\nneed to do actually is we need to encode\nthe initializer function if we wanted\nstore to be our initializer function\nlike I said we could do something like\ninitial lizer equals box. store comma 1\nand this would be our initializer box.\nstore combined with one what we'd then\nhave to do is we'd have to encode this\nfor our proxy if we look at our\ntransparent upgradable proxy if we look\nat the Constructor we have address logic\naddress admin and data here the logic is\nthat implementation right this is going\nto be the address of our box the admin\nis going to be ourselves or in our case\nit's going to be that proxy admin\ncontract and then data is going to be\nthat initializer function if we go into\nthe ERC 721 proxy\ncontract go back to proxy ERC 1967\nupgrade and we look at this as one's\nConstructor we can see that this data\nbit here once this is built with this\nConstructor it's immediately going to\ncall this upgrade to end call so it's\ngoing to call this this initializer if\nwe go to upgrade to and call if we go\nback to this upgrade contract we can see\nthe upgrade to and call it's going to\ncall this address. function delegate\ncall new implementation data and this is\nhow it actually calls that initializer\nfunction we have to actually encode this\ninto bytes so we have to say box. store\nis the is the function of call and then\none is going to be the first parameter\nright if this is what we'd want to do so\nwe do box\nencoded\ninitializer function function equals and\ncode function data and this is where it\ngets a little bit tricky um but I\nusually have this encode function data\nonce again in my helpful\nscripts so we'll do quick def encode\nfunction data and it's going to take an\ninitializer which we're going to start\noff as none and then any number of\narguments after that so again this could\nbe like you know initi izer equals box.\nstore and then the arguments could be\nyou know 1 2 3 4 5 Etc or whatever right\nfor us we only have one variable that\ncan be put into store but this is how\nyou would do it and to do this Browning\nactually has a built-in function that\ncan actually do this we can just return\ninitializer do and code input star args\nand that's all we'd have to do however\nthere is a bit of an issue when the\nlength of the args is zero so I've\nalready hacked away at it for you guys\nso we're just going to do if the length\nof the\nargs is zero or we're not using an\ninitializer then we're going to return F\nutils two\nbytes x string equals\nox and we do have to import F UIL import\nF utils and of course we' have to pip\ninstall it with Pip\ninstall F utils so I know I kind of\nrushed through that but basically what\nwe're doing like I said is we're\nencoding this into bytes so that our\nsmart contracts actually know what\nfunction to call so we're just encoding\nit that's all we're doing and if it's\nblank or there's no initializer we're\ngoing to return an empty hex string and\nour smart contract will understand ah\nokay arguments are blank here perfect\nI've got a nice dock string in the\nupgrades mix that explains this even\nbetter I'm even just going to paste it\nin here for now if you'd like to pause\nand read this a little bit more to kind\nof get the full depth of what this\nfunction is really doing uh feel free to\ndo that this is a little bit lower level\nsolidity and evm stuff that we're\ngetting into here but it can be good to\nknow anyways okay great so now that we\nhave this we can go ahead and run box\nencoded initializer function equals\nencode function data which we would\nimport from our helpful scripts and this\nis what we use when we call the\nConstructor for our transparent\nupgradeable\nproxy I'm just going to have a be blank\nfor now but feel free to fiddle around\nand try to actually use an initializer\nafter we run through this demo so this\nbox encoded initializer function is\ngoing to be blank we're saying hey don't\nuse an initializer and that's totally\nfine if we were to add some stuff to\nhere we would say hey use an initializer\nso now we can actually deploy this\ntransparent upgradeable proxy if we open\nthis up with look at the Constructor we\ncan see what we need here so so we're\ngoing to say proxy\nequals\ntransparent\nupgradeable\nproxy.org this is going to be our\nimplementation contract address so we\njust say box. address already because\nwe've already deployed this which is\ngreat\nthen we're going to need our admin which\nwe could just say is us but we're going\nto use the proxy\nadmin address and then last we need that\nfunction selector we need that encoded\nfunction call which for us is just blank\nbut we still need that so box encoded\ninitializer function and then we have to\nadd\nfrom account of course and I've also\nnoticed that sometimes it's helpful to\nadd some type of gas limit\nso I'll even add a gas\nlimit of\none one two 3 one two 3 that's six zeros\nthere but sometimes you might be fine\nbut uh with the proxies they they\nsometimes have a hard time figuring out\nthe gas limit so I've just manually put\nit in here you can if you want to it\nmight work fine without it and then\ngreat let's do a Quick Print function\nwe'll\nprint\nF proxy deployed\nto proxy\nyou can now upgrade to\nV2 now what we can do is on the proxy\naddress we can call functions so\ntypically right if we wanted to call a\nfunction on this box contract we do box.\nyou know retrieve or however you spell\nit box. store let's just do box. store\nright you'd call it like this however we\nwant to actually call these on the\nproxies right because box this box\ncontract address this box contract is\nalways going to be the the same address\nand can't change the proxy code can\nchange we want to all these call these\nfunctions to the proxy and not to the\nbox here right so the way we do that is\nwe can do proxy box equals contract.\nfrom ABI we'll call it\nbox on the proxy do address\nbox.i and of course we'll import this\nfrom\nbrownie what we're doing here is we're\nassigning this proxy address the\nABI of the Box contract and this is\ngoing to work because the proxy is going\nto delegate all of its calls to the Box\ncontract typically if you put an ABI on\ntop of an address that doesn't have\nthose functions that the ABI defines it\nwould just airor right but the proxy is\nactually going to delegate all those\ncalls to the box so we could actually go\nahead and try some like\nprint proxy box\ndo retrieve hopefully I spelled that\nright and even though we're using the\nproxy address here we are going to\ndelegate the call to box so let's go\nahead and run this so we'll do Browning\nrun\nscripts deploy box it's going to deploy\nthe box it's going to deploy the admin\nit's going to encode that initializer\nfunction which we've set to nothing then\nit's going to deploy our transparent\nupgradeable proxy and then it's going to\ncall retrieve on the transparent\nupgradeable proxy instead of our box so\nlet's do\nthis and perfect we did it right it's\nreturning zero here that's awesome what\nwe could also do is we could also do\nproxy box.\nstore one and then we'll call retrieve\nwe'll see what happens\nhere whoops it's yelling at me because I\ngot to do\n[Music]\nfrom\ncount now let's go ahead and run it and\nperfect see so after we stored on the\nproxy box on this proxy we're able to\nretrieve the value there so this is\nfantastic all right now that we've\ndeployed it let's learn how to upgrade\nit going to change this to deploy and\nupgrade thatp and we're just going to do\neverything in here so now that\neverything's deployed let's go ahead and\nnow upgrade this so so now we can always\npoint to this proxy box address and it's\ngoing to be the most recent upgrade it's\nalways going to have the code that we\nwant it to have so let's go ahead and\nupgrade from box that doesn't have that\nincrement to box V2 that does indeed\nhave this increment function so let's\ntry this out so first thing we need to\ndo is we actually need to deploy that\nbox V2 so we'll do box V2 equals box\n2.\ndeploy we'll say\nfrom account and we'll leave it like\nthat of course we're going to have to\nimport box V2 from\nBrownie and right now actually let's\neven do proxy box\nincrement right if we call boxy Pro\nproxy box. increment from account this\nshould error right it shouldn't be able\nto call this increment function because\nthat doesn't exist oh and then we also\nchanged the name of the script sorry\nthis is actually going to be deploy an\nupgrade and perfect we see it actually\nerrors out here it says Hey box object\ndoesn't have this increment function\nyou're crazy I don't know what you're\ntalking about we good that's what we\nwant to do so let's delete that line box\nV2 even do a quick\nlittle upgrade\nhere now all we need to do is call and\nupgrade function now basically all we\nhave to do is call this upgrade to\nfunction right but depending on if we've\nadded axy admin contract if we're using\ninitializer function there might be a\ncouple of of different ways to go about\nthis so I like to just wrap everything\nup into its own upgrade function you'll\nsee what I mean in just a second so what\nI like to do again we're going to pop\ninto our helpful scripts and we're going\nto create a new one called upgrade now\nfor parameters in here of course we're\ngoing to take some type of account so\nthat we have something to account to\ndeploy\nfrom we're going to use the proxy which\nis again going to be that proxy contract\nwhich is going to be our our proxy\ncontract here we're going to need a\nnew\nimplementation address we're going to\nneed the proxy\nadmin\ncontract which could be none for us\nwe're going to have one but it could be\nnone and then we're going to have an\ninitializer\nwhich also could be none and then we're\ngoing to have the args for the\ninitializer which also could be none\nagain this star is a special thing in\nPython which says any number of\narguments will just get stored into this\nlist called arcs and perfect this is\ngoing to be our function that's just\ngoing to take care of everything for us\nso first thing let's check to see if\nthere is a proxy admin contract so we'll\nsay if there is a proxy admin contract\nthen we want to check to see if there's\nan initializer\nwhat we're going to do is we're first\ngoing to want to encode that function\ndata of course so we'll say\nencoded function call equals encode\nfunction data with the\ninitializer and those star\nargs this is going to be the encoded\ninitializer function here then all we\nhave to do and actually let's do start\nwith a blank transaction equals none say\ntransaction equals proxy admin contract\nsince we're using one of these proxy\nadmin contracts since we've detected one\ndot upgrade and call since we also have\nan\ninitializer we're going to pass the\nproxy do\naddress new implementation\naddress and the encoded function call\nand then of course from account so this\nupgrade and call if we look in that\nproxy\nadmin there's this upgrade and call\nfunction right on the proxy admin and it\njust calls upgrade to and call of the\nproxy contract so hopefully don't don't\nlet this boggy down a little bit that\nthere's kind of a lot of mix and\nmatching going on but this is what's\ngoing on oop sorry this is encoded\nfunction call not encoded function data\ngreat now if they don't have an\ninitializer well what do we do well we\ndon't need to encode any function call\nhere we can just say\ntransaction equals that proxy admin\ncontract.\nupgrade so it has an upgrade and call it\nalso just has a regular old upgrade so\nwe'll just call upgrade and we'll give\nit the proxy do\naddress the new implementation address\nand then\nfrom account now if it doesn't have a\nproxy admin contract this means that the\nadmin is just going to be a regular old\nwallet well what do we do do then well\nfirst check to see if it has an\ninitializer still and if it does we need\nagain to encode that function call we\ncan just copy and paste that there then\nonce that's encoded we can just call\ndirectly off the proxy contract we're\ngoing to call exactly what the proxy\nadmin contract is calling which going to\nbe proxy\nupgrade to and call we're going to give\nit the new implementation address the\nencoded function\ncall and then from\naccount let's wrap this all up in a big\nelse so if proxy admin contract do this\nstuff else do this\nstuff if initializer do that otherwise\nwe can just do transaction equals proxy\ndo upgrade two and we just add that new\nimplementation\naddress from\ncount and then we'll finally return\ntransaction so I know that there is a\nlot here but we're really just making\nthis upgrade function really General we\ncould always just know okay if we we're\ngoing to use a proxy admin let's just do\nit like this okay no we're not going to\nuse a proxy admin we're also not going\nto use an initializer great it would\njust look like this but this is\nessentially all that we have to do so\nnow that we now that we have our upgrade\nfunction we can go ahead and use it here\nso we need to give it an account a proxy\na new implementation address so we'll\nsay account so we'll say\nupgrade transaction equals upgrade\naccount we need a proxy and a new\nimplementation address we're going to\ngive it the\nproxy and we're going to give it box b2.\naddress for that new address\nwe do have a proxy admin\ncontract so we'll say\nproxy\nadmin contract\nequals proxy admin and we don't have an\ninitializer so we can leave that part\nblank of course we need to import this\nupgrade function from our helpful\nscripts and this is all that we need so\nnow we can do\nprint proxy has been upgraded and what\nwe could do now is we can do proxy box\nequals\ncontract. from\nAI we'll call it box\nV2 we give it the proxy do address box\nv2.\nABI and now we should be able to call\nproxy box.\nincrement\nfrom account and then we can\nprint proxy box. re\nretrieve and this should now be one and\nwhat we'll actually see is that this\nwill return two why does it return two\nwell in our original proxy box we stored\none so it started with one we then\nupgraded to this new contract and then\nlet's actually just do a weit of course\nwe upgraded to a new contract right here\nhowever the storage of that contract\nstayed in the proxy so that one stayed\nin the proxy so even though we upgraded\nthe contract there's still one stored at\nthe location of storage so then when we\ncall increment now and then we call\nretrieve it's going to go from one to\ntwo so let's go ahead and and run this\nbrownie run\nscripts Loy upgrade\nenter and boom that is exactly what we\nsee output here this is an incredibly\nincredibly powerful and advanced feature\nand if you've gotten to this point you\nare on the border of being one of the\nmost powerful smart contract Engineers\non the planet huge congratulations for\ngetting this far but we're not quite\ndone we of course need to write some\ntests because that is what's going to\nmake sure our project always stays in\nsync and always stays up to dat so let's\nwrite a couple of tests here so let's\ncreate a new file we'll call testbox\nproxy dopy and for this we're really\njust going to test to see that our\ncontracts work we're going to see that\nthis box actually is going to work\ncorrectly so let's create a new test def\nproxy delegates\ncalls so we're going to make sure that\nwe actually can delegate calls to our\ncontract we're going to say account\nequals get\naccount which means we got to do\nfrom scripts. helpful\nscripts import get account then we're\ngoing to do box\nequals box.\ndeoy of course this is going to be\nfrom account since we're using box we're\ngoing to do from brownie\nimport box we're going to do this proxy\nadmin so we're going to say proxy admin\nequals proxy\nadmin\ndeploy of course\nfrom\ncount let's import proxy admin from\nbrownie all right so now we'll do the\nBox encoded\ninitializer\nfunction or whatever we called it before\nthis is going to be that\nencode function data which uh my vs code\nactually automatically imported thanks\nvs code and again we're leaving it blank\nuh because we're not actually going to\nhave a store there and then we're just\ngoing to go ahead and run that\ndeployment so we're going to say proxy\nequals trans parent\nupgradeable\nproxy and we're going to grab this from\nbrownie.\ndeploy say again the box.\naddress proxy admin.\naddress box encoded initializer\nfunction we say from account and then\nwe'll give this a gas\nlimit\nof 3 1 two 3 now we're going to put the\nABI on top of this proxy so we're going\nto say proxy box\nequals contract. from ABI we going to\nname it\nbox this is going to be with the proxy\naddress and the box.\nABI of course we're going to need to\nreport contract from Brownie and okay so\nnow we can\nassert proxy\nbox.\nretrieve if I spelled that right is\nequal to zero then we're going to do\nproxy\nbox.\nstore do one and this will be from\naccount and then we're going to assert\nagain this proxy box. retrieve should\nnow equal one so we're using this proxy\ncontract we've slapped the AI on top of\nit and this should work so we're just\ntesting to see that our proxy is working\ncorrectly\nso we can go ahead and test this then\nwith rounding test and beautiful it\npassed now let's go ahead and create a\nnew script for testing the upgrades\ncreate a new file call it test box V2\nupgrades. piy and let's do it call def\ntest proxy\nupgrades so account is going to be equal\nto get account hopefully at this point\nyou're getting pretty good at writing\nthese these tests from scripts. helpful\nscripts report and of course we want to\nadd this in\nnitpy just in case you forgot so now\nwe're going to import get\naccount perfect so we have our account\nhere now as you can see we're doing a\nlot of this box equals box. deploy\ndeploy the proxy admin it would probably\nmake sense in one of your scripts to\njust write a deploy three to write a\nfunction called like deploy all or\nsomething like that so again if you guys\nwant to learn more if you want to\nimprove upon this I would highly\nrecommend you go back and you make some\nof those improvements to to Really\nmodularize this up but for the time\nbeing let's just keep going so box.\ndeploy\nfrom account and since we're doing this\nwe're going to do from brownie import\nbox say proxy admin equals proxy admin.\ndeploy\nthis will also be\nfrom\naccount comma proxy admin we're going to\nget those initializer functions so we'll\nsay box encoded initializer\nfunction equals\nencode function data which we're going\nto grab from our helpful scripts as well\nthen we're going to do the proxy\nagain proxy equals transparent up\ngradable proxy that\ndeploy got to import this from browny as\nwell oops not twice\nthough\ndeploy it's going to have the box set\naddress proxy admin.\naddress box encoded initializer\nfunction from\naccount guas limit\none two 3 one two three all right so we\nhave the proxy deployed we've already\ntested that this proxy Works in this\ntest box proxy so we're not going to go\nahead and test that again what we're\ngoing to do instead now is now we're\ngoing to deploy box\nV2 and we're going to update the proxy\nand make sure that everything still\nworks so we're going to do box V2 equals\nbox v2. deploy\nit's going to be\nfrom account of course now we're going\nto say\nproxy box equals contract. from\nABI box\nV2 roxy.\naddress box b2.\nABI and we're going to\ngrab both\nthis and this from brownie\nand what we're going to try to do is\nslapping this ABI onto this proxy\naddress we're going to try to call a\nfunction only box V2 can call however we\nknow that like what we tested before it\nactually should revert so we can\nactually check for reverts by\nimporting py test and we can say with py\ntest. raises and I know that um this is\na brownie exception I know what type of\nexception this is it's an\nexceptions. virtual machine\nerror you can figure out what type of\nerror this is by um just just running it\nand getting the error so this is\nactually from brownie this exceptions\nthing so we're going to actually also\nimport exceptions from brownie we're\ngoing to\nsay proxy box.\nincrement from\ncount and I saved and everything sorry\ngot formatted here but calling proxy\nbox. increment should throw this\nexceptions. virtual machine error so\nthis test will pass if this throws an\nerror and that's how we test that so we\nwant this to throw an error the first\ntime we call it then we're going to\nupgrade and then we'll call it again and\nit'll actually work now we're going to\ncall\nupgrade on count proxy box\nV2 proxy admin\ncontract\nequals proxy\nadmin we're going to need to grab\nupgrade from our helpful scripts and now\nwe should actually be able to call\nincrement with our proxy box so first\nwe'll do an quick assert proxy\nbox. retrieve equals z then we'll do\nproxy box. increment\nfrom account and then we'll\nassert proxy box.\nretrieve is one so we're deploying our\nbox we're deploying our proxy and\neverything around it then we're\ndeploying our V tool implementation\nwe're trying to call increment which\nwon't work we then upgrade our proxy to\nthis new address and then we can go\nahead and call increment and it should\nactually increment our box here so let's\ngo ahead and run this test rny run test\nexcuse me Ry test-\nK grab this paste it\nin and we've done it our tests are\nworking correctly so we know that our\nbox is working correctly awesome great\njob like I said this is an incredibly\nincredibly powerful feature to be able\nto do these upgrades with these there\ncomes a lot of risk at least in the form\nof centralization risk if you're the\nonly wallet that controls the proxy that\nmeans your application is centralized\nfull stop so if you're going to deploy\nanything with proxies to mainnet\nabsolutely absolutely be sure to get it\naudited\nbeforehand now before we close this\nproject up let's actually deploy this to\nan actual test net so that we can see\neverything that goes on when we call\nthis deploy an upgrade let's go ahead\nand do it so let's pop into our EMV file\nand let's paste the variables that we\nhave in here we need the private key web\n3 inferior project ID The Ether scan\ntoken awesome let's even let's even\npublish the source of all these\ncontracts so that we can see them on\nether scan so for box we're going to do\na little comma here we'll say publish\nSource equals true I'm just going to\ncopy this comma to publish Source equals\ntrue and paste it on all of my\ndeployments Source true publish Source\nequals true on the on the\nadmin on the initial transparent\nupgradeable\nproxy on the box V2 deployment and\nthat's it I've got my ether scan token\nmy web 3 INF fura my private key my\nbrownie config is indeed pulling from\nthe private key myv hasv let's check to\nsee my wallet we have some r be in here\nperfect let's do this brownie run\nscripts deploy an upgrade Network rink\nB all right so it looks like a couple of\nour contracts weren't able to actually\nverify there are a couple bugs being\nworked out with some of the\nverifications so we're going to ignore\nthe ones that weren't able to be\nverified here but let's go ahead grab\nthese addresses pop them onto the rinky\nether scan and see what just happened\nthis is our box implementation let's\ngrab this address let's paste it into\nthe rinky testet ether scan awesome this\nis exactly what we have contract has\nbeen verified this is exactly the code\nthat we have here and we can see all we\nhave is a contract creation and this is\nexactly correct because when we call the\nstore function on this it's actually\ngoing to get stored we never actually\ncalled any functions directly on this\ncontract all we did was deploy it which\nmakes perfect sense let's go check out\nthis proxy admin now this second address\nsecond contract that we deployed sadly\nthis one didn't get verified however we\ncan see we did indeed call this upgrade\nfunction at some point which makes a lot\nof sense if we look at our script proxy\nadmin in our upgrade code since we did\nhave a proxy admin contract we did call\nthat upgrade function perfect makes\nsense now let's go to this transparent\nupgradeable proxy this is going to be\nthe most interesting one out of all of\nour applications interestingly enough we\nlook at this contract we can see store\nand increment both have been called on\nthis contract not on the box because\nagain this is the proxy that we're going\nto call all the functions on to make our\ncontracts gradable internal transactions\nare calls that another smart contract\nmade to this transaction and if we look\nat a couple of these we can see if we\nclick more we had increment called from\nanother contract which makes sense we\nhad upgrade called from the proxy admin\nand then we also of course we had store\ncalled from another contract and if we\nverified this we would be able to see\nether scan recogniz this as a proxy\ncontract as well hopefully when you work\nwith this you'll be able to verify it as\nwell but if not not a big deal you can\nalways just manually do it later\nyourself so this was an incredibly\npowerful project that we just did here\nand that we worked on and all right\nmaybe take a nap maybe go for a walk get\nsome food get a drink because we are on\nto our last coding project now I do want\nto say that this project is considered a\nbonus because we're going to be going\nvery quickly over the front end pieces\nwe're going to take all the building\nblocks that we've learned and build an\namazing full stack application gear up\nget ready let's jump into this bonus\nproject and then after we finish this up\nwe're going to close everything out with\na final quick section about security\nfuture and and thank you for joining\nthis course so let's do this last\none all right now we are moving on to\nour final project this is going to be\nthe most advanced projects and combine\nall the knowledge that we've learned so\nfar into one project then we're\nadditionally going to put a front end or\na user interface onto this project when\nwe build our own applications we're\ngoing to need a way for nevs to actually\ninteract with it in a meaningful way so\nnow this isn't a front-end or react\ntutorial course although we will be\nexplaining some of the choices that\nwe've made and how to actually do them\nyou should be able to follow along fine\neven if you don't have any front-end\nexperience here if you're looking for a\nfull front-end tutorial freec code Camp\nhas some amazing videos that you can\nabsolutely try out all right welcome\nback everybody and now we are going to\nbe embarking on the most exciting the\nmost end to endend we're going to take\neverything that we've learned and wrap\nit all together in this single last\napplication here and we're also going to\nbe learning about front-end development\nand we're going to be building a front\nend on top of our application on top of\nour contracts here now this isn't a\nfrontend tutorial however fre Cod Camp\nhas some wonderful wonderful react\ntutorials we're going to be teaching you\nguys just enough so that you can go\nahead jump in and build your own simple\nbut also kind of nice looking front ends\non top of whatever contracts that you\nhave for those of you who want users to\nactually interact with your applications\nand interact with your contracts\nbuilding a usable front end is a really\nimportant piece so let's take a quick\nwalkr of what this application is going\nto look like so here is our our front\nend here and what this application is\ngoing to allow users to do is it's going\nto allow users to stake or deposit their\ntokens into what's called our token Farm\ncontract once they have some token\ndeposited that's when you can kind of go\nget creative with what you want those\ntokens to do you could use it as staking\nin some governance you could use it to\nyou could go ahead and invest it in\nsomething like a or another D5 protocol\nto gain interest you could build a yield\naggregator there's a ton of ton of\ndifferent features that you can actually\ndo once you have users stake their\ntokens and here's how they would do it\non their UI side so we have this little\nbutton here which we go ahead and click\nconnect on metamask is going to pop up\nand we're automatically going to sign in\nthat's going to connect our metamask to\nthis user interface now so if I look at\nmy metamask I'm on the Coen test Network\nwe can see that I am indeed connected\nnow what I can do is I can now stake\nsome of my tokens into this contract we\ncurrently have three different types of\ntokens that this platform allows you to\nstake wrapped ether\nFIU which is mimicking die on the test\nNetwork and our dap token this dap token\nis going to be the reward token that our\nplatform gives users as an incentive for\nstaking on our platform once we stake we\ncan actually then unstake and that's\nreally it so we'll go ahead and stake\nmaybe we'll stake 10 dap we'll hit stake\nminim mask will pop up this is the\napprove function this first approved\nfunction that gets called we get a a\nreally nice little waiting bar here and\nonce it's been approved we get a\nnotification saying the transfer has\nbeen approved we then go ahead we'll\nconfirm staking we'll get this little\nloading bar while it's being staked and\nwe'll see that popup that says tokens\nstaked successfully now if we go to the\nToken Farm contract we can see that we\nhave 10 of this dap token staked we can\nalso unstake it the other thing that we\ncan do is as admins of this wallet we\ncan actually issue a reward to our users\nbased on how much how much they've\nstaked so you see right now we have 95\ndap token we have 10 dap token staked on\nthe back end I'm going to run an issue\ntoken script it's going to send all\nusers that have some stake a little bit\nof a Dap token reward now you can see\nit's been updated and we have we've been\ngiven a little bit of dap token that\nresembles the amount of dap token that\nwe have staked the way that we figure\nout the value of all of our different\ntokens is using of course chain the\nprice feeds we can then of course\nunstake\neverything and we see tokens unstaked\nsuccessfully and that's it and this is\nwhat we're going to build now we aren't\ngoing to go over the unstaking portion\nof the front end application here but\nhere's what it would look like if you\nwere to go ahead and finished building\nout the front end yourself there is a\nfull repository with the entire front\nend with this unstaking piece but for\nSimplicity we're just going to skip over\nthis unstaking bit so let's go ahead and\nget started I'm going to go ahead and\nmake a new directory called D5\nstake\nyield\nBrownie and then I'm going to\nopen this up in a new text editor now\nthe first thing of course that we want\nto work with is going to be our contract\nso we're in here remember always start\nwith brownie knit or you can start with\nthe chain link mix I'm just going to go\nah a and start with brownie knit and\nperfect here is our setup all right\nfirst thing we're going to do is we're\ngoing to make\nour dap token. so this is going to be\nthe token that we're going to give out\nto users who are staking on our platform\nthis is our reward token you might have\nheard of yield farming or liquidity\nmining this is our token that allows\nusers to actually engage and participate\nin that and this is just a regular old\nerc20 so you guys already know we've\ndone this before and for this one we're\neven going to use the latest and\ngreatest in solidity remember I said\nthat you're going to have to get really\ngood at bouncing around between solidity\nversions so for this one we're going to\ndo everything in 0. eight so let's go\nahead and do that so we're going to do\npragma\nsolidity\n0.8.0 and we're going to do this the\nexact same way we made our other erc20\ntoken we're going to go ahead and use\nopen Zeppelin again we can even just\ncopy paste the import from their\ndocumentation or we can just write out\nimport at open Zeppelin SLC contracts SL\ntoken\nerc20 erc20\nsoul and you guessed it because we're\nusing this at open Zeppelin syntax we're\ngoing to make a new\nfile rting config.yml going to make some\ndependencies we'll do\nopen Zeppelin\nslopen\nZeppelin contracts this time we're going\nto actually use version four of these at\n4.2.0 and again you can find out\neverything about this package by going\nto open zeppin slopen zeppin contracts\non GitHub and then\ncompiler\nsulk\nremappings at open Zeppelin\nequals this part right\nhere paste it in okay great then what we\ncan do we can go back to our dap token\nand just do some basic erc20 bits here\nso we'll do contract dap token is erc20\nand we'll give it our Constructor\npublic\nerc20 we'll call\nit dep token and we'll give it a symbol\nof dep and we'll give it an initial\nSupply as well so we'll call the mint\nfunction\nand we'll set the message. sender as the\nowner give it an initial supply of 1\nmillion which will be one 1 two 3 one\ntwo three plus those 18 zeros so 1 two\nthree four five six seven eight nine 10\n1 two three four five six seven\neight and now that we have our first\ncontract we can try to compile it\nbrownie\ncompile and looks like it worked great\nnow we're going to go on to create our\nmore interesting contract\nour token\nFarm we can even take a quick second and\nfigure out what we want this to be able\nto do well we want to be able to stake\ntokens unstake tokens issue tokens this\nis going to be issuing those token\nrewards we're probably going to want to\nadd allowed tokens to add more tokens to\nbe allowed to be staked on our contract\nand we're probably going to want some\ntype of get F value function where we\ncan actually get the value of the\nunderlying Stak tokens in the platform\nwith that in mind let's move on\nso you know the drill pragma solidity\ncarat\n0.8.0 and we're going to be here for a\nwhile so I'm going to close those\nout and this will be our\ncontract token Farm contract token farm\nand let's not forget our s PDX\nlicense\nidentifier of MIT well let's go ahead\nand start with the staking of the tokens\nright because that's going to be the\nmost important piece of our application\nso we're going to do\nfunction stake tokens they'll probably\nwant to stake an amount of\ntoken and they'll probably want to stake\na certain address of the token so some\namount of some token now there's a\ncouple things we need to keep in mind\nhere what tokens can they\nstake how much can they stake so these\nare our first two questions for our\napplication we're just going to say you\ncan stake any amount greater than zero\nso we can even add that we'll do\nrequire amount is greater than zero and\nif it's not we'll just say amount must\nbe more than\nzero and since we're using version eight\nwe don't have to worry about anything to\ndo with safe math which is awesome so we\ncan just go ahead and do stuff like this\nwe now we only want certain specific\ntokens to be staked on our platform so\nwe could say require token is allowed or\nsomething to this effect so we might\nhave to actually create a token is\nallowed function so let's go ahead and\ncreate that function\ntoken is\nallowed it'll take some token address we\nmake it a public function and it'll\nreturn Boolean it'll return true if that\ntoken's allowed or false if it's not\nallowed so how do we know if a token is\nactually allowed we probably want some\nlist or some mapping of these tokens and\nwhether or not they're allowed after all\nwe've learned you'll probably learn that\nthere definitely are some trade-offs\nbetween lists and mappings here for\nsimplicity's sake we're just going to\nstick with the list for now\nso we're going to create an address\narray we'll make it public called\nallowed\ntoken and this will just be a list of\nall the different allowed tokens for our\ntoken is allowed function we'll just\nLoop through this list and see if that\ntoken is in there so we'll do a for\nLoop\nfour un\n256 allow tokens index equals zero\nallowed tokens index is less\nthan allowed tokens.\nlength allowed tokens\nindex Plus+ so we're going to Loop\nthrough this list and we're just going\nto say\nif allowed\ntokens of allowed tokens index equals\n[Music]\nequals this token\nthen we're going to return\ntrue otherwise if we get through this\nwhole for Loop and we don't find this\ntoken in here we're just going to return\nfalse now we have a way to check to see\nif allow tokens are there let's actually\nwrite a function to add alloud tokens so\nwe can do function add alloud\ntokens address token public function and\nwe'll do allowed tokens and we'll just\npush\nit onto that array now adding allowed\ntokens is probably something we only\nwant the admin wallet or the owner of\nthis contract to do so we'll add only\nowner as a modifier to this function and\nwe'll make this token Farm ownable is\nownable and we'll import from open\nZeppelin here too import at open zeppin\ncontracts\naccess ownable doso\ndo a quick\ncompile great things are being compiled\nfantastically now that we have a little\nbit of functionality here now might be a\ngood time to actually go ahead and start\nwriting some tests if you want to since\nI know that we're going to change the\nConstructor a little bit and we're going\nto change a little bit of how this is\nactually formatted I'm just going to\nkeep going but now might be a great time\nhm should I start writing some tests for\nmy application you know we're going to\ndo those tests later on anyways though\nall right great but in any case now that\nwe have these two functions we can go\nahead and actually start checking to see\nif the tokens that these stakers are\ngoing to stake is actually allowed so\nwhat we can do now is we're going to add\nthis require statement in we can require\ntoken is\nallowed of\ntoken otherwise we'll just say token is\ncurrently not\nallowed and perfect now we have two\nrequired statements that answer these\nquestions what tokens can they stake and\nhow much can they stake so now all we\nhave to do is we just have to call the\ntransfer from function on the erc20\nremember erc20 remember ER c20s have\nthese two transfer type functions they\nhave transfer and they also have\ntransfer from transfer only works if\nit's being called from the wallet who\nowns the tokens if we don't own the\ntoken we have to do transfer from and\nthey have to call approve first so we're\ngoing to call the transfer from so we're\ngoing to call the transfer from function\non the erc20 since our token Farm\ncontract isn't the one that owns the\nerc20 we also have to we also have to\nhave the Avi to actually call this\ntransfer from function so we're going to\nneed the ic20 interface we could go\nahead and pop it in here we could also\nmake an ec20 contract we could also just\ngrab it from open Zeppelin so we'll do\nimport at open Zeppelin SL contracts SL\ntoken erc20\nic20 Soul we're using the interface here\nbecause we don't need the whole contract\nanyways let's now wrap ic20 let's wrap\nthis token address as an erc20 token so\nnow we have the\nABI via this interface and the address\nand we'll call.\ntransfer\nfrom from the message.\nsender and we'll send\nit to this token Farm contract so from\nwhoever calls stake tokens to this token\nFarm contract and we'll send the\namount and perfect now we just need to\nkeep track of how much of these tokens\nthey've actually sent us so we're going\nto want to create some type of mapping\nhere and this mapping is going to map\ntoken\naddress\nto Staker address to the amount this way\nwe can keep track of how much of each\ntoken each Staker has staked so it's a\nmapping per token per Staker per amount\nso we'll just call\nthis mapping of that token address which\nis going to get mapped to another\nmapping\nof\nthose user addresses which then gets\nmapped to a un 256 so we're mapping the\ntoken address to the Staker address to\nthe amount we'll make this a public\nmapping we'll call\nit staking balance now that we have this\nmapping in our stake token function what\nwe can do is we can say staking balance\nof this\ntoken from message. sender\nis now going to equal whatever balance\nthat they had before\nplus the amount all right this is great\nnow we have a way for users to stake\ndifferent tokens that we've actually\nallowed them to stake on our platform\nawesome work so what do we want them to\nbe able to do next we want them to\nunstake tokens we want to be able to\nissue some reward we want to be able to\nget the eth value based on that reward\ntypically you might want to do this\nunstake tokens bit first however I know\nthat we're actually going to need some\nadditional functionality in our stake\ntokens function for us to actually issue\ntokens properly so let's just go ahead\nand do this issue tokens bit remember\nthis issue tokens is a reward we're\ngiving to the users who use our platform\nso we want to issue some tokens based\noff the value of the underlying tokens\nthat they've they've given us so for\nexample maybe they've deposited 100 eth\nand we want to\ndo a ratio of one to one for every one\neth we give one dap token that's pretty\neasy for us to figure out however let's\nsay they have 50 eth and 50 die staked\nand we want to give a reward of one\ndap one dap token per one\ndie well then we'd have to convert all\nof our eth into die so that we know that\nconversion ratio for the DAP token\nso that's the problem that we're going\nto work on now let's create this\nfunction called issue\ntokens\nthis is going to be a function only\ncallable Again by the owner or the admin\nof this contract so how do we actually\ngo ahead and issue tokens here well the\nfirst thought would be to Loop through a\nlist of all the stakers that we have but\nright now we don't have a list of\nstakers what do we have we have a\nmapping of stakers and we have a list of\nallowed tokens well we're probably going\nto need to have a list of stakers so\nwe'll do an address array because again\nwe can't Loop through a mapping so we'll\ndo an address array make it public\ncalled\nstakers is just a list of all the\ndifferent stakers on our platform now\nwhen somebody Stakes a token we're going\nto have to update this list we want to\nmake sure they're only added if they're\nnot already on the list so in order for\nus to do this we should get an idea of\nhow many unique tokens a user actually\nhas so I'm going to create a function\ncalled update\nunique tokens Stak with message. sender\nand the token and what this function is\ngoing to do it's going to get a good\nidea of how many unique tokens a user\nhas and if a user has one unique token\nwe can add them to the list if they have\nmore than one we know know that they've\nalready been added to the list so we\ndon't need to add them there so let's\ncreate this\nfunction update unique token State we'll\nhave it input an\naddress\nuser and an\naddress token and we'll make\nthis an internal function so that only\nthis contract can call this function and\nwhat we'll say is if\nstaking\nbalance let's even do a little\nunderscores\nhere of\ntoken of user is less than or equal to\nzero we're going to update some unique\ntokens staked mapping so we'll say\nunique tokens\nStak of the user it's going to equal the\nunique token Staker of the user plus one\nand since we have this new mapping\ncalled unique token Stak we'll make that\nas\nwell so we'll do a\nmapping of an address to a un\n256 public called unique tokens Stak so\nthis way we know how many different\ntokens each one of these addresses\nactually has staked now that we have a\nbetter idea of the unique tokens each\none of these users has staked what we\ncan do is we can figure out whether or\nnot we want to push them onto this\nstakers list if they're already on there\nwe don't want to push them on there if\nthey're not on there then we do want to\npush them on there so we can just do is\nsay if unique token\nstate of message. sender is equal to one\nif they have one unique token staked if\nthis is their first unique token we're\ngoing to add them to that stakers list\nso we'll say stakers\npush message. sender and this is going\nto be our completed stake tokens\nfunction here so we had to add this\nlittle extra functionality between the\nunique tokens to figure out how to\nactually issue some reward for them but\nnow that we have this list and it's\ngoing to get updated here and it'll also\nget updated when we unstake what we can\ndo now is just Loop through this list of\nstakers so we can say\nfour you\n256 stakers index equals zero stakers\nindex is less than stakers\nlength stakers index\nPlus+ and now we're going to issue some\nof these tokens here so we're going to\nsay the\naddress recipient equals\nsakers sers index so one at a time we're\ngoing to Loop through grab these\nrecipients and then we're going to send\nthem a token\nreward based on their\ntotal value\nlocked so we got to do a couple things\nhere we have to send them a token reward\nwe have to figure out how to actually\nsend them this token and then we also\nhave to get their total value locked so\nlet's do this to send them a token\nreward this is going to be this dap\ntoken that we created in the beginning\nthis is going to be our dap token so\nright when we deploy this contract we\nneed to know what a reward token is\nactually going to be so we can do right\nat the top and then I'm actually G to\nI'm actually just going to move this\narray up here so that they're all kind\nof nicely together what we need to do is\nwe need to create a Constructor right\nwhen we deploy this contract we need to\nknow what is the address of the DAP\ntoken what's the address of the reward\ntoken that we're going to give out so we\ncan say Constructor it will be passed an\naddress of the DAP token\naddress this will be a public function\nand we'll store this dap token as a\nglobal variable\nso we can say ic20 since we're already\nimporting it here\npublic dap\ntoken what we can do now is set dap\ntoken equals\nic20 dap token address so now we have\nthis dap token with its Associated\naddress and what we can do now is call\nfunctions on it for example we can\ncall dap token\ntransfer we can call transfer here\nbecause our token Farm contract is going\nto be the contract that actually holds\nall these DB tokens and we're going to\nsend this token\nto the recipient of course but how much\nare we going to send right how much this\nof this\ntoken are we going to send to them well\nwe need some function to get the total\nvalue so we're going to say you and 256\nuser total value equals some function\nright and we can go ahead and Define\nthat right now we'll call this function\nget user total value right or get\nrecipient total value or whatever you\nwant to say so we'll pop recipient in\nhere and let's go ahead and create this\nfunction so we'll call function get user\ntotal\nvalue\naddress user and this is where we do a\nlot of looping right we're got to we got\nto find out how much each of these token\nactually has now what a lot of protocols\ndo instead of actually them sending and\nthem issuing the tokens is they actually\njust have some internal method that\nallows people to go and claim their\ntokens right you've probably seen that\nbefore people claiming airdrops that's\nbecause it's a lot more gas efficient to\nhave users claim the aird dropped\ninstead of the application actually\nissuing the tokens right it's going to\nbe very gas expensive to do looping\nthrough all these addresses and checking\nall these addresses right we're going to\ndo it though because we are a wonderful\namazing protocol and we want to give our\nusers the best experience but in any\ncase this is going to be a public view\nfunction that will return a un 256 right\nbecause we want to return this total\nvalue to our issue tokens function up\nhere so how do we actually get started\nhere well let's create a unit 256 total\nvalue and we'll set it off to start it\nto be zero here and let's even start it\noff with a quick require statement right\nwe want to\nrequire that the unique token state of\nthis\nuser is going to be greater than zero\nright and if it's not we'll say they\ndon't have any tokens stake right so the\nvalue is going to be nothing now if this\nis true if they have some token staked\nwe'll go ahead and find it so we're\ngoing to Loop through those allowed\ntokens up here the allowed tokens and\nwe're going to find how much this user\nhas for each one of these allowed tokens\nso we're going to say four unint\n256 allowed tokens index equals Zer\nallowed tokens index is less than\nallowed tokens. length allowed tokens\nindex\nPlus+ and let's go ahead and we'll add\nthe total value and now we'll say the\ntotal value is going to be equal to the\ntotal Value Plus however much\nvalue this person has in these tokens in\nthis single token so get user total\nvalue is the total value across all the\ndifferent tokens we need a way to get\nthe total value across one token so\nwe're going to create a new function\ncalled get user single token value and\nwe'll pass it our user and we'll also\npass it this single token that we're on\nright now so we'll pass it allow\ntokens allow token index\nso we got to create a new function here\nfunction get user single token value\nthis is going to take an address of a\nuser and an address of a token it's\ngoing to be a public function I'm just\ngoing to put this on a new line to make\nit a little easier to see it's going to\nbe a view function and it's going to\nreturn a u in 256 we want to get the\nvalue of how much this person staked of\nthis single token so for example if\nthey've staked\n1\ne and the price of one e is $22,000 we\nwant to make sure that this returns\n$2,000 or if they have 200 die stakes\nand the price of 200 die is $200 we want\nto make sure this returns 200 right so\nwe're getting that conversion rate we're\ngetting exactly how much value this\nperson has staked in our application now\nwe'll do a quick if we'll say\nif unique token state\nof the user is less than or equal to\nzero then we'll just go ahead and return\nzero right we don't want to do a require\nhere right as we did up here because we\nwant this to actually keep going right\nif this is zero we don't want the\ntransaction to actually revert okay we\nwant this to keep going so how do we\nactually get the value of a single token\nwhat we're going to need to get the\nstaking balance right but we also need\nthe price of that token so we're going\nto need to get the price of the token\nand then multiply that by the staking\nbalance of the token of the user so once\nagain we need to create another function\nwe'll call this one get token value so\nin another\nfunction we're going to call get token\nvalue get pass an address of a\ntoken we'll make this a public view\nfunction that will turn a un\n256 and this of course is where we need\nsome pricing information and this is\nwhere we're going to actually work with\nthe chain link price feeds once again\nand hopefully this part is going to be a\nlittle bit more familiar for you so what\nwe're going to need is a price\nfeed address that's the first thing that\nwe're going to need so we're going to\nactually have to map each token to their\nAssociated price feed addresses so we're\ngoing to need some mapping that does\nthat right so we're going to need some\nmapping it's going to map an address\nto an address it's going to be a public\none and this is going to be token price\nfeed mapping right it's going to map the\ntoken to their Associated price feeds\nand with that that means we're going to\nhave to have a function called set price\nfeed contract where we actually set the\nprice feed associated with a token so\nthis will take an address of a\ntoken and an address of a price feed\nthis will be a public and this will be\nonly\nowner we don't want anybody to be able\nto set what these price feeds should be\nwe just want the owner to be able to do\nthis so we'll do token price feed\nmapping of the token is going to\nequal the price feed and that's it so\nnow we have a way to set the price feed\ncontracts we have a way to map the\ntokens to the price feeds right and\nagain go to docs. chain. link we can go\nto Price feeds ethereum price feeds we\ncan find these different price feeds\nhere and this is where we're going to\nset those price feeds now back down in\nour get token value we can grab that\nprice feed address now by saying\naddress price feed address is going to\nequal that token price feed\nmapping of that token parameter and now\nthat we have this we can use it on an\naggregator V3 interface again we can\nalways go back to the docs here we can\ngrab this bit right here of course we're\ngoing to change\nit to be\n0.8 and for those of you who would\nrather I just wrote it out we're going\nto\nimport at chainlink contracts\nslsrc slash\ninterfaces SL agregator V3\ninterface. soul and since we're doing\nthis import we're going to go to our\nbrownie\nconfig smart contract kit slash\nchainlink brownie\ncontracts we're going to see what's the\nlatest version of these now I'm going to\npoint something out this package\nrecently changed to mirror the mpm\npackage versions so it does look like it\nwent backwards in versions and there's\neven a little little update here uh but\nthis is the\nthe newest version even though it's a\n0.2.1 it's literally just to match the\nmpm contract tags so this is what we're\ngoing to use so we're going to do at\n0.2.1 then in our remappings we'll also\ndo at chain link\nequals this bid right\nhere now that we've imported that we can\nnow grab that aggregator V3\ninterface or that price feed\nand say aggregator V3 interface of price\nfeed\naddress and grab that price feed\ncontract then once we have this price\nfeed contract we can call latest round\ndata and again you can always check back\nto the documentation to see what that\nfunction actually looks like and this is\ngoing to return it's going to return a\nwhole bunch of stuff but we only care\nabout the price so the first thing it\nreturns is round ID we don't care about\nthat so we'll just put a comma we do\ncare about the in 256 price so we'll put\nthat in there uh but we don't care about\nthe rest of these so we'll just do comma\ncomma comma because we only care about\nthe price\nhere we also care about the decimals we\nneed to know how many decimals the price\nfeed contract has that way we can match\neverything up to be using the same units\nso we'll say U\n256\ndecimals equals price do decimal and\nwhat we can do now is we can return both\nof these so this actually needs to\nreturn a un 256 and another U\n256 the decimals here and we could do\nreturn we can return both of these so\nwe'll do a uent 256 price we'll wrap\nthat price into a u 256 then we also\nneed to\nwrap the decimals in a u and six since\ndecimals actually returns a uint 8 so\nwe'll return the price and the decimals\nall right now we're cooking now we can\ngo ahead and start scrolling back up and\nadding all this stuff in so we can say\nyou in 256\nprice you went 256\ndecimal equals this get token value that\nwe just created right here and then we\ncan just have this return staking\nbalance of the\ntoken of the user times the\nprice we're going to do some interesting\nmath here divided by those decimals 10\nraised 2\ndecimals and I know there's a little bit\nof math here right and so you might be\ngoing wait wait what are we doing here\nwrap that up like that just so that\nwe're absolutely certain we're doing\ncorrect order of operations here so\nwe're taking the amount of token that\nthe user has staked right let's say for\nexample\n10 die and we're taking the price of\nthat die maybe we have all of our\ncontracts all these tokens get converted\nback to the USD price so we have die USD\nor actually better yet let say we have\n10 eth right our price feed contract is\ngoing to be eth\nUSD let's say the price is is 100 $100\nper USD so this first bit is we're going\nto do that 10 e time $100 so we're going\nto do 10 * 100 which is going to equal\nto 1,000 1,00 value the only thing is we\nalso have to divide by the decimals so\nour staking balance is going to be in 18\ndecimals so it's going to be 1 2 3 4 5 6\n7 8 1 2 3 4 5 6 7 8 nine 10 but let's\nsay our FUSD only has eight so 1 2 3 4 5\nsix seven eight so we need to multiply\nthese first\nand then divide by the decimals that way\nwe can arrive at a price that actually\nmakes sense is going to be a function\nthat we're definitely definitely\ndefinitely going to need to test to make\nsure that we're doing everything right\nso that we're doing all the math\ncorrectly but okay now that we have this\nuser single token value we go ahead and\ncome back up to our user total value and\nwe can literally finish this function by\njust calling return total value and then\nwe can pull up to our issue tokens now\nthat we have the total value that this\nuser has actually locked we can just\ntransfer the amount of tokens that they\nhave in total value so we can say dap\ntoken\ntransfer this recipient we can transfer\nthem the total value right we'll say\nhowever much they have in total value\nstaked on our platform we'll issue them\nas a reward and that is our issue tokens\nfunction we are making great progress\nprogress all right so we have a way to\nstake done we have a way to issue done\nwe have a way to\nget value or just get value done we've\nadd\nway to add allow tokens and all we have\nto do now is add some way to unstake the\ntokens so let's go ahead and create this\nfunction I'm going to make it right\nunderneath the stake token one we do\nfunction\nstake tokens we'll do we'll pass it\ntoken address we'll make this a public\nfunction so anybody can call this the\nfirst thing we're going to want to do is\nfetch the staking balance how much of\nthis token does this user have so we'll\nsay you 256 balance\nequals staking balance of the\ntoken from message. sender and we're\ngoing to\nrequire the balance bance is greater\nthan\nzero otherwise we'll say staking balance\ncannot be\nzero and then we're going to do a\ntransfer so we'll do\nic20 of the\ntoken.\ntransfer message.\nsender\nbalance once we actually transfer the\ntoken we'll do staking balance\nof this\ntoken of message. sender we're going to\nupdate this balance to now be zero right\nbecause we're going to transfer the\nentire balance here and then we're going\nto update how many of those unique\ntokens that they have now a quick note\nhere later on we're going to learn about\nre-entrancy attacks so at some point\ncome back here and figure out hey is\nthis vulnerable to re-entrancy attacks\nso we'll say\nunique token state of message. sender\nis going to equal unique token\nState sender minus one now the last\nthing that we could do is we probably\nshould actually update our stakers array\nto remove this person if they no longer\nhave anything staked this is a little\nbit sloppy but we're just going to skip\ndoing that for the time being however if\nyou want to go back and add the\nfunctionality to remove the stakers from\nthe stakers list as they unstake please\ngo for it it's not a big deal if we\ndon't actually do this because our issue\ntokens function is actually going to\ncheck to see how much they actually have\nstaked and if they don't have anything\nStak then they're not going to get sent\nany tokens but all right that's\nbasically all the functionality here\nlet's just try a quick sanity check with\na brownie\ncompile whoops I forgot to add v0.8 in\nhere let's try again that little bit\nthis needs to be token and this needs to\nbe user whoops and then it looks like I\nI did the same thing down here this is\nactually staking balance let's try it\nagain and perfect everything is at least\ncompiling correctly just because it's\ncompiling correctly though doesn't\nnecessarily mean that we're doing\neverything correctly so this is\nfantastic typically now we'd want to go\nahead and start doing our tests I'm\nactually going to go ahead and build one\nof our scripts first the reason I'm\ngoing to build one of the scripts first\nis because I'm going to use my deploy\nscript pretty regularly in my test I'm\ngoing to use it as part of my testing\nthis way I can also test some of my\nscripts as well in addition to the\ncontracts so let's go ahead and make our\ndeploy script so let's create a new file\nin here we call it\ndeploy we'll also create an init.py for\nthose of you on older versions of python\nand let's go ahead and do this so we're\ngoing to have a main function in here\nand in our main function we're actually\njust going to call\ndeploy token Farm\nand that\ntoken and then we're going to have a\nfunction def Ploy token farm\nand\ntoken right and I should be able to\nrun R run scripts deploy\npiy and great everything's compiling\nright and we're running our scripts here\nso first thing that we're going to want\nto do as always is get our account and I\nam going to copy a couple of those\nhelpful scripts from our past projects\nso I'm actually going to pull up our nft\ndemo that we did so I'm actually going\nto go to our chain link mix that we did\nand I'm going to grab our helpful\nscripts remember we can always jump onto\nthe chain link mix here and we can just\ngrab some of the scripts from here so we\ncould go to scripts helpful scripts and\njust copy paste this whole thing or just\ngrab it like I did right these are going\nto be those exact same scripts that we\nbuilt previously so now we have our\nhelpful scripts in here right we're\ngoing to have this contract to mock for\nrunning our tests we have get account so\nthat we can get our accounts easily we\nhave encode function data which we're\nnot going to have to work with since\nwe're not doing upgradeable contracts\nbut we have it here anyways we have\nupgrade which we're also not going to\nuse but we have it here anyways we have\nget Contract which returns mocks if\nthey're not already deployed or it just\nreturns whatever contract that we're\nlooking for and then of course we have\nour deploy Mox scrp here so now we can\ndo from scripts. helpful\nscripts import get\naccount and perfect we can get our\naccount like that no problem now and now\nwe're going to want to start deploying\nsome contracts so we're going to deploy\nthat dap token first so we'll do from\nbrownie import dap token we'll do dap\ntoken\nequals dap\ntoken. deploy this takes no parameters\nso we can just do\nfrom count then we're going to want to\ndeploy our token farm so we could say\ntoken Farm equals token farm. deploy and\nthis tags one parameter which is the DAP\ntoken address right because we need that\naddress so we can give it out as a\nreward so we're going to say dap token.\naddress we'll do a comma and then we'll\nsay\nfrom count\nwe'll need to import this from browny as\nwell and while we're here we might as\nwell add some publish Source bits on\nhere so we could say\npublish Source equals config we'll grab\nthis from the\nconfig\nnetworks network. show\nactive\nverify grab network from brownie\ngrab config from Brownie and in our our\nconfig here let's do\nnetworks lad\ndevelopment we'll set the verify here to\nbe false and then we're going to work\nwith the coven chain so we'll say coven\nverify will also be false actually koven\nsorry coven will be true and then we'll\ndo a a persistent ganache or verify for\nthis will be\nfalse I'm even I'm just going to put\nthis up here so that all these gach\nchains are kind of with each other so\nwe'll verify in Coven but we won't on\ndevelopment or ganach now once we've\ndeployed this token Farm contract we\nneed a couple things right we're going\nto need to send this some dap tokens\nright we're going to need to send pretty\nmuch all the DAP tokens so that I can\nactually give those tokens out as a\nreward so we're going to want to do a\ntransaction is going to equal to DAP\ntoken. transfer we'll send it to the\nToken farm. address and then we have to\nchoose how much we're going to send and\nwe'll send the total Supply but we'll\nkeep a little bit for ourselves so we\ncan do some testing and so just in case\nso we'll also do minus kept balance some\nstatic kept balance which we can say add\nat the top we'll say the kept balance is\nlet's keep like 100 so this will be\nequal to web 3.2 way\n100\ne so we'll do from web three port web\nthree so in our transfer we'll do dap\ntoken. total Supply minus the kept\nbalance and then of course we're going\nto have to do a\n[Music]\nfrom count so now we're sending our\ntoken Farm basically\n99.9% of the total supply of the stap\ntoken so that it has this token to\nactually give out as a reward do a TX\nwait wait for one block confirmation\nthere now what do we want to do well if\nwe look at our token Farm we know at our\nstake tokens function we can only stake\ntokens that are allowed and each one of\nthese tokens also is going to need to\nhave some price feed associated with it\nright and our token price feed mapping\nso we're going to have to add those so\nwhat we're going to want to do is we're\ngoing to want to create a function\ncalled add allowed tokens and what this\nis going to do it's going to add the\ntokens that we want to allow and it's\ngoing to give them a price feed contract\nassociated with them so let's create\nthis function call it\ndef add alloud tokens and this is going\nto take a couple things we're going to\nwant to take that token Farm because\nwe're going to need to call the add\nallowed tokens function on it we're\ngoing to take a\ndictionary of allowed tokens and this is\ngoing to be the names this is going to\nbe a dictionary of the different token\naddresses and their Associated price\nfees so we're just going to price\neverything in USD so that so that we can\nfigure out the value of everything in\nUSD and then last of course we're going\nto need an account for now I'm just\ngoing to do pass here let's look at the\ndifferent inputs that we're going to put\ninto this so obviously we're going to do\ntoken Farm but then we're going to need\nto make this dictionary of allowed\ntokens so we're going to need the\naddress of the different tokens that we\nwant to have now how do we get the\naddresses of the different tokens that\nwe're going to use and what are the\ntokens that we're even going to use here\nfor Simplicity we're just going to start\nwith three tokens we're going to allow\nour platform to allow three different\ntokens to be Stak we use the DAP\ntoken as one we use we token or wrapped\neth because that's pretty much a\nstandard in most smart contract\nplatforms and then we're also going to\nuse an FAU token which stands for faucet\ntoken and we're going to pretend that\nthis faucet token is D or di the reason\nwe're going to use this faucet token is\nbecause there's this erc20 faucet.com\nwhich allows us to get this fake faucet\ntoken we can get unlimited amounts of\nthis faucet token on different test Nets\nwe're going to pretend that this faucet\ntoken is going to be die right so fa\ntoken SL die so how do we actually get\nthese addresses well dap token we know\nwe token what we can do in our config is\nwe can actually add those addresses here\nso for\nkoven the we token address is going to\nbe this right here which again you can\ngo check this out and you can find it on\nether scan you can write your own if you\nwant we're just going to use this\nalready deployed one on Coen FAU token\nwhich is going to be this token here\nwhich I know is going to be this address\nright here and if you want you can come\nhere grab your address paste it into\nthis erc20 faucet.com put in amount of\n10 in here connect metamask oh it even\ntells us the token address right here\nwhich we can just copy paste we can do\nmint free tokens confirm great it says\nsuccess if we don't already have it we\ncan take this token address go to our\nmetamask\nassets add token paste it in I've\nalready got it we can see right now I\nhave five fa once this confirms I'll\nhave an additional 10 and now you can\nsee 15 here this is going to be this FAU\ntoken that we're going to use we have W\nhere and then we know what the DAP token\naddress is going to be from when we\ndeploy it here now we could do again we\ncould do the config you know\nnetworks Etc and just always get it from\nour config or we could use our get\nContract method that we grab from our\nhelpful scripts which will deploy a mock\nwe token it doesn't exist in one of\nthese and that's what we want because\nwe're going to want to test this locally\nso we're going to want to deploy our own\nfake we token so we'll say the we token\nequals get contract we\ntoken and then the FAU token it's going\nto be get Contract fa token and remember\nwhat we put in here our string that we\nput in here needs to match our string in\nour config now in order for this get\ncontract to work for we token and the\nFAU token we're actually going to have\nto modify our helpful scripts here so if\nwe copied and pasted it directly from\nour chain link mix this is basically\nwhat we're going to have here we're\nimporting all of our mocks which we can\ngo ahead and copy paste these as well\nfrom the chain link mix our test our\nmock contracts here we have some forking\nimplementations we have contracts to\nmock which tells us based off of the key\nwhat token or for what contract we're\ngoing to use to mock we have get account\nwhich we use all the time in order for\nus to do this contract to mock correctly\nwe're going to have to mock we and FAU\nand actually we don't even need all\nthese in here we don't even need this\nwhole contract to mock in fact we can\nget rid of mock Oracle we can get rid of\nVF coordinator and we can even get rid\nof the link token for this we do need\nthis sdusd price feed later on so I'm\njust going to leave it in here for now\nwe definitely do the though FAU token\nwhich is going to be mocked to something\nand we need we token which was going to\nbe mocked to something else so what are\nthese tokens going to be mocked to well\nthey're each an erc20 mock but we want\nto give them kind of their own identity\nso what we're going to do is we're\nactually going to make a mock erc20 for\nboth FAU and for web so we're going to\ncome in here we're going to do a new\nfile we'll call it mock die doou and\nthis is going to mock that FAU token so\nit could be mock die it could be mock\nFAU whatever we want it to be and we're\njust going to make this a basic erc20 so\nwe'll do pragma\nsolidity\n0.8.0 import at open Zeppelin contracts\ntoken\nec20c 20. Soul obviously this is going\nto look very familiar they should spell\nragma not whatever I just spelled this\nis going to look really similar to that\ndap token so now we can call it\ncontract mock die is erc20 and we'll do\nConstructor public\nerc20 mock\ndie be the name of this and the symbol\nwill be die and perfect and that's all\nwe need we'll copy this whole thing and\nthen we'll do the same thing for mock\nwe.so we'll paste this whole thing in\nhere and we'll just change the name we\ncall this mock we\nzc20 mock we this will be\ngreat so now that we have those mocks in\nhere we can change FAU token to mock die\nand we token to March we we can import\nthose from Brownie and in fact we can\nget rid of the Mach Oracle here and the\nVF coordinator instead we'll do mock\ndie and mock we now of course since we\nhave die USD price feed and eth price\nfeed we're going to make sure we have\nthese in our mock here and then we're\nalso going to have to deploy these in\nour deploy MOX script below so if we\nscroll down to deploy MOX we can see\nthis is what it currently has which is\npulling directly from the chain link mix\nso we just go ahead delete the vrf\ncoordinator Mock and the mock Oracle and\ninstead we'll deploy those that mock we\nand that mock die so we'll do\nprint\ndeploying mock die die token\nequals die.\ndeploy\nfrom count and then we'll do print f-\nstatement ployed to di token.\naddress and then we'll do\nprint bloing mock mock we and then we'll\ndo we token equals mock we. deploy\nsay from\ncount and we'll\nprint deployed to this will be another\nprint f with token.\naddress now\nadditionally we have our FUSD price feed\nleft over from the chain link mix we\nalso need this D USD price feed so we\ncan go ahead in here we'll add D USD\nprice feed\nand we'll set this as a mock V3\naggregator we could do is we could\nparametrize this up so that the mock V3\naggregator takes maybe some different\ndecimals a different initial value so\nthat these could be different but for\nthe sake of testing we're just going to\nleave them being the same here so great\nso we have the address of the we token\nwe have the addresses of the FAU token\nand if those don't exist on the network\nwe're working on we're going to deploy a\nmark So now that we have all these\naddresses we can do a dictionary of\nallow tokens is going to be equal to\nthis dictionary that we make so we're\njust going to Route each one of these\ncontracts like the DAP token two its\nequivalent price feed for the DAP token\nwe're just going to say that the DAP is\ngoing to be equal to die we're going to\nsay the fa token is also equal to die\nand our we token of course is going to\nbe equal to eth so we're going to want\nto get a d USD price feed another d USD\nprice feed and an FUSD price feed so in\nour\nconfig can to add D USD price feed and\nsince we're going to be testing since\nwe're going to be doing our integration\ntest on Coen here we come to the chain\nlink\ndocks we'll go to ethereum Price\nfeeds we're on\ncoven we'll scroll down to D USD which\nis this address right here\npop that in and then we'll also want the\nFUSD price\nfeed which we'll also go grab that from\nhere the Coen Network we'll grab that\nfrom right here paste it in so now to\ncomplete this deck we can do this get\nContract again and we'll deploy mock\nprice feeds if they don't exist so now\nwe can just\ndo get Contract die USD price\nfeed Fu token is is also going to be D\nUSD price feed and then our we token is\ngoing to\nbe FUSD price feed and awesome now we\nhave our dictionary of allowed tokens\nthat we can pass to our add allowed\ntokens this will map the tokens and\ntheir addresses with their Associated\nprice feeds so that we can get them all\nto equal the same value in our contracts\nso we can go ahead and create this\nfunction called add allowed tokens we'll\npass it this token Farm we'll pass it\nthe iary of allowed tokens and then of\ncourse we'll pass it the account now in\nour add allowed tokens function we're\ngoing to Loop through all these\ndifferent tokens and call the add\nallowed tokens function on it so we're\ngoing to do four each token in the\ndictionary of allowed tokens we're going\nto do token\nfarm. add allowed tokens and we'll do\nthe token. address and we'll do\nfrom\ncount\nsay add TX equals that do add tx. weight\none then we're going to call this set\nprice feed contract so we're actually\ngoing to set the price feed associated\nwith that token so we'll do set TX\nequals token\n[Music]\nfarm. set price feed contract we'll do\ntoken.\naddress the dictionary of allowed tokens\nof\nthat token that we're for looping and\nthen of course\nfrom count and we'll do set text. we\none and then we'll just return the token\nFarm but we probably don't have to\nreturn it and great that deploy script\nlooks pretty good and in fact we're\ngoing to end our deploy script here with\nreturning token farm and dap token this\nway we can actually use this deploy\nscript in our tests so I'm going to do\nquick little zoom out and we can see our\nwonderful deploy script right here and\nawesome it looks like we have just about\neverything here let's give this an\ninitial test on a local ganach chain see\nif our mocks all work see if everything\nat least makes sense we can call our\nfunctions awesome it looks like we can\ncall all of our functions and we can\ndeploy our mocks and the mocking is\nworking at least somewhat correctly here\nthis is great zoom out a a little bit\nhere we've got our deploy scripts we've\ngot our add allow token scripts we've\ngot all of our mock contracts added\nunder tests things are looking good now\nwhat do we want to do here well of\ncourse we want to run some tests we want\nto make sure our contract is actually\ngoing to do what we say it's going to do\nyou guys ready let's jump into it so in\nour tests let's make a new folder called\nUnit we add a new file we'll call it\ntest\ntoken f.p let's do some tests now\nideally we would also write some tests\nfor our dap token however we're going to\nskip over those because we're basically\njust doing open Zeppelins\nimplementation but in a fullscale\nproduction here you probably would want\nto write some tests on your tokens as\nwell so let's get into this let's look\nat our token farm and see what we need\nto test remember ideally every piece of\ncode in our smart contract here should\nbe tested in some form or another so\nwith that in mind let's get started so\none of the first functions that we see\nis set price feed contract so let's make\na test for that so we'll do def\ntest set price feed\ncontract and we're literally going to\ntest just this one function so how do we\ntest that well first let's make sure\nwe're on a local network right because\nwe only want to be doing this on our\nlocal network since this is one of our\nunit tests so in our arrange stage we're\ngoing to do if network. show active is\nnot\nin local blockchain\nenvironments then we're going to run Pi\ntest. Skip and say only\nfor local testing of course we got a\nnumber of pieces here that we need to\nimport we're going to have to do from\nBrown\nImports\nNetwork we're going to do from scripts.\nhelpful\nscripts import local blockchain\nenvironments and then we're going to\nimport pest all right so now we're going\nto get an account to make these\ntransactions we'll say account equals\nget account and we'll grab that from our\nhelpful scripts as well so now we have\nan account we can use let's even grab a\nnon-owner account so we'll say non-owner\nequals get account and we'll do index\nequals 1 this will give us a different\naccount rather than this account and\nwe'll use this to check some only owner\nfunctions and then what we're going to\ndo is we're going to get the token farm\nand the DAP\ntoken based off of our deploy script so\nwe're going to use this deploy token\nfarm and dap token we're going to import\nthat by saying from scripts.\ndeoy import deploy token farm and dap\ntoken and we're just going to call this\nfunction in our test right here so we're\ngoing to say token Farm dap token equals\ndeploy token farm and dap token awesome\nthis is how we're going to do this a lot\nthis arrange step for a lot of these\ntests here because this is how we're\ngoing to set them up we could even\nhypothetically turn this into a conf\ntest or into a wrapper if we wanted to\nbut we're just going to leave it in here\nlike this for now now we can move on to\nour act phase so we're going to want to\ndo token Farm do set price feed\ncontract because remember this is what\nwe're testing right now and we're going\nto use token and a price feed address so\nwe use the DAP token. address we'll use\nget contract to actually get an\nFUSD price feed\naddress which we can also grab from our\nhelpful scripts get contract and an\nimportant note here if you try to set a\ncontra contract as an address parameter\nlike this Brony will know okay that\nyou're looking for an address instead of\nthe actual contract in any case then\nwe'll do\nfrom\ncount save it and it res shifts over\nhere now this should work perfectly so\nwe're going to assert this we're going\nto move into our assert stage right if\nwe check our price feed mapping this\nshould now be updated so we can doert\ntoken farm. token price feed mapping and\nremember token price feed mapping is an\naddress to an address so we'll say d\ntoken. address this should be equal to\nget Contract of\nFUSD price feed this should be updated\nwith exactly what get Contract of FC\nprice feed returns in fact we can even\nmake this a little bit better copy this\nwe'll say okay price feed\naddress equals get contract and then\nwe'll pop this in here and we'll pop\nthis\nhere that way now we're just using this\nsingle variable for both all right\nthat's our first test let's run it\nbrownie test this will run the whole\ntest\nsuite and we're passing awesome now\nlet's also do a test to make sure that\nnon-owners can't call this function we\nwant to make sure that somebody other\nthan the owner who deployed this right\nbecause deploy token Farm andap token is\ngoing to be run by get account we want\nto make sure that somebody else can't\ncall this function so we'll do with\npest.\nraises\nexceptions. virtual machine\nerror excuse me for that getting in the\nway and then we'll try to call this\nexact same function here right we can\neven just copy paste it but instead\nwe'll call it from\nnon-owner right and then we do also have\nto import exceptions from browning so\nthis should also pass it's expecting\nthis contract call to actually revert so\nlet's try this perfect it passes right\nwe can double check to make sure that\nthis pest. raises is working because\nwhat if we did Count here right this now\nshould fail because this this isn't\ngoing to revert and that's exactly what\nhappens perfect so we can leave this as\nnon-owner and our first test is looking\ngreat so we zoom out just a hair here we\ncan sleep easy that this function is\ngoing to work as we intended isn't that\na wonderful feeling yes it is great\nlet's move on so let's look at our token\nFarm what's the next function aha issue\ntokens all right great let's write some\ntests for issue tokens so what are we\ngoing to do def test issue\ntokens so how are we actually going to\ndo this well in order to test issuing\ntokens we actually need to stake some\ntokens first so for now I'm actually\njust going to do pass here and before we\ntest issuing the staking tokens we need\nto write a test for staking those tokens\nright because in order to issue tokens\nyou need to have some tokens staked so\nlet's write a test stake tokens first\nand then we'll write this test issue\ntokens so we'll do def\ntest\nstake\ntokens now let's set this up so we're\ngoing to copy this bit\nhere because we are going to be working\non a local network with this we'll do\naccount equals get account and then\nwe'll go ahead and deploy the token farm\nand the dab token so this initial bit is\ngoing to be exactly the same making sure\nwe're on a local network getting the\naccount deploying the token farm and the\nDB token so now let's move into the ACT\nphase let's go ahead and act let's go\nahead and actually send some tokens to\nour token farm so first we obviously\nneed to call approve on the DAP token\ncontract so we'll do dap\ntoken.\napprove to the Token farm. address and\nagain you can see and again we could go\nto the open Zeppelin docs to figure out\nwhat the parameters of this are but it's\ngoing to be an address and it's going to\nbe some amount and then obviously from\ncount now I put a couple question marks\nhere because we're going to constantly\nbe using an amount right we're going to\nbe using an amount staked for a lot of\nour tests here so what we're going to do\nis we're actually going to turn that\ninto a fixture we're going to call it\namount State and we're going to Define\nthis in our conf test folder so we're\ngoing to make our conf test file so in\nhere we're going to do new file\ncom\ntest.py and whoops it's in the wrong\ndirectory so we're going to go CD tests\nunit going to do move conf\ntest.py down one directory and it should\nbe in here now if that didn't work you\nshould be able to drag and drop it uh\ninto test you just want to pull it out\nof unit is what we're doing here right\njust want to get it so that it's just in\nthis test directory in a case in our\nconf test.py we're going to create our\nfirst fixture\nso we're going to do at pest. fixture\nwe'll do def amount Stak and then we're\njust going to return web 3.\n2way one ether now of course we need to\nimport P test here then we're going to\nneed to import we're going to do from\nweb 3 import web 3 and now it saves\nperfectly so now we can use this amount\nstaked fixture as basically a static\nvariable right we could have done at the\ntop we could do something like amount\nStak equals you know that exact same\nthing but we're going to get into the\nhabit of working with these fixtures so\nwe have our DEA test stake tokens and\nwe're going to pass it this amount Stak\nfixture P test and brownie will\nautomatically grab all this stuff from\nthe com test folder and put it into here\nso now we can just use amount staked as\na parameter in our test here so once we\napprove we can then do token\nfarm. Stak\ntokens we can now\ncall our stake tokens function right\nhere it takes an amount and then a token\naddress so of course we're going to do\namount State as the amount and then\nwe'll do dep\ntoken address as the address and of\ncourse from count\nand perfect this is going to be our our\nbasic action of testing the staking\nfunctionality so we can go ahead down\nhere and move into our assert phase and\nwe can just assert a number of things\nright do a little bracket here we're\ngoing to do a couple of things here\nwe're going to assert the token\nFarm that's taking\nbalance of dap token.\naddress of account do\naddress equals amount state so let's\ntalk about this really quickly what is\nthis actually doing so if we go to our\ntoken Farm we know that we have this\nmapping called staking balance and this\nis a mapping of a mapping right so we\nneed to actually pass two variables the\nfirst address and then the second\naddress to get this amount this is how\nyou do that syntactically with brownie\nyou just pass it as additional\nparameters here so we pass the DAP token\naddress which is going to be the token\naddress here and then the account\naddress which is going to be the address\nhere and\nperfect so we can even run this we're\ndoing\nbrownie\ntest-\nK test stake\ntokens and great looks like that passed\nperfectly but we have a couple of other\nassertions to make right because if we\nlook at our stake tokens fun function it\ndoes a lot of things so let's check all\nof these and make sure that they all are\nworking correctly so we'll also assert\nthe token\nfarm.\nunique token\nstate of count that address is going to\nbe equal to one right this is going to\nbe the first token so it should have a\nunique token State we should also assert\nthat the token\nFarm do stakers at the zero withth index\nis going to be this account that we're\nusing we update our unique token Stak we\nupdate our staking balance and then we\nadd stakers do push right so we're going\nto be the first address in this array\nnow and then I'm going to do one other\nthing here too I'm going to do return\ntoken\nFarm inap token the reason I'm doing\nthis is because now we can actually use\nthis test in some of our other tests now\nwe're getting a little bit integration\nhere we're kind of mixing and matching\nsome stuff we could even probably put\nthis whole thing in a function in our\nregular scripts directory but for\nSimplicity sake this is how we're going\nto architect it but great let's test the\nrest of those we'll just hit up rounding\ntest- K test stake tokens we'll hit\nenter and perfect this is passing\ncorrectly as well awesome let's keep\ngoing now we're moving into this test\nissue tokens phase here and we're going\nto use our test stake tokens test here\nso the way that we're going to use this\nis we're going to grab this amount Stak\nparameter place it in here and we're\ngoing to set this up exactly the same\nway and we're going to set this up\nalmost exactly the same way so we can\neven just copy these few lines here\npaste it we're going to do an arrange\nwe're going to check to make sure we're\non a local network we're going to get\nour account but instead of doing deploy\ntoken farm and dap token we're going to\ndo token Farm comma dap\ntoken equals test stake tokens and we're\ngoing to pass it that amount Stak so\nthis is why we're returning the token\nfarm and the DAP token in our test stake\ntokens that way we can use that function\nnow in our test issue tokens and perfect\nnow we can test issuing these tokens so\nto test issuing tokens to issue this\nreward we want to first take some\ninventory of the current starting\nbalances of our address here so we'll\nsay starting\nbalance\nequals D token. balance of count.\naddress and great this is how we're\ngoing to start off in our range phase\nnow let's move to acting move in our act\nphase and we'll just do token farm. isue\ntokens save\nfrom\naccount and this is really the only\nthing that we're testing here so now we\ncan move into the arrange\nstage and we'll do assert I'm going to\ndo a\nlittle parentheses here this is going to\nbe a long thing and we're going to\nassert that the DAP token dot balance of\nthe account. address should equal the\nstarting balance plus some new amount\nwhat's that new amount going to be well\nif we look at our issue tokens function\nif we're staking in our conf test if\nwe're staking one ether right or one die\nright because we're staking the DAP\ntoken we're just staking one our\nmocks are going to be this FUSD price\nfeed right our mock V3 aggregator when\nwe deploy it the initial value is going\nto be this 2,000 right here and we're\nsaying in our mock in our our sample\nhere we're saying we are staking one dap\ntoken\nwhich is equal in price to 1 E so we\nshould get 2,000 dep tokens in reward\nsince we're saying since the price of\neth is 2,000 USD so there's a little bit\nof math here but the initial value is\ngoing to be 2,000 right you can almost\nthink of it like this with 18 decimals\nand our application pays us reward based\noff of the total total USD value that we\nhave locked so we actually can know that\nthis is going to be that 2,000 price so\nwhat I'm even going to do is I and if\nthis isn't already in the chain link mix\nshame on me I should add this in here is\nwe're going to add a new variable called\ninitial price feed\nvalue it's going to equal to 2,000 1 2 3\nfour 5 six 7 8 nine 10 1 2 3 four five\nsix seven\neight be that super big number and we're\ngoing to take that and we're going to\nset that here to our initial value is\ngoing to be now this initial price fed\nvalue what we can do in our test is we\ncan then import that from our helpful\nscripts and we can just assume that our\nstarting balance is going to be now be\nour starting balance plus that initial\nprice feed balance and if we've done our\nmath correctly and if we've done our\nissue tokens and if we've done all of\nour get value correctly this should work\nwe should have done our testing already\non the things like get user total value\nright because get user total value is a\nsubset of issue tokens but we're jumping\nthe gun a little bit here and we're\ngoing to test this later on anyways so\nwith that being said let's run this\ntest browny test- K test issue tokens\nand lovely so our math is correct\nawesome we are doing wonderfully with\nour tests here we've even gotten some of\nthe harder ones out of the way early\nwhich isn't too bad either now as far as\nthis video goes we're actually going to\nstop wrting the test because we're\nliterally just going to keep going down\nthat solidity file and grabbing\nfunctions and adding tests to them we've\ngot all the tests located in the GitHub\nrepository associated with this lesson\nthere is both a unit test file and an\nintegration test file in the GitHub\nrepository if you want to just go ahead\nand check that feel free to do so we're\ngoing to move on to the next section to\nkeep things moving forward but I highly\nhighly recommend you trying to write all\nthese tests yourself so good luck we're\ngoing to have to make now we going to\nmove into our private ke before we run\nthis make sure that your integration\ntest work well make sure that if you run\nyour deploy\nonor testing everything works correctly\nof course you're going to want to get\nout your file you're want to add that to\nyour Browning config add private key in\nAB your web3 inferior project ID and\nmake sure you have plenty of test at\nCoen so that you can actually run these\ndeploy scripts we can always find the\nlatest faucets from the link token\ncontracts page under our koven or rink B\nnetworks here we're also going to need\nour wallets section do from Key this is\nwhere we'll put the dollar sign private\nkey because now that we've done all the\ncontract work now that we've done all\nthe contract work we're going to learn\nsomething totally new that we haven't\ncovered yet we're going to learn to do\nsome frontend development now like I\nsaid this isn't a front end end course\nand the focus isn't going to be on front\nend and I want to point out right away\nthat this is considered a bonus section\nthere are a ton of pieces in this\nsection that we're not going to have the\ntime to go over thoroughly because we're\nnot going to be going into what's going\non on the front end side the editing is\na little bit choppier and I highly\nrecommend having the documentation\nhaving the GitHub associated with this\nfront end with you while you're going\nthrough this free code Camp has an\nawesome video on doing front-end work\nand if you want to learn more about\nreact and typ script and some of the\ntechnology that we're going to go over\ndefinitely check out those videos after\nthis we're going to make this though so\nthat you should be able to follow along\nwith everything that we're doing if\nyou're not interested in front-end feel\nfree to go ahead and skip this part\nhowever understanding how these\nfront-end applications work is really\nhelpful and it'll give you an a massive\nmassive incredible skill to actually\nbuild front ends for your smart\ncontracts having a really solid user\ninterface is really important in the\nweb3 and the blockchain world if people\ncan't use your contracts then what good\nis your application so with that being\nsaid let's jump on and let's build our\nfront end and I know we said we didn't\nlike JavaScript we're going to be\nworking with typescript here which is an\nimproved version of JavaScript and\ncatches a ton of the different bugs and\nallows us to be much more explicit with\nhow we're working with our front end\nwe're also going to be working with\nreact we're going to be working with\ncreate react app this is a front-end\nframework that allows us to quickly spin\nup a front end to build for our\napplications here we're also going to be\nworking with this tool called usap it's\na framework for Rapid dap development\nand works great with react here so let's\nget started building this front end the\nfirst thing that we're going to want to\ndo to build a front end for our full\nstack application create react app\nboilerplate so you should have MPX\ninstalled if you run MPX D- version it\nshould show up this should be installed\nfrom when we installed npm if you don't\nhave MPX installed you can run PM\ninstall DG npx additionally we're going\nto want to install yarn here to install\nyarn again you just run mpm install --\nGlobal or DG yarn you'll know you have\nyarn installed correctly if you can run\nyarn D- version you see a version of\nyarn and I have a link to install both\nnpx and yarn in our GitHub repo but\ngreat once you have those we can\nactually create a folder with all of our\nboiler plate code in it we're going to\nrun and MPX create react app we're going\nto call it frontend this is going to\ncreate a new folder called front end and\nwe're going to do d-h\ntemplate typescript because we're going\nto want to work like I said with\ntypescript instead of JavaScript for\nthose of you who've never worked with\ntypescript before and who have worked\nwith JavaScript don't worry the syntax\nis nearly identical for those of you who\nhave never worked with either don't\nworry we're going to walk through\neverything that we do and then we'll hit\nenter here what's going to happen is\nyou'll see we're going to create this\nnew react app in this new front-end\nfolder in our project\nhere awesome now that we've downloaded\nour create react app we have this new\nfolder called frontend and it's got a\nwhole bunch of stuff in it now typically\nwhat different applications will\nactually do is they'll have one\nrepository for all their Python and for\nall their contracts but they'll\nadditionally have a different folder or\na different repository for their front\nend application and their front end work\nthis is really good practice we're just\ngoing to bundle everything up into the\nsame repo here just to get started and\njust to make it easier for us getting\nstarted here however what you will see\nacross different projects is they'll\nhave a totally separate repo for their\nfront end so let's take some inventory\non what's actually going on inside this\nfolder so the first folder you'll see is\nnode modules these are basically the PIP\ninstalls these are the different\npackages pulled in from JavaScript and\ntypescript we can pretty much ignore\nthis folder for the majority of what\nwe're working with here next we have our\npublic folder we're also not really\ngoing to go here but it's got some nice\nlittle images it's got our basic\nindex.html which has the HTML that we're\ngoing to be running with it has a couple\nlogo images and it has a manifest the\nManifest is something that we want to\nchange this tells our browsers a little\nbit about what our app is and what our\napp actually does so this is something\nthat we we would change but everything\nin here here is pretty self-explanatory\nthe short name of our application the\nlong name of our application some icons\nstart URL this is something that if you\nwant to fiddle with it later absolutely\nplease go for it and then robots. text\nwe're not going to talk about this at\nall this helps web Searchers and\nindexers learn a little bit more about\nyour site we can ignore this one as well\nso for the most part we're not really\ngoing to do anything in the public\nfolder or the node modules folder our\nsource folder however we are going to be\nspending a lot of time in it has our app\n. CSS which includes a whole bunch of\nformatting for HTML we have app. test.\nTSX this is going to be testing our\nfront end yes you can even test your\nfront end we're going to totally skip\nover testing the front end which yes I\nknow we've spent a lot of time testing\nour contracts if you want to learn more\nabout testing your front ends there's\nsome fantastic links in the GitHub and\nin the description to go over this app.\nTSX which we are going to be spending\nsome time in and it's one of our the\nmain places for us to write some code\nindex.css\nagain formatting and styling file\nanything that ends in CSS is some type\nof formatting and styling all these TSX\nare going to be typescripts index. TSX\nwe're going to pretty much ignore we are\ngoing to change the logo and we can\nignore all these last bits here a\npackage.json this file tells our project\nwhat dependencies it needs and no JS\npackages it actually needs to get\nstarted we have a readme which of course\nfores a read me we have a typescript\nconfig which gives us some options on\nhow to work with typescript we're going\nto ignore this and then we have our\nyarn. loock which is an autogenerated\nfile we're not going to touch it at all\nbecause yarn is going to automatically\ncreate this if you're not if you're\nunfamiliar with yarn. loock and\nunfamiliar with a lot of this stuff\ndon't worry too much about it this isn't\ngoing to be a file you're really going\nto need to pay attention to but okay now\nthat we've created the basic create\nreact app we can actually go ahead and\nWR now we can see what a front end would\nlook like so we'll CD to the front end\nwe'll run yarn just to make sure we have\neverything installed what yarn does is\nit actually installs all of our\ndependencies anything in this\npackage.json yarn's going to go out and\ndownload these dependencies and store\nthem into node modules and then yarn.\nloock is going to tell us exactly what\nit downloaded once running yarn now it\njust checks to see it says Ah it looks\nlike you already have everything\ninstalled because when we run create\nreact app it already goes ahead and\ndownloads everything but now we can just\nrun yarn start if you want to know where\nthis is coming from if you go on your\npackage.json and you look under scripts\nthese are the four different scripts\nthat we got actually run running yarn\nstart runs this MPX react scripts start\nwhich will actually start our front end\nso we'll do yarn start you'll see react\nscript start you'll see it says starting\nthe development server and after a\nlittle bit of time time we'll get\nsomething that looks like this edit\nSource slapp TSX and save and reload and\nthis is a super simple front end\nobviously this isn't at all what we're\nlooking for but we've now started a\nfront end which is fantastic it'll say\ncompiled successfully it'll say you can\nnow view front end in the browser it'll\ntell you exactly where it's located on\nour local host on the network and it'll\ngive you any outputs from the front end\ndown below so we're just going to stop\nthe front end for now by hitting command\nC or control C and closing it down of\ncourse if we reload now on the front end\nit's going to be blank but great so we\nhave a really basic setup for working\nwith a front end awesome if we look at\nan application like app. a.com you'll\nsee they have like this really fun\nconnect button that pops up and they've\ngot some nice user interface tools for\nactually working with the blockchain we\ndon't want to have to reinvent the wheel\nand build all these custom tools for\ndoing this so we're going to use this\napplication called usep or this\nframework called usep which has a whole\nlot of these already built in to get\nstarted installing all we have to do is\nrun this Command right here yarn add\nused appcore so here in our front end\nwe'll do yarn add at usap SLC and this\nwill go ahead and install all the used\napp pieces into our front end so we can\nactually work with used app and not\nreinvent the with working with wallets\nand working with ethereum and other\nsmart contract applications awesome now\nwe have that installed we can actually\ngo ahead and start building our front\nend now what we're going to do is we're\ngoing to go to app. TSX folder and we're\ngoing to start in here we're going to\nstart adjusting some bits in here so\nwhat we can do is we can do yard and\nstart and we'll get our our little react\nfront end here now what we can do is we\ncan go ahead and do something like\nchange anything in here right see how\nthis line says edit source. apppp source\nslapp and save to reload you do we\nchange this whole\nline being something just like hello\nwe'll save it it'll recompile we can go\nback and now it just says hello right so\nthis is how we can actually upload and\nupdate our front end we have these these\nwonderful return pieces here these\nreturn sections here which will return\nthe HTML to actually render the front\nend and this is also our starting point\nfor allowing our application to be web 3\ncompa able so if we go to this used dap\ndocumentation right we go to our our\ngetting started section we have a little\nexample here that shows kind of what\nwhat something should look like right\nbut it's not exactly clear where we put\nall this code so they do have this\nwonderful step bystep bit and this is\nprobably the most helpful bit here it\nsays the first thing you need to do is\nset up D provider with optional config\nand wrap your whole app in it so we're\ngoing to use these dep provider tags\nright this is the open tag and this is\nthe closing tag we just wrap it around\nour app so we can see here this this\nwhole thing right now is our app so we\ncan take this whole thing delete it\nright and if we save right now we go and\nsee our friend is going to have nothing\nit's going to be blank this function app\nhere that's getting exported export\ndefault app and this is getting rendered\nin this index. TSX we have this cool\nlittle app HTML tag thing right but in\nany case we want to wrap this whole\nthing with this tag here right so we can\neven just copy this paste it in I can do\nD provider and then my vs code even Auto\nadds a second D provider here we can\ndelete this div class name equals app\nI'll just put put a little divider in\nhere and just say hi and at the top\nwe'll just import this D provider thing\nlike what what is this weird tag we're\ngoing to import it so we'll do\nimport dep\nProvider from at dep SL\ncore now if we hit save we'll get this\nweird error saying hey property config\nis missing in our D provider and that's\nbecause this dat provider needs a config\nassociated with it so we need to add\nthis config bit into this dat provider\nso we're going to do config equals this\nfirst bracket says we're going to type\nin typescript and this second bracket is\nsaying we're an object here so in this\nconfig we're going to tell our\napplication a couple of different things\nso we're going to tell it what supported\nchains there are what are the networks\nthat our application can actually work\nwith the default value for supported\nchange in used app is going to be\nmainnet REI koven brinkby robsten and XI\nsince we're going to be testing only on\nCoen and rink B we could just do chain\nid. coven and chain id. chain ID is\nanother term that we can pull right from\nour used appcore right and now if we\nwanted some other chain ID we could just\ngo ahead and put it in here right like\nif we wanted to work with our ganache we\ncould just do\n1337 if we wanted some other random\nchain we could just put the other number\nin there right but Shane id. koven is\ngoing to be 42 and Shane id. rink is\ngoing to be what is it three yeah three\nor or whatever it is and this is all we\nneed to get started working with an a\nweb 3 a blockchain compatible\napplication so let's go back let's save\nand we'll refresh and now it just says\nhi how's it going so we're going to\nspend a lot of time in this Source\nfolder and since we're going to be here\nin a lot let's let's do some cleanup\njust to cut down on the amount of fat\nthat we have with that crate react app\nso app.css we're going to toss this app.\ntest yes tests are great but we're going\nto toss it we're going to leave\nindex.css we do need index. TSX we don't\nneed this logo bit anymore because we're\ngoing to use our own logo we do need\nthis we also need this and since we're\nnot running tests anymore we don't need\nthis but I'm going to leave it in here\njust in case you guys want to later on\ngo back and and add some tests great so\nnow we're looking a little bit lighter\nand in our app let's just remove app.\nCSS let's remove logo. svv logo.svg go\nbye now okay so we're going to create\nwhat's called a component we're going to\ncreate a header component now in react\ncomponents are basically where you you\nput modular parts of your front end and\nwe're going to create one of these\ncomponents is going to be our header\ncomponent to do this we're going to\ncreate a new folder call it components\nand in here we're going to create a new\nfile called header. TSX and this is\nwhere we're going to put our header\nstuff and we're looking to to make a\nlittle button up here right we're\nlooking to make a little button in this\nheader so what we're going to do is\nwe're going to import some stuff so\nwe're going to import use ethers from at\nusep slore again if we look at the\ndocumentation real quick this use ethers\nthing has got some cool stuff it's got\nthis activate browser wallet thing got\nthis account thing it's got some it's\ngot some cool stuff so what what do\nthose actually do we're going to start\nby exporting a constant variable called\nheader this is going to be a function\nand this is some really this is some\nreally fancy typescript syntax what this\nis meaning is that we're saying header\nis a function and here's what the\nfunction is going to do we're going to\nuse this use Easter thing to get a\ncouple VAR variables so we're going to\nsay constant variable\naccount\nactivate browser\nwallet\ndeactivate equals use ethers in order\nfor us to actually use these though we\nneed to figure out first if the user is\nconnected so we're going to create\nanother constant variable we'll call it\nis\nconnected and this is going to\nequal an account it's going to equal an\naccount it's going to equal account does\nnot not equal\nundefined so we're saying if the account\nis undefined we're not connected if it's\nnot undefined then great we're connected\nso we're literally just looking to see\nif there's an account here and whether\nor not we're connected we'll decide if\nwe show a connect button or not so to do\nthat we're going to return a div this is\nwhere we're going to return some HTML\nstuff and we got to check to see if\nwe're connected so we'll do is connected\nand we're going to use this question\nmark which is known as a tertiary\noperator which means if this is true\nwe're going to do something and if it's\nfalse we're going to do something else\nso we're saying okay if we are connected\nright what do we do if we're connected\nhere well we're going to create a\nbutton we'll have the color equal\nprimary create this button here and then\nmy vs code autom makes these closing\ntags we' even leave this button blank if\nwe want or we're actually going to put\nsome fancy stuff in here and then we'll\nput a little function in it we'll say on\nclick equals deactivate this is this\ndeactivate function pulled in from our\nuse ethers thing I should spell it right\nthough and we're going to call this\nbutton disconnect oops there's a little\nparentheses next to this so this is what\nthis is connect thing does so we're\nsaying if if we are connected right to\nthis now we're going to do a little\ncolon here and this is going to\nrepresent what we're going to do if\nwe're not connected okay if we're not\nconnected what we're going to show is a\ndifferent button color can still be\nprimary and we're going to do onclick\nwe're going to do a\nfunction of activate browser wallet then\nwe close up the button tag with another\nback slash button and we'll call this\none though so if we are connected we're\ngoing to show a disconnect button and\nthen if we're not connected we're going\nto show a connect button and that's it\nright just make sure all of your divs\nall your tab are matched up we can go\nahead and save this and if we look at\nour UI you'll see nothing's changed\nright okay well why isn't anything\nchanged well this component that we just\nmade it's living inside of this\ncomponents folder and we've exported\nthis this header variable this header\nfunction right however it's actually not\nin our app here right so if we look at\nour index. TSX this is what's actually\ngetting rendered so we're just rendering\nthis app variable which is pulled in\nfrom you know doapp right this app. TSX\nso index. TSX is really our true Ground\nZero this is where everything really\ncomes from this is kind of our entry\npoint right this is our main function\nkind of think of that way that pulls\nfrom this app file that we have here you\ncan see in here we don't have any\nreference to this header right we have\nour D provider we have our div tag\nsaying hi but we don't have the header\nin here so what we need to do is we need\nto import this component we just made\ninto our app. TSX so what we're going to\ndo is we're going to do import header\nfrom slash\ncomponents slash\nheader and now we can take this header\nbit we can place it inside our header\ntags here we just do header we'll close\nthe tag by adding it right here we'll\nsave we'll head back and now we can see\na little connect button here which is\ngreat obviously it doesn't look great\nbut we have the functionality here which\nis what we want if we hit the connect\nbutton our metamask will actually pop up\nand say hey would you like to connect\nwhich account would you like to connect\nI'm going to go ahead select my first\none next connect it's connecting and now\nI'm actually going to be connected let's\ngo to one of the supported networks like\nkoven and now we can see here we have\nthis onclick equals disconnect if I\nclick this now oops I need to actually\nsorry I need to put this inside the tag\nhere we just moved on click to being\ninside of this little button here now we\ncan see it actually says disconnect and\nif I click it I get disconnected if IIT\nconnect I get automatically connected\nright so if we look at our metamask we\ncan see we're connected right here right\nthat little that little green thing you\ncan also manually disconnect by going\nright into our metamasks click this\nconnected thing here click the account\nand hit disconnect the account and\nyou'll see our front end does indeed\nupdate awesome this is how we can take\nour metamasks and actually inject it\ninto our front ends so we can actually\nuse the front ends great job this is\nabsolutely massive where we are so far\nnow you might be saying to yourself hey\nPatrick this is cool uh but it doesn't\nlook very good that's kind of a gross\nbutton in the top right corner can we\ncan we style this up can we make this\nlook a lot nicer the answer is\nabsolutely yes so there's a lot of\ndifferent styling packages out there you\ncan 100% write your own custom ones\nwe're going to be using one called\nmaterial UI it's a popular react\nframework for creating components and\njust and doing a lot of styling and\ndoing a lot of really nice work here so\nwe're going to be adding this to our\nproject as well so to add it we're just\ngoing to use this this line I'm just\ngoing to go ahead and do it myself come\nin here we're going to cancel this with\ncontrl C do yarn add at Material hyphen\nUI slore and this will give us access to\nsome really nice libraries for styling\nall these buttons and styling a lot of\nthe things that we're going to be\nworking with back in our header we can\nadd this styling here so we're going to\ndo import\nbutton make make\nstyles from at Material pyph ui/ core\nand we're going to use their button and\ntheir make Styles if we look in the\ndocumentation here can find their butt\nkind of like what their default buttons\nlook like and this looks pretty good\nlooks a lot better than what we\ncurrently have we're also going to be\ntaking advantage of their make Styles\nbit here so make Styles is a way to\nactually do styles for based off of\ndifferent themes that you can actually\nuse with materials UI we're not not\ngoing to be working with CSS files\nbecause we're going to be working with\nthis make Styles instead if you prefer\nCSS you can absolutely easily translate\nthese to CSS files so we are going to\nadd some Ed Styles first of all using\nmake Styles so in here we're going to do\nconst use\nStyles equals make Styles this is where\nwe put a theme in here we're just going\nto set it to be a default theme um\nthere's some documentation if you want\nto go ahead and add your old themes\nthough say this make Styles function is\ngoing to have a container and in this\ncontainer we're going to add some\npadding theme.\nspacing for we're going to add\ndisplay\nFlex we're going to add justify content\nFlex end then we're going to add Gap\neven do spacing one so this is really\njust some typical CSS stuff now we're\ngoing to take this use Style\nconstant that we just made and down here\nwe're going to do const classes equals\nUST Styles so now we have this classes\nobject that we can start working with\nwe're going to take this classes object\nin our little is connected thing we're\ngoing to do\ndiv class name equals little JavaScript\nin here classes.\ncontainer we're going to wrap this whole\nthing in this div right and this is\ngoing to style this whole button div\nhere so now if we go ahead and do yarn\nstart again because we we shut it off we\ncome back here we're going to see it's\ngoing to look a little bit different now\nit's been moved over here we have this\nlike fun little disconnect connect\nbutton where there's some padding and it\nlooks a little bit nicer and we're going\nto change all of our buttons to being\nkind of this built-in button from the\nmaterials UI so we're going to swap out\nall those buttons with this with our new\nbutton here if we go back we can see\nit's it looks even nicer now now that\nwe've swapped it out with that uh that\nnew type button right it's got a a nice\nlittle clicky feel to it and then we can\nalso do another line called variant\nequals contained for each of our buttons\nso right next to color primary we'll do\nvariant contained and then now we go\nback and we have a really nice button\nnow so awesome now we have like a really\nnice button let's create a component\nthat will contain the meat of our\napplication now though from materials UI\nwe're going to use what's called\ncontainers right and these are nice\nlittle containers are going to allow us\nto style and make these different\nsections well we can use we can import\nthis container bit from this materials\nUI by doing\nimport\ncontainer from at\nMaterial hyph UI SLC core in our app.\nTSX and what we'll do to our header\nwe'll make a little container here\ncontainer give it a closing tag\ncontainer and then maybe in here we put\nthis little div high right so we'll\nremove that div we'll paste it in here\nand now you can see that it's been\nformatted a little bit right it's been\npushed over from the side still says\nHigh we're going to want to do one more\nthing we're going to give it a Max width\nof being MD oops Max width equals\nMD and this Max width now if we look in\nthe docs again on materials UI these are\nthe different sizes we have large large\nmedium small extra large extra small and\nthen false right these are the different\noptions we can have for Max width we're\njust going to do medium so if we save\nthis now go to wrap we can see it's been\npushed over a little bit more it's time\nto add our main pieces right we're going\nto need that top piece for staking and\nthe bottom piece for unstaking so we're\nactually going to create a new component\ncalled Main and this is going to be our\nmain component so we're going to create\na new file in components called main.\nTSX so let's start by just showing some\ninformation about our wallet right\nshowing what we have in our wallet\nassociated with what we have in their\nsmart contracts so we'll say\nexport constant variable called Main and\nthis will be a function here's that\nSyntax for functions in typescript and\nJavaScript in order for us to show what\namounts that we have in our current\nwallet we're going to need to know what\nchain that we're even on because the\nnetwork that we're on is going to\ndetermine where the addresses are right\nbecause it's going to be different if\nyou're on Coen or main it Etc now this\nis where it gets a little bit\ninteresting because obviously with\nbrownie we know where these addresses\nare right and brownie keeps track of\nthis for us right it does it in our\nbuilds folder in our deployments folder\nwe look there now if you actually\ndeployed some into Coen you'll see this\n42 you see some stuff in here you'll see\nthis map. Json which has the most recent\ndeployments of our tokens our tokens and\nour token Farm if you actually deployed\nit to koven if you haven't deployed to\nCoen I highly recommend you doing that\nnow as well this way we can test our\nfront ends against a real test now so in\norder to get these addresses we're going\nto have to ask brownie hey brownie what\nare these addresses where are these\ncoming from so we're going to need to\ngrab some information from this Browning\nconfig we're basically going to need to\nget all the information all the\ninformation that's in this Browning\nconfig right because this has has these\naddresses already and this is what we\nwant however it's really hard for nodejs\nto work outside of this Source folder so\nwhat we're going to want to do is we're\ngoing to want to send that brownie\nconfig to our front end the way we're\ngoing to do that is we're going to\nactually modify by adding a new function\ncalled def update front end now the only\nreason that this works is because we\nhave both our contracts and our front\nend in the same repository in the real\nworld once you deploy your contracts\nthose addresses are pretty much set so\nyou can just copy paste them over to\nyour front end repository but for us we\ndon't have set contracts yet so we need\na way to update our front end so what\nwe're going to do is we're going to send\nthat brownie config over to the front\nend right that way our main can know\nwhere those addresses are we're also\ngoing to need to send we're going need\nto send the brownie\nconfig to our source folder we're also\ngoing to need to send the build folder\nwhy because this will have access to the\nDAP token address or any other mock\naddresses that we're using we're going\nto open up our Browning config and we're\ngoing to paste and we're going to dump\nthe config into that Source folder now\ntypescript doesn't work with yaml so\nwell it works with Jason really well so\nwe're actually going to convert it from\nyaml to Json and dump it to the front\nend so we're going to open up our\nbrownie config we're going to say\nwith\nopen brownie config yaml we're going to\nopen it\nin read\nformat we're going to say as browny\nconfig we're going to say config\ndictionary equals\nyl. load browny\nconfig loader equals yaml\ndo full loader so we're going to have to\nimport this yaml from the top we're\ngoing to do import yaml and what this\nyaml is going to do is it's going to\nallow us to load our yaml into a\ndictionary that's really it so you\nprobably don't have it right now you're\ngoing to want to run pip install\npaml to actually get it now we'll be\nable to have that now that we've got\nthis in a dictionary we're going to want\nto send this to the front end right\nwe're going to want to write this\ndictionary as adjacent object to our\nfront end so we're going to say with\nopen and we're going to open that front\nend Source folder and that's just where\nwe're going to dump this file we're\ngoing to call it\nbrownie\nconfig Json we're going to open this new\nfile in right mode\nwe'll say it's as\nbrownie config Json what we're going to\ndo is just do what's called a Json dump\nwe're just going to take this dictionary\nand dump it as Json into this file so\nwe're gonna say json.\ndump config\ndick brownie\nconfig Jason of course we're going to\nhave to import Json and then at the end\nwe'll even print front and updated so\nnow that we have this update front end\nscript what we can do when we run our\ndeploy token and D token we can just add\nthis update front end bit now we don't\nwant to always update the front end\nright we only want to do one when we're\nworking with the front end so in our\ndeploy token farm and dap token we're\ngoing to set update front end equals\nfalse so by default this is false this\nway when we run our tests front end\nwon't get updated right and down here\nwe'll just say if upate front end then\nwe'll update the front end otherwise we\nwon't and in our main function here\nwe'll just say update front end equals\ntrip now if we deploy this to Coen or\nrink B we'll automatically update and\nsend this brownie config and then let's\nactually change this to front end update\ninstead of update front end so that we\ndon't have the same method name as our\nBoolean here so we'll do front and\nupdate instead so now when we deploy\nwe'll actually go ahead and update our\nour front end here but we're not always\ngoing to redeploy so let's also create\nan\nupdate front end. py script and this\nwe'll just call that function that we\njust made so we'll do def main update\nfront end and then we'll do from\nscripts. deoy import\nupdate front end semicolon there great\nlet's open up a new shell Shell by\nhitting a little plus button here now we\nhave two shell and we can just do\nbrownie run scripts update front end\ndoesn't matter the\nnetwork and what this is just going to\ndo it's just going to run that copy\nscript right it's going to run our our\nupdate front end script which we made\nright here so if we did this right we\nshould now have a brownie config.js in\nour front end SL Source directory if we\ngo in here we go into our source\ndirectory we can indeed see right in\nhere do we need anything else well so\nthat's going to give us those addresses\nright it's going to give us it's going\nto give us some of the addresses but\nit's not going to give us everything\nwhat about dap token right dap token\nisn't going to be something in our\nBrowning config W token and FAU token\nsure they'll be in our config but dap\ntoken is going to be something that only\nis going to be deployed by us so we need\nto send that to the front end too we\nneed to send basically our whole build\nfolder so we're going to need to update\nthis update front end script to also\nsend send the build folder I know that\nwe're actually going to be copying a\nnumber of different folders so I'm just\ngoing to go ahead and make a new\nfunction called copy folders to front\nend and in here so we're going to make\nthis copy folders to front end function\nhere we're going to do a couple of\nclever python things this is going to\ntake a source and a destination so we\nwant a source folder and then a\ndestination folder so we're going to\ncopy this build folder and move it to\nyou know some folder in the front front\nit first we're going to check that that\ndestination exists and if it exists\nwe're going to kill it we're going to\nwe're just going to remove it so we're\ngoing to say if os. path. exists\ndestination we're going to do this\nshuttle. RM tree D and this is going to\nkill everything so we need to import\nboth of those we're going to import OS\nwe're going to import shuttle or shutil\nI actually have no idea how to pronounce\nthat but we're going to remove that\nwhole bit and we're just going to copy\neverything over from our build folder so\nwe're going to do shuttle. copy tree SRC\ntest so we're gonna say hey if that\nbuild folder exists in the front end\njust delete it and we're just going to\ncopy everything over from the build\nfolder and we're going to do this copy\nfolders to front end a few times the\nfirst thing of course like I said is\ngoing to be with this build folder so\nwe're going to do this copy folders to\nfront end the source is going to beu so\nwe're going to take this whole build\nthing and we're going to move it to\nslash front end slsrc and we're going to\ncreate a new folder in here called\nchain info right and this is just going\nto have all of the build information and\nall right cool so now we can run that\nbrowny run scripts update front end go\nahead and run that and great front end\nis now updated so if we look in our\nfront end we look in Source we now have\nthis chain info folder which is\nliterally just the build folder fer\nwhich is awesome now we can actually\nstart working with these pieces in our\nfront end so let's figure out how to get\nthe dep token\naddress well to get this dap token\naddress we're going to need that map\nthat we just got from chain info in our\ndeployments but we're also going to need\nto know what chain that we're currently\non like what we saw before we have this\nchain ID from usape which will tell us\nwhat chain ID of the current Network\nthat we're on so we can go go ahead\nimport that in here as well so what\nwe're going to do is we're going to\nimport use ethers again\nfrom at use daap SL core what we're\ngoing to do here is use\nethers allows us to get the chain ID\nthat we're working on so we can say cons\nchain\nID\nequals use ethers now that we have the\nchain ID we're going to have to map it\nto the name of the network right because\nour brownie config has this network\nsection but it's mapped by the name of\nthe network not by the ID so what we're\nactually going to do is we're going to\ncreate a helper config in our\nSRC so we're just going to create a new\nfile helper\nconfig Json and it's literally just\ngoing to be a Json object that Maps\nnumbers to their Associated chain names\nso 42 for example is going to be koven\nfour is going to be rink B 1337 going to\nbe Dev\nor it could also be ganach right one\nit's going to be main net Etc now that\nwe have this helper config we can do\nimport helper config\nfrom Helper config.js and before we even\nget the DB token address we can do const\nnetwork\nname it's going to equal that helper\nconfig at the chain ID now typescript is\nactually going to get a little bit mad\nat us here so we need to add a little\nbit more to this line actually so we\nneed to say okay only grab from this\nhelper config if chain ID exists right\nbecause there might be a chance that\ntrain chain ID is nothing or it's\nsomething really weird so we're going to\nsay chain ID and we're going to use this\ntertiary tertiary operator again we're\ngoing to say if this chain ID exists\nthen go ahead and use the helper config\nhowever if it doesn't exist just use Dev\nI should spell chain ID right so it\ndoesn't get really confused to me and\nwhenever we return one of these\ncomponents or try to use one of these\ncomponents we're always going to have to\nreturn some type of HTML or or div tag\nlike this we head over to our app we add\nour little main bit here of course we're\ngoing to want to import this say import\nmain\nfrom components SL main we save it we'll\nadd\nour main tag main open do the syntax\nwe're basically saying in it now\ndepending on your setup you might\nactually run into this eror here saying\nelement implicitly has an any type\nbecause expression blah blah blah you\nmight be saying okay well what's going\non here now to make our lives easier\nwe're going to tone down typescripts\nstrictness here so what we're going to\ndo is in our typescript config.js we're\nactually going to add to press\nimplicit any index errors so we're\nbasically suppressing when we get this\ntype of error because it's not ever\nactually going to affect anything I\nshould probably I should probably spell\nthis correctly we'll save it now if we\nsave this file here we're going to\nactually get this saying everything's\ncompiled everything looks good and if we\nrefresh our front end we're going to get\nback to exactly where we are before now\nwhat we can also do is we can also\nconsole.log these out we can also see in\nthe console exactly what these are going\nto look like so if we do console.log\nchain ID and console.log Network name we\nsave and we go back we can go hit\ninspect go to the console and we'll see\n42 and koven gets printed out in the\nconsole over here so that's 42 is the\nchain ID and koven is the is the network\nname so we know that we're doing this\nright okay great so we have our network\nname and we have a chain ID we've got a\nway for us to update our front end with\na new script let's finally get those\ndifferent addresses that we need say the\nconstant\nvariable dap token address is going to\nequal something from that build folder\nor that chain info folder that we\ncreated inside here inside deployments\nwe have this map.\nJson and since I've already deployed\nthis to koven we have dap token and\ntoken Farm on the Coen Network so we can\nthen use that and say if if we are\nconnected to a Chan ID and that's again\nthat's what this question Mark is doing\nsaying if this chain ID exists then look\ninto that mapping else we're just going\nto use a zero address right so how do we\nactually get this mapping in here though\nso I'm going to say\nimport Network mapping from this is\ngoing to be in that chain\ninfo folder inside the deployments\ndeployments and it's just going to be\nmap. Json so we're going to take this\nnetwork mapping object and we're going\nto say if the chain ID exists then\ninside this network mapping Json object\nwe're going\nto cast that chain\nID as a string and then we're going to\ngrab the name of the DAP token which is\ngoing to be dap token and we're going to\ngrab whatever address is at the top\nright so this is going to be a big list\nthe more times we deploy the more times\nBrown is is going to keep track of it\nand there's going to be all these\ndifferent addresses and we just want\nthis one right at the top right we want\nthe most recent one here so we're just\ngoing to say at position zero otherwise\nif we're not on a chain ID we're just\ngoing to use a zero address and ether's\nJS actually has a really nice package to\ngive us what's called constants so we're\ngoing to do\nconstants dot address\nzero and we can import that from\nethers so we'll do\nimport\nConant\nfrom\nethers if you don't already have ethers\ninstalled here we're going to do CD\nfront end we're going to do yarn add\nethers and now we have the ethers\npackage in here now we're not going to\ndo the same thing for the we token or\nthe fa token because those tokens are\ndefined in the brownie config as a OS to\nbeing defined in our map. Json here so\nto get those ones we're going to say\nconst we token address it's going to\nequal let's check first if the chain ID\nexists and if it does we're going to\ngrab it from the brownie config so to\ngrab that we're going to do\nimport brownie\nconfig from again now that we've\nimported it brownie config.js\nnow we can work with this brownie config\ninside of our front end so we'll say\nbrownie\nconfig of\nnetworks of that network name of the\nleft token and if chain ID oops chain ID\ndoes not exist then once again we're\ngoing to do constants do address zero so\nwe're just going to leave it blank and\nthen we're going to do the exact same\nthing for the fu slth die token so we'll\ndo const fu\ntoken\naddress equals chain ID question mark So\nif the chain ID does exist it'll be the\nbrownie\nconfig\nnetworks network\nname FAU\ntoken and if chain ID doesn't exist\nwill'll be\nconstants address zero okay awesome and\nif we save it oops looks like I put an\nextra comma in there by accident just\ngoing to get rid of that and\nresave and then refresh here so I'm\ngetting an issue uh because I'm on the\nrink be chain right now and it's saying\nhey there's no there's nothing for rink\nthere's no dap token for rink beat you\ngot to be on Coen so if I go back to\nkoven\nhere and I refresh now it works out fine\nright this might still break for you if\nyou're on Coen and you haven't deployed\nanything to Coen we can fix this in our\nconfig for the D Provider by changing\nthe supported chains for this now\ntypically a lot of the times you're\ngoing to want to test using a ganache\nchain or some type of local chain so\nthat your front end testing can be a lot\nfaster for this we're just going to do\neverything on Coen but a nice little\nchallenge for you would be to refactor\nthis so that it also works with\nsomething like ganache and we're going\nto not use ganache so I'm just going to\ngo back to app. TSX we're going to\nremove ganache even we're going to even\nremove rink B for now we're just going\nto work with Coen just to make it simple\nif I go to our react page now refresh I\ncan connect awesome if I go to rink B\nit's not going to freak out because it\nsays Hey rink B is not even supported so\nI don't care what you're doing however\nkoven is supported so we're connected\nand we're looking good and the thing is\nwe really don't want to couple our front\nend with our contracts right we really\nwant to code the contracts independently\nin the front end independently anyways\nso let's get back into our main . TSX so\nwe're going to be in here for a while\nbut we've already done some great things\nwe've gotten what network we're on what\nchain ID we're on and we've gotten the\ndifferent addresses for these different\ntokens so as you can probably see the\nplace that we're actually going to put\nstuff on the front end is in this little\nreturn statement here right right now\nwe're just returning I'm Main and I we\njust see I'm main right here to do this\nwe're actually going to make another\ncomponent we're going to make a\ncomponent called your wallet this\ncomponent is going to be part of this\nMain\ncomponent here it's a component inside\nof a component that is literally only\ngoing to address our wallet needs so on\nour little components tab here we're\ngoing to go ahead and create a new\nfolder and we're going to call it your\nwallet this is just going to have\neverything to do with our wallet in here\nso let's get in here we'll create a new\nfile because we're going to actually\nmake a couple files and our first one is\njust going to be your wallet.\nTSX this is going to be our component\nthat is just going to deal with getting\nour wallet getting the token balances of\nthe different tokens that we have since\nwe know we're going to put this\ncomponent in Main and Main is in our our\nhome base our app. TSX you know that\nwe're going to do an export const your\nwallet in here and we'll make this a\nfunction now in order to actually show\nthese tokens we do need to get some\ninformation from our other component we\nneed to get some information on what the\nsupported tokens even are so we're going\nto have our main actually pass a\nvariable to our wallet here we're going\nto call it the\nsupported tokens and this is going to be\nof\ntype your wallet\n[Music]\nprops and this is going to be a your\nwallet props here just to tell\ntypescript what this is what this\nsupported tokens is going to look like\nwe're going to say interface your wallet\nprops it's going to look like like this\nsupported tokens and it's going to be an\narray of token array of some\ntoken we're going to grab that token\ntype from Main as well so actually we're\ngoing to do import\ntoken\nfrom\nMain and in our main we're going to pass\nthis token and we're going to pass some\nsupported tokens to our wallet so right\nunderneath those three token addresses\nback in main we're going to do const\nsupported tokens is going to be an\narray of token this token\ntype so above here we're going to do\nexport type\ntoken\nequals and we're going to say a token\ntype is going to involve an image which\nis going to be a string an address which\nis also going to be a string and a name\nwhich will also be a string so we're\ncreating a new type called token here in\nour main function we're creating this\nsupported tokens object which is an\narray of tokens and this is excuse me\nand this is going to equal that array\nsyntax so our first\ntoken is going to be have an\nimage that we haven't defined yet the\naddress is going to be this dap token\naddress and the name\nthe name of course is going to be dap or\ndap token now we're going to need a\ncouple images so at this point you\nshould see where we're going with this\nwe're create this array of supported\ntokens first is our dap token and we\nneed an image for this dap token so if\nyou're following along you can just grab\nthis image right off of the GitHub and\nwe're going to grab that D token and\nwe're going to pop it into\nSRC we're going to change this to dap.\nPNG now we can import this by doing\nimport dap\nfrom dap. PNG now we can take this dap\nimage and under image I'll put now let's\ndo the other tokens so we'll do a comma\nwe'll do\nimage will be F oops F address will be\nwe\ntoken we token address name will be we\nand again we can either oh let's close\nthis off and again we can either grab\nright from my GitHub or pop it into my\nSRC here we'll change this to f.png\nwe'll scroll up and we'll import this as\nwell import F from sl.png and boom that\nlooks good one more comma do image it's\ngoing to be\nfa or this is going to be our die token\naddress is going to be f\nfa token\naddress\nname it's going to be\nfa or die this will be our die token\nwe'll pop it into our SRC change the\nname to\nd.png then we'll\nimport die from\nd.png grab die and it looks like we're\ngoing to name it die actually instead\nand if your vs code starts yelling at\nyou about this can't find module it's\nreally confused what we're going to do\nat the top here we're just going to add\na little comment backstar\neslint disable\nspaced\ncomment star backs\nslash D D Dash\nreference types equals react\nscripts and we'll save and that issue\nwill go away all right well now that we\nhave our supported tokens token array we\ncan actually pass this to that your\nwallet bit right so now we're going to\ngo to this return bit we're going to\nremove that div on Main and we're going\nto actually start getting to some meat\nhere so we're going to pass this to our\nyour wallet component that we're going\nto import in just a second and we're\ngoing to send it our supported tokens\nsay supported tokens equals supported\ntokens back slash like this and of\ncourse we're going to have to import\nyour wallet here so scroll to the top do\nimport your\nwallet\nfrom your wallet we're actually going to\nmake a new file in our your wallet\nfolder called\nindex.ts and we're just going to\nexport your wallet\nfrom slashy your\nwallet save\nthat we're getting an\nissue saying you wallet is not defined\nit's because this should be your\nwallet Okay cool so we're getting\nanother issue but I'm going to fix that\nin a second great so now we have some\nsupported tokens we have a wallet\nhere we're exporting our wallet with our\nindex.ts in our your wallet folder\nnow let's finish our your wallet\nimplementation and this needs a little\nequal sign here whoops and we're going\nto get this little error basically\nbecause we don't have a return here so\nwe could just do return just to make it\nhappy\ndiv\nI leave it changes to I'm your wallet\nand we'll save and now everything's\nhappy we'll go to our front end we'll do\na quick refresh and now we see I'm your\nwallet so let's keep diving into your\nwallet here right because this is going\nto be where we're doing all of this\nstuff about what's in your wallet now\nwe're going to use a couple of these\ncomponents from the materials UI here to\nget\nstarted to start we're just going to use\nthis box the Box component it serves\njust as a wrapper component for most of\nthe CSS utility needs it's just a box\nright it's a box that we can put on our\nfront end so we're going to come over\ninto our your wallet and we'll start\nworking with this box we're going to put\neverything inside of this little this\nlittle box here we're going to have to\nimport this box import\nbox\nfrom at Material\nUI we'll give this a little header H1\nwe'll\nsay the\nwallet H\none get a little header your wallet I'm\nyour wallet great now we'll get rid of\nthis little on your wallet and we'll\ncreate another\nbox and in here we're going to add all\nof our functionality for uh what is in\nour wallet now we're going to use some\ntabs here from the materials UI to swap\nbetween the tokens right we're going to\nhave one tab for FAU token another tab\nfor dap token and for wrapped ether\nwe're going to use this this this tabs\nthing here so to work with tabs we're\ngoing to need to import some\ntab stuff so we're going to\nimport tab\ncontext tab\nlist and tab\npanel from Material UI SL laab so\nmaterial UI material UI laab these are\nsome components that they're not quite\nready to move to the core so we do have\nto add these as well so we'll go to our\nfront end in our other shell we do yarn\nadd add material ui/ laab these are kind\nof their testy ones but uh they have\nsome really nice features that we're\ngoing to use but let's get into this box\nand let's make our first tab\ncontext value equal to now in our box\nhere the first tab that we're going to\nhave to use is going to be whatever\ntoken that we have selected to select\ntokens we're going to use what's called\na state hook so we're going to create a\nstate hook here inside of this we're\ngoing to\ndo const\nselected token\nindex set selected token\nindex equals use\nstate\nnumber zero so use State we're going to\ngrab from react it looks like I've\nalready imported here import react comma\nbrackets use state from react and what\nthis is going to do it's going to create\none variable selected token Index this\nis going to be whatever token that we're\non and then set selected token index is\ngoing to update this selected token\nIndex this US state state components\nthing is a way of saving State between\nrenders of components so in our little\nbox here we're going to start with a tab\ncontext we start basically with our own\nTab and the value is going to be equal\nto whatever token we currently have\nselected. two\nstring and we're going to have to make a\nlist of these tokens in our tab\ncontext we're going to have to add some\nway to change between the tabs right\nwhen we change between the tabs we want\na different token to be selected and\nwe're going to make a a tab list that's\ngoing to change whenever we we click the\ndifferent tab so we're going to add\nwe're going to add some functionality to\nthis but for now we're just going to\ngive it an ARA\nlabel call this our\nstake form tabs and based off the\nsupported\ntokens in a mapping of token to index\nwe're going to call a function in here\nwhere we return a\ntab which will have a label equal to\ntoken. name value would be equal to\nindex string or EXC two\nstring key it's going to be equal\nto\nindex tab is something that is just from\nthe material UI core so we're going to\nimport\ntab\nfrom\nMaterial core I should probably spell\nsupported tokens correctly supported\ntokens now if we look at our UI we can\nnow see we got a couple different\nbuttons here which great we have dap we\nand die right these the different\nsupported tokens that we're mapping here\nnow of course if we click the different\nbuttons uh nothing actually happens so\nwe do need to to handle a change we do\nneed to code some functionality to\nhandle a change whenever we do something\ndifferent so in our TBL list we're going\nto add on change EXC me\non change\nequals handle change we're going to code\na little functionality at the top to\nactually handle the change so we'll say\nconst\nhandle\nchange be equal to an\nevent a react. change event we'll do a\nnew value it's going to be a string and\nthis is a function so we're going to do\nthis little function syntax again and\nall we're going to do is we're going to\nuse our little State hook here so we're\ngoing to do set selected token index and\nwe're going to parse the int of the new\nvalue value that we\nget so what's happening here we've added\nthis new functionality where whenever we\nchange one of those tabs we're going to\nchange this the selected token right\nthis selected token number is going to\nbe different and what we do is we map\nthe indexes to a token right so each one\nof these tokens is going to represent a\ncertain number so now when we save we go\ncheck out our front end you can now see\nthat we do indeed swap between tabs here\nwhich is really nice all right let's\nkeep going so that's cool we have a way\nto swap between the different tokens\nvisually here but we need a a big stake\nbutton right the reason that we need to\nswap between the tokens is because we\nneed a way to stake between them so when\nwe're on one of these tabs we're going\nto add a stake form here we're going to\nadd a big button that allows us to stake\nso we're going to do some typescript\nwe're going to do supported tokens. map\ngoing to map that token and index again\nanother function that and in here we're\ngoing to return a different tab\npanel the value in here is going to be\nthe\nindex. two\nstring key is going to be index make a\nlittle div in here we're going to need\nto put two pieces in here we're going to\nneed to be putting our Wallet balance in\nhere and then also a big stake button\nright first we looking at right now it's\njust going to say our Wallet balance and\na big stake button but how do we\nactually do this how do we actually get\nour Wallet balance and one of these big\nstake buttons well we're probably going\nto need some type of component to get\nour actual Wallet balance that we're\ngoing to stick in here so yep you\nalready know we're going to go in here\ninto our your wallet component we're\ngoing to create a new file and this is\nwhere we're going to\nDefine that Wallet balance component and\nwe're going to import our Wallet balance\ninto our wallet here so that we can\nactually see the balance of our wallet\nright in the front end and right and\nthis is where we're going to actually be\nreading offchain finally after a lot of\ntypescript and react setup since we're\ngoing to be importing this into our your\nwallet component here of course we're\ngoing to start with export\nconst Wallet balance and we're going to\nmake this a function so we'll do this\nreally\nweird function syntax and we're probably\ngoing to want to pass this the token\nright the token that we want to get the\nbalance of\nso we're even going to set that up like\nthis a token in here and we'll\nDefine what this looks like uh with a\ninterface called Wallet balance props so\nwe'll say export\ninterface Wallet balance\nprops and this will be a token\nright this will be that same token type\nthat we defined before so we're going to\nhave to import that so we'll say\nimport token\nfrom Main all right great that's our\ninitial setup here we'll grab from the\ntoken that we passed to this we'll pass\nwe'll get the\nimage address and the name from that\ntoken address and name we'll grab the\naccount right because we're going to\nneed the account with along with the\ntoken so we'll say\naccount equals use\nethers and of\ncourse have to\nimport count\nfrom excuse me import not count\nuse ethers from at\nusap core we're going to need the\naccount we're going to need the address\nand usbcore has a nice little hook\ncalled use token balance that we're\ngoing to use you check it out in the\ndocumentation provides a way to fetch\nthe balance of erc20 tokens specified by\na token address makes our lives a lot\neasier so we'll just import that as well\nuse token balance and all we have to do\nreally is do\nconst token\nbalance\nequals use token\nbalance of the address of the to\ntoken and our count here we can even do\na quick\nconsole.log token\nbalance see if we're doing it correctly\nand we take this Wallet balance and\nimport it into our wallet here we should\nbe able to see something so we'll import\nit into our wallet now scrolling to the\ntop we'll do import Wallet balance from\nslash\nWallet balance and down inside our our\nvery large return function here we'll\nadd this new tab with this new uh\ncomponent we say Wallet\nbalance we still remember we need to\nsend it the token so we'll send it\ntokens at the index of the\nselected token index I should spell\nsupported tokens\nright I should spell Wallet balance\nright capital B we do need to do a\nreturn so that it's actually a jsx\ncomponent do a div we'll just have this\nsay I'm the Wallet balance if we go to\nour front end we do a quick refresh we\ndo indeed see this little print line\nhere uh this is javascript's big number\nso if we really want to see this token\nbalance we'll do dot to string we have\nto put this question mark here to tell\ntypescript hey turn it to a string if if\nit's not undefined and now if we save we\ngo to our front end we do a refresh\nsince we are\nconnected to Coen here we can see we had\nanount printed out here and if we switch\ntabs you'll\nsee the different amounts being printed\nhere which is fantastic cool so let's\nremove this little console.log we want\nto show this token balance obviously in\nour UI right we don't want to have\npeople to have to go to the console.log\nright to actually see it we want it to\nrepresent we want to show up where it\nsays I'm the Wallet balance so what\nwe're going to do first we should\nprobably format it right because this is\nin units of way so we're going to do\nconst formatted token balance this be a\nnumber which will equal\nto token\nbalance if token balance does exist\nagain we're using this tertiary operator\nwe're going to parse\nfloat format\nunits token balance\n18 otherwise we're just going to use\nzero format units is a nice little\nimport that we're going to grab from the\nethers project so we'll do\nimport format\nunits from at ethers project SL units\nand of course yarn ad at ether's project\nand of course we're going to do a yarn\nad on this this here we do yarn add at\nethers project units and now this\nformatted token balance is going to be\nthis token balance that we just got but\nformatted formatted much nicer and in\nour little div here what we could just\ndo is we could just add this formatted\ntoken balance we'll save and we'll look\nat the front end now and aha we now see\nwe have 100 dep zero W and 15 die right\nthese numbers might be a little bit\ndifferent depending on how much you\nactually got but this is perfect this is\nexactly what we're looking for so let's\nclose out the console and let's let's\nflesh this out a little bit let's make\nthis look a little bit nicer here so\ninstead of just returning a little div\nlike this let's actually make a new\ncomponent\ncalled balance\nmessage and we'll use this\ninstead create a new component called\nbalance message and it'll format up the\nway we actually show these formatted\ntokens and here we'll pass\nwe pass it a couple variables we'll pass\nthis component an amount we'll pass it a\nlabel we'll say the label is going to be\nyour\nunstaked\nname\nbalance right we're grabbing name from\nthe token and we'll pass it e token\nimage SRC which is going to be that\nimage so we're going to pass it a\nlabel excuse me not IMG it's image we're\ngoing to pass it a label token image and\nan amount right and this component is\njust going to make us have this balance\nlook a little bit nicer so in our our\nyour wallet section we going to do a new\nfile called Balan message. TSX oops not\ntsxxxspelled\nparameters a\nlabel an amount and a token image SRC\nand this will be an interface of balance\nmessage props this will be a function of\ncourse so we'll do this weird function\nsyntax of course we need to tell\ntypescript what this looks like so we'll\nsay\ninterface balce message\nprops what are those inputs say the\nlabel\nit's going to be a\nstring the\namount is going to be a\nnumber and the token image\nSRC is going to be a string and in here\nwe're going to use and in here we're\ngoing to once again do that use Styles\nbit for materials UI because we might\nwant to style this up a little bit so\nwe're going to import make\nstyles\n[Music]\nfrom at material\nslui core we'll do a const use Styles\nit's going to equal make Styles theme\nwhich we're going to skip doing a theme\nbut let's make some styles for the\ndifferent pieces let's give it balance\nmessage be surrounded mainly by\ncontainer which will have a couple\nStyles in here we'll say the display\nit's going to be an inline grid the grid\ntemplate columns are going to be Auto\nauto auto again you can check out all\nthese parameters in the\ndocumentation there's going to be a gap\nwhich will be theme. spacing one again\nwe're skipping theme but this will just\nbe a way to add some spacing and then\nalign items in the center we'll also\ngive the token image its own styling\ngive it a width of\n32px 32 pixels and then the amount just\ndo give it a font weight of 700 so make\nthat a little thick so now that we have\nour use Styles we have our styling here\nwe can go into our export below we'll do\nconst classes equals use\nStyles and we're going to return we're\ngoing to return a div class name is\ngoing to be equal to that main container\nclasses.\ncontainer do another div just for that\nlabel that we're looking for we'll do\nanother div for class\nname\n[Music]\nequals classes.\nMount so have that that nice font weight\nand in here we'll just have the\namount and then we'll grab that image of\nthe\ntoken class name name is going to equal\nto classes. token\nimage we'll grab the source of that\nimage is just going to be that token\nimage SRC that we get past and we'll\ngive it an ALT called token\nlogo close that Tab out great so what\nwe're going to want to do is in our\nWallet balance here this balance message\nthat we just created we'll do import\nbalance\nmessage from dot dot dot dot\npo\nslash your\nwallet capital W and actually I know\nwe're going to use this balance message\na little bit later so I'm actually going\nto grab it and drag it into components\nmove it into components and move it out\nof your wallet because I know that we're\nactually going to use it a little bit\nlater so that means in our Wallet\nbalance we're just going to pull it\nright from components slash balance\nmessage and whoops we actually need to\nmake this look like this close it out\nhere move this\npart this boom right like that and now\nlet's try out the front end okay we're\nlooking a little bit nicer right we have\na really thick number here explain\nhow much of the token we have we have\nthe images popping up this looks\nstarting to look great let's add this\nstake button right so that when they see\nthis they can actually stake and\ninteract with our contract here so to do\nthis we do need to create another\ncomponent called our stake form so in\nyour wallet we're going to create a new\nfile called stake form.\nTSX and this is where we're going to add\na little button and an amount for the\nusers to actually stake on our contract\nso you already know we're going to start\nwith export const State form\nequals and we're going to\nhave our wallet pass the token just like\nwe passed the token to Wallet balance so\nwe'll say token and we'll have this be\nstake form\nprops which is an interface we're going\nto Define in a second this is a function\nso we'll do this fun\nfunction syntax here and then stake form\nprops as you know is just going to be a\ntoken so we'll do inter\nexport\ninterface stake\nform\nprops this is just going to be a token\nof type token which\nagain we're going to import\ntoken\nfrom\nMain great and that is our starting\npoint for this so we're going to create\na stake form with a big button that says\nstake and the user can actually choose\nhow much they want to stake on our smart\ncontract so we're going to do some\nsimilar stuff as we did before we're\ngoing to grab some variables we're going\nto say the address is going to be that\ntoken\naddress that we get from the past token\nwe're also going to get a name of the\ntoken from that\ntoken we're going to get our account\nfrom use ethers again so we can import\nthat we say from oops\nimport use\nethers\nfrom at use dcore we're going to want to\ngrab the token balance so we'll do const\ntoken balance once again we can grab\nthat with the use token balance with the\ntoken\naddress and the\naccount so we're going to use use token\nbalance this will also grab from used\nappcore we're going to want to format\nthis token balance so we'll do const\nformat it\ntoken balance this is going to be a\nnumber again this is going to be the\nexact same as we did before say token\nbalance do pars\nfloat format\nunits token\nbalance\n18 or zero format units once again we're\ngoing to import that\nimport format units from at ethers\nproject units perfect importing here\nwe've gotten some some starter boiler PL\nlet's just go ahead and grab those\nbuttons right because those are really\nthe things that we're going to care\nabout here let's just return some stuff\nhere so something can show up on our\nfront end right so let's do\nreturn let's start returning something\nhere and whenever we return something\nit's all got to be in one tag right so\nI'm going to I know I'm going to be\ndoing a whole bunch of different tags so\nI'm just going to go ahead and make an\nopen and close tag here and this is\nwhere I'm going to put all my stuff now\nwe know we're going to want to have a\nbig Stak butt right so let's go ahead\nand just do let's get a let's get a\nbutton tag in here and of course since\nwe're going to have a button we're we're\ngoing to pull this in from that material\nASI material UI right so we'll do import\nbutton\nfrom Material UI core just so we can get\nget started with something here and then\nback in our your wallet. TSX let's add\nthis button in here inside of our tab\npanel right below our Wallet balance\nWe'll add this stake form thing we'll\nopen and close of course we've got to\nimport it so we'll say import\nimport stake form from slash stake form\nand we need to pass this that token\nobject so back in our your wallet we're\ngoing to say okay token\nequals supported tokens of that selected\ntoken\nindex\nselected\ntoken index and let's not have this\njust do a little backslash here to close\nthat out we should close this bracket\nhere we'll give this button some stuff\nright we'll do color equals primary say\nsize equals large then we'll give it\nsome text\ncalled steak double exclamation point or\nhowever many you want to put in there\nand now if we look at up front we got\nthis big steak button nice okay we're\nlooking a little bit better currently\ndoesn't do anything but we have a steak\nbutton great now we can start adding\nsome implementation right we can have it\ndo some stuff now when we hit this stake\nbutton what do we want it to do we want\nit to do two things we want it to\napprove whatever token that we have and\nthen we want it to stake that amount we\nalso need to have some type of form here\nwe need to know how much we want to\nstake right so we're going to need some\nlittle input box that we can add a\ncertain amount in well we can do that\ntoo with a little input box from\nmaterials UI so there's another package\nwe're going to grab which is called\ninput from materials UI cor and then\nwe're going to use this little input box\nbefore the button so we're going to\ninput little slash here now if we save\nrefresh the front end awesome now we can\ndo some typing in here we can click this\nstake button now to do this though we're\ngoing to need to keep track of how much\namount is in here right we're going to\nneed to keep track of how much amounts\nin here so we're going to inspect on the\nfront end and we're going to go to\nconsole and see if we can follow along\nwith how much is in here or what what\namount is in here and to do this we're\ngoing to make another one of those State\nHooks and we're going to track that\namount in there so we're going to say\nconst amount set amount one of these\nStak hooks equals use state which is\ngoing to be a number or a string or an\narray number or\nstring\nzero we're going to import this use\nState here from react we going to do\nimport\nimport\nreact use\nstate from react and now we have this\nstate hook that we can use to keep track\nof the amount that's going to be put in\nthere with our input tag here we're\ngoing to say on change whenever this\nchanges we're going to have to have some\nhandle function right we're going to\ncall it handle input change and this is\ngoing to handle the input change so\nwe're going to create that function\nwe're going to do\nconst handle input change equals and\nwe're going to use some events stuff in\nhere we're going to say this is going to\ntake an\nevent\nreact. change event of HTML input\nelement this is going to be a function\nthat's going to set amount\nit's going to say\nconst new amount equals event. target.\nvalue whenever we change that value in\nthat field if if it's equal to nothing\nthen we're just going to say okay we're\ngoing to do nothing otherwise we're\ngoing to cast it as a\nnumber vent. target. value we're going\nto cast whatever is in there as a\nnumber and then we're going to do set\namount to this new amount what we could\ndo is we can even do a\nconsole.log new amount and now and we\ncan start using it right so if I go back\nhere I do one two three right you can\nsee it's console. logging every time I\nchange something in here so now we have\na way to actually get that amount with\nthis input now we're going to need to\nway to send that amount as part of our\nour stake right so we're going to first\nhave to call that approv function with\nthis amount and then we're goingon to\nhave to call from our token Farm then\nwe're gonna have to call the stake\nmethod so how do we get it to call this\napprov function here well to do these\nwe're actually going to make some new\nstate hooks that we're going to use in\nour staking form here we're going to\nmake State hooks for approving and for\nstaking and even for unstaking so back\nin our folder here we're going to create\na new folder called Hooks and this is\nwhere we're going to add\nsome different hooks first hook that\nwe're going to make is going to be\ncalled use use stake\ntokens. typ script and this is something\nthat we're going to import into our our\nstake form here so that we can actually\nstake some tokens and the way we want to\ndo it too is that once we hit stake once\nwe hit our stake button it kicks off the\napprove and then it actually right\nafterwards it kicks off a send it kicks\noff a stake token we want to run these\ntwo functions sequentially and we're\ngoing to make this use stake token hook\nclever enough to do it in that order so\nlet's do it hooks are basically just\nlike components except for they're more\nfunctionality wise so since we know\nwe're just like components we're going\nto do export const use stake tokens and\nthis is going to be a\nfunction just like our other components\nand as input we're going to take a token\naddress it's going to be a string and\ninside of this we're going to have some\nintelligent scripts to know if it's\nalready been approved if it's not\nalready been approved and what we need\nto do right we know we're going to need\nsome approv thing and we know we're\ngoing to need some stake tokens thing so\nlet's let's at least try to approach\nthis approv thing first before we get\ntoo creative right how do we approve\nthis transaction to get an approve we're\ngoing to need a couple things we're\ngoing to need the address as you guys\nknow we're probably going to need the\nAvi we're probably going to need the\nchain ID so we know which chain it's on\nso let's go ahead and let's grab those\nso we'll do con\nchain\nID equals use\nethers since we're using use ethers here\nwe're going to import this so we'll do\nimport use\nethers from at usep SLC\ncore we're also going to want the ABI of\nthe token farm so we'll do const ABI\nequals well where do we get this Abi\nfroma that's right we've imported it in\nour little chain info piece and it\nshould be right in here we could should\nbe able to do import token farm from\ndown a directory it'll be in chain info\nSLC\ncontracts toen farm. Json and now we can\nsay ABI is going to be equal to this\nthis token farm right because in token\nFarm we have an ABI key so we can just\nsubstract that away and just pull out\nthe ABI perfect we're going to need the\ntoken address of course we're also going\nto need our token Farm address and we\ncan find that the exact same way we\nfound it before const token Farm address\nit's going to be equal to depending on\nif the chain ID exists once again we're\ngoing to want to use that Network\nmapping so we can even go back to main.\nTSX see how we did it here for the DAP\ntoken address we can copy this as like a\nframe of\nreference we'll say if this chain ID\nexists we'll pull right from that\nNetwork mapping right we'll pull right\nfrom the network mapping so we got to\nimport that too which we can grab from\nimport Network\nmapping\nfrom chain infos chain info slash\ndeployments slash M.J\nso once again we're going to say if that\nchain ID exists in the netw mapping\nwe're going to use that string chain ID\nso we'll do\nstring chain\nID of the token\nfarm at position zero right because we\nobviously want the most recent one\notherwise again we'll do constants\ndo address\nZ since we're going to do that of course\nwe're going to have to do\nimport\nconstants\n[Music]\nfrom e3s and this hooks folder should be\nin source so let's just make sure that\nwe have hooks in Source here now we're\ngoing to want to interact with this\ntoken Farm address contract right we're\ngoing to want to run that approv\nfunction first we want to create like an\ninterface so we can do const token Farm\ninterface we'll say this equals new\nutils do interface with the ABI this\nutils we can again grab from the ether's\nproject or excuse me from uh from ethers\nso we'll do comma\nutils now we can create a token Farm\ninterface here and now that we have an\ninterface we'll create a contract so\nwe'll do const token Farm contract\nequals\nnew\ncontract and this will be a combination\nof this token Farm interface and the\ntoken Farm address actually it's address\nfirst and contract is something we can\ngrab from import contract from at ethers\nproject SL contracts all right you're\nprobably starting to follow along and\nfigure out okay cool I have a token Farm\ncontract now that we have a contract we\ncan actually call some functions which\nwe totally can but right we need to call\nthe approve first so let's get the token\ncontract before we even work with the\nstake token right so to work with the\ntoken we're going to want to do the same\nthing so we'll do const erc20\ninterface equals new utils do interface\ninterface this will be from\nec20 ABI which we should probably make\nfirst so we'll do const ec20\nABI equals we'll do it the same way we\ndid up here except for in setad of token\nFarm we'll do something else we'll do\nlook at our contracts here we'll do Mach\nerc20 instead and then we'll just call\nthis\nerc20 or yeah we'll just call this\nerc20 but we'll grab it from our Mach\nerc20 Json so now that we have this\nerc20 we do con erc20 ABI equals erc20\nAi and we can just pop this ABI to\ncreate our interface we'll Now do const\nerc20\ncontract equals new contract of token\naddress comma the erc20\ninterface boom okay now we have both of\nthese contracts we have the erc20\ncontract we have the token Farm contract\nnow we should be able to go ahead and\ncall some functions right now to\nactually send one of these we're going\nto use this thing called use contract\nfunction it's a hook in edep that\nreturns an object with two variables a\nstate and a send this state bit is used\nto represent the status of the\ntransaction and that's how we're\nactually going to automatically kick off\nthe stake after we approve to send a\ntransaction we have to actually have to\nwe actually have to use this send\nfunction here so we're going to use this\nuse contract function to get to get a\nstate and a send so that's what we're\ngoing to first need to do so we're going\nto do const send\nthen we're going to call this approve\nERC 20\nsend and state because this is what it's\nreturning it's returning send in a state\nwe're going to say state is going to be\napprove erc20\nState equals use contract function we\npass the token contract the erc20\ncontract comma the name of the function\nwhich is going to be approve then we do\na comma and then we we'll do a little\nobject here we'll call this transaction\nname and this will just be approve\nerc20\ntransfer then of course I have to import\nthis from used app this use contract\nfunction now oddly enough whoops I got\nrid of the closing tag here but great so\nnow in a weird way we actually have\nthese two new pieces here we have this\nsend function this approve erc20 send\nand this approve erc20 State this is\ngoing to be the status of our\ntransaction and this is going to be the\nactual function that we use and if we\nwant to call this approv function what\nwe can do is now we can return Calling\nthis approv function so we'll do const\napprove we'll have this be a function\nwe'll say it'll take a string amount as\nan input parameter and we'll just have\nit return this approve erc20 send and\nwe'll give it the token\nFarm contract\naddress as a first input parameter\nexcuse me token Farm address and we'll\nuse this input amount as the second\nparameter and then we'll just have this\nthis use stake tokens return this\napprove function and then also this\nstate here so it's going to return\napprove and it's going to return State\nwe could also just have return this if\nwe wanted but we're going to wrap it\njust all up in this approved thing here\nwe also probably want to return this\nstate right so we're going to turn this\ninto hook as well so we're going to do\nconst\nstate set\nState equals\noops use State and we'll have this be\nthe approved or the approved ERC 20\nState as the input and of course since\nwe're using use State we're going to\ngrab this from react as well we also\nwant to return the state so we'll return\nthis approve erc20 State here so now we\nhave a way to actually do all this so in\nour stake form what we're going to\nhave we're going to create a con that's\ngoing to grab those two variables so\nwe'll do const approve and approve erc20\nstate is going to be equal to\nuse stake\ntokens with that\ntoken address pull down from the token\nas the input\nparameter and this is our new hook so\nwe're going to\nimport use stake\ntokens\nfrom do slash do do hooks now that we\nhave these two functions we have the\napprov function and then we have the\nstate of that function now we can add a\nhandle submit functionality for our\nbutton here so now we can say okay on\nclick when we click this button we're\ngoing to do a\nhandle stake\nsubmit right because this is that our\nbig well it's not going to show up now\nbecause I broke everything but this is\nour big button right this is our this is\nour stake button so we're going to\ncreate this function called handle stake\nsubmit let's go ahead and do\nconst handle stake submit this will be a\nfunction and what it's going to do is\nwe'll get this amount here so we'll do\nconst amount uh which we're going to\nactually have to convert it from string\nto we so we'll call it amount as way we\ndo equals utils dop parse ether we'll\ngrab parse ether we'll grab\nutils again from ethers utils from\nethers and we'll do the amount to string\nso we're going to grab this amount this\nstate hook amount here we'll turn it\ninto a string and then what we can do is\nwe can return this approve\nfunction with this amount as way okay oh\nand then we're getting a fail to compile\nso in our hooks section we're just going\nto do an index. typescript and we're\ngoing to export this Ed stake so we'll\ndo\nexport use stake token\nfrom sluse Stak\ntokens close that we'll restart the\nserver then I should import this from\nthe right place and I should import this\nfrom the right place as\nwell and let's get rid of the brackets\nhere whoops sorry\nand let's do this as A2 string oops\nbecause you can't do a big number now\nlet's save it'll recompile pop into our\nfront end here we'll do a\nrefresh our stuff is up that's cool our\nstuff is getting logged out now if we\nhit stake we should call the approved\nfunction here metam Mass pops up we do\nget allow Local Host to spend your dep\nthis is amazing we're going to reject\nthis for now though because we're don't\nwant to bother testing it so amazing job\ngetting this far we're hitting a button\nmetamask is popping up and we're doing\nit we're we're actually sending a\ntransaction this is incredibly exciting\ngreat work so far let's keep going the\napprov function is working perfectly\nit's working as intended or we're just\nwe're kind of assuming it's working as\nintended but that's great this is\nperfect so now we got to go one step\nfurther we need to have this call stake\nafter it's been approved this is where\nwe're going to do a little something\ncalled use effect we can Import in here\njust do use effect\ncomma what use effect does it allows us\nto do something if some variable has\nchanged so the way that we're going to\ndo that is we're going to say okay use\neffect and it takes uh one of these\nfunctions as an input and then we'll do\na little comma here and similar to those\nState hooks we'll do an array of\ndifferent things we want to track and if\nanything in this array changes we'll\nkick off this use effect and we'll do\nsomething in here so one of these things\nthat we definitely want to uh track is\nthis approve erc20 state if approve\nerc20 state if this transaction comes\nback successful then we want to do some\nstuff so we'll say We'll track this this\nstate and we'll go ahead and say\nif approve erc20 state.\nstatus equals\nsuccess\nthen we're GNA go ahead and do like a\nstake function and to do a stake\nfunction we're going to follow this\nexact same methodology that we did for\nthe\napprove so first we're going to use this\nuse contract function thing so we'll do\nconst send is going to be\nstake send and then\nstate will be stake\nState this is going to be equal to again\nwe're going to use use contract\nfunction this is going to be on our\ntoken\nFarm contract this is going to be our\nstake tokens\nfunction and this will be transaction\nname it's just going to be stake\ntokens that's it so let's make this look\na little bit more readable here lovely\nso we have our little used contract bit\nhere and now this Stak send we can just\ncall this right in this approve ec20\nstate. status we just do Stak send and\nif we look back in our token Farm we do\nstake tokens we have an amount and a\ntoken address so that's what we're going\nto have to put in here we have to put\nsome amount and then token address will\njust be token address where do we\nactually get this amount from well when\nwe orig Ally called this approv function\nthis is when we should actually do it\nand you might be asking hey how come we\nwrapped this approve your C20 into a\nfunction here but we're not going to do\nthat here I'll tell you why in just a\nsecond so what we're going to have is\nwe're going to have a state hook for how\nmuch we want to actually stake so we'll\ndo const amount to\nstake and set amount to stake is going\nto be equal to use state and we're going\nto start with zero we're just going to\nget this defaulted right to zero and\nwhat we're going to do actually is once\nwe call this approv function the first\ntime we're going to set amount to stake\nto be this amount and what we should do\ninstead of calling this a prove is we\nshould call this\nprove and stake since it's this function\nthat's going to kick off yes it's going\nto kick off our approve\nerc20 but it's also going to change\nthe amount that we're going to stake and\nlater on once the transaction succeeds\nit will also then kick off our stake\nsent or our staking function so we're\ngoing to change this to appr proven\nstake that means below we have to\nactually return appr proven stake and\nnot just approve and for stake send the\namount is going to be this amount to\nstake which we got from our original\napprove and stake and then we just have\nto change this to approve and stake\nwe'll change this from approve to\napprove and stake and realistically\nthat's all we really need to do here so\nif we save we go back to our front end\nlet's go to one of these that I actually\nhave some of I'll type in one for in\nhere I'll hit the stake button and what\nshould happen is approval come up I'll\nconfirm and once this actually confirms\nthen I'll be able to another transaction\nshould pop up telling us to actually\nstake and that's exactly what happens\nhere so we've approved now we can stake\nwe'll even watch menam Mas really really\nquick here I'm doing this on Coen right\nI just called this stake tokens function\nfor those of you doing this on ganach\nwould be a lot quicker but perfect that\nwas fantastic our balance even got\ndeducted by one now we have one of these\ntokens actually staked and this is\nfantastic however uh there's obviously a\ncouple issues here right what was\nhappening during that that whole section\nright there was there was no indication\nfor us of what was really going on we\nhad no notifications we're totally left\nin the dark here additionally uh this\npage still looks disgusting so we want\nto clean this up we want to make this\nlook a lot nicer so how can we actually\ndo this so for switching between these\nwe want to actually just change our use\neffect here so we do want to check this\napproved erc20 state but we also wanted\nto see if we switch the token address we\nwant to just check to see if approve\nvc20 is done if we switch our token\naddress and we also want to just check\nto see this if amount to stake actually\nchanges so if we do amount to stake we\nwant to check kind of during all these\nthese three if any of these three\nchanges we'll just do a quick check hey\nis approve erc20 done if yes great then\nwe'll we'll stake some tokens so this is\ngreat but we're going to want to get\nsome notifications that these\ntransactions are going through these\ntransactions are pending uh and these\ntransactions finished so how do we\nactually add those pieces to this well\nused app has this thing called use\nnotifications this notifications bit\nwill help us actually get notified on\nwhether or not our transactions are\ncompleting so to use these notifications\nwe're going to do a couple of different\nthings in here first all the way back in\nour app. TSX we're actually going to\nchange our config here we're going to\nadd some\nnotifications in here to check\nperiodically if our things are done and\nthere's a couple of different parameters\nthere's a\nxation period and then we'll set it to\nbe 1,000 this is in milliseconds so\nwe'll set it to be a th which is just 1\nsecond and we'll do a check interval\nalso of 1,000 so basically we're saying\nhey every second check the blockchain on\nour transactions that we send please\nthank you and now that we have this\nnotifications bit identified in our\nstaking form we can add this bit so from\nedep De core we'll do comma use\nnotifications and now we can actually\nstart using some of these notifications\nso right here at the top we'll do\nconst\nnotifications equals use\nnotifications we can actually start\nworking with some of these notifications\nnow we're going to want to see if\nanything in any of these notifications\nactually change and if these\nnotifications change we're going to want\nto do something so since we're going to\nwant to check to see if this if\nnotification changes those of you who\nhave been following along with what I've\nbeen explaining for use effect you know\nthat means we're going to want to use a\nuse effect we're going to say use effect\nit's going to be this function and if we\ndon't have it imported let's go ahead\nand import this from react this use\neffect we're going to be looking to see\nif these notifications change we're\ngoing to be looking to see if our\ntransaction has completed so in our\nlittle watching array here we're going\nto say let's watch the notif ifications\nhere let's make sure if any of those\nnotifications changes if anything on our\nmetamask changes we're going to want to\ndo something right so we're going to say\nif there are any notifications that are\napprov erc20 or transaction succeeded we\nwant to show hey you know good job it's\nbeen approved so to do this we're going\nto say if\nnotifications.\nfilter this is going to be a function\nbased off the\nnotification on this notification we're\ngoing to say\nnotification. type it's going to be\ntransaction. succeeded succeed and that\nnotification. transaction name then this\nis why we needed to give them names\nbefore in our use\nState it's going to be approve erc20\ntransfer. length\nis greater than zero then we're going to\ndo some stuff your transaction succeed\nso we're saying if in these\nnotifications we're going to filter on a\nnotification if the type is transaction\nsucceeded and the name is approve erc20\ntransfer then we're going to do some\nstuff and for now we're just going to do\nconsole.log approved we can also then do\nthe same thing for if\nnotifications. filter\nfter on the\nnotification\nnotification. type if that notification.\ntype is going to be again that\ntransaction\nsucceed\nand\nnotification. transaction name equals\nstake tokens capital\nT stake tokens and there are more than\none. length is greater than zero\nthen we'll do\nconsole.log tokens staked Okay so we've\ngot some notifications put in we're\ngoing to do a little console logging\nlet's see if our use effect stuff is\nactually going to work so let's go to\nour front end we'll do a quick refresh\nwe go to where we have some tokens I'm\ngoing to type one in here I'm going to\nhit\nstake going to hit\nconfirm and we're going to wait a little\nbit and if this confirms correctly then\nwe're going to see a little console.log\nprint out that says approved and we do\nindeed and that's perfect minim Mass\npops up again for our stake tokens we\nhit approve there as well and we should\nsee a little console. log out here for\nStak token Stak and we do perfect so now\nwe have a way to actually track some of\nthese notifications and track what\nactually happens on the blockchain\nconsole. logging stuff is great but we\nwant to actually see it in our UI here\nwhat we're going to want to do is show a\nlittle waiting thing here while we're\nwaiting for it to be approved and then\nshe'll pop up when it actually does get\napproved we can add a little constant\ncalled is\nmining which will be based off of\nwhether or not the transactions are\napproved so we'll do const is\nMining and this will be equal to the\nstate of these transactions so this\nshould actually instead be approve erc20\nit should be approve and stake erc20\nState now say oops now we'll say is\nmining will be equal to approve and\nstake erc20 state. status equals equals\nequals mining should probably have it\nlook like this then back in our use\nstake instead of approve ec20 I'm going\nto change this to approve and stake ec20\nState and then we're also going to\nreturn prove and stake erc20 stake let's\nmake this make a little bit more sense\nhere get that little red line to go away\nand now what we can do with this is\nmining thing is we can add this to our\nbutton now we have this is mining thing\nit's going to be based off of whether or\nnot approve and stake are done so we can\nscroll down to our button and we can add\na little disabled flag so we'll say\ndisabled\nequals and it'll be equal to dependent\non whether or not it it's done we'll\njust add Is\nMining and if this is true then disabled\nwill be true and this isn't mining then\nthis will be false we can also add this\nto be kind of like a little loading\nthing so instead of just saying stake\nall the time we'll do a tertiary\noperator we'll say if it is mining then\nwe'll do like a little loading thing\nmaterial UI has this thing called\ncircular progress that we can use it's\nlike a little loading thing so we can do\nif it is mining we'll do a circular\nprogress say the size is 26 or whatever\nwe want it to be\nwe'll close the tagout and if it's not\nmining again we'll do this stake with a\nbunch of exclamation marks here so now\nif we save that go to our front end\nlooks like I need to fix something can't\nfind name approve erc20 State that's\nbecause we changed it this is now appr\nproven stake year 220 state so let's\nchange it to that now let's save go back\nto the front end and okay cool let's go\nto one of these that we have some stuff\nwith we have a little dial we'll do one\nhere we'll hit hit stake and if we did\nthis right this should show a little\nloading thing while the transaction is\ngoing through so we're going to hit\napprove and perfect we do see a little\nloading thing and it should stay like\nthis until the transaction finishes this\nis a good way to indicate to the user\nthat we've actually approved now I'll\nhit confirm for staking so we didn't\nactually see the loading thing go back\nup again so this probably means that we\ndidn't actually reload this is mining\ncorrectly\nah and the reason we don't see the\nlittle spinny thing is because this appr\nproven stake erc20 state is really only\ntracking the approve right we have our\ncost appr proven stake which does all\nthis good stuff here but our staking\npart this stake State we actually never\nuse right and we need to pass this back\nto our our stake form so it can actually\nknow you know what's going on so what we\ncan do is we can add a new state hook\nwe'll do const we'll just call this one\nstate then we'll do set state it's going\nto be equal to use\nState and this will be that uh approve\nin stake erc20 State we'll start it off\nthere and this will represent kind of\nthe overall state right for this will be\nthe true appr proven stake erc20 State\nwhat we're going to do now is we're\ngoing to have to track those both of\nthose States we're going to have to\ntrack both the approving and the staking\nso we're going to do use effect and\nwe're going to track both of those with\nour little our little wonderful uh use\neffect stuff so we're going to track\nthem with by doing of course proven\nstake here C2 State and then stake state\nso if either one of these change now\nwe're going to want to change this\noverall State function and that is going\nto get pushed back to our our stake form\nhere so what we're going to say is we're\ngoing to say if proven stake erc20\nstate.\nstatus equals equals\nequals\nsuccess then we're going to set state to\nbe the uh stake State\notherwise we're going to set this\noverall State we're going to do set\nstate to be this approve and stake bit\nor just or really just kind of approve\nhere now we're going to pass this just\nkind of overall State variable here to\nour front end like this excuse me to our\nstake form and in our stake form we're\njust going to say we're just going to\nmap this state variable to The Proven\nstake herec 20 State save here that\nshould work perfectly right now if we go\nback to our front\nwe'll go to die or whatever we'll do one\nwe'll hit stake metam mous will pop up\nwe'll confirm we do indeed get this\nlittle loading thing which is perfect\nonce it's done once it's approved we'll\nconfirm again and we get loading again\nand this is perfect this is exactly what\nwe want because now the user has a good\nidea ah okay I need to wait right the\ntransaction is going through the\ntransaction is being built and once it's\ndone it's all set so this is fantastic\nwe now have basically all the\nfunctionality for staking right we have\na proove we have it doing some waiting\nwe have it actually staking let's clean\nthis up a little bit right let's make\nthis look a little bit nicer so first\nwe're going to go to index.css we're\ngoing to we're going to add some bits in\nhere for a body we're just going to do\nbackground color we're going to set this\nto in set of background\ncolor\nto hsl we'll do 227 comma\n61% comma 26% there's a whole bunch of\nis the background color doesn't really\nmatter but we'll save we'll refresh our\nfront end and we'll get a nice little\nbackground color here which is cool but\nlet's actually be even more creative\nthan just this let's do a nice little\nlinear gradient in here we'll just get\nrid of this actually we'll do background\ndo\nlinear\ngradient do\n135 here do hsl\n227 61%\ncomma\n13% then we'll do hsl 227\n61%\n26% we'll do one more we'll do hsl again\nthis would be 227\n61% 39% for some colors in here\nsemicolon there let's look at our front\nand ah okay we're getting somewhere we\ngot some cool double gradients going on\nin here we'll go to our main section\nhere and we'll do that Ed Styles bits\nagain so right in our looks like we\ndon't have any material UI in here so\nwe'll do a little import make\nstyles from at material- ui-\ncore right at the top we'll do const use\nStyles equals make\nStyles some theme which we're ignoring\nnice little function thing here it's\nthen for our titles in here we'll do a\nlittle make the color be theme. pallet.\ncommon. white which again we're ignoring\ntheme but if we did have a theme we\nwould do like that we'll do text align\nCenter do some padding theme. spacing\nfor and in our main of course we'll just\nadd this in here const classes equals\nuse Styles and then we'll just put like\na\nlittle little section in here do an\nH2 or class name it's going to be equal\nto classes. tile and we'll just call\nthis dap\ntoken app we'll go back to the front end\nwe got like a nice little da token dap\ntoken app nice white right at the top\nthat looks good we'll go to our your\nwallet component We'll add some Styles\nin here looks like we don't have any\nStyles in here so we'll do the same\nthing we'll\ngrab make Styles in here do a little H\nuse Styles equals make\nStyles theme that we're going to\nignore some fun little function syntax\nstuff here we say tab\ncontent give this some styling we'll say\nall the tab content stuff we'll have\ndisplay of\nflex Flex\ndirect shun will be\ncolumn align items the\ncenter and we'll do a gap for this which\nwill be theme. spacing of four give our\nboxes some stuff so we'll say\nbox we\nsay background color is going to be\nwhite say\nborder radius is going to be 25 PX to\ngive it some roundness here then we'll\nalso do a\nheader which we'll just do color of\nwhite we're going to grab tab content\nscroll down this is going to be inside\nthis little tab panel bit here this div\nit's going to have class name\nequals\nclasses. tab\ncontent oops we got to add classes in\nhere before the\nreturn do cons classes equals that use\nStyles say this box well it's not we're\nnot going to do the overarching Box this\ncould actually just be this if we wanted\nto we'll just say it's this first box so\nthis will be class\nname equals classes.\nboox and then our H1 is going to be\nclass name equals classes.\nheader let's save it and let's take a\nlook\nwho this is already starting to look a\nlot better now as you guys can kind of\nsee the functionality is really the\nimportant part behind the application\nand doing a lot of this ED Style stuff\nis what's really going to make it uh\nlook a lot prettier right so if you're\nlike Hey how do I do this pretty stuff\nnow I know I didn't really explain what\nany of this pretty prettiness was doing\num there's a ton of tutorials on doing\nCSS that's basically what this is that\nyou guys can learn a little bit more to\nmake your stuff look pretty now it looks\nlike for the most part we have\neverything that we need to stake I know\nwe have the spinning wheel which is\ngreat but let's also add a little bit of\nan alert at the bottom to say hey your\ntransaction has gone through\nsuccessfully so what we're going to do\nis we're going to pop it over to our\nstake form we're going to wrap our input\nand our button into their own little div\nhere right and that is going to put a\nlittle bit of space actually between our\nlittle component here and some other\nstuff which is kind of nice but what\nwe're going to do is the reason that\nwe're doing this is so that we can add\nsome alerts this section down here is\nwhere we're going to add uh some\nalerting to do that we're going to use\nwhat's called a snack bar and alerts\nfrom Material UI you can look at both of\nthese in the documentation provides a\nbrief message about app processes and\nsomething like this like we're just\ngoing to say hey you did it transaction\nhas come through so what we're going to\ndo is we're going to import snack bar\nfrom material ui/ so we're going to do\ncomma snack bar we're also going to\nimport alerting like a little alert box\nimport alert from at\nMaterial ui- laab alert and what this is\ngoing to do is it's also going to make\nthese alerts basically down below our\nbutton and our input we're going to do a\nlittle little snack bar in here snack\nbar and we're going to say this is going\nto open when we want to show that the\nerc20 is done which we're not exactly\nsure how to do that quite yet we'll have\nit autohide\nautohide duration is going to be equal\nto about 5 seconds or 5,000 milliseconds\nand then on close we're also going to do\nsome stuff inside this little snack bar\nyes and I know we haven't filled this\nout yet actually let's just do this for\nnow have blanks for now inside this\nsnack bar we're going to have some\nalerts\nor we say on close we're also going to\ndo some stuff severity is going to be\nsuccess and this alert is what's going\nto have our text in here so we'll say\nERC 20 token transfer approved now\napprove the second\ntransaction and we're going to have two\nof these little snack bars one is going\nto be for the\nerc20 and one is going to be for staking\ntoken so we're going to call this\none token\nstaked or excuse me tokens staked now we\nneed to Define when these open and also\nwhen they close and and what to do when\nthey close so this erc20 thing should\npop up when erc20 has been approved so\nwe're going to want to create some\nvariable that's going to track whether\nor not it's actually been approved so\nwe'll create another state hook here do\nconst show\nerc20 approval success comma set show\nerc20 approval success it's going to be\nequal to UST State and we're going to\nstart with false right we don't want to\nshow this thing right away and then\nwe're going to want to do the same thing\nfor staking tokens so we'll do const\nshow\nstake token success then set set stake\ntoken success and this will be also use\nState and we will start this out with\nfalse and what we're going to do is\nright now we're doing this console.log\nin here right and this is cute but we\nwant to actually turn this into uh\nchanging show erc20 approval success\nright so when this actually goes through\nwhen notification says hey it's been\napproved we want to say okay great show\nthat approval status so instead of doing\nconsole. log here we're going to say set\nshow your\nC20\napproval success to true and then we're\nalso going to set show stake token\nsuccess token\nsuccess to\nfalse hopefully I'm spelling this right\nset\nshow stake token success and let's\nthat spelled right great and then we're\ngoing to do the same thing but the\nopposite for staking token so get rid of\nconstant. log we'll do set show erc20\napproval success to false and set show\nstake erc2 to true now we'll say the ERC\n21 is going to open and now we can also\nhave these notifications thing\ntrack these two these ever change will\nalso run through this so we'll grab both\nof these in here so this use effect will\nnow track these as well and we'll say\nshow erc20 approval status we'll open up\nthe erc20\nalert and then the show stake token\nsuccess will open up the stake tokens\nalert and then for both of these We'll\nadd a new function called handle close\nsnack which we'll just close it\nout and turn those variables that we\njust made to false so we'll do\nconst handle close\nsnack this will be a function and we'll\njust say set show erc20 approval status\nto false and then set show stake token\njust going to copy paste it uh this one\nalso two false awesome now if we go back\nrefresh our front ends here looks like I\nforgot to do an on close ah okay yep\nwe'll do hand handle along close snack\nhere for the alerts as well and there\nare no tags there there are no brackets\nthere so I got to change that but now we\ngo to our front end we'll do a quick\nrefresh we see everything in here\nlooking great let's add one in here\nwe'll hit stake this will pop up we'll\nconfirm we'll get the little progress\nbar which is exactly what we want and\nyou see here now we get this little\npopup it says erc20 token transfer\napproved now approve the second trans\ntransaction this should uh go away after\na few seconds or\nnot let's just approve the second one oh\nlooks like it now went away so maybe it\nwas a little bit longer than 5 seconds\nand now we see the token stake popped up\nperfect so we have some popups we have a\nlittle bit of ways to show the user how\nto do everything now now you'll notice\nthis doesn't look exactly like what we\nsee in the GitHub repo right and this\nGitHub repo looks a little bit different\nit's got this little slidy bar it's got\nthis second token Farm contract for\nstaking however a lot of what we're\ngoing to keep doing is just going to be\na lot of more front-end stuff and at\nthis point you pretty much should have\neverything that you need to build the\nrest of the contract so what we're going\nto do is we're going to have the rest of\nthis be a challenge if you want it if\nyou would like to complete it you can\nabsolutely add this second token farb\ncontract with this unstake all we bit or\nunstake all FAU dep Etc we're going to\nhave two versions of this front end in\nhere we're going to have this more\ncleaned up version and then we're going\nto have a little bit more raw version\nthis one's the the more raw version all\nthe code is going to be there so if you\nwant to say ah I don't really want to\ncode and follow this along you can just\ncopy paste the code or you can say you\nknow what I'm going to do this unstaking\npart all myself and that would be\nawesome also fantastic you should be\nincredibly proud of yourself because at\nthe end of the day at this point you\nhave a way to stake tokens into a smart\ncontract and build a front end which is\nabsolutely massive absolutely fantastic\nyou should be patting yourself from the\nback excellent job excellent job let's\ngo ahead and wrap this course up welcome\nback friends how do you feel good\nsmarter empowered ready to Take On The\nWorld excellent well you absolutely 100%\nshould be and you deserve a massive\nRound of Applause because you have just\ndone something fantastic you have\nstarted your journey and equipped\nyourself with the tools to become an\nincredibly powerful intelligent\nsmart contract engineer in this space\nnow I would be remiss if I didn't\ncomment on security and audits when it\ncomes to doing your smart contracts as\nyou know all these smart contracts are\navailable on chain for anybody to see\nand anybody to work with this means that\nhaving a security mindset is incredibly\nincredibly important and I highly\nrecommend if you're going to go main it\nif you're going to take your application\nonto a real Network where it's going to\nbe securing a lot of people's money and\na lot of people's assets you absolutely\nneed to get an audit there is no excuse\nfor not getting an audit and having an\napplication that's securing a lot of\npeople's money getting an audit is\nessentially just having somebody else\npeer-review your code looking for any\nvulnerabilities that could be exploited\nin audit can be the difference between\nyour protocol skyrocketing into the\nfuture and doing fantastically\nsuccessfully or dwindling getting hacked\nand everyone losing faith in your\nabilities audits are essential we've got\nsome help helpful links in the GitHub\nrepository associated with this course\nto learn more about audits who to get\nthem from and some helpful tips on\nsetting your smart contracts up to make\nAuditors lives easier while we're\ntalking about security it's also helpful\nto know some of the most common attacks\nin this space we've got another\nwonderful Link in the GitHub repository\nthat will show you some of these attacks\nand how to get around them and what they\nactually look like two of them that are\nbig enough that I think I need to\nmention here are going to be Oracle\nattacks and re-entrancy attacks these\nthese are the two attacks that I see\nhappen most often unfortunately right\nnow in the state of defi protocols get\nhacked for millions of dollars literally\nalmost every day and it is a travesty to\nthe space that this is happening most of\nthe time these attacks are preventable\nso understanding some of these security\ntips doing your due diligence and\ngetting an audit is going to make both\nyou as a smart contract developer and as\na Dap developer and as a protocol better\nbut also the entire space is going to be\nmore safe secure and easier for\nnewcomers to get into thankfully you can\nsleep a lot easier on those Oracle\nmanipulation attacks because you've\nlearned some best practices for working\nwith oracles you've learned how to work\nwith a chain link decentralized Oracle\nNetwork to get your data and do your\nexternal computation using a chain link\ndecentralized Oracle Network or a dawn\nwill solve these Oracle manipulation\nattacks so that you don't have to deal\nwith people manipulating a centralized\nOracle because you are going to be using\na decentralized one reinsurance attacks\nare a little bit trickier to detect but\nwhenever you call an external smart\ncontract a smart contract outside your\nproject you especially should think H\ndoes somebody in that smart contract\nhave access to changing some variables\nthat I don't want them to change again\nwe have some wonderful examples in that\nGitHub repository associated with this\ncourse to teach you more about that\nadditionally I highly recommend\neverybody check out both ethernut and\nDam vulnerable defi these are two games\nthat show you some of the exploits and\nsome of the low-level solidity things\nyou can do that you might want to look\nout for when you're writing your smart\ncontracts all right so now that we've\ngot the security piece out of the way\nonce again huge congratulations for\ngetting this far you now have the tools\nto Build a Better World to build these\nsmart contract applications and to\nempower yourself and your community with\nthese blockchain applications now the\nfirst question you might be asking is\nPatrick this is great but where do I go\nnow what do I do I have all these tools\nI want to go use them after absolutely\nmy first bit of advice here is going to\nsay you can always learn more and\nthere's always going to be more places\nto learn and grow and even though this\ncourse gave you a full setup of\neverything that you're going to need to\nget going and Get Off to the Races and\nstart building it's good to know where\nelse you can learn more and where else\nyou can grow some amazing places are\ngoing to be crypto zombies dap\nUniversity Ivan on Tech chain shot eat\nthe blocks Patrick Collins my YouTube\nChannel Austin Griffith's YouTube\nchannel Nat's YouTube channel the\nethereum.org website chain link blogs\nand really any other material you can\nget your hands on while you're learning\nyou should 100% be growing with the\ncommunity this is something that I've\nbeen pushing from the start blockchain\nand smart contract world is different\nfrom these corporate worlds we are a\ndecentralized open-source group open\nsource open sourced ecosystem where we\nflourish if the people around us\nflourish so growing and connecting with\nthe community is a absolute must and is\na and it's a way to really accelerate\nall the momentum that you're getting\nafter taking this course Twitter the eev\nrdit brownie Discord the ethereum\nDiscord the chain link Discord there are\nall these discords and all these\ncommunities that you can jump in you can\ngrow ask questions chat spread ideas\nthen once you're in these communities\nthen you can start really coding and\ntinkering more hackathons are some of\nthe best places to put your stuff to the\ntest and also really learn and build and\ngrow in the blockchain space there are\nhackathons happening all the time and\nthese are places where you can show up\nyou can learn from some of the sponsors\nyou can build really cool things and you\ncan win prizes as well we've seen some\nprojects win a hackathon go on to raise\nmillions in seed funding and become a\nbillion doll protocol some have gotten\nadvisors from top investors like Mark\ncubin and these projects do wildly\nsuccessful but at the same time we also\nsee a huge uptick and a huge number of\nthe newcomers in this space people have\nnever written a smart contract never\nwritten any of the code come in try\nlearn grow and come out an incredibly\npowerful engineer with more networking\nand with more more people around them\nwho they know they can lean on and talk\nto in this community so whether or not\nyou want to win a hackathon doesn't\nreally matter hackathons are a great\nplace to sharpen your coding skills get\nbetter meet some people maybe win some\nprizes and a lot of these decentralized\nprojects do look at the hackathon\nwinners looking for some talent to pick\nup for their teams a lot of the\nengineers that I work with right now I\nwork with them because they got picked\nup from a hackathon so hackathons are\ngreat places to go eth Global eth India\neth Global eth India and the chain link\nhackathon are some of the best\nhackathons in the business so be sure to\ncheck those out all these decentralized\nprotocols have a ton of work that people\ncan be doing to help grow their protocol\nin some way and they all have Community\nGrant projects where people can come in\npropose some Grant propose something to\nthe community and that person builds it\nout so if you have an idea on how to\nimprove one of these decentralized\napplications you can go ahead propose\nwhat you want to improve and if you get\napproved you could be awarded a grant to\nwork on that as well you could become a\nsmart contract consultant here you can\nstart offering your services to people\nwho are looking for really strong\nsolidity and smart contract developers\nyou can start reaching out to some of\nthese projects now that you have these\nskills you can start reaching out to\nother people saying hey I've got a great\nidea of something I want to build and\nI'm looking to take it to the next level\nand that's the most important piece of\nadvice I have for you here just build\njust have a good time and build things\nthat you enjoy building you'll learn the\nmost the fastest by building tinkering\nand trying new things things and this is\nalso one of the best ways to meet people\nin the industry everybody that I work\nwith in my life in this space I work\nwith them because I was building\nsomething and we became close because we\nwere working on the same things I feel\nincredibly lucky to have met and\ninteract with so many Fantastic people\nin this space and I hope that one day\nI'll get to meet and interact with you\ntoo so good luck to you all and let's\nrebuild this world let's make a world\nwhere there's more Economic Opportunity\nthere's more equality and let's rebuild\nsome of this institutional trust while\nhaving an absolute blast in this wild\nwest that is cryptocurrency smart\ncontracts and blockchain like I said I\nhope to meet you all one day and just do\nme a favor and make today an amazing day\ntake care everybody\n",
  "words": [
    "hello",
    "everybody",
    "welcome",
    "free",
    "code",
    "camp",
    "blockchain",
    "solidity",
    "beginner",
    "expert",
    "full",
    "course",
    "python",
    "edition",
    "going",
    "go",
    "everything",
    "need",
    "know",
    "developing",
    "blockchain",
    "using",
    "solidity",
    "engaging",
    "future",
    "finance",
    "going",
    "cover",
    "topics",
    "teach",
    "skills",
    "need",
    "become",
    "smart",
    "contract",
    "expert",
    "take",
    "matter",
    "blockchain",
    "developing",
    "blockchain",
    "engineers",
    "extreme",
    "demand",
    "building",
    "billion",
    "dooll",
    "applications",
    "almost",
    "every",
    "day",
    "point",
    "time",
    "filming",
    "protocols",
    "like",
    "ur",
    "finance",
    "synthetics",
    "billions",
    "dollars",
    "locked",
    "value",
    "allowing",
    "people",
    "engage",
    "decentralized",
    "finance",
    "defi",
    "allows",
    "people",
    "make",
    "censorship",
    "resistant",
    "moves",
    "much",
    "protocols",
    "billions",
    "dollars",
    "even",
    "less",
    "year",
    "old",
    "whether",
    "brand",
    "new",
    "space",
    "hi",
    "name",
    "patrick",
    "collins",
    "live",
    "smart",
    "contract",
    "world",
    "taking",
    "journey",
    "becoming",
    "blockchain",
    "smart",
    "contract",
    "expert",
    "little",
    "bit",
    "background",
    "engineer",
    "developer",
    "advocate",
    "chain",
    "link",
    "protocol",
    "also",
    "blockchain",
    "infrastructure",
    "company",
    "called",
    "alpha",
    "chain",
    "run",
    "different",
    "nodes",
    "different",
    "infrastructure",
    "blockchains",
    "including",
    "one",
    "main",
    "technologies",
    "going",
    "talking",
    "today",
    "ethereum",
    "love",
    "pioneer",
    "smart",
    "contract",
    "ecosystem",
    "love",
    "taking",
    "new",
    "users",
    "like",
    "along",
    "journey",
    "us",
    "going",
    "teach",
    "become",
    "smart",
    "contract",
    "expert",
    "building",
    "blockchain",
    "solidity",
    "applications",
    "building",
    "world",
    "trust",
    "accountability",
    "means",
    "building",
    "financially",
    "free",
    "future",
    "get",
    "ones",
    "go",
    "history",
    "books",
    "pioneers",
    "space",
    "additionally",
    "blockchain",
    "smart",
    "contract",
    "engineering",
    "skills",
    "sought",
    "world",
    "average",
    "salary",
    "solidity",
    "developer",
    "150",
    "video",
    "going",
    "teach",
    "become",
    "one",
    "developers",
    "go",
    "world",
    "participate",
    "world",
    "smart",
    "contracts",
    "world",
    "blockchain",
    "course",
    "ideally",
    "engineers",
    "know",
    "little",
    "bit",
    "python",
    "programming",
    "level",
    "smart",
    "contract",
    "engineering",
    "whether",
    "complete",
    "beginner",
    "blockchains",
    "even",
    "know",
    "one",
    "advanced",
    "solidity",
    "engineer",
    "looking",
    "learn",
    "perfect",
    "place",
    "little",
    "bit",
    "experience",
    "objectoriented",
    "programming",
    "language",
    "like",
    "javascript",
    "well",
    "helpful",
    "brand",
    "new",
    "coding",
    "general",
    "right",
    "going",
    "take",
    "step",
    "step",
    "everything",
    "want",
    "little",
    "bit",
    "python",
    "coding",
    "video",
    "fantastic",
    "free",
    "code",
    "camp",
    "video",
    "description",
    "prefer",
    "javascript",
    "also",
    "releasing",
    "javascript",
    "edition",
    "video",
    "well",
    "everything",
    "learn",
    "applicable",
    "watch",
    "learn",
    "even",
    "find",
    "entire",
    "itinerary",
    "entire",
    "course",
    "along",
    "code",
    "associated",
    "everything",
    "additionally",
    "discussions",
    "support",
    "everything",
    "else",
    "smart",
    "contract",
    "kit",
    "full",
    "blockchain",
    "solidity",
    "course",
    "pi",
    "github",
    "repository",
    "table",
    "contents",
    "entire",
    "itinerary",
    "everything",
    "going",
    "go",
    "course",
    "like",
    "said",
    "helpful",
    "tips",
    "resources",
    "getting",
    "support",
    "resources",
    "getting",
    "help",
    "convenience",
    "every",
    "single",
    "piece",
    "code",
    "going",
    "go",
    "video",
    "github",
    "repository",
    "associated",
    "sure",
    "grab",
    "link",
    "description",
    "grab",
    "github",
    "repository",
    "look",
    "different",
    "repos",
    "going",
    "give",
    "ever",
    "get",
    "lost",
    "need",
    "refer",
    "code",
    "want",
    "copy",
    "paste",
    "code",
    "also",
    "great",
    "place",
    "reference",
    "future",
    "working",
    "project",
    "want",
    "remember",
    "something",
    "sure",
    "start",
    "refer",
    "back",
    "watch",
    "video",
    "let",
    "talk",
    "little",
    "bit",
    "best",
    "practices",
    "watching",
    "video",
    "space",
    "moves",
    "really",
    "quickly",
    "show",
    "documentation",
    "might",
    "good",
    "idea",
    "open",
    "documentation",
    "well",
    "read",
    "stay",
    "speed",
    "packed",
    "ton",
    "information",
    "video",
    "studies",
    "shown",
    "try",
    "digest",
    "massive",
    "amount",
    "information",
    "short",
    "period",
    "time",
    "retention",
    "good",
    "highly",
    "recommended",
    "every",
    "25",
    "minutes",
    "half",
    "hour",
    "take",
    "5",
    "minute",
    "break",
    "every",
    "two",
    "hours",
    "maybe",
    "take",
    "additional",
    "30",
    "minute",
    "hour",
    "long",
    "break",
    "pause",
    "bookmark",
    "areas",
    "come",
    "back",
    "later",
    "learn",
    "speed",
    "time",
    "stamps",
    "description",
    "help",
    "come",
    "back",
    "left",
    "even",
    "go",
    "order",
    "want",
    "bounce",
    "around",
    "topic",
    "topic",
    "absolutely",
    "free",
    "also",
    "going",
    "get",
    "really",
    "technical",
    "fundamentals",
    "blockchain",
    "want",
    "jump",
    "right",
    "solidity",
    "jump",
    "time",
    "stamps",
    "get",
    "right",
    "watching",
    "youtube",
    "adjust",
    "speed",
    "talk",
    "give",
    "presentation",
    "talking",
    "way",
    "quickly",
    "slow",
    "talking",
    "slowly",
    "speed",
    "sure",
    "set",
    "pace",
    "like",
    "best",
    "highly",
    "encouraged",
    "pause",
    "come",
    "back",
    "ask",
    "questions",
    "blockchain",
    "smart",
    "contract",
    "world",
    "collaborative",
    "community",
    "questions",
    "best",
    "places",
    "go",
    "going",
    "stack",
    "overflow",
    "tagging",
    "question",
    "specific",
    "technologies",
    "working",
    "make",
    "issue",
    "github",
    "repo",
    "working",
    "go",
    "stack",
    "exchange",
    "eth",
    "make",
    "question",
    "well",
    "jump",
    "discord",
    "technology",
    "working",
    "even",
    "github",
    "discussions",
    "learning",
    "become",
    "blockchain",
    "solidity",
    "engineer",
    "actually",
    "lot",
    "learning",
    "solidity",
    "becoming",
    "comfortable",
    "tools",
    "space",
    "going",
    "essential",
    "becoming",
    "familiar",
    "solidity",
    "continuing",
    "conversation",
    "maybe",
    "twitter",
    "reddit",
    "channels",
    "maybe",
    "even",
    "showing",
    "stuff",
    "next",
    "ethereum",
    "chain",
    "link",
    "hackathon",
    "going",
    "majorly",
    "beneficial",
    "increasing",
    "skill",
    "engineer",
    "get",
    "actually",
    "coding",
    "lot",
    "people",
    "want",
    "understand",
    "actually",
    "happening",
    "blockchain",
    "stuff",
    "blockch",
    "smart",
    "contract",
    "get",
    "started",
    "understanding",
    "core",
    "fundamentals",
    "actually",
    "shape",
    "way",
    "code",
    "architect",
    "smart",
    "contract",
    "applications",
    "learning",
    "really",
    "really",
    "critical",
    "however",
    "already",
    "familiar",
    "blockchain",
    "want",
    "jump",
    "solidity",
    "feel",
    "free",
    "grab",
    "timestamp",
    "description",
    "jump",
    "section",
    "since",
    "though",
    "probably",
    "heard",
    "bitcoin",
    "bitcoin",
    "one",
    "first",
    "protocols",
    "use",
    "revolutionary",
    "technology",
    "called",
    "blockchain",
    "bitcoin",
    "white",
    "paper",
    "released",
    "pseudo",
    "anonymous",
    "satoshi",
    "nakamoto",
    "outlined",
    "bitcoin",
    "could",
    "used",
    "make",
    "transactions",
    "decentralized",
    "network",
    "network",
    "powered",
    "cryptography",
    "allows",
    "people",
    "engage",
    "censorship",
    "resistant",
    "finance",
    "decentralized",
    "manner",
    "due",
    "features",
    "bitcoin",
    "lot",
    "people",
    "took",
    "superior",
    "store",
    "value",
    "another",
    "asset",
    "like",
    "let",
    "say",
    "gold",
    "commonly",
    "referred",
    "digital",
    "gold",
    "similar",
    "gold",
    "scarce",
    "set",
    "amount",
    "planet",
    "people",
    "use",
    "buy",
    "sell",
    "similar",
    "assets",
    "read",
    "original",
    "vision",
    "white",
    "paper",
    "link",
    "description",
    "fantastic",
    "breakthrough",
    "little",
    "bit",
    "actually",
    "going",
    "look",
    "blockchains",
    "actually",
    "work",
    "possible",
    "people",
    "took",
    "saw",
    "technology",
    "thought",
    "could",
    "even",
    "years",
    "later",
    "man",
    "named",
    "metallic",
    "butterin",
    "released",
    "white",
    "paper",
    "describing",
    "new",
    "protocol",
    "called",
    "ethereum",
    "used",
    "blockchain",
    "infrastructure",
    "additional",
    "feature",
    "2015",
    "released",
    "project",
    "called",
    "ethereum",
    "number",
    "took",
    "blockchain",
    "technology",
    "applied",
    "ways",
    "people",
    "make",
    "entire",
    "decentralized",
    "applications",
    "decentralized",
    "organizations",
    "build",
    "smart",
    "contracts",
    "engage",
    "agreements",
    "without",
    "intermediary",
    "centralized",
    "governing",
    "force",
    "idea",
    "take",
    "pieces",
    "made",
    "bitcoin",
    "great",
    "add",
    "smart",
    "contracts",
    "fact",
    "technically",
    "even",
    "new",
    "idea",
    "back",
    "1994",
    "man",
    "named",
    "nick",
    "zabo",
    "proposed",
    "technology",
    "called",
    "smart",
    "contracts",
    "smart",
    "contract",
    "set",
    "instructions",
    "executed",
    "without",
    "intermediary",
    "come",
    "life",
    "blockchain",
    "smart",
    "contracts",
    "really",
    "going",
    "core",
    "thing",
    "going",
    "working",
    "going",
    "developing",
    "smart",
    "contracts",
    "similar",
    "regular",
    "traditional",
    "contracts",
    "people",
    "make",
    "instead",
    "writing",
    "contracts",
    "pen",
    "paper",
    "typing",
    "computer",
    "entirely",
    "written",
    "code",
    "terms",
    "agreement",
    "written",
    "code",
    "automatically",
    "executed",
    "decentralized",
    "blockchain",
    "network",
    "instead",
    "written",
    "pen",
    "paper",
    "executed",
    "two",
    "parties",
    "three",
    "parties",
    "however",
    "many",
    "parties",
    "involved",
    "one",
    "main",
    "differentiators",
    "ethereum",
    "protocol",
    "bitcoin",
    "protocol",
    "technically",
    "bitcoin",
    "also",
    "smart",
    "contracts",
    "however",
    "touring",
    "complete",
    "meaning",
    "full",
    "range",
    "capabilities",
    "touring",
    "complete",
    "application",
    "like",
    "ethereum",
    "actually",
    "intentional",
    "move",
    "bitcoin",
    "developers",
    "view",
    "bitcoin",
    "network",
    "asset",
    "whereas",
    "ethereum",
    "ethereum",
    "developers",
    "viewed",
    "acid",
    "asset",
    "also",
    "utility",
    "people",
    "build",
    "smart",
    "contracts",
    "smart",
    "contracts",
    "revolutionary",
    "technologies",
    "going",
    "talk",
    "little",
    "bit",
    "advantage",
    "little",
    "bit",
    "actually",
    "come",
    "fatal",
    "flaw",
    "known",
    "oracle",
    "problem",
    "blockchains",
    "deterministic",
    "systems",
    "learn",
    "deterministic",
    "soon",
    "determinism",
    "means",
    "walled",
    "garden",
    "meaning",
    "everything",
    "happens",
    "smart",
    "contracts",
    "block",
    "blockchain",
    "happens",
    "little",
    "box",
    "course",
    "want",
    "smart",
    "contracts",
    "actually",
    "digital",
    "superior",
    "agreements",
    "need",
    "way",
    "interact",
    "real",
    "world",
    "get",
    "real",
    "data",
    "external",
    "outside",
    "blockchain",
    "computation",
    "oracles",
    "come",
    "play",
    "oracles",
    "devices",
    "bring",
    "data",
    "blockchain",
    "execute",
    "type",
    "external",
    "computation",
    "great",
    "oracles",
    "solution",
    "blockchains",
    "talk",
    "real",
    "world",
    "right",
    "well",
    "quite",
    "blockchains",
    "smart",
    "contct",
    "contracts",
    "decentralized",
    "application",
    "order",
    "stay",
    "decentralized",
    "means",
    "would",
    "also",
    "need",
    "get",
    "data",
    "external",
    "computation",
    "decentralized",
    "manner",
    "well",
    "onchain",
    "logic",
    "decentralized",
    "blockchain",
    "also",
    "need",
    "offchain",
    "data",
    "external",
    "computation",
    "decentralized",
    "well",
    "combining",
    "onchain",
    "logic",
    "settlement",
    "layers",
    "offchain",
    "data",
    "external",
    "computation",
    "builds",
    "called",
    "hybrid",
    "smart",
    "contracts",
    "large",
    "majority",
    "defi",
    "applications",
    "largest",
    "applications",
    "today",
    "hybrid",
    "smart",
    "contracts",
    "protocol",
    "chain",
    "link",
    "comes",
    "play",
    "chain",
    "link",
    "decentralized",
    "modular",
    "oracle",
    "network",
    "allows",
    "bring",
    "data",
    "smart",
    "contracts",
    "external",
    "computation",
    "hybrid",
    "smart",
    "contracts",
    "onchain",
    "settlement",
    "interact",
    "real",
    "world",
    "meaningful",
    "way",
    "chain",
    "link",
    "incredibly",
    "powerful",
    "oracle",
    "network",
    "allows",
    "us",
    "get",
    "data",
    "get",
    "randomness",
    "type",
    "upkeep",
    "really",
    "customize",
    "smart",
    "contracts",
    "way",
    "want",
    "elevate",
    "anything",
    "want",
    "throughout",
    "course",
    "talking",
    "smart",
    "contracts",
    "often",
    "times",
    "also",
    "talking",
    "hybrid",
    "smart",
    "contracts",
    "smart",
    "contracts",
    "used",
    "little",
    "bit",
    "interchangeably",
    "hybrid",
    "smart",
    "contracts",
    "know",
    "say",
    "hybrid",
    "smart",
    "contract",
    "talking",
    "specifically",
    "smart",
    "contracts",
    "offchain",
    "component",
    "throughout",
    "video",
    "hear",
    "people",
    "say",
    "smart",
    "contract",
    "hear",
    "people",
    "say",
    "decentralized",
    "protocol",
    "decentralized",
    "application",
    "dap",
    "kind",
    "little",
    "bit",
    "interchangeable",
    "decentralized",
    "application",
    "usually",
    "combination",
    "several",
    "smart",
    "contracts",
    "start",
    "coding",
    "solidity",
    "see",
    "singular",
    "smart",
    "contract",
    "singular",
    "contract",
    "looks",
    "like",
    "smart",
    "contracts",
    "going",
    "code",
    "write",
    "deploy",
    "majority",
    "video",
    "learning",
    "fundamental",
    "concepts",
    "allow",
    "us",
    "better",
    "smart",
    "contract",
    "better",
    "solidity",
    "developers",
    "since",
    "inception",
    "ethereum",
    "protocol",
    "given",
    "rise",
    "many",
    "new",
    "pair",
    "paradigms",
    "industries",
    "including",
    "defi",
    "nfts",
    "dows",
    "decentralized",
    "autonomous",
    "organizations",
    "layer",
    "2s",
    "much",
    "couple",
    "protocols",
    "taken",
    "ethereum",
    "vision",
    "gone",
    "different",
    "direction",
    "like",
    "polygon",
    "polka",
    "dot",
    "avalanche",
    "learn",
    "core",
    "basics",
    "smart",
    "contract",
    "development",
    "ethereum",
    "platform",
    "skills",
    "translate",
    "chains",
    "well",
    "worry",
    "learning",
    "specific",
    "tool",
    "chain",
    "work",
    "together",
    "pretty",
    "seamlessly",
    "exceptions",
    "rule",
    "smart",
    "contract",
    "platforms",
    "aka",
    "blockchains",
    "use",
    "solidity",
    "however",
    "learning",
    "fundamental",
    "skills",
    "still",
    "translate",
    "every",
    "single",
    "blockchain",
    "ethereum",
    "far",
    "popular",
    "used",
    "smart",
    "contract",
    "blockchain",
    "smart",
    "contract",
    "protocol",
    "also",
    "hear",
    "words",
    "used",
    "little",
    "interchangeably",
    "well",
    "sometimes",
    "say",
    "blockchain",
    "sometimes",
    "say",
    "smart",
    "contract",
    "platform",
    "smart",
    "contract",
    "protocol",
    "like",
    "similarly",
    "chain",
    "link",
    "popular",
    "powerful",
    "decentralized",
    "oracle",
    "network",
    "going",
    "one",
    "going",
    "focus",
    "chain",
    "link",
    "also",
    "blockchain",
    "smart",
    "contract",
    "platform",
    "agnostic",
    "meaning",
    "work",
    "ethereum",
    "avalanche",
    "polygon",
    "polka",
    "dot",
    "really",
    "blockchain",
    "smart",
    "contract",
    "platform",
    "even",
    "introduction",
    "already",
    "learned",
    "lot",
    "let",
    "quick",
    "summary",
    "talked",
    "bitcoin",
    "first",
    "application",
    "take",
    "blockchain",
    "technology",
    "limelight",
    "meaningful",
    "way",
    "bitcoin",
    "sort",
    "digital",
    "gold",
    "able",
    "make",
    "transactions",
    "users",
    "almost",
    "sort",
    "currency",
    "ethereum",
    "takes",
    "blockchain",
    "technology",
    "one",
    "step",
    "also",
    "build",
    "smart",
    "contract",
    "decentralized",
    "applications",
    "decentralized",
    "autonomous",
    "organizations",
    "code",
    "smart",
    "contracts",
    "smart",
    "contracts",
    "access",
    "external",
    "data",
    "external",
    "computation",
    "outside",
    "blockchain",
    "using",
    "called",
    "oracles",
    "chain",
    "link",
    "powerful",
    "decentralized",
    "oracle",
    "network",
    "allows",
    "us",
    "build",
    "hybrid",
    "smart",
    "contracts",
    "combination",
    "decentralized",
    "onchain",
    "logic",
    "settlement",
    "layer",
    "decentralized",
    "external",
    "offchain",
    "data",
    "computation",
    "hybrid",
    "smart",
    "contracts",
    "smart",
    "contracts",
    "often",
    "used",
    "interchangeably",
    "probably",
    "asking",
    "lot",
    "questions",
    "right",
    "like",
    "makes",
    "bitcoin",
    "interesting",
    "makes",
    "like",
    "digital",
    "gold",
    "smart",
    "contracts",
    "going",
    "add",
    "value",
    "real",
    "world",
    "going",
    "go",
    "next",
    "get",
    "blockchains",
    "smart",
    "contracts",
    "actually",
    "work",
    "low",
    "level",
    "let",
    "go",
    "high",
    "level",
    "talk",
    "features",
    "massive",
    "advantages",
    "blockchains",
    "smart",
    "contracts",
    "traditional",
    "environments",
    "first",
    "feature",
    "decentralized",
    "hear",
    "term",
    "used",
    "lot",
    "massive",
    "benefit",
    "blockchains",
    "decentralized",
    "meaning",
    "centralized",
    "source",
    "controls",
    "blockchain",
    "individuals",
    "make",
    "blockchain",
    "known",
    "node",
    "operators",
    "independent",
    "individuals",
    "running",
    "software",
    "connects",
    "whole",
    "blockchain",
    "together",
    "different",
    "independent",
    "individuals",
    "make",
    "blockchain",
    "blockchain",
    "like",
    "networks",
    "decentralized",
    "dive",
    "deeper",
    "concept",
    "later",
    "great",
    "example",
    "fundamentally",
    "groundbreaking",
    "go",
    "back",
    "happened",
    "recently",
    "even",
    "robin",
    "hood",
    "gamestop",
    "gamestop",
    "share",
    "longer",
    "allowed",
    "bought",
    "centralized",
    "entity",
    "want",
    "bought",
    "anymore",
    "flipped",
    "switch",
    "nobody",
    "could",
    "buy",
    "stock",
    "anymore",
    "essentially",
    "single",
    "entity",
    "controlling",
    "entire",
    "financial",
    "market",
    "fact",
    "single",
    "entity",
    "power",
    "make",
    "choices",
    "us",
    "travesty",
    "blockchain",
    "solve",
    "narrative",
    "called",
    "bankless",
    "narrative",
    "users",
    "actually",
    "live",
    "world",
    "bank",
    "bank",
    "banks",
    "good",
    "right",
    "history",
    "shady",
    "things",
    "also",
    "power",
    "potentially",
    "freeze",
    "funds",
    "letting",
    "withdraw",
    "move",
    "anything",
    "centralized",
    "entity",
    "flip",
    "switch",
    "control",
    "interact",
    "life",
    "every",
    "day",
    "free",
    "centralized",
    "entities",
    "much",
    "power",
    "much",
    "control",
    "life",
    "widespread",
    "positive",
    "ramifications",
    "transparency",
    "flexibility",
    "everything",
    "done",
    "blockchain",
    "rules",
    "made",
    "seen",
    "everyone",
    "backdoor",
    "deals",
    "shady",
    "happenings",
    "everything",
    "happens",
    "chain",
    "see",
    "means",
    "special",
    "information",
    "everyone",
    "play",
    "rules",
    "everyone",
    "see",
    "exactly",
    "rules",
    "additionally",
    "mean",
    "everything",
    "tracked",
    "blockchain",
    "pseudo",
    "anonymous",
    "create",
    "different",
    "accounts",
    "interact",
    "many",
    "different",
    "ways",
    "leads",
    "freedom",
    "point",
    "get",
    "second",
    "speed",
    "efficiency",
    "ever",
    "tried",
    "make",
    "withdrawal",
    "bank",
    "took",
    "3",
    "five",
    "days",
    "bank",
    "adding",
    "subtracting",
    "numbers",
    "basic",
    "first",
    "grade",
    "math",
    "take",
    "long",
    "blockchains",
    "verified",
    "decentralized",
    "collective",
    "settlement",
    "withdrawal",
    "period",
    "case",
    "substantially",
    "faster",
    "depending",
    "blockchain",
    "using",
    "10",
    "minutes",
    "way",
    "couple",
    "seconds",
    "stock",
    "trading",
    "hedphone",
    "world",
    "actually",
    "take",
    "week",
    "buy",
    "sell",
    "stock",
    "go",
    "security",
    "immutability",
    "blockchains",
    "immutable",
    "means",
    "ca",
    "changed",
    "means",
    "ca",
    "tampered",
    "corrupted",
    "way",
    "shape",
    "form",
    "allows",
    "us",
    "massive",
    "security",
    "data",
    "transactions",
    "anything",
    "like",
    "computer",
    "goes",
    "backup",
    "computers",
    "go",
    "regular",
    "world",
    "data",
    "gone",
    "data",
    "two",
    "computers",
    "luck",
    "blockchain",
    "several",
    "nodes",
    "go",
    "matter",
    "long",
    "one",
    "node",
    "entire",
    "system",
    "running",
    "data",
    "safe",
    "secure",
    "thousands",
    "hundreds",
    "thousands",
    "nodes",
    "running",
    "blockchain",
    "softwares",
    "meaning",
    "everything",
    "happens",
    "happens",
    "immutable",
    "wo",
    "change",
    "hacking",
    "blockchain",
    "nearly",
    "impossible",
    "substantially",
    "harder",
    "hacking",
    "centralized",
    "entity",
    "also",
    "much",
    "secure",
    "asset",
    "sense",
    "well",
    "instead",
    "gold",
    "vault",
    "contract",
    "written",
    "piece",
    "paper",
    "computer",
    "asset",
    "locked",
    "blockchain",
    "forever",
    "need",
    "access",
    "private",
    "key",
    "pneumonic",
    "essentially",
    "password",
    "lug",
    "gold",
    "around",
    "lug",
    "contracts",
    "around",
    "always",
    "blockchain",
    "smart",
    "contracts",
    "particular",
    "remove",
    "massive",
    "conflict",
    "interest",
    "traditional",
    "world",
    "engage",
    "users",
    "individuals",
    "always",
    "best",
    "interests",
    "heart",
    "lot",
    "usually",
    "sense",
    "nothing",
    "wrong",
    "lot",
    "people",
    "however",
    "make",
    "agreement",
    "agreement",
    "massive",
    "conflict",
    "interest",
    "user",
    "supposed",
    "execute",
    "agreement",
    "let",
    "take",
    "insurance",
    "example",
    "pay",
    "insurance",
    "provider",
    "100",
    "month",
    "paying",
    "100",
    "event",
    "get",
    "hit",
    "bus",
    "made",
    "agreement",
    "contract",
    "going",
    "pay",
    "medical",
    "bills",
    "bail",
    "however",
    "massive",
    "conflict",
    "interest",
    "insurance",
    "companies",
    "business",
    "giving",
    "money",
    "business",
    "making",
    "money",
    "even",
    "though",
    "signed",
    "agreement",
    "event",
    "occurs",
    "still",
    "want",
    "pay",
    "money",
    "find",
    "loophole",
    "contract",
    "motivated",
    "sign",
    "agreement",
    "best",
    "interest",
    "massive",
    "conflict",
    "interest",
    "native",
    "agreements",
    "make",
    "today",
    "ones",
    "decides",
    "whether",
    "going",
    "execute",
    "agreement",
    "giving",
    "execution",
    "power",
    "party",
    "want",
    "execute",
    "something",
    "often",
    "led",
    "frustration",
    "followup",
    "always",
    "sue",
    "go",
    "process",
    "wasting",
    "time",
    "going",
    "long",
    "process",
    "get",
    "something",
    "originally",
    "gotten",
    "first",
    "place",
    "leads",
    "one",
    "biggest",
    "value",
    "ads",
    "smart",
    "contracts",
    "smart",
    "contracts",
    "allow",
    "us",
    "engage",
    "trustless",
    "trust",
    "minimized",
    "agreements",
    "currently",
    "live",
    "world",
    "brand",
    "based",
    "agreements",
    "engage",
    "agreement",
    "like",
    "service",
    "provided",
    "alternative",
    "waltz",
    "street",
    "another",
    "brand",
    "another",
    "service",
    "going",
    "make",
    "exact",
    "set",
    "promises",
    "trust",
    "going",
    "execute",
    "faithfully",
    "smart",
    "contracts",
    "allow",
    "us",
    "move",
    "agreements",
    "agreements",
    "agreements",
    "even",
    "trust",
    "going",
    "right",
    "thing",
    "hence",
    "name",
    "trustless",
    "one",
    "always",
    "going",
    "equal",
    "two",
    "math",
    "world",
    "whatever",
    "code",
    "determines",
    "input",
    "output",
    "exactly",
    "going",
    "happen",
    "every",
    "single",
    "time",
    "really",
    "add",
    "two",
    "major",
    "pieces",
    "freedom",
    "trustless",
    "pieces",
    "allow",
    "us",
    "live",
    "world",
    "accountable",
    "trusting",
    "friendly",
    "better",
    "allows",
    "us",
    "work",
    "environment",
    "universe",
    "things",
    "work",
    "allows",
    "us",
    "us",
    "freedom",
    "engage",
    "people",
    "wish",
    "centralized",
    "controlling",
    "body",
    "influencing",
    "every",
    "action",
    "make",
    "rules",
    "one",
    "getting",
    "special",
    "treatment",
    "brings",
    "new",
    "world",
    "economic",
    "opportunity",
    "well",
    "lives",
    "become",
    "digital",
    "constantly",
    "bombarded",
    "centralized",
    "services",
    "want",
    "us",
    "use",
    "interface",
    "profit",
    "interact",
    "force",
    "us",
    "push",
    "us",
    "making",
    "decisions",
    "motivated",
    "us",
    "make",
    "smart",
    "contracts",
    "decentralized",
    "applications",
    "blockchain",
    "allows",
    "us",
    "free",
    "repressors",
    "live",
    "environment",
    "truly",
    "free",
    "trustless",
    "high",
    "level",
    "said",
    "let",
    "quick",
    "summary",
    "learned",
    "blockchains",
    "decentralized",
    "meaning",
    "controlled",
    "single",
    "centralized",
    "entity",
    "run",
    "network",
    "independent",
    "users",
    "transparency",
    "blockchains",
    "transparent",
    "everything",
    "happens",
    "blockchain",
    "everybody",
    "else",
    "see",
    "everybody",
    "else",
    "work",
    "see",
    "everyone",
    "playing",
    "rules",
    "blockchains",
    "quick",
    "efficient",
    "especially",
    "comes",
    "monetary",
    "policy",
    "settlement",
    "blockchains",
    "fast",
    "easy",
    "mutability",
    "security",
    "blockchains",
    "ca",
    "changed",
    "tampered",
    "corrupted",
    "incredibly",
    "incredibly",
    "secure",
    "smart",
    "contracts",
    "remove",
    "massive",
    "conflict",
    "interest",
    "traditional",
    "agreements",
    "smart",
    "contracts",
    "allow",
    "us",
    "move",
    "away",
    "political",
    "agreements",
    "secure",
    "agreements",
    "smart",
    "contracts",
    "allow",
    "us",
    "engage",
    "trustless",
    "trust",
    "minimized",
    "agreements",
    "smart",
    "contracts",
    "set",
    "instructions",
    "placed",
    "blockchain",
    "pieces",
    "code",
    "run",
    "centralized",
    "intermediary",
    "addition",
    "smart",
    "contracts",
    "typically",
    "paired",
    "type",
    "oracle",
    "get",
    "information",
    "real",
    "world",
    "smart",
    "contracts",
    "paired",
    "oracle",
    "called",
    "hybrid",
    "smart",
    "contracts",
    "chain",
    "link",
    "secure",
    "decentralized",
    "modular",
    "oracle",
    "network",
    "used",
    "bring",
    "data",
    "smart",
    "contracts",
    "also",
    "make",
    "type",
    "external",
    "computation",
    "also",
    "briefly",
    "want",
    "mention",
    "dows",
    "decentralized",
    "autonomous",
    "organizations",
    "hear",
    "referred",
    "lot",
    "well",
    "decentralized",
    "autonomous",
    "organizations",
    "organizations",
    "live",
    "online",
    "live",
    "smart",
    "contracts",
    "similar",
    "regular",
    "organization",
    "traditional",
    "world",
    "however",
    "people",
    "maybe",
    "hold",
    "governance",
    "tokens",
    "make",
    "voting",
    "decisions",
    "governance",
    "chain",
    "decentralized",
    "settlement",
    "layer",
    "giving",
    "us",
    "freedom",
    "engage",
    "please",
    "taken",
    "first",
    "dive",
    "blockchain",
    "smart",
    "contracts",
    "least",
    "high",
    "level",
    "understood",
    "advantageous",
    "let",
    "jump",
    "let",
    "get",
    "ethereum",
    "wallet",
    "let",
    "make",
    "first",
    "transaction",
    "live",
    "blockchain",
    "ready",
    "let",
    "jump",
    "ethereum",
    "going",
    "make",
    "first",
    "interaction",
    "ethereum",
    "blockchain",
    "interaction",
    "make",
    "transaction",
    "going",
    "go",
    "back",
    "look",
    "actually",
    "happened",
    "technical",
    "implications",
    "allowed",
    "transaction",
    "go",
    "order",
    "us",
    "interact",
    "blockchain",
    "first",
    "thing",
    "going",
    "need",
    "ethereum",
    "wallet",
    "going",
    "go",
    "ahead",
    "go",
    "metamask",
    "one",
    "popular",
    "wallets",
    "one",
    "easiest",
    "use",
    "going",
    "go",
    "ahead",
    "download",
    "using",
    "brave",
    "browser",
    "works",
    "chrome",
    "firefox",
    "really",
    "browsers",
    "going",
    "little",
    "extension",
    "top",
    "right",
    "hand",
    "browser",
    "way",
    "really",
    "easily",
    "see",
    "times",
    "wallet",
    "store",
    "ethereum",
    "based",
    "currencies",
    "going",
    "go",
    "ahead",
    "install",
    "metamask",
    "brave",
    "add",
    "brave",
    "add",
    "extension",
    "go",
    "ahead",
    "get",
    "started",
    "working",
    "brave",
    "first",
    "step",
    "absolutely",
    "need",
    "take",
    "starting",
    "journey",
    "one",
    "easiest",
    "steps",
    "take",
    "going",
    "go",
    "ahead",
    "get",
    "started",
    "going",
    "create",
    "brand",
    "new",
    "wallet",
    "going",
    "go",
    "ahead",
    "hit",
    "create",
    "wallet",
    "already",
    "wallet",
    "actually",
    "import",
    "via",
    "seed",
    "phrase",
    "talk",
    "seed",
    "phrase",
    "secret",
    "phrase",
    "little",
    "bit",
    "let",
    "go",
    "ahead",
    "create",
    "create",
    "new",
    "wallet",
    "sure",
    "agree",
    "help",
    "metamask",
    "create",
    "password",
    "make",
    "sure",
    "really",
    "secure",
    "purpose",
    "demo",
    "passwords",
    "going",
    "password",
    "please",
    "password",
    "testing",
    "coding",
    "actually",
    "use",
    "separate",
    "account",
    "account",
    "actually",
    "real",
    "money",
    "however",
    "want",
    "use",
    "account",
    "actually",
    "put",
    "real",
    "ethereum",
    "put",
    "real",
    "money",
    "absolutely",
    "100",
    "need",
    "back",
    "going",
    "go",
    "ahead",
    "click",
    "reveal",
    "secret",
    "words",
    "showing",
    "guys",
    "uh",
    "demo",
    "really",
    "care",
    "however",
    "show",
    "secret",
    "phrase",
    "anybody",
    "else",
    "access",
    "funds",
    "application",
    "everything",
    "going",
    "tutorial",
    "going",
    "use",
    "fake",
    "money",
    "going",
    "use",
    "real",
    "money",
    "matter",
    "however",
    "going",
    "actually",
    "put",
    "money",
    "absolutely",
    "need",
    "written",
    "lose",
    "access",
    "andor",
    "private",
    "keys",
    "talk",
    "little",
    "bit",
    "lose",
    "access",
    "wallet",
    "lose",
    "access",
    "funds",
    "give",
    "tips",
    "like",
    "store",
    "phrase",
    "password",
    "manager",
    "like",
    "one",
    "password",
    "write",
    "phrase",
    "piece",
    "paper",
    "put",
    "secure",
    "uh",
    "location",
    "memorize",
    "whatever",
    "want",
    "make",
    "sure",
    "backed",
    "somewhere",
    "going",
    "go",
    "ahead",
    "hit",
    "download",
    "going",
    "save",
    "computer",
    "best",
    "practice",
    "save",
    "computer",
    "much",
    "better",
    "use",
    "password",
    "manager",
    "write",
    "piece",
    "paper",
    "something",
    "demoing",
    "going",
    "going",
    "show",
    "going",
    "put",
    "real",
    "funds",
    "going",
    "go",
    "ahead",
    "hit",
    "next",
    "going",
    "ask",
    "us",
    "make",
    "sure",
    "going",
    "ask",
    "us",
    "verify",
    "actually",
    "written",
    "going",
    "go",
    "ahead",
    "hit",
    "confirm",
    "great",
    "gives",
    "us",
    "couple",
    "tips",
    "remember",
    "definitely",
    "take",
    "tips",
    "seriously",
    "especially",
    "going",
    "use",
    "real",
    "money",
    "like",
    "said",
    "demo",
    "going",
    "use",
    "test",
    "money",
    "big",
    "deal",
    "put",
    "real",
    "money",
    "absolutely",
    "need",
    "back",
    "seed",
    "phrase",
    "secret",
    "phrase",
    "going",
    "refer",
    "pneumonic",
    "phrase",
    "awesome",
    "see",
    "user",
    "interface",
    "wallet",
    "depending",
    "browser",
    "actually",
    "go",
    "ahead",
    "look",
    "extensions",
    "pin",
    "browser",
    "even",
    "click",
    "get",
    "interface",
    "let",
    "take",
    "inventory",
    "actually",
    "going",
    "actually",
    "pneumonic",
    "phrase",
    "secret",
    "phrase",
    "got",
    "given",
    "us",
    "access",
    "new",
    "account",
    "address",
    "account",
    "use",
    "tool",
    "like",
    "ether",
    "scan",
    "view",
    "different",
    "addresses",
    "going",
    "look",
    "address",
    "created",
    "ether",
    "scan",
    "see",
    "transactions",
    "happened",
    "empty",
    "zero",
    "ether",
    "zer",
    "doar",
    "worth",
    "value",
    "address",
    "unique",
    "address",
    "address",
    "represents",
    "exclusively",
    "single",
    "account",
    "created",
    "talk",
    "little",
    "bit",
    "ether",
    "scan",
    "bit",
    "tool",
    "going",
    "use",
    "even",
    "click",
    "circle",
    "even",
    "create",
    "accounts",
    "give",
    "different",
    "account",
    "name",
    "call",
    "account",
    "two",
    "one",
    "different",
    "address",
    "go",
    "ahead",
    "go",
    "back",
    "ether",
    "scan",
    "look",
    "one",
    "different",
    "address",
    "multiple",
    "addresses",
    "click",
    "two",
    "accounts",
    "account",
    "one",
    "account",
    "two",
    "pneumonic",
    "given",
    "gives",
    "us",
    "access",
    "create",
    "multiple",
    "accounts",
    "pneumonic",
    "pneumonic",
    "give",
    "us",
    "access",
    "every",
    "single",
    "account",
    "ever",
    "created",
    "pneumonic",
    "securing",
    "pneumonic",
    "crucial",
    "especially",
    "create",
    "multiple",
    "different",
    "accounts",
    "account",
    "unique",
    "identifier",
    "well",
    "right",
    "public",
    "address",
    "copy",
    "public",
    "address",
    "account",
    "however",
    "also",
    "private",
    "key",
    "work",
    "account",
    "secret",
    "key",
    "go",
    "ahead",
    "view",
    "clicking",
    "three",
    "dots",
    "go",
    "account",
    "details",
    "export",
    "private",
    "key",
    "put",
    "password",
    "confirm",
    "going",
    "private",
    "key",
    "single",
    "password",
    "associated",
    "account",
    "give",
    "somebody",
    "else",
    "access",
    "private",
    "key",
    "access",
    "account",
    "two",
    "wo",
    "access",
    "account",
    "one",
    "private",
    "key",
    "key",
    "account",
    "two",
    "associated",
    "account",
    "two",
    "pneumonic",
    "however",
    "associated",
    "accounts",
    "people",
    "say",
    "store",
    "private",
    "keys",
    "safe",
    "place",
    "store",
    "keys",
    "safe",
    "face",
    "usually",
    "referring",
    "pneumonic",
    "private",
    "keys",
    "lose",
    "private",
    "key",
    "lose",
    "access",
    "account",
    "lose",
    "pneumonic",
    "lose",
    "access",
    "accounts",
    "long",
    "story",
    "short",
    "back",
    "pneumonic",
    "since",
    "access",
    "everything",
    "back",
    "private",
    "keys",
    "keep",
    "mind",
    "access",
    "individual",
    "accounts",
    "great",
    "main",
    "security",
    "pieces",
    "else",
    "going",
    "metamask",
    "see",
    "section",
    "says",
    "ethereum",
    "main",
    "net",
    "click",
    "actually",
    "see",
    "bunch",
    "networks",
    "buy",
    "eth",
    "work",
    "eth",
    "working",
    "ethereum",
    "main",
    "net",
    "interact",
    "smart",
    "contracts",
    "defi",
    "anything",
    "things",
    "going",
    "talk",
    "later",
    "main",
    "net",
    "real",
    "value",
    "going",
    "working",
    "main",
    "net",
    "however",
    "since",
    "engineers",
    "often",
    "times",
    "going",
    "want",
    "test",
    "applications",
    "type",
    "integration",
    "tests",
    "make",
    "sure",
    "code",
    "actually",
    "works",
    "also",
    "called",
    "test",
    "nets",
    "networks",
    "resemble",
    "ethereum",
    "work",
    "exactly",
    "way",
    "ethereum",
    "however",
    "real",
    "money",
    "testing",
    "applications",
    "even",
    "go",
    "ether",
    "scan",
    "look",
    "rink",
    "ether",
    "scan",
    "see",
    "rink",
    "test",
    "explorer",
    "look",
    "look",
    "address",
    "exact",
    "information",
    "nothing",
    "gone",
    "rink",
    "b",
    "totally",
    "different",
    "make",
    "transaction",
    "different",
    "networks",
    "says",
    "test",
    "network",
    "made",
    "made",
    "without",
    "real",
    "money",
    "later",
    "actually",
    "going",
    "show",
    "work",
    "evm",
    "compatible",
    "chains",
    "worry",
    "evm",
    "compatible",
    "means",
    "work",
    "avalanch",
    "polygon",
    "applications",
    "networks",
    "interface",
    "well",
    "remember",
    "test",
    "n",
    "blockchain",
    "blockchain",
    "currency",
    "real",
    "value",
    "resembles",
    "acts",
    "exactly",
    "like",
    "ethereum",
    "main",
    "net",
    "test",
    "applications",
    "test",
    "practice",
    "applications",
    "fact",
    "going",
    "right",
    "make",
    "first",
    "transaction",
    "rink",
    "b",
    "test",
    "net",
    "simulate",
    "exactly",
    "like",
    "make",
    "transaction",
    "ethereum",
    "main",
    "net",
    "going",
    "go",
    "application",
    "called",
    "rink",
    "b",
    "faucet",
    "going",
    "make",
    "first",
    "transaction",
    "rink",
    "b",
    "going",
    "one",
    "two",
    "test",
    "nets",
    "actually",
    "going",
    "work",
    "test",
    "net",
    "going",
    "work",
    "going",
    "coen",
    "important",
    "know",
    "switch",
    "test",
    "nets",
    "evm",
    "compatible",
    "chains",
    "going",
    "working",
    "going",
    "working",
    "rink",
    "b",
    "faucet",
    "test",
    "application",
    "gives",
    "us",
    "free",
    "test",
    "ethereum",
    "hence",
    "value",
    "anybody",
    "get",
    "free",
    "one",
    "faucets",
    "get",
    "testnet",
    "ethereum",
    "application",
    "actually",
    "post",
    "tweet",
    "facebook",
    "post",
    "tweet",
    "actually",
    "going",
    "going",
    "sign",
    "real",
    "quick",
    "signed",
    "post",
    "tweet",
    "requesting",
    "faucet",
    "funds",
    "going",
    "put",
    "address",
    "rinky",
    "ethereum",
    "test",
    "network",
    "going",
    "go",
    "ahead",
    "tweet",
    "going",
    "copy",
    "link",
    "tweet",
    "going",
    "place",
    "going",
    "hit",
    "give",
    "ether",
    "going",
    "say",
    "18",
    "75",
    "ether",
    "3",
    "days",
    "said",
    "funding",
    "request",
    "accepted",
    "patrick",
    "alpha",
    "c",
    "take",
    "address",
    "go",
    "rinky",
    "ether",
    "scan",
    "see",
    "balance",
    "even",
    "see",
    "wallet",
    "rink",
    "network",
    "eth",
    "look",
    "main",
    "net",
    "nothing",
    "look",
    "robson",
    "nothing",
    "look",
    "rinky",
    "right",
    "different",
    "networks",
    "made",
    "first",
    "transaction",
    "given",
    "eth",
    "refresh",
    "page",
    "also",
    "see",
    "first",
    "transaction",
    "made",
    "account",
    "sent",
    "us",
    "ether",
    "account",
    "us",
    "actually",
    "even",
    "look",
    "details",
    "transaction",
    "ether",
    "scan",
    "known",
    "block",
    "explorer",
    "block",
    "explorers",
    "applications",
    "allow",
    "us",
    "see",
    "details",
    "things",
    "happen",
    "blockchain",
    "easily",
    "see",
    "transaction",
    "details",
    "transaction",
    "whenever",
    "work",
    "smart",
    "contracts",
    "also",
    "see",
    "transaction",
    "similar",
    "seeing",
    "right",
    "talk",
    "soon",
    "see",
    "number",
    "information",
    "see",
    "unique",
    "transaction",
    "hash",
    "hash",
    "unique",
    "identifier",
    "uniquely",
    "identifies",
    "transaction",
    "key",
    "transaction",
    "see",
    "successful",
    "transaction",
    "block",
    "number",
    "talk",
    "little",
    "bit",
    "see",
    "unique",
    "account",
    "looks",
    "like",
    "done",
    "ton",
    "transactions",
    "faucet",
    "account",
    "account",
    "created",
    "value",
    "ether",
    "transaction",
    "fees",
    "gas",
    "price",
    "gas",
    "limit",
    "gas",
    "use",
    "gas",
    "refers",
    "fee",
    "paid",
    "node",
    "operators",
    "successfully",
    "including",
    "transaction",
    "blockchain",
    "exactly",
    "works",
    "actually",
    "going",
    "change",
    "pretty",
    "soon",
    "concept",
    "basically",
    "anytime",
    "want",
    "change",
    "state",
    "blockchain",
    "whether",
    "sending",
    "ethereum",
    "making",
    "type",
    "transaction",
    "actually",
    "pay",
    "little",
    "bit",
    "ethereum",
    "little",
    "bit",
    "native",
    "blockchain",
    "token",
    "actually",
    "execute",
    "transaction",
    "whenever",
    "something",
    "blockchain",
    "costs",
    "gas",
    "something",
    "would",
    "take",
    "lot",
    "energy",
    "blockchain",
    "cost",
    "gas",
    "send",
    "single",
    "transaction",
    "going",
    "cost",
    "gas",
    "however",
    "send",
    "transaction",
    "called",
    "smart",
    "contract",
    "function",
    "whole",
    "bunch",
    "stuff",
    "would",
    "cost",
    "gas",
    "see",
    "got",
    "sent",
    "eth",
    "whoever",
    "sent",
    "us",
    "eth",
    "also",
    "paid",
    "blockchain",
    "miners",
    "blockchain",
    "validators",
    "little",
    "bit",
    "ethereum",
    "include",
    "transaction",
    "actually",
    "get",
    "pick",
    "much",
    "fee",
    "want",
    "send",
    "transactions",
    "let",
    "look",
    "another",
    "example",
    "accounts",
    "metamask",
    "let",
    "even",
    "expand",
    "view",
    "two",
    "different",
    "accounts",
    "account",
    "one",
    "account",
    "two",
    "account",
    "one",
    "account",
    "two",
    "zero",
    "actually",
    "send",
    "money",
    "account",
    "one",
    "account",
    "two",
    "remember",
    "fake",
    "money",
    "going",
    "go",
    "ahead",
    "hit",
    "trans",
    "transfer",
    "accounts",
    "going",
    "send",
    "money",
    "account",
    "two",
    "see",
    "transaction",
    "details",
    "see",
    "asset",
    "going",
    "send",
    "ethereum",
    "wallet",
    "going",
    "send",
    "ethereum",
    "later",
    "learn",
    "get",
    "different",
    "assets",
    "wallet",
    "going",
    "choose",
    "amount",
    "going",
    "choose",
    "send",
    "one",
    "pieces",
    "uh",
    "associated",
    "transaction",
    "fee",
    "gas",
    "price",
    "guay",
    "gas",
    "limit",
    "send",
    "transaction",
    "choose",
    "gas",
    "limit",
    "say",
    "hey",
    "transaction",
    "going",
    "spend",
    "gas",
    "gas",
    "going",
    "also",
    "get",
    "set",
    "gas",
    "price",
    "guay",
    "quick",
    "example",
    "guay",
    "versus",
    "music",
    "ethereum",
    "one",
    "ether",
    "many",
    "guay",
    "one",
    "guay",
    "much",
    "ether",
    "said",
    "hey",
    "could",
    "send",
    "0",
    "0",
    "1",
    "ether",
    "would",
    "kind",
    "really",
    "obnoxious",
    "say",
    "semi1",
    "way",
    "semi1",
    "guay",
    "know",
    "throwing",
    "gas",
    "term",
    "around",
    "little",
    "bit",
    "basically",
    "simplified",
    "gas",
    "going",
    "measurement",
    "much",
    "computation",
    "something",
    "uses",
    "gas",
    "price",
    "going",
    "much",
    "costs",
    "per",
    "unit",
    "gas",
    "gas",
    "limit",
    "going",
    "maximum",
    "amount",
    "gas",
    "used",
    "transaction",
    "example",
    "make",
    "trans",
    "action",
    "uses",
    "gas",
    "one",
    "gas",
    "one",
    "guay",
    "price",
    "means",
    "going",
    "pay",
    "guay",
    "transaction",
    "fee",
    "back",
    "transaction",
    "saying",
    "gas",
    "price",
    "going",
    "one",
    "gay",
    "transaction",
    "fee",
    "going",
    "gas",
    "use",
    "gas",
    "amount",
    "times",
    "gas",
    "price",
    "gay",
    "trans",
    "transaction",
    "fee",
    "question",
    "well",
    "would",
    "ever",
    "bump",
    "would",
    "want",
    "pay",
    "gas",
    "price",
    "even",
    "option",
    "pay",
    "well",
    "comes",
    "block",
    "space",
    "talk",
    "little",
    "bit",
    "get",
    "blockchain",
    "actually",
    "works",
    "blockchain",
    "process",
    "many",
    "transactions",
    "time",
    "nodes",
    "blockchain",
    "nodes",
    "process",
    "many",
    "time",
    "make",
    "transaction",
    "node",
    "decide",
    "want",
    "include",
    "transaction",
    "block",
    "ton",
    "people",
    "looking",
    "make",
    "transactions",
    "nodes",
    "going",
    "highly",
    "incentivized",
    "pick",
    "transactions",
    "going",
    "give",
    "high",
    "price",
    "going",
    "give",
    "lot",
    "money",
    "including",
    "transaction",
    "called",
    "eth",
    "gas",
    "station",
    "gas",
    "estimator",
    "blockchain",
    "currently",
    "says",
    "want",
    "get",
    "transaction",
    "right",
    "away",
    "going",
    "cost",
    "31",
    "gay",
    "want",
    "get",
    "less",
    "5",
    "minutes",
    "going",
    "take",
    "maybe",
    "21",
    "gay",
    "gas",
    "prices",
    "ethereum",
    "fluctuate",
    "much",
    "people",
    "use",
    "gas",
    "prices",
    "blockchains",
    "fluctuate",
    "much",
    "people",
    "use",
    "important",
    "concept",
    "typically",
    "setting",
    "gas",
    "price",
    "transaction",
    "take",
    "look",
    "see",
    "know",
    "gas",
    "station",
    "say",
    "okay",
    "want",
    "mine",
    "go",
    "right",
    "away",
    "going",
    "asap",
    "want",
    "go",
    "fast",
    "maybe",
    "know",
    "fast",
    "amount",
    "standard",
    "standard",
    "amount",
    "depends",
    "many",
    "people",
    "looking",
    "work",
    "blockchain",
    "time",
    "see",
    "fluctuates",
    "pretty",
    "quickly",
    "right",
    "went",
    "way",
    "46",
    "maybe",
    "people",
    "using",
    "blockchain",
    "obviously",
    "eth",
    "main",
    "net",
    "test",
    "net",
    "going",
    "competition",
    "still",
    "change",
    "anyway",
    "go",
    "ahead",
    "100",
    "gas",
    "price",
    "hit",
    "next",
    "hit",
    "confirm",
    "go",
    "activity",
    "transaction",
    "metamask",
    "go",
    "ahead",
    "view",
    "ether",
    "scan",
    "well",
    "see",
    "looks",
    "like",
    "still",
    "processing",
    "transaction",
    "see",
    "passed",
    "look",
    "gas",
    "price",
    "see",
    "100",
    "gay",
    "set",
    "working",
    "gas",
    "price",
    "100",
    "gay",
    "versus",
    "first",
    "original",
    "transaction",
    "one",
    "guay",
    "look",
    "metamask",
    "see",
    "funds",
    "indeed",
    "subtracted",
    "account",
    "added",
    "account",
    "one",
    "eth",
    "account",
    "awesome",
    "see",
    "activity",
    "one",
    "eth",
    "reason",
    "gas",
    "prices",
    "exist",
    "nodes",
    "put",
    "many",
    "transactions",
    "block",
    "highly",
    "incentivized",
    "input",
    "transactions",
    "going",
    "give",
    "higher",
    "fee",
    "times",
    "lot",
    "people",
    "looking",
    "use",
    "blockchain",
    "prices",
    "get",
    "high",
    "people",
    "using",
    "blockchain",
    "prices",
    "low",
    "ether",
    "scan",
    "tool",
    "incredibly",
    "incredibly",
    "powerful",
    "using",
    "time",
    "goes",
    "something",
    "incredibly",
    "exciting",
    "little",
    "bit",
    "information",
    "know",
    "interact",
    "blockchains",
    "interact",
    "ethereum",
    "protocol",
    "want",
    "learn",
    "code",
    "anything",
    "go",
    "start",
    "interacting",
    "ethereum",
    "interacting",
    "protocols",
    "much",
    "information",
    "however",
    "know",
    "guys",
    "learn",
    "code",
    "let",
    "look",
    "hood",
    "ethereum",
    "actually",
    "going",
    "transactions",
    "gas",
    "blockchains",
    "really",
    "going",
    "let",
    "learn",
    "fundamentals",
    "blockchain",
    "want",
    "go",
    "ahead",
    "jump",
    "coding",
    "go",
    "ahead",
    "grab",
    "timestamp",
    "description",
    "however",
    "learning",
    "exactly",
    "blockchain",
    "works",
    "going",
    "make",
    "incredibly",
    "powerful",
    "developer",
    "let",
    "take",
    "look",
    "first",
    "going",
    "going",
    "blockchain",
    "demo",
    "site",
    "right",
    "creator",
    "site",
    "fantastic",
    "video",
    "fantastic",
    "walkthr",
    "blockchain",
    "101",
    "right",
    "site",
    "looking",
    "another",
    "explanation",
    "definitely",
    "check",
    "video",
    "absolutely",
    "fantastic",
    "first",
    "thing",
    "really",
    "need",
    "order",
    "understand",
    "blockchain",
    "order",
    "really",
    "anything",
    "everything",
    "going",
    "first",
    "really",
    "need",
    "understand",
    "shot",
    "256",
    "hash",
    "hashing",
    "kind",
    "general",
    "let",
    "first",
    "understand",
    "hash",
    "hash",
    "unique",
    "fixed",
    "length",
    "string",
    "meant",
    "identify",
    "piece",
    "data",
    "created",
    "putting",
    "piece",
    "data",
    "hash",
    "function",
    "example",
    "uh",
    "hashing",
    "algorithm",
    "used",
    "shaw",
    "256",
    "ethereum",
    "actually",
    "uses",
    "uh",
    "right",
    "hashing",
    "algorithm",
    "quite",
    "um",
    "sha",
    "256",
    "kind",
    "sha",
    "family",
    "really",
    "another",
    "way",
    "hash",
    "things",
    "uh",
    "specific",
    "hash",
    "algorithm",
    "matter",
    "uh",
    "much",
    "uh",
    "example",
    "uses",
    "sha",
    "256",
    "imagine",
    "ethereum",
    "hash",
    "going",
    "know",
    "result",
    "different",
    "hash",
    "going",
    "happen",
    "application",
    "whatever",
    "data",
    "whatever",
    "information",
    "put",
    "data",
    "section",
    "see",
    "hash",
    "changes",
    "happening",
    "data",
    "running",
    "shaw",
    "256",
    "hash",
    "algorithm",
    "outputting",
    "unique",
    "hash",
    "hash",
    "unique",
    "fixed",
    "length",
    "string",
    "going",
    "identify",
    "like",
    "blank",
    "data",
    "piece",
    "right",
    "put",
    "know",
    "name",
    "like",
    "know",
    "patrick",
    "collins",
    "hash",
    "going",
    "represent",
    "patrick",
    "holls",
    "right",
    "see",
    "even",
    "put",
    "know",
    "tons",
    "tons",
    "data",
    "length",
    "string",
    "change",
    "right",
    "always",
    "going",
    "amount",
    "put",
    "almost",
    "amount",
    "data",
    "upper",
    "limit",
    "max",
    "size",
    "data",
    "intents",
    "purposes",
    "pretty",
    "much",
    "put",
    "length",
    "see",
    "know",
    "every",
    "time",
    "type",
    "patrick",
    "collins",
    "hash",
    "always",
    "going",
    "7",
    "e5b",
    "right",
    "going",
    "delete",
    "going",
    "patrick",
    "colums",
    "know",
    "7",
    "e",
    "5b",
    "always",
    "unique",
    "hash",
    "always",
    "going",
    "unique",
    "right",
    "always",
    "going",
    "fixed",
    "length",
    "string",
    "take",
    "idea",
    "right",
    "putting",
    "data",
    "move",
    "uh",
    "concept",
    "block",
    "block",
    "concept",
    "going",
    "take",
    "exact",
    "thing",
    "hash",
    "data",
    "section",
    "right",
    "instead",
    "everything",
    "singular",
    "data",
    "area",
    "right",
    "going",
    "split",
    "data",
    "block",
    "nuns",
    "data",
    "going",
    "actually",
    "g",
    "hash",
    "three",
    "get",
    "get",
    "hatch",
    "right",
    "going",
    "put",
    "three",
    "going",
    "say",
    "three",
    "combined",
    "uh",
    "together",
    "going",
    "put",
    "every",
    "three",
    "hashing",
    "algorithm",
    "uh",
    "figure",
    "type",
    "bunch",
    "stuff",
    "see",
    "block",
    "one",
    "nuns",
    "know",
    "nuns",
    "data",
    "going",
    "get",
    "hash",
    "see",
    "actually",
    "screen",
    "turns",
    "red",
    "block",
    "turned",
    "red",
    "happens",
    "hit",
    "mind",
    "button",
    "hit",
    "mind",
    "button",
    "actually",
    "going",
    "take",
    "time",
    "going",
    "think",
    "little",
    "bit",
    "see",
    "nuns",
    "actually",
    "changed",
    "right",
    "nuns",
    "different",
    "hash",
    "starts",
    "four",
    "zeros",
    "okay",
    "back",
    "turned",
    "green",
    "talking",
    "mining",
    "talking",
    "miners",
    "solving",
    "type",
    "difficult",
    "problem",
    "takes",
    "lot",
    "time",
    "example",
    "problem",
    "uh",
    "miners",
    "solve",
    "find",
    "nuns",
    "value",
    "nun",
    "section",
    "hashed",
    "block",
    "number",
    "one",
    "data",
    "would",
    "start",
    "four",
    "zeros",
    "problem",
    "miners",
    "solve",
    "start",
    "four",
    "zeros",
    "way",
    "really",
    "kind",
    "brute",
    "force",
    "know",
    "trying",
    "stuff",
    "tried",
    "one",
    "okay",
    "one",
    "work",
    "okay",
    "two",
    "nope",
    "two",
    "work",
    "three",
    "four",
    "five",
    "six",
    "okay",
    "five",
    "well",
    "started",
    "one",
    "zero",
    "four",
    "keep",
    "trying",
    "numbers",
    "uh",
    "get",
    "one",
    "know",
    "let",
    "hit",
    "mine",
    "four",
    "zeros",
    "top",
    "start",
    "specific",
    "problem",
    "changes",
    "blockchain",
    "blockchain",
    "right",
    "ethereum",
    "different",
    "problem",
    "miners",
    "solve",
    "um",
    "bitcoin",
    "different",
    "problems",
    "minor",
    "solve",
    "concept",
    "going",
    "take",
    "um",
    "one",
    "block",
    "going",
    "uh",
    "concept",
    "going",
    "data",
    "going",
    "block",
    "number",
    "going",
    "nuns",
    "right",
    "nuns",
    "solution",
    "um",
    "going",
    "number",
    "use",
    "get",
    "like",
    "solution",
    "problem",
    "right",
    "go",
    "one",
    "know",
    "going",
    "hit",
    "mine",
    "nuns",
    "changed",
    "right",
    "went",
    "one",
    "fulfills",
    "whatever",
    "problem",
    "really",
    "actually",
    "block",
    "really",
    "happening",
    "miners",
    "mining",
    "looking",
    "trial",
    "error",
    "brute",
    "force",
    "trying",
    "find",
    "nun",
    "know",
    "block",
    "let",
    "go",
    "next",
    "step",
    "figure",
    "okay",
    "well",
    "block",
    "chain",
    "example",
    "block",
    "chain",
    "going",
    "look",
    "like",
    "right",
    "combination",
    "know",
    "back",
    "block",
    "section",
    "one",
    "one",
    "block",
    "looks",
    "like",
    "multiple",
    "different",
    "blocks",
    "right",
    "one",
    "represents",
    "different",
    "block",
    "additional",
    "column",
    "additional",
    "variable",
    "like",
    "know",
    "block",
    "ns",
    "data",
    "right",
    "block",
    "nuns",
    "data",
    "also",
    "thing",
    "called",
    "previous",
    "right",
    "actually",
    "going",
    "pointing",
    "previous",
    "hash",
    "last",
    "block",
    "example",
    "go",
    "last",
    "block",
    "blockchain",
    "says",
    "previous",
    "00",
    "a8",
    "look",
    "hash",
    "block",
    "number",
    "four",
    "000000",
    "8",
    "look",
    "previous",
    "4",
    "z",
    "b9",
    "4",
    "z",
    "b9",
    "way",
    "back",
    "first",
    "block",
    "previous",
    "zeros",
    "right",
    "block",
    "previous",
    "zeros",
    "going",
    "known",
    "genesis",
    "block",
    "probably",
    "heard",
    "genesis",
    "block",
    "first",
    "block",
    "blockchain",
    "previous",
    "hash",
    "points",
    "hash",
    "uh",
    "actually",
    "exist",
    "imagine",
    "kind",
    "block",
    "worked",
    "block",
    "ns",
    "data",
    "go",
    "go",
    "hashing",
    "algorithm",
    "blockchain",
    "block",
    "nuns",
    "data",
    "previous",
    "hash",
    "go",
    "hashing",
    "algorithm",
    "figure",
    "know",
    "hash",
    "okay",
    "go",
    "know",
    "example",
    "type",
    "know",
    "patrick",
    "obviously",
    "longer",
    "valid",
    "right",
    "nuns",
    "uh",
    "combined",
    "block",
    "data",
    "previous",
    "hash",
    "going",
    "solve",
    "know",
    "problem",
    "four",
    "zeros",
    "start",
    "right",
    "going",
    "go",
    "fix",
    "kind",
    "easy",
    "way",
    "see",
    "broken",
    "let",
    "take",
    "look",
    "break",
    "block",
    "right",
    "happens",
    "break",
    "data",
    "like",
    "see",
    "read",
    "invalid",
    "right",
    "block",
    "hash",
    "nuns",
    "hash",
    "new",
    "data",
    "name",
    "patrick",
    "hash",
    "withe",
    "hashed",
    "previous",
    "block",
    "brand",
    "new",
    "hash",
    "right",
    "block",
    "still",
    "pointing",
    "previous",
    "hash",
    "right",
    "right",
    "pointing",
    "previous",
    "block",
    "wrong",
    "messed",
    "um",
    "nuns",
    "previous",
    "hash",
    "also",
    "wrong",
    "right",
    "talk",
    "uh",
    "blockchains",
    "immutable",
    "exactly",
    "immutable",
    "right",
    "go",
    "back",
    "change",
    "anything",
    "know",
    "typed",
    "right",
    "entire",
    "blockchain",
    "invalidated",
    "none",
    "going",
    "uh",
    "nses",
    "solve",
    "equation",
    "anymore",
    "blockchains",
    "immutable",
    "anytime",
    "change",
    "one",
    "thing",
    "ruin",
    "rest",
    "blockchain",
    "okay",
    "however",
    "though",
    "know",
    "originally",
    "go",
    "ahead",
    "mine",
    "mine",
    "see",
    "know",
    "going",
    "start",
    "getting",
    "uh",
    "computationally",
    "expensive",
    "go",
    "redo",
    "uh",
    "basically",
    "entire",
    "blockchain",
    "uh",
    "farther",
    "farther",
    "line",
    "get",
    "harder",
    "hard",
    "becomes",
    "know",
    "rehash",
    "redo",
    "different",
    "blockchains",
    "makes",
    "lot",
    "sense",
    "right",
    "block",
    "really",
    "hard",
    "change",
    "something",
    "past",
    "go",
    "ahead",
    "remine",
    "one",
    "controls",
    "blockchain",
    "right",
    "one",
    "controls",
    "know",
    "want",
    "change",
    "something",
    "past",
    "well",
    "okay",
    "great",
    "got",
    "change",
    "data",
    "know",
    "mine",
    "one",
    "know",
    "obviously",
    "going",
    "computationally",
    "expensive",
    "something",
    "right",
    "one",
    "owns",
    "blockchain",
    "decentralized",
    "nature",
    "distributed",
    "nature",
    "really",
    "uh",
    "makes",
    "incredibly",
    "powerful",
    "going",
    "go",
    "distributed",
    "tab",
    "also",
    "refer",
    "decentralized",
    "tab",
    "uh",
    "going",
    "show",
    "us",
    "blockchain",
    "looks",
    "like",
    "uh",
    "decentralized",
    "manner",
    "exact",
    "uh",
    "initial",
    "setup",
    "distributed",
    "blockchain",
    "know",
    "first",
    "blockchain",
    "kind",
    "exactly",
    "one",
    "also",
    "one",
    "pier",
    "peer",
    "b",
    "pier",
    "c",
    "people",
    "talking",
    "transactions",
    "really",
    "talking",
    "uh",
    "kind",
    "concept",
    "talking",
    "right",
    "number",
    "different",
    "peers",
    "running",
    "blockchain",
    "technology",
    "weighted",
    "equally",
    "right",
    "one",
    "peers",
    "one",
    "nodes",
    "one",
    "entities",
    "running",
    "blockchain",
    "exact",
    "power",
    "anybody",
    "else",
    "right",
    "way",
    "tell",
    "easily",
    "blockchain",
    "correct",
    "ones",
    "correct",
    "looking",
    "end",
    "hash",
    "right",
    "looking",
    "uh",
    "blockchain",
    "remember",
    "remember",
    "hash",
    "last",
    "block",
    "going",
    "encompass",
    "blocks",
    "right",
    "last",
    "hash",
    "going",
    "previous",
    "hash",
    "includes",
    "previous",
    "hash",
    "hash",
    "includes",
    "previous",
    "hash",
    "last",
    "hash",
    "encompasses",
    "everything",
    "right",
    "look",
    "look",
    "hash",
    "pier",
    "c",
    "four",
    "zeros",
    "e4b",
    "look",
    "latest",
    "hash",
    "pier",
    "b",
    "4",
    "z",
    "e4b",
    "pier",
    "4",
    "z",
    "e4b",
    "peers",
    "nodes",
    "decentralized",
    "know",
    "independent",
    "um",
    "independent",
    "users",
    "running",
    "blockchain",
    "software",
    "matched",
    "easy",
    "nodes",
    "look",
    "say",
    "hey",
    "great",
    "matched",
    "let",
    "say",
    "decides",
    "know",
    "something",
    "happened",
    "blockchain",
    "like",
    "wanted",
    "go",
    "back",
    "change",
    "something",
    "right",
    "let",
    "say",
    "change",
    "know",
    "obviously",
    "uh",
    "rest",
    "blockchain",
    "invalidated",
    "spend",
    "lot",
    "computational",
    "power",
    "catch",
    "speed",
    "let",
    "go",
    "ahead",
    "humor",
    "let",
    "say",
    "ended",
    "catching",
    "uh",
    "ended",
    "catching",
    "know",
    "ended",
    "mining",
    "everything",
    "valid",
    "blockchain",
    "right",
    "solves",
    "equation",
    "awesome",
    "however",
    "block",
    "number",
    "three",
    "something",
    "new",
    "right",
    "something",
    "perer",
    "put",
    "happens",
    "look",
    "blockchains",
    "running",
    "software",
    "looking",
    "hashes",
    "hash",
    "block",
    "number",
    "five",
    "p",
    "new",
    "hash",
    "009",
    "bc",
    "pier",
    "b",
    "different",
    "hash",
    "00",
    "e4b",
    "right",
    "right",
    "pier",
    "new",
    "stuff",
    "pier",
    "b",
    "well",
    "decentralized",
    "comes",
    "look",
    "pier",
    "c",
    "pier",
    "c",
    "also",
    "e4b",
    "pier",
    "b",
    "pier",
    "c",
    "say",
    "hey",
    "p",
    "wrong",
    "get",
    "right",
    "pi",
    "stop",
    "able",
    "participate",
    "mining",
    "rewards",
    "essentially",
    "forked",
    "uh",
    "blockchain",
    "started",
    "little",
    "blockchain",
    "right",
    "history",
    "ones",
    "piece",
    "data",
    "block",
    "three",
    "whereas",
    "pier",
    "b",
    "pier",
    "c",
    "nothing",
    "really",
    "shows",
    "uh",
    "blockchain",
    "worlds",
    "decentralized",
    "world",
    "really",
    "centralized",
    "entity",
    "know",
    "per",
    "know",
    "might",
    "maliciously",
    "motivated",
    "change",
    "know",
    "block",
    "number",
    "three",
    "however",
    "democracy",
    "rules",
    "right",
    "majority",
    "rules",
    "blockchain",
    "pi",
    "b",
    "pier",
    "c",
    "say",
    "hey",
    "know",
    "cute",
    "p",
    "wrong",
    "right",
    "right",
    "might",
    "little",
    "abstract",
    "look",
    "data",
    "know",
    "us",
    "typing",
    "kind",
    "random",
    "stuff",
    "think",
    "okay",
    "yeah",
    "data",
    "right",
    "makes",
    "sense",
    "know",
    "kind",
    "random",
    "strings",
    "really",
    "anything",
    "us",
    "actually",
    "go",
    "token",
    "section",
    "everything",
    "really",
    "starts",
    "make",
    "lot",
    "sense",
    "exact",
    "setup",
    "uh",
    "pier",
    "pier",
    "b",
    "pier",
    "c",
    "except",
    "difference",
    "instead",
    "kind",
    "data",
    "section",
    "uh",
    "tx",
    "transaction",
    "section",
    "right",
    "represents",
    "transactions",
    "happening",
    "block",
    "right",
    "sending",
    "25",
    "darcy",
    "bingle",
    "bingley",
    "uh",
    "four",
    "uh",
    "427",
    "cents",
    "uh",
    "1922",
    "right",
    "exact",
    "thing",
    "transactions",
    "going",
    "get",
    "hashed",
    "exact",
    "way",
    "uh",
    "data",
    "going",
    "get",
    "hashed",
    "powerful",
    "know",
    "want",
    "malicious",
    "right",
    "uh",
    "wanted",
    "say",
    "hey",
    "really",
    "wanted",
    "give",
    "jane",
    "lot",
    "money",
    "elizabeth",
    "p",
    "go",
    "back",
    "change",
    "100",
    "well",
    "know",
    "whole",
    "blockchain",
    "uh",
    "get",
    "invalidated",
    "far",
    "long",
    "ago",
    "going",
    "match",
    "chains",
    "right",
    "blockchain",
    "going",
    "excluded",
    "overall",
    "blockchain",
    "let",
    "let",
    "go",
    "ahead",
    "fix",
    "thing",
    "become",
    "malicious",
    "want",
    "send",
    "know",
    "want",
    "uh",
    "miss",
    "audrey",
    "less",
    "money",
    "maybe",
    "want",
    "send",
    "dollar",
    "go",
    "ahead",
    "thing",
    "hash",
    "2a1",
    "going",
    "match",
    "pib",
    "pib",
    "hash",
    "bba",
    "going",
    "match",
    "pc",
    "hash",
    "bba",
    "well",
    "two",
    "going",
    "say",
    "hey",
    "blockchain",
    "invalid",
    "matching",
    "majority",
    "know",
    "right",
    "really",
    "uh",
    "blockchains",
    "work",
    "low",
    "level",
    "goes",
    "back",
    "understanding",
    "hash",
    "idea",
    "using",
    "sophisticated",
    "manner",
    "uh",
    "kind",
    "cryptographically",
    "prove",
    "um",
    "know",
    "stuff",
    "lies",
    "way",
    "blockchain",
    "works",
    "instead",
    "random",
    "stuff",
    "put",
    "data",
    "section",
    "actually",
    "going",
    "solidity",
    "code",
    "finding",
    "ways",
    "interact",
    "different",
    "blocks",
    "different",
    "protocols",
    "chain",
    "said",
    "different",
    "smart",
    "contracts",
    "next",
    "question",
    "might",
    "asking",
    "okay",
    "well",
    "know",
    "sure",
    "one",
    "uh",
    "know",
    "let",
    "say",
    "let",
    "say",
    "darcy",
    "right",
    "sure",
    "darcy",
    "one",
    "actually",
    "send",
    "money",
    "know",
    "darcy",
    "sent",
    "25",
    "uh",
    "bingley",
    "well",
    "get",
    "uh",
    "private",
    "keys",
    "public",
    "keys",
    "going",
    "go",
    "let",
    "quick",
    "recap",
    "learned",
    "section",
    "far",
    "right",
    "learned",
    "ethereum",
    "actually",
    "runs",
    "kck",
    "256",
    "know",
    "used",
    "sha",
    "to6",
    "demo",
    "really",
    "matter",
    "talking",
    "hashing",
    "algorithms",
    "hash",
    "unique",
    "fixed",
    "length",
    "string",
    "meant",
    "identify",
    "piece",
    "data",
    "hash",
    "algorithm",
    "hash",
    "function",
    "function",
    "algorithm",
    "computes",
    "type",
    "data",
    "unique",
    "hash",
    "mining",
    "process",
    "finding",
    "solution",
    "blockchain",
    "problem",
    "example",
    "problem",
    "find",
    "hash",
    "starts",
    "four",
    "zeros",
    "whenever",
    "node",
    "mines",
    "block",
    "get",
    "paid",
    "little",
    "bit",
    "gas",
    "talking",
    "earlier",
    "block",
    "blockchain",
    "basically",
    "combination",
    "block",
    "nuns",
    "transaction",
    "previous",
    "hash",
    "create",
    "unique",
    "hash",
    "block",
    "depending",
    "blockchain",
    "implementation",
    "might",
    "couple",
    "fields",
    "might",
    "different",
    "fields",
    "essentially",
    "going",
    "blockchains",
    "decentralized",
    "distributed",
    "many",
    "independent",
    "users",
    "going",
    "run",
    "blockchain",
    "software",
    "check",
    "compare",
    "see",
    "blockchains",
    "acting",
    "honestly",
    "ones",
    "acting",
    "maliciously",
    "blockchain",
    "world",
    "majority",
    "rules",
    "nuns",
    "answer",
    "used",
    "number",
    "used",
    "get",
    "hash",
    "nuns",
    "kind",
    "overloaded",
    "term",
    "actually",
    "used",
    "number",
    "different",
    "reasons",
    "case",
    "using",
    "solve",
    "problem",
    "getting",
    "know",
    "four",
    "five",
    "zeros",
    "stop",
    "hash",
    "however",
    "ethereum",
    "also",
    "often",
    "used",
    "number",
    "transactions",
    "given",
    "address",
    "going",
    "talk",
    "little",
    "bit",
    "signing",
    "transactions",
    "private",
    "keys",
    "cryptography",
    "pieces",
    "right",
    "blockchain",
    "demo",
    "see",
    "fantastic",
    "transactions",
    "right",
    "things",
    "went",
    "know",
    "darcy",
    "one",
    "send",
    "25",
    "uh",
    "bingley",
    "right",
    "know",
    "actually",
    "happened",
    "pieces",
    "learned",
    "uh",
    "test",
    "net",
    "metamask",
    "account",
    "really",
    "going",
    "start",
    "come",
    "life",
    "little",
    "bit",
    "example",
    "public",
    "private",
    "keys",
    "okay",
    "top",
    "private",
    "key",
    "right",
    "randomly",
    "generated",
    "uh",
    "private",
    "key",
    "know",
    "kind",
    "states",
    "key",
    "really",
    "want",
    "keep",
    "secret",
    "going",
    "using",
    "uh",
    "kind",
    "secret",
    "password",
    "transactions",
    "right",
    "really",
    "pick",
    "know",
    "private",
    "key",
    "anything",
    "want",
    "uh",
    "algorithm",
    "going",
    "use",
    "algorithm",
    "know",
    "ethereum",
    "bitcoin",
    "use",
    "elliptic",
    "curve",
    "digital",
    "signature",
    "uh",
    "algorithm",
    "variant",
    "digital",
    "signature",
    "algorithm",
    "going",
    "create",
    "public",
    "key",
    "right",
    "really",
    "going",
    "go",
    "kind",
    "digital",
    "signature",
    "algorithm",
    "know",
    "use",
    "uh",
    "hash",
    "uh",
    "knowledge",
    "learned",
    "combined",
    "pieces",
    "uh",
    "kind",
    "get",
    "public",
    "key",
    "going",
    "go",
    "deep",
    "private",
    "key",
    "create",
    "get",
    "public",
    "key",
    "public",
    "key",
    "want",
    "everybody",
    "access",
    "right",
    "yeah",
    "whole",
    "world",
    "see",
    "private",
    "key",
    "really",
    "want",
    "uh",
    "private",
    "want",
    "people",
    "see",
    "going",
    "use",
    "private",
    "key",
    "like",
    "password",
    "quote",
    "unquote",
    "digitally",
    "signed",
    "transactions",
    "people",
    "verify",
    "public",
    "key",
    "let",
    "let",
    "see",
    "actually",
    "looks",
    "like",
    "let",
    "pick",
    "random",
    "key",
    "secure",
    "key",
    "right",
    "cuz",
    "longer",
    "secure",
    "going",
    "go",
    "signatures",
    "right",
    "um",
    "let",
    "say",
    "uh",
    "message",
    "want",
    "right",
    "say",
    "high",
    "world",
    "right",
    "want",
    "message",
    "going",
    "happen",
    "private",
    "key",
    "created",
    "use",
    "sign",
    "data",
    "right",
    "remember",
    "blockchain",
    "demo",
    "know",
    "kind",
    "hashing",
    "stuff",
    "right",
    "using",
    "shade",
    "256",
    "hash",
    "get",
    "hash",
    "well",
    "something",
    "similar",
    "instead",
    "hashing",
    "using",
    "digital",
    "signature",
    "algorithm",
    "create",
    "message",
    "signature",
    "really",
    "powerful",
    "uh",
    "algorithm",
    "works",
    "create",
    "message",
    "signature",
    "private",
    "key",
    "somebody",
    "else",
    "ca",
    "derive",
    "private",
    "key",
    "message",
    "signature",
    "makes",
    "really",
    "really",
    "powerful",
    "however",
    "go",
    "verify",
    "using",
    "public",
    "key",
    "right",
    "uh",
    "0403",
    "public",
    "key",
    "using",
    "uh",
    "using",
    "public",
    "key",
    "anybody",
    "verify",
    "oh",
    "let",
    "go",
    "ahead",
    "sign",
    "anybody",
    "verify",
    "signature",
    "right",
    "public",
    "private",
    "key",
    "sign",
    "things",
    "public",
    "key",
    "anybody",
    "verify",
    "something",
    "right",
    "anybody",
    "verify",
    "let",
    "say",
    "somebody",
    "tries",
    "fake",
    "transaction",
    "say",
    "hey",
    "know",
    "transaction",
    "um",
    "verify",
    "signature",
    "public",
    "key",
    "easily",
    "whole",
    "thing",
    "turns",
    "red",
    "uh",
    "verified",
    "right",
    "algorithm",
    "says",
    "hey",
    "uhuh",
    "wrong",
    "go",
    "ahead",
    "take",
    "transactions",
    "exact",
    "way",
    "want",
    "send",
    "money",
    "know",
    "want",
    "send",
    "400",
    "know",
    "address",
    "another",
    "address",
    "using",
    "key",
    "sign",
    "transaction",
    "anybody",
    "else",
    "world",
    "verif",
    "ify",
    "transaction",
    "right",
    "people",
    "say",
    "hide",
    "keys",
    "know",
    "protect",
    "keys",
    "talking",
    "accounts",
    "right",
    "go",
    "uh",
    "settings",
    "reason",
    "showing",
    "guys",
    "pneumonic",
    "private",
    "key",
    "uh",
    "dumpster",
    "account",
    "going",
    "throw",
    "away",
    "end",
    "video",
    "going",
    "put",
    "real",
    "money",
    "um",
    "look",
    "metamask",
    "pneumonic",
    "phrase",
    "allows",
    "us",
    "easily",
    "get",
    "different",
    "private",
    "keys",
    "right",
    "uh",
    "pneumonic",
    "phrase",
    "combined",
    "uh",
    "know",
    "uh",
    "whatever",
    "account",
    "number",
    "get",
    "us",
    "private",
    "key",
    "pneumonic",
    "phrase",
    "combined",
    "one",
    "going",
    "get",
    "private",
    "key",
    "look",
    "account",
    "details",
    "export",
    "private",
    "key",
    "confirm",
    "going",
    "private",
    "key",
    "going",
    "use",
    "sign",
    "transactions",
    "right",
    "anybody",
    "else",
    "gets",
    "access",
    "private",
    "key",
    "sign",
    "transactions",
    "us",
    "send",
    "transactions",
    "us",
    "want",
    "keep",
    "private",
    "uh",
    "works",
    "exact",
    "way",
    "right",
    "important",
    "hide",
    "private",
    "keys",
    "hide",
    "pneumonics",
    "ethereum",
    "address",
    "actually",
    "uh",
    "piece",
    "uh",
    "actually",
    "piece",
    "public",
    "key",
    "get",
    "address",
    "ethereum",
    "take",
    "public",
    "key",
    "created",
    "private",
    "key",
    "hash",
    "using",
    "ethereum",
    "hashing",
    "algorithm",
    "take",
    "last",
    "20",
    "bytes",
    "actually",
    "derive",
    "um",
    "address",
    "knowing",
    "exact",
    "methodology",
    "get",
    "address",
    "really",
    "matter",
    "could",
    "change",
    "blockchain",
    "blockchain",
    "could",
    "even",
    "change",
    "e",
    "um",
    "know",
    "essentially",
    "kind",
    "addresses",
    "derived",
    "right",
    "derivative",
    "public",
    "key",
    "right",
    "public",
    "key",
    "public",
    "know",
    "uh",
    "using",
    "public",
    "key",
    "kind",
    "public",
    "way",
    "totally",
    "fine",
    "um",
    "private",
    "game",
    "sign",
    "transactions",
    "note",
    "though",
    "send",
    "transactions",
    "going",
    "sign",
    "create",
    "transaction",
    "us",
    "send",
    "uh",
    "learn",
    "later",
    "send",
    "transactions",
    "lot",
    "information",
    "let",
    "quick",
    "recap",
    "public",
    "key",
    "derived",
    "using",
    "digital",
    "signature",
    "algorithm",
    "private",
    "key",
    "right",
    "want",
    "keep",
    "private",
    "key",
    "private",
    "times",
    "going",
    "use",
    "private",
    "key",
    "sign",
    "transactions",
    "signing",
    "transactions",
    "private",
    "key",
    "one",
    "actually",
    "ca",
    "get",
    "private",
    "key",
    "message",
    "signature",
    "however",
    "using",
    "public",
    "key",
    "anybody",
    "easily",
    "verify",
    "signature",
    "signed",
    "fact",
    "signed",
    "metamask",
    "private",
    "keys",
    "located",
    "account",
    "details",
    "section",
    "hit",
    "uh",
    "show",
    "private",
    "keys",
    "type",
    "password",
    "get",
    "private",
    "key",
    "quick",
    "note",
    "often",
    "times",
    "using",
    "private",
    "key",
    "somewhere",
    "want",
    "hexadecimal",
    "form",
    "going",
    "use",
    "private",
    "key",
    "um",
    "something",
    "like",
    "brownie",
    "go",
    "later",
    "need",
    "actually",
    "append",
    "zerox",
    "front",
    "get",
    "later",
    "address",
    "account",
    "derived",
    "think",
    "private",
    "key",
    "creates",
    "public",
    "key",
    "create",
    "address",
    "little",
    "barrier",
    "big",
    "barrier",
    "priv",
    "private",
    "key",
    "want",
    "keep",
    "private",
    "public",
    "key",
    "address",
    "public",
    "information",
    "awesome",
    "know",
    "cryptography",
    "pieces",
    "little",
    "blockchain",
    "actually",
    "works",
    "signatures",
    "work",
    "everything",
    "sticks",
    "together",
    "let",
    "talk",
    "little",
    "bit",
    "works",
    "actuality",
    "really",
    "going",
    "lot",
    "different",
    "blockchain",
    "slightly",
    "different",
    "algorithms",
    "slightly",
    "different",
    "metrics",
    "criteria",
    "lot",
    "stuff",
    "talking",
    "specific",
    "implementations",
    "keep",
    "mind",
    "exact",
    "algorithm",
    "might",
    "little",
    "bit",
    "different",
    "concepts",
    "still",
    "going",
    "exactly",
    "hashing",
    "hash",
    "function",
    "going",
    "matter",
    "look",
    "decentralized",
    "blockchain",
    "going",
    "matter",
    "look",
    "actually",
    "implemented",
    "going",
    "little",
    "bit",
    "different",
    "traditionally",
    "run",
    "application",
    "know",
    "website",
    "something",
    "connects",
    "server",
    "interacting",
    "centralized",
    "entity",
    "unlike",
    "saw",
    "blockchain",
    "multiple",
    "different",
    "peers",
    "going",
    "run",
    "single",
    "centralized",
    "group",
    "still",
    "could",
    "run",
    "many",
    "different",
    "servers",
    "servers",
    "still",
    "going",
    "controlled",
    "centralized",
    "group",
    "blockchains",
    "saw",
    "run",
    "network",
    "different",
    "independent",
    "nodes",
    "saw",
    "pier",
    "pier",
    "b",
    "pier",
    "c",
    "different",
    "examples",
    "different",
    "independent",
    "users",
    "running",
    "blockchain",
    "technology",
    "node",
    "use",
    "term",
    "node",
    "usually",
    "referring",
    "single",
    "instance",
    "decentralized",
    "system",
    "say",
    "single",
    "node",
    "talking",
    "blockchain",
    "talking",
    "one",
    "perer",
    "perer",
    "b",
    "pier",
    "c",
    "running",
    "blockchain",
    "software",
    "talking",
    "one",
    "server",
    "running",
    "technology",
    "network",
    "combination",
    "nodes",
    "interacting",
    "creates",
    "entire",
    "blockchain",
    "makes",
    "potent",
    "anybody",
    "join",
    "network",
    "decentralized",
    "barrier",
    "entry",
    "little",
    "bit",
    "hardware",
    "requirements",
    "getting",
    "correct",
    "materials",
    "run",
    "software",
    "running",
    "software",
    "anybody",
    "join",
    "networks",
    "participate",
    "makes",
    "truly",
    "decentralized",
    "fact",
    "go",
    "github",
    "right",
    "run",
    "ethereum",
    "node",
    "seconds",
    "traditional",
    "world",
    "applications",
    "run",
    "centralized",
    "entities",
    "entity",
    "goes",
    "maliciously",
    "bribed",
    "decides",
    "want",
    "shut",
    "ca",
    "ones",
    "control",
    "everything",
    "blockchains",
    "contrast",
    "problem",
    "one",
    "node",
    "one",
    "entity",
    "runs",
    "several",
    "nodes",
    "goes",
    "since",
    "many",
    "independent",
    "nod",
    "running",
    "matter",
    "blockchain",
    "system",
    "persist",
    "long",
    "least",
    "one",
    "node",
    "always",
    "running",
    "luckily",
    "us",
    "popular",
    "chains",
    "like",
    "bitcoin",
    "ethereum",
    "thousands",
    "thousands",
    "nodes",
    "showed",
    "demo",
    "one",
    "node",
    "acts",
    "maliciously",
    "nodes",
    "ignore",
    "node",
    "kick",
    "even",
    "punish",
    "systems",
    "easily",
    "check",
    "everybody",
    "else",
    "note",
    "see",
    "um",
    "okay",
    "one",
    "sync",
    "majority",
    "yes",
    "majority",
    "rules",
    "comes",
    "blockchain",
    "blockchain",
    "keeps",
    "full",
    "list",
    "every",
    "transaction",
    "interaction",
    "happened",
    "blockchain",
    "saw",
    "node",
    "tries",
    "act",
    "maliciously",
    "hashers",
    "going",
    "way",
    "whack",
    "going",
    "match",
    "everybody",
    "else",
    "gives",
    "blockchains",
    "incredibly",
    "potent",
    "immutability",
    "trait",
    "nothing",
    "changed",
    "corrupted",
    "essence",
    "think",
    "blockchain",
    "decentralized",
    "database",
    "ethereum",
    "extra",
    "additional",
    "feature",
    "also",
    "computation",
    "decentralized",
    "manner",
    "let",
    "talk",
    "consensus",
    "proof",
    "work",
    "proof",
    "stake",
    "probably",
    "heard",
    "really",
    "important",
    "blockchains",
    "actually",
    "work",
    "went",
    "blockchain",
    "example",
    "mining",
    "feature",
    "known",
    "proof",
    "work",
    "proof",
    "work",
    "proof",
    "stake",
    "fall",
    "umbrella",
    "consensus",
    "consensus",
    "really",
    "important",
    "topic",
    "comes",
    "blockchains",
    "consensus",
    "defined",
    "mechanism",
    "used",
    "reach",
    "agreement",
    "state",
    "single",
    "value",
    "blockchain",
    "especially",
    "decentralized",
    "system",
    "briefly",
    "alluded",
    "consensus",
    "mechanism",
    "blockchain",
    "example",
    "said",
    "one",
    "changes",
    "something",
    "two",
    "majority",
    "rule",
    "kick",
    "one",
    "part",
    "consensus",
    "mechanism",
    "roughly",
    "consensus",
    "protocol",
    "blockchain",
    "decentralized",
    "system",
    "broken",
    "two",
    "pieces",
    "chain",
    "selection",
    "algorithm",
    "civil",
    "resistance",
    "mechanism",
    "mining",
    "piece",
    "proof",
    "work",
    "algorithm",
    "known",
    "civil",
    "resistance",
    "mechanism",
    "ethereum",
    "bitcoin",
    "currently",
    "use",
    "please",
    "note",
    "depending",
    "watching",
    "eth2",
    "longer",
    "proof",
    "work",
    "proof",
    "work",
    "known",
    "civil",
    "resistance",
    "mechanism",
    "defines",
    "way",
    "figure",
    "block",
    "author",
    "node",
    "going",
    "node",
    "work",
    "find",
    "mine",
    "author",
    "block",
    "nodes",
    "verify",
    "accurate",
    "civil",
    "resistance",
    "blockchain",
    "ability",
    "defend",
    "users",
    "creating",
    "large",
    "number",
    "pseudo",
    "anonymous",
    "identities",
    "gain",
    "disproportionately",
    "advantageous",
    "influence",
    "said",
    "system",
    "layman",
    "terms",
    "basically",
    "way",
    "blockchain",
    "defend",
    "somebody",
    "making",
    "bunch",
    "fake",
    "blockchains",
    "get",
    "rewards",
    "two",
    "types",
    "civil",
    "resistance",
    "mechanisms",
    "going",
    "talk",
    "namely",
    "proof",
    "work",
    "proof",
    "stake",
    "let",
    "talk",
    "proof",
    "work",
    "little",
    "bit",
    "depth",
    "first",
    "proof",
    "work",
    "silver",
    "resistant",
    "single",
    "node",
    "go",
    "computational",
    "expensive",
    "uh",
    "process",
    "called",
    "mining",
    "demonstrated",
    "earlier",
    "figure",
    "answer",
    "blockchain",
    "riddle",
    "finding",
    "correct",
    "nuns",
    "whatever",
    "blockchain",
    "system",
    "place",
    "proof",
    "work",
    "works",
    "matter",
    "many",
    "pseudo",
    "anonymous",
    "accounts",
    "make",
    "one",
    "still",
    "undergo",
    "computationally",
    "expensive",
    "activity",
    "finding",
    "answer",
    "proof",
    "work",
    "problem",
    "proof",
    "work",
    "riddle",
    "demonstration",
    "finding",
    "nuns",
    "first",
    "four",
    "zeros",
    "blockchain",
    "might",
    "change",
    "riddle",
    "change",
    "problem",
    "little",
    "bit",
    "different",
    "fact",
    "blockchains",
    "make",
    "riddle",
    "intentionally",
    "hard",
    "intentionally",
    "easy",
    "change",
    "called",
    "block",
    "time",
    "block",
    "time",
    "long",
    "takes",
    "blocks",
    "published",
    "proportional",
    "hard",
    "algorithms",
    "problems",
    "actually",
    "change",
    "depending",
    "long",
    "want",
    "block",
    "time",
    "system",
    "wants",
    "block",
    "time",
    "long",
    "make",
    "problem",
    "hard",
    "want",
    "short",
    "make",
    "problem",
    "lot",
    "easier",
    "talk",
    "cil",
    "att",
    "little",
    "bit",
    "affect",
    "system",
    "proof",
    "work",
    "verifiable",
    "way",
    "figure",
    "block",
    "author",
    "civil",
    "resistant",
    "need",
    "combine",
    "chain",
    "selection",
    "rule",
    "create",
    "consensus",
    "consensus",
    "protocols",
    "features",
    "roughly",
    "two",
    "pieces",
    "going",
    "look",
    "second",
    "piece",
    "going",
    "chain",
    "selection",
    "rule",
    "know",
    "blockchain",
    "actually",
    "real",
    "blockchain",
    "true",
    "blockchain",
    "bitcoin",
    "ethereum",
    "use",
    "form",
    "consensus",
    "called",
    "nakamoto",
    "consensus",
    "combination",
    "proof",
    "work",
    "longest",
    "chain",
    "roll",
    "decentralized",
    "network",
    "decides",
    "whichever",
    "blockchain",
    "longest",
    "chain",
    "number",
    "blocks",
    "going",
    "chain",
    "use",
    "makes",
    "lot",
    "sense",
    "every",
    "additional",
    "block",
    "chain",
    "behind",
    "going",
    "take",
    "computation",
    "come",
    "saw",
    "transaction",
    "actually",
    "saw",
    "confirmations",
    "number",
    "confirmations",
    "number",
    "additional",
    "blocks",
    "added",
    "transaction",
    "went",
    "block",
    "see",
    "confirmations",
    "two",
    "means",
    "block",
    "transaction",
    "two",
    "blocks",
    "ahead",
    "longest",
    "chain",
    "want",
    "point",
    "lot",
    "people",
    "use",
    "proof",
    "work",
    "consensus",
    "protocol",
    "want",
    "say",
    "little",
    "bit",
    "inaccurate",
    "sometimes",
    "people",
    "use",
    "interchangeably",
    "proof",
    "work",
    "piece",
    "overall",
    "consensus",
    "protocol",
    "bitcoin",
    "ethereum",
    "1",
    "current",
    "case",
    "nakamoto",
    "consensus",
    "nakamoto",
    "consensus",
    "combination",
    "proof",
    "work",
    "longest",
    "chain",
    "rule",
    "equally",
    "important",
    "proof",
    "work",
    "also",
    "tells",
    "us",
    "transaction",
    "fees",
    "block",
    "rewards",
    "go",
    "remember",
    "made",
    "transaction",
    "talk",
    "gas",
    "transaction",
    "fee",
    "getting",
    "paid",
    "getting",
    "transaction",
    "transaction",
    "fee",
    "going",
    "miners",
    "validators",
    "proof",
    "work",
    "network",
    "called",
    "miners",
    "proof",
    "stake",
    "network",
    "called",
    "validators",
    "little",
    "bit",
    "get",
    "talk",
    "proof",
    "stake",
    "proof",
    "works",
    "system",
    "nodes",
    "competing",
    "find",
    "answer",
    "blockchain",
    "riddle",
    "remember",
    "example",
    "find",
    "hash",
    "four",
    "zeros",
    "start",
    "depending",
    "blockchain",
    "implementation",
    "riddle",
    "going",
    "little",
    "bit",
    "different",
    "nodes",
    "trying",
    "many",
    "possible",
    "try",
    "get",
    "answer",
    "first",
    "first",
    "node",
    "figure",
    "answer",
    "blockchain",
    "r",
    "going",
    "get",
    "transaction",
    "fee",
    "going",
    "get",
    "paid",
    "paid",
    "node",
    "gets",
    "paid",
    "actually",
    "get",
    "paid",
    "two",
    "different",
    "ways",
    "one",
    "going",
    "transaction",
    "fee",
    "another",
    "piece",
    "going",
    "block",
    "reward",
    "remember",
    "talked",
    "alternating",
    "gas",
    "price",
    "guay",
    "transaction",
    "well",
    "transaction",
    "fee",
    "going",
    "pay",
    "blockchain",
    "nodes",
    "including",
    "transaction",
    "block",
    "reward",
    "given",
    "nodes",
    "protocol",
    "blockchain",
    "probably",
    "heard",
    "bitcoin",
    "referring",
    "block",
    "reward",
    "getting",
    "cut",
    "half",
    "supposed",
    "cut",
    "half",
    "roughly",
    "every",
    "four",
    "years",
    "block",
    "reward",
    "increases",
    "circulating",
    "amount",
    "whatever",
    "cryptocurrency",
    "rewarded",
    "example",
    "ethereum",
    "block",
    "reward",
    "giving",
    "ethereum",
    "bitcoin",
    "block",
    "reward",
    "giving",
    "bitcoin",
    "nodes",
    "competing",
    "first",
    "one",
    "find",
    "transaction",
    "first",
    "one",
    "find",
    "answer",
    "problem",
    "ones",
    "win",
    "block",
    "reward",
    "transaction",
    "fee",
    "blockchains",
    "like",
    "bitcoin",
    "example",
    "time",
    "longer",
    "going",
    "give",
    "block",
    "rewards",
    "miners",
    "nodes",
    "going",
    "get",
    "paid",
    "transaction",
    "fees",
    "gas",
    "fee",
    "paid",
    "whoever",
    "initialized",
    "transaction",
    "got",
    "funds",
    "faucet",
    "server",
    "somebody",
    "else",
    "paying",
    "transaction",
    "fee",
    "us",
    "however",
    "sent",
    "ether",
    "one",
    "account",
    "another",
    "first",
    "account",
    "actually",
    "paid",
    "transaction",
    "fee",
    "send",
    "ether",
    "proof",
    "stake",
    "also",
    "gas",
    "fee",
    "paid",
    "validators",
    "instead",
    "miners",
    "talk",
    "little",
    "bit",
    "let",
    "talk",
    "two",
    "types",
    "attacks",
    "happen",
    "blockchain",
    "worlds",
    "let",
    "talk",
    "first",
    "one",
    "cibil",
    "attack",
    "cibil",
    "attack",
    "user",
    "creates",
    "whole",
    "bunch",
    "pseudo",
    "anonymous",
    "accounts",
    "try",
    "influence",
    "network",
    "obviously",
    "bitcoin",
    "ethereum",
    "really",
    "really",
    "difficult",
    "user",
    "needs",
    "work",
    "proof",
    "work",
    "ton",
    "collateral",
    "proof",
    "stake",
    "talk",
    "bit",
    "prevalent",
    "attack",
    "known",
    "51",
    "percent",
    "attack",
    "saw",
    "part",
    "consensus",
    "protocol",
    "blockchains",
    "going",
    "agree",
    "longest",
    "chain",
    "one",
    "going",
    "go",
    "long",
    "matches",
    "51",
    "rest",
    "network",
    "means",
    "longest",
    "chain",
    "51",
    "rest",
    "network",
    "called",
    "fork",
    "network",
    "bring",
    "network",
    "onto",
    "longest",
    "chain",
    "cibil",
    "attacks",
    "obviously",
    "single",
    "node",
    "single",
    "entity",
    "tries",
    "affect",
    "decentral",
    "network",
    "tending",
    "multiple",
    "different",
    "people",
    "although",
    "person",
    "entity",
    "like",
    "said",
    "really",
    "difficult",
    "proof",
    "work",
    "proof",
    "stake",
    "see",
    "blockchains",
    "democratic",
    "whichever",
    "blockchain",
    "buy",
    "longest",
    "blockchain",
    "whole",
    "system",
    "going",
    "corroborate",
    "nodes",
    "produce",
    "new",
    "block",
    "add",
    "longest",
    "chain",
    "nodes",
    "follow",
    "longest",
    "chain",
    "rest",
    "network",
    "agreeing",
    "add",
    "blocks",
    "chain",
    "follow",
    "small",
    "reorganizations",
    "actually",
    "pretty",
    "common",
    "blockchain",
    "chain",
    "picks",
    "block",
    "different",
    "longest",
    "chain",
    "puts",
    "swap",
    "another",
    "block",
    "continue",
    "different",
    "blockchain",
    "however",
    "group",
    "nodes",
    "enough",
    "nodes",
    "enough",
    "power",
    "could",
    "essentially",
    "51",
    "network",
    "influence",
    "network",
    "whatever",
    "direction",
    "wanted",
    "known",
    "51",
    "attack",
    "happened",
    "blockchains",
    "like",
    "ethereum",
    "classic",
    "ethereum",
    "bigger",
    "blockchain",
    "decentralized",
    "secure",
    "becomes",
    "watch",
    "video",
    "become",
    "blockchain",
    "engineering",
    "expert",
    "definitely",
    "recommend",
    "run",
    "note",
    "well",
    "going",
    "increase",
    "security",
    "network",
    "whole",
    "running",
    "node",
    "proof",
    "work",
    "fantastic",
    "allows",
    "us",
    "easily",
    "protect",
    "cil",
    "attacks",
    "keep",
    "blockchains",
    "decentralized",
    "secure",
    "however",
    "drawbacks",
    "well",
    "proof",
    "work",
    "costs",
    "lot",
    "electricity",
    "every",
    "single",
    "node",
    "running",
    "fast",
    "win",
    "race",
    "get",
    "rewards",
    "leads",
    "obviously",
    "environmental",
    "impact",
    "since",
    "proof",
    "work",
    "nakamoto",
    "consensus",
    "lot",
    "protocols",
    "taken",
    "idea",
    "gone",
    "different",
    "direction",
    "different",
    "civil",
    "resistance",
    "protocol",
    "lot",
    "intention",
    "lot",
    "environmentally",
    "friendly",
    "popular",
    "one",
    "right",
    "proof",
    "stake",
    "chains",
    "already",
    "using",
    "proof",
    "stake",
    "protocol",
    "live",
    "thriving",
    "like",
    "avalanche",
    "salana",
    "polygon",
    "polka",
    "dot",
    "tera",
    "additionally",
    "ethereum",
    "decided",
    "upgrade",
    "eth2",
    "proof",
    "stake",
    "algorithm",
    "well",
    "well",
    "also",
    "features",
    "talk",
    "bit",
    "quick",
    "aside",
    "tools",
    "going",
    "learn",
    "still",
    "going",
    "work",
    "e",
    "two",
    "depending",
    "watch",
    "everything",
    "still",
    "valid",
    "let",
    "talk",
    "proof",
    "stake",
    "different",
    "civil",
    "resistance",
    "mechanism",
    "instead",
    "solving",
    "difficult",
    "problem",
    "proof",
    "stake",
    "nodes",
    "put",
    "collateral",
    "going",
    "behave",
    "honestly",
    "aka",
    "stake",
    "example",
    "ethereum",
    "2",
    "nodes",
    "put",
    "ethereum",
    "stake",
    "going",
    "behave",
    "honestly",
    "network",
    "misbehave",
    "network",
    "going",
    "slashed",
    "removed",
    "state",
    "obviously",
    "good",
    "civil",
    "resistance",
    "mechanism",
    "try",
    "create",
    "whole",
    "bunch",
    "anonymous",
    "accounts",
    "one",
    "accounts",
    "put",
    "stake",
    "misbehave",
    "going",
    "run",
    "risk",
    "losing",
    "money",
    "put",
    "collateral",
    "system",
    "miners",
    "actually",
    "called",
    "validators",
    "longer",
    "binding",
    "anything",
    "actually",
    "validating",
    "nodes",
    "unlike",
    "proof",
    "work",
    "every",
    "node",
    "ing",
    "first",
    "one",
    "find",
    "block",
    "proof",
    "stake",
    "nodes",
    "actually",
    "randomly",
    "chosen",
    "propose",
    "new",
    "block",
    "rest",
    "validators",
    "validate",
    "node",
    "proposed",
    "block",
    "honestly",
    "saw",
    "cryptography",
    "lesson",
    "usually",
    "easy",
    "nodes",
    "verify",
    "proposal",
    "transaction",
    "honest",
    "randomness",
    "really",
    "important",
    "topic",
    "talking",
    "blockchains",
    "keep",
    "mind",
    "blockchains",
    "deterministic",
    "systems",
    "walled",
    "gardens",
    "rest",
    "world",
    "know",
    "determinate",
    "system",
    "definition",
    "ca",
    "random",
    "numbers",
    "choose",
    "random",
    "validators",
    "system",
    "well",
    "changes",
    "blockchain",
    "blockchain",
    "actually",
    "choosing",
    "node",
    "change",
    "blockchain",
    "blockchain",
    "e2",
    "using",
    "called",
    "randow",
    "least",
    "original",
    "implementation",
    "decentralized",
    "autonomous",
    "organization",
    "collectively",
    "chooses",
    "random",
    "number",
    "collectively",
    "chooses",
    "node",
    "going",
    "run",
    "next",
    "going",
    "dive",
    "deep",
    "good",
    "chance",
    "might",
    "change",
    "future",
    "go",
    "randomness",
    "solutions",
    "blockchain",
    "later",
    "course",
    "proof",
    "stake",
    "obviously",
    "pros",
    "cons",
    "well",
    "pros",
    "great",
    "civil",
    "resistance",
    "mechanism",
    "great",
    "way",
    "figure",
    "author",
    "block",
    "pros",
    "way",
    "less",
    "computationally",
    "expensive",
    "figure",
    "new",
    "block",
    "instead",
    "every",
    "single",
    "node",
    "network",
    "trying",
    "one",
    "node",
    "needs",
    "rest",
    "nodes",
    "need",
    "validate",
    "cons",
    "usually",
    "considered",
    "slightly",
    "less",
    "decentralized",
    "network",
    "due",
    "upfront",
    "staking",
    "costs",
    "costs",
    "participate",
    "gets",
    "little",
    "bit",
    "philosophical",
    "battle",
    "decentralized",
    "decentralized",
    "enough",
    "think",
    "community",
    "decide",
    "progress",
    "think",
    "learn",
    "decentralized",
    "decentralized",
    "enough",
    "general",
    "consensus",
    "amongst",
    "blockchain",
    "engineers",
    "though",
    "proof",
    "stake",
    "decentralized",
    "secure",
    "massive",
    "environmental",
    "impact",
    "improvement",
    "one",
    "two",
    "main",
    "reasons",
    "eth",
    "shifting",
    "eth",
    "2",
    "reduces",
    "environmental",
    "impact",
    "99",
    "main",
    "pieces",
    "proof",
    "work",
    "proof",
    "stake",
    "want",
    "talk",
    "another",
    "concept",
    "really",
    "important",
    "ecosystems",
    "scalability",
    "talking",
    "gas",
    "prices",
    "saying",
    "gas",
    "prices",
    "get",
    "really",
    "high",
    "lot",
    "people",
    "want",
    "send",
    "transaction",
    "block",
    "much",
    "block",
    "space",
    "nodes",
    "add",
    "many",
    "nodes",
    "lot",
    "people",
    "want",
    "use",
    "blockchain",
    "gas",
    "price",
    "skyrockets",
    "scalable",
    "want",
    "add",
    "people",
    "blockchains",
    "going",
    "cost",
    "use",
    "blockchains",
    "people",
    "going",
    "want",
    "get",
    "blocks",
    "means",
    "kind",
    "ceiling",
    "many",
    "people",
    "use",
    "system",
    "financial",
    "constraints",
    "get",
    "imposed",
    "gas",
    "prices",
    "keep",
    "rising",
    "ethereum",
    "2",
    "attacking",
    "environmental",
    "impact",
    "proof",
    "work",
    "switching",
    "proof",
    "stake",
    "also",
    "implementing",
    "new",
    "methodology",
    "called",
    "sharding",
    "sharding",
    "solution",
    "scalability",
    "problem",
    "sharded",
    "blockchain",
    "really",
    "means",
    "going",
    "blockchain",
    "blockchains",
    "main",
    "chain",
    "going",
    "coordinate",
    "everything",
    "amongst",
    "several",
    "chains",
    "hook",
    "main",
    "chain",
    "means",
    "chains",
    "people",
    "make",
    "transactions",
    "effectively",
    "increasing",
    "amount",
    "block",
    "space",
    "sharding",
    "greatly",
    "increase",
    "number",
    "transactions",
    "blockchain",
    "layer",
    "one",
    "another",
    "term",
    "might",
    "first",
    "time",
    "heard",
    "layer",
    "one",
    "going",
    "talk",
    "layer",
    "ones",
    "layer",
    "twos",
    "terms",
    "scalability",
    "really",
    "quickly",
    "well",
    "layer",
    "one",
    "refers",
    "base",
    "layer",
    "blockchain",
    "implementation",
    "bitcoin",
    "layer",
    "one",
    "ethereum",
    "layer",
    "one",
    "avalanche",
    "layer",
    "one",
    "bas",
    "layer",
    "blockchain",
    "solutions",
    "layer",
    "two",
    "application",
    "added",
    "top",
    "layer",
    "one",
    "added",
    "top",
    "blockchain",
    "examples",
    "layer",
    "twos",
    "going",
    "chain",
    "link",
    "arbitrum",
    "optimism",
    "arbitrum",
    "optimism",
    "interesting",
    "layer",
    "twos",
    "also",
    "look",
    "solve",
    "scalability",
    "issue",
    "arbitrum",
    "optimism",
    "known",
    "rollups",
    "roll",
    "transactions",
    "layer",
    "one",
    "like",
    "ethereum",
    "going",
    "go",
    "deep",
    "rollups",
    "actually",
    "work",
    "really",
    "need",
    "know",
    "rollup",
    "kind",
    "like",
    "sharded",
    "chain",
    "derive",
    "security",
    "bas",
    "layer",
    "layer",
    "one",
    "like",
    "ethereum",
    "bulk",
    "send",
    "transactions",
    "onto",
    "layer",
    "one",
    "solve",
    "scalability",
    "issues",
    "another",
    "blockchain",
    "people",
    "make",
    "transactions",
    "still",
    "kind",
    "base",
    "ethereum",
    "layer",
    "different",
    "side",
    "chains",
    "side",
    "chains",
    "derive",
    "security",
    "protocols",
    "rollups",
    "derive",
    "security",
    "base",
    "layers",
    "arbitrum",
    "optimism",
    "example",
    "going",
    "secure",
    "ethereum",
    "fantastic",
    "guys",
    "go",
    "little",
    "bit",
    "deeper",
    "rollups",
    "left",
    "link",
    "description",
    "right",
    "talked",
    "lot",
    "stuff",
    "let",
    "quick",
    "recap",
    "moving",
    "ethereum",
    "bitcoin",
    "currently",
    "proof",
    "ofor",
    "blockchains",
    "follow",
    "nakamoto",
    "consensus",
    "however",
    "ethereum",
    "moving",
    "ethereum",
    "2",
    "proof",
    "stake",
    "sharded",
    "blockchain",
    "civil",
    "attacks",
    "prevented",
    "due",
    "protocols",
    "like",
    "proof",
    "work",
    "proof",
    "stake",
    "51",
    "attacks",
    "grow",
    "increasingly",
    "harder",
    "size",
    "blockchain",
    "run",
    "node",
    "consensus",
    "mechanism",
    "allows",
    "blockchain",
    "agree",
    "upon",
    "state",
    "blockchain",
    "sharding",
    "solutions",
    "scalability",
    "issues",
    "layer",
    "ones",
    "layer",
    "one",
    "base",
    "blockchain",
    "implementation",
    "like",
    "bitcoin",
    "ethereum",
    "blockchain",
    "scalability",
    "problem",
    "always",
    "enough",
    "block",
    "space",
    "amount",
    "transactions",
    "want",
    "get",
    "leads",
    "high",
    "gas",
    "prices",
    "gas",
    "prices",
    "much",
    "costs",
    "interact",
    "blockchain",
    "learned",
    "ton",
    "video",
    "far",
    "everything",
    "went",
    "going",
    "make",
    "10",
    "times",
    "better",
    "developer",
    "yes",
    "good",
    "developer",
    "means",
    "understand",
    "code",
    "technical",
    "level",
    "understand",
    "overall",
    "architecture",
    "well",
    "make",
    "informed",
    "decisions",
    "architect",
    "design",
    "build",
    "software",
    "however",
    "want",
    "said",
    "finally",
    "time",
    "jump",
    "solidity",
    "jump",
    "code",
    "let",
    "description",
    "video",
    "link",
    "github",
    "repository",
    "going",
    "home",
    "base",
    "code",
    "work",
    "tutorial",
    "scroll",
    "main",
    "section",
    "read",
    "table",
    "contents",
    "go",
    "lesson",
    "one",
    "simple",
    "storage",
    "links",
    "helpful",
    "tips",
    "itinerary",
    "going",
    "learn",
    "everything",
    "else",
    "need",
    "work",
    "code",
    "going",
    "working",
    "located",
    "syle",
    "storage",
    "link",
    "go",
    "ahead",
    "click",
    "different",
    "repository",
    "go",
    "ahead",
    "click",
    "file",
    "see",
    "code",
    "going",
    "working",
    "let",
    "jump",
    "additionally",
    "back",
    "full",
    "blockchain",
    "solidity",
    "course",
    "right",
    "top",
    "resources",
    "course",
    "section",
    "questions",
    "engaging",
    "github",
    "discussions",
    "stack",
    "exchange",
    "ethereum",
    "stack",
    "overflow",
    "going",
    "great",
    "places",
    "get",
    "help",
    "get",
    "support",
    "highly",
    "recommend",
    "making",
    "stack",
    "overflow",
    "stack",
    "exchange",
    "ethereum",
    "github",
    "account",
    "participate",
    "engage",
    "community",
    "welcome",
    "remix",
    "ide",
    "remix",
    "integrated",
    "development",
    "environment",
    "going",
    "starting",
    "teach",
    "work",
    "solidity",
    "work",
    "smart",
    "contracts",
    "deploy",
    "blockchains",
    "going",
    "use",
    "remix",
    "get",
    "us",
    "speed",
    "lot",
    "nice",
    "features",
    "allow",
    "us",
    "really",
    "see",
    "interact",
    "blockchains",
    "really",
    "see",
    "going",
    "eventually",
    "actually",
    "going",
    "move",
    "remix",
    "another",
    "platform",
    "solidity",
    "going",
    "learn",
    "obviously",
    "going",
    "apply",
    "everywhere",
    "well",
    "come",
    "remix",
    "whole",
    "lot",
    "different",
    "plugins",
    "like",
    "solidity",
    "learn",
    "eth",
    "soul",
    "hint",
    "linter",
    "whole",
    "bunch",
    "plugins",
    "well",
    "well",
    "going",
    "go",
    "ahead",
    "start",
    "clicking",
    "solidity",
    "plugin",
    "going",
    "use",
    "plugins",
    "later",
    "kind",
    "go",
    "back",
    "learn",
    "little",
    "bit",
    "plugins",
    "let",
    "start",
    "perusing",
    "let",
    "start",
    "coding",
    "things",
    "left",
    "hand",
    "side",
    "going",
    "interact",
    "everything",
    "let",
    "go",
    "ahead",
    "click",
    "files",
    "always",
    "go",
    "back",
    "peruse",
    "little",
    "bit",
    "fact",
    "highly",
    "encourage",
    "going",
    "learn",
    "quickest",
    "us",
    "actually",
    "going",
    "go",
    "ahead",
    "start",
    "brand",
    "new",
    "file",
    "going",
    "create",
    "little",
    "application",
    "store",
    "information",
    "blockchain",
    "us",
    "first",
    "project",
    "going",
    "solidity",
    "actually",
    "going",
    "create",
    "new",
    "file",
    "going",
    "call",
    "simple",
    "storage",
    "doou",
    "solidity",
    "extension",
    "soul",
    "end",
    "stands",
    "solidity",
    "let",
    "take",
    "inventory",
    "going",
    "working",
    "solidity",
    "compiler",
    "tab",
    "compiles",
    "solidity",
    "code",
    "machine",
    "understandable",
    "code",
    "machine",
    "language",
    "whole",
    "bunch",
    "different",
    "parameters",
    "choose",
    "working",
    "sidity",
    "choose",
    "compiler",
    "version",
    "choose",
    "language",
    "going",
    "working",
    "solidity",
    "evm",
    "version",
    "worry",
    "let",
    "code",
    "first",
    "solidity",
    "contract",
    "going",
    "use",
    "something",
    "little",
    "bit",
    "special",
    "actually",
    "deploy",
    "going",
    "use",
    "javascript",
    "virtual",
    "machine",
    "going",
    "use",
    "virtual",
    "machine",
    "going",
    "simulate",
    "actually",
    "deploying",
    "test",
    "net",
    "real",
    "network",
    "actually",
    "going",
    "deploy",
    "real",
    "network",
    "little",
    "bit",
    "get",
    "started",
    "going",
    "work",
    "javascript",
    "vm",
    "kind",
    "fake",
    "environment",
    "okay",
    "testing",
    "locally",
    "understanding",
    "test",
    "locally",
    "make",
    "coding",
    "experience",
    "lot",
    "faster",
    "saw",
    "sent",
    "transactions",
    "actually",
    "took",
    "lot",
    "time",
    "actually",
    "deploy",
    "want",
    "spend",
    "much",
    "time",
    "waiting",
    "around",
    "test",
    "actually",
    "finish",
    "going",
    "use",
    "javascript",
    "vm",
    "kind",
    "dummy",
    "let",
    "start",
    "coding",
    "go",
    "first",
    "thing",
    "going",
    "need",
    "solidity",
    "program",
    "solidity",
    "version",
    "always",
    "going",
    "top",
    "solidity",
    "code",
    "defined",
    "pragma",
    "solidity",
    "version",
    "going",
    "using",
    "version",
    "saying",
    "want",
    "use",
    "anything",
    "force",
    "habit",
    "automatically",
    "hit",
    "command",
    "whenever",
    "write",
    "anything",
    "saw",
    "pop",
    "hitting",
    "command",
    "controls",
    "depending",
    "windows",
    "hit",
    "compile",
    "button",
    "compile",
    "everything",
    "us",
    "want",
    "specific",
    "version",
    "solidity",
    "also",
    "go",
    "ahead",
    "hit",
    "command",
    "compile",
    "compiler",
    "automatically",
    "vert",
    "however",
    "try",
    "solidity",
    "going",
    "give",
    "us",
    "error",
    "going",
    "say",
    "source",
    "file",
    "requires",
    "different",
    "compiler",
    "version",
    "using",
    "going",
    "go",
    "ahead",
    "hit",
    "compile",
    "going",
    "automatically",
    "move",
    "also",
    "carrot",
    "allow",
    "us",
    "work",
    "really",
    "version",
    "work",
    "way",
    "hit",
    "command",
    "contrl",
    "give",
    "us",
    "error",
    "works",
    "version",
    "going",
    "using",
    "version",
    "however",
    "future",
    "contracts",
    "work",
    "actually",
    "going",
    "work",
    "different",
    "versions",
    "solidity",
    "reason",
    "going",
    "changing",
    "versions",
    "throughout",
    "course",
    "solidity",
    "constantly",
    "updating",
    "language",
    "good",
    "switching",
    "versions",
    "going",
    "make",
    "incredibly",
    "powerful",
    "smart",
    "contract",
    "engineer",
    "next",
    "thing",
    "going",
    "going",
    "define",
    "contract",
    "contract",
    "key",
    "word",
    "solidity",
    "stands",
    "smart",
    "contract",
    "going",
    "create",
    "think",
    "contract",
    "similar",
    "class",
    "java",
    "programming",
    "language",
    "going",
    "give",
    "contract",
    "name",
    "going",
    "call",
    "simple",
    "storage",
    "going",
    "add",
    "little",
    "curly",
    "bracket",
    "say",
    "contents",
    "contract",
    "simple",
    "storage",
    "went",
    "ahead",
    "hit",
    "command",
    "see",
    "compiling",
    "successfully",
    "could",
    "hypothetically",
    "deploy",
    "right",
    "would",
    "valid",
    "contract",
    "great",
    "job",
    "making",
    "far",
    "solidity",
    "many",
    "different",
    "types",
    "work",
    "let",
    "go",
    "types",
    "solidity",
    "integers",
    "aka",
    "whole",
    "numbers",
    "uint",
    "unsigned",
    "integer",
    "meaning",
    "positive",
    "negative",
    "also",
    "int",
    "would",
    "define",
    "variable",
    "uint",
    "256",
    "favorite",
    "number",
    "equals",
    "5",
    "unsigned",
    "integer",
    "un",
    "256",
    "means",
    "integer",
    "size",
    "256",
    "bits",
    "number",
    "256",
    "also",
    "uint",
    "favorite",
    "number",
    "equals",
    "5",
    "want",
    "little",
    "bit",
    "precise",
    "lot",
    "protols",
    "lar",
    "smart",
    "contracts",
    "whole",
    "name",
    "like",
    "256",
    "also",
    "booleans",
    "booleans",
    "true",
    "false",
    "boolean",
    "favorite",
    "bull",
    "equals",
    "true",
    "favorite",
    "pool",
    "would",
    "true",
    "could",
    "also",
    "false",
    "strings",
    "string",
    "favorite",
    "string",
    "equals",
    "string",
    "string",
    "string",
    "text",
    "right",
    "going",
    "word",
    "phrase",
    "really",
    "key",
    "strokes",
    "similar",
    "unsigned",
    "integer",
    "int",
    "256",
    "favorite",
    "int",
    "equals",
    "ne5",
    "could",
    "positive",
    "negative",
    "address",
    "going",
    "type",
    "ethereum",
    "address",
    "could",
    "address",
    "favorite",
    "address",
    "equals",
    "even",
    "copy",
    "right",
    "metamask",
    "paste",
    "right",
    "going",
    "valid",
    "address",
    "also",
    "notice",
    "end",
    "statements",
    "semicolon",
    "bytes",
    "object",
    "size",
    "32",
    "bits",
    "favorite",
    "btes",
    "example",
    "going",
    "use",
    "word",
    "cat",
    "cat",
    "string",
    "ring",
    "converted",
    "bytes",
    "object",
    "bytes",
    "32",
    "means",
    "32",
    "bytes",
    "variable",
    "favored",
    "bytes",
    "also",
    "bytes",
    "2",
    "bytes",
    "3",
    "bytes",
    "5",
    "etc",
    "maximum",
    "size",
    "bytes",
    "32",
    "example",
    "ca",
    "bytes",
    "64",
    "going",
    "talking",
    "variables",
    "well",
    "like",
    "arrays",
    "mappings",
    "let",
    "stick",
    "want",
    "learn",
    "different",
    "types",
    "different",
    "variables",
    "use",
    "head",
    "solidity",
    "documentation",
    "link",
    "g",
    "github",
    "description",
    "show",
    "section",
    "simple",
    "storage",
    "let",
    "say",
    "want",
    "store",
    "numbers",
    "want",
    "store",
    "anything",
    "else",
    "going",
    "go",
    "ahead",
    "delete",
    "everything",
    "ent",
    "256",
    "favorite",
    "number",
    "top",
    "solidity",
    "favorite",
    "number",
    "actually",
    "get",
    "initialized",
    "even",
    "though",
    "initialized",
    "five",
    "leave",
    "blank",
    "gets",
    "initialized",
    "null",
    "value",
    "case",
    "would",
    "initialized",
    "zero",
    "let",
    "initialize",
    "anything",
    "way",
    "get",
    "automatically",
    "initialized",
    "zero",
    "means",
    "deploy",
    "contract",
    "right",
    "favorite",
    "number",
    "start",
    "zero",
    "get",
    "confused",
    "also",
    "make",
    "comment",
    "could",
    "say",
    "get",
    "initialized",
    "zero",
    "double",
    "slash",
    "way",
    "make",
    "comments",
    "solidity",
    "wo",
    "get",
    "executed",
    "code",
    "write",
    "whatever",
    "want",
    "long",
    "preceded",
    "two",
    "backslashes",
    "let",
    "go",
    "ahead",
    "create",
    "first",
    "function",
    "functions",
    "methods",
    "modules",
    "execute",
    "task",
    "us",
    "solidity",
    "exact",
    "thing",
    "defined",
    "keyword",
    "function",
    "let",
    "make",
    "function",
    "called",
    "store",
    "change",
    "value",
    "favorite",
    "number",
    "going",
    "call",
    "store",
    "going",
    "allow",
    "passed",
    "variable",
    "going",
    "allow",
    "passed",
    "variable",
    "type",
    "unsigned",
    "integer",
    "256",
    "going",
    "call",
    "underscore",
    "fave",
    "rit",
    "number",
    "going",
    "make",
    "public",
    "function",
    "get",
    "minute",
    "going",
    "going",
    "set",
    "favorite",
    "number",
    "equals",
    "whatever",
    "variable",
    "passed",
    "favorite",
    "number",
    "simplest",
    "form",
    "define",
    "function",
    "visualize",
    "working",
    "far",
    "let",
    "go",
    "ahead",
    "deploy",
    "contract",
    "actually",
    "start",
    "interact",
    "hit",
    "button",
    "bring",
    "us",
    "deploy",
    "tab",
    "allow",
    "us",
    "deploy",
    "smart",
    "contract",
    "using",
    "javascript",
    "vm",
    "given",
    "us",
    "fake",
    "account",
    "ethereum",
    "100",
    "ethereum",
    "start",
    "anytime",
    "want",
    "interact",
    "blockchain",
    "pay",
    "little",
    "bit",
    "gas",
    "even",
    "fake",
    "virtual",
    "machine",
    "want",
    "simulate",
    "see",
    "parameters",
    "making",
    "transaction",
    "like",
    "gas",
    "limit",
    "example",
    "deploy",
    "contract",
    "going",
    "cost",
    "little",
    "bit",
    "ethereum",
    "little",
    "bit",
    "gas",
    "let",
    "go",
    "ahead",
    "hit",
    "deploy",
    "button",
    "see",
    "happens",
    "deployed",
    "virtual",
    "machine",
    "things",
    "happened",
    "remix",
    "kicking",
    "section",
    "saying",
    "great",
    "job",
    "deployed",
    "something",
    "scroll",
    "says",
    "transactions",
    "recorded",
    "one",
    "look",
    "transactions",
    "recorded",
    "see",
    "says",
    "deployed",
    "contracts",
    "contract",
    "deployed",
    "let",
    "zoom",
    "hair",
    "see",
    "everything",
    "little",
    "bit",
    "better",
    "simple",
    "storage",
    "contract",
    "see",
    "big",
    "store",
    "button",
    "one",
    "public",
    "function",
    "actually",
    "interact",
    "add",
    "number",
    "hit",
    "store",
    "see",
    "completed",
    "transaction",
    "look",
    "contract",
    "paid",
    "little",
    "bit",
    "gas",
    "right",
    "paid",
    "little",
    "bit",
    "interact",
    "function",
    "anytime",
    "want",
    "make",
    "state",
    "change",
    "blockchain",
    "pay",
    "little",
    "bit",
    "gas",
    "reason",
    "metamask",
    "popping",
    "kind",
    "simulated",
    "environment",
    "great",
    "however",
    "looks",
    "like",
    "ca",
    "actually",
    "see",
    "favorite",
    "number",
    "ca",
    "actually",
    "look",
    "actually",
    "make",
    "sure",
    "view",
    "favorite",
    "number",
    "well",
    "let",
    "add",
    "another",
    "parameter",
    "well",
    "add",
    "public",
    "favorite",
    "number",
    "recompile",
    "hitting",
    "command",
    "hit",
    "compile",
    "button",
    "delete",
    "contract",
    "redeploy",
    "scroll",
    "see",
    "two",
    "buttons",
    "pop",
    "blue",
    "button",
    "show",
    "us",
    "favorite",
    "number",
    "initialized",
    "zero",
    "store",
    "function",
    "let",
    "talk",
    "little",
    "bit",
    "public",
    "variable",
    "allowed",
    "us",
    "see",
    "new",
    "button",
    "new",
    "favorite",
    "number",
    "button",
    "public",
    "public",
    "keyword",
    "defines",
    "visibility",
    "variable",
    "function",
    "currently",
    "four",
    "different",
    "types",
    "called",
    "visibility",
    "solidity",
    "external",
    "public",
    "internal",
    "private",
    "mostly",
    "going",
    "working",
    "public",
    "important",
    "know",
    "rest",
    "work",
    "public",
    "functions",
    "called",
    "anybody",
    "including",
    "variables",
    "oddly",
    "enough",
    "variables",
    "function",
    "call",
    "look",
    "return",
    "whatever",
    "variable",
    "external",
    "function",
    "means",
    "ca",
    "called",
    "contract",
    "called",
    "external",
    "contract",
    "contract",
    "external",
    "could",
    "call",
    "store",
    "function",
    "could",
    "call",
    "store",
    "function",
    "inside",
    "function",
    "function",
    "external",
    "means",
    "somebody",
    "outside",
    "contract",
    "call",
    "function",
    "internal",
    "functions",
    "however",
    "called",
    "functions",
    "inside",
    "contract",
    "derived",
    "contract",
    "private",
    "restrictive",
    "private",
    "functions",
    "state",
    "variables",
    "visible",
    "contract",
    "defined",
    "derived",
    "contracts",
    "reason",
    "see",
    "favorite",
    "numberers",
    "show",
    "original",
    "contract",
    "deployment",
    "give",
    "state",
    "variable",
    "visibility",
    "automatically",
    "get",
    "set",
    "internal",
    "want",
    "people",
    "able",
    "read",
    "change",
    "public",
    "let",
    "see",
    "interaction",
    "actually",
    "works",
    "hit",
    "favorite",
    "number",
    "button",
    "right",
    "get",
    "call",
    "thing",
    "shows",
    "show",
    "us",
    "right",
    "value",
    "favorite",
    "number",
    "zero",
    "function",
    "however",
    "set",
    "whatever",
    "value",
    "pass",
    "going",
    "change",
    "favorite",
    "number",
    "whatever",
    "pass",
    "pass",
    "1",
    "two",
    "3",
    "hit",
    "store",
    "transaction",
    "goes",
    "hit",
    "favorite",
    "number",
    "see",
    "value",
    "one",
    "two",
    "three",
    "also",
    "using",
    "transactions",
    "smart",
    "contract",
    "interactions",
    "function",
    "calls",
    "little",
    "bit",
    "interchangeably",
    "blockchain",
    "whenever",
    "call",
    "function",
    "whenever",
    "make",
    "state",
    "change",
    "blockchain",
    "actually",
    "also",
    "making",
    "transaction",
    "makes",
    "whole",
    "thing",
    "powerful",
    "making",
    "function",
    "call",
    "deploying",
    "contract",
    "costs",
    "little",
    "bit",
    "gas",
    "reason",
    "access",
    "favorite",
    "number",
    "variable",
    "inside",
    "function",
    "favorite",
    "number",
    "global",
    "contract",
    "scope",
    "even",
    "made",
    "un",
    "256",
    "test",
    "equals",
    "4",
    "equals",
    "equals",
    "4",
    "would",
    "able",
    "use",
    "variable",
    "outside",
    "function",
    "right",
    "inside",
    "bracket",
    "make",
    "another",
    "function",
    "store",
    "two",
    "perhaps",
    "public",
    "store",
    "two",
    "know",
    "test",
    "variable",
    "exists",
    "functions",
    "know",
    "variables",
    "scope",
    "favorite",
    "number",
    "global",
    "scope",
    "bracket",
    "simple",
    "storage",
    "test",
    "store",
    "scope",
    "two",
    "brackets",
    "inside",
    "store",
    "function",
    "inside",
    "contract",
    "simple",
    "storage",
    "store",
    "two",
    "inside",
    "store",
    "function",
    "store",
    "scope",
    "ca",
    "access",
    "test",
    "variable",
    "let",
    "go",
    "ahead",
    "make",
    "back",
    "public",
    "compile",
    "hitting",
    "command",
    "compile",
    "go",
    "ahead",
    "click",
    "button",
    "like",
    "let",
    "get",
    "saw",
    "deploy",
    "button",
    "click",
    "called",
    "favorite",
    "number",
    "also",
    "make",
    "function",
    "called",
    "retrieve",
    "make",
    "public",
    "function",
    "type",
    "view",
    "returns",
    "un",
    "went",
    "256",
    "going",
    "return",
    "favorite",
    "number",
    "going",
    "talk",
    "views",
    "returns",
    "going",
    "go",
    "ahead",
    "compile",
    "going",
    "go",
    "ahead",
    "delete",
    "delete",
    "contract",
    "going",
    "go",
    "ahead",
    "deploy",
    "see",
    "two",
    "functions",
    "two",
    "blue",
    "buttons",
    "retrieve",
    "favorite",
    "number",
    "change",
    "favorite",
    "number",
    "calling",
    "store",
    "function",
    "favorite",
    "number",
    "number",
    "retrieve",
    "say",
    "1",
    "2",
    "3",
    "question",
    "might",
    "well",
    "one",
    "orange",
    "two",
    "blue",
    "key",
    "relies",
    "view",
    "function",
    "view",
    "keyword",
    "two",
    "special",
    "keywords",
    "define",
    "functions",
    "actually",
    "make",
    "transaction",
    "keywords",
    "view",
    "pure",
    "view",
    "function",
    "means",
    "want",
    "read",
    "state",
    "blockchain",
    "reading",
    "blockchain",
    "reading",
    "blockchain",
    "actually",
    "making",
    "state",
    "change",
    "need",
    "make",
    "transaction",
    "blue",
    "buttons",
    "blue",
    "view",
    "functions",
    "public",
    "variables",
    "also",
    "view",
    "functions",
    "blue",
    "technically",
    "view",
    "function",
    "click",
    "get",
    "view",
    "get",
    "read",
    "state",
    "blockchain",
    "retrieve",
    "way",
    "could",
    "without",
    "return",
    "would",
    "anything",
    "pure",
    "function",
    "functions",
    "purely",
    "type",
    "math",
    "could",
    "un",
    "256",
    "favorite",
    "number",
    "public",
    "pure",
    "favorite",
    "number",
    "plus",
    "favorite",
    "number",
    "type",
    "math",
    "actually",
    "saving",
    "state",
    "anywhere",
    "going",
    "math",
    "going",
    "save",
    "favorite",
    "number",
    "anywhere",
    "going",
    "save",
    "anything",
    "deploy",
    "pure",
    "function",
    "would",
    "retrieve",
    "function",
    "1",
    "two",
    "3",
    "blue",
    "well",
    "going",
    "change",
    "state",
    "blockchain",
    "view",
    "functions",
    "pure",
    "functions",
    "going",
    "blue",
    "color",
    "reason",
    "nothing",
    "shows",
    "bottom",
    "return",
    "anything",
    "saying",
    "add",
    "two",
    "numbers",
    "together",
    "order",
    "function",
    "give",
    "us",
    "something",
    "back",
    "need",
    "return",
    "something",
    "go",
    "back",
    "retrieve",
    "retrieve",
    "function",
    "define",
    "going",
    "return",
    "defining",
    "function",
    "going",
    "say",
    "public",
    "function",
    "view",
    "function",
    "going",
    "read",
    "state",
    "going",
    "return",
    "u",
    "256",
    "favorite",
    "number",
    "un",
    "256",
    "going",
    "return",
    "public",
    "variable",
    "favorite",
    "name",
    "also",
    "view",
    "function",
    "returns",
    "un26",
    "let",
    "remove",
    "work",
    "retrieve",
    "function",
    "let",
    "go",
    "ahead",
    "deploy",
    "see",
    "favorite",
    "number",
    "button",
    "anymore",
    "longer",
    "public",
    "function",
    "gets",
    "initialized",
    "internal",
    "ca",
    "actually",
    "view",
    "keep",
    "mind",
    "later",
    "going",
    "talk",
    "everything",
    "chain",
    "actually",
    "see",
    "talk",
    "little",
    "bit",
    "later",
    "though",
    "retrieve",
    "going",
    "zero",
    "call",
    "store",
    "retrieve",
    "going",
    "one",
    "two",
    "three",
    "application",
    "great",
    "far",
    "allows",
    "single",
    "person",
    "store",
    "favorite",
    "number",
    "go",
    "ahead",
    "retrieve",
    "later",
    "fantastic",
    "want",
    "list",
    "people",
    "group",
    "people",
    "store",
    "favorite",
    "numbers",
    "want",
    "associate",
    "favorite",
    "number",
    "single",
    "person",
    "well",
    "actually",
    "whole",
    "number",
    "different",
    "choices",
    "one",
    "going",
    "talk",
    "using",
    "struct",
    "structs",
    "ways",
    "define",
    "new",
    "types",
    "solidity",
    "almost",
    "like",
    "creating",
    "new",
    "objects",
    "well",
    "create",
    "struct",
    "called",
    "type",
    "people",
    "allow",
    "start",
    "storing",
    "favorite",
    "number",
    "associated",
    "certain",
    "people",
    "inside",
    "struct",
    "different",
    "types",
    "well",
    "u",
    "256",
    "favorite",
    "number",
    "could",
    "also",
    "string",
    "name",
    "new",
    "type",
    "type",
    "people",
    "favorite",
    "number",
    "name",
    "inside",
    "could",
    "struct",
    "could",
    "say",
    "people",
    "public",
    "person",
    "equals",
    "equals",
    "people",
    "inside",
    "add",
    "variables",
    "could",
    "say",
    "favorite",
    "number",
    "favorite",
    "number",
    "two",
    "name",
    "patri",
    "course",
    "semicolon",
    "end",
    "hitting",
    "command",
    "save",
    "also",
    "go",
    "ahead",
    "head",
    "compile",
    "compil",
    "let",
    "go",
    "ahead",
    "delete",
    "contract",
    "see",
    "looks",
    "like",
    "deployed",
    "new",
    "contract",
    "person",
    "struct",
    "zero",
    "index",
    "favorite",
    "number",
    "variable",
    "stored",
    "first",
    "index",
    "going",
    "name",
    "storing",
    "variables",
    "solidity",
    "always",
    "works",
    "numeric",
    "index",
    "fashion",
    "fact",
    "contract",
    "simple",
    "storage",
    "wi",
    "256",
    "favorite",
    "number",
    "index",
    "zero",
    "add",
    "another",
    "object",
    "like",
    "boolean",
    "favorite",
    "pool",
    "would",
    "index",
    "one",
    "add",
    "buol",
    "favorite",
    "pool",
    "two",
    "would",
    "index",
    "two",
    "0",
    "one",
    "two",
    "works",
    "structs",
    "index",
    "zero",
    "inside",
    "struct",
    "index",
    "one",
    "inside",
    "stru",
    "see",
    "variables",
    "associated",
    "person",
    "going",
    "go",
    "ahead",
    "delete",
    "instead",
    "creating",
    "one",
    "person",
    "actually",
    "want",
    "create",
    "whole",
    "list",
    "people",
    "create",
    "list",
    "people",
    "let",
    "delete",
    "contract",
    "make",
    "called",
    "array",
    "array",
    "way",
    "storing",
    "list",
    "group",
    "object",
    "starting",
    "see",
    "way",
    "syntax",
    "works",
    "defining",
    "type",
    "variable",
    "going",
    "type",
    "variable",
    "visibility",
    "variable",
    "like",
    "public",
    "declare",
    "gets",
    "initial",
    "iz",
    "internal",
    "name",
    "variable",
    "works",
    "arrays",
    "make",
    "people",
    "array",
    "people",
    "array",
    "type",
    "make",
    "public",
    "call",
    "people",
    "deploy",
    "contract",
    "go",
    "see",
    "people",
    "array",
    "click",
    "button",
    "see",
    "nothing",
    "shows",
    "reason",
    "empty",
    "array",
    "start",
    "right",
    "anything",
    "inside",
    "type",
    "array",
    "created",
    "known",
    "dynamic",
    "array",
    "dynamic",
    "array",
    "change",
    "size",
    "right",
    "size",
    "zero",
    "added",
    "something",
    "size",
    "one",
    "also",
    "create",
    "arrays",
    "fixed",
    "size",
    "people",
    "one",
    "public",
    "people",
    "array",
    "could",
    "maximum",
    "one",
    "person",
    "inside",
    "going",
    "work",
    "dynamic",
    "array",
    "though",
    "want",
    "add",
    "arbit",
    "number",
    "people",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "function",
    "called",
    "add",
    "person",
    "add",
    "person",
    "array",
    "function",
    "add",
    "person",
    "string",
    "memory",
    "name",
    "talk",
    "memory",
    "keyword",
    "minute",
    "went",
    "256",
    "favorite",
    "number",
    "make",
    "public",
    "function",
    "inside",
    "add",
    "person",
    "array",
    "way",
    "add",
    "person",
    "arrays",
    "using",
    "push",
    "method",
    "going",
    "push",
    "new",
    "people",
    "new",
    "person",
    "going",
    "give",
    "variables",
    "going",
    "give",
    "going",
    "give",
    "favorite",
    "number",
    "variable",
    "passed",
    "oops",
    "needs",
    "bracket",
    "going",
    "give",
    "name",
    "underscore",
    "name",
    "end",
    "bracket",
    "oops",
    "zoom",
    "see",
    "stuff",
    "needs",
    "semicolon",
    "perfect",
    "last",
    "clip",
    "saw",
    "little",
    "red",
    "box",
    "pop",
    "whenever",
    "little",
    "red",
    "box",
    "like",
    "pops",
    "compile",
    "means",
    "compile",
    "error",
    "means",
    "something",
    "wrong",
    "solidity",
    "code",
    "solidity",
    "syntax",
    "wo",
    "compile",
    "deploy",
    "properly",
    "red",
    "going",
    "compile",
    "error",
    "going",
    "see",
    "bunch",
    "yellow",
    "warnings",
    "future",
    "get",
    "little",
    "yellow",
    "popup",
    "okay",
    "ignore",
    "usually",
    "helpful",
    "tips",
    "something",
    "might",
    "going",
    "wrong",
    "code",
    "summarize",
    "red",
    "red",
    "broken",
    "yellow",
    "might",
    "want",
    "check",
    "could",
    "okay",
    "see",
    "new",
    "function",
    "ad",
    "person",
    "pass",
    "string",
    "memory",
    "memory",
    "name",
    "un",
    "256",
    "favorite",
    "number",
    "create",
    "people",
    "person",
    "people",
    "object",
    "push",
    "onto",
    "people",
    "array",
    "going",
    "show",
    "another",
    "way",
    "actually",
    "create",
    "people",
    "person",
    "passing",
    "favorite",
    "number",
    "name",
    "getting",
    "rid",
    "passing",
    "favorite",
    "number",
    "name",
    "know",
    "zeroth",
    "index",
    "people",
    "favorite",
    "number",
    "first",
    "index",
    "people",
    "named",
    "also",
    "create",
    "new",
    "person",
    "adding",
    "like",
    "let",
    "talk",
    "memory",
    "keyword",
    "solidity",
    "less",
    "two",
    "ways",
    "store",
    "information",
    "store",
    "memory",
    "storage",
    "store",
    "object",
    "memory",
    "actually",
    "means",
    "stored",
    "execution",
    "function",
    "contract",
    "call",
    "hold",
    "storage",
    "means",
    "data",
    "persist",
    "even",
    "function",
    "executes",
    "string",
    "solidity",
    "actually",
    "technically",
    "value",
    "type",
    "string",
    "actually",
    "array",
    "bytes",
    "variable",
    "type",
    "string",
    "actually",
    "special",
    "type",
    "array",
    "append",
    "text",
    "technically",
    "object",
    "decide",
    "want",
    "store",
    "memory",
    "storage",
    "since",
    "need",
    "name",
    "execution",
    "string",
    "memory",
    "name",
    "create",
    "new",
    "people",
    "object",
    "create",
    "new",
    "copy",
    "name",
    "variable",
    "storage",
    "memory",
    "means",
    "execution",
    "delete",
    "variable",
    "storage",
    "means",
    "keep",
    "forever",
    "little",
    "bit",
    "confusing",
    "know",
    "use",
    "parameter",
    "going",
    "string",
    "one",
    "functions",
    "need",
    "call",
    "string",
    "memory",
    "let",
    "go",
    "ahead",
    "deploy",
    "contract",
    "see",
    "happens",
    "new",
    "function",
    "add",
    "person",
    "since",
    "making",
    "state",
    "change",
    "see",
    "indeed",
    "orange",
    "button",
    "instead",
    "blue",
    "button",
    "add",
    "string",
    "name",
    "add",
    "patrick",
    "say",
    "favorite",
    "number",
    "two",
    "right",
    "look",
    "people",
    "see",
    "people",
    "zero",
    "nothing",
    "retrieve",
    "nothing",
    "going",
    "add",
    "person",
    "patrick",
    "hit",
    "people",
    "zero",
    "see",
    "person",
    "zero",
    "withth",
    "index",
    "people",
    "array",
    "going",
    "string",
    "patrick",
    "try",
    "one",
    "nothing",
    "let",
    "add",
    "another",
    "person",
    "add",
    "becca",
    "favorite",
    "number",
    "24",
    "let",
    "add",
    "hit",
    "one",
    "see",
    "favorite",
    "number",
    "24",
    "string",
    "name",
    "becca",
    "retrieve",
    "still",
    "showing",
    "blank",
    "touched",
    "favorite",
    "number",
    "awesome",
    "great",
    "keep",
    "adding",
    "people",
    "however",
    "kind",
    "issue",
    "looking",
    "person",
    "looking",
    "find",
    "becca",
    "find",
    "favorite",
    "number",
    "array",
    "know",
    "name",
    "know",
    "favorite",
    "number",
    "easy",
    "way",
    "find",
    "favorite",
    "number",
    "without",
    "triage",
    "entire",
    "array",
    "another",
    "data",
    "structure",
    "called",
    "mapping",
    "let",
    "create",
    "new",
    "data",
    "structure",
    "data",
    "structure",
    "going",
    "type",
    "mapping",
    "mapping",
    "takes",
    "type",
    "key",
    "spits",
    "whatever",
    "variable",
    "mapped",
    "case",
    "saying",
    "want",
    "use",
    "name",
    "becca",
    "find",
    "favorite",
    "number",
    "would",
    "say",
    "string",
    "becca",
    "going",
    "mapped",
    "u",
    "256",
    "favorite",
    "number",
    "similar",
    "variable",
    "declarations",
    "first",
    "part",
    "going",
    "typing",
    "going",
    "type",
    "mapping",
    "string",
    "mapped",
    "un",
    "256",
    "going",
    "give",
    "public",
    "visibility",
    "call",
    "name",
    "favorite",
    "number",
    "without",
    "adding",
    "functions",
    "work",
    "deploy",
    "see",
    "blue",
    "button",
    "making",
    "state",
    "change",
    "name",
    "favorite",
    "number",
    "type",
    "becca",
    "obviously",
    "nothing",
    "going",
    "happen",
    "added",
    "mapping",
    "yet",
    "ad",
    "person",
    "let",
    "even",
    "ad",
    "person",
    "also",
    "add",
    "mapping",
    "name",
    "favorite",
    "number",
    "key",
    "going",
    "name",
    "becca",
    "going",
    "say",
    "going",
    "map",
    "name",
    "becca",
    "favorite",
    "number",
    "going",
    "go",
    "ahead",
    "compile",
    "hitting",
    "command",
    "deploy",
    "scroll",
    "look",
    "becca",
    "going",
    "get",
    "nothing",
    "however",
    "add",
    "becca",
    "favorite",
    "number",
    "24",
    "add",
    "person",
    "going",
    "add",
    "array",
    "mapping",
    "look",
    "name",
    "favorite",
    "number",
    "see",
    "becca",
    "returns",
    "24",
    "one",
    "thing",
    "want",
    "show",
    "guys",
    "compilers",
    "going",
    "yell",
    "typically",
    "top",
    "contracts",
    "want",
    "add",
    "spx",
    "license",
    "identifier",
    "basically",
    "solidity",
    "ethereum",
    "community",
    "found",
    "trust",
    "smart",
    "contract",
    "better",
    "established",
    "source",
    "code",
    "available",
    "terms",
    "legality",
    "copyright",
    "makes",
    "life",
    "lot",
    "easier",
    "add",
    "license",
    "identifier",
    "right",
    "top",
    "solidity",
    "going",
    "use",
    "mit",
    "license",
    "identifier",
    "open",
    "license",
    "means",
    "hey",
    "anybody",
    "use",
    "code",
    "care",
    "see",
    "majority",
    "solidity",
    "contracts",
    "spx",
    "license",
    "identifier",
    "mit",
    "top",
    "compilers",
    "yell",
    "lot",
    "less",
    "awesome",
    "contract",
    "decided",
    "liked",
    "got",
    "mappings",
    "enables",
    "us",
    "actually",
    "store",
    "people",
    "favorite",
    "numbers",
    "fantastic",
    "done",
    "testing",
    "javascript",
    "vm",
    "decided",
    "know",
    "want",
    "deploy",
    "actual",
    "test",
    "net",
    "actual",
    "main",
    "net",
    "actually",
    "deploy",
    "people",
    "interact",
    "contract",
    "going",
    "use",
    "rink",
    "b",
    "use",
    "make",
    "first",
    "transaction",
    "need",
    "type",
    "test",
    "ethereum",
    "test",
    "net",
    "wallet",
    "get",
    "lost",
    "always",
    "google",
    "rink",
    "b",
    "faucet",
    "rink",
    "tested",
    "faucet",
    "find",
    "faucet",
    "better",
    "alternative",
    "would",
    "come",
    "link",
    "token",
    "contracts",
    "chain",
    "link",
    "documentation",
    "docs",
    "chain",
    "link",
    "scroll",
    "look",
    "rink",
    "link",
    "token",
    "contracts",
    "page",
    "faucets",
    "test",
    "net",
    "supports",
    "example",
    "get",
    "test",
    "eth",
    "faucet",
    "right",
    "also",
    "happens",
    "exact",
    "faucet",
    "used",
    "earlier",
    "thing",
    "need",
    "change",
    "remix",
    "need",
    "change",
    "javascript",
    "vm",
    "injected",
    "web",
    "3",
    "metamask",
    "actually",
    "pop",
    "say",
    "hey",
    "would",
    "like",
    "connect",
    "application",
    "anytime",
    "working",
    "web3",
    "application",
    "web",
    "application",
    "wants",
    "access",
    "funds",
    "work",
    "metamask",
    "metamask",
    "pop",
    "ask",
    "authorization",
    "first",
    "really",
    "good",
    "know",
    "applications",
    "actually",
    "connected",
    "going",
    "go",
    "ahead",
    "say",
    "next",
    "connect",
    "see",
    "even",
    "connected",
    "account",
    "main",
    "network",
    "zero",
    "eth",
    "remix",
    "even",
    "tells",
    "us",
    "hey",
    "main",
    "network",
    "let",
    "go",
    "ahead",
    "switch",
    "rink",
    "b",
    "network",
    "see",
    "rink",
    "b",
    "network",
    "want",
    "use",
    "blockchain",
    "node",
    "web3",
    "provider",
    "injected",
    "web",
    "3",
    "saying",
    "web",
    "3",
    "provider",
    "metamask",
    "work",
    "perfectly",
    "trying",
    "since",
    "already",
    "test",
    "ethereum",
    "let",
    "go",
    "ahead",
    "deploy",
    "see",
    "would",
    "actually",
    "look",
    "like",
    "deploy",
    "main",
    "net",
    "process",
    "going",
    "exactly",
    "right",
    "difference",
    "would",
    "main",
    "net",
    "instead",
    "rank",
    "b",
    "let",
    "go",
    "ahead",
    "hit",
    "deploy",
    "uncheck",
    "published",
    "ipfs",
    "hit",
    "deploy",
    "pop",
    "asking",
    "want",
    "transaction",
    "remember",
    "deploying",
    "contract",
    "changing",
    "state",
    "blockchain",
    "pay",
    "little",
    "bit",
    "gas",
    "fee",
    "going",
    "go",
    "ahead",
    "hit",
    "confirm",
    "get",
    "link",
    "rink",
    "ether",
    "scan",
    "similar",
    "exactly",
    "saw",
    "made",
    "transaction",
    "difference",
    "instead",
    "sending",
    "ethereum",
    "somebody",
    "actually",
    "making",
    "transaction",
    "blockchain",
    "create",
    "contract",
    "short",
    "show",
    "ether",
    "scan",
    "success",
    "number",
    "block",
    "confirmations",
    "number",
    "blocks",
    "appended",
    "block",
    "included",
    "transaction",
    "see",
    "account",
    "see",
    "two",
    "new",
    "contract",
    "created",
    "even",
    "click",
    "see",
    "unique",
    "transaction",
    "hash",
    "created",
    "new",
    "smart",
    "contract",
    "working",
    "vm",
    "exact",
    "functions",
    "see",
    "hit",
    "retrieve",
    "three",
    "functions",
    "since",
    "making",
    "state",
    "change",
    "click",
    "transactions",
    "made",
    "however",
    "think",
    "going",
    "happen",
    "hit",
    "store",
    "guess",
    "metamask",
    "pop",
    "guess",
    "correctly",
    "see",
    "familiar",
    "pieces",
    "gas",
    "price",
    "gas",
    "limit",
    "go",
    "ahead",
    "hit",
    "confirm",
    "get",
    "another",
    "transaction",
    "transaction",
    "goes",
    "able",
    "call",
    "retrieve",
    "function",
    "see",
    "new",
    "number",
    "call",
    "nothing",
    "shows",
    "original",
    "transaction",
    "succeeded",
    "bet",
    "look",
    "okay",
    "still",
    "indexing",
    "looks",
    "like",
    "included",
    "hit",
    "indeed",
    "see",
    "value",
    "thing",
    "adding",
    "person",
    "add",
    "becca",
    "say",
    "favorite",
    "number",
    "24",
    "menam",
    "mask",
    "pop",
    "go",
    "ahead",
    "confirm",
    "transaction",
    "look",
    "becca",
    "name",
    "favorite",
    "string",
    "right",
    "going",
    "show",
    "nothing",
    "transaction",
    "gone",
    "yet",
    "wait",
    "little",
    "bit",
    "probably",
    "spell",
    "name",
    "right",
    "see",
    "24",
    "look",
    "zero",
    "withth",
    "index",
    "also",
    "see",
    "becca",
    "added",
    "well",
    "solidity",
    "code",
    "wrote",
    "interacted",
    "blockchain",
    "solidity",
    "compiled",
    "evm",
    "also",
    "known",
    "ethereum",
    "virtual",
    "machine",
    "lot",
    "blockchains",
    "today",
    "called",
    "evm",
    "compatible",
    "means",
    "solidity",
    "functions",
    "creating",
    "still",
    "compile",
    "evm",
    "deployed",
    "blockchain",
    "find",
    "little",
    "later",
    "look",
    "work",
    "ethereum",
    "based",
    "chain",
    "could",
    "still",
    "deploy",
    "solidity",
    "smart",
    "contracts",
    "chains",
    "well",
    "term",
    "hear",
    "ethereum",
    "virtual",
    "machine",
    "evm",
    "take",
    "break",
    "give",
    "high",
    "five",
    "deployed",
    "first",
    "smart",
    "contract",
    "learned",
    "basics",
    "fundamentals",
    "solidity",
    "huge",
    "congratulations",
    "far",
    "gotten",
    "second",
    "project",
    "going",
    "take",
    "fundamentals",
    "step",
    "start",
    "going",
    "intricacies",
    "solidity",
    "quick",
    "recap",
    "first",
    "thing",
    "always",
    "got",
    "smart",
    "contracts",
    "name",
    "solidity",
    "version",
    "name",
    "contract",
    "contract",
    "solidity",
    "like",
    "class",
    "defines",
    "functions",
    "parameters",
    "contract",
    "many",
    "different",
    "types",
    "solidity",
    "like",
    "unsigned",
    "integer",
    "256",
    "boolean",
    "bytes",
    "create",
    "structs",
    "solidity",
    "create",
    "arrays",
    "solidity",
    "create",
    "mappings",
    "solidity",
    "create",
    "functions",
    "solidity",
    "view",
    "functions",
    "make",
    "state",
    "change",
    "memory",
    "storage",
    "two",
    "different",
    "ways",
    "initialize",
    "variable",
    "going",
    "saved",
    "solidity",
    "code",
    "working",
    "gets",
    "compiled",
    "ethereum",
    "virtual",
    "machine",
    "last",
    "least",
    "congratulations",
    "taking",
    "first",
    "step",
    "learning",
    "solidity",
    "let",
    "move",
    "next",
    "project",
    "code",
    "tips",
    "links",
    "going",
    "working",
    "found",
    "course",
    "repository",
    "scroll",
    "lesson",
    "two",
    "storage",
    "factory",
    "click",
    "see",
    "code",
    "going",
    "working",
    "good",
    "luck",
    "right",
    "done",
    "got",
    "first",
    "contract",
    "way",
    "understanding",
    "basics",
    "solidity",
    "let",
    "move",
    "onward",
    "let",
    "get",
    "little",
    "bit",
    "advanced",
    "going",
    "smart",
    "contracts",
    "let",
    "build",
    "called",
    "factory",
    "pattern",
    "smart",
    "contracts",
    "simple",
    "storage",
    "contract",
    "great",
    "allows",
    "us",
    "store",
    "numbers",
    "store",
    "favorite",
    "numbers",
    "associated",
    "different",
    "people",
    "great",
    "though",
    "want",
    "lot",
    "simple",
    "storage",
    "contracts",
    "deployed",
    "want",
    "give",
    "people",
    "ability",
    "generate",
    "deploy",
    "lists",
    "based",
    "contract",
    "factory",
    "pattern",
    "comes",
    "play",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "contract",
    "contracts",
    "folder",
    "going",
    "new",
    "file",
    "going",
    "call",
    "storage",
    "factory",
    "doso",
    "storage",
    "factory",
    "soul",
    "way",
    "going",
    "need",
    "simple",
    "storage",
    "storage",
    "factory",
    "folder",
    "contract",
    "folder",
    "outside",
    "different",
    "folder",
    "okay",
    "make",
    "sure",
    "wherever",
    "exact",
    "folder",
    "let",
    "figure",
    "get",
    "contract",
    "actually",
    "deploy",
    "another",
    "contract",
    "going",
    "add",
    "basic",
    "pieces",
    "added",
    "simple",
    "storage",
    "soul",
    "add",
    "spdx",
    "license",
    "identifier",
    "mit",
    "choose",
    "solidity",
    "version",
    "pragma",
    "solidity",
    "say",
    "anything",
    "six",
    "range",
    "create",
    "contract",
    "say",
    "contract",
    "storage",
    "factory",
    "create",
    "brackets",
    "going",
    "command",
    "compile",
    "whatever",
    "want",
    "things",
    "looking",
    "good",
    "great",
    "contract",
    "deploy",
    "simple",
    "storage",
    "contract",
    "well",
    "first",
    "thing",
    "going",
    "need",
    "actually",
    "import",
    "simple",
    "storage",
    "storage",
    "factory",
    "contract",
    "need",
    "import",
    "storage",
    "factory",
    "contract",
    "knows",
    "simple",
    "storage",
    "contract",
    "even",
    "looks",
    "like",
    "way",
    "import",
    "command",
    "import",
    "file",
    "path",
    "simple",
    "storage",
    "located",
    "file",
    "path",
    "going",
    "simple",
    "storage",
    "soul",
    "means",
    "simple",
    "storage",
    "exact",
    "directory",
    "storage",
    "factory",
    "line",
    "equivalent",
    "copying",
    "every",
    "everything",
    "contract",
    "bit",
    "coming",
    "storage",
    "factory",
    "pasting",
    "even",
    "save",
    "compile",
    "two",
    "contracts",
    "file",
    "interesting",
    "two",
    "contracts",
    "file",
    "go",
    "deploy",
    "actually",
    "choice",
    "one",
    "want",
    "deploy",
    "thing",
    "import",
    "statement",
    "delete",
    "go",
    "back",
    "imports",
    "simple",
    "storage",
    "deploy",
    "tab",
    "still",
    "see",
    "still",
    "choice",
    "contract",
    "actually",
    "want",
    "deploy",
    "actually",
    "import",
    "contract",
    "import",
    "type",
    "file",
    "want",
    "contract",
    "knows",
    "contract",
    "looks",
    "like",
    "want",
    "contract",
    "able",
    "deploy",
    "simple",
    "storage",
    "contract",
    "course",
    "going",
    "create",
    "function",
    "function",
    "call",
    "create",
    "simple",
    "storage",
    "contract",
    "make",
    "public",
    "function",
    "little",
    "open",
    "close",
    "bracket",
    "way",
    "generate",
    "contract",
    "simple",
    "storage",
    "type",
    "using",
    "new",
    "keyword",
    "let",
    "create",
    "simple",
    "storage",
    "variable",
    "say",
    "variable",
    "type",
    "simple",
    "storage",
    "contract",
    "name",
    "variable",
    "simple",
    "storage",
    "lowercase",
    "equals",
    "new",
    "simple",
    "storage",
    "line",
    "saying",
    "saying",
    "going",
    "create",
    "object",
    "type",
    "simple",
    "storage",
    "contract",
    "going",
    "name",
    "simple",
    "storage",
    "lowercase",
    "going",
    "say",
    "going",
    "new",
    "simple",
    "storage",
    "contract",
    "saying",
    "simple",
    "storage",
    "contract",
    "takes",
    "input",
    "parameters",
    "course",
    "deploy",
    "contract",
    "going",
    "deploy",
    "tab",
    "choosing",
    "storage",
    "factory",
    "staying",
    "javascript",
    "vm",
    "deploying",
    "scrolling",
    "function",
    "return",
    "anything",
    "creating",
    "new",
    "contracts",
    "ca",
    "really",
    "read",
    "contracts",
    "created",
    "look",
    "block",
    "explorer",
    "like",
    "ether",
    "scan",
    "something",
    "let",
    "make",
    "way",
    "us",
    "keep",
    "track",
    "different",
    "simple",
    "storage",
    "contracts",
    "deploy",
    "let",
    "let",
    "put",
    "list",
    "array",
    "say",
    "simple",
    "storage",
    "array",
    "visibility",
    "public",
    "call",
    "simple",
    "storage",
    "array",
    "initialize",
    "simple",
    "storage",
    "array",
    "every",
    "time",
    "deploy",
    "create",
    "one",
    "new",
    "simple",
    "storage",
    "contracts",
    "add",
    "simple",
    "storage",
    "arid",
    "simple",
    "storage",
    "array",
    "push",
    "push",
    "simple",
    "storage",
    "variable",
    "compiling",
    "hitting",
    "command",
    "delete",
    "recent",
    "contract",
    "choose",
    "storage",
    "factory",
    "simple",
    "storage",
    "hit",
    "deploy",
    "scroll",
    "storage",
    "factory",
    "blue",
    "button",
    "stands",
    "simple",
    "storage",
    "array",
    "way",
    "try",
    "see",
    "index",
    "zero",
    "get",
    "error",
    "course",
    "added",
    "anything",
    "yet",
    "click",
    "create",
    "simple",
    "storage",
    "contract",
    "orange",
    "button",
    "created",
    "transaction",
    "going",
    "create",
    "new",
    "simple",
    "storage",
    "contract",
    "push",
    "onto",
    "simple",
    "storage",
    "array",
    "try",
    "access",
    "zero",
    "withth",
    "index",
    "first",
    "index",
    "array",
    "going",
    "get",
    "address",
    "address",
    "simple",
    "storage",
    "contract",
    "deployed",
    "successfully",
    "deployed",
    "contract",
    "blockchain",
    "another",
    "contract",
    "course",
    "really",
    "exciting",
    "actually",
    "deploy",
    "contracts",
    "actually",
    "deploy",
    "contracts",
    "another",
    "contract",
    "call",
    "functions",
    "well",
    "let",
    "create",
    "new",
    "function",
    "call",
    "store",
    "function",
    "also",
    "create",
    "function",
    "call",
    "retrieve",
    "function",
    "storage",
    "factory",
    "function",
    "storage",
    "factory",
    "store",
    "going",
    "saying",
    "sf",
    "store",
    "take",
    "un",
    "256",
    "simple",
    "storage",
    "index",
    "un",
    "256",
    "underscore",
    "simple",
    "storage",
    "number",
    "make",
    "public",
    "variable",
    "well",
    "little",
    "brackets",
    "reason",
    "choosing",
    "simple",
    "storage",
    "index",
    "going",
    "choose",
    "simple",
    "storage",
    "contract",
    "list",
    "want",
    "interact",
    "also",
    "going",
    "pass",
    "simple",
    "storage",
    "number",
    "call",
    "store",
    "function",
    "course",
    "need",
    "pass",
    "favorite",
    "number",
    "anytime",
    "interact",
    "contract",
    "need",
    "two",
    "things",
    "need",
    "address",
    "contract",
    "want",
    "interact",
    "also",
    "need",
    "abi",
    "us",
    "figured",
    "going",
    "push",
    "get",
    "address",
    "simple",
    "storage",
    "array",
    "get",
    "abi",
    "application",
    "binary",
    "interface",
    "import",
    "explain",
    "application",
    "binary",
    "interface",
    "little",
    "bit",
    "later",
    "know",
    "order",
    "us",
    "interact",
    "simple",
    "storage",
    "contract",
    "simple",
    "storage",
    "pass",
    "simple",
    "storage",
    "address",
    "simple",
    "storage",
    "contract",
    "get",
    "address",
    "simple",
    "storage",
    "contract",
    "say",
    "grab",
    "address",
    "inside",
    "simple",
    "storage",
    "array",
    "index",
    "simple",
    "storage",
    "index",
    "return",
    "contract",
    "want",
    "interact",
    "could",
    "even",
    "say",
    "simple",
    "storage",
    "simple",
    "storage",
    "equals",
    "simple",
    "storage",
    "address",
    "array",
    "get",
    "contract",
    "call",
    "functions",
    "could",
    "call",
    "simple",
    "storage",
    "store",
    "simple",
    "storage",
    "number",
    "compile",
    "go",
    "deploy",
    "tab",
    "deploy",
    "factory",
    "hit",
    "deploy",
    "open",
    "see",
    "couple",
    "different",
    "functions",
    "course",
    "create",
    "simple",
    "storage",
    "function",
    "creates",
    "contract",
    "adds",
    "array",
    "sf",
    "store",
    "stores",
    "number",
    "one",
    "contracts",
    "array",
    "lens",
    "simple",
    "storage",
    "contract",
    "create",
    "simple",
    "storage",
    "contract",
    "store",
    "zero",
    "withth",
    "contract",
    "first",
    "contract",
    "number",
    "want",
    "like",
    "55",
    "course",
    "ca",
    "really",
    "see",
    "55",
    "add",
    "retrieve",
    "functionality",
    "add",
    "way",
    "actually",
    "listen",
    "read",
    "retrieve",
    "favor",
    "number",
    "got",
    "let",
    "add",
    "create",
    "new",
    "function",
    "called",
    "sfg",
    "take",
    "uint",
    "256",
    "simple",
    "storage",
    "index",
    "parameter",
    "choose",
    "one",
    "contracts",
    "array",
    "return",
    "favorite",
    "number",
    "calling",
    "retrieve",
    "function",
    "contract",
    "since",
    "going",
    "reading",
    "state",
    "public",
    "view",
    "function",
    "return",
    "un",
    "256",
    "need",
    "access",
    "contract",
    "say",
    "simple",
    "storage",
    "simple",
    "storage",
    "equals",
    "simple",
    "storage",
    "address",
    "simple",
    "storage",
    "array",
    "index",
    "uncore",
    "simple",
    "storage",
    "index",
    "return",
    "return",
    "simple",
    "storage",
    "dot",
    "call",
    "retrieve",
    "function",
    "going",
    "copy",
    "paste",
    "spell",
    "wrong",
    "simple",
    "storage",
    "put",
    "semicolon",
    "compile",
    "go",
    "deploy",
    "tab",
    "delete",
    "recent",
    "choose",
    "storage",
    "factory",
    "hit",
    "deploy",
    "see",
    "sf",
    "get",
    "function",
    "let",
    "go",
    "ahead",
    "create",
    "simple",
    "storage",
    "contract",
    "store",
    "function",
    "zero",
    "withth",
    "contract",
    "store",
    "55",
    "favorite",
    "number",
    "hit",
    "sfg",
    "see",
    "get",
    "favorite",
    "number",
    "zero",
    "withth",
    "contract",
    "indeed",
    "get",
    "55",
    "awesome",
    "actually",
    "even",
    "refactor",
    "code",
    "little",
    "bit",
    "simpler",
    "need",
    "save",
    "simple",
    "storage",
    "contract",
    "variable",
    "actually",
    "call",
    "retrieve",
    "whole",
    "section",
    "paste",
    "retrieve",
    "end",
    "turn",
    "like",
    "goes",
    "sf",
    "store",
    "delete",
    "saving",
    "variable",
    "copy",
    "store",
    "paste",
    "end",
    "delete",
    "well",
    "compile",
    "delete",
    "recent",
    "deploy",
    "storage",
    "factory",
    "go",
    "create",
    "simple",
    "storage",
    "store",
    "number",
    "55",
    "see",
    "zero",
    "index",
    "indeed",
    "see",
    "55",
    "really",
    "cool",
    "way",
    "us",
    "actually",
    "deploy",
    "contracts",
    "interact",
    "contracts",
    "another",
    "contract",
    "deploy",
    "contract",
    "need",
    "functionality",
    "contract",
    "imported",
    "however",
    "interact",
    "contract",
    "need",
    "functionality",
    "learn",
    "interfaces",
    "next",
    "lesson",
    "allow",
    "us",
    "actually",
    "interact",
    "contract",
    "without",
    "functions",
    "defined",
    "going",
    "show",
    "something",
    "really",
    "cool",
    "going",
    "show",
    "something",
    "really",
    "cool",
    "simple",
    "storage",
    "got",
    "lot",
    "really",
    "cool",
    "functions",
    "maybe",
    "want",
    "functions",
    "inside",
    "storage",
    "factory",
    "want",
    "storage",
    "factory",
    "able",
    "create",
    "simple",
    "storage",
    "contracts",
    "want",
    "simple",
    "storage",
    "contract",
    "well",
    "storage",
    "factory",
    "actually",
    "inherit",
    "functions",
    "simple",
    "storage",
    "without",
    "copy",
    "paste",
    "functions",
    "variables",
    "storage",
    "factory",
    "solidities",
    "version",
    "inheritance",
    "say",
    "contract",
    "storage",
    "factory",
    "type",
    "simple",
    "storage",
    "contract",
    "simple",
    "storage",
    "line",
    "right",
    "storage",
    "factory",
    "contract",
    "functions",
    "variables",
    "simple",
    "storage",
    "store",
    "function",
    "retrieve",
    "function",
    "ad",
    "person",
    "function",
    "people",
    "array",
    "name",
    "favorite",
    "number",
    "mapping",
    "everything",
    "inherit",
    "syntax",
    "go",
    "deploy",
    "tab",
    "let",
    "look",
    "last",
    "storage",
    "factory",
    "change",
    "add",
    "simple",
    "storage",
    "see",
    "four",
    "functions",
    "originally",
    "added",
    "delete",
    "save",
    "compile",
    "storage",
    "factory",
    "let",
    "go",
    "ahead",
    "deploy",
    "storage",
    "factory",
    "open",
    "see",
    "functions",
    "originally",
    "defined",
    "storage",
    "factory",
    "additionally",
    "functions",
    "simple",
    "storage",
    "awesome",
    "completed",
    "second",
    "lesson",
    "learned",
    "incredibly",
    "powerful",
    "tools",
    "learned",
    "import",
    "entire",
    "chunks",
    "code",
    "files",
    "files",
    "learned",
    "inheritance",
    "learned",
    "deploy",
    "contracts",
    "contract",
    "learned",
    "interact",
    "different",
    "contracts",
    "outside",
    "contract",
    "well",
    "done",
    "great",
    "time",
    "take",
    "breath",
    "take",
    "breather",
    "review",
    "learned",
    "github",
    "repository",
    "associated",
    "course",
    "also",
    "code",
    "lesson",
    "let",
    "jump",
    "back",
    "remix",
    "going",
    "go",
    "contracts",
    "going",
    "create",
    "new",
    "file",
    "going",
    "call",
    "fundme",
    "doou",
    "last",
    "time",
    "actually",
    "going",
    "add",
    "spdx",
    "license",
    "identifier",
    "mit",
    "right",
    "top",
    "going",
    "choose",
    "solidity",
    "version",
    "going",
    "go",
    "pragma",
    "solidity",
    "going",
    "greater",
    "equals",
    "less",
    "great",
    "look",
    "pretty",
    "familiar",
    "going",
    "contract",
    "fundme",
    "going",
    "get",
    "start",
    "working",
    "want",
    "contract",
    "want",
    "contract",
    "able",
    "accept",
    "type",
    "typ",
    "payment",
    "let",
    "create",
    "new",
    "function",
    "accept",
    "payment",
    "call",
    "fund",
    "function",
    "fund",
    "public",
    "add",
    "new",
    "keyword",
    "called",
    "payable",
    "define",
    "function",
    "payable",
    "saying",
    "hey",
    "function",
    "used",
    "pay",
    "things",
    "call",
    "function",
    "every",
    "single",
    "function",
    "call",
    "associated",
    "value",
    "whenever",
    "make",
    "transaction",
    "always",
    "append",
    "value",
    "value",
    "value",
    "much",
    "wey",
    "guay",
    "finny",
    "ether",
    "going",
    "send",
    "function",
    "call",
    "transaction",
    "mentioned",
    "whey",
    "guay",
    "ether",
    "different",
    "ways",
    "talk",
    "much",
    "eth",
    "going",
    "send",
    "look",
    "way",
    "ethereum",
    "converter",
    "1",
    "e",
    "much",
    "way",
    "one",
    "way",
    "smallest",
    "denomination",
    "ether",
    "ca",
    "break",
    "ethereum",
    "anything",
    "smaller",
    "one",
    "way",
    "talking",
    "much",
    "something",
    "costs",
    "everything",
    "always",
    "defaults",
    "way",
    "smallest",
    "unit",
    "measure",
    "theum",
    "us",
    "test",
    "going",
    "stick",
    "javascript",
    "vm",
    "hit",
    "deploy",
    "get",
    "new",
    "contract",
    "button",
    "red",
    "red",
    "payable",
    "function",
    "hit",
    "fund",
    "button",
    "add",
    "value",
    "associated",
    "want",
    "funding",
    "want",
    "people",
    "send",
    "us",
    "something",
    "well",
    "let",
    "keep",
    "track",
    "sent",
    "us",
    "funding",
    "create",
    "new",
    "mapping",
    "addresses",
    "value",
    "let",
    "mapping",
    "address",
    "un",
    "256",
    "represent",
    "value",
    "make",
    "public",
    "mapping",
    "call",
    "address",
    "amount",
    "funded",
    "fund",
    "function",
    "let",
    "keep",
    "track",
    "people",
    "sent",
    "us",
    "money",
    "addresses",
    "sent",
    "us",
    "value",
    "use",
    "key",
    "words",
    "go",
    "along",
    "every",
    "transaction",
    "say",
    "address",
    "amount",
    "funded",
    "message",
    "sender",
    "equals",
    "plus",
    "equals",
    "message",
    "val",
    "message",
    "sender",
    "message",
    "val",
    "keyword",
    "every",
    "contract",
    "call",
    "every",
    "transaction",
    "message",
    "sender",
    "sender",
    "function",
    "call",
    "message",
    "value",
    "much",
    "sent",
    "whenever",
    "call",
    "fund",
    "somebody",
    "send",
    "value",
    "payable",
    "going",
    "save",
    "everything",
    "address",
    "amount",
    "funded",
    "mapping",
    "deploy",
    "javascript",
    "vm",
    "new",
    "view",
    "function",
    "called",
    "address",
    "amount",
    "funded",
    "even",
    "hit",
    "drop",
    "see",
    "full",
    "name",
    "hit",
    "fund",
    "nothing",
    "going",
    "happen",
    "right",
    "address",
    "going",
    "sending",
    "zero",
    "order",
    "send",
    "something",
    "add",
    "value",
    "along",
    "transaction",
    "let",
    "send",
    "example",
    "one",
    "guay",
    "going",
    "equal",
    "one",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "n",
    "much",
    "way",
    "hit",
    "fund",
    "copy",
    "fake",
    "account",
    "put",
    "address",
    "amount",
    "funded",
    "going",
    "return",
    "zero",
    "add",
    "one",
    "one",
    "2",
    "3",
    "4",
    "5",
    "6",
    "seven",
    "8",
    "nine",
    "go",
    "ahead",
    "hit",
    "fund",
    "called",
    "fund",
    "function",
    "value",
    "one",
    "guay",
    "associated",
    "call",
    "address",
    "amount",
    "funded",
    "address",
    "see",
    "much",
    "funded",
    "smart",
    "contract",
    "even",
    "add",
    "guay",
    "add",
    "add",
    "11",
    "guay",
    "example",
    "call",
    "fund",
    "call",
    "see",
    "even",
    "added",
    "send",
    "funds",
    "contract",
    "actually",
    "means",
    "contract",
    "wherever",
    "deployed",
    "owner",
    "amount",
    "ether",
    "fantastic",
    "way",
    "fund",
    "smart",
    "contracts",
    "thing",
    "smart",
    "contract",
    "funding",
    "want",
    "create",
    "minimum",
    "value",
    "people",
    "able",
    "fund",
    "endeavors",
    "whatever",
    "may",
    "want",
    "set",
    "minimum",
    "value",
    "ether",
    "great",
    "whatever",
    "reason",
    "want",
    "work",
    "usd",
    "maybe",
    "want",
    "work",
    "token",
    "going",
    "get",
    "conversion",
    "rate",
    "currency",
    "currency",
    "use",
    "smart",
    "contract",
    "well",
    "first",
    "thing",
    "going",
    "need",
    "set",
    "value",
    "going",
    "need",
    "know",
    "eth",
    "usd",
    "conversion",
    "rate",
    "want",
    "accept",
    "ethereum",
    "token",
    "want",
    "usd",
    "currency",
    "well",
    "going",
    "need",
    "know",
    "conversion",
    "rate",
    "going",
    "get",
    "data",
    "smart",
    "contract",
    "going",
    "get",
    "data",
    "remember",
    "talked",
    "blockchains",
    "deterministic",
    "systems",
    "oracles",
    "bridge",
    "blockchains",
    "real",
    "world",
    "well",
    "exactly",
    "oracles",
    "come",
    "talking",
    "systems",
    "know",
    "blockchains",
    "ca",
    "connect",
    "real",
    "word",
    "events",
    "ca",
    "connect",
    "external",
    "systems",
    "ca",
    "external",
    "computation",
    "intentionally",
    "deterministic",
    "systems",
    "walled",
    "gardens",
    "order",
    "us",
    "make",
    "connection",
    "need",
    "blockchain",
    "need",
    "type",
    "network",
    "get",
    "little",
    "bit",
    "uh",
    "technical",
    "look",
    "blockchain",
    "blockchain",
    "easily",
    "say",
    "1",
    "1",
    "equals",
    "2",
    "every",
    "node",
    "easily",
    "verify",
    "however",
    "blockchain",
    "ca",
    "easily",
    "say",
    "okay",
    "let",
    "grab",
    "random",
    "number",
    "node",
    "going",
    "get",
    "different",
    "random",
    "number",
    "also",
    "ca",
    "say",
    "hey",
    "let",
    "make",
    "api",
    "call",
    "one",
    "node",
    "calls",
    "api",
    "different",
    "time",
    "another",
    "node",
    "calls",
    "specifically",
    "http",
    "get",
    "could",
    "potentially",
    "get",
    "different",
    "results",
    "another",
    "node",
    "tries",
    "replay",
    "transactions",
    "calling",
    "apis",
    "maybe",
    "10",
    "years",
    "future",
    "good",
    "chance",
    "api",
    "going",
    "depreciated",
    "could",
    "hacked",
    "could",
    "malicious",
    "etc",
    "etc",
    "reason",
    "blockchains",
    "intentionally",
    "ca",
    "make",
    "api",
    "calls",
    "would",
    "making",
    "assumptions",
    "real",
    "world",
    "layer",
    "ones",
    "typically",
    "want",
    "opinion",
    "political",
    "geopolitical",
    "issue",
    "whereas",
    "oracle",
    "network",
    "hand",
    "make",
    "assumptions",
    "main",
    "thing",
    "need",
    "talk",
    "centralized",
    "oracles",
    "main",
    "points",
    "failures",
    "say",
    "hey",
    "going",
    "oracle",
    "going",
    "one",
    "put",
    "data",
    "chain",
    "massive",
    "centralized",
    "point",
    "failure",
    "done",
    "work",
    "make",
    "decentralized",
    "computation",
    "decentralized",
    "onchain",
    "ruin",
    "decentral",
    "single",
    "point",
    "failure",
    "remember",
    "one",
    "whole",
    "purposes",
    "blockchain",
    "single",
    "entity",
    "flip",
    "switch",
    "restrict",
    "freedom",
    "interact",
    "centralized",
    "oracle",
    "single",
    "entity",
    "flip",
    "switch",
    "restrict",
    "freedom",
    "interact",
    "also",
    "need",
    "get",
    "data",
    "many",
    "different",
    "decentralized",
    "sources",
    "type",
    "computation",
    "decentralized",
    "manner",
    "chain",
    "link",
    "really",
    "shines",
    "chain",
    "link",
    "modular",
    "decentralized",
    "oracle",
    "infrastructure",
    "oracle",
    "network",
    "allows",
    "us",
    "get",
    "data",
    "external",
    "computation",
    "highly",
    "cil",
    "resistant",
    "decentralized",
    "manner",
    "customizable",
    "want",
    "run",
    "one",
    "node",
    "many",
    "nodes",
    "many",
    "nodes",
    "like",
    "currently",
    "one",
    "popular",
    "features",
    "chain",
    "link",
    "data",
    "feeds",
    "price",
    "feeds",
    "even",
    "go",
    "check",
    "data",
    "chain",
    "link",
    "see",
    "number",
    "different",
    "price",
    "feeds",
    "networks",
    "providing",
    "prices",
    "specific",
    "pricing",
    "points",
    "see",
    "looking",
    "ui",
    "whole",
    "number",
    "decentralized",
    "different",
    "oracles",
    "returning",
    "data",
    "different",
    "price",
    "feeds",
    "one",
    "example",
    "fusd",
    "also",
    "exactly",
    "price",
    "feed",
    "looking",
    "decentralized",
    "network",
    "bring",
    "data",
    "chain",
    "reference",
    "point",
    "definitive",
    "truth",
    "allows",
    "users",
    "collaborate",
    "use",
    "common",
    "good",
    "cheaper",
    "secure",
    "efficient",
    "anybody",
    "even",
    "running",
    "centralized",
    "oracle",
    "price",
    "feeds",
    "incredibly",
    "powerful",
    "additionally",
    "used",
    "top",
    "protocols",
    "def5",
    "system",
    "right",
    "like",
    "synthetics",
    "time",
    "recording",
    "securing",
    "around",
    "two",
    "billion",
    "sushi",
    "swap",
    "leveraging",
    "trades",
    "set",
    "protocol",
    "commodity",
    "money",
    "understanding",
    "price",
    "underlying",
    "collateral",
    "example",
    "decentralized",
    "solution",
    "already",
    "packaged",
    "decentralized",
    "manner",
    "consume",
    "use",
    "makes",
    "going",
    "production",
    "thousand",
    "times",
    "easier",
    "building",
    "everything",
    "however",
    "want",
    "make",
    "api",
    "calls",
    "build",
    "decentralized",
    "network",
    "absolutely",
    "chain",
    "link",
    "api",
    "calls",
    "going",
    "go",
    "using",
    "chain",
    "link",
    "price",
    "feeds",
    "chain",
    "link",
    "vf",
    "keeper",
    "network",
    "decentralized",
    "services",
    "going",
    "make",
    "going",
    "live",
    "going",
    "mainnet",
    "lot",
    "easier",
    "always",
    "make",
    "chain",
    "link",
    "http",
    "get",
    "call",
    "well",
    "going",
    "go",
    "though",
    "putting",
    "production",
    "little",
    "bit",
    "trickier",
    "working",
    "chain",
    "link",
    "vf",
    "ever",
    "want",
    "try",
    "always",
    "head",
    "docs",
    "chain",
    "link",
    "head",
    "get",
    "latest",
    "price",
    "feed",
    "usually",
    "remix",
    "button",
    "actually",
    "click",
    "kick",
    "us",
    "remix",
    "edition",
    "code",
    "already",
    "ready",
    "go",
    "us",
    "hit",
    "gist",
    "right",
    "include",
    "code",
    "go",
    "second",
    "let",
    "go",
    "ahead",
    "compile",
    "going",
    "deploy",
    "real",
    "network",
    "one",
    "looks",
    "like",
    "actually",
    "co",
    "going",
    "go",
    "ahead",
    "switch",
    "coen",
    "looks",
    "like",
    "coen",
    "ethereum",
    "going",
    "gra",
    "coen",
    "faucet",
    "usually",
    "find",
    "different",
    "faucets",
    "chain",
    "link",
    "documentation",
    "let",
    "look",
    "coven",
    "herea",
    "coven",
    "faucet",
    "looks",
    "like",
    "order",
    "us",
    "get",
    "coen",
    "ethereum",
    "log",
    "github",
    "add",
    "address",
    "get",
    "ethereum",
    "interest",
    "time",
    "going",
    "skip",
    "ahead",
    "great",
    "looks",
    "like",
    "got",
    "co",
    "tesed",
    "able",
    "switch",
    "test",
    "nets",
    "going",
    "make",
    "lot",
    "effective",
    "engineer",
    "well",
    "going",
    "able",
    "understand",
    "network",
    "actually",
    "works",
    "compiled",
    "let",
    "deploy",
    "minim",
    "mask",
    "going",
    "pop",
    "let",
    "go",
    "ahead",
    "click",
    "get",
    "latest",
    "price",
    "see",
    "function",
    "indeed",
    "return",
    "latest",
    "price",
    "ethereum",
    "might",
    "asking",
    "number",
    "look",
    "big",
    "well",
    "remember",
    "talked",
    "way",
    "guay",
    "ether",
    "well",
    "reason",
    "exist",
    "decimals",
    "work",
    "solidity",
    "actually",
    "return",
    "value",
    "multiplied",
    "10",
    "number",
    "value",
    "actually",
    "times",
    "10",
    "raised",
    "e",
    "next",
    "question",
    "might",
    "ask",
    "well",
    "work",
    "test",
    "net",
    "could",
    "local",
    "network",
    "answer",
    "network",
    "nodes",
    "looking",
    "test",
    "net",
    "delivering",
    "data",
    "onto",
    "test",
    "net",
    "spin",
    "local",
    "network",
    "simulated",
    "vm",
    "nodes",
    "actually",
    "learn",
    "later",
    "actually",
    "mock",
    "interactions",
    "mock",
    "chainlink",
    "node",
    "returning",
    "data",
    "onto",
    "blockchain",
    "let",
    "head",
    "back",
    "contract",
    "working",
    "learn",
    "implement",
    "contract",
    "ever",
    "want",
    "another",
    "contract",
    "called",
    "case",
    "called",
    "price",
    "feed",
    "function",
    "called",
    "latest",
    "round",
    "data",
    "returns",
    "lot",
    "data",
    "returns",
    "round",
    "id",
    "defines",
    "many",
    "times",
    "price",
    "feed",
    "updated",
    "returns",
    "price",
    "actual",
    "conversion",
    "rate",
    "two",
    "assets",
    "returns",
    "started",
    "defines",
    "last",
    "updated",
    "returns",
    "timestamp",
    "returns",
    "answered",
    "round",
    "worry",
    "answered",
    "round",
    "want",
    "dive",
    "little",
    "bit",
    "deeper",
    "rounds",
    "mean",
    "answered",
    "round",
    "means",
    "definitely",
    "check",
    "chain",
    "link",
    "documentation",
    "faqs",
    "learn",
    "implement",
    "data",
    "feed",
    "funme",
    "application",
    "well",
    "first",
    "thing",
    "actually",
    "going",
    "need",
    "going",
    "need",
    "import",
    "chain",
    "link",
    "code",
    "going",
    "import",
    "chain",
    "link",
    "slc",
    "contracts",
    "sl",
    "source",
    "sl",
    "interfaces",
    "sl",
    "agregator",
    "e3",
    "interface",
    "soul",
    "let",
    "talk",
    "actually",
    "oops",
    "looks",
    "like",
    "spelled",
    "aggregator",
    "v3",
    "interface",
    "wrong",
    "right",
    "great",
    "actually",
    "confined",
    "let",
    "talk",
    "imports",
    "actually",
    "know",
    "import",
    "take",
    "whatever",
    "code",
    "importing",
    "stick",
    "top",
    "project",
    "import",
    "chainlink",
    "contracts",
    "actually",
    "importing",
    "chainlink",
    "contracts",
    "mpm",
    "package",
    "look",
    "chainlink",
    "contracts",
    "mpm",
    "see",
    "read",
    "repository",
    "links",
    "us",
    "back",
    "github",
    "tell",
    "us",
    "little",
    "bit",
    "really",
    "going",
    "follow",
    "import",
    "path",
    "got",
    "documentation",
    "end",
    "file",
    "front",
    "called",
    "interface",
    "see",
    "contracts",
    "start",
    "contract",
    "keyword",
    "start",
    "interface",
    "keyword",
    "exact",
    "pragma",
    "solidity",
    "top",
    "main",
    "difference",
    "see",
    "functions",
    "completed",
    "function",
    "name",
    "return",
    "type",
    "little",
    "bit",
    "explicit",
    "actually",
    "going",
    "go",
    "ahead",
    "delete",
    "import",
    "statement",
    "top",
    "replace",
    "interface",
    "code",
    "github",
    "show",
    "exactly",
    "going",
    "however",
    "already",
    "typed",
    "import",
    "syntax",
    "feel",
    "free",
    "leave",
    "remember",
    "going",
    "exact",
    "copy",
    "pasting",
    "interface",
    "code",
    "code",
    "solidity",
    "natively",
    "understand",
    "interact",
    "another",
    "contract",
    "tell",
    "solidity",
    "functions",
    "called",
    "another",
    "contract",
    "interfaces",
    "actually",
    "going",
    "come",
    "similar",
    "strs",
    "interfaces",
    "find",
    "new",
    "type",
    "copy",
    "code",
    "section",
    "place",
    "top",
    "code",
    "declaring",
    "contract",
    "actually",
    "interact",
    "contract",
    "functions",
    "go",
    "ahead",
    "even",
    "compile",
    "see",
    "indeed",
    "compile",
    "correctly",
    "remember",
    "said",
    "talked",
    "little",
    "bit",
    "abis",
    "well",
    "interfaces",
    "actually",
    "compiled",
    "called",
    "abi",
    "application",
    "binary",
    "interface",
    "application",
    "binary",
    "interface",
    "tells",
    "solidity",
    "functions",
    "called",
    "another",
    "contract",
    "need",
    "solidity",
    "know",
    "fun",
    "functions",
    "use",
    "functions",
    "call",
    "contracts",
    "little",
    "bit",
    "confusing",
    "know",
    "anytime",
    "going",
    "interact",
    "another",
    "contract",
    "solidity",
    "smart",
    "contract",
    "programming",
    "general",
    "going",
    "need",
    "contract",
    "abi",
    "go",
    "abis",
    "look",
    "like",
    "little",
    "bit",
    "later",
    "anyways",
    "simplify",
    "interface",
    "compiles",
    "abi",
    "always",
    "need",
    "abi",
    "interact",
    "contract",
    "actually",
    "work",
    "contract",
    "interact",
    "interface",
    "contract",
    "going",
    "work",
    "exact",
    "way",
    "interacting",
    "struct",
    "variable",
    "let",
    "define",
    "new",
    "function",
    "called",
    "get",
    "version",
    "going",
    "call",
    "version",
    "function",
    "contract",
    "start",
    "function",
    "get",
    "version",
    "public",
    "remember",
    "needs",
    "view",
    "since",
    "going",
    "reading",
    "state",
    "even",
    "interface",
    "even",
    "defines",
    "view",
    "returns",
    "even",
    "grab",
    "whole",
    "bit",
    "right",
    "returns",
    "un",
    "256",
    "exact",
    "way",
    "define",
    "variables",
    "structs",
    "define",
    "working",
    "contracts",
    "interfaces",
    "first",
    "thing",
    "name",
    "type",
    "case",
    "aggregator",
    "v3",
    "interface",
    "name",
    "visibility",
    "since",
    "inside",
    "contract",
    "going",
    "skip",
    "let",
    "give",
    "name",
    "call",
    "price",
    "feed",
    "since",
    "aggregator",
    "v3",
    "interface",
    "bas",
    "going",
    "giving",
    "us",
    "price",
    "fee",
    "equals",
    "going",
    "initialize",
    "contract",
    "actually",
    "choose",
    "interact",
    "contract",
    "well",
    "type",
    "aggregated",
    "v3",
    "interface",
    "put",
    "address",
    "contract",
    "located",
    "order",
    "find",
    "fusd",
    "price",
    "feed",
    "contract",
    "located",
    "rink",
    "chain",
    "look",
    "ethereum",
    "price",
    "feeds",
    "chain",
    "link",
    "documentation",
    "ton",
    "different",
    "price",
    "feeds",
    "even",
    "price",
    "related",
    "data",
    "let",
    "scroll",
    "rink",
    "different",
    "chain",
    "contract",
    "address",
    "price",
    "feed",
    "information",
    "going",
    "different",
    "let",
    "scroll",
    "find",
    "fusd",
    "right",
    "copy",
    "paste",
    "line",
    "saying",
    "saying",
    "contract",
    "functions",
    "defined",
    "interface",
    "located",
    "address",
    "true",
    "able",
    "call",
    "price",
    "feed",
    "dot",
    "version",
    "able",
    "return",
    "whoops",
    "looks",
    "like",
    "forgot",
    "add",
    "need",
    "semicolon",
    "hit",
    "controls",
    "command",
    "compiles",
    "looks",
    "like",
    "compiling",
    "successfully",
    "need",
    "deploy",
    "test",
    "net",
    "remember",
    "address",
    "located",
    "actual",
    "test",
    "located",
    "actual",
    "network",
    "going",
    "located",
    "simulated",
    "chain",
    "need",
    "deploy",
    "injected",
    "web",
    "3",
    "need",
    "deploy",
    "contract",
    "rink",
    "b",
    "rink",
    "chain",
    "address",
    "learn",
    "later",
    "actually",
    "work",
    "simulated",
    "chain",
    "work",
    "price",
    "feeds",
    "much",
    "later",
    "course",
    "let",
    "go",
    "ahead",
    "save",
    "deploy",
    "make",
    "sure",
    "injected",
    "web",
    "3",
    "go",
    "ahead",
    "hit",
    "deploy",
    "metamask",
    "going",
    "pop",
    "per",
    "usual",
    "confirm",
    "going",
    "get",
    "transaction",
    "link",
    "ether",
    "scan",
    "showing",
    "us",
    "contract",
    "actually",
    "confirmed",
    "see",
    "contract",
    "right",
    "familiar",
    "functions",
    "one",
    "additional",
    "function",
    "fund",
    "button",
    "payable",
    "address",
    "amount",
    "funded",
    "mapping",
    "blue",
    "view",
    "also",
    "get",
    "version",
    "button",
    "also",
    "blue",
    "go",
    "ahead",
    "click",
    "see",
    "version",
    "aggregator",
    "v3",
    "interface",
    "version",
    "3",
    "third",
    "version",
    "aggregator",
    "interfaces",
    "hence",
    "name",
    "aggregator",
    "v3",
    "interface",
    "made",
    "contract",
    "call",
    "another",
    "contract",
    "contract",
    "using",
    "interface",
    "interfaces",
    "powerful",
    "minimalistic",
    "view",
    "another",
    "contract",
    "great",
    "get",
    "version",
    "function",
    "still",
    "function",
    "want",
    "want",
    "call",
    "get",
    "price",
    "function",
    "look",
    "interface",
    "see",
    "latest",
    "round",
    "data",
    "function",
    "returns",
    "answer",
    "function",
    "going",
    "want",
    "call",
    "contract",
    "let",
    "go",
    "ahead",
    "make",
    "function",
    "calls",
    "instead",
    "going",
    "function",
    "get",
    "price",
    "public",
    "view",
    "returns",
    "uint",
    "256",
    "uh",
    "oh",
    "latest",
    "round",
    "data",
    "function",
    "though",
    "returns",
    "five",
    "variables",
    "actually",
    "work",
    "well",
    "let",
    "find",
    "work",
    "contract",
    "going",
    "exact",
    "thing",
    "going",
    "aggregator",
    "v3",
    "interface",
    "type",
    "contract",
    "price",
    "feed",
    "equals",
    "aggregator",
    "v3",
    "interface",
    "address",
    "fusd",
    "address",
    "price",
    "feed",
    "dot",
    "latest",
    "round",
    "data",
    "since",
    "going",
    "return",
    "five",
    "different",
    "values",
    "actually",
    "contract",
    "also",
    "return",
    "five",
    "different",
    "values",
    "copy",
    "paste",
    "like",
    "literally",
    "five",
    "values",
    "equal",
    "price",
    "feed",
    "latest",
    "round",
    "data",
    "see",
    "even",
    "compiles",
    "correctly",
    "let",
    "adjust",
    "formatting",
    "little",
    "bit",
    "looks",
    "little",
    "bit",
    "nicer",
    "tupal",
    "list",
    "objects",
    "potentially",
    "different",
    "types",
    "syntax",
    "getting",
    "tupal",
    "define",
    "several",
    "variables",
    "inside",
    "one",
    "tupal",
    "although",
    "compiler",
    "going",
    "give",
    "us",
    "warnings",
    "saying",
    "unused",
    "local",
    "variable",
    "actually",
    "using",
    "anything",
    "come",
    "back",
    "go",
    "ahead",
    "return",
    "pick",
    "one",
    "variables",
    "want",
    "return",
    "answer",
    "going",
    "price",
    "going",
    "return",
    "answer",
    "uh",
    "oh",
    "going",
    "run",
    "error",
    "return",
    "tight",
    "argument",
    "int",
    "256",
    "implicitly",
    "convertible",
    "expected",
    "type",
    "answer",
    "int",
    "256",
    "want",
    "return",
    "uint",
    "256",
    "rectify",
    "fix",
    "using",
    "called",
    "type",
    "casting",
    "return",
    "answer",
    "going",
    "returning",
    "wrong",
    "type",
    "however",
    "integers",
    "solidity",
    "really",
    "easy",
    "cast",
    "uint",
    "256",
    "wrap",
    "around",
    "answer",
    "compile",
    "save",
    "instead",
    "see",
    "compiler",
    "happy",
    "changed",
    "answer",
    "u",
    "256",
    "awesome",
    "get",
    "price",
    "return",
    "latest",
    "price",
    "ethereum",
    "terms",
    "usd",
    "let",
    "go",
    "ahead",
    "deploy",
    "new",
    "contract",
    "new",
    "function",
    "thing",
    "going",
    "come",
    "deploy",
    "section",
    "hit",
    "deploy",
    "button",
    "oh",
    "remember",
    "got",
    "go",
    "fund",
    "let",
    "deploy",
    "confirm",
    "metamask",
    "let",
    "scroll",
    "newly",
    "deployed",
    "contract",
    "see",
    "get",
    "version",
    "function",
    "still",
    "works",
    "exactly",
    "new",
    "function",
    "called",
    "get",
    "price",
    "return",
    "un",
    "256",
    "answer",
    "let",
    "go",
    "ahead",
    "click",
    "amazing",
    "actually",
    "returned",
    "answer",
    "little",
    "confused",
    "number",
    "looks",
    "big",
    "remember",
    "actually",
    "eight",
    "decimals",
    "could",
    "call",
    "decimals",
    "function",
    "contract",
    "learn",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "know",
    "current",
    "price",
    "ethereum",
    "terms",
    "usd",
    "awesome",
    "price",
    "actually",
    "get",
    "conversion",
    "rate",
    "let",
    "clean",
    "function",
    "little",
    "bit",
    "go",
    "see",
    "one",
    "thing",
    "compiler",
    "complaining",
    "lot",
    "unused",
    "local",
    "variables",
    "latest",
    "round",
    "data",
    "returns",
    "five",
    "different",
    "variables",
    "actually",
    "return",
    "five",
    "variables",
    "make",
    "compiler",
    "happy",
    "us",
    "well",
    "actually",
    "return",
    "blanks",
    "one",
    "sections",
    "commas",
    "say",
    "hey",
    "variable",
    "going",
    "use",
    "also",
    "make",
    "code",
    "look",
    "lot",
    "cleaner",
    "cleaner",
    "function",
    "lot",
    "smaller",
    "say",
    "h",
    "something",
    "ignoring",
    "256",
    "answer",
    "going",
    "use",
    "something",
    "ignore",
    "something",
    "ignore",
    "ignore",
    "even",
    "test",
    "compiling",
    "deploying",
    "checking",
    "rank",
    "b",
    "scrolling",
    "hitting",
    "hitting",
    "get",
    "price",
    "see",
    "indeed",
    "exact",
    "awesome",
    "done",
    "cleaning",
    "things",
    "right",
    "quite",
    "yet",
    "see",
    "thing",
    "really",
    "annoying",
    "massive",
    "chunk",
    "code",
    "top",
    "probably",
    "little",
    "redundant",
    "good",
    "chance",
    "lot",
    "contracts",
    "going",
    "want",
    "use",
    "aggregated",
    "v3",
    "interface",
    "let",
    "go",
    "ahead",
    "add",
    "chainlink",
    "contract",
    "syntax",
    "back",
    "going",
    "look",
    "lot",
    "cleaner",
    "chainlink",
    "slc",
    "contracts",
    "ever",
    "get",
    "little",
    "bit",
    "confused",
    "importing",
    "work",
    "contracts",
    "see",
    "right",
    "documentation",
    "top",
    "syntax",
    "going",
    "use",
    "also",
    "go",
    "ahead",
    "browse",
    "mpm",
    "package",
    "chainlink",
    "contracts",
    "see",
    "applications",
    "files",
    "peruse",
    "around",
    "github",
    "third",
    "way",
    "actually",
    "imports",
    "import",
    "contracts",
    "file",
    "system",
    "contracts",
    "well",
    "awesome",
    "contract",
    "starting",
    "look",
    "put",
    "together",
    "one",
    "thing",
    "usually",
    "like",
    "usually",
    "like",
    "put",
    "everything",
    "gay",
    "way",
    "standard",
    "saw",
    "get",
    "price",
    "eight",
    "decimal",
    "places",
    "however",
    "smallest",
    "unit",
    "measure",
    "aka",
    "way",
    "look",
    "18",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "nine",
    "10",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "78",
    "typically",
    "like",
    "try",
    "make",
    "everything",
    "18",
    "decimals",
    "well",
    "save",
    "gas",
    "usually",
    "like",
    "multiply",
    "everything",
    "everything",
    "18",
    "decimal",
    "places",
    "since",
    "know",
    "eight",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "10",
    "return",
    "price",
    "18",
    "decimal",
    "places",
    "instead",
    "10",
    "price",
    "ethereum",
    "us",
    "dollar",
    "fantastic",
    "could",
    "set",
    "price",
    "fing",
    "function",
    "anything",
    "want",
    "example",
    "let",
    "say",
    "50",
    "could",
    "convert",
    "whatever",
    "value",
    "send",
    "us",
    "us",
    "dollar",
    "equivalent",
    "see",
    "greater",
    "less",
    "50",
    "make",
    "new",
    "function",
    "converts",
    "value",
    "send",
    "us",
    "dollar",
    "equivalent",
    "could",
    "function",
    "get",
    "converion",
    "rate",
    "take",
    "un",
    "256",
    "f",
    "amount",
    "let",
    "get",
    "way",
    "rest",
    "public",
    "view",
    "function",
    "since",
    "actually",
    "going",
    "make",
    "state",
    "change",
    "returns",
    "went",
    "256",
    "function",
    "uint",
    "256",
    "f",
    "price",
    "equals",
    "get",
    "price",
    "call",
    "get",
    "price",
    "function",
    "price",
    "want",
    "want",
    "convert",
    "whatever",
    "value",
    "send",
    "fth",
    "amount",
    "let",
    "say",
    "send",
    "one",
    "g",
    "going",
    "much",
    "way",
    "convert",
    "fusd",
    "well",
    "u",
    "256",
    "f",
    "amount",
    "usd",
    "equals",
    "f",
    "price",
    "times",
    "f",
    "amount",
    "sent",
    "actually",
    "going",
    "result",
    "much",
    "bigger",
    "number",
    "looking",
    "course",
    "going",
    "return",
    "let",
    "test",
    "see",
    "one",
    "thing",
    "let",
    "fundme",
    "deploy",
    "rank",
    "b",
    "scroll",
    "new",
    "function",
    "called",
    "get",
    "conversion",
    "rate",
    "let",
    "grab",
    "one",
    "guay",
    "put",
    "whoa",
    "seems",
    "like",
    "really",
    "big",
    "number",
    "saying",
    "one",
    "guay",
    "equal",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "nine",
    "10",
    "many",
    "dollars",
    "know",
    "think",
    "price",
    "even",
    "one",
    "ethereum",
    "many",
    "dollars",
    "maybe",
    "distant",
    "future",
    "definitely",
    "right",
    "reason",
    "actually",
    "divide",
    "number",
    "reason",
    "f",
    "price",
    "f",
    "amount",
    "additional",
    "10",
    "rais",
    "18th",
    "tacked",
    "onto",
    "divide",
    "order",
    "get",
    "right",
    "number",
    "going",
    "compile",
    "compile",
    "deploy",
    "confirm",
    "scroll",
    "let",
    "try",
    "one",
    "gu",
    "get",
    "conversion",
    "right",
    "see",
    "get",
    "number",
    "makes",
    "little",
    "bit",
    "sense",
    "remember",
    "18",
    "decimals",
    "well",
    "real",
    "number",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "know",
    "number",
    "actually",
    "accurate",
    "go",
    "ahead",
    "pull",
    "calculator",
    "pop",
    "know",
    "one",
    "gay",
    "us",
    "dollar",
    "get",
    "conversion",
    "rate",
    "saying",
    "many",
    "guay",
    "equals",
    "1",
    "e",
    "check",
    "back",
    "multiplying",
    "number",
    "see",
    "actually",
    "get",
    "price",
    "one",
    "ethereum",
    "us",
    "dollar",
    "math",
    "checks",
    "awesome",
    "since",
    "topic",
    "math",
    "want",
    "talk",
    "briefly",
    "pitfalls",
    "solidity",
    "especially",
    "comes",
    "math",
    "prior",
    "solidity",
    "added",
    "maximum",
    "size",
    "uint",
    "number",
    "could",
    "would",
    "actually",
    "wrap",
    "around",
    "lowest",
    "number",
    "would",
    "fact",
    "even",
    "demo",
    "contract",
    "follow",
    "along",
    "contract",
    "watch",
    "see",
    "example",
    "going",
    "call",
    "overflow",
    "soul",
    "going",
    "add",
    "kind",
    "normal",
    "stuff",
    "contract",
    "overflow",
    "going",
    "add",
    "function",
    "called",
    "overflow",
    "make",
    "public",
    "view",
    "return",
    "uint",
    "8",
    "show",
    "minute",
    "uint",
    "256",
    "really",
    "really",
    "big",
    "number",
    "hard",
    "kind",
    "imagine",
    "going",
    "maximum",
    "cap",
    "un",
    "256",
    "un",
    "8",
    "lot",
    "smaller",
    "maximum",
    "number",
    "actually",
    "255",
    "create",
    "uint",
    "8",
    "call",
    "big",
    "equals",
    "255",
    "return",
    "big",
    "think",
    "going",
    "get",
    "go",
    "ahead",
    "use",
    "javascript",
    "vm",
    "interacting",
    "contracts",
    "let",
    "deploy",
    "see",
    "contract",
    "call",
    "overflow",
    "going",
    "get",
    "255",
    "however",
    "happens",
    "add",
    "one",
    "number",
    "try",
    "add",
    "one",
    "number",
    "like",
    "solidity",
    "actually",
    "knows",
    "issue",
    "says",
    "hey",
    "try",
    "typ",
    "cast",
    "uint",
    "8",
    "slity",
    "gets",
    "little",
    "bit",
    "confused",
    "goes",
    "ahead",
    "lets",
    "us",
    "think",
    "big",
    "going",
    "200",
    "56",
    "right",
    "big",
    "u",
    "8",
    "maximum",
    "size",
    "could",
    "happens",
    "deploy",
    "look",
    "actually",
    "get",
    "zero",
    "happens",
    "100",
    "deploy",
    "actually",
    "get",
    "99",
    "integers",
    "actually",
    "wrap",
    "around",
    "reach",
    "maximum",
    "cap",
    "basically",
    "reset",
    "something",
    "need",
    "watch",
    "working",
    "solidity",
    "multiplication",
    "really",
    "big",
    "numbers",
    "accidentally",
    "pass",
    "cap",
    "luckily",
    "version",
    "solidity",
    "actually",
    "checks",
    "overflow",
    "defaults",
    "check",
    "overflow",
    "increase",
    "readability",
    "code",
    "even",
    "comes",
    "slight",
    "increase",
    "gas",
    "costs",
    "use",
    "unchecked",
    "want",
    "keep",
    "wrapping",
    "functionality",
    "aware",
    "using",
    "lower",
    "version",
    "going",
    "something",
    "make",
    "could",
    "write",
    "whole",
    "bunch",
    "code",
    "basically",
    "check",
    "math",
    "could",
    "import",
    "something",
    "called",
    "safe",
    "maath",
    "another",
    "package",
    "similar",
    "imported",
    "chain",
    "link",
    "go",
    "ahead",
    "import",
    "package",
    "called",
    "safem",
    "maath",
    "tool",
    "called",
    "open",
    "zeppelin",
    "open",
    "zeppin",
    "open",
    "source",
    "tool",
    "allows",
    "us",
    "use",
    "lot",
    "already",
    "contracts",
    "go",
    "ahead",
    "documentation",
    "go",
    "utilities",
    "see",
    "safe",
    "maath",
    "even",
    "little",
    "sticker",
    "saying",
    "safe",
    "math",
    "longer",
    "needed",
    "started",
    "solidity",
    "safe",
    "math",
    "tool",
    "way",
    "us",
    "avoid",
    "problems",
    "math",
    "solidity",
    "going",
    "spend",
    "much",
    "time",
    "contracts",
    "actually",
    "fix",
    "actually",
    "import",
    "right",
    "chain",
    "link",
    "directory",
    "well",
    "solidity",
    "file",
    "called",
    "safe",
    "math",
    "chain",
    "link",
    "right",
    "contract",
    "using",
    "safe",
    "math",
    "chain",
    "link",
    "un",
    "256",
    "use",
    "safe",
    "maath",
    "chain",
    "link",
    "u",
    "256",
    "safe",
    "maath",
    "chain",
    "link",
    "allow",
    "overflow",
    "occur",
    "libraries",
    "really",
    "similar",
    "contracts",
    "except",
    "isolated",
    "code",
    "run",
    "reusable",
    "context",
    "case",
    "attaching",
    "safe",
    "math",
    "chainlink",
    "library",
    "u",
    "256",
    "overflows",
    "automatically",
    "checked",
    "keep",
    "mind",
    "using",
    "anything",
    "less",
    "going",
    "want",
    "use",
    "type",
    "safe",
    "math",
    "check",
    "overflows",
    "familiar",
    "safe",
    "math",
    "integer",
    "overflows",
    "underflows",
    "going",
    "calling",
    "functions",
    "safe",
    "math",
    "provides",
    "us",
    "like",
    "div",
    "add",
    "mole",
    "know",
    "functions",
    "simply",
    "moving",
    "forward",
    "longer",
    "use",
    "use",
    "regular",
    "operators",
    "like",
    "plus",
    "minus",
    "great",
    "contract",
    "coming",
    "along",
    "really",
    "well",
    "way",
    "get",
    "conversion",
    "rate",
    "whatever",
    "f",
    "sent",
    "turn",
    "us",
    "dollar",
    "set",
    "threshold",
    "terms",
    "us",
    "dollar",
    "guarantee",
    "whatever",
    "amount",
    "users",
    "send",
    "call",
    "fund",
    "going",
    "least",
    "50",
    "well",
    "first",
    "might",
    "want",
    "set",
    "minimum",
    "value",
    "un",
    "256",
    "minimum",
    "usd",
    "equals",
    "let",
    "say",
    "50",
    "since",
    "using",
    "everything",
    "guay",
    "terms",
    "want",
    "multiply",
    "10",
    "ra",
    "18th",
    "wanted",
    "take",
    "pause",
    "second",
    "line",
    "actually",
    "wrong",
    "raised",
    "18th",
    "line",
    "really",
    "look",
    "like",
    "double",
    "star",
    "apologies",
    "rest",
    "single",
    "star",
    "double",
    "star",
    "single",
    "star",
    "though",
    "rest",
    "contract",
    "still",
    "work",
    "fine",
    "minimum",
    "value",
    "50",
    "10",
    "raised",
    "18th",
    "everything",
    "18",
    "decimals",
    "minimum",
    "amount",
    "actually",
    "make",
    "sure",
    "minimum",
    "amount",
    "met",
    "value",
    "send",
    "us",
    "well",
    "familiar",
    "statements",
    "could",
    "something",
    "like",
    "message",
    "val",
    "less",
    "minimum",
    "usd",
    "revert",
    "could",
    "something",
    "lot",
    "easier",
    "better",
    "practice",
    "much",
    "cleaner",
    "called",
    "require",
    "statement",
    "function",
    "call",
    "reaches",
    "requir",
    "statement",
    "check",
    "truthiness",
    "whatever",
    "require",
    "asked",
    "case",
    "converted",
    "rate",
    "message",
    "value",
    "needs",
    "greater",
    "equal",
    "minimum",
    "usd",
    "line",
    "says",
    "conversion",
    "rate",
    "message",
    "value",
    "usd",
    "send",
    "us",
    "enough",
    "ether",
    "going",
    "stop",
    "executing",
    "going",
    "kick",
    "going",
    "say",
    "hey",
    "count",
    "going",
    "called",
    "revert",
    "going",
    "revert",
    "transaction",
    "means",
    "user",
    "going",
    "get",
    "money",
    "back",
    "well",
    "unspent",
    "gas",
    "highly",
    "recommended",
    "also",
    "additionally",
    "add",
    "revert",
    "error",
    "message",
    "something",
    "like",
    "need",
    "spend",
    "eth",
    "let",
    "try",
    "saw",
    "one",
    "guay",
    "going",
    "way",
    "less",
    "50",
    "send",
    "one",
    "guay",
    "along",
    "fund",
    "contract",
    "call",
    "kick",
    "say",
    "need",
    "spend",
    "eth",
    "let",
    "actually",
    "try",
    "let",
    "go",
    "deploy",
    "tab",
    "get",
    "rid",
    "overflow",
    "use",
    "injected",
    "web",
    "3",
    "working",
    "chain",
    "link",
    "aggregated",
    "contracts",
    "chain",
    "going",
    "move",
    "fundme",
    "going",
    "hit",
    "deploy",
    "met",
    "mas",
    "going",
    "pop",
    "going",
    "hit",
    "confirm",
    "try",
    "hit",
    "fund",
    "let",
    "see",
    "happens",
    "getting",
    "gas",
    "estimation",
    "failed",
    "says",
    "gas",
    "estimation",
    "error",
    "failed",
    "following",
    "message",
    "execution",
    "reverted",
    "need",
    "spend",
    "eth",
    "contract",
    "even",
    "letting",
    "us",
    "make",
    "transaction",
    "go",
    "ahead",
    "try",
    "send",
    "transaction",
    "going",
    "happen",
    "ether",
    "scan",
    "goes",
    "see",
    "transaction",
    "finished",
    "got",
    "status",
    "fail",
    "error",
    "need",
    "spend",
    "eth",
    "want",
    "force",
    "transactions",
    "go",
    "look",
    "metamask",
    "even",
    "see",
    "failed",
    "bit",
    "whenever",
    "see",
    "gas",
    "estimation",
    "failed",
    "errors",
    "usually",
    "means",
    "something",
    "reverted",
    "something",
    "required",
    "however",
    "go",
    "value",
    "spend",
    "lot",
    "let",
    "say",
    "ether",
    "take",
    "calculator",
    "250",
    "going",
    "250",
    "easily",
    "well",
    "beyond",
    "past",
    "50",
    "threshold",
    "let",
    "add",
    "ether",
    "remember",
    "got",
    "adding",
    "converter",
    "grabbing",
    "way",
    "way",
    "smallest",
    "denomination",
    "change",
    "way",
    "hit",
    "fund",
    "go",
    "go",
    "hit",
    "fund",
    "see",
    "mamass",
    "pops",
    "mamass",
    "goes",
    "oh",
    "yeah",
    "transaction",
    "going",
    "revert",
    "want",
    "go",
    "ahead",
    "hit",
    "confirm",
    "finally",
    "sent",
    "funding",
    "contract",
    "confirmed",
    "go",
    "ahead",
    "grab",
    "address",
    "pop",
    "address",
    "amount",
    "see",
    "indeed",
    "funding",
    "gone",
    "part",
    "crowdsourcing",
    "application",
    "minimum",
    "value",
    "fantastic",
    "awesome",
    "great",
    "job",
    "awesome",
    "fund",
    "contract",
    "certain",
    "minimum",
    "usd",
    "value",
    "case",
    "going",
    "50",
    "notice",
    "though",
    "right",
    "anything",
    "money",
    "going",
    "fund",
    "contract",
    "however",
    "function",
    "actually",
    "withdraw",
    "money",
    "way",
    "even",
    "though",
    "sent",
    "contract",
    "money",
    "way",
    "us",
    "get",
    "back",
    "fix",
    "well",
    "add",
    "withdraw",
    "function",
    "let",
    "go",
    "ahead",
    "add",
    "function",
    "withdraw",
    "also",
    "going",
    "payable",
    "function",
    "going",
    "transferring",
    "eth",
    "make",
    "public",
    "message",
    "sender",
    "transfer",
    "transfer",
    "function",
    "call",
    "address",
    "send",
    "eth",
    "one",
    "address",
    "another",
    "transfer",
    "function",
    "sends",
    "amount",
    "ethereum",
    "whoever",
    "called",
    "case",
    "transferring",
    "ethereum",
    "message",
    "sender",
    "need",
    "define",
    "much",
    "want",
    "send",
    "well",
    "going",
    "send",
    "money",
    "funded",
    "get",
    "money",
    "funded",
    "contract",
    "address",
    "balance",
    "couple",
    "special",
    "things",
    "going",
    "line",
    "first",
    "saying",
    "address",
    "keyword",
    "solidity",
    "whenever",
    "refer",
    "talking",
    "contract",
    "currently",
    "add",
    "address",
    "saying",
    "want",
    "address",
    "contract",
    "currently",
    "whenever",
    "call",
    "address",
    "balance",
    "attribute",
    "see",
    "balance",
    "ether",
    "contract",
    "line",
    "saying",
    "whoever",
    "called",
    "withdraw",
    "function",
    "whoever",
    "calls",
    "function",
    "going",
    "message",
    "sender",
    "transfer",
    "money",
    "let",
    "go",
    "ahead",
    "try",
    "let",
    "deploy",
    "fundme",
    "let",
    "fund",
    "lot",
    "ether",
    "see",
    "fund",
    "one",
    "whole",
    "ether",
    "see",
    "go",
    "contract",
    "get",
    "pulled",
    "contract",
    "hit",
    "fund",
    "button",
    "see",
    "sending",
    "one",
    "whole",
    "ether",
    "contract",
    "look",
    "balance",
    "bance",
    "gone",
    "17",
    "16",
    "still",
    "18",
    "went",
    "18",
    "let",
    "try",
    "get",
    "back",
    "call",
    "withdraw",
    "function",
    "confirm",
    "transaction",
    "goes",
    "get",
    "ether",
    "back",
    "let",
    "look",
    "metamask",
    "boom",
    "indeed",
    "got",
    "e",
    "back",
    "however",
    "looking",
    "contract",
    "see",
    "hm",
    "well",
    "maybe",
    "want",
    "anybody",
    "able",
    "withdraw",
    "funds",
    "contract",
    "seems",
    "like",
    "might",
    "really",
    "bad",
    "idea",
    "maybe",
    "want",
    "funding",
    "admin",
    "able",
    "withdraw",
    "funds",
    "set",
    "way",
    "contract",
    "owner",
    "actually",
    "withdraw",
    "funds",
    "well",
    "learned",
    "require",
    "function",
    "actually",
    "stop",
    "contracts",
    "executing",
    "unless",
    "certain",
    "parameters",
    "met",
    "thing",
    "require",
    "message",
    "sender",
    "equals",
    "owner",
    "owner",
    "contract",
    "yet",
    "get",
    "owner",
    "contract",
    "instant",
    "deploy",
    "well",
    "could",
    "function",
    "called",
    "create",
    "owner",
    "happens",
    "somebody",
    "calls",
    "function",
    "right",
    "deploy",
    "well",
    "would",
    "owner",
    "anymore",
    "actually",
    "need",
    "function",
    "get",
    "called",
    "instant",
    "deploy",
    "smart",
    "contract",
    "actually",
    "exactly",
    "constructor",
    "typically",
    "top",
    "smart",
    "contracts",
    "see",
    "constructor",
    "function",
    "gets",
    "called",
    "instant",
    "contract",
    "gets",
    "deployed",
    "even",
    "need",
    "add",
    "function",
    "literally",
    "call",
    "constructor",
    "constructs",
    "smart",
    "contract",
    "make",
    "constructor",
    "public",
    "whatever",
    "add",
    "immediately",
    "executed",
    "whenever",
    "deploy",
    "contract",
    "one",
    "thing",
    "could",
    "could",
    "owner",
    "set",
    "instant",
    "deploy",
    "smart",
    "contract",
    "top",
    "could",
    "add",
    "address",
    "owner",
    "constructor",
    "could",
    "say",
    "owner",
    "equals",
    "message",
    "sender",
    "sender",
    "message",
    "going",
    "us",
    "going",
    "whoever",
    "deploys",
    "smart",
    "contract",
    "even",
    "test",
    "javascript",
    "vm",
    "little",
    "bit",
    "quicker",
    "actually",
    "going",
    "calling",
    "fund",
    "get",
    "price",
    "function",
    "oops",
    "let",
    "also",
    "make",
    "public",
    "interact",
    "see",
    "owner",
    "variable",
    "go",
    "fund",
    "deploy",
    "javascript",
    "vm",
    "able",
    "see",
    "owner",
    "contract",
    "address",
    "constructor",
    "function",
    "immediately",
    "called",
    "instant",
    "deployed",
    "smart",
    "contract",
    "awesome",
    "see",
    "owner",
    "smart",
    "contract",
    "indeed",
    "wallet",
    "remember",
    "working",
    "javascript",
    "vm",
    "wallet",
    "fake",
    "wallets",
    "kind",
    "give",
    "us",
    "even",
    "try",
    "injected",
    "web",
    "3",
    "deploying",
    "owner",
    "ox",
    "757",
    "etc",
    "address",
    "let",
    "go",
    "ahead",
    "look",
    "funme",
    "see",
    "owner",
    "indeed",
    "see",
    "owner",
    "us",
    "okay",
    "great",
    "owner",
    "go",
    "withdrawal",
    "function",
    "use",
    "require",
    "call",
    "require",
    "message",
    "sender",
    "equals",
    "equals",
    "owner",
    "equals",
    "equals",
    "way",
    "solidity",
    "understands",
    "true",
    "false",
    "saying",
    "message",
    "us",
    "sender",
    "equal",
    "owner",
    "let",
    "go",
    "ahead",
    "try",
    "try",
    "javascript",
    "vm",
    "speed",
    "reasons",
    "let",
    "deploy",
    "fundme",
    "go",
    "try",
    "call",
    "withdraw",
    "function",
    "looks",
    "like",
    "successful",
    "currently",
    "address",
    "deployed",
    "contract",
    "also",
    "address",
    "calling",
    "withdraw",
    "however",
    "switch",
    "different",
    "account",
    "call",
    "withdraw",
    "see",
    "remix",
    "actually",
    "freaks",
    "says",
    "uhoh",
    "something",
    "wrong",
    "happened",
    "essentially",
    "required",
    "statement",
    "kicking",
    "want",
    "try",
    "injected",
    "web",
    "3",
    "well",
    "absolutely",
    "remember",
    "way",
    "switch",
    "accounts",
    "metamask",
    "either",
    "create",
    "account",
    "right",
    "switch",
    "like",
    "connect",
    "account",
    "two",
    "try",
    "withdraw",
    "second",
    "account",
    "call",
    "contract",
    "hit",
    "withdraw",
    "going",
    "give",
    "us",
    "gas",
    "estimation",
    "failed",
    "required",
    "statement",
    "going",
    "kick",
    "switch",
    "back",
    "account",
    "one",
    "call",
    "withdraw",
    "metamask",
    "going",
    "pop",
    "going",
    "allow",
    "us",
    "withdraw",
    "obviously",
    "nothing",
    "contract",
    "right",
    "going",
    "withdraw",
    "nothing",
    "still",
    "call",
    "going",
    "message",
    "transfer",
    "zero",
    "great",
    "require",
    "withdraw",
    "function",
    "callable",
    "owner",
    "ton",
    "contracts",
    "want",
    "use",
    "something",
    "like",
    "require",
    "message",
    "senter",
    "owner",
    "maybe",
    "complicated",
    "easier",
    "way",
    "wrap",
    "functions",
    "require",
    "executable",
    "well",
    "modifiers",
    "come",
    "use",
    "modifier",
    "write",
    "definition",
    "function",
    "add",
    "parameter",
    "allows",
    "called",
    "admin",
    "contract",
    "modifiers",
    "used",
    "change",
    "behavior",
    "functions",
    "declarative",
    "way",
    "let",
    "create",
    "first",
    "modifier",
    "call",
    "modifier",
    "key",
    "word",
    "owner",
    "add",
    "require",
    "statement",
    "require",
    "message",
    "sender",
    "equals",
    "owner",
    "add",
    "underscore",
    "semicolon",
    "modifier",
    "going",
    "going",
    "say",
    "hey",
    "run",
    "function",
    "require",
    "statement",
    "first",
    "wherever",
    "underscore",
    "modifier",
    "run",
    "rest",
    "code",
    "could",
    "also",
    "modifier",
    "underscore",
    "afterwards",
    "want",
    "run",
    "require",
    "first",
    "make",
    "function",
    "withdraw",
    "payable",
    "owner",
    "public",
    "going",
    "happen",
    "transfer",
    "actually",
    "going",
    "check",
    "modifier",
    "actually",
    "going",
    "run",
    "require",
    "message",
    "sender",
    "equals",
    "owner",
    "underscore",
    "add",
    "rest",
    "function",
    "speed",
    "reasons",
    "since",
    "actually",
    "going",
    "interacting",
    "chain",
    "link",
    "data",
    "contract",
    "go",
    "javascript",
    "vm",
    "switch",
    "fundme",
    "deploy",
    "call",
    "withdraw",
    "obviously",
    "call",
    "withdraw",
    "account",
    "switch",
    "accounts",
    "try",
    "call",
    "withdraw",
    "going",
    "get",
    "error",
    "perfect",
    "means",
    "modifier",
    "working",
    "correctly",
    "awesome",
    "fantastically",
    "succinct",
    "fundme",
    "contract",
    "thing",
    "really",
    "missing",
    "withdraw",
    "contract",
    "actually",
    "updating",
    "balances",
    "people",
    "funded",
    "even",
    "withdraw",
    "always",
    "going",
    "need",
    "go",
    "funders",
    "mapping",
    "reset",
    "balances",
    "zero",
    "actually",
    "ca",
    "actually",
    "loop",
    "keys",
    "mapping",
    "mapping",
    "initialized",
    "every",
    "single",
    "key",
    "essentially",
    "initialized",
    "obviously",
    "ca",
    "go",
    "every",
    "single",
    "possible",
    "key",
    "planet",
    "however",
    "create",
    "another",
    "data",
    "structure",
    "array",
    "something",
    "already",
    "familiar",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "funders",
    "array",
    "way",
    "loop",
    "reset",
    "everyone",
    "balance",
    "zero",
    "address",
    "array",
    "going",
    "array",
    "funders",
    "addresses",
    "make",
    "public",
    "call",
    "funders",
    "somebody",
    "funds",
    "contract",
    "going",
    "going",
    "funders",
    "whenever",
    "funer",
    "funds",
    "contract",
    "go",
    "ahead",
    "push",
    "onto",
    "funders",
    "array",
    "funders",
    "push",
    "message",
    "sender",
    "somebody",
    "funds",
    "multiple",
    "times",
    "funders",
    "array",
    "going",
    "little",
    "bit",
    "redundant",
    "going",
    "ignore",
    "array",
    "funders",
    "withdraw",
    "everything",
    "going",
    "want",
    "reset",
    "zero",
    "withdraw",
    "everything",
    "want",
    "reset",
    "everyone",
    "balance",
    "mapping",
    "zero",
    "going",
    "called",
    "loop",
    "loop",
    "way",
    "loop",
    "range",
    "numbers",
    "something",
    "going",
    "say",
    "four",
    "un",
    "256",
    "funer",
    "index",
    "equals",
    "zero",
    "want",
    "start",
    "zeroth",
    "index",
    "going",
    "give",
    "max",
    "size",
    "go",
    "going",
    "say",
    "funer",
    "index",
    "less",
    "funders",
    "lengthlength",
    "get",
    "length",
    "array",
    "going",
    "say",
    "funders",
    "index",
    "means",
    "index",
    "variable",
    "called",
    "funer",
    "index",
    "going",
    "start",
    "zero",
    "loop",
    "going",
    "finish",
    "whenever",
    "funer",
    "index",
    "greater",
    "length",
    "funders",
    "every",
    "time",
    "finish",
    "loop",
    "going",
    "add",
    "one",
    "funer",
    "index",
    "funer",
    "index",
    "adds",
    "one",
    "funer",
    "index",
    "every",
    "time",
    "whatever",
    "code",
    "loop",
    "executes",
    "going",
    "restart",
    "top",
    "going",
    "going",
    "grab",
    "address",
    "fun",
    "funders",
    "array",
    "funders",
    "fun",
    "index",
    "funders",
    "array",
    "going",
    "use",
    "key",
    "mapping",
    "going",
    "take",
    "address",
    "amount",
    "funded",
    "funer",
    "going",
    "set",
    "equal",
    "zero",
    "mapping",
    "going",
    "updated",
    "people",
    "zero",
    "funded",
    "one",
    "thing",
    "well",
    "reset",
    "funer",
    "array",
    "well",
    "couple",
    "ways",
    "really",
    "easy",
    "way",
    "set",
    "funders",
    "equal",
    "new",
    "array",
    "could",
    "funders",
    "equals",
    "new",
    "blank",
    "address",
    "array",
    "right",
    "looks",
    "like",
    "got",
    "everything",
    "need",
    "right",
    "away",
    "deploy",
    "set",
    "owner",
    "allow",
    "anybody",
    "fund",
    "whatever",
    "public",
    "good",
    "fund",
    "minimum",
    "usd",
    "value",
    "actually",
    "set",
    "whenever",
    "fund",
    "keep",
    "track",
    "much",
    "funding",
    "funding",
    "us",
    "get",
    "price",
    "ethereum",
    "send",
    "terms",
    "usd",
    "convert",
    "check",
    "see",
    "sending",
    "us",
    "right",
    "amount",
    "owner",
    "modifier",
    "ones",
    "withdraw",
    "contract",
    "withdraw",
    "everything",
    "contract",
    "reset",
    "funders",
    "currently",
    "participated",
    "crowdsourcing",
    "application",
    "awesome",
    "let",
    "see",
    "everything",
    "works",
    "end",
    "end",
    "going",
    "go",
    "fundme",
    "going",
    "deploy",
    "going",
    "confirm",
    "metamask",
    "remember",
    "ever",
    "confused",
    "going",
    "something",
    "weird",
    "happening",
    "transactions",
    "deployments",
    "always",
    "go",
    "ether",
    "scan",
    "read",
    "transaction",
    "going",
    "transaction",
    "deployed",
    "let",
    "go",
    "ahead",
    "take",
    "inventory",
    "going",
    "owner",
    "address",
    "right",
    "aggregator",
    "v3",
    "interface",
    "version",
    "version",
    "3",
    "kind",
    "ignore",
    "price",
    "ethereum",
    "terms",
    "usd",
    "18",
    "decimals",
    "instead",
    "eight",
    "function",
    "allows",
    "us",
    "get",
    "conversion",
    "rate",
    "ethereum",
    "amount",
    "dollar",
    "equivalent",
    "array",
    "funders",
    "right",
    "starts",
    "empty",
    "mapping",
    "addresses",
    "also",
    "right",
    "starts",
    "empty",
    "let",
    "go",
    "ahead",
    "try",
    "fund",
    "contract",
    "use",
    "way",
    "always",
    "page",
    "fund",
    "way",
    "remember",
    "everything",
    "18",
    "decimal",
    "places",
    "want",
    "17",
    "one",
    "1",
    "2",
    "3",
    "four",
    "5",
    "six",
    "seven",
    "eight",
    "1",
    "2",
    "3",
    "four",
    "5",
    "six",
    "seven",
    "eight",
    "nine",
    "ethereum",
    "go",
    "ahead",
    "hit",
    "fund",
    "going",
    "send",
    "eth",
    "contract",
    "great",
    "look",
    "zero",
    "index",
    "funders",
    "see",
    "indeed",
    "funded",
    "contract",
    "let",
    "even",
    "second",
    "account",
    "fund",
    "contract",
    "got",
    "switch",
    "contract",
    "metamask",
    "go",
    "ahead",
    "put",
    "eth",
    "back",
    "value",
    "hit",
    "fund",
    "see",
    "deploying",
    "account",
    "two",
    "let",
    "go",
    "ahead",
    "hit",
    "confirm",
    "fun",
    "index",
    "zero",
    "going",
    "admin",
    "funer",
    "index",
    "one",
    "going",
    "second",
    "account",
    "go",
    "ahead",
    "add",
    "funer",
    "see",
    "indeed",
    "sent",
    "ether",
    "account",
    "go",
    "back",
    "account",
    "one",
    "put",
    "see",
    "address",
    "also",
    "ether",
    "fantastic",
    "let",
    "try",
    "malicious",
    "let",
    "try",
    "account",
    "number",
    "two",
    "actually",
    "withdraw",
    "funds",
    "let",
    "hit",
    "withdraw",
    "function",
    "uh",
    "oh",
    "transaction",
    "failed",
    "relentlessly",
    "malicious",
    "want",
    "send",
    "transaction",
    "regardless",
    "even",
    "though",
    "admin",
    "contract",
    "gone",
    "ahead",
    "still",
    "tried",
    "send",
    "withdraw",
    "happens",
    "see",
    "remix",
    "saying",
    "hey",
    "something",
    "went",
    "wrong",
    "look",
    "ether",
    "scan",
    "see",
    "fail",
    "since",
    "modifier",
    "give",
    "reason",
    "nothing",
    "shows",
    "could",
    "always",
    "put",
    "reason",
    "something",
    "would",
    "show",
    "right",
    "let",
    "go",
    "ahead",
    "back",
    "actual",
    "admin",
    "let",
    "try",
    "withdraw",
    "everything",
    "hit",
    "withdraw",
    "go",
    "ahead",
    "confirm",
    "happen",
    "everything",
    "back",
    "zero",
    "array",
    "back",
    "zero",
    "well",
    "watch",
    "address",
    "see",
    "literally",
    "went",
    "04",
    "6",
    "got",
    "original",
    "funding",
    "account",
    "put",
    "second",
    "account",
    "put",
    "look",
    "funer",
    "zero",
    "see",
    "actually",
    "errored",
    "brand",
    "new",
    "array",
    "nothing",
    "index",
    "zero",
    "try",
    "see",
    "much",
    "address",
    "funded",
    "back",
    "zero",
    "awesome",
    "learned",
    "deploy",
    "relatively",
    "simple",
    "yet",
    "effective",
    "crowdsourcing",
    "application",
    "users",
    "fund",
    "admin",
    "withdraw",
    "funds",
    "go",
    "spend",
    "things",
    "working",
    "remix",
    "far",
    "start",
    "smart",
    "contract",
    "solidity",
    "development",
    "journey",
    "remix",
    "incredibly",
    "powerful",
    "known",
    "web",
    "ide",
    "integrated",
    "development",
    "environment",
    "opinion",
    "remix",
    "always",
    "starting",
    "ground",
    "anybody",
    "looking",
    "start",
    "smart",
    "contract",
    "journey",
    "wonderfully",
    "friendly",
    "way",
    "really",
    "show",
    "going",
    "behind",
    "scenes",
    "really",
    "easy",
    "see",
    "everything",
    "ethereum",
    "chain",
    "link",
    "smart",
    "contracts",
    "limitations",
    "though",
    "really",
    "hard",
    "integrate",
    "parts",
    "different",
    "projects",
    "limited",
    "support",
    "testing",
    "custom",
    "deployments",
    "little",
    "tricky",
    "save",
    "files",
    "locally",
    "need",
    "internet",
    "connection",
    "actually",
    "interact",
    "python",
    "order",
    "us",
    "deploy",
    "test",
    "automate",
    "everything",
    "smart",
    "contract",
    "development",
    "cycle",
    "want",
    "connect",
    "solidity",
    "smart",
    "contracts",
    "traditional",
    "programming",
    "language",
    "like",
    "python",
    "way",
    "customize",
    "entire",
    "development",
    "environment",
    "way",
    "like",
    "first",
    "going",
    "teach",
    "work",
    "known",
    "web",
    "incredibly",
    "powerful",
    "python",
    "package",
    "everything",
    "want",
    "smart",
    "contracts",
    "learned",
    "basics",
    "web",
    "pi",
    "move",
    "browning",
    "smart",
    "contract",
    "development",
    "framework",
    "built",
    "top",
    "web",
    "3py",
    "makes",
    "lives",
    "even",
    "easier",
    "however",
    "still",
    "really",
    "important",
    "learn",
    "web",
    "3p",
    "first",
    "teach",
    "going",
    "behind",
    "scenes",
    "brownie",
    "rest",
    "course",
    "going",
    "working",
    "visual",
    "studio",
    "code",
    "incredible",
    "ibly",
    "powerful",
    "text",
    "editor",
    "give",
    "us",
    "lot",
    "formatting",
    "lot",
    "really",
    "nice",
    "tools",
    "work",
    "deploying",
    "interacting",
    "smart",
    "contracts",
    "already",
    "got",
    "vs",
    "code",
    "python",
    "entire",
    "coding",
    "setup",
    "set",
    "way",
    "like",
    "feel",
    "free",
    "use",
    "timestamps",
    "description",
    "skip",
    "ahead",
    "next",
    "section",
    "often",
    "hear",
    "people",
    "referring",
    "vs",
    "code",
    "visual",
    "studio",
    "code",
    "point",
    "looking",
    "right",
    "front",
    "visual",
    "studio",
    "different",
    "application",
    "make",
    "sure",
    "visual",
    "studio",
    "code",
    "want",
    "total",
    "hardo",
    "work",
    "vim",
    "emac",
    "whatever",
    "else",
    "want",
    "absolutely",
    "going",
    "go",
    "setting",
    "visual",
    "studio",
    "code",
    "way",
    "like",
    "guys",
    "want",
    "follow",
    "along",
    "highly",
    "recommend",
    "going",
    "make",
    "life",
    "lot",
    "easier",
    "link",
    "download",
    "visual",
    "studio",
    "code",
    "github",
    "repository",
    "basically",
    "come",
    "site",
    "right",
    "hit",
    "big",
    "download",
    "button",
    "recognize",
    "operating",
    "system",
    "windows",
    "mac",
    "operating",
    "system",
    "go",
    "ahead",
    "hit",
    "little",
    "drop",
    "pick",
    "one",
    "let",
    "go",
    "ahead",
    "download",
    "visual",
    "studio",
    "code",
    "open",
    "awesome",
    "downloaded",
    "visual",
    "studio",
    "code",
    "approximately",
    "seeing",
    "fantastic",
    "getting",
    "started",
    "section",
    "brand",
    "new",
    "vs",
    "code",
    "want",
    "learn",
    "little",
    "bit",
    "quickly",
    "absolutely",
    "links",
    "well",
    "github",
    "repository",
    "giving",
    "crash",
    "course",
    "vs",
    "code",
    "want",
    "learn",
    "let",
    "set",
    "though",
    "going",
    "really",
    "friendly",
    "us",
    "smart",
    "contract",
    "development",
    "first",
    "want",
    "go",
    "extensions",
    "tab",
    "looks",
    "like",
    "little",
    "blocks",
    "thing",
    "right",
    "first",
    "going",
    "look",
    "python",
    "want",
    "install",
    "python",
    "extension",
    "right",
    "going",
    "make",
    "lives",
    "lot",
    "easier",
    "interacting",
    "python",
    "lot",
    "things",
    "python",
    "going",
    "want",
    "go",
    "ahead",
    "download",
    "install",
    "solidity",
    "extension",
    "going",
    "make",
    "formatting",
    "solidity",
    "lot",
    "easier",
    "want",
    "download",
    "python",
    "already",
    "go",
    "ahead",
    "let",
    "go",
    "downloads",
    "recognize",
    "operating",
    "system",
    "go",
    "ahead",
    "hit",
    "download",
    "button",
    "follow",
    "steps",
    "download",
    "already",
    "got",
    "download",
    "going",
    "walk",
    "okay",
    "great",
    "python",
    "installed",
    "one",
    "amazing",
    "things",
    "vss",
    "code",
    "actually",
    "open",
    "terminal",
    "inside",
    "visual",
    "studio",
    "code",
    "way",
    "open",
    "terminal",
    "vs",
    "code",
    "go",
    "top",
    "bar",
    "terminal",
    "select",
    "new",
    "terminal",
    "see",
    "something",
    "looks",
    "like",
    "might",
    "bash",
    "might",
    "zch",
    "might",
    "powershell",
    "lot",
    "different",
    "types",
    "terminals",
    "able",
    "see",
    "looking",
    "right",
    "test",
    "see",
    "python",
    "installed",
    "correctly",
    "type",
    "python",
    "space",
    "version",
    "get",
    "something",
    "looks",
    "like",
    "exact",
    "version",
    "python",
    "really",
    "matter",
    "ideally",
    "least",
    "python",
    "python",
    "version",
    "vers",
    "work",
    "also",
    "try",
    "python",
    "3",
    "version",
    "neither",
    "one",
    "works",
    "actually",
    "number",
    "troubleshooting",
    "tips",
    "github",
    "repository",
    "course",
    "often",
    "times",
    "quick",
    "google",
    "search",
    "whatever",
    "error",
    "get",
    "link",
    "lead",
    "answer",
    "google",
    "search",
    "lead",
    "answer",
    "go",
    "ahead",
    "drop",
    "issue",
    "conversation",
    "associated",
    "issue",
    "github",
    "repo",
    "associated",
    "course",
    "particular",
    "couple",
    "common",
    "errors",
    "definitely",
    "seen",
    "number",
    "times",
    "see",
    "issue",
    "instance",
    "matches",
    "something",
    "screen",
    "definitely",
    "100",
    "sure",
    "check",
    "troubleshooting",
    "tips",
    "sometimes",
    "installing",
    "applications",
    "really",
    "hardest",
    "part",
    "entire",
    "coding",
    "journey",
    "please",
    "make",
    "sure",
    "python",
    "vs",
    "code",
    "installed",
    "correctly",
    "moving",
    "discouraged",
    "work",
    "exactly",
    "way",
    "right",
    "away",
    "mac",
    "actually",
    "hit",
    "control",
    "back",
    "tick",
    "toggle",
    "back",
    "forth",
    "terminal",
    "open",
    "closing",
    "find",
    "really",
    "helpful",
    "use",
    "time",
    "instead",
    "hitting",
    "buttons",
    "key",
    "tip",
    "productivity",
    "going",
    "using",
    "keyboard",
    "shortcuts",
    "instead",
    "clicking",
    "around",
    "time",
    "much",
    "faster",
    "okay",
    "great",
    "python",
    "installed",
    "python",
    "solidity",
    "extensions",
    "visual",
    "studio",
    "code",
    "installed",
    "let",
    "start",
    "working",
    "new",
    "project",
    "terminal",
    "terminal",
    "create",
    "folder",
    "already",
    "created",
    "demos",
    "folder",
    "create",
    "one",
    "well",
    "like",
    "mkdir",
    "demos",
    "since",
    "already",
    "done",
    "file",
    "already",
    "already",
    "exists",
    "cd",
    "demos",
    "type",
    "clear",
    "mac",
    "command",
    "k",
    "clear",
    "terminal",
    "going",
    "going",
    "working",
    "simple",
    "storage",
    "exact",
    "contracts",
    "instead",
    "going",
    "using",
    "web",
    "going",
    "make",
    "new",
    "directory",
    "inside",
    "demos",
    "folder",
    "sl",
    "directory",
    "called",
    "web",
    "3",
    "pi",
    "simple",
    "storage",
    "going",
    "see",
    "new",
    "folder",
    "right",
    "completed",
    "code",
    "going",
    "github",
    "going",
    "link",
    "everything",
    "folder",
    "github",
    "always",
    "refer",
    "get",
    "lost",
    "next",
    "thing",
    "want",
    "want",
    "visual",
    "studio",
    "code",
    "know",
    "folder",
    "go",
    "ahead",
    "click",
    "files",
    "icon",
    "hit",
    "open",
    "folder",
    "going",
    "go",
    "web",
    "3",
    "pi",
    "simple",
    "storage",
    "hit",
    "open",
    "another",
    "vs",
    "code",
    "actually",
    "pop",
    "see",
    "left",
    "hand",
    "side",
    "folder",
    "show",
    "different",
    "files",
    "folders",
    "web",
    "3",
    "pi",
    "simple",
    "storage",
    "directory",
    "let",
    "go",
    "ahead",
    "create",
    "file",
    "rightclick",
    "area",
    "select",
    "new",
    "file",
    "simple",
    "storage",
    "soul",
    "go",
    "back",
    "simple",
    "storage",
    "remix",
    "copy",
    "everything",
    "paste",
    "remember",
    "always",
    "refer",
    "back",
    "github",
    "repository",
    "awesome",
    "solidity",
    "file",
    "called",
    "simple",
    "storage",
    "soul",
    "notice",
    "words",
    "actually",
    "highlighted",
    "different",
    "colors",
    "known",
    "syntax",
    "highlighting",
    "due",
    "fact",
    "added",
    "solidity",
    "extension",
    "makes",
    "reading",
    "code",
    "lot",
    "easier",
    "file",
    "see",
    "little",
    "dot",
    "whenever",
    "see",
    "little",
    "dot",
    "means",
    "vs",
    "code",
    "file",
    "saved",
    "want",
    "always",
    "save",
    "otherwise",
    "compile",
    "go",
    "r",
    "script",
    "things",
    "might",
    "work",
    "correctly",
    "save",
    "going",
    "file",
    "selecting",
    "save",
    "going",
    "want",
    "learn",
    "keyboard",
    "shortcuts",
    "going",
    "want",
    "hit",
    "save",
    "often",
    "mac",
    "command",
    "windows",
    "controls",
    "thing",
    "see",
    "get",
    "red",
    "line",
    "vs",
    "code",
    "way",
    "telling",
    "us",
    "thinks",
    "error",
    "position",
    "really",
    "extension",
    "little",
    "bit",
    "confused",
    "safely",
    "ignore",
    "normally",
    "coding",
    "ignore",
    "often",
    "going",
    "flipping",
    "back",
    "forth",
    "compiler",
    "versions",
    "often",
    "times",
    "really",
    "helpful",
    "warning",
    "really",
    "bothersome",
    "could",
    "rightclick",
    "something",
    "like",
    "solidity",
    "change",
    "global",
    "compiler",
    "version",
    "go",
    "code",
    "preferences",
    "settings",
    "let",
    "close",
    "see",
    "things",
    "look",
    "solidity",
    "come",
    "solidity",
    "extension",
    "config",
    "scroll",
    "see",
    "solidity",
    "compile",
    "using",
    "remote",
    "version",
    "allow",
    "us",
    "choose",
    "version",
    "want",
    "compile",
    "hit",
    "save",
    "go",
    "back",
    "simple",
    "storage",
    "see",
    "red",
    "line",
    "gone",
    "another",
    "really",
    "helpful",
    "piece",
    "add",
    "called",
    "formatter",
    "scroll",
    "solidity",
    "format",
    "see",
    "enabl",
    "disables",
    "solidity",
    "formatter",
    "go",
    "none",
    "prettier",
    "also",
    "look",
    "format",
    "save",
    "want",
    "make",
    "sure",
    "editor",
    "format",
    "save",
    "check",
    "marked",
    "come",
    "simpl",
    "storage",
    "maybe",
    "got",
    "bad",
    "formatting",
    "move",
    "favorite",
    "number",
    "string",
    "name",
    "put",
    "whole",
    "bunch",
    "new",
    "spaces",
    "something",
    "hit",
    "save",
    "automatically",
    "reformats",
    "file",
    "look",
    "lot",
    "nicer",
    "recap",
    "want",
    "turn",
    "format",
    "save",
    "get",
    "issues",
    "red",
    "line",
    "pragma",
    "solidity",
    "change",
    "compiler",
    "version",
    "settings",
    "also",
    "going",
    "go",
    "ahead",
    "set",
    "python",
    "formatting",
    "well",
    "first",
    "thing",
    "going",
    "going",
    "install",
    "black",
    "python",
    "formatter",
    "going",
    "open",
    "terminal",
    "whenever",
    "install",
    "python",
    "comes",
    "package",
    "called",
    "hip",
    "check",
    "see",
    "pip",
    "installed",
    "correctly",
    "run",
    "pip",
    "version",
    "install",
    "black",
    "formatter",
    "running",
    "pip",
    "install",
    "black",
    "already",
    "installed",
    "going",
    "pretty",
    "quick",
    "come",
    "settings",
    "look",
    "python",
    "formatting",
    "scroll",
    "python",
    "formatting",
    "provider",
    "might",
    "autop",
    "bait",
    "none",
    "going",
    "want",
    "change",
    "black",
    "way",
    "whenever",
    "save",
    "python",
    "files",
    "also",
    "get",
    "automatically",
    "formatted",
    "readable",
    "really",
    "nice",
    "note",
    "demos",
    "solidity",
    "always",
    "format",
    "save",
    "solidity",
    "format",
    "save",
    "python",
    "still",
    "going",
    "highly",
    "recommend",
    "format",
    "save",
    "python",
    "solidity",
    "anyways",
    "going",
    "actually",
    "deploy",
    "well",
    "python",
    "going",
    "come",
    "play",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "file",
    "left",
    "call",
    "deploy",
    "dopy",
    "let",
    "go",
    "deploy",
    "dopy",
    "file",
    "let",
    "start",
    "actually",
    "figuring",
    "deploy",
    "python",
    "part",
    "course",
    "start",
    "using",
    "python",
    "unfamiliar",
    "python",
    "little",
    "bit",
    "weaker",
    "python",
    "fantastic",
    "free",
    "code",
    "camp",
    "course",
    "goes",
    "basics",
    "python",
    "want",
    "learn",
    "definitely",
    "recommend",
    "checking",
    "however",
    "going",
    "walk",
    "scripts",
    "write",
    "anyway",
    "afraid",
    "jump",
    "follow",
    "along",
    "even",
    "experience",
    "first",
    "thing",
    "going",
    "want",
    "actually",
    "read",
    "simple",
    "storage",
    "solidity",
    "file",
    "need",
    "get",
    "deploy",
    "script",
    "python",
    "file",
    "knows",
    "going",
    "deploy",
    "well",
    "going",
    "type",
    "open",
    "quote",
    "slash",
    "simpl",
    "storage",
    "soul",
    "comma",
    "r",
    "file",
    "simple",
    "storage",
    "file",
    "equals",
    "file",
    "read",
    "actually",
    "well",
    "saying",
    "going",
    "execute",
    "code",
    "inside",
    "indented",
    "area",
    "colon",
    "code",
    "finished",
    "actually",
    "going",
    "close",
    "file",
    "right",
    "opening",
    "going",
    "close",
    "done",
    "file",
    "going",
    "open",
    "going",
    "simple",
    "storage",
    "soul",
    "located",
    "right",
    "directory",
    "going",
    "read",
    "going",
    "call",
    "file",
    "going",
    "read",
    "contents",
    "file",
    "place",
    "variable",
    "simple",
    "storage",
    "file",
    "go",
    "ahead",
    "write",
    "print",
    "statement",
    "print",
    "simple",
    "storage",
    "file",
    "hit",
    "save",
    "see",
    "automatically",
    "gets",
    "formatted",
    "really",
    "nice",
    "want",
    "run",
    "black",
    "type",
    "black",
    "dot",
    "automatically",
    "format",
    "python",
    "files",
    "folder",
    "know",
    "right",
    "add",
    "whole",
    "bunch",
    "new",
    "lines",
    "save",
    "anyways",
    "enough",
    "fun",
    "formatting",
    "let",
    "head",
    "terminal",
    "let",
    "call",
    "python",
    "deploy",
    "see",
    "terminal",
    "printed",
    "everything",
    "simple",
    "storage",
    "file",
    "perfect",
    "python",
    "script",
    "needs",
    "actually",
    "get",
    "started",
    "working",
    "solidity",
    "something",
    "see",
    "lot",
    "save",
    "lot",
    "looking",
    "keyboard",
    "shortcuts",
    "always",
    "command",
    "p",
    "little",
    "bracket",
    "look",
    "keyboard",
    "shortcuts",
    "reference",
    "click",
    "bring",
    "keyboard",
    "reference",
    "page",
    "based",
    "operating",
    "system",
    "right",
    "great",
    "actually",
    "read",
    "simple",
    "storage",
    "file",
    "actually",
    "compile",
    "remember",
    "back",
    "remix",
    "every",
    "single",
    "time",
    "anything",
    "files",
    "compile",
    "first",
    "need",
    "compiler",
    "python",
    "luckily",
    "fantastic",
    "python",
    "package",
    "called",
    "py",
    "x",
    "exactly",
    "also",
    "want",
    "point",
    "though",
    "pyul",
    "x",
    "actually",
    "fork",
    "package",
    "called",
    "pulk",
    "still",
    "use",
    "pyul",
    "however",
    "going",
    "highly",
    "highly",
    "recommend",
    "use",
    "pyul",
    "x",
    "instead",
    "pulk",
    "x",
    "lot",
    "actively",
    "maintained",
    "ethereum",
    "pyk",
    "install",
    "pip",
    "install",
    "pyk",
    "x",
    "could",
    "even",
    "hit",
    "little",
    "copy",
    "button",
    "move",
    "back",
    "paste",
    "hit",
    "enter",
    "already",
    "installed",
    "pretty",
    "quick",
    "way",
    "use",
    "importing",
    "python",
    "say",
    "suk",
    "x",
    "import",
    "compile",
    "standard",
    "compile",
    "standard",
    "going",
    "main",
    "function",
    "actually",
    "use",
    "compile",
    "code",
    "let",
    "go",
    "ahead",
    "compile",
    "solidity",
    "going",
    "save",
    "compiled",
    "code",
    "variable",
    "called",
    "compiled",
    "soul",
    "going",
    "equal",
    "us",
    "calling",
    "compile",
    "standard",
    "function",
    "going",
    "add",
    "lot",
    "variables",
    "lot",
    "parameters",
    "function",
    "first",
    "thing",
    "add",
    "language",
    "case",
    "solidity",
    "going",
    "add",
    "sources",
    "going",
    "say",
    "sources",
    "going",
    "simple",
    "storage",
    "soul",
    "going",
    "content",
    "equal",
    "simple",
    "storage",
    "file",
    "variable",
    "oh",
    "excuse",
    "bracket",
    "piece",
    "well",
    "see",
    "hit",
    "save",
    "auto",
    "formats",
    "really",
    "nice",
    "another",
    "quick",
    "tip",
    "see",
    "even",
    "brackets",
    "highlighted",
    "fun",
    "colors",
    "go",
    "extensions",
    "look",
    "bracket",
    "add",
    "bracket",
    "pair",
    "colorizer",
    "help",
    "make",
    "brackets",
    "look",
    "little",
    "bit",
    "nicer",
    "kind",
    "see",
    "go",
    "ahead",
    "install",
    "well",
    "anyways",
    "add",
    "settings",
    "lot",
    "little",
    "bit",
    "lower",
    "level",
    "stuff",
    "really",
    "going",
    "know",
    "use",
    "going",
    "go",
    "deep",
    "everything",
    "actually",
    "going",
    "settings",
    "going",
    "choose",
    "output",
    "selection",
    "going",
    "choose",
    "output",
    "compile",
    "little",
    "star",
    "star",
    "going",
    "another",
    "star",
    "going",
    "choose",
    "output",
    "list",
    "going",
    "get",
    "abi",
    "incredibly",
    "important",
    "talked",
    "going",
    "get",
    "metadata",
    "going",
    "get",
    "evm",
    "doite",
    "code",
    "going",
    "get",
    "evm",
    "source",
    "map",
    "pretty",
    "much",
    "going",
    "go",
    "deep",
    "output",
    "selection",
    "settings",
    "actually",
    "want",
    "learn",
    "go",
    "homepage",
    "pyk",
    "x",
    "scroll",
    "documentation",
    "section",
    "read",
    "docs",
    "actually",
    "put",
    "different",
    "features",
    "actually",
    "last",
    "thing",
    "going",
    "going",
    "add",
    "suk",
    "version",
    "solidity",
    "version",
    "version",
    "going",
    "say",
    "sulk",
    "version",
    "equals",
    "choose",
    "version",
    "want",
    "use",
    "put",
    "able",
    "print",
    "compiled",
    "see",
    "whole",
    "bunch",
    "really",
    "really",
    "lowlevel",
    "stuff",
    "let",
    "go",
    "ahead",
    "run",
    "run",
    "python",
    "deploy",
    "pi",
    "see",
    "get",
    "massive",
    "object",
    "whole",
    "bunch",
    "basically",
    "unreadable",
    "pieces",
    "lot",
    "code",
    "actually",
    "gets",
    "compiled",
    "whenever",
    "use",
    "compiler",
    "remix",
    "python",
    "remix",
    "actually",
    "exact",
    "thing",
    "compile",
    "something",
    "remix",
    "actually",
    "copy",
    "bite",
    "code",
    "hit",
    "little",
    "copy",
    "button",
    "copy",
    "bite",
    "code",
    "come",
    "back",
    "vs",
    "code",
    "create",
    "new",
    "file",
    "keyboard",
    "shortcut",
    "create",
    "new",
    "file",
    "command",
    "n",
    "paste",
    "everything",
    "see",
    "whole",
    "bunch",
    "stuff",
    "op",
    "codes",
    "code",
    "contract",
    "actually",
    "actually",
    "governs",
    "code",
    "works",
    "written",
    "code",
    "getting",
    "compiled",
    "solidity",
    "actually",
    "read",
    "understand",
    "going",
    "also",
    "see",
    "thing",
    "called",
    "abi",
    "remix",
    "even",
    "going",
    "output",
    "right",
    "abi",
    "thing",
    "remix",
    "hit",
    "copy",
    "button",
    "abi",
    "come",
    "back",
    "create",
    "new",
    "file",
    "paste",
    "see",
    "long",
    "json",
    "object",
    "application",
    "binary",
    "interface",
    "talked",
    "much",
    "see",
    "actually",
    "describing",
    "functions",
    "variables",
    "example",
    "function",
    "called",
    "add",
    "person",
    "takes",
    "two",
    "parameters",
    "name",
    "favorite",
    "number",
    "input",
    "section",
    "function",
    "section",
    "describes",
    "function",
    "actually",
    "name",
    "ad",
    "person",
    "return",
    "type",
    "payable",
    "function",
    "see",
    "pretty",
    "much",
    "everything",
    "lowest",
    "digestible",
    "way",
    "say",
    "hey",
    "functions",
    "parameter",
    "types",
    "return",
    "types",
    "going",
    "everything",
    "like",
    "going",
    "close",
    "though",
    "fantastic",
    "compiled",
    "solidity",
    "typically",
    "usually",
    "also",
    "like",
    "output",
    "print",
    "file",
    "well",
    "open",
    "compiled",
    "code",
    "json",
    "time",
    "instead",
    "reading",
    "going",
    "wrun",
    "right",
    "call",
    "file",
    "well",
    "instead",
    "file",
    "right",
    "going",
    "called",
    "adjacent",
    "dump",
    "piled",
    "soul",
    "file",
    "need",
    "course",
    "import",
    "json",
    "also",
    "note",
    "know",
    "says",
    "using",
    "sulk",
    "please",
    "use",
    "sulk",
    "x",
    "still",
    "ended",
    "filming",
    "little",
    "bit",
    "versions",
    "little",
    "bit",
    "mix",
    "match",
    "please",
    "use",
    "sulk",
    "x",
    "even",
    "see",
    "suk",
    "line",
    "going",
    "going",
    "take",
    "compile",
    "soul",
    "json",
    "variable",
    "dump",
    "file",
    "going",
    "keep",
    "json",
    "syntax",
    "still",
    "going",
    "json",
    "e",
    "run",
    "python",
    "deploy",
    "piy",
    "see",
    "new",
    "file",
    "called",
    "compile",
    "code",
    "json",
    "reason",
    "wanted",
    "hit",
    "contrl",
    "actually",
    "formats",
    "readable",
    "way",
    "go",
    "settings",
    "look",
    "json",
    "enable",
    "json",
    "formatter",
    "automatically",
    "make",
    "format",
    "json",
    "lot",
    "readable",
    "reason",
    "like",
    "output",
    "abi",
    "important",
    "going",
    "use",
    "much",
    "like",
    "kind",
    "able",
    "see",
    "read",
    "really",
    "quickly",
    "rest",
    "lower",
    "level",
    "stuff",
    "like",
    "evm",
    "bite",
    "codes",
    "op",
    "codes",
    "really",
    "work",
    "much",
    "however",
    "learn",
    "solidity",
    "probably",
    "see",
    "op",
    "code",
    "really",
    "want",
    "learn",
    "lot",
    "really",
    "lowlevel",
    "stuffff",
    "look",
    "op",
    "codes",
    "purpose",
    "tutorial",
    "going",
    "going",
    "deep",
    "okay",
    "awesome",
    "compiled",
    "solidity",
    "even",
    "stored",
    "solidity",
    "code",
    "compiled",
    "code",
    "json",
    "file",
    "probably",
    "want",
    "deploy",
    "test",
    "actually",
    "well",
    "first",
    "actually",
    "get",
    "bite",
    "code",
    "need",
    "bite",
    "code",
    "file",
    "actually",
    "deploy",
    "going",
    "bite",
    "code",
    "equals",
    "compiled",
    "soul",
    "contracts",
    "simple",
    "storage",
    "soul",
    "simple",
    "storage",
    "evm",
    "white",
    "code",
    "object",
    "right",
    "great",
    "go",
    "bite",
    "code",
    "also",
    "need",
    "get",
    "abi",
    "need",
    "get",
    "api",
    "typing",
    "words",
    "like",
    "contract",
    "simple",
    "storage",
    "simple",
    "storage",
    "walking",
    "json",
    "say",
    "want",
    "get",
    "bite",
    "code",
    "compiled",
    "solidity",
    "json",
    "want",
    "go",
    "contracts",
    "simple",
    "storage",
    "simple",
    "storage",
    "evm",
    "bite",
    "code",
    "contracts",
    "inside",
    "contracts",
    "json",
    "got",
    "go",
    "simple",
    "storage",
    "inside",
    "simple",
    "storage",
    "soul",
    "another",
    "simple",
    "storage",
    "inside",
    "ai",
    "want",
    "want",
    "evm",
    "going",
    "scroll",
    "aha",
    "going",
    "get",
    "evm",
    "want",
    "want",
    "bite",
    "code",
    "great",
    "want",
    "object",
    "bite",
    "code",
    "contract",
    "really",
    "lowlevel",
    "stuff",
    "ethereum",
    "virtual",
    "machine",
    "evm",
    "going",
    "understand",
    "also",
    "need",
    "avi",
    "deploy",
    "chain",
    "going",
    "need",
    "going",
    "need",
    "bik",
    "code",
    "abi",
    "abi",
    "course",
    "get",
    "kind",
    "method",
    "get",
    "abi",
    "equals",
    "compiled",
    "soul",
    "thing",
    "contracts",
    "simple",
    "storage",
    "simple",
    "storage",
    "see",
    "right",
    "grab",
    "abi",
    "object",
    "ai",
    "even",
    "print",
    "abi",
    "python",
    "developed",
    "high",
    "indeed",
    "abi",
    "printed",
    "awesome",
    "two",
    "main",
    "pieces",
    "deploy",
    "deploy",
    "question",
    "becomes",
    "going",
    "deploy",
    "blockchain",
    "going",
    "deploy",
    "remix",
    "first",
    "playing",
    "around",
    "using",
    "javascript",
    "vm",
    "fake",
    "simulated",
    "environment",
    "absolutely",
    "could",
    "absolutely",
    "learn",
    "deploy",
    "test",
    "net",
    "going",
    "way",
    "going",
    "deploy",
    "main",
    "net",
    "learn",
    "deploy",
    "simulated",
    "environment",
    "something",
    "similar",
    "javascript",
    "vm",
    "much",
    "faster",
    "easier",
    "test",
    "things",
    "ganach",
    "going",
    "come",
    "rescue",
    "ganach",
    "simulated",
    "fake",
    "blockchain",
    "actually",
    "use",
    "deploy",
    "smart",
    "contracts",
    "interact",
    "like",
    "real",
    "blockchain",
    "gach",
    "going",
    "allow",
    "us",
    "spin",
    "local",
    "blockchain",
    "look",
    "something",
    "like",
    "user",
    "interface",
    "really",
    "nice",
    "allows",
    "us",
    "kind",
    "oneclick",
    "blockchain",
    "create",
    "local",
    "blockchain",
    "means",
    "blockchain",
    "connected",
    "blockchain",
    "act",
    "like",
    "blockchain",
    "lot",
    "faster",
    "us",
    "interact",
    "testnet",
    "control",
    "entire",
    "blockchain",
    "one",
    "node",
    "node",
    "ganache",
    "great",
    "way",
    "test",
    "things",
    "quickly",
    "working",
    "us",
    "also",
    "going",
    "show",
    "work",
    "ganach",
    "command",
    "line",
    "really",
    "use",
    "either",
    "one",
    "depending",
    "want",
    "lot",
    "tools",
    "actually",
    "buil",
    "ganach",
    "command",
    "line",
    "definitely",
    "really",
    "useful",
    "learn",
    "well",
    "ganach",
    "going",
    "simulated",
    "environment",
    "going",
    "get",
    "ganach",
    "go",
    "ahead",
    "hit",
    "quick",
    "start",
    "automatically",
    "upload",
    "get",
    "started",
    "local",
    "fake",
    "blockchain",
    "even",
    "see",
    "gives",
    "us",
    "accounts",
    "look",
    "pretty",
    "familiar",
    "look",
    "metam",
    "masky",
    "right",
    "address",
    "one",
    "addresses",
    "private",
    "key",
    "ganache",
    "go",
    "ahead",
    "click",
    "key",
    "hit",
    "show",
    "keys",
    "show",
    "account",
    "address",
    "private",
    "key",
    "course",
    "development",
    "purposes",
    "one",
    "accounts",
    "balance",
    "associated",
    "see",
    "pneumonic",
    "secret",
    "phrase",
    "see",
    "blocks",
    "transactions",
    "whole",
    "lot",
    "really",
    "useful",
    "features",
    "even",
    "tells",
    "us",
    "connect",
    "blockchain",
    "connecting",
    "features",
    "going",
    "want",
    "use",
    "let",
    "learn",
    "connect",
    "ganach",
    "blockchain",
    "user",
    "interface",
    "first",
    "learn",
    "command",
    "line",
    "version",
    "finally",
    "start",
    "working",
    "web",
    "3py",
    "pip",
    "install",
    "web",
    "3",
    "start",
    "working",
    "web",
    "3p",
    "right",
    "top",
    "little",
    "confusingly",
    "going",
    "import",
    "web",
    "3",
    "web",
    "3",
    "oops",
    "web",
    "3",
    "import",
    "web",
    "3",
    "sorry",
    "connect",
    "blockchain",
    "choose",
    "called",
    "http",
    "provider",
    "look",
    "ganach",
    "instance",
    "rpc",
    "server",
    "url",
    "http",
    "54",
    "url",
    "going",
    "use",
    "connect",
    "blockchain",
    "remix",
    "actually",
    "using",
    "metamasks",
    "directly",
    "connect",
    "blockchain",
    "however",
    "want",
    "connect",
    "directly",
    "simulated",
    "fake",
    "blockchain",
    "right",
    "going",
    "going",
    "w3",
    "connecting",
    "gach",
    "w3",
    "equals",
    "web",
    "3",
    "web",
    "http",
    "provider",
    "http",
    "port",
    "845",
    "port",
    "845",
    "everything",
    "show",
    "probably",
    "going",
    "want",
    "get",
    "really",
    "familiar",
    "documentation",
    "even",
    "pro",
    "going",
    "want",
    "use",
    "want",
    "learn",
    "providers",
    "go",
    "provids",
    "page",
    "documentation",
    "next",
    "thing",
    "always",
    "going",
    "need",
    "well",
    "going",
    "need",
    "chain",
    "id",
    "network",
    "id",
    "id",
    "blockchain",
    "ganach",
    "1337",
    "supposed",
    "funny",
    "elite",
    "reference",
    "chain",
    "id",
    "equals",
    "1337",
    "also",
    "going",
    "need",
    "address",
    "address",
    "deploy",
    "go",
    "ahead",
    "grab",
    "one",
    "fake",
    "addresses",
    "work",
    "similar",
    "remix",
    "working",
    "javascript",
    "bm",
    "given",
    "bunch",
    "fake",
    "addresses",
    "thing",
    "ganach",
    "also",
    "course",
    "going",
    "want",
    "private",
    "key",
    "need",
    "private",
    "key",
    "course",
    "sign",
    "transactions",
    "private",
    "key",
    "equals",
    "note",
    "whenever",
    "import",
    "private",
    "key",
    "python",
    "need",
    "add",
    "ox",
    "front",
    "python",
    "always",
    "going",
    "look",
    "hexadecimal",
    "version",
    "private",
    "key",
    "awesome",
    "parameters",
    "need",
    "interacting",
    "connecting",
    "ganache",
    "local",
    "chain",
    "time",
    "finally",
    "deploy",
    "simple",
    "storage",
    "soul",
    "contract",
    "let",
    "credit",
    "contract",
    "going",
    "deploy",
    "web",
    "going",
    "simple",
    "storage",
    "call",
    "variable",
    "w3f",
    "contract",
    "going",
    "give",
    "abi",
    "equals",
    "abi",
    "bite",
    "code",
    "equals",
    "bite",
    "code",
    "great",
    "mean",
    "deployed",
    "well",
    "means",
    "contract",
    "print",
    "simple",
    "storage",
    "see",
    "run",
    "python",
    "deploy",
    "see",
    "new",
    "type",
    "class",
    "web",
    "datat",
    "type",
    "contract",
    "another",
    "type",
    "want",
    "learn",
    "definitely",
    "check",
    "web",
    "documentation",
    "contract",
    "object",
    "awesome",
    "actually",
    "deploy",
    "well",
    "need",
    "actually",
    "build",
    "transaction",
    "whenever",
    "interact",
    "blockchain",
    "whenever",
    "make",
    "state",
    "change",
    "case",
    "deploying",
    "contract",
    "going",
    "make",
    "state",
    "change",
    "first",
    "need",
    "build",
    "transaction",
    "sign",
    "transaction",
    "send",
    "transaction",
    "need",
    "talk",
    "nuns",
    "thing",
    "remember",
    "way",
    "back",
    "blockchain",
    "demo",
    "used",
    "nuns",
    "solve",
    "answer",
    "really",
    "difficult",
    "mining",
    "problem",
    "well",
    "definition",
    "nuns",
    "word",
    "coined",
    "used",
    "one",
    "occasion",
    "cryptography",
    "arbitrary",
    "number",
    "used",
    "cryptographic",
    "communication",
    "nuns",
    "used",
    "find",
    "answer",
    "going",
    "different",
    "another",
    "nuns",
    "actually",
    "going",
    "need",
    "make",
    "transaction",
    "see",
    "look",
    "metamask",
    "look",
    "activity",
    "look",
    "one",
    "transactions",
    "made",
    "recently",
    "ether",
    "scan",
    "scroll",
    "see",
    "nuns",
    "well",
    "nuns",
    "number",
    "transactions",
    "account",
    "actually",
    "made",
    "every",
    "time",
    "make",
    "another",
    "transaction",
    "transaction",
    "hashed",
    "new",
    "nuts",
    "going",
    "behind",
    "scenes",
    "transaction",
    "need",
    "send",
    "transaction",
    "actually",
    "get",
    "nuns",
    "grabbing",
    "latest",
    "transaction",
    "count",
    "get",
    "latest",
    "transaction",
    "nuns",
    "equals",
    "w3",
    "transaction",
    "count",
    "put",
    "address",
    "give",
    "us",
    "number",
    "transactions",
    "effectively",
    "give",
    "us",
    "nuts",
    "even",
    "test",
    "print",
    "python",
    "ploy",
    "see",
    "see",
    "answer",
    "zero",
    "local",
    "blockchain",
    "address",
    "using",
    "used",
    "even",
    "go",
    "transactions",
    "tab",
    "see",
    "transactions",
    "ever",
    "occurred",
    "local",
    "blockchain",
    "deploy",
    "contract",
    "need",
    "make",
    "transaction",
    "remember",
    "everything",
    "every",
    "time",
    "change",
    "state",
    "blockchain",
    "going",
    "transaction",
    "let",
    "create",
    "transaction",
    "object",
    "transaction",
    "equals",
    "simple",
    "storage",
    "contract",
    "object",
    "dot",
    "constructor",
    "build",
    "transaction",
    "might",
    "pointed",
    "simple",
    "storage",
    "actually",
    "constructor",
    "every",
    "contract",
    "technically",
    "constructor",
    "one",
    "blank",
    "telling",
    "simple",
    "storage",
    "soul",
    "anything",
    "saw",
    "back",
    "fundme",
    "example",
    "fundme",
    "example",
    "constructor",
    "want",
    "put",
    "parameters",
    "transaction",
    "web",
    "always",
    "give",
    "least",
    "couple",
    "parameters",
    "always",
    "give",
    "chain",
    "id",
    "already",
    "got",
    "1337",
    "chain",
    "id",
    "need",
    "address",
    "case",
    "address",
    "need",
    "nuns",
    "case",
    "nuts",
    "great",
    "transaction",
    "object",
    "let",
    "even",
    "print",
    "see",
    "looks",
    "like",
    "whoa",
    "see",
    "even",
    "parameters",
    "made",
    "value",
    "ether",
    "ethereum",
    "going",
    "send",
    "gas",
    "gas",
    "price",
    "could",
    "arbitrarily",
    "set",
    "like",
    "chain",
    "id",
    "address",
    "nuns",
    "giant",
    "data",
    "object",
    "two",
    "empty",
    "sending",
    "blockchain",
    "giant",
    "data",
    "object",
    "encompassing",
    "everything",
    "happening",
    "simple",
    "storage",
    "soul",
    "transaction",
    "anybody",
    "could",
    "actually",
    "send",
    "transaction",
    "long",
    "signed",
    "transaction",
    "need",
    "sign",
    "somebody",
    "since",
    "sending",
    "address",
    "private",
    "key",
    "going",
    "key",
    "going",
    "work",
    "sign",
    "remember",
    "back",
    "talking",
    "public",
    "private",
    "keys",
    "right",
    "message",
    "defining",
    "deploy",
    "simple",
    "storage",
    "signed",
    "yet",
    "going",
    "need",
    "use",
    "private",
    "key",
    "sign",
    "create",
    "unique",
    "message",
    "signature",
    "ones",
    "create",
    "private",
    "key",
    "anybody",
    "else",
    "verify",
    "us",
    "signed",
    "signed",
    "transaction",
    "equals",
    "web",
    "account",
    "doign",
    "transaction",
    "parameters",
    "takes",
    "going",
    "transaction",
    "private",
    "key",
    "say",
    "private",
    "key",
    "equals",
    "private",
    "key",
    "actually",
    "gone",
    "ahead",
    "added",
    "private",
    "key",
    "guys",
    "really",
    "really",
    "important",
    "note",
    "putting",
    "private",
    "key",
    "code",
    "really",
    "bad",
    "practice",
    "push",
    "source",
    "push",
    "github",
    "somebody",
    "else",
    "see",
    "private",
    "key",
    "steal",
    "funds",
    "want",
    "hardcode",
    "private",
    "keys",
    "code",
    "like",
    "let",
    "take",
    "time",
    "talk",
    "environment",
    "variables",
    "set",
    "environment",
    "variables",
    "variables",
    "set",
    "set",
    "terminal",
    "command",
    "lines",
    "following",
    "way",
    "set",
    "environment",
    "variable",
    "mac",
    "os",
    "linux",
    "worry",
    "show",
    "way",
    "make",
    "environment",
    "variable",
    "windows",
    "well",
    "set",
    "environment",
    "variable",
    "running",
    "something",
    "like",
    "export",
    "private",
    "key",
    "equals",
    "adding",
    "whatever",
    "variable",
    "want",
    "type",
    "echo",
    "dollar",
    "sign",
    "private",
    "key",
    "variable",
    "actually",
    "shows",
    "set",
    "environment",
    "variables",
    "windows",
    "process",
    "going",
    "actually",
    "little",
    "bit",
    "different",
    "left",
    "link",
    "github",
    "actually",
    "set",
    "environment",
    "variables",
    "windows",
    "setting",
    "left",
    "couple",
    "really",
    "helpful",
    "links",
    "working",
    "environment",
    "variables",
    "definitely",
    "check",
    "important",
    "note",
    "export",
    "method",
    "creating",
    "environment",
    "variables",
    "works",
    "duration",
    "shell",
    "live",
    "close",
    "shell",
    "reopen",
    "environment",
    "variable",
    "set",
    "would",
    "gone",
    "rerun",
    "export",
    "command",
    "going",
    "show",
    "way",
    "set",
    "environment",
    "variables",
    "keep",
    "also",
    "great",
    "pl",
    "text",
    "computer",
    "however",
    "lot",
    "better",
    "hardcoding",
    "script",
    "remember",
    "using",
    "account",
    "real",
    "money",
    "highly",
    "recommend",
    "send",
    "environment",
    "variable",
    "private",
    "key",
    "code",
    "anywhere",
    "people",
    "steal",
    "funds",
    "move",
    "brownie",
    "show",
    "effective",
    "way",
    "private",
    "key",
    "management",
    "cautious",
    "followed",
    "set",
    "brand",
    "new",
    "account",
    "real",
    "money",
    "test",
    "money",
    "great",
    "cares",
    "cuz",
    "test",
    "fake",
    "money",
    "anyways",
    "think",
    "talked",
    "enough",
    "anyways",
    "let",
    "get",
    "back",
    "actually",
    "access",
    "environment",
    "variable",
    "python",
    "using",
    "os",
    "getet",
    "env",
    "need",
    "import",
    "os",
    "access",
    "private",
    "key",
    "script",
    "without",
    "actually",
    "hardcoding",
    "let",
    "see",
    "happens",
    "print",
    "private",
    "key",
    "python",
    "deploy",
    "pi",
    "see",
    "python",
    "script",
    "able",
    "pull",
    "private",
    "key",
    "environment",
    "variable",
    "thing",
    "create",
    "aemv",
    "file",
    "aemv",
    "file",
    "typically",
    "people",
    "store",
    "environment",
    "variables",
    "important",
    "push",
    "source",
    "going",
    "emv",
    "file",
    "python",
    "export",
    "private",
    "key",
    "add",
    "zerx",
    "start",
    "private",
    "key",
    "could",
    "put",
    "100",
    "environment",
    "variables",
    "export",
    "var",
    "equals",
    "7",
    "going",
    "way",
    "please",
    "please",
    "please",
    "always",
    "set",
    "dot",
    "get",
    "ignore",
    "make",
    "sure",
    "emv",
    "help",
    "make",
    "harder",
    "accidentally",
    "push",
    "env",
    "folder",
    "env",
    "file",
    "github",
    "python",
    "actually",
    "way",
    "loading",
    "directly",
    "env",
    "file",
    "without",
    "export",
    "environment",
    "variables",
    "run",
    "source",
    "env",
    "export",
    "really",
    "anything",
    "python",
    "package",
    "close",
    "shell",
    "reopen",
    "run",
    "echo",
    "var",
    "going",
    "get",
    "none",
    "fact",
    "run",
    "python",
    "develop",
    "piy",
    "print",
    "environment",
    "variable",
    "going",
    "get",
    "none",
    "however",
    "use",
    "env",
    "pull",
    "directly",
    "ourv",
    "pip",
    "install",
    "python",
    "env",
    "already",
    "downloaded",
    "says",
    "requirement",
    "already",
    "satisfied",
    "top",
    "env",
    "import",
    "load",
    "env",
    "run",
    "load",
    "env",
    "function",
    "right",
    "top",
    "load",
    "env",
    "looks",
    "env",
    "file",
    "automatically",
    "imports",
    "script",
    "run",
    "see",
    "environment",
    "variable",
    "successfully",
    "imported",
    "script",
    "use",
    "let",
    "let",
    "use",
    "example",
    "private",
    "key",
    "private",
    "key",
    "equals",
    "os",
    "gmv",
    "private",
    "key",
    "even",
    "print",
    "test",
    "run",
    "script",
    "awesome",
    "see",
    "private",
    "key",
    "successfully",
    "pulled",
    "hardcode",
    "application",
    "right",
    "let",
    "get",
    "back",
    "signed",
    "transaction",
    "let",
    "go",
    "ahead",
    "print",
    "take",
    "look",
    "looks",
    "like",
    "run",
    "script",
    "great",
    "see",
    "example",
    "signed",
    "transaction",
    "remember",
    "exactly",
    "happening",
    "looking",
    "back",
    "public",
    "private",
    "keys",
    "signing",
    "transaction",
    "actually",
    "deploying",
    "contract",
    "blockchain",
    "anybody",
    "easily",
    "verify",
    "right",
    "finally",
    "signed",
    "transaction",
    "want",
    "send",
    "blockchain",
    "actually",
    "deploy",
    "let",
    "send",
    "sign",
    "transaction",
    "transaction",
    "hash",
    "equals",
    "web",
    "eth",
    "little",
    "helpful",
    "tip",
    "see",
    "little",
    "box",
    "underneath",
    "suggestions",
    "show",
    "hit",
    "tab",
    "autocomplete",
    "rest",
    "text",
    "send",
    "raw",
    "transaction",
    "give",
    "sign",
    "transaction",
    "dot",
    "br",
    "transaction",
    "send",
    "transaction",
    "blockchain",
    "look",
    "ganach",
    "look",
    "transactions",
    "right",
    "empty",
    "let",
    "see",
    "happens",
    "run",
    "script",
    "okay",
    "print",
    "anything",
    "go",
    "ganache",
    "see",
    "transaction",
    "actually",
    "go",
    "address",
    "put",
    "created",
    "contract",
    "address",
    "much",
    "gas",
    "used",
    "much",
    "value",
    "sent",
    "even",
    "click",
    "see",
    "information",
    "advantage",
    "locally",
    "transaction",
    "automatically",
    "went",
    "sent",
    "first",
    "transaction",
    "local",
    "blockchain",
    "transaction",
    "deploying",
    "contract",
    "great",
    "work",
    "already",
    "see",
    "much",
    "faster",
    "working",
    "test",
    "net",
    "one",
    "thing",
    "really",
    "good",
    "practice",
    "whenever",
    "sending",
    "transaction",
    "wait",
    "block",
    "confirmations",
    "happen",
    "transaction",
    "receed",
    "equals",
    "web",
    "3",
    "ewe",
    "transaction",
    "receipt",
    "tx",
    "code",
    "stop",
    "wait",
    "transaction",
    "hash",
    "go",
    "awesome",
    "ran",
    "go",
    "transactions",
    "see",
    "two",
    "transactions",
    "code",
    "waited",
    "little",
    "bit",
    "longer",
    "one",
    "complete",
    "course",
    "deployed",
    "contract",
    "actually",
    "interact",
    "work",
    "contract",
    "let",
    "start",
    "working",
    "contracts",
    "working",
    "onchain",
    "whenever",
    "work",
    "contract",
    "always",
    "need",
    "two",
    "things",
    "need",
    "contract",
    "address",
    "contract",
    "ai",
    "often",
    "times",
    "looking",
    "specific",
    "abi",
    "type",
    "contract",
    "usually",
    "google",
    "need",
    "make",
    "new",
    "contract",
    "object",
    "work",
    "contracts",
    "let",
    "go",
    "ahead",
    "create",
    "simple",
    "storage",
    "contract",
    "actually",
    "interact",
    "simple",
    "storage",
    "equals",
    "w3",
    "contract",
    "need",
    "address",
    "get",
    "ganach",
    "might",
    "little",
    "bit",
    "hard",
    "always",
    "checking",
    "blockchain",
    "transaction",
    "actually",
    "also",
    "transaction",
    "receipt",
    "address",
    "equals",
    "transaction",
    "receipt",
    "contract",
    "address",
    "since",
    "compiled",
    "also",
    "abi",
    "already",
    "abi",
    "equals",
    "abi",
    "sometimes",
    "see",
    "people",
    "file",
    "called",
    "abis",
    "dopy",
    "abis",
    "json",
    "something",
    "like",
    "load",
    "abis",
    "directly",
    "great",
    "address",
    "abi",
    "start",
    "interacting",
    "contract",
    "exactly",
    "remix",
    "let",
    "print",
    "statement",
    "get",
    "initial",
    "value",
    "returned",
    "retrieve",
    "function",
    "remember",
    "initialized",
    "zero",
    "print",
    "simple",
    "storage",
    "functions",
    "retrieve",
    "let",
    "see",
    "happens",
    "huh",
    "get",
    "function",
    "retrieve",
    "bound",
    "parentheses",
    "going",
    "making",
    "transactions",
    "blockchain",
    "actually",
    "two",
    "different",
    "ways",
    "interact",
    "interact",
    "call",
    "interact",
    "transact",
    "use",
    "call",
    "simulate",
    "making",
    "call",
    "getting",
    "return",
    "value",
    "calls",
    "make",
    "state",
    "change",
    "blockchain",
    "similar",
    "remix",
    "would",
    "call",
    "blue",
    "buttons",
    "nothing",
    "blockchain",
    "would",
    "actually",
    "change",
    "actually",
    "also",
    "call",
    "orange",
    "buttons",
    "non",
    "view",
    "functions",
    "actually",
    "make",
    "state",
    "change",
    "remix",
    "defaults",
    "blue",
    "buttons",
    "calls",
    "orange",
    "buttons",
    "trans",
    "python",
    "actually",
    "pick",
    "one",
    "want",
    "transact",
    "transact",
    "call",
    "actually",
    "make",
    "state",
    "change",
    "actually",
    "build",
    "transaction",
    "send",
    "transaction",
    "always",
    "call",
    "function",
    "matter",
    "function",
    "keep",
    "mind",
    "wo",
    "make",
    "state",
    "change",
    "also",
    "always",
    "transact",
    "function",
    "even",
    "view",
    "attempt",
    "make",
    "state",
    "change",
    "something",
    "like",
    "retrieve",
    "even",
    "transact",
    "wo",
    "make",
    "state",
    "change",
    "something",
    "like",
    "retrieve",
    "actually",
    "want",
    "make",
    "state",
    "change",
    "ed",
    "call",
    "function",
    "dot",
    "call",
    "try",
    "run",
    "see",
    "get",
    "zero",
    "actually",
    "calling",
    "transaction",
    "awesome",
    "initial",
    "value",
    "retrieve",
    "function",
    "let",
    "keep",
    "going",
    "let",
    "try",
    "update",
    "favorite",
    "number",
    "using",
    "store",
    "function",
    "keep",
    "keep",
    "mind",
    "initial",
    "value",
    "favorite",
    "number",
    "know",
    "store",
    "function",
    "orange",
    "actually",
    "make",
    "transaction",
    "wanted",
    "even",
    "use",
    "call",
    "simple",
    "storage",
    "functions",
    "store",
    "put",
    "15",
    "call",
    "let",
    "see",
    "happens",
    "send",
    "see",
    "returned",
    "blank",
    "store",
    "function",
    "return",
    "type",
    "give",
    "returns",
    "went",
    "256",
    "say",
    "return",
    "favorite",
    "number",
    "go",
    "back",
    "run",
    "see",
    "get",
    "15",
    "back",
    "go",
    "ganach",
    "see",
    "keep",
    "making",
    "whole",
    "bunch",
    "different",
    "contracts",
    "none",
    "contract",
    "interaction",
    "call",
    "function",
    "simulate",
    "working",
    "call",
    "retrieve",
    "right",
    "afterwards",
    "see",
    "still",
    "zero",
    "calling",
    "simulation",
    "let",
    "delete",
    "let",
    "actually",
    "build",
    "new",
    "transaction",
    "actually",
    "store",
    "value",
    "contract",
    "since",
    "want",
    "make",
    "transaction",
    "got",
    "go",
    "process",
    "deployed",
    "contract",
    "let",
    "first",
    "create",
    "transaction",
    "call",
    "store",
    "transaction",
    "equals",
    "simple",
    "storage",
    "functions",
    "store",
    "give",
    "number",
    "case",
    "15",
    "dot",
    "build",
    "transaction",
    "put",
    "pieces",
    "going",
    "chain",
    "id",
    "chain",
    "id",
    "going",
    "need",
    "front",
    "address",
    "nuns",
    "going",
    "nuns",
    "plus",
    "one",
    "going",
    "need",
    "nuns",
    "plus",
    "one",
    "actually",
    "use",
    "nuns",
    "already",
    "create",
    "initial",
    "transaction",
    "remember",
    "nuns",
    "used",
    "transaction",
    "transaction",
    "going",
    "different",
    "nuns",
    "nuns",
    "use",
    "deploy",
    "contract",
    "transaction",
    "let",
    "go",
    "ahead",
    "sign",
    "signed",
    "store",
    "tx",
    "web",
    "count",
    "sign",
    "transaction",
    "store",
    "transaction",
    "private",
    "key",
    "equals",
    "private",
    "key",
    "go",
    "ahead",
    "save",
    "course",
    "need",
    "send",
    "transaction",
    "hash",
    "equals",
    "w3e",
    "send",
    "raw",
    "transaction",
    "signed",
    "store",
    "transaction",
    "raw",
    "transaction",
    "let",
    "grab",
    "transaction",
    "receipt",
    "transaction",
    "receipt",
    "equals",
    "w3e",
    "wait",
    "transaction",
    "receipt",
    "actually",
    "let",
    "call",
    "send",
    "store",
    "tx",
    "wait",
    "receipt",
    "send",
    "store",
    "tx",
    "awesome",
    "looks",
    "like",
    "following",
    "steps",
    "created",
    "transaction",
    "signed",
    "transaction",
    "send",
    "transaction",
    "create",
    "transaction",
    "signed",
    "transaction",
    "sent",
    "transaction",
    "waited",
    "transaction",
    "finish",
    "let",
    "run",
    "right",
    "great",
    "still",
    "print",
    "function",
    "printing",
    "current",
    "value",
    "retrieve",
    "let",
    "go",
    "ganach",
    "see",
    "anything",
    "different",
    "instead",
    "contract",
    "creations",
    "contract",
    "call",
    "see",
    "transaction",
    "data",
    "sent",
    "different",
    "amount",
    "gas",
    "gas",
    "prices",
    "however",
    "ever",
    "actually",
    "updated",
    "sent",
    "transaction",
    "blockchain",
    "call",
    "retrieve",
    "function",
    "print",
    "newly",
    "updated",
    "value",
    "case",
    "15",
    "let",
    "go",
    "ahead",
    "run",
    "python",
    "deployed",
    "see",
    "started",
    "zero",
    "turned",
    "15",
    "awesome",
    "made",
    "first",
    "state",
    "change",
    "contract",
    "deployed",
    "local",
    "blockchain",
    "great",
    "work",
    "sometimes",
    "nice",
    "put",
    "lines",
    "tell",
    "going",
    "make",
    "little",
    "bit",
    "clear",
    "put",
    "something",
    "like",
    "deploying",
    "contract",
    "dot",
    "dot",
    "dot",
    "right",
    "deploy",
    "contract",
    "two",
    "deployed",
    "right",
    "update",
    "contract",
    "print",
    "something",
    "like",
    "updating",
    "contract",
    "right",
    "done",
    "maybe",
    "something",
    "like",
    "updated",
    "run",
    "see",
    "goes",
    "along",
    "get",
    "things",
    "printed",
    "saying",
    "deploying",
    "contract",
    "contract",
    "deployed",
    "updating",
    "contract",
    "updated",
    "make",
    "moments",
    "waiting",
    "contracts",
    "actually",
    "finish",
    "lot",
    "easier",
    "fantastic",
    "ganache",
    "user",
    "interface",
    "really",
    "nice",
    "see",
    "lot",
    "things",
    "going",
    "however",
    "little",
    "tricky",
    "lot",
    "programmatic",
    "stuff",
    "often",
    "times",
    "engineer",
    "use",
    "called",
    "command",
    "line",
    "interface",
    "ganache",
    "instead",
    "ui",
    "going",
    "go",
    "ahead",
    "close",
    "going",
    "use",
    "ganache",
    "cli",
    "instead",
    "user",
    "interface",
    "saw",
    "brown",
    "going",
    "use",
    "back",
    "end",
    "move",
    "brownie",
    "let",
    "learn",
    "actually",
    "order",
    "use",
    "ganach",
    "cli",
    "command",
    "line",
    "interface",
    "first",
    "thing",
    "need",
    "download",
    "yes",
    "know",
    "python",
    "video",
    "however",
    "need",
    "install",
    "nodejs",
    "work",
    "ganach",
    "cli",
    "come",
    "download",
    "page",
    "choose",
    "operating",
    "system",
    "download",
    "accordingly",
    "link",
    "video",
    "showing",
    "github",
    "know",
    "done",
    "right",
    "run",
    "node",
    "version",
    "command",
    "line",
    "get",
    "version",
    "might",
    "12",
    "might",
    "14",
    "might",
    "something",
    "else",
    "depending",
    "version",
    "downloaded",
    "next",
    "actually",
    "going",
    "install",
    "yarn",
    "yarn",
    "package",
    "manager",
    "similar",
    "pip",
    "allow",
    "us",
    "actually",
    "download",
    "pieces",
    "packages",
    "like",
    "ganach",
    "cli",
    "package",
    "repository",
    "install",
    "mpm",
    "install",
    "global",
    "yarn",
    "know",
    "done",
    "right",
    "run",
    "yarn",
    "version",
    "command",
    "line",
    "get",
    "version",
    "outputed",
    "want",
    "install",
    "actual",
    "ganach",
    "cli",
    "going",
    "installing",
    "yarn",
    "install",
    "going",
    "yarn",
    "global",
    "add",
    "ganach",
    "cli",
    "install",
    "ganach",
    "cli",
    "global",
    "command",
    "terminal",
    "test",
    "see",
    "done",
    "right",
    "run",
    "ganos",
    "c",
    "version",
    "perfect",
    "ganach",
    "cli",
    "let",
    "spin",
    "ganach",
    "chain",
    "cli",
    "ganach",
    "ui",
    "open",
    "right",
    "please",
    "close",
    "otherwise",
    "conflict",
    "run",
    "local",
    "blockchain",
    "command",
    "line",
    "need",
    "need",
    "run",
    "gach",
    "cli",
    "node",
    "start",
    "running",
    "directly",
    "terminal",
    "scroll",
    "see",
    "lot",
    "familiar",
    "pieces",
    "see",
    "available",
    "accounts",
    "like",
    "ui",
    "different",
    "addresses",
    "see",
    "whole",
    "bunch",
    "different",
    "private",
    "keys",
    "ganache",
    "spins",
    "bunch",
    "random",
    "addresses",
    "random",
    "private",
    "keys",
    "wanted",
    "always",
    "spin",
    "exact",
    "private",
    "keys",
    "update",
    "private",
    "key",
    "every",
    "time",
    "ganach",
    "cli",
    "das",
    "dash",
    "deterministic",
    "way",
    "always",
    "get",
    "exact",
    "private",
    "keys",
    "exact",
    "addresses",
    "check",
    "documentation",
    "see",
    "bunch",
    "flags",
    "use",
    "run",
    "see",
    "listening",
    "also",
    "known",
    "loop",
    "back",
    "address",
    "local",
    "host",
    "work",
    "ganach",
    "command",
    "line",
    "need",
    "update",
    "private",
    "keys",
    "addresses",
    "let",
    "also",
    "update",
    "http",
    "provider",
    "since",
    "going",
    "looking",
    "loop",
    "back",
    "address",
    "address",
    "scroll",
    "top",
    "address",
    "place",
    "private",
    "key",
    "going",
    "copy",
    "put",
    "emv",
    "file",
    "already",
    "ox",
    "top",
    "great",
    "let",
    "open",
    "new",
    "terminal",
    "open",
    "new",
    "terminal",
    "hitting",
    "plus",
    "button",
    "flip",
    "back",
    "forth",
    "hitting",
    "drop",
    "flipping",
    "back",
    "ganache",
    "terminal",
    "let",
    "go",
    "ahead",
    "run",
    "python",
    "deploy",
    "see",
    "exact",
    "output",
    "got",
    "working",
    "ui",
    "flip",
    "command",
    "line",
    "see",
    "made",
    "whole",
    "bunch",
    "different",
    "calls",
    "blockchain",
    "one",
    "calls",
    "specific",
    "json",
    "rpc",
    "call",
    "blockchain",
    "making",
    "interact",
    "see",
    "information",
    "transactions",
    "sent",
    "one",
    "creates",
    "simple",
    "storage",
    "contract",
    "one",
    "updates",
    "simple",
    "storage",
    "contract",
    "great",
    "know",
    "work",
    "ganach",
    "cli",
    "ganache",
    "ui",
    "fantastic",
    "actually",
    "deploy",
    "test",
    "net",
    "real",
    "network",
    "working",
    "remix",
    "switch",
    "injected",
    "web",
    "3",
    "used",
    "metamask",
    "blockchain",
    "connection",
    "well",
    "script",
    "metamask",
    "natively",
    "script",
    "need",
    "way",
    "connect",
    "blockchain",
    "see",
    "connecting",
    "local",
    "blockchain",
    "use",
    "rpc",
    "url",
    "connects",
    "local",
    "blockchain",
    "connect",
    "test",
    "net",
    "main",
    "net",
    "actually",
    "exact",
    "thing",
    "swap",
    "url",
    "connects",
    "us",
    "main",
    "net",
    "test",
    "net",
    "also",
    "run",
    "blockchain",
    "node",
    "similar",
    "running",
    "local",
    "blockchain",
    "node",
    "run",
    "know",
    "actually",
    "connects",
    "real",
    "blockchain",
    "however",
    "always",
    "practical",
    "really",
    "easy",
    "sometimes",
    "want",
    "use",
    "external",
    "thirdparty",
    "client",
    "actually",
    "run",
    "blockchain",
    "us",
    "let",
    "learn",
    "little",
    "infura",
    "inf",
    "application",
    "give",
    "blockchain",
    "url",
    "connect",
    "run",
    "whatever",
    "want",
    "run",
    "get",
    "started",
    "free",
    "let",
    "go",
    "ahead",
    "register",
    "check",
    "email",
    "confirm",
    "email",
    "address",
    "awesome",
    "inside",
    "infura",
    "couple",
    "services",
    "also",
    "check",
    "like",
    "alchemy",
    "another",
    "fantastic",
    "blockchain",
    "service",
    "platform",
    "fura",
    "premium",
    "service",
    "starts",
    "free",
    "make",
    "many",
    "api",
    "calls",
    "many",
    "calls",
    "url",
    "start",
    "charging",
    "create",
    "project",
    "free",
    "let",
    "go",
    "ahead",
    "hit",
    "ethereum",
    "tab",
    "hit",
    "create",
    "project",
    "call",
    "free",
    "code",
    "camp",
    "brownie",
    "hit",
    "create",
    "whole",
    "bunch",
    "project",
    "keys",
    "project",
    "secrets",
    "also",
    "endpoint",
    "section",
    "well",
    "going",
    "deploying",
    "different",
    "networks",
    "see",
    "ethereum",
    "mainnet",
    "connection",
    "well",
    "robson",
    "coen",
    "rink",
    "b",
    "goril",
    "test",
    "nets",
    "also",
    "polygon",
    "well",
    "since",
    "want",
    "test",
    "deploy",
    "rink",
    "chain",
    "go",
    "ahead",
    "move",
    "rink",
    "copy",
    "url",
    "back",
    "application",
    "swap",
    "new",
    "url",
    "also",
    "change",
    "chain",
    "id",
    "address",
    "private",
    "key",
    "ever",
    "confused",
    "chain",
    "id",
    "chain",
    "working",
    "always",
    "check",
    "chain",
    "id",
    "network",
    "usually",
    "ask",
    "somebody",
    "let",
    "look",
    "rink",
    "see",
    "chain",
    "id",
    "four",
    "grab",
    "four",
    "place",
    "script",
    "address",
    "private",
    "key",
    "gave",
    "address",
    "private",
    "key",
    "gave",
    "going",
    "test",
    "net",
    "ring",
    "need",
    "go",
    "metamask",
    "grab",
    "address",
    "place",
    "address",
    "count",
    "details",
    "export",
    "private",
    "key",
    "type",
    "password",
    "grab",
    "private",
    "key",
    "go",
    "emv",
    "file",
    "leave",
    "zx",
    "replace",
    "rest",
    "private",
    "key",
    "since",
    "private",
    "key",
    "stored",
    "environment",
    "variable",
    "need",
    "run",
    "source",
    "env",
    "private",
    "key",
    "updated",
    "reason",
    "using",
    "since",
    "making",
    "transactions",
    "test",
    "net",
    "need",
    "test",
    "net",
    "e",
    "right",
    "everything",
    "updated",
    "deploying",
    "rinke",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "going",
    "lot",
    "slower",
    "actually",
    "wait",
    "contracts",
    "get",
    "mined",
    "everything",
    "happen",
    "test",
    "net",
    "deploying",
    "test",
    "net",
    "result",
    "nearly",
    "exact",
    "experience",
    "get",
    "deploying",
    "actual",
    "main",
    "net",
    "take",
    "lot",
    "longer",
    "see",
    "got",
    "ex",
    "exact",
    "responses",
    "take",
    "address",
    "go",
    "rink",
    "ether",
    "scan",
    "verify",
    "happened",
    "see",
    "38",
    "seconds",
    "ago",
    "made",
    "transaction",
    "23",
    "seconds",
    "ago",
    "made",
    "transaction",
    "look",
    "different",
    "details",
    "transaction",
    "made",
    "python",
    "script",
    "see",
    "even",
    "tells",
    "us",
    "created",
    "smart",
    "contract",
    "made",
    "call",
    "called",
    "store",
    "function",
    "contract",
    "learned",
    "lot",
    "far",
    "fantastic",
    "perfect",
    "time",
    "take",
    "break",
    "take",
    "quick",
    "breather",
    "reflect",
    "back",
    "learned",
    "learned",
    "lot",
    "python",
    "deploying",
    "local",
    "blockchain",
    "deploying",
    "test",
    "net",
    "deploying",
    "main",
    "net",
    "working",
    "private",
    "keys",
    "creating",
    "transactions",
    "signing",
    "transactions",
    "sending",
    "transactions",
    "see",
    "going",
    "lot",
    "actually",
    "managing",
    "contracts",
    "work",
    "write",
    "compile",
    "code",
    "ear",
    "storage",
    "code",
    "going",
    "take",
    "lot",
    "work",
    "wanted",
    "interact",
    "one",
    "contracts",
    "deployed",
    "past",
    "well",
    "keep",
    "track",
    "addresses",
    "manually",
    "update",
    "address",
    "features",
    "address",
    "maybe",
    "want",
    "deploy",
    "new",
    "contract",
    "every",
    "single",
    "time",
    "maybe",
    "wanted",
    "work",
    "contract",
    "already",
    "deployed",
    "want",
    "work",
    "whole",
    "bunch",
    "different",
    "chains",
    "want",
    "work",
    "rink",
    "b",
    "main",
    "net",
    "local",
    "network",
    "seems",
    "lot",
    "manage",
    "still",
    "even",
    "talked",
    "writing",
    "tests",
    "brownie",
    "going",
    "come",
    "play",
    "brownie",
    "currently",
    "popular",
    "smart",
    "contract",
    "development",
    "platform",
    "built",
    "based",
    "python",
    "used",
    "defi",
    "giants",
    "like",
    "finance",
    "curve",
    "batter",
    "billions",
    "dollars",
    "currently",
    "locked",
    "value",
    "reason",
    "learned",
    "little",
    "bit",
    "web",
    "3p",
    "first",
    "brownie",
    "heavily",
    "relies",
    "web",
    "pi",
    "let",
    "brownie",
    "see",
    "much",
    "easier",
    "actually",
    "interact",
    "shell",
    "let",
    "go",
    "back",
    "one",
    "directory",
    "let",
    "make",
    "new",
    "one",
    "call",
    "brownie",
    "simple",
    "storage",
    "another",
    "really",
    "cool",
    "trick",
    "vss",
    "code",
    "instead",
    "us",
    "go",
    "file",
    "open",
    "folder",
    "explorer",
    "type",
    "code",
    "type",
    "directory",
    "want",
    "work",
    "case",
    "directory",
    "type",
    "code",
    "dot",
    "get",
    "new",
    "vs",
    "code",
    "popup",
    "inside",
    "brownie",
    "simple",
    "storage",
    "folder",
    "let",
    "get",
    "learning",
    "brownie",
    "going",
    "spend",
    "majority",
    "time",
    "move",
    "forward",
    "brownie",
    "incredibly",
    "powerful",
    "makes",
    "lives",
    "fantastically",
    "easier",
    "get",
    "ready",
    "learn",
    "one",
    "powerful",
    "tools",
    "smart",
    "contract",
    "developing",
    "ecosystem",
    "let",
    "go",
    "ahead",
    "open",
    "terminal",
    "let",
    "get",
    "started",
    "installing",
    "brownie",
    "recommended",
    "install",
    "brownie",
    "via",
    "pipex",
    "pipex",
    "installs",
    "brownie",
    "virtual",
    "environment",
    "makes",
    "available",
    "directly",
    "command",
    "line",
    "installed",
    "never",
    "activate",
    "virtual",
    "environment",
    "prior",
    "using",
    "brownie",
    "really",
    "good",
    "install",
    "pipex",
    "go",
    "ahead",
    "run",
    "python",
    "dm",
    "pip",
    "install",
    "user",
    "pipex",
    "run",
    "run",
    "python",
    "p",
    "pipex",
    "insure",
    "path",
    "want",
    "close",
    "terminal",
    "hitting",
    "little",
    "trash",
    "reopen",
    "need",
    "run",
    "pipex",
    "install",
    "f",
    "brownie",
    "already",
    "got",
    "installed",
    "see",
    "one",
    "time",
    "going",
    "close",
    "reopen",
    "terminal",
    "tell",
    "brownie",
    "installed",
    "correctly",
    "run",
    "brownie",
    "das",
    "das",
    "version",
    "get",
    "output",
    "looks",
    "something",
    "like",
    "run",
    "straight",
    "brownie",
    "output",
    "bunch",
    "commands",
    "run",
    "let",
    "create",
    "first",
    "brownie",
    "project",
    "going",
    "using",
    "exact",
    "simple",
    "storage",
    "code",
    "went",
    "except",
    "going",
    "use",
    "brownie",
    "going",
    "make",
    "lives",
    "lot",
    "easier",
    "working",
    "simple",
    "storage",
    "create",
    "sample",
    "folder",
    "everything",
    "need",
    "brownie",
    "run",
    "brownie",
    "get",
    "new",
    "brownie",
    "project",
    "initialized",
    "directory",
    "currently",
    "type",
    "ls",
    "able",
    "see",
    "folders",
    "created",
    "see",
    "side",
    "panel",
    "vs",
    "code",
    "let",
    "talk",
    "really",
    "quickly",
    "folders",
    "going",
    "build",
    "folder",
    "tracks",
    "lot",
    "really",
    "important",
    "information",
    "going",
    "track",
    "interfaces",
    "working",
    "deploying",
    "going",
    "keep",
    "track",
    "deployments",
    "across",
    "different",
    "chains",
    "longer",
    "manage",
    "going",
    "store",
    "compiled",
    "code",
    "remember",
    "simple",
    "storage",
    "code",
    "actually",
    "saved",
    "everything",
    "compil",
    "code",
    "json",
    "well",
    "brownie",
    "actually",
    "going",
    "us",
    "contracts",
    "directory",
    "always",
    "reference",
    "later",
    "contracts",
    "directory",
    "outside",
    "build",
    "folder",
    "going",
    "put",
    "contracts",
    "brownie",
    "knows",
    "look",
    "inside",
    "folder",
    "looking",
    "new",
    "contracts",
    "compile",
    "deploy",
    "anything",
    "else",
    "interfaces",
    "save",
    "store",
    "different",
    "interfaces",
    "remember",
    "working",
    "chain",
    "link",
    "working",
    "interfaces",
    "makes",
    "really",
    "easy",
    "interact",
    "blockchain",
    "application",
    "reports",
    "save",
    "type",
    "report",
    "run",
    "scripts",
    "automate",
    "tasks",
    "like",
    "deploying",
    "calling",
    "different",
    "functions",
    "really",
    "anything",
    "want",
    "test",
    "folder",
    "incredibly",
    "powerful",
    "going",
    "using",
    "lot",
    "also",
    "git",
    "attributes",
    "g",
    "ignore",
    "helpful",
    "working",
    "version",
    "control",
    "like",
    "git",
    "let",
    "go",
    "ahead",
    "start",
    "working",
    "brownie",
    "really",
    "understand",
    "going",
    "let",
    "go",
    "ahead",
    "add",
    "simple",
    "storage",
    "contracts",
    "contracts",
    "folder",
    "going",
    "make",
    "new",
    "file",
    "call",
    "simple",
    "storage",
    "soulle",
    "going",
    "copy",
    "paste",
    "code",
    "simple",
    "storage",
    "using",
    "whole",
    "time",
    "let",
    "go",
    "ahead",
    "head",
    "save",
    "command",
    "okay",
    "great",
    "contract",
    "already",
    "start",
    "working",
    "brownie",
    "even",
    "compile",
    "code",
    "without",
    "even",
    "write",
    "work",
    "compiler",
    "need",
    "run",
    "brownie",
    "compile",
    "brownie",
    "automatically",
    "read",
    "version",
    "solidity",
    "store",
    "compile",
    "information",
    "build",
    "folder",
    "go",
    "contracts",
    "see",
    "simple",
    "storage",
    "json",
    "lot",
    "familiar",
    "pieces",
    "example",
    "see",
    "abi",
    "op",
    "code",
    "section",
    "lowlevel",
    "language",
    "see",
    "pc",
    "map",
    "see",
    "lot",
    "useful",
    "information",
    "great",
    "obviously",
    "deployments",
    "interfaces",
    "still",
    "empty",
    "great",
    "already",
    "compiled",
    "smart",
    "contract",
    "actually",
    "deploy",
    "blockchain",
    "write",
    "script",
    "allow",
    "us",
    "whatever",
    "want",
    "going",
    "create",
    "new",
    "file",
    "going",
    "call",
    "similar",
    "last",
    "time",
    "deploy",
    "dopy",
    "going",
    "define",
    "working",
    "deploying",
    "code",
    "brownie",
    "run",
    "scripts",
    "running",
    "brownie",
    "run",
    "fact",
    "want",
    "take",
    "quick",
    "minute",
    "familiarize",
    "different",
    "commands",
    "brownie",
    "run",
    "brownie",
    "see",
    "lot",
    "different",
    "things",
    "brownie",
    "init",
    "create",
    "new",
    "brownie",
    "project",
    "brownie",
    "bake",
    "allows",
    "us",
    "pull",
    "brownie",
    "mix",
    "talk",
    "later",
    "compile",
    "go",
    "console",
    "test",
    "run",
    "lot",
    "wonderful",
    "things",
    "brownie",
    "run",
    "run",
    "script",
    "us",
    "define",
    "want",
    "run",
    "deploy",
    "add",
    "def",
    "main",
    "def",
    "python",
    "way",
    "define",
    "function",
    "going",
    "call",
    "function",
    "main",
    "let",
    "say",
    "print",
    "hello",
    "run",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "see",
    "automatically",
    "launching",
    "thing",
    "brownie",
    "defaults",
    "always",
    "working",
    "local",
    "ganach",
    "cli",
    "blockchain",
    "running",
    "exact",
    "command",
    "ran",
    "earlier",
    "bunch",
    "different",
    "flags",
    "like",
    "counts",
    "10",
    "certain",
    "hard",
    "fork",
    "certain",
    "gas",
    "limit",
    "etc",
    "beginning",
    "scripts",
    "give",
    "brownie",
    "network",
    "use",
    "spin",
    "local",
    "ganache",
    "end",
    "script",
    "tear",
    "back",
    "typically",
    "like",
    "actually",
    "put",
    "logic",
    "deployment",
    "function",
    "def",
    "deploy",
    "simple",
    "storage",
    "pass",
    "main",
    "function",
    "call",
    "deploy",
    "symbol",
    "storage",
    "order",
    "deploy",
    "contract",
    "let",
    "look",
    "back",
    "web",
    "3",
    "pi",
    "version",
    "deploying",
    "see",
    "first",
    "compiled",
    "great",
    "brownie",
    "automatically",
    "dumped",
    "file",
    "great",
    "brownie",
    "automatically",
    "got",
    "bite",
    "code",
    "abi",
    "great",
    "brownie",
    "automatically",
    "added",
    "local",
    "blockchain",
    "use",
    "great",
    "brownie",
    "automatically",
    "spins",
    "local",
    "ginach",
    "learn",
    "test",
    "little",
    "bit",
    "aha",
    "need",
    "address",
    "though",
    "private",
    "key",
    "actually",
    "get",
    "private",
    "key",
    "get",
    "account",
    "brownie",
    "brownie",
    "accounts",
    "package",
    "actually",
    "natively",
    "understands",
    "work",
    "accounts",
    "import",
    "script",
    "brownie",
    "import",
    "accounts",
    "accounts",
    "keyword",
    "add",
    "account",
    "number",
    "different",
    "ways",
    "going",
    "work",
    "local",
    "chain",
    "see",
    "ganach",
    "cli",
    "spin",
    "10",
    "fake",
    "accounts",
    "us",
    "brownie",
    "automatically",
    "knows",
    "work",
    "account",
    "could",
    "something",
    "like",
    "account",
    "equals",
    "account",
    "zero",
    "something",
    "like",
    "print",
    "account",
    "going",
    "take",
    "account",
    "spun",
    "zero",
    "withth",
    "index",
    "accounts",
    "object",
    "array",
    "run",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "going",
    "spin",
    "us",
    "address",
    "private",
    "key",
    "work",
    "without",
    "define",
    "private",
    "key",
    "anything",
    "us",
    "fantastic",
    "course",
    "still",
    "want",
    "know",
    "add",
    "private",
    "keys",
    "work",
    "test",
    "net",
    "great",
    "works",
    "working",
    "development",
    "network",
    "working",
    "brownie",
    "automatic",
    "ganach",
    "cli",
    "want",
    "work",
    "test",
    "net",
    "though",
    "something",
    "else",
    "another",
    "way",
    "add",
    "accounts",
    "brownie",
    "use",
    "command",
    "line",
    "actually",
    "add",
    "natively",
    "brownie",
    "brownie",
    "accounts",
    "new",
    "give",
    "name",
    "free",
    "code",
    "camp",
    "account",
    "account",
    "prompt",
    "us",
    "say",
    "enter",
    "private",
    "key",
    "wish",
    "add",
    "let",
    "go",
    "ahead",
    "grab",
    "private",
    "key",
    "metamask",
    "count",
    "details",
    "export",
    "private",
    "key",
    "put",
    "password",
    "grab",
    "private",
    "key",
    "add",
    "ox",
    "paste",
    "brownie",
    "actually",
    "password",
    "encrypt",
    "private",
    "key",
    "way",
    "give",
    "password",
    "new",
    "account",
    "natively",
    "integrated",
    "brownie",
    "see",
    "brownie",
    "accounts",
    "list",
    "see",
    "free",
    "code",
    "camp",
    "account",
    "address",
    "also",
    "testing",
    "account",
    "made",
    "little",
    "bit",
    "earlier",
    "get",
    "rid",
    "running",
    "brownie",
    "accounts",
    "delete",
    "testing",
    "helpful",
    "terminal",
    "tip",
    "time",
    "hit",
    "keyboard",
    "actually",
    "toggle",
    "history",
    "commands",
    "written",
    "hit",
    "actually",
    "bring",
    "recently",
    "run",
    "command",
    "allow",
    "run",
    "run",
    "previous",
    "commands",
    "little",
    "bit",
    "faster",
    "run",
    "browning",
    "accounts",
    "list",
    "see",
    "free",
    "code",
    "camp",
    "want",
    "work",
    "free",
    "code",
    "camp",
    "account",
    "added",
    "brownie",
    "via",
    "command",
    "line",
    "get",
    "account",
    "equals",
    "accounts",
    "load",
    "free",
    "code",
    "camp",
    "account",
    "print",
    "account",
    "let",
    "run",
    "script",
    "time",
    "run",
    "script",
    "going",
    "ask",
    "us",
    "password",
    "need",
    "enter",
    "password",
    "decrypt",
    "account",
    "right",
    "password",
    "encrypted",
    "going",
    "type",
    "password",
    "going",
    "go",
    "ahead",
    "execute",
    "unlocked",
    "private",
    "key",
    "see",
    "address",
    "printed",
    "right",
    "copy",
    "address",
    "go",
    "back",
    "see",
    "correct",
    "going",
    "talk",
    "safety",
    "want",
    "safely",
    "secure",
    "keys",
    "one",
    "safer",
    "ways",
    "going",
    "stored",
    "git",
    "going",
    "accidentally",
    "push",
    "github",
    "show",
    "anybody",
    "going",
    "password",
    "crypted",
    "going",
    "one",
    "ways",
    "highly",
    "recommend",
    "store",
    "keys",
    "often",
    "times",
    "going",
    "want",
    "mix",
    "working",
    "local",
    "ganache",
    "ones",
    "keys",
    "learn",
    "flip",
    "back",
    "forth",
    "little",
    "bit",
    "third",
    "way",
    "like",
    "use",
    "still",
    "using",
    "environment",
    "variable",
    "script",
    "often",
    "times",
    "really",
    "easy",
    "private",
    "key",
    "environment",
    "variable",
    "way",
    "wo",
    "keep",
    "putting",
    "password",
    "every",
    "single",
    "time",
    "run",
    "script",
    "little",
    "bit",
    "less",
    "secure",
    "another",
    "tip",
    "never",
    "put",
    "private",
    "keys",
    "associated",
    "wallet",
    "real",
    "money",
    "environment",
    "variables",
    "env",
    "file",
    "case",
    "accidentally",
    "something",
    "really",
    "stupid",
    "trust",
    "enough",
    "going",
    "highly",
    "recommend",
    "whatever",
    "private",
    "key",
    "use",
    "store",
    "environment",
    "variable",
    "always",
    "kind",
    "test",
    "account",
    "going",
    "use",
    "test",
    "things",
    "serious",
    "accounts",
    "use",
    "encryption",
    "let",
    "go",
    "ahead",
    "create",
    "environment",
    "variable",
    "file",
    "new",
    "file",
    "call",
    "itv",
    "export",
    "private",
    "key",
    "ox",
    "private",
    "key",
    "set",
    "environment",
    "variable",
    "brownie",
    "additional",
    "feature",
    "allows",
    "us",
    "easily",
    "work",
    "environment",
    "variables",
    "environment",
    "variable",
    "folder",
    "tell",
    "brownie",
    "always",
    "pull",
    "ourv",
    "file",
    "brownie",
    "config",
    "yaml",
    "special",
    "file",
    "brownie",
    "always",
    "looks",
    "grab",
    "information",
    "going",
    "build",
    "going",
    "deploy",
    "going",
    "grab",
    "things",
    "config",
    "need",
    "add",
    "env",
    "setv",
    "telling",
    "brownie",
    "hey",
    "run",
    "scripts",
    "grab",
    "environment",
    "variables",
    "env",
    "file",
    "import",
    "os",
    "account",
    "equals",
    "accounts",
    "add",
    "os",
    "get",
    "env",
    "get",
    "environment",
    "variable",
    "uh",
    "private",
    "key",
    "let",
    "print",
    "account",
    "see",
    "right",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "py",
    "great",
    "right",
    "great",
    "seems",
    "work",
    "perfectly",
    "like",
    "make",
    "method",
    "even",
    "explicit",
    "going",
    "take",
    "version",
    "learned",
    "improve",
    "brownie",
    "config",
    "actually",
    "add",
    "information",
    "wallets",
    "want",
    "use",
    "want",
    "use",
    "add",
    "wallets",
    "section",
    "add",
    "key",
    "section",
    "add",
    "environment",
    "variable",
    "private",
    "key",
    "yo",
    "file",
    "surround",
    "string",
    "dollar",
    "sign",
    "curly",
    "brackets",
    "automatically",
    "get",
    "transformed",
    "environment",
    "variable",
    "go",
    "back",
    "deploy",
    "actually",
    "change",
    "grab",
    "right",
    "config",
    "file",
    "brownie",
    "import",
    "accounts",
    "config",
    "instead",
    "using",
    "os",
    "accounts",
    "add",
    "config",
    "wallets",
    "since",
    "defining",
    "right",
    "key",
    "wallets",
    "key",
    "exact",
    "thing",
    "os",
    "gmv",
    "reason",
    "better",
    "one",
    "canonical",
    "place",
    "always",
    "going",
    "pull",
    "private",
    "key",
    "instead",
    "go",
    "scripts",
    "update",
    "based",
    "whatever",
    "change",
    "environment",
    "variable",
    "let",
    "try",
    "brownie",
    "run",
    "script",
    "deploy",
    "great",
    "see",
    "address",
    "printed",
    "let",
    "stick",
    "using",
    "accounts",
    "zero",
    "since",
    "want",
    "use",
    "account",
    "brownie",
    "makes",
    "us",
    "ganach",
    "brownie",
    "really",
    "intelligent",
    "actually",
    "go",
    "ahead",
    "import",
    "contract",
    "directly",
    "script",
    "web",
    "pi",
    "version",
    "opened",
    "contract",
    "read",
    "able",
    "interact",
    "deployed",
    "brownie",
    "brownie",
    "import",
    "name",
    "contract",
    "simple",
    "storage",
    "simple",
    "storage",
    "deploy",
    "going",
    "deploy",
    "chain",
    "anytime",
    "deploy",
    "chain",
    "make",
    "transaction",
    "always",
    "need",
    "say",
    "going",
    "deploying",
    "account",
    "going",
    "deploying",
    "see",
    "step",
    "deploying",
    "much",
    "quicker",
    "web",
    "3py",
    "web",
    "3py",
    "get",
    "bite",
    "code",
    "abi",
    "get",
    "nuns",
    "create",
    "contract",
    "create",
    "transaction",
    "sign",
    "transaction",
    "send",
    "transaction",
    "remember",
    "said",
    "either",
    "make",
    "transaction",
    "call",
    "brownie",
    "smart",
    "enough",
    "know",
    "whether",
    "going",
    "transaction",
    "call",
    "case",
    "since",
    "deploying",
    "smart",
    "contract",
    "brownie",
    "smart",
    "enough",
    "know",
    "ah",
    "want",
    "make",
    "state",
    "change",
    "let",
    "make",
    "state",
    "change",
    "return",
    "contract",
    "object",
    "add",
    "print",
    "simple",
    "storage",
    "see",
    "prints",
    "let",
    "run",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "appp",
    "awesome",
    "happened",
    "brownie",
    "per",
    "usual",
    "launched",
    "local",
    "ganach",
    "chain",
    "sent",
    "transaction",
    "deploy",
    "symbol",
    "storage",
    "says",
    "symbol",
    "storage",
    "deploy",
    "address",
    "deployed",
    "see",
    "much",
    "quicker",
    "actually",
    "deploy",
    "let",
    "go",
    "ahead",
    "exactly",
    "web",
    "let",
    "call",
    "initial",
    "retrieve",
    "function",
    "update",
    "new",
    "value",
    "15",
    "brownie",
    "remember",
    "back",
    "web",
    "3p",
    "brownie",
    "going",
    "first",
    "going",
    "stored",
    "value",
    "equals",
    "simple",
    "storage",
    "retrieve",
    "since",
    "view",
    "function",
    "add",
    "account",
    "brownie",
    "intelligent",
    "enough",
    "know",
    "call",
    "transaction",
    "know",
    "retrieve",
    "view",
    "function",
    "know",
    "actually",
    "make",
    "transaction",
    "print",
    "value",
    "stored",
    "value",
    "print",
    "stored",
    "value",
    "let",
    "go",
    "ahead",
    "try",
    "great",
    "get",
    "zero",
    "right",
    "perfect",
    "let",
    "try",
    "updating",
    "transaction",
    "equals",
    "simple",
    "storage",
    "store",
    "want",
    "15",
    "remember",
    "since",
    "transaction",
    "brownie",
    "always",
    "add",
    "going",
    "transact",
    "case",
    "going",
    "account",
    "similar",
    "web",
    "pi",
    "transaction",
    "many",
    "blocks",
    "want",
    "wait",
    "let",
    "call",
    "retrieve",
    "function",
    "see",
    "updated",
    "updated",
    "stored",
    "value",
    "equals",
    "symbol",
    "storage",
    "retrieve",
    "print",
    "updated",
    "storage",
    "value",
    "run",
    "see",
    "two",
    "transactions",
    "one",
    "deployed",
    "original",
    "simple",
    "storage",
    "contract",
    "called",
    "retrieve",
    "function",
    "returned",
    "zero",
    "updated",
    "store",
    "function",
    "call",
    "retrieve",
    "see",
    "indeed",
    "update",
    "15",
    "see",
    "much",
    "smaller",
    "easier",
    "intuitive",
    "brownie",
    "much",
    "lives",
    "going",
    "much",
    "better",
    "awesome",
    "learned",
    "deploy",
    "local",
    "chain",
    "running",
    "scripts",
    "fantastic",
    "need",
    "way",
    "actually",
    "automate",
    "contracts",
    "want",
    "want",
    "always",
    "manually",
    "check",
    "stuff",
    "want",
    "right",
    "want",
    "manually",
    "check",
    "15",
    "actually",
    "updating",
    "appropriately",
    "running",
    "tests",
    "important",
    "automating",
    "tests",
    "going",
    "crucial",
    "becoming",
    "successful",
    "smart",
    "contract",
    "developer",
    "want",
    "point",
    "actually",
    "write",
    "tests",
    "directly",
    "solidity",
    "great",
    "way",
    "actually",
    "test",
    "smart",
    "contracts",
    "learn",
    "right",
    "solidity",
    "however",
    "lot",
    "professional",
    "developers",
    "code",
    "tests",
    "smart",
    "contract",
    "development",
    "framework",
    "language",
    "like",
    "python",
    "javascript",
    "way",
    "allows",
    "get",
    "lot",
    "flexibility",
    "customization",
    "smart",
    "contracts",
    "confined",
    "whatever",
    "solidity",
    "let",
    "go",
    "ahead",
    "learn",
    "actually",
    "write",
    "smart",
    "contct",
    "contract",
    "tests",
    "python",
    "test",
    "folder",
    "going",
    "create",
    "new",
    "file",
    "called",
    "test",
    "simple",
    "storage",
    "piy",
    "make",
    "sure",
    "add",
    "test",
    "front",
    "syntax",
    "pi",
    "test",
    "going",
    "looking",
    "test",
    "actually",
    "set",
    "exact",
    "way",
    "set",
    "deploy",
    "function",
    "browning",
    "import",
    "simple",
    "storage",
    "accounts",
    "start",
    "defining",
    "tests",
    "want",
    "test",
    "see",
    "deploy",
    "smart",
    "contract",
    "gets",
    "started",
    "zero",
    "retrieve",
    "function",
    "create",
    "first",
    "test",
    "def",
    "test",
    "deploy",
    "typically",
    "testing",
    "smart",
    "contracts",
    "testing",
    "really",
    "anything",
    "going",
    "separated",
    "three",
    "categories",
    "arranging",
    "acting",
    "asserting",
    "going",
    "bounce",
    "around",
    "little",
    "bit",
    "loose",
    "definition",
    "duration",
    "tutorials",
    "however",
    "keep",
    "mind",
    "typically",
    "setup",
    "want",
    "use",
    "later",
    "one",
    "later",
    "smart",
    "contract",
    "examples",
    "going",
    "go",
    "much",
    "better",
    "testing",
    "setup",
    "arrange",
    "stage",
    "going",
    "set",
    "pieces",
    "need",
    "get",
    "set",
    "first",
    "going",
    "grab",
    "account",
    "going",
    "say",
    "accounts",
    "equals",
    "account",
    "z",
    "really",
    "need",
    "start",
    "getting",
    "setup",
    "acting",
    "stage",
    "going",
    "deploy",
    "simple",
    "simple",
    "storage",
    "contract",
    "exactly",
    "deploy",
    "going",
    "simple",
    "storage",
    "equals",
    "simple",
    "storage",
    "deploy",
    "account",
    "going",
    "get",
    "starting",
    "value",
    "starting",
    "value",
    "going",
    "equal",
    "simple",
    "storage",
    "dot",
    "retrieve",
    "music",
    "expecting",
    "zero",
    "assert",
    "stage",
    "run",
    "assert",
    "starting",
    "value",
    "equals",
    "expected",
    "let",
    "recap",
    "arrange",
    "stage",
    "getting",
    "account",
    "actually",
    "make",
    "contracts",
    "act",
    "stage",
    "going",
    "deploy",
    "simple",
    "storage",
    "smart",
    "contract",
    "going",
    "call",
    "retrieve",
    "function",
    "see",
    "starting",
    "value",
    "going",
    "compare",
    "see",
    "starting",
    "value",
    "expect",
    "expect",
    "zero",
    "test",
    "brownie",
    "test",
    "per",
    "usual",
    "brownie",
    "going",
    "kick",
    "ganach",
    "going",
    "test",
    "every",
    "test",
    "going",
    "get",
    "little",
    "green",
    "dot",
    "going",
    "say",
    "one",
    "pass",
    "seconds",
    "perfect",
    "expected",
    "15",
    "r",
    "brownie",
    "test",
    "get",
    "fail",
    "awesome",
    "exactly",
    "get",
    "let",
    "go",
    "ahead",
    "test",
    "updating",
    "15",
    "see",
    "works",
    "want",
    "new",
    "test",
    "def",
    "test",
    "update",
    "ding",
    "storage",
    "three",
    "phases",
    "arrange",
    "act",
    "assert",
    "arrange",
    "need",
    "get",
    "account",
    "account",
    "zero",
    "one",
    "arranging",
    "also",
    "going",
    "deploying",
    "smart",
    "contract",
    "since",
    "really",
    "part",
    "setup",
    "act",
    "really",
    "testing",
    "act",
    "going",
    "add",
    "expected",
    "equal",
    "15",
    "going",
    "run",
    "simple",
    "storage",
    "store",
    "expected",
    "account",
    "notice",
    "nearly",
    "exactly",
    "deploy",
    "function",
    "last",
    "time",
    "assert",
    "expected",
    "equals",
    "equals",
    "simple",
    "storage",
    "dot",
    "retrieve",
    "saying",
    "want",
    "store",
    "15",
    "smart",
    "contract",
    "call",
    "retrieve",
    "function",
    "stored",
    "correctly",
    "let",
    "go",
    "ahead",
    "run",
    "brownie",
    "test",
    "awesome",
    "see",
    "two",
    "dots",
    "means",
    "two",
    "actually",
    "passed",
    "correctly",
    "great",
    "want",
    "quickly",
    "show",
    "couple",
    "useful",
    "tips",
    "pretty",
    "much",
    "always",
    "running",
    "tests",
    "want",
    "test",
    "one",
    "function",
    "k",
    "brownie",
    "k",
    "test",
    "updating",
    "storage",
    "test",
    "test",
    "updating",
    "storage",
    "run",
    "brownie",
    "test",
    "pdb",
    "add",
    "something",
    "wrong",
    "like",
    "5",
    "equals",
    "simple",
    "storage",
    "retrieve",
    "happen",
    "kicks",
    "wrong",
    "actually",
    "get",
    "put",
    "python",
    "shell",
    "check",
    "see",
    "variables",
    "like",
    "see",
    "expected",
    "expected",
    "15",
    "try",
    "run",
    "simple",
    "storage",
    "retrieve",
    "expected",
    "15",
    "run",
    "simple",
    "storage",
    "see",
    "simple",
    "storage",
    "contract",
    "pdb",
    "really",
    "useful",
    "way",
    "mess",
    "around",
    "see",
    "okay",
    "well",
    "really",
    "go",
    "wrong",
    "test",
    "failing",
    "another",
    "important",
    "flag",
    "going",
    "dash",
    "notice",
    "print",
    "lines",
    "actually",
    "get",
    "sent",
    "working",
    "tests",
    "little",
    "bit",
    "robust",
    "telling",
    "exactly",
    "going",
    "print",
    "lines",
    "would",
    "print",
    "lines",
    "well",
    "everything",
    "brownie",
    "test",
    "actually",
    "comes",
    "directly",
    "pest",
    "flag",
    "want",
    "use",
    "awesome",
    "debugger",
    "want",
    "use",
    "use",
    "brownie",
    "looking",
    "pie",
    "test",
    "documentation",
    "tools",
    "exactly",
    "right",
    "coming",
    "along",
    "fantastically",
    "script",
    "deploy",
    "tests",
    "contract",
    "great",
    "actually",
    "want",
    "deploy",
    "test",
    "net",
    "going",
    "let",
    "look",
    "back",
    "web",
    "back",
    "web",
    "pi",
    "deploy",
    "test",
    "net",
    "needed",
    "add",
    "http",
    "web",
    "3",
    "provider",
    "infura",
    "account",
    "pretty",
    "much",
    "add",
    "address",
    "private",
    "key",
    "brownie",
    "lives",
    "even",
    "easier",
    "brownie",
    "comes",
    "prepackaged",
    "list",
    "networks",
    "already",
    "compatible",
    "see",
    "networks",
    "running",
    "brownie",
    "networks",
    "list",
    "mine",
    "couple",
    "actually",
    "playing",
    "around",
    "long",
    "time",
    "want",
    "see",
    "different",
    "networks",
    "look",
    "list",
    "something",
    "important",
    "note",
    "difference",
    "development",
    "networks",
    "ethereum",
    "networks",
    "whenever",
    "deploy",
    "network",
    "default",
    "development",
    "network",
    "network",
    "see",
    "development",
    "section",
    "going",
    "network",
    "temporary",
    "networks",
    "temporary",
    "ganache",
    "network",
    "brownie",
    "automatically",
    "spins",
    "run",
    "scripts",
    "written",
    "far",
    "really",
    "important",
    "note",
    "remember",
    "anything",
    "development",
    "section",
    "going",
    "get",
    "torn",
    "deployed",
    "however",
    "ethereum",
    "ones",
    "going",
    "persistent",
    "networks",
    "anything",
    "ethereum",
    "tab",
    "brownie",
    "actually",
    "going",
    "keep",
    "track",
    "deployment",
    "keep",
    "track",
    "everything",
    "networks",
    "represent",
    "persistent",
    "networks",
    "like",
    "mainnet",
    "rink",
    "b",
    "koven",
    "etc",
    "web",
    "used",
    "rpc",
    "url",
    "http",
    "provider",
    "infura",
    "connect",
    "connect",
    "test",
    "net",
    "going",
    "use",
    "exact",
    "methodology",
    "actually",
    "get",
    "rpc",
    "url",
    "blockchain",
    "url",
    "brownie",
    "smart",
    "contract",
    "package",
    "well",
    "one",
    "easiest",
    "ways",
    "environment",
    "variable",
    "brownie",
    "actually",
    "already",
    "knows",
    "infura",
    "thing",
    "look",
    "natively",
    "right",
    "away",
    "infura",
    "web",
    "3",
    "infura",
    "project",
    "id",
    "use",
    "project",
    "id",
    "infura",
    "go",
    "project",
    "back",
    "infura",
    "go",
    "settings",
    "see",
    "project",
    "id",
    "little",
    "bit",
    "different",
    "whole",
    "url",
    "going",
    "id",
    "right",
    "copy",
    "paste",
    "right",
    "emv",
    "web3",
    "inf",
    "fur",
    "product",
    "id",
    "directly",
    "project",
    "brownie",
    "networks",
    "list",
    "network",
    "infura",
    "access",
    "see",
    "little",
    "infura",
    "colons",
    "networks",
    "brownie",
    "automatically",
    "know",
    "working",
    "infura",
    "see",
    "rink",
    "b",
    "one",
    "infura",
    "keys",
    "wanted",
    "deploy",
    "rink",
    "b",
    "could",
    "run",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "piy",
    "select",
    "network",
    "das",
    "network",
    "rink",
    "b",
    "going",
    "get",
    "issue",
    "remember",
    "account",
    "zero",
    "works",
    "brown",
    "works",
    "ganach",
    "cli",
    "use",
    "actual",
    "private",
    "key",
    "versions",
    "working",
    "private",
    "keys",
    "going",
    "come",
    "play",
    "sometimes",
    "even",
    "add",
    "get",
    "account",
    "function",
    "def",
    "get",
    "account",
    "natively",
    "check",
    "working",
    "development",
    "chain",
    "use",
    "account",
    "zero",
    "use",
    "method",
    "pulls",
    "config",
    "check",
    "seeing",
    "network",
    "show",
    "active",
    "equals",
    "equals",
    "development",
    "return",
    "accounts",
    "zero",
    "network",
    "another",
    "keyword",
    "brownie",
    "actually",
    "network",
    "keyword",
    "allows",
    "us",
    "interact",
    "different",
    "networks",
    "development",
    "network",
    "going",
    "pull",
    "directly",
    "config",
    "return",
    "accounts",
    "add",
    "config",
    "wallets",
    "key",
    "instead",
    "account",
    "equals",
    "account",
    "zero",
    "account",
    "equals",
    "get",
    "account",
    "run",
    "browny",
    "run",
    "scripts",
    "deploy",
    "pi",
    "network",
    "rinky",
    "pull",
    "directly",
    "config",
    "file",
    "great",
    "actually",
    "see",
    "transactions",
    "sent",
    "directly",
    "rinky",
    "chain",
    "pull",
    "ether",
    "scan",
    "rink",
    "ether",
    "scan",
    "take",
    "transaction",
    "post",
    "rinky",
    "ether",
    "scan",
    "see",
    "transaction",
    "actually",
    "going",
    "deployed",
    "simple",
    "storage",
    "contract",
    "initialized",
    "zero",
    "going",
    "go",
    "ahead",
    "update",
    "gets",
    "updated",
    "15",
    "deployed",
    "blockchain",
    "see",
    "build",
    "contract",
    "actually",
    "change",
    "deployments",
    "folder",
    "new",
    "deployment",
    "every",
    "time",
    "deploy",
    "blockchain",
    "brownie",
    "actually",
    "save",
    "deployment",
    "always",
    "go",
    "back",
    "say",
    "hm",
    "deploy",
    "happened",
    "deployment",
    "notice",
    "separated",
    "chain",
    "id",
    "remember",
    "chain",
    "id",
    "rinky",
    "four",
    "also",
    "notice",
    "none",
    "development",
    "deployments",
    "anything",
    "development",
    "section",
    "going",
    "get",
    "saved",
    "deployments",
    "area",
    "however",
    "anything",
    "ones",
    "get",
    "saved",
    "going",
    "really",
    "powerful",
    "actually",
    "interact",
    "contracts",
    "already",
    "deployed",
    "onto",
    "chain",
    "let",
    "go",
    "ahead",
    "even",
    "add",
    "new",
    "file",
    "called",
    "read",
    "value",
    "function",
    "going",
    "read",
    "directly",
    "rink",
    "b",
    "blockchain",
    "going",
    "read",
    "contract",
    "already",
    "deployed",
    "remember",
    "something",
    "similar",
    "web",
    "3py",
    "using",
    "address",
    "abi",
    "going",
    "exact",
    "thing",
    "brownie",
    "brownie",
    "going",
    "brownie",
    "import",
    "simple",
    "storage",
    "accounts",
    "config",
    "def",
    "read",
    "contract",
    "pass",
    "def",
    "main",
    "going",
    "read",
    "contract",
    "oops",
    "mean",
    "run",
    "browny",
    "run",
    "scripts",
    "read",
    "value",
    "pi",
    "network",
    "rink",
    "b",
    "obviously",
    "right",
    "nothing",
    "going",
    "happen",
    "actually",
    "interact",
    "simple",
    "storage",
    "contract",
    "already",
    "deployed",
    "well",
    "simple",
    "storage",
    "object",
    "actually",
    "array",
    "print",
    "simple",
    "storage",
    "let",
    "see",
    "get",
    "see",
    "get",
    "browning",
    "network",
    "contract",
    "contract",
    "container",
    "object",
    "object",
    "works",
    "array",
    "access",
    "different",
    "indexes",
    "inside",
    "print",
    "simple",
    "storage",
    "position",
    "zero",
    "see",
    "get",
    "address",
    "check",
    "ether",
    "scan",
    "see",
    "indeed",
    "contract",
    "deployed",
    "brownie",
    "knows",
    "deployed",
    "build",
    "section",
    "deployments",
    "rink",
    "b",
    "chain",
    "chain",
    "id",
    "contract",
    "deployed",
    "actually",
    "directly",
    "interact",
    "contract",
    "simple",
    "storage",
    "equals",
    "simple",
    "storage",
    "zero",
    "always",
    "looking",
    "get",
    "recent",
    "deployment",
    "minus",
    "one",
    "little",
    "bit",
    "easier",
    "always",
    "zero",
    "going",
    "get",
    "first",
    "deployment",
    "made",
    "make",
    "deployments",
    "later",
    "never",
    "going",
    "get",
    "past",
    "want",
    "always",
    "work",
    "recent",
    "employment",
    "minus",
    "one",
    "remember",
    "said",
    "whenever",
    "work",
    "smart",
    "contract",
    "need",
    "know",
    "abi",
    "address",
    "well",
    "brownie",
    "already",
    "knows",
    "address",
    "contract",
    "got",
    "saved",
    "deployments",
    "folder",
    "also",
    "knows",
    "abi",
    "compile",
    "get",
    "big",
    "json",
    "file",
    "one",
    "first",
    "inputs",
    "abi",
    "brownie",
    "automatically",
    "knows",
    "abi",
    "addresses",
    "already",
    "go",
    "ahead",
    "run",
    "simple",
    "storage",
    "retrieve",
    "print",
    "see",
    "15",
    "since",
    "already",
    "updated",
    "brownie",
    "run",
    "scripts",
    "read",
    "value",
    "pi",
    "network",
    "rink",
    "b",
    "great",
    "indeed",
    "see",
    "15",
    "know",
    "write",
    "scripts",
    "actually",
    "deploy",
    "things",
    "brownie",
    "work",
    "brownie",
    "going",
    "show",
    "one",
    "powerful",
    "features",
    "also",
    "work",
    "brownie",
    "typically",
    "write",
    "scripts",
    "want",
    "something",
    "reproducible",
    "want",
    "something",
    "deploying",
    "simple",
    "storage",
    "reading",
    "value",
    "something",
    "probably",
    "going",
    "want",
    "however",
    "maybe",
    "want",
    "work",
    "contracts",
    "little",
    "bit",
    "ad",
    "hoc",
    "get",
    "shell",
    "actually",
    "interact",
    "contracts",
    "brownie",
    "console",
    "actually",
    "going",
    "come",
    "play",
    "make",
    "lives",
    "lot",
    "easier",
    "brownie",
    "console",
    "happen",
    "brownie",
    "actually",
    "kick",
    "us",
    "console",
    "contracts",
    "everything",
    "already",
    "imported",
    "run",
    "simple",
    "storage",
    "gives",
    "back",
    "array",
    "saying",
    "great",
    "simple",
    "storage",
    "contract",
    "since",
    "working",
    "brand",
    "new",
    "local",
    "test",
    "environment",
    "simple",
    "storage",
    "contracts",
    "deployed",
    "say",
    "account",
    "equals",
    "account",
    "zero",
    "account",
    "work",
    "accounts",
    "one",
    "keywords",
    "automatically",
    "imported",
    "brownie",
    "console",
    "everything",
    "imported",
    "via",
    "brownie",
    "script",
    "automatically",
    "already",
    "imported",
    "little",
    "shell",
    "said",
    "go",
    "ahead",
    "even",
    "deploy",
    "simple",
    "storage",
    "contract",
    "literally",
    "take",
    "line",
    "copy",
    "paste",
    "see",
    "exactly",
    "thing",
    "happens",
    "ran",
    "script",
    "get",
    "little",
    "transaction",
    "hash",
    "get",
    "simple",
    "storage",
    "type",
    "simple",
    "storage",
    "simple",
    "storage",
    "variable",
    "storage",
    "contract",
    "type",
    "simple",
    "storage",
    "see",
    "contract",
    "length",
    "simple",
    "storage",
    "one",
    "deployed",
    "one",
    "simple",
    "storage",
    "contract",
    "deploy",
    "length",
    "two",
    "browning",
    "knows",
    "holding",
    "two",
    "simple",
    "storage",
    "contracts",
    "deployed",
    "two",
    "simple",
    "storage",
    "contracts",
    "even",
    "things",
    "like",
    "simple",
    "storage",
    "retrieve",
    "see",
    "start",
    "zero",
    "go",
    "ahead",
    "even",
    "run",
    "simple",
    "storage",
    "store",
    "15",
    "account",
    "see",
    "get",
    "transaction",
    "rerun",
    "simple",
    "storage",
    "retrieve",
    "nice",
    "little",
    "hack",
    "shells",
    "hit",
    "key",
    "actually",
    "able",
    "go",
    "back",
    "history",
    "shell",
    "hit",
    "twice",
    "go",
    "back",
    "command",
    "hit",
    "enter",
    "see",
    "15",
    "brownie",
    "console",
    "great",
    "way",
    "interact",
    "scripts",
    "ad",
    "hoc",
    "manner",
    "maybe",
    "want",
    "test",
    "weird",
    "functionality",
    "maybe",
    "experiment",
    "want",
    "try",
    "great",
    "way",
    "really",
    "interact",
    "anything",
    "browning",
    "thing",
    "everything",
    "normally",
    "python",
    "example",
    "could",
    "write",
    "print",
    "hello",
    "print",
    "hello",
    "could",
    "cat",
    "equals",
    "1",
    "2",
    "type",
    "cat",
    "get",
    "three",
    "brownie",
    "shell",
    "python",
    "shell",
    "smart",
    "contract",
    "features",
    "already",
    "natively",
    "integrated",
    "incredibly",
    "powerful",
    "go",
    "ahead",
    "quit",
    "quit",
    "know",
    "learned",
    "lot",
    "far",
    "sure",
    "starting",
    "see",
    "working",
    "brownie",
    "much",
    "easier",
    "makes",
    "lives",
    "smart",
    "contract",
    "developers",
    "lot",
    "easier",
    "testing",
    "deploying",
    "working",
    "right",
    "let",
    "move",
    "next",
    "project",
    "going",
    "take",
    "fundme",
    "contract",
    "made",
    "recently",
    "remix",
    "actually",
    "import",
    "one",
    "brownie",
    "going",
    "go",
    "lot",
    "advanced",
    "features",
    "brownie",
    "offer",
    "offer",
    "us",
    "going",
    "get",
    "sophisticated",
    "testing",
    "deployment",
    "mechanisms",
    "going",
    "make",
    "new",
    "directory",
    "browny",
    "fundme",
    "going",
    "cd",
    "brownie",
    "fundme",
    "remember",
    "hit",
    "tab",
    "autocomplete",
    "going",
    "open",
    "folder",
    "code",
    "period",
    "work",
    "always",
    "go",
    "file",
    "open",
    "folder",
    "like",
    "brownie",
    "fundme",
    "project",
    "going",
    "initi",
    "ize",
    "new",
    "project",
    "running",
    "brownie",
    "going",
    "create",
    "new",
    "contract",
    "called",
    "fundme",
    "soul",
    "going",
    "exactly",
    "fundme",
    "contract",
    "remix",
    "great",
    "go",
    "ahead",
    "grab",
    "check",
    "github",
    "repository",
    "associated",
    "course",
    "copy",
    "paste",
    "code",
    "typically",
    "last",
    "project",
    "ran",
    "browny",
    "compile",
    "happens",
    "run",
    "brownie",
    "compile",
    "brownie",
    "going",
    "give",
    "us",
    "error",
    "going",
    "say",
    "hey",
    "source",
    "found",
    "going",
    "well",
    "remix",
    "understands",
    "chainlinks",
    "contracts",
    "mpm",
    "package",
    "import",
    "however",
    "brownie",
    "aware",
    "mpm",
    "packages",
    "brownie",
    "ca",
    "actually",
    "download",
    "directly",
    "mpm",
    "however",
    "brownie",
    "download",
    "directly",
    "github",
    "tell",
    "brownie",
    "downloading",
    "external",
    "third",
    "party",
    "packages",
    "use",
    "contracts",
    "might",
    "well",
    "change",
    "global",
    "compiler",
    "version",
    "change",
    "compil",
    "version",
    "carot",
    "linter",
    "happy",
    "need",
    "tell",
    "brownie",
    "import",
    "contracts",
    "github",
    "instead",
    "npm",
    "luckily",
    "package",
    "specifically",
    "created",
    "downloading",
    "chain",
    "link",
    "contracts",
    "way",
    "tell",
    "brownie",
    "get",
    "brownie",
    "config",
    "let",
    "create",
    "browning",
    "config",
    "going",
    "create",
    "dependencies",
    "section",
    "tell",
    "brownie",
    "organization",
    "sl",
    "repo",
    "name",
    "version",
    "want",
    "download",
    "get",
    "chain",
    "link",
    "contracts",
    "look",
    "chain",
    "link",
    "rounding",
    "contracts",
    "use",
    "repository",
    "get",
    "instead",
    "downloading",
    "pm",
    "going",
    "download",
    "directly",
    "github",
    "repo",
    "need",
    "tell",
    "brownie",
    "organization",
    "going",
    "smart",
    "contract",
    "kit",
    "repository",
    "name",
    "going",
    "chain",
    "link",
    "brownie",
    "contracts",
    "version",
    "always",
    "use",
    "latest",
    "version",
    "fact",
    "go",
    "past",
    "nine",
    "versions",
    "clicking",
    "version",
    "history",
    "actually",
    "going",
    "using",
    "yes",
    "look",
    "like",
    "latest",
    "version",
    "went",
    "back",
    "wordss",
    "recent",
    "release",
    "version",
    "package",
    "releases",
    "chain",
    "lake",
    "brownie",
    "contracts",
    "going",
    "match",
    "exactly",
    "chain",
    "link",
    "contracts",
    "mpm",
    "tag",
    "looks",
    "like",
    "earlier",
    "version",
    "say",
    "great",
    "brownie",
    "knows",
    "download",
    "repository",
    "github",
    "everything",
    "everything",
    "contract",
    "section",
    "available",
    "solidity",
    "code",
    "import",
    "use",
    "however",
    "final",
    "story",
    "also",
    "need",
    "tell",
    "brownie",
    "ch",
    "link",
    "thing",
    "means",
    "downloading",
    "smart",
    "contract",
    "kit",
    "chain",
    "link",
    "brownie",
    "contracts",
    "brownie",
    "going",
    "okay",
    "cool",
    "well",
    "chain",
    "link",
    "thing",
    "need",
    "tell",
    "brownie",
    "whenever",
    "using",
    "chain",
    "link",
    "actually",
    "referring",
    "import",
    "need",
    "tell",
    "compiler",
    "let",
    "add",
    "new",
    "section",
    "say",
    "compiler",
    "compiles",
    "sulk",
    "need",
    "remap",
    "chain",
    "link",
    "say",
    "whenever",
    "see",
    "chain",
    "link",
    "means",
    "referring",
    "package",
    "compiler",
    "solk",
    "mappings",
    "chain",
    "link",
    "equal",
    "package",
    "let",
    "go",
    "ahead",
    "try",
    "compile",
    "perfect",
    "see",
    "compiles",
    "successfully",
    "look",
    "build",
    "folder",
    "contract",
    "section",
    "new",
    "folder",
    "called",
    "dependencies",
    "even",
    "expand",
    "little",
    "bit",
    "see",
    "says",
    "dependencies",
    "smart",
    "contract",
    "kit",
    "chain",
    "link",
    "browning",
    "contracts",
    "downloaded",
    "github",
    "repository",
    "downloaded",
    "aggregator",
    "v3",
    "interface",
    "smart",
    "math",
    "chain",
    "link",
    "using",
    "files",
    "solidity",
    "code",
    "right",
    "great",
    "let",
    "write",
    "first",
    "script",
    "deploy",
    "development",
    "ganache",
    "chain",
    "brownie",
    "chain",
    "let",
    "scripts",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "file",
    "let",
    "go",
    "ahead",
    "build",
    "simple",
    "deploy",
    "script",
    "work",
    "rink",
    "b",
    "actually",
    "learn",
    "deploy",
    "local",
    "ganache",
    "development",
    "chain",
    "let",
    "build",
    "deploy",
    "script",
    "scripts",
    "new",
    "file",
    "deploy",
    "piy",
    "start",
    "def",
    "deploy",
    "fundme",
    "pass",
    "entry",
    "point",
    "def",
    "main",
    "call",
    "deploy",
    "fundme",
    "file",
    "course",
    "going",
    "brownie",
    "import",
    "fundme",
    "actually",
    "use",
    "let",
    "go",
    "ahead",
    "build",
    "deploy",
    "fundme",
    "function",
    "first",
    "going",
    "need",
    "get",
    "account",
    "last",
    "time",
    "used",
    "function",
    "called",
    "get",
    "account",
    "would",
    "know",
    "switch",
    "back",
    "forth",
    "development",
    "actual",
    "test",
    "net",
    "could",
    "pull",
    "config",
    "actually",
    "copy",
    "function",
    "use",
    "use",
    "script",
    "use",
    "get",
    "account",
    "function",
    "like",
    "get",
    "account",
    "add",
    "file",
    "called",
    "helpful",
    "scripts",
    "create",
    "new",
    "file",
    "called",
    "helpful",
    "scripts",
    "piy",
    "add",
    "get",
    "account",
    "function",
    "right",
    "literally",
    "pasted",
    "last",
    "project",
    "quick",
    "recap",
    "saying",
    "network",
    "development",
    "going",
    "use",
    "accounts",
    "zero",
    "syntax",
    "otherwise",
    "going",
    "pull",
    "config",
    "course",
    "going",
    "brownie",
    "import",
    "network",
    "config",
    "accounts",
    "course",
    "browning",
    "config",
    "going",
    "add",
    "wallets",
    "key",
    "let",
    "go",
    "config",
    "wallets",
    "key",
    "add",
    "private",
    "key",
    "environment",
    "variable",
    "setup",
    "course",
    "means",
    "going",
    "setv",
    "tov",
    "going",
    "create",
    "new",
    "file",
    "paste",
    "exact",
    "values",
    "last",
    "emv",
    "going",
    "private",
    "key",
    "project",
    "id",
    "kind",
    "lot",
    "basics",
    "setup",
    "added",
    "get",
    "account",
    "script",
    "actually",
    "use",
    "deploy",
    "script",
    "depending",
    "version",
    "python",
    "might",
    "actually",
    "create",
    "new",
    "file",
    "first",
    "named",
    "uncore",
    "might",
    "case",
    "let",
    "make",
    "hurt",
    "python",
    "knows",
    "import",
    "scripts",
    "packages",
    "project",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "importing",
    "get",
    "account",
    "function",
    "helpful",
    "script",
    "going",
    "make",
    "get",
    "account",
    "function",
    "little",
    "bit",
    "robust",
    "little",
    "bit",
    "later",
    "work",
    "perfectly",
    "looking",
    "run",
    "typical",
    "deploy",
    "function",
    "funme",
    "fundme",
    "contract",
    "equals",
    "fundme",
    "deoy",
    "course",
    "account",
    "since",
    "deploy",
    "going",
    "make",
    "state",
    "change",
    "blockchain",
    "always",
    "need",
    "account",
    "section",
    "even",
    "little",
    "print",
    "print",
    "f",
    "say",
    "contract",
    "ployd",
    "fundme",
    "address",
    "get",
    "address",
    "fundme",
    "great",
    "even",
    "go",
    "ahead",
    "try",
    "right",
    "remember",
    "need",
    "r",
    "eum",
    "brownie",
    "runs",
    "scripts",
    "deploy",
    "high",
    "network",
    "rink",
    "b",
    "perfect",
    "contract",
    "deployed",
    "even",
    "go",
    "rink",
    "ether",
    "scan",
    "see",
    "contract",
    "right",
    "great",
    "look",
    "contract",
    "kind",
    "blank",
    "jarble",
    "bites",
    "right",
    "nobody",
    "actually",
    "see",
    "contract",
    "easily",
    "interact",
    "want",
    "make",
    "contracts",
    "easy",
    "interact",
    "ether",
    "scan",
    "verify",
    "publish",
    "smart",
    "contracts",
    "verify",
    "smart",
    "contract",
    "hit",
    "verify",
    "button",
    "choose",
    "solidity",
    "compiler",
    "type",
    "know",
    "going",
    "know",
    "working",
    "mit",
    "license",
    "continue",
    "would",
    "add",
    "rest",
    "pieces",
    "optimization",
    "going",
    "yes",
    "enter",
    "solidity",
    "contract",
    "code",
    "importing",
    "fundme",
    "like",
    "would",
    "actually",
    "work",
    "ether",
    "scan",
    "know",
    "chain",
    "link",
    "contracts",
    "would",
    "copy",
    "paste",
    "code",
    "imports",
    "top",
    "contract",
    "removing",
    "imports",
    "copy",
    "pasting",
    "code",
    "associated",
    "files",
    "known",
    "flattening",
    "important",
    "concept",
    "verifying",
    "smart",
    "contracts",
    "platforms",
    "like",
    "ether",
    "scan",
    "however",
    "brownie",
    "really",
    "nice",
    "way",
    "get",
    "around",
    "actually",
    "go",
    "main",
    "site",
    "sign",
    "sign",
    "get",
    "api",
    "key",
    "already",
    "signed",
    "going",
    "go",
    "ahead",
    "sign",
    "log",
    "go",
    "profile",
    "scroll",
    "api",
    "keys",
    "create",
    "api",
    "key",
    "us",
    "interact",
    "programmatically",
    "verify",
    "smart",
    "contracts",
    "ether",
    "scan",
    "already",
    "got",
    "one",
    "need",
    "hit",
    "add",
    "give",
    "name",
    "call",
    "verify",
    "browning",
    "continue",
    "created",
    "new",
    "api",
    "token",
    "allow",
    "us",
    "verify",
    "smart",
    "contracts",
    "use",
    "brownie",
    "copy",
    "api",
    "key",
    "move",
    "back",
    "scripts",
    "set",
    "api",
    "key",
    "environment",
    "variable",
    "export",
    "name",
    "ether",
    "scan",
    "token",
    "set",
    "equal",
    "key",
    "got",
    "verify",
    "deploy",
    "contract",
    "tell",
    "brownie",
    "whether",
    "want",
    "verify",
    "contract",
    "dictionary",
    "comma",
    "publish",
    "source",
    "equals",
    "true",
    "saying",
    "yes",
    "would",
    "like",
    "publish",
    "source",
    "code",
    "rerun",
    "script",
    "let",
    "see",
    "happens",
    "remember",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "network",
    "space",
    "rinke",
    "says",
    "fundme",
    "deployed",
    "going",
    "say",
    "waiting",
    "api",
    "rink",
    "process",
    "contract",
    "submitting",
    "code",
    "verification",
    "say",
    "verification",
    "pending",
    "verification",
    "complete",
    "pass",
    "verify",
    "say",
    "contract",
    "deployed",
    "done",
    "go",
    "back",
    "ether",
    "scan",
    "going",
    "go",
    "back",
    "rink",
    "ether",
    "scan",
    "deployed",
    "rink",
    "b",
    "paste",
    "little",
    "check",
    "mark",
    "associated",
    "contract",
    "click",
    "contract",
    "see",
    "code",
    "contract",
    "contract",
    "fundme",
    "payable",
    "need",
    "get",
    "eth",
    "everything",
    "defined",
    "scroll",
    "see",
    "indeed",
    "flatten",
    "contract",
    "right",
    "pasted",
    "aggregator",
    "v3",
    "interface",
    "import",
    "also",
    "pasted",
    "library",
    "safe",
    "maath",
    "chain",
    "link",
    "let",
    "verified",
    "even",
    "read",
    "contract",
    "see",
    "different",
    "public",
    "variables",
    "owner",
    "get",
    "version",
    "get",
    "price",
    "exact",
    "buttons",
    "saw",
    "remix",
    "read",
    "contract",
    "section",
    "view",
    "functions",
    "right",
    "ones",
    "going",
    "making",
    "state",
    "change",
    "right",
    "contract",
    "going",
    "want",
    "call",
    "something",
    "like",
    "fund",
    "withdraw",
    "could",
    "even",
    "go",
    "ahead",
    "interact",
    "example",
    "could",
    "connect",
    "web",
    "3",
    "metamask",
    "okay",
    "would",
    "automatically",
    "get",
    "connected",
    "metamask",
    "could",
    "call",
    "fund",
    "withdraw",
    "like",
    "remix",
    "want",
    "give",
    "shot",
    "go",
    "right",
    "back",
    "code",
    "editor",
    "successfully",
    "verifying",
    "one",
    "smart",
    "contracts",
    "ether",
    "scan",
    "quick",
    "note",
    "sometimes",
    "verification",
    "process",
    "little",
    "bit",
    "touchy",
    "version",
    "solidity",
    "currently",
    "bug",
    "makes",
    "verifying",
    "little",
    "bit",
    "tricky",
    "worked",
    "discouraged",
    "gets",
    "little",
    "bit",
    "funky",
    "great",
    "written",
    "deploy",
    "script",
    "deploying",
    "directly",
    "rink",
    "however",
    "know",
    "always",
    "going",
    "want",
    "able",
    "deploy",
    "local",
    "blockchains",
    "brownie",
    "development",
    "chain",
    "test",
    "lot",
    "quicker",
    "yes",
    "write",
    "tests",
    "little",
    "bit",
    "issue",
    "first",
    "issue",
    "funme",
    "contract",
    "currently",
    "address",
    "hardcoded",
    "work",
    "rink",
    "chain",
    "fact",
    "way",
    "written",
    "right",
    "going",
    "hard",
    "work",
    "chain",
    "ring",
    "second",
    "bit",
    "price",
    "feed",
    "contracts",
    "exist",
    "local",
    "ganache",
    "chain",
    "ganach",
    "chain",
    "brownie",
    "spins",
    "two",
    "ways",
    "get",
    "around",
    "called",
    "forking",
    "work",
    "forked",
    "simulated",
    "chain",
    "deploy",
    "mock",
    "deploy",
    "fake",
    "price",
    "feed",
    "contract",
    "ganach",
    "local",
    "development",
    "chain",
    "deploying",
    "mocks",
    "common",
    "design",
    "pattern",
    "used",
    "across",
    "software",
    "engineering",
    "industries",
    "applies",
    "deploying",
    "fake",
    "version",
    "something",
    "interacting",
    "real",
    "right",
    "run",
    "brownie",
    "run",
    "scripts",
    "deployed",
    "ipi",
    "set",
    "network",
    "flag",
    "going",
    "actually",
    "default",
    "spinning",
    "ganach",
    "chain",
    "even",
    "going",
    "try",
    "verify",
    "going",
    "run",
    "issue",
    "ca",
    "verify",
    "ganach",
    "chain",
    "couple",
    "issues",
    "need",
    "address",
    "order",
    "us",
    "get",
    "work",
    "ganach",
    "chain",
    "similar",
    "get",
    "account",
    "function",
    "helpful",
    "scripts",
    "little",
    "bit",
    "checking",
    "say",
    "hey",
    "development",
    "network",
    "use",
    "development",
    "accounts",
    "version",
    "otherwise",
    "pull",
    "config",
    "exact",
    "mentality",
    "working",
    "mocks",
    "first",
    "thing",
    "need",
    "need",
    "parameter",
    "tize",
    "fundme",
    "solidity",
    "smart",
    "contract",
    "hardcoded",
    "anymore",
    "right",
    "deploy",
    "contract",
    "tell",
    "price",
    "feed",
    "address",
    "use",
    "right",
    "call",
    "deploy",
    "function",
    "instead",
    "hardcoded",
    "add",
    "parameter",
    "constructor",
    "say",
    "address",
    "price",
    "feed",
    "input",
    "parameter",
    "whatever",
    "input",
    "parameter",
    "use",
    "going",
    "global",
    "price",
    "feed",
    "address",
    "instead",
    "us",
    "creating",
    "aggregator",
    "v3",
    "interface",
    "contracts",
    "right",
    "functions",
    "going",
    "create",
    "global",
    "one",
    "say",
    "aggregator",
    "v3",
    "interface",
    "public",
    "price",
    "feed",
    "right",
    "constructor",
    "right",
    "create",
    "set",
    "price",
    "feed",
    "equals",
    "aggregator",
    "v3",
    "interface",
    "price",
    "feed",
    "delete",
    "part",
    "see",
    "exact",
    "thing",
    "aggregator",
    "v3",
    "interface",
    "price",
    "feed",
    "equals",
    "aggregator",
    "v3",
    "interface",
    "address",
    "going",
    "exact",
    "thing",
    "constructor",
    "meaning",
    "right",
    "deploy",
    "contract",
    "delete",
    "delete",
    "well",
    "get",
    "price",
    "function",
    "even",
    "verify",
    "brownie",
    "compile",
    "great",
    "looks",
    "like",
    "compiling",
    "perfectly",
    "deploy",
    "function",
    "going",
    "need",
    "look",
    "little",
    "bit",
    "different",
    "going",
    "need",
    "pass",
    "price",
    "feed",
    "address",
    "fundme",
    "contract",
    "paste",
    "address",
    "account",
    "variable",
    "actually",
    "pass",
    "variables",
    "constructors",
    "anything",
    "inside",
    "constructor",
    "function",
    "pass",
    "brownie",
    "deploy",
    "script",
    "great",
    "could",
    "100",
    "always",
    "pass",
    "rink",
    "b",
    "address",
    "really",
    "going",
    "solve",
    "problem",
    "obviously",
    "right",
    "problem",
    "problem",
    "right",
    "always",
    "rink",
    "b",
    "address",
    "need",
    "say",
    "persistent",
    "network",
    "like",
    "rink",
    "b",
    "use",
    "associated",
    "address",
    "otherwise",
    "deploy",
    "mock",
    "know",
    "talking",
    "mock",
    "get",
    "second",
    "let",
    "first",
    "set",
    "one",
    "check",
    "network",
    "importing",
    "brownie",
    "network",
    "bit",
    "say",
    "network",
    "show",
    "active",
    "equal",
    "development",
    "say",
    "price",
    "feed",
    "address",
    "equal",
    "equal",
    "address",
    "pass",
    "price",
    "feed",
    "address",
    "still",
    "solve",
    "issue",
    "always",
    "passing",
    "rink",
    "hardcoded",
    "piece",
    "want",
    "parameter",
    "tize",
    "get",
    "addresses",
    "instead",
    "browning",
    "config",
    "add",
    "different",
    "addresses",
    "different",
    "networks",
    "right",
    "underneath",
    "env",
    "add",
    "new",
    "section",
    "called",
    "networks",
    "one",
    "called",
    "rink",
    "b",
    "say",
    "f",
    "usd",
    "price",
    "feed",
    "address",
    "going",
    "price",
    "feed",
    "address",
    "deploy",
    "script",
    "say",
    "development",
    "network",
    "let",
    "grab",
    "address",
    "networks",
    "section",
    "way",
    "define",
    "different",
    "addresses",
    "price",
    "feed",
    "across",
    "different",
    "networks",
    "add",
    "could",
    "add",
    "coven",
    "section",
    "could",
    "add",
    "main",
    "net",
    "section",
    "section",
    "networks",
    "want",
    "work",
    "need",
    "add",
    "add",
    "flags",
    "contracts",
    "back",
    "deploy",
    "say",
    "price",
    "feed",
    "address",
    "going",
    "get",
    "pulled",
    "config",
    "instead",
    "say",
    "config",
    "means",
    "going",
    "import",
    "config",
    "brownie",
    "say",
    "config",
    "networks",
    "based",
    "network",
    "show",
    "active",
    "use",
    "fusd",
    "price",
    "feed",
    "flag",
    "perfect",
    "little",
    "statement",
    "going",
    "say",
    "hey",
    "development",
    "network",
    "pull",
    "address",
    "right",
    "config",
    "make",
    "deploy",
    "really",
    "anywhere",
    "want",
    "deploy",
    "development",
    "chain",
    "say",
    "else",
    "development",
    "chain",
    "going",
    "deploy",
    "mock",
    "right",
    "live",
    "networks",
    "working",
    "version",
    "price",
    "feed",
    "contract",
    "price",
    "feed",
    "address",
    "development",
    "chain",
    "obviously",
    "wo",
    "one",
    "going",
    "start",
    "blank",
    "deploy",
    "version",
    "price",
    "feed",
    "contract",
    "known",
    "mocking",
    "interact",
    "accordingly",
    "order",
    "us",
    "deploy",
    "price",
    "feed",
    "contract",
    "obviously",
    "going",
    "need",
    "solidity",
    "code",
    "associated",
    "contract",
    "section",
    "create",
    "new",
    "folder",
    "called",
    "test",
    "create",
    "test",
    "test",
    "folder",
    "contracts",
    "folder",
    "typically",
    "mock",
    "contracts",
    "going",
    "go",
    "create",
    "new",
    "file",
    "called",
    "mock",
    "v3",
    "aggregator",
    "doou",
    "add",
    "code",
    "us",
    "deploy",
    "price",
    "feed",
    "going",
    "show",
    "another",
    "repository",
    "pretty",
    "soon",
    "called",
    "chain",
    "link",
    "mix",
    "going",
    "work",
    "looking",
    "one",
    "mocks",
    "highly",
    "recommend",
    "pulling",
    "chain",
    "link",
    "mix",
    "repository",
    "grab",
    "going",
    "contracts",
    "test",
    "grabbing",
    "v3",
    "agregator",
    "soul",
    "copy",
    "whole",
    "code",
    "paste",
    "mock",
    "v3",
    "aggregator",
    "doso",
    "exact",
    "functions",
    "real",
    "price",
    "feed",
    "contract",
    "decimals",
    "latest",
    "answer",
    "going",
    "two",
    "ones",
    "use",
    "also",
    "see",
    "constructor",
    "variables",
    "takes",
    "whenever",
    "contract",
    "deployed",
    "takes",
    "decimals",
    "ial",
    "answer",
    "decimals",
    "course",
    "going",
    "many",
    "decimals",
    "contract",
    "initial",
    "answer",
    "going",
    "starting",
    "value",
    "like",
    "2000",
    "example",
    "contract",
    "test",
    "section",
    "course",
    "run",
    "brownie",
    "compile",
    "brownie",
    "go",
    "ahead",
    "compile",
    "mock",
    "v3",
    "aggregator",
    "well",
    "remember",
    "brownie",
    "compiles",
    "contract",
    "contracts",
    "folder",
    "let",
    "go",
    "back",
    "deploy",
    "script",
    "mock",
    "v3",
    "aggregator",
    "little",
    "l",
    "saying",
    "okay",
    "well",
    "development",
    "chain",
    "let",
    "something",
    "let",
    "deploy",
    "mocks",
    "let",
    "little",
    "print",
    "statement",
    "little",
    "printf",
    "saying",
    "active",
    "network",
    "network",
    "show",
    "active",
    "another",
    "print",
    "statement",
    "print",
    "f",
    "saying",
    "deploying",
    "mock",
    "dot",
    "dot",
    "dot",
    "little",
    "closing",
    "need",
    "print",
    "f",
    "regular",
    "print",
    "way",
    "import",
    "funme",
    "import",
    "mock",
    "v3",
    "aggregator",
    "deploy",
    "contract",
    "way",
    "deploy",
    "contracts",
    "mock",
    "v3",
    "aggregator",
    "deploy",
    "learned",
    "add",
    "parameters",
    "constructor",
    "takes",
    "going",
    "decimals",
    "initial",
    "answer",
    "maybe",
    "set",
    "decimals",
    "18",
    "maybe",
    "want",
    "set",
    "initial",
    "answer",
    "2",
    "1",
    "2",
    "3",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "comma",
    "course",
    "since",
    "deploying",
    "got",
    "use",
    "account",
    "another",
    "print",
    "saying",
    "mock",
    "deployed",
    "course",
    "going",
    "need",
    "get",
    "mock",
    "v3",
    "aggregator",
    "address",
    "mock",
    "aggregator",
    "equals",
    "set",
    "price",
    "feed",
    "address",
    "equal",
    "mock",
    "aggregator",
    "address",
    "development",
    "live",
    "network",
    "agnostic",
    "deploy",
    "live",
    "network",
    "use",
    "address",
    "config",
    "otherwise",
    "use",
    "fake",
    "aggregator",
    "contract",
    "deployed",
    "let",
    "go",
    "ahead",
    "even",
    "try",
    "development",
    "network",
    "grounding",
    "run",
    "scripts",
    "deploy",
    "py",
    "need",
    "network",
    "flag",
    "hit",
    "enter",
    "spin",
    "ganach",
    "even",
    "deploy",
    "mock",
    "aggregator",
    "contract",
    "first",
    "fundme",
    "part",
    "course",
    "running",
    "issue",
    "trying",
    "verify",
    "contract",
    "chain",
    "exist",
    "ether",
    "scan",
    "know",
    "local",
    "ganach",
    "chain",
    "fix",
    "instead",
    "publish",
    "source",
    "equals",
    "true",
    "publish",
    "source",
    "based",
    "chain",
    "go",
    "back",
    "browning",
    "conf",
    "rink",
    "b",
    "say",
    "verify",
    "true",
    "development",
    "say",
    "verify",
    "false",
    "back",
    "deploy",
    "script",
    "say",
    "publish",
    "source",
    "going",
    "pulled",
    "config",
    "config",
    "networks",
    "network",
    "active",
    "get",
    "verify",
    "dot",
    "get",
    "verify",
    "make",
    "lives",
    "little",
    "bit",
    "easier",
    "forget",
    "add",
    "verify",
    "could",
    "still",
    "like",
    "verify",
    "run",
    "index",
    "errors",
    "forget",
    "actually",
    "put",
    "verify",
    "sometimes",
    "get",
    "lazy",
    "little",
    "bit",
    "nicer",
    "like",
    "run",
    "deploy",
    "ipy",
    "spin",
    "local",
    "ganache",
    "deploy",
    "mock",
    "price",
    "feed",
    "contract",
    "deploy",
    "fundme",
    "contract",
    "completes",
    "successfully",
    "awesome",
    "way",
    "p",
    "fundme",
    "contract",
    "uses",
    "price",
    "feed",
    "contract",
    "local",
    "development",
    "environment",
    "mock",
    "aka",
    "fake",
    "price",
    "feed",
    "contract",
    "awesome",
    "great",
    "deploy",
    "script",
    "starting",
    "look",
    "little",
    "big",
    "little",
    "clunky",
    "let",
    "actually",
    "clean",
    "make",
    "look",
    "lot",
    "nicer",
    "first",
    "thing",
    "want",
    "want",
    "fix",
    "big",
    "number",
    "looking",
    "right",
    "away",
    "exactly",
    "sure",
    "many",
    "zeros",
    "make",
    "look",
    "little",
    "bit",
    "nicer",
    "readable",
    "call",
    "friend",
    "web",
    "web3",
    "import",
    "web",
    "3",
    "web",
    "way",
    "2000",
    "comma",
    "ether",
    "function",
    "add",
    "18",
    "decimals",
    "much",
    "readable",
    "initial",
    "value",
    "going",
    "200000",
    "next",
    "bit",
    "always",
    "deploying",
    "mock",
    "v3",
    "aggregator",
    "already",
    "mock",
    "deployed",
    "whatever",
    "network",
    "working",
    "need",
    "two",
    "mocks",
    "right",
    "deploy",
    "mock",
    "little",
    "statement",
    "say",
    "length",
    "mock",
    "v3",
    "aggregator",
    "less",
    "equal",
    "zero",
    "deploy",
    "mock",
    "v3",
    "aggregator",
    "remember",
    "check",
    "length",
    "v3",
    "aggregator",
    "v3",
    "aggregator",
    "going",
    "list",
    "different",
    "v3",
    "aggregators",
    "deployed",
    "instead",
    "using",
    "mock",
    "aggregator",
    "address",
    "use",
    "mock",
    "v3",
    "aggregator",
    "minus",
    "one",
    "address",
    "saying",
    "okay",
    "great",
    "use",
    "recently",
    "deployed",
    "mock",
    "v3",
    "aggregator",
    "course",
    "longer",
    "need",
    "set",
    "variable",
    "looks",
    "little",
    "bit",
    "cleaner",
    "make",
    "little",
    "bit",
    "efficient",
    "deploying",
    "mox",
    "bit",
    "though",
    "going",
    "something",
    "deploying",
    "mox",
    "bit",
    "though",
    "going",
    "something",
    "actually",
    "going",
    "relatively",
    "frequently",
    "let",
    "even",
    "move",
    "print",
    "statement",
    "instead",
    "like",
    "put",
    "whole",
    "mock",
    "deploying",
    "bit",
    "function",
    "helpful",
    "scripts",
    "let",
    "open",
    "back",
    "helpful",
    "scripts",
    "new",
    "function",
    "called",
    "def",
    "deploy",
    "mox",
    "paste",
    "code",
    "course",
    "means",
    "helpful",
    "scripts",
    "going",
    "import",
    "mach",
    "v3",
    "aggregator",
    "also",
    "web",
    "3",
    "port",
    "web",
    "3",
    "instead",
    "account",
    "use",
    "get",
    "account",
    "function",
    "back",
    "deploy",
    "script",
    "delete",
    "whole",
    "part",
    "replace",
    "deploy",
    "mox",
    "import",
    "deploy",
    "mox",
    "helpful",
    "scripts",
    "also",
    "delete",
    "import",
    "let",
    "remove",
    "comments",
    "like",
    "starting",
    "look",
    "lot",
    "sophisticated",
    "great",
    "way",
    "deploy",
    "based",
    "live",
    "chain",
    "development",
    "chain",
    "one",
    "thing",
    "like",
    "everything",
    "parameterized",
    "like",
    "set",
    "static",
    "variables",
    "top",
    "helpful",
    "scripts",
    "set",
    "decimals",
    "equals",
    "18",
    "set",
    "starting",
    "price",
    "equals",
    "2000",
    "mock",
    "v3",
    "aor",
    "deploy",
    "des",
    "web",
    "starting",
    "price",
    "let",
    "say",
    "wanted",
    "deploy",
    "ganache",
    "instance",
    "well",
    "could",
    "could",
    "open",
    "ganache",
    "quick",
    "start",
    "quickly",
    "create",
    "gach",
    "blockchain",
    "script",
    "let",
    "go",
    "ahead",
    "run",
    "deploy",
    "script",
    "let",
    "see",
    "happens",
    "instead",
    "brownie",
    "spinning",
    "ganache",
    "says",
    "attached",
    "local",
    "rpc",
    "client",
    "listening",
    "address",
    "brownie",
    "smart",
    "enough",
    "detect",
    "running",
    "ganach",
    "instance",
    "automatically",
    "attach",
    "knowing",
    "going",
    "development",
    "environment",
    "go",
    "ganache",
    "see",
    "two",
    "transactions",
    "going",
    "contract",
    "creations",
    "going",
    "create",
    "price",
    "feed",
    "contract",
    "also",
    "fundme",
    "contract",
    "great",
    "great",
    "testing",
    "quickly",
    "locally",
    "issue",
    "development",
    "networks",
    "brownie",
    "keep",
    "track",
    "build",
    "folders",
    "go",
    "deployments",
    "saving",
    "stuff",
    "rink",
    "chain",
    "would",
    "need",
    "tell",
    "brownie",
    "hey",
    "another",
    "network",
    "want",
    "work",
    "want",
    "remember",
    "deployments",
    "chain",
    "add",
    "new",
    "network",
    "brownie",
    "network",
    "list",
    "remember",
    "brownie",
    "networks",
    "list",
    "different",
    "pieces",
    "ones",
    "brownie",
    "going",
    "remember",
    "going",
    "ones",
    "brownie",
    "remembers",
    "let",
    "say",
    "want",
    "deploy",
    "ganach",
    "chain",
    "want",
    "brownie",
    "remember",
    "deployments",
    "well",
    "add",
    "network",
    "going",
    "add",
    "blockchain",
    "want",
    "evm",
    "blockchain",
    "like",
    "avalanche",
    "like",
    "polygon",
    "etc",
    "add",
    "new",
    "network",
    "brownie",
    "networks",
    "run",
    "brownie",
    "networks",
    "add",
    "choose",
    "development",
    "ethereum",
    "going",
    "choose",
    "ethereum",
    "want",
    "persistent",
    "network",
    "ethereum",
    "give",
    "name",
    "going",
    "call",
    "gach",
    "local",
    "need",
    "give",
    "host",
    "aka",
    "http",
    "address",
    "know",
    "right",
    "g",
    "make",
    "lowercase",
    "chain",
    "id",
    "know",
    "1337",
    "enter",
    "brownie",
    "network",
    "list",
    "see",
    "new",
    "blockchain",
    "called",
    "ganach",
    "local",
    "going",
    "reach",
    "ganos",
    "ui",
    "ganach",
    "command",
    "line",
    "depending",
    "running",
    "note",
    "going",
    "deploying",
    "ganach",
    "ui",
    "ganach",
    "cli",
    "lot",
    "rest",
    "lesson",
    "please",
    "keep",
    "ganache",
    "instance",
    "running",
    "run",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "pi",
    "network",
    "ganach",
    "local",
    "let",
    "see",
    "happens",
    "course",
    "run",
    "first",
    "issue",
    "ganach",
    "local",
    "development",
    "going",
    "go",
    "ahead",
    "try",
    "pull",
    "config",
    "file",
    "want",
    "want",
    "actually",
    "deploy",
    "mock",
    "local",
    "ganach",
    "mock",
    "deployed",
    "extend",
    "definition",
    "development",
    "environment",
    "helpful",
    "sc",
    "scripts",
    "add",
    "flag",
    "say",
    "local",
    "blockchain",
    "environments",
    "equals",
    "list",
    "say",
    "development",
    "course",
    "one",
    "also",
    "say",
    "gach",
    "local",
    "another",
    "import",
    "local",
    "blockchain",
    "environments",
    "deploy",
    "top",
    "scripts",
    "helpful",
    "scripts",
    "comma",
    "paste",
    "save",
    "gets",
    "reformatted",
    "really",
    "nice",
    "instead",
    "say",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "go",
    "ahead",
    "pull",
    "config",
    "saying",
    "saying",
    "whatever",
    "network",
    "development",
    "ganach",
    "local",
    "go",
    "ahead",
    "use",
    "config",
    "one",
    "two",
    "going",
    "go",
    "ahead",
    "deploy",
    "mock",
    "let",
    "try",
    "rowny",
    "run",
    "scripts",
    "deploy",
    "py",
    "network",
    "g",
    "local",
    "run",
    "different",
    "issue",
    "saying",
    "hey",
    "actually",
    "enough",
    "gas",
    "well",
    "let",
    "look",
    "get",
    "account",
    "function",
    "aha",
    "one",
    "also",
    "looking",
    "directly",
    "development",
    "chain",
    "one",
    "say",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "return",
    "accounts",
    "zero",
    "saying",
    "network",
    "working",
    "development",
    "ar",
    "ganach",
    "local",
    "return",
    "accounts",
    "zero",
    "let",
    "try",
    "okay",
    "getting",
    "closer",
    "running",
    "key",
    "error",
    "ganach",
    "local",
    "well",
    "know",
    "fix",
    "well",
    "config",
    "add",
    "new",
    "network",
    "say",
    "ganach",
    "local",
    "set",
    "verify",
    "false",
    "let",
    "try",
    "one",
    "time",
    "perfect",
    "mocks",
    "deployed",
    "funme",
    "deployed",
    "look",
    "look",
    "build",
    "folder",
    "deployments",
    "new",
    "chain",
    "id",
    "1337",
    "saving",
    "deployments",
    "looks",
    "like",
    "ganach",
    "chain",
    "actually",
    "saved",
    "great",
    "important",
    "thing",
    "note",
    "close",
    "delete",
    "ganache",
    "chain",
    "contracts",
    "lost",
    "wo",
    "able",
    "interact",
    "account",
    "always",
    "delete",
    "1337",
    "delete",
    "entries",
    "1337",
    "map",
    "json",
    "find",
    "deleting",
    "whole",
    "build",
    "folder",
    "could",
    "delete",
    "whole",
    "build",
    "folder",
    "deployed",
    "let",
    "actually",
    "write",
    "script",
    "interact",
    "let",
    "create",
    "new",
    "file",
    "call",
    "fund",
    "withdraw",
    "pi",
    "script",
    "use",
    "fund",
    "withdraw",
    "let",
    "create",
    "function",
    "called",
    "fund",
    "say",
    "fundme",
    "equals",
    "recently",
    "deployed",
    "fundme",
    "going",
    "browning",
    "import",
    "fundme",
    "going",
    "get",
    "account",
    "since",
    "going",
    "going",
    "making",
    "state",
    "changes",
    "equal",
    "get",
    "account",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "let",
    "get",
    "entrance",
    "fee",
    "figure",
    "much",
    "want",
    "fund",
    "ah",
    "actually",
    "sorry",
    "uh",
    "since",
    "going",
    "resemble",
    "fusd",
    "price",
    "feed",
    "actually",
    "eight",
    "decimals",
    "two",
    "1",
    "2",
    "3",
    "1",
    "2",
    "3",
    "four",
    "5",
    "six",
    "eight",
    "reason",
    "want",
    "like",
    "get",
    "price",
    "function",
    "know",
    "eight",
    "decimal",
    "places",
    "multiplying",
    "additional",
    "10",
    "want",
    "resemble",
    "well",
    "eight",
    "decimals",
    "starting",
    "price",
    "eight",
    "decimals",
    "mach",
    "v3",
    "aggregator",
    "going",
    "use",
    "exact",
    "values",
    "going",
    "web",
    "3",
    "converting",
    "going",
    "make",
    "exactly",
    "hardcoded",
    "values",
    "going",
    "want",
    "get",
    "entrance",
    "fee",
    "gone",
    "ahead",
    "actually",
    "added",
    "function",
    "called",
    "get",
    "entrance",
    "fee",
    "contract",
    "make",
    "lives",
    "little",
    "bit",
    "easier",
    "going",
    "recommend",
    "take",
    "look",
    "type",
    "copy",
    "paste",
    "github",
    "repository",
    "use",
    "get",
    "entrance",
    "fee",
    "whole",
    "bunch",
    "math",
    "back",
    "fund",
    "withdraw",
    "entrance",
    "fee",
    "equals",
    "fund",
    "entrance",
    "fee",
    "excuse",
    "get",
    "entrance",
    "fee",
    "even",
    "print",
    "entrance",
    "fee",
    "see",
    "right",
    "first",
    "going",
    "want",
    "run",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "network",
    "gach",
    "local",
    "changed",
    "fundme",
    "doou",
    "right",
    "great",
    "run",
    "brownie",
    "run",
    "scripts",
    "fund",
    "withdraw",
    "network",
    "mar",
    "local",
    "whoops",
    "need",
    "main",
    "function",
    "def",
    "main",
    "f",
    "let",
    "rerun",
    "great",
    "see",
    "entrance",
    "fee",
    "little",
    "print",
    "statement",
    "print",
    "f",
    "saying",
    "current",
    "entry",
    "fee",
    "entrance",
    "fee",
    "little",
    "print",
    "saying",
    "funding",
    "call",
    "fundme",
    "fund",
    "course",
    "going",
    "account",
    "also",
    "going",
    "send",
    "value",
    "entrance",
    "fee",
    "transaction",
    "data",
    "want",
    "send",
    "transactions",
    "function",
    "calls",
    "add",
    "little",
    "bracket",
    "piece",
    "let",
    "hit",
    "let",
    "browny",
    "run",
    "scripts",
    "fun",
    "withdraw",
    "great",
    "looks",
    "like",
    "going",
    "perfectly",
    "awesome",
    "let",
    "also",
    "withdraw",
    "function",
    "owner",
    "withdraw",
    "say",
    "fundme",
    "equal",
    "als",
    "fundme",
    "one",
    "account",
    "equals",
    "get",
    "account",
    "call",
    "fundme",
    "withdraw",
    "account",
    "right",
    "fund",
    "called",
    "withdraw",
    "called",
    "main",
    "function",
    "let",
    "go",
    "ahead",
    "try",
    "script",
    "findun",
    "withdraw",
    "network",
    "gach",
    "local",
    "funding",
    "script",
    "funding",
    "transaction",
    "going",
    "withdraw",
    "transaction",
    "perfect",
    "looks",
    "like",
    "approximate",
    "functionality",
    "works",
    "great",
    "script",
    "could",
    "run",
    "main",
    "network",
    "like",
    "still",
    "much",
    "better",
    "us",
    "run",
    "going",
    "move",
    "actually",
    "writing",
    "tests",
    "tests",
    "going",
    "want",
    "quit",
    "gachui",
    "let",
    "go",
    "ahead",
    "write",
    "tests",
    "create",
    "new",
    "file",
    "called",
    "test",
    "fundme",
    "pi",
    "quickly",
    "speed",
    "test",
    "going",
    "learn",
    "much",
    "new",
    "keep",
    "mind",
    "run",
    "test",
    "going",
    "want",
    "able",
    "work",
    "independent",
    "network",
    "working",
    "let",
    "keep",
    "mind",
    "let",
    "test",
    "see",
    "fund",
    "withdraw",
    "def",
    "test",
    "fund",
    "withdraw",
    "basically",
    "exactly",
    "done",
    "count",
    "equals",
    "get",
    "account",
    "course",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "want",
    "deploy",
    "fundme",
    "even",
    "use",
    "deploy",
    "fundme",
    "script",
    "deploy",
    "scripts",
    "dooy",
    "import",
    "ploy",
    "fundme",
    "deploy",
    "fundme",
    "bottom",
    "say",
    "return",
    "fundme",
    "test",
    "fundme",
    "contract",
    "work",
    "say",
    "fundme",
    "equals",
    "emp",
    "ploy",
    "fundme",
    "grab",
    "entrance",
    "fee",
    "equal",
    "fund",
    "entrance",
    "fee",
    "let",
    "go",
    "ahead",
    "fund",
    "transaction",
    "equals",
    "fundme",
    "fund",
    "call",
    "count",
    "value",
    "entrance",
    "fee",
    "tx",
    "weight",
    "one",
    "assert",
    "assert",
    "fundme",
    "address",
    "amount",
    "funded",
    "going",
    "account",
    "address",
    "entrance",
    "fee",
    "want",
    "check",
    "address",
    "amount",
    "funded",
    "adequately",
    "recorded",
    "transaction",
    "two",
    "fundme",
    "withdraw",
    "count",
    "tx2",
    "weight",
    "one",
    "assert",
    "fundme",
    "address",
    "amount",
    "funded",
    "account",
    "address",
    "equals",
    "z",
    "let",
    "go",
    "ahead",
    "run",
    "test",
    "brownie",
    "test",
    "perfect",
    "looks",
    "like",
    "well",
    "may",
    "wondering",
    "sometimes",
    "use",
    "dashd",
    "network",
    "flag",
    "sometimes",
    "network",
    "section",
    "brownie",
    "automatically",
    "picks",
    "default",
    "network",
    "use",
    "default",
    "always",
    "set",
    "development",
    "however",
    "could",
    "set",
    "anything",
    "wanted",
    "could",
    "set",
    "default",
    "ganach",
    "local",
    "could",
    "set",
    "rink",
    "b",
    "whatever",
    "want",
    "whatever",
    "set",
    "default",
    "brownie",
    "config",
    "network",
    "defaulted",
    "right",
    "run",
    "brownie",
    "test",
    "equivalent",
    "running",
    "browning",
    "test",
    "network",
    "development",
    "even",
    "go",
    "ahead",
    "run",
    "could",
    "also",
    "run",
    "test",
    "rinky",
    "second",
    "often",
    "times",
    "want",
    "test",
    "functionality",
    "rink",
    "live",
    "networks",
    "going",
    "take",
    "long",
    "time",
    "run",
    "sometimes",
    "want",
    "run",
    "tests",
    "local",
    "chains",
    "well",
    "use",
    "py",
    "test",
    "skip",
    "functionality",
    "work",
    "py",
    "test",
    "going",
    "first",
    "need",
    "install",
    "go",
    "ahead",
    "run",
    "pip",
    "install",
    "p",
    "test",
    "demonstrate",
    "let",
    "create",
    "test",
    "makes",
    "sure",
    "owner",
    "withdraw",
    "nobody",
    "else",
    "call",
    "def",
    "test",
    "owner",
    "withraw",
    "skip",
    "test",
    "local",
    "network",
    "first",
    "check",
    "network",
    "say",
    "network",
    "show",
    "active",
    "yep",
    "probably",
    "would",
    "guessed",
    "going",
    "pull",
    "local",
    "blockchain",
    "environments",
    "helpful",
    "scripts",
    "comma",
    "local",
    "blockchain",
    "environments",
    "going",
    "say",
    "network",
    "show",
    "active",
    "list",
    "local",
    "blockchain",
    "environments",
    "going",
    "pest",
    "skip",
    "say",
    "local",
    "testing",
    "course",
    "going",
    "import",
    "network",
    "also",
    "going",
    "import",
    "p",
    "test",
    "try",
    "run",
    "test",
    "brownie",
    "k",
    "network",
    "rinke",
    "skip",
    "perfect",
    "see",
    "meaning",
    "meaning",
    "skipped",
    "function",
    "run",
    "network",
    "development",
    "go",
    "ahead",
    "run",
    "pass",
    "nothing",
    "happens",
    "function",
    "perfect",
    "let",
    "keep",
    "going",
    "say",
    "account",
    "equals",
    "get",
    "account",
    "say",
    "fundme",
    "equals",
    "deploy",
    "fundme",
    "let",
    "get",
    "different",
    "account",
    "try",
    "call",
    "withdraw",
    "function",
    "say",
    "bad",
    "actor",
    "equal",
    "give",
    "us",
    "blank",
    "random",
    "account",
    "uh",
    "import",
    "accounts",
    "b",
    "want",
    "test",
    "see",
    "calling",
    "withdraw",
    "function",
    "actually",
    "reverts",
    "causes",
    "exception",
    "try",
    "fundme",
    "withdraw",
    "music",
    "bad",
    "actor",
    "right",
    "think",
    "happen",
    "well",
    "well",
    "know",
    "fundme",
    "doso",
    "withdraw",
    "function",
    "owner",
    "modifier",
    "technically",
    "owner",
    "able",
    "call",
    "function",
    "happens",
    "actually",
    "even",
    "need",
    "account",
    "get",
    "account",
    "bit",
    "let",
    "go",
    "delete",
    "happens",
    "somebody",
    "else",
    "tries",
    "call",
    "withdraw",
    "function",
    "well",
    "let",
    "go",
    "ahead",
    "test",
    "gring",
    "k",
    "test",
    "owner",
    "withdraw",
    "h",
    "see",
    "getting",
    "error",
    "wrting",
    "browning",
    "exceptions",
    "virtual",
    "machine",
    "error",
    "revert",
    "fundme",
    "withdraw",
    "well",
    "want",
    "happen",
    "expecting",
    "happen",
    "test",
    "want",
    "happen",
    "well",
    "need",
    "tell",
    "test",
    "want",
    "happen",
    "first",
    "going",
    "import",
    "brownie",
    "exceptions",
    "package",
    "way",
    "tell",
    "test",
    "exactly",
    "exception",
    "expecting",
    "see",
    "say",
    "pi",
    "test",
    "raises",
    "exceptions",
    "virtual",
    "machine",
    "error",
    "fundme",
    "withdraw",
    "actually",
    "copy",
    "line",
    "telling",
    "test",
    "reverts",
    "virtual",
    "machine",
    "error",
    "good",
    "saying",
    "want",
    "revert",
    "try",
    "call",
    "line",
    "delete",
    "line",
    "hit",
    "try",
    "run",
    "see",
    "passes",
    "exactly",
    "expecting",
    "awesome",
    "right",
    "learned",
    "lot",
    "fantastic",
    "tools",
    "working",
    "brownie",
    "last",
    "version",
    "testing",
    "want",
    "show",
    "use",
    "mainnet",
    "forking",
    "mainnet",
    "forking",
    "incredibly",
    "powerful",
    "working",
    "smart",
    "contracts",
    "mainnet",
    "want",
    "test",
    "locally",
    "let",
    "talk",
    "forking",
    "minute",
    "left",
    "blockchain",
    "right",
    "example",
    "blockchain",
    "going",
    "like",
    "test",
    "net",
    "rink",
    "coulde",
    "something",
    "like",
    "mainnet",
    "right",
    "going",
    "blockchain",
    "actually",
    "deploy",
    "whole",
    "bunch",
    "blocks",
    "right",
    "huge",
    "chain",
    "actually",
    "work",
    "information",
    "public",
    "information",
    "right",
    "block",
    "going",
    "like",
    "transaction",
    "transaction",
    "transaction",
    "going",
    "know",
    "one",
    "blocks",
    "going",
    "whole",
    "bunch",
    "transactions",
    "information",
    "addition",
    "transactions",
    "going",
    "price",
    "feed",
    "contracts",
    "contracts",
    "know",
    "etc",
    "going",
    "different",
    "contracts",
    "hypothetically",
    "already",
    "able",
    "basically",
    "copy",
    "whole",
    "blockchain",
    "simulations",
    "exactly",
    "forking",
    "forked",
    "blockchain",
    "literally",
    "takes",
    "copy",
    "existing",
    "blockchain",
    "left",
    "brings",
    "local",
    "computer",
    "us",
    "work",
    "actually",
    "control",
    "blockchain",
    "since",
    "going",
    "run",
    "local",
    "computer",
    "similar",
    "ganach",
    "interactions",
    "local",
    "blockchain",
    "going",
    "affect",
    "real",
    "blockchain",
    "local",
    "chain",
    "right",
    "simulated",
    "blockchain",
    "simulated",
    "go",
    "ahead",
    "interact",
    "price",
    "feeds",
    "interact",
    "interact",
    "different",
    "contracts",
    "already",
    "going",
    "chain",
    "meain",
    "part",
    "brownie",
    "also",
    "pulls",
    "infura",
    "way",
    "works",
    "rink",
    "b",
    "coen",
    "everything",
    "else",
    "start",
    "interact",
    "mainnet",
    "fork",
    "contracts",
    "exact",
    "way",
    "therefore",
    "take",
    "whole",
    "rink",
    "section",
    "copy",
    "paste",
    "change",
    "fusd",
    "price",
    "feed",
    "address",
    "main",
    "net",
    "address",
    "go",
    "docs",
    "chain",
    "link",
    "ethereum",
    "price",
    "feeds",
    "get",
    "fusd",
    "copy",
    "paste",
    "change",
    "mainnet",
    "fork",
    "since",
    "going",
    "fork",
    "course",
    "verify",
    "going",
    "false",
    "try",
    "run",
    "one",
    "scripts",
    "like",
    "brownie",
    "runs",
    "scripts",
    "deoy",
    "network",
    "main",
    "fork",
    "see",
    "actually",
    "run",
    "issue",
    "saying",
    "insufficient",
    "funds",
    "transfer",
    "deploy",
    "script",
    "get",
    "account",
    "helpful",
    "scripts",
    "right",
    "using",
    "accounts",
    "config",
    "key",
    "yes",
    "going",
    "account",
    "right",
    "zero",
    "money",
    "main",
    "net",
    "brownie",
    "right",
    "away",
    "going",
    "say",
    "hey",
    "money",
    "mainnet",
    "deal",
    "need",
    "tell",
    "brownie",
    "working",
    "main",
    "net",
    "fork",
    "create",
    "us",
    "fake",
    "account",
    "100",
    "eth",
    "however",
    "want",
    "deploy",
    "mock",
    "price",
    "feed",
    "contracts",
    "already",
    "exist",
    "want",
    "deploy",
    "mock",
    "want",
    "get",
    "us",
    "account",
    "typically",
    "like",
    "add",
    "another",
    "variable",
    "call",
    "forked",
    "local",
    "environments",
    "add",
    "maintenance",
    "fork",
    "use",
    "part",
    "statements",
    "say",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "network",
    "show",
    "active",
    "fork",
    "local",
    "environments",
    "going",
    "go",
    "ahead",
    "return",
    "count",
    "zero",
    "however",
    "deploy",
    "piy",
    "mainnet",
    "fork",
    "going",
    "local",
    "blockchain",
    "environment",
    "get",
    "price",
    "feed",
    "config",
    "run",
    "mainnet",
    "fork",
    "run",
    "see",
    "still",
    "get",
    "error",
    "get",
    "list",
    "index",
    "range",
    "brownie",
    "forking",
    "mechanism",
    "actually",
    "come",
    "accounts",
    "however",
    "issues",
    "normally",
    "like",
    "like",
    "create",
    "custom",
    "mained",
    "fork",
    "right",
    "brownie",
    "way",
    "create",
    "development",
    "custom",
    "network",
    "using",
    "brownie",
    "networks",
    "ad",
    "key",
    "brownie",
    "networks",
    "add",
    "make",
    "development",
    "network",
    "instead",
    "persistent",
    "network",
    "call",
    "main",
    "net",
    "fork",
    "dev",
    "set",
    "ganach",
    "cli",
    "say",
    "command",
    "run",
    "fork",
    "going",
    "ganach",
    "c",
    "host",
    "going",
    "always",
    "http",
    "colon",
    "fork",
    "going",
    "equal",
    "put",
    "https",
    "main",
    "net",
    "inf",
    "iv3",
    "slash",
    "web",
    "3",
    "inf",
    "fura",
    "project",
    "object",
    "id",
    "hit",
    "enter",
    "quite",
    "yet",
    "going",
    "explain",
    "couple",
    "things",
    "single",
    "quote",
    "means",
    "run",
    "ran",
    "without",
    "single",
    "quote",
    "environment",
    "variable",
    "get",
    "actualized",
    "always",
    "use",
    "whatever",
    "current",
    "environment",
    "variable",
    "want",
    "little",
    "little",
    "semicolon",
    "would",
    "accounts",
    "equal",
    "10",
    "tells",
    "brownie",
    "us",
    "set",
    "10",
    "fake",
    "accounts",
    "us",
    "give",
    "pneumonic",
    "brownie",
    "say",
    "great",
    "make",
    "accounts",
    "pneum",
    "monical",
    "browning",
    "port",
    "equals",
    "8545",
    "hit",
    "enter",
    "quite",
    "yet",
    "want",
    "explain",
    "one",
    "thing",
    "great",
    "working",
    "infero",
    "forking",
    "infero",
    "however",
    "note",
    "performance",
    "wise",
    "forking",
    "infura",
    "pretty",
    "much",
    "always",
    "given",
    "issue",
    "prefer",
    "actually",
    "fork",
    "application",
    "called",
    "alchemy",
    "fact",
    "like",
    "could",
    "set",
    "networks",
    "work",
    "alchemy",
    "uh",
    "modifying",
    "going",
    "go",
    "ahead",
    "sign",
    "going",
    "give",
    "alchemy",
    "url",
    "instead",
    "inferior",
    "url",
    "going",
    "go",
    "ahead",
    "create",
    "app",
    "going",
    "call",
    "fundme",
    "demo",
    "description",
    "also",
    "fundme",
    "demo",
    "development",
    "environment",
    "ethereum",
    "mainnet",
    "let",
    "create",
    "view",
    "details",
    "go",
    "view",
    "key",
    "copy",
    "http",
    "address",
    "move",
    "back",
    "forking",
    "delete",
    "everything",
    "next",
    "fork",
    "paste",
    "instead",
    "let",
    "go",
    "ahead",
    "hit",
    "enter",
    "know",
    "done",
    "right",
    "see",
    "something",
    "like",
    "mainnet",
    "fork",
    "dev",
    "added",
    "oftentimes",
    "example",
    "actually",
    "delete",
    "mainnet",
    "fork",
    "mainnet",
    "fork",
    "dev",
    "default",
    "mainnet",
    "fork",
    "us",
    "going",
    "go",
    "ahead",
    "mainnet",
    "fork",
    "dev",
    "config",
    "going",
    "change",
    "mainnet",
    "fork",
    "main",
    "fork",
    "dev",
    "since",
    "giving",
    "different",
    "name",
    "means",
    "helpful",
    "scripts",
    "going",
    "comma",
    "say",
    "mainnet",
    "fork",
    "dev",
    "right",
    "great",
    "get",
    "account",
    "return",
    "account",
    "zero",
    "mainnet",
    "fork",
    "dev",
    "actually",
    "work",
    "let",
    "run",
    "script",
    "ronnie",
    "run",
    "scripts",
    "deploy",
    "das",
    "network",
    "main",
    "net",
    "fork",
    "dev",
    "perfect",
    "running",
    "mainten",
    "fork",
    "dev",
    "running",
    "successfully",
    "also",
    "able",
    "test",
    "exactly",
    "way",
    "let",
    "look",
    "test",
    "real",
    "quick",
    "test",
    "fundme",
    "see",
    "okay",
    "cool",
    "going",
    "skipping",
    "one",
    "since",
    "main",
    "fork",
    "dev",
    "local",
    "blockchain",
    "networks",
    "work",
    "perfectly",
    "often",
    "times",
    "tests",
    "actually",
    "like",
    "little",
    "plus",
    "100",
    "something",
    "entrance",
    "fee",
    "case",
    "need",
    "like",
    "little",
    "bit",
    "money",
    "whatever",
    "reason",
    "run",
    "browning",
    "test",
    "network",
    "mainnet",
    "fork",
    "dev",
    "see",
    "indeed",
    "pass",
    "awesome",
    "fantastic",
    "incredibly",
    "powerful",
    "project",
    "going",
    "teach",
    "actually",
    "share",
    "code",
    "enter",
    "world",
    "open",
    "source",
    "decentralized",
    "code",
    "way",
    "world",
    "works",
    "sharing",
    "code",
    "sharing",
    "ideas",
    "collaborating",
    "together",
    "use",
    "called",
    "source",
    "git",
    "repositories",
    "github",
    "example",
    "one",
    "git",
    "repositories",
    "use",
    "share",
    "code",
    "one",
    "dominant",
    "ways",
    "smart",
    "contract",
    "engineers",
    "share",
    "ideas",
    "share",
    "code",
    "going",
    "learn",
    "add",
    "code",
    "github",
    "even",
    "share",
    "code",
    "show",
    "world",
    "built",
    "done",
    "going",
    "full",
    "endtoend",
    "git",
    "course",
    "however",
    "links",
    "course",
    "repository",
    "show",
    "work",
    "git",
    "work",
    "github",
    "work",
    "version",
    "control",
    "first",
    "thing",
    "going",
    "going",
    "come",
    "github",
    "going",
    "sign",
    "service",
    "email",
    "create",
    "password",
    "enter",
    "username",
    "go",
    "email",
    "verify",
    "continue",
    "going",
    "working",
    "collaborative",
    "coding",
    "going",
    "choose",
    "free",
    "edition",
    "perfect",
    "github",
    "github",
    "going",
    "create",
    "first",
    "repository",
    "either",
    "going",
    "hit",
    "plus",
    "button",
    "create",
    "repository",
    "let",
    "choose",
    "repository",
    "name",
    "give",
    "name",
    "main",
    "folder",
    "call",
    "brownie",
    "fundme",
    "give",
    "description",
    "smart",
    "contract",
    "application",
    "hit",
    "create",
    "repository",
    "going",
    "upload",
    "code",
    "share",
    "world",
    "back",
    "vs",
    "code",
    "going",
    "send",
    "folder",
    "repository",
    "first",
    "thing",
    "need",
    "installing",
    "git",
    "couple",
    "different",
    "ways",
    "install",
    "git",
    "depending",
    "version",
    "put",
    "link",
    "description",
    "course",
    "actually",
    "install",
    "git",
    "install",
    "able",
    "run",
    "get",
    "version",
    "let",
    "see",
    "get",
    "version",
    "going",
    "initialize",
    "repository",
    "get",
    "nit",
    "going",
    "choose",
    "branch",
    "name",
    "going",
    "call",
    "mate",
    "go",
    "ahead",
    "add",
    "username",
    "email",
    "get",
    "config",
    "user",
    "name",
    "vols",
    "video",
    "email",
    "going",
    "couple",
    "things",
    "push",
    "code",
    "github",
    "however",
    "remember",
    "want",
    "push",
    "ourv",
    "pieces",
    "couple",
    "things",
    "go",
    "ahead",
    "delete",
    "course",
    "also",
    "add",
    "ourg",
    "ignore",
    "file",
    "aemv",
    "help",
    "us",
    "accidentally",
    "push",
    "ourv",
    "file",
    "github",
    "choose",
    "files",
    "want",
    "push",
    "get",
    "add",
    "period",
    "get",
    "status",
    "show",
    "us",
    "different",
    "files",
    "staged",
    "push",
    "github",
    "look",
    "see",
    "git",
    "attributes",
    "g",
    "ignore",
    "ring",
    "config",
    "fundme",
    "contracts",
    "scripts",
    "file",
    "remove",
    "emv",
    "ignore",
    "ran",
    "get",
    "add",
    "get",
    "status",
    "see",
    "env",
    "want",
    "get",
    "remove",
    "cached",
    "add",
    "emv",
    "back",
    "ourg",
    "ignore",
    "file",
    "run",
    "get",
    "status",
    "run",
    "get",
    "add",
    "period",
    "get",
    "status",
    "great",
    "see",
    "dov",
    "good",
    "commit",
    "get",
    "commit",
    "minus",
    "first",
    "commit",
    "add",
    "folder",
    "github",
    "back",
    "github",
    "little",
    "line",
    "even",
    "tells",
    "us",
    "going",
    "copy",
    "line",
    "right",
    "get",
    "remote",
    "add",
    "origin",
    "https",
    "free",
    "code",
    "camp",
    "br",
    "fundme",
    "copy",
    "paste",
    "hit",
    "enter",
    "second",
    "line",
    "get",
    "push",
    "origin",
    "get",
    "push",
    "origin",
    "main",
    "get",
    "output",
    "like",
    "go",
    "back",
    "see",
    "files",
    "folders",
    "already",
    "added",
    "email",
    "password",
    "instead",
    "probably",
    "get",
    "github",
    "asking",
    "authorization",
    "go",
    "ahead",
    "put",
    "github",
    "username",
    "password",
    "username",
    "password",
    "work",
    "come",
    "github",
    "go",
    "settings",
    "scroll",
    "developer",
    "settings",
    "personal",
    "access",
    "tokens",
    "generate",
    "new",
    "token",
    "call",
    "f",
    "brownie",
    "want",
    "give",
    "least",
    "repo",
    "authorization",
    "hit",
    "generate",
    "token",
    "instead",
    "using",
    "password",
    "go",
    "ahead",
    "use",
    "github",
    "token",
    "amazing",
    "first",
    "github",
    "repository",
    "could",
    "even",
    "come",
    "add",
    "topics",
    "solidity",
    "chain",
    "link",
    "p",
    "python",
    "brownie",
    "etc",
    "know",
    "file",
    "incredibly",
    "exciting",
    "gna",
    "even",
    "encourage",
    "pop",
    "twitter",
    "share",
    "excitement",
    "made",
    "first",
    "first",
    "github",
    "pository",
    "thanks",
    "freecode",
    "camp",
    "solidity",
    "lang",
    "browny",
    "chain",
    "link",
    "want",
    "tag",
    "also",
    "tag",
    "patrick",
    "c",
    "pop",
    "repo",
    "go",
    "ahead",
    "tweet",
    "community",
    "absolutely",
    "loves",
    "hearing",
    "fantastic",
    "things",
    "people",
    "ecosystem",
    "sure",
    "reach",
    "fun",
    "engage",
    "know",
    "gone",
    "lot",
    "let",
    "talk",
    "little",
    "bit",
    "testing",
    "pieces",
    "big",
    "question",
    "might",
    "well",
    "okay",
    "learned",
    "ton",
    "stuff",
    "learned",
    "mainnet",
    "forking",
    "stuff",
    "ganache",
    "use",
    "brownie",
    "ganache",
    "use",
    "brownie",
    "main",
    "net",
    "fork",
    "test",
    "places",
    "stuff",
    "need",
    "run",
    "tests",
    "default",
    "every",
    "single",
    "one",
    "contracts",
    "follows",
    "always",
    "100",
    "need",
    "tests",
    "pass",
    "local",
    "brownie",
    "spun",
    "ganache",
    "instance",
    "priority",
    "number",
    "one",
    "get",
    "tests",
    "pass",
    "means",
    "need",
    "deploy",
    "mocks",
    "place",
    "absolutely",
    "need",
    "tests",
    "type",
    "development",
    "test",
    "n",
    "going",
    "known",
    "integration",
    "tests",
    "talk",
    "later",
    "two",
    "places",
    "always",
    "need",
    "test",
    "development",
    "test",
    "net",
    "think",
    "testing",
    "main",
    "net",
    "fork",
    "local",
    "ganache",
    "optional",
    "testing",
    "mainnet",
    "fork",
    "done",
    "probably",
    "done",
    "whenever",
    "contracts",
    "interactions",
    "going",
    "onchain",
    "one",
    "chain",
    "without",
    "external",
    "offchain",
    "components",
    "testing",
    "local",
    "ganache",
    "really",
    "meant",
    "tinkering",
    "kind",
    "exploring",
    "seeing",
    "things",
    "going",
    "setup",
    "great",
    "let",
    "move",
    "challenging",
    "example",
    "pass",
    "complete",
    "example",
    "basically",
    "tools",
    "incredibly",
    "powerful",
    "smart",
    "contract",
    "developer",
    "going",
    "show",
    "chain",
    "link",
    "mix",
    "package",
    "called",
    "brown",
    "bake",
    "automatically",
    "open",
    "package",
    "scripts",
    "contracts",
    "going",
    "make",
    "lives",
    "substantially",
    "easier",
    "faster",
    "deploying",
    "smart",
    "contracts",
    "however",
    "let",
    "go",
    "process",
    "understanding",
    "pieces",
    "going",
    "inside",
    "brownie",
    "mix",
    "ready",
    "let",
    "get",
    "excited",
    "jump",
    "okay",
    "let",
    "get",
    "advanced",
    "smart",
    "contract",
    "project",
    "made",
    "far",
    "going",
    "best",
    "example",
    "full",
    "scale",
    "application",
    "full",
    "scale",
    "really",
    "mean",
    "end",
    "end",
    "full",
    "suite",
    "brownie",
    "smart",
    "contracts",
    "really",
    "solid",
    "going",
    "want",
    "create",
    "lottery",
    "application",
    "anybody",
    "enter",
    "lottery",
    "random",
    "winner",
    "selected",
    "let",
    "get",
    "let",
    "get",
    "started",
    "first",
    "course",
    "going",
    "make",
    "new",
    "directory",
    "call",
    "smart",
    "contract",
    "lottery",
    "cd",
    "smart",
    "contract",
    "lottery",
    "open",
    "folder",
    "great",
    "lottery",
    "application",
    "let",
    "go",
    "ahead",
    "start",
    "new",
    "project",
    "browny",
    "got",
    "project",
    "let",
    "create",
    "quick",
    "explain",
    "going",
    "trying",
    "number",
    "one",
    "going",
    "say",
    "users",
    "enter",
    "lottery",
    "f",
    "based",
    "usd",
    "fee",
    "example",
    "let",
    "set",
    "price",
    "like",
    "50",
    "users",
    "actually",
    "pay",
    "ethereum",
    "going",
    "get",
    "conversion",
    "rate",
    "two",
    "admin",
    "choose",
    "lottery",
    "three",
    "lottery",
    "select",
    "random",
    "winner",
    "something",
    "important",
    "note",
    "since",
    "admin",
    "means",
    "application",
    "necessarily",
    "going",
    "truly",
    "decentralized",
    "single",
    "person",
    "chooses",
    "lottery",
    "could",
    "scale",
    "maybe",
    "dow",
    "admin",
    "something",
    "like",
    "could",
    "lottery",
    "automatically",
    "open",
    "close",
    "based",
    "time",
    "parameters",
    "moment",
    "setup",
    "going",
    "keep",
    "mind",
    "even",
    "though",
    "much",
    "less",
    "decentralized",
    "still",
    "going",
    "great",
    "use",
    "smart",
    "contract",
    "technology",
    "first",
    "thing",
    "going",
    "get",
    "started",
    "course",
    "lottery",
    "contract",
    "create",
    "new",
    "file",
    "called",
    "lottery",
    "soul",
    "let",
    "begin",
    "initial",
    "setup",
    "let",
    "choose",
    "version",
    "prag",
    "solidity",
    "carat",
    "version",
    "want",
    "work",
    "contract",
    "lottery",
    "bracket",
    "let",
    "think",
    "second",
    "functions",
    "going",
    "main",
    "functions",
    "going",
    "probably",
    "function",
    "enter",
    "public",
    "probably",
    "function",
    "get",
    "entrance",
    "fee",
    "get",
    "entrance",
    "fee",
    "lottery",
    "probably",
    "function",
    "start",
    "lottery",
    "admin",
    "call",
    "public",
    "well",
    "means",
    "also",
    "probably",
    "end",
    "lottery",
    "function",
    "really",
    "going",
    "main",
    "functions",
    "user",
    "enter",
    "based",
    "entrance",
    "fee",
    "start",
    "lottery",
    "course",
    "end",
    "lottery",
    "let",
    "get",
    "started",
    "enter",
    "function",
    "likely",
    "going",
    "entry",
    "point",
    "know",
    "since",
    "going",
    "want",
    "pay",
    "using",
    "entry",
    "function",
    "ethereum",
    "going",
    "need",
    "make",
    "function",
    "payable",
    "going",
    "need",
    "keep",
    "track",
    "different",
    "players",
    "everybody",
    "signs",
    "lottery",
    "keep",
    "track",
    "players",
    "going",
    "make",
    "address",
    "payable",
    "array",
    "make",
    "public",
    "call",
    "players",
    "anytime",
    "somebody",
    "enters",
    "player",
    "push",
    "message",
    "sender",
    "however",
    "right",
    "checking",
    "see",
    "much",
    "value",
    "actually",
    "sending",
    "want",
    "set",
    "price",
    "least",
    "50",
    "say",
    "50",
    "minimum",
    "going",
    "require",
    "statement",
    "requiring",
    "least",
    "50",
    "order",
    "probably",
    "going",
    "need",
    "function",
    "get",
    "entrance",
    "fee",
    "check",
    "whether",
    "much",
    "sending",
    "ending",
    "actually",
    "50",
    "let",
    "go",
    "ahead",
    "make",
    "get",
    "entrance",
    "fee",
    "function",
    "since",
    "going",
    "returning",
    "number",
    "get",
    "entrance",
    "fee",
    "probably",
    "go",
    "ahead",
    "make",
    "public",
    "view",
    "return",
    "un",
    "256",
    "get",
    "entrance",
    "first",
    "going",
    "stored",
    "somewhere",
    "entrance",
    "fee",
    "going",
    "store",
    "50",
    "minimum",
    "somewhere",
    "something",
    "probably",
    "want",
    "set",
    "right",
    "contract",
    "deployed",
    "put",
    "stuff",
    "like",
    "well",
    "constructor",
    "con",
    "structor",
    "public",
    "create",
    "new",
    "variable",
    "outside",
    "call",
    "un",
    "256",
    "public",
    "usd",
    "entry",
    "fee",
    "constructor",
    "set",
    "usd",
    "entry",
    "fee",
    "equals",
    "50",
    "like",
    "units",
    "measure",
    "always",
    "way",
    "also",
    "times",
    "10",
    "raised",
    "18th",
    "usd",
    "entry",
    "fee",
    "let",
    "go",
    "ahead",
    "get",
    "entrance",
    "fee",
    "know",
    "since",
    "going",
    "try",
    "get",
    "conversion",
    "right",
    "going",
    "want",
    "use",
    "chain",
    "link",
    "price",
    "feed",
    "head",
    "docs",
    "chain",
    "link",
    "scroll",
    "get",
    "latest",
    "price",
    "even",
    "go",
    "ahead",
    "copy",
    "paste",
    "sake",
    "robustness",
    "let",
    "walk",
    "actually",
    "set",
    "going",
    "need",
    "pull",
    "price",
    "feed",
    "convert",
    "50",
    "50",
    "eth",
    "let",
    "go",
    "ahead",
    "create",
    "agra",
    "gor",
    "v3",
    "interface",
    "internal",
    "fusd",
    "price",
    "feed",
    "constructor",
    "go",
    "ahead",
    "set",
    "say",
    "fus",
    "price",
    "feed",
    "equals",
    "agregator",
    "v3",
    "interface",
    "going",
    "want",
    "grab",
    "address",
    "mark",
    "contract",
    "addresses",
    "course",
    "know",
    "learned",
    "last",
    "time",
    "going",
    "want",
    "parametrize",
    "going",
    "want",
    "pass",
    "address",
    "price",
    "feed",
    "constructor",
    "parameter",
    "address",
    "price",
    "feed",
    "address",
    "aggregator",
    "v3",
    "interface",
    "past",
    "price",
    "feed",
    "address",
    "course",
    "since",
    "using",
    "aggregator",
    "v3",
    "interface",
    "going",
    "import",
    "chain",
    "link",
    "go",
    "ahead",
    "copy",
    "documentation",
    "paste",
    "right",
    "top",
    "want",
    "rewrite",
    "feel",
    "free",
    "course",
    "since",
    "import",
    "new",
    "file",
    "bring",
    "config",
    "yl",
    "going",
    "want",
    "add",
    "dependency",
    "dependencies",
    "smart",
    "contract",
    "kit",
    "sl",
    "chain",
    "link",
    "bring",
    "contracts",
    "add",
    "compiler",
    "sulk",
    "rem",
    "mappings",
    "chain",
    "link",
    "equals",
    "right",
    "pull",
    "terminal",
    "try",
    "browning",
    "compile",
    "see",
    "everything",
    "right",
    "forgot",
    "spdx",
    "license",
    "identifier",
    "warning",
    "let",
    "add",
    "anyways",
    "spdx",
    "license",
    "identifier",
    "mit",
    "probably",
    "spell",
    "remappings",
    "right",
    "rem",
    "mappings",
    "let",
    "try",
    "compile",
    "right",
    "lovely",
    "least",
    "know",
    "compiling",
    "correctly",
    "awesome",
    "price",
    "feed",
    "let",
    "go",
    "ahead",
    "set",
    "entrance",
    "fee",
    "course",
    "going",
    "need",
    "get",
    "price",
    "price",
    "feed",
    "even",
    "check",
    "documentation",
    "call",
    "latest",
    "round",
    "data",
    "function",
    "could",
    "copy",
    "paste",
    "going",
    "go",
    "ahead",
    "rewrite",
    "need",
    "round",
    "id",
    "started",
    "timestamp",
    "answered",
    "round",
    "need",
    "price",
    "go",
    "ahead",
    "ignore",
    "variables",
    "call",
    "like",
    "comma",
    "price",
    "comma",
    "comma",
    "comma",
    "equals",
    "fusd",
    "price",
    "feed",
    "latest",
    "round",
    "data",
    "means",
    "going",
    "get",
    "price",
    "going",
    "want",
    "little",
    "bit",
    "quick",
    "math",
    "typically",
    "setting",
    "price",
    "50",
    "price",
    "feed",
    "per",
    "eth",
    "would",
    "want",
    "50",
    "divid",
    "course",
    "since",
    "sl",
    "work",
    "decimals",
    "ca",
    "actually",
    "actually",
    "50",
    "times",
    "big",
    "number",
    "divid",
    "going",
    "go",
    "ahead",
    "like",
    "first",
    "let",
    "go",
    "ahead",
    "convert",
    "price",
    "256",
    "uint",
    "256",
    "say",
    "u",
    "256",
    "adjusted",
    "price",
    "equals",
    "256",
    "256",
    "price",
    "since",
    "know",
    "going",
    "using",
    "ethereum",
    "usd",
    "price",
    "feed",
    "eight",
    "decimals",
    "let",
    "also",
    "convert",
    "18",
    "decimals",
    "well",
    "also",
    "times",
    "10",
    "raised",
    "10th",
    "18",
    "decimals",
    "adjusted",
    "price",
    "u",
    "256",
    "cost",
    "enter",
    "going",
    "equal",
    "usd",
    "entry",
    "fee",
    "times",
    "going",
    "want",
    "times",
    "big",
    "number",
    "times",
    "10",
    "raised",
    "18th",
    "way",
    "usd",
    "entry",
    "fee",
    "18",
    "decimals",
    "additional",
    "18",
    "decimals",
    "canceled",
    "price",
    "feeds",
    "math",
    "work",
    "divided",
    "price",
    "return",
    "cost",
    "enter",
    "course",
    "since",
    "interesting",
    "math",
    "recommended",
    "use",
    "safe",
    "math",
    "use",
    "safe",
    "math",
    "functions",
    "going",
    "skip",
    "safe",
    "math",
    "functions",
    "newer",
    "versions",
    "solidity",
    "really",
    "use",
    "think",
    "important",
    "note",
    "sending",
    "code",
    "exact",
    "code",
    "production",
    "would",
    "bad",
    "idea",
    "least",
    "reason",
    "safe",
    "math",
    "functions",
    "case",
    "function",
    "think",
    "math",
    "pretty",
    "good",
    "know",
    "fact",
    "math",
    "usually",
    "good",
    "let",
    "go",
    "ahead",
    "testing",
    "code",
    "make",
    "sure",
    "get",
    "entran",
    "function",
    "working",
    "properly",
    "based",
    "last",
    "lesson",
    "let",
    "talk",
    "want",
    "test",
    "well",
    "could",
    "main",
    "net",
    "fork",
    "working",
    "onchain",
    "contracts",
    "math",
    "point",
    "development",
    "mox",
    "course",
    "test",
    "net",
    "kind",
    "want",
    "quick",
    "dirty",
    "way",
    "let",
    "try",
    "main",
    "net",
    "fork",
    "see",
    "really",
    "making",
    "sense",
    "current",
    "price",
    "ethereum",
    "much",
    "want",
    "price",
    "50",
    "50",
    "divided",
    "get",
    "019",
    "approximately",
    "get",
    "eth",
    "value",
    "write",
    "test",
    "test",
    "lottery",
    "pi",
    "test",
    "function",
    "would",
    "expect",
    "get",
    "way",
    "1",
    "nine",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7even",
    "n",
    "10",
    "1",
    "2",
    "3",
    "four",
    "5",
    "six",
    "expect",
    "get",
    "approximately",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "tests",
    "us",
    "test",
    "get",
    "entrance",
    "fee",
    "deploy",
    "lottery",
    "first",
    "thing",
    "need",
    "deploy",
    "lottery",
    "function",
    "course",
    "browny",
    "import",
    "lottery",
    "order",
    "deploy",
    "going",
    "need",
    "get",
    "account",
    "going",
    "import",
    "helpful",
    "scripts",
    "last",
    "project",
    "one",
    "get",
    "get",
    "accounts",
    "time",
    "actually",
    "use",
    "accounts",
    "zero",
    "brownie",
    "say",
    "accounts",
    "zero",
    "start",
    "death",
    "lottery",
    "equals",
    "lottery",
    "deploy",
    "count",
    "ah",
    "course",
    "parameter",
    "price",
    "feed",
    "address",
    "going",
    "add",
    "type",
    "parameter",
    "let",
    "hardcode",
    "config",
    "go",
    "config",
    "start",
    "networks",
    "flag",
    "going",
    "working",
    "like",
    "said",
    "said",
    "mainten",
    "fork",
    "quick",
    "dirty",
    "call",
    "f",
    "usd",
    "price",
    "feed",
    "grab",
    "fusd",
    "price",
    "feed",
    "main",
    "net",
    "since",
    "going",
    "main",
    "net",
    "fork",
    "pop",
    "say",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "yes",
    "feed",
    "course",
    "going",
    "need",
    "import",
    "network",
    "kind",
    "quick",
    "dirty",
    "test",
    "lottery",
    "dot",
    "get",
    "entrance",
    "fee",
    "spelling",
    "right",
    "get",
    "yes",
    "ct",
    "lottery",
    "getet",
    "entrance",
    "fee",
    "greater",
    "let",
    "say",
    "let",
    "go",
    "18",
    "wanted",
    "make",
    "sure",
    "actually",
    "right",
    "three",
    "web3",
    "web",
    "way",
    "comma",
    "ether",
    "greater",
    "even",
    "make",
    "sure",
    "less",
    "numbers",
    "course",
    "going",
    "little",
    "bit",
    "different",
    "want",
    "go",
    "ahead",
    "skip",
    "part",
    "math",
    "kind",
    "nice",
    "quick",
    "sanity",
    "check",
    "saying",
    "okay",
    "like",
    "based",
    "things",
    "right",
    "would",
    "price",
    "end",
    "last",
    "section",
    "made",
    "mainnet",
    "fork",
    "dev",
    "network",
    "going",
    "go",
    "ahead",
    "customize",
    "mainnet",
    "fork",
    "way",
    "showed",
    "guys",
    "mainnet",
    "fork",
    "dev",
    "way",
    "use",
    "accounts",
    "little",
    "bit",
    "robust",
    "first",
    "going",
    "delete",
    "browny",
    "internal",
    "main",
    "fork",
    "grounding",
    "networks",
    "delete",
    "main",
    "fork",
    "main",
    "net",
    "fork",
    "deleted",
    "let",
    "go",
    "ahead",
    "add",
    "mainnet",
    "fork",
    "using",
    "alchemy",
    "ethereum",
    "connection",
    "want",
    "create",
    "new",
    "app",
    "already",
    "created",
    "one",
    "called",
    "smart",
    "contract",
    "lottery",
    "view",
    "key",
    "http",
    "endpoint",
    "use",
    "browning",
    "networks",
    "add",
    "development",
    "chain",
    "call",
    "maintened",
    "fork",
    "ganach",
    "cli",
    "host",
    "going",
    "local",
    "host",
    "fork",
    "going",
    "equal",
    "alchemy",
    "h2",
    "top",
    "counts",
    "equal",
    "10",
    "way",
    "use",
    "accounts",
    "new",
    "monic",
    "brownie",
    "port",
    "going",
    "8545",
    "great",
    "main",
    "fork",
    "added",
    "go",
    "ahead",
    "run",
    "test",
    "brownie",
    "test",
    "network",
    "main",
    "net",
    "fork",
    "oops",
    "looks",
    "like",
    "got",
    "little",
    "compile",
    "error",
    "math",
    "oops",
    "looks",
    "like",
    "dividing",
    "price",
    "need",
    "divided",
    "adjusted",
    "price",
    "forgot",
    "parentheses",
    "latest",
    "round",
    "data",
    "let",
    "try",
    "put",
    "extra",
    "comment",
    "let",
    "try",
    "one",
    "time",
    "lovely",
    "looks",
    "like",
    "forking",
    "correctly",
    "awesome",
    "looks",
    "like",
    "test",
    "indeed",
    "passes",
    "course",
    "know",
    "going",
    "want",
    "change",
    "great",
    "way",
    "actually",
    "test",
    "contracts",
    "nice",
    "sanity",
    "check",
    "know",
    "going",
    "refactor",
    "well",
    "mocks",
    "accounts",
    "get",
    "little",
    "bit",
    "awesome",
    "sanity",
    "check",
    "complete",
    "let",
    "get",
    "back",
    "contract",
    "getting",
    "cost",
    "enter",
    "correctly",
    "perfect",
    "getting",
    "entrance",
    "fee",
    "means",
    "enter",
    "function",
    "require",
    "message",
    "value",
    "got",
    "greater",
    "equal",
    "get",
    "entrance",
    "fee",
    "function",
    "give",
    "error",
    "enough",
    "teeth",
    "way",
    "enter",
    "way",
    "get",
    "entrance",
    "fee",
    "want",
    "make",
    "sure",
    "ending",
    "lottery",
    "lottery",
    "even",
    "starts",
    "right",
    "entering",
    "lottery",
    "lottery",
    "even",
    "begun",
    "going",
    "want",
    "weigh",
    "iterate",
    "different",
    "phases",
    "lottery",
    "called",
    "enum",
    "enum",
    "according",
    "solidity",
    "documentation",
    "enums",
    "another",
    "way",
    "create",
    "userdefined",
    "types",
    "solidity",
    "saw",
    "earlier",
    "version",
    "struct",
    "enums",
    "little",
    "bit",
    "different",
    "explicitly",
    "convertible",
    "integ",
    "types",
    "actually",
    "mean",
    "well",
    "enum",
    "like",
    "action",
    "choices",
    "go",
    "left",
    "go",
    "right",
    "go",
    "straight",
    "sit",
    "still",
    "readable",
    "ways",
    "say",
    "go",
    "left",
    "going",
    "rep",
    "presented",
    "state",
    "zero",
    "go",
    "right",
    "going",
    "state",
    "one",
    "go",
    "straight",
    "state",
    "two",
    "sit",
    "still",
    "state",
    "three",
    "lottery",
    "contract",
    "going",
    "want",
    "create",
    "new",
    "type",
    "represents",
    "lottery",
    "state",
    "enum",
    "lottery",
    "state",
    "open",
    "closed",
    "calculating",
    "winner",
    "means",
    "new",
    "type",
    "called",
    "lottery",
    "state",
    "three",
    "positions",
    "open",
    "closed",
    "calculating",
    "winner",
    "different",
    "states",
    "actually",
    "represented",
    "numbers",
    "open",
    "actually",
    "zero",
    "closed",
    "actually",
    "one",
    "calculating",
    "winner",
    "actually",
    "two",
    "new",
    "type",
    "create",
    "variable",
    "type",
    "lottery",
    "state",
    "say",
    "lottery",
    "state",
    "public",
    "lottery",
    "state",
    "right",
    "initialize",
    "contract",
    "going",
    "want",
    "set",
    "lottery",
    "state",
    "closed",
    "constructor",
    "lottery",
    "state",
    "equals",
    "lottery",
    "state",
    "closed",
    "since",
    "represented",
    "numbers",
    "well",
    "could",
    "also",
    "lottery",
    "state",
    "equals",
    "one",
    "one",
    "stands",
    "closed",
    "however",
    "much",
    "readable",
    "lottery",
    "state",
    "closed",
    "lottery",
    "state",
    "enter",
    "function",
    "require",
    "lottery",
    "state",
    "going",
    "equal",
    "lottery",
    "state",
    "openen",
    "enter",
    "somebody",
    "started",
    "lottery",
    "exactly",
    "going",
    "start",
    "lottery",
    "function",
    "going",
    "require",
    "lottery",
    "state",
    "going",
    "equal",
    "lottery",
    "state",
    "closed",
    "even",
    "add",
    "failure",
    "function",
    "saying",
    "start",
    "new",
    "lottery",
    "yet",
    "start",
    "lottery",
    "say",
    "lottery",
    "state",
    "equals",
    "lottery",
    "state",
    "openen",
    "somebody",
    "starts",
    "lottery",
    "able",
    "enter",
    "course",
    "start",
    "lottery",
    "bid",
    "needs",
    "called",
    "admin",
    "owner",
    "modifier",
    "going",
    "come",
    "place",
    "could",
    "write",
    "owner",
    "modifier",
    "use",
    "open",
    "zeppelin",
    "access",
    "control",
    "open",
    "zeppelin",
    "ownable",
    "function",
    "instead",
    "going",
    "use",
    "going",
    "go",
    "ahead",
    "grab",
    "copy",
    "paste",
    "import",
    "atop",
    "zeppelin",
    "contract",
    "access",
    "ownable",
    "course",
    "since",
    "going",
    "add",
    "depend",
    "dependency",
    "config",
    "going",
    "using",
    "open",
    "zeppelin",
    "slop",
    "zeppelin",
    "contracts",
    "going",
    "remap",
    "open",
    "zeppelin",
    "equals",
    "oops",
    "say",
    "lottery",
    "ownable",
    "perfect",
    "try",
    "compile",
    "awesome",
    "looks",
    "like",
    "brownie",
    "grabbed",
    "everything",
    "correctly",
    "good",
    "go",
    "great",
    "finally",
    "move",
    "end",
    "lottery",
    "function",
    "actually",
    "going",
    "choose",
    "random",
    "winner",
    "want",
    "admin",
    "one",
    "actually",
    "end",
    "lottery",
    "let",
    "add",
    "owner",
    "modifier",
    "let",
    "talk",
    "little",
    "bit",
    "randomness",
    "looking",
    "looking",
    "get",
    "random",
    "winner",
    "know",
    "blockchain",
    "deterministic",
    "system",
    "right",
    "super",
    "advantageous",
    "allows",
    "us",
    "smart",
    "contracts",
    "system",
    "actually",
    "reach",
    "consensus",
    "easily",
    "random",
    "numbers",
    "much",
    "harder",
    "let",
    "say",
    "blockchain",
    "whole",
    "bunch",
    "different",
    "nodes",
    "node",
    "responds",
    "gives",
    "random",
    "value",
    "well",
    "node",
    "never",
    "going",
    "able",
    "sync",
    "say",
    "hey",
    "know",
    "agree",
    "random",
    "number",
    "could",
    "could",
    "base",
    "random",
    "number",
    "attributes",
    "system",
    "really",
    "random",
    "actually",
    "going",
    "pseudo",
    "random",
    "getting",
    "truly",
    "random",
    "numbers",
    "deterministic",
    "system",
    "actually",
    "impossible",
    "know",
    "lot",
    "computer",
    "science",
    "actually",
    "know",
    "even",
    "call",
    "like",
    "javascript",
    "computer",
    "really",
    "looking",
    "place",
    "memory",
    "grabbing",
    "value",
    "saying",
    "hey",
    "probably",
    "random",
    "enough",
    "go",
    "ahead",
    "use",
    "smart",
    "contracts",
    "especially",
    "working",
    "type",
    "financial",
    "application",
    "lottery",
    "exploitable",
    "randomness",
    "function",
    "means",
    "lottery",
    "risk",
    "hacked",
    "destroyed",
    "even",
    "fairy",
    "tale",
    "um",
    "time",
    "recording",
    "2",
    "weeks",
    "ago",
    "rundown",
    "exploit",
    "protocol",
    "used",
    "insecure",
    "randomness",
    "got",
    "hacked",
    "going",
    "show",
    "insecure",
    "way",
    "first",
    "reason",
    "going",
    "show",
    "quick",
    "dirty",
    "way",
    "get",
    "pseudo",
    "random",
    "number",
    "please",
    "use",
    "production",
    "use",
    "cases",
    "going",
    "show",
    "method",
    "often",
    "used",
    "teach",
    "people",
    "get",
    "random",
    "numbers",
    "going",
    "explain",
    "vulnerable",
    "good",
    "method",
    "randomness",
    "insecure",
    "protocols",
    "use",
    "globally",
    "available",
    "variable",
    "hash",
    "smart",
    "contracts",
    "actually",
    "number",
    "globally",
    "available",
    "variables",
    "one",
    "saw",
    "going",
    "message",
    "val",
    "right",
    "going",
    "value",
    "sent",
    "transaction",
    "another",
    "globally",
    "available",
    "variable",
    "going",
    "message",
    "sender",
    "actually",
    "see",
    "whole",
    "list",
    "different",
    "globally",
    "available",
    "variables",
    "solidity",
    "documentation",
    "since",
    "globally",
    "available",
    "variables",
    "lot",
    "times",
    "someone",
    "see",
    "something",
    "like",
    "block",
    "difficulty",
    "returns",
    "current",
    "block",
    "difficulty",
    "one",
    "globally",
    "one",
    "globally",
    "available",
    "variables",
    "going",
    "block",
    "difficulty",
    "block",
    "difficulty",
    "current",
    "block",
    "difficulty",
    "remember",
    "said",
    "time",
    "different",
    "block",
    "generation",
    "called",
    "block",
    "time",
    "well",
    "always",
    "keep",
    "block",
    "time",
    "changing",
    "block",
    "difficulty",
    "time",
    "harder",
    "problem",
    "harder",
    "proof",
    "work",
    "algorithm",
    "longer",
    "going",
    "take",
    "nodes",
    "going",
    "need",
    "solve",
    "problem",
    "constantly",
    "recalculating",
    "metric",
    "called",
    "ethereum",
    "difficulty",
    "block",
    "difficulty",
    "depending",
    "chain",
    "working",
    "constantly",
    "changes",
    "might",
    "think",
    "would",
    "great",
    "use",
    "randomness",
    "right",
    "somewhat",
    "hardto",
    "predict",
    "number",
    "lot",
    "people",
    "think",
    "hey",
    "sound",
    "pretty",
    "random",
    "let",
    "use",
    "unit",
    "randomness",
    "see",
    "see",
    "like",
    "something",
    "like",
    "uint",
    "kak",
    "kak",
    "256",
    "hashing",
    "algorithm",
    "something",
    "like",
    "abi",
    "encode",
    "packed",
    "ns",
    "message",
    "sender",
    "lock",
    "difficulty",
    "block",
    "timestamp",
    "mod",
    "players",
    "length",
    "know",
    "whole",
    "lot",
    "going",
    "line",
    "let",
    "talk",
    "first",
    "see",
    "casting",
    "converting",
    "everything",
    "un",
    "256",
    "reason",
    "course",
    "course",
    "going",
    "want",
    "pick",
    "random",
    "winner",
    "based",
    "index",
    "right",
    "going",
    "want",
    "pick",
    "somebody",
    "random",
    "winner",
    "players",
    "array",
    "players",
    "list",
    "say",
    "okay",
    "whatever",
    "number",
    "going",
    "use",
    "going",
    "index",
    "winner",
    "going",
    "randomly",
    "pick",
    "use",
    "k",
    "256",
    "hashing",
    "algorithm",
    "hash",
    "whole",
    "bunch",
    "variables",
    "together",
    "ai",
    "encod",
    "packed",
    "abi",
    "another",
    "keyword",
    "lowlevel",
    "work",
    "add",
    "add",
    "maybe",
    "nson",
    "add",
    "message",
    "sender",
    "block",
    "difficulty",
    "block",
    "time",
    "stamp",
    "basically",
    "trying",
    "take",
    "bunch",
    "seemingly",
    "random",
    "numbers",
    "mash",
    "together",
    "hashing",
    "function",
    "say",
    "yeah",
    "pretty",
    "random",
    "issue",
    "hashing",
    "function",
    "random",
    "hashing",
    "function",
    "always",
    "going",
    "exactly",
    "k",
    "check",
    "256",
    "always",
    "going",
    "hash",
    "everything",
    "exactly",
    "way",
    "actually",
    "making",
    "random",
    "hashing",
    "numbers",
    "inside",
    "pieces",
    "actually",
    "determine",
    "random",
    "block",
    "difficulty",
    "random",
    "random",
    "method",
    "block",
    "difficulty",
    "random",
    "wo",
    "random",
    "method",
    "block",
    "difficulty",
    "random",
    "difficulty",
    "actually",
    "manipulated",
    "miners",
    "tim",
    "stamp",
    "time",
    "stamp",
    "predictable",
    "nuns",
    "predictable",
    "aka",
    "transaction",
    "number",
    "regard",
    "using",
    "nuns",
    "transaction",
    "number",
    "message",
    "sender",
    "predictable",
    "using",
    "random",
    "number",
    "way",
    "hashing",
    "algorithm",
    "always",
    "going",
    "un",
    "256",
    "always",
    "going",
    "predictable",
    "number",
    "predictable",
    "address",
    "predictable",
    "timestamp",
    "manipulatable",
    "value",
    "really",
    "giving",
    "miners",
    "ability",
    "win",
    "lottery",
    "win",
    "whatever",
    "lottery",
    "working",
    "going",
    "effective",
    "way",
    "get",
    "random",
    "number",
    "unacceptable",
    "way",
    "get",
    "random",
    "number",
    "applications",
    "yes",
    "owner",
    "modifier",
    "means",
    "ones",
    "going",
    "choose",
    "call",
    "still",
    "centralized",
    "regard",
    "let",
    "teach",
    "best",
    "practices",
    "working",
    "random",
    "numbers",
    "right",
    "run",
    "issues",
    "explain",
    "part",
    "little",
    "bit",
    "order",
    "get",
    "true",
    "random",
    "number",
    "going",
    "look",
    "outside",
    "blockchain",
    "blockchain",
    "like",
    "said",
    "deterministic",
    "system",
    "need",
    "number",
    "outside",
    "blockchain",
    "ca",
    "ca",
    "use",
    "api",
    "gives",
    "random",
    "number",
    "right",
    "api",
    "becomes",
    "corrupted",
    "malicious",
    "go",
    "something",
    "happens",
    "etc",
    "need",
    "provable",
    "way",
    "get",
    "random",
    "number",
    "chain",
    "link",
    "vrf",
    "actually",
    "solution",
    "chain",
    "link",
    "vrf",
    "stands",
    "chain",
    "link",
    "verifiably",
    "randomness",
    "function",
    "way",
    "get",
    "provably",
    "random",
    "number",
    "smart",
    "contract",
    "onchain",
    "contract",
    "checks",
    "response",
    "chain",
    "link",
    "node",
    "make",
    "sure",
    "number",
    "truly",
    "random",
    "using",
    "cryptography",
    "magic",
    "able",
    "check",
    "number",
    "parameters",
    "chain",
    "link",
    "vrf",
    "started",
    "ended",
    "make",
    "sure",
    "truly",
    "random",
    "already",
    "used",
    "protocols",
    "like",
    "avag",
    "goi",
    "ether",
    "cards",
    "pool",
    "together",
    "whole",
    "bunch",
    "protocols",
    "well",
    "secure",
    "reliable",
    "truly",
    "provable",
    "way",
    "get",
    "random",
    "number",
    "incredibly",
    "powerful",
    "decentralized",
    "system",
    "actually",
    "going",
    "get",
    "random",
    "number",
    "let",
    "work",
    "getting",
    "go",
    "ahead",
    "head",
    "right",
    "chain",
    "link",
    "documentation",
    "actually",
    "learn",
    "work",
    "one",
    "let",
    "go",
    "chain",
    "link",
    "documentation",
    "make",
    "sure",
    "get",
    "right",
    "go",
    "get",
    "random",
    "number",
    "documentation",
    "could",
    "ever",
    "want",
    "ever",
    "get",
    "lost",
    "confused",
    "always",
    "come",
    "right",
    "back",
    "work",
    "going",
    "going",
    "deploy",
    "simple",
    "version",
    "remix",
    "version",
    "working",
    "chain",
    "lake",
    "vf",
    "going",
    "walk",
    "minimalistic",
    "contract",
    "see",
    "actually",
    "works",
    "contract",
    "hit",
    "remix",
    "button",
    "remix",
    "pops",
    "immediately",
    "get",
    "random",
    "number",
    "consumer",
    "soul",
    "files",
    "check",
    "awesome",
    "files",
    "right",
    "see",
    "actually",
    "using",
    "different",
    "chain",
    "using",
    "mostly",
    "working",
    "rink",
    "demo",
    "actually",
    "koven",
    "work",
    "koven",
    "remember",
    "want",
    "stay",
    "rink",
    "b",
    "always",
    "go",
    "contract",
    "addresses",
    "section",
    "vrf",
    "grab",
    "addresses",
    "use",
    "going",
    "contract",
    "actually",
    "use",
    "well",
    "see",
    "first",
    "thing",
    "happens",
    "importing",
    "code",
    "chain",
    "link",
    "package",
    "contract",
    "inheriting",
    "abilities",
    "vrf",
    "consumer",
    "based",
    "contract",
    "going",
    "see",
    "functions",
    "actually",
    "going",
    "use",
    "inherited",
    "contract",
    "first",
    "thing",
    "notice",
    "see",
    "constructor",
    "weird",
    "stuff",
    "looks",
    "like",
    "almost",
    "two",
    "constructors",
    "actually",
    "going",
    "well",
    "let",
    "look",
    "vrf",
    "consumer",
    "based",
    "contract",
    "chain",
    "link",
    "github",
    "come",
    "chain",
    "link",
    "github",
    "go",
    "evm",
    "contracts",
    "depending",
    "watching",
    "migrating",
    "contracts",
    "point",
    "go",
    "evm",
    "contracts",
    "go",
    "src",
    "using",
    "go",
    "look",
    "vrf",
    "consumer",
    "base",
    "soul",
    "see",
    "vrf",
    "consumer",
    "base",
    "importing",
    "constructor",
    "takes",
    "address",
    "vrf",
    "coordinator",
    "onchain",
    "contract",
    "actually",
    "checks",
    "make",
    "sure",
    "numbers",
    "random",
    "address",
    "chain",
    "link",
    "token",
    "talk",
    "er",
    "c20s",
    "little",
    "bit",
    "also",
    "inheriting",
    "constructor",
    "contract",
    "constructor",
    "random",
    "number",
    "consumer",
    "also",
    "use",
    "constructor",
    "vrf",
    "consumer",
    "base",
    "actually",
    "go",
    "ahead",
    "grab",
    "constructor",
    "vrf",
    "consumer",
    "base",
    "plop",
    "taking",
    "two",
    "addresses",
    "taking",
    "vrf",
    "coordinator",
    "link",
    "token",
    "like",
    "said",
    "vrf",
    "coordinator",
    "contract",
    "deployed",
    "chain",
    "going",
    "verify",
    "return",
    "chain",
    "link",
    "node",
    "truly",
    "random",
    "going",
    "use",
    "link",
    "token",
    "payment",
    "chain",
    "link",
    "node",
    "services",
    "also",
    "keyh",
    "fee",
    "defined",
    "inside",
    "constructor",
    "well",
    "keyh",
    "uniquely",
    "identifies",
    "chain",
    "link",
    "node",
    "going",
    "use",
    "fee",
    "much",
    "link",
    "actually",
    "going",
    "pay",
    "chain",
    "link",
    "node",
    "delivering",
    "us",
    "random",
    "number",
    "let",
    "talk",
    "couple",
    "things",
    "ethereum",
    "whenever",
    "make",
    "transaction",
    "pay",
    "eth",
    "gap",
    "right",
    "transaction",
    "gas",
    "pay",
    "smart",
    "contract",
    "platform",
    "little",
    "bit",
    "eth",
    "performing",
    "transaction",
    "smart",
    "contract",
    "smart",
    "contract",
    "operates",
    "oracle",
    "pay",
    "link",
    "gas",
    "oracle",
    "gas",
    "pay",
    "oracles",
    "fee",
    "services",
    "providing",
    "data",
    "type",
    "external",
    "computation",
    "smart",
    "contract",
    "question",
    "might",
    "follow",
    "oh",
    "okay",
    "well",
    "come",
    "pay",
    "price",
    "feeds",
    "thing",
    "well",
    "price",
    "feeds",
    "somebody",
    "actually",
    "already",
    "paid",
    "data",
    "returned",
    "go",
    "data",
    "chain",
    "link",
    "scroll",
    "actually",
    "see",
    "list",
    "sponsors",
    "paying",
    "get",
    "data",
    "delivered",
    "already",
    "paying",
    "oracle",
    "gas",
    "bring",
    "data",
    "chain",
    "us",
    "since",
    "protocol",
    "getting",
    "random",
    "number",
    "us",
    "actually",
    "going",
    "pay",
    "oracle",
    "gas",
    "contract",
    "function",
    "called",
    "get",
    "random",
    "number",
    "going",
    "return",
    "byes",
    "32",
    "going",
    "going",
    "call",
    "request",
    "randomness",
    "function",
    "inherited",
    "vrf",
    "consumer",
    "base",
    "look",
    "look",
    "request",
    "request",
    "randomness",
    "see",
    "function",
    "right",
    "called",
    "request",
    "randomness",
    "function",
    "going",
    "send",
    "oracle",
    "fee",
    "link",
    "token",
    "going",
    "call",
    "specific",
    "link",
    "token",
    "function",
    "called",
    "transfer",
    "call",
    "function",
    "going",
    "call",
    "chain",
    "link",
    "node",
    "going",
    "talk",
    "going",
    "go",
    "exactly",
    "right",
    "talk",
    "little",
    "bit",
    "call",
    "request",
    "randomness",
    "function",
    "send",
    "keyh",
    "fee",
    "remember",
    "keyh",
    "uniquely",
    "identifies",
    "chain",
    "link",
    "node",
    "fee",
    "going",
    "much",
    "oracle",
    "gas",
    "going",
    "pay",
    "ever",
    "get",
    "lost",
    "much",
    "pay",
    "contract",
    "addresses",
    "always",
    "head",
    "vr",
    "contract",
    "section",
    "see",
    "recently",
    "deployed",
    "vfs",
    "much",
    "fee",
    "etc",
    "gets",
    "little",
    "bit",
    "interesting",
    "getting",
    "random",
    "number",
    "actually",
    "follows",
    "called",
    "request",
    "receive",
    "style",
    "working",
    "data",
    "let",
    "go",
    "ahead",
    "try",
    "explain",
    "means",
    "see",
    "going",
    "save",
    "answer",
    "random",
    "result",
    "variable",
    "let",
    "go",
    "ahead",
    "try",
    "see",
    "happens",
    "going",
    "switch",
    "injected",
    "three",
    "since",
    "swapping",
    "new",
    "test",
    "network",
    "means",
    "get",
    "test",
    "net",
    "eth",
    "test",
    "net",
    "link",
    "always",
    "look",
    "link",
    "token",
    "contracts",
    "page",
    "find",
    "faucets",
    "scroll",
    "find",
    "coven",
    "look",
    "like",
    "test",
    "link",
    "faucet",
    "test",
    "e",
    "faucet",
    "coven",
    "faucet",
    "want",
    "switch",
    "rinky",
    "koven",
    "grab",
    "address",
    "paste",
    "send",
    "me1",
    "test",
    "link",
    "transaction",
    "see",
    "transferring",
    "erc20",
    "take",
    "contract",
    "address",
    "add",
    "metamask",
    "copying",
    "address",
    "scrolling",
    "add",
    "token",
    "pacing",
    "already",
    "address",
    "going",
    "hit",
    "cancel",
    "also",
    "want",
    "testut",
    "coen",
    "ethereum",
    "looks",
    "like",
    "faet",
    "paste",
    "address",
    "robot",
    "send",
    "test",
    "e",
    "perfect",
    "test",
    "ethereum",
    "test",
    "link",
    "proceed",
    "going",
    "make",
    "sure",
    "coven",
    "test",
    "network",
    "going",
    "deploy",
    "random",
    "number",
    "consumer",
    "gist",
    "let",
    "go",
    "ahead",
    "hit",
    "deploy",
    "metam",
    "mass",
    "pops",
    "going",
    "go",
    "ahead",
    "confirm",
    "explain",
    "fulfill",
    "randomness",
    "function",
    "intentionally",
    "see",
    "second",
    "great",
    "random",
    "number",
    "consumer",
    "comes",
    "let",
    "check",
    "random",
    "result",
    "right",
    "obviously",
    "zero",
    "got",
    "random",
    "number",
    "going",
    "something",
    "intentionally",
    "wrong",
    "good",
    "chance",
    "run",
    "point",
    "hit",
    "get",
    "random",
    "number",
    "right",
    "see",
    "air",
    "gas",
    "estimation",
    "failed",
    "plenty",
    "eth",
    "would",
    "fail",
    "reason",
    "failing",
    "contract",
    "oracle",
    "gas",
    "got",
    "gas",
    "estimation",
    "failed",
    "need",
    "fund",
    "contract",
    "address",
    "link",
    "actually",
    "get",
    "random",
    "number",
    "going",
    "hit",
    "copy",
    "button",
    "going",
    "copy",
    "address",
    "going",
    "come",
    "metamask",
    "going",
    "send",
    "address",
    "going",
    "paste",
    "swap",
    "link",
    "send",
    "one",
    "link",
    "probably",
    "overkill",
    "saw",
    "fee",
    "going",
    "overkill",
    "great",
    "contract",
    "test",
    "net",
    "link",
    "call",
    "get",
    "random",
    "number",
    "button",
    "actually",
    "pay",
    "chain",
    "link",
    "node",
    "actually",
    "return",
    "random",
    "number",
    "going",
    "go",
    "ahead",
    "confirm",
    "fantastic",
    "paying",
    "little",
    "bit",
    "transaction",
    "gas",
    "make",
    "transaction",
    "make",
    "request",
    "paying",
    "little",
    "bit",
    "oracle",
    "gas",
    "make",
    "transaction",
    "trans",
    "transaction",
    "confirmed",
    "hit",
    "random",
    "result",
    "still",
    "going",
    "zero",
    "going",
    "well",
    "getting",
    "random",
    "number",
    "like",
    "actually",
    "follows",
    "known",
    "request",
    "receive",
    "cycle",
    "getting",
    "data",
    "read",
    "basic",
    "request",
    "model",
    "documentation",
    "one",
    "transaction",
    "actually",
    "request",
    "data",
    "case",
    "random",
    "number",
    "second",
    "transaction",
    "chain",
    "lake",
    "node",
    "make",
    "function",
    "call",
    "return",
    "data",
    "back",
    "smart",
    "contract",
    "case",
    "function",
    "calling",
    "fulfill",
    "randomness",
    "calls",
    "fulfill",
    "randomness",
    "byes",
    "32",
    "request",
    "id",
    "going",
    "request",
    "number",
    "called",
    "going",
    "return",
    "random",
    "number",
    "called",
    "randomness",
    "wait",
    "little",
    "bit",
    "hit",
    "random",
    "result",
    "see",
    "indeed",
    "random",
    "number",
    "reason",
    "actually",
    "two",
    "transaction",
    "occur",
    "one",
    "paid",
    "us",
    "called",
    "get",
    "random",
    "number",
    "one",
    "paid",
    "chain",
    "link",
    "node",
    "called",
    "fulfill",
    "randomness",
    "lied",
    "little",
    "bit",
    "technically",
    "vrf",
    "coordinator",
    "contract",
    "calls",
    "function",
    "chain",
    "link",
    "node",
    "calls",
    "vrf",
    "coordinator",
    "function",
    "simplicity",
    "sake",
    "kind",
    "think",
    "chain",
    "link",
    "node",
    "calling",
    "fulfill",
    "randomness",
    "function",
    "know",
    "remix",
    "let",
    "go",
    "ahead",
    "add",
    "brownie",
    "project",
    "actually",
    "even",
    "need",
    "require",
    "even",
    "get",
    "random",
    "number",
    "let",
    "change",
    "state",
    "lottery",
    "lottery",
    "state",
    "equals",
    "lottery",
    "state",
    "calculating",
    "happening",
    "functions",
    "called",
    "right",
    "lock",
    "nobody",
    "start",
    "lottery",
    "nobody",
    "enter",
    "lottery",
    "calculating",
    "winner",
    "awesome",
    "know",
    "little",
    "bit",
    "random",
    "numbers",
    "everything",
    "let",
    "go",
    "ahead",
    "try",
    "implementing",
    "chain",
    "link",
    "smart",
    "contract",
    "dogs",
    "course",
    "going",
    "scroll",
    "going",
    "go",
    "get",
    "random",
    "number",
    "bit",
    "copy",
    "paste",
    "code",
    "well",
    "smart",
    "contracts",
    "first",
    "thing",
    "going",
    "need",
    "course",
    "import",
    "brf",
    "consumer",
    "base",
    "code",
    "let",
    "move",
    "back",
    "scroll",
    "top",
    "paste",
    "chainlink",
    "contracts",
    "slsrc",
    "v",
    "vrf",
    "consumer",
    "base",
    "inherit",
    "lottery",
    "contract",
    "say",
    "lottery",
    "vrf",
    "consumer",
    "base",
    "ownable",
    "let",
    "take",
    "look",
    "vrf",
    "consumer",
    "base",
    "chain",
    "link",
    "github",
    "scroll",
    "constructor",
    "vrf",
    "consumer",
    "base",
    "see",
    "takes",
    "two",
    "parameters",
    "address",
    "vrf",
    "coordinator",
    "address",
    "chain",
    "link",
    "token",
    "use",
    "constructor",
    "use",
    "constructor",
    "contract",
    "inherited",
    "contract",
    "inside",
    "constructor",
    "want",
    "want",
    "come",
    "constructor",
    "right",
    "public",
    "keyword",
    "add",
    "additional",
    "constructors",
    "inherited",
    "smart",
    "contracts",
    "say",
    "constructor",
    "normal",
    "constructor",
    "put",
    "rf",
    "consumer",
    "base",
    "add",
    "vrf",
    "consumer",
    "base",
    "addresses",
    "know",
    "going",
    "vrf",
    "coordinator",
    "address",
    "link",
    "token",
    "address",
    "similar",
    "price",
    "feed",
    "two",
    "addresses",
    "going",
    "change",
    "based",
    "blockchain",
    "probably",
    "make",
    "sense",
    "us",
    "parameter",
    "tize",
    "way",
    "parameterz",
    "price",
    "feed",
    "address",
    "top",
    "level",
    "constructor",
    "parameters",
    "add",
    "address",
    "vrf",
    "coordinator",
    "pass",
    "constructor",
    "vrf",
    "consumer",
    "base",
    "also",
    "grab",
    "address",
    "link",
    "token",
    "address",
    "link",
    "pass",
    "vrf",
    "consumer",
    "based",
    "constructor",
    "well",
    "great",
    "else",
    "need",
    "make",
    "work",
    "well",
    "back",
    "documentation",
    "see",
    "need",
    "fee",
    "key",
    "fee",
    "associated",
    "link",
    "token",
    "needed",
    "pay",
    "request",
    "make",
    "public",
    "variable",
    "uint",
    "256",
    "public",
    "fee",
    "since",
    "might",
    "change",
    "blockchain",
    "blockchain",
    "input",
    "parameter",
    "well",
    "un",
    "256",
    "undor",
    "fee",
    "constructor",
    "fe",
    "equals",
    "underscore",
    "fe",
    "set",
    "global",
    "variable",
    "fee",
    "need",
    "comm",
    "else",
    "need",
    "well",
    "need",
    "key",
    "key",
    "way",
    "uniquely",
    "identify",
    "chain",
    "link",
    "vf",
    "node",
    "create",
    "another",
    "one",
    "bytes",
    "32",
    "public",
    "keyh",
    "add",
    "parameter",
    "byes",
    "32",
    "keyh",
    "say",
    "keyh",
    "equals",
    "undor",
    "keyh",
    "perfect",
    "contract",
    "coming",
    "along",
    "right",
    "main",
    "pieces",
    "need",
    "request",
    "random",
    "number",
    "well",
    "scroll",
    "documentation",
    "see",
    "request",
    "randomness",
    "function",
    "need",
    "call",
    "scroll",
    "back",
    "vrf",
    "consumer",
    "based",
    "contract",
    "request",
    "randomness",
    "function",
    "function",
    "vrf",
    "consumer",
    "base",
    "contract",
    "natively",
    "call",
    "request",
    "randomness",
    "function",
    "right",
    "contract",
    "see",
    "takes",
    "key",
    "fee",
    "parameters",
    "right",
    "end",
    "lottery",
    "function",
    "add",
    "function",
    "see",
    "also",
    "returns",
    "bytes",
    "32",
    "called",
    "request",
    "id",
    "return",
    "syntax",
    "pretty",
    "powerful",
    "actually",
    "identify",
    "name",
    "variable",
    "want",
    "return",
    "right",
    "right",
    "function",
    "declaration",
    "saying",
    "byes",
    "32",
    "requested",
    "saying",
    "going",
    "return",
    "byes",
    "32",
    "variable",
    "named",
    "request",
    "id",
    "right",
    "function",
    "request",
    "randomness",
    "function",
    "importing",
    "passing",
    "keyh",
    "fee",
    "return",
    "bytes",
    "32",
    "called",
    "request",
    "id",
    "actually",
    "function",
    "function",
    "declaration",
    "tell",
    "us",
    "going",
    "variable",
    "name",
    "request",
    "id",
    "going",
    "exactly",
    "bytes",
    "32",
    "request",
    "id",
    "equals",
    "request",
    "randomness",
    "function",
    "call",
    "follows",
    "talked",
    "request",
    "receive",
    "mentality",
    "request",
    "receive",
    "architecture",
    "means",
    "first",
    "transaction",
    "going",
    "request",
    "data",
    "chain",
    "link",
    "oracle",
    "second",
    "callback",
    "transaction",
    "chain",
    "link",
    "node",
    "going",
    "return",
    "data",
    "contract",
    "another",
    "function",
    "called",
    "fulfill",
    "randomness",
    "look",
    "back",
    "vrf",
    "consumer",
    "base",
    "see",
    "function",
    "raw",
    "fulfill",
    "randomness",
    "read",
    "comments",
    "saying",
    "raw",
    "fulfill",
    "randomness",
    "called",
    "vrf",
    "coordinator",
    "receives",
    "valid",
    "vrf",
    "proof",
    "raw",
    "fulfill",
    "randomness",
    "call",
    "fulfill",
    "randomness",
    "little",
    "bit",
    "contract",
    "tag",
    "going",
    "going",
    "eventually",
    "call",
    "fulfill",
    "randomness",
    "function",
    "going",
    "define",
    "contract",
    "going",
    "know",
    "gets",
    "random",
    "number",
    "back",
    "first",
    "transaction",
    "going",
    "end",
    "lottery",
    "request",
    "random",
    "number",
    "second",
    "transaction",
    "later",
    "chain",
    "link",
    "node",
    "created",
    "provably",
    "random",
    "number",
    "going",
    "call",
    "second",
    "transaction",
    "based",
    "define",
    "call",
    "fulfill",
    "randomness",
    "see",
    "takes",
    "32",
    "request",
    "id",
    "random",
    "number",
    "fulfill",
    "randomness",
    "takes",
    "32",
    "quest",
    "id",
    "u",
    "256",
    "randomness",
    "want",
    "anyone",
    "else",
    "able",
    "call",
    "function",
    "want",
    "chain",
    "link",
    "node",
    "call",
    "function",
    "return",
    "truly",
    "random",
    "number",
    "going",
    "make",
    "internal",
    "function",
    "internal",
    "actually",
    "chain",
    "link",
    "node",
    "calling",
    "vrf",
    "coordinator",
    "vf",
    "coordinator",
    "calling",
    "fulfill",
    "randomness",
    "make",
    "internal",
    "vrf",
    "coordinator",
    "one",
    "call",
    "return",
    "function",
    "going",
    "give",
    "keyword",
    "override",
    "override",
    "keyword",
    "means",
    "overriding",
    "original",
    "declaration",
    "fulfill",
    "randomness",
    "function",
    "vrf",
    "consumer",
    "base",
    "function",
    "fulfill",
    "randomness",
    "defined",
    "parameters",
    "anything",
    "function",
    "actually",
    "laid",
    "function",
    "meant",
    "overridden",
    "us",
    "exactly",
    "right",
    "fulfill",
    "randomness",
    "function",
    "let",
    "go",
    "ahead",
    "define",
    "going",
    "happen",
    "get",
    "random",
    "number",
    "back",
    "process",
    "random",
    "number",
    "let",
    "check",
    "make",
    "sure",
    "even",
    "right",
    "state",
    "require",
    "lottery",
    "state",
    "going",
    "equal",
    "lottery",
    "state",
    "calculating",
    "winner",
    "state",
    "say",
    "yet",
    "auto",
    "format",
    "one",
    "jumping",
    "let",
    "another",
    "check",
    "make",
    "sure",
    "actually",
    "get",
    "response",
    "require",
    "underscore",
    "randomness",
    "greater",
    "zero",
    "say",
    "random",
    "found",
    "need",
    "pick",
    "random",
    "winner",
    "well",
    "need",
    "pick",
    "random",
    "winner",
    "specifically",
    "list",
    "players",
    "list",
    "payable",
    "public",
    "players",
    "players",
    "array",
    "list",
    "players",
    "like",
    "one",
    "player",
    "one",
    "player",
    "two",
    "player",
    "three",
    "player",
    "four",
    "different",
    "index",
    "pick",
    "random",
    "winner",
    "called",
    "modulo",
    "function",
    "fact",
    "let",
    "even",
    "open",
    "remix",
    "example",
    "remix",
    "let",
    "pop",
    "open",
    "new",
    "contract",
    "call",
    "mod",
    "soul",
    "pragma",
    "solidity",
    "carat",
    "contract",
    "mod",
    "constructor",
    "bline",
    "constructor",
    "get",
    "global",
    "variable",
    "went",
    "256",
    "six",
    "number",
    "set",
    "equal",
    "five",
    "go",
    "save",
    "compile",
    "let",
    "even",
    "get",
    "rid",
    "constructor",
    "let",
    "create",
    "function",
    "called",
    "dood",
    "take",
    "un",
    "256",
    "mod",
    "value",
    "public",
    "function",
    "public",
    "view",
    "returns",
    "256",
    "return",
    "five",
    "modulo",
    "mod",
    "value",
    "let",
    "go",
    "javascript",
    "vm",
    "deploy",
    "go",
    "number",
    "right",
    "five",
    "let",
    "learn",
    "modulo",
    "works",
    "dood",
    "function",
    "module",
    "divides",
    "number",
    "returns",
    "returns",
    "remainder",
    "example",
    "five",
    "mod",
    "5",
    "think",
    "going",
    "get",
    "going",
    "five",
    "divided",
    "five",
    "return",
    "remainder",
    "well",
    "five",
    "divided",
    "five",
    "one",
    "remainder",
    "decimal",
    "five",
    "mod",
    "five",
    "zero",
    "exactly",
    "well",
    "five",
    "mod",
    "four",
    "well",
    "four",
    "go",
    "five",
    "evenly",
    "one",
    "number",
    "left",
    "five",
    "mod",
    "four",
    "going",
    "one",
    "five",
    "mod",
    "3",
    "going",
    "two",
    "five",
    "mod",
    "one",
    "going",
    "zero",
    "right",
    "since",
    "one",
    "goes",
    "everything",
    "mod",
    "function",
    "works",
    "little",
    "percent",
    "use",
    "mod",
    "function",
    "fulfill",
    "randomness",
    "length",
    "players",
    "say",
    "u",
    "256",
    "index",
    "winner",
    "going",
    "equal",
    "random",
    "number",
    "got",
    "modded",
    "players",
    "length",
    "let",
    "say",
    "example",
    "seven",
    "players",
    "sign",
    "random",
    "number",
    "22",
    "well",
    "want",
    "get",
    "one",
    "random",
    "seven",
    "players",
    "would",
    "22",
    "mod",
    "7",
    "7",
    "divides",
    "evenly",
    "22",
    "three",
    "times",
    "one",
    "left",
    "7",
    "3",
    "equals",
    "21",
    "difference",
    "21",
    "22",
    "1",
    "7",
    "4",
    "28",
    "know",
    "know",
    "reached",
    "upper",
    "limit",
    "get",
    "random",
    "number",
    "based",
    "index",
    "index",
    "say",
    "winner",
    "equals",
    "players",
    "index",
    "winner",
    "keep",
    "track",
    "let",
    "make",
    "new",
    "variable",
    "called",
    "recent",
    "winner",
    "top",
    "address",
    "public",
    "recent",
    "winner",
    "grab",
    "recent",
    "winner",
    "instead",
    "winner",
    "say",
    "recent",
    "winner",
    "equals",
    "players",
    "index",
    "winner",
    "got",
    "winner",
    "wallet",
    "want",
    "pay",
    "money",
    "gathered",
    "enters",
    "recent",
    "winner",
    "transfer",
    "entire",
    "balance",
    "address",
    "say",
    "address",
    "balance",
    "perfect",
    "transfer",
    "everything",
    "course",
    "going",
    "want",
    "reset",
    "lottery",
    "start",
    "scratch",
    "start",
    "blank",
    "players",
    "equals",
    "new",
    "address",
    "payable",
    "array",
    "size",
    "zero",
    "resetting",
    "players",
    "brand",
    "new",
    "array",
    "going",
    "change",
    "lottery",
    "state",
    "two",
    "lottery",
    "state",
    "closed",
    "lottery",
    "complete",
    "often",
    "also",
    "like",
    "keep",
    "track",
    "recent",
    "random",
    "number",
    "top",
    "u",
    "256",
    "public",
    "randomness",
    "variable",
    "fill",
    "randomness",
    "say",
    "randomness",
    "equals",
    "underscore",
    "randomness",
    "perfect",
    "contract",
    "course",
    "actually",
    "tried",
    "assuming",
    "works",
    "great",
    "know",
    "means",
    "time",
    "go",
    "testing",
    "mode",
    "testing",
    "development",
    "mode",
    "let",
    "even",
    "try",
    "brownie",
    "compile",
    "first",
    "looks",
    "like",
    "issue",
    "send",
    "transfer",
    "available",
    "objects",
    "type",
    "address",
    "payable",
    "addresss",
    "looks",
    "like",
    "made",
    "recent",
    "winner",
    "address",
    "needs",
    "address",
    "payable",
    "let",
    "try",
    "brown",
    "compile",
    "beautiful",
    "least",
    "know",
    "compiling",
    "great",
    "sign",
    "let",
    "move",
    "testing",
    "development",
    "phase",
    "starting",
    "figure",
    "ignore",
    "file",
    "import",
    "callback",
    "supported",
    "bugs",
    "bs",
    "code",
    "sure",
    "solidity",
    "linter",
    "get",
    "better",
    "time",
    "progresses",
    "great",
    "let",
    "go",
    "ahead",
    "move",
    "actually",
    "testing",
    "working",
    "everything",
    "let",
    "go",
    "ahead",
    "scripts",
    "make",
    "little",
    "deploy",
    "script",
    "first",
    "let",
    "new",
    "file",
    "call",
    "deploy",
    "lottery",
    "pi",
    "let",
    "go",
    "ahead",
    "deploy",
    "lottery",
    "always",
    "def",
    "main",
    "come",
    "new",
    "function",
    "called",
    "ploy",
    "lottery",
    "def",
    "deploy",
    "lottery",
    "pass",
    "r",
    "run",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "lottery",
    "piy",
    "default",
    "network",
    "defined",
    "means",
    "default",
    "going",
    "development",
    "even",
    "verose",
    "development",
    "write",
    "brownie",
    "config",
    "run",
    "ganach",
    "get",
    "spun",
    "nothing",
    "happen",
    "deploy",
    "lottery",
    "function",
    "anything",
    "right",
    "awesome",
    "first",
    "thing",
    "need",
    "always",
    "deploy",
    "contract",
    "need",
    "account",
    "account",
    "equals",
    "using",
    "get",
    "account",
    "function",
    "time",
    "adding",
    "helpful",
    "script",
    "section",
    "pull",
    "real",
    "test",
    "net",
    "local",
    "development",
    "environment",
    "like",
    "course",
    "let",
    "create",
    "new",
    "helpful",
    "scripts",
    "pi",
    "create",
    "uncore",
    "python",
    "recognizes",
    "package",
    "create",
    "new",
    "function",
    "f",
    "get",
    "count",
    "pass",
    "copy",
    "deploy",
    "lottery",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "get",
    "account",
    "looked",
    "like",
    "last",
    "project",
    "along",
    "fork",
    "local",
    "environments",
    "also",
    "head",
    "brownie",
    "import",
    "accounts",
    "network",
    "config",
    "make",
    "look",
    "really",
    "nice",
    "right",
    "let",
    "flesh",
    "little",
    "bit",
    "even",
    "robust",
    "right",
    "know",
    "way",
    "use",
    "browny",
    "ganach",
    "accounts",
    "way",
    "use",
    "environment",
    "variables",
    "however",
    "third",
    "method",
    "learned",
    "identified",
    "accounts",
    "load",
    "id",
    "still",
    "account",
    "still",
    "brownie",
    "set",
    "brownie",
    "counts",
    "list",
    "see",
    "couple",
    "accounts",
    "want",
    "get",
    "account",
    "even",
    "liberal",
    "wanted",
    "use",
    "one",
    "well",
    "could",
    "let",
    "modify",
    "get",
    "account",
    "script",
    "little",
    "bit",
    "let",
    "first",
    "get",
    "rid",
    "else",
    "rid",
    "indent",
    "default",
    "nothing",
    "define",
    "prior",
    "defined",
    "default",
    "grab",
    "right",
    "config",
    "since",
    "let",
    "create",
    "env",
    "paste",
    "different",
    "variables",
    "private",
    "key",
    "web",
    "3",
    "inf",
    "fura",
    "need",
    "scan",
    "token",
    "brownie",
    "config",
    "course",
    "wallets",
    "key",
    "private",
    "key",
    "let",
    "flesh",
    "little",
    "bit",
    "let",
    "add",
    "index",
    "id",
    "index",
    "equals",
    "none",
    "idals",
    "way",
    "pass",
    "index",
    "get",
    "account",
    "function",
    "use",
    "use",
    "index",
    "accounts",
    "variable",
    "pass",
    "id",
    "trying",
    "accounts",
    "load",
    "let",
    "change",
    "little",
    "bit",
    "say",
    "index",
    "passed",
    "return",
    "accounts",
    "index",
    "otherwise",
    "local",
    "blockchain",
    "return",
    "accounts",
    "zero",
    "id",
    "return",
    "accounts",
    "load",
    "id",
    "whoops",
    "need",
    "actually",
    "move",
    "little",
    "bit",
    "local",
    "blockchain",
    "checking",
    "deploy",
    "lottery",
    "could",
    "something",
    "like",
    "get",
    "account",
    "id",
    "equals",
    "free",
    "code",
    "camp",
    "oops",
    "actually",
    "freecode",
    "account",
    "fre",
    "code",
    "camp",
    "account",
    "let",
    "try",
    "one",
    "time",
    "going",
    "ask",
    "password",
    "much",
    "liberal",
    "get",
    "account",
    "function",
    "count",
    "actually",
    "deploy",
    "lottery",
    "say",
    "lottery",
    "equals",
    "lottery",
    "deploy",
    "going",
    "import",
    "brownie",
    "import",
    "contract",
    "lottery",
    "going",
    "add",
    "different",
    "variables",
    "go",
    "back",
    "lottery",
    "contract",
    "need",
    "give",
    "price",
    "feed",
    "address",
    "vrf",
    "coordinator",
    "chain",
    "link",
    "token",
    "fee",
    "keyh",
    "way",
    "fundme",
    "way",
    "checked",
    "see",
    "local",
    "chain",
    "local",
    "chain",
    "would",
    "pull",
    "addresses",
    "directly",
    "config",
    "local",
    "chain",
    "though",
    "deploy",
    "mocks",
    "use",
    "address",
    "mocks",
    "going",
    "want",
    "thing",
    "let",
    "make",
    "lives",
    "little",
    "bit",
    "easier",
    "take",
    "whole",
    "process",
    "put",
    "function",
    "let",
    "make",
    "little",
    "bit",
    "easier",
    "mentally",
    "first",
    "thing",
    "going",
    "need",
    "price",
    "feed",
    "address",
    "real",
    "test",
    "net",
    "course",
    "would",
    "go",
    "brownie",
    "config",
    "add",
    "address",
    "add",
    "rink",
    "b",
    "network",
    "little",
    "bit",
    "worry",
    "rink",
    "chain",
    "going",
    "need",
    "deploy",
    "mock",
    "going",
    "wrap",
    "mocking",
    "checking",
    "single",
    "function",
    "called",
    "get",
    "contract",
    "going",
    "add",
    "function",
    "helpful",
    "scripts",
    "let",
    "create",
    "function",
    "called",
    "get",
    "contract",
    "def",
    "get",
    "contract",
    "pass",
    "let",
    "talk",
    "little",
    "bit",
    "want",
    "function",
    "let",
    "add",
    "one",
    "two",
    "three",
    "three",
    "double",
    "quotes",
    "three",
    "double",
    "quotes",
    "start",
    "called",
    "doc",
    "string",
    "define",
    "everything",
    "contract",
    "going",
    "say",
    "function",
    "grab",
    "contract",
    "addresses",
    "brownie",
    "config",
    "defined",
    "otherwise",
    "deploy",
    "mock",
    "version",
    "contract",
    "return",
    "mock",
    "contract",
    "arguments",
    "chain",
    "going",
    "take",
    "contract",
    "name",
    "going",
    "string",
    "return",
    "contract",
    "particular",
    "going",
    "return",
    "brownie",
    "network",
    "contract",
    "project",
    "contract",
    "recently",
    "deployed",
    "version",
    "contract",
    "example",
    "mock",
    "v3",
    "aggregator",
    "contract",
    "recently",
    "deployed",
    "version",
    "minus",
    "one",
    "syntax",
    "get",
    "contract",
    "function",
    "little",
    "confusing",
    "going",
    "go",
    "chain",
    "link",
    "mix",
    "little",
    "bit",
    "inside",
    "robust",
    "description",
    "going",
    "get",
    "contract",
    "bit",
    "check",
    "want",
    "learn",
    "let",
    "go",
    "ahead",
    "actually",
    "define",
    "obviously",
    "want",
    "contract",
    "name",
    "input",
    "parameter",
    "let",
    "go",
    "ahead",
    "add",
    "contract",
    "name",
    "meaning",
    "get",
    "contract",
    "function",
    "get",
    "something",
    "like",
    "fusd",
    "price",
    "feed",
    "right",
    "going",
    "defined",
    "browning",
    "config",
    "name",
    "going",
    "get",
    "type",
    "contract",
    "contract",
    "type",
    "going",
    "create",
    "mapping",
    "map",
    "contract",
    "names",
    "type",
    "right",
    "going",
    "contract",
    "mock",
    "going",
    "create",
    "mapping",
    "map",
    "everything",
    "fusd",
    "price",
    "feed",
    "going",
    "type",
    "mach",
    "v3",
    "aggregator",
    "import",
    "mach",
    "v3",
    "aggregator",
    "browny",
    "saying",
    "anytime",
    "see",
    "fusd",
    "price",
    "feed",
    "know",
    "going",
    "mach",
    "v3",
    "aggregator",
    "need",
    "deploy",
    "mo",
    "say",
    "contract",
    "type",
    "going",
    "equal",
    "contract",
    "mock",
    "contract",
    "name",
    "need",
    "check",
    "okay",
    "actually",
    "even",
    "need",
    "deploy",
    "mock",
    "sure",
    "let",
    "check",
    "local",
    "blockchain",
    "say",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "skip",
    "fork",
    "local",
    "environments",
    "need",
    "deploy",
    "mock",
    "price",
    "feed",
    "address",
    "fourth",
    "local",
    "environment",
    "say",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "check",
    "see",
    "one",
    "contracts",
    "already",
    "deployed",
    "say",
    "length",
    "contract",
    "type",
    "less",
    "equal",
    "zero",
    "going",
    "go",
    "ahead",
    "deploy",
    "mox",
    "equivalent",
    "something",
    "like",
    "mock",
    "b3",
    "aggregator",
    "length",
    "checking",
    "many",
    "mock",
    "v3",
    "aggregators",
    "actually",
    "deployed",
    "none",
    "deployed",
    "going",
    "go",
    "ahead",
    "deploy",
    "going",
    "create",
    "deploy",
    "mox",
    "function",
    "def",
    "deploy",
    "mox",
    "going",
    "brownie",
    "fundme",
    "right",
    "going",
    "exact",
    "say",
    "count",
    "equals",
    "get",
    "count",
    "going",
    "put",
    "prints",
    "absolutely",
    "say",
    "mock",
    "price",
    "feed",
    "equals",
    "mock",
    "b3",
    "music",
    "aggregator",
    "deploy",
    "need",
    "give",
    "decimals",
    "initial",
    "value",
    "right",
    "decimals",
    "equals",
    "8",
    "initial",
    "value",
    "equals",
    "2000",
    "2",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "deploy",
    "marx",
    "say",
    "decimals",
    "equals",
    "decimals",
    "initial",
    "value",
    "equals",
    "initial",
    "value",
    "deploy",
    "decimals",
    "initial",
    "value",
    "course",
    "going",
    "count",
    "say",
    "print",
    "deployed",
    "right",
    "great",
    "way",
    "actually",
    "deploy",
    "mock",
    "price",
    "feed",
    "let",
    "go",
    "back",
    "get",
    "contract",
    "function",
    "way",
    "deploy",
    "mock",
    "one",
    "already",
    "deployed",
    "going",
    "want",
    "want",
    "get",
    "contract",
    "right",
    "going",
    "want",
    "get",
    "mock",
    "say",
    "contract",
    "equals",
    "contract",
    "type",
    "minus",
    "one",
    "right",
    "going",
    "equal",
    "mock",
    "v3",
    "gregor",
    "minus",
    "one",
    "saying",
    "hey",
    "let",
    "grab",
    "recent",
    "deployment",
    "mock",
    "v3",
    "aggregator",
    "exactly",
    "want",
    "perfect",
    "work",
    "perfectly",
    "development",
    "context",
    "however",
    "always",
    "going",
    "want",
    "deploy",
    "development",
    "network",
    "also",
    "going",
    "want",
    "deploy",
    "test",
    "nets",
    "say",
    "else",
    "grab",
    "contract",
    "rning",
    "config",
    "example",
    "us",
    "price",
    "feed",
    "say",
    "contract",
    "address",
    "equals",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "contract",
    "name",
    "example",
    "ethusd",
    "priz",
    "feed",
    "ethusd",
    "priz",
    "feed",
    "way",
    "setting",
    "got",
    "contract",
    "mock",
    "dictionary",
    "way",
    "actually",
    "got",
    "contract",
    "contract",
    "type",
    "based",
    "brownie",
    "going",
    "interact",
    "contract",
    "getting",
    "two",
    "pieces",
    "always",
    "need",
    "going",
    "address",
    "actually",
    "abi",
    "mach",
    "v3",
    "aggregator",
    "type",
    "right",
    "got",
    "address",
    "create",
    "new",
    "contract",
    "type",
    "saying",
    "contract",
    "equals",
    "contract",
    "abi",
    "contract",
    "package",
    "imported",
    "right",
    "brownie",
    "function",
    "abi",
    "allows",
    "us",
    "get",
    "contract",
    "abi",
    "address",
    "give",
    "name",
    "say",
    "contract",
    "typeor",
    "name",
    "contract",
    "address",
    "contract",
    "type",
    "ai",
    "mock",
    "v3",
    "aggregators",
    "contracts",
    "aavi",
    "attribute",
    "returns",
    "ai",
    "also",
    "aore",
    "name",
    "returns",
    "name",
    "perfect",
    "get",
    "contract",
    "otherwise",
    "end",
    "return",
    "contract",
    "awesome",
    "incredibly",
    "powerful",
    "function",
    "us",
    "get",
    "contract",
    "based",
    "already",
    "deployed",
    "mock",
    "real",
    "true",
    "contract",
    "know",
    "kind",
    "lot",
    "definitely",
    "check",
    "github",
    "repository",
    "little",
    "bit",
    "confused",
    "going",
    "function",
    "let",
    "let",
    "also",
    "deploy",
    "make",
    "lter",
    "happy",
    "yays",
    "code",
    "happy",
    "function",
    "let",
    "go",
    "back",
    "deploy",
    "lottery",
    "comma",
    "get",
    "account",
    "get",
    "account",
    "function",
    "let",
    "go",
    "lottery",
    "deploy",
    "get",
    "account",
    "going",
    "get",
    "fusd",
    "price",
    "feed",
    "mock",
    "deployed",
    "going",
    "deploy",
    "mock",
    "price",
    "feed",
    "us",
    "going",
    "return",
    "mock",
    "price",
    "feed",
    "however",
    "test",
    "net",
    "real",
    "network",
    "going",
    "grab",
    "actual",
    "address",
    "return",
    "mock",
    "contract",
    "mock",
    "contract",
    "functions",
    "regular",
    "contract",
    "use",
    "way",
    "adjust",
    "function",
    "whether",
    "deploying",
    "test",
    "net",
    "actual",
    "address",
    "additional",
    "piece",
    "put",
    "clarity",
    "add",
    "address",
    "going",
    "return",
    "actual",
    "contract",
    "really",
    "want",
    "address",
    "going",
    "make",
    "coding",
    "lot",
    "robust",
    "moving",
    "development",
    "environments",
    "test",
    "environments",
    "working",
    "scripts",
    "really",
    "effective",
    "manner",
    "incredibly",
    "powerful",
    "function",
    "let",
    "go",
    "back",
    "lottery",
    "figure",
    "different",
    "pieces",
    "need",
    "okay",
    "great",
    "also",
    "need",
    "vrf",
    "coordinator",
    "going",
    "go",
    "back",
    "docs",
    "chain",
    "link",
    "go",
    "contract",
    "addresses",
    "could",
    "main",
    "net",
    "let",
    "also",
    "set",
    "work",
    "rink",
    "b",
    "crlf",
    "rink",
    "b",
    "vrf",
    "coordinator",
    "going",
    "address",
    "right",
    "copy",
    "go",
    "back",
    "going",
    "config",
    "going",
    "add",
    "new",
    "network",
    "rank",
    "b",
    "vrf",
    "coordinator",
    "address",
    "right",
    "let",
    "also",
    "get",
    "rink",
    "b",
    "address",
    "price",
    "feed",
    "price",
    "feeds",
    "rink",
    "scroll",
    "fusd",
    "fusd",
    "go",
    "grab",
    "enter",
    "fusd",
    "price",
    "feed",
    "paste",
    "perfect",
    "get",
    "contract",
    "vrf",
    "coordinator",
    "address",
    "course",
    "going",
    "go",
    "back",
    "helpful",
    "scripts",
    "currently",
    "mapping",
    "vrf",
    "coordinator",
    "mock",
    "needs",
    "add",
    "comma",
    "vf",
    "coordinator",
    "need",
    "get",
    "mock",
    "vf",
    "coordinator",
    "well",
    "first",
    "even",
    "mock",
    "v3",
    "aggregator",
    "let",
    "go",
    "grab",
    "well",
    "grab",
    "going",
    "highly",
    "recommend",
    "going",
    "chain",
    "link",
    "mix",
    "going",
    "contracts",
    "going",
    "test",
    "folder",
    "different",
    "mocks",
    "already",
    "set",
    "work",
    "chain",
    "link",
    "mix",
    "however",
    "definitely",
    "go",
    "chain",
    "link",
    "help",
    "well",
    "go",
    "contracts",
    "src",
    "tests",
    "look",
    "different",
    "mocks",
    "mock",
    "oracle",
    "vf",
    "coordinator",
    "mock",
    "etc",
    "going",
    "going",
    "grab",
    "though",
    "chain",
    "link",
    "mix",
    "let",
    "go",
    "vrf",
    "coordinator",
    "mock",
    "going",
    "grab",
    "whole",
    "thing",
    "contracts",
    "folder",
    "test",
    "file",
    "vf",
    "mock",
    "soul",
    "paste",
    "want",
    "new",
    "file",
    "mock",
    "d3",
    "aor",
    "grab",
    "well",
    "train",
    "mix",
    "got",
    "functions",
    "price",
    "feed",
    "update",
    "answer",
    "latest",
    "round",
    "etc",
    "vf",
    "coordinator",
    "walk",
    "different",
    "functions",
    "actually",
    "working",
    "vf",
    "coordinator",
    "one",
    "specific",
    "ones",
    "particular",
    "call",
    "back",
    "randomness",
    "going",
    "use",
    "tests",
    "vrf",
    "coordinator",
    "going",
    "get",
    "mapped",
    "vrf",
    "theor",
    "mock",
    "also",
    "import",
    "bring",
    "great",
    "double",
    "check",
    "everything",
    "working",
    "want",
    "run",
    "quick",
    "bring",
    "compile",
    "make",
    "sure",
    "importing",
    "mocks",
    "correctly",
    "everything",
    "compiling",
    "looks",
    "like",
    "good",
    "right",
    "get",
    "contract",
    "bure",
    "coordinator",
    "address",
    "perfect",
    "else",
    "need",
    "need",
    "link",
    "token",
    "chain",
    "link",
    "token",
    "course",
    "another",
    "smart",
    "contract",
    "going",
    "exact",
    "thing",
    "get",
    "contract",
    "link",
    "token",
    "address",
    "course",
    "means",
    "config",
    "rink",
    "b",
    "let",
    "add",
    "link",
    "token",
    "address",
    "go",
    "chain",
    "link",
    "documentation",
    "go",
    "link",
    "token",
    "contracts",
    "look",
    "rink",
    "b",
    "grab",
    "address",
    "drop",
    "perfect",
    "brownie",
    "config",
    "also",
    "need",
    "add",
    "helpful",
    "scripts",
    "need",
    "mock",
    "link",
    "token",
    "go",
    "ahead",
    "grab",
    "chain",
    "link",
    "mix",
    "go",
    "test",
    "probably",
    "see",
    "often",
    "normally",
    "literally",
    "copy",
    "entire",
    "test",
    "folder",
    "project",
    "project",
    "going",
    "copy",
    "whole",
    "thing",
    "create",
    "new",
    "file",
    "going",
    "call",
    "one",
    "link",
    "token",
    "soul",
    "contract",
    "link",
    "token",
    "perfect",
    "helpful",
    "scripts",
    "going",
    "link",
    "token",
    "course",
    "going",
    "import",
    "br",
    "great",
    "get",
    "contract",
    "link",
    "token",
    "address",
    "perfect",
    "else",
    "need",
    "need",
    "fee",
    "keyh",
    "fee",
    "keyh",
    "numbers",
    "right",
    "actually",
    "contracts",
    "need",
    "put",
    "get",
    "contract",
    "bit",
    "config",
    "development",
    "network",
    "add",
    "default",
    "key",
    "fee",
    "going",
    "set",
    "development",
    "keyh",
    "fee",
    "equal",
    "rinky",
    "ones",
    "grab",
    "go",
    "chain",
    "link",
    "dogs",
    "scroll",
    "using",
    "randomness",
    "contract",
    "addresses",
    "look",
    "rink",
    "b",
    "grab",
    "key",
    "hash",
    "paste",
    "development",
    "rink",
    "b",
    "fee",
    "says",
    "link",
    "way",
    "one",
    "1",
    "2",
    "3",
    "4",
    "5",
    "six",
    "seven",
    "8",
    "nine",
    "10",
    "1",
    "2",
    "3",
    "four",
    "five",
    "six",
    "seven",
    "line",
    "ring",
    "v",
    "well",
    "deploy",
    "lottery",
    "grab",
    "directly",
    "browning",
    "config",
    "always",
    "going",
    "default",
    "keyh",
    "default",
    "fee",
    "development",
    "network",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "ones",
    "first",
    "fee",
    "fee",
    "course",
    "means",
    "gon",
    "na",
    "grab",
    "network",
    "brownie",
    "also",
    "config",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "course",
    "last",
    "bit",
    "account",
    "additionally",
    "learned",
    "last",
    "time",
    "want",
    "publish",
    "publish",
    "source",
    "equals",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "say",
    "doget",
    "verify",
    "add",
    "false",
    "bit",
    "saying",
    "get",
    "verify",
    "key",
    "verify",
    "key",
    "default",
    "false",
    "way",
    "set",
    "verify",
    "key",
    "development",
    "fine",
    "wo",
    "get",
    "verify",
    "rink",
    "b",
    "let",
    "go",
    "ahead",
    "said",
    "verify",
    "true",
    "actually",
    "verify",
    "rink",
    "b",
    "chain",
    "even",
    "print",
    "statement",
    "floyed",
    "lottery",
    "right",
    "lovely",
    "let",
    "try",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "lottery",
    "wo",
    "set",
    "network",
    "flag",
    "go",
    "default",
    "development",
    "network",
    "let",
    "try",
    "things",
    "compiling",
    "ganach",
    "spinning",
    "looks",
    "like",
    "run",
    "little",
    "issue",
    "get",
    "contract",
    "function",
    "ah",
    "course",
    "forgot",
    "add",
    "deploying",
    "mocks",
    "deploy",
    "mock",
    "script",
    "whoops",
    "let",
    "go",
    "ahead",
    "add",
    "well",
    "right",
    "deploy",
    "mocks",
    "deploys",
    "mock",
    "v3",
    "aggregator",
    "let",
    "add",
    "rest",
    "mocks",
    "going",
    "need",
    "deploy",
    "vrf",
    "coordinator",
    "mock",
    "chain",
    "link",
    "token",
    "model",
    "let",
    "open",
    "contracts",
    "see",
    "need",
    "link",
    "token",
    "constructor",
    "constructor",
    "blank",
    "link",
    "token",
    "deploy",
    "need",
    "account",
    "let",
    "see",
    "vrf",
    "coordinator",
    "mock",
    "takes",
    "vf",
    "coordinator",
    "mock",
    "takes",
    "link",
    "token",
    "address",
    "perfect",
    "deploy",
    "link",
    "token",
    "say",
    "link",
    "token",
    "equals",
    "link",
    "token",
    "deploy",
    "vf",
    "dor",
    "mock",
    "deploy",
    "deoy",
    "use",
    "link",
    "token",
    "address",
    "input",
    "parameter",
    "course",
    "count",
    "right",
    "deploying",
    "three",
    "mocks",
    "right",
    "away",
    "let",
    "try",
    "ry",
    "run",
    "scripts",
    "deploy",
    "lottery",
    "py",
    "gach",
    "sp",
    "perfect",
    "see",
    "mock",
    "v3",
    "aggregator",
    "deployed",
    "mock",
    "link",
    "token",
    "deployed",
    "mock",
    "vrf",
    "coordinator",
    "deployed",
    "lottery",
    "deployed",
    "mocks",
    "finded",
    "deployed",
    "lottery",
    "awesome",
    "could",
    "100",
    "go",
    "ahead",
    "run",
    "script",
    "actual",
    "test",
    "right",
    "config",
    "set",
    "well",
    "let",
    "write",
    "functionality",
    "actually",
    "interacting",
    "lottery",
    "actually",
    "actually",
    "run",
    "script",
    "functionality",
    "end",
    "end",
    "deploying",
    "test",
    "net",
    "takes",
    "long",
    "time",
    "really",
    "want",
    "done",
    "fairly",
    "confident",
    "everything",
    "working",
    "well",
    "let",
    "even",
    "delete",
    "next",
    "thing",
    "want",
    "next",
    "thing",
    "want",
    "script",
    "well",
    "probably",
    "want",
    "go",
    "ahead",
    "start",
    "lot",
    "let",
    "write",
    "script",
    "actually",
    "def",
    "start",
    "lottery",
    "get",
    "account",
    "let",
    "get",
    "account",
    "say",
    "lottery",
    "going",
    "recent",
    "deployment",
    "lottery",
    "going",
    "call",
    "start",
    "lottery",
    "function",
    "indeed",
    "changing",
    "state",
    "make",
    "transaction",
    "lottery",
    "let",
    "start",
    "lottery",
    "say",
    "count",
    "little",
    "print",
    "say",
    "lottery",
    "started",
    "main",
    "function",
    "even",
    "call",
    "start",
    "lottery",
    "function",
    "run",
    "development",
    "chain",
    "see",
    "everything",
    "works",
    "smoothly",
    "okay",
    "run",
    "issue",
    "something",
    "see",
    "time",
    "time",
    "typically",
    "workaround",
    "want",
    "wait",
    "last",
    "transaction",
    "actually",
    "go",
    "say",
    "starting",
    "transaction",
    "equals",
    "lottery",
    "start",
    "lottery",
    "starting",
    "transaction",
    "wait",
    "one",
    "browny",
    "sometimes",
    "gets",
    "little",
    "confused",
    "wait",
    "last",
    "transaction",
    "go",
    "let",
    "try",
    "perfect",
    "get",
    "working",
    "uh",
    "intended",
    "really",
    "helpful",
    "helpful",
    "tip",
    "run",
    "weird",
    "issues",
    "notice",
    "even",
    "still",
    "completed",
    "successfully",
    "uh",
    "got",
    "little",
    "confused",
    "end",
    "right",
    "cool",
    "want",
    "next",
    "well",
    "probably",
    "want",
    "enter",
    "lottery",
    "let",
    "dev",
    "enter",
    "lottery",
    "enter",
    "lottery",
    "say",
    "account",
    "equals",
    "get",
    "account",
    "lottery",
    "going",
    "lottery",
    "minus",
    "one",
    "need",
    "pick",
    "value",
    "send",
    "call",
    "enter",
    "function",
    "right",
    "need",
    "send",
    "entrance",
    "fee",
    "say",
    "value",
    "equals",
    "lottery",
    "getet",
    "entrance",
    "fee",
    "safe",
    "usually",
    "tack",
    "little",
    "bit",
    "whey",
    "well",
    "sometimes",
    "might",
    "like",
    "one",
    "two",
    "something",
    "like",
    "lottery",
    "get",
    "entrance",
    "fee",
    "plus",
    "know",
    "maybe",
    "something",
    "like",
    "like",
    "barely",
    "anything",
    "transaction",
    "equals",
    "lottery",
    "enter",
    "account",
    "send",
    "value",
    "valume",
    "tx",
    "weight",
    "print",
    "entered",
    "lottery",
    "enter",
    "lottery",
    "bit",
    "enter",
    "lottery",
    "run",
    "see",
    "enter",
    "script",
    "working",
    "appropriately",
    "entered",
    "lottery",
    "looks",
    "great",
    "let",
    "last",
    "function",
    "def",
    "end",
    "lottery",
    "count",
    "equals",
    "get",
    "account",
    "lottery",
    "equals",
    "lottery",
    "minus",
    "one",
    "make",
    "transaction",
    "lottery",
    "end",
    "lottery",
    "actually",
    "end",
    "lottery",
    "going",
    "need",
    "link",
    "token",
    "contract",
    "remember",
    "end",
    "lottery",
    "function",
    "calls",
    "request",
    "randomness",
    "function",
    "request",
    "randomness",
    "contract",
    "chain",
    "link",
    "token",
    "associated",
    "going",
    "need",
    "first",
    "fund",
    "contract",
    "end",
    "lottery",
    "since",
    "funding",
    "contracts",
    "link",
    "token",
    "going",
    "pretty",
    "common",
    "function",
    "use",
    "let",
    "go",
    "ahead",
    "turn",
    "also",
    "helpful",
    "script",
    "let",
    "go",
    "helpful",
    "scripts",
    "make",
    "new",
    "function",
    "called",
    "fund",
    "link",
    "let",
    "take",
    "couple",
    "parameters",
    "first",
    "want",
    "contract",
    "address",
    "course",
    "want",
    "know",
    "going",
    "fund",
    "link",
    "set",
    "default",
    "account",
    "none",
    "want",
    "send",
    "account",
    "want",
    "also",
    "thing",
    "link",
    "token",
    "say",
    "want",
    "use",
    "specific",
    "link",
    "token",
    "otherwise",
    "grab",
    "also",
    "default",
    "amount",
    "set",
    "one",
    "1",
    "2",
    "3",
    "four",
    "5",
    "six",
    "seven",
    "eight",
    "nine",
    "10",
    "1",
    "2",
    "3",
    "four",
    "five",
    "six",
    "seven",
    "going",
    "link",
    "first",
    "let",
    "get",
    "account",
    "say",
    "account",
    "equals",
    "going",
    "little",
    "clever",
    "python",
    "stuff",
    "say",
    "account",
    "equals",
    "account",
    "somebody",
    "sent",
    "account",
    "saying",
    "account",
    "use",
    "going",
    "account",
    "thing",
    "account",
    "thing",
    "even",
    "exists",
    "otherwise",
    "call",
    "get",
    "account",
    "otherwise",
    "regular",
    "get",
    "account",
    "function",
    "thing",
    "link",
    "token",
    "say",
    "link",
    "token",
    "going",
    "equal",
    "link",
    "token",
    "somebody",
    "supplies",
    "parameter",
    "applied",
    "something",
    "parameter",
    "otherwise",
    "get",
    "contract",
    "stuff",
    "link",
    "token",
    "link",
    "token",
    "contract",
    "get",
    "contract",
    "function",
    "basically",
    "equivalent",
    "contract",
    "abi",
    "link",
    "token",
    "pulling",
    "config",
    "mock",
    "call",
    "functions",
    "link",
    "token",
    "get",
    "say",
    "transaction",
    "equals",
    "link",
    "token",
    "transfer",
    "going",
    "transfer",
    "token",
    "contract",
    "address",
    "certain",
    "amount",
    "course",
    "count",
    "tx",
    "print",
    "funded",
    "contract",
    "even",
    "return",
    "transaction",
    "however",
    "want",
    "show",
    "another",
    "way",
    "work",
    "using",
    "interfaces",
    "instead",
    "link",
    "token",
    "transfer",
    "directly",
    "contract",
    "use",
    "interfaces",
    "section",
    "actually",
    "interact",
    "contracts",
    "right",
    "mock",
    "link",
    "token",
    "great",
    "definitions",
    "functionalities",
    "defined",
    "sometimes",
    "going",
    "contracts",
    "everything",
    "functionality",
    "maybe",
    "interface",
    "maybe",
    "function",
    "definitions",
    "still",
    "interact",
    "contracts",
    "interface",
    "interface",
    "compile",
    "ai",
    "another",
    "way",
    "teaching",
    "us",
    "actually",
    "work",
    "contracts",
    "use",
    "use",
    "link",
    "token",
    "interface",
    "basically",
    "way",
    "use",
    "link",
    "token",
    "contract",
    "chain",
    "link",
    "mix",
    "already",
    "link",
    "token",
    "interface",
    "compile",
    "way",
    "brownie",
    "package",
    "knows",
    "interact",
    "contracts",
    "wanted",
    "could",
    "grab",
    "go",
    "brownie",
    "section",
    "new",
    "file",
    "interfaces",
    "call",
    "link",
    "token",
    "interface",
    "soul",
    "paste",
    "save",
    "auto",
    "format",
    "auto",
    "formatted",
    "helpful",
    "scripts",
    "instead",
    "transaction",
    "equals",
    "interface",
    "also",
    "import",
    "interfaces",
    "right",
    "brownie",
    "interface",
    "dot",
    "link",
    "token",
    "interface",
    "need",
    "give",
    "contract",
    "address",
    "say",
    "link",
    "token",
    "address",
    "excuse",
    "say",
    "link",
    "token",
    "contract",
    "interface",
    "link",
    "token",
    "interface",
    "link",
    "token",
    "address",
    "another",
    "way",
    "actually",
    "create",
    "contracts",
    "actually",
    "interact",
    "saw",
    "contract",
    "abi",
    "great",
    "another",
    "way",
    "exact",
    "thing",
    "link",
    "token",
    "contract",
    "transfer",
    "contract",
    "address",
    "amount",
    "count",
    "tx",
    "equals",
    "another",
    "way",
    "actually",
    "interact",
    "contracts",
    "already",
    "exists",
    "probably",
    "starting",
    "see",
    "brownie",
    "lot",
    "tools",
    "make",
    "really",
    "easy",
    "us",
    "interact",
    "contracts",
    "abi",
    "pop",
    "contract",
    "abi",
    "address",
    "abi",
    "give",
    "name",
    "interface",
    "even",
    "need",
    "compile",
    "ai",
    "brownie",
    "smart",
    "enough",
    "know",
    "compile",
    "ai",
    "could",
    "work",
    "directly",
    "interface",
    "incredibly",
    "powerful",
    "going",
    "comment",
    "two",
    "lines",
    "though",
    "use",
    "link",
    "token",
    "transfer",
    "funding",
    "script",
    "funding",
    "function",
    "import",
    "helpful",
    "scripts",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "get",
    "contract",
    "fund",
    "link",
    "call",
    "end",
    "lottery",
    "function",
    "fund",
    "link",
    "parameters",
    "really",
    "need",
    "contract",
    "address",
    "way",
    "set",
    "automatically",
    "grab",
    "default",
    "otherwise",
    "say",
    "lottery",
    "address",
    "need",
    "know",
    "tx",
    "weight",
    "right",
    "fund",
    "link",
    "rebose",
    "get",
    "transaction",
    "fund",
    "link",
    "tx",
    "well",
    "funded",
    "link",
    "go",
    "ahead",
    "call",
    "end",
    "lottery",
    "function",
    "going",
    "call",
    "request",
    "randomness",
    "function",
    "chin",
    "bef",
    "end",
    "ending",
    "transaction",
    "equals",
    "lottery",
    "end",
    "lottery",
    "count",
    "ending",
    "transaction",
    "weight",
    "one",
    "end",
    "really",
    "need",
    "right",
    "remember",
    "call",
    "end",
    "lottery",
    "function",
    "going",
    "make",
    "request",
    "chain",
    "link",
    "node",
    "chain",
    "link",
    "node",
    "going",
    "respond",
    "calling",
    "fulfill",
    "randomness",
    "function",
    "actually",
    "wait",
    "chain",
    "link",
    "node",
    "finish",
    "typically",
    "within",
    "blocks",
    "normally",
    "time",
    "dos",
    "sleep",
    "something",
    "like",
    "60",
    "seconds",
    "typically",
    "time",
    "chain",
    "lck",
    "node",
    "responded",
    "import",
    "time",
    "top",
    "time",
    "sleep",
    "see",
    "recent",
    "winner",
    "chain",
    "link",
    "node",
    "responded",
    "recent",
    "winner",
    "say",
    "print",
    "f",
    "lottery",
    "recent",
    "winner",
    "new",
    "winner",
    "right",
    "course",
    "thinking",
    "ahead",
    "little",
    "bit",
    "might",
    "thinking",
    "hey",
    "well",
    "chain",
    "link",
    "nodes",
    "watching",
    "local",
    "ganache",
    "exactly",
    "correct",
    "happens",
    "add",
    "end",
    "lottery",
    "function",
    "main",
    "function",
    "think",
    "going",
    "actually",
    "get",
    "recent",
    "winner",
    "back",
    "actually",
    "think",
    "well",
    "let",
    "give",
    "shot",
    "brownie",
    "run",
    "scripts",
    "employ",
    "lottery",
    "depy",
    "lot",
    "transactions",
    "started",
    "lottery",
    "entering",
    "ing",
    "lottery",
    "entered",
    "lottery",
    "sending",
    "link",
    "token",
    "called",
    "end",
    "lottery",
    "function",
    "waiting",
    "chain",
    "link",
    "node",
    "would",
    "go",
    "ahead",
    "start",
    "responding",
    "randomness",
    "however",
    "probably",
    "astutely",
    "telling",
    "however",
    "probably",
    "astutely",
    "guessed",
    "chain",
    "link",
    "node",
    "going",
    "call",
    "fulfill",
    "randomness",
    "function",
    "right",
    "ganache",
    "chain",
    "hypothetically",
    "end",
    "nothing",
    "right",
    "chain",
    "link",
    "node",
    "actually",
    "responding",
    "zero",
    "new",
    "winner",
    "course",
    "means",
    "chain",
    "link",
    "node",
    "actually",
    "respond",
    "chain",
    "link",
    "node",
    "local",
    "ganache",
    "testing",
    "purposes",
    "going",
    "figure",
    "actually",
    "get",
    "around",
    "deal",
    "awesome",
    "looks",
    "like",
    "everything",
    "set",
    "successful",
    "lottery",
    "want",
    "due",
    "diligence",
    "want",
    "make",
    "sure",
    "tests",
    "really",
    "solid",
    "development",
    "chain",
    "actually",
    "test",
    "actual",
    "test",
    "net",
    "let",
    "jump",
    "tests",
    "already",
    "started",
    "test",
    "lottery",
    "piy",
    "bit",
    "going",
    "iterate",
    "make",
    "even",
    "better",
    "get",
    "tests",
    "couple",
    "things",
    "want",
    "talk",
    "going",
    "integration",
    "tests",
    "unit",
    "tests",
    "unit",
    "test",
    "way",
    "testing",
    "smallest",
    "pieces",
    "code",
    "isolated",
    "system",
    "going",
    "use",
    "loosely",
    "define",
    "testing",
    "independent",
    "functions",
    "lottery",
    "cont",
    "also",
    "want",
    "called",
    "integration",
    "testing",
    "going",
    "testing",
    "across",
    "multiple",
    "complex",
    "pieces",
    "typically",
    "like",
    "run",
    "unit",
    "tests",
    "exclusively",
    "development",
    "environment",
    "integration",
    "tests",
    "test",
    "net",
    "really",
    "helpful",
    "test",
    "majority",
    "application",
    "like",
    "said",
    "development",
    "network",
    "still",
    "able",
    "see",
    "actually",
    "happens",
    "real",
    "testet",
    "see",
    "happens",
    "ether",
    "scan",
    "everything",
    "like",
    "typically",
    "people",
    "ins",
    "side",
    "test",
    "folder",
    "create",
    "two",
    "different",
    "folders",
    "one",
    "unit",
    "another",
    "folder",
    "creation",
    "since",
    "demo",
    "going",
    "one",
    "file",
    "going",
    "go",
    "ahead",
    "create",
    "folders",
    "pretty",
    "common",
    "practice",
    "instead",
    "going",
    "going",
    "rename",
    "going",
    "hit",
    "enter",
    "renamed",
    "underscore",
    "type",
    "unit",
    "unit",
    "test",
    "going",
    "create",
    "new",
    "file",
    "called",
    "test",
    "lottery",
    "integration",
    "one",
    "integration",
    "tests",
    "one",
    "unit",
    "tests",
    "writing",
    "unit",
    "tests",
    "really",
    "want",
    "test",
    "hypothetically",
    "every",
    "single",
    "line",
    "code",
    "smart",
    "contract",
    "incredibly",
    "important",
    "course",
    "smart",
    "contracts",
    "open",
    "everybody",
    "see",
    "interact",
    "really",
    "want",
    "test",
    "every",
    "single",
    "line",
    "code",
    "let",
    "go",
    "ahead",
    "let",
    "go",
    "ahead",
    "finish",
    "writing",
    "get",
    "entrance",
    "fee",
    "test",
    "work",
    "local",
    "development",
    "network",
    "see",
    "already",
    "going",
    "factor",
    "originally",
    "let",
    "go",
    "ahead",
    "delete",
    "everything",
    "already",
    "learned",
    "much",
    "right",
    "going",
    "test",
    "get",
    "entrance",
    "view",
    "function",
    "first",
    "going",
    "want",
    "deploy",
    "lottery",
    "since",
    "deploy",
    "lottery",
    "script",
    "already",
    "use",
    "deployed",
    "lottery",
    "script",
    "well",
    "wanted",
    "could",
    "copy",
    "paste",
    "whole",
    "part",
    "test",
    "going",
    "go",
    "ahead",
    "work",
    "deploy",
    "lottery",
    "script",
    "going",
    "import",
    "actually",
    "even",
    "get",
    "rid",
    "web",
    "three",
    "line",
    "get",
    "rid",
    "two",
    "comments",
    "say",
    "scripts",
    "deploy",
    "lottery",
    "import",
    "deploy",
    "lottery",
    "deploy",
    "lottery",
    "function",
    "would",
    "say",
    "lottery",
    "equals",
    "deploy",
    "lottery",
    "return",
    "lottery",
    "unit",
    "test",
    "say",
    "lottery",
    "equals",
    "deploy",
    "lottery",
    "give",
    "us",
    "lottery",
    "contract",
    "lottery",
    "contract",
    "call",
    "get",
    "entrance",
    "fee",
    "say",
    "entrance",
    "fee",
    "equals",
    "lottery",
    "getet",
    "entrance",
    "fee",
    "oops",
    "let",
    "make",
    "sure",
    "rrange",
    "act",
    "certainer",
    "mentality",
    "going",
    "want",
    "make",
    "sure",
    "entrance",
    "fee",
    "expected",
    "expect",
    "well",
    "helpful",
    "scripts",
    "going",
    "deploy",
    "mocks",
    "right",
    "going",
    "deploy",
    "mock",
    "initial",
    "value",
    "number",
    "price",
    "e",
    "fusd",
    "feed",
    "usd",
    "entry",
    "fee",
    "50",
    "say",
    "1",
    "equal",
    "50",
    "x",
    "going",
    "equal",
    "go",
    "ahead",
    "even",
    "math",
    "say",
    "expected",
    "expected",
    "entrance",
    "fee",
    "going",
    "equal",
    "going",
    "equal",
    "50",
    "divided",
    "way",
    "web",
    "3",
    "support",
    "web",
    "3",
    "say",
    "web",
    "way",
    "ether",
    "assert",
    "expected",
    "entrance",
    "fee",
    "equals",
    "entrance",
    "fee",
    "test",
    "browny",
    "k",
    "perfect",
    "working",
    "exactly",
    "anticipated",
    "awesome",
    "mentioned",
    "since",
    "unit",
    "test",
    "really",
    "want",
    "run",
    "working",
    "local",
    "environment",
    "local",
    "blockchain",
    "environment",
    "local",
    "development",
    "network",
    "go",
    "ahead",
    "pest",
    "say",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "pest",
    "skip",
    "course",
    "going",
    "import",
    "pest",
    "gon",
    "na",
    "import",
    "local",
    "blockchain",
    "environments",
    "scripts",
    "helpful",
    "scripts",
    "vs",
    "code",
    "automatically",
    "added",
    "bit",
    "try",
    "run",
    "brownie",
    "run",
    "exc",
    "brownie",
    "test",
    "dk",
    "get",
    "entrance",
    "fe",
    "das",
    "dash",
    "network",
    "rink",
    "b",
    "rink",
    "eb",
    "go",
    "ahead",
    "skip",
    "perfect",
    "next",
    "piece",
    "makes",
    "sense",
    "enter",
    "going",
    "one",
    "first",
    "things",
    "developers",
    "let",
    "test",
    "def",
    "test",
    "enter",
    "let",
    "even",
    "specific",
    "want",
    "people",
    "able",
    "enter",
    "lotteries",
    "unless",
    "lottery",
    "actually",
    "started",
    "let",
    "make",
    "sure",
    "line",
    "actually",
    "works",
    "call",
    "def",
    "test",
    "ca",
    "enter",
    "unless",
    "started",
    "going",
    "run",
    "local",
    "development",
    "chain",
    "copy",
    "paste",
    "section",
    "say",
    "lottery",
    "equals",
    "ploy",
    "lottery",
    "going",
    "want",
    "work",
    "lottery",
    "going",
    "want",
    "people",
    "try",
    "enter",
    "lottery",
    "started",
    "yet",
    "going",
    "revert",
    "use",
    "used",
    "say",
    "py",
    "test",
    "raises",
    "exceptions",
    "virtual",
    "machine",
    "error",
    "lottery",
    "enter",
    "get",
    "account",
    "value",
    "get",
    "entrance",
    "fee",
    "course",
    "going",
    "import",
    "get",
    "count",
    "helpful",
    "scripts",
    "exceptions",
    "brownie",
    "perfect",
    "well",
    "following",
    "arrange",
    "actually",
    "act",
    "slash",
    "assert",
    "let",
    "go",
    "ahead",
    "test",
    "brownie",
    "k",
    "test",
    "ca",
    "enter",
    "unless",
    "starters",
    "let",
    "start",
    "ed",
    "great",
    "passing",
    "well",
    "let",
    "go",
    "ahead",
    "keep",
    "going",
    "list",
    "else",
    "tested",
    "whether",
    "ca",
    "enter",
    "let",
    "test",
    "whether",
    "enter",
    "def",
    "test",
    "start",
    "enter",
    "lottery",
    "going",
    "copy",
    "paste",
    "since",
    "going",
    "work",
    "local",
    "blockchain",
    "lottery",
    "equals",
    "deploy",
    "lottery",
    "account",
    "equals",
    "get",
    "account",
    "start",
    "lottery",
    "lottery",
    "start",
    "starty",
    "count",
    "lottery",
    "enter",
    "count",
    "say",
    "value",
    "lottery",
    "getet",
    "entrance",
    "fee",
    "assert",
    "correctly",
    "added",
    "player",
    "lottery",
    "assert",
    "lottery",
    "players",
    "zero",
    "going",
    "account",
    "right",
    "players",
    "array",
    "going",
    "assert",
    "pushing",
    "onto",
    "array",
    "correctly",
    "lottery",
    "players",
    "zero",
    "equals",
    "account",
    "act",
    "assert",
    "let",
    "try",
    "browny",
    "k",
    "test",
    "start",
    "enter",
    "lottery",
    "awesome",
    "things",
    "looking",
    "great",
    "let",
    "test",
    "see",
    "actually",
    "end",
    "lottery",
    "tested",
    "start",
    "lottery",
    "dev",
    "test",
    "end",
    "lottery",
    "going",
    "copy",
    "paste",
    "lottery",
    "equals",
    "deploy",
    "lottery",
    "count",
    "equals",
    "get",
    "account",
    "start",
    "lottery",
    "lottery",
    "start",
    "lottery",
    "could",
    "100",
    "import",
    "rest",
    "functions",
    "like",
    "end",
    "lottery",
    "enter",
    "lottery",
    "start",
    "lottery",
    "similar",
    "lottery",
    "deploy",
    "lottery",
    "could",
    "absolutely",
    "verbose",
    "going",
    "go",
    "ahead",
    "write",
    "functions",
    "transactions",
    "way",
    "actually",
    "able",
    "test",
    "little",
    "bit",
    "granularly",
    "anyways",
    "lottery",
    "dot",
    "start",
    "lottery",
    "count",
    "lottery",
    "enter",
    "count",
    "give",
    "value",
    "lottery",
    "get",
    "entrance",
    "fee",
    "going",
    "account",
    "course",
    "equals",
    "get",
    "account",
    "actually",
    "end",
    "lottery",
    "need",
    "send",
    "link",
    "calling",
    "request",
    "randomness",
    "use",
    "fund",
    "link",
    "script",
    "helpful",
    "scripts",
    "import",
    "helpful",
    "scripts",
    "call",
    "fund",
    "link",
    "lottery",
    "contract",
    "fund",
    "link",
    "call",
    "lot",
    "lottery",
    "end",
    "lottery",
    "count",
    "actually",
    "know",
    "called",
    "correctly",
    "well",
    "look",
    "back",
    "lottery",
    "contract",
    "call",
    "end",
    "lottery",
    "really",
    "whole",
    "lot",
    "changing",
    "state",
    "let",
    "go",
    "ahead",
    "check",
    "see",
    "calculating",
    "winner",
    "state",
    "different",
    "say",
    "assert",
    "lot",
    "dot",
    "lottery",
    "state",
    "equal",
    "calculating",
    "winner",
    "scroll",
    "enum",
    "position",
    "two",
    "open",
    "zero",
    "close",
    "one",
    "calculating",
    "winner",
    "two",
    "say",
    "cert",
    "lottery",
    "lottery",
    "state",
    "equals",
    "two",
    "go",
    "ahead",
    "test",
    "well",
    "brownie",
    "k",
    "test",
    "end",
    "lottery",
    "see",
    "works",
    "let",
    "test",
    "interesting",
    "piece",
    "entire",
    "lottery",
    "contract",
    "going",
    "test",
    "whether",
    "fulfill",
    "function",
    "actually",
    "works",
    "correctly",
    "correctly",
    "choose",
    "winner",
    "correctly",
    "pay",
    "winner",
    "correctly",
    "reset",
    "let",
    "go",
    "ahead",
    "build",
    "complicated",
    "important",
    "test",
    "whole",
    "contract",
    "choosing",
    "winner",
    "def",
    "test",
    "pick",
    "winner",
    "correctly",
    "let",
    "copy",
    "paste",
    "bit",
    "getting",
    "started",
    "lottery",
    "equals",
    "employ",
    "lottery",
    "count",
    "equals",
    "get",
    "account",
    "lottery",
    "start",
    "lottery",
    "c",
    "enter",
    "couple",
    "different",
    "players",
    "lottery",
    "enter",
    "let",
    "say",
    "count",
    "value",
    "lottery",
    "getet",
    "entrance",
    "fee",
    "enter",
    "copy",
    "two",
    "times",
    "instead",
    "use",
    "different",
    "ids",
    "index",
    "equals",
    "1",
    "index",
    "equals",
    "2",
    "going",
    "different",
    "accounts",
    "going",
    "use",
    "different",
    "index",
    "want",
    "test",
    "multiple",
    "different",
    "people",
    "unit",
    "test",
    "getting",
    "drastically",
    "close",
    "integration",
    "test",
    "said",
    "little",
    "bit",
    "loose",
    "definitions",
    "going",
    "want",
    "fund",
    "link",
    "go",
    "ahead",
    "copy",
    "line",
    "fund",
    "link",
    "lottery",
    "going",
    "want",
    "choose",
    "winner",
    "actually",
    "modify",
    "one",
    "thing",
    "lottery",
    "contract",
    "order",
    "test",
    "actually",
    "calling",
    "fulfill",
    "randomness",
    "function",
    "testing",
    "everything",
    "going",
    "need",
    "call",
    "fulfill",
    "randomness",
    "function",
    "look",
    "vrf",
    "coordinator",
    "mock",
    "function",
    "called",
    "call",
    "back",
    "randomness",
    "function",
    "actually",
    "calls",
    "fulfill",
    "randomness",
    "selector",
    "eventually",
    "call",
    "fulfill",
    "randomness",
    "function",
    "entry",
    "point",
    "node",
    "actually",
    "calls",
    "pretend",
    "chain",
    "link",
    "node",
    "call",
    "function",
    "going",
    "return",
    "random",
    "number",
    "course",
    "going",
    "choose",
    "contract",
    "want",
    "return",
    "also",
    "pass",
    "original",
    "request",
    "id",
    "associated",
    "original",
    "call",
    "lottery",
    "contract",
    "end",
    "lottery",
    "function",
    "going",
    "return",
    "anything",
    "even",
    "would",
    "really",
    "difficult",
    "us",
    "get",
    "return",
    "type",
    "python",
    "want",
    "keep",
    "track",
    "contract",
    "actually",
    "entered",
    "calculating",
    "winner",
    "state",
    "want",
    "called",
    "emitting",
    "event",
    "events",
    "pieces",
    "data",
    "executed",
    "blockchain",
    "stored",
    "blockchain",
    "accessible",
    "smart",
    "contracts",
    "kind",
    "think",
    "print",
    "lines",
    "blockchain",
    "print",
    "statements",
    "blockchain",
    "go",
    "log",
    "section",
    "also",
    "includes",
    "different",
    "events",
    "lot",
    "information",
    "actually",
    "going",
    "event",
    "ourself",
    "see",
    "really",
    "looks",
    "like",
    "see",
    "call",
    "end",
    "lottery",
    "function",
    "logs",
    "scroll",
    "bottom",
    "event",
    "called",
    "randomness",
    "request",
    "spit",
    "vrf",
    "coordinator",
    "spit",
    "vrf",
    "consumer",
    "base",
    "inherited",
    "even",
    "data",
    "already",
    "decoded",
    "one",
    "pieces",
    "data",
    "request",
    "id",
    "add",
    "event",
    "first",
    "need",
    "create",
    "event",
    "type",
    "top",
    "go",
    "ahead",
    "event",
    "requested",
    "random",
    "say",
    "bytes",
    "32",
    "request",
    "id",
    "identified",
    "new",
    "type",
    "event",
    "called",
    "requested",
    "randomness",
    "really",
    "similar",
    "enum",
    "regard",
    "emit",
    "one",
    "events",
    "end",
    "lottery",
    "bid",
    "emit",
    "requested",
    "randomness",
    "request",
    "id",
    "requested",
    "randomness",
    "takes",
    "byes",
    "32",
    "input",
    "parameter",
    "going",
    "pass",
    "request",
    "id",
    "input",
    "parameter",
    "event",
    "emitted",
    "back",
    "test",
    "call",
    "end",
    "lottery",
    "actually",
    "emit",
    "one",
    "events",
    "transaction",
    "say",
    "transaction",
    "equals",
    "lottery",
    "end",
    "lottery",
    "way",
    "always",
    "done",
    "look",
    "inside",
    "transaction",
    "object",
    "inside",
    "transaction",
    "object",
    "actually",
    "attribute",
    "called",
    "events",
    "stores",
    "events",
    "look",
    "certain",
    "event",
    "name",
    "know",
    "requested",
    "randomness",
    "say",
    "events",
    "look",
    "requested",
    "randomness",
    "event",
    "requested",
    "randomness",
    "event",
    "find",
    "request",
    "id",
    "request",
    "id",
    "say",
    "request",
    "idc",
    "request",
    "id",
    "going",
    "get",
    "grabbed",
    "event",
    "emit",
    "events",
    "going",
    "really",
    "helpful",
    "writing",
    "tests",
    "events",
    "also",
    "really",
    "helpful",
    "number",
    "reasons",
    "one",
    "big",
    "ones",
    "upgrading",
    "smart",
    "contracts",
    "understanding",
    "mapping",
    "updated",
    "going",
    "using",
    "testing",
    "request",
    "id",
    "pretend",
    "chain",
    "link",
    "node",
    "use",
    "call",
    "back",
    "randomness",
    "function",
    "dummy",
    "getting",
    "random",
    "number",
    "back",
    "chain",
    "link",
    "node",
    "going",
    "going",
    "call",
    "get",
    "contract",
    "function",
    "get",
    "vrf",
    "coordinator",
    "course",
    "going",
    "import",
    "helpful",
    "scripts",
    "going",
    "call",
    "call",
    "back",
    "randomness",
    "function",
    "going",
    "dot",
    "call",
    "back",
    "randomness",
    "need",
    "pass",
    "request",
    "id",
    "random",
    "number",
    "contract",
    "return",
    "request",
    "id",
    "random",
    "number",
    "like",
    "say",
    "static",
    "rng",
    "equals",
    "777",
    "say",
    "random",
    "number",
    "going",
    "return",
    "going",
    "777",
    "lottery",
    "address",
    "going",
    "return",
    "lottery",
    "going",
    "say",
    "count",
    "making",
    "state",
    "change",
    "got",
    "call",
    "back",
    "asserts",
    "us",
    "dummying",
    "getting",
    "response",
    "chain",
    "lake",
    "node",
    "mock",
    "responses",
    "tests",
    "make",
    "lives",
    "way",
    "way",
    "easier",
    "figure",
    "winner",
    "lottery",
    "actually",
    "three",
    "enter",
    "entries",
    "means",
    "777",
    "mod",
    "3",
    "since",
    "random",
    "number",
    "going",
    "777",
    "call",
    "calculator",
    "777",
    "3",
    "divides",
    "evenly",
    "know",
    "means",
    "answer",
    "going",
    "zero",
    "aka",
    "account",
    "going",
    "winner",
    "let",
    "assert",
    "lottery",
    "recent",
    "winner",
    "going",
    "equal",
    "account",
    "right",
    "set",
    "recent",
    "winner",
    "transfer",
    "money",
    "assert",
    "lottery",
    "balance",
    "zero",
    "transferring",
    "account",
    "money",
    "let",
    "even",
    "make",
    "sure",
    "account",
    "gets",
    "money",
    "right",
    "starting",
    "balance",
    "account",
    "starting",
    "balance",
    "account",
    "equals",
    "count",
    "balance",
    "count",
    "balance",
    "balance",
    "lottery",
    "equals",
    "lottery",
    "balance",
    "assert",
    "account",
    "balance",
    "going",
    "two",
    "added",
    "together",
    "started",
    "balance",
    "account",
    "plus",
    "balance",
    "lottery",
    "get",
    "lottery",
    "winnings",
    "okay",
    "long",
    "test",
    "probably",
    "important",
    "test",
    "let",
    "make",
    "sure",
    "want",
    "brownie",
    "k",
    "test",
    "pick",
    "winner",
    "correctly",
    "let",
    "see",
    "works",
    "oops",
    "forgot",
    "put",
    "parentheses",
    "parentheses",
    "let",
    "try",
    "perfect",
    "actually",
    "updating",
    "paying",
    "running",
    "lottery",
    "correctly",
    "fair",
    "true",
    "randomness",
    "incredibly",
    "exciting",
    "admitted",
    "events",
    "lottery",
    "contract",
    "use",
    "offchain",
    "event",
    "logging",
    "ethereum",
    "know",
    "getting",
    "ansy",
    "actually",
    "run",
    "real",
    "chain",
    "let",
    "go",
    "ahead",
    "last",
    "bit",
    "create",
    "integration",
    "test",
    "run",
    "actual",
    "chain",
    "wanted",
    "go",
    "ahead",
    "try",
    "deploy",
    "lottery",
    "function",
    "real",
    "chain",
    "well",
    "right",
    "let",
    "integration",
    "test",
    "going",
    "actually",
    "test",
    "real",
    "live",
    "chain",
    "going",
    "use",
    "ring",
    "network",
    "using",
    "whole",
    "time",
    "great",
    "little",
    "bit",
    "liberal",
    "way",
    "tests",
    "going",
    "one",
    "test",
    "integration",
    "test",
    "keep",
    "mind",
    "going",
    "want",
    "test",
    "every",
    "piece",
    "code",
    "let",
    "create",
    "test",
    "called",
    "def",
    "test",
    "pick",
    "winner",
    "going",
    "opposite",
    "unit",
    "tests",
    "unit",
    "tests",
    "going",
    "local",
    "blockchains",
    "right",
    "going",
    "skip",
    "local",
    "blockchains",
    "going",
    "opposite",
    "one",
    "even",
    "copy",
    "type",
    "say",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "going",
    "p",
    "test",
    "skip",
    "course",
    "since",
    "grabbing",
    "pieces",
    "going",
    "browny",
    "import",
    "network",
    "going",
    "import",
    "p",
    "test",
    "going",
    "scripts",
    "dot",
    "helpful",
    "scripts",
    "import",
    "local",
    "blockchain",
    "going",
    "deploy",
    "lottery",
    "lottery",
    "equals",
    "deploy",
    "lottery",
    "going",
    "grab",
    "scripts",
    "deploy",
    "lottery",
    "support",
    "deploy",
    "lottery",
    "count",
    "equals",
    "get",
    "account",
    "course",
    "going",
    "grab",
    "helpful",
    "scripts",
    "well",
    "lottery",
    "start",
    "lottery",
    "account",
    "lottery",
    "enter",
    "say",
    "count",
    "value",
    "going",
    "lottery",
    "getet",
    "entrance",
    "fee",
    "run",
    "issue",
    "sometimes",
    "lottery",
    "get",
    "entrance",
    "fee",
    "plus",
    "like",
    "100",
    "th000",
    "something",
    "like",
    "going",
    "barely",
    "way",
    "let",
    "keep",
    "like",
    "let",
    "copy",
    "line",
    "run",
    "two",
    "people",
    "enter",
    "lottery",
    "course",
    "going",
    "us",
    "times",
    "great",
    "going",
    "want",
    "actually",
    "end",
    "lottery",
    "first",
    "going",
    "want",
    "fund",
    "let",
    "import",
    "funding",
    "script",
    "get",
    "fund",
    "link",
    "function",
    "call",
    "fund",
    "link",
    "function",
    "lottery",
    "contract",
    "go",
    "ahead",
    "end",
    "lottery",
    "say",
    "lottery",
    "end",
    "lottery",
    "main",
    "account",
    "admin",
    "account",
    "going",
    "little",
    "bit",
    "different",
    "integration",
    "tests",
    "unit",
    "test",
    "unit",
    "tests",
    "pretended",
    "vrf",
    "coordinator",
    "called",
    "call",
    "back",
    "randomness",
    "pretended",
    "chain",
    "link",
    "node",
    "chain",
    "link",
    "node",
    "actual",
    "network",
    "actually",
    "going",
    "wait",
    "chain",
    "link",
    "node",
    "respond",
    "simplicity",
    "time",
    "sleep",
    "wait",
    "like",
    "minute",
    "respond",
    "course",
    "since",
    "using",
    "time",
    "going",
    "want",
    "import",
    "time",
    "top",
    "since",
    "account",
    "one",
    "actually",
    "insert",
    "lottery",
    "recent",
    "winner",
    "equals",
    "equals",
    "count",
    "also",
    "assert",
    "lottery",
    "balance",
    "equal",
    "zero",
    "right",
    "great",
    "integration",
    "test",
    "run",
    "going",
    "run",
    "pretty",
    "much",
    "vast",
    "majority",
    "functionality",
    "go",
    "ahead",
    "test",
    "brownie",
    "test",
    "little",
    "bit",
    "verbose",
    "k",
    "test",
    "pick",
    "winner",
    "course",
    "das",
    "das",
    "network",
    "rink",
    "feed",
    "run",
    "per",
    "usual",
    "got",
    "make",
    "sure",
    "test",
    "net",
    "rink",
    "ethereum",
    "great",
    "test",
    "net",
    "chain",
    "link",
    "perfect",
    "env",
    "got",
    "pieces",
    "let",
    "check",
    "brownie",
    "config",
    "envv",
    "awesome",
    "want",
    "use",
    "env",
    "use",
    "method",
    "showed",
    "guys",
    "encrypt",
    "password",
    "abolutely",
    "use",
    "run",
    "set",
    "start",
    "lottery",
    "actual",
    "function",
    "also",
    "need",
    "lottery",
    "balance",
    "parentheses",
    "sorry",
    "run",
    "brownie",
    "test",
    "dk",
    "test",
    "pick",
    "winner",
    "network",
    "r",
    "also",
    "add",
    "flag",
    "print",
    "whatever",
    "brownie",
    "going",
    "printing",
    "make",
    "everything",
    "little",
    "bit",
    "bose",
    "want",
    "absolutely",
    "something",
    "point",
    "anyways",
    "however",
    "tutorial",
    "want",
    "skip",
    "go",
    "ahead",
    "actually",
    "going",
    "run",
    "whole",
    "process",
    "deploying",
    "waiting",
    "anyway",
    "added",
    "tests",
    "run",
    "entire",
    "test",
    "suite",
    "brownie",
    "test",
    "going",
    "run",
    "development",
    "tests",
    "see",
    "go",
    "really",
    "quickly",
    "see",
    "much",
    "faster",
    "us",
    "run",
    "test",
    "local",
    "chain",
    "opposed",
    "everything",
    "test",
    "going",
    "make",
    "life",
    "way",
    "easier",
    "everything",
    "passed",
    "know",
    "contract",
    "code",
    "approximately",
    "want",
    "time",
    "moment",
    "truth",
    "let",
    "deploy",
    "actual",
    "test",
    "net",
    "deploy",
    "lottery",
    "script",
    "oftentimes",
    "deploy",
    "lottery",
    "bit",
    "scripts",
    "pieces",
    "maybe",
    "proudy",
    "console",
    "demonstrate",
    "everything",
    "end",
    "end",
    "deploy",
    "lottery",
    "start",
    "lottery",
    "enter",
    "lottery",
    "end",
    "lottery",
    "one",
    "script",
    "see",
    "everything",
    "end",
    "end",
    "see",
    "looks",
    "like",
    "ether",
    "scan",
    "let",
    "go",
    "ahead",
    "run",
    "script",
    "rink",
    "network",
    "go",
    "jump",
    "onto",
    "ether",
    "scan",
    "see",
    "everything",
    "let",
    "browny",
    "run",
    "scripts",
    "deploy",
    "lottery",
    "network",
    "rinke",
    "first",
    "went",
    "ahead",
    "deployed",
    "lottery",
    "got",
    "addresses",
    "get",
    "contract",
    "method",
    "got",
    "fee",
    "got",
    "keyh",
    "got",
    "published",
    "source",
    "everything",
    "went",
    "ahead",
    "verified",
    "published",
    "source",
    "grab",
    "address",
    "lottery",
    "deployed",
    "jump",
    "rinky",
    "ether",
    "scan",
    "paste",
    "address",
    "see",
    "contract",
    "little",
    "check",
    "mark",
    "verified",
    "go",
    "read",
    "contract",
    "see",
    "public",
    "variables",
    "public",
    "functions",
    "go",
    "right",
    "contract",
    "see",
    "transacting",
    "functions",
    "interact",
    "get",
    "verified",
    "things",
    "get",
    "deployed",
    "went",
    "ahead",
    "called",
    "start",
    "lottery",
    "function",
    "actually",
    "start",
    "lottery",
    "got",
    "little",
    "print",
    "line",
    "saying",
    "lottery",
    "started",
    "entered",
    "entered",
    "lottery",
    "funded",
    "contract",
    "link",
    "could",
    "get",
    "random",
    "winner",
    "back",
    "right",
    "end",
    "lottery",
    "confirmed",
    "waiting",
    "60",
    "seconds",
    "right",
    "time",
    "sleep",
    "sit",
    "contract",
    "go",
    "transactions",
    "refresh",
    "actually",
    "see",
    "different",
    "method",
    "calls",
    "see",
    "contract",
    "creation",
    "started",
    "lottery",
    "entered",
    "lottery",
    "recently",
    "ended",
    "lottery",
    "see",
    "script",
    "says",
    "0x",
    "blah",
    "blah",
    "blah",
    "new",
    "winner",
    "perfect",
    "right",
    "means",
    "chain",
    "lck",
    "node",
    "actually",
    "responded",
    "actually",
    "verify",
    "looking",
    "contract",
    "go",
    "read",
    "contract",
    "go",
    "recent",
    "win",
    "see",
    "somebody",
    "indeed",
    "recently",
    "win",
    "also",
    "go",
    "events",
    "see",
    "events",
    "created",
    "see",
    "first",
    "event",
    "right",
    "requested",
    "randomness",
    "event",
    "event",
    "called",
    "end",
    "lottery",
    "also",
    "see",
    "ownership",
    "transferred",
    "function",
    "go",
    "call",
    "called",
    "actually",
    "deployed",
    "first",
    "place",
    "little",
    "bit",
    "events",
    "aka",
    "logs",
    "right",
    "topic",
    "zero",
    "hash",
    "represents",
    "entire",
    "event",
    "right",
    "bit",
    "going",
    "topic",
    "one",
    "first",
    "topic",
    "represents",
    "request",
    "id",
    "going",
    "request",
    "id",
    "awesome",
    "successfully",
    "created",
    "working",
    "smart",
    "contract",
    "lottery",
    "true",
    "provable",
    "randomness",
    "absolutely",
    "insane",
    "incredible",
    "job",
    "one",
    "additional",
    "piece",
    "want",
    "talk",
    "jump",
    "testing",
    "file",
    "often",
    "going",
    "see",
    "called",
    "conf",
    "test",
    "pi",
    "python",
    "automatically",
    "knows",
    "look",
    "comp",
    "test",
    "file",
    "grab",
    "different",
    "functions",
    "also",
    "add",
    "external",
    "plugins",
    "fixtures",
    "hooks",
    "testing",
    "root",
    "path",
    "adds",
    "lot",
    "really",
    "fantastic",
    "features",
    "common",
    "thing",
    "see",
    "skipped",
    "simplicity",
    "future",
    "projects",
    "probably",
    "see",
    "comp",
    "test",
    "file",
    "lot",
    "really",
    "nice",
    "testing",
    "configuration",
    "pieces",
    "lot",
    "stuff",
    "code",
    "quite",
    "frankly",
    "think",
    "us",
    "want",
    "every",
    "single",
    "time",
    "code",
    "everything",
    "scratch",
    "absolutely",
    "get",
    "clon",
    "repositories",
    "right",
    "github",
    "actually",
    "even",
    "easier",
    "way",
    "us",
    "start",
    "blank",
    "project",
    "brownie",
    "mixes",
    "google",
    "brownie",
    "mixes",
    "github",
    "get",
    "mixes",
    "organization",
    "ton",
    "boilerplate",
    "code",
    "us",
    "go",
    "ahead",
    "get",
    "started",
    "start",
    "developing",
    "one",
    "going",
    "working",
    "chain",
    "lick",
    "mix",
    "piece",
    "forked",
    "official",
    "one",
    "gives",
    "us",
    "wonderful",
    "contracts",
    "tests",
    "brownie",
    "config",
    "really",
    "everything",
    "need",
    "get",
    "started",
    "brownie",
    "installed",
    "bake",
    "mix",
    "brownie",
    "bake",
    "chain",
    "link",
    "mix",
    "new",
    "empty",
    "directory",
    "get",
    "new",
    "chain",
    "link",
    "folder",
    "everything",
    "inside",
    "cd",
    "chain",
    "link",
    "see",
    "pieces",
    "already",
    "contracts",
    "whole",
    "bunch",
    "different",
    "samples",
    "working",
    "vrf",
    "working",
    "price",
    "feed",
    "working",
    "thing",
    "called",
    "keepers",
    "automate",
    "smart",
    "contracts",
    "making",
    "api",
    "calls",
    "delivering",
    "api",
    "call",
    "want",
    "blockchain",
    "also",
    "brownie",
    "config",
    "already",
    "number",
    "wonderful",
    "pieces",
    "one",
    "networks",
    "go",
    "copy",
    "paste",
    "add",
    "even",
    "got",
    "support",
    "test",
    "nets",
    "like",
    "avalanche",
    "poon",
    "finance",
    "number",
    "really",
    "powerful",
    "tests",
    "including",
    "testing",
    "price",
    "feeds",
    "whole",
    "bunch",
    "deployment",
    "scripts",
    "mocking",
    "scripts",
    "helpful",
    "scripts",
    "really",
    "everything",
    "need",
    "get",
    "started",
    "get",
    "going",
    "starters",
    "could",
    "run",
    "brownie",
    "test",
    "going",
    "compile",
    "everything",
    "development",
    "chain",
    "run",
    "unit",
    "tests",
    "wanted",
    "test",
    "real",
    "test",
    "net",
    "could",
    "brownie",
    "test",
    "network",
    "ring",
    "network",
    "wanted",
    "looking",
    "good",
    "starter",
    "place",
    "lot",
    "really",
    "powerful",
    "smart",
    "contracts",
    "get",
    "started",
    "highly",
    "recommend",
    "using",
    "mix",
    "boilerplate",
    "starting",
    "point",
    "contracts",
    "projects",
    "cooking",
    "learned",
    "ton",
    "fundamentals",
    "working",
    "brownie",
    "working",
    "smart",
    "contracts",
    "kind",
    "building",
    "blocks",
    "though",
    "actually",
    "code",
    "lot",
    "much",
    "faster",
    "much",
    "efficiently",
    "one",
    "things",
    "seen",
    "working",
    "tokens",
    "erc20",
    "token",
    "standard",
    "going",
    "learn",
    "build",
    "token",
    "let",
    "understand",
    "even",
    "want",
    "first",
    "let",
    "define",
    "even",
    "er",
    "c20s",
    "er",
    "c20s",
    "tokens",
    "deployed",
    "chain",
    "using",
    "called",
    "erc20",
    "token",
    "standard",
    "read",
    "erc20",
    "token",
    "standard",
    "link",
    "description",
    "well",
    "basically",
    "smart",
    "contract",
    "actually",
    "represents",
    "token",
    "token",
    "smart",
    "contract",
    "really",
    "cool",
    "tether",
    "chain",
    "link",
    "uni",
    "token",
    "die",
    "examples",
    "erc",
    "20s",
    "technically",
    "chain",
    "link",
    "erc",
    "677",
    "upgrades",
    "ec20",
    "tokens",
    "take",
    "still",
    "backwards",
    "compatible",
    "ear",
    "c20s",
    "basically",
    "think",
    "e",
    "c20s",
    "little",
    "additional",
    "functionality",
    "would",
    "even",
    "care",
    "want",
    "make",
    "ec20",
    "well",
    "lot",
    "really",
    "cool",
    "stuff",
    "make",
    "governance",
    "token",
    "secure",
    "underlying",
    "network",
    "create",
    "type",
    "synthetic",
    "asset",
    "really",
    "anything",
    "else",
    "case",
    "build",
    "one",
    "er",
    "c20s",
    "build",
    "one",
    "tokens",
    "well",
    "build",
    "smart",
    "contract",
    "follows",
    "token",
    "standard",
    "build",
    "smart",
    "contract",
    "functions",
    "name",
    "function",
    "symbol",
    "function",
    "decimals",
    "function",
    "etc",
    "functions",
    "need",
    "able",
    "transfer",
    "need",
    "able",
    "get",
    "balance",
    "etc",
    "want",
    "check",
    "improvements",
    "still",
    "erc20",
    "compatible",
    "like",
    "erc",
    "677",
    "erc",
    "777",
    "definitely",
    "go",
    "check",
    "build",
    "one",
    "instead",
    "let",
    "create",
    "new",
    "folder",
    "get",
    "started",
    "going",
    "create",
    "new",
    "brownie",
    "file",
    "course",
    "brownie",
    "knit",
    "going",
    "start",
    "repository",
    "start",
    "everything",
    "going",
    "work",
    "kind",
    "actually",
    "jump",
    "start",
    "right",
    "contracts",
    "let",
    "create",
    "new",
    "file",
    "call",
    "token",
    "soul",
    "going",
    "add",
    "token",
    "code",
    "since",
    "eip",
    "right",
    "smart",
    "contract",
    "could",
    "could",
    "grab",
    "functions",
    "copy",
    "paste",
    "one",
    "time",
    "grab",
    "name",
    "grab",
    "symbol",
    "grab",
    "decimals",
    "know",
    "code",
    "like",
    "ah",
    "stuff",
    "blah",
    "blah",
    "blah",
    "could",
    "much",
    "easier",
    "way",
    "right",
    "since",
    "engineers",
    "always",
    "want",
    "reinvent",
    "wheel",
    "friends",
    "open",
    "zeppelin",
    "amazing",
    "contract",
    "packages",
    "actually",
    "building",
    "erc20",
    "token",
    "go",
    "right",
    "open",
    "zepp",
    "documentation",
    "working",
    "4x",
    "version",
    "matter",
    "version",
    "use",
    "long",
    "config",
    "file",
    "add",
    "version",
    "going",
    "use",
    "already",
    "gone",
    "let",
    "go",
    "erc20",
    "documentation",
    "entirety",
    "code",
    "need",
    "needed",
    "make",
    "erc20",
    "go",
    "ahead",
    "even",
    "copy",
    "paste",
    "boom",
    "erc20",
    "code",
    "let",
    "actually",
    "change",
    "name",
    "everything",
    "though",
    "going",
    "call",
    "token",
    "soul",
    "spdx",
    "license",
    "identifier",
    "mit",
    "great",
    "going",
    "using",
    "solidity",
    "version",
    "know",
    "done",
    "lot",
    "code",
    "actually",
    "point",
    "highly",
    "recommend",
    "working",
    "lot",
    "really",
    "fantastic",
    "improvements",
    "solidity",
    "notice",
    "first",
    "dive",
    "using",
    "different",
    "version",
    "solidity",
    "notice",
    "syntax",
    "exactly",
    "like",
    "said",
    "couple",
    "nice",
    "improvements",
    "main",
    "one",
    "longer",
    "use",
    "safe",
    "math",
    "functions",
    "talked",
    "um",
    "going",
    "go",
    "ahead",
    "import",
    "open",
    "zeppelin",
    "contracts",
    "token",
    "erc20",
    "soul",
    "course",
    "since",
    "importing",
    "open",
    "zeppelin",
    "importing",
    "package",
    "got",
    "add",
    "brownie",
    "config",
    "dio",
    "even",
    "get",
    "started",
    "technically",
    "tools",
    "need",
    "code",
    "deploy",
    "erc20",
    "token",
    "actually",
    "going",
    "challenge",
    "go",
    "ahead",
    "try",
    "start",
    "browning",
    "project",
    "create",
    "token",
    "using",
    "open",
    "zeppin",
    "packages",
    "deploy",
    "test",
    "net",
    "going",
    "show",
    "anyways",
    "challenging",
    "trying",
    "things",
    "exploring",
    "really",
    "one",
    "fastest",
    "ways",
    "learn",
    "grow",
    "space",
    "give",
    "shot",
    "really",
    "pause",
    "give",
    "try",
    "right",
    "welcome",
    "back",
    "go",
    "together",
    "course",
    "need",
    "add",
    "dependencies",
    "open",
    "zeppelin",
    "open",
    "zeppelin",
    "contracts",
    "let",
    "version",
    "four",
    "let",
    "even",
    "go",
    "github",
    "open",
    "zeppelin",
    "released",
    "yesterday",
    "time",
    "great",
    "course",
    "compiler",
    "silk",
    "oops",
    "remappings",
    "add",
    "open",
    "zeppelin",
    "equals",
    "going",
    "go",
    "ahead",
    "save",
    "use",
    "open",
    "zeppelin",
    "refer",
    "open",
    "zeppelin",
    "contracts",
    "great",
    "go",
    "ahead",
    "import",
    "let",
    "change",
    "contract",
    "name",
    "token",
    "going",
    "inherit",
    "erc20",
    "doou",
    "open",
    "zeppelin",
    "even",
    "go",
    "ahead",
    "open",
    "zeppelin",
    "contracts",
    "github",
    "even",
    "see",
    "erc20",
    "looks",
    "like",
    "go",
    "uh",
    "contracts",
    "token",
    "erc20",
    "erc20",
    "doso",
    "initiation",
    "erc20",
    "functions",
    "like",
    "name",
    "symbol",
    "decimals",
    "total",
    "supply",
    "etc",
    "constructor",
    "going",
    "add",
    "initial",
    "supply",
    "going",
    "way",
    "course",
    "initial",
    "supply",
    "token",
    "going",
    "use",
    "constructor",
    "erc20",
    "doa",
    "go",
    "ahead",
    "check",
    "code",
    "see",
    "constructor",
    "uses",
    "name",
    "symbol",
    "name",
    "call",
    "token",
    "symbol",
    "ot",
    "boom",
    "literally",
    "need",
    "token",
    "told",
    "going",
    "much",
    "faster",
    "project",
    "scripts",
    "create",
    "new",
    "file",
    "add",
    "one",
    "deploy",
    "token",
    "soul",
    "also",
    "add",
    "helpful",
    "scripts",
    "excuse",
    "deploy",
    "token",
    "piy",
    "excuse",
    "quickly",
    "add",
    "get",
    "account",
    "function",
    "say",
    "def",
    "get",
    "account",
    "go",
    "ahead",
    "copy",
    "paste",
    "last",
    "one",
    "want",
    "actually",
    "copy",
    "paste",
    "last",
    "helpful",
    "scripts",
    "pretty",
    "much",
    "going",
    "exactly",
    "wonderful",
    "uh",
    "ifs",
    "statements",
    "deploy",
    "really",
    "anything",
    "want",
    "deployment",
    "token",
    "script",
    "brownie",
    "import",
    "token",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "count",
    "make",
    "sure",
    "let",
    "add",
    "anit",
    "pi",
    "make",
    "sure",
    "scripts",
    "actually",
    "import",
    "since",
    "know",
    "since",
    "know",
    "need",
    "initial",
    "supply",
    "let",
    "go",
    "ahead",
    "initial",
    "supply",
    "equals",
    "whatever",
    "want",
    "want",
    "make",
    "little",
    "bit",
    "readable",
    "also",
    "web",
    "3",
    "import",
    "web",
    "3",
    "web",
    "way",
    "say",
    "initial",
    "supply",
    "ether",
    "initial",
    "supply",
    "going",
    "ether",
    "add",
    "main",
    "function",
    "account",
    "equals",
    "get",
    "account",
    "token",
    "equals",
    "token",
    "deploy",
    "add",
    "parameter",
    "initial",
    "supply",
    "account",
    "print",
    "token",
    "dot",
    "name",
    "whole",
    "function",
    "course",
    "environment",
    "variable",
    "set",
    "going",
    "add",
    "ourv",
    "file",
    "add",
    "private",
    "key",
    "web",
    "3",
    "infura",
    "project",
    "id",
    "want",
    "ether",
    "scan",
    "token",
    "going",
    "skip",
    "environment",
    "variables",
    "already",
    "set",
    "last",
    "least",
    "add",
    "private",
    "key",
    "equals",
    "ox",
    "blah",
    "blah",
    "blah",
    "three",
    "inferior",
    "pro",
    "equals",
    "blah",
    "blah",
    "blah",
    "ether",
    "scan",
    "token",
    "equals",
    "blah",
    "blah",
    "blah",
    "perfect",
    "want",
    "actually",
    "deploy",
    "test",
    "net",
    "always",
    "go",
    "config",
    "add",
    "wallets",
    "key",
    "add",
    "environment",
    "variable",
    "private",
    "key",
    "brownie",
    "knows",
    "grab",
    "defined",
    "helpful",
    "scripts",
    "could",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "token",
    "piy",
    "go",
    "ahead",
    "see",
    "token",
    "printed",
    "see",
    "token",
    "deployed",
    "local",
    "ganach",
    "see",
    "token",
    "great",
    "go",
    "ahead",
    "run",
    "network",
    "rink",
    "grab",
    "address",
    "go",
    "rink",
    "ether",
    "scan",
    "pop",
    "quick",
    "refresh",
    "see",
    "contract",
    "indeed",
    "added",
    "ether",
    "scan",
    "even",
    "picks",
    "token",
    "could",
    "grab",
    "grab",
    "contract",
    "address",
    "go",
    "assets",
    "add",
    "metamask",
    "next",
    "add",
    "tokens",
    "see",
    "proud",
    "owners",
    "tokens",
    "something",
    "else",
    "might",
    "want",
    "add",
    "liquidity",
    "pool",
    "add",
    "place",
    "actually",
    "go",
    "ahead",
    "sell",
    "put",
    "market",
    "something",
    "like",
    "easily",
    "popping",
    "onto",
    "unis",
    "swap",
    "going",
    "pool",
    "hitting",
    "create",
    "pool",
    "adding",
    "token",
    "manage",
    "token",
    "list",
    "sure",
    "add",
    "token",
    "go",
    "ahead",
    "add",
    "token",
    "create",
    "pool",
    "automatically",
    "put",
    "unis",
    "swap",
    "easy",
    "actually",
    "sell",
    "one",
    "pools",
    "right",
    "probably",
    "easiest",
    "project",
    "course",
    "really",
    "shows",
    "far",
    "come",
    "along",
    "everything",
    "know",
    "little",
    "bit",
    "defi",
    "amazing",
    "amazing",
    "technology",
    "works",
    "blockchain",
    "world",
    "let",
    "look",
    "site",
    "d5",
    "pulse",
    "want",
    "look",
    "another",
    "one",
    "another",
    "fantastic",
    "one",
    "called",
    "defi",
    "llama",
    "also",
    "shows",
    "lot",
    "different",
    "protocols",
    "defi",
    "pulse",
    "application",
    "shows",
    "top",
    "def5",
    "projects",
    "based",
    "much",
    "total",
    "asset",
    "locked",
    "protocol",
    "currently",
    "number",
    "one",
    "ranked",
    "defi",
    "application",
    "billion",
    "assets",
    "management",
    "terms",
    "usd",
    "fantastic",
    "ones",
    "like",
    "curve",
    "compound",
    "maker",
    "instadp",
    "etc",
    "going",
    "looking",
    "two",
    "protocols",
    "particular",
    "first",
    "one",
    "course",
    "second",
    "one",
    "going",
    "type",
    "called",
    "decentralized",
    "exchange",
    "get",
    "started",
    "going",
    "go",
    "testnet",
    "dasboard",
    "bring",
    "us",
    "screen",
    "looks",
    "something",
    "like",
    "please",
    "connect",
    "wallet",
    "everything",
    "pretty",
    "empty",
    "paraso",
    "known",
    "dex",
    "decentralized",
    "exchange",
    "allows",
    "us",
    "trade",
    "tokens",
    "incredibly",
    "easy",
    "blockchain",
    "whole",
    "lot",
    "test",
    "net",
    "deck",
    "actually",
    "work",
    "going",
    "look",
    "simulate",
    "working",
    "example",
    "wanted",
    "trade",
    "one",
    "eth",
    "usdt",
    "maybe",
    "wrapped",
    "bitcoin",
    "link",
    "really",
    "token",
    "wanted",
    "would",
    "need",
    "connect",
    "wallet",
    "swap",
    "button",
    "would",
    "show",
    "would",
    "go",
    "ahead",
    "hit",
    "swap",
    "really",
    "powerful",
    "dexes",
    "really",
    "popular",
    "ones",
    "going",
    "curve",
    "bance",
    "unis",
    "swap",
    "really",
    "really",
    "easy",
    "way",
    "go",
    "ahead",
    "swap",
    "tokens",
    "one",
    "another",
    "depending",
    "looking",
    "incredibly",
    "powerful",
    "going",
    "one",
    "going",
    "working",
    "lot",
    "pretty",
    "much",
    "fundamentals",
    "working",
    "d5",
    "protocol",
    "looking",
    "test",
    "net",
    "go",
    "ahead",
    "test",
    "simulate",
    "actually",
    "working",
    "protocols",
    "going",
    "first",
    "work",
    "ui",
    "user",
    "interface",
    "going",
    "everything",
    "programmatically",
    "first",
    "things",
    "first",
    "already",
    "make",
    "sure",
    "test",
    "net",
    "ethereum",
    "least",
    "get",
    "test",
    "net",
    "ethereum",
    "looking",
    "link",
    "token",
    "contracts",
    "going",
    "koven",
    "one",
    "indeed",
    "uh",
    "test",
    "net",
    "right",
    "coven",
    "going",
    "go",
    "ahead",
    "add",
    "copy",
    "address",
    "paste",
    "robot",
    "test",
    "eth",
    "remember",
    "use",
    "link",
    "token",
    "contracts",
    "page",
    "going",
    "faucets",
    "see",
    "eth",
    "coen",
    "test",
    "net",
    "go",
    "back",
    "whereas",
    "paras",
    "swap",
    "allows",
    "simply",
    "swap",
    "assets",
    "lot",
    "buying",
    "selling",
    "tokens",
    "lending",
    "borrowing",
    "application",
    "actually",
    "put",
    "token",
    "collateral",
    "borrow",
    "generate",
    "yield",
    "interacting",
    "protocol",
    "borrowing",
    "lending",
    "critical",
    "piece",
    "type",
    "really",
    "interesting",
    "financial",
    "applications",
    "financial",
    "instruments",
    "short",
    "selling",
    "exposed",
    "assets",
    "etc",
    "also",
    "gain",
    "percentage",
    "back",
    "look",
    "apy",
    "tell",
    "much",
    "percentage",
    "year",
    "actually",
    "get",
    "returns",
    "staking",
    "depositing",
    "asset",
    "going",
    "go",
    "ahead",
    "going",
    "connect",
    "application",
    "using",
    "metamask",
    "see",
    "deposit",
    "tab",
    "see",
    "balance",
    "eth",
    "much",
    "currently",
    "wallet",
    "right",
    "click",
    "eth",
    "click",
    "max",
    "button",
    "deposit",
    "ethereum",
    "hit",
    "continue",
    "little",
    "dashboard",
    "pop",
    "asking",
    "us",
    "okay",
    "would",
    "like",
    "deposit",
    "clicking",
    "deposit",
    "button",
    "actually",
    "us",
    "deposit",
    "right",
    "onto",
    "contract",
    "coen",
    "test",
    "net",
    "make",
    "sure",
    "hit",
    "deposit",
    "actually",
    "test",
    "set",
    "looks",
    "like",
    "actually",
    "insufficient",
    "funds",
    "actually",
    "going",
    "go",
    "borrow",
    "little",
    "bit",
    "faucet",
    "grab",
    "little",
    "faet",
    "come",
    "back",
    "actually",
    "going",
    "go",
    "back",
    "refresh",
    "says",
    "going",
    "deposit",
    "continue",
    "deposit",
    "metamask",
    "going",
    "pop",
    "saying",
    "hey",
    "sure",
    "want",
    "right",
    "check",
    "data",
    "grab",
    "address",
    "even",
    "want",
    "pop",
    "ether",
    "scan",
    "paste",
    "even",
    "double",
    "check",
    "make",
    "sure",
    "indeed",
    "right",
    "contract",
    "want",
    "funnily",
    "enough",
    "see",
    "gateway",
    "deposit",
    "coven",
    "eth",
    "actually",
    "gets",
    "transferred",
    "erc20",
    "version",
    "ethereum",
    "go",
    "ahead",
    "deposited",
    "contract",
    "going",
    "hit",
    "confirm",
    "going",
    "get",
    "pending",
    "link",
    "explorer",
    "shows",
    "us",
    "transaction",
    "going",
    "see",
    "indeed",
    "successfully",
    "deposited",
    "ethereum",
    "see",
    "little",
    "button",
    "add",
    "eth",
    "browser",
    "wallet",
    "going",
    "go",
    "ahead",
    "click",
    "automatically",
    "add",
    "token",
    "wallet",
    "going",
    "hit",
    "add",
    "token",
    "see",
    "assets",
    "e",
    "could",
    "also",
    "manually",
    "hit",
    "added",
    "token",
    "got",
    "contract",
    "address",
    "ai",
    "nice",
    "enough",
    "go",
    "ahead",
    "add",
    "us",
    "little",
    "button",
    "us",
    "aeth",
    "called",
    "interest",
    "bearing",
    "token",
    "goes",
    "real",
    "time",
    "see",
    "sit",
    "long",
    "enough",
    "see",
    "number",
    "actually",
    "continually",
    "going",
    "profit",
    "given",
    "us",
    "people",
    "borrowing",
    "eth",
    "deposited",
    "go",
    "dashboard",
    "see",
    "e",
    "deposited",
    "roll",
    "constantly",
    "see",
    "amount",
    "go",
    "go",
    "ahead",
    "withdraw",
    "eth",
    "convert",
    "aeth",
    "back",
    "eth",
    "additional",
    "interest",
    "got",
    "depositing",
    "depositing",
    "aate",
    "give",
    "us",
    "interest",
    "back",
    "payment",
    "people",
    "borrowing",
    "eth",
    "deposited",
    "also",
    "use",
    "eth",
    "called",
    "collateral",
    "go",
    "borrow",
    "tab",
    "actually",
    "use",
    "eth",
    "borrow",
    "asset",
    "maybe",
    "want",
    "borrow",
    "stable",
    "coin",
    "meant",
    "always",
    "equal",
    "1",
    "usdc",
    "usdt",
    "also",
    "meant",
    "always",
    "reflect",
    "dollar",
    "borrow",
    "called",
    "wrapped",
    "bitcoin",
    "represents",
    "bitcoin",
    "price",
    "could",
    "borrow",
    "token",
    "bat",
    "token",
    "link",
    "token",
    "borrow",
    "different",
    "tokens",
    "borrowing",
    "asset",
    "incredibly",
    "incredibly",
    "powerful",
    "borrowing",
    "allowed",
    "obtain",
    "liquidity",
    "without",
    "selling",
    "assets",
    "borrowing",
    "one",
    "first",
    "pieces",
    "order",
    "actually",
    "short",
    "sell",
    "borrowing",
    "defa",
    "protocols",
    "absolutely",
    "massive",
    "allows",
    "frictionlessly",
    "short",
    "sell",
    "obtain",
    "liquidity",
    "without",
    "closing",
    "position",
    "gain",
    "yield",
    "deposit",
    "collateral",
    "massive",
    "number",
    "new",
    "things",
    "defi",
    "world",
    "flash",
    "loans",
    "important",
    "note",
    "borrowing",
    "assets",
    "mainnet",
    "since",
    "borrowing",
    "test",
    "net",
    "real",
    "money",
    "100",
    "okay",
    "experiment",
    "work",
    "however",
    "borrow",
    "asset",
    "pay",
    "attention",
    "much",
    "underlying",
    "collateral",
    "could",
    "get",
    "liquidated",
    "lose",
    "funds",
    "careful",
    "pay",
    "lot",
    "attention",
    "going",
    "actual",
    "network",
    "let",
    "say",
    "want",
    "borrow",
    "token",
    "example",
    "click",
    "choose",
    "amount",
    "want",
    "borrow",
    "thing",
    "since",
    "placed",
    "collateral",
    "right",
    "amount",
    "borrow",
    "ends",
    "high",
    "actually",
    "get",
    "called",
    "liquidated",
    "every",
    "time",
    "borrow",
    "asset",
    "get",
    "type",
    "health",
    "factor",
    "health",
    "factor",
    "represents",
    "close",
    "liquidated",
    "health",
    "factor",
    "reaches",
    "one",
    "collateral",
    "actually",
    "deposited",
    "get",
    "liquidated",
    "somebody",
    "else",
    "get",
    "paid",
    "take",
    "collateral",
    "application",
    "always",
    "solvent",
    "solvent",
    "means",
    "never",
    "debt",
    "want",
    "borrow",
    "want",
    "choose",
    "amount",
    "might",
    "little",
    "bit",
    "safe",
    "going",
    "get",
    "liquidated",
    "zoom",
    "little",
    "bit",
    "going",
    "choose",
    "number",
    "see",
    "health",
    "factor",
    "maybe",
    "like",
    "going",
    "continue",
    "choose",
    "interest",
    "rate",
    "borrow",
    "asset",
    "actually",
    "pay",
    "interest",
    "payment",
    "actually",
    "going",
    "go",
    "people",
    "depositing",
    "die",
    "depositing",
    "asset",
    "interest",
    "rate",
    "going",
    "pay",
    "actually",
    "going",
    "paid",
    "depositing",
    "asset",
    "borrowing",
    "like",
    "getting",
    "interest",
    "deposited",
    "collateral",
    "others",
    "getting",
    "interest",
    "deposited",
    "collateral",
    "based",
    "often",
    "people",
    "borrowing",
    "choose",
    "stable",
    "apy",
    "always",
    "4",
    "variable",
    "apy",
    "change",
    "based",
    "volatile",
    "demand",
    "asset",
    "going",
    "choose",
    "variable",
    "pick",
    "whatever",
    "want",
    "especially",
    "demo",
    "going",
    "hit",
    "continue",
    "going",
    "zoom",
    "little",
    "bit",
    "interface",
    "going",
    "show",
    "going",
    "go",
    "ahead",
    "hit",
    "borrow",
    "metamask",
    "going",
    "pop",
    "ask",
    "us",
    "really",
    "want",
    "borrow",
    "going",
    "go",
    "ahead",
    "hit",
    "confirm",
    "successfully",
    "borrowed",
    "die",
    "application",
    "even",
    "hit",
    "little",
    "add",
    "die",
    "browser",
    "wallet",
    "add",
    "token",
    "wallet",
    "hit",
    "button",
    "go",
    "assets",
    "see",
    "die",
    "indeed",
    "token",
    "assets",
    "go",
    "back",
    "dashboard",
    "see",
    "health",
    "factor",
    "score",
    "really",
    "important",
    "score",
    "click",
    "little",
    "thing",
    "says",
    "health",
    "factor",
    "represents",
    "safety",
    "loan",
    "derived",
    "proportion",
    "collateral",
    "versus",
    "amount",
    "borrowed",
    "keep",
    "one",
    "avoid",
    "liquid",
    "see",
    "deposits",
    "still",
    "e",
    "deposited",
    "also",
    "28",
    "die",
    "deposited",
    "see",
    "whole",
    "lot",
    "different",
    "stats",
    "working",
    "application",
    "withdraw",
    "die",
    "withdraw",
    "e",
    "borrow",
    "die",
    "go",
    "ahead",
    "repay",
    "either",
    "repay",
    "wallet",
    "balance",
    "current",
    "collateral",
    "yes",
    "could",
    "repay",
    "collateral",
    "let",
    "go",
    "ahead",
    "wallet",
    "balance",
    "hit",
    "max",
    "continue",
    "even",
    "get",
    "little",
    "thing",
    "says",
    "enough",
    "funds",
    "repay",
    "full",
    "amount",
    "well",
    "case",
    "borrowed",
    "amount",
    "already",
    "since",
    "depositing",
    "accured",
    "little",
    "bit",
    "acred",
    "little",
    "bit",
    "extra",
    "debt",
    "remember",
    "hit",
    "variable",
    "apy",
    "every",
    "second",
    "going",
    "tick",
    "little",
    "bit",
    "let",
    "go",
    "ahead",
    "pay",
    "back",
    "wallet",
    "going",
    "confirm",
    "going",
    "approve",
    "spent",
    "going",
    "go",
    "ahead",
    "hit",
    "repay",
    "button",
    "gray",
    "go",
    "back",
    "dashboard",
    "see",
    "repaid",
    "almost",
    "everything",
    "little",
    "bit",
    "left",
    "let",
    "go",
    "ahead",
    "hit",
    "repay",
    "current",
    "collateral",
    "hit",
    "max",
    "continue",
    "use",
    "eth",
    "pay",
    "back",
    "collateral",
    "instead",
    "die",
    "hit",
    "repay",
    "way",
    "debt",
    "great",
    "go",
    "back",
    "dashboard",
    "see",
    "debt",
    "fantastic",
    "one",
    "applications",
    "relies",
    "chain",
    "leag",
    "price",
    "feeds",
    "order",
    "understand",
    "ratio",
    "much",
    "deposited",
    "collateral",
    "much",
    "borrow",
    "take",
    "look",
    "wallet",
    "see",
    "still",
    "eth",
    "also",
    "eth",
    "zero",
    "die",
    "everything",
    "paid",
    "back",
    "still",
    "gaining",
    "interest",
    "eth",
    "deposited",
    "let",
    "go",
    "ahead",
    "reconnect",
    "let",
    "go",
    "ahead",
    "back",
    "test",
    "net",
    "let",
    "withdraw",
    "eth",
    "keep",
    "mind",
    "working",
    "test",
    "net",
    "right",
    "working",
    "way",
    "working",
    "right",
    "test",
    "net",
    "sometimes",
    "test",
    "net",
    "work",
    "quite",
    "well",
    "main",
    "net",
    "testing",
    "exact",
    "support",
    "working",
    "test",
    "net",
    "want",
    "go",
    "real",
    "go",
    "app",
    "connect",
    "wallet",
    "ethereum",
    "main",
    "net",
    "connect",
    "wallet",
    "move",
    "ethereum",
    "main",
    "net",
    "interact",
    "exactly",
    "way",
    "saw",
    "mainnet",
    "see",
    "additional",
    "pieces",
    "deposit",
    "something",
    "like",
    "die",
    "yes",
    "get",
    "back",
    "interest",
    "paid",
    "depositing",
    "die",
    "also",
    "get",
    "little",
    "bit",
    "called",
    "governance",
    "token",
    "also",
    "get",
    "little",
    "bit",
    "token",
    "know",
    "really",
    "small",
    "additional",
    "incentive",
    "given",
    "users",
    "working",
    "protocol",
    "since",
    "decentralized",
    "protocol",
    "order",
    "anything",
    "improved",
    "anything",
    "updated",
    "protocol",
    "actually",
    "go",
    "decentralized",
    "vote",
    "governance",
    "tokens",
    "actually",
    "dictate",
    "decide",
    "protocol",
    "improves",
    "moving",
    "forward",
    "understand",
    "work",
    "ui",
    "let",
    "actually",
    "learn",
    "interact",
    "interact",
    "defi",
    "scripts",
    "learning",
    "way",
    "get",
    "us",
    "one",
    "step",
    "closer",
    "quantitative",
    "defi",
    "engineer",
    "defi",
    "researcher",
    "someone",
    "programmatically",
    "algorithmic",
    "trades",
    "algorithmic",
    "modeling",
    "everything",
    "programmatic",
    "sense",
    "making",
    "much",
    "efficient",
    "powerful",
    "interacting",
    "di5",
    "code",
    "going",
    "working",
    "ay",
    "brownie",
    "pi",
    "application",
    "always",
    "refer",
    "back",
    "link",
    "description",
    "link",
    "github",
    "repository",
    "see",
    "code",
    "written",
    "create",
    "new",
    "folder",
    "open",
    "vs",
    "code",
    "folder",
    "let",
    "get",
    "fantastic",
    "documentation",
    "going",
    "use",
    "well",
    "link",
    "also",
    "description",
    "let",
    "go",
    "ahead",
    "start",
    "basic",
    "brownie",
    "setup",
    "brownie",
    "got",
    "new",
    "brownie",
    "project",
    "got",
    "folders",
    "good",
    "go",
    "working",
    "brownie",
    "actually",
    "going",
    "really",
    "deploying",
    "contracts",
    "contracts",
    "going",
    "work",
    "already",
    "deployed",
    "chain",
    "going",
    "working",
    "right",
    "create",
    "quick",
    "know",
    "number",
    "one",
    "going",
    "try",
    "deposit",
    "eth",
    "going",
    "borrow",
    "asset",
    "eth",
    "collateral",
    "wanted",
    "challenge",
    "actually",
    "sell",
    "borrowed",
    "asset",
    "known",
    "short",
    "selling",
    "going",
    "going",
    "repay",
    "everything",
    "back",
    "great",
    "full",
    "functionality",
    "working",
    "deployed",
    "contract",
    "everything",
    "going",
    "learn",
    "teach",
    "work",
    "contracts",
    "well",
    "paras",
    "swap",
    "unit",
    "swap",
    "type",
    "swapping",
    "contract",
    "allow",
    "us",
    "buy",
    "sell",
    "let",
    "go",
    "ahead",
    "create",
    "script",
    "call",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "called",
    "def",
    "main",
    "pass",
    "first",
    "thing",
    "need",
    "figure",
    "deposit",
    "f",
    "actually",
    "deposited",
    "f",
    "via",
    "ui",
    "could",
    "actually",
    "see",
    "call",
    "deposit",
    "function",
    "hit",
    "deposit",
    "button",
    "oddly",
    "enough",
    "go",
    "contract",
    "address",
    "coen",
    "ether",
    "scan",
    "see",
    "address",
    "actually",
    "called",
    "gateway",
    "like",
    "saying",
    "let",
    "go",
    "ahead",
    "actually",
    "cancel",
    "reject",
    "actually",
    "swapping",
    "ethereum",
    "weth",
    "erc",
    "20",
    "version",
    "ethereum",
    "allows",
    "easily",
    "work",
    "er",
    "c20s",
    "ai",
    "protocol",
    "like",
    "usdcoin",
    "know",
    "ample",
    "forth",
    "link",
    "etc",
    "actually",
    "well",
    "first",
    "thing",
    "going",
    "need",
    "actually",
    "deposit",
    "eth",
    "first",
    "thing",
    "going",
    "need",
    "going",
    "swap",
    "eth",
    "let",
    "even",
    "put",
    "little",
    "script",
    "call",
    "get",
    "going",
    "function",
    "def",
    "main",
    "going",
    "pass",
    "actually",
    "going",
    "want",
    "use",
    "get",
    "function",
    "bar",
    "pi",
    "going",
    "actually",
    "main",
    "going",
    "def",
    "get",
    "w",
    "main",
    "function",
    "going",
    "call",
    "get",
    "w",
    "actually",
    "convert",
    "e",
    "theum",
    "wrapped",
    "ether",
    "even",
    "little",
    "dock",
    "string",
    "min",
    "depositing",
    "eth",
    "save",
    "gas",
    "could",
    "actually",
    "interact",
    "gateway",
    "going",
    "teach",
    "guys",
    "get",
    "general",
    "look",
    "contract",
    "ether",
    "scan",
    "koven",
    "contract",
    "ether",
    "scan",
    "see",
    "wrapped",
    "ether",
    "page",
    "go",
    "contract",
    "see",
    "indeed",
    "verified",
    "way",
    "works",
    "withdraw",
    "deposit",
    "deposit",
    "eth",
    "contract",
    "transfers",
    "us",
    "first",
    "contract",
    "actually",
    "want",
    "interact",
    "need",
    "script",
    "able",
    "call",
    "deposit",
    "contract",
    "per",
    "usual",
    "two",
    "things",
    "need",
    "going",
    "abi",
    "address",
    "contract",
    "really",
    "like",
    "everything",
    "directly",
    "interfaces",
    "already",
    "copy",
    "pasted",
    "interface",
    "going",
    "go",
    "interface",
    "soul",
    "going",
    "copy",
    "right",
    "interfaces",
    "create",
    "new",
    "file",
    "going",
    "call",
    "iw",
    "soul",
    "going",
    "paste",
    "see",
    "exact",
    "functions",
    "deposit",
    "contract",
    "symbol",
    "name",
    "transfer",
    "pretty",
    "much",
    "everything",
    "would",
    "expect",
    "erc20",
    "plus",
    "extra",
    "deposit",
    "piece",
    "call",
    "ieth",
    "common",
    "naming",
    "standard",
    "name",
    "contract",
    "talking",
    "interface",
    "interface",
    "also",
    "address",
    "address",
    "koven",
    "network",
    "since",
    "know",
    "ahead",
    "time",
    "probably",
    "going",
    "using",
    "different",
    "networks",
    "like",
    "mainnet",
    "koven",
    "etc",
    "actually",
    "going",
    "create",
    "new",
    "file",
    "going",
    "add",
    "brownie",
    "config",
    "hopefully",
    "starting",
    "look",
    "little",
    "familiar",
    "going",
    "go",
    "ahead",
    "add",
    "networks",
    "going",
    "go",
    "ahead",
    "add",
    "koven",
    "going",
    "write",
    "w",
    "token",
    "going",
    "add",
    "address",
    "token",
    "past",
    "going",
    "add",
    "rest",
    "pieces",
    "going",
    "add",
    "wallets",
    "key",
    "private",
    "key",
    "really",
    "need",
    "speaking",
    "probably",
    "still",
    "going",
    "want",
    "test",
    "locally",
    "since",
    "done",
    "work",
    "testing",
    "know",
    "testing",
    "integration",
    "test",
    "inte",
    "gration",
    "tests",
    "coen",
    "integration",
    "test",
    "local",
    "tests",
    "well",
    "something",
    "good",
    "thinking",
    "right",
    "know",
    "actually",
    "contracts",
    "main",
    "net",
    "well",
    "well",
    "also",
    "know",
    "going",
    "working",
    "oracles",
    "actually",
    "deploy",
    "mocks",
    "want",
    "unit",
    "tests",
    "actually",
    "use",
    "main",
    "net",
    "fork",
    "network",
    "fork",
    "everything",
    "main",
    "net",
    "local",
    "network",
    "instead",
    "actually",
    "using",
    "mocks",
    "basically",
    "mock",
    "entire",
    "main",
    "net",
    "one",
    "time",
    "absolutely",
    "working",
    "oracles",
    "need",
    "mock",
    "responses",
    "go",
    "ahead",
    "use",
    "main",
    "net",
    "fork",
    "run",
    "unit",
    "test",
    "using",
    "oracles",
    "makes",
    "lot",
    "sense",
    "development",
    "network",
    "mock",
    "oracles",
    "mock",
    "oracle",
    "responses",
    "mind",
    "know",
    "going",
    "lot",
    "tests",
    "main",
    "net",
    "fork",
    "go",
    "ahead",
    "add",
    "main",
    "net",
    "fork",
    "network",
    "add",
    "main",
    "net",
    "token",
    "mainnet",
    "look",
    "token",
    "ether",
    "scan",
    "token",
    "ether",
    "skin",
    "grab",
    "contract",
    "address",
    "remember",
    "absolutely",
    "positively",
    "want",
    "double",
    "check",
    "contract",
    "address",
    "working",
    "correct",
    "highly",
    "recommend",
    "get",
    "wrong",
    "could",
    "accidentally",
    "add",
    "money",
    "contract",
    "address",
    "want",
    "going",
    "main",
    "net",
    "fork",
    "address",
    "token",
    "address",
    "terminal",
    "brownie",
    "networks",
    "list",
    "see",
    "indeed",
    "mainnet",
    "fork",
    "going",
    "use",
    "ganach",
    "cli",
    "fork",
    "mainnet",
    "us",
    "link",
    "description",
    "refer",
    "back",
    "section",
    "actually",
    "set",
    "interface",
    "know",
    "actually",
    "compile",
    "abbi",
    "back",
    "get",
    "first",
    "thing",
    "need",
    "make",
    "transaction",
    "obviously",
    "get",
    "account",
    "well",
    "go",
    "back",
    "make",
    "helpful",
    "scripts",
    "go",
    "ahead",
    "def",
    "get",
    "account",
    "index",
    "equals",
    "none",
    "id",
    "equals",
    "none",
    "get",
    "account",
    "function",
    "last",
    "demo",
    "go",
    "ahead",
    "copy",
    "paste",
    "right",
    "great",
    "get",
    "account",
    "function",
    "account",
    "equals",
    "get",
    "account",
    "oh",
    "import",
    "scripts",
    "upful",
    "scripts",
    "import",
    "get",
    "account",
    "depending",
    "python",
    "version",
    "add",
    "init",
    "pi",
    "python",
    "recognizes",
    "scripts",
    "indeed",
    "module",
    "right",
    "cool",
    "account",
    "make",
    "transactions",
    "let",
    "go",
    "ahead",
    "get",
    "contract",
    "import",
    "interfaces",
    "rowning",
    "browning",
    "import",
    "interface",
    "equals",
    "interface",
    "address",
    "going",
    "config",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "token",
    "also",
    "import",
    "config",
    "br",
    "network",
    "well",
    "might",
    "asking",
    "using",
    "get",
    "contract",
    "function",
    "well",
    "absolutely",
    "100",
    "go",
    "ahead",
    "use",
    "get",
    "contract",
    "function",
    "since",
    "going",
    "testing",
    "mained",
    "fork",
    "know",
    "always",
    "going",
    "refer",
    "back",
    "config",
    "confident",
    "going",
    "deploying",
    "mocks",
    "better",
    "practice",
    "go",
    "ahead",
    "use",
    "get",
    "contract",
    "function",
    "one",
    "make",
    "little",
    "simpler",
    "use",
    "config",
    "browning",
    "config",
    "coov",
    "network",
    "going",
    "use",
    "one",
    "mainnet",
    "main",
    "net",
    "fork",
    "going",
    "use",
    "one",
    "going",
    "mainnet",
    "real",
    "production",
    "could",
    "also",
    "mainnet",
    "network",
    "exact",
    "copy",
    "main",
    "net",
    "remember",
    "going",
    "want",
    "ourv",
    "env",
    "file",
    "environment",
    "variables",
    "get",
    "pulled",
    "thatv",
    "file",
    "set",
    "like",
    "everything",
    "ourv",
    "file",
    "get",
    "pulled",
    "automatically",
    "great",
    "address",
    "avi",
    "comes",
    "interface",
    "call",
    "call",
    "deposit",
    "function",
    "deposit",
    "ethereum",
    "get",
    "transaction",
    "equals",
    "dot",
    "deposit",
    "account",
    "value",
    "going",
    "let",
    "say",
    "10",
    "raised",
    "18",
    "deposit",
    "get",
    "return",
    "print",
    "f",
    "string",
    "received",
    "even",
    "need",
    "print",
    "return",
    "tx",
    "per",
    "usual",
    "environment",
    "variables",
    "set",
    "private",
    "key",
    "going",
    "want",
    "em",
    "going",
    "export",
    "private",
    "key",
    "equals",
    "zerox",
    "beginning",
    "right",
    "going",
    "export",
    "web",
    "3",
    "fura",
    "project",
    "id",
    "want",
    "add",
    "web3",
    "inf",
    "fura",
    "project",
    "id",
    "got",
    "want",
    "use",
    "ether",
    "scan",
    "token",
    "absolutely",
    "since",
    "putting",
    "whole",
    "bunch",
    "stuff",
    "env",
    "want",
    "make",
    "sure",
    "g",
    "ignore",
    "env",
    "actually",
    "push",
    "gith",
    "nervous",
    "amvs",
    "absolutely",
    "accounts",
    "add",
    "whatever",
    "methodology",
    "like",
    "set",
    "enir",
    "variables",
    "anyway",
    "let",
    "go",
    "ahead",
    "run",
    "script",
    "brownie",
    "run",
    "scripts",
    "get",
    "w",
    "pi",
    "network",
    "coin",
    "generating",
    "abis",
    "interface",
    "little",
    "transaction",
    "hash",
    "use",
    "pop",
    "co",
    "ether",
    "scan",
    "see",
    "transaction",
    "going",
    "wallets",
    "get",
    "minus",
    "eth",
    "get",
    "plus",
    "see",
    "actually",
    "successful",
    "add",
    "see",
    "metamask",
    "going",
    "grab",
    "contract",
    "address",
    "going",
    "go",
    "back",
    "metamask",
    "add",
    "token",
    "paste",
    "add",
    "tokens",
    "see",
    "want",
    "switch",
    "back",
    "weth",
    "ethereum",
    "would",
    "hit",
    "withdraw",
    "function",
    "could",
    "programmatically",
    "add",
    "withdraw",
    "function",
    "withdraw",
    "function",
    "withdraw",
    "take",
    "ethereum",
    "contract",
    "burn",
    "replace",
    "need",
    "swap",
    "back",
    "get",
    "eth",
    "awesome",
    "erc20",
    "token",
    "erc20",
    "token",
    "use",
    "interact",
    "application",
    "got",
    "get",
    "function",
    "let",
    "go",
    "ahead",
    "start",
    "borrowing",
    "let",
    "go",
    "ahead",
    "start",
    "account",
    "going",
    "equal",
    "get",
    "account",
    "going",
    "want",
    "import",
    "right",
    "top",
    "like",
    "going",
    "get",
    "address",
    "even",
    "erc20",
    "address",
    "token",
    "erc20",
    "maybe",
    "want",
    "deposit",
    "erc20",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "token",
    "course",
    "going",
    "add",
    "brownie",
    "import",
    "network",
    "want",
    "call",
    "get",
    "weth",
    "contract",
    "case",
    "already",
    "would",
    "add",
    "another",
    "scripts",
    "get",
    "import",
    "get",
    "actually",
    "need",
    "call",
    "right",
    "already",
    "wrapped",
    "ethereum",
    "coen",
    "address",
    "want",
    "test",
    "though",
    "local",
    "main",
    "net",
    "fork",
    "probably",
    "want",
    "call",
    "get",
    "w",
    "going",
    "add",
    "little",
    "network",
    "got",
    "show",
    "active",
    "going",
    "main",
    "net",
    "fork",
    "go",
    "ahead",
    "call",
    "get",
    "function",
    "brownie",
    "also",
    "going",
    "want",
    "import",
    "config",
    "also",
    "add",
    "main",
    "net",
    "fork",
    "local",
    "blockchain",
    "environments",
    "like",
    "call",
    "get",
    "account",
    "scripts",
    "actually",
    "knows",
    "local",
    "environment",
    "working",
    "return",
    "accounts",
    "zero",
    "instead",
    "us",
    "actually",
    "load",
    "private",
    "key",
    "every",
    "single",
    "time",
    "want",
    "actually",
    "wait",
    "transaction",
    "complete",
    "go",
    "ahead",
    "add",
    "weit",
    "tx",
    "weight",
    "wait",
    "transaction",
    "actually",
    "finish",
    "otherwise",
    "brownie",
    "get",
    "little",
    "bit",
    "mad",
    "run",
    "brownie",
    "run",
    "scripts",
    "ob",
    "borrow",
    "pi",
    "network",
    "main",
    "net",
    "fork",
    "see",
    "actually",
    "case",
    "testing",
    "everything",
    "main",
    "net",
    "fork",
    "going",
    "give",
    "us",
    "really",
    "really",
    "accurate",
    "view",
    "mainnet",
    "actually",
    "going",
    "give",
    "us",
    "mocking",
    "literally",
    "fork",
    "main",
    "net",
    "go",
    "still",
    "going",
    "test",
    "coen",
    "though",
    "little",
    "bit",
    "see",
    "transactions",
    "go",
    "long",
    "takes",
    "stuff",
    "happen",
    "get",
    "gotten",
    "actually",
    "need",
    "go",
    "second",
    "bit",
    "going",
    "deposit",
    "f",
    "ar",
    "case",
    "actually",
    "well",
    "everything",
    "need",
    "going",
    "documentation",
    "deposit",
    "borrow",
    "contract",
    "lending",
    "pool",
    "see",
    "lending",
    "pool",
    "contract",
    "main",
    "contract",
    "protocol",
    "exposes",
    "user",
    "oriented",
    "actions",
    "invoked",
    "solidity",
    "web3",
    "libraries",
    "functions",
    "need",
    "deposit",
    "deposit",
    "asset",
    "collateral",
    "withdraw",
    "take",
    "back",
    "borrow",
    "repay",
    "swap",
    "borrow",
    "rates",
    "uh",
    "couple",
    "interesting",
    "ones",
    "go",
    "later",
    "really",
    "need",
    "focus",
    "repaying",
    "borrowing",
    "withdrawing",
    "depositing",
    "probably",
    "guessed",
    "deposit",
    "function",
    "going",
    "work",
    "right",
    "since",
    "contract",
    "going",
    "work",
    "always",
    "two",
    "things",
    "need",
    "working",
    "contract",
    "going",
    "abi",
    "address",
    "going",
    "get",
    "lending",
    "pool",
    "contract",
    "going",
    "say",
    "lending",
    "pool",
    "equals",
    "actually",
    "going",
    "even",
    "make",
    "function",
    "called",
    "get",
    "lending",
    "pool",
    "going",
    "def",
    "get",
    "lending",
    "pool",
    "lending",
    "pool",
    "poll",
    "going",
    "get",
    "lending",
    "pool",
    "address",
    "lending",
    "pool",
    "contract",
    "interact",
    "something",
    "lending",
    "pool",
    "lending",
    "pool",
    "address",
    "actually",
    "change",
    "little",
    "bit",
    "depend",
    "depending",
    "lot",
    "different",
    "pieces",
    "actually",
    "address",
    "provider",
    "gives",
    "us",
    "address",
    "specific",
    "particular",
    "market",
    "go",
    "back",
    "ui",
    "actually",
    "different",
    "markets",
    "different",
    "types",
    "ways",
    "interact",
    "going",
    "work",
    "basic",
    "v2",
    "easily",
    "used",
    "mainnet",
    "well",
    "address",
    "provider",
    "registry",
    "give",
    "us",
    "address",
    "provider",
    "give",
    "us",
    "address",
    "lending",
    "pool",
    "market",
    "want",
    "go",
    "across",
    "different",
    "markets",
    "go",
    "address",
    "provider",
    "registry",
    "find",
    "addresses",
    "change",
    "addresses",
    "change",
    "lending",
    "pool",
    "address",
    "might",
    "change",
    "go",
    "address",
    "provider",
    "one",
    "function",
    "need",
    "work",
    "get",
    "lending",
    "pool",
    "give",
    "us",
    "address",
    "actual",
    "lending",
    "pool",
    "let",
    "confuse",
    "much",
    "basically",
    "trying",
    "saying",
    "hey",
    "located",
    "right",
    "contract",
    "always",
    "tell",
    "us",
    "main",
    "contracts",
    "addresses",
    "provider",
    "right",
    "another",
    "contract",
    "work",
    "contract",
    "need",
    "need",
    "nai",
    "need",
    "address",
    "absolutely",
    "could",
    "go",
    "ahead",
    "know",
    "copy",
    "paste",
    "like",
    "ab",
    "equals",
    "whatever",
    "abi",
    "going",
    "use",
    "interface",
    "life",
    "great",
    "interface",
    "couple",
    "great",
    "things",
    "interfaces",
    "know",
    "going",
    "work",
    "one",
    "two",
    "functions",
    "actually",
    "make",
    "interfaces",
    "ourself",
    "interface",
    "could",
    "new",
    "file",
    "could",
    "lending",
    "pool",
    "address",
    "provider",
    "soul",
    "add",
    "oursel",
    "first",
    "spdx",
    "license",
    "identifier",
    "like",
    "mit",
    "something",
    "pragma",
    "solidity",
    "whatever",
    "want",
    "interface",
    "lending",
    "pool",
    "addresses",
    "provider",
    "exc",
    "lending",
    "pool",
    "addresses",
    "provider",
    "know",
    "one",
    "function",
    "called",
    "get",
    "lending",
    "pool",
    "exactly",
    "sure",
    "get",
    "lending",
    "pool",
    "defined",
    "go",
    "ether",
    "scan",
    "ether",
    "scan",
    "lending",
    "pool",
    "addresses",
    "see",
    "actually",
    "lending",
    "pool",
    "look",
    "protocol",
    "go",
    "right",
    "github",
    "go",
    "contracts",
    "see",
    "interfaces",
    "section",
    "lending",
    "pool",
    "addresses",
    "provider",
    "get",
    "lending",
    "pool",
    "kind",
    "expected",
    "external",
    "view",
    "returns",
    "address",
    "literally",
    "copy",
    "paste",
    "could",
    "run",
    "would",
    "work",
    "perfectly",
    "fine",
    "leads",
    "us",
    "next",
    "point",
    "might",
    "well",
    "grab",
    "whole",
    "thing",
    "way",
    "know",
    "fact",
    "getting",
    "anything",
    "wrong",
    "yes",
    "wanted",
    "interface",
    "could",
    "right",
    "going",
    "compile",
    "oh",
    "could",
    "interface",
    "going",
    "compile",
    "abi",
    "abi",
    "going",
    "say",
    "hey",
    "function",
    "abi",
    "really",
    "telling",
    "us",
    "interact",
    "contract",
    "let",
    "go",
    "go",
    "ahead",
    "add",
    "everything",
    "want",
    "interact",
    "things",
    "abi",
    "also",
    "need",
    "address",
    "definitely",
    "find",
    "documentation",
    "go",
    "deployed",
    "contract",
    "section",
    "find",
    "lending",
    "pool",
    "addresses",
    "provider",
    "going",
    "right",
    "going",
    "copy",
    "going",
    "put",
    "well",
    "know",
    "going",
    "put",
    "brownie",
    "config",
    "going",
    "lending",
    "pool",
    "address",
    "provider",
    "going",
    "paste",
    "right",
    "since",
    "know",
    "also",
    "going",
    "coen",
    "also",
    "grab",
    "coen",
    "lending",
    "pool",
    "addresses",
    "provider",
    "going",
    "copy",
    "going",
    "add",
    "addresses",
    "provider",
    "coen",
    "well",
    "boom",
    "koven",
    "main",
    "fort",
    "awesome",
    "keep",
    "going",
    "ai",
    "address",
    "coen",
    "mainit",
    "mainit",
    "fork",
    "first",
    "get",
    "lending",
    "pool",
    "addresses",
    "provider",
    "going",
    "interface",
    "going",
    "grab",
    "brownie",
    "interface",
    "lending",
    "pool",
    "address",
    "provider",
    "address",
    "going",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "lending",
    "pool",
    "addresses",
    "provider",
    "going",
    "say",
    "lending",
    "pool",
    "address",
    "going",
    "equal",
    "lending",
    "pool",
    "going",
    "copy",
    "paste",
    "instead",
    "typing",
    "whole",
    "thing",
    "add",
    "address",
    "divider",
    "provider",
    "get",
    "lending",
    "pool",
    "right",
    "address",
    "provider",
    "get",
    "lending",
    "pool",
    "returns",
    "address",
    "address",
    "lending",
    "pool",
    "address",
    "actually",
    "return",
    "lending",
    "pool",
    "contract",
    "getting",
    "abi",
    "address",
    "ual",
    "lending",
    "pool",
    "address",
    "check",
    "need",
    "api",
    "work",
    "wonderful",
    "interfaces",
    "new",
    "file",
    "lending",
    "pool",
    "going",
    "couple",
    "functions",
    "going",
    "work",
    "actually",
    "gives",
    "us",
    "interface",
    "right",
    "uh",
    "actually",
    "even",
    "gives",
    "us",
    "interface",
    "lending",
    "pool",
    "address",
    "provider",
    "us",
    "go",
    "ahead",
    "copy",
    "pop",
    "need",
    "actually",
    "change",
    "change",
    "one",
    "thing",
    "well",
    "interface",
    "imports",
    "locally",
    "slash",
    "actually",
    "need",
    "change",
    "imports",
    "actually",
    "import",
    "directly",
    "github",
    "instead",
    "importing",
    "locally",
    "luckily",
    "something",
    "already",
    "know",
    "let",
    "go",
    "browning",
    "config",
    "top",
    "going",
    "add",
    "dependencies",
    "bit",
    "dependencies",
    "going",
    "work",
    "protocol",
    "right",
    "github",
    "going",
    "work",
    "aprol",
    "v2",
    "let",
    "see",
    "latest",
    "version",
    "looks",
    "like",
    "got",
    "couple",
    "different",
    "versions",
    "let",
    "go",
    "ahead",
    "work",
    "one",
    "compiler",
    "sulk",
    "remappings",
    "per",
    "usual",
    "going",
    "say",
    "going",
    "equal",
    "dependency",
    "way",
    "brownie",
    "download",
    "right",
    "github",
    "use",
    "instead",
    "back",
    "ilending",
    "pool",
    "soul",
    "change",
    "pull",
    "right",
    "github",
    "look",
    "github",
    "go",
    "contract",
    "section",
    "go",
    "interfaces",
    "section",
    "lending",
    "pool",
    "know",
    "pull",
    "slc",
    "contracts",
    "sl",
    "interfaces",
    "see",
    "ey",
    "lending",
    "pool",
    "addresses",
    "provider",
    "right",
    "data",
    "types",
    "bit",
    "actually",
    "look",
    "contracts",
    "know",
    "already",
    "protocol",
    "libraries",
    "types",
    "data",
    "type",
    "take",
    "exact",
    "path",
    "sl",
    "contracts",
    "sl",
    "protocol",
    "sl",
    "libraries",
    "types",
    "datat",
    "type",
    "okay",
    "great",
    "actually",
    "imported",
    "interface",
    "us",
    "use",
    "go",
    "ahead",
    "compile",
    "make",
    "sure",
    "everything",
    "working",
    "correctly",
    "brownie",
    "compile",
    "perfect",
    "interfaces",
    "issue",
    "actually",
    "would",
    "compile",
    "brownie",
    "know",
    "compiling",
    "correctly",
    "great",
    "interface",
    "know",
    "interfaces",
    "compil",
    "abi",
    "already",
    "address",
    "actually",
    "interact",
    "lending",
    "pool",
    "lending",
    "pool",
    "equals",
    "interface",
    "doi",
    "lending",
    "pool",
    "add",
    "lending",
    "pool",
    "address",
    "lending",
    "pool",
    "return",
    "lending",
    "pool",
    "function",
    "goes",
    "lending",
    "pool",
    "addresses",
    "provider",
    "documentation",
    "returns",
    "lending",
    "pool",
    "contract",
    "interact",
    "even",
    "test",
    "printing",
    "lending",
    "pool",
    "address",
    "script",
    "brownie",
    "run",
    "scripts",
    "aarrow",
    "network",
    "main",
    "net",
    "fork",
    "perfect",
    "see",
    "address",
    "printed",
    "errors",
    "know",
    "right",
    "actual",
    "address",
    "going",
    "going",
    "take",
    "wrapped",
    "ethereum",
    "got",
    "erc20",
    "version",
    "ethereum",
    "going",
    "deposit",
    "contract",
    "like",
    "user",
    "interface",
    "order",
    "actually",
    "first",
    "deposit",
    "need",
    "approve",
    "erc20",
    "token",
    "erc20",
    "tokens",
    "approve",
    "function",
    "makes",
    "sure",
    "whenever",
    "send",
    "token",
    "somebody",
    "whenever",
    "token",
    "calls",
    "function",
    "uses",
    "tokens",
    "actually",
    "given",
    "permission",
    "first",
    "thing",
    "going",
    "actually",
    "going",
    "approve",
    "sending",
    "erc20",
    "tokens",
    "resembles",
    "since",
    "know",
    "going",
    "approve",
    "lot",
    "actually",
    "go",
    "go",
    "ahead",
    "make",
    "approve",
    "erc20",
    "token",
    "function",
    "similar",
    "get",
    "lending",
    "pool",
    "going",
    "need",
    "approve",
    "erc20",
    "going",
    "need",
    "approve",
    "c20",
    "let",
    "go",
    "ahead",
    "make",
    "function",
    "call",
    "def",
    "approve",
    "erc20",
    "actually",
    "call",
    "approve",
    "function",
    "token",
    "contract",
    "well",
    "always",
    "going",
    "need",
    "abi",
    "address",
    "token",
    "contract",
    "always",
    "told",
    "going",
    "saying",
    "lot",
    "could",
    "create",
    "interface",
    "ourself",
    "looking",
    "functionalities",
    "erc20",
    "tokens",
    "could",
    "go",
    "eip",
    "20",
    "look",
    "token",
    "standard",
    "find",
    "different",
    "functions",
    "put",
    "interface",
    "go",
    "ahead",
    "cheat",
    "grab",
    "github",
    "repository",
    "already",
    "ic20",
    "doou",
    "right",
    "going",
    "copy",
    "everything",
    "add",
    "new",
    "file",
    "called",
    "ic20",
    "soul",
    "paste",
    "see",
    "number",
    "different",
    "functions",
    "check",
    "allowance",
    "check",
    "balance",
    "different",
    "addresses",
    "many",
    "decimals",
    "token",
    "name",
    "symbol",
    "transfers",
    "transfer",
    "function",
    "going",
    "using",
    "approv",
    "function",
    "right",
    "already",
    "see",
    "parameters",
    "approved",
    "function",
    "takes",
    "going",
    "need",
    "spender",
    "approve",
    "spend",
    "tokens",
    "much",
    "actually",
    "spend",
    "come",
    "back",
    "approve",
    "erc20",
    "know",
    "input",
    "parameters",
    "probably",
    "going",
    "need",
    "amount",
    "spender",
    "address",
    "erc20",
    "token",
    "address",
    "token",
    "actually",
    "allowing",
    "spend",
    "account",
    "right",
    "going",
    "music",
    "account",
    "bit",
    "passed",
    "part",
    "function",
    "parameters",
    "let",
    "go",
    "ahead",
    "code",
    "let",
    "first",
    "quick",
    "print",
    "line",
    "people",
    "know",
    "transaction",
    "say",
    "approving",
    "erc20",
    "token",
    "get",
    "erc20",
    "token",
    "saying",
    "erc",
    "equals",
    "interface",
    "always",
    "erc20",
    "give",
    "whatever",
    "erc20",
    "address",
    "pass",
    "function",
    "actually",
    "interact",
    "contract",
    "call",
    "pro",
    "function",
    "say",
    "transaction",
    "tx",
    "tx",
    "usually",
    "stands",
    "transaction",
    "equals",
    "erc20",
    "approve",
    "going",
    "approve",
    "move",
    "spender",
    "amount",
    "say",
    "count",
    "tx",
    "wait",
    "one",
    "block",
    "confirmation",
    "finish",
    "done",
    "print",
    "approved",
    "return",
    "transaction",
    "awesome",
    "approv",
    "erc20",
    "function",
    "use",
    "approve",
    "erc20",
    "token",
    "back",
    "main",
    "function",
    "run",
    "approve",
    "vc20",
    "amount",
    "right",
    "defined",
    "spender",
    "going",
    "lending",
    "pool",
    "address",
    "lending",
    "pool",
    "remember",
    "lending",
    "pool",
    "entire",
    "contract",
    "want",
    "address",
    "erc20",
    "address",
    "course",
    "going",
    "erc20",
    "address",
    "account",
    "course",
    "going",
    "account",
    "thing",
    "defined",
    "right",
    "amount",
    "make",
    "really",
    "whatever",
    "want",
    "keep",
    "things",
    "standard",
    "let",
    "go",
    "ahead",
    "going",
    "make",
    "global",
    "variable",
    "say",
    "amount",
    "equals",
    "one",
    "1",
    "2",
    "3",
    "4",
    "5",
    "six",
    "7",
    "8",
    "nine",
    "10",
    "1",
    "2",
    "3",
    "4",
    "5",
    "six",
    "7even",
    "go",
    "ahead",
    "amount",
    "going",
    "zeros",
    "incredibly",
    "disgusting",
    "going",
    "refactor",
    "web",
    "import",
    "web",
    "instead",
    "always",
    "ether",
    "amount",
    "actually",
    "want",
    "say",
    "ether",
    "run",
    "brownie",
    "run",
    "scripts",
    "borup",
    "network",
    "main",
    "net",
    "fork",
    "go",
    "ahead",
    "see",
    "approval",
    "function",
    "working",
    "intended",
    "network",
    "always",
    "whenever",
    "run",
    "type",
    "get",
    "little",
    "annoying",
    "let",
    "go",
    "ahead",
    "change",
    "default",
    "network",
    "main",
    "net",
    "fork",
    "network",
    "browning",
    "let",
    "go",
    "back",
    "borrowing",
    "section",
    "everything",
    "approved",
    "need",
    "go",
    "ahead",
    "deposit",
    "since",
    "know",
    "probably",
    "going",
    "use",
    "lot",
    "let",
    "go",
    "ahead",
    "create",
    "deposit",
    "function",
    "since",
    "everything",
    "approved",
    "go",
    "ahead",
    "use",
    "lending",
    "pool",
    "deposit",
    "method",
    "check",
    "documentation",
    "look",
    "github",
    "ether",
    "scan",
    "see",
    "parameters",
    "takes",
    "even",
    "going",
    "go",
    "ahead",
    "copy",
    "bring",
    "lending",
    "pool",
    "deposit",
    "parameters",
    "let",
    "go",
    "ahead",
    "walk",
    "one",
    "one",
    "first",
    "thing",
    "going",
    "address",
    "asset",
    "know",
    "going",
    "erc20",
    "address",
    "boom",
    "amount",
    "token",
    "go",
    "ahead",
    "amount",
    "variable",
    "address",
    "behalf",
    "going",
    "account",
    "address",
    "depositing",
    "collateral",
    "referral",
    "code",
    "refer",
    "referral",
    "code",
    "referral",
    "code",
    "actually",
    "deprecated",
    "referral",
    "codes",
    "actually",
    "work",
    "anymore",
    "always",
    "going",
    "pass",
    "zero",
    "make",
    "sure",
    "know",
    "going",
    "go",
    "ahead",
    "print",
    "depositing",
    "two",
    "three",
    "done",
    "going",
    "print",
    "whoops",
    "looks",
    "like",
    "forgot",
    "add",
    "final",
    "dictionary",
    "account",
    "ah",
    "one",
    "thing",
    "thing",
    "let",
    "go",
    "ahead",
    "tx",
    "transaction",
    "equals",
    "lending",
    "pool",
    "deposit",
    "going",
    "go",
    "ahead",
    "going",
    "wait",
    "one",
    "block",
    "confirmation",
    "wait",
    "one",
    "transactions",
    "still",
    "processed",
    "run",
    "brownie",
    "run",
    "scripts",
    "borrow",
    "pi",
    "see",
    "actually",
    "went",
    "fine",
    "right",
    "collateral",
    "deposited",
    "go",
    "ahead",
    "actually",
    "take",
    "borrow",
    "go",
    "ahead",
    "borrow",
    "asset",
    "question",
    "going",
    "much",
    "much",
    "actually",
    "borrow",
    "much",
    "borrow",
    "would",
    "result",
    "positive",
    "health",
    "factor",
    "well",
    "maybe",
    "actually",
    "pull",
    "chain",
    "stats",
    "much",
    "actually",
    "deposited",
    "much",
    "collateral",
    "much",
    "debt",
    "forth",
    "way",
    "future",
    "start",
    "clean",
    "take",
    "inventory",
    "stand",
    "collateral",
    "debts",
    "documentation",
    "go",
    "ahead",
    "see",
    "function",
    "called",
    "get",
    "user",
    "account",
    "data",
    "going",
    "return",
    "user",
    "account",
    "data",
    "across",
    "reserves",
    "going",
    "get",
    "total",
    "collateral",
    "deposited",
    "terms",
    "ethereum",
    "going",
    "get",
    "total",
    "debt",
    "terms",
    "ethereum",
    "much",
    "borrow",
    "borrowing",
    "power",
    "liquidation",
    "threshold",
    "close",
    "liquidation",
    "threshold",
    "loan",
    "value",
    "ratio",
    "health",
    "factor",
    "health",
    "factor",
    "obviously",
    "incredibly",
    "important",
    "drops",
    "one",
    "reaches",
    "one",
    "one",
    "users",
    "call",
    "liquidation",
    "call",
    "function",
    "returns",
    "variables",
    "really",
    "care",
    "much",
    "collateral",
    "much",
    "debt",
    "much",
    "available",
    "borrow",
    "let",
    "go",
    "ahead",
    "write",
    "function",
    "actually",
    "sort",
    "us",
    "call",
    "get",
    "borrowable",
    "data",
    "borrowable",
    "data",
    "let",
    "go",
    "ahead",
    "create",
    "def",
    "get",
    "borrowable",
    "data",
    "going",
    "pass",
    "lending",
    "pool",
    "first",
    "parameter",
    "account",
    "second",
    "parameter",
    "looking",
    "call",
    "function",
    "lending",
    "pool",
    "account",
    "let",
    "go",
    "ahead",
    "call",
    "function",
    "lending",
    "pool",
    "doget",
    "user",
    "account",
    "data",
    "pass",
    "account",
    "address",
    "look",
    "api",
    "needs",
    "user",
    "address",
    "get",
    "started",
    "returns",
    "one",
    "two",
    "3",
    "four",
    "five",
    "five",
    "six",
    "variables",
    "go",
    "ahead",
    "get",
    "tuple",
    "syntax",
    "say",
    "total",
    "collateral",
    "e",
    "total",
    "debt",
    "eth",
    "available",
    "borrow",
    "eth",
    "current",
    "liquidation",
    "threshold",
    "loan",
    "value",
    "health",
    "factor",
    "syntax",
    "actually",
    "get",
    "variables",
    "one",
    "call",
    "get",
    "user",
    "account",
    "data",
    "view",
    "function",
    "need",
    "spend",
    "guess",
    "variables",
    "going",
    "get",
    "returned",
    "terms",
    "way",
    "let",
    "go",
    "ahead",
    "convert",
    "way",
    "something",
    "makes",
    "little",
    "bit",
    "sense",
    "us",
    "want",
    "get",
    "available",
    "borrow",
    "e",
    "figure",
    "much",
    "borrow",
    "let",
    "get",
    "terms",
    "actually",
    "understand",
    "stand",
    "fway",
    "available",
    "borrow",
    "eth",
    "terms",
    "ether",
    "total",
    "collateral",
    "eth",
    "equals",
    "web",
    "way",
    "total",
    "collateral",
    "eth",
    "ether",
    "ether",
    "total",
    "deb",
    "eth",
    "equals",
    "thing",
    "web",
    "way",
    "total",
    "debt",
    "eth",
    "terms",
    "ethers",
    "let",
    "even",
    "little",
    "print",
    "f",
    "statement",
    "one",
    "print",
    "f",
    "f",
    "allows",
    "us",
    "put",
    "variables",
    "inside",
    "print",
    "function",
    "say",
    "total",
    "collateral",
    "eth",
    "worth",
    "eth",
    "deposited",
    "even",
    "copy",
    "paste",
    "couple",
    "times",
    "change",
    "one",
    "total",
    "debt",
    "e",
    "change",
    "one",
    "one",
    "available",
    "ar",
    "e",
    "say",
    "worth",
    "e",
    "deposited",
    "total",
    "death",
    "e",
    "worth",
    "f",
    "borrowed",
    "borrow",
    "avilable",
    "bar",
    "e",
    "worth",
    "eth",
    "going",
    "go",
    "ahead",
    "return",
    "going",
    "use",
    "tuple",
    "syntax",
    "return",
    "two",
    "variables",
    "going",
    "say",
    "float",
    "available",
    "borrow",
    "e",
    "float",
    "total",
    "debt",
    "e",
    "reason",
    "add",
    "float",
    "variable",
    "without",
    "math",
    "going",
    "try",
    "later",
    "wo",
    "pan",
    "well",
    "function",
    "get",
    "borrowable",
    "data",
    "going",
    "pass",
    "lending",
    "pool",
    "going",
    "pass",
    "account",
    "since",
    "returning",
    "borrowable",
    "eth",
    "total",
    "debt",
    "say",
    "borrowable",
    "eth",
    "total",
    "debt",
    "equals",
    "function",
    "right",
    "let",
    "go",
    "ahead",
    "try",
    "br",
    "run",
    "scripts",
    "pi",
    "config",
    "default",
    "network",
    "mainten",
    "fork",
    "things",
    "seem",
    "approving",
    "things",
    "seem",
    "depositing",
    "awesome",
    "output",
    "deposited",
    "worth",
    "f",
    "zero",
    "f",
    "borrowed",
    "borrow",
    "worth",
    "f",
    "yes",
    "correct",
    "even",
    "though",
    "f",
    "deposited",
    "borrow",
    "liquidation",
    "thresholds",
    "different",
    "assets",
    "different",
    "risk",
    "parameters",
    "documentation",
    "see",
    "different",
    "liquidation",
    "thresholds",
    "different",
    "assets",
    "see",
    "ethereum",
    "80",
    "loan",
    "value",
    "ethereum",
    "borrow",
    "80",
    "deposit",
    "assets",
    "borrowed",
    "actually",
    "get",
    "liquidated",
    "also",
    "tells",
    "liquidation",
    "bonus",
    "reserve",
    "factor",
    "helpful",
    "pieces",
    "well",
    "borrowable",
    "eth",
    "amount",
    "go",
    "ahead",
    "actually",
    "borrow",
    "dy",
    "let",
    "quick",
    "print",
    "saying",
    "let",
    "borrow",
    "order",
    "us",
    "borrow",
    "dy",
    "also",
    "need",
    "get",
    "conversion",
    "rate",
    "need",
    "get",
    "die",
    "terms",
    "f",
    "going",
    "use",
    "price",
    "pr",
    "feed",
    "luckily",
    "already",
    "know",
    "work",
    "chain",
    "link",
    "get",
    "price",
    "feeds",
    "uses",
    "chain",
    "link",
    "price",
    "feeds",
    "well",
    "using",
    "exact",
    "conversion",
    "rate",
    "tools",
    "ai",
    "going",
    "use",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "get",
    "us",
    "conversion",
    "rate",
    "say",
    "die",
    "f",
    "price",
    "equal",
    "get",
    "asset",
    "price",
    "pass",
    "die",
    "f",
    "price",
    "feed",
    "address",
    "die",
    "ethereum",
    "conversion",
    "rate",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "call",
    "def",
    "get",
    "asset",
    "price",
    "parameter",
    "needs",
    "going",
    "price",
    "feed",
    "address",
    "first",
    "thing",
    "going",
    "need",
    "going",
    "need",
    "get",
    "die",
    "f",
    "price",
    "feed",
    "get",
    "well",
    "know",
    "usual",
    "head",
    "chain",
    "link",
    "documentation",
    "go",
    "ethereum",
    "price",
    "feeds",
    "find",
    "grab",
    "paste",
    "config",
    "main",
    "net",
    "go",
    "ahead",
    "add",
    "die",
    "f",
    "price",
    "feed",
    "paste",
    "config",
    "want",
    "test",
    "coen",
    "obviously",
    "scroll",
    "koven",
    "find",
    "dth",
    "right",
    "grab",
    "address",
    "pop",
    "koven",
    "get",
    "way",
    "got",
    "address",
    "token",
    "going",
    "go",
    "ahead",
    "copy",
    "paste",
    "instead",
    "token",
    "f",
    "price",
    "feed",
    "way",
    "change",
    "price",
    "feed",
    "address",
    "depending",
    "network",
    "want",
    "get",
    "asset",
    "price",
    "function",
    "going",
    "exact",
    "thing",
    "always",
    "going",
    "grab",
    "abi",
    "address",
    "work",
    "contract",
    "get",
    "abi",
    "working",
    "directly",
    "interface",
    "say",
    "die",
    "f",
    "price",
    "feed",
    "equals",
    "interface",
    "dot",
    "aggregator",
    "b3",
    "interface",
    "name",
    "price",
    "feed",
    "interface",
    "look",
    "interfaces",
    "looks",
    "like",
    "actually",
    "go",
    "chain",
    "link",
    "github",
    "uh",
    "guys",
    "already",
    "starting",
    "figure",
    "example",
    "code",
    "interfaces",
    "well",
    "go",
    "right",
    "source",
    "go",
    "go",
    "contracts",
    "get",
    "add",
    "source",
    "interfaces",
    "right",
    "aggregator",
    "v3",
    "interface",
    "want",
    "copy",
    "whole",
    "thing",
    "move",
    "back",
    "interfaces",
    "new",
    "file",
    "file",
    "actually",
    "named",
    "aggregator",
    "v3",
    "interface",
    "could",
    "call",
    "aggregator",
    "v3",
    "aggregator",
    "v3",
    "interface",
    "could",
    "keep",
    "agregator",
    "v3",
    "soulle",
    "keep",
    "convention",
    "call",
    "aggregator",
    "v3",
    "interface",
    "keep",
    "line",
    "chain",
    "link",
    "code",
    "actually",
    "called",
    "going",
    "call",
    "mine",
    "aggregator",
    "v3",
    "interface",
    "notice",
    "couple",
    "different",
    "projects",
    "couple",
    "different",
    "conventions",
    "saved",
    "interface",
    "aggregator",
    "v3",
    "interface",
    "pass",
    "price",
    "feed",
    "address",
    "dief",
    "price",
    "feed",
    "going",
    "contract",
    "call",
    "function",
    "always",
    "refer",
    "back",
    "get",
    "latest",
    "price",
    "documentation",
    "see",
    "actually",
    "work",
    "even",
    "python",
    "code",
    "working",
    "web",
    "3",
    "going",
    "go",
    "ahead",
    "call",
    "latest",
    "round",
    "data",
    "function",
    "also",
    "find",
    "aggregator",
    "v3",
    "interface",
    "latest",
    "round",
    "data",
    "returns",
    "round",
    "id",
    "answer",
    "started",
    "ended",
    "answered",
    "round",
    "really",
    "concerned",
    "answer",
    "bit",
    "way",
    "say",
    "latest",
    "price",
    "equals",
    "die",
    "dieth",
    "price",
    "feed",
    "latest",
    "round",
    "data",
    "instead",
    "grabbing",
    "five",
    "one",
    "two",
    "three",
    "four",
    "five",
    "actually",
    "grab",
    "price",
    "one",
    "index",
    "round",
    "id",
    "zero",
    "price",
    "one",
    "start",
    "two",
    "etc",
    "say",
    "first",
    "index",
    "return",
    "float",
    "latest",
    "price",
    "even",
    "print",
    "another",
    "print",
    "f",
    "statement",
    "die",
    "f",
    "price",
    "latest",
    "price",
    "let",
    "go",
    "ahead",
    "run",
    "great",
    "dieth",
    "price",
    "feed",
    "course",
    "know",
    "looking",
    "right",
    "right",
    "units",
    "know",
    "th",
    "f",
    "price",
    "feed",
    "18",
    "decimal",
    "places",
    "know",
    "number",
    "would",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "number",
    "really",
    "z",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "maybe",
    "want",
    "return",
    "like",
    "maybe",
    "want",
    "say",
    "dieth",
    "price",
    "feed",
    "add",
    "little",
    "bit",
    "web",
    "pi",
    "make",
    "make",
    "little",
    "bit",
    "sense",
    "say",
    "web",
    "way",
    "add",
    "latest",
    "price",
    "bit",
    "comma",
    "ether",
    "maybe",
    "even",
    "converted",
    "latest",
    "price",
    "going",
    "equal",
    "web",
    "3",
    "way",
    "latest",
    "price",
    "ether",
    "print",
    "instead",
    "let",
    "go",
    "ahead",
    "run",
    "right",
    "looks",
    "little",
    "bit",
    "accurate",
    "perfect",
    "okay",
    "great",
    "die",
    "e",
    "price",
    "getting",
    "really",
    "close",
    "able",
    "borrow",
    "actual",
    "asset",
    "let",
    "even",
    "return",
    "converted",
    "lated",
    "price",
    "always",
    "working",
    "units",
    "understand",
    "okay",
    "getting",
    "somewhere",
    "calculate",
    "amount",
    "die",
    "want",
    "borrow",
    "find",
    "little",
    "bit",
    "math",
    "going",
    "reciprocal",
    "die",
    "e",
    "price",
    "times",
    "borrowable",
    "eth",
    "safe",
    "going",
    "times",
    "line",
    "converting",
    "borrowable",
    "eth",
    "borrowable",
    "timesing",
    "95",
    "timing",
    "95",
    "want",
    "get",
    "liquidated",
    "going",
    "little",
    "bit",
    "c",
    "cous",
    "remember",
    "slid",
    "sliding",
    "scale",
    "around",
    "make",
    "safer",
    "less",
    "safe",
    "well",
    "lower",
    "percentage",
    "actually",
    "borrow",
    "maybe",
    "even",
    "borrow",
    "50",
    "collateral",
    "safer",
    "going",
    "keep",
    "mind",
    "deciding",
    "much",
    "actually",
    "borrow",
    "want",
    "run",
    "production",
    "environment",
    "amount",
    "die",
    "borrow",
    "let",
    "even",
    "print",
    "let",
    "say",
    "print",
    "f",
    "going",
    "borrow",
    "amount",
    "dat",
    "borrow",
    "die",
    "finally",
    "going",
    "borrow",
    "looking",
    "documentation",
    "look",
    "borrow",
    "function",
    "see",
    "api",
    "let",
    "go",
    "ahead",
    "let",
    "go",
    "ahead",
    "call",
    "function",
    "borrow",
    "transaction",
    "going",
    "equal",
    "lending",
    "pool",
    "borrow",
    "let",
    "look",
    "parameters",
    "asset",
    "want",
    "borrow",
    "die",
    "address",
    "first",
    "get",
    "die",
    "address",
    "want",
    "put",
    "config",
    "go",
    "config",
    "add",
    "die",
    "address",
    "die",
    "token",
    "find",
    "ether",
    "scan",
    "die",
    "token",
    "looks",
    "like",
    "token",
    "right",
    "copy",
    "address",
    "main",
    "net",
    "remember",
    "want",
    "run",
    "coven",
    "also",
    "going",
    "need",
    "die",
    "token",
    "koven",
    "test",
    "nets",
    "actually",
    "changes",
    "tokens",
    "test",
    "nets",
    "actually",
    "going",
    "go",
    "documentation",
    "go",
    "deployed",
    "contracts",
    "go",
    "coen",
    "always",
    "see",
    "little",
    "flag",
    "thing",
    "pop",
    "say",
    "always",
    "ensure",
    "using",
    "latest",
    "lending",
    "pool",
    "address",
    "since",
    "koven",
    "updated",
    "time",
    "time",
    "going",
    "thing",
    "scroll",
    "tokens",
    "list",
    "coen",
    "addresses",
    "adjacent",
    "file",
    "looks",
    "kind",
    "gross",
    "look",
    "die",
    "see",
    "symbol",
    "die",
    "address",
    "die",
    "coen",
    "test",
    "net",
    "sometimes",
    "change",
    "run",
    "issue",
    "maybe",
    "die",
    "token",
    "working",
    "co",
    "test",
    "net",
    "actually",
    "changed",
    "going",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "die",
    "token",
    "great",
    "let",
    "move",
    "next",
    "parameter",
    "amount",
    "figured",
    "amount",
    "died",
    "borrow",
    "need",
    "change",
    "back",
    "way",
    "going",
    "web",
    "two",
    "way",
    "amount",
    "datab",
    "borrow",
    "ether",
    "right",
    "amount",
    "datab",
    "borrow",
    "human",
    "readable",
    "version",
    "need",
    "way",
    "interest",
    "rate",
    "mode",
    "going",
    "stable",
    "variable",
    "stable",
    "interest",
    "rate",
    "always",
    "exactly",
    "variable",
    "change",
    "depending",
    "lot",
    "different",
    "things",
    "going",
    "safety",
    "going",
    "go",
    "ahead",
    "add",
    "one",
    "going",
    "referral",
    "code",
    "behalf",
    "referral",
    "codes",
    "longer",
    "exist",
    "leave",
    "zero",
    "going",
    "behalf",
    "ourself",
    "account",
    "address",
    "course",
    "account",
    "wait",
    "transaction",
    "complete",
    "done",
    "right",
    "borrowed",
    "die",
    "programmatically",
    "protocol",
    "let",
    "even",
    "print",
    "borrowed",
    "call",
    "get",
    "borrowable",
    "data",
    "function",
    "since",
    "get",
    "borrowable",
    "data",
    "function",
    "print",
    "new",
    "count",
    "information",
    "much",
    "borrowed",
    "let",
    "go",
    "ahead",
    "run",
    "mainit",
    "fork",
    "awesome",
    "done",
    "correctly",
    "see",
    "borrowed",
    "die",
    "see",
    "worth",
    "f",
    "deposited",
    "999",
    "worth",
    "f",
    "borrowed",
    "uh",
    "borrow",
    "little",
    "bit",
    "worth",
    "f",
    "n9",
    "actually",
    "dy",
    "borrowed",
    "deposited",
    "eth",
    "borrowed",
    "dye",
    "obvious",
    "telling",
    "us",
    "much",
    "dy",
    "converted",
    "e",
    "actually",
    "borrowed",
    "160",
    "great",
    "right",
    "learned",
    "borrow",
    "everything",
    "fantastic",
    "let",
    "go",
    "ahead",
    "actually",
    "repay",
    "back",
    "going",
    "call",
    "repay",
    "function",
    "let",
    "put",
    "function",
    "called",
    "repay",
    "give",
    "amount",
    "want",
    "repay",
    "lending",
    "pool",
    "address",
    "account",
    "let",
    "call",
    "let",
    "define",
    "repay",
    "going",
    "repay",
    "everything",
    "going",
    "add",
    "amount",
    "lending",
    "pool",
    "account",
    "parameters",
    "going",
    "pay",
    "back",
    "network",
    "first",
    "thing",
    "need",
    "actually",
    "call",
    "approve",
    "function",
    "prove",
    "going",
    "pay",
    "back",
    "first",
    "thing",
    "going",
    "per",
    "usual",
    "going",
    "actually",
    "approve",
    "erc20",
    "let",
    "say",
    "much",
    "going",
    "approve",
    "web",
    "3",
    "2way",
    "amount",
    "ether",
    "lending",
    "pool",
    "grab",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "going",
    "die",
    "token",
    "course",
    "account",
    "believe",
    "approve",
    "erc20",
    "already",
    "calls",
    "weight",
    "call",
    "approve",
    "going",
    "using",
    "die",
    "borrowed",
    "pay",
    "borrowed",
    "back",
    "going",
    "call",
    "repay",
    "function",
    "say",
    "repay",
    "tx",
    "equals",
    "lending",
    "pool",
    "repay",
    "first",
    "need",
    "asset",
    "going",
    "use",
    "repay",
    "going",
    "use",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "die",
    "token",
    "amount",
    "going",
    "passed",
    "amount",
    "rate",
    "mode",
    "hardcoded",
    "one",
    "address",
    "behalf",
    "going",
    "account",
    "address",
    "course",
    "always",
    "front",
    "count",
    "going",
    "repay",
    "tx",
    "weight",
    "going",
    "wait",
    "one",
    "block",
    "confirmation",
    "print",
    "repaid",
    "done",
    "right",
    "one",
    "print",
    "line",
    "saying",
    "deposited",
    "borrowed",
    "repaid",
    "brownie",
    "chain",
    "link",
    "right",
    "moment",
    "truth",
    "let",
    "see",
    "works",
    "oh",
    "repaid",
    "deposited",
    "borrowed",
    "repaid",
    "brownie",
    "chain",
    "link",
    "awesome",
    "work",
    "want",
    "also",
    "see",
    "work",
    "wallet",
    "address",
    "copy",
    "address",
    "go",
    "coen",
    "ether",
    "scan",
    "paste",
    "right",
    "see",
    "whole",
    "bunch",
    "link",
    "ether",
    "actually",
    "test",
    "everything",
    "ran",
    "coven",
    "test",
    "scent",
    "see",
    "everything",
    "happened",
    "right",
    "ether",
    "scan",
    "address",
    "following",
    "along",
    "correctly",
    "added",
    "contract",
    "addresses",
    "appropriately",
    "able",
    "run",
    "exact",
    "script",
    "coen",
    "testnet",
    "going",
    "one",
    "additional",
    "thing",
    "though",
    "going",
    "us",
    "repay",
    "see",
    "us",
    "little",
    "bit",
    "debt",
    "let",
    "go",
    "ahead",
    "run",
    "brownie",
    "run",
    "scripts",
    "aapi",
    "change",
    "network",
    "coen",
    "going",
    "take",
    "lot",
    "longer",
    "seen",
    "actually",
    "making",
    "transactions",
    "real",
    "network",
    "whoops",
    "looks",
    "like",
    "got",
    "one",
    "dief",
    "price",
    "feeds",
    "wrong",
    "coen",
    "go",
    "documentation",
    "f",
    "looks",
    "like",
    "real",
    "address",
    "cen",
    "copy",
    "paste",
    "whoops",
    "also",
    "probably",
    "token",
    "first",
    "let",
    "go",
    "ahead",
    "run",
    "get",
    "w",
    "script",
    "coen",
    "going",
    "change",
    "account",
    "get",
    "account",
    "brownie",
    "run",
    "scripts",
    "get",
    "p",
    "network",
    "cov",
    "helpful",
    "scripts",
    "way",
    "actually",
    "way",
    "actually",
    "use",
    "wallets",
    "correctly",
    "right",
    "great",
    "actually",
    "grab",
    "address",
    "add",
    "token",
    "paste",
    "add",
    "tokens",
    "token",
    "see",
    "perfect",
    "weth",
    "run",
    "borrow",
    "script",
    "brownie",
    "run",
    "scripts",
    "borrow",
    "network",
    "coen",
    "wow",
    "see",
    "everything",
    "went",
    "correctly",
    "successfully",
    "since",
    "actually",
    "commented",
    "repay",
    "function",
    "still",
    "die",
    "address",
    "wallet",
    "see",
    "going",
    "brownie",
    "config",
    "grabbing",
    "die",
    "token",
    "address",
    "add",
    "token",
    "custom",
    "token",
    "tokens",
    "next",
    "add",
    "tokens",
    "see",
    "indeed",
    "160",
    "die",
    "wallet",
    "since",
    "borrowed",
    "die",
    "instead",
    "also",
    "see",
    "ae",
    "added",
    "working",
    "ui",
    "interest",
    "bearing",
    "instead",
    "regular",
    "wap",
    "ethereum",
    "let",
    "look",
    "one",
    "transactions",
    "see",
    "borrow",
    "transaction",
    "gave",
    "us",
    "stable",
    "debt",
    "bearing",
    "dy",
    "also",
    "dy",
    "owe",
    "dy",
    "debt",
    "got",
    "debt",
    "got",
    "die",
    "gave",
    "interest",
    "bearing",
    "die",
    "rest",
    "protocol",
    "notice",
    "go",
    "test",
    "net",
    "dashboard",
    "see",
    "exactly",
    "script",
    "160",
    "die",
    "borrowed",
    "e",
    "deposited",
    "want",
    "repay",
    "funds",
    "current",
    "collateral",
    "wallet",
    "balance",
    "notice",
    "something",
    "try",
    "repay",
    "everything",
    "wallet",
    "di",
    "actually",
    "borrowed",
    "notice",
    "enough",
    "funds",
    "repay",
    "full",
    "amount",
    "since",
    "actually",
    "borrowed",
    "little",
    "bit",
    "inced",
    "interest",
    "actually",
    "owe",
    "back",
    "originally",
    "borrowed",
    "loans",
    "work",
    "designing",
    "repay",
    "functions",
    "sure",
    "mind",
    "also",
    "repay",
    "minus",
    "one",
    "repay",
    "entire",
    "debt",
    "recommended",
    "send",
    "amount",
    "slightly",
    "higher",
    "current",
    "amount",
    "borrowed",
    "case",
    "maybe",
    "say",
    "want",
    "current",
    "wallet",
    "hit",
    "max",
    "maybe",
    "want",
    "actually",
    "repay",
    "current",
    "collateral",
    "go",
    "ahead",
    "repay",
    "maximum",
    "amount",
    "could",
    "ui",
    "approve",
    "exactly",
    "repay",
    "function",
    "actually",
    "repaid",
    "go",
    "back",
    "dashboard",
    "hit",
    "refresh",
    "see",
    "tiny",
    "bit",
    "ethereum",
    "borrowed",
    "assets",
    "awesome",
    "essentially",
    "learned",
    "everything",
    "need",
    "go",
    "massive",
    "step",
    "forward",
    "teaching",
    "become",
    "quanitative",
    "dii",
    "wizards",
    "build",
    "really",
    "robust",
    "applications",
    "really",
    "robust",
    "financial",
    "applications",
    "defi",
    "world",
    "something",
    "want",
    "point",
    "even",
    "though",
    "python",
    "course",
    "teaching",
    "solidity",
    "smart",
    "contracts",
    "still",
    "best",
    "interest",
    "test",
    "functions",
    "yes",
    "know",
    "python",
    "functions",
    "still",
    "going",
    "best",
    "interest",
    "test",
    "make",
    "sure",
    "application",
    "always",
    "works",
    "expect",
    "going",
    "go",
    "testing",
    "suite",
    "put",
    "really",
    "simple",
    "testing",
    "suite",
    "test",
    "different",
    "functions",
    "created",
    "really",
    "helpful",
    "especially",
    "something",
    "like",
    "get",
    "asset",
    "price",
    "math",
    "might",
    "little",
    "bit",
    "want",
    "make",
    "sure",
    "correctly",
    "link",
    "description",
    "seeing",
    "tests",
    "actually",
    "going",
    "even",
    "easier",
    "lottery",
    "contract",
    "since",
    "testing",
    "python",
    "functions",
    "test",
    "brownie",
    "test",
    "right",
    "fantastically",
    "another",
    "fantastic",
    "time",
    "take",
    "break",
    "go",
    "walk",
    "get",
    "food",
    "next",
    "session",
    "next",
    "lesson",
    "going",
    "learning",
    "nfts",
    "build",
    "use",
    "deploy",
    "look",
    "nfts",
    "hot",
    "right",
    "nfts",
    "also",
    "known",
    "erc",
    "721s",
    "token",
    "standard",
    "created",
    "ethereum",
    "platform",
    "nfts",
    "stands",
    "token",
    "token",
    "standard",
    "similar",
    "erc20",
    "erc20",
    "like",
    "link",
    "maker",
    "goodies",
    "found",
    "ethereum",
    "chain",
    "nft",
    "token",
    "token",
    "means",
    "starkly",
    "unique",
    "one",
    "token",
    "interchangeable",
    "token",
    "class",
    "good",
    "way",
    "think",
    "one",
    "interchangeable",
    "dollar",
    "1",
    "going",
    "value",
    "another",
    "dollar",
    "fungible",
    "tokens",
    "like",
    "erc",
    "20s",
    "one",
    "link",
    "always",
    "going",
    "equivalent",
    "one",
    "link",
    "contrast",
    "going",
    "nfts",
    "nerds",
    "would",
    "know",
    "like",
    "pokemon",
    "would",
    "good",
    "example",
    "nft",
    "one",
    "pokemon",
    "going",
    "different",
    "stats",
    "different",
    "move",
    "sets",
    "interchangeable",
    "pokemon",
    "maybe",
    "relatable",
    "one",
    "like",
    "trading",
    "card",
    "unique",
    "piece",
    "art",
    "like",
    "nfts",
    "nonf",
    "fungible",
    "tokens",
    "moment",
    "best",
    "represented",
    "thought",
    "digital",
    "pieces",
    "art",
    "incorruptible",
    "permanent",
    "history",
    "deployed",
    "etc",
    "like",
    "said",
    "nfts",
    "token",
    "standard",
    "actually",
    "make",
    "much",
    "art",
    "give",
    "stats",
    "make",
    "battle",
    "really",
    "unique",
    "things",
    "pretty",
    "much",
    "whatever",
    "want",
    "right",
    "easiest",
    "way",
    "think",
    "popular",
    "way",
    "think",
    "calling",
    "art",
    "ot",
    "od",
    "type",
    "collectible",
    "anything",
    "unique",
    "begin",
    "getting",
    "ton",
    "buzz",
    "recently",
    "seeing",
    "sold",
    "insane",
    "prices",
    "like",
    "saw",
    "ax",
    "infiniti",
    "sell",
    "nine",
    "plots",
    "land",
    "nine",
    "plots",
    "unique",
    "land",
    "million",
    "also",
    "saw",
    "original",
    "creator",
    "neon",
    "cat",
    "know",
    "cat",
    "sold",
    "like",
    "300",
    "eth",
    "like",
    "said",
    "tokens",
    "deployed",
    "smart",
    "contract",
    "platform",
    "view",
    "different",
    "nft",
    "platforms",
    "like",
    "openc",
    "rable",
    "nft",
    "marketplaces",
    "let",
    "people",
    "buy",
    "sell",
    "obviously",
    "without",
    "marketplaces",
    "decentralized",
    "help",
    "give",
    "good",
    "user",
    "interface",
    "basic",
    "gist",
    "let",
    "talk",
    "standards",
    "erc",
    "721",
    "standard",
    "nft",
    "standard",
    "basis",
    "another",
    "standard",
    "semi",
    "fungible",
    "tokens",
    "1155",
    "going",
    "talk",
    "check",
    "main",
    "differences",
    "721",
    "erc20",
    "erc20",
    "really",
    "simple",
    "mapping",
    "address",
    "much",
    "address",
    "holds",
    "721s",
    "unique",
    "token",
    "ids",
    "token",
    "id",
    "unique",
    "owner",
    "addition",
    "called",
    "token",
    "uri",
    "talk",
    "minute",
    "token",
    "unique",
    "token",
    "id",
    "represents",
    "unique",
    "asset",
    "since",
    "assets",
    "unique",
    "want",
    "able",
    "visualize",
    "show",
    "actually",
    "look",
    "like",
    "need",
    "define",
    "attributes",
    "object",
    "piece",
    "art",
    "need",
    "way",
    "define",
    "art",
    "looks",
    "like",
    "type",
    "character",
    "game",
    "need",
    "way",
    "define",
    "character",
    "stats",
    "nft",
    "metadata",
    "token",
    "uris",
    "come",
    "know",
    "anything",
    "ethereum",
    "know",
    "sometimes",
    "gas",
    "prices",
    "get",
    "pretty",
    "high",
    "especially",
    "comes",
    "storing",
    "lot",
    "space",
    "get",
    "really",
    "really",
    "expensive",
    "one",
    "first",
    "questions",
    "might",
    "well",
    "storing",
    "images",
    "art",
    "pieces",
    "chain",
    "answer",
    "sometimes",
    "back",
    "coming",
    "nfts",
    "artists",
    "deploying",
    "stuff",
    "eevs",
    "artists",
    "like",
    "yeah",
    "art",
    "let",
    "art",
    "going",
    "deploy",
    "one",
    "megabyte",
    "image",
    "onto",
    "ethereum",
    "chain",
    "oh",
    "god",
    "much",
    "gas",
    "expensive",
    "delete",
    "button",
    "um",
    "delting",
    "realized",
    "put",
    "art",
    "chain",
    "going",
    "incredibly",
    "expensive",
    "get",
    "around",
    "put",
    "standard",
    "called",
    "token",
    "uri",
    "universally",
    "unique",
    "indicator",
    "asset",
    "token",
    "looks",
    "like",
    "attributes",
    "token",
    "use",
    "something",
    "like",
    "centralized",
    "api",
    "ipfs",
    "actually",
    "get",
    "token",
    "uri",
    "typical",
    "token",
    "uri",
    "return",
    "something",
    "format",
    "like",
    "name",
    "image",
    "location",
    "description",
    "attributes",
    "like",
    "first",
    "question",
    "would",
    "probably",
    "wh",
    "pa",
    "single",
    "source",
    "seems",
    "pry",
    "centralized",
    "current",
    "limitation",
    "nft",
    "ecosystem",
    "often",
    "talk",
    "onchain",
    "metadata",
    "versus",
    "offchain",
    "metadata",
    "much",
    "easier",
    "cheaper",
    "store",
    "metadata",
    "offchain",
    "lot",
    "people",
    "use",
    "something",
    "like",
    "ipfs",
    "decentralized",
    "take",
    "little",
    "bit",
    "centrality",
    "keep",
    "persisting",
    "also",
    "use",
    "centralized",
    "api",
    "however",
    "obviously",
    "goes",
    "lose",
    "image",
    "lose",
    "everything",
    "associated",
    "nft",
    "nft",
    "marketplaces",
    "actually",
    "ca",
    "wo",
    "read",
    "onchain",
    "attributes",
    "onchain",
    "metadata",
    "used",
    "looking",
    "token",
    "uri",
    "obviously",
    "offchain",
    "metad",
    "data",
    "ca",
    "anything",
    "really",
    "cool",
    "really",
    "interesting",
    "games",
    "nfts",
    "example",
    "wanted",
    "create",
    "onchain",
    "pokemon",
    "game",
    "attributes",
    "would",
    "need",
    "chain",
    "order",
    "pokemon",
    "interact",
    "offchain",
    "becomes",
    "lot",
    "harder",
    "cryptographically",
    "prove",
    "new",
    "nfts",
    "like",
    "wait",
    "kind",
    "lot",
    "information",
    "make",
    "easy",
    "looking",
    "render",
    "image",
    "nft",
    "add",
    "image",
    "ipfs",
    "add",
    "metadata",
    "file",
    "pointing",
    "image",
    "file",
    "ipfs",
    "grab",
    "token",
    "uri",
    "put",
    "set",
    "nft",
    "chain",
    "link",
    "article",
    "great",
    "job",
    "walking",
    "showing",
    "sure",
    "read",
    "looking",
    "learn",
    "code",
    "going",
    "working",
    "actually",
    "available",
    "nft",
    "mix",
    "brownie",
    "mix",
    "official",
    "brownie",
    "mix",
    "allows",
    "us",
    "deploy",
    "three",
    "adorably",
    "cute",
    "dogs",
    "two",
    "different",
    "types",
    "contracts",
    "going",
    "working",
    "going",
    "first",
    "working",
    "simple",
    "collectible",
    "going",
    "work",
    "advanced",
    "collectible",
    "simple",
    "collectible",
    "going",
    "simple",
    "erc",
    "721",
    "standard",
    "going",
    "really",
    "add",
    "bells",
    "whistles",
    "give",
    "like",
    "name",
    "advanced",
    "collectible",
    "going",
    "take",
    "advantage",
    "advanced",
    "true",
    "scarcity",
    "features",
    "talking",
    "protocols",
    "like",
    "avag",
    "goi",
    "ether",
    "cards",
    "use",
    "chain",
    "link",
    "vrf",
    "get",
    "verifiably",
    "random",
    "numbers",
    "create",
    "verifiably",
    "scarce",
    "nfts",
    "something",
    "important",
    "keep",
    "mind",
    "real",
    "world",
    "companies",
    "create",
    "trading",
    "cards",
    "way",
    "prove",
    "scarce",
    "valuable",
    "training",
    "cards",
    "actually",
    "use",
    "verifiable",
    "random",
    "number",
    "whoever",
    "deploying",
    "nfts",
    "ca",
    "even",
    "control",
    "rare",
    "nfts",
    "really",
    "get",
    "verifiable",
    "scarcity",
    "verifiable",
    "rarity",
    "adds",
    "value",
    "tokens",
    "want",
    "go",
    "ahead",
    "work",
    "right",
    "brownie",
    "mix",
    "actually",
    "run",
    "brownie",
    "bake",
    "nft",
    "mix",
    "cd",
    "nft",
    "code",
    "going",
    "right",
    "going",
    "go",
    "deploy",
    "develop",
    "everything",
    "scratch",
    "going",
    "actually",
    "take",
    "previous",
    "concepts",
    "learned",
    "improve",
    "going",
    "learn",
    "lot",
    "interesting",
    "pieces",
    "making",
    "hybrid",
    "smart",
    "contract",
    "nfts",
    "really",
    "perfect",
    "example",
    "hybrid",
    "smart",
    "contract",
    "offchain",
    "component",
    "interaction",
    "random",
    "number",
    "rest",
    "storing",
    "metadata",
    "ipfs",
    "explain",
    "ipfs",
    "little",
    "bit",
    "depth",
    "go",
    "let",
    "go",
    "ahead",
    "get",
    "going",
    "go",
    "ahead",
    "make",
    "new",
    "directory",
    "called",
    "nft",
    "demo",
    "going",
    "cd",
    "code",
    "period",
    "perfect",
    "blank",
    "project",
    "already",
    "know",
    "first",
    "step",
    "going",
    "brownie",
    "knit",
    "create",
    "blank",
    "brownie",
    "repository",
    "let",
    "go",
    "ahead",
    "create",
    "first",
    "contract",
    "call",
    "simple",
    "collectible",
    "doou",
    "since",
    "going",
    "since",
    "going",
    "simple",
    "collectible",
    "simple",
    "nft",
    "going",
    "get",
    "started",
    "similar",
    "erc20",
    "erc",
    "721",
    "standard",
    "number",
    "functions",
    "actually",
    "work",
    "go",
    "ahead",
    "even",
    "look",
    "721",
    "erc",
    "721",
    "token",
    "standard",
    "org",
    "website",
    "see",
    "sample",
    "interface",
    "sample",
    "events",
    "functions",
    "kind",
    "everything",
    "grown",
    "know",
    "love",
    "instead",
    "us",
    "kind",
    "recoding",
    "copy",
    "pasting",
    "scratch",
    "going",
    "using",
    "going",
    "using",
    "open",
    "zepp",
    "erc",
    "721",
    "documentation",
    "going",
    "working",
    "version",
    "version",
    "come",
    "using",
    "version",
    "open",
    "zeppelin",
    "contracts",
    "also",
    "think",
    "little",
    "bit",
    "easier",
    "explain",
    "want",
    "challenge",
    "definitely",
    "try",
    "version",
    "let",
    "go",
    "ahead",
    "jump",
    "right",
    "first",
    "spdx",
    "license",
    "identifier",
    "mit",
    "choose",
    "solidity",
    "version",
    "going",
    "use",
    "pragma",
    "solidity",
    "work",
    "moving",
    "forward",
    "going",
    "go",
    "ahead",
    "look",
    "open",
    "zeppelin",
    "erc721",
    "documentation",
    "going",
    "go",
    "ahead",
    "grab",
    "line",
    "right",
    "import",
    "open",
    "zeppelin",
    "contracts",
    "token",
    "earc",
    "721",
    "earc",
    "soul",
    "even",
    "see",
    "sample",
    "erc721",
    "give",
    "actually",
    "going",
    "similar",
    "erc",
    "721",
    "going",
    "make",
    "going",
    "go",
    "ahead",
    "paste",
    "course",
    "since",
    "open",
    "zeppelin",
    "contracts",
    "going",
    "need",
    "create",
    "brownie",
    "config",
    "always",
    "depend",
    "dencies",
    "going",
    "open",
    "zeppelin",
    "slopen",
    "zeppelin",
    "contracts",
    "like",
    "said",
    "versing",
    "using",
    "version",
    "three",
    "compiler",
    "suk",
    "remappings",
    "say",
    "open",
    "zeppelin",
    "equals",
    "great",
    "let",
    "even",
    "try",
    "compile",
    "right",
    "brownie",
    "compile",
    "perfect",
    "compiled",
    "similarly",
    "erc20",
    "open",
    "zeppelin",
    "going",
    "startup",
    "going",
    "say",
    "contract",
    "simple",
    "collectible",
    "erc721",
    "going",
    "inherit",
    "functions",
    "erc",
    "721",
    "token",
    "standard",
    "start",
    "adding",
    "start",
    "coding",
    "r",
    "simple",
    "erc",
    "721",
    "erc",
    "721",
    "going",
    "make",
    "couple",
    "cute",
    "adorable",
    "dogs",
    "going",
    "one",
    "three",
    "dogs",
    "simple",
    "collectible",
    "going",
    "go",
    "ahead",
    "use",
    "pug",
    "use",
    "image",
    "want",
    "demo",
    "um",
    "however",
    "want",
    "follow",
    "along",
    "us",
    "download",
    "dog",
    "call",
    "pug",
    "create",
    "new",
    "folder",
    "called",
    "img",
    "going",
    "add",
    "pug",
    "png",
    "img",
    "folder",
    "going",
    "nft",
    "going",
    "deploy",
    "going",
    "deploy",
    "simple",
    "pug",
    "smart",
    "contract",
    "going",
    "deploying",
    "pug",
    "image",
    "going",
    "use",
    "nft",
    "going",
    "adorable",
    "pug",
    "let",
    "go",
    "ahead",
    "create",
    "rest",
    "contract",
    "pug",
    "first",
    "thing",
    "going",
    "make",
    "constructor",
    "going",
    "take",
    "input",
    "parameters",
    "going",
    "public",
    "constructor",
    "going",
    "go",
    "ahead",
    "use",
    "erc721",
    "constructor",
    "look",
    "documentation",
    "give",
    "name",
    "symbol",
    "going",
    "use",
    "erc721",
    "constructor",
    "parameters",
    "going",
    "name",
    "going",
    "say",
    "doggy",
    "symbol",
    "going",
    "say",
    "dog",
    "perfect",
    "really",
    "need",
    "first",
    "part",
    "nft",
    "contract",
    "actually",
    "known",
    "factory",
    "contract",
    "main",
    "contract",
    "list",
    "nfts",
    "owners",
    "type",
    "nft",
    "example",
    "type",
    "nft",
    "going",
    "pug",
    "going",
    "dog",
    "actually",
    "need",
    "function",
    "mint",
    "new",
    "nfts",
    "based",
    "pug",
    "absolutely",
    "nft",
    "factory",
    "contract",
    "creates",
    "one",
    "single",
    "nft",
    "going",
    "use",
    "factory",
    "implementation",
    "create",
    "multiple",
    "nfts",
    "going",
    "function",
    "called",
    "create",
    "collectible",
    "create",
    "new",
    "nft",
    "assign",
    "whoever",
    "called",
    "function",
    "anybody",
    "come",
    "create",
    "new",
    "poppy",
    "words",
    "adopt",
    "puppy",
    "going",
    "say",
    "function",
    "create",
    "collectible",
    "public",
    "going",
    "say",
    "returns",
    "256",
    "see",
    "need",
    "minute",
    "create",
    "collectible",
    "assigning",
    "new",
    "token",
    "id",
    "new",
    "owner",
    "look",
    "look",
    "open",
    "zeppelin",
    "erc721",
    "github",
    "see",
    "safe",
    "mint",
    "function",
    "function",
    "use",
    "mint",
    "create",
    "new",
    "nft",
    "function",
    "takes",
    "new",
    "address",
    "going",
    "new",
    "owner",
    "nft",
    "token",
    "id",
    "every",
    "nft",
    "factory",
    "contract",
    "unique",
    "token",
    "id",
    "going",
    "token",
    "ids",
    "start",
    "zero",
    "increment",
    "every",
    "time",
    "new",
    "token",
    "minted",
    "safe",
    "mint",
    "function",
    "calls",
    "safe",
    "mint",
    "function",
    "calls",
    "minting",
    "function",
    "looking",
    "code",
    "mint",
    "function",
    "really",
    "function",
    "calls",
    "creates",
    "nft",
    "see",
    "actually",
    "two",
    "mappings",
    "update",
    "update",
    "owners",
    "mapping",
    "mapping",
    "token",
    "ids",
    "owners",
    "token",
    "ids",
    "update",
    "balances",
    "mapping",
    "mapping",
    "owner",
    "address",
    "token",
    "count",
    "number",
    "tokens",
    "owner",
    "actually",
    "happening",
    "call",
    "mint",
    "case",
    "safe",
    "mint",
    "function",
    "difference",
    "safe",
    "min",
    "mint",
    "safe",
    "min",
    "checks",
    "see",
    "token",
    "id",
    "already",
    "used",
    "way",
    "actually",
    "override",
    "owns",
    "tokens",
    "owns",
    "token",
    "ids",
    "going",
    "use",
    "saf",
    "min",
    "function",
    "first",
    "need",
    "think",
    "okay",
    "well",
    "going",
    "need",
    "way",
    "count",
    "token",
    "ids",
    "every",
    "single",
    "person",
    "unique",
    "unique",
    "token",
    "id",
    "let",
    "create",
    "global",
    "variable",
    "un",
    "256",
    "public",
    "token",
    "counter",
    "initialize",
    "token",
    "counter",
    "zero",
    "course",
    "initializing",
    "token",
    "counter",
    "zero",
    "let",
    "make",
    "explicit",
    "create",
    "new",
    "collectible",
    "going",
    "say",
    "went",
    "256",
    "new",
    "token",
    "id",
    "going",
    "equal",
    "token",
    "counter",
    "going",
    "iterate",
    "every",
    "time",
    "mint",
    "new",
    "token",
    "example",
    "going",
    "iterate",
    "create",
    "collectible",
    "new",
    "token",
    "id",
    "equals",
    "token",
    "counter",
    "going",
    "call",
    "safe",
    "min",
    "function",
    "since",
    "inheriting",
    "open",
    "zeppelins",
    "erc721",
    "need",
    "give",
    "new",
    "nft",
    "owner",
    "going",
    "message",
    "sender",
    "whoever",
    "calls",
    "function",
    "need",
    "give",
    "unique",
    "token",
    "id",
    "going",
    "new",
    "token",
    "id",
    "whenever",
    "miss",
    "one",
    "going",
    "want",
    "increment",
    "token",
    "counter",
    "say",
    "token",
    "counter",
    "equals",
    "token",
    "counter",
    "one",
    "return",
    "new",
    "token",
    "id",
    "return",
    "token",
    "id",
    "token",
    "created",
    "boom",
    "looking",
    "incredibly",
    "minimalistic",
    "contract",
    "deploy",
    "nfts",
    "need",
    "run",
    "brownie",
    "compile",
    "make",
    "sure",
    "everything",
    "right",
    "product",
    "compiled",
    "see",
    "build",
    "great",
    "job",
    "job",
    "obviously",
    "might",
    "little",
    "dissatisfying",
    "breakdown",
    "gave",
    "view",
    "token",
    "token",
    "look",
    "like",
    "thought",
    "wanted",
    "doggy",
    "know",
    "looks",
    "like",
    "dog",
    "get",
    "image",
    "blockchain",
    "metadata",
    "going",
    "come",
    "play",
    "look",
    "original",
    "erc",
    "721",
    "part",
    "called",
    "metadata",
    "extension",
    "optional",
    "erc721",
    "smart",
    "contracts",
    "talked",
    "anytime",
    "make",
    "transaction",
    "chain",
    "costs",
    "gas",
    "even",
    "tiny",
    "amounts",
    "data",
    "cost",
    "gas",
    "images",
    "much",
    "bigger",
    "little",
    "bits",
    "data",
    "cost",
    "lot",
    "gas",
    "standard",
    "created",
    "developers",
    "kept",
    "mind",
    "knew",
    "storing",
    "entire",
    "images",
    "entire",
    "gifts",
    "entire",
    "videos",
    "chain",
    "going",
    "incredibly",
    "costly",
    "added",
    "piece",
    "metadatas",
    "token",
    "uris",
    "token",
    "uri",
    "distinct",
    "uniform",
    "resource",
    "identifier",
    "given",
    "asset",
    "example",
    "uri",
    "metadata",
    "going",
    "demoing",
    "today",
    "uri",
    "unique",
    "resource",
    "identifier",
    "something",
    "like",
    "https",
    "ipfs",
    "url",
    "string",
    "uniquely",
    "points",
    "metadata",
    "metadata",
    "file",
    "going",
    "look",
    "like",
    "going",
    "title",
    "title",
    "nft",
    "type",
    "different",
    "properties",
    "stats",
    "attributes",
    "example",
    "going",
    "pug",
    "nft",
    "going",
    "defined",
    "like",
    "going",
    "name",
    "pug",
    "description",
    "going",
    "adorable",
    "pug",
    "pup",
    "going",
    "called",
    "image",
    "uri",
    "defines",
    "token",
    "actually",
    "looks",
    "like",
    "copy",
    "paste",
    "another",
    "browser",
    "get",
    "returned",
    "token",
    "uri",
    "metadata",
    "adjacent",
    "object",
    "going",
    "enable",
    "different",
    "nft",
    "platforms",
    "actually",
    "render",
    "nft",
    "example",
    "pug",
    "going",
    "look",
    "like",
    "different",
    "nft",
    "marketplaces",
    "like",
    "openc",
    "platforms",
    "like",
    "openc",
    "understand",
    "need",
    "show",
    "image",
    "need",
    "use",
    "name",
    "need",
    "use",
    "description",
    "traits",
    "look",
    "back",
    "nft",
    "openc",
    "see",
    "name",
    "pug",
    "see",
    "description",
    "go",
    "levels",
    "see",
    "cuteness",
    "100",
    "100",
    "course",
    "leads",
    "us",
    "really",
    "interesting",
    "point",
    "storing",
    "image",
    "offchain",
    "image",
    "decentralized",
    "storing",
    "image",
    "offchain",
    "guarantee",
    "nft",
    "going",
    "stay",
    "forever",
    "leads",
    "us",
    "little",
    "tidbit",
    "storing",
    "data",
    "blockchain",
    "current",
    "recording",
    "storing",
    "lot",
    "data",
    "chain",
    "get",
    "incredibly",
    "expensive",
    "data",
    "store",
    "transactions",
    "make",
    "store",
    "data",
    "chain",
    "gas",
    "going",
    "spend",
    "time",
    "recording",
    "e",
    "eum",
    "little",
    "less",
    "900",
    "gb",
    "size",
    "ton",
    "people",
    "put",
    "full",
    "videos",
    "movies",
    "massive",
    "images",
    "ethereum",
    "would",
    "grow",
    "exponentially",
    "proportion",
    "would",
    "become",
    "unsustainable",
    "blockchain",
    "network",
    "whole",
    "ethereum",
    "great",
    "actually",
    "storing",
    "ton",
    "data",
    "store",
    "lot",
    "data",
    "lot",
    "better",
    "logic",
    "smart",
    "contracts",
    "lot",
    "different",
    "platforms",
    "actually",
    "working",
    "problem",
    "storage",
    "platforms",
    "allow",
    "people",
    "store",
    "data",
    "decentralized",
    "way",
    "going",
    "exponentially",
    "explode",
    "size",
    "ethereum",
    "different",
    "smart",
    "contract",
    "platforms",
    "decentralized",
    "storage",
    "methodology",
    "going",
    "work",
    "going",
    "ipfs",
    "interplanetary",
    "file",
    "system",
    "actually",
    "going",
    "store",
    "image",
    "actually",
    "going",
    "store",
    "image",
    "nft",
    "marketplaces",
    "know",
    "nft",
    "looks",
    "like",
    "protocols",
    "protocols",
    "set",
    "server",
    "set",
    "token",
    "uri",
    "instead",
    "decentralized",
    "service",
    "like",
    "ipfs",
    "use",
    "maybe",
    "centralized",
    "server",
    "obviously",
    "massive",
    "issue",
    "server",
    "goes",
    "want",
    "change",
    "uh",
    "image",
    "want",
    "change",
    "stats",
    "change",
    "server",
    "protocol",
    "like",
    "ipfs",
    "going",
    "lot",
    "easier",
    "quicker",
    "decentralized",
    "version",
    "full",
    "solution",
    "going",
    "using",
    "something",
    "ipfs",
    "filecoin",
    "easy",
    "solutions",
    "still",
    "built",
    "going",
    "use",
    "ipfs",
    "free",
    "quick",
    "easy",
    "expanded",
    "combine",
    "filecoin",
    "even",
    "easier",
    "work",
    "something",
    "else",
    "want",
    "touch",
    "comes",
    "metadata",
    "right",
    "nft",
    "marketplaces",
    "know",
    "pull",
    "attributes",
    "token",
    "uri",
    "want",
    "build",
    "really",
    "cool",
    "nfts",
    "interact",
    "attributes",
    "maybe",
    "like",
    "like",
    "attack",
    "stats",
    "attack",
    "moves",
    "like",
    "pokemon",
    "example",
    "trading",
    "cards",
    "ca",
    "store",
    "token",
    "uri",
    "blockchain",
    "know",
    "anything",
    "token",
    "uri",
    "actually",
    "need",
    "store",
    "attributes",
    "chain",
    "really",
    "hoping",
    "future",
    "lot",
    "nft",
    "marketplaces",
    "going",
    "get",
    "better",
    "pulling",
    "metadata",
    "onchain",
    "right",
    "attribute",
    "give",
    "nfts",
    "actually",
    "reproduce",
    "token",
    "metadata",
    "token",
    "uri",
    "well",
    "learned",
    "lot",
    "metadata",
    "ipfs",
    "token",
    "uris",
    "everything",
    "like",
    "let",
    "update",
    "simple",
    "nft",
    "able",
    "render",
    "openc",
    "render",
    "nft",
    "platforms",
    "right",
    "deploy",
    "nobody",
    "would",
    "know",
    "doggy",
    "looks",
    "like",
    "let",
    "give",
    "token",
    "uri",
    "crate",
    "collectible",
    "let",
    "string",
    "memory",
    "token",
    "uri",
    "call",
    "safe",
    "mint",
    "function",
    "another",
    "function",
    "importing",
    "called",
    "set",
    "token",
    "u",
    "going",
    "set",
    "token",
    "uri",
    "token",
    "id",
    "going",
    "give",
    "token",
    "uri",
    "allow",
    "nft",
    "actually",
    "image",
    "associated",
    "actually",
    "see",
    "let",
    "go",
    "ahead",
    "let",
    "go",
    "ahead",
    "create",
    "script",
    "going",
    "deploy",
    "nft",
    "factory",
    "contract",
    "create",
    "us",
    "collectible",
    "going",
    "new",
    "file",
    "call",
    "deploy",
    "create",
    "piy",
    "let",
    "jump",
    "script",
    "def",
    "main",
    "first",
    "need",
    "start",
    "account",
    "go",
    "ahead",
    "create",
    "helpful",
    "scripts",
    "py",
    "go",
    "ahead",
    "copy",
    "paste",
    "get",
    "account",
    "function",
    "want",
    "course",
    "since",
    "added",
    "config",
    "wallet",
    "key",
    "going",
    "go",
    "brownie",
    "config",
    "add",
    "wallets",
    "key",
    "going",
    "grab",
    "private",
    "key",
    "environment",
    "variable",
    "since",
    "using",
    "private",
    "key",
    "going",
    "create",
    "env",
    "need",
    "export",
    "private",
    "key",
    "also",
    "going",
    "need",
    "export",
    "web",
    "3",
    "inf",
    "fura",
    "project",
    "id",
    "copy",
    "paste",
    "last",
    "project",
    "private",
    "key",
    "web3",
    "inferior",
    "project",
    "id",
    "ether",
    "scan",
    "token",
    "actually",
    "verify",
    "chain",
    "add",
    "new",
    "file",
    "itp",
    "older",
    "versions",
    "python",
    "know",
    "indeed",
    "package",
    "go",
    "ahead",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "import",
    "simple",
    "collectible",
    "run",
    "simple",
    "collectible",
    "equals",
    "simple",
    "collectible",
    "deoy",
    "look",
    "look",
    "simple",
    "collectible",
    "constructor",
    "parameters",
    "account",
    "simple",
    "collectable",
    "deployed",
    "need",
    "actually",
    "call",
    "actually",
    "need",
    "call",
    "create",
    "collectible",
    "function",
    "going",
    "pass",
    "string",
    "going",
    "token",
    "uri",
    "going",
    "go",
    "ahead",
    "use",
    "sample",
    "token",
    "uri",
    "included",
    "nft",
    "mix",
    "looking",
    "get",
    "token",
    "u",
    "look",
    "nft",
    "mix",
    "patrick",
    "collins",
    "hopefully",
    "github",
    "show",
    "right",
    "go",
    "right",
    "scripts",
    "simple",
    "collectible",
    "folder",
    "create",
    "collectible",
    "big",
    "free",
    "going",
    "grab",
    "script",
    "going",
    "sample",
    "token",
    "uri",
    "equals",
    "paste",
    "token",
    "uri",
    "browser",
    "ca",
    "see",
    "might",
    "add",
    "something",
    "like",
    "ipfs",
    "companion",
    "browser",
    "like",
    "browsers",
    "natively",
    "link",
    "ipfs",
    "companion",
    "project",
    "github",
    "repo",
    "token",
    "ur",
    "call",
    "create",
    "collectible",
    "function",
    "transaction",
    "equals",
    "simple",
    "collectible",
    "create",
    "collectible",
    "pass",
    "sample",
    "token",
    "urri",
    "course",
    "account",
    "tx",
    "wait",
    "one",
    "block",
    "done",
    "correctly",
    "actually",
    "able",
    "see",
    "nft",
    "nft",
    "marketplace",
    "like",
    "openc",
    "let",
    "quick",
    "print",
    "line",
    "print",
    "awesome",
    "view",
    "nft",
    "fst",
    "string",
    "going",
    "put",
    "openc",
    "url",
    "rink",
    "b",
    "going",
    "say",
    "openc",
    "url",
    "going",
    "equal",
    "pop",
    "open",
    "c",
    "pop",
    "openc",
    "pug",
    "rink",
    "b",
    "testnet",
    "go",
    "ahead",
    "grab",
    "first",
    "start",
    "string",
    "going",
    "https",
    "testnets",
    "assets",
    "address",
    "contract",
    "see",
    "openc",
    "url",
    "going",
    "slash",
    "put",
    "little",
    "brackets",
    "slash",
    "another",
    "one",
    "url",
    "tests",
    "open",
    "assets",
    "contract",
    "address",
    "token",
    "id",
    "end",
    "going",
    "look",
    "like",
    "print",
    "line",
    "awesome",
    "view",
    "nft",
    "open",
    "format",
    "simple",
    "collectible",
    "address",
    "comma",
    "going",
    "simple",
    "collectible",
    "dot",
    "token",
    "counter",
    "minus",
    "one",
    "recently",
    "deployed",
    "one",
    "run",
    "browny",
    "run",
    "scripts",
    "deploy",
    "create",
    "network",
    "rinke",
    "awesome",
    "get",
    "print",
    "line",
    "saying",
    "awesome",
    "view",
    "nft",
    "https",
    "test",
    "keep",
    "mind",
    "obviously",
    "mainnet",
    "ca",
    "use",
    "test",
    "nuts",
    "openc",
    "doio",
    "assets",
    "address",
    "nft",
    "contract",
    "token",
    "id",
    "well",
    "go",
    "ahead",
    "click",
    "looks",
    "like",
    "already",
    "actually",
    "rendered",
    "opy",
    "could",
    "even",
    "go",
    "ahead",
    "hit",
    "refresh",
    "metadata",
    "case",
    "show",
    "right",
    "away",
    "looks",
    "like",
    "us",
    "show",
    "right",
    "away",
    "awesome",
    "kind",
    "fun",
    "parts",
    "openc",
    "go",
    "profile",
    "actually",
    "able",
    "see",
    "nfts",
    "test",
    "net",
    "actually",
    "deploy",
    "doggy",
    "twice",
    "test",
    "actually",
    "great",
    "created",
    "simple",
    "collectible",
    "course",
    "project",
    "complete",
    "without",
    "tests",
    "let",
    "create",
    "tests",
    "since",
    "also",
    "going",
    "advanced",
    "collectible",
    "going",
    "skip",
    "integration",
    "test",
    "going",
    "write",
    "really",
    "simple",
    "unit",
    "test",
    "create",
    "new",
    "folder",
    "call",
    "unit",
    "new",
    "file",
    "test",
    "simple",
    "collectable",
    "dopy",
    "let",
    "create",
    "first",
    "test",
    "def",
    "test",
    "create",
    "simple",
    "collectible",
    "make",
    "sure",
    "actually",
    "create",
    "syle",
    "collectible",
    "make",
    "sure",
    "unit",
    "test",
    "script",
    "helpful",
    "scripts",
    "import",
    "local",
    "blockchain",
    "environments",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "pest",
    "skip",
    "course",
    "need",
    "brownie",
    "import",
    "network",
    "also",
    "import",
    "py",
    "test",
    "something",
    "actually",
    "test",
    "could",
    "go",
    "ahead",
    "even",
    "test",
    "scripts",
    "importing",
    "uh",
    "deploy",
    "create",
    "testing",
    "something",
    "like",
    "return",
    "simple",
    "collectible",
    "test",
    "could",
    "scripts",
    "deploy",
    "create",
    "import",
    "deploy",
    "create",
    "back",
    "deploy",
    "create",
    "script",
    "modify",
    "little",
    "bit",
    "instead",
    "main",
    "call",
    "deploy",
    "create",
    "main",
    "function",
    "call",
    "deploy",
    "create",
    "see",
    "rowny",
    "run",
    "scripts",
    "deploy",
    "create",
    "pi",
    "go",
    "ahead",
    "run",
    "run",
    "development",
    "network",
    "real",
    "quick",
    "instead",
    "rink",
    "b",
    "see",
    "also",
    "work",
    "obviously",
    "wo",
    "actually",
    "able",
    "see",
    "nft",
    "open",
    "c",
    "deployed",
    "brownie",
    "temporary",
    "ginach",
    "chain",
    "opposed",
    "persistent",
    "rink",
    "chain",
    "test",
    "could",
    "could",
    "run",
    "simple",
    "collectible",
    "equals",
    "deploy",
    "create",
    "insert",
    "assert",
    "simple",
    "collectible",
    "owner",
    "zero",
    "going",
    "equal",
    "get",
    "account",
    "also",
    "import",
    "get",
    "count",
    "run",
    "brownie",
    "test",
    "make",
    "sure",
    "works",
    "perfect",
    "fun",
    "dandy",
    "couple",
    "things",
    "go",
    "let",
    "create",
    "quick",
    "couple",
    "notes",
    "number",
    "one",
    "upload",
    "image",
    "ipfs",
    "used",
    "token",
    "uri",
    "already",
    "existing",
    "right",
    "actually",
    "upload",
    "something",
    "ipfs",
    "go",
    "ipfs",
    "decentralized",
    "really",
    "talk",
    "talk",
    "much",
    "ipfs",
    "number",
    "three",
    "anyone",
    "mint",
    "nft",
    "type",
    "stats",
    "right",
    "going",
    "verifiably",
    "scarce",
    "random",
    "right",
    "cool",
    "want",
    "actually",
    "build",
    "nft",
    "project",
    "pieces",
    "upload",
    "image",
    "ipfs",
    "going",
    "talk",
    "little",
    "bit",
    "ipfs",
    "decentralized",
    "preferred",
    "solution",
    "storing",
    "nft",
    "metadata",
    "going",
    "make",
    "nft",
    "verifiably",
    "random",
    "verifiably",
    "scarce",
    "like",
    "things",
    "like",
    "ether",
    "cards",
    "aboi",
    "let",
    "go",
    "ahead",
    "project",
    "integrate",
    "chain",
    "link",
    "vrf",
    "make",
    "nft",
    "verifiably",
    "scarce",
    "verifiably",
    "random",
    "also",
    "teach",
    "guys",
    "upload",
    "ipfs",
    "work",
    "ipfs",
    "let",
    "go",
    "ahead",
    "let",
    "create",
    "new",
    "file",
    "contracts",
    "call",
    "advanced",
    "collectible",
    "soul",
    "going",
    "going",
    "make",
    "nft",
    "contract",
    "token",
    "uri",
    "one",
    "three",
    "different",
    "dogs",
    "look",
    "nft",
    "mix",
    "images",
    "section",
    "pug",
    "shibba",
    "inu",
    "st",
    "bernard",
    "one",
    "three",
    "dogs",
    "going",
    "make",
    "mint",
    "one",
    "nfts",
    "going",
    "get",
    "going",
    "get",
    "random",
    "one",
    "three",
    "dogs",
    "going",
    "go",
    "stat",
    "generation",
    "like",
    "creating",
    "battle",
    "battling",
    "nfts",
    "really",
    "games",
    "nfts",
    "guys",
    "want",
    "see",
    "version",
    "contracts",
    "check",
    "dungeons",
    "dragons",
    "nft",
    "link",
    "github",
    "see",
    "actually",
    "creates",
    "characters",
    "battle",
    "like",
    "stats",
    "attributes",
    "like",
    "um",
    "like",
    "attack",
    "uh",
    "constitution",
    "different",
    "things",
    "find",
    "dung",
    "dungeons",
    "dragons",
    "one",
    "done",
    "actually",
    "truffle",
    "opposed",
    "done",
    "brownie",
    "contracts",
    "going",
    "migrations",
    "soul",
    "looking",
    "check",
    "absolutely",
    "ton",
    "fun",
    "really",
    "cool",
    "images",
    "well",
    "sure",
    "check",
    "looking",
    "anyways",
    "going",
    "looking",
    "going",
    "make",
    "nft",
    "contract",
    "token",
    "uri",
    "one",
    "three",
    "different",
    "types",
    "dogs",
    "going",
    "randomly",
    "selected",
    "let",
    "go",
    "ahead",
    "first",
    "going",
    "spx",
    "license",
    "identifier",
    "right",
    "top",
    "go",
    "ahead",
    "put",
    "going",
    "even",
    "use",
    "use",
    "solidity",
    "version",
    "going",
    "use",
    "open",
    "zeppelin",
    "literally",
    "copy",
    "paste",
    "last",
    "project",
    "going",
    "create",
    "contract",
    "advance",
    "collectible",
    "going",
    "say",
    "erc",
    "721",
    "great",
    "since",
    "going",
    "want",
    "work",
    "chain",
    "link",
    "vrf",
    "get",
    "provably",
    "random",
    "nft",
    "also",
    "going",
    "want",
    "import",
    "chain",
    "linkon",
    "contracts",
    "slsrc",
    "vrf",
    "con",
    "consumer",
    "base",
    "soul",
    "course",
    "means",
    "going",
    "go",
    "back",
    "going",
    "add",
    "smart",
    "contract",
    "kit",
    "sl",
    "chain",
    "link",
    "brownie",
    "contracts",
    "going",
    "go",
    "ahead",
    "add",
    "remapping",
    "say",
    "chain",
    "link",
    "equals",
    "boom",
    "awesome",
    "imported",
    "chain",
    "link",
    "bit",
    "advanced",
    "collectible",
    "erc721",
    "going",
    "vrf",
    "consumer",
    "base",
    "always",
    "let",
    "go",
    "ahead",
    "start",
    "constructor",
    "know",
    "lottery",
    "smart",
    "contract",
    "actually",
    "going",
    "want",
    "parametrize",
    "lot",
    "pieces",
    "working",
    "vrf",
    "coordinator",
    "working",
    "different",
    "chains",
    "different",
    "test",
    "nets",
    "going",
    "address",
    "vf",
    "coordinator",
    "going",
    "address",
    "link",
    "token",
    "bytes",
    "32",
    "keyh",
    "always",
    "head",
    "back",
    "docs",
    "chain",
    "link",
    "go",
    "get",
    "random",
    "number",
    "case",
    "forget",
    "parameters",
    "vf",
    "coordinator",
    "link",
    "token",
    "keyh",
    "fee",
    "great",
    "went",
    "256",
    "fee",
    "make",
    "public",
    "well",
    "add",
    "little",
    "curly",
    "bracket",
    "go",
    "ahead",
    "start",
    "rest",
    "course",
    "need",
    "vrf",
    "consumer",
    "based",
    "constructor",
    "erc721",
    "constructor",
    "vrf",
    "consumer",
    "base",
    "going",
    "vrf",
    "coordinator",
    "link",
    "token",
    "erc",
    "721",
    "could",
    "parameter",
    "tize",
    "well",
    "know",
    "going",
    "dog",
    "doggy",
    "symbol",
    "dog",
    "symol",
    "collectible",
    "know",
    "also",
    "going",
    "need",
    "token",
    "counter",
    "bit",
    "un",
    "256",
    "token",
    "counter",
    "right",
    "going",
    "token",
    "counter",
    "equals",
    "zero",
    "course",
    "going",
    "need",
    "key",
    "hash",
    "let",
    "make",
    "un",
    "56",
    "public",
    "token",
    "counter",
    "excuse",
    "going",
    "bytes",
    "32",
    "public",
    "keyh",
    "going",
    "un",
    "256",
    "public",
    "fee",
    "set",
    "keyh",
    "equals",
    "keyh",
    "fee",
    "equals",
    "fee",
    "great",
    "combination",
    "lot",
    "stuff",
    "lottery",
    "smart",
    "contract",
    "pieces",
    "erc",
    "721",
    "need",
    "keyh",
    "fee",
    "vf",
    "coordinator",
    "link",
    "token",
    "vrf",
    "consumer",
    "base",
    "oops",
    "put",
    "extra",
    "quote",
    "need",
    "dog",
    "doggy",
    "token",
    "counter",
    "ec",
    "721",
    "going",
    "create",
    "function",
    "create",
    "collectible",
    "going",
    "function",
    "create",
    "collectible",
    "going",
    "string",
    "memory",
    "token",
    "uri",
    "time",
    "python",
    "scripts",
    "actually",
    "going",
    "define",
    "getting",
    "token",
    "uri",
    "going",
    "create",
    "going",
    "make",
    "public",
    "going",
    "return",
    "bytes",
    "32",
    "remember",
    "way",
    "back",
    "lottery",
    "event",
    "requested",
    "lottery",
    "winner",
    "called",
    "chain",
    "link",
    "vrf",
    "going",
    "similar",
    "thing",
    "going",
    "make",
    "event",
    "whenever",
    "request",
    "one",
    "new",
    "dogs",
    "also",
    "going",
    "return",
    "going",
    "return",
    "request",
    "id",
    "since",
    "using",
    "chain",
    "link",
    "vrf",
    "go",
    "ahead",
    "call",
    "request",
    "randomness",
    "function",
    "head",
    "docs",
    "chain",
    "link",
    "imported",
    "erc",
    "721",
    "request",
    "receive",
    "model",
    "going",
    "call",
    "back",
    "fulfill",
    "randomness",
    "function",
    "going",
    "need",
    "couple",
    "different",
    "things",
    "want",
    "user",
    "called",
    "create",
    "collectible",
    "user",
    "gets",
    "assigned",
    "token",
    "id",
    "first",
    "bytes",
    "32",
    "request",
    "id",
    "equals",
    "request",
    "randomness",
    "going",
    "pass",
    "obviously",
    "key",
    "hash",
    "fee",
    "going",
    "create",
    "randomness",
    "request",
    "get",
    "random",
    "breed",
    "dogs",
    "let",
    "go",
    "ahead",
    "define",
    "little",
    "bit",
    "fulfill",
    "randomness",
    "function",
    "figure",
    "actually",
    "going",
    "pick",
    "random",
    "dog",
    "well",
    "first",
    "thing",
    "going",
    "need",
    "going",
    "need",
    "definition",
    "different",
    "breeds",
    "dog",
    "actually",
    "similar",
    "lottery",
    "going",
    "create",
    "new",
    "type",
    "called",
    "breed",
    "using",
    "enum",
    "going",
    "enum",
    "breed",
    "going",
    "give",
    "three",
    "types",
    "pug",
    "going",
    "state",
    "zero",
    "shiba",
    "inu",
    "going",
    "state",
    "one",
    "st",
    "bernard",
    "going",
    "state",
    "three",
    "breed",
    "going",
    "one",
    "three",
    "breeds",
    "function",
    "fulfill",
    "randomness",
    "get",
    "random",
    "number",
    "back",
    "use",
    "random",
    "number",
    "pick",
    "one",
    "three",
    "breeds",
    "course",
    "need",
    "b",
    "32",
    "request",
    "id",
    "u",
    "256",
    "random",
    "number",
    "going",
    "make",
    "internal",
    "override",
    "vrf",
    "coordinator",
    "call",
    "going",
    "going",
    "select",
    "breed",
    "based",
    "random",
    "number",
    "going",
    "say",
    "breed",
    "breed",
    "saying",
    "breed",
    "variable",
    "type",
    "breed",
    "going",
    "equal",
    "breed",
    "generated",
    "random",
    "number",
    "mod",
    "three",
    "since",
    "one",
    "two",
    "three",
    "different",
    "breeds",
    "awesome",
    "going",
    "get",
    "random",
    "breed",
    "however",
    "need",
    "assign",
    "breed",
    "token",
    "id",
    "random",
    "breed",
    "back",
    "actually",
    "go",
    "ahead",
    "assign",
    "well",
    "going",
    "create",
    "mapping",
    "look",
    "something",
    "like",
    "token",
    "id",
    "breed",
    "going",
    "get",
    "token",
    "id",
    "somehow",
    "going",
    "equal",
    "breed",
    "first",
    "question",
    "okay",
    "well",
    "order",
    "us",
    "assign",
    "breed",
    "token",
    "id",
    "actually",
    "get",
    "token",
    "id",
    "well",
    "going",
    "grab",
    "token",
    "id",
    "u",
    "256",
    "new",
    "token",
    "id",
    "equals",
    "token",
    "counter",
    "set",
    "token",
    "id",
    "breed",
    "using",
    "new",
    "token",
    "id",
    "equal",
    "breed",
    "going",
    "want",
    "make",
    "token",
    "id",
    "breed",
    "mapping",
    "mapping",
    "un",
    "256",
    "map",
    "breed",
    "call",
    "token",
    "id",
    "breed",
    "way",
    "token",
    "id",
    "going",
    "specific",
    "breed",
    "based",
    "mapping",
    "results",
    "perfect",
    "okay",
    "else",
    "need",
    "fulfillment",
    "need",
    "mint",
    "nft",
    "need",
    "set",
    "token",
    "uri",
    "well",
    "meed",
    "called",
    "safe",
    "mint",
    "function",
    "however",
    "message",
    "sender",
    "always",
    "going",
    "vrf",
    "coordinator",
    "since",
    "vrf",
    "coordinator",
    "actually",
    "one",
    "calling",
    "fulfill",
    "randomness",
    "ca",
    "actually",
    "message",
    "sender",
    "need",
    "figure",
    "get",
    "original",
    "caller",
    "create",
    "collectible",
    "get",
    "original",
    "message",
    "sender",
    "create",
    "collectible",
    "well",
    "answer",
    "actually",
    "going",
    "another",
    "mapping",
    "call",
    "create",
    "collectible",
    "create",
    "mapping",
    "request",
    "id",
    "sender",
    "going",
    "take",
    "request",
    "id",
    "key",
    "whoever",
    "sent",
    "value",
    "going",
    "create",
    "new",
    "mapping",
    "top",
    "actually",
    "let",
    "make",
    "mapping",
    "public",
    "well",
    "mapping",
    "bytes",
    "32",
    "address",
    "call",
    "public",
    "request",
    "id",
    "sender",
    "fulfill",
    "function",
    "request",
    "id",
    "requested",
    "random",
    "breed",
    "returned",
    "say",
    "address",
    "owner",
    "sender",
    "going",
    "equal",
    "request",
    "id",
    "sender",
    "request",
    "id",
    "address",
    "owner",
    "going",
    "safe",
    "mint",
    "nf2",
    "course",
    "matching",
    "functions",
    "want",
    "forget",
    "always",
    "token",
    "counter",
    "equals",
    "token",
    "counter",
    "plus",
    "one",
    "end",
    "awesome",
    "still",
    "need",
    "set",
    "token",
    "uri",
    "back",
    "advanced",
    "collectible",
    "going",
    "set",
    "token",
    "uai",
    "point",
    "let",
    "actually",
    "think",
    "second",
    "going",
    "know",
    "breed",
    "dog",
    "dog",
    "random",
    "number",
    "returned",
    "know",
    "breed",
    "dog",
    "going",
    "one",
    "three",
    "breeds",
    "going",
    "pug",
    "shibba",
    "inu",
    "bernard",
    "let",
    "actually",
    "let",
    "even",
    "go",
    "ahead",
    "add",
    "three",
    "images",
    "project",
    "create",
    "new",
    "folder",
    "call",
    "image",
    "put",
    "whatever",
    "images",
    "want",
    "actually",
    "going",
    "download",
    "actually",
    "going",
    "download",
    "three",
    "images",
    "right",
    "nft",
    "mix",
    "boom",
    "pug",
    "shba",
    "inu",
    "st",
    "bernard",
    "anyways",
    "going",
    "pug",
    "shib",
    "inu",
    "st",
    "bernard",
    "going",
    "know",
    "breed",
    "random",
    "numberers",
    "returned",
    "breed",
    "actually",
    "going",
    "govern",
    "pug",
    "shib",
    "inu",
    "st",
    "bernard",
    "technically",
    "could",
    "actually",
    "get",
    "rid",
    "input",
    "parameters",
    "crate",
    "collectible",
    "since",
    "going",
    "token",
    "uri",
    "initially",
    "created",
    "could",
    "could",
    "create",
    "new",
    "set",
    "token",
    "uri",
    "function",
    "sets",
    "token",
    "uri",
    "based",
    "breed",
    "dog",
    "simplicity",
    "project",
    "actually",
    "going",
    "create",
    "set",
    "token",
    "ur",
    "function",
    "going",
    "update",
    "based",
    "breed",
    "dog",
    "challenge",
    "finish",
    "project",
    "make",
    "even",
    "decentralized",
    "fulfill",
    "randomness",
    "function",
    "actually",
    "one",
    "decide",
    "token",
    "uri",
    "fulfill",
    "random",
    "mis",
    "function",
    "going",
    "skip",
    "setting",
    "token",
    "uri",
    "actually",
    "going",
    "call",
    "separate",
    "function",
    "going",
    "create",
    "function",
    "called",
    "set",
    "token",
    "uri",
    "going",
    "pass",
    "un",
    "256",
    "token",
    "id",
    "string",
    "memory",
    "token",
    "uri",
    "going",
    "make",
    "public",
    "function",
    "fulfill",
    "randomness",
    "function",
    "responded",
    "breed",
    "dog",
    "going",
    "set",
    "right",
    "token",
    "id",
    "breed",
    "going",
    "say",
    "hey",
    "token",
    "id",
    "associated",
    "breed",
    "going",
    "pug",
    "shba",
    "inu",
    "st",
    "bernard",
    "want",
    "onchain",
    "metad",
    "data",
    "going",
    "reciprocate",
    "offchain",
    "metadata",
    "going",
    "need",
    "three",
    "token",
    "uis",
    "three",
    "dogs",
    "going",
    "need",
    "one",
    "pug",
    "ship",
    "inu",
    "obviously",
    "st",
    "bernard",
    "however",
    "want",
    "make",
    "owner",
    "token",
    "id",
    "actually",
    "one",
    "update",
    "token",
    "uri",
    "use",
    "require",
    "function",
    "say",
    "require",
    "going",
    "use",
    "imported",
    "open",
    "zeppelin",
    "function",
    "called",
    "approved",
    "owner",
    "message",
    "sender",
    "token",
    "id",
    "going",
    "comma",
    "erc721",
    "caller",
    "owner",
    "approved",
    "approved",
    "owner",
    "function",
    "go",
    "erc721",
    "github",
    "open",
    "zeppelin",
    "find",
    "function",
    "approved",
    "owner",
    "checks",
    "owner",
    "erc",
    "721",
    "token",
    "id",
    "makes",
    "owner",
    "somebody",
    "approved",
    "work",
    "token",
    "id",
    "actually",
    "change",
    "token",
    "uri",
    "going",
    "call",
    "function",
    "called",
    "set",
    "token",
    "uri",
    "token",
    "id",
    "token",
    "uri",
    "actually",
    "manually",
    "going",
    "ones",
    "call",
    "set",
    "token",
    "uri",
    "breed",
    "decided",
    "could",
    "course",
    "like",
    "said",
    "use",
    "mapping",
    "top",
    "automatically",
    "routes",
    "experim",
    "experiment",
    "little",
    "bit",
    "learn",
    "little",
    "bit",
    "ipfs",
    "going",
    "leave",
    "little",
    "bit",
    "general",
    "like",
    "perfect",
    "pretty",
    "much",
    "majority",
    "going",
    "need",
    "erc721",
    "contract",
    "obviously",
    "still",
    "need",
    "work",
    "ipfs",
    "getting",
    "token",
    "uri",
    "part",
    "everything",
    "need",
    "going",
    "introduce",
    "new",
    "best",
    "practice",
    "whenever",
    "update",
    "mapping",
    "typically",
    "good",
    "best",
    "practice",
    "going",
    "actually",
    "emit",
    "event",
    "let",
    "create",
    "event",
    "one",
    "mapping",
    "updates",
    "call",
    "event",
    "requested",
    "collectible",
    "bytes",
    "32",
    "indexed",
    "request",
    "id",
    "also",
    "address",
    "requester",
    "requested",
    "collectible",
    "event",
    "going",
    "emitted",
    "request",
    "id",
    "sender",
    "updating",
    "mapping",
    "also",
    "going",
    "really",
    "helpful",
    "run",
    "tests",
    "get",
    "request",
    "id",
    "similar",
    "lottery",
    "going",
    "emit",
    "requested",
    "collectible",
    "let",
    "collectible",
    "let",
    "use",
    "instead",
    "collectible",
    "pass",
    "request",
    "id",
    "message",
    "sender",
    "also",
    "update",
    "mapping",
    "token",
    "id",
    "breed",
    "going",
    "new",
    "event",
    "going",
    "call",
    "event",
    "breed",
    "assigned",
    "uint",
    "256",
    "indexed",
    "token",
    "id",
    "breed",
    "breed",
    "assign",
    "breed",
    "going",
    "emit",
    "breed",
    "assigned",
    "new",
    "token",
    "id",
    "breed",
    "let",
    "see",
    "everything",
    "right",
    "let",
    "brownie",
    "compile",
    "looks",
    "like",
    "quick",
    "error",
    "mean",
    "fee",
    "fee",
    "let",
    "quick",
    "underscore",
    "let",
    "try",
    "compile",
    "much",
    "nicer",
    "right",
    "great",
    "let",
    "move",
    "right",
    "let",
    "take",
    "little",
    "look",
    "see",
    "scripts",
    "deploy",
    "create",
    "script",
    "going",
    "work",
    "simple",
    "collectible",
    "let",
    "go",
    "ahead",
    "actually",
    "give",
    "folder",
    "going",
    "new",
    "folder",
    "call",
    "one",
    "simple",
    "collectible",
    "another",
    "new",
    "folder",
    "called",
    "advanced",
    "collectible",
    "grab",
    "original",
    "deploy",
    "crate",
    "place",
    "simple",
    "collectible",
    "folder",
    "awesome",
    "wanted",
    "run",
    "would",
    "brownie",
    "run",
    "scripts",
    "symbol",
    "collectible",
    "deploy",
    "create",
    "go",
    "ahead",
    "test",
    "local",
    "ganache",
    "cool",
    "looks",
    "like",
    "working",
    "correctly",
    "great",
    "let",
    "create",
    "advanced",
    "collectible",
    "script",
    "lot",
    "going",
    "going",
    "simple",
    "one",
    "deploy",
    "create",
    "actually",
    "going",
    "copy",
    "going",
    "create",
    "new",
    "file",
    "called",
    "deploy",
    "create",
    "piy",
    "going",
    "paste",
    "everything",
    "going",
    "change",
    "couple",
    "things",
    "let",
    "little",
    "bit",
    "refactoring",
    "first",
    "open",
    "crl",
    "going",
    "accessing",
    "couple",
    "different",
    "scripts",
    "actually",
    "going",
    "take",
    "copy",
    "get",
    "rid",
    "deploy",
    "create",
    "going",
    "move",
    "helpful",
    "scripts",
    "place",
    "open",
    "c",
    "url",
    "equals",
    "script",
    "right",
    "simple",
    "deploy",
    "create",
    "going",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "open",
    "c",
    "url",
    "going",
    "delete",
    "script",
    "openc",
    "url",
    "going",
    "come",
    "helpful",
    "scripts",
    "want",
    "going",
    "thing",
    "deploying",
    "crate",
    "advanced",
    "okay",
    "great",
    "copied",
    "pasted",
    "code",
    "deploy",
    "create",
    "deploy",
    "create",
    "advanced",
    "collectible",
    "let",
    "go",
    "ahead",
    "modify",
    "instead",
    "brownie",
    "import",
    "simple",
    "collectible",
    "going",
    "import",
    "advanced",
    "collectible",
    "going",
    "thing",
    "even",
    "going",
    "go",
    "ahead",
    "delete",
    "everything",
    "going",
    "change",
    "advanced",
    "collectible",
    "awesome",
    "okay",
    "going",
    "starting",
    "point",
    "actually",
    "even",
    "get",
    "rid",
    "sample",
    "token",
    "u",
    "great",
    "going",
    "new",
    "starting",
    "point",
    "done",
    "little",
    "bit",
    "refactoring",
    "open",
    "c",
    "url",
    "going",
    "helpful",
    "scripts",
    "pulling",
    "advanced",
    "collectible",
    "instead",
    "simple",
    "collectible",
    "rest",
    "applies",
    "still",
    "using",
    "get",
    "account",
    "get",
    "account",
    "advanced",
    "collectible",
    "equals",
    "advanced",
    "collectible",
    "deploy",
    "course",
    "advanced",
    "collectible",
    "different",
    "constructor",
    "got",
    "vrf",
    "coordinator",
    "link",
    "token",
    "keyh",
    "fee",
    "going",
    "add",
    "parameters",
    "want",
    "work",
    "rinky",
    "openc",
    "marketplace",
    "right",
    "test",
    "nets",
    "works",
    "rink",
    "b",
    "going",
    "work",
    "rink",
    "let",
    "get",
    "started",
    "grab",
    "rink",
    "addresses",
    "first",
    "advanced",
    "collectible",
    "needs",
    "vrf",
    "coordinator",
    "link",
    "token",
    "head",
    "chain",
    "link",
    "documentation",
    "go",
    "contract",
    "addresses",
    "vrf",
    "scroll",
    "rink",
    "b",
    "grab",
    "vrf",
    "coordinator",
    "jump",
    "browning",
    "config",
    "networks",
    "rink",
    "vrf",
    "coordinator",
    "also",
    "going",
    "need",
    "link",
    "token",
    "link",
    "token",
    "need",
    "key",
    "key",
    "need",
    "fee",
    "going",
    "link",
    "fee",
    "1",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "going",
    "course",
    "copy",
    "paste",
    "brownie",
    "configs",
    "different",
    "projects",
    "values",
    "always",
    "going",
    "advanced",
    "collectible",
    "deploy",
    "create",
    "go",
    "ahead",
    "add",
    "variables",
    "since",
    "going",
    "interacting",
    "actual",
    "contracts",
    "chain",
    "going",
    "want",
    "able",
    "flip",
    "back",
    "forth",
    "mock",
    "versions",
    "going",
    "bring",
    "back",
    "get",
    "contract",
    "function",
    "used",
    "function",
    "going",
    "smart",
    "enough",
    "know",
    "need",
    "deploy",
    "mock",
    "grab",
    "actual",
    "contract",
    "going",
    "show",
    "little",
    "fast",
    "forward",
    "rebuilding",
    "function",
    "feel",
    "free",
    "copy",
    "paste",
    "last",
    "project",
    "something",
    "need",
    "talk",
    "though",
    "deploy",
    "mock",
    "function",
    "syntax",
    "going",
    "basically",
    "exactly",
    "however",
    "need",
    "deploy",
    "couple",
    "mocks",
    "make",
    "sure",
    "deploy",
    "mock",
    "function",
    "specifically",
    "going",
    "need",
    "mock",
    "link",
    "token",
    "mock",
    "vrf",
    "coordinator",
    "feel",
    "free",
    "grab",
    "last",
    "projects",
    "course",
    "sure",
    "add",
    "contract",
    "mock",
    "dictionary",
    "link",
    "token",
    "mapped",
    "link",
    "token",
    "vrf",
    "coordinator",
    "mapped",
    "vrf",
    "coordinator",
    "guys",
    "look",
    "github",
    "repo",
    "couple",
    "try",
    "catches",
    "um",
    "make",
    "little",
    "bit",
    "nicer",
    "error",
    "handling",
    "basically",
    "entire",
    "script",
    "go",
    "back",
    "advanced",
    "collection",
    "deploy",
    "create",
    "import",
    "get",
    "contract",
    "helpful",
    "scripts",
    "replace",
    "get",
    "contract",
    "vrf",
    "coordinator",
    "get",
    "contract",
    "link",
    "token",
    "keyh",
    "fee",
    "since",
    "really",
    "matter",
    "whatever",
    "want",
    "really",
    "contracts",
    "go",
    "back",
    "config",
    "add",
    "development",
    "network",
    "add",
    "keyh",
    "fee",
    "since",
    "testing",
    "go",
    "ahead",
    "make",
    "exactly",
    "rink",
    "done",
    "lot",
    "work",
    "let",
    "go",
    "ahead",
    "run",
    "development",
    "network",
    "brownie",
    "run",
    "scripts",
    "advanced",
    "deploy",
    "create",
    "network",
    "going",
    "default",
    "development",
    "let",
    "see",
    "happens",
    "awesome",
    "see",
    "actually",
    "couple",
    "things",
    "first",
    "deployed",
    "mock",
    "link",
    "token",
    "deployed",
    "mock",
    "vrf",
    "coordinator",
    "finished",
    "deployed",
    "advanced",
    "collectible",
    "local",
    "network",
    "let",
    "go",
    "ahead",
    "continue",
    "deploy",
    "code",
    "going",
    "want",
    "fund",
    "contract",
    "link",
    "reason",
    "want",
    "going",
    "want",
    "fund",
    "link",
    "course",
    "call",
    "random",
    "number",
    "like",
    "funding",
    "link",
    "also",
    "function",
    "fund",
    "link",
    "give",
    "address",
    "advanc",
    "collectible",
    "address",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "fast",
    "forward",
    "going",
    "fast",
    "forward",
    "well",
    "feel",
    "free",
    "copy",
    "paste",
    "fund",
    "link",
    "functions",
    "past",
    "projects",
    "want",
    "slow",
    "follow",
    "along",
    "feel",
    "free",
    "let",
    "go",
    "back",
    "deploy",
    "create",
    "fund",
    "link",
    "going",
    "right",
    "call",
    "create",
    "collectible",
    "function",
    "advan",
    "collectible",
    "dot",
    "create",
    "collectible",
    "course",
    "count",
    "creating",
    "tx",
    "wait",
    "one",
    "block",
    "confirmation",
    "print",
    "token",
    "created",
    "definitely",
    "going",
    "want",
    "test",
    "number",
    "custom",
    "scripts",
    "right",
    "let",
    "go",
    "ahead",
    "manual",
    "test",
    "brownie",
    "run",
    "scripts",
    "advance",
    "collectible",
    "deploy",
    "create",
    "development",
    "network",
    "whoops",
    "got",
    "add",
    "ether",
    "sorry",
    "web",
    "one",
    "ether",
    "let",
    "go",
    "ahead",
    "run",
    "script",
    "right",
    "looks",
    "like",
    "everything",
    "worked",
    "everything",
    "deployed",
    "new",
    "token",
    "created",
    "great",
    "fantastic",
    "ideally",
    "integration",
    "test",
    "would",
    "course",
    "write",
    "tests",
    "want",
    "teach",
    "things",
    "easier",
    "demonstrate",
    "actual",
    "test",
    "net",
    "going",
    "go",
    "ahead",
    "deploy",
    "actual",
    "test",
    "net",
    "write",
    "tests",
    "going",
    "run",
    "script",
    "das",
    "dash",
    "network",
    "rank",
    "b",
    "awesome",
    "new",
    "token",
    "created",
    "grab",
    "contract",
    "address",
    "paste",
    "rink",
    "ether",
    "scan",
    "see",
    "everything",
    "see",
    "given",
    "little",
    "bit",
    "link",
    "see",
    "two",
    "function",
    "calls",
    "one",
    "going",
    "contract",
    "creation",
    "one",
    "going",
    "create",
    "collectible",
    "contract",
    "already",
    "auto",
    "verified",
    "actually",
    "verified",
    "contract",
    "rinky",
    "already",
    "ether",
    "scan",
    "says",
    "ah",
    "bite",
    "code",
    "exact",
    "another",
    "contract",
    "already",
    "verified",
    "go",
    "read",
    "contract",
    "go",
    "token",
    "counter",
    "see",
    "one",
    "token",
    "created",
    "actually",
    "created",
    "first",
    "token",
    "advanced",
    "collectible",
    "scripts",
    "create",
    "new",
    "script",
    "call",
    "create",
    "collectible",
    "p",
    "create",
    "collectible",
    "def",
    "main",
    "per",
    "usual",
    "rowny",
    "import",
    "advanced",
    "collectible",
    "import",
    "accounts",
    "helpful",
    "scripts",
    "import",
    "fund",
    "link",
    "main",
    "function",
    "account",
    "equals",
    "get",
    "account",
    "course",
    "need",
    "import",
    "well",
    "helpful",
    "scripts",
    "advanced",
    "collectible",
    "equals",
    "advanced",
    "collectible",
    "minus",
    "one",
    "want",
    "get",
    "recently",
    "deployed",
    "fund",
    "contract",
    "link",
    "advanced",
    "collectible",
    "address",
    "also",
    "choose",
    "amount",
    "web",
    "way",
    "ether",
    "means",
    "also",
    "web",
    "3",
    "import",
    "web",
    "3",
    "transaction",
    "creation",
    "transaction",
    "equals",
    "advance",
    "collectible",
    "create",
    "collectible",
    "count",
    "create",
    "ation",
    "transaction",
    "wait",
    "one",
    "block",
    "confirmation",
    "print",
    "collectible",
    "created",
    "oops",
    "sorry",
    "actually",
    "import",
    "account",
    "accounts",
    "excuse",
    "sorry",
    "actually",
    "needs",
    "amount",
    "equals",
    "excuse",
    "let",
    "go",
    "ahead",
    "run",
    "going",
    "going",
    "fund",
    "advanced",
    "collectible",
    "link",
    "link",
    "going",
    "create",
    "new",
    "nft",
    "awesome",
    "collectible",
    "created",
    "take",
    "address",
    "go",
    "back",
    "ether",
    "scan",
    "quick",
    "refresh",
    "go",
    "contract",
    "read",
    "contract",
    "look",
    "token",
    "counter",
    "may",
    "still",
    "one",
    "might",
    "give",
    "second",
    "chain",
    "link",
    "vrf",
    "respond",
    "respond",
    "chain",
    "link",
    "vf",
    "responds",
    "see",
    "two",
    "also",
    "check",
    "token",
    "id",
    "breed",
    "look",
    "zero",
    "one",
    "see",
    "breed",
    "two",
    "look",
    "back",
    "contract",
    "advanced",
    "collectible",
    "soul",
    "know",
    "breed",
    "two",
    "means",
    "st",
    "bernard",
    "see",
    "token",
    "id",
    "one",
    "breed",
    "one",
    "got",
    "randomly",
    "assigned",
    "shibba",
    "inu",
    "awesome",
    "tokens",
    "get",
    "randomly",
    "assigned",
    "reads",
    "fantastic",
    "see",
    "kind",
    "lot",
    "manual",
    "testing",
    "work",
    "right",
    "probably",
    "going",
    "want",
    "instead",
    "guessed",
    "automate",
    "tests",
    "go",
    "ahead",
    "want",
    "deploy",
    "go",
    "ahead",
    "import",
    "deploy",
    "script",
    "wrote",
    "would",
    "scripts",
    "advance",
    "collectible",
    "deploy",
    "create",
    "import",
    "deploy",
    "create",
    "call",
    "deploy",
    "create",
    "function",
    "probably",
    "want",
    "return",
    "advanced",
    "collectible",
    "contract",
    "make",
    "sure",
    "actually",
    "get",
    "want",
    "say",
    "advanced",
    "collectible",
    "equals",
    "deploy",
    "crate",
    "acting",
    "step",
    "beginning",
    "arrange",
    "assert",
    "check",
    "see",
    "token",
    "counter",
    "increased",
    "assert",
    "advanced",
    "collectible",
    "token",
    "counter",
    "equal",
    "one",
    "right",
    "great",
    "return",
    "advanced",
    "collectible",
    "however",
    "know",
    "since",
    "actually",
    "going",
    "working",
    "mock",
    "v",
    "rift",
    "coordinator",
    "look",
    "advanced",
    "collectible",
    "know",
    "bulk",
    "work",
    "actually",
    "comes",
    "fulfill",
    "randomness",
    "function",
    "going",
    "tell",
    "mock",
    "actually",
    "return",
    "call",
    "function",
    "order",
    "probably",
    "also",
    "return",
    "creating",
    "transaction",
    "get",
    "request",
    "id",
    "remember",
    "lottery",
    "actually",
    "directly",
    "called",
    "everything",
    "needed",
    "request",
    "id",
    "call",
    "call",
    "back",
    "randomness",
    "function",
    "test",
    "actually",
    "using",
    "scripts",
    "little",
    "bit",
    "could",
    "either",
    "go",
    "ahead",
    "write",
    "steps",
    "similar",
    "lottery",
    "could",
    "adjust",
    "scripts",
    "little",
    "bit",
    "simplicity",
    "going",
    "go",
    "ahead",
    "deploying",
    "create",
    "function",
    "also",
    "return",
    "creating",
    "transaction",
    "way",
    "go",
    "ahead",
    "get",
    "request",
    "id",
    "back",
    "test",
    "means",
    "deploy",
    "create",
    "equals",
    "advanced",
    "collectible",
    "creation",
    "transaction",
    "creation",
    "transaction",
    "use",
    "get",
    "events",
    "look",
    "back",
    "advanced",
    "collectible",
    "see",
    "emitting",
    "requested",
    "collectible",
    "request",
    "id",
    "go",
    "ahead",
    "request",
    "id",
    "equals",
    "creation",
    "transaction",
    "events",
    "add",
    "name",
    "vent",
    "requested",
    "collectible",
    "get",
    "request",
    "id",
    "request",
    "id",
    "go",
    "ahead",
    "grab",
    "vrf",
    "coordinator",
    "scripts",
    "grab",
    "get",
    "contract",
    "coded",
    "get",
    "contract",
    "way",
    "mock",
    "already",
    "deployed",
    "go",
    "back",
    "helpful",
    "scripts",
    "contract",
    "already",
    "deployed",
    "going",
    "go",
    "ahead",
    "grab",
    "since",
    "mock",
    "already",
    "deployed",
    "redeploy",
    "get",
    "contract",
    "vf",
    "coordinator",
    "callback",
    "randomness",
    "use",
    "request",
    "id",
    "pick",
    "number",
    "like",
    "777",
    "give",
    "address",
    "advanced",
    "collectible",
    "remember",
    "going",
    "calling",
    "call",
    "back",
    "randomness",
    "real",
    "chain",
    "link",
    "node",
    "actually",
    "going",
    "call",
    "back",
    "needs",
    "request",
    "id",
    "randomness",
    "number",
    "consumer",
    "contract",
    "request",
    "id",
    "random",
    "number",
    "consumer",
    "contract",
    "course",
    "account",
    "get",
    "account",
    "import",
    "get",
    "account",
    "well",
    "move",
    "seert",
    "phase",
    "first",
    "correct",
    "token",
    "counter",
    "least",
    "one",
    "assert",
    "advanced",
    "collectible",
    "token",
    "counter",
    "greater",
    "zero",
    "could",
    "little",
    "bit",
    "specific",
    "equals",
    "equals",
    "1",
    "also",
    "technically",
    "able",
    "get",
    "breed",
    "figure",
    "breed",
    "first",
    "token",
    "first",
    "collectible",
    "let",
    "go",
    "ahead",
    "parameter",
    "tize",
    "777",
    "call",
    "random",
    "number",
    "equals",
    "777",
    "place",
    "say",
    "seert",
    "advanced",
    "collectible",
    "token",
    "id",
    "breed",
    "zero",
    "right",
    "fulfill",
    "randomness",
    "going",
    "assign",
    "token",
    "id",
    "breed",
    "breed",
    "going",
    "random",
    "number",
    "mod",
    "3",
    "test",
    "say",
    "token",
    "id",
    "breed",
    "dog",
    "zero",
    "going",
    "equal",
    "random",
    "number",
    "mod",
    "three",
    "pretty",
    "much",
    "full",
    "test",
    "let",
    "go",
    "ahead",
    "run",
    "test",
    "k",
    "whoops",
    "looks",
    "like",
    "simple",
    "test",
    "actually",
    "got",
    "error",
    "getting",
    "module",
    "found",
    "module",
    "named",
    "scripts",
    "deoy",
    "doc",
    "create",
    "since",
    "actually",
    "changed",
    "going",
    "scripts",
    "simple",
    "collectible",
    "deploy",
    "create",
    "rerun",
    "test",
    "see",
    "brownie",
    "gna",
    "airor",
    "anymore",
    "even",
    "though",
    "skipped",
    "test",
    "brownie",
    "still",
    "compiles",
    "make",
    "sure",
    "everything",
    "makes",
    "sense",
    "see",
    "fantastic",
    "advanced",
    "collectible",
    "unit",
    "test",
    "worked",
    "perfectly",
    "let",
    "go",
    "ahead",
    "make",
    "integration",
    "test",
    "advanced",
    "collectible",
    "test",
    "folder",
    "unit",
    "integration",
    "integration",
    "test",
    "actually",
    "going",
    "look",
    "really",
    "similar",
    "advanced",
    "collectible",
    "going",
    "go",
    "ahead",
    "copy",
    "everything",
    "new",
    "file",
    "test",
    "advanced",
    "collectible",
    "integration",
    "paste",
    "everything",
    "thing",
    "going",
    "change",
    "going",
    "ones",
    "call",
    "back",
    "randomness",
    "remove",
    "part",
    "also",
    "need",
    "request",
    "id",
    "anymore",
    "since",
    "chain",
    "link",
    "node",
    "going",
    "responding",
    "means",
    "breed",
    "going",
    "get",
    "actually",
    "going",
    "random",
    "get",
    "rid",
    "assert",
    "well",
    "need",
    "wait",
    "transaction",
    "get",
    "called",
    "back",
    "going",
    "import",
    "time",
    "instead",
    "us",
    "calling",
    "back",
    "randomness",
    "going",
    "time",
    "sleep",
    "wait",
    "60",
    "seconds",
    "test",
    "create",
    "collectible",
    "also",
    "give",
    "different",
    "name",
    "integration",
    "able",
    "test",
    "rink",
    "chain",
    "token",
    "counter",
    "indeed",
    "increase",
    "chain",
    "link",
    "node",
    "actually",
    "responding",
    "run",
    "brownie",
    "k",
    "test",
    "network",
    "rink",
    "b",
    "oh",
    "whoops",
    "right",
    "skipping",
    "saying",
    "local",
    "testing",
    "since",
    "going",
    "integration",
    "test",
    "going",
    "opposite",
    "network",
    "active",
    "local",
    "blockchain",
    "environments",
    "going",
    "skip",
    "say",
    "integration",
    "testing",
    "right",
    "great",
    "quick",
    "dirty",
    "integration",
    "test",
    "run",
    "going",
    "run",
    "going",
    "working",
    "lot",
    "rink",
    "chain",
    "going",
    "deploying",
    "lot",
    "different",
    "things",
    "want",
    "wait",
    "long",
    "fantastic",
    "way",
    "deploy",
    "way",
    "get",
    "new",
    "collectible",
    "tokens",
    "create",
    "take",
    "address",
    "right",
    "try",
    "view",
    "token",
    "something",
    "like",
    "openc",
    "would",
    "get",
    "nothing",
    "back",
    "would",
    "get",
    "result",
    "right",
    "token",
    "way",
    "viewed",
    "visible",
    "everybody",
    "else",
    "nft",
    "platforms",
    "know",
    "look",
    "like",
    "set",
    "token",
    "uri",
    "going",
    "come",
    "play",
    "figure",
    "way",
    "host",
    "image",
    "host",
    "metadata",
    "token",
    "uri",
    "way",
    "going",
    "using",
    "ipfs",
    "lot",
    "better",
    "actually",
    "hosting",
    "server",
    "anybody",
    "go",
    "ahead",
    "host",
    "image",
    "metadata",
    "improvements",
    "something",
    "like",
    "file",
    "coin",
    "actually",
    "pay",
    "image",
    "hosted",
    "forever",
    "however",
    "ipfs",
    "hook",
    "file",
    "coin",
    "future",
    "going",
    "good",
    "enough",
    "solution",
    "looking",
    "keep",
    "mind",
    "want",
    "run",
    "centralized",
    "server",
    "spin",
    "ipfs",
    "node",
    "node",
    "actually",
    "runs",
    "actually",
    "hosts",
    "image",
    "however",
    "image",
    "open",
    "anyone",
    "pin",
    "nodes",
    "well",
    "much",
    "easier",
    "us",
    "host",
    "images",
    "decentralized",
    "manner",
    "bad",
    "obviously",
    "image",
    "stored",
    "centralized",
    "server",
    "server",
    "goes",
    "url",
    "longer",
    "exists",
    "least",
    "one",
    "node",
    "ipfs",
    "network",
    "hosting",
    "image",
    "available",
    "anybody",
    "see",
    "going",
    "much",
    "better",
    "solution",
    "centralized",
    "server",
    "mentioned",
    "decentralized",
    "storage",
    "topic",
    "getting",
    "better",
    "better",
    "looking",
    "forward",
    "seeing",
    "ways",
    "interact",
    "case",
    "need",
    "create",
    "ipfs",
    "node",
    "going",
    "host",
    "data",
    "looks",
    "like",
    "like",
    "saw",
    "simple",
    "collectible",
    "e",
    "host",
    "metadata",
    "look",
    "like",
    "host",
    "metadata",
    "file",
    "image",
    "uri",
    "file",
    "host",
    "actual",
    "image",
    "need",
    "stored",
    "ipfs",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "script",
    "called",
    "create",
    "metadata",
    "read",
    "offchain",
    "create",
    "metadata",
    "file",
    "start",
    "scripts",
    "pr",
    "usual",
    "def",
    "main",
    "get",
    "recently",
    "deployed",
    "advanced",
    "collectible",
    "using",
    "minus",
    "one",
    "syntax",
    "course",
    "going",
    "brownie",
    "import",
    "advanced",
    "collectible",
    "advanced",
    "collectible",
    "loop",
    "tokens",
    "actually",
    "figure",
    "metadata",
    "one",
    "number",
    "advanced",
    "collect",
    "equals",
    "advanced",
    "collectible",
    "token",
    "counter",
    "want",
    "create",
    "metadata",
    "create",
    "metadata",
    "every",
    "single",
    "token",
    "created",
    "quick",
    "print",
    "line",
    "saying",
    "print",
    "created",
    "number",
    "collectibles",
    "collectibles",
    "even",
    "run",
    "really",
    "quick",
    "brownie",
    "run",
    "scripts",
    "advanced",
    "create",
    "metadata",
    "network",
    "rink",
    "b",
    "since",
    "already",
    "run",
    "rink",
    "chain",
    "see",
    "created",
    "one",
    "collectible",
    "run",
    "create",
    "collectible",
    "script",
    "create",
    "metadata",
    "script",
    "course",
    "get",
    "right",
    "one",
    "collectible",
    "let",
    "loop",
    "collectibles",
    "create",
    "metadata",
    "going",
    "create",
    "file",
    "looks",
    "like",
    "going",
    "going",
    "name",
    "going",
    "based",
    "random",
    "breed",
    "got",
    "going",
    "description",
    "based",
    "random",
    "breed",
    "got",
    "going",
    "image",
    "also",
    "based",
    "random",
    "breed",
    "got",
    "put",
    "attributes",
    "attributes",
    "going",
    "say",
    "token",
    "id",
    "range",
    "number",
    "advanced",
    "collectibles",
    "one",
    "advanced",
    "collectibles",
    "first",
    "need",
    "get",
    "breed",
    "going",
    "say",
    "breed",
    "breed",
    "going",
    "equal",
    "advanced",
    "collectible",
    "token",
    "id",
    "breed",
    "token",
    "id",
    "advanced",
    "collectible",
    "token",
    "id",
    "breed",
    "going",
    "return",
    "integer",
    "right",
    "advanced",
    "collectible",
    "enum",
    "breed",
    "going",
    "0o",
    "one",
    "two",
    "actually",
    "want",
    "create",
    "quick",
    "mapping",
    "represents",
    "zero",
    "pug",
    "one",
    "shibba",
    "inu",
    "two",
    "st",
    "bernard",
    "actually",
    "like",
    "create",
    "helpful",
    "script",
    "called",
    "def",
    "get",
    "breed",
    "takes",
    "input",
    "takes",
    "breed",
    "number",
    "uses",
    "switch",
    "statement",
    "top",
    "say",
    "breed",
    "mapping",
    "equals",
    "zero",
    "going",
    "pugg",
    "one",
    "going",
    "shiba",
    "inu",
    "two",
    "going",
    "saint",
    "bernard",
    "get",
    "breed",
    "function",
    "return",
    "breed",
    "mapping",
    "breed",
    "number",
    "get",
    "instead",
    "advanced",
    "collectible",
    "token",
    "breed",
    "get",
    "breed",
    "return",
    "number",
    "return",
    "actual",
    "string",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "breed",
    "breed",
    "start",
    "creating",
    "metadata",
    "file",
    "going",
    "want",
    "going",
    "want",
    "type",
    "format",
    "contract",
    "always",
    "pull",
    "like",
    "create",
    "new",
    "folder",
    "called",
    "metadata",
    "folder",
    "new",
    "file",
    "called",
    "sample",
    "metadata",
    "piy",
    "meta",
    "dat",
    "template",
    "equals",
    "template",
    "always",
    "going",
    "use",
    "going",
    "need",
    "name",
    "going",
    "leave",
    "name",
    "blank",
    "going",
    "want",
    "fix",
    "later",
    "going",
    "description",
    "also",
    "going",
    "leave",
    "blank",
    "going",
    "image",
    "uri",
    "also",
    "leave",
    "blank",
    "going",
    "attributes",
    "blank",
    "dog",
    "actually",
    "onchain",
    "attributes",
    "going",
    "go",
    "ahead",
    "add",
    "show",
    "could",
    "uh",
    "wanted",
    "give",
    "dog",
    "stats",
    "know",
    "maybe",
    "maybe",
    "cuteness",
    "maybe",
    "maybe",
    "raw",
    "power",
    "maybe",
    "speed",
    "agility",
    "know",
    "whatever",
    "want",
    "trait",
    "type",
    "cuteness",
    "value",
    "going",
    "100",
    "would",
    "basically",
    "say",
    "hey",
    "trait",
    "type",
    "called",
    "cuteness",
    "value",
    "100",
    "cuteness",
    "dog",
    "100",
    "sample",
    "metadata",
    "file",
    "import",
    "script",
    "say",
    "metadata",
    "sample",
    "metadata",
    "import",
    "metadata",
    "template",
    "another",
    "quick",
    "note",
    "might",
    "put",
    "put",
    "aore",
    "file",
    "metadata",
    "folder",
    "working",
    "older",
    "versions",
    "python",
    "start",
    "creating",
    "new",
    "metadata",
    "file",
    "breed",
    "dog",
    "want",
    "save",
    "collectible",
    "network",
    "token",
    "id",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "folder",
    "call",
    "rink",
    "b",
    "save",
    "rink",
    "b",
    "metadata",
    "collectibles",
    "token",
    "ids",
    "actually",
    "save",
    "though",
    "check",
    "make",
    "sure",
    "file",
    "already",
    "exist",
    "right",
    "file",
    "already",
    "exists",
    "means",
    "already",
    "created",
    "metadata",
    "token",
    "need",
    "go",
    "ahead",
    "get",
    "metadata",
    "file",
    "name",
    "going",
    "equal",
    "metadata",
    "network",
    "show",
    "active",
    "course",
    "means",
    "need",
    "import",
    "network",
    "browning",
    "slash",
    "token",
    "id",
    "token",
    "id",
    "hyphen",
    "breed",
    "json",
    "make",
    "sure",
    "right",
    "even",
    "print",
    "quick",
    "manual",
    "test",
    "brownie",
    "run",
    "scripts",
    "advanced",
    "create",
    "metadata",
    "network",
    "rinky",
    "name",
    "file",
    "metadata",
    "rink",
    "b",
    "token",
    "id",
    "breed",
    "json",
    "okay",
    "cool",
    "actually",
    "check",
    "see",
    "already",
    "exists",
    "going",
    "use",
    "python",
    "library",
    "called",
    "path",
    "going",
    "say",
    "path",
    "lib",
    "import",
    "path",
    "going",
    "say",
    "path",
    "metadata",
    "file",
    "name",
    "exists",
    "path",
    "exists",
    "quick",
    "print",
    "saying",
    "metadata",
    "file",
    "name",
    "already",
    "exists",
    "delete",
    "overwrite",
    "way",
    "wo",
    "accidentally",
    "overwrite",
    "metadata",
    "already",
    "created",
    "extra",
    "work",
    "exists",
    "print",
    "great",
    "otherwise",
    "go",
    "ahead",
    "print",
    "printf",
    "creating",
    "metadata",
    "file",
    "metadata",
    "file",
    "name",
    "even",
    "run",
    "real",
    "quick",
    "great",
    "one",
    "collectible",
    "creating",
    "metadata",
    "file",
    "perfect",
    "let",
    "go",
    "ahead",
    "start",
    "creating",
    "metadata",
    "file",
    "going",
    "give",
    "name",
    "description",
    "image",
    "uri",
    "going",
    "give",
    "attributes",
    "though",
    "name",
    "description",
    "image",
    "uri",
    "name",
    "easy",
    "enough",
    "since",
    "dictionary",
    "mapping",
    "python",
    "actually",
    "go",
    "ahead",
    "start",
    "mapping",
    "collectible",
    "metadata",
    "going",
    "equal",
    "template",
    "going",
    "sort",
    "metadata",
    "say",
    "collectible",
    "metadata",
    "name",
    "going",
    "brie",
    "pug",
    "name",
    "pug",
    "shibba",
    "inu",
    "name",
    "shibba",
    "inu",
    "st",
    "bernard",
    "name",
    "st",
    "bernard",
    "give",
    "collection",
    "metadata",
    "description",
    "going",
    "equal",
    "going",
    "f",
    "string",
    "adorable",
    "read",
    "print",
    "collectible",
    "metadata",
    "see",
    "least",
    "start",
    "metadata",
    "great",
    "name",
    "st",
    "bernard",
    "description",
    "adorable",
    "st",
    "bernard",
    "pup",
    "course",
    "different",
    "random",
    "breed",
    "look",
    "something",
    "like",
    "going",
    "need",
    "collectible",
    "metadata",
    "image",
    "uri",
    "going",
    "image",
    "already",
    "uploaded",
    "ipfs",
    "assign",
    "metadata",
    "going",
    "well",
    "probably",
    "going",
    "need",
    "upload",
    "ipfs",
    "function",
    "going",
    "return",
    "image",
    "uri",
    "set",
    "image",
    "uri",
    "collectible",
    "metadata",
    "image",
    "let",
    "go",
    "ahead",
    "start",
    "let",
    "create",
    "upload",
    "ipfs",
    "function",
    "order",
    "upload",
    "ipfs",
    "course",
    "need",
    "images",
    "ourself",
    "already",
    "downloaded",
    "download",
    "right",
    "github",
    "like",
    "make",
    "little",
    "bit",
    "generic",
    "upload",
    "ipfs",
    "take",
    "file",
    "path",
    "way",
    "pass",
    "image",
    "r",
    "upload",
    "ipfs",
    "going",
    "give",
    "type",
    "file",
    "path",
    "going",
    "grab",
    "image",
    "path",
    "grab",
    "image",
    "file",
    "name",
    "breed",
    "lower",
    "right",
    "breeds",
    "uppercase",
    "going",
    "want",
    "make",
    "lowercase",
    "going",
    "replace",
    "underscores",
    "hyphens",
    "png",
    "say",
    "plus",
    "png",
    "know",
    "let",
    "go",
    "ahead",
    "add",
    "full",
    "path",
    "say",
    "slash",
    "image",
    "slash",
    "plus",
    "lower",
    "perfect",
    "even",
    "change",
    "image",
    "path",
    "pass",
    "upload",
    "ipfs",
    "file",
    "path",
    "going",
    "location",
    "object",
    "going",
    "upload",
    "ipfs",
    "going",
    "use",
    "path",
    "library",
    "actually",
    "grab",
    "path",
    "upload",
    "ipfs",
    "going",
    "say",
    "path",
    "file",
    "path",
    "open",
    "rb",
    "file",
    "path",
    "little",
    "bit",
    "sophisticated",
    "python",
    "taking",
    "path",
    "opening",
    "file",
    "rb",
    "means",
    "going",
    "open",
    "binary",
    "since",
    "images",
    "going",
    "actually",
    "open",
    "going",
    "upload",
    "binary",
    "actually",
    "ipfs",
    "f",
    "fp",
    "saying",
    "opened",
    "file",
    "going",
    "named",
    "fp",
    "file",
    "path",
    "going",
    "image",
    "binary",
    "equals",
    "come",
    "right",
    "docs",
    "going",
    "link",
    "github",
    "instructions",
    "download",
    "whatever",
    "system",
    "working",
    "right",
    "working",
    "windows",
    "linux",
    "mac",
    "different",
    "ways",
    "actually",
    "download",
    "ipfs",
    "command",
    "line",
    "know",
    "done",
    "right",
    "type",
    "ipfs",
    "verion",
    "see",
    "something",
    "like",
    "ipfs",
    "version",
    "important",
    "know",
    "could",
    "also",
    "ipfs",
    "download",
    "desktop",
    "could",
    "download",
    "desktop",
    "version",
    "version",
    "see",
    "user",
    "interface",
    "looks",
    "something",
    "like",
    "could",
    "upload",
    "files",
    "manually",
    "manually",
    "go",
    "ahead",
    "grab",
    "files",
    "place",
    "scripts",
    "engineers",
    "want",
    "programmatically",
    "case",
    "api",
    "downloaded",
    "actually",
    "follow",
    "documentation",
    "http",
    "api",
    "reference",
    "actually",
    "uploading",
    "code",
    "going",
    "mainly",
    "working",
    "endpoint",
    "api",
    "v0",
    "add",
    "endpoint",
    "actually",
    "going",
    "add",
    "file",
    "directory",
    "ipfs",
    "going",
    "want",
    "going",
    "actually",
    "upload",
    "images",
    "ipfs",
    "node",
    "run",
    "ipfs",
    "node",
    "ipfs",
    "damon",
    "see",
    "output",
    "looks",
    "something",
    "like",
    "even",
    "see",
    "web",
    "ui",
    "using",
    "web",
    "ui",
    "url",
    "look",
    "similar",
    "ipfs",
    "desktop",
    "looks",
    "like",
    "going",
    "work",
    "mainly",
    "damian",
    "ipfs",
    "node",
    "congratulations",
    "running",
    "ipfs",
    "node",
    "right",
    "see",
    "currently",
    "running",
    "local",
    "host",
    "right",
    "http",
    "127",
    "port",
    "50001",
    "actually",
    "upload",
    "going",
    "first",
    "need",
    "get",
    "ipfs",
    "url",
    "going",
    "equal",
    "url",
    "right",
    "paste",
    "want",
    "make",
    "api",
    "call",
    "post",
    "request",
    "endpoint",
    "using",
    "api",
    "v0",
    "ad",
    "different",
    "parameters",
    "ad",
    "actually",
    "take",
    "actually",
    "post",
    "ipfs",
    "familiar",
    "curl",
    "want",
    "test",
    "using",
    "curl",
    "added",
    "curl",
    "create",
    "metadata",
    "file",
    "comment",
    "actually",
    "go",
    "ahead",
    "test",
    "want",
    "use",
    "going",
    "want",
    "keep",
    "working",
    "scripts",
    "like",
    "little",
    "plus",
    "button",
    "somewhere",
    "vs",
    "code",
    "going",
    "hit",
    "plus",
    "button",
    "actually",
    "going",
    "two",
    "different",
    "shells",
    "one",
    "running",
    "ipfs",
    "node",
    "one",
    "running",
    "bash",
    "zch",
    "whatever",
    "shell",
    "os",
    "natively",
    "works",
    "ipfs",
    "url",
    "going",
    "grab",
    "endpoint",
    "going",
    "right",
    "v0",
    "add",
    "make",
    "post",
    "request",
    "us",
    "going",
    "say",
    "response",
    "equals",
    "requests",
    "post",
    "going",
    "ipfs",
    "url",
    "plus",
    "endpoint",
    "going",
    "say",
    "files",
    "going",
    "upload",
    "going",
    "equal",
    "file",
    "image",
    "binary",
    "request",
    "python",
    "package",
    "going",
    "import",
    "say",
    "import",
    "requests",
    "go",
    "back",
    "ipfs",
    "documentation",
    "scroll",
    "see",
    "response",
    "looks",
    "like",
    "going",
    "return",
    "bytes",
    "hash",
    "name",
    "size",
    "look",
    "sample",
    "token",
    "u",
    "see",
    "api",
    "call",
    "ipfs",
    "stores",
    "data",
    "using",
    "hash",
    "looking",
    "looking",
    "simple",
    "collectible",
    "hash",
    "hash",
    "represents",
    "pug",
    "json",
    "file",
    "everything",
    "ipfs",
    "gets",
    "hashed",
    "every",
    "single",
    "piece",
    "data",
    "unique",
    "hash",
    "fantastic",
    "change",
    "anything",
    "image",
    "hash",
    "would",
    "drastically",
    "different",
    "need",
    "get",
    "hash",
    "ipfs",
    "gives",
    "image",
    "upload",
    "go",
    "ahead",
    "plug",
    "template",
    "url",
    "like",
    "one",
    "going",
    "going",
    "say",
    "ipfs",
    "hash",
    "going",
    "equal",
    "response",
    "json",
    "since",
    "going",
    "jsonify",
    "response",
    "make",
    "look",
    "like",
    "response",
    "going",
    "grab",
    "hash",
    "right",
    "since",
    "going",
    "return",
    "dictionary",
    "want",
    "hash",
    "going",
    "give",
    "file",
    "name",
    "saying",
    "going",
    "file",
    "paths",
    "split",
    "going",
    "fancy",
    "python",
    "stuff",
    "going",
    "say",
    "minus",
    "one",
    "zero",
    "basically",
    "line",
    "saying",
    "know",
    "slash",
    "image",
    "pug",
    "png",
    "going",
    "remove",
    "going",
    "split",
    "slashes",
    "array",
    "going",
    "grab",
    "last",
    "part",
    "array",
    "basically",
    "changing",
    "line",
    "right",
    "get",
    "image",
    "uri",
    "going",
    "equal",
    "fst",
    "string",
    "https",
    "ipfs",
    "slash",
    "ipfs",
    "hash",
    "question",
    "mark",
    "file",
    "name",
    "equals",
    "file",
    "name",
    "format",
    "right",
    "give",
    "us",
    "go",
    "ahead",
    "even",
    "copy",
    "paste",
    "comment",
    "show",
    "guys",
    "see",
    "part",
    "exactly",
    "hash",
    "represented",
    "question",
    "mark",
    "file",
    "name",
    "equals",
    "file",
    "name",
    "excuse",
    "actually",
    "going",
    "like",
    "zero",
    "hyphen",
    "pug",
    "zero",
    "hyphen",
    "pug",
    "exactly",
    "need",
    "need",
    "image",
    "uri",
    "quick",
    "print",
    "image",
    "image",
    "uri",
    "go",
    "ahead",
    "return",
    "image",
    "uri",
    "since",
    "actually",
    "going",
    "testing",
    "ipfs",
    "add",
    "new",
    "integration",
    "test",
    "call",
    "test",
    "ipfs",
    "upload",
    "piy",
    "might",
    "want",
    "write",
    "test",
    "going",
    "one",
    "challenge",
    "later",
    "maybe",
    "come",
    "back",
    "write",
    "test",
    "upload",
    "ipfs",
    "actually",
    "going",
    "manually",
    "test",
    "going",
    "go",
    "back",
    "script",
    "going",
    "run",
    "image",
    "u",
    "equals",
    "upload",
    "ipfs",
    "image",
    "path",
    "going",
    "get",
    "printed",
    "image",
    "url",
    "since",
    "working",
    "st",
    "bernard",
    "get",
    "st",
    "bernard",
    "image",
    "uri",
    "run",
    "brownie",
    "run",
    "scripts",
    "advance",
    "create",
    "metadata",
    "network",
    "rink",
    "b",
    "let",
    "see",
    "happens",
    "needed",
    "add",
    "brackets",
    "sorry",
    "let",
    "try",
    "awesome",
    "able",
    "create",
    "metadata",
    "file",
    "go",
    "ahead",
    "copy",
    "paste",
    "perfect",
    "see",
    "exactly",
    "looking",
    "see",
    "st",
    "bernard",
    "awesome",
    "job",
    "uploaded",
    "ipfs",
    "node",
    "want",
    "show",
    "guys",
    "actually",
    "another",
    "service",
    "another",
    "way",
    "actually",
    "upload",
    "ipfs",
    "people",
    "want",
    "run",
    "ipfs",
    "node",
    "actually",
    "going",
    "keeping",
    "running",
    "whole",
    "time",
    "anytime",
    "node",
    "goes",
    "means",
    "nobody",
    "able",
    "see",
    "image",
    "unless",
    "somebody",
    "else",
    "pins",
    "image",
    "uses",
    "image",
    "also",
    "like",
    "like",
    "upload",
    "thirdparty",
    "service",
    "well",
    "uploading",
    "ipfs",
    "node",
    "like",
    "create",
    "another",
    "script",
    "actually",
    "called",
    "deploy",
    "pinata",
    "let",
    "go",
    "scripts",
    "new",
    "file",
    "upload",
    "pinata",
    "dopy",
    "pinata",
    "pinata",
    "ipfs",
    "file",
    "management",
    "service",
    "actually",
    "pin",
    "whatever",
    "files",
    "working",
    "well",
    "pinned",
    "node",
    "pinned",
    "well",
    "go",
    "ahead",
    "register",
    "awesome",
    "pinata",
    "looks",
    "like",
    "way",
    "upload",
    "work",
    "ipfs",
    "give",
    "us",
    "extra",
    "support",
    "free",
    "tier",
    "fantastic",
    "well",
    "wonderful",
    "documentation",
    "well",
    "documentation",
    "section",
    "let",
    "go",
    "ahead",
    "upload",
    "ipfs",
    "node",
    "goes",
    "images",
    "go",
    "pinata",
    "base",
    "url",
    "going",
    "equal",
    "https",
    "api",
    "pinata",
    "cloud",
    "find",
    "documentation",
    "well",
    "scroll",
    "documentation",
    "going",
    "using",
    "pin",
    "file",
    "ipfs",
    "endpoint",
    "see",
    "entire",
    "endpoint",
    "right",
    "base",
    "endpoint",
    "going",
    "copy",
    "endpoint",
    "going",
    "say",
    "endpoint",
    "equals",
    "pinning",
    "sl",
    "pin",
    "file",
    "ipfs",
    "going",
    "choose",
    "file",
    "path",
    "us",
    "going",
    "sl",
    "image",
    "sl",
    "pug",
    "png",
    "course",
    "want",
    "upload",
    "image",
    "could",
    "know",
    "change",
    "file",
    "path",
    "could",
    "even",
    "type",
    "loop",
    "pin",
    "everything",
    "uh",
    "image",
    "section",
    "going",
    "file",
    "name",
    "going",
    "use",
    "syntax",
    "file",
    "path",
    "dosit",
    "slash",
    "fancy",
    "python",
    "stuff",
    "get",
    "last",
    "part",
    "also",
    "need",
    "need",
    "use",
    "headers",
    "post",
    "request",
    "type",
    "post",
    "request",
    "need",
    "use",
    "headers",
    "going",
    "say",
    "headers",
    "equals",
    "copy",
    "pinata",
    "api",
    "key",
    "going",
    "api",
    "key",
    "also",
    "pinata",
    "secret",
    "api",
    "key",
    "secret",
    "api",
    "key",
    "going",
    "something",
    "else",
    "find",
    "two",
    "api",
    "keys",
    "scroll",
    "way",
    "hit",
    "api",
    "keys",
    "create",
    "new",
    "api",
    "key",
    "going",
    "call",
    "make",
    "admin",
    "key",
    "going",
    "limit",
    "max",
    "users",
    "limit",
    "max",
    "uses",
    "going",
    "set",
    "200",
    "uh",
    "going",
    "make",
    "public",
    "key",
    "want",
    "people",
    "using",
    "million",
    "times",
    "please",
    "make",
    "sure",
    "select",
    "least",
    "one",
    "permission",
    "pin",
    "file",
    "ipfs",
    "guys",
    "watching",
    "absolutely",
    "grab",
    "want",
    "make",
    "admin",
    "know",
    "whatever",
    "want",
    "since",
    "going",
    "using",
    "pin",
    "file",
    "ipfs",
    "going",
    "hit",
    "create",
    "key",
    "tokens",
    "api",
    "key",
    "going",
    "right",
    "going",
    "copy",
    "going",
    "open",
    "back",
    "thatv",
    "add",
    "one",
    "environment",
    "variables",
    "going",
    "export",
    "pinata",
    "api",
    "key",
    "equal",
    "key",
    "api",
    "secret",
    "going",
    "copy",
    "going",
    "export",
    "inata",
    "api",
    "secret",
    "equals",
    "key",
    "actually",
    "need",
    "uh",
    "jwt",
    "guys",
    "wanted",
    "could",
    "copy",
    "well",
    "ourv",
    "file",
    "going",
    "environment",
    "variables",
    "use",
    "brownie",
    "going",
    "automatically",
    "put",
    "uh",
    "environment",
    "os",
    "getv",
    "kinata",
    "api",
    "key",
    "course",
    "going",
    "import",
    "import",
    "w",
    "secet",
    "key",
    "going",
    "thing",
    "os",
    "get",
    "env",
    "pinata",
    "api",
    "secret",
    "get",
    "two",
    "headers",
    "uploading",
    "piñata",
    "going",
    "lot",
    "code",
    "going",
    "say",
    "path",
    "file",
    "path",
    "openen",
    "rb",
    "binary",
    "fp",
    "course",
    "since",
    "using",
    "path",
    "going",
    "path",
    "lib",
    "import",
    "path",
    "going",
    "piece",
    "image",
    "binary",
    "equals",
    "response",
    "going",
    "equal",
    "requests",
    "import",
    "requests",
    "import",
    "request",
    "poost",
    "base",
    "url",
    "plus",
    "endpoint",
    "files",
    "oops",
    "going",
    "equal",
    "file",
    "going",
    "upload",
    "couple",
    "things",
    "though",
    "going",
    "give",
    "file",
    "name",
    "going",
    "image",
    "binary",
    "getting",
    "really",
    "annoying",
    "keeps",
    "getting",
    "way",
    "file",
    "name",
    "image",
    "binary",
    "outside",
    "brackets",
    "going",
    "comma",
    "headers",
    "equals",
    "equals",
    "headers",
    "going",
    "print",
    "response",
    "json",
    "run",
    "brownie",
    "going",
    "def",
    "main",
    "function",
    "nice",
    "little",
    "trick",
    "select",
    "text",
    "text",
    "hit",
    "tab",
    "move",
    "one",
    "perfect",
    "run",
    "inside",
    "brownie",
    "brownie",
    "run",
    "scripts",
    "upload",
    "pinata",
    "perfect",
    "get",
    "little",
    "output",
    "going",
    "look",
    "something",
    "like",
    "going",
    "give",
    "ipfs",
    "hash",
    "pin",
    "size",
    "tim",
    "stamp",
    "go",
    "back",
    "pinata",
    "go",
    "pin",
    "manager",
    "little",
    "refresh",
    "see",
    "pug",
    "actually",
    "uploaded",
    "pinata",
    "awesome",
    "work",
    "going",
    "keep",
    "going",
    "using",
    "ipfs",
    "damon",
    "actually",
    "upload",
    "things",
    "want",
    "could",
    "totally",
    "swap",
    "upload",
    "ipfs",
    "use",
    "script",
    "created",
    "upload",
    "via",
    "pinata",
    "instead",
    "ipfs",
    "node",
    "anyways",
    "upload",
    "ipfs",
    "going",
    "return",
    "image",
    "uri",
    "go",
    "ahead",
    "set",
    "image",
    "uri",
    "going",
    "set",
    "collectible",
    "metadata",
    "image",
    "dump",
    "collectible",
    "met",
    "data",
    "file",
    "upload",
    "well",
    "ipfs",
    "dump",
    "file",
    "open",
    "metadata",
    "file",
    "name",
    "open",
    "w",
    "means",
    "going",
    "write",
    "file",
    "json",
    "dump",
    "collectible",
    "metadata",
    "file",
    "going",
    "import",
    "json",
    "going",
    "going",
    "dump",
    "dictionary",
    "json",
    "collectible",
    "met",
    "metad",
    "data",
    "file",
    "upload",
    "ipfs",
    "also",
    "metadata",
    "file",
    "name",
    "upload",
    "ipfs",
    "print",
    "image",
    "uri",
    "case",
    "metadata",
    "uri",
    "let",
    "go",
    "ahead",
    "try",
    "remember",
    "need",
    "ipfs",
    "damon",
    "running",
    "let",
    "go",
    "back",
    "scripts",
    "rowny",
    "run",
    "scripts",
    "advanced",
    "create",
    "metadata",
    "network",
    "rank",
    "b",
    "boom",
    "okay",
    "image",
    "uri",
    "click",
    "able",
    "see",
    "looks",
    "like",
    "uploaded",
    "st",
    "bernard",
    "metadata",
    "file",
    "fantastic",
    "metad",
    "dat",
    "file",
    "image",
    "uri",
    "fantastic",
    "uploaded",
    "ipfs",
    "scroll",
    "go",
    "metadata",
    "file",
    "rink",
    "b",
    "see",
    "new",
    "file",
    "gone",
    "ahead",
    "saved",
    "everything",
    "need",
    "bernard",
    "description",
    "image",
    "uri",
    "created",
    "attributes",
    "basically",
    "ignoring",
    "make",
    "lives",
    "little",
    "bit",
    "easier",
    "since",
    "already",
    "actually",
    "uploaded",
    "ipfs",
    "couple",
    "times",
    "since",
    "hashes",
    "going",
    "exact",
    "us",
    "upload",
    "going",
    "go",
    "ahead",
    "quickly",
    "factor",
    "make",
    "little",
    "bit",
    "easier",
    "always",
    "ipfs",
    "running",
    "emv",
    "going",
    "add",
    "new",
    "environment",
    "variable",
    "called",
    "upload",
    "ipfs",
    "going",
    "set",
    "equal",
    "false",
    "going",
    "say",
    "upload",
    "ipfs",
    "equals",
    "equals",
    "true",
    "anyway",
    "since",
    "going",
    "os",
    "going",
    "import",
    "os",
    "going",
    "doops",
    "image",
    "u",
    "equals",
    "none",
    "going",
    "say",
    "image",
    "u",
    "equals",
    "image",
    "u",
    "image",
    "uri",
    "know",
    "could",
    "little",
    "confusing",
    "saying",
    "setting",
    "image",
    "uri",
    "whatever",
    "image",
    "uri",
    "image",
    "uri",
    "none",
    "else",
    "going",
    "create",
    "mapping",
    "called",
    "breed",
    "image",
    "uri",
    "breed",
    "since",
    "already",
    "uploaded",
    "already",
    "know",
    "image",
    "eyes",
    "three",
    "dogs",
    "going",
    "top",
    "going",
    "create",
    "new",
    "mapping",
    "called",
    "breed",
    "image",
    "ey",
    "equals",
    "actually",
    "going",
    "go",
    "ahead",
    "copy",
    "paste",
    "whole",
    "thing",
    "skip",
    "refactor",
    "um",
    "always",
    "damon",
    "running",
    "always",
    "upload",
    "ipfs",
    "little",
    "bit",
    "quicker",
    "always",
    "brief",
    "image",
    "uri",
    "github",
    "repo",
    "feel",
    "free",
    "fre",
    "copy",
    "paste",
    "use",
    "even",
    "click",
    "links",
    "check",
    "check",
    "see",
    "image",
    "uis",
    "really",
    "use",
    "back",
    "reach",
    "im",
    "image",
    "u",
    "uri",
    "perfect",
    "also",
    "going",
    "add",
    "os",
    "getet",
    "env",
    "upload",
    "ipfs",
    "equals",
    "equals",
    "true",
    "also",
    "going",
    "upload",
    "ipfs",
    "go",
    "actually",
    "show",
    "exactly",
    "could",
    "upload",
    "stuff",
    "ipfs",
    "since",
    "already",
    "done",
    "going",
    "make",
    "little",
    "bit",
    "easier",
    "another",
    "thing",
    "might",
    "might",
    "actually",
    "save",
    "urls",
    "file",
    "json",
    "object",
    "maybe",
    "inside",
    "metadata",
    "folder",
    "maybe",
    "rink",
    "something",
    "could",
    "go",
    "ahead",
    "pull",
    "directly",
    "files",
    "thing",
    "metadata",
    "upload",
    "ipfs",
    "actually",
    "going",
    "save",
    "urls",
    "anywhere",
    "could",
    "absolutely",
    "100",
    "run",
    "upload",
    "ipfs",
    "script",
    "go",
    "ahead",
    "save",
    "file",
    "pull",
    "directly",
    "moving",
    "forward",
    "awesome",
    "okay",
    "done",
    "lot",
    "work",
    "uploaded",
    "ipfs",
    "metadata",
    "image",
    "uis",
    "everything",
    "need",
    "actually",
    "set",
    "token",
    "uri",
    "finally",
    "advanced",
    "collectible",
    "finally",
    "call",
    "set",
    "token",
    "uri",
    "function",
    "let",
    "go",
    "ahead",
    "last",
    "bit",
    "last",
    "set",
    "token",
    "u",
    "function",
    "function",
    "let",
    "go",
    "scripts",
    "advan",
    "scripts",
    "create",
    "new",
    "file",
    "call",
    "set",
    "token",
    "u",
    "going",
    "set",
    "token",
    "u",
    "def",
    "main",
    "quick",
    "print",
    "print",
    "f",
    "working",
    "network",
    "show",
    "active",
    "course",
    "since",
    "using",
    "network",
    "brownie",
    "import",
    "network",
    "close",
    "let",
    "grab",
    "recent",
    "advanced",
    "collectible",
    "going",
    "equal",
    "advanced",
    "collectible",
    "minus",
    "one",
    "since",
    "using",
    "advanced",
    "collectible",
    "contract",
    "let",
    "import",
    "brownie",
    "let",
    "loop",
    "tokens",
    "deployed",
    "number",
    "collectibles",
    "equals",
    "advanced",
    "collectible",
    "token",
    "counter",
    "quick",
    "print",
    "print",
    "f",
    "excuse",
    "number",
    "collectibles",
    "token",
    "ids",
    "let",
    "loop",
    "list",
    "collectibles",
    "say",
    "token",
    "id",
    "range",
    "number",
    "collectibles",
    "first",
    "get",
    "breed",
    "saying",
    "breed",
    "equals",
    "advanced",
    "collectible",
    "token",
    "id",
    "breed",
    "token",
    "id",
    "actually",
    "call",
    "get",
    "breed",
    "function",
    "luckily",
    "generalize",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "breed",
    "let",
    "first",
    "actually",
    "set",
    "token",
    "uri",
    "let",
    "check",
    "see",
    "already",
    "token",
    "uri",
    "set",
    "going",
    "say",
    "advanced",
    "collectible",
    "token",
    "uri",
    "token",
    "id",
    "dot",
    "starts",
    "https",
    "line",
    "know",
    "little",
    "bit",
    "long",
    "grabbing",
    "advanced",
    "collectible",
    "token",
    "u",
    "token",
    "id",
    "grabbing",
    "token",
    "id",
    "token",
    "uri",
    "saying",
    "start",
    "htps",
    "means",
    "know",
    "set",
    "go",
    "ahead",
    "print",
    "setting",
    "token",
    "uri",
    "let",
    "actually",
    "make",
    "print",
    "f",
    "token",
    "id",
    "set",
    "token",
    "u",
    "actually",
    "going",
    "generalize",
    "function",
    "let",
    "go",
    "ahead",
    "def",
    "set",
    "token",
    "uri",
    "inputs",
    "going",
    "take",
    "token",
    "id",
    "nft",
    "contract",
    "going",
    "advanced",
    "collectible",
    "contract",
    "token",
    "u",
    "first",
    "thing",
    "going",
    "say",
    "account",
    "equals",
    "get",
    "account",
    "going",
    "grab",
    "get",
    "account",
    "course",
    "helpful",
    "scripts",
    "set",
    "token",
    "uri",
    "actually",
    "going",
    "call",
    "set",
    "token",
    "u",
    "function",
    "going",
    "say",
    "nft",
    "contract",
    "set",
    "token",
    "uri",
    "token",
    "id",
    "token",
    "uri",
    "remember",
    "function",
    "added",
    "advanced",
    "collectible",
    "right",
    "set",
    "token",
    "uri",
    "takes",
    "token",
    "id",
    "token",
    "uri",
    "going",
    "course",
    "account",
    "created",
    "going",
    "say",
    "transaction",
    "equals",
    "transaction",
    "weit",
    "wait",
    "one",
    "second",
    "one",
    "block",
    "print",
    "print",
    "f",
    "awesome",
    "view",
    "nft",
    "use",
    "open",
    "c",
    "url",
    "format",
    "nft",
    "contract",
    "address",
    "comma",
    "token",
    "id",
    "going",
    "add",
    "another",
    "print",
    "saying",
    "please",
    "wait",
    "20",
    "minutes",
    "hit",
    "refresh",
    "metadata",
    "hit",
    "refresh",
    "metadata",
    "button",
    "set",
    "token",
    "uri",
    "function",
    "add",
    "token",
    "id",
    "advanced",
    "collectible",
    "contract",
    "add",
    "token",
    "uri",
    "since",
    "already",
    "uploaded",
    "since",
    "already",
    "actually",
    "uploaded",
    "three",
    "could",
    "like",
    "dictionary",
    "always",
    "pulling",
    "something",
    "dog",
    "metadata",
    "dictionary",
    "going",
    "equal",
    "going",
    "add",
    "different",
    "dogs",
    "st",
    "bernard",
    "st",
    "bernard",
    "url",
    "going",
    "paste",
    "actually",
    "gone",
    "ahead",
    "like",
    "said",
    "uploaded",
    "metadata",
    "three",
    "dogs",
    "going",
    "go",
    "ahead",
    "copy",
    "paste",
    "three",
    "shortcutting",
    "little",
    "bit",
    "could",
    "could",
    "save",
    "metadatas",
    "file",
    "could",
    "pull",
    "file",
    "instead",
    "kind",
    "dog",
    "metadata",
    "dictionary",
    "case",
    "though",
    "going",
    "dog",
    "metadata",
    "dictionary",
    "breed",
    "right",
    "dog",
    "metadata",
    "dictionary",
    "st",
    "bernard",
    "going",
    "image",
    "u",
    "everything",
    "dog",
    "perfect",
    "also",
    "might",
    "want",
    "write",
    "tests",
    "around",
    "set",
    "token",
    "u",
    "function",
    "course",
    "going",
    "move",
    "case",
    "done",
    "lot",
    "actually",
    "going",
    "even",
    "close",
    "ipfs",
    "node",
    "ready",
    "everything",
    "course",
    "run",
    "brownie",
    "test",
    "want",
    "make",
    "sure",
    "unit",
    "tests",
    "working",
    "great",
    "look",
    "like",
    "working",
    "fantastically",
    "ready",
    "full",
    "endtoend",
    "manual",
    "test",
    "could",
    "100",
    "actually",
    "highly",
    "encourage",
    "100",
    "going",
    "run",
    "scripts",
    "order",
    "look",
    "see",
    "stuff",
    "shows",
    "openc",
    "nft",
    "marketplace",
    "guys",
    "ready",
    "let",
    "make",
    "sure",
    "course",
    "environ",
    "variables",
    "set",
    "make",
    "sure",
    "metamask",
    "rink",
    "b",
    "eth",
    "link",
    "go",
    "ahead",
    "start",
    "running",
    "scripts",
    "brownie",
    "run",
    "scripts",
    "advance",
    "collectible",
    "deploy",
    "crate",
    "network",
    "rink",
    "b",
    "integration",
    "test",
    "moment",
    "truth",
    "perfect",
    "new",
    "token",
    "created",
    "awesome",
    "even",
    "even",
    "go",
    "grab",
    "address",
    "let",
    "delete",
    "tabs",
    "opened",
    "go",
    "rink",
    "paste",
    "see",
    "contract",
    "verified",
    "even",
    "though",
    "verify",
    "matches",
    "source",
    "code",
    "see",
    "token",
    "counter",
    "one",
    "even",
    "go",
    "token",
    "id",
    "breed",
    "zero",
    "see",
    "breed",
    "breed",
    "2",
    "looks",
    "like",
    "getting",
    "st",
    "bernard",
    "incred",
    "adorable",
    "even",
    "go",
    "events",
    "see",
    "different",
    "events",
    "since",
    "verified",
    "even",
    "see",
    "name",
    "events",
    "breed",
    "assigned",
    "event",
    "requested",
    "collectible",
    "event",
    "first",
    "index",
    "topic",
    "token",
    "id",
    "un",
    "8",
    "breed",
    "bytes",
    "32",
    "request",
    "id",
    "address",
    "requester",
    "let",
    "run",
    "create",
    "metadata",
    "script",
    "brownie",
    "run",
    "scripts",
    "advanced",
    "create",
    "metadata",
    "network",
    "rink",
    "beam",
    "run",
    "create",
    "collectible",
    "since",
    "deploying",
    "crate",
    "already",
    "run",
    "create",
    "metadata",
    "actually",
    "already",
    "actually",
    "since",
    "st",
    "bernard",
    "going",
    "go",
    "ahead",
    "get",
    "already",
    "exists",
    "delete",
    "overwrite",
    "going",
    "actually",
    "going",
    "even",
    "create",
    "another",
    "one",
    "get",
    "new",
    "nft",
    "actually",
    "going",
    "run",
    "create",
    "collectible",
    "script",
    "going",
    "brownie",
    "run",
    "scripts",
    "advance",
    "collectible",
    "create",
    "collectible",
    "network",
    "rank",
    "b",
    "going",
    "going",
    "going",
    "fund",
    "link",
    "going",
    "little",
    "bit",
    "overkill",
    "link",
    "fine",
    "going",
    "advance",
    "collectible",
    "create",
    "collectible",
    "going",
    "two",
    "transactions",
    "perfect",
    "collectible",
    "created",
    "going",
    "wait",
    "solid",
    "30",
    "seconds",
    "chain",
    "link",
    "vrf",
    "respond",
    "even",
    "going",
    "go",
    "contract",
    "give",
    "quick",
    "refresh",
    "look",
    "token",
    "counter",
    "chain",
    "leag",
    "vrf",
    "responds",
    "token",
    "counter",
    "two",
    "see",
    "token",
    "counter",
    "two",
    "means",
    "actually",
    "responded",
    "run",
    "create",
    "metadata",
    "script",
    "new",
    "metadata",
    "file",
    "two",
    "collectibles",
    "zero",
    "st",
    "bernard",
    "already",
    "exists",
    "deleted",
    "overwrite",
    "create",
    "metadata",
    "file",
    "metadata",
    "rink",
    "b",
    "pug",
    "look",
    "metadata",
    "rink",
    "b",
    "st",
    "bernard",
    "pug",
    "awesome",
    "going",
    "set",
    "token",
    "uri",
    "grab",
    "contract",
    "go",
    "test",
    "nets",
    "openc",
    "openc",
    "paste",
    "address",
    "get",
    "doggy",
    "random",
    "hash",
    "right",
    "see",
    "two",
    "token",
    "u",
    "deployed",
    "might",
    "refresh",
    "images",
    "right",
    "set",
    "token",
    "uri",
    "go",
    "back",
    "look",
    "advanced",
    "collectible",
    "deployed",
    "created",
    "created",
    "another",
    "collectible",
    "created",
    "metadata",
    "set",
    "token",
    "u",
    "brownie",
    "run",
    "scripts",
    "advance",
    "collectible",
    "set",
    "token",
    "uri",
    "network",
    "rink",
    "b",
    "script",
    "going",
    "loop",
    "actually",
    "going",
    "set",
    "token",
    "uis",
    "setting",
    "token",
    "uri",
    "zero",
    "transaction",
    "exactly",
    "going",
    "go",
    "ahead",
    "say",
    "awesome",
    "output",
    "going",
    "say",
    "setting",
    "token",
    "uri",
    "token",
    "id",
    "one",
    "second",
    "transaction",
    "also",
    "gives",
    "us",
    "output",
    "one",
    "well",
    "done",
    "correctly",
    "hit",
    "refresh",
    "metadata",
    "test",
    "nest",
    "open",
    "little",
    "refresh",
    "see",
    "st",
    "bernard",
    "fantastic",
    "change",
    "0er",
    "one",
    "since",
    "deployed",
    "two",
    "refresh",
    "one",
    "metadata",
    "refresh",
    "page",
    "see",
    "pug",
    "well",
    "keep",
    "mind",
    "sometimes",
    "refreshing",
    "metadata",
    "take",
    "time",
    "might",
    "wait",
    "20",
    "minutes",
    "intents",
    "purposes",
    "deployed",
    "nfts",
    "given",
    "token",
    "youru",
    "eyes",
    "around",
    "centralized",
    "servers",
    "see",
    "nft",
    "marketplace",
    "like",
    "openc",
    "let",
    "big",
    "sigh",
    "relief",
    "something",
    "fantastic",
    "lot",
    "engineers",
    "incredibly",
    "proud",
    "point",
    "let",
    "take",
    "minute",
    "go",
    "back",
    "new",
    "things",
    "learned",
    "deploying",
    "smart",
    "contracts",
    "chain",
    "know",
    "smart",
    "contracts",
    "immutable",
    "unchangeable",
    "told",
    "mutable",
    "well",
    "technically",
    "would",
    "correct",
    "however",
    "smart",
    "contracts",
    "actually",
    "change",
    "time",
    "people",
    "transfer",
    "tokens",
    "people",
    "stake",
    "contract",
    "really",
    "type",
    "functionality",
    "smart",
    "contracts",
    "update",
    "balances",
    "update",
    "mappings",
    "update",
    "variables",
    "reflect",
    "reason",
    "immutable",
    "logic",
    "never",
    "changes",
    "chain",
    "like",
    "forever",
    "technically",
    "yes",
    "deployed",
    "immutable",
    "actually",
    "one",
    "major",
    "benefits",
    "smart",
    "contracts",
    "first",
    "place",
    "nobody",
    "tamper",
    "screw",
    "smart",
    "contracts",
    "deploy",
    "however",
    "issue",
    "example",
    "want",
    "upgrade",
    "smart",
    "contract",
    "protocol",
    "things",
    "want",
    "fix",
    "glaring",
    "bug",
    "issue",
    "even",
    "though",
    "ca",
    "change",
    "specific",
    "code",
    "deployed",
    "address",
    "actually",
    "lot",
    "think",
    "going",
    "explain",
    "different",
    "methodologies",
    "behind",
    "upgrading",
    "smart",
    "contracts",
    "going",
    "show",
    "first",
    "glance",
    "might",
    "thinking",
    "upgrade",
    "smart",
    "contracts",
    "really",
    "immutable",
    "way",
    "right",
    "explaining",
    "kind",
    "different",
    "philosophies",
    "patterns",
    "use",
    "need",
    "keep",
    "mind",
    "philosophies",
    "decentralization",
    "implications",
    "one",
    "patterns",
    "different",
    "advantages",
    "disadvantages",
    "yes",
    "disadvantages",
    "going",
    "affect",
    "decentral",
    "need",
    "keep",
    "mind",
    "important",
    "go",
    "ahead",
    "jump",
    "start",
    "deploying",
    "upgradeable",
    "smart",
    "contracts",
    "understand",
    "going",
    "look",
    "three",
    "different",
    "ways",
    "upgrade",
    "smart",
    "contract",
    "really",
    "upgrading",
    "method",
    "social",
    "aka",
    "migrating",
    "method",
    "method",
    "probably",
    "proxies",
    "let",
    "talk",
    "really",
    "upgrading",
    "method",
    "parameterization",
    "method",
    "whatever",
    "want",
    "call",
    "simplest",
    "way",
    "think",
    "upgrading",
    "smart",
    "contracts",
    "really",
    "upgrading",
    "smart",
    "contracts",
    "ca",
    "really",
    "change",
    "logic",
    "smart",
    "contract",
    "whatever",
    "logic",
    "written",
    "also",
    "ca",
    "add",
    "new",
    "storage",
    "state",
    "variables",
    "really",
    "really",
    "upgrading",
    "something",
    "think",
    "upgrades",
    "parameterizing",
    "everything",
    "whatever",
    "logic",
    "deployed",
    "interacting",
    "function",
    "means",
    "whole",
    "bunch",
    "setter",
    "functions",
    "update",
    "certain",
    "parameters",
    "like",
    "maybe",
    "reward",
    "parameter",
    "gives",
    "token",
    "1",
    "every",
    "year",
    "something",
    "like",
    "maybe",
    "set",
    "function",
    "says",
    "hey",
    "update",
    "2",
    "update",
    "4",
    "set",
    "function",
    "changes",
    "variable",
    "advantages",
    "obviously",
    "really",
    "simple",
    "implement",
    "disadvantage",
    "think",
    "logic",
    "functionality",
    "first",
    "time",
    "deployed",
    "smart",
    "contract",
    "bad",
    "stuck",
    "ca",
    "update",
    "logic",
    "really",
    "update",
    "anything",
    "uh",
    "parameterization",
    "aka",
    "really",
    "method",
    "thing",
    "think",
    "admins",
    "access",
    "setter",
    "functions",
    "updating",
    "functions",
    "single",
    "person",
    "guess",
    "centralized",
    "smart",
    "contract",
    "course",
    "add",
    "governance",
    "contract",
    "admin",
    "contract",
    "protocol",
    "would",
    "decentralized",
    "way",
    "keep",
    "mind",
    "method",
    "need",
    "governance",
    "protocol",
    "another",
    "example",
    "might",
    "contract",
    "registry",
    "something",
    "actually",
    "early",
    "versions",
    "aa",
    "used",
    "call",
    "function",
    "actually",
    "check",
    "contract",
    "registry",
    "updated",
    "parameter",
    "somebody",
    "get",
    "routed",
    "contract",
    "call",
    "really",
    "allow",
    "us",
    "full",
    "functionality",
    "upgrades",
    "argue",
    "registry",
    "mix",
    "one",
    "later",
    "versions",
    "intents",
    "purposes",
    "really",
    "give",
    "us",
    "flexibility",
    "want",
    "upgrades",
    "people",
    "might",
    "even",
    "think",
    "upgrading",
    "smart",
    "contract",
    "ruining",
    "decentral",
    "one",
    "things",
    "makes",
    "smart",
    "contracts",
    "potent",
    "immutable",
    "one",
    "benefits",
    "people",
    "think",
    "add",
    "customization",
    "upgradeability",
    "deploy",
    "contract",
    "trill",
    "bits",
    "actually",
    "argued",
    "deploy",
    "contract",
    "knowing",
    "ca",
    "changed",
    "later",
    "take",
    "little",
    "bit",
    "extra",
    "time",
    "making",
    "sure",
    "get",
    "everything",
    "right",
    "often",
    "less",
    "security",
    "vulnerabilities",
    "setting",
    "forgetting",
    "looking",
    "looking",
    "deploy",
    "smart",
    "contract",
    "wanted",
    "upgrade",
    "philosophy",
    "mind",
    "hey",
    "got",
    "keep",
    "immutable",
    "could",
    "use",
    "social",
    "yeet",
    "method",
    "actually",
    "upgrade",
    "new",
    "versions",
    "social",
    "yeet",
    "method",
    "migration",
    "method",
    "deploy",
    "new",
    "contract",
    "connected",
    "old",
    "contract",
    "way",
    "social",
    "convention",
    "tell",
    "everybody",
    "hey",
    "hey",
    "new",
    "contract",
    "new",
    "one",
    "imployed",
    "yeah",
    "real",
    "one",
    "convention",
    "people",
    "migrating",
    "using",
    "new",
    "one",
    "upgrade",
    "done",
    "hence",
    "slang",
    "name",
    "social",
    "yeet",
    "yeet",
    "first",
    "one",
    "way",
    "move",
    "second",
    "one",
    "think",
    "funny",
    "advantage",
    "truly",
    "always",
    "saying",
    "hey",
    "immutable",
    "smart",
    "contract",
    "new",
    "one",
    "really",
    "truest",
    "definition",
    "mutable",
    "since",
    "give",
    "way",
    "upgraded",
    "place",
    "somebody",
    "calls",
    "contract",
    "years",
    "future",
    "respond",
    "exactly",
    "another",
    "huge",
    "disadvantage",
    "totally",
    "new",
    "contract",
    "address",
    "erc20",
    "token",
    "example",
    "go",
    "convince",
    "exchanges",
    "list",
    "new",
    "contract",
    "address",
    "actual",
    "address",
    "keep",
    "mind",
    "move",
    "state",
    "first",
    "one",
    "second",
    "one",
    "example",
    "erc",
    "token",
    "moving",
    "new",
    "version",
    "erc",
    "token",
    "way",
    "take",
    "mappings",
    "first",
    "contract",
    "move",
    "second",
    "one",
    "obviously",
    "ways",
    "since",
    "everything",
    "chain",
    "million",
    "transfer",
    "calls",
    "want",
    "write",
    "script",
    "updates",
    "everyone",
    "balance",
    "figures",
    "everyone",
    "balance",
    "migrate",
    "new",
    "version",
    "contract",
    "ton",
    "social",
    "convention",
    "work",
    "trailer",
    "bits",
    "actually",
    "written",
    "fantastic",
    "blog",
    "upgrading",
    "v1",
    "v2",
    "etc",
    "yeet",
    "methodology",
    "give",
    "lot",
    "steps",
    "moving",
    "storage",
    "state",
    "variables",
    "new",
    "contract",
    "link",
    "description",
    "want",
    "read",
    "let",
    "get",
    "big",
    "ticket",
    "item",
    "order",
    "really",
    "robust",
    "upgrading",
    "mentality",
    "philosophy",
    "need",
    "type",
    "methodology",
    "framework",
    "update",
    "state",
    "keep",
    "contract",
    "address",
    "allow",
    "us",
    "update",
    "type",
    "logic",
    "smart",
    "contracts",
    "easy",
    "way",
    "leads",
    "us",
    "big",
    "ticket",
    "item",
    "proxies",
    "proxies",
    "truest",
    "form",
    "upgrades",
    "since",
    "user",
    "keep",
    "interacting",
    "protocols",
    "proxies",
    "even",
    "notice",
    "anything",
    "changed",
    "even",
    "got",
    "updated",
    "also",
    "places",
    "screw",
    "easiest",
    "proxies",
    "use",
    "lot",
    "lowlevel",
    "functionality",
    "main",
    "one",
    "deleg",
    "call",
    "functionality",
    "delegate",
    "call",
    "function",
    "code",
    "target",
    "contract",
    "executed",
    "context",
    "calling",
    "contract",
    "message",
    "sender",
    "message",
    "value",
    "also",
    "change",
    "understand",
    "delegate",
    "call",
    "means",
    "right",
    "great",
    "english",
    "means",
    "delegate",
    "call",
    "function",
    "contract",
    "b",
    "contract",
    "contracts",
    "b",
    "logic",
    "contract",
    "contract",
    "b",
    "function",
    "says",
    "hey",
    "store",
    "value",
    "variable",
    "top",
    "top",
    "going",
    "store",
    "variable",
    "contract",
    "powerhouse",
    "combined",
    "fall",
    "bang",
    "function",
    "allows",
    "us",
    "delegate",
    "calls",
    "proxy",
    "contract",
    "address",
    "contract",
    "means",
    "one",
    "proxy",
    "contract",
    "address",
    "forever",
    "point",
    "route",
    "people",
    "correct",
    "implementation",
    "contract",
    "logic",
    "whenever",
    "want",
    "upgrade",
    "deploy",
    "new",
    "implementation",
    "contract",
    "point",
    "proxy",
    "new",
    "implementation",
    "whenever",
    "user",
    "calls",
    "function",
    "proxy",
    "contract",
    "going",
    "delegate",
    "call",
    "new",
    "contract",
    "call",
    "admin",
    "function",
    "proxy",
    "contract",
    "let",
    "call",
    "upgrade",
    "something",
    "make",
    "contract",
    "calls",
    "go",
    "new",
    "contract",
    "talking",
    "proxies",
    "four",
    "pieces",
    "terminology",
    "want",
    "keep",
    "mind",
    "first",
    "implementation",
    "contract",
    "implementation",
    "contract",
    "logic",
    "pieces",
    "protocol",
    "whenever",
    "upgrade",
    "actually",
    "launch",
    "brand",
    "new",
    "implementation",
    "contract",
    "proxy",
    "contract",
    "proxy",
    "points",
    "implementation",
    "correct",
    "one",
    "routes",
    "everyone",
    "calls",
    "correct",
    "implementation",
    "contract",
    "think",
    "proxy",
    "contract",
    "sits",
    "top",
    "implementations",
    "user",
    "user",
    "going",
    "making",
    "contract",
    "function",
    "calls",
    "proxy",
    "contract",
    "type",
    "admin",
    "admin",
    "one",
    "going",
    "decide",
    "upgrade",
    "contract",
    "point",
    "scenario",
    "cool",
    "thing",
    "proxy",
    "delegate",
    "call",
    "storage",
    "variables",
    "going",
    "stored",
    "proxy",
    "contract",
    "implementation",
    "contract",
    "way",
    "upgrade",
    "new",
    "logic",
    "contract",
    "data",
    "stay",
    "proxy",
    "contract",
    "whenever",
    "want",
    "update",
    "logic",
    "point",
    "new",
    "implementation",
    "contract",
    "want",
    "add",
    "new",
    "storage",
    "variable",
    "new",
    "type",
    "storage",
    "add",
    "logic",
    "contract",
    "proxy",
    "contract",
    "pick",
    "using",
    "proxies",
    "couple",
    "gachas",
    "going",
    "talk",
    "gachas",
    "going",
    "talk",
    "different",
    "proxy",
    "contract",
    "methodologies",
    "yes",
    "many",
    "proxy",
    "contract",
    "methodologies",
    "well",
    "tr",
    "bits",
    "really",
    "recommend",
    "using",
    "upgradable",
    "proxies",
    "smart",
    "contracts",
    "fraught",
    "lot",
    "potential",
    "issues",
    "mention",
    "still",
    "type",
    "admin",
    "going",
    "upgrading",
    "smart",
    "contracts",
    "governance",
    "protocol",
    "great",
    "decentralized",
    "single",
    "group",
    "entity",
    "problem",
    "two",
    "biggest",
    "gotas",
    "storage",
    "clashes",
    "function",
    "selector",
    "clashes",
    "mean",
    "use",
    "delegate",
    "call",
    "remember",
    "logic",
    "contract",
    "b",
    "inside",
    "contract",
    "contract",
    "b",
    "says",
    "need",
    "set",
    "value",
    "two",
    "go",
    "ahead",
    "set",
    "value",
    "two",
    "smart",
    "contracts",
    "actually",
    "kind",
    "dumb",
    "actually",
    "set",
    "value",
    "whatever",
    "storage",
    "location",
    "contract",
    "contract",
    "b",
    "contract",
    "looks",
    "like",
    "two",
    "variables",
    "contract",
    "still",
    "going",
    "set",
    "first",
    "storage",
    "spot",
    "contract",
    "new",
    "value",
    "really",
    "important",
    "know",
    "means",
    "append",
    "new",
    "storage",
    "variables",
    "new",
    "implementation",
    "contracts",
    "ca",
    "reorder",
    "change",
    "old",
    "ones",
    "called",
    "storage",
    "clashing",
    "implementations",
    "going",
    "talk",
    "address",
    "issue",
    "next",
    "one",
    "called",
    "function",
    "selector",
    "clashes",
    "tell",
    "proxies",
    "delegate",
    "call",
    "one",
    "implementations",
    "uses",
    "called",
    "function",
    "selector",
    "find",
    "function",
    "function",
    "selector",
    "4",
    "byte",
    "hash",
    "function",
    "name",
    "function",
    "signature",
    "worry",
    "function",
    "signature",
    "possible",
    "function",
    "implementation",
    "contract",
    "function",
    "selector",
    "admin",
    "function",
    "proxy",
    "contract",
    "may",
    "cause",
    "accidentally",
    "whole",
    "bunch",
    "weird",
    "stuff",
    "example",
    "sample",
    "code",
    "front",
    "even",
    "though",
    "functions",
    "totally",
    "different",
    "actually",
    "function",
    "selector",
    "yes",
    "run",
    "issue",
    "harmless",
    "function",
    "like",
    "get",
    "price",
    "function",
    "selector",
    "upgrade",
    "proxy",
    "destroy",
    "proxy",
    "something",
    "like",
    "leads",
    "first",
    "three",
    "implementations",
    "proxy",
    "contracts",
    "called",
    "transparent",
    "proxy",
    "pattern",
    "actually",
    "going",
    "pattern",
    "going",
    "demoing",
    "today",
    "methodology",
    "admins",
    "allowed",
    "call",
    "admin",
    "functions",
    "ca",
    "call",
    "functions",
    "implementation",
    "contract",
    "users",
    "call",
    "functions",
    "implementation",
    "contract",
    "admin",
    "contracts",
    "way",
    "ca",
    "ever",
    "accidentally",
    "one",
    "two",
    "swapping",
    "function",
    "selector",
    "clash",
    "running",
    "big",
    "issue",
    "call",
    "function",
    "probably",
    "admin",
    "calling",
    "admin",
    "functions",
    "user",
    "calling",
    "implementation",
    "functions",
    "admin",
    "build",
    "crazy",
    "awesome",
    "d5",
    "protocol",
    "better",
    "come",
    "new",
    "wallet",
    "address",
    "ca",
    "participate",
    "second",
    "type",
    "proxy",
    "going",
    "talk",
    "universal",
    "upgradeable",
    "proxy",
    "music",
    "ups",
    "version",
    "upgradeable",
    "contracts",
    "actually",
    "puts",
    "logic",
    "upgrading",
    "implementation",
    "way",
    "solidity",
    "compiler",
    "actually",
    "ki",
    "say",
    "hey",
    "got",
    "two",
    "functions",
    "function",
    "selector",
    "also",
    "advantageous",
    "one",
    "less",
    "read",
    "longer",
    "check",
    "proxy",
    "contract",
    "someone",
    "admin",
    "saves",
    "gas",
    "course",
    "proxy",
    "also",
    "little",
    "bit",
    "smaller",
    "issue",
    "deploy",
    "implementation",
    "contract",
    "without",
    "upgradeable",
    "functionality",
    "stuck",
    "back",
    "yeet",
    "method",
    "last",
    "pattern",
    "methodology",
    "going",
    "talk",
    "diamond",
    "pattern",
    "number",
    "things",
    "one",
    "biggest",
    "things",
    "actually",
    "allows",
    "multiple",
    "implementation",
    "contracts",
    "addresses",
    "couple",
    "different",
    "issues",
    "example",
    "contract",
    "big",
    "fit",
    "one",
    "contract",
    "maximum",
    "size",
    "multiple",
    "contracts",
    "implementation",
    "method",
    "also",
    "allows",
    "make",
    "granular",
    "upgrades",
    "like",
    "always",
    "deploy",
    "upgrade",
    "entire",
    "smart",
    "contract",
    "upgrade",
    "little",
    "pieces",
    "chunked",
    "disadvantages",
    "really",
    "seem",
    "like",
    "lot",
    "complicated",
    "code",
    "proxies",
    "mentioned",
    "type",
    "ethereum",
    "improvement",
    "proposal",
    "draft",
    "phase",
    "really",
    "standard",
    "proxy",
    "whole",
    "community",
    "landed",
    "says",
    "yes",
    "great",
    "let",
    "sure",
    "jump",
    "discussion",
    "give",
    "thoughts",
    "right",
    "know",
    "lot",
    "upgrades",
    "actually",
    "work",
    "different",
    "methodologies",
    "behind",
    "let",
    "go",
    "ahead",
    "learn",
    "actually",
    "implement",
    "strategies",
    "implement",
    "contract",
    "upgrade",
    "brownie",
    "upgrades",
    "mix",
    "directly",
    "brownie",
    "mixes",
    "organization",
    "want",
    "use",
    "absolutely",
    "brownie",
    "bake",
    "upgrades",
    "mix",
    "code",
    "going",
    "teach",
    "use",
    "right",
    "let",
    "go",
    "ahead",
    "build",
    "scratch",
    "going",
    "go",
    "ahead",
    "run",
    "brownie",
    "knit",
    "course",
    "going",
    "create",
    "new",
    "browning",
    "project",
    "going",
    "using",
    "open",
    "zeppelin",
    "proxy",
    "contracts",
    "actually",
    "work",
    "run",
    "methodology",
    "going",
    "working",
    "transparent",
    "upgradeable",
    "proxy",
    "using",
    "universal",
    "upgradeable",
    "proxies",
    "little",
    "bit",
    "however",
    "transparent",
    "upgradeable",
    "proxy",
    "really",
    "fantastic",
    "easy",
    "understand",
    "going",
    "one",
    "going",
    "working",
    "two",
    "contracts",
    "going",
    "importing",
    "directly",
    "open",
    "zeppelin",
    "let",
    "get",
    "going",
    "create",
    "really",
    "simple",
    "contract",
    "easily",
    "tell",
    "upgraded",
    "going",
    "using",
    "exact",
    "ones",
    "open",
    "zeppelin",
    "actually",
    "uses",
    "let",
    "create",
    "new",
    "file",
    "going",
    "called",
    "box",
    "soul",
    "going",
    "store",
    "retrieve",
    "type",
    "value",
    "let",
    "give",
    "spdx",
    "license",
    "identifier",
    "mit",
    "let",
    "pick",
    "solidity",
    "version",
    "actually",
    "going",
    "use",
    "often",
    "times",
    "going",
    "quickly",
    "pick",
    "new",
    "versions",
    "solidity",
    "anyways",
    "anyways",
    "going",
    "contract",
    "box",
    "going",
    "give",
    "u",
    "256",
    "private",
    "value",
    "going",
    "event",
    "called",
    "value",
    "changed",
    "going",
    "give",
    "un",
    "256",
    "new",
    "value",
    "give",
    "function",
    "store",
    "un",
    "256",
    "new",
    "value",
    "going",
    "public",
    "function",
    "anybody",
    "call",
    "going",
    "going",
    "set",
    "value",
    "new",
    "value",
    "going",
    "emit",
    "value",
    "changed",
    "event",
    "going",
    "function",
    "retrieve",
    "public",
    "view",
    "going",
    "return",
    "256",
    "value",
    "return",
    "value",
    "going",
    "whole",
    "contract",
    "hopefully",
    "understand",
    "everything",
    "going",
    "contract",
    "spell",
    "license",
    "right",
    "going",
    "copy",
    "code",
    "create",
    "new",
    "contract",
    "called",
    "box",
    "v2",
    "going",
    "paste",
    "box",
    "version",
    "two",
    "going",
    "exactly",
    "except",
    "going",
    "add",
    "one",
    "function",
    "called",
    "increment",
    "going",
    "public",
    "function",
    "going",
    "set",
    "value",
    "equals",
    "value",
    "plus",
    "one",
    "also",
    "going",
    "emit",
    "value",
    "changed",
    "event",
    "new",
    "value",
    "going",
    "really",
    "easy",
    "us",
    "check",
    "see",
    "contract",
    "upgraded",
    "call",
    "increment",
    "address",
    "originally",
    "deployed",
    "box",
    "means",
    "contract",
    "upgraded",
    "able",
    "call",
    "increment",
    "box",
    "contract",
    "able",
    "call",
    "box",
    "v2",
    "perfect",
    "need",
    "get",
    "started",
    "actually",
    "work",
    "proxies",
    "transparent",
    "proxy",
    "going",
    "working",
    "need",
    "add",
    "browning",
    "project",
    "going",
    "create",
    "new",
    "folder",
    "going",
    "call",
    "transparent",
    "proxy",
    "going",
    "add",
    "two",
    "contracts",
    "going",
    "add",
    "one",
    "called",
    "proxy",
    "admin",
    "going",
    "going",
    "grab",
    "code",
    "open",
    "zepp",
    "proxy",
    "contract",
    "p",
    "right",
    "since",
    "since",
    "code",
    "pulling",
    "directly",
    "open",
    "zeppin",
    "package",
    "going",
    "fiddle",
    "imports",
    "little",
    "bit",
    "make",
    "match",
    "brownie",
    "actually",
    "compile",
    "course",
    "since",
    "going",
    "working",
    "another",
    "package",
    "add",
    "dependencies",
    "brownie",
    "config",
    "music",
    "dependencies",
    "open",
    "zeppelin",
    "slopen",
    "zeppelin",
    "hyphen",
    "contracts",
    "one",
    "going",
    "actually",
    "use",
    "compiler",
    "remappings",
    "open",
    "zeppelin",
    "going",
    "equal",
    "dependency",
    "might",
    "well",
    "ourv",
    "get",
    "environment",
    "variables",
    "add",
    "wallet",
    "wallets",
    "key",
    "private",
    "key",
    "open",
    "zeppelin",
    "slc",
    "contracts",
    "access",
    "ownable",
    "doou",
    "need",
    "change",
    "actually",
    "going",
    "keep",
    "transparent",
    "upgradeable",
    "proxy",
    "doole",
    "second",
    "contract",
    "actually",
    "going",
    "grab",
    "open",
    "zeppelin",
    "let",
    "create",
    "new",
    "file",
    "going",
    "called",
    "transparent",
    "upgradeable",
    "proxy",
    "doso",
    "exact",
    "text",
    "going",
    "copy",
    "paste",
    "whole",
    "thing",
    "open",
    "zeppelin",
    "boom",
    "paste",
    "awesome",
    "thing",
    "little",
    "reverse",
    "engineer",
    "open",
    "zeppelin",
    "contracts",
    "proxy",
    "earc",
    "1967",
    "erc",
    "1967",
    "proxy",
    "perfect",
    "exactly",
    "great",
    "done",
    "right",
    "able",
    "run",
    "quick",
    "browning",
    "compile",
    "oops",
    "got",
    "change",
    "box",
    "b2",
    "let",
    "run",
    "brownie",
    "compile",
    "perfect",
    "looks",
    "like",
    "compiled",
    "got",
    "stuff",
    "build",
    "great",
    "everything",
    "working",
    "correctly",
    "okay",
    "box",
    "box",
    "v2",
    "proxy",
    "contracts",
    "well",
    "use",
    "upgrade",
    "box",
    "new",
    "version",
    "even",
    "look",
    "go",
    "back",
    "proxy",
    "open",
    "zeppelin",
    "look",
    "proxy",
    "admin",
    "see",
    "function",
    "upgrade",
    "call",
    "call",
    "upgrade",
    "call",
    "proxy",
    "contract",
    "look",
    "transparent",
    "proxy",
    "upgrade",
    "call",
    "calls",
    "upgraded",
    "call",
    "imported",
    "actually",
    "actually",
    "even",
    "go",
    "back",
    "back",
    "go",
    "erc1",
    "1967",
    "proxy",
    "upgrade",
    "look",
    "function",
    "actually",
    "going",
    "call",
    "calls",
    "upgrade",
    "2",
    "function",
    "calls",
    "set",
    "implementation",
    "function",
    "storage",
    "slot",
    "getet",
    "address",
    "slot",
    "implementation",
    "slot",
    "value",
    "going",
    "new",
    "implementation",
    "setting",
    "implementation",
    "slot",
    "new",
    "address",
    "want",
    "use",
    "see",
    "look",
    "proxy",
    "contract",
    "way",
    "actually",
    "works",
    "fallback",
    "function",
    "always",
    "going",
    "delegate",
    "calls",
    "whatever",
    "implementation",
    "contract",
    "delegate",
    "function",
    "fun",
    "look",
    "little",
    "bit",
    "assembly",
    "uses",
    "delegate",
    "call",
    "send",
    "function",
    "call",
    "call",
    "contract",
    "implementation",
    "contract",
    "exactly",
    "function",
    "delegation",
    "right",
    "dug",
    "deep",
    "code",
    "let",
    "actually",
    "script",
    "turn",
    "script",
    "let",
    "create",
    "new",
    "file",
    "call",
    "01",
    "deploy",
    "box",
    "going",
    "actually",
    "going",
    "deploy",
    "box",
    "since",
    "browning",
    "script",
    "going",
    "def",
    "main",
    "course",
    "account",
    "going",
    "equal",
    "get",
    "account",
    "going",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "let",
    "go",
    "ahead",
    "credit",
    "new",
    "file",
    "help",
    "full",
    "scripts",
    "oops",
    "full",
    "scripts",
    "piy",
    "going",
    "paste",
    "get",
    "account",
    "function",
    "past",
    "helpful",
    "scripts",
    "get",
    "account",
    "script",
    "account",
    "equals",
    "get",
    "account",
    "oh",
    "sorry",
    "bep",
    "excuse",
    "quick",
    "print",
    "ploying",
    "network",
    "show",
    "active",
    "means",
    "got",
    "brownie",
    "import",
    "network",
    "box",
    "equals",
    "box",
    "deploy",
    "count",
    "little",
    "brackets",
    "course",
    "since",
    "going",
    "deploying",
    "contract",
    "also",
    "import",
    "brownie",
    "perfect",
    "alone",
    "deploy",
    "box",
    "contract",
    "right",
    "means",
    "could",
    "something",
    "like",
    "print",
    "box",
    "dot",
    "retrieve",
    "zero",
    "right",
    "run",
    "brownie",
    "run",
    "scripts",
    "a1",
    "deploy",
    "deploy",
    "whoops",
    "also",
    "got",
    "add",
    "emv",
    "put",
    "anything",
    "yet",
    "actually",
    "deploying",
    "real",
    "network",
    "let",
    "go",
    "ahead",
    "run",
    "spelled",
    "retrieve",
    "wrong",
    "probably",
    "good",
    "spell",
    "things",
    "right",
    "let",
    "try",
    "great",
    "get",
    "zero",
    "perfect",
    "exactly",
    "expect",
    "cool",
    "however",
    "though",
    "run",
    "box",
    "increment",
    "air",
    "right",
    "boom",
    "exactly",
    "attribute",
    "increment",
    "known",
    "implementation",
    "contract",
    "box",
    "implemented",
    "implementation",
    "contract",
    "hook",
    "proxy",
    "let",
    "first",
    "give",
    "proxy",
    "admin",
    "proxy",
    "admins",
    "optional",
    "um",
    "also",
    "recommended",
    "proxy",
    "admin",
    "going",
    "use",
    "type",
    "def5",
    "protocol",
    "sometimes",
    "great",
    "proxy",
    "admin",
    "something",
    "like",
    "multisig",
    "nois",
    "safe",
    "really",
    "fantastic",
    "going",
    "link",
    "github",
    "learning",
    "actually",
    "spin",
    "one",
    "let",
    "go",
    "ahead",
    "proxy",
    "admin",
    "really",
    "helpful",
    "anyways",
    "could",
    "optionally",
    "could",
    "set",
    "proxy",
    "admin",
    "let",
    "set",
    "contract",
    "proxy",
    "admin",
    "equals",
    "proxy",
    "admin",
    "deploy",
    "count",
    "since",
    "using",
    "proxy",
    "admin",
    "got",
    "import",
    "well",
    "look",
    "proxy",
    "admin",
    "see",
    "couple",
    "functions",
    "see",
    "like",
    "get",
    "proxy",
    "implementation",
    "going",
    "return",
    "address",
    "implementation",
    "get",
    "proxy",
    "admin",
    "going",
    "us",
    "change",
    "proxy",
    "admin",
    "upgrade",
    "going",
    "call",
    "upgrade",
    "function",
    "proxy",
    "upgrade",
    "call",
    "upgrade",
    "call",
    "changes",
    "implementation",
    "new",
    "implementation",
    "calls",
    "initializer",
    "function",
    "since",
    "want",
    "proxies",
    "see",
    "constructor",
    "intentional",
    "instead",
    "could",
    "type",
    "initializer",
    "function",
    "example",
    "maybe",
    "want",
    "store",
    "constructor",
    "instead",
    "constructor",
    "call",
    "called",
    "initializer",
    "function",
    "instant",
    "deploy",
    "contract",
    "demo",
    "going",
    "initializer",
    "anyways",
    "proxy",
    "admin",
    "implementation",
    "contract",
    "proxy",
    "admin",
    "let",
    "hook",
    "actual",
    "proxy",
    "first",
    "thing",
    "need",
    "actually",
    "need",
    "encode",
    "initializer",
    "function",
    "wanted",
    "store",
    "initializer",
    "function",
    "like",
    "said",
    "could",
    "something",
    "like",
    "initial",
    "lizer",
    "equals",
    "box",
    "store",
    "comma",
    "1",
    "would",
    "initializer",
    "box",
    "store",
    "combined",
    "one",
    "encode",
    "proxy",
    "look",
    "transparent",
    "upgradable",
    "proxy",
    "look",
    "constructor",
    "address",
    "logic",
    "address",
    "admin",
    "data",
    "logic",
    "implementation",
    "right",
    "going",
    "address",
    "box",
    "admin",
    "going",
    "case",
    "going",
    "proxy",
    "admin",
    "contract",
    "data",
    "going",
    "initializer",
    "function",
    "go",
    "erc",
    "721",
    "proxy",
    "contract",
    "go",
    "back",
    "proxy",
    "erc",
    "1967",
    "upgrade",
    "look",
    "one",
    "constructor",
    "see",
    "data",
    "bit",
    "built",
    "constructor",
    "immediately",
    "going",
    "call",
    "upgrade",
    "end",
    "call",
    "going",
    "call",
    "initializer",
    "go",
    "upgrade",
    "call",
    "go",
    "back",
    "upgrade",
    "contract",
    "see",
    "upgrade",
    "call",
    "going",
    "call",
    "address",
    "function",
    "delegate",
    "call",
    "new",
    "implementation",
    "data",
    "actually",
    "calls",
    "initializer",
    "function",
    "actually",
    "encode",
    "bytes",
    "say",
    "box",
    "store",
    "function",
    "call",
    "one",
    "going",
    "first",
    "parameter",
    "right",
    "want",
    "box",
    "encoded",
    "initializer",
    "function",
    "function",
    "equals",
    "code",
    "function",
    "data",
    "gets",
    "little",
    "bit",
    "tricky",
    "um",
    "usually",
    "encode",
    "function",
    "data",
    "helpful",
    "scripts",
    "quick",
    "def",
    "encode",
    "function",
    "data",
    "going",
    "take",
    "initializer",
    "going",
    "start",
    "none",
    "number",
    "arguments",
    "could",
    "like",
    "know",
    "initi",
    "izer",
    "equals",
    "box",
    "store",
    "arguments",
    "could",
    "know",
    "1",
    "2",
    "3",
    "4",
    "5",
    "etc",
    "whatever",
    "right",
    "us",
    "one",
    "variable",
    "put",
    "store",
    "would",
    "browning",
    "actually",
    "function",
    "actually",
    "return",
    "initializer",
    "code",
    "input",
    "star",
    "args",
    "however",
    "bit",
    "issue",
    "length",
    "args",
    "zero",
    "already",
    "hacked",
    "away",
    "guys",
    "going",
    "length",
    "args",
    "zero",
    "using",
    "initializer",
    "going",
    "return",
    "f",
    "utils",
    "two",
    "bytes",
    "x",
    "string",
    "equals",
    "ox",
    "import",
    "f",
    "uil",
    "import",
    "f",
    "utils",
    "course",
    "pip",
    "install",
    "pip",
    "install",
    "f",
    "utils",
    "know",
    "kind",
    "rushed",
    "basically",
    "like",
    "said",
    "encoding",
    "bytes",
    "smart",
    "contracts",
    "actually",
    "know",
    "function",
    "call",
    "encoding",
    "blank",
    "initializer",
    "going",
    "return",
    "empty",
    "hex",
    "string",
    "smart",
    "contract",
    "understand",
    "ah",
    "okay",
    "arguments",
    "blank",
    "perfect",
    "got",
    "nice",
    "dock",
    "string",
    "upgrades",
    "mix",
    "explains",
    "even",
    "better",
    "even",
    "going",
    "paste",
    "like",
    "pause",
    "read",
    "little",
    "bit",
    "kind",
    "get",
    "full",
    "depth",
    "function",
    "really",
    "uh",
    "feel",
    "free",
    "little",
    "bit",
    "lower",
    "level",
    "solidity",
    "evm",
    "stuff",
    "getting",
    "good",
    "know",
    "anyways",
    "okay",
    "great",
    "go",
    "ahead",
    "run",
    "box",
    "encoded",
    "initializer",
    "function",
    "equals",
    "encode",
    "function",
    "data",
    "would",
    "import",
    "helpful",
    "scripts",
    "use",
    "call",
    "constructor",
    "transparent",
    "upgradeable",
    "proxy",
    "going",
    "blank",
    "feel",
    "free",
    "fiddle",
    "around",
    "try",
    "actually",
    "use",
    "initializer",
    "run",
    "demo",
    "box",
    "encoded",
    "initializer",
    "function",
    "going",
    "blank",
    "saying",
    "hey",
    "use",
    "initializer",
    "totally",
    "fine",
    "add",
    "stuff",
    "would",
    "say",
    "hey",
    "use",
    "initializer",
    "actually",
    "deploy",
    "transparent",
    "upgradeable",
    "proxy",
    "open",
    "look",
    "constructor",
    "see",
    "need",
    "going",
    "say",
    "proxy",
    "equals",
    "transparent",
    "upgradeable",
    "going",
    "implementation",
    "contract",
    "address",
    "say",
    "box",
    "address",
    "already",
    "already",
    "deployed",
    "great",
    "going",
    "need",
    "admin",
    "could",
    "say",
    "us",
    "going",
    "use",
    "proxy",
    "admin",
    "address",
    "last",
    "need",
    "function",
    "selector",
    "need",
    "encoded",
    "function",
    "call",
    "us",
    "blank",
    "still",
    "need",
    "box",
    "encoded",
    "initializer",
    "function",
    "add",
    "account",
    "course",
    "also",
    "noticed",
    "sometimes",
    "helpful",
    "add",
    "type",
    "gas",
    "limit",
    "even",
    "add",
    "gas",
    "limit",
    "one",
    "one",
    "two",
    "3",
    "one",
    "two",
    "3",
    "six",
    "zeros",
    "sometimes",
    "might",
    "fine",
    "uh",
    "proxies",
    "sometimes",
    "hard",
    "time",
    "figuring",
    "gas",
    "limit",
    "manually",
    "put",
    "want",
    "might",
    "work",
    "fine",
    "without",
    "great",
    "let",
    "quick",
    "print",
    "function",
    "print",
    "f",
    "proxy",
    "deployed",
    "proxy",
    "upgrade",
    "v2",
    "proxy",
    "address",
    "call",
    "functions",
    "typically",
    "right",
    "wanted",
    "call",
    "function",
    "box",
    "contract",
    "box",
    "know",
    "retrieve",
    "however",
    "spell",
    "box",
    "store",
    "let",
    "box",
    "store",
    "right",
    "call",
    "like",
    "however",
    "want",
    "actually",
    "call",
    "proxies",
    "right",
    "box",
    "box",
    "contract",
    "address",
    "box",
    "contract",
    "always",
    "going",
    "address",
    "ca",
    "change",
    "proxy",
    "code",
    "change",
    "want",
    "call",
    "functions",
    "proxy",
    "box",
    "right",
    "way",
    "proxy",
    "box",
    "equals",
    "contract",
    "abi",
    "call",
    "box",
    "proxy",
    "address",
    "course",
    "import",
    "brownie",
    "assigning",
    "proxy",
    "address",
    "abi",
    "box",
    "contract",
    "going",
    "work",
    "proxy",
    "going",
    "delegate",
    "calls",
    "box",
    "contract",
    "typically",
    "put",
    "abi",
    "top",
    "address",
    "functions",
    "abi",
    "defines",
    "would",
    "airor",
    "right",
    "proxy",
    "actually",
    "going",
    "delegate",
    "calls",
    "box",
    "could",
    "actually",
    "go",
    "ahead",
    "try",
    "like",
    "print",
    "proxy",
    "box",
    "retrieve",
    "hopefully",
    "spelled",
    "right",
    "even",
    "though",
    "using",
    "proxy",
    "address",
    "going",
    "delegate",
    "call",
    "box",
    "let",
    "go",
    "ahead",
    "run",
    "browning",
    "run",
    "scripts",
    "deploy",
    "box",
    "going",
    "deploy",
    "box",
    "going",
    "deploy",
    "admin",
    "going",
    "encode",
    "initializer",
    "function",
    "set",
    "nothing",
    "going",
    "deploy",
    "transparent",
    "upgradeable",
    "proxy",
    "going",
    "call",
    "retrieve",
    "transparent",
    "upgradeable",
    "proxy",
    "instead",
    "box",
    "let",
    "perfect",
    "right",
    "returning",
    "zero",
    "awesome",
    "could",
    "also",
    "could",
    "also",
    "proxy",
    "box",
    "store",
    "one",
    "call",
    "retrieve",
    "see",
    "happens",
    "whoops",
    "yelling",
    "got",
    "music",
    "count",
    "let",
    "go",
    "ahead",
    "run",
    "perfect",
    "see",
    "stored",
    "proxy",
    "box",
    "proxy",
    "able",
    "retrieve",
    "value",
    "fantastic",
    "right",
    "deployed",
    "let",
    "learn",
    "upgrade",
    "going",
    "change",
    "deploy",
    "upgrade",
    "thatp",
    "going",
    "everything",
    "everything",
    "deployed",
    "let",
    "go",
    "ahead",
    "upgrade",
    "always",
    "point",
    "proxy",
    "box",
    "address",
    "going",
    "recent",
    "upgrade",
    "always",
    "going",
    "code",
    "want",
    "let",
    "go",
    "ahead",
    "upgrade",
    "box",
    "increment",
    "box",
    "v2",
    "indeed",
    "increment",
    "function",
    "let",
    "try",
    "first",
    "thing",
    "need",
    "actually",
    "need",
    "deploy",
    "box",
    "v2",
    "box",
    "v2",
    "equals",
    "box",
    "deploy",
    "say",
    "account",
    "leave",
    "like",
    "course",
    "going",
    "import",
    "box",
    "v2",
    "brownie",
    "right",
    "actually",
    "let",
    "even",
    "proxy",
    "box",
    "increment",
    "right",
    "call",
    "boxy",
    "pro",
    "proxy",
    "box",
    "increment",
    "account",
    "error",
    "right",
    "able",
    "call",
    "increment",
    "function",
    "exist",
    "oh",
    "also",
    "changed",
    "name",
    "script",
    "sorry",
    "actually",
    "going",
    "deploy",
    "upgrade",
    "perfect",
    "see",
    "actually",
    "errors",
    "says",
    "hey",
    "box",
    "object",
    "increment",
    "function",
    "crazy",
    "know",
    "talking",
    "good",
    "want",
    "let",
    "delete",
    "line",
    "box",
    "v2",
    "even",
    "quick",
    "little",
    "upgrade",
    "need",
    "call",
    "upgrade",
    "function",
    "basically",
    "call",
    "upgrade",
    "function",
    "right",
    "depending",
    "added",
    "axy",
    "admin",
    "contract",
    "using",
    "initializer",
    "function",
    "might",
    "couple",
    "different",
    "ways",
    "go",
    "like",
    "wrap",
    "everything",
    "upgrade",
    "function",
    "see",
    "mean",
    "second",
    "like",
    "going",
    "pop",
    "helpful",
    "scripts",
    "going",
    "create",
    "new",
    "one",
    "called",
    "upgrade",
    "parameters",
    "course",
    "going",
    "take",
    "type",
    "account",
    "something",
    "account",
    "deploy",
    "going",
    "use",
    "proxy",
    "going",
    "proxy",
    "contract",
    "going",
    "proxy",
    "contract",
    "going",
    "need",
    "new",
    "implementation",
    "address",
    "going",
    "need",
    "proxy",
    "admin",
    "contract",
    "could",
    "none",
    "us",
    "going",
    "one",
    "could",
    "none",
    "going",
    "initializer",
    "also",
    "could",
    "none",
    "going",
    "args",
    "initializer",
    "also",
    "could",
    "none",
    "star",
    "special",
    "thing",
    "python",
    "says",
    "number",
    "arguments",
    "get",
    "stored",
    "list",
    "called",
    "arcs",
    "perfect",
    "going",
    "function",
    "going",
    "take",
    "care",
    "everything",
    "us",
    "first",
    "thing",
    "let",
    "check",
    "see",
    "proxy",
    "admin",
    "contract",
    "say",
    "proxy",
    "admin",
    "contract",
    "want",
    "check",
    "see",
    "initializer",
    "going",
    "first",
    "going",
    "want",
    "encode",
    "function",
    "data",
    "course",
    "say",
    "encoded",
    "function",
    "call",
    "equals",
    "encode",
    "function",
    "data",
    "initializer",
    "star",
    "args",
    "going",
    "encoded",
    "initializer",
    "function",
    "actually",
    "let",
    "start",
    "blank",
    "transaction",
    "equals",
    "none",
    "say",
    "transaction",
    "equals",
    "proxy",
    "admin",
    "contract",
    "since",
    "using",
    "one",
    "proxy",
    "admin",
    "contracts",
    "since",
    "detected",
    "one",
    "dot",
    "upgrade",
    "call",
    "since",
    "also",
    "initializer",
    "going",
    "pass",
    "proxy",
    "address",
    "new",
    "implementation",
    "address",
    "encoded",
    "function",
    "call",
    "course",
    "account",
    "upgrade",
    "call",
    "look",
    "proxy",
    "admin",
    "upgrade",
    "call",
    "function",
    "right",
    "proxy",
    "admin",
    "calls",
    "upgrade",
    "call",
    "proxy",
    "contract",
    "hopefully",
    "let",
    "boggy",
    "little",
    "bit",
    "kind",
    "lot",
    "mix",
    "matching",
    "going",
    "going",
    "oop",
    "sorry",
    "encoded",
    "function",
    "call",
    "encoded",
    "function",
    "data",
    "great",
    "initializer",
    "well",
    "well",
    "need",
    "encode",
    "function",
    "call",
    "say",
    "transaction",
    "equals",
    "proxy",
    "admin",
    "contract",
    "upgrade",
    "upgrade",
    "call",
    "also",
    "regular",
    "old",
    "upgrade",
    "call",
    "upgrade",
    "give",
    "proxy",
    "address",
    "new",
    "implementation",
    "address",
    "account",
    "proxy",
    "admin",
    "contract",
    "means",
    "admin",
    "going",
    "regular",
    "old",
    "wallet",
    "well",
    "well",
    "first",
    "check",
    "see",
    "initializer",
    "still",
    "need",
    "encode",
    "function",
    "call",
    "copy",
    "paste",
    "encoded",
    "call",
    "directly",
    "proxy",
    "contract",
    "going",
    "call",
    "exactly",
    "proxy",
    "admin",
    "contract",
    "calling",
    "going",
    "proxy",
    "upgrade",
    "call",
    "going",
    "give",
    "new",
    "implementation",
    "address",
    "encoded",
    "function",
    "call",
    "account",
    "let",
    "wrap",
    "big",
    "else",
    "proxy",
    "admin",
    "contract",
    "stuff",
    "else",
    "stuff",
    "initializer",
    "otherwise",
    "transaction",
    "equals",
    "proxy",
    "upgrade",
    "two",
    "add",
    "new",
    "implementation",
    "address",
    "count",
    "finally",
    "return",
    "transaction",
    "know",
    "lot",
    "really",
    "making",
    "upgrade",
    "function",
    "really",
    "general",
    "could",
    "always",
    "know",
    "okay",
    "going",
    "use",
    "proxy",
    "admin",
    "let",
    "like",
    "okay",
    "going",
    "use",
    "proxy",
    "admin",
    "also",
    "going",
    "use",
    "initializer",
    "great",
    "would",
    "look",
    "like",
    "essentially",
    "upgrade",
    "function",
    "go",
    "ahead",
    "use",
    "need",
    "give",
    "account",
    "proxy",
    "new",
    "implementation",
    "address",
    "say",
    "account",
    "say",
    "upgrade",
    "transaction",
    "equals",
    "upgrade",
    "account",
    "need",
    "proxy",
    "new",
    "implementation",
    "address",
    "going",
    "give",
    "proxy",
    "going",
    "give",
    "box",
    "b2",
    "address",
    "new",
    "address",
    "proxy",
    "admin",
    "contract",
    "say",
    "proxy",
    "admin",
    "contract",
    "equals",
    "proxy",
    "admin",
    "initializer",
    "leave",
    "part",
    "blank",
    "course",
    "need",
    "import",
    "upgrade",
    "function",
    "helpful",
    "scripts",
    "need",
    "print",
    "proxy",
    "upgraded",
    "could",
    "proxy",
    "box",
    "equals",
    "contract",
    "ai",
    "call",
    "box",
    "v2",
    "give",
    "proxy",
    "address",
    "box",
    "v2",
    "abi",
    "able",
    "call",
    "proxy",
    "box",
    "increment",
    "account",
    "print",
    "proxy",
    "box",
    "retrieve",
    "one",
    "actually",
    "see",
    "return",
    "two",
    "return",
    "two",
    "well",
    "original",
    "proxy",
    "box",
    "stored",
    "one",
    "started",
    "one",
    "upgraded",
    "new",
    "contract",
    "let",
    "actually",
    "weit",
    "course",
    "upgraded",
    "new",
    "contract",
    "right",
    "however",
    "storage",
    "contract",
    "stayed",
    "proxy",
    "one",
    "stayed",
    "proxy",
    "even",
    "though",
    "upgraded",
    "contract",
    "still",
    "one",
    "stored",
    "location",
    "storage",
    "call",
    "increment",
    "call",
    "retrieve",
    "going",
    "go",
    "one",
    "two",
    "let",
    "go",
    "ahead",
    "run",
    "brownie",
    "run",
    "scripts",
    "loy",
    "upgrade",
    "enter",
    "boom",
    "exactly",
    "see",
    "output",
    "incredibly",
    "incredibly",
    "powerful",
    "advanced",
    "feature",
    "gotten",
    "point",
    "border",
    "one",
    "powerful",
    "smart",
    "contract",
    "engineers",
    "planet",
    "huge",
    "congratulations",
    "getting",
    "far",
    "quite",
    "done",
    "course",
    "need",
    "write",
    "tests",
    "going",
    "make",
    "sure",
    "project",
    "always",
    "stays",
    "sync",
    "always",
    "stays",
    "dat",
    "let",
    "write",
    "couple",
    "tests",
    "let",
    "create",
    "new",
    "file",
    "call",
    "testbox",
    "proxy",
    "dopy",
    "really",
    "going",
    "test",
    "see",
    "contracts",
    "work",
    "going",
    "see",
    "box",
    "actually",
    "going",
    "work",
    "correctly",
    "let",
    "create",
    "new",
    "test",
    "def",
    "proxy",
    "delegates",
    "calls",
    "going",
    "make",
    "sure",
    "actually",
    "delegate",
    "calls",
    "contract",
    "going",
    "say",
    "account",
    "equals",
    "get",
    "account",
    "means",
    "got",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "going",
    "box",
    "equals",
    "box",
    "deoy",
    "course",
    "going",
    "account",
    "since",
    "using",
    "box",
    "going",
    "brownie",
    "import",
    "box",
    "going",
    "proxy",
    "admin",
    "going",
    "say",
    "proxy",
    "admin",
    "equals",
    "proxy",
    "admin",
    "deploy",
    "course",
    "count",
    "let",
    "import",
    "proxy",
    "admin",
    "brownie",
    "right",
    "box",
    "encoded",
    "initializer",
    "function",
    "whatever",
    "called",
    "going",
    "encode",
    "function",
    "data",
    "uh",
    "vs",
    "code",
    "actually",
    "automatically",
    "imported",
    "thanks",
    "vs",
    "code",
    "leaving",
    "blank",
    "uh",
    "actually",
    "going",
    "store",
    "going",
    "go",
    "ahead",
    "run",
    "deployment",
    "going",
    "say",
    "proxy",
    "equals",
    "trans",
    "parent",
    "upgradeable",
    "proxy",
    "going",
    "grab",
    "brownie",
    "deploy",
    "say",
    "box",
    "address",
    "proxy",
    "admin",
    "address",
    "box",
    "encoded",
    "initializer",
    "function",
    "say",
    "account",
    "give",
    "gas",
    "limit",
    "3",
    "1",
    "two",
    "3",
    "going",
    "put",
    "abi",
    "top",
    "proxy",
    "going",
    "say",
    "proxy",
    "box",
    "equals",
    "contract",
    "abi",
    "going",
    "name",
    "box",
    "going",
    "proxy",
    "address",
    "box",
    "abi",
    "course",
    "going",
    "need",
    "report",
    "contract",
    "brownie",
    "okay",
    "assert",
    "proxy",
    "box",
    "retrieve",
    "spelled",
    "right",
    "equal",
    "zero",
    "going",
    "proxy",
    "box",
    "store",
    "one",
    "account",
    "going",
    "assert",
    "proxy",
    "box",
    "retrieve",
    "equal",
    "one",
    "using",
    "proxy",
    "contract",
    "slapped",
    "ai",
    "top",
    "work",
    "testing",
    "see",
    "proxy",
    "working",
    "correctly",
    "go",
    "ahead",
    "test",
    "rounding",
    "test",
    "beautiful",
    "passed",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "script",
    "testing",
    "upgrades",
    "create",
    "new",
    "file",
    "call",
    "test",
    "box",
    "v2",
    "upgrades",
    "piy",
    "let",
    "call",
    "def",
    "test",
    "proxy",
    "upgrades",
    "account",
    "going",
    "equal",
    "get",
    "account",
    "hopefully",
    "point",
    "getting",
    "pretty",
    "good",
    "writing",
    "tests",
    "scripts",
    "helpful",
    "scripts",
    "report",
    "course",
    "want",
    "add",
    "nitpy",
    "case",
    "forgot",
    "going",
    "import",
    "get",
    "account",
    "perfect",
    "account",
    "see",
    "lot",
    "box",
    "equals",
    "box",
    "deploy",
    "deploy",
    "proxy",
    "admin",
    "would",
    "probably",
    "make",
    "sense",
    "one",
    "scripts",
    "write",
    "deploy",
    "three",
    "write",
    "function",
    "called",
    "like",
    "deploy",
    "something",
    "like",
    "guys",
    "want",
    "learn",
    "want",
    "improve",
    "upon",
    "would",
    "highly",
    "recommend",
    "go",
    "back",
    "make",
    "improvements",
    "really",
    "modularize",
    "time",
    "let",
    "keep",
    "going",
    "box",
    "deploy",
    "account",
    "since",
    "going",
    "brownie",
    "import",
    "box",
    "say",
    "proxy",
    "admin",
    "equals",
    "proxy",
    "admin",
    "deploy",
    "also",
    "account",
    "comma",
    "proxy",
    "admin",
    "going",
    "get",
    "initializer",
    "functions",
    "say",
    "box",
    "encoded",
    "initializer",
    "function",
    "equals",
    "encode",
    "function",
    "data",
    "going",
    "grab",
    "helpful",
    "scripts",
    "well",
    "going",
    "proxy",
    "proxy",
    "equals",
    "transparent",
    "gradable",
    "proxy",
    "deploy",
    "got",
    "import",
    "browny",
    "well",
    "oops",
    "twice",
    "though",
    "deploy",
    "going",
    "box",
    "set",
    "address",
    "proxy",
    "admin",
    "address",
    "box",
    "encoded",
    "initializer",
    "function",
    "account",
    "guas",
    "limit",
    "one",
    "two",
    "3",
    "one",
    "two",
    "three",
    "right",
    "proxy",
    "deployed",
    "already",
    "tested",
    "proxy",
    "works",
    "test",
    "box",
    "proxy",
    "going",
    "go",
    "ahead",
    "test",
    "going",
    "instead",
    "going",
    "deploy",
    "box",
    "v2",
    "going",
    "update",
    "proxy",
    "make",
    "sure",
    "everything",
    "still",
    "works",
    "going",
    "box",
    "v2",
    "equals",
    "box",
    "v2",
    "deploy",
    "going",
    "account",
    "course",
    "going",
    "say",
    "proxy",
    "box",
    "equals",
    "contract",
    "abi",
    "box",
    "v2",
    "roxy",
    "address",
    "box",
    "b2",
    "abi",
    "going",
    "grab",
    "brownie",
    "going",
    "try",
    "slapping",
    "abi",
    "onto",
    "proxy",
    "address",
    "going",
    "try",
    "call",
    "function",
    "box",
    "v2",
    "call",
    "however",
    "know",
    "like",
    "tested",
    "actually",
    "revert",
    "actually",
    "check",
    "reverts",
    "importing",
    "py",
    "test",
    "say",
    "py",
    "test",
    "raises",
    "know",
    "um",
    "brownie",
    "exception",
    "know",
    "type",
    "exception",
    "exceptions",
    "virtual",
    "machine",
    "error",
    "figure",
    "type",
    "error",
    "um",
    "running",
    "getting",
    "error",
    "actually",
    "brownie",
    "exceptions",
    "thing",
    "going",
    "actually",
    "also",
    "import",
    "exceptions",
    "brownie",
    "going",
    "say",
    "proxy",
    "box",
    "increment",
    "count",
    "saved",
    "everything",
    "sorry",
    "got",
    "formatted",
    "calling",
    "proxy",
    "box",
    "increment",
    "throw",
    "exceptions",
    "virtual",
    "machine",
    "error",
    "test",
    "pass",
    "throws",
    "error",
    "test",
    "want",
    "throw",
    "error",
    "first",
    "time",
    "call",
    "going",
    "upgrade",
    "call",
    "actually",
    "work",
    "going",
    "call",
    "upgrade",
    "count",
    "proxy",
    "box",
    "v2",
    "proxy",
    "admin",
    "contract",
    "equals",
    "proxy",
    "admin",
    "going",
    "need",
    "grab",
    "upgrade",
    "helpful",
    "scripts",
    "actually",
    "able",
    "call",
    "increment",
    "proxy",
    "box",
    "first",
    "quick",
    "assert",
    "proxy",
    "box",
    "retrieve",
    "equals",
    "z",
    "proxy",
    "box",
    "increment",
    "account",
    "assert",
    "proxy",
    "box",
    "retrieve",
    "one",
    "deploying",
    "box",
    "deploying",
    "proxy",
    "everything",
    "around",
    "deploying",
    "v",
    "tool",
    "implementation",
    "trying",
    "call",
    "increment",
    "wo",
    "work",
    "upgrade",
    "proxy",
    "new",
    "address",
    "go",
    "ahead",
    "call",
    "increment",
    "actually",
    "increment",
    "box",
    "let",
    "go",
    "ahead",
    "run",
    "test",
    "rny",
    "run",
    "test",
    "excuse",
    "ry",
    "k",
    "grab",
    "paste",
    "done",
    "tests",
    "working",
    "correctly",
    "know",
    "box",
    "working",
    "correctly",
    "awesome",
    "great",
    "job",
    "like",
    "said",
    "incredibly",
    "incredibly",
    "powerful",
    "feature",
    "able",
    "upgrades",
    "comes",
    "lot",
    "risk",
    "least",
    "form",
    "centralization",
    "risk",
    "wallet",
    "controls",
    "proxy",
    "means",
    "application",
    "centralized",
    "full",
    "stop",
    "going",
    "deploy",
    "anything",
    "proxies",
    "mainnet",
    "absolutely",
    "absolutely",
    "sure",
    "get",
    "audited",
    "beforehand",
    "close",
    "project",
    "let",
    "actually",
    "deploy",
    "actual",
    "test",
    "net",
    "see",
    "everything",
    "goes",
    "call",
    "deploy",
    "upgrade",
    "let",
    "go",
    "ahead",
    "let",
    "pop",
    "emv",
    "file",
    "let",
    "paste",
    "variables",
    "need",
    "private",
    "key",
    "web",
    "3",
    "inferior",
    "project",
    "id",
    "ether",
    "scan",
    "token",
    "awesome",
    "let",
    "even",
    "let",
    "even",
    "publish",
    "source",
    "contracts",
    "see",
    "ether",
    "scan",
    "box",
    "going",
    "little",
    "comma",
    "say",
    "publish",
    "source",
    "equals",
    "true",
    "going",
    "copy",
    "comma",
    "publish",
    "source",
    "equals",
    "true",
    "paste",
    "deployments",
    "source",
    "true",
    "publish",
    "source",
    "equals",
    "true",
    "admin",
    "initial",
    "transparent",
    "upgradeable",
    "proxy",
    "box",
    "v2",
    "deployment",
    "got",
    "ether",
    "scan",
    "token",
    "web",
    "3",
    "inf",
    "fura",
    "private",
    "key",
    "brownie",
    "config",
    "indeed",
    "pulling",
    "private",
    "key",
    "myv",
    "hasv",
    "let",
    "check",
    "see",
    "wallet",
    "r",
    "perfect",
    "let",
    "brownie",
    "run",
    "scripts",
    "deploy",
    "upgrade",
    "network",
    "rink",
    "b",
    "right",
    "looks",
    "like",
    "couple",
    "contracts",
    "able",
    "actually",
    "verify",
    "couple",
    "bugs",
    "worked",
    "verifications",
    "going",
    "ignore",
    "ones",
    "able",
    "verified",
    "let",
    "go",
    "ahead",
    "grab",
    "addresses",
    "pop",
    "onto",
    "rinky",
    "ether",
    "scan",
    "see",
    "happened",
    "box",
    "implementation",
    "let",
    "grab",
    "address",
    "let",
    "paste",
    "rinky",
    "testet",
    "ether",
    "scan",
    "awesome",
    "exactly",
    "contract",
    "verified",
    "exactly",
    "code",
    "see",
    "contract",
    "creation",
    "exactly",
    "correct",
    "call",
    "store",
    "function",
    "actually",
    "going",
    "get",
    "stored",
    "never",
    "actually",
    "called",
    "functions",
    "directly",
    "contract",
    "deploy",
    "makes",
    "perfect",
    "sense",
    "let",
    "go",
    "check",
    "proxy",
    "admin",
    "second",
    "address",
    "second",
    "contract",
    "deployed",
    "sadly",
    "one",
    "get",
    "verified",
    "however",
    "see",
    "indeed",
    "call",
    "upgrade",
    "function",
    "point",
    "makes",
    "lot",
    "sense",
    "look",
    "script",
    "proxy",
    "admin",
    "upgrade",
    "code",
    "since",
    "proxy",
    "admin",
    "contract",
    "call",
    "upgrade",
    "function",
    "perfect",
    "makes",
    "sense",
    "let",
    "go",
    "transparent",
    "upgradeable",
    "proxy",
    "going",
    "interesting",
    "one",
    "applications",
    "interestingly",
    "enough",
    "look",
    "contract",
    "see",
    "store",
    "increment",
    "called",
    "contract",
    "box",
    "proxy",
    "going",
    "call",
    "functions",
    "make",
    "contracts",
    "gradable",
    "internal",
    "transactions",
    "calls",
    "another",
    "smart",
    "contract",
    "made",
    "transaction",
    "look",
    "couple",
    "see",
    "click",
    "increment",
    "called",
    "another",
    "contract",
    "makes",
    "sense",
    "upgrade",
    "called",
    "proxy",
    "admin",
    "also",
    "course",
    "store",
    "called",
    "another",
    "contract",
    "verified",
    "would",
    "able",
    "see",
    "ether",
    "scan",
    "recogniz",
    "proxy",
    "contract",
    "well",
    "hopefully",
    "work",
    "able",
    "verify",
    "well",
    "big",
    "deal",
    "always",
    "manually",
    "later",
    "incredibly",
    "powerful",
    "project",
    "worked",
    "right",
    "maybe",
    "take",
    "nap",
    "maybe",
    "go",
    "walk",
    "get",
    "food",
    "get",
    "drink",
    "last",
    "coding",
    "project",
    "want",
    "say",
    "project",
    "considered",
    "bonus",
    "going",
    "going",
    "quickly",
    "front",
    "end",
    "pieces",
    "going",
    "take",
    "building",
    "blocks",
    "learned",
    "build",
    "amazing",
    "full",
    "stack",
    "application",
    "gear",
    "get",
    "ready",
    "let",
    "jump",
    "bonus",
    "project",
    "finish",
    "going",
    "close",
    "everything",
    "final",
    "quick",
    "section",
    "security",
    "future",
    "thank",
    "joining",
    "course",
    "let",
    "last",
    "one",
    "right",
    "moving",
    "final",
    "project",
    "going",
    "advanced",
    "projects",
    "combine",
    "knowledge",
    "learned",
    "far",
    "one",
    "project",
    "additionally",
    "going",
    "put",
    "front",
    "end",
    "user",
    "interface",
    "onto",
    "project",
    "build",
    "applications",
    "going",
    "need",
    "way",
    "nevs",
    "actually",
    "interact",
    "meaningful",
    "way",
    "react",
    "tutorial",
    "course",
    "although",
    "explaining",
    "choices",
    "made",
    "actually",
    "able",
    "follow",
    "along",
    "fine",
    "even",
    "experience",
    "looking",
    "full",
    "tutorial",
    "freec",
    "code",
    "camp",
    "amazing",
    "videos",
    "absolutely",
    "try",
    "right",
    "welcome",
    "back",
    "everybody",
    "going",
    "embarking",
    "exciting",
    "end",
    "endend",
    "going",
    "take",
    "everything",
    "learned",
    "wrap",
    "together",
    "single",
    "last",
    "application",
    "also",
    "going",
    "learning",
    "development",
    "going",
    "building",
    "front",
    "end",
    "top",
    "application",
    "top",
    "contracts",
    "frontend",
    "tutorial",
    "however",
    "fre",
    "cod",
    "camp",
    "wonderful",
    "wonderful",
    "react",
    "tutorials",
    "going",
    "teaching",
    "guys",
    "enough",
    "go",
    "ahead",
    "jump",
    "build",
    "simple",
    "also",
    "kind",
    "nice",
    "looking",
    "front",
    "ends",
    "top",
    "whatever",
    "contracts",
    "want",
    "users",
    "actually",
    "interact",
    "applications",
    "interact",
    "contracts",
    "building",
    "usable",
    "front",
    "end",
    "really",
    "important",
    "piece",
    "let",
    "take",
    "quick",
    "walkr",
    "application",
    "going",
    "look",
    "like",
    "front",
    "end",
    "application",
    "going",
    "allow",
    "users",
    "going",
    "allow",
    "users",
    "stake",
    "deposit",
    "tokens",
    "called",
    "token",
    "farm",
    "contract",
    "token",
    "deposited",
    "kind",
    "go",
    "get",
    "creative",
    "want",
    "tokens",
    "could",
    "use",
    "staking",
    "governance",
    "could",
    "use",
    "could",
    "go",
    "ahead",
    "invest",
    "something",
    "like",
    "another",
    "d5",
    "protocol",
    "gain",
    "interest",
    "could",
    "build",
    "yield",
    "aggregator",
    "ton",
    "ton",
    "different",
    "features",
    "actually",
    "users",
    "stake",
    "tokens",
    "would",
    "ui",
    "side",
    "little",
    "button",
    "go",
    "ahead",
    "click",
    "connect",
    "metamask",
    "going",
    "pop",
    "automatically",
    "going",
    "sign",
    "going",
    "connect",
    "metamask",
    "user",
    "interface",
    "look",
    "metamask",
    "coen",
    "test",
    "network",
    "see",
    "indeed",
    "connected",
    "stake",
    "tokens",
    "contract",
    "currently",
    "three",
    "different",
    "types",
    "tokens",
    "platform",
    "allows",
    "stake",
    "wrapped",
    "ether",
    "fiu",
    "mimicking",
    "die",
    "test",
    "network",
    "dap",
    "token",
    "dap",
    "token",
    "going",
    "reward",
    "token",
    "platform",
    "gives",
    "users",
    "incentive",
    "staking",
    "platform",
    "stake",
    "actually",
    "unstake",
    "really",
    "go",
    "ahead",
    "stake",
    "maybe",
    "stake",
    "10",
    "dap",
    "hit",
    "stake",
    "minim",
    "mask",
    "pop",
    "approve",
    "function",
    "first",
    "approved",
    "function",
    "gets",
    "called",
    "get",
    "really",
    "nice",
    "little",
    "waiting",
    "bar",
    "approved",
    "get",
    "notification",
    "saying",
    "transfer",
    "approved",
    "go",
    "ahead",
    "confirm",
    "staking",
    "get",
    "little",
    "loading",
    "bar",
    "staked",
    "see",
    "popup",
    "says",
    "tokens",
    "staked",
    "successfully",
    "go",
    "token",
    "farm",
    "contract",
    "see",
    "10",
    "dap",
    "token",
    "staked",
    "also",
    "unstake",
    "thing",
    "admins",
    "wallet",
    "actually",
    "issue",
    "reward",
    "users",
    "based",
    "much",
    "much",
    "staked",
    "see",
    "right",
    "95",
    "dap",
    "token",
    "10",
    "dap",
    "token",
    "staked",
    "back",
    "end",
    "going",
    "run",
    "issue",
    "token",
    "script",
    "going",
    "send",
    "users",
    "stake",
    "little",
    "bit",
    "dap",
    "token",
    "reward",
    "see",
    "updated",
    "given",
    "little",
    "bit",
    "dap",
    "token",
    "resembles",
    "amount",
    "dap",
    "token",
    "staked",
    "way",
    "figure",
    "value",
    "different",
    "tokens",
    "using",
    "course",
    "chain",
    "price",
    "feeds",
    "course",
    "unstake",
    "everything",
    "see",
    "tokens",
    "unstaked",
    "successfully",
    "going",
    "build",
    "going",
    "go",
    "unstaking",
    "portion",
    "front",
    "end",
    "application",
    "would",
    "look",
    "like",
    "go",
    "ahead",
    "finished",
    "building",
    "front",
    "end",
    "full",
    "repository",
    "entire",
    "front",
    "end",
    "unstaking",
    "piece",
    "simplicity",
    "going",
    "skip",
    "unstaking",
    "bit",
    "let",
    "go",
    "ahead",
    "get",
    "started",
    "going",
    "go",
    "ahead",
    "make",
    "new",
    "directory",
    "called",
    "d5",
    "stake",
    "yield",
    "brownie",
    "going",
    "open",
    "new",
    "text",
    "editor",
    "first",
    "thing",
    "course",
    "want",
    "work",
    "going",
    "contract",
    "remember",
    "always",
    "start",
    "brownie",
    "knit",
    "start",
    "chain",
    "link",
    "mix",
    "going",
    "go",
    "ah",
    "start",
    "brownie",
    "knit",
    "perfect",
    "setup",
    "right",
    "first",
    "thing",
    "going",
    "going",
    "make",
    "dap",
    "token",
    "going",
    "token",
    "going",
    "give",
    "users",
    "staking",
    "platform",
    "reward",
    "token",
    "might",
    "heard",
    "yield",
    "farming",
    "liquidity",
    "mining",
    "token",
    "allows",
    "users",
    "actually",
    "engage",
    "participate",
    "regular",
    "old",
    "erc20",
    "guys",
    "already",
    "know",
    "done",
    "one",
    "even",
    "going",
    "use",
    "latest",
    "greatest",
    "solidity",
    "remember",
    "said",
    "going",
    "get",
    "really",
    "good",
    "bouncing",
    "around",
    "solidity",
    "versions",
    "one",
    "going",
    "everything",
    "eight",
    "let",
    "go",
    "ahead",
    "going",
    "pragma",
    "solidity",
    "going",
    "exact",
    "way",
    "made",
    "erc20",
    "token",
    "going",
    "go",
    "ahead",
    "use",
    "open",
    "zeppelin",
    "even",
    "copy",
    "paste",
    "import",
    "documentation",
    "write",
    "import",
    "open",
    "zeppelin",
    "slc",
    "contracts",
    "sl",
    "token",
    "erc20",
    "erc20",
    "soul",
    "guessed",
    "using",
    "open",
    "zeppelin",
    "syntax",
    "going",
    "make",
    "new",
    "file",
    "rting",
    "going",
    "make",
    "dependencies",
    "open",
    "zeppelin",
    "slopen",
    "zeppelin",
    "contracts",
    "time",
    "going",
    "actually",
    "use",
    "version",
    "four",
    "find",
    "everything",
    "package",
    "going",
    "open",
    "zeppin",
    "slopen",
    "zeppin",
    "contracts",
    "github",
    "compiler",
    "sulk",
    "remappings",
    "open",
    "zeppelin",
    "equals",
    "part",
    "right",
    "paste",
    "okay",
    "great",
    "go",
    "back",
    "dap",
    "token",
    "basic",
    "erc20",
    "bits",
    "contract",
    "dap",
    "token",
    "erc20",
    "give",
    "constructor",
    "public",
    "erc20",
    "call",
    "dep",
    "token",
    "give",
    "symbol",
    "dep",
    "give",
    "initial",
    "supply",
    "well",
    "call",
    "mint",
    "function",
    "set",
    "message",
    "sender",
    "owner",
    "give",
    "initial",
    "supply",
    "1",
    "million",
    "one",
    "1",
    "two",
    "3",
    "one",
    "two",
    "three",
    "plus",
    "18",
    "zeros",
    "1",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "10",
    "1",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "first",
    "contract",
    "try",
    "compile",
    "brownie",
    "compile",
    "looks",
    "like",
    "worked",
    "great",
    "going",
    "go",
    "create",
    "interesting",
    "contract",
    "token",
    "farm",
    "even",
    "take",
    "quick",
    "second",
    "figure",
    "want",
    "able",
    "well",
    "want",
    "able",
    "stake",
    "tokens",
    "unstake",
    "tokens",
    "issue",
    "tokens",
    "going",
    "issuing",
    "token",
    "rewards",
    "probably",
    "going",
    "want",
    "add",
    "allowed",
    "tokens",
    "add",
    "tokens",
    "allowed",
    "staked",
    "contract",
    "probably",
    "going",
    "want",
    "type",
    "get",
    "f",
    "value",
    "function",
    "actually",
    "get",
    "value",
    "underlying",
    "stak",
    "tokens",
    "platform",
    "mind",
    "let",
    "move",
    "know",
    "drill",
    "pragma",
    "solidity",
    "carat",
    "going",
    "going",
    "close",
    "contract",
    "token",
    "farm",
    "contract",
    "token",
    "farm",
    "let",
    "forget",
    "pdx",
    "license",
    "identifier",
    "mit",
    "well",
    "let",
    "go",
    "ahead",
    "start",
    "staking",
    "tokens",
    "right",
    "going",
    "important",
    "piece",
    "application",
    "going",
    "function",
    "stake",
    "tokens",
    "probably",
    "want",
    "stake",
    "amount",
    "token",
    "probably",
    "want",
    "stake",
    "certain",
    "address",
    "token",
    "amount",
    "token",
    "couple",
    "things",
    "need",
    "keep",
    "mind",
    "tokens",
    "stake",
    "much",
    "stake",
    "first",
    "two",
    "questions",
    "application",
    "going",
    "say",
    "stake",
    "amount",
    "greater",
    "zero",
    "even",
    "add",
    "require",
    "amount",
    "greater",
    "zero",
    "say",
    "amount",
    "must",
    "zero",
    "since",
    "using",
    "version",
    "eight",
    "worry",
    "anything",
    "safe",
    "math",
    "awesome",
    "go",
    "ahead",
    "stuff",
    "like",
    "want",
    "certain",
    "specific",
    "tokens",
    "staked",
    "platform",
    "could",
    "say",
    "require",
    "token",
    "allowed",
    "something",
    "effect",
    "might",
    "actually",
    "create",
    "token",
    "allowed",
    "function",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "token",
    "allowed",
    "take",
    "token",
    "address",
    "make",
    "public",
    "function",
    "return",
    "boolean",
    "return",
    "true",
    "token",
    "allowed",
    "false",
    "allowed",
    "know",
    "token",
    "actually",
    "allowed",
    "probably",
    "want",
    "list",
    "mapping",
    "tokens",
    "whether",
    "allowed",
    "learned",
    "probably",
    "learn",
    "definitely",
    "lists",
    "mappings",
    "simplicity",
    "sake",
    "going",
    "stick",
    "list",
    "going",
    "create",
    "address",
    "array",
    "make",
    "public",
    "called",
    "allowed",
    "token",
    "list",
    "different",
    "allowed",
    "tokens",
    "token",
    "allowed",
    "function",
    "loop",
    "list",
    "see",
    "token",
    "loop",
    "four",
    "un",
    "256",
    "allow",
    "tokens",
    "index",
    "equals",
    "zero",
    "allowed",
    "tokens",
    "index",
    "less",
    "allowed",
    "tokens",
    "length",
    "allowed",
    "tokens",
    "index",
    "going",
    "loop",
    "list",
    "going",
    "say",
    "allowed",
    "tokens",
    "allowed",
    "tokens",
    "index",
    "equals",
    "music",
    "equals",
    "token",
    "going",
    "return",
    "true",
    "otherwise",
    "get",
    "whole",
    "loop",
    "find",
    "token",
    "going",
    "return",
    "false",
    "way",
    "check",
    "see",
    "allow",
    "tokens",
    "let",
    "actually",
    "write",
    "function",
    "add",
    "alloud",
    "tokens",
    "function",
    "add",
    "alloud",
    "tokens",
    "address",
    "token",
    "public",
    "function",
    "allowed",
    "tokens",
    "push",
    "onto",
    "array",
    "adding",
    "allowed",
    "tokens",
    "probably",
    "something",
    "want",
    "admin",
    "wallet",
    "owner",
    "contract",
    "add",
    "owner",
    "modifier",
    "function",
    "make",
    "token",
    "farm",
    "ownable",
    "ownable",
    "import",
    "open",
    "zeppelin",
    "import",
    "open",
    "zeppin",
    "contracts",
    "access",
    "ownable",
    "doso",
    "quick",
    "compile",
    "great",
    "things",
    "compiled",
    "fantastically",
    "little",
    "bit",
    "functionality",
    "might",
    "good",
    "time",
    "actually",
    "go",
    "ahead",
    "start",
    "writing",
    "tests",
    "want",
    "since",
    "know",
    "going",
    "change",
    "constructor",
    "little",
    "bit",
    "going",
    "change",
    "little",
    "bit",
    "actually",
    "formatted",
    "going",
    "keep",
    "going",
    "might",
    "great",
    "time",
    "hm",
    "start",
    "writing",
    "tests",
    "application",
    "know",
    "going",
    "tests",
    "later",
    "anyways",
    "though",
    "right",
    "great",
    "case",
    "two",
    "functions",
    "go",
    "ahead",
    "actually",
    "start",
    "checking",
    "see",
    "tokens",
    "stakers",
    "going",
    "stake",
    "actually",
    "allowed",
    "going",
    "add",
    "require",
    "statement",
    "require",
    "token",
    "allowed",
    "token",
    "otherwise",
    "say",
    "token",
    "currently",
    "allowed",
    "perfect",
    "two",
    "required",
    "statements",
    "answer",
    "questions",
    "tokens",
    "stake",
    "much",
    "stake",
    "call",
    "transfer",
    "function",
    "erc20",
    "remember",
    "erc20",
    "remember",
    "er",
    "c20s",
    "two",
    "transfer",
    "type",
    "functions",
    "transfer",
    "also",
    "transfer",
    "transfer",
    "works",
    "called",
    "wallet",
    "owns",
    "tokens",
    "token",
    "transfer",
    "call",
    "approve",
    "first",
    "going",
    "call",
    "transfer",
    "going",
    "call",
    "transfer",
    "function",
    "erc20",
    "since",
    "token",
    "farm",
    "contract",
    "one",
    "owns",
    "erc20",
    "also",
    "also",
    "avi",
    "actually",
    "call",
    "transfer",
    "function",
    "going",
    "need",
    "ic20",
    "interface",
    "could",
    "go",
    "ahead",
    "pop",
    "could",
    "also",
    "make",
    "ec20",
    "contract",
    "could",
    "also",
    "grab",
    "open",
    "zeppelin",
    "import",
    "open",
    "zeppelin",
    "sl",
    "contracts",
    "sl",
    "token",
    "erc20",
    "ic20",
    "soul",
    "using",
    "interface",
    "need",
    "whole",
    "contract",
    "anyways",
    "let",
    "wrap",
    "ic20",
    "let",
    "wrap",
    "token",
    "address",
    "erc20",
    "token",
    "abi",
    "via",
    "interface",
    "address",
    "call",
    "transfer",
    "message",
    "sender",
    "send",
    "token",
    "farm",
    "contract",
    "whoever",
    "calls",
    "stake",
    "tokens",
    "token",
    "farm",
    "contract",
    "send",
    "amount",
    "perfect",
    "need",
    "keep",
    "track",
    "much",
    "tokens",
    "actually",
    "sent",
    "us",
    "going",
    "want",
    "create",
    "type",
    "mapping",
    "mapping",
    "going",
    "map",
    "token",
    "address",
    "staker",
    "address",
    "amount",
    "way",
    "keep",
    "track",
    "much",
    "token",
    "staker",
    "staked",
    "mapping",
    "per",
    "token",
    "per",
    "staker",
    "per",
    "amount",
    "call",
    "mapping",
    "token",
    "address",
    "going",
    "get",
    "mapped",
    "another",
    "mapping",
    "user",
    "addresses",
    "gets",
    "mapped",
    "un",
    "256",
    "mapping",
    "token",
    "address",
    "staker",
    "address",
    "amount",
    "make",
    "public",
    "mapping",
    "call",
    "staking",
    "balance",
    "mapping",
    "stake",
    "token",
    "function",
    "say",
    "staking",
    "balance",
    "token",
    "message",
    "sender",
    "going",
    "equal",
    "whatever",
    "balance",
    "plus",
    "amount",
    "right",
    "great",
    "way",
    "users",
    "stake",
    "different",
    "tokens",
    "actually",
    "allowed",
    "stake",
    "platform",
    "awesome",
    "work",
    "want",
    "able",
    "next",
    "want",
    "unstake",
    "tokens",
    "want",
    "able",
    "issue",
    "reward",
    "want",
    "able",
    "get",
    "eth",
    "value",
    "based",
    "reward",
    "typically",
    "might",
    "want",
    "unstake",
    "tokens",
    "bit",
    "first",
    "however",
    "know",
    "actually",
    "going",
    "need",
    "additional",
    "functionality",
    "stake",
    "tokens",
    "function",
    "us",
    "actually",
    "issue",
    "tokens",
    "properly",
    "let",
    "go",
    "ahead",
    "issue",
    "tokens",
    "bit",
    "remember",
    "issue",
    "tokens",
    "reward",
    "giving",
    "users",
    "use",
    "platform",
    "want",
    "issue",
    "tokens",
    "based",
    "value",
    "underlying",
    "tokens",
    "given",
    "us",
    "example",
    "maybe",
    "deposited",
    "100",
    "eth",
    "want",
    "ratio",
    "one",
    "one",
    "every",
    "one",
    "eth",
    "give",
    "one",
    "dap",
    "token",
    "pretty",
    "easy",
    "us",
    "figure",
    "however",
    "let",
    "say",
    "50",
    "eth",
    "50",
    "die",
    "staked",
    "want",
    "give",
    "reward",
    "one",
    "dap",
    "one",
    "dap",
    "token",
    "per",
    "one",
    "die",
    "well",
    "convert",
    "eth",
    "die",
    "know",
    "conversion",
    "ratio",
    "dap",
    "token",
    "problem",
    "going",
    "work",
    "let",
    "create",
    "function",
    "called",
    "issue",
    "tokens",
    "going",
    "function",
    "callable",
    "owner",
    "admin",
    "contract",
    "actually",
    "go",
    "ahead",
    "issue",
    "tokens",
    "well",
    "first",
    "thought",
    "would",
    "loop",
    "list",
    "stakers",
    "right",
    "list",
    "stakers",
    "mapping",
    "stakers",
    "list",
    "allowed",
    "tokens",
    "well",
    "probably",
    "going",
    "need",
    "list",
    "stakers",
    "address",
    "array",
    "ca",
    "loop",
    "mapping",
    "address",
    "array",
    "make",
    "public",
    "called",
    "stakers",
    "list",
    "different",
    "stakers",
    "platform",
    "somebody",
    "stakes",
    "token",
    "going",
    "update",
    "list",
    "want",
    "make",
    "sure",
    "added",
    "already",
    "list",
    "order",
    "us",
    "get",
    "idea",
    "many",
    "unique",
    "tokens",
    "user",
    "actually",
    "going",
    "create",
    "function",
    "called",
    "update",
    "unique",
    "tokens",
    "stak",
    "message",
    "sender",
    "token",
    "function",
    "going",
    "going",
    "get",
    "good",
    "idea",
    "many",
    "unique",
    "tokens",
    "user",
    "user",
    "one",
    "unique",
    "token",
    "add",
    "list",
    "one",
    "know",
    "know",
    "already",
    "added",
    "list",
    "need",
    "add",
    "let",
    "create",
    "function",
    "update",
    "unique",
    "token",
    "state",
    "input",
    "address",
    "user",
    "address",
    "token",
    "make",
    "internal",
    "function",
    "contract",
    "call",
    "function",
    "say",
    "staking",
    "balance",
    "let",
    "even",
    "little",
    "underscores",
    "token",
    "user",
    "less",
    "equal",
    "zero",
    "going",
    "update",
    "unique",
    "tokens",
    "staked",
    "mapping",
    "say",
    "unique",
    "tokens",
    "stak",
    "user",
    "going",
    "equal",
    "unique",
    "token",
    "staker",
    "user",
    "plus",
    "one",
    "since",
    "new",
    "mapping",
    "called",
    "unique",
    "token",
    "stak",
    "make",
    "well",
    "mapping",
    "address",
    "un",
    "256",
    "public",
    "called",
    "unique",
    "tokens",
    "stak",
    "way",
    "know",
    "many",
    "different",
    "tokens",
    "one",
    "addresses",
    "actually",
    "staked",
    "better",
    "idea",
    "unique",
    "tokens",
    "one",
    "users",
    "staked",
    "figure",
    "whether",
    "want",
    "push",
    "onto",
    "stakers",
    "list",
    "already",
    "want",
    "push",
    "want",
    "push",
    "say",
    "unique",
    "token",
    "state",
    "message",
    "sender",
    "equal",
    "one",
    "one",
    "unique",
    "token",
    "staked",
    "first",
    "unique",
    "token",
    "going",
    "add",
    "stakers",
    "list",
    "say",
    "stakers",
    "push",
    "message",
    "sender",
    "going",
    "completed",
    "stake",
    "tokens",
    "function",
    "add",
    "little",
    "extra",
    "functionality",
    "unique",
    "tokens",
    "figure",
    "actually",
    "issue",
    "reward",
    "list",
    "going",
    "get",
    "updated",
    "also",
    "get",
    "updated",
    "unstake",
    "loop",
    "list",
    "stakers",
    "say",
    "four",
    "256",
    "stakers",
    "index",
    "equals",
    "zero",
    "stakers",
    "index",
    "less",
    "stakers",
    "length",
    "stakers",
    "index",
    "going",
    "issue",
    "tokens",
    "going",
    "say",
    "address",
    "recipient",
    "equals",
    "sakers",
    "sers",
    "index",
    "one",
    "time",
    "going",
    "loop",
    "grab",
    "recipients",
    "going",
    "send",
    "token",
    "reward",
    "based",
    "total",
    "value",
    "locked",
    "got",
    "couple",
    "things",
    "send",
    "token",
    "reward",
    "figure",
    "actually",
    "send",
    "token",
    "also",
    "get",
    "total",
    "value",
    "locked",
    "let",
    "send",
    "token",
    "reward",
    "going",
    "dap",
    "token",
    "created",
    "beginning",
    "going",
    "dap",
    "token",
    "right",
    "deploy",
    "contract",
    "need",
    "know",
    "reward",
    "token",
    "actually",
    "going",
    "right",
    "top",
    "actually",
    "g",
    "actually",
    "going",
    "move",
    "array",
    "kind",
    "nicely",
    "together",
    "need",
    "need",
    "create",
    "constructor",
    "right",
    "deploy",
    "contract",
    "need",
    "know",
    "address",
    "dap",
    "token",
    "address",
    "reward",
    "token",
    "going",
    "give",
    "say",
    "constructor",
    "passed",
    "address",
    "dap",
    "token",
    "address",
    "public",
    "function",
    "store",
    "dap",
    "token",
    "global",
    "variable",
    "say",
    "ic20",
    "since",
    "already",
    "importing",
    "public",
    "dap",
    "token",
    "set",
    "dap",
    "token",
    "equals",
    "ic20",
    "dap",
    "token",
    "address",
    "dap",
    "token",
    "associated",
    "address",
    "call",
    "functions",
    "example",
    "call",
    "dap",
    "token",
    "transfer",
    "call",
    "transfer",
    "token",
    "farm",
    "contract",
    "going",
    "contract",
    "actually",
    "holds",
    "db",
    "tokens",
    "going",
    "send",
    "token",
    "recipient",
    "course",
    "much",
    "going",
    "send",
    "right",
    "much",
    "token",
    "going",
    "send",
    "well",
    "need",
    "function",
    "get",
    "total",
    "value",
    "going",
    "say",
    "256",
    "user",
    "total",
    "value",
    "equals",
    "function",
    "right",
    "go",
    "ahead",
    "define",
    "right",
    "call",
    "function",
    "get",
    "user",
    "total",
    "value",
    "right",
    "get",
    "recipient",
    "total",
    "value",
    "whatever",
    "want",
    "say",
    "pop",
    "recipient",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "call",
    "function",
    "get",
    "user",
    "total",
    "value",
    "address",
    "user",
    "lot",
    "looping",
    "right",
    "got",
    "got",
    "find",
    "much",
    "token",
    "actually",
    "lot",
    "protocols",
    "instead",
    "actually",
    "sending",
    "issuing",
    "tokens",
    "actually",
    "internal",
    "method",
    "allows",
    "people",
    "go",
    "claim",
    "tokens",
    "right",
    "probably",
    "seen",
    "people",
    "claiming",
    "airdrops",
    "lot",
    "gas",
    "efficient",
    "users",
    "claim",
    "aird",
    "dropped",
    "instead",
    "application",
    "actually",
    "issuing",
    "tokens",
    "right",
    "going",
    "gas",
    "expensive",
    "looping",
    "addresses",
    "checking",
    "addresses",
    "right",
    "going",
    "though",
    "wonderful",
    "amazing",
    "protocol",
    "want",
    "give",
    "users",
    "best",
    "experience",
    "case",
    "going",
    "public",
    "view",
    "function",
    "return",
    "un",
    "256",
    "right",
    "want",
    "return",
    "total",
    "value",
    "issue",
    "tokens",
    "function",
    "actually",
    "get",
    "started",
    "well",
    "let",
    "create",
    "unit",
    "256",
    "total",
    "value",
    "set",
    "start",
    "zero",
    "let",
    "even",
    "start",
    "quick",
    "require",
    "statement",
    "right",
    "want",
    "require",
    "unique",
    "token",
    "state",
    "user",
    "going",
    "greater",
    "zero",
    "right",
    "say",
    "tokens",
    "stake",
    "right",
    "value",
    "going",
    "nothing",
    "true",
    "token",
    "staked",
    "go",
    "ahead",
    "find",
    "going",
    "loop",
    "allowed",
    "tokens",
    "allowed",
    "tokens",
    "going",
    "find",
    "much",
    "user",
    "one",
    "allowed",
    "tokens",
    "going",
    "say",
    "four",
    "unint",
    "256",
    "allowed",
    "tokens",
    "index",
    "equals",
    "zer",
    "allowed",
    "tokens",
    "index",
    "less",
    "allowed",
    "tokens",
    "length",
    "allowed",
    "tokens",
    "index",
    "let",
    "go",
    "ahead",
    "add",
    "total",
    "value",
    "say",
    "total",
    "value",
    "going",
    "equal",
    "total",
    "value",
    "plus",
    "however",
    "much",
    "value",
    "person",
    "tokens",
    "single",
    "token",
    "get",
    "user",
    "total",
    "value",
    "total",
    "value",
    "across",
    "different",
    "tokens",
    "need",
    "way",
    "get",
    "total",
    "value",
    "across",
    "one",
    "token",
    "going",
    "create",
    "new",
    "function",
    "called",
    "get",
    "user",
    "single",
    "token",
    "value",
    "pass",
    "user",
    "also",
    "pass",
    "single",
    "token",
    "right",
    "pass",
    "allow",
    "tokens",
    "allow",
    "token",
    "index",
    "got",
    "create",
    "new",
    "function",
    "function",
    "get",
    "user",
    "single",
    "token",
    "value",
    "going",
    "take",
    "address",
    "user",
    "address",
    "token",
    "going",
    "public",
    "function",
    "going",
    "put",
    "new",
    "line",
    "make",
    "little",
    "easier",
    "see",
    "going",
    "view",
    "function",
    "going",
    "return",
    "u",
    "256",
    "want",
    "get",
    "value",
    "much",
    "person",
    "staked",
    "single",
    "token",
    "example",
    "staked",
    "1",
    "e",
    "price",
    "one",
    "e",
    "want",
    "make",
    "sure",
    "returns",
    "200",
    "die",
    "stakes",
    "price",
    "200",
    "die",
    "200",
    "want",
    "make",
    "sure",
    "returns",
    "200",
    "right",
    "getting",
    "conversion",
    "rate",
    "getting",
    "exactly",
    "much",
    "value",
    "person",
    "staked",
    "application",
    "quick",
    "say",
    "unique",
    "token",
    "state",
    "user",
    "less",
    "equal",
    "zero",
    "go",
    "ahead",
    "return",
    "zero",
    "right",
    "want",
    "require",
    "right",
    "want",
    "actually",
    "keep",
    "going",
    "right",
    "zero",
    "want",
    "transaction",
    "actually",
    "revert",
    "okay",
    "want",
    "keep",
    "going",
    "actually",
    "get",
    "value",
    "single",
    "token",
    "going",
    "need",
    "get",
    "staking",
    "balance",
    "right",
    "also",
    "need",
    "price",
    "token",
    "going",
    "need",
    "get",
    "price",
    "token",
    "multiply",
    "staking",
    "balance",
    "token",
    "user",
    "need",
    "create",
    "another",
    "function",
    "call",
    "one",
    "get",
    "token",
    "value",
    "another",
    "function",
    "going",
    "call",
    "get",
    "token",
    "value",
    "get",
    "pass",
    "address",
    "token",
    "make",
    "public",
    "view",
    "function",
    "turn",
    "un",
    "256",
    "course",
    "need",
    "pricing",
    "information",
    "going",
    "actually",
    "work",
    "chain",
    "link",
    "price",
    "feeds",
    "hopefully",
    "part",
    "going",
    "little",
    "bit",
    "familiar",
    "going",
    "need",
    "price",
    "feed",
    "address",
    "first",
    "thing",
    "going",
    "need",
    "going",
    "actually",
    "map",
    "token",
    "associated",
    "price",
    "feed",
    "addresses",
    "going",
    "need",
    "mapping",
    "right",
    "going",
    "need",
    "mapping",
    "going",
    "map",
    "address",
    "address",
    "going",
    "public",
    "one",
    "going",
    "token",
    "price",
    "feed",
    "mapping",
    "right",
    "going",
    "map",
    "token",
    "associated",
    "price",
    "feeds",
    "means",
    "going",
    "function",
    "called",
    "set",
    "price",
    "feed",
    "contract",
    "actually",
    "set",
    "price",
    "feed",
    "associated",
    "token",
    "take",
    "address",
    "token",
    "address",
    "price",
    "feed",
    "public",
    "owner",
    "want",
    "anybody",
    "able",
    "set",
    "price",
    "feeds",
    "want",
    "owner",
    "able",
    "token",
    "price",
    "feed",
    "mapping",
    "token",
    "going",
    "equal",
    "price",
    "feed",
    "way",
    "set",
    "price",
    "feed",
    "contracts",
    "way",
    "map",
    "tokens",
    "price",
    "feeds",
    "right",
    "go",
    "docs",
    "chain",
    "link",
    "go",
    "price",
    "feeds",
    "ethereum",
    "price",
    "feeds",
    "find",
    "different",
    "price",
    "feeds",
    "going",
    "set",
    "price",
    "feeds",
    "back",
    "get",
    "token",
    "value",
    "grab",
    "price",
    "feed",
    "address",
    "saying",
    "address",
    "price",
    "feed",
    "address",
    "going",
    "equal",
    "token",
    "price",
    "feed",
    "mapping",
    "token",
    "parameter",
    "use",
    "aggregator",
    "v3",
    "interface",
    "always",
    "go",
    "back",
    "docs",
    "grab",
    "bit",
    "right",
    "course",
    "going",
    "change",
    "would",
    "rather",
    "wrote",
    "going",
    "import",
    "chainlink",
    "contracts",
    "slsrc",
    "slash",
    "interfaces",
    "sl",
    "agregator",
    "v3",
    "interface",
    "soul",
    "since",
    "import",
    "going",
    "go",
    "brownie",
    "config",
    "smart",
    "contract",
    "kit",
    "slash",
    "chainlink",
    "brownie",
    "contracts",
    "going",
    "see",
    "latest",
    "version",
    "going",
    "point",
    "something",
    "package",
    "recently",
    "changed",
    "mirror",
    "mpm",
    "package",
    "versions",
    "look",
    "like",
    "went",
    "backwards",
    "versions",
    "even",
    "little",
    "little",
    "update",
    "uh",
    "newest",
    "version",
    "even",
    "though",
    "literally",
    "match",
    "mpm",
    "contract",
    "tags",
    "going",
    "use",
    "going",
    "remappings",
    "also",
    "chain",
    "link",
    "equals",
    "bid",
    "right",
    "imported",
    "grab",
    "aggregator",
    "v3",
    "interface",
    "price",
    "feed",
    "say",
    "aggregator",
    "v3",
    "interface",
    "price",
    "feed",
    "address",
    "grab",
    "price",
    "feed",
    "contract",
    "price",
    "feed",
    "contract",
    "call",
    "latest",
    "round",
    "data",
    "always",
    "check",
    "back",
    "documentation",
    "see",
    "function",
    "actually",
    "looks",
    "like",
    "going",
    "return",
    "going",
    "return",
    "whole",
    "bunch",
    "stuff",
    "care",
    "price",
    "first",
    "thing",
    "returns",
    "round",
    "id",
    "care",
    "put",
    "comma",
    "care",
    "256",
    "price",
    "put",
    "uh",
    "care",
    "rest",
    "comma",
    "comma",
    "comma",
    "care",
    "price",
    "also",
    "care",
    "decimals",
    "need",
    "know",
    "many",
    "decimals",
    "price",
    "feed",
    "contract",
    "way",
    "match",
    "everything",
    "using",
    "units",
    "say",
    "u",
    "256",
    "decimals",
    "equals",
    "price",
    "decimal",
    "return",
    "actually",
    "needs",
    "return",
    "un",
    "256",
    "another",
    "u",
    "256",
    "decimals",
    "could",
    "return",
    "return",
    "uent",
    "256",
    "price",
    "wrap",
    "price",
    "u",
    "256",
    "also",
    "need",
    "wrap",
    "decimals",
    "u",
    "six",
    "since",
    "decimals",
    "actually",
    "returns",
    "uint",
    "8",
    "return",
    "price",
    "decimals",
    "right",
    "cooking",
    "go",
    "ahead",
    "start",
    "scrolling",
    "back",
    "adding",
    "stuff",
    "say",
    "256",
    "price",
    "went",
    "256",
    "decimal",
    "equals",
    "get",
    "token",
    "value",
    "created",
    "right",
    "return",
    "staking",
    "balance",
    "token",
    "user",
    "times",
    "price",
    "going",
    "interesting",
    "math",
    "divided",
    "decimals",
    "10",
    "raised",
    "2",
    "decimals",
    "know",
    "little",
    "bit",
    "math",
    "right",
    "might",
    "going",
    "wait",
    "wait",
    "wrap",
    "like",
    "absolutely",
    "certain",
    "correct",
    "order",
    "operations",
    "taking",
    "amount",
    "token",
    "user",
    "staked",
    "right",
    "let",
    "say",
    "example",
    "10",
    "die",
    "taking",
    "price",
    "die",
    "maybe",
    "contracts",
    "tokens",
    "get",
    "converted",
    "back",
    "usd",
    "price",
    "die",
    "usd",
    "actually",
    "better",
    "yet",
    "let",
    "say",
    "10",
    "eth",
    "right",
    "price",
    "feed",
    "contract",
    "going",
    "eth",
    "usd",
    "let",
    "say",
    "price",
    "100",
    "100",
    "per",
    "usd",
    "first",
    "bit",
    "going",
    "10",
    "e",
    "time",
    "100",
    "going",
    "10",
    "100",
    "going",
    "equal",
    "value",
    "thing",
    "also",
    "divide",
    "decimals",
    "staking",
    "balance",
    "going",
    "18",
    "decimals",
    "going",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "nine",
    "10",
    "let",
    "say",
    "fusd",
    "eight",
    "1",
    "2",
    "3",
    "4",
    "5",
    "six",
    "seven",
    "eight",
    "need",
    "multiply",
    "first",
    "divide",
    "decimals",
    "way",
    "arrive",
    "price",
    "actually",
    "makes",
    "sense",
    "going",
    "function",
    "definitely",
    "definitely",
    "definitely",
    "going",
    "need",
    "test",
    "make",
    "sure",
    "everything",
    "right",
    "math",
    "correctly",
    "okay",
    "user",
    "single",
    "token",
    "value",
    "go",
    "ahead",
    "come",
    "back",
    "user",
    "total",
    "value",
    "literally",
    "finish",
    "function",
    "calling",
    "return",
    "total",
    "value",
    "pull",
    "issue",
    "tokens",
    "total",
    "value",
    "user",
    "actually",
    "locked",
    "transfer",
    "amount",
    "tokens",
    "total",
    "value",
    "say",
    "dap",
    "token",
    "transfer",
    "recipient",
    "transfer",
    "total",
    "value",
    "right",
    "say",
    "however",
    "much",
    "total",
    "value",
    "staked",
    "platform",
    "issue",
    "reward",
    "issue",
    "tokens",
    "function",
    "making",
    "great",
    "progress",
    "progress",
    "right",
    "way",
    "stake",
    "done",
    "way",
    "issue",
    "done",
    "way",
    "get",
    "value",
    "get",
    "value",
    "done",
    "add",
    "way",
    "add",
    "allow",
    "tokens",
    "add",
    "way",
    "unstake",
    "tokens",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "going",
    "make",
    "right",
    "underneath",
    "stake",
    "token",
    "one",
    "function",
    "stake",
    "tokens",
    "pass",
    "token",
    "address",
    "make",
    "public",
    "function",
    "anybody",
    "call",
    "first",
    "thing",
    "going",
    "want",
    "fetch",
    "staking",
    "balance",
    "much",
    "token",
    "user",
    "say",
    "256",
    "balance",
    "equals",
    "staking",
    "balance",
    "token",
    "message",
    "sender",
    "going",
    "require",
    "balance",
    "bance",
    "greater",
    "zero",
    "otherwise",
    "say",
    "staking",
    "balance",
    "zero",
    "going",
    "transfer",
    "ic20",
    "token",
    "transfer",
    "message",
    "sender",
    "balance",
    "actually",
    "transfer",
    "token",
    "staking",
    "balance",
    "token",
    "message",
    "sender",
    "going",
    "update",
    "balance",
    "zero",
    "right",
    "going",
    "transfer",
    "entire",
    "balance",
    "going",
    "update",
    "many",
    "unique",
    "tokens",
    "quick",
    "note",
    "later",
    "going",
    "learn",
    "attacks",
    "point",
    "come",
    "back",
    "figure",
    "hey",
    "vulnerable",
    "attacks",
    "say",
    "unique",
    "token",
    "state",
    "message",
    "sender",
    "going",
    "equal",
    "unique",
    "token",
    "state",
    "sender",
    "minus",
    "one",
    "last",
    "thing",
    "could",
    "probably",
    "actually",
    "update",
    "stakers",
    "array",
    "remove",
    "person",
    "longer",
    "anything",
    "staked",
    "little",
    "bit",
    "sloppy",
    "going",
    "skip",
    "time",
    "however",
    "want",
    "go",
    "back",
    "add",
    "functionality",
    "remove",
    "stakers",
    "stakers",
    "list",
    "unstake",
    "please",
    "go",
    "big",
    "deal",
    "actually",
    "issue",
    "tokens",
    "function",
    "actually",
    "going",
    "check",
    "see",
    "much",
    "actually",
    "staked",
    "anything",
    "stak",
    "going",
    "get",
    "sent",
    "tokens",
    "right",
    "basically",
    "functionality",
    "let",
    "try",
    "quick",
    "sanity",
    "check",
    "brownie",
    "compile",
    "whoops",
    "forgot",
    "add",
    "let",
    "try",
    "little",
    "bit",
    "needs",
    "token",
    "needs",
    "user",
    "whoops",
    "looks",
    "like",
    "thing",
    "actually",
    "staking",
    "balance",
    "let",
    "try",
    "perfect",
    "everything",
    "least",
    "compiling",
    "correctly",
    "compiling",
    "correctly",
    "though",
    "necessarily",
    "mean",
    "everything",
    "correctly",
    "fantastic",
    "typically",
    "want",
    "go",
    "ahead",
    "start",
    "tests",
    "actually",
    "going",
    "go",
    "ahead",
    "build",
    "one",
    "scripts",
    "first",
    "reason",
    "going",
    "build",
    "one",
    "scripts",
    "first",
    "going",
    "use",
    "deploy",
    "script",
    "pretty",
    "regularly",
    "test",
    "going",
    "use",
    "part",
    "testing",
    "way",
    "also",
    "test",
    "scripts",
    "well",
    "addition",
    "contracts",
    "let",
    "go",
    "ahead",
    "make",
    "deploy",
    "script",
    "let",
    "create",
    "new",
    "file",
    "call",
    "deploy",
    "also",
    "create",
    "older",
    "versions",
    "python",
    "let",
    "go",
    "ahead",
    "going",
    "main",
    "function",
    "main",
    "function",
    "actually",
    "going",
    "call",
    "deploy",
    "token",
    "farm",
    "token",
    "going",
    "function",
    "def",
    "ploy",
    "token",
    "farm",
    "token",
    "right",
    "able",
    "run",
    "r",
    "run",
    "scripts",
    "deploy",
    "piy",
    "great",
    "everything",
    "compiling",
    "right",
    "running",
    "scripts",
    "first",
    "thing",
    "going",
    "want",
    "always",
    "get",
    "account",
    "going",
    "copy",
    "couple",
    "helpful",
    "scripts",
    "past",
    "projects",
    "actually",
    "going",
    "pull",
    "nft",
    "demo",
    "actually",
    "going",
    "go",
    "chain",
    "link",
    "mix",
    "going",
    "grab",
    "helpful",
    "scripts",
    "remember",
    "always",
    "jump",
    "onto",
    "chain",
    "link",
    "mix",
    "grab",
    "scripts",
    "could",
    "go",
    "scripts",
    "helpful",
    "scripts",
    "copy",
    "paste",
    "whole",
    "thing",
    "grab",
    "like",
    "right",
    "going",
    "exact",
    "scripts",
    "built",
    "previously",
    "helpful",
    "scripts",
    "right",
    "going",
    "contract",
    "mock",
    "running",
    "tests",
    "get",
    "account",
    "get",
    "accounts",
    "easily",
    "encode",
    "function",
    "data",
    "going",
    "work",
    "since",
    "upgradeable",
    "contracts",
    "anyways",
    "upgrade",
    "also",
    "going",
    "use",
    "anyways",
    "get",
    "contract",
    "returns",
    "mocks",
    "already",
    "deployed",
    "returns",
    "whatever",
    "contract",
    "looking",
    "course",
    "deploy",
    "mox",
    "scrp",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "get",
    "account",
    "perfect",
    "get",
    "account",
    "like",
    "problem",
    "going",
    "want",
    "start",
    "deploying",
    "contracts",
    "going",
    "deploy",
    "dap",
    "token",
    "first",
    "brownie",
    "import",
    "dap",
    "token",
    "dap",
    "token",
    "equals",
    "dap",
    "token",
    "deploy",
    "takes",
    "parameters",
    "count",
    "going",
    "want",
    "deploy",
    "token",
    "farm",
    "could",
    "say",
    "token",
    "farm",
    "equals",
    "token",
    "farm",
    "deploy",
    "tags",
    "one",
    "parameter",
    "dap",
    "token",
    "address",
    "right",
    "need",
    "address",
    "give",
    "reward",
    "going",
    "say",
    "dap",
    "token",
    "address",
    "comma",
    "say",
    "count",
    "need",
    "import",
    "browny",
    "well",
    "might",
    "well",
    "add",
    "publish",
    "source",
    "bits",
    "could",
    "say",
    "publish",
    "source",
    "equals",
    "config",
    "grab",
    "config",
    "networks",
    "network",
    "show",
    "active",
    "verify",
    "grab",
    "network",
    "brownie",
    "grab",
    "config",
    "brownie",
    "config",
    "let",
    "networks",
    "lad",
    "development",
    "set",
    "verify",
    "false",
    "going",
    "work",
    "coven",
    "chain",
    "say",
    "coven",
    "verify",
    "also",
    "false",
    "actually",
    "koven",
    "sorry",
    "coven",
    "true",
    "persistent",
    "ganache",
    "verify",
    "false",
    "even",
    "going",
    "put",
    "gach",
    "chains",
    "kind",
    "verify",
    "coven",
    "wo",
    "development",
    "ganach",
    "deployed",
    "token",
    "farm",
    "contract",
    "need",
    "couple",
    "things",
    "right",
    "going",
    "need",
    "send",
    "dap",
    "tokens",
    "right",
    "going",
    "need",
    "send",
    "pretty",
    "much",
    "dap",
    "tokens",
    "actually",
    "give",
    "tokens",
    "reward",
    "going",
    "want",
    "transaction",
    "going",
    "equal",
    "dap",
    "token",
    "transfer",
    "send",
    "token",
    "farm",
    "address",
    "choose",
    "much",
    "going",
    "send",
    "send",
    "total",
    "supply",
    "keep",
    "little",
    "bit",
    "testing",
    "case",
    "also",
    "minus",
    "kept",
    "balance",
    "static",
    "kept",
    "balance",
    "say",
    "add",
    "top",
    "say",
    "kept",
    "balance",
    "let",
    "keep",
    "like",
    "100",
    "equal",
    "web",
    "way",
    "100",
    "e",
    "web",
    "three",
    "port",
    "web",
    "three",
    "transfer",
    "dap",
    "token",
    "total",
    "supply",
    "minus",
    "kept",
    "balance",
    "course",
    "going",
    "music",
    "count",
    "sending",
    "token",
    "farm",
    "basically",
    "total",
    "supply",
    "stap",
    "token",
    "token",
    "actually",
    "give",
    "reward",
    "tx",
    "wait",
    "wait",
    "one",
    "block",
    "confirmation",
    "want",
    "well",
    "look",
    "token",
    "farm",
    "know",
    "stake",
    "tokens",
    "function",
    "stake",
    "tokens",
    "allowed",
    "one",
    "tokens",
    "also",
    "going",
    "need",
    "price",
    "feed",
    "associated",
    "right",
    "token",
    "price",
    "feed",
    "mapping",
    "going",
    "add",
    "going",
    "want",
    "going",
    "want",
    "create",
    "function",
    "called",
    "add",
    "allowed",
    "tokens",
    "going",
    "going",
    "add",
    "tokens",
    "want",
    "allow",
    "going",
    "give",
    "price",
    "feed",
    "contract",
    "associated",
    "let",
    "create",
    "function",
    "call",
    "def",
    "add",
    "alloud",
    "tokens",
    "going",
    "take",
    "couple",
    "things",
    "going",
    "want",
    "take",
    "token",
    "farm",
    "going",
    "need",
    "call",
    "add",
    "allowed",
    "tokens",
    "function",
    "going",
    "take",
    "dictionary",
    "allowed",
    "tokens",
    "going",
    "names",
    "going",
    "dictionary",
    "different",
    "token",
    "addresses",
    "associated",
    "price",
    "fees",
    "going",
    "price",
    "everything",
    "usd",
    "figure",
    "value",
    "everything",
    "usd",
    "last",
    "course",
    "going",
    "need",
    "account",
    "going",
    "pass",
    "let",
    "look",
    "different",
    "inputs",
    "going",
    "put",
    "obviously",
    "going",
    "token",
    "farm",
    "going",
    "need",
    "make",
    "dictionary",
    "allowed",
    "tokens",
    "going",
    "need",
    "address",
    "different",
    "tokens",
    "want",
    "get",
    "addresses",
    "different",
    "tokens",
    "going",
    "use",
    "tokens",
    "even",
    "going",
    "use",
    "simplicity",
    "going",
    "start",
    "three",
    "tokens",
    "going",
    "allow",
    "platform",
    "allow",
    "three",
    "different",
    "tokens",
    "stak",
    "use",
    "dap",
    "token",
    "one",
    "use",
    "token",
    "wrapped",
    "eth",
    "pretty",
    "much",
    "standard",
    "smart",
    "contract",
    "platforms",
    "also",
    "going",
    "use",
    "fau",
    "token",
    "stands",
    "faucet",
    "token",
    "going",
    "pretend",
    "faucet",
    "token",
    "di",
    "reason",
    "going",
    "use",
    "faucet",
    "token",
    "erc20",
    "allows",
    "us",
    "get",
    "fake",
    "faucet",
    "token",
    "get",
    "unlimited",
    "amounts",
    "faucet",
    "token",
    "different",
    "test",
    "nets",
    "going",
    "pretend",
    "faucet",
    "token",
    "going",
    "die",
    "right",
    "fa",
    "token",
    "sl",
    "die",
    "actually",
    "get",
    "addresses",
    "well",
    "dap",
    "token",
    "know",
    "token",
    "config",
    "actually",
    "add",
    "addresses",
    "koven",
    "token",
    "address",
    "going",
    "right",
    "go",
    "check",
    "find",
    "ether",
    "scan",
    "write",
    "want",
    "going",
    "use",
    "already",
    "deployed",
    "one",
    "coen",
    "fau",
    "token",
    "going",
    "token",
    "know",
    "going",
    "address",
    "right",
    "want",
    "come",
    "grab",
    "address",
    "paste",
    "erc20",
    "put",
    "amount",
    "10",
    "connect",
    "metamask",
    "oh",
    "even",
    "tells",
    "us",
    "token",
    "address",
    "right",
    "copy",
    "paste",
    "mint",
    "free",
    "tokens",
    "confirm",
    "great",
    "says",
    "success",
    "already",
    "take",
    "token",
    "address",
    "go",
    "metamask",
    "assets",
    "add",
    "token",
    "paste",
    "already",
    "got",
    "see",
    "right",
    "five",
    "fa",
    "confirms",
    "additional",
    "10",
    "see",
    "15",
    "going",
    "fau",
    "token",
    "going",
    "use",
    "w",
    "know",
    "dap",
    "token",
    "address",
    "going",
    "deploy",
    "could",
    "could",
    "config",
    "know",
    "networks",
    "etc",
    "always",
    "get",
    "config",
    "could",
    "use",
    "get",
    "contract",
    "method",
    "grab",
    "helpful",
    "scripts",
    "deploy",
    "mock",
    "token",
    "exist",
    "one",
    "want",
    "going",
    "want",
    "test",
    "locally",
    "going",
    "want",
    "deploy",
    "fake",
    "token",
    "say",
    "token",
    "equals",
    "get",
    "contract",
    "token",
    "fau",
    "token",
    "going",
    "get",
    "contract",
    "fa",
    "token",
    "remember",
    "put",
    "string",
    "put",
    "needs",
    "match",
    "string",
    "config",
    "order",
    "get",
    "contract",
    "work",
    "token",
    "fau",
    "token",
    "actually",
    "going",
    "modify",
    "helpful",
    "scripts",
    "copied",
    "pasted",
    "directly",
    "chain",
    "link",
    "mix",
    "basically",
    "going",
    "importing",
    "mocks",
    "go",
    "ahead",
    "copy",
    "paste",
    "well",
    "chain",
    "link",
    "mix",
    "test",
    "mock",
    "contracts",
    "forking",
    "implementations",
    "contracts",
    "mock",
    "tells",
    "us",
    "based",
    "key",
    "token",
    "contract",
    "going",
    "use",
    "mock",
    "get",
    "account",
    "use",
    "time",
    "order",
    "us",
    "contract",
    "mock",
    "correctly",
    "going",
    "mock",
    "fau",
    "actually",
    "even",
    "need",
    "even",
    "need",
    "whole",
    "contract",
    "mock",
    "fact",
    "get",
    "rid",
    "mock",
    "oracle",
    "get",
    "rid",
    "vf",
    "coordinator",
    "even",
    "get",
    "rid",
    "link",
    "token",
    "need",
    "sdusd",
    "price",
    "feed",
    "later",
    "going",
    "leave",
    "definitely",
    "though",
    "fau",
    "token",
    "going",
    "mocked",
    "something",
    "need",
    "token",
    "going",
    "mocked",
    "something",
    "else",
    "tokens",
    "going",
    "mocked",
    "well",
    "erc20",
    "mock",
    "want",
    "give",
    "kind",
    "identity",
    "going",
    "actually",
    "going",
    "make",
    "mock",
    "erc20",
    "fau",
    "web",
    "going",
    "come",
    "going",
    "new",
    "file",
    "call",
    "mock",
    "die",
    "doou",
    "going",
    "mock",
    "fau",
    "token",
    "could",
    "mock",
    "die",
    "could",
    "mock",
    "fau",
    "whatever",
    "want",
    "going",
    "make",
    "basic",
    "erc20",
    "pragma",
    "solidity",
    "import",
    "open",
    "zeppelin",
    "contracts",
    "token",
    "ec20c",
    "soul",
    "obviously",
    "going",
    "look",
    "familiar",
    "spell",
    "ragma",
    "whatever",
    "spelled",
    "going",
    "look",
    "really",
    "similar",
    "dap",
    "token",
    "call",
    "contract",
    "mock",
    "die",
    "erc20",
    "constructor",
    "public",
    "erc20",
    "mock",
    "die",
    "name",
    "symbol",
    "die",
    "perfect",
    "need",
    "copy",
    "whole",
    "thing",
    "thing",
    "mock",
    "paste",
    "whole",
    "thing",
    "change",
    "name",
    "call",
    "mock",
    "zc20",
    "mock",
    "great",
    "mocks",
    "change",
    "fau",
    "token",
    "mock",
    "die",
    "token",
    "march",
    "import",
    "brownie",
    "fact",
    "get",
    "rid",
    "mach",
    "oracle",
    "vf",
    "coordinator",
    "instead",
    "mock",
    "die",
    "mock",
    "course",
    "since",
    "die",
    "usd",
    "price",
    "feed",
    "eth",
    "price",
    "feed",
    "going",
    "make",
    "sure",
    "mock",
    "also",
    "going",
    "deploy",
    "deploy",
    "mox",
    "script",
    "scroll",
    "deploy",
    "mox",
    "see",
    "currently",
    "pulling",
    "directly",
    "chain",
    "link",
    "mix",
    "go",
    "ahead",
    "delete",
    "vrf",
    "coordinator",
    "mock",
    "mock",
    "oracle",
    "instead",
    "deploy",
    "mock",
    "mock",
    "die",
    "print",
    "deploying",
    "mock",
    "die",
    "die",
    "token",
    "equals",
    "die",
    "deploy",
    "count",
    "print",
    "statement",
    "ployed",
    "di",
    "token",
    "address",
    "print",
    "bloing",
    "mock",
    "mock",
    "token",
    "equals",
    "mock",
    "deploy",
    "say",
    "count",
    "print",
    "deployed",
    "another",
    "print",
    "f",
    "token",
    "address",
    "additionally",
    "fusd",
    "price",
    "feed",
    "left",
    "chain",
    "link",
    "mix",
    "also",
    "need",
    "usd",
    "price",
    "feed",
    "go",
    "ahead",
    "add",
    "usd",
    "price",
    "feed",
    "set",
    "mock",
    "v3",
    "aggregator",
    "could",
    "could",
    "parametrize",
    "mock",
    "v3",
    "aggregator",
    "takes",
    "maybe",
    "different",
    "decimals",
    "different",
    "initial",
    "value",
    "could",
    "different",
    "sake",
    "testing",
    "going",
    "leave",
    "great",
    "address",
    "token",
    "addresses",
    "fau",
    "token",
    "exist",
    "network",
    "working",
    "going",
    "deploy",
    "mark",
    "addresses",
    "dictionary",
    "allow",
    "tokens",
    "going",
    "equal",
    "dictionary",
    "make",
    "going",
    "route",
    "one",
    "contracts",
    "like",
    "dap",
    "token",
    "two",
    "equivalent",
    "price",
    "feed",
    "dap",
    "token",
    "going",
    "say",
    "dap",
    "going",
    "equal",
    "die",
    "going",
    "say",
    "fa",
    "token",
    "also",
    "equal",
    "die",
    "token",
    "course",
    "going",
    "equal",
    "eth",
    "going",
    "want",
    "get",
    "usd",
    "price",
    "feed",
    "another",
    "usd",
    "price",
    "feed",
    "fusd",
    "price",
    "feed",
    "config",
    "add",
    "usd",
    "price",
    "feed",
    "since",
    "going",
    "testing",
    "since",
    "going",
    "integration",
    "test",
    "coen",
    "come",
    "chain",
    "link",
    "docks",
    "go",
    "ethereum",
    "price",
    "feeds",
    "coven",
    "scroll",
    "usd",
    "address",
    "right",
    "pop",
    "also",
    "want",
    "fusd",
    "price",
    "feed",
    "also",
    "go",
    "grab",
    "coen",
    "network",
    "grab",
    "right",
    "paste",
    "complete",
    "deck",
    "get",
    "contract",
    "deploy",
    "mock",
    "price",
    "feeds",
    "exist",
    "get",
    "contract",
    "die",
    "usd",
    "price",
    "feed",
    "fu",
    "token",
    "also",
    "going",
    "usd",
    "price",
    "feed",
    "token",
    "going",
    "fusd",
    "price",
    "feed",
    "awesome",
    "dictionary",
    "allowed",
    "tokens",
    "pass",
    "add",
    "allowed",
    "tokens",
    "map",
    "tokens",
    "addresses",
    "associated",
    "price",
    "feeds",
    "get",
    "equal",
    "value",
    "contracts",
    "go",
    "ahead",
    "create",
    "function",
    "called",
    "add",
    "allowed",
    "tokens",
    "pass",
    "token",
    "farm",
    "pass",
    "iary",
    "allowed",
    "tokens",
    "course",
    "pass",
    "account",
    "add",
    "allowed",
    "tokens",
    "function",
    "going",
    "loop",
    "different",
    "tokens",
    "call",
    "add",
    "allowed",
    "tokens",
    "function",
    "going",
    "four",
    "token",
    "dictionary",
    "allowed",
    "tokens",
    "going",
    "token",
    "farm",
    "add",
    "allowed",
    "tokens",
    "token",
    "address",
    "count",
    "say",
    "add",
    "tx",
    "equals",
    "add",
    "tx",
    "weight",
    "one",
    "going",
    "call",
    "set",
    "price",
    "feed",
    "contract",
    "actually",
    "going",
    "set",
    "price",
    "feed",
    "associated",
    "token",
    "set",
    "tx",
    "equals",
    "token",
    "music",
    "farm",
    "set",
    "price",
    "feed",
    "contract",
    "token",
    "address",
    "dictionary",
    "allowed",
    "tokens",
    "token",
    "looping",
    "course",
    "count",
    "set",
    "text",
    "one",
    "return",
    "token",
    "farm",
    "probably",
    "return",
    "great",
    "deploy",
    "script",
    "looks",
    "pretty",
    "good",
    "fact",
    "going",
    "end",
    "deploy",
    "script",
    "returning",
    "token",
    "farm",
    "dap",
    "token",
    "way",
    "actually",
    "use",
    "deploy",
    "script",
    "tests",
    "going",
    "quick",
    "little",
    "zoom",
    "see",
    "wonderful",
    "deploy",
    "script",
    "right",
    "awesome",
    "looks",
    "like",
    "everything",
    "let",
    "give",
    "initial",
    "test",
    "local",
    "ganach",
    "chain",
    "see",
    "mocks",
    "work",
    "see",
    "everything",
    "least",
    "makes",
    "sense",
    "call",
    "functions",
    "awesome",
    "looks",
    "like",
    "call",
    "functions",
    "deploy",
    "mocks",
    "mocking",
    "working",
    "least",
    "somewhat",
    "correctly",
    "great",
    "zoom",
    "little",
    "bit",
    "got",
    "deploy",
    "scripts",
    "got",
    "add",
    "allow",
    "token",
    "scripts",
    "got",
    "mock",
    "contracts",
    "added",
    "tests",
    "things",
    "looking",
    "good",
    "want",
    "well",
    "course",
    "want",
    "run",
    "tests",
    "want",
    "make",
    "sure",
    "contract",
    "actually",
    "going",
    "say",
    "going",
    "guys",
    "ready",
    "let",
    "jump",
    "tests",
    "let",
    "make",
    "new",
    "folder",
    "called",
    "unit",
    "add",
    "new",
    "file",
    "call",
    "test",
    "token",
    "let",
    "tests",
    "ideally",
    "would",
    "also",
    "write",
    "tests",
    "dap",
    "token",
    "however",
    "going",
    "skip",
    "basically",
    "open",
    "zeppelins",
    "implementation",
    "fullscale",
    "production",
    "probably",
    "would",
    "want",
    "write",
    "tests",
    "tokens",
    "well",
    "let",
    "get",
    "let",
    "look",
    "token",
    "farm",
    "see",
    "need",
    "test",
    "remember",
    "ideally",
    "every",
    "piece",
    "code",
    "smart",
    "contract",
    "tested",
    "form",
    "another",
    "mind",
    "let",
    "get",
    "started",
    "one",
    "first",
    "functions",
    "see",
    "set",
    "price",
    "feed",
    "contract",
    "let",
    "make",
    "test",
    "def",
    "test",
    "set",
    "price",
    "feed",
    "contract",
    "literally",
    "going",
    "test",
    "one",
    "function",
    "test",
    "well",
    "first",
    "let",
    "make",
    "sure",
    "local",
    "network",
    "right",
    "want",
    "local",
    "network",
    "since",
    "one",
    "unit",
    "tests",
    "arrange",
    "stage",
    "going",
    "network",
    "show",
    "active",
    "local",
    "blockchain",
    "environments",
    "going",
    "run",
    "pi",
    "test",
    "skip",
    "say",
    "local",
    "testing",
    "course",
    "got",
    "number",
    "pieces",
    "need",
    "import",
    "going",
    "brown",
    "imports",
    "network",
    "going",
    "scripts",
    "helpful",
    "scripts",
    "import",
    "local",
    "blockchain",
    "environments",
    "going",
    "import",
    "pest",
    "right",
    "going",
    "get",
    "account",
    "make",
    "transactions",
    "say",
    "account",
    "equals",
    "get",
    "account",
    "grab",
    "helpful",
    "scripts",
    "well",
    "account",
    "use",
    "let",
    "even",
    "grab",
    "account",
    "say",
    "equals",
    "get",
    "account",
    "index",
    "equals",
    "1",
    "give",
    "us",
    "different",
    "account",
    "rather",
    "account",
    "use",
    "check",
    "owner",
    "functions",
    "going",
    "going",
    "get",
    "token",
    "farm",
    "dap",
    "token",
    "based",
    "deploy",
    "script",
    "going",
    "use",
    "deploy",
    "token",
    "farm",
    "dap",
    "token",
    "going",
    "import",
    "saying",
    "scripts",
    "deoy",
    "import",
    "deploy",
    "token",
    "farm",
    "dap",
    "token",
    "going",
    "call",
    "function",
    "test",
    "right",
    "going",
    "say",
    "token",
    "farm",
    "dap",
    "token",
    "equals",
    "deploy",
    "token",
    "farm",
    "dap",
    "token",
    "awesome",
    "going",
    "lot",
    "arrange",
    "step",
    "lot",
    "tests",
    "going",
    "set",
    "could",
    "even",
    "hypothetically",
    "turn",
    "conf",
    "test",
    "wrapper",
    "wanted",
    "going",
    "leave",
    "like",
    "move",
    "act",
    "phase",
    "going",
    "want",
    "token",
    "farm",
    "set",
    "price",
    "feed",
    "contract",
    "remember",
    "testing",
    "right",
    "going",
    "use",
    "token",
    "price",
    "feed",
    "address",
    "use",
    "dap",
    "token",
    "address",
    "use",
    "get",
    "contract",
    "actually",
    "get",
    "fusd",
    "price",
    "feed",
    "address",
    "also",
    "grab",
    "helpful",
    "scripts",
    "get",
    "contract",
    "important",
    "note",
    "try",
    "set",
    "contra",
    "contract",
    "address",
    "parameter",
    "like",
    "brony",
    "know",
    "okay",
    "looking",
    "address",
    "instead",
    "actual",
    "contract",
    "case",
    "count",
    "save",
    "res",
    "shifts",
    "work",
    "perfectly",
    "going",
    "assert",
    "going",
    "move",
    "assert",
    "stage",
    "right",
    "check",
    "price",
    "feed",
    "mapping",
    "updated",
    "doert",
    "token",
    "farm",
    "token",
    "price",
    "feed",
    "mapping",
    "remember",
    "token",
    "price",
    "feed",
    "mapping",
    "address",
    "address",
    "say",
    "token",
    "address",
    "equal",
    "get",
    "contract",
    "fusd",
    "price",
    "feed",
    "updated",
    "exactly",
    "get",
    "contract",
    "fc",
    "price",
    "feed",
    "returns",
    "fact",
    "even",
    "make",
    "little",
    "bit",
    "better",
    "copy",
    "say",
    "okay",
    "price",
    "feed",
    "address",
    "equals",
    "get",
    "contract",
    "pop",
    "pop",
    "way",
    "using",
    "single",
    "variable",
    "right",
    "first",
    "test",
    "let",
    "run",
    "brownie",
    "test",
    "run",
    "whole",
    "test",
    "suite",
    "passing",
    "awesome",
    "let",
    "also",
    "test",
    "make",
    "sure",
    "ca",
    "call",
    "function",
    "want",
    "make",
    "sure",
    "somebody",
    "owner",
    "deployed",
    "right",
    "deploy",
    "token",
    "farm",
    "andap",
    "token",
    "going",
    "run",
    "get",
    "account",
    "want",
    "make",
    "sure",
    "somebody",
    "else",
    "ca",
    "call",
    "function",
    "pest",
    "raises",
    "exceptions",
    "virtual",
    "machine",
    "error",
    "excuse",
    "getting",
    "way",
    "try",
    "call",
    "exact",
    "function",
    "right",
    "even",
    "copy",
    "paste",
    "instead",
    "call",
    "right",
    "also",
    "import",
    "exceptions",
    "browning",
    "also",
    "pass",
    "expecting",
    "contract",
    "call",
    "actually",
    "revert",
    "let",
    "try",
    "perfect",
    "passes",
    "right",
    "double",
    "check",
    "make",
    "sure",
    "pest",
    "raises",
    "working",
    "count",
    "right",
    "fail",
    "going",
    "revert",
    "exactly",
    "happens",
    "perfect",
    "leave",
    "first",
    "test",
    "looking",
    "great",
    "zoom",
    "hair",
    "sleep",
    "easy",
    "function",
    "going",
    "work",
    "intended",
    "wonderful",
    "feeling",
    "yes",
    "great",
    "let",
    "move",
    "let",
    "look",
    "token",
    "farm",
    "next",
    "function",
    "aha",
    "issue",
    "tokens",
    "right",
    "great",
    "let",
    "write",
    "tests",
    "issue",
    "tokens",
    "going",
    "def",
    "test",
    "issue",
    "tokens",
    "actually",
    "going",
    "well",
    "order",
    "test",
    "issuing",
    "tokens",
    "actually",
    "need",
    "stake",
    "tokens",
    "first",
    "actually",
    "going",
    "pass",
    "test",
    "issuing",
    "staking",
    "tokens",
    "need",
    "write",
    "test",
    "staking",
    "tokens",
    "right",
    "order",
    "issue",
    "tokens",
    "need",
    "tokens",
    "staked",
    "let",
    "write",
    "test",
    "stake",
    "tokens",
    "first",
    "write",
    "test",
    "issue",
    "tokens",
    "def",
    "test",
    "stake",
    "tokens",
    "let",
    "set",
    "going",
    "copy",
    "bit",
    "going",
    "working",
    "local",
    "network",
    "account",
    "equals",
    "get",
    "account",
    "go",
    "ahead",
    "deploy",
    "token",
    "farm",
    "dab",
    "token",
    "initial",
    "bit",
    "going",
    "exactly",
    "making",
    "sure",
    "local",
    "network",
    "getting",
    "account",
    "deploying",
    "token",
    "farm",
    "db",
    "token",
    "let",
    "move",
    "act",
    "phase",
    "let",
    "go",
    "ahead",
    "act",
    "let",
    "go",
    "ahead",
    "actually",
    "send",
    "tokens",
    "token",
    "farm",
    "first",
    "obviously",
    "need",
    "call",
    "approve",
    "dap",
    "token",
    "contract",
    "dap",
    "token",
    "approve",
    "token",
    "farm",
    "address",
    "see",
    "could",
    "go",
    "open",
    "zeppelin",
    "docs",
    "figure",
    "parameters",
    "going",
    "address",
    "going",
    "amount",
    "obviously",
    "count",
    "put",
    "couple",
    "question",
    "marks",
    "going",
    "constantly",
    "using",
    "amount",
    "right",
    "going",
    "using",
    "amount",
    "staked",
    "lot",
    "tests",
    "going",
    "actually",
    "going",
    "turn",
    "fixture",
    "going",
    "call",
    "amount",
    "state",
    "going",
    "define",
    "conf",
    "test",
    "folder",
    "going",
    "make",
    "conf",
    "test",
    "file",
    "going",
    "new",
    "file",
    "com",
    "whoops",
    "wrong",
    "directory",
    "going",
    "go",
    "cd",
    "tests",
    "unit",
    "going",
    "move",
    "conf",
    "one",
    "directory",
    "work",
    "able",
    "drag",
    "drop",
    "uh",
    "test",
    "want",
    "pull",
    "unit",
    "right",
    "want",
    "get",
    "test",
    "directory",
    "case",
    "conf",
    "going",
    "create",
    "first",
    "fixture",
    "going",
    "pest",
    "fixture",
    "def",
    "amount",
    "stak",
    "going",
    "return",
    "web",
    "3",
    "2way",
    "one",
    "ether",
    "course",
    "need",
    "import",
    "p",
    "test",
    "going",
    "need",
    "import",
    "going",
    "web",
    "3",
    "import",
    "web",
    "3",
    "saves",
    "perfectly",
    "use",
    "amount",
    "staked",
    "fixture",
    "basically",
    "static",
    "variable",
    "right",
    "could",
    "done",
    "top",
    "could",
    "something",
    "like",
    "amount",
    "stak",
    "equals",
    "know",
    "exact",
    "thing",
    "going",
    "get",
    "habit",
    "working",
    "fixtures",
    "dea",
    "test",
    "stake",
    "tokens",
    "going",
    "pass",
    "amount",
    "stak",
    "fixture",
    "p",
    "test",
    "brownie",
    "automatically",
    "grab",
    "stuff",
    "com",
    "test",
    "folder",
    "put",
    "use",
    "amount",
    "staked",
    "parameter",
    "test",
    "approve",
    "token",
    "farm",
    "stak",
    "tokens",
    "call",
    "stake",
    "tokens",
    "function",
    "right",
    "takes",
    "amount",
    "token",
    "address",
    "course",
    "going",
    "amount",
    "state",
    "amount",
    "dep",
    "token",
    "address",
    "address",
    "course",
    "count",
    "perfect",
    "going",
    "basic",
    "action",
    "testing",
    "staking",
    "functionality",
    "go",
    "ahead",
    "move",
    "assert",
    "phase",
    "assert",
    "number",
    "things",
    "right",
    "little",
    "bracket",
    "going",
    "couple",
    "things",
    "going",
    "assert",
    "token",
    "farm",
    "taking",
    "balance",
    "dap",
    "token",
    "address",
    "account",
    "address",
    "equals",
    "amount",
    "state",
    "let",
    "talk",
    "really",
    "quickly",
    "actually",
    "go",
    "token",
    "farm",
    "know",
    "mapping",
    "called",
    "staking",
    "balance",
    "mapping",
    "mapping",
    "right",
    "need",
    "actually",
    "pass",
    "two",
    "variables",
    "first",
    "address",
    "second",
    "address",
    "get",
    "amount",
    "syntactically",
    "brownie",
    "pass",
    "additional",
    "parameters",
    "pass",
    "dap",
    "token",
    "address",
    "going",
    "token",
    "address",
    "account",
    "address",
    "going",
    "address",
    "perfect",
    "even",
    "run",
    "brownie",
    "k",
    "test",
    "stake",
    "tokens",
    "great",
    "looks",
    "like",
    "passed",
    "perfectly",
    "couple",
    "assertions",
    "make",
    "right",
    "look",
    "stake",
    "tokens",
    "fun",
    "function",
    "lot",
    "things",
    "let",
    "check",
    "make",
    "sure",
    "working",
    "correctly",
    "also",
    "assert",
    "token",
    "farm",
    "unique",
    "token",
    "state",
    "count",
    "address",
    "going",
    "equal",
    "one",
    "right",
    "going",
    "first",
    "token",
    "unique",
    "token",
    "state",
    "also",
    "assert",
    "token",
    "farm",
    "stakers",
    "zero",
    "withth",
    "index",
    "going",
    "account",
    "using",
    "update",
    "unique",
    "token",
    "stak",
    "update",
    "staking",
    "balance",
    "add",
    "stakers",
    "push",
    "right",
    "going",
    "first",
    "address",
    "array",
    "going",
    "one",
    "thing",
    "going",
    "return",
    "token",
    "farm",
    "inap",
    "token",
    "reason",
    "actually",
    "use",
    "test",
    "tests",
    "getting",
    "little",
    "bit",
    "integration",
    "kind",
    "mixing",
    "matching",
    "stuff",
    "could",
    "even",
    "probably",
    "put",
    "whole",
    "thing",
    "function",
    "regular",
    "scripts",
    "directory",
    "simplicity",
    "sake",
    "going",
    "architect",
    "great",
    "let",
    "test",
    "rest",
    "hit",
    "rounding",
    "k",
    "test",
    "stake",
    "tokens",
    "hit",
    "enter",
    "perfect",
    "passing",
    "correctly",
    "well",
    "awesome",
    "let",
    "keep",
    "going",
    "moving",
    "test",
    "issue",
    "tokens",
    "phase",
    "going",
    "use",
    "test",
    "stake",
    "tokens",
    "test",
    "way",
    "going",
    "use",
    "going",
    "grab",
    "amount",
    "stak",
    "parameter",
    "place",
    "going",
    "set",
    "exactly",
    "way",
    "going",
    "set",
    "almost",
    "exactly",
    "way",
    "even",
    "copy",
    "lines",
    "paste",
    "going",
    "arrange",
    "going",
    "check",
    "make",
    "sure",
    "local",
    "network",
    "going",
    "get",
    "account",
    "instead",
    "deploy",
    "token",
    "farm",
    "dap",
    "token",
    "going",
    "token",
    "farm",
    "comma",
    "dap",
    "token",
    "equals",
    "test",
    "stake",
    "tokens",
    "going",
    "pass",
    "amount",
    "stak",
    "returning",
    "token",
    "farm",
    "dap",
    "token",
    "test",
    "stake",
    "tokens",
    "way",
    "use",
    "function",
    "test",
    "issue",
    "tokens",
    "perfect",
    "test",
    "issuing",
    "tokens",
    "test",
    "issuing",
    "tokens",
    "issue",
    "reward",
    "want",
    "first",
    "take",
    "inventory",
    "current",
    "starting",
    "balances",
    "address",
    "say",
    "starting",
    "balance",
    "equals",
    "token",
    "balance",
    "count",
    "address",
    "great",
    "going",
    "start",
    "range",
    "phase",
    "let",
    "move",
    "acting",
    "move",
    "act",
    "phase",
    "token",
    "farm",
    "isue",
    "tokens",
    "save",
    "account",
    "really",
    "thing",
    "testing",
    "move",
    "arrange",
    "stage",
    "assert",
    "going",
    "little",
    "parentheses",
    "going",
    "long",
    "thing",
    "going",
    "assert",
    "dap",
    "token",
    "dot",
    "balance",
    "account",
    "address",
    "equal",
    "starting",
    "balance",
    "plus",
    "new",
    "amount",
    "new",
    "amount",
    "going",
    "well",
    "look",
    "issue",
    "tokens",
    "function",
    "staking",
    "conf",
    "test",
    "staking",
    "one",
    "ether",
    "right",
    "one",
    "die",
    "right",
    "staking",
    "dap",
    "token",
    "staking",
    "one",
    "mocks",
    "going",
    "fusd",
    "price",
    "feed",
    "right",
    "mock",
    "v3",
    "aggregator",
    "deploy",
    "initial",
    "value",
    "going",
    "right",
    "saying",
    "mock",
    "sample",
    "saying",
    "staking",
    "one",
    "dap",
    "token",
    "equal",
    "price",
    "1",
    "e",
    "get",
    "dep",
    "tokens",
    "reward",
    "since",
    "saying",
    "since",
    "price",
    "eth",
    "usd",
    "little",
    "bit",
    "math",
    "initial",
    "value",
    "going",
    "right",
    "almost",
    "think",
    "like",
    "18",
    "decimals",
    "application",
    "pays",
    "us",
    "reward",
    "based",
    "total",
    "total",
    "usd",
    "value",
    "locked",
    "actually",
    "know",
    "going",
    "price",
    "even",
    "going",
    "already",
    "chain",
    "link",
    "mix",
    "shame",
    "add",
    "going",
    "add",
    "new",
    "variable",
    "called",
    "initial",
    "price",
    "feed",
    "value",
    "going",
    "equal",
    "1",
    "2",
    "3",
    "four",
    "5",
    "six",
    "7",
    "8",
    "nine",
    "10",
    "1",
    "2",
    "3",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "super",
    "big",
    "number",
    "going",
    "take",
    "going",
    "set",
    "initial",
    "value",
    "going",
    "initial",
    "price",
    "fed",
    "value",
    "test",
    "import",
    "helpful",
    "scripts",
    "assume",
    "starting",
    "balance",
    "going",
    "starting",
    "balance",
    "plus",
    "initial",
    "price",
    "feed",
    "balance",
    "done",
    "math",
    "correctly",
    "done",
    "issue",
    "tokens",
    "done",
    "get",
    "value",
    "correctly",
    "work",
    "done",
    "testing",
    "already",
    "things",
    "like",
    "get",
    "user",
    "total",
    "value",
    "right",
    "get",
    "user",
    "total",
    "value",
    "subset",
    "issue",
    "tokens",
    "jumping",
    "gun",
    "little",
    "bit",
    "going",
    "test",
    "later",
    "anyways",
    "said",
    "let",
    "run",
    "test",
    "browny",
    "k",
    "test",
    "issue",
    "tokens",
    "lovely",
    "math",
    "correct",
    "awesome",
    "wonderfully",
    "tests",
    "even",
    "gotten",
    "harder",
    "ones",
    "way",
    "early",
    "bad",
    "either",
    "far",
    "video",
    "goes",
    "actually",
    "going",
    "stop",
    "wrting",
    "test",
    "literally",
    "going",
    "keep",
    "going",
    "solidity",
    "file",
    "grabbing",
    "functions",
    "adding",
    "tests",
    "got",
    "tests",
    "located",
    "github",
    "repository",
    "associated",
    "lesson",
    "unit",
    "test",
    "file",
    "integration",
    "test",
    "file",
    "github",
    "repository",
    "want",
    "go",
    "ahead",
    "check",
    "feel",
    "free",
    "going",
    "move",
    "next",
    "section",
    "keep",
    "things",
    "moving",
    "forward",
    "highly",
    "highly",
    "recommend",
    "trying",
    "write",
    "tests",
    "good",
    "luck",
    "going",
    "make",
    "going",
    "move",
    "private",
    "ke",
    "run",
    "make",
    "sure",
    "integration",
    "test",
    "work",
    "well",
    "make",
    "sure",
    "run",
    "deploy",
    "onor",
    "testing",
    "everything",
    "works",
    "correctly",
    "course",
    "going",
    "want",
    "get",
    "file",
    "want",
    "add",
    "browning",
    "config",
    "add",
    "private",
    "key",
    "ab",
    "web3",
    "inferior",
    "project",
    "id",
    "make",
    "sure",
    "plenty",
    "test",
    "coen",
    "actually",
    "run",
    "deploy",
    "scripts",
    "always",
    "find",
    "latest",
    "faucets",
    "link",
    "token",
    "contracts",
    "page",
    "koven",
    "rink",
    "b",
    "networks",
    "also",
    "going",
    "need",
    "wallets",
    "section",
    "key",
    "put",
    "dollar",
    "sign",
    "private",
    "key",
    "done",
    "contract",
    "work",
    "done",
    "contract",
    "work",
    "going",
    "learn",
    "something",
    "totally",
    "new",
    "covered",
    "yet",
    "going",
    "learn",
    "frontend",
    "development",
    "like",
    "said",
    "front",
    "end",
    "end",
    "course",
    "focus",
    "going",
    "front",
    "end",
    "want",
    "point",
    "right",
    "away",
    "considered",
    "bonus",
    "section",
    "ton",
    "pieces",
    "section",
    "going",
    "time",
    "go",
    "thoroughly",
    "going",
    "going",
    "going",
    "front",
    "end",
    "side",
    "editing",
    "little",
    "bit",
    "choppier",
    "highly",
    "recommend",
    "documentation",
    "github",
    "associated",
    "front",
    "end",
    "going",
    "free",
    "code",
    "camp",
    "awesome",
    "video",
    "work",
    "want",
    "learn",
    "react",
    "typ",
    "script",
    "technology",
    "going",
    "go",
    "definitely",
    "check",
    "videos",
    "going",
    "make",
    "though",
    "able",
    "follow",
    "along",
    "everything",
    "interested",
    "feel",
    "free",
    "go",
    "ahead",
    "skip",
    "part",
    "however",
    "understanding",
    "applications",
    "work",
    "really",
    "helpful",
    "give",
    "massive",
    "massive",
    "incredible",
    "skill",
    "actually",
    "build",
    "front",
    "ends",
    "smart",
    "contracts",
    "really",
    "solid",
    "user",
    "interface",
    "really",
    "important",
    "web3",
    "blockchain",
    "world",
    "people",
    "ca",
    "use",
    "contracts",
    "good",
    "application",
    "said",
    "let",
    "jump",
    "let",
    "build",
    "front",
    "end",
    "know",
    "said",
    "like",
    "javascript",
    "going",
    "working",
    "typescript",
    "improved",
    "version",
    "javascript",
    "catches",
    "ton",
    "different",
    "bugs",
    "allows",
    "us",
    "much",
    "explicit",
    "working",
    "front",
    "end",
    "also",
    "going",
    "working",
    "react",
    "going",
    "working",
    "create",
    "react",
    "app",
    "framework",
    "allows",
    "us",
    "quickly",
    "spin",
    "front",
    "end",
    "build",
    "applications",
    "also",
    "going",
    "working",
    "tool",
    "called",
    "usap",
    "framework",
    "rapid",
    "dap",
    "development",
    "works",
    "great",
    "react",
    "let",
    "get",
    "started",
    "building",
    "front",
    "end",
    "first",
    "thing",
    "going",
    "want",
    "build",
    "front",
    "end",
    "full",
    "stack",
    "application",
    "create",
    "react",
    "app",
    "boilerplate",
    "mpx",
    "installed",
    "run",
    "mpx",
    "version",
    "show",
    "installed",
    "installed",
    "npm",
    "mpx",
    "installed",
    "run",
    "pm",
    "install",
    "dg",
    "npx",
    "additionally",
    "going",
    "want",
    "install",
    "yarn",
    "install",
    "yarn",
    "run",
    "mpm",
    "install",
    "global",
    "dg",
    "yarn",
    "know",
    "yarn",
    "installed",
    "correctly",
    "run",
    "yarn",
    "version",
    "see",
    "version",
    "yarn",
    "link",
    "install",
    "npx",
    "yarn",
    "github",
    "repo",
    "great",
    "actually",
    "create",
    "folder",
    "boiler",
    "plate",
    "code",
    "going",
    "run",
    "mpx",
    "create",
    "react",
    "app",
    "going",
    "call",
    "frontend",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "front",
    "end",
    "going",
    "template",
    "typescript",
    "going",
    "want",
    "work",
    "like",
    "said",
    "typescript",
    "instead",
    "javascript",
    "never",
    "worked",
    "typescript",
    "worked",
    "javascript",
    "worry",
    "syntax",
    "nearly",
    "identical",
    "never",
    "worked",
    "either",
    "worry",
    "going",
    "walk",
    "everything",
    "hit",
    "enter",
    "going",
    "happen",
    "see",
    "going",
    "create",
    "new",
    "react",
    "app",
    "new",
    "folder",
    "project",
    "awesome",
    "downloaded",
    "create",
    "react",
    "app",
    "new",
    "folder",
    "called",
    "frontend",
    "got",
    "whole",
    "bunch",
    "stuff",
    "typically",
    "different",
    "applications",
    "actually",
    "one",
    "repository",
    "python",
    "contracts",
    "additionally",
    "different",
    "folder",
    "different",
    "repository",
    "front",
    "end",
    "application",
    "front",
    "end",
    "work",
    "really",
    "good",
    "practice",
    "going",
    "bundle",
    "everything",
    "repo",
    "get",
    "started",
    "make",
    "easier",
    "us",
    "getting",
    "started",
    "however",
    "see",
    "across",
    "different",
    "projects",
    "totally",
    "separate",
    "repo",
    "front",
    "end",
    "let",
    "take",
    "inventory",
    "actually",
    "going",
    "inside",
    "folder",
    "first",
    "folder",
    "see",
    "node",
    "modules",
    "basically",
    "pip",
    "installs",
    "different",
    "packages",
    "pulled",
    "javascript",
    "typescript",
    "pretty",
    "much",
    "ignore",
    "folder",
    "majority",
    "working",
    "next",
    "public",
    "folder",
    "also",
    "really",
    "going",
    "go",
    "got",
    "nice",
    "little",
    "images",
    "got",
    "basic",
    "html",
    "going",
    "running",
    "couple",
    "logo",
    "images",
    "manifest",
    "manifest",
    "something",
    "want",
    "change",
    "tells",
    "browsers",
    "little",
    "bit",
    "app",
    "app",
    "actually",
    "something",
    "would",
    "change",
    "everything",
    "pretty",
    "short",
    "name",
    "application",
    "long",
    "name",
    "application",
    "icons",
    "start",
    "url",
    "something",
    "want",
    "fiddle",
    "later",
    "absolutely",
    "please",
    "go",
    "robots",
    "text",
    "going",
    "talk",
    "helps",
    "web",
    "searchers",
    "indexers",
    "learn",
    "little",
    "bit",
    "site",
    "ignore",
    "one",
    "well",
    "part",
    "really",
    "going",
    "anything",
    "public",
    "folder",
    "node",
    "modules",
    "folder",
    "source",
    "folder",
    "however",
    "going",
    "spending",
    "lot",
    "time",
    "app",
    "css",
    "includes",
    "whole",
    "bunch",
    "formatting",
    "html",
    "app",
    "test",
    "tsx",
    "going",
    "testing",
    "front",
    "end",
    "yes",
    "even",
    "test",
    "front",
    "end",
    "going",
    "totally",
    "skip",
    "testing",
    "front",
    "end",
    "yes",
    "know",
    "spent",
    "lot",
    "time",
    "testing",
    "contracts",
    "want",
    "learn",
    "testing",
    "front",
    "ends",
    "fantastic",
    "links",
    "github",
    "description",
    "go",
    "app",
    "tsx",
    "going",
    "spending",
    "time",
    "one",
    "main",
    "places",
    "us",
    "write",
    "code",
    "formatting",
    "styling",
    "file",
    "anything",
    "ends",
    "css",
    "type",
    "formatting",
    "styling",
    "tsx",
    "going",
    "typescripts",
    "index",
    "tsx",
    "going",
    "pretty",
    "much",
    "ignore",
    "going",
    "change",
    "logo",
    "ignore",
    "last",
    "bits",
    "file",
    "tells",
    "project",
    "dependencies",
    "needs",
    "js",
    "packages",
    "actually",
    "needs",
    "get",
    "started",
    "readme",
    "course",
    "fores",
    "read",
    "typescript",
    "config",
    "gives",
    "us",
    "options",
    "work",
    "typescript",
    "going",
    "ignore",
    "yarn",
    "loock",
    "autogenerated",
    "file",
    "going",
    "touch",
    "yarn",
    "going",
    "automatically",
    "create",
    "unfamiliar",
    "yarn",
    "loock",
    "unfamiliar",
    "lot",
    "stuff",
    "worry",
    "much",
    "going",
    "file",
    "really",
    "going",
    "need",
    "pay",
    "attention",
    "okay",
    "created",
    "basic",
    "create",
    "react",
    "app",
    "actually",
    "go",
    "ahead",
    "wr",
    "see",
    "front",
    "end",
    "would",
    "look",
    "like",
    "cd",
    "front",
    "end",
    "run",
    "yarn",
    "make",
    "sure",
    "everything",
    "installed",
    "yarn",
    "actually",
    "installs",
    "dependencies",
    "anything",
    "yarn",
    "going",
    "go",
    "download",
    "dependencies",
    "store",
    "node",
    "modules",
    "yarn",
    "loock",
    "going",
    "tell",
    "us",
    "exactly",
    "downloaded",
    "running",
    "yarn",
    "checks",
    "see",
    "says",
    "ah",
    "looks",
    "like",
    "already",
    "everything",
    "installed",
    "run",
    "create",
    "react",
    "app",
    "already",
    "goes",
    "ahead",
    "downloads",
    "everything",
    "run",
    "yarn",
    "start",
    "want",
    "know",
    "coming",
    "go",
    "look",
    "scripts",
    "four",
    "different",
    "scripts",
    "got",
    "actually",
    "run",
    "running",
    "yarn",
    "start",
    "runs",
    "mpx",
    "react",
    "scripts",
    "start",
    "actually",
    "start",
    "front",
    "end",
    "yarn",
    "start",
    "see",
    "react",
    "script",
    "start",
    "see",
    "says",
    "starting",
    "development",
    "server",
    "little",
    "bit",
    "time",
    "time",
    "get",
    "something",
    "looks",
    "like",
    "edit",
    "source",
    "slapp",
    "tsx",
    "save",
    "reload",
    "super",
    "simple",
    "front",
    "end",
    "obviously",
    "looking",
    "started",
    "front",
    "end",
    "fantastic",
    "say",
    "compiled",
    "successfully",
    "say",
    "view",
    "front",
    "end",
    "browser",
    "tell",
    "exactly",
    "located",
    "local",
    "host",
    "network",
    "give",
    "outputs",
    "front",
    "end",
    "going",
    "stop",
    "front",
    "end",
    "hitting",
    "command",
    "c",
    "control",
    "c",
    "closing",
    "course",
    "reload",
    "front",
    "end",
    "going",
    "blank",
    "great",
    "really",
    "basic",
    "setup",
    "working",
    "front",
    "end",
    "awesome",
    "look",
    "application",
    "like",
    "app",
    "see",
    "like",
    "really",
    "fun",
    "connect",
    "button",
    "pops",
    "got",
    "nice",
    "user",
    "interface",
    "tools",
    "actually",
    "working",
    "blockchain",
    "want",
    "reinvent",
    "wheel",
    "build",
    "custom",
    "tools",
    "going",
    "use",
    "application",
    "called",
    "usep",
    "framework",
    "called",
    "usep",
    "whole",
    "lot",
    "already",
    "built",
    "get",
    "started",
    "installing",
    "run",
    "command",
    "right",
    "yarn",
    "add",
    "used",
    "appcore",
    "front",
    "end",
    "yarn",
    "add",
    "usap",
    "slc",
    "go",
    "ahead",
    "install",
    "used",
    "app",
    "pieces",
    "front",
    "end",
    "actually",
    "work",
    "used",
    "app",
    "reinvent",
    "working",
    "wallets",
    "working",
    "ethereum",
    "smart",
    "contract",
    "applications",
    "awesome",
    "installed",
    "actually",
    "go",
    "ahead",
    "start",
    "building",
    "front",
    "end",
    "going",
    "going",
    "go",
    "app",
    "tsx",
    "folder",
    "going",
    "start",
    "going",
    "start",
    "adjusting",
    "bits",
    "yard",
    "start",
    "get",
    "little",
    "react",
    "front",
    "end",
    "go",
    "ahead",
    "something",
    "like",
    "change",
    "anything",
    "right",
    "see",
    "line",
    "says",
    "edit",
    "source",
    "apppp",
    "source",
    "slapp",
    "save",
    "reload",
    "change",
    "whole",
    "line",
    "something",
    "like",
    "hello",
    "save",
    "recompile",
    "go",
    "back",
    "says",
    "hello",
    "right",
    "actually",
    "upload",
    "update",
    "front",
    "end",
    "wonderful",
    "return",
    "pieces",
    "return",
    "sections",
    "return",
    "html",
    "actually",
    "render",
    "front",
    "end",
    "also",
    "starting",
    "point",
    "allowing",
    "application",
    "web",
    "3",
    "compa",
    "able",
    "go",
    "used",
    "dap",
    "documentation",
    "right",
    "go",
    "getting",
    "started",
    "section",
    "little",
    "example",
    "shows",
    "kind",
    "something",
    "look",
    "like",
    "right",
    "exactly",
    "clear",
    "put",
    "code",
    "wonderful",
    "step",
    "bystep",
    "bit",
    "probably",
    "helpful",
    "bit",
    "says",
    "first",
    "thing",
    "need",
    "set",
    "provider",
    "optional",
    "config",
    "wrap",
    "whole",
    "app",
    "going",
    "use",
    "dep",
    "provider",
    "tags",
    "right",
    "open",
    "tag",
    "closing",
    "tag",
    "wrap",
    "around",
    "app",
    "see",
    "whole",
    "thing",
    "right",
    "app",
    "take",
    "whole",
    "thing",
    "delete",
    "right",
    "save",
    "right",
    "go",
    "see",
    "friend",
    "going",
    "nothing",
    "going",
    "blank",
    "function",
    "app",
    "getting",
    "exported",
    "export",
    "default",
    "app",
    "getting",
    "rendered",
    "index",
    "tsx",
    "cool",
    "little",
    "app",
    "html",
    "tag",
    "thing",
    "right",
    "case",
    "want",
    "wrap",
    "whole",
    "thing",
    "tag",
    "right",
    "even",
    "copy",
    "paste",
    "provider",
    "vs",
    "code",
    "even",
    "auto",
    "adds",
    "second",
    "provider",
    "delete",
    "div",
    "class",
    "name",
    "equals",
    "app",
    "put",
    "put",
    "little",
    "divider",
    "say",
    "hi",
    "top",
    "import",
    "provider",
    "thing",
    "like",
    "weird",
    "tag",
    "going",
    "import",
    "import",
    "dep",
    "provider",
    "dep",
    "sl",
    "core",
    "hit",
    "save",
    "get",
    "weird",
    "error",
    "saying",
    "hey",
    "property",
    "config",
    "missing",
    "provider",
    "dat",
    "provider",
    "needs",
    "config",
    "associated",
    "need",
    "add",
    "config",
    "bit",
    "dat",
    "provider",
    "going",
    "config",
    "equals",
    "first",
    "bracket",
    "says",
    "going",
    "type",
    "typescript",
    "second",
    "bracket",
    "saying",
    "object",
    "config",
    "going",
    "tell",
    "application",
    "couple",
    "different",
    "things",
    "going",
    "tell",
    "supported",
    "chains",
    "networks",
    "application",
    "actually",
    "work",
    "default",
    "value",
    "supported",
    "change",
    "used",
    "app",
    "going",
    "mainnet",
    "rei",
    "koven",
    "brinkby",
    "robsten",
    "xi",
    "since",
    "going",
    "testing",
    "coen",
    "rink",
    "b",
    "could",
    "chain",
    "id",
    "coven",
    "chain",
    "id",
    "chain",
    "id",
    "another",
    "term",
    "pull",
    "right",
    "used",
    "appcore",
    "right",
    "wanted",
    "chain",
    "id",
    "could",
    "go",
    "ahead",
    "put",
    "right",
    "like",
    "wanted",
    "work",
    "ganache",
    "could",
    "1337",
    "wanted",
    "random",
    "chain",
    "could",
    "put",
    "number",
    "right",
    "shane",
    "id",
    "koven",
    "going",
    "42",
    "shane",
    "id",
    "rink",
    "going",
    "three",
    "yeah",
    "three",
    "whatever",
    "need",
    "get",
    "started",
    "working",
    "web",
    "3",
    "blockchain",
    "compatible",
    "application",
    "let",
    "go",
    "back",
    "let",
    "save",
    "refresh",
    "says",
    "hi",
    "going",
    "going",
    "spend",
    "lot",
    "time",
    "source",
    "folder",
    "since",
    "going",
    "lot",
    "let",
    "let",
    "cleanup",
    "cut",
    "amount",
    "fat",
    "crate",
    "react",
    "app",
    "going",
    "toss",
    "app",
    "test",
    "yes",
    "tests",
    "great",
    "going",
    "toss",
    "going",
    "leave",
    "need",
    "index",
    "tsx",
    "need",
    "logo",
    "bit",
    "anymore",
    "going",
    "use",
    "logo",
    "need",
    "also",
    "need",
    "since",
    "running",
    "tests",
    "anymore",
    "need",
    "going",
    "leave",
    "case",
    "guys",
    "want",
    "later",
    "go",
    "back",
    "add",
    "tests",
    "great",
    "looking",
    "little",
    "bit",
    "lighter",
    "app",
    "let",
    "remove",
    "app",
    "css",
    "let",
    "remove",
    "logo",
    "svv",
    "go",
    "bye",
    "okay",
    "going",
    "create",
    "called",
    "component",
    "going",
    "create",
    "header",
    "component",
    "react",
    "components",
    "basically",
    "put",
    "modular",
    "parts",
    "front",
    "end",
    "going",
    "create",
    "one",
    "components",
    "going",
    "header",
    "component",
    "going",
    "create",
    "new",
    "folder",
    "call",
    "components",
    "going",
    "create",
    "new",
    "file",
    "called",
    "header",
    "tsx",
    "going",
    "put",
    "header",
    "stuff",
    "looking",
    "make",
    "little",
    "button",
    "right",
    "looking",
    "make",
    "little",
    "button",
    "header",
    "going",
    "going",
    "import",
    "stuff",
    "going",
    "import",
    "use",
    "ethers",
    "usep",
    "slore",
    "look",
    "documentation",
    "real",
    "quick",
    "use",
    "ethers",
    "thing",
    "got",
    "cool",
    "stuff",
    "got",
    "activate",
    "browser",
    "wallet",
    "thing",
    "got",
    "account",
    "thing",
    "got",
    "got",
    "cool",
    "stuff",
    "actually",
    "going",
    "start",
    "exporting",
    "constant",
    "variable",
    "called",
    "header",
    "going",
    "function",
    "really",
    "really",
    "fancy",
    "typescript",
    "syntax",
    "meaning",
    "saying",
    "header",
    "function",
    "function",
    "going",
    "going",
    "use",
    "use",
    "easter",
    "thing",
    "get",
    "couple",
    "var",
    "variables",
    "going",
    "say",
    "constant",
    "variable",
    "account",
    "activate",
    "browser",
    "wallet",
    "deactivate",
    "equals",
    "use",
    "ethers",
    "order",
    "us",
    "actually",
    "use",
    "though",
    "need",
    "figure",
    "first",
    "user",
    "connected",
    "going",
    "create",
    "another",
    "constant",
    "variable",
    "call",
    "connected",
    "going",
    "equal",
    "account",
    "going",
    "equal",
    "account",
    "going",
    "equal",
    "account",
    "equal",
    "undefined",
    "saying",
    "account",
    "undefined",
    "connected",
    "undefined",
    "great",
    "connected",
    "literally",
    "looking",
    "see",
    "account",
    "whether",
    "connected",
    "decide",
    "show",
    "connect",
    "button",
    "going",
    "return",
    "div",
    "going",
    "return",
    "html",
    "stuff",
    "got",
    "check",
    "see",
    "connected",
    "connected",
    "going",
    "use",
    "question",
    "mark",
    "known",
    "tertiary",
    "operator",
    "means",
    "true",
    "going",
    "something",
    "false",
    "going",
    "something",
    "else",
    "saying",
    "okay",
    "connected",
    "right",
    "connected",
    "well",
    "going",
    "create",
    "button",
    "color",
    "equal",
    "primary",
    "create",
    "button",
    "vs",
    "code",
    "autom",
    "makes",
    "closing",
    "tags",
    "even",
    "leave",
    "button",
    "blank",
    "want",
    "actually",
    "going",
    "put",
    "fancy",
    "stuff",
    "put",
    "little",
    "function",
    "say",
    "click",
    "equals",
    "deactivate",
    "deactivate",
    "function",
    "pulled",
    "use",
    "ethers",
    "thing",
    "spell",
    "right",
    "though",
    "going",
    "call",
    "button",
    "disconnect",
    "oops",
    "little",
    "parentheses",
    "next",
    "connect",
    "thing",
    "saying",
    "connected",
    "right",
    "going",
    "little",
    "colon",
    "going",
    "represent",
    "going",
    "connected",
    "okay",
    "connected",
    "going",
    "show",
    "different",
    "button",
    "color",
    "still",
    "primary",
    "going",
    "onclick",
    "going",
    "function",
    "activate",
    "browser",
    "wallet",
    "close",
    "button",
    "tag",
    "another",
    "back",
    "slash",
    "button",
    "call",
    "one",
    "though",
    "connected",
    "going",
    "show",
    "disconnect",
    "button",
    "connected",
    "going",
    "show",
    "connect",
    "button",
    "right",
    "make",
    "sure",
    "divs",
    "tab",
    "matched",
    "go",
    "ahead",
    "save",
    "look",
    "ui",
    "see",
    "nothing",
    "changed",
    "right",
    "okay",
    "well",
    "anything",
    "changed",
    "well",
    "component",
    "made",
    "living",
    "inside",
    "components",
    "folder",
    "exported",
    "header",
    "variable",
    "header",
    "function",
    "right",
    "however",
    "actually",
    "app",
    "right",
    "look",
    "index",
    "tsx",
    "actually",
    "getting",
    "rendered",
    "rendering",
    "app",
    "variable",
    "pulled",
    "know",
    "doapp",
    "right",
    "app",
    "tsx",
    "index",
    "tsx",
    "really",
    "true",
    "ground",
    "zero",
    "everything",
    "really",
    "comes",
    "kind",
    "entry",
    "point",
    "right",
    "main",
    "function",
    "kind",
    "think",
    "way",
    "pulls",
    "app",
    "file",
    "see",
    "reference",
    "header",
    "right",
    "provider",
    "div",
    "tag",
    "saying",
    "hi",
    "header",
    "need",
    "need",
    "import",
    "component",
    "made",
    "app",
    "tsx",
    "going",
    "going",
    "import",
    "header",
    "slash",
    "components",
    "slash",
    "header",
    "take",
    "header",
    "bit",
    "place",
    "inside",
    "header",
    "tags",
    "header",
    "close",
    "tag",
    "adding",
    "right",
    "save",
    "head",
    "back",
    "see",
    "little",
    "connect",
    "button",
    "great",
    "obviously",
    "look",
    "great",
    "functionality",
    "want",
    "hit",
    "connect",
    "button",
    "metamask",
    "actually",
    "pop",
    "say",
    "hey",
    "would",
    "like",
    "connect",
    "account",
    "would",
    "like",
    "connect",
    "going",
    "go",
    "ahead",
    "select",
    "first",
    "one",
    "next",
    "connect",
    "connecting",
    "actually",
    "going",
    "connected",
    "let",
    "go",
    "one",
    "supported",
    "networks",
    "like",
    "koven",
    "see",
    "onclick",
    "equals",
    "disconnect",
    "click",
    "oops",
    "need",
    "actually",
    "sorry",
    "need",
    "put",
    "inside",
    "tag",
    "moved",
    "click",
    "inside",
    "little",
    "button",
    "see",
    "actually",
    "says",
    "disconnect",
    "click",
    "get",
    "disconnected",
    "iit",
    "connect",
    "get",
    "automatically",
    "connected",
    "right",
    "look",
    "metamask",
    "see",
    "connected",
    "right",
    "right",
    "little",
    "little",
    "green",
    "thing",
    "also",
    "manually",
    "disconnect",
    "going",
    "right",
    "metamasks",
    "click",
    "connected",
    "thing",
    "click",
    "account",
    "hit",
    "disconnect",
    "account",
    "see",
    "front",
    "end",
    "indeed",
    "update",
    "awesome",
    "take",
    "metamasks",
    "actually",
    "inject",
    "front",
    "ends",
    "actually",
    "use",
    "front",
    "ends",
    "great",
    "job",
    "absolutely",
    "massive",
    "far",
    "might",
    "saying",
    "hey",
    "patrick",
    "cool",
    "uh",
    "look",
    "good",
    "kind",
    "gross",
    "button",
    "top",
    "right",
    "corner",
    "style",
    "make",
    "look",
    "lot",
    "nicer",
    "answer",
    "absolutely",
    "yes",
    "lot",
    "different",
    "styling",
    "packages",
    "100",
    "write",
    "custom",
    "ones",
    "going",
    "using",
    "one",
    "called",
    "material",
    "ui",
    "popular",
    "react",
    "framework",
    "creating",
    "components",
    "lot",
    "styling",
    "lot",
    "really",
    "nice",
    "work",
    "going",
    "adding",
    "project",
    "well",
    "add",
    "going",
    "use",
    "line",
    "going",
    "go",
    "ahead",
    "come",
    "going",
    "cancel",
    "contrl",
    "c",
    "yarn",
    "add",
    "material",
    "hyphen",
    "ui",
    "slore",
    "give",
    "us",
    "access",
    "really",
    "nice",
    "libraries",
    "styling",
    "buttons",
    "styling",
    "lot",
    "things",
    "going",
    "working",
    "back",
    "header",
    "add",
    "styling",
    "going",
    "import",
    "button",
    "make",
    "make",
    "styles",
    "material",
    "pyph",
    "core",
    "going",
    "use",
    "button",
    "make",
    "styles",
    "look",
    "documentation",
    "find",
    "butt",
    "kind",
    "like",
    "default",
    "buttons",
    "look",
    "like",
    "looks",
    "pretty",
    "good",
    "looks",
    "lot",
    "better",
    "currently",
    "also",
    "going",
    "taking",
    "advantage",
    "make",
    "styles",
    "bit",
    "make",
    "styles",
    "way",
    "actually",
    "styles",
    "based",
    "different",
    "themes",
    "actually",
    "use",
    "materials",
    "ui",
    "going",
    "working",
    "css",
    "files",
    "going",
    "working",
    "make",
    "styles",
    "instead",
    "prefer",
    "css",
    "absolutely",
    "easily",
    "translate",
    "css",
    "files",
    "going",
    "add",
    "ed",
    "styles",
    "first",
    "using",
    "make",
    "styles",
    "going",
    "const",
    "use",
    "styles",
    "equals",
    "make",
    "styles",
    "put",
    "theme",
    "going",
    "set",
    "default",
    "theme",
    "um",
    "documentation",
    "want",
    "go",
    "ahead",
    "add",
    "old",
    "themes",
    "though",
    "say",
    "make",
    "styles",
    "function",
    "going",
    "container",
    "container",
    "going",
    "add",
    "padding",
    "theme",
    "spacing",
    "going",
    "add",
    "display",
    "flex",
    "going",
    "add",
    "justify",
    "content",
    "flex",
    "end",
    "going",
    "add",
    "gap",
    "even",
    "spacing",
    "one",
    "really",
    "typical",
    "css",
    "stuff",
    "going",
    "take",
    "use",
    "style",
    "constant",
    "made",
    "going",
    "const",
    "classes",
    "equals",
    "ust",
    "styles",
    "classes",
    "object",
    "start",
    "working",
    "going",
    "take",
    "classes",
    "object",
    "little",
    "connected",
    "thing",
    "going",
    "div",
    "class",
    "name",
    "equals",
    "little",
    "javascript",
    "classes",
    "container",
    "going",
    "wrap",
    "whole",
    "thing",
    "div",
    "right",
    "going",
    "style",
    "whole",
    "button",
    "div",
    "go",
    "ahead",
    "yarn",
    "start",
    "shut",
    "come",
    "back",
    "going",
    "see",
    "going",
    "look",
    "little",
    "bit",
    "different",
    "moved",
    "like",
    "fun",
    "little",
    "disconnect",
    "connect",
    "button",
    "padding",
    "looks",
    "little",
    "bit",
    "nicer",
    "going",
    "change",
    "buttons",
    "kind",
    "button",
    "materials",
    "ui",
    "going",
    "swap",
    "buttons",
    "new",
    "button",
    "go",
    "back",
    "see",
    "looks",
    "even",
    "nicer",
    "swapped",
    "uh",
    "new",
    "type",
    "button",
    "right",
    "got",
    "nice",
    "little",
    "clicky",
    "feel",
    "also",
    "another",
    "line",
    "called",
    "variant",
    "equals",
    "contained",
    "buttons",
    "right",
    "next",
    "color",
    "primary",
    "variant",
    "contained",
    "go",
    "back",
    "really",
    "nice",
    "button",
    "awesome",
    "like",
    "really",
    "nice",
    "button",
    "let",
    "create",
    "component",
    "contain",
    "meat",
    "application",
    "though",
    "materials",
    "ui",
    "going",
    "use",
    "called",
    "containers",
    "right",
    "nice",
    "little",
    "containers",
    "going",
    "allow",
    "us",
    "style",
    "make",
    "different",
    "sections",
    "well",
    "use",
    "import",
    "container",
    "bit",
    "materials",
    "ui",
    "import",
    "container",
    "material",
    "hyph",
    "ui",
    "slc",
    "core",
    "app",
    "tsx",
    "header",
    "make",
    "little",
    "container",
    "container",
    "give",
    "closing",
    "tag",
    "container",
    "maybe",
    "put",
    "little",
    "div",
    "high",
    "right",
    "remove",
    "div",
    "paste",
    "see",
    "formatted",
    "little",
    "bit",
    "right",
    "pushed",
    "side",
    "still",
    "says",
    "high",
    "going",
    "want",
    "one",
    "thing",
    "going",
    "give",
    "max",
    "width",
    "md",
    "oops",
    "max",
    "width",
    "equals",
    "md",
    "max",
    "width",
    "look",
    "docs",
    "materials",
    "ui",
    "different",
    "sizes",
    "large",
    "large",
    "medium",
    "small",
    "extra",
    "large",
    "extra",
    "small",
    "false",
    "right",
    "different",
    "options",
    "max",
    "width",
    "going",
    "medium",
    "save",
    "go",
    "wrap",
    "see",
    "pushed",
    "little",
    "bit",
    "time",
    "add",
    "main",
    "pieces",
    "right",
    "going",
    "need",
    "top",
    "piece",
    "staking",
    "bottom",
    "piece",
    "unstaking",
    "actually",
    "going",
    "create",
    "new",
    "component",
    "called",
    "main",
    "going",
    "main",
    "component",
    "going",
    "create",
    "new",
    "file",
    "components",
    "called",
    "main",
    "tsx",
    "let",
    "start",
    "showing",
    "information",
    "wallet",
    "right",
    "showing",
    "wallet",
    "associated",
    "smart",
    "contracts",
    "say",
    "export",
    "constant",
    "variable",
    "called",
    "main",
    "function",
    "syntax",
    "functions",
    "typescript",
    "javascript",
    "order",
    "us",
    "show",
    "amounts",
    "current",
    "wallet",
    "going",
    "need",
    "know",
    "chain",
    "even",
    "network",
    "going",
    "determine",
    "addresses",
    "right",
    "going",
    "different",
    "coen",
    "main",
    "etc",
    "gets",
    "little",
    "bit",
    "interesting",
    "obviously",
    "brownie",
    "know",
    "addresses",
    "right",
    "brownie",
    "keeps",
    "track",
    "us",
    "right",
    "builds",
    "folder",
    "deployments",
    "folder",
    "look",
    "actually",
    "deployed",
    "coen",
    "see",
    "42",
    "see",
    "stuff",
    "see",
    "map",
    "json",
    "recent",
    "deployments",
    "tokens",
    "tokens",
    "token",
    "farm",
    "actually",
    "deployed",
    "koven",
    "deployed",
    "coen",
    "highly",
    "recommend",
    "well",
    "way",
    "test",
    "front",
    "ends",
    "real",
    "test",
    "order",
    "get",
    "addresses",
    "going",
    "ask",
    "brownie",
    "hey",
    "brownie",
    "addresses",
    "coming",
    "going",
    "need",
    "grab",
    "information",
    "browning",
    "config",
    "basically",
    "going",
    "need",
    "get",
    "information",
    "information",
    "browning",
    "config",
    "right",
    "addresses",
    "already",
    "want",
    "however",
    "really",
    "hard",
    "nodejs",
    "work",
    "outside",
    "source",
    "folder",
    "going",
    "want",
    "going",
    "want",
    "send",
    "brownie",
    "config",
    "front",
    "end",
    "way",
    "going",
    "going",
    "actually",
    "modify",
    "adding",
    "new",
    "function",
    "called",
    "def",
    "update",
    "front",
    "end",
    "reason",
    "works",
    "contracts",
    "front",
    "end",
    "repository",
    "real",
    "world",
    "deploy",
    "contracts",
    "addresses",
    "pretty",
    "much",
    "set",
    "copy",
    "paste",
    "front",
    "end",
    "repository",
    "us",
    "set",
    "contracts",
    "yet",
    "need",
    "way",
    "update",
    "front",
    "end",
    "going",
    "going",
    "send",
    "brownie",
    "config",
    "front",
    "end",
    "right",
    "way",
    "main",
    "know",
    "addresses",
    "also",
    "going",
    "need",
    "send",
    "going",
    "need",
    "send",
    "brownie",
    "config",
    "source",
    "folder",
    "also",
    "going",
    "need",
    "send",
    "build",
    "folder",
    "access",
    "dap",
    "token",
    "address",
    "mock",
    "addresses",
    "using",
    "going",
    "open",
    "browning",
    "config",
    "going",
    "paste",
    "going",
    "dump",
    "config",
    "source",
    "folder",
    "typescript",
    "work",
    "yaml",
    "well",
    "works",
    "jason",
    "really",
    "well",
    "actually",
    "going",
    "convert",
    "yaml",
    "json",
    "dump",
    "front",
    "end",
    "going",
    "open",
    "brownie",
    "config",
    "going",
    "say",
    "open",
    "brownie",
    "config",
    "yaml",
    "going",
    "open",
    "read",
    "format",
    "going",
    "say",
    "browny",
    "config",
    "going",
    "say",
    "config",
    "dictionary",
    "equals",
    "yl",
    "load",
    "browny",
    "config",
    "loader",
    "equals",
    "yaml",
    "full",
    "loader",
    "going",
    "import",
    "yaml",
    "top",
    "going",
    "import",
    "yaml",
    "yaml",
    "going",
    "going",
    "allow",
    "us",
    "load",
    "yaml",
    "dictionary",
    "really",
    "probably",
    "right",
    "going",
    "want",
    "run",
    "pip",
    "install",
    "paml",
    "actually",
    "get",
    "able",
    "got",
    "dictionary",
    "going",
    "want",
    "send",
    "front",
    "end",
    "right",
    "going",
    "want",
    "write",
    "dictionary",
    "adjacent",
    "object",
    "front",
    "end",
    "going",
    "say",
    "open",
    "going",
    "open",
    "front",
    "end",
    "source",
    "folder",
    "going",
    "dump",
    "file",
    "going",
    "call",
    "brownie",
    "config",
    "json",
    "going",
    "open",
    "new",
    "file",
    "right",
    "mode",
    "say",
    "brownie",
    "config",
    "json",
    "going",
    "called",
    "json",
    "dump",
    "going",
    "take",
    "dictionary",
    "dump",
    "json",
    "file",
    "gon",
    "na",
    "say",
    "json",
    "dump",
    "config",
    "dick",
    "brownie",
    "config",
    "jason",
    "course",
    "going",
    "import",
    "json",
    "end",
    "even",
    "print",
    "front",
    "updated",
    "update",
    "front",
    "end",
    "script",
    "run",
    "deploy",
    "token",
    "token",
    "add",
    "update",
    "front",
    "end",
    "bit",
    "want",
    "always",
    "update",
    "front",
    "end",
    "right",
    "want",
    "one",
    "working",
    "front",
    "end",
    "deploy",
    "token",
    "farm",
    "dap",
    "token",
    "going",
    "set",
    "update",
    "front",
    "end",
    "equals",
    "false",
    "default",
    "false",
    "way",
    "run",
    "tests",
    "front",
    "end",
    "wo",
    "get",
    "updated",
    "right",
    "say",
    "upate",
    "front",
    "end",
    "update",
    "front",
    "end",
    "otherwise",
    "wo",
    "main",
    "function",
    "say",
    "update",
    "front",
    "end",
    "equals",
    "trip",
    "deploy",
    "coen",
    "rink",
    "b",
    "automatically",
    "update",
    "send",
    "brownie",
    "config",
    "let",
    "actually",
    "change",
    "front",
    "end",
    "update",
    "instead",
    "update",
    "front",
    "end",
    "method",
    "name",
    "boolean",
    "front",
    "update",
    "instead",
    "deploy",
    "actually",
    "go",
    "ahead",
    "update",
    "front",
    "end",
    "always",
    "going",
    "redeploy",
    "let",
    "also",
    "create",
    "update",
    "front",
    "end",
    "py",
    "script",
    "call",
    "function",
    "made",
    "def",
    "main",
    "update",
    "front",
    "end",
    "scripts",
    "deoy",
    "import",
    "update",
    "front",
    "end",
    "semicolon",
    "great",
    "let",
    "open",
    "new",
    "shell",
    "shell",
    "hitting",
    "little",
    "plus",
    "button",
    "two",
    "shell",
    "brownie",
    "run",
    "scripts",
    "update",
    "front",
    "end",
    "matter",
    "network",
    "going",
    "going",
    "run",
    "copy",
    "script",
    "right",
    "going",
    "run",
    "update",
    "front",
    "end",
    "script",
    "made",
    "right",
    "right",
    "brownie",
    "front",
    "end",
    "sl",
    "source",
    "directory",
    "go",
    "go",
    "source",
    "directory",
    "indeed",
    "see",
    "right",
    "need",
    "anything",
    "else",
    "well",
    "going",
    "give",
    "us",
    "addresses",
    "right",
    "going",
    "give",
    "us",
    "going",
    "give",
    "us",
    "addresses",
    "going",
    "give",
    "us",
    "everything",
    "dap",
    "token",
    "right",
    "dap",
    "token",
    "going",
    "something",
    "browning",
    "config",
    "w",
    "token",
    "fau",
    "token",
    "sure",
    "config",
    "dap",
    "token",
    "going",
    "something",
    "going",
    "deployed",
    "us",
    "need",
    "send",
    "front",
    "end",
    "need",
    "send",
    "basically",
    "whole",
    "build",
    "folder",
    "going",
    "need",
    "update",
    "update",
    "front",
    "end",
    "script",
    "also",
    "send",
    "send",
    "build",
    "folder",
    "know",
    "actually",
    "going",
    "copying",
    "number",
    "different",
    "folders",
    "going",
    "go",
    "ahead",
    "make",
    "new",
    "function",
    "called",
    "copy",
    "folders",
    "front",
    "end",
    "going",
    "make",
    "copy",
    "folders",
    "front",
    "end",
    "function",
    "going",
    "couple",
    "clever",
    "python",
    "things",
    "going",
    "take",
    "source",
    "destination",
    "want",
    "source",
    "folder",
    "destination",
    "folder",
    "going",
    "copy",
    "build",
    "folder",
    "move",
    "know",
    "folder",
    "front",
    "front",
    "first",
    "going",
    "check",
    "destination",
    "exists",
    "exists",
    "going",
    "kill",
    "going",
    "going",
    "remove",
    "going",
    "say",
    "os",
    "path",
    "exists",
    "destination",
    "going",
    "shuttle",
    "rm",
    "tree",
    "going",
    "kill",
    "everything",
    "need",
    "import",
    "going",
    "import",
    "os",
    "going",
    "import",
    "shuttle",
    "shutil",
    "actually",
    "idea",
    "pronounce",
    "going",
    "remove",
    "whole",
    "bit",
    "going",
    "copy",
    "everything",
    "build",
    "folder",
    "going",
    "shuttle",
    "copy",
    "tree",
    "src",
    "test",
    "gon",
    "na",
    "say",
    "hey",
    "build",
    "folder",
    "exists",
    "front",
    "end",
    "delete",
    "going",
    "copy",
    "everything",
    "build",
    "folder",
    "going",
    "copy",
    "folders",
    "front",
    "end",
    "times",
    "first",
    "thing",
    "course",
    "like",
    "said",
    "going",
    "build",
    "folder",
    "going",
    "copy",
    "folders",
    "front",
    "end",
    "source",
    "going",
    "beu",
    "going",
    "take",
    "whole",
    "build",
    "thing",
    "going",
    "move",
    "slash",
    "front",
    "end",
    "slsrc",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "chain",
    "info",
    "right",
    "going",
    "build",
    "information",
    "right",
    "cool",
    "run",
    "browny",
    "run",
    "scripts",
    "update",
    "front",
    "end",
    "go",
    "ahead",
    "run",
    "great",
    "front",
    "end",
    "updated",
    "look",
    "front",
    "end",
    "look",
    "source",
    "chain",
    "info",
    "folder",
    "literally",
    "build",
    "folder",
    "fer",
    "awesome",
    "actually",
    "start",
    "working",
    "pieces",
    "front",
    "end",
    "let",
    "figure",
    "get",
    "dep",
    "token",
    "address",
    "well",
    "get",
    "dap",
    "token",
    "address",
    "going",
    "need",
    "map",
    "got",
    "chain",
    "info",
    "deployments",
    "also",
    "going",
    "need",
    "know",
    "chain",
    "currently",
    "like",
    "saw",
    "chain",
    "id",
    "usape",
    "tell",
    "us",
    "chain",
    "id",
    "current",
    "network",
    "go",
    "go",
    "ahead",
    "import",
    "well",
    "going",
    "going",
    "import",
    "use",
    "ethers",
    "use",
    "daap",
    "sl",
    "core",
    "going",
    "use",
    "ethers",
    "allows",
    "us",
    "get",
    "chain",
    "id",
    "working",
    "say",
    "cons",
    "chain",
    "id",
    "equals",
    "use",
    "ethers",
    "chain",
    "id",
    "going",
    "map",
    "name",
    "network",
    "right",
    "brownie",
    "config",
    "network",
    "section",
    "mapped",
    "name",
    "network",
    "id",
    "actually",
    "going",
    "going",
    "create",
    "helper",
    "config",
    "src",
    "going",
    "create",
    "new",
    "file",
    "helper",
    "config",
    "json",
    "literally",
    "going",
    "json",
    "object",
    "maps",
    "numbers",
    "associated",
    "chain",
    "names",
    "42",
    "example",
    "going",
    "koven",
    "four",
    "going",
    "rink",
    "b",
    "1337",
    "going",
    "dev",
    "could",
    "also",
    "ganach",
    "right",
    "one",
    "going",
    "main",
    "net",
    "etc",
    "helper",
    "config",
    "import",
    "helper",
    "config",
    "helper",
    "even",
    "get",
    "db",
    "token",
    "address",
    "const",
    "network",
    "name",
    "going",
    "equal",
    "helper",
    "config",
    "chain",
    "id",
    "typescript",
    "actually",
    "going",
    "get",
    "little",
    "bit",
    "mad",
    "us",
    "need",
    "add",
    "little",
    "bit",
    "line",
    "actually",
    "need",
    "say",
    "okay",
    "grab",
    "helper",
    "config",
    "chain",
    "id",
    "exists",
    "right",
    "might",
    "chance",
    "train",
    "chain",
    "id",
    "nothing",
    "something",
    "really",
    "weird",
    "going",
    "say",
    "chain",
    "id",
    "going",
    "use",
    "tertiary",
    "tertiary",
    "operator",
    "going",
    "say",
    "chain",
    "id",
    "exists",
    "go",
    "ahead",
    "use",
    "helper",
    "config",
    "however",
    "exist",
    "use",
    "dev",
    "spell",
    "chain",
    "id",
    "right",
    "get",
    "really",
    "confused",
    "whenever",
    "return",
    "one",
    "components",
    "try",
    "use",
    "one",
    "components",
    "always",
    "going",
    "return",
    "type",
    "html",
    "div",
    "tag",
    "like",
    "head",
    "app",
    "add",
    "little",
    "main",
    "bit",
    "course",
    "going",
    "want",
    "import",
    "say",
    "import",
    "main",
    "components",
    "sl",
    "main",
    "save",
    "add",
    "main",
    "tag",
    "main",
    "open",
    "syntax",
    "basically",
    "saying",
    "depending",
    "setup",
    "might",
    "actually",
    "run",
    "eror",
    "saying",
    "element",
    "implicitly",
    "type",
    "expression",
    "blah",
    "blah",
    "blah",
    "might",
    "saying",
    "okay",
    "well",
    "going",
    "make",
    "lives",
    "easier",
    "going",
    "tone",
    "typescripts",
    "strictness",
    "going",
    "typescript",
    "actually",
    "going",
    "add",
    "press",
    "implicit",
    "index",
    "errors",
    "basically",
    "suppressing",
    "get",
    "type",
    "error",
    "ever",
    "actually",
    "going",
    "affect",
    "anything",
    "probably",
    "probably",
    "spell",
    "correctly",
    "save",
    "save",
    "file",
    "going",
    "actually",
    "get",
    "saying",
    "everything",
    "compiled",
    "everything",
    "looks",
    "good",
    "refresh",
    "front",
    "end",
    "going",
    "get",
    "back",
    "exactly",
    "also",
    "also",
    "also",
    "see",
    "console",
    "exactly",
    "going",
    "look",
    "like",
    "chain",
    "id",
    "network",
    "name",
    "save",
    "go",
    "back",
    "go",
    "hit",
    "inspect",
    "go",
    "console",
    "see",
    "42",
    "koven",
    "gets",
    "printed",
    "console",
    "42",
    "chain",
    "id",
    "koven",
    "network",
    "name",
    "know",
    "right",
    "okay",
    "great",
    "network",
    "name",
    "chain",
    "id",
    "got",
    "way",
    "us",
    "update",
    "front",
    "end",
    "new",
    "script",
    "let",
    "finally",
    "get",
    "different",
    "addresses",
    "need",
    "say",
    "constant",
    "variable",
    "dap",
    "token",
    "address",
    "going",
    "equal",
    "something",
    "build",
    "folder",
    "chain",
    "info",
    "folder",
    "created",
    "inside",
    "inside",
    "deployments",
    "map",
    "json",
    "since",
    "already",
    "deployed",
    "koven",
    "dap",
    "token",
    "token",
    "farm",
    "coen",
    "network",
    "use",
    "say",
    "connected",
    "chan",
    "id",
    "question",
    "mark",
    "saying",
    "chain",
    "id",
    "exists",
    "look",
    "mapping",
    "else",
    "going",
    "use",
    "zero",
    "address",
    "right",
    "actually",
    "get",
    "mapping",
    "though",
    "going",
    "say",
    "import",
    "network",
    "mapping",
    "going",
    "chain",
    "info",
    "folder",
    "inside",
    "deployments",
    "deployments",
    "going",
    "map",
    "json",
    "going",
    "take",
    "network",
    "mapping",
    "object",
    "going",
    "say",
    "chain",
    "id",
    "exists",
    "inside",
    "network",
    "mapping",
    "json",
    "object",
    "going",
    "cast",
    "chain",
    "id",
    "string",
    "going",
    "grab",
    "name",
    "dap",
    "token",
    "going",
    "dap",
    "token",
    "going",
    "grab",
    "whatever",
    "address",
    "top",
    "right",
    "going",
    "big",
    "list",
    "times",
    "deploy",
    "times",
    "brown",
    "going",
    "keep",
    "track",
    "going",
    "different",
    "addresses",
    "want",
    "one",
    "right",
    "top",
    "right",
    "want",
    "recent",
    "one",
    "going",
    "say",
    "position",
    "zero",
    "otherwise",
    "chain",
    "id",
    "going",
    "use",
    "zero",
    "address",
    "ether",
    "js",
    "actually",
    "really",
    "nice",
    "package",
    "give",
    "us",
    "called",
    "constants",
    "going",
    "constants",
    "dot",
    "address",
    "zero",
    "import",
    "ethers",
    "import",
    "conant",
    "ethers",
    "already",
    "ethers",
    "installed",
    "going",
    "cd",
    "front",
    "end",
    "going",
    "yarn",
    "add",
    "ethers",
    "ethers",
    "package",
    "going",
    "thing",
    "token",
    "fa",
    "token",
    "tokens",
    "defined",
    "brownie",
    "config",
    "os",
    "defined",
    "map",
    "json",
    "get",
    "ones",
    "going",
    "say",
    "const",
    "token",
    "address",
    "going",
    "equal",
    "let",
    "check",
    "first",
    "chain",
    "id",
    "exists",
    "going",
    "grab",
    "brownie",
    "config",
    "grab",
    "going",
    "import",
    "brownie",
    "config",
    "imported",
    "brownie",
    "work",
    "brownie",
    "config",
    "inside",
    "front",
    "end",
    "say",
    "brownie",
    "config",
    "networks",
    "network",
    "name",
    "left",
    "token",
    "chain",
    "id",
    "oops",
    "chain",
    "id",
    "exist",
    "going",
    "constants",
    "address",
    "zero",
    "going",
    "leave",
    "blank",
    "going",
    "exact",
    "thing",
    "fu",
    "slth",
    "die",
    "token",
    "const",
    "fu",
    "token",
    "address",
    "equals",
    "chain",
    "id",
    "question",
    "mark",
    "chain",
    "id",
    "exist",
    "brownie",
    "config",
    "networks",
    "network",
    "name",
    "fau",
    "token",
    "chain",
    "id",
    "exist",
    "constants",
    "address",
    "zero",
    "okay",
    "awesome",
    "save",
    "oops",
    "looks",
    "like",
    "put",
    "extra",
    "comma",
    "accident",
    "going",
    "get",
    "rid",
    "resave",
    "refresh",
    "getting",
    "issue",
    "uh",
    "rink",
    "chain",
    "right",
    "saying",
    "hey",
    "nothing",
    "rink",
    "dap",
    "token",
    "rink",
    "beat",
    "got",
    "coen",
    "go",
    "back",
    "koven",
    "refresh",
    "works",
    "fine",
    "right",
    "might",
    "still",
    "break",
    "coen",
    "deployed",
    "anything",
    "coen",
    "fix",
    "config",
    "provider",
    "changing",
    "supported",
    "chains",
    "typically",
    "lot",
    "times",
    "going",
    "want",
    "test",
    "using",
    "ganache",
    "chain",
    "type",
    "local",
    "chain",
    "front",
    "end",
    "testing",
    "lot",
    "faster",
    "going",
    "everything",
    "coen",
    "nice",
    "little",
    "challenge",
    "would",
    "refactor",
    "also",
    "works",
    "something",
    "like",
    "ganache",
    "going",
    "use",
    "ganache",
    "going",
    "go",
    "back",
    "app",
    "tsx",
    "going",
    "remove",
    "ganache",
    "even",
    "going",
    "even",
    "remove",
    "rink",
    "b",
    "going",
    "work",
    "coen",
    "make",
    "simple",
    "go",
    "react",
    "page",
    "refresh",
    "connect",
    "awesome",
    "go",
    "rink",
    "b",
    "going",
    "freak",
    "says",
    "hey",
    "rink",
    "b",
    "even",
    "supported",
    "care",
    "however",
    "koven",
    "supported",
    "connected",
    "looking",
    "good",
    "thing",
    "really",
    "want",
    "couple",
    "front",
    "end",
    "contracts",
    "right",
    "really",
    "want",
    "code",
    "contracts",
    "independently",
    "front",
    "end",
    "independently",
    "anyways",
    "let",
    "get",
    "back",
    "main",
    "tsx",
    "going",
    "already",
    "done",
    "great",
    "things",
    "gotten",
    "network",
    "chain",
    "id",
    "gotten",
    "different",
    "addresses",
    "different",
    "tokens",
    "probably",
    "see",
    "place",
    "actually",
    "going",
    "put",
    "stuff",
    "front",
    "end",
    "little",
    "return",
    "statement",
    "right",
    "right",
    "returning",
    "main",
    "see",
    "main",
    "right",
    "actually",
    "going",
    "make",
    "another",
    "component",
    "going",
    "make",
    "component",
    "called",
    "wallet",
    "component",
    "going",
    "part",
    "main",
    "component",
    "component",
    "inside",
    "component",
    "literally",
    "going",
    "address",
    "wallet",
    "needs",
    "little",
    "components",
    "tab",
    "going",
    "go",
    "ahead",
    "create",
    "new",
    "folder",
    "going",
    "call",
    "wallet",
    "going",
    "everything",
    "wallet",
    "let",
    "get",
    "create",
    "new",
    "file",
    "going",
    "actually",
    "make",
    "couple",
    "files",
    "first",
    "one",
    "going",
    "wallet",
    "tsx",
    "going",
    "component",
    "going",
    "deal",
    "getting",
    "wallet",
    "getting",
    "token",
    "balances",
    "different",
    "tokens",
    "since",
    "know",
    "going",
    "put",
    "component",
    "main",
    "main",
    "home",
    "base",
    "app",
    "tsx",
    "know",
    "going",
    "export",
    "const",
    "wallet",
    "make",
    "function",
    "order",
    "actually",
    "show",
    "tokens",
    "need",
    "get",
    "information",
    "component",
    "need",
    "get",
    "information",
    "supported",
    "tokens",
    "even",
    "going",
    "main",
    "actually",
    "pass",
    "variable",
    "wallet",
    "going",
    "call",
    "supported",
    "tokens",
    "going",
    "type",
    "wallet",
    "music",
    "props",
    "going",
    "wallet",
    "props",
    "tell",
    "typescript",
    "supported",
    "tokens",
    "going",
    "look",
    "like",
    "going",
    "say",
    "interface",
    "wallet",
    "props",
    "going",
    "look",
    "like",
    "like",
    "supported",
    "tokens",
    "going",
    "array",
    "token",
    "array",
    "token",
    "going",
    "grab",
    "token",
    "type",
    "main",
    "well",
    "actually",
    "going",
    "import",
    "token",
    "main",
    "main",
    "going",
    "pass",
    "token",
    "going",
    "pass",
    "supported",
    "tokens",
    "wallet",
    "right",
    "underneath",
    "three",
    "token",
    "addresses",
    "back",
    "main",
    "going",
    "const",
    "supported",
    "tokens",
    "going",
    "array",
    "token",
    "token",
    "type",
    "going",
    "export",
    "type",
    "token",
    "equals",
    "going",
    "say",
    "token",
    "type",
    "going",
    "involve",
    "image",
    "going",
    "string",
    "address",
    "also",
    "going",
    "string",
    "name",
    "also",
    "string",
    "creating",
    "new",
    "type",
    "called",
    "token",
    "main",
    "function",
    "creating",
    "supported",
    "tokens",
    "object",
    "array",
    "tokens",
    "excuse",
    "going",
    "equal",
    "array",
    "syntax",
    "first",
    "token",
    "going",
    "image",
    "defined",
    "yet",
    "address",
    "going",
    "dap",
    "token",
    "address",
    "name",
    "name",
    "course",
    "going",
    "dap",
    "dap",
    "token",
    "going",
    "need",
    "couple",
    "images",
    "point",
    "see",
    "going",
    "create",
    "array",
    "supported",
    "tokens",
    "first",
    "dap",
    "token",
    "need",
    "image",
    "dap",
    "token",
    "following",
    "along",
    "grab",
    "image",
    "right",
    "github",
    "going",
    "grab",
    "token",
    "going",
    "pop",
    "src",
    "going",
    "change",
    "dap",
    "png",
    "import",
    "import",
    "dap",
    "dap",
    "png",
    "take",
    "dap",
    "image",
    "image",
    "put",
    "let",
    "tokens",
    "comma",
    "image",
    "f",
    "oops",
    "f",
    "address",
    "token",
    "token",
    "address",
    "name",
    "either",
    "oh",
    "let",
    "close",
    "either",
    "grab",
    "right",
    "github",
    "pop",
    "src",
    "change",
    "scroll",
    "import",
    "well",
    "import",
    "f",
    "boom",
    "looks",
    "good",
    "one",
    "comma",
    "image",
    "going",
    "fa",
    "going",
    "die",
    "token",
    "address",
    "going",
    "f",
    "fa",
    "token",
    "address",
    "name",
    "going",
    "fa",
    "die",
    "die",
    "token",
    "pop",
    "src",
    "change",
    "name",
    "import",
    "die",
    "grab",
    "die",
    "looks",
    "like",
    "going",
    "name",
    "die",
    "actually",
    "instead",
    "vs",
    "code",
    "starts",
    "yelling",
    "ca",
    "find",
    "module",
    "really",
    "confused",
    "going",
    "top",
    "going",
    "add",
    "little",
    "comment",
    "backstar",
    "eslint",
    "disable",
    "spaced",
    "comment",
    "star",
    "backs",
    "slash",
    "dash",
    "reference",
    "types",
    "equals",
    "react",
    "scripts",
    "save",
    "issue",
    "go",
    "away",
    "right",
    "well",
    "supported",
    "tokens",
    "token",
    "array",
    "actually",
    "pass",
    "wallet",
    "bit",
    "right",
    "going",
    "go",
    "return",
    "bit",
    "going",
    "remove",
    "div",
    "main",
    "going",
    "actually",
    "start",
    "getting",
    "meat",
    "going",
    "pass",
    "wallet",
    "component",
    "going",
    "import",
    "second",
    "going",
    "send",
    "supported",
    "tokens",
    "say",
    "supported",
    "tokens",
    "equals",
    "supported",
    "tokens",
    "back",
    "slash",
    "like",
    "course",
    "going",
    "import",
    "wallet",
    "scroll",
    "top",
    "import",
    "wallet",
    "wallet",
    "actually",
    "going",
    "make",
    "new",
    "file",
    "wallet",
    "folder",
    "called",
    "going",
    "export",
    "wallet",
    "slashy",
    "wallet",
    "save",
    "getting",
    "issue",
    "saying",
    "wallet",
    "defined",
    "wallet",
    "okay",
    "cool",
    "getting",
    "another",
    "issue",
    "going",
    "fix",
    "second",
    "great",
    "supported",
    "tokens",
    "wallet",
    "exporting",
    "wallet",
    "wallet",
    "folder",
    "let",
    "finish",
    "wallet",
    "implementation",
    "needs",
    "little",
    "equal",
    "sign",
    "whoops",
    "going",
    "get",
    "little",
    "error",
    "basically",
    "return",
    "could",
    "return",
    "make",
    "happy",
    "div",
    "leave",
    "changes",
    "wallet",
    "save",
    "everything",
    "happy",
    "go",
    "front",
    "end",
    "quick",
    "refresh",
    "see",
    "wallet",
    "let",
    "keep",
    "diving",
    "wallet",
    "right",
    "going",
    "stuff",
    "wallet",
    "going",
    "use",
    "couple",
    "components",
    "materials",
    "ui",
    "get",
    "started",
    "start",
    "going",
    "use",
    "box",
    "box",
    "component",
    "serves",
    "wrapper",
    "component",
    "css",
    "utility",
    "needs",
    "box",
    "right",
    "box",
    "put",
    "front",
    "end",
    "going",
    "come",
    "wallet",
    "start",
    "working",
    "box",
    "going",
    "put",
    "everything",
    "inside",
    "little",
    "little",
    "box",
    "going",
    "import",
    "box",
    "import",
    "box",
    "material",
    "ui",
    "give",
    "little",
    "header",
    "h1",
    "say",
    "wallet",
    "h",
    "one",
    "get",
    "little",
    "header",
    "wallet",
    "wallet",
    "great",
    "get",
    "rid",
    "little",
    "wallet",
    "create",
    "another",
    "box",
    "going",
    "add",
    "functionality",
    "uh",
    "wallet",
    "going",
    "use",
    "tabs",
    "materials",
    "ui",
    "swap",
    "tokens",
    "right",
    "going",
    "one",
    "tab",
    "fau",
    "token",
    "another",
    "tab",
    "dap",
    "token",
    "wrapped",
    "ether",
    "going",
    "use",
    "tabs",
    "thing",
    "work",
    "tabs",
    "going",
    "need",
    "import",
    "tab",
    "stuff",
    "going",
    "import",
    "tab",
    "context",
    "tab",
    "list",
    "tab",
    "panel",
    "material",
    "ui",
    "sl",
    "laab",
    "material",
    "ui",
    "material",
    "ui",
    "laab",
    "components",
    "quite",
    "ready",
    "move",
    "core",
    "add",
    "well",
    "go",
    "front",
    "end",
    "shell",
    "yarn",
    "add",
    "add",
    "material",
    "laab",
    "kind",
    "testy",
    "ones",
    "uh",
    "really",
    "nice",
    "features",
    "going",
    "use",
    "let",
    "get",
    "box",
    "let",
    "make",
    "first",
    "tab",
    "context",
    "value",
    "equal",
    "box",
    "first",
    "tab",
    "going",
    "use",
    "going",
    "whatever",
    "token",
    "selected",
    "select",
    "tokens",
    "going",
    "use",
    "called",
    "state",
    "hook",
    "going",
    "create",
    "state",
    "hook",
    "inside",
    "going",
    "const",
    "selected",
    "token",
    "index",
    "set",
    "selected",
    "token",
    "index",
    "equals",
    "use",
    "state",
    "number",
    "zero",
    "use",
    "state",
    "going",
    "grab",
    "react",
    "looks",
    "like",
    "already",
    "imported",
    "import",
    "react",
    "comma",
    "brackets",
    "use",
    "state",
    "react",
    "going",
    "going",
    "create",
    "one",
    "variable",
    "selected",
    "token",
    "index",
    "going",
    "whatever",
    "token",
    "set",
    "selected",
    "token",
    "index",
    "going",
    "update",
    "selected",
    "token",
    "index",
    "us",
    "state",
    "state",
    "components",
    "thing",
    "way",
    "saving",
    "state",
    "renders",
    "components",
    "little",
    "box",
    "going",
    "start",
    "tab",
    "context",
    "start",
    "basically",
    "tab",
    "value",
    "going",
    "equal",
    "whatever",
    "token",
    "currently",
    "selected",
    "two",
    "string",
    "going",
    "make",
    "list",
    "tokens",
    "tab",
    "context",
    "going",
    "add",
    "way",
    "change",
    "tabs",
    "right",
    "change",
    "tabs",
    "want",
    "different",
    "token",
    "selected",
    "going",
    "make",
    "tab",
    "list",
    "going",
    "change",
    "whenever",
    "click",
    "different",
    "tab",
    "going",
    "add",
    "going",
    "add",
    "functionality",
    "going",
    "give",
    "ara",
    "label",
    "call",
    "stake",
    "form",
    "tabs",
    "based",
    "supported",
    "tokens",
    "mapping",
    "token",
    "index",
    "going",
    "call",
    "function",
    "return",
    "tab",
    "label",
    "equal",
    "token",
    "name",
    "value",
    "would",
    "equal",
    "index",
    "string",
    "exc",
    "two",
    "string",
    "key",
    "going",
    "equal",
    "index",
    "tab",
    "something",
    "material",
    "ui",
    "core",
    "going",
    "import",
    "tab",
    "material",
    "core",
    "probably",
    "spell",
    "supported",
    "tokens",
    "correctly",
    "supported",
    "tokens",
    "look",
    "ui",
    "see",
    "got",
    "couple",
    "different",
    "buttons",
    "great",
    "dap",
    "die",
    "right",
    "different",
    "supported",
    "tokens",
    "mapping",
    "course",
    "click",
    "different",
    "buttons",
    "uh",
    "nothing",
    "actually",
    "happens",
    "need",
    "handle",
    "change",
    "need",
    "code",
    "functionality",
    "handle",
    "change",
    "whenever",
    "something",
    "different",
    "tbl",
    "list",
    "going",
    "add",
    "change",
    "exc",
    "change",
    "equals",
    "handle",
    "change",
    "going",
    "code",
    "little",
    "functionality",
    "top",
    "actually",
    "handle",
    "change",
    "say",
    "const",
    "handle",
    "change",
    "equal",
    "event",
    "react",
    "change",
    "event",
    "new",
    "value",
    "going",
    "string",
    "function",
    "going",
    "little",
    "function",
    "syntax",
    "going",
    "going",
    "use",
    "little",
    "state",
    "hook",
    "going",
    "set",
    "selected",
    "token",
    "index",
    "going",
    "parse",
    "int",
    "new",
    "value",
    "value",
    "get",
    "happening",
    "added",
    "new",
    "functionality",
    "whenever",
    "change",
    "one",
    "tabs",
    "going",
    "change",
    "selected",
    "token",
    "right",
    "selected",
    "token",
    "number",
    "going",
    "different",
    "map",
    "indexes",
    "token",
    "right",
    "one",
    "tokens",
    "going",
    "represent",
    "certain",
    "number",
    "save",
    "go",
    "check",
    "front",
    "end",
    "see",
    "indeed",
    "swap",
    "tabs",
    "really",
    "nice",
    "right",
    "let",
    "keep",
    "going",
    "cool",
    "way",
    "swap",
    "different",
    "tokens",
    "visually",
    "need",
    "big",
    "stake",
    "button",
    "right",
    "reason",
    "need",
    "swap",
    "tokens",
    "need",
    "way",
    "stake",
    "one",
    "tabs",
    "going",
    "add",
    "stake",
    "form",
    "going",
    "add",
    "big",
    "button",
    "allows",
    "us",
    "stake",
    "going",
    "typescript",
    "going",
    "supported",
    "tokens",
    "map",
    "going",
    "map",
    "token",
    "index",
    "another",
    "function",
    "going",
    "return",
    "different",
    "tab",
    "panel",
    "value",
    "going",
    "index",
    "two",
    "string",
    "key",
    "going",
    "index",
    "make",
    "little",
    "div",
    "going",
    "need",
    "put",
    "two",
    "pieces",
    "going",
    "need",
    "putting",
    "wallet",
    "balance",
    "also",
    "big",
    "stake",
    "button",
    "right",
    "first",
    "looking",
    "right",
    "going",
    "say",
    "wallet",
    "balance",
    "big",
    "stake",
    "button",
    "actually",
    "actually",
    "get",
    "wallet",
    "balance",
    "one",
    "big",
    "stake",
    "buttons",
    "well",
    "probably",
    "going",
    "need",
    "type",
    "component",
    "get",
    "actual",
    "wallet",
    "balance",
    "going",
    "stick",
    "yep",
    "already",
    "know",
    "going",
    "go",
    "wallet",
    "component",
    "going",
    "create",
    "new",
    "file",
    "going",
    "define",
    "wallet",
    "balance",
    "component",
    "going",
    "import",
    "wallet",
    "balance",
    "wallet",
    "actually",
    "see",
    "balance",
    "wallet",
    "right",
    "front",
    "end",
    "right",
    "going",
    "actually",
    "reading",
    "offchain",
    "finally",
    "lot",
    "typescript",
    "react",
    "setup",
    "since",
    "going",
    "importing",
    "wallet",
    "component",
    "course",
    "going",
    "start",
    "export",
    "const",
    "wallet",
    "balance",
    "going",
    "make",
    "function",
    "really",
    "weird",
    "function",
    "syntax",
    "probably",
    "going",
    "want",
    "pass",
    "token",
    "right",
    "token",
    "want",
    "get",
    "balance",
    "even",
    "going",
    "set",
    "like",
    "token",
    "define",
    "looks",
    "like",
    "uh",
    "interface",
    "called",
    "wallet",
    "balance",
    "props",
    "say",
    "export",
    "interface",
    "wallet",
    "balance",
    "props",
    "token",
    "right",
    "token",
    "type",
    "defined",
    "going",
    "import",
    "say",
    "import",
    "token",
    "main",
    "right",
    "great",
    "initial",
    "setup",
    "grab",
    "token",
    "passed",
    "pass",
    "get",
    "image",
    "address",
    "name",
    "token",
    "address",
    "name",
    "grab",
    "account",
    "right",
    "going",
    "need",
    "account",
    "along",
    "token",
    "say",
    "account",
    "equals",
    "use",
    "ethers",
    "course",
    "import",
    "count",
    "excuse",
    "import",
    "count",
    "use",
    "ethers",
    "usap",
    "core",
    "going",
    "need",
    "account",
    "going",
    "need",
    "address",
    "usbcore",
    "nice",
    "little",
    "hook",
    "called",
    "use",
    "token",
    "balance",
    "going",
    "use",
    "check",
    "documentation",
    "provides",
    "way",
    "fetch",
    "balance",
    "erc20",
    "tokens",
    "specified",
    "token",
    "address",
    "makes",
    "lives",
    "lot",
    "easier",
    "import",
    "well",
    "use",
    "token",
    "balance",
    "really",
    "const",
    "token",
    "balance",
    "equals",
    "use",
    "token",
    "balance",
    "address",
    "token",
    "count",
    "even",
    "quick",
    "token",
    "balance",
    "see",
    "correctly",
    "take",
    "wallet",
    "balance",
    "import",
    "wallet",
    "able",
    "see",
    "something",
    "import",
    "wallet",
    "scrolling",
    "top",
    "import",
    "wallet",
    "balance",
    "slash",
    "wallet",
    "balance",
    "inside",
    "large",
    "return",
    "function",
    "add",
    "new",
    "tab",
    "new",
    "uh",
    "component",
    "say",
    "wallet",
    "balance",
    "still",
    "remember",
    "need",
    "send",
    "token",
    "send",
    "tokens",
    "index",
    "selected",
    "token",
    "index",
    "spell",
    "supported",
    "tokens",
    "right",
    "spell",
    "wallet",
    "balance",
    "right",
    "capital",
    "b",
    "need",
    "return",
    "actually",
    "jsx",
    "component",
    "div",
    "say",
    "wallet",
    "balance",
    "go",
    "front",
    "end",
    "quick",
    "refresh",
    "indeed",
    "see",
    "little",
    "print",
    "line",
    "uh",
    "javascript",
    "big",
    "number",
    "really",
    "want",
    "see",
    "token",
    "balance",
    "dot",
    "string",
    "put",
    "question",
    "mark",
    "tell",
    "typescript",
    "hey",
    "turn",
    "string",
    "undefined",
    "save",
    "go",
    "front",
    "end",
    "refresh",
    "since",
    "connected",
    "coen",
    "see",
    "anount",
    "printed",
    "switch",
    "tabs",
    "see",
    "different",
    "amounts",
    "printed",
    "fantastic",
    "cool",
    "let",
    "remove",
    "little",
    "want",
    "show",
    "token",
    "balance",
    "obviously",
    "ui",
    "right",
    "want",
    "people",
    "go",
    "right",
    "actually",
    "see",
    "want",
    "represent",
    "want",
    "show",
    "says",
    "wallet",
    "balance",
    "going",
    "first",
    "probably",
    "format",
    "right",
    "units",
    "way",
    "going",
    "const",
    "formatted",
    "token",
    "balance",
    "number",
    "equal",
    "token",
    "balance",
    "token",
    "balance",
    "exist",
    "using",
    "tertiary",
    "operator",
    "going",
    "parse",
    "float",
    "format",
    "units",
    "token",
    "balance",
    "18",
    "otherwise",
    "going",
    "use",
    "zero",
    "format",
    "units",
    "nice",
    "little",
    "import",
    "going",
    "grab",
    "ethers",
    "project",
    "import",
    "format",
    "units",
    "ethers",
    "project",
    "sl",
    "units",
    "course",
    "yarn",
    "ad",
    "ether",
    "project",
    "course",
    "going",
    "yarn",
    "ad",
    "yarn",
    "add",
    "ethers",
    "project",
    "units",
    "formatted",
    "token",
    "balance",
    "going",
    "token",
    "balance",
    "got",
    "formatted",
    "formatted",
    "much",
    "nicer",
    "little",
    "div",
    "could",
    "could",
    "add",
    "formatted",
    "token",
    "balance",
    "save",
    "look",
    "front",
    "end",
    "aha",
    "see",
    "100",
    "dep",
    "zero",
    "w",
    "15",
    "die",
    "right",
    "numbers",
    "might",
    "little",
    "bit",
    "different",
    "depending",
    "much",
    "actually",
    "got",
    "perfect",
    "exactly",
    "looking",
    "let",
    "close",
    "console",
    "let",
    "let",
    "flesh",
    "little",
    "bit",
    "let",
    "make",
    "look",
    "little",
    "bit",
    "nicer",
    "instead",
    "returning",
    "little",
    "div",
    "like",
    "let",
    "actually",
    "make",
    "new",
    "component",
    "called",
    "balance",
    "message",
    "use",
    "instead",
    "create",
    "new",
    "component",
    "called",
    "balance",
    "message",
    "format",
    "way",
    "actually",
    "show",
    "formatted",
    "tokens",
    "pass",
    "pass",
    "couple",
    "variables",
    "pass",
    "component",
    "amount",
    "pass",
    "label",
    "say",
    "label",
    "going",
    "unstaked",
    "name",
    "balance",
    "right",
    "grabbing",
    "name",
    "token",
    "pass",
    "e",
    "token",
    "image",
    "src",
    "going",
    "image",
    "going",
    "pass",
    "label",
    "excuse",
    "img",
    "image",
    "going",
    "pass",
    "label",
    "token",
    "image",
    "amount",
    "right",
    "component",
    "going",
    "make",
    "us",
    "balance",
    "look",
    "little",
    "bit",
    "nicer",
    "wallet",
    "section",
    "going",
    "new",
    "file",
    "called",
    "balan",
    "message",
    "tsx",
    "oops",
    "tsxxxspelled",
    "parameters",
    "label",
    "amount",
    "token",
    "image",
    "src",
    "interface",
    "balance",
    "message",
    "props",
    "function",
    "course",
    "weird",
    "function",
    "syntax",
    "course",
    "need",
    "tell",
    "typescript",
    "looks",
    "like",
    "say",
    "interface",
    "balce",
    "message",
    "props",
    "inputs",
    "say",
    "label",
    "going",
    "string",
    "amount",
    "going",
    "number",
    "token",
    "image",
    "src",
    "going",
    "string",
    "going",
    "use",
    "going",
    "use",
    "styles",
    "bit",
    "materials",
    "ui",
    "might",
    "want",
    "style",
    "little",
    "bit",
    "going",
    "import",
    "make",
    "styles",
    "music",
    "material",
    "slui",
    "core",
    "const",
    "use",
    "styles",
    "going",
    "equal",
    "make",
    "styles",
    "theme",
    "going",
    "skip",
    "theme",
    "let",
    "make",
    "styles",
    "different",
    "pieces",
    "let",
    "give",
    "balance",
    "message",
    "surrounded",
    "mainly",
    "container",
    "couple",
    "styles",
    "say",
    "display",
    "going",
    "inline",
    "grid",
    "grid",
    "template",
    "columns",
    "going",
    "auto",
    "auto",
    "auto",
    "check",
    "parameters",
    "documentation",
    "going",
    "gap",
    "theme",
    "spacing",
    "one",
    "skipping",
    "theme",
    "way",
    "add",
    "spacing",
    "align",
    "items",
    "center",
    "also",
    "give",
    "token",
    "image",
    "styling",
    "give",
    "width",
    "32px",
    "32",
    "pixels",
    "amount",
    "give",
    "font",
    "weight",
    "700",
    "make",
    "little",
    "thick",
    "use",
    "styles",
    "styling",
    "go",
    "export",
    "const",
    "classes",
    "equals",
    "use",
    "styles",
    "going",
    "return",
    "going",
    "return",
    "div",
    "class",
    "name",
    "going",
    "equal",
    "main",
    "container",
    "classes",
    "container",
    "another",
    "div",
    "label",
    "looking",
    "another",
    "div",
    "class",
    "name",
    "music",
    "equals",
    "classes",
    "mount",
    "nice",
    "font",
    "weight",
    "amount",
    "grab",
    "image",
    "token",
    "class",
    "name",
    "name",
    "going",
    "equal",
    "classes",
    "token",
    "image",
    "grab",
    "source",
    "image",
    "going",
    "token",
    "image",
    "src",
    "get",
    "past",
    "give",
    "alt",
    "called",
    "token",
    "logo",
    "close",
    "tab",
    "great",
    "going",
    "want",
    "wallet",
    "balance",
    "balance",
    "message",
    "created",
    "import",
    "balance",
    "message",
    "dot",
    "dot",
    "dot",
    "dot",
    "po",
    "slash",
    "wallet",
    "capital",
    "w",
    "actually",
    "know",
    "going",
    "use",
    "balance",
    "message",
    "little",
    "bit",
    "later",
    "actually",
    "going",
    "grab",
    "drag",
    "components",
    "move",
    "components",
    "move",
    "wallet",
    "know",
    "actually",
    "going",
    "use",
    "little",
    "bit",
    "later",
    "means",
    "wallet",
    "balance",
    "going",
    "pull",
    "right",
    "components",
    "slash",
    "balance",
    "message",
    "whoops",
    "actually",
    "need",
    "make",
    "look",
    "like",
    "close",
    "move",
    "part",
    "boom",
    "right",
    "like",
    "let",
    "try",
    "front",
    "end",
    "okay",
    "looking",
    "little",
    "bit",
    "nicer",
    "right",
    "really",
    "thick",
    "number",
    "explain",
    "much",
    "token",
    "images",
    "popping",
    "looks",
    "starting",
    "look",
    "great",
    "let",
    "add",
    "stake",
    "button",
    "right",
    "see",
    "actually",
    "stake",
    "interact",
    "contract",
    "need",
    "create",
    "another",
    "component",
    "called",
    "stake",
    "form",
    "wallet",
    "going",
    "create",
    "new",
    "file",
    "called",
    "stake",
    "form",
    "tsx",
    "going",
    "add",
    "little",
    "button",
    "amount",
    "users",
    "actually",
    "stake",
    "contract",
    "already",
    "know",
    "going",
    "start",
    "export",
    "const",
    "state",
    "form",
    "equals",
    "going",
    "wallet",
    "pass",
    "token",
    "like",
    "passed",
    "token",
    "wallet",
    "balance",
    "say",
    "token",
    "stake",
    "form",
    "props",
    "interface",
    "going",
    "define",
    "second",
    "function",
    "fun",
    "function",
    "syntax",
    "stake",
    "form",
    "props",
    "know",
    "going",
    "token",
    "inter",
    "export",
    "interface",
    "stake",
    "form",
    "props",
    "going",
    "token",
    "type",
    "token",
    "going",
    "import",
    "token",
    "main",
    "great",
    "starting",
    "point",
    "going",
    "create",
    "stake",
    "form",
    "big",
    "button",
    "says",
    "stake",
    "user",
    "actually",
    "choose",
    "much",
    "want",
    "stake",
    "smart",
    "contract",
    "going",
    "similar",
    "stuff",
    "going",
    "grab",
    "variables",
    "going",
    "say",
    "address",
    "going",
    "token",
    "address",
    "get",
    "past",
    "token",
    "also",
    "going",
    "get",
    "name",
    "token",
    "token",
    "going",
    "get",
    "account",
    "use",
    "ethers",
    "import",
    "say",
    "oops",
    "import",
    "use",
    "ethers",
    "use",
    "dcore",
    "going",
    "want",
    "grab",
    "token",
    "balance",
    "const",
    "token",
    "balance",
    "grab",
    "use",
    "token",
    "balance",
    "token",
    "address",
    "account",
    "going",
    "use",
    "use",
    "token",
    "balance",
    "also",
    "grab",
    "used",
    "appcore",
    "going",
    "want",
    "format",
    "token",
    "balance",
    "const",
    "format",
    "token",
    "balance",
    "going",
    "number",
    "going",
    "exact",
    "say",
    "token",
    "balance",
    "pars",
    "float",
    "format",
    "units",
    "token",
    "balance",
    "18",
    "zero",
    "format",
    "units",
    "going",
    "import",
    "import",
    "format",
    "units",
    "ethers",
    "project",
    "units",
    "perfect",
    "importing",
    "gotten",
    "starter",
    "boiler",
    "pl",
    "let",
    "go",
    "ahead",
    "grab",
    "buttons",
    "right",
    "really",
    "things",
    "going",
    "care",
    "let",
    "return",
    "stuff",
    "something",
    "show",
    "front",
    "end",
    "right",
    "let",
    "return",
    "let",
    "start",
    "returning",
    "something",
    "whenever",
    "return",
    "something",
    "got",
    "one",
    "tag",
    "right",
    "going",
    "know",
    "going",
    "whole",
    "bunch",
    "different",
    "tags",
    "going",
    "go",
    "ahead",
    "make",
    "open",
    "close",
    "tag",
    "going",
    "put",
    "stuff",
    "know",
    "going",
    "want",
    "big",
    "stak",
    "butt",
    "right",
    "let",
    "go",
    "ahead",
    "let",
    "get",
    "let",
    "get",
    "button",
    "tag",
    "course",
    "since",
    "going",
    "button",
    "going",
    "pull",
    "material",
    "asi",
    "material",
    "ui",
    "right",
    "import",
    "button",
    "material",
    "ui",
    "core",
    "get",
    "get",
    "started",
    "something",
    "back",
    "wallet",
    "tsx",
    "let",
    "add",
    "button",
    "inside",
    "tab",
    "panel",
    "right",
    "wallet",
    "balance",
    "add",
    "stake",
    "form",
    "thing",
    "open",
    "close",
    "course",
    "got",
    "import",
    "say",
    "import",
    "import",
    "stake",
    "form",
    "slash",
    "stake",
    "form",
    "need",
    "pass",
    "token",
    "object",
    "back",
    "wallet",
    "going",
    "say",
    "okay",
    "token",
    "equals",
    "supported",
    "tokens",
    "selected",
    "token",
    "index",
    "selected",
    "token",
    "index",
    "let",
    "little",
    "backslash",
    "close",
    "close",
    "bracket",
    "give",
    "button",
    "stuff",
    "right",
    "color",
    "equals",
    "primary",
    "say",
    "size",
    "equals",
    "large",
    "give",
    "text",
    "called",
    "steak",
    "double",
    "exclamation",
    "point",
    "however",
    "many",
    "want",
    "put",
    "look",
    "front",
    "got",
    "big",
    "steak",
    "button",
    "nice",
    "okay",
    "looking",
    "little",
    "bit",
    "better",
    "currently",
    "anything",
    "steak",
    "button",
    "great",
    "start",
    "adding",
    "implementation",
    "right",
    "stuff",
    "hit",
    "stake",
    "button",
    "want",
    "want",
    "two",
    "things",
    "want",
    "approve",
    "whatever",
    "token",
    "want",
    "stake",
    "amount",
    "also",
    "need",
    "type",
    "form",
    "need",
    "know",
    "much",
    "want",
    "stake",
    "right",
    "going",
    "need",
    "little",
    "input",
    "box",
    "add",
    "certain",
    "amount",
    "well",
    "little",
    "input",
    "box",
    "materials",
    "ui",
    "another",
    "package",
    "going",
    "grab",
    "called",
    "input",
    "materials",
    "ui",
    "cor",
    "going",
    "use",
    "little",
    "input",
    "box",
    "button",
    "going",
    "input",
    "little",
    "slash",
    "save",
    "refresh",
    "front",
    "end",
    "awesome",
    "typing",
    "click",
    "stake",
    "button",
    "though",
    "going",
    "need",
    "keep",
    "track",
    "much",
    "amount",
    "right",
    "going",
    "need",
    "keep",
    "track",
    "much",
    "amounts",
    "going",
    "inspect",
    "front",
    "end",
    "going",
    "go",
    "console",
    "see",
    "follow",
    "along",
    "much",
    "amount",
    "going",
    "make",
    "another",
    "one",
    "state",
    "hooks",
    "going",
    "track",
    "amount",
    "going",
    "say",
    "const",
    "amount",
    "set",
    "amount",
    "one",
    "stak",
    "hooks",
    "equals",
    "use",
    "state",
    "going",
    "number",
    "string",
    "array",
    "number",
    "string",
    "zero",
    "going",
    "import",
    "use",
    "state",
    "react",
    "going",
    "import",
    "import",
    "react",
    "use",
    "state",
    "react",
    "state",
    "hook",
    "use",
    "keep",
    "track",
    "amount",
    "going",
    "put",
    "input",
    "tag",
    "going",
    "say",
    "change",
    "whenever",
    "changes",
    "going",
    "handle",
    "function",
    "right",
    "going",
    "call",
    "handle",
    "input",
    "change",
    "going",
    "handle",
    "input",
    "change",
    "going",
    "create",
    "function",
    "going",
    "const",
    "handle",
    "input",
    "change",
    "equals",
    "going",
    "use",
    "events",
    "stuff",
    "going",
    "say",
    "going",
    "take",
    "event",
    "react",
    "change",
    "event",
    "html",
    "input",
    "element",
    "going",
    "function",
    "going",
    "set",
    "amount",
    "going",
    "say",
    "const",
    "new",
    "amount",
    "equals",
    "event",
    "target",
    "value",
    "whenever",
    "change",
    "value",
    "field",
    "equal",
    "nothing",
    "going",
    "say",
    "okay",
    "going",
    "nothing",
    "otherwise",
    "going",
    "cast",
    "number",
    "vent",
    "target",
    "value",
    "going",
    "cast",
    "whatever",
    "number",
    "going",
    "set",
    "amount",
    "new",
    "amount",
    "could",
    "even",
    "new",
    "amount",
    "start",
    "using",
    "right",
    "go",
    "back",
    "one",
    "two",
    "three",
    "right",
    "see",
    "console",
    "logging",
    "every",
    "time",
    "change",
    "something",
    "way",
    "actually",
    "get",
    "amount",
    "input",
    "going",
    "need",
    "way",
    "send",
    "amount",
    "part",
    "stake",
    "right",
    "going",
    "first",
    "call",
    "approv",
    "function",
    "amount",
    "goingon",
    "call",
    "token",
    "farm",
    "gon",
    "na",
    "call",
    "stake",
    "method",
    "get",
    "call",
    "approv",
    "function",
    "well",
    "actually",
    "going",
    "make",
    "new",
    "state",
    "hooks",
    "going",
    "use",
    "staking",
    "form",
    "going",
    "make",
    "state",
    "hooks",
    "approving",
    "staking",
    "even",
    "unstaking",
    "back",
    "folder",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "hooks",
    "going",
    "add",
    "different",
    "hooks",
    "first",
    "hook",
    "going",
    "make",
    "going",
    "called",
    "use",
    "use",
    "stake",
    "tokens",
    "typ",
    "script",
    "something",
    "going",
    "import",
    "stake",
    "form",
    "actually",
    "stake",
    "tokens",
    "way",
    "want",
    "hit",
    "stake",
    "hit",
    "stake",
    "button",
    "kicks",
    "approve",
    "actually",
    "right",
    "afterwards",
    "kicks",
    "send",
    "kicks",
    "stake",
    "token",
    "want",
    "run",
    "two",
    "functions",
    "sequentially",
    "going",
    "make",
    "use",
    "stake",
    "token",
    "hook",
    "clever",
    "enough",
    "order",
    "let",
    "hooks",
    "basically",
    "like",
    "components",
    "except",
    "functionality",
    "wise",
    "since",
    "know",
    "like",
    "components",
    "going",
    "export",
    "const",
    "use",
    "stake",
    "tokens",
    "going",
    "function",
    "like",
    "components",
    "input",
    "going",
    "take",
    "token",
    "address",
    "going",
    "string",
    "inside",
    "going",
    "intelligent",
    "scripts",
    "know",
    "already",
    "approved",
    "already",
    "approved",
    "need",
    "right",
    "know",
    "going",
    "need",
    "approv",
    "thing",
    "know",
    "going",
    "need",
    "stake",
    "tokens",
    "thing",
    "let",
    "let",
    "least",
    "try",
    "approach",
    "approv",
    "thing",
    "first",
    "get",
    "creative",
    "right",
    "approve",
    "transaction",
    "get",
    "approve",
    "going",
    "need",
    "couple",
    "things",
    "going",
    "need",
    "address",
    "guys",
    "know",
    "probably",
    "going",
    "need",
    "avi",
    "probably",
    "going",
    "need",
    "chain",
    "id",
    "know",
    "chain",
    "let",
    "go",
    "ahead",
    "let",
    "grab",
    "con",
    "chain",
    "id",
    "equals",
    "use",
    "ethers",
    "since",
    "using",
    "use",
    "ethers",
    "going",
    "import",
    "import",
    "use",
    "ethers",
    "usep",
    "slc",
    "core",
    "also",
    "going",
    "want",
    "abi",
    "token",
    "farm",
    "const",
    "abi",
    "equals",
    "well",
    "get",
    "abi",
    "froma",
    "right",
    "imported",
    "little",
    "chain",
    "info",
    "piece",
    "right",
    "could",
    "able",
    "import",
    "token",
    "farm",
    "directory",
    "chain",
    "info",
    "slc",
    "contracts",
    "toen",
    "farm",
    "json",
    "say",
    "abi",
    "going",
    "equal",
    "token",
    "farm",
    "right",
    "token",
    "farm",
    "abi",
    "key",
    "substract",
    "away",
    "pull",
    "abi",
    "perfect",
    "going",
    "need",
    "token",
    "address",
    "course",
    "also",
    "going",
    "need",
    "token",
    "farm",
    "address",
    "find",
    "exact",
    "way",
    "found",
    "const",
    "token",
    "farm",
    "address",
    "going",
    "equal",
    "depending",
    "chain",
    "id",
    "exists",
    "going",
    "want",
    "use",
    "network",
    "mapping",
    "even",
    "go",
    "back",
    "main",
    "tsx",
    "see",
    "dap",
    "token",
    "address",
    "copy",
    "like",
    "frame",
    "reference",
    "say",
    "chain",
    "id",
    "exists",
    "pull",
    "right",
    "network",
    "mapping",
    "right",
    "pull",
    "right",
    "network",
    "mapping",
    "got",
    "import",
    "grab",
    "import",
    "network",
    "mapping",
    "chain",
    "infos",
    "chain",
    "info",
    "slash",
    "deployments",
    "slash",
    "going",
    "say",
    "chain",
    "id",
    "exists",
    "netw",
    "mapping",
    "going",
    "use",
    "string",
    "chain",
    "id",
    "string",
    "chain",
    "id",
    "token",
    "farm",
    "position",
    "zero",
    "right",
    "obviously",
    "want",
    "recent",
    "one",
    "otherwise",
    "constants",
    "address",
    "z",
    "since",
    "going",
    "course",
    "going",
    "import",
    "constants",
    "music",
    "e3s",
    "hooks",
    "folder",
    "source",
    "let",
    "make",
    "sure",
    "hooks",
    "source",
    "going",
    "want",
    "interact",
    "token",
    "farm",
    "address",
    "contract",
    "right",
    "going",
    "want",
    "run",
    "approv",
    "function",
    "first",
    "want",
    "create",
    "like",
    "interface",
    "const",
    "token",
    "farm",
    "interface",
    "say",
    "equals",
    "new",
    "utils",
    "interface",
    "abi",
    "utils",
    "grab",
    "ether",
    "project",
    "excuse",
    "uh",
    "ethers",
    "comma",
    "utils",
    "create",
    "token",
    "farm",
    "interface",
    "interface",
    "create",
    "contract",
    "const",
    "token",
    "farm",
    "contract",
    "equals",
    "new",
    "contract",
    "combination",
    "token",
    "farm",
    "interface",
    "token",
    "farm",
    "address",
    "actually",
    "address",
    "first",
    "contract",
    "something",
    "grab",
    "import",
    "contract",
    "ethers",
    "project",
    "sl",
    "contracts",
    "right",
    "probably",
    "starting",
    "follow",
    "along",
    "figure",
    "okay",
    "cool",
    "token",
    "farm",
    "contract",
    "contract",
    "actually",
    "call",
    "functions",
    "totally",
    "right",
    "need",
    "call",
    "approve",
    "first",
    "let",
    "get",
    "token",
    "contract",
    "even",
    "work",
    "stake",
    "token",
    "right",
    "work",
    "token",
    "going",
    "want",
    "thing",
    "const",
    "erc20",
    "interface",
    "equals",
    "new",
    "utils",
    "interface",
    "interface",
    "ec20",
    "abi",
    "probably",
    "make",
    "first",
    "const",
    "ec20",
    "abi",
    "equals",
    "way",
    "except",
    "setad",
    "token",
    "farm",
    "something",
    "else",
    "look",
    "contracts",
    "mach",
    "erc20",
    "instead",
    "call",
    "erc20",
    "yeah",
    "call",
    "erc20",
    "grab",
    "mach",
    "erc20",
    "json",
    "erc20",
    "con",
    "erc20",
    "abi",
    "equals",
    "erc20",
    "ai",
    "pop",
    "abi",
    "create",
    "interface",
    "const",
    "erc20",
    "contract",
    "equals",
    "new",
    "contract",
    "token",
    "address",
    "comma",
    "erc20",
    "interface",
    "boom",
    "okay",
    "contracts",
    "erc20",
    "contract",
    "token",
    "farm",
    "contract",
    "able",
    "go",
    "ahead",
    "call",
    "functions",
    "right",
    "actually",
    "send",
    "one",
    "going",
    "use",
    "thing",
    "called",
    "use",
    "contract",
    "function",
    "hook",
    "edep",
    "returns",
    "object",
    "two",
    "variables",
    "state",
    "send",
    "state",
    "bit",
    "used",
    "represent",
    "status",
    "transaction",
    "actually",
    "going",
    "automatically",
    "kick",
    "stake",
    "approve",
    "send",
    "transaction",
    "actually",
    "actually",
    "use",
    "send",
    "function",
    "going",
    "use",
    "use",
    "contract",
    "function",
    "get",
    "get",
    "state",
    "send",
    "going",
    "first",
    "need",
    "going",
    "const",
    "send",
    "going",
    "call",
    "approve",
    "erc",
    "20",
    "send",
    "state",
    "returning",
    "returning",
    "send",
    "state",
    "going",
    "say",
    "state",
    "going",
    "approve",
    "erc20",
    "state",
    "equals",
    "use",
    "contract",
    "function",
    "pass",
    "token",
    "contract",
    "erc20",
    "contract",
    "comma",
    "name",
    "function",
    "going",
    "approve",
    "comma",
    "little",
    "object",
    "call",
    "transaction",
    "name",
    "approve",
    "erc20",
    "transfer",
    "course",
    "import",
    "used",
    "app",
    "use",
    "contract",
    "function",
    "oddly",
    "enough",
    "whoops",
    "got",
    "rid",
    "closing",
    "tag",
    "great",
    "weird",
    "way",
    "actually",
    "two",
    "new",
    "pieces",
    "send",
    "function",
    "approve",
    "erc20",
    "send",
    "approve",
    "erc20",
    "state",
    "going",
    "status",
    "transaction",
    "going",
    "actual",
    "function",
    "use",
    "want",
    "call",
    "approv",
    "function",
    "return",
    "calling",
    "approv",
    "function",
    "const",
    "approve",
    "function",
    "say",
    "take",
    "string",
    "amount",
    "input",
    "parameter",
    "return",
    "approve",
    "erc20",
    "send",
    "give",
    "token",
    "farm",
    "contract",
    "address",
    "first",
    "input",
    "parameter",
    "excuse",
    "token",
    "farm",
    "address",
    "use",
    "input",
    "amount",
    "second",
    "parameter",
    "use",
    "stake",
    "tokens",
    "return",
    "approve",
    "function",
    "also",
    "state",
    "going",
    "return",
    "approve",
    "going",
    "return",
    "state",
    "could",
    "also",
    "return",
    "wanted",
    "going",
    "wrap",
    "approved",
    "thing",
    "also",
    "probably",
    "want",
    "return",
    "state",
    "right",
    "going",
    "turn",
    "hook",
    "well",
    "going",
    "const",
    "state",
    "set",
    "state",
    "equals",
    "oops",
    "use",
    "state",
    "approved",
    "approved",
    "erc",
    "20",
    "state",
    "input",
    "course",
    "since",
    "using",
    "use",
    "state",
    "going",
    "grab",
    "react",
    "well",
    "also",
    "want",
    "return",
    "state",
    "return",
    "approve",
    "erc20",
    "state",
    "way",
    "actually",
    "stake",
    "form",
    "going",
    "going",
    "create",
    "con",
    "going",
    "grab",
    "two",
    "variables",
    "const",
    "approve",
    "approve",
    "erc20",
    "state",
    "going",
    "equal",
    "use",
    "stake",
    "tokens",
    "token",
    "address",
    "pull",
    "token",
    "input",
    "parameter",
    "new",
    "hook",
    "going",
    "import",
    "use",
    "stake",
    "tokens",
    "slash",
    "hooks",
    "two",
    "functions",
    "approv",
    "function",
    "state",
    "function",
    "add",
    "handle",
    "submit",
    "functionality",
    "button",
    "say",
    "okay",
    "click",
    "click",
    "button",
    "going",
    "handle",
    "stake",
    "submit",
    "right",
    "big",
    "well",
    "going",
    "show",
    "broke",
    "everything",
    "big",
    "button",
    "right",
    "stake",
    "button",
    "going",
    "create",
    "function",
    "called",
    "handle",
    "stake",
    "submit",
    "let",
    "go",
    "ahead",
    "const",
    "handle",
    "stake",
    "submit",
    "function",
    "going",
    "get",
    "amount",
    "const",
    "amount",
    "uh",
    "going",
    "actually",
    "convert",
    "string",
    "call",
    "amount",
    "way",
    "equals",
    "utils",
    "dop",
    "parse",
    "ether",
    "grab",
    "parse",
    "ether",
    "grab",
    "utils",
    "ethers",
    "utils",
    "ethers",
    "amount",
    "string",
    "going",
    "grab",
    "amount",
    "state",
    "hook",
    "amount",
    "turn",
    "string",
    "return",
    "approve",
    "function",
    "amount",
    "way",
    "okay",
    "oh",
    "getting",
    "fail",
    "compile",
    "hooks",
    "section",
    "going",
    "index",
    "typescript",
    "going",
    "export",
    "ed",
    "stake",
    "export",
    "use",
    "stake",
    "token",
    "sluse",
    "stak",
    "tokens",
    "close",
    "restart",
    "server",
    "import",
    "right",
    "place",
    "import",
    "right",
    "place",
    "well",
    "let",
    "get",
    "rid",
    "brackets",
    "whoops",
    "sorry",
    "let",
    "a2",
    "string",
    "oops",
    "ca",
    "big",
    "number",
    "let",
    "save",
    "recompile",
    "pop",
    "front",
    "end",
    "refresh",
    "stuff",
    "cool",
    "stuff",
    "getting",
    "logged",
    "hit",
    "stake",
    "call",
    "approved",
    "function",
    "metam",
    "mass",
    "pops",
    "get",
    "allow",
    "local",
    "host",
    "spend",
    "dep",
    "amazing",
    "going",
    "reject",
    "though",
    "want",
    "bother",
    "testing",
    "amazing",
    "job",
    "getting",
    "far",
    "hitting",
    "button",
    "metamask",
    "popping",
    "actually",
    "sending",
    "transaction",
    "incredibly",
    "exciting",
    "great",
    "work",
    "far",
    "let",
    "keep",
    "going",
    "approv",
    "function",
    "working",
    "perfectly",
    "working",
    "intended",
    "kind",
    "assuming",
    "working",
    "intended",
    "great",
    "perfect",
    "got",
    "go",
    "one",
    "step",
    "need",
    "call",
    "stake",
    "approved",
    "going",
    "little",
    "something",
    "called",
    "use",
    "effect",
    "import",
    "use",
    "effect",
    "comma",
    "use",
    "effect",
    "allows",
    "us",
    "something",
    "variable",
    "changed",
    "way",
    "going",
    "going",
    "say",
    "okay",
    "use",
    "effect",
    "takes",
    "uh",
    "one",
    "functions",
    "input",
    "little",
    "comma",
    "similar",
    "state",
    "hooks",
    "array",
    "different",
    "things",
    "want",
    "track",
    "anything",
    "array",
    "changes",
    "kick",
    "use",
    "effect",
    "something",
    "one",
    "things",
    "definitely",
    "want",
    "uh",
    "track",
    "approve",
    "erc20",
    "state",
    "approve",
    "erc20",
    "state",
    "transaction",
    "comes",
    "back",
    "successful",
    "want",
    "stuff",
    "say",
    "track",
    "state",
    "go",
    "ahead",
    "say",
    "approve",
    "erc20",
    "state",
    "status",
    "equals",
    "success",
    "gna",
    "go",
    "ahead",
    "like",
    "stake",
    "function",
    "stake",
    "function",
    "going",
    "follow",
    "exact",
    "methodology",
    "approve",
    "first",
    "going",
    "use",
    "use",
    "contract",
    "function",
    "thing",
    "const",
    "send",
    "going",
    "stake",
    "send",
    "state",
    "stake",
    "state",
    "going",
    "equal",
    "going",
    "use",
    "use",
    "contract",
    "function",
    "going",
    "token",
    "farm",
    "contract",
    "going",
    "stake",
    "tokens",
    "function",
    "transaction",
    "name",
    "going",
    "stake",
    "tokens",
    "let",
    "make",
    "look",
    "little",
    "bit",
    "readable",
    "lovely",
    "little",
    "used",
    "contract",
    "bit",
    "stak",
    "send",
    "call",
    "right",
    "approve",
    "ec20",
    "state",
    "status",
    "stak",
    "send",
    "look",
    "back",
    "token",
    "farm",
    "stake",
    "tokens",
    "amount",
    "token",
    "address",
    "going",
    "put",
    "put",
    "amount",
    "token",
    "address",
    "token",
    "address",
    "actually",
    "get",
    "amount",
    "well",
    "orig",
    "ally",
    "called",
    "approv",
    "function",
    "actually",
    "might",
    "asking",
    "hey",
    "come",
    "wrapped",
    "approve",
    "c20",
    "function",
    "going",
    "tell",
    "second",
    "going",
    "going",
    "state",
    "hook",
    "much",
    "want",
    "actually",
    "stake",
    "const",
    "amount",
    "stake",
    "set",
    "amount",
    "stake",
    "going",
    "equal",
    "use",
    "state",
    "going",
    "start",
    "zero",
    "going",
    "get",
    "defaulted",
    "right",
    "zero",
    "going",
    "actually",
    "call",
    "approv",
    "function",
    "first",
    "time",
    "going",
    "set",
    "amount",
    "stake",
    "amount",
    "instead",
    "calling",
    "prove",
    "call",
    "prove",
    "stake",
    "since",
    "function",
    "going",
    "kick",
    "yes",
    "going",
    "kick",
    "approve",
    "erc20",
    "also",
    "going",
    "change",
    "amount",
    "going",
    "stake",
    "later",
    "transaction",
    "succeeds",
    "also",
    "kick",
    "stake",
    "sent",
    "staking",
    "function",
    "going",
    "change",
    "appr",
    "proven",
    "stake",
    "means",
    "actually",
    "return",
    "appr",
    "proven",
    "stake",
    "approve",
    "stake",
    "send",
    "amount",
    "going",
    "amount",
    "stake",
    "got",
    "original",
    "approve",
    "stake",
    "change",
    "approve",
    "stake",
    "change",
    "approve",
    "approve",
    "stake",
    "realistically",
    "really",
    "need",
    "save",
    "go",
    "back",
    "front",
    "end",
    "let",
    "go",
    "one",
    "actually",
    "type",
    "one",
    "hit",
    "stake",
    "button",
    "happen",
    "approval",
    "come",
    "confirm",
    "actually",
    "confirms",
    "able",
    "another",
    "transaction",
    "pop",
    "telling",
    "us",
    "actually",
    "stake",
    "exactly",
    "happens",
    "approved",
    "stake",
    "even",
    "watch",
    "menam",
    "mas",
    "really",
    "really",
    "quick",
    "coen",
    "right",
    "called",
    "stake",
    "tokens",
    "function",
    "ganach",
    "would",
    "lot",
    "quicker",
    "perfect",
    "fantastic",
    "balance",
    "even",
    "got",
    "deducted",
    "one",
    "one",
    "tokens",
    "actually",
    "staked",
    "fantastic",
    "however",
    "uh",
    "obviously",
    "couple",
    "issues",
    "right",
    "happening",
    "whole",
    "section",
    "right",
    "indication",
    "us",
    "really",
    "going",
    "notifications",
    "totally",
    "left",
    "dark",
    "additionally",
    "uh",
    "page",
    "still",
    "looks",
    "disgusting",
    "want",
    "clean",
    "want",
    "make",
    "look",
    "lot",
    "nicer",
    "actually",
    "switching",
    "want",
    "actually",
    "change",
    "use",
    "effect",
    "want",
    "check",
    "approved",
    "erc20",
    "state",
    "also",
    "wanted",
    "see",
    "switch",
    "token",
    "address",
    "want",
    "check",
    "see",
    "approve",
    "vc20",
    "done",
    "switch",
    "token",
    "address",
    "also",
    "want",
    "check",
    "see",
    "amount",
    "stake",
    "actually",
    "changes",
    "amount",
    "stake",
    "want",
    "check",
    "kind",
    "three",
    "three",
    "changes",
    "quick",
    "check",
    "hey",
    "approve",
    "erc20",
    "done",
    "yes",
    "great",
    "stake",
    "tokens",
    "great",
    "going",
    "want",
    "get",
    "notifications",
    "transactions",
    "going",
    "transactions",
    "pending",
    "uh",
    "transactions",
    "finished",
    "actually",
    "add",
    "pieces",
    "well",
    "used",
    "app",
    "thing",
    "called",
    "use",
    "notifications",
    "notifications",
    "bit",
    "help",
    "us",
    "actually",
    "get",
    "notified",
    "whether",
    "transactions",
    "completing",
    "use",
    "notifications",
    "going",
    "couple",
    "different",
    "things",
    "first",
    "way",
    "back",
    "app",
    "tsx",
    "actually",
    "going",
    "change",
    "config",
    "going",
    "add",
    "notifications",
    "check",
    "periodically",
    "things",
    "done",
    "couple",
    "different",
    "parameters",
    "xation",
    "period",
    "set",
    "milliseconds",
    "set",
    "th",
    "1",
    "second",
    "check",
    "interval",
    "also",
    "basically",
    "saying",
    "hey",
    "every",
    "second",
    "check",
    "blockchain",
    "transactions",
    "send",
    "please",
    "thank",
    "notifications",
    "bit",
    "identified",
    "staking",
    "form",
    "add",
    "bit",
    "edep",
    "de",
    "core",
    "comma",
    "use",
    "notifications",
    "actually",
    "start",
    "using",
    "notifications",
    "right",
    "top",
    "const",
    "notifications",
    "equals",
    "use",
    "notifications",
    "actually",
    "start",
    "working",
    "notifications",
    "going",
    "want",
    "see",
    "anything",
    "notifications",
    "actually",
    "change",
    "notifications",
    "change",
    "going",
    "want",
    "something",
    "since",
    "going",
    "want",
    "check",
    "see",
    "notification",
    "changes",
    "following",
    "along",
    "explaining",
    "use",
    "effect",
    "know",
    "means",
    "going",
    "want",
    "use",
    "use",
    "effect",
    "going",
    "say",
    "use",
    "effect",
    "going",
    "function",
    "imported",
    "let",
    "go",
    "ahead",
    "import",
    "react",
    "use",
    "effect",
    "going",
    "looking",
    "see",
    "notifications",
    "change",
    "going",
    "looking",
    "see",
    "transaction",
    "completed",
    "little",
    "watching",
    "array",
    "going",
    "say",
    "let",
    "watch",
    "notif",
    "ifications",
    "let",
    "make",
    "sure",
    "notifications",
    "changes",
    "anything",
    "metamask",
    "changes",
    "going",
    "want",
    "something",
    "right",
    "going",
    "say",
    "notifications",
    "approv",
    "erc20",
    "transaction",
    "succeeded",
    "want",
    "show",
    "hey",
    "know",
    "good",
    "job",
    "approved",
    "going",
    "say",
    "notifications",
    "filter",
    "going",
    "function",
    "based",
    "notification",
    "notification",
    "going",
    "say",
    "notification",
    "type",
    "going",
    "transaction",
    "succeeded",
    "succeed",
    "notification",
    "transaction",
    "name",
    "needed",
    "give",
    "names",
    "use",
    "state",
    "going",
    "approve",
    "erc20",
    "transfer",
    "length",
    "greater",
    "zero",
    "going",
    "stuff",
    "transaction",
    "succeed",
    "saying",
    "notifications",
    "going",
    "filter",
    "notification",
    "type",
    "transaction",
    "succeeded",
    "name",
    "approve",
    "erc20",
    "transfer",
    "going",
    "stuff",
    "going",
    "approved",
    "also",
    "thing",
    "notifications",
    "filter",
    "fter",
    "notification",
    "notification",
    "type",
    "notification",
    "type",
    "going",
    "transaction",
    "succeed",
    "notification",
    "transaction",
    "name",
    "equals",
    "stake",
    "tokens",
    "capital",
    "stake",
    "tokens",
    "one",
    "length",
    "greater",
    "zero",
    "tokens",
    "staked",
    "okay",
    "got",
    "notifications",
    "put",
    "going",
    "little",
    "console",
    "logging",
    "let",
    "see",
    "use",
    "effect",
    "stuff",
    "actually",
    "going",
    "work",
    "let",
    "go",
    "front",
    "end",
    "quick",
    "refresh",
    "go",
    "tokens",
    "going",
    "type",
    "one",
    "going",
    "hit",
    "stake",
    "going",
    "hit",
    "confirm",
    "going",
    "wait",
    "little",
    "bit",
    "confirms",
    "correctly",
    "going",
    "see",
    "little",
    "print",
    "says",
    "approved",
    "indeed",
    "perfect",
    "minim",
    "mass",
    "pops",
    "stake",
    "tokens",
    "hit",
    "approve",
    "well",
    "see",
    "little",
    "console",
    "log",
    "stak",
    "token",
    "stak",
    "perfect",
    "way",
    "actually",
    "track",
    "notifications",
    "track",
    "actually",
    "happens",
    "blockchain",
    "console",
    "logging",
    "stuff",
    "great",
    "want",
    "actually",
    "see",
    "ui",
    "going",
    "want",
    "show",
    "little",
    "waiting",
    "thing",
    "waiting",
    "approved",
    "pop",
    "actually",
    "get",
    "approved",
    "add",
    "little",
    "constant",
    "called",
    "mining",
    "based",
    "whether",
    "transactions",
    "approved",
    "const",
    "mining",
    "equal",
    "state",
    "transactions",
    "actually",
    "instead",
    "approve",
    "erc20",
    "approve",
    "stake",
    "erc20",
    "state",
    "say",
    "oops",
    "say",
    "mining",
    "equal",
    "approve",
    "stake",
    "erc20",
    "state",
    "status",
    "equals",
    "equals",
    "equals",
    "mining",
    "probably",
    "look",
    "like",
    "back",
    "use",
    "stake",
    "instead",
    "approve",
    "ec20",
    "going",
    "change",
    "approve",
    "stake",
    "ec20",
    "state",
    "also",
    "going",
    "return",
    "prove",
    "stake",
    "erc20",
    "stake",
    "let",
    "make",
    "make",
    "little",
    "bit",
    "sense",
    "get",
    "little",
    "red",
    "line",
    "go",
    "away",
    "mining",
    "thing",
    "add",
    "button",
    "mining",
    "thing",
    "going",
    "based",
    "whether",
    "approve",
    "stake",
    "done",
    "scroll",
    "button",
    "add",
    "little",
    "disabled",
    "flag",
    "say",
    "disabled",
    "equals",
    "equal",
    "dependent",
    "whether",
    "done",
    "add",
    "mining",
    "true",
    "disabled",
    "true",
    "mining",
    "false",
    "also",
    "add",
    "kind",
    "like",
    "little",
    "loading",
    "thing",
    "instead",
    "saying",
    "stake",
    "time",
    "tertiary",
    "operator",
    "say",
    "mining",
    "like",
    "little",
    "loading",
    "thing",
    "material",
    "ui",
    "thing",
    "called",
    "circular",
    "progress",
    "use",
    "like",
    "little",
    "loading",
    "thing",
    "mining",
    "circular",
    "progress",
    "say",
    "size",
    "26",
    "whatever",
    "want",
    "close",
    "tagout",
    "mining",
    "stake",
    "bunch",
    "exclamation",
    "marks",
    "save",
    "go",
    "front",
    "end",
    "looks",
    "like",
    "need",
    "fix",
    "something",
    "ca",
    "find",
    "name",
    "approve",
    "erc20",
    "state",
    "changed",
    "appr",
    "proven",
    "stake",
    "year",
    "220",
    "state",
    "let",
    "change",
    "let",
    "save",
    "go",
    "back",
    "front",
    "end",
    "okay",
    "cool",
    "let",
    "go",
    "one",
    "stuff",
    "little",
    "dial",
    "one",
    "hit",
    "hit",
    "stake",
    "right",
    "show",
    "little",
    "loading",
    "thing",
    "transaction",
    "going",
    "going",
    "hit",
    "approve",
    "perfect",
    "see",
    "little",
    "loading",
    "thing",
    "stay",
    "like",
    "transaction",
    "finishes",
    "good",
    "way",
    "indicate",
    "user",
    "actually",
    "approved",
    "hit",
    "confirm",
    "staking",
    "actually",
    "see",
    "loading",
    "thing",
    "go",
    "back",
    "probably",
    "means",
    "actually",
    "reload",
    "mining",
    "correctly",
    "ah",
    "reason",
    "see",
    "little",
    "spinny",
    "thing",
    "appr",
    "proven",
    "stake",
    "erc20",
    "state",
    "really",
    "tracking",
    "approve",
    "right",
    "cost",
    "appr",
    "proven",
    "stake",
    "good",
    "stuff",
    "staking",
    "part",
    "stake",
    "state",
    "actually",
    "never",
    "use",
    "right",
    "need",
    "pass",
    "back",
    "stake",
    "form",
    "actually",
    "know",
    "know",
    "going",
    "add",
    "new",
    "state",
    "hook",
    "const",
    "call",
    "one",
    "state",
    "set",
    "state",
    "going",
    "equal",
    "use",
    "state",
    "uh",
    "approve",
    "stake",
    "erc20",
    "state",
    "start",
    "represent",
    "kind",
    "overall",
    "state",
    "right",
    "true",
    "appr",
    "proven",
    "stake",
    "erc20",
    "state",
    "going",
    "going",
    "track",
    "states",
    "going",
    "track",
    "approving",
    "staking",
    "going",
    "use",
    "effect",
    "going",
    "track",
    "little",
    "little",
    "wonderful",
    "uh",
    "use",
    "effect",
    "stuff",
    "going",
    "track",
    "course",
    "proven",
    "stake",
    "c2",
    "state",
    "stake",
    "state",
    "either",
    "one",
    "change",
    "going",
    "want",
    "change",
    "overall",
    "state",
    "function",
    "going",
    "get",
    "pushed",
    "back",
    "stake",
    "form",
    "going",
    "say",
    "going",
    "say",
    "proven",
    "stake",
    "erc20",
    "state",
    "status",
    "equals",
    "equals",
    "equals",
    "success",
    "going",
    "set",
    "state",
    "uh",
    "stake",
    "state",
    "otherwise",
    "going",
    "set",
    "overall",
    "state",
    "going",
    "set",
    "state",
    "approve",
    "stake",
    "bit",
    "really",
    "kind",
    "approve",
    "going",
    "pass",
    "kind",
    "overall",
    "state",
    "variable",
    "front",
    "end",
    "like",
    "excuse",
    "stake",
    "form",
    "stake",
    "form",
    "going",
    "say",
    "going",
    "map",
    "state",
    "variable",
    "proven",
    "stake",
    "herec",
    "20",
    "state",
    "save",
    "work",
    "perfectly",
    "right",
    "go",
    "back",
    "front",
    "go",
    "die",
    "whatever",
    "one",
    "hit",
    "stake",
    "metam",
    "mous",
    "pop",
    "confirm",
    "indeed",
    "get",
    "little",
    "loading",
    "thing",
    "perfect",
    "done",
    "approved",
    "confirm",
    "get",
    "loading",
    "perfect",
    "exactly",
    "want",
    "user",
    "good",
    "idea",
    "ah",
    "okay",
    "need",
    "wait",
    "right",
    "transaction",
    "going",
    "transaction",
    "built",
    "done",
    "set",
    "fantastic",
    "basically",
    "functionality",
    "staking",
    "right",
    "proove",
    "waiting",
    "actually",
    "staking",
    "let",
    "clean",
    "little",
    "bit",
    "right",
    "let",
    "make",
    "look",
    "little",
    "bit",
    "nicer",
    "first",
    "going",
    "go",
    "going",
    "going",
    "add",
    "bits",
    "body",
    "going",
    "background",
    "color",
    "going",
    "set",
    "set",
    "background",
    "color",
    "hsl",
    "227",
    "comma",
    "61",
    "comma",
    "26",
    "whole",
    "bunch",
    "background",
    "color",
    "really",
    "matter",
    "save",
    "refresh",
    "front",
    "end",
    "get",
    "nice",
    "little",
    "background",
    "color",
    "cool",
    "let",
    "actually",
    "even",
    "creative",
    "let",
    "nice",
    "little",
    "linear",
    "gradient",
    "get",
    "rid",
    "actually",
    "background",
    "linear",
    "gradient",
    "135",
    "hsl",
    "227",
    "61",
    "comma",
    "13",
    "hsl",
    "227",
    "61",
    "26",
    "one",
    "hsl",
    "would",
    "227",
    "61",
    "39",
    "colors",
    "semicolon",
    "let",
    "look",
    "front",
    "ah",
    "okay",
    "getting",
    "somewhere",
    "got",
    "cool",
    "double",
    "gradients",
    "going",
    "go",
    "main",
    "section",
    "ed",
    "styles",
    "bits",
    "right",
    "looks",
    "like",
    "material",
    "ui",
    "little",
    "import",
    "make",
    "styles",
    "core",
    "right",
    "top",
    "const",
    "use",
    "styles",
    "equals",
    "make",
    "styles",
    "theme",
    "ignoring",
    "nice",
    "little",
    "function",
    "thing",
    "titles",
    "little",
    "make",
    "color",
    "theme",
    "pallet",
    "common",
    "white",
    "ignoring",
    "theme",
    "theme",
    "would",
    "like",
    "text",
    "align",
    "center",
    "padding",
    "theme",
    "spacing",
    "main",
    "course",
    "add",
    "const",
    "classes",
    "equals",
    "use",
    "styles",
    "put",
    "like",
    "little",
    "little",
    "section",
    "h2",
    "class",
    "name",
    "going",
    "equal",
    "classes",
    "tile",
    "call",
    "dap",
    "token",
    "app",
    "go",
    "back",
    "front",
    "end",
    "got",
    "like",
    "nice",
    "little",
    "da",
    "token",
    "dap",
    "token",
    "app",
    "nice",
    "white",
    "right",
    "top",
    "looks",
    "good",
    "go",
    "wallet",
    "component",
    "add",
    "styles",
    "looks",
    "like",
    "styles",
    "thing",
    "grab",
    "make",
    "styles",
    "little",
    "h",
    "use",
    "styles",
    "equals",
    "make",
    "styles",
    "theme",
    "going",
    "ignore",
    "fun",
    "little",
    "function",
    "syntax",
    "stuff",
    "say",
    "tab",
    "content",
    "give",
    "styling",
    "say",
    "tab",
    "content",
    "stuff",
    "display",
    "flex",
    "flex",
    "direct",
    "shun",
    "column",
    "align",
    "items",
    "center",
    "gap",
    "theme",
    "spacing",
    "four",
    "give",
    "boxes",
    "stuff",
    "say",
    "box",
    "say",
    "background",
    "color",
    "going",
    "white",
    "say",
    "border",
    "radius",
    "going",
    "25",
    "px",
    "give",
    "roundness",
    "also",
    "header",
    "color",
    "white",
    "going",
    "grab",
    "tab",
    "content",
    "scroll",
    "going",
    "inside",
    "little",
    "tab",
    "panel",
    "bit",
    "div",
    "going",
    "class",
    "name",
    "equals",
    "classes",
    "tab",
    "content",
    "oops",
    "got",
    "add",
    "classes",
    "return",
    "cons",
    "classes",
    "equals",
    "use",
    "styles",
    "say",
    "box",
    "well",
    "going",
    "overarching",
    "box",
    "could",
    "actually",
    "wanted",
    "say",
    "first",
    "box",
    "class",
    "name",
    "equals",
    "classes",
    "boox",
    "h1",
    "going",
    "class",
    "name",
    "equals",
    "classes",
    "header",
    "let",
    "save",
    "let",
    "take",
    "look",
    "already",
    "starting",
    "look",
    "lot",
    "better",
    "guys",
    "kind",
    "see",
    "functionality",
    "really",
    "important",
    "part",
    "behind",
    "application",
    "lot",
    "ed",
    "style",
    "stuff",
    "really",
    "going",
    "make",
    "uh",
    "look",
    "lot",
    "prettier",
    "right",
    "like",
    "hey",
    "pretty",
    "stuff",
    "know",
    "really",
    "explain",
    "pretty",
    "prettiness",
    "um",
    "ton",
    "tutorials",
    "css",
    "basically",
    "guys",
    "learn",
    "little",
    "bit",
    "make",
    "stuff",
    "look",
    "pretty",
    "looks",
    "like",
    "part",
    "everything",
    "need",
    "stake",
    "know",
    "spinning",
    "wheel",
    "great",
    "let",
    "also",
    "add",
    "little",
    "bit",
    "alert",
    "bottom",
    "say",
    "hey",
    "transaction",
    "gone",
    "successfully",
    "going",
    "going",
    "pop",
    "stake",
    "form",
    "going",
    "wrap",
    "input",
    "button",
    "little",
    "div",
    "right",
    "going",
    "put",
    "little",
    "bit",
    "space",
    "actually",
    "little",
    "component",
    "stuff",
    "kind",
    "nice",
    "going",
    "reason",
    "add",
    "alerts",
    "section",
    "going",
    "add",
    "uh",
    "alerting",
    "going",
    "use",
    "called",
    "snack",
    "bar",
    "alerts",
    "material",
    "ui",
    "look",
    "documentation",
    "provides",
    "brief",
    "message",
    "app",
    "processes",
    "something",
    "like",
    "like",
    "going",
    "say",
    "hey",
    "transaction",
    "come",
    "going",
    "going",
    "import",
    "snack",
    "bar",
    "material",
    "going",
    "comma",
    "snack",
    "bar",
    "also",
    "going",
    "import",
    "alerting",
    "like",
    "little",
    "alert",
    "box",
    "import",
    "alert",
    "material",
    "laab",
    "alert",
    "going",
    "also",
    "going",
    "make",
    "alerts",
    "basically",
    "button",
    "input",
    "going",
    "little",
    "little",
    "snack",
    "bar",
    "snack",
    "bar",
    "going",
    "say",
    "going",
    "open",
    "want",
    "show",
    "erc20",
    "done",
    "exactly",
    "sure",
    "quite",
    "yet",
    "autohide",
    "autohide",
    "duration",
    "going",
    "equal",
    "5",
    "seconds",
    "milliseconds",
    "close",
    "also",
    "going",
    "stuff",
    "inside",
    "little",
    "snack",
    "bar",
    "yes",
    "know",
    "filled",
    "yet",
    "actually",
    "let",
    "blanks",
    "inside",
    "snack",
    "bar",
    "going",
    "alerts",
    "say",
    "close",
    "also",
    "going",
    "stuff",
    "severity",
    "going",
    "success",
    "alert",
    "going",
    "text",
    "say",
    "erc",
    "20",
    "token",
    "transfer",
    "approved",
    "approve",
    "second",
    "transaction",
    "going",
    "two",
    "little",
    "snack",
    "bars",
    "one",
    "going",
    "erc20",
    "one",
    "going",
    "staking",
    "token",
    "going",
    "call",
    "one",
    "token",
    "staked",
    "excuse",
    "tokens",
    "staked",
    "need",
    "define",
    "open",
    "also",
    "close",
    "close",
    "erc20",
    "thing",
    "pop",
    "erc20",
    "approved",
    "going",
    "want",
    "create",
    "variable",
    "going",
    "track",
    "whether",
    "actually",
    "approved",
    "create",
    "another",
    "state",
    "hook",
    "const",
    "show",
    "erc20",
    "approval",
    "success",
    "comma",
    "set",
    "show",
    "erc20",
    "approval",
    "success",
    "going",
    "equal",
    "ust",
    "state",
    "going",
    "start",
    "false",
    "right",
    "want",
    "show",
    "thing",
    "right",
    "away",
    "going",
    "want",
    "thing",
    "staking",
    "tokens",
    "const",
    "show",
    "stake",
    "token",
    "success",
    "set",
    "set",
    "stake",
    "token",
    "success",
    "also",
    "use",
    "state",
    "start",
    "false",
    "going",
    "right",
    "right",
    "cute",
    "want",
    "actually",
    "turn",
    "uh",
    "changing",
    "show",
    "erc20",
    "approval",
    "success",
    "right",
    "actually",
    "goes",
    "notification",
    "says",
    "hey",
    "approved",
    "want",
    "say",
    "okay",
    "great",
    "show",
    "approval",
    "status",
    "instead",
    "console",
    "log",
    "going",
    "say",
    "set",
    "show",
    "c20",
    "approval",
    "success",
    "true",
    "also",
    "going",
    "set",
    "show",
    "stake",
    "token",
    "success",
    "token",
    "success",
    "false",
    "hopefully",
    "spelling",
    "right",
    "set",
    "show",
    "stake",
    "token",
    "success",
    "let",
    "spelled",
    "right",
    "great",
    "going",
    "thing",
    "opposite",
    "staking",
    "token",
    "get",
    "rid",
    "constant",
    "log",
    "set",
    "show",
    "erc20",
    "approval",
    "success",
    "false",
    "set",
    "show",
    "stake",
    "erc2",
    "true",
    "say",
    "erc",
    "21",
    "going",
    "open",
    "also",
    "notifications",
    "thing",
    "track",
    "two",
    "ever",
    "change",
    "also",
    "run",
    "grab",
    "use",
    "effect",
    "track",
    "well",
    "say",
    "show",
    "erc20",
    "approval",
    "status",
    "open",
    "erc20",
    "alert",
    "show",
    "stake",
    "token",
    "success",
    "open",
    "stake",
    "tokens",
    "alert",
    "add",
    "new",
    "function",
    "called",
    "handle",
    "close",
    "snack",
    "close",
    "turn",
    "variables",
    "made",
    "false",
    "const",
    "handle",
    "close",
    "snack",
    "function",
    "say",
    "set",
    "show",
    "erc20",
    "approval",
    "status",
    "false",
    "set",
    "show",
    "stake",
    "token",
    "going",
    "copy",
    "paste",
    "uh",
    "one",
    "also",
    "two",
    "false",
    "awesome",
    "go",
    "back",
    "refresh",
    "front",
    "ends",
    "looks",
    "like",
    "forgot",
    "close",
    "ah",
    "okay",
    "yep",
    "hand",
    "handle",
    "along",
    "close",
    "snack",
    "alerts",
    "well",
    "tags",
    "brackets",
    "got",
    "change",
    "go",
    "front",
    "end",
    "quick",
    "refresh",
    "see",
    "everything",
    "looking",
    "great",
    "let",
    "add",
    "one",
    "hit",
    "stake",
    "pop",
    "confirm",
    "get",
    "little",
    "progress",
    "bar",
    "exactly",
    "want",
    "see",
    "get",
    "little",
    "popup",
    "says",
    "erc20",
    "token",
    "transfer",
    "approved",
    "approve",
    "second",
    "trans",
    "transaction",
    "uh",
    "go",
    "away",
    "seconds",
    "let",
    "approve",
    "second",
    "one",
    "oh",
    "looks",
    "like",
    "went",
    "away",
    "maybe",
    "little",
    "bit",
    "longer",
    "5",
    "seconds",
    "see",
    "token",
    "stake",
    "popped",
    "perfect",
    "popups",
    "little",
    "bit",
    "ways",
    "show",
    "user",
    "everything",
    "notice",
    "look",
    "exactly",
    "like",
    "see",
    "github",
    "repo",
    "right",
    "github",
    "repo",
    "looks",
    "little",
    "bit",
    "different",
    "got",
    "little",
    "slidy",
    "bar",
    "got",
    "second",
    "token",
    "farm",
    "contract",
    "staking",
    "however",
    "lot",
    "going",
    "keep",
    "going",
    "lot",
    "stuff",
    "point",
    "pretty",
    "much",
    "everything",
    "need",
    "build",
    "rest",
    "contract",
    "going",
    "going",
    "rest",
    "challenge",
    "want",
    "would",
    "like",
    "complete",
    "absolutely",
    "add",
    "second",
    "token",
    "farb",
    "contract",
    "unstake",
    "bit",
    "unstake",
    "fau",
    "dep",
    "etc",
    "going",
    "two",
    "versions",
    "front",
    "end",
    "going",
    "cleaned",
    "version",
    "going",
    "little",
    "bit",
    "raw",
    "version",
    "one",
    "raw",
    "version",
    "code",
    "going",
    "want",
    "say",
    "ah",
    "really",
    "want",
    "code",
    "follow",
    "along",
    "copy",
    "paste",
    "code",
    "say",
    "know",
    "going",
    "unstaking",
    "part",
    "would",
    "awesome",
    "also",
    "fantastic",
    "incredibly",
    "proud",
    "end",
    "day",
    "point",
    "way",
    "stake",
    "tokens",
    "smart",
    "contract",
    "build",
    "front",
    "end",
    "absolutely",
    "massive",
    "absolutely",
    "fantastic",
    "patting",
    "back",
    "excellent",
    "job",
    "excellent",
    "job",
    "let",
    "go",
    "ahead",
    "wrap",
    "course",
    "welcome",
    "back",
    "friends",
    "feel",
    "good",
    "smarter",
    "empowered",
    "ready",
    "take",
    "world",
    "excellent",
    "well",
    "absolutely",
    "100",
    "deserve",
    "massive",
    "round",
    "applause",
    "done",
    "something",
    "fantastic",
    "started",
    "journey",
    "equipped",
    "tools",
    "become",
    "incredibly",
    "powerful",
    "intelligent",
    "smart",
    "contract",
    "engineer",
    "space",
    "would",
    "remiss",
    "comment",
    "security",
    "audits",
    "comes",
    "smart",
    "contracts",
    "know",
    "smart",
    "contracts",
    "available",
    "chain",
    "anybody",
    "see",
    "anybody",
    "work",
    "means",
    "security",
    "mindset",
    "incredibly",
    "incredibly",
    "important",
    "highly",
    "recommend",
    "going",
    "go",
    "main",
    "going",
    "take",
    "application",
    "onto",
    "real",
    "network",
    "going",
    "securing",
    "lot",
    "people",
    "money",
    "lot",
    "people",
    "assets",
    "absolutely",
    "need",
    "get",
    "audit",
    "excuse",
    "getting",
    "audit",
    "application",
    "securing",
    "lot",
    "people",
    "money",
    "getting",
    "audit",
    "essentially",
    "somebody",
    "else",
    "code",
    "looking",
    "vulnerabilities",
    "could",
    "exploited",
    "audit",
    "difference",
    "protocol",
    "skyrocketing",
    "future",
    "fantastically",
    "successfully",
    "dwindling",
    "getting",
    "hacked",
    "everyone",
    "losing",
    "faith",
    "abilities",
    "audits",
    "essential",
    "got",
    "help",
    "helpful",
    "links",
    "github",
    "repository",
    "associated",
    "course",
    "learn",
    "audits",
    "get",
    "helpful",
    "tips",
    "setting",
    "smart",
    "contracts",
    "make",
    "auditors",
    "lives",
    "easier",
    "talking",
    "security",
    "also",
    "helpful",
    "know",
    "common",
    "attacks",
    "space",
    "got",
    "another",
    "wonderful",
    "link",
    "github",
    "repository",
    "show",
    "attacks",
    "get",
    "around",
    "actually",
    "look",
    "like",
    "two",
    "big",
    "enough",
    "think",
    "need",
    "mention",
    "going",
    "oracle",
    "attacks",
    "attacks",
    "two",
    "attacks",
    "see",
    "happen",
    "often",
    "unfortunately",
    "right",
    "state",
    "defi",
    "protocols",
    "get",
    "hacked",
    "millions",
    "dollars",
    "literally",
    "almost",
    "every",
    "day",
    "travesty",
    "space",
    "happening",
    "time",
    "attacks",
    "preventable",
    "understanding",
    "security",
    "tips",
    "due",
    "diligence",
    "getting",
    "audit",
    "going",
    "make",
    "smart",
    "contract",
    "developer",
    "dap",
    "developer",
    "protocol",
    "better",
    "also",
    "entire",
    "space",
    "going",
    "safe",
    "secure",
    "easier",
    "newcomers",
    "get",
    "thankfully",
    "sleep",
    "lot",
    "easier",
    "oracle",
    "manipulation",
    "attacks",
    "learned",
    "best",
    "practices",
    "working",
    "oracles",
    "learned",
    "work",
    "chain",
    "link",
    "decentralized",
    "oracle",
    "network",
    "get",
    "data",
    "external",
    "computation",
    "using",
    "chain",
    "link",
    "decentralized",
    "oracle",
    "network",
    "dawn",
    "solve",
    "oracle",
    "manipulation",
    "attacks",
    "deal",
    "people",
    "manipulating",
    "centralized",
    "oracle",
    "going",
    "using",
    "decentralized",
    "one",
    "reinsurance",
    "attacks",
    "little",
    "bit",
    "trickier",
    "detect",
    "whenever",
    "call",
    "external",
    "smart",
    "contract",
    "smart",
    "contract",
    "outside",
    "project",
    "especially",
    "think",
    "h",
    "somebody",
    "smart",
    "contract",
    "access",
    "changing",
    "variables",
    "want",
    "change",
    "wonderful",
    "examples",
    "github",
    "repository",
    "associated",
    "course",
    "teach",
    "additionally",
    "highly",
    "recommend",
    "everybody",
    "check",
    "ethernut",
    "dam",
    "vulnerable",
    "defi",
    "two",
    "games",
    "show",
    "exploits",
    "solidity",
    "things",
    "might",
    "want",
    "look",
    "writing",
    "smart",
    "contracts",
    "right",
    "got",
    "security",
    "piece",
    "way",
    "huge",
    "congratulations",
    "getting",
    "far",
    "tools",
    "build",
    "better",
    "world",
    "build",
    "smart",
    "contract",
    "applications",
    "empower",
    "community",
    "blockchain",
    "applications",
    "first",
    "question",
    "might",
    "asking",
    "patrick",
    "great",
    "go",
    "tools",
    "want",
    "go",
    "use",
    "absolutely",
    "first",
    "bit",
    "advice",
    "going",
    "say",
    "always",
    "learn",
    "always",
    "going",
    "places",
    "learn",
    "grow",
    "even",
    "though",
    "course",
    "gave",
    "full",
    "setup",
    "everything",
    "going",
    "need",
    "get",
    "going",
    "get",
    "races",
    "start",
    "building",
    "good",
    "know",
    "else",
    "learn",
    "else",
    "grow",
    "amazing",
    "places",
    "going",
    "crypto",
    "zombies",
    "dap",
    "university",
    "ivan",
    "tech",
    "chain",
    "shot",
    "eat",
    "blocks",
    "patrick",
    "collins",
    "youtube",
    "channel",
    "austin",
    "griffith",
    "youtube",
    "channel",
    "nat",
    "youtube",
    "channel",
    "website",
    "chain",
    "link",
    "blogs",
    "really",
    "material",
    "get",
    "hands",
    "learning",
    "100",
    "growing",
    "community",
    "something",
    "pushing",
    "start",
    "blockchain",
    "smart",
    "contract",
    "world",
    "different",
    "corporate",
    "worlds",
    "decentralized",
    "group",
    "open",
    "source",
    "open",
    "sourced",
    "ecosystem",
    "flourish",
    "people",
    "around",
    "us",
    "flourish",
    "growing",
    "connecting",
    "community",
    "absolute",
    "must",
    "way",
    "really",
    "accelerate",
    "momentum",
    "getting",
    "taking",
    "course",
    "twitter",
    "eev",
    "rdit",
    "brownie",
    "discord",
    "ethereum",
    "discord",
    "chain",
    "link",
    "discord",
    "discords",
    "communities",
    "jump",
    "grow",
    "ask",
    "questions",
    "chat",
    "spread",
    "ideas",
    "communities",
    "start",
    "really",
    "coding",
    "tinkering",
    "hackathons",
    "best",
    "places",
    "put",
    "stuff",
    "test",
    "also",
    "really",
    "learn",
    "build",
    "grow",
    "blockchain",
    "space",
    "hackathons",
    "happening",
    "time",
    "places",
    "show",
    "learn",
    "sponsors",
    "build",
    "really",
    "cool",
    "things",
    "win",
    "prizes",
    "well",
    "seen",
    "projects",
    "win",
    "hackathon",
    "go",
    "raise",
    "millions",
    "seed",
    "funding",
    "become",
    "billion",
    "doll",
    "protocol",
    "gotten",
    "advisors",
    "top",
    "investors",
    "like",
    "mark",
    "cubin",
    "projects",
    "wildly",
    "successful",
    "time",
    "also",
    "see",
    "huge",
    "uptick",
    "huge",
    "number",
    "newcomers",
    "space",
    "people",
    "never",
    "written",
    "smart",
    "contract",
    "never",
    "written",
    "code",
    "come",
    "try",
    "learn",
    "grow",
    "come",
    "incredibly",
    "powerful",
    "engineer",
    "networking",
    "people",
    "around",
    "know",
    "lean",
    "talk",
    "community",
    "whether",
    "want",
    "win",
    "hackathon",
    "really",
    "matter",
    "hackathons",
    "great",
    "place",
    "sharpen",
    "coding",
    "skills",
    "get",
    "better",
    "meet",
    "people",
    "maybe",
    "win",
    "prizes",
    "lot",
    "decentralized",
    "projects",
    "look",
    "hackathon",
    "winners",
    "looking",
    "talent",
    "pick",
    "teams",
    "lot",
    "engineers",
    "work",
    "right",
    "work",
    "got",
    "picked",
    "hackathon",
    "hackathons",
    "great",
    "places",
    "go",
    "eth",
    "global",
    "eth",
    "india",
    "eth",
    "global",
    "eth",
    "india",
    "chain",
    "link",
    "hackathon",
    "best",
    "hackathons",
    "business",
    "sure",
    "check",
    "decentralized",
    "protocols",
    "ton",
    "work",
    "people",
    "help",
    "grow",
    "protocol",
    "way",
    "community",
    "grant",
    "projects",
    "people",
    "come",
    "propose",
    "grant",
    "propose",
    "something",
    "community",
    "person",
    "builds",
    "idea",
    "improve",
    "one",
    "decentralized",
    "applications",
    "go",
    "ahead",
    "propose",
    "want",
    "improve",
    "get",
    "approved",
    "could",
    "awarded",
    "grant",
    "work",
    "well",
    "could",
    "become",
    "smart",
    "contract",
    "consultant",
    "start",
    "offering",
    "services",
    "people",
    "looking",
    "really",
    "strong",
    "solidity",
    "smart",
    "contract",
    "developers",
    "start",
    "reaching",
    "projects",
    "skills",
    "start",
    "reaching",
    "people",
    "saying",
    "hey",
    "got",
    "great",
    "idea",
    "something",
    "want",
    "build",
    "looking",
    "take",
    "next",
    "level",
    "important",
    "piece",
    "advice",
    "build",
    "good",
    "time",
    "build",
    "things",
    "enjoy",
    "building",
    "learn",
    "fastest",
    "building",
    "tinkering",
    "trying",
    "new",
    "things",
    "things",
    "also",
    "one",
    "best",
    "ways",
    "meet",
    "people",
    "industry",
    "everybody",
    "work",
    "life",
    "space",
    "work",
    "building",
    "something",
    "became",
    "close",
    "working",
    "things",
    "feel",
    "incredibly",
    "lucky",
    "met",
    "interact",
    "many",
    "fantastic",
    "people",
    "space",
    "hope",
    "one",
    "day",
    "get",
    "meet",
    "interact",
    "good",
    "luck",
    "let",
    "rebuild",
    "world",
    "let",
    "make",
    "world",
    "economic",
    "opportunity",
    "equality",
    "let",
    "rebuild",
    "institutional",
    "trust",
    "absolute",
    "blast",
    "wild",
    "west",
    "cryptocurrency",
    "smart",
    "contracts",
    "blockchain",
    "like",
    "said",
    "hope",
    "meet",
    "one",
    "day",
    "favor",
    "make",
    "today",
    "amazing",
    "day",
    "take",
    "care",
    "everybody"
  ],
  "keywords": [
    "free",
    "code",
    "blockchain",
    "solidity",
    "full",
    "course",
    "python",
    "going",
    "go",
    "everything",
    "need",
    "know",
    "using",
    "smart",
    "contract",
    "take",
    "applications",
    "every",
    "point",
    "time",
    "protocols",
    "like",
    "value",
    "people",
    "decentralized",
    "allows",
    "make",
    "much",
    "even",
    "less",
    "whether",
    "new",
    "space",
    "name",
    "world",
    "little",
    "bit",
    "chain",
    "link",
    "protocol",
    "also",
    "called",
    "run",
    "different",
    "nodes",
    "blockchains",
    "one",
    "main",
    "talking",
    "ethereum",
    "users",
    "along",
    "us",
    "means",
    "get",
    "ones",
    "video",
    "contracts",
    "advanced",
    "looking",
    "learn",
    "perfect",
    "place",
    "javascript",
    "well",
    "helpful",
    "coding",
    "right",
    "want",
    "fantastic",
    "description",
    "find",
    "entire",
    "associated",
    "else",
    "pi",
    "github",
    "repository",
    "said",
    "getting",
    "single",
    "piece",
    "sure",
    "grab",
    "look",
    "give",
    "copy",
    "paste",
    "great",
    "working",
    "project",
    "remember",
    "something",
    "start",
    "back",
    "let",
    "talk",
    "best",
    "really",
    "quickly",
    "show",
    "documentation",
    "might",
    "good",
    "open",
    "read",
    "ton",
    "information",
    "try",
    "massive",
    "amount",
    "highly",
    "5",
    "two",
    "maybe",
    "additional",
    "long",
    "come",
    "later",
    "order",
    "around",
    "absolutely",
    "jump",
    "way",
    "set",
    "question",
    "specific",
    "issue",
    "eth",
    "actually",
    "lot",
    "stuff",
    "next",
    "understand",
    "started",
    "however",
    "already",
    "section",
    "since",
    "though",
    "probably",
    "bitcoin",
    "first",
    "use",
    "could",
    "used",
    "transactions",
    "network",
    "store",
    "another",
    "asset",
    "say",
    "similar",
    "assets",
    "work",
    "saw",
    "number",
    "ways",
    "build",
    "without",
    "centralized",
    "pieces",
    "made",
    "add",
    "fact",
    "thing",
    "instead",
    "terms",
    "automatically",
    "three",
    "many",
    "application",
    "move",
    "view",
    "known",
    "oracle",
    "problem",
    "happens",
    "block",
    "box",
    "interact",
    "real",
    "data",
    "external",
    "computation",
    "type",
    "would",
    "logic",
    "comes",
    "incredibly",
    "powerful",
    "randomness",
    "anything",
    "often",
    "times",
    "component",
    "dap",
    "kind",
    "usually",
    "see",
    "looks",
    "write",
    "deploy",
    "allow",
    "better",
    "nfts",
    "layer",
    "couple",
    "dot",
    "development",
    "platform",
    "chains",
    "pretty",
    "still",
    "far",
    "sometimes",
    "learned",
    "quick",
    "able",
    "takes",
    "access",
    "makes",
    "environments",
    "source",
    "node",
    "running",
    "whole",
    "networks",
    "example",
    "longer",
    "allowed",
    "switch",
    "things",
    "funds",
    "withdraw",
    "done",
    "exactly",
    "create",
    "accounts",
    "second",
    "3",
    "five",
    "numbers",
    "math",
    "case",
    "depending",
    "10",
    "ca",
    "changed",
    "form",
    "goes",
    "system",
    "safe",
    "secure",
    "wo",
    "change",
    "sense",
    "private",
    "key",
    "pneumonic",
    "password",
    "always",
    "remove",
    "interest",
    "nothing",
    "wrong",
    "user",
    "pay",
    "provider",
    "100",
    "event",
    "hit",
    "money",
    "making",
    "sign",
    "currently",
    "based",
    "exact",
    "equal",
    "whatever",
    "input",
    "output",
    "happen",
    "environment",
    "lives",
    "interface",
    "push",
    "transparent",
    "easy",
    "away",
    "typically",
    "tokens",
    "please",
    "least",
    "wallet",
    "transaction",
    "ahead",
    "metamask",
    "wallets",
    "download",
    "works",
    "top",
    "easily",
    "install",
    "starting",
    "import",
    "demo",
    "testing",
    "account",
    "put",
    "click",
    "guys",
    "uh",
    "anybody",
    "fake",
    "keys",
    "save",
    "verify",
    "confirm",
    "definitely",
    "test",
    "big",
    "awesome",
    "got",
    "address",
    "ether",
    "scan",
    "addresses",
    "created",
    "zero",
    "unique",
    "call",
    "identifier",
    "public",
    "export",
    "somebody",
    "keep",
    "mind",
    "says",
    "net",
    "bunch",
    "integration",
    "tests",
    "rink",
    "b",
    "evm",
    "faucet",
    "coen",
    "important",
    "18",
    "funding",
    "request",
    "c",
    "balance",
    "refresh",
    "sent",
    "whenever",
    "hash",
    "gas",
    "price",
    "fee",
    "paid",
    "successfully",
    "basically",
    "state",
    "sending",
    "token",
    "send",
    "function",
    "pick",
    "transfer",
    "choose",
    "guay",
    "hey",
    "spend",
    "1",
    "unit",
    "saying",
    "okay",
    "standard",
    "went",
    "obviously",
    "indeed",
    "added",
    "reason",
    "interacting",
    "check",
    "256",
    "hashing",
    "length",
    "string",
    "algorithm",
    "um",
    "changes",
    "blank",
    "size",
    "7",
    "delete",
    "e",
    "nuns",
    "figure",
    "button",
    "think",
    "four",
    "mining",
    "six",
    "error",
    "blocks",
    "variable",
    "previous",
    "last",
    "8",
    "4",
    "none",
    "rest",
    "line",
    "tab",
    "initial",
    "setup",
    "pier",
    "tell",
    "end",
    "latest",
    "wanted",
    "random",
    "tx",
    "implementation",
    "answer",
    "message",
    "oh",
    "gets",
    "bytes",
    "note",
    "brownie",
    "front",
    "ignore",
    "yes",
    "list",
    "consensus",
    "proof",
    "stake",
    "defined",
    "part",
    "creating",
    "types",
    "easier",
    "true",
    "current",
    "reward",
    "needs",
    "collateral",
    "fork",
    "onto",
    "person",
    "follow",
    "swap",
    "enough",
    "recommend",
    "upgrade",
    "2",
    "staking",
    "hook",
    "base",
    "scroll",
    "simple",
    "storage",
    "file",
    "remix",
    "nice",
    "soul",
    "files",
    "compiler",
    "parameters",
    "version",
    "deploying",
    "vm",
    "command",
    "pop",
    "compile",
    "versions",
    "define",
    "uint",
    "favorite",
    "equals",
    "un",
    "false",
    "pool",
    "object",
    "32",
    "etc",
    "variables",
    "leave",
    "slash",
    "functions",
    "keyword",
    "deployed",
    "parameter",
    "buttons",
    "return",
    "inside",
    "pass",
    "calls",
    "exists",
    "retrieve",
    "returns",
    "calling",
    "plus",
    "u",
    "index",
    "stored",
    "array",
    "syntax",
    "method",
    "oops",
    "rid",
    "mapping",
    "yet",
    "map",
    "available",
    "actual",
    "web",
    "connect",
    "connected",
    "ipfs",
    "correctly",
    "wait",
    "compiled",
    "factory",
    "folder",
    "knows",
    "path",
    "directory",
    "statement",
    "close",
    "track",
    "recent",
    "abi",
    "functionality",
    "cool",
    "imported",
    "interfaces",
    "fundme",
    "fund",
    "funded",
    "sender",
    "6",
    "owner",
    "usd",
    "conversion",
    "rate",
    "events",
    "api",
    "feeds",
    "ui",
    "fusd",
    "feed",
    "vf",
    "mainnet",
    "skip",
    "decimals",
    "local",
    "mock",
    "round",
    "id",
    "updated",
    "sl",
    "aggregator",
    "v3",
    "importing",
    "package",
    "anyways",
    "whoops",
    "literally",
    "wrap",
    "eight",
    "50",
    "f",
    "pull",
    "zeppelin",
    "div",
    "minus",
    "require",
    "count",
    "admin",
    "constructor",
    "funders",
    "loop",
    "deployments",
    "browning",
    "vs",
    "total",
    "installed",
    "terminal",
    "k",
    "otherwise",
    "script",
    "config",
    "format",
    "scripts",
    "comma",
    "print",
    "enter",
    "excuse",
    "metadata",
    "json",
    "mix",
    "piy",
    "ganach",
    "ganache",
    "upload",
    "url",
    "directly",
    "env",
    "update",
    "15",
    "cli",
    "yarn",
    "attributes",
    "def",
    "symbol",
    "assert",
    "default",
    "koven",
    "active",
    "browny",
    "tag",
    "dictionary",
    "mocks",
    "entrance",
    "app",
    "components",
    "lottery",
    "winner",
    "players",
    "mod",
    "vrf",
    "consumer",
    "coordinator",
    "keyh",
    "erc20",
    "fulfill",
    "supported",
    "blah",
    "die",
    "erc",
    "lending",
    "borrow",
    "deposit",
    "deposited",
    "debt",
    "borrowed",
    "repay",
    "approve",
    "v2",
    "approved",
    "ethers",
    "nft",
    "collectible",
    "openc",
    "721",
    "uri",
    "images",
    "image",
    "pug",
    "dog",
    "mint",
    "increment",
    "counter",
    "st",
    "bernard",
    "breed",
    "upgradeable",
    "proxy",
    "initializer",
    "react",
    "farm",
    "staked",
    "stak",
    "stakers",
    "typescript",
    "tsx",
    "header",
    "material",
    "styles",
    "const",
    "notifications"
  ]
}