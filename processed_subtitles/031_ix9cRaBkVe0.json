{
  "text": "what's up everybody in this video I'm\ngoing to teach you everything you need\nto know to start coding with python I've\nalso included 20 different Hands-On\nprojects to help you learn you can find\nthe entire list in the description of\nthis video our final project will be a\nweather app that fetches real-time\nweather data from an API even if you've\nnever coded anything in your life before\nI'll walk you through the basics the\nABCs of programming if that sounds good\nto you then I encourage you to sit back\nrelax and enjoy the\nshow this course doesn't cost you\nanything but if you would like to help\nme out you can help increase its reach\nby hitting the like button leave a\nrandom comment down below and subscribe\nif you'd like to be a fellow bro thank\nyou I appreciate it I don't like boring\nintroductions so I say we just jump\nright in there's two things we'll need\nto download the first is a python\ninterpreter to convert our written code\nto machine code we're going to head to\npython.org or go to\ndownloads and download the latest\nversion we will open this\nexecutable if you're on Windows you'll\nwant to check this checkbox add python\nexe to path and we will install\nnow the setup was successful and that's\nall you need to do to download the\npython\ninterpreter the second download we'll\nneed is an IDE an integrated development\nenvironment basically a place where we\ncan write code for idees there's two\npopular choices when writing python code\npycharm and vs code if you already use\nvs code you can stick with that just be\nsure to download the python extension I\nfind pycharm more beginner friendly if\nyou've never coded before if you would\nlike to use pycharm go to jetb\nbrains.com pycharm\nand we will click this green download\nbutton there's two versions of py charm\nthe professional version and the\ncommunity version the professional\nversion is paid for I would not\nrecommend using it only because there's\nplenty of free Ides on the market we'll\nuse the Community Edition the free one\nbecause I don't like to pay for things\nand I'm sure you don't either select the\ncorrect download for your operating\nsystem I'm running Windows I will\ndownload pycharm\nwe will open this\nexecutable click next you could select a\ndestination folder I'll keep it as is\nnext I'll create a desktop\nshortcut but you don't necessarily need\nto click next install and we'll just\nhave to give it a\nmoment okay the setup is now complete\nI'll check this check box to run py\ncharm when we click close this\nwindow after opening py charm we're\ngoing to create a new\nproject you can rename your python\nproject I'll keep it as is you can\nselect a location again I won't change\nthat you can create a sample welcome\nscript but for this tutorial we won't\nlet's select the latest python\nversion and create our new\nproject in the menu to the left we're\ngoing to create a new python file file\nfile new python\nfile let's name this file\nmain but really you can name it anything\nand select python\nfile python files end with the py file\nextension we should have our main python\nfile within our python project folder\nnow we're going to print something to\nthe console window within our main\npython file we're going to write a print\nstatement so type print add a set of\nparentheses between the set of\nparentheses we will add a set of double\nquotes to print something or single\nquotes either one my own preference is\ndouble quotes normally in a programming\ntutorial the instructor would tell you\nto print something such as hello world\nbut we like to be different\nhere instead think of your favorite food\nin this case I like pizza\nI will print I like\npizza to run our Python program we will\nclick the screen Arrow to run our main\npython\nfile we should have a console window\nthat displays our output I like pizza or\nwhatever your favorite food is let's\nprint another line of\ncode let's\nprint it's really\ngood by adding a second print statement\nwe are printing a second line of\ncode now we'll discuss\ncomments the python interpreter doesn't\noutput comments to write a comment you\nuse a pound sign I like to call this a\nhashtag my comment will be this is my\nfirst Python\nprogram comments are used as notes for\nyourself or for other people reading\nthis code if I were to run this code\nagain this comment is not displayed to\nthe output we still have I like pizza\nit's really good all right everybody so\nthat is your very first Python program\nand in the next topic we'll discuss\nvariables all right everybody we are\nmoving on to variables a variable is a\ncontainer for a value there's four\ndifferent data types we'll discuss\nstrings integers floats and and booleans\nyes I know that's a silly name a\nvariable behaves as if it was the value\nit contains each variable should have a\nunique name let's say we have a variable\nof first name to assign a variable you\nuse the assignment operator of equals\nfor text a string is a series of text\nthis can be double quotes or single\nquotes my own preference is double\nquotes why don't you type in your first\nname this very ible a first name will\nbehave as if it was this value the\nseries of\ncharacters so to demonstrate this I'm\ngoing to print my first name\nvariable so place it within a print\nstatement without quotes that will print\nyour first name now you don't want this\nwithin\nquotes because then you're literally\nprinting the word first\nname you could use your variable along\nwith some text by using what is called\nan F string that's the easiest way to\ndisplay a variable so you type f then a\nset of quotes the f means\nformat so let's say the word hello then\nwe will add our variable we will insert\nour variable into this text when using\nan F string to do that you need a set of\ncurly braces then insert your variable\nso the result is hello whatever your\nfirst name is in my case bro let's\ncreate another\nvariable let's say we have a variable of\nfood food equals think of your favorite\nfood for me I will type\nPizza let's print the\nfollowing you like add a placeholder\nagain I'm using an F\nstring our variable of food hello bro\nyou like\npizza let's create an\nemail use your own email or make up one\nlet's say my email is bro1\n123\nfake.com then let's print our\nemail your email is at a placeholder\ndisplay our email\nvariable your email is bro1 123\nfake.com so these are string\nI'm going to add a comment that these\nare strings a string is a series of\ncharacters they can include numbers but\nwe treat them as\ncharacters now we have\nintegers an integer is a whole number an\nexample of this could be somebody's age\nhow old are they according to my YouTube\nstatistics many of you are between the\nages of 18 through 24 let's say that I'm\n25 let me zoom in a little you're\ninteger should not be within quotes\nbecause it would be a string then\ntechnically if I would like to work with\nthis variable again I'll use an F string\nlet's say you are at a placeholder\ndisplay our age\nvariable years\nold you are 25 years\nold another example of an integer could\nbe a\nquantity you are buying a certain amount\nof something maybe I am buying three\nitems I wouldn't have half an item this\nwould be a float technically rather than\nan integer we are buying three of\nsomething so let's print the\nfollowing you are\nbuying at a placeholder display our\nquantity\nitems you are 25 years old you are\nbuying three items\nanother example of an integer could be\nan amount of people let's say num of\nstudents like a\nclassroom there are 30 students in our\nclass then we will\nprint your class has at a\nplaceholder students we will display the\nnumber of students num of\nstudents your class has 30 students\nthose are integers they're whole numbers\nand again make sure they're not within\nquotes because then technically they\nwould be a\nstring integers we can use in arithmetic\nExpressions if they were strings we\ncouldn't then we have floats float means\nfloating Point\nnumber a float is a number but it\ncontains a decimal portion an example\nwould be a price what is the price of\nsomething\n$1.99 let's print our price print I'll\nuse an F string the price is add a\nplaceholder display our\nprice the price is\n$10.99 let's preat our placeholder with\na unit of currency I'll pick American\ndollars but feel free to pick something\nelse the price is\n$10.99 so floats contain a decimal\nportion what about a grade point average\nGP\nlet's say my GPA is\n3.2 then I will print your GPA\nis display our\nGPA your GPA is\n3.2 what about a distance a distance can\ncontain a decimal\nportion\n5.5 kilm Maybe\nthen I will\nprint\nyouan at a placeholder display our\ndistance then I'll add km for kilometers\nor you could add Mi for miles but I'll\nstick with\nkilometers you ran 5.5\nkm okay then we have booleans a Boolean\nis either true or\nfalse let's say we're a student is\nstudent equals if we are a student we\ncould say that this is true true starts\nwith a capital T if we weren't a student\nlet's say we graduate we could say that\nthis is false again the first letter is\ncapital booleans only have two options\ntrue or false so let's say that I am a\nstudent then I will\nprint are you a student\nthen we will display our Boolean value\nof a\nstudent are you a student that is\ntrue with Boolean values we really don't\noutput them directly you're more likely\nto see them used internally within a\nprogram such as when working with if\nstatements this is a topic we'll discuss\nin the future so don't worry you may see\nif is student if this variable is true\nthen we will print the following\nnow we don't need to use an FST string\nwe're not going to insert any variables\nyou are a student If This Were false we\ncan add an else\nClause where we will\nprint you are not a\nstudent our variable of is student is\ntrue we will print the if statement you\nare a student If This Were false we will\nprint whatever is within else\nyou are not a student let's think of a\nfew more\nexamples is something for sale like a\ncar or a product of some sort let's say\nthat is true I'll write another if\nstatement if for sale if this variable\ncontains true we will do the\nfollowing let's\nprint that item is for\nsale else if it's false we will print\nsomething\nelse that item is not\navailable for sale is set to\ntrue this variable is true we will print\nthat item is for sale else if it were\nfalse we print that item is not\navailable one more example let's say we\nhave a Boolean variable of is online is\nsomebody on online I will set that to\ntrue if is online if that's true we will\nprint you are\nonline else we will\nprint you are\noffline is online is set to true we will\nprint you are online else if it were\nfalse we print your\noffline all right everybody so those are\nvariables\na variable is a reusable container for a\nvalue there's four basic data types for\nbeginners a string which is a series of\ntext integers which are whole numbers\nfloats which are numbers but they\ncontain a decimal portion and booleans\nwhich are either true or false they're\nbinary your assignment in the comment\nsection is to post four variables post a\nstring an integer a float and a Boolean\ntry and think a unique example if you\ncan and well everybody those are\nvariables in\nPython all right everybody so we are\nmoving on to type casting typ casting is\nthe process of converting a variable\nfrom one data type to another we have\nvarious functions to convert a value or\nvariable to a string an integer a float\nor a Boolean let's create some\nvariables we will create a name variable\ntype in your full name\nname an age make up some\nage a GPA for grade point average let's\nsay minus\n3.2 and a Boolean of a\nstudent are we currently a student let's\nsay that's\ntrue now you actually could get the data\ntype of a variable or a value by using\nthe type function then pass in a value\nor\nvariable however when I run this there's\nno output\nso I need a print\nstatement we will print what is returned\nby the type function get the type of our\nname variable then print\nit so our name variable is a string St\nStr our age\nvariable is an integer and\nint GPA is a\nfloat is student is a Boolean using\nthese typ cast functions we can convert\nfrom one data type to another here's how\nlet's start with something simple let's\nconvert our GPA to an integer currently\nit's a float I will reassign\nGPA use the int function to typ cast to\nan integer then pass in my\nGPA at the end we will print our\nGPA if we typ cast 3.2 to a whole\ninteger what would the result be a whole\ninteger of three we truncate the decimal\nportion let's convert our age to a\nfloating Point number we will reassign\nour variable of\nage use the typ cast function of\nfloat then insert our age\nvariable let's print our age\nvariable and it should be a floating\nPoint number\n25.0 now we'll cover strings let's typ\ncast our age to be a string age equals\ncall the typ cast function of string St\nStr passing our age\nvariable so the result is still going to\nappear the\nsame 25 however it's a string not an\ninteger and to prove that I will enclose\nmy age variable with the type\nfunction the type of variable age is a\nstring it would be the same as if we're\ntaking this number and enclosing it\nwithin\nquotes So this would make a difference\nbecause let's say that I add one to age\nage plus equals\n1 well we would get a type error can\nonly concatenate strings not integers to\na\nstring however if I were to add a string\nof one to the end we would be using\nstring concat ation so let's say it's my\nbirthday and I add one to 25 well since\nwe're working with strings now the\nresult would be\n251 I am 251 years\nold so strings and numbers behave\ndifferently with numbers we can use them\nwithin arithmetic Expressions strings\nnot so much we will take our name\nvariable and typ cast it to a\nBoolean name\nequals call the typ cast function of BU\npassing our name\nvariable this has an interesting result\nso I'm going to print name booleans are\neither true or false if I typ cast my\nstring of text into a\nBoolean that gives me\ntrue now it really doesn't matter what I\nwrite here if I were to change my name\nto a single character such as B this\nwould still be true if our string\nvariable was empty there were no\ncharacters within it that would actually\ngive us\nfalse we could use this to check to see\nif somebody enters in their name or not\nif somebody types in their name then we\ntyp cast it to a Boolean if somebody\nskips entering in their name that would\nreturn false we could reprompt the user\nto enter in their name again all right\neverybody so that is typ casting it is\nthe process of converting a variable\nfrom one data type to another\nthis is especially useful with handling\nuser input because user input is always\na string there may be at times where you\nwant to convert it to an integer a float\nor a Boolean and well everybody that is\ntyp casting in\nPython all right everybody in this topic\nI'm going to show you how we can accept\nuser input in Python we use the input\nfunction it's a function that prompts\nthe user to enter in data and it Returns\nthe enter data as a string here's here's\nan example to accept user input we will\ncall the input function when I run this\nprogram we need to enter in data to our\nconsole\nwindow like so then hit enter however we\nneed a\nprompt we need to tell the user what we\nwant them to type in so let's ask a\nquestion our prompt will be within\nquotes let's say what is your\nname let's try this again what is your\nname I can type in something why don't\nyou go ahead and type in your full\nname then hit\nenter now with this input we're not\nquite doing anything with it the input\nfunction is going to return some data as\na string we can assign it to a variable\nif we would like let's create a variable\nof name name equals our user\ninput then once we have our name let's\nprint a message I'll use an F string we\nwill print hello add a placeholder then\ninsert our name variable within that\nplaceholder let's try\nthis what is your name type in your name\nhit enter hello whatever your name is\nlet's try a different name I will pick\nSpongeBob many people are familiar with\nSpongeBob hello\nSpongeBob this time we will ask a user\nhow old they are let's assign a variable\nof age equals accept some user input we\nneed a prompt within\nquotes how old are\nyou once we have our age variable let's\nprint I'll use an F string you are at a\nplaceholder our variable\nage years\nold what is your name type in your name\nhow old are you let's say that I'm\n25 hello whatever your name is you are\nwhatever your age is years\nold all right so let's say that it's our\nbirthday before we print our age\nvariable let's\nsay happy\nbirthday since I'm not inserting any\nvariables within this print statement\nthis doesn't need to be an F string\nyou'll want to use an F string if you\nwant to insert variables before we\ndisplay the user's\nage let's take the user's age and\nincrease it by one we could say age\nequals age +\n1 but there's one problem with\nthis type in a\nname how old are you type in an\nage and we have a problem we have a type\nerror can only concatenate strings not\nintegers to\nstrings when we accept user input we\nstore that input as a string before we\nincrement our age by one we'll need to\nconvert it to an integer we can't\nnormally use strings within arithmetic\nExpressions but we can do that with\nintegers and floats though after we\naccept some user input for our age\nvariable we could take our age variable\nand typ cast it as an integer which we\ntalked about in the previous lesson so\nlet's say age equals our age after we\ntyp cast it then increment it by\none so type in your\nname type in an\nage and we get this message hello your\nname happy birthday you are whatever\nyour age is years\nold so strings we can't normally use\nwith arithmetic Expressions we would\nhave to typ cast it to an integer or a\nfloat however we could condense some of\nthese steps we're taking up an extra\nline to type cast our age as an integer\nwhat we could do instead is that when we\naccept our user input we can enclose the\ninput function within a typ cast to int\nand that would work the same type in\nyour\nname type in an\nage and this works the same and it takes\nless lines of code and is more readable\nI would say when we accept user input it\nreturns that input as a string data type\nthen we just have to typ cast it to\nanother data type if we need to and in\nthis case for age we do now we'll go\nover a couple exercises because it's\nimportant to practice what you've\nlearned in this first exercise we're\ngoing to calculate the area of a\nrectangle we need to prompt the user to\nenter in a length and the width of a\nrectangle so we will create a variable\nof length we will accept some user input\nusing the input function what is our\nprompt let's say enter the\nlength let's do this with width I'll\njust copy and paste what we have width\nequals enter the\nwidth so we have the length and the\nwidth to get the area of a rectangle we\nhave to multiply the length by the width\nso let's say area equals our length\nvariable now to use mult multiplication\nyou use an asterisk we'll discuss\ndifferent arithmetic operators in the\nnext lesson so we have length time width\nthat is the\narea I'm going to print our\narea because I need to test something\nenter the length let's say 5 5 in 5 cm\ndoesn't matter enter the width six we\nget a type error can't multiply sequence\nby non-int non- integer of type string\nwhen we accept user input it returns a\nvalue of the string data type we can't\nuse those strings in arithmetic\nExpressions we're multiplying the length\ntimes the width we would need to tycast\nthem as an integer or a float since\nwe're working with basic geometry such\nas calculating the area let's do float\nso let's typ cast our user input as a\nfloat for both length and width\nokay let's try this again let's say 5 *\n6 the area that's returned to us is 30\n30.0 this result contains a decimal it's\na floating Point number a\nfloat so when we print the area I'll use\nan F string this time the area is I'll\nadd a placeholder display our area\nvariable let's add a unit of measurement\nafterwards I'll pick centimet now since\nwe're working with areas if we would\nlike to technically be accurate so we\ncould say to the power of two or we\ncould add a superscript so if you would\nlike superscript 2 and you're on Windows\nmake sure numlock is on hold alt then\ntype on the numpad\n0178 so we have a superscript of two\nagain it's not really necessary for this\nlesson I just think it'd be cool to\ninclude it because then it's technically\naccurate all right let's say that the\nlength is\n6.1 and the width is\n7.2 the area is\n43.92 cm squared because we're working\nwith areas let's cover a second exercise\nthis time we will create a shopping cart\nprogram exercise two we're going to\ncreate a shopping cart program we need\nthree variables an item a price and a\nquantity of those\nitems we will create a variable of item\nwe will accept some user\ninput what item would you like to\nbuy what are we trying to purchase we'll\nkeep the data type of the user input as\na\nstring then we need a price what is the\nprice of each item we're buying use the\ninput\nfunction what is the a\nprice a price should be a floating Point\nnumber for example we might have dollars\nand sense we need a decimal so let's typ\ncast our input as a\nfloat then a\nquantity we will accept some user\ninput our prompt will be how\nmany would you\nlike quantities they should be whole\nnumbers let's type cast our input as an\ninteger then we will have a total What's\nthe total that we have to pay so let's\ntake the price of each item use an\nasterisk for multiply our\nquantity then let's do a test run let's\nprint our\ntotal what item would you like to buy\nlet's say a\npizza what is the price $10.99\nhow many would you like I would like\nfive\npizzas and our total is\n54.9 let's say that before we display\nthe total let's print the following I'll\nuse an F string you have\nbought insert a placeholder display our\nquantity\nX item or items I'll add SLS\nthen we will print I'll use an FST\nstring again your total\nis display our\ntotal what item would you like to buy I\nwould like to buy a\npizza what is the price\n$10.99 how many would you like I would\nlike nine pizzas they're all for me I'm\ngoing to eat all of\nthem you have bought 9 x pizzas your\ntotal is 98.91%\nall right everybody that is how to\naccept user input in Python and we've\ncovered a few exercises in the next\ntopic we're going to create a Mad Libs\ngame and that is how to accept user\ninput in\nPython all right everybody in this video\nwe're going to create a game of Mad Libs\nnot because we have to but because I\nwant to it would be a good exercise for\nus just so we're more comfortable with\naccepting user input if you're not\nfamiliar with Madlibs Madlibs is a word\ngame where you create a story\nby filling in the blanks with random\nwords so we're going to create a story\ntemplate the story is going to be\nmissing some components we will fill in\nthose components with random words that\nwe type in here's a story that I've\nwritten myself print use an FST string\ntoday I went to a insert a placeholder\nZoo for our placeholder we'll insert an\nadjective we'll insert a variable named\nadjective adjective adjective one you're\ngoing to get an English lesson today too\nand adjective is a description of\nsomething so for our Zoo adjective one\ncould be\nexpensive\nlarge dirty an adjective describe\nsomething we'll fill this in when we\naccept user\ninput for our second print statement\nlet's print the\nfollowing in an\nexhibit I saw a placeholder will include\na noun noun one a noun is a person place\nor thing in English maybe a gorilla a\ngorilla named harambe for\nexample print use an FST string let's\nsay our noun one whatever this is we can\nreuse\nvariables was we will create a second\nadjective adjective\n2 we will be describing whatever noun\none is this person place or thing and we\nwill insert a verb verb one a verb is an\naction such as running or eating then\nfor our last statement let's print I was\nat a\nplaceholder we'll create adjective three\nadjective 3 will describe us now we're\ngoing to fill in these variables by\naccepting user input we're going to fill\nin adjective\none we'll accept user input using the\ninput\nfunction enter and\nadjective I'm going to add a reminder\nthat an adjective is a description of\nsomething then we need noun one\nnoun one equals\ninput enter a noun a noun is a person\nplace or\nthing then we have adjective two I'll\njust copy adjective one paste it change\none to\ntwo then a verb verb one equals\ninput enter a verb I want verb one to be\nin current tense I'll ask ask the user\nto end the verb with ing enter a verb\nending\nwithg then it's current tense our person\nplace or thing of noun one is currently\ndoing something such as\neating and then adjective three and I'll\njust copy one of these adjectives\nadjective three equals input enter an\nadjective okay and then we are ready to\nrun this enter an adjective an adjective\ndescribes something I will say\nsuspicious or some kids like to say\nsussy or sus even I've also heard of\nkids nowadays using the word skibidi\nfeel free to type in whatever you would\nlike it is your story after all I'm\ngoing to say\nsuspicious enter a noun a person place\nor thing I like to poke fun at Mark\nZuckerberg so I'm going to say my person\nis Mark\nZuckerberg enter an adjective that is a\ndescription\nangry enter a verb ending with ing so\nit's current tense uh\nscreeching enter an adjective\nhappy here's my story today I went to a\nsuspicious zoo in an exhibit I saw a\nMark\nZuckerberg Mark Zuckerberg was angry and\nscreeching I was happy that's our game\nof Mad Libs it's a word game where you\ncreate a story by filling in the blanks\nwith random words also post the output\nof your Mad Libs game in the comment\nsection down below because I really want\nto read them I want to see what you guys\ncame up with and well everybody that is\na Mad Libs game using\npython hey everybody in this video I'm\ngoing to show you all of the different\nmath that we'll need throughout the rest\nof the series I have a lot to cover and\nI'll split this video into different\nsections we'll cover some basic\narithmetic operators built-in math\nfunctions a few functions from the math\nmodule and then a few exercises be sure\nto look at the time stamps if you would\nlike to skip ahead to another section\nlet's begin with some really easy stuff\nwe're going to cover some basic\narithmetic operators let's say we have a\nvariable\nfriends current ly you have zero friends\nif you need to increment a variable by\none you could say friends the name of\nthe variable equals the name of the\nvariable again + one so the plus sign is\nthe addition operator and I think we do\nhave a little bit of experience with\nthat already so if I were to print my\nvariable\nfriends guess what you now have one\nfriend we could also shorten this line\nof\ncode you could say friends plus equals 1\nthat would do the same thing this is\nknown as an augmented assignment\noperator that will give you the same\nresult I prefer to use augmented\nassignment operators just because they\ntake less text and I think they're\neasier to read now let's use\nsubtraction friends equals\nfriends minus two so of course minus is\nthe subtraction operator uh you have\nnetive -2 friends I guess\nif you were to use the augmented\nassignment operator that would be\nfriends minus equals\n2 there you still have -2 friends okay\nmultiplication let's change friends\nto how about five friends equals friends\ntime\n3 you now have 15 friends then the\naugmented assignment operator version of\nthis would be friends times equal\n3 so again you have 15 friends let's\ncover\ndivision friends equals friends divided\nby\n2 so we have 2.5 friends somebody was\ncut in half we have half a friend maybe\nit's just their legs or torso or\nsomething then the augmented assignment\noperator would be friends ID equal\n2 and the result is still the\nsame now exponents friends equals\nfriends to the power of two so if\nfriends is currently five friends to the\npower of two would be 5 * 5 which is\n25 the augmented assignment operator\nversion of this equation would be\nfriends\nexponent equals\n2 and again friends is\n25 then we have modulus modulus gives\nyou the remainder of any division\nsuppose we have 10 friends instead of\nfive I will assign a new variable\nremainder remainder equals friends the\npercent sign is known as the modulus\noperator it will give us the remainder\nof any Division if I were to divide my\ngroup of friends by three will have one\nremaining I'll store the remainder\nwithin a separate variable we would have\na remainder of one it's kind of like in\nclass when the teacher says for\neverybody in the class to go into groups\nat three then there's always that one\nkid that's by themselves that's kind of\nthe same concept we're dividing our\nfriends into groups of three then the\nmodulus will give you the remainder if\nwe divided our group of friends into\ngroups of two well 10 divides by two\nevenly so there is no remainder so that\nis the modulus oper operator it's fairly\npopular to use this operator to find if\na number is even or odd because it will\ndivide by two evenly if that number is\neven if the remainder is one that means\nthat the original number is odd okay so\nyeah those are some basic arithmetic\noperators addition subtraction\nmultiplication division\nexponentiation then\nmodulus now what we're going to do is\ncover some built-in math related\nfunctions suppose we have three\nvariables x = 3.14\ny =\n4 Z = 5 it doesn't matter if these are\nfloating Point numbers or whole integers\nthe first is the round function we have\na variable named result I'm going to\nround\nX so there is a built-in round function\nafter the set of parentheses we can add\nsome value or variable to be rounded so\nwe will round x to the nearest whole\ninteger then print the result so our\nresult is three so that's the round\nfunction with the absolute value\nfunction we can find the absolute value\nof a number uh let's change y to be4\ninstead of\nfour we'll take result equals ABS which\nmeans absolute value of y the absolute\nvalue is the distance away from zero as\na whole\nnumber the absolute value of -4 is\n4 let's change y back to\nfour there's a built-in power\nfunction result equals\npow then we'll need a base and an\nexponent what's y to the power of\n3 that would be 4 * 4 * 4 which is 64\nthat the power function you can raise a\nbase to a given\npower the next two are really useful\nusing the max function we can find the\nmaximum value of various values what's\nthe maximum value between X Y and Z then\nI'll just need to store this value uh\nresults equals the max between X Y and Z\nwell the maximum value is\nfive other wise there's\nMin what's the minimum value between X Y\nand Z that would be\n3.14 now in this next section we do have\nsome very useful constants and functions\nfrom the math class but we'll need to\nimport the math module at the top of our\ntext editor so import math if you need\nthe value of pi you'll type the name of\nthe math module do PI and I'm just going\nto print this print math. Pi the value\nof pi is\n3.1459 and a bunch of digits that come\nafter if you're working with physics I\ndo know that people use the constant e a\nlot we won't be using e in this video\nseries but if you ever need access to it\njust type math. e and that will give you\ne which is\n2.71 something something something I\nbelieve e is known as the exponential\nconstant if you need the square root of\na\nnumber let's say result\nequals\nmath.sqrt we can place a variable or a\nvalue within the square root function uh\nlet's say we have X again x = 9 what is\nthe square root of x then I will print\nwhatever the result\nis the square root of 9 is three that is\nthe square root\nfunction there's a ceiling function\nresult equals\nmath do Seal Seal will always round a\nfloating Point number up suppose X is\n9.1 so 9.1 rounded up is\n10 otherwise there's floor which will\nalways round a number down result equals\nequal math. floor let's change X to\n9.9 9.9 rounded down is nine those are\nsome useful math functions let's go over\nsome\nexercises okay this first exercise we\nare going to calculate the circumference\nof a circle we'll need the help of the\nmath module because there's some good\nfunctions in there to calculate the\ncircumference of a circle the formula is\n2 * < * r\nlet's ask a user for a radius because\nthat's what R is we'll accept some user\ninput enter the radius of a\ncircle we will type cast the input as a\nfloating Point\nnumber to calculate the\ncircumference again the equation is 2 *\npi we can get that from the math module\ntimes whatever the radius is and the\nuser is going to type that in then we\nwill print whatever the\ncircumferences print we'll use an FST\nstring the\ncircumference is our variable\ncircumference enter the radius of a\ncircle I'll enter 10 actually\n10.5 their circumference is 65 .97 if\nyou want to round and truncate some of\nthese numbers we can use the round\nfunction around\ncircumference then round to a given\ndecimal place I'll round to two\ndigits again 10.5 rounded is 65.9 7 you\ncould add a unit of measurement too\nlet's say centim\n10.5 is 65.9 7 cm all right that is the\nfirst\nexercise for this next exercise let's\ncalculate the area of a circle we'll\nimport the math\nmodule we'll ask for a radius much like\nbefore radius equals\ninput enter the radius of a\ncircle we'll cast our input as a\nfloating Point\nnumber the equation for the area of a\ncircle\nis pi\ntimes radius squared we could easily use\nthe built-in power function to raise our\nradius to the power of two then we will\ndisplay the area print I'm using an F\nstring the\narea of the\ncircle is our area to some unit of\nmeasurement let's say centim\nsquared and enter the radius of a circle\n10.5 the area of the circle is\n34636 but I would like to round this\nnumber to two decimal places I'll use\nthat round\nfunction and I'll Place area and the\nnumber of digits to round two within\nthis function let's try that again\n10.5 the area of the circle is\n34636 cm squared that is the second\nexercise\nfor this last program we're going to\nfind the hypotenuse of a right triangle\nthe formula to calculate the hypotenuse\nof a right angled triangle is C = theare\n< TK of A2 + b^2 we'll Begin by\nimporting the math module we'll ask the\nuser for the lengths of side A and\nB A\nequals\ninput enter side\na we'll cast the input as a floating\nPoint\nnumber we'll do the same thing with side\nb b\nequals enter side\nB now this part's going to be confusing\nwe'll calculate C we'll need a^2 +\nb^2 will take a to the power of two plus\nB to the^ of\ntwo then we'll need the square root of\nall of this whatever the result is I\nwill surround this equation with math.\nsquare\nroot and that should give us our\nanswer let's\nprint using an F\nstring side C\nequals whatever C is\nso enter side a three side B will be\nfour side C is five all right everybody\nso that was everything related to some\narithmetic operators and math related\nfunctions in Python and in the next\nvideo we're going to cover a few things\ninvolving string\n[Music]\nformatting hey everybody in this topic\nI'm going to explain if statements an if\nstatement is used to do some code only\nif some condition we set is true l we\ncould do something else it's a basic\nform of decision making if it's true we\ndo something if it's not true we don't\ndo it let's ask a user for their age age\nequals\ninput enter your age I will type cast\nthe input as an\ninteger depending on what the user's age\nis we can do one of a few things let's\npretend that the user would like to sign\nup for a credit card but in order to do\nso their age needs to be greater than or\nequal to 18 well we can check that to\nuse an if statement type if then some\ncondition what would we like to check\nlet's check to see if the user's age is\ngreater than or equal to 18 then add a\ncolon then hit enter any code underneath\nthe if statement should be indented make\nsure to pay attention to that because\nthat's easy to miss if the user's age is\ngreater than or equal to 18 let's print\nyou are now signed\nup if I were to run this code I'll type\nin my age I'll type 21 hit enter this\nstatement is true therefore we will\nexecute any code found within the if\nstatement you are now signed up what if\nthis condition was not\ntrue let's say my age is 13 well nothing\nhappens if the condition we check is\ninstead false we skip over this code\nif you need to take a different course\nof action you could add an else\nstatement if this is true do this else\nwe can do something\nelse let's print a different message you\nmust be 18 plus to sign\nup I'll type in my age again I'll say\nthat I'm 13 hit enter you must be 18\nplus to sign up that's basically an if\nstatement do some code only if some\ncondition is true else you can do\nsomething else entirely it's a basic\nform of decision making the lse\nstatement is kind of like a last resort\nwe can check more than one condition\nbefore reaching the lse statement we can\nadd an else if\nstatement which we just shorten to e l\nmeaning else if else if let's check if\nage is less than zero\nthen we'll print a different\nmessage you haven't been born\nyet now if I run this code I'll say that\nmy age is NE\n-1 this condition is false we skip this\ncode this condition is true therefore we\nwill execute this code and we skip the\nlse statement you haven't been born yet\nlet's add another LF statement you can\nadd as many El if statements as you want\nlet's check to see if somebody's age is\ngreater than or equal to 100 we'll print\na different\nmessage let's print you are too old to\nsign\nup if I were to say my age is 111 years\nold well it states you are now signed up\nthe reason that we didn't reach this\npart of our else if statement that's\nbecause this condition is still\ntechnically true you do need to pay\nattention to your order of if and else\nif statements if I want to be sure that\nnobody over 100 is signing up I should\nprobably move this to the\nbeginning if age is greater than or\nequal to 100 then else if age is greater\nthan or equal to 18 we'll do something\nelse and to your age I am 111 years old\nyou are too old to sign up so those are\nif statements if some condition is true\ndo something else if you can check\nsomething else if no above conditions\nare true you could do something else\nentirely it's kind of like the default\nhere's another example we'll ask a user\nif they would like some food response\nequals\ninput would you like\nfood we'll have the user type in y for\nyes or n for\nno if our\nresponse now to check to see if two\nvalues are equal you would use double\nequals if the response is equal to Y\nthen we will\nprint have some\nfood the doubles equal sign is the\ncomparison operator it will check to see\nif two values are equal you don't want\none equals because that's the assignment\noperator python in this case thinks\nwe're attempting to assign the character\ny to response so for comparisons use\ndouble\nequals else we can\nprint no food for\nyou so would you like food I'll type why\nhave some\nfood let's try again I'll type no and\nfor no no food for\nyou here's the third example we'll have\na user type in their name name equals\ninput enter your\nname if our name is equal to an empty\nstring that means they didn't type in\nanything so let's yell at the\nuser you did not type in your\nname else we will print using an F\nstring hello whatever the name\nis enter your name I'm just going to hit\nenter you did not type in your name\nlet's run this again I'll type in my\nname and we have executed the L\nstatement this time hello\nbro so one important thing that you\nshould know is the use of Boolean with\nif statements suppose we have some\nBoolean variable named for sale I'll set\nthis to be true now using an if\nstatement you can just use the Boolean\nvariable in place of a condition because\na condition would evaluate to be true or\nfalse we could just say if for sale if\nthat's true then let's\nprint this item is for\nsale else we will\nprint this item is not for sale for sale\nis set to be\ntrue this item is for\nsale if this variable were\nfalse well then the item is not for sale\nlet's try a different variable how about\nonline\nif online\nthe user is online else the user is\noffline so the user is\noffline I'll change the Boolean to true\nthe user is\nonline so with if statements you can\neither write a condition or you could\nuse a\nBoolean all right everybody so those are\nif statements do some code only if some\ncondition is is true else you can do\nsomething else it's a basic form of\ndecision making and those are if\nstatements in\nPython hey everybody this is a remake of\nmy python calculator program for\nabsolute beginners all you need to know\nto complete this exercise is just if\nstatements and how they work so let's\nget started for this exercise a user is\ngoing to select an arithmetic Operator\nOperator equals input we will ask the\nuser to to enter n\noperator this will be plus for addition\nminus for subtraction as risk for\nmultiplication and a forward slash for\ndivision you could enter more than this\nbut I don't want to make this exercise\ntoo complicated we will create a\nvariable of num one to contain our first\nnumber let's say we would like to add\ntwo numbers together what is the first\nnumber going to\nbe enter the first number\nand let's do this with the second\nnumber num two enter the second\nnumber let me show you something I'm\ngoing to add num one and num two\ntogether num one plus num two we'll do a\ntest\nrun enter an operator I would like to\nuse addition enter the first number 10\nand 11 well the result is 101\nwhen we accept user input they are\nstring data types what we've ended up\ndoing is string concatenation we've\nconcatenated the string of 11 to 10\nthat's why we ended up with\n101 we'll have to convert these two\nstrings to be floating Point numbers by\ntyp casting them as a\nfloat so enclose your input functions\nwith a typ cast a flat and now we should\nbe able to add those two numbers\ntogether so let's add 10 and 11 and we\nget\n21.0 depending on the operator that the\nuser selects we'll use some if\nstatements to determine that we will\ncheck if our operator variable is equal\nto a character of\nplus and for now I'll write pass as a\nplaceholder we'll get back to this later\nelse if our\noperator is equal to minus we will use\nsubtraction and for now I'll write\npass else if operator is equal to an\nasterisk for\nmultiplication we will\nmultiply else if our operator is equal\nto a forward slash for division we will\ndivide if our operator is addition let's\ncreate a variable of\nresult result equals num one plus num\nnum\ntwo for\nsubtraction it's going to be num one\nminus num\n2 multiplication would be num one times\nnum\n2 then division would be num one divided\nby num\ntwo then we just have to print the\nresult print our\nresult be sure to do this with each of\nthe LF statements as\nwell and let's see what we have let's\nadd 5.5 +\n6.9 that gives us\n12.4 let's\nsubtract\n420 -\n0.69 that gives us\n41931 let's test\nmultiplication multiply\n3.14 *\n3.14 which gives us 9.85\n96 then\ndivision let's divide 69 by\n13 and that gives us a really long\nnumber so you could round a number if\nyou would like we would enclose our\nresult within the round\nfunction and we'll just update each of\nthese print\nstatements this will round to the\nnearest whole integer so let's divide\n420 by\n13 let's say that we would like three\ndigits after the decimal within the\nround function we could add comma 3 for\nthree decimal\nplaces enter an operator let's use\ndivision divide 420 by\n69 so that gives me\n6.87 so we can round to a given digit\nafter a decimal in in this case three\nplaces what if somebody types in an\noperator that doesn't exist like the\nword\npizza then I will divide two\nnumbers well let's add an L statement if\nsomebody selects some input that is\ninvalid let's let them\nknow I'll use an F string let's say that\nthe operator that the user has\nselected is not valid and let's try this\nagain enter operator Pizza enter the\nfirst number 420 and\n69 Pizza is not valid let's say is not a\nvalid operator instead that makes more\nsense pizza will be my\noperator first number is 420 second\nnumber is\n69 Pizza is not a valid\noperator all right everybody so that is\na very simple python calculator program\nyou can make make as a\nbeginner hey there it's me again in\ntoday's topic we're going to create a\nweight converter program in Python this\nis an exercise that will follow up the\nlesson on if statements we'll convert\npounds to kilogram or kilog to pounds\nthe user is going to decide we will\nBegin by creating a weight variable we\nwill assign some user\ninput enter your\nweight we will convert this input into a\nfloating Point\nnumber so add that cast then we will ask\nfor a unit is this weight in kilog or\npounds\ninput kilograms or\npounds we want the user to type in\neither K for kilogram or L for pounds\nand these are capital letters by the\nway using an if statement let's first\ncheck to see if our unit\nis equal to a capital K that means the\ncurrent weight is in kilogram we need to\nconvert that weight to\npounds let's reassign weight equal\nto our weight times\n2.205 else if unit is equal to l we need\nto convert to\nkilog weight equals weight\nided\n2.205 else the user did not type in\nsomething that was valid let's\nprint using an F\nstring\nunit was not\nvalid at the end of our program we will\nprint the new weight I'll use an F\nstring your weight\nis our new weight after it's assigned\nnow we need a unit of measurement this\nis what I'm thinking we'll do within our\nif and else if statements let's reassign\nour unit we're reassigning unit to be\nlbs for\npounds else if unit equals kgs for\nkilogram in our results we will display\nour new unit let's take a look enter\nyour weight actually I'm just going to\nmake one change I'm going to add colon\nspace there that's much better enter\nyour\nweight let's say I'm 180 lb this is in\npounds I'll type capital L your weight\nin kilogram is 81.6 3 I think I'm going\nto round this I will enclose the weight\nvariable within a round\nfunction we will round to one decimal\nplace let's try this again ENT to your\nweight maybe I'm 81\nkilg I'll type K for\nkilogram your weight is\n178.6 lb let's make sure that this lse\nstatement works too enter your weight 18\n180\npizzas pizzas was not valid so we're\nstill displaying our output we would\nwant to avoid that if somebody doesn't\ntype in a valid unit so let's cut this\nline\nthen paste each within the if and else\nif\nstatements when we exit the else\nstatement we're not printing the output\nso let's make sure that this\nworks and to your weight I am\n180\npizzas pizza was not\nvalid all right everybody well that is a\nweight converter program in Python I\nthought this would be a helpful exercise\nnow that we have finished the section on\nif statements and yeah that is a weight\nconverter program in\nPython hey everybody in this topic we're\ngoing to create a temperature conversion\nprogram as an exercise we'll Begin by\nasking what the current unit of\nmeasurement is unit\nequals we'll accept some user\ninput is this\ntemperature\nin\nCelsius or Fahrenheit\nC\nslf then we will ask for the\ntemperature I'll store the temperature\nin a variable named temp meaning\ntemperature temp equals\ninput enter\nthe\ntemperature then we should cast our user\ninput as a floating Point\nnumber if unit is equal to\nC I'll fill this in momentarily I'm just\ngoing to write pass as a\nplaceholder else if unit is equal to F\nwe will do something\nelse else let's print something just an\nerror message of some sort using an\nfstring\nunit is an invalid unit of\nmeasurement Let's test this lse\nstatement is the temperature in Celsius\nor Fahrenheit what if I were to type K\nfor Kelvin I'll make up some temperature\nlike 100 K is an invalid unit of\nmeasurement all right we know the L\nstatement Works let's convert Fahrenheit\nto Celsius using this formula we will\ntake our\ntemperature equals\n9 * R\ntemp /\n5 +\n32 I'll take all of this and use the\nround function we'll round to one\ndecimal\nplace then we will print the current\ntemperature in\nfahrenheit I'll use an F\nstring the\ntemperature\nin Fahrenheit is\nour temp\nvariable degrees\nFahrenheit Let's test this if\nstatement is the temperature in Celsius\nor Fahrenheit it is currently in\nCelsius what is 33° in Celsius converted\nto\nFahrenheit the temperature in Fahrenheit\nis 91.4 De all right so this section is\nworking let's work on the else statement\nelse if our unit is currently inir\nwill convert to\nCelsius that formula is temp\nequals our temperature -\n32 * 5 /\n9 then I will round the result to one\ndecimal\nplace then we'll print the temperature\nin\ncelsius the temperature in Celsius is is\ntemp de C for\nCelsius is the temperature in Celsius or\nFahrenheit it is currently in\nFahrenheit enter the temperature\n91.4 the temperature in Celsius is 33.0\nDe C well everybody that is a simple\ntemperature conversion program in Python\nall right people we're talking about\nlogical operators today logical\noperators allow us to evaluate multiple\nconditions we can link them together\nthere's three we'll discuss or and not\nwe'll begin with OR with or we can check\nmore than one condition if at least one\nof those conditions is true then the\nentire statement is true here's an\nexample let's say we have an outdoor\nevent and I will create two variables\none temp meaning\ntemperature let's say that this is in\nCelsius 25° C pick Fahrenheit if you\nwould like and I will create a Boolean\nvariable of is raining I will set that\nto be false it is currently not raining\nif the temperature is too hot too cold\nor it's raining then I will cancel this\noutdoor event we'll write an if\nstatement to check that if our temp\nshort for temperature is greater than\nlet's say 35 35°\nC then I'll use the or logical operator\nor if our temp is less than\nzero or if is\nraining is\ntrue if one of these conditions is true\nwe're going to cancel our outdoor event\nso let's print the following the outdoor\nevent is\ncanell else we will print something\nelse the outdoor\nevent is still\nscheduled the temperature is reasonable\nand is raining is false it's not\nraining so we print the else Clause the\noutdoor event is still\nscheduled what if the temperature was\nreally hot like 36°\nC well the outdoor event is cancelled\nwhat if it's cold -5°\nC the outdoor event is cancelled this\ncondition was true therefore we execute\nthe if\nstatement or what if the temperature is\nreasonable but it's raining is raining\nis\ntrue well then the outdoor event is\nstill canceled so with the or logical\noperator at least one of these\nconditions needs to be true if one of\nthese conditions is true you could\nconsider the entire statement\ntrue now let's cover and with and we can\nlink two conditions together both\nconditions must be true in order for\nthat entire statement to be true so\nagain let's say we have temp short for\ntemperature and we have a Boolean\nvariable of is sunny I will set that to\nbe\ntrue we will check if our temp is\ngreater than or equal to 28 degrees\nC and is it sunny is\nsunny if it's hot and if it's sunny if\nthis is true let's print the\nfollowing it is hot\noutside for fun I'm going to add an\nemoji but you don't have\nto I just think it's more entertaining\nthat way but you do\nyou and I will press\nit is\nsunny sometimes these emojis are\nformatted differently I'm just going to\ncopy it from somewhere else that's\nbetter currently the temperature is 25\n25° C and it's sunny this condition was\nfalse but this one is true with the and\nlogical operator both conditions must be\ntrue in order for us to execute this\nblock of\ncode if our temperature was 30 30 de C\nwell then both conditions are\ntrue it is hot outside and it is sunny\nlet's write a few more let's add else if\nelse if the temp is less than or equal\nto\nzero and is\nsunny we will print something\nelse it is cold\noutside I'll change the\nEmoji and it is\nSunny let's set the temperature to be\n-5°\nC it is cold outside and it is\nsunny both these conditions are true so\nwe do this\ninstead you can link as many conditions\ntogether as you would like let's see if\nour temperature is within a certain\nrange else if\ntemp is less than\n28 and our temp is greater than zero\nand is\nsunny to check to see if something is\nwithin a certain range there is a\nshortcut too py charm is recommending\nthis we can simplify change\ncomparisons so this effectively does the\nsame thing if 28 is greater than our\ntemp and our temp is greater than zero\nand it's sunny then we will print it is\nwarm outside rather than hot\nand it's still sunny so let's say our\ntemperature is 20° CSI and it's\nsunny it is warm outside and it is\nsunny now we have the not logical\noperator it inverts the condition we are\nchecking to see if something is either\nnot false or not true so let's check to\nsee if it's not Sunny really I'll just\ncopy what we have and paste it\nelse if nut is\nsunny then that means it's\ncloudy and let's use a cloud\nEmoji so basically not does the opposite\nof what you're looking for we are\nchecking if not is sunny is sunny is\nfalse then this condition is true okay\nlet's say our temp is\n208 is sunny is now\nfalse it is hot outside it is cloudy\nwhat if our temperature was\nZero it is cold outside it is cloudy\nwhat if the temperature was reasonable\nlike 20° C it is warm outside it is CL\ncloudy so not it inverts the condition\nif it's true it's now false if it's\nfalse it's now true all right everybody\nso those are logical operators they\nallow us to evaluate multiple conditions\nwith or at least one condition must be\ntrue with and both conditions must be\ntrue and not not does the opposite it\ninverts the condition we check if\nsomething is not false or not true and\nwell everybody those are local operators\nin\nPython hey everybody so today I got to\nexplain conditional expressions in\nPython a conditional expression is a\noneline shortcut for using an IFL\nstatement if you're familiar with other\nprogramming languages this is also known\nas the trary operator it behaves\nsimilarly using conditional Expressions\nwe can print or assign one of two values\nbased on a condition here's the formula\nreturn X if our condition is true else\nreturn y here's a basic example we will\ncreate a variable for number just num\nlet's say our number is five I'm going\nto print then within our print statement\nI will write a conditional expression\nfollowing this formula I'll just copy\nand paste it let's check to see if our\nnumber is positive let's print the text\npositive if our condition what are we\nchecking let's check to see if if num is\ngreater than zero that means it's\npositive if this condition is false we\nwill instead print whatever comes after\nelse\nelse negative number is five that will\nprint positive if our number was neg5\nwell this condition would be false we\nwould instead print negative let's go\nover\nanother let's check to see if our number\nis even or odd let's set numb to be six\nthis time I will assign the result to a\nvariable our result\nequals take our\nformula let's\nassign even if our\nnum modulus 2 is our number divisible by\ntwo does that equal zero else return odd\nthen let's print our result\nresult number is six that is even if\nit's five then it's\nodd assign even if our number is\ndivisible by two else return\nodd let's create variables A and\nB A will equal 6 B will equal\n7 let's create a variable of Max num\nequals follow our formula\nagain return variable a if a is greater\nthan b else return B between A and B\nwhich is the maximum number that would\nbe B of seven let's find the minimum\nthis\ntime\nminum a if a is less than b else return\nB the minimum number between six and\nseven is\nsix this time we'll take an age age\nequals\n25 we will create a variable of status\nequals use our formula\nagain return a string of adult if our\nage is greater than or equal to 18 else\nreturn a string of child then we will\nprint our status\nour age is 25 that's greater than or\nequal to 18 we will print adult if our\nage was 13 then we are a child we will\ninstead return\nchild let's work with the\ntemperature temperature equals 30°\nC so that's\nhot let's create a variable of weather\nassign a string of hot if our\ntemperature is greater than 20 else we\nwill return a string of cold what's the\nweather outside today based on the\ntemperature it is hot if our temperature\nwas\n20 then the weather is cold okay last\nexample we will work with a user role I\nwill set this to be\nadmin we will Define a variable of\naccess level\nequals again follow our\nformula return the text of full access\nif our condition of user rooll is equal\nto a string of admin else we will\nreturn\nlimited\naccess our user role is an admin let's\nprint our access level and we have full\naccess but what if we were a\nguest well then we have limited access\nall right everybody those are\nconditional Expressions they're a\noneline shortcut for the if else\nstatement it's similar to the tary\noperator and other programming languages\nusing conditional Expressions we can\nprint or assign one of two values based\non a condition you follow the formula of\nreturn X if our condition is true else\nreturn y if it's false and well\neverybody those are a few examples of\nconditional expressions in\nPython hey everybody in this topic I'm\ngoing to cover a few useful string\nMethods that you may be interested in\nthen at the end of this video we will\nwork on an exercise where we will\nvalidate some user input as we know a\nstring is just a series of characters\nlet's ask a user for their full name\nname equals\ninput enter your full\nname the first method I'll show you well\ntechnically this is a function the\nlength function will give us the length\nof a string how many characters is it we\nwill find the length of our variable\nname after the user types in some input\nthis function returns an integer I'll\nstore that result within a variable uh\nlet's just say result then I will print\nwhatever the result is\nwhy don't you go ahead and type in your\nfull\nname the length of this string in my\nexample is eight characters that does\ninclude spaces too 1 2 3 4 5 6 7 8 if\nyou ever need the length of a string\nthere is the length function let's move\non if we were to type our variable name\nfollowed by a DOT we have access to a\nwhole bunch of different methods we have\nthe the find method the find method will\nreturn the first occurrence of a given\ncharacter the position let's find any\nspaces I'll store the results within a\nvariable named\nresult I will type in my full\nname the first occurrence of a space\nthat's what we set is at position three\nwhen working with indexes we always\nbegin with zero this first character\nwould have an index of 0 then 1 2 3\nthat's why the find method returned\nthree in place of four let's find the\nfirst occurrence of a capital\nB see it's zero how about\noh for me that would be two so remember\nit's always the first occurrence if you\nneed the last occurrence there is a\ndifferent\nmethod which is all R find R meaning\nreverse we will find the last occurrence\nof an\no that has a position of five 0 1 2 3 4\n5 if python isn't able to locate a given\ncharacter it will return ne1 let's find\nany I don't know uh\nQ's python could not find any lowercase\ncues the rfind method will return -1 if\nthere are no results we can capitalize\nthe first letter in a string by using\nthe capitalize function\nname.\ncapitalize this method will return a\nstring I will reassign that to\nname then we will print our name\ncapitalized I'll be sure to type in my\nname all lowercase\nsince this is all one string only the\nfirst letter is capitalized even though\nI'm including a first and last name the\nupper method will take all of the\ncharacters in a string then make them\nall\nuppercase follow your variable that\ncontains a string followed by Dot Upper\nthen I will reassign the result to my\nname variable to overwrite it enter your\nfull\nname all of the letters are now\nuppercase\nthere is also lower to make all of the\ncharacters\nlowercase name equals name do\nlower yep all the characters are\nlowercase now the is digit method will\nreturn either true or false if a string\ncontains only digits the result is a\nBoolean true or false I'll store that\nwithin a variable named result then\nprint result\nso if I were to type in my full\nname is digit returns false there are\nnot only digits within that string if my\nstring was some combination of\nalphabetical characters and\nnumbers this method will still return\nfalse it only returns true if my string\nonly contains\ndigits I'll just type in one 23 see\nthat's true that is the isdigit\nmethod otherwise wi we have is Alpha\nname. is\nAlpha the is Alpha method will return a\nBoolean true or false depending if a\nstring contains only alphabetical\ncharacters I'll type in my full name so\nthe reason that this came up false is\nbecause my full name contains a space\nwhich is not an alphabetical\ncharacter if I typed in my full name\nexcluding any spaces this would now be\ntrue is Alpha would also return false if\nmy name contained any sort of digits\nforo 1 23 and that is also\nfalse that is the is Alpha\nmethod now let's ask for a phone\nnumber phone number equals\ninput enter your phone\nnumber with the phone number they\ntypically contain dashes let's count how\nmany dashes are going to be in\nsomebody's phone\nnumber phone\nnumber\ndot count method let's count the amount\nof dashes so place a character within\nthe account method this method will\nreturn an integer let's store that\nwithin a variable results equals phone\nnumber. count\nmethod so type in some phone number 1-23\n4-56 7-8\n901 we have three dashes within the\nstring 1 2 3 that is the count method we\ncan count how many characters are within\na\nstring we also have the replace method\nhonestly the replace method is probably\none of the most useful methods of\nstrings we can replace any occurrence\nwith one character with another replace\nlet's replace any dashes\nwith maybe a space this method will\nreturn a new string I'm going to\nreassign this to our phone number\nvariable then print the phone\nnumber enter your phone number 1-2 3\n4-56 7-8\n901 so here's my new phone number but\nwe've replaced all of the dashes with\nspaces even better yet we could\neliminate all the dashes completely by\nreplacing the dashes or another\ncharacter with an empty\nstring 1-2 3 4-56 7-\n8901 here's our new phone number without\nany dashes we've replaced all dashes\nwith an empty string no characters if\nyou would like a comprehensive list of\nall of the string Methods available to\nyou you can use the help function type\nin the data type Str strr meaning string\nthen I will print whatever the result is\nhere's a bunch of methods you might be\ninterested in in the future capitalize\ncase fold Center count en code ends with\njust to name a few all right everybody\nhere's an exercise for you we will\nvalidate some user input we would like a\nuser to enter in a valid username\nhowever there's a couple rules the\nusername can be no more than 12\ncharacters long\nthe username must not contain any spaces\nand the username must not contain any\ndigits let's assign a variable named\nusername equals\ninput enter a usern\nname first let's check to see if our\nuser input is more than 12 characters\nlong we can do that using the length\nfunction we will find the length of our\nusername\nthe length function returns an integer\nlet's check to see if the length of our\nusername is greater than 12 characters\nif it is we'll print a\nmessage your user name can't be more\nthan 12\ncharacters\nelse we will print using an FST\nstring well welcome whatever our\nusername variable\nis let's try it I'll type in my first\nname last name then add a whole bunch of\ncharacters\nafterwards your username can't be more\nthan 12\ncharacters let's type in something\nthat's under 12\ncharacters yep and that appears to work\nokay so we have accomplished task number\none our username can't be more than 12\ncharacters next our username must not\ncontain any\nspaces we can use the find method of a\nstring username doind we will find any\nspaces that's a\ncharacter if no spaces are found this\nmethod will return\n-1 using an else if\nstatement I'll add not if the find\nmethod of username\nequals\n-1 if the result is not -1 meaning we\nfound a space we will print your\nusername can't contain\nspaces I'll type in my first and last\nname you might need to think of\nsomething that's underneath 12\ncharacters your username can't contain\nspaces so we have accomplished rule\nnumber two three username must not\ncontain\ndigits we can use the is Alpha method of\nstrings the is Alpha method returns a\nBoolean if a string only contains\nalphabetical characters so let's copy\nthat I'll add another LF statement not\nusername is Alpha\nthen we will\nprint your\nusername\ncan't contain numbers I guess\ntechnically is Alpha would check for\nspaces too but I'd rather have that be\nhandled within a different if\nstatement all right I'll type in a\nusername I'll include some\ndigits your username can't contain\nnumbers all right I think we've\naccomplished this\nlet me make up a username following\nthese three\nrules yep it seems to check out all\nright everybody and that is a few useful\nstring Methods that you may be\ninterested\nin hey everybody in this topic I'm going\nto explain string indexing indexing\nallows us to access the elements of a\nsequence using a set of square brackets\nalso known as the indexing operator\nusing this set of square brackets\nfollowing a string there are up to three\nfields that we can fill in we can access\na starting point in the string an ending\npoint and a step here's an example\nsuppose we have a credit card number\ncredit number equals and I'll just make\nup some number 1 2 3 4-5 6 7 8-\n9012 d34 5 6 good enough if I need the\nfirst character within the string I can\ntype Ty the name of my string variable\nfollowed by the indexing operator which\nis a set of square brackets the first\nposition has an index of zero computers\nalways start with zero so that's why the\nfirst index is zero then I'm going to go\nahead and print this print credit card\nnumber at index of\nzero that would be one if I were to\nchange the index to be one 0 1 that\nshould be two index 2\nwould technically be\nthree then four is the dash within our\nstring as you can see here with the\nindexing operator there's up to three\nfields that we can fill in a start and\nand step if you have just one field\nlisted without any colons it's assumed\nyou're filling in the starting position\nso now what if you would like the first\nfour digits of the\nstring well we would type the name of\nour string\nvariable indexing operator\nwe'll need a starting index colon then\nan ending index the first four digits\nwould be 0 colon 4 then I will print\nthis and I'm just going to turn this\nfirst line into a\ncomment yeah there we go we have the\nfirst four digits of our credit card\nnumber 1 2 3 4 just so you know with the\nending Index this index is exclusive\nthis first number would be 0er 1 2 3 4\nso we did not include that Dash within\nthe number the starting index is\ninclusive the ending index is exclusive\nso you can omit the zero in the\nbeginning you could just say colon 4\npython assumes the starting position\nwill be the beginning of the string so\nthat would work too let's get the next\nset of digits 56 78 credit number\nindexing operator Ator let's find where\nthe starting index would be 0 1 2 3 4 5\n5 colon 6 7 8\n9 then we will print whatever is\nhere the next set of digits is 5 6 7 8\nmaybe we need the last 12 digits well\nwhat we could do in that case we will\ntake our string variable credit number\nset the starting index to be let's see 0\n1 2 3 4\n5 five colon if you need everything up\nto the end of the string you don't need\nto list an ending index just be sure to\nadd that colon python then assumes you\nneed everything up to the end of the\nstring so I will print whatever we\nhave then we should have everything\nbesides the first four digits yep 5 67 8\n9 012 34 5\n6 you could also use a negative\nindex credit number if you need the last\nlast character in a string you would set\nthe index to be -1 then I will print\nthis print credit number at index of -1\nthat would be\n6 -2 is\n5 -3 is 4-4\nis three and then 5 would be that Dash\nright here yeah you can use negative\nindexes too let's talk about step using\nthe step field we can access the\ncharacters in a string by a given step\nwe can count by twos or we can count by\nthrees so here's an example so let's\ntake our credit number if we're not\nfilling in the starting or ending Fields\nbut we need a step we would need two\ncolons then python is assuming\neverything from the beginning of the\nstring to the end then our step will be\ntwo this will print every second\ncharacter within our\nstring yeah here we are we have 1 3 Dash\n6 8 9 1 so on and so\nforth if I were to change the step to\nthree we would count every third\ncharacter beginning with 1\n4 6 Das\n1 3 6 all right here's a practical\nexample let's create a program to get\nthe last four digits of a credit card\nnumber I'm going to assign this to a new\nvariable\nlast digits equals our credit\nnumber indexing operator so we need the\nlast four digits where would the\nstarting index begin well we could use\nnegative indexing this last digit is1 -2\n-34 we will begin\nat4 colon we can omit the ending index\npython assumes we need the rest of the\nstring then really that's all we need so\nlet's\nprint I'll use an F\nstring uh maybe some xes maybe we're\nhiding somebody's credit card number\nexcept the last four digits\nokay then variable\nlast\ndigits all right and here's our credit\ncard number where only the last four\ndigits are visible hey you know what\nlet's add one more exercise let's\nreverse the characters in The String I'm\ngoing to reassign credit\nnumber equals credit\nnumber if we need the entire string we\ndon't necessarily need a starting index\nor an ending index but for the step this\nwill be negative -1 will reverse a\nstring then let's print whatever our new\ncredit card number\nis print credit\nnumber and yeah there is our credit\nnumber backwards to reverse a string you\nset the step to be NE -1 so yeah\neverybody that is string indexing in\nPython we can access elements of a\nsequence using the indexing operator\nwhich is a set of straight brackets you\ncan list a starting position ending\nposition and even a step if you need to\nskip over characters but yeah that is\nstring indexing in\nPython hey everybody in this topic I'm\ngoing to explain format specifiers\nformat specifiers when used in the\ncontext of an F string they allow us to\nformat a value based on what flags are\ninserted following your value you would\ntype a colon and then some Flags\ndepending on what flags you insert it\nwill format your output a certain way\nyou could add decimal point Precision\nallocate space zero pad values left\njustify right justify Center align all\nsorts of things let's have some practice\nI'll create three prices price\none price\ntwo price\nthree price one will be\n3.14159 these values aren't in and cents\nyet but they will\nbe price two will be\n[Music]\nis price two price three is price three\nwithin our placeholder following the\nvalue we can add a Colin then some Flags\nthose flags are the format specifiers\nthey will format our value a particular\nway depending on what we insert after\nthe colon to add decimal point Precision\nyou would type after the colon dot then\nthe amount of decimals to be displayed\nmaybe two then F meaning Flo Point\nnumber let's do that with price two and\nprice three colon.\n2f price one is now 3.14 price two is\n987 65 price 3 is\n12.34 I think I'm going to add some\ndollar signs before the\nplaceholder yeah that's much better for\nLess Precision maybe one decimal place\nyou can change the two to a one so. onef\neach number only displays one decimal .1\n6.3 whereas in 3F would display three\ndecimal\nplaces1 142 650\n340 even though price two and price\nthree only have two decimal places in\nthe original numbers we will concatenate\nsome additional zeros to allocate space\nto display a value after the colon add\nsome number some number for that many\nspaces how about\n10 each value now has a total of 10\nspaces to display the output 1 2 3 4 5 6\n7 8 9\n10 if you were to preedee a number with\nzero well these numbers would be zero\npadded each number is now zero padded to\nleft justify a value you would use a\nleft angle\nbracket all these numbers are now left\nJustified then we have all of the space\nafter they're all uniform right justify\nwould be a right angle\nbracket and I believe that's the\ndefault cental line I believe is the\ncarrot\nsymbol yep our numbers are now\ncentered if you have any positive values\nand you would like to display a plus\nsign just use\nplus any positive number is preceded\nwith the plus sign any negative number\nis preceded with the negative sign or\nyou could use a space for any positive\nnumbers so colon\nspace these numbers are lined up evenly\neven though we have a negative number\nnumber in here there is a thousand\nseparator which is a\ncomma we should probably increase the\nvalue of our prices\n3,00\n9,870\n1,200 each thousand's place is now\nseparated with a comma we could also mix\nand match Flags I would like a thousand\nseparator along with decimal point\nPrecision of two decimal places\nand why not I will preedee each number\nwith a plus sign if it's\npositive yep here we are so based on\nwhat you're looking for you can add some\ncombination of flags so yeah those are\nformat specifiers everybody within your\nplaceholder insert your value a colon\nthen certain Flags based on what you're\nlooking for\nexactly but yeah those are just a few\nformats specified in\nPython hey everybody in this topic I'm\ngoing to explain while Loops a while\nloop will execute some code while some\ncondition remains true here's an example\nwe'll use an if statement first we will\nask a user for their name name equals\ninput enter your\nname if our name is equal to an empty\nstring that means the user didn't type\nin anything let's let's print a\nmessage you did not enter your name\nelse we will\nprint using an F string\nhello our users's\nname if I were to skip this\nprompt we would execute this if\nstatement then we continue with the rest\nof the program what if I would like to\ncontinually prompt the user to type in\ntheir name we can't continue until they\ntype in something something well we\ncould replace this if statement with a\nwhile\nloop while this condition is true\ncontinue to execute this code within the\nwhile loop I'm going to reprompt the\nuser to type in a\nname then if we were to exit the while\nloop then we will print hello whatever\nyour name is so let's run this enter\nyour name I'm going to hit enter you did\nnot enter your name enter your name no\nno no\nokay I give up I'll type in my first\nname hit enter hello whatever your first\nname is while this condition remains\ntrue execute this code potentially\nforever until this condition is no\nlonger true so that's one of the main\nbenefits of a while loop if it's not\ntrue then you exit out of the while loop\nand that's why we're able to continue\nthen print our name hello name you do\nwant some way to escape out of the while\nloop otherwise you'll run into what's\nknown as an infinite Loop so let's say\nwhile name is equal to an empty string\nwe will print you did not enter your\nname so I'm going to hit enter so we are\nstuck in an infinite Loop we can't\nactually escape this Loop we didn't give\nourselves an exit\nstrategy that's why previously we repr\nprompted the user to type in something\nwe're giving them a chance to escape in\na way it kind of works like an if\nstatement but instead of executing some\ncode once it's potentially infinite here\nhere's another example this time let's\nask for a user's\nage age equals and I will convert the\ninput to an\ninteger enter your\nage we'll need the user to type in a\npositive number while age is less than\nzero let's print a message to let the\nuser know that they can't do\nthat age can't be\nnegative then we need some strategy to\nescape let's reprompt the user to enter\nin their\nage once they type in something that's\nvalid we can escape out of the while\nloop so let's print using an FST string\nyou\nare age years\nold so enter your age I'm going to say\nnegative 1 age can't be negative --2\n1 million okay I give up how about 21\nyou are 21 years old so that was another\nexample while our age variable is less\nthan zero repeat this code forever let's\ngo over example\nthree I'm going to introduce some\nlogical operators we will have the user\ntype in a food they like food equals\ninput enter a food you like but in order\nto escape I need to press Q to\nquit while food is equal to the letter\nQ continue this while loop however I'm\ngoing to make one change we want to exit\nthe while loop when they press Q so you\ncould say while not food equals Q So\nwithin this while loop let's print the\nfood that they stated that they like\nI'll use an F string you like your\nvariable\nfood then we will prompt the user to\nenter in another food that they like\nenter another food you like Q to\nquit then once we escape the while loop\nwe will print just\nbuy okay enter a food you like C to quit\nI like pizza you like pizza I like sushi\nyou like sushi I like Ramen you like\nRamen okay this program kind of lame so\nI'm going to press Q to quit and we\nescape the while loop we have printed by\nso you could do something while\nsomething is not true by using the not\nlogical operator all right last example\nexample four we will use the or logical\noperator we'll ask a user to type in a\nnumber between 1 and\n10 let's say num equals\ninput enter a number between 1 through\n10 then I will typ cast the input as an\ninteger while our number is less than\none or our number is greater than 10\nlet's reprompt the user let's print\nusing an FST string our variable\nnum is not valid then we will reprompt\nthe\nuser enter a number between 1 and\n10 once we escape the while loop then we\nwill print our number using an FST\nstring your number is our variable\nnum enter a number between 1 through 10\n0 Z is not valid\n1 100 nope uh five your number is five\nthat's an example example of how you can\nadd logical operators to Wild Loops\nwhile this condition is true or this\ncondition is true execute this code\nForever all right everybody so those are\nwhile Loops a while loop will execute\nsome code while some condition remains\ntrue it's fairly useful for verifying\nuser input if a user types in some input\nthat is not valid you can reprompt them\nand there's many other uses that we'll\ndiscuss in the future but yeah those are\nwhile Loops in Python\nwhy hello everybody in today's video\nwe'll be creating a compound interest\ncalculator in Python for those that\ndon't know interest is a charge for the\nprivilege of borrowing money to some\nindividual or organization when you\nplace money in a bank account you\ntypically acre interest we'll create a\nprogram to tell you what your new\nbalance will be after acre interest for\nso many years but the user is going to\ndecide the initial principle that's the\ninvestment the rate of interest and the\ntime and years that this balance has\nbeen acre interest so let's begin let's\ndeclare three variables a principle a\nrate that is rate of interest and time\ntime will be in years we've recently\nlearned about while Loops I would like\nto include those within this program\njust so we get the hang of using them we\nwill ask the user to type in an initial\nprincipal investment we will continue to\nprompt the user to type in a principle\nthat's above zero our condition will be\nwhile principal is less than or equal\nequal to zero we will take our principal\nassign it some user\ninput enter the principal\namount then we would like to typ cast\nour input as a floating Point\nnumber if our user input principal is\nless than or equal to zero we need to\ninform the\nuser principal\ncan't be less than or equal to\nzero so I'm going to test my program by\nprinting the principle at the end just\ntemporarily enter the principal amount I\ncan't type A negative number and\ncontinue what if my investment was\n$1,000 principal can't be less than or\nequal to zero how about zero nope can't\ndo that either is a th000 okay\nyep a th000 works that is for the\nprinciple let's copy this while loop\npaste it replace principle with rate\nthis is the rate of\ninterest enter the interest\nrate interest rate can't be less than or\nequal to\nzero and let's copy this again paste it\nchange rate to time\nlet's typ cast our input as an integer\nbecause we're working with whole years\nenter the time in\nyears time can be less than or equal to\nzero I'm going to print my principle\nrate and\ntime we have\nprinciple rate time\nokay we know that principle\nWorks enter the interest rate can my\ninterest rate be ne1 no it can't can it\nbe zero nope how about 10 10% all right\nthat works time can time be zero no it\ncan't can my time be netive 1 no it\ncan't what about 3 years all right so we\nknow that our while Loops are working\nnow here's the formula to calculate\ninterest let's say our\ntotal that's our total balance equals\nour principal\ntimes 1 + r rate / 100 I'm going to\nenclose this function with the set of\nparentheses this portion of our function\nwill take our interest rate which is a\nwhole number then create a decimal\nenclose this function within the power\nfunction raise this function to the\npower of time and that is how to\ncalculate compound\ninterest then we will print the New\nBalance I'll use an FST\nstring balance after our variable\ntime the word\nyears I'll add a placeholder we will add\nour\ntotal then I'll include a dollar sign\nmaybe this will be in dollars but pick\nany unit of currency you would like I\nwill format this variable with the\nformat specify fire we will display two\ndecimal places\n2f okay let's try this enter the\nprincipal amount I invest $1,000 into\nmaybe the stock\nmarket the interest rate is maybe 10%\nthis year the time in years will be\none so after one year at 10% interest my\nnew balance is\n$1,100 let's try it one more time for\ngood measure maybe $500 with an interest\nrate of seven over 2 years your new\nbalance would be\n$572\n45 all right now there is another way of\nwriting this program what if we would\nlike to allow the user to enter in\nvalues that are equal to zero while\nprinciple is less than zero if principal\nis less than zero principal can't be\nless than zero let's do that for\nrate interest can't be less than\nzero\ntime time can't be less than zero here's\nwhat happens to our program remember\nthat we're declaring our variables at\nthe\ntop uh nothing happens we go straight to\nthe\nresults so the reason that this is\nhappening is that when we reach the wild\nLoops this condition is false from the\nbeginning we never end up entering these\nwhile Loops we skip over them because\nthese three conditions are all false we\ncan write a different variation of this\nwhile loop where we could say while true\ntrue is a Boolean that means this while\nloop will continue forever unless we\nexplicitly break out of the while loop\nwe're going to add an else\nClause else we will break break will\nbreak out of a\nloop with our second while loop change\nrate is less than zero to while true\nthen we will add an else CLI\nlaws else break out of the\nloop while\ntrue\nelse break out of the\nloop we should be able to enter zero\nvalues in now enter the principal amount\n0 0 0 balance after 0 years is\n0 this should work the same as before\nbut we should be allowed to enter in\nzero values $1,000\ninterest rate of zero after one year is\nstill\n$1,000 well okay then everybody I\nthought that would be an interesting\nproject to create now that we know how\nwhile loops work you could write either\na standard while loop with a condition\nsuch as principal is less than or equal\nto zero or you could say while true this\nLoop would continue forever you would\nneed to explicitly break out of the\nwhile loop using this break keyword\nwhich we'll cover again in four Loops\nbut yeah that is a compound interest\ncalculator in\nPython hey everybody in this topic I\nneed to explain for Loops a for Loop\nwill execute a block of code a fixed\nnumber of times you can iterate over a\nrange a string a sequence anything that\nis considered iterable I'll have more\nexamples for you in future topics there\nis a lot of overlap where you could use\neither a while loop or a for Loop but\nfor Loops tend to be better in\nsituations where you have to do\nsomething only a fixed number of times\nhere's an example suppose we need to\ncount to 10 if we were to use a for Loop\nwe could write something like this we\nwould type four then we would need some\nsort of counter typically you see people\nwrite x 4 x in then we will use the\nrange function what number would we like\nto start at I would like to start at 1\nthen count to 10 but the second number\nis X exclusive so really we're going to\nwrite 11 if we want to count to 10 so\nthen colon then hit enter whatever code\nyou would like to repeat a certain\nnumber of times you will list underneath\nthe for Loop and make sure the code is\nindented too I will print whatever our\ncounter X is when I run this code we\nwill begin at one then stop once we\nreach\n11 so yeah there we are we have begun at\none and we have counted all the way to\n10 so that's the basic syntax for for\nLoop for some counter really you can\nname this anything sometimes you'll see\npeople name this as\ncounter and that would work too but\nlet's stick with x in some range where\nwould we like to begin where do we stop\nokay now let's count backwards let's\nstart at 10 then count down to zero when\nwe escape the for Loop let's\nprint happy New\nYear when we print Happy New Year we are\noutside of the for Loop to count\nbackwards you can enclose your range\nfunction within the Reversed\nfunction\nreversed so we begin at 10 count down to\none then print happy New Year in this\ncase to count backwards you would\nenclose the range function within the\nReversed function there is an additional\nparameter too you could add that is the\nstep if you would like to count by twos\nyou would add comma\ntwo so I'm going to get rid of happy New\nYear let's print the numbers 1 through\n10 but we will count by\ntwos and this does begin at one though\nso 1 3 5 7 9 if you were to change the\nstep to three you would count by threes\nbeginning at 1 4 7 10 so the range\nfunction isn't the only thing you can\niterate over you can iterate over a\nstring let's say we have a credit card\nnumber credit card equals I'll make up\nsome credit card number with\ndashes that is good enough for X in\ncredit card print x x will hold our\ncurrent position at first it'll be one\nthen 2 3 4 dash so on and so forth so\nhere's our credit card number 1 2 3\n4-5 6 78 I think you get the idea so you\ncan iterate over a string with the for\nloop as well we'll have a few projects\ninvolving that there are two useful\nkeywords as well these aren't exclusive\nto for Loops you can use these within\nwhile Loops as well they are continue\nand break suppose we going to count to\n20 for X in range we will begin at one\nstop at\n21 I think this is kind of a dumb\nexample but it gets the point across 13\nis considered an unlucky number right\nwhat if our counter reaches 13 I would\nlike to skip over it well we can do that\nwith the continue\nkeyword if x is equal to 13 we will\ncontinue and skip over that\niteration else we will print whatever\nour counter is so let's take a\nlook yeah we have the numbers 1 through\n20 but we have skipped the number\n13 to skip over an iteration you can use\nthe continue keyword whereas the break\nkeyword we will break up of this Loop\nentirely if x is equal to 13 then\nbreak so yeah we have only counted to 12\nonce we reach 13 we have escaped the\nloop so yeah everybody those are four\nLoops you can execute a block of code a\nfixed number of times you can iterate\nover a range a string a sequence\nanything that is considered iterable\nthere is a lot of overlap where you\ncould use either a while loop or a for\nLoop while Loops tend to be better if\nyou need to execute something possibly\ninfinite amount of times such as when\nyou're accepting user input for example\nbut yeah everybody those are four Loops\nin\nPython what is going on everybody in\ntoday's topic we're going to be creating\na countdown timer in Python we'll be\nusing what we learned in the previous\ntopics let's begin we'll need to import\nthe time module there's a pretty cool\nfunction within the time module that is\nthe sleep function type time do sleep\nadd a set of parenthesis within the set\nof parenthesis our program will\nessentially sleep for a given amount of\nseconds like three after 3 seconds let's\nprint something this is just a\ndemonstration times\nup when I execute this code nothing\nhappens for 3 seconds but after 3\nseconds passes it displays our message\ntimes up so you can use the sleep\nfunction of the time module to sleep for\na given amount of time we will ask the\nuser how long would they like to set the\ntimer for we will create a variable\nlet's say my time my time will be in\nseconds we will create a prompt enter\nthe time in\nseconds then we should typ cast our\ninput as an integer\nwe'll need to create a loop we could use\neither a while loop or a four Loop\nthere's a lot of overlap where you could\nuse either one I'll use a four Loop in\nthis case four we'll need some sort of\ncounter X in our\nrange Z through my\ntime after each iteration we will sleep\nfor 1 second Let's test what we have so\nfar I would like to sleep for 3\nseconds I think that's approximately\nthree but now we are going to print\nwhatever X is print x x is our\ncounter 0o 1 2 times up we're getting\nsomewhere but I would like to count\nbackwards what we could do is enclose\nour range function within the reverse\nfunction\nbut another technique that we can use is\nby using a\nstep let's replace zero with my\ntime then end at zero but we will set\nthe step to be Nega -1 then we can\nincrement backwards using this function\nthat's another technique too to count\nbackwards so let's wait for 3 seconds 3\n2 1 times up now let's display a digital\nclock of some sort but we would have to\ncalculate how many hours minutes and\nseconds there are so let's calculate\nseconds seconds equals x x is our\ncounter\nremember modulus\n60 within our print statement we'll use\nan F string we are displaying hours\nminutes and seconds I'll add some\nplaceholders for each of these fields we\nhave seconds with our digital clock we\ncan't go above 60 for either seconds or\nminutes that's why I'm using modulus 60\nthe modulus operator gives you the\nremainder of any division let's begin at\n11 so 11 10 9 so it is counting down but\nI would like to add some zero padding\nand we can do that with a format\nspecifier after seconds I will add colon\nI need to display two digits then zero\npad those digits let's try that again I\nwill wait for 11 seconds seconds 11 10 9\nyeah and we do have some zero padding so\nthat's looking more and more like a\ndigital clock let's add minutes then so\nto calculate minutes let's assign\nvariable minutes equal to x / 60 because\nthere's 60 seconds within a minute but\nthen I'm going to typ cast the result as\nan\ninteger modulus 60 we would not like\nthis field of minutes to go above 60 so\nlet's add a placeholder we're displaying\nminutes format specifier\n02 now I'm going to wait for 65 seconds\nthat is 1 minute and 5\nSeconds then I just want to be sure that\nwe go below a\nminute yep it's working then let's\ncalculate hours oh by the way to stop\nyour program from running hit this red\nsquare up in the corner Corner let's\ncalculate hours hours equals x /\n3,600 there's 3,600 seconds in an\nhour then we will typ cast the result as\nan\ninteger within our FST string we will\ndisplay ours format specifier\n02 then I will run this program let's\nwait for for\n3,65 seconds that is 1 hour and 5\nSeconds and I just want to be sure that\nwe go below 1 hour yeah all right so\nthat\nworks so the reason that I didn't add\nmodulus 24 I don't have days within my\nfstring we can display any amount of\nhours I will exclude modulus\n24 all right everybody well I thought\nthat'd be some good practice with\nworking with loops we should try and do\na as many exercises as we can and yeah\nthat is a countdown timer program in\nPython hey everybody so I guess in\ntoday's topic I'm going to be explaining\nnested Loops it looks like so a nested\nLoop think of it as a loop found within\nthe code of another loop you have a loop\nright any code within that Loop is\nindented underneath that Loop well you\ncould have a looping structure found\nwithin the code of another looping\nstructure the loop on the outside is the\nouter loop the internal Loop within the\nouter loop is known as the inner loop\nwhere you'll encounter nested Loops it's\nreally situational you could have a\nwhile loop inside of a while loop a for\nLoop inside of a for Loop a for Loop\ninside of a while loop a while loop\ninside of a for Loop Etc so here's a\ndemonstration let's begin by displaying\nthe numbers 1 through 9 but we'll use a\nloop for x x is our counter in range 1\ncomma 10 remember that the second number\nin this case 10 that's\nexclusive then I will print our counter\nX this program will print the numbers 1\nthrough 9 now we have an exercise at the\nend of this topic I should probably\nexplain this feature so with a print\nstatement we end each print statement\nwith a new line character if I need all\nof these numbers on the same line at the\nend of my print statement I can add\ncomma end equals an empty\nstring normally with a print statement\neach ends with a new line character but\nwe can set that to be something\nelse so when I run this again all of\nthese numbers are on the same line or\nyou could add a different symbol like\nDash or a\nspace each of these characters is now\nseparated with the space but let's stick\nwith an empty\nstring okay so we have used a loop to\ncount the numbers 1 through 9 what if I\nwould like to repeat this three times\nWell I could create another loop for X\nin range you could say 1 comma 4 or you\ncould just say three either\nway whatever code is within this Loop\nwill be executed three times let's cut\nour original for Loop then place it\nwithin the code of our new loop our\nouter loop will have this code repeat\nentirely three separate times uh but we\ndo have one thing we need to pay\nattention to we have two counters with\nthe same name you'll want to be sure\nthat they're different let's rename the\ncounter of the inner loop to be y\ninstead of X and be sure to change that\nhere as\nwell now when I run this code we're\ncompleting let's see 27 iterations to\nexit this four Loop we need to count the\nnumbers 1 through n once we do so that\nis one iteration of the outer loop but\nour outer loop is saying hey we still\nneed three total iterations now if you\nwould like these on separate lines let's\nmake this look a little different let's\nadd each iteration of the outer loop\nonto a new\nline so within the outer loop but not\nwithin the inner loop I'm going to\ncreate just a blank print statement this\nwill just print a new line let's try\nthis\nagain with the inner loop we count the\nnumbers 1 through n after we exit the\nfor Loop we will print a new line then\nrepeat this all over again until our\nouter loop is satisfied so that's\nbasically a nested loop it's just a loop\nthat's inside of another looping\nstructure so let's create a project\nwe're going to print a rectangle made of\nsome symbol that we set we'll have the\nuser type in how many rows and columns\nthis rectangle will have we'll reuse\nthis code that we have already written\nso this time let's accept some user\ninput rows equals\ninput enter the number of rows then we\nshould typ cast this input as an\ninteger let's copy this line paste it\nchange rows to columns for the second\nline enter the number\nof\ncolumns then let's create a symbol\nsymbol equals\ninput enter a symbol to\nuse we already have this rectangle\nstructure right think of it as the outer\nloop is in charge of the rows let's\nchange in range three to in range\nrows the in Loop will be in charge of\nthe columns for y in\nrange\ncolumns we will print our symbol\nwhatever the user chooses so let's try\nthis again enter the number of rows how\nabout four\nrows 10 columns I'll use a dollar sign\nso here's our\nrectangle we have four\nrows then 10 columns 1 2 3 4 5 6 7 8 9\n10 let's try it one more\ntime three\nrows five columns and I'll use an\nasterisk yep three\nrows five\ncolumns so yeah that's a nested Loop\nreally it's just a loop that's inside of\nanother loop Loop the type of loop\nreally doesn't matter as well as what's\nwithin each loop it's just a situation\nwhere you have a loop inside of another\nloop and yeah those are nested Loops in\nPython well hello everybody today I will\nbe explaining a few different types of\ncollections in Python there's four\ngeneral purpose collections three of\nthem are lists sets and tles there are\nalso dictionaries but I'll save that for\nthe next topic because they can be kind\nof tricky a collection I would think of\nthem as a single variable and I'm saying\nthat within quotes that is used to store\nmultiple values that's how I would\nexplain a collection to a beginner for\nexample let's say we have a variable\nvariable fruit fruit equals some value\nlike apple and then I can print this\nfruit which is Apple I could turn this\nvariable into a collection by\nsurrounding my values with either a set\nof square brackets for a list curly\nbraces for a set or parenthesis for a\ntuple let's begin with the list if I\nwould like to store more than one value\nin this variable I will surround my\nvalues with a set of square brackets\nthis variable is now a list I can store\nmultiple values separated with a comma\nnot only do we have an apple in this\nvariable but we have an\norange a\nbanana and\ncoconut one naming convention that I\nlike to use if I declare a collection\nsuch as a list set or toule I like to\ntake the variable name and make it\nplural just so that it's more obvious\nthat this is a collection of values\ntechnically in the English language\nfruit would still be plural English is a\nweird language we now have a list of\nfruit named fruits if I were to print my\nlist this is the result we have all of\nour values enclosed with a set of square\nbrackets to access one of these elements\nfound within your list you can use the\nindex operator much like what we can do\nwith strings the first element would\nhave an index of zero that would print\nmy value\nApple index of one would be my orange\ntwo is banana three coconut what about\nfour we don't have a value\nthere list index out of range each value\nin a collection is also known as an\nelement if we attempt to access an\nelement that's not not found within our\ncollection you'll run into an index\nerror with the index operator you could\nset a beginning index an ending index\nand a step I would like the first three\nelements you could say zero colon\nthree that would give me Apple orange\nbanana technically you don't even need\nthe zero you need that colon though we\ncan even use a step I would like every\nsecond\nelement apple banana it's every second\nelement beginning from index zero maybe\nI would like my fruit backwards I'll set\nthe step to be 1 coconut banana orange\nApple you can use the index operator\nwith collections much like you can use\nwith strings another cool thing you can\ndo too with collections is that you can\niterate over them with the for Loop for\nX in my collection\nfruits what would we like to do I will\nprint whatever X\nis so we have iterated over our list\nApple orange banana coconut now X isn't\nreally too descriptive what you'll see\nsome people do is that with their\ncollection name it's plural their\ncounter will be the singular version of\nthat word if our collection name is\nfruits let's rename X as fruit\nsingular it's not mandatory but that's a\ncommon convention it's more readable\nthat way for every fruit in fruits If\nThis Were cars you could say for car in\nCars our counter is storing whatever\nvalue is within our collection so what\nare all the different methods that we\ncan use with collections to list the\ndifferent methods that are available to\na collection you can use the dur\nfunction within this function add your\ncollection\nfruits but we would need to print this\nlet's surround this function with a\nprint\nstatement these are all in alphabetical\norder we have attributes which I have\nnot explained yet but I in a future\ntopic but if we scroll to the end we\nhave a bunch of different methods that\nthis list can perform append clear copy\ncount extend index insert pop remove\nreverse and sort if you would like a\ndescription of each of these methods\nthere is a help function help add your\ncollection to the parentheses then we\nwould need to print\nthis here's the description of all the\nmethods and attributes for example we\nhave our sort method and here's a\ndescription sort the list in ascending\norder and return none and then a bunch\nof other stuff if you ever forget what\nyou're capable of with a list or other\ncollection you can always use the help\nfunction to print a description of the\nattributes and methods available if you\nneed the length of how many elements are\nwithin a collection there is the length\nfunction return the length of my list\nfruits then let's print it\nthere's four elements within my list the\nlength function returns four if I were\nto add an extra element like a\npineapple then that number would be\nfive let's remove that using the in\noperator we can find if a value is\nwithin a\ncollection is our value Apple in\nfruits but then we would need to print\nthis this operator will return a Boolean\nso let's print whatever that\nis is Apple in\nfruits that is true but is\npineapple pineapple is not it's false\nyou can use the in operator to find if a\nvalue is within a list and that applies\nfor your other collections\ntoo with lists they're ordered and\nchangeable duplicates are okay we can\nchange one of these values after we\ncreate our list let's take fruits at\nindex of\nzero I will set this equal to be a\npineapple then let's iterate over our\nfruit using a for\nLoop okay the first element is no longer\nan apple it's a pineapple then orange\nbanana coconut using an index you can\nreassign one of the values if I were to\nchange zero to one well now we have an\napple pineapple banana\ncoconut let's cover some of the methods\nthat are found within a list we can\nappend an\nelement type the name of the list do\nappend what would we like to append to\nthe end of this list let's append a\npineapple I'm going to get rid of this\nfor Loop I'm just going to display my\nlist there we have an apple an orange\nbanana coconut pineapple to add an\nelement to the end of a list use the\nappend\nmethod to remove an element you can use\nthe remove method fruits. remove\nlet's remove our\nApple our apple is no longer there we\nhave an orange banana coconut using the\ninsert method we can insert a value at a\ngiven index fruits.\ninsert list an index zero would be the\nbeginning then a value\npineapple now we have a pineapple Apple\norange banana coconut the sort method\nwill sort a list for roots.\nsort these are all in alphabetical order\nnow apple banana coconut\norange to reverse a list you would use\nthe reverse method fruits.\nreverse coconut banana orange Apple\nhowever these are not in Reverse\nalphabetical order these elements are\nreversed based on the order in which we\nplace them if you would like reverse\nalphabetical order you can first sort\nand then reverse\nnow we have orange coconut banana\napple to clear a list use the clear\nmethod fruits. clear all of the elements\nare\ngone we can return the index of a value\nlet's return the index of\nApple\nfruits. index list an\nelement then we will need to print\nthis let's print the index that is\nreturned the index of Apple is\nzero\ncoconut that would be three what if we\ndon't find a value like a\npineapple well we have an error\npineapple is not in list you could count\nthe amount of times that a value is\nfound within a list because duplicates\nare okay fruits. count let's count how\nmany bananas are in this list\nbanana then print\nit one banana is found within this\nlist how about\npineapples there are zero now those are\nlists surround your values with a set of\nsquare brackets these values are ordered\nand changeable duplicates are okay now\nlet's talk about the next collection\nwhich is a set to create a set surround\nyour values instead with with a set of\ncurly braces our collection of fruits is\nnow a set a set has different benefits\nthe values are unordered and immutable\nmeaning we can't alter these values\nhowever we can add and remove elements a\nset does not include any duplicates I'm\ngoing to delete these\nmethods then print\nfruits we have all of the same values\nbut they're not in the same order as\nthey were originally a set is unordered\nif I were to run this again they will\nlikely be in a different order see now\nwe have a banana apple coconut orange to\ndisplay all of the different attributes\nand methods of a set you can use the dur\nfunction and here's all of them some of\nthese methods are a little more advanced\nbut there's a few we might recognize\nlike add clear copy for an in-depth\ndescription of these methods you can use\nthe help\nfunction much like what we did before to\nfind the length of our set we can use\nthe length function which is\nfour we can use the in operator to find\nif a value is found within this\nset unfortunately pineapples are not\nwithin our set now if I was to use the\nindex operator of my set this is what\nwould\nhappen we have an error set object is\nnot subscriptable we're not able to use\nindexing on a set because they're\nunordered much like what we can do with\na list or string we can't change the\nvalues of a set but we could add a\nremove\nelements let's use the add method to add\nguess what a\npineapple that is okay orange Apple\npineapple coconut\nbanana we can remove an element fruits.\nremove let's remove our\nApple our apple is gone coconut orange\nbanana\nwe can\npop the pop method will remove whatever\nelement is first but it's going to be\nrandom\nthough orange coconut banana apple\ncoconut\nbanana apple banana\ncoconut you can clear fruits.\nCLE the elements of our set are gone\nthose are a few of the more useful\nmethods for beginners as a summary a set\nis a collection that is unordered and\nimmutable you can't change the values\nbut adding and removing elements is okay\nno duplicates are allowed let's try that\nreal quick I'm going to add a second\ncoconut yeah see we only still have one\ncoconut sets may work well if you're\nworking with constants maybe colors for\nexample you need to find if a color is\nwithin a set all right now lastly let's\ntalk about tupples a tupple is a\ncollection that is surrounded with a set\nof parentheses\ntopples are ordered and unchangeable\nduplicates are okay one benefit of a\ntopple over a list is that topples are\nfaster than lists if you're working with\na collection and it's okay if the\ncollection is ordered and unchangeable\nyou might as well use a tupple because\nit's faster when I print our topple all\nof these values are surrounded with a\nset of parentheses again we have the dur\nfunction to display the attributes and\nmethods there's not as many for a tle\nfor methods we only have count and index\nagain there's also\nhelp to display a description of these\nattributes and methods you can find the\nlength of a tle with the length function\nwe have five elements within here using\nthe in operator we can find if a value\nis found within our\ntupple our pineapple is not within our\nfruits so there's only two methods we\nhave access to let's find the index of\nApple fruits.\nindex Apple then I will print whatever\nis\nreturned apple is found at index zero\nthere's also count fruits.\ncount how many coconuts are found within\nour tupple\nfruits count the Coconuts then print\nthis how many coconuts we have two\ncoconuts and then again with any of\nthese collections they're iterable so\nyou can iterate over them using a for\nLoop for fruit and\nfruits yep Apple orange banana coconut\ncoconut all right everybody so those are\ncollections think of them as a single\nvariable used to store multiple values\nthere's four general purpose collections\nfor beginners lists sets tles and then\ndictionaries which we'll talk about next\neach of them has unique benefits lists\nare ordered and changeable duplicates\nare okay a set is unordered and\nimmutable but adding and removing\nelements is okay no duplicates allowed a\ntupple is ordered and unchangeable\nduplicates are okay and they are faster\nthan lists use topples if you can over a\nlist but yeah those are a few\ncollections in\nPython hello everybody today we will be\ncreating a shopping cart program this\nprogram will be an exercise to follow\nthe previous lesson on lists sets and\ntles the more that we practice with\nthose collections the better we'll be at\nusing them so I thought we'd create an\nexercise to get the hang of it before\nmoving on in this program we will have\ntwo lists Foods these lists will be\nempty we'll declare them but not use\nthem quite yet and\nprices then a total total equals z the\nreason that I'm not using topples is\nthat tles are unchangeable we're going\nto ask a user what food they would like\nto buy we can't depend any elements to a\ntle we're not using sets because sets\nare unordered I mean I guess technically\nyou could but at the end of this program\nI'm going to print our shopping cart in\norder so I think lists would probably be\nthe best we have an empty list of foods\nand an empty list of prices we'll use a\nwhile loop while\ntrue if our condition is set to True\nwe'll need some way to break out of the\nwhile loop we'll need a break statement\nsomewhere we'll get to that later we\nwill ask the user what food would they\nlike to buy let's declare variable food\nequal to\ninput enter a food to\nbuy to exit the while loop you need to\npress Q Q2\nquit then let's check if food is equal\nto Q lowercase Q then we will break\nwe're not done with the program but\nlet's at least test\nit\nPizza\nhamburger hot dog Q to quit okay it\nlooks like it works now what if somebody\ntypes in uppercase\nq\nPizza hamburger uppercase q well we\ncan't actually\nquit after accepting our user input if\nfood. lower method this will take our\ninput make it lowercase just for a\ncomparison let's try that\nagain Pizza\nhamburger I'll type capital Q to quit\nand that is valid follow food with the\nlower method to temporarily make the\nuser input\nlowercase just in case they type in\ncapital Q if the user doesn't want to\nquit let's add an else\nstatement else let's take our Foods\nuse the append method then add whatever\nfood the user typed in we'll also need a\nprice let's ask a user for the\nprice price\nequals\ninput enter the price of let's use an F\nstring\na whatever food the user types\nin pick a unit of currency I'll pick\ndollars we are working with numbers we\nshould typ cast our input as a floating\nPoint\nnumber since we're working with\nprices so we will accept a price add our\nfood item to our list of foods do the\nsame thing with prices prices do append\nwhatever the price\nwas and that is the while loop Let's\ntest this program again to be sure that\neverything's\nworking pizza pizza will be $59\n999 enter a food to buy Hamburger\nhamburgers will be\n350 hot dog hot dogs will be 175 I would\nlike to quit I will type either capital\nQ or lowercase Q both will work and we\nhave escaped the while loop so the while\nloop is now complete outside of the\nwhile loop let's display our shopping\ncart let's print some decorative\ntext maybe five dashes your cart then\nanother five\ndashes I will then iterate over all of\nthe elements found within my Foods\nlist for every food in my list of\nfoods let's print each food item let's\ntake a look so far again we have a pizza\nthe price was\n$5.99 hamburger the price was\n350 hot dog 175 CU to quit Okay your\ncart that will display the individual\nlist items if you would rather have\nthese list items arranged horizontally\nin one\nline you can add this keyword end equals\nthis end keyword will replace the new\nline character at the end of a print\nstatement with some other character like\na space let's try that again I'll try\nnot to take too much time\npizza $\n5.99\nhamburger\n350 hot\ndog\n175 you to quit yeah that's much better\nwe are horizontally listing all of the\ndifferent items within our list you\ncould revert back to the vertical list\nif you'd prefer that I'll keep my output\nlike this then we will need to iterate\nand add up all the prices for every\nprice in prices\nwe do have a total variable that we\ndeclared let's utilize that total equals\ntotal plus price otherwise we could\nshorten this to plus equals price that\nwould do the same\nthing then we will display the\ntotal print I'll use an F\nstring your total is I'll add a unit of\ncurrency I picked the dollar sign\nwhatever the total\nis okay let's run this program One Last\nTime enter a food to buy pizza which was\n$5.99 hamburger which was\n350 hot\ndogs they are\n175 CU to\nquit here's your shopping cart I'm just\ngoing to add one new line real quick\nright before we display the total just\nan empty print statement\nhere are the results your cart Pizza\nhamburger hot dog your total is\n$124 all right everybody well that is a\nshopping cart program I thought this\nwould be a fun exercise to follow the\nprevious lesson on lists sets and\ntopples and well yeah that is a shopping\ncart program in Python\nhey what's going on everybody so today\nI'm going to be explaining 2D lists 2D\nmeaning two-dimensional you do also have\nthe capability of creating 2D tuples I\nthought today we would use 2D lists just\nbecause they're pretty flexible a\ntwo-dimensional list is just a list made\nup of lists it's really useful if you\never need a grid or Matrix of data kind\nof like an Excel spreadsheet let's\ncreate three lists a list of fruit\nvegetables and\nmeat I'm going to speed up this video\nfeel free to pause if you need to catch\nup here I have three lists a list of\nfruit vegetables and meat each of these\nlists is a one-dimensional list to\ncreate a two-dimensional list well you\nwould begin by creating a\none-dimensional list let's create a list\nof\ngroceries all I would need to do is add\nmy individual lists as elements to the\nouter list the 2D list we have fruits\nvegetables and\nmeats normally to print a list or your\nother collections you would print the\nname of the\nlist in my list fruits I have apple\nOrange banana coconut to access or\nchange one of the elements you would\ntype the name of the list then use the\nindex operator so fruits at index of\nzero is a pineapple\nagain with a 2d list it's a little\ndifferent if I were to print my 2D list\nof\ngroceries we would lay out the entire 2D\nlist flat we have individual lists\nseparated with a comma all enclosed\nwithin a set of square brackets taking\nthe elements found within our 2D list\nI'm going to line these up kind of like\nthis it kind of represents a gitter\nmatrix with rows and columns each\nindividual list resembles a row each\nelement resembles a column if I were to\nprint groceries at index zero in place\nof returning one element found within\none of the lists that would return an\nentire row so groceries at index zero is\nmy fruits list groceries at index one is\nmy vegetables list groceries at index 2\nis my Meats list for one of the elements\nfound within one of the rows you would\nneed two\nindices if I need the Apple from the\nfirst row within my 2D list of groceries\nthat would be row0 column Z it's kind of\nlike coordinates row 0 column 0 that\nwould be my\nApple\n01 which is an\norange 0 02 is banana 03 is coconut for\nthe next row I would set the first index\nto be\none row one column zero that would be\ncelery I'm going to speedrun this real\nquick just to show you all the different\nelements one one is carrots one two is\npotatoes if we try to access 1\nthree that index is out of range because\nwe only have three elements within this\nrow so then the next row would have an\nindex of two column zero would be\nchicken 21 is\nfish 22 is\nturkey 23 is out of bounds to access an\nelement from a 2d list you would need\ntwo indices in place of one because\nusing just one would return the entire\nrow like so now when you declare a 2d\nlist you don't need to necessarily give\neach inner list a name we could do\nsomething like this\nI'm going to replace these names with\nthe\nrows I'm just going to put these on a\nnew line to make it more\nreadable there that would work too just\nseparate each inner list with a comma\nthen enclose everything with the set of\nsquare brackets if you ever need to\niterate over the elements of a 2d list\nyou can use NE Loops if I were to use a\nsingle for Loop let's say for every uh\nmaybe\ncollection for every collection\nin\ngroceries let's print what our\ncollection\nis using a single four Loop would\niterate over the rows but to also\niterate over the elements found within\neach row we would use a nested\nLoop for every food in our\ncollection let's print what our food\nis using nested Loops we can iterate\nover all of the elements found within\nour 2D list but I'm going to make this\nmore organized like that grid structure\nwe have I'm going to replace the new\nline character at the end of a print\nstatement with a\nspace then when we exit the nested loop\nI will print a new line by using just an\nempty print statement\nthere that kind of resembles our grid\nstructure we have\nrows and we have columns with\ntwo-dimensional collections you're not\nlimited to just lists you could create a\nlist of tles so the inner rows will be\nsurrounded with a set of\nparenthesis you know this is also valid\ntoo or you could make a 2d tupple it's a\ntupple that's made up of tuples you\ncould make a tupple made up of sets\nsets are enclosed with a set of curly\nbraces here we have a tuple made of sets\nuse whatever is best for your own\nprograms let's go over an exercise let's\ncreate a two-dimensional keypad that you\nwould normally find on a phone we have\nthree data types a list a set or a\ntupple the elements in a set are\nunordered so we can't use that these\nnumbers need to be in order\nif we have the option A tupple is faster\nthan a list a tupple is ordered and\nunchangeable so we should use it if we\ncan and that's perfectly fine let's\ncreate a 2d tupple this time I will name\nthis 2D tupple\nnumpad we have an outer set of\nparenthesis then an inner set of\nparentheses for each row we will have\nfour\nrows the first row will be 1 2 3 the\nsecond row I'm going to put put this on\na new\nline 4 5\n6 the next row will be 7\n89 then the last row will be an asteris\ncharacter then\nzero then the pound sign so numpad in\nthis case is a 2d tupple let's use a for\nLoop to iterate over every row this will\nbe the outer loop for every maybe Row\nfor every row in\nnumpad let's begin by printing our\nrow so we're printing every Row in our\nnumpad but I'd like to remove the\nparentheses let's create a nested Loop\nfor\nevery maybe num for Num in\nrow print whatever that num\nis we have one long vertical line let's\nreplace the new line character at the\nend of our print statement with the\nspace then when we escape the nested\nLoop let's print a new\nline and there is our telephone number\npad you can see it's a grid made up of\nrows and columns so yeah that's a 2d\nlist well a 2d collection it's a\ncollection that's made up of collections\nthen with our numpad we made a 2d tupple\nif you ever need a grid or Matrix of\ndata a 2d collection would work perfect\nand there you have it everybody those\nare 2D collections in\nPython hello again everybody so today\nwe're going to create a quiz game in\nPython let's declare all of the\ndifferent Collections and variables that\nwe'll need first we will need a tuple of\nquestions a 2d tle of\noptions my quiz will have five questions\nbut you can add more or less\nquestions then a tuple of\nanswers a list of guesses we will be\nappending guesses to our list that's why\nwe're using a list rather than a\ntupple a score variable which I will set\nto be zero then question\nnumber this variable will keep track of\nwhat number question we're on all right\nlet's begin with our questions I have\nfive here are my questions they're all\nscience related feel fre free to choose\nyour own this is what I have how many\nelements are in the periodic table which\nanimal lays the largest eggs what is the\nmost abundant gas in Earth's atmosphere\nhow many bones are in the human body\nwhich planet in the solar system is the\nhottest these are the questions but\nwe'll need options let's add four\noptions for every question that's why\nwe're using a two-dimensional tupple\neach inner tupple will consist of four\nelements\nthey will be options\nA\nB\nC or\nD let's copy these elements then paste\nthem within each\ntle this first element corresponds to my\nfirst question how many elements are in\nthe periodic table I'll come up with\nsome answers\nI'll add some answers for the rest of\nthese tuples too\nwe have a coule of correct\nanswers the orders are c\nd a\na b if you come up with your own options\nyour answers may be different now that\nwe have all of our different Collections\nand variables taken care of let's\ndisplay each question I will iterate\nover our Tuple of questions they are\niterable\nfor every question in\nquestions I'm going to print some\ndecorative\ntext I think that's probably\ngood then I will print each question\nwe're iterating over so let's see what\nwe have so\nfar there's all five\nquestions after we display every\nquestion I need to display every option\nfor every op option in options our\noptions options is a 2d\ntupple let's add the index operator the\nindex is going to be our question number\nvariable it's a number so at first we're\naccessing options at index of zero then\n1 2 3 4\n5 we will print every option in options\nat a given row number\nLet's test this okay we have some\noptions but all of these options are for\nthe first question we will need to\nincrement our question number so let's\ndo that maybe\nhere\nquestion number plus equals\n1 that is much better before iterating\nthe question number we will ask the user\nfor a guess guess equals\ninput\nenter a b c\nd in case the user types in something\nthat's lowercase I will follow this\ninput with the upper method to make the\nuser input\nuppercase we will take our list of\nguesses use the append method add our\nguess to that\nlist if our guess is equal to the\nanswers tupple at index of question\nnumber that means the user guessed the\nright answer let's increase the user\nscore score plus equals 1 then print the\nword\ncorrect\ncorrect else we will print\nincorrect I'll use an F\nstring our\nanswers at index of question\nnumber is the\ncorrect answer all right let's answer\nsome of these\nquestions C correct which animal lays\nthe largest eggs um um definitely the\nwhale because the whale is the largest\ncreature\nright incorrect D is the correct answer\nwhat is the most abundant gas in Earth's\natmosphere nitrogen correct how many\nbones are in the human body D that is\nincorrect A is the right answer which\nplanet in the solar system is the\nhottest Mercury because it's closest to\nthe Sun\nright wrong incorrect B is the correct\nanswer we're keeping track of our answer\nsuccessfully once we complete all the\nquestions let's print the\nresults I'm going to add some decorative\ntext not necessary but I think it would\nlook\ncool I will display the\nresults we will iterate over all of the\nanswers and the\nguesses\nprint answers\nI'm going to set the ending character to\nbe an empty\nstring for every answer in\nanswers\nprint each\nanswer I will set the ending character\nto be a space to separate each\nanswer then I'll add a new print\nline let's do this with\nguesses change answers to guesses for\nevery guess in guesses print each guess\nokay I'm going to run this\nagain I'm just going to make up some\nanswers a b c d a here are the correct\nanswers here are the guesses I guess\nnone of them right then we will print a\nscore score equals take our score\ndivided by I'm going to use the length\nfunction then pass in our questions how\nmany elements are within our questions\ntble then I will multiply all of this by\n100 to give us a percentage then typ\ncast this whole formula as an\ninteger so we're basically just\nreassigning our score\nvariable then let's print using an F\nstring your score is\nour score\nvariable then add percent I'm going to\nintentionally get all the answers right\nc d a a\nb here are the answers here are your\nguesses your score is 100% this time\nI'll try and get a few incorrect\nintentionally c c c c c your score is\n20% all right everybody well that is a\nquiz game feel free to add more or less\nquestions or come up with your own\nquestions and that is a quiz game\nwritten in\nPython hey everybody in today's video\nI'm going to explain dictionaries a\ndictionary is one of the four basic\ncollection types for beginners a\ndictionary consists of key value pairs\nthey are ordered and changeable no\nduplicates allowed a few examples of key\nvalue pairs could be an ID and a name an\nitem and a price\nbut in today's example we'll create a\ndictionary of countries and capitals\nlet's name our dictionary capitals\ncapitals equals enclose your dictionary\nwith a set of curly braces much like\nwhat you do with sets the first country\nwill be the USA to add a value to this\nkey type colon then some other value the\ncapital of the USA will be Washington\nDC separate at each key value pair with\na comma then we can add another key\nvalue pair so the capital of\nIndia that will be New Delhi We'll add\ntwo\nmore China the capital is\nBeijing\nRussia the capital is Moscow I think\nthat's good\nenough just as a reminder if you would\nlike to see all of the different in\nattributes and methods of a dictionary\nyou can use the dur function pass in\nyour dictionary capitals then we'll need\nto print\nthis here's all the different attributes\nand methods of a dictionary if you would\nlike an in-depth description of all\nthese attributes and methods you can use\nthe help\nfunction uh that's herp help there we go\nso yeah that's just a\nreminder all right let's cover a few of\nthe methods to get one of the values\nfrom a dictionary you would get the key\ntype the name of the dictionary capitals\ndoget let's get the capital of the\nUSA then we'll print\nit the value associated with this key\nthe\nUSA is Washington DC if I picked a\ndifferent country like like\nIndia well then we would get that\nAssociated value which is New Delhi\nanother thing if python doesn't find a\nkey this is what will be returned let's\nget Japan which is not in our\ndictionary this method would return none\nwe can use this within an if\nstatement if capitals do\nget\nJapan if a value is returned then we\nwill\nprint that Capital\nexists\nelse we will print that\nCapital doesn't\nexist so Japan is not in our dictionary\nthat Capital doesn't exist but Russia\nis that Capital does exist that's how to\ncheck to see if a key is within our\ndictionary you can use the get method\nAll Right Moving On Let's update our\ndictionary capitals do update So within\na set of curly braces I will add a key\nthen a\nvalue\nGermany followed\nby Berlin then let's print our\ndictionary I'll use a print statement\nprint\ncapitals yeah and there's Germany right\nthere use using the update method we can\ninsert a new key value pair or update an\nexisting key value pair let's also\nchange one of the existing values with\nour key USA let's update the capital to\nbe\nDetroit yeah see the value has been\nupdated the capital of the USA is now\nDetroit\nMichigan to remove a key value pair you\ncan use the pop method then passing a\nkey let's remove China\nChina no longer exists within our\ndictionary it's gone you can remove the\nlatest key value pair within a\ndictionary by using the pop item method\ncapitals do pop item with pop item you\ndon't need to pass in a key pop item\nwill remove the latest key value pair\nthat was inserted then we have clear\ncapitals do clear that will clear the\ndictionary it's pretty self-explanatory\nthe next few methods are a little tricky\nto explain to get all of the keys within\nthe dictionary but not the values there\nis a keys method capitals dokeys I think\nI'm going to insert this within a\nvariable Keys equals capitals do Keys\nlet's see what happens when we print\nthis the keys method will return all of\nthe keys within our dictionary\ntechnically Keys is an object which\nresembles a list I haven't discussed\nobject-oriented programming yet this is\na little bit above our level if you ever\nneed the keys in a dictionary you can\nuse the keys method one use is that we\ncan use that within a for Loop they're\niterable for every key in capitals\ndokeys\nmethod let's print every\nkey if at any time you need to iterate\nover all the keys you can use a for Loop\nto iterate over every key that is\nreturned from the keys method of your\ndictionary there's also the values\nmethod to get all of the values within\nyour dictionary there is a values\nmethod values equals capitals Dov values\nmethod then let's print our\nvalues like before with the keys method\nthe values method will return an object\nwhich resembles a list let's iterate and\nprint over every value within our\ndictionary for every value in capitals\nDov\nvalues print every\nvalue here are all the values within our\ndictionary this next one is probably the\nmost tricky it is the items method\ncapitals do items I will assign what is\nreturned to a variable named items then\nwe will print\nitems items returns a dictionary object\nwhich resembles a 2d list of Tes it's\nreally complicated how might this be\nuseful this time we're going to use a\nfor Loop to print every key comma value\nin capitals do items\nmethod we have in essence two counters\nthis time I will print using an F string\nf every key value pair I will print\nevery key as well as every value in our\nprint\nstatement so there's our dictionary laid\nout we have iterated over every key\nvalue pair it's kind of an advanced\ntopic but I thought I would at least\nbring it up now so yeah that's a\ndictionary everybody it's a collection\nof key value pairs they are ordered and\nchangeable no duplicates allowed you\nhave a bunch of different methods such\nas get up dat pop pop item clear then\nyou can get the keys the values or both\nwhich is the items method we'll be using\ndictionaries in a few game programs\nwe'll be making in the future and well\nyeah those are dictionaries in\nPython hey everybody today we will be\ncreating a program to mimic a concession\nstand much like what you would see at a\nmovie theater we will be utilizing a\ndictionary to keep track of a menu item\nand an Associated price more or less\nthis is just a program to help us get\nused to working with dictionaries let's\nbegin we'll create a dictionary named\nmenu what items are on the menu will'll\nneed an item and a price I'll think of\nsome I'm going to speed up this video\nfeel free to pause if you need more time\nand here's my menu everybody I thought\nof a few food items you might find at a\nmovie theater concession stand pizza\nnachos popcorn fries chips soft pretzels\nsoda lemonade movie theater popcorn is\nreally expensive for some reason okay we\nhave our menu a user is going to select\nspecific keys from this menu depending\non what the key is we can get the\nassociated value to calculate a total to\nkeep track of the user selected items I\nwill create an empty list\nnamed cart I will also declare a\nvariable named total to keep track of\nthe total we need to lay this dictionary\ndown flat to display it to a user well\nwe do have the items method of a\ndictionary which we covered in the last\nvideo for every key value in our\ndictionary menu do items method the\nitems method of our dictionary will\nreturn a key and a value during each\niteration I'm simply going to print\nevery key and value I'll use an FST\nstring I will print every key colon\nspace then a\nvalue let's take a look so\nfar here's our menu I'll make a few\nchanges the price will be in dollar and\ncents but feel free to pick your own\nunit of currency I'll precede my value\nwith the dollar sign then using a format\nspecifier I will display two decimal\nplaces\n2f that's better I will line up all the\nkeys after the key I will add a format\nspecifier then allocate 10\nspaces yeah look at that it's all lined\nup now before and after displaying our\nmenu with this for loop I will add some\ndecorative\ntext let's say menu\nthen outside of the for Loop I'll\ndisplay a bunch of\ndashes yeah look at that let's move on\nto the next\nstep we will ask a user for some input\nwhat item would they like to buy from\nthe menu while our condition will be\ntrue if our condition is set to True\nwe'll need to break out of this Loop one\nway or another\nwe will ask for some user input food\nequals\ninput select an\nitem Q2\nquit if food is equal to a lowercase Q\nthen we will\nbreak Let's test\nit select an\nitem Pizza\nnachos\nsoda Q to quit yeah it works okay what\nif the user types in capital Q well we\ncan't escape the while\nloop if a user types in capital Q we're\nassuming that they would like to quit\nwhen we accept our user input I'm going\nto add do lower method this will take\nour user input and make it all\nlowercase so we should be able to\nacknowledge any uppercase letters\nyeah it works cool let's add an LSI\nstatement what if a user types in an\nitem that's not on our menu well there\nis a get method of\ndictionaries if\nmenu. getet pass in our food which is\nuser input if the user selection is not\nwithin our menu as a key it will return\nnone so we can use that else if menu .g\nget food is not\nnone then we would like to append that\nfood item to our\ncart\ncart.\nappend our food\nitem so outside of the while loop I'm\ngoing to print our cart temporarily just\nto test\nit okay select an item Pizza soda\npretzel how about a\npotato Q to quit we have our pizza soda\nand pretzel but not our potato we don't\nwant that in our cart because that's not\non the menu yeah you can just add that\nline else if menu item. get food is not\nnone that will complete our wild Loop\nlet's calculate a\ntotal for every food in our cart let's\ntake our total variable set this equal\nto Total plus then we need a value\nassociated with a\nkey plus\nmenu. getet\nmethod get the food item found within\nour cart but I'm going to shorten this\nto Total plus equals menu. getet the\nvalue associated with this food in our\ncart I will also display that food item\nprint print food I'm going to avoid\nprinting our food item on every line I\nwill set the ending character in our\nprint statement just to be a space okay\nlet's see what we have so\nfar I would like\npopcorn\nsoda\npretzel C to quit popcorn soda pretzel\nthen we will display the total I will\nprint a new line\nprint I'll use an upst\nstring total\nis add a unit of currency total I'll add\na format specifier 2f to display two\ndecimal places I'm going to add one line\nof decorative\ntext let's copy maybe this\nall right let's test it\nout select an\nitem\npopcorn\npretzel\nsoda\npotato CU\nquit all right here's our cart popcorn\npretzel soda we did not include the\npotato that was not found within our\ndictionary the total is\n$1250 well there you have it everybody\nthat is a concession stand program the\npoint of this program was to help us get\nused to working with dictionaries a\ndictionary is a collection of key value\npairs such as an item and a price and\nyeah that's a concession stand program\nin\nPython well hello again everybody it's\nme in today's topic I'm going to show\nyou how we can generate some random\nnumbers in Python then at the end of\nthis video as an exercise we're going to\ncreate a number guessing program let's\nbegin we will be importing the random\nmodule type import random the random\nmodule gives us access to a lot of\nuseful methods involving random numbers\nfor a comprehensive list you can use the\nhelp function pass in the random module\nand then we would want to print this\nhere's what we all have access to we\nhave a shuffle method set State\nseed sample random range random random\nint random bytes and there's a ton of\nothers but we'll discuss a few of the\nmore useful methods for beginners for a\nrandom whole integer maybe you're\nrolling a six-sided dice you would type\nthe name of the random module dot that a\nmethod for a random whole integer type\nRand int add a set of parentheses within\nthe set of parentheses you will list a\nrange if I'm rolling a six-sided dice I\nwould like the numbers 1 through six 1\ncomma 6 then I will assign what is\nreturned to maybe a\nvariable print whatever my number\nis my random number is a four 3 1 4 all\nright I tend to play a lot of Dungeons\nand Dragons we use polyhedral dice that\nhave more or less than six sides there\nis a 20-sided dice for a random number\nbetween 1 and 20 I would set the range\nto be 1 comma 20 here I rolled a\n16 and a s and an 8 within the Rand int\nmethod you can place variables as well\nas long as they contain numbers I will\ncreate a variable named low I'll set\nthat equal to\none and a variable named High I will set\nthat to be 100 I will replace the\nnumbers with my variables that behave as\nnumbers give me a random integer between\nmy low variable and high variable so\nbetween 1 and 100 in this example I have\nrolled\na75 now in 88 if you need a random\nfloating Point number you can use the\nrandom method random.\nrandom then let's assign this to a\nvariable number equals the random method\nof the random module that would return a\nrandom floating Point number between 0\nand\n1 you can pick a random Choice from a\nsequence in the future we're going to\ncreate a game of rock paper scissors\nlet's say we have a tuple of\noptions options\nequals\nrock\npaper\nscissors we are accessing the random\nmodule dot then use the choice method\nplace your sequence within the choice\nmethod give me a random Choice from\noptions I will store this within a\nvariable let's say option equals random\nChoice from my options then I will print\nthe\noption our computer has generated\nscissors\npaper rock so the choice method is a\ngreat use for games if you ever need a\nrandom element now there's also Shuffle\nthis time maybe we have a deck of cards\ncards equals I guess I'll use a list\nthis\ntime I have a list of cards that you\nwould normally find within a deck of\nplaying cards well besides the suit 2\nthrough 10 Jack queen king Ace using the\nshuffle method I can Shuffle this\nsequence access the random module do\nshuffle pass in your\nsequence in my case it's cards then I\nwill print\ncards yeah look at that my cards are now\nshuffled in the future we'll be creating\na game of Black Jack the shuffle method\nwill be used then to shuffle our deck of\ncards those are a few methods found\nwithin the random module for some\npractice let's create a number guessing\ngame as an\nexercise hey everybody so today we're\ngoing to create a number guessing game\nusing python this is a project meant for\nbeginners by completing this project it\nwill help us reinforce our understanding\nof previous topics let's begin we will\nimport the random module we'll need to\npick a random number the random module\nis going to handle that for us what is\nthe arrange of random numbers for our\nnumber guessing game we'll store those\nas\nvariables we will have one variable\nnamed lowest number\nI'll set that to be one as well as a\nvariable for highest number which I will\nset to be 100 feel free to pick a\ndifferent range if you would like I'll\nset the range to be 1 through 100 a\nrandom number will be selected between\nthis\nrange which will be stored within a\nvariable named answer what is the\ncorrect answer so to choose a random\nnumber between these two values we will\naccess the random module called the Rand\nint method we will choose a random\ninteger between these two\nvalues the two arguments will be lowest\nnum comma highest num for the second\nargument let's perform a test run I will\nprint my\nanswer the number is going to be between\n1 and\n100 okay we know that that works\nhere's a few more\nvariables we need to keep track of the\nnumber of wrong guesses which I will\nstore as a variable named\nguesses we want the user to keep\nguessing as long as our application is\nrunning we will create a Boolean\nvariable of is running which we will set\nto be\ntrue once the user wins the game we will\nset is running to be\nfalse we will print a welcome message\nlet's say python\nnumber guessing\ngame we will prompt the user I'll use an\nF\nstring select a number between I'll add\ntwo\nplaceholders select a number between our\nlowest number and our highest number\npython number guessing game select a\nnumber between 1 and 100 now if I was to\nchange the range of these\nvariables that should be\nreflected temporarily I changed the\nlowest number to be 10 and the highest\nnumber to be 1,000 but let's set that\nback between 1 and 100 is\ngood we'll need a while loop to continue\nthe game each\nround we will say y while is\nrunning since is running is a Boolean we\ndon't need to say while is running\nequals true we can just say while is\nrunning while this value remains true\ncontinue playing the\ngame we will ask the user for some input\nwe will create a local variable of guess\nguess\nequals use the input function then enter\na prompt enter your\nguess there's one thing we want to\ncheck python number guessing game select\na number between 1 and 100 and to your\nguess what if somebody doesn't type in a\nnumber like they type in the word\nPizza we should let the user know that\nthat's an invalid\nguess we'll write the following if\nstatement if our guess use the is digit\nmethod if our guess is a digit a number\nthen we will execute any code underneath\nthis if statement for the time being\nI'll WR pass we'll get back to that\nlater else we will do something\nelse let's print the following print\ninvalid\nguess let's copy this print statement\nbecause I'm lazy and I don't feel like\ntyping it\nout please\nselect a number between our lowest\nnumber and our highest number let's try\nthat\nagain I will guess Pizza which isn't a\nnumber and we get the message invalid\nguess please select a number between 1\nand 100 all right that works underneath\nour if statement we'll write the\nfollowing once we get a guess that is a\ndigit we need to convert it to a number\nbecause when you accept user input it's\na string we will reassign our guess\nequal to typ cast our guess as an\ninteger then increase the number of\nguesses by one guesses plus equals 1\nbecause we have already made one\nguess here's another\nscenario what if somebody guesses a\nnumber outside of this range like one\nkajillion well we should give a warning\nthat that guess isn't valid\nif our guess is lower than the lowest\nnumber or our guess is greater than the\nhighest\nnumber we will print the\nfollowing that number is out of\nrange and I will reprompt the\nuser please select a number between\nbetween the lowest number and the\nhighest\nnumber let's perform a test run I will\nguess one\nkajillion that number is out of range\nplease select a number between 1 and 100\nWe'll add an lse if statement else if\nour\nguess is less than our answer we will\nprint the\nfollowing to low try\nagain else if our guess is greater than\nour\nanswer we will\nprint to high try again if our guess\nisn't less than our answer and our guess\nisn't greater than our answer that means\nwe must have the correct answer within\nan L statement we will\nprint I'll use an F string\nstring\ncorrect the answer was insert our answer\nour answer\nvariable then print the number of\nguesses it\ntook number of\nguesses add a\nplaceholder place in our guesses within\nthe placeholder now to escape the while\nloop we will take our Boolean variable\nof is running which is normally true and\nset that to be false to\nescape and that should be all we need\nlet's run this one last\ntime python number guessing game select\na number between 1 and 100 let's select\na number right in the middle 50 too low\ntry again so the number is between 50\nand 100\n75 too high it's between 50 and 75 then\n62 too\nhigh\n56\n53\n55 correct the answer was 55 number of\nguesses it took me\nsix all right everybody that is a python\nnumber guessing game you yourself can\ncreate as a mini\nproject hey everybody in today's topic I\nthought we would create a game of rock\npaper scissors now that we know how the\nrandom module Works let's begin by by\nimporting the random module we will\ncreate some options we will use a tupple\nwe're not going to be changing the\noptions so a tuple would be better than\na list we have three options\nrock\npaper or\nscissors I'll create a variable named\nplayer to store the Player's Choice for\nnow I'm going to set this to be none as\nwell as a computer our computer is going\nto pick a random Choice from these\noptions rock paper or scissors in order\nto do so we can use the choice method of\nthe random module random.\nchoice pick a random Choice from\noptions let's have the player enter in\nsome\ninput enter\na\nchoice Rock\npaper\nscissors then we will display the\nPlayer's Choice and the computer's\nChoice I'll use an FST\nstring player colon\nspace the variable\nplayer let's copy that paste it then\nchange player to\ncomputer let's see what we have so far\nenter a choice rock paper\nscissors so I pick Rock the computer\npicks scissors let's try it again just\nfor good measure I pick paper this time\nthe computer picks\nscissors I pick scissors the computer\npicks paper okay we know that the\ncomputer is successfully picking a\nrandom Choice from our options now what\nif the player picks something that's not\nwithin this tupple such as the gun well\nwe would want to stop that right we need\nthe user to pick a valid option only\nrock paper or scissors I think what\nwe'll do is that when we accept the user\ninput let's place it within a while loop\nso indent this\nline while this condition is going to be\nkind of weird while our player variable\nis not in our tle\noptions let's try this again to see what\nhappens I pick the gun enter a choice\nall right well if I can't pick a gun how\nabout a\nsponge well I can't pick that either\nrock that works our condition is while\nthe player variable is not found within\nour options if the player doesn't pick\none of these options this while loop\nwill continue forever once we pick\nsomething that's within our options we\nthen escape the while loop let's check\nsome win conditions now if the player is\nequal to computer\nthat means it's a tie I will\nprint it's a\ntie I'll add a few else if statements\nelse if the player is equal to rock I'll\nuse the and logical\noperator and the\ncomputer is equal to\nscissors that means you win let's print\nyou win let's add another condition else\nif the player picks\npaper and the\ncomputer picks\nRock then you also win you\nwin else if the\nplayer picks\nscissors and the\ncomputer and the computer picks\npaper then we will\nprint you\nwin\nelse if the Player's Choice is not the\nsame as the computer's and we don't meet\nany win conditions that must mean we\nlose print you\nlose let's see if this works enter a\nchoice rock paper scissors I pick the\ngun nope I can't pick that I pick Rock I\npick Rock the computer picks scissors\nyou\nwin let me see if I can lose I'll pick\npaper you win\nagain\nscissors I need to stop winning I need\nto see if the lose condition\nworks okay it's a tie at least but I\nneed to\nlose all right there we go I pick Rock\nthe computer picks paper you lose what\nif the user would like to play again\nlet's place all of this code with within\na wild Loop let's do so right about here\nnow I'm not going to write while true\nlike I normally do this time I'm going\nto create a variable let's say running\nis our game running I will set that to\nbe\ntrue while running equals true or we\ncould shorten this to just while running\nthat's\nsimpler I will place all of this code\nwithin the wild Loop to mass indent some\ncode just highlight all of the code then\npress tab hey everybody this is bro from\nthe future I forgot to explain something\nthe reason I'm not setting the condition\nof my while loop to be true is that if\nyou have a lot of code within a while\nloop it can be really difficult to find\nwhere the break statement is if I set my\ncondition to be a Boolean variable such\nas running it's a lot easier to find any\ninstance where I use this variable if I\nwere to highlight it we can see that\nrunning is found down here here if I\nneed to change any instance of this\nvariable and rename it to something you\ncan refactor let's rename running as\nmaybe playing then I will refactor so my\nvariable running is now playing and that\nchange was made down here too so it's a\ncoding preference every time we start a\nnew game I will reset the player as well\nas the computer let's move these two\nlines into the while loop at the\nbeginning so when we start a new game we\nwill reset the player the computer will\npick a new random choice so let's see\nwhat we have so\nfar Rock I pick Rock the computer picks\nRock it's a tie then we have to play\nagain so paper you lose scissors it's a\ntie now what if we would like to escape\nthe while loop after our wi conditions\nI'm going to create a temporary variable\nlet's name this play again then we will\nask for some user input\nplay again question\nmark y\nsln meaning yes or no if the user types\nin something that's capital I'm going to\nuse the lower method to make it\nlowercase so if our play again variable\nis equal to\nY we would like to escape what I would\nlike to do is I would like to see if the\nplayer types in something that's not y I\nwill precede this condition with the not\nlogical operator if the user does not\nwant to play\nagain then let's take our Boolean\nvariable running normally it's\ntrue and set that to be false running\nequals\nfalse that means we will escape the wild\nLoop once we escape the while loop I\nwill\nprint thanks for playing\nnow I'm going to change this momentarily\nI just want to test it\nRock play again\nyes paper play again yes\nscissors you lose play again nope thanks\nfor playing this is entirely optional I\ntry and create as few variables as\npossible I would personally rather avoid\ncreating a variable here another way in\nwhich I could write this is that I can\nget rid of this variable\nlet's move if notot in front of the\ninput and follow our input here then use\nthe comparison\noperator and add a colon if the user's\ninput after making it\nlowercase does not equal a y for yes set\nrunning to be false so that should work\nthe same\nRock play again yes enter a choice paper\nplay again no thanks for playing this\nline would work the same but it's a\nlittle more complex for beginners to\nread or you can use the other method\nthat I showed you all right everybody\nwell that's a game of rock paper\nscissors hello everybody today we will\nbe creating a dice roller program in\nPython we will be utilizing some aski\nart I'll post all of the ask ke art that\nwe'll need in the description of this\nvideo you can copy and paste it to save\ntime if you'd like all right let's get\nstarted everybody we will Begin by\nimporting the random module because we\nwill be rolling some random numbers\nbetween 1 through six if we're going to\ncreate some esy art we'll be utilizing\nUnicode characters to enter in a Unicode\ncharacter it really varies depending on\nyour operating system I think the\neasiest way would just be to use Python\nto enter a Unicode character type award\nslash then a given code for each\ncharacter here are all of the codes that\nwe'll\nneed after writing these seven Unicode\ncharacters let's run this program these\nsymbols that are output let's copy them\nI'll add them to a comment then we can\ndelete this line these are the Unicode\ncharacters we'll need to build some asy\nart some dice\neach die will be made out of five\nlines let's begin with the first we'll\nneed a left\ncorner nine\ndashes then the right\ncorner for the second\nline copy this vertical bar add nine\nspaces then a vertical bar we can copy\nthis whole line paste it two times\nlet's use the left bottom corner add\nnine of these\ndashes then the bottom right\ncorner and here's a basic box shape\ndepending on what the number die is we\ncan add one of these bullet points for a\none we can add that right to the middle\nso that's good for now we'll delete this\nlater let's create a dictionary I will\nname this dictionary dice\nart our dictionary is made out of key\nvalue pairs so the keys will be the\nnumbers 1 through six beginning with one\nthe value will be a tupple it's a\ndictionary made out of key value pairs\nwhere the value is a tupple within the\ntupple let's add these lines each\nseparated with the comma\nI'm going to format these so they form a\nbox\nshape let's take our bullet point place\nit right in the middle then add a comma\nto the end of this key value pair that\nis the first key value pair let's copy\nall of\nthis paste it again change one to two\nlet's move this bullet point we need two\nbullet points about right here and here\nlet's repeat this process for Keys 3\nthrough\nsix be sure to get rid of the comma at\nthe end\nand here is our dictionary of dice art\neach key is a number each value is a\ntupple made of\nstrings let's create a list of dice our\ndice will be numbers randomly generated\nbetween 1 and six a total to calculate\nthe total I'll set that to be\nzero then we will ask a user for a\nnumber of\ndice this will will be some\ninput how many\ndice then typ cast the input as an\ninteger we don't want somebody to write\nyou know 2.5 dice you can't roll half a\ndie to generate a random number you can\nuse the Rand int method of the random\nmodule we need a random number between 1\nand six then we need to append this\nnumber to our list of dice dice data\npend then we can move this line to\nwithin the append\nmethod we need to do this a number of\ntimes depending on how many dice the\nuser enters in we can place this line\nwithin a four Loop for\nevery die in our\nrange number of dice this will be a\nnumber let's print our list of dice to\nsee what numbers we have in here how\nmany dice I would like five dice 5 3 3 4\n6 okay we know that that works let's\ncalculate a total we'll need to iterate\nand sum all of the elements within our\nlist we can do that with the for Loop\nfor every die in our list dice take our\ntotal variable plus\nequals the current value within our\ndice then we will print a total I'll use\nan F string total colon\nspace our total\nvariable let's see what we have so\nfar how many dice I would like five dice\nour total is 19 now between these two\nfor Loops we will display our ASI art\nthe easiest way would be to create some\nnested for Loops the outer for Loop will\nbe in charge of the number of dice for\nevery\ndie in our\nrange number of\ndice the inner for Loop will be in\ncharge of printing every\ntupple for every line in then to get a\nvalue in our dictionary we would type\nthe name of the dictionary dice art then\nuse the get method what are we getting\nwe're getting a value at a given key\nlet's take our list of numbers dice at\nindex of D our\ncounter depending on what the user types\nin for the number of dice D will begin\nat one then\nincrement within the inner four Loop we\nwill print the line so let's take a look\nhow many dice I would like three Dice\nand here's our aski art six + 2 + 4 that\nequals\n12 if you would prefer we can display\nall of these dice on a single horizontal\nline instead of one vertical line it's a\nlittle more tricky though if you would\nprefer that approach let's turn this\nchunk of code into\ncomments we will write this nested Loop\na little\ndifferent so each tupple is made up of\nfive elements\nright so if we're printing a horizontal\nline let's say we roll the numbers 1\nthrough 3 we would first need to display\nthis line of the first dice then the\nfirst line of the second dice then the\nfirst line of the third dice during the\nnext iteration of the outer loop we\nwould display the second line of the\nfirst dice the second line of the second\ndice the second line of the third dice\nso it's a little more complex let's\ncreate an outer loop that will iterate\nfive times for every line in range\nfive then the nested Loop will be for\nevery die in\ndice how many dice do we have within our\nlist we will print we're going to get\none of the values found at one of the\nnumbers that we\nroll take our dictionary of dice art\ndo get then a number 1 through\nsix that will be the value found within\nour list of dice get the current die\nremember that this is a number 1 through\nsix we would then need one of the\nelements found within our Tuple so get\nthe first line then the second line\nthird fourth\nfifth so let's add the index\noperator place our counter of line\nwithin the index operator let's see what\nwe have so\nfar we need to add one more thing how\nmany dice\nthree this is an Abomination there's one\nmore change we need to\nmake at the end of our print statement\nlet's set the ending character to be an\nempty\nstring and that should fix that how many\ndice three okay we're getting better\nresults then when we escape the inner\nloop we will print a new\nline how many dice\nthree and there we are 3 + 6 + 1 is 10\nall right everybody so that is a dice\nroller program it is kind of complex but\nI thought this might be a good exercise\nif you would like a copy of this code I\nwill post all of this in the comment\nsection down below and well yeah that's\na dice roller program in\nPython hey everybody today I need to\nexplain function funs think of a\nfunction as a block of reusable code to\ninvoke a function you place a set of\nparentheses after the function name to\ninvoke it here's a scenario I need to\nsing Happy Birthday three times I know\nit's a weird example but it makes a lot\nof sense just trust me on this if I need\nto sing Happy Birthday three times I\nwould write something like this I'm\ngoing to create my own version of the\nHappy Birthday song\nthis is one verse if I need to repeat\nthis code three times without using\nfunctions I could either repeat this\ncode or maybe place it within a\nloop so here's my Happy Birthday song\nthree times but there's a better way of\nhandling this that doesn't involve\nrepeating our code or using Loops what\nif I could write this code once then\nreuse it whenever I need to that's where\nfunctions come in to define a function\nyou would type DF then a unique function\nname let's name this function the happy\nbirthday function add a set of\nparentheses a colon any code that\nbelongs to the function you'll want to\nindent underneath then to invoke this\nfunction I would type the name of the\nfunction happy birthday add a set of\nparentheses and that's\nit when you invoke this function you\nwill execute this code once if I need to\nexecute this code three times I would\njust call it two more\ntimes happy birthday happy birthday\nhappy birthday to invoke a function you\ntype the function name then add a set of\nparentheses I like to think of the\nparentheses as a pair of telephones\ntalking to each other you call a\nfunction to invoke it hey happy birthday\nfunction execute your code with\nfunctions you are able to send data\ndirectly to a function using what are\nknown as arguments you can send values\nor variables directly to a function\nplace any data within the set of\nparentheses I'll send my function a\nfirst name any data you send a function\nare known as arguments but you need a\nmatching set of parameters that are in\norder what exactly is the data we're\nsending in well it's a name I will add\none parameter to my happy birthday\nfunction I will name this data name a\nparameter is kind of like a temporary\nvariable that's used within a function\nI'm going to replace this instance of\nyou with a name I will use an F string\nrepl place you with a placeholder I will\nadd my parameter name so happy birthday\nto bro we could pass in some other names\nwhat about\nSteve and\nJoe here we are happy birthday to bro\nhappy birthday to Steve happy birthday\nto Joe when you invoke a function you\ncan send more than one argument let's\nsend an age this time I'll send 20\n30 and 40 but when I run this we have an\nerror we're passing in two arguments but\nour function is set up only to take one\nI would need a matching number of\narguments to invoke this function we\nwill need two parameters we have a name\nand we have an\nage then let's use this age you are\nlet's make this line an F\nstring a age years old let's try that\nagain happy birthday to bro you are 20\nyears old happy birthday to Steve you\nare 30 years old happy birthday to Joe\nyou are 40 years old when you invoke a\nfunction you can pass in some data those\nare known as arguments but you'll need a\nmatching set of parameters the order\ndoes matter let's see what happens when\nI switch these two parameters age then\nname\nhappy birthday 220 you are bro years old\nhappy birthday 230 you are Steve years\nold happy birthday 240 you are Joe years\nold so the position of the parameters\ndoes matter same thing goes with the\narguments you also could name these\nparameters something unique maybe X and\nY happy birthday to X you are y years\nold that's also valid let's try another\nexample I'm going to create a function\nto display an\ninvoice there will be three parameters a\nusername an amount and a due\ndate let's print hello I should make\nthis an FST\nstring\nusername we'll use another FST\nstring your bill\nof\namount let's preedee this placeholder\nwith the unit of currency I will also\nadd a format specifier point\n2f is\ndo on our due date whatever that\nparameter is to invoke this function we\nwill type the function's name add a set\nof parentheses a username an amount and\na due date let's make up some username\nan amount I guess\n$42.50 I'm just making up a number\nhere then a due date the 1st of January\nI guess here's my invoice hello bro code\nyour bill of\n$42.50 is due on January 1st let's\nchange these arguments Joe Schmo is the\nusername he owes $100 and 1 Penny due on\nthe 1st of February or or January 2nd\ndepending on how you read dates in your\nregion hello Joe Mo your bill of $100\nAnd1 is due on 1/2 that's another\nexample now we need to explain the\nreturn statement return is a statement\nthat is used to end a function and send\na result back to the caller here's an\nexample we have a variable z z will\nequal will invoke a function to add two\nnumbers together such as the numbers one\nand two\nwhen we invoke a function we can send\nsome data back after adding one and two\nwe will send the result which would be\nthree then this value can be assigned to\na variable then we can print whatever Z\nis so let's create some functions let's\ncreate a function to add two numbers\ntogether the parameters will be X and\nY let's say Z\nequal x + y then we will\nreturn our value Z so I'm not going to\nprint Z directly right\nnow let's subtract X and\nY subtract z = xus y return\nZ\nmultiply x *\ny then divide\nx / y return Z let's invoke our add\nfunction pass in two numbers 1 and two\nthen I'm going to print the\nresult after adding these two numbers\ntogether the result is\nthree what about\nsubtract subtract 1 and two the result\nis -\n1\nmultiply the result is\ntwo then\ndivide 1 / 2 is 0.5 after we resolve\nthis function a value is returned just\nimagine that after we finish this\nfunction this function becomes whatever\nis returned three this function becomes\n- 1 this function becomes 2 this\nfunction becomes\n0.5 let's write something a little more\ncomplex we will create a function to\ncreate a full name\ncreate name we'll need two parameters\nfor a first name and a last name I'll\nname these first and\nlast what do we want to do within this\nfunction let's capitalize the user's\nfirst name first equals\nfirst. capitalize\nmethod then do the same thing with the\nlast\nname last equals last. capitalize\nthen I'm going to return the user's\nfirst name plus their last name then\nI'll add a space in between their first\nand last\nname this is also valid outside of the\nfunction let's create a full name\nvariable then invoke the create name\nfunction so this function is going to\ncapitalize the first and last name for\nus I'll type in my first name all\nlowercase same thing with my last\nname then let's let's print our full\nname and here is my full name variable\nwe sent our function some arguments we\nhave some parameters set up we took\nthose values made them uppercase then\nconcatenated these strings together then\nreturn them as a single string let's try\nthis with a different name\nSpongeBob\nSquarePants SpongeBob now has a full\nname the first and last names are now\ncap ized using the return statement you\ncan return some data back to the place\nin which you call a function well\neverybody that's a function it's a\nsection of reusable code to call a\nfunction you type the function's name\nadd a set of parentheses you can send a\nfunction some data which are known as\narguments but you'll need a matching set\nof parameters you also do have the\noption of returning some data back to\nthe place in which you invoke a function\nwe'll be using functions a lot in the\nfuture but we will get more practice\nwith them and those are functions in\nPython hey everybody today I'm going to\nexplain default arguments default\narguments are a default value for\ncertain parameters the default is used\nwhen that argument is omitted when you\ninvoke a function in the last topic we\ndiscussed positional arguments today we\nwill be examining default arguments then\nin future topics we'll examine keyword\nand arbitrary arguments let's begin in\nlet's define a function to calculate net\nprice there will be three parameters an\noriginal list\nprice a discount if there is one and\nsales\ntax we will return a net price and\nhere's the\nformula list price\ntimes 1 minus our discount\npercentage times\n1 plus our sales tax maybe I'm buying a\nPlayStation 5 for\n$500 I will pass in 500 for the list\nprice well I can't actually execute this\nfunction without also passing in an\nargument for Discount and tax perhaps\nthe discount is zero and the sales tax\nis 5%\n0.05 well this would work and I should\nprobably put this within a print\nstatement so you can see it\nthere we are my total is\n$525 the list price of 500 no discount\nand 5% sales tax now suppose that maybe\n90% of the time when we're executing\nthis function most of the time discount\nis zero and our sales tax is almost\nalways the same what we could do to make\nthis function a little more flexible is\nto set these two parameters to have a\ndefault value in place of sending in\nthree arguments we can pass in one then\ns our discount and our tax to have a\ndefault value so I will set discount to\nbe zero and tax to be 0.05 meaning 5% so\nthis function would work our total is\n525 and that's assuming that our\ndiscount is zero and our tax is 5% the\nnice thing about using default arguments\nis that let's say that somebody has a\ndiscount well this function would also\naccept up to two additional\narguments so let's\nprint our net\nprice 500 and our customer has a coupon\nfor 10% off I'll add a second argument\nof\n0.1 if we're passing in an argument for\nour discount we'll use whatever is\npassed in rather than the default our\ntotal now is\n$472 or maybe this\ntime they are not paying sales tax I\nwill set the sales tax to be zero\nnow the customer total is\n$450 so that's kind of the nice thing\nabout default arguments it makes your\nfunctions more flexible and it can\nreduce the number of arguments\nespecially if the arguments that you're\npassing in tend to be consistent most of\nthe time people don't have a discount\nand almost everybody is paying 5% sales\ntax why pass an arguments if we don't\nhave to Let's cover an exercise we'll\ncreate a count up timer we will import\nthe time module we will Define this\nfunction define count there will be two\narguments start and\nend for X in\nrange\nstart comma and within the range\nfunction the second argument is\nexclusive so I'm going to add one to the\nend of our\ntime then I will print X to make this\nthread that's running the program sleep\nyou can access the time modules Sleep\nMethod pass in one for one\nsecond then outside of the for Loop\nlet's print the word\ndone to invoke this function I need to\npass in two arguments a start time and\nan end time I'll set the start time to\nbe zero the end time to be 10 10\nseconds so we start at zero then we will\nincrement by one every second I'll speed\nup the video I think you get the idea\nbut we'll stop at\n10 let's assume that most of the time a\nuser would like to begin at zero well we\ndon't necessarily need to pass that in\nas an argument let's set our start\nparameter to have a default value of\nzero we only need to pass in one\nargument but we do have a problem\nnon-default arguments should follow\ndefault arguments so if you use any\ndefault arguments you'll want to be sure\nthat they're after any positional\narguments so let's reverse these and\nthat should\nwork so now when I run this program it's\nassuming we'd like to start at\nzero but we'll need to pass in an ending\namount of seconds when do we want to\nstop that works the same but now we do\nhave the option of starting at a\ndifferent number this time let's end at\n30 but we will begin at\n15 we're beginning at 15 then we will\ncount to 30 I'll speed up the\nvideo there we are all right everybody\nso in conclusion default arguments they\nare default values for certain\nparameters the default value is used\nwhen an argument is omitted they can\nmake your functions more flexible and\nreduce the number of arguments you have\nto pass in especially if those arguments\nare consistent most of the time so those\nare default arguments and in the next\ntopic we will discuss keyword arguments\nand well yeah those are default\narguments in\nPython hey friends it's me again today\nI'm going to explain keyword arguments a\nkeyword argument is an argument preceded\nby an identifier it has a few benefits\nit helps with readability and the Order\nof the arguments doesn't matter if\nthey're keywords keyword arguments are\none of four basic styles of arguments we\ndiscuss positional default then next\nwe'll discuss arbitrary but today we'll\nbe focusing on keyword suppose I have a\nfunction to display a message like a\ngreeting I will name this function the\nhello function we will need a\ngreeting a title Mr Mrs\ndoctor a first name then a last\nname all I'm going to do within this\nfunction is print an F string I will\nprint my\ngreeting the user's\ntitle first\nname last\nname then to invoke the hello function I\nwill need to pass in four arguments a\ngreeting a title a first name and a last\nname so for my greeting let's\nsay hello the title will be Mr\nthe first name will be\nSpongeBob last name\nSquarePants so you know this does work\nwe're currently using positional\narguments the position of these\narguments does matter so what if I were\nto switch these around we have hello\nSpongeBob SquarePants followed by Mister\nhello SpongeBob SquarePants Mis an\noptional feature when sending arguments\nto a function is that we could turn\nthese into into keyword arguments prefix\nany arguments with the name of the\nparameter followed by equals title\nequals\nMister first equals\nSpongeBob last equals SquarePants then\nwith these keyword arguments the order\nreally doesn't matter maybe we move the\nfirst name to the\nend and the still would print out is the\nsame thing we have title first name last\nname if you're mixing and matching\npositional arguments and key word\narguments you want to be sure that the\npositional arguments are first so if I\nwas to move the string or greeting to\nthe\nend well this technically wouldn't work\nwe have a syntax error positional\narguments follow keyword arguments so\nmake sure any positional arguments are\nfirst before using any keyword arguments\ntwo helpful benefits of using keyword\narguments is that it helps with\nreadability and the Order of the\narguments doesn't matter we know what\nthis argument is as well as is these two\ntitle last name first\nname let's say we have a first name and\na last name John\nJames these two names kind of sound like\nfirst names is our first name John or is\nit James we could use keyword arguments\nto clarify which is which you thought\nJohn was the first name but it's\nactually the last name and the first\nname is\nJames then our title is still the same\nhello Mr James John Let's cover another\nexample I'm going to print the numbers 1\nthrough 10 using a for Loop for X in\nrange 1 comma 11 because the second\nargument is exclusive then I will print\nX after each print statement we print a\nnew line do you remember in previous\ntopics how we would follow our print\nstatement with comma and than a new\ncharacter such as a\nspace while end is a keyword argument\nfound within the built-in print\nstatement in place of ending each print\nstatement with a new line we are using\nthis keyword argument of end and sending\nit to be a\nspace another one is separate that's\nfound within the print\nstatement maybe we have some\nnumbers they're all separate\nstrings the numbers 1 through 5 I can\nuse the separate keyword argument then\nseparate each of these strings with a\ngiven character or characters I will\nseparate each of these strings with a\ndash a lot of built-in functions such as\nthe print function they have some\nkeyword arguments you can use let's go\nover an exercise\nnow we're going to create a function to\ngenerate a phone number but we'll need\nto pass in a country code area code the\nfirst three digits in the last four\ndigits let's define this function as\nDefine get phone to get a phone\nnumber we have a country\ncode area\ncode first meaning first few digits then\nlast meaning last few digits we will\nreturn an F\nstring we will place our country code\nfirst Dash then our area code\nDash the first few digits Dash the last\nfew\ndigits my phone number phone num equals\nI will invoke the get phone number\nfunction we just\ncreated but we'll need a country\ncode an area\ncode first few digits then last few\ndigits and remember the order doesn't\nnecessarily matter usually I try and be\nconsistent with the order of the\nparameters make up a phone number I'm in\nthe United States my country code is one\narea code 1 2\n3 the next few digits will be 456 the\nlast few will be\n7890 then let's print this phone number\nprint phone\nnum and here is my phone number although\nyou can change it up based on how you do\nphone numbers in your country this is\ntypically how you would see a phone\nnumber in the United States all right\neverybody so those are keyword arguments\nthey are just arguments preceded by an\nidentifier that matches the name of a\nfunction's parameters it does help with\nreadability and the Order of the\narguments doesn't matter when invoking a\nfunction it could be helpful to identify\nsome of these arguments and well\neverybody those are keyword arguments in\nPython Hello friends it's me again today\nI need to explain arbitrary arguments\narbitrary meaning a varying amount of\narguments we don't know how many\narguments the user is going to pass in\nwhen they invoke a function to accept a\nvarying amount of arguments developers\ntend to use these parameters of args and\nquars args means arguments quars means\nkeyword arguments you would want to\nprefix each of these parameters with the\nunpacking operator which is an asterisk\nwhen you invoke a function that has args\nor quars as parameters you will pack all\nof those arguments into a tupple if it's\nargs or a dictionary if the parameters\nquars let's go over an example I will\ncreate a function to add two numbers\ntogether Define add function there will\nbe two\nparameters a comma B all I'm going to do\nis return a +\nb i will invoke this function pass in\ntwo arguments because we have two\nparameter set up one comma 2 then I'm\ngoing to print the\nresult big surprise there my function\nreturn three all right well what if I\nwould like to pass in three parameters\nthis time well I can no longer use this\nfunction the add function takes two\npositional arguments but three were\ngiven I could modify this function so\nthat it could accept a varying amount of\narguments any amount I'm going to\nreplace the parameters with asterisk\nthan the word args meaning arguments so\nwhen we use the unpacking operator\nwhat's going to happen now is that with\nthe arguments that we pass into this\nfunction we will pack them all into a\ntupple and if you don't believe me let's\ntest it I'm going to print the type of\nargs then I'm going to remove this print\nstatement for\nnow my parameter args is a tupple that I\ncould work with we can use the built-in\nmethods of this tupple or we could\niterate over\nit I'm going to iterate over this Tuple\nfor every ARG in args for every argument\nin arguments what we'll do is create a\nvariable named total to keep track of\nthe\ntotal total plus equals the current Arc\nthat we're iterating over then at the\nend I will return the\ntotal let's print the result print add\nthese three numbers together\nthere we are my total is six then we can\npass in any amount of arguments for this\ntime maybe\nfive or even\none with my parameter args you can\nchange this name to something else like\nnums meaning numbers for every num in\nnums total plus equals num this would\nwork too the name of the parameter isn't\nas important as as the unpacking\nOperator just by typical naming\nconventions people tend to stick with\nargs but the parameter name can vary\nlet's try a different example let's\ncreate a function to display somebody's\nname display\nname we will accept a varying amount of\narguments use the unpacking operator\nthen follow the unpacking operator with\nthe unique parameter name for every ARG\nin args\nlet's print each\nargument then replace the ending\ncharacter of my print statement with a\nspace now sometimes people can have a\nvarying number of names in their full\nname there can be a first name middle\nname last name maen name a title Etc so\nI'm going to pass in just a first name\nand a last\nname\nSpongeBob\nSquarePants if if I need to add a middle\nname I can do that SpongeBob Herold\nSquarePants or a\ntitle Dr SpongeBob Herold\nSquarePants the\nthird yeah as I was saying with the\nunpacking operator followed by a unique\nparameter name you can pack all of these\narguments into a tuple which you can use\nwithin this function\nnow let's discuss quars you use two\nunpacking operators then typically\npeople follow this with the word quars\nmeaning keyword arguments it allows you\nto pass multiple keyword arguments which\nwe discussed in the last topic I think\nthis would be great for an address\nDefine print address\nfunction use double asterisks then we\ncan add a parameter name but people\nusually stick with with quars meaning\nkeyword arguments just as a placeholder\nI'm going to type pass pass doesn't do\nanything I want this program to be able\nto run we'll get back to this function\nmomentarily I'm going to invoke this\nfunction print\naddress then pass in multiple keyword\narguments with an address you would\ntypically have a\nstreet a\ncity state depending on what country you\nlive in you may have more or less of\nthese keyword arguments I live in the\nUnited States we have a state then a zip\ncode okay my street will be I'm just\nmaking something up here one two three\nfake\nStreet City will be\nDetroit State\nMichigan ZIP\ncode 5 43 2\n1 just to make this look better I'm\ngoing to place each of these keyword\narguments on a new line for me that's\njust more readable but you do you when I\npass in these keyword arguments we will\npack them into a\ndictionary just to prove it let's print\nthe type of\nquars look at that class\ndictionary within this function you can\ntreat quars as if it's a dictionary\nthere's a lot of built-in methods or we\ncould iterate over the keys the values\nor both to to iterate over the values\nlet's say for every value in our\ndictionary quars Dov values\nmethod print every\nvalue here's all the values for the keys\nlet's change this for Loop to be for\nevery key in quars do Keys method print\nevery\nkey here are the keys for both you could\nsay for every key comma value in quars\ndo items method print every key actually\nlet me turn this into an F\nstring print every\nkey\ncolon\nvalue the items method will return key\nvalue pairs we can pass in a varying\namount of keyword arguments\nI'm going to add an apartment number\napartment\nequals\n100 our keyword argument of apartment\nwas packed into a dictionary along with\nall these other keyword arguments so\nthat's kind of nice we can pass in a\nvarying amount of keyword arguments\nlet's cover an exercise we're going to\nuse both args and quarks\ntogether we will print a shipping label\nDefine shipping\nlabel function the parameters will be\nboth ARS comma quars then just for now\nI'm going to write past just so that\nthis program will work for now we'll\nfill in the shipping label function\nmomentarily when we invoke the shipping\nlabel function we will first pass in any\npositional arguments followed by keyword\narguments and it won't work the other\nway around I'll prove that in a little\nbit so let's say we have doctor\nSpongeBob\nSquarePants the\nthir then I'll add my keyword arguments\nI'm going to put this on a new line\nStreet\nequals 123 Fake\nStreet Apartment equals\n100 City equals Detroit\nState equals\nMichigan zip equal\n54321 when we invoke this function we\nhave a mix of arbitrary positional\narguments and arbitrary keyword\narguments this shipping label function\nis designed to accept both you do need\nargs first followed by quars this\nprogram will run but if we have have it\nthe other way around quars followed by\nargs it's not going to function properly\nyou can see that we have a syntax\nerror with your parameters make sure\nthat your keyword arguments follow your\npositional arguments let's iterate over\nthe positional arguments first for every\nARG in\nARS let's print each\nARG then I will change the ending\ncharacter of my print statement to be a\nspace Here's the name of the user who\nwe're shipping something to with the\nshipping label\nfunction I will print a new line then we\nwill iterate over all the keyword\narguments for every value in my\ndictionary quars do values\nmethod I will print each\nvalue then I will change the ending\ncharacter of my print statement to be a\nspace all right it's not looking too bad\nso\nfar if you were to remove some keyword\narguments or some positional\narguments this should work still which\nit does I'm going to change the format\nof this address slightly let's add our\nstreet on one line then the city state\nand zip code on the next line let's get\nrid of this four\nLoop to print the street I'm going to\nprint\nuse an FST string add a\nplaceholder quars doget method I'm going\nto get the street key with this get\nmethod you'll probably need to place\nthem within single quotes because if you\nuse double quotes python gets confused\nas to where this FST string ends we will\nuse single quotes Let's test it all\nright we have a street on the next line\nwe will print the city state and zip\nprint fing placeholder quars doget\nwithin single quotes the\ncity I'll add another\nplaceholder quars\ndoget\nState then\nquars\ndoget\nzip let's see what we have all right not\ntoo\nbad what if the user has an apartment\nkeyword apartment equals number\n100 well we should probably add that too\nwithin this top print statement I will\nadd another\nplaceholder invoke the get method of the\ndictionary the key we are looking for is\napartment Dr SpongeBob SquarePants 123\nFake Street apartment number 100 Detroit\nMichigan 5432 1 what if our print\nstatement is set up to display a street\nand an apartment but the user doesn't\nhave an\napartment this would display none and we\ndon't want that I'm thinking what we'll\ndo is we'll place this print statement\nwithin an if\nstatement what we'll check is\nif\napartment in\nquars if there's an apartment key in\nquars our dictionary then print this\nline else we will\nprint just the\nstreet the person doesn't have an\napartment we won't print the apartment\nthen but if they do have an apartment\napartment equals number\n100 then we will 1 2 3 fake Street\napartment number\n100 here's a challenge round what if a\nuser has a PO Box let's change apartment\nto P\nbox the string will be P box number 1,1\nI\nsuppose I'll add an else if statement\nelse\nif PO\nBox in our dictionary\nquars let's print the the street I'll\ncopy this line paste\nit followed by a second print\nstatement quars doget PO\nBox there we are Dr SpongeBob\nSquarePants 123 Fake Street p. box 1001\nDetroit Michigan\n54321 all right everybody those are\narbitrary arguments when you invoke a\nfunction you can pass in a a varying\namount of arguments set up your\nparameter to be args for a varying\namount of non-keyword arguments or quars\nfor a varying amount of keyword\narguments you can set up both in your\nparameters which we did for this\nexercise and well everybody those are\narbitrary arguments in\nPython hey everybody so today I got to\ntalk about iterables in Python and\niterable it's a category any object or\ncollection that can return its elements\none at a time is considered an iterable\nif an object or a collection is\nconsidered an iterable then it can be\niterated over in a loop for example\nlet's create a list of\nnumbers numbers equals a list I'll add\nthe numbers 1 through 5 to keep it\nsimple lists are considered iterable we\ncan use them within a for\nLoop in the context of a for loop we're\ngoing to be given each element one at a\ntime\neach element that we're working with we\ncan give a temporary nickname let's say\nnumber for every number in my iterable\nof numbers let's just print each\nnumber this will give us 1 through\n5 the name of the current element in our\niterable should be descriptive of what\nwe're iterating over for example I don't\nwant to rename the current number that\nwe're working with as something like\nblah blah blah\nyou know this would work but other\npeople looking over your code might not\nunderstand what a blah blah blah is and\nI don't blame them each element that\nwe're given from our iterable the name\nshould be descriptive of what we're\ngiven or you might see item for every\nitem in numbers print each\nitem that's also a good\nchoice now you could even iterate\nbackwards by enclosing our iterable\nwithin the Reversed function\nso take our iterable of numbers and\nreverse it then we get the numbers 5 4 3\n2 1 if you would rather not print each\nelement on a new line we can replace the\nnew line character at the end of print\nstatements with something else print is\na function we can pass in a keyword\nargument of end rather than end each\nline with a new line character let's end\nwith the\nspace this will space out each of the\nelements or we could replace it with\nsomething else\nor what about a\ndash after each element append a dash\ncharacter we could even add multiple\ncharacters such as a space a dash and a\nspace if we so\nchoose it's up to\nyou tuples are also\niterable let's convert our list to a\ntupple by enclosing our numbers within a\nset of\nparentheses and I no longer want this\nreversed for every number in my itable\nof numbers print each number then again\nwe get the numbers 1 through\n5 let's cover\nsets I will create a set of fruit which\nI will name\nfruits for a set enclose any values\nwithin a set of curly braces let's add a\nstring of Apple a string of orange a\nstring of\nbanana and a string of coconut\nso with our for Loop let's say for every\nfruit in my iterable of fruits I will\nprint each\nfruit that would give me apple banana\norange\ncoconut now sets they're actually not\nreversible I will attempt to enclose our\niterable of fruits within the Reversed\nfunction here's what happens we have a\ntype error set object is not\nreversible sets you can't rever\nverse let's cover strings I will create\na string of name type in your full name\nI'll use my YouTube channel name for\nevery character in my iterable of name I\nwould like to print each\ncharacter maybe I would rather not have\neach character end with a new line I\nwill set the keyword argument of end to\nbe a space\nlast we have dictionaries which are the\nmost\ncomplicated let's name this dictionary\nmy\ndictionary dictionaries you enclose with\na set of krly braces kind of like a set\nbut each element is a key value pair I\nwill add a key of A with an Associated\nvalue of one a key of B which has a\nvalue of two a key of C which has a\nvalue of three\nif you iterate over a dictionary the\ndictionary is going to return all the\nkeys but not the values we'll test that\nfor every key in my iterable of my\ndictionary let's print each\nkey this would give me the keys of a b\nand c but none of the values 1 2 or\nthree if you need the values we're going\nto follow this iterable of my dictionary\nuse the built-in values\nmethod this will return all the values\nof your dictionary as an iterable but\nlet's rename a key as value because now\nwe're working with the\nvalues then we're given all the values 1\n2 and three if you need both the keys\nand the values you're going to use the\nitems\nmethod we'll be given both a key and a\nvalue\nmake sure that the value and the key is\nseparated with the\ncomma let's print each key followed by\nthe\nvalue we get the key of A with its value\nof 1 b 2 c\n3 we can reformat the output however we\nwant let's use an F string I will add\ntwo placeholders let's print each key\nequals then the\nvalue a equals = 1 b = 2 c =\n3 okay everybody so those are iterables\nan object or collection that can return\nits elements one at a time is considered\nan iterable meaning that object or\ncollection can be iterated over using a\nloop and well everybody those are\niterables in\nPython hello again so today I got to\ntalk about membership operators in\nPython they are the operators in and not\nin they're used to test whether a value\nor a variable is found within a sequence\nwhich include but are not limited to\nStrings lists topples sets or\ndictionaries here's an example I'm going\nto create a word a secret word let's say\napple I'm going to turn this into a game\nI will have a user guess a letter I will\naccept some user\ninput guess a letter\nin the\nsecret\nword what I would like to do is check to\nsee if my letter is found in my word I\ncan write the following statement if our\nletter in our\nword in is going to return a Boolean\nvalue of true if that letter is found or\nfalse if it's not so if our letter is\nfound I'm going to print the following\nstatement I'll use an F\nstring there is a add a placeholder\ninsert our\nletter else let's\nprint I'll use an F string our\nletter was not\nfound Let's test this guess a letter in\nthe secret word I will guess a capital A\nso all these letters are uppercase do\ntake note of that\nis there an a there is an a let's guess\na letter that's not within this word\nsuch as z z was not found the in\nmembership operator will test to see if\na value or a variable is found within a\nsequence if it is it returns true if not\nit returns false or for the inverse you\ncould say not in if letter is not in\nword we would have to flip these\nstatements around\nif this value or variable is not found\nin this sequence it returns true\notherwise false so it does the opposite\nof in guess a letter in the secret word\nis there an e there is an\ne is there a q q was not found depending\non the statement you're trying to write\nyou can use either in or not in\nwhichever makes more sense in that\ncontext let's go over another example we\nwere searching for a value or a variable\nfound within a string let's try a set\nlist tles and sets are going to behave\nsimilarly I will create a set of\nstudents for a set you need a set of\ncurly braces let's add a few student\nnames such as\nSpongeBob\nPatrick and Sandy\nI will have a user type in a student to\nsearch\nfor we will accept some user\ninput enter the name of a\nstudent we're going to check if our\nstudent is\nin our sequence of\nstudents if in returns true let's print\nthe following I'll use an F string\ninsert our\nstudent is a\nstudent else we will print I'll use an F\nstring insert that\nstudent was not\nfound enter the name of a\nstudent let's search for SpongeBob\nSpongeBob is a student enter the name of\na student let's attempt Squidward\nSquidward was not\nfound and much like the first example we\ncan do the opposite see if a value or a\nvariable is not in a\nsequence we would have to switch these\nstatements\naround enter the name of a student is\nSandy a student Sandy is a student enter\nthe name of a student is Laria student\nLaria was not\nfound now now we'll cover dictionaries I\nwill create a dictionary of grades\nstudent grades like a grade\nbook let's say that the student of Sandy\nshe will be a key has a value of\na\nSquidward the key of Squidward has a\nvalue of\nB SpongeBob he is also a\nkey SpongeBob has a grade of\nC then\nPatrick Patrick has a grade of\nD here is my dictionary of\ngrades then we'll search for a student\nstudent equals\ninput enter the name of a\nstudent we'll check if Let Me Close the\nthis if our\nstudent is found within\ngrades then I will print the\nfollowing we're looking for keys is\nthere a matching key if we find that\nstudent I'll make this an F\nstring let's display the associated\nvalue of that\nkey\nstudent\nstudents\ngrade is I'll add a\nplaceholder once we find a student we\nhave to get that value at the given\nkey to do that we'll take our dictionary\nof grades at index of student this will\nretrieve the value at a given\nkey if we don't find a student we'll\noutput the\nfollowing again I'll use an FST\nstring\nstudent was not\nfound so now if I search for a student\nsuch as SpongeBob we're given a grade\nwe're given the value at that key that\nwe're searching\nfor Let's test Sandy Sand's great as a\nSquidward Squidward's great as B and\nPatrick Patrick's great is D but Larry\nis not a student if I search for him\nwell Larry was not\nfound let's go over one last example\nwe're going to create a variable of\nemail it's going to be a string type in\nwhatever your email is Bro Code\ngmail.com I would like to see if this\nemail is valid does it contain at and a\nperiod I will write if our value of at\nthat character is in our\nemail and a period is in email\nwe have two conditions check if at is an\nemail and check if a period is an email\nif so it's a valid email then we'll\nprint valid\nemail else we will\nprint invalid\nemail is my email valid that email is\nvalid I'll get rid of the app\ninvalid\nemail I'll get rid of the period\nfollowing\nGmail that email is also\ninvalid in this example we're checking\ntwo conditions if this value is found\nwithin this sequence and this value is\nfound within this\nsequence all right everybody so those\nare membership operators in and not in\nthey will return a Boolean based on\nwhether a value or a variable is found\nwithin a sequence which include but are\nnot limited to Strings lists tles sets\nor dictionaries and well everybody those\nare membership operators in\nPython hey what's going on everybody so\nin today's video I got to explain list\ncomprehensions in Python a list\ncomprehension is a concise way to create\nlists in Python they're Compact and\neasier to read than traditional Loops\nbasically you have to follow the this\nformula for every value in something\nthat's iterable meaning you can Loop\nthrough it check some condition then do\nthis expression so let me give you an\nexample with using a traditional Loop\nthen you'll be able to see why a list\ncomprehension is useful we're going to\ncreate a list and double the numbers 1\nthrough\n10 doubles equals an empty list using a\ntraditional for Loop we will say for\nevery value let's say X\nin range 1 through 11 remember that in\nthe range function the second number is\nexclusive this will give you the numbers\n1 through 10 for the first iteration X\nis going to be 1 then 2 3 all the way up\nuntil 10 so we'll iterate 10 times\nduring each iteration I'm going to take\nmy list of doubles use the built-in\nappend method we will append X during\neach iteration that's going to be the\nvalue\ntime 2 so if I were to print my list of\ndoubles here's the result we have the\nnumbers 1 through 10 all doubled 2 4 6 8\n10 12 14 16 18 20 so this is a lot to\nwrite we can use a list comprehension to\nmake this code more Compact and easier\nto read here's how we need a name for\nthis list let's say doubles equals an\nempty list within our list list will\nfollow this\nformula we have an expression for Value\nin iterable and optionally we can check\na condition we'll do this in exercises\nlater on in this topic we'll begin with\nfor every value let's say X in our\niterable our iterable is going to be a\nrange 1 through 10 again for the first\niteration X will be 1 then the second\niteration X will be 2 all the way up\nuntil 10 during each iteration what\nwould we like to do with X our value\nlet's take X multiply it by two and\nreturn\nit then if I was to print my list of\ndoubles we have the numbers 2 4 6 8 10\n12 14 16 18 20 for every value in this\niterable do this multiply it by two this\nis a list comprehension it's a concise\nway to create list in Python we'll go\nover a few\nexercises so this time we will triple\neach number we'll create a list of\ntriples equals let's say this time for\nevery Y in\nrange 1 through 10 so we have to write\n11 take Y and multiply it by 3 then we\nwill print our list of triples 3 6 9 12\n15 18 so on and so forth let's Square\neach\nnumber we'll create a list of squares\nfor every Z in range 1-\n10 to square a number we take that\nnumber multiply it by\nitself so the numbers 1 through 10^\nsquar is 1 4 9 16 15 36 49 64 81 100 so\n10 * 10 is 100 now we're going to work\nwith\nstrings we'll create a list of fruits\nequals think of some fruit these are all\ngoing to be strings Apple\norange\nbanana\ncoconut I'm going to take each string in\nthis list and make it\nuppercase we could assign this to a new\nlist such as uppercase\nfruits or we can simply just reassign it\njust to keep it simple I'll reassign\nit so again we're following this formula\nI like to begin with the four value in\niterable portion for every fruit in our\niterable of fruits what do we want to do\nwell let's take each fruit take each\nfruit use the built-in upper method to\nmake it\nuppercase then I'm going to\nprint my list of fruits\neach string in this list is now all\nuppercase you could even cut down on one\nof the steps with our iterable of fruits\nI will place this\nlist and this does work too although I\ndo find this a little more difficult to\nread but you can take either option how\nabout instead of making each string\nuppercase we'll take the first letter of\neach string then put it within a new\nlist so let's take each fruit at index\nof zero that will give us the first\nletter we'll place it within a new list\nof fruit chars meaning\ncharacters here's the result a o b c for\nevery fruit in our list of\nfruits return the first character of\neach string a o b c now we'll work with\nconditions\nwe'll create a list of numbers both\nnegative and positive numbers equals\nlet's say one -2 3 -4 5\n-6 we'll create a list comprehension to\ncreate a new list where all of the\nnumbers are positive our new list will\nbe positive nums equals we'll write a\nlist comprehension for every let's say\nnum in Num\nnumbers we'll write a\ncondition return this number if our\nnum is greater than or equal to zero we\ndo need an expression if we're not\nmodifying each value we can just return\nthe value of\nnum during this exercise we're more\nfocused on the if condition rather than\nthe expression if our value of num meets\nthis condition simply return it and\nplace it within this new\nlist let's print our list of positive\nnumbers and we have\n135 let's do this with negative numbers\nI'll just copy what we have and change a\nfew things around this list will be\nnegative numbers negative nums for every\nnum in numbers check this condition\ncheck to see if num is less than zero if\nso return that number let's print our\nlist of negative numbers -2 -4\n-6 let's check to see if there's any\neven\nnumbers even nums equals for every num\nin numbers check to see if our num is\ndivisible by two and we can do that with\nthe modulus operator followed by two the\nmodulus operator will give you the\nremainder of any Division if our number\nis even number modulus 2 will equal Zer\nif it's even this is going to equal zero\nif it's odd it's going to be one we're\nnot modifying our value we're just going\nto return our\nnumber our list of even numbers should\nbe -2 -4 -6 let me add one more value\nlet's add positive\n8 -24 -6 positive 8\nmaybe we'll add one\nmore\n-7 okay let's find any odd numbers let's\ncopy this line of code replace even\nnumbers with odd\nnumbers if num modulus 2 is equal to\none that means that number doesn't\ndivide by two evenly then we'll print\nour odd\nnumbers 1 3 57 all these numbers are odd\nhere's the last\nexercise we'll create a list of\ngrades we'll create a new list of any\ngrades that are considered passing\nmeaning they scored 60 or above so let's\nsay one student has a grade of 85\nanother with of\n42\n79\n90\n56\n61 let's say say\n30 I will create a new list of passing\ngrades equals again follow this\nformula for every grade in\ngrades check our condition if our grade\nis greater than or equal to 60 we will\nreturn the current\ngrade then let's print our list of\npassing\ngrades that will give us 85 79 90 and 61\nall of these grades are greater than or\nequal to 60 all right everybody so that\nis a list comprehension it's a concise\nway to create lists in Python they're\nCompact and easier to read than\ntraditional Loops remember for every\nvalue in your iterable optionally you\ncan check a condition you can write an\nexpression to modify that value if you\nchoose and return something all right\neverybody so those are list\ncomprehensions in\nPython hey everybody so today I'm going\nto explain match case statements in\nPython if you're familiar with other\nprogramming languages this is also known\nas a switch match case statements are\nalternatives to using many LF\nstatements we execute some code if a\nvalue matches a case the benefits of\nusing a match case statement is that\nthey're cleaner and the syntax is more\nreadable in this sample program I have a\nfunction there is one parameter a day\nday will be a number ideally a number 1\nthrough 7 depending on this number we'll\nreturn a string corresponding to the day\nof the week if day equals 1 then it is\nSunday two it is Monday all the way up\nto\n7 where it will be Saturday I do have a\nelse Clause if we pass in something\nthat's not valid like\npizza pizza is not a day but it really\nshould be not a valid day a cleaner and\nmore readable alternative is to use a\nmatch case statement instead of many\nelif\nstatements here's how I'm going to take\nmy if and many elif statements and\nenclose them within a match\ncase match case the case is going to be\nthe value we're examining the case will\nbe day\ncolon we're going to examine our value\nof day against matching\ncases we're going to replace if day\nequals with the following just simply\ncase so let's do that with each of these\nstatements\nif you have an else Clause you're\ninstead going to have a case of\nunderscore an underscore and match case\nstatement is a wild card we will perform\nthis case if there are no matching cases\nthis case would function as the else\nstatement here's what we're working with\nnow if I pass in one and return the day\nof the week we would get\nSunday two would be Monday 3\nTuesday\n7 is Saturday and then let's try that\nday of\npizza that is not a valid day a match\ncase statement is an alternative to\nusing many l statements I find this much\neasier to read than the many l\nstatements both would technically\nfunction let's go over a second example\nwe will create a function of is weekend\nwe have to pass in a day this time our\nday is going to be a string such as\nMonday the value for each case instead\nof a number is going to be a\nstring if our day matches a case of\nSunday let's return how about a Boolean\nof true we're checking to see if it's\nthe weekend if our day is equal to a\ncase of\nMonday then we will return false let's\ndo this with the other days I'm going to\nfast forward the\nvideo we will call the function of is\nweekend then pass in a day of the week\nsuch as Monday so is Sunday the weekend\nthat is\ntrue\nMonday that is false\nSaturday that is true and we do have a\nwild card case if there are no\nmatches is pizza a day of the weekend\nthat is false there is a way we can\nmodify this match case too we tend to be\nrepeating ourselves a lot the days\nMonday through Friday all return false\nwe're going to use the or logical\noperator which is represented with a\nvertical bar if the case of\nSaturday or Sunday return\ntrue if the case is\nMonday or\nTuesday you can get rid of that or\nWednesday or Thursday\nor\nFriday then we will return\nfalse we can keep our Wild Card\ncase so is\nSaturday part of the weekend that is\ntrue is\nMonday false\nSunday true Friday\nfalse and\npizza we have our Wild Card case that\ngives us false all right everybody so\nthose are match case statements they're\nsimilar to switches in other programming\nlanguages they're an alternative to\nusing many LF statements we execute some\ncode if a value matches a case the\nbenefits is that the code is cleaner and\nthe syntax is more readable and well\neverybody those are match case\nstatements in Python\non Hello friends it's me again today I'm\ngoing to explain modules a module is\njust a python file containing code you\nwant to include in your program you use\nthe import keyword to include a module\nyou can use built-in modules or create\nyour own sometimes it's useful to break\nup a large program into reusable\nseparate files for a list of all the\nmodules found within the standard python\nLibrary you can use the help function\npass in the word modules and then we\nwould need to print\nthis here are many of the different\nmodules available to you a few you may\nrecognize would be math string time one\nof my favorite names of a module is the\npickle module unfortunately it doesn't\nhave anything to do with Pickles it's\nused for serialization to list all of\nthe different variables and functions\nfound within the module you can place\nthat name of the module within the help\nfunction for example with the math\nmodule here are a few different\nvariables we would have access to and a\nfew different\nfunctions to include a module we would\ntype import the name of the module for\nexample math I now have access to\neverything found within the math module\nincluding those variables and functions\nto access those variables and functions\nI would normally type the name of the\nmodule dot the name of the variable or\nfunction such as Pi then let's print\nthis PI from the math\nmodule is 3.14 and some change another\nway to import is to type import the name\nof the module as you can give your\nmodule a nickname an alias whatever you\nthink of such as m m short for math we\nwould no longer refer to this module as\nmath we would refer to it as our Alias\nM using an alias would reduce some of\nthe typing you have to use if you have a\nvery long module name another way to\nimport import is to use from the name of\nthe module import something specific Pi\nfor instance you would no longer need\nthe module\nname from math import Pi Pi would be\nincluded within our namespace however I\ntend to not use from import as much just\nbecause it's possible there could be\nname conflicts here's an example let's\nsay from math import e e is an\nexponential\nconstant e is\n2.71 what if I was to create a program\nwhere we have four variables named A B C\nD A = 1 b = 2 c = 3 D = 4 then I'm going\nto print E from the math module to the\npower of\na that would give me\n2.71 then let's do this with b c and\nd e to the power of b e to the power of\nC e to the power of D here are the\nresults let's say we have a different\nvariable e e will be\nfive then I will\nprint e to the power of E we have\nimported E from the math module when we\nhave declared all of these variables\ntechnically what we've done is we have\ncreated another version of e we will end\nup using the second version rather than\nthe version that we have imported from\nthe math module all my my results are\nnow different and it's possible you may\nnot realize it I like to be more\nexplicit I'm going to import math if I'm\nusing a variable or function from a\nmodule I much prefer to prefix that\nvariable name or function with the name\nof the module in which it's from math. e\nto the power of a to the power of B to\nthe power of C to the power of d math. e\nto the power of our variable\ne and these results are to be expected\nNow to create a\nmodule what we're going to do is right\nclick on our project folder go to new\npython file think of a module name maybe\nexample then click python\nfile we now have two tabs Main and\nexample declare whatever you would like\nwithin this module let's create our own\nvariable Pi Pi equals\n3.14159 then a few functions let's\ncreate a function to square an argument\nthat's passed then Define Square we will\naccept an argument which we will name X\nthen return X to the^ of two let's\ndefine a cube function we will accept\none argument then return X to the^ of 3\nmaybe a circumference function Define\ncircumference we will accept a\nradius then return 2 * Pi * radius then\nan area function to calculate the area\nof a circle we will accept a radius as\nan argument then return Pi * radius to\nthe power of\n2 all right here is our example module\nwithin our main Python program let's\nimport the name of our module which we\nnamed example we now have access to\neverything within this\nmodule I'm going to declare a variable\nresult and set it to the name of my\nmodule do PI then I will print the\nresult which is\n3.14159 let's utilize the square\nfunction result equals example do Square\nlet's Square\nthree which is\nn let's use the cube\nfunction that would be 27\ncircumference that would give me\n18.8 then\narea that would be\n28.2 that's how to create your own\nmodule it can be useful at times to\nseparate your program into individual\nfiles all right everybody in conclusion\na module is just a file containing code\nyou want to include in your program you\nuse import to include a module you can\nuse built-in modules or create your own\nif you do need a list of the modules\navailable to you again you can use the\nhelp function then pass in the word\nmodules and well everybody that's how to\nget started with modules in\nPython hey friends it's me again today\nI'm going to explain both variable scope\nand scope resolution variable scope is\nwhere a variable is both visible and\naccessible with scope resolution when\nwe're using a variable there is a\ncertain order known as the lb rule in\nwhich we locate that variable local\nenclosed Global built-in we'll get to\nthis momentarily let's begin with\nvariable scope I have two functions\nFunction One function two within\nfunction 1 a equal 1 then we print a\nwithin function 2 b equal 2 then we\nprint B if I were to invoke these\nfunctions let's invoke function one then\nfunction\ntwo we would print one then two\nvariables declared within a function\nhave a local scope variable a is local\nto function one variable B is local to\nfunction 2 within function one if I were\nto print B and function two if I were to\nprint a we would run into a name error\nname B is not defined and the same thing\nwould apply with a functions can't see\ninside of other functions imagine that\nwe're function one this is our house we\ncan see everything that's going on\ninside of our house but function two is\nour neighbor's house we can't see what's\ngoing on inside of our neighbor's house\nwe have no idea what B is with function\n2 function 2 has no idea what a is\nthat's where variable scope comes in\nit's where a variable is visible and\naccessible functions can't see inside of\nother functions but they can see inside\nof their own function that's why we\nsometimes pass arguments to functions so\nthat our functions are aware of them\nusing this concept we could create\ndifferent versions of the same variable\nlet's rename a to be X and B to be X as\nwell then I will print\nX we have two different versions of x a\nlocal version of X found within function\none and a local version of X found\nwithin function 2 whenever we utilize a\nvariable we will first look to see if\nthere's any local instance of that\nvariable if there isn't we would move to\nthe enclosed scope with an enclosed\nscope one example is when you have a\nfunction declared within another\nfunction I'm going to place function two\nwithin function one this is allowed in\nPython this is a more advanced concept\nwe'll cover this more in the future so\nI'm going to eliminate this print\nstatement let's get rid of function\ntwo at the end of function one we will\ninvoke function\ntwo like I said it's pretty complex we\nwon't be using this until much later\nwithin function two if I was to print X\nwe would use the local version or x\nequals 2\nif I was to eliminate this variable\ndeclaration we would use the enclosed\nversion instead where x equals 1 there's\nan order of operations use any local\nvariables first then enclosed variables\nwe're printing X within function 2 since\nX wasn't found within the local scope we\nwould use x within the enclosed scope\nbut like I said that's a more advanced\ntopic you should at least be aware of it\nlet's move on to the global scope Global\nmeaning outside of any function\nI will eliminate these variable\ndeclarations within function one we're\nprinting X and within function two we're\nalso printing X I will declare a global\nversion of X where x equal 3 x is\noutside of any functions when I run this\nprogram we're printing three twice once\nfor function one and once for function 2\nthere's no longer a local version of X\nfor both of these functions if there\nwere we would end end up using these\nlocal versions instead Function One\nprints one function two prints two if\nthere's no local version as well as no\nenclosed version we would move on to the\nglobal version where x equal 3 last in\nour order is built in I think what we'll\ndo though is from math import e e is an\nexponential constant I'm going to print\nwhat e is e is\n2.71 e is built in I will create a\nfunction to print e Define function one\nall I'm doing is printing e then we\nshould invoke it invoke function\none if I was to set e to be a different\nvalue like three what we're doing\ntechnically is creating two different\nversions of e variables can share the\nsame name as long as they're within a\ndifferent scope we have a buil-in\nversion of e and a global version of e\nif I was to print e now it would print\nmy Global version because using the lb\norder we would first look for any local\nversion of e then enclosed version then\nGlobal which we do have one of then\nlastly built-in all right everybody so\nin conclusion variable scope is just\nwhere a variable is both visible and\naccessible python has a scope resolution\norder\nlb if we're using a variable we will\nfirst look in the local scope for that\nvariable if we don't find that variable\nin the local scope we will move over to\nan enclosed scope then Global then\nbuilt-in we will have more practice with\nthis in the future and well everybody\nthat is both variable scope and scope\nresolution in\nPython hey everybody so today I got to\ntalk about this if statement if Dunder\nname is equal to a string of Dunder main\nwhen you see this if statement it's\nusually followed by a call to a function\nnamed main or something similar a\nmajority of the driving code behind\nbehind a program is usually found within\nsome sort of main method when you see\nthis if statement basically speaking it\nmeans that this script can be imported\nor it can run Standalone functions and\nclasses in this module can be reused in\nother programs without the main block of\ncode running sometimes you would like\nthe functionality of a program without\nexecuting the main body of code a good\nexample could be a library in a python\nLibrary we would like to import some of\nthe useful functions such as the math\nmodule but if we were to run that\nLibrary directly instead of importing it\nwe could instead display a help page but\nif we're importing that Library we don't\nnecessarily want to display that help\npage only if we're running it directly\nin many Python scripts you'll see the\nstatement of if Thunder name is equal to\nmain if we're not running this program\ndirectly don't do it in this example\nwe're going to delete our main python\nscript be sure to recreate it at the end\nof this topic in case I forget to\nmention that we will create two scripts\ngo to file new python\nfile script\none file new python file script\n2 we have to add new run configurations\nfor script one and script 2 so if you go\nto the top go to run edit\nconfigurations we will add a new run\nconfiguration select python select a new\nscript path to script one\nokay apply again we have to do this with\nscript 2 add\npython select a script path of script 2\nokay apply then okay using the dropdown\nmenu we can select which run\nconfiguration we would like would we\nlike to run our main python file but we\nhave deleted it do we want to run script\none or script two for the time being\nwe'll select script one\nwithin script one if I was to\nprint then call the dur function dur\nmeaning directory python has all of\nthese built-in attributes if you're not\nfamiliar with object-oriented\nprogramming for now think of an\nattribute as a variable Dunder name is a\nspecial type of variable Dunder meaning\ndouble underscore if I was to print\nwhat's contained within Dunder\nname we would receive a string of Dunder\nmain that's why in a script you may see\nthe statement if Dunder name is equal to\na string of Dunder\nmain if so then you usually call a\nfunction named main to start your\nprogram I'm going to undo that so let's\nimport script\n2 from script 2\nimport everything asterisk means\neverything within script script 2 I will\nprint Dunder name and we'll see what's\nwithin\nit again I'm running script\none within script two Dunder name is\nequal to a string of script two the name\nof the Python\nscript however within script one Dunder\nname is equal to a string of Dunder main\nthis means I am running script one\ndirectly let's delete this\nimport then go to script 2 import script\none from script One Import asterisk\nmeaning all we're now going to change\nour run configuration from script one to\nscript 2 we are running script 2\ndirectly now Dunder name within script\none is the name of the Python script\nscript\none Dunder name within script 2 is now\nDunder\nmain so by adding this if statement of\nDunder\nname is equal to Dunder\nmain we can check to see which file is\nbeing run\ndirectly if Dunder name equals Dunder\nmain we will call a function of main to\ncontain the main body of our program but\nwe need to Define this function define\nmain our main function will contain the\nmajority of our python code anything\nthat's not already within a\nfunction so let's print\nthis is script\none then we'll Define another\nfunction of favorite food we will have\none parameter of\nfood let's print the following message\nI'll use an F\nstring your favorite food is add a\nplaceholder add our parameter of\nfood within our main function let's call\nthe favorite food function pass in your\nfavorite food as a string I'll type in\npizza then let's print the word\ngoodbye we're going to run script\none run it here's the\nresult from the top down all of our code\nis within functions we skip over it\nbecause we're not calling it quite yet\nthe first thing we do in this program is\ncheck this if statement if Dunder name\nis equal to Dunder\nare we running this program directly\nwhich we are we're running script one if\nso call the main method to start the\nprogram we print this is script one your\nfavorite food is pizza goodbye now I'm\ngoing to go to script two delete our\nprint\nstatement change the Run configuration\nto script 2 and run it nothing should\nhappen that's good now if we were\nmissing this if statement of if under\nname is equal to Main\nthen we delete our main\nfunction here's what would happen we're\nimporting script one but we're running\nscript\ntwo this is script one your favorite\nfood is pizza goodbye I don't want this\ncode to execute we're not running it\ndirectly that's why we have that if\nstatement if under name is equal to main\nI only want to run this code if we're\nrunning it\ndirectly so what we'll do within script\n2 now is Define a function\nof\nfavorite drink there's one parameter of\ndrink I will print use an F\nstring your favorite drink is I'll add a\nplaceholder we'll add our parameter of\ndrink let's print the\nmessage this is script\n2 we will call from script one the\nfavorite food function\npass in your favorite\nfood this time I'll say\nSushi let's call our favorite drink\nfunction favorite drink I'll pass in\ncoffee then we will print\ngoodbye okay we are running script\n2 this is script 2 your favorite food is\nSushi your favorite drink is coffee\ngoodbye we're running script to but\nwe're importing the functionality of the\nfavorite food function from script one\nsometimes from another python script you\nwant to borrow something but you don't\nwant to run the main body of code\ndirectly I just want to borrow this\nfunction from script one and that's\nit script 2 can be run as a standalone\nprogram but I can't import it without\nthis body of code running I can add that\nif statement if Thunder\nname is equal to a string of Thunder\nmain if we're running this program\ndirectly execute this code so let's call\na function of\nmain Define\nmain then Place main body of code within\nit if I run script 2 we have the same\nmessage so by adding this if statement\nof if name is equal to main this script\ncan be run as a standalone program or it\ncan be imported a more practical example\nof this could be a python Library you\ncan import the library for functionality\nbut if you run the library directly you\ncould instead display a help page it is\ngood practice to include if Dunder name\nequals Dunder main it makes your code\nmore modular helps with readability\nleaves no Global variables and avoid\nunintended execution and well everybody\nthat is the purpose of if Dunder name\nequals Dunder Main in\nPython hey what's going on everybody so\nin this video we're going to create a\nvery Simple banking program using python\nthis is meant to be more of an exercise\nto get us used to working with functions\nwhen creating a project I like to divide\nthat project into smaller sections then\nhandle them one at a time so we'll do\nthat by declaring all the functions\nwe'll need first with the banking\nprogram we'll need to show a user their\nbalance we'll Define a function to show\nbalance for the time being I'll write\npass just as a\nplaceholder we'll need to make a deposit\nDefine\ndeposit make\nwithdrawal\nDefine\nwithdraw near the end of this project we\nwill be creating a main function and\nplacing the main body of our code within\nit we'll handle that near the end just\nto contain everything we have our three\nfunctions with our banking program we'll\nneed to show a balance make a deposit or\nmake a withdrawal what are some\nvariables we'll need well we'll need a\nbalance which I will set to be zero\ninitially I will also create a Boolean\nof is running this will be true if at\nany time we said is running to be false\nwe'll exit the\nprogram so with the majority of our code\nwe'll place it within a while loop while\nis running you can check to see if this\nis equal to true but since this is a\nBoolean that's not\nnecessary we will just say while is\nrunning if is running becomes false\nfalse we'll exit the while loop within\nour while loop we'll print some sort of\nWelcome\nmessage let's print\nbanking\nprogram then list some\noptions let's print\none\nshow\nbalance\ntwo deposit\nthree will be\nwithdraw four will\nbe\nexit afterwards we will set a choice\nvariable to equal some user\ninput\ninput enter your choice 1- 4 We're\nencouraging a user to to type in a\nnumber 1 through 4 to select an option\ndo they want to show their balance make\na deposit make a withdrawal or exit\nwe'll add a few if and else if\nstatements let's check to see if the\nuser's\nchoice is equal to one that is a string\nof one our user input is a string data\ntype unless we were to typ cast it to\nsomething else if our choice is equal to\none we will call the function to show\nbalance\nelse if our choice is equal to\ntwo we will make a deposit by calling\nthe deposit\nfunction else if choice is equal to\nthree we will call the withdraw\nfunction else if choice is equal to 4\nthat means we would like to exit so we\nneed to exit this while loop we can do\nthat by setting our variable of is\nrunning is this program running equal to\nbe false to exit if somebody types in\nsome input that's not valid we can\nhandle that with an else\nstatement else let's\nprint that is not a valid\nChoice okay let's see what we're working\nwith currently to test everything we\nhaven't written anything within these\nfunctions yet show balance deposit or\nwithdraw so we can type 1\n2 3 and for to\nexit processed finished with exit Code\nZero so we can't exit the program we\njust have to select option\nfour with this else statement this will\nexecute if we type in something besides\nthe numbers 1 through 4 because there's\nno other options left so to test that\nenter your choice 1 through four uh I'm\njust going to type the word poo\nthat is not a valid\nchoice so we know that the L statement\nis working once we exit the while loop\nlet's print a\nmessage that\nsays thank you have a nice\nday if I was to type for to exit we\nshould exit the program thank you have a\nnice day let's make that h\ncapital now we'll work on our functions\nbeginning with show balance currently\nthese two variables are Global we don't\nneed to pass them as a parameter to\nthese functions quite yet we will be\nenclosing all of this code within a main\nfunction we'll handle that later though\nso with show balance all we're going to\ndo is print I'll use an F\nstring your\nbalance is add a dollar sign or other\nunit of currency of your choosing add a\nplaceholder our balance\nvariable and let's see what we\nhave I will type one to show balance\nyour balance is\n0 I'll display our balance with two\ndecimal places after I will add a format\nspecifier after balance colon. 2f will\nadd two decimal places we covered format\nspecifiers in a previous\ntopic so if I were to run this again\ntype one we show $0 and 0 cents we're\ndisplaying two floating Point decimal\nplaces now we need to make a deposit\nthat'll be the next\nfunction we will Define a local variable\nof amount equals accept some user\ninput enter an amount to be deposited\nagain when we accept user input it's a\nstring we'll typ cast it to a number a\nfloating Point number because we have to\ninclude dollars and\ncents we'll add some checks though after\naccepting some user input if our amount\nis greater than zero we don't want\nanybody to make a negative\ndeposit let's\nprint that's not a valid amount\nelse we are going to\nreturn our amount so this function is\ngoing to return\nsomething so within our else if\nstatement we will take our\nbalance plus equals the deposit we're\nbeing returned with this will add our\ndeposit to our balance balance plus\nequals\ndeposit let's try it\nlet's show our balance our balance is\n$0 we'll make a deposit of $100\nexactly again we'll show our balance\nafter making the deposit your balance is\n$100 let's attempt to deposit negative\nmoney we'll select two to make a\ndeposit we'll deposit 42069\nthat's not a valid\namount so we have a problem we have a\ntype error unsupported operand for float\nand nonone type so within this statement\nwithin if within our deposit function\nwe're not returning\nanything let's just return zero we have\nto return something and within this if\nstatement we didn't return anything\npreviously will either return zero or\nreturn a valid amount\nlet's try this\nagain let's make a deposit I will\nattempt to deposit\n-420\n69 that's not a valid amount our\nprogram's not crashing that's good now\nwe'll attempt to make a valid deposit\n$50\nAnd1 then show my balance your balance\nis $50 And1 Cent okay that is the\ndeposit function we'll work on the\nwithdraw function next\nwe will create a local variable of\namount accept some user\ninput enter amount to\nbe\nwithdrawn our user input is going to be\na string we will typ cast it to be a\nfloating Point\nnumber we need to check to see if our\namount we're trying to withdraw\nis greater than our\nbalance users shouldn't be able to\nwithdraw more money than what they have\nin their bank account if the amount is\ngreater than our balance that we have we\nwill\nprint\ninsufficient\nfunds else if the amount somebody's\ntrying to withdraw is less than\nzero we will print a different message\namount must be\ngreater than\nzero else we will return our valid\namount so with our if and else if\nstatements we do need to return\nsomething if we take one of these\nroutes we will return\nzero we're not making any\nchanges within our else if statement\nwhere we select choice three we're going\nto take our balance minus equals the\nwithdraw\namount Let's test\nthis banking program let's show our\nbalance our balance is\nzero we'll make a deposit of\n$100 show my balance again your balance\nis\n$100 let's press three to withdraw money\nenter amount to be withdrawn one1\nkajillion\ndollar insufficient funds yeah no\nkidding Let's attempt to withdraw money\nagain we shouldn't be able to select a\nnegative amount negative\n$420\n69 amount must be greater than\nzero let's enter in a valid number this\ntime I would like to withdraw\n$49.99 that has appeared to work we'll\nshow our balance again your balance is\nnow\n$501 then we can exit by pressing for to\nexit thank you and have a nice\nday the last few changes I'm going to\nmake is that I'm going to enclose all of\nthis code our main portion of code\nwithin a main function just to\nencapsulate all of our variables and\nhelp with\nreadability we will Define a function of\nmain take all of our code within the\nmain body of our program and place it\nwithin the function\nI'm just going to select all of it and\nindent it at the end of our program we\nneed to call a main function to run\nit if you're familiar with the statement\nof if Dunder name is equal to a string\nof Dunder\nmain that means this program can be\nimported or run stand alone it is good\npractice to include this if statement we\ndiscussed this in the previous video if\nwe're running this program directly\nexecute the main\nfunction however our variables of\nbalance and is running they're now\nenclosed within this local scope these\nother functions have no idea what these\nvariables are of balance so we need to\npass in our balance to those functions\nof withdraw and show\nbalance when we show our balance we have\nto pass in our variable of balance same\nthing with\nwithdraw then set up those\nparameters within show balance we will\nhave one parameter of balance the same\nthing with\nwithdraw the last thing I'm going to do\nis add a little bit of text decoration\naround my program just to make it look\nnice so I will print a bunch of\nasterisks it's not necessary but I think\nit'll look\nnice let's add some text decoration\nbefore and after the title of banking\nprogram also before our\nchoice basically whenever we print\nanything we'll add some text\ndecoration let's do that with show\nbalance our\ndeposit and within withdrawal\nokay let's run this one last\ntime banking program let's show our\nbalance your balance is $0 we'll make it\ndeposit $100\nAnd1 show our balance again your balance\nis $100\nAnd1 we will withdraw money enter an\namount to be withdrawn\n$11,000 insufficient funds let's try\nthat again let's withdraw\n$50 show our balance again\n$501 then press for to exit thank you\nand have a nice day all right everybody\nthat is a simple banking program you can\nwrite using\npython hey everybody in today's video\nwe're going to create a beginners slot\nmachine program using python this\nProject's meant for beginners so let's\nget started when creating a project I\nlike to break up that project into\ndifferent sections then tackle them one\nat a time so with the slot machine what\nare some of the different functions\nwe'll need well we'll need to spin a row\nwe'll Define a function to spin row as a\nplaceholder I'll write pass we'll return\nto this function later we need to\ndisplay or print the\nrow print\nrow if somebody gets matching symbols on\nthe slot machine we need to give them a\npayout we'll create a function to get\npayout in this function we'll calculate\nwhat that payout is going to be but\nagain we'll get to that later we'll\nwrite the majority of our code within a\nmain\nfunction at the end of this program I\nwill add the if statement of if Dunder\nname is equal to a string of Dunder\nmain then we will call the main function\nwhich drives our code this program can\nbe imported or stand alone it is good\npractice to add this if statement a\nmajority of the code we're going to\nwrite is going to be within our main\nfunction So within our main function\nlet's declare the variables we'll need\nthroughout this program we will need a\nstarting balance which I will just name\nbalance we will start with 100 00 as in\n$100 we'll need to display some sort of\nWelcome message let's print something we\nwill print welcome to Let's name our\ngame python\nslots just for some flavor I'm going to\nadd some text decoration just a bunch of\nas risks I think it'll look cool but you\ndon't have\nto Let's display our symbols we're going\nto use\nsymbols I'll add some emojis we'll use\nemojis in this program in place of\nimages if you're on Windows you can hold\ndown the window key plus semicolon let's\nadd a cherry you typically see a lot of\nfruit in slot machines a\nwatermelon a\nlemon there's also a lot of bells for\nsome reason but we'll add those and a\nstar let me just align\neverything let's do a test\nrun welcome to python\nslots let me make one\nadjustment okay I'm happy with\nthat so after our welcome message we'll\ncontinue playing this game while our\nbalance is greater than zero while we\nstill have money we can continue playing\nwe will print I'll use an FST\nstring current\nbalance colon space I'll add a\nplaceholder pick a unit of currency I'll\npick American dollars then we will\ndisplay the user's balance we will\nprompt the user to enter in their bet\nwhich we will assign to a variable of\nBET\nso\ninput place your bet\namount let's do a test\nrun welcome to python slots current\nbalance $100 place your bet amount we\nwon't deduce the BET amount from the\nbalance quite yet I just want to be sure\nthat we can enter in something\n$1 good $10\n$100 what if somebody body types in a\nword like pizza we need to prevent that\ninput and correct\nit we'll check if take our bet use the\nis digit method is our bet a digit if\nsomebody types in a word like pizza we\nneed to tell them that's not valid so\nthis will return true if our bet is a\ndigit but we're going to use the not\nlogical operator if our our bet is not a\ndigit then do\nthis we will\nprint please enter a valid\nnumber followed by the continue keyword\nthe continue keyword will skip the\ncurrent iteration of this Loop and start\nfrom the\nbeginning Let's test\nit place your bet amount Pizza\nplease enter a valid number we have our\ncurrent balance again place your bet\namount I'll type in\none okay we did not get that message of\nplease enter a valid number this bet of\n$1 is\nvalid so if our bet is a digit we'll\nconvert it to be an integer using typ\ncasting because when you accept user\ninput it's a string it has the string\ndata type let's reassign our bet type\ncast our bet as an integer\nthen we will check to see if our bet is\ngreater than our balance people can't\nbet money that they don't\nhave if the bet is greater than the\ncurrent balance if bet is greater than\nbalance we will print this message\ninstead\ninsufficient\nfunds then continue\nif somebody tries to bet negative money\nor no money we'll add this statement if\nbet is less than or equal to\nzero we will\nprint bet must be greater than zero and\ncontinue if all these checks pass if our\nbet is not a digit if our bet is greater\nthan our balance or if our bet is\ngreater than zero we will take our\noriginal\nbalance minus equals our bet to subtract\nit let's do a test\nrun place your bet amount pizza please\nenter a valid number I will\nbet1 kajillion dollar insufficient funds\nyeah no kidding 0\nbet must be greater than zero what about\n$1 our bet should be subtracted from our\nbalance let's try 10 we are now down to\n89 let's bet\n$90 insufficient funds\n89 and that has appeared to\nwork once we subtract our bet from our\nbalance we will call the function to\nspin row\nthis function is going to return a list\nwhich we will assign to be row row will\nbe a list using the spin row function we\nhave to generate three random symbols\nthen return them within a list we'll\nwork on the spin row function\nnext within our spin row function we\nwill declare a list of\nsymbols add your\nsymbols but these need to be strings\nmake sure they're all comma\nseparated there we go this is where list\ncomprehensions can come in if you don't\nknow what a list comprehension is here's\nan alternative we will declare an empty\nlist of results this is an empty list we\nneed a for Loop to generate three random\nsymbols we could say\nfor\nsymbol in range\nthree this for Loop will iterate three\ntimes during each iteration let's take\nour empty list of results use the append\nmethod we will append a random.\nchoice among our symbols\nso we need to import the random\nmodule we'll do so at the\ntop import\nrandom we're telling the random module\nto pick a random Choice from this list\nof\nsymbols then we will append them to our\nempty list of results after we escape\nthe for Loop we will return our results\nit's a list now a much better option is\nto use a list comprehension here's how\nit's going to be a lot more concise we\nwill return a list within the list we\nwill write a list comprehension for\nevery let's say\nsymbol in range\nthree there is no condition what do we\nwant to return during each\niteration access the random module use\nthe choice method\nthen pass in our\nsymbols symbol isn't used in this\nexample what you may see people do is\nuse an underscore as a placeholder\nbasically what we're saying is for every\niteration in range three return a random\nsymbol that's all we need for the spin\nrow\nfunction going back we have our list of\nrow afterwards I am going to print it to\ntest it print row\nand we should have three random symbols\nafter making a bet all right it looks\nlike it's\nworking we'll make a few changes\nthough instead of printing our row I'm\ngoing to print the word\nspinning I will add a new line character\njust to give us some space like after\nthis word of spinning then we will call\nthe print row\nfunction we'll pass in one argument R\nrow that's returned to us after we spin\nthe row so going to our print row\nfunction we need to set up one parameter\nour row that we receive it's going to be\na list one easy way to print the\nelements of a list is that we can print\npick some sort of separator for each\nitem in the list for example I'll just\nprint a space with strings there are bu\nmethods we will use the join method then\npass in our list or other iterable\nbasically what we're saying using the\njoin method we're going to take our\niterable in this case our list join each\nelement by a space a space character\nhere's the\nresult we have three symbols you could\njoin them by a different character I'll\nadd a vertical\nbar and to your bet amount $1 now we\nhave a vertical bar between each of\nthese symbols we could include more than\none character I'll add a space before\nand after this vertical bar just to\nspace things\nout I think that looks a lot better and\nyou don't have to but I'm going to add\nsome text decoration before and after\nI'll add a bunch of\nasterisks let's see what we're working\nwith not bad\nso every time we make a bet we get a new\nset of\nsymbols now what if all three symbols\nmatch we need to calculate a payout and\ngive it to the user because well they\nwon so after we print our row we will\ncall the\nget payout function but we will pass in\nour row it's a list and our bet how much\ndid we bet we will be returned with a\npay out which we will add to our balance\nlet's go to the get payout\nfunction we're sending two arguments to\nour get payout function a row and a bet\nwe have to check to see if each element\nin our row is all the same is it all the\nsame character we can do that with an if\nstatement if our row at index of zero\nthat's going to be the first symbol is\nequal to\nrow at index one that's the second\nsymbol is equal to\nrow at the second index and that's the\nthird symbol if all three symbols match\nwe have to return the BET multiplied\nwithin our if statement we will add\nanother if\nstatement I will check to see if our row\nat\nindex0 is equal to our first symbol of\ncherry\nbe sure to place it within quotes\nbecause it's a\nstring now the reason I'm only checking\nif row at index zero is a Cherry Emoji\nall these symbols are going to be the\nsame if we're within this if statement\nall of these symbols are going to match\nwe only need to check one of them it\ncould be zero one or two but I'll just\nadd zero they're all going to be the\nsame regardless if somebody has all\ncherries we will return their bet * 3\nor some other amount you can make the\npayouts higher or\nlower else if row at index zero is equal\nto a\nwatermelon then we will return their bet\nTime 4 so watermelons are worth more\nthan\ncherries else if row at index\nzero is equal to a lemon\nwe will return their bet Time\n5 else if row at index zero is equal to\na\nbell let's give them times 10 return bet\ntime\n10 else if row at index zero is is equal\nto a star that's worth the\nmost we will return their bet time 20\nmake sure we're not within our if\nstatement anymore if all three symbols\ndon't match within our list we don't\nwant to give the user anything they lost\nthat spin we will return zero that's all\nwe need for the get payout function\nscrolling back down after receiving a\npayout it's returned to us from this\nfunction we'll check to see if our\npayout is greater than zero that means\nthey want to\nspin I will\nprint I'll use an F string\nU1 I'll add a placeholder preced this\nwith a unit of currency I'll use dollars\nwill display the\npayout else if they did not receive a\npayout that means they lost that spin we\nwill print s sorry you lost this\nround then take our\nbalance this is our original balance\nplus equals our payout in most cases the\npayout is going to be zero but if the\nuser wins something we will add that to\nthe balance okay let's do a test\nrun I will bet $1 sorry you lost this\nround and my current balance is 99\nlet's bet\nagain I'll just keep on doing this until\nI\nwin we're going to lose more times than\nwhat we\nwin okay see I got all Bells it says you\nwon $10 once somebody runs out of money\nwe want to stop them from playing or if\nthey would like to exit we'll create a\nvariable of play again\nwe will accept some user\ninput do you want to spin\nagain we'll add y for yes sln for\nno if our variable of play again does\nnot equal a character of capital Y then\nwe will break to break out of this Loop\nlet's do a test run and to your bet\namount I'll just bet a dollar do you\nwant to spin again if I type in anything\nbesides a capital Y we will exit I will\ntype in no then we\nexit and to your bet amount I'll bet a\ndollar if somebody were to type in a\nlowercase y that doesn't register we'll\nmake it uppercase by following our input\nwith the upper method to make it\nuppercase place your bet a dollar hey I\nwon I won $3 do you want to play again\nI'll type in a lowercase y yes I would\nlike to play again but I did not hold\nshift in order to make this a capital Y\nthat will still register and our current\nbalance is\n$12 we're ahead currently place your bet\namount I'll bet\n$10 we lost this round I will press n\nbecause I don't want to play again then\nwe exit so at the end of our program\nI will\nprint I'll use an F string game over\nyour final balance is I'll add a\nplaceholder pick a unit of currency I'll\npick dollars display our balance then\nI'll just add some text decoration\nbefore and after to make it all look\nnice okay let's play this one last\ntime enter your bet amount I'll bet a\ndollar sorry you lost this round do you\nwant to spin again yes I do I will bet\n$5 you lost spin again yes I will bet\n10\n20 again I'll bet 20 I keep\nlosing I'm running out of money guys hey\nI won $10 though do you want to spin\nagain no game over your final balance is\n$1 that's why you shouldn't gamble you\ntend to lose more money than what you\ngain all right everybody so that is a\nslot machine program you can write using\npython hello everybody today I'm going\nto show you how we can write a\nsubstitution Cipher encryption program\nbasically speaking what we're going to\ndo is that we have a message to hide the\nmessage we can encrypt it by replacing\nevery instance of one character with\nanother chosen at random using the same\nkey we can then decrypt to the message\nwhen I was at my University I took an\nintro to cyber security course I turned\nthis program in as a final assignment\nand I did get an A on it I don't know\nmaybe it'll help you at the very least\nit's a good exercise all right let's get\nstarted everybody we will Begin by\nimporting the random module as well as\nthe string\nmodule let's create a string of\ncharacters named\nchariz whatever characters you would\nlike to use for your encryption program\nlist them here as a string however this\ncan be a lot to write I think a better\nsolution would be to import some\nconstants from the string module I'm\ngoing to include some punctuation I will\nimport the punctuation constant of the\nstring\nmodule how the heck do you spell\npunctuation okay that's right plus I\nwill add some digits\nstring. digits constant plus string Dot\nasky\nletters let's take a look at our\ncharacter so\nfar we have one long string of\ncharacters what if I would like to\ninclude a space a white space well there\nis a constant for that but that includes\nthings like carriage return that's going\nto warp our results let me show you just\nfor a demonstration string Dot Whit\nspace plus all the other\nstuff we have a carriage return and some\nother characters I would like to avoid\nthat so in place of importing the Whit\nspace constant from the string module\nI'm going to add a space character\nthat's good\nenough here are all the characters I\nwill be using this program feel free to\nadd more or less this is all one long\nstring I'm going to turn the string into\na list where each character is an\nindividual element to do that I'm going\nto take our string of chars reassign it\nthen typ cast my string of characters as\na list then let's print it again print\nchars instead of one long string we have\na list a list of all the characters\nwe'll need I am then going to create a\nkey which we will Shuffle eventually key\nthen to create a copy of a list you can\ntype the original\nlist. copy\nmethod then I will print my\nkey I'm going to place these lists\nwithin an F\nstring\nchars then\nkey let's see what we have\nwe have two identical lists one for the\noriginal characters and the other for\nthe key we're going to shuffle this\nkey random. shuffle pass in our list of\nkey look at that all of the characters\nare now shuffled in a random\norder what we'll be doing when somebody\ntypes in some text to be encrypted we\nwill replace every instance of one\ncharacter within that string let's say\nan O then replace it with another one\nevery time we run this program this key\nwill be reshuffled let's ask for some\nuser\ninput this part of our program we will\ndo some\nencryption plain text is the original\nmessage plain text equals we will accept\nsome user\ninput enter a message\nto encrypt\ncyppher text is the name of the\nencrypted\nmessage that will be an empty\nstring okay let's say a user types in a\nmessage enter a message to encrypt I\nlike pizza it's a very important\nmessage every instance of a character\nwithin my plain text I will refer to the\nkey and replace that letter with a\ndifferent one for example any z's I have\ntwo Z's in this program\nwill be replaced with let's\nsee capital B every time we run this\nprogram though it's going to shuffle the\nkey so it's not going to be consistent\nwhat we're going to be doing is\niterating over every letter in our plain\ntext for every letter in plain text\nstrings are\niterable find the index of every letter\nfrom our plain text within our list of\ncharacters let's assign a variable index\nindex\nequals take our list of chars use the\nindex method we are looking for that\nletter whatever letter we're currently\non then return an\nindex then refer to our key get whatever\nletter is at that same index so we will\nappend that to our Cipher text it's\ncurrently an empty string Cypher text\nplus\nequals our key\nat the given\nindex our Cipher text should be the\nencrypted message now let's print it out\nprint I'll use an FST\nstring original\nmessage let's print our plain\ntext then our encrypted\nmessage print our cyppher text\nstring let's take a look so far enter a\nmessage to encrypt I like\npizza then here's the new encrypted\nmessage every instance of a character\nwithin my plain text was replaced with\nanother so for example any z's were\nreplaced with E I have two e within this\nencrypted message if I were to run this\nprogram again it would likely be\ndifferent I like pizza\nand here's my new encrypted message my\nZ's were replaced with semicolons this\ntime for every ladder in our plane text\nget the index of each letter then refer\nto the key add the new character to our\nencrypted message it's probably best for\nus not to display the characters and the\nkey so let's hide\nthose we will be reusing this key for\ndecryption now to decrypt the message\nlet's copy this section of\ncode paste\nit we are now\ndecrypting we will ask for some Cipher\ntext then reset our plain\ntext for every letter in our Cipher text\nrefer to our\nkey append a character to our plain\ntext within our list chars at a given\nindex we will display our encrypted\nmessage followed by the original\nmessage let's try it one last time enter\na message to\nencrypt I like\ntacos here's my original message then\nthe encrypted message if I were to\ndecrypt the encrypted message it should\ngive me my original message I will type\nin these characters\nexactly hit enter and here is my message\ndecrypted I like talking goes all right\neverybody so that is a substitution\nCipher encryption program for beginners\nwhen I was at University I did turn this\nprogram in for a final assignment for a\ncyber security class and I did get an A\non it so maybe it'll help you and well\nyeah that's an encryption program for\nbeginners in\nPython what's up everybody so in today's\nvideo we're going to create a game of\nhangman using python I thought that this\nwould be a good mini project for us\nwhile learning to code it is important\nto create small projects as you go along\nhere's one that we can make together\nwhen creating a project I like to\ndeclare the various variables and data\nstructures I'll need first followed by\nthe functions I'll need for this game we\nwill need a set of words one of these\nwords is going to be chosen at random so\nlet's create a few words I'll add some\nfruit apple\norange banana\ncoconut and one more\npineapple using the random module let's\nimport that import\nrandom using the random module we will\npick one of these words at\nrandom we won't be able to see what it\nis but we can guess what the word is one\nletter at a time once we reach six\nincorrect guesses we lose the game\nbefore each guess we will display some\nasky art which trial name as hangman\nart this will be a dictionary a\ndictionary where each key value pair\ncontains a\ntuple so this is a\ndictionary of we'll have a key which\nwill be a number and a tupple the key is\ngoing to represent the incorrect number\nof guesses so we'll start at zero we\nwill display a tupple which will contain\nsome aski art then let me just copy\nthis for one incorrect guess we'll\ndisplay some different s\nart I'll just put each on a new line for\nreadability so we're going to go all the\nway up to\nsix once we hit six incorrect guesses we\nlose the\ngame each key corresponds to the number\nof incorrect guesses once we reach six\nwe lose the game each Tuple that\ncorresponds to the incorrect number of\nguesses we will display a certain image\nif you would like feel free to look in\nthe description of this video if you\nwould like to copy this to save you some\ntime each topple will consist of three\nrows three\nstrings for no incorrect guesses where\nincorrect guesses a zero we will display\nnothing we can't see our hangman person\nfor one incorrect guess we will display\ntheir\nhead for two incorrect guesses we will\ndisplay their head and the main torso of\ntheir body which will represent with a\nvertical\nbar let me copy this\none for three incorrect guesses we will\ndisplay their left arm represented with\nthe forward\nslash with four incorrect guesses we\nwill display their right\narm however if you use a backs slash\nthat's an escape sequence within a\nstring you have to use double backs\nslashes to literally print a\nbackslash so with five incorrect guesses\nwe will display their left leg of the\nperson then once we reach six incorrect\nguesses we display the full person\nthat's when we lose the game when we see\nthe entire person that's some asky Arch\nthat we can use so let's test it just to\nbe sure that everything is working fine\nI will\nprint my hangman\nart at the Key of zero to represent no\nincorrect\nguesses okay so when we display this\nperson we're going to have to use some\nsort of\nloop for every let's say line in hangman\nart at index of zero for zero incorrect\nguesses I will print each line\nline with no incorrect guesses we don't\ndisplay anything that's\ncorrect we can't see the person and\nthat's\nokay so with one incorrect guess display\nthe dictionary where the key is one that\ndisplays the person's\nhead two two would be the main torso of\ntheir\nbody\nthree they're left\narm four their right arm five their left\nleg and six their right leg once we see\nthe entire person we lose the\ngame so we can delete these two lines of\ncode we no longer need them we know that\nour dictionary is\nworking I'm going to zoom out a little\nbit following our dictionary we'll\ndeclare the various functions we'll need\nthroughout this program we will Define a\nfunction to\ndisplay man our hangman there will be\none parameter wrong\nguesses and then for the time being I'll\nwrite pass we'll fill in this function\nlater when we display our man we need to\nknow the number of incorrect guesses to\ndisplay the Right\nimage we have a display man function and\na\ndisplay hint function\nwe will have a string of\nhint then I'll write pass for now our\nhint is going to be a list a list of\nunderscore characters for each letter\nthat we guess right will flip one of\nthose underscores to be a letter if that\nletter is correct I'll create a function\nof display\nanswer within this function we will\ndisplay the correct answer either when\nwe lose the game or win the game and I\nwill write pass we will create a\nfunction of main to contain the main\nbody of code of our\nprogram again I'll write pass for\nnow I'll add the following if statement\nif Dunder name is equal to a string of\nDunder\nmain if we are running this file\ndirectly I would like to call the main\nfunction to start the program all right\nlet me zoom out this will be the main\nskeletal structure of our program import\nthe random module we have our set of\nwords we'll be importing more from a\nseparate file near the end of this video\nwe have a dictionary where the key is a\nnumber to represent the number of\nincorrect guesses and a tuple to display\nsome asky art we have four functions\ndisplay our man display the hint display\nthe answer and the main function to\ncontain the main body of code all right\nlet's work within our main\nfunction within our main function we\nwill create a variable of answer what is\nthe correct answer that we have to guess\nI will access the random module call the\nmethod of choice then pass in our set of\nwords one of these words will be chosen\nat\nrandom Let's test that I will print our\nanswer just\ntemporarily we should get a random word\nApple Apple\npineapple Apple I guess it really likes\napple for some reason there we go we\nhave orange we are choosing a word at\nrandom we no longer need this print\nstatement looks like everything is\nworking fine now we'll display our\nhint our hint is going to be a list of\nunderscore characters I need the number\nof underscore characters to equal the\nnumber of characters in one of these\nwords that is chosen at random\nso I could multiply my list by the\nlength using the length function of my\nanswer so let's print our\nhint to see what we're working\nwith with my selected word we have how\nmany underscores 1 2 3 4 5 6 7 okay we\nhave a different word 1 2 3 4\n5 that is probably Apple it has five\ncharacters all right so that's our hint\nit's a list of underscore characters\nwhen we guess a letter if it's correct\nwe'll fill in one of the underscores\nwith that correct\ncharacter we need to keep track of the\nnumber of wrong guesses we'll create a\nvariable of wrong guesses set that equal\nto be zero when we start the game we're\ngoing to keep track of all of the\nincorrect guesses that we've made we\nwill create a set of\nguest\nletters for an empty set we'll call the\nset function normally in Python you\ncan't create an empty set with just a\nset of parentheses we have to use the\nset function then I will create a\nBoolean variable of is\nrunning set that to be true while our\ngame is running continue playing once we\nlose or win the game we will switch this\nto be false to exit the game we will\nkeep this as true when we initially run\nthis program after we declare the\nvariables we'll need within the main\nfunction we'll create a loop a while\nloop while is running we don't need to\nsay while is running is equal to true we\ndon't necessarily need to create that\ncomparison we can just say while is\nrunning while this is true continue\ndoing some code so what would we like to\ndo let's call the function of display\nman but we have to pass in the wrong\nnumber of\nguesses call our function of display man\npass in our variable of wrong guesses\nwhen we begin the game we would like to\ndisplay one of these\nimages then we will display our hint\nthen we'll call the function to display\nour\nhint pass in our hint that was the list\nof underscore characters to represent\nthe answer we have to guess we will\ncreate a variable of guess and accept\nsome user\ninput will'll prompt the user to enter a\nletter just in case a user types in a\ncharacter that's\nuppercase let's add the lower method to\nmake it\nlowercase so let's fill in our display\nman function there's not a lot to write\nhere when we call this\nfunction we need to display one of these\nimages based on the wrong number of\nguesses one of these\nKeys within the display man function\nwe'll create a for Loop for every line\nin my hangman art this\ndictionary at the Key of wrong guesses\nthis will be a number 0 through\nsix depending on what this number is I\nwill print each\nline print each line of that\nTuple let's see what we're working with\nwe'll do a test\nrun so we are displaying no person we\ncan't see them for testing purposes I am\ngoing to change wrong guesses to be one\nwe're displaying their head\ntwo displays their body\nthree displays their left arm\nfour is their right\narm five their left leg leg and\nsix is their full body that's when we\nlose now you don't necessarily need to\ndo this but I'll add some text\ndecoration before and\nafter I'll add just a bunch of asterisks\nbefore and\nafter I think that looks better but you\ndo you let's be sure to set wrong gesses\nback to\nzero after we display our hangman we\nhave to display the hint\nwhat's the clue we're trying to solve so\nwe will call our display hint function\nand pass in our list of\nhint So within the display hint function\nlet me zoom out I will print the\nfollowing between each character within\nour hint each underscore we will display\na space\ncharacter strings have a built in join\nmethod we'll call that then pass in our\nhint for each character within our hint\njoin it by an empty\nspace so now when we do a test\nrun we are displaying an underscore to\nrepresent each\ncharacter each is separated with the\nspace while we're here we'll fill in the\ndisplay answer function we just have to\ncopy this line of code from display hint\nreplace hint with answer and that's all\nwe need for the display answer function\nso let me test that real quick after\nplaying our hint temporarily I will\ndisplay our answer just to be sure that\nit's\nworking yep there's our hint and there's\nour answer that we have to guess okay\nlet's delete this line of code we don't\nwant to display the\nanswer I was just testing it so the user\nis going to be able to type in a letter\nto guess such as a for example once we\nguess a letter if that letter is found\nwithin the hint if it's one of these\ncharacters we need to switch that\nunderscore to be one of those characters\nso we'll write the following if\nstatement if our guess is in our\nanswer in is a membership operator if\nthis letter is found within our string\nof answer we're going to create a loop\nwe will create a loop that will iterate\nonce for each character within the\nanswer but we don't know the length of\nthe answer because python we'll choose\nit at random so let's say for every\nindex we can shorten this to I for I in\nrange the length of my\nanswer let's say the word is Apple the\nlength of the word Apple has five\ncharacters this would return five for I\nin range five then we will iterate five\ntimes we'll iterate this Loop once for\nthe number of characters within my\nanswer we'll check during each iteration\nif our answer at index of I during the\nfirst iteration that will be zero then\nthe second iteration it will be one then\ntwo so on and so forth strings are\niterable if our answer at index of I is\nequal to our guess if there's a match if\nwe guess the correct letter then we're\ngoing to take our hint\nat that given index of I and set that\nequal to be our guess looks like this if\nstatement is outside of the while loop\nI'm just going to invent it by one\nsomewhere within\nit okay let's do a test\nrun I'm going to guess the letter\nA yes we have one a let's do something\nthat's probably not in\nhere\nQ okay okay so there were no matches we\ndon't end up doing\nanything so what is this word\nprobably this should be the word\norange so let's guess\no\nr\nn e g all right we know that it works\nwhat if somebody types in some input\nthat's not valid before checking if that\nguess is correct we'll do some input\nvalidation what if the user types in a\nwhole word like\npizza we want the user to only guess a\nsingle character not many\ncharacters We'll add the following line\nif the length of Our Guest that we type\nin does not equal\none then I will print the following\nmessage let's say invalid\ninput then we will use the keyword of\ncontinue to skip this\nLoop\ncontinue okay enter a letter I will type\nthe word\nPizza we get this message of invalid\ninput we skip that Loop's current\niteration I will guess a there are two\nA's I will type banana and again we get\ninvalid input we have to guess one\nletter at a time what if somebody types\nin a number like one we would like to\nprevent\nthat so within this if statement I would\nlike to execute this code if our guess\nis not an alphabetical character I can\nadd the\nfollowing or not take our guess dot use\nthe is Alpha\nmethod if our guess is an alphabetical\ncharacter this returns true if it's not\nan alphabetical character it's false so\nwe are checking if this is not an\nalphabetical character we execute this\ncode let's try this again I will type in\none invalid\ninput\n42069 invalid\ninput let's say we guess the letter A\nwhat if we type in a letter we have\nalready guessed I will guess a\nagain if they already guessed a letter I\ndon't want that to count we'll skip the\ncurrent Loop\niteration I'll add another if\nstatement if our\nguess is\nin our set of guest\nletters then I will print the\nfollowing I'll use an F\nstring our guess\nis\nalready guessed\noh one thing I'm forgetting once we\ncheck that our guest is not within our\nguest characters we'll take our guest\nletters this is a set add the\nguess we're keeping track of the letters\nwe have already\nguessed so I will type let's guess a we\nhave one a if I were to guess a again we\nget that message of a is already guessed\nand then be sure to add continue to skip\nthe current Loop\niteration all right now going down to\nthis if statement if guess is in our\nanswer if we guess a character that's\nincorrect we will take our variable of\nwrong guesses incremented by one wrong\nguesses plus equals 1 let's do a test\nrun I will guess\na there is an a what about Q There is no\nQ we display our dictionary where the\nkey is one we display that asky\nart R is there an R yes there is an\nR this is probably\norange I would like to be sure we\ndisplay the entire person I will guess\nsome wrong\ncharacters we know that that works\nnow we need a win condition if we guess\nall of the correct characters and\ndisplay the entire word we'll work on\nthat\nnext if there are no underscore\ncharacters not in our\nhint this will be true if there are no\nunderscore characters in our hint if\nunderscores not in\nhint we'll call our function of display\nman pass in the wrong number of guesses\ncall the function of display\nanswer pass in our\nanswer we will\nprint the text of you win then set our\nBoolean variable of is running equal to\nbe\nfalse let's win this\ntime I already know that this word is\nprobably pineapple\nlet's guess something\nincorrect there we go we have two wrong\nguesses but we have correctly guessed\nthe word pineapple you win and we exit\nthe program what if we lose I'll add the\nfollowing if statement else if our\nvariable of wrong\nguesses is greater than or equal so the\nlength of our hangman art is a total of\nseven there's seven total\nkeys but once we hit six we lose the\ngame with this LF statement if the\nlength of our hangman\nart the length of our hangman art is\ngoing to be seven so we are going to\nsubtract one for six for a total of\nsix once our wrong guesses is greater\nthan or equal to 6 that means we lose\nthe game we will call the display man\nfunction pass in the wrong number of\nguesses display what the correct answer\nshould have been display answer pass in\nour\nanswer we will\nprint you\nlose then take our Boolean variable of\nis running set that to be false\nI'll guess incorrect\nletters there the word was coconut we\nhave six incorrect guesses we display\nthe entire hangman the correct answer\nwas coconut you\nlose if you would like to import a\nlarger variety of words we could create\na separate python file for that so\nwithin our project folder we will create\na new python file I will name this\npython file\nwords list this will be a python\nfile let's take our set of words cut\nit I'll add a note that these are words\nfor Hangman\ngame Words will be a set I recommend\nlooking online for a very large set of\nwords that we can use then just copy and\npaste them within here while while\nbrowsing online I found an extensive\nlist of animals that I can\nuse so here are all the possible words\nfor my\ngame so from my main python file I have\nto import this module of words\nlist from the module of words\nlist import\nwords and now I have a greater variety\nof words I can use let's run this one\nlast time this word has four letters\nI'll guess the vowels there's an a no E\nI O there is an\nO is it\nGoat\nnope\nt r\nbore all right the word was bore you win\nall right everybody so that is a game of\nhangman that we can create using\npython hey everybody so so we have\nfinally made it to Python objectoriented\nProgramming this is a very important\ntopic in Python an object is a bundle of\nrelated attributes and methods\nattributes are similar to variables to\ndescribe what the object has so look\naround you right now you are surrounded\nby different Real World objects next to\nme I have a phone a cup and a book each\nof these objects can have different\nattributes to represent it for example\nan attribute of the phone next to me\ncould be version number I could set that\nto be 13 is on could be another\nattribute is the phone powered on or not\nthat could be true or false or even a\nprice I have a cup next to me what\nliquid is within the cup in this case\ncoffee what's the temperature of the cup\nis the cup empty is empty or even a book\nWhat's the title of the book that could\nbe a string how many pages does the book\nhave Pages could be another attribute\nnow objects also have the capability to\ndo things they have methods which are\nfunctions that belong to an object\npeople mix up functions and methods all\nthe time they're technically different\neven when teaching I tend to make that\nmistake calling a method a function and\na function of method usually people know\nwhat you're referring to though a method\nis a function that belongs within an\nobject what are some actions these\nobjects can perform with a phone you can\nmake a call or receive a call call turn\nthe phone on or turn the phone off those\ncould all be functions with a cup you\ncould fill the cup drink from the cup or\nempty the cup with a book you can open\nthe book read the book and close the\nbook an object is a bundle of related\nattributes and methods they can\nrepresent real world items to create\nmany objects we'll need to utilize a\nClass A Class is a type of blueprint\nused to design design the structure and\nlayout of an object we need to design\nwhat our objects have their attributes\nand what they can do their methods we\nwill create a class of car we will\ncreate some car\nobjects class\ncar to construct a car object we need a\nspecial type of method called a\nConstructor it works similarly to a\nfunction we will Define a function of\ndouble underscore init meaning\ninitialize double underscore again and\nthen follow this with a set of\nparentheses this is our Constructor\nmethod we need this method in order to\nconstruct objects it's a Dunder method\nDunder meaning double underscore that's\na future topic I don't want you to be\noverloaded with information right now\nall you need to know is that we need\nthis method in order to create objects\nthis method behaves similar to a\nfunction we need to set up the\nparameters\nself is already provided to us self\nmeans this object we're creating right\nnow this car so what are some attributes\nthat a car should have a\nmodel that could be a string like a\nBMW a year that could be a\nnumber a\ncolor let's add a Boolean of four sale\nis the car for sale or not that's true\nor false to assign these attributes\nwe're going to access self self do the\nname of the attribute self. model equals\nthe model we\nreceive these are parameters when we\nreceive the name of a model we will\nassign it to this object let's do this\nwith year self. year equals year self.\ncolor equals color self. for for sale\nequals for sale this is an example of a\nfew attributes that a car might have a\nmodel year color and if it's for sale or\nnot represented by a Boolean now to\nconstruct a car object we need a unique\nname for this car let's just say car one\ncar 1 equals take the name of the class\nadd a set of parentheses to invoke The\nConstructor we're going to do this\nalmost exact L like a function we have\nparameter set up we need to send a\nmatching number of arguments self is\nprovided to us behind the scenes\nautomatically we need a model year color\nand if it's for sale or not so pick a\ncar if you're choosing I'll pick my\nfavorite\ncar the model will be a Mustang for the\nyear I'll go with the recent year of\n2024 a color I'll pick red is the car\nfor sale I like this car so no I will\nset that to be false make sure false is\ncapitalized let's see what happens if I\nattempt to print our car object of car\none what we're given is the memory\naddress of this car object where it's\nlocated but I would like one of the\nattributes located at this memory\naddress instead of printing the object\nitself we're going to access one of the\nattributes found within this car\nwe will follow the name of the car with\na DOT this dot it's known as the\nattribute access operator I would like\nthe model of car\none that would give me\nMustang let's access the year take the\nname of the car car one dot the year\n2024 followed by the color car1\ndocolor red\ncar one is it for sale we'll print\nthat that is\nfalse now let's create a second car\nwe're going to reuse this class to\ncreate a second car we will create Car 2\nequals car we'll pass in some different\narguments a Corvette the year will be\n2025 the color will be blue is this car\nfor sale let's say that is\ntrue instead of accessing car 1's\nattributes let's access car 2's\nattributes that would give us a Corvette\nthe year is 2025 the color is blue for\nsale is set to\ntrue or even a third car car 3 equals a\nnew car we will pass in a\nstring of charger the year\n2026 the color will be yellow is this\ncar for sale let's say that is true as\nwell then I will print car 3's\nattributes the model is charger the year\nis 2026 the color is yellow for sale is\nset to True with classes they can take\nup a lot of space for better\norganization you can place them within a\nnew python file so let's cut our class\nand we will create a new python file\nwithin our project folder file new\npython file the name of this python file\nis going to be all lowercase\ncar then we will paste the class that we\ncut\noriginally class car which has a capital\nc so from our main python file we're\ngoing to import our car file our car\nmodule\nfrom the name of the module car import\nthe name of the class car then when I\nrun this program nothing should change\nwe should still have access to all of\nour car\nobjects you could either keep your\nclasses within your main python file or\nimport them if you would like to\norganize things let's talk about methods\nmethods are actions that our objects can\nperform within our class we will Define\na method of Drive self is going to be\nprovided to us when we invoke the drive\nfunction let's\nprint you drive the car what other\nthings can cars do let's\nstop we will\nprint you stop the\ncar let's take car1 access the drive\nmethod\nyou drive the car car 2 also has a drive\nmethod you drive the car same thing with\ncar 3 you drive the car let's access the\nstop\nmethod car one.\nstop car 2.\nstop and car 3.\nstop these methods are identical for\neach car object instead of printing the\nword car let's insert the model of the\ncar I will convert these print\nstatements to F\nstrings instead of the word car let's\nadd a\nplaceholder let's add\nself.\nmodel self is referring to the object\nwe're currently working with use the\nattribute axis operator followed by the\nname of the attribute let's also do this\nwith the stop method self do\nmodel let's take car one use the drive\nmethod you drive the Mustang car\none.\nstop you drive the Mustang you stop the\nMustang let's do this with Car\n2 you drive the Corvette you stop the\nCorvette car\nthree you drive the charger you stop the\ncharger now now within our F strings\nlet's also insert let's insert the\ncolor I'll add a placeholder self. color\ndo this with stop as\nwell\nself.\ncolor you drive the yellow charger you\nstop the yellow charger car one you\ndrive the red Mustang you stop the red\nMustang card to you drive the blue\nCorvette you stop the blue Corvette\nlet's add one last\nmethod let's create a method to describe\nour car we'll print the details of the\ncar let's print I'll use an F\nstring add three\nplaceholders let's print\nself.y\nyear followed by self.\ncolor then self. model\nwe'll take car 1 use the describe method\nthat we\ncreated describe car 1 car 1 is a 2024\nred Mustang describe Car 2 Car 2 is a\n2025 blue Corvette car 3 is a 2026\nyellow charger all right everybody so\nthose are objects in Python an object is\na bundle of related attributes\nattributes are variables that an object\nhas and methods methods are functions\nthat belong to an object they Define\nwhat this object can do and well\neverybody that is a summary of\nobject-oriented programming using python\nhey everybody today I got to talk about\nclass variables in Python class\nvariables are shared among all instances\nmeaning objects created from a class\ninstance variables are defined in inside\nof the Constructor class variables are\ndefined outside of the Constructor with\nclass variables they allow you to share\ndata among all objects created from the\nclass with instance variables each\nobject has their own version with a\nclass variable all those objects share\none variable here's an example we will\ncreate a class of student we also need a\nConstructor when we create a student\nobject this construct structor is\nautomatically going to be called but we\nneed to pass in some arguments we are\nprovided with self self refers to the\nobject we're currently working with we\nwill set up a name parameter and an age\nparameter we will assign self the object\nwe're currently working with set the\nname attribute to equal the data for the\nname that we receive from this parameter\nand self. AG equals age let's let's\nconstruct two student objects we will\nhave student one equals then call the\nConstructor for\nstudent so type the name of the class\nfollowed by a set of parentheses to\ninvoke it this will automatically call\nThe Constructor but we have to pass in\ndata for the name and the age for the\nname let's pass in SpongeBob because\nbasically everybody in the world knows\nwho SpongeBob is I don't know how old\nSpongeBob is we'll say he's 30 we'll\ncreate another student object which we\nwill refer to as student 2 we will call\nthe Constructor of our student class\npass and data for the name and age\nstudent two will be Patrick Patrick will\nbe\n35 okay let's make sure this works let's\nprint student\n1's name followed by student 1's\nage and we should get SpongeBob and his\nage is 30 let's print student 2's name\nand student 2's age Patrick Patrick is\n35 now we'll create a class variable\nclass variables are defined outside the\nConstructor and they are shared among\nall objects created from that class each\nobject has their own name and age\nproperty these are instance variables\nbut class variables are defined outside\nthe Constructor each object will share\nthis one variable so if we're working\nwith students let's say there is a class\nvariable of class year what is the\ngraduating year of this\nclass\n2024 now let's print student 1's\ngraduating\nyear print student\none.\nclass year\nokay so SpongeBob has a class year of\n2024 that's when he's graduating let's\ncheck student\ntwo Patrick is ages 35 his graduating\nclass year is\n2024 now with class variables you can\naccess them through any one object such\nas student one or student 2 it's good\npractice to access a class variable by\nthe name of the class rather than any\nobject created from the class since\nwe're accessing class year we'll access\nthis class variable by the name of the\nclass of student make sure the S is\ncapital this helps with Clarity and\nreadability if I was looking at this\nprint statement I can tell that class\nyear is a class variable because we're\naccessing it directly from the class and\nnot any instance from this class without\nlooking at this class I can't tell if\nclass year is an instance variable or a\nclass variable but if I access it via\nthe class name it's more explicit so\nit's good practice to access a class\nvariable by the class name itself and\nnot any one instance of this\nclass let's create another class\nvariable we'll create a class variable\nto keep track of how many students we\nhave created this class variable will be\nnum students meaning number of students\nequals z So within our Constructor we\ncan write any code that we want this\ncode will always be executed when we\ninstantiate an object I would like to\ntake our number of students and\nincrement it by one each time we\nconstruct a new student object so\ninstead of using self self refers to the\nobject we're currently working with if\nwe're constructing student one just\nimagine we're replacing self with\nstudent one or student two if we were\nconstructing student two if we're going\nto be modifying a class variable in\nplace of self we'll use the name of the\nclass student access our class of\nstudent get the class variable of number\nof students then I will increment it by\none plus equals\n1 we are constructing two student\nobjects I will\nprint access our class of\nstudent get the number of students and\nprint it we're constructing two student\nobjects if I print the number of\nstudents that we have it should be two\nthen just to be sure that this is\nworking let's construct a third student\nobject student 3 equals student this\nstudent will have a name of Squidward\nSquidward's age will be\n55 now we have three students\nand for good measure let's construct one\nmore student 4 equals we will create a\nnew student with a name of Sandy sy's\nage will be\n27 the number of students is now four\njust as an\nexercise using an FST string let's print\nthe student classes class year as well\nas the number of\nstudents I will print use an fing\nmy\ngraduating class of let's add a\nplaceholder access the class of\nstudent then access the class\nYear my graduating class of\n2024 has then we need the number of\nstudents We'll add a\nplaceholder access the class of\nstudent access the number of students\nhas\nblank\nstudents let's see if this works my\ngraduating class of 2024 has four\nstudents now if I were to change 2024 to\n2025 my graduating class of 2025 has\nfour\nstudents let's print the name of each\nstudent these are instance variables\nstudent one. name\nthen we need Student two three and\nfour my graduating class of 2025 has\nfour students SpongeBob Patrick\nSquidward Sandy all right everybody so\nthose are class variables class\nvariables are shared among all instances\nof a class they are defined outside of\nthe Constructor the benefit is that they\nallow you to share data among all\nobjects created from that class and\nwhile everybody those are class\nvariables in\nPython what is going on everybody so\ntoday I got to talk about inheritance in\nPython inheritance allows a class to\ninherit the attributes and methods from\nanother class much like how a child in\nreal life can inherit traits from A\nparent by having a class inherit\nattributes and methods from another\nclass this helps with code reusability\nand extensibility in this example we're\ngoing to create an animal class the dog\ncat and mouse class will inherit\nattributes and methods from the animal\nclass we will create a class of\nanimal then I will Define The\nConstructor when we construct an animal\nobject let's pass in a name it's not\nrequired but it might be good for this\nexample we will assign the attribute of\nname equal to the name we\nreceive let's also add an attribute of\nis\nalive whenever we create an animal we\nwill set there is alive attribute to be\ntrue and that is a capital\nT all animals can eat Define eat we will\nprint using an F string add a\nplaceholder self. name the name of this\nanimal is eating all animals should be\nable to sleep Define\nsleep print I'll use an FST string\ninsert self. name is sleeping and that\nis all we need for the animal class\nlet's define class dog for a child class\nto inherit the attributes and methods\nfrom another class after the class name\nthat's going to inherit we need to add\nan inheritance list with the set of\nparentheses then list the name of the\nclass we're inheriting from the parent\nthe the dog class is going to inherit\nall of the attributes and methods of its\nparent\nanimal for the time being as a\nplaceholder I'll add pass just to\ndemonstrate this class cat is also going\nto inherit from\nanimal and class Mouse will also inherit\nfrom\nanimal okay I will collapse this for now\nwe'll create a dog object dog equals dog\nthen pass it a name for this dog because\nwe have one parameter set up of\nname this dog will be\nnamed Scooby as in\nScooby-Doo cat equals call the cat\nConstructor this cat will be named\nGarfield and\nmouse mouse equals Mouse our Mouse will\nhave a name of Mickey\neven though there's nothing within this\ndog cat or Mouse class we should still\nhave these attributes and these methods\nif you inherit the animal class you\nshould have a name attribute and is\nalive attribute set to true you can eat\nand you can sleep let's print our dog's\nname dog.\nname\nScooby print dog. is alive\nour dog is alive that is\ntrue let's have our dog object use the\neat\nmethod Scooby is eating and sleep dog.\nsleep Scooby is sleeping let's replace\ndog with\ncat the name of the cat is Garfield\nGarfield is alive Garfield is eating\nGarfield is sleeping and mouse\nreplace any instance of cat with\nmouse our mouse's name is Mickey Mickey\nis alive Mickey is eating Mickey is\nsleeping even though these children\nclasses are empty we're still inheriting\nthese attributes and methods from its\nparent of animal this is convenient\nbecause you don't need to copy and paste\nthese attributes and methods for every\nsingle class for example if I were to\ncopy these attributes and methods and\npaste them\nwell we have a lot more codee to write\nand as a consequence if I need to make a\nchange to one of these methods I would\nhave to do that to every single instance\nof this method for example let's replace\nis sleeping with is asleep well now I\nneed to find every single Sleep Method\nand change it\nmanually it's not too bad if you only\nhave a few classes but imagine if you\nhave hundreds of classes that's going to\ntake a lot of work it's a lot easier to\nwrite the code once and then reuse it\nand I only need to make that change in\none place rather than make that change\nmany times so let's change is sleeping\nto is asleep and see if that works\nagain Mickey is\nasleep let's replace Mouse with\ndog Scooby is asleep not only that but\nwith children classes they can have\ntheir own attributes and methods that\nare different from one\nanother so dogs have all these\nattributes and methods and they can\nspeak let's create a speak method and I\nwill print a unique message for dogs\nwoof cats will also have a speak method\nbut it's going to be\ndifferent cats will\nmeow then for our Mouse class they will\nsqueak\nlet's have our dog\nspeak woof let's have our cat\nspeak meow and our\nMouse\nsqueak all right everybody so that's an\nintroduction to inheritance inheritance\nallows a class to inherit attributes and\nmethods from another class much like in\nreal life a child can inherit traits\nfrom A parent\nthese are also known as sub and super\nclasses which is a topic for another day\ninheritance helps with code reusability\nand extensibility if all of these\nchildren classes inherit these\nattributes and methods from another\nclass we only need to write that code\nonce and not copy it for every single\nclass that needs it we can write and\nchange the code in one place for better\nreusability and extensibility and well\neverybody that is an introduction to\ninheritance in Python\nhey everybody so today we got to talk\nabout both multiple and multi-level\ninheritance we'll begin with multiple\ninheritance that's when a child class\ninherits from more than one parent class\nfor example a class of C can inherit the\ntraits from both class A and B in Python\nyou can have more than one parent\nmulti-level inheritance we'll talk about\nnear the end of this topic so in this\nexample we're going to create two parent\nclasses prey\nI'll write pass for\nnow and\nPredator we'll create a class of\nrabbit a class of\nHawk then class\nfish rabbit Hawk and fish are going to\nbe children classes prey and Predator\nwill be parents\nif one of these classes rabbit hawk or\nfish inherit from prey they get the\nability to flee we will Define a method\nof flee all we'll do in this example is\nprint the following\ntext this animal is fleeing if you're a\npredator you get the method to hunt\nDefine\nhunt we will\nprint this animal is is\nhunting rabbits they will inherit from\nthe prey class they're typically not\nPredators except that one rabbit and\nMonty Python and the Holy Grail that's\nthe exception rabbit will inherit the\nprey class then it gets access to a flea\nmethod Hawks are predators they will\ninherit the Predator class now fish they\nwill hunt smaller fish and flee from\nbigger fish you could consider fish both\nprey and predators so they will inherit\nboth classes we will use multiple\ninheritance they will inherit everything\nfrom the prey class and the Predator\nclass now let's see if this does in fact\nwork now we'll create a rabbit object\nrabbit equals rabbit there are no\nparameter setup we don't need to send\nany arguments to the\nConstructor Hawk equals\nHawk and fish equals\nfish so let's take our rabbit object and\nthey should have a flea method rabbit.\nflea method this animal is fleeing but\nthey do not have a hunt method because\nthey're not\nPredators rabbit object has no attribute\nhunt Hawks can\nhunt they're Predators they inherited\nthat method this animal is hunting but\nthey can't flee they're not prey Hawk\nobject has no attribute flea fish can do\nboth they inherit from the prey class\nand the Predator\nclass fish. flee this animal is fleeing\nfish.\nhunt this animal is hunting children\nclasses can inherit from more than one\nparent which is what we did for fish\nthey are both prey and predators whereas\nin rabbits are just prey Hawks are just\nPredators if you need to inherit from\nmore than one parent you just add that\nadditional class to The Inheritance list\nwith multi-level inheritance a parent\ncan inherit from another parent we will\ncreate a\nclass of\nanimal and for now I'll write pass prey\nand Predator are going to inherit from\nthe animal class so we need to add\nanimal to each inheritance\nlist let's say if you're an animal you\nget a method to eat all animals will eat\nprint\nthis animal is eating and you can sleep\nDefine\nsleep\nprint this animal is\nsleeping so think of rabbit Hawk and\nfish as children classes prey and\nPredator are those class's parents and\nanimal is the grandparent prey and\nPredator will inherit everything that\nthe animal class has rabbit Hawk and\nfish will inherit everything the prey\nand Predator classes have so now our\nrabbit Hawk and fish classes should have\nthe ability to eat and sleep and we'll\ntest that rabbit.\neat this animal is eating rabbit.\nsleep this animal is sleeping let's\ncheck out fish fish. eat this animal is\neating fish. sleep\nthis animal is\nsleeping okay we're going to expand upon\nour example a little bit let me zoom out\neach of our objects is going to have a\nname our rabbit will have a first name\nof bugs Hawk will be Tony as in Tony\nHawk our fish will be\nNemo within our classes we don't have\nany Constructor set up in which class\nshould we assign the name attribute\nlet's do so within our animal\nclass so we will Define a\nConstructor to assign these\nattributes we will receive a\nname we'll assign self. name equals name\nnow with these other classes if you're\nnot assigning any attributes or if you\ndon't need any other initialization\nlogic you don't need a Constructor we'll\nimplicitly use the Constructor we\ninherit from the\nparent let's convert each of these print\nstatements to an F\nstring replace animal with\nself.\nname now let's have our rabbit use the E\nmethod oh we should get rid of this\nthere we go bugs is eating rabbit. sleep\nbugs is sleeping rabbit.\nflee bugs is fleeing let's check out our\nHawk Hawks don't have a flea method\nbecause they're Predators not\nprey let's eat Tony is eating let's\nsleep Tony is sleeping let's\nhunt Tony is hunting let's check our\nfish next our fish can eat Nemo is\neating our fish can\nsleep Nemo is sleeping they can\nflee Nemo is fleeing and\nHunt Nemo is\nhunting okay everybody that is both\nmultiple and multi-level\ninheritance with multiple inheritance a\nchild can inherit from more than one\nparent class you just add each\nadditional class to The Inheritance list\nwith multi-level inheritance a child can\ninherit from a parent which inherits\nfrom another parent Class C can inherit\nfrom B where Class B inherits from a\nthink of C as the child b as the parent\nand a as the grandparent c will have all\nthe attributes and methods even\navailable within the grandparent class\nof a and well everybody that is both\nmultiple and multi-level inheritance in\nPython hey everybody so today I got to\ntalk about the super function in Python\nsuper is a function it's used within a\nchild class to call methods from a\nparent class the child class is the\nsubass the parent class is the super\nclass hence why this function is named\nthe super function using the super\nfunction it allows you to extend the\nfunctionality of the inherited methods\nhere's an example we'll create a few\nshape object objects we'll need to set\nup the classes though we'll have class\nCircle for the time being I'll just\nwrite pass we'll fill it in later class\nsquare and\nclass\ntriangle for each of these classes in\norder to instantiate objects we'll need\na Constructor we will Define our\nConstructor our init\nmethod when creating circles what sorts\nof attributes should a circle have let's\nsay a color what's the color of the\ncircle is it filled or\nnot fil will be another attribute and a\nradius then let's assign\nthese self. color equals the color that\nwe receive\nself. filled equals\nfilled self. rius equals radius\nlet's do this with the square and\nTriangle really I'll just copy our\nConstructor and paste it squares don't\nhave a radius with a square the width\nand the height are the same let's\nreplace radius with width we'll also\nkeep the color and filled attributes\nself. width equals width now with\ntriangles again let's copy our\nConstructor we'll need a width and a\nheight\nself. height equals\nheight so with programming we try not to\nrepeat ourselves if we don't have to\nwhat do all of these classes have in\ncommon they all share the attributes of\ncolor and\nfilled the ways in which they are\ndifferent is that Circle has a radius\nattribute square has a width triangle\nhas a width and a height if we have to\nmake any changes to one of these\nattributes we would have to do so\nmanually\nfor example let's replace filled with is\nfiled now I need to look throughout my\ncode for any instance of filled and\nreplace it with is\nfilled it's a lot of work and I might\nmake a\nmistake such as here and here it's\nbetter to write your code once and try\nand reuse it so that's where inheritance\nand the super function can come in handy\nwe're going to take the attributes of\ncolor and is filled and place it within\na parent class these children classes\nwill inherit those\nattributes so class what do they all\nhave in common they're all shapes class\nshape and for now I'll write pass circle\nis going to inherit from its parent of\nshape that also applies with square and\ntriangle we'll set up a Constructor for\nshape Define\ninit we will pass in the color and is\nfilled\nthen we will assign these\nattributes self. color equals\ncolor self. is filled equals is filled\nwe don't need to manually assign these\nattributes within each of these\nConstructors for the\nchildren instead what we have to do is\nwithin the Constructor for each of these\nchildren classes we have to call the\nConstructor for the parent also known as\nthe super class of shape so we will\neliminate these two lines of\ncode use the super\nfunction dot call The Constructor of the\nparent that is the dunder init method\nbut we need to pass in the color that we\nreceive and is filled this will be a\nBoolean and let's do this with the\nsquare\nclass and the triangle class\nwe still need radius for the circle\nwidth for the square width and height\nfor the triangle we're going to call the\nsuper function to take care of whatever\nattributes all these types of shapes\nhave in common such as color and is\nfilled now let's see if this works let's\nconstruct a few objects we will create a\ncircle named\nCircle call The Constructor for Circle\nwe have to pass in a color a Boolean if\nit's filled or not and a radius so for\nthe color of the circle let's say red\nis filled let's say that is true and a\nradius of five you could even use\nkeyword arguments for better readability\nalthough not necessary but for clarity\nlet's say color equals\nred is filled equals\ntrue radius equals\n5 let's see if this works I will print\nour Circle color\nit is\nred print our colors is filled\nattribute the circle is filled that is\ntrue and the\nradius print\nCircle do radius the radius of the\ncircle is five we could even convert\nthis to an F\nstring I'll add a\nplaceholder then add centim\n5 cm let's construct a square\nobject square equals\nSquare we'll need a color is filled and\na width I'll just copy what we have and\nmake a few changes replace radius with\nwidth the color will be blue is filled\nwill be false the width will be six we\ndon't need a height because squares have\nan even width and height if we ever need\nthe height we can assume it's the same\nas the width in this case six let's\ncheck out our Square square. color\nSquare dot is filled Square do\nwidth our square is blue it's not filled\nin the width is 6\ncm let's create a triangle object\ntriangle equals\ntriangle pass in our\narguments the color will be yellow is\nfilled will be true the width will be\nseven and the height will be\neight let's print our triangle's color\nis it filled it's width and its\nheight our triangle is yellow it's\nfilled in the width is 7 cm the height\nis 8\ncm so that's how you can use the super\nsuper function to reuse the Constructor\nof a parent class we don't need to\nmanually assign each of these attributes\nwithin each of the children classes we\ncan do that in just one place when we\nrefer to Super imagine that we're\nreplacing this with the parent class\nname such as\nshape that might be a good way to think\nof\nit use the Constructor of the parent\nclass of shape and pass these arguments\nin what you could do as well is is\nextend the functionality of a method So\nwithin our shape class let's create a\nmethod of\ndescribe we will describe the attributes\nof this shape we will\nprint use an FST string when we want to\ndescribe our shape let's say it is at a\nplaceholder self. color what is the\ncolor of this shape and is it filled or\nnot and add a placeholder we'll use a\nturn AR operator print\nfilled if self. is filled is true else\nwe will\nprint not\nfilled each of these types of shapes\ncircle square and triangle will have\naccess to a describe\nmethod let's attempt to use\nit take our Circle use the describe\nmethod that's inherited\nit is red and filled\nSquare it is blue and not filled\ntriangle it is yellow and\nfilled so then we also have method\noverwriting what if we create a similar\nmethod of describe within circle square\nand triangle let's do\nthat\nDefine a describe\nmethod within our Circle let's C\ncalculate the area what's the area of\nthe circle I'll use an F string it is a\ncircle with an area of then we'll\ncalculate the area given the\nradius to calculate the area of a circle\nwe can take Pi I'll just say 3.14 just\nto keep it simple times the radius\nsquared self. radius times self.\nrius if I were to call the describe\nmethod will we use the parents version\nof describe or the\nchild so let's take our Circle use the\ndescribe\nmethod the\nresult it is a circle with an area of\n78.5 I should really add cenim squar\nafter\nthat ctim\nsquared this is called method\noverwriting if a child shares a similar\nmethod with a parent you'll use the\nchild's version and not the parents this\nis Method overwriting if you would like\nto extend the functionality of a method\nfrom a parent you can use the super\nfunction not only do I want to use the\ndescribe method of the child I would\nalso like to use the describe method of\nthe parent So within this function we\nwill use the super function access the\ndescribe method of the\nparent what we're doing is extending the\nfunctionality of the descrip\nmethod it is a circle with an area of\n78.5 CM squ the circle is red and it's\nfilled or you could change up the\norder let's use the parent classes\ndescribe method and extend the\nfunctionality with our own print\nstatement it is red and filled it is a\ncircle with an area of 78.5 CM squ let's\nfinish this with the square and triangle\nclasses I'll copy what we have for the\ndescribed method within the circle\nclass but we'll make a different\ncalculation describe the square it is a\nsquare with an area of take self. width\ntimes self.\nwidth the height and the width are going\nto be the same if it's a\nsquare then describe our triangle\nit is a\ntriangle with an area of width time\nheight we have a height in this case\ndivided two we've already described our\nCircle let's describe our\nSquare it is a square with an area of 36\nCM squ it is blue and not filled let's\ndescribe our\ntriangle it is a triangle with an area\nof 28.0 CM squ it is yellow and filled\nall all right everybody that is the\nsuper function it's used in a child\nclass to call the methods from a parent\nclass also known as the super class it\nallows you to extend the functionality\nof the inherited methods within a child\nclass you could use it within a\nConstructor to assign any attributes\nthat all of its siblings have in common\nsuch as color or if that shape is filled\nwhen used within any other method you\ncan extend the functionality of that\nmethod not only are we printing this\nmessage from the parent we're tacking on\nanother print statement before that and\nwell everybody that is the super\nfunction in Python what is going on\neverybody so today I got to talk about\npolymorphism in Python polymorphism is a\nprogramming concept it's a Greek word\nthat means to have many forms or faces\npoly means many morph means form in\nprogramming an object can take one of\nmany forms there's two ways to achieve\npolymorphism one is through inheritance\nan object could be treated of the same\ntype as a parent class there's also duck\ntyping which we'll talk about in the\nnext Topic in this video we're more\nfocused on inheritance what we'll do in\nthis video is create a class of shape\nwe'll write pass as a placeholder we\nwill create a class of circle which will\ninherit from\nshape again writing\npass class Square inherits from from\nshape class\ntriangle which inherits from\nshape if I was to create a circle object\nCircle equals\nCircle our Circle identifies as a circle\nand since our Circle class inherits from\nthe shape class our circle is also\nconsidered a shape it has two forms it's\na circle and it's a shape but our Circle\nisn't a square or a triangle that could\nalso apply to our Square\nclass our square is a square our square\nis also considered a shape but our\nsquare is not a circle or a triangle\nthose are two possible forms for our\nSquare it's a square and a shape so\nlet's say we would like to create a list\nof shapes what do they all have in\ncommon well they're all shapes a\ndescriptive name for this list would be\nshapes equals an empty list I will\ninstantiate a circle object object a\nsquare\nobject and a triangle\nobject our circle is a circle and a\nshape our square is a square and a shape\nour triangle is a triangle and a shape\neach of these objects has two forms or\ntwo faces let's fill in some of these\nclasses let's say that with our shape\nclass we will define an area method\nDefine area I'm going to turn this into\nan abstract method meod I'll just write\npass to work with abstract classes we\nneed to import that from ABC import\nCapital ABC as well as abstract method\npreceding the area method I will add a\ndecorator of abstract method our circle\nsquare and triangle classes they're all\nconsidered shapes they inherit from this\nclass we need to Define an area method\nfor each since they're all considered a\nshape every shape has an area with our\nclass of circle let's define a\nConstructor Define in\nnit we will pass in one argument a\nradius what is the radius of the circle\nassign an attribute of radius equals the\nradius we receive let's do this with\nsquare Define\ninnit one parameter the length of a side\nself. side equal side then\ntriangle Define\ninit we have two parameters base and\nheight self. base equals base self.\nheight equals height all right now let's\nfinish defining these area methods for\neach\nclass we will return\n3.14\ntime self. radius to the^ of\ntwo so given a radius that's how to\ncalculate the area of a circle then with\nour\nSquare Define\narea we will\nreturn\nself do side to the power of\ntwo then with our\ntriangle Define\narea\nreturn self. Bas time self. height time\n0.5 now we have to pass in some\narguments for our Circle we need a\nradius I'll pick four for the square the\nlength of a side will be five then our\ntriangle the base will be six the height\nwill be seven we're going to write a\nloop to iterate through our shapes for\nevery shape in\nshapes then we're going to\nprint for every shape called the area\nmethod and that would give me these\nnumbers if you would like you can format\nthe output I'll just use an F\nstring I'll add cm squared\nmuch better what if we were to create a\nclass that's completely unrelated to\nshapes I will create a class of\npizza I will Define a\nConstructor to construct a pizza object\nwe need a\ntopping and a radius what is the radius\nof the pizza\nself. topping equals\ntopping self. rius equals\nradius within my list of shapes I'll add\na pizza\nobject but I have to pass in a topping\nsuch as\npepperoni and what is the radius of the\npizza let's say 15 cm so our pizza our\npizza class doesn't have an area method\nhere's what happens when I run\nthis we get an attribute error Pizza\nobject has no attribute\narea our pizza object is considered a\npizza but it is not considered a shape\nit does not inherit from the shape class\nat the top here you know what a pizza is\ncircular it could be considered a circle\nso how about this let's take the pizza\nclass it will inherit from the circle\nclass and within our Circle class we're\nalready assigning the radius to the\nradius attribute so instead of doing\nthat here within the Constructor for our\npizza class let's call the super\nConstructor super which refers to the\nparent use its\nConstructor then pass in the radius we\nreceive let's see if this works\nnow that does here is the area of our\npizza our pizza is considered a pizza it\ninherits from the circle class so it's\nalso considered a circle and our Circle\nclass inherits from the shape class our\npizza has three forms our pizza is\nconsidered a pizza it's also considered\na circle and it's also considered a\nshape it would make sense for it to fit\ninto this list of shapes because our\npizza also identifies as a shape so\nthat's polymorphism everybody it's a\nGreek word meaning to have many forms or\nfaces poly meaning many morph meaning\nform in Python there's two ways to\nachieve polymorphism one through\ninheritance an object could be treated\nof the same type as a parent and there's\nalso duck typing which we'll discuss\nmore in the next topic stay tuned for\nthat and well everybody that's\npolymorphism in\nPython hey everybody so today I got to\ntalk about duck typing in Python duck\ntyping is another way to achieve\npolymorphism besides using inheritance\nobjects can be treated as if they're a\ndifferent type as long as they meet the\nminimum necessary at attributes and\nmethods required of them it follows this\nadage if it looks like a duck and quacks\nlike a duck it must be a duck as long as\nan object resembles another it could\nalso be treated of that type so in this\nexample let's create a class of\nanimal we will have a class attribute of\naive if you're an animal you will have\nan attribute of aive you're a living\ncreature let's create a class of dog\nthe dog class will inherit from the\nanimal class they will inherit the alive\nattribute let's also Define a speak\nmethod if you're a dog you gain the\nability to speak we will\nprint\nwoof then we'll create a cat\nclass class cat inherits from animal for\nthe speak method we will print\nmeow let's create a list of animals what\ndo these two classes have in common they\nboth could be considered animals let's\ncreate a list of\nanimals we will construct a dog object\nand a cat\nobject if I was to write a for Loop for\nevery animal in my list of\nanimals have each animal use its speak\nmethod which will result in the dog\ngoing woof the cat going meow they're\nboth speaking\nwhat if we add a class that has nothing\nto do with\nanimals like class\ncar cars will have a horn method that's\nhow they\nspeak when you honk the horn you will\nprint\nhonk within my list of animals let's\ncreate a car object it really doesn't\nbelong in here but let's see what\nhappens we have an attribute error car\nobject has no attribute\nspeak our car object doesn't have the\nminimum necessary attributes and\nmethods when iterating through this list\nof animals we're calling each animal\nspeak method which our car object\ndoesn't have but it does have a horn\nmethod so what if we rename our horn\nmethod as speak maybe it's an AI car or\nsomething well this woodwork the dog\ngoes woof the cat goes meow the car goes\nhonk so our car\nobject it quacks like a duck we could\nconsider it a duck it has the minimum\nnecessary methods to be considered an\nanimal animals inherit this alive\nattribute let's utilize that after the\nanimal\nspeaks let's print their alive\nattribute print my animals Al live\nattribute my car object doesn't have\nthat attribute we get an attribute error\ncar object has no attribute\nalive but if I was to add that\nattribute alive equals\nfalse we have true for the dog it's\nliving true for the cat it's living but\nfalse for the car it's not living it's\nnot a living\ncreature my car meets the minimum\nnecessary requirements to be considered\nan animal if I were to set this to be\nalive well then it would be a living car\nkind of like the movie Cars so with\npython duck typing is another way to\nachieve polymorphism besides using\ninheritance as long as an object has the\nminimum necessary attributes and methods\nyou could treat it as a different type\nof object if it looks like a duck and\nquacks like a duck it must be a duck\nand well everybody that is duck typing\nin\nPython hey what's going on everybody\ntoday I'm going to talk about static\nmethods in Python a static method is a\nmethod that belongs to a class rather\nthan any object from that class any\ninstance instance methods we're already\nfamiliar with them they are methods that\nbelong to individual objects created\nfrom that class they're best for\noperations on instances of that class\nany objects whereas static methods\nthey're best for utility functions\nwithin a class that do not need access\nto class data I'll demonstrate the\ndifferences between an instance method\nand a static method we'll Begin by\ncreating a class of\nemployee we'll need a Constructor let's\ndefine\nthat to create an employee object we'll\nneed a name and a job\nposition we will assign self. name\nequals name\nself.pos equals\nposition we will create an instance\nmethod of get info we will return\nemployee\ninfo we will return an FST string where\nwe will display self.\nname equals\nself.pos get info is an instance method\neach object that we create from this\nclass will have their own get info\nmethod to return the information on that\nobject the object's name and the\nobject's position now we'll create a\nstatic\nmethod to create a static method we need\na decorator of static method static\nmethods are best for General utility\nfunctions within a class we'll Define a\nmethod to check to see if a job a\nposition is valid which we will name is\nvalid\nposition so static methods they don't\nhave self as the first argument we're\nnot working with any objects created\nfrom this class to check to see if a\nposition is valid we will pass in a job\nposition which I will name as\nposition I will create a list of\nvalid\npositions let's assume that our is the\nCrusty Crab what are some valid\npositions a manager is a valid position\na\ncashier a cook then let's say a\njanitor then we will return we'll use a\nmembership\noperator check if position that we\nreceive is in our list of valid\npositions\nwhat we have done is that we have\ncreated a static method we don't need to\nrely on any objects to use this method\nfor\nexample to use a static method we will\nuse the name of the class rather than\nany object that we create from this\nclass such as\nthis we don't need to do\nthat we type the class name followed by\nthe static method is valid position\nthen I did set this up to accept one\nargument let's check to see if a cook is\na valid\nposition then I do need to print this\nwhat is the\noutput a cook is a valid position what\nabout a rocket\nscientist that would probably be s's job\nthat is false a rocket scientist is not\na valid position at the crusty\ncrab this is a static method it belongs\nto the class not any object created from\nthat class now let's create a few\nemployee objects let's say employee 1\nequals a new\nemployee we have to pass in a name and a\njob Eugene will be the first name that's\nMr Krabs he will be a\nmanager employee\n2 equals employee\nSquidward will be a\ncashier employee\n3 equals\nemployee employee 3 will be\nSpongeBob SpongeBob will be a\ncook to call an instance method we have\nto access one of the instances of the\nclass in order to use\nit if I want to check the info on\nemployee 1 I will access that object\nthat\ninstance use the get info method then I\nneed to print\nit take employee one get the info Eugene\nis the manager let's do this with\nemployee 2 and employee\n3 Eugene Mr Krabs is the manager\nSquidward is the cashier SpongeBob is\nthe cook for an instance method you\naccess a object then call the instance\nmethod with the static method you only\nneed to access that class you don't even\nneed to create any objects from that\nclass it's a general utility\nmethod all right everybody those are\nstatic methods they're a method that\nbelongs to a class rather than any\nobjects created from that class they're\nusually used for General utility\nfunctions that do not need access to\nclass data and well everybody those are\nstatic methods in\nPython hey what's going on people so\ntoday I got to talk about class methods\nin Python a class method allows\noperations related to the class itself\nthey take CLS as the first parameter\nwhereas instance methods will take self\nself refers to any object created from\nthat class CLS meaning class refers to\nthe class not any objects here's an\nexample we will create a class of\nstudent\nwe'll need a Constructor to construct\nsome student\nobjects all students will have a name\nand a\nGPA self. name equals name self. GPA\nequals\nGPA we will also create a class variable\nfor this demonstration of count we will\ncount how many students we\ncreate whenever we construct a student\nobject we will access the class of\nstudent take our count variable\nincrement it by one whenever we create a\nstudent object increase count by\none I will create an instance method of\nget\ninfo instance methods have self as the\nfirst parameter we're referring to the\nobject we're currently working with I\nwill return an F string where we will\ndisplay the students name and their GPA\nself.\nname self.\nGPA I'll add a comment that this is an\ninstance\nmethod Now to create a class method to\nwork with class data we will declare a\nclass method with a class method\ndecorator class\nmethod what we're going to do is Define\na method to get the count the class\nvariable of\ncount this method will be called get\ncount rather than self as the first\nparameter we'll be working with a class\nCLS meaning\nclass I will return an F\nstring total number of\nstudents at a\nplaceholder CLS\ncount let's test this to call a class\nmethod you take the name of the class\nfollowed by the class method get count\nand then we do need to print\nthis what is the count of my current\nstudents total number of students is\nzero let's create a few student\nobjects we will create student one\nequals called the student Constructor we\nhave to pass in a name and a GPA let's\nsay that the name is SpongeBob SpongeBob\nhas a GPA of\n3.2 we'll create two more\nstudents student two student three\nstudent two will be\nPatrick Patrick has a\n2.0 then Sandy Sandy Smart in fact she's\na genius she has a perfect\n4.0 now let's count the number of\nstudents total number of students is\nthree when we call this class\nmethod we can access or modify class\ndata this class variable of count rather\nthan using self we use CLS for the\nclass let's create one more class method\nthis time I'll calculate the total GPA\nof all my\nstudents we'll need a class variable to\nhold that data let's say total GPA\nequals\n0 whenever we construct a student object\nwe will access our class of student get\nthe total\nGPA then add plus equals this student's\nGPA that we have just created basically\nspeaking the total GPA this variable is\ngoing to accumulate all of the GPA of\nevery student and store it as a sum to\nfind the average we're going to divide\nit by the count the number of students\nwe'll do that within a class method to\ncreate a class method again we need to\nuse the class method\ndecorator I will Define a method of get\naverage GPA the first parameter is CLS\nfor\nclass I will check if CLS count the\ncount variable of my\nclass is equal to zero that means if we\nhave no students if that's the case if\nthere's no students we're going to\nreturn\nzero because otherwise we're going to\ndivide by zero and we'll get an\nerir else we're going to return an F\nstring follow this formula we're going\nto take the total GPA of my class class.\ntotal GPA divided by class. count the\nnumber of students we have that's how to\ncalculate the average\nGPA after getting the count of the\nnumber of students to access a class\nmethod we take the name of the class\nstudent call the class method get\naverage\nGPA then I will print\nit total number of students is three the\naverage GPA is 3.06\nrepeating after calculating the average\nI'm going to add a format specifier of\n2f just around to two decimal\nplaces and I'll add average GPA coin\nspace then we'll calculate the\naverage all right everybody those are\nclass methods instance methods are best\nfor operations on instances of the class\nany objects static methods are best for\nGeneral utility functions which do not\nneed access to class data class methods\nare best used when we're working with\nclass level data or we require access to\nthe class itself such as when we're\nworking with class variables rather than\nusing self as the first parameter we're\ngoing to use CLS meaning class and well\neverybody those are class methods in\nPython yo what's going on people so\ntoday I'm going to explain magic methods\nin Python magic methods are also known\nas Dunder methods meaning double\nunderscore you typically find these\nwithin classes we're already familiar\nwith one of them our Dunder init method\nwe have double underscores on the left\nand double underscores on the right but\nthere are others I'll cover a few of the\nmore beginner friendly ones so what\nthese methods do is that they're\nautomatically called by using some of\npythons built-in operations such as\nprinting an object seeing if two objects\nare equal greater than or less than when\nwe use many of Python's built-in\noperations with objects we can Define\nand customize the behavior of those\nobjects so in this demonstration I'm\ngoing to create a class of book we will\nconstruct some book objects we will\nDefine a magic method a Dunder method of\ninit to initialize these objects for a\nbook we need a title an\nauthor and the number of pages we'll say\nnum\nPages self. tile equals title\nself.\nauthor equals\nauthor self. number of\npages equals number of pages when we\ncall the class of book we Are\nautomatically calling Dunder init so\nlet's create a book object book one\nequals\nbook we need a title an author and\nnumber of pages so since we're dealing\nwith this topic of magic methods I'll\npick some fantasy related books for my\nfirst book book I'll pick the\nHobbit that's the title the author is\nJRR token the number of pages is\n310 so for my next\nbook book\ntwo I will\npick Harry\nPotter and the philosopher\nstone the author is J K\nrolling the number of pages is\n223 then we have book\nthree for my third book I will pick The\nLion the\nWitch and the\nWardrobe the author is CS\nLewis the number of pages is\n172 okay here are my three free book\nobjects when we call the class of book\nand pass an arguments we will call the\ndunder init method it's a magic method\nit's automatically called behind the\nscenes within this magic method we can\nDefine and customize the behavior of\nobjects and in this example we're just\nassigning the attributes of title author\nand number of pages that is one built-in\noperation of python what would happen if\nI was to print book one directly to the\nconsole\nhere's what happens well we're given a\nmemory address here's book two and book\nthree well we can customize this\nBehavior we will use the dunder string\nmethod double underscore St Str meaning\nstring double underscore again we have\none parameter of self instead of\nreturning a memory address we can\ncustomize this Behavior\nlet's instead return an F\nstring I'll add two placeholders we will\ndisplay self. tile the title of the book\nby self.\nauthor and I'll place the title within\nsingle\nquotes now let's print book one we have\nThe Hobbit by JRR token let's print book\ntwo Harry Potter and the philosopher\nstone by JK Rowling and book three the\nline the witch in The Wardrobe by CS\nLewis so that is thunder string we can\nreturn a string representation of the\nobject when we print it directly to the\nconsole here's another Dunder method we\ncan check to see if two objects are\nequal I will\nprint is book one equal to book\ntwo that gives me\nfalse if they were to have the same\ntitle\nthe same\nauthor and the same number of\npages then python would say they're not\nequal still so let's customize this\nBehavior we will Define a method of\nDunder equals which is just\nEQ for parameters we have self the first\nbook we're examining in this case book\none and other other means the other book\nwe're examining two objects for\nequality to do that we'll see if the\ntitle of two books and the author is the\nsame we'll disregard the number of pages\nyou can have two different versions of\nthe same book they might have different\nfont sizes or the dimensions of the\nphysical Pages might be\ndifferent so we will return a Boolean\nvalue we will examine if self that's the\nfirst book is the title attribute\nequal to our other books title and is\nthe author of the first book self.\nauthor equal to our other books\nauthor if I were to run this we get\nfalse book one does not equal book two\nbut if they have the same title I'm\ngoing to replace these and the same\nauthor then they would be equal and\nwe'll disregard the number of pages\nlet's say that with this version of The\nHobbit they're using a smaller font size\nso there's less\nPages we're using Dunder equals to\ncompare if two objects are\nequal what if I was to print book two is\nless than book\nthree like what does that even mean and\nI'm just going to get rid of these two\nlines type error less than is not\nsupported between instances of book and\nbook so we can't use less than on two\nobjects but we can customize that\nbehavior by using Dunder less than which\nis just LT we're examining one book and\nthe other\nbook self and\nother let's compare the number of pages\nwe'll compare if the pages of book two\nis less than book three we will return a\nBoolean\nvalue is self. number of pages less than\nother number of\npages so now this should not give us an\nerror book two does not have less Pages\nthan book\nthree another would be greater than I'll\njust copy what we have Dunder GT for\ngreater than for our first book of self\nis it greater than the number of pages\nof the other book\nwell that's true the number of pages of\nbook two is greater than book\nthree let's use Thunder add to add the\npages of two books together what would\nhappen if I were to add two books\ntogether book two plus book\n3 well we get a type error unsupported\noperand for book and\nbook well to customize the behavior of\naddition we will Define Dunder add\nwe have self and other for the other\nobject let's add the pages together of\ntwo books maybe we need a summer reading\nlist and we would like to see what the\ntotal number of pages is I will return\nself. number of pages attribute plus our\nother books number of\npages that would give me\n395 that's 223 + 172 heck I'll even put\nthis within an F string cuz why\nnot then I will add the word\nPages 395\nPages within an object we can search for\na keyword within one of the attributes\nso let's find the word the lion within\nbook three to do that I would write a\nstatement like this Lion in book\nthree type error argument of type book\nis not\niterable we will Define Dunder\ncontains besides self we will pass in a\nkeyword a keyword that we're searching\nfor I will return then we'll use the in\nmembership operator is our keyword in\nself. tile I'm looking for the word lion\nthat's going to return true if lion is\nin the title of this book or is our\nkeyword in self. author maybe we're\nsearching for an author let's try that\nagain that returns true lion is in book\nthree however lion is not within book\none that's\nfalse is rolling in book two that's the\nauthor\nthat is true is rolling in book\nthree that is\nfalse that is dund contains we are\nsearching for a keyword in an\nobject now we could search for a key\ngiven an object for book one we'll use\nthe index operator and look up an\nattribute let's get the title of book\none the default behavior is that we get\na type error\nbook object is not\nsubscriptable so to customize this\nBehavior we will use dund get\nitem besides self we have one parameter\nof key we're accessing book attributes\nby indexing with this object return the\nvalue at this key what's that\nattribute we will check if our key that\nwe receive\nis equal to title which it is in this\ncase we will return self. tile What's\nthe title of the\nbook so that would give me The Hobbit\nhere's book two and book\nthree what if the key is\nauthor none we didn't set that up\nyet if key is equal to author\nthen return self.\nauthor the author of book three is CS\nLewis two is JK\nRowling book one is JRR\ntolken what about number of pages num\nPages well we're not set up for that\nyet I'm going to turn this into an El if\nstatement else if\nkey is equal to\nnum\nPages then we will return self.\nnum\nPages the number of pages in book one is\n310 book two is\n223 book three is\n172 what if there is no key otherwise if\nthere is no matching key I'll add an L\nstatement let let's return an F\nstring key\nplaceholder our key that we pass in as\nan argument was not\nfound what do books not have well they\ndon't have audio I guess unless it's an\naudio book is there a key of audio in\nbook three there is not key audio was\nnot found and I'll place that within\nsingle quotes\nmuch better all right everybody so those\nare magic methods also known as Thunder\nmethods meaning double underscore they\nare automatically called by many of\nPython's built-in operations they allow\ndevelopers to define or customize the\nbehavior of objects when we use those\nbuilt-in operations and well everybody\nthose are magic methods in Python hey\neverybody so in today's video I got to\ntalk about the property decorator in\nPython the property decorator allows us\nto Define a method as a property we can\naccess it like it's an attribute one of\nthe benefits is that when Reading\nWriting or deleting attributes we can\nadd additional Logic the property\ndecorator gives us a getter method to\nread a Setter method to write and a\ndeleter method to delete when working\nwith attributes in this example we'll\ncreate a class of\nrectangle we need a Constructor let's\ndefine\nthat when constructing a rectangle\nobject we will need a width and a\nheight we will assign the attribute of\nwidth equal to the width that we receive\nwhen constructing this object self.\nheight equals\nheight let's construct a rectangle\nobject rectangle equals\nrectangle we need to pass in a width and\na height then I will print my rectangles\nwidth rectangle. width and the\nheight rectangle.\nheight with my rectangle the width is\nthree the height is four using the\nproperty decorator when reading these\nattributes of width or height I can\nwrite some additional logic let's say\nthat when accessing the width or the\nheight I would like to display one digit\nafter the decimal then add centimeters\nhere's one way in which I can do that\nfor each of these attributes I'm going\nto create a method we will Define a\nmethod of width no parameters besid self\nfor now I'll write\npass and Define\nheight preceding each of these methods I\nwill use the property\ndecorator so at\nproperty now when accessing the width or\nthe height will be returned with\nwhatever is Within These methods of\nwidth and\nheight but there's one change we're\ngoing to make to these attributes we'll\nset these attributes to be private\nprefix each of these attributes with an\nunderscore this tells you and other\ndevelopers that these attributes they're\nmeant to be protected they're internal\nwe shouldn't access the width or the\nheight directly outside of this class\ntechnically we could I will access the\ninternal version of width and\nheight we get three and four but we do\nhave a warning access to a protected\nmember width of a class that applies to\nheight as well our width and our height\nare only meant to be used inside of this\nclass if we need to get the width and\nthe height we will do so through these\ngetter methods provided by the property\ndecorator so when accessing the width\nlet's return an F\nstring I will access\nself. private width add a format\nspecifier to display one digit after the\ndecimal. 1f followed by centim\nwe'll do this with the height as\nwell we will return self. private\nheight so now when we access the width\nor the\nheight we will do so using these getter\nmethods if I access these private width\nand height attributes\ninstead again they will be three and\nfour it's kind of like their raw these\nattributes are meant to be used\ninternally inside of the class so that\nthat's the point of a getter method we\ncan add additional logic when reading\none of these attributes when we try to\nget them we can also add Setter methods\nif we would like to set or write these\nattributes here's how let's take our\nwidth we will create a decorator of at\nwidth.\nSetter when attempting to set the width\nwe will do so using this method we will\nDefine our method name of width we will\nhave one parameter a new width we don't\nwant the parameter name to be the same\nas the method name that's why we're\nnaming it something\ndifferent when setting the width let's\ncheck to see if the new width is greater\nthan\nzero if so we will take self. private\nwidth equals our new\nwidth else let's print something let's\nprint width must be greater than\nzero and let's do this with the\nheight height. Setter\nDefine height pass in a\nnew height if our new height is greater\nthan zero assign self. private height\nequals the new height else print height\nmust be greater than zero\nbefore printing the width and the height\nlet's take our\nrectangle width set it to be zero then\nsee what\nhappens well we get that message width\nmust be greater than zero if I were to\nset width to be\nfive well that does work our width is\nnow five let's change the\nheight\nrectangle.\nheight I will set this to be Nega 1\nheight must be greater than zero and the\nheight hasn't changed what about\nsix six does\nwork when using these Setter methods we\ncan add additional logic when writing or\nchanging one of these attributes these\nare Setter\nmethods now if you need to delete an\nattribute here's\nhow there is a delete keyword we will\ndelete our rectangle's\nwidth and delete our rectangle's height\nin this series we really won't be using\nthe delete keyword but you should still\nknow that it\nexists so we will create a deleter\nmethod at take one of the attributes in\nthis example with we will create a\ndeleter method the method name will be\nwidth the name of the\nattribute there will be no parameters\nbesid\nself we will delete\nself. private width then let's print\nsomething just to confirm that this was\ndeleted width has been deleted same\nthing applies to\nheight take the attribute of height\nDefine\nheight delete private\nheight height has been\ndeleted when deleting our width or our\nheight we get that confirmation message\nwidth has been deleted and height has\nbeen\ndeleted all right everybody so that is\nthe property decorator we can define a\nmethod as a property meaning it can be\naccessed as if it was an attribute one\nof the benefits is that we can add\nadditional logic when we read write or\ndelete attributes the property decorator\ngives us a getter Setter and deleter\nmethod getter methods to read Setter\nmethods to write and delete methods to\ndelete and well everybody that is the\nproperty decorator in\nPython what is going on everybody so\ntoday I got to talk about decorators in\nPython a decorator is a function that\nextends the behavior of another function\nwithout modifying That Base function we\npass the base function as an argument to\nThe Decorator function for example let's\nsay we have a base function of get ice\ncream and you can pass in a flavor of\nice cream well some people might want\nsprinkles on their ice cream and others\nmay not they might just want plain\nvanilla well we could add sprinkles by\nusing a decorator we're extending the\nbehavior of a function where we get ice\ncream where we're adding sprinkles but\nwe may not want to change the base\nfunction because some people don't like\nsprinkles think of decorators that way\nwe're adding something to a base\nfunction without changing it here's how\nto create a decorator let's start with\nthe base function we will create a\nfunction to get ice cream there will be\nno parameters for now all we're going to\ndo is print the following\nmessage here is your ice cream and for\nfun I'll add an emoji because I like\nemojis I'll add an ice cream Emoji to\ncall this function all I got to do is\ncall the get ice cream\nfunction here is your ice cream here's\nhow to create a\ndecorator a decorator is a function\nwe'll need to define it Define add\nsprinkles our decorator function is\ngoing to have one parameter a function\nbut we'll just rename it to Funk for\nshort we're going to pass a function to\nour decorator\nfunction within our decorator function\nwe will define an inner function of\nwrapper currently there's no parameters\nwe'll set that up\nlater within this wrapper function we\nwill call the function that we receive\nthis\nparameter then we will return our\nwrapper function up until this point\nwe've been returning values but now\nwe're going to return an entire function\nhere's the basic formula to create a\ndecorator to apply a decorator to a base\nfunction preceding that function you're\ngoing to add at the name of The\nDecorator so add sprinkles is a\ndecorator the base function is get ice\ncream\nwithin our decorator how do we want to\nadd sprinkles exactly currently our\ndecorator doesn't do anything here's\nwhat happens we just print here is your\nice cream let's say that before we're\ngiven our ice cream we'll print a\nstatement that we add\nsprinkles within our decorator imagine\nthat we're replacing calling function\nwith this print\nstatement let's create another print\nstatement where we add sprinkles before\nit\nI will print the following\nmessage you add sprinkles and I'll add\nan\nemoji how about\nconfetti that could resemble\nsprinkles okay let's see what\nhappens you add sprinkles here is your\nice\ncream we're decorating our base function\nof get ice cream with a decorator of AD\nsprinkles where're not modifying the\nbase function we're extending it now we\nhave a nested function of wrapper within\nour decorator it is necessary to have\nthis here's why so I'm not going to call\nthe get ice cream function quite yet so\nnothing should\nhappen if I was to remove this\nwrapper well we'll end up calling this\nfunction as soon as we apply The\nDecorator we're not even calling\nfollowing the get ice cream function at\nall we only want to execute this code\nwhen we want ice cream not whenever we\napply The\nDecorator that's why we need that\nwrapper\nfunction we'll get ice cream and add\nsprinkles only when we call that\nfunction then at any point in my program\nif I call the get ice cream\nfunction then we get ice cream with\nsprinkles let's apply more than one\ndecorator we'll create a decorator to\nadd\nfudge Define add\nfudge we have one parameter a function\nwhich we will rename as Funk we need an\ninner rapper\nfunction this is so that we don't call\nthis function when we apply a\ndecorator I will\nprint you add fudge\nclose enough we'll add a bar of\nchocolate then call the base function\nthat we\nreceive then we need to return the\nwrapper\nfunction all right given our base\nfunction we can apply more than one\ndecorator let's say that after adding\nsprinkles we will apply The Decorator\nwhere we add fudge so\nnow we have the following output\nyou add sprinkles you add fudge here is\nyour ice cream so with decorators you\ncan apply more than one decorator to a\nbase\nfunction what if your base function\naccepts Arguments for example when we\nget our ice cream we need to pass in a\nflavor like\nvanilla I will set up one parameter of\nflavor I will convert our print\nstatement to be an F string here is your\nadd a placeholder\nflavor of ice cream let's run this and\nsee what\nhappens all right we have a type\nair our wrapper function isn't set up to\naccept arguments what you'll see within\nwrapper functions is that they'll have\nparameters of\nargs and quars to accept any number of\narguments and keyword\narguments then when you call your base\nfunction in this case get ice cream we\nwe will also set this up to accept any\nnumber of arguments and keyword\narguments let's do that within our ad\nfudge decorator too our wrapper function\nwill accept any number of arguments and\nkeyword arguments same thing goes with\nthe base function and now this should\nwork you add sprinkles you add fudge\nhere is your vanilla ice\ncream or any other flavor of your\nchoosing like\nchocolate you add sprinkles you add\nfudge here is your chocolate ice cream\nall right everybody so those are\ndecorators they're a function that\nextends the behavior of a base function\nin this case get ice cream decorators\nextend a function without modifying it\nif you would like to apply a decorator\nto a function you precede that function\nwhen you define it with at the name of\nThe Decorator and you can apply more\nthan one and well everybody that is an\nintroduction to decorators in Python\nhey everybody so today I got to talk\nabout exception handling in Python an\nexception is an event that interrupts\nthe normal flow of a program there are\nmany different types of exceptions which\ninclude but are not limited to zero\ndivision error exceptions when you\nattempt to divide a number by zero for\nexample 1 divided 0 that would interrupt\nour program we have a zero division\nerror another is a type error that's if\nwe attempt to perform an operation of a\nvalue that's of the wrong data type for\nexample 1 plus a string of\none that would give us a type error\nunsupported operand for INT and string\nvalue errors tend to happen when you\nattempt to typ cast a value of the wrong\ndata type so let's say we attempt to\ntype cast the word Pizza as an\ninteger well Pizza isn't a number we\nhave a value error invalid literal for\nINT base with 10 pizza so exceptions\nwill interrupt our program if they're\nnot handled gracefully and here's how we\ncan do that there's three steps we can\nwrite a try accept and finally block any\ncode that's dangerous where it could\ncause an error you'll place within a tri\nblock for example anytime we accept user\ninput that is considered dangerous code\nbecause a user can type in anything so\nlet's say we have a number number equals\nwe will accept some user input we will\ntell a user to enter a\nnumber then we're going to typ cast it\nas an\ninteger then I'm going to print 1\ndivided by whatever the user types\nin if I were to type in zero we get a\nzero division\nerror if I type in the word Pizza we get\na value error we would like to prevent\nour program from stopping this code is\nconsidered dangerous a user can really\ntype in anything so we're going to\nsurround this code within a tri\nblock we'll type try colon and then\nindent any code underneath it we're\ngoing to try this code if an exception\nhappens we will move on to step two\nsubsequently following the tri block we\nwill add an accept\nblock if we run into one of these\nexceptions we can execute some\nalternative code for example a zero\ndivision error if somebody attempts to\ndivide a number by zero we can take a\ndifferent course of action instead of\nour program crashing and coming to a\nhalt let's\nprint\nyou can't divide by\nzero\nidiot let's attempt to divide by zero\nenter a number zero you can't divide by\nzero idiot we have gracefully handled\nthis exception so now let's say somebody\ntypes in the word Pizza when we're\nasking for a number well we have a value\nerror well we can chain accept blocks if\nwe encounter a value\nerror let's add an accept block for that\naccept value\nerror we're going to\nprint enter only numbers\nplease enter a number I'll type in the\nword Pizza enter only numbers please\nthat's good we're not interrupting our\nprogram now what you may see some people\ndo is they will just catch all\nexceptions\naccept\nexception now this is actually\nconsidered bad practice exception will\ncatch all exceptions however it's too\nbroad of a\nclause it's good practice to tell the\nuser what went wrong exactly if we\nresort to just catching all exceptions\nyou may see an error message such such\nas something went wrong I'm looking at\nyou Microsoft we want to tell the user\nwhat went wrong exactly I would only\ncatch all exceptions as a last resort\nfirst let's try and tell the user what\nwent wrong\nexactly so I'm going to undo all this\ncode if there's an exception that occurs\nit's not a zero division error and it's\nnot a value error then we can add that\ncatch all where we catch any unseen\nexcept\nitions now lastly we have the finally\nblock the finally block always executes\nregardless if there's an exception or\nnot it's usually used for any sort of\ncleanup that you need to do such as if\nyou're handling files you may try and\nopen a file and then you'll want to be\nsure to close that file when you're done\nwith it that would be handled within the\nfinally block but we'll get to file\nhandling pretty soon in the next topic\nso just for the time being I'm going to\nprint\ndo some cleanup\nhere all right let's test this enter a\nnumber I'm going to divide by zero you\ncan't divide by zero and we still\nexecute the finally\nblock enter a number I'll enter in\none 1 / 1 is 1 and we still execute that\nfinally block the finally block will be\nmore useful in future videos all you\nneed to know is that it always executes\nregardless if there's an exception or\nnot all right everybody so that's\nexception handling an exception is an\nevent that interrupts the normal flow of\na program there are many different types\nof exceptions you can always look under\nthe official python documentation for an\nextensive list and well everybody that's\nexception handling in\nPython hey what's going on everybody\ntoday I'm going to show you how we can\nhandle a basic file detection using\npython this topic is the first of many\ninvolving a minseries on file handling\nusing python first we'll need to cover\nfile detection before we read and write\nfiles to work with files using python we\nwill import the OS module OS means\noperating system this module provides a\nway for python programs to interact with\nthe operating system be sure to import\nthe OS module at the top for my\ndemonstration within my project folder\nI'm going to create a new file new file\nI will name this file test and this will\nbe a plain text file\nit will have the file extension of\ntxt this file really doesn't need to say\nanything I'm just going to type I like\npizza because I\ndo the context doesn't matter we're not\ngoing to be reading files in this video\nfor convenience I'm going to assign a\nvariable of file\npath this will be a string for file\ndetection we can either use a relative\nfile path or an absolute file path we'll\ncover relative file paths first these\ntwo files are right next to each other\nmy main python file and my test file if\nwe're using a relative file path I only\nneed the file name including the\nextension test.txt\nwe'll be passing in the string of file\npath as an argument to check to see if\nthis file exists I will use an if\nstatement if access the OS\nmodule access the path there is a\nbuilt-in method of exists\nwe'll pass in our file path as the\nargument this method returns a Boolean\nvalue of true or false if this file\nexists so if this file does exist\ntest.txt let's print the\nfollowing I'll use an F\nstring the\nlocation I'll add a\nplaceholder\nexists I will place my file path within\nthat place holder and I'll surround it\nwith single quotes to make it look nice\nif this method returns true do\nthis else we'll do something else I will\nprint that\nlocation doesn't\nexist all right let's see what\nhappens the location test.txt\nexists now what if I get the extension\nwrong let's say that I'm looking for a\nPDF but it's really a txt\nfile well that location doesn't exist\nyou do have to be sure to get the file\nextension\ncorrect what if this file was in a\nfolder within my python project I will\ncreate a new\ndirectory I will name this directory\nstuff then I will place my test file\nwithin the stuff\nfolder pycharm wants me to refactor my\ncode because the location changed I'm\nnot going to do that I'm going to be\nsure that this box is unchecked and\npress refactor we're using a relative\nfile path that test file is no longer\nnext to my main python file here's what\nhappens that location doesn't\nexist with our relative file path we'll\nhave to navigate to our stuff folder\nthen find the test file so preing this\nfile name I will access the stuff folder\nstuff slash the name of the file\ntest.txt\nand now we can locate that file the\nlocation stuff SL test exists when\nworking with relative file paths you may\nneed to open up a folder then find your\nfile you also could work with absolute\nfile paths so for this demonstration on\nmy desktop I'm going to create a new\nfile\nnew text\ndocument text\ntest if I were to look at the properties\nthis is a txt file a text\ndocument I'm going to copy the\nlocation within my file path I will\npaste it then list the name of the file\ntest.txt\nthis is an absolute file path one\nproblem we're running into when working\nwith strings a backs slash does serve as\nan escape sequence on python thinks\nwe're trying to print a tab character we\ncan solve this with double backs\nslashes or we could use a forward\nslash either one works all right let's\nsee if that file\nexists that\ndoes the location of that absolute file\npath does\nexist if I were to get the extension\nwrong let's say this is a\nPDF well that location doesn't\nexist there is a built-in method of is\nfile to check to see if that file is in\nfact a file and not a directory let's\nadd the\nfollowing after we detect this file\nwe'll write a Nesta if statement if\nos.\npath. is\nfile then passing our file path as an\nargument if this file is in fact a file\nand not a directory\nI will\nprint that is a\nfile the location of that absolute file\npath does exist that is a file what if\nit was a directory a\nfolder I'm going to delete this go to\nnew folder I will name this folder\ntest to check to see if a location is a\ndirectory let's add an LF statement else\nif\nos. paath do iser meaning is\ndirectory this is a method we'll pass in\nour file path if this is a directory a\nfolder I will print that is a\ndirectory let's run this again that\nlocation doesn't exist oh we have to get\nrid of the file\nextension it is not a plain text file\nthe location of that absolute file path\nexists that is a directory a\nfolder all right everybody that's basic\nfile detection in the next few videos\nwe're going to be reading and writing\nfiles and well everybody that is basic\nfile detection using python hey what's\ngoing on everybody in today's video I'm\ngoing to show you how we can write and\noutput files using python we'll cover\nplain text Json and CSV v files but\nwe'll start with plain text because it's\nthe easiest suppose we have some data\nthat we would like to Output I'll create\na variable of text\nData think of a food you like I will\noutput I like\npizza for convenience we'll create a\nvariable a file path this can be a\nrelative file path or an absolute file\npath within this file path we'll need a\nname for this file I will name this\noutput then include the file extension\nthis will be a txt file a plain text\nfile this is a relative file path when I\ngenerate this file it will be within the\nsame project folder as my main python\nfile to create a file we'll write the\nfollowing with open\nfunction pass in our file\npath and a character of w to write as\nfile and for now I'll write pass there's\na few things going on here with is a\nstatement it's used to wrap a block of\ncode to execute if we open a file the\nwidth statement will also close that\nfile when we're done with it so we don't\nneed to manually close files when you\nopen a file it is good practice to close\nit because if you don't you may run into\nunexpected Behavior the width statement\ntakes care of that for you the open\nfunction will return a file object the\nfirst parameter is the file path the\nsecond parameter is the mode w Is Write\nX will also write if this file doesn't\nexist if it already does exist we'll\nreceive an error A is for append to\nappend a file and R is to read but we'll\ntake care of reading in the next video\nso we will stick with W to write a file\nthe open function returns a file object\nthe first argument is the\nfile the second argument is the mode you\ncan set these to be key word arguments\nif it's easier for you to\nread when the open function returns a\nfile object for us we're using the as\nkeyword to give it a name as file it's\nkind of like we're instantiating a file\nobject file equals file file is the name\nof the file object to write to this file\nwe're going to take our file object use\nthe built-in write method then pass in\nour text\nData then when this is done I'm going to\nprint a confirmation\nmessage I'll use an F string let's say\ntext\nfile I'll add our file\npath place it within single\nquotes was created let's see what\nhappens text file output.txt was\ncreated and here's that\nfile I like\npizza we also have the capability\nability of setting an absolute file path\nlet's say I would like to Output this\nfile to my desktop I would just need\nthat location let me just get the\nlocation from one of these folders by\ngoing to\nproperties I will copy this location\nthis is the location to my\ndesktop but for you it's probably going\nto be different then I will paste the\nabsolute file path a backs slash is an\nescape sequence within a string we\neither could use double backs slashes\nor a forward\nslash now let's see if this outputs to\nmy\ndesktop text file here's the file path\nwas created and here's that\nfile it's a plain text file and it\nsays I like\npizza so when working with the file path\nit could be a relative file path or an\nabsolute file path all right now for our\ntext Data there are different modes as\nwell W is for write if we use x we'll\nwrite a file if that file doesn't\nalready exist in this case it does on my\ndesktop we already have a file named\noutput and it's a plain text file so\nwhen I run this with the mod of X we get\na file exists error that file already\nexists we could catch this exception so\nthat our program isn't interrupted I\nwill copy the name of this\nerror I will place my code within a triy\nblock we will try this code and catch\nany\nexceptions except file exists error if\nthis file already exists let's take a\ndifferent course of action let's print\nthat file already\nexists so now when I run this again our\nprogram isn't interrupted we receed this\nmessage that file already exists if I\nwere to delete that\nfile\nbye-bye then run this\nagain well we create a new file text\nfile that absolute file path was created\nand here it is\nagain now for the mode there's also a a\nto append any new data will be append to\nthat\nfile we get I like pizza I like pizza\nwhen a pending data if you would like\nthat data on a new line we can add a new\nline\ncharacter W will overwrite a\nfile so we're back to the\noriginal when a pending either before or\nafter we write our Text data we could\nadd a new line character let's say let's\ndo that before\nnew line plus our text Data here's the\noutput again we're appending not\nwriting I like pizza I like pizza our\nsecond sentence is on a new line let's\nrun this a couple\ntimes we should have several lines\nnow let's work with a collection let's\nsay we have a list of\nemployees we'll pick some employees at\nthe CR\ncrab so we have Eugene I guess he is\ntechnically the manager I don't know if\nthat counts as an\nemployee\nSquidward\nSpongeBob and Patrick Patrick worked at\nthe K Crusty Crab in one episode he\ncounts then we'll to be sure we're\nwriting our\nemployees this is what's going to\nhappen we have a type error write\nargument must be a string not a list in\norder for us to write each item within a\nlist we'll need to iterate over it using\nsome sort of loop we can't write a list\nor any other collection\ndirectly here's what we'll change for\nevery\nemployee in our collection of\nemployees we're iterating over something\nthat is\niterable we will access our file object\nuse the write method then write each\nemployee\nhere's the\nresult we get one long string of each\nitem in this\nlist if you prefer after writing each\nemployee we could add a new line\ncharacter\nafter and here's the\noutput we get each item in our list on a\nnew\nline or rather than a new line character\nwe could use a\nspace this would output all the\nemployees but space them\nout now we'll be outputting a Json file\nin summary a Json file is made of key\nvalue pairs for our data let's say we\nhave a dictionary of\nemployee a dictionary is made of key\nvalue pairs we'll have a name of\nSpongeBob SpongeBob's age will be\n30 his job his position is that he is a\ncook so this is the data I would like to\nOutput I'll keep the file path the same\nwe'll change the file extension\ntojson we will need the help of the Json\nmodule let's be sure to import that\nimport\nJson within our width block we'll make\nthe following change we're going to\naccess our Json\nmodule use the dump method the dump\nmethod will convert our dictionary to a\nJson string to Output it so we have to\npass in our Json data of\nemployee our file as the second\nargument then for a confirmation message\nlet's print Json file was created here's\nthe result Json file at this location\nwas created\nand here's my Json file I'll go to\nproperties we'll confirm it is a Json\nfile it is and I'll open\nit here's the\nresult now you could add indentation\nafter each key value pair here's\nhow after our second argument our file\nwe can pass in a keyword argument of\nindent for each key value Pair by how\nmany spaces do we want to indent each\nlet's say four\nand let's take a\nlook I think that's more readable we're\nindenting each key value Pair by four\nspaces so that is a Json file it's a\ncollection of key value\npairs a dictionary or anything that uses\nkey value pairs is a great candidate to\nbe output to a Json\nfile all right now we're going to work\nwith CSV files CSV means comma separated\nvalues C CSV files are pretty common\nwith a spreadsheet of data like an Excel\nspreadsheet we will create a 2d data\nstructure of\nemployees this will be a list of\nlists let's add\nfour we'll need the help of the CSV\nmodule import\nCSV think of our 2D data structure as a\ntable of rows and columns so for the\nfirst row I will add name comma\nage comma\njob the second row will have a name of\nSpongeBob age 30 job cook for the next\nrow we'll have\nPatrick Patrick will be\n37 what is Patrick's job I don't know\nhe's\nunemployed then we'll have\nSandy Sandy will be\n27 Sandy is a\nscientist okay now with our file path\nthe file extension is going to be a CSV\nfile comma separated values within the\ncontext of our width block we're going\nto create a writer object to write to a\nfile writer equals access the CSV module\nuse the writer method of that module\nthen pass in our\nfile writer is an object it provides\nmethods for writing data to a CSV\nfile and then we'll print a confirmation\nmessage of CSV file was created here's\nthe output\ncurrently we have a CSV file I'll go to\nproperties to confirm it\nwell we have no output we have to\niterate over all the rows in our 2D\ncollection we'll write the following for\nevery Row in our data of\nemployees we'll take our writer object\nuse the right row method and pass in\nthat row that we're iterating\nover now let's take a look\nthat's better however the writer method\ngives us a new line after each\nrow so if we would like to prevent that\nwhen we open this\nfile I will set the keyword argument of\nnew line equal to no characters an empty\nstring let's take a look\nagain yeah that's much better so this is\na CSV file it's made of Comm separated\nvalues all right everybody so that is an\nintroduction to writing files using\npython what's going on everybody today\nI'm going to show you how we can read\nfiles using python we'll cover plain\ntext Json and CSV files in the previous\ntopic we have created some sample files\nto work with here is my plain text\nfile my Json\nfile and my CSV file they're all named\ninput they each have a different file\nextension for convenience I will create\na variable of file\npath we can list a relative file path or\nan absolute file path I'll use an\nabsolute file path I'm going to right\nclick on the file I would like to read\ngo to properties copy the\nlocation then paste it then add the file\nname including the extension input and\nthis is a txt file\nwithin the context of a string backs\nslashes are Escape sequences for special\ncharacters we would either need to use\ndouble back slashes or a forward\nslash here is the absolute file path to\nthe file I would like to\nread to read this file I will add a wi\nblock with is a statement it's going to\nwrap a block of code within a context\nmanager and it'll close a file if we\nopen it it is good practice to to close\na file if you do open it if you don't it\ncan lead to unexpected Behavior we will\nuse the open function the open function\nhas two arguments our file\npath and a\nmode to read a file we'll set the mode\nto be R for\nread the open function is going to\nreturn a file object which we will give\na nickname of\nfile as\nfile when we read our file object it's\ngoing to return one long string which we\nwill assign to a variable named content\ncontent equals file use the read method\nand assign it to this\nvariable then I'm going to print the\ncontent print our content the content of\nthe file here's the\nresult that is the content of my file I\nlike pizza it's really good\nlet's say we can't find this file\nperhaps I forget the file\nextension we'll run into a file not\nfound error this will interrupt our\nprogram we can catch exceptions when\nthey happen any dangerous code that may\ncause an exception we can wrap within a\ntri\nblock if there's an exception we will\ncatch them by stating accept the name of\nthe exception in this case File not\nfound error instead of our program being\ninterrupted let's take a different\ncourse of action we will print that file\nwas not found let's try this\nagain that file was not found at least\nour program isn't being\ninterrupted let's add the file extension\nback what if we don't have permission to\nread this\nfile to demonstrate that I'm going to\nrightclick on that file go to properties\ngo to\nsecurity edit the\npermissions I will deny any sort of\ncontrol I will attempt to read this file\nand we get a permission error permission\ndenied we could handle this exception as\nwell if we encounter a permission error\nI will print the\nfollowing you do not have\npermission to read that file let's run\nthis again you do not have permission to\nread that\nfile those are a few exceptions we can\nhandle in case they appear file not\nfound errors and permission errors let's\nsay we would like to read a Json file we\nwill need the help of the Json module I\nwill import the Json module at the top\nof my\nprogram I need to get the file path of\nthis Json\nfile it's pretty much the same as before\nin this case\nthe file extension is a Json file\nthere's only one change we're going to\nmake we will assign our variable of\ncontent equal to access the Json module\nuse the load method and load our file\nand that should read the contents of my\nfile here's my Json file name SpongeBob\nage3 job\ncook with the data of your Json file you\ncould access a value given a key I will\naccess our content by its key of name\nthat will return the value of\nSpongeBob age\n30\njob\ncook now here's how to read a CSV file\nwe will import the CSV\nmodule the file extension is going to be\nCSV again this is on my desktop in the\nsame location as the previous files my\ncontent will equal access the CSV\nmodule access the reader method and pass\nin our\nfile here's the content currently we're\ngiven a memory\naddress with the CSV file what we need\nto do is read the CSV file line by line\nall of the data is within a collection\nwhich we need to iterate\nover so to do that we're going to create\na for Loop for every line in my content\nI will print each\nline that's much better the format\nresembles a spreadsheet like an Excel\nspreadsheet there's\nrows and\ncolumns to get a specified column we can\naccess an\nindex in my example R line at index of\nzero would give me the First Column name\nSpongeBob Patrick\nSandy the next index would be all the\nages of each person 30 35\n27 and index two would be the job\npositions cook unemployed and\nscientist if you need a specific column\nof data from a CSV file you can use an\nindex as one possibility all right\neverybody so those are a few ways in\nwhich we can read files using\npython hey what's going on everybody so\nin today's video I'm going to show you\nhow we can work with dates and times\nusing python we will import the date\ntime module this allows us to work with\ndates and times using our system clock\nour computer's clock this video serves\nas more of an introduction to create a\ndate object we will assign an object of\ndate let me zoom in a little\nbit we will access the date time module\ncalled the date method within the date\nmethod we will pass in the following\narguments a year of our choosing so for\nme I'll say 2025 a month one corresponds\nto January these are numeric months and\na day a day of the month I will say the\nsecond if I was to print the state\nobject here's what it\noutputs the year is 2025 January 2nd\nto get the date right now let's say\ntoday this will return a date object\nthat represents\ntoday access the date time\nmodule access the class of date then\ncall the today method to return the date\nof today let's print today currently I'm\nrecording this video July 14th\n2024 for me that is the result of my\ntoday object when I print it\nnow we'll work with time I will create a\nTime object access the date time\nmodule call the time method we have to\npass in hours minutes and then seconds\nso for the hour let's say 12 30 and 0\nseconds I will print the current time it\nis\n12:30 now to get the time right now on\nour system clock I will create a\ndatetime object of now equals access the\ndatetime module now within the datetime\nmodule there is a date time class we\nhave to access we will access that I\nknow it looks kind of silly date time.\ndat time do the now method so we're\naccessing the datetime module there's a\nbuilt-in datetime class we have to\naccess then within that class there's a\nnow\nmethod what is the time right now\naccording to my system\nclock this returns a date and a Time\nJuly 14th 2024 it is just after 9:00\na.m. we can format the appearance of the\nstring here's\nhow I'm going to reassign our datetime\nobject of\nnow our datetime object has a string\nformat time method stf time we're going\nto pass in a string and include some\nformat specifiers let's say I would like\nto display the hour first I'm going to\nadd a percent these format specifiers\nyou can find according to the datetime\ndocumentation\nonline so I will display the hours that\nwould be percent\nH percent M for\nminutes percent s for seconds let's see\nwhat we're working with\nwe have the hours the minutes and the\nseconds I will separate each of these\nwith the\ncolon that's\nbetter now I'll add the date I'll start\nwith the month I will add a format\nspecifier of lowercase\nM then the day a format specifier of D\nthen the year format specifier capital Y\nhere's the result\nwe have the month the day and the year\nI'll add a dash to separate\nthese that's better or if you prefer the\nday first rather than the month we can\nswitch this\naround it depends on how you read dates\nin your country now we're going to cover\nan exercise we're going to see if the\ncurrent date and time has passed a\nTarget date and time so we are going to\ncreate a Target date date time\nequals access the date time\nmodule we will create a new date\ntime so now we have to pass in a date\nand a\ntime for my date time let's say it's\nsomething far into the future like the\nyear\n2030 January\n2nd for the hour it will be 12 30 and 1\nsecond I'm going to get the time right\nnow which I will name current date\ntime equals access the date time\nmodule access the date time class call\nthe now method to return the current\ndate and time right\nnow using an if statement I will see if\nour Target date\ntime is less than the current date\ntime have we already passed this date if\nour Target date is less than the current\ndate that means this date and time has\nalready passed I will print the\nfollowing if that's the\ncase Target date has\npassed else I will\nprint Target\ndate has not\npassed here's the result\nTarget date has not passed what if I set\nthe target date to the year\n2020 well then the target date has\npassed so that's how we can check to see\nif a date and time has already passed\nhas it\nelapsed all right everybody so that is\nan introduction to working with dates\nand times using\npython all right everybody so in today's\nvideo we're going to create a working\nalarm clock using python\nfor this project we will need the\nfollowing Imports we will import time\nwe'll be updating our clock every second\nthe time module is going to help us with\nthat as well as import date time the\ndate time module allows us to work with\nstring representations of a time in my\nopinion the easiest way to work with\nsound effects is to actually use pame so\nwe will import pame game now you may\nneed to download the pame package here\nI'm getting a message that there's no\nmodule named pame there might be a link\nto install it even too one way in which\nyou can download the pame package is to\nopen up a terminal then use pip pip is\nPython's package manager pip install py\ngame all right we have our three Imports\nlet's create a function to set a\nalarm we have one parameter and alarm\ntime and for now all right\npass our alarm time parameter is going\nto be a string representation of a time\nin military\ntime I would like to start this program\nif I running my main python file\ndirectly I can add the following if\nstatement if Dunder name is equal to a\nstring of Dunder Main\nif we are running this main python file\ndirectly then we will set the alarm but\nfirst we have to prompt the user what\nthey would like to set the alarm too so\nwe will Define a variable of alarm time\nequals ask for some user input using the\ninput function we will prompt the user\nto enter the alarm time and give a\nformat hours minutes and\nseconds again this is going to be in\nmilitary time once we have our alarm\ntime we will call the set alarm function\nand pass in our alarm\ntime all right we are now within the set\nalarm function when we call this\nfunction let's print the following I'll\nuse an F\nstring alarm set 4 then include the\nalarm\ntime you will need an MP3 file to work\nwith if you don't have available here's\none\nrecommendation you could use YouTube's\naudio library and then search for sound\neffects or some music these audio files\nare only allowed for non-commercial use\noutside of\nYouTube so you can search for a song or\nsome sound effects find one that you\nlike and download\nit once you find a song that you like\nmove it to your project\nfolder now I will create a variable of\nsound file equals this will be a\nrelative or absolute file path my MP3\nfile is right next to my main python\nfile I only need to list the file name I\nnamed mine my music and this is an MP3\nfile I'm going to perform a test run\nwe're not going to play our sound quite\nyet we do have this output that displays\nthat says hello from the pame community\nlet's say I set my alarm to 9:00 a.m.\nthen enter alarm set for 9:00\na.m. if you would like to suppress this\noutput for pame we can navigate to our\nvirtual environment go to library pame\nunderneath this file named Dunder\ninit let's scroll all the way to the\nbottom and we should have this if\nstatement we display the version of P\ngame we're using and a print statement\nof hello from the pame community we\ncould comment this out or even just\ndelete it that is the most simple\nsolution so we shouldn't get that\nmessage\nanymore we're going to create a Boolean\nvariable of is\nrunning is our alarm clock running I\nwill set that to be\ntrue while is running while this is true\nwe will continue the alarm\nclock we need to get the current time\ncurrent\ntime equals we will access the date time\nmodule access the class of date\ntime call the now method to get the time\nand date right now we could method chain\nthe string format method stf\ntime I would like the hours minutes and\nseconds but not the date so we will type\npercent H colon let me zoom out a little\nlittle percent M for minutes and percent\ns for\nseconds we're getting the hours minutes\nand seconds of the date and time right\nnow and storing it within this variable\nof current\ntime then I'm going to print the current\ntime we'll perform a test run however\ncurrently we're within an infinite loop\nat the end of the while loop all set is\nrunning to be false\nokay Enter the alarm time let's say\n10:00\na.m. alarm set for 10:00 a.m. and the\ntime for me right now is 9:42 and 16\nseconds we'll get rid of this line where\nwe set is running to be false instead\nI'm going to access the time module and\ncall the Sleep Method we will pass in a\nnumber of seconds to sleep so 1\nsecond I'll set set the alarm to be 10:\na.m. now the time should update every\nsecond which it\nis however when the current time is\nequal to the alarm time we have to\ntrigger the\nalarm so after printing the current time\nwe will write an if statement to check\nif the current time is equal to the\nalarm\ntime if this is true that let's print\nthe\nfollowing wake\nup and I'll add an emoji cuz it's\nsilly once our alarm triggers we will\nset is running to be false within the if\nstatement let's do a test run we're not\ngoing to play the sound quite\nyet I will set the alarm to\n9:45 and then I'll come back a little\nbit later\nall\nright once the current time matches the\nalarm time we print wake up and set is\nrunning to be false to exit the while\nloop and then subsequently exiting the\nprogram now we need to play an MP3\nfile we will access our package of\npame access the module of\nmixer so mix is a module for loading and\nplaying\nsounds but we have to initialize it but\nwe're going to initialize it with init\nto\ninitialize the initialize method is\nanother way to call the Constructor we\ncan pass in some keyword arguments for\nthe frequency size channels buffer all\nthat but that might be a little too\ncomplicated for us at this level we'll\nuse the default settings by not passing\nin\nanything the next step is to load our\nsound file\naccess the package of pame access the\nmodule of\nmixer access the module of music then\ncall the load method we will load our\nsound\nfile our sound file contains the file\npath to our MP3 file once we load our\nmusic we have to play it py game.\nmixer. music called the play\nMethod our MP3 file is only going to\nplay for a brief second I'll demonstrate\nthat I will set the alarm to\n949 and just give it a few\nseconds our sound file stops playing\nwhen the program terminates what we need\nto do next is continue playing our sound\nfile while that sound file is BU busy we\nwill add a while\nloop\nwhile access pygame do\nmixer. music call the get busy\nmethod this returns a\nBoolean if our song is busy if it's\nstill playing then we will call the time\nmodules Sleep Method and sleep for 1\nsecond once the song finishes\nor we terminate the program prematurely\nthe sound file will no longer be busy so\nthis should be the finished product\nlet's test it I will set the alarm for\n952 and we just have to give it some\ntime\n[Music]\nso uh yeah I'm going to talk about\nmulti-threading in Python today\nmulti-threading is used to perform\nmultiple tasks concurrently think of it\nlike we're multitasking we're performing\na few different actions at once for\nexample I could study and listen to\nmusic and eat something at the same time\nmulti-threading is good for Io bound\ntasks IO meaning input output such as\nreading files or fetching data from an\nAPI things that may take some time to do\nand we don't know when it's going to end\nexactly to use multi-threading we'll\nimport the threading module import\nthreading we access the threading module\nthen call the thread Constructor and\npass in a Target function what we'll do\nfor this demonstration let's say we have\na bunch of chores to do we have to walk\nthe dog get the mail and take out the\ntrash let's define some functions to\nhandle that we have a function to walk\nthe\ndog then I will print the following\nmessage you finish walking the\ndog let's create a function to take out\ntrash then we will\nprint you take out the\ntrash then another function of get mail\nas in get the mail from the\nmailbox then I will\nprint you get the\nmail just to simulate these functions\ntaking an indeterminate amount of time\nI'm going to import the time module to\nhelp\nus let's say walking the dog t takes 8\nseconds I will access the time module\ncall the Sleep Method and pass in 8 for\n8\nseconds when we call the walk dog\nfunction we'll wait around for 8 seconds\nthen finish walking the dog this chore\nwill take quite a bit of time to\ncomplete taking out the trash it's\nfairly\nquick taking out the trash will take 2\nseconds getting the mill will take 4\nseconds let's call these functions and\nsee what happens we will Begin by\nwalking the\ndog I will call the walk dog\nfunction followed by take out trash\nfunction and the get mail\nfunction here's the\nresult we're going to wait around for 8\nseconds until the walk dog function is\ncomplete\nright about\nnow you finish walking the dog you take\nout the\ntrash and you get the\nmail these functions are running on the\nsame thread the main thread our main\nPython program we have to complete these\nchores in order one by one because\nthey're all running on the same thread\ninstead of walking the dog and then when\nwe're done taking out the trash and then\nwhen that's done we get the mail we\ncould accomplish all three tasks at the\nsame\ntime let's say we have a thread object\nwe could say thread one or to be more\ndescriptive let's say we have chore\none let me zoom in a little\nbit chore one is going to contain a\nthread we will access the threading\nmodule call The Constructor for a thread\nwe have to pass in a keyword argument of\nTarget what is the first chore that we\nhave to do let's walk the\ndog to start this thread we will take\nour thread object of chore\none and call the start method to start\nit okay let's do this with chore\n2 access the threading\nmodule call the thread Constructor pass\nin a\nTarget then the name of a function take\nout\ntrash chore two do\nstart and then we have chore\nthree I'll just copy what we have\nbecause I'm feeling\nlazy chore three will be get\nmail here's the result\nnow we finish taking out the trash first\nthen we get the\nmail then we finish walking the dog so\nwe're executing these functions\nconcurrently we're multitasking were\ntaking out the trash and getting the\nmail and walking the dog all at the same\ntime one thing that I did want to point\nout notice how we finished taking out\nthe trash first followed by getting the\nmail then walking the dog these tasks\nfinished in a different order compared\nto when we weren't multi-threading\nthat's because taking out the trash\nfinished first it took 2 seconds getting\nthe male took 4 seconds and walking the\ndog took the longest it took 8 Seconds\npreviously we finished walking the dog\nfirst then took out the trash then got\nthe mail when all the chores are\ncomplete I would like to print a message\nI will print the\nfollowing all\nchores are\ncomplete here's what happens\ncurrently we get this message that all\nchores are complete but we haven't\nfinished any yet we're still completing\nthem there may be at times you want your\nprogram to wait for all threads to\nfinish before we print that confirmation\nmessage that all chores are complete\nwe're going to use the join method take\neach thread use the join\nmethod we'll do this with chore 2 and\nchore 3 as\nwell with the join method we will wait\nfor these threads to finish before\ncontinuing with the rest of the program\nhere's the result now\nyou take out the trash you get the\nmail and you finish walking the dog all\nchores are\ncomplete when constructing a thread\nobject and we have a keyword argument of\nTarget if some of these functions take\nparameters for example with the function\nof walk dog let's say we have a first\nname I will convert this print statement\nto an FST\nstring we will display first for the\nfirst name you finish walking whatever\nyour dog's name\nis so when we're creating a thread and\nthe target is that function and that\nfunction accepts arguments we need one\nmore keyword argument and that is args\nwe will send this function a tuple we\nneed a set of parentheses within this\ntupple we will list our\narguments let's say that our dog's first\nname is\nScooby now since this is a topple if we\nonly have one argument we have to end\nthat tupple with a comma to let python\nknow that this is a tupple here's the\nresult you take out the trash you get\nthe\nmail you finish walking Scooby all\nchores are\ncomplete if we were missing this\ncomma this is what would happen we're no\nlonger passing in a\ntuple what if what if we have multiple\nparameters we have first for first name\nand last for last name you finish\nwalking first and\nlast we have first name of Scooby last\nname of\ndo you take out the trash you get the\nmail you finish walking\nScooby-Doo all chores are\ncomplete all right everybody so that is\nmulti-threading it's used to perform\nmultiple tasks concurrently as if we're\nmultitasking we're executing multiple\nfunctions at the same time\nmulti-threading is good for Io bound\ntasks such as reading files or fetching\ndata from apis and well everybody that\nis an introduction to multi-threading in\nPython hey everybody in this video I'm\ngoing to show you how we can connect to\nan API using python in this\ndemonstration we're going to connect to\nthe poke API to get some information on\na Pokémon of our choosing I'm assuming\nthat most of us are familiar with\nPokémon I thought it'd be a fun example\nso according to this API we can look up\na Pokémon such as\nPikachu then we can get the stats for\nPikachu such as Pikachu's\nname height ID number and all sorts of\nmoves and abilities that a Pikachu may\nhave we will need this URL but we'll\nhandle that\nlater our first step is that we're going\nto import the requests library to make\nan API request however when I run this I\nhave a module not found error no module\nnamed requests requests is one package\nwe'll have to install it's not normally\nincluded with the standard python\ndownload if I was to go to my project\nfolder go to my virtual environment\nlibrary site packages there is no\npackage for request ests we'll have to\ndownload that with py charm and vs code\nthere is a built-in terminal that we can\nuse to download the request package we\ncan use pip pip is a package manager for\npython it's normally included when you\ninstall python we'll type pip install\nrequests it'll take just a\nsecond and now we have that package of\nrequests within our project\nfolder if I run this again\nthat error goes away process finished\nwith exit Code Zero that means there\nwere no\nerrors going back to our Pokemon API we\nwill need this\nURL let me zoom in so you can see\nit I'm going to store that as a base URL\nso it's easier to work\nwith for convenience I'm going to create\na function name get Pokemon\ninfo to get some info on a Pokemon we'll\nhave to pass in the name of a Pokemon\nfor now I'll write\npass outside of this function let's say\nwe have a variable of Pokemon\nname pick a\nPokemon I will pick Pikachu for now then\nI will call the get Pokemon info\nfunction then pass in my Pokémon\nname remember that your parameters can\nbe named different than your arguments\nwhen you send data to a function you can\nrename it to something else\ntemporarily now that we have the name of\nthe Pokémon we would like to look up we\ncan complete the\nURL this will be an F\nstring so with our Pokemon API we have\nthe base URL followed by the word\nPokemon then the name of a\nPokémon so we have the base URL I'll add\na placeholder and insert itward slash\nthe word\nPokémon slash the name of that\nPokémon in this example it's going to be\nPikachu we now have the full\nURL we'll access the request module use\nthe get method and pass in that\nURL this method is going to return a\nresponse object which I will assign to\nresponse response is a response\nobject and I'm just going to print our\nresponse just to see what we're working\nwith here's our response object it has a\nstatus code this is an HTTP status code\nof 200 200 means the response was\nokay here's a few examples of response\ncodes you're probably familiar with 404\nnot\nfound so we are looking for 200 the\nresponse is\nokay after we to get our\nresponse I'll add an if\nstatement if our response our response\nobject does have an attribute of status\ncode to read what the status code is if\nthis status code is equal to 200 that\nmeans the response is okay but for now\nI'll write\npass else I'm going to print the\nfollowing else I'm going to print failed\nto retrieve\ndata and I will print the status code of\nthe response\nobject so temporarily I will print data\nretrieved if it was\nsuccessful I can't spell\nokay we have our data data was\nretrieved if our status code of our\nresponse object is equal to\n200 I will take our response object and\nuse the Json\nmethod our response is a Json format\nusing this method we'll convert it to a\npython dictionary it will consist of key\nvalue pairs much like a Json file but\nI'm going to assign that to a variable\nof Pokemon data so it's easier to work\nwith then I will print our Pokemon data\nso here's the data on Pikachu it's\nreally difficult to read all\nthis you can see some keywords we have\nabilities base experience this is an\nextremely large\ndictionary once we have our dictionary I\nwill return that dictionary of Pokemon\ndata back to the place where we call\nthis\nfunction and I will store that as a\nvariable Pokemon\ninfo equals get Pokemon info pass in a\nPokémon's\nname and now we should have a dictionary\nthat we can work with let me zoom\nout if our dictionary exists we can use\nthe if\nkeyword if Pokemon info if that's true\nif it exists this will be true I will\nprint the following I'll use an F\nstring to access the value of addiction\niary we can access it by a key we'll\ntake our dictionary of Pokémon info\naccess the key of\nname let's see what happens\nexactly we get Pikachu let's get\nPikachu's ID\nnumber we will access the key of ID the\ngiven value is 25 Pikachu is the 25th\nPokémon in the\nfranchise let's get at Pikachu's\nheight Pikachu's height is four I don't\nknow what unit of measurement they use\nin that franchise 4 feet or 4 in I don't\nknow let's get Pikachu's\nweight Pikachu's weight is 60 60 lb 60\nkg I don't know just to make this look\nnice I'm going to add\nName ID\nheight and\nweight that looks much\nbetter let's pick a different Pokemon I\nwill pick my favorite Pokemon of\ntyion failed to retrieve\ndata does that have to be a lowercase\nT yes it does okay so name\ntyan I'll follow the name with the\ncapitalize method to make it\ncapital there we go so my favorite\nPokemon is\ntyan ID is 157 Ty loan's height is 17\nand weight is\n795 all right everybody that is one way\nin which we can connect to an API using\npython also tell me what your favorite\nPokémon is in the comment section down\nbelow all right everybody in today's\nvideo we're going to get started working\nwith with the pi qd5 graphical user\ninterface also known as a guy GUI in\nthis topic we'll be creating a basic\nwindow so let's get started all right\nthe first step is that using pip we're\ngoing to install the pi qt5 package open\nup a terminal both pycharm and vs code\nhave a built-in terminal that you can\nuse we're going to use pip that is\nPython's package manager pip install Pi\nqt5 enter and this might just take a\nsecond once your download has finished\nyou should have a package within your\nsite packages folder named Pi qt5 we can\nwork with it as long as we import\nit first we are going to import the\nmodule of CIS CIS meaning system this\nmodule provides access to variables used\nand maintained by the python interpreter\nthen from the package of Pi qt5 do pay\nattention to the capitalization it's\neasy to mess that up use dot to access\nthe module of\nQT widgets widgets are the building\nblocks of a pi qt5 application they\nbegin with Q that helps distinguish them\nfrom widgets from other libraries they\ntypically begin with Q from this module\nimport the following widgets Q\napplication and Q main window\nhere's some boiler plate code that we\nhave to write in order to get this\napplication up and running first we will\ncreate a class of main window which will\ninherit from the class of qain\nwindow by inheriting from the parent of\nCain window we can customize our own\nWindows to display to the user we will\nneed a Constructor let's define that\nDefine Dunder init there will be no\narguments currently besides self and in\ncase we have to pass any arguments to\nthe parent of Cain window we will access\nthe super class that's the\nparent and call the parents\nConstructor but currently we don't have\nany arguments to pass\nin we will return to this class\nmomentarily let's define a function of\nmain When We Begin this program we will\ncall the function of main to begin the\napplication for now I'll WR\npass if we are running this file\ndirectly let's add the following if\nstatement if Dunder name is equal to a\nstring of Dunder main if we are running\nthis file directly call the main\nfunction in order for us to\nbegin if that's true we will call the\nfunction of main within the main\nfunction we will create an app object\napp equals we will call the Constructor\nfor Q application that class but there\none argument that we have to pass in we\nwill access our module of CIS do\nargv meaning arguments so by passing in\nthis argument this allows Pi QT to\nprocess any command line arguments\nintended for it that's if we use command\nprompt or terminal we won't be doing\nthat in this series but you may someday\nin the future it would be a good idea\nfor us to Future proof our code\notherwise you may see people pass in an\nempty list so we now have an app object\nnext we will create a window object\nwindow equals call The Constructor for\nour class of main window currently we\ndon't have any arguments to pass in we\nhave an app object and a window object\nby calling their respective Constructors\nnow if I run this program currently our\nwindow is not going to show the default\nbehavior for a window is to hide it in\norder to show our window we will access\nour window call the show method to show\nit it's only going to appear for a brief\nsecond when I run the\nscript I don't know if you saw it but it\npops up for a brief\nsecond we need to ensure that the window\nstays until we interact with it or close\nit after we show our window we will\naccess our module of\nCIS call the exit method the exit method\nensures a clean exit of our program\nwithin our exit method we will pass in\nas an argument our app object our app\nobject has a built-in method of EX\necore and this is a method so we can\ncall it this is the execute method there\nisn't underscore character after exec\nfor execute that distinguishes it from\nthe execute method there is a separate\nversion of this execute function that\nends with an underscore our apps execute\nmethod it waits around for user input\nand handles events such as if we click\nbuttons press keys or close the window\nnow that we're calling this method when\nwe run our program this window should\nstay in place we can maximize it\nminimize it or close\nit that's all the boiler plate code that\nwe need for a basic window let's\ncustomize it within our Constructor for\nour main window what would we like to\nadd let's set the title for our window\nself. set window title method we will\npass in a string think of a title for\nyour\nprogram my cool first GUI\ngooey and now we have a new title my\ncool first gooey graphical user\ninterface when this window appears we\ncan set the geometry of where the window\nappears and the size of the window\naccess self do set geometry\nmethod there's four\narguments X and Y for the X and Y\ncoordinates a width of the window and a\nheight of the window if I were to set X\nand Y to be both zero this window will\nappear in the top left corner of my\nscreen I'll also need a width and a\nheight let's say I don't\nknow 5 00 for\neach so now my window is now a square\nthe width and the height are both the\nsame they're both 500 the width is 500\npixels the height is 500 pixels with the\nfirst two arguments we set the initial\nplacement of our window to be where X is\nz and y is zero that corresponds to the\ntop left corner if I set the first\nargument to be\n100 well then the window is going to\nmove to the right by 100 pixels\nthere are ways to Center your window in\nthe very center of your screen but\nthat's a little too advanced for us\nright now for the time being I'll pick\nsomething roughly near the middle of my\nscreen 700 pixels on the x axis and 300\non the Y AIS it should appear roughly in\nthe middle but feel free to adjust these\nvalues based on the size of your screen\nwe'll discuss layouts in the future now\nif you would like a window icon we can\nchange that you will need a image to\nwork with So within my project\nfolder I have a profile picture for my\nYouTube channel I'll set that to be the\nicon find an image that you like then\nadd it to your project\nfolder in order to work with icons we'll\nneed to make the following import from\nPI\nqt5 that's the package access the module\nof QT\nGUI import the following\nQ icon now we can work with\nicons after we set the geometry for our\nwindow access this object of self this\nmain window call the method of set\nwindow\nicon within this method we will call the\nConstructor of Q icon we'll pass in\neither a relative file path or an\nabsolute file path my main python file\nis right next to my profile picture that\nimage I only need the file name within a\nstring so the name of my image it's\ngoing to be different for you depending\non what the name of your image is my\nimage is named profile uncore pick and\nthis image is a JPEG\njpg then when I run this\nprogram I'm using my image as an icon\nfor this\nwindow all right everybody that is how\nto create a window using pi qt5 and in\nthe next topic we will be creating some\nlabels what's up everybody in today's\ntopic we're going to create some labels\nusing pi qt5 we will import the widget\nof Q\nlabel this label class is used to create\nlabel widgets that can display text or\nimages within the Constructor of our\nmain window this is where we'll create a\nlabel we will declare a label object lab\nequals call The Constructor for Q\nlabel for the text of the label we'll\npass in a string that's the first\nargument let's say the word\nhello for the second argument we will\npass in self self refers to this window\nobject that we're calling and\ninstantiating all right let's do a test\nrun here is my label although you can\nbarely see it the font is really small\nbut it does say\nhello let's set the font we'll need\nanother\nimport from PI\nqt5 do\nQT\nGUI import Q\nfont by importing the Q font class we\ncan begin working with\nfonts we're going to take our label call\nthe set font method\nwithin this method we will call the\nConstructor of Q\nfont pick a font that you would like I\nwill pick aial but feel free to choose\nreally any font then the second argument\nis a font size I'll pick\n30 let's do another test\nrun that's much better let's increase\nthis to 40 for the font\nsize now I'm going to set the geometry\nof this label such as the positioning\nand the width and the\nheight let's take our\nlabel use the set geometry method we\nwill pass in X and Y coordinates 0 0\ncorresponds to the top left corner for\nthe width let's set the width to be 500\nand the height to be\n100 that's better I'll cover more\nadvanced alignments\nmomentarily let's add a style sheet\nsheet pqt does have styles that are very\nsimilar to CSS if you would like to\nlearn more about CSS I do have a full\ncourse on that topic we will add some\nCSS like Properties by accessing our\nlabel object call the method of set\nstyle\nsheet within this method we will pass in\nsome CSS like properties such as a\ncolor for the color let's say blue\nthese CSS like properties should end\nwith a\nsemicolon and now the font color is blue\nyou could also use RGB values or heximal\nvalues you could always look up a Color\nPicker and pick a very specific\ncolor let's pick something\ngreen we can either use RGB values or\nheximal values so I will copy this value\nso I will paste that heximal value and\nnow we have a very specific shade of\ngreen but I think I'll go with something\ndark such as\nthat so this color is going to be a dark\ngray\ncolor we could set a background color\nthis will be a new\nstring background Das color\nand I will pick a new\ncolor I will pick something\nblue that's a decent\ncolor we have a blue background with\ndark gray\ntext we can set the font to be bold font\nweight will be\nbold so the font is now bold\nthe font style can be italic font\nstyle\nitalic so our font is italic and we can\nunderline text\ndecoration\nunderline the text on our label is now\nunderlined let's work on positioning\nnext currently my text is left Justified\nand to the center\nvertically to work with alignments we\nneed this import from PI\nqt5 QT\ncore import\nQT the class of QT is used for\nalignments to Center the text of our\nlabel at the top vertically we will take\nour label use the set alignment method\nthen pass in a flag access the class of\nqot access the flag of a line\ntop this will align our text vertically\nto the\ntop so then our text is aligned\nvertically to the top rather than the\ncenter for the\nbottom we will use the flag of a line\nbottom\nwe will align vertically on the\nbottom the text is now on the\nbottom to align vertically in the\ncenter align V\nCenter this will be vertically\nCenter which it was\noriginally now for horizontal alignment\nwe can add the\nfollowing okay to align right we will\npass in a flag of align\nright\nhorizontally align\nright the text is now all the way to the\nright for the\ncenter a line H H for\nhorizontal\nCenter the text is now horizontally\naligned in the center\ncenter for the\nleft Aline\nleft the text will be aligned to the\nleft we could combine both horizontal\nand vertical\npositioning here's how take our label\ncall the set alignment method\nwe will align horizontally in the center\nfollow this with the or bitwise operator\nwhich is a vertical bar this allows us\nto combine Flags we will align\nhorizontally in the center then\nvertically let's align to the\ntop so our text should be aligned\nhorizontally we're aligned in the center\nand vertically we're aligned to the\ntop align bottom vertically\nhorizontally we are in the center\nvertically we're aligned on the bottom\nthen for the very center of our\nlabel a line horizontal\nCenter and a line vertical\nCenter our text will now be in the very\nmiddle of our label both horizontally\nand\nvertically now there is a shortcut for\nthe very center we don't need both of\nthese\nflags the shortcut is the following set\nalignment align\nCenter that will align the text both\nhorizontally and\nvertically so that is Center and Center\nall right everybody so that is an\nintroduction to labels in pi\nqt5 what is going on everybody in\ntoday's video I'm going to show you how\nwe can add images to Pi qt5 you will\nneed an image to work with me I'll be\nusing my profile picture for my YouTube\nchannel feel free to take a moment to\nfind a picture of your own maybe a\nprofile picture of yourself we will need\nthe following Imports Q label the most\ncommon and straightforward approach to\ndisplaying an image is to add an image\nto a label in order to display it then\nwe will need this other import from PI\nqt5 that's the package then the module\nof QT GUI import the class of\nqix map the class of qix map it's used\nfor handling images and provides\nfunctionality for loading manipulating\nand displaying images we will load our\nimage to a q piix map object then add\nthis Q pix map object to a label in\norder to display it\nwithin our Constructor of our main\nwindow we will create a label label\nequals call the Q label\nConstructor then pass in self self\nrefers to the window object our window\nwill be the parent widget our label\nwidget is one of its children once we\nhave our label we'll set the geometry of\nthe label label. set geometry method we\nhave to pass in X and Y coordinates and\nas well as a width and height of the\nlabel for the coordinates let's say zero\nfor each the label will appear in the\ntop left corner for the width 250 is\ngood and the height 250 as\nwell here's my window the label is going\nto appear in the top left corner however\nthere's nothing added to the label\nthat's where the widget of Q pix map\ncomes in we will create a PIX map object\nequals call the Constructor of Q pix map\nwe have to pass in a string that\nrepresents a relative file path or an\nabsolute file path to our image my image\nis right next to my main python file I\njust need the file name the name of my\nimage is profile uncore pick and this is\na\nJPEG when I run this we don't see our\nimage we have to add the Pix map object\nto the label we have to set it here's\nhow take take our label use the set\npixmap method and pass in our pixmap\nobject and now we can see the image\nhowever the image doesn't scale\naccording to the size of the label to\nenable that we have to call the\nfollowing\nmethod take our label call the set\nscaled contents method then pass in true\nour image will now scale to the size of\nthe label\nif we were to change the size of the\nlabel let's say it's 100\npixels it will scale down even further\nor I could even increase it to\n500 so now the image takes up the entire\nwidth and height of the\nwindow let's set that back to\n250 there's a few tricks that we can do\nwith positioning of the image we've set\nour label with an image we can move the\nlabel within the confines of the window\ncurrently it's set in the top left\ncorner but here's a few tricks that we\ncan do with positioning with our label\nwe will set the geometry\nagain so the top left corner is 0 0 for\nthe\ncoordinates we could pass in 250 and 250\nagain for the width and the height but\nif we were to change that here when we\ninitially create this label we would\nhave to manually change that here as\nwell I think it would be better if we\nwere to get the current width and height\nof the label take our label call the\nwidth method to get the width same thing\napplies with the height label. height\nmethod that should work\nfine let's say we would like to take our\nimage and move it to the right side of\nour window here's\nhow with the x coordinate we're going to\naccess self that means our window called\nthe width\nmethod here's what we have currently we\ncan't see the\nlabel it was placed outside of the\nconfines of the\nwindow let's subtract our labels\nwith label.\nwidth I'll put each of these arguments\non a new line just to help with\nreadability so now our image is Right\nJustified within our\nwindow for the bottom right corner we\nwill take the second\nargument access self. height that's the\nheight of the window that we're\ninstantiating minus our label's\nheight and now our image is in the\nbottom right\ncorner for the bottom left corner we\nwill set X to be\nzero now here's the tricky part to have\nour image placed in the center center of\nour window we will take the width of the\nwindow minus the width of the label / by\ntwo for integer division we'll be using\ndouble forward slashes we need our\npixels to be whole integers so we're\ngoing to be using integer Division and\nnot standard division we will round to\nthe nearest whole pixel then we will do\nthis with the height as\nwell and now our image should be in the\nmiddle of our window\nall right everybody and that is how to\nadd an image to your Pi qt5\napplication well hello again friends\ntoday I got to explain layouts in pqt 5\nwe'll discuss vertical horizontal and\ngrid layouts but we'll need the\nfollowing Imports we will be importing Q\nlabel Q\nwidget I'm going to put these Imports on\na new line just because we have a\nlot QV for vertical box\nlayout and I'm just going to copy\nthis qh for horizontal box\nlayout and Q grid layout let's be sure\nthat we have all these\nImports these classes deal with layout\nmanagers they aren't widgets we'll be\nwriting a majority of the code within\nour main window class however it can get\ndisorganized really quick what will help\nkeep things organized is if we declare a\nseparate function within the main window\nclass this is a common practice that\nyou'll see within Pi qt5 there will be a\nfunction for innit for initialize UI for\nuser interface no other arguments\nbesides self and for now I'll write\npass when we construct a window object\nwe will call Self do init UI to\ninitialize the user interface so\nanything that deals with the user\ninterface we're going to be writing\nwithin this function to help keep our\ncode clean and organized normally we\ncan't add a layout manager to a main\nwindow object main window widgets have a\nspecific design and layout structure\nthat's normally incompatible with layout\nmanagers what we would need to do is\ncreate a generic widget add a layout\nmanager to that widget then add that\nwidget to the main window in order to\ndisplay the layout within our method to\ninitialize our user interface we are\ngoing to create what is called a\ncentral widget called The Constructor\nfor Q\nwidget this is a generic widget then we\nwill take self self is our\nwindow call the\nset Central widget method then pass in\nour Central\nwidget when working with layout managers\nwe will add that layout manager to the\ncentral Widget the central widget is\nthen added to the main\nwindow so currently this is what we're\nworking with we will need some widgets\nto organize because right now it's\nempty let's create a few\nlabels let's say label one equals Q\nlabel I'll pass in some text number one\nokay let's create four additional labels\n1 through five\nI'll just do some copying and\npasting all of our labels are\noverlapping let's add some colors let's\ntake label one use the set stylesheet\nmethod then pass in a background color\nas a CSS\nproperty\nbackground-color will be\nred let copy this line of code paste it\nfour additional times for labels 1\nthrough\n5 we'll have a label that is yellow\nanother that is\ngreen\nblue then\npurple here are the labels they're all\noverlapping one another that's why we\ncan only see\nfive this is where a layout manager\ncomes in\nwe'll start with the vertical layout we\nwill create a vertical layout manager\nwhich we will name\nvbx vbox equals call The Constructor for\nQV box layout we are calling the\nConstructor we will take our layout\nmanager call the add widget method then\npass in a widget such as label one near\nthe top\nhere we'll do this with the other labels\nwe'll do some copying and\npasting add label two 3 four and\nfive there's one last\nstep we will take our Central widget\nwhich we have declared at the top of\nthis\nfunction call the set layout\nmethod we are setting the layout of our\nCentral\nwidget with the layout manager a vbx\nvertical box here's the new\nlayout all of our labels all of our\nwidgets are arranged vertically for\nhorizontal we will use qh box layout for\nhorizontal replace any instance of vbx\nwith\nhbox for the set layout method pass in\nhbox this allows for a horizontal layout\nthen we have\ngrid Q grid layout replace hbox with\ngrid so what we have to do with grids\nafter adding a widget we have to specify\na row and column with separate arguments\nthe row and column both begin with zero\nso Row one column 1 would be row0 column\n0 for label two let's say row 0 column 1\nLabel 3 will be Row 1 column\n0 four will be Row one column 1 then\nfive row one column 2 so here's the\ncurrent\nlayout we have labels 1 and two both\nwithin row zero labels 3 four and 5 are\nboth within the second row let's say\nlabel five is Row 2 column 2\nthat would result with something like\nthis we have label five which is purple\nin row two column 2 so it depends on how\nyou want to arrange your widgets all\nright everybody so that is an\nintroduction to layout managers in pi\nqt5 today I'm going to show you how we\ncan create push button widgets in pi qt5\nto begin we will need the following\nImports Q push button as well as Q label\nfor this demonstration\nduring the previous topic on layout\nmanagers within our Constructor for our\nmain window we defined a method of\ninitialize UI for user interface let's\nbe sure that we're calling that method\nwithin our Constructor within this\nmethod is where we'll be handling\nmanaging the user interface to create a\nbutton we will call the push button\nConstructor normally when creating\nwidgets we would want to prefix that\nwidget with self then follow the name of\nthe widget for example button however\nI'm going to demonstrate what happens\nwhen we don't do that because without\nself we're declaring a local variable\nwe'll get back to that in just a moment\nlet's create a local button object by\ncalling the Q push button\nConstructor we can pass in some text\nsuch as click\nme we will add this to our window self\nself refers to our window\nobject let's set the geometry of the\nbutton button. set geometry\nwe could use a layout manager but I do\nwant to keep this lesson as simple as\npossible so let's pick some coordinates\nI've picked the following for the X and\nY coordinates 150 and 200 for the width\n200 and the height 100 here is our\nbutton currently the font is a little\nsmall so I'm going to set the\nstylesheet set style\nsheet I'll just increase the font size\nwe could could use Q font but that might\nbe overkill for this\ndemonstration let's just say the font\nsize will be 30\npixels now we can read it so we have our\nbutton we're going to be connecting our\nbutton to a function but we need to\nDefine that function we'll do so within\nour main window\nclass so we will Define a function of on\nclick there are no parameters besid self\nwhen we click on the button but what\nwould we like to do let's print a test\nmessage let's say button clicked and\nthat's\nit when we click this button nothing\nhappens we have to set up a signal and\nslot for the button here's\nhow we will take our button dot list a\nsignal a signal is emitted when a widget\nis interacted with we have to list the\ntype of signal so the signal we're\nlooking for is\nclicked when we click this button we\nwill perform a slot an action we will\ntake the signal of clicked connect it to\na slot connect is a\nmethod the slot will be self dot the\nname of the method on\nclick when we press this button we\nperform this slot this method of onclick\neach time I press the button we perform\nthat\naction not only should we print a\nmessage for this demonstration let's set\nthe text of the\nbutton so we have\nbutton. set text let's change the text\nto\nclicked so this actually isn't going to\nwork because we're not prefixing self\nlet me demonstrate what happens\nwe print button clicked but then we have\na problem we have an exit code our\nprogram was\ninterrupted button is considered local\nto our initializer method our onclick\nfunction doesn't recognize what our\nbutton is that's why we're going to\nprefix our button with self so it\nbelongs to the class of main window and\nnot this method any instance of button\nwe're going to prefix with\nself and now this should work the text\non my button is going to change when I\nclick it\nclicked you don't have to do this but\nwith my personal coding style whenever I\ncreate a variable or an object within a\nclass I like to do so within the\nConstructor even py charm is giving me a\nwarning when we declare this button I'm\ngoing to move it to the\nConstructor and let me just rearrange\neverything\nself. button equals a q push button\nwidget within my initializer method\nthat's when I like to rearrange\neverything and style it we can also\ndisable buttons when we click on them to\ndo that we will take self. button call\nthe set disabled method then pass and\ntrue when I click the button it will be\ndisabled I can no longer click on\nit for the last part of this\ndemonstration when we click on our\nbutton let's change the text of a\nlabel let's declare self. label within\nour Constructor equals a q\nlabel the text of the label will be\nhello we will add this label to self the\nwindow when we set up the user interface\nlet's set the geometry of the\nlabel self. label do set\ngeometry we could use a layout manager\nbut just to keep things simple I'm going\nto set some coordinates 150 for X 300\nfor y the width will be 200 and the\nheight\n100 let's change the font\nsize self.\nlabel do set style\nsheet I will set the font size to be 30\nmaybe\n50 better all right within our onclick\nfunction let's instead take self.\nlabel. set text method then pass in some\nnew text to display we're saying hello\nbut when we click the button let's say\ngoodbye so now when I click the button\nwe will change the text on a separate\nwidget my label which now says\ngoodbye so with buttons you need a\nsignal that's connected to a slot the\nsignal is an event the slot is an action\nthat this widget is going to take when\nthe signal\noccurs and well everybody that is an\nintroduction to push buttons in pi\nqt5 hey uh so today I got to explain\ncheckboxes in pqt 5 to work with\ncheckboxes we will need the following\nimport from the module of widgets from\nPI qt5 import Q check\nbox to work with different states we\nwill also need the following import from\nPI\nqt5 do QT\ncore import QT this module of QT core it\ncontains non- classes relevant to Pi\nqt5 applications so be sure that you get\nthe this import as well to create a\ncheckbox I will create this within the\nConstructor of my main window we will\ncreate a checkbox with self the name of\nthe checkbox which I will name\ncheckbox\nequals call The Constructor of the Q\ncheckbox class the first argument is\ngoing to be the text of the checkbox\nwhat do you want the checkbox to say\nlet's ask do you like food\nthe second argument is the parent widget\nwhere we will be adding this checkbox\nlet's say self self will apply to this\nwindow we could use a layout manager but\nI want to keep this lesson as simple as\npossible we're just going to focus on\ncheckboxes and their\nfunctionality so we should have a\ncheckbox however we can barely see it\nthe font is really small I have a method\nto initialize the user\ninterface that's where we'll set the\nstylesheet and the g ometry of our\ncheckbox let's set the stylesheet self\ndo the name of the checkbox\ncheckbox do set Styles sheet method then\nwe can pass in some CSS like properties\nlet's set the font size to be 30\npixels and I will pick a font\nfamily font family aial\noh and we should change the geometry of\nthe label it's getting cut\noff self do the name of the\ncheckbox which is\ncheckbox let's set the\ngeometry pass in some X and Y\ncoordinates for the placement as well as\na width and a height I will pick 500 and\n100 uh maybe I'll move it a little more\nto the right by 10\npixels that's pretty good our checkbox\nhas an initial State it's normally\nunchecked that's the default Behavior\nbut we could set that to be checked with\nthe following method when the window\nloads let's take our checkbox self.\ncheckbox call the set checked method\nthen pass in true so then when the\nwindow loads the checkbox is already\nchecked but let's keep that is\nfalse now this checkbox it doesn't do\nanything when I check it let's add some\nfunctionality we'll take our checkbox\nconnect a signal to a\nslot the slot can be a function or a\nmethod let's define a method within our\nmain window class let's name this method\ncheckbox changed we will call this\nmethod when the state of our checkbox\nchanged changes there is one parameter\nbesides self a state now the state\nparameter is going to be provided to us\nwhen we interact with our checkbox when\nwe check the checkbox let's print\nsomething like a test message you like\nfood we have to connect a signal of\nState changed to a slot of checkbox\nchanged we will take self dot the name\nof the checkbox which is checkbox\nthe signal will be State\nchanged to connect a slot to a signal we\nuse the connect method then pass in a\nfunction or method name so we are\nworking with\nmethods this method belongs to the\nwindow class we'll prefix the method\nname with self self. checkbox\nchanged so when I run this program when\nI check the checkbox we execute this\nmethod\nyou like food now when I uncheck it I\ninstead would like to display you do not\nlike\nfood so that's where our state is going\nto come in I'm going to print our state\njust to see what it\nis our state is going to be a\nvalue when we check the checkbox our\nstate has a value of two when we uncheck\nit it has a value of zero 0 zero means\nunchecked two means checked there's also\none for partially checked but that's not\ngoing to be relevant to this topic so\nzero or two we could add an if statement\nsuch as if state is equal to two then\nprint you like food however that's not\nreally readable other developers looking\nover your code aren't going to\nunderstand what two is by looking at it\ninstead let's use the following we will\naccess the class of QT\nthere's a built-in constant of\nchecked this also equals two but it's\nmore readable it's a constant so if\nstate is equal to QT checked print you\nlike\nfood I will check the checkbox you like\nfood when I uncheck it nothing\nhappens let's add an else\nstatement else let's\nprint you do not not like\nfood so then when I check the checkbox\nwe print you like food when I uncheck it\nwe print you do not like food you like\nfood you do not like food you like food\nyou do not like\nfood all right everybody so that is an\nintroduction to checkboxes in pi\nqt5 all right let's do this thing today\nI got to talk about radio buttons in pi\nqt5 to work with radio buttons we will\nneed the following imports from the\nmodule of QT widgets we will need the\nclass of Q radio button as well as Q\nbutton group to group together different\nbuttons let's create three radio buttons\nwithin the Constructor of my main window\nwe will construct three radio buttons\nfor the first radio button this will be\nnamed radio one we will call the\nConstructor of the class Q radio button\nthen we can pass in some text what is\nthe radio button going to say let's say\nthat we're working with payment options\nlet's say visa for the first option then\nfor the second argument I will pass in\nwe will add this radio button directly\nto our window that would be self let's\ncreate two more additional radio buttons\nRadio 2 and radio 3 the text of radio\nbutton two will be\nMasterCard and three will be a gift card\nwe are selecting different payment\noptions we need to set the geometry of\nthese radio buttons because we're not\nusing a layout\nmanager I have a method to initialize my\nuser interface this is where I will set\nthe geometry of my radio buttons so\nlet's say self. radio1 we will call the\nset geometry method pass in some\ncoordinates 0 0 is good that applies to\nthe top left corner of my window for the\nwidth 300 and the height 50 is good\nlet's do this with radio buttons 2 and\nthree Radio 2 radio 3 we'll just move\neach radio button down on the Y AIS by\n50 pixels each so 50 then\n100 here are the three radio buttons\nhowever the font is kind of small we can\nbarely see it so let's apply a\nstylesheet here's a trick that we can do\nwith stylesheets we can apply multiple\nCSS like properties to an entire group\nof widgets rather than having to type\nthem and apply them\nindividually we will select our window\nof self set the style sheet of our\nwindow with the set style sheet\nmethod we will add a selector the\nselector is going to be the name of the\nwidget Q radio button in this case then\nadd a set of curly braces\nwe can apply CSS like properties to an\nentire group of widgets this way so\nlet's set the font size of all radio\nbuttons to be 40\npixels\nbetter let's set the font\nfamily to be\naial then I will add a little bit of\npadding around each radio\nbutton padding 10 pixels\nthat's pretty good so with radio buttons\nwe can only select one from any one\nradio button group if I was making a\npayment I can't pay with a Visa and\nMastercard at the same time I can only\nselect one option that's the point of\nradio buttons we're limited to just one\noption with the default behavior of Pi\nqt5 all radio buttons unless explicitly\nstated are all part of the same group to\ndemonstrate that let's create two\nadditional radio buttons Radio 4 and\nRadio 5 radio button 4 will be for a\npayment method rather than a payment\ntype for example we could say we're\npaying in\nstore radio button 5 will be we're\npaying online radio buttons 1 through 3\nwill be for the payment type radio\nbuttons four and five will be for the\npayment method we're either paying in\nstore or we're ordering something online\nwe do need to set the geometry for these\ntwo radio buttons I'll just copy these\ntwo\nlines add Radio 4 Radio 5 we'll set the\ny-coordinate of four to be 150 and 5 to\nbe 200 all radio buttons will be within\nthe same button group if I was to select\nin store we deselect one of these\noptions what I would like is one option\nfrom this first group and another option\nfrom this other group these buttons are\nall in the same group group I can only\nselect one if I would like to pay with\nthe VISA in store and I click the in\nstore radio button we unselect the radio\nbutton for Visa I would like these radio\nbuttons within different groups we need\nto create two different groups and add\nthem accordingly here's\nhow within our Constructor we will\naccess self declare a button group let's\nname it button group one for Simplicity\nequals call The Constructor of the class\nQ button group then pass in to set the\nparent widget to be the\nwindow then we will create button group\ntwo we're going to access self select\nthe radio button\ngroup button group one call the add\nbutton method then pass in a radio\nbutton\nself. Radio\n1 then we'll add Radio 2 and radio\n3 we'll select button group two this\ntime button group\ntwo add radio button 4 and radio button\n5 the first three radio buttons are\nwithin the same group radio buttons 4\nand five are within a different group we\ncan only select one radio button from\nany one radio button group\nmaybe I would like to pay with a Visa\ncard in store or a master card online or\na gift card in store these radio buttons\nare within different button groups we're\nlimited to one selection in any one\nradio button group when we select these\nradio buttons they don't quite do\nanything for each radio button we have\nto connect a signal to a slot here's\nhow let's define a method of radio\nbutton changed there will be no\nparameters beside\nself temporarily I'll write pass we'll\nfill this in in a\nmoment we will take each radio button\nlet's start with radio one Radio One the\nsignal will be toggled when this radio\nbutton is toggled we will connect a slot\nwe will pass in a function or a method\nself dot radio button\nchanged then we will do this with the\nother radio\nbuttons one through\nfive let's print a test\nmessage you selected\nsomething just to be sure that\neverything is\nworking you selected\nsomething okay we know that that works\ncurrently\nwhat we're going to need to do is get\nthe sender widget which radio button\nsent the signal of\ntoggled I will create a local radio\nbutton to store that radio button\nwhichever one emitted the signal we can\ndetermine that with self. sender method\nthe sender method is going to return the\nwidget that sent the signal so if we\nselect radio button one our radio button\nwill be radio button one if it was five\nthen it's five in this\ncase then we'll determine if our radio\nbutton is checked take our radio button\nuse the is checked method this will\nreturn a Boolean true or false if it's\nchecked if this returns true then let's\nprint the\nfollowing I'll use an F string we will\nget the text of the radio button radio\nbutton called the text method to return\nthe text of the radio\nbutton is\nselected all right then let's see if\nthis\nworks let's select Visa Visa is selected\nMasterCard is selected gift card is\nselected in store is selected and online\nis\nselected that's how to determine which\nradio button was selected which one is\nthe sender which one sent the signal all\nright everybody so that is an\nintroduction to radio buttons in\npyqt5 why hello everybody today I got to\nexplain line edit widgets in pyqt5 also\nknown as textboxes in pretty much\nanything ever made ever why are they\ncalled line edit widgets I really don't\nknow let's begin from the module of QT\nwidgets we will import the following\nclass of q line edit to create a text\nbox I I mean a line edit\nwidget we are accessing our window of\nself we will call this line edit widget\nline\nedit equals call The Constructor of the\nclass q line\nedit then we will pass in self to add\nthis line edit widget to the\nwindow let's set the geometry but we do\nhave a text box in which we can type in\nstuff\nI have a method to initialize the user\ninterface within this method I will\naccess self dot the line edit widget and\nset the\ngeometry let's set it in the top left\ncorner where X is 10 Y is 10 set a width\n200 is good and a height\n40 that's not too bad now the text is\nreally small\nwe can change that by applying a\nstylesheet access our window with self\naccess our line edit widget then call\nthe set stylesheet\nmethod we can pass in some CSS like\nproperties including a font\nsize let's pick 25\npixels and here's my new text box we can\nread the text now let's also change the\nfont\nfamily font family I will pick\naial this text box by itself it really\ndoesn't do anything we need some way to\nget the text from the text box let's add\na button when we click on the button we\nwill get the text from the text box and\ndo something with it cuz right now it\ndoesn't do\nanything we will need to import Q push\nbutton let's create one button self.\nbutton equals call The Constructor of\nthe class Q push\nbutton let's say that this is a submit\nbutton I will pass in a string of submit\nand we are adding this button to our\nwindow and we do need to set the\ngeometry of the button we're not using a\nlayout manager right\nnow access our window with self\naccess our button that we have\npreviously created in our\nConstructor then call the set geometry\nmethod we'll place our button where X is\n210 Y is 10 the width will be\n100 and the height will be\n40 not too bad let's change the font\nsize of the button I'll copy these two\nlines of code because I'm\nlazy instead of selecting our line edit\nwidget we will select our\nbutton that's better if I were to click\non the button it doesn't do\nanything we'll set up the signal of\nclicked to connect to a method that will\ndo\nsomething let's define a method of\nsubmit we're submitting something we're\nsubmitting the text within the text box\nand for now all right pass we'll get\nback to this in a second\nwe're going to take our button self.\nbutton we'll connect the signal of\nclicked clicked. connect method we will\nconnect the method of submit self.\nsubmit so when we click on the button we\nwill call this method let's print a test\nmessage you clicked the\nbutton let's type in something\npress submit and we get our test message\nyou clicked the\nbutton let's get the text from the text\nbox then do something with\nit let's create a local variable of text\ntext equals now we have to get the text\nfrom our line edit widget\nself. line edit that's the widget to get\nthe text we can use the text method to\nreturn the text\nthen let's print the text I'll use an F\nstring we'll say hello add a placeholder\nthen display the\ntext so\nnow after typing in something why don't\nyou type in your name then press submit\nwe will display hello your\nname you could add some placeholder text\ntoo let's do that here let's take self\ndo line edit\nwidget set\nplaceholder\ntext and let's say enter your\nname when I run this program we have\nsome placeholder text that says enter\nyour name this time I will type in\nSpongeBob then press submit hello\nSpongeBob all right everybody so those\nare line edit widgets also commonly\nreferred to as text boxes and well\neverybody those are line edit widgets in\npi\nqt5 hello everybody so in today's video\nI'm going to explain setting stylesheets\nin pyqt5 CSS means cascading stylesheets\nif you're not familiar with CSS you can\nstill follow along but knowing CSS is\nhelpful as a reminder I do have a full\nfree course on YouTube on HTML and CSS\nif you would like to learn more let's\nbegin for this demonstration we will\nneed the following Imports we will be\ndesigning some buttons we will import Q\npush\nbutton we'll be working with the layout\nmanager we will import Q\nwidget and for a horizontal layout\nmanager we will need Q\nhbox layout so import these three from\nthe module of QT widgets now in previous\ntopics we've set the geometry of our\nwindow since we're using a layout\nmanager we don't necessarily need that\nanymore so I'm going to delete it in the\npast I have also created a method to\ninitialize our user interface and we are\ncalling that within the Constructor of\nour main window we will create three\npush button\nwidgets self. button one will be the\nfirst button equals take our Q push\nbutton class and call the Constructor we\ncan add text to the button we will pass\nthat as an argument now since we're\nusing a layout manager we don't need to\nadd this button to self our window we\ndon't need to do that let's create two\nmore buttons we'll have button two and\nbutton three button two will say number\ntwo button three will say number three\nnow we'll create a layout manager under\nnormal circumstances we can't add a\nlayout manager to our main window with\nmain window widgets there's already a\nspecified layout and format we're going\nto add a layout manager to a central\nwidget and this widget will be added to\nthe main window\nlet's take care of that within our\ninitialized user interface method we\nwill create a central\nwidget equals call The Constructor of Q\nwidget then we will take self that means\nour window and set the central\nwidget set Central\nwidget then pass in our Central widget\nto set it then we will create a layout\nwe will call The Constructor within the\nclass of qbox\nlayout let's name this layout hbox for a\nhorizontal box\nequals call The Constructor within this\nclass we will take our layout of\nhorizontal\nbox then add the following\nwidgets add widget self. button\none we'll do this with two and three\nthen the last thing we need to do is\ntake our Central\nwidget call the set layout\nmethod then pass in our layout\nmanager and now we should have those\nthree buttons they're all arranged\nhorizontally now we're going to apply\nsome CSS like styling using the method\nof set style sheet here's how rather\nthan apply the CSS properties\nindividually such as self. button one do\nthat\nstylesheet and in the past we've passed\nin individual CSS properties we're\ninstead going to set the stylesheet of\nour window self we have a lot to write\ninstead of double quotes we're going to\nuse triple\nquotes triple quotes are used to write\nvery long strings in a more organized\nway all of the CSS properties that we're\ngoing to write are going to be within\nthis set of triple quotes so let me give\nyou a demonstration we could\nindividually apply CSS like properties\nto each of these widgets but we could\nselect an entire class of widgets too\nlet's select the class of Q push\nbutton then add a set of curly\nbraces the following CSS properties will\napply to all Q push button widgets So\ncurrently this is what we have we\nincrease the font size for every push\nbutton so we will add the following\nproperty of font\nsize then set it to be 40 pixels each be\nsure to end each CSS property with a\nsemicolon so the font size is now 40 for\nevery\nbutton let's set the font font family I\nwill pick\naial let's add some padding we can add\nsome space around the text and the\nbutton\nitself so with padding if I was to set\nthis to 75\npixels we would have 75 pixels worth the\nspace between the text and the border of\nthe button I would like to change the\ndimensions of the padding so let's apply\n15 pixels to the top and bottom of the\nbutton and 75 to the\nsides that's\nbetter margin is the space around a\nbutton let's set the margin to be 25\npixels now the buttons are more spread\nout if this was 250 they would really be\nspread out that's margin it's the space\naround a\nwidget let's set that back to\n25 I'm going to change the border\nborder 3 pixels\nsolid this would change the border of\nthe buttons we now have a black border\nthat's three pixels and width if you\nwould like to round the corners we can\nuse border radius I will set that to be\n15\npixels with all the buttons the corners\nare now\nrounded within our set style sheet\nmethod we're applying all of these CSS\nlike properties to every push button now\nwhat if you would like to apply CSS\nproperties to Only One widget rather\nthan all of them here's how with each of\nour widgets buttons 1 two and three we\nneed to set an object name let's do that\nbefore we call the set stylesheet method\nwe will take our buttons self. button\none call the set object name method then\npass in a name for this widget we'll\nkeep the name the same as button\none so let's do this with button two and\nbutton\nthree button two button\nthree within the context of set\nstylesheet we will refer to these\nwidgets by their object name buttons 1 2\nand three and now we can select them\nindividually let's say that with button\none I would like the background color to\nbe red we're going to access our class\nof Q push button follow this with a\npound sign I like to call it a hashtag\nthen we need the object name button one\nbutton one refers to the widget of\nbutton one\nagain I kept the name the same then we\nneed a set of curly braces between the\nset of curly braces we can list one or\nmany different CSS properties let's\nchange the background\ncolor I will set it to be\nred and now the background color of only\nthat button is red and not all of\nthem if I was to set the background\ncolor within the class well then all of\nthem would be red\nokay so with button two I'll just copy\nwhat we have and paste\nit we are selecting the ID of button two\nlet's set the background color to be\ngreen so then the background color is\nnow green and button\nthree button three will be\nblue if you would like a greater variety\nof colors I recommend looking up a color\npicker you can just Google Color Picker\nso if I would like a very specific shade\nof red I can pick that let's go with\nthat there are a few options provided to\nyou you can use hex\nvalues now we have a very specific shade\nof\nred you can use\nRGB\nRGB en close it with within a set of\nparentheses and then paste those\nnumbers or my favorite which is hsl hsl\nmeans Hue saturation and\nlightness we will enclose our values\nwithin hsl if you copy these values\ndirectly from Google you would have to\nremove this degree\nsymbol I like hsl because I can also\ncontrol the saturation and the lightness\npretty easily okay let's pick a very\nspecific shade of\ngreen that's good I would say I'll use\nthe hsl\nvalues\nhsl remove the degree\nsymbol and now we have a very specific\nshade of\ngreen and\nblue that's good I would say\nthat's not too bad if you're already\nfamiliar with CSS we can apply pseudo\nclasses such as when we hover over one\nof the buttons here's how let's copy\nthese three\nblocks then paste them\nagain we can add CSS properties when we\nhover over something we have to use the\nhover PSE sudo class after the ID of\neach of our buttons we will add Cod in\nHover we can apply the following CSS\nproperties when we hover over the\nbuttons all I'm going to do is up the\nlightness let's say by 20%\neach then when we hover over one of the\nbuttons the lightness is going to change\nwe apply the new CSS\nproperties all right everybody so that\nis a more in-depth explanation of the\nset stylesheet method in pi qt5\nall right everybody in today's video\nwe're going to build a digital clock\nwidget using Python's Pi qt5 library at\nthe top of our python file we will need\nthe following Imports import CIS CIS\nmeans system this module provides\nvariables used and maintained by the\npython interpreter we would also need\nwidgets widgets are the building blocks\nof a guy\napplication from the package of Pi\nqt5 we need to access the module of QT\nwidgets import the\nfollowing Q\napplication Q widget this is a generic\nwidget we'll turn our digital clock into\nits own widget and Q label to work with\nlabels we will be using a layout manager\nmore specifically QV box\nlayout there's another import we'll need\ntoo from the package of Pi\nqt5 access the module of QT core the QT\ncore module it provides functionality\nnot related to guy components this is\nwhere we'll get a timer to keep track of\nthe time from this module we will import\nQ\ntimer Q time and QT QT is for alignment\nwe will create a class of digital clock\ninstead of inheriting from the main\nwindow window widget we will inherit\nfrom The Base Class of Q widget Q widget\nis a base class to create our own\nwidgets our digital clock will be a\nwidget we will need a Constructor so\nlet's define that Define init pass and\nself if there are any arguments to send\nto the parent we will call the\nConstructor of the parent the super\nclass\nsuper called the init\nmethod at the end of The Constructor\nwhat I like to do is call a method of\ninitialize UI init UI this will be a\nseparate method Define init UI there are\nno parameters besid self and for now\nI'll write pass it's within this method\nthat we will be designing the layout of\nthe digital clock within the Constructor\nthat's where we will be constructing all\nof the different entities for the clock\nat the end of my python file I will add\nthe following statement if Thunder name\nis equal to a string of Dunder\nmain this statement will be true if we\nare running this program\ndirectly to create an application we\nwill create an F object equals call The\nConstructor within the class Q\napplication as an argument to the\nConstructor we will pass in the\nfollowing argument access the module of\nCIS a RGV which means arguments this\nwould apply if we're running from\ncommand prompt or terminal but we won't\nbe doing that in this video but it's\nnice just to set it up in case we do in\nthe\nfuture now we are going to create a\nclock object clock equals we will call\nthe Constructor of our digital clock\nclass there are no arguments now the\nwindow doesn't appear That's because we\nhave to use the show method of our clock\ntake our clock call the show method now\nit's only going to appear for a brief\nsecond\njust momentarily I don't know if you saw\nthat to ensure a clean and proper exit\nof our application we need to call the\nfollowing method access our module of\nsis call the exit method then pass in\nthe following we will take our app\nobject then call the following method\neccore and then a set of parentheses\nit's a method it's the execute method it\nstarts the main event Loop of the\napplication it also handles events such\nas key presses Mouse clicks or other\nuser interactions so then we should have\na window that stays in place until we\nexit okay now we have the base\nfunctionality all set up we have a class\nof digital clock that inherits from the\nQ widget based class we're not going to\nbe using main window in this video\nwithin the Constructor of my digital\nclock I will create a label\nself. time label this will be a label\nthat displays the time we will call the\nConstructor within the class Q label\nthen be sure to pass in self we will be\nadding this label directly to our widget\nof clock we will need a timer self.\ntimer equals call The Constructor of Q\ntimer then pass in self we are adding\nthe timer to the\nclock now with designing the layout of\nour clock I'll handle that within the\ninitialized user interface\nmethod we're going to set a title for\nthe window self. set window title method\npass in a string that will be used for\nthe title of the window let's say\ndigital clock then our window should say\ndigital\nclock let's set the geometry of the\nwindow self. set\ngeometry the first two arguments are\ngoing to be for for the placement of the\nwindow where will it appear within your\nscreen so I'll pick something\napproximately in the middle for me but\nfeel free to change these values then we\nneed a width for the window let's say\n300 and a height 100 for the height so\nmy window should appear approximately in\nthe middle of my screen the base width\nis 300 the base height is 100 now we're\ngoing to need a layout manager I will\nname this layout manager vbox for a\nvertical box vbox equals call The\nConstructor within the class QV box this\nwill arrange all of our widgets\nvertically but we only have one widget a\nTime label so we will take our layout\nmanager of\nvbox add widget that's a method we will\npass in self. time label as an argument\nwe're adding our label to this layout\nmanager of vbox\nthen to set the layout we will take self\nthat applies to our clock call the set\nlayout method then pass in our layout\nmanager of\nvbox So currently if I run this we don't\nsee anything temporarily within our\nlabel I will add some text just as a\nplaceholder so we can see what we're\nworking with let's say 12\no' so then we should see something at\nleast although the font is kind of small\nwe will be getting rid of this later we\njust want to be sure that we can see\neverything all right so after our layout\nI would like the label to be Center\naligned\nhorizontally here's how we can set that\nup we will take our label self. time\nlabel call the set alignment\nmethod access the class of QT\naccess align\nCenter this should Center align our\ntime now let's work on the font I can\nbarely read\nit we will take our label self. time\nlabel set style\nsheet we can pass in multiple CSS like\nproperties let's set the font size I'll\nset it to be 150\npixels now we can read\nit you could pick a font but we're going\nto change that at the end of this video\nwe'll import a custom font but\ntemporarily let's say font family\naial you could change the color\ntoo so if I set the color to be\ngreen then the font color is going to be\ngreen but I would like a very specific\nshade of\ngreen you could always Google a Color\nPicker then pick a very specific color\nuh let's go with that something that's\nbright green you can copy the hex value\nRGB or hsl hsl means Hue saturation and\nlightness I'll use hsl\nvalues for the color we will type hsl\nadd a set of parenthesis then paste\nthose values but there is a degree\nsymbol you do have to get rid of that\nnow the font color is going to be bright\ngreen let's change the background color\nhere's how we will take self that\napplies to our clock then call the set\nstylesheet\nmethod pass in a background\ncolor we will set the background color\nproperty to be\nblack I think that looks pretty good but\ndoesn't quite do anything quite yet\nthat's the next step let's create a\nmethod to update time no arguments\nbeside self I will create a local\nvariable of current time equals now to\nget the current time we can access the\nclass of Q\ntime Q time do call the method of\ncurrent\ntime we will need to convert it to a\nstring we will method chain\nthe two string method within the two\nstring method we will Design the layout\nof the time so I would like hours first\nI will type 2 H's colon minutes that's 2\nM's colon 2\ns's to set the text of the label we will\ntake self. time\nLael call the set text method then pass\nin our current\ntime so if I run this currently we still\nhave our placeholder time let's update\nit with the current time we can get rid\nof our placeholder text of 12 we can\ndelete\nit after we set the font let's call the\nmethod of update time self. update\ntime now we should display the current\ntime so me I'm recording this video at\n7:44 in the morning if you would like to\nadd amm or p.m. after your time here's\nhow after our string format specifiers\nwe will add Capital AP a means anti-\nmeridium and P means post\nmeridium so then we should display AM or\nPM depending on when you're coding this\ncurrently the time for me is 7:45 a.m.\nto get the clock to update every\nsecond we need to connect our timer\nwidget to a slot of update time we will\ntake our timer self. timer this isn't\nthe time label it's the timer to keep\ntrack of the time during a signal of\ntime out we will connect the following\nslot of self. update time self. update\ntime with our timer we need to trigger a\ntimeout signal every 1,000 milliseconds\nevery second that is to handle that we\nwill take our timer self. timer call the\nstart method then pass in 1,000 from\n1,000\nmilliseconds so then when we run this\nprogram our clock should update every\nsecond and display the new current\ntime as an added bonus if you would like\nto download a custom font here's how\nusing Google or another search engine I\nwould recommend looking up a font of\nyou're choosing so one font that I like\nis DS digital what we need is a ttf file\nmeaning true type font I'll just pick\nthis first\nlink so these fonts are pretty good so\nI'm going to download\nthem I'll pick this specific font DS\ndigit and again the file extension is\nttf so once you have your font move it\nto your project folder so for\nconvenience we have that ttf file right\nnext to our main python\nfile okay to work with specific fonts we\nwill need the f following import from PI\nqt5 do\nQT\nGUI\nimport Q\nfont as well as Q font data\nbase since we're going to use our own\ncustom font we can delete that from the\nset stylesheet method of our time label\nso let's set the font right here we will\nassign a local variable a font\nID equals Q font data base Q font\ndatabase is a class for managing and\nquerying fonts available to the\napplication to add a custom font we will\ncall the following method within it add\napplication\nfont within the set of quotes we're\ngoing to pass in a file path this can be\na relative file path or an absolute file\npath this ttf file is right next to my\nmain python file I only need the file\nname my font file is named\nDS digit and get the file extension of\nttf we will create a local variable of\nfont\nfamily we will retrieve the name of the\nfont family from this\nID again we will access qfont database\ndo call the\napplication font families method so this\nmethod returns a list of font names we\nwill pass in our\nfont\nID but there's another step we're going\nto use the index of operator and get the\nindex of zero this will retrieve the\nfirst element of the font family that's\nbecause we're working with a list we\nwill need just the first element at\nindex zero now we'll have a font family\nto work with now to set the font we will\ncreate a local variable of my font\nequals called the class call The\nConstructor within the class Q\nfont pass in the following arguments our\nfont family that's the first argument\nand then a font size let's say\n150 to set the font we will take our\ntime label\nself. time\nlabel called the set font\nmethod then pass in my font our custom\nfont so then we should have our custom\nfont that digital font that we've\ndownloaded art everybody so that is how\nto create a digital clock widget using\npi\nqt5 hey yeah everybody so in today's\nvideo we're going to create this\nstopwatch program using Python's pyqt5\nLibrary once that's out of the way you\nwill need the following Imports import\nCIS CIS means system it handles system\nvariables for your python interpreter we\nwill need the following widgets from PI\nqt5 access the module of QT widgets\nwidgets are the building blocks of a pi\nqt5\napplication we will import the following\nwidgets\nQ\napplication\nQ widget\nQ label Q push\nbutton QV box\nlayout and qh box\nlayout let me put these on a new line\njust so we can read everything from the\npackage of Pi\nqt5 access QT core we will\nimport Q timer our timer will emit a\nsignal after a given interval\nwhich is what we need for a stopwatch Q\ntime to keep track of the time and QT\nfor alignment let's do a test run to be\nsure that there's no\nerrors looks like L and label should be\nCapital there we go no errors once you\nhave the following Imports we will\nconstruct a Class A Class of\nstopwatch which will inherit from The\nBase Class of Q\nwidget our stopwatch will be a widget we\nwill need a Constructor we'll Define\nthat Dunder\ninit no arguments besid self if we have\narguments to pass to the parent of Q\nwidget we will call the super class the\nparent call The Constructor of the\nparent no arguments\ncurrently now if we are running this\nfile directly we'll use an if statement\nto verify that if Dunder name is equal\nto a string of Dunder Main\nif this is true if we are running this\nfile directly then we will construct a\nstopwatch we will create an app object\ncall The Constructor within the Q\napplication class pass in the following\naccess CIS our system access AR RGV\nwhich means\narguments this is if we're using command\nline arguments which we won't be using\nbut it's nice to Future proof our code\njust in case we do in the future we will\ncreate a stopwatch object stopwatch\nequals call The Constructor within our\nclass of\nstopwatch our window is not going to\nshow unless we call the show method take\nour stopwatch call the show\nmethod now our window is only going to\nshow for a brief\nsecond we need to ensure a clean exit we\ncan access CIS call the exit\nmethod pass in the following\napp then call the\nexcore method this method starts the\nmain event Loop and handles\nevents so then we should have a basic\nwindow which stays in place until we\nclose it we now have the main skeletal\nstructure of a pi qt5 application set up\nif you're one of the people that have\njumped ahead up until this point we have\na class of stopwatch which inherits from\nthe Q widget class we've constructed a\nstopwatch object and we're showing it so\nnow we can begin designing our stopwatch\nwe will create a Time object self. time\nequals call The Constructor within the\nclass of Q time for arguments we'll pass\nin the hours minutes seconds and\nmilliseconds all\nzero we need a label for the\nstopwatch self. time label equals called\nThe Constructor of Q label\nwhat would we like the text to say I'll\ndisplay some placeholder text a bunch of\nzeros zero hours minutes seconds and\nmilliseconds we will add this label to\nself our\nstopwatch we need a start button self.\nstart button equals called The\nConstructor within Q push button what\nwould we like the text of the button to\nsay let's say start we are adding this\nbutton to self our\nstopwatch we need a stop button let's\nreplace start with stop change the text\nfrom start to stop and\nreset the name of this button will be\nthe reset\nbutton the text will be\nreset we will need a timer to emit a\nsignal at a given interval self. time\nequals call The Constructor within the\nclass\nqtimer then pass\nin we're going to call a method of\ninitialize UI self. init\nUI but we still have to Define this\nmethod all right within our stopwatch\nclass we need the following\nmethods a method of init UI this is\nwhere we'll be designing the user\ninterface I'll write pass for now as a\nplaceholder we need a method to\nstart to start the stopwatch that is a\nmethod to stop the\nstopwatch a method to reset the\nstopwatch we'll create a method to\nformat our time format time besides self\nthere's one parameter we have to pass in\na time to format we will will be\nreturning a string a string\nrepresentation of the current\ntime and a method to update our display\nupdate\ndisplay here are the six methods we'll\nneed within our initialized user\ninterface method we will set the title\nof the window because right now it says\npython we will take self our stopwatch\ncall the set window\ntitle\nmethod and we will pass in\nstopwatch that should change the title\nof the window to stopwatch we're going\nto use a vertical layout manager for the\nlabel and the\nbuttons we will create a layout manager\nnamed vbox vbox equals call The\nConstructor of q v box\nlayout we will take our layout manager\nand add the following\nwidgets self. time\nlabel then our start stop and reset\nbuttons start\nbutton stop\nbutton and reset\nbutton we will take\nself set the lay\nlayout passing our vertical layout\nmanager so we have all of our buttons we\nhave our widgets arranged in a column\nwe're going to take our time label and\nalso Center it\nhorizontally we will take our time label\nself. time\nlabel call the set alignment\nmethod access our class of\nQT access the flag of a line\nCenter that's going to Center align the\ntime it should be aligned both\nvertically and\nhorizontally now with your buttons\nthey're arranged in a column we could\ngroup them together\nhorizontally here's how we will create a\nhorizontal layout manager of hbox hbox\nequals call The Constructor of\nqbox layout\ninstead of adding these buttons directly\nto our vertical layout manager let's cut\nthem paste them underneath\nhbox replace vbox with\nhbox then with our vertical layout\nmanager\nvbox we will add our layout of\nhbox this group of buttons is arranged\nvertically with with the time\nlabel now we'll be applying a style\nsheet access self our stopwatch call the\nset stylesheet\nmethod we can pass in one extremely long\nstring with a set of triple quotes all\nof the CSS like properties We'll add\nwe'll do so between the set of triple\nquotes let's select our buttons Q push\nbutton we are selecting an entire class\nwithin a set of curly braces let's add\nthe property of font size the font size\nof all buttons will be 50\npixels let's customize our label select\nthe class of Q\nlabel within a set of curly braces let's\nadd the following properties font size\nwill be\n120 if you would like we can add a\nbackground color too to the label\nwe can select a background\ncolor temporarily I will select blue but\nwe can pick more specific shades of blue\nor another color here's\nhow you can look up a Color Picker and\nselect a very specific color you can use\nhex values RGB or\nhsl I've already selected a color I'm\ngoing to copy these hsl values so\ninstead of a color name we will select\nhsl then paste those values if you have\na degree symbol you will need to remove\nthat and now we have a very specific\nshade of blue I will also round the\ncorners of our\nlabel add the property of Border radius\nI will set that to be 20\npixels this will round the corners\nbetween each button and label We'll add\nsome padding we're going to use multiple\nselectors\nwe will select all push buttons and all\nlabels apply the following properties to\neach I will add padding of 20\npixels around these\nwidgets and I will also make the font\nweight\nbold font weight will be\nbold all right I think that looks pretty\ngood hey this is bro from the future I\ncurrently editing this video if you\nwould like you can add a font family one\nfont that I think looks really good is\nC we'll apply that to all push buttons\nand C\nlabels I really like this font I think\nit fits a stopwatch but it's up to you\nif you would like to change the font I\njust thought I would mention that now we\njust have to add some functionality\nbecause these buttons don't do\nanything for each of our buttons we have\nto connect a signal to a slot we will\ntake our start button self. start\nbutton with the signal of clicked we\nwill connect the following slot we will\ncall the start method self. start method\nlet's do this with the stop\nbutton change start to stop clicked\nconnect self. stop\nmethod\nreset self. reset button called the\nreset\nmethod at a given interval we're going\nto update our\ndisplay self. timer during a signal of\ntimeout we will connect the following\nmethod self. update\ndisplay self. update\ndisplay within our start method we will\ntake our timer self. timer call the\nstart\nmethod pass in 10 for 10\nmilliseconds we will set an interval for\na time out every 10\nmilliseconds within our stop method we\nwill take our timer and instead called\nthe stop\nmethod we'll get back to reset in just a\nmoment let's work on the format time\nmethod from our time that we pass in we\nhave to get the hours minutes seconds\nand millisecs seconds we will create\nsome local variables hours equals access\nour time that we pass in call the hour\nmethod to return\nhours we have variable minutes time do\ncall the minute method to return the\nminutes we have a variable of seconds\nseconds equals take our time called the\nsecond\nmethod then for\nmilliseconds access our time call the\nMC which means milliseconds and call it\nthis is a\nmethod I'm going to return a string an F\nstring to represent the\ntime we will add four\nplaceholders hours minutes seconds and\nmilliseconds each will be separated with\na colon except for milliseconds which\nwill be a DOT a\nperiod we will display the hours\nI'll add some leading zeros two leading\nzeros let's do this for\nminutes we're using a format specifier\nfor two leading zeros as\nwell\nseconds and\nmilliseconds now we will work on the\nupdate display method we have to get the\ntime self. time\nequals we will take our\ntime but call the add milliseconds\nmethod Ms e\nCS then pass in 10 for 10\nmilliseconds we're going to take our\ntime label self. time\nlabel and set the text of\nit we will call our format time\nmethod but we have to pass in a Time\nwe will be passing in self.\ntime let's see what we have\ncurrently we can start the\nstopwatch and we can stop\nit however we're displaying three digits\nfor the milliseconds we can eliminate\nthat within format time when we get the\nmilliseconds we will use integer\ndivision we will divide by 10 this will\nconvert our milliseconds from three\ndigits to two we're basically dividing\nby\n10 so here's our stopwatch currently we\ncan\nstart we can stop we can start again and\nwe can stop again now we just need to\nreset here's how within the reset method\nwe will take our timer self. timer use\nthe stop method to stop we will reassign\nour time call The Constructor of Q time\nwe have to pass in hours minutes seconds\nand milliseconds they're all going to be\nzero we're resetting our time and then\nwe'll reset the text again of our time\nlabel self. time label call the set text\nmethod when we set the text we will\nfirst format it with the format time\nmethod but we have to pass in a time we\nwill pass in self.\ntime and now should be able to reset our\nstopwatch we can\nstart we can\nstop we can reset start again and stop\nagain all right everybody so that is a\ncool stopwatch that you can make using\npython hey uh what's going on everybody\nso in today's video we're going to\ncreate a working weather app that\nfetches realtime weather data from an\nAPI this is a massive project so feel\nfree to take your time take several days\nor even weeks if you need to complete\nthis heck you can even add this project\nto your portfolio well let's get started\neverybody all right let's get started\neverybody this is a fairly useful API to\nget real-time weather data the website\nis openweathermap.org\nyou will need your own API key but\nsigning up for an account is free to\ncreate an account we'll go to sign\nin create an account\nenter your information and then sign\nin once you're signed in to find your\nAPI key go to this drop- down menu go to\nmy API keys and you would just need to\ncopy this API key if the status is in\nactive you'll need to toggle it to\nactive like\nso now it may take several minutes for\nyour API key to become active hopefully\nby the time of this project where we\nwill need it it'll be active I would\neither leave up this window or copy this\nkey and paste it\nsomewhere we will need the following\nImports we will import CIS CIS means\nsystem it handles system variables for\nyour python interpreter we will import\nthe request module to make a request to\nan\nAPI then we'll need widgets widgets are\nthe building blocks of a pi qt5\napplication from the package of Pi\nqt5 access the module of QT widget\nimport the following\nwidgets Q\napplication Q\nwidget Q\nlabel q line\nedit Q push\nbutton let me put some of these on a new\nline for\nreadability QV box\nlayout this is a vertical layout\nmanager to work with alignment we'll\nneed the following from the package of\nPi qt5 from the module of QT core import\nthe following class QT which is used for\nalignment so these are the Imports that\nyou'll need just to be sure that I\ndidn't misspell anything or get the\ncapitalization wrong I'm just going to\ndo a test\nrun no problems processed finished with\nexit Code Zero\nsometimes I make one of these characters\na lowercase and then it doesn't\nwork okay we have our Imports we will\nneed to create a class of weather app\nweather app is going to inherit from the\nparent of Q\nwidget we will need a Constructor so\nwe'll Define that Dunder init no\narguments besid\nself in case we have arguments to send\nto the parent we will call the the\nparent with super meaning the super\nclass then call the Constructor but\ncurrently we don't have any\narguments if we are running our main\npython file directly we can verify that\nwith the if\nstatement if Dunder name is equal to a\nstring of Dunder\nmain if we are running this file\ndirectly then we will create a weather\napp object otherwise we won't\nif this statement is true we will do the\nfollowing we will create an app object\napp equals call The Constructor within\nour Q application class but we will pass\nin the following access the module of\nCIS then access a RGV which means\narguments if we have command Aline\narguments to send to our application\nthis is how we would take care of that\nbut we're not going to be using command\nline arguments in this video but it's\nnice to Future proof our code just just\nin case we do we will construct a\nweather app object weather app equals\ncall The Constructor of our weather app\nclass now this window isn't going to\nshow we have to call the show method of\nour weather app Weather app.\nShow and now it's going to show for a\nbrief\nsecond we need to ensure a clean exit\naccess sis call the exit method within\nthis method we will pass in the\nfollowing\ntake our app call the execute method\nwhich is\nexcore it is a method so we have to call\nit this method handles events within our\napplication such as closing the\nwindow so now our window should stay in\nplace until we close\nit if you're one of the people that have\njumped ahead we have created a class of\nweather app which inherits from the\nparent of Q widget we've constructed a\nweather app object and we're showing it\nif you've made some Pi qt5 Projects in\nthe past you would just have to change\nsome of these\naround within the Constructor of our\nclass weather app we will declare the\ndifferent widgets that belong to our\nweather app object we will create a\nlabel that prompts the user to enter in\na city we will name this city label\nequals this is a q label\nwidget we can set the initial text of\nthe label\nlet's say enter city\nname then the second argument is going\nto be self we are adding this label to\nour weather app object here's what we\nhave\ncurrently we still have to do some CSS\nformatting but we'll take care of that\nsoon we will need a line edit widget\nbasically a textbox we will name it\nCity input\nthe widget is line\nedit no parameters besides\nself here is our line edit widget we're\nnot currently using a layout manager\nthese widgets are going to\noverlap we need a button self. getet\nweather\nbutton this is a q push\nbutton the text on this button button\nwill be get weather we are adding this\nto self our weather app\nobject here's our\nbutton when we click on this button\nwe'll make a request to an API for the\nnext following widgets we're going to\nadd some placeholders just so that we\ncan see what we're doing when we apply\nCSS\nstyling we need a temperature label to\ndisplay the\ntemperature\ntemperature\nlabel equals a q\nlabel temporarily for the label let's\nsay that the temperature is 70° fight or\npick something else in Celsius so to add\na degree symbol if you're using Windows\nmake sure numb lock is on hold alt then\non the numpad type\n0176 I will pick 70°\nfah and then we will add this to\nself again we're just using this\ntemperature as a placeholder we'll\ndelete it when we do a test run\nif you would like to include an emoji or\nsome other image we can create a label\nfor that I will name this Emoji\nlabel equals a q\nlabel I will add an emoji of a son as a\nplaceholder again we're going to delete\nthis when we do a test run we are adding\nthis to\nself again everything is overlapping\nthat is fine\nand we need a description of the\nweather\ndescription\nlabel equals a q\nlabel as a placeholder let's say that\nit's sunny and we are adding this label\nto\nself okay here are all the widgets\nthey're all overlapping so we need to\nfix\nthat all right moving on everybody so\nnow we have to design the layout of our\nweb app right now all of our widgets are\ngravitating to the top left corner so I\nwill Define a\nmethod to initialize our user\ninterface at the end of this Constructor\nwe will call this method self.\ninitialize UI then call it once we've\nconstructed our widgets we'll format\nthem and design the layout\nso we are now within our initialized\nuser interface\nmethod first let's set the title of our\nwindow self. set window\ntitle let's say that the title is\nweather app so that should change which\nit\ndoes we're going to use a vertical\nlayout manager to handle all the\nwidgets let's name the layout manager\nvbox equals call The Constructor of the\nclass QV box layout we're going to take\nour layout manager of v-box then add a\nwidget we will start with the city label\nthat's\nfirst we will pass in self. City Lael\nand we'll do this with the other widgets\ntoo we have City\ninput get weather\nbutton temperature\nlabel Emoji\nlabel and then a description\nlabel take self our weather app set the\nlayout we will pass in the layout\nmanager of vbox\nand here's what we have\ncurrently all the widgets are arranged\nin a column now we just have to\ncenteralign them horizontally here's\nhow we will take self. City\nlabel call the set alignment\nmethod access the class of\nQT access the flag of a line Center\nwe're going to align all of our widgets\nin the center except for our weather\nbutton currently our button expands to\ntake up the width of the window so we\ndon't need to horizontally align that so\nwe have five widgets to\nalign we have City label City input\ntemperature label Emoji label and\ndescription\nlabel all of the widgets are going to be\narranged in a column horizontally\nnow we just have to apply some CSS\nstyling because right now it's kind of\nugly we will apply Styles based on an\nobject name but we have to set that\nobject name so let's start with our city\nlabel self. City\nlabel call the set object name\nmethod pass in a unique ID for this\nwidget I will name it City label I'll\nkeep it the same okay we have to do this\nwith the other widgets\ntoo we have a total of\nsix we have City label City\ninput we have the get weather\nbutton temperature\nlabel Emoji\nlabel and description\nlabel then we're going to set a\nstylesheet take s our weather app apply\na stylesheet with set style\nsheet we have a lot of properties to\nwrite I will do so within a set of\ntriple quotes just to keep everything\nmore\norganized we can apply CSS Styles based\non a class so the class is going to be Q\nlabel within a set of curly braces we\ncan list multiple CSS properties I will\nset the font family to be\ncalibri as well as all push buttons Q\npush\nbutton so here's the font although it's\nstill kind of small let's select our ID\nof City label it's good practice to\npreedee this ID with the name of the\nclass so Q\nlabel pound sign the\nID we precede the ID with the name of\nthe class just so we're only applying\nthese CSS properties to any ID that's a\ncity label that falls within the class\nof Q\nlabel let's set the font size to be 40\npixels let's set the font size to be 40\npixels that's\nbetter I'll set the font style to be\nitalic font style\nitalic that's pretty\ngood let's select the ID of City input\nthis is a line edit widget q line edit\npound the ID of City input within a set\nof curly\nbraces let's set the font size to be 40\npixels we will select our push button\nwhich is named get weather button the\nclass is Q push button pound the ID of\nget WEA button within a set of curly\nbraces we will apply the following let's\nset the font size to be 30\npixels and let's make it bold font\nweight\nbold let's select our temperature label\nthe ID is temperature label and this is\na q label pound temperature\nlabel we will increase the font\nsize font size 75\npixels better let's work on our Emoji\nnext we will select the ID of emoji\nlabel\nthe class is Q label the ID is Emoji\nlabel we'll set the font size first font\nsize 100 pixels I would like a large\nimage to display emojis properly we're\ngoing to use a very specific font we're\ngoing to set the font family to be now I\ndon't know if I'm saying this right seg\no UI emoji\nI probably pronounced this word wrong\nbut I don't\ncare so then our Emoji should display\ncorrectly using this font it's\ncolorful then we have the description\nlabel of the weather that is the last\nwidget description label the class is Q\nlabel the ID is description\nlabel let's take the font size and set\nit to be 50 pixels\nall right so this is what our weather\napp is going to look like we have the\ncity label a text box to enter in a city\nthe get weather button the temperature\nlabel an emoji label and a description\nof the weather currently now we just\nhave to add some functionality because\ncurrently this doesn't do\nanything all right so now we just have\nto add some functionality to our weather\napp temporarily I'm going to to collapse\nour initialized user interface method we\nwill Define a few extra methods let's\ndeclare a method of get\nweather no parameters besid self I'll\nwrite pass for now as a\nplaceholder we will need a method to\ndisplay any errors display error there's\ngoing to be one argument besid self a\nmessage we will pass in an error message\nif there is one\nand a method to display weather that's\nif there's no errors we will need some\ndata our weather\ndata so be sure that you write these\nthree\nmethods back within our initialized user\ninterface method at the\nbottom we have to connect a signal to a\nslot when we click on the button with\nthe signal of clicked we will connect a\nslot of get weather we will access self\ntake our get weather\nbutton with a signal of clicked we will\nconnect a slot upself dog\ngetwe and I will print a test message\njust to be sure that it's\nworking you get the\nweather so I press the button and and we\nwill display you get the\nweather we can get rid of our\nplaceholder text for the temperature our\nemoji and the weather\ndescription so we can delete these\nstrings But be sure to keep\nself scrolling down to our get weather\nmethod when we click the button we're\ngoing to create a few local variables\nthe first is going to be our API key\nequals this will be a\nstring back to the open Weather API you\nwill copy your API key and make sure\nthat it's active you can use the toggle\nbutton to make it inactive and\nactive so make sure that it's\nactive paste your API key within a\nstring please use your own it still may\ntake several minutes for your key to be\nitive just keep that in\nmind we will need to get the city that\nwe're looking\nup so let's say we type in\nMiami I have to get the text from this\nwidget this line edit widget we will\ncreate a local variable of city city\nequals access our line edit widget it\nhad a name of City\ninput so self. City input to get the\ntext we will call the text\nmethod we have the API key and the city\nnow we will create a\nURL this will be an F\nstring using the request module we will\npass in a URL to make a request\ntoo so back to our open Weather API to\nget the URL for a city we have to go to\nthe tab of\nAPI scroll down to current weather data\nand there's going to be some API\ndocumentation to the right we have a\nlink for built-in API request by city\nname we will copy this\nURL and paste it within our F string\nthere's two changes we're going to make\nwe will replace city name with City the\nname of that variable and API space key\nwith API uncore\nkey it doesn't matter what you name\nthese just make sure they're consistent\nwith your\nvariables when we make an API request we\nwill be returned with a response object\nresponse equals access our module of\nrequests call the get method then pass\nin our\nURL with our response object we have to\nconvert it to a Json\nformat we will be returned with an\nobject we will name this object data\nit's going to be readable to us\ndata equals take our response object and\nuse the Json method to convert it to a\nJson\nformat so let's print our data to see\nwhat we're working\nwith let's say I look up the city of\nMiami so we have one gigantic\nobject this is our weather data we have\ncoordinates such as longitude and\nattitude a weather\ndescription currently in Miami there's\nbroken\nclouds there's an ID of the weather this\nis the temperature but it's in\nkelvin if we scroll all the way to the\nend we are looking for an HTTP status\ncode which is named Cod short for code\n200 means that the response was\nsuccessful depending on what this number\nis we will display one of a few are\nmessages if our status code is 404 that\nmeans the city wasn't found and there's\nmany others so 200 means that the\nrequest was\nsuccessful so let's write the\nfollowing if our data object at Key of\ncod if this is equal to 200 if the\nrequest was successful then we will call\nthe display weather method self. display\nweather\nthere but we do have to pass in our\ndata now temporarily I'm just going to\nprint our weather data we'll do some\nmore complex stuff later but I just want\nto be sure that everything is\nworking so let's look up Los\nAngeles so here's the weather in Los\nAngeles there is currently broken\nclouds and again the status code is 200\nthe request was\nsuccessful I'll write an else statement\nfor now we will print our data what if\nwe can't find a city for example I will\nlook up the city blah blah blah and get\nthe\nweather so here's our weather data we\nhave an error code of\n404 and a message of City not found\nlet's do some exception handling in case\nwe run into one of these status codes\nthat's not\n200 we can get rid of our else\nstatement what we'll do is enclose all\nof our dangerous code that means any\ncode that might cause an exception\nwithin a tri\nblock we will try all of this code and\nhandle any exceptions with an accept\nblock there's two types of exceptions\nwe're looking for the first is an HTTP\nerror\nHTTP error is an exception raised by the\nrequest module when an HTTP request\nreturns a status code that's 400 or\n500 however this exception is found\nwithin the request module that we've\nimported so we can't simply just say\naccept HTTP error we first have to\naccess the request module then access\nexceptions\nthen we can list the specific exception\nof HTTP\nerror we'll encounter this\nexception if the status code is between\n400 and\n500 and for now all right\npass so there's one more step within our\nTri block if we're going to handle any\nHTTP errors we have to raise an\nexception within our Tri block because\nour Tri block by itself normally doesn't\ncatch these we will take our response\nobject and call the raise for status\nmethod this method will raise an\nexception if there's any HTTP errors\nnormally our Tri block doesn't do that\nso we have to manually type\nthis there's another type of exception\nwe'll catch and that's the request\nexception We'll add another block for\naccept\nrequest\nexception this is found within the\nrequest\nmodule\nrequests\nexceptions request\nexception with a request exception this\ncan be due to network problems invalid\nURLs exceptions of that\nnature in case we run into one of those\ntypes of exceptions we will execute this\nblock of code but for now I'll right\npass we'll get back to it\nlater going back to our accept block\nwhere we handle any HTTP errors let's\nuse a match case statement we need to\nget the status code of our response I'll\nprint that\ntemporarily let's print our response\nobjects status code and see what it\nis again let's make up a city get the\nweather we have a status code of 404\nthat means the city will wasn't found\ndepending on what this number is the\nstatus code we'll use a match case\nstatement so we will match our response\nobjects status\ncode the first case will be\n400 that means there's a bad\nrequest so let's print the\nfollowing bad add request I'll add a new\nline\ncharacter please check your\ninput we'll create a total of I believe\neight cases we'll copy what we\nhave so we have\n400 401\n403 404 that one we're familiar\nwith\n500 5\n2\n503\n504 so for case 401 that means we're\nunauthorized maybe our API key isn't\nactive\nyet so let's say\nunauthorized invalid API key\nfor\n403 that means access is denied it's\nforbidden so let's print\nforbidden access is\ndenied 404 is for something that's not\nfound not\nfound City not\nfound 500 is for an internal server\nerror\ninternal server error please try again\nlater 502 is for a bad\ngateway\nbad gateway invalid response from the\nserver 503 is for service\nunavailable service\nunavailable server is\ndown then 504 is for a Gateway\ntimeout\nGateway\ntimeout no response from the\nserver in case there's any unexpected\nerror we can add a wild card of an\nunderscore\nwith our HTTP error let's give it a name\nas\nHTTP\nerror and then we'll just print it in\ncase there are no matching cases let's\nprint the\nfollowing\nHTTP error\noccurred I'll add a new\nline let's convert this to an FST\nstring add a\nplaceholder and then I will print our\nHTTP\nair all right let's do a test\nrun so in case we can't find our city we\nshould encounter a 404\nerror not found City not found\neventually we will display this message\nwithin our app but we know that it\nworks what if my API key is\ninvalid so I will take my API key set it\nto be\ninactive but it might take a few minutes\nto take\neffect the status code of our response\nobject should be\n401 so this time I'm going to look up a\ncity I have an invalid API\nkey and I get that error message of\nunauthorized invalid API\nkey all right everybody so I am on day\nthree of working on and recording this\ntopic over the course of the day I\nthought of one change that I can make\nwe're going to add a few extra accept\nblocks so we will accept access requests\naccess exceptions we will handle any\nconnection eror\nexceptions as well as any timeout\nexceptions and any\nredirects too many redirects\nso if we run into a connection error\nlet's say that our internet gets\ndisconnected well we can print something\nso let's print the\nfollowing let's print\nconnection\nerror I'll add a new line\ncharacter check your internet\nconnection if we encounter a timeout\nthen we will print the\nfollowing we have a a time out\nerror the request timed\nout if we have a too many redirects\nerror that M should be Capital by the\nway let's\nState too many\nredirects check the URL\nand if there's anything else we don't\nanticipate I'll give this exception a\nname of as Rec\nerror and then we'll just print it this\nis a last resort I'll use an F\nstring\nrequest error I'll add a new line I'll\nadd a placeholder then display our\nrequest\nerror so I'm actually going to turn off\nmy internet I'll see if I can get a\nconnection eror\nintentionally so my internet is\ncurrently off I will attempt to look up\na city get the weather and we get a\nconnection error check your internet\nconnection all right my internet is\nconnected\nagain let's perform a test\nrun and we get the weather in\nMiami now what we're going to do is if\nwe have an\nerror we'll display the error message\nwithin the app and not within our\nconsole so we're going to replace print\nwith the call to our display error\nmethod let me zoom out a little bit so\nreplace print with\nself. display error and we're passing in\na\nmessage so let's replace those\none thing I forgot to add although it's\nnot necessary I'm going to add a colon\nafter each initial\nmessage I think it'll look\nbetter you don't have to do this but I'm\nOCD about the\nappearance if we encounter one of these\nexceptions we'll pass along a message to\nour display error method and display it\nwithin the\napp let's take our temperature label\nself. temperature Lael\nand set the\ntext to be our message that we pass\nin let's do a test run let's look up a\ncity that doesn't exist get the\nweather so we get that error message not\nfound City not found while we're within\nthis method I'm going to change the font\nsize just so that it's a little bit\nsmaller\nso let's take our temperature label\nself. temperature label I'm just going\nto copy this because I'm\nlazy I will call the set stylesheet\nmethod and pass along a new property\nlet's set the font size to 30\npixels let's look up north\npole I don't think that's a\ncity oh I guess it is interesting\nthe North Pole is a city I guess let's\nlook up blah blah\nblah not found City not\nfound let's do another test what if our\nAPI key is invalid I'll just delete one\nof the\ndigits let's look up Los\nAngeles unauthorized invalid API\nkey let's change that back again I will\nturn off my\ninternet then look up\nMiami Connection Error check your\ninternet\nconnection all right so we know that our\nexception handling\nworks okay now we're within the display\nweather\nmethod we'll receive an object to\nrepresent our data we have to get the\ntemperature but first I'm going to print\nour data so let me zoom in a little\nbit let's look up Houston Houston\nTexas I need the temperature within our\ndata object we are looking for a key of\nMain and that is right here main\ncontains a dictionary with key value\npairs once we've accessed main we have\nto access temp to get the temperature\nand this temperature is in kelvin we'll\nhave to convert it to Celsius or\nFahrenheit it's your\nchoice so we need to extract this value\nI will store it as a local variable\ntemperature let's say temperature _ k\nfor Kelvin equals take our data object\naccess the key of main that's right here\nthen we have to go one level deeper and\nget the temperature the key is\ntemp then give me the value at the Key\nof Temp and that should return the\ncurrent temperature so to test it let's\nprint it let's print the temperature in\nKelvin so what is the weather in Houston\nTexas the temperature that\nis 309\nKelvin let's convert it to Celsius and\nFahrenheit let's create temperature C if\nyou want to use celsius if you would\nrather use Fahrenheit you can skip this\nstep to convert from Kelvin to Celsius\nwe will take our temperature in Kelvin\nsubtract\n273.15 then for\nFahrenheit let's take temperature f for\nFahrenheit equals this is a little more\ncomplicated take our temperature in\nKelvin time 9 /\n5 subtract\n45967 okay so let's print the\ntemperature in\ncelsius let's look up\nHouston 36.467853\n[Music]\nself. temperature label I'll just copy\nthis then we will set the text I'll use\nan F\nstring add a placeholder I'll use\nFahrenheit but feel free to use\ncelsius then I will add a degree symbol\nwith Windows make sure numb lock is on\nhold alt then on your numpad type 0176\nfor a degree\nsymbol then f for\nFahrenheit let's look up\nget the weather and here's the\ntemperature 94.9 64 now let's say I\nwould like no digits after the decimal I\ncan add a format specifier after our\ntemperature I'll add a colon\n0f to display no\ndecimals let's try that again I will\nlook up Miami get the weather the\ncurrent temperature in Fahrenheit is 95°\nFahrenheit\nnow here's one issue let's say we\ndisplay an air then display the weather\nif we display an err we're going to be\nchanging the font\nsize so let's look up blah blah blah get\nthe weather City not\nfound then let's look up Miami again get\nthe weather and the font size is a lot\nsmaller so if we display the weather\nlet's reset the font size we can really\njust copy this\nline so within the display weather\nmethod let's set the font size back to\n75 what it was\noriginally let's try that\nagain let's look up a city that doesn't\nexist get the weather City not found\nthen we'll look up the city that does\nexist like Miami and get the weather 95°\nF now let's get a description of the\nweather we'll display that at the bottom\nin the center we'll display a picture or\nan em but we'll handle that\nlast now we need a description of the\nweather like is it sunny is it cloudy is\nit raining so after we calculate the\ntemperature so I'm going to print our\ndata\nagain let's look up Los\nAngeles So currently it's 85° Fahrenheit\nso for the weather\ndescription that is found at the Key of\nweather we now within a list at index\nzero within our\nlist we'll look up the key of\ndescription which states clear\nsky so we will create a local variable\nof weather\ndescription equals access our\ndata at the Key of\nweather there's layers to this we're\nthen within a\nlist and actually it's a list with only\none item in\nit so add the index of\nzero then at the Key of\ndescription that's going to return this\ndescription of clear\nsky so we will take our description\nlabel self. description label let me\njust copy it\nthis one right\nhere then we will set the\ntext and then pass in our weather\ndescription what is the weather\ndescription of Los\nAngeles 86° fhe and there's a clear\nsky okay now the last thing we're going\nto do is add an emoji We'll add it right\nto the center between the temperature\nand the weather description you don't NE\nnecessarily have to but I think it'll\nlook cool and that's a good enough\nreason so let's create another method to\nhandle\nthat we will Define a method of get\nweather\nEmoji or a picture if you would rather\nuse a picture we don't need self\nnecessarily we're going to need a\nweather\nID this method isn't going to rely on\nany class data or instance data we could\nmake it a static method I'll add a\ndecorator of static\nmethod in summary a static method we\nhaven't covered these for a little bit\nthey belong to a class but don't require\nany instance specific data or any other\nmethods they're used as more of a\nutility tool we're going to be passing\nin a weather ID and returning an\nemoji I'm going to show you where we can\nfind that weather ID I'll use a print\nstatement\nI will print our\ndata let's look up Miami again that's\nthe first thing that came to\nmind now at the Key of weather there's a\nkey of ID and the value is a three-digit\nnumber I'll show you this chart\ndepending on what this three-digit\nnumber is that cor responds to a certain\ngroup of weather so the 200 range is a\nthunderstorm 300 is a drizzle 500 is\nrain 600 is\nsnow 700 is atmosphere like if there's a\ntornado or there's a volcanic\neruption 800 exactly is a clear sky\nanything that's 801 or above refers to\nclouds so this ID is 803 we have broken\nclouds depending on what this ID is I\nwould like to return a certain Emoji\nbased on the weather so we need this ID\nI'll delete our print statement we no\nlonger need it let's say before our\nweather description we will create a\nlocal variable of weather\nID\nequals access our data\nobject then access the key of\nweather the value at weather is a list\nbut this list only has one item in it so\nwe need the index of operator at zero\nand then we will access the key of\nID the key is ID so our weather ID is\ngoing to be a number a three-digit\nnumber okay everybody we're near the end\nso after setting the temperature we're\ngoing to set the Emoji label self.\nEmoji\nlabel and call the set text\nmethod within the set text method we\nwill call self. getwe Emoji\nmethod this will return a string an\nemoji within a string but we have to\npass in our weather\nID it's that three-digit\nnumber so now we are within our get\nweather Emoji\nmethod depending on the range of that\nthree-digit number we will return one of\na few emojis we could use a match case\nstatement I think it's more complicated\nwith with the match case statement we'll\nuse LF statements for\nSimplicity so if our weather\nID is greater than or equal to 200 and\nour weather ID is less than or equal to\n232 now we have two conditions here\nlinked with the and logical\noperator there is a shortcut to this and\nactually py charm is telling me that\nthere is we can simplify these\nExpressions instead of two separate\nconditions we can combine them into one\nif 200 is less than or equal to our\nweather ID and our weather ID is less\nthan or equal to 232 if this one\ncombined condition is true then we will\nreturn an\nemoji so to add an emoji on Windows you\ncan hold on the window key and press\nsemicolon so 200 to 232 that's for a\nthunderstorm depending on the font style\nof your IDE some of these emojis might\nnot display properly you can always just\ncopy them from someplace\nelse I think that's better it's more\ncolorful than else\nif 300 is less than or equal to our\nweather\nID and our weather ID is less than or\nequal to\n321 this this is for a partially cloudy\nSky we will\nreturn some clouds a partially cloudy\nsky and again I don't like that one so\nlet's use this one\ninstead else if 500 is less than or\nequal to our weather\nID Which is less than or equal to\n531 we will return\nrain that's\nbetter 600 to\n622 else if 600 is less than or equal to\nour weather\nID Which is less than or equal to\n622 we will return snow\nso 701 to 741 is missed or fog else if\n701 is less than or equal to our weather\nID Which is less than or equal to\n741 we will return some mist or\nfog 762 specifically is for Ash like\nfrom a\nvolcano so else if our weather\nID is directly equal to\n762 we will return let's return a\nvolcano 771 is for a Squall that's a\nviolent gust of wind else if our weather\nID is directly equal\nto\n771 we will\nreturn let's return that a violent gust\nof wind a\nSquall 781 is for a\ntornado else if our weather ID is equal\nto\n781 return a\ntornado a 800 exactly is for a clear\nsky else if our weather ID is equal to\n800\nreturn a sun a sun\nemoji else if 801 is less than or equal\nto our weather\nID Which is less than or equal to\n804 we will return some clouds\nnow if there are no matches let's return\nan empty string to not display\nanything okay let's do a test\nrun let's look up\nMiami we get scattered clouds it's\n94° Los\nAngeles get the we we have a clear sky\nand a sun now there's one fix we need to\nmake let's say that I make up a city\nagain blah blah blah get the weather we\nshould clear our Emoji label and the\nweather description but we still get\nthat error\nmessage so after we display our error\nwithin the display error method after we\nset the text of the temperature label\nlet's take the Emoji label self. emoji\nlabel and call the Clear method to clear\nit then we have to do this with the\ndescription label self. description\nlabel and call the Clear method now we\nshould be able to clear it when we get\nan\nerror okay let's look up\nHouston get the weather few clouds\n98° let's make up a City Pizza City get\nthe weather not found City not found and\nthe Emoji label and the weather\ndescription are\ncleared okay what if I type in nothing\nwhat happens let's get the weather we\nhave a bad request please check your\ninput that's if we have an HTTP status\nCod to 400 we handled this exception bad\nrequest all right one last City what\nabout Paris let's get the\nweather it is 68° F and there's light\nrain all right everybody so that is a\nweather app that you can make using\npython add it to your portfolio and\nthanks for watching\n",
  "words": [
    "everybody",
    "video",
    "going",
    "teach",
    "everything",
    "need",
    "know",
    "start",
    "coding",
    "python",
    "also",
    "included",
    "20",
    "different",
    "projects",
    "help",
    "learn",
    "find",
    "entire",
    "list",
    "description",
    "video",
    "final",
    "project",
    "weather",
    "app",
    "fetches",
    "weather",
    "data",
    "api",
    "even",
    "never",
    "coded",
    "anything",
    "life",
    "walk",
    "basics",
    "abcs",
    "programming",
    "sounds",
    "good",
    "encourage",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "course",
    "cost",
    "anything",
    "would",
    "like",
    "help",
    "help",
    "increase",
    "reach",
    "hitting",
    "like",
    "button",
    "leave",
    "random",
    "comment",
    "subscribe",
    "like",
    "fellow",
    "bro",
    "thank",
    "appreciate",
    "like",
    "boring",
    "introductions",
    "say",
    "jump",
    "right",
    "two",
    "things",
    "need",
    "download",
    "first",
    "python",
    "interpreter",
    "convert",
    "written",
    "code",
    "machine",
    "code",
    "going",
    "head",
    "go",
    "downloads",
    "download",
    "latest",
    "version",
    "open",
    "executable",
    "windows",
    "want",
    "check",
    "checkbox",
    "add",
    "python",
    "exe",
    "path",
    "install",
    "setup",
    "successful",
    "need",
    "download",
    "python",
    "interpreter",
    "second",
    "download",
    "need",
    "ide",
    "integrated",
    "development",
    "environment",
    "basically",
    "place",
    "write",
    "code",
    "idees",
    "two",
    "popular",
    "choices",
    "writing",
    "python",
    "code",
    "pycharm",
    "vs",
    "code",
    "already",
    "use",
    "vs",
    "code",
    "stick",
    "sure",
    "download",
    "python",
    "extension",
    "find",
    "pycharm",
    "beginner",
    "friendly",
    "never",
    "coded",
    "would",
    "like",
    "use",
    "pycharm",
    "go",
    "jetb",
    "pycharm",
    "click",
    "green",
    "download",
    "button",
    "two",
    "versions",
    "py",
    "charm",
    "professional",
    "version",
    "community",
    "version",
    "professional",
    "version",
    "paid",
    "would",
    "recommend",
    "using",
    "plenty",
    "free",
    "ides",
    "market",
    "use",
    "community",
    "edition",
    "free",
    "one",
    "like",
    "pay",
    "things",
    "sure",
    "either",
    "select",
    "correct",
    "download",
    "operating",
    "system",
    "running",
    "windows",
    "download",
    "pycharm",
    "open",
    "executable",
    "click",
    "next",
    "could",
    "select",
    "destination",
    "folder",
    "keep",
    "next",
    "create",
    "desktop",
    "shortcut",
    "necessarily",
    "need",
    "click",
    "next",
    "install",
    "give",
    "moment",
    "okay",
    "setup",
    "complete",
    "check",
    "check",
    "box",
    "run",
    "py",
    "charm",
    "click",
    "close",
    "window",
    "opening",
    "py",
    "charm",
    "going",
    "create",
    "new",
    "project",
    "rename",
    "python",
    "project",
    "keep",
    "select",
    "location",
    "wo",
    "change",
    "create",
    "sample",
    "welcome",
    "script",
    "tutorial",
    "wo",
    "let",
    "select",
    "latest",
    "python",
    "version",
    "create",
    "new",
    "project",
    "menu",
    "left",
    "going",
    "create",
    "new",
    "python",
    "file",
    "file",
    "file",
    "new",
    "python",
    "file",
    "let",
    "name",
    "file",
    "main",
    "really",
    "name",
    "anything",
    "select",
    "python",
    "file",
    "python",
    "files",
    "end",
    "py",
    "file",
    "extension",
    "main",
    "python",
    "file",
    "within",
    "python",
    "project",
    "folder",
    "going",
    "print",
    "something",
    "console",
    "window",
    "within",
    "main",
    "python",
    "file",
    "going",
    "write",
    "print",
    "statement",
    "type",
    "print",
    "add",
    "set",
    "parentheses",
    "set",
    "parentheses",
    "add",
    "set",
    "double",
    "quotes",
    "print",
    "something",
    "single",
    "quotes",
    "either",
    "one",
    "preference",
    "double",
    "quotes",
    "normally",
    "programming",
    "tutorial",
    "instructor",
    "would",
    "tell",
    "print",
    "something",
    "hello",
    "world",
    "like",
    "different",
    "instead",
    "think",
    "favorite",
    "food",
    "case",
    "like",
    "pizza",
    "print",
    "like",
    "pizza",
    "run",
    "python",
    "program",
    "click",
    "screen",
    "arrow",
    "run",
    "main",
    "python",
    "file",
    "console",
    "window",
    "displays",
    "output",
    "like",
    "pizza",
    "whatever",
    "favorite",
    "food",
    "let",
    "print",
    "another",
    "line",
    "code",
    "let",
    "print",
    "really",
    "good",
    "adding",
    "second",
    "print",
    "statement",
    "printing",
    "second",
    "line",
    "code",
    "discuss",
    "comments",
    "python",
    "interpreter",
    "output",
    "comments",
    "write",
    "comment",
    "use",
    "pound",
    "sign",
    "like",
    "call",
    "hashtag",
    "comment",
    "first",
    "python",
    "program",
    "comments",
    "used",
    "notes",
    "people",
    "reading",
    "code",
    "run",
    "code",
    "comment",
    "displayed",
    "output",
    "still",
    "like",
    "pizza",
    "really",
    "good",
    "right",
    "everybody",
    "first",
    "python",
    "program",
    "next",
    "topic",
    "discuss",
    "variables",
    "right",
    "everybody",
    "moving",
    "variables",
    "variable",
    "container",
    "value",
    "four",
    "different",
    "data",
    "types",
    "discuss",
    "strings",
    "integers",
    "floats",
    "booleans",
    "yes",
    "know",
    "silly",
    "name",
    "variable",
    "behaves",
    "value",
    "contains",
    "variable",
    "unique",
    "name",
    "let",
    "say",
    "variable",
    "first",
    "name",
    "assign",
    "variable",
    "use",
    "assignment",
    "operator",
    "equals",
    "text",
    "string",
    "series",
    "text",
    "double",
    "quotes",
    "single",
    "quotes",
    "preference",
    "double",
    "quotes",
    "type",
    "first",
    "name",
    "ible",
    "first",
    "name",
    "behave",
    "value",
    "series",
    "characters",
    "demonstrate",
    "going",
    "print",
    "first",
    "name",
    "variable",
    "place",
    "within",
    "print",
    "statement",
    "without",
    "quotes",
    "print",
    "first",
    "name",
    "want",
    "within",
    "quotes",
    "literally",
    "printing",
    "word",
    "first",
    "name",
    "could",
    "use",
    "variable",
    "along",
    "text",
    "using",
    "called",
    "f",
    "string",
    "easiest",
    "way",
    "display",
    "variable",
    "type",
    "f",
    "set",
    "quotes",
    "f",
    "means",
    "format",
    "let",
    "say",
    "word",
    "hello",
    "add",
    "variable",
    "insert",
    "variable",
    "text",
    "using",
    "f",
    "string",
    "need",
    "set",
    "curly",
    "braces",
    "insert",
    "variable",
    "result",
    "hello",
    "whatever",
    "first",
    "name",
    "case",
    "bro",
    "let",
    "create",
    "another",
    "variable",
    "let",
    "say",
    "variable",
    "food",
    "food",
    "equals",
    "think",
    "favorite",
    "food",
    "type",
    "pizza",
    "let",
    "print",
    "following",
    "like",
    "add",
    "placeholder",
    "using",
    "f",
    "string",
    "variable",
    "food",
    "hello",
    "bro",
    "like",
    "pizza",
    "let",
    "create",
    "email",
    "use",
    "email",
    "make",
    "one",
    "let",
    "say",
    "email",
    "bro1",
    "123",
    "let",
    "print",
    "email",
    "email",
    "placeholder",
    "display",
    "email",
    "variable",
    "email",
    "bro1",
    "123",
    "string",
    "going",
    "add",
    "comment",
    "strings",
    "string",
    "series",
    "characters",
    "include",
    "numbers",
    "treat",
    "characters",
    "integers",
    "integer",
    "whole",
    "number",
    "example",
    "could",
    "somebody",
    "age",
    "old",
    "according",
    "youtube",
    "statistics",
    "many",
    "ages",
    "18",
    "24",
    "let",
    "say",
    "25",
    "let",
    "zoom",
    "little",
    "integer",
    "within",
    "quotes",
    "would",
    "string",
    "technically",
    "would",
    "like",
    "work",
    "variable",
    "use",
    "f",
    "string",
    "let",
    "say",
    "placeholder",
    "display",
    "age",
    "variable",
    "years",
    "old",
    "25",
    "years",
    "old",
    "another",
    "example",
    "integer",
    "could",
    "quantity",
    "buying",
    "certain",
    "amount",
    "something",
    "maybe",
    "buying",
    "three",
    "items",
    "would",
    "half",
    "item",
    "would",
    "float",
    "technically",
    "rather",
    "integer",
    "buying",
    "three",
    "something",
    "let",
    "print",
    "following",
    "buying",
    "placeholder",
    "display",
    "quantity",
    "items",
    "25",
    "years",
    "old",
    "buying",
    "three",
    "items",
    "another",
    "example",
    "integer",
    "could",
    "amount",
    "people",
    "let",
    "say",
    "num",
    "students",
    "like",
    "classroom",
    "30",
    "students",
    "class",
    "print",
    "class",
    "placeholder",
    "students",
    "display",
    "number",
    "students",
    "num",
    "students",
    "class",
    "30",
    "students",
    "integers",
    "whole",
    "numbers",
    "make",
    "sure",
    "within",
    "quotes",
    "technically",
    "would",
    "string",
    "integers",
    "use",
    "arithmetic",
    "expressions",
    "strings",
    "could",
    "floats",
    "float",
    "means",
    "floating",
    "point",
    "number",
    "float",
    "number",
    "contains",
    "decimal",
    "portion",
    "example",
    "would",
    "price",
    "price",
    "something",
    "let",
    "print",
    "price",
    "print",
    "use",
    "f",
    "string",
    "price",
    "add",
    "placeholder",
    "display",
    "price",
    "price",
    "let",
    "preat",
    "placeholder",
    "unit",
    "currency",
    "pick",
    "american",
    "dollars",
    "feel",
    "free",
    "pick",
    "something",
    "else",
    "price",
    "floats",
    "contain",
    "decimal",
    "portion",
    "grade",
    "point",
    "average",
    "gp",
    "let",
    "say",
    "gpa",
    "print",
    "gpa",
    "display",
    "gpa",
    "gpa",
    "distance",
    "distance",
    "contain",
    "decimal",
    "portion",
    "kilm",
    "maybe",
    "print",
    "youan",
    "placeholder",
    "display",
    "distance",
    "add",
    "km",
    "kilometers",
    "could",
    "add",
    "mi",
    "miles",
    "stick",
    "kilometers",
    "ran",
    "km",
    "okay",
    "booleans",
    "boolean",
    "either",
    "true",
    "false",
    "let",
    "say",
    "student",
    "student",
    "equals",
    "student",
    "could",
    "say",
    "true",
    "true",
    "starts",
    "capital",
    "student",
    "let",
    "say",
    "graduate",
    "could",
    "say",
    "false",
    "first",
    "letter",
    "capital",
    "booleans",
    "two",
    "options",
    "true",
    "false",
    "let",
    "say",
    "student",
    "print",
    "student",
    "display",
    "boolean",
    "value",
    "student",
    "student",
    "true",
    "boolean",
    "values",
    "really",
    "output",
    "directly",
    "likely",
    "see",
    "used",
    "internally",
    "within",
    "program",
    "working",
    "statements",
    "topic",
    "discuss",
    "future",
    "worry",
    "may",
    "see",
    "student",
    "variable",
    "true",
    "print",
    "following",
    "need",
    "use",
    "fst",
    "string",
    "going",
    "insert",
    "variables",
    "student",
    "false",
    "add",
    "else",
    "clause",
    "print",
    "student",
    "variable",
    "student",
    "true",
    "print",
    "statement",
    "student",
    "false",
    "print",
    "whatever",
    "within",
    "else",
    "student",
    "let",
    "think",
    "examples",
    "something",
    "sale",
    "like",
    "car",
    "product",
    "sort",
    "let",
    "say",
    "true",
    "write",
    "another",
    "statement",
    "sale",
    "variable",
    "contains",
    "true",
    "following",
    "let",
    "print",
    "item",
    "sale",
    "else",
    "false",
    "print",
    "something",
    "else",
    "item",
    "available",
    "sale",
    "set",
    "true",
    "variable",
    "true",
    "print",
    "item",
    "sale",
    "else",
    "false",
    "print",
    "item",
    "available",
    "one",
    "example",
    "let",
    "say",
    "boolean",
    "variable",
    "online",
    "somebody",
    "online",
    "set",
    "true",
    "online",
    "true",
    "print",
    "online",
    "else",
    "print",
    "offline",
    "online",
    "set",
    "true",
    "print",
    "online",
    "else",
    "false",
    "print",
    "offline",
    "right",
    "everybody",
    "variables",
    "variable",
    "reusable",
    "container",
    "value",
    "four",
    "basic",
    "data",
    "types",
    "beginners",
    "string",
    "series",
    "text",
    "integers",
    "whole",
    "numbers",
    "floats",
    "numbers",
    "contain",
    "decimal",
    "portion",
    "booleans",
    "either",
    "true",
    "false",
    "binary",
    "assignment",
    "comment",
    "section",
    "post",
    "four",
    "variables",
    "post",
    "string",
    "integer",
    "float",
    "boolean",
    "try",
    "think",
    "unique",
    "example",
    "well",
    "everybody",
    "variables",
    "python",
    "right",
    "everybody",
    "moving",
    "type",
    "casting",
    "typ",
    "casting",
    "process",
    "converting",
    "variable",
    "one",
    "data",
    "type",
    "another",
    "various",
    "functions",
    "convert",
    "value",
    "variable",
    "string",
    "integer",
    "float",
    "boolean",
    "let",
    "create",
    "variables",
    "create",
    "name",
    "variable",
    "type",
    "full",
    "name",
    "name",
    "age",
    "make",
    "age",
    "gpa",
    "grade",
    "point",
    "average",
    "let",
    "say",
    "minus",
    "boolean",
    "student",
    "currently",
    "student",
    "let",
    "say",
    "true",
    "actually",
    "could",
    "get",
    "data",
    "type",
    "variable",
    "value",
    "using",
    "type",
    "function",
    "pass",
    "value",
    "variable",
    "however",
    "run",
    "output",
    "need",
    "print",
    "statement",
    "print",
    "returned",
    "type",
    "function",
    "get",
    "type",
    "name",
    "variable",
    "print",
    "name",
    "variable",
    "string",
    "st",
    "str",
    "age",
    "variable",
    "integer",
    "int",
    "gpa",
    "float",
    "student",
    "boolean",
    "using",
    "typ",
    "cast",
    "functions",
    "convert",
    "one",
    "data",
    "type",
    "another",
    "let",
    "start",
    "something",
    "simple",
    "let",
    "convert",
    "gpa",
    "integer",
    "currently",
    "float",
    "reassign",
    "gpa",
    "use",
    "int",
    "function",
    "typ",
    "cast",
    "integer",
    "pass",
    "gpa",
    "end",
    "print",
    "gpa",
    "typ",
    "cast",
    "whole",
    "integer",
    "would",
    "result",
    "whole",
    "integer",
    "three",
    "truncate",
    "decimal",
    "portion",
    "let",
    "convert",
    "age",
    "floating",
    "point",
    "number",
    "reassign",
    "variable",
    "age",
    "use",
    "typ",
    "cast",
    "function",
    "float",
    "insert",
    "age",
    "variable",
    "let",
    "print",
    "age",
    "variable",
    "floating",
    "point",
    "number",
    "cover",
    "strings",
    "let",
    "typ",
    "cast",
    "age",
    "string",
    "age",
    "equals",
    "call",
    "typ",
    "cast",
    "function",
    "string",
    "st",
    "str",
    "passing",
    "age",
    "variable",
    "result",
    "still",
    "going",
    "appear",
    "25",
    "however",
    "string",
    "integer",
    "prove",
    "enclose",
    "age",
    "variable",
    "type",
    "function",
    "type",
    "variable",
    "age",
    "string",
    "would",
    "taking",
    "number",
    "enclosing",
    "within",
    "quotes",
    "would",
    "make",
    "difference",
    "let",
    "say",
    "add",
    "one",
    "age",
    "age",
    "plus",
    "equals",
    "1",
    "well",
    "would",
    "get",
    "type",
    "error",
    "concatenate",
    "strings",
    "integers",
    "string",
    "however",
    "add",
    "string",
    "one",
    "end",
    "would",
    "using",
    "string",
    "concat",
    "ation",
    "let",
    "say",
    "birthday",
    "add",
    "one",
    "25",
    "well",
    "since",
    "working",
    "strings",
    "result",
    "would",
    "251",
    "251",
    "years",
    "old",
    "strings",
    "numbers",
    "behave",
    "differently",
    "numbers",
    "use",
    "within",
    "arithmetic",
    "expressions",
    "strings",
    "much",
    "take",
    "name",
    "variable",
    "typ",
    "cast",
    "boolean",
    "name",
    "equals",
    "call",
    "typ",
    "cast",
    "function",
    "bu",
    "passing",
    "name",
    "variable",
    "interesting",
    "result",
    "going",
    "print",
    "name",
    "booleans",
    "either",
    "true",
    "false",
    "typ",
    "cast",
    "string",
    "text",
    "boolean",
    "gives",
    "true",
    "really",
    "matter",
    "write",
    "change",
    "name",
    "single",
    "character",
    "b",
    "would",
    "still",
    "true",
    "string",
    "variable",
    "empty",
    "characters",
    "within",
    "would",
    "actually",
    "give",
    "us",
    "false",
    "could",
    "use",
    "check",
    "see",
    "somebody",
    "enters",
    "name",
    "somebody",
    "types",
    "name",
    "typ",
    "cast",
    "boolean",
    "somebody",
    "skips",
    "entering",
    "name",
    "would",
    "return",
    "false",
    "could",
    "reprompt",
    "user",
    "enter",
    "name",
    "right",
    "everybody",
    "typ",
    "casting",
    "process",
    "converting",
    "variable",
    "one",
    "data",
    "type",
    "another",
    "especially",
    "useful",
    "handling",
    "user",
    "input",
    "user",
    "input",
    "always",
    "string",
    "may",
    "times",
    "want",
    "convert",
    "integer",
    "float",
    "boolean",
    "well",
    "everybody",
    "typ",
    "casting",
    "python",
    "right",
    "everybody",
    "topic",
    "going",
    "show",
    "accept",
    "user",
    "input",
    "python",
    "use",
    "input",
    "function",
    "function",
    "prompts",
    "user",
    "enter",
    "data",
    "returns",
    "enter",
    "data",
    "string",
    "example",
    "accept",
    "user",
    "input",
    "call",
    "input",
    "function",
    "run",
    "program",
    "need",
    "enter",
    "data",
    "console",
    "window",
    "like",
    "hit",
    "enter",
    "however",
    "need",
    "prompt",
    "need",
    "tell",
    "user",
    "want",
    "type",
    "let",
    "ask",
    "question",
    "prompt",
    "within",
    "quotes",
    "let",
    "say",
    "name",
    "let",
    "try",
    "name",
    "type",
    "something",
    "go",
    "ahead",
    "type",
    "full",
    "name",
    "hit",
    "enter",
    "input",
    "quite",
    "anything",
    "input",
    "function",
    "going",
    "return",
    "data",
    "string",
    "assign",
    "variable",
    "would",
    "like",
    "let",
    "create",
    "variable",
    "name",
    "name",
    "equals",
    "user",
    "input",
    "name",
    "let",
    "print",
    "message",
    "use",
    "f",
    "string",
    "print",
    "hello",
    "add",
    "placeholder",
    "insert",
    "name",
    "variable",
    "within",
    "placeholder",
    "let",
    "try",
    "name",
    "type",
    "name",
    "hit",
    "enter",
    "hello",
    "whatever",
    "name",
    "let",
    "try",
    "different",
    "name",
    "pick",
    "spongebob",
    "many",
    "people",
    "familiar",
    "spongebob",
    "hello",
    "spongebob",
    "time",
    "ask",
    "user",
    "old",
    "let",
    "assign",
    "variable",
    "age",
    "equals",
    "accept",
    "user",
    "input",
    "need",
    "prompt",
    "within",
    "quotes",
    "old",
    "age",
    "variable",
    "let",
    "print",
    "use",
    "f",
    "string",
    "placeholder",
    "variable",
    "age",
    "years",
    "old",
    "name",
    "type",
    "name",
    "old",
    "let",
    "say",
    "25",
    "hello",
    "whatever",
    "name",
    "whatever",
    "age",
    "years",
    "old",
    "right",
    "let",
    "say",
    "birthday",
    "print",
    "age",
    "variable",
    "let",
    "say",
    "happy",
    "birthday",
    "since",
    "inserting",
    "variables",
    "within",
    "print",
    "statement",
    "need",
    "f",
    "string",
    "want",
    "use",
    "f",
    "string",
    "want",
    "insert",
    "variables",
    "display",
    "user",
    "age",
    "let",
    "take",
    "user",
    "age",
    "increase",
    "one",
    "could",
    "say",
    "age",
    "equals",
    "age",
    "1",
    "one",
    "problem",
    "type",
    "name",
    "old",
    "type",
    "age",
    "problem",
    "type",
    "error",
    "concatenate",
    "strings",
    "integers",
    "strings",
    "accept",
    "user",
    "input",
    "store",
    "input",
    "string",
    "increment",
    "age",
    "one",
    "need",
    "convert",
    "integer",
    "ca",
    "normally",
    "use",
    "strings",
    "within",
    "arithmetic",
    "expressions",
    "integers",
    "floats",
    "though",
    "accept",
    "user",
    "input",
    "age",
    "variable",
    "could",
    "take",
    "age",
    "variable",
    "typ",
    "cast",
    "integer",
    "talked",
    "previous",
    "lesson",
    "let",
    "say",
    "age",
    "equals",
    "age",
    "typ",
    "cast",
    "increment",
    "one",
    "type",
    "name",
    "type",
    "age",
    "get",
    "message",
    "hello",
    "name",
    "happy",
    "birthday",
    "whatever",
    "age",
    "years",
    "old",
    "strings",
    "ca",
    "normally",
    "use",
    "arithmetic",
    "expressions",
    "would",
    "typ",
    "cast",
    "integer",
    "float",
    "however",
    "could",
    "condense",
    "steps",
    "taking",
    "extra",
    "line",
    "type",
    "cast",
    "age",
    "integer",
    "could",
    "instead",
    "accept",
    "user",
    "input",
    "enclose",
    "input",
    "function",
    "within",
    "typ",
    "cast",
    "int",
    "would",
    "work",
    "type",
    "name",
    "type",
    "age",
    "works",
    "takes",
    "less",
    "lines",
    "code",
    "readable",
    "would",
    "say",
    "accept",
    "user",
    "input",
    "returns",
    "input",
    "string",
    "data",
    "type",
    "typ",
    "cast",
    "another",
    "data",
    "type",
    "need",
    "case",
    "age",
    "go",
    "couple",
    "exercises",
    "important",
    "practice",
    "learned",
    "first",
    "exercise",
    "going",
    "calculate",
    "area",
    "rectangle",
    "need",
    "prompt",
    "user",
    "enter",
    "length",
    "width",
    "rectangle",
    "create",
    "variable",
    "length",
    "accept",
    "user",
    "input",
    "using",
    "input",
    "function",
    "prompt",
    "let",
    "say",
    "enter",
    "length",
    "let",
    "width",
    "copy",
    "paste",
    "width",
    "equals",
    "enter",
    "width",
    "length",
    "width",
    "get",
    "area",
    "rectangle",
    "multiply",
    "length",
    "width",
    "let",
    "say",
    "area",
    "equals",
    "length",
    "variable",
    "use",
    "mult",
    "multiplication",
    "use",
    "asterisk",
    "discuss",
    "different",
    "arithmetic",
    "operators",
    "next",
    "lesson",
    "length",
    "time",
    "width",
    "area",
    "going",
    "print",
    "area",
    "need",
    "test",
    "something",
    "enter",
    "length",
    "let",
    "say",
    "5",
    "5",
    "5",
    "cm",
    "matter",
    "enter",
    "width",
    "six",
    "get",
    "type",
    "error",
    "ca",
    "multiply",
    "sequence",
    "integer",
    "type",
    "string",
    "accept",
    "user",
    "input",
    "returns",
    "value",
    "string",
    "data",
    "type",
    "ca",
    "use",
    "strings",
    "arithmetic",
    "expressions",
    "multiplying",
    "length",
    "times",
    "width",
    "would",
    "need",
    "tycast",
    "integer",
    "float",
    "since",
    "working",
    "basic",
    "geometry",
    "calculating",
    "area",
    "let",
    "float",
    "let",
    "typ",
    "cast",
    "user",
    "input",
    "float",
    "length",
    "width",
    "okay",
    "let",
    "try",
    "let",
    "say",
    "5",
    "6",
    "area",
    "returned",
    "us",
    "30",
    "result",
    "contains",
    "decimal",
    "floating",
    "point",
    "number",
    "float",
    "print",
    "area",
    "use",
    "f",
    "string",
    "time",
    "area",
    "add",
    "placeholder",
    "display",
    "area",
    "variable",
    "let",
    "add",
    "unit",
    "measurement",
    "afterwards",
    "pick",
    "centimet",
    "since",
    "working",
    "areas",
    "would",
    "like",
    "technically",
    "accurate",
    "could",
    "say",
    "power",
    "two",
    "could",
    "add",
    "superscript",
    "would",
    "like",
    "superscript",
    "2",
    "windows",
    "make",
    "sure",
    "numlock",
    "hold",
    "alt",
    "type",
    "numpad",
    "0178",
    "superscript",
    "two",
    "really",
    "necessary",
    "lesson",
    "think",
    "cool",
    "include",
    "technically",
    "accurate",
    "right",
    "let",
    "say",
    "length",
    "width",
    "area",
    "cm",
    "squared",
    "working",
    "areas",
    "let",
    "cover",
    "second",
    "exercise",
    "time",
    "create",
    "shopping",
    "cart",
    "program",
    "exercise",
    "two",
    "going",
    "create",
    "shopping",
    "cart",
    "program",
    "need",
    "three",
    "variables",
    "item",
    "price",
    "quantity",
    "items",
    "create",
    "variable",
    "item",
    "accept",
    "user",
    "input",
    "item",
    "would",
    "like",
    "buy",
    "trying",
    "purchase",
    "keep",
    "data",
    "type",
    "user",
    "input",
    "string",
    "need",
    "price",
    "price",
    "item",
    "buying",
    "use",
    "input",
    "function",
    "price",
    "price",
    "floating",
    "point",
    "number",
    "example",
    "might",
    "dollars",
    "sense",
    "need",
    "decimal",
    "let",
    "typ",
    "cast",
    "input",
    "float",
    "quantity",
    "accept",
    "user",
    "input",
    "prompt",
    "many",
    "would",
    "like",
    "quantities",
    "whole",
    "numbers",
    "let",
    "type",
    "cast",
    "input",
    "integer",
    "total",
    "total",
    "pay",
    "let",
    "take",
    "price",
    "item",
    "use",
    "asterisk",
    "multiply",
    "quantity",
    "let",
    "test",
    "run",
    "let",
    "print",
    "total",
    "item",
    "would",
    "like",
    "buy",
    "let",
    "say",
    "pizza",
    "price",
    "many",
    "would",
    "like",
    "would",
    "like",
    "five",
    "pizzas",
    "total",
    "let",
    "say",
    "display",
    "total",
    "let",
    "print",
    "following",
    "use",
    "f",
    "string",
    "bought",
    "insert",
    "placeholder",
    "display",
    "quantity",
    "x",
    "item",
    "items",
    "add",
    "sls",
    "print",
    "use",
    "fst",
    "string",
    "total",
    "display",
    "total",
    "item",
    "would",
    "like",
    "buy",
    "would",
    "like",
    "buy",
    "pizza",
    "price",
    "many",
    "would",
    "like",
    "would",
    "like",
    "nine",
    "pizzas",
    "going",
    "eat",
    "bought",
    "9",
    "x",
    "pizzas",
    "total",
    "right",
    "everybody",
    "accept",
    "user",
    "input",
    "python",
    "covered",
    "exercises",
    "next",
    "topic",
    "going",
    "create",
    "mad",
    "libs",
    "game",
    "accept",
    "user",
    "input",
    "python",
    "right",
    "everybody",
    "video",
    "going",
    "create",
    "game",
    "mad",
    "libs",
    "want",
    "would",
    "good",
    "exercise",
    "us",
    "comfortable",
    "accepting",
    "user",
    "input",
    "familiar",
    "madlibs",
    "madlibs",
    "word",
    "game",
    "create",
    "story",
    "filling",
    "blanks",
    "random",
    "words",
    "going",
    "create",
    "story",
    "template",
    "story",
    "going",
    "missing",
    "components",
    "fill",
    "components",
    "random",
    "words",
    "type",
    "story",
    "written",
    "print",
    "use",
    "fst",
    "string",
    "today",
    "went",
    "insert",
    "placeholder",
    "zoo",
    "placeholder",
    "insert",
    "adjective",
    "insert",
    "variable",
    "named",
    "adjective",
    "adjective",
    "adjective",
    "one",
    "going",
    "get",
    "english",
    "lesson",
    "today",
    "adjective",
    "description",
    "something",
    "zoo",
    "adjective",
    "one",
    "could",
    "expensive",
    "large",
    "dirty",
    "adjective",
    "describe",
    "something",
    "fill",
    "accept",
    "user",
    "input",
    "second",
    "print",
    "statement",
    "let",
    "print",
    "following",
    "exhibit",
    "saw",
    "placeholder",
    "include",
    "noun",
    "noun",
    "one",
    "noun",
    "person",
    "place",
    "thing",
    "english",
    "maybe",
    "gorilla",
    "gorilla",
    "named",
    "harambe",
    "example",
    "print",
    "use",
    "fst",
    "string",
    "let",
    "say",
    "noun",
    "one",
    "whatever",
    "reuse",
    "variables",
    "create",
    "second",
    "adjective",
    "adjective",
    "2",
    "describing",
    "whatever",
    "noun",
    "one",
    "person",
    "place",
    "thing",
    "insert",
    "verb",
    "verb",
    "one",
    "verb",
    "action",
    "running",
    "eating",
    "last",
    "statement",
    "let",
    "print",
    "placeholder",
    "create",
    "adjective",
    "three",
    "adjective",
    "3",
    "describe",
    "us",
    "going",
    "fill",
    "variables",
    "accepting",
    "user",
    "input",
    "going",
    "fill",
    "adjective",
    "one",
    "accept",
    "user",
    "input",
    "using",
    "input",
    "function",
    "enter",
    "adjective",
    "going",
    "add",
    "reminder",
    "adjective",
    "description",
    "something",
    "need",
    "noun",
    "one",
    "noun",
    "one",
    "equals",
    "input",
    "enter",
    "noun",
    "noun",
    "person",
    "place",
    "thing",
    "adjective",
    "two",
    "copy",
    "adjective",
    "one",
    "paste",
    "change",
    "one",
    "two",
    "verb",
    "verb",
    "one",
    "equals",
    "input",
    "enter",
    "verb",
    "want",
    "verb",
    "one",
    "current",
    "tense",
    "ask",
    "ask",
    "user",
    "end",
    "verb",
    "ing",
    "enter",
    "verb",
    "ending",
    "withg",
    "current",
    "tense",
    "person",
    "place",
    "thing",
    "noun",
    "one",
    "currently",
    "something",
    "eating",
    "adjective",
    "three",
    "copy",
    "one",
    "adjectives",
    "adjective",
    "three",
    "equals",
    "input",
    "enter",
    "adjective",
    "okay",
    "ready",
    "run",
    "enter",
    "adjective",
    "adjective",
    "describes",
    "something",
    "say",
    "suspicious",
    "kids",
    "like",
    "say",
    "sussy",
    "sus",
    "even",
    "also",
    "heard",
    "kids",
    "nowadays",
    "using",
    "word",
    "skibidi",
    "feel",
    "free",
    "type",
    "whatever",
    "would",
    "like",
    "story",
    "going",
    "say",
    "suspicious",
    "enter",
    "noun",
    "person",
    "place",
    "thing",
    "like",
    "poke",
    "fun",
    "mark",
    "zuckerberg",
    "going",
    "say",
    "person",
    "mark",
    "zuckerberg",
    "enter",
    "adjective",
    "description",
    "angry",
    "enter",
    "verb",
    "ending",
    "ing",
    "current",
    "tense",
    "uh",
    "screeching",
    "enter",
    "adjective",
    "happy",
    "story",
    "today",
    "went",
    "suspicious",
    "zoo",
    "exhibit",
    "saw",
    "mark",
    "zuckerberg",
    "mark",
    "zuckerberg",
    "angry",
    "screeching",
    "happy",
    "game",
    "mad",
    "libs",
    "word",
    "game",
    "create",
    "story",
    "filling",
    "blanks",
    "random",
    "words",
    "also",
    "post",
    "output",
    "mad",
    "libs",
    "game",
    "comment",
    "section",
    "really",
    "want",
    "read",
    "want",
    "see",
    "guys",
    "came",
    "well",
    "everybody",
    "mad",
    "libs",
    "game",
    "using",
    "python",
    "hey",
    "everybody",
    "video",
    "going",
    "show",
    "different",
    "math",
    "need",
    "throughout",
    "rest",
    "series",
    "lot",
    "cover",
    "split",
    "video",
    "different",
    "sections",
    "cover",
    "basic",
    "arithmetic",
    "operators",
    "math",
    "functions",
    "functions",
    "math",
    "module",
    "exercises",
    "sure",
    "look",
    "time",
    "stamps",
    "would",
    "like",
    "skip",
    "ahead",
    "another",
    "section",
    "let",
    "begin",
    "really",
    "easy",
    "stuff",
    "going",
    "cover",
    "basic",
    "arithmetic",
    "operators",
    "let",
    "say",
    "variable",
    "friends",
    "current",
    "ly",
    "zero",
    "friends",
    "need",
    "increment",
    "variable",
    "one",
    "could",
    "say",
    "friends",
    "name",
    "variable",
    "equals",
    "name",
    "variable",
    "one",
    "plus",
    "sign",
    "addition",
    "operator",
    "think",
    "little",
    "bit",
    "experience",
    "already",
    "print",
    "variable",
    "friends",
    "guess",
    "one",
    "friend",
    "could",
    "also",
    "shorten",
    "line",
    "code",
    "could",
    "say",
    "friends",
    "plus",
    "equals",
    "1",
    "would",
    "thing",
    "known",
    "augmented",
    "assignment",
    "operator",
    "give",
    "result",
    "prefer",
    "use",
    "augmented",
    "assignment",
    "operators",
    "take",
    "less",
    "text",
    "think",
    "easier",
    "read",
    "let",
    "use",
    "subtraction",
    "friends",
    "equals",
    "friends",
    "minus",
    "two",
    "course",
    "minus",
    "subtraction",
    "operator",
    "uh",
    "netive",
    "friends",
    "guess",
    "use",
    "augmented",
    "assignment",
    "operator",
    "would",
    "friends",
    "minus",
    "equals",
    "2",
    "still",
    "friends",
    "okay",
    "multiplication",
    "let",
    "change",
    "friends",
    "five",
    "friends",
    "equals",
    "friends",
    "time",
    "3",
    "15",
    "friends",
    "augmented",
    "assignment",
    "operator",
    "version",
    "would",
    "friends",
    "times",
    "equal",
    "3",
    "15",
    "friends",
    "let",
    "cover",
    "division",
    "friends",
    "equals",
    "friends",
    "divided",
    "2",
    "friends",
    "somebody",
    "cut",
    "half",
    "half",
    "friend",
    "maybe",
    "legs",
    "torso",
    "something",
    "augmented",
    "assignment",
    "operator",
    "would",
    "friends",
    "id",
    "equal",
    "2",
    "result",
    "still",
    "exponents",
    "friends",
    "equals",
    "friends",
    "power",
    "two",
    "friends",
    "currently",
    "five",
    "friends",
    "power",
    "two",
    "would",
    "5",
    "5",
    "25",
    "augmented",
    "assignment",
    "operator",
    "version",
    "equation",
    "would",
    "friends",
    "exponent",
    "equals",
    "2",
    "friends",
    "25",
    "modulus",
    "modulus",
    "gives",
    "remainder",
    "division",
    "suppose",
    "10",
    "friends",
    "instead",
    "five",
    "assign",
    "new",
    "variable",
    "remainder",
    "remainder",
    "equals",
    "friends",
    "percent",
    "sign",
    "known",
    "modulus",
    "operator",
    "give",
    "us",
    "remainder",
    "division",
    "divide",
    "group",
    "friends",
    "three",
    "one",
    "remaining",
    "store",
    "remainder",
    "within",
    "separate",
    "variable",
    "would",
    "remainder",
    "one",
    "kind",
    "like",
    "class",
    "teacher",
    "says",
    "everybody",
    "class",
    "go",
    "groups",
    "three",
    "always",
    "one",
    "kid",
    "kind",
    "concept",
    "dividing",
    "friends",
    "groups",
    "three",
    "modulus",
    "give",
    "remainder",
    "divided",
    "group",
    "friends",
    "groups",
    "two",
    "well",
    "10",
    "divides",
    "two",
    "evenly",
    "remainder",
    "modulus",
    "oper",
    "operator",
    "fairly",
    "popular",
    "use",
    "operator",
    "find",
    "number",
    "even",
    "odd",
    "divide",
    "two",
    "evenly",
    "number",
    "even",
    "remainder",
    "one",
    "means",
    "original",
    "number",
    "odd",
    "okay",
    "yeah",
    "basic",
    "arithmetic",
    "operators",
    "addition",
    "subtraction",
    "multiplication",
    "division",
    "exponentiation",
    "modulus",
    "going",
    "cover",
    "math",
    "related",
    "functions",
    "suppose",
    "three",
    "variables",
    "x",
    "4",
    "z",
    "5",
    "matter",
    "floating",
    "point",
    "numbers",
    "whole",
    "integers",
    "first",
    "round",
    "function",
    "variable",
    "named",
    "result",
    "going",
    "round",
    "x",
    "round",
    "function",
    "set",
    "parentheses",
    "add",
    "value",
    "variable",
    "rounded",
    "round",
    "x",
    "nearest",
    "whole",
    "integer",
    "print",
    "result",
    "result",
    "three",
    "round",
    "function",
    "absolute",
    "value",
    "function",
    "find",
    "absolute",
    "value",
    "number",
    "uh",
    "let",
    "change",
    "be4",
    "instead",
    "four",
    "take",
    "result",
    "equals",
    "abs",
    "means",
    "absolute",
    "value",
    "absolute",
    "value",
    "distance",
    "away",
    "zero",
    "whole",
    "number",
    "absolute",
    "value",
    "4",
    "let",
    "change",
    "back",
    "four",
    "power",
    "function",
    "result",
    "equals",
    "pow",
    "need",
    "base",
    "exponent",
    "power",
    "3",
    "would",
    "4",
    "4",
    "4",
    "64",
    "power",
    "function",
    "raise",
    "base",
    "given",
    "power",
    "next",
    "two",
    "really",
    "useful",
    "using",
    "max",
    "function",
    "find",
    "maximum",
    "value",
    "various",
    "values",
    "maximum",
    "value",
    "x",
    "z",
    "need",
    "store",
    "value",
    "uh",
    "results",
    "equals",
    "max",
    "x",
    "z",
    "well",
    "maximum",
    "value",
    "five",
    "wise",
    "min",
    "minimum",
    "value",
    "x",
    "z",
    "would",
    "next",
    "section",
    "useful",
    "constants",
    "functions",
    "math",
    "class",
    "need",
    "import",
    "math",
    "module",
    "top",
    "text",
    "editor",
    "import",
    "math",
    "need",
    "value",
    "pi",
    "type",
    "name",
    "math",
    "module",
    "pi",
    "going",
    "print",
    "print",
    "math",
    "pi",
    "value",
    "pi",
    "bunch",
    "digits",
    "come",
    "working",
    "physics",
    "know",
    "people",
    "use",
    "constant",
    "e",
    "lot",
    "wo",
    "using",
    "e",
    "video",
    "series",
    "ever",
    "need",
    "access",
    "type",
    "math",
    "e",
    "give",
    "e",
    "something",
    "something",
    "something",
    "believe",
    "e",
    "known",
    "exponential",
    "constant",
    "need",
    "square",
    "root",
    "number",
    "let",
    "say",
    "result",
    "equals",
    "place",
    "variable",
    "value",
    "within",
    "square",
    "root",
    "function",
    "uh",
    "let",
    "say",
    "x",
    "x",
    "9",
    "square",
    "root",
    "x",
    "print",
    "whatever",
    "result",
    "square",
    "root",
    "9",
    "three",
    "square",
    "root",
    "function",
    "ceiling",
    "function",
    "result",
    "equals",
    "math",
    "seal",
    "seal",
    "always",
    "round",
    "floating",
    "point",
    "number",
    "suppose",
    "x",
    "rounded",
    "10",
    "otherwise",
    "floor",
    "always",
    "round",
    "number",
    "result",
    "equals",
    "equal",
    "math",
    "floor",
    "let",
    "change",
    "x",
    "rounded",
    "nine",
    "useful",
    "math",
    "functions",
    "let",
    "go",
    "exercises",
    "okay",
    "first",
    "exercise",
    "going",
    "calculate",
    "circumference",
    "circle",
    "need",
    "help",
    "math",
    "module",
    "good",
    "functions",
    "calculate",
    "circumference",
    "circle",
    "formula",
    "2",
    "r",
    "let",
    "ask",
    "user",
    "radius",
    "r",
    "accept",
    "user",
    "input",
    "enter",
    "radius",
    "circle",
    "type",
    "cast",
    "input",
    "floating",
    "point",
    "number",
    "calculate",
    "circumference",
    "equation",
    "2",
    "pi",
    "get",
    "math",
    "module",
    "times",
    "whatever",
    "radius",
    "user",
    "going",
    "type",
    "print",
    "whatever",
    "circumferences",
    "print",
    "use",
    "fst",
    "string",
    "circumference",
    "variable",
    "circumference",
    "enter",
    "radius",
    "circle",
    "enter",
    "10",
    "actually",
    "circumference",
    "65",
    "want",
    "round",
    "truncate",
    "numbers",
    "use",
    "round",
    "function",
    "around",
    "circumference",
    "round",
    "given",
    "decimal",
    "place",
    "round",
    "two",
    "digits",
    "rounded",
    "7",
    "could",
    "add",
    "unit",
    "measurement",
    "let",
    "say",
    "centim",
    "7",
    "cm",
    "right",
    "first",
    "exercise",
    "next",
    "exercise",
    "let",
    "calculate",
    "area",
    "circle",
    "import",
    "math",
    "module",
    "ask",
    "radius",
    "much",
    "like",
    "radius",
    "equals",
    "input",
    "enter",
    "radius",
    "circle",
    "cast",
    "input",
    "floating",
    "point",
    "number",
    "equation",
    "area",
    "circle",
    "pi",
    "times",
    "radius",
    "squared",
    "could",
    "easily",
    "use",
    "power",
    "function",
    "raise",
    "radius",
    "power",
    "two",
    "display",
    "area",
    "print",
    "using",
    "f",
    "string",
    "area",
    "circle",
    "area",
    "unit",
    "measurement",
    "let",
    "say",
    "centim",
    "squared",
    "enter",
    "radius",
    "circle",
    "area",
    "circle",
    "34636",
    "would",
    "like",
    "round",
    "number",
    "two",
    "decimal",
    "places",
    "use",
    "round",
    "function",
    "place",
    "area",
    "number",
    "digits",
    "round",
    "two",
    "within",
    "function",
    "let",
    "try",
    "area",
    "circle",
    "34636",
    "cm",
    "squared",
    "second",
    "exercise",
    "last",
    "program",
    "going",
    "find",
    "hypotenuse",
    "right",
    "triangle",
    "formula",
    "calculate",
    "hypotenuse",
    "right",
    "angled",
    "triangle",
    "c",
    "theare",
    "tk",
    "a2",
    "begin",
    "importing",
    "math",
    "module",
    "ask",
    "user",
    "lengths",
    "side",
    "b",
    "equals",
    "input",
    "enter",
    "side",
    "cast",
    "input",
    "floating",
    "point",
    "number",
    "thing",
    "side",
    "b",
    "b",
    "equals",
    "enter",
    "side",
    "b",
    "part",
    "going",
    "confusing",
    "calculate",
    "c",
    "need",
    "take",
    "power",
    "two",
    "plus",
    "b",
    "two",
    "need",
    "square",
    "root",
    "whatever",
    "result",
    "surround",
    "equation",
    "math",
    "square",
    "root",
    "give",
    "us",
    "answer",
    "let",
    "print",
    "using",
    "f",
    "string",
    "side",
    "c",
    "equals",
    "whatever",
    "c",
    "enter",
    "side",
    "three",
    "side",
    "b",
    "four",
    "side",
    "c",
    "five",
    "right",
    "everybody",
    "everything",
    "related",
    "arithmetic",
    "operators",
    "math",
    "related",
    "functions",
    "python",
    "next",
    "video",
    "going",
    "cover",
    "things",
    "involving",
    "string",
    "music",
    "formatting",
    "hey",
    "everybody",
    "topic",
    "going",
    "explain",
    "statements",
    "statement",
    "used",
    "code",
    "condition",
    "set",
    "true",
    "l",
    "could",
    "something",
    "else",
    "basic",
    "form",
    "decision",
    "making",
    "true",
    "something",
    "true",
    "let",
    "ask",
    "user",
    "age",
    "age",
    "equals",
    "input",
    "enter",
    "age",
    "type",
    "cast",
    "input",
    "integer",
    "depending",
    "user",
    "age",
    "one",
    "things",
    "let",
    "pretend",
    "user",
    "would",
    "like",
    "sign",
    "credit",
    "card",
    "order",
    "age",
    "needs",
    "greater",
    "equal",
    "18",
    "well",
    "check",
    "use",
    "statement",
    "type",
    "condition",
    "would",
    "like",
    "check",
    "let",
    "check",
    "see",
    "user",
    "age",
    "greater",
    "equal",
    "18",
    "add",
    "colon",
    "hit",
    "enter",
    "code",
    "underneath",
    "statement",
    "indented",
    "make",
    "sure",
    "pay",
    "attention",
    "easy",
    "miss",
    "user",
    "age",
    "greater",
    "equal",
    "18",
    "let",
    "print",
    "signed",
    "run",
    "code",
    "type",
    "age",
    "type",
    "21",
    "hit",
    "enter",
    "statement",
    "true",
    "therefore",
    "execute",
    "code",
    "found",
    "within",
    "statement",
    "signed",
    "condition",
    "true",
    "let",
    "say",
    "age",
    "13",
    "well",
    "nothing",
    "happens",
    "condition",
    "check",
    "instead",
    "false",
    "skip",
    "code",
    "need",
    "take",
    "different",
    "course",
    "action",
    "could",
    "add",
    "else",
    "statement",
    "true",
    "else",
    "something",
    "else",
    "let",
    "print",
    "different",
    "message",
    "must",
    "18",
    "plus",
    "sign",
    "type",
    "age",
    "say",
    "13",
    "hit",
    "enter",
    "must",
    "18",
    "plus",
    "sign",
    "basically",
    "statement",
    "code",
    "condition",
    "true",
    "else",
    "something",
    "else",
    "entirely",
    "basic",
    "form",
    "decision",
    "making",
    "lse",
    "statement",
    "kind",
    "like",
    "last",
    "resort",
    "check",
    "one",
    "condition",
    "reaching",
    "lse",
    "statement",
    "add",
    "else",
    "statement",
    "shorten",
    "e",
    "l",
    "meaning",
    "else",
    "else",
    "let",
    "check",
    "age",
    "less",
    "zero",
    "print",
    "different",
    "message",
    "born",
    "yet",
    "run",
    "code",
    "say",
    "age",
    "ne",
    "condition",
    "false",
    "skip",
    "code",
    "condition",
    "true",
    "therefore",
    "execute",
    "code",
    "skip",
    "lse",
    "statement",
    "born",
    "yet",
    "let",
    "add",
    "another",
    "lf",
    "statement",
    "add",
    "many",
    "el",
    "statements",
    "want",
    "let",
    "check",
    "see",
    "somebody",
    "age",
    "greater",
    "equal",
    "100",
    "print",
    "different",
    "message",
    "let",
    "print",
    "old",
    "sign",
    "say",
    "age",
    "111",
    "years",
    "old",
    "well",
    "states",
    "signed",
    "reason",
    "reach",
    "part",
    "else",
    "statement",
    "condition",
    "still",
    "technically",
    "true",
    "need",
    "pay",
    "attention",
    "order",
    "else",
    "statements",
    "want",
    "sure",
    "nobody",
    "100",
    "signing",
    "probably",
    "move",
    "beginning",
    "age",
    "greater",
    "equal",
    "100",
    "else",
    "age",
    "greater",
    "equal",
    "18",
    "something",
    "else",
    "age",
    "111",
    "years",
    "old",
    "old",
    "sign",
    "statements",
    "condition",
    "true",
    "something",
    "else",
    "check",
    "something",
    "else",
    "conditions",
    "true",
    "could",
    "something",
    "else",
    "entirely",
    "kind",
    "like",
    "default",
    "another",
    "example",
    "ask",
    "user",
    "would",
    "like",
    "food",
    "response",
    "equals",
    "input",
    "would",
    "like",
    "food",
    "user",
    "type",
    "yes",
    "n",
    "response",
    "check",
    "see",
    "two",
    "values",
    "equal",
    "would",
    "use",
    "double",
    "equals",
    "response",
    "equal",
    "print",
    "food",
    "doubles",
    "equal",
    "sign",
    "comparison",
    "operator",
    "check",
    "see",
    "two",
    "values",
    "equal",
    "want",
    "one",
    "equals",
    "assignment",
    "operator",
    "python",
    "case",
    "thinks",
    "attempting",
    "assign",
    "character",
    "response",
    "comparisons",
    "use",
    "double",
    "equals",
    "else",
    "print",
    "food",
    "would",
    "like",
    "food",
    "type",
    "food",
    "let",
    "try",
    "type",
    "food",
    "third",
    "example",
    "user",
    "type",
    "name",
    "name",
    "equals",
    "input",
    "enter",
    "name",
    "name",
    "equal",
    "empty",
    "string",
    "means",
    "type",
    "anything",
    "let",
    "yell",
    "user",
    "type",
    "name",
    "else",
    "print",
    "using",
    "f",
    "string",
    "hello",
    "whatever",
    "name",
    "enter",
    "name",
    "going",
    "hit",
    "enter",
    "type",
    "name",
    "let",
    "run",
    "type",
    "name",
    "executed",
    "l",
    "statement",
    "time",
    "hello",
    "bro",
    "one",
    "important",
    "thing",
    "know",
    "use",
    "boolean",
    "statements",
    "suppose",
    "boolean",
    "variable",
    "named",
    "sale",
    "set",
    "true",
    "using",
    "statement",
    "use",
    "boolean",
    "variable",
    "place",
    "condition",
    "condition",
    "would",
    "evaluate",
    "true",
    "false",
    "could",
    "say",
    "sale",
    "true",
    "let",
    "print",
    "item",
    "sale",
    "else",
    "print",
    "item",
    "sale",
    "sale",
    "set",
    "true",
    "item",
    "sale",
    "variable",
    "false",
    "well",
    "item",
    "sale",
    "let",
    "try",
    "different",
    "variable",
    "online",
    "online",
    "user",
    "online",
    "else",
    "user",
    "offline",
    "user",
    "offline",
    "change",
    "boolean",
    "true",
    "user",
    "online",
    "statements",
    "either",
    "write",
    "condition",
    "could",
    "use",
    "boolean",
    "right",
    "everybody",
    "statements",
    "code",
    "condition",
    "true",
    "else",
    "something",
    "else",
    "basic",
    "form",
    "decision",
    "making",
    "statements",
    "python",
    "hey",
    "everybody",
    "remake",
    "python",
    "calculator",
    "program",
    "absolute",
    "beginners",
    "need",
    "know",
    "complete",
    "exercise",
    "statements",
    "work",
    "let",
    "get",
    "started",
    "exercise",
    "user",
    "going",
    "select",
    "arithmetic",
    "operator",
    "operator",
    "equals",
    "input",
    "ask",
    "user",
    "enter",
    "n",
    "operator",
    "plus",
    "addition",
    "minus",
    "subtraction",
    "risk",
    "multiplication",
    "forward",
    "slash",
    "division",
    "could",
    "enter",
    "want",
    "make",
    "exercise",
    "complicated",
    "create",
    "variable",
    "num",
    "one",
    "contain",
    "first",
    "number",
    "let",
    "say",
    "would",
    "like",
    "add",
    "two",
    "numbers",
    "together",
    "first",
    "number",
    "going",
    "enter",
    "first",
    "number",
    "let",
    "second",
    "number",
    "num",
    "two",
    "enter",
    "second",
    "number",
    "let",
    "show",
    "something",
    "going",
    "add",
    "num",
    "one",
    "num",
    "two",
    "together",
    "num",
    "one",
    "plus",
    "num",
    "two",
    "test",
    "run",
    "enter",
    "operator",
    "would",
    "like",
    "use",
    "addition",
    "enter",
    "first",
    "number",
    "10",
    "11",
    "well",
    "result",
    "101",
    "accept",
    "user",
    "input",
    "string",
    "data",
    "types",
    "ended",
    "string",
    "concatenation",
    "concatenated",
    "string",
    "11",
    "10",
    "ended",
    "101",
    "convert",
    "two",
    "strings",
    "floating",
    "point",
    "numbers",
    "typ",
    "casting",
    "float",
    "enclose",
    "input",
    "functions",
    "typ",
    "cast",
    "flat",
    "able",
    "add",
    "two",
    "numbers",
    "together",
    "let",
    "add",
    "10",
    "11",
    "get",
    "depending",
    "operator",
    "user",
    "selects",
    "use",
    "statements",
    "determine",
    "check",
    "operator",
    "variable",
    "equal",
    "character",
    "plus",
    "write",
    "pass",
    "placeholder",
    "get",
    "back",
    "later",
    "else",
    "operator",
    "equal",
    "minus",
    "use",
    "subtraction",
    "write",
    "pass",
    "else",
    "operator",
    "equal",
    "asterisk",
    "multiplication",
    "multiply",
    "else",
    "operator",
    "equal",
    "forward",
    "slash",
    "division",
    "divide",
    "operator",
    "addition",
    "let",
    "create",
    "variable",
    "result",
    "result",
    "equals",
    "num",
    "one",
    "plus",
    "num",
    "num",
    "two",
    "subtraction",
    "going",
    "num",
    "one",
    "minus",
    "num",
    "2",
    "multiplication",
    "would",
    "num",
    "one",
    "times",
    "num",
    "2",
    "division",
    "would",
    "num",
    "one",
    "divided",
    "num",
    "two",
    "print",
    "result",
    "print",
    "result",
    "sure",
    "lf",
    "statements",
    "well",
    "let",
    "see",
    "let",
    "add",
    "gives",
    "us",
    "let",
    "subtract",
    "420",
    "gives",
    "us",
    "41931",
    "let",
    "test",
    "multiplication",
    "multiply",
    "gives",
    "us",
    "96",
    "division",
    "let",
    "divide",
    "69",
    "13",
    "gives",
    "us",
    "really",
    "long",
    "number",
    "could",
    "round",
    "number",
    "would",
    "like",
    "would",
    "enclose",
    "result",
    "within",
    "round",
    "function",
    "update",
    "print",
    "statements",
    "round",
    "nearest",
    "whole",
    "integer",
    "let",
    "divide",
    "420",
    "13",
    "let",
    "say",
    "would",
    "like",
    "three",
    "digits",
    "decimal",
    "within",
    "round",
    "function",
    "could",
    "add",
    "comma",
    "3",
    "three",
    "decimal",
    "places",
    "enter",
    "operator",
    "let",
    "use",
    "division",
    "divide",
    "420",
    "69",
    "gives",
    "round",
    "given",
    "digit",
    "decimal",
    "case",
    "three",
    "places",
    "somebody",
    "types",
    "operator",
    "exist",
    "like",
    "word",
    "pizza",
    "divide",
    "two",
    "numbers",
    "well",
    "let",
    "add",
    "l",
    "statement",
    "somebody",
    "selects",
    "input",
    "invalid",
    "let",
    "let",
    "know",
    "use",
    "f",
    "string",
    "let",
    "say",
    "operator",
    "user",
    "selected",
    "valid",
    "let",
    "try",
    "enter",
    "operator",
    "pizza",
    "enter",
    "first",
    "number",
    "420",
    "69",
    "pizza",
    "valid",
    "let",
    "say",
    "valid",
    "operator",
    "instead",
    "makes",
    "sense",
    "pizza",
    "operator",
    "first",
    "number",
    "420",
    "second",
    "number",
    "69",
    "pizza",
    "valid",
    "operator",
    "right",
    "everybody",
    "simple",
    "python",
    "calculator",
    "program",
    "make",
    "make",
    "beginner",
    "hey",
    "today",
    "topic",
    "going",
    "create",
    "weight",
    "converter",
    "program",
    "python",
    "exercise",
    "follow",
    "lesson",
    "statements",
    "convert",
    "pounds",
    "kilogram",
    "kilog",
    "pounds",
    "user",
    "going",
    "decide",
    "begin",
    "creating",
    "weight",
    "variable",
    "assign",
    "user",
    "input",
    "enter",
    "weight",
    "convert",
    "input",
    "floating",
    "point",
    "number",
    "add",
    "cast",
    "ask",
    "unit",
    "weight",
    "kilog",
    "pounds",
    "input",
    "kilograms",
    "pounds",
    "want",
    "user",
    "type",
    "either",
    "k",
    "kilogram",
    "l",
    "pounds",
    "capital",
    "letters",
    "way",
    "using",
    "statement",
    "let",
    "first",
    "check",
    "see",
    "unit",
    "equal",
    "capital",
    "k",
    "means",
    "current",
    "weight",
    "kilogram",
    "need",
    "convert",
    "weight",
    "pounds",
    "let",
    "reassign",
    "weight",
    "equal",
    "weight",
    "times",
    "else",
    "unit",
    "equal",
    "l",
    "need",
    "convert",
    "kilog",
    "weight",
    "equals",
    "weight",
    "ided",
    "else",
    "user",
    "type",
    "something",
    "valid",
    "let",
    "print",
    "using",
    "f",
    "string",
    "unit",
    "valid",
    "end",
    "program",
    "print",
    "new",
    "weight",
    "use",
    "f",
    "string",
    "weight",
    "new",
    "weight",
    "assigned",
    "need",
    "unit",
    "measurement",
    "thinking",
    "within",
    "else",
    "statements",
    "let",
    "reassign",
    "unit",
    "reassigning",
    "unit",
    "lbs",
    "pounds",
    "else",
    "unit",
    "equals",
    "kgs",
    "kilogram",
    "results",
    "display",
    "new",
    "unit",
    "let",
    "take",
    "look",
    "enter",
    "weight",
    "actually",
    "going",
    "make",
    "one",
    "change",
    "going",
    "add",
    "colon",
    "space",
    "much",
    "better",
    "enter",
    "weight",
    "let",
    "say",
    "180",
    "lb",
    "pounds",
    "type",
    "capital",
    "l",
    "weight",
    "kilogram",
    "3",
    "think",
    "going",
    "round",
    "enclose",
    "weight",
    "variable",
    "within",
    "round",
    "function",
    "round",
    "one",
    "decimal",
    "place",
    "let",
    "try",
    "ent",
    "weight",
    "maybe",
    "81",
    "kilg",
    "type",
    "k",
    "kilogram",
    "weight",
    "lb",
    "let",
    "make",
    "sure",
    "lse",
    "statement",
    "works",
    "enter",
    "weight",
    "18",
    "180",
    "pizzas",
    "pizzas",
    "valid",
    "still",
    "displaying",
    "output",
    "would",
    "want",
    "avoid",
    "somebody",
    "type",
    "valid",
    "unit",
    "let",
    "cut",
    "line",
    "paste",
    "within",
    "else",
    "statements",
    "exit",
    "else",
    "statement",
    "printing",
    "output",
    "let",
    "make",
    "sure",
    "works",
    "weight",
    "180",
    "pizzas",
    "pizza",
    "valid",
    "right",
    "everybody",
    "well",
    "weight",
    "converter",
    "program",
    "python",
    "thought",
    "would",
    "helpful",
    "exercise",
    "finished",
    "section",
    "statements",
    "yeah",
    "weight",
    "converter",
    "program",
    "python",
    "hey",
    "everybody",
    "topic",
    "going",
    "create",
    "temperature",
    "conversion",
    "program",
    "exercise",
    "begin",
    "asking",
    "current",
    "unit",
    "measurement",
    "unit",
    "equals",
    "accept",
    "user",
    "input",
    "temperature",
    "celsius",
    "fahrenheit",
    "c",
    "slf",
    "ask",
    "temperature",
    "store",
    "temperature",
    "variable",
    "named",
    "temp",
    "meaning",
    "temperature",
    "temp",
    "equals",
    "input",
    "enter",
    "temperature",
    "cast",
    "user",
    "input",
    "floating",
    "point",
    "number",
    "unit",
    "equal",
    "c",
    "fill",
    "momentarily",
    "going",
    "write",
    "pass",
    "placeholder",
    "else",
    "unit",
    "equal",
    "f",
    "something",
    "else",
    "else",
    "let",
    "print",
    "something",
    "error",
    "message",
    "sort",
    "using",
    "fstring",
    "unit",
    "invalid",
    "unit",
    "measurement",
    "let",
    "test",
    "lse",
    "statement",
    "temperature",
    "celsius",
    "fahrenheit",
    "type",
    "k",
    "kelvin",
    "make",
    "temperature",
    "like",
    "100",
    "k",
    "invalid",
    "unit",
    "measurement",
    "right",
    "know",
    "l",
    "statement",
    "works",
    "let",
    "convert",
    "fahrenheit",
    "celsius",
    "using",
    "formula",
    "take",
    "temperature",
    "equals",
    "9",
    "r",
    "temp",
    "5",
    "32",
    "take",
    "use",
    "round",
    "function",
    "round",
    "one",
    "decimal",
    "place",
    "print",
    "current",
    "temperature",
    "fahrenheit",
    "use",
    "f",
    "string",
    "temperature",
    "fahrenheit",
    "temp",
    "variable",
    "degrees",
    "fahrenheit",
    "let",
    "test",
    "statement",
    "temperature",
    "celsius",
    "fahrenheit",
    "currently",
    "celsius",
    "celsius",
    "converted",
    "fahrenheit",
    "temperature",
    "fahrenheit",
    "de",
    "right",
    "section",
    "working",
    "let",
    "work",
    "else",
    "statement",
    "else",
    "unit",
    "currently",
    "inir",
    "convert",
    "celsius",
    "formula",
    "temp",
    "equals",
    "temperature",
    "32",
    "5",
    "9",
    "round",
    "result",
    "one",
    "decimal",
    "place",
    "print",
    "temperature",
    "celsius",
    "temperature",
    "celsius",
    "temp",
    "de",
    "c",
    "celsius",
    "temperature",
    "celsius",
    "fahrenheit",
    "currently",
    "fahrenheit",
    "enter",
    "temperature",
    "temperature",
    "celsius",
    "de",
    "c",
    "well",
    "everybody",
    "simple",
    "temperature",
    "conversion",
    "program",
    "python",
    "right",
    "people",
    "talking",
    "logical",
    "operators",
    "today",
    "logical",
    "operators",
    "allow",
    "us",
    "evaluate",
    "multiple",
    "conditions",
    "link",
    "together",
    "three",
    "discuss",
    "begin",
    "check",
    "one",
    "condition",
    "least",
    "one",
    "conditions",
    "true",
    "entire",
    "statement",
    "true",
    "example",
    "let",
    "say",
    "outdoor",
    "event",
    "create",
    "two",
    "variables",
    "one",
    "temp",
    "meaning",
    "temperature",
    "let",
    "say",
    "celsius",
    "c",
    "pick",
    "fahrenheit",
    "would",
    "like",
    "create",
    "boolean",
    "variable",
    "raining",
    "set",
    "false",
    "currently",
    "raining",
    "temperature",
    "hot",
    "cold",
    "raining",
    "cancel",
    "outdoor",
    "event",
    "write",
    "statement",
    "check",
    "temp",
    "short",
    "temperature",
    "greater",
    "let",
    "say",
    "35",
    "c",
    "use",
    "logical",
    "operator",
    "temp",
    "less",
    "zero",
    "raining",
    "true",
    "one",
    "conditions",
    "true",
    "going",
    "cancel",
    "outdoor",
    "event",
    "let",
    "print",
    "following",
    "outdoor",
    "event",
    "canell",
    "else",
    "print",
    "something",
    "else",
    "outdoor",
    "event",
    "still",
    "scheduled",
    "temperature",
    "reasonable",
    "raining",
    "false",
    "raining",
    "print",
    "else",
    "clause",
    "outdoor",
    "event",
    "still",
    "scheduled",
    "temperature",
    "really",
    "hot",
    "like",
    "c",
    "well",
    "outdoor",
    "event",
    "cancelled",
    "cold",
    "c",
    "outdoor",
    "event",
    "cancelled",
    "condition",
    "true",
    "therefore",
    "execute",
    "statement",
    "temperature",
    "reasonable",
    "raining",
    "raining",
    "true",
    "well",
    "outdoor",
    "event",
    "still",
    "canceled",
    "logical",
    "operator",
    "least",
    "one",
    "conditions",
    "needs",
    "true",
    "one",
    "conditions",
    "true",
    "could",
    "consider",
    "entire",
    "statement",
    "true",
    "let",
    "cover",
    "link",
    "two",
    "conditions",
    "together",
    "conditions",
    "must",
    "true",
    "order",
    "entire",
    "statement",
    "true",
    "let",
    "say",
    "temp",
    "short",
    "temperature",
    "boolean",
    "variable",
    "sunny",
    "set",
    "true",
    "check",
    "temp",
    "greater",
    "equal",
    "28",
    "degrees",
    "c",
    "sunny",
    "sunny",
    "hot",
    "sunny",
    "true",
    "let",
    "print",
    "following",
    "hot",
    "outside",
    "fun",
    "going",
    "add",
    "emoji",
    "think",
    "entertaining",
    "way",
    "press",
    "sunny",
    "sometimes",
    "emojis",
    "formatted",
    "differently",
    "going",
    "copy",
    "somewhere",
    "else",
    "better",
    "currently",
    "temperature",
    "25",
    "c",
    "sunny",
    "condition",
    "false",
    "one",
    "true",
    "logical",
    "operator",
    "conditions",
    "must",
    "true",
    "order",
    "us",
    "execute",
    "block",
    "code",
    "temperature",
    "30",
    "30",
    "de",
    "c",
    "well",
    "conditions",
    "true",
    "hot",
    "outside",
    "sunny",
    "let",
    "write",
    "let",
    "add",
    "else",
    "else",
    "temp",
    "less",
    "equal",
    "zero",
    "sunny",
    "print",
    "something",
    "else",
    "cold",
    "outside",
    "change",
    "emoji",
    "sunny",
    "let",
    "set",
    "temperature",
    "c",
    "cold",
    "outside",
    "sunny",
    "conditions",
    "true",
    "instead",
    "link",
    "many",
    "conditions",
    "together",
    "would",
    "like",
    "let",
    "see",
    "temperature",
    "within",
    "certain",
    "range",
    "else",
    "temp",
    "less",
    "28",
    "temp",
    "greater",
    "zero",
    "sunny",
    "check",
    "see",
    "something",
    "within",
    "certain",
    "range",
    "shortcut",
    "py",
    "charm",
    "recommending",
    "simplify",
    "change",
    "comparisons",
    "effectively",
    "thing",
    "28",
    "greater",
    "temp",
    "temp",
    "greater",
    "zero",
    "sunny",
    "print",
    "warm",
    "outside",
    "rather",
    "hot",
    "still",
    "sunny",
    "let",
    "say",
    "temperature",
    "csi",
    "sunny",
    "warm",
    "outside",
    "sunny",
    "logical",
    "operator",
    "inverts",
    "condition",
    "checking",
    "see",
    "something",
    "either",
    "false",
    "true",
    "let",
    "check",
    "see",
    "sunny",
    "really",
    "copy",
    "paste",
    "else",
    "nut",
    "sunny",
    "means",
    "cloudy",
    "let",
    "use",
    "cloud",
    "emoji",
    "basically",
    "opposite",
    "looking",
    "checking",
    "sunny",
    "sunny",
    "false",
    "condition",
    "true",
    "okay",
    "let",
    "say",
    "temp",
    "208",
    "sunny",
    "false",
    "hot",
    "outside",
    "cloudy",
    "temperature",
    "zero",
    "cold",
    "outside",
    "cloudy",
    "temperature",
    "reasonable",
    "like",
    "c",
    "warm",
    "outside",
    "cl",
    "cloudy",
    "inverts",
    "condition",
    "true",
    "false",
    "false",
    "true",
    "right",
    "everybody",
    "logical",
    "operators",
    "allow",
    "us",
    "evaluate",
    "multiple",
    "conditions",
    "least",
    "one",
    "condition",
    "must",
    "true",
    "conditions",
    "must",
    "true",
    "opposite",
    "inverts",
    "condition",
    "check",
    "something",
    "false",
    "true",
    "well",
    "everybody",
    "local",
    "operators",
    "python",
    "hey",
    "everybody",
    "today",
    "got",
    "explain",
    "conditional",
    "expressions",
    "python",
    "conditional",
    "expression",
    "oneline",
    "shortcut",
    "using",
    "ifl",
    "statement",
    "familiar",
    "programming",
    "languages",
    "also",
    "known",
    "trary",
    "operator",
    "behaves",
    "similarly",
    "using",
    "conditional",
    "expressions",
    "print",
    "assign",
    "one",
    "two",
    "values",
    "based",
    "condition",
    "formula",
    "return",
    "x",
    "condition",
    "true",
    "else",
    "return",
    "basic",
    "example",
    "create",
    "variable",
    "number",
    "num",
    "let",
    "say",
    "number",
    "five",
    "going",
    "print",
    "within",
    "print",
    "statement",
    "write",
    "conditional",
    "expression",
    "following",
    "formula",
    "copy",
    "paste",
    "let",
    "check",
    "see",
    "number",
    "positive",
    "let",
    "print",
    "text",
    "positive",
    "condition",
    "checking",
    "let",
    "check",
    "see",
    "num",
    "greater",
    "zero",
    "means",
    "positive",
    "condition",
    "false",
    "instead",
    "print",
    "whatever",
    "comes",
    "else",
    "else",
    "negative",
    "number",
    "five",
    "print",
    "positive",
    "number",
    "neg5",
    "well",
    "condition",
    "would",
    "false",
    "would",
    "instead",
    "print",
    "negative",
    "let",
    "go",
    "another",
    "let",
    "check",
    "see",
    "number",
    "even",
    "odd",
    "let",
    "set",
    "numb",
    "six",
    "time",
    "assign",
    "result",
    "variable",
    "result",
    "equals",
    "take",
    "formula",
    "let",
    "assign",
    "even",
    "num",
    "modulus",
    "2",
    "number",
    "divisible",
    "two",
    "equal",
    "zero",
    "else",
    "return",
    "odd",
    "let",
    "print",
    "result",
    "result",
    "number",
    "six",
    "even",
    "five",
    "odd",
    "assign",
    "even",
    "number",
    "divisible",
    "two",
    "else",
    "return",
    "odd",
    "let",
    "create",
    "variables",
    "b",
    "equal",
    "6",
    "b",
    "equal",
    "7",
    "let",
    "create",
    "variable",
    "max",
    "num",
    "equals",
    "follow",
    "formula",
    "return",
    "variable",
    "greater",
    "b",
    "else",
    "return",
    "b",
    "b",
    "maximum",
    "number",
    "would",
    "b",
    "seven",
    "let",
    "find",
    "minimum",
    "time",
    "minum",
    "less",
    "b",
    "else",
    "return",
    "b",
    "minimum",
    "number",
    "six",
    "seven",
    "six",
    "time",
    "take",
    "age",
    "age",
    "equals",
    "25",
    "create",
    "variable",
    "status",
    "equals",
    "use",
    "formula",
    "return",
    "string",
    "adult",
    "age",
    "greater",
    "equal",
    "18",
    "else",
    "return",
    "string",
    "child",
    "print",
    "status",
    "age",
    "25",
    "greater",
    "equal",
    "18",
    "print",
    "adult",
    "age",
    "13",
    "child",
    "instead",
    "return",
    "child",
    "let",
    "work",
    "temperature",
    "temperature",
    "equals",
    "c",
    "hot",
    "let",
    "create",
    "variable",
    "weather",
    "assign",
    "string",
    "hot",
    "temperature",
    "greater",
    "20",
    "else",
    "return",
    "string",
    "cold",
    "weather",
    "outside",
    "today",
    "based",
    "temperature",
    "hot",
    "temperature",
    "20",
    "weather",
    "cold",
    "okay",
    "last",
    "example",
    "work",
    "user",
    "role",
    "set",
    "admin",
    "define",
    "variable",
    "access",
    "level",
    "equals",
    "follow",
    "formula",
    "return",
    "text",
    "full",
    "access",
    "condition",
    "user",
    "rooll",
    "equal",
    "string",
    "admin",
    "else",
    "return",
    "limited",
    "access",
    "user",
    "role",
    "admin",
    "let",
    "print",
    "access",
    "level",
    "full",
    "access",
    "guest",
    "well",
    "limited",
    "access",
    "right",
    "everybody",
    "conditional",
    "expressions",
    "oneline",
    "shortcut",
    "else",
    "statement",
    "similar",
    "tary",
    "operator",
    "programming",
    "languages",
    "using",
    "conditional",
    "expressions",
    "print",
    "assign",
    "one",
    "two",
    "values",
    "based",
    "condition",
    "follow",
    "formula",
    "return",
    "x",
    "condition",
    "true",
    "else",
    "return",
    "false",
    "well",
    "everybody",
    "examples",
    "conditional",
    "expressions",
    "python",
    "hey",
    "everybody",
    "topic",
    "going",
    "cover",
    "useful",
    "string",
    "methods",
    "may",
    "interested",
    "end",
    "video",
    "work",
    "exercise",
    "validate",
    "user",
    "input",
    "know",
    "string",
    "series",
    "characters",
    "let",
    "ask",
    "user",
    "full",
    "name",
    "name",
    "equals",
    "input",
    "enter",
    "full",
    "name",
    "first",
    "method",
    "show",
    "well",
    "technically",
    "function",
    "length",
    "function",
    "give",
    "us",
    "length",
    "string",
    "many",
    "characters",
    "find",
    "length",
    "variable",
    "name",
    "user",
    "types",
    "input",
    "function",
    "returns",
    "integer",
    "store",
    "result",
    "within",
    "variable",
    "uh",
    "let",
    "say",
    "result",
    "print",
    "whatever",
    "result",
    "go",
    "ahead",
    "type",
    "full",
    "name",
    "length",
    "string",
    "example",
    "eight",
    "characters",
    "include",
    "spaces",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "ever",
    "need",
    "length",
    "string",
    "length",
    "function",
    "let",
    "move",
    "type",
    "variable",
    "name",
    "followed",
    "dot",
    "access",
    "whole",
    "bunch",
    "different",
    "methods",
    "find",
    "method",
    "find",
    "method",
    "return",
    "first",
    "occurrence",
    "given",
    "character",
    "position",
    "let",
    "find",
    "spaces",
    "store",
    "results",
    "within",
    "variable",
    "named",
    "result",
    "type",
    "full",
    "name",
    "first",
    "occurrence",
    "space",
    "set",
    "position",
    "three",
    "working",
    "indexes",
    "always",
    "begin",
    "zero",
    "first",
    "character",
    "would",
    "index",
    "0",
    "1",
    "2",
    "3",
    "find",
    "method",
    "returned",
    "three",
    "place",
    "four",
    "let",
    "find",
    "first",
    "occurrence",
    "capital",
    "b",
    "see",
    "zero",
    "oh",
    "would",
    "two",
    "remember",
    "always",
    "first",
    "occurrence",
    "need",
    "last",
    "occurrence",
    "different",
    "method",
    "r",
    "find",
    "r",
    "meaning",
    "reverse",
    "find",
    "last",
    "occurrence",
    "position",
    "five",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "python",
    "able",
    "locate",
    "given",
    "character",
    "return",
    "ne1",
    "let",
    "find",
    "know",
    "uh",
    "q",
    "python",
    "could",
    "find",
    "lowercase",
    "cues",
    "rfind",
    "method",
    "return",
    "results",
    "capitalize",
    "first",
    "letter",
    "string",
    "using",
    "capitalize",
    "function",
    "name",
    "capitalize",
    "method",
    "return",
    "string",
    "reassign",
    "name",
    "print",
    "name",
    "capitalized",
    "sure",
    "type",
    "name",
    "lowercase",
    "since",
    "one",
    "string",
    "first",
    "letter",
    "capitalized",
    "even",
    "though",
    "including",
    "first",
    "last",
    "name",
    "upper",
    "method",
    "take",
    "characters",
    "string",
    "make",
    "uppercase",
    "follow",
    "variable",
    "contains",
    "string",
    "followed",
    "dot",
    "upper",
    "reassign",
    "result",
    "name",
    "variable",
    "overwrite",
    "enter",
    "full",
    "name",
    "letters",
    "uppercase",
    "also",
    "lower",
    "make",
    "characters",
    "lowercase",
    "name",
    "equals",
    "name",
    "lower",
    "yep",
    "characters",
    "lowercase",
    "digit",
    "method",
    "return",
    "either",
    "true",
    "false",
    "string",
    "contains",
    "digits",
    "result",
    "boolean",
    "true",
    "false",
    "store",
    "within",
    "variable",
    "named",
    "result",
    "print",
    "result",
    "type",
    "full",
    "name",
    "digit",
    "returns",
    "false",
    "digits",
    "within",
    "string",
    "string",
    "combination",
    "alphabetical",
    "characters",
    "numbers",
    "method",
    "still",
    "return",
    "false",
    "returns",
    "true",
    "string",
    "contains",
    "digits",
    "type",
    "one",
    "23",
    "see",
    "true",
    "isdigit",
    "method",
    "otherwise",
    "wi",
    "alpha",
    "name",
    "alpha",
    "alpha",
    "method",
    "return",
    "boolean",
    "true",
    "false",
    "depending",
    "string",
    "contains",
    "alphabetical",
    "characters",
    "type",
    "full",
    "name",
    "reason",
    "came",
    "false",
    "full",
    "name",
    "contains",
    "space",
    "alphabetical",
    "character",
    "typed",
    "full",
    "name",
    "excluding",
    "spaces",
    "would",
    "true",
    "alpha",
    "would",
    "also",
    "return",
    "false",
    "name",
    "contained",
    "sort",
    "digits",
    "foro",
    "1",
    "23",
    "also",
    "false",
    "alpha",
    "method",
    "let",
    "ask",
    "phone",
    "number",
    "phone",
    "number",
    "equals",
    "input",
    "enter",
    "phone",
    "number",
    "phone",
    "number",
    "typically",
    "contain",
    "dashes",
    "let",
    "count",
    "many",
    "dashes",
    "going",
    "somebody",
    "phone",
    "number",
    "phone",
    "number",
    "dot",
    "count",
    "method",
    "let",
    "count",
    "amount",
    "dashes",
    "place",
    "character",
    "within",
    "account",
    "method",
    "method",
    "return",
    "integer",
    "let",
    "store",
    "within",
    "variable",
    "results",
    "equals",
    "phone",
    "number",
    "count",
    "method",
    "type",
    "phone",
    "number",
    "901",
    "three",
    "dashes",
    "within",
    "string",
    "1",
    "2",
    "3",
    "count",
    "method",
    "count",
    "many",
    "characters",
    "within",
    "string",
    "also",
    "replace",
    "method",
    "honestly",
    "replace",
    "method",
    "probably",
    "one",
    "useful",
    "methods",
    "strings",
    "replace",
    "occurrence",
    "one",
    "character",
    "another",
    "replace",
    "let",
    "replace",
    "dashes",
    "maybe",
    "space",
    "method",
    "return",
    "new",
    "string",
    "going",
    "reassign",
    "phone",
    "number",
    "variable",
    "print",
    "phone",
    "number",
    "enter",
    "phone",
    "number",
    "3",
    "901",
    "new",
    "phone",
    "number",
    "replaced",
    "dashes",
    "spaces",
    "even",
    "better",
    "yet",
    "could",
    "eliminate",
    "dashes",
    "completely",
    "replacing",
    "dashes",
    "another",
    "character",
    "empty",
    "string",
    "3",
    "8901",
    "new",
    "phone",
    "number",
    "without",
    "dashes",
    "replaced",
    "dashes",
    "empty",
    "string",
    "characters",
    "would",
    "like",
    "comprehensive",
    "list",
    "string",
    "methods",
    "available",
    "use",
    "help",
    "function",
    "type",
    "data",
    "type",
    "str",
    "strr",
    "meaning",
    "string",
    "print",
    "whatever",
    "result",
    "bunch",
    "methods",
    "might",
    "interested",
    "future",
    "capitalize",
    "case",
    "fold",
    "center",
    "count",
    "en",
    "code",
    "ends",
    "name",
    "right",
    "everybody",
    "exercise",
    "validate",
    "user",
    "input",
    "would",
    "like",
    "user",
    "enter",
    "valid",
    "username",
    "however",
    "couple",
    "rules",
    "username",
    "12",
    "characters",
    "long",
    "username",
    "must",
    "contain",
    "spaces",
    "username",
    "must",
    "contain",
    "digits",
    "let",
    "assign",
    "variable",
    "named",
    "username",
    "equals",
    "input",
    "enter",
    "usern",
    "name",
    "first",
    "let",
    "check",
    "see",
    "user",
    "input",
    "12",
    "characters",
    "long",
    "using",
    "length",
    "function",
    "find",
    "length",
    "username",
    "length",
    "function",
    "returns",
    "integer",
    "let",
    "check",
    "see",
    "length",
    "username",
    "greater",
    "12",
    "characters",
    "print",
    "message",
    "user",
    "name",
    "ca",
    "12",
    "characters",
    "else",
    "print",
    "using",
    "fst",
    "string",
    "well",
    "welcome",
    "whatever",
    "username",
    "variable",
    "let",
    "try",
    "type",
    "first",
    "name",
    "last",
    "name",
    "add",
    "whole",
    "bunch",
    "characters",
    "afterwards",
    "username",
    "ca",
    "12",
    "characters",
    "let",
    "type",
    "something",
    "12",
    "characters",
    "yep",
    "appears",
    "work",
    "okay",
    "accomplished",
    "task",
    "number",
    "one",
    "username",
    "ca",
    "12",
    "characters",
    "next",
    "username",
    "must",
    "contain",
    "spaces",
    "use",
    "find",
    "method",
    "string",
    "username",
    "doind",
    "find",
    "spaces",
    "character",
    "spaces",
    "found",
    "method",
    "return",
    "using",
    "else",
    "statement",
    "add",
    "find",
    "method",
    "username",
    "equals",
    "result",
    "meaning",
    "found",
    "space",
    "print",
    "username",
    "ca",
    "contain",
    "spaces",
    "type",
    "first",
    "last",
    "name",
    "might",
    "need",
    "think",
    "something",
    "underneath",
    "12",
    "characters",
    "username",
    "ca",
    "contain",
    "spaces",
    "accomplished",
    "rule",
    "number",
    "two",
    "three",
    "username",
    "must",
    "contain",
    "digits",
    "use",
    "alpha",
    "method",
    "strings",
    "alpha",
    "method",
    "returns",
    "boolean",
    "string",
    "contains",
    "alphabetical",
    "characters",
    "let",
    "copy",
    "add",
    "another",
    "lf",
    "statement",
    "username",
    "alpha",
    "print",
    "username",
    "ca",
    "contain",
    "numbers",
    "guess",
    "technically",
    "alpha",
    "would",
    "check",
    "spaces",
    "rather",
    "handled",
    "within",
    "different",
    "statement",
    "right",
    "type",
    "username",
    "include",
    "digits",
    "username",
    "ca",
    "contain",
    "numbers",
    "right",
    "think",
    "accomplished",
    "let",
    "make",
    "username",
    "following",
    "three",
    "rules",
    "yep",
    "seems",
    "check",
    "right",
    "everybody",
    "useful",
    "string",
    "methods",
    "may",
    "interested",
    "hey",
    "everybody",
    "topic",
    "going",
    "explain",
    "string",
    "indexing",
    "indexing",
    "allows",
    "us",
    "access",
    "elements",
    "sequence",
    "using",
    "set",
    "square",
    "brackets",
    "also",
    "known",
    "indexing",
    "operator",
    "using",
    "set",
    "square",
    "brackets",
    "following",
    "string",
    "three",
    "fields",
    "fill",
    "access",
    "starting",
    "point",
    "string",
    "ending",
    "point",
    "step",
    "example",
    "suppose",
    "credit",
    "card",
    "number",
    "credit",
    "number",
    "equals",
    "make",
    "number",
    "1",
    "2",
    "3",
    "6",
    "7",
    "9012",
    "d34",
    "5",
    "6",
    "good",
    "enough",
    "need",
    "first",
    "character",
    "within",
    "string",
    "type",
    "ty",
    "name",
    "string",
    "variable",
    "followed",
    "indexing",
    "operator",
    "set",
    "square",
    "brackets",
    "first",
    "position",
    "index",
    "zero",
    "computers",
    "always",
    "start",
    "zero",
    "first",
    "index",
    "zero",
    "going",
    "go",
    "ahead",
    "print",
    "print",
    "credit",
    "card",
    "number",
    "index",
    "zero",
    "would",
    "one",
    "change",
    "index",
    "one",
    "0",
    "1",
    "two",
    "index",
    "2",
    "would",
    "technically",
    "three",
    "four",
    "dash",
    "within",
    "string",
    "see",
    "indexing",
    "operator",
    "three",
    "fields",
    "fill",
    "start",
    "step",
    "one",
    "field",
    "listed",
    "without",
    "colons",
    "assumed",
    "filling",
    "starting",
    "position",
    "would",
    "like",
    "first",
    "four",
    "digits",
    "string",
    "well",
    "would",
    "type",
    "name",
    "string",
    "variable",
    "indexing",
    "operator",
    "need",
    "starting",
    "index",
    "colon",
    "ending",
    "index",
    "first",
    "four",
    "digits",
    "would",
    "0",
    "colon",
    "4",
    "print",
    "going",
    "turn",
    "first",
    "line",
    "comment",
    "yeah",
    "go",
    "first",
    "four",
    "digits",
    "credit",
    "card",
    "number",
    "1",
    "2",
    "3",
    "4",
    "know",
    "ending",
    "index",
    "index",
    "exclusive",
    "first",
    "number",
    "would",
    "0er",
    "1",
    "2",
    "3",
    "4",
    "include",
    "dash",
    "within",
    "number",
    "starting",
    "index",
    "inclusive",
    "ending",
    "index",
    "exclusive",
    "omit",
    "zero",
    "beginning",
    "could",
    "say",
    "colon",
    "4",
    "python",
    "assumes",
    "starting",
    "position",
    "beginning",
    "string",
    "would",
    "work",
    "let",
    "get",
    "next",
    "set",
    "digits",
    "56",
    "78",
    "credit",
    "number",
    "indexing",
    "operator",
    "ator",
    "let",
    "find",
    "starting",
    "index",
    "would",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "5",
    "colon",
    "6",
    "7",
    "8",
    "9",
    "print",
    "whatever",
    "next",
    "set",
    "digits",
    "5",
    "6",
    "7",
    "8",
    "maybe",
    "need",
    "last",
    "12",
    "digits",
    "well",
    "could",
    "case",
    "take",
    "string",
    "variable",
    "credit",
    "number",
    "set",
    "starting",
    "index",
    "let",
    "see",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "five",
    "colon",
    "need",
    "everything",
    "end",
    "string",
    "need",
    "list",
    "ending",
    "index",
    "sure",
    "add",
    "colon",
    "python",
    "assumes",
    "need",
    "everything",
    "end",
    "string",
    "print",
    "whatever",
    "everything",
    "besides",
    "first",
    "four",
    "digits",
    "yep",
    "5",
    "67",
    "8",
    "9",
    "012",
    "34",
    "5",
    "6",
    "could",
    "also",
    "use",
    "negative",
    "index",
    "credit",
    "number",
    "need",
    "last",
    "last",
    "character",
    "string",
    "would",
    "set",
    "index",
    "print",
    "print",
    "credit",
    "number",
    "index",
    "would",
    "6",
    "5",
    "three",
    "5",
    "would",
    "dash",
    "right",
    "yeah",
    "use",
    "negative",
    "indexes",
    "let",
    "talk",
    "step",
    "using",
    "step",
    "field",
    "access",
    "characters",
    "string",
    "given",
    "step",
    "count",
    "twos",
    "count",
    "threes",
    "example",
    "let",
    "take",
    "credit",
    "number",
    "filling",
    "starting",
    "ending",
    "fields",
    "need",
    "step",
    "would",
    "need",
    "two",
    "colons",
    "python",
    "assuming",
    "everything",
    "beginning",
    "string",
    "end",
    "step",
    "two",
    "print",
    "every",
    "second",
    "character",
    "within",
    "string",
    "yeah",
    "1",
    "3",
    "dash",
    "6",
    "8",
    "9",
    "1",
    "forth",
    "change",
    "step",
    "three",
    "would",
    "count",
    "every",
    "third",
    "character",
    "beginning",
    "1",
    "4",
    "6",
    "das",
    "1",
    "3",
    "6",
    "right",
    "practical",
    "example",
    "let",
    "create",
    "program",
    "get",
    "last",
    "four",
    "digits",
    "credit",
    "card",
    "number",
    "going",
    "assign",
    "new",
    "variable",
    "last",
    "digits",
    "equals",
    "credit",
    "number",
    "indexing",
    "operator",
    "need",
    "last",
    "four",
    "digits",
    "would",
    "starting",
    "index",
    "begin",
    "well",
    "could",
    "use",
    "negative",
    "indexing",
    "last",
    "digit",
    "is1",
    "begin",
    "at4",
    "colon",
    "omit",
    "ending",
    "index",
    "python",
    "assumes",
    "need",
    "rest",
    "string",
    "really",
    "need",
    "let",
    "print",
    "use",
    "f",
    "string",
    "uh",
    "maybe",
    "xes",
    "maybe",
    "hiding",
    "somebody",
    "credit",
    "card",
    "number",
    "except",
    "last",
    "four",
    "digits",
    "okay",
    "variable",
    "last",
    "digits",
    "right",
    "credit",
    "card",
    "number",
    "last",
    "four",
    "digits",
    "visible",
    "hey",
    "know",
    "let",
    "add",
    "one",
    "exercise",
    "let",
    "reverse",
    "characters",
    "string",
    "going",
    "reassign",
    "credit",
    "number",
    "equals",
    "credit",
    "number",
    "need",
    "entire",
    "string",
    "necessarily",
    "need",
    "starting",
    "index",
    "ending",
    "index",
    "step",
    "negative",
    "reverse",
    "string",
    "let",
    "print",
    "whatever",
    "new",
    "credit",
    "card",
    "number",
    "print",
    "credit",
    "number",
    "yeah",
    "credit",
    "number",
    "backwards",
    "reverse",
    "string",
    "set",
    "step",
    "ne",
    "yeah",
    "everybody",
    "string",
    "indexing",
    "python",
    "access",
    "elements",
    "sequence",
    "using",
    "indexing",
    "operator",
    "set",
    "straight",
    "brackets",
    "list",
    "starting",
    "position",
    "ending",
    "position",
    "even",
    "step",
    "need",
    "skip",
    "characters",
    "yeah",
    "string",
    "indexing",
    "python",
    "hey",
    "everybody",
    "topic",
    "going",
    "explain",
    "format",
    "specifiers",
    "format",
    "specifiers",
    "used",
    "context",
    "f",
    "string",
    "allow",
    "us",
    "format",
    "value",
    "based",
    "flags",
    "inserted",
    "following",
    "value",
    "would",
    "type",
    "colon",
    "flags",
    "depending",
    "flags",
    "insert",
    "format",
    "output",
    "certain",
    "way",
    "could",
    "add",
    "decimal",
    "point",
    "precision",
    "allocate",
    "space",
    "zero",
    "pad",
    "values",
    "left",
    "justify",
    "right",
    "justify",
    "center",
    "align",
    "sorts",
    "things",
    "let",
    "practice",
    "create",
    "three",
    "prices",
    "price",
    "one",
    "price",
    "two",
    "price",
    "three",
    "price",
    "one",
    "values",
    "cents",
    "yet",
    "price",
    "two",
    "music",
    "price",
    "two",
    "price",
    "three",
    "price",
    "three",
    "within",
    "placeholder",
    "following",
    "value",
    "add",
    "colin",
    "flags",
    "flags",
    "format",
    "specifiers",
    "format",
    "value",
    "particular",
    "way",
    "depending",
    "insert",
    "colon",
    "add",
    "decimal",
    "point",
    "precision",
    "would",
    "type",
    "colon",
    "dot",
    "amount",
    "decimals",
    "displayed",
    "maybe",
    "two",
    "f",
    "meaning",
    "flo",
    "point",
    "number",
    "let",
    "price",
    "two",
    "price",
    "three",
    "colon",
    "2f",
    "price",
    "one",
    "price",
    "two",
    "987",
    "65",
    "price",
    "3",
    "think",
    "going",
    "add",
    "dollar",
    "signs",
    "placeholder",
    "yeah",
    "much",
    "better",
    "less",
    "precision",
    "maybe",
    "one",
    "decimal",
    "place",
    "change",
    "two",
    "one",
    "onef",
    "number",
    "displays",
    "one",
    "decimal",
    "whereas",
    "3f",
    "would",
    "display",
    "three",
    "decimal",
    "places1",
    "142",
    "650",
    "340",
    "even",
    "though",
    "price",
    "two",
    "price",
    "three",
    "two",
    "decimal",
    "places",
    "original",
    "numbers",
    "concatenate",
    "additional",
    "zeros",
    "allocate",
    "space",
    "display",
    "value",
    "colon",
    "add",
    "number",
    "number",
    "many",
    "spaces",
    "10",
    "value",
    "total",
    "10",
    "spaces",
    "display",
    "output",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "preedee",
    "number",
    "zero",
    "well",
    "numbers",
    "would",
    "zero",
    "padded",
    "number",
    "zero",
    "padded",
    "left",
    "justify",
    "value",
    "would",
    "use",
    "left",
    "angle",
    "bracket",
    "numbers",
    "left",
    "justified",
    "space",
    "uniform",
    "right",
    "justify",
    "would",
    "right",
    "angle",
    "bracket",
    "believe",
    "default",
    "cental",
    "line",
    "believe",
    "carrot",
    "symbol",
    "yep",
    "numbers",
    "centered",
    "positive",
    "values",
    "would",
    "like",
    "display",
    "plus",
    "sign",
    "use",
    "plus",
    "positive",
    "number",
    "preceded",
    "plus",
    "sign",
    "negative",
    "number",
    "preceded",
    "negative",
    "sign",
    "could",
    "use",
    "space",
    "positive",
    "numbers",
    "colon",
    "space",
    "numbers",
    "lined",
    "evenly",
    "even",
    "though",
    "negative",
    "number",
    "number",
    "thousand",
    "separator",
    "comma",
    "probably",
    "increase",
    "value",
    "prices",
    "thousand",
    "place",
    "separated",
    "comma",
    "could",
    "also",
    "mix",
    "match",
    "flags",
    "would",
    "like",
    "thousand",
    "separator",
    "along",
    "decimal",
    "point",
    "precision",
    "two",
    "decimal",
    "places",
    "preedee",
    "number",
    "plus",
    "sign",
    "positive",
    "yep",
    "based",
    "looking",
    "add",
    "combination",
    "flags",
    "yeah",
    "format",
    "specifiers",
    "everybody",
    "within",
    "placeholder",
    "insert",
    "value",
    "colon",
    "certain",
    "flags",
    "based",
    "looking",
    "exactly",
    "yeah",
    "formats",
    "specified",
    "python",
    "hey",
    "everybody",
    "topic",
    "going",
    "explain",
    "loops",
    "loop",
    "execute",
    "code",
    "condition",
    "remains",
    "true",
    "example",
    "use",
    "statement",
    "first",
    "ask",
    "user",
    "name",
    "name",
    "equals",
    "input",
    "enter",
    "name",
    "name",
    "equal",
    "empty",
    "string",
    "means",
    "user",
    "type",
    "anything",
    "let",
    "let",
    "print",
    "message",
    "enter",
    "name",
    "else",
    "print",
    "using",
    "f",
    "string",
    "hello",
    "users",
    "name",
    "skip",
    "prompt",
    "would",
    "execute",
    "statement",
    "continue",
    "rest",
    "program",
    "would",
    "like",
    "continually",
    "prompt",
    "user",
    "type",
    "name",
    "ca",
    "continue",
    "type",
    "something",
    "something",
    "well",
    "could",
    "replace",
    "statement",
    "loop",
    "condition",
    "true",
    "continue",
    "execute",
    "code",
    "within",
    "loop",
    "going",
    "reprompt",
    "user",
    "type",
    "name",
    "exit",
    "loop",
    "print",
    "hello",
    "whatever",
    "name",
    "let",
    "run",
    "enter",
    "name",
    "going",
    "hit",
    "enter",
    "enter",
    "name",
    "enter",
    "name",
    "okay",
    "give",
    "type",
    "first",
    "name",
    "hit",
    "enter",
    "hello",
    "whatever",
    "first",
    "name",
    "condition",
    "remains",
    "true",
    "execute",
    "code",
    "potentially",
    "forever",
    "condition",
    "longer",
    "true",
    "one",
    "main",
    "benefits",
    "loop",
    "true",
    "exit",
    "loop",
    "able",
    "continue",
    "print",
    "name",
    "hello",
    "name",
    "want",
    "way",
    "escape",
    "loop",
    "otherwise",
    "run",
    "known",
    "infinite",
    "loop",
    "let",
    "say",
    "name",
    "equal",
    "empty",
    "string",
    "print",
    "enter",
    "name",
    "going",
    "hit",
    "enter",
    "stuck",
    "infinite",
    "loop",
    "ca",
    "actually",
    "escape",
    "loop",
    "give",
    "exit",
    "strategy",
    "previously",
    "repr",
    "prompted",
    "user",
    "type",
    "something",
    "giving",
    "chance",
    "escape",
    "way",
    "kind",
    "works",
    "like",
    "statement",
    "instead",
    "executing",
    "code",
    "potentially",
    "infinite",
    "another",
    "example",
    "time",
    "let",
    "ask",
    "user",
    "age",
    "age",
    "equals",
    "convert",
    "input",
    "integer",
    "enter",
    "age",
    "need",
    "user",
    "type",
    "positive",
    "number",
    "age",
    "less",
    "zero",
    "let",
    "print",
    "message",
    "let",
    "user",
    "know",
    "ca",
    "age",
    "ca",
    "negative",
    "need",
    "strategy",
    "escape",
    "let",
    "reprompt",
    "user",
    "enter",
    "age",
    "type",
    "something",
    "valid",
    "escape",
    "loop",
    "let",
    "print",
    "using",
    "fst",
    "string",
    "age",
    "years",
    "old",
    "enter",
    "age",
    "going",
    "say",
    "negative",
    "1",
    "age",
    "ca",
    "negative",
    "2",
    "1",
    "million",
    "okay",
    "give",
    "21",
    "21",
    "years",
    "old",
    "another",
    "example",
    "age",
    "variable",
    "less",
    "zero",
    "repeat",
    "code",
    "forever",
    "let",
    "go",
    "example",
    "three",
    "going",
    "introduce",
    "logical",
    "operators",
    "user",
    "type",
    "food",
    "like",
    "food",
    "equals",
    "input",
    "enter",
    "food",
    "like",
    "order",
    "escape",
    "need",
    "press",
    "q",
    "quit",
    "food",
    "equal",
    "letter",
    "q",
    "continue",
    "loop",
    "however",
    "going",
    "make",
    "one",
    "change",
    "want",
    "exit",
    "loop",
    "press",
    "q",
    "could",
    "say",
    "food",
    "equals",
    "q",
    "within",
    "loop",
    "let",
    "print",
    "food",
    "stated",
    "like",
    "use",
    "f",
    "string",
    "like",
    "variable",
    "food",
    "prompt",
    "user",
    "enter",
    "another",
    "food",
    "like",
    "enter",
    "another",
    "food",
    "like",
    "q",
    "quit",
    "escape",
    "loop",
    "print",
    "buy",
    "okay",
    "enter",
    "food",
    "like",
    "c",
    "quit",
    "like",
    "pizza",
    "like",
    "pizza",
    "like",
    "sushi",
    "like",
    "sushi",
    "like",
    "ramen",
    "like",
    "ramen",
    "okay",
    "program",
    "kind",
    "lame",
    "going",
    "press",
    "q",
    "quit",
    "escape",
    "loop",
    "printed",
    "could",
    "something",
    "something",
    "true",
    "using",
    "logical",
    "operator",
    "right",
    "last",
    "example",
    "example",
    "four",
    "use",
    "logical",
    "operator",
    "ask",
    "user",
    "type",
    "number",
    "1",
    "10",
    "let",
    "say",
    "num",
    "equals",
    "input",
    "enter",
    "number",
    "1",
    "10",
    "typ",
    "cast",
    "input",
    "integer",
    "number",
    "less",
    "one",
    "number",
    "greater",
    "10",
    "let",
    "reprompt",
    "user",
    "let",
    "print",
    "using",
    "fst",
    "string",
    "variable",
    "num",
    "valid",
    "reprompt",
    "user",
    "enter",
    "number",
    "1",
    "10",
    "escape",
    "loop",
    "print",
    "number",
    "using",
    "fst",
    "string",
    "number",
    "variable",
    "num",
    "enter",
    "number",
    "1",
    "10",
    "0",
    "z",
    "valid",
    "1",
    "100",
    "nope",
    "uh",
    "five",
    "number",
    "five",
    "example",
    "example",
    "add",
    "logical",
    "operators",
    "wild",
    "loops",
    "condition",
    "true",
    "condition",
    "true",
    "execute",
    "code",
    "forever",
    "right",
    "everybody",
    "loops",
    "loop",
    "execute",
    "code",
    "condition",
    "remains",
    "true",
    "fairly",
    "useful",
    "verifying",
    "user",
    "input",
    "user",
    "types",
    "input",
    "valid",
    "reprompt",
    "many",
    "uses",
    "discuss",
    "future",
    "yeah",
    "loops",
    "python",
    "hello",
    "everybody",
    "today",
    "video",
    "creating",
    "compound",
    "interest",
    "calculator",
    "python",
    "know",
    "interest",
    "charge",
    "privilege",
    "borrowing",
    "money",
    "individual",
    "organization",
    "place",
    "money",
    "bank",
    "account",
    "typically",
    "acre",
    "interest",
    "create",
    "program",
    "tell",
    "new",
    "balance",
    "acre",
    "interest",
    "many",
    "years",
    "user",
    "going",
    "decide",
    "initial",
    "principle",
    "investment",
    "rate",
    "interest",
    "time",
    "years",
    "balance",
    "acre",
    "interest",
    "let",
    "begin",
    "let",
    "declare",
    "three",
    "variables",
    "principle",
    "rate",
    "rate",
    "interest",
    "time",
    "time",
    "years",
    "recently",
    "learned",
    "loops",
    "would",
    "like",
    "include",
    "within",
    "program",
    "get",
    "hang",
    "using",
    "ask",
    "user",
    "type",
    "initial",
    "principal",
    "investment",
    "continue",
    "prompt",
    "user",
    "type",
    "principle",
    "zero",
    "condition",
    "principal",
    "less",
    "equal",
    "equal",
    "zero",
    "take",
    "principal",
    "assign",
    "user",
    "input",
    "enter",
    "principal",
    "amount",
    "would",
    "like",
    "typ",
    "cast",
    "input",
    "floating",
    "point",
    "number",
    "user",
    "input",
    "principal",
    "less",
    "equal",
    "zero",
    "need",
    "inform",
    "user",
    "principal",
    "ca",
    "less",
    "equal",
    "zero",
    "going",
    "test",
    "program",
    "printing",
    "principle",
    "end",
    "temporarily",
    "enter",
    "principal",
    "amount",
    "ca",
    "type",
    "negative",
    "number",
    "continue",
    "investment",
    "principal",
    "ca",
    "less",
    "equal",
    "zero",
    "zero",
    "nope",
    "ca",
    "either",
    "th000",
    "okay",
    "yep",
    "th000",
    "works",
    "principle",
    "let",
    "copy",
    "loop",
    "paste",
    "replace",
    "principle",
    "rate",
    "rate",
    "interest",
    "enter",
    "interest",
    "rate",
    "interest",
    "rate",
    "ca",
    "less",
    "equal",
    "zero",
    "let",
    "copy",
    "paste",
    "change",
    "rate",
    "time",
    "let",
    "typ",
    "cast",
    "input",
    "integer",
    "working",
    "whole",
    "years",
    "enter",
    "time",
    "years",
    "time",
    "less",
    "equal",
    "zero",
    "going",
    "print",
    "principle",
    "rate",
    "time",
    "principle",
    "rate",
    "time",
    "okay",
    "know",
    "principle",
    "works",
    "enter",
    "interest",
    "rate",
    "interest",
    "rate",
    "ne1",
    "ca",
    "zero",
    "nope",
    "10",
    "10",
    "right",
    "works",
    "time",
    "time",
    "zero",
    "ca",
    "time",
    "netive",
    "1",
    "ca",
    "3",
    "years",
    "right",
    "know",
    "loops",
    "working",
    "formula",
    "calculate",
    "interest",
    "let",
    "say",
    "total",
    "total",
    "balance",
    "equals",
    "principal",
    "times",
    "1",
    "r",
    "rate",
    "100",
    "going",
    "enclose",
    "function",
    "set",
    "parentheses",
    "portion",
    "function",
    "take",
    "interest",
    "rate",
    "whole",
    "number",
    "create",
    "decimal",
    "enclose",
    "function",
    "within",
    "power",
    "function",
    "raise",
    "function",
    "power",
    "time",
    "calculate",
    "compound",
    "interest",
    "print",
    "new",
    "balance",
    "use",
    "fst",
    "string",
    "balance",
    "variable",
    "time",
    "word",
    "years",
    "add",
    "placeholder",
    "add",
    "total",
    "include",
    "dollar",
    "sign",
    "maybe",
    "dollars",
    "pick",
    "unit",
    "currency",
    "would",
    "like",
    "format",
    "variable",
    "format",
    "specify",
    "fire",
    "display",
    "two",
    "decimal",
    "places",
    "2f",
    "okay",
    "let",
    "try",
    "enter",
    "principal",
    "amount",
    "invest",
    "maybe",
    "stock",
    "market",
    "interest",
    "rate",
    "maybe",
    "10",
    "year",
    "time",
    "years",
    "one",
    "one",
    "year",
    "10",
    "interest",
    "new",
    "balance",
    "let",
    "try",
    "one",
    "time",
    "good",
    "measure",
    "maybe",
    "500",
    "interest",
    "rate",
    "seven",
    "2",
    "years",
    "new",
    "balance",
    "would",
    "572",
    "45",
    "right",
    "another",
    "way",
    "writing",
    "program",
    "would",
    "like",
    "allow",
    "user",
    "enter",
    "values",
    "equal",
    "zero",
    "principle",
    "less",
    "zero",
    "principal",
    "less",
    "zero",
    "principal",
    "ca",
    "less",
    "zero",
    "let",
    "rate",
    "interest",
    "ca",
    "less",
    "zero",
    "time",
    "time",
    "ca",
    "less",
    "zero",
    "happens",
    "program",
    "remember",
    "declaring",
    "variables",
    "top",
    "uh",
    "nothing",
    "happens",
    "go",
    "straight",
    "results",
    "reason",
    "happening",
    "reach",
    "wild",
    "loops",
    "condition",
    "false",
    "beginning",
    "never",
    "end",
    "entering",
    "loops",
    "skip",
    "three",
    "conditions",
    "false",
    "write",
    "different",
    "variation",
    "loop",
    "could",
    "say",
    "true",
    "true",
    "boolean",
    "means",
    "loop",
    "continue",
    "forever",
    "unless",
    "explicitly",
    "break",
    "loop",
    "going",
    "add",
    "else",
    "clause",
    "else",
    "break",
    "break",
    "break",
    "loop",
    "second",
    "loop",
    "change",
    "rate",
    "less",
    "zero",
    "true",
    "add",
    "else",
    "cli",
    "laws",
    "else",
    "break",
    "loop",
    "true",
    "else",
    "break",
    "loop",
    "able",
    "enter",
    "zero",
    "values",
    "enter",
    "principal",
    "amount",
    "0",
    "0",
    "0",
    "balance",
    "0",
    "years",
    "0",
    "work",
    "allowed",
    "enter",
    "zero",
    "values",
    "interest",
    "rate",
    "zero",
    "one",
    "year",
    "still",
    "well",
    "okay",
    "everybody",
    "thought",
    "would",
    "interesting",
    "project",
    "create",
    "know",
    "loops",
    "work",
    "could",
    "write",
    "either",
    "standard",
    "loop",
    "condition",
    "principal",
    "less",
    "equal",
    "zero",
    "could",
    "say",
    "true",
    "loop",
    "would",
    "continue",
    "forever",
    "would",
    "need",
    "explicitly",
    "break",
    "loop",
    "using",
    "break",
    "keyword",
    "cover",
    "four",
    "loops",
    "yeah",
    "compound",
    "interest",
    "calculator",
    "python",
    "hey",
    "everybody",
    "topic",
    "need",
    "explain",
    "loops",
    "loop",
    "execute",
    "block",
    "code",
    "fixed",
    "number",
    "times",
    "iterate",
    "range",
    "string",
    "sequence",
    "anything",
    "considered",
    "iterable",
    "examples",
    "future",
    "topics",
    "lot",
    "overlap",
    "could",
    "use",
    "either",
    "loop",
    "loop",
    "loops",
    "tend",
    "better",
    "situations",
    "something",
    "fixed",
    "number",
    "times",
    "example",
    "suppose",
    "need",
    "count",
    "10",
    "use",
    "loop",
    "could",
    "write",
    "something",
    "like",
    "would",
    "type",
    "four",
    "would",
    "need",
    "sort",
    "counter",
    "typically",
    "see",
    "people",
    "write",
    "x",
    "4",
    "x",
    "use",
    "range",
    "function",
    "number",
    "would",
    "like",
    "start",
    "would",
    "like",
    "start",
    "1",
    "count",
    "10",
    "second",
    "number",
    "x",
    "exclusive",
    "really",
    "going",
    "write",
    "11",
    "want",
    "count",
    "10",
    "colon",
    "hit",
    "enter",
    "whatever",
    "code",
    "would",
    "like",
    "repeat",
    "certain",
    "number",
    "times",
    "list",
    "underneath",
    "loop",
    "make",
    "sure",
    "code",
    "indented",
    "print",
    "whatever",
    "counter",
    "x",
    "run",
    "code",
    "begin",
    "one",
    "stop",
    "reach",
    "11",
    "yeah",
    "begun",
    "one",
    "counted",
    "way",
    "10",
    "basic",
    "syntax",
    "loop",
    "counter",
    "really",
    "name",
    "anything",
    "sometimes",
    "see",
    "people",
    "name",
    "counter",
    "would",
    "work",
    "let",
    "stick",
    "x",
    "range",
    "would",
    "like",
    "begin",
    "stop",
    "okay",
    "let",
    "count",
    "backwards",
    "let",
    "start",
    "10",
    "count",
    "zero",
    "escape",
    "loop",
    "let",
    "print",
    "happy",
    "new",
    "year",
    "print",
    "happy",
    "new",
    "year",
    "outside",
    "loop",
    "count",
    "backwards",
    "enclose",
    "range",
    "function",
    "within",
    "reversed",
    "function",
    "reversed",
    "begin",
    "10",
    "count",
    "one",
    "print",
    "happy",
    "new",
    "year",
    "case",
    "count",
    "backwards",
    "would",
    "enclose",
    "range",
    "function",
    "within",
    "reversed",
    "function",
    "additional",
    "parameter",
    "could",
    "add",
    "step",
    "would",
    "like",
    "count",
    "twos",
    "would",
    "add",
    "comma",
    "two",
    "going",
    "get",
    "rid",
    "happy",
    "new",
    "year",
    "let",
    "print",
    "numbers",
    "1",
    "10",
    "count",
    "twos",
    "begin",
    "one",
    "though",
    "1",
    "3",
    "5",
    "7",
    "9",
    "change",
    "step",
    "three",
    "would",
    "count",
    "threes",
    "beginning",
    "1",
    "4",
    "7",
    "10",
    "range",
    "function",
    "thing",
    "iterate",
    "iterate",
    "string",
    "let",
    "say",
    "credit",
    "card",
    "number",
    "credit",
    "card",
    "equals",
    "make",
    "credit",
    "card",
    "number",
    "dashes",
    "good",
    "enough",
    "x",
    "credit",
    "card",
    "print",
    "x",
    "x",
    "hold",
    "current",
    "position",
    "first",
    "one",
    "2",
    "3",
    "4",
    "dash",
    "forth",
    "credit",
    "card",
    "number",
    "1",
    "2",
    "3",
    "6",
    "78",
    "think",
    "get",
    "idea",
    "iterate",
    "string",
    "loop",
    "well",
    "projects",
    "involving",
    "two",
    "useful",
    "keywords",
    "well",
    "exclusive",
    "loops",
    "use",
    "within",
    "loops",
    "well",
    "continue",
    "break",
    "suppose",
    "going",
    "count",
    "20",
    "x",
    "range",
    "begin",
    "one",
    "stop",
    "21",
    "think",
    "kind",
    "dumb",
    "example",
    "gets",
    "point",
    "across",
    "13",
    "considered",
    "unlucky",
    "number",
    "right",
    "counter",
    "reaches",
    "13",
    "would",
    "like",
    "skip",
    "well",
    "continue",
    "keyword",
    "x",
    "equal",
    "13",
    "continue",
    "skip",
    "iteration",
    "else",
    "print",
    "whatever",
    "counter",
    "let",
    "take",
    "look",
    "yeah",
    "numbers",
    "1",
    "20",
    "skipped",
    "number",
    "13",
    "skip",
    "iteration",
    "use",
    "continue",
    "keyword",
    "whereas",
    "break",
    "keyword",
    "break",
    "loop",
    "entirely",
    "x",
    "equal",
    "13",
    "break",
    "yeah",
    "counted",
    "12",
    "reach",
    "13",
    "escaped",
    "loop",
    "yeah",
    "everybody",
    "four",
    "loops",
    "execute",
    "block",
    "code",
    "fixed",
    "number",
    "times",
    "iterate",
    "range",
    "string",
    "sequence",
    "anything",
    "considered",
    "iterable",
    "lot",
    "overlap",
    "could",
    "use",
    "either",
    "loop",
    "loop",
    "loops",
    "tend",
    "better",
    "need",
    "execute",
    "something",
    "possibly",
    "infinite",
    "amount",
    "times",
    "accepting",
    "user",
    "input",
    "example",
    "yeah",
    "everybody",
    "four",
    "loops",
    "python",
    "going",
    "everybody",
    "today",
    "topic",
    "going",
    "creating",
    "countdown",
    "timer",
    "python",
    "using",
    "learned",
    "previous",
    "topics",
    "let",
    "begin",
    "need",
    "import",
    "time",
    "module",
    "pretty",
    "cool",
    "function",
    "within",
    "time",
    "module",
    "sleep",
    "function",
    "type",
    "time",
    "sleep",
    "add",
    "set",
    "parenthesis",
    "within",
    "set",
    "parenthesis",
    "program",
    "essentially",
    "sleep",
    "given",
    "amount",
    "seconds",
    "like",
    "three",
    "3",
    "seconds",
    "let",
    "print",
    "something",
    "demonstration",
    "times",
    "execute",
    "code",
    "nothing",
    "happens",
    "3",
    "seconds",
    "3",
    "seconds",
    "passes",
    "displays",
    "message",
    "times",
    "use",
    "sleep",
    "function",
    "time",
    "module",
    "sleep",
    "given",
    "amount",
    "time",
    "ask",
    "user",
    "long",
    "would",
    "like",
    "set",
    "timer",
    "create",
    "variable",
    "let",
    "say",
    "time",
    "time",
    "seconds",
    "create",
    "prompt",
    "enter",
    "time",
    "seconds",
    "typ",
    "cast",
    "input",
    "integer",
    "need",
    "create",
    "loop",
    "could",
    "use",
    "either",
    "loop",
    "four",
    "loop",
    "lot",
    "overlap",
    "could",
    "use",
    "either",
    "one",
    "use",
    "four",
    "loop",
    "case",
    "four",
    "need",
    "sort",
    "counter",
    "x",
    "range",
    "z",
    "time",
    "iteration",
    "sleep",
    "1",
    "second",
    "let",
    "test",
    "far",
    "would",
    "like",
    "sleep",
    "3",
    "seconds",
    "think",
    "approximately",
    "three",
    "going",
    "print",
    "whatever",
    "x",
    "print",
    "x",
    "x",
    "counter",
    "0o",
    "1",
    "2",
    "times",
    "getting",
    "somewhere",
    "would",
    "like",
    "count",
    "backwards",
    "could",
    "enclose",
    "range",
    "function",
    "within",
    "reverse",
    "function",
    "another",
    "technique",
    "use",
    "using",
    "step",
    "let",
    "replace",
    "zero",
    "time",
    "end",
    "zero",
    "set",
    "step",
    "nega",
    "increment",
    "backwards",
    "using",
    "function",
    "another",
    "technique",
    "count",
    "backwards",
    "let",
    "wait",
    "3",
    "seconds",
    "3",
    "2",
    "1",
    "times",
    "let",
    "display",
    "digital",
    "clock",
    "sort",
    "would",
    "calculate",
    "many",
    "hours",
    "minutes",
    "seconds",
    "let",
    "calculate",
    "seconds",
    "seconds",
    "equals",
    "x",
    "x",
    "counter",
    "remember",
    "modulus",
    "60",
    "within",
    "print",
    "statement",
    "use",
    "f",
    "string",
    "displaying",
    "hours",
    "minutes",
    "seconds",
    "add",
    "placeholders",
    "fields",
    "seconds",
    "digital",
    "clock",
    "ca",
    "go",
    "60",
    "either",
    "seconds",
    "minutes",
    "using",
    "modulus",
    "60",
    "modulus",
    "operator",
    "gives",
    "remainder",
    "division",
    "let",
    "begin",
    "11",
    "11",
    "10",
    "9",
    "counting",
    "would",
    "like",
    "add",
    "zero",
    "padding",
    "format",
    "specifier",
    "seconds",
    "add",
    "colon",
    "need",
    "display",
    "two",
    "digits",
    "zero",
    "pad",
    "digits",
    "let",
    "try",
    "wait",
    "11",
    "seconds",
    "seconds",
    "11",
    "10",
    "9",
    "yeah",
    "zero",
    "padding",
    "looking",
    "like",
    "digital",
    "clock",
    "let",
    "add",
    "minutes",
    "calculate",
    "minutes",
    "let",
    "assign",
    "variable",
    "minutes",
    "equal",
    "x",
    "60",
    "60",
    "seconds",
    "within",
    "minute",
    "going",
    "typ",
    "cast",
    "result",
    "integer",
    "modulus",
    "60",
    "would",
    "like",
    "field",
    "minutes",
    "go",
    "60",
    "let",
    "add",
    "placeholder",
    "displaying",
    "minutes",
    "format",
    "specifier",
    "02",
    "going",
    "wait",
    "65",
    "seconds",
    "1",
    "minute",
    "5",
    "seconds",
    "want",
    "sure",
    "go",
    "minute",
    "yep",
    "working",
    "let",
    "calculate",
    "hours",
    "oh",
    "way",
    "stop",
    "program",
    "running",
    "hit",
    "red",
    "square",
    "corner",
    "corner",
    "let",
    "calculate",
    "hours",
    "hours",
    "equals",
    "x",
    "seconds",
    "hour",
    "typ",
    "cast",
    "result",
    "integer",
    "within",
    "fst",
    "string",
    "display",
    "format",
    "specifier",
    "02",
    "run",
    "program",
    "let",
    "wait",
    "seconds",
    "1",
    "hour",
    "5",
    "seconds",
    "want",
    "sure",
    "go",
    "1",
    "hour",
    "yeah",
    "right",
    "works",
    "reason",
    "add",
    "modulus",
    "24",
    "days",
    "within",
    "fstring",
    "display",
    "amount",
    "hours",
    "exclude",
    "modulus",
    "24",
    "right",
    "everybody",
    "well",
    "thought",
    "good",
    "practice",
    "working",
    "loops",
    "try",
    "many",
    "exercises",
    "yeah",
    "countdown",
    "timer",
    "program",
    "python",
    "hey",
    "everybody",
    "guess",
    "today",
    "topic",
    "going",
    "explaining",
    "nested",
    "loops",
    "looks",
    "like",
    "nested",
    "loop",
    "think",
    "loop",
    "found",
    "within",
    "code",
    "another",
    "loop",
    "loop",
    "right",
    "code",
    "within",
    "loop",
    "indented",
    "underneath",
    "loop",
    "well",
    "could",
    "looping",
    "structure",
    "found",
    "within",
    "code",
    "another",
    "looping",
    "structure",
    "loop",
    "outside",
    "outer",
    "loop",
    "internal",
    "loop",
    "within",
    "outer",
    "loop",
    "known",
    "inner",
    "loop",
    "encounter",
    "nested",
    "loops",
    "really",
    "situational",
    "could",
    "loop",
    "inside",
    "loop",
    "loop",
    "inside",
    "loop",
    "loop",
    "inside",
    "loop",
    "loop",
    "inside",
    "loop",
    "etc",
    "demonstration",
    "let",
    "begin",
    "displaying",
    "numbers",
    "1",
    "9",
    "use",
    "loop",
    "x",
    "x",
    "counter",
    "range",
    "1",
    "comma",
    "10",
    "remember",
    "second",
    "number",
    "case",
    "10",
    "exclusive",
    "print",
    "counter",
    "x",
    "program",
    "print",
    "numbers",
    "1",
    "9",
    "exercise",
    "end",
    "topic",
    "probably",
    "explain",
    "feature",
    "print",
    "statement",
    "end",
    "print",
    "statement",
    "new",
    "line",
    "character",
    "need",
    "numbers",
    "line",
    "end",
    "print",
    "statement",
    "add",
    "comma",
    "end",
    "equals",
    "empty",
    "string",
    "normally",
    "print",
    "statement",
    "ends",
    "new",
    "line",
    "character",
    "set",
    "something",
    "else",
    "run",
    "numbers",
    "line",
    "could",
    "add",
    "different",
    "symbol",
    "like",
    "dash",
    "space",
    "characters",
    "separated",
    "space",
    "let",
    "stick",
    "empty",
    "string",
    "okay",
    "used",
    "loop",
    "count",
    "numbers",
    "1",
    "9",
    "would",
    "like",
    "repeat",
    "three",
    "times",
    "well",
    "could",
    "create",
    "another",
    "loop",
    "x",
    "range",
    "could",
    "say",
    "1",
    "comma",
    "4",
    "could",
    "say",
    "three",
    "either",
    "way",
    "whatever",
    "code",
    "within",
    "loop",
    "executed",
    "three",
    "times",
    "let",
    "cut",
    "original",
    "loop",
    "place",
    "within",
    "code",
    "new",
    "loop",
    "outer",
    "loop",
    "code",
    "repeat",
    "entirely",
    "three",
    "separate",
    "times",
    "uh",
    "one",
    "thing",
    "need",
    "pay",
    "attention",
    "two",
    "counters",
    "name",
    "want",
    "sure",
    "different",
    "let",
    "rename",
    "counter",
    "inner",
    "loop",
    "instead",
    "x",
    "sure",
    "change",
    "well",
    "run",
    "code",
    "completing",
    "let",
    "see",
    "27",
    "iterations",
    "exit",
    "four",
    "loop",
    "need",
    "count",
    "numbers",
    "1",
    "n",
    "one",
    "iteration",
    "outer",
    "loop",
    "outer",
    "loop",
    "saying",
    "hey",
    "still",
    "need",
    "three",
    "total",
    "iterations",
    "would",
    "like",
    "separate",
    "lines",
    "let",
    "make",
    "look",
    "little",
    "different",
    "let",
    "add",
    "iteration",
    "outer",
    "loop",
    "onto",
    "new",
    "line",
    "within",
    "outer",
    "loop",
    "within",
    "inner",
    "loop",
    "going",
    "create",
    "blank",
    "print",
    "statement",
    "print",
    "new",
    "line",
    "let",
    "try",
    "inner",
    "loop",
    "count",
    "numbers",
    "1",
    "n",
    "exit",
    "loop",
    "print",
    "new",
    "line",
    "repeat",
    "outer",
    "loop",
    "satisfied",
    "basically",
    "nested",
    "loop",
    "loop",
    "inside",
    "another",
    "looping",
    "structure",
    "let",
    "create",
    "project",
    "going",
    "print",
    "rectangle",
    "made",
    "symbol",
    "set",
    "user",
    "type",
    "many",
    "rows",
    "columns",
    "rectangle",
    "reuse",
    "code",
    "already",
    "written",
    "time",
    "let",
    "accept",
    "user",
    "input",
    "rows",
    "equals",
    "input",
    "enter",
    "number",
    "rows",
    "typ",
    "cast",
    "input",
    "integer",
    "let",
    "copy",
    "line",
    "paste",
    "change",
    "rows",
    "columns",
    "second",
    "line",
    "enter",
    "number",
    "columns",
    "let",
    "create",
    "symbol",
    "symbol",
    "equals",
    "input",
    "enter",
    "symbol",
    "use",
    "already",
    "rectangle",
    "structure",
    "right",
    "think",
    "outer",
    "loop",
    "charge",
    "rows",
    "let",
    "change",
    "range",
    "three",
    "range",
    "rows",
    "loop",
    "charge",
    "columns",
    "range",
    "columns",
    "print",
    "symbol",
    "whatever",
    "user",
    "chooses",
    "let",
    "try",
    "enter",
    "number",
    "rows",
    "four",
    "rows",
    "10",
    "columns",
    "use",
    "dollar",
    "sign",
    "rectangle",
    "four",
    "rows",
    "10",
    "columns",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "let",
    "try",
    "one",
    "time",
    "three",
    "rows",
    "five",
    "columns",
    "use",
    "asterisk",
    "yep",
    "three",
    "rows",
    "five",
    "columns",
    "yeah",
    "nested",
    "loop",
    "really",
    "loop",
    "inside",
    "another",
    "loop",
    "loop",
    "type",
    "loop",
    "really",
    "matter",
    "well",
    "within",
    "loop",
    "situation",
    "loop",
    "inside",
    "another",
    "loop",
    "yeah",
    "nested",
    "loops",
    "python",
    "well",
    "hello",
    "everybody",
    "today",
    "explaining",
    "different",
    "types",
    "collections",
    "python",
    "four",
    "general",
    "purpose",
    "collections",
    "three",
    "lists",
    "sets",
    "tles",
    "also",
    "dictionaries",
    "save",
    "next",
    "topic",
    "kind",
    "tricky",
    "collection",
    "would",
    "think",
    "single",
    "variable",
    "saying",
    "within",
    "quotes",
    "used",
    "store",
    "multiple",
    "values",
    "would",
    "explain",
    "collection",
    "beginner",
    "example",
    "let",
    "say",
    "variable",
    "variable",
    "fruit",
    "fruit",
    "equals",
    "value",
    "like",
    "apple",
    "print",
    "fruit",
    "apple",
    "could",
    "turn",
    "variable",
    "collection",
    "surrounding",
    "values",
    "either",
    "set",
    "square",
    "brackets",
    "list",
    "curly",
    "braces",
    "set",
    "parenthesis",
    "tuple",
    "let",
    "begin",
    "list",
    "would",
    "like",
    "store",
    "one",
    "value",
    "variable",
    "surround",
    "values",
    "set",
    "square",
    "brackets",
    "variable",
    "list",
    "store",
    "multiple",
    "values",
    "separated",
    "comma",
    "apple",
    "variable",
    "orange",
    "banana",
    "coconut",
    "one",
    "naming",
    "convention",
    "like",
    "use",
    "declare",
    "collection",
    "list",
    "set",
    "toule",
    "like",
    "take",
    "variable",
    "name",
    "make",
    "plural",
    "obvious",
    "collection",
    "values",
    "technically",
    "english",
    "language",
    "fruit",
    "would",
    "still",
    "plural",
    "english",
    "weird",
    "language",
    "list",
    "fruit",
    "named",
    "fruits",
    "print",
    "list",
    "result",
    "values",
    "enclosed",
    "set",
    "square",
    "brackets",
    "access",
    "one",
    "elements",
    "found",
    "within",
    "list",
    "use",
    "index",
    "operator",
    "much",
    "like",
    "strings",
    "first",
    "element",
    "would",
    "index",
    "zero",
    "would",
    "print",
    "value",
    "apple",
    "index",
    "one",
    "would",
    "orange",
    "two",
    "banana",
    "three",
    "coconut",
    "four",
    "value",
    "list",
    "index",
    "range",
    "value",
    "collection",
    "also",
    "known",
    "element",
    "attempt",
    "access",
    "element",
    "found",
    "within",
    "collection",
    "run",
    "index",
    "error",
    "index",
    "operator",
    "could",
    "set",
    "beginning",
    "index",
    "ending",
    "index",
    "step",
    "would",
    "like",
    "first",
    "three",
    "elements",
    "could",
    "say",
    "zero",
    "colon",
    "three",
    "would",
    "give",
    "apple",
    "orange",
    "banana",
    "technically",
    "even",
    "need",
    "zero",
    "need",
    "colon",
    "though",
    "even",
    "use",
    "step",
    "would",
    "like",
    "every",
    "second",
    "element",
    "apple",
    "banana",
    "every",
    "second",
    "element",
    "beginning",
    "index",
    "zero",
    "maybe",
    "would",
    "like",
    "fruit",
    "backwards",
    "set",
    "step",
    "1",
    "coconut",
    "banana",
    "orange",
    "apple",
    "use",
    "index",
    "operator",
    "collections",
    "much",
    "like",
    "use",
    "strings",
    "another",
    "cool",
    "thing",
    "collections",
    "iterate",
    "loop",
    "x",
    "collection",
    "fruits",
    "would",
    "like",
    "print",
    "whatever",
    "x",
    "iterated",
    "list",
    "apple",
    "orange",
    "banana",
    "coconut",
    "x",
    "really",
    "descriptive",
    "see",
    "people",
    "collection",
    "name",
    "plural",
    "counter",
    "singular",
    "version",
    "word",
    "collection",
    "name",
    "fruits",
    "let",
    "rename",
    "x",
    "fruit",
    "singular",
    "mandatory",
    "common",
    "convention",
    "readable",
    "way",
    "every",
    "fruit",
    "fruits",
    "cars",
    "could",
    "say",
    "car",
    "cars",
    "counter",
    "storing",
    "whatever",
    "value",
    "within",
    "collection",
    "different",
    "methods",
    "use",
    "collections",
    "list",
    "different",
    "methods",
    "available",
    "collection",
    "use",
    "dur",
    "function",
    "within",
    "function",
    "add",
    "collection",
    "fruits",
    "would",
    "need",
    "print",
    "let",
    "surround",
    "function",
    "print",
    "statement",
    "alphabetical",
    "order",
    "attributes",
    "explained",
    "yet",
    "future",
    "topic",
    "scroll",
    "end",
    "bunch",
    "different",
    "methods",
    "list",
    "perform",
    "append",
    "clear",
    "copy",
    "count",
    "extend",
    "index",
    "insert",
    "pop",
    "remove",
    "reverse",
    "sort",
    "would",
    "like",
    "description",
    "methods",
    "help",
    "function",
    "help",
    "add",
    "collection",
    "parentheses",
    "would",
    "need",
    "print",
    "description",
    "methods",
    "attributes",
    "example",
    "sort",
    "method",
    "description",
    "sort",
    "list",
    "ascending",
    "order",
    "return",
    "none",
    "bunch",
    "stuff",
    "ever",
    "forget",
    "capable",
    "list",
    "collection",
    "always",
    "use",
    "help",
    "function",
    "print",
    "description",
    "attributes",
    "methods",
    "available",
    "need",
    "length",
    "many",
    "elements",
    "within",
    "collection",
    "length",
    "function",
    "return",
    "length",
    "list",
    "fruits",
    "let",
    "print",
    "four",
    "elements",
    "within",
    "list",
    "length",
    "function",
    "returns",
    "four",
    "add",
    "extra",
    "element",
    "like",
    "pineapple",
    "number",
    "would",
    "five",
    "let",
    "remove",
    "using",
    "operator",
    "find",
    "value",
    "within",
    "collection",
    "value",
    "apple",
    "fruits",
    "would",
    "need",
    "print",
    "operator",
    "return",
    "boolean",
    "let",
    "print",
    "whatever",
    "apple",
    "fruits",
    "true",
    "pineapple",
    "pineapple",
    "false",
    "use",
    "operator",
    "find",
    "value",
    "within",
    "list",
    "applies",
    "collections",
    "lists",
    "ordered",
    "changeable",
    "duplicates",
    "okay",
    "change",
    "one",
    "values",
    "create",
    "list",
    "let",
    "take",
    "fruits",
    "index",
    "zero",
    "set",
    "equal",
    "pineapple",
    "let",
    "iterate",
    "fruit",
    "using",
    "loop",
    "okay",
    "first",
    "element",
    "longer",
    "apple",
    "pineapple",
    "orange",
    "banana",
    "coconut",
    "using",
    "index",
    "reassign",
    "one",
    "values",
    "change",
    "zero",
    "one",
    "well",
    "apple",
    "pineapple",
    "banana",
    "coconut",
    "let",
    "cover",
    "methods",
    "found",
    "within",
    "list",
    "append",
    "element",
    "type",
    "name",
    "list",
    "append",
    "would",
    "like",
    "append",
    "end",
    "list",
    "let",
    "append",
    "pineapple",
    "going",
    "get",
    "rid",
    "loop",
    "going",
    "display",
    "list",
    "apple",
    "orange",
    "banana",
    "coconut",
    "pineapple",
    "add",
    "element",
    "end",
    "list",
    "use",
    "append",
    "method",
    "remove",
    "element",
    "use",
    "remove",
    "method",
    "fruits",
    "remove",
    "let",
    "remove",
    "apple",
    "apple",
    "longer",
    "orange",
    "banana",
    "coconut",
    "using",
    "insert",
    "method",
    "insert",
    "value",
    "given",
    "index",
    "fruits",
    "insert",
    "list",
    "index",
    "zero",
    "would",
    "beginning",
    "value",
    "pineapple",
    "pineapple",
    "apple",
    "orange",
    "banana",
    "coconut",
    "sort",
    "method",
    "sort",
    "list",
    "roots",
    "sort",
    "alphabetical",
    "order",
    "apple",
    "banana",
    "coconut",
    "orange",
    "reverse",
    "list",
    "would",
    "use",
    "reverse",
    "method",
    "fruits",
    "reverse",
    "coconut",
    "banana",
    "orange",
    "apple",
    "however",
    "reverse",
    "alphabetical",
    "order",
    "elements",
    "reversed",
    "based",
    "order",
    "place",
    "would",
    "like",
    "reverse",
    "alphabetical",
    "order",
    "first",
    "sort",
    "reverse",
    "orange",
    "coconut",
    "banana",
    "apple",
    "clear",
    "list",
    "use",
    "clear",
    "method",
    "fruits",
    "clear",
    "elements",
    "gone",
    "return",
    "index",
    "value",
    "let",
    "return",
    "index",
    "apple",
    "fruits",
    "index",
    "list",
    "element",
    "need",
    "print",
    "let",
    "print",
    "index",
    "returned",
    "index",
    "apple",
    "zero",
    "coconut",
    "would",
    "three",
    "find",
    "value",
    "like",
    "pineapple",
    "well",
    "error",
    "pineapple",
    "list",
    "could",
    "count",
    "amount",
    "times",
    "value",
    "found",
    "within",
    "list",
    "duplicates",
    "okay",
    "fruits",
    "count",
    "let",
    "count",
    "many",
    "bananas",
    "list",
    "banana",
    "print",
    "one",
    "banana",
    "found",
    "within",
    "list",
    "pineapples",
    "zero",
    "lists",
    "surround",
    "values",
    "set",
    "square",
    "brackets",
    "values",
    "ordered",
    "changeable",
    "duplicates",
    "okay",
    "let",
    "talk",
    "next",
    "collection",
    "set",
    "create",
    "set",
    "surround",
    "values",
    "instead",
    "set",
    "curly",
    "braces",
    "collection",
    "fruits",
    "set",
    "set",
    "different",
    "benefits",
    "values",
    "unordered",
    "immutable",
    "meaning",
    "ca",
    "alter",
    "values",
    "however",
    "add",
    "remove",
    "elements",
    "set",
    "include",
    "duplicates",
    "going",
    "delete",
    "methods",
    "print",
    "fruits",
    "values",
    "order",
    "originally",
    "set",
    "unordered",
    "run",
    "likely",
    "different",
    "order",
    "see",
    "banana",
    "apple",
    "coconut",
    "orange",
    "display",
    "different",
    "attributes",
    "methods",
    "set",
    "use",
    "dur",
    "function",
    "methods",
    "little",
    "advanced",
    "might",
    "recognize",
    "like",
    "add",
    "clear",
    "copy",
    "description",
    "methods",
    "use",
    "help",
    "function",
    "much",
    "like",
    "find",
    "length",
    "set",
    "use",
    "length",
    "function",
    "four",
    "use",
    "operator",
    "find",
    "value",
    "found",
    "within",
    "set",
    "unfortunately",
    "pineapples",
    "within",
    "set",
    "use",
    "index",
    "operator",
    "set",
    "would",
    "happen",
    "error",
    "set",
    "object",
    "subscriptable",
    "able",
    "use",
    "indexing",
    "set",
    "unordered",
    "much",
    "like",
    "list",
    "string",
    "ca",
    "change",
    "values",
    "set",
    "could",
    "add",
    "remove",
    "elements",
    "let",
    "use",
    "add",
    "method",
    "add",
    "guess",
    "pineapple",
    "okay",
    "orange",
    "apple",
    "pineapple",
    "coconut",
    "banana",
    "remove",
    "element",
    "fruits",
    "remove",
    "let",
    "remove",
    "apple",
    "apple",
    "gone",
    "coconut",
    "orange",
    "banana",
    "pop",
    "pop",
    "method",
    "remove",
    "whatever",
    "element",
    "first",
    "going",
    "random",
    "though",
    "orange",
    "coconut",
    "banana",
    "apple",
    "coconut",
    "banana",
    "apple",
    "banana",
    "coconut",
    "clear",
    "fruits",
    "cle",
    "elements",
    "set",
    "gone",
    "useful",
    "methods",
    "beginners",
    "summary",
    "set",
    "collection",
    "unordered",
    "immutable",
    "ca",
    "change",
    "values",
    "adding",
    "removing",
    "elements",
    "okay",
    "duplicates",
    "allowed",
    "let",
    "try",
    "real",
    "quick",
    "going",
    "add",
    "second",
    "coconut",
    "yeah",
    "see",
    "still",
    "one",
    "coconut",
    "sets",
    "may",
    "work",
    "well",
    "working",
    "constants",
    "maybe",
    "colors",
    "example",
    "need",
    "find",
    "color",
    "within",
    "set",
    "right",
    "lastly",
    "let",
    "talk",
    "tupples",
    "tupple",
    "collection",
    "surrounded",
    "set",
    "parentheses",
    "topples",
    "ordered",
    "unchangeable",
    "duplicates",
    "okay",
    "one",
    "benefit",
    "topple",
    "list",
    "topples",
    "faster",
    "lists",
    "working",
    "collection",
    "okay",
    "collection",
    "ordered",
    "unchangeable",
    "might",
    "well",
    "use",
    "tupple",
    "faster",
    "print",
    "topple",
    "values",
    "surrounded",
    "set",
    "parentheses",
    "dur",
    "function",
    "display",
    "attributes",
    "methods",
    "many",
    "tle",
    "methods",
    "count",
    "index",
    "also",
    "help",
    "display",
    "description",
    "attributes",
    "methods",
    "find",
    "length",
    "tle",
    "length",
    "function",
    "five",
    "elements",
    "within",
    "using",
    "operator",
    "find",
    "value",
    "found",
    "within",
    "tupple",
    "pineapple",
    "within",
    "fruits",
    "two",
    "methods",
    "access",
    "let",
    "find",
    "index",
    "apple",
    "fruits",
    "index",
    "apple",
    "print",
    "whatever",
    "returned",
    "apple",
    "found",
    "index",
    "zero",
    "also",
    "count",
    "fruits",
    "count",
    "many",
    "coconuts",
    "found",
    "within",
    "tupple",
    "fruits",
    "count",
    "coconuts",
    "print",
    "many",
    "coconuts",
    "two",
    "coconuts",
    "collections",
    "iterable",
    "iterate",
    "using",
    "loop",
    "fruit",
    "fruits",
    "yep",
    "apple",
    "orange",
    "banana",
    "coconut",
    "coconut",
    "right",
    "everybody",
    "collections",
    "think",
    "single",
    "variable",
    "used",
    "store",
    "multiple",
    "values",
    "four",
    "general",
    "purpose",
    "collections",
    "beginners",
    "lists",
    "sets",
    "tles",
    "dictionaries",
    "talk",
    "next",
    "unique",
    "benefits",
    "lists",
    "ordered",
    "changeable",
    "duplicates",
    "okay",
    "set",
    "unordered",
    "immutable",
    "adding",
    "removing",
    "elements",
    "okay",
    "duplicates",
    "allowed",
    "tupple",
    "ordered",
    "unchangeable",
    "duplicates",
    "okay",
    "faster",
    "lists",
    "use",
    "topples",
    "list",
    "yeah",
    "collections",
    "python",
    "hello",
    "everybody",
    "today",
    "creating",
    "shopping",
    "cart",
    "program",
    "program",
    "exercise",
    "follow",
    "previous",
    "lesson",
    "lists",
    "sets",
    "tles",
    "practice",
    "collections",
    "better",
    "using",
    "thought",
    "create",
    "exercise",
    "get",
    "hang",
    "moving",
    "program",
    "two",
    "lists",
    "foods",
    "lists",
    "empty",
    "declare",
    "use",
    "quite",
    "yet",
    "prices",
    "total",
    "total",
    "equals",
    "z",
    "reason",
    "using",
    "topples",
    "tles",
    "unchangeable",
    "going",
    "ask",
    "user",
    "food",
    "would",
    "like",
    "buy",
    "ca",
    "depend",
    "elements",
    "tle",
    "using",
    "sets",
    "sets",
    "unordered",
    "mean",
    "guess",
    "technically",
    "could",
    "end",
    "program",
    "going",
    "print",
    "shopping",
    "cart",
    "order",
    "think",
    "lists",
    "would",
    "probably",
    "best",
    "empty",
    "list",
    "foods",
    "empty",
    "list",
    "prices",
    "use",
    "loop",
    "true",
    "condition",
    "set",
    "true",
    "need",
    "way",
    "break",
    "loop",
    "need",
    "break",
    "statement",
    "somewhere",
    "get",
    "later",
    "ask",
    "user",
    "food",
    "would",
    "like",
    "buy",
    "let",
    "declare",
    "variable",
    "food",
    "equal",
    "input",
    "enter",
    "food",
    "buy",
    "exit",
    "loop",
    "need",
    "press",
    "q",
    "q2",
    "quit",
    "let",
    "check",
    "food",
    "equal",
    "q",
    "lowercase",
    "q",
    "break",
    "done",
    "program",
    "let",
    "least",
    "test",
    "pizza",
    "hamburger",
    "hot",
    "dog",
    "q",
    "quit",
    "okay",
    "looks",
    "like",
    "works",
    "somebody",
    "types",
    "uppercase",
    "q",
    "pizza",
    "hamburger",
    "uppercase",
    "q",
    "well",
    "ca",
    "actually",
    "quit",
    "accepting",
    "user",
    "input",
    "food",
    "lower",
    "method",
    "take",
    "input",
    "make",
    "lowercase",
    "comparison",
    "let",
    "try",
    "pizza",
    "hamburger",
    "type",
    "capital",
    "q",
    "quit",
    "valid",
    "follow",
    "food",
    "lower",
    "method",
    "temporarily",
    "make",
    "user",
    "input",
    "lowercase",
    "case",
    "type",
    "capital",
    "q",
    "user",
    "want",
    "quit",
    "let",
    "add",
    "else",
    "statement",
    "else",
    "let",
    "take",
    "foods",
    "use",
    "append",
    "method",
    "add",
    "whatever",
    "food",
    "user",
    "typed",
    "also",
    "need",
    "price",
    "let",
    "ask",
    "user",
    "price",
    "price",
    "equals",
    "input",
    "enter",
    "price",
    "let",
    "use",
    "f",
    "string",
    "whatever",
    "food",
    "user",
    "types",
    "pick",
    "unit",
    "currency",
    "pick",
    "dollars",
    "working",
    "numbers",
    "typ",
    "cast",
    "input",
    "floating",
    "point",
    "number",
    "since",
    "working",
    "prices",
    "accept",
    "price",
    "add",
    "food",
    "item",
    "list",
    "foods",
    "thing",
    "prices",
    "prices",
    "append",
    "whatever",
    "price",
    "loop",
    "let",
    "test",
    "program",
    "sure",
    "everything",
    "working",
    "pizza",
    "pizza",
    "59",
    "999",
    "enter",
    "food",
    "buy",
    "hamburger",
    "hamburgers",
    "350",
    "hot",
    "dog",
    "hot",
    "dogs",
    "175",
    "would",
    "like",
    "quit",
    "type",
    "either",
    "capital",
    "q",
    "lowercase",
    "q",
    "work",
    "escaped",
    "loop",
    "loop",
    "complete",
    "outside",
    "loop",
    "let",
    "display",
    "shopping",
    "cart",
    "let",
    "print",
    "decorative",
    "text",
    "maybe",
    "five",
    "dashes",
    "cart",
    "another",
    "five",
    "dashes",
    "iterate",
    "elements",
    "found",
    "within",
    "foods",
    "list",
    "every",
    "food",
    "list",
    "foods",
    "let",
    "print",
    "food",
    "item",
    "let",
    "take",
    "look",
    "far",
    "pizza",
    "price",
    "hamburger",
    "price",
    "350",
    "hot",
    "dog",
    "175",
    "cu",
    "quit",
    "okay",
    "cart",
    "display",
    "individual",
    "list",
    "items",
    "would",
    "rather",
    "list",
    "items",
    "arranged",
    "horizontally",
    "one",
    "line",
    "add",
    "keyword",
    "end",
    "equals",
    "end",
    "keyword",
    "replace",
    "new",
    "line",
    "character",
    "end",
    "print",
    "statement",
    "character",
    "like",
    "space",
    "let",
    "try",
    "try",
    "take",
    "much",
    "time",
    "pizza",
    "hamburger",
    "350",
    "hot",
    "dog",
    "175",
    "quit",
    "yeah",
    "much",
    "better",
    "horizontally",
    "listing",
    "different",
    "items",
    "within",
    "list",
    "could",
    "revert",
    "back",
    "vertical",
    "list",
    "prefer",
    "keep",
    "output",
    "like",
    "need",
    "iterate",
    "add",
    "prices",
    "every",
    "price",
    "prices",
    "total",
    "variable",
    "declared",
    "let",
    "utilize",
    "total",
    "equals",
    "total",
    "plus",
    "price",
    "otherwise",
    "could",
    "shorten",
    "plus",
    "equals",
    "price",
    "would",
    "thing",
    "display",
    "total",
    "print",
    "use",
    "f",
    "string",
    "total",
    "add",
    "unit",
    "currency",
    "picked",
    "dollar",
    "sign",
    "whatever",
    "total",
    "okay",
    "let",
    "run",
    "program",
    "one",
    "last",
    "time",
    "enter",
    "food",
    "buy",
    "pizza",
    "hamburger",
    "350",
    "hot",
    "dogs",
    "175",
    "cu",
    "quit",
    "shopping",
    "cart",
    "going",
    "add",
    "one",
    "new",
    "line",
    "real",
    "quick",
    "right",
    "display",
    "total",
    "empty",
    "print",
    "statement",
    "results",
    "cart",
    "pizza",
    "hamburger",
    "hot",
    "dog",
    "total",
    "124",
    "right",
    "everybody",
    "well",
    "shopping",
    "cart",
    "program",
    "thought",
    "would",
    "fun",
    "exercise",
    "follow",
    "previous",
    "lesson",
    "lists",
    "sets",
    "topples",
    "well",
    "yeah",
    "shopping",
    "cart",
    "program",
    "python",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "explaining",
    "2d",
    "lists",
    "2d",
    "meaning",
    "also",
    "capability",
    "creating",
    "2d",
    "tuples",
    "thought",
    "today",
    "would",
    "use",
    "2d",
    "lists",
    "pretty",
    "flexible",
    "list",
    "list",
    "made",
    "lists",
    "really",
    "useful",
    "ever",
    "need",
    "grid",
    "matrix",
    "data",
    "kind",
    "like",
    "excel",
    "spreadsheet",
    "let",
    "create",
    "three",
    "lists",
    "list",
    "fruit",
    "vegetables",
    "meat",
    "going",
    "speed",
    "video",
    "feel",
    "free",
    "pause",
    "need",
    "catch",
    "three",
    "lists",
    "list",
    "fruit",
    "vegetables",
    "meat",
    "lists",
    "list",
    "create",
    "list",
    "well",
    "would",
    "begin",
    "creating",
    "list",
    "let",
    "create",
    "list",
    "groceries",
    "would",
    "need",
    "add",
    "individual",
    "lists",
    "elements",
    "outer",
    "list",
    "2d",
    "list",
    "fruits",
    "vegetables",
    "meats",
    "normally",
    "print",
    "list",
    "collections",
    "would",
    "print",
    "name",
    "list",
    "list",
    "fruits",
    "apple",
    "orange",
    "banana",
    "coconut",
    "access",
    "change",
    "one",
    "elements",
    "would",
    "type",
    "name",
    "list",
    "use",
    "index",
    "operator",
    "fruits",
    "index",
    "zero",
    "pineapple",
    "2d",
    "list",
    "little",
    "different",
    "print",
    "2d",
    "list",
    "groceries",
    "would",
    "lay",
    "entire",
    "2d",
    "list",
    "flat",
    "individual",
    "lists",
    "separated",
    "comma",
    "enclosed",
    "within",
    "set",
    "square",
    "brackets",
    "taking",
    "elements",
    "found",
    "within",
    "2d",
    "list",
    "going",
    "line",
    "kind",
    "like",
    "kind",
    "represents",
    "gitter",
    "matrix",
    "rows",
    "columns",
    "individual",
    "list",
    "resembles",
    "row",
    "element",
    "resembles",
    "column",
    "print",
    "groceries",
    "index",
    "zero",
    "place",
    "returning",
    "one",
    "element",
    "found",
    "within",
    "one",
    "lists",
    "would",
    "return",
    "entire",
    "row",
    "groceries",
    "index",
    "zero",
    "fruits",
    "list",
    "groceries",
    "index",
    "one",
    "vegetables",
    "list",
    "groceries",
    "index",
    "2",
    "meats",
    "list",
    "one",
    "elements",
    "found",
    "within",
    "one",
    "rows",
    "would",
    "need",
    "two",
    "indices",
    "need",
    "apple",
    "first",
    "row",
    "within",
    "2d",
    "list",
    "groceries",
    "would",
    "row0",
    "column",
    "z",
    "kind",
    "like",
    "coordinates",
    "row",
    "0",
    "column",
    "0",
    "would",
    "apple",
    "01",
    "orange",
    "0",
    "02",
    "banana",
    "03",
    "coconut",
    "next",
    "row",
    "would",
    "set",
    "first",
    "index",
    "one",
    "row",
    "one",
    "column",
    "zero",
    "would",
    "celery",
    "going",
    "speedrun",
    "real",
    "quick",
    "show",
    "different",
    "elements",
    "one",
    "one",
    "carrots",
    "one",
    "two",
    "potatoes",
    "try",
    "access",
    "1",
    "three",
    "index",
    "range",
    "three",
    "elements",
    "within",
    "row",
    "next",
    "row",
    "would",
    "index",
    "two",
    "column",
    "zero",
    "would",
    "chicken",
    "21",
    "fish",
    "22",
    "turkey",
    "23",
    "bounds",
    "access",
    "element",
    "2d",
    "list",
    "would",
    "need",
    "two",
    "indices",
    "place",
    "one",
    "using",
    "one",
    "would",
    "return",
    "entire",
    "row",
    "like",
    "declare",
    "2d",
    "list",
    "need",
    "necessarily",
    "give",
    "inner",
    "list",
    "name",
    "could",
    "something",
    "like",
    "going",
    "replace",
    "names",
    "rows",
    "going",
    "put",
    "new",
    "line",
    "make",
    "readable",
    "would",
    "work",
    "separate",
    "inner",
    "list",
    "comma",
    "enclose",
    "everything",
    "set",
    "square",
    "brackets",
    "ever",
    "need",
    "iterate",
    "elements",
    "2d",
    "list",
    "use",
    "ne",
    "loops",
    "use",
    "single",
    "loop",
    "let",
    "say",
    "every",
    "uh",
    "maybe",
    "collection",
    "every",
    "collection",
    "groceries",
    "let",
    "print",
    "collection",
    "using",
    "single",
    "four",
    "loop",
    "would",
    "iterate",
    "rows",
    "also",
    "iterate",
    "elements",
    "found",
    "within",
    "row",
    "would",
    "use",
    "nested",
    "loop",
    "every",
    "food",
    "collection",
    "let",
    "print",
    "food",
    "using",
    "nested",
    "loops",
    "iterate",
    "elements",
    "found",
    "within",
    "2d",
    "list",
    "going",
    "make",
    "organized",
    "like",
    "grid",
    "structure",
    "going",
    "replace",
    "new",
    "line",
    "character",
    "end",
    "print",
    "statement",
    "space",
    "exit",
    "nested",
    "loop",
    "print",
    "new",
    "line",
    "using",
    "empty",
    "print",
    "statement",
    "kind",
    "resembles",
    "grid",
    "structure",
    "rows",
    "columns",
    "collections",
    "limited",
    "lists",
    "could",
    "create",
    "list",
    "tles",
    "inner",
    "rows",
    "surrounded",
    "set",
    "parenthesis",
    "know",
    "also",
    "valid",
    "could",
    "make",
    "2d",
    "tupple",
    "tupple",
    "made",
    "tuples",
    "could",
    "make",
    "tupple",
    "made",
    "sets",
    "sets",
    "enclosed",
    "set",
    "curly",
    "braces",
    "tuple",
    "made",
    "sets",
    "use",
    "whatever",
    "best",
    "programs",
    "let",
    "go",
    "exercise",
    "let",
    "create",
    "keypad",
    "would",
    "normally",
    "find",
    "phone",
    "three",
    "data",
    "types",
    "list",
    "set",
    "tupple",
    "elements",
    "set",
    "unordered",
    "ca",
    "use",
    "numbers",
    "need",
    "order",
    "option",
    "tupple",
    "faster",
    "list",
    "tupple",
    "ordered",
    "unchangeable",
    "use",
    "perfectly",
    "fine",
    "let",
    "create",
    "2d",
    "tupple",
    "time",
    "name",
    "2d",
    "tupple",
    "numpad",
    "outer",
    "set",
    "parenthesis",
    "inner",
    "set",
    "parentheses",
    "row",
    "four",
    "rows",
    "first",
    "row",
    "1",
    "2",
    "3",
    "second",
    "row",
    "going",
    "put",
    "put",
    "new",
    "line",
    "4",
    "5",
    "6",
    "next",
    "row",
    "7",
    "89",
    "last",
    "row",
    "asteris",
    "character",
    "zero",
    "pound",
    "sign",
    "numpad",
    "case",
    "2d",
    "tupple",
    "let",
    "use",
    "loop",
    "iterate",
    "every",
    "row",
    "outer",
    "loop",
    "every",
    "maybe",
    "row",
    "every",
    "row",
    "numpad",
    "let",
    "begin",
    "printing",
    "row",
    "printing",
    "every",
    "row",
    "numpad",
    "like",
    "remove",
    "parentheses",
    "let",
    "create",
    "nested",
    "loop",
    "every",
    "maybe",
    "num",
    "num",
    "row",
    "print",
    "whatever",
    "num",
    "one",
    "long",
    "vertical",
    "line",
    "let",
    "replace",
    "new",
    "line",
    "character",
    "end",
    "print",
    "statement",
    "space",
    "escape",
    "nested",
    "loop",
    "let",
    "print",
    "new",
    "line",
    "telephone",
    "number",
    "pad",
    "see",
    "grid",
    "made",
    "rows",
    "columns",
    "yeah",
    "2d",
    "list",
    "well",
    "2d",
    "collection",
    "collection",
    "made",
    "collections",
    "numpad",
    "made",
    "2d",
    "tupple",
    "ever",
    "need",
    "grid",
    "matrix",
    "data",
    "2d",
    "collection",
    "would",
    "work",
    "perfect",
    "everybody",
    "2d",
    "collections",
    "python",
    "hello",
    "everybody",
    "today",
    "going",
    "create",
    "quiz",
    "game",
    "python",
    "let",
    "declare",
    "different",
    "collections",
    "variables",
    "need",
    "first",
    "need",
    "tuple",
    "questions",
    "2d",
    "tle",
    "options",
    "quiz",
    "five",
    "questions",
    "add",
    "less",
    "questions",
    "tuple",
    "answers",
    "list",
    "guesses",
    "appending",
    "guesses",
    "list",
    "using",
    "list",
    "rather",
    "tupple",
    "score",
    "variable",
    "set",
    "zero",
    "question",
    "number",
    "variable",
    "keep",
    "track",
    "number",
    "question",
    "right",
    "let",
    "begin",
    "questions",
    "five",
    "questions",
    "science",
    "related",
    "feel",
    "fre",
    "free",
    "choose",
    "many",
    "elements",
    "periodic",
    "table",
    "animal",
    "lays",
    "largest",
    "eggs",
    "abundant",
    "gas",
    "earth",
    "atmosphere",
    "many",
    "bones",
    "human",
    "body",
    "planet",
    "solar",
    "system",
    "hottest",
    "questions",
    "need",
    "options",
    "let",
    "add",
    "four",
    "options",
    "every",
    "question",
    "using",
    "tupple",
    "inner",
    "tupple",
    "consist",
    "four",
    "elements",
    "options",
    "b",
    "c",
    "let",
    "copy",
    "elements",
    "paste",
    "within",
    "tle",
    "first",
    "element",
    "corresponds",
    "first",
    "question",
    "many",
    "elements",
    "periodic",
    "table",
    "come",
    "answers",
    "add",
    "answers",
    "rest",
    "tuples",
    "coule",
    "correct",
    "answers",
    "orders",
    "c",
    "b",
    "come",
    "options",
    "answers",
    "may",
    "different",
    "different",
    "collections",
    "variables",
    "taken",
    "care",
    "let",
    "display",
    "question",
    "iterate",
    "tuple",
    "questions",
    "iterable",
    "every",
    "question",
    "questions",
    "going",
    "print",
    "decorative",
    "text",
    "think",
    "probably",
    "good",
    "print",
    "question",
    "iterating",
    "let",
    "see",
    "far",
    "five",
    "questions",
    "display",
    "every",
    "question",
    "need",
    "display",
    "every",
    "option",
    "every",
    "op",
    "option",
    "options",
    "options",
    "options",
    "2d",
    "tupple",
    "let",
    "add",
    "index",
    "operator",
    "index",
    "going",
    "question",
    "number",
    "variable",
    "number",
    "first",
    "accessing",
    "options",
    "index",
    "zero",
    "1",
    "2",
    "3",
    "4",
    "5",
    "print",
    "every",
    "option",
    "options",
    "given",
    "row",
    "number",
    "let",
    "test",
    "okay",
    "options",
    "options",
    "first",
    "question",
    "need",
    "increment",
    "question",
    "number",
    "let",
    "maybe",
    "question",
    "number",
    "plus",
    "equals",
    "1",
    "much",
    "better",
    "iterating",
    "question",
    "number",
    "ask",
    "user",
    "guess",
    "guess",
    "equals",
    "input",
    "enter",
    "b",
    "c",
    "case",
    "user",
    "types",
    "something",
    "lowercase",
    "follow",
    "input",
    "upper",
    "method",
    "make",
    "user",
    "input",
    "uppercase",
    "take",
    "list",
    "guesses",
    "use",
    "append",
    "method",
    "add",
    "guess",
    "list",
    "guess",
    "equal",
    "answers",
    "tupple",
    "index",
    "question",
    "number",
    "means",
    "user",
    "guessed",
    "right",
    "answer",
    "let",
    "increase",
    "user",
    "score",
    "score",
    "plus",
    "equals",
    "1",
    "print",
    "word",
    "correct",
    "correct",
    "else",
    "print",
    "incorrect",
    "use",
    "f",
    "string",
    "answers",
    "index",
    "question",
    "number",
    "correct",
    "answer",
    "right",
    "let",
    "answer",
    "questions",
    "c",
    "correct",
    "animal",
    "lays",
    "largest",
    "eggs",
    "um",
    "um",
    "definitely",
    "whale",
    "whale",
    "largest",
    "creature",
    "right",
    "incorrect",
    "correct",
    "answer",
    "abundant",
    "gas",
    "earth",
    "atmosphere",
    "nitrogen",
    "correct",
    "many",
    "bones",
    "human",
    "body",
    "incorrect",
    "right",
    "answer",
    "planet",
    "solar",
    "system",
    "hottest",
    "mercury",
    "closest",
    "sun",
    "right",
    "wrong",
    "incorrect",
    "b",
    "correct",
    "answer",
    "keeping",
    "track",
    "answer",
    "successfully",
    "complete",
    "questions",
    "let",
    "print",
    "results",
    "going",
    "add",
    "decorative",
    "text",
    "necessary",
    "think",
    "would",
    "look",
    "cool",
    "display",
    "results",
    "iterate",
    "answers",
    "guesses",
    "print",
    "answers",
    "going",
    "set",
    "ending",
    "character",
    "empty",
    "string",
    "every",
    "answer",
    "answers",
    "print",
    "answer",
    "set",
    "ending",
    "character",
    "space",
    "separate",
    "answer",
    "add",
    "new",
    "print",
    "line",
    "let",
    "guesses",
    "change",
    "answers",
    "guesses",
    "every",
    "guess",
    "guesses",
    "print",
    "guess",
    "okay",
    "going",
    "run",
    "going",
    "make",
    "answers",
    "b",
    "c",
    "correct",
    "answers",
    "guesses",
    "guess",
    "none",
    "right",
    "print",
    "score",
    "score",
    "equals",
    "take",
    "score",
    "divided",
    "going",
    "use",
    "length",
    "function",
    "pass",
    "questions",
    "many",
    "elements",
    "within",
    "questions",
    "tble",
    "multiply",
    "100",
    "give",
    "us",
    "percentage",
    "typ",
    "cast",
    "whole",
    "formula",
    "integer",
    "basically",
    "reassigning",
    "score",
    "variable",
    "let",
    "print",
    "using",
    "f",
    "string",
    "score",
    "score",
    "variable",
    "add",
    "percent",
    "going",
    "intentionally",
    "get",
    "answers",
    "right",
    "c",
    "b",
    "answers",
    "guesses",
    "score",
    "100",
    "time",
    "try",
    "get",
    "incorrect",
    "intentionally",
    "c",
    "c",
    "c",
    "c",
    "c",
    "score",
    "20",
    "right",
    "everybody",
    "well",
    "quiz",
    "game",
    "feel",
    "free",
    "add",
    "less",
    "questions",
    "come",
    "questions",
    "quiz",
    "game",
    "written",
    "python",
    "hey",
    "everybody",
    "today",
    "video",
    "going",
    "explain",
    "dictionaries",
    "dictionary",
    "one",
    "four",
    "basic",
    "collection",
    "types",
    "beginners",
    "dictionary",
    "consists",
    "key",
    "value",
    "pairs",
    "ordered",
    "changeable",
    "duplicates",
    "allowed",
    "examples",
    "key",
    "value",
    "pairs",
    "could",
    "id",
    "name",
    "item",
    "price",
    "today",
    "example",
    "create",
    "dictionary",
    "countries",
    "capitals",
    "let",
    "name",
    "dictionary",
    "capitals",
    "capitals",
    "equals",
    "enclose",
    "dictionary",
    "set",
    "curly",
    "braces",
    "much",
    "like",
    "sets",
    "first",
    "country",
    "usa",
    "add",
    "value",
    "key",
    "type",
    "colon",
    "value",
    "capital",
    "usa",
    "washington",
    "dc",
    "separate",
    "key",
    "value",
    "pair",
    "comma",
    "add",
    "another",
    "key",
    "value",
    "pair",
    "capital",
    "india",
    "new",
    "delhi",
    "add",
    "two",
    "china",
    "capital",
    "beijing",
    "russia",
    "capital",
    "moscow",
    "think",
    "good",
    "enough",
    "reminder",
    "would",
    "like",
    "see",
    "different",
    "attributes",
    "methods",
    "dictionary",
    "use",
    "dur",
    "function",
    "pass",
    "dictionary",
    "capitals",
    "need",
    "print",
    "different",
    "attributes",
    "methods",
    "dictionary",
    "would",
    "like",
    "description",
    "attributes",
    "methods",
    "use",
    "help",
    "function",
    "uh",
    "herp",
    "help",
    "go",
    "yeah",
    "reminder",
    "right",
    "let",
    "cover",
    "methods",
    "get",
    "one",
    "values",
    "dictionary",
    "would",
    "get",
    "key",
    "type",
    "name",
    "dictionary",
    "capitals",
    "doget",
    "let",
    "get",
    "capital",
    "usa",
    "print",
    "value",
    "associated",
    "key",
    "usa",
    "washington",
    "dc",
    "picked",
    "different",
    "country",
    "like",
    "like",
    "india",
    "well",
    "would",
    "get",
    "associated",
    "value",
    "new",
    "delhi",
    "another",
    "thing",
    "python",
    "find",
    "key",
    "returned",
    "let",
    "get",
    "japan",
    "dictionary",
    "method",
    "would",
    "return",
    "none",
    "use",
    "within",
    "statement",
    "capitals",
    "get",
    "japan",
    "value",
    "returned",
    "print",
    "capital",
    "exists",
    "else",
    "print",
    "capital",
    "exist",
    "japan",
    "dictionary",
    "capital",
    "exist",
    "russia",
    "capital",
    "exist",
    "check",
    "see",
    "key",
    "within",
    "dictionary",
    "use",
    "get",
    "method",
    "right",
    "moving",
    "let",
    "update",
    "dictionary",
    "capitals",
    "update",
    "within",
    "set",
    "curly",
    "braces",
    "add",
    "key",
    "value",
    "germany",
    "followed",
    "berlin",
    "let",
    "print",
    "dictionary",
    "use",
    "print",
    "statement",
    "print",
    "capitals",
    "yeah",
    "germany",
    "right",
    "use",
    "using",
    "update",
    "method",
    "insert",
    "new",
    "key",
    "value",
    "pair",
    "update",
    "existing",
    "key",
    "value",
    "pair",
    "let",
    "also",
    "change",
    "one",
    "existing",
    "values",
    "key",
    "usa",
    "let",
    "update",
    "capital",
    "detroit",
    "yeah",
    "see",
    "value",
    "updated",
    "capital",
    "usa",
    "detroit",
    "michigan",
    "remove",
    "key",
    "value",
    "pair",
    "use",
    "pop",
    "method",
    "passing",
    "key",
    "let",
    "remove",
    "china",
    "china",
    "longer",
    "exists",
    "within",
    "dictionary",
    "gone",
    "remove",
    "latest",
    "key",
    "value",
    "pair",
    "within",
    "dictionary",
    "using",
    "pop",
    "item",
    "method",
    "capitals",
    "pop",
    "item",
    "pop",
    "item",
    "need",
    "pass",
    "key",
    "pop",
    "item",
    "remove",
    "latest",
    "key",
    "value",
    "pair",
    "inserted",
    "clear",
    "capitals",
    "clear",
    "clear",
    "dictionary",
    "pretty",
    "next",
    "methods",
    "little",
    "tricky",
    "explain",
    "get",
    "keys",
    "within",
    "dictionary",
    "values",
    "keys",
    "method",
    "capitals",
    "dokeys",
    "think",
    "going",
    "insert",
    "within",
    "variable",
    "keys",
    "equals",
    "capitals",
    "keys",
    "let",
    "see",
    "happens",
    "print",
    "keys",
    "method",
    "return",
    "keys",
    "within",
    "dictionary",
    "technically",
    "keys",
    "object",
    "resembles",
    "list",
    "discussed",
    "programming",
    "yet",
    "little",
    "bit",
    "level",
    "ever",
    "need",
    "keys",
    "dictionary",
    "use",
    "keys",
    "method",
    "one",
    "use",
    "use",
    "within",
    "loop",
    "iterable",
    "every",
    "key",
    "capitals",
    "dokeys",
    "method",
    "let",
    "print",
    "every",
    "key",
    "time",
    "need",
    "iterate",
    "keys",
    "use",
    "loop",
    "iterate",
    "every",
    "key",
    "returned",
    "keys",
    "method",
    "dictionary",
    "also",
    "values",
    "method",
    "get",
    "values",
    "within",
    "dictionary",
    "values",
    "method",
    "values",
    "equals",
    "capitals",
    "dov",
    "values",
    "method",
    "let",
    "print",
    "values",
    "like",
    "keys",
    "method",
    "values",
    "method",
    "return",
    "object",
    "resembles",
    "list",
    "let",
    "iterate",
    "print",
    "every",
    "value",
    "within",
    "dictionary",
    "every",
    "value",
    "capitals",
    "dov",
    "values",
    "print",
    "every",
    "value",
    "values",
    "within",
    "dictionary",
    "next",
    "one",
    "probably",
    "tricky",
    "items",
    "method",
    "capitals",
    "items",
    "assign",
    "returned",
    "variable",
    "named",
    "items",
    "print",
    "items",
    "items",
    "returns",
    "dictionary",
    "object",
    "resembles",
    "2d",
    "list",
    "tes",
    "really",
    "complicated",
    "might",
    "useful",
    "time",
    "going",
    "use",
    "loop",
    "print",
    "every",
    "key",
    "comma",
    "value",
    "capitals",
    "items",
    "method",
    "essence",
    "two",
    "counters",
    "time",
    "print",
    "using",
    "f",
    "string",
    "f",
    "every",
    "key",
    "value",
    "pair",
    "print",
    "every",
    "key",
    "well",
    "every",
    "value",
    "print",
    "statement",
    "dictionary",
    "laid",
    "iterated",
    "every",
    "key",
    "value",
    "pair",
    "kind",
    "advanced",
    "topic",
    "thought",
    "would",
    "least",
    "bring",
    "yeah",
    "dictionary",
    "everybody",
    "collection",
    "key",
    "value",
    "pairs",
    "ordered",
    "changeable",
    "duplicates",
    "allowed",
    "bunch",
    "different",
    "methods",
    "get",
    "dat",
    "pop",
    "pop",
    "item",
    "clear",
    "get",
    "keys",
    "values",
    "items",
    "method",
    "using",
    "dictionaries",
    "game",
    "programs",
    "making",
    "future",
    "well",
    "yeah",
    "dictionaries",
    "python",
    "hey",
    "everybody",
    "today",
    "creating",
    "program",
    "mimic",
    "concession",
    "stand",
    "much",
    "like",
    "would",
    "see",
    "movie",
    "theater",
    "utilizing",
    "dictionary",
    "keep",
    "track",
    "menu",
    "item",
    "associated",
    "price",
    "less",
    "program",
    "help",
    "us",
    "get",
    "used",
    "working",
    "dictionaries",
    "let",
    "begin",
    "create",
    "dictionary",
    "named",
    "menu",
    "items",
    "menu",
    "need",
    "item",
    "price",
    "think",
    "going",
    "speed",
    "video",
    "feel",
    "free",
    "pause",
    "need",
    "time",
    "menu",
    "everybody",
    "thought",
    "food",
    "items",
    "might",
    "find",
    "movie",
    "theater",
    "concession",
    "stand",
    "pizza",
    "nachos",
    "popcorn",
    "fries",
    "chips",
    "soft",
    "pretzels",
    "soda",
    "lemonade",
    "movie",
    "theater",
    "popcorn",
    "really",
    "expensive",
    "reason",
    "okay",
    "menu",
    "user",
    "going",
    "select",
    "specific",
    "keys",
    "menu",
    "depending",
    "key",
    "get",
    "associated",
    "value",
    "calculate",
    "total",
    "keep",
    "track",
    "user",
    "selected",
    "items",
    "create",
    "empty",
    "list",
    "named",
    "cart",
    "also",
    "declare",
    "variable",
    "named",
    "total",
    "keep",
    "track",
    "total",
    "need",
    "lay",
    "dictionary",
    "flat",
    "display",
    "user",
    "well",
    "items",
    "method",
    "dictionary",
    "covered",
    "last",
    "video",
    "every",
    "key",
    "value",
    "dictionary",
    "menu",
    "items",
    "method",
    "items",
    "method",
    "dictionary",
    "return",
    "key",
    "value",
    "iteration",
    "simply",
    "going",
    "print",
    "every",
    "key",
    "value",
    "use",
    "fst",
    "string",
    "print",
    "every",
    "key",
    "colon",
    "space",
    "value",
    "let",
    "take",
    "look",
    "far",
    "menu",
    "make",
    "changes",
    "price",
    "dollar",
    "cents",
    "feel",
    "free",
    "pick",
    "unit",
    "currency",
    "precede",
    "value",
    "dollar",
    "sign",
    "using",
    "format",
    "specifier",
    "display",
    "two",
    "decimal",
    "places",
    "2f",
    "better",
    "line",
    "keys",
    "key",
    "add",
    "format",
    "specifier",
    "allocate",
    "10",
    "spaces",
    "yeah",
    "look",
    "lined",
    "displaying",
    "menu",
    "loop",
    "add",
    "decorative",
    "text",
    "let",
    "say",
    "menu",
    "outside",
    "loop",
    "display",
    "bunch",
    "dashes",
    "yeah",
    "look",
    "let",
    "move",
    "next",
    "step",
    "ask",
    "user",
    "input",
    "item",
    "would",
    "like",
    "buy",
    "menu",
    "condition",
    "true",
    "condition",
    "set",
    "true",
    "need",
    "break",
    "loop",
    "one",
    "way",
    "another",
    "ask",
    "user",
    "input",
    "food",
    "equals",
    "input",
    "select",
    "item",
    "q2",
    "quit",
    "food",
    "equal",
    "lowercase",
    "q",
    "break",
    "let",
    "test",
    "select",
    "item",
    "pizza",
    "nachos",
    "soda",
    "q",
    "quit",
    "yeah",
    "works",
    "okay",
    "user",
    "types",
    "capital",
    "q",
    "well",
    "ca",
    "escape",
    "loop",
    "user",
    "types",
    "capital",
    "q",
    "assuming",
    "would",
    "like",
    "quit",
    "accept",
    "user",
    "input",
    "going",
    "add",
    "lower",
    "method",
    "take",
    "user",
    "input",
    "make",
    "lowercase",
    "able",
    "acknowledge",
    "uppercase",
    "letters",
    "yeah",
    "works",
    "cool",
    "let",
    "add",
    "lsi",
    "statement",
    "user",
    "types",
    "item",
    "menu",
    "well",
    "get",
    "method",
    "dictionaries",
    "menu",
    "getet",
    "pass",
    "food",
    "user",
    "input",
    "user",
    "selection",
    "within",
    "menu",
    "key",
    "return",
    "none",
    "use",
    "else",
    "menu",
    "get",
    "food",
    "none",
    "would",
    "like",
    "append",
    "food",
    "item",
    "cart",
    "cart",
    "append",
    "food",
    "item",
    "outside",
    "loop",
    "going",
    "print",
    "cart",
    "temporarily",
    "test",
    "okay",
    "select",
    "item",
    "pizza",
    "soda",
    "pretzel",
    "potato",
    "q",
    "quit",
    "pizza",
    "soda",
    "pretzel",
    "potato",
    "want",
    "cart",
    "menu",
    "yeah",
    "add",
    "line",
    "else",
    "menu",
    "item",
    "get",
    "food",
    "none",
    "complete",
    "wild",
    "loop",
    "let",
    "calculate",
    "total",
    "every",
    "food",
    "cart",
    "let",
    "take",
    "total",
    "variable",
    "set",
    "equal",
    "total",
    "plus",
    "need",
    "value",
    "associated",
    "key",
    "plus",
    "menu",
    "getet",
    "method",
    "get",
    "food",
    "item",
    "found",
    "within",
    "cart",
    "going",
    "shorten",
    "total",
    "plus",
    "equals",
    "menu",
    "getet",
    "value",
    "associated",
    "food",
    "cart",
    "also",
    "display",
    "food",
    "item",
    "print",
    "print",
    "food",
    "going",
    "avoid",
    "printing",
    "food",
    "item",
    "every",
    "line",
    "set",
    "ending",
    "character",
    "print",
    "statement",
    "space",
    "okay",
    "let",
    "see",
    "far",
    "would",
    "like",
    "popcorn",
    "soda",
    "pretzel",
    "c",
    "quit",
    "popcorn",
    "soda",
    "pretzel",
    "display",
    "total",
    "print",
    "new",
    "line",
    "print",
    "use",
    "upst",
    "string",
    "total",
    "add",
    "unit",
    "currency",
    "total",
    "add",
    "format",
    "specifier",
    "2f",
    "display",
    "two",
    "decimal",
    "places",
    "going",
    "add",
    "one",
    "line",
    "decorative",
    "text",
    "let",
    "copy",
    "maybe",
    "right",
    "let",
    "test",
    "select",
    "item",
    "popcorn",
    "pretzel",
    "soda",
    "potato",
    "cu",
    "quit",
    "right",
    "cart",
    "popcorn",
    "pretzel",
    "soda",
    "include",
    "potato",
    "found",
    "within",
    "dictionary",
    "total",
    "1250",
    "well",
    "everybody",
    "concession",
    "stand",
    "program",
    "point",
    "program",
    "help",
    "us",
    "get",
    "used",
    "working",
    "dictionaries",
    "dictionary",
    "collection",
    "key",
    "value",
    "pairs",
    "item",
    "price",
    "yeah",
    "concession",
    "stand",
    "program",
    "python",
    "well",
    "hello",
    "everybody",
    "today",
    "topic",
    "going",
    "show",
    "generate",
    "random",
    "numbers",
    "python",
    "end",
    "video",
    "exercise",
    "going",
    "create",
    "number",
    "guessing",
    "program",
    "let",
    "begin",
    "importing",
    "random",
    "module",
    "type",
    "import",
    "random",
    "random",
    "module",
    "gives",
    "us",
    "access",
    "lot",
    "useful",
    "methods",
    "involving",
    "random",
    "numbers",
    "comprehensive",
    "list",
    "use",
    "help",
    "function",
    "pass",
    "random",
    "module",
    "would",
    "want",
    "print",
    "access",
    "shuffle",
    "method",
    "set",
    "state",
    "seed",
    "sample",
    "random",
    "range",
    "random",
    "random",
    "int",
    "random",
    "bytes",
    "ton",
    "others",
    "discuss",
    "useful",
    "methods",
    "beginners",
    "random",
    "whole",
    "integer",
    "maybe",
    "rolling",
    "dice",
    "would",
    "type",
    "name",
    "random",
    "module",
    "dot",
    "method",
    "random",
    "whole",
    "integer",
    "type",
    "rand",
    "int",
    "add",
    "set",
    "parentheses",
    "within",
    "set",
    "parentheses",
    "list",
    "range",
    "rolling",
    "dice",
    "would",
    "like",
    "numbers",
    "1",
    "six",
    "1",
    "comma",
    "6",
    "assign",
    "returned",
    "maybe",
    "variable",
    "print",
    "whatever",
    "number",
    "random",
    "number",
    "four",
    "3",
    "1",
    "4",
    "right",
    "tend",
    "play",
    "lot",
    "dungeons",
    "dragons",
    "use",
    "polyhedral",
    "dice",
    "less",
    "six",
    "sides",
    "dice",
    "random",
    "number",
    "1",
    "20",
    "would",
    "set",
    "range",
    "1",
    "comma",
    "20",
    "rolled",
    "16",
    "8",
    "within",
    "rand",
    "int",
    "method",
    "place",
    "variables",
    "well",
    "long",
    "contain",
    "numbers",
    "create",
    "variable",
    "named",
    "low",
    "set",
    "equal",
    "one",
    "variable",
    "named",
    "high",
    "set",
    "100",
    "replace",
    "numbers",
    "variables",
    "behave",
    "numbers",
    "give",
    "random",
    "integer",
    "low",
    "variable",
    "high",
    "variable",
    "1",
    "100",
    "example",
    "rolled",
    "a75",
    "88",
    "need",
    "random",
    "floating",
    "point",
    "number",
    "use",
    "random",
    "method",
    "random",
    "random",
    "let",
    "assign",
    "variable",
    "number",
    "equals",
    "random",
    "method",
    "random",
    "module",
    "would",
    "return",
    "random",
    "floating",
    "point",
    "number",
    "0",
    "1",
    "pick",
    "random",
    "choice",
    "sequence",
    "future",
    "going",
    "create",
    "game",
    "rock",
    "paper",
    "scissors",
    "let",
    "say",
    "tuple",
    "options",
    "options",
    "equals",
    "rock",
    "paper",
    "scissors",
    "accessing",
    "random",
    "module",
    "dot",
    "use",
    "choice",
    "method",
    "place",
    "sequence",
    "within",
    "choice",
    "method",
    "give",
    "random",
    "choice",
    "options",
    "store",
    "within",
    "variable",
    "let",
    "say",
    "option",
    "equals",
    "random",
    "choice",
    "options",
    "print",
    "option",
    "computer",
    "generated",
    "scissors",
    "paper",
    "rock",
    "choice",
    "method",
    "great",
    "use",
    "games",
    "ever",
    "need",
    "random",
    "element",
    "also",
    "shuffle",
    "time",
    "maybe",
    "deck",
    "cards",
    "cards",
    "equals",
    "guess",
    "use",
    "list",
    "time",
    "list",
    "cards",
    "would",
    "normally",
    "find",
    "within",
    "deck",
    "playing",
    "cards",
    "well",
    "besides",
    "suit",
    "2",
    "10",
    "jack",
    "queen",
    "king",
    "ace",
    "using",
    "shuffle",
    "method",
    "shuffle",
    "sequence",
    "access",
    "random",
    "module",
    "shuffle",
    "pass",
    "sequence",
    "case",
    "cards",
    "print",
    "cards",
    "yeah",
    "look",
    "cards",
    "shuffled",
    "future",
    "creating",
    "game",
    "black",
    "jack",
    "shuffle",
    "method",
    "used",
    "shuffle",
    "deck",
    "cards",
    "methods",
    "found",
    "within",
    "random",
    "module",
    "practice",
    "let",
    "create",
    "number",
    "guessing",
    "game",
    "exercise",
    "hey",
    "everybody",
    "today",
    "going",
    "create",
    "number",
    "guessing",
    "game",
    "using",
    "python",
    "project",
    "meant",
    "beginners",
    "completing",
    "project",
    "help",
    "us",
    "reinforce",
    "understanding",
    "previous",
    "topics",
    "let",
    "begin",
    "import",
    "random",
    "module",
    "need",
    "pick",
    "random",
    "number",
    "random",
    "module",
    "going",
    "handle",
    "us",
    "arrange",
    "random",
    "numbers",
    "number",
    "guessing",
    "game",
    "store",
    "variables",
    "one",
    "variable",
    "named",
    "lowest",
    "number",
    "set",
    "one",
    "well",
    "variable",
    "highest",
    "number",
    "set",
    "100",
    "feel",
    "free",
    "pick",
    "different",
    "range",
    "would",
    "like",
    "set",
    "range",
    "1",
    "100",
    "random",
    "number",
    "selected",
    "range",
    "stored",
    "within",
    "variable",
    "named",
    "answer",
    "correct",
    "answer",
    "choose",
    "random",
    "number",
    "two",
    "values",
    "access",
    "random",
    "module",
    "called",
    "rand",
    "int",
    "method",
    "choose",
    "random",
    "integer",
    "two",
    "values",
    "two",
    "arguments",
    "lowest",
    "num",
    "comma",
    "highest",
    "num",
    "second",
    "argument",
    "let",
    "perform",
    "test",
    "run",
    "print",
    "answer",
    "number",
    "going",
    "1",
    "100",
    "okay",
    "know",
    "works",
    "variables",
    "need",
    "keep",
    "track",
    "number",
    "wrong",
    "guesses",
    "store",
    "variable",
    "named",
    "guesses",
    "want",
    "user",
    "keep",
    "guessing",
    "long",
    "application",
    "running",
    "create",
    "boolean",
    "variable",
    "running",
    "set",
    "true",
    "user",
    "wins",
    "game",
    "set",
    "running",
    "false",
    "print",
    "welcome",
    "message",
    "let",
    "say",
    "python",
    "number",
    "guessing",
    "game",
    "prompt",
    "user",
    "use",
    "f",
    "string",
    "select",
    "number",
    "add",
    "two",
    "placeholders",
    "select",
    "number",
    "lowest",
    "number",
    "highest",
    "number",
    "python",
    "number",
    "guessing",
    "game",
    "select",
    "number",
    "1",
    "100",
    "change",
    "range",
    "variables",
    "reflected",
    "temporarily",
    "changed",
    "lowest",
    "number",
    "10",
    "highest",
    "number",
    "let",
    "set",
    "back",
    "1",
    "100",
    "good",
    "need",
    "loop",
    "continue",
    "game",
    "round",
    "say",
    "running",
    "since",
    "running",
    "boolean",
    "need",
    "say",
    "running",
    "equals",
    "true",
    "say",
    "running",
    "value",
    "remains",
    "true",
    "continue",
    "playing",
    "game",
    "ask",
    "user",
    "input",
    "create",
    "local",
    "variable",
    "guess",
    "guess",
    "equals",
    "use",
    "input",
    "function",
    "enter",
    "prompt",
    "enter",
    "guess",
    "one",
    "thing",
    "want",
    "check",
    "python",
    "number",
    "guessing",
    "game",
    "select",
    "number",
    "1",
    "100",
    "guess",
    "somebody",
    "type",
    "number",
    "like",
    "type",
    "word",
    "pizza",
    "let",
    "user",
    "know",
    "invalid",
    "guess",
    "write",
    "following",
    "statement",
    "guess",
    "use",
    "digit",
    "method",
    "guess",
    "digit",
    "number",
    "execute",
    "code",
    "underneath",
    "statement",
    "time",
    "wr",
    "pass",
    "get",
    "back",
    "later",
    "else",
    "something",
    "else",
    "let",
    "print",
    "following",
    "print",
    "invalid",
    "guess",
    "let",
    "copy",
    "print",
    "statement",
    "lazy",
    "feel",
    "like",
    "typing",
    "please",
    "select",
    "number",
    "lowest",
    "number",
    "highest",
    "number",
    "let",
    "try",
    "guess",
    "pizza",
    "number",
    "get",
    "message",
    "invalid",
    "guess",
    "please",
    "select",
    "number",
    "1",
    "100",
    "right",
    "works",
    "underneath",
    "statement",
    "write",
    "following",
    "get",
    "guess",
    "digit",
    "need",
    "convert",
    "number",
    "accept",
    "user",
    "input",
    "string",
    "reassign",
    "guess",
    "equal",
    "typ",
    "cast",
    "guess",
    "integer",
    "increase",
    "number",
    "guesses",
    "one",
    "guesses",
    "plus",
    "equals",
    "1",
    "already",
    "made",
    "one",
    "guess",
    "another",
    "scenario",
    "somebody",
    "guesses",
    "number",
    "outside",
    "range",
    "like",
    "one",
    "kajillion",
    "well",
    "give",
    "warning",
    "guess",
    "valid",
    "guess",
    "lower",
    "lowest",
    "number",
    "guess",
    "greater",
    "highest",
    "number",
    "print",
    "following",
    "number",
    "range",
    "reprompt",
    "user",
    "please",
    "select",
    "number",
    "lowest",
    "number",
    "highest",
    "number",
    "let",
    "perform",
    "test",
    "run",
    "guess",
    "one",
    "kajillion",
    "number",
    "range",
    "please",
    "select",
    "number",
    "1",
    "100",
    "add",
    "lse",
    "statement",
    "else",
    "guess",
    "less",
    "answer",
    "print",
    "following",
    "low",
    "try",
    "else",
    "guess",
    "greater",
    "answer",
    "print",
    "high",
    "try",
    "guess",
    "less",
    "answer",
    "guess",
    "greater",
    "answer",
    "means",
    "must",
    "correct",
    "answer",
    "within",
    "l",
    "statement",
    "print",
    "use",
    "f",
    "string",
    "string",
    "correct",
    "answer",
    "insert",
    "answer",
    "answer",
    "variable",
    "print",
    "number",
    "guesses",
    "took",
    "number",
    "guesses",
    "add",
    "placeholder",
    "place",
    "guesses",
    "within",
    "placeholder",
    "escape",
    "loop",
    "take",
    "boolean",
    "variable",
    "running",
    "normally",
    "true",
    "set",
    "false",
    "escape",
    "need",
    "let",
    "run",
    "one",
    "last",
    "time",
    "python",
    "number",
    "guessing",
    "game",
    "select",
    "number",
    "1",
    "100",
    "let",
    "select",
    "number",
    "right",
    "middle",
    "50",
    "low",
    "try",
    "number",
    "50",
    "100",
    "75",
    "high",
    "50",
    "75",
    "62",
    "high",
    "56",
    "53",
    "55",
    "correct",
    "answer",
    "55",
    "number",
    "guesses",
    "took",
    "six",
    "right",
    "everybody",
    "python",
    "number",
    "guessing",
    "game",
    "create",
    "mini",
    "project",
    "hey",
    "everybody",
    "today",
    "topic",
    "thought",
    "would",
    "create",
    "game",
    "rock",
    "paper",
    "scissors",
    "know",
    "random",
    "module",
    "works",
    "let",
    "begin",
    "importing",
    "random",
    "module",
    "create",
    "options",
    "use",
    "tupple",
    "going",
    "changing",
    "options",
    "tuple",
    "would",
    "better",
    "list",
    "three",
    "options",
    "rock",
    "paper",
    "scissors",
    "create",
    "variable",
    "named",
    "player",
    "store",
    "player",
    "choice",
    "going",
    "set",
    "none",
    "well",
    "computer",
    "computer",
    "going",
    "pick",
    "random",
    "choice",
    "options",
    "rock",
    "paper",
    "scissors",
    "order",
    "use",
    "choice",
    "method",
    "random",
    "module",
    "random",
    "choice",
    "pick",
    "random",
    "choice",
    "options",
    "let",
    "player",
    "enter",
    "input",
    "enter",
    "choice",
    "rock",
    "paper",
    "scissors",
    "display",
    "player",
    "choice",
    "computer",
    "choice",
    "use",
    "fst",
    "string",
    "player",
    "colon",
    "space",
    "variable",
    "player",
    "let",
    "copy",
    "paste",
    "change",
    "player",
    "computer",
    "let",
    "see",
    "far",
    "enter",
    "choice",
    "rock",
    "paper",
    "scissors",
    "pick",
    "rock",
    "computer",
    "picks",
    "scissors",
    "let",
    "try",
    "good",
    "measure",
    "pick",
    "paper",
    "time",
    "computer",
    "picks",
    "scissors",
    "pick",
    "scissors",
    "computer",
    "picks",
    "paper",
    "okay",
    "know",
    "computer",
    "successfully",
    "picking",
    "random",
    "choice",
    "options",
    "player",
    "picks",
    "something",
    "within",
    "tupple",
    "gun",
    "well",
    "would",
    "want",
    "stop",
    "right",
    "need",
    "user",
    "pick",
    "valid",
    "option",
    "rock",
    "paper",
    "scissors",
    "think",
    "accept",
    "user",
    "input",
    "let",
    "place",
    "within",
    "loop",
    "indent",
    "line",
    "condition",
    "going",
    "kind",
    "weird",
    "player",
    "variable",
    "tle",
    "options",
    "let",
    "try",
    "see",
    "happens",
    "pick",
    "gun",
    "enter",
    "choice",
    "right",
    "well",
    "ca",
    "pick",
    "gun",
    "sponge",
    "well",
    "ca",
    "pick",
    "either",
    "rock",
    "works",
    "condition",
    "player",
    "variable",
    "found",
    "within",
    "options",
    "player",
    "pick",
    "one",
    "options",
    "loop",
    "continue",
    "forever",
    "pick",
    "something",
    "within",
    "options",
    "escape",
    "loop",
    "let",
    "check",
    "win",
    "conditions",
    "player",
    "equal",
    "computer",
    "means",
    "tie",
    "print",
    "tie",
    "add",
    "else",
    "statements",
    "else",
    "player",
    "equal",
    "rock",
    "use",
    "logical",
    "operator",
    "computer",
    "equal",
    "scissors",
    "means",
    "win",
    "let",
    "print",
    "win",
    "let",
    "add",
    "another",
    "condition",
    "else",
    "player",
    "picks",
    "paper",
    "computer",
    "picks",
    "rock",
    "also",
    "win",
    "win",
    "else",
    "player",
    "picks",
    "scissors",
    "computer",
    "computer",
    "picks",
    "paper",
    "print",
    "win",
    "else",
    "player",
    "choice",
    "computer",
    "meet",
    "win",
    "conditions",
    "must",
    "mean",
    "lose",
    "print",
    "lose",
    "let",
    "see",
    "works",
    "enter",
    "choice",
    "rock",
    "paper",
    "scissors",
    "pick",
    "gun",
    "nope",
    "ca",
    "pick",
    "pick",
    "rock",
    "pick",
    "rock",
    "computer",
    "picks",
    "scissors",
    "win",
    "let",
    "see",
    "lose",
    "pick",
    "paper",
    "win",
    "scissors",
    "need",
    "stop",
    "winning",
    "need",
    "see",
    "lose",
    "condition",
    "works",
    "okay",
    "tie",
    "least",
    "need",
    "lose",
    "right",
    "go",
    "pick",
    "rock",
    "computer",
    "picks",
    "paper",
    "lose",
    "user",
    "would",
    "like",
    "play",
    "let",
    "place",
    "code",
    "within",
    "wild",
    "loop",
    "let",
    "right",
    "going",
    "write",
    "true",
    "like",
    "normally",
    "time",
    "going",
    "create",
    "variable",
    "let",
    "say",
    "running",
    "game",
    "running",
    "set",
    "true",
    "running",
    "equals",
    "true",
    "could",
    "shorten",
    "running",
    "simpler",
    "place",
    "code",
    "within",
    "wild",
    "loop",
    "mass",
    "indent",
    "code",
    "highlight",
    "code",
    "press",
    "tab",
    "hey",
    "everybody",
    "bro",
    "future",
    "forgot",
    "explain",
    "something",
    "reason",
    "setting",
    "condition",
    "loop",
    "true",
    "lot",
    "code",
    "within",
    "loop",
    "really",
    "difficult",
    "find",
    "break",
    "statement",
    "set",
    "condition",
    "boolean",
    "variable",
    "running",
    "lot",
    "easier",
    "find",
    "instance",
    "use",
    "variable",
    "highlight",
    "see",
    "running",
    "found",
    "need",
    "change",
    "instance",
    "variable",
    "rename",
    "something",
    "refactor",
    "let",
    "rename",
    "running",
    "maybe",
    "playing",
    "refactor",
    "variable",
    "running",
    "playing",
    "change",
    "made",
    "coding",
    "preference",
    "every",
    "time",
    "start",
    "new",
    "game",
    "reset",
    "player",
    "well",
    "computer",
    "let",
    "move",
    "two",
    "lines",
    "loop",
    "beginning",
    "start",
    "new",
    "game",
    "reset",
    "player",
    "computer",
    "pick",
    "new",
    "random",
    "choice",
    "let",
    "see",
    "far",
    "rock",
    "pick",
    "rock",
    "computer",
    "picks",
    "rock",
    "tie",
    "play",
    "paper",
    "lose",
    "scissors",
    "tie",
    "would",
    "like",
    "escape",
    "loop",
    "wi",
    "conditions",
    "going",
    "create",
    "temporary",
    "variable",
    "let",
    "name",
    "play",
    "ask",
    "user",
    "input",
    "play",
    "question",
    "mark",
    "sln",
    "meaning",
    "yes",
    "user",
    "types",
    "something",
    "capital",
    "going",
    "use",
    "lower",
    "method",
    "make",
    "lowercase",
    "play",
    "variable",
    "equal",
    "would",
    "like",
    "escape",
    "would",
    "like",
    "would",
    "like",
    "see",
    "player",
    "types",
    "something",
    "precede",
    "condition",
    "logical",
    "operator",
    "user",
    "want",
    "play",
    "let",
    "take",
    "boolean",
    "variable",
    "running",
    "normally",
    "true",
    "set",
    "false",
    "running",
    "equals",
    "false",
    "means",
    "escape",
    "wild",
    "loop",
    "escape",
    "loop",
    "print",
    "thanks",
    "playing",
    "going",
    "change",
    "momentarily",
    "want",
    "test",
    "rock",
    "play",
    "yes",
    "paper",
    "play",
    "yes",
    "scissors",
    "lose",
    "play",
    "nope",
    "thanks",
    "playing",
    "entirely",
    "optional",
    "try",
    "create",
    "variables",
    "possible",
    "would",
    "personally",
    "rather",
    "avoid",
    "creating",
    "variable",
    "another",
    "way",
    "could",
    "write",
    "get",
    "rid",
    "variable",
    "let",
    "move",
    "notot",
    "front",
    "input",
    "follow",
    "input",
    "use",
    "comparison",
    "operator",
    "add",
    "colon",
    "user",
    "input",
    "making",
    "lowercase",
    "equal",
    "yes",
    "set",
    "running",
    "false",
    "work",
    "rock",
    "play",
    "yes",
    "enter",
    "choice",
    "paper",
    "play",
    "thanks",
    "playing",
    "line",
    "would",
    "work",
    "little",
    "complex",
    "beginners",
    "read",
    "use",
    "method",
    "showed",
    "right",
    "everybody",
    "well",
    "game",
    "rock",
    "paper",
    "scissors",
    "hello",
    "everybody",
    "today",
    "creating",
    "dice",
    "roller",
    "program",
    "python",
    "utilizing",
    "aski",
    "art",
    "post",
    "ask",
    "ke",
    "art",
    "need",
    "description",
    "video",
    "copy",
    "paste",
    "save",
    "time",
    "like",
    "right",
    "let",
    "get",
    "started",
    "everybody",
    "begin",
    "importing",
    "random",
    "module",
    "rolling",
    "random",
    "numbers",
    "1",
    "six",
    "going",
    "create",
    "esy",
    "art",
    "utilizing",
    "unicode",
    "characters",
    "enter",
    "unicode",
    "character",
    "really",
    "varies",
    "depending",
    "operating",
    "system",
    "think",
    "easiest",
    "way",
    "would",
    "use",
    "python",
    "enter",
    "unicode",
    "character",
    "type",
    "award",
    "slash",
    "given",
    "code",
    "character",
    "codes",
    "need",
    "writing",
    "seven",
    "unicode",
    "characters",
    "let",
    "run",
    "program",
    "symbols",
    "output",
    "let",
    "copy",
    "add",
    "comment",
    "delete",
    "line",
    "unicode",
    "characters",
    "need",
    "build",
    "asy",
    "art",
    "dice",
    "die",
    "made",
    "five",
    "lines",
    "let",
    "begin",
    "first",
    "need",
    "left",
    "corner",
    "nine",
    "dashes",
    "right",
    "corner",
    "second",
    "line",
    "copy",
    "vertical",
    "bar",
    "add",
    "nine",
    "spaces",
    "vertical",
    "bar",
    "copy",
    "whole",
    "line",
    "paste",
    "two",
    "times",
    "let",
    "use",
    "left",
    "bottom",
    "corner",
    "add",
    "nine",
    "dashes",
    "bottom",
    "right",
    "corner",
    "basic",
    "box",
    "shape",
    "depending",
    "number",
    "die",
    "add",
    "one",
    "bullet",
    "points",
    "one",
    "add",
    "right",
    "middle",
    "good",
    "delete",
    "later",
    "let",
    "create",
    "dictionary",
    "name",
    "dictionary",
    "dice",
    "art",
    "dictionary",
    "made",
    "key",
    "value",
    "pairs",
    "keys",
    "numbers",
    "1",
    "six",
    "beginning",
    "one",
    "value",
    "tupple",
    "dictionary",
    "made",
    "key",
    "value",
    "pairs",
    "value",
    "tupple",
    "within",
    "tupple",
    "let",
    "add",
    "lines",
    "separated",
    "comma",
    "going",
    "format",
    "form",
    "box",
    "shape",
    "let",
    "take",
    "bullet",
    "point",
    "place",
    "right",
    "middle",
    "add",
    "comma",
    "end",
    "key",
    "value",
    "pair",
    "first",
    "key",
    "value",
    "pair",
    "let",
    "copy",
    "paste",
    "change",
    "one",
    "two",
    "let",
    "move",
    "bullet",
    "point",
    "need",
    "two",
    "bullet",
    "points",
    "right",
    "let",
    "repeat",
    "process",
    "keys",
    "3",
    "six",
    "sure",
    "get",
    "rid",
    "comma",
    "end",
    "dictionary",
    "dice",
    "art",
    "key",
    "number",
    "value",
    "tupple",
    "made",
    "strings",
    "let",
    "create",
    "list",
    "dice",
    "dice",
    "numbers",
    "randomly",
    "generated",
    "1",
    "six",
    "total",
    "calculate",
    "total",
    "set",
    "zero",
    "ask",
    "user",
    "number",
    "dice",
    "input",
    "many",
    "dice",
    "typ",
    "cast",
    "input",
    "integer",
    "want",
    "somebody",
    "write",
    "know",
    "dice",
    "ca",
    "roll",
    "half",
    "die",
    "generate",
    "random",
    "number",
    "use",
    "rand",
    "int",
    "method",
    "random",
    "module",
    "need",
    "random",
    "number",
    "1",
    "six",
    "need",
    "append",
    "number",
    "list",
    "dice",
    "dice",
    "data",
    "pend",
    "move",
    "line",
    "within",
    "append",
    "method",
    "need",
    "number",
    "times",
    "depending",
    "many",
    "dice",
    "user",
    "enters",
    "place",
    "line",
    "within",
    "four",
    "loop",
    "every",
    "die",
    "range",
    "number",
    "dice",
    "number",
    "let",
    "print",
    "list",
    "dice",
    "see",
    "numbers",
    "many",
    "dice",
    "would",
    "like",
    "five",
    "dice",
    "5",
    "3",
    "3",
    "4",
    "6",
    "okay",
    "know",
    "works",
    "let",
    "calculate",
    "total",
    "need",
    "iterate",
    "sum",
    "elements",
    "within",
    "list",
    "loop",
    "every",
    "die",
    "list",
    "dice",
    "take",
    "total",
    "variable",
    "plus",
    "equals",
    "current",
    "value",
    "within",
    "dice",
    "print",
    "total",
    "use",
    "f",
    "string",
    "total",
    "colon",
    "space",
    "total",
    "variable",
    "let",
    "see",
    "far",
    "many",
    "dice",
    "would",
    "like",
    "five",
    "dice",
    "total",
    "19",
    "two",
    "loops",
    "display",
    "asi",
    "art",
    "easiest",
    "way",
    "would",
    "create",
    "nested",
    "loops",
    "outer",
    "loop",
    "charge",
    "number",
    "dice",
    "every",
    "die",
    "range",
    "number",
    "dice",
    "inner",
    "loop",
    "charge",
    "printing",
    "every",
    "tupple",
    "every",
    "line",
    "get",
    "value",
    "dictionary",
    "would",
    "type",
    "name",
    "dictionary",
    "dice",
    "art",
    "use",
    "get",
    "method",
    "getting",
    "getting",
    "value",
    "given",
    "key",
    "let",
    "take",
    "list",
    "numbers",
    "dice",
    "index",
    "counter",
    "depending",
    "user",
    "types",
    "number",
    "dice",
    "begin",
    "one",
    "increment",
    "within",
    "inner",
    "four",
    "loop",
    "print",
    "line",
    "let",
    "take",
    "look",
    "many",
    "dice",
    "would",
    "like",
    "three",
    "dice",
    "aski",
    "art",
    "six",
    "2",
    "4",
    "equals",
    "12",
    "would",
    "prefer",
    "display",
    "dice",
    "single",
    "horizontal",
    "line",
    "instead",
    "one",
    "vertical",
    "line",
    "little",
    "tricky",
    "though",
    "would",
    "prefer",
    "approach",
    "let",
    "turn",
    "chunk",
    "code",
    "comments",
    "write",
    "nested",
    "loop",
    "little",
    "different",
    "tupple",
    "made",
    "five",
    "elements",
    "right",
    "printing",
    "horizontal",
    "line",
    "let",
    "say",
    "roll",
    "numbers",
    "1",
    "3",
    "would",
    "first",
    "need",
    "display",
    "line",
    "first",
    "dice",
    "first",
    "line",
    "second",
    "dice",
    "first",
    "line",
    "third",
    "dice",
    "next",
    "iteration",
    "outer",
    "loop",
    "would",
    "display",
    "second",
    "line",
    "first",
    "dice",
    "second",
    "line",
    "second",
    "dice",
    "second",
    "line",
    "third",
    "dice",
    "little",
    "complex",
    "let",
    "create",
    "outer",
    "loop",
    "iterate",
    "five",
    "times",
    "every",
    "line",
    "range",
    "five",
    "nested",
    "loop",
    "every",
    "die",
    "dice",
    "many",
    "dice",
    "within",
    "list",
    "print",
    "going",
    "get",
    "one",
    "values",
    "found",
    "one",
    "numbers",
    "roll",
    "take",
    "dictionary",
    "dice",
    "art",
    "get",
    "number",
    "1",
    "six",
    "value",
    "found",
    "within",
    "list",
    "dice",
    "get",
    "current",
    "die",
    "remember",
    "number",
    "1",
    "six",
    "would",
    "need",
    "one",
    "elements",
    "found",
    "within",
    "tuple",
    "get",
    "first",
    "line",
    "second",
    "line",
    "third",
    "fourth",
    "fifth",
    "let",
    "add",
    "index",
    "operator",
    "place",
    "counter",
    "line",
    "within",
    "index",
    "operator",
    "let",
    "see",
    "far",
    "need",
    "add",
    "one",
    "thing",
    "many",
    "dice",
    "three",
    "abomination",
    "one",
    "change",
    "need",
    "make",
    "end",
    "print",
    "statement",
    "let",
    "set",
    "ending",
    "character",
    "empty",
    "string",
    "fix",
    "many",
    "dice",
    "three",
    "okay",
    "getting",
    "better",
    "results",
    "escape",
    "inner",
    "loop",
    "print",
    "new",
    "line",
    "many",
    "dice",
    "three",
    "3",
    "6",
    "1",
    "10",
    "right",
    "everybody",
    "dice",
    "roller",
    "program",
    "kind",
    "complex",
    "thought",
    "might",
    "good",
    "exercise",
    "would",
    "like",
    "copy",
    "code",
    "post",
    "comment",
    "section",
    "well",
    "yeah",
    "dice",
    "roller",
    "program",
    "python",
    "hey",
    "everybody",
    "today",
    "need",
    "explain",
    "function",
    "funs",
    "think",
    "function",
    "block",
    "reusable",
    "code",
    "invoke",
    "function",
    "place",
    "set",
    "parentheses",
    "function",
    "name",
    "invoke",
    "scenario",
    "need",
    "sing",
    "happy",
    "birthday",
    "three",
    "times",
    "know",
    "weird",
    "example",
    "makes",
    "lot",
    "sense",
    "trust",
    "need",
    "sing",
    "happy",
    "birthday",
    "three",
    "times",
    "would",
    "write",
    "something",
    "like",
    "going",
    "create",
    "version",
    "happy",
    "birthday",
    "song",
    "one",
    "verse",
    "need",
    "repeat",
    "code",
    "three",
    "times",
    "without",
    "using",
    "functions",
    "could",
    "either",
    "repeat",
    "code",
    "maybe",
    "place",
    "within",
    "loop",
    "happy",
    "birthday",
    "song",
    "three",
    "times",
    "better",
    "way",
    "handling",
    "involve",
    "repeating",
    "code",
    "using",
    "loops",
    "could",
    "write",
    "code",
    "reuse",
    "whenever",
    "need",
    "functions",
    "come",
    "define",
    "function",
    "would",
    "type",
    "df",
    "unique",
    "function",
    "name",
    "let",
    "name",
    "function",
    "happy",
    "birthday",
    "function",
    "add",
    "set",
    "parentheses",
    "colon",
    "code",
    "belongs",
    "function",
    "want",
    "indent",
    "underneath",
    "invoke",
    "function",
    "would",
    "type",
    "name",
    "function",
    "happy",
    "birthday",
    "add",
    "set",
    "parentheses",
    "invoke",
    "function",
    "execute",
    "code",
    "need",
    "execute",
    "code",
    "three",
    "times",
    "would",
    "call",
    "two",
    "times",
    "happy",
    "birthday",
    "happy",
    "birthday",
    "happy",
    "birthday",
    "invoke",
    "function",
    "type",
    "function",
    "name",
    "add",
    "set",
    "parentheses",
    "like",
    "think",
    "parentheses",
    "pair",
    "telephones",
    "talking",
    "call",
    "function",
    "invoke",
    "hey",
    "happy",
    "birthday",
    "function",
    "execute",
    "code",
    "functions",
    "able",
    "send",
    "data",
    "directly",
    "function",
    "using",
    "known",
    "arguments",
    "send",
    "values",
    "variables",
    "directly",
    "function",
    "place",
    "data",
    "within",
    "set",
    "parentheses",
    "send",
    "function",
    "first",
    "name",
    "data",
    "send",
    "function",
    "known",
    "arguments",
    "need",
    "matching",
    "set",
    "parameters",
    "order",
    "exactly",
    "data",
    "sending",
    "well",
    "name",
    "add",
    "one",
    "parameter",
    "happy",
    "birthday",
    "function",
    "name",
    "data",
    "name",
    "parameter",
    "kind",
    "like",
    "temporary",
    "variable",
    "used",
    "within",
    "function",
    "going",
    "replace",
    "instance",
    "name",
    "use",
    "f",
    "string",
    "repl",
    "place",
    "placeholder",
    "add",
    "parameter",
    "name",
    "happy",
    "birthday",
    "bro",
    "could",
    "pass",
    "names",
    "steve",
    "joe",
    "happy",
    "birthday",
    "bro",
    "happy",
    "birthday",
    "steve",
    "happy",
    "birthday",
    "joe",
    "invoke",
    "function",
    "send",
    "one",
    "argument",
    "let",
    "send",
    "age",
    "time",
    "send",
    "20",
    "30",
    "40",
    "run",
    "error",
    "passing",
    "two",
    "arguments",
    "function",
    "set",
    "take",
    "one",
    "would",
    "need",
    "matching",
    "number",
    "arguments",
    "invoke",
    "function",
    "need",
    "two",
    "parameters",
    "name",
    "age",
    "let",
    "use",
    "age",
    "let",
    "make",
    "line",
    "f",
    "string",
    "age",
    "years",
    "old",
    "let",
    "try",
    "happy",
    "birthday",
    "bro",
    "20",
    "years",
    "old",
    "happy",
    "birthday",
    "steve",
    "30",
    "years",
    "old",
    "happy",
    "birthday",
    "joe",
    "40",
    "years",
    "old",
    "invoke",
    "function",
    "pass",
    "data",
    "known",
    "arguments",
    "need",
    "matching",
    "set",
    "parameters",
    "order",
    "matter",
    "let",
    "see",
    "happens",
    "switch",
    "two",
    "parameters",
    "age",
    "name",
    "happy",
    "birthday",
    "220",
    "bro",
    "years",
    "old",
    "happy",
    "birthday",
    "230",
    "steve",
    "years",
    "old",
    "happy",
    "birthday",
    "240",
    "joe",
    "years",
    "old",
    "position",
    "parameters",
    "matter",
    "thing",
    "goes",
    "arguments",
    "also",
    "could",
    "name",
    "parameters",
    "something",
    "unique",
    "maybe",
    "x",
    "happy",
    "birthday",
    "x",
    "years",
    "old",
    "also",
    "valid",
    "let",
    "try",
    "another",
    "example",
    "going",
    "create",
    "function",
    "display",
    "invoice",
    "three",
    "parameters",
    "username",
    "amount",
    "due",
    "date",
    "let",
    "print",
    "hello",
    "make",
    "fst",
    "string",
    "username",
    "use",
    "another",
    "fst",
    "string",
    "bill",
    "amount",
    "let",
    "preedee",
    "placeholder",
    "unit",
    "currency",
    "also",
    "add",
    "format",
    "specifier",
    "point",
    "2f",
    "due",
    "date",
    "whatever",
    "parameter",
    "invoke",
    "function",
    "type",
    "function",
    "name",
    "add",
    "set",
    "parentheses",
    "username",
    "amount",
    "due",
    "date",
    "let",
    "make",
    "username",
    "amount",
    "guess",
    "making",
    "number",
    "due",
    "date",
    "1st",
    "january",
    "guess",
    "invoice",
    "hello",
    "bro",
    "code",
    "bill",
    "due",
    "january",
    "1st",
    "let",
    "change",
    "arguments",
    "joe",
    "schmo",
    "username",
    "owes",
    "100",
    "1",
    "penny",
    "due",
    "1st",
    "february",
    "january",
    "2nd",
    "depending",
    "read",
    "dates",
    "region",
    "hello",
    "joe",
    "mo",
    "bill",
    "100",
    "and1",
    "due",
    "another",
    "example",
    "need",
    "explain",
    "return",
    "statement",
    "return",
    "statement",
    "used",
    "end",
    "function",
    "send",
    "result",
    "back",
    "caller",
    "example",
    "variable",
    "z",
    "z",
    "equal",
    "invoke",
    "function",
    "add",
    "two",
    "numbers",
    "together",
    "numbers",
    "one",
    "two",
    "invoke",
    "function",
    "send",
    "data",
    "back",
    "adding",
    "one",
    "two",
    "send",
    "result",
    "would",
    "three",
    "value",
    "assigned",
    "variable",
    "print",
    "whatever",
    "z",
    "let",
    "create",
    "functions",
    "let",
    "create",
    "function",
    "add",
    "two",
    "numbers",
    "together",
    "parameters",
    "x",
    "let",
    "say",
    "z",
    "equal",
    "x",
    "return",
    "value",
    "z",
    "going",
    "print",
    "z",
    "directly",
    "right",
    "let",
    "subtract",
    "x",
    "subtract",
    "z",
    "xus",
    "return",
    "z",
    "multiply",
    "x",
    "divide",
    "x",
    "return",
    "z",
    "let",
    "invoke",
    "add",
    "function",
    "pass",
    "two",
    "numbers",
    "1",
    "two",
    "going",
    "print",
    "result",
    "adding",
    "two",
    "numbers",
    "together",
    "result",
    "three",
    "subtract",
    "subtract",
    "1",
    "two",
    "result",
    "1",
    "multiply",
    "result",
    "two",
    "divide",
    "1",
    "2",
    "resolve",
    "function",
    "value",
    "returned",
    "imagine",
    "finish",
    "function",
    "function",
    "becomes",
    "whatever",
    "returned",
    "three",
    "function",
    "becomes",
    "1",
    "function",
    "becomes",
    "2",
    "function",
    "becomes",
    "let",
    "write",
    "something",
    "little",
    "complex",
    "create",
    "function",
    "create",
    "full",
    "name",
    "create",
    "name",
    "need",
    "two",
    "parameters",
    "first",
    "name",
    "last",
    "name",
    "name",
    "first",
    "last",
    "want",
    "within",
    "function",
    "let",
    "capitalize",
    "user",
    "first",
    "name",
    "first",
    "equals",
    "first",
    "capitalize",
    "method",
    "thing",
    "last",
    "name",
    "last",
    "equals",
    "last",
    "capitalize",
    "going",
    "return",
    "user",
    "first",
    "name",
    "plus",
    "last",
    "name",
    "add",
    "space",
    "first",
    "last",
    "name",
    "also",
    "valid",
    "outside",
    "function",
    "let",
    "create",
    "full",
    "name",
    "variable",
    "invoke",
    "create",
    "name",
    "function",
    "function",
    "going",
    "capitalize",
    "first",
    "last",
    "name",
    "us",
    "type",
    "first",
    "name",
    "lowercase",
    "thing",
    "last",
    "name",
    "let",
    "let",
    "print",
    "full",
    "name",
    "full",
    "name",
    "variable",
    "sent",
    "function",
    "arguments",
    "parameters",
    "set",
    "took",
    "values",
    "made",
    "uppercase",
    "concatenated",
    "strings",
    "together",
    "return",
    "single",
    "string",
    "let",
    "try",
    "different",
    "name",
    "spongebob",
    "squarepants",
    "spongebob",
    "full",
    "name",
    "first",
    "last",
    "names",
    "cap",
    "ized",
    "using",
    "return",
    "statement",
    "return",
    "data",
    "back",
    "place",
    "call",
    "function",
    "well",
    "everybody",
    "function",
    "section",
    "reusable",
    "code",
    "call",
    "function",
    "type",
    "function",
    "name",
    "add",
    "set",
    "parentheses",
    "send",
    "function",
    "data",
    "known",
    "arguments",
    "need",
    "matching",
    "set",
    "parameters",
    "also",
    "option",
    "returning",
    "data",
    "back",
    "place",
    "invoke",
    "function",
    "using",
    "functions",
    "lot",
    "future",
    "get",
    "practice",
    "functions",
    "python",
    "hey",
    "everybody",
    "today",
    "going",
    "explain",
    "default",
    "arguments",
    "default",
    "arguments",
    "default",
    "value",
    "certain",
    "parameters",
    "default",
    "used",
    "argument",
    "omitted",
    "invoke",
    "function",
    "last",
    "topic",
    "discussed",
    "positional",
    "arguments",
    "today",
    "examining",
    "default",
    "arguments",
    "future",
    "topics",
    "examine",
    "keyword",
    "arbitrary",
    "arguments",
    "let",
    "begin",
    "let",
    "define",
    "function",
    "calculate",
    "net",
    "price",
    "three",
    "parameters",
    "original",
    "list",
    "price",
    "discount",
    "one",
    "sales",
    "tax",
    "return",
    "net",
    "price",
    "formula",
    "list",
    "price",
    "times",
    "1",
    "minus",
    "discount",
    "percentage",
    "times",
    "1",
    "plus",
    "sales",
    "tax",
    "maybe",
    "buying",
    "playstation",
    "5",
    "500",
    "pass",
    "500",
    "list",
    "price",
    "well",
    "ca",
    "actually",
    "execute",
    "function",
    "without",
    "also",
    "passing",
    "argument",
    "discount",
    "tax",
    "perhaps",
    "discount",
    "zero",
    "sales",
    "tax",
    "5",
    "well",
    "would",
    "work",
    "probably",
    "put",
    "within",
    "print",
    "statement",
    "see",
    "total",
    "525",
    "list",
    "price",
    "500",
    "discount",
    "5",
    "sales",
    "tax",
    "suppose",
    "maybe",
    "90",
    "time",
    "executing",
    "function",
    "time",
    "discount",
    "zero",
    "sales",
    "tax",
    "almost",
    "always",
    "could",
    "make",
    "function",
    "little",
    "flexible",
    "set",
    "two",
    "parameters",
    "default",
    "value",
    "place",
    "sending",
    "three",
    "arguments",
    "pass",
    "one",
    "discount",
    "tax",
    "default",
    "value",
    "set",
    "discount",
    "zero",
    "tax",
    "meaning",
    "5",
    "function",
    "would",
    "work",
    "total",
    "525",
    "assuming",
    "discount",
    "zero",
    "tax",
    "5",
    "nice",
    "thing",
    "using",
    "default",
    "arguments",
    "let",
    "say",
    "somebody",
    "discount",
    "well",
    "function",
    "would",
    "also",
    "accept",
    "two",
    "additional",
    "arguments",
    "let",
    "print",
    "net",
    "price",
    "500",
    "customer",
    "coupon",
    "10",
    "add",
    "second",
    "argument",
    "passing",
    "argument",
    "discount",
    "use",
    "whatever",
    "passed",
    "rather",
    "default",
    "total",
    "472",
    "maybe",
    "time",
    "paying",
    "sales",
    "tax",
    "set",
    "sales",
    "tax",
    "zero",
    "customer",
    "total",
    "450",
    "kind",
    "nice",
    "thing",
    "default",
    "arguments",
    "makes",
    "functions",
    "flexible",
    "reduce",
    "number",
    "arguments",
    "especially",
    "arguments",
    "passing",
    "tend",
    "consistent",
    "time",
    "people",
    "discount",
    "almost",
    "everybody",
    "paying",
    "5",
    "sales",
    "tax",
    "pass",
    "arguments",
    "let",
    "cover",
    "exercise",
    "create",
    "count",
    "timer",
    "import",
    "time",
    "module",
    "define",
    "function",
    "define",
    "count",
    "two",
    "arguments",
    "start",
    "end",
    "x",
    "range",
    "start",
    "comma",
    "within",
    "range",
    "function",
    "second",
    "argument",
    "exclusive",
    "going",
    "add",
    "one",
    "end",
    "time",
    "print",
    "x",
    "make",
    "thread",
    "running",
    "program",
    "sleep",
    "access",
    "time",
    "modules",
    "sleep",
    "method",
    "pass",
    "one",
    "one",
    "second",
    "outside",
    "loop",
    "let",
    "print",
    "word",
    "done",
    "invoke",
    "function",
    "need",
    "pass",
    "two",
    "arguments",
    "start",
    "time",
    "end",
    "time",
    "set",
    "start",
    "time",
    "zero",
    "end",
    "time",
    "10",
    "10",
    "seconds",
    "start",
    "zero",
    "increment",
    "one",
    "every",
    "second",
    "speed",
    "video",
    "think",
    "get",
    "idea",
    "stop",
    "10",
    "let",
    "assume",
    "time",
    "user",
    "would",
    "like",
    "begin",
    "zero",
    "well",
    "necessarily",
    "need",
    "pass",
    "argument",
    "let",
    "set",
    "start",
    "parameter",
    "default",
    "value",
    "zero",
    "need",
    "pass",
    "one",
    "argument",
    "problem",
    "arguments",
    "follow",
    "default",
    "arguments",
    "use",
    "default",
    "arguments",
    "want",
    "sure",
    "positional",
    "arguments",
    "let",
    "reverse",
    "work",
    "run",
    "program",
    "assuming",
    "like",
    "start",
    "zero",
    "need",
    "pass",
    "ending",
    "amount",
    "seconds",
    "want",
    "stop",
    "works",
    "option",
    "starting",
    "different",
    "number",
    "time",
    "let",
    "end",
    "30",
    "begin",
    "15",
    "beginning",
    "15",
    "count",
    "30",
    "speed",
    "video",
    "right",
    "everybody",
    "conclusion",
    "default",
    "arguments",
    "default",
    "values",
    "certain",
    "parameters",
    "default",
    "value",
    "used",
    "argument",
    "omitted",
    "make",
    "functions",
    "flexible",
    "reduce",
    "number",
    "arguments",
    "pass",
    "especially",
    "arguments",
    "consistent",
    "time",
    "default",
    "arguments",
    "next",
    "topic",
    "discuss",
    "keyword",
    "arguments",
    "well",
    "yeah",
    "default",
    "arguments",
    "python",
    "hey",
    "friends",
    "today",
    "going",
    "explain",
    "keyword",
    "arguments",
    "keyword",
    "argument",
    "argument",
    "preceded",
    "identifier",
    "benefits",
    "helps",
    "readability",
    "order",
    "arguments",
    "matter",
    "keywords",
    "keyword",
    "arguments",
    "one",
    "four",
    "basic",
    "styles",
    "arguments",
    "discuss",
    "positional",
    "default",
    "next",
    "discuss",
    "arbitrary",
    "today",
    "focusing",
    "keyword",
    "suppose",
    "function",
    "display",
    "message",
    "like",
    "greeting",
    "name",
    "function",
    "hello",
    "function",
    "need",
    "greeting",
    "title",
    "mr",
    "mrs",
    "doctor",
    "first",
    "name",
    "last",
    "name",
    "going",
    "within",
    "function",
    "print",
    "f",
    "string",
    "print",
    "greeting",
    "user",
    "title",
    "first",
    "name",
    "last",
    "name",
    "invoke",
    "hello",
    "function",
    "need",
    "pass",
    "four",
    "arguments",
    "greeting",
    "title",
    "first",
    "name",
    "last",
    "name",
    "greeting",
    "let",
    "say",
    "hello",
    "title",
    "mr",
    "first",
    "name",
    "spongebob",
    "last",
    "name",
    "squarepants",
    "know",
    "work",
    "currently",
    "using",
    "positional",
    "arguments",
    "position",
    "arguments",
    "matter",
    "switch",
    "around",
    "hello",
    "spongebob",
    "squarepants",
    "followed",
    "mister",
    "hello",
    "spongebob",
    "squarepants",
    "mis",
    "optional",
    "feature",
    "sending",
    "arguments",
    "function",
    "could",
    "turn",
    "keyword",
    "arguments",
    "prefix",
    "arguments",
    "name",
    "parameter",
    "followed",
    "equals",
    "title",
    "equals",
    "mister",
    "first",
    "equals",
    "spongebob",
    "last",
    "equals",
    "squarepants",
    "keyword",
    "arguments",
    "order",
    "really",
    "matter",
    "maybe",
    "move",
    "first",
    "name",
    "end",
    "still",
    "would",
    "print",
    "thing",
    "title",
    "first",
    "name",
    "last",
    "name",
    "mixing",
    "matching",
    "positional",
    "arguments",
    "key",
    "word",
    "arguments",
    "want",
    "sure",
    "positional",
    "arguments",
    "first",
    "move",
    "string",
    "greeting",
    "end",
    "well",
    "technically",
    "would",
    "work",
    "syntax",
    "error",
    "positional",
    "arguments",
    "follow",
    "keyword",
    "arguments",
    "make",
    "sure",
    "positional",
    "arguments",
    "first",
    "using",
    "keyword",
    "arguments",
    "two",
    "helpful",
    "benefits",
    "using",
    "keyword",
    "arguments",
    "helps",
    "readability",
    "order",
    "arguments",
    "matter",
    "know",
    "argument",
    "well",
    "two",
    "title",
    "last",
    "name",
    "first",
    "name",
    "let",
    "say",
    "first",
    "name",
    "last",
    "name",
    "john",
    "james",
    "two",
    "names",
    "kind",
    "sound",
    "like",
    "first",
    "names",
    "first",
    "name",
    "john",
    "james",
    "could",
    "use",
    "keyword",
    "arguments",
    "clarify",
    "thought",
    "john",
    "first",
    "name",
    "actually",
    "last",
    "name",
    "first",
    "name",
    "james",
    "title",
    "still",
    "hello",
    "mr",
    "james",
    "john",
    "let",
    "cover",
    "another",
    "example",
    "going",
    "print",
    "numbers",
    "1",
    "10",
    "using",
    "loop",
    "x",
    "range",
    "1",
    "comma",
    "11",
    "second",
    "argument",
    "exclusive",
    "print",
    "x",
    "print",
    "statement",
    "print",
    "new",
    "line",
    "remember",
    "previous",
    "topics",
    "would",
    "follow",
    "print",
    "statement",
    "comma",
    "new",
    "character",
    "space",
    "end",
    "keyword",
    "argument",
    "found",
    "within",
    "print",
    "statement",
    "place",
    "ending",
    "print",
    "statement",
    "new",
    "line",
    "using",
    "keyword",
    "argument",
    "end",
    "sending",
    "space",
    "another",
    "one",
    "separate",
    "found",
    "within",
    "print",
    "statement",
    "maybe",
    "numbers",
    "separate",
    "strings",
    "numbers",
    "1",
    "5",
    "use",
    "separate",
    "keyword",
    "argument",
    "separate",
    "strings",
    "given",
    "character",
    "characters",
    "separate",
    "strings",
    "dash",
    "lot",
    "functions",
    "print",
    "function",
    "keyword",
    "arguments",
    "use",
    "let",
    "go",
    "exercise",
    "going",
    "create",
    "function",
    "generate",
    "phone",
    "number",
    "need",
    "pass",
    "country",
    "code",
    "area",
    "code",
    "first",
    "three",
    "digits",
    "last",
    "four",
    "digits",
    "let",
    "define",
    "function",
    "define",
    "get",
    "phone",
    "get",
    "phone",
    "number",
    "country",
    "code",
    "area",
    "code",
    "first",
    "meaning",
    "first",
    "digits",
    "last",
    "meaning",
    "last",
    "digits",
    "return",
    "f",
    "string",
    "place",
    "country",
    "code",
    "first",
    "dash",
    "area",
    "code",
    "dash",
    "first",
    "digits",
    "dash",
    "last",
    "digits",
    "phone",
    "number",
    "phone",
    "num",
    "equals",
    "invoke",
    "get",
    "phone",
    "number",
    "function",
    "created",
    "need",
    "country",
    "code",
    "area",
    "code",
    "first",
    "digits",
    "last",
    "digits",
    "remember",
    "order",
    "necessarily",
    "matter",
    "usually",
    "try",
    "consistent",
    "order",
    "parameters",
    "make",
    "phone",
    "number",
    "united",
    "states",
    "country",
    "code",
    "one",
    "area",
    "code",
    "1",
    "2",
    "3",
    "next",
    "digits",
    "456",
    "last",
    "7890",
    "let",
    "print",
    "phone",
    "number",
    "print",
    "phone",
    "num",
    "phone",
    "number",
    "although",
    "change",
    "based",
    "phone",
    "numbers",
    "country",
    "typically",
    "would",
    "see",
    "phone",
    "number",
    "united",
    "states",
    "right",
    "everybody",
    "keyword",
    "arguments",
    "arguments",
    "preceded",
    "identifier",
    "matches",
    "name",
    "function",
    "parameters",
    "help",
    "readability",
    "order",
    "arguments",
    "matter",
    "invoking",
    "function",
    "could",
    "helpful",
    "identify",
    "arguments",
    "well",
    "everybody",
    "keyword",
    "arguments",
    "python",
    "hello",
    "friends",
    "today",
    "need",
    "explain",
    "arbitrary",
    "arguments",
    "arbitrary",
    "meaning",
    "varying",
    "amount",
    "arguments",
    "know",
    "many",
    "arguments",
    "user",
    "going",
    "pass",
    "invoke",
    "function",
    "accept",
    "varying",
    "amount",
    "arguments",
    "developers",
    "tend",
    "use",
    "parameters",
    "args",
    "quars",
    "args",
    "means",
    "arguments",
    "quars",
    "means",
    "keyword",
    "arguments",
    "would",
    "want",
    "prefix",
    "parameters",
    "unpacking",
    "operator",
    "asterisk",
    "invoke",
    "function",
    "args",
    "quars",
    "parameters",
    "pack",
    "arguments",
    "tupple",
    "args",
    "dictionary",
    "parameters",
    "quars",
    "let",
    "go",
    "example",
    "create",
    "function",
    "add",
    "two",
    "numbers",
    "together",
    "define",
    "add",
    "function",
    "two",
    "parameters",
    "comma",
    "b",
    "going",
    "return",
    "b",
    "invoke",
    "function",
    "pass",
    "two",
    "arguments",
    "two",
    "parameter",
    "set",
    "one",
    "comma",
    "2",
    "going",
    "print",
    "result",
    "big",
    "surprise",
    "function",
    "return",
    "three",
    "right",
    "well",
    "would",
    "like",
    "pass",
    "three",
    "parameters",
    "time",
    "well",
    "longer",
    "use",
    "function",
    "add",
    "function",
    "takes",
    "two",
    "positional",
    "arguments",
    "three",
    "given",
    "could",
    "modify",
    "function",
    "could",
    "accept",
    "varying",
    "amount",
    "arguments",
    "amount",
    "going",
    "replace",
    "parameters",
    "asterisk",
    "word",
    "args",
    "meaning",
    "arguments",
    "use",
    "unpacking",
    "operator",
    "going",
    "happen",
    "arguments",
    "pass",
    "function",
    "pack",
    "tupple",
    "believe",
    "let",
    "test",
    "going",
    "print",
    "type",
    "args",
    "going",
    "remove",
    "print",
    "statement",
    "parameter",
    "args",
    "tupple",
    "could",
    "work",
    "use",
    "methods",
    "tupple",
    "could",
    "iterate",
    "going",
    "iterate",
    "tuple",
    "every",
    "arg",
    "args",
    "every",
    "argument",
    "arguments",
    "create",
    "variable",
    "named",
    "total",
    "keep",
    "track",
    "total",
    "total",
    "plus",
    "equals",
    "current",
    "arc",
    "iterating",
    "end",
    "return",
    "total",
    "let",
    "print",
    "result",
    "print",
    "add",
    "three",
    "numbers",
    "together",
    "total",
    "six",
    "pass",
    "amount",
    "arguments",
    "time",
    "maybe",
    "five",
    "even",
    "one",
    "parameter",
    "args",
    "change",
    "name",
    "something",
    "else",
    "like",
    "nums",
    "meaning",
    "numbers",
    "every",
    "num",
    "nums",
    "total",
    "plus",
    "equals",
    "num",
    "would",
    "work",
    "name",
    "parameter",
    "important",
    "unpacking",
    "operator",
    "typical",
    "naming",
    "conventions",
    "people",
    "tend",
    "stick",
    "args",
    "parameter",
    "name",
    "vary",
    "let",
    "try",
    "different",
    "example",
    "let",
    "create",
    "function",
    "display",
    "somebody",
    "name",
    "display",
    "name",
    "accept",
    "varying",
    "amount",
    "arguments",
    "use",
    "unpacking",
    "operator",
    "follow",
    "unpacking",
    "operator",
    "unique",
    "parameter",
    "name",
    "every",
    "arg",
    "args",
    "let",
    "print",
    "argument",
    "replace",
    "ending",
    "character",
    "print",
    "statement",
    "space",
    "sometimes",
    "people",
    "varying",
    "number",
    "names",
    "full",
    "name",
    "first",
    "name",
    "middle",
    "name",
    "last",
    "name",
    "maen",
    "name",
    "title",
    "etc",
    "going",
    "pass",
    "first",
    "name",
    "last",
    "name",
    "spongebob",
    "squarepants",
    "need",
    "add",
    "middle",
    "name",
    "spongebob",
    "herold",
    "squarepants",
    "title",
    "dr",
    "spongebob",
    "herold",
    "squarepants",
    "third",
    "yeah",
    "saying",
    "unpacking",
    "operator",
    "followed",
    "unique",
    "parameter",
    "name",
    "pack",
    "arguments",
    "tuple",
    "use",
    "within",
    "function",
    "let",
    "discuss",
    "quars",
    "use",
    "two",
    "unpacking",
    "operators",
    "typically",
    "people",
    "follow",
    "word",
    "quars",
    "meaning",
    "keyword",
    "arguments",
    "allows",
    "pass",
    "multiple",
    "keyword",
    "arguments",
    "discussed",
    "last",
    "topic",
    "think",
    "would",
    "great",
    "address",
    "define",
    "print",
    "address",
    "function",
    "use",
    "double",
    "asterisks",
    "add",
    "parameter",
    "name",
    "people",
    "usually",
    "stick",
    "quars",
    "meaning",
    "keyword",
    "arguments",
    "placeholder",
    "going",
    "type",
    "pass",
    "pass",
    "anything",
    "want",
    "program",
    "able",
    "run",
    "get",
    "back",
    "function",
    "momentarily",
    "going",
    "invoke",
    "function",
    "print",
    "address",
    "pass",
    "multiple",
    "keyword",
    "arguments",
    "address",
    "would",
    "typically",
    "street",
    "city",
    "state",
    "depending",
    "country",
    "live",
    "may",
    "less",
    "keyword",
    "arguments",
    "live",
    "united",
    "states",
    "state",
    "zip",
    "code",
    "okay",
    "street",
    "making",
    "something",
    "one",
    "two",
    "three",
    "fake",
    "street",
    "city",
    "detroit",
    "state",
    "michigan",
    "zip",
    "code",
    "5",
    "43",
    "2",
    "1",
    "make",
    "look",
    "better",
    "going",
    "place",
    "keyword",
    "arguments",
    "new",
    "line",
    "readable",
    "pass",
    "keyword",
    "arguments",
    "pack",
    "dictionary",
    "prove",
    "let",
    "print",
    "type",
    "quars",
    "look",
    "class",
    "dictionary",
    "within",
    "function",
    "treat",
    "quars",
    "dictionary",
    "lot",
    "methods",
    "could",
    "iterate",
    "keys",
    "values",
    "iterate",
    "values",
    "let",
    "say",
    "every",
    "value",
    "dictionary",
    "quars",
    "dov",
    "values",
    "method",
    "print",
    "every",
    "value",
    "values",
    "keys",
    "let",
    "change",
    "loop",
    "every",
    "key",
    "quars",
    "keys",
    "method",
    "print",
    "every",
    "key",
    "keys",
    "could",
    "say",
    "every",
    "key",
    "comma",
    "value",
    "quars",
    "items",
    "method",
    "print",
    "every",
    "key",
    "actually",
    "let",
    "turn",
    "f",
    "string",
    "print",
    "every",
    "key",
    "colon",
    "value",
    "items",
    "method",
    "return",
    "key",
    "value",
    "pairs",
    "pass",
    "varying",
    "amount",
    "keyword",
    "arguments",
    "going",
    "add",
    "apartment",
    "number",
    "apartment",
    "equals",
    "100",
    "keyword",
    "argument",
    "apartment",
    "packed",
    "dictionary",
    "along",
    "keyword",
    "arguments",
    "kind",
    "nice",
    "pass",
    "varying",
    "amount",
    "keyword",
    "arguments",
    "let",
    "cover",
    "exercise",
    "going",
    "use",
    "args",
    "quarks",
    "together",
    "print",
    "shipping",
    "label",
    "define",
    "shipping",
    "label",
    "function",
    "parameters",
    "ars",
    "comma",
    "quars",
    "going",
    "write",
    "past",
    "program",
    "work",
    "fill",
    "shipping",
    "label",
    "function",
    "momentarily",
    "invoke",
    "shipping",
    "label",
    "function",
    "first",
    "pass",
    "positional",
    "arguments",
    "followed",
    "keyword",
    "arguments",
    "wo",
    "work",
    "way",
    "around",
    "prove",
    "little",
    "bit",
    "let",
    "say",
    "doctor",
    "spongebob",
    "squarepants",
    "thir",
    "add",
    "keyword",
    "arguments",
    "going",
    "put",
    "new",
    "line",
    "street",
    "equals",
    "123",
    "fake",
    "street",
    "apartment",
    "equals",
    "100",
    "city",
    "equals",
    "detroit",
    "state",
    "equals",
    "michigan",
    "zip",
    "equal",
    "54321",
    "invoke",
    "function",
    "mix",
    "arbitrary",
    "positional",
    "arguments",
    "arbitrary",
    "keyword",
    "arguments",
    "shipping",
    "label",
    "function",
    "designed",
    "accept",
    "need",
    "args",
    "first",
    "followed",
    "quars",
    "program",
    "run",
    "way",
    "around",
    "quars",
    "followed",
    "args",
    "going",
    "function",
    "properly",
    "see",
    "syntax",
    "error",
    "parameters",
    "make",
    "sure",
    "keyword",
    "arguments",
    "follow",
    "positional",
    "arguments",
    "let",
    "iterate",
    "positional",
    "arguments",
    "first",
    "every",
    "arg",
    "ars",
    "let",
    "print",
    "arg",
    "change",
    "ending",
    "character",
    "print",
    "statement",
    "space",
    "name",
    "user",
    "shipping",
    "something",
    "shipping",
    "label",
    "function",
    "print",
    "new",
    "line",
    "iterate",
    "keyword",
    "arguments",
    "every",
    "value",
    "dictionary",
    "quars",
    "values",
    "method",
    "print",
    "value",
    "change",
    "ending",
    "character",
    "print",
    "statement",
    "space",
    "right",
    "looking",
    "bad",
    "far",
    "remove",
    "keyword",
    "arguments",
    "positional",
    "arguments",
    "work",
    "still",
    "going",
    "change",
    "format",
    "address",
    "slightly",
    "let",
    "add",
    "street",
    "one",
    "line",
    "city",
    "state",
    "zip",
    "code",
    "next",
    "line",
    "let",
    "get",
    "rid",
    "four",
    "loop",
    "print",
    "street",
    "going",
    "print",
    "use",
    "fst",
    "string",
    "add",
    "placeholder",
    "quars",
    "doget",
    "method",
    "going",
    "get",
    "street",
    "key",
    "get",
    "method",
    "probably",
    "need",
    "place",
    "within",
    "single",
    "quotes",
    "use",
    "double",
    "quotes",
    "python",
    "gets",
    "confused",
    "fst",
    "string",
    "ends",
    "use",
    "single",
    "quotes",
    "let",
    "test",
    "right",
    "street",
    "next",
    "line",
    "print",
    "city",
    "state",
    "zip",
    "print",
    "fing",
    "placeholder",
    "quars",
    "doget",
    "within",
    "single",
    "quotes",
    "city",
    "add",
    "another",
    "placeholder",
    "quars",
    "doget",
    "state",
    "quars",
    "doget",
    "zip",
    "let",
    "see",
    "right",
    "bad",
    "user",
    "apartment",
    "keyword",
    "apartment",
    "equals",
    "number",
    "100",
    "well",
    "probably",
    "add",
    "within",
    "top",
    "print",
    "statement",
    "add",
    "another",
    "placeholder",
    "invoke",
    "get",
    "method",
    "dictionary",
    "key",
    "looking",
    "apartment",
    "dr",
    "spongebob",
    "squarepants",
    "123",
    "fake",
    "street",
    "apartment",
    "number",
    "100",
    "detroit",
    "michigan",
    "5432",
    "1",
    "print",
    "statement",
    "set",
    "display",
    "street",
    "apartment",
    "user",
    "apartment",
    "would",
    "display",
    "none",
    "want",
    "thinking",
    "place",
    "print",
    "statement",
    "within",
    "statement",
    "check",
    "apartment",
    "quars",
    "apartment",
    "key",
    "quars",
    "dictionary",
    "print",
    "line",
    "else",
    "print",
    "street",
    "person",
    "apartment",
    "wo",
    "print",
    "apartment",
    "apartment",
    "apartment",
    "equals",
    "number",
    "100",
    "1",
    "2",
    "3",
    "fake",
    "street",
    "apartment",
    "number",
    "100",
    "challenge",
    "round",
    "user",
    "po",
    "box",
    "let",
    "change",
    "apartment",
    "p",
    "box",
    "string",
    "p",
    "box",
    "number",
    "suppose",
    "add",
    "else",
    "statement",
    "else",
    "po",
    "box",
    "dictionary",
    "quars",
    "let",
    "print",
    "street",
    "copy",
    "line",
    "paste",
    "followed",
    "second",
    "print",
    "statement",
    "quars",
    "doget",
    "po",
    "box",
    "dr",
    "spongebob",
    "squarepants",
    "123",
    "fake",
    "street",
    "box",
    "1001",
    "detroit",
    "michigan",
    "54321",
    "right",
    "everybody",
    "arbitrary",
    "arguments",
    "invoke",
    "function",
    "pass",
    "varying",
    "amount",
    "arguments",
    "set",
    "parameter",
    "args",
    "varying",
    "amount",
    "arguments",
    "quars",
    "varying",
    "amount",
    "keyword",
    "arguments",
    "set",
    "parameters",
    "exercise",
    "well",
    "everybody",
    "arbitrary",
    "arguments",
    "python",
    "hey",
    "everybody",
    "today",
    "got",
    "talk",
    "iterables",
    "python",
    "iterable",
    "category",
    "object",
    "collection",
    "return",
    "elements",
    "one",
    "time",
    "considered",
    "iterable",
    "object",
    "collection",
    "considered",
    "iterable",
    "iterated",
    "loop",
    "example",
    "let",
    "create",
    "list",
    "numbers",
    "numbers",
    "equals",
    "list",
    "add",
    "numbers",
    "1",
    "5",
    "keep",
    "simple",
    "lists",
    "considered",
    "iterable",
    "use",
    "within",
    "loop",
    "context",
    "loop",
    "going",
    "given",
    "element",
    "one",
    "time",
    "element",
    "working",
    "give",
    "temporary",
    "nickname",
    "let",
    "say",
    "number",
    "every",
    "number",
    "iterable",
    "numbers",
    "let",
    "print",
    "number",
    "give",
    "us",
    "1",
    "5",
    "name",
    "current",
    "element",
    "iterable",
    "descriptive",
    "iterating",
    "example",
    "want",
    "rename",
    "current",
    "number",
    "working",
    "something",
    "like",
    "blah",
    "blah",
    "blah",
    "know",
    "would",
    "work",
    "people",
    "looking",
    "code",
    "might",
    "understand",
    "blah",
    "blah",
    "blah",
    "blame",
    "element",
    "given",
    "iterable",
    "name",
    "descriptive",
    "given",
    "might",
    "see",
    "item",
    "every",
    "item",
    "numbers",
    "print",
    "item",
    "also",
    "good",
    "choice",
    "could",
    "even",
    "iterate",
    "backwards",
    "enclosing",
    "iterable",
    "within",
    "reversed",
    "function",
    "take",
    "iterable",
    "numbers",
    "reverse",
    "get",
    "numbers",
    "5",
    "4",
    "3",
    "2",
    "1",
    "would",
    "rather",
    "print",
    "element",
    "new",
    "line",
    "replace",
    "new",
    "line",
    "character",
    "end",
    "print",
    "statements",
    "something",
    "else",
    "print",
    "function",
    "pass",
    "keyword",
    "argument",
    "end",
    "rather",
    "end",
    "line",
    "new",
    "line",
    "character",
    "let",
    "end",
    "space",
    "space",
    "elements",
    "could",
    "replace",
    "something",
    "else",
    "dash",
    "element",
    "append",
    "dash",
    "character",
    "could",
    "even",
    "add",
    "multiple",
    "characters",
    "space",
    "dash",
    "space",
    "choose",
    "tuples",
    "also",
    "iterable",
    "let",
    "convert",
    "list",
    "tupple",
    "enclosing",
    "numbers",
    "within",
    "set",
    "parentheses",
    "longer",
    "want",
    "reversed",
    "every",
    "number",
    "itable",
    "numbers",
    "print",
    "number",
    "get",
    "numbers",
    "1",
    "5",
    "let",
    "cover",
    "sets",
    "create",
    "set",
    "fruit",
    "name",
    "fruits",
    "set",
    "enclose",
    "values",
    "within",
    "set",
    "curly",
    "braces",
    "let",
    "add",
    "string",
    "apple",
    "string",
    "orange",
    "string",
    "banana",
    "string",
    "coconut",
    "loop",
    "let",
    "say",
    "every",
    "fruit",
    "iterable",
    "fruits",
    "print",
    "fruit",
    "would",
    "give",
    "apple",
    "banana",
    "orange",
    "coconut",
    "sets",
    "actually",
    "reversible",
    "attempt",
    "enclose",
    "iterable",
    "fruits",
    "within",
    "reversed",
    "function",
    "happens",
    "type",
    "error",
    "set",
    "object",
    "reversible",
    "sets",
    "ca",
    "rever",
    "verse",
    "let",
    "cover",
    "strings",
    "create",
    "string",
    "name",
    "type",
    "full",
    "name",
    "use",
    "youtube",
    "channel",
    "name",
    "every",
    "character",
    "iterable",
    "name",
    "would",
    "like",
    "print",
    "character",
    "maybe",
    "would",
    "rather",
    "character",
    "end",
    "new",
    "line",
    "set",
    "keyword",
    "argument",
    "end",
    "space",
    "last",
    "dictionaries",
    "complicated",
    "let",
    "name",
    "dictionary",
    "dictionary",
    "dictionaries",
    "enclose",
    "set",
    "krly",
    "braces",
    "kind",
    "like",
    "set",
    "element",
    "key",
    "value",
    "pair",
    "add",
    "key",
    "associated",
    "value",
    "one",
    "key",
    "b",
    "value",
    "two",
    "key",
    "c",
    "value",
    "three",
    "iterate",
    "dictionary",
    "dictionary",
    "going",
    "return",
    "keys",
    "values",
    "test",
    "every",
    "key",
    "iterable",
    "dictionary",
    "let",
    "print",
    "key",
    "would",
    "give",
    "keys",
    "b",
    "c",
    "none",
    "values",
    "1",
    "2",
    "three",
    "need",
    "values",
    "going",
    "follow",
    "iterable",
    "dictionary",
    "use",
    "values",
    "method",
    "return",
    "values",
    "dictionary",
    "iterable",
    "let",
    "rename",
    "key",
    "value",
    "working",
    "values",
    "given",
    "values",
    "1",
    "2",
    "three",
    "need",
    "keys",
    "values",
    "going",
    "use",
    "items",
    "method",
    "given",
    "key",
    "value",
    "make",
    "sure",
    "value",
    "key",
    "separated",
    "comma",
    "let",
    "print",
    "key",
    "followed",
    "value",
    "get",
    "key",
    "value",
    "1",
    "b",
    "2",
    "c",
    "3",
    "reformat",
    "output",
    "however",
    "want",
    "let",
    "use",
    "f",
    "string",
    "add",
    "two",
    "placeholders",
    "let",
    "print",
    "key",
    "equals",
    "value",
    "equals",
    "1",
    "b",
    "2",
    "c",
    "3",
    "okay",
    "everybody",
    "iterables",
    "object",
    "collection",
    "return",
    "elements",
    "one",
    "time",
    "considered",
    "iterable",
    "meaning",
    "object",
    "collection",
    "iterated",
    "using",
    "loop",
    "well",
    "everybody",
    "iterables",
    "python",
    "hello",
    "today",
    "got",
    "talk",
    "membership",
    "operators",
    "python",
    "operators",
    "used",
    "test",
    "whether",
    "value",
    "variable",
    "found",
    "within",
    "sequence",
    "include",
    "limited",
    "strings",
    "lists",
    "topples",
    "sets",
    "dictionaries",
    "example",
    "going",
    "create",
    "word",
    "secret",
    "word",
    "let",
    "say",
    "apple",
    "going",
    "turn",
    "game",
    "user",
    "guess",
    "letter",
    "accept",
    "user",
    "input",
    "guess",
    "letter",
    "secret",
    "word",
    "would",
    "like",
    "check",
    "see",
    "letter",
    "found",
    "word",
    "write",
    "following",
    "statement",
    "letter",
    "word",
    "going",
    "return",
    "boolean",
    "value",
    "true",
    "letter",
    "found",
    "false",
    "letter",
    "found",
    "going",
    "print",
    "following",
    "statement",
    "use",
    "f",
    "string",
    "add",
    "placeholder",
    "insert",
    "letter",
    "else",
    "let",
    "print",
    "use",
    "f",
    "string",
    "letter",
    "found",
    "let",
    "test",
    "guess",
    "letter",
    "secret",
    "word",
    "guess",
    "capital",
    "letters",
    "uppercase",
    "take",
    "note",
    "let",
    "guess",
    "letter",
    "within",
    "word",
    "z",
    "z",
    "found",
    "membership",
    "operator",
    "test",
    "see",
    "value",
    "variable",
    "found",
    "within",
    "sequence",
    "returns",
    "true",
    "returns",
    "false",
    "inverse",
    "could",
    "say",
    "letter",
    "word",
    "would",
    "flip",
    "statements",
    "around",
    "value",
    "variable",
    "found",
    "sequence",
    "returns",
    "true",
    "otherwise",
    "false",
    "opposite",
    "guess",
    "letter",
    "secret",
    "word",
    "e",
    "e",
    "q",
    "q",
    "found",
    "depending",
    "statement",
    "trying",
    "write",
    "use",
    "either",
    "whichever",
    "makes",
    "sense",
    "context",
    "let",
    "go",
    "another",
    "example",
    "searching",
    "value",
    "variable",
    "found",
    "within",
    "string",
    "let",
    "try",
    "set",
    "list",
    "tles",
    "sets",
    "going",
    "behave",
    "similarly",
    "create",
    "set",
    "students",
    "set",
    "need",
    "set",
    "curly",
    "braces",
    "let",
    "add",
    "student",
    "names",
    "spongebob",
    "patrick",
    "sandy",
    "user",
    "type",
    "student",
    "search",
    "accept",
    "user",
    "input",
    "enter",
    "name",
    "student",
    "going",
    "check",
    "student",
    "sequence",
    "students",
    "returns",
    "true",
    "let",
    "print",
    "following",
    "use",
    "f",
    "string",
    "insert",
    "student",
    "student",
    "else",
    "print",
    "use",
    "f",
    "string",
    "insert",
    "student",
    "found",
    "enter",
    "name",
    "student",
    "let",
    "search",
    "spongebob",
    "spongebob",
    "student",
    "enter",
    "name",
    "student",
    "let",
    "attempt",
    "squidward",
    "squidward",
    "found",
    "much",
    "like",
    "first",
    "example",
    "opposite",
    "see",
    "value",
    "variable",
    "sequence",
    "would",
    "switch",
    "statements",
    "around",
    "enter",
    "name",
    "student",
    "sandy",
    "student",
    "sandy",
    "student",
    "enter",
    "name",
    "student",
    "laria",
    "student",
    "laria",
    "found",
    "cover",
    "dictionaries",
    "create",
    "dictionary",
    "grades",
    "student",
    "grades",
    "like",
    "grade",
    "book",
    "let",
    "say",
    "student",
    "sandy",
    "key",
    "value",
    "squidward",
    "key",
    "squidward",
    "value",
    "b",
    "spongebob",
    "also",
    "key",
    "spongebob",
    "grade",
    "c",
    "patrick",
    "patrick",
    "grade",
    "dictionary",
    "grades",
    "search",
    "student",
    "student",
    "equals",
    "input",
    "enter",
    "name",
    "student",
    "check",
    "let",
    "close",
    "student",
    "found",
    "within",
    "grades",
    "print",
    "following",
    "looking",
    "keys",
    "matching",
    "key",
    "find",
    "student",
    "make",
    "f",
    "string",
    "let",
    "display",
    "associated",
    "value",
    "key",
    "student",
    "students",
    "grade",
    "add",
    "placeholder",
    "find",
    "student",
    "get",
    "value",
    "given",
    "key",
    "take",
    "dictionary",
    "grades",
    "index",
    "student",
    "retrieve",
    "value",
    "given",
    "key",
    "find",
    "student",
    "output",
    "following",
    "use",
    "fst",
    "string",
    "student",
    "found",
    "search",
    "student",
    "spongebob",
    "given",
    "grade",
    "given",
    "value",
    "key",
    "searching",
    "let",
    "test",
    "sandy",
    "sand",
    "great",
    "squidward",
    "squidward",
    "great",
    "b",
    "patrick",
    "patrick",
    "great",
    "larry",
    "student",
    "search",
    "well",
    "larry",
    "found",
    "let",
    "go",
    "one",
    "last",
    "example",
    "going",
    "create",
    "variable",
    "email",
    "going",
    "string",
    "type",
    "whatever",
    "email",
    "bro",
    "code",
    "would",
    "like",
    "see",
    "email",
    "valid",
    "contain",
    "period",
    "write",
    "value",
    "character",
    "email",
    "period",
    "email",
    "two",
    "conditions",
    "check",
    "email",
    "check",
    "period",
    "email",
    "valid",
    "email",
    "print",
    "valid",
    "email",
    "else",
    "print",
    "invalid",
    "email",
    "email",
    "valid",
    "email",
    "valid",
    "get",
    "rid",
    "app",
    "invalid",
    "email",
    "get",
    "rid",
    "period",
    "following",
    "gmail",
    "email",
    "also",
    "invalid",
    "example",
    "checking",
    "two",
    "conditions",
    "value",
    "found",
    "within",
    "sequence",
    "value",
    "found",
    "within",
    "sequence",
    "right",
    "everybody",
    "membership",
    "operators",
    "return",
    "boolean",
    "based",
    "whether",
    "value",
    "variable",
    "found",
    "within",
    "sequence",
    "include",
    "limited",
    "strings",
    "lists",
    "tles",
    "sets",
    "dictionaries",
    "well",
    "everybody",
    "membership",
    "operators",
    "python",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "got",
    "explain",
    "list",
    "comprehensions",
    "python",
    "list",
    "comprehension",
    "concise",
    "way",
    "create",
    "lists",
    "python",
    "compact",
    "easier",
    "read",
    "traditional",
    "loops",
    "basically",
    "follow",
    "formula",
    "every",
    "value",
    "something",
    "iterable",
    "meaning",
    "loop",
    "check",
    "condition",
    "expression",
    "let",
    "give",
    "example",
    "using",
    "traditional",
    "loop",
    "able",
    "see",
    "list",
    "comprehension",
    "useful",
    "going",
    "create",
    "list",
    "double",
    "numbers",
    "1",
    "10",
    "doubles",
    "equals",
    "empty",
    "list",
    "using",
    "traditional",
    "loop",
    "say",
    "every",
    "value",
    "let",
    "say",
    "x",
    "range",
    "1",
    "11",
    "remember",
    "range",
    "function",
    "second",
    "number",
    "exclusive",
    "give",
    "numbers",
    "1",
    "10",
    "first",
    "iteration",
    "x",
    "going",
    "1",
    "2",
    "3",
    "way",
    "10",
    "iterate",
    "10",
    "times",
    "iteration",
    "going",
    "take",
    "list",
    "doubles",
    "use",
    "append",
    "method",
    "append",
    "x",
    "iteration",
    "going",
    "value",
    "time",
    "2",
    "print",
    "list",
    "doubles",
    "result",
    "numbers",
    "1",
    "10",
    "doubled",
    "2",
    "4",
    "6",
    "8",
    "10",
    "12",
    "14",
    "16",
    "18",
    "20",
    "lot",
    "write",
    "use",
    "list",
    "comprehension",
    "make",
    "code",
    "compact",
    "easier",
    "read",
    "need",
    "name",
    "list",
    "let",
    "say",
    "doubles",
    "equals",
    "empty",
    "list",
    "within",
    "list",
    "list",
    "follow",
    "formula",
    "expression",
    "value",
    "iterable",
    "optionally",
    "check",
    "condition",
    "exercises",
    "later",
    "topic",
    "begin",
    "every",
    "value",
    "let",
    "say",
    "x",
    "iterable",
    "iterable",
    "going",
    "range",
    "1",
    "10",
    "first",
    "iteration",
    "x",
    "1",
    "second",
    "iteration",
    "x",
    "2",
    "way",
    "10",
    "iteration",
    "would",
    "like",
    "x",
    "value",
    "let",
    "take",
    "x",
    "multiply",
    "two",
    "return",
    "print",
    "list",
    "doubles",
    "numbers",
    "2",
    "4",
    "6",
    "8",
    "10",
    "12",
    "14",
    "16",
    "18",
    "20",
    "every",
    "value",
    "iterable",
    "multiply",
    "two",
    "list",
    "comprehension",
    "concise",
    "way",
    "create",
    "list",
    "python",
    "go",
    "exercises",
    "time",
    "triple",
    "number",
    "create",
    "list",
    "triples",
    "equals",
    "let",
    "say",
    "time",
    "every",
    "range",
    "1",
    "10",
    "write",
    "11",
    "take",
    "multiply",
    "3",
    "print",
    "list",
    "triples",
    "3",
    "6",
    "9",
    "12",
    "15",
    "18",
    "forth",
    "let",
    "square",
    "number",
    "create",
    "list",
    "squares",
    "every",
    "z",
    "range",
    "10",
    "square",
    "number",
    "take",
    "number",
    "multiply",
    "numbers",
    "1",
    "squar",
    "1",
    "4",
    "9",
    "16",
    "15",
    "36",
    "49",
    "64",
    "81",
    "100",
    "10",
    "10",
    "100",
    "going",
    "work",
    "strings",
    "create",
    "list",
    "fruits",
    "equals",
    "think",
    "fruit",
    "going",
    "strings",
    "apple",
    "orange",
    "banana",
    "coconut",
    "going",
    "take",
    "string",
    "list",
    "make",
    "uppercase",
    "could",
    "assign",
    "new",
    "list",
    "uppercase",
    "fruits",
    "simply",
    "reassign",
    "keep",
    "simple",
    "reassign",
    "following",
    "formula",
    "like",
    "begin",
    "four",
    "value",
    "iterable",
    "portion",
    "every",
    "fruit",
    "iterable",
    "fruits",
    "want",
    "well",
    "let",
    "take",
    "fruit",
    "take",
    "fruit",
    "use",
    "upper",
    "method",
    "make",
    "uppercase",
    "going",
    "print",
    "list",
    "fruits",
    "string",
    "list",
    "uppercase",
    "could",
    "even",
    "cut",
    "one",
    "steps",
    "iterable",
    "fruits",
    "place",
    "list",
    "work",
    "although",
    "find",
    "little",
    "difficult",
    "read",
    "take",
    "either",
    "option",
    "instead",
    "making",
    "string",
    "uppercase",
    "take",
    "first",
    "letter",
    "string",
    "put",
    "within",
    "new",
    "list",
    "let",
    "take",
    "fruit",
    "index",
    "zero",
    "give",
    "us",
    "first",
    "letter",
    "place",
    "within",
    "new",
    "list",
    "fruit",
    "chars",
    "meaning",
    "characters",
    "result",
    "b",
    "c",
    "every",
    "fruit",
    "list",
    "fruits",
    "return",
    "first",
    "character",
    "string",
    "b",
    "c",
    "work",
    "conditions",
    "create",
    "list",
    "numbers",
    "negative",
    "positive",
    "numbers",
    "equals",
    "let",
    "say",
    "one",
    "3",
    "5",
    "create",
    "list",
    "comprehension",
    "create",
    "new",
    "list",
    "numbers",
    "positive",
    "new",
    "list",
    "positive",
    "nums",
    "equals",
    "write",
    "list",
    "comprehension",
    "every",
    "let",
    "say",
    "num",
    "num",
    "numbers",
    "write",
    "condition",
    "return",
    "number",
    "num",
    "greater",
    "equal",
    "zero",
    "need",
    "expression",
    "modifying",
    "value",
    "return",
    "value",
    "num",
    "exercise",
    "focused",
    "condition",
    "rather",
    "expression",
    "value",
    "num",
    "meets",
    "condition",
    "simply",
    "return",
    "place",
    "within",
    "new",
    "list",
    "let",
    "print",
    "list",
    "positive",
    "numbers",
    "135",
    "let",
    "negative",
    "numbers",
    "copy",
    "change",
    "things",
    "around",
    "list",
    "negative",
    "numbers",
    "negative",
    "nums",
    "every",
    "num",
    "numbers",
    "check",
    "condition",
    "check",
    "see",
    "num",
    "less",
    "zero",
    "return",
    "number",
    "let",
    "print",
    "list",
    "negative",
    "numbers",
    "let",
    "check",
    "see",
    "even",
    "numbers",
    "even",
    "nums",
    "equals",
    "every",
    "num",
    "numbers",
    "check",
    "see",
    "num",
    "divisible",
    "two",
    "modulus",
    "operator",
    "followed",
    "two",
    "modulus",
    "operator",
    "give",
    "remainder",
    "division",
    "number",
    "even",
    "number",
    "modulus",
    "2",
    "equal",
    "zer",
    "even",
    "going",
    "equal",
    "zero",
    "odd",
    "going",
    "one",
    "modifying",
    "value",
    "going",
    "return",
    "number",
    "list",
    "even",
    "numbers",
    "let",
    "add",
    "one",
    "value",
    "let",
    "add",
    "positive",
    "8",
    "positive",
    "8",
    "maybe",
    "add",
    "one",
    "okay",
    "let",
    "find",
    "odd",
    "numbers",
    "let",
    "copy",
    "line",
    "code",
    "replace",
    "even",
    "numbers",
    "odd",
    "numbers",
    "num",
    "modulus",
    "2",
    "equal",
    "one",
    "means",
    "number",
    "divide",
    "two",
    "evenly",
    "print",
    "odd",
    "numbers",
    "1",
    "3",
    "57",
    "numbers",
    "odd",
    "last",
    "exercise",
    "create",
    "list",
    "grades",
    "create",
    "new",
    "list",
    "grades",
    "considered",
    "passing",
    "meaning",
    "scored",
    "60",
    "let",
    "say",
    "one",
    "student",
    "grade",
    "85",
    "another",
    "42",
    "79",
    "90",
    "56",
    "61",
    "let",
    "say",
    "say",
    "30",
    "create",
    "new",
    "list",
    "passing",
    "grades",
    "equals",
    "follow",
    "formula",
    "every",
    "grade",
    "grades",
    "check",
    "condition",
    "grade",
    "greater",
    "equal",
    "60",
    "return",
    "current",
    "grade",
    "let",
    "print",
    "list",
    "passing",
    "grades",
    "give",
    "us",
    "85",
    "79",
    "90",
    "61",
    "grades",
    "greater",
    "equal",
    "60",
    "right",
    "everybody",
    "list",
    "comprehension",
    "concise",
    "way",
    "create",
    "lists",
    "python",
    "compact",
    "easier",
    "read",
    "traditional",
    "loops",
    "remember",
    "every",
    "value",
    "iterable",
    "optionally",
    "check",
    "condition",
    "write",
    "expression",
    "modify",
    "value",
    "choose",
    "return",
    "something",
    "right",
    "everybody",
    "list",
    "comprehensions",
    "python",
    "hey",
    "everybody",
    "today",
    "going",
    "explain",
    "match",
    "case",
    "statements",
    "python",
    "familiar",
    "programming",
    "languages",
    "also",
    "known",
    "switch",
    "match",
    "case",
    "statements",
    "alternatives",
    "using",
    "many",
    "lf",
    "statements",
    "execute",
    "code",
    "value",
    "matches",
    "case",
    "benefits",
    "using",
    "match",
    "case",
    "statement",
    "cleaner",
    "syntax",
    "readable",
    "sample",
    "program",
    "function",
    "one",
    "parameter",
    "day",
    "day",
    "number",
    "ideally",
    "number",
    "1",
    "7",
    "depending",
    "number",
    "return",
    "string",
    "corresponding",
    "day",
    "week",
    "day",
    "equals",
    "1",
    "sunday",
    "two",
    "monday",
    "way",
    "7",
    "saturday",
    "else",
    "clause",
    "pass",
    "something",
    "valid",
    "like",
    "pizza",
    "pizza",
    "day",
    "really",
    "valid",
    "day",
    "cleaner",
    "readable",
    "alternative",
    "use",
    "match",
    "case",
    "statement",
    "instead",
    "many",
    "elif",
    "statements",
    "going",
    "take",
    "many",
    "elif",
    "statements",
    "enclose",
    "within",
    "match",
    "case",
    "match",
    "case",
    "case",
    "going",
    "value",
    "examining",
    "case",
    "day",
    "colon",
    "going",
    "examine",
    "value",
    "day",
    "matching",
    "cases",
    "going",
    "replace",
    "day",
    "equals",
    "following",
    "simply",
    "case",
    "let",
    "statements",
    "else",
    "clause",
    "instead",
    "going",
    "case",
    "underscore",
    "underscore",
    "match",
    "case",
    "statement",
    "wild",
    "card",
    "perform",
    "case",
    "matching",
    "cases",
    "case",
    "would",
    "function",
    "else",
    "statement",
    "working",
    "pass",
    "one",
    "return",
    "day",
    "week",
    "would",
    "get",
    "sunday",
    "two",
    "would",
    "monday",
    "3",
    "tuesday",
    "7",
    "saturday",
    "let",
    "try",
    "day",
    "pizza",
    "valid",
    "day",
    "match",
    "case",
    "statement",
    "alternative",
    "using",
    "many",
    "l",
    "statements",
    "find",
    "much",
    "easier",
    "read",
    "many",
    "l",
    "statements",
    "would",
    "technically",
    "function",
    "let",
    "go",
    "second",
    "example",
    "create",
    "function",
    "weekend",
    "pass",
    "day",
    "time",
    "day",
    "going",
    "string",
    "monday",
    "value",
    "case",
    "instead",
    "number",
    "going",
    "string",
    "day",
    "matches",
    "case",
    "sunday",
    "let",
    "return",
    "boolean",
    "true",
    "checking",
    "see",
    "weekend",
    "day",
    "equal",
    "case",
    "monday",
    "return",
    "false",
    "let",
    "days",
    "going",
    "fast",
    "forward",
    "video",
    "call",
    "function",
    "weekend",
    "pass",
    "day",
    "week",
    "monday",
    "sunday",
    "weekend",
    "true",
    "monday",
    "false",
    "saturday",
    "true",
    "wild",
    "card",
    "case",
    "matches",
    "pizza",
    "day",
    "weekend",
    "false",
    "way",
    "modify",
    "match",
    "case",
    "tend",
    "repeating",
    "lot",
    "days",
    "monday",
    "friday",
    "return",
    "false",
    "going",
    "use",
    "logical",
    "operator",
    "represented",
    "vertical",
    "bar",
    "case",
    "saturday",
    "sunday",
    "return",
    "true",
    "case",
    "monday",
    "tuesday",
    "get",
    "rid",
    "wednesday",
    "thursday",
    "friday",
    "return",
    "false",
    "keep",
    "wild",
    "card",
    "case",
    "saturday",
    "part",
    "weekend",
    "true",
    "monday",
    "false",
    "sunday",
    "true",
    "friday",
    "false",
    "pizza",
    "wild",
    "card",
    "case",
    "gives",
    "us",
    "false",
    "right",
    "everybody",
    "match",
    "case",
    "statements",
    "similar",
    "switches",
    "programming",
    "languages",
    "alternative",
    "using",
    "many",
    "lf",
    "statements",
    "execute",
    "code",
    "value",
    "matches",
    "case",
    "benefits",
    "code",
    "cleaner",
    "syntax",
    "readable",
    "well",
    "everybody",
    "match",
    "case",
    "statements",
    "python",
    "hello",
    "friends",
    "today",
    "going",
    "explain",
    "modules",
    "module",
    "python",
    "file",
    "containing",
    "code",
    "want",
    "include",
    "program",
    "use",
    "import",
    "keyword",
    "include",
    "module",
    "use",
    "modules",
    "create",
    "sometimes",
    "useful",
    "break",
    "large",
    "program",
    "reusable",
    "separate",
    "files",
    "list",
    "modules",
    "found",
    "within",
    "standard",
    "python",
    "library",
    "use",
    "help",
    "function",
    "pass",
    "word",
    "modules",
    "would",
    "need",
    "print",
    "many",
    "different",
    "modules",
    "available",
    "may",
    "recognize",
    "would",
    "math",
    "string",
    "time",
    "one",
    "favorite",
    "names",
    "module",
    "pickle",
    "module",
    "unfortunately",
    "anything",
    "pickles",
    "used",
    "serialization",
    "list",
    "different",
    "variables",
    "functions",
    "found",
    "within",
    "module",
    "place",
    "name",
    "module",
    "within",
    "help",
    "function",
    "example",
    "math",
    "module",
    "different",
    "variables",
    "would",
    "access",
    "different",
    "functions",
    "include",
    "module",
    "would",
    "type",
    "import",
    "name",
    "module",
    "example",
    "math",
    "access",
    "everything",
    "found",
    "within",
    "math",
    "module",
    "including",
    "variables",
    "functions",
    "access",
    "variables",
    "functions",
    "would",
    "normally",
    "type",
    "name",
    "module",
    "dot",
    "name",
    "variable",
    "function",
    "pi",
    "let",
    "print",
    "pi",
    "math",
    "module",
    "change",
    "another",
    "way",
    "import",
    "type",
    "import",
    "name",
    "module",
    "give",
    "module",
    "nickname",
    "alias",
    "whatever",
    "think",
    "short",
    "math",
    "would",
    "longer",
    "refer",
    "module",
    "math",
    "would",
    "refer",
    "alias",
    "using",
    "alias",
    "would",
    "reduce",
    "typing",
    "use",
    "long",
    "module",
    "name",
    "another",
    "way",
    "import",
    "import",
    "use",
    "name",
    "module",
    "import",
    "something",
    "specific",
    "pi",
    "instance",
    "would",
    "longer",
    "need",
    "module",
    "name",
    "math",
    "import",
    "pi",
    "pi",
    "would",
    "included",
    "within",
    "namespace",
    "however",
    "tend",
    "use",
    "import",
    "much",
    "possible",
    "could",
    "name",
    "conflicts",
    "example",
    "let",
    "say",
    "math",
    "import",
    "e",
    "e",
    "exponential",
    "constant",
    "e",
    "create",
    "program",
    "four",
    "variables",
    "named",
    "b",
    "c",
    "1",
    "b",
    "2",
    "c",
    "3",
    "4",
    "going",
    "print",
    "e",
    "math",
    "module",
    "power",
    "would",
    "give",
    "let",
    "b",
    "c",
    "e",
    "power",
    "b",
    "e",
    "power",
    "c",
    "e",
    "power",
    "results",
    "let",
    "say",
    "different",
    "variable",
    "e",
    "e",
    "five",
    "print",
    "e",
    "power",
    "e",
    "imported",
    "e",
    "math",
    "module",
    "declared",
    "variables",
    "technically",
    "done",
    "created",
    "another",
    "version",
    "e",
    "end",
    "using",
    "second",
    "version",
    "rather",
    "version",
    "imported",
    "math",
    "module",
    "results",
    "different",
    "possible",
    "may",
    "realize",
    "like",
    "explicit",
    "going",
    "import",
    "math",
    "using",
    "variable",
    "function",
    "module",
    "much",
    "prefer",
    "prefix",
    "variable",
    "name",
    "function",
    "name",
    "module",
    "math",
    "e",
    "power",
    "power",
    "b",
    "power",
    "c",
    "power",
    "math",
    "e",
    "power",
    "variable",
    "e",
    "results",
    "expected",
    "create",
    "module",
    "going",
    "right",
    "click",
    "project",
    "folder",
    "go",
    "new",
    "python",
    "file",
    "think",
    "module",
    "name",
    "maybe",
    "example",
    "click",
    "python",
    "file",
    "two",
    "tabs",
    "main",
    "example",
    "declare",
    "whatever",
    "would",
    "like",
    "within",
    "module",
    "let",
    "create",
    "variable",
    "pi",
    "pi",
    "equals",
    "functions",
    "let",
    "create",
    "function",
    "square",
    "argument",
    "passed",
    "define",
    "square",
    "accept",
    "argument",
    "name",
    "x",
    "return",
    "x",
    "two",
    "let",
    "define",
    "cube",
    "function",
    "accept",
    "one",
    "argument",
    "return",
    "x",
    "3",
    "maybe",
    "circumference",
    "function",
    "define",
    "circumference",
    "accept",
    "radius",
    "return",
    "2",
    "pi",
    "radius",
    "area",
    "function",
    "calculate",
    "area",
    "circle",
    "accept",
    "radius",
    "argument",
    "return",
    "pi",
    "radius",
    "power",
    "2",
    "right",
    "example",
    "module",
    "within",
    "main",
    "python",
    "program",
    "let",
    "import",
    "name",
    "module",
    "named",
    "example",
    "access",
    "everything",
    "within",
    "module",
    "going",
    "declare",
    "variable",
    "result",
    "set",
    "name",
    "module",
    "pi",
    "print",
    "result",
    "let",
    "utilize",
    "square",
    "function",
    "result",
    "equals",
    "example",
    "square",
    "let",
    "square",
    "three",
    "n",
    "let",
    "use",
    "cube",
    "function",
    "would",
    "27",
    "circumference",
    "would",
    "give",
    "area",
    "would",
    "create",
    "module",
    "useful",
    "times",
    "separate",
    "program",
    "individual",
    "files",
    "right",
    "everybody",
    "conclusion",
    "module",
    "file",
    "containing",
    "code",
    "want",
    "include",
    "program",
    "use",
    "import",
    "include",
    "module",
    "use",
    "modules",
    "create",
    "need",
    "list",
    "modules",
    "available",
    "use",
    "help",
    "function",
    "pass",
    "word",
    "modules",
    "well",
    "everybody",
    "get",
    "started",
    "modules",
    "python",
    "hey",
    "friends",
    "today",
    "going",
    "explain",
    "variable",
    "scope",
    "scope",
    "resolution",
    "variable",
    "scope",
    "variable",
    "visible",
    "accessible",
    "scope",
    "resolution",
    "using",
    "variable",
    "certain",
    "order",
    "known",
    "lb",
    "rule",
    "locate",
    "variable",
    "local",
    "enclosed",
    "global",
    "get",
    "momentarily",
    "let",
    "begin",
    "variable",
    "scope",
    "two",
    "functions",
    "function",
    "one",
    "function",
    "two",
    "within",
    "function",
    "1",
    "equal",
    "1",
    "print",
    "within",
    "function",
    "2",
    "b",
    "equal",
    "2",
    "print",
    "b",
    "invoke",
    "functions",
    "let",
    "invoke",
    "function",
    "one",
    "function",
    "two",
    "would",
    "print",
    "one",
    "two",
    "variables",
    "declared",
    "within",
    "function",
    "local",
    "scope",
    "variable",
    "local",
    "function",
    "one",
    "variable",
    "b",
    "local",
    "function",
    "2",
    "within",
    "function",
    "one",
    "print",
    "b",
    "function",
    "two",
    "print",
    "would",
    "run",
    "name",
    "error",
    "name",
    "b",
    "defined",
    "thing",
    "would",
    "apply",
    "functions",
    "ca",
    "see",
    "inside",
    "functions",
    "imagine",
    "function",
    "one",
    "house",
    "see",
    "everything",
    "going",
    "inside",
    "house",
    "function",
    "two",
    "neighbor",
    "house",
    "ca",
    "see",
    "going",
    "inside",
    "neighbor",
    "house",
    "idea",
    "b",
    "function",
    "2",
    "function",
    "2",
    "idea",
    "variable",
    "scope",
    "comes",
    "variable",
    "visible",
    "accessible",
    "functions",
    "ca",
    "see",
    "inside",
    "functions",
    "see",
    "inside",
    "function",
    "sometimes",
    "pass",
    "arguments",
    "functions",
    "functions",
    "aware",
    "using",
    "concept",
    "could",
    "create",
    "different",
    "versions",
    "variable",
    "let",
    "rename",
    "x",
    "b",
    "x",
    "well",
    "print",
    "x",
    "two",
    "different",
    "versions",
    "x",
    "local",
    "version",
    "x",
    "found",
    "within",
    "function",
    "one",
    "local",
    "version",
    "x",
    "found",
    "within",
    "function",
    "2",
    "whenever",
    "utilize",
    "variable",
    "first",
    "look",
    "see",
    "local",
    "instance",
    "variable",
    "would",
    "move",
    "enclosed",
    "scope",
    "enclosed",
    "scope",
    "one",
    "example",
    "function",
    "declared",
    "within",
    "another",
    "function",
    "going",
    "place",
    "function",
    "two",
    "within",
    "function",
    "one",
    "allowed",
    "python",
    "advanced",
    "concept",
    "cover",
    "future",
    "going",
    "eliminate",
    "print",
    "statement",
    "let",
    "get",
    "rid",
    "function",
    "two",
    "end",
    "function",
    "one",
    "invoke",
    "function",
    "two",
    "like",
    "said",
    "pretty",
    "complex",
    "wo",
    "using",
    "much",
    "later",
    "within",
    "function",
    "two",
    "print",
    "x",
    "would",
    "use",
    "local",
    "version",
    "x",
    "equals",
    "2",
    "eliminate",
    "variable",
    "declaration",
    "would",
    "use",
    "enclosed",
    "version",
    "instead",
    "x",
    "equals",
    "1",
    "order",
    "operations",
    "use",
    "local",
    "variables",
    "first",
    "enclosed",
    "variables",
    "printing",
    "x",
    "within",
    "function",
    "2",
    "since",
    "x",
    "found",
    "within",
    "local",
    "scope",
    "would",
    "use",
    "x",
    "within",
    "enclosed",
    "scope",
    "like",
    "said",
    "advanced",
    "topic",
    "least",
    "aware",
    "let",
    "move",
    "global",
    "scope",
    "global",
    "meaning",
    "outside",
    "function",
    "eliminate",
    "variable",
    "declarations",
    "within",
    "function",
    "one",
    "printing",
    "x",
    "within",
    "function",
    "two",
    "also",
    "printing",
    "x",
    "declare",
    "global",
    "version",
    "x",
    "x",
    "equal",
    "3",
    "x",
    "outside",
    "functions",
    "run",
    "program",
    "printing",
    "three",
    "twice",
    "function",
    "one",
    "function",
    "2",
    "longer",
    "local",
    "version",
    "x",
    "functions",
    "would",
    "end",
    "end",
    "using",
    "local",
    "versions",
    "instead",
    "function",
    "one",
    "prints",
    "one",
    "function",
    "two",
    "prints",
    "two",
    "local",
    "version",
    "well",
    "enclosed",
    "version",
    "would",
    "move",
    "global",
    "version",
    "x",
    "equal",
    "3",
    "last",
    "order",
    "built",
    "think",
    "though",
    "math",
    "import",
    "e",
    "e",
    "exponential",
    "constant",
    "going",
    "print",
    "e",
    "e",
    "e",
    "built",
    "create",
    "function",
    "print",
    "e",
    "define",
    "function",
    "one",
    "printing",
    "e",
    "invoke",
    "invoke",
    "function",
    "one",
    "set",
    "e",
    "different",
    "value",
    "like",
    "three",
    "technically",
    "creating",
    "two",
    "different",
    "versions",
    "e",
    "variables",
    "share",
    "name",
    "long",
    "within",
    "different",
    "scope",
    "version",
    "e",
    "global",
    "version",
    "e",
    "print",
    "e",
    "would",
    "print",
    "global",
    "version",
    "using",
    "lb",
    "order",
    "would",
    "first",
    "look",
    "local",
    "version",
    "e",
    "enclosed",
    "version",
    "global",
    "one",
    "lastly",
    "right",
    "everybody",
    "conclusion",
    "variable",
    "scope",
    "variable",
    "visible",
    "accessible",
    "python",
    "scope",
    "resolution",
    "order",
    "lb",
    "using",
    "variable",
    "first",
    "look",
    "local",
    "scope",
    "variable",
    "find",
    "variable",
    "local",
    "scope",
    "move",
    "enclosed",
    "scope",
    "global",
    "practice",
    "future",
    "well",
    "everybody",
    "variable",
    "scope",
    "scope",
    "resolution",
    "python",
    "hey",
    "everybody",
    "today",
    "got",
    "talk",
    "statement",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "see",
    "statement",
    "usually",
    "followed",
    "call",
    "function",
    "named",
    "main",
    "something",
    "similar",
    "majority",
    "driving",
    "code",
    "behind",
    "behind",
    "program",
    "usually",
    "found",
    "within",
    "sort",
    "main",
    "method",
    "see",
    "statement",
    "basically",
    "speaking",
    "means",
    "script",
    "imported",
    "run",
    "standalone",
    "functions",
    "classes",
    "module",
    "reused",
    "programs",
    "without",
    "main",
    "block",
    "code",
    "running",
    "sometimes",
    "would",
    "like",
    "functionality",
    "program",
    "without",
    "executing",
    "main",
    "body",
    "code",
    "good",
    "example",
    "could",
    "library",
    "python",
    "library",
    "would",
    "like",
    "import",
    "useful",
    "functions",
    "math",
    "module",
    "run",
    "library",
    "directly",
    "instead",
    "importing",
    "could",
    "instead",
    "display",
    "help",
    "page",
    "importing",
    "library",
    "necessarily",
    "want",
    "display",
    "help",
    "page",
    "running",
    "directly",
    "many",
    "python",
    "scripts",
    "see",
    "statement",
    "thunder",
    "name",
    "equal",
    "main",
    "running",
    "program",
    "directly",
    "example",
    "going",
    "delete",
    "main",
    "python",
    "script",
    "sure",
    "recreate",
    "end",
    "topic",
    "case",
    "forget",
    "mention",
    "create",
    "two",
    "scripts",
    "go",
    "file",
    "new",
    "python",
    "file",
    "script",
    "one",
    "file",
    "new",
    "python",
    "file",
    "script",
    "2",
    "add",
    "new",
    "run",
    "configurations",
    "script",
    "one",
    "script",
    "2",
    "go",
    "top",
    "go",
    "run",
    "edit",
    "configurations",
    "add",
    "new",
    "run",
    "configuration",
    "select",
    "python",
    "select",
    "new",
    "script",
    "path",
    "script",
    "one",
    "okay",
    "apply",
    "script",
    "2",
    "add",
    "python",
    "select",
    "script",
    "path",
    "script",
    "2",
    "okay",
    "apply",
    "okay",
    "using",
    "dropdown",
    "menu",
    "select",
    "run",
    "configuration",
    "would",
    "like",
    "would",
    "like",
    "run",
    "main",
    "python",
    "file",
    "deleted",
    "want",
    "run",
    "script",
    "one",
    "script",
    "two",
    "time",
    "select",
    "script",
    "one",
    "within",
    "script",
    "one",
    "print",
    "call",
    "dur",
    "function",
    "dur",
    "meaning",
    "directory",
    "python",
    "attributes",
    "familiar",
    "programming",
    "think",
    "attribute",
    "variable",
    "dunder",
    "name",
    "special",
    "type",
    "variable",
    "dunder",
    "meaning",
    "double",
    "underscore",
    "print",
    "contained",
    "within",
    "dunder",
    "name",
    "would",
    "receive",
    "string",
    "dunder",
    "main",
    "script",
    "may",
    "see",
    "statement",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "usually",
    "call",
    "function",
    "named",
    "main",
    "start",
    "program",
    "going",
    "undo",
    "let",
    "import",
    "script",
    "2",
    "script",
    "2",
    "import",
    "everything",
    "asterisk",
    "means",
    "everything",
    "within",
    "script",
    "script",
    "2",
    "print",
    "dunder",
    "name",
    "see",
    "within",
    "running",
    "script",
    "one",
    "within",
    "script",
    "two",
    "dunder",
    "name",
    "equal",
    "string",
    "script",
    "two",
    "name",
    "python",
    "script",
    "however",
    "within",
    "script",
    "one",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "means",
    "running",
    "script",
    "one",
    "directly",
    "let",
    "delete",
    "import",
    "go",
    "script",
    "2",
    "import",
    "script",
    "one",
    "script",
    "one",
    "import",
    "asterisk",
    "meaning",
    "going",
    "change",
    "run",
    "configuration",
    "script",
    "one",
    "script",
    "2",
    "running",
    "script",
    "2",
    "directly",
    "dunder",
    "name",
    "within",
    "script",
    "one",
    "name",
    "python",
    "script",
    "script",
    "one",
    "dunder",
    "name",
    "within",
    "script",
    "2",
    "dunder",
    "main",
    "adding",
    "statement",
    "dunder",
    "name",
    "equal",
    "dunder",
    "main",
    "check",
    "see",
    "file",
    "run",
    "directly",
    "dunder",
    "name",
    "equals",
    "dunder",
    "main",
    "call",
    "function",
    "main",
    "contain",
    "main",
    "body",
    "program",
    "need",
    "define",
    "function",
    "define",
    "main",
    "main",
    "function",
    "contain",
    "majority",
    "python",
    "code",
    "anything",
    "already",
    "within",
    "function",
    "let",
    "print",
    "script",
    "one",
    "define",
    "another",
    "function",
    "favorite",
    "food",
    "one",
    "parameter",
    "food",
    "let",
    "print",
    "following",
    "message",
    "use",
    "f",
    "string",
    "favorite",
    "food",
    "add",
    "placeholder",
    "add",
    "parameter",
    "food",
    "within",
    "main",
    "function",
    "let",
    "call",
    "favorite",
    "food",
    "function",
    "pass",
    "favorite",
    "food",
    "string",
    "type",
    "pizza",
    "let",
    "print",
    "word",
    "goodbye",
    "going",
    "run",
    "script",
    "one",
    "run",
    "result",
    "top",
    "code",
    "within",
    "functions",
    "skip",
    "calling",
    "quite",
    "yet",
    "first",
    "thing",
    "program",
    "check",
    "statement",
    "dunder",
    "name",
    "equal",
    "dunder",
    "running",
    "program",
    "directly",
    "running",
    "script",
    "one",
    "call",
    "main",
    "method",
    "start",
    "program",
    "print",
    "script",
    "one",
    "favorite",
    "food",
    "pizza",
    "goodbye",
    "going",
    "go",
    "script",
    "two",
    "delete",
    "print",
    "statement",
    "change",
    "run",
    "configuration",
    "script",
    "2",
    "run",
    "nothing",
    "happen",
    "good",
    "missing",
    "statement",
    "name",
    "equal",
    "main",
    "delete",
    "main",
    "function",
    "would",
    "happen",
    "importing",
    "script",
    "one",
    "running",
    "script",
    "two",
    "script",
    "one",
    "favorite",
    "food",
    "pizza",
    "goodbye",
    "want",
    "code",
    "execute",
    "running",
    "directly",
    "statement",
    "name",
    "equal",
    "main",
    "want",
    "run",
    "code",
    "running",
    "directly",
    "within",
    "script",
    "2",
    "define",
    "function",
    "favorite",
    "drink",
    "one",
    "parameter",
    "drink",
    "print",
    "use",
    "f",
    "string",
    "favorite",
    "drink",
    "add",
    "placeholder",
    "add",
    "parameter",
    "drink",
    "let",
    "print",
    "message",
    "script",
    "2",
    "call",
    "script",
    "one",
    "favorite",
    "food",
    "function",
    "pass",
    "favorite",
    "food",
    "time",
    "say",
    "sushi",
    "let",
    "call",
    "favorite",
    "drink",
    "function",
    "favorite",
    "drink",
    "pass",
    "coffee",
    "print",
    "goodbye",
    "okay",
    "running",
    "script",
    "2",
    "script",
    "2",
    "favorite",
    "food",
    "sushi",
    "favorite",
    "drink",
    "coffee",
    "goodbye",
    "running",
    "script",
    "importing",
    "functionality",
    "favorite",
    "food",
    "function",
    "script",
    "one",
    "sometimes",
    "another",
    "python",
    "script",
    "want",
    "borrow",
    "something",
    "want",
    "run",
    "main",
    "body",
    "code",
    "directly",
    "want",
    "borrow",
    "function",
    "script",
    "one",
    "script",
    "2",
    "run",
    "standalone",
    "program",
    "ca",
    "import",
    "without",
    "body",
    "code",
    "running",
    "add",
    "statement",
    "thunder",
    "name",
    "equal",
    "string",
    "thunder",
    "main",
    "running",
    "program",
    "directly",
    "execute",
    "code",
    "let",
    "call",
    "function",
    "main",
    "define",
    "main",
    "place",
    "main",
    "body",
    "code",
    "within",
    "run",
    "script",
    "2",
    "message",
    "adding",
    "statement",
    "name",
    "equal",
    "main",
    "script",
    "run",
    "standalone",
    "program",
    "imported",
    "practical",
    "example",
    "could",
    "python",
    "library",
    "import",
    "library",
    "functionality",
    "run",
    "library",
    "directly",
    "could",
    "instead",
    "display",
    "help",
    "page",
    "good",
    "practice",
    "include",
    "dunder",
    "name",
    "equals",
    "dunder",
    "main",
    "makes",
    "code",
    "modular",
    "helps",
    "readability",
    "leaves",
    "global",
    "variables",
    "avoid",
    "unintended",
    "execution",
    "well",
    "everybody",
    "purpose",
    "dunder",
    "name",
    "equals",
    "dunder",
    "main",
    "python",
    "hey",
    "going",
    "everybody",
    "video",
    "going",
    "create",
    "simple",
    "banking",
    "program",
    "using",
    "python",
    "meant",
    "exercise",
    "get",
    "us",
    "used",
    "working",
    "functions",
    "creating",
    "project",
    "like",
    "divide",
    "project",
    "smaller",
    "sections",
    "handle",
    "one",
    "time",
    "declaring",
    "functions",
    "need",
    "first",
    "banking",
    "program",
    "need",
    "show",
    "user",
    "balance",
    "define",
    "function",
    "show",
    "balance",
    "time",
    "write",
    "pass",
    "placeholder",
    "need",
    "make",
    "deposit",
    "define",
    "deposit",
    "make",
    "withdrawal",
    "define",
    "withdraw",
    "near",
    "end",
    "project",
    "creating",
    "main",
    "function",
    "placing",
    "main",
    "body",
    "code",
    "within",
    "handle",
    "near",
    "end",
    "contain",
    "everything",
    "three",
    "functions",
    "banking",
    "program",
    "need",
    "show",
    "balance",
    "make",
    "deposit",
    "make",
    "withdrawal",
    "variables",
    "need",
    "well",
    "need",
    "balance",
    "set",
    "zero",
    "initially",
    "also",
    "create",
    "boolean",
    "running",
    "true",
    "time",
    "said",
    "running",
    "false",
    "exit",
    "program",
    "majority",
    "code",
    "place",
    "within",
    "loop",
    "running",
    "check",
    "see",
    "equal",
    "true",
    "since",
    "boolean",
    "necessary",
    "say",
    "running",
    "running",
    "becomes",
    "false",
    "false",
    "exit",
    "loop",
    "within",
    "loop",
    "print",
    "sort",
    "welcome",
    "message",
    "let",
    "print",
    "banking",
    "program",
    "list",
    "options",
    "let",
    "print",
    "one",
    "show",
    "balance",
    "two",
    "deposit",
    "three",
    "withdraw",
    "four",
    "exit",
    "afterwards",
    "set",
    "choice",
    "variable",
    "equal",
    "user",
    "input",
    "input",
    "enter",
    "choice",
    "4",
    "encouraging",
    "user",
    "type",
    "number",
    "1",
    "4",
    "select",
    "option",
    "want",
    "show",
    "balance",
    "make",
    "deposit",
    "make",
    "withdrawal",
    "exit",
    "add",
    "else",
    "statements",
    "let",
    "check",
    "see",
    "user",
    "choice",
    "equal",
    "one",
    "string",
    "one",
    "user",
    "input",
    "string",
    "data",
    "type",
    "unless",
    "typ",
    "cast",
    "something",
    "else",
    "choice",
    "equal",
    "one",
    "call",
    "function",
    "show",
    "balance",
    "else",
    "choice",
    "equal",
    "two",
    "make",
    "deposit",
    "calling",
    "deposit",
    "function",
    "else",
    "choice",
    "equal",
    "three",
    "call",
    "withdraw",
    "function",
    "else",
    "choice",
    "equal",
    "4",
    "means",
    "would",
    "like",
    "exit",
    "need",
    "exit",
    "loop",
    "setting",
    "variable",
    "running",
    "program",
    "running",
    "equal",
    "false",
    "exit",
    "somebody",
    "types",
    "input",
    "valid",
    "handle",
    "else",
    "statement",
    "else",
    "let",
    "print",
    "valid",
    "choice",
    "okay",
    "let",
    "see",
    "working",
    "currently",
    "test",
    "everything",
    "written",
    "anything",
    "within",
    "functions",
    "yet",
    "show",
    "balance",
    "deposit",
    "withdraw",
    "type",
    "1",
    "2",
    "3",
    "exit",
    "processed",
    "finished",
    "exit",
    "code",
    "zero",
    "ca",
    "exit",
    "program",
    "select",
    "option",
    "four",
    "else",
    "statement",
    "execute",
    "type",
    "something",
    "besides",
    "numbers",
    "1",
    "4",
    "options",
    "left",
    "test",
    "enter",
    "choice",
    "1",
    "four",
    "uh",
    "going",
    "type",
    "word",
    "poo",
    "valid",
    "choice",
    "know",
    "l",
    "statement",
    "working",
    "exit",
    "loop",
    "let",
    "print",
    "message",
    "says",
    "thank",
    "nice",
    "day",
    "type",
    "exit",
    "exit",
    "program",
    "thank",
    "nice",
    "day",
    "let",
    "make",
    "h",
    "capital",
    "work",
    "functions",
    "beginning",
    "show",
    "balance",
    "currently",
    "two",
    "variables",
    "global",
    "need",
    "pass",
    "parameter",
    "functions",
    "quite",
    "yet",
    "enclosing",
    "code",
    "within",
    "main",
    "function",
    "handle",
    "later",
    "though",
    "show",
    "balance",
    "going",
    "print",
    "use",
    "f",
    "string",
    "balance",
    "add",
    "dollar",
    "sign",
    "unit",
    "currency",
    "choosing",
    "add",
    "placeholder",
    "balance",
    "variable",
    "let",
    "see",
    "type",
    "one",
    "show",
    "balance",
    "balance",
    "0",
    "display",
    "balance",
    "two",
    "decimal",
    "places",
    "add",
    "format",
    "specifier",
    "balance",
    "colon",
    "2f",
    "add",
    "two",
    "decimal",
    "places",
    "covered",
    "format",
    "specifiers",
    "previous",
    "topic",
    "run",
    "type",
    "one",
    "show",
    "0",
    "0",
    "cents",
    "displaying",
    "two",
    "floating",
    "point",
    "decimal",
    "places",
    "need",
    "make",
    "deposit",
    "next",
    "function",
    "define",
    "local",
    "variable",
    "amount",
    "equals",
    "accept",
    "user",
    "input",
    "enter",
    "amount",
    "deposited",
    "accept",
    "user",
    "input",
    "string",
    "typ",
    "cast",
    "number",
    "floating",
    "point",
    "number",
    "include",
    "dollars",
    "cents",
    "add",
    "checks",
    "though",
    "accepting",
    "user",
    "input",
    "amount",
    "greater",
    "zero",
    "want",
    "anybody",
    "make",
    "negative",
    "deposit",
    "let",
    "print",
    "valid",
    "amount",
    "else",
    "going",
    "return",
    "amount",
    "function",
    "going",
    "return",
    "something",
    "within",
    "else",
    "statement",
    "take",
    "balance",
    "plus",
    "equals",
    "deposit",
    "returned",
    "add",
    "deposit",
    "balance",
    "balance",
    "plus",
    "equals",
    "deposit",
    "let",
    "try",
    "let",
    "show",
    "balance",
    "balance",
    "0",
    "make",
    "deposit",
    "100",
    "exactly",
    "show",
    "balance",
    "making",
    "deposit",
    "balance",
    "100",
    "let",
    "attempt",
    "deposit",
    "negative",
    "money",
    "select",
    "two",
    "make",
    "deposit",
    "deposit",
    "42069",
    "valid",
    "amount",
    "problem",
    "type",
    "error",
    "unsupported",
    "operand",
    "float",
    "nonone",
    "type",
    "within",
    "statement",
    "within",
    "within",
    "deposit",
    "function",
    "returning",
    "anything",
    "let",
    "return",
    "zero",
    "return",
    "something",
    "within",
    "statement",
    "return",
    "anything",
    "previously",
    "either",
    "return",
    "zero",
    "return",
    "valid",
    "amount",
    "let",
    "try",
    "let",
    "make",
    "deposit",
    "attempt",
    "deposit",
    "69",
    "valid",
    "amount",
    "program",
    "crashing",
    "good",
    "attempt",
    "make",
    "valid",
    "deposit",
    "50",
    "and1",
    "show",
    "balance",
    "balance",
    "50",
    "and1",
    "cent",
    "okay",
    "deposit",
    "function",
    "work",
    "withdraw",
    "function",
    "next",
    "create",
    "local",
    "variable",
    "amount",
    "accept",
    "user",
    "input",
    "enter",
    "amount",
    "withdrawn",
    "user",
    "input",
    "going",
    "string",
    "typ",
    "cast",
    "floating",
    "point",
    "number",
    "need",
    "check",
    "see",
    "amount",
    "trying",
    "withdraw",
    "greater",
    "balance",
    "users",
    "able",
    "withdraw",
    "money",
    "bank",
    "account",
    "amount",
    "greater",
    "balance",
    "print",
    "insufficient",
    "funds",
    "else",
    "amount",
    "somebody",
    "trying",
    "withdraw",
    "less",
    "zero",
    "print",
    "different",
    "message",
    "amount",
    "must",
    "greater",
    "zero",
    "else",
    "return",
    "valid",
    "amount",
    "else",
    "statements",
    "need",
    "return",
    "something",
    "take",
    "one",
    "routes",
    "return",
    "zero",
    "making",
    "changes",
    "within",
    "else",
    "statement",
    "select",
    "choice",
    "three",
    "going",
    "take",
    "balance",
    "minus",
    "equals",
    "withdraw",
    "amount",
    "let",
    "test",
    "banking",
    "program",
    "let",
    "show",
    "balance",
    "balance",
    "zero",
    "make",
    "deposit",
    "100",
    "show",
    "balance",
    "balance",
    "100",
    "let",
    "press",
    "three",
    "withdraw",
    "money",
    "enter",
    "amount",
    "withdrawn",
    "one1",
    "kajillion",
    "dollar",
    "insufficient",
    "funds",
    "yeah",
    "kidding",
    "let",
    "attempt",
    "withdraw",
    "money",
    "able",
    "select",
    "negative",
    "amount",
    "negative",
    "420",
    "69",
    "amount",
    "must",
    "greater",
    "zero",
    "let",
    "enter",
    "valid",
    "number",
    "time",
    "would",
    "like",
    "withdraw",
    "appeared",
    "work",
    "show",
    "balance",
    "balance",
    "501",
    "exit",
    "pressing",
    "exit",
    "thank",
    "nice",
    "day",
    "last",
    "changes",
    "going",
    "make",
    "going",
    "enclose",
    "code",
    "main",
    "portion",
    "code",
    "within",
    "main",
    "function",
    "encapsulate",
    "variables",
    "help",
    "readability",
    "define",
    "function",
    "main",
    "take",
    "code",
    "within",
    "main",
    "body",
    "program",
    "place",
    "within",
    "function",
    "going",
    "select",
    "indent",
    "end",
    "program",
    "need",
    "call",
    "main",
    "function",
    "run",
    "familiar",
    "statement",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "means",
    "program",
    "imported",
    "run",
    "stand",
    "alone",
    "good",
    "practice",
    "include",
    "statement",
    "discussed",
    "previous",
    "video",
    "running",
    "program",
    "directly",
    "execute",
    "main",
    "function",
    "however",
    "variables",
    "balance",
    "running",
    "enclosed",
    "within",
    "local",
    "scope",
    "functions",
    "idea",
    "variables",
    "balance",
    "need",
    "pass",
    "balance",
    "functions",
    "withdraw",
    "show",
    "balance",
    "show",
    "balance",
    "pass",
    "variable",
    "balance",
    "thing",
    "withdraw",
    "set",
    "parameters",
    "within",
    "show",
    "balance",
    "one",
    "parameter",
    "balance",
    "thing",
    "withdraw",
    "last",
    "thing",
    "going",
    "add",
    "little",
    "bit",
    "text",
    "decoration",
    "around",
    "program",
    "make",
    "look",
    "nice",
    "print",
    "bunch",
    "asterisks",
    "necessary",
    "think",
    "look",
    "nice",
    "let",
    "add",
    "text",
    "decoration",
    "title",
    "banking",
    "program",
    "also",
    "choice",
    "basically",
    "whenever",
    "print",
    "anything",
    "add",
    "text",
    "decoration",
    "let",
    "show",
    "balance",
    "deposit",
    "within",
    "withdrawal",
    "okay",
    "let",
    "run",
    "one",
    "last",
    "time",
    "banking",
    "program",
    "let",
    "show",
    "balance",
    "balance",
    "0",
    "make",
    "deposit",
    "100",
    "and1",
    "show",
    "balance",
    "balance",
    "100",
    "and1",
    "withdraw",
    "money",
    "enter",
    "amount",
    "withdrawn",
    "insufficient",
    "funds",
    "let",
    "try",
    "let",
    "withdraw",
    "50",
    "show",
    "balance",
    "501",
    "press",
    "exit",
    "thank",
    "nice",
    "day",
    "right",
    "everybody",
    "simple",
    "banking",
    "program",
    "write",
    "using",
    "python",
    "hey",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "beginners",
    "slot",
    "machine",
    "program",
    "using",
    "python",
    "project",
    "meant",
    "beginners",
    "let",
    "get",
    "started",
    "creating",
    "project",
    "like",
    "break",
    "project",
    "different",
    "sections",
    "tackle",
    "one",
    "time",
    "slot",
    "machine",
    "different",
    "functions",
    "need",
    "well",
    "need",
    "spin",
    "row",
    "define",
    "function",
    "spin",
    "row",
    "placeholder",
    "write",
    "pass",
    "return",
    "function",
    "later",
    "need",
    "display",
    "print",
    "row",
    "print",
    "row",
    "somebody",
    "gets",
    "matching",
    "symbols",
    "slot",
    "machine",
    "need",
    "give",
    "payout",
    "create",
    "function",
    "get",
    "payout",
    "function",
    "calculate",
    "payout",
    "going",
    "get",
    "later",
    "write",
    "majority",
    "code",
    "within",
    "main",
    "function",
    "end",
    "program",
    "add",
    "statement",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "call",
    "main",
    "function",
    "drives",
    "code",
    "program",
    "imported",
    "stand",
    "alone",
    "good",
    "practice",
    "add",
    "statement",
    "majority",
    "code",
    "going",
    "write",
    "going",
    "within",
    "main",
    "function",
    "within",
    "main",
    "function",
    "let",
    "declare",
    "variables",
    "need",
    "throughout",
    "program",
    "need",
    "starting",
    "balance",
    "name",
    "balance",
    "start",
    "100",
    "00",
    "100",
    "need",
    "display",
    "sort",
    "welcome",
    "message",
    "let",
    "print",
    "something",
    "print",
    "welcome",
    "let",
    "name",
    "game",
    "python",
    "slots",
    "flavor",
    "going",
    "add",
    "text",
    "decoration",
    "bunch",
    "risks",
    "think",
    "look",
    "cool",
    "let",
    "display",
    "symbols",
    "going",
    "use",
    "symbols",
    "add",
    "emojis",
    "use",
    "emojis",
    "program",
    "place",
    "images",
    "windows",
    "hold",
    "window",
    "key",
    "plus",
    "semicolon",
    "let",
    "add",
    "cherry",
    "typically",
    "see",
    "lot",
    "fruit",
    "slot",
    "machines",
    "watermelon",
    "lemon",
    "also",
    "lot",
    "bells",
    "reason",
    "add",
    "star",
    "let",
    "align",
    "everything",
    "let",
    "test",
    "run",
    "welcome",
    "python",
    "slots",
    "let",
    "make",
    "one",
    "adjustment",
    "okay",
    "happy",
    "welcome",
    "message",
    "continue",
    "playing",
    "game",
    "balance",
    "greater",
    "zero",
    "still",
    "money",
    "continue",
    "playing",
    "print",
    "use",
    "fst",
    "string",
    "current",
    "balance",
    "colon",
    "space",
    "add",
    "placeholder",
    "pick",
    "unit",
    "currency",
    "pick",
    "american",
    "dollars",
    "display",
    "user",
    "balance",
    "prompt",
    "user",
    "enter",
    "bet",
    "assign",
    "variable",
    "bet",
    "input",
    "place",
    "bet",
    "amount",
    "let",
    "test",
    "run",
    "welcome",
    "python",
    "slots",
    "current",
    "balance",
    "100",
    "place",
    "bet",
    "amount",
    "wo",
    "deduce",
    "bet",
    "amount",
    "balance",
    "quite",
    "yet",
    "want",
    "sure",
    "enter",
    "something",
    "1",
    "good",
    "10",
    "100",
    "somebody",
    "body",
    "types",
    "word",
    "like",
    "pizza",
    "need",
    "prevent",
    "input",
    "correct",
    "check",
    "take",
    "bet",
    "use",
    "digit",
    "method",
    "bet",
    "digit",
    "somebody",
    "types",
    "word",
    "like",
    "pizza",
    "need",
    "tell",
    "valid",
    "return",
    "true",
    "bet",
    "digit",
    "going",
    "use",
    "logical",
    "operator",
    "bet",
    "digit",
    "print",
    "please",
    "enter",
    "valid",
    "number",
    "followed",
    "continue",
    "keyword",
    "continue",
    "keyword",
    "skip",
    "current",
    "iteration",
    "loop",
    "start",
    "beginning",
    "let",
    "test",
    "place",
    "bet",
    "amount",
    "pizza",
    "please",
    "enter",
    "valid",
    "number",
    "current",
    "balance",
    "place",
    "bet",
    "amount",
    "type",
    "one",
    "okay",
    "get",
    "message",
    "please",
    "enter",
    "valid",
    "number",
    "bet",
    "1",
    "valid",
    "bet",
    "digit",
    "convert",
    "integer",
    "using",
    "typ",
    "casting",
    "accept",
    "user",
    "input",
    "string",
    "string",
    "data",
    "type",
    "let",
    "reassign",
    "bet",
    "type",
    "cast",
    "bet",
    "integer",
    "check",
    "see",
    "bet",
    "greater",
    "balance",
    "people",
    "ca",
    "bet",
    "money",
    "bet",
    "greater",
    "current",
    "balance",
    "bet",
    "greater",
    "balance",
    "print",
    "message",
    "instead",
    "insufficient",
    "funds",
    "continue",
    "somebody",
    "tries",
    "bet",
    "negative",
    "money",
    "money",
    "add",
    "statement",
    "bet",
    "less",
    "equal",
    "zero",
    "print",
    "bet",
    "must",
    "greater",
    "zero",
    "continue",
    "checks",
    "pass",
    "bet",
    "digit",
    "bet",
    "greater",
    "balance",
    "bet",
    "greater",
    "zero",
    "take",
    "original",
    "balance",
    "minus",
    "equals",
    "bet",
    "subtract",
    "let",
    "test",
    "run",
    "place",
    "bet",
    "amount",
    "pizza",
    "please",
    "enter",
    "valid",
    "number",
    "bet1",
    "kajillion",
    "dollar",
    "insufficient",
    "funds",
    "yeah",
    "kidding",
    "0",
    "bet",
    "must",
    "greater",
    "zero",
    "1",
    "bet",
    "subtracted",
    "balance",
    "let",
    "try",
    "10",
    "89",
    "let",
    "bet",
    "90",
    "insufficient",
    "funds",
    "89",
    "appeared",
    "work",
    "subtract",
    "bet",
    "balance",
    "call",
    "function",
    "spin",
    "row",
    "function",
    "going",
    "return",
    "list",
    "assign",
    "row",
    "row",
    "list",
    "using",
    "spin",
    "row",
    "function",
    "generate",
    "three",
    "random",
    "symbols",
    "return",
    "within",
    "list",
    "work",
    "spin",
    "row",
    "function",
    "next",
    "within",
    "spin",
    "row",
    "function",
    "declare",
    "list",
    "symbols",
    "add",
    "symbols",
    "need",
    "strings",
    "make",
    "sure",
    "comma",
    "separated",
    "go",
    "list",
    "comprehensions",
    "come",
    "know",
    "list",
    "comprehension",
    "alternative",
    "declare",
    "empty",
    "list",
    "results",
    "empty",
    "list",
    "need",
    "loop",
    "generate",
    "three",
    "random",
    "symbols",
    "could",
    "say",
    "symbol",
    "range",
    "three",
    "loop",
    "iterate",
    "three",
    "times",
    "iteration",
    "let",
    "take",
    "empty",
    "list",
    "results",
    "use",
    "append",
    "method",
    "append",
    "random",
    "choice",
    "among",
    "symbols",
    "need",
    "import",
    "random",
    "module",
    "top",
    "import",
    "random",
    "telling",
    "random",
    "module",
    "pick",
    "random",
    "choice",
    "list",
    "symbols",
    "append",
    "empty",
    "list",
    "results",
    "escape",
    "loop",
    "return",
    "results",
    "list",
    "much",
    "better",
    "option",
    "use",
    "list",
    "comprehension",
    "going",
    "lot",
    "concise",
    "return",
    "list",
    "within",
    "list",
    "write",
    "list",
    "comprehension",
    "every",
    "let",
    "say",
    "symbol",
    "range",
    "three",
    "condition",
    "want",
    "return",
    "iteration",
    "access",
    "random",
    "module",
    "use",
    "choice",
    "method",
    "pass",
    "symbols",
    "symbol",
    "used",
    "example",
    "may",
    "see",
    "people",
    "use",
    "underscore",
    "placeholder",
    "basically",
    "saying",
    "every",
    "iteration",
    "range",
    "three",
    "return",
    "random",
    "symbol",
    "need",
    "spin",
    "row",
    "function",
    "going",
    "back",
    "list",
    "row",
    "afterwards",
    "going",
    "print",
    "test",
    "print",
    "row",
    "three",
    "random",
    "symbols",
    "making",
    "bet",
    "right",
    "looks",
    "like",
    "working",
    "make",
    "changes",
    "though",
    "instead",
    "printing",
    "row",
    "going",
    "print",
    "word",
    "spinning",
    "add",
    "new",
    "line",
    "character",
    "give",
    "us",
    "space",
    "like",
    "word",
    "spinning",
    "call",
    "print",
    "row",
    "function",
    "pass",
    "one",
    "argument",
    "r",
    "row",
    "returned",
    "us",
    "spin",
    "row",
    "going",
    "print",
    "row",
    "function",
    "need",
    "set",
    "one",
    "parameter",
    "row",
    "receive",
    "going",
    "list",
    "one",
    "easy",
    "way",
    "print",
    "elements",
    "list",
    "print",
    "pick",
    "sort",
    "separator",
    "item",
    "list",
    "example",
    "print",
    "space",
    "strings",
    "bu",
    "methods",
    "use",
    "join",
    "method",
    "pass",
    "list",
    "iterable",
    "basically",
    "saying",
    "using",
    "join",
    "method",
    "going",
    "take",
    "iterable",
    "case",
    "list",
    "join",
    "element",
    "space",
    "space",
    "character",
    "result",
    "three",
    "symbols",
    "could",
    "join",
    "different",
    "character",
    "add",
    "vertical",
    "bar",
    "bet",
    "amount",
    "1",
    "vertical",
    "bar",
    "symbols",
    "could",
    "include",
    "one",
    "character",
    "add",
    "space",
    "vertical",
    "bar",
    "space",
    "things",
    "think",
    "looks",
    "lot",
    "better",
    "going",
    "add",
    "text",
    "decoration",
    "add",
    "bunch",
    "asterisks",
    "let",
    "see",
    "working",
    "bad",
    "every",
    "time",
    "make",
    "bet",
    "get",
    "new",
    "set",
    "symbols",
    "three",
    "symbols",
    "match",
    "need",
    "calculate",
    "payout",
    "give",
    "user",
    "well",
    "print",
    "row",
    "call",
    "get",
    "payout",
    "function",
    "pass",
    "row",
    "list",
    "bet",
    "much",
    "bet",
    "returned",
    "pay",
    "add",
    "balance",
    "let",
    "go",
    "get",
    "payout",
    "function",
    "sending",
    "two",
    "arguments",
    "get",
    "payout",
    "function",
    "row",
    "bet",
    "check",
    "see",
    "element",
    "row",
    "character",
    "statement",
    "row",
    "index",
    "zero",
    "going",
    "first",
    "symbol",
    "equal",
    "row",
    "index",
    "one",
    "second",
    "symbol",
    "equal",
    "row",
    "second",
    "index",
    "third",
    "symbol",
    "three",
    "symbols",
    "match",
    "return",
    "bet",
    "multiplied",
    "within",
    "statement",
    "add",
    "another",
    "statement",
    "check",
    "see",
    "row",
    "index0",
    "equal",
    "first",
    "symbol",
    "cherry",
    "sure",
    "place",
    "within",
    "quotes",
    "string",
    "reason",
    "checking",
    "row",
    "index",
    "zero",
    "cherry",
    "emoji",
    "symbols",
    "going",
    "within",
    "statement",
    "symbols",
    "going",
    "match",
    "need",
    "check",
    "one",
    "could",
    "zero",
    "one",
    "two",
    "add",
    "zero",
    "going",
    "regardless",
    "somebody",
    "cherries",
    "return",
    "bet",
    "3",
    "amount",
    "make",
    "payouts",
    "higher",
    "lower",
    "else",
    "row",
    "index",
    "zero",
    "equal",
    "watermelon",
    "return",
    "bet",
    "time",
    "4",
    "watermelons",
    "worth",
    "cherries",
    "else",
    "row",
    "index",
    "zero",
    "equal",
    "lemon",
    "return",
    "bet",
    "time",
    "5",
    "else",
    "row",
    "index",
    "zero",
    "equal",
    "bell",
    "let",
    "give",
    "times",
    "10",
    "return",
    "bet",
    "time",
    "10",
    "else",
    "row",
    "index",
    "zero",
    "equal",
    "star",
    "worth",
    "return",
    "bet",
    "time",
    "20",
    "make",
    "sure",
    "within",
    "statement",
    "anymore",
    "three",
    "symbols",
    "match",
    "within",
    "list",
    "want",
    "give",
    "user",
    "anything",
    "lost",
    "spin",
    "return",
    "zero",
    "need",
    "get",
    "payout",
    "function",
    "scrolling",
    "back",
    "receiving",
    "payout",
    "returned",
    "us",
    "function",
    "check",
    "see",
    "payout",
    "greater",
    "zero",
    "means",
    "want",
    "spin",
    "print",
    "use",
    "f",
    "string",
    "u1",
    "add",
    "placeholder",
    "preced",
    "unit",
    "currency",
    "use",
    "dollars",
    "display",
    "payout",
    "else",
    "receive",
    "payout",
    "means",
    "lost",
    "spin",
    "print",
    "sorry",
    "lost",
    "round",
    "take",
    "balance",
    "original",
    "balance",
    "plus",
    "equals",
    "payout",
    "cases",
    "payout",
    "going",
    "zero",
    "user",
    "wins",
    "something",
    "add",
    "balance",
    "okay",
    "let",
    "test",
    "run",
    "bet",
    "1",
    "sorry",
    "lost",
    "round",
    "current",
    "balance",
    "99",
    "let",
    "bet",
    "keep",
    "win",
    "going",
    "lose",
    "times",
    "win",
    "okay",
    "see",
    "got",
    "bells",
    "says",
    "10",
    "somebody",
    "runs",
    "money",
    "want",
    "stop",
    "playing",
    "would",
    "like",
    "exit",
    "create",
    "variable",
    "play",
    "accept",
    "user",
    "input",
    "want",
    "spin",
    "add",
    "yes",
    "sln",
    "variable",
    "play",
    "equal",
    "character",
    "capital",
    "break",
    "break",
    "loop",
    "let",
    "test",
    "run",
    "bet",
    "amount",
    "bet",
    "dollar",
    "want",
    "spin",
    "type",
    "anything",
    "besides",
    "capital",
    "exit",
    "type",
    "exit",
    "bet",
    "amount",
    "bet",
    "dollar",
    "somebody",
    "type",
    "lowercase",
    "register",
    "make",
    "uppercase",
    "following",
    "input",
    "upper",
    "method",
    "make",
    "uppercase",
    "place",
    "bet",
    "dollar",
    "hey",
    "3",
    "want",
    "play",
    "type",
    "lowercase",
    "yes",
    "would",
    "like",
    "play",
    "hold",
    "shift",
    "order",
    "make",
    "capital",
    "still",
    "register",
    "current",
    "balance",
    "12",
    "ahead",
    "currently",
    "place",
    "bet",
    "amount",
    "bet",
    "10",
    "lost",
    "round",
    "press",
    "n",
    "want",
    "play",
    "exit",
    "end",
    "program",
    "print",
    "use",
    "f",
    "string",
    "game",
    "final",
    "balance",
    "add",
    "placeholder",
    "pick",
    "unit",
    "currency",
    "pick",
    "dollars",
    "display",
    "balance",
    "add",
    "text",
    "decoration",
    "make",
    "look",
    "nice",
    "okay",
    "let",
    "play",
    "one",
    "last",
    "time",
    "enter",
    "bet",
    "amount",
    "bet",
    "dollar",
    "sorry",
    "lost",
    "round",
    "want",
    "spin",
    "yes",
    "bet",
    "5",
    "lost",
    "spin",
    "yes",
    "bet",
    "10",
    "20",
    "bet",
    "20",
    "keep",
    "losing",
    "running",
    "money",
    "guys",
    "hey",
    "10",
    "though",
    "want",
    "spin",
    "game",
    "final",
    "balance",
    "1",
    "gamble",
    "tend",
    "lose",
    "money",
    "gain",
    "right",
    "everybody",
    "slot",
    "machine",
    "program",
    "write",
    "using",
    "python",
    "hello",
    "everybody",
    "today",
    "going",
    "show",
    "write",
    "substitution",
    "cipher",
    "encryption",
    "program",
    "basically",
    "speaking",
    "going",
    "message",
    "hide",
    "message",
    "encrypt",
    "replacing",
    "every",
    "instance",
    "one",
    "character",
    "another",
    "chosen",
    "random",
    "using",
    "key",
    "decrypt",
    "message",
    "university",
    "took",
    "intro",
    "cyber",
    "security",
    "course",
    "turned",
    "program",
    "final",
    "assignment",
    "get",
    "know",
    "maybe",
    "help",
    "least",
    "good",
    "exercise",
    "right",
    "let",
    "get",
    "started",
    "everybody",
    "begin",
    "importing",
    "random",
    "module",
    "well",
    "string",
    "module",
    "let",
    "create",
    "string",
    "characters",
    "named",
    "chariz",
    "whatever",
    "characters",
    "would",
    "like",
    "use",
    "encryption",
    "program",
    "list",
    "string",
    "however",
    "lot",
    "write",
    "think",
    "better",
    "solution",
    "would",
    "import",
    "constants",
    "string",
    "module",
    "going",
    "include",
    "punctuation",
    "import",
    "punctuation",
    "constant",
    "string",
    "module",
    "heck",
    "spell",
    "punctuation",
    "okay",
    "right",
    "plus",
    "add",
    "digits",
    "string",
    "digits",
    "constant",
    "plus",
    "string",
    "dot",
    "asky",
    "letters",
    "let",
    "take",
    "look",
    "character",
    "far",
    "one",
    "long",
    "string",
    "characters",
    "would",
    "like",
    "include",
    "space",
    "white",
    "space",
    "well",
    "constant",
    "includes",
    "things",
    "like",
    "carriage",
    "return",
    "going",
    "warp",
    "results",
    "let",
    "show",
    "demonstration",
    "string",
    "dot",
    "whit",
    "space",
    "plus",
    "stuff",
    "carriage",
    "return",
    "characters",
    "would",
    "like",
    "avoid",
    "place",
    "importing",
    "whit",
    "space",
    "constant",
    "string",
    "module",
    "going",
    "add",
    "space",
    "character",
    "good",
    "enough",
    "characters",
    "using",
    "program",
    "feel",
    "free",
    "add",
    "less",
    "one",
    "long",
    "string",
    "going",
    "turn",
    "string",
    "list",
    "character",
    "individual",
    "element",
    "going",
    "take",
    "string",
    "chars",
    "reassign",
    "typ",
    "cast",
    "string",
    "characters",
    "list",
    "let",
    "print",
    "print",
    "chars",
    "instead",
    "one",
    "long",
    "string",
    "list",
    "list",
    "characters",
    "need",
    "going",
    "create",
    "key",
    "shuffle",
    "eventually",
    "key",
    "create",
    "copy",
    "list",
    "type",
    "original",
    "list",
    "copy",
    "method",
    "print",
    "key",
    "going",
    "place",
    "lists",
    "within",
    "f",
    "string",
    "chars",
    "key",
    "let",
    "see",
    "two",
    "identical",
    "lists",
    "one",
    "original",
    "characters",
    "key",
    "going",
    "shuffle",
    "key",
    "random",
    "shuffle",
    "pass",
    "list",
    "key",
    "look",
    "characters",
    "shuffled",
    "random",
    "order",
    "somebody",
    "types",
    "text",
    "encrypted",
    "replace",
    "every",
    "instance",
    "one",
    "character",
    "within",
    "string",
    "let",
    "say",
    "replace",
    "another",
    "one",
    "every",
    "time",
    "run",
    "program",
    "key",
    "reshuffled",
    "let",
    "ask",
    "user",
    "input",
    "part",
    "program",
    "encryption",
    "plain",
    "text",
    "original",
    "message",
    "plain",
    "text",
    "equals",
    "accept",
    "user",
    "input",
    "enter",
    "message",
    "encrypt",
    "cyppher",
    "text",
    "name",
    "encrypted",
    "message",
    "empty",
    "string",
    "okay",
    "let",
    "say",
    "user",
    "types",
    "message",
    "enter",
    "message",
    "encrypt",
    "like",
    "pizza",
    "important",
    "message",
    "every",
    "instance",
    "character",
    "within",
    "plain",
    "text",
    "refer",
    "key",
    "replace",
    "letter",
    "different",
    "one",
    "example",
    "z",
    "two",
    "z",
    "program",
    "replaced",
    "let",
    "see",
    "capital",
    "b",
    "every",
    "time",
    "run",
    "program",
    "though",
    "going",
    "shuffle",
    "key",
    "going",
    "consistent",
    "going",
    "iterating",
    "every",
    "letter",
    "plain",
    "text",
    "every",
    "letter",
    "plain",
    "text",
    "strings",
    "iterable",
    "find",
    "index",
    "every",
    "letter",
    "plain",
    "text",
    "within",
    "list",
    "characters",
    "let",
    "assign",
    "variable",
    "index",
    "index",
    "equals",
    "take",
    "list",
    "chars",
    "use",
    "index",
    "method",
    "looking",
    "letter",
    "whatever",
    "letter",
    "currently",
    "return",
    "index",
    "refer",
    "key",
    "get",
    "whatever",
    "letter",
    "index",
    "append",
    "cipher",
    "text",
    "currently",
    "empty",
    "string",
    "cypher",
    "text",
    "plus",
    "equals",
    "key",
    "given",
    "index",
    "cipher",
    "text",
    "encrypted",
    "message",
    "let",
    "print",
    "print",
    "use",
    "fst",
    "string",
    "original",
    "message",
    "let",
    "print",
    "plain",
    "text",
    "encrypted",
    "message",
    "print",
    "cyppher",
    "text",
    "string",
    "let",
    "take",
    "look",
    "far",
    "enter",
    "message",
    "encrypt",
    "like",
    "pizza",
    "new",
    "encrypted",
    "message",
    "every",
    "instance",
    "character",
    "within",
    "plain",
    "text",
    "replaced",
    "another",
    "example",
    "z",
    "replaced",
    "e",
    "two",
    "e",
    "within",
    "encrypted",
    "message",
    "run",
    "program",
    "would",
    "likely",
    "different",
    "like",
    "pizza",
    "new",
    "encrypted",
    "message",
    "z",
    "replaced",
    "semicolons",
    "time",
    "every",
    "ladder",
    "plane",
    "text",
    "get",
    "index",
    "letter",
    "refer",
    "key",
    "add",
    "new",
    "character",
    "encrypted",
    "message",
    "probably",
    "best",
    "us",
    "display",
    "characters",
    "key",
    "let",
    "hide",
    "reusing",
    "key",
    "decryption",
    "decrypt",
    "message",
    "let",
    "copy",
    "section",
    "code",
    "paste",
    "decrypting",
    "ask",
    "cipher",
    "text",
    "reset",
    "plain",
    "text",
    "every",
    "letter",
    "cipher",
    "text",
    "refer",
    "key",
    "append",
    "character",
    "plain",
    "text",
    "within",
    "list",
    "chars",
    "given",
    "index",
    "display",
    "encrypted",
    "message",
    "followed",
    "original",
    "message",
    "let",
    "try",
    "one",
    "last",
    "time",
    "enter",
    "message",
    "encrypt",
    "like",
    "tacos",
    "original",
    "message",
    "encrypted",
    "message",
    "decrypt",
    "encrypted",
    "message",
    "give",
    "original",
    "message",
    "type",
    "characters",
    "exactly",
    "hit",
    "enter",
    "message",
    "decrypted",
    "like",
    "talking",
    "goes",
    "right",
    "everybody",
    "substitution",
    "cipher",
    "encryption",
    "program",
    "beginners",
    "university",
    "turn",
    "program",
    "final",
    "assignment",
    "cyber",
    "security",
    "class",
    "get",
    "maybe",
    "help",
    "well",
    "yeah",
    "encryption",
    "program",
    "beginners",
    "python",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "game",
    "hangman",
    "using",
    "python",
    "thought",
    "would",
    "good",
    "mini",
    "project",
    "us",
    "learning",
    "code",
    "important",
    "create",
    "small",
    "projects",
    "go",
    "along",
    "one",
    "make",
    "together",
    "creating",
    "project",
    "like",
    "declare",
    "various",
    "variables",
    "data",
    "structures",
    "need",
    "first",
    "followed",
    "functions",
    "need",
    "game",
    "need",
    "set",
    "words",
    "one",
    "words",
    "going",
    "chosen",
    "random",
    "let",
    "create",
    "words",
    "add",
    "fruit",
    "apple",
    "orange",
    "banana",
    "coconut",
    "one",
    "pineapple",
    "using",
    "random",
    "module",
    "let",
    "import",
    "import",
    "random",
    "using",
    "random",
    "module",
    "pick",
    "one",
    "words",
    "random",
    "wo",
    "able",
    "see",
    "guess",
    "word",
    "one",
    "letter",
    "time",
    "reach",
    "six",
    "incorrect",
    "guesses",
    "lose",
    "game",
    "guess",
    "display",
    "asky",
    "art",
    "trial",
    "name",
    "hangman",
    "art",
    "dictionary",
    "dictionary",
    "key",
    "value",
    "pair",
    "contains",
    "tuple",
    "dictionary",
    "key",
    "number",
    "tupple",
    "key",
    "going",
    "represent",
    "incorrect",
    "number",
    "guesses",
    "start",
    "zero",
    "display",
    "tupple",
    "contain",
    "aski",
    "art",
    "let",
    "copy",
    "one",
    "incorrect",
    "guess",
    "display",
    "different",
    "art",
    "put",
    "new",
    "line",
    "readability",
    "going",
    "go",
    "way",
    "six",
    "hit",
    "six",
    "incorrect",
    "guesses",
    "lose",
    "game",
    "key",
    "corresponds",
    "number",
    "incorrect",
    "guesses",
    "reach",
    "six",
    "lose",
    "game",
    "tuple",
    "corresponds",
    "incorrect",
    "number",
    "guesses",
    "display",
    "certain",
    "image",
    "would",
    "like",
    "feel",
    "free",
    "look",
    "description",
    "video",
    "would",
    "like",
    "copy",
    "save",
    "time",
    "topple",
    "consist",
    "three",
    "rows",
    "three",
    "strings",
    "incorrect",
    "guesses",
    "incorrect",
    "guesses",
    "zero",
    "display",
    "nothing",
    "ca",
    "see",
    "hangman",
    "person",
    "one",
    "incorrect",
    "guess",
    "display",
    "head",
    "two",
    "incorrect",
    "guesses",
    "display",
    "head",
    "main",
    "torso",
    "body",
    "represent",
    "vertical",
    "bar",
    "let",
    "copy",
    "one",
    "three",
    "incorrect",
    "guesses",
    "display",
    "left",
    "arm",
    "represented",
    "forward",
    "slash",
    "four",
    "incorrect",
    "guesses",
    "display",
    "right",
    "arm",
    "however",
    "use",
    "backs",
    "slash",
    "escape",
    "sequence",
    "within",
    "string",
    "use",
    "double",
    "backs",
    "slashes",
    "literally",
    "print",
    "backslash",
    "five",
    "incorrect",
    "guesses",
    "display",
    "left",
    "leg",
    "person",
    "reach",
    "six",
    "incorrect",
    "guesses",
    "display",
    "full",
    "person",
    "lose",
    "game",
    "see",
    "entire",
    "person",
    "asky",
    "arch",
    "use",
    "let",
    "test",
    "sure",
    "everything",
    "working",
    "fine",
    "print",
    "hangman",
    "art",
    "key",
    "zero",
    "represent",
    "incorrect",
    "guesses",
    "okay",
    "display",
    "person",
    "going",
    "use",
    "sort",
    "loop",
    "every",
    "let",
    "say",
    "line",
    "hangman",
    "art",
    "index",
    "zero",
    "zero",
    "incorrect",
    "guesses",
    "print",
    "line",
    "line",
    "incorrect",
    "guesses",
    "display",
    "anything",
    "correct",
    "ca",
    "see",
    "person",
    "okay",
    "one",
    "incorrect",
    "guess",
    "display",
    "dictionary",
    "key",
    "one",
    "displays",
    "person",
    "head",
    "two",
    "two",
    "would",
    "main",
    "torso",
    "body",
    "three",
    "left",
    "arm",
    "four",
    "right",
    "arm",
    "five",
    "left",
    "leg",
    "six",
    "right",
    "leg",
    "see",
    "entire",
    "person",
    "lose",
    "game",
    "delete",
    "two",
    "lines",
    "code",
    "longer",
    "need",
    "know",
    "dictionary",
    "working",
    "going",
    "zoom",
    "little",
    "bit",
    "following",
    "dictionary",
    "declare",
    "various",
    "functions",
    "need",
    "throughout",
    "program",
    "define",
    "function",
    "display",
    "man",
    "hangman",
    "one",
    "parameter",
    "wrong",
    "guesses",
    "time",
    "write",
    "pass",
    "fill",
    "function",
    "later",
    "display",
    "man",
    "need",
    "know",
    "number",
    "incorrect",
    "guesses",
    "display",
    "right",
    "image",
    "display",
    "man",
    "function",
    "display",
    "hint",
    "function",
    "string",
    "hint",
    "write",
    "pass",
    "hint",
    "going",
    "list",
    "list",
    "underscore",
    "characters",
    "letter",
    "guess",
    "right",
    "flip",
    "one",
    "underscores",
    "letter",
    "letter",
    "correct",
    "create",
    "function",
    "display",
    "answer",
    "within",
    "function",
    "display",
    "correct",
    "answer",
    "either",
    "lose",
    "game",
    "win",
    "game",
    "write",
    "pass",
    "create",
    "function",
    "main",
    "contain",
    "main",
    "body",
    "code",
    "program",
    "write",
    "pass",
    "add",
    "following",
    "statement",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "running",
    "file",
    "directly",
    "would",
    "like",
    "call",
    "main",
    "function",
    "start",
    "program",
    "right",
    "let",
    "zoom",
    "main",
    "skeletal",
    "structure",
    "program",
    "import",
    "random",
    "module",
    "set",
    "words",
    "importing",
    "separate",
    "file",
    "near",
    "end",
    "video",
    "dictionary",
    "key",
    "number",
    "represent",
    "number",
    "incorrect",
    "guesses",
    "tuple",
    "display",
    "asky",
    "art",
    "four",
    "functions",
    "display",
    "man",
    "display",
    "hint",
    "display",
    "answer",
    "main",
    "function",
    "contain",
    "main",
    "body",
    "code",
    "right",
    "let",
    "work",
    "within",
    "main",
    "function",
    "within",
    "main",
    "function",
    "create",
    "variable",
    "answer",
    "correct",
    "answer",
    "guess",
    "access",
    "random",
    "module",
    "call",
    "method",
    "choice",
    "pass",
    "set",
    "words",
    "one",
    "words",
    "chosen",
    "random",
    "let",
    "test",
    "print",
    "answer",
    "temporarily",
    "get",
    "random",
    "word",
    "apple",
    "apple",
    "pineapple",
    "apple",
    "guess",
    "really",
    "likes",
    "apple",
    "reason",
    "go",
    "orange",
    "choosing",
    "word",
    "random",
    "longer",
    "need",
    "print",
    "statement",
    "looks",
    "like",
    "everything",
    "working",
    "fine",
    "display",
    "hint",
    "hint",
    "going",
    "list",
    "underscore",
    "characters",
    "need",
    "number",
    "underscore",
    "characters",
    "equal",
    "number",
    "characters",
    "one",
    "words",
    "chosen",
    "random",
    "could",
    "multiply",
    "list",
    "length",
    "using",
    "length",
    "function",
    "answer",
    "let",
    "print",
    "hint",
    "see",
    "working",
    "selected",
    "word",
    "many",
    "underscores",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "okay",
    "different",
    "word",
    "1",
    "2",
    "3",
    "4",
    "5",
    "probably",
    "apple",
    "five",
    "characters",
    "right",
    "hint",
    "list",
    "underscore",
    "characters",
    "guess",
    "letter",
    "correct",
    "fill",
    "one",
    "underscores",
    "correct",
    "character",
    "need",
    "keep",
    "track",
    "number",
    "wrong",
    "guesses",
    "create",
    "variable",
    "wrong",
    "guesses",
    "set",
    "equal",
    "zero",
    "start",
    "game",
    "going",
    "keep",
    "track",
    "incorrect",
    "guesses",
    "made",
    "create",
    "set",
    "guest",
    "letters",
    "empty",
    "set",
    "call",
    "set",
    "function",
    "normally",
    "python",
    "ca",
    "create",
    "empty",
    "set",
    "set",
    "parentheses",
    "use",
    "set",
    "function",
    "create",
    "boolean",
    "variable",
    "running",
    "set",
    "true",
    "game",
    "running",
    "continue",
    "playing",
    "lose",
    "win",
    "game",
    "switch",
    "false",
    "exit",
    "game",
    "keep",
    "true",
    "initially",
    "run",
    "program",
    "declare",
    "variables",
    "need",
    "within",
    "main",
    "function",
    "create",
    "loop",
    "loop",
    "running",
    "need",
    "say",
    "running",
    "equal",
    "true",
    "necessarily",
    "need",
    "create",
    "comparison",
    "say",
    "running",
    "true",
    "continue",
    "code",
    "would",
    "like",
    "let",
    "call",
    "function",
    "display",
    "man",
    "pass",
    "wrong",
    "number",
    "guesses",
    "call",
    "function",
    "display",
    "man",
    "pass",
    "variable",
    "wrong",
    "guesses",
    "begin",
    "game",
    "would",
    "like",
    "display",
    "one",
    "images",
    "display",
    "hint",
    "call",
    "function",
    "display",
    "hint",
    "pass",
    "hint",
    "list",
    "underscore",
    "characters",
    "represent",
    "answer",
    "guess",
    "create",
    "variable",
    "guess",
    "accept",
    "user",
    "input",
    "prompt",
    "user",
    "enter",
    "letter",
    "case",
    "user",
    "types",
    "character",
    "uppercase",
    "let",
    "add",
    "lower",
    "method",
    "make",
    "lowercase",
    "let",
    "fill",
    "display",
    "man",
    "function",
    "lot",
    "write",
    "call",
    "function",
    "need",
    "display",
    "one",
    "images",
    "based",
    "wrong",
    "number",
    "guesses",
    "one",
    "keys",
    "within",
    "display",
    "man",
    "function",
    "create",
    "loop",
    "every",
    "line",
    "hangman",
    "art",
    "dictionary",
    "key",
    "wrong",
    "guesses",
    "number",
    "0",
    "six",
    "depending",
    "number",
    "print",
    "line",
    "print",
    "line",
    "tuple",
    "let",
    "see",
    "working",
    "test",
    "run",
    "displaying",
    "person",
    "ca",
    "see",
    "testing",
    "purposes",
    "going",
    "change",
    "wrong",
    "guesses",
    "one",
    "displaying",
    "head",
    "two",
    "displays",
    "body",
    "three",
    "displays",
    "left",
    "arm",
    "four",
    "right",
    "arm",
    "five",
    "left",
    "leg",
    "leg",
    "six",
    "full",
    "body",
    "lose",
    "necessarily",
    "need",
    "add",
    "text",
    "decoration",
    "add",
    "bunch",
    "asterisks",
    "think",
    "looks",
    "better",
    "let",
    "sure",
    "set",
    "wrong",
    "gesses",
    "back",
    "zero",
    "display",
    "hangman",
    "display",
    "hint",
    "clue",
    "trying",
    "solve",
    "call",
    "display",
    "hint",
    "function",
    "pass",
    "list",
    "hint",
    "within",
    "display",
    "hint",
    "function",
    "let",
    "zoom",
    "print",
    "following",
    "character",
    "within",
    "hint",
    "underscore",
    "display",
    "space",
    "character",
    "strings",
    "built",
    "join",
    "method",
    "call",
    "pass",
    "hint",
    "character",
    "within",
    "hint",
    "join",
    "empty",
    "space",
    "test",
    "run",
    "displaying",
    "underscore",
    "represent",
    "character",
    "separated",
    "space",
    "fill",
    "display",
    "answer",
    "function",
    "copy",
    "line",
    "code",
    "display",
    "hint",
    "replace",
    "hint",
    "answer",
    "need",
    "display",
    "answer",
    "function",
    "let",
    "test",
    "real",
    "quick",
    "playing",
    "hint",
    "temporarily",
    "display",
    "answer",
    "sure",
    "working",
    "yep",
    "hint",
    "answer",
    "guess",
    "okay",
    "let",
    "delete",
    "line",
    "code",
    "want",
    "display",
    "answer",
    "testing",
    "user",
    "going",
    "able",
    "type",
    "letter",
    "guess",
    "example",
    "guess",
    "letter",
    "letter",
    "found",
    "within",
    "hint",
    "one",
    "characters",
    "need",
    "switch",
    "underscore",
    "one",
    "characters",
    "write",
    "following",
    "statement",
    "guess",
    "answer",
    "membership",
    "operator",
    "letter",
    "found",
    "within",
    "string",
    "answer",
    "going",
    "create",
    "loop",
    "create",
    "loop",
    "iterate",
    "character",
    "within",
    "answer",
    "know",
    "length",
    "answer",
    "python",
    "choose",
    "random",
    "let",
    "say",
    "every",
    "index",
    "shorten",
    "range",
    "length",
    "answer",
    "let",
    "say",
    "word",
    "apple",
    "length",
    "word",
    "apple",
    "five",
    "characters",
    "would",
    "return",
    "five",
    "range",
    "five",
    "iterate",
    "five",
    "times",
    "iterate",
    "loop",
    "number",
    "characters",
    "within",
    "answer",
    "check",
    "iteration",
    "answer",
    "index",
    "first",
    "iteration",
    "zero",
    "second",
    "iteration",
    "one",
    "two",
    "forth",
    "strings",
    "iterable",
    "answer",
    "index",
    "equal",
    "guess",
    "match",
    "guess",
    "correct",
    "letter",
    "going",
    "take",
    "hint",
    "given",
    "index",
    "set",
    "equal",
    "guess",
    "looks",
    "like",
    "statement",
    "outside",
    "loop",
    "going",
    "invent",
    "one",
    "somewhere",
    "within",
    "okay",
    "let",
    "test",
    "run",
    "going",
    "guess",
    "letter",
    "yes",
    "one",
    "let",
    "something",
    "probably",
    "q",
    "okay",
    "okay",
    "matches",
    "end",
    "anything",
    "word",
    "probably",
    "word",
    "orange",
    "let",
    "guess",
    "r",
    "n",
    "e",
    "g",
    "right",
    "know",
    "works",
    "somebody",
    "types",
    "input",
    "valid",
    "checking",
    "guess",
    "correct",
    "input",
    "validation",
    "user",
    "types",
    "whole",
    "word",
    "like",
    "pizza",
    "want",
    "user",
    "guess",
    "single",
    "character",
    "many",
    "characters",
    "add",
    "following",
    "line",
    "length",
    "guest",
    "type",
    "equal",
    "one",
    "print",
    "following",
    "message",
    "let",
    "say",
    "invalid",
    "input",
    "use",
    "keyword",
    "continue",
    "skip",
    "loop",
    "continue",
    "okay",
    "enter",
    "letter",
    "type",
    "word",
    "pizza",
    "get",
    "message",
    "invalid",
    "input",
    "skip",
    "loop",
    "current",
    "iteration",
    "guess",
    "two",
    "type",
    "banana",
    "get",
    "invalid",
    "input",
    "guess",
    "one",
    "letter",
    "time",
    "somebody",
    "types",
    "number",
    "like",
    "one",
    "would",
    "like",
    "prevent",
    "within",
    "statement",
    "would",
    "like",
    "execute",
    "code",
    "guess",
    "alphabetical",
    "character",
    "add",
    "following",
    "take",
    "guess",
    "dot",
    "use",
    "alpha",
    "method",
    "guess",
    "alphabetical",
    "character",
    "returns",
    "true",
    "alphabetical",
    "character",
    "false",
    "checking",
    "alphabetical",
    "character",
    "execute",
    "code",
    "let",
    "try",
    "type",
    "one",
    "invalid",
    "input",
    "42069",
    "invalid",
    "input",
    "let",
    "say",
    "guess",
    "letter",
    "type",
    "letter",
    "already",
    "guessed",
    "guess",
    "already",
    "guessed",
    "letter",
    "want",
    "count",
    "skip",
    "current",
    "loop",
    "iteration",
    "add",
    "another",
    "statement",
    "guess",
    "set",
    "guest",
    "letters",
    "print",
    "following",
    "use",
    "f",
    "string",
    "guess",
    "already",
    "guessed",
    "oh",
    "one",
    "thing",
    "forgetting",
    "check",
    "guest",
    "within",
    "guest",
    "characters",
    "take",
    "guest",
    "letters",
    "set",
    "add",
    "guess",
    "keeping",
    "track",
    "letters",
    "already",
    "guessed",
    "type",
    "let",
    "guess",
    "one",
    "guess",
    "get",
    "message",
    "already",
    "guessed",
    "sure",
    "add",
    "continue",
    "skip",
    "current",
    "loop",
    "iteration",
    "right",
    "going",
    "statement",
    "guess",
    "answer",
    "guess",
    "character",
    "incorrect",
    "take",
    "variable",
    "wrong",
    "guesses",
    "incremented",
    "one",
    "wrong",
    "guesses",
    "plus",
    "equals",
    "1",
    "let",
    "test",
    "run",
    "guess",
    "q",
    "q",
    "display",
    "dictionary",
    "key",
    "one",
    "display",
    "asky",
    "art",
    "r",
    "r",
    "yes",
    "r",
    "probably",
    "orange",
    "would",
    "like",
    "sure",
    "display",
    "entire",
    "person",
    "guess",
    "wrong",
    "characters",
    "know",
    "works",
    "need",
    "win",
    "condition",
    "guess",
    "correct",
    "characters",
    "display",
    "entire",
    "word",
    "work",
    "next",
    "underscore",
    "characters",
    "hint",
    "true",
    "underscore",
    "characters",
    "hint",
    "underscores",
    "hint",
    "call",
    "function",
    "display",
    "man",
    "pass",
    "wrong",
    "number",
    "guesses",
    "call",
    "function",
    "display",
    "answer",
    "pass",
    "answer",
    "print",
    "text",
    "win",
    "set",
    "boolean",
    "variable",
    "running",
    "equal",
    "false",
    "let",
    "win",
    "time",
    "already",
    "know",
    "word",
    "probably",
    "pineapple",
    "let",
    "guess",
    "something",
    "incorrect",
    "go",
    "two",
    "wrong",
    "guesses",
    "correctly",
    "guessed",
    "word",
    "pineapple",
    "win",
    "exit",
    "program",
    "lose",
    "add",
    "following",
    "statement",
    "else",
    "variable",
    "wrong",
    "guesses",
    "greater",
    "equal",
    "length",
    "hangman",
    "art",
    "total",
    "seven",
    "seven",
    "total",
    "keys",
    "hit",
    "six",
    "lose",
    "game",
    "lf",
    "statement",
    "length",
    "hangman",
    "art",
    "length",
    "hangman",
    "art",
    "going",
    "seven",
    "going",
    "subtract",
    "one",
    "six",
    "total",
    "six",
    "wrong",
    "guesses",
    "greater",
    "equal",
    "6",
    "means",
    "lose",
    "game",
    "call",
    "display",
    "man",
    "function",
    "pass",
    "wrong",
    "number",
    "guesses",
    "display",
    "correct",
    "answer",
    "display",
    "answer",
    "pass",
    "answer",
    "print",
    "lose",
    "take",
    "boolean",
    "variable",
    "running",
    "set",
    "false",
    "guess",
    "incorrect",
    "letters",
    "word",
    "coconut",
    "six",
    "incorrect",
    "guesses",
    "display",
    "entire",
    "hangman",
    "correct",
    "answer",
    "coconut",
    "lose",
    "would",
    "like",
    "import",
    "larger",
    "variety",
    "words",
    "could",
    "create",
    "separate",
    "python",
    "file",
    "within",
    "project",
    "folder",
    "create",
    "new",
    "python",
    "file",
    "name",
    "python",
    "file",
    "words",
    "list",
    "python",
    "file",
    "let",
    "take",
    "set",
    "words",
    "cut",
    "add",
    "note",
    "words",
    "hangman",
    "game",
    "words",
    "set",
    "recommend",
    "looking",
    "online",
    "large",
    "set",
    "words",
    "use",
    "copy",
    "paste",
    "within",
    "browsing",
    "online",
    "found",
    "extensive",
    "list",
    "animals",
    "use",
    "possible",
    "words",
    "game",
    "main",
    "python",
    "file",
    "import",
    "module",
    "words",
    "list",
    "module",
    "words",
    "list",
    "import",
    "words",
    "greater",
    "variety",
    "words",
    "use",
    "let",
    "run",
    "one",
    "last",
    "time",
    "word",
    "four",
    "letters",
    "guess",
    "vowels",
    "e",
    "goat",
    "nope",
    "r",
    "bore",
    "right",
    "word",
    "bore",
    "win",
    "right",
    "everybody",
    "game",
    "hangman",
    "create",
    "using",
    "python",
    "hey",
    "everybody",
    "finally",
    "made",
    "python",
    "objectoriented",
    "programming",
    "important",
    "topic",
    "python",
    "object",
    "bundle",
    "related",
    "attributes",
    "methods",
    "attributes",
    "similar",
    "variables",
    "describe",
    "object",
    "look",
    "around",
    "right",
    "surrounded",
    "different",
    "real",
    "world",
    "objects",
    "next",
    "phone",
    "cup",
    "book",
    "objects",
    "different",
    "attributes",
    "represent",
    "example",
    "attribute",
    "phone",
    "next",
    "could",
    "version",
    "number",
    "could",
    "set",
    "13",
    "could",
    "another",
    "attribute",
    "phone",
    "powered",
    "could",
    "true",
    "false",
    "even",
    "price",
    "cup",
    "next",
    "liquid",
    "within",
    "cup",
    "case",
    "coffee",
    "temperature",
    "cup",
    "cup",
    "empty",
    "empty",
    "even",
    "book",
    "title",
    "book",
    "could",
    "string",
    "many",
    "pages",
    "book",
    "pages",
    "could",
    "another",
    "attribute",
    "objects",
    "also",
    "capability",
    "things",
    "methods",
    "functions",
    "belong",
    "object",
    "people",
    "mix",
    "functions",
    "methods",
    "time",
    "technically",
    "different",
    "even",
    "teaching",
    "tend",
    "make",
    "mistake",
    "calling",
    "method",
    "function",
    "function",
    "method",
    "usually",
    "people",
    "know",
    "referring",
    "though",
    "method",
    "function",
    "belongs",
    "within",
    "object",
    "actions",
    "objects",
    "perform",
    "phone",
    "make",
    "call",
    "receive",
    "call",
    "call",
    "turn",
    "phone",
    "turn",
    "phone",
    "could",
    "functions",
    "cup",
    "could",
    "fill",
    "cup",
    "drink",
    "cup",
    "empty",
    "cup",
    "book",
    "open",
    "book",
    "read",
    "book",
    "close",
    "book",
    "object",
    "bundle",
    "related",
    "attributes",
    "methods",
    "represent",
    "real",
    "world",
    "items",
    "create",
    "many",
    "objects",
    "need",
    "utilize",
    "class",
    "class",
    "type",
    "blueprint",
    "used",
    "design",
    "design",
    "structure",
    "layout",
    "object",
    "need",
    "design",
    "objects",
    "attributes",
    "methods",
    "create",
    "class",
    "car",
    "create",
    "car",
    "objects",
    "class",
    "car",
    "construct",
    "car",
    "object",
    "need",
    "special",
    "type",
    "method",
    "called",
    "constructor",
    "works",
    "similarly",
    "function",
    "define",
    "function",
    "double",
    "underscore",
    "init",
    "meaning",
    "initialize",
    "double",
    "underscore",
    "follow",
    "set",
    "parentheses",
    "constructor",
    "method",
    "need",
    "method",
    "order",
    "construct",
    "objects",
    "dunder",
    "method",
    "dunder",
    "meaning",
    "double",
    "underscore",
    "future",
    "topic",
    "want",
    "overloaded",
    "information",
    "right",
    "need",
    "know",
    "need",
    "method",
    "order",
    "create",
    "objects",
    "method",
    "behaves",
    "similar",
    "function",
    "need",
    "set",
    "parameters",
    "self",
    "already",
    "provided",
    "us",
    "self",
    "means",
    "object",
    "creating",
    "right",
    "car",
    "attributes",
    "car",
    "model",
    "could",
    "string",
    "like",
    "bmw",
    "year",
    "could",
    "number",
    "color",
    "let",
    "add",
    "boolean",
    "four",
    "sale",
    "car",
    "sale",
    "true",
    "false",
    "assign",
    "attributes",
    "going",
    "access",
    "self",
    "self",
    "name",
    "attribute",
    "self",
    "model",
    "equals",
    "model",
    "receive",
    "parameters",
    "receive",
    "name",
    "model",
    "assign",
    "object",
    "let",
    "year",
    "self",
    "year",
    "equals",
    "year",
    "self",
    "color",
    "equals",
    "color",
    "self",
    "sale",
    "equals",
    "sale",
    "example",
    "attributes",
    "car",
    "might",
    "model",
    "year",
    "color",
    "sale",
    "represented",
    "boolean",
    "construct",
    "car",
    "object",
    "need",
    "unique",
    "name",
    "car",
    "let",
    "say",
    "car",
    "one",
    "car",
    "1",
    "equals",
    "take",
    "name",
    "class",
    "add",
    "set",
    "parentheses",
    "invoke",
    "constructor",
    "going",
    "almost",
    "exact",
    "l",
    "like",
    "function",
    "parameter",
    "set",
    "need",
    "send",
    "matching",
    "number",
    "arguments",
    "self",
    "provided",
    "us",
    "behind",
    "scenes",
    "automatically",
    "need",
    "model",
    "year",
    "color",
    "sale",
    "pick",
    "car",
    "choosing",
    "pick",
    "favorite",
    "car",
    "model",
    "mustang",
    "year",
    "go",
    "recent",
    "year",
    "2024",
    "color",
    "pick",
    "red",
    "car",
    "sale",
    "like",
    "car",
    "set",
    "false",
    "make",
    "sure",
    "false",
    "capitalized",
    "let",
    "see",
    "happens",
    "attempt",
    "print",
    "car",
    "object",
    "car",
    "one",
    "given",
    "memory",
    "address",
    "car",
    "object",
    "located",
    "would",
    "like",
    "one",
    "attributes",
    "located",
    "memory",
    "address",
    "instead",
    "printing",
    "object",
    "going",
    "access",
    "one",
    "attributes",
    "found",
    "within",
    "car",
    "follow",
    "name",
    "car",
    "dot",
    "dot",
    "known",
    "attribute",
    "access",
    "operator",
    "would",
    "like",
    "model",
    "car",
    "one",
    "would",
    "give",
    "mustang",
    "let",
    "access",
    "year",
    "take",
    "name",
    "car",
    "car",
    "one",
    "dot",
    "year",
    "2024",
    "followed",
    "color",
    "car1",
    "docolor",
    "red",
    "car",
    "one",
    "sale",
    "print",
    "false",
    "let",
    "create",
    "second",
    "car",
    "going",
    "reuse",
    "class",
    "create",
    "second",
    "car",
    "create",
    "car",
    "2",
    "equals",
    "car",
    "pass",
    "different",
    "arguments",
    "corvette",
    "year",
    "2025",
    "color",
    "blue",
    "car",
    "sale",
    "let",
    "say",
    "true",
    "instead",
    "accessing",
    "car",
    "1",
    "attributes",
    "let",
    "access",
    "car",
    "2",
    "attributes",
    "would",
    "give",
    "us",
    "corvette",
    "year",
    "2025",
    "color",
    "blue",
    "sale",
    "set",
    "true",
    "even",
    "third",
    "car",
    "car",
    "3",
    "equals",
    "new",
    "car",
    "pass",
    "string",
    "charger",
    "year",
    "2026",
    "color",
    "yellow",
    "car",
    "sale",
    "let",
    "say",
    "true",
    "well",
    "print",
    "car",
    "3",
    "attributes",
    "model",
    "charger",
    "year",
    "2026",
    "color",
    "yellow",
    "sale",
    "set",
    "true",
    "classes",
    "take",
    "lot",
    "space",
    "better",
    "organization",
    "place",
    "within",
    "new",
    "python",
    "file",
    "let",
    "cut",
    "class",
    "create",
    "new",
    "python",
    "file",
    "within",
    "project",
    "folder",
    "file",
    "new",
    "python",
    "file",
    "name",
    "python",
    "file",
    "going",
    "lowercase",
    "car",
    "paste",
    "class",
    "cut",
    "originally",
    "class",
    "car",
    "capital",
    "c",
    "main",
    "python",
    "file",
    "going",
    "import",
    "car",
    "file",
    "car",
    "module",
    "name",
    "module",
    "car",
    "import",
    "name",
    "class",
    "car",
    "run",
    "program",
    "nothing",
    "change",
    "still",
    "access",
    "car",
    "objects",
    "could",
    "either",
    "keep",
    "classes",
    "within",
    "main",
    "python",
    "file",
    "import",
    "would",
    "like",
    "organize",
    "things",
    "let",
    "talk",
    "methods",
    "methods",
    "actions",
    "objects",
    "perform",
    "within",
    "class",
    "define",
    "method",
    "drive",
    "self",
    "going",
    "provided",
    "us",
    "invoke",
    "drive",
    "function",
    "let",
    "print",
    "drive",
    "car",
    "things",
    "cars",
    "let",
    "stop",
    "print",
    "stop",
    "car",
    "let",
    "take",
    "car1",
    "access",
    "drive",
    "method",
    "drive",
    "car",
    "car",
    "2",
    "also",
    "drive",
    "method",
    "drive",
    "car",
    "thing",
    "car",
    "3",
    "drive",
    "car",
    "let",
    "access",
    "stop",
    "method",
    "car",
    "one",
    "stop",
    "car",
    "stop",
    "car",
    "stop",
    "methods",
    "identical",
    "car",
    "object",
    "instead",
    "printing",
    "word",
    "car",
    "let",
    "insert",
    "model",
    "car",
    "convert",
    "print",
    "statements",
    "f",
    "strings",
    "instead",
    "word",
    "car",
    "let",
    "add",
    "placeholder",
    "let",
    "add",
    "self",
    "model",
    "self",
    "referring",
    "object",
    "currently",
    "working",
    "use",
    "attribute",
    "axis",
    "operator",
    "followed",
    "name",
    "attribute",
    "let",
    "also",
    "stop",
    "method",
    "self",
    "model",
    "let",
    "take",
    "car",
    "one",
    "use",
    "drive",
    "method",
    "drive",
    "mustang",
    "car",
    "one",
    "stop",
    "drive",
    "mustang",
    "stop",
    "mustang",
    "let",
    "car",
    "2",
    "drive",
    "corvette",
    "stop",
    "corvette",
    "car",
    "three",
    "drive",
    "charger",
    "stop",
    "charger",
    "within",
    "f",
    "strings",
    "let",
    "also",
    "insert",
    "let",
    "insert",
    "color",
    "add",
    "placeholder",
    "self",
    "color",
    "stop",
    "well",
    "self",
    "color",
    "drive",
    "yellow",
    "charger",
    "stop",
    "yellow",
    "charger",
    "car",
    "one",
    "drive",
    "red",
    "mustang",
    "stop",
    "red",
    "mustang",
    "card",
    "drive",
    "blue",
    "corvette",
    "stop",
    "blue",
    "corvette",
    "let",
    "add",
    "one",
    "last",
    "method",
    "let",
    "create",
    "method",
    "describe",
    "car",
    "print",
    "details",
    "car",
    "let",
    "print",
    "use",
    "f",
    "string",
    "add",
    "three",
    "placeholders",
    "let",
    "print",
    "year",
    "followed",
    "self",
    "color",
    "self",
    "model",
    "take",
    "car",
    "1",
    "use",
    "describe",
    "method",
    "created",
    "describe",
    "car",
    "1",
    "car",
    "1",
    "2024",
    "red",
    "mustang",
    "describe",
    "car",
    "2",
    "car",
    "2",
    "2025",
    "blue",
    "corvette",
    "car",
    "3",
    "2026",
    "yellow",
    "charger",
    "right",
    "everybody",
    "objects",
    "python",
    "object",
    "bundle",
    "related",
    "attributes",
    "attributes",
    "variables",
    "object",
    "methods",
    "methods",
    "functions",
    "belong",
    "object",
    "define",
    "object",
    "well",
    "everybody",
    "summary",
    "programming",
    "using",
    "python",
    "hey",
    "everybody",
    "today",
    "got",
    "talk",
    "class",
    "variables",
    "python",
    "class",
    "variables",
    "shared",
    "among",
    "instances",
    "meaning",
    "objects",
    "created",
    "class",
    "instance",
    "variables",
    "defined",
    "inside",
    "constructor",
    "class",
    "variables",
    "defined",
    "outside",
    "constructor",
    "class",
    "variables",
    "allow",
    "share",
    "data",
    "among",
    "objects",
    "created",
    "class",
    "instance",
    "variables",
    "object",
    "version",
    "class",
    "variable",
    "objects",
    "share",
    "one",
    "variable",
    "example",
    "create",
    "class",
    "student",
    "also",
    "need",
    "constructor",
    "create",
    "student",
    "object",
    "construct",
    "structor",
    "automatically",
    "going",
    "called",
    "need",
    "pass",
    "arguments",
    "provided",
    "self",
    "self",
    "refers",
    "object",
    "currently",
    "working",
    "set",
    "name",
    "parameter",
    "age",
    "parameter",
    "assign",
    "self",
    "object",
    "currently",
    "working",
    "set",
    "name",
    "attribute",
    "equal",
    "data",
    "name",
    "receive",
    "parameter",
    "self",
    "ag",
    "equals",
    "age",
    "let",
    "let",
    "construct",
    "two",
    "student",
    "objects",
    "student",
    "one",
    "equals",
    "call",
    "constructor",
    "student",
    "type",
    "name",
    "class",
    "followed",
    "set",
    "parentheses",
    "invoke",
    "automatically",
    "call",
    "constructor",
    "pass",
    "data",
    "name",
    "age",
    "name",
    "let",
    "pass",
    "spongebob",
    "basically",
    "everybody",
    "world",
    "knows",
    "spongebob",
    "know",
    "old",
    "spongebob",
    "say",
    "30",
    "create",
    "another",
    "student",
    "object",
    "refer",
    "student",
    "2",
    "call",
    "constructor",
    "student",
    "class",
    "pass",
    "data",
    "name",
    "age",
    "student",
    "two",
    "patrick",
    "patrick",
    "35",
    "okay",
    "let",
    "make",
    "sure",
    "works",
    "let",
    "print",
    "student",
    "1",
    "name",
    "followed",
    "student",
    "1",
    "age",
    "get",
    "spongebob",
    "age",
    "30",
    "let",
    "print",
    "student",
    "2",
    "name",
    "student",
    "2",
    "age",
    "patrick",
    "patrick",
    "35",
    "create",
    "class",
    "variable",
    "class",
    "variables",
    "defined",
    "outside",
    "constructor",
    "shared",
    "among",
    "objects",
    "created",
    "class",
    "object",
    "name",
    "age",
    "property",
    "instance",
    "variables",
    "class",
    "variables",
    "defined",
    "outside",
    "constructor",
    "object",
    "share",
    "one",
    "variable",
    "working",
    "students",
    "let",
    "say",
    "class",
    "variable",
    "class",
    "year",
    "graduating",
    "year",
    "class",
    "2024",
    "let",
    "print",
    "student",
    "1",
    "graduating",
    "year",
    "print",
    "student",
    "one",
    "class",
    "year",
    "okay",
    "spongebob",
    "class",
    "year",
    "2024",
    "graduating",
    "let",
    "check",
    "student",
    "two",
    "patrick",
    "ages",
    "35",
    "graduating",
    "class",
    "year",
    "2024",
    "class",
    "variables",
    "access",
    "one",
    "object",
    "student",
    "one",
    "student",
    "2",
    "good",
    "practice",
    "access",
    "class",
    "variable",
    "name",
    "class",
    "rather",
    "object",
    "created",
    "class",
    "since",
    "accessing",
    "class",
    "year",
    "access",
    "class",
    "variable",
    "name",
    "class",
    "student",
    "make",
    "sure",
    "capital",
    "helps",
    "clarity",
    "readability",
    "looking",
    "print",
    "statement",
    "tell",
    "class",
    "year",
    "class",
    "variable",
    "accessing",
    "directly",
    "class",
    "instance",
    "class",
    "without",
    "looking",
    "class",
    "ca",
    "tell",
    "class",
    "year",
    "instance",
    "variable",
    "class",
    "variable",
    "access",
    "via",
    "class",
    "name",
    "explicit",
    "good",
    "practice",
    "access",
    "class",
    "variable",
    "class",
    "name",
    "one",
    "instance",
    "class",
    "let",
    "create",
    "another",
    "class",
    "variable",
    "create",
    "class",
    "variable",
    "keep",
    "track",
    "many",
    "students",
    "created",
    "class",
    "variable",
    "num",
    "students",
    "meaning",
    "number",
    "students",
    "equals",
    "z",
    "within",
    "constructor",
    "write",
    "code",
    "want",
    "code",
    "always",
    "executed",
    "instantiate",
    "object",
    "would",
    "like",
    "take",
    "number",
    "students",
    "increment",
    "one",
    "time",
    "construct",
    "new",
    "student",
    "object",
    "instead",
    "using",
    "self",
    "self",
    "refers",
    "object",
    "currently",
    "working",
    "constructing",
    "student",
    "one",
    "imagine",
    "replacing",
    "self",
    "student",
    "one",
    "student",
    "two",
    "constructing",
    "student",
    "two",
    "going",
    "modifying",
    "class",
    "variable",
    "place",
    "self",
    "use",
    "name",
    "class",
    "student",
    "access",
    "class",
    "student",
    "get",
    "class",
    "variable",
    "number",
    "students",
    "increment",
    "one",
    "plus",
    "equals",
    "1",
    "constructing",
    "two",
    "student",
    "objects",
    "print",
    "access",
    "class",
    "student",
    "get",
    "number",
    "students",
    "print",
    "constructing",
    "two",
    "student",
    "objects",
    "print",
    "number",
    "students",
    "two",
    "sure",
    "working",
    "let",
    "construct",
    "third",
    "student",
    "object",
    "student",
    "3",
    "equals",
    "student",
    "student",
    "name",
    "squidward",
    "squidward",
    "age",
    "55",
    "three",
    "students",
    "good",
    "measure",
    "let",
    "construct",
    "one",
    "student",
    "4",
    "equals",
    "create",
    "new",
    "student",
    "name",
    "sandy",
    "sy",
    "age",
    "27",
    "number",
    "students",
    "four",
    "exercise",
    "using",
    "fst",
    "string",
    "let",
    "print",
    "student",
    "classes",
    "class",
    "year",
    "well",
    "number",
    "students",
    "print",
    "use",
    "fing",
    "graduating",
    "class",
    "let",
    "add",
    "placeholder",
    "access",
    "class",
    "student",
    "access",
    "class",
    "year",
    "graduating",
    "class",
    "2024",
    "need",
    "number",
    "students",
    "add",
    "placeholder",
    "access",
    "class",
    "student",
    "access",
    "number",
    "students",
    "blank",
    "students",
    "let",
    "see",
    "works",
    "graduating",
    "class",
    "2024",
    "four",
    "students",
    "change",
    "2024",
    "2025",
    "graduating",
    "class",
    "2025",
    "four",
    "students",
    "let",
    "print",
    "name",
    "student",
    "instance",
    "variables",
    "student",
    "one",
    "name",
    "need",
    "student",
    "two",
    "three",
    "four",
    "graduating",
    "class",
    "2025",
    "four",
    "students",
    "spongebob",
    "patrick",
    "squidward",
    "sandy",
    "right",
    "everybody",
    "class",
    "variables",
    "class",
    "variables",
    "shared",
    "among",
    "instances",
    "class",
    "defined",
    "outside",
    "constructor",
    "benefit",
    "allow",
    "share",
    "data",
    "among",
    "objects",
    "created",
    "class",
    "everybody",
    "class",
    "variables",
    "python",
    "going",
    "everybody",
    "today",
    "got",
    "talk",
    "inheritance",
    "python",
    "inheritance",
    "allows",
    "class",
    "inherit",
    "attributes",
    "methods",
    "another",
    "class",
    "much",
    "like",
    "child",
    "real",
    "life",
    "inherit",
    "traits",
    "parent",
    "class",
    "inherit",
    "attributes",
    "methods",
    "another",
    "class",
    "helps",
    "code",
    "reusability",
    "extensibility",
    "example",
    "going",
    "create",
    "animal",
    "class",
    "dog",
    "cat",
    "mouse",
    "class",
    "inherit",
    "attributes",
    "methods",
    "animal",
    "class",
    "create",
    "class",
    "animal",
    "define",
    "constructor",
    "construct",
    "animal",
    "object",
    "let",
    "pass",
    "name",
    "required",
    "might",
    "good",
    "example",
    "assign",
    "attribute",
    "name",
    "equal",
    "name",
    "receive",
    "let",
    "also",
    "add",
    "attribute",
    "alive",
    "whenever",
    "create",
    "animal",
    "set",
    "alive",
    "attribute",
    "true",
    "capital",
    "animals",
    "eat",
    "define",
    "eat",
    "print",
    "using",
    "f",
    "string",
    "add",
    "placeholder",
    "self",
    "name",
    "name",
    "animal",
    "eating",
    "animals",
    "able",
    "sleep",
    "define",
    "sleep",
    "print",
    "use",
    "fst",
    "string",
    "insert",
    "self",
    "name",
    "sleeping",
    "need",
    "animal",
    "class",
    "let",
    "define",
    "class",
    "dog",
    "child",
    "class",
    "inherit",
    "attributes",
    "methods",
    "another",
    "class",
    "class",
    "name",
    "going",
    "inherit",
    "need",
    "add",
    "inheritance",
    "list",
    "set",
    "parentheses",
    "list",
    "name",
    "class",
    "inheriting",
    "parent",
    "dog",
    "class",
    "going",
    "inherit",
    "attributes",
    "methods",
    "parent",
    "animal",
    "time",
    "placeholder",
    "add",
    "pass",
    "demonstrate",
    "class",
    "cat",
    "also",
    "going",
    "inherit",
    "animal",
    "class",
    "mouse",
    "also",
    "inherit",
    "animal",
    "okay",
    "collapse",
    "create",
    "dog",
    "object",
    "dog",
    "equals",
    "dog",
    "pass",
    "name",
    "dog",
    "one",
    "parameter",
    "set",
    "name",
    "dog",
    "named",
    "scooby",
    "cat",
    "equals",
    "call",
    "cat",
    "constructor",
    "cat",
    "named",
    "garfield",
    "mouse",
    "mouse",
    "equals",
    "mouse",
    "mouse",
    "name",
    "mickey",
    "even",
    "though",
    "nothing",
    "within",
    "dog",
    "cat",
    "mouse",
    "class",
    "still",
    "attributes",
    "methods",
    "inherit",
    "animal",
    "class",
    "name",
    "attribute",
    "alive",
    "attribute",
    "set",
    "true",
    "eat",
    "sleep",
    "let",
    "print",
    "dog",
    "name",
    "dog",
    "name",
    "scooby",
    "print",
    "dog",
    "alive",
    "dog",
    "alive",
    "true",
    "let",
    "dog",
    "object",
    "use",
    "eat",
    "method",
    "scooby",
    "eating",
    "sleep",
    "dog",
    "sleep",
    "scooby",
    "sleeping",
    "let",
    "replace",
    "dog",
    "cat",
    "name",
    "cat",
    "garfield",
    "garfield",
    "alive",
    "garfield",
    "eating",
    "garfield",
    "sleeping",
    "mouse",
    "replace",
    "instance",
    "cat",
    "mouse",
    "mouse",
    "name",
    "mickey",
    "mickey",
    "alive",
    "mickey",
    "eating",
    "mickey",
    "sleeping",
    "even",
    "though",
    "children",
    "classes",
    "empty",
    "still",
    "inheriting",
    "attributes",
    "methods",
    "parent",
    "animal",
    "convenient",
    "need",
    "copy",
    "paste",
    "attributes",
    "methods",
    "every",
    "single",
    "class",
    "example",
    "copy",
    "attributes",
    "methods",
    "paste",
    "well",
    "lot",
    "codee",
    "write",
    "consequence",
    "need",
    "make",
    "change",
    "one",
    "methods",
    "would",
    "every",
    "single",
    "instance",
    "method",
    "example",
    "let",
    "replace",
    "sleeping",
    "asleep",
    "well",
    "need",
    "find",
    "every",
    "single",
    "sleep",
    "method",
    "change",
    "manually",
    "bad",
    "classes",
    "imagine",
    "hundreds",
    "classes",
    "going",
    "take",
    "lot",
    "work",
    "lot",
    "easier",
    "write",
    "code",
    "reuse",
    "need",
    "make",
    "change",
    "one",
    "place",
    "rather",
    "make",
    "change",
    "many",
    "times",
    "let",
    "change",
    "sleeping",
    "asleep",
    "see",
    "works",
    "mickey",
    "asleep",
    "let",
    "replace",
    "mouse",
    "dog",
    "scooby",
    "asleep",
    "children",
    "classes",
    "attributes",
    "methods",
    "different",
    "one",
    "another",
    "dogs",
    "attributes",
    "methods",
    "speak",
    "let",
    "create",
    "speak",
    "method",
    "print",
    "unique",
    "message",
    "dogs",
    "woof",
    "cats",
    "also",
    "speak",
    "method",
    "going",
    "different",
    "cats",
    "meow",
    "mouse",
    "class",
    "squeak",
    "let",
    "dog",
    "speak",
    "woof",
    "let",
    "cat",
    "speak",
    "meow",
    "mouse",
    "squeak",
    "right",
    "everybody",
    "introduction",
    "inheritance",
    "inheritance",
    "allows",
    "class",
    "inherit",
    "attributes",
    "methods",
    "another",
    "class",
    "much",
    "like",
    "real",
    "life",
    "child",
    "inherit",
    "traits",
    "parent",
    "also",
    "known",
    "sub",
    "super",
    "classes",
    "topic",
    "another",
    "day",
    "inheritance",
    "helps",
    "code",
    "reusability",
    "extensibility",
    "children",
    "classes",
    "inherit",
    "attributes",
    "methods",
    "another",
    "class",
    "need",
    "write",
    "code",
    "copy",
    "every",
    "single",
    "class",
    "needs",
    "write",
    "change",
    "code",
    "one",
    "place",
    "better",
    "reusability",
    "extensibility",
    "well",
    "everybody",
    "introduction",
    "inheritance",
    "python",
    "hey",
    "everybody",
    "today",
    "got",
    "talk",
    "multiple",
    "inheritance",
    "begin",
    "multiple",
    "inheritance",
    "child",
    "class",
    "inherits",
    "one",
    "parent",
    "class",
    "example",
    "class",
    "c",
    "inherit",
    "traits",
    "class",
    "b",
    "python",
    "one",
    "parent",
    "inheritance",
    "talk",
    "near",
    "end",
    "topic",
    "example",
    "going",
    "create",
    "two",
    "parent",
    "classes",
    "prey",
    "write",
    "pass",
    "predator",
    "create",
    "class",
    "rabbit",
    "class",
    "hawk",
    "class",
    "fish",
    "rabbit",
    "hawk",
    "fish",
    "going",
    "children",
    "classes",
    "prey",
    "predator",
    "parents",
    "one",
    "classes",
    "rabbit",
    "hawk",
    "fish",
    "inherit",
    "prey",
    "get",
    "ability",
    "flee",
    "define",
    "method",
    "flee",
    "example",
    "print",
    "following",
    "text",
    "animal",
    "fleeing",
    "predator",
    "get",
    "method",
    "hunt",
    "define",
    "hunt",
    "print",
    "animal",
    "hunting",
    "rabbits",
    "inherit",
    "prey",
    "class",
    "typically",
    "predators",
    "except",
    "one",
    "rabbit",
    "monty",
    "python",
    "holy",
    "grail",
    "exception",
    "rabbit",
    "inherit",
    "prey",
    "class",
    "gets",
    "access",
    "flea",
    "method",
    "hawks",
    "predators",
    "inherit",
    "predator",
    "class",
    "fish",
    "hunt",
    "smaller",
    "fish",
    "flee",
    "bigger",
    "fish",
    "could",
    "consider",
    "fish",
    "prey",
    "predators",
    "inherit",
    "classes",
    "use",
    "multiple",
    "inheritance",
    "inherit",
    "everything",
    "prey",
    "class",
    "predator",
    "class",
    "let",
    "see",
    "fact",
    "work",
    "create",
    "rabbit",
    "object",
    "rabbit",
    "equals",
    "rabbit",
    "parameter",
    "setup",
    "need",
    "send",
    "arguments",
    "constructor",
    "hawk",
    "equals",
    "hawk",
    "fish",
    "equals",
    "fish",
    "let",
    "take",
    "rabbit",
    "object",
    "flea",
    "method",
    "rabbit",
    "flea",
    "method",
    "animal",
    "fleeing",
    "hunt",
    "method",
    "predators",
    "rabbit",
    "object",
    "attribute",
    "hunt",
    "hawks",
    "hunt",
    "predators",
    "inherited",
    "method",
    "animal",
    "hunting",
    "ca",
    "flee",
    "prey",
    "hawk",
    "object",
    "attribute",
    "flea",
    "fish",
    "inherit",
    "prey",
    "class",
    "predator",
    "class",
    "fish",
    "flee",
    "animal",
    "fleeing",
    "fish",
    "hunt",
    "animal",
    "hunting",
    "children",
    "classes",
    "inherit",
    "one",
    "parent",
    "fish",
    "prey",
    "predators",
    "whereas",
    "rabbits",
    "prey",
    "hawks",
    "predators",
    "need",
    "inherit",
    "one",
    "parent",
    "add",
    "additional",
    "class",
    "inheritance",
    "list",
    "inheritance",
    "parent",
    "inherit",
    "another",
    "parent",
    "create",
    "class",
    "animal",
    "write",
    "pass",
    "prey",
    "predator",
    "going",
    "inherit",
    "animal",
    "class",
    "need",
    "add",
    "animal",
    "inheritance",
    "list",
    "let",
    "say",
    "animal",
    "get",
    "method",
    "eat",
    "animals",
    "eat",
    "print",
    "animal",
    "eating",
    "sleep",
    "define",
    "sleep",
    "print",
    "animal",
    "sleeping",
    "think",
    "rabbit",
    "hawk",
    "fish",
    "children",
    "classes",
    "prey",
    "predator",
    "class",
    "parents",
    "animal",
    "grandparent",
    "prey",
    "predator",
    "inherit",
    "everything",
    "animal",
    "class",
    "rabbit",
    "hawk",
    "fish",
    "inherit",
    "everything",
    "prey",
    "predator",
    "classes",
    "rabbit",
    "hawk",
    "fish",
    "classes",
    "ability",
    "eat",
    "sleep",
    "test",
    "rabbit",
    "eat",
    "animal",
    "eating",
    "rabbit",
    "sleep",
    "animal",
    "sleeping",
    "let",
    "check",
    "fish",
    "fish",
    "eat",
    "animal",
    "eating",
    "fish",
    "sleep",
    "animal",
    "sleeping",
    "okay",
    "going",
    "expand",
    "upon",
    "example",
    "little",
    "bit",
    "let",
    "zoom",
    "objects",
    "going",
    "name",
    "rabbit",
    "first",
    "name",
    "bugs",
    "hawk",
    "tony",
    "tony",
    "hawk",
    "fish",
    "nemo",
    "within",
    "classes",
    "constructor",
    "set",
    "class",
    "assign",
    "name",
    "attribute",
    "let",
    "within",
    "animal",
    "class",
    "define",
    "constructor",
    "assign",
    "attributes",
    "receive",
    "name",
    "assign",
    "self",
    "name",
    "equals",
    "name",
    "classes",
    "assigning",
    "attributes",
    "need",
    "initialization",
    "logic",
    "need",
    "constructor",
    "implicitly",
    "use",
    "constructor",
    "inherit",
    "parent",
    "let",
    "convert",
    "print",
    "statements",
    "f",
    "string",
    "replace",
    "animal",
    "self",
    "name",
    "let",
    "rabbit",
    "use",
    "e",
    "method",
    "oh",
    "get",
    "rid",
    "go",
    "bugs",
    "eating",
    "rabbit",
    "sleep",
    "bugs",
    "sleeping",
    "rabbit",
    "flee",
    "bugs",
    "fleeing",
    "let",
    "check",
    "hawk",
    "hawks",
    "flea",
    "method",
    "predators",
    "prey",
    "let",
    "eat",
    "tony",
    "eating",
    "let",
    "sleep",
    "tony",
    "sleeping",
    "let",
    "hunt",
    "tony",
    "hunting",
    "let",
    "check",
    "fish",
    "next",
    "fish",
    "eat",
    "nemo",
    "eating",
    "fish",
    "sleep",
    "nemo",
    "sleeping",
    "flee",
    "nemo",
    "fleeing",
    "hunt",
    "nemo",
    "hunting",
    "okay",
    "everybody",
    "multiple",
    "inheritance",
    "multiple",
    "inheritance",
    "child",
    "inherit",
    "one",
    "parent",
    "class",
    "add",
    "additional",
    "class",
    "inheritance",
    "list",
    "inheritance",
    "child",
    "inherit",
    "parent",
    "inherits",
    "another",
    "parent",
    "class",
    "c",
    "inherit",
    "b",
    "class",
    "b",
    "inherits",
    "think",
    "c",
    "child",
    "b",
    "parent",
    "grandparent",
    "c",
    "attributes",
    "methods",
    "even",
    "available",
    "within",
    "grandparent",
    "class",
    "well",
    "everybody",
    "multiple",
    "inheritance",
    "python",
    "hey",
    "everybody",
    "today",
    "got",
    "talk",
    "super",
    "function",
    "python",
    "super",
    "function",
    "used",
    "within",
    "child",
    "class",
    "call",
    "methods",
    "parent",
    "class",
    "child",
    "class",
    "subass",
    "parent",
    "class",
    "super",
    "class",
    "hence",
    "function",
    "named",
    "super",
    "function",
    "using",
    "super",
    "function",
    "allows",
    "extend",
    "functionality",
    "inherited",
    "methods",
    "example",
    "create",
    "shape",
    "object",
    "objects",
    "need",
    "set",
    "classes",
    "though",
    "class",
    "circle",
    "time",
    "write",
    "pass",
    "fill",
    "later",
    "class",
    "square",
    "class",
    "triangle",
    "classes",
    "order",
    "instantiate",
    "objects",
    "need",
    "constructor",
    "define",
    "constructor",
    "init",
    "method",
    "creating",
    "circles",
    "sorts",
    "attributes",
    "circle",
    "let",
    "say",
    "color",
    "color",
    "circle",
    "filled",
    "fil",
    "another",
    "attribute",
    "radius",
    "let",
    "assign",
    "self",
    "color",
    "equals",
    "color",
    "receive",
    "self",
    "filled",
    "equals",
    "filled",
    "self",
    "rius",
    "equals",
    "radius",
    "let",
    "square",
    "triangle",
    "really",
    "copy",
    "constructor",
    "paste",
    "squares",
    "radius",
    "square",
    "width",
    "height",
    "let",
    "replace",
    "radius",
    "width",
    "also",
    "keep",
    "color",
    "filled",
    "attributes",
    "self",
    "width",
    "equals",
    "width",
    "triangles",
    "let",
    "copy",
    "constructor",
    "need",
    "width",
    "height",
    "self",
    "height",
    "equals",
    "height",
    "programming",
    "try",
    "repeat",
    "classes",
    "common",
    "share",
    "attributes",
    "color",
    "filled",
    "ways",
    "different",
    "circle",
    "radius",
    "attribute",
    "square",
    "width",
    "triangle",
    "width",
    "height",
    "make",
    "changes",
    "one",
    "attributes",
    "would",
    "manually",
    "example",
    "let",
    "replace",
    "filled",
    "filed",
    "need",
    "look",
    "throughout",
    "code",
    "instance",
    "filled",
    "replace",
    "filled",
    "lot",
    "work",
    "might",
    "make",
    "mistake",
    "better",
    "write",
    "code",
    "try",
    "reuse",
    "inheritance",
    "super",
    "function",
    "come",
    "handy",
    "going",
    "take",
    "attributes",
    "color",
    "filled",
    "place",
    "within",
    "parent",
    "class",
    "children",
    "classes",
    "inherit",
    "attributes",
    "class",
    "common",
    "shapes",
    "class",
    "shape",
    "write",
    "pass",
    "circle",
    "going",
    "inherit",
    "parent",
    "shape",
    "also",
    "applies",
    "square",
    "triangle",
    "set",
    "constructor",
    "shape",
    "define",
    "init",
    "pass",
    "color",
    "filled",
    "assign",
    "attributes",
    "self",
    "color",
    "equals",
    "color",
    "self",
    "filled",
    "equals",
    "filled",
    "need",
    "manually",
    "assign",
    "attributes",
    "within",
    "constructors",
    "children",
    "instead",
    "within",
    "constructor",
    "children",
    "classes",
    "call",
    "constructor",
    "parent",
    "also",
    "known",
    "super",
    "class",
    "shape",
    "eliminate",
    "two",
    "lines",
    "code",
    "use",
    "super",
    "function",
    "dot",
    "call",
    "constructor",
    "parent",
    "dunder",
    "init",
    "method",
    "need",
    "pass",
    "color",
    "receive",
    "filled",
    "boolean",
    "let",
    "square",
    "class",
    "triangle",
    "class",
    "still",
    "need",
    "radius",
    "circle",
    "width",
    "square",
    "width",
    "height",
    "triangle",
    "going",
    "call",
    "super",
    "function",
    "take",
    "care",
    "whatever",
    "attributes",
    "types",
    "shapes",
    "common",
    "color",
    "filled",
    "let",
    "see",
    "works",
    "let",
    "construct",
    "objects",
    "create",
    "circle",
    "named",
    "circle",
    "call",
    "constructor",
    "circle",
    "pass",
    "color",
    "boolean",
    "filled",
    "radius",
    "color",
    "circle",
    "let",
    "say",
    "red",
    "filled",
    "let",
    "say",
    "true",
    "radius",
    "five",
    "could",
    "even",
    "use",
    "keyword",
    "arguments",
    "better",
    "readability",
    "although",
    "necessary",
    "clarity",
    "let",
    "say",
    "color",
    "equals",
    "red",
    "filled",
    "equals",
    "true",
    "radius",
    "equals",
    "5",
    "let",
    "see",
    "works",
    "print",
    "circle",
    "color",
    "red",
    "print",
    "colors",
    "filled",
    "attribute",
    "circle",
    "filled",
    "true",
    "radius",
    "print",
    "circle",
    "radius",
    "radius",
    "circle",
    "five",
    "could",
    "even",
    "convert",
    "f",
    "string",
    "add",
    "placeholder",
    "add",
    "centim",
    "5",
    "cm",
    "let",
    "construct",
    "square",
    "object",
    "square",
    "equals",
    "square",
    "need",
    "color",
    "filled",
    "width",
    "copy",
    "make",
    "changes",
    "replace",
    "radius",
    "width",
    "color",
    "blue",
    "filled",
    "false",
    "width",
    "six",
    "need",
    "height",
    "squares",
    "even",
    "width",
    "height",
    "ever",
    "need",
    "height",
    "assume",
    "width",
    "case",
    "six",
    "let",
    "check",
    "square",
    "square",
    "color",
    "square",
    "dot",
    "filled",
    "square",
    "width",
    "square",
    "blue",
    "filled",
    "width",
    "6",
    "cm",
    "let",
    "create",
    "triangle",
    "object",
    "triangle",
    "equals",
    "triangle",
    "pass",
    "arguments",
    "color",
    "yellow",
    "filled",
    "true",
    "width",
    "seven",
    "height",
    "eight",
    "let",
    "print",
    "triangle",
    "color",
    "filled",
    "width",
    "height",
    "triangle",
    "yellow",
    "filled",
    "width",
    "7",
    "cm",
    "height",
    "8",
    "cm",
    "use",
    "super",
    "super",
    "function",
    "reuse",
    "constructor",
    "parent",
    "class",
    "need",
    "manually",
    "assign",
    "attributes",
    "within",
    "children",
    "classes",
    "one",
    "place",
    "refer",
    "super",
    "imagine",
    "replacing",
    "parent",
    "class",
    "name",
    "shape",
    "might",
    "good",
    "way",
    "think",
    "use",
    "constructor",
    "parent",
    "class",
    "shape",
    "pass",
    "arguments",
    "could",
    "well",
    "extend",
    "functionality",
    "method",
    "within",
    "shape",
    "class",
    "let",
    "create",
    "method",
    "describe",
    "describe",
    "attributes",
    "shape",
    "print",
    "use",
    "fst",
    "string",
    "want",
    "describe",
    "shape",
    "let",
    "say",
    "placeholder",
    "self",
    "color",
    "color",
    "shape",
    "filled",
    "add",
    "placeholder",
    "use",
    "turn",
    "ar",
    "operator",
    "print",
    "filled",
    "self",
    "filled",
    "true",
    "else",
    "print",
    "filled",
    "types",
    "shapes",
    "circle",
    "square",
    "triangle",
    "access",
    "describe",
    "method",
    "let",
    "attempt",
    "use",
    "take",
    "circle",
    "use",
    "describe",
    "method",
    "inherited",
    "red",
    "filled",
    "square",
    "blue",
    "filled",
    "triangle",
    "yellow",
    "filled",
    "also",
    "method",
    "overwriting",
    "create",
    "similar",
    "method",
    "describe",
    "within",
    "circle",
    "square",
    "triangle",
    "let",
    "define",
    "describe",
    "method",
    "within",
    "circle",
    "let",
    "c",
    "calculate",
    "area",
    "area",
    "circle",
    "use",
    "f",
    "string",
    "circle",
    "area",
    "calculate",
    "area",
    "given",
    "radius",
    "calculate",
    "area",
    "circle",
    "take",
    "pi",
    "say",
    "keep",
    "simple",
    "times",
    "radius",
    "squared",
    "self",
    "radius",
    "times",
    "self",
    "rius",
    "call",
    "describe",
    "method",
    "use",
    "parents",
    "version",
    "describe",
    "child",
    "let",
    "take",
    "circle",
    "use",
    "describe",
    "method",
    "result",
    "circle",
    "area",
    "really",
    "add",
    "cenim",
    "squar",
    "ctim",
    "squared",
    "called",
    "method",
    "overwriting",
    "child",
    "shares",
    "similar",
    "method",
    "parent",
    "use",
    "child",
    "version",
    "parents",
    "method",
    "overwriting",
    "would",
    "like",
    "extend",
    "functionality",
    "method",
    "parent",
    "use",
    "super",
    "function",
    "want",
    "use",
    "describe",
    "method",
    "child",
    "would",
    "also",
    "like",
    "use",
    "describe",
    "method",
    "parent",
    "within",
    "function",
    "use",
    "super",
    "function",
    "access",
    "describe",
    "method",
    "parent",
    "extending",
    "functionality",
    "descrip",
    "method",
    "circle",
    "area",
    "cm",
    "squ",
    "circle",
    "red",
    "filled",
    "could",
    "change",
    "order",
    "let",
    "use",
    "parent",
    "classes",
    "describe",
    "method",
    "extend",
    "functionality",
    "print",
    "statement",
    "red",
    "filled",
    "circle",
    "area",
    "cm",
    "squ",
    "let",
    "finish",
    "square",
    "triangle",
    "classes",
    "copy",
    "described",
    "method",
    "within",
    "circle",
    "class",
    "make",
    "different",
    "calculation",
    "describe",
    "square",
    "square",
    "area",
    "take",
    "self",
    "width",
    "times",
    "self",
    "width",
    "height",
    "width",
    "going",
    "square",
    "describe",
    "triangle",
    "triangle",
    "area",
    "width",
    "time",
    "height",
    "height",
    "case",
    "divided",
    "two",
    "already",
    "described",
    "circle",
    "let",
    "describe",
    "square",
    "square",
    "area",
    "36",
    "cm",
    "squ",
    "blue",
    "filled",
    "let",
    "describe",
    "triangle",
    "triangle",
    "area",
    "cm",
    "squ",
    "yellow",
    "filled",
    "right",
    "everybody",
    "super",
    "function",
    "used",
    "child",
    "class",
    "call",
    "methods",
    "parent",
    "class",
    "also",
    "known",
    "super",
    "class",
    "allows",
    "extend",
    "functionality",
    "inherited",
    "methods",
    "within",
    "child",
    "class",
    "could",
    "use",
    "within",
    "constructor",
    "assign",
    "attributes",
    "siblings",
    "common",
    "color",
    "shape",
    "filled",
    "used",
    "within",
    "method",
    "extend",
    "functionality",
    "method",
    "printing",
    "message",
    "parent",
    "tacking",
    "another",
    "print",
    "statement",
    "well",
    "everybody",
    "super",
    "function",
    "python",
    "going",
    "everybody",
    "today",
    "got",
    "talk",
    "polymorphism",
    "python",
    "polymorphism",
    "programming",
    "concept",
    "greek",
    "word",
    "means",
    "many",
    "forms",
    "faces",
    "poly",
    "means",
    "many",
    "morph",
    "means",
    "form",
    "programming",
    "object",
    "take",
    "one",
    "many",
    "forms",
    "two",
    "ways",
    "achieve",
    "polymorphism",
    "one",
    "inheritance",
    "object",
    "could",
    "treated",
    "type",
    "parent",
    "class",
    "also",
    "duck",
    "typing",
    "talk",
    "next",
    "topic",
    "video",
    "focused",
    "inheritance",
    "video",
    "create",
    "class",
    "shape",
    "write",
    "pass",
    "placeholder",
    "create",
    "class",
    "circle",
    "inherit",
    "shape",
    "writing",
    "pass",
    "class",
    "square",
    "inherits",
    "shape",
    "class",
    "triangle",
    "inherits",
    "shape",
    "create",
    "circle",
    "object",
    "circle",
    "equals",
    "circle",
    "circle",
    "identifies",
    "circle",
    "since",
    "circle",
    "class",
    "inherits",
    "shape",
    "class",
    "circle",
    "also",
    "considered",
    "shape",
    "two",
    "forms",
    "circle",
    "shape",
    "circle",
    "square",
    "triangle",
    "could",
    "also",
    "apply",
    "square",
    "class",
    "square",
    "square",
    "square",
    "also",
    "considered",
    "shape",
    "square",
    "circle",
    "triangle",
    "two",
    "possible",
    "forms",
    "square",
    "square",
    "shape",
    "let",
    "say",
    "would",
    "like",
    "create",
    "list",
    "shapes",
    "common",
    "well",
    "shapes",
    "descriptive",
    "name",
    "list",
    "would",
    "shapes",
    "equals",
    "empty",
    "list",
    "instantiate",
    "circle",
    "object",
    "object",
    "square",
    "object",
    "triangle",
    "object",
    "circle",
    "circle",
    "shape",
    "square",
    "square",
    "shape",
    "triangle",
    "triangle",
    "shape",
    "objects",
    "two",
    "forms",
    "two",
    "faces",
    "let",
    "fill",
    "classes",
    "let",
    "say",
    "shape",
    "class",
    "define",
    "area",
    "method",
    "define",
    "area",
    "going",
    "turn",
    "abstract",
    "method",
    "meod",
    "write",
    "pass",
    "work",
    "abstract",
    "classes",
    "need",
    "import",
    "abc",
    "import",
    "capital",
    "abc",
    "well",
    "abstract",
    "method",
    "preceding",
    "area",
    "method",
    "add",
    "decorator",
    "abstract",
    "method",
    "circle",
    "square",
    "triangle",
    "classes",
    "considered",
    "shapes",
    "inherit",
    "class",
    "need",
    "define",
    "area",
    "method",
    "since",
    "considered",
    "shape",
    "every",
    "shape",
    "area",
    "class",
    "circle",
    "let",
    "define",
    "constructor",
    "define",
    "nit",
    "pass",
    "one",
    "argument",
    "radius",
    "radius",
    "circle",
    "assign",
    "attribute",
    "radius",
    "equals",
    "radius",
    "receive",
    "let",
    "square",
    "define",
    "innit",
    "one",
    "parameter",
    "length",
    "side",
    "self",
    "side",
    "equal",
    "side",
    "triangle",
    "define",
    "init",
    "two",
    "parameters",
    "base",
    "height",
    "self",
    "base",
    "equals",
    "base",
    "self",
    "height",
    "equals",
    "height",
    "right",
    "let",
    "finish",
    "defining",
    "area",
    "methods",
    "class",
    "return",
    "time",
    "self",
    "radius",
    "two",
    "given",
    "radius",
    "calculate",
    "area",
    "circle",
    "square",
    "define",
    "area",
    "return",
    "self",
    "side",
    "power",
    "two",
    "triangle",
    "define",
    "area",
    "return",
    "self",
    "bas",
    "time",
    "self",
    "height",
    "time",
    "pass",
    "arguments",
    "circle",
    "need",
    "radius",
    "pick",
    "four",
    "square",
    "length",
    "side",
    "five",
    "triangle",
    "base",
    "six",
    "height",
    "seven",
    "going",
    "write",
    "loop",
    "iterate",
    "shapes",
    "every",
    "shape",
    "shapes",
    "going",
    "print",
    "every",
    "shape",
    "called",
    "area",
    "method",
    "would",
    "give",
    "numbers",
    "would",
    "like",
    "format",
    "output",
    "use",
    "f",
    "string",
    "add",
    "cm",
    "squared",
    "much",
    "better",
    "create",
    "class",
    "completely",
    "unrelated",
    "shapes",
    "create",
    "class",
    "pizza",
    "define",
    "constructor",
    "construct",
    "pizza",
    "object",
    "need",
    "topping",
    "radius",
    "radius",
    "pizza",
    "self",
    "topping",
    "equals",
    "topping",
    "self",
    "rius",
    "equals",
    "radius",
    "within",
    "list",
    "shapes",
    "add",
    "pizza",
    "object",
    "pass",
    "topping",
    "pepperoni",
    "radius",
    "pizza",
    "let",
    "say",
    "15",
    "cm",
    "pizza",
    "pizza",
    "class",
    "area",
    "method",
    "happens",
    "run",
    "get",
    "attribute",
    "error",
    "pizza",
    "object",
    "attribute",
    "area",
    "pizza",
    "object",
    "considered",
    "pizza",
    "considered",
    "shape",
    "inherit",
    "shape",
    "class",
    "top",
    "know",
    "pizza",
    "circular",
    "could",
    "considered",
    "circle",
    "let",
    "take",
    "pizza",
    "class",
    "inherit",
    "circle",
    "class",
    "within",
    "circle",
    "class",
    "already",
    "assigning",
    "radius",
    "radius",
    "attribute",
    "instead",
    "within",
    "constructor",
    "pizza",
    "class",
    "let",
    "call",
    "super",
    "constructor",
    "super",
    "refers",
    "parent",
    "use",
    "constructor",
    "pass",
    "radius",
    "receive",
    "let",
    "see",
    "works",
    "area",
    "pizza",
    "pizza",
    "considered",
    "pizza",
    "inherits",
    "circle",
    "class",
    "also",
    "considered",
    "circle",
    "circle",
    "class",
    "inherits",
    "shape",
    "class",
    "pizza",
    "three",
    "forms",
    "pizza",
    "considered",
    "pizza",
    "also",
    "considered",
    "circle",
    "also",
    "considered",
    "shape",
    "would",
    "make",
    "sense",
    "fit",
    "list",
    "shapes",
    "pizza",
    "also",
    "identifies",
    "shape",
    "polymorphism",
    "everybody",
    "greek",
    "word",
    "meaning",
    "many",
    "forms",
    "faces",
    "poly",
    "meaning",
    "many",
    "morph",
    "meaning",
    "form",
    "python",
    "two",
    "ways",
    "achieve",
    "polymorphism",
    "one",
    "inheritance",
    "object",
    "could",
    "treated",
    "type",
    "parent",
    "also",
    "duck",
    "typing",
    "discuss",
    "next",
    "topic",
    "stay",
    "tuned",
    "well",
    "everybody",
    "polymorphism",
    "python",
    "hey",
    "everybody",
    "today",
    "got",
    "talk",
    "duck",
    "typing",
    "python",
    "duck",
    "typing",
    "another",
    "way",
    "achieve",
    "polymorphism",
    "besides",
    "using",
    "inheritance",
    "objects",
    "treated",
    "different",
    "type",
    "long",
    "meet",
    "minimum",
    "necessary",
    "attributes",
    "methods",
    "required",
    "follows",
    "adage",
    "looks",
    "like",
    "duck",
    "quacks",
    "like",
    "duck",
    "must",
    "duck",
    "long",
    "object",
    "resembles",
    "another",
    "could",
    "also",
    "treated",
    "type",
    "example",
    "let",
    "create",
    "class",
    "animal",
    "class",
    "attribute",
    "aive",
    "animal",
    "attribute",
    "aive",
    "living",
    "creature",
    "let",
    "create",
    "class",
    "dog",
    "dog",
    "class",
    "inherit",
    "animal",
    "class",
    "inherit",
    "alive",
    "attribute",
    "let",
    "also",
    "define",
    "speak",
    "method",
    "dog",
    "gain",
    "ability",
    "speak",
    "print",
    "woof",
    "create",
    "cat",
    "class",
    "class",
    "cat",
    "inherits",
    "animal",
    "speak",
    "method",
    "print",
    "meow",
    "let",
    "create",
    "list",
    "animals",
    "two",
    "classes",
    "common",
    "could",
    "considered",
    "animals",
    "let",
    "create",
    "list",
    "animals",
    "construct",
    "dog",
    "object",
    "cat",
    "object",
    "write",
    "loop",
    "every",
    "animal",
    "list",
    "animals",
    "animal",
    "use",
    "speak",
    "method",
    "result",
    "dog",
    "going",
    "woof",
    "cat",
    "going",
    "meow",
    "speaking",
    "add",
    "class",
    "nothing",
    "animals",
    "like",
    "class",
    "car",
    "cars",
    "horn",
    "method",
    "speak",
    "honk",
    "horn",
    "print",
    "honk",
    "within",
    "list",
    "animals",
    "let",
    "create",
    "car",
    "object",
    "really",
    "belong",
    "let",
    "see",
    "happens",
    "attribute",
    "error",
    "car",
    "object",
    "attribute",
    "speak",
    "car",
    "object",
    "minimum",
    "necessary",
    "attributes",
    "methods",
    "iterating",
    "list",
    "animals",
    "calling",
    "animal",
    "speak",
    "method",
    "car",
    "object",
    "horn",
    "method",
    "rename",
    "horn",
    "method",
    "speak",
    "maybe",
    "ai",
    "car",
    "something",
    "well",
    "woodwork",
    "dog",
    "goes",
    "woof",
    "cat",
    "goes",
    "meow",
    "car",
    "goes",
    "honk",
    "car",
    "object",
    "quacks",
    "like",
    "duck",
    "could",
    "consider",
    "duck",
    "minimum",
    "necessary",
    "methods",
    "considered",
    "animal",
    "animals",
    "inherit",
    "alive",
    "attribute",
    "let",
    "utilize",
    "animal",
    "speaks",
    "let",
    "print",
    "alive",
    "attribute",
    "print",
    "animals",
    "al",
    "live",
    "attribute",
    "car",
    "object",
    "attribute",
    "get",
    "attribute",
    "error",
    "car",
    "object",
    "attribute",
    "alive",
    "add",
    "attribute",
    "alive",
    "equals",
    "false",
    "true",
    "dog",
    "living",
    "true",
    "cat",
    "living",
    "false",
    "car",
    "living",
    "living",
    "creature",
    "car",
    "meets",
    "minimum",
    "necessary",
    "requirements",
    "considered",
    "animal",
    "set",
    "alive",
    "well",
    "would",
    "living",
    "car",
    "kind",
    "like",
    "movie",
    "cars",
    "python",
    "duck",
    "typing",
    "another",
    "way",
    "achieve",
    "polymorphism",
    "besides",
    "using",
    "inheritance",
    "long",
    "object",
    "minimum",
    "necessary",
    "attributes",
    "methods",
    "could",
    "treat",
    "different",
    "type",
    "object",
    "looks",
    "like",
    "duck",
    "quacks",
    "like",
    "duck",
    "must",
    "duck",
    "well",
    "everybody",
    "duck",
    "typing",
    "python",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "talk",
    "static",
    "methods",
    "python",
    "static",
    "method",
    "method",
    "belongs",
    "class",
    "rather",
    "object",
    "class",
    "instance",
    "instance",
    "methods",
    "already",
    "familiar",
    "methods",
    "belong",
    "individual",
    "objects",
    "created",
    "class",
    "best",
    "operations",
    "instances",
    "class",
    "objects",
    "whereas",
    "static",
    "methods",
    "best",
    "utility",
    "functions",
    "within",
    "class",
    "need",
    "access",
    "class",
    "data",
    "demonstrate",
    "differences",
    "instance",
    "method",
    "static",
    "method",
    "begin",
    "creating",
    "class",
    "employee",
    "need",
    "constructor",
    "let",
    "define",
    "create",
    "employee",
    "object",
    "need",
    "name",
    "job",
    "position",
    "assign",
    "self",
    "name",
    "equals",
    "name",
    "equals",
    "position",
    "create",
    "instance",
    "method",
    "get",
    "info",
    "return",
    "employee",
    "info",
    "return",
    "fst",
    "string",
    "display",
    "self",
    "name",
    "equals",
    "get",
    "info",
    "instance",
    "method",
    "object",
    "create",
    "class",
    "get",
    "info",
    "method",
    "return",
    "information",
    "object",
    "object",
    "name",
    "object",
    "position",
    "create",
    "static",
    "method",
    "create",
    "static",
    "method",
    "need",
    "decorator",
    "static",
    "method",
    "static",
    "methods",
    "best",
    "general",
    "utility",
    "functions",
    "within",
    "class",
    "define",
    "method",
    "check",
    "see",
    "job",
    "position",
    "valid",
    "name",
    "valid",
    "position",
    "static",
    "methods",
    "self",
    "first",
    "argument",
    "working",
    "objects",
    "created",
    "class",
    "check",
    "see",
    "position",
    "valid",
    "pass",
    "job",
    "position",
    "name",
    "position",
    "create",
    "list",
    "valid",
    "positions",
    "let",
    "assume",
    "crusty",
    "crab",
    "valid",
    "positions",
    "manager",
    "valid",
    "position",
    "cashier",
    "cook",
    "let",
    "say",
    "janitor",
    "return",
    "use",
    "membership",
    "operator",
    "check",
    "position",
    "receive",
    "list",
    "valid",
    "positions",
    "done",
    "created",
    "static",
    "method",
    "need",
    "rely",
    "objects",
    "use",
    "method",
    "example",
    "use",
    "static",
    "method",
    "use",
    "name",
    "class",
    "rather",
    "object",
    "create",
    "class",
    "need",
    "type",
    "class",
    "name",
    "followed",
    "static",
    "method",
    "valid",
    "position",
    "set",
    "accept",
    "one",
    "argument",
    "let",
    "check",
    "see",
    "cook",
    "valid",
    "position",
    "need",
    "print",
    "output",
    "cook",
    "valid",
    "position",
    "rocket",
    "scientist",
    "would",
    "probably",
    "job",
    "false",
    "rocket",
    "scientist",
    "valid",
    "position",
    "crusty",
    "crab",
    "static",
    "method",
    "belongs",
    "class",
    "object",
    "created",
    "class",
    "let",
    "create",
    "employee",
    "objects",
    "let",
    "say",
    "employee",
    "1",
    "equals",
    "new",
    "employee",
    "pass",
    "name",
    "job",
    "eugene",
    "first",
    "name",
    "mr",
    "krabs",
    "manager",
    "employee",
    "2",
    "equals",
    "employee",
    "squidward",
    "cashier",
    "employee",
    "3",
    "equals",
    "employee",
    "employee",
    "3",
    "spongebob",
    "spongebob",
    "cook",
    "call",
    "instance",
    "method",
    "access",
    "one",
    "instances",
    "class",
    "order",
    "use",
    "want",
    "check",
    "info",
    "employee",
    "1",
    "access",
    "object",
    "instance",
    "use",
    "get",
    "info",
    "method",
    "need",
    "print",
    "take",
    "employee",
    "one",
    "get",
    "info",
    "eugene",
    "manager",
    "let",
    "employee",
    "2",
    "employee",
    "3",
    "eugene",
    "mr",
    "krabs",
    "manager",
    "squidward",
    "cashier",
    "spongebob",
    "cook",
    "instance",
    "method",
    "access",
    "object",
    "call",
    "instance",
    "method",
    "static",
    "method",
    "need",
    "access",
    "class",
    "even",
    "need",
    "create",
    "objects",
    "class",
    "general",
    "utility",
    "method",
    "right",
    "everybody",
    "static",
    "methods",
    "method",
    "belongs",
    "class",
    "rather",
    "objects",
    "created",
    "class",
    "usually",
    "used",
    "general",
    "utility",
    "functions",
    "need",
    "access",
    "class",
    "data",
    "well",
    "everybody",
    "static",
    "methods",
    "python",
    "hey",
    "going",
    "people",
    "today",
    "got",
    "talk",
    "class",
    "methods",
    "python",
    "class",
    "method",
    "allows",
    "operations",
    "related",
    "class",
    "take",
    "cls",
    "first",
    "parameter",
    "whereas",
    "instance",
    "methods",
    "take",
    "self",
    "self",
    "refers",
    "object",
    "created",
    "class",
    "cls",
    "meaning",
    "class",
    "refers",
    "class",
    "objects",
    "example",
    "create",
    "class",
    "student",
    "need",
    "constructor",
    "construct",
    "student",
    "objects",
    "students",
    "name",
    "gpa",
    "self",
    "name",
    "equals",
    "name",
    "self",
    "gpa",
    "equals",
    "gpa",
    "also",
    "create",
    "class",
    "variable",
    "demonstration",
    "count",
    "count",
    "many",
    "students",
    "create",
    "whenever",
    "construct",
    "student",
    "object",
    "access",
    "class",
    "student",
    "take",
    "count",
    "variable",
    "increment",
    "one",
    "whenever",
    "create",
    "student",
    "object",
    "increase",
    "count",
    "one",
    "create",
    "instance",
    "method",
    "get",
    "info",
    "instance",
    "methods",
    "self",
    "first",
    "parameter",
    "referring",
    "object",
    "currently",
    "working",
    "return",
    "f",
    "string",
    "display",
    "students",
    "name",
    "gpa",
    "self",
    "name",
    "self",
    "gpa",
    "add",
    "comment",
    "instance",
    "method",
    "create",
    "class",
    "method",
    "work",
    "class",
    "data",
    "declare",
    "class",
    "method",
    "class",
    "method",
    "decorator",
    "class",
    "method",
    "going",
    "define",
    "method",
    "get",
    "count",
    "class",
    "variable",
    "count",
    "method",
    "called",
    "get",
    "count",
    "rather",
    "self",
    "first",
    "parameter",
    "working",
    "class",
    "cls",
    "meaning",
    "class",
    "return",
    "f",
    "string",
    "total",
    "number",
    "students",
    "placeholder",
    "cls",
    "count",
    "let",
    "test",
    "call",
    "class",
    "method",
    "take",
    "name",
    "class",
    "followed",
    "class",
    "method",
    "get",
    "count",
    "need",
    "print",
    "count",
    "current",
    "students",
    "total",
    "number",
    "students",
    "zero",
    "let",
    "create",
    "student",
    "objects",
    "create",
    "student",
    "one",
    "equals",
    "called",
    "student",
    "constructor",
    "pass",
    "name",
    "gpa",
    "let",
    "say",
    "name",
    "spongebob",
    "spongebob",
    "gpa",
    "create",
    "two",
    "students",
    "student",
    "two",
    "student",
    "three",
    "student",
    "two",
    "patrick",
    "patrick",
    "sandy",
    "sandy",
    "smart",
    "fact",
    "genius",
    "perfect",
    "let",
    "count",
    "number",
    "students",
    "total",
    "number",
    "students",
    "three",
    "call",
    "class",
    "method",
    "access",
    "modify",
    "class",
    "data",
    "class",
    "variable",
    "count",
    "rather",
    "using",
    "self",
    "use",
    "cls",
    "class",
    "let",
    "create",
    "one",
    "class",
    "method",
    "time",
    "calculate",
    "total",
    "gpa",
    "students",
    "need",
    "class",
    "variable",
    "hold",
    "data",
    "let",
    "say",
    "total",
    "gpa",
    "equals",
    "0",
    "whenever",
    "construct",
    "student",
    "object",
    "access",
    "class",
    "student",
    "get",
    "total",
    "gpa",
    "add",
    "plus",
    "equals",
    "student",
    "gpa",
    "created",
    "basically",
    "speaking",
    "total",
    "gpa",
    "variable",
    "going",
    "accumulate",
    "gpa",
    "every",
    "student",
    "store",
    "sum",
    "find",
    "average",
    "going",
    "divide",
    "count",
    "number",
    "students",
    "within",
    "class",
    "method",
    "create",
    "class",
    "method",
    "need",
    "use",
    "class",
    "method",
    "decorator",
    "define",
    "method",
    "get",
    "average",
    "gpa",
    "first",
    "parameter",
    "cls",
    "class",
    "check",
    "cls",
    "count",
    "count",
    "variable",
    "class",
    "equal",
    "zero",
    "means",
    "students",
    "case",
    "students",
    "going",
    "return",
    "zero",
    "otherwise",
    "going",
    "divide",
    "zero",
    "get",
    "erir",
    "else",
    "going",
    "return",
    "f",
    "string",
    "follow",
    "formula",
    "going",
    "take",
    "total",
    "gpa",
    "class",
    "class",
    "total",
    "gpa",
    "divided",
    "class",
    "count",
    "number",
    "students",
    "calculate",
    "average",
    "gpa",
    "getting",
    "count",
    "number",
    "students",
    "access",
    "class",
    "method",
    "take",
    "name",
    "class",
    "student",
    "call",
    "class",
    "method",
    "get",
    "average",
    "gpa",
    "print",
    "total",
    "number",
    "students",
    "three",
    "average",
    "gpa",
    "repeating",
    "calculating",
    "average",
    "going",
    "add",
    "format",
    "specifier",
    "2f",
    "around",
    "two",
    "decimal",
    "places",
    "add",
    "average",
    "gpa",
    "coin",
    "space",
    "calculate",
    "average",
    "right",
    "everybody",
    "class",
    "methods",
    "instance",
    "methods",
    "best",
    "operations",
    "instances",
    "class",
    "objects",
    "static",
    "methods",
    "best",
    "general",
    "utility",
    "functions",
    "need",
    "access",
    "class",
    "data",
    "class",
    "methods",
    "best",
    "used",
    "working",
    "class",
    "level",
    "data",
    "require",
    "access",
    "class",
    "working",
    "class",
    "variables",
    "rather",
    "using",
    "self",
    "first",
    "parameter",
    "going",
    "use",
    "cls",
    "meaning",
    "class",
    "well",
    "everybody",
    "class",
    "methods",
    "python",
    "yo",
    "going",
    "people",
    "today",
    "going",
    "explain",
    "magic",
    "methods",
    "python",
    "magic",
    "methods",
    "also",
    "known",
    "dunder",
    "methods",
    "meaning",
    "double",
    "underscore",
    "typically",
    "find",
    "within",
    "classes",
    "already",
    "familiar",
    "one",
    "dunder",
    "init",
    "method",
    "double",
    "underscores",
    "left",
    "double",
    "underscores",
    "right",
    "others",
    "cover",
    "beginner",
    "friendly",
    "ones",
    "methods",
    "automatically",
    "called",
    "using",
    "pythons",
    "operations",
    "printing",
    "object",
    "seeing",
    "two",
    "objects",
    "equal",
    "greater",
    "less",
    "use",
    "many",
    "python",
    "operations",
    "objects",
    "define",
    "customize",
    "behavior",
    "objects",
    "demonstration",
    "going",
    "create",
    "class",
    "book",
    "construct",
    "book",
    "objects",
    "define",
    "magic",
    "method",
    "dunder",
    "method",
    "init",
    "initialize",
    "objects",
    "book",
    "need",
    "title",
    "author",
    "number",
    "pages",
    "say",
    "num",
    "pages",
    "self",
    "tile",
    "equals",
    "title",
    "self",
    "author",
    "equals",
    "author",
    "self",
    "number",
    "pages",
    "equals",
    "number",
    "pages",
    "call",
    "class",
    "book",
    "automatically",
    "calling",
    "dunder",
    "init",
    "let",
    "create",
    "book",
    "object",
    "book",
    "one",
    "equals",
    "book",
    "need",
    "title",
    "author",
    "number",
    "pages",
    "since",
    "dealing",
    "topic",
    "magic",
    "methods",
    "pick",
    "fantasy",
    "related",
    "books",
    "first",
    "book",
    "book",
    "pick",
    "hobbit",
    "title",
    "author",
    "jrr",
    "token",
    "number",
    "pages",
    "310",
    "next",
    "book",
    "book",
    "two",
    "pick",
    "harry",
    "potter",
    "philosopher",
    "stone",
    "author",
    "j",
    "k",
    "rolling",
    "number",
    "pages",
    "223",
    "book",
    "three",
    "third",
    "book",
    "pick",
    "lion",
    "witch",
    "wardrobe",
    "author",
    "cs",
    "lewis",
    "number",
    "pages",
    "172",
    "okay",
    "three",
    "free",
    "book",
    "objects",
    "call",
    "class",
    "book",
    "pass",
    "arguments",
    "call",
    "dunder",
    "init",
    "method",
    "magic",
    "method",
    "automatically",
    "called",
    "behind",
    "scenes",
    "within",
    "magic",
    "method",
    "define",
    "customize",
    "behavior",
    "objects",
    "example",
    "assigning",
    "attributes",
    "title",
    "author",
    "number",
    "pages",
    "one",
    "operation",
    "python",
    "would",
    "happen",
    "print",
    "book",
    "one",
    "directly",
    "console",
    "happens",
    "well",
    "given",
    "memory",
    "address",
    "book",
    "two",
    "book",
    "three",
    "well",
    "customize",
    "behavior",
    "use",
    "dunder",
    "string",
    "method",
    "double",
    "underscore",
    "st",
    "str",
    "meaning",
    "string",
    "double",
    "underscore",
    "one",
    "parameter",
    "self",
    "instead",
    "returning",
    "memory",
    "address",
    "customize",
    "behavior",
    "let",
    "instead",
    "return",
    "f",
    "string",
    "add",
    "two",
    "placeholders",
    "display",
    "self",
    "tile",
    "title",
    "book",
    "self",
    "author",
    "place",
    "title",
    "within",
    "single",
    "quotes",
    "let",
    "print",
    "book",
    "one",
    "hobbit",
    "jrr",
    "token",
    "let",
    "print",
    "book",
    "two",
    "harry",
    "potter",
    "philosopher",
    "stone",
    "jk",
    "rowling",
    "book",
    "three",
    "line",
    "witch",
    "wardrobe",
    "cs",
    "lewis",
    "thunder",
    "string",
    "return",
    "string",
    "representation",
    "object",
    "print",
    "directly",
    "console",
    "another",
    "dunder",
    "method",
    "check",
    "see",
    "two",
    "objects",
    "equal",
    "print",
    "book",
    "one",
    "equal",
    "book",
    "two",
    "gives",
    "false",
    "title",
    "author",
    "number",
    "pages",
    "python",
    "would",
    "say",
    "equal",
    "still",
    "let",
    "customize",
    "behavior",
    "define",
    "method",
    "dunder",
    "equals",
    "eq",
    "parameters",
    "self",
    "first",
    "book",
    "examining",
    "case",
    "book",
    "one",
    "means",
    "book",
    "examining",
    "two",
    "objects",
    "equality",
    "see",
    "title",
    "two",
    "books",
    "author",
    "disregard",
    "number",
    "pages",
    "two",
    "different",
    "versions",
    "book",
    "might",
    "different",
    "font",
    "sizes",
    "dimensions",
    "physical",
    "pages",
    "might",
    "different",
    "return",
    "boolean",
    "value",
    "examine",
    "self",
    "first",
    "book",
    "title",
    "attribute",
    "equal",
    "books",
    "title",
    "author",
    "first",
    "book",
    "self",
    "author",
    "equal",
    "books",
    "author",
    "run",
    "get",
    "false",
    "book",
    "one",
    "equal",
    "book",
    "two",
    "title",
    "going",
    "replace",
    "author",
    "would",
    "equal",
    "disregard",
    "number",
    "pages",
    "let",
    "say",
    "version",
    "hobbit",
    "using",
    "smaller",
    "font",
    "size",
    "less",
    "pages",
    "using",
    "dunder",
    "equals",
    "compare",
    "two",
    "objects",
    "equal",
    "print",
    "book",
    "two",
    "less",
    "book",
    "three",
    "like",
    "even",
    "mean",
    "going",
    "get",
    "rid",
    "two",
    "lines",
    "type",
    "error",
    "less",
    "supported",
    "instances",
    "book",
    "book",
    "ca",
    "use",
    "less",
    "two",
    "objects",
    "customize",
    "behavior",
    "using",
    "dunder",
    "less",
    "lt",
    "examining",
    "one",
    "book",
    "book",
    "self",
    "let",
    "compare",
    "number",
    "pages",
    "compare",
    "pages",
    "book",
    "two",
    "less",
    "book",
    "three",
    "return",
    "boolean",
    "value",
    "self",
    "number",
    "pages",
    "less",
    "number",
    "pages",
    "give",
    "us",
    "error",
    "book",
    "two",
    "less",
    "pages",
    "book",
    "three",
    "another",
    "would",
    "greater",
    "copy",
    "dunder",
    "gt",
    "greater",
    "first",
    "book",
    "self",
    "greater",
    "number",
    "pages",
    "book",
    "well",
    "true",
    "number",
    "pages",
    "book",
    "two",
    "greater",
    "book",
    "three",
    "let",
    "use",
    "thunder",
    "add",
    "add",
    "pages",
    "two",
    "books",
    "together",
    "would",
    "happen",
    "add",
    "two",
    "books",
    "together",
    "book",
    "two",
    "plus",
    "book",
    "3",
    "well",
    "get",
    "type",
    "error",
    "unsupported",
    "operand",
    "book",
    "book",
    "well",
    "customize",
    "behavior",
    "addition",
    "define",
    "dunder",
    "add",
    "self",
    "object",
    "let",
    "add",
    "pages",
    "together",
    "two",
    "books",
    "maybe",
    "need",
    "summer",
    "reading",
    "list",
    "would",
    "like",
    "see",
    "total",
    "number",
    "pages",
    "return",
    "self",
    "number",
    "pages",
    "attribute",
    "plus",
    "books",
    "number",
    "pages",
    "would",
    "give",
    "395",
    "223",
    "172",
    "heck",
    "even",
    "put",
    "within",
    "f",
    "string",
    "cuz",
    "add",
    "word",
    "pages",
    "395",
    "pages",
    "within",
    "object",
    "search",
    "keyword",
    "within",
    "one",
    "attributes",
    "let",
    "find",
    "word",
    "lion",
    "within",
    "book",
    "three",
    "would",
    "write",
    "statement",
    "like",
    "lion",
    "book",
    "three",
    "type",
    "error",
    "argument",
    "type",
    "book",
    "iterable",
    "define",
    "dunder",
    "contains",
    "besides",
    "self",
    "pass",
    "keyword",
    "keyword",
    "searching",
    "return",
    "use",
    "membership",
    "operator",
    "keyword",
    "self",
    "tile",
    "looking",
    "word",
    "lion",
    "going",
    "return",
    "true",
    "lion",
    "title",
    "book",
    "keyword",
    "self",
    "author",
    "maybe",
    "searching",
    "author",
    "let",
    "try",
    "returns",
    "true",
    "lion",
    "book",
    "three",
    "however",
    "lion",
    "within",
    "book",
    "one",
    "false",
    "rolling",
    "book",
    "two",
    "author",
    "true",
    "rolling",
    "book",
    "three",
    "false",
    "dund",
    "contains",
    "searching",
    "keyword",
    "object",
    "could",
    "search",
    "key",
    "given",
    "object",
    "book",
    "one",
    "use",
    "index",
    "operator",
    "look",
    "attribute",
    "let",
    "get",
    "title",
    "book",
    "one",
    "default",
    "behavior",
    "get",
    "type",
    "error",
    "book",
    "object",
    "subscriptable",
    "customize",
    "behavior",
    "use",
    "dund",
    "get",
    "item",
    "besides",
    "self",
    "one",
    "parameter",
    "key",
    "accessing",
    "book",
    "attributes",
    "indexing",
    "object",
    "return",
    "value",
    "key",
    "attribute",
    "check",
    "key",
    "receive",
    "equal",
    "title",
    "case",
    "return",
    "self",
    "tile",
    "title",
    "book",
    "would",
    "give",
    "hobbit",
    "book",
    "two",
    "book",
    "three",
    "key",
    "author",
    "none",
    "set",
    "yet",
    "key",
    "equal",
    "author",
    "return",
    "self",
    "author",
    "author",
    "book",
    "three",
    "cs",
    "lewis",
    "two",
    "jk",
    "rowling",
    "book",
    "one",
    "jrr",
    "tolken",
    "number",
    "pages",
    "num",
    "pages",
    "well",
    "set",
    "yet",
    "going",
    "turn",
    "el",
    "statement",
    "else",
    "key",
    "equal",
    "num",
    "pages",
    "return",
    "self",
    "num",
    "pages",
    "number",
    "pages",
    "book",
    "one",
    "310",
    "book",
    "two",
    "223",
    "book",
    "three",
    "172",
    "key",
    "otherwise",
    "matching",
    "key",
    "add",
    "l",
    "statement",
    "let",
    "let",
    "return",
    "f",
    "string",
    "key",
    "placeholder",
    "key",
    "pass",
    "argument",
    "found",
    "books",
    "well",
    "audio",
    "guess",
    "unless",
    "audio",
    "book",
    "key",
    "audio",
    "book",
    "three",
    "key",
    "audio",
    "found",
    "place",
    "within",
    "single",
    "quotes",
    "much",
    "better",
    "right",
    "everybody",
    "magic",
    "methods",
    "also",
    "known",
    "thunder",
    "methods",
    "meaning",
    "double",
    "underscore",
    "automatically",
    "called",
    "many",
    "python",
    "operations",
    "allow",
    "developers",
    "define",
    "customize",
    "behavior",
    "objects",
    "use",
    "operations",
    "well",
    "everybody",
    "magic",
    "methods",
    "python",
    "hey",
    "everybody",
    "today",
    "video",
    "got",
    "talk",
    "property",
    "decorator",
    "python",
    "property",
    "decorator",
    "allows",
    "us",
    "define",
    "method",
    "property",
    "access",
    "like",
    "attribute",
    "one",
    "benefits",
    "reading",
    "writing",
    "deleting",
    "attributes",
    "add",
    "additional",
    "logic",
    "property",
    "decorator",
    "gives",
    "us",
    "getter",
    "method",
    "read",
    "setter",
    "method",
    "write",
    "deleter",
    "method",
    "delete",
    "working",
    "attributes",
    "example",
    "create",
    "class",
    "rectangle",
    "need",
    "constructor",
    "let",
    "define",
    "constructing",
    "rectangle",
    "object",
    "need",
    "width",
    "height",
    "assign",
    "attribute",
    "width",
    "equal",
    "width",
    "receive",
    "constructing",
    "object",
    "self",
    "height",
    "equals",
    "height",
    "let",
    "construct",
    "rectangle",
    "object",
    "rectangle",
    "equals",
    "rectangle",
    "need",
    "pass",
    "width",
    "height",
    "print",
    "rectangles",
    "width",
    "rectangle",
    "width",
    "height",
    "rectangle",
    "height",
    "rectangle",
    "width",
    "three",
    "height",
    "four",
    "using",
    "property",
    "decorator",
    "reading",
    "attributes",
    "width",
    "height",
    "write",
    "additional",
    "logic",
    "let",
    "say",
    "accessing",
    "width",
    "height",
    "would",
    "like",
    "display",
    "one",
    "digit",
    "decimal",
    "add",
    "centimeters",
    "one",
    "way",
    "attributes",
    "going",
    "create",
    "method",
    "define",
    "method",
    "width",
    "parameters",
    "besid",
    "self",
    "write",
    "pass",
    "define",
    "height",
    "preceding",
    "methods",
    "use",
    "property",
    "decorator",
    "property",
    "accessing",
    "width",
    "height",
    "returned",
    "whatever",
    "within",
    "methods",
    "width",
    "height",
    "one",
    "change",
    "going",
    "make",
    "attributes",
    "set",
    "attributes",
    "private",
    "prefix",
    "attributes",
    "underscore",
    "tells",
    "developers",
    "attributes",
    "meant",
    "protected",
    "internal",
    "access",
    "width",
    "height",
    "directly",
    "outside",
    "class",
    "technically",
    "could",
    "access",
    "internal",
    "version",
    "width",
    "height",
    "get",
    "three",
    "four",
    "warning",
    "access",
    "protected",
    "member",
    "width",
    "class",
    "applies",
    "height",
    "well",
    "width",
    "height",
    "meant",
    "used",
    "inside",
    "class",
    "need",
    "get",
    "width",
    "height",
    "getter",
    "methods",
    "provided",
    "property",
    "decorator",
    "accessing",
    "width",
    "let",
    "return",
    "f",
    "string",
    "access",
    "self",
    "private",
    "width",
    "add",
    "format",
    "specifier",
    "display",
    "one",
    "digit",
    "decimal",
    "1f",
    "followed",
    "centim",
    "height",
    "well",
    "return",
    "self",
    "private",
    "height",
    "access",
    "width",
    "height",
    "using",
    "getter",
    "methods",
    "access",
    "private",
    "width",
    "height",
    "attributes",
    "instead",
    "three",
    "four",
    "kind",
    "like",
    "raw",
    "attributes",
    "meant",
    "used",
    "internally",
    "inside",
    "class",
    "point",
    "getter",
    "method",
    "add",
    "additional",
    "logic",
    "reading",
    "one",
    "attributes",
    "try",
    "get",
    "also",
    "add",
    "setter",
    "methods",
    "would",
    "like",
    "set",
    "write",
    "attributes",
    "let",
    "take",
    "width",
    "create",
    "decorator",
    "width",
    "setter",
    "attempting",
    "set",
    "width",
    "using",
    "method",
    "define",
    "method",
    "name",
    "width",
    "one",
    "parameter",
    "new",
    "width",
    "want",
    "parameter",
    "name",
    "method",
    "name",
    "naming",
    "something",
    "different",
    "setting",
    "width",
    "let",
    "check",
    "see",
    "new",
    "width",
    "greater",
    "zero",
    "take",
    "self",
    "private",
    "width",
    "equals",
    "new",
    "width",
    "else",
    "let",
    "print",
    "something",
    "let",
    "print",
    "width",
    "must",
    "greater",
    "zero",
    "let",
    "height",
    "height",
    "setter",
    "define",
    "height",
    "pass",
    "new",
    "height",
    "new",
    "height",
    "greater",
    "zero",
    "assign",
    "self",
    "private",
    "height",
    "equals",
    "new",
    "height",
    "else",
    "print",
    "height",
    "must",
    "greater",
    "zero",
    "printing",
    "width",
    "height",
    "let",
    "take",
    "rectangle",
    "width",
    "set",
    "zero",
    "see",
    "happens",
    "well",
    "get",
    "message",
    "width",
    "must",
    "greater",
    "zero",
    "set",
    "width",
    "five",
    "well",
    "work",
    "width",
    "five",
    "let",
    "change",
    "height",
    "rectangle",
    "height",
    "set",
    "nega",
    "1",
    "height",
    "must",
    "greater",
    "zero",
    "height",
    "changed",
    "six",
    "six",
    "work",
    "using",
    "setter",
    "methods",
    "add",
    "additional",
    "logic",
    "writing",
    "changing",
    "one",
    "attributes",
    "setter",
    "methods",
    "need",
    "delete",
    "attribute",
    "delete",
    "keyword",
    "delete",
    "rectangle",
    "width",
    "delete",
    "rectangle",
    "height",
    "series",
    "really",
    "wo",
    "using",
    "delete",
    "keyword",
    "still",
    "know",
    "exists",
    "create",
    "deleter",
    "method",
    "take",
    "one",
    "attributes",
    "example",
    "create",
    "deleter",
    "method",
    "method",
    "name",
    "width",
    "name",
    "attribute",
    "parameters",
    "besid",
    "self",
    "delete",
    "self",
    "private",
    "width",
    "let",
    "print",
    "something",
    "confirm",
    "deleted",
    "width",
    "deleted",
    "thing",
    "applies",
    "height",
    "take",
    "attribute",
    "height",
    "define",
    "height",
    "delete",
    "private",
    "height",
    "height",
    "deleted",
    "deleting",
    "width",
    "height",
    "get",
    "confirmation",
    "message",
    "width",
    "deleted",
    "height",
    "deleted",
    "right",
    "everybody",
    "property",
    "decorator",
    "define",
    "method",
    "property",
    "meaning",
    "accessed",
    "attribute",
    "one",
    "benefits",
    "add",
    "additional",
    "logic",
    "read",
    "write",
    "delete",
    "attributes",
    "property",
    "decorator",
    "gives",
    "us",
    "getter",
    "setter",
    "deleter",
    "method",
    "getter",
    "methods",
    "read",
    "setter",
    "methods",
    "write",
    "delete",
    "methods",
    "delete",
    "well",
    "everybody",
    "property",
    "decorator",
    "python",
    "going",
    "everybody",
    "today",
    "got",
    "talk",
    "decorators",
    "python",
    "decorator",
    "function",
    "extends",
    "behavior",
    "another",
    "function",
    "without",
    "modifying",
    "base",
    "function",
    "pass",
    "base",
    "function",
    "argument",
    "decorator",
    "function",
    "example",
    "let",
    "say",
    "base",
    "function",
    "get",
    "ice",
    "cream",
    "pass",
    "flavor",
    "ice",
    "cream",
    "well",
    "people",
    "might",
    "want",
    "sprinkles",
    "ice",
    "cream",
    "others",
    "may",
    "might",
    "want",
    "plain",
    "vanilla",
    "well",
    "could",
    "add",
    "sprinkles",
    "using",
    "decorator",
    "extending",
    "behavior",
    "function",
    "get",
    "ice",
    "cream",
    "adding",
    "sprinkles",
    "may",
    "want",
    "change",
    "base",
    "function",
    "people",
    "like",
    "sprinkles",
    "think",
    "decorators",
    "way",
    "adding",
    "something",
    "base",
    "function",
    "without",
    "changing",
    "create",
    "decorator",
    "let",
    "start",
    "base",
    "function",
    "create",
    "function",
    "get",
    "ice",
    "cream",
    "parameters",
    "going",
    "print",
    "following",
    "message",
    "ice",
    "cream",
    "fun",
    "add",
    "emoji",
    "like",
    "emojis",
    "add",
    "ice",
    "cream",
    "emoji",
    "call",
    "function",
    "got",
    "call",
    "get",
    "ice",
    "cream",
    "function",
    "ice",
    "cream",
    "create",
    "decorator",
    "decorator",
    "function",
    "need",
    "define",
    "define",
    "add",
    "sprinkles",
    "decorator",
    "function",
    "going",
    "one",
    "parameter",
    "function",
    "rename",
    "funk",
    "short",
    "going",
    "pass",
    "function",
    "decorator",
    "function",
    "within",
    "decorator",
    "function",
    "define",
    "inner",
    "function",
    "wrapper",
    "currently",
    "parameters",
    "set",
    "later",
    "within",
    "wrapper",
    "function",
    "call",
    "function",
    "receive",
    "parameter",
    "return",
    "wrapper",
    "function",
    "point",
    "returning",
    "values",
    "going",
    "return",
    "entire",
    "function",
    "basic",
    "formula",
    "create",
    "decorator",
    "apply",
    "decorator",
    "base",
    "function",
    "preceding",
    "function",
    "going",
    "add",
    "name",
    "decorator",
    "add",
    "sprinkles",
    "decorator",
    "base",
    "function",
    "get",
    "ice",
    "cream",
    "within",
    "decorator",
    "want",
    "add",
    "sprinkles",
    "exactly",
    "currently",
    "decorator",
    "anything",
    "happens",
    "print",
    "ice",
    "cream",
    "let",
    "say",
    "given",
    "ice",
    "cream",
    "print",
    "statement",
    "add",
    "sprinkles",
    "within",
    "decorator",
    "imagine",
    "replacing",
    "calling",
    "function",
    "print",
    "statement",
    "let",
    "create",
    "another",
    "print",
    "statement",
    "add",
    "sprinkles",
    "print",
    "following",
    "message",
    "add",
    "sprinkles",
    "add",
    "emoji",
    "confetti",
    "could",
    "resemble",
    "sprinkles",
    "okay",
    "let",
    "see",
    "happens",
    "add",
    "sprinkles",
    "ice",
    "cream",
    "decorating",
    "base",
    "function",
    "get",
    "ice",
    "cream",
    "decorator",
    "ad",
    "sprinkles",
    "modifying",
    "base",
    "function",
    "extending",
    "nested",
    "function",
    "wrapper",
    "within",
    "decorator",
    "necessary",
    "going",
    "call",
    "get",
    "ice",
    "cream",
    "function",
    "quite",
    "yet",
    "nothing",
    "happen",
    "remove",
    "wrapper",
    "well",
    "end",
    "calling",
    "function",
    "soon",
    "apply",
    "decorator",
    "even",
    "calling",
    "following",
    "get",
    "ice",
    "cream",
    "function",
    "want",
    "execute",
    "code",
    "want",
    "ice",
    "cream",
    "whenever",
    "apply",
    "decorator",
    "need",
    "wrapper",
    "function",
    "get",
    "ice",
    "cream",
    "add",
    "sprinkles",
    "call",
    "function",
    "point",
    "program",
    "call",
    "get",
    "ice",
    "cream",
    "function",
    "get",
    "ice",
    "cream",
    "sprinkles",
    "let",
    "apply",
    "one",
    "decorator",
    "create",
    "decorator",
    "add",
    "fudge",
    "define",
    "add",
    "fudge",
    "one",
    "parameter",
    "function",
    "rename",
    "funk",
    "need",
    "inner",
    "rapper",
    "function",
    "call",
    "function",
    "apply",
    "decorator",
    "print",
    "add",
    "fudge",
    "close",
    "enough",
    "add",
    "bar",
    "chocolate",
    "call",
    "base",
    "function",
    "receive",
    "need",
    "return",
    "wrapper",
    "function",
    "right",
    "given",
    "base",
    "function",
    "apply",
    "one",
    "decorator",
    "let",
    "say",
    "adding",
    "sprinkles",
    "apply",
    "decorator",
    "add",
    "fudge",
    "following",
    "output",
    "add",
    "sprinkles",
    "add",
    "fudge",
    "ice",
    "cream",
    "decorators",
    "apply",
    "one",
    "decorator",
    "base",
    "function",
    "base",
    "function",
    "accepts",
    "arguments",
    "example",
    "get",
    "ice",
    "cream",
    "need",
    "pass",
    "flavor",
    "like",
    "vanilla",
    "set",
    "one",
    "parameter",
    "flavor",
    "convert",
    "print",
    "statement",
    "f",
    "string",
    "add",
    "placeholder",
    "flavor",
    "ice",
    "cream",
    "let",
    "run",
    "see",
    "happens",
    "right",
    "type",
    "air",
    "wrapper",
    "function",
    "set",
    "accept",
    "arguments",
    "see",
    "within",
    "wrapper",
    "functions",
    "parameters",
    "args",
    "quars",
    "accept",
    "number",
    "arguments",
    "keyword",
    "arguments",
    "call",
    "base",
    "function",
    "case",
    "get",
    "ice",
    "cream",
    "also",
    "set",
    "accept",
    "number",
    "arguments",
    "keyword",
    "arguments",
    "let",
    "within",
    "ad",
    "fudge",
    "decorator",
    "wrapper",
    "function",
    "accept",
    "number",
    "arguments",
    "keyword",
    "arguments",
    "thing",
    "goes",
    "base",
    "function",
    "work",
    "add",
    "sprinkles",
    "add",
    "fudge",
    "vanilla",
    "ice",
    "cream",
    "flavor",
    "choosing",
    "like",
    "chocolate",
    "add",
    "sprinkles",
    "add",
    "fudge",
    "chocolate",
    "ice",
    "cream",
    "right",
    "everybody",
    "decorators",
    "function",
    "extends",
    "behavior",
    "base",
    "function",
    "case",
    "get",
    "ice",
    "cream",
    "decorators",
    "extend",
    "function",
    "without",
    "modifying",
    "would",
    "like",
    "apply",
    "decorator",
    "function",
    "precede",
    "function",
    "define",
    "name",
    "decorator",
    "apply",
    "one",
    "well",
    "everybody",
    "introduction",
    "decorators",
    "python",
    "hey",
    "everybody",
    "today",
    "got",
    "talk",
    "exception",
    "handling",
    "python",
    "exception",
    "event",
    "interrupts",
    "normal",
    "flow",
    "program",
    "many",
    "different",
    "types",
    "exceptions",
    "include",
    "limited",
    "zero",
    "division",
    "error",
    "exceptions",
    "attempt",
    "divide",
    "number",
    "zero",
    "example",
    "1",
    "divided",
    "0",
    "would",
    "interrupt",
    "program",
    "zero",
    "division",
    "error",
    "another",
    "type",
    "error",
    "attempt",
    "perform",
    "operation",
    "value",
    "wrong",
    "data",
    "type",
    "example",
    "1",
    "plus",
    "string",
    "one",
    "would",
    "give",
    "us",
    "type",
    "error",
    "unsupported",
    "operand",
    "int",
    "string",
    "value",
    "errors",
    "tend",
    "happen",
    "attempt",
    "typ",
    "cast",
    "value",
    "wrong",
    "data",
    "type",
    "let",
    "say",
    "attempt",
    "type",
    "cast",
    "word",
    "pizza",
    "integer",
    "well",
    "pizza",
    "number",
    "value",
    "error",
    "invalid",
    "literal",
    "int",
    "base",
    "10",
    "pizza",
    "exceptions",
    "interrupt",
    "program",
    "handled",
    "gracefully",
    "three",
    "steps",
    "write",
    "try",
    "accept",
    "finally",
    "block",
    "code",
    "dangerous",
    "could",
    "cause",
    "error",
    "place",
    "within",
    "tri",
    "block",
    "example",
    "anytime",
    "accept",
    "user",
    "input",
    "considered",
    "dangerous",
    "code",
    "user",
    "type",
    "anything",
    "let",
    "say",
    "number",
    "number",
    "equals",
    "accept",
    "user",
    "input",
    "tell",
    "user",
    "enter",
    "number",
    "going",
    "typ",
    "cast",
    "integer",
    "going",
    "print",
    "1",
    "divided",
    "whatever",
    "user",
    "types",
    "type",
    "zero",
    "get",
    "zero",
    "division",
    "error",
    "type",
    "word",
    "pizza",
    "get",
    "value",
    "error",
    "would",
    "like",
    "prevent",
    "program",
    "stopping",
    "code",
    "considered",
    "dangerous",
    "user",
    "really",
    "type",
    "anything",
    "going",
    "surround",
    "code",
    "within",
    "tri",
    "block",
    "type",
    "try",
    "colon",
    "indent",
    "code",
    "underneath",
    "going",
    "try",
    "code",
    "exception",
    "happens",
    "move",
    "step",
    "two",
    "subsequently",
    "following",
    "tri",
    "block",
    "add",
    "accept",
    "block",
    "run",
    "one",
    "exceptions",
    "execute",
    "alternative",
    "code",
    "example",
    "zero",
    "division",
    "error",
    "somebody",
    "attempts",
    "divide",
    "number",
    "zero",
    "take",
    "different",
    "course",
    "action",
    "instead",
    "program",
    "crashing",
    "coming",
    "halt",
    "let",
    "print",
    "ca",
    "divide",
    "zero",
    "idiot",
    "let",
    "attempt",
    "divide",
    "zero",
    "enter",
    "number",
    "zero",
    "ca",
    "divide",
    "zero",
    "idiot",
    "gracefully",
    "handled",
    "exception",
    "let",
    "say",
    "somebody",
    "types",
    "word",
    "pizza",
    "asking",
    "number",
    "well",
    "value",
    "error",
    "well",
    "chain",
    "accept",
    "blocks",
    "encounter",
    "value",
    "error",
    "let",
    "add",
    "accept",
    "block",
    "accept",
    "value",
    "error",
    "going",
    "print",
    "enter",
    "numbers",
    "please",
    "enter",
    "number",
    "type",
    "word",
    "pizza",
    "enter",
    "numbers",
    "please",
    "good",
    "interrupting",
    "program",
    "may",
    "see",
    "people",
    "catch",
    "exceptions",
    "accept",
    "exception",
    "actually",
    "considered",
    "bad",
    "practice",
    "exception",
    "catch",
    "exceptions",
    "however",
    "broad",
    "clause",
    "good",
    "practice",
    "tell",
    "user",
    "went",
    "wrong",
    "exactly",
    "resort",
    "catching",
    "exceptions",
    "may",
    "see",
    "error",
    "message",
    "something",
    "went",
    "wrong",
    "looking",
    "microsoft",
    "want",
    "tell",
    "user",
    "went",
    "wrong",
    "exactly",
    "would",
    "catch",
    "exceptions",
    "last",
    "resort",
    "first",
    "let",
    "try",
    "tell",
    "user",
    "went",
    "wrong",
    "exactly",
    "going",
    "undo",
    "code",
    "exception",
    "occurs",
    "zero",
    "division",
    "error",
    "value",
    "error",
    "add",
    "catch",
    "catch",
    "unseen",
    "except",
    "itions",
    "lastly",
    "finally",
    "block",
    "finally",
    "block",
    "always",
    "executes",
    "regardless",
    "exception",
    "usually",
    "used",
    "sort",
    "cleanup",
    "need",
    "handling",
    "files",
    "may",
    "try",
    "open",
    "file",
    "want",
    "sure",
    "close",
    "file",
    "done",
    "would",
    "handled",
    "within",
    "finally",
    "block",
    "get",
    "file",
    "handling",
    "pretty",
    "soon",
    "next",
    "topic",
    "time",
    "going",
    "print",
    "cleanup",
    "right",
    "let",
    "test",
    "enter",
    "number",
    "going",
    "divide",
    "zero",
    "ca",
    "divide",
    "zero",
    "still",
    "execute",
    "finally",
    "block",
    "enter",
    "number",
    "enter",
    "one",
    "1",
    "1",
    "1",
    "still",
    "execute",
    "finally",
    "block",
    "finally",
    "block",
    "useful",
    "future",
    "videos",
    "need",
    "know",
    "always",
    "executes",
    "regardless",
    "exception",
    "right",
    "everybody",
    "exception",
    "handling",
    "exception",
    "event",
    "interrupts",
    "normal",
    "flow",
    "program",
    "many",
    "different",
    "types",
    "exceptions",
    "always",
    "look",
    "official",
    "python",
    "documentation",
    "extensive",
    "list",
    "well",
    "everybody",
    "exception",
    "handling",
    "python",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "show",
    "handle",
    "basic",
    "file",
    "detection",
    "using",
    "python",
    "topic",
    "first",
    "many",
    "involving",
    "minseries",
    "file",
    "handling",
    "using",
    "python",
    "first",
    "need",
    "cover",
    "file",
    "detection",
    "read",
    "write",
    "files",
    "work",
    "files",
    "using",
    "python",
    "import",
    "os",
    "module",
    "os",
    "means",
    "operating",
    "system",
    "module",
    "provides",
    "way",
    "python",
    "programs",
    "interact",
    "operating",
    "system",
    "sure",
    "import",
    "os",
    "module",
    "top",
    "demonstration",
    "within",
    "project",
    "folder",
    "going",
    "create",
    "new",
    "file",
    "new",
    "file",
    "name",
    "file",
    "test",
    "plain",
    "text",
    "file",
    "file",
    "extension",
    "txt",
    "file",
    "really",
    "need",
    "say",
    "anything",
    "going",
    "type",
    "like",
    "pizza",
    "context",
    "matter",
    "going",
    "reading",
    "files",
    "video",
    "convenience",
    "going",
    "assign",
    "variable",
    "file",
    "path",
    "string",
    "file",
    "detection",
    "either",
    "use",
    "relative",
    "file",
    "path",
    "absolute",
    "file",
    "path",
    "cover",
    "relative",
    "file",
    "paths",
    "first",
    "two",
    "files",
    "right",
    "next",
    "main",
    "python",
    "file",
    "test",
    "file",
    "using",
    "relative",
    "file",
    "path",
    "need",
    "file",
    "name",
    "including",
    "extension",
    "passing",
    "string",
    "file",
    "path",
    "argument",
    "check",
    "see",
    "file",
    "exists",
    "use",
    "statement",
    "access",
    "os",
    "module",
    "access",
    "path",
    "method",
    "exists",
    "pass",
    "file",
    "path",
    "argument",
    "method",
    "returns",
    "boolean",
    "value",
    "true",
    "false",
    "file",
    "exists",
    "file",
    "exist",
    "let",
    "print",
    "following",
    "use",
    "f",
    "string",
    "location",
    "add",
    "placeholder",
    "exists",
    "place",
    "file",
    "path",
    "within",
    "place",
    "holder",
    "surround",
    "single",
    "quotes",
    "make",
    "look",
    "nice",
    "method",
    "returns",
    "true",
    "else",
    "something",
    "else",
    "print",
    "location",
    "exist",
    "right",
    "let",
    "see",
    "happens",
    "location",
    "exists",
    "get",
    "extension",
    "wrong",
    "let",
    "say",
    "looking",
    "pdf",
    "really",
    "txt",
    "file",
    "well",
    "location",
    "exist",
    "sure",
    "get",
    "file",
    "extension",
    "correct",
    "file",
    "folder",
    "within",
    "python",
    "project",
    "create",
    "new",
    "directory",
    "name",
    "directory",
    "stuff",
    "place",
    "test",
    "file",
    "within",
    "stuff",
    "folder",
    "pycharm",
    "wants",
    "refactor",
    "code",
    "location",
    "changed",
    "going",
    "going",
    "sure",
    "box",
    "unchecked",
    "press",
    "refactor",
    "using",
    "relative",
    "file",
    "path",
    "test",
    "file",
    "longer",
    "next",
    "main",
    "python",
    "file",
    "happens",
    "location",
    "exist",
    "relative",
    "file",
    "path",
    "navigate",
    "stuff",
    "folder",
    "find",
    "test",
    "file",
    "preing",
    "file",
    "name",
    "access",
    "stuff",
    "folder",
    "stuff",
    "slash",
    "name",
    "file",
    "locate",
    "file",
    "location",
    "stuff",
    "sl",
    "test",
    "exists",
    "working",
    "relative",
    "file",
    "paths",
    "may",
    "need",
    "open",
    "folder",
    "find",
    "file",
    "also",
    "could",
    "work",
    "absolute",
    "file",
    "paths",
    "demonstration",
    "desktop",
    "going",
    "create",
    "new",
    "file",
    "new",
    "text",
    "document",
    "text",
    "test",
    "look",
    "properties",
    "txt",
    "file",
    "text",
    "document",
    "going",
    "copy",
    "location",
    "within",
    "file",
    "path",
    "paste",
    "list",
    "name",
    "file",
    "absolute",
    "file",
    "path",
    "one",
    "problem",
    "running",
    "working",
    "strings",
    "backs",
    "slash",
    "serve",
    "escape",
    "sequence",
    "python",
    "thinks",
    "trying",
    "print",
    "tab",
    "character",
    "solve",
    "double",
    "backs",
    "slashes",
    "could",
    "use",
    "forward",
    "slash",
    "either",
    "one",
    "works",
    "right",
    "let",
    "see",
    "file",
    "exists",
    "location",
    "absolute",
    "file",
    "path",
    "exist",
    "get",
    "extension",
    "wrong",
    "let",
    "say",
    "pdf",
    "well",
    "location",
    "exist",
    "method",
    "file",
    "check",
    "see",
    "file",
    "fact",
    "file",
    "directory",
    "let",
    "add",
    "following",
    "detect",
    "file",
    "write",
    "nesta",
    "statement",
    "os",
    "path",
    "file",
    "passing",
    "file",
    "path",
    "argument",
    "file",
    "fact",
    "file",
    "directory",
    "print",
    "file",
    "location",
    "absolute",
    "file",
    "path",
    "exist",
    "file",
    "directory",
    "folder",
    "going",
    "delete",
    "go",
    "new",
    "folder",
    "name",
    "folder",
    "test",
    "check",
    "see",
    "location",
    "directory",
    "let",
    "add",
    "lf",
    "statement",
    "else",
    "os",
    "paath",
    "iser",
    "meaning",
    "directory",
    "method",
    "pass",
    "file",
    "path",
    "directory",
    "folder",
    "print",
    "directory",
    "let",
    "run",
    "location",
    "exist",
    "oh",
    "get",
    "rid",
    "file",
    "extension",
    "plain",
    "text",
    "file",
    "location",
    "absolute",
    "file",
    "path",
    "exists",
    "directory",
    "folder",
    "right",
    "everybody",
    "basic",
    "file",
    "detection",
    "next",
    "videos",
    "going",
    "reading",
    "writing",
    "files",
    "well",
    "everybody",
    "basic",
    "file",
    "detection",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "write",
    "output",
    "files",
    "using",
    "python",
    "cover",
    "plain",
    "text",
    "json",
    "csv",
    "v",
    "files",
    "start",
    "plain",
    "text",
    "easiest",
    "suppose",
    "data",
    "would",
    "like",
    "output",
    "create",
    "variable",
    "text",
    "data",
    "think",
    "food",
    "like",
    "output",
    "like",
    "pizza",
    "convenience",
    "create",
    "variable",
    "file",
    "path",
    "relative",
    "file",
    "path",
    "absolute",
    "file",
    "path",
    "within",
    "file",
    "path",
    "need",
    "name",
    "file",
    "name",
    "output",
    "include",
    "file",
    "extension",
    "txt",
    "file",
    "plain",
    "text",
    "file",
    "relative",
    "file",
    "path",
    "generate",
    "file",
    "within",
    "project",
    "folder",
    "main",
    "python",
    "file",
    "create",
    "file",
    "write",
    "following",
    "open",
    "function",
    "pass",
    "file",
    "path",
    "character",
    "w",
    "write",
    "file",
    "write",
    "pass",
    "things",
    "going",
    "statement",
    "used",
    "wrap",
    "block",
    "code",
    "execute",
    "open",
    "file",
    "width",
    "statement",
    "also",
    "close",
    "file",
    "done",
    "need",
    "manually",
    "close",
    "files",
    "open",
    "file",
    "good",
    "practice",
    "close",
    "may",
    "run",
    "unexpected",
    "behavior",
    "width",
    "statement",
    "takes",
    "care",
    "open",
    "function",
    "return",
    "file",
    "object",
    "first",
    "parameter",
    "file",
    "path",
    "second",
    "parameter",
    "mode",
    "w",
    "write",
    "x",
    "also",
    "write",
    "file",
    "exist",
    "already",
    "exist",
    "receive",
    "error",
    "append",
    "append",
    "file",
    "r",
    "read",
    "take",
    "care",
    "reading",
    "next",
    "video",
    "stick",
    "w",
    "write",
    "file",
    "open",
    "function",
    "returns",
    "file",
    "object",
    "first",
    "argument",
    "file",
    "second",
    "argument",
    "mode",
    "set",
    "key",
    "word",
    "arguments",
    "easier",
    "read",
    "open",
    "function",
    "returns",
    "file",
    "object",
    "us",
    "using",
    "keyword",
    "give",
    "name",
    "file",
    "kind",
    "like",
    "instantiating",
    "file",
    "object",
    "file",
    "equals",
    "file",
    "file",
    "name",
    "file",
    "object",
    "write",
    "file",
    "going",
    "take",
    "file",
    "object",
    "use",
    "write",
    "method",
    "pass",
    "text",
    "data",
    "done",
    "going",
    "print",
    "confirmation",
    "message",
    "use",
    "f",
    "string",
    "let",
    "say",
    "text",
    "file",
    "add",
    "file",
    "path",
    "place",
    "within",
    "single",
    "quotes",
    "created",
    "let",
    "see",
    "happens",
    "text",
    "file",
    "created",
    "file",
    "like",
    "pizza",
    "also",
    "capability",
    "ability",
    "setting",
    "absolute",
    "file",
    "path",
    "let",
    "say",
    "would",
    "like",
    "output",
    "file",
    "desktop",
    "would",
    "need",
    "location",
    "let",
    "get",
    "location",
    "one",
    "folders",
    "going",
    "properties",
    "copy",
    "location",
    "location",
    "desktop",
    "probably",
    "going",
    "different",
    "paste",
    "absolute",
    "file",
    "path",
    "backs",
    "slash",
    "escape",
    "sequence",
    "within",
    "string",
    "either",
    "could",
    "use",
    "double",
    "backs",
    "slashes",
    "forward",
    "slash",
    "let",
    "see",
    "outputs",
    "desktop",
    "text",
    "file",
    "file",
    "path",
    "created",
    "file",
    "plain",
    "text",
    "file",
    "says",
    "like",
    "pizza",
    "working",
    "file",
    "path",
    "could",
    "relative",
    "file",
    "path",
    "absolute",
    "file",
    "path",
    "right",
    "text",
    "data",
    "different",
    "modes",
    "well",
    "w",
    "write",
    "use",
    "x",
    "write",
    "file",
    "file",
    "already",
    "exist",
    "case",
    "desktop",
    "already",
    "file",
    "named",
    "output",
    "plain",
    "text",
    "file",
    "run",
    "mod",
    "x",
    "get",
    "file",
    "exists",
    "error",
    "file",
    "already",
    "exists",
    "could",
    "catch",
    "exception",
    "program",
    "interrupted",
    "copy",
    "name",
    "error",
    "place",
    "code",
    "within",
    "triy",
    "block",
    "try",
    "code",
    "catch",
    "exceptions",
    "except",
    "file",
    "exists",
    "error",
    "file",
    "already",
    "exists",
    "let",
    "take",
    "different",
    "course",
    "action",
    "let",
    "print",
    "file",
    "already",
    "exists",
    "run",
    "program",
    "interrupted",
    "receed",
    "message",
    "file",
    "already",
    "exists",
    "delete",
    "file",
    "run",
    "well",
    "create",
    "new",
    "file",
    "text",
    "file",
    "absolute",
    "file",
    "path",
    "created",
    "mode",
    "also",
    "append",
    "new",
    "data",
    "append",
    "file",
    "get",
    "like",
    "pizza",
    "like",
    "pizza",
    "pending",
    "data",
    "would",
    "like",
    "data",
    "new",
    "line",
    "add",
    "new",
    "line",
    "character",
    "w",
    "overwrite",
    "file",
    "back",
    "original",
    "pending",
    "either",
    "write",
    "text",
    "data",
    "could",
    "add",
    "new",
    "line",
    "character",
    "let",
    "say",
    "let",
    "new",
    "line",
    "plus",
    "text",
    "data",
    "output",
    "appending",
    "writing",
    "like",
    "pizza",
    "like",
    "pizza",
    "second",
    "sentence",
    "new",
    "line",
    "let",
    "run",
    "couple",
    "times",
    "several",
    "lines",
    "let",
    "work",
    "collection",
    "let",
    "say",
    "list",
    "employees",
    "pick",
    "employees",
    "cr",
    "crab",
    "eugene",
    "guess",
    "technically",
    "manager",
    "know",
    "counts",
    "employee",
    "squidward",
    "spongebob",
    "patrick",
    "patrick",
    "worked",
    "k",
    "crusty",
    "crab",
    "one",
    "episode",
    "counts",
    "sure",
    "writing",
    "employees",
    "going",
    "happen",
    "type",
    "error",
    "write",
    "argument",
    "must",
    "string",
    "list",
    "order",
    "us",
    "write",
    "item",
    "within",
    "list",
    "need",
    "iterate",
    "using",
    "sort",
    "loop",
    "ca",
    "write",
    "list",
    "collection",
    "directly",
    "change",
    "every",
    "employee",
    "collection",
    "employees",
    "iterating",
    "something",
    "iterable",
    "access",
    "file",
    "object",
    "use",
    "write",
    "method",
    "write",
    "employee",
    "result",
    "get",
    "one",
    "long",
    "string",
    "item",
    "list",
    "prefer",
    "writing",
    "employee",
    "could",
    "add",
    "new",
    "line",
    "character",
    "output",
    "get",
    "item",
    "list",
    "new",
    "line",
    "rather",
    "new",
    "line",
    "character",
    "could",
    "use",
    "space",
    "would",
    "output",
    "employees",
    "space",
    "outputting",
    "json",
    "file",
    "summary",
    "json",
    "file",
    "made",
    "key",
    "value",
    "pairs",
    "data",
    "let",
    "say",
    "dictionary",
    "employee",
    "dictionary",
    "made",
    "key",
    "value",
    "pairs",
    "name",
    "spongebob",
    "spongebob",
    "age",
    "30",
    "job",
    "position",
    "cook",
    "data",
    "would",
    "like",
    "output",
    "keep",
    "file",
    "path",
    "change",
    "file",
    "extension",
    "tojson",
    "need",
    "help",
    "json",
    "module",
    "let",
    "sure",
    "import",
    "import",
    "json",
    "within",
    "width",
    "block",
    "make",
    "following",
    "change",
    "going",
    "access",
    "json",
    "module",
    "use",
    "dump",
    "method",
    "dump",
    "method",
    "convert",
    "dictionary",
    "json",
    "string",
    "output",
    "pass",
    "json",
    "data",
    "employee",
    "file",
    "second",
    "argument",
    "confirmation",
    "message",
    "let",
    "print",
    "json",
    "file",
    "created",
    "result",
    "json",
    "file",
    "location",
    "created",
    "json",
    "file",
    "go",
    "properties",
    "confirm",
    "json",
    "file",
    "open",
    "result",
    "could",
    "add",
    "indentation",
    "key",
    "value",
    "pair",
    "second",
    "argument",
    "file",
    "pass",
    "keyword",
    "argument",
    "indent",
    "key",
    "value",
    "pair",
    "many",
    "spaces",
    "want",
    "indent",
    "let",
    "say",
    "four",
    "let",
    "take",
    "look",
    "think",
    "readable",
    "indenting",
    "key",
    "value",
    "pair",
    "four",
    "spaces",
    "json",
    "file",
    "collection",
    "key",
    "value",
    "pairs",
    "dictionary",
    "anything",
    "uses",
    "key",
    "value",
    "pairs",
    "great",
    "candidate",
    "output",
    "json",
    "file",
    "right",
    "going",
    "work",
    "csv",
    "files",
    "csv",
    "means",
    "comma",
    "separated",
    "values",
    "c",
    "csv",
    "files",
    "pretty",
    "common",
    "spreadsheet",
    "data",
    "like",
    "excel",
    "spreadsheet",
    "create",
    "2d",
    "data",
    "structure",
    "employees",
    "list",
    "lists",
    "let",
    "add",
    "four",
    "need",
    "help",
    "csv",
    "module",
    "import",
    "csv",
    "think",
    "2d",
    "data",
    "structure",
    "table",
    "rows",
    "columns",
    "first",
    "row",
    "add",
    "name",
    "comma",
    "age",
    "comma",
    "job",
    "second",
    "row",
    "name",
    "spongebob",
    "age",
    "30",
    "job",
    "cook",
    "next",
    "row",
    "patrick",
    "patrick",
    "37",
    "patrick",
    "job",
    "know",
    "unemployed",
    "sandy",
    "sandy",
    "27",
    "sandy",
    "scientist",
    "okay",
    "file",
    "path",
    "file",
    "extension",
    "going",
    "csv",
    "file",
    "comma",
    "separated",
    "values",
    "within",
    "context",
    "width",
    "block",
    "going",
    "create",
    "writer",
    "object",
    "write",
    "file",
    "writer",
    "equals",
    "access",
    "csv",
    "module",
    "use",
    "writer",
    "method",
    "module",
    "pass",
    "file",
    "writer",
    "object",
    "provides",
    "methods",
    "writing",
    "data",
    "csv",
    "file",
    "print",
    "confirmation",
    "message",
    "csv",
    "file",
    "created",
    "output",
    "currently",
    "csv",
    "file",
    "go",
    "properties",
    "confirm",
    "well",
    "output",
    "iterate",
    "rows",
    "2d",
    "collection",
    "write",
    "following",
    "every",
    "row",
    "data",
    "employees",
    "take",
    "writer",
    "object",
    "use",
    "right",
    "row",
    "method",
    "pass",
    "row",
    "iterating",
    "let",
    "take",
    "look",
    "better",
    "however",
    "writer",
    "method",
    "gives",
    "us",
    "new",
    "line",
    "row",
    "would",
    "like",
    "prevent",
    "open",
    "file",
    "set",
    "keyword",
    "argument",
    "new",
    "line",
    "equal",
    "characters",
    "empty",
    "string",
    "let",
    "take",
    "look",
    "yeah",
    "much",
    "better",
    "csv",
    "file",
    "made",
    "comm",
    "separated",
    "values",
    "right",
    "everybody",
    "introduction",
    "writing",
    "files",
    "using",
    "python",
    "going",
    "everybody",
    "today",
    "going",
    "show",
    "read",
    "files",
    "using",
    "python",
    "cover",
    "plain",
    "text",
    "json",
    "csv",
    "files",
    "previous",
    "topic",
    "created",
    "sample",
    "files",
    "work",
    "plain",
    "text",
    "file",
    "json",
    "file",
    "csv",
    "file",
    "named",
    "input",
    "different",
    "file",
    "extension",
    "convenience",
    "create",
    "variable",
    "file",
    "path",
    "list",
    "relative",
    "file",
    "path",
    "absolute",
    "file",
    "path",
    "use",
    "absolute",
    "file",
    "path",
    "going",
    "right",
    "click",
    "file",
    "would",
    "like",
    "read",
    "go",
    "properties",
    "copy",
    "location",
    "paste",
    "add",
    "file",
    "name",
    "including",
    "extension",
    "input",
    "txt",
    "file",
    "within",
    "context",
    "string",
    "backs",
    "slashes",
    "escape",
    "sequences",
    "special",
    "characters",
    "would",
    "either",
    "need",
    "use",
    "double",
    "back",
    "slashes",
    "forward",
    "slash",
    "absolute",
    "file",
    "path",
    "file",
    "would",
    "like",
    "read",
    "read",
    "file",
    "add",
    "wi",
    "block",
    "statement",
    "going",
    "wrap",
    "block",
    "code",
    "within",
    "context",
    "manager",
    "close",
    "file",
    "open",
    "good",
    "practice",
    "close",
    "file",
    "open",
    "lead",
    "unexpected",
    "behavior",
    "use",
    "open",
    "function",
    "open",
    "function",
    "two",
    "arguments",
    "file",
    "path",
    "mode",
    "read",
    "file",
    "set",
    "mode",
    "r",
    "read",
    "open",
    "function",
    "going",
    "return",
    "file",
    "object",
    "give",
    "nickname",
    "file",
    "file",
    "read",
    "file",
    "object",
    "going",
    "return",
    "one",
    "long",
    "string",
    "assign",
    "variable",
    "named",
    "content",
    "content",
    "equals",
    "file",
    "use",
    "read",
    "method",
    "assign",
    "variable",
    "going",
    "print",
    "content",
    "print",
    "content",
    "content",
    "file",
    "result",
    "content",
    "file",
    "like",
    "pizza",
    "really",
    "good",
    "let",
    "say",
    "ca",
    "find",
    "file",
    "perhaps",
    "forget",
    "file",
    "extension",
    "run",
    "file",
    "found",
    "error",
    "interrupt",
    "program",
    "catch",
    "exceptions",
    "happen",
    "dangerous",
    "code",
    "may",
    "cause",
    "exception",
    "wrap",
    "within",
    "tri",
    "block",
    "exception",
    "catch",
    "stating",
    "accept",
    "name",
    "exception",
    "case",
    "file",
    "found",
    "error",
    "instead",
    "program",
    "interrupted",
    "let",
    "take",
    "different",
    "course",
    "action",
    "print",
    "file",
    "found",
    "let",
    "try",
    "file",
    "found",
    "least",
    "program",
    "interrupted",
    "let",
    "add",
    "file",
    "extension",
    "back",
    "permission",
    "read",
    "file",
    "demonstrate",
    "going",
    "rightclick",
    "file",
    "go",
    "properties",
    "go",
    "security",
    "edit",
    "permissions",
    "deny",
    "sort",
    "control",
    "attempt",
    "read",
    "file",
    "get",
    "permission",
    "error",
    "permission",
    "denied",
    "could",
    "handle",
    "exception",
    "well",
    "encounter",
    "permission",
    "error",
    "print",
    "following",
    "permission",
    "read",
    "file",
    "let",
    "run",
    "permission",
    "read",
    "file",
    "exceptions",
    "handle",
    "case",
    "appear",
    "file",
    "found",
    "errors",
    "permission",
    "errors",
    "let",
    "say",
    "would",
    "like",
    "read",
    "json",
    "file",
    "need",
    "help",
    "json",
    "module",
    "import",
    "json",
    "module",
    "top",
    "program",
    "need",
    "get",
    "file",
    "path",
    "json",
    "file",
    "pretty",
    "much",
    "case",
    "file",
    "extension",
    "json",
    "file",
    "one",
    "change",
    "going",
    "make",
    "assign",
    "variable",
    "content",
    "equal",
    "access",
    "json",
    "module",
    "use",
    "load",
    "method",
    "load",
    "file",
    "read",
    "contents",
    "file",
    "json",
    "file",
    "name",
    "spongebob",
    "age3",
    "job",
    "cook",
    "data",
    "json",
    "file",
    "could",
    "access",
    "value",
    "given",
    "key",
    "access",
    "content",
    "key",
    "name",
    "return",
    "value",
    "spongebob",
    "age",
    "30",
    "job",
    "cook",
    "read",
    "csv",
    "file",
    "import",
    "csv",
    "module",
    "file",
    "extension",
    "going",
    "csv",
    "desktop",
    "location",
    "previous",
    "files",
    "content",
    "equal",
    "access",
    "csv",
    "module",
    "access",
    "reader",
    "method",
    "pass",
    "file",
    "content",
    "currently",
    "given",
    "memory",
    "address",
    "csv",
    "file",
    "need",
    "read",
    "csv",
    "file",
    "line",
    "line",
    "data",
    "within",
    "collection",
    "need",
    "iterate",
    "going",
    "create",
    "loop",
    "every",
    "line",
    "content",
    "print",
    "line",
    "much",
    "better",
    "format",
    "resembles",
    "spreadsheet",
    "like",
    "excel",
    "spreadsheet",
    "rows",
    "columns",
    "get",
    "specified",
    "column",
    "access",
    "index",
    "example",
    "r",
    "line",
    "index",
    "zero",
    "would",
    "give",
    "first",
    "column",
    "name",
    "spongebob",
    "patrick",
    "sandy",
    "next",
    "index",
    "would",
    "ages",
    "person",
    "30",
    "35",
    "27",
    "index",
    "two",
    "would",
    "job",
    "positions",
    "cook",
    "unemployed",
    "scientist",
    "need",
    "specific",
    "column",
    "data",
    "csv",
    "file",
    "use",
    "index",
    "one",
    "possibility",
    "right",
    "everybody",
    "ways",
    "read",
    "files",
    "using",
    "python",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "work",
    "dates",
    "times",
    "using",
    "python",
    "import",
    "date",
    "time",
    "module",
    "allows",
    "us",
    "work",
    "dates",
    "times",
    "using",
    "system",
    "clock",
    "computer",
    "clock",
    "video",
    "serves",
    "introduction",
    "create",
    "date",
    "object",
    "assign",
    "object",
    "date",
    "let",
    "zoom",
    "little",
    "bit",
    "access",
    "date",
    "time",
    "module",
    "called",
    "date",
    "method",
    "within",
    "date",
    "method",
    "pass",
    "following",
    "arguments",
    "year",
    "choosing",
    "say",
    "2025",
    "month",
    "one",
    "corresponds",
    "january",
    "numeric",
    "months",
    "day",
    "day",
    "month",
    "say",
    "second",
    "print",
    "state",
    "object",
    "outputs",
    "year",
    "2025",
    "january",
    "2nd",
    "get",
    "date",
    "right",
    "let",
    "say",
    "today",
    "return",
    "date",
    "object",
    "represents",
    "today",
    "access",
    "date",
    "time",
    "module",
    "access",
    "class",
    "date",
    "call",
    "today",
    "method",
    "return",
    "date",
    "today",
    "let",
    "print",
    "today",
    "currently",
    "recording",
    "video",
    "july",
    "14th",
    "2024",
    "result",
    "today",
    "object",
    "print",
    "work",
    "time",
    "create",
    "time",
    "object",
    "access",
    "date",
    "time",
    "module",
    "call",
    "time",
    "method",
    "pass",
    "hours",
    "minutes",
    "seconds",
    "hour",
    "let",
    "say",
    "12",
    "30",
    "0",
    "seconds",
    "print",
    "current",
    "time",
    "get",
    "time",
    "right",
    "system",
    "clock",
    "create",
    "datetime",
    "object",
    "equals",
    "access",
    "datetime",
    "module",
    "within",
    "datetime",
    "module",
    "date",
    "time",
    "class",
    "access",
    "access",
    "know",
    "looks",
    "kind",
    "silly",
    "date",
    "time",
    "dat",
    "time",
    "method",
    "accessing",
    "datetime",
    "module",
    "datetime",
    "class",
    "access",
    "within",
    "class",
    "method",
    "time",
    "right",
    "according",
    "system",
    "clock",
    "returns",
    "date",
    "time",
    "july",
    "14th",
    "2024",
    "format",
    "appearance",
    "string",
    "going",
    "reassign",
    "datetime",
    "object",
    "datetime",
    "object",
    "string",
    "format",
    "time",
    "method",
    "stf",
    "time",
    "going",
    "pass",
    "string",
    "include",
    "format",
    "specifiers",
    "let",
    "say",
    "would",
    "like",
    "display",
    "hour",
    "first",
    "going",
    "add",
    "percent",
    "format",
    "specifiers",
    "find",
    "according",
    "datetime",
    "documentation",
    "online",
    "display",
    "hours",
    "would",
    "percent",
    "h",
    "percent",
    "minutes",
    "percent",
    "seconds",
    "let",
    "see",
    "working",
    "hours",
    "minutes",
    "seconds",
    "separate",
    "colon",
    "better",
    "add",
    "date",
    "start",
    "month",
    "add",
    "format",
    "specifier",
    "lowercase",
    "day",
    "format",
    "specifier",
    "year",
    "format",
    "specifier",
    "capital",
    "result",
    "month",
    "day",
    "year",
    "add",
    "dash",
    "separate",
    "better",
    "prefer",
    "day",
    "first",
    "rather",
    "month",
    "switch",
    "around",
    "depends",
    "read",
    "dates",
    "country",
    "going",
    "cover",
    "exercise",
    "going",
    "see",
    "current",
    "date",
    "time",
    "passed",
    "target",
    "date",
    "time",
    "going",
    "create",
    "target",
    "date",
    "date",
    "time",
    "equals",
    "access",
    "date",
    "time",
    "module",
    "create",
    "new",
    "date",
    "time",
    "pass",
    "date",
    "time",
    "date",
    "time",
    "let",
    "say",
    "something",
    "far",
    "future",
    "like",
    "year",
    "2030",
    "january",
    "2nd",
    "hour",
    "12",
    "30",
    "1",
    "second",
    "going",
    "get",
    "time",
    "right",
    "name",
    "current",
    "date",
    "time",
    "equals",
    "access",
    "date",
    "time",
    "module",
    "access",
    "date",
    "time",
    "class",
    "call",
    "method",
    "return",
    "current",
    "date",
    "time",
    "right",
    "using",
    "statement",
    "see",
    "target",
    "date",
    "time",
    "less",
    "current",
    "date",
    "time",
    "already",
    "passed",
    "date",
    "target",
    "date",
    "less",
    "current",
    "date",
    "means",
    "date",
    "time",
    "already",
    "passed",
    "print",
    "following",
    "case",
    "target",
    "date",
    "passed",
    "else",
    "print",
    "target",
    "date",
    "passed",
    "result",
    "target",
    "date",
    "passed",
    "set",
    "target",
    "date",
    "year",
    "2020",
    "well",
    "target",
    "date",
    "passed",
    "check",
    "see",
    "date",
    "time",
    "already",
    "passed",
    "elapsed",
    "right",
    "everybody",
    "introduction",
    "working",
    "dates",
    "times",
    "using",
    "python",
    "right",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "working",
    "alarm",
    "clock",
    "using",
    "python",
    "project",
    "need",
    "following",
    "imports",
    "import",
    "time",
    "updating",
    "clock",
    "every",
    "second",
    "time",
    "module",
    "going",
    "help",
    "us",
    "well",
    "import",
    "date",
    "time",
    "date",
    "time",
    "module",
    "allows",
    "us",
    "work",
    "string",
    "representations",
    "time",
    "opinion",
    "easiest",
    "way",
    "work",
    "sound",
    "effects",
    "actually",
    "use",
    "pame",
    "import",
    "pame",
    "game",
    "may",
    "need",
    "download",
    "pame",
    "package",
    "getting",
    "message",
    "module",
    "named",
    "pame",
    "might",
    "link",
    "install",
    "even",
    "one",
    "way",
    "download",
    "pame",
    "package",
    "open",
    "terminal",
    "use",
    "pip",
    "pip",
    "python",
    "package",
    "manager",
    "pip",
    "install",
    "py",
    "game",
    "right",
    "three",
    "imports",
    "let",
    "create",
    "function",
    "set",
    "alarm",
    "one",
    "parameter",
    "alarm",
    "time",
    "right",
    "pass",
    "alarm",
    "time",
    "parameter",
    "going",
    "string",
    "representation",
    "time",
    "military",
    "time",
    "would",
    "like",
    "start",
    "program",
    "running",
    "main",
    "python",
    "file",
    "directly",
    "add",
    "following",
    "statement",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "running",
    "main",
    "python",
    "file",
    "directly",
    "set",
    "alarm",
    "first",
    "prompt",
    "user",
    "would",
    "like",
    "set",
    "alarm",
    "define",
    "variable",
    "alarm",
    "time",
    "equals",
    "ask",
    "user",
    "input",
    "using",
    "input",
    "function",
    "prompt",
    "user",
    "enter",
    "alarm",
    "time",
    "give",
    "format",
    "hours",
    "minutes",
    "seconds",
    "going",
    "military",
    "time",
    "alarm",
    "time",
    "call",
    "set",
    "alarm",
    "function",
    "pass",
    "alarm",
    "time",
    "right",
    "within",
    "set",
    "alarm",
    "function",
    "call",
    "function",
    "let",
    "print",
    "following",
    "use",
    "f",
    "string",
    "alarm",
    "set",
    "4",
    "include",
    "alarm",
    "time",
    "need",
    "mp3",
    "file",
    "work",
    "available",
    "one",
    "recommendation",
    "could",
    "use",
    "youtube",
    "audio",
    "library",
    "search",
    "sound",
    "effects",
    "music",
    "audio",
    "files",
    "allowed",
    "use",
    "outside",
    "youtube",
    "search",
    "song",
    "sound",
    "effects",
    "find",
    "one",
    "like",
    "download",
    "find",
    "song",
    "like",
    "move",
    "project",
    "folder",
    "create",
    "variable",
    "sound",
    "file",
    "equals",
    "relative",
    "absolute",
    "file",
    "path",
    "mp3",
    "file",
    "right",
    "next",
    "main",
    "python",
    "file",
    "need",
    "list",
    "file",
    "name",
    "named",
    "mine",
    "music",
    "mp3",
    "file",
    "going",
    "perform",
    "test",
    "run",
    "going",
    "play",
    "sound",
    "quite",
    "yet",
    "output",
    "displays",
    "says",
    "hello",
    "pame",
    "community",
    "let",
    "say",
    "set",
    "alarm",
    "enter",
    "alarm",
    "set",
    "would",
    "like",
    "suppress",
    "output",
    "pame",
    "navigate",
    "virtual",
    "environment",
    "go",
    "library",
    "pame",
    "underneath",
    "file",
    "named",
    "dunder",
    "init",
    "let",
    "scroll",
    "way",
    "bottom",
    "statement",
    "display",
    "version",
    "p",
    "game",
    "using",
    "print",
    "statement",
    "hello",
    "pame",
    "community",
    "could",
    "comment",
    "even",
    "delete",
    "simple",
    "solution",
    "get",
    "message",
    "anymore",
    "going",
    "create",
    "boolean",
    "variable",
    "running",
    "alarm",
    "clock",
    "running",
    "set",
    "true",
    "running",
    "true",
    "continue",
    "alarm",
    "clock",
    "need",
    "get",
    "current",
    "time",
    "current",
    "time",
    "equals",
    "access",
    "date",
    "time",
    "module",
    "access",
    "class",
    "date",
    "time",
    "call",
    "method",
    "get",
    "time",
    "date",
    "right",
    "could",
    "method",
    "chain",
    "string",
    "format",
    "method",
    "stf",
    "time",
    "would",
    "like",
    "hours",
    "minutes",
    "seconds",
    "date",
    "type",
    "percent",
    "h",
    "colon",
    "let",
    "zoom",
    "little",
    "little",
    "percent",
    "minutes",
    "percent",
    "seconds",
    "getting",
    "hours",
    "minutes",
    "seconds",
    "date",
    "time",
    "right",
    "storing",
    "within",
    "variable",
    "current",
    "time",
    "going",
    "print",
    "current",
    "time",
    "perform",
    "test",
    "run",
    "however",
    "currently",
    "within",
    "infinite",
    "loop",
    "end",
    "loop",
    "set",
    "running",
    "false",
    "okay",
    "enter",
    "alarm",
    "time",
    "let",
    "say",
    "alarm",
    "set",
    "time",
    "right",
    "16",
    "seconds",
    "get",
    "rid",
    "line",
    "set",
    "running",
    "false",
    "instead",
    "going",
    "access",
    "time",
    "module",
    "call",
    "sleep",
    "method",
    "pass",
    "number",
    "seconds",
    "sleep",
    "1",
    "second",
    "set",
    "set",
    "alarm",
    "10",
    "time",
    "update",
    "every",
    "second",
    "however",
    "current",
    "time",
    "equal",
    "alarm",
    "time",
    "trigger",
    "alarm",
    "printing",
    "current",
    "time",
    "write",
    "statement",
    "check",
    "current",
    "time",
    "equal",
    "alarm",
    "time",
    "true",
    "let",
    "print",
    "following",
    "wake",
    "add",
    "emoji",
    "cuz",
    "silly",
    "alarm",
    "triggers",
    "set",
    "running",
    "false",
    "within",
    "statement",
    "let",
    "test",
    "run",
    "going",
    "play",
    "sound",
    "quite",
    "yet",
    "set",
    "alarm",
    "come",
    "back",
    "little",
    "bit",
    "later",
    "right",
    "current",
    "time",
    "matches",
    "alarm",
    "time",
    "print",
    "wake",
    "set",
    "running",
    "false",
    "exit",
    "loop",
    "subsequently",
    "exiting",
    "program",
    "need",
    "play",
    "mp3",
    "file",
    "access",
    "package",
    "pame",
    "access",
    "module",
    "mixer",
    "mix",
    "module",
    "loading",
    "playing",
    "sounds",
    "initialize",
    "going",
    "initialize",
    "init",
    "initialize",
    "initialize",
    "method",
    "another",
    "way",
    "call",
    "constructor",
    "pass",
    "keyword",
    "arguments",
    "frequency",
    "size",
    "channels",
    "buffer",
    "might",
    "little",
    "complicated",
    "us",
    "level",
    "use",
    "default",
    "settings",
    "passing",
    "anything",
    "next",
    "step",
    "load",
    "sound",
    "file",
    "access",
    "package",
    "pame",
    "access",
    "module",
    "mixer",
    "access",
    "module",
    "music",
    "call",
    "load",
    "method",
    "load",
    "sound",
    "file",
    "sound",
    "file",
    "contains",
    "file",
    "path",
    "mp3",
    "file",
    "load",
    "music",
    "play",
    "py",
    "game",
    "mixer",
    "music",
    "called",
    "play",
    "method",
    "mp3",
    "file",
    "going",
    "play",
    "brief",
    "second",
    "demonstrate",
    "set",
    "alarm",
    "949",
    "give",
    "seconds",
    "sound",
    "file",
    "stops",
    "playing",
    "program",
    "terminates",
    "need",
    "next",
    "continue",
    "playing",
    "sound",
    "file",
    "sound",
    "file",
    "bu",
    "busy",
    "add",
    "loop",
    "access",
    "pygame",
    "mixer",
    "music",
    "call",
    "get",
    "busy",
    "method",
    "returns",
    "boolean",
    "song",
    "busy",
    "still",
    "playing",
    "call",
    "time",
    "modules",
    "sleep",
    "method",
    "sleep",
    "1",
    "second",
    "song",
    "finishes",
    "terminate",
    "program",
    "prematurely",
    "sound",
    "file",
    "longer",
    "busy",
    "finished",
    "product",
    "let",
    "test",
    "set",
    "alarm",
    "952",
    "give",
    "time",
    "music",
    "uh",
    "yeah",
    "going",
    "talk",
    "python",
    "today",
    "used",
    "perform",
    "multiple",
    "tasks",
    "concurrently",
    "think",
    "like",
    "multitasking",
    "performing",
    "different",
    "actions",
    "example",
    "could",
    "study",
    "listen",
    "music",
    "eat",
    "something",
    "time",
    "good",
    "io",
    "bound",
    "tasks",
    "io",
    "meaning",
    "input",
    "output",
    "reading",
    "files",
    "fetching",
    "data",
    "api",
    "things",
    "may",
    "take",
    "time",
    "know",
    "going",
    "end",
    "exactly",
    "use",
    "import",
    "threading",
    "module",
    "import",
    "threading",
    "access",
    "threading",
    "module",
    "call",
    "thread",
    "constructor",
    "pass",
    "target",
    "function",
    "demonstration",
    "let",
    "say",
    "bunch",
    "chores",
    "walk",
    "dog",
    "get",
    "mail",
    "take",
    "trash",
    "let",
    "define",
    "functions",
    "handle",
    "function",
    "walk",
    "dog",
    "print",
    "following",
    "message",
    "finish",
    "walking",
    "dog",
    "let",
    "create",
    "function",
    "take",
    "trash",
    "print",
    "take",
    "trash",
    "another",
    "function",
    "get",
    "mail",
    "get",
    "mail",
    "mailbox",
    "print",
    "get",
    "mail",
    "simulate",
    "functions",
    "taking",
    "indeterminate",
    "amount",
    "time",
    "going",
    "import",
    "time",
    "module",
    "help",
    "us",
    "let",
    "say",
    "walking",
    "dog",
    "takes",
    "8",
    "seconds",
    "access",
    "time",
    "module",
    "call",
    "sleep",
    "method",
    "pass",
    "8",
    "8",
    "seconds",
    "call",
    "walk",
    "dog",
    "function",
    "wait",
    "around",
    "8",
    "seconds",
    "finish",
    "walking",
    "dog",
    "chore",
    "take",
    "quite",
    "bit",
    "time",
    "complete",
    "taking",
    "trash",
    "fairly",
    "quick",
    "taking",
    "trash",
    "take",
    "2",
    "seconds",
    "getting",
    "mill",
    "take",
    "4",
    "seconds",
    "let",
    "call",
    "functions",
    "see",
    "happens",
    "begin",
    "walking",
    "dog",
    "call",
    "walk",
    "dog",
    "function",
    "followed",
    "take",
    "trash",
    "function",
    "get",
    "mail",
    "function",
    "result",
    "going",
    "wait",
    "around",
    "8",
    "seconds",
    "walk",
    "dog",
    "function",
    "complete",
    "right",
    "finish",
    "walking",
    "dog",
    "take",
    "trash",
    "get",
    "mail",
    "functions",
    "running",
    "thread",
    "main",
    "thread",
    "main",
    "python",
    "program",
    "complete",
    "chores",
    "order",
    "one",
    "one",
    "running",
    "thread",
    "instead",
    "walking",
    "dog",
    "done",
    "taking",
    "trash",
    "done",
    "get",
    "mail",
    "could",
    "accomplish",
    "three",
    "tasks",
    "time",
    "let",
    "say",
    "thread",
    "object",
    "could",
    "say",
    "thread",
    "one",
    "descriptive",
    "let",
    "say",
    "chore",
    "one",
    "let",
    "zoom",
    "little",
    "bit",
    "chore",
    "one",
    "going",
    "contain",
    "thread",
    "access",
    "threading",
    "module",
    "call",
    "constructor",
    "thread",
    "pass",
    "keyword",
    "argument",
    "target",
    "first",
    "chore",
    "let",
    "walk",
    "dog",
    "start",
    "thread",
    "take",
    "thread",
    "object",
    "chore",
    "one",
    "call",
    "start",
    "method",
    "start",
    "okay",
    "let",
    "chore",
    "2",
    "access",
    "threading",
    "module",
    "call",
    "thread",
    "constructor",
    "pass",
    "target",
    "name",
    "function",
    "take",
    "trash",
    "chore",
    "two",
    "start",
    "chore",
    "three",
    "copy",
    "feeling",
    "lazy",
    "chore",
    "three",
    "get",
    "mail",
    "result",
    "finish",
    "taking",
    "trash",
    "first",
    "get",
    "mail",
    "finish",
    "walking",
    "dog",
    "executing",
    "functions",
    "concurrently",
    "multitasking",
    "taking",
    "trash",
    "getting",
    "mail",
    "walking",
    "dog",
    "time",
    "one",
    "thing",
    "want",
    "point",
    "notice",
    "finished",
    "taking",
    "trash",
    "first",
    "followed",
    "getting",
    "mail",
    "walking",
    "dog",
    "tasks",
    "finished",
    "different",
    "order",
    "compared",
    "taking",
    "trash",
    "finished",
    "first",
    "took",
    "2",
    "seconds",
    "getting",
    "male",
    "took",
    "4",
    "seconds",
    "walking",
    "dog",
    "took",
    "longest",
    "took",
    "8",
    "seconds",
    "previously",
    "finished",
    "walking",
    "dog",
    "first",
    "took",
    "trash",
    "got",
    "mail",
    "chores",
    "complete",
    "would",
    "like",
    "print",
    "message",
    "print",
    "following",
    "chores",
    "complete",
    "happens",
    "currently",
    "get",
    "message",
    "chores",
    "complete",
    "finished",
    "yet",
    "still",
    "completing",
    "may",
    "times",
    "want",
    "program",
    "wait",
    "threads",
    "finish",
    "print",
    "confirmation",
    "message",
    "chores",
    "complete",
    "going",
    "use",
    "join",
    "method",
    "take",
    "thread",
    "use",
    "join",
    "method",
    "chore",
    "2",
    "chore",
    "3",
    "well",
    "join",
    "method",
    "wait",
    "threads",
    "finish",
    "continuing",
    "rest",
    "program",
    "result",
    "take",
    "trash",
    "get",
    "mail",
    "finish",
    "walking",
    "dog",
    "chores",
    "complete",
    "constructing",
    "thread",
    "object",
    "keyword",
    "argument",
    "target",
    "functions",
    "take",
    "parameters",
    "example",
    "function",
    "walk",
    "dog",
    "let",
    "say",
    "first",
    "name",
    "convert",
    "print",
    "statement",
    "fst",
    "string",
    "display",
    "first",
    "first",
    "name",
    "finish",
    "walking",
    "whatever",
    "dog",
    "name",
    "creating",
    "thread",
    "target",
    "function",
    "function",
    "accepts",
    "arguments",
    "need",
    "one",
    "keyword",
    "argument",
    "args",
    "send",
    "function",
    "tuple",
    "need",
    "set",
    "parentheses",
    "within",
    "tupple",
    "list",
    "arguments",
    "let",
    "say",
    "dog",
    "first",
    "name",
    "scooby",
    "since",
    "topple",
    "one",
    "argument",
    "end",
    "tupple",
    "comma",
    "let",
    "python",
    "know",
    "tupple",
    "result",
    "take",
    "trash",
    "get",
    "mail",
    "finish",
    "walking",
    "scooby",
    "chores",
    "complete",
    "missing",
    "comma",
    "would",
    "happen",
    "longer",
    "passing",
    "tuple",
    "multiple",
    "parameters",
    "first",
    "first",
    "name",
    "last",
    "last",
    "name",
    "finish",
    "walking",
    "first",
    "last",
    "first",
    "name",
    "scooby",
    "last",
    "name",
    "take",
    "trash",
    "get",
    "mail",
    "finish",
    "walking",
    "chores",
    "complete",
    "right",
    "everybody",
    "used",
    "perform",
    "multiple",
    "tasks",
    "concurrently",
    "multitasking",
    "executing",
    "multiple",
    "functions",
    "time",
    "good",
    "io",
    "bound",
    "tasks",
    "reading",
    "files",
    "fetching",
    "data",
    "apis",
    "well",
    "everybody",
    "introduction",
    "python",
    "hey",
    "everybody",
    "video",
    "going",
    "show",
    "connect",
    "api",
    "using",
    "python",
    "demonstration",
    "going",
    "connect",
    "poke",
    "api",
    "get",
    "information",
    "pokémon",
    "choosing",
    "assuming",
    "us",
    "familiar",
    "pokémon",
    "thought",
    "fun",
    "example",
    "according",
    "api",
    "look",
    "pokémon",
    "pikachu",
    "get",
    "stats",
    "pikachu",
    "pikachu",
    "name",
    "height",
    "id",
    "number",
    "sorts",
    "moves",
    "abilities",
    "pikachu",
    "may",
    "need",
    "url",
    "handle",
    "later",
    "first",
    "step",
    "going",
    "import",
    "requests",
    "library",
    "make",
    "api",
    "request",
    "however",
    "run",
    "module",
    "found",
    "error",
    "module",
    "named",
    "requests",
    "requests",
    "one",
    "package",
    "install",
    "normally",
    "included",
    "standard",
    "python",
    "download",
    "go",
    "project",
    "folder",
    "go",
    "virtual",
    "environment",
    "library",
    "site",
    "packages",
    "package",
    "request",
    "ests",
    "download",
    "py",
    "charm",
    "vs",
    "code",
    "terminal",
    "use",
    "download",
    "request",
    "package",
    "use",
    "pip",
    "pip",
    "package",
    "manager",
    "python",
    "normally",
    "included",
    "install",
    "python",
    "type",
    "pip",
    "install",
    "requests",
    "take",
    "second",
    "package",
    "requests",
    "within",
    "project",
    "folder",
    "run",
    "error",
    "goes",
    "away",
    "process",
    "finished",
    "exit",
    "code",
    "zero",
    "means",
    "errors",
    "going",
    "back",
    "pokemon",
    "api",
    "need",
    "url",
    "let",
    "zoom",
    "see",
    "going",
    "store",
    "base",
    "url",
    "easier",
    "work",
    "convenience",
    "going",
    "create",
    "function",
    "name",
    "get",
    "pokemon",
    "info",
    "get",
    "info",
    "pokemon",
    "pass",
    "name",
    "pokemon",
    "write",
    "pass",
    "outside",
    "function",
    "let",
    "say",
    "variable",
    "pokemon",
    "name",
    "pick",
    "pokemon",
    "pick",
    "pikachu",
    "call",
    "get",
    "pokemon",
    "info",
    "function",
    "pass",
    "pokémon",
    "name",
    "remember",
    "parameters",
    "named",
    "different",
    "arguments",
    "send",
    "data",
    "function",
    "rename",
    "something",
    "else",
    "temporarily",
    "name",
    "pokémon",
    "would",
    "like",
    "look",
    "complete",
    "url",
    "f",
    "string",
    "pokemon",
    "api",
    "base",
    "url",
    "followed",
    "word",
    "pokemon",
    "name",
    "pokémon",
    "base",
    "url",
    "add",
    "placeholder",
    "insert",
    "itward",
    "slash",
    "word",
    "pokémon",
    "slash",
    "name",
    "pokémon",
    "example",
    "going",
    "pikachu",
    "full",
    "url",
    "access",
    "request",
    "module",
    "use",
    "get",
    "method",
    "pass",
    "url",
    "method",
    "going",
    "return",
    "response",
    "object",
    "assign",
    "response",
    "response",
    "response",
    "object",
    "going",
    "print",
    "response",
    "see",
    "working",
    "response",
    "object",
    "status",
    "code",
    "http",
    "status",
    "code",
    "200",
    "200",
    "means",
    "response",
    "okay",
    "examples",
    "response",
    "codes",
    "probably",
    "familiar",
    "404",
    "found",
    "looking",
    "200",
    "response",
    "okay",
    "get",
    "response",
    "add",
    "statement",
    "response",
    "response",
    "object",
    "attribute",
    "status",
    "code",
    "read",
    "status",
    "code",
    "status",
    "code",
    "equal",
    "200",
    "means",
    "response",
    "okay",
    "write",
    "pass",
    "else",
    "going",
    "print",
    "following",
    "else",
    "going",
    "print",
    "failed",
    "retrieve",
    "data",
    "print",
    "status",
    "code",
    "response",
    "object",
    "temporarily",
    "print",
    "data",
    "retrieved",
    "successful",
    "ca",
    "spell",
    "okay",
    "data",
    "data",
    "retrieved",
    "status",
    "code",
    "response",
    "object",
    "equal",
    "200",
    "take",
    "response",
    "object",
    "use",
    "json",
    "method",
    "response",
    "json",
    "format",
    "using",
    "method",
    "convert",
    "python",
    "dictionary",
    "consist",
    "key",
    "value",
    "pairs",
    "much",
    "like",
    "json",
    "file",
    "going",
    "assign",
    "variable",
    "pokemon",
    "data",
    "easier",
    "work",
    "print",
    "pokemon",
    "data",
    "data",
    "pikachu",
    "really",
    "difficult",
    "read",
    "see",
    "keywords",
    "abilities",
    "base",
    "experience",
    "extremely",
    "large",
    "dictionary",
    "dictionary",
    "return",
    "dictionary",
    "pokemon",
    "data",
    "back",
    "place",
    "call",
    "function",
    "store",
    "variable",
    "pokemon",
    "info",
    "equals",
    "get",
    "pokemon",
    "info",
    "pass",
    "pokémon",
    "name",
    "dictionary",
    "work",
    "let",
    "zoom",
    "dictionary",
    "exists",
    "use",
    "keyword",
    "pokemon",
    "info",
    "true",
    "exists",
    "true",
    "print",
    "following",
    "use",
    "f",
    "string",
    "access",
    "value",
    "addiction",
    "iary",
    "access",
    "key",
    "take",
    "dictionary",
    "pokémon",
    "info",
    "access",
    "key",
    "name",
    "let",
    "see",
    "happens",
    "exactly",
    "get",
    "pikachu",
    "let",
    "get",
    "pikachu",
    "id",
    "number",
    "access",
    "key",
    "id",
    "given",
    "value",
    "25",
    "pikachu",
    "25th",
    "pokémon",
    "franchise",
    "let",
    "get",
    "pikachu",
    "height",
    "pikachu",
    "height",
    "four",
    "know",
    "unit",
    "measurement",
    "use",
    "franchise",
    "4",
    "feet",
    "4",
    "know",
    "let",
    "get",
    "pikachu",
    "weight",
    "pikachu",
    "weight",
    "60",
    "60",
    "lb",
    "60",
    "kg",
    "know",
    "make",
    "look",
    "nice",
    "going",
    "add",
    "name",
    "id",
    "height",
    "weight",
    "looks",
    "much",
    "better",
    "let",
    "pick",
    "different",
    "pokemon",
    "pick",
    "favorite",
    "pokemon",
    "tyion",
    "failed",
    "retrieve",
    "data",
    "lowercase",
    "yes",
    "okay",
    "name",
    "tyan",
    "follow",
    "name",
    "capitalize",
    "method",
    "make",
    "capital",
    "go",
    "favorite",
    "pokemon",
    "tyan",
    "id",
    "157",
    "ty",
    "loan",
    "height",
    "17",
    "weight",
    "795",
    "right",
    "everybody",
    "one",
    "way",
    "connect",
    "api",
    "using",
    "python",
    "also",
    "tell",
    "favorite",
    "pokémon",
    "comment",
    "section",
    "right",
    "everybody",
    "today",
    "video",
    "going",
    "get",
    "started",
    "working",
    "pi",
    "qd5",
    "graphical",
    "user",
    "interface",
    "also",
    "known",
    "guy",
    "gui",
    "topic",
    "creating",
    "basic",
    "window",
    "let",
    "get",
    "started",
    "right",
    "first",
    "step",
    "using",
    "pip",
    "going",
    "install",
    "pi",
    "qt5",
    "package",
    "open",
    "terminal",
    "pycharm",
    "vs",
    "code",
    "terminal",
    "use",
    "going",
    "use",
    "pip",
    "python",
    "package",
    "manager",
    "pip",
    "install",
    "pi",
    "qt5",
    "enter",
    "might",
    "take",
    "second",
    "download",
    "finished",
    "package",
    "within",
    "site",
    "packages",
    "folder",
    "named",
    "pi",
    "qt5",
    "work",
    "long",
    "import",
    "first",
    "going",
    "import",
    "module",
    "cis",
    "cis",
    "meaning",
    "system",
    "module",
    "provides",
    "access",
    "variables",
    "used",
    "maintained",
    "python",
    "interpreter",
    "package",
    "pi",
    "qt5",
    "pay",
    "attention",
    "capitalization",
    "easy",
    "mess",
    "use",
    "dot",
    "access",
    "module",
    "qt",
    "widgets",
    "widgets",
    "building",
    "blocks",
    "pi",
    "qt5",
    "application",
    "begin",
    "q",
    "helps",
    "distinguish",
    "widgets",
    "libraries",
    "typically",
    "begin",
    "q",
    "module",
    "import",
    "following",
    "widgets",
    "q",
    "application",
    "q",
    "main",
    "window",
    "boiler",
    "plate",
    "code",
    "write",
    "order",
    "get",
    "application",
    "running",
    "first",
    "create",
    "class",
    "main",
    "window",
    "inherit",
    "class",
    "qain",
    "window",
    "inheriting",
    "parent",
    "cain",
    "window",
    "customize",
    "windows",
    "display",
    "user",
    "need",
    "constructor",
    "let",
    "define",
    "define",
    "dunder",
    "init",
    "arguments",
    "currently",
    "besides",
    "self",
    "case",
    "pass",
    "arguments",
    "parent",
    "cain",
    "window",
    "access",
    "super",
    "class",
    "parent",
    "call",
    "parents",
    "constructor",
    "currently",
    "arguments",
    "pass",
    "return",
    "class",
    "momentarily",
    "let",
    "define",
    "function",
    "main",
    "begin",
    "program",
    "call",
    "function",
    "main",
    "begin",
    "application",
    "wr",
    "pass",
    "running",
    "file",
    "directly",
    "let",
    "add",
    "following",
    "statement",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "running",
    "file",
    "directly",
    "call",
    "main",
    "function",
    "order",
    "us",
    "begin",
    "true",
    "call",
    "function",
    "main",
    "within",
    "main",
    "function",
    "create",
    "app",
    "object",
    "app",
    "equals",
    "call",
    "constructor",
    "q",
    "application",
    "class",
    "one",
    "argument",
    "pass",
    "access",
    "module",
    "cis",
    "argv",
    "meaning",
    "arguments",
    "passing",
    "argument",
    "allows",
    "pi",
    "qt",
    "process",
    "command",
    "line",
    "arguments",
    "intended",
    "use",
    "command",
    "prompt",
    "terminal",
    "wo",
    "series",
    "may",
    "someday",
    "future",
    "would",
    "good",
    "idea",
    "us",
    "future",
    "proof",
    "code",
    "otherwise",
    "may",
    "see",
    "people",
    "pass",
    "empty",
    "list",
    "app",
    "object",
    "next",
    "create",
    "window",
    "object",
    "window",
    "equals",
    "call",
    "constructor",
    "class",
    "main",
    "window",
    "currently",
    "arguments",
    "pass",
    "app",
    "object",
    "window",
    "object",
    "calling",
    "respective",
    "constructors",
    "run",
    "program",
    "currently",
    "window",
    "going",
    "show",
    "default",
    "behavior",
    "window",
    "hide",
    "order",
    "show",
    "window",
    "access",
    "window",
    "call",
    "show",
    "method",
    "show",
    "going",
    "appear",
    "brief",
    "second",
    "run",
    "script",
    "know",
    "saw",
    "pops",
    "brief",
    "second",
    "need",
    "ensure",
    "window",
    "stays",
    "interact",
    "close",
    "show",
    "window",
    "access",
    "module",
    "cis",
    "call",
    "exit",
    "method",
    "exit",
    "method",
    "ensures",
    "clean",
    "exit",
    "program",
    "within",
    "exit",
    "method",
    "pass",
    "argument",
    "app",
    "object",
    "app",
    "object",
    "method",
    "ex",
    "ecore",
    "method",
    "call",
    "execute",
    "method",
    "underscore",
    "character",
    "exec",
    "execute",
    "distinguishes",
    "execute",
    "method",
    "separate",
    "version",
    "execute",
    "function",
    "ends",
    "underscore",
    "apps",
    "execute",
    "method",
    "waits",
    "around",
    "user",
    "input",
    "handles",
    "events",
    "click",
    "buttons",
    "press",
    "keys",
    "close",
    "window",
    "calling",
    "method",
    "run",
    "program",
    "window",
    "stay",
    "place",
    "maximize",
    "minimize",
    "close",
    "boiler",
    "plate",
    "code",
    "need",
    "basic",
    "window",
    "let",
    "customize",
    "within",
    "constructor",
    "main",
    "window",
    "would",
    "like",
    "add",
    "let",
    "set",
    "title",
    "window",
    "self",
    "set",
    "window",
    "title",
    "method",
    "pass",
    "string",
    "think",
    "title",
    "program",
    "cool",
    "first",
    "gui",
    "gooey",
    "new",
    "title",
    "cool",
    "first",
    "gooey",
    "graphical",
    "user",
    "interface",
    "window",
    "appears",
    "set",
    "geometry",
    "window",
    "appears",
    "size",
    "window",
    "access",
    "self",
    "set",
    "geometry",
    "method",
    "four",
    "arguments",
    "x",
    "x",
    "coordinates",
    "width",
    "window",
    "height",
    "window",
    "set",
    "x",
    "zero",
    "window",
    "appear",
    "top",
    "left",
    "corner",
    "screen",
    "also",
    "need",
    "width",
    "height",
    "let",
    "say",
    "know",
    "5",
    "00",
    "window",
    "square",
    "width",
    "height",
    "500",
    "width",
    "500",
    "pixels",
    "height",
    "500",
    "pixels",
    "first",
    "two",
    "arguments",
    "set",
    "initial",
    "placement",
    "window",
    "x",
    "z",
    "zero",
    "corresponds",
    "top",
    "left",
    "corner",
    "set",
    "first",
    "argument",
    "100",
    "well",
    "window",
    "going",
    "move",
    "right",
    "100",
    "pixels",
    "ways",
    "center",
    "window",
    "center",
    "screen",
    "little",
    "advanced",
    "us",
    "right",
    "time",
    "pick",
    "something",
    "roughly",
    "near",
    "middle",
    "screen",
    "700",
    "pixels",
    "x",
    "axis",
    "300",
    "ais",
    "appear",
    "roughly",
    "middle",
    "feel",
    "free",
    "adjust",
    "values",
    "based",
    "size",
    "screen",
    "discuss",
    "layouts",
    "future",
    "would",
    "like",
    "window",
    "icon",
    "change",
    "need",
    "image",
    "work",
    "within",
    "project",
    "folder",
    "profile",
    "picture",
    "youtube",
    "channel",
    "set",
    "icon",
    "find",
    "image",
    "like",
    "add",
    "project",
    "folder",
    "order",
    "work",
    "icons",
    "need",
    "make",
    "following",
    "import",
    "pi",
    "qt5",
    "package",
    "access",
    "module",
    "qt",
    "gui",
    "import",
    "following",
    "q",
    "icon",
    "work",
    "icons",
    "set",
    "geometry",
    "window",
    "access",
    "object",
    "self",
    "main",
    "window",
    "call",
    "method",
    "set",
    "window",
    "icon",
    "within",
    "method",
    "call",
    "constructor",
    "q",
    "icon",
    "pass",
    "either",
    "relative",
    "file",
    "path",
    "absolute",
    "file",
    "path",
    "main",
    "python",
    "file",
    "right",
    "next",
    "profile",
    "picture",
    "image",
    "need",
    "file",
    "name",
    "within",
    "string",
    "name",
    "image",
    "going",
    "different",
    "depending",
    "name",
    "image",
    "image",
    "named",
    "profile",
    "uncore",
    "pick",
    "image",
    "jpeg",
    "jpg",
    "run",
    "program",
    "using",
    "image",
    "icon",
    "window",
    "right",
    "everybody",
    "create",
    "window",
    "using",
    "pi",
    "qt5",
    "next",
    "topic",
    "creating",
    "labels",
    "everybody",
    "today",
    "topic",
    "going",
    "create",
    "labels",
    "using",
    "pi",
    "qt5",
    "import",
    "widget",
    "q",
    "label",
    "label",
    "class",
    "used",
    "create",
    "label",
    "widgets",
    "display",
    "text",
    "images",
    "within",
    "constructor",
    "main",
    "window",
    "create",
    "label",
    "declare",
    "label",
    "object",
    "lab",
    "equals",
    "call",
    "constructor",
    "q",
    "label",
    "text",
    "label",
    "pass",
    "string",
    "first",
    "argument",
    "let",
    "say",
    "word",
    "hello",
    "second",
    "argument",
    "pass",
    "self",
    "self",
    "refers",
    "window",
    "object",
    "calling",
    "instantiating",
    "right",
    "let",
    "test",
    "run",
    "label",
    "although",
    "barely",
    "see",
    "font",
    "really",
    "small",
    "say",
    "hello",
    "let",
    "set",
    "font",
    "need",
    "another",
    "import",
    "pi",
    "qt5",
    "qt",
    "gui",
    "import",
    "q",
    "font",
    "importing",
    "q",
    "font",
    "class",
    "begin",
    "working",
    "fonts",
    "going",
    "take",
    "label",
    "call",
    "set",
    "font",
    "method",
    "within",
    "method",
    "call",
    "constructor",
    "q",
    "font",
    "pick",
    "font",
    "would",
    "like",
    "pick",
    "aial",
    "feel",
    "free",
    "choose",
    "really",
    "font",
    "second",
    "argument",
    "font",
    "size",
    "pick",
    "30",
    "let",
    "another",
    "test",
    "run",
    "much",
    "better",
    "let",
    "increase",
    "40",
    "font",
    "size",
    "going",
    "set",
    "geometry",
    "label",
    "positioning",
    "width",
    "height",
    "let",
    "take",
    "label",
    "use",
    "set",
    "geometry",
    "method",
    "pass",
    "x",
    "coordinates",
    "0",
    "0",
    "corresponds",
    "top",
    "left",
    "corner",
    "width",
    "let",
    "set",
    "width",
    "500",
    "height",
    "100",
    "better",
    "cover",
    "advanced",
    "alignments",
    "momentarily",
    "let",
    "add",
    "style",
    "sheet",
    "sheet",
    "pqt",
    "styles",
    "similar",
    "css",
    "would",
    "like",
    "learn",
    "css",
    "full",
    "course",
    "topic",
    "add",
    "css",
    "like",
    "properties",
    "accessing",
    "label",
    "object",
    "call",
    "method",
    "set",
    "style",
    "sheet",
    "within",
    "method",
    "pass",
    "css",
    "like",
    "properties",
    "color",
    "color",
    "let",
    "say",
    "blue",
    "css",
    "like",
    "properties",
    "end",
    "semicolon",
    "font",
    "color",
    "blue",
    "could",
    "also",
    "use",
    "rgb",
    "values",
    "heximal",
    "values",
    "could",
    "always",
    "look",
    "color",
    "picker",
    "pick",
    "specific",
    "color",
    "let",
    "pick",
    "something",
    "green",
    "either",
    "use",
    "rgb",
    "values",
    "heximal",
    "values",
    "copy",
    "value",
    "paste",
    "heximal",
    "value",
    "specific",
    "shade",
    "green",
    "think",
    "go",
    "something",
    "dark",
    "color",
    "going",
    "dark",
    "gray",
    "color",
    "could",
    "set",
    "background",
    "color",
    "new",
    "string",
    "background",
    "das",
    "color",
    "pick",
    "new",
    "color",
    "pick",
    "something",
    "blue",
    "decent",
    "color",
    "blue",
    "background",
    "dark",
    "gray",
    "text",
    "set",
    "font",
    "bold",
    "font",
    "weight",
    "bold",
    "font",
    "bold",
    "font",
    "style",
    "italic",
    "font",
    "style",
    "italic",
    "font",
    "italic",
    "underline",
    "text",
    "decoration",
    "underline",
    "text",
    "label",
    "underlined",
    "let",
    "work",
    "positioning",
    "next",
    "currently",
    "text",
    "left",
    "justified",
    "center",
    "vertically",
    "work",
    "alignments",
    "need",
    "import",
    "pi",
    "qt5",
    "qt",
    "core",
    "import",
    "qt",
    "class",
    "qt",
    "used",
    "alignments",
    "center",
    "text",
    "label",
    "top",
    "vertically",
    "take",
    "label",
    "use",
    "set",
    "alignment",
    "method",
    "pass",
    "flag",
    "access",
    "class",
    "qot",
    "access",
    "flag",
    "line",
    "top",
    "align",
    "text",
    "vertically",
    "top",
    "text",
    "aligned",
    "vertically",
    "top",
    "rather",
    "center",
    "bottom",
    "use",
    "flag",
    "line",
    "bottom",
    "align",
    "vertically",
    "bottom",
    "text",
    "bottom",
    "align",
    "vertically",
    "center",
    "align",
    "v",
    "center",
    "vertically",
    "center",
    "originally",
    "horizontal",
    "alignment",
    "add",
    "following",
    "okay",
    "align",
    "right",
    "pass",
    "flag",
    "align",
    "right",
    "horizontally",
    "align",
    "right",
    "text",
    "way",
    "right",
    "center",
    "line",
    "h",
    "h",
    "horizontal",
    "center",
    "text",
    "horizontally",
    "aligned",
    "center",
    "center",
    "left",
    "aline",
    "left",
    "text",
    "aligned",
    "left",
    "could",
    "combine",
    "horizontal",
    "vertical",
    "positioning",
    "take",
    "label",
    "call",
    "set",
    "alignment",
    "method",
    "align",
    "horizontally",
    "center",
    "follow",
    "bitwise",
    "operator",
    "vertical",
    "bar",
    "allows",
    "us",
    "combine",
    "flags",
    "align",
    "horizontally",
    "center",
    "vertically",
    "let",
    "align",
    "top",
    "text",
    "aligned",
    "horizontally",
    "aligned",
    "center",
    "vertically",
    "aligned",
    "top",
    "align",
    "bottom",
    "vertically",
    "horizontally",
    "center",
    "vertically",
    "aligned",
    "bottom",
    "center",
    "label",
    "line",
    "horizontal",
    "center",
    "line",
    "vertical",
    "center",
    "text",
    "middle",
    "label",
    "horizontally",
    "vertically",
    "shortcut",
    "center",
    "need",
    "flags",
    "shortcut",
    "following",
    "set",
    "alignment",
    "align",
    "center",
    "align",
    "text",
    "horizontally",
    "vertically",
    "center",
    "center",
    "right",
    "everybody",
    "introduction",
    "labels",
    "pi",
    "qt5",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "add",
    "images",
    "pi",
    "qt5",
    "need",
    "image",
    "work",
    "using",
    "profile",
    "picture",
    "youtube",
    "channel",
    "feel",
    "free",
    "take",
    "moment",
    "find",
    "picture",
    "maybe",
    "profile",
    "picture",
    "need",
    "following",
    "imports",
    "q",
    "label",
    "common",
    "straightforward",
    "approach",
    "displaying",
    "image",
    "add",
    "image",
    "label",
    "order",
    "display",
    "need",
    "import",
    "pi",
    "qt5",
    "package",
    "module",
    "qt",
    "gui",
    "import",
    "class",
    "qix",
    "map",
    "class",
    "qix",
    "map",
    "used",
    "handling",
    "images",
    "provides",
    "functionality",
    "loading",
    "manipulating",
    "displaying",
    "images",
    "load",
    "image",
    "q",
    "piix",
    "map",
    "object",
    "add",
    "q",
    "pix",
    "map",
    "object",
    "label",
    "order",
    "display",
    "within",
    "constructor",
    "main",
    "window",
    "create",
    "label",
    "label",
    "equals",
    "call",
    "q",
    "label",
    "constructor",
    "pass",
    "self",
    "self",
    "refers",
    "window",
    "object",
    "window",
    "parent",
    "widget",
    "label",
    "widget",
    "one",
    "children",
    "label",
    "set",
    "geometry",
    "label",
    "label",
    "set",
    "geometry",
    "method",
    "pass",
    "x",
    "coordinates",
    "well",
    "width",
    "height",
    "label",
    "coordinates",
    "let",
    "say",
    "zero",
    "label",
    "appear",
    "top",
    "left",
    "corner",
    "width",
    "250",
    "good",
    "height",
    "250",
    "well",
    "window",
    "label",
    "going",
    "appear",
    "top",
    "left",
    "corner",
    "however",
    "nothing",
    "added",
    "label",
    "widget",
    "q",
    "pix",
    "map",
    "comes",
    "create",
    "pix",
    "map",
    "object",
    "equals",
    "call",
    "constructor",
    "q",
    "pix",
    "map",
    "pass",
    "string",
    "represents",
    "relative",
    "file",
    "path",
    "absolute",
    "file",
    "path",
    "image",
    "image",
    "right",
    "next",
    "main",
    "python",
    "file",
    "need",
    "file",
    "name",
    "name",
    "image",
    "profile",
    "uncore",
    "pick",
    "jpeg",
    "run",
    "see",
    "image",
    "add",
    "pix",
    "map",
    "object",
    "label",
    "set",
    "take",
    "take",
    "label",
    "use",
    "set",
    "pixmap",
    "method",
    "pass",
    "pixmap",
    "object",
    "see",
    "image",
    "however",
    "image",
    "scale",
    "according",
    "size",
    "label",
    "enable",
    "call",
    "following",
    "method",
    "take",
    "label",
    "call",
    "set",
    "scaled",
    "contents",
    "method",
    "pass",
    "true",
    "image",
    "scale",
    "size",
    "label",
    "change",
    "size",
    "label",
    "let",
    "say",
    "100",
    "pixels",
    "scale",
    "even",
    "could",
    "even",
    "increase",
    "500",
    "image",
    "takes",
    "entire",
    "width",
    "height",
    "window",
    "let",
    "set",
    "back",
    "250",
    "tricks",
    "positioning",
    "image",
    "set",
    "label",
    "image",
    "move",
    "label",
    "within",
    "confines",
    "window",
    "currently",
    "set",
    "top",
    "left",
    "corner",
    "tricks",
    "positioning",
    "label",
    "set",
    "geometry",
    "top",
    "left",
    "corner",
    "0",
    "0",
    "coordinates",
    "could",
    "pass",
    "250",
    "250",
    "width",
    "height",
    "change",
    "initially",
    "create",
    "label",
    "would",
    "manually",
    "change",
    "well",
    "think",
    "would",
    "better",
    "get",
    "current",
    "width",
    "height",
    "label",
    "take",
    "label",
    "call",
    "width",
    "method",
    "get",
    "width",
    "thing",
    "applies",
    "height",
    "label",
    "height",
    "method",
    "work",
    "fine",
    "let",
    "say",
    "would",
    "like",
    "take",
    "image",
    "move",
    "right",
    "side",
    "window",
    "x",
    "coordinate",
    "going",
    "access",
    "self",
    "means",
    "window",
    "called",
    "width",
    "method",
    "currently",
    "ca",
    "see",
    "label",
    "placed",
    "outside",
    "confines",
    "window",
    "let",
    "subtract",
    "labels",
    "label",
    "width",
    "put",
    "arguments",
    "new",
    "line",
    "help",
    "readability",
    "image",
    "right",
    "justified",
    "within",
    "window",
    "bottom",
    "right",
    "corner",
    "take",
    "second",
    "argument",
    "access",
    "self",
    "height",
    "height",
    "window",
    "instantiating",
    "minus",
    "label",
    "height",
    "image",
    "bottom",
    "right",
    "corner",
    "bottom",
    "left",
    "corner",
    "set",
    "x",
    "zero",
    "tricky",
    "part",
    "image",
    "placed",
    "center",
    "center",
    "window",
    "take",
    "width",
    "window",
    "minus",
    "width",
    "label",
    "two",
    "integer",
    "division",
    "using",
    "double",
    "forward",
    "slashes",
    "need",
    "pixels",
    "whole",
    "integers",
    "going",
    "using",
    "integer",
    "division",
    "standard",
    "division",
    "round",
    "nearest",
    "whole",
    "pixel",
    "height",
    "well",
    "image",
    "middle",
    "window",
    "right",
    "everybody",
    "add",
    "image",
    "pi",
    "qt5",
    "application",
    "well",
    "hello",
    "friends",
    "today",
    "got",
    "explain",
    "layouts",
    "pqt",
    "5",
    "discuss",
    "vertical",
    "horizontal",
    "grid",
    "layouts",
    "need",
    "following",
    "imports",
    "importing",
    "q",
    "label",
    "q",
    "widget",
    "going",
    "put",
    "imports",
    "new",
    "line",
    "lot",
    "qv",
    "vertical",
    "box",
    "layout",
    "going",
    "copy",
    "qh",
    "horizontal",
    "box",
    "layout",
    "q",
    "grid",
    "layout",
    "let",
    "sure",
    "imports",
    "classes",
    "deal",
    "layout",
    "managers",
    "widgets",
    "writing",
    "majority",
    "code",
    "within",
    "main",
    "window",
    "class",
    "however",
    "get",
    "disorganized",
    "really",
    "quick",
    "help",
    "keep",
    "things",
    "organized",
    "declare",
    "separate",
    "function",
    "within",
    "main",
    "window",
    "class",
    "common",
    "practice",
    "see",
    "within",
    "pi",
    "qt5",
    "function",
    "innit",
    "initialize",
    "ui",
    "user",
    "interface",
    "arguments",
    "besides",
    "self",
    "write",
    "pass",
    "construct",
    "window",
    "object",
    "call",
    "self",
    "init",
    "ui",
    "initialize",
    "user",
    "interface",
    "anything",
    "deals",
    "user",
    "interface",
    "going",
    "writing",
    "within",
    "function",
    "help",
    "keep",
    "code",
    "clean",
    "organized",
    "normally",
    "ca",
    "add",
    "layout",
    "manager",
    "main",
    "window",
    "object",
    "main",
    "window",
    "widgets",
    "specific",
    "design",
    "layout",
    "structure",
    "normally",
    "incompatible",
    "layout",
    "managers",
    "would",
    "need",
    "create",
    "generic",
    "widget",
    "add",
    "layout",
    "manager",
    "widget",
    "add",
    "widget",
    "main",
    "window",
    "order",
    "display",
    "layout",
    "within",
    "method",
    "initialize",
    "user",
    "interface",
    "going",
    "create",
    "called",
    "central",
    "widget",
    "called",
    "constructor",
    "q",
    "widget",
    "generic",
    "widget",
    "take",
    "self",
    "self",
    "window",
    "call",
    "set",
    "central",
    "widget",
    "method",
    "pass",
    "central",
    "widget",
    "working",
    "layout",
    "managers",
    "add",
    "layout",
    "manager",
    "central",
    "widget",
    "central",
    "widget",
    "added",
    "main",
    "window",
    "currently",
    "working",
    "need",
    "widgets",
    "organize",
    "right",
    "empty",
    "let",
    "create",
    "labels",
    "let",
    "say",
    "label",
    "one",
    "equals",
    "q",
    "label",
    "pass",
    "text",
    "number",
    "one",
    "okay",
    "let",
    "create",
    "four",
    "additional",
    "labels",
    "1",
    "five",
    "copying",
    "pasting",
    "labels",
    "overlapping",
    "let",
    "add",
    "colors",
    "let",
    "take",
    "label",
    "one",
    "use",
    "set",
    "stylesheet",
    "method",
    "pass",
    "background",
    "color",
    "css",
    "property",
    "red",
    "let",
    "copy",
    "line",
    "code",
    "paste",
    "four",
    "additional",
    "times",
    "labels",
    "1",
    "5",
    "label",
    "yellow",
    "another",
    "green",
    "blue",
    "purple",
    "labels",
    "overlapping",
    "one",
    "another",
    "see",
    "five",
    "layout",
    "manager",
    "comes",
    "start",
    "vertical",
    "layout",
    "create",
    "vertical",
    "layout",
    "manager",
    "name",
    "vbx",
    "vbox",
    "equals",
    "call",
    "constructor",
    "qv",
    "box",
    "layout",
    "calling",
    "constructor",
    "take",
    "layout",
    "manager",
    "call",
    "add",
    "widget",
    "method",
    "pass",
    "widget",
    "label",
    "one",
    "near",
    "top",
    "labels",
    "copying",
    "pasting",
    "add",
    "label",
    "two",
    "3",
    "four",
    "five",
    "one",
    "last",
    "step",
    "take",
    "central",
    "widget",
    "declared",
    "top",
    "function",
    "call",
    "set",
    "layout",
    "method",
    "setting",
    "layout",
    "central",
    "widget",
    "layout",
    "manager",
    "vbx",
    "vertical",
    "box",
    "new",
    "layout",
    "labels",
    "widgets",
    "arranged",
    "vertically",
    "horizontal",
    "use",
    "qh",
    "box",
    "layout",
    "horizontal",
    "replace",
    "instance",
    "vbx",
    "hbox",
    "set",
    "layout",
    "method",
    "pass",
    "hbox",
    "allows",
    "horizontal",
    "layout",
    "grid",
    "q",
    "grid",
    "layout",
    "replace",
    "hbox",
    "grid",
    "grids",
    "adding",
    "widget",
    "specify",
    "row",
    "column",
    "separate",
    "arguments",
    "row",
    "column",
    "begin",
    "zero",
    "row",
    "one",
    "column",
    "1",
    "would",
    "row0",
    "column",
    "0",
    "label",
    "two",
    "let",
    "say",
    "row",
    "0",
    "column",
    "1",
    "label",
    "3",
    "row",
    "1",
    "column",
    "0",
    "four",
    "row",
    "one",
    "column",
    "1",
    "five",
    "row",
    "one",
    "column",
    "2",
    "current",
    "layout",
    "labels",
    "1",
    "two",
    "within",
    "row",
    "zero",
    "labels",
    "3",
    "four",
    "5",
    "within",
    "second",
    "row",
    "let",
    "say",
    "label",
    "five",
    "row",
    "2",
    "column",
    "2",
    "would",
    "result",
    "something",
    "like",
    "label",
    "five",
    "purple",
    "row",
    "two",
    "column",
    "2",
    "depends",
    "want",
    "arrange",
    "widgets",
    "right",
    "everybody",
    "introduction",
    "layout",
    "managers",
    "pi",
    "qt5",
    "today",
    "going",
    "show",
    "create",
    "push",
    "button",
    "widgets",
    "pi",
    "qt5",
    "begin",
    "need",
    "following",
    "imports",
    "q",
    "push",
    "button",
    "well",
    "q",
    "label",
    "demonstration",
    "previous",
    "topic",
    "layout",
    "managers",
    "within",
    "constructor",
    "main",
    "window",
    "defined",
    "method",
    "initialize",
    "ui",
    "user",
    "interface",
    "let",
    "sure",
    "calling",
    "method",
    "within",
    "constructor",
    "within",
    "method",
    "handling",
    "managing",
    "user",
    "interface",
    "create",
    "button",
    "call",
    "push",
    "button",
    "constructor",
    "normally",
    "creating",
    "widgets",
    "would",
    "want",
    "prefix",
    "widget",
    "self",
    "follow",
    "name",
    "widget",
    "example",
    "button",
    "however",
    "going",
    "demonstrate",
    "happens",
    "without",
    "self",
    "declaring",
    "local",
    "variable",
    "get",
    "back",
    "moment",
    "let",
    "create",
    "local",
    "button",
    "object",
    "calling",
    "q",
    "push",
    "button",
    "constructor",
    "pass",
    "text",
    "click",
    "add",
    "window",
    "self",
    "self",
    "refers",
    "window",
    "object",
    "let",
    "set",
    "geometry",
    "button",
    "button",
    "set",
    "geometry",
    "could",
    "use",
    "layout",
    "manager",
    "want",
    "keep",
    "lesson",
    "simple",
    "possible",
    "let",
    "pick",
    "coordinates",
    "picked",
    "following",
    "x",
    "coordinates",
    "150",
    "200",
    "width",
    "200",
    "height",
    "100",
    "button",
    "currently",
    "font",
    "little",
    "small",
    "going",
    "set",
    "stylesheet",
    "set",
    "style",
    "sheet",
    "increase",
    "font",
    "size",
    "could",
    "could",
    "use",
    "q",
    "font",
    "might",
    "overkill",
    "demonstration",
    "let",
    "say",
    "font",
    "size",
    "30",
    "pixels",
    "read",
    "button",
    "going",
    "connecting",
    "button",
    "function",
    "need",
    "define",
    "function",
    "within",
    "main",
    "window",
    "class",
    "define",
    "function",
    "click",
    "parameters",
    "besid",
    "self",
    "click",
    "button",
    "would",
    "like",
    "let",
    "print",
    "test",
    "message",
    "let",
    "say",
    "button",
    "clicked",
    "click",
    "button",
    "nothing",
    "happens",
    "set",
    "signal",
    "slot",
    "button",
    "take",
    "button",
    "dot",
    "list",
    "signal",
    "signal",
    "emitted",
    "widget",
    "interacted",
    "list",
    "type",
    "signal",
    "signal",
    "looking",
    "clicked",
    "click",
    "button",
    "perform",
    "slot",
    "action",
    "take",
    "signal",
    "clicked",
    "connect",
    "slot",
    "connect",
    "method",
    "slot",
    "self",
    "dot",
    "name",
    "method",
    "click",
    "press",
    "button",
    "perform",
    "slot",
    "method",
    "onclick",
    "time",
    "press",
    "button",
    "perform",
    "action",
    "print",
    "message",
    "demonstration",
    "let",
    "set",
    "text",
    "button",
    "button",
    "set",
    "text",
    "let",
    "change",
    "text",
    "clicked",
    "actually",
    "going",
    "work",
    "prefixing",
    "self",
    "let",
    "demonstrate",
    "happens",
    "print",
    "button",
    "clicked",
    "problem",
    "exit",
    "code",
    "program",
    "interrupted",
    "button",
    "considered",
    "local",
    "initializer",
    "method",
    "onclick",
    "function",
    "recognize",
    "button",
    "going",
    "prefix",
    "button",
    "self",
    "belongs",
    "class",
    "main",
    "window",
    "method",
    "instance",
    "button",
    "going",
    "prefix",
    "self",
    "work",
    "text",
    "button",
    "going",
    "change",
    "click",
    "clicked",
    "personal",
    "coding",
    "style",
    "whenever",
    "create",
    "variable",
    "object",
    "within",
    "class",
    "like",
    "within",
    "constructor",
    "even",
    "py",
    "charm",
    "giving",
    "warning",
    "declare",
    "button",
    "going",
    "move",
    "constructor",
    "let",
    "rearrange",
    "everything",
    "self",
    "button",
    "equals",
    "q",
    "push",
    "button",
    "widget",
    "within",
    "initializer",
    "method",
    "like",
    "rearrange",
    "everything",
    "style",
    "also",
    "disable",
    "buttons",
    "click",
    "take",
    "self",
    "button",
    "call",
    "set",
    "disabled",
    "method",
    "pass",
    "true",
    "click",
    "button",
    "disabled",
    "longer",
    "click",
    "last",
    "part",
    "demonstration",
    "click",
    "button",
    "let",
    "change",
    "text",
    "label",
    "let",
    "declare",
    "self",
    "label",
    "within",
    "constructor",
    "equals",
    "q",
    "label",
    "text",
    "label",
    "hello",
    "add",
    "label",
    "self",
    "window",
    "set",
    "user",
    "interface",
    "let",
    "set",
    "geometry",
    "label",
    "self",
    "label",
    "set",
    "geometry",
    "could",
    "use",
    "layout",
    "manager",
    "keep",
    "things",
    "simple",
    "going",
    "set",
    "coordinates",
    "150",
    "x",
    "300",
    "width",
    "200",
    "height",
    "100",
    "let",
    "change",
    "font",
    "size",
    "self",
    "label",
    "set",
    "style",
    "sheet",
    "set",
    "font",
    "size",
    "30",
    "maybe",
    "50",
    "better",
    "right",
    "within",
    "onclick",
    "function",
    "let",
    "instead",
    "take",
    "self",
    "label",
    "set",
    "text",
    "method",
    "pass",
    "new",
    "text",
    "display",
    "saying",
    "hello",
    "click",
    "button",
    "let",
    "say",
    "goodbye",
    "click",
    "button",
    "change",
    "text",
    "separate",
    "widget",
    "label",
    "says",
    "goodbye",
    "buttons",
    "need",
    "signal",
    "connected",
    "slot",
    "signal",
    "event",
    "slot",
    "action",
    "widget",
    "going",
    "take",
    "signal",
    "occurs",
    "well",
    "everybody",
    "introduction",
    "push",
    "buttons",
    "pi",
    "qt5",
    "hey",
    "uh",
    "today",
    "got",
    "explain",
    "checkboxes",
    "pqt",
    "5",
    "work",
    "checkboxes",
    "need",
    "following",
    "import",
    "module",
    "widgets",
    "pi",
    "qt5",
    "import",
    "q",
    "check",
    "box",
    "work",
    "different",
    "states",
    "also",
    "need",
    "following",
    "import",
    "pi",
    "qt5",
    "qt",
    "core",
    "import",
    "qt",
    "module",
    "qt",
    "core",
    "contains",
    "classes",
    "relevant",
    "pi",
    "qt5",
    "applications",
    "sure",
    "get",
    "import",
    "well",
    "create",
    "checkbox",
    "create",
    "within",
    "constructor",
    "main",
    "window",
    "create",
    "checkbox",
    "self",
    "name",
    "checkbox",
    "name",
    "checkbox",
    "equals",
    "call",
    "constructor",
    "q",
    "checkbox",
    "class",
    "first",
    "argument",
    "going",
    "text",
    "checkbox",
    "want",
    "checkbox",
    "say",
    "let",
    "ask",
    "like",
    "food",
    "second",
    "argument",
    "parent",
    "widget",
    "adding",
    "checkbox",
    "let",
    "say",
    "self",
    "self",
    "apply",
    "window",
    "could",
    "use",
    "layout",
    "manager",
    "want",
    "keep",
    "lesson",
    "simple",
    "possible",
    "going",
    "focus",
    "checkboxes",
    "functionality",
    "checkbox",
    "however",
    "barely",
    "see",
    "font",
    "really",
    "small",
    "method",
    "initialize",
    "user",
    "interface",
    "set",
    "stylesheet",
    "g",
    "ometry",
    "checkbox",
    "let",
    "set",
    "stylesheet",
    "self",
    "name",
    "checkbox",
    "checkbox",
    "set",
    "styles",
    "sheet",
    "method",
    "pass",
    "css",
    "like",
    "properties",
    "let",
    "set",
    "font",
    "size",
    "30",
    "pixels",
    "pick",
    "font",
    "family",
    "font",
    "family",
    "aial",
    "oh",
    "change",
    "geometry",
    "label",
    "getting",
    "cut",
    "self",
    "name",
    "checkbox",
    "checkbox",
    "let",
    "set",
    "geometry",
    "pass",
    "x",
    "coordinates",
    "placement",
    "well",
    "width",
    "height",
    "pick",
    "500",
    "100",
    "uh",
    "maybe",
    "move",
    "little",
    "right",
    "10",
    "pixels",
    "pretty",
    "good",
    "checkbox",
    "initial",
    "state",
    "normally",
    "unchecked",
    "default",
    "behavior",
    "could",
    "set",
    "checked",
    "following",
    "method",
    "window",
    "loads",
    "let",
    "take",
    "checkbox",
    "self",
    "checkbox",
    "call",
    "set",
    "checked",
    "method",
    "pass",
    "true",
    "window",
    "loads",
    "checkbox",
    "already",
    "checked",
    "let",
    "keep",
    "false",
    "checkbox",
    "anything",
    "check",
    "let",
    "add",
    "functionality",
    "take",
    "checkbox",
    "connect",
    "signal",
    "slot",
    "slot",
    "function",
    "method",
    "let",
    "define",
    "method",
    "within",
    "main",
    "window",
    "class",
    "let",
    "name",
    "method",
    "checkbox",
    "changed",
    "call",
    "method",
    "state",
    "checkbox",
    "changed",
    "changes",
    "one",
    "parameter",
    "besides",
    "self",
    "state",
    "state",
    "parameter",
    "going",
    "provided",
    "us",
    "interact",
    "checkbox",
    "check",
    "checkbox",
    "let",
    "print",
    "something",
    "like",
    "test",
    "message",
    "like",
    "food",
    "connect",
    "signal",
    "state",
    "changed",
    "slot",
    "checkbox",
    "changed",
    "take",
    "self",
    "dot",
    "name",
    "checkbox",
    "checkbox",
    "signal",
    "state",
    "changed",
    "connect",
    "slot",
    "signal",
    "use",
    "connect",
    "method",
    "pass",
    "function",
    "method",
    "name",
    "working",
    "methods",
    "method",
    "belongs",
    "window",
    "class",
    "prefix",
    "method",
    "name",
    "self",
    "self",
    "checkbox",
    "changed",
    "run",
    "program",
    "check",
    "checkbox",
    "execute",
    "method",
    "like",
    "food",
    "uncheck",
    "instead",
    "would",
    "like",
    "display",
    "like",
    "food",
    "state",
    "going",
    "come",
    "going",
    "print",
    "state",
    "see",
    "state",
    "going",
    "value",
    "check",
    "checkbox",
    "state",
    "value",
    "two",
    "uncheck",
    "value",
    "zero",
    "0",
    "zero",
    "means",
    "unchecked",
    "two",
    "means",
    "checked",
    "also",
    "one",
    "partially",
    "checked",
    "going",
    "relevant",
    "topic",
    "zero",
    "two",
    "could",
    "add",
    "statement",
    "state",
    "equal",
    "two",
    "print",
    "like",
    "food",
    "however",
    "really",
    "readable",
    "developers",
    "looking",
    "code",
    "going",
    "understand",
    "two",
    "looking",
    "instead",
    "let",
    "use",
    "following",
    "access",
    "class",
    "qt",
    "constant",
    "checked",
    "also",
    "equals",
    "two",
    "readable",
    "constant",
    "state",
    "equal",
    "qt",
    "checked",
    "print",
    "like",
    "food",
    "check",
    "checkbox",
    "like",
    "food",
    "uncheck",
    "nothing",
    "happens",
    "let",
    "add",
    "else",
    "statement",
    "else",
    "let",
    "print",
    "like",
    "food",
    "check",
    "checkbox",
    "print",
    "like",
    "food",
    "uncheck",
    "print",
    "like",
    "food",
    "like",
    "food",
    "like",
    "food",
    "like",
    "food",
    "like",
    "food",
    "right",
    "everybody",
    "introduction",
    "checkboxes",
    "pi",
    "qt5",
    "right",
    "let",
    "thing",
    "today",
    "got",
    "talk",
    "radio",
    "buttons",
    "pi",
    "qt5",
    "work",
    "radio",
    "buttons",
    "need",
    "following",
    "imports",
    "module",
    "qt",
    "widgets",
    "need",
    "class",
    "q",
    "radio",
    "button",
    "well",
    "q",
    "button",
    "group",
    "group",
    "together",
    "different",
    "buttons",
    "let",
    "create",
    "three",
    "radio",
    "buttons",
    "within",
    "constructor",
    "main",
    "window",
    "construct",
    "three",
    "radio",
    "buttons",
    "first",
    "radio",
    "button",
    "named",
    "radio",
    "one",
    "call",
    "constructor",
    "class",
    "q",
    "radio",
    "button",
    "pass",
    "text",
    "radio",
    "button",
    "going",
    "say",
    "let",
    "say",
    "working",
    "payment",
    "options",
    "let",
    "say",
    "visa",
    "first",
    "option",
    "second",
    "argument",
    "pass",
    "add",
    "radio",
    "button",
    "directly",
    "window",
    "would",
    "self",
    "let",
    "create",
    "two",
    "additional",
    "radio",
    "buttons",
    "radio",
    "2",
    "radio",
    "3",
    "text",
    "radio",
    "button",
    "two",
    "mastercard",
    "three",
    "gift",
    "card",
    "selecting",
    "different",
    "payment",
    "options",
    "need",
    "set",
    "geometry",
    "radio",
    "buttons",
    "using",
    "layout",
    "manager",
    "method",
    "initialize",
    "user",
    "interface",
    "set",
    "geometry",
    "radio",
    "buttons",
    "let",
    "say",
    "self",
    "radio1",
    "call",
    "set",
    "geometry",
    "method",
    "pass",
    "coordinates",
    "0",
    "0",
    "good",
    "applies",
    "top",
    "left",
    "corner",
    "window",
    "width",
    "300",
    "height",
    "50",
    "good",
    "let",
    "radio",
    "buttons",
    "2",
    "three",
    "radio",
    "2",
    "radio",
    "3",
    "move",
    "radio",
    "button",
    "ais",
    "50",
    "pixels",
    "50",
    "100",
    "three",
    "radio",
    "buttons",
    "however",
    "font",
    "kind",
    "small",
    "barely",
    "see",
    "let",
    "apply",
    "stylesheet",
    "trick",
    "stylesheets",
    "apply",
    "multiple",
    "css",
    "like",
    "properties",
    "entire",
    "group",
    "widgets",
    "rather",
    "type",
    "apply",
    "individually",
    "select",
    "window",
    "self",
    "set",
    "style",
    "sheet",
    "window",
    "set",
    "style",
    "sheet",
    "method",
    "add",
    "selector",
    "selector",
    "going",
    "name",
    "widget",
    "q",
    "radio",
    "button",
    "case",
    "add",
    "set",
    "curly",
    "braces",
    "apply",
    "css",
    "like",
    "properties",
    "entire",
    "group",
    "widgets",
    "way",
    "let",
    "set",
    "font",
    "size",
    "radio",
    "buttons",
    "40",
    "pixels",
    "better",
    "let",
    "set",
    "font",
    "family",
    "aial",
    "add",
    "little",
    "bit",
    "padding",
    "around",
    "radio",
    "button",
    "padding",
    "10",
    "pixels",
    "pretty",
    "good",
    "radio",
    "buttons",
    "select",
    "one",
    "one",
    "radio",
    "button",
    "group",
    "making",
    "payment",
    "ca",
    "pay",
    "visa",
    "mastercard",
    "time",
    "select",
    "one",
    "option",
    "point",
    "radio",
    "buttons",
    "limited",
    "one",
    "option",
    "default",
    "behavior",
    "pi",
    "qt5",
    "radio",
    "buttons",
    "unless",
    "explicitly",
    "stated",
    "part",
    "group",
    "demonstrate",
    "let",
    "create",
    "two",
    "additional",
    "radio",
    "buttons",
    "radio",
    "4",
    "radio",
    "5",
    "radio",
    "button",
    "4",
    "payment",
    "method",
    "rather",
    "payment",
    "type",
    "example",
    "could",
    "say",
    "paying",
    "store",
    "radio",
    "button",
    "5",
    "paying",
    "online",
    "radio",
    "buttons",
    "1",
    "3",
    "payment",
    "type",
    "radio",
    "buttons",
    "four",
    "five",
    "payment",
    "method",
    "either",
    "paying",
    "store",
    "ordering",
    "something",
    "online",
    "need",
    "set",
    "geometry",
    "two",
    "radio",
    "buttons",
    "copy",
    "two",
    "lines",
    "add",
    "radio",
    "4",
    "radio",
    "5",
    "set",
    "four",
    "150",
    "5",
    "200",
    "radio",
    "buttons",
    "within",
    "button",
    "group",
    "select",
    "store",
    "deselect",
    "one",
    "options",
    "would",
    "like",
    "one",
    "option",
    "first",
    "group",
    "another",
    "option",
    "group",
    "buttons",
    "group",
    "group",
    "select",
    "one",
    "would",
    "like",
    "pay",
    "visa",
    "store",
    "click",
    "store",
    "radio",
    "button",
    "unselect",
    "radio",
    "button",
    "visa",
    "would",
    "like",
    "radio",
    "buttons",
    "within",
    "different",
    "groups",
    "need",
    "create",
    "two",
    "different",
    "groups",
    "add",
    "accordingly",
    "within",
    "constructor",
    "access",
    "self",
    "declare",
    "button",
    "group",
    "let",
    "name",
    "button",
    "group",
    "one",
    "simplicity",
    "equals",
    "call",
    "constructor",
    "class",
    "q",
    "button",
    "group",
    "pass",
    "set",
    "parent",
    "widget",
    "window",
    "create",
    "button",
    "group",
    "two",
    "going",
    "access",
    "self",
    "select",
    "radio",
    "button",
    "group",
    "button",
    "group",
    "one",
    "call",
    "add",
    "button",
    "method",
    "pass",
    "radio",
    "button",
    "self",
    "radio",
    "1",
    "add",
    "radio",
    "2",
    "radio",
    "3",
    "select",
    "button",
    "group",
    "two",
    "time",
    "button",
    "group",
    "two",
    "add",
    "radio",
    "button",
    "4",
    "radio",
    "button",
    "5",
    "first",
    "three",
    "radio",
    "buttons",
    "within",
    "group",
    "radio",
    "buttons",
    "4",
    "five",
    "within",
    "different",
    "group",
    "select",
    "one",
    "radio",
    "button",
    "one",
    "radio",
    "button",
    "group",
    "maybe",
    "would",
    "like",
    "pay",
    "visa",
    "card",
    "store",
    "master",
    "card",
    "online",
    "gift",
    "card",
    "store",
    "radio",
    "buttons",
    "within",
    "different",
    "button",
    "groups",
    "limited",
    "one",
    "selection",
    "one",
    "radio",
    "button",
    "group",
    "select",
    "radio",
    "buttons",
    "quite",
    "anything",
    "radio",
    "button",
    "connect",
    "signal",
    "slot",
    "let",
    "define",
    "method",
    "radio",
    "button",
    "changed",
    "parameters",
    "beside",
    "self",
    "temporarily",
    "write",
    "pass",
    "fill",
    "moment",
    "take",
    "radio",
    "button",
    "let",
    "start",
    "radio",
    "one",
    "radio",
    "one",
    "signal",
    "toggled",
    "radio",
    "button",
    "toggled",
    "connect",
    "slot",
    "pass",
    "function",
    "method",
    "self",
    "dot",
    "radio",
    "button",
    "changed",
    "radio",
    "buttons",
    "one",
    "five",
    "let",
    "print",
    "test",
    "message",
    "selected",
    "something",
    "sure",
    "everything",
    "working",
    "selected",
    "something",
    "okay",
    "know",
    "works",
    "currently",
    "going",
    "need",
    "get",
    "sender",
    "widget",
    "radio",
    "button",
    "sent",
    "signal",
    "toggled",
    "create",
    "local",
    "radio",
    "button",
    "store",
    "radio",
    "button",
    "whichever",
    "one",
    "emitted",
    "signal",
    "determine",
    "self",
    "sender",
    "method",
    "sender",
    "method",
    "going",
    "return",
    "widget",
    "sent",
    "signal",
    "select",
    "radio",
    "button",
    "one",
    "radio",
    "button",
    "radio",
    "button",
    "one",
    "five",
    "five",
    "case",
    "determine",
    "radio",
    "button",
    "checked",
    "take",
    "radio",
    "button",
    "use",
    "checked",
    "method",
    "return",
    "boolean",
    "true",
    "false",
    "checked",
    "returns",
    "true",
    "let",
    "print",
    "following",
    "use",
    "f",
    "string",
    "get",
    "text",
    "radio",
    "button",
    "radio",
    "button",
    "called",
    "text",
    "method",
    "return",
    "text",
    "radio",
    "button",
    "selected",
    "right",
    "let",
    "see",
    "works",
    "let",
    "select",
    "visa",
    "visa",
    "selected",
    "mastercard",
    "selected",
    "gift",
    "card",
    "selected",
    "store",
    "selected",
    "online",
    "selected",
    "determine",
    "radio",
    "button",
    "selected",
    "one",
    "sender",
    "one",
    "sent",
    "signal",
    "right",
    "everybody",
    "introduction",
    "radio",
    "buttons",
    "pyqt5",
    "hello",
    "everybody",
    "today",
    "got",
    "explain",
    "line",
    "edit",
    "widgets",
    "pyqt5",
    "also",
    "known",
    "textboxes",
    "pretty",
    "much",
    "anything",
    "ever",
    "made",
    "ever",
    "called",
    "line",
    "edit",
    "widgets",
    "really",
    "know",
    "let",
    "begin",
    "module",
    "qt",
    "widgets",
    "import",
    "following",
    "class",
    "q",
    "line",
    "edit",
    "create",
    "text",
    "box",
    "mean",
    "line",
    "edit",
    "widget",
    "accessing",
    "window",
    "self",
    "call",
    "line",
    "edit",
    "widget",
    "line",
    "edit",
    "equals",
    "call",
    "constructor",
    "class",
    "q",
    "line",
    "edit",
    "pass",
    "self",
    "add",
    "line",
    "edit",
    "widget",
    "window",
    "let",
    "set",
    "geometry",
    "text",
    "box",
    "type",
    "stuff",
    "method",
    "initialize",
    "user",
    "interface",
    "within",
    "method",
    "access",
    "self",
    "dot",
    "line",
    "edit",
    "widget",
    "set",
    "geometry",
    "let",
    "set",
    "top",
    "left",
    "corner",
    "x",
    "10",
    "10",
    "set",
    "width",
    "200",
    "good",
    "height",
    "40",
    "bad",
    "text",
    "really",
    "small",
    "change",
    "applying",
    "stylesheet",
    "access",
    "window",
    "self",
    "access",
    "line",
    "edit",
    "widget",
    "call",
    "set",
    "stylesheet",
    "method",
    "pass",
    "css",
    "like",
    "properties",
    "including",
    "font",
    "size",
    "let",
    "pick",
    "25",
    "pixels",
    "new",
    "text",
    "box",
    "read",
    "text",
    "let",
    "also",
    "change",
    "font",
    "family",
    "font",
    "family",
    "pick",
    "aial",
    "text",
    "box",
    "really",
    "anything",
    "need",
    "way",
    "get",
    "text",
    "text",
    "box",
    "let",
    "add",
    "button",
    "click",
    "button",
    "get",
    "text",
    "text",
    "box",
    "something",
    "cuz",
    "right",
    "anything",
    "need",
    "import",
    "q",
    "push",
    "button",
    "let",
    "create",
    "one",
    "button",
    "self",
    "button",
    "equals",
    "call",
    "constructor",
    "class",
    "q",
    "push",
    "button",
    "let",
    "say",
    "submit",
    "button",
    "pass",
    "string",
    "submit",
    "adding",
    "button",
    "window",
    "need",
    "set",
    "geometry",
    "button",
    "using",
    "layout",
    "manager",
    "right",
    "access",
    "window",
    "self",
    "access",
    "button",
    "previously",
    "created",
    "constructor",
    "call",
    "set",
    "geometry",
    "method",
    "place",
    "button",
    "x",
    "210",
    "10",
    "width",
    "100",
    "height",
    "40",
    "bad",
    "let",
    "change",
    "font",
    "size",
    "button",
    "copy",
    "two",
    "lines",
    "code",
    "lazy",
    "instead",
    "selecting",
    "line",
    "edit",
    "widget",
    "select",
    "button",
    "better",
    "click",
    "button",
    "anything",
    "set",
    "signal",
    "clicked",
    "connect",
    "method",
    "something",
    "let",
    "define",
    "method",
    "submit",
    "submitting",
    "something",
    "submitting",
    "text",
    "within",
    "text",
    "box",
    "right",
    "pass",
    "get",
    "back",
    "second",
    "going",
    "take",
    "button",
    "self",
    "button",
    "connect",
    "signal",
    "clicked",
    "clicked",
    "connect",
    "method",
    "connect",
    "method",
    "submit",
    "self",
    "submit",
    "click",
    "button",
    "call",
    "method",
    "let",
    "print",
    "test",
    "message",
    "clicked",
    "button",
    "let",
    "type",
    "something",
    "press",
    "submit",
    "get",
    "test",
    "message",
    "clicked",
    "button",
    "let",
    "get",
    "text",
    "text",
    "box",
    "something",
    "let",
    "create",
    "local",
    "variable",
    "text",
    "text",
    "equals",
    "get",
    "text",
    "line",
    "edit",
    "widget",
    "self",
    "line",
    "edit",
    "widget",
    "get",
    "text",
    "use",
    "text",
    "method",
    "return",
    "text",
    "let",
    "print",
    "text",
    "use",
    "f",
    "string",
    "say",
    "hello",
    "add",
    "placeholder",
    "display",
    "text",
    "typing",
    "something",
    "type",
    "name",
    "press",
    "submit",
    "display",
    "hello",
    "name",
    "could",
    "add",
    "placeholder",
    "text",
    "let",
    "let",
    "take",
    "self",
    "line",
    "edit",
    "widget",
    "set",
    "placeholder",
    "text",
    "let",
    "say",
    "enter",
    "name",
    "run",
    "program",
    "placeholder",
    "text",
    "says",
    "enter",
    "name",
    "time",
    "type",
    "spongebob",
    "press",
    "submit",
    "hello",
    "spongebob",
    "right",
    "everybody",
    "line",
    "edit",
    "widgets",
    "also",
    "commonly",
    "referred",
    "text",
    "boxes",
    "well",
    "everybody",
    "line",
    "edit",
    "widgets",
    "pi",
    "qt5",
    "hello",
    "everybody",
    "today",
    "video",
    "going",
    "explain",
    "setting",
    "stylesheets",
    "pyqt5",
    "css",
    "means",
    "cascading",
    "stylesheets",
    "familiar",
    "css",
    "still",
    "follow",
    "along",
    "knowing",
    "css",
    "helpful",
    "reminder",
    "full",
    "free",
    "course",
    "youtube",
    "html",
    "css",
    "would",
    "like",
    "learn",
    "let",
    "begin",
    "demonstration",
    "need",
    "following",
    "imports",
    "designing",
    "buttons",
    "import",
    "q",
    "push",
    "button",
    "working",
    "layout",
    "manager",
    "import",
    "q",
    "widget",
    "horizontal",
    "layout",
    "manager",
    "need",
    "q",
    "hbox",
    "layout",
    "import",
    "three",
    "module",
    "qt",
    "widgets",
    "previous",
    "topics",
    "set",
    "geometry",
    "window",
    "since",
    "using",
    "layout",
    "manager",
    "necessarily",
    "need",
    "anymore",
    "going",
    "delete",
    "past",
    "also",
    "created",
    "method",
    "initialize",
    "user",
    "interface",
    "calling",
    "within",
    "constructor",
    "main",
    "window",
    "create",
    "three",
    "push",
    "button",
    "widgets",
    "self",
    "button",
    "one",
    "first",
    "button",
    "equals",
    "take",
    "q",
    "push",
    "button",
    "class",
    "call",
    "constructor",
    "add",
    "text",
    "button",
    "pass",
    "argument",
    "since",
    "using",
    "layout",
    "manager",
    "need",
    "add",
    "button",
    "self",
    "window",
    "need",
    "let",
    "create",
    "two",
    "buttons",
    "button",
    "two",
    "button",
    "three",
    "button",
    "two",
    "say",
    "number",
    "two",
    "button",
    "three",
    "say",
    "number",
    "three",
    "create",
    "layout",
    "manager",
    "normal",
    "circumstances",
    "ca",
    "add",
    "layout",
    "manager",
    "main",
    "window",
    "main",
    "window",
    "widgets",
    "already",
    "specified",
    "layout",
    "format",
    "going",
    "add",
    "layout",
    "manager",
    "central",
    "widget",
    "widget",
    "added",
    "main",
    "window",
    "let",
    "take",
    "care",
    "within",
    "initialized",
    "user",
    "interface",
    "method",
    "create",
    "central",
    "widget",
    "equals",
    "call",
    "constructor",
    "q",
    "widget",
    "take",
    "self",
    "means",
    "window",
    "set",
    "central",
    "widget",
    "set",
    "central",
    "widget",
    "pass",
    "central",
    "widget",
    "set",
    "create",
    "layout",
    "call",
    "constructor",
    "within",
    "class",
    "qbox",
    "layout",
    "let",
    "name",
    "layout",
    "hbox",
    "horizontal",
    "box",
    "equals",
    "call",
    "constructor",
    "within",
    "class",
    "take",
    "layout",
    "horizontal",
    "box",
    "add",
    "following",
    "widgets",
    "add",
    "widget",
    "self",
    "button",
    "one",
    "two",
    "three",
    "last",
    "thing",
    "need",
    "take",
    "central",
    "widget",
    "call",
    "set",
    "layout",
    "method",
    "pass",
    "layout",
    "manager",
    "three",
    "buttons",
    "arranged",
    "horizontally",
    "going",
    "apply",
    "css",
    "like",
    "styling",
    "using",
    "method",
    "set",
    "style",
    "sheet",
    "rather",
    "apply",
    "css",
    "properties",
    "individually",
    "self",
    "button",
    "one",
    "stylesheet",
    "past",
    "passed",
    "individual",
    "css",
    "properties",
    "instead",
    "going",
    "set",
    "stylesheet",
    "window",
    "self",
    "lot",
    "write",
    "instead",
    "double",
    "quotes",
    "going",
    "use",
    "triple",
    "quotes",
    "triple",
    "quotes",
    "used",
    "write",
    "long",
    "strings",
    "organized",
    "way",
    "css",
    "properties",
    "going",
    "write",
    "going",
    "within",
    "set",
    "triple",
    "quotes",
    "let",
    "give",
    "demonstration",
    "could",
    "individually",
    "apply",
    "css",
    "like",
    "properties",
    "widgets",
    "could",
    "select",
    "entire",
    "class",
    "widgets",
    "let",
    "select",
    "class",
    "q",
    "push",
    "button",
    "add",
    "set",
    "curly",
    "braces",
    "following",
    "css",
    "properties",
    "apply",
    "q",
    "push",
    "button",
    "widgets",
    "currently",
    "increase",
    "font",
    "size",
    "every",
    "push",
    "button",
    "add",
    "following",
    "property",
    "font",
    "size",
    "set",
    "40",
    "pixels",
    "sure",
    "end",
    "css",
    "property",
    "semicolon",
    "font",
    "size",
    "40",
    "every",
    "button",
    "let",
    "set",
    "font",
    "font",
    "family",
    "pick",
    "aial",
    "let",
    "add",
    "padding",
    "add",
    "space",
    "around",
    "text",
    "button",
    "padding",
    "set",
    "75",
    "pixels",
    "would",
    "75",
    "pixels",
    "worth",
    "space",
    "text",
    "border",
    "button",
    "would",
    "like",
    "change",
    "dimensions",
    "padding",
    "let",
    "apply",
    "15",
    "pixels",
    "top",
    "bottom",
    "button",
    "75",
    "sides",
    "better",
    "margin",
    "space",
    "around",
    "button",
    "let",
    "set",
    "margin",
    "25",
    "pixels",
    "buttons",
    "spread",
    "250",
    "would",
    "really",
    "spread",
    "margin",
    "space",
    "around",
    "widget",
    "let",
    "set",
    "back",
    "25",
    "going",
    "change",
    "border",
    "border",
    "3",
    "pixels",
    "solid",
    "would",
    "change",
    "border",
    "buttons",
    "black",
    "border",
    "three",
    "pixels",
    "width",
    "would",
    "like",
    "round",
    "corners",
    "use",
    "border",
    "radius",
    "set",
    "15",
    "pixels",
    "buttons",
    "corners",
    "rounded",
    "within",
    "set",
    "style",
    "sheet",
    "method",
    "applying",
    "css",
    "like",
    "properties",
    "every",
    "push",
    "button",
    "would",
    "like",
    "apply",
    "css",
    "properties",
    "one",
    "widget",
    "rather",
    "widgets",
    "buttons",
    "1",
    "two",
    "three",
    "need",
    "set",
    "object",
    "name",
    "let",
    "call",
    "set",
    "stylesheet",
    "method",
    "take",
    "buttons",
    "self",
    "button",
    "one",
    "call",
    "set",
    "object",
    "name",
    "method",
    "pass",
    "name",
    "widget",
    "keep",
    "name",
    "button",
    "one",
    "let",
    "button",
    "two",
    "button",
    "three",
    "button",
    "two",
    "button",
    "three",
    "within",
    "context",
    "set",
    "stylesheet",
    "refer",
    "widgets",
    "object",
    "name",
    "buttons",
    "1",
    "2",
    "three",
    "select",
    "individually",
    "let",
    "say",
    "button",
    "one",
    "would",
    "like",
    "background",
    "color",
    "red",
    "going",
    "access",
    "class",
    "q",
    "push",
    "button",
    "follow",
    "pound",
    "sign",
    "like",
    "call",
    "hashtag",
    "need",
    "object",
    "name",
    "button",
    "one",
    "button",
    "one",
    "refers",
    "widget",
    "button",
    "one",
    "kept",
    "name",
    "need",
    "set",
    "curly",
    "braces",
    "set",
    "curly",
    "braces",
    "list",
    "one",
    "many",
    "different",
    "css",
    "properties",
    "let",
    "change",
    "background",
    "color",
    "set",
    "red",
    "background",
    "color",
    "button",
    "red",
    "set",
    "background",
    "color",
    "within",
    "class",
    "well",
    "would",
    "red",
    "okay",
    "button",
    "two",
    "copy",
    "paste",
    "selecting",
    "id",
    "button",
    "two",
    "let",
    "set",
    "background",
    "color",
    "green",
    "background",
    "color",
    "green",
    "button",
    "three",
    "button",
    "three",
    "blue",
    "would",
    "like",
    "greater",
    "variety",
    "colors",
    "recommend",
    "looking",
    "color",
    "picker",
    "google",
    "color",
    "picker",
    "would",
    "like",
    "specific",
    "shade",
    "red",
    "pick",
    "let",
    "go",
    "options",
    "provided",
    "use",
    "hex",
    "values",
    "specific",
    "shade",
    "red",
    "use",
    "rgb",
    "rgb",
    "en",
    "close",
    "within",
    "set",
    "parentheses",
    "paste",
    "numbers",
    "favorite",
    "hsl",
    "hsl",
    "means",
    "hue",
    "saturation",
    "lightness",
    "enclose",
    "values",
    "within",
    "hsl",
    "copy",
    "values",
    "directly",
    "google",
    "would",
    "remove",
    "degree",
    "symbol",
    "like",
    "hsl",
    "also",
    "control",
    "saturation",
    "lightness",
    "pretty",
    "easily",
    "okay",
    "let",
    "pick",
    "specific",
    "shade",
    "green",
    "good",
    "would",
    "say",
    "use",
    "hsl",
    "values",
    "hsl",
    "remove",
    "degree",
    "symbol",
    "specific",
    "shade",
    "green",
    "blue",
    "good",
    "would",
    "say",
    "bad",
    "already",
    "familiar",
    "css",
    "apply",
    "pseudo",
    "classes",
    "hover",
    "one",
    "buttons",
    "let",
    "copy",
    "three",
    "blocks",
    "paste",
    "add",
    "css",
    "properties",
    "hover",
    "something",
    "use",
    "hover",
    "pse",
    "sudo",
    "class",
    "id",
    "buttons",
    "add",
    "cod",
    "hover",
    "apply",
    "following",
    "css",
    "properties",
    "hover",
    "buttons",
    "going",
    "lightness",
    "let",
    "say",
    "20",
    "hover",
    "one",
    "buttons",
    "lightness",
    "going",
    "change",
    "apply",
    "new",
    "css",
    "properties",
    "right",
    "everybody",
    "explanation",
    "set",
    "stylesheet",
    "method",
    "pi",
    "qt5",
    "right",
    "everybody",
    "today",
    "video",
    "going",
    "build",
    "digital",
    "clock",
    "widget",
    "using",
    "python",
    "pi",
    "qt5",
    "library",
    "top",
    "python",
    "file",
    "need",
    "following",
    "imports",
    "import",
    "cis",
    "cis",
    "means",
    "system",
    "module",
    "provides",
    "variables",
    "used",
    "maintained",
    "python",
    "interpreter",
    "would",
    "also",
    "need",
    "widgets",
    "widgets",
    "building",
    "blocks",
    "guy",
    "application",
    "package",
    "pi",
    "qt5",
    "need",
    "access",
    "module",
    "qt",
    "widgets",
    "import",
    "following",
    "q",
    "application",
    "q",
    "widget",
    "generic",
    "widget",
    "turn",
    "digital",
    "clock",
    "widget",
    "q",
    "label",
    "work",
    "labels",
    "using",
    "layout",
    "manager",
    "specifically",
    "qv",
    "box",
    "layout",
    "another",
    "import",
    "need",
    "package",
    "pi",
    "qt5",
    "access",
    "module",
    "qt",
    "core",
    "qt",
    "core",
    "module",
    "provides",
    "functionality",
    "related",
    "guy",
    "components",
    "get",
    "timer",
    "keep",
    "track",
    "time",
    "module",
    "import",
    "q",
    "timer",
    "q",
    "time",
    "qt",
    "qt",
    "alignment",
    "create",
    "class",
    "digital",
    "clock",
    "instead",
    "inheriting",
    "main",
    "window",
    "window",
    "widget",
    "inherit",
    "base",
    "class",
    "q",
    "widget",
    "q",
    "widget",
    "base",
    "class",
    "create",
    "widgets",
    "digital",
    "clock",
    "widget",
    "need",
    "constructor",
    "let",
    "define",
    "define",
    "init",
    "pass",
    "self",
    "arguments",
    "send",
    "parent",
    "call",
    "constructor",
    "parent",
    "super",
    "class",
    "super",
    "called",
    "init",
    "method",
    "end",
    "constructor",
    "like",
    "call",
    "method",
    "initialize",
    "ui",
    "init",
    "ui",
    "separate",
    "method",
    "define",
    "init",
    "ui",
    "parameters",
    "besid",
    "self",
    "write",
    "pass",
    "within",
    "method",
    "designing",
    "layout",
    "digital",
    "clock",
    "within",
    "constructor",
    "constructing",
    "different",
    "entities",
    "clock",
    "end",
    "python",
    "file",
    "add",
    "following",
    "statement",
    "thunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "statement",
    "true",
    "running",
    "program",
    "directly",
    "create",
    "application",
    "create",
    "f",
    "object",
    "equals",
    "call",
    "constructor",
    "within",
    "class",
    "q",
    "application",
    "argument",
    "constructor",
    "pass",
    "following",
    "argument",
    "access",
    "module",
    "cis",
    "rgv",
    "means",
    "arguments",
    "would",
    "apply",
    "running",
    "command",
    "prompt",
    "terminal",
    "wo",
    "video",
    "nice",
    "set",
    "case",
    "future",
    "going",
    "create",
    "clock",
    "object",
    "clock",
    "equals",
    "call",
    "constructor",
    "digital",
    "clock",
    "class",
    "arguments",
    "window",
    "appear",
    "use",
    "show",
    "method",
    "clock",
    "take",
    "clock",
    "call",
    "show",
    "method",
    "going",
    "appear",
    "brief",
    "second",
    "momentarily",
    "know",
    "saw",
    "ensure",
    "clean",
    "proper",
    "exit",
    "application",
    "need",
    "call",
    "following",
    "method",
    "access",
    "module",
    "sis",
    "call",
    "exit",
    "method",
    "pass",
    "following",
    "take",
    "app",
    "object",
    "call",
    "following",
    "method",
    "eccore",
    "set",
    "parentheses",
    "method",
    "execute",
    "method",
    "starts",
    "main",
    "event",
    "loop",
    "application",
    "also",
    "handles",
    "events",
    "key",
    "presses",
    "mouse",
    "clicks",
    "user",
    "interactions",
    "window",
    "stays",
    "place",
    "exit",
    "okay",
    "base",
    "functionality",
    "set",
    "class",
    "digital",
    "clock",
    "inherits",
    "q",
    "widget",
    "based",
    "class",
    "going",
    "using",
    "main",
    "window",
    "video",
    "within",
    "constructor",
    "digital",
    "clock",
    "create",
    "label",
    "self",
    "time",
    "label",
    "label",
    "displays",
    "time",
    "call",
    "constructor",
    "within",
    "class",
    "q",
    "label",
    "sure",
    "pass",
    "self",
    "adding",
    "label",
    "directly",
    "widget",
    "clock",
    "need",
    "timer",
    "self",
    "timer",
    "equals",
    "call",
    "constructor",
    "q",
    "timer",
    "pass",
    "self",
    "adding",
    "timer",
    "clock",
    "designing",
    "layout",
    "clock",
    "handle",
    "within",
    "initialized",
    "user",
    "interface",
    "method",
    "going",
    "set",
    "title",
    "window",
    "self",
    "set",
    "window",
    "title",
    "method",
    "pass",
    "string",
    "used",
    "title",
    "window",
    "let",
    "say",
    "digital",
    "clock",
    "window",
    "say",
    "digital",
    "clock",
    "let",
    "set",
    "geometry",
    "window",
    "self",
    "set",
    "geometry",
    "first",
    "two",
    "arguments",
    "going",
    "placement",
    "window",
    "appear",
    "within",
    "screen",
    "pick",
    "something",
    "approximately",
    "middle",
    "feel",
    "free",
    "change",
    "values",
    "need",
    "width",
    "window",
    "let",
    "say",
    "300",
    "height",
    "100",
    "height",
    "window",
    "appear",
    "approximately",
    "middle",
    "screen",
    "base",
    "width",
    "300",
    "base",
    "height",
    "100",
    "going",
    "need",
    "layout",
    "manager",
    "name",
    "layout",
    "manager",
    "vbox",
    "vertical",
    "box",
    "vbox",
    "equals",
    "call",
    "constructor",
    "within",
    "class",
    "qv",
    "box",
    "arrange",
    "widgets",
    "vertically",
    "one",
    "widget",
    "time",
    "label",
    "take",
    "layout",
    "manager",
    "vbox",
    "add",
    "widget",
    "method",
    "pass",
    "self",
    "time",
    "label",
    "argument",
    "adding",
    "label",
    "layout",
    "manager",
    "vbox",
    "set",
    "layout",
    "take",
    "self",
    "applies",
    "clock",
    "call",
    "set",
    "layout",
    "method",
    "pass",
    "layout",
    "manager",
    "vbox",
    "currently",
    "run",
    "see",
    "anything",
    "temporarily",
    "within",
    "label",
    "add",
    "text",
    "placeholder",
    "see",
    "working",
    "let",
    "say",
    "12",
    "see",
    "something",
    "least",
    "although",
    "font",
    "kind",
    "small",
    "getting",
    "rid",
    "later",
    "want",
    "sure",
    "see",
    "everything",
    "right",
    "layout",
    "would",
    "like",
    "label",
    "center",
    "aligned",
    "horizontally",
    "set",
    "take",
    "label",
    "self",
    "time",
    "label",
    "call",
    "set",
    "alignment",
    "method",
    "access",
    "class",
    "qt",
    "access",
    "align",
    "center",
    "center",
    "align",
    "time",
    "let",
    "work",
    "font",
    "barely",
    "read",
    "take",
    "label",
    "self",
    "time",
    "label",
    "set",
    "style",
    "sheet",
    "pass",
    "multiple",
    "css",
    "like",
    "properties",
    "let",
    "set",
    "font",
    "size",
    "set",
    "150",
    "pixels",
    "read",
    "could",
    "pick",
    "font",
    "going",
    "change",
    "end",
    "video",
    "import",
    "custom",
    "font",
    "temporarily",
    "let",
    "say",
    "font",
    "family",
    "aial",
    "could",
    "change",
    "color",
    "set",
    "color",
    "green",
    "font",
    "color",
    "going",
    "green",
    "would",
    "like",
    "specific",
    "shade",
    "green",
    "could",
    "always",
    "google",
    "color",
    "picker",
    "pick",
    "specific",
    "color",
    "uh",
    "let",
    "go",
    "something",
    "bright",
    "green",
    "copy",
    "hex",
    "value",
    "rgb",
    "hsl",
    "hsl",
    "means",
    "hue",
    "saturation",
    "lightness",
    "use",
    "hsl",
    "values",
    "color",
    "type",
    "hsl",
    "add",
    "set",
    "parenthesis",
    "paste",
    "values",
    "degree",
    "symbol",
    "get",
    "rid",
    "font",
    "color",
    "going",
    "bright",
    "green",
    "let",
    "change",
    "background",
    "color",
    "take",
    "self",
    "applies",
    "clock",
    "call",
    "set",
    "stylesheet",
    "method",
    "pass",
    "background",
    "color",
    "set",
    "background",
    "color",
    "property",
    "black",
    "think",
    "looks",
    "pretty",
    "good",
    "quite",
    "anything",
    "quite",
    "yet",
    "next",
    "step",
    "let",
    "create",
    "method",
    "update",
    "time",
    "arguments",
    "beside",
    "self",
    "create",
    "local",
    "variable",
    "current",
    "time",
    "equals",
    "get",
    "current",
    "time",
    "access",
    "class",
    "q",
    "time",
    "q",
    "time",
    "call",
    "method",
    "current",
    "time",
    "need",
    "convert",
    "string",
    "method",
    "chain",
    "two",
    "string",
    "method",
    "within",
    "two",
    "string",
    "method",
    "design",
    "layout",
    "time",
    "would",
    "like",
    "hours",
    "first",
    "type",
    "2",
    "h",
    "colon",
    "minutes",
    "2",
    "colon",
    "2",
    "set",
    "text",
    "label",
    "take",
    "self",
    "time",
    "lael",
    "call",
    "set",
    "text",
    "method",
    "pass",
    "current",
    "time",
    "run",
    "currently",
    "still",
    "placeholder",
    "time",
    "let",
    "update",
    "current",
    "time",
    "get",
    "rid",
    "placeholder",
    "text",
    "12",
    "delete",
    "set",
    "font",
    "let",
    "call",
    "method",
    "update",
    "time",
    "self",
    "update",
    "time",
    "display",
    "current",
    "time",
    "recording",
    "video",
    "morning",
    "would",
    "like",
    "add",
    "amm",
    "time",
    "string",
    "format",
    "specifiers",
    "add",
    "capital",
    "ap",
    "means",
    "meridium",
    "p",
    "means",
    "post",
    "meridium",
    "display",
    "pm",
    "depending",
    "coding",
    "currently",
    "time",
    "get",
    "clock",
    "update",
    "every",
    "second",
    "need",
    "connect",
    "timer",
    "widget",
    "slot",
    "update",
    "time",
    "take",
    "timer",
    "self",
    "timer",
    "time",
    "label",
    "timer",
    "keep",
    "track",
    "time",
    "signal",
    "time",
    "connect",
    "following",
    "slot",
    "self",
    "update",
    "time",
    "self",
    "update",
    "time",
    "timer",
    "need",
    "trigger",
    "timeout",
    "signal",
    "every",
    "milliseconds",
    "every",
    "second",
    "handle",
    "take",
    "timer",
    "self",
    "timer",
    "call",
    "start",
    "method",
    "pass",
    "milliseconds",
    "run",
    "program",
    "clock",
    "update",
    "every",
    "second",
    "display",
    "new",
    "current",
    "time",
    "added",
    "bonus",
    "would",
    "like",
    "download",
    "custom",
    "font",
    "using",
    "google",
    "another",
    "search",
    "engine",
    "would",
    "recommend",
    "looking",
    "font",
    "choosing",
    "one",
    "font",
    "like",
    "ds",
    "digital",
    "need",
    "ttf",
    "file",
    "meaning",
    "true",
    "type",
    "font",
    "pick",
    "first",
    "link",
    "fonts",
    "pretty",
    "good",
    "going",
    "download",
    "pick",
    "specific",
    "font",
    "ds",
    "digit",
    "file",
    "extension",
    "ttf",
    "font",
    "move",
    "project",
    "folder",
    "convenience",
    "ttf",
    "file",
    "right",
    "next",
    "main",
    "python",
    "file",
    "okay",
    "work",
    "specific",
    "fonts",
    "need",
    "f",
    "following",
    "import",
    "pi",
    "qt5",
    "qt",
    "gui",
    "import",
    "q",
    "font",
    "well",
    "q",
    "font",
    "data",
    "base",
    "since",
    "going",
    "use",
    "custom",
    "font",
    "delete",
    "set",
    "stylesheet",
    "method",
    "time",
    "label",
    "let",
    "set",
    "font",
    "right",
    "assign",
    "local",
    "variable",
    "font",
    "id",
    "equals",
    "q",
    "font",
    "data",
    "base",
    "q",
    "font",
    "database",
    "class",
    "managing",
    "querying",
    "fonts",
    "available",
    "application",
    "add",
    "custom",
    "font",
    "call",
    "following",
    "method",
    "within",
    "add",
    "application",
    "font",
    "within",
    "set",
    "quotes",
    "going",
    "pass",
    "file",
    "path",
    "relative",
    "file",
    "path",
    "absolute",
    "file",
    "path",
    "ttf",
    "file",
    "right",
    "next",
    "main",
    "python",
    "file",
    "need",
    "file",
    "name",
    "font",
    "file",
    "named",
    "ds",
    "digit",
    "get",
    "file",
    "extension",
    "ttf",
    "create",
    "local",
    "variable",
    "font",
    "family",
    "retrieve",
    "name",
    "font",
    "family",
    "id",
    "access",
    "qfont",
    "database",
    "call",
    "application",
    "font",
    "families",
    "method",
    "method",
    "returns",
    "list",
    "font",
    "names",
    "pass",
    "font",
    "id",
    "another",
    "step",
    "going",
    "use",
    "index",
    "operator",
    "get",
    "index",
    "zero",
    "retrieve",
    "first",
    "element",
    "font",
    "family",
    "working",
    "list",
    "need",
    "first",
    "element",
    "index",
    "zero",
    "font",
    "family",
    "work",
    "set",
    "font",
    "create",
    "local",
    "variable",
    "font",
    "equals",
    "called",
    "class",
    "call",
    "constructor",
    "within",
    "class",
    "q",
    "font",
    "pass",
    "following",
    "arguments",
    "font",
    "family",
    "first",
    "argument",
    "font",
    "size",
    "let",
    "say",
    "150",
    "set",
    "font",
    "take",
    "time",
    "label",
    "self",
    "time",
    "label",
    "called",
    "set",
    "font",
    "method",
    "pass",
    "font",
    "custom",
    "font",
    "custom",
    "font",
    "digital",
    "font",
    "downloaded",
    "art",
    "everybody",
    "create",
    "digital",
    "clock",
    "widget",
    "using",
    "pi",
    "qt5",
    "hey",
    "yeah",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "stopwatch",
    "program",
    "using",
    "python",
    "pyqt5",
    "library",
    "way",
    "need",
    "following",
    "imports",
    "import",
    "cis",
    "cis",
    "means",
    "system",
    "handles",
    "system",
    "variables",
    "python",
    "interpreter",
    "need",
    "following",
    "widgets",
    "pi",
    "qt5",
    "access",
    "module",
    "qt",
    "widgets",
    "widgets",
    "building",
    "blocks",
    "pi",
    "qt5",
    "application",
    "import",
    "following",
    "widgets",
    "q",
    "application",
    "q",
    "widget",
    "q",
    "label",
    "q",
    "push",
    "button",
    "qv",
    "box",
    "layout",
    "qh",
    "box",
    "layout",
    "let",
    "put",
    "new",
    "line",
    "read",
    "everything",
    "package",
    "pi",
    "qt5",
    "access",
    "qt",
    "core",
    "import",
    "q",
    "timer",
    "timer",
    "emit",
    "signal",
    "given",
    "interval",
    "need",
    "stopwatch",
    "q",
    "time",
    "keep",
    "track",
    "time",
    "qt",
    "alignment",
    "let",
    "test",
    "run",
    "sure",
    "errors",
    "looks",
    "like",
    "l",
    "label",
    "capital",
    "go",
    "errors",
    "following",
    "imports",
    "construct",
    "class",
    "class",
    "stopwatch",
    "inherit",
    "base",
    "class",
    "q",
    "widget",
    "stopwatch",
    "widget",
    "need",
    "constructor",
    "define",
    "dunder",
    "init",
    "arguments",
    "besid",
    "self",
    "arguments",
    "pass",
    "parent",
    "q",
    "widget",
    "call",
    "super",
    "class",
    "parent",
    "call",
    "constructor",
    "parent",
    "arguments",
    "currently",
    "running",
    "file",
    "directly",
    "use",
    "statement",
    "verify",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "true",
    "running",
    "file",
    "directly",
    "construct",
    "stopwatch",
    "create",
    "app",
    "object",
    "call",
    "constructor",
    "within",
    "q",
    "application",
    "class",
    "pass",
    "following",
    "access",
    "cis",
    "system",
    "access",
    "ar",
    "rgv",
    "means",
    "arguments",
    "using",
    "command",
    "line",
    "arguments",
    "wo",
    "using",
    "nice",
    "future",
    "proof",
    "code",
    "case",
    "future",
    "create",
    "stopwatch",
    "object",
    "stopwatch",
    "equals",
    "call",
    "constructor",
    "within",
    "class",
    "stopwatch",
    "window",
    "going",
    "show",
    "unless",
    "call",
    "show",
    "method",
    "take",
    "stopwatch",
    "call",
    "show",
    "method",
    "window",
    "going",
    "show",
    "brief",
    "second",
    "need",
    "ensure",
    "clean",
    "exit",
    "access",
    "cis",
    "call",
    "exit",
    "method",
    "pass",
    "following",
    "app",
    "call",
    "excore",
    "method",
    "method",
    "starts",
    "main",
    "event",
    "loop",
    "handles",
    "events",
    "basic",
    "window",
    "stays",
    "place",
    "close",
    "main",
    "skeletal",
    "structure",
    "pi",
    "qt5",
    "application",
    "set",
    "one",
    "people",
    "jumped",
    "ahead",
    "point",
    "class",
    "stopwatch",
    "inherits",
    "q",
    "widget",
    "class",
    "constructed",
    "stopwatch",
    "object",
    "showing",
    "begin",
    "designing",
    "stopwatch",
    "create",
    "time",
    "object",
    "self",
    "time",
    "equals",
    "call",
    "constructor",
    "within",
    "class",
    "q",
    "time",
    "arguments",
    "pass",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "zero",
    "need",
    "label",
    "stopwatch",
    "self",
    "time",
    "label",
    "equals",
    "called",
    "constructor",
    "q",
    "label",
    "would",
    "like",
    "text",
    "say",
    "display",
    "placeholder",
    "text",
    "bunch",
    "zeros",
    "zero",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "add",
    "label",
    "self",
    "stopwatch",
    "need",
    "start",
    "button",
    "self",
    "start",
    "button",
    "equals",
    "called",
    "constructor",
    "within",
    "q",
    "push",
    "button",
    "would",
    "like",
    "text",
    "button",
    "say",
    "let",
    "say",
    "start",
    "adding",
    "button",
    "self",
    "stopwatch",
    "need",
    "stop",
    "button",
    "let",
    "replace",
    "start",
    "stop",
    "change",
    "text",
    "start",
    "stop",
    "reset",
    "name",
    "button",
    "reset",
    "button",
    "text",
    "reset",
    "need",
    "timer",
    "emit",
    "signal",
    "given",
    "interval",
    "self",
    "time",
    "equals",
    "call",
    "constructor",
    "within",
    "class",
    "qtimer",
    "pass",
    "going",
    "call",
    "method",
    "initialize",
    "ui",
    "self",
    "init",
    "ui",
    "still",
    "define",
    "method",
    "right",
    "within",
    "stopwatch",
    "class",
    "need",
    "following",
    "methods",
    "method",
    "init",
    "ui",
    "designing",
    "user",
    "interface",
    "write",
    "pass",
    "placeholder",
    "need",
    "method",
    "start",
    "start",
    "stopwatch",
    "method",
    "stop",
    "stopwatch",
    "method",
    "reset",
    "stopwatch",
    "create",
    "method",
    "format",
    "time",
    "format",
    "time",
    "besides",
    "self",
    "one",
    "parameter",
    "pass",
    "time",
    "format",
    "returning",
    "string",
    "string",
    "representation",
    "current",
    "time",
    "method",
    "update",
    "display",
    "update",
    "display",
    "six",
    "methods",
    "need",
    "within",
    "initialized",
    "user",
    "interface",
    "method",
    "set",
    "title",
    "window",
    "right",
    "says",
    "python",
    "take",
    "self",
    "stopwatch",
    "call",
    "set",
    "window",
    "title",
    "method",
    "pass",
    "stopwatch",
    "change",
    "title",
    "window",
    "stopwatch",
    "going",
    "use",
    "vertical",
    "layout",
    "manager",
    "label",
    "buttons",
    "create",
    "layout",
    "manager",
    "named",
    "vbox",
    "vbox",
    "equals",
    "call",
    "constructor",
    "q",
    "v",
    "box",
    "layout",
    "take",
    "layout",
    "manager",
    "add",
    "following",
    "widgets",
    "self",
    "time",
    "label",
    "start",
    "stop",
    "reset",
    "buttons",
    "start",
    "button",
    "stop",
    "button",
    "reset",
    "button",
    "take",
    "self",
    "set",
    "lay",
    "layout",
    "passing",
    "vertical",
    "layout",
    "manager",
    "buttons",
    "widgets",
    "arranged",
    "column",
    "going",
    "take",
    "time",
    "label",
    "also",
    "center",
    "horizontally",
    "take",
    "time",
    "label",
    "self",
    "time",
    "label",
    "call",
    "set",
    "alignment",
    "method",
    "access",
    "class",
    "qt",
    "access",
    "flag",
    "line",
    "center",
    "going",
    "center",
    "align",
    "time",
    "aligned",
    "vertically",
    "horizontally",
    "buttons",
    "arranged",
    "column",
    "could",
    "group",
    "together",
    "horizontally",
    "create",
    "horizontal",
    "layout",
    "manager",
    "hbox",
    "hbox",
    "equals",
    "call",
    "constructor",
    "qbox",
    "layout",
    "instead",
    "adding",
    "buttons",
    "directly",
    "vertical",
    "layout",
    "manager",
    "let",
    "cut",
    "paste",
    "underneath",
    "hbox",
    "replace",
    "vbox",
    "hbox",
    "vertical",
    "layout",
    "manager",
    "vbox",
    "add",
    "layout",
    "hbox",
    "group",
    "buttons",
    "arranged",
    "vertically",
    "time",
    "label",
    "applying",
    "style",
    "sheet",
    "access",
    "self",
    "stopwatch",
    "call",
    "set",
    "stylesheet",
    "method",
    "pass",
    "one",
    "extremely",
    "long",
    "string",
    "set",
    "triple",
    "quotes",
    "css",
    "like",
    "properties",
    "add",
    "set",
    "triple",
    "quotes",
    "let",
    "select",
    "buttons",
    "q",
    "push",
    "button",
    "selecting",
    "entire",
    "class",
    "within",
    "set",
    "curly",
    "braces",
    "let",
    "add",
    "property",
    "font",
    "size",
    "font",
    "size",
    "buttons",
    "50",
    "pixels",
    "let",
    "customize",
    "label",
    "select",
    "class",
    "q",
    "label",
    "within",
    "set",
    "curly",
    "braces",
    "let",
    "add",
    "following",
    "properties",
    "font",
    "size",
    "120",
    "would",
    "like",
    "add",
    "background",
    "color",
    "label",
    "select",
    "background",
    "color",
    "temporarily",
    "select",
    "blue",
    "pick",
    "specific",
    "shades",
    "blue",
    "another",
    "color",
    "look",
    "color",
    "picker",
    "select",
    "specific",
    "color",
    "use",
    "hex",
    "values",
    "rgb",
    "hsl",
    "already",
    "selected",
    "color",
    "going",
    "copy",
    "hsl",
    "values",
    "instead",
    "color",
    "name",
    "select",
    "hsl",
    "paste",
    "values",
    "degree",
    "symbol",
    "need",
    "remove",
    "specific",
    "shade",
    "blue",
    "also",
    "round",
    "corners",
    "label",
    "add",
    "property",
    "border",
    "radius",
    "set",
    "20",
    "pixels",
    "round",
    "corners",
    "button",
    "label",
    "add",
    "padding",
    "going",
    "use",
    "multiple",
    "selectors",
    "select",
    "push",
    "buttons",
    "labels",
    "apply",
    "following",
    "properties",
    "add",
    "padding",
    "20",
    "pixels",
    "around",
    "widgets",
    "also",
    "make",
    "font",
    "weight",
    "bold",
    "font",
    "weight",
    "bold",
    "right",
    "think",
    "looks",
    "pretty",
    "good",
    "hey",
    "bro",
    "future",
    "currently",
    "editing",
    "video",
    "would",
    "like",
    "add",
    "font",
    "family",
    "one",
    "font",
    "think",
    "looks",
    "really",
    "good",
    "c",
    "apply",
    "push",
    "buttons",
    "c",
    "labels",
    "really",
    "like",
    "font",
    "think",
    "fits",
    "stopwatch",
    "would",
    "like",
    "change",
    "font",
    "thought",
    "would",
    "mention",
    "add",
    "functionality",
    "buttons",
    "anything",
    "buttons",
    "connect",
    "signal",
    "slot",
    "take",
    "start",
    "button",
    "self",
    "start",
    "button",
    "signal",
    "clicked",
    "connect",
    "following",
    "slot",
    "call",
    "start",
    "method",
    "self",
    "start",
    "method",
    "let",
    "stop",
    "button",
    "change",
    "start",
    "stop",
    "clicked",
    "connect",
    "self",
    "stop",
    "method",
    "reset",
    "self",
    "reset",
    "button",
    "called",
    "reset",
    "method",
    "given",
    "interval",
    "going",
    "update",
    "display",
    "self",
    "timer",
    "signal",
    "timeout",
    "connect",
    "following",
    "method",
    "self",
    "update",
    "display",
    "self",
    "update",
    "display",
    "within",
    "start",
    "method",
    "take",
    "timer",
    "self",
    "timer",
    "call",
    "start",
    "method",
    "pass",
    "10",
    "10",
    "milliseconds",
    "set",
    "interval",
    "time",
    "every",
    "10",
    "milliseconds",
    "within",
    "stop",
    "method",
    "take",
    "timer",
    "instead",
    "called",
    "stop",
    "method",
    "get",
    "back",
    "reset",
    "moment",
    "let",
    "work",
    "format",
    "time",
    "method",
    "time",
    "pass",
    "get",
    "hours",
    "minutes",
    "seconds",
    "millisecs",
    "seconds",
    "create",
    "local",
    "variables",
    "hours",
    "equals",
    "access",
    "time",
    "pass",
    "call",
    "hour",
    "method",
    "return",
    "hours",
    "variable",
    "minutes",
    "time",
    "call",
    "minute",
    "method",
    "return",
    "minutes",
    "variable",
    "seconds",
    "seconds",
    "equals",
    "take",
    "time",
    "called",
    "second",
    "method",
    "milliseconds",
    "access",
    "time",
    "call",
    "mc",
    "means",
    "milliseconds",
    "call",
    "method",
    "going",
    "return",
    "string",
    "f",
    "string",
    "represent",
    "time",
    "add",
    "four",
    "placeholders",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "separated",
    "colon",
    "except",
    "milliseconds",
    "dot",
    "period",
    "display",
    "hours",
    "add",
    "leading",
    "zeros",
    "two",
    "leading",
    "zeros",
    "let",
    "minutes",
    "using",
    "format",
    "specifier",
    "two",
    "leading",
    "zeros",
    "well",
    "seconds",
    "milliseconds",
    "work",
    "update",
    "display",
    "method",
    "get",
    "time",
    "self",
    "time",
    "equals",
    "take",
    "time",
    "call",
    "add",
    "milliseconds",
    "method",
    "ms",
    "e",
    "cs",
    "pass",
    "10",
    "10",
    "milliseconds",
    "going",
    "take",
    "time",
    "label",
    "self",
    "time",
    "label",
    "set",
    "text",
    "call",
    "format",
    "time",
    "method",
    "pass",
    "time",
    "passing",
    "self",
    "time",
    "let",
    "see",
    "currently",
    "start",
    "stopwatch",
    "stop",
    "however",
    "displaying",
    "three",
    "digits",
    "milliseconds",
    "eliminate",
    "within",
    "format",
    "time",
    "get",
    "milliseconds",
    "use",
    "integer",
    "division",
    "divide",
    "10",
    "convert",
    "milliseconds",
    "three",
    "digits",
    "two",
    "basically",
    "dividing",
    "10",
    "stopwatch",
    "currently",
    "start",
    "stop",
    "start",
    "stop",
    "need",
    "reset",
    "within",
    "reset",
    "method",
    "take",
    "timer",
    "self",
    "timer",
    "use",
    "stop",
    "method",
    "stop",
    "reassign",
    "time",
    "call",
    "constructor",
    "q",
    "time",
    "pass",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "going",
    "zero",
    "resetting",
    "time",
    "reset",
    "text",
    "time",
    "label",
    "self",
    "time",
    "label",
    "call",
    "set",
    "text",
    "method",
    "set",
    "text",
    "first",
    "format",
    "format",
    "time",
    "method",
    "pass",
    "time",
    "pass",
    "self",
    "time",
    "able",
    "reset",
    "stopwatch",
    "start",
    "stop",
    "reset",
    "start",
    "stop",
    "right",
    "everybody",
    "cool",
    "stopwatch",
    "make",
    "using",
    "python",
    "hey",
    "uh",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "working",
    "weather",
    "app",
    "fetches",
    "realtime",
    "weather",
    "data",
    "api",
    "massive",
    "project",
    "feel",
    "free",
    "take",
    "time",
    "take",
    "several",
    "days",
    "even",
    "weeks",
    "need",
    "complete",
    "heck",
    "even",
    "add",
    "project",
    "portfolio",
    "well",
    "let",
    "get",
    "started",
    "everybody",
    "right",
    "let",
    "get",
    "started",
    "everybody",
    "fairly",
    "useful",
    "api",
    "get",
    "weather",
    "data",
    "website",
    "need",
    "api",
    "key",
    "signing",
    "account",
    "free",
    "create",
    "account",
    "go",
    "sign",
    "create",
    "account",
    "enter",
    "information",
    "sign",
    "signed",
    "find",
    "api",
    "key",
    "go",
    "menu",
    "go",
    "api",
    "keys",
    "would",
    "need",
    "copy",
    "api",
    "key",
    "status",
    "active",
    "need",
    "toggle",
    "active",
    "like",
    "may",
    "take",
    "several",
    "minutes",
    "api",
    "key",
    "become",
    "active",
    "hopefully",
    "time",
    "project",
    "need",
    "active",
    "would",
    "either",
    "leave",
    "window",
    "copy",
    "key",
    "paste",
    "somewhere",
    "need",
    "following",
    "imports",
    "import",
    "cis",
    "cis",
    "means",
    "system",
    "handles",
    "system",
    "variables",
    "python",
    "interpreter",
    "import",
    "request",
    "module",
    "make",
    "request",
    "api",
    "need",
    "widgets",
    "widgets",
    "building",
    "blocks",
    "pi",
    "qt5",
    "application",
    "package",
    "pi",
    "qt5",
    "access",
    "module",
    "qt",
    "widget",
    "import",
    "following",
    "widgets",
    "q",
    "application",
    "q",
    "widget",
    "q",
    "label",
    "q",
    "line",
    "edit",
    "q",
    "push",
    "button",
    "let",
    "put",
    "new",
    "line",
    "readability",
    "qv",
    "box",
    "layout",
    "vertical",
    "layout",
    "manager",
    "work",
    "alignment",
    "need",
    "following",
    "package",
    "pi",
    "qt5",
    "module",
    "qt",
    "core",
    "import",
    "following",
    "class",
    "qt",
    "used",
    "alignment",
    "imports",
    "need",
    "sure",
    "misspell",
    "anything",
    "get",
    "capitalization",
    "wrong",
    "going",
    "test",
    "run",
    "problems",
    "processed",
    "finished",
    "exit",
    "code",
    "zero",
    "sometimes",
    "make",
    "one",
    "characters",
    "lowercase",
    "work",
    "okay",
    "imports",
    "need",
    "create",
    "class",
    "weather",
    "app",
    "weather",
    "app",
    "going",
    "inherit",
    "parent",
    "q",
    "widget",
    "need",
    "constructor",
    "define",
    "dunder",
    "init",
    "arguments",
    "besid",
    "self",
    "case",
    "arguments",
    "send",
    "parent",
    "call",
    "parent",
    "super",
    "meaning",
    "super",
    "class",
    "call",
    "constructor",
    "currently",
    "arguments",
    "running",
    "main",
    "python",
    "file",
    "directly",
    "verify",
    "statement",
    "dunder",
    "name",
    "equal",
    "string",
    "dunder",
    "main",
    "running",
    "file",
    "directly",
    "create",
    "weather",
    "app",
    "object",
    "otherwise",
    "wo",
    "statement",
    "true",
    "following",
    "create",
    "app",
    "object",
    "app",
    "equals",
    "call",
    "constructor",
    "within",
    "q",
    "application",
    "class",
    "pass",
    "following",
    "access",
    "module",
    "cis",
    "access",
    "rgv",
    "means",
    "arguments",
    "command",
    "aline",
    "arguments",
    "send",
    "application",
    "would",
    "take",
    "care",
    "going",
    "using",
    "command",
    "line",
    "arguments",
    "video",
    "nice",
    "future",
    "proof",
    "code",
    "case",
    "construct",
    "weather",
    "app",
    "object",
    "weather",
    "app",
    "equals",
    "call",
    "constructor",
    "weather",
    "app",
    "class",
    "window",
    "going",
    "show",
    "call",
    "show",
    "method",
    "weather",
    "app",
    "weather",
    "app",
    "show",
    "going",
    "show",
    "brief",
    "second",
    "need",
    "ensure",
    "clean",
    "exit",
    "access",
    "sis",
    "call",
    "exit",
    "method",
    "within",
    "method",
    "pass",
    "following",
    "take",
    "app",
    "call",
    "execute",
    "method",
    "excore",
    "method",
    "call",
    "method",
    "handles",
    "events",
    "within",
    "application",
    "closing",
    "window",
    "window",
    "stay",
    "place",
    "close",
    "one",
    "people",
    "jumped",
    "ahead",
    "created",
    "class",
    "weather",
    "app",
    "inherits",
    "parent",
    "q",
    "widget",
    "constructed",
    "weather",
    "app",
    "object",
    "showing",
    "made",
    "pi",
    "qt5",
    "projects",
    "past",
    "would",
    "change",
    "around",
    "within",
    "constructor",
    "class",
    "weather",
    "app",
    "declare",
    "different",
    "widgets",
    "belong",
    "weather",
    "app",
    "object",
    "create",
    "label",
    "prompts",
    "user",
    "enter",
    "city",
    "name",
    "city",
    "label",
    "equals",
    "q",
    "label",
    "widget",
    "set",
    "initial",
    "text",
    "label",
    "let",
    "say",
    "enter",
    "city",
    "name",
    "second",
    "argument",
    "going",
    "self",
    "adding",
    "label",
    "weather",
    "app",
    "object",
    "currently",
    "still",
    "css",
    "formatting",
    "take",
    "care",
    "soon",
    "need",
    "line",
    "edit",
    "widget",
    "basically",
    "textbox",
    "name",
    "city",
    "input",
    "widget",
    "line",
    "edit",
    "parameters",
    "besides",
    "self",
    "line",
    "edit",
    "widget",
    "currently",
    "using",
    "layout",
    "manager",
    "widgets",
    "going",
    "overlap",
    "need",
    "button",
    "self",
    "getet",
    "weather",
    "button",
    "q",
    "push",
    "button",
    "text",
    "button",
    "button",
    "get",
    "weather",
    "adding",
    "self",
    "weather",
    "app",
    "object",
    "button",
    "click",
    "button",
    "make",
    "request",
    "api",
    "next",
    "following",
    "widgets",
    "going",
    "add",
    "placeholders",
    "see",
    "apply",
    "css",
    "styling",
    "need",
    "temperature",
    "label",
    "display",
    "temperature",
    "temperature",
    "label",
    "equals",
    "q",
    "label",
    "temporarily",
    "label",
    "let",
    "say",
    "temperature",
    "fight",
    "pick",
    "something",
    "else",
    "celsius",
    "add",
    "degree",
    "symbol",
    "using",
    "windows",
    "make",
    "sure",
    "numb",
    "lock",
    "hold",
    "alt",
    "numpad",
    "type",
    "0176",
    "pick",
    "fah",
    "add",
    "self",
    "using",
    "temperature",
    "placeholder",
    "delete",
    "test",
    "run",
    "would",
    "like",
    "include",
    "emoji",
    "image",
    "create",
    "label",
    "name",
    "emoji",
    "label",
    "equals",
    "q",
    "label",
    "add",
    "emoji",
    "son",
    "placeholder",
    "going",
    "delete",
    "test",
    "run",
    "adding",
    "self",
    "everything",
    "overlapping",
    "fine",
    "need",
    "description",
    "weather",
    "description",
    "label",
    "equals",
    "q",
    "label",
    "placeholder",
    "let",
    "say",
    "sunny",
    "adding",
    "label",
    "self",
    "okay",
    "widgets",
    "overlapping",
    "need",
    "fix",
    "right",
    "moving",
    "everybody",
    "design",
    "layout",
    "web",
    "app",
    "right",
    "widgets",
    "gravitating",
    "top",
    "left",
    "corner",
    "define",
    "method",
    "initialize",
    "user",
    "interface",
    "end",
    "constructor",
    "call",
    "method",
    "self",
    "initialize",
    "ui",
    "call",
    "constructed",
    "widgets",
    "format",
    "design",
    "layout",
    "within",
    "initialized",
    "user",
    "interface",
    "method",
    "first",
    "let",
    "set",
    "title",
    "window",
    "self",
    "set",
    "window",
    "title",
    "let",
    "say",
    "title",
    "weather",
    "app",
    "change",
    "going",
    "use",
    "vertical",
    "layout",
    "manager",
    "handle",
    "widgets",
    "let",
    "name",
    "layout",
    "manager",
    "vbox",
    "equals",
    "call",
    "constructor",
    "class",
    "qv",
    "box",
    "layout",
    "going",
    "take",
    "layout",
    "manager",
    "add",
    "widget",
    "start",
    "city",
    "label",
    "first",
    "pass",
    "self",
    "city",
    "lael",
    "widgets",
    "city",
    "input",
    "get",
    "weather",
    "button",
    "temperature",
    "label",
    "emoji",
    "label",
    "description",
    "label",
    "take",
    "self",
    "weather",
    "app",
    "set",
    "layout",
    "pass",
    "layout",
    "manager",
    "vbox",
    "currently",
    "widgets",
    "arranged",
    "column",
    "centeralign",
    "horizontally",
    "take",
    "self",
    "city",
    "label",
    "call",
    "set",
    "alignment",
    "method",
    "access",
    "class",
    "qt",
    "access",
    "flag",
    "line",
    "center",
    "going",
    "align",
    "widgets",
    "center",
    "except",
    "weather",
    "button",
    "currently",
    "button",
    "expands",
    "take",
    "width",
    "window",
    "need",
    "horizontally",
    "align",
    "five",
    "widgets",
    "align",
    "city",
    "label",
    "city",
    "input",
    "temperature",
    "label",
    "emoji",
    "label",
    "description",
    "label",
    "widgets",
    "going",
    "arranged",
    "column",
    "horizontally",
    "apply",
    "css",
    "styling",
    "right",
    "kind",
    "ugly",
    "apply",
    "styles",
    "based",
    "object",
    "name",
    "set",
    "object",
    "name",
    "let",
    "start",
    "city",
    "label",
    "self",
    "city",
    "label",
    "call",
    "set",
    "object",
    "name",
    "method",
    "pass",
    "unique",
    "id",
    "widget",
    "name",
    "city",
    "label",
    "keep",
    "okay",
    "widgets",
    "total",
    "six",
    "city",
    "label",
    "city",
    "input",
    "get",
    "weather",
    "button",
    "temperature",
    "label",
    "emoji",
    "label",
    "description",
    "label",
    "going",
    "set",
    "stylesheet",
    "take",
    "weather",
    "app",
    "apply",
    "stylesheet",
    "set",
    "style",
    "sheet",
    "lot",
    "properties",
    "write",
    "within",
    "set",
    "triple",
    "quotes",
    "keep",
    "everything",
    "organized",
    "apply",
    "css",
    "styles",
    "based",
    "class",
    "class",
    "going",
    "q",
    "label",
    "within",
    "set",
    "curly",
    "braces",
    "list",
    "multiple",
    "css",
    "properties",
    "set",
    "font",
    "family",
    "calibri",
    "well",
    "push",
    "buttons",
    "q",
    "push",
    "button",
    "font",
    "although",
    "still",
    "kind",
    "small",
    "let",
    "select",
    "id",
    "city",
    "label",
    "good",
    "practice",
    "preedee",
    "id",
    "name",
    "class",
    "q",
    "label",
    "pound",
    "sign",
    "id",
    "precede",
    "id",
    "name",
    "class",
    "applying",
    "css",
    "properties",
    "id",
    "city",
    "label",
    "falls",
    "within",
    "class",
    "q",
    "label",
    "let",
    "set",
    "font",
    "size",
    "40",
    "pixels",
    "let",
    "set",
    "font",
    "size",
    "40",
    "pixels",
    "better",
    "set",
    "font",
    "style",
    "italic",
    "font",
    "style",
    "italic",
    "pretty",
    "good",
    "let",
    "select",
    "id",
    "city",
    "input",
    "line",
    "edit",
    "widget",
    "q",
    "line",
    "edit",
    "pound",
    "id",
    "city",
    "input",
    "within",
    "set",
    "curly",
    "braces",
    "let",
    "set",
    "font",
    "size",
    "40",
    "pixels",
    "select",
    "push",
    "button",
    "named",
    "get",
    "weather",
    "button",
    "class",
    "q",
    "push",
    "button",
    "pound",
    "id",
    "get",
    "wea",
    "button",
    "within",
    "set",
    "curly",
    "braces",
    "apply",
    "following",
    "let",
    "set",
    "font",
    "size",
    "30",
    "pixels",
    "let",
    "make",
    "bold",
    "font",
    "weight",
    "bold",
    "let",
    "select",
    "temperature",
    "label",
    "id",
    "temperature",
    "label",
    "q",
    "label",
    "pound",
    "temperature",
    "label",
    "increase",
    "font",
    "size",
    "font",
    "size",
    "75",
    "pixels",
    "better",
    "let",
    "work",
    "emoji",
    "next",
    "select",
    "id",
    "emoji",
    "label",
    "class",
    "q",
    "label",
    "id",
    "emoji",
    "label",
    "set",
    "font",
    "size",
    "first",
    "font",
    "size",
    "100",
    "pixels",
    "would",
    "like",
    "large",
    "image",
    "display",
    "emojis",
    "properly",
    "going",
    "use",
    "specific",
    "font",
    "going",
    "set",
    "font",
    "family",
    "know",
    "saying",
    "right",
    "seg",
    "ui",
    "emoji",
    "probably",
    "pronounced",
    "word",
    "wrong",
    "care",
    "emoji",
    "display",
    "correctly",
    "using",
    "font",
    "colorful",
    "description",
    "label",
    "weather",
    "last",
    "widget",
    "description",
    "label",
    "class",
    "q",
    "label",
    "id",
    "description",
    "label",
    "let",
    "take",
    "font",
    "size",
    "set",
    "50",
    "pixels",
    "right",
    "weather",
    "app",
    "going",
    "look",
    "like",
    "city",
    "label",
    "text",
    "box",
    "enter",
    "city",
    "get",
    "weather",
    "button",
    "temperature",
    "label",
    "emoji",
    "label",
    "description",
    "weather",
    "currently",
    "add",
    "functionality",
    "currently",
    "anything",
    "right",
    "add",
    "functionality",
    "weather",
    "app",
    "temporarily",
    "going",
    "collapse",
    "initialized",
    "user",
    "interface",
    "method",
    "define",
    "extra",
    "methods",
    "let",
    "declare",
    "method",
    "get",
    "weather",
    "parameters",
    "besid",
    "self",
    "write",
    "pass",
    "placeholder",
    "need",
    "method",
    "display",
    "errors",
    "display",
    "error",
    "going",
    "one",
    "argument",
    "besid",
    "self",
    "message",
    "pass",
    "error",
    "message",
    "one",
    "method",
    "display",
    "weather",
    "errors",
    "need",
    "data",
    "weather",
    "data",
    "sure",
    "write",
    "three",
    "methods",
    "back",
    "within",
    "initialized",
    "user",
    "interface",
    "method",
    "bottom",
    "connect",
    "signal",
    "slot",
    "click",
    "button",
    "signal",
    "clicked",
    "connect",
    "slot",
    "get",
    "weather",
    "access",
    "self",
    "take",
    "get",
    "weather",
    "button",
    "signal",
    "clicked",
    "connect",
    "slot",
    "upself",
    "dog",
    "getwe",
    "print",
    "test",
    "message",
    "sure",
    "working",
    "get",
    "weather",
    "press",
    "button",
    "display",
    "get",
    "weather",
    "get",
    "rid",
    "placeholder",
    "text",
    "temperature",
    "emoji",
    "weather",
    "description",
    "delete",
    "strings",
    "sure",
    "keep",
    "self",
    "scrolling",
    "get",
    "weather",
    "method",
    "click",
    "button",
    "going",
    "create",
    "local",
    "variables",
    "first",
    "going",
    "api",
    "key",
    "equals",
    "string",
    "back",
    "open",
    "weather",
    "api",
    "copy",
    "api",
    "key",
    "make",
    "sure",
    "active",
    "use",
    "toggle",
    "button",
    "make",
    "inactive",
    "active",
    "make",
    "sure",
    "active",
    "paste",
    "api",
    "key",
    "within",
    "string",
    "please",
    "use",
    "still",
    "may",
    "take",
    "several",
    "minutes",
    "key",
    "itive",
    "keep",
    "mind",
    "need",
    "get",
    "city",
    "looking",
    "let",
    "say",
    "type",
    "miami",
    "get",
    "text",
    "widget",
    "line",
    "edit",
    "widget",
    "create",
    "local",
    "variable",
    "city",
    "city",
    "equals",
    "access",
    "line",
    "edit",
    "widget",
    "name",
    "city",
    "input",
    "self",
    "city",
    "input",
    "get",
    "text",
    "call",
    "text",
    "method",
    "api",
    "key",
    "city",
    "create",
    "url",
    "f",
    "string",
    "using",
    "request",
    "module",
    "pass",
    "url",
    "make",
    "request",
    "back",
    "open",
    "weather",
    "api",
    "get",
    "url",
    "city",
    "go",
    "tab",
    "api",
    "scroll",
    "current",
    "weather",
    "data",
    "going",
    "api",
    "documentation",
    "right",
    "link",
    "api",
    "request",
    "city",
    "name",
    "copy",
    "url",
    "paste",
    "within",
    "f",
    "string",
    "two",
    "changes",
    "going",
    "make",
    "replace",
    "city",
    "name",
    "city",
    "name",
    "variable",
    "api",
    "space",
    "key",
    "api",
    "uncore",
    "key",
    "matter",
    "name",
    "make",
    "sure",
    "consistent",
    "variables",
    "make",
    "api",
    "request",
    "returned",
    "response",
    "object",
    "response",
    "equals",
    "access",
    "module",
    "requests",
    "call",
    "get",
    "method",
    "pass",
    "url",
    "response",
    "object",
    "convert",
    "json",
    "format",
    "returned",
    "object",
    "name",
    "object",
    "data",
    "going",
    "readable",
    "us",
    "data",
    "equals",
    "take",
    "response",
    "object",
    "use",
    "json",
    "method",
    "convert",
    "json",
    "format",
    "let",
    "print",
    "data",
    "see",
    "working",
    "let",
    "say",
    "look",
    "city",
    "miami",
    "one",
    "gigantic",
    "object",
    "weather",
    "data",
    "coordinates",
    "longitude",
    "attitude",
    "weather",
    "description",
    "currently",
    "miami",
    "broken",
    "clouds",
    "id",
    "weather",
    "temperature",
    "kelvin",
    "scroll",
    "way",
    "end",
    "looking",
    "http",
    "status",
    "code",
    "named",
    "cod",
    "short",
    "code",
    "200",
    "means",
    "response",
    "successful",
    "depending",
    "number",
    "display",
    "one",
    "messages",
    "status",
    "code",
    "404",
    "means",
    "city",
    "found",
    "many",
    "others",
    "200",
    "means",
    "request",
    "successful",
    "let",
    "write",
    "following",
    "data",
    "object",
    "key",
    "cod",
    "equal",
    "200",
    "request",
    "successful",
    "call",
    "display",
    "weather",
    "method",
    "self",
    "display",
    "weather",
    "pass",
    "data",
    "temporarily",
    "going",
    "print",
    "weather",
    "data",
    "complex",
    "stuff",
    "later",
    "want",
    "sure",
    "everything",
    "working",
    "let",
    "look",
    "los",
    "angeles",
    "weather",
    "los",
    "angeles",
    "currently",
    "broken",
    "clouds",
    "status",
    "code",
    "200",
    "request",
    "successful",
    "write",
    "else",
    "statement",
    "print",
    "data",
    "ca",
    "find",
    "city",
    "example",
    "look",
    "city",
    "blah",
    "blah",
    "blah",
    "get",
    "weather",
    "weather",
    "data",
    "error",
    "code",
    "404",
    "message",
    "city",
    "found",
    "let",
    "exception",
    "handling",
    "case",
    "run",
    "one",
    "status",
    "codes",
    "200",
    "get",
    "rid",
    "else",
    "statement",
    "enclose",
    "dangerous",
    "code",
    "means",
    "code",
    "might",
    "cause",
    "exception",
    "within",
    "tri",
    "block",
    "try",
    "code",
    "handle",
    "exceptions",
    "accept",
    "block",
    "two",
    "types",
    "exceptions",
    "looking",
    "first",
    "http",
    "error",
    "http",
    "error",
    "exception",
    "raised",
    "request",
    "module",
    "http",
    "request",
    "returns",
    "status",
    "code",
    "400",
    "500",
    "however",
    "exception",
    "found",
    "within",
    "request",
    "module",
    "imported",
    "ca",
    "simply",
    "say",
    "accept",
    "http",
    "error",
    "first",
    "access",
    "request",
    "module",
    "access",
    "exceptions",
    "list",
    "specific",
    "exception",
    "http",
    "error",
    "encounter",
    "exception",
    "status",
    "code",
    "400",
    "500",
    "right",
    "pass",
    "one",
    "step",
    "within",
    "tri",
    "block",
    "going",
    "handle",
    "http",
    "errors",
    "raise",
    "exception",
    "within",
    "tri",
    "block",
    "tri",
    "block",
    "normally",
    "catch",
    "take",
    "response",
    "object",
    "call",
    "raise",
    "status",
    "method",
    "method",
    "raise",
    "exception",
    "http",
    "errors",
    "normally",
    "tri",
    "block",
    "manually",
    "type",
    "another",
    "type",
    "exception",
    "catch",
    "request",
    "exception",
    "add",
    "another",
    "block",
    "accept",
    "request",
    "exception",
    "found",
    "within",
    "request",
    "module",
    "requests",
    "exceptions",
    "request",
    "exception",
    "request",
    "exception",
    "due",
    "network",
    "problems",
    "invalid",
    "urls",
    "exceptions",
    "nature",
    "case",
    "run",
    "one",
    "types",
    "exceptions",
    "execute",
    "block",
    "code",
    "right",
    "pass",
    "get",
    "back",
    "later",
    "going",
    "back",
    "accept",
    "block",
    "handle",
    "http",
    "errors",
    "let",
    "use",
    "match",
    "case",
    "statement",
    "need",
    "get",
    "status",
    "code",
    "response",
    "print",
    "temporarily",
    "let",
    "print",
    "response",
    "objects",
    "status",
    "code",
    "see",
    "let",
    "make",
    "city",
    "get",
    "weather",
    "status",
    "code",
    "404",
    "means",
    "city",
    "found",
    "depending",
    "number",
    "status",
    "code",
    "use",
    "match",
    "case",
    "statement",
    "match",
    "response",
    "objects",
    "status",
    "code",
    "first",
    "case",
    "400",
    "means",
    "bad",
    "request",
    "let",
    "print",
    "following",
    "bad",
    "add",
    "request",
    "add",
    "new",
    "line",
    "character",
    "please",
    "check",
    "input",
    "create",
    "total",
    "believe",
    "eight",
    "cases",
    "copy",
    "400",
    "401",
    "403",
    "404",
    "one",
    "familiar",
    "500",
    "5",
    "2",
    "503",
    "504",
    "case",
    "401",
    "means",
    "unauthorized",
    "maybe",
    "api",
    "key",
    "active",
    "yet",
    "let",
    "say",
    "unauthorized",
    "invalid",
    "api",
    "key",
    "403",
    "means",
    "access",
    "denied",
    "forbidden",
    "let",
    "print",
    "forbidden",
    "access",
    "denied",
    "404",
    "something",
    "found",
    "found",
    "city",
    "found",
    "500",
    "internal",
    "server",
    "error",
    "internal",
    "server",
    "error",
    "please",
    "try",
    "later",
    "502",
    "bad",
    "gateway",
    "bad",
    "gateway",
    "invalid",
    "response",
    "server",
    "503",
    "service",
    "unavailable",
    "service",
    "unavailable",
    "server",
    "504",
    "gateway",
    "timeout",
    "gateway",
    "timeout",
    "response",
    "server",
    "case",
    "unexpected",
    "error",
    "add",
    "wild",
    "card",
    "underscore",
    "http",
    "error",
    "let",
    "give",
    "name",
    "http",
    "error",
    "print",
    "case",
    "matching",
    "cases",
    "let",
    "print",
    "following",
    "http",
    "error",
    "occurred",
    "add",
    "new",
    "line",
    "let",
    "convert",
    "fst",
    "string",
    "add",
    "placeholder",
    "print",
    "http",
    "air",
    "right",
    "let",
    "test",
    "run",
    "case",
    "ca",
    "find",
    "city",
    "encounter",
    "404",
    "error",
    "found",
    "city",
    "found",
    "eventually",
    "display",
    "message",
    "within",
    "app",
    "know",
    "works",
    "api",
    "key",
    "invalid",
    "take",
    "api",
    "key",
    "set",
    "inactive",
    "might",
    "take",
    "minutes",
    "take",
    "effect",
    "status",
    "code",
    "response",
    "object",
    "401",
    "time",
    "going",
    "look",
    "city",
    "invalid",
    "api",
    "key",
    "get",
    "error",
    "message",
    "unauthorized",
    "invalid",
    "api",
    "key",
    "right",
    "everybody",
    "day",
    "three",
    "working",
    "recording",
    "topic",
    "course",
    "day",
    "thought",
    "one",
    "change",
    "make",
    "going",
    "add",
    "extra",
    "accept",
    "blocks",
    "accept",
    "access",
    "requests",
    "access",
    "exceptions",
    "handle",
    "connection",
    "eror",
    "exceptions",
    "well",
    "timeout",
    "exceptions",
    "redirects",
    "many",
    "redirects",
    "run",
    "connection",
    "error",
    "let",
    "say",
    "internet",
    "gets",
    "disconnected",
    "well",
    "print",
    "something",
    "let",
    "print",
    "following",
    "let",
    "print",
    "connection",
    "error",
    "add",
    "new",
    "line",
    "character",
    "check",
    "internet",
    "connection",
    "encounter",
    "timeout",
    "print",
    "following",
    "time",
    "error",
    "request",
    "timed",
    "many",
    "redirects",
    "error",
    "capital",
    "way",
    "let",
    "state",
    "many",
    "redirects",
    "check",
    "url",
    "anything",
    "else",
    "anticipate",
    "give",
    "exception",
    "name",
    "rec",
    "error",
    "print",
    "last",
    "resort",
    "use",
    "f",
    "string",
    "request",
    "error",
    "add",
    "new",
    "line",
    "add",
    "placeholder",
    "display",
    "request",
    "error",
    "actually",
    "going",
    "turn",
    "internet",
    "see",
    "get",
    "connection",
    "eror",
    "intentionally",
    "internet",
    "currently",
    "attempt",
    "look",
    "city",
    "get",
    "weather",
    "get",
    "connection",
    "error",
    "check",
    "internet",
    "connection",
    "right",
    "internet",
    "connected",
    "let",
    "perform",
    "test",
    "run",
    "get",
    "weather",
    "miami",
    "going",
    "error",
    "display",
    "error",
    "message",
    "within",
    "app",
    "within",
    "console",
    "going",
    "replace",
    "print",
    "call",
    "display",
    "error",
    "method",
    "let",
    "zoom",
    "little",
    "bit",
    "replace",
    "print",
    "self",
    "display",
    "error",
    "passing",
    "message",
    "let",
    "replace",
    "one",
    "thing",
    "forgot",
    "add",
    "although",
    "necessary",
    "going",
    "add",
    "colon",
    "initial",
    "message",
    "think",
    "look",
    "better",
    "ocd",
    "appearance",
    "encounter",
    "one",
    "exceptions",
    "pass",
    "along",
    "message",
    "display",
    "error",
    "method",
    "display",
    "within",
    "app",
    "let",
    "take",
    "temperature",
    "label",
    "self",
    "temperature",
    "lael",
    "set",
    "text",
    "message",
    "pass",
    "let",
    "test",
    "run",
    "let",
    "look",
    "city",
    "exist",
    "get",
    "weather",
    "get",
    "error",
    "message",
    "found",
    "city",
    "found",
    "within",
    "method",
    "going",
    "change",
    "font",
    "size",
    "little",
    "bit",
    "smaller",
    "let",
    "take",
    "temperature",
    "label",
    "self",
    "temperature",
    "label",
    "going",
    "copy",
    "lazy",
    "call",
    "set",
    "stylesheet",
    "method",
    "pass",
    "along",
    "new",
    "property",
    "let",
    "set",
    "font",
    "size",
    "30",
    "pixels",
    "let",
    "look",
    "north",
    "pole",
    "think",
    "city",
    "oh",
    "guess",
    "interesting",
    "north",
    "pole",
    "city",
    "guess",
    "let",
    "look",
    "blah",
    "blah",
    "blah",
    "found",
    "city",
    "found",
    "let",
    "another",
    "test",
    "api",
    "key",
    "invalid",
    "delete",
    "one",
    "digits",
    "let",
    "look",
    "los",
    "angeles",
    "unauthorized",
    "invalid",
    "api",
    "key",
    "let",
    "change",
    "back",
    "turn",
    "internet",
    "look",
    "miami",
    "connection",
    "error",
    "check",
    "internet",
    "connection",
    "right",
    "know",
    "exception",
    "handling",
    "works",
    "okay",
    "within",
    "display",
    "weather",
    "method",
    "receive",
    "object",
    "represent",
    "data",
    "get",
    "temperature",
    "first",
    "going",
    "print",
    "data",
    "let",
    "zoom",
    "little",
    "bit",
    "let",
    "look",
    "houston",
    "houston",
    "texas",
    "need",
    "temperature",
    "within",
    "data",
    "object",
    "looking",
    "key",
    "main",
    "right",
    "main",
    "contains",
    "dictionary",
    "key",
    "value",
    "pairs",
    "accessed",
    "main",
    "access",
    "temp",
    "get",
    "temperature",
    "temperature",
    "kelvin",
    "convert",
    "celsius",
    "fahrenheit",
    "choice",
    "need",
    "extract",
    "value",
    "store",
    "local",
    "variable",
    "temperature",
    "let",
    "say",
    "temperature",
    "k",
    "kelvin",
    "equals",
    "take",
    "data",
    "object",
    "access",
    "key",
    "main",
    "right",
    "go",
    "one",
    "level",
    "deeper",
    "get",
    "temperature",
    "key",
    "temp",
    "give",
    "value",
    "key",
    "temp",
    "return",
    "current",
    "temperature",
    "test",
    "let",
    "print",
    "let",
    "print",
    "temperature",
    "kelvin",
    "weather",
    "houston",
    "texas",
    "temperature",
    "309",
    "kelvin",
    "let",
    "convert",
    "celsius",
    "fahrenheit",
    "let",
    "create",
    "temperature",
    "c",
    "want",
    "use",
    "celsius",
    "would",
    "rather",
    "use",
    "fahrenheit",
    "skip",
    "step",
    "convert",
    "kelvin",
    "celsius",
    "take",
    "temperature",
    "kelvin",
    "subtract",
    "fahrenheit",
    "let",
    "take",
    "temperature",
    "f",
    "fahrenheit",
    "equals",
    "little",
    "complicated",
    "take",
    "temperature",
    "kelvin",
    "time",
    "9",
    "5",
    "subtract",
    "45967",
    "okay",
    "let",
    "print",
    "temperature",
    "celsius",
    "let",
    "look",
    "houston",
    "music",
    "self",
    "temperature",
    "label",
    "copy",
    "set",
    "text",
    "use",
    "f",
    "string",
    "add",
    "placeholder",
    "use",
    "fahrenheit",
    "feel",
    "free",
    "use",
    "celsius",
    "add",
    "degree",
    "symbol",
    "windows",
    "make",
    "sure",
    "numb",
    "lock",
    "hold",
    "alt",
    "numpad",
    "type",
    "0176",
    "degree",
    "symbol",
    "f",
    "fahrenheit",
    "let",
    "look",
    "get",
    "weather",
    "temperature",
    "64",
    "let",
    "say",
    "would",
    "like",
    "digits",
    "decimal",
    "add",
    "format",
    "specifier",
    "temperature",
    "add",
    "colon",
    "0f",
    "display",
    "decimals",
    "let",
    "try",
    "look",
    "miami",
    "get",
    "weather",
    "current",
    "temperature",
    "fahrenheit",
    "fahrenheit",
    "one",
    "issue",
    "let",
    "say",
    "display",
    "air",
    "display",
    "weather",
    "display",
    "err",
    "going",
    "changing",
    "font",
    "size",
    "let",
    "look",
    "blah",
    "blah",
    "blah",
    "get",
    "weather",
    "city",
    "found",
    "let",
    "look",
    "miami",
    "get",
    "weather",
    "font",
    "size",
    "lot",
    "smaller",
    "display",
    "weather",
    "let",
    "reset",
    "font",
    "size",
    "really",
    "copy",
    "line",
    "within",
    "display",
    "weather",
    "method",
    "let",
    "set",
    "font",
    "size",
    "back",
    "75",
    "originally",
    "let",
    "try",
    "let",
    "look",
    "city",
    "exist",
    "get",
    "weather",
    "city",
    "found",
    "look",
    "city",
    "exist",
    "like",
    "miami",
    "get",
    "weather",
    "f",
    "let",
    "get",
    "description",
    "weather",
    "display",
    "bottom",
    "center",
    "display",
    "picture",
    "em",
    "handle",
    "last",
    "need",
    "description",
    "weather",
    "like",
    "sunny",
    "cloudy",
    "raining",
    "calculate",
    "temperature",
    "going",
    "print",
    "data",
    "let",
    "look",
    "los",
    "angeles",
    "currently",
    "fahrenheit",
    "weather",
    "description",
    "found",
    "key",
    "weather",
    "within",
    "list",
    "index",
    "zero",
    "within",
    "list",
    "look",
    "key",
    "description",
    "states",
    "clear",
    "sky",
    "create",
    "local",
    "variable",
    "weather",
    "description",
    "equals",
    "access",
    "data",
    "key",
    "weather",
    "layers",
    "within",
    "list",
    "actually",
    "list",
    "one",
    "item",
    "add",
    "index",
    "zero",
    "key",
    "description",
    "going",
    "return",
    "description",
    "clear",
    "sky",
    "take",
    "description",
    "label",
    "self",
    "description",
    "label",
    "let",
    "copy",
    "one",
    "right",
    "set",
    "text",
    "pass",
    "weather",
    "description",
    "weather",
    "description",
    "los",
    "angeles",
    "fhe",
    "clear",
    "sky",
    "okay",
    "last",
    "thing",
    "going",
    "add",
    "emoji",
    "add",
    "right",
    "center",
    "temperature",
    "weather",
    "description",
    "ne",
    "necessarily",
    "think",
    "look",
    "cool",
    "good",
    "enough",
    "reason",
    "let",
    "create",
    "another",
    "method",
    "handle",
    "define",
    "method",
    "get",
    "weather",
    "emoji",
    "picture",
    "would",
    "rather",
    "use",
    "picture",
    "need",
    "self",
    "necessarily",
    "going",
    "need",
    "weather",
    "id",
    "method",
    "going",
    "rely",
    "class",
    "data",
    "instance",
    "data",
    "could",
    "make",
    "static",
    "method",
    "add",
    "decorator",
    "static",
    "method",
    "summary",
    "static",
    "method",
    "covered",
    "little",
    "bit",
    "belong",
    "class",
    "require",
    "instance",
    "specific",
    "data",
    "methods",
    "used",
    "utility",
    "tool",
    "going",
    "passing",
    "weather",
    "id",
    "returning",
    "emoji",
    "going",
    "show",
    "find",
    "weather",
    "id",
    "use",
    "print",
    "statement",
    "print",
    "data",
    "let",
    "look",
    "miami",
    "first",
    "thing",
    "came",
    "mind",
    "key",
    "weather",
    "key",
    "id",
    "value",
    "number",
    "show",
    "chart",
    "depending",
    "number",
    "cor",
    "responds",
    "certain",
    "group",
    "weather",
    "200",
    "range",
    "thunderstorm",
    "300",
    "drizzle",
    "500",
    "rain",
    "600",
    "snow",
    "700",
    "atmosphere",
    "like",
    "tornado",
    "volcanic",
    "eruption",
    "800",
    "exactly",
    "clear",
    "sky",
    "anything",
    "801",
    "refers",
    "clouds",
    "id",
    "803",
    "broken",
    "clouds",
    "depending",
    "id",
    "would",
    "like",
    "return",
    "certain",
    "emoji",
    "based",
    "weather",
    "need",
    "id",
    "delete",
    "print",
    "statement",
    "longer",
    "need",
    "let",
    "say",
    "weather",
    "description",
    "create",
    "local",
    "variable",
    "weather",
    "id",
    "equals",
    "access",
    "data",
    "object",
    "access",
    "key",
    "weather",
    "value",
    "weather",
    "list",
    "list",
    "one",
    "item",
    "need",
    "index",
    "operator",
    "zero",
    "access",
    "key",
    "id",
    "key",
    "id",
    "weather",
    "id",
    "going",
    "number",
    "number",
    "okay",
    "everybody",
    "near",
    "end",
    "setting",
    "temperature",
    "going",
    "set",
    "emoji",
    "label",
    "self",
    "emoji",
    "label",
    "call",
    "set",
    "text",
    "method",
    "within",
    "set",
    "text",
    "method",
    "call",
    "self",
    "getwe",
    "emoji",
    "method",
    "return",
    "string",
    "emoji",
    "within",
    "string",
    "pass",
    "weather",
    "id",
    "number",
    "within",
    "get",
    "weather",
    "emoji",
    "method",
    "depending",
    "range",
    "number",
    "return",
    "one",
    "emojis",
    "could",
    "use",
    "match",
    "case",
    "statement",
    "think",
    "complicated",
    "match",
    "case",
    "statement",
    "use",
    "lf",
    "statements",
    "simplicity",
    "weather",
    "id",
    "greater",
    "equal",
    "200",
    "weather",
    "id",
    "less",
    "equal",
    "232",
    "two",
    "conditions",
    "linked",
    "logical",
    "operator",
    "shortcut",
    "actually",
    "py",
    "charm",
    "telling",
    "simplify",
    "expressions",
    "instead",
    "two",
    "separate",
    "conditions",
    "combine",
    "one",
    "200",
    "less",
    "equal",
    "weather",
    "id",
    "weather",
    "id",
    "less",
    "equal",
    "232",
    "one",
    "combined",
    "condition",
    "true",
    "return",
    "emoji",
    "add",
    "emoji",
    "windows",
    "hold",
    "window",
    "key",
    "press",
    "semicolon",
    "200",
    "232",
    "thunderstorm",
    "depending",
    "font",
    "style",
    "ide",
    "emojis",
    "might",
    "display",
    "properly",
    "always",
    "copy",
    "someplace",
    "else",
    "think",
    "better",
    "colorful",
    "else",
    "300",
    "less",
    "equal",
    "weather",
    "id",
    "weather",
    "id",
    "less",
    "equal",
    "321",
    "partially",
    "cloudy",
    "sky",
    "return",
    "clouds",
    "partially",
    "cloudy",
    "sky",
    "like",
    "one",
    "let",
    "use",
    "one",
    "instead",
    "else",
    "500",
    "less",
    "equal",
    "weather",
    "id",
    "less",
    "equal",
    "531",
    "return",
    "rain",
    "better",
    "600",
    "622",
    "else",
    "600",
    "less",
    "equal",
    "weather",
    "id",
    "less",
    "equal",
    "622",
    "return",
    "snow",
    "701",
    "741",
    "missed",
    "fog",
    "else",
    "701",
    "less",
    "equal",
    "weather",
    "id",
    "less",
    "equal",
    "741",
    "return",
    "mist",
    "fog",
    "762",
    "specifically",
    "ash",
    "like",
    "volcano",
    "else",
    "weather",
    "id",
    "directly",
    "equal",
    "762",
    "return",
    "let",
    "return",
    "volcano",
    "771",
    "squall",
    "violent",
    "gust",
    "wind",
    "else",
    "weather",
    "id",
    "directly",
    "equal",
    "771",
    "return",
    "let",
    "return",
    "violent",
    "gust",
    "wind",
    "squall",
    "781",
    "tornado",
    "else",
    "weather",
    "id",
    "equal",
    "781",
    "return",
    "tornado",
    "800",
    "exactly",
    "clear",
    "sky",
    "else",
    "weather",
    "id",
    "equal",
    "800",
    "return",
    "sun",
    "sun",
    "emoji",
    "else",
    "801",
    "less",
    "equal",
    "weather",
    "id",
    "less",
    "equal",
    "804",
    "return",
    "clouds",
    "matches",
    "let",
    "return",
    "empty",
    "string",
    "display",
    "anything",
    "okay",
    "let",
    "test",
    "run",
    "let",
    "look",
    "miami",
    "get",
    "scattered",
    "clouds",
    "los",
    "angeles",
    "get",
    "clear",
    "sky",
    "sun",
    "one",
    "fix",
    "need",
    "make",
    "let",
    "say",
    "make",
    "city",
    "blah",
    "blah",
    "blah",
    "get",
    "weather",
    "clear",
    "emoji",
    "label",
    "weather",
    "description",
    "still",
    "get",
    "error",
    "message",
    "display",
    "error",
    "within",
    "display",
    "error",
    "method",
    "set",
    "text",
    "temperature",
    "label",
    "let",
    "take",
    "emoji",
    "label",
    "self",
    "emoji",
    "label",
    "call",
    "clear",
    "method",
    "clear",
    "description",
    "label",
    "self",
    "description",
    "label",
    "call",
    "clear",
    "method",
    "able",
    "clear",
    "get",
    "error",
    "okay",
    "let",
    "look",
    "houston",
    "get",
    "weather",
    "clouds",
    "let",
    "make",
    "city",
    "pizza",
    "city",
    "get",
    "weather",
    "found",
    "city",
    "found",
    "emoji",
    "label",
    "weather",
    "description",
    "cleared",
    "okay",
    "type",
    "nothing",
    "happens",
    "let",
    "get",
    "weather",
    "bad",
    "request",
    "please",
    "check",
    "input",
    "http",
    "status",
    "cod",
    "400",
    "handled",
    "exception",
    "bad",
    "request",
    "right",
    "one",
    "last",
    "city",
    "paris",
    "let",
    "get",
    "weather",
    "f",
    "light",
    "rain",
    "right",
    "everybody",
    "weather",
    "app",
    "make",
    "using",
    "python",
    "add",
    "portfolio",
    "thanks",
    "watching"
  ],
  "keywords": [
    "everybody",
    "video",
    "going",
    "everything",
    "need",
    "know",
    "start",
    "python",
    "also",
    "20",
    "different",
    "help",
    "find",
    "entire",
    "list",
    "description",
    "project",
    "weather",
    "app",
    "data",
    "api",
    "even",
    "anything",
    "good",
    "back",
    "show",
    "would",
    "like",
    "button",
    "random",
    "say",
    "right",
    "two",
    "download",
    "first",
    "convert",
    "code",
    "go",
    "version",
    "open",
    "want",
    "check",
    "checkbox",
    "add",
    "path",
    "second",
    "place",
    "write",
    "already",
    "use",
    "sure",
    "extension",
    "click",
    "using",
    "free",
    "one",
    "either",
    "select",
    "correct",
    "system",
    "running",
    "next",
    "could",
    "folder",
    "keep",
    "create",
    "give",
    "okay",
    "complete",
    "box",
    "run",
    "close",
    "window",
    "new",
    "location",
    "change",
    "script",
    "let",
    "menu",
    "left",
    "file",
    "name",
    "main",
    "really",
    "files",
    "end",
    "within",
    "print",
    "something",
    "statement",
    "type",
    "set",
    "parentheses",
    "double",
    "quotes",
    "single",
    "normally",
    "hello",
    "instead",
    "think",
    "favorite",
    "food",
    "case",
    "pizza",
    "program",
    "output",
    "whatever",
    "another",
    "line",
    "adding",
    "printing",
    "sign",
    "call",
    "used",
    "people",
    "still",
    "topic",
    "variables",
    "variable",
    "value",
    "four",
    "types",
    "strings",
    "contains",
    "assign",
    "operator",
    "equals",
    "text",
    "string",
    "characters",
    "word",
    "called",
    "f",
    "way",
    "display",
    "means",
    "format",
    "insert",
    "curly",
    "braces",
    "result",
    "following",
    "placeholder",
    "email",
    "make",
    "include",
    "numbers",
    "integer",
    "whole",
    "number",
    "example",
    "somebody",
    "age",
    "old",
    "many",
    "little",
    "technically",
    "work",
    "years",
    "amount",
    "maybe",
    "three",
    "items",
    "item",
    "float",
    "rather",
    "num",
    "students",
    "30",
    "class",
    "floating",
    "point",
    "decimal",
    "price",
    "unit",
    "pick",
    "feel",
    "else",
    "contain",
    "gpa",
    "boolean",
    "true",
    "false",
    "student",
    "capital",
    "letter",
    "options",
    "values",
    "directly",
    "see",
    "working",
    "statements",
    "future",
    "may",
    "fst",
    "sale",
    "car",
    "sort",
    "online",
    "basic",
    "try",
    "well",
    "typ",
    "functions",
    "full",
    "currently",
    "actually",
    "get",
    "function",
    "pass",
    "however",
    "returned",
    "cast",
    "reassign",
    "cover",
    "passing",
    "enclose",
    "plus",
    "1",
    "error",
    "birthday",
    "since",
    "much",
    "take",
    "character",
    "b",
    "empty",
    "us",
    "return",
    "user",
    "enter",
    "useful",
    "input",
    "always",
    "times",
    "accept",
    "returns",
    "prompt",
    "ask",
    "question",
    "message",
    "spongebob",
    "time",
    "happy",
    "store",
    "ca",
    "though",
    "works",
    "less",
    "practice",
    "exercise",
    "calculate",
    "area",
    "rectangle",
    "length",
    "width",
    "copy",
    "paste",
    "operators",
    "test",
    "5",
    "six",
    "sequence",
    "geometry",
    "6",
    "power",
    "2",
    "cart",
    "might",
    "total",
    "five",
    "x",
    "9",
    "game",
    "words",
    "fill",
    "today",
    "adjective",
    "named",
    "describe",
    "person",
    "thing",
    "last",
    "3",
    "current",
    "ending",
    "uh",
    "read",
    "hey",
    "math",
    "lot",
    "module",
    "look",
    "skip",
    "begin",
    "friends",
    "zero",
    "guess",
    "known",
    "equal",
    "division",
    "id",
    "modulus",
    "10",
    "divide",
    "group",
    "separate",
    "kind",
    "yeah",
    "4",
    "z",
    "round",
    "absolute",
    "base",
    "given",
    "results",
    "import",
    "top",
    "pi",
    "digits",
    "e",
    "access",
    "square",
    "circle",
    "formula",
    "radius",
    "around",
    "7",
    "triangle",
    "c",
    "answer",
    "explain",
    "condition",
    "depending",
    "credit",
    "card",
    "order",
    "greater",
    "colon",
    "execute",
    "found",
    "happens",
    "must",
    "meaning",
    "yet",
    "100",
    "probably",
    "move",
    "conditions",
    "default",
    "response",
    "together",
    "able",
    "later",
    "long",
    "update",
    "comma",
    "digit",
    "exist",
    "invalid",
    "valid",
    "weight",
    "follow",
    "creating",
    "space",
    "better",
    "exit",
    "temperature",
    "celsius",
    "fahrenheit",
    "temp",
    "logical",
    "multiple",
    "hot",
    "sunny",
    "outside",
    "emoji",
    "press",
    "block",
    "range",
    "looking",
    "local",
    "got",
    "negative",
    "status",
    "child",
    "define",
    "methods",
    "method",
    "spaces",
    "8",
    "followed",
    "dot",
    "position",
    "index",
    "0",
    "q",
    "lowercase",
    "uppercase",
    "phone",
    "dashes",
    "count",
    "replace",
    "center",
    "username",
    "12",
    "elements",
    "step",
    "turn",
    "talk",
    "every",
    "align",
    "symbol",
    "match",
    "loops",
    "loop",
    "continue",
    "longer",
    "escape",
    "quit",
    "interest",
    "balance",
    "rate",
    "declare",
    "temporarily",
    "year",
    "500",
    "break",
    "keyword",
    "iterate",
    "considered",
    "iterable",
    "counter",
    "stop",
    "parameter",
    "rid",
    "iteration",
    "timer",
    "sleep",
    "seconds",
    "digital",
    "clock",
    "hours",
    "minutes",
    "red",
    "corner",
    "made",
    "rows",
    "collections",
    "lists",
    "sets",
    "collection",
    "fruit",
    "apple",
    "tuple",
    "orange",
    "banana",
    "coconut",
    "fruits",
    "element",
    "attempt",
    "attributes",
    "append",
    "clear",
    "remove",
    "pineapple",
    "delete",
    "object",
    "color",
    "tupple",
    "dog",
    "horizontally",
    "vertical",
    "2d",
    "row",
    "column",
    "fish",
    "option",
    "guesses",
    "animal",
    "body",
    "incorrect",
    "wrong",
    "dictionary",
    "key",
    "capitals",
    "pair",
    "exists",
    "keys",
    "specific",
    "state",
    "dice",
    "play",
    "choice",
    "rock",
    "paper",
    "scissors",
    "computer",
    "playing",
    "handle",
    "arguments",
    "argument",
    "application",
    "player",
    "win",
    "lose",
    "instance",
    "reset",
    "art",
    "symbols",
    "shape",
    "invoke",
    "send",
    "parameters",
    "date",
    "title",
    "created",
    "args",
    "quars",
    "city",
    "apartment",
    "label",
    "blah",
    "patrick",
    "book",
    "day",
    "underscore",
    "scope",
    "apply",
    "dunder",
    "classes",
    "functionality",
    "edit",
    "attribute",
    "receive",
    "deposit",
    "withdraw",
    "slot",
    "spin",
    "bet",
    "plain",
    "image",
    "hint",
    "objects",
    "pages",
    "layout",
    "construct",
    "constructor",
    "init",
    "initialize",
    "self",
    "blue",
    "drive",
    "property",
    "inheritance",
    "inherit",
    "parent",
    "cat",
    "super",
    "prey",
    "rabbit",
    "exception",
    "filled",
    "height",
    "decorator",
    "static",
    "employee",
    "manager",
    "behavior",
    "author",
    "font",
    "size",
    "ice",
    "cream",
    "sprinkles",
    "exceptions",
    "properties",
    "json",
    "csv",
    "alarm",
    "package",
    "trash",
    "walking",
    "connect",
    "request",
    "pokemon",
    "200",
    "interface",
    "qt5",
    "qt",
    "widgets",
    "buttons",
    "pixels",
    "labels",
    "widget",
    "style",
    "css",
    "vertically",
    "stylesheet",
    "push",
    "signal",
    "radio",
    "milliseconds",
    "stopwatch"
  ]
}