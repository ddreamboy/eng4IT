{
  "text": "welcome everyone in today's video we\ncreate a speech recognition model with\ntensorflow that can recognize keywords\nand then we turn this into an actual\nproject that can listen to real-time\ndata from your microphone and can then\nclassify this so you could use this for\nexample for a home automation project or\nwhatever you want in our case we built a\nsimple demonstration model that can\ncontrol a game so let me show you the\ndemo if i run this you will see the\noutput that it classifies the keywords\nand then i can also move and control the\nturtle in python\nso i can say up\ndown\nright\ngo\nleft\nup\ngo stop\nand you see this worked pretty well so\nthis is super awesome so let's get into\nit alright so the code is largely based\non this official tensorflow guide simple\naudio recognition recognized keywords so\nyou can read through this by yourself\nand they also provide a link to the\ncollab so we click on this and now we\nare going to use this so you should be\nable to follow me here pretty easily but\nlater most importantly you will learn\nhow to turn this into an actual project\non our machine\nso let me close the table of contents\nand the first thing to do is check the\nruntime type so this should be set to a\ngpu and now we can click on run all you\ncan do the same and while this is\nrunning let's go over this very briefly\nso the code is based on this speech\ncommands data set that is publicly\navailable and it has these commands down\ngo left no right stop up and yes and the\nfirst thing they do is the imports of\ncourse and then they download the data\nsets and then they check the commands\nthen they access the file names so by\nthe way if you have a look at the\ndata then you see this is organized like\nso so we have data mini speech commands\nand then for each label it is in a\nseparate folder and then inside the\nfolder there are the different way files\nyeah we can see them here\nso\nyeah here they extract this the file\nnames then they split this into training\nvalidation and testing\nthen\nhere they prepare a example so we can\nhave a look at the audio then they\ndecode the audio so this step is\nimportant later so here they read this\nfrom a wav file but later of course we\nwant to get this directly from the\nmicrophone input\nso we have to remember what this decode\nwave is doing so here for example it\nsays it normalizes the data to be\nbetween -1 and 1.\num yeah then they get the label then\nhere the first thing they do is now they\nturn this into a waveform from the wave\nfile\nand create a data set from this and yeah\nhere they print the waveform\nand then the second step is to convert\nthe waveform to a spectrogram\nso\num yeah here they have this helper\nfunction get spectrogram\nand then i think yeah here they display\nthis so we can listen to one sample no\nno no\num then they plot the spectrogram so\nhere we can see this is the waveform and\nthis is the spectrogram so basically we\nhave an image now and can use a\nconvolutional neural net to classify\nthis\nso this is what we do in a moment\nand\nyeah then they plot some things again\nand now they build the model\nso\nhere we have this pre-processed data set\nfunction\nand as we see so it conver it creates a\ntensorflow data set and now the first\nthing they do is get the waveform and\nthen get the spectrogram\nso it applies these two steps for\npre-processing then here we get this for\nthe training validation and testing\nand\nthen here they built the model so um\nthey built a sequential model with an\ninput layer then they down sample this\nthen they have a normalization layer and\nthen like i said we have an image now so\nwe can apply convolution so conf 2d\nlayers and then mix with max pooling and\nin the end we flatten this and apply\nlinear layers so dense layer for the\nclassification so here we have layer\nstands with num labels at the very end\nthen here we get the summary\nthen we say model compile and model fit\nand now this is training so it's already\ndone by now then we can plot the history\nand then it we evaluate this so it gets\n85 percent on the test set then they\nalso plot the\nconfusion matrix and now they run\ninference on an audio file so this is\nalso important for us\nso\nin the end yeah it looks like this and\nyou see for one sample it looks like\nthis so now let's build on top of this\nso until now we have used the original\ncola but now we have to add a few things\nso first we want to save and then\ndownload the model from the call up to\nour machine and then we also have to\nchange the pipeline slightly because now\nwe no longer load the files from a wav\nfile but we want to directly use our\nmicrophone input\nso first let's show how to\nload and download the model and for this\ni also here want to\nprint the label prediction to verify\nthat the loaded model has the same\nprediction so we say label predict\nequals numpy\narc marks of the prediction along axis\nequals one\nand if we print then we have to access\ncommands and then\nlabel and now we say label\nunderscore predict and if we run the\ncell again\nthen you see the prediction is no\nand now let's save the model so for this\nwe add a new cell and this is super\nsimple with tensorflow and the keras api\nwe only say model save\nand then we give it a name saved\nunderscore\nmodel\nand now if we execute this cell then we\nshould see if we click the files then\nhere this created a whole folder so this\nis what we have to download but we can't\ndownload it like this but and that's why\nwe have to convert this to a zip file\nnow\nso we add another cell here click on\ncode and now we can run a command like\nso an exclamation mark and then we say\nsip dash r and now we give it the name\nwe say save underscore model dot\nsip and we sip the dot slash\nsaved underscore model folder and now if\nwe run this\nthen this should add a zip file so if we\nclick on\nrefresh then here we have the zip folder\nand now we can click on this and\ndownload this to our machine so this is\nhow we can extract data from the colab\nso now you should see the saved model\nsip folder in your downloads folder and\nnext i want to add another cell here and\nnow i want to verify that the loaded\nmodel works so we can say loaded model\nequals\nmodels dot\nload underscore model and then the name\nwas saved\nmodel\nand this should now be the loaded model\nand now we copy\nthis part so\ni think we only need\nthis and then add another cell and click\non code and now here we use the\nlow\nthat model and now if we run this then\nthis should be the very same result so\nno and also the same plot so saving and\nloading works and now comes the tricky\nparts and now we no longer want to use\nthe build in tensorflow method to load\nthe wav files but now we want to\ndirectly work with a numpy array that we\nget from the microphone input so inside\nthe colab we cannot use the microphone\nso in here i want to simulate this and\nget the numpy array differently\nso i add another cell and then we use\nthe build in wave module to load the\nframes\nso we can open the file and then we say\nwe get the number of frames and then we\nread the frames and then we can turn\nthis into a numpy array by using numpy\nfrom buffer and then the wave\nand if we print for example the shape\nthen we see we have 16 000 um samples in\nhere and now the next step is to verify\nthe pipeline with this step instead of\nusing the\num built in decode method so let's add\nanother cell here and here we want to\nget the waveform and for this let's have\na look at the pre-process\ndata set method again so here they do\ntwo steps so they get the waveform and\nthe label and then they get the\nspectrogram and label id we don't care\nabout the label here because we only do\ninference but now let's have a look at\nwhat get\nwaveform and label is doing so here they\ndecode the audio and here they use the\nbuilt-in tensorflow audio decode wave\nmethod\nand if we hover over this then this is\nvery important here there is the\ndocumentation\nso it has this range signed 16 bit\nvalues will be scaled to -1 and 1. so we\nhave to remember the maximum value here\n32\n768\nand we have to normalize it in the same\nway otherwise the results will be very\nmuch off\num\nso let's go down again to our cell and\nwe can do this very easily so we only\nhave to say\nsignal\nunderscore\narray divided by this value and now we\nwant to convert this into a tensor so we\ncan do this by using tensorflow um\nconvert to\ntensor and then the waveform and we also\ngive it a data type of let's use\ntensorflow float 32 and now we should\nhave this as a tensor and in the correct\nformat so you see the values should be\nbetween minus one and one then the\nsecond step was to get the spectrogram\nso we can say spec equals and this is\nthe built in get um spectrogram\nthere it is and it gets the waveform and\nnow we have to be careful so we have to\nexpand the dimensions and add one\ndimension for the batch dimension so we\ncan you do this by saying tensorflow x\npond underscore dims of the spec and\nthen we give it the dimension zero and\nnow this is in the correct shape and now\nwe can get the prediction by um simply\ncalling the loaded model again and this\ngets the spec and then if we could if we\ncan print this so we say print\nprediction and this should be the very\nsame values that we've seen before if we\nprint this\nso here we don't print the prediction\nbut if you do this then this should be\nthe same values\nso yeah you can check this again and now\nwe also\nlet's copy this\nso we want to get the label prediction\nand then we print this and then we plot\nthis\nand\nyeah now let's run this cell and you see\nthe plot looks the same we get no so now\nthis is working the same way with a\nbuilt in numpy array so you see these\nsteps here are essential and now we\nbasically need to apply this code in our\ncode on our machine and then we also\nneed to copy this helper function get\nspectrogram from this colab so yeah\nlet's do this so i already prepared the\nproject and what you have to do is copy\nthe saved model zip file into this\ndirectory and extract it here then i\nalso recommend to create a virtual\nenvironment and we have to install\ntensorflow and pi audio if you're not\nfamiliar with pi audio then we have\nanother tutorial that talks about this\nin more detail here on our channel and\nthen i created some helper files so\nlet's go over them very briefly i also\nput them on github and the link will be\nin the description\nso i created one helper file pre-process\naudio buffer and this is doing exactly\nwhat we just did in the last step so we\nnormalize the audio buffer and then\nconvert it to a tensor called\ngetspectrogram and return this and then\nwe have to copy the getspectrogram\nmethod from the colab so this is the\nexact same code and then just in case i\nalso set the seed value then we have a\nrecording helper that uses pi audio so\nhere i create one function record audio\nso\nwhat's so i talked about this in several\nother tutorials um already so i'm not\ngoing into more detail here but what's\nimportant here is that we record for one\nsecond\nand if we\num do the math and then we use these\nframes per buffer and this rate then\nthis will end up in 16 000 samples so\nexactly like our training samples and\nthen in the end we again use numpy from\nbuffer and then join the frames here so\nnow we have this as numpy array and then\ni also have a helper function to\nterminate pi audio again and now let's\ngo over to main and here we import\neverything so we import numpy as np we\nalso need from\ntensorflow.keras we want to import\nmodels and then we say from\nrecording helper we want to import\nrecord audio and the terminate function\nand from tensorflow helper we want to\nimport\npre-process audio buffer\nthen we get the commands by saying\ncommands equals and now we get this from\nthe colab\nso this is important make sure that this\nis in the correct order\nso let's copy and paste this and\num\ndon't forget to put the commas in here\nso if you you run this yourself then due\nto the random element there might be\na different order so yeah make sure to\nuse the same order that you have in your\ncollab\nand now let's load the model so we say\nloaded model equals\nmodels dot\nload underscore model and the name is\nsaved model\nthen let's create a helper function\npredict\nmic and here we call everything\nso we say audio equals\nrecord audio then the spec equals\npre-process audio buffer with the audio\nthen we call the model and get the\nprediction by calling\nloaded model with the\nspec and then we\ncall we get the label\nthe label prediction equals numpy dot\narc max of the\nprediction along axis equals one\nthen let's get the command by saying\ncommand equals commands of the label\nbret 0\nthen let's print the\npredicted label and this is the\ncommand so here we need a comma\nand then we also want to return this\ncommand from this function return\ncommand\nand then we say if underscore name\nequals equals\nunderscore\num\nmain then we want to run this as a\nwhile true loop so here we say\nwhile\ntrue and then we want to say command\nequals\npredict\nmic and now we say if\ncommands equals equals stop\nthen we want to call the terminate\nfunction to close pi audio and then we\nbreak so now hopefully this will work so\nnow we can say python main.pi make sure\nto activate your virtual environment\nup\nup\ndown\nup\nright\nleft\ngo\nleft\ngo\nright down\nstop\nall right so this worked and now the\nlast thing to do is to add a turtle so\nfor this again i have a helper function\nturtle helper that inits the turtle and\nsets some settings then i have helper\nfunctions to go right up left or down\ndepending on the current direction we\nare facing so here we simply turn\nthe um\nhere we turn the turtle and then we have\na move turtle function that puts\neverything together so here we call go\nup down left or right and if we say go\nthen we move the turtle forward and if\nwe stop then we simply stop and then in\nthe main we actually break so here we\ncan import this so we say from\nturtle helper we want to import move\nturtle and then here we only call move\nturtle with the commands this is all\nthat we need in order to run our turtle\nnow and now let's again call python\nmain.pi\nup\nleft right\ndown\ngo\nright\ngo\nup\ngo\nstop\nall right this worked perfectly all\nright i hope you enjoyed this project if\nyou did so then please drop us a like\nand consider subscribing to our channel\nagain the resources will be in the\ndescription below and then i hope to see\nyou in the next one bye\n",
  "words": [
    "welcome",
    "everyone",
    "today",
    "video",
    "create",
    "speech",
    "recognition",
    "model",
    "tensorflow",
    "recognize",
    "keywords",
    "turn",
    "actual",
    "project",
    "listen",
    "data",
    "microphone",
    "classify",
    "could",
    "use",
    "example",
    "home",
    "automation",
    "project",
    "whatever",
    "want",
    "case",
    "built",
    "simple",
    "demonstration",
    "model",
    "control",
    "game",
    "let",
    "show",
    "demo",
    "run",
    "see",
    "output",
    "classifies",
    "keywords",
    "also",
    "move",
    "control",
    "turtle",
    "python",
    "say",
    "right",
    "go",
    "left",
    "go",
    "stop",
    "see",
    "worked",
    "pretty",
    "well",
    "super",
    "awesome",
    "let",
    "get",
    "alright",
    "code",
    "largely",
    "based",
    "official",
    "tensorflow",
    "guide",
    "simple",
    "audio",
    "recognition",
    "recognized",
    "keywords",
    "read",
    "also",
    "provide",
    "link",
    "collab",
    "click",
    "going",
    "use",
    "able",
    "follow",
    "pretty",
    "easily",
    "later",
    "importantly",
    "learn",
    "turn",
    "actual",
    "project",
    "machine",
    "let",
    "close",
    "table",
    "contents",
    "first",
    "thing",
    "check",
    "runtime",
    "type",
    "set",
    "gpu",
    "click",
    "run",
    "running",
    "let",
    "go",
    "briefly",
    "code",
    "based",
    "speech",
    "commands",
    "data",
    "set",
    "publicly",
    "available",
    "commands",
    "go",
    "left",
    "right",
    "stop",
    "yes",
    "first",
    "thing",
    "imports",
    "course",
    "download",
    "data",
    "sets",
    "check",
    "commands",
    "access",
    "file",
    "names",
    "way",
    "look",
    "data",
    "see",
    "organized",
    "like",
    "data",
    "mini",
    "speech",
    "commands",
    "label",
    "separate",
    "folder",
    "inside",
    "folder",
    "different",
    "way",
    "files",
    "yeah",
    "see",
    "yeah",
    "extract",
    "file",
    "names",
    "split",
    "training",
    "validation",
    "testing",
    "prepare",
    "example",
    "look",
    "audio",
    "decode",
    "audio",
    "step",
    "important",
    "later",
    "read",
    "wav",
    "file",
    "later",
    "course",
    "want",
    "get",
    "directly",
    "microphone",
    "input",
    "remember",
    "decode",
    "wave",
    "example",
    "says",
    "normalizes",
    "data",
    "um",
    "yeah",
    "get",
    "label",
    "first",
    "thing",
    "turn",
    "waveform",
    "wave",
    "file",
    "create",
    "data",
    "set",
    "yeah",
    "print",
    "waveform",
    "second",
    "step",
    "convert",
    "waveform",
    "spectrogram",
    "um",
    "yeah",
    "helper",
    "function",
    "get",
    "spectrogram",
    "think",
    "yeah",
    "display",
    "listen",
    "one",
    "sample",
    "um",
    "plot",
    "spectrogram",
    "see",
    "waveform",
    "spectrogram",
    "basically",
    "image",
    "use",
    "convolutional",
    "neural",
    "net",
    "classify",
    "moment",
    "yeah",
    "plot",
    "things",
    "build",
    "model",
    "data",
    "set",
    "function",
    "see",
    "conver",
    "creates",
    "tensorflow",
    "data",
    "set",
    "first",
    "thing",
    "get",
    "waveform",
    "get",
    "spectrogram",
    "applies",
    "two",
    "steps",
    "get",
    "training",
    "validation",
    "testing",
    "built",
    "model",
    "um",
    "built",
    "sequential",
    "model",
    "input",
    "layer",
    "sample",
    "normalization",
    "layer",
    "like",
    "said",
    "image",
    "apply",
    "convolution",
    "conf",
    "2d",
    "layers",
    "mix",
    "max",
    "pooling",
    "end",
    "flatten",
    "apply",
    "linear",
    "layers",
    "dense",
    "layer",
    "classification",
    "layer",
    "stands",
    "num",
    "labels",
    "end",
    "get",
    "summary",
    "say",
    "model",
    "compile",
    "model",
    "fit",
    "training",
    "already",
    "done",
    "plot",
    "history",
    "evaluate",
    "gets",
    "85",
    "percent",
    "test",
    "set",
    "also",
    "plot",
    "confusion",
    "matrix",
    "run",
    "inference",
    "audio",
    "file",
    "also",
    "important",
    "us",
    "end",
    "yeah",
    "looks",
    "like",
    "see",
    "one",
    "sample",
    "looks",
    "like",
    "let",
    "build",
    "top",
    "used",
    "original",
    "cola",
    "add",
    "things",
    "first",
    "want",
    "save",
    "download",
    "model",
    "call",
    "machine",
    "also",
    "change",
    "pipeline",
    "slightly",
    "longer",
    "load",
    "files",
    "wav",
    "file",
    "want",
    "directly",
    "use",
    "microphone",
    "input",
    "first",
    "let",
    "show",
    "load",
    "download",
    "model",
    "also",
    "want",
    "print",
    "label",
    "prediction",
    "verify",
    "loaded",
    "model",
    "prediction",
    "say",
    "label",
    "predict",
    "equals",
    "numpy",
    "arc",
    "marks",
    "prediction",
    "along",
    "axis",
    "equals",
    "one",
    "print",
    "access",
    "commands",
    "label",
    "say",
    "label",
    "underscore",
    "predict",
    "run",
    "cell",
    "see",
    "prediction",
    "let",
    "save",
    "model",
    "add",
    "new",
    "cell",
    "super",
    "simple",
    "tensorflow",
    "keras",
    "api",
    "say",
    "model",
    "save",
    "give",
    "name",
    "saved",
    "underscore",
    "model",
    "execute",
    "cell",
    "see",
    "click",
    "files",
    "created",
    "whole",
    "folder",
    "download",
    "ca",
    "download",
    "like",
    "convert",
    "zip",
    "file",
    "add",
    "another",
    "cell",
    "click",
    "code",
    "run",
    "command",
    "like",
    "exclamation",
    "mark",
    "say",
    "sip",
    "dash",
    "r",
    "give",
    "name",
    "say",
    "save",
    "underscore",
    "model",
    "dot",
    "sip",
    "sip",
    "dot",
    "slash",
    "saved",
    "underscore",
    "model",
    "folder",
    "run",
    "add",
    "zip",
    "file",
    "click",
    "refresh",
    "zip",
    "folder",
    "click",
    "download",
    "machine",
    "extract",
    "data",
    "colab",
    "see",
    "saved",
    "model",
    "sip",
    "folder",
    "downloads",
    "folder",
    "next",
    "want",
    "add",
    "another",
    "cell",
    "want",
    "verify",
    "loaded",
    "model",
    "works",
    "say",
    "loaded",
    "model",
    "equals",
    "models",
    "dot",
    "load",
    "underscore",
    "model",
    "name",
    "saved",
    "model",
    "loaded",
    "model",
    "copy",
    "part",
    "think",
    "need",
    "add",
    "another",
    "cell",
    "click",
    "code",
    "use",
    "low",
    "model",
    "run",
    "result",
    "also",
    "plot",
    "saving",
    "loading",
    "works",
    "comes",
    "tricky",
    "parts",
    "longer",
    "want",
    "use",
    "build",
    "tensorflow",
    "method",
    "load",
    "wav",
    "files",
    "want",
    "directly",
    "work",
    "numpy",
    "array",
    "get",
    "microphone",
    "input",
    "inside",
    "colab",
    "use",
    "microphone",
    "want",
    "simulate",
    "get",
    "numpy",
    "array",
    "differently",
    "add",
    "another",
    "cell",
    "use",
    "build",
    "wave",
    "module",
    "load",
    "frames",
    "open",
    "file",
    "say",
    "get",
    "number",
    "frames",
    "read",
    "frames",
    "turn",
    "numpy",
    "array",
    "using",
    "numpy",
    "buffer",
    "wave",
    "print",
    "example",
    "shape",
    "see",
    "16",
    "000",
    "um",
    "samples",
    "next",
    "step",
    "verify",
    "pipeline",
    "step",
    "instead",
    "using",
    "um",
    "built",
    "decode",
    "method",
    "let",
    "add",
    "another",
    "cell",
    "want",
    "get",
    "waveform",
    "let",
    "look",
    "data",
    "set",
    "method",
    "two",
    "steps",
    "get",
    "waveform",
    "label",
    "get",
    "spectrogram",
    "label",
    "id",
    "care",
    "label",
    "inference",
    "let",
    "look",
    "get",
    "waveform",
    "label",
    "decode",
    "audio",
    "use",
    "tensorflow",
    "audio",
    "decode",
    "wave",
    "method",
    "hover",
    "important",
    "documentation",
    "range",
    "signed",
    "16",
    "bit",
    "values",
    "scaled",
    "remember",
    "maximum",
    "value",
    "32",
    "768",
    "normalize",
    "way",
    "otherwise",
    "results",
    "much",
    "um",
    "let",
    "go",
    "cell",
    "easily",
    "say",
    "signal",
    "underscore",
    "array",
    "divided",
    "value",
    "want",
    "convert",
    "tensor",
    "using",
    "tensorflow",
    "um",
    "convert",
    "tensor",
    "waveform",
    "also",
    "give",
    "data",
    "type",
    "let",
    "use",
    "tensorflow",
    "float",
    "32",
    "tensor",
    "correct",
    "format",
    "see",
    "values",
    "minus",
    "one",
    "one",
    "second",
    "step",
    "get",
    "spectrogram",
    "say",
    "spec",
    "equals",
    "built",
    "get",
    "um",
    "spectrogram",
    "gets",
    "waveform",
    "careful",
    "expand",
    "dimensions",
    "add",
    "one",
    "dimension",
    "batch",
    "dimension",
    "saying",
    "tensorflow",
    "x",
    "pond",
    "underscore",
    "dims",
    "spec",
    "give",
    "dimension",
    "zero",
    "correct",
    "shape",
    "get",
    "prediction",
    "um",
    "simply",
    "calling",
    "loaded",
    "model",
    "gets",
    "spec",
    "could",
    "print",
    "say",
    "print",
    "prediction",
    "values",
    "seen",
    "print",
    "print",
    "prediction",
    "values",
    "yeah",
    "check",
    "also",
    "let",
    "copy",
    "want",
    "get",
    "label",
    "prediction",
    "print",
    "plot",
    "yeah",
    "let",
    "run",
    "cell",
    "see",
    "plot",
    "looks",
    "get",
    "working",
    "way",
    "built",
    "numpy",
    "array",
    "see",
    "steps",
    "essential",
    "basically",
    "need",
    "apply",
    "code",
    "code",
    "machine",
    "also",
    "need",
    "copy",
    "helper",
    "function",
    "get",
    "spectrogram",
    "colab",
    "yeah",
    "let",
    "already",
    "prepared",
    "project",
    "copy",
    "saved",
    "model",
    "zip",
    "file",
    "directory",
    "extract",
    "also",
    "recommend",
    "create",
    "virtual",
    "environment",
    "install",
    "tensorflow",
    "pi",
    "audio",
    "familiar",
    "pi",
    "audio",
    "another",
    "tutorial",
    "talks",
    "detail",
    "channel",
    "created",
    "helper",
    "files",
    "let",
    "go",
    "briefly",
    "also",
    "put",
    "github",
    "link",
    "description",
    "created",
    "one",
    "helper",
    "file",
    "audio",
    "buffer",
    "exactly",
    "last",
    "step",
    "normalize",
    "audio",
    "buffer",
    "convert",
    "tensor",
    "called",
    "getspectrogram",
    "return",
    "copy",
    "getspectrogram",
    "method",
    "colab",
    "exact",
    "code",
    "case",
    "also",
    "set",
    "seed",
    "value",
    "recording",
    "helper",
    "uses",
    "pi",
    "audio",
    "create",
    "one",
    "function",
    "record",
    "audio",
    "talked",
    "several",
    "tutorials",
    "um",
    "already",
    "going",
    "detail",
    "important",
    "record",
    "one",
    "second",
    "um",
    "math",
    "use",
    "frames",
    "per",
    "buffer",
    "rate",
    "end",
    "16",
    "000",
    "samples",
    "exactly",
    "like",
    "training",
    "samples",
    "end",
    "use",
    "numpy",
    "buffer",
    "join",
    "frames",
    "numpy",
    "array",
    "also",
    "helper",
    "function",
    "terminate",
    "pi",
    "audio",
    "let",
    "go",
    "main",
    "import",
    "everything",
    "import",
    "numpy",
    "np",
    "also",
    "need",
    "want",
    "import",
    "models",
    "say",
    "recording",
    "helper",
    "want",
    "import",
    "record",
    "audio",
    "terminate",
    "function",
    "tensorflow",
    "helper",
    "want",
    "import",
    "audio",
    "buffer",
    "get",
    "commands",
    "saying",
    "commands",
    "equals",
    "get",
    "colab",
    "important",
    "make",
    "sure",
    "correct",
    "order",
    "let",
    "copy",
    "paste",
    "um",
    "forget",
    "put",
    "commas",
    "run",
    "due",
    "random",
    "element",
    "might",
    "different",
    "order",
    "yeah",
    "make",
    "sure",
    "use",
    "order",
    "collab",
    "let",
    "load",
    "model",
    "say",
    "loaded",
    "model",
    "equals",
    "models",
    "dot",
    "load",
    "underscore",
    "model",
    "name",
    "saved",
    "model",
    "let",
    "create",
    "helper",
    "function",
    "predict",
    "mic",
    "call",
    "everything",
    "say",
    "audio",
    "equals",
    "record",
    "audio",
    "spec",
    "equals",
    "audio",
    "buffer",
    "audio",
    "call",
    "model",
    "get",
    "prediction",
    "calling",
    "loaded",
    "model",
    "spec",
    "call",
    "get",
    "label",
    "label",
    "prediction",
    "equals",
    "numpy",
    "dot",
    "arc",
    "max",
    "prediction",
    "along",
    "axis",
    "equals",
    "one",
    "let",
    "get",
    "command",
    "saying",
    "command",
    "equals",
    "commands",
    "label",
    "bret",
    "0",
    "let",
    "print",
    "predicted",
    "label",
    "command",
    "need",
    "comma",
    "also",
    "want",
    "return",
    "command",
    "function",
    "return",
    "command",
    "say",
    "underscore",
    "name",
    "equals",
    "equals",
    "underscore",
    "um",
    "main",
    "want",
    "run",
    "true",
    "loop",
    "say",
    "true",
    "want",
    "say",
    "command",
    "equals",
    "predict",
    "mic",
    "say",
    "commands",
    "equals",
    "equals",
    "stop",
    "want",
    "call",
    "terminate",
    "function",
    "close",
    "pi",
    "audio",
    "break",
    "hopefully",
    "work",
    "say",
    "python",
    "make",
    "sure",
    "activate",
    "virtual",
    "environment",
    "right",
    "left",
    "go",
    "left",
    "go",
    "right",
    "stop",
    "right",
    "worked",
    "last",
    "thing",
    "add",
    "turtle",
    "helper",
    "function",
    "turtle",
    "helper",
    "inits",
    "turtle",
    "sets",
    "settings",
    "helper",
    "functions",
    "go",
    "right",
    "left",
    "depending",
    "current",
    "direction",
    "facing",
    "simply",
    "turn",
    "um",
    "turn",
    "turtle",
    "move",
    "turtle",
    "function",
    "puts",
    "everything",
    "together",
    "call",
    "go",
    "left",
    "right",
    "say",
    "go",
    "move",
    "turtle",
    "forward",
    "stop",
    "simply",
    "stop",
    "main",
    "actually",
    "break",
    "import",
    "say",
    "turtle",
    "helper",
    "want",
    "import",
    "move",
    "turtle",
    "call",
    "move",
    "turtle",
    "commands",
    "need",
    "order",
    "run",
    "turtle",
    "let",
    "call",
    "python",
    "left",
    "right",
    "go",
    "right",
    "go",
    "go",
    "stop",
    "right",
    "worked",
    "perfectly",
    "right",
    "hope",
    "enjoyed",
    "project",
    "please",
    "drop",
    "us",
    "like",
    "consider",
    "subscribing",
    "channel",
    "resources",
    "description",
    "hope",
    "see",
    "next",
    "one",
    "bye"
  ],
  "keywords": [
    "create",
    "model",
    "tensorflow",
    "turn",
    "project",
    "data",
    "microphone",
    "use",
    "example",
    "want",
    "built",
    "let",
    "run",
    "see",
    "also",
    "move",
    "turtle",
    "say",
    "right",
    "go",
    "left",
    "stop",
    "get",
    "code",
    "audio",
    "click",
    "machine",
    "first",
    "thing",
    "set",
    "commands",
    "download",
    "file",
    "way",
    "look",
    "like",
    "label",
    "folder",
    "files",
    "yeah",
    "training",
    "decode",
    "step",
    "important",
    "input",
    "wave",
    "um",
    "waveform",
    "print",
    "convert",
    "spectrogram",
    "helper",
    "function",
    "one",
    "plot",
    "build",
    "layer",
    "end",
    "add",
    "save",
    "call",
    "load",
    "prediction",
    "loaded",
    "predict",
    "equals",
    "numpy",
    "underscore",
    "cell",
    "give",
    "name",
    "saved",
    "zip",
    "another",
    "command",
    "sip",
    "dot",
    "colab",
    "copy",
    "need",
    "method",
    "array",
    "frames",
    "buffer",
    "values",
    "tensor",
    "spec",
    "pi",
    "record",
    "import",
    "order"
  ]
}