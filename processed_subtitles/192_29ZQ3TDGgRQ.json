{
  "text": "a portion of this video is sponsored by\ndiscover data science powered by wiley\nmore on them in just a moment\nin this video i'm going to show you how\nyou could build your first machine\nlearning model in python and we're\nstarting right now\nso we're going to build our first\nmachine learning model in python and\nwe're going to do that using the\nscikit-learn library and the coding\nenvironment that we're going to use is\ngoing to be google colab it's free and\nit's quite powerful and so let's fire it\nup\nso typically when i create projects on\ngoogle codelab one of the first thing\nthat i would do is i would give the\nnotebook a name\nso we're going to give it a name of\nfirst project and the next thing is i\nlike to\nadd documentation or text to the\nnotebook so i'll add a text cell here\nand move it up\nor you can also adjust the location of\nit by using the down button here and\nthen i'll double click here and i'll\nclick on this button which is the\nequivalence of a hash symbol which will\ngive the text a heading one if you have\ntwo of it it will be a hitting two so\nthe great thing about using headings is\nthat it allows you to neatly organize\nyour jupyter notebooks so i'll show you\nso here we're also going to make the\ntext bold\nmy first ml project\nand we're going to use two hash symbol\nor you could click this button twice and\nthen i'll also make it bold\nso typically we're going to start the\nproject by loading in a data set so\nlet's find a data set to analyze\nand for that we're going to the github\nof data professor\nand if you scroll down\none of the pinned repository will be\ncalled data click on it\nand then there's a lot of data sets here\nthat i have compiled over the years as a\ncontent creator\nso a reasonably\nsimple\nand unique data set that i would like to\nuse here is the delani data set and i\nthink it's this one let me have a look\nokay so this is a data set of the\nsolubility of molecules and they are\nimportant in the fact that they are\ncrucial for biologists and chemists in\ndetermining whether a molecule is\nsoluble in water or solvent and whether\nthey will be good drug candidates and so\nlet's have a look here you can see that\nthe data set here is in the format of a\ncsv and essentially it is a comma\nseparated value file so if you click on\nthe raw link here\nyou're going to see the native file let\nme zoom in\nand you're going to see that the first\nrow will comprise of the names of the\ncolumns and each word that you see here\nis the name of the column and it\nrepresents a single cell and then you\nhave the comma to separate it and\ntherefore the first word here and the\nsecond word here and the third word and\netc are separated by commas therefore\nhence they are called comma separated\nvalues because the comma will separate\nthe values and so here how many columns\ndo we have we have one two three four\nfive so we have five columns and then we\nhave correspondingly from lines two\nuntil the end of the file they represent\nour data sets\nand so typically what i like to do is i\nnormally will put the y variable or the\ndependent variable or you could also\ncall it the output variable or the y\nvariable so there are so many names for\nit and so they are the variable that you\nwant to predict as a function of the x\nvariables which are the ones here that\nare highlighted so you might be familiar\nwith the equation of y equals to\nf of x right\nso y is the last column here the y\nvariable equals to the function of x so\nwe have several x here so it is a\nmultivariate analysis okay so what we\nwant to do is we're going to import this\nparticular data set so i'll click here\non the raw link and then i'll click here\nin the address bar right click and click\non copy and now we're going to read in\nthe data set into the jupyter notebook\nso the python library that we're going\nto use in order to do that is called\npandas and so we're going to import it\nas follows import pandas as pd so pd is\nsort of a alias for the pandas library\nso from here on we're going to call\npandas as pd as mentioned here and then\nwe're going to read in the data set in\nthe csv format and then we're going to\nassign it to a variable called df and df\nis an acronym for a data frame so let's\ndo it we're going to type in pd because\nwe want to use pandas and then we're\ngoing to use the function from pandas\nlibrary called read csv and then ask the\ninput argument which is inside the\nparenthesis we're going to type in the\naddress of the file or you could also\ntype in the file name so you can see\nhere that we could directly within the\ndata set from the url that we had just\ncopied from github and so let's do it\nand then once read in we're going to\nprint it out by typing in df and i'm\ngoing to hit on the play button here to\nrun the cell and so because it is just\nloading you're going to see that it's\nconnecting so it's going to take a short\nmoment it's initializing and now it's\nconnected and now we're ready now you\ncan see the ram and the disk that are\nassigned to this particular cloud\ncomputing unit that we have here in the\nnotebook\nall right and so once you have run the\ncell you're going to see the output\nwhich is right here which you could also\nclose if you don't want to see it again\nor you could play it again to display it\nagain\nso we're going to see the contents of\nthe csv file in the tabular format here\nyou're going to see here that the first\ncolumn here that you see is the index\nnumber so officially it's not a column\nso it is the index name and here you're\ngoing to see the columns moloch p mo\nweight num rotatable bonds aromatic\nproportion so these four variables\nrepresent the x variables and so when we\nbuild a machine learning model to\npredict the y variable or the log s and\ntherefore log s is equal to the function\nof all of the x variables here so in\nother words we're going to use the four\nvariables here to make a prediction on\nthe log s variable okay and so the next\nthing that we want to do here now is\nthat we want to split the data frame\ninto the x and into the y and so let's\ndo the most simplest thing is to obtain\nthe y variable so let me show you i'll\ncreate some text cell i'll make it both\ndata preparation we have here the first\nlevel here one hash symbol we have here\ntwo hash symbol this is let's make it a\ntwo hat symbol let's make this three\nbecause we want it to be a sub section\nof this one and so we're going to call\nthis data split data separation or data\nseparation as x and y\nokay and so we're going to create the y\nand we're going to type in df and the\nname of the last column here is log s so\nthat's how we're going to get the y and\nlet's see okay and these are the y log s\nand now we want to get only the x\nvariables so we want to remove d log s\nso we're going to do that type in x\nequals to d f dot drop parenthesis and\nthen we're going to see we want to draw\nlog s and we want to have it axis equals\nto 1 because x is equal to 1 will allow\nthe drop function to work with the data\nas column mode however if you use x is\nequal to 0 it will work it in the row\nmode let's see if that's correct\nit is correct you see that the log s now\ngone and that we have four columns here\nand prior to that we have five columns\nso the number of rows remain the same at\n1144\nso now we have x and y in the separated\nform so the next thing that we want to\ndo is we're going to split the data set\nwe're going to split it as the training\nset and the testing set so let's do it\nso remember how many\nwe need we need three hash symbols here\nso we're going to add text cell click it\nthree times and then type data splitting\nand we're gonna use the scikit-learn\npackage for that so you want to type in\nfrom sklearn dot model underscore\nselection and then you want to import\nthe train test split training test split\nand now we're going to type in x train x\ntest y train y test equals to train test\nsplits x and y and we're going to have\nthe test size to be\n0.2 and let me see i want to have the\nrandom state to be assigned a specific\nnumber so that every time i run the code\ncell i will get the same data split so\nwe're going to have random state equals\nto let's say 100 and now we're going to\nrun it so we should now have four new\nvariables here\nand let's have a look at the x screen\nand we see that we have 915 rows and\nfour columns let's have a look at x test\nwe have 229 rows and also four columns\nso x tests or x string will come from\nthe x variable\nso we started out with 1144\nand so 80 of thousand one forty four is\nnine hundred and fifteen and twenty\npercent of one thousand one hundred\nforty four\nis two hundred and twenty nine and so\nthe training set here will have eighty\npercent of the data and the x test here\nor the test set will have 20 of the data\nand i've actually written a blog post\nabout this particular topic of building\nyour machine learning model in python\nusing scikit\nand i've drawn several illustrations\nexplaining about the data split so let\nme go and let me show you and it's this\narticle how to build a machine learning\nmodel a visual guide to learning data\nscience so here we have the x and y that\ni mentioned already and i've color coded\nhere as orange and pink for the x and y\nrespectively scroll down and here here's\nthe data split so here you have the\ninitial data set and then you perform\ndata splitting where eighty percent of\nyour data will go into a container that\nyou call the training set and then the\nremainder or the twenty percent will go\nto a container that you call it the\ntesting center and the typical ratio is\n80 to 20\nfor the training set and the testing set\nso typically we use the training set to\nbuild a model and then we want to use\nthe testing set to serve as sort of a\nunknown data that you want to test\ntraining set for you want to evaluate\nwhether the model that you have built\nusing the training set whether it\nperformed in a robust manner against an\nunknown data that you simulate using the\ntesting set okay\nso before continuing further a quick\nword from our sponsor\nand so a short message from our sponsor\ndiscover data science powered by wiley\nwhich is the premier information hub for\nthe field of data science with in-depth\nguides on careers degrees and\nindustry-leading programming languages\ndiscover data sciences goal is to\nprovide accessible resources\nand materials for prospective students\nand professionals through discover data\nscience expert driven articles and\npublications you'll learn more about\nwhich data science degrees help\naccomplish your professional goals the\ntools and skills that are necessary for\na successful career in the field which\ncareer paths appeal to your personal\ninterests how to land a job in data\nscience and as you know data science\njobs are rapidly expanding on a global\nscale with a growing need for qualified\ndata science professionals it's never\nbeen a better time to earn your degree\nand pursue a career in this rewarding\nfield you can begin your data science\njourney by visiting\ndiscoverdatascience.org powered by wiley\nor visit the link in the description\nbelow alright and so let's continue with\nthe tutorial okay and now we're going to\nbuild the model so let me add a text\ncell and i'll add here to be two hash\nwe'll make it bold let's call it model\nbuilding\nand here we're gonna add another one\nwe're gonna say linear regression\nlet's have it as three hash\nwe have two here we have three here so\nwe have it in a hierarchical form so if\nyou click here you're going to see the\ntable of content of your code and so the\nbenefit of organizing your text cells in\nhierarchical form is that you could see\nthe table of contents here and then you\ncould click through the various sections\nso actually instead of making load data\nhaving two hash symbol i'm gonna make it\ninto having one so it's gonna be the\nsame as the title and then you're gonna\nsee that this one moved to the left a\nbit and now we're gonna make uh data\npreparation to be one as well one hash\nwe're gonna make data modeling to be one\nhash like that and now we're gonna make\ndata separation to be\ntwo\ndata splitting to b2\nlinear regression to b2\nokay and now it looks good to me okay\nand now we're going to continue by\npopulating the code cell underneath the\nlinear regression\nso we're going to use scikit-learn from\nsklearn.linear model import linear\nregression so you're going to see here\nthat scikit-learn has several functions\nthat you could use not only to prepare\nyour data set but also to build a\nmachine learning model and here we're\ngoing to build a typical linear\nregression model and now that we have\nimported the function we're going to\ncreate a variable called lr to stand for\nlinear regression we're going to type in\nlinear regression function here which\nwill be represented by lr and then on\nthe next line we're going to run lr dot\nfits which means that we want to train\nthe empty linear regression model on the\nfollowing data set which we specify to\nbe extreme comma y train and then we run\nit you could click here or what i like\nto do is i like to use the keyboard\nshift enter which is quicker for me and\nthe model is built and now that the\nmodel is built we want to apply this\nparticular model to make a prediction so\nlet me add the text here so that we\ncould annotate it a bit more we could\nsay training the model and make it bold\nfind the model to make prediction\nand we're going to call it y underscore\nlr underscore train underscore pred so\nwe're going to apply the model to make a\nprediction on the training set and the\nprediction to notify that we're going to\nuse spread and then to make note of the\nalgorithm that we're using to train the\nmodel we're gonna specify to be what lr\nhere and then we're gonna start with the\ny underscore so this naming convention\nwill be helpful when we have several\nmachine learning algorithms that we want\nto try out and also whether our\nprediction is made on the training set\nor the testing set so type in\nlr.predict and then i'm going to specify\nxtrain to be the data because we want to\nmake the prediction here on the x strain\nso essentially we're going to do the\nrecall it's going to be making\nprediction on the original data set that\nit has been trained on and so that will\nallow us to evaluate the performance of\nthe algorithm so here we're going to\ncall it y underscore lr underscore test\nunderscore thread equals lr.predicts and\nas you've guessed why underscore test\nlet's do it let's print out the results\ny underscore lr train thread y\nunderscore lr test spread\nactually let's just make it like that\nokay so these are all of the predictions\nhave a look here\nso these represents the 80 of the data\nand there you go the remainder 20\nhas been predicted and\nwe have the predicted value\nand the next part here is we're going to\ncompare the predicted value with the\noriginal value or the actual value and\nwe're going to call the new section here\nto be model performance\nwe're going to say evaluate model\nperformance\nbecause we want to compare x strain here\nno not not x string y train with the\nhere ylr train so you're going to notice\nthat they are the actual value and the\npredicted value\nokay so in just a moment i'm going to\nshow you a scatter plot of these two\nvalues and if they lined up in a\ndiagonal trend line and see whether they\nhave high dispersion or low dispersion\nso if the dispersion is low we will\nexpect that the performance will be good\nokay and so now that we see the data\nthat we are going to use we're now going\nto actually perform the model evaluation\nlet me delete it here first lead delete\nadd the code cell and we're going to\ntype in from\nsklearn.metric import mean underscore\nsquared underscore error and we're gonna\nuse the r2 score function lr underscore\ntrain mean squared error equals to mean\nsquared error function y train\nunderscore y now train thread and so\nthese are the two variables that we have\ntaken a look just a moment ago and now\nwe're going to calculate the mean\nsquared error we're going to calculate\nthe squared correlation coefficient\nusing the r2 score function y train and\nyou guessed ylr train thread\nand so these two blocks are for the\ntraining set now we're going to do the\nsame for the testing set mean squared\nerror one test r underscore test red lr\ntest number two equals r2 or and we have\ny test and the ylr test underscore print\nrun it let's run values here\nokay they're reasonably similar\nperformance here so we could tidy it up\na bit by saying the lr mse and then we\nsay training or to train equal or colon\nprint and then we're going to have this\none here\nwe're gonna reuse it r2 that will be our\ntraining r2 okay here and now we're\ngoing to turn this to be test\ntest\nthis would be test this would be test\nokay\nthere you go so instead of having four\nof these we're going to delete them so\nyou could highlight multiple cells just\nby highlighting it and then you could\nclick on either you want to move it or\nin this case i'm going to delete them\nokay so we see all of it at a glance\nhere however we could tidy up this\nparticular layout a bit more let me show\nyou lr results and then we're going to\ncreate a pandas data frame we're going\nto call this linear regression lr i mean\nmse\nlr test\nmse lr test underscore r2 and then we're\ngoing to transpose it\nand let's have a look\nit looks like that and now we need to\nchange the column names here zero one\ntwo three four so what we want to do\nhere lr results dot columns and we're\ngonna rename it we're gonna call the\nfirst column to be method second column\nto be training mse\nand then we have training our square\nand then we have\ntest\nmse\nand then we have test\nr square\nrun it\nthere you go it looks much cleaner much\ncleaner than this in a tabular form and\nso the great thing about having it in a\npandas data frame like this is that if\nyou evaluate more and more machine\nlearning models like random forest\nk-nearest neighbor support machine\nneural network then you're going to have\na data frame that will allow you to\neasily compare you could also sort by\ncolumn the performance and that will\nhelp you to evaluate which one was the\nbest so here you have already built a\nlinear regression model and we're gonna\ntry out another one which is the random\nforest\nsee\nwe have two\nhash symbol here\nso we're going to\nadd a text cell\nadd two\nand then we're going to call it random\nforest\nrandom forest\nand then you can see it here but notice\nthat you don't see the bold text because\nit needs to be in a hash symbol which\nwill give it a heading one heading two\nheading three you know like the\nhierarchical\nordering so if you want this to appear\nhere then we need to add more so this is\ntwo then we need to make three here add\nthree and you're gonna notice it appears\nhere at three\nit might be good because you could also\nyou know hop around the notebook like\nthis you know click on the various topic\nof your choice and then you could\nskim through your jubilee notebook and\nalso the great thing is that you could\ntake a look at your table of content\nwithout you know scrolling up and down\nto see what's the name of the cell\nbecause sometimes your output might be\nquite long here and it might take some\ntime right but it'll be much quicker to\njust navigate by clicking on the\nparticular link so we can see here that\nwe have training the model here so we\ncould just add section called training\nthe model training the model and then\nlet's just add the headings and then\napplying the model to make a prediction\nthen evaluate model performance so we\ncould move this up a bit so we're going\nto train the model using the random\nforest algorithm so from sklearn dots\nensemble import random forest regressor\nso a pointy note here is that this\nparticular tutorial video makes use of\nregressor because we're building\nregression models and it is because the\ny variable which is called log s let me\nshow you log s right here it's a\nquantitative value so if the y variable\nis quantitative we're going to build a\nregression model whereas if it is\ncategorical then we're going to build a\nclassification model okay so in this\ntutorial the log f is quantitative\ntherefore we built the regression model\nbecause random forest here has two\nversions random force regressor and\nrandom first classifier and here we're\nusing the regressor so we're going to\ncreate a rf variable to house the random\nforest algorithm and we're going to\nspecify some of the parameters for the\nmodel here maximum depth of 2 and the\nrandom state of what about 100 because\nin the prior random state we used 100\nand now we're going to train the model\nso we're going to type in rf fits and\nthen we're going to use xtrain and y\ntrain and then we run it to train the\nmodel and the model is trained we're now\ngoing to make the prediction in here so\nactually we could just copy the code\ncell above here\nscroll down\nand we're going to change this to be rf\nrf lr to be rf part f and now it looks\ncorrect to me and we're going to run it\nokay\nand now we're going to do the model\nperformance evaluation\ni'm going to copy the code here\npaste it we're going to use the mean\nsquared error and we're going to use the\nr2 score and here instead of lr we're\ngoing to replace that to be rf okay so\nreplace all of the lr to be rf and be\nmindful maybe you might type in wrong\nlike me um just a moment ago to be fr so\nour f here will be r f now r here will\nbe r f r f and r did i say r f just a\nmoment ago i meant to say lr and now\nit's rfk let's run it and let's copy the\ncode here which we use to make the table\nand we're going to change this to brf\nagain and this will be random for rest\nrf\nand here r f f show the table okay and\nnow we have two tables we have the\nlinear regression table and we have the\nrandom first table so why don't we\ncombine the two tables together okay let\nme create another level see what level\nis this random for us with the two hash\nso one two model comparison and now\nwe're gonna compare it so we're gonna\ncombine the two results table into one\nand let me see df models equal\npd.concats\nand then i'm going to specify the name\nof lr results and rf results see do i\nhave x equals to zero because i want to\ncombine it in a worldwide manner let me\ntry if it works all right it worked yeah\nso x is equal to zero if you want to\ncombine in a row-wise manner whereas if\nyou use axis one it will be in a\ncolumn-wise manner so here we're\nstacking them on top of one another okay\nso you can see now that the two are in\nthe same table but then the index number\nis a bit off so we need to reindex that\nso let me see if it's as simple as doing\nthis index\nokay but it also added a new column here\nwe just say draw it true oh and now it\nworked we could have also added this at\nthe back of here one again and the\nnumber is correct okay but i'm just\ngoing to separate it so that it looks a\nbit more tidy and you could see it but\nyou know how to make it into a wine\nliner you could just copy here and paste\nit at the end here so here you can see\nthat we have already compared linear\nregression model and the random force\nmodel let's have a look at the\nscikit-learn okay and if you click here\nregression and so here you could find\nother regression model that you like and\nyou could use it to build your own in\nthe colette notebook here and then you\ncould then add the resulting performance\ninto the data frame here to make your\ncomparison and so now we're going to\nperform data visualization to take the\npredicted value and the actual value and\nmake a scatter plot let's do it let's\nsay data visualization of prediction\nresults and we're going to make use of\nthe matplotlib library so we're going to\nimport matplotlib dot pi plot as plt\nlet's say plt\nscatter we're going to assign to the x\naxis y train and to the y axis be l of\ntrain thread and let's make plots okay\nthis is our first attempt\nlet's make it a bit lighter you could\nadjust the darkness of the samples that\nyou see here that are represented by the\ncircles using the alpha option we're\nmaking alpha to be 0.3 so that regions\nthat are highly overlapping will be a\nbit darker whereas those that are not\noverlapping will be lighter color and\nyou're going to see that the x and y\naxis is not yet labeled we're going to\ndo that plt y label predicted log f f c\nf label experimental s okay now we have\nthe labels here why don't we make it\nhave plain width and height make fixed\nsize to be five and five okay why don't\nwe make the dots here to be another\ncolor the color option and we're going\nto use color green and what about a\ntrend line let's add a trendline for\nthat we're going to use numpy get the\nfidget line creating a z variable np dot\npolyfit and then the y train and then lr\ntrain brad p equals z\nthen we're going to color to it\n60.\nokay there we go so we added this red\nline as trendline that are fitted with\nthe data here\nso congratulations you built your first\nmachine learning model in python using\nthe scikit-learn library so you can see\nhow easy it is now to build models in\npython particularly for your tabular\ndata sets and so please feel free to\nbuild more models and you could tweak\nthe learning parameters and as\ni have shown you this api documentation\nfrom scikit-learn you could go through\nthe documentation you could click on an\nalgorithm that you're interested in read\nabout it and look at some of the\nparameters that it allows you to adjust\nso give it some try let me know in the\ncomments down below what models that you\nare building and have fun\nthank you for watching until the end of\nthe video if you reach this far\ndrop a snake emoji so that i know that\nyou're the real one and while you're at\nit please smash the like button\nsubscribe if you haven't already make\nsure to turn on notifications to be\nnotified of the next video and as always\nthe best way to learn data science is to\ndo data science and please enjoy the\njourney\n",
  "words": [
    "portion",
    "video",
    "sponsored",
    "discover",
    "data",
    "science",
    "powered",
    "wiley",
    "moment",
    "video",
    "going",
    "show",
    "could",
    "build",
    "first",
    "machine",
    "learning",
    "model",
    "python",
    "starting",
    "right",
    "going",
    "build",
    "first",
    "machine",
    "learning",
    "model",
    "python",
    "going",
    "using",
    "library",
    "coding",
    "environment",
    "going",
    "use",
    "going",
    "google",
    "colab",
    "free",
    "quite",
    "powerful",
    "let",
    "fire",
    "typically",
    "create",
    "projects",
    "google",
    "codelab",
    "one",
    "first",
    "thing",
    "would",
    "would",
    "give",
    "notebook",
    "name",
    "going",
    "give",
    "name",
    "first",
    "project",
    "next",
    "thing",
    "like",
    "add",
    "documentation",
    "text",
    "notebook",
    "add",
    "text",
    "cell",
    "move",
    "also",
    "adjust",
    "location",
    "using",
    "button",
    "double",
    "click",
    "click",
    "button",
    "equivalence",
    "hash",
    "symbol",
    "give",
    "text",
    "heading",
    "one",
    "two",
    "hitting",
    "two",
    "great",
    "thing",
    "using",
    "headings",
    "allows",
    "neatly",
    "organize",
    "jupyter",
    "notebooks",
    "show",
    "also",
    "going",
    "make",
    "text",
    "bold",
    "first",
    "ml",
    "project",
    "going",
    "use",
    "two",
    "hash",
    "symbol",
    "could",
    "click",
    "button",
    "twice",
    "also",
    "make",
    "bold",
    "typically",
    "going",
    "start",
    "project",
    "loading",
    "data",
    "set",
    "let",
    "find",
    "data",
    "set",
    "analyze",
    "going",
    "github",
    "data",
    "professor",
    "scroll",
    "one",
    "pinned",
    "repository",
    "called",
    "data",
    "click",
    "lot",
    "data",
    "sets",
    "compiled",
    "years",
    "content",
    "creator",
    "reasonably",
    "simple",
    "unique",
    "data",
    "set",
    "would",
    "like",
    "use",
    "delani",
    "data",
    "set",
    "think",
    "one",
    "let",
    "look",
    "okay",
    "data",
    "set",
    "solubility",
    "molecules",
    "important",
    "fact",
    "crucial",
    "biologists",
    "chemists",
    "determining",
    "whether",
    "molecule",
    "soluble",
    "water",
    "solvent",
    "whether",
    "good",
    "drug",
    "candidates",
    "let",
    "look",
    "see",
    "data",
    "set",
    "format",
    "csv",
    "essentially",
    "comma",
    "separated",
    "value",
    "file",
    "click",
    "raw",
    "link",
    "going",
    "see",
    "native",
    "file",
    "let",
    "zoom",
    "going",
    "see",
    "first",
    "row",
    "comprise",
    "names",
    "columns",
    "word",
    "see",
    "name",
    "column",
    "represents",
    "single",
    "cell",
    "comma",
    "separate",
    "therefore",
    "first",
    "word",
    "second",
    "word",
    "third",
    "word",
    "etc",
    "separated",
    "commas",
    "therefore",
    "hence",
    "called",
    "comma",
    "separated",
    "values",
    "comma",
    "separate",
    "values",
    "many",
    "columns",
    "one",
    "two",
    "three",
    "four",
    "five",
    "five",
    "columns",
    "correspondingly",
    "lines",
    "two",
    "end",
    "file",
    "represent",
    "data",
    "sets",
    "typically",
    "like",
    "normally",
    "put",
    "variable",
    "dependent",
    "variable",
    "could",
    "also",
    "call",
    "output",
    "variable",
    "variable",
    "many",
    "names",
    "variable",
    "want",
    "predict",
    "function",
    "x",
    "variables",
    "ones",
    "highlighted",
    "might",
    "familiar",
    "equation",
    "equals",
    "f",
    "x",
    "right",
    "last",
    "column",
    "variable",
    "equals",
    "function",
    "x",
    "several",
    "x",
    "multivariate",
    "analysis",
    "okay",
    "want",
    "going",
    "import",
    "particular",
    "data",
    "set",
    "click",
    "raw",
    "link",
    "click",
    "address",
    "bar",
    "right",
    "click",
    "click",
    "copy",
    "going",
    "read",
    "data",
    "set",
    "jupyter",
    "notebook",
    "python",
    "library",
    "going",
    "use",
    "order",
    "called",
    "pandas",
    "going",
    "import",
    "follows",
    "import",
    "pandas",
    "pd",
    "pd",
    "sort",
    "alias",
    "pandas",
    "library",
    "going",
    "call",
    "pandas",
    "pd",
    "mentioned",
    "going",
    "read",
    "data",
    "set",
    "csv",
    "format",
    "going",
    "assign",
    "variable",
    "called",
    "df",
    "df",
    "acronym",
    "data",
    "frame",
    "let",
    "going",
    "type",
    "pd",
    "want",
    "use",
    "pandas",
    "going",
    "use",
    "function",
    "pandas",
    "library",
    "called",
    "read",
    "csv",
    "ask",
    "input",
    "argument",
    "inside",
    "parenthesis",
    "going",
    "type",
    "address",
    "file",
    "could",
    "also",
    "type",
    "file",
    "name",
    "see",
    "could",
    "directly",
    "within",
    "data",
    "set",
    "url",
    "copied",
    "github",
    "let",
    "read",
    "going",
    "print",
    "typing",
    "df",
    "going",
    "hit",
    "play",
    "button",
    "run",
    "cell",
    "loading",
    "going",
    "see",
    "connecting",
    "going",
    "take",
    "short",
    "moment",
    "initializing",
    "connected",
    "ready",
    "see",
    "ram",
    "disk",
    "assigned",
    "particular",
    "cloud",
    "computing",
    "unit",
    "notebook",
    "right",
    "run",
    "cell",
    "going",
    "see",
    "output",
    "right",
    "could",
    "also",
    "close",
    "want",
    "see",
    "could",
    "play",
    "display",
    "going",
    "see",
    "contents",
    "csv",
    "file",
    "tabular",
    "format",
    "going",
    "see",
    "first",
    "column",
    "see",
    "index",
    "number",
    "officially",
    "column",
    "index",
    "name",
    "going",
    "see",
    "columns",
    "moloch",
    "p",
    "mo",
    "weight",
    "num",
    "rotatable",
    "bonds",
    "aromatic",
    "proportion",
    "four",
    "variables",
    "represent",
    "x",
    "variables",
    "build",
    "machine",
    "learning",
    "model",
    "predict",
    "variable",
    "log",
    "therefore",
    "log",
    "equal",
    "function",
    "x",
    "variables",
    "words",
    "going",
    "use",
    "four",
    "variables",
    "make",
    "prediction",
    "log",
    "variable",
    "okay",
    "next",
    "thing",
    "want",
    "want",
    "split",
    "data",
    "frame",
    "x",
    "let",
    "simplest",
    "thing",
    "obtain",
    "variable",
    "let",
    "show",
    "create",
    "text",
    "cell",
    "make",
    "data",
    "preparation",
    "first",
    "level",
    "one",
    "hash",
    "symbol",
    "two",
    "hash",
    "symbol",
    "let",
    "make",
    "two",
    "hat",
    "symbol",
    "let",
    "make",
    "three",
    "want",
    "sub",
    "section",
    "one",
    "going",
    "call",
    "data",
    "split",
    "data",
    "separation",
    "data",
    "separation",
    "x",
    "okay",
    "going",
    "create",
    "going",
    "type",
    "df",
    "name",
    "last",
    "column",
    "log",
    "going",
    "get",
    "let",
    "see",
    "okay",
    "log",
    "want",
    "get",
    "x",
    "variables",
    "want",
    "remove",
    "log",
    "going",
    "type",
    "x",
    "equals",
    "f",
    "dot",
    "drop",
    "parenthesis",
    "going",
    "see",
    "want",
    "draw",
    "log",
    "want",
    "axis",
    "equals",
    "1",
    "x",
    "equal",
    "1",
    "allow",
    "drop",
    "function",
    "work",
    "data",
    "column",
    "mode",
    "however",
    "use",
    "x",
    "equal",
    "0",
    "work",
    "row",
    "mode",
    "let",
    "see",
    "correct",
    "correct",
    "see",
    "log",
    "gone",
    "four",
    "columns",
    "prior",
    "five",
    "columns",
    "number",
    "rows",
    "remain",
    "1144",
    "x",
    "separated",
    "form",
    "next",
    "thing",
    "want",
    "going",
    "split",
    "data",
    "set",
    "going",
    "split",
    "training",
    "set",
    "testing",
    "set",
    "let",
    "remember",
    "many",
    "need",
    "need",
    "three",
    "hash",
    "symbols",
    "going",
    "add",
    "text",
    "cell",
    "click",
    "three",
    "times",
    "type",
    "data",
    "splitting",
    "gon",
    "na",
    "use",
    "package",
    "want",
    "type",
    "sklearn",
    "dot",
    "model",
    "underscore",
    "selection",
    "want",
    "import",
    "train",
    "test",
    "split",
    "training",
    "test",
    "split",
    "going",
    "type",
    "x",
    "train",
    "x",
    "test",
    "train",
    "test",
    "equals",
    "train",
    "test",
    "splits",
    "x",
    "going",
    "test",
    "size",
    "let",
    "see",
    "want",
    "random",
    "state",
    "assigned",
    "specific",
    "number",
    "every",
    "time",
    "run",
    "code",
    "cell",
    "get",
    "data",
    "split",
    "going",
    "random",
    "state",
    "equals",
    "let",
    "say",
    "100",
    "going",
    "run",
    "four",
    "new",
    "variables",
    "let",
    "look",
    "x",
    "screen",
    "see",
    "915",
    "rows",
    "four",
    "columns",
    "let",
    "look",
    "x",
    "test",
    "229",
    "rows",
    "also",
    "four",
    "columns",
    "x",
    "tests",
    "x",
    "string",
    "come",
    "x",
    "variable",
    "started",
    "1144",
    "80",
    "thousand",
    "one",
    "forty",
    "four",
    "nine",
    "hundred",
    "fifteen",
    "twenty",
    "percent",
    "one",
    "thousand",
    "one",
    "hundred",
    "forty",
    "four",
    "two",
    "hundred",
    "twenty",
    "nine",
    "training",
    "set",
    "eighty",
    "percent",
    "data",
    "x",
    "test",
    "test",
    "set",
    "20",
    "data",
    "actually",
    "written",
    "blog",
    "post",
    "particular",
    "topic",
    "building",
    "machine",
    "learning",
    "model",
    "python",
    "using",
    "scikit",
    "drawn",
    "several",
    "illustrations",
    "explaining",
    "data",
    "split",
    "let",
    "go",
    "let",
    "show",
    "article",
    "build",
    "machine",
    "learning",
    "model",
    "visual",
    "guide",
    "learning",
    "data",
    "science",
    "x",
    "mentioned",
    "already",
    "color",
    "coded",
    "orange",
    "pink",
    "x",
    "respectively",
    "scroll",
    "data",
    "split",
    "initial",
    "data",
    "set",
    "perform",
    "data",
    "splitting",
    "eighty",
    "percent",
    "data",
    "go",
    "container",
    "call",
    "training",
    "set",
    "remainder",
    "twenty",
    "percent",
    "go",
    "container",
    "call",
    "testing",
    "center",
    "typical",
    "ratio",
    "80",
    "20",
    "training",
    "set",
    "testing",
    "set",
    "typically",
    "use",
    "training",
    "set",
    "build",
    "model",
    "want",
    "use",
    "testing",
    "set",
    "serve",
    "sort",
    "unknown",
    "data",
    "want",
    "test",
    "training",
    "set",
    "want",
    "evaluate",
    "whether",
    "model",
    "built",
    "using",
    "training",
    "set",
    "whether",
    "performed",
    "robust",
    "manner",
    "unknown",
    "data",
    "simulate",
    "using",
    "testing",
    "set",
    "okay",
    "continuing",
    "quick",
    "word",
    "sponsor",
    "short",
    "message",
    "sponsor",
    "discover",
    "data",
    "science",
    "powered",
    "wiley",
    "premier",
    "information",
    "hub",
    "field",
    "data",
    "science",
    "guides",
    "careers",
    "degrees",
    "programming",
    "languages",
    "discover",
    "data",
    "sciences",
    "goal",
    "provide",
    "accessible",
    "resources",
    "materials",
    "prospective",
    "students",
    "professionals",
    "discover",
    "data",
    "science",
    "expert",
    "driven",
    "articles",
    "publications",
    "learn",
    "data",
    "science",
    "degrees",
    "help",
    "accomplish",
    "professional",
    "goals",
    "tools",
    "skills",
    "necessary",
    "successful",
    "career",
    "field",
    "career",
    "paths",
    "appeal",
    "personal",
    "interests",
    "land",
    "job",
    "data",
    "science",
    "know",
    "data",
    "science",
    "jobs",
    "rapidly",
    "expanding",
    "global",
    "scale",
    "growing",
    "need",
    "qualified",
    "data",
    "science",
    "professionals",
    "never",
    "better",
    "time",
    "earn",
    "degree",
    "pursue",
    "career",
    "rewarding",
    "field",
    "begin",
    "data",
    "science",
    "journey",
    "visiting",
    "powered",
    "wiley",
    "visit",
    "link",
    "description",
    "alright",
    "let",
    "continue",
    "tutorial",
    "okay",
    "going",
    "build",
    "model",
    "let",
    "add",
    "text",
    "cell",
    "add",
    "two",
    "hash",
    "make",
    "bold",
    "let",
    "call",
    "model",
    "building",
    "gon",
    "na",
    "add",
    "another",
    "one",
    "gon",
    "na",
    "say",
    "linear",
    "regression",
    "let",
    "three",
    "hash",
    "two",
    "three",
    "hierarchical",
    "form",
    "click",
    "going",
    "see",
    "table",
    "content",
    "code",
    "benefit",
    "organizing",
    "text",
    "cells",
    "hierarchical",
    "form",
    "could",
    "see",
    "table",
    "contents",
    "could",
    "click",
    "various",
    "sections",
    "actually",
    "instead",
    "making",
    "load",
    "data",
    "two",
    "hash",
    "symbol",
    "gon",
    "na",
    "make",
    "one",
    "gon",
    "na",
    "title",
    "gon",
    "na",
    "see",
    "one",
    "moved",
    "left",
    "bit",
    "gon",
    "na",
    "make",
    "uh",
    "data",
    "preparation",
    "one",
    "well",
    "one",
    "hash",
    "gon",
    "na",
    "make",
    "data",
    "modeling",
    "one",
    "hash",
    "like",
    "gon",
    "na",
    "make",
    "data",
    "separation",
    "two",
    "data",
    "splitting",
    "b2",
    "linear",
    "regression",
    "b2",
    "okay",
    "looks",
    "good",
    "okay",
    "going",
    "continue",
    "populating",
    "code",
    "cell",
    "underneath",
    "linear",
    "regression",
    "going",
    "use",
    "model",
    "import",
    "linear",
    "regression",
    "going",
    "see",
    "several",
    "functions",
    "could",
    "use",
    "prepare",
    "data",
    "set",
    "also",
    "build",
    "machine",
    "learning",
    "model",
    "going",
    "build",
    "typical",
    "linear",
    "regression",
    "model",
    "imported",
    "function",
    "going",
    "create",
    "variable",
    "called",
    "lr",
    "stand",
    "linear",
    "regression",
    "going",
    "type",
    "linear",
    "regression",
    "function",
    "represented",
    "lr",
    "next",
    "line",
    "going",
    "run",
    "lr",
    "dot",
    "fits",
    "means",
    "want",
    "train",
    "empty",
    "linear",
    "regression",
    "model",
    "following",
    "data",
    "set",
    "specify",
    "extreme",
    "comma",
    "train",
    "run",
    "could",
    "click",
    "like",
    "like",
    "use",
    "keyboard",
    "shift",
    "enter",
    "quicker",
    "model",
    "built",
    "model",
    "built",
    "want",
    "apply",
    "particular",
    "model",
    "make",
    "prediction",
    "let",
    "add",
    "text",
    "could",
    "annotate",
    "bit",
    "could",
    "say",
    "training",
    "model",
    "make",
    "bold",
    "find",
    "model",
    "make",
    "prediction",
    "going",
    "call",
    "underscore",
    "lr",
    "underscore",
    "train",
    "underscore",
    "pred",
    "going",
    "apply",
    "model",
    "make",
    "prediction",
    "training",
    "set",
    "prediction",
    "notify",
    "going",
    "use",
    "spread",
    "make",
    "note",
    "algorithm",
    "using",
    "train",
    "model",
    "gon",
    "na",
    "specify",
    "lr",
    "gon",
    "na",
    "start",
    "underscore",
    "naming",
    "convention",
    "helpful",
    "several",
    "machine",
    "learning",
    "algorithms",
    "want",
    "try",
    "also",
    "whether",
    "prediction",
    "made",
    "training",
    "set",
    "testing",
    "set",
    "type",
    "going",
    "specify",
    "xtrain",
    "data",
    "want",
    "make",
    "prediction",
    "x",
    "strain",
    "essentially",
    "going",
    "recall",
    "going",
    "making",
    "prediction",
    "original",
    "data",
    "set",
    "trained",
    "allow",
    "us",
    "evaluate",
    "performance",
    "algorithm",
    "going",
    "call",
    "underscore",
    "lr",
    "underscore",
    "test",
    "underscore",
    "thread",
    "equals",
    "guessed",
    "underscore",
    "test",
    "let",
    "let",
    "print",
    "results",
    "underscore",
    "lr",
    "train",
    "thread",
    "underscore",
    "lr",
    "test",
    "spread",
    "actually",
    "let",
    "make",
    "like",
    "okay",
    "predictions",
    "look",
    "represents",
    "80",
    "data",
    "go",
    "remainder",
    "20",
    "predicted",
    "predicted",
    "value",
    "next",
    "part",
    "going",
    "compare",
    "predicted",
    "value",
    "original",
    "value",
    "actual",
    "value",
    "going",
    "call",
    "new",
    "section",
    "model",
    "performance",
    "going",
    "say",
    "evaluate",
    "model",
    "performance",
    "want",
    "compare",
    "x",
    "strain",
    "x",
    "string",
    "train",
    "ylr",
    "train",
    "going",
    "notice",
    "actual",
    "value",
    "predicted",
    "value",
    "okay",
    "moment",
    "going",
    "show",
    "scatter",
    "plot",
    "two",
    "values",
    "lined",
    "diagonal",
    "trend",
    "line",
    "see",
    "whether",
    "high",
    "dispersion",
    "low",
    "dispersion",
    "dispersion",
    "low",
    "expect",
    "performance",
    "good",
    "okay",
    "see",
    "data",
    "going",
    "use",
    "going",
    "actually",
    "perform",
    "model",
    "evaluation",
    "let",
    "delete",
    "first",
    "lead",
    "delete",
    "add",
    "code",
    "cell",
    "going",
    "type",
    "import",
    "mean",
    "underscore",
    "squared",
    "underscore",
    "error",
    "gon",
    "na",
    "use",
    "r2",
    "score",
    "function",
    "lr",
    "underscore",
    "train",
    "mean",
    "squared",
    "error",
    "equals",
    "mean",
    "squared",
    "error",
    "function",
    "train",
    "underscore",
    "train",
    "thread",
    "two",
    "variables",
    "taken",
    "look",
    "moment",
    "ago",
    "going",
    "calculate",
    "mean",
    "squared",
    "error",
    "going",
    "calculate",
    "squared",
    "correlation",
    "coefficient",
    "using",
    "r2",
    "score",
    "function",
    "train",
    "guessed",
    "ylr",
    "train",
    "thread",
    "two",
    "blocks",
    "training",
    "set",
    "going",
    "testing",
    "set",
    "mean",
    "squared",
    "error",
    "one",
    "test",
    "r",
    "underscore",
    "test",
    "red",
    "lr",
    "test",
    "number",
    "two",
    "equals",
    "r2",
    "test",
    "ylr",
    "test",
    "underscore",
    "print",
    "run",
    "let",
    "run",
    "values",
    "okay",
    "reasonably",
    "similar",
    "performance",
    "could",
    "tidy",
    "bit",
    "saying",
    "lr",
    "mse",
    "say",
    "training",
    "train",
    "equal",
    "colon",
    "print",
    "going",
    "one",
    "gon",
    "na",
    "reuse",
    "r2",
    "training",
    "r2",
    "okay",
    "going",
    "turn",
    "test",
    "test",
    "would",
    "test",
    "would",
    "test",
    "okay",
    "go",
    "instead",
    "four",
    "going",
    "delete",
    "could",
    "highlight",
    "multiple",
    "cells",
    "highlighting",
    "could",
    "click",
    "either",
    "want",
    "move",
    "case",
    "going",
    "delete",
    "okay",
    "see",
    "glance",
    "however",
    "could",
    "tidy",
    "particular",
    "layout",
    "bit",
    "let",
    "show",
    "lr",
    "results",
    "going",
    "create",
    "pandas",
    "data",
    "frame",
    "going",
    "call",
    "linear",
    "regression",
    "lr",
    "mean",
    "mse",
    "lr",
    "test",
    "mse",
    "lr",
    "test",
    "underscore",
    "r2",
    "going",
    "transpose",
    "let",
    "look",
    "looks",
    "like",
    "need",
    "change",
    "column",
    "names",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "want",
    "lr",
    "results",
    "dot",
    "columns",
    "gon",
    "na",
    "rename",
    "gon",
    "na",
    "call",
    "first",
    "column",
    "method",
    "second",
    "column",
    "training",
    "mse",
    "training",
    "square",
    "test",
    "mse",
    "test",
    "r",
    "square",
    "run",
    "go",
    "looks",
    "much",
    "cleaner",
    "much",
    "cleaner",
    "tabular",
    "form",
    "great",
    "thing",
    "pandas",
    "data",
    "frame",
    "like",
    "evaluate",
    "machine",
    "learning",
    "models",
    "like",
    "random",
    "forest",
    "neighbor",
    "support",
    "machine",
    "neural",
    "network",
    "going",
    "data",
    "frame",
    "allow",
    "easily",
    "compare",
    "could",
    "also",
    "sort",
    "column",
    "performance",
    "help",
    "evaluate",
    "one",
    "best",
    "already",
    "built",
    "linear",
    "regression",
    "model",
    "gon",
    "na",
    "try",
    "another",
    "one",
    "random",
    "forest",
    "see",
    "two",
    "hash",
    "symbol",
    "going",
    "add",
    "text",
    "cell",
    "add",
    "two",
    "going",
    "call",
    "random",
    "forest",
    "random",
    "forest",
    "see",
    "notice",
    "see",
    "bold",
    "text",
    "needs",
    "hash",
    "symbol",
    "give",
    "heading",
    "one",
    "heading",
    "two",
    "heading",
    "three",
    "know",
    "like",
    "hierarchical",
    "ordering",
    "want",
    "appear",
    "need",
    "add",
    "two",
    "need",
    "make",
    "three",
    "add",
    "three",
    "gon",
    "na",
    "notice",
    "appears",
    "three",
    "might",
    "good",
    "could",
    "also",
    "know",
    "hop",
    "around",
    "notebook",
    "like",
    "know",
    "click",
    "various",
    "topic",
    "choice",
    "could",
    "skim",
    "jubilee",
    "notebook",
    "also",
    "great",
    "thing",
    "could",
    "take",
    "look",
    "table",
    "content",
    "without",
    "know",
    "scrolling",
    "see",
    "name",
    "cell",
    "sometimes",
    "output",
    "might",
    "quite",
    "long",
    "might",
    "take",
    "time",
    "right",
    "much",
    "quicker",
    "navigate",
    "clicking",
    "particular",
    "link",
    "see",
    "training",
    "model",
    "could",
    "add",
    "section",
    "called",
    "training",
    "model",
    "training",
    "model",
    "let",
    "add",
    "headings",
    "applying",
    "model",
    "make",
    "prediction",
    "evaluate",
    "model",
    "performance",
    "could",
    "move",
    "bit",
    "going",
    "train",
    "model",
    "using",
    "random",
    "forest",
    "algorithm",
    "sklearn",
    "dots",
    "ensemble",
    "import",
    "random",
    "forest",
    "regressor",
    "pointy",
    "note",
    "particular",
    "tutorial",
    "video",
    "makes",
    "use",
    "regressor",
    "building",
    "regression",
    "models",
    "variable",
    "called",
    "log",
    "let",
    "show",
    "log",
    "right",
    "quantitative",
    "value",
    "variable",
    "quantitative",
    "going",
    "build",
    "regression",
    "model",
    "whereas",
    "categorical",
    "going",
    "build",
    "classification",
    "model",
    "okay",
    "tutorial",
    "log",
    "f",
    "quantitative",
    "therefore",
    "built",
    "regression",
    "model",
    "random",
    "forest",
    "two",
    "versions",
    "random",
    "force",
    "regressor",
    "random",
    "first",
    "classifier",
    "using",
    "regressor",
    "going",
    "create",
    "rf",
    "variable",
    "house",
    "random",
    "forest",
    "algorithm",
    "going",
    "specify",
    "parameters",
    "model",
    "maximum",
    "depth",
    "2",
    "random",
    "state",
    "100",
    "prior",
    "random",
    "state",
    "used",
    "100",
    "going",
    "train",
    "model",
    "going",
    "type",
    "rf",
    "fits",
    "going",
    "use",
    "xtrain",
    "train",
    "run",
    "train",
    "model",
    "model",
    "trained",
    "going",
    "make",
    "prediction",
    "actually",
    "could",
    "copy",
    "code",
    "cell",
    "scroll",
    "going",
    "change",
    "rf",
    "rf",
    "lr",
    "rf",
    "part",
    "f",
    "looks",
    "correct",
    "going",
    "run",
    "okay",
    "going",
    "model",
    "performance",
    "evaluation",
    "going",
    "copy",
    "code",
    "paste",
    "going",
    "use",
    "mean",
    "squared",
    "error",
    "going",
    "use",
    "r2",
    "score",
    "instead",
    "lr",
    "going",
    "replace",
    "rf",
    "okay",
    "replace",
    "lr",
    "rf",
    "mindful",
    "maybe",
    "might",
    "type",
    "wrong",
    "like",
    "um",
    "moment",
    "ago",
    "fr",
    "f",
    "r",
    "f",
    "r",
    "r",
    "f",
    "r",
    "f",
    "r",
    "say",
    "r",
    "f",
    "moment",
    "ago",
    "meant",
    "say",
    "lr",
    "rfk",
    "let",
    "run",
    "let",
    "copy",
    "code",
    "use",
    "make",
    "table",
    "going",
    "change",
    "brf",
    "random",
    "rest",
    "rf",
    "r",
    "f",
    "f",
    "show",
    "table",
    "okay",
    "two",
    "tables",
    "linear",
    "regression",
    "table",
    "random",
    "first",
    "table",
    "combine",
    "two",
    "tables",
    "together",
    "okay",
    "let",
    "create",
    "another",
    "level",
    "see",
    "level",
    "random",
    "us",
    "two",
    "hash",
    "one",
    "two",
    "model",
    "comparison",
    "gon",
    "na",
    "compare",
    "gon",
    "na",
    "combine",
    "two",
    "results",
    "table",
    "one",
    "let",
    "see",
    "df",
    "models",
    "equal",
    "going",
    "specify",
    "name",
    "lr",
    "results",
    "rf",
    "results",
    "see",
    "x",
    "equals",
    "zero",
    "want",
    "combine",
    "worldwide",
    "manner",
    "let",
    "try",
    "works",
    "right",
    "worked",
    "yeah",
    "x",
    "equal",
    "zero",
    "want",
    "combine",
    "manner",
    "whereas",
    "use",
    "axis",
    "one",
    "manner",
    "stacking",
    "top",
    "one",
    "another",
    "okay",
    "see",
    "two",
    "table",
    "index",
    "number",
    "bit",
    "need",
    "reindex",
    "let",
    "see",
    "simple",
    "index",
    "okay",
    "also",
    "added",
    "new",
    "column",
    "say",
    "draw",
    "true",
    "oh",
    "worked",
    "could",
    "also",
    "added",
    "back",
    "one",
    "number",
    "correct",
    "okay",
    "going",
    "separate",
    "looks",
    "bit",
    "tidy",
    "could",
    "see",
    "know",
    "make",
    "wine",
    "liner",
    "could",
    "copy",
    "paste",
    "end",
    "see",
    "already",
    "compared",
    "linear",
    "regression",
    "model",
    "random",
    "force",
    "model",
    "let",
    "look",
    "okay",
    "click",
    "regression",
    "could",
    "find",
    "regression",
    "model",
    "like",
    "could",
    "use",
    "build",
    "colette",
    "notebook",
    "could",
    "add",
    "resulting",
    "performance",
    "data",
    "frame",
    "make",
    "comparison",
    "going",
    "perform",
    "data",
    "visualization",
    "take",
    "predicted",
    "value",
    "actual",
    "value",
    "make",
    "scatter",
    "plot",
    "let",
    "let",
    "say",
    "data",
    "visualization",
    "prediction",
    "results",
    "going",
    "make",
    "use",
    "matplotlib",
    "library",
    "going",
    "import",
    "matplotlib",
    "dot",
    "pi",
    "plot",
    "plt",
    "let",
    "say",
    "plt",
    "scatter",
    "going",
    "assign",
    "x",
    "axis",
    "train",
    "axis",
    "l",
    "train",
    "thread",
    "let",
    "make",
    "plots",
    "okay",
    "first",
    "attempt",
    "let",
    "make",
    "bit",
    "lighter",
    "could",
    "adjust",
    "darkness",
    "samples",
    "see",
    "represented",
    "circles",
    "using",
    "alpha",
    "option",
    "making",
    "alpha",
    "regions",
    "highly",
    "overlapping",
    "bit",
    "darker",
    "whereas",
    "overlapping",
    "lighter",
    "color",
    "going",
    "see",
    "x",
    "axis",
    "yet",
    "labeled",
    "going",
    "plt",
    "label",
    "predicted",
    "log",
    "f",
    "f",
    "c",
    "f",
    "label",
    "experimental",
    "okay",
    "labels",
    "make",
    "plain",
    "width",
    "height",
    "make",
    "fixed",
    "size",
    "five",
    "five",
    "okay",
    "make",
    "dots",
    "another",
    "color",
    "color",
    "option",
    "going",
    "use",
    "color",
    "green",
    "trend",
    "line",
    "let",
    "add",
    "trendline",
    "going",
    "use",
    "numpy",
    "get",
    "fidget",
    "line",
    "creating",
    "z",
    "variable",
    "np",
    "dot",
    "polyfit",
    "train",
    "lr",
    "train",
    "brad",
    "p",
    "equals",
    "z",
    "going",
    "color",
    "okay",
    "go",
    "added",
    "red",
    "line",
    "trendline",
    "fitted",
    "data",
    "congratulations",
    "built",
    "first",
    "machine",
    "learning",
    "model",
    "python",
    "using",
    "library",
    "see",
    "easy",
    "build",
    "models",
    "python",
    "particularly",
    "tabular",
    "data",
    "sets",
    "please",
    "feel",
    "free",
    "build",
    "models",
    "could",
    "tweak",
    "learning",
    "parameters",
    "shown",
    "api",
    "documentation",
    "could",
    "go",
    "documentation",
    "could",
    "click",
    "algorithm",
    "interested",
    "read",
    "look",
    "parameters",
    "allows",
    "adjust",
    "give",
    "try",
    "let",
    "know",
    "comments",
    "models",
    "building",
    "fun",
    "thank",
    "watching",
    "end",
    "video",
    "reach",
    "far",
    "drop",
    "snake",
    "emoji",
    "know",
    "real",
    "one",
    "please",
    "smash",
    "like",
    "button",
    "subscribe",
    "already",
    "make",
    "sure",
    "turn",
    "notifications",
    "notified",
    "next",
    "video",
    "always",
    "best",
    "way",
    "learn",
    "data",
    "science",
    "data",
    "science",
    "please",
    "enjoy",
    "journey"
  ],
  "keywords": [
    "video",
    "discover",
    "data",
    "science",
    "moment",
    "going",
    "show",
    "could",
    "build",
    "first",
    "machine",
    "learning",
    "model",
    "python",
    "right",
    "using",
    "library",
    "use",
    "let",
    "typically",
    "create",
    "one",
    "thing",
    "would",
    "give",
    "notebook",
    "name",
    "next",
    "like",
    "add",
    "text",
    "cell",
    "also",
    "button",
    "click",
    "hash",
    "symbol",
    "heading",
    "two",
    "make",
    "bold",
    "set",
    "called",
    "look",
    "okay",
    "whether",
    "good",
    "see",
    "csv",
    "comma",
    "separated",
    "value",
    "file",
    "link",
    "columns",
    "word",
    "column",
    "therefore",
    "values",
    "three",
    "four",
    "five",
    "variable",
    "call",
    "want",
    "function",
    "x",
    "variables",
    "might",
    "equals",
    "f",
    "several",
    "import",
    "particular",
    "copy",
    "read",
    "pandas",
    "pd",
    "df",
    "frame",
    "type",
    "print",
    "run",
    "take",
    "index",
    "number",
    "log",
    "equal",
    "prediction",
    "split",
    "get",
    "dot",
    "axis",
    "correct",
    "form",
    "training",
    "testing",
    "need",
    "gon",
    "na",
    "underscore",
    "train",
    "test",
    "random",
    "state",
    "code",
    "say",
    "percent",
    "actually",
    "building",
    "go",
    "already",
    "color",
    "evaluate",
    "built",
    "manner",
    "know",
    "another",
    "linear",
    "regression",
    "table",
    "bit",
    "looks",
    "lr",
    "line",
    "specify",
    "algorithm",
    "try",
    "performance",
    "thread",
    "results",
    "predicted",
    "compare",
    "delete",
    "mean",
    "squared",
    "error",
    "r2",
    "r",
    "mse",
    "models",
    "forest",
    "regressor",
    "rf",
    "combine"
  ]
}