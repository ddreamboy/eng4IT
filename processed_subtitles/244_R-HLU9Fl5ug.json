{
  "text": "hi I'm Joe today I'm going to cover\npython lists tles sets and dictionaries\nnow the list is the most widely used\ndata structure in Python it's very\ngeneral purpose similar to an array in\nJava and it covers most of what you\nwould need but Tuple sets and\ndictionaries have some advantages in\nspecific areas and are very very useful\ndata structures so the list is a\nsequence type it's sortable the tupple\nis mutable which means you can't change\nadd or remove items in a tupple once\nit's been created so it's useful for\nfixed data andle is also a sequence type\nwhich we'll explain in a second the set\nyou can store non duplicate items so\nit's good for storing unique items in a\nset and it's also very good for doing\nmathematical comparisons to sets Union\nintersect those kinds of set operations\ndictionaries contain key value pairs\nit's like an associative array similar\nto a Java hashmap and both sets and\ndictionaries are unordered which means\nthey're not sortable and they're in\nrandom order and one amazing thing about\nthese data structures in Python is that\nthey can hold any data type so they\ncould hold integers floating Point\nvalues strings or other object types and\neven other lists tupples sets and\ndictionaries and the data types don't\nhave to be homogeneous so you can mix\nand match data types within a single\nlist or within a set or within a\ndictionary now sequences include list\nthis tles and also strings there are a\nbunch of different functions that are\napplicable to all three of these data\ntypes and we're going to go into them in\ndetail so indexing you can access any\nitem in the sequence instantly using its\nindex if you have a million items in\nyour list and you want to access an item\ninstantly you can do that if you know as\nindex so a string is a sequence of\nletters let's say we want to access one\nof the items in the word frog we can say\nprint X of 3 using the square bracket\nfor the three and that gives us the\nthird index starting from index zero for\nf the G is going to be index 3 and in\nour list if we say we want item with\nindex one that's going to give us cow\nthe second item in the list slicing\nallows us to slice out sub strings and\nsub lists and subtles using indexes and\nthe syntax is using square brackets\nstart End plus one and step and these\nare all optional I'll cover some\nexamples that explain that and these are\napplicable to string tles and lists but\nin this example I'm just going to use\nthe word computer which is a string so\nlet's say we have X from 1 to 4 using a\ncolon and this will return to us items 1\nto 3 which is om if we want uh to slice\nitems 1 to six this actually cuts off at\nfive and it'll give us every other item\nsince we have a step of two here so\nitems 1 3 and 5 opt and x with uh items\nthree to basically uh no end right we\ndidn't put an item after the colon so\nthat's going to give us three onward so\np e r if we don't put anything before\nthe colon then it starts at zero so this\nwill give us items 1 through 4 or rather\n0 through 4 and if we want to use\nnegative numbers here we can use - 1\nwhich will give us the last item in a\nlist or a sequence so X of -3 colon\nnothing is going to give us the last\nthree items in a sequence and then if we\nhave X colon -2 will give us everything\nexcept the last two items in the in the\nsequence adding and concatenating we can\ndo using the plus symbol so we can\ncombine two sequences of the same type\nonly so if we have two strings that we\nwant to combine we can use a plus sign\nto add them together and if we have two\nlists we want to merge together we can\nuse the plus sign and will give us one\nlist with three items in it multiplying\nwe can use the Star Sign to multiply\nsequences again of the same type so if\nwe have a bug it will multiply the word\nbug three times and give us bug bug bug\nor if we have a list with an eight and\nfive in it we want to multiply that by\nthree it will give us 85 three times in\nour list checking membership test\nwhether or not an item is in or not in a\nsequence using keywords in and not in so\nit's very simple to use so if we have x\nequals bug and we want to print u n x we\nprint true If U is actually in X and\nit'll print false if it's not so in our\nlist Pig Cow Horse print cow not in X we\nprint true if cow is not an X however\ncow is in X so it prints false so that's\nchecking membership using the in and not\nin keywords iterating we can iterate\nthrough the items in a sequence using\nfor Loop so if we have list of integers\nin X we can say four item or any any\nvariable name in X print or whatever we\nwant to do to that variable name it\nreturns to us one list item at a time\neach Loop iteration and if we need both\nthe index and the item we can use the\nenumerate function so we say for index\nand item we basically need two variable\nnames here the first one is going to be\nindex second is going to be the value or\nthe item uh in enumerate X and then we\ncan do inside this for Loop we can do\nwhatever we want with those two\nvariables here I just have a print\nstatement that prints the index followed\nby the value number of items we'll count\nthe number of items in a sequence and we\ndo that using the Len function which is\nshort for length and we can do the same\nthing in a list prints the length of a\nlist three items in this list minimum\nfinds the minimum number lexical\ngraphically which means Alpha\nnumerically but this only works when all\nof the items in the list are either\nalpha or numeric you can mix and match\nintegers and floating Point values but\nyou cannot have both strings and\nintegers so if x equals bug we want to\nfind the minimum the minimum is B we\nhave a list of three strings we're going\nto find the lowest one which is C Cal So\nprce Cal maximum is going to find the\nmaximum item in a sequence again lexical\ngraphically and they have to be all the\nsame type either numeric or string type\nso if we take the maximum of bug we get\nU and if we take the maximum of pig cow\nand horse we're going to get Pig because\nthat comes last\nalphabetically sum we can find the sum\nof the items in a sequence if they're\nnumeric type so 5 S and bug is going to\ngive us an error because bug is is not a\nnumeric type but if we take the sum of 2\n5 8 and 12 it's going to print 27 or if\nwe want to do a slice we can say hey I\njust want the sum of the last two items\nof X and this here we'll print 20 we can\nsort the items of the list this sorted\nfunction actually returns a new list\nwithout changing the original List It\nreturns a new list in sorted order so\nbug will return to letters of bug in a\nlist in sorted order bgu and our list\nPig Cow Horse if we call sorted of X\nit's going to return Cow Horse Pig and\nmind you the original X is still\nunchanged count of item Returns the\ncount of a specific item in the sequence\nso here we're looking for the count x.\ncount of P will tell us there are two PS\nin\nhippo and x. count of cow will tell us\nhow many times the word cow appears in\nour list X if we want to find the index\nof an item the index function actually\nReturns the index of the first\noccurrence of an item so if the item is\nin the list or sequence multiple times\nit Returns the index of the first\noccurrence so here the H is zero the I\nis 1 the P the first p is 2 so x. index\nof p is going to return two and here we\nfind the first cow which has an index of\none unpacking if we want to assign all\nthe items in a sequence to a set of\nvariables we can say a comma B comma c =\nx and then all of the strings in X will\nbe assigned in order to the variables\nhere on the left so Pig assigned to a\ncow assigned to B and horse assigned to\nC but this only works if the number of\nvariables exactly matches the length of\nyour list so here we have three items we\nmust have three\nvariables so that covers General\nfunctions for sequence types then let's\ntalk about specific list functions so\nthere are a few different ways to create\nlists we can say x equals list\nparentheses uh we can say x equals in\nsquare brackets whatever list I it we\nwant to add to populate the list and\nagain we can mix and match uh data types\nso we have here some strings integers\nfloating points and we can say x equals\nlist and in parentheses a Tule and we'll\nget a list from the items in the Tuple\nthere's a really cool function called\nlist comprehension so we can create a\nnew list using what is returned by the\nfor Loop for m in range 8 so m in range\n8 Returns the values 0 through 7 and\nhere we're saying we just take those\nvalues M so the resulting list is 0\nthrough 7 here we have a for Loop that\nsays Z in range 10 if Z is greater than\nfour so in other words items 4 through 9\nbut we said hey look instead of adding\nthe item itself Z to our list we want to\nadd z^ squ so it's going to take 5\nthrough n and it's going to square each\none of them and add it to the list so we\nget 25 36 49 64 81 so list\ncomprehensions you can have fairly\ncomplex function inside of the square\nbrackets to create and populate a new\nlist with whatever values you want\ndelete we can delete an item from a list\nor we can delete a complete list the\nitem we would delete using the index or\nwe can delete the entire list a pin we\ncan append an item to the end of a list\nusing the do appin\nfunction extend we can combine two lists\nthis is very similar to the plus\nfunction that we already showed x.\nextend Y is going to combine both X and\nY together into list X insert allows us\nto insert an item into a certain index\nposition so here we want to insert a\nseven into position one it will scoot\nthe rest of the items to the right and\nput the seven into the list and here\nwe're going to insert a su list or an\nembedded list with letters A and M into\nposition one which is going to scoot all\nthe rest of the items to the right and\npop our sub list right in here the pop\nfunction pops the last item off the list\nand returns it so if we want to let's\nsay print an item as we pop it off the\nlist we can say print x.p and it will\nprint the last item on the list and the\nnew list will have one less item in it\nremove is going to uh remove a specific\ninstance of an item so if we want to\nremove a three from this list we can put\nx. remove three and it'll remove the\nfirst three that it finds not every\nthree just the first three so you can\nsee here the first three is gone and\nreverse reverses the current order of\nthe list so the number that is first\nwill become the last the number that\nlast is going to become first and so on\nsort will actually do an inplace sort so\nthe new list you get back our list X\nhere is going to become a sorted list so\nunlike the sorted function sort is an\ninplace sort so it actually changes the\norder of the items in list\nX now let's talk about tuples so tles\nsupport all the operations for sequences\nbut tles are immutable so member objects\ninside a tle may be mutable for example\nyou may have a list inside of a tuple\ncould be one of the items in your tupple\nthat list is still mutable you can still\nchange and add and delete item from the\nlist but you cannot delete the list\nitself from your tupple so it's a little\nconfusing I'm going to show some\nexamples in a second if the contents of\na list shouldn't be changed then you can\nuse a tupple that's what tupples are\nused for it's useful when you have a\nconst set of values that are not going\nto be changed that you want to use\nthroughout your program and tles are\nmore efficient than list due to how\npython implements them so how do you\nconstruct a tupple well a new tupple\nwith no no values in it is going to just\nbe created using the parentheses and we\ncan say x = 1A 2 comma 3 if we want to\ncreate a tupp hole with values 1 2 and 3\nin it and you don't even need the\nparentheses actually the parentheses are\noptional if you want to create a single\nitem tupple you still have to put a\ncomma after that item otherwise it would\njust sign x equals integer value two and\nX would be an integer not a tle so the\ncomma tells it hey this is a tupple but\nit's a single item tupple and we can\ncreate a tupple from all the members of\na list just using the tupple function so\ntuples are immutable as I said if we try\nto delete an item from a tupple or\nchange the value of an item in a tupple\nwe're going to get an error but if we\nhave let's say a list inside of a tupple\nhere we have a\ncalled X and our first item is a list\nwith one and two in it and our second\nitem is an integer three so we can't\nchange that three that's immutable\nhowever we can change the list here\nwe're going to delete the first item in\nthe list which is two the item in index\none so our new tupple has a list with\njust the one in it and integer three so\nwe can change the list the list itself\nis mutable but the tupple is not we\nstill have to keep the list in in this\nposition let's talk about sets now so\nthere are some Constructors how do we\ncreate a new set we use the curly braces\nif we want to populate a set with values\nand we can create a new empty set using\nset with parenthesis and we can create a\nset from a list by calling the set\nfunction in parentheses the name of the\nlist when we do this though it strips\nout all the duplicates from our list and\nreturns only unique values to the set\nand then we also have similar to the\nlist comprehension a set comprehension\nso we can use a for Loop uh if\nstatements and whatever functions we\nwant to do on those X values X is\nprobably a bad choice of variables here\nsince we're using X for the uh set name\nbut uh but we can use the list\ncomprehension to put values into our set\nand sets are unordered so as as we\npopulate set the items are going to be\nin random order so some basic set\noperations we can add an item to set X\nby using x. add item remove an item from\nset X using x. remove item get length of\nset X using the Len function we can\ncheck membership in X by simply saying\nitem in X or item not in X that's going\nto return a Boolean true or false we can\npop a random item from set X using the\npop function we don't know which item is\ngoing to be popped it's arbitrary\nselected and we can delete item items\nfrom set X by saying x. CLE will\ncompletely empty our set some of the\nstandard mathematical functions for sets\nare very useful uh we can find the\nintersection of two sets using the\nAmpersand function and we can find the\nunion of two sets using the vertical bar\nsymmetric difference or exclusive ore in\nother words items that are in set one\nbut not in set two or in set two and not\nin set one using the uh up air\nthe difference which means items that\nare in set one but not in set two we\njust take set one minus set two and\nsubset and superet basically returns a\nBoolean value does set two contain set\none or does set one contain set two for\nsuper set\nquestion so those are some of the set\noperations now let's take a look at\ndictionaries so a dictionary again is a\nkey value pair and you can see three\ndifferent ways here to create a\ndictionary you can use curly braces with\nthe key first in this case I chose to\nuse strings for a key and floating Point\nvalues for my value and they're\nseparated by a colon so this is the most\nstandard way to create a dictionary you\ncan also call the dictionary function to\ncreate a dictionary by placing comma\nseparated tupples inside of a set and\nyou can also um say key equals value\ncomma separated and call on that so\nthere's three different ways to create a\ndictionary I find the first one is more\nwidely used and more standard U but they\nall three work so some basic dictionary\noperations you can add or change an item\nin dictionary X by saying X key is equal\nto Value if this key is already existing\nin the dictionary then it will change\nthe value to this if the key doesn't\nexist in dictionary it will add this key\nvalue pair to the\ndictionary remove item from dictionary X\ndelete uh X and then the key get the\nlength of dictionary using the L\nfunction check membership in X item in X\nor item not in X this only looks in the\nkeys it does not compare to values so if\nwe want to look through values I'll show\nshow you a way on the next slide to do\nthat delete all items from dictionary X\nwe can say x. CLE and delete the entire\ndictionary X delete x d x so how do we\naccess the keys and values in a\ndictionary we can say x. Keys it will\nreturn a list of the keys in X x.v\nvalues returns a list of values in x and\nx. items returns a list of key value\ntupple pairs in X so if we want to check\nmembership in values of X we can say\nitem in x. values and this will text\ntest the membership in X and return a\nBoolean iterating a dictionary we can\nuse for Loops for variable in X print\nvariable right so we say key we use the\nthe word key for our variable we can\nprint our key and then if we want access\nto the value as well we say x and then\nkey in uh square brackets and we can get\nboth the key and the value this way by\niterating however if we want to do a lot\nof operations or use use the value quite\nfrequently inside of our for Loop we\ncould use items instead so we can get\ntwo separate variables for the key and\nthe value by saying 4 K comma V in x.\nitem items is going to return both a key\nand a value and assign them to variables\nK and v in this case so when we print K\nand V we print out each key and each\nvalue for the entire dictionary that\nwraps up my video on python lists tles\nsets and dictionaries I hope you enjoyed\nthe video please click the like button\nat the bottom I'm Joe James thanks for\nwatching\n[Music]\n",
  "words": [
    "hi",
    "joe",
    "today",
    "going",
    "cover",
    "python",
    "lists",
    "tles",
    "sets",
    "dictionaries",
    "list",
    "widely",
    "used",
    "data",
    "structure",
    "python",
    "general",
    "purpose",
    "similar",
    "array",
    "java",
    "covers",
    "would",
    "need",
    "tuple",
    "sets",
    "dictionaries",
    "advantages",
    "specific",
    "areas",
    "useful",
    "data",
    "structures",
    "list",
    "sequence",
    "type",
    "sortable",
    "tupple",
    "mutable",
    "means",
    "ca",
    "change",
    "add",
    "remove",
    "items",
    "tupple",
    "created",
    "useful",
    "fixed",
    "data",
    "andle",
    "also",
    "sequence",
    "type",
    "explain",
    "second",
    "set",
    "store",
    "non",
    "duplicate",
    "items",
    "good",
    "storing",
    "unique",
    "items",
    "set",
    "also",
    "good",
    "mathematical",
    "comparisons",
    "sets",
    "union",
    "intersect",
    "kinds",
    "set",
    "operations",
    "dictionaries",
    "contain",
    "key",
    "value",
    "pairs",
    "like",
    "associative",
    "array",
    "similar",
    "java",
    "hashmap",
    "sets",
    "dictionaries",
    "unordered",
    "means",
    "sortable",
    "random",
    "order",
    "one",
    "amazing",
    "thing",
    "data",
    "structures",
    "python",
    "hold",
    "data",
    "type",
    "could",
    "hold",
    "integers",
    "floating",
    "point",
    "values",
    "strings",
    "object",
    "types",
    "even",
    "lists",
    "tupples",
    "sets",
    "dictionaries",
    "data",
    "types",
    "homogeneous",
    "mix",
    "match",
    "data",
    "types",
    "within",
    "single",
    "list",
    "within",
    "set",
    "within",
    "dictionary",
    "sequences",
    "include",
    "list",
    "tles",
    "also",
    "strings",
    "bunch",
    "different",
    "functions",
    "applicable",
    "three",
    "data",
    "types",
    "going",
    "go",
    "detail",
    "indexing",
    "access",
    "item",
    "sequence",
    "instantly",
    "using",
    "index",
    "million",
    "items",
    "list",
    "want",
    "access",
    "item",
    "instantly",
    "know",
    "index",
    "string",
    "sequence",
    "letters",
    "let",
    "say",
    "want",
    "access",
    "one",
    "items",
    "word",
    "frog",
    "say",
    "print",
    "x",
    "3",
    "using",
    "square",
    "bracket",
    "three",
    "gives",
    "us",
    "third",
    "index",
    "starting",
    "index",
    "zero",
    "f",
    "g",
    "going",
    "index",
    "3",
    "list",
    "say",
    "want",
    "item",
    "index",
    "one",
    "going",
    "give",
    "us",
    "cow",
    "second",
    "item",
    "list",
    "slicing",
    "allows",
    "us",
    "slice",
    "sub",
    "strings",
    "sub",
    "lists",
    "subtles",
    "using",
    "indexes",
    "syntax",
    "using",
    "square",
    "brackets",
    "start",
    "end",
    "plus",
    "one",
    "step",
    "optional",
    "cover",
    "examples",
    "explain",
    "applicable",
    "string",
    "tles",
    "lists",
    "example",
    "going",
    "use",
    "word",
    "computer",
    "string",
    "let",
    "say",
    "x",
    "1",
    "4",
    "using",
    "colon",
    "return",
    "us",
    "items",
    "1",
    "3",
    "om",
    "want",
    "uh",
    "slice",
    "items",
    "1",
    "six",
    "actually",
    "cuts",
    "five",
    "give",
    "us",
    "every",
    "item",
    "since",
    "step",
    "two",
    "items",
    "1",
    "3",
    "5",
    "opt",
    "x",
    "uh",
    "items",
    "three",
    "basically",
    "uh",
    "end",
    "right",
    "put",
    "item",
    "colon",
    "going",
    "give",
    "us",
    "three",
    "onward",
    "p",
    "e",
    "r",
    "put",
    "anything",
    "colon",
    "starts",
    "zero",
    "give",
    "us",
    "items",
    "1",
    "4",
    "rather",
    "0",
    "4",
    "want",
    "use",
    "negative",
    "numbers",
    "use",
    "1",
    "give",
    "us",
    "last",
    "item",
    "list",
    "sequence",
    "x",
    "colon",
    "nothing",
    "going",
    "give",
    "us",
    "last",
    "three",
    "items",
    "sequence",
    "x",
    "colon",
    "give",
    "us",
    "everything",
    "except",
    "last",
    "two",
    "items",
    "sequence",
    "adding",
    "concatenating",
    "using",
    "plus",
    "symbol",
    "combine",
    "two",
    "sequences",
    "type",
    "two",
    "strings",
    "want",
    "combine",
    "use",
    "plus",
    "sign",
    "add",
    "together",
    "two",
    "lists",
    "want",
    "merge",
    "together",
    "use",
    "plus",
    "sign",
    "give",
    "us",
    "one",
    "list",
    "three",
    "items",
    "multiplying",
    "use",
    "star",
    "sign",
    "multiply",
    "sequences",
    "type",
    "bug",
    "multiply",
    "word",
    "bug",
    "three",
    "times",
    "give",
    "us",
    "bug",
    "bug",
    "bug",
    "list",
    "eight",
    "five",
    "want",
    "multiply",
    "three",
    "give",
    "us",
    "85",
    "three",
    "times",
    "list",
    "checking",
    "membership",
    "test",
    "whether",
    "item",
    "sequence",
    "using",
    "keywords",
    "simple",
    "use",
    "x",
    "equals",
    "bug",
    "want",
    "print",
    "u",
    "n",
    "x",
    "print",
    "true",
    "u",
    "actually",
    "x",
    "print",
    "false",
    "list",
    "pig",
    "cow",
    "horse",
    "print",
    "cow",
    "x",
    "print",
    "true",
    "cow",
    "x",
    "however",
    "cow",
    "x",
    "prints",
    "false",
    "checking",
    "membership",
    "using",
    "keywords",
    "iterating",
    "iterate",
    "items",
    "sequence",
    "using",
    "loop",
    "list",
    "integers",
    "x",
    "say",
    "four",
    "item",
    "variable",
    "name",
    "x",
    "print",
    "whatever",
    "want",
    "variable",
    "name",
    "returns",
    "us",
    "one",
    "list",
    "item",
    "time",
    "loop",
    "iteration",
    "need",
    "index",
    "item",
    "use",
    "enumerate",
    "function",
    "say",
    "index",
    "item",
    "basically",
    "need",
    "two",
    "variable",
    "names",
    "first",
    "one",
    "going",
    "index",
    "second",
    "going",
    "value",
    "item",
    "uh",
    "enumerate",
    "x",
    "inside",
    "loop",
    "whatever",
    "want",
    "two",
    "variables",
    "print",
    "statement",
    "prints",
    "index",
    "followed",
    "value",
    "number",
    "items",
    "count",
    "number",
    "items",
    "sequence",
    "using",
    "len",
    "function",
    "short",
    "length",
    "thing",
    "list",
    "prints",
    "length",
    "list",
    "three",
    "items",
    "list",
    "minimum",
    "finds",
    "minimum",
    "number",
    "lexical",
    "graphically",
    "means",
    "alpha",
    "numerically",
    "works",
    "items",
    "list",
    "either",
    "alpha",
    "numeric",
    "mix",
    "match",
    "integers",
    "floating",
    "point",
    "values",
    "strings",
    "integers",
    "x",
    "equals",
    "bug",
    "want",
    "find",
    "minimum",
    "minimum",
    "b",
    "list",
    "three",
    "strings",
    "going",
    "find",
    "lowest",
    "one",
    "c",
    "cal",
    "prce",
    "cal",
    "maximum",
    "going",
    "find",
    "maximum",
    "item",
    "sequence",
    "lexical",
    "graphically",
    "type",
    "either",
    "numeric",
    "string",
    "type",
    "take",
    "maximum",
    "bug",
    "get",
    "u",
    "take",
    "maximum",
    "pig",
    "cow",
    "horse",
    "going",
    "get",
    "pig",
    "comes",
    "last",
    "alphabetically",
    "sum",
    "find",
    "sum",
    "items",
    "sequence",
    "numeric",
    "type",
    "5",
    "bug",
    "going",
    "give",
    "us",
    "error",
    "bug",
    "numeric",
    "type",
    "take",
    "sum",
    "2",
    "5",
    "8",
    "12",
    "going",
    "print",
    "27",
    "want",
    "slice",
    "say",
    "hey",
    "want",
    "sum",
    "last",
    "two",
    "items",
    "x",
    "print",
    "20",
    "sort",
    "items",
    "list",
    "sorted",
    "function",
    "actually",
    "returns",
    "new",
    "list",
    "without",
    "changing",
    "original",
    "list",
    "returns",
    "new",
    "list",
    "sorted",
    "order",
    "bug",
    "return",
    "letters",
    "bug",
    "list",
    "sorted",
    "order",
    "bgu",
    "list",
    "pig",
    "cow",
    "horse",
    "call",
    "sorted",
    "x",
    "going",
    "return",
    "cow",
    "horse",
    "pig",
    "mind",
    "original",
    "x",
    "still",
    "unchanged",
    "count",
    "item",
    "returns",
    "count",
    "specific",
    "item",
    "sequence",
    "looking",
    "count",
    "count",
    "p",
    "tell",
    "us",
    "two",
    "ps",
    "hippo",
    "count",
    "cow",
    "tell",
    "us",
    "many",
    "times",
    "word",
    "cow",
    "appears",
    "list",
    "x",
    "want",
    "find",
    "index",
    "item",
    "index",
    "function",
    "actually",
    "returns",
    "index",
    "first",
    "occurrence",
    "item",
    "item",
    "list",
    "sequence",
    "multiple",
    "times",
    "returns",
    "index",
    "first",
    "occurrence",
    "h",
    "zero",
    "1",
    "p",
    "first",
    "p",
    "2",
    "index",
    "p",
    "going",
    "return",
    "two",
    "find",
    "first",
    "cow",
    "index",
    "one",
    "unpacking",
    "want",
    "assign",
    "items",
    "sequence",
    "set",
    "variables",
    "say",
    "comma",
    "b",
    "comma",
    "c",
    "x",
    "strings",
    "x",
    "assigned",
    "order",
    "variables",
    "left",
    "pig",
    "assigned",
    "cow",
    "assigned",
    "b",
    "horse",
    "assigned",
    "c",
    "works",
    "number",
    "variables",
    "exactly",
    "matches",
    "length",
    "list",
    "three",
    "items",
    "must",
    "three",
    "variables",
    "covers",
    "general",
    "functions",
    "sequence",
    "types",
    "let",
    "talk",
    "specific",
    "list",
    "functions",
    "different",
    "ways",
    "create",
    "lists",
    "say",
    "x",
    "equals",
    "list",
    "parentheses",
    "uh",
    "say",
    "x",
    "equals",
    "square",
    "brackets",
    "whatever",
    "list",
    "want",
    "add",
    "populate",
    "list",
    "mix",
    "match",
    "uh",
    "data",
    "types",
    "strings",
    "integers",
    "floating",
    "points",
    "say",
    "x",
    "equals",
    "list",
    "parentheses",
    "tule",
    "get",
    "list",
    "items",
    "tuple",
    "really",
    "cool",
    "function",
    "called",
    "list",
    "comprehension",
    "create",
    "new",
    "list",
    "using",
    "returned",
    "loop",
    "range",
    "8",
    "range",
    "8",
    "returns",
    "values",
    "0",
    "7",
    "saying",
    "take",
    "values",
    "resulting",
    "list",
    "0",
    "7",
    "loop",
    "says",
    "z",
    "range",
    "10",
    "z",
    "greater",
    "four",
    "words",
    "items",
    "4",
    "9",
    "said",
    "hey",
    "look",
    "instead",
    "adding",
    "item",
    "z",
    "list",
    "want",
    "add",
    "squ",
    "going",
    "take",
    "5",
    "n",
    "going",
    "square",
    "one",
    "add",
    "list",
    "get",
    "25",
    "36",
    "49",
    "64",
    "81",
    "list",
    "comprehensions",
    "fairly",
    "complex",
    "function",
    "inside",
    "square",
    "brackets",
    "create",
    "populate",
    "new",
    "list",
    "whatever",
    "values",
    "want",
    "delete",
    "delete",
    "item",
    "list",
    "delete",
    "complete",
    "list",
    "item",
    "would",
    "delete",
    "using",
    "index",
    "delete",
    "entire",
    "list",
    "pin",
    "append",
    "item",
    "end",
    "list",
    "using",
    "appin",
    "function",
    "extend",
    "combine",
    "two",
    "lists",
    "similar",
    "plus",
    "function",
    "already",
    "showed",
    "extend",
    "going",
    "combine",
    "x",
    "together",
    "list",
    "x",
    "insert",
    "allows",
    "us",
    "insert",
    "item",
    "certain",
    "index",
    "position",
    "want",
    "insert",
    "seven",
    "position",
    "one",
    "scoot",
    "rest",
    "items",
    "right",
    "put",
    "seven",
    "list",
    "going",
    "insert",
    "su",
    "list",
    "embedded",
    "list",
    "letters",
    "position",
    "one",
    "going",
    "scoot",
    "rest",
    "items",
    "right",
    "pop",
    "sub",
    "list",
    "right",
    "pop",
    "function",
    "pops",
    "last",
    "item",
    "list",
    "returns",
    "want",
    "let",
    "say",
    "print",
    "item",
    "pop",
    "list",
    "say",
    "print",
    "print",
    "last",
    "item",
    "list",
    "new",
    "list",
    "one",
    "less",
    "item",
    "remove",
    "going",
    "uh",
    "remove",
    "specific",
    "instance",
    "item",
    "want",
    "remove",
    "three",
    "list",
    "put",
    "remove",
    "three",
    "remove",
    "first",
    "three",
    "finds",
    "every",
    "three",
    "first",
    "three",
    "see",
    "first",
    "three",
    "gone",
    "reverse",
    "reverses",
    "current",
    "order",
    "list",
    "number",
    "first",
    "become",
    "last",
    "number",
    "last",
    "going",
    "become",
    "first",
    "sort",
    "actually",
    "inplace",
    "sort",
    "new",
    "list",
    "get",
    "back",
    "list",
    "x",
    "going",
    "become",
    "sorted",
    "list",
    "unlike",
    "sorted",
    "function",
    "sort",
    "inplace",
    "sort",
    "actually",
    "changes",
    "order",
    "items",
    "list",
    "x",
    "let",
    "talk",
    "tuples",
    "tles",
    "support",
    "operations",
    "sequences",
    "tles",
    "immutable",
    "member",
    "objects",
    "inside",
    "tle",
    "may",
    "mutable",
    "example",
    "may",
    "list",
    "inside",
    "tuple",
    "could",
    "one",
    "items",
    "tupple",
    "list",
    "still",
    "mutable",
    "still",
    "change",
    "add",
    "delete",
    "item",
    "list",
    "delete",
    "list",
    "tupple",
    "little",
    "confusing",
    "going",
    "show",
    "examples",
    "second",
    "contents",
    "list",
    "changed",
    "use",
    "tupple",
    "tupples",
    "used",
    "useful",
    "const",
    "set",
    "values",
    "going",
    "changed",
    "want",
    "use",
    "throughout",
    "program",
    "tles",
    "efficient",
    "list",
    "due",
    "python",
    "implements",
    "construct",
    "tupple",
    "well",
    "new",
    "tupple",
    "values",
    "going",
    "created",
    "using",
    "parentheses",
    "say",
    "x",
    "1a",
    "2",
    "comma",
    "3",
    "want",
    "create",
    "tupp",
    "hole",
    "values",
    "1",
    "2",
    "3",
    "even",
    "need",
    "parentheses",
    "actually",
    "parentheses",
    "optional",
    "want",
    "create",
    "single",
    "item",
    "tupple",
    "still",
    "put",
    "comma",
    "item",
    "otherwise",
    "would",
    "sign",
    "x",
    "equals",
    "integer",
    "value",
    "two",
    "x",
    "would",
    "integer",
    "tle",
    "comma",
    "tells",
    "hey",
    "tupple",
    "single",
    "item",
    "tupple",
    "create",
    "tupple",
    "members",
    "list",
    "using",
    "tupple",
    "function",
    "tuples",
    "immutable",
    "said",
    "try",
    "delete",
    "item",
    "tupple",
    "change",
    "value",
    "item",
    "tupple",
    "going",
    "get",
    "error",
    "let",
    "say",
    "list",
    "inside",
    "tupple",
    "called",
    "x",
    "first",
    "item",
    "list",
    "one",
    "two",
    "second",
    "item",
    "integer",
    "three",
    "ca",
    "change",
    "three",
    "immutable",
    "however",
    "change",
    "list",
    "going",
    "delete",
    "first",
    "item",
    "list",
    "two",
    "item",
    "index",
    "one",
    "new",
    "tupple",
    "list",
    "one",
    "integer",
    "three",
    "change",
    "list",
    "list",
    "mutable",
    "tupple",
    "still",
    "keep",
    "list",
    "position",
    "let",
    "talk",
    "sets",
    "constructors",
    "create",
    "new",
    "set",
    "use",
    "curly",
    "braces",
    "want",
    "populate",
    "set",
    "values",
    "create",
    "new",
    "empty",
    "set",
    "using",
    "set",
    "parenthesis",
    "create",
    "set",
    "list",
    "calling",
    "set",
    "function",
    "parentheses",
    "name",
    "list",
    "though",
    "strips",
    "duplicates",
    "list",
    "returns",
    "unique",
    "values",
    "set",
    "also",
    "similar",
    "list",
    "comprehension",
    "set",
    "comprehension",
    "use",
    "loop",
    "uh",
    "statements",
    "whatever",
    "functions",
    "want",
    "x",
    "values",
    "x",
    "probably",
    "bad",
    "choice",
    "variables",
    "since",
    "using",
    "x",
    "uh",
    "set",
    "name",
    "uh",
    "use",
    "list",
    "comprehension",
    "put",
    "values",
    "set",
    "sets",
    "unordered",
    "populate",
    "set",
    "items",
    "going",
    "random",
    "order",
    "basic",
    "set",
    "operations",
    "add",
    "item",
    "set",
    "x",
    "using",
    "add",
    "item",
    "remove",
    "item",
    "set",
    "x",
    "using",
    "remove",
    "item",
    "get",
    "length",
    "set",
    "x",
    "using",
    "len",
    "function",
    "check",
    "membership",
    "x",
    "simply",
    "saying",
    "item",
    "x",
    "item",
    "x",
    "going",
    "return",
    "boolean",
    "true",
    "false",
    "pop",
    "random",
    "item",
    "set",
    "x",
    "using",
    "pop",
    "function",
    "know",
    "item",
    "going",
    "popped",
    "arbitrary",
    "selected",
    "delete",
    "item",
    "items",
    "set",
    "x",
    "saying",
    "cle",
    "completely",
    "empty",
    "set",
    "standard",
    "mathematical",
    "functions",
    "sets",
    "useful",
    "uh",
    "find",
    "intersection",
    "two",
    "sets",
    "using",
    "ampersand",
    "function",
    "find",
    "union",
    "two",
    "sets",
    "using",
    "vertical",
    "bar",
    "symmetric",
    "difference",
    "exclusive",
    "ore",
    "words",
    "items",
    "set",
    "one",
    "set",
    "two",
    "set",
    "two",
    "set",
    "one",
    "using",
    "uh",
    "air",
    "difference",
    "means",
    "items",
    "set",
    "one",
    "set",
    "two",
    "take",
    "set",
    "one",
    "minus",
    "set",
    "two",
    "subset",
    "superet",
    "basically",
    "returns",
    "boolean",
    "value",
    "set",
    "two",
    "contain",
    "set",
    "one",
    "set",
    "one",
    "contain",
    "set",
    "two",
    "super",
    "set",
    "question",
    "set",
    "operations",
    "let",
    "take",
    "look",
    "dictionaries",
    "dictionary",
    "key",
    "value",
    "pair",
    "see",
    "three",
    "different",
    "ways",
    "create",
    "dictionary",
    "use",
    "curly",
    "braces",
    "key",
    "first",
    "case",
    "chose",
    "use",
    "strings",
    "key",
    "floating",
    "point",
    "values",
    "value",
    "separated",
    "colon",
    "standard",
    "way",
    "create",
    "dictionary",
    "also",
    "call",
    "dictionary",
    "function",
    "create",
    "dictionary",
    "placing",
    "comma",
    "separated",
    "tupples",
    "inside",
    "set",
    "also",
    "um",
    "say",
    "key",
    "equals",
    "value",
    "comma",
    "separated",
    "call",
    "three",
    "different",
    "ways",
    "create",
    "dictionary",
    "find",
    "first",
    "one",
    "widely",
    "used",
    "standard",
    "u",
    "three",
    "work",
    "basic",
    "dictionary",
    "operations",
    "add",
    "change",
    "item",
    "dictionary",
    "x",
    "saying",
    "x",
    "key",
    "equal",
    "value",
    "key",
    "already",
    "existing",
    "dictionary",
    "change",
    "value",
    "key",
    "exist",
    "dictionary",
    "add",
    "key",
    "value",
    "pair",
    "dictionary",
    "remove",
    "item",
    "dictionary",
    "x",
    "delete",
    "uh",
    "x",
    "key",
    "get",
    "length",
    "dictionary",
    "using",
    "l",
    "function",
    "check",
    "membership",
    "x",
    "item",
    "x",
    "item",
    "x",
    "looks",
    "keys",
    "compare",
    "values",
    "want",
    "look",
    "values",
    "show",
    "show",
    "way",
    "next",
    "slide",
    "delete",
    "items",
    "dictionary",
    "x",
    "say",
    "cle",
    "delete",
    "entire",
    "dictionary",
    "x",
    "delete",
    "x",
    "x",
    "access",
    "keys",
    "values",
    "dictionary",
    "say",
    "keys",
    "return",
    "list",
    "keys",
    "x",
    "values",
    "returns",
    "list",
    "values",
    "x",
    "items",
    "returns",
    "list",
    "key",
    "value",
    "tupple",
    "pairs",
    "x",
    "want",
    "check",
    "membership",
    "values",
    "x",
    "say",
    "item",
    "values",
    "text",
    "test",
    "membership",
    "x",
    "return",
    "boolean",
    "iterating",
    "dictionary",
    "use",
    "loops",
    "variable",
    "x",
    "print",
    "variable",
    "right",
    "say",
    "key",
    "use",
    "word",
    "key",
    "variable",
    "print",
    "key",
    "want",
    "access",
    "value",
    "well",
    "say",
    "x",
    "key",
    "uh",
    "square",
    "brackets",
    "get",
    "key",
    "value",
    "way",
    "iterating",
    "however",
    "want",
    "lot",
    "operations",
    "use",
    "use",
    "value",
    "quite",
    "frequently",
    "inside",
    "loop",
    "could",
    "use",
    "items",
    "instead",
    "get",
    "two",
    "separate",
    "variables",
    "key",
    "value",
    "saying",
    "4",
    "k",
    "comma",
    "v",
    "item",
    "items",
    "going",
    "return",
    "key",
    "value",
    "assign",
    "variables",
    "k",
    "v",
    "case",
    "print",
    "k",
    "v",
    "print",
    "key",
    "value",
    "entire",
    "dictionary",
    "wraps",
    "video",
    "python",
    "lists",
    "tles",
    "sets",
    "dictionaries",
    "hope",
    "enjoyed",
    "video",
    "please",
    "click",
    "like",
    "button",
    "bottom",
    "joe",
    "james",
    "thanks",
    "watching",
    "music"
  ],
  "keywords": [
    "going",
    "python",
    "lists",
    "tles",
    "sets",
    "dictionaries",
    "list",
    "data",
    "similar",
    "would",
    "need",
    "specific",
    "useful",
    "sequence",
    "type",
    "tupple",
    "mutable",
    "means",
    "change",
    "add",
    "remove",
    "items",
    "also",
    "second",
    "set",
    "operations",
    "key",
    "value",
    "order",
    "one",
    "integers",
    "floating",
    "values",
    "strings",
    "types",
    "dictionary",
    "sequences",
    "different",
    "functions",
    "three",
    "access",
    "item",
    "using",
    "index",
    "want",
    "string",
    "let",
    "say",
    "word",
    "print",
    "x",
    "3",
    "square",
    "us",
    "give",
    "cow",
    "brackets",
    "plus",
    "use",
    "1",
    "4",
    "colon",
    "return",
    "uh",
    "actually",
    "two",
    "5",
    "right",
    "put",
    "p",
    "last",
    "combine",
    "sign",
    "bug",
    "times",
    "membership",
    "equals",
    "u",
    "pig",
    "horse",
    "loop",
    "variable",
    "name",
    "whatever",
    "returns",
    "function",
    "first",
    "inside",
    "variables",
    "number",
    "count",
    "length",
    "minimum",
    "numeric",
    "find",
    "maximum",
    "take",
    "get",
    "sum",
    "2",
    "sort",
    "sorted",
    "new",
    "still",
    "comma",
    "assigned",
    "create",
    "parentheses",
    "populate",
    "comprehension",
    "saying",
    "delete",
    "insert",
    "position",
    "pop",
    "integer",
    "keys"
  ]
}