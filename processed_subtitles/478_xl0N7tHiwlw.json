{
  "text": "hi i'm patrick from the python engineer\nchannel and in today's video we learn\nhow to build a machine learning web\napplication from scratch\nwe are going to use real world data from\nthe stack overflow developer survey\nand in the first part of this video you\nwill learn how we analyze and clean this\ndata\nand then we build a machine learning\nmodel and train it with the scikit-learn\nlibrary\nthen later in the second part of this\nvideo we built a web application in\npython using the streamlit library\nthis library will make it extremely easy\nand is really beginner friendly so you\ncan follow along without much experience\nso now before we jump to the code let me\nshow you the final application\nso here we are in my browser and i have\nthe final app\nrunning and we're going to build a\nsoftware developer salary prediction app\nso we're going to predict the salary\nbased on a few information that the user\nhas to put in\nfor example the first thing we have to\nput in is the country and here we get a\nnice\nselection box so we can select between\ndifferent\noptions then we have to choose the\neducation level\nso here i can say for example bachelor's\ndegree\nand then we get a nice little slider to\nselect the years of experience\nand then we click on calculate salary\nand get the estimated salary so in this\ncase it's 97\n000 so let's increase the years of\nexperience\nand click again and then we see we get a\nnew\nhigher value so this is what we should\nexpect if we increase the years of\nexperience so for this number in the\nbackground here we have our machine\nlearning model running that has been\ntrained on real world data and is now\npredicting\nthis number based on these three\ninformation we give the model\nso in the first part of this video you\nwill learn how to train\nand then save and reuse this model and\nthen\nnext to this prediction app we can also\nswitch to a\nsecond site so here on the left we have\na sidebar and we can choose the\nexplore page and here we can explore the\ndata that we used\nso in this case we used the real world\ndata which is the stack overflow\ndeveloper survey 2020\nso you can find this at this website we\ncan put the link in the description and\nyou can\nread through this if you're interested\nin this and you can also download this\ndata set so this is publicly available\nso again we can put the link in the\ndescription\nand in this video we used the latest\ndata from 2020 but you can also download\nthe data from the past years\nso yeah on this website you should\ndownload this csv file and put into your\nproject folder\nso let's get back to our web app and\nhere i simply plot some information to\nget a nice little\noverview about this data and also learn\nhow we do\nplotting in this web app so the first\nthing i plot is a little pie chart to\nplot the number of data from different\ncountries\nso we can see the biggest chunk is from\nthe united states\nand then we also have a lot of data from\nthe uk germany\nand india and canada and then it's\ngetting smaller and smaller\nthen if we scroll down we get the mean\nsalary based on different\ncountries so this might be a little bit\nsmall for you to see but the biggest\naverage salary\nis in the united states which we can see\nhere\nand we can also zoom in and zoom out in\nthis\nplot so this is really nice so this is a\nbar plot\nand then down here as last example i\nshow you how to use a\nline chart so here we plot the mean\nsalary based on the\nnumber of years of experience so this is\nstarting at 0 years and goes up to\n50 years and for example we can see that\nat the beginning the salary is\nincreasing almost linearly with the\nyears of experience\nbut then at some point it's stagnating\nand it's also\njumping around so from this plot for\nexample we learned that we\ncannot use the gears as only information\nfor our model so we have to combine\nmultiple data points and we will learn\nhow to do this later\nso yeah this is the final web app that\nwe're going to build and this is also\nfully responsive so we can make this\nsmaller and then it still looks nice\nso to build this web app we are going to\nuse streamlit\nthis is a python library that makes it\nextremely easy to build beautiful web\napps especially for machine learning and\ndata science tasks\nso we will learn how to do this in the\nsecond part of this video and i promise\nyou that this library is really beginner\nfriendly so it takes care of all the\nback and stuff for us\nand we just have to write a little\nsimple python script\nso yeah let's do this and now as first\nthing i want you to\ndownload this developer service so the\n2020\ncsv file and put it in your project\nfolder\nall right so here i have this public\nsurvey from 2020 open\nand this is a really large file so it's\nalmost 100 megabyte\nso you will see that there is a lot of\ninformation in here for example if we\nscroll down all the way to the end then\nwe see we have\nalmost 65 000 data points so from 65\n000 different developers and then we can\nalso scroll to the right so you see that\nthere are a lot of different columns in\nhere so a lot of different\nquestions that they answered and also\nfor a lot of data points we have\nn a in here so not available so we can't\nuse\nall the information so yeah in the first\npart now you will learn how we clean\nthis data and then use only the\ninformation we want\nso let's start with the project setup\nand here i'm in a new directory so i\ncall this\nml app and the first thing i recommend\nis to create a\nvirtual environment so you can either\nuse a python virtual and and i can\ndisplay\nthe commands for this here but in this\ncase i want to use a conda and so we\ncreate a new\nconda environment and by the way if you\ndon't know how to use anaconda then you\ncan find a tutorial about this on my\npage\nso we say conda create and then minus\nn and then we give it a name so in this\ncase i want to call this\nml for machine learning and then i also\ntell it the python version so here i\nwant to use the latest one\npython 3.9 and then hit enter and yes\nso now it created our environment and\nnow we want to activate it so we say\nconda\nactivate ml and now this is activated so\nin my terminal we can see this because\nwe see this on the right side\nand now we want to install the packages\nwe need\nso for this you could either say pip\ninstall\nand then the libraries i tell you and\nthis is actually\nthe recommended way for streamlet but in\nmy case i'm on a\nm1 mac and i had some issues with with\npip\ninstalls so i'm just using conda install\nthis should be just fine and the first\nthing we want to say is\nconda or pip install streamlit and hit\nenter\nall right so this installed streamlit\nand all the dependencies for example it\nalso already\ninstalled numpy and panda so we can\nverify this\nif we say conda install numpy\npandas and hit enter then it should be\nthere already so we see all requested\npackages already\ninstalled but we need some more so we\nwant to say\nconda install and then we also want\nmatplotlib for\nplotting and we also want scikit\nlearn for our machine learning model so\nagain\nif you use pip then this is just fine\nbut here i use\nconda and let's hit enter all right so\nnow we have everything we need and now\nwe want to create a two-parter notebook\nand there we play around with the data\nand train our model\nso we also want to install a kernel for\nthis\nvirtual environment so for this we use\nthis command\ni python kernel install minus minus user\nminus minus name equals and then the\nname of this environment\nso this is ml in this case all right so\nnow we can start our two-parter notebook\nserver by saying\ntwo-parter notebook and hit enter all\nright so here we see the folder and you\ncan see that i already have the csv file\nwith the survey data in this folder and\ni also already prepared a notebook\nbut in your case you want to click on\nnew\nand then select the environment so in\nthis case ml\nand this is why we just used this kernel\ninstall command so that we can see this\nhere\nso click on new notebook and then you\ncan start\nso in my case i already prepared the\nnotebook and now i will walk you through\nit\nso if this is too fast and you can find\nthis notebook available on github we can\nagain put the link in the description\nso we want to import pandas and\nmatplotlib\nand then we want to read this csv file\nby saying\nread pandas.readcsv so let's execute the\ncell\nand then let's display the first five\nrows by saying dataframe.head\nso here we can see the first five rows\nso as i said this data set is very large\nso we have\n61 columns and also a lot of missing\ndata\nso nan all right so let's start cleaning\nthe data frame\nand we only want to keep a few columns\nso we want to keep the column\ncountry the add level which is the\neducation level\nthe years code pro which is the number\nof\nyears of professional experience then\nthe\nemployment status for example if the\ndeveloper is working full time\nand then the converted comp column so\nthis\nis the salary converted to u.s\ndollars and this is a yearly salary so\nthis is what we want to keep\nand then we rename this converted\ncomp to salary so we can do this by\nsaying dataframe.rename\nso let's run this and have a look at the\nhead again\nand then we can see we only now have the\ncountry the education level\nyears code pro employment and salary\nso here obviously you can also keep more\ndata so the more columns or the more\ninformation we keep the\nbetter we should be able to train our\nmodel later\nbut here we also want to do a trade-off\nbecause we don't want to\nbother the user with too much\ninformation that he or she has to fill\nout\nso yeah in this case i'm only using\nthese these data points to predict the\nsalary then\nso here we can see we already have a lot\nof missing\ninformation where the user didn't put in\nthe salary\nso for our training data now we want\nonly data where the salary\nis available so we want to drop all the\ncolumns\nwhere this is nan and we can do this\nby saying data frame equals data frame\nwhere the data frame salary is not null\nso if we execute this and have a look\nthen we see the first rows\nalready have a salary so now we have a\nsalary for\nall the data points so let's have a\nquick\nlook at the information by saying data\nframe dot\ninfo so here we see we have almost 35\nentries and we have these columns and we\nalso see the data type\nso i think object means this is a string\nnow the next thing we want to do is we\nalso want to drop\nall the rows where one of those columns\nis and not a number so we can do this by\nsaying data frame\nequals data frame dot drop n a\nand then if we inspect data frame is\nnull dot\nsum then we should get a zero for each\ncolumn\nso now we only use data points where we\nhave data\nso of course just getting rid of all\nthis\ndata is a radical approach of cleaning\nthe data\nthere are other approaches you can use\nfor example you can fill in missing data\nwith the mean of this column\nbut in this case we still have enough\ndata points available so it should be\nfine to just\ndrop them then the next thing we want to\ndo is we only want to keep\nthe data points where the user was\nemployed full time so we can do this by\nsaying data frame\nequals where data frame employment\nequals equals employed full time\nso we only keep these rows\nand then we want to drop the column\nemployment so we don't need this for the\nprediction\nso let's run this and again print the\ninfo\nso now we see we only have these columns\nand\ndrop the employment the next thing we\nwant to do is clean the country data so\nif we say\ndata frame country dot counts and hit\nenter\nthen we see how many data points we have\nfrom each country so we have the most\ndata from the united states\nand we also see that a lot of\ninformation\nthat for a lot of countries we only have\none data point\nso now we want to get rid of all the\nsmaller countries\nand in no way do i want to offend these\ncountries so i'm sure there are great\ndevelopers there\nbut the thing is just if we use for\nexample only one data point from monaco\nthen this might actually confuse our\nmodel because it can't really learn from\nthis one data point\nso for this now we want to get rid of\nthe countries where we have only a few\nvalues\nnow in order to clean the countries we\nhave this function here\nshorten categories which gets the\ncategories and this must be these\nvalue counts here and then a cut off\nvalue where we can play around with this\nand if the number of samples we have\nhere is\ngreater or equal than the cut of value\nand we keep this\nand otherwise we combine this into a new\ncategory that we call\nother so the other countries and then we\nexecute this function so we say shorten\ncategories and then we give it\ndataframe.country.value counts\nand the cut of 400 in this case and then\nwe\nchange our data frame by saying\ndataframe country\nequals dataframe country dot map\nand give it this country map and now if\nwe\nhave a look at the value counts again\nall right so now here we can see we only\nkept\nthese countries and united states is\nstill the biggest one and now here we\nhave the\nnew other category and here this is the\nbiggest\nchunk now the next thing we want to do\nis\nlet's inspect the salary range and for\nthis\ni want to plot the salary against the\ncountry\nso let's execute this and here\nthis is a box plot so here you see the\nbox plot and we see the different\ncountries on the x-axis and then we have\nthe salary\nranging from zero all the way to\ntwo million so the way a\nbox plot can be interpreted is that this\nsmall area here that you see this is the\nmedian value\nand now all these points are actually\noutliers so there are a lot of\noutliers in this data frame and now\nactually the most\ndata points are in this median area so\nwhat we want to do here now is we want\nto\nkeep only the data where we have the\nmost information\nso we can see that none of these boxes\nhere\nreaches over this line\nwhich is 250 000 so we define this as\nour cut off value and keep\nonly salaries where this is smaller than\nthis range\nso we can do this with this command\nand we also only want to keep salaries\nwhere this\nis greater than 10 000 so i think\nif you're working full time then you\nshould earn more than ten thousand\ndollars\nin a year so let's keep only this\nand then we also want to drop the\nother categories so we can do this with\nthis command\nand now let's plot the same again so the\nsame\nbox plot here and hit enter so now we\ncan better detect these boxes here and\nsee where the median range is\nand yeah so now we still have outliers\nbut not so many anymore\nthen the next thing we want to clean is\nthe\nyears code pro so if we inspect\nall the different values we get then we\nsee we have this as\na string value and we also have\nless than one year and more than 50\nyears\nso what i do here is i want to convert\nthis to a float\nand if it's less than one year then i\njust say this is\n0.5 and here we do a cut\noff so for more than 50 we just say 50.\nso for this we create a function clean\nexperience\nwhich gets x and here we say if x is\nmore than 50 years so exactly this\nstring\nthen we return 50 if it's less than one\nyear we return\n0.5 and otherwise we convert it to a\nfloat\nand then we transform it by saying data\nframe years code equals data frame use\ncode\ndot apply this function so let's hit\nenter\nand now we want to do a similar thing\nwith the education level\nso if we have a look at all these unique\nvalues\nthen we see we have all these different\nanswers and here again we want to\ncombine a few categories so i want to\nkeep the\nbachelor's the master's degree then\nif it's a professional or a doctoral\ndegree\nthen i will say this is a post-grad\nand for all the other things that we say\nthis is less than a batch class\nso for this again we create a function\ndefine clean education\nwhere we check if and then if this\nstring is in x so if bachelor's degree\nthen we return this is the bachelor's\ndegree\nthen we have the master's degree the\npostgrad\nand the less than bachelors and then\nagain we apply this\nto the education level column so now hit\nenter and then let's inspect the unique\nvalues again\nand now we see we only kept these values\nall right so now we're almost done with\ncleaning the data but we still have one\nproblem\nand this is because some of our data for\nexample the number of years of\nexperience this is a\nfloat but the education level and the\ncountry is a string\nand our model can't really understand\nthe string\nso what we have to do is we have to\ntransform the string values to a unique\nvalue a number that our\nmodel can understand for example for\nthese four\nstrings we can use the number zero one\ntwo and three\nand then in order to transform this data\nwe can use\nthe label encoder from\nsklearn.preprocessing\nso we import this and then create a\nlabel encoder education and\nnow we fix this to the data and also\ntransform it in the same step and then\nwe assign it back to the education level\ncolumn\nso now if we have a look at the unique\nvalues again\nthen we see we no longer have strings in\nhere but now we have the numbers zero\ntwo one and three so the order is not\nreally important here but this\nlabel encoder here now knows which\nnumber belongs to which\nstring and then later can convert this\nback again\nso yeah we did this for the education\nlevel and now we do the same for the\ncountry so we map\neach country to a unique number\nand for this we create a separate label\nencoder that we call\nle country and then we apply this fit\ntransform again and now let's have a\nlook at the unique\nvalues for the country and then again we\nsee\nwe have numbers here and no longer a\nstring\nall right so now we have our final data\nthat we can use\nand now we can finally start training\nour model\nso for this we have to split our data in\nthe\nfeatures x and the label so the label is\nthe salary this is what we predict and\nthe features\nare the rest of the columns so the\ncountry the education level and the\nyears of experience\nso we get these columns by saying\ndata frame drop the salary\nand the y is only the salary column\nso now we have x and y and now we want\nto\ntry out different machine learning\nmodels\nand for this we use the scikit-learn\nlibrary\nand in this case we deal with a\nregression problem\nand this means that here we don't\npredict a\ndefined category like cat or dog but\nhere we\npredict a number and the number can be\nanything from i don't know\n0 to 1 million so that's why this is a\nregression and not a\nclassification and for this the first\nobvious choice\nis the linear regression model so we can\nimport this\nand then we create a regression model\nlike so\nand then like for all the models in the\nsk\nlearn library first we have to fit the\ndata so we can\nfit x and y dot values\nand run this and then to predict new\nvalues we say\nour model dot predict x\nand here we get the predicted values so\nlet's do this as well\nand one node here so normally you want\nto split your data into\ntraining and testing or even training\nvalidation\nand testing data and then do the\ntraining or the fitting\nonly on the training data but here for\nsimplicity\nwe do this on the whole data so now we\nget the predictions back and now in\norder\nto um evaluate how good\nour model performs so for the\nregression plot problem we usually have\na look at the\nmean squared error or you can also have\na look at the mean\nabsolute error so you can import this\nand now we want to calculate the mean\nsquared error based on the actual labels\ny and the new predicted label so to get\nthe actual\nnumber back we calculate the square root\nof this with\nnumpy square root and this will be\nour error so let's have a look at the\nerror all right so this is the error\n39 000 dollars so this means that our\nmodel on average is off by this number\nand this is still pretty high if we\nthink that the numbers range from\n10 000 all the way to 250 000\nand each time we predict the salary then\non average we are off by this value\nthen it's still pretty high so let's try\nout a\ndifferent model so the next model we\nwant to try out is the decision tree\nregressor so the concept is the very\nsame we\nimport this then we create a instance of\nthis\nand then we fit the data like so\nand then we predict the values so let's\ncall model.predict and again let's\ncalculate the\nmean squared error and then the root of\nthis and print this\nand now this time the root mean squared\nerror is\nonly 29 000. so it's already a lot\nbetter now let's try out one more so\nlet's also try out the\nrandom forest regressor so this will\nbasically\ncombine multiple decision trees into a\nforest so again the same approach we\nimport this we create one\nwe fit the data and then we call model\ndot predict and calculate the error and\nhave a look at this\nand this time the error is still 29 000\nso it's not really better than the\ndecision tree\nso what we do here is obviously a little\nbit cumbersome we do this for every\nmodel that we find and then we try out\nthe different values\nbut now what we didn't consider yet is\nthat for each of these\nmodels we also can use different\nparameter values that we\ncan put in for example for a decision\ntree we can use\nthe max depth parameter and then it\nmight perform very differently for\ndifferent parameters so in order to find\nthe best model\nwith the best parameters um there is\na so-called grid search\ncv method which stands for grid search\nwith cross validation and the way this\nworks is\nwe import this and then we define the\nset of different parameters we want to\ntry out for example for the max\ndepth parameter we can try out\nthese different values then we create\na dictionary with this and this has to\nbe the same\nname as the keyword argument for the\nin this case the decision tree regressor\nso you can find this in the\nsklearn documentation and then we create\na\ngrid search cv with this regressor\nand the parameters and in this case the\nscoring\nis the negated mean squared error so\nthis is just what we want to use for\na regression problem with the grid\nsearch\nand then again we call the fit method\nwith x and y\nand run this and now what is happening\nhere so this will basically\nloop over all the different parameters\nthat we\nput in here and try out all the\ndifferent\nparameters and each time evaluates\nthe error and then chooses the best\nmodel for us so now this has been\nexecuted and now we get the best\nestimator\nby saying grid search dot best estimator\nunderscore so now let's use this best\nestimator here is our regressor and now\nagain let's\ntrain it on the whole training data and\nthen\ncall calculate the error and see what we\nget so this is the final error we get\nfor our\nfinal regressor and this is actually\nhigher again than\nthis one we used here and this might be\na little bit surprising\nbecause actually we search for the best\none here\nbut what could have happened here is\nthat in the decision trees there is some\nkind of\nrandomness in it even though we said\nrandom state equals zero\nso it might be slightly worse again but\nthat's fine so we still keep this\nregressor now\nand continue with this so now let's\nlearn how to apply this to new data like\nwe have to do in the app later\nso let's have a quick look at the data\nframe again and we see we have\nthese columns country education level\nand years\ncode pro so let's say in the app later\nwe\nget a new array and it will have\nthese values so here we start with the\nstrings that the user puts in so the\ncountry\nthe degree and the experience so now our\nx\nlooks like this and now what we do here\nis we want\nto apply the label encoder for the\ncountry so the country is the\nfirst or the zero column then we want to\napply the label encoder for the\neducation\nand then we also want to have this as a\nfloat\narray so let's apply this and then we\nsee\nnow we get these values and we can put\nthis\nin our regressor and then predict this\nso yeah with these information we get\nthis\npredicted salary and now this is what we\nhave to do in our\napp but before we can use this in our\napp first\nwe have to of course save our model\nand for this we use pickles so we can\nsay\nimport pickle and then we want to save\nthe regressor the label encoder for the\ncountry\nand the label encoder for the education\nso for this we\ncreate a dictionary then we open\na pickle file and here we want to\nopen this in right binary mode so this\nis important for pickle here\nand then we say pickle dump the\ndata so this here in this file\nso now if we execute this then this\nshould save\nthis data in our directory\nand we can check this by loading it\nagain\nin read binary mode and then say data\nequals\npickle dot load and then we can access\nthe model the label encoder\nfor the country and for the education by\naccessing the key\nso let's get them back from the data and\nrun this\nand then let's run the prediction with\nour\nloaded model again and then we see we\nget the exact same number that we get\nhere from the\noriginal model so saving and loading\nworks\nall right so now we are done with our\ntwo-parter notebook so now we have the\ncomplete pipeline here so we learned how\nwe can clean the data\nand then create our model and train it\nand save it but now we have to convert\nsome of the code from here to\nour app so let's do this\nso now let's create our streamlet app\nand for this let's open your editor of\nchoice\nand you can see that inside this\ndirectory now we have the csv\nfile and we also have the saved pickle\nfile\nand we have the notebook so yeah this\nsavings step here worked so now let's\ncreate\nthree new files so let's create one\napp.pi\nfile then let's create a separate file\nfor the\npredict page so we call this predict\nunderscore page dot pi and let's create\nanother one and we want to call this\nexplore underscore page dot\npi so let's start with the predict page\nand first of course we want to\nimport these things we need so we import\nstreamlet\nsst then we also need pickle to load the\ndata so import\npickle and we need numpy so we import\nnumpy snp and now we need\nsome code from our notebook so the first\nthing\nis we want to load the model so let's\ncreate a function define\nload model and here let's go back to\nour notebook here we want to copy\nthis part of the code so we\nopen our pickup file and say this is our\ndata\nand then here we return the data then of\ncourse we want to\nexecute this so we say data equals load\nmodel\nand now we want to access the different\nkeys\nlike we did here so we create the\nregressor the label encoder for the\ncountry and for the education\nso let's simply call this regressor\nso now let's create the prediction page\nand i again wrap this into a function\nand later you will see why i do this\nso let's create a function and let's\ncall this\nshow predict underscore page\nand here now we will build our streamlet\napplication\nand the way this works is we create\ndifferent\nwidgets for example we can say\nstreamlets.title\nand then here we can say software\ndeveloper salary\nprediction so now this will display a\ntitle and for example we can also simply\nwrite text by saying streamlet dot\nwrite and then here we can use a\nmulti-line string and we can use\na markdown syntax here for example if we\nuse\nthree hashtags then this will be a h3\ntag\nso let's say we need some\ninformation to\npredict the salary\nso now let's save this and now in the\nterminal so here again i want to say\nconda activate ml and now in order to\nrun this file we say streamlit\nand then run and now for the first\nexample yes\nlet's use this predict page.pi\nso now if we execute this then this will\nstart the server so now it will open up\nthe app\nand as you can see we don't see anything\nand this is because we\nonly defined the page but we didn't\nexecute this so now in order to\nexecute this actually i want to\nrun this from the main app.pi\nfile so here again we say import\nstreamlet and then we import\nthis show predict page so we say from\npredict page we import this function\nshow predict page and then let's execute\nthis here\nand now let's quit the\nserver again by hitting control c\nand then let's say streamlet run\nand then we actually want to run the\napp.pi\nfile and now if we go to this address\nagain\nthen now we see we have our app up and\nrunning so now this is working\nso now the next thing here is what we\nwant to add\nis we want to add two select boxes for\nthe countries\nand the educations so let me\ncopy and paste this in here and this\nhere is a\ntuple with all the different choices so\nall these countries\nand you can find them in your notebook\nfor example at this position\nwhere we printed the value counts\nso all these different countries that we\nkeep so we don't keep the other category\nso these are all the different choices\nfor the countries\nand then the same with the education\nlevel so these are the\nexact names of the education categories\nthat we keep\nand now in order to create a select box\nwe can say\ncountry equals streamlets\ndot c lectbox and now this\nmust get the number of choices so here\nthe countries\nwhich can be a tuple or a list so here\nwe use a tuple\nand we can give this a name as first\nargument so we can say\ncountry and then comma countries\nand now if we save this and go back to\nour\napp we can click on rerun\nand now here we see we have our select\nbox so this\nis working so yeah pretty cool and now\nwhat happens here is\nif we choose a different value here for\nexample\ngermany then in our\nscript this will be the value of this\nvariable so now this will our country\nwill be\ngermany and then we can work with this\nso yeah let's\ncopy and paste this in here and now we\nalso want a select box for the education\nso let's call this education and then as\na string we use\neducation level and here we put in\nall the different education choices that\nwe defined so\neducation level so now we have this and\nnow we want to select\nthe years of experience so experience\nequals and for this we use a slider\nand we get this by saying\nstreamlets.slider\nand then the name we say years\nof experience and then we can give this\na\nmin value a max value and a default\nvalue so let's say\nthis should range from 0 to 50 and the\nstart value is\nthree so now again let's save\nthis and let's go to our app and run\nthis\nand then we see we have the education\nlevel\nas selection box and we have the slider\nwith the default\nthree so now this is working as well so\nlet's add a\nbutton to start the prediction so we can\nadd a button by saying streamlets.button\nand then the name for this button is\nlet's say\nlet's call this calculate salary\nand now again we can assign this to a\nvariable\nso we can say okay equals\nstreamlets.but so\nthis means that if we don't click on the\nbutton\nthen this is false and if we click on\nthe button then this is true\nso now only if this is true if we\nclicked on the button\nthen what we want to do here is we want\nto start the prediction so let's go back\nto\nour notebook and now what we want to do\nhere is\nthe same as i did here so we\ncreated this numpy array like we\ndo here so let's copy and paste this\nthen we transform the country the\neducation\nwanted as a float like so\nand then we predict it so let's copy and\npaste this\nas well so now here we have the\ntransforms for our numpy array\nand now here instead of these hard-coded\nvalues\nthe nice thing is that we already have\nthe information\nso the this is just the country variable\nthat we get from this\nselect box this is the education\nlevel and this is the experience level\nso now we have all the information that\nwe need\nand now we simply need to calculate the\npredictions so we say\nsalary equals and then we say regressor\ndot predict and we want to predict our\nx and now as last thing we want to\ndisplay this so for this for example we\ncan say\nstreamlets.right or here i show you\nanother\nthing so we can use the sub header which\nis kind of a smaller header and here\nlet's use a\nf string and then let's say the\nestimated\nsalary is and then this is in\ndollar and now let's use our variable\nhere so this is\nthe salary and this is a numpy array\nwith only\none value in it so we want to access the\nfirst\nvalue like so and we also want to\ndisplay it with only two\ndecimal values so we can format it like\nthis so let's save this and let's go\nback to our app again\nand rerun this and then we have the\nbutton\nand now if we click this then we should\nsee the results so let's try it out\nand yeah this is working so here we see\nwe\nchose germany and we have less than a\nbachelor's and three years experience\nand this is our predicted salary\nnow for example let's try this out so\nfor example\nif we use the united states then this\nis higher than in germany so now we have\nthe\nprediction page so let's add a sidebar\nand then let's also add the second page\nso for the sidebar what we do here is we\ngo to the app\ndot py file and again we create a\nselection box by saying\nstreamlets.selectbox\nand then here as first argument we give\nit the\ntitle so let's call this explore\nor predict and then a second argument\nas a tuple we give it the two choices so\nwe want the predict\npage and we want the explore page\nso now let's first save this and have a\nlook at the app again\nand here we see a error name error name\nst is not defined and this is by the way\nvery nice in streamlit so we immediately\nsee the error here in a nice way\nso if we go back obviously i have to\nimport streamlet\nsst so let's save this\nagain and check our app again\nand now we have this select box here\nexplore or predict and now in order to\ncreate a\nsidebar the only thing we have to do is\ncall\nst dot site bar\nand then dot select box so with this we\ncan move\nany widget for example also a button or\na slider to the sidebar\nso now if we go back then we should see\nthe sidebar so yeah this is working now\nwe have a nice little sidebar where we\ncan choose between the different sites\nso now the only thing left to do is\nimplement the explore page\nso let's implement the explorepage.pi so\nhere again we\nimport streamlet as st\nthen we import pandas\nas pd then we\nimport matplotlib dot\npi plot as plt\nand now we want to load and clean the\ndata the same way we did it\nin the notebook so let's go back to our\nnotebook and let's copy all the things\nwe need\nto clean the data so for this we\nwant to for example want to\ncopy these functions that we applied so\nwe simply\ncopy and paste this in here then let's\nhave a look we also\nat some point we cleaned the experience\nlike so so let's also copy and\npaste this in here then let me close\nthis here\nand now let's also search for the clean\neducation so we copy and paste\nthis from our notebook so now we need a\nfunction to\nload the data so let's call this define\nload data and now here we\nload the data frame and then we apply\nall the transformations that we did in\nthis notebook\nso here first of course we\nload the csv file and now let's go back\nthrough our notebook and apply\nall the transformations that we did here\nso only take only the columns we want\nthen we rename the converted comp\nto salary so now we have to go through\nthis notebook and copy and paste\nall the transformations that we apply so\ni will simplify this for you\nand just copy and paste all the steps\nthat we used in here\nso yeah these are the exact same same\nsteps that we used in the notebook\nand we apply them here and then we\nreturn\nthe data frame from this function so now\nwe have our load\ndata function and of course we also want\nto execute this so we say data frame\nequals load data and now i want to show\nyou a nice little tip\nthat we can do with streamlit so\nnow whenever we refresh the page\nthen it will load the data again because\nit will\nexecute this script from the top\nso in order to avoid loading this\nagain and again and applying all these\nsteps again\nwe can actually cache this step\nsimply by using a decorator and this is\nst dot cash so now this\nonce we have executed this one time\nthen it will cache it and it is\navailable the next time again\nso this is a nice little trick that we\ncan do with streamlet to improve the\nperformance of our app\nso now we come to the actual page that\nwe want to display and again\nfor this we create a function and we\ncall this\nshow explore page\nand here again we give it a title\nand then a smaller title by saying\nstreamlets.title\nand then streamlets.right and now for\nthis little example i want to display\nthree different charts one pie chart\none bar plot and one line chart\nso for the pie chart we want to plot\nthe value counts of the country so we\ncan access\nthe country like so and then we can get\nthe\nvalue counts by calling value\ncounts and now we want to put this into\na pie chart and for this we use\nmatplotlib and then let's simply copy\nand paste this for you\nso we create a subplot and then we can\ncall\naccess.pi with this\ndata and the labels is data dot\nindex and then here are some more\narguments to get a nicer look\nand now in order to actually display\nthis so\nfirst let's write a little\nheading first by saying streamlets.right\nand then here as a multi-line string in\nmarkdown format like so let's use\num let's use a h4 tag\nand then we say number of\ndata from different\ncountries and now we want to actually\nplot this figure here and we can do this\nin streamlit by saying\nstreamlets.pie plot\nand then the figure1 and here we can\ndisplay any mudplot clip figure that we\ncreated so this is pretty nice\nso now let's save this and now let's\nactually\nshow this and for this we have to do one\nchange here in the app.pi\nso we also want to import this function\nso we say from explore page we\nimport the show explore page\nand now from our select box we want to\nsave the selection in a variable so we\ncall this\npage and then we say if page\nequals equals if this is the\npredict value then we show\nthe show predict page and otherwise we\nsay\nsorry this must be here otherwise we say\nshow explore page\nand now this should work so now if we go\nback to our app and rerun this\nand then we get a key error converted\ncomp\nso let's have a look at where we load\nthe data and\nhere i renamed this to salary but then i\naccess\nit here and here and here again so let's\nactually do the\nrename step at the very end so it\ndoesn't really matter\nso like here and now let's go back and\nnow this should work so let's rerun this\nand now let's select the explore page\nand i think we have one more typo so\nagain\nlet's go back and here we want the\ncountry of course\nso country and save it again\nand rerun it and now it's working so\nyeah here we have\nour pie chart so let me make this\nsite smaller again so let's add two more\ncharts\nthe bar chart and the line chart\nso first let's again write\na little heading so we say streamlit dot\nright the mean salary based on the\ncountry\nand now the data we want to plot\nis we get it like so so we want to\ngroup the data frame\nby the country and then access\nthe salary for each country and\ncalculate the mean value and also\nsorted in ascending order so we get this\nlike so and then in order to plot this\nwe can use the built-in bar chart of\nstreamlit by saying streamlet.bar chart\nwith the\ndata like so and now this is all we need\nso now if we go\nback and again rerun this then here we\nsee the bar\nchart so this is working pretty nicely\nand now we see we have\nall the different average or mean\nsalaries for each country\nand now as last thing let's also use a\nline chart so for this let's again write\nsome text streamlet.write the mean\nsalary based on the experience\nand here we do the same thing we call\nthis\ngroup by and but here we want to group\nby and this is called years\ncode pro and then again the salary\nand we calculate the mean and sort it\nand now we create a\nline chart by calling\nstreamlets.linechart\nwith this data and save this\nand run it again and reload this\nand now yeah this is working as well\nhere we have our line chart\nall right so yeah this is our final app\nand this is all that i wanted to\nput in in this example obviously you can\nplay around with this and show different\ndata as well so yeah i recommend that\nyou do this\nand also i recommend that you play\naround with this\nmodel here and maybe try to improve this\non your own for example you might try to\nuse more than just the three information\nthat we put in\nfor example you can also try to use the\nage\nand use this as well for training but\nyeah that's it for now and hopefully you\nenjoyed this little tutorial and now\nknow how you can build a machine\nlearning web app from scratch with real\ndata\nand then i hope to see you in one of my\nnext videos\nbye\nyou\n",
  "words": [
    "hi",
    "patrick",
    "python",
    "engineer",
    "channel",
    "today",
    "video",
    "learn",
    "build",
    "machine",
    "learning",
    "web",
    "application",
    "scratch",
    "going",
    "use",
    "real",
    "world",
    "data",
    "stack",
    "overflow",
    "developer",
    "survey",
    "first",
    "part",
    "video",
    "learn",
    "analyze",
    "clean",
    "data",
    "build",
    "machine",
    "learning",
    "model",
    "train",
    "library",
    "later",
    "second",
    "part",
    "video",
    "built",
    "web",
    "application",
    "python",
    "using",
    "streamlit",
    "library",
    "library",
    "make",
    "extremely",
    "easy",
    "really",
    "beginner",
    "friendly",
    "follow",
    "along",
    "without",
    "much",
    "experience",
    "jump",
    "code",
    "let",
    "show",
    "final",
    "application",
    "browser",
    "final",
    "app",
    "running",
    "going",
    "build",
    "software",
    "developer",
    "salary",
    "prediction",
    "app",
    "going",
    "predict",
    "salary",
    "based",
    "information",
    "user",
    "put",
    "example",
    "first",
    "thing",
    "put",
    "country",
    "get",
    "nice",
    "selection",
    "box",
    "select",
    "different",
    "options",
    "choose",
    "education",
    "level",
    "say",
    "example",
    "bachelor",
    "degree",
    "get",
    "nice",
    "little",
    "slider",
    "select",
    "years",
    "experience",
    "click",
    "calculate",
    "salary",
    "get",
    "estimated",
    "salary",
    "case",
    "97",
    "000",
    "let",
    "increase",
    "years",
    "experience",
    "click",
    "see",
    "get",
    "new",
    "higher",
    "value",
    "expect",
    "increase",
    "years",
    "experience",
    "number",
    "background",
    "machine",
    "learning",
    "model",
    "running",
    "trained",
    "real",
    "world",
    "data",
    "predicting",
    "number",
    "based",
    "three",
    "information",
    "give",
    "model",
    "first",
    "part",
    "video",
    "learn",
    "train",
    "save",
    "reuse",
    "model",
    "next",
    "prediction",
    "app",
    "also",
    "switch",
    "second",
    "site",
    "left",
    "sidebar",
    "choose",
    "explore",
    "page",
    "explore",
    "data",
    "used",
    "case",
    "used",
    "real",
    "world",
    "data",
    "stack",
    "overflow",
    "developer",
    "survey",
    "2020",
    "find",
    "website",
    "put",
    "link",
    "description",
    "read",
    "interested",
    "also",
    "download",
    "data",
    "set",
    "publicly",
    "available",
    "put",
    "link",
    "description",
    "video",
    "used",
    "latest",
    "data",
    "2020",
    "also",
    "download",
    "data",
    "past",
    "years",
    "yeah",
    "website",
    "download",
    "csv",
    "file",
    "put",
    "project",
    "folder",
    "let",
    "get",
    "back",
    "web",
    "app",
    "simply",
    "plot",
    "information",
    "get",
    "nice",
    "little",
    "overview",
    "data",
    "also",
    "learn",
    "plotting",
    "web",
    "app",
    "first",
    "thing",
    "plot",
    "little",
    "pie",
    "chart",
    "plot",
    "number",
    "data",
    "different",
    "countries",
    "see",
    "biggest",
    "chunk",
    "united",
    "states",
    "also",
    "lot",
    "data",
    "uk",
    "germany",
    "india",
    "canada",
    "getting",
    "smaller",
    "smaller",
    "scroll",
    "get",
    "mean",
    "salary",
    "based",
    "different",
    "countries",
    "might",
    "little",
    "bit",
    "small",
    "see",
    "biggest",
    "average",
    "salary",
    "united",
    "states",
    "see",
    "also",
    "zoom",
    "zoom",
    "plot",
    "really",
    "nice",
    "bar",
    "plot",
    "last",
    "example",
    "show",
    "use",
    "line",
    "chart",
    "plot",
    "mean",
    "salary",
    "based",
    "number",
    "years",
    "experience",
    "starting",
    "0",
    "years",
    "goes",
    "50",
    "years",
    "example",
    "see",
    "beginning",
    "salary",
    "increasing",
    "almost",
    "linearly",
    "years",
    "experience",
    "point",
    "stagnating",
    "also",
    "jumping",
    "around",
    "plot",
    "example",
    "learned",
    "use",
    "gears",
    "information",
    "model",
    "combine",
    "multiple",
    "data",
    "points",
    "learn",
    "later",
    "yeah",
    "final",
    "web",
    "app",
    "going",
    "build",
    "also",
    "fully",
    "responsive",
    "make",
    "smaller",
    "still",
    "looks",
    "nice",
    "build",
    "web",
    "app",
    "going",
    "use",
    "streamlit",
    "python",
    "library",
    "makes",
    "extremely",
    "easy",
    "build",
    "beautiful",
    "web",
    "apps",
    "especially",
    "machine",
    "learning",
    "data",
    "science",
    "tasks",
    "learn",
    "second",
    "part",
    "video",
    "promise",
    "library",
    "really",
    "beginner",
    "friendly",
    "takes",
    "care",
    "back",
    "stuff",
    "us",
    "write",
    "little",
    "simple",
    "python",
    "script",
    "yeah",
    "let",
    "first",
    "thing",
    "want",
    "download",
    "developer",
    "service",
    "2020",
    "csv",
    "file",
    "put",
    "project",
    "folder",
    "right",
    "public",
    "survey",
    "2020",
    "open",
    "really",
    "large",
    "file",
    "almost",
    "100",
    "megabyte",
    "see",
    "lot",
    "information",
    "example",
    "scroll",
    "way",
    "end",
    "see",
    "almost",
    "65",
    "000",
    "data",
    "points",
    "65",
    "000",
    "different",
    "developers",
    "also",
    "scroll",
    "right",
    "see",
    "lot",
    "different",
    "columns",
    "lot",
    "different",
    "questions",
    "answered",
    "also",
    "lot",
    "data",
    "points",
    "n",
    "available",
    "ca",
    "use",
    "information",
    "yeah",
    "first",
    "part",
    "learn",
    "clean",
    "data",
    "use",
    "information",
    "want",
    "let",
    "start",
    "project",
    "setup",
    "new",
    "directory",
    "call",
    "ml",
    "app",
    "first",
    "thing",
    "recommend",
    "create",
    "virtual",
    "environment",
    "either",
    "use",
    "python",
    "virtual",
    "display",
    "commands",
    "case",
    "want",
    "use",
    "conda",
    "create",
    "new",
    "conda",
    "environment",
    "way",
    "know",
    "use",
    "anaconda",
    "find",
    "tutorial",
    "page",
    "say",
    "conda",
    "create",
    "minus",
    "n",
    "give",
    "name",
    "case",
    "want",
    "call",
    "ml",
    "machine",
    "learning",
    "also",
    "tell",
    "python",
    "version",
    "want",
    "use",
    "latest",
    "one",
    "python",
    "hit",
    "enter",
    "yes",
    "created",
    "environment",
    "want",
    "activate",
    "say",
    "conda",
    "activate",
    "ml",
    "activated",
    "terminal",
    "see",
    "see",
    "right",
    "side",
    "want",
    "install",
    "packages",
    "need",
    "could",
    "either",
    "say",
    "pip",
    "install",
    "libraries",
    "tell",
    "actually",
    "recommended",
    "way",
    "streamlet",
    "case",
    "m1",
    "mac",
    "issues",
    "pip",
    "installs",
    "using",
    "conda",
    "install",
    "fine",
    "first",
    "thing",
    "want",
    "say",
    "conda",
    "pip",
    "install",
    "streamlit",
    "hit",
    "enter",
    "right",
    "installed",
    "streamlit",
    "dependencies",
    "example",
    "also",
    "already",
    "installed",
    "numpy",
    "panda",
    "verify",
    "say",
    "conda",
    "install",
    "numpy",
    "pandas",
    "hit",
    "enter",
    "already",
    "see",
    "requested",
    "packages",
    "already",
    "installed",
    "need",
    "want",
    "say",
    "conda",
    "install",
    "also",
    "want",
    "matplotlib",
    "plotting",
    "also",
    "want",
    "scikit",
    "learn",
    "machine",
    "learning",
    "model",
    "use",
    "pip",
    "fine",
    "use",
    "conda",
    "let",
    "hit",
    "enter",
    "right",
    "everything",
    "need",
    "want",
    "create",
    "notebook",
    "play",
    "around",
    "data",
    "train",
    "model",
    "also",
    "want",
    "install",
    "kernel",
    "virtual",
    "environment",
    "use",
    "command",
    "python",
    "kernel",
    "install",
    "minus",
    "minus",
    "user",
    "minus",
    "minus",
    "name",
    "equals",
    "name",
    "environment",
    "ml",
    "case",
    "right",
    "start",
    "notebook",
    "server",
    "saying",
    "notebook",
    "hit",
    "enter",
    "right",
    "see",
    "folder",
    "see",
    "already",
    "csv",
    "file",
    "survey",
    "data",
    "folder",
    "also",
    "already",
    "prepared",
    "notebook",
    "case",
    "want",
    "click",
    "new",
    "select",
    "environment",
    "case",
    "ml",
    "used",
    "kernel",
    "install",
    "command",
    "see",
    "click",
    "new",
    "notebook",
    "start",
    "case",
    "already",
    "prepared",
    "notebook",
    "walk",
    "fast",
    "find",
    "notebook",
    "available",
    "github",
    "put",
    "link",
    "description",
    "want",
    "import",
    "pandas",
    "matplotlib",
    "want",
    "read",
    "csv",
    "file",
    "saying",
    "read",
    "let",
    "execute",
    "cell",
    "let",
    "display",
    "first",
    "five",
    "rows",
    "saying",
    "see",
    "first",
    "five",
    "rows",
    "said",
    "data",
    "set",
    "large",
    "61",
    "columns",
    "also",
    "lot",
    "missing",
    "data",
    "nan",
    "right",
    "let",
    "start",
    "cleaning",
    "data",
    "frame",
    "want",
    "keep",
    "columns",
    "want",
    "keep",
    "column",
    "country",
    "add",
    "level",
    "education",
    "level",
    "years",
    "code",
    "pro",
    "number",
    "years",
    "professional",
    "experience",
    "employment",
    "status",
    "example",
    "developer",
    "working",
    "full",
    "time",
    "converted",
    "comp",
    "column",
    "salary",
    "converted",
    "dollars",
    "yearly",
    "salary",
    "want",
    "keep",
    "rename",
    "converted",
    "comp",
    "salary",
    "saying",
    "let",
    "run",
    "look",
    "head",
    "see",
    "country",
    "education",
    "level",
    "years",
    "code",
    "pro",
    "employment",
    "salary",
    "obviously",
    "also",
    "keep",
    "data",
    "columns",
    "information",
    "keep",
    "better",
    "able",
    "train",
    "model",
    "later",
    "also",
    "want",
    "want",
    "bother",
    "user",
    "much",
    "information",
    "fill",
    "yeah",
    "case",
    "using",
    "data",
    "points",
    "predict",
    "salary",
    "see",
    "already",
    "lot",
    "missing",
    "information",
    "user",
    "put",
    "salary",
    "training",
    "data",
    "want",
    "data",
    "salary",
    "available",
    "want",
    "drop",
    "columns",
    "nan",
    "saying",
    "data",
    "frame",
    "equals",
    "data",
    "frame",
    "data",
    "frame",
    "salary",
    "null",
    "execute",
    "look",
    "see",
    "first",
    "rows",
    "already",
    "salary",
    "salary",
    "data",
    "points",
    "let",
    "quick",
    "look",
    "information",
    "saying",
    "data",
    "frame",
    "dot",
    "info",
    "see",
    "almost",
    "35",
    "entries",
    "columns",
    "also",
    "see",
    "data",
    "type",
    "think",
    "object",
    "means",
    "string",
    "next",
    "thing",
    "want",
    "also",
    "want",
    "drop",
    "rows",
    "one",
    "columns",
    "number",
    "saying",
    "data",
    "frame",
    "equals",
    "data",
    "frame",
    "dot",
    "drop",
    "n",
    "inspect",
    "data",
    "frame",
    "null",
    "dot",
    "sum",
    "get",
    "zero",
    "column",
    "use",
    "data",
    "points",
    "data",
    "course",
    "getting",
    "rid",
    "data",
    "radical",
    "approach",
    "cleaning",
    "data",
    "approaches",
    "use",
    "example",
    "fill",
    "missing",
    "data",
    "mean",
    "column",
    "case",
    "still",
    "enough",
    "data",
    "points",
    "available",
    "fine",
    "drop",
    "next",
    "thing",
    "want",
    "want",
    "keep",
    "data",
    "points",
    "user",
    "employed",
    "full",
    "time",
    "saying",
    "data",
    "frame",
    "equals",
    "data",
    "frame",
    "employment",
    "equals",
    "equals",
    "employed",
    "full",
    "time",
    "keep",
    "rows",
    "want",
    "drop",
    "column",
    "employment",
    "need",
    "prediction",
    "let",
    "run",
    "print",
    "info",
    "see",
    "columns",
    "drop",
    "employment",
    "next",
    "thing",
    "want",
    "clean",
    "country",
    "data",
    "say",
    "data",
    "frame",
    "country",
    "dot",
    "counts",
    "hit",
    "enter",
    "see",
    "many",
    "data",
    "points",
    "country",
    "data",
    "united",
    "states",
    "also",
    "see",
    "lot",
    "information",
    "lot",
    "countries",
    "one",
    "data",
    "point",
    "want",
    "get",
    "rid",
    "smaller",
    "countries",
    "way",
    "want",
    "offend",
    "countries",
    "sure",
    "great",
    "developers",
    "thing",
    "use",
    "example",
    "one",
    "data",
    "point",
    "monaco",
    "might",
    "actually",
    "confuse",
    "model",
    "ca",
    "really",
    "learn",
    "one",
    "data",
    "point",
    "want",
    "get",
    "rid",
    "countries",
    "values",
    "order",
    "clean",
    "countries",
    "function",
    "shorten",
    "categories",
    "gets",
    "categories",
    "must",
    "value",
    "counts",
    "cut",
    "value",
    "play",
    "around",
    "number",
    "samples",
    "greater",
    "equal",
    "cut",
    "value",
    "keep",
    "otherwise",
    "combine",
    "new",
    "category",
    "call",
    "countries",
    "execute",
    "function",
    "say",
    "shorten",
    "categories",
    "give",
    "counts",
    "cut",
    "400",
    "case",
    "change",
    "data",
    "frame",
    "saying",
    "dataframe",
    "country",
    "equals",
    "dataframe",
    "country",
    "dot",
    "map",
    "give",
    "country",
    "map",
    "look",
    "value",
    "counts",
    "right",
    "see",
    "kept",
    "countries",
    "united",
    "states",
    "still",
    "biggest",
    "one",
    "new",
    "category",
    "biggest",
    "chunk",
    "next",
    "thing",
    "want",
    "let",
    "inspect",
    "salary",
    "range",
    "want",
    "plot",
    "salary",
    "country",
    "let",
    "execute",
    "box",
    "plot",
    "see",
    "box",
    "plot",
    "see",
    "different",
    "countries",
    "salary",
    "ranging",
    "zero",
    "way",
    "two",
    "million",
    "way",
    "box",
    "plot",
    "interpreted",
    "small",
    "area",
    "see",
    "median",
    "value",
    "points",
    "actually",
    "outliers",
    "lot",
    "outliers",
    "data",
    "frame",
    "actually",
    "data",
    "points",
    "median",
    "area",
    "want",
    "want",
    "keep",
    "data",
    "information",
    "see",
    "none",
    "boxes",
    "reaches",
    "line",
    "250",
    "000",
    "define",
    "cut",
    "value",
    "keep",
    "salaries",
    "smaller",
    "range",
    "command",
    "also",
    "want",
    "keep",
    "salaries",
    "greater",
    "10",
    "000",
    "think",
    "working",
    "full",
    "time",
    "earn",
    "ten",
    "thousand",
    "dollars",
    "year",
    "let",
    "keep",
    "also",
    "want",
    "drop",
    "categories",
    "command",
    "let",
    "plot",
    "box",
    "plot",
    "hit",
    "enter",
    "better",
    "detect",
    "boxes",
    "see",
    "median",
    "range",
    "yeah",
    "still",
    "outliers",
    "many",
    "anymore",
    "next",
    "thing",
    "want",
    "clean",
    "years",
    "code",
    "pro",
    "inspect",
    "different",
    "values",
    "get",
    "see",
    "string",
    "value",
    "also",
    "less",
    "one",
    "year",
    "50",
    "years",
    "want",
    "convert",
    "float",
    "less",
    "one",
    "year",
    "say",
    "cut",
    "50",
    "say",
    "create",
    "function",
    "clean",
    "experience",
    "gets",
    "x",
    "say",
    "x",
    "50",
    "years",
    "exactly",
    "string",
    "return",
    "50",
    "less",
    "one",
    "year",
    "return",
    "otherwise",
    "convert",
    "float",
    "transform",
    "saying",
    "data",
    "frame",
    "years",
    "code",
    "equals",
    "data",
    "frame",
    "use",
    "code",
    "dot",
    "apply",
    "function",
    "let",
    "hit",
    "enter",
    "want",
    "similar",
    "thing",
    "education",
    "level",
    "look",
    "unique",
    "values",
    "see",
    "different",
    "answers",
    "want",
    "combine",
    "categories",
    "want",
    "keep",
    "bachelor",
    "master",
    "degree",
    "professional",
    "doctoral",
    "degree",
    "say",
    "things",
    "say",
    "less",
    "batch",
    "class",
    "create",
    "function",
    "define",
    "clean",
    "education",
    "check",
    "string",
    "x",
    "bachelor",
    "degree",
    "return",
    "bachelor",
    "degree",
    "master",
    "degree",
    "postgrad",
    "less",
    "bachelors",
    "apply",
    "education",
    "level",
    "column",
    "hit",
    "enter",
    "let",
    "inspect",
    "unique",
    "values",
    "see",
    "kept",
    "values",
    "right",
    "almost",
    "done",
    "cleaning",
    "data",
    "still",
    "one",
    "problem",
    "data",
    "example",
    "number",
    "years",
    "experience",
    "float",
    "education",
    "level",
    "country",
    "string",
    "model",
    "ca",
    "really",
    "understand",
    "string",
    "transform",
    "string",
    "values",
    "unique",
    "value",
    "number",
    "model",
    "understand",
    "example",
    "four",
    "strings",
    "use",
    "number",
    "zero",
    "one",
    "two",
    "three",
    "order",
    "transform",
    "data",
    "use",
    "label",
    "encoder",
    "import",
    "create",
    "label",
    "encoder",
    "education",
    "fix",
    "data",
    "also",
    "transform",
    "step",
    "assign",
    "back",
    "education",
    "level",
    "column",
    "look",
    "unique",
    "values",
    "see",
    "longer",
    "strings",
    "numbers",
    "zero",
    "two",
    "one",
    "three",
    "order",
    "really",
    "important",
    "label",
    "encoder",
    "knows",
    "number",
    "belongs",
    "string",
    "later",
    "convert",
    "back",
    "yeah",
    "education",
    "level",
    "country",
    "map",
    "country",
    "unique",
    "number",
    "create",
    "separate",
    "label",
    "encoder",
    "call",
    "le",
    "country",
    "apply",
    "fit",
    "transform",
    "let",
    "look",
    "unique",
    "values",
    "country",
    "see",
    "numbers",
    "longer",
    "string",
    "right",
    "final",
    "data",
    "use",
    "finally",
    "start",
    "training",
    "model",
    "split",
    "data",
    "features",
    "x",
    "label",
    "label",
    "salary",
    "predict",
    "features",
    "rest",
    "columns",
    "country",
    "education",
    "level",
    "years",
    "experience",
    "get",
    "columns",
    "saying",
    "data",
    "frame",
    "drop",
    "salary",
    "salary",
    "column",
    "x",
    "want",
    "try",
    "different",
    "machine",
    "learning",
    "models",
    "use",
    "library",
    "case",
    "deal",
    "regression",
    "problem",
    "means",
    "predict",
    "defined",
    "category",
    "like",
    "cat",
    "dog",
    "predict",
    "number",
    "number",
    "anything",
    "know",
    "0",
    "1",
    "million",
    "regression",
    "classification",
    "first",
    "obvious",
    "choice",
    "linear",
    "regression",
    "model",
    "import",
    "create",
    "regression",
    "model",
    "like",
    "like",
    "models",
    "sk",
    "learn",
    "library",
    "first",
    "fit",
    "data",
    "fit",
    "x",
    "dot",
    "values",
    "run",
    "predict",
    "new",
    "values",
    "say",
    "model",
    "dot",
    "predict",
    "x",
    "get",
    "predicted",
    "values",
    "let",
    "well",
    "one",
    "node",
    "normally",
    "want",
    "split",
    "data",
    "training",
    "testing",
    "even",
    "training",
    "validation",
    "testing",
    "data",
    "training",
    "fitting",
    "training",
    "data",
    "simplicity",
    "whole",
    "data",
    "get",
    "predictions",
    "back",
    "order",
    "um",
    "evaluate",
    "good",
    "model",
    "performs",
    "regression",
    "plot",
    "problem",
    "usually",
    "look",
    "mean",
    "squared",
    "error",
    "also",
    "look",
    "mean",
    "absolute",
    "error",
    "import",
    "want",
    "calculate",
    "mean",
    "squared",
    "error",
    "based",
    "actual",
    "labels",
    "new",
    "predicted",
    "label",
    "get",
    "actual",
    "number",
    "back",
    "calculate",
    "square",
    "root",
    "numpy",
    "square",
    "root",
    "error",
    "let",
    "look",
    "error",
    "right",
    "error",
    "39",
    "000",
    "dollars",
    "means",
    "model",
    "average",
    "number",
    "still",
    "pretty",
    "high",
    "think",
    "numbers",
    "range",
    "10",
    "000",
    "way",
    "250",
    "000",
    "time",
    "predict",
    "salary",
    "average",
    "value",
    "still",
    "pretty",
    "high",
    "let",
    "try",
    "different",
    "model",
    "next",
    "model",
    "want",
    "try",
    "decision",
    "tree",
    "regressor",
    "concept",
    "import",
    "create",
    "instance",
    "fit",
    "data",
    "like",
    "predict",
    "values",
    "let",
    "call",
    "let",
    "calculate",
    "mean",
    "squared",
    "error",
    "root",
    "print",
    "time",
    "root",
    "mean",
    "squared",
    "error",
    "29",
    "already",
    "lot",
    "better",
    "let",
    "try",
    "one",
    "let",
    "also",
    "try",
    "random",
    "forest",
    "regressor",
    "basically",
    "combine",
    "multiple",
    "decision",
    "trees",
    "forest",
    "approach",
    "import",
    "create",
    "one",
    "fit",
    "data",
    "call",
    "model",
    "dot",
    "predict",
    "calculate",
    "error",
    "look",
    "time",
    "error",
    "still",
    "29",
    "000",
    "really",
    "better",
    "decision",
    "tree",
    "obviously",
    "little",
    "bit",
    "cumbersome",
    "every",
    "model",
    "find",
    "try",
    "different",
    "values",
    "consider",
    "yet",
    "models",
    "also",
    "use",
    "different",
    "parameter",
    "values",
    "put",
    "example",
    "decision",
    "tree",
    "use",
    "max",
    "depth",
    "parameter",
    "might",
    "perform",
    "differently",
    "different",
    "parameters",
    "order",
    "find",
    "best",
    "model",
    "best",
    "parameters",
    "um",
    "grid",
    "search",
    "cv",
    "method",
    "stands",
    "grid",
    "search",
    "cross",
    "validation",
    "way",
    "works",
    "import",
    "define",
    "set",
    "different",
    "parameters",
    "want",
    "try",
    "example",
    "max",
    "depth",
    "parameter",
    "try",
    "different",
    "values",
    "create",
    "dictionary",
    "name",
    "keyword",
    "argument",
    "case",
    "decision",
    "tree",
    "regressor",
    "find",
    "sklearn",
    "documentation",
    "create",
    "grid",
    "search",
    "cv",
    "regressor",
    "parameters",
    "case",
    "scoring",
    "negated",
    "mean",
    "squared",
    "error",
    "want",
    "use",
    "regression",
    "problem",
    "grid",
    "search",
    "call",
    "fit",
    "method",
    "x",
    "run",
    "happening",
    "basically",
    "loop",
    "different",
    "parameters",
    "put",
    "try",
    "different",
    "parameters",
    "time",
    "evaluates",
    "error",
    "chooses",
    "best",
    "model",
    "us",
    "executed",
    "get",
    "best",
    "estimator",
    "saying",
    "grid",
    "search",
    "dot",
    "best",
    "estimator",
    "underscore",
    "let",
    "use",
    "best",
    "estimator",
    "regressor",
    "let",
    "train",
    "whole",
    "training",
    "data",
    "call",
    "calculate",
    "error",
    "see",
    "get",
    "final",
    "error",
    "get",
    "final",
    "regressor",
    "actually",
    "higher",
    "one",
    "used",
    "might",
    "little",
    "bit",
    "surprising",
    "actually",
    "search",
    "best",
    "one",
    "could",
    "happened",
    "decision",
    "trees",
    "kind",
    "randomness",
    "even",
    "though",
    "said",
    "random",
    "state",
    "equals",
    "zero",
    "might",
    "slightly",
    "worse",
    "fine",
    "still",
    "keep",
    "regressor",
    "continue",
    "let",
    "learn",
    "apply",
    "new",
    "data",
    "like",
    "app",
    "later",
    "let",
    "quick",
    "look",
    "data",
    "frame",
    "see",
    "columns",
    "country",
    "education",
    "level",
    "years",
    "code",
    "pro",
    "let",
    "say",
    "app",
    "later",
    "get",
    "new",
    "array",
    "values",
    "start",
    "strings",
    "user",
    "puts",
    "country",
    "degree",
    "experience",
    "x",
    "looks",
    "like",
    "want",
    "apply",
    "label",
    "encoder",
    "country",
    "country",
    "first",
    "zero",
    "column",
    "want",
    "apply",
    "label",
    "encoder",
    "education",
    "also",
    "want",
    "float",
    "array",
    "let",
    "apply",
    "see",
    "get",
    "values",
    "put",
    "regressor",
    "predict",
    "yeah",
    "information",
    "get",
    "predicted",
    "salary",
    "app",
    "use",
    "app",
    "first",
    "course",
    "save",
    "model",
    "use",
    "pickles",
    "say",
    "import",
    "pickle",
    "want",
    "save",
    "regressor",
    "label",
    "encoder",
    "country",
    "label",
    "encoder",
    "education",
    "create",
    "dictionary",
    "open",
    "pickle",
    "file",
    "want",
    "open",
    "right",
    "binary",
    "mode",
    "important",
    "pickle",
    "say",
    "pickle",
    "dump",
    "data",
    "file",
    "execute",
    "save",
    "data",
    "directory",
    "check",
    "loading",
    "read",
    "binary",
    "mode",
    "say",
    "data",
    "equals",
    "pickle",
    "dot",
    "load",
    "access",
    "model",
    "label",
    "encoder",
    "country",
    "education",
    "accessing",
    "key",
    "let",
    "get",
    "back",
    "data",
    "run",
    "let",
    "run",
    "prediction",
    "loaded",
    "model",
    "see",
    "get",
    "exact",
    "number",
    "get",
    "original",
    "model",
    "saving",
    "loading",
    "works",
    "right",
    "done",
    "notebook",
    "complete",
    "pipeline",
    "learned",
    "clean",
    "data",
    "create",
    "model",
    "train",
    "save",
    "convert",
    "code",
    "app",
    "let",
    "let",
    "create",
    "streamlet",
    "app",
    "let",
    "open",
    "editor",
    "choice",
    "see",
    "inside",
    "directory",
    "csv",
    "file",
    "also",
    "saved",
    "pickle",
    "file",
    "notebook",
    "yeah",
    "savings",
    "step",
    "worked",
    "let",
    "create",
    "three",
    "new",
    "files",
    "let",
    "create",
    "one",
    "file",
    "let",
    "create",
    "separate",
    "file",
    "predict",
    "page",
    "call",
    "predict",
    "underscore",
    "page",
    "dot",
    "pi",
    "let",
    "create",
    "another",
    "one",
    "want",
    "call",
    "explore",
    "underscore",
    "page",
    "dot",
    "pi",
    "let",
    "start",
    "predict",
    "page",
    "first",
    "course",
    "want",
    "import",
    "things",
    "need",
    "import",
    "streamlet",
    "sst",
    "also",
    "need",
    "pickle",
    "load",
    "data",
    "import",
    "pickle",
    "need",
    "numpy",
    "import",
    "numpy",
    "snp",
    "need",
    "code",
    "notebook",
    "first",
    "thing",
    "want",
    "load",
    "model",
    "let",
    "create",
    "function",
    "define",
    "load",
    "model",
    "let",
    "go",
    "back",
    "notebook",
    "want",
    "copy",
    "part",
    "code",
    "open",
    "pickup",
    "file",
    "say",
    "data",
    "return",
    "data",
    "course",
    "want",
    "execute",
    "say",
    "data",
    "equals",
    "load",
    "model",
    "want",
    "access",
    "different",
    "keys",
    "like",
    "create",
    "regressor",
    "label",
    "encoder",
    "country",
    "education",
    "let",
    "simply",
    "call",
    "regressor",
    "let",
    "create",
    "prediction",
    "page",
    "wrap",
    "function",
    "later",
    "see",
    "let",
    "create",
    "function",
    "let",
    "call",
    "show",
    "predict",
    "underscore",
    "page",
    "build",
    "streamlet",
    "application",
    "way",
    "works",
    "create",
    "different",
    "widgets",
    "example",
    "say",
    "say",
    "software",
    "developer",
    "salary",
    "prediction",
    "display",
    "title",
    "example",
    "also",
    "simply",
    "write",
    "text",
    "saying",
    "streamlet",
    "dot",
    "write",
    "use",
    "string",
    "use",
    "markdown",
    "syntax",
    "example",
    "use",
    "three",
    "hashtags",
    "h3",
    "tag",
    "let",
    "say",
    "need",
    "information",
    "predict",
    "salary",
    "let",
    "save",
    "terminal",
    "want",
    "say",
    "conda",
    "activate",
    "ml",
    "order",
    "run",
    "file",
    "say",
    "streamlit",
    "run",
    "first",
    "example",
    "yes",
    "let",
    "use",
    "predict",
    "execute",
    "start",
    "server",
    "open",
    "app",
    "see",
    "see",
    "anything",
    "defined",
    "page",
    "execute",
    "order",
    "execute",
    "actually",
    "want",
    "run",
    "main",
    "file",
    "say",
    "import",
    "streamlet",
    "import",
    "show",
    "predict",
    "page",
    "say",
    "predict",
    "page",
    "import",
    "function",
    "show",
    "predict",
    "page",
    "let",
    "execute",
    "let",
    "quit",
    "server",
    "hitting",
    "control",
    "c",
    "let",
    "say",
    "streamlet",
    "run",
    "actually",
    "want",
    "run",
    "file",
    "go",
    "address",
    "see",
    "app",
    "running",
    "working",
    "next",
    "thing",
    "want",
    "add",
    "want",
    "add",
    "two",
    "select",
    "boxes",
    "countries",
    "educations",
    "let",
    "copy",
    "paste",
    "tuple",
    "different",
    "choices",
    "countries",
    "find",
    "notebook",
    "example",
    "position",
    "printed",
    "value",
    "counts",
    "different",
    "countries",
    "keep",
    "keep",
    "category",
    "different",
    "choices",
    "countries",
    "education",
    "level",
    "exact",
    "names",
    "education",
    "categories",
    "keep",
    "order",
    "create",
    "select",
    "box",
    "say",
    "country",
    "equals",
    "streamlets",
    "dot",
    "c",
    "lectbox",
    "must",
    "get",
    "number",
    "choices",
    "countries",
    "tuple",
    "list",
    "use",
    "tuple",
    "give",
    "name",
    "first",
    "argument",
    "say",
    "country",
    "comma",
    "countries",
    "save",
    "go",
    "back",
    "app",
    "click",
    "rerun",
    "see",
    "select",
    "box",
    "working",
    "yeah",
    "pretty",
    "cool",
    "happens",
    "choose",
    "different",
    "value",
    "example",
    "germany",
    "script",
    "value",
    "variable",
    "country",
    "germany",
    "work",
    "yeah",
    "let",
    "copy",
    "paste",
    "also",
    "want",
    "select",
    "box",
    "education",
    "let",
    "call",
    "education",
    "string",
    "use",
    "education",
    "level",
    "put",
    "different",
    "education",
    "choices",
    "defined",
    "education",
    "level",
    "want",
    "select",
    "years",
    "experience",
    "experience",
    "equals",
    "use",
    "slider",
    "get",
    "saying",
    "name",
    "say",
    "years",
    "experience",
    "give",
    "min",
    "value",
    "max",
    "value",
    "default",
    "value",
    "let",
    "say",
    "range",
    "0",
    "50",
    "start",
    "value",
    "three",
    "let",
    "save",
    "let",
    "go",
    "app",
    "run",
    "see",
    "education",
    "level",
    "selection",
    "box",
    "slider",
    "default",
    "three",
    "working",
    "well",
    "let",
    "add",
    "button",
    "start",
    "prediction",
    "add",
    "button",
    "saying",
    "name",
    "button",
    "let",
    "say",
    "let",
    "call",
    "calculate",
    "salary",
    "assign",
    "variable",
    "say",
    "okay",
    "equals",
    "means",
    "click",
    "button",
    "false",
    "click",
    "button",
    "true",
    "true",
    "clicked",
    "button",
    "want",
    "want",
    "start",
    "prediction",
    "let",
    "go",
    "back",
    "notebook",
    "want",
    "created",
    "numpy",
    "array",
    "like",
    "let",
    "copy",
    "paste",
    "transform",
    "country",
    "education",
    "wanted",
    "float",
    "like",
    "predict",
    "let",
    "copy",
    "paste",
    "well",
    "transforms",
    "numpy",
    "array",
    "instead",
    "values",
    "nice",
    "thing",
    "already",
    "information",
    "country",
    "variable",
    "get",
    "select",
    "box",
    "education",
    "level",
    "experience",
    "level",
    "information",
    "need",
    "simply",
    "need",
    "calculate",
    "predictions",
    "say",
    "salary",
    "equals",
    "say",
    "regressor",
    "dot",
    "predict",
    "want",
    "predict",
    "x",
    "last",
    "thing",
    "want",
    "display",
    "example",
    "say",
    "show",
    "another",
    "thing",
    "use",
    "sub",
    "header",
    "kind",
    "smaller",
    "header",
    "let",
    "use",
    "f",
    "string",
    "let",
    "say",
    "estimated",
    "salary",
    "dollar",
    "let",
    "use",
    "variable",
    "salary",
    "numpy",
    "array",
    "one",
    "value",
    "want",
    "access",
    "first",
    "value",
    "like",
    "also",
    "want",
    "display",
    "two",
    "decimal",
    "values",
    "format",
    "like",
    "let",
    "save",
    "let",
    "go",
    "back",
    "app",
    "rerun",
    "button",
    "click",
    "see",
    "results",
    "let",
    "try",
    "yeah",
    "working",
    "see",
    "chose",
    "germany",
    "less",
    "bachelor",
    "three",
    "years",
    "experience",
    "predicted",
    "salary",
    "example",
    "let",
    "try",
    "example",
    "use",
    "united",
    "states",
    "higher",
    "germany",
    "prediction",
    "page",
    "let",
    "add",
    "sidebar",
    "let",
    "also",
    "add",
    "second",
    "page",
    "sidebar",
    "go",
    "app",
    "dot",
    "py",
    "file",
    "create",
    "selection",
    "box",
    "saying",
    "first",
    "argument",
    "give",
    "title",
    "let",
    "call",
    "explore",
    "predict",
    "second",
    "argument",
    "tuple",
    "give",
    "two",
    "choices",
    "want",
    "predict",
    "page",
    "want",
    "explore",
    "page",
    "let",
    "first",
    "save",
    "look",
    "app",
    "see",
    "error",
    "name",
    "error",
    "name",
    "st",
    "defined",
    "way",
    "nice",
    "streamlit",
    "immediately",
    "see",
    "error",
    "nice",
    "way",
    "go",
    "back",
    "obviously",
    "import",
    "streamlet",
    "sst",
    "let",
    "save",
    "check",
    "app",
    "select",
    "box",
    "explore",
    "predict",
    "order",
    "create",
    "sidebar",
    "thing",
    "call",
    "st",
    "dot",
    "site",
    "bar",
    "dot",
    "select",
    "box",
    "move",
    "widget",
    "example",
    "also",
    "button",
    "slider",
    "sidebar",
    "go",
    "back",
    "see",
    "sidebar",
    "yeah",
    "working",
    "nice",
    "little",
    "sidebar",
    "choose",
    "different",
    "sites",
    "thing",
    "left",
    "implement",
    "explore",
    "page",
    "let",
    "implement",
    "import",
    "streamlet",
    "st",
    "import",
    "pandas",
    "pd",
    "import",
    "matplotlib",
    "dot",
    "pi",
    "plot",
    "plt",
    "want",
    "load",
    "clean",
    "data",
    "way",
    "notebook",
    "let",
    "go",
    "back",
    "notebook",
    "let",
    "copy",
    "things",
    "need",
    "clean",
    "data",
    "want",
    "example",
    "want",
    "copy",
    "functions",
    "applied",
    "simply",
    "copy",
    "paste",
    "let",
    "look",
    "also",
    "point",
    "cleaned",
    "experience",
    "like",
    "let",
    "also",
    "copy",
    "paste",
    "let",
    "close",
    "let",
    "also",
    "search",
    "clean",
    "education",
    "copy",
    "paste",
    "notebook",
    "need",
    "function",
    "load",
    "data",
    "let",
    "call",
    "define",
    "load",
    "data",
    "load",
    "data",
    "frame",
    "apply",
    "transformations",
    "notebook",
    "first",
    "course",
    "load",
    "csv",
    "file",
    "let",
    "go",
    "back",
    "notebook",
    "apply",
    "transformations",
    "take",
    "columns",
    "want",
    "rename",
    "converted",
    "comp",
    "salary",
    "go",
    "notebook",
    "copy",
    "paste",
    "transformations",
    "apply",
    "simplify",
    "copy",
    "paste",
    "steps",
    "used",
    "yeah",
    "exact",
    "steps",
    "used",
    "notebook",
    "apply",
    "return",
    "data",
    "frame",
    "function",
    "load",
    "data",
    "function",
    "course",
    "also",
    "want",
    "execute",
    "say",
    "data",
    "frame",
    "equals",
    "load",
    "data",
    "want",
    "show",
    "nice",
    "little",
    "tip",
    "streamlit",
    "whenever",
    "refresh",
    "page",
    "load",
    "data",
    "execute",
    "script",
    "top",
    "order",
    "avoid",
    "loading",
    "applying",
    "steps",
    "actually",
    "cache",
    "step",
    "simply",
    "using",
    "decorator",
    "st",
    "dot",
    "cash",
    "executed",
    "one",
    "time",
    "cache",
    "available",
    "next",
    "time",
    "nice",
    "little",
    "trick",
    "streamlet",
    "improve",
    "performance",
    "app",
    "come",
    "actual",
    "page",
    "want",
    "display",
    "create",
    "function",
    "call",
    "show",
    "explore",
    "page",
    "give",
    "title",
    "smaller",
    "title",
    "saying",
    "little",
    "example",
    "want",
    "display",
    "three",
    "different",
    "charts",
    "one",
    "pie",
    "chart",
    "one",
    "bar",
    "plot",
    "one",
    "line",
    "chart",
    "pie",
    "chart",
    "want",
    "plot",
    "value",
    "counts",
    "country",
    "access",
    "country",
    "like",
    "get",
    "value",
    "counts",
    "calling",
    "value",
    "counts",
    "want",
    "put",
    "pie",
    "chart",
    "use",
    "matplotlib",
    "let",
    "simply",
    "copy",
    "paste",
    "create",
    "subplot",
    "call",
    "data",
    "labels",
    "data",
    "dot",
    "index",
    "arguments",
    "get",
    "nicer",
    "look",
    "order",
    "actually",
    "display",
    "first",
    "let",
    "write",
    "little",
    "heading",
    "first",
    "saying",
    "string",
    "markdown",
    "format",
    "like",
    "let",
    "use",
    "um",
    "let",
    "use",
    "h4",
    "tag",
    "say",
    "number",
    "data",
    "different",
    "countries",
    "want",
    "actually",
    "plot",
    "figure",
    "streamlit",
    "saying",
    "plot",
    "figure1",
    "display",
    "mudplot",
    "clip",
    "figure",
    "created",
    "pretty",
    "nice",
    "let",
    "save",
    "let",
    "actually",
    "show",
    "one",
    "change",
    "also",
    "want",
    "import",
    "function",
    "say",
    "explore",
    "page",
    "import",
    "show",
    "explore",
    "page",
    "select",
    "box",
    "want",
    "save",
    "selection",
    "variable",
    "call",
    "page",
    "say",
    "page",
    "equals",
    "equals",
    "predict",
    "value",
    "show",
    "show",
    "predict",
    "page",
    "otherwise",
    "say",
    "sorry",
    "must",
    "otherwise",
    "say",
    "show",
    "explore",
    "page",
    "work",
    "go",
    "back",
    "app",
    "rerun",
    "get",
    "key",
    "error",
    "converted",
    "comp",
    "let",
    "look",
    "load",
    "data",
    "renamed",
    "salary",
    "access",
    "let",
    "actually",
    "rename",
    "step",
    "end",
    "really",
    "matter",
    "like",
    "let",
    "go",
    "back",
    "work",
    "let",
    "rerun",
    "let",
    "select",
    "explore",
    "page",
    "think",
    "one",
    "typo",
    "let",
    "go",
    "back",
    "want",
    "country",
    "course",
    "country",
    "save",
    "rerun",
    "working",
    "yeah",
    "pie",
    "chart",
    "let",
    "make",
    "site",
    "smaller",
    "let",
    "add",
    "two",
    "charts",
    "bar",
    "chart",
    "line",
    "chart",
    "first",
    "let",
    "write",
    "little",
    "heading",
    "say",
    "streamlit",
    "dot",
    "right",
    "mean",
    "salary",
    "based",
    "country",
    "data",
    "want",
    "plot",
    "get",
    "like",
    "want",
    "group",
    "data",
    "frame",
    "country",
    "access",
    "salary",
    "country",
    "calculate",
    "mean",
    "value",
    "also",
    "sorted",
    "ascending",
    "order",
    "get",
    "like",
    "order",
    "plot",
    "use",
    "bar",
    "chart",
    "streamlit",
    "saying",
    "chart",
    "data",
    "like",
    "need",
    "go",
    "back",
    "rerun",
    "see",
    "bar",
    "chart",
    "working",
    "pretty",
    "nicely",
    "see",
    "different",
    "average",
    "mean",
    "salaries",
    "country",
    "last",
    "thing",
    "let",
    "also",
    "use",
    "line",
    "chart",
    "let",
    "write",
    "text",
    "mean",
    "salary",
    "based",
    "experience",
    "thing",
    "call",
    "group",
    "want",
    "group",
    "called",
    "years",
    "code",
    "pro",
    "salary",
    "calculate",
    "mean",
    "sort",
    "create",
    "line",
    "chart",
    "calling",
    "data",
    "save",
    "run",
    "reload",
    "yeah",
    "working",
    "well",
    "line",
    "chart",
    "right",
    "yeah",
    "final",
    "app",
    "wanted",
    "put",
    "example",
    "obviously",
    "play",
    "around",
    "show",
    "different",
    "data",
    "well",
    "yeah",
    "recommend",
    "also",
    "recommend",
    "play",
    "around",
    "model",
    "maybe",
    "try",
    "improve",
    "example",
    "might",
    "try",
    "use",
    "three",
    "information",
    "put",
    "example",
    "also",
    "try",
    "use",
    "age",
    "use",
    "well",
    "training",
    "yeah",
    "hopefully",
    "enjoyed",
    "little",
    "tutorial",
    "know",
    "build",
    "machine",
    "learning",
    "web",
    "app",
    "scratch",
    "real",
    "data",
    "hope",
    "see",
    "one",
    "next",
    "videos",
    "bye"
  ],
  "keywords": [
    "python",
    "video",
    "learn",
    "build",
    "machine",
    "learning",
    "web",
    "use",
    "data",
    "developer",
    "first",
    "part",
    "clean",
    "model",
    "train",
    "library",
    "later",
    "streamlit",
    "really",
    "experience",
    "code",
    "let",
    "show",
    "final",
    "app",
    "salary",
    "prediction",
    "predict",
    "based",
    "information",
    "user",
    "put",
    "example",
    "thing",
    "country",
    "get",
    "nice",
    "box",
    "select",
    "different",
    "education",
    "level",
    "say",
    "degree",
    "little",
    "years",
    "click",
    "calculate",
    "case",
    "000",
    "see",
    "new",
    "value",
    "number",
    "three",
    "give",
    "save",
    "next",
    "also",
    "sidebar",
    "explore",
    "page",
    "used",
    "find",
    "available",
    "yeah",
    "csv",
    "file",
    "back",
    "simply",
    "plot",
    "chart",
    "countries",
    "lot",
    "smaller",
    "mean",
    "might",
    "bar",
    "line",
    "50",
    "points",
    "still",
    "write",
    "want",
    "right",
    "open",
    "way",
    "columns",
    "start",
    "call",
    "ml",
    "create",
    "environment",
    "display",
    "conda",
    "name",
    "one",
    "hit",
    "enter",
    "install",
    "need",
    "actually",
    "streamlet",
    "already",
    "numpy",
    "notebook",
    "equals",
    "saying",
    "import",
    "execute",
    "frame",
    "keep",
    "column",
    "add",
    "working",
    "time",
    "run",
    "look",
    "training",
    "drop",
    "dot",
    "string",
    "zero",
    "course",
    "counts",
    "values",
    "order",
    "function",
    "categories",
    "two",
    "less",
    "x",
    "transform",
    "apply",
    "unique",
    "label",
    "encoder",
    "fit",
    "try",
    "regression",
    "like",
    "well",
    "error",
    "decision",
    "regressor",
    "parameters",
    "best",
    "search",
    "pickle",
    "load",
    "access",
    "go",
    "copy",
    "paste",
    "rerun",
    "button"
  ]
}