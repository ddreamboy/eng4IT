{
  "text": "hi everyone today we will make a\nbeautiful gooey application that can\nclassify images of animals and vehicles\nI'll introduce you to a brand new\nopen-source Library called tyi which\nwill help us design a very stylish\ninterface then we will combine it with\ntaner flow to tackle all the machine\nlearning stuff and yes you will see a\ndetailed workflow of how to build your\nown neural network because on this\nchannel we don't use AI we make AI so\nwithout any further Ado let's\nroll so let's unpack our plan for this\ntutorial the first step is designing an\ninterface where users who know nothing\nof python can upload their own images\nand interact with our neural network\nthen once our interface is complete we\nwill create an image processing neural\nnetwork and you don't need a fancy\ncomputer for that because it even works\non my old broken laptop then lastly we\nwill connect our neural network to our\napplication we will of course test it\nwith images from our personal Gallery so\nlet's begin by downloading the starter\nfiles from my GitHub and the link is as\nusual in the description now inside our\nstarter files you will find a logo a\nplaceholder graphic a wireframe which is\nbasically our plan for this project as\nwell as a whole bunch of demo images to\nplay with now in addition I've included\ntwo Jupiter node books that will show\nyou how to design and train a basic\nneural network completely on your own\nthen last but not least I even included\na demo neural network in case you'd like\nto save some time and skip a bunch of\nsteps great now first things first let's\nnavigate to our terminal and let's\ncreate a brand new working environment\nwith cond create dasn and in my case I'm\ngoing to call this environment ml EnV as\nin machine learning environment we will\ninstall python 3.11 in it let's give it\na run and we'll then activate our\nenvironment with cond activate M lore\nEnV now once we are inside our\nenvironment we can then install taipi\nwith Pip install tyi and once the\ninstallation is complete we will go\nahead and copy the path to our starter\nfiles we will paste it inside our\nterminal following a CD command as in\nchange directory beautiful now we can\nstart coding for this we will open our\nIDE or in my case a code editor named\nbrackets and let's quickly see how a\nbasic typy interface Works starting with\nthe Imports so from typi dogi we will\nimport GUI with a capital G and we might\nas well save it as a python file we will\ncall it classifier py beautiful then\nright below we will create a guey\ninstance followed by an empty set of\nround brackets and we will assign it to\na variable named app then WR below if\nname equals main we will then call app.\nrun now a cool trick is to pass the _\nreloader argument into run and set it to\ntrue that way we will not need to rerun\nour app from the terminal every time we\nmake little changes to our code so let's\nquickly save our file let's navigate to\nour terminal and let's run it with\npython classif fire. py which will open\na browser window with an empty typi\napplication on Port 5,000 of our local\nmachine and as you may guess we are\ndealing with a web application so how\nexactly do we add elements to our window\nwell first of all we will need a web\npage so right below our import we will\ncreate a new variable named index and we\nwill assign it to a string with an HTML\nheading one element also known known as\nage one with the heading text of hello\nfrom python now once we have a web page\nwe can then specify it inside our guey\ninstance with page equals index great\nnow let's save this file let's navigate\nto our browser let's refresh our page\nand beautiful here's our lovely heading\nnow mind you we did not need to rerun\nour app from the terminal with python\nclassifier ppy we simply clicked refresh\nand our changes were updated that's all\nthanks to this use reloader equals true\nargument yay now the cool thing about\ntaipi is that it's not really limited to\nHTML only if we wanted to we can\nactually specify some markdown syntax\ninstead so let's quickly get rid of\nthose tags we will replace them with a\nhashtag and a space in front of the\nheading text if we save our file now\nlet's refresh it and we get get the same\nresult but the real purpose of typi is\nWay Beyond some HTML or markdown\nelements it is mainly focused on much\nmore powerful control components that\ncome with both front end and backend\nproperties so let's see a quick example\nto show you what I mean so let's go\nahead and revise our index string first\nby turning it into a multiliner with a\nset of triple quotes and inside those\nquotes we will create an image control\ncomponent with a set of angle brackets\nfollowed by a set of vertical bars and\ninside them we will specify the type of\nimage then in front of our type inside\nan additional set of vertical bars we\nwill associate a python variable with\nour image and mind you we haven't\ndefined this variable yet but we will do\nit right away now the way to specify\nvariables with typi is in a set of curly\nbrackets that contain the variable name\nin my case I'll call it image uncore\npath and then right above our index\nwe'll go ahead and Define image uncore\npath and we will set it to a string of\nlogo.png awesome let's quickly save this\nfile let's navigate back to our browser\nwindow let's refresh it and boom here's\nour lovely lovely image now another cool\nthing we can do is styling our control\ncomponents with python so let's quickly\ntry to Center this image on the page and\nback in our code we'll simply wrap our\nimage control component in an additional\nset of angle brackets that begin with an\nadditional set of vertical bars and\ninside them we will specify the\nconstraint of\ntext- Center ha let's save this file and\nboom here's our lovely centered logo\nnext we will need to choose a file from\nour system using the file selector\ncontrol component for this we will\nquickly copy our image control and we\nwill paste it right below then we will\nchange the type of image to the type of\nfile undor selector and we'll also\nchange the associated variable from\nimage path to content where content\nrepresents the file that we will upload\nin the future now to make sure that our\napplication doesn't complain we will go\nahead and create a placeholder variable\nof content and we will assign it to an\nempty string otherwise we'll get a bunch\nof warnings in our terminal now if we're\nalready here we might as well add some\ninstructions right beside our file\nselector to do so we will add some text\nand the way to add text in taii is\nsimply by typing it so in my case select\nan image from your file system right\neasy peasy let's save it and let's\nrefresh our web page and beautiful\nhere's our new lovely components let's\nquickly click on this file selector\nlet's then choose all files rather than\ncostume files and let's select one of\nour demo images ha there you go our\nimage was uploaded successfully given\nthis lovely notification at the bottom\nnow another thing you may notice is that\nour text and our file selector were\nplaced on the exact same line while our\nimage was placed on a separate line so\nlet's see what's going on here now back\nin our code you will notice that after\nour image control we've added a line\nbreak while in between our text and our\nfile selector there are no line breaks\nat all now the last two elements left on\nthe wireframe is the image that we\nupload using our file selector as well\nas a temperature indicator where the\nindicator basically tells us how\nconfident our model is every time it\nmakes a guess so I am 80% confident that\nthis is a cat and I'm 50 % confident\nthat this is a ship and so on and so on\nso let's quickly implement it now we\nalready know how to make images we'll\njust copy our previous one we will then\npaste it at the very bottom of the web\npage and actually let's quickly refactor\nit because our logo is not going to\nchange so there's really no point you\nknow in storing it in a variable\nvariables vary our logo does not so on\nthe top image we will replace the image\npath portion of the variable with a\nstring of\nlogo.png then for the bottom image\nbecause it is going to change every time\nwe upload a new file we can just keep\nthis image path variable on and we can\nset it initially to placeholder uncore\nimage.png and then we will just update\nit as we go okay so first let's save it\nlet's make sure we didn't mess anything\nup and beautiful now let's see how we\ncan update it to update an element we\nwould usually need a button that is\nattached to some kind of callback\nfunction but with tyi we can actually\nuse an alternative it is called the on\nchange function and just as it sounds it\nis activated By changes in the state of\nour software any kind of change\nuploading a new file is just one of them\nso let's quickly see how it works now\nright below our index page we will go\nahead and Define our uncore change\nfunction which takes in a state a\nvariable able name and a variable value\nso Al together three arguments without\nthe typo now instead of explaining all\nof them let's just quickly print them\nthat way we can see them with our own\neyes so we'll print VAR name and write\nbeside it VAR value now this time we\ndon't really have a choice we will need\nto rerun our app from the terminal so\nlet's go ahead and close our current\nserver instance with contrl C we will\npress the up Arrow to fetch the most\nrecent terminal command and we will\nexecute it with enter and then inside\nour newest tab we will go ahead and\nselect an image sorry guys once again we\nwill have to select all files we're\ngoing to fix it right away okay and then\nas soon as we select a new image our\nunchange function will be automatically\nexecuted so as soon as we press open we\ncan navigate back to our terminal where\nwe see that the variable name is content\nand the variable value is the path to\nour image\nyay and then once content is no longer\nan empty string we can then go ahead and\nreplace our placeholder image with the\nactual image we uploaded to do so we\nwill go back to our code and first we\nwill Implement a best practice technique\nwhere we first add a condition of if\nVore name equals equals a string of\ncontent and only then we will update the\nimage otherwise we don't want to do that\nso the way to update our image is with\nstate. imore path which is the name of\nour variable from earlier and we will\nassign it to\nVore value ha where state is\nautomatically received by onchange and\nthen image path was defined earlier and\ncurrently is set to placeholder unor\nimage okay and then VAR value of course\nwe just received it right over here\nthat's the path to our image cool now\nbefore I forget we will need to fix our\nfile extensions problems so at the end\nof our file selector component we will\nadd another vertical bar and inside it\nwe will specify the extensions property\nand we will set it to PNG if we now save\neverything and now hopefully when we\npress on the file select button yay we\nno longer need to manually select all\nfiles we can see our PNG images right\naway and then if we select one of them\nyay it is being updated on the page\namazing now the last item in our\nwireframe is a temperature indicator so\nlet's go ahead and addit before we move\non with machine learning for this we\nwill go ahead and copy our image control\nwe will then paste it right below it\nwill adjust the type of image to the\ntype of indicator and we will also get\nrid of this image path variable we will\nreplace it with for now some kind of\nplaceholder let's say label goes here we\nwill of course fix it very soon then to\nthe very end of this component we will\nadd the control property of value and we\nwill set it to zero at least at first\nthen we will add another control\nproperty called Min or minimum which we\nwill set to zero as well then we will\nalso set the max property to 100 because\nwe're dealing with a percentage and we\nwill not forget to add the vertical bar\nto the end of this expression otherwise\nit's not going to going to work cool now\nlet's save it wow that's a big it's a\nvery big indicator so let's make sure we\nrestrict it to a nicer width back in our\ncode we will simply add the width\nproperty and we will set it to um let's\nsay 25 VW as in vertical width to make\nour app look extra crisp we will\nactually copy this width property we\nwill also apply it on our logo there you\ngo it will paste it here uh and that way\neverything will be extra proportion\nokay let's go ahead and refresh our app\nand holy smokes you guys our app looks\namazing we can finally move on with the\nfunctionality of things also known as\nmachine learning for this we have a\nbunch of requirements Beyond tyi which\nI've prepared in advance in this lovely\nrequirements file so let's quickly\ninstall it with Pip install dasr\nrequirements.txt and once the\ninstallation is complete we will open\nJupiter notebook with Jupiter notebook\nand here you can choose between the very\ndetailed neural network Builder that has\neverything you need to know to perform\nyour own experiments so it's basically a\nstep-by-step breakdown of all the neural\nnetwork processes which I highly\nrecommend for beginners but on my end\nI'm going to go for the quick Builder\ninstead and I will explain it as we go\nit's the exact same code just a\ndifferent level of detail now step one\nin designing neural networks is loading\na data set which our network will study\nreally really well in a process called\ntraining now in our case we are loading\na data set named sear 10 directly from\ntensorflow but what kind of data are we\ndealing with well CFR 10 is made out of\n60,000 tiny colorful images that\nrepresent 10 classes of animals and\nvehicles each of our images comes with a\nlabel or y that represents the type of\nanimal or vehicle we're dealing with now\nthe images themselves are called samples\nor X and each of them is precisely 32\npixels wide by 32 pixels tall now since\nwe are dealing with colorful images each\nof them has three color channels the\nfirst one is red the second one is green\nand the last one is blue as in RGB now\nin addition we get 50,000 images to\ntrain with and we put 10,000 images\naside for a process called testing where\nwe evaluate how well our model trained\nby exposing it to images it has never\nseen before so we are basically checking\nif we did a bunch of learning or if we\ndid a bunch of memorizing because\nthere's a bit of a gap next we have a\nprocess of data reduction where we take\na good look at our samples and labels\nand see if we can represent them a bit\nmore efficiently in our case we used a\ntechnique called normalization on our\nsamples where we take pixel values in\nthe range of 0 to\n255 and convert them to values in the\nrange of 0 and 1 that way our images\nlook exactly the same but their values\nare much much smaller now in the case of\nour labels we used a technique called\none Hut encoding to convert decimal\nvalues to their binary\nequivalents then finally we create our\nneural network based on the structure of\nour data and that's exactly why our\ninput shape is 32x 32 pixels and three\ncolor channels deep that's also why the\noutput of our network is 10 classes Long\nother than that you can pretty much\ncustomize everything else and you can\nfind all the detailed instructions in\nrules in the other notebook and once we\nhave a model we can then go ahead and\ntrain it on our training set where the\nnumber of epo represents the number of\ntimes our model will go over the entire\ndata set you can of course change this\nnumber to anything you'd like just\nplease remember that more is not\nnecessarily better I will show you in\nfuture tutorials why now after our\ntraining is complete our model will then\nbe automatically saved on our computer\nas Baseline docas but how do we know\nthat our model is smart well right below\nplease make sure that your training\naccuracy gradually grows with every\nEpoch while your training loss gradually\nreduces with every Epoch otherwise it\nmeans that something is wrong but if\neverything is fine we will then move on\nwith testing where we end up with an\naccuracy score now this accuracy score\nrepresents how many of our test samples\nthe 10,000 images that our network has\nnever seen before so how many of those\nwere correctly classified and generally\nspeaking a good number is anywhere above\n65% if you can reach those numbers then\ncongratulations you have just costomized\nyour very own neural network we can now\nmove on with combining it with our\napplication now to make it work from\ntensorflow docas we will import models\nand then right below we will l the model\nwe just trained with models. loore model\nto which we will pass our name in my\ncase Baseline maria. caras lastly we\nwill assign this expression to model now\nto use our model we will go ahead and\nDefine a predictor image function that\ntakes in a model as well as a path to\nimage now initially let's just make sure\nthat our model was properly loaded so\nlet's go go ahead and print model.\nsummary and an empty set of round\nbrackets we might as well print the path\nto image just to be polite now let's\nquickly go ahead and call our predict\nimage function inside the onchange event\nso at the end of our conditional\nstatement we will type predictor image\nwe will pass our model as well as VAR\nvalue let's quickly comment this uh\nprint statement that we had from earlier\nbecause it's going to confuse us a bit\nlet's navigate to our terminal and we\nwill type python classifier py now let's\nload one of our images the usual suspect\nlet's have a look in a terminal and yay\nhere's our lovely model summary we have\nofficially connected our machine\nlearning elements with our graphic\ninterface next we will need to convert\nthis path into an actual image for this\nwe will import a library called pillow\nwith from pill import image with a\ncapital I then inside predict image we\nwill type image. open to which we will\npass the path to image we will then\nassign this expression to\nIMG just so we don't get confused now\nbecause we might get images in all kinds\nof color formats let's make sure we\nconvert all of them to RGB we can do\nthis with IMG do convert to which we\nwill pass a string of\nrgp we will then reassign it back to IMG\nnow because our training images were all\n32 pixels by 32 pixels we will also need\nto resize our images with IMG do resize\nto which we will pass a tuple of 32x 32\nwe then assign it back to image IMG but\nwe cannot load it into our neural\nnetwork just yet because we haven't\nnormalized it our pixel values are still\nbetween 0 and 255 instead of 0 and 1 now\nlet's see a clever trick of how we can\nfix it for this we will need npy so\nlet's first import it with import NPI s\nNP then we will convert our image into a\nNPI array with np. as array to which we\nwill pass IMG and we will then assign\nthis expression to data because it is\nnot an image anymore it is something\ncalled tensor now once our data is in a\ntensor form we can then go ahead and\ndivide it by\n255 let's reassign it back to data and\nboom this is how we normalize our images\nnow let's quickly print a before and\nafter just to make sure we didn't mess\nanything up okay so before we'll print\ndata in the index of zero followed by\nanother index of zero that way we are\nbasically printing the color of the very\nfirst pixel we'll do the same for the\nafter okay we only care about one pixel\nwe don't care about the entire image\nlet's save everything um and actually\nbefore we run you know our app once\nagain let's make sure that this image\nthat we just manipulated is actually\ncompatible with our Network for this we\nwill type um model. predict and we will\npass data into it okay we can then\nassign it to props as in probabilities\nlet's save everything and let's select\nanother image let's go for the one with\nwhite background let's open it let's\nlook in our terminal and okay let's\nignore this error we'll get back to it\nshortly and there you go pixel values of\n255 were successfully converted to\nvalues of one yay now let's tackle the\nnasty error okay it seems like we have\nsome issues with the shape of our data\nin fact we are missing an entire\nDimension now the reason why we got this\nerror is because our model expects a\nvery long list of samples not just one\nbut 50,000 or 10,000 of them so let me\nshow you how to trick our neural network\nto process a single image and it's a bit\nembarrassing I'm warning you in advance\nbut it works so we will do it okay now\ninstead of Simply specifying our data\ninside predict we will first wrap it in\na list which we will wrap in a NPI array\nwith np. array then lastly we will focus\non all the items until the item at index\none in this array and if you think that\nit's the same as specifying zero boy oh\nboy you'll be surprised okay now let's\ndouble check that we didn't mess\nanything up let's go ahead and print our\nentire list of probabilities with probs\nwhich is basically a list of 10 items\none for each class and if we're already\nhere we might as well print the top\nprobability with probs do Max and an\nempty set of round brackets and also\nokay let's also print the class class to\nwhich this stop probability belongs\nwe'll do it with np. ARG Max to which we\nwill pass probs okay let's save it and\nlet's give it a quick run now let's load\none of our demo images let's go for this\ngiant boat let's navigate to our\nterminal and there you go now probs\nReturns what we call a class membership\nprobability so what are the chances that\nour image belongs to each class where\nthis is the chance that our image is an\nairplane and this is the chance that our\nimage is a car and so on and so on now\nthe top probability represents how\nconfident our model is that our image\nbelongs to the class of eight in our\ncase we are talking about 85% which is\npretty confident but the only problem is\nthe class of eight doesn't really mean a\nboat but if we navigate to our Jupiter\nnotebook we can see that the digit 8\nrepresents the class of\nship Bravo now let's make sure we\ndisplay it on the interface rather than\non the terminal so first we will copy\nour class names dictionary from our\nnotebook and we will paste it at the\nvery top of our code then inside our\npredict image function we can finally\nget rid of most of our print statements\nexcept the last two which we will turn\ninto variables so problems. max turns\ninto topor probe and then our argmax\nCommand turns into topor PR as in\nprediction now since we are not really\ninterested in the class number we are\nmuch more interested in the class name\nwe will wrap our argmax Command in a set\nof square brackets and we will specify\nit as a key to our class names\ndictionary okay and that way the key of\neight will return the value of ship hm\nnow once we are done with our function\nwe will go ahead and return both the top\nPR sorry top probe is first and the top\nPR which means that we will need to copy\nthese two variables and we will unpack\nour function call into the exact same\nvariable names and great we are\nofficially done with predict image now\nwe need to display those values on our\nguei for this we will need two new\nplaceholder variables okay we will\nassign them right below our image path\nso the first VAR variable is probe and\nsince it is a number we will assign it\nto zero and as you may guess the second\none is PR which is a name so we will\nassign it to an empty string now since\nprobe returns how confident our model is\nwhenever it makes a guess we can safely\nspecify it inside our temperature\nindicator first by replacing our label\nwith the typi variable of probe and then\nwe will do exactly the same with our\nvalue so instead of zero we will assign\nit to the variable of probe now in terms\nof the class name we'll display it right\nabove our sample image inside a new text\ncontrol which we will create with a set\nof angle bars then a set of vertical\nbars and inside them the variable of PR\nand great now the only thing left to do\nis updating those lovely typy variables\ninside our onchange function so at the\nvery bottom of our function we will say\nstate. probe which we will assign to\ntopor probe but the only problem is when\nwe look at our top probe we see that\nit's a decimal number it's not exactly a\npercentage so let's quickly converted to\na percentage by multiplying it by 100\nnow since we'd like to get a whole\nnumber we will also wrap it inside a\nround function and lastly we will assign\nthe state. pred to a string of this is a\nto which we will concatenate our or top\nprad nice actually almost nice now since\nI really like everything nice and neat\nwe will also copy our image Path State\nchange we will paste it at the very\nbottom and now all our state changes are\nspecified together now let's quickly\nsave everything and let's see if it\nworked and let's try an image of a dog\nand beautiful our model agrees with 90%\nconfidence the only problem is I forgot\nto add a line break so let's quickly fix\nit and this time let's load an image of\na cat and okay this is a cat but we are\nonly 47% confident this time which is\nnot much now let's quickly see what\nhappens if we are trying to trick our\nneural network what if we send it an\nimage of an animal it has never seen\nbefore one that doesn't belong to any of\nour classes and I'm of course talking\nabout the elk which is not a deer no but\nbecause it has horns it's close enough\nright so let's open it and boom our\nNetwork recognizes our elk as a deer\nwith 80% confidence awesome and lastly\nif you'd like to test my application it\nis now live and running on taipi cloud\nyou can find the link in the description\nof course and I'm specifically talking\nabout their free hosting option so if\nyou'd like to do the same for your app I\nincluded all the instructions in the\ndescription as well it is a brand new\nsaying so if you'd like to see a proper\ntutorial on it please let me know and\nthank you so much for watching if you\nfound this video helpful please share it\nwith the world and don't forget to leave\na huge thumbs up if you'd like to see\nmore videos of this kind you can always\nsubscribe to my channel and turn on the\nnotification Bell I'll see you very soon\nin another awesome simplified tutorial\nin the meanwhile bye-bye\n",
  "words": [
    "hi",
    "everyone",
    "today",
    "make",
    "beautiful",
    "gooey",
    "application",
    "classify",
    "images",
    "animals",
    "vehicles",
    "introduce",
    "brand",
    "new",
    "library",
    "called",
    "tyi",
    "help",
    "us",
    "design",
    "stylish",
    "interface",
    "combine",
    "taner",
    "flow",
    "tackle",
    "machine",
    "learning",
    "stuff",
    "yes",
    "see",
    "detailed",
    "workflow",
    "build",
    "neural",
    "network",
    "channel",
    "use",
    "ai",
    "make",
    "ai",
    "without",
    "ado",
    "let",
    "roll",
    "let",
    "unpack",
    "plan",
    "tutorial",
    "first",
    "step",
    "designing",
    "interface",
    "users",
    "know",
    "nothing",
    "python",
    "upload",
    "images",
    "interact",
    "neural",
    "network",
    "interface",
    "complete",
    "create",
    "image",
    "processing",
    "neural",
    "network",
    "need",
    "fancy",
    "computer",
    "even",
    "works",
    "old",
    "broken",
    "laptop",
    "lastly",
    "connect",
    "neural",
    "network",
    "application",
    "course",
    "test",
    "images",
    "personal",
    "gallery",
    "let",
    "begin",
    "downloading",
    "starter",
    "files",
    "github",
    "link",
    "usual",
    "description",
    "inside",
    "starter",
    "files",
    "find",
    "logo",
    "placeholder",
    "graphic",
    "wireframe",
    "basically",
    "plan",
    "project",
    "well",
    "whole",
    "bunch",
    "demo",
    "images",
    "play",
    "addition",
    "included",
    "two",
    "jupiter",
    "node",
    "books",
    "show",
    "design",
    "train",
    "basic",
    "neural",
    "network",
    "completely",
    "last",
    "least",
    "even",
    "included",
    "demo",
    "neural",
    "network",
    "case",
    "like",
    "save",
    "time",
    "skip",
    "bunch",
    "steps",
    "great",
    "first",
    "things",
    "first",
    "let",
    "navigate",
    "terminal",
    "let",
    "create",
    "brand",
    "new",
    "working",
    "environment",
    "cond",
    "create",
    "dasn",
    "case",
    "going",
    "call",
    "environment",
    "ml",
    "env",
    "machine",
    "learning",
    "environment",
    "install",
    "python",
    "let",
    "give",
    "run",
    "activate",
    "environment",
    "cond",
    "activate",
    "lore",
    "env",
    "inside",
    "environment",
    "install",
    "taipi",
    "pip",
    "install",
    "tyi",
    "installation",
    "complete",
    "go",
    "ahead",
    "copy",
    "path",
    "starter",
    "files",
    "paste",
    "inside",
    "terminal",
    "following",
    "cd",
    "command",
    "change",
    "directory",
    "beautiful",
    "start",
    "coding",
    "open",
    "ide",
    "case",
    "code",
    "editor",
    "named",
    "brackets",
    "let",
    "quickly",
    "see",
    "basic",
    "typy",
    "interface",
    "works",
    "starting",
    "imports",
    "typi",
    "dogi",
    "import",
    "gui",
    "capital",
    "g",
    "might",
    "well",
    "save",
    "python",
    "file",
    "call",
    "classifier",
    "py",
    "beautiful",
    "right",
    "create",
    "guey",
    "instance",
    "followed",
    "empty",
    "set",
    "round",
    "brackets",
    "assign",
    "variable",
    "named",
    "app",
    "wr",
    "name",
    "equals",
    "main",
    "call",
    "app",
    "run",
    "cool",
    "trick",
    "pass",
    "reloader",
    "argument",
    "run",
    "set",
    "true",
    "way",
    "need",
    "rerun",
    "app",
    "terminal",
    "every",
    "time",
    "make",
    "little",
    "changes",
    "code",
    "let",
    "quickly",
    "save",
    "file",
    "let",
    "navigate",
    "terminal",
    "let",
    "run",
    "python",
    "classif",
    "fire",
    "py",
    "open",
    "browser",
    "window",
    "empty",
    "typi",
    "application",
    "port",
    "local",
    "machine",
    "may",
    "guess",
    "dealing",
    "web",
    "application",
    "exactly",
    "add",
    "elements",
    "window",
    "well",
    "first",
    "need",
    "web",
    "page",
    "right",
    "import",
    "create",
    "new",
    "variable",
    "named",
    "index",
    "assign",
    "string",
    "html",
    "heading",
    "one",
    "element",
    "also",
    "known",
    "known",
    "age",
    "one",
    "heading",
    "text",
    "hello",
    "python",
    "web",
    "page",
    "specify",
    "inside",
    "guey",
    "instance",
    "page",
    "equals",
    "index",
    "great",
    "let",
    "save",
    "file",
    "let",
    "navigate",
    "browser",
    "let",
    "refresh",
    "page",
    "beautiful",
    "lovely",
    "heading",
    "mind",
    "need",
    "rerun",
    "app",
    "terminal",
    "python",
    "classifier",
    "ppy",
    "simply",
    "clicked",
    "refresh",
    "changes",
    "updated",
    "thanks",
    "use",
    "reloader",
    "equals",
    "true",
    "argument",
    "yay",
    "cool",
    "thing",
    "taipi",
    "really",
    "limited",
    "html",
    "wanted",
    "actually",
    "specify",
    "markdown",
    "syntax",
    "instead",
    "let",
    "quickly",
    "get",
    "rid",
    "tags",
    "replace",
    "hashtag",
    "space",
    "front",
    "heading",
    "text",
    "save",
    "file",
    "let",
    "refresh",
    "get",
    "get",
    "result",
    "real",
    "purpose",
    "typi",
    "way",
    "beyond",
    "html",
    "markdown",
    "elements",
    "mainly",
    "focused",
    "much",
    "powerful",
    "control",
    "components",
    "come",
    "front",
    "end",
    "backend",
    "properties",
    "let",
    "see",
    "quick",
    "example",
    "show",
    "mean",
    "let",
    "go",
    "ahead",
    "revise",
    "index",
    "string",
    "first",
    "turning",
    "multiliner",
    "set",
    "triple",
    "quotes",
    "inside",
    "quotes",
    "create",
    "image",
    "control",
    "component",
    "set",
    "angle",
    "brackets",
    "followed",
    "set",
    "vertical",
    "bars",
    "inside",
    "specify",
    "type",
    "image",
    "front",
    "type",
    "inside",
    "additional",
    "set",
    "vertical",
    "bars",
    "associate",
    "python",
    "variable",
    "image",
    "mind",
    "defined",
    "variable",
    "yet",
    "right",
    "away",
    "way",
    "specify",
    "variables",
    "typi",
    "set",
    "curly",
    "brackets",
    "contain",
    "variable",
    "name",
    "case",
    "call",
    "image",
    "uncore",
    "path",
    "right",
    "index",
    "go",
    "ahead",
    "define",
    "image",
    "uncore",
    "path",
    "set",
    "string",
    "awesome",
    "let",
    "quickly",
    "save",
    "file",
    "let",
    "navigate",
    "back",
    "browser",
    "window",
    "let",
    "refresh",
    "boom",
    "lovely",
    "lovely",
    "image",
    "another",
    "cool",
    "thing",
    "styling",
    "control",
    "components",
    "python",
    "let",
    "quickly",
    "try",
    "center",
    "image",
    "page",
    "back",
    "code",
    "simply",
    "wrap",
    "image",
    "control",
    "component",
    "additional",
    "set",
    "angle",
    "brackets",
    "begin",
    "additional",
    "set",
    "vertical",
    "bars",
    "inside",
    "specify",
    "constraint",
    "center",
    "ha",
    "let",
    "save",
    "file",
    "boom",
    "lovely",
    "centered",
    "logo",
    "next",
    "need",
    "choose",
    "file",
    "system",
    "using",
    "file",
    "selector",
    "control",
    "component",
    "quickly",
    "copy",
    "image",
    "control",
    "paste",
    "right",
    "change",
    "type",
    "image",
    "type",
    "file",
    "undor",
    "selector",
    "also",
    "change",
    "associated",
    "variable",
    "image",
    "path",
    "content",
    "content",
    "represents",
    "file",
    "upload",
    "future",
    "make",
    "sure",
    "application",
    "complain",
    "go",
    "ahead",
    "create",
    "placeholder",
    "variable",
    "content",
    "assign",
    "empty",
    "string",
    "otherwise",
    "get",
    "bunch",
    "warnings",
    "terminal",
    "already",
    "might",
    "well",
    "add",
    "instructions",
    "right",
    "beside",
    "file",
    "selector",
    "add",
    "text",
    "way",
    "add",
    "text",
    "taii",
    "simply",
    "typing",
    "case",
    "select",
    "image",
    "file",
    "system",
    "right",
    "easy",
    "peasy",
    "let",
    "save",
    "let",
    "refresh",
    "web",
    "page",
    "beautiful",
    "new",
    "lovely",
    "components",
    "let",
    "quickly",
    "click",
    "file",
    "selector",
    "let",
    "choose",
    "files",
    "rather",
    "costume",
    "files",
    "let",
    "select",
    "one",
    "demo",
    "images",
    "ha",
    "go",
    "image",
    "uploaded",
    "successfully",
    "given",
    "lovely",
    "notification",
    "bottom",
    "another",
    "thing",
    "may",
    "notice",
    "text",
    "file",
    "selector",
    "placed",
    "exact",
    "line",
    "image",
    "placed",
    "separate",
    "line",
    "let",
    "see",
    "going",
    "back",
    "code",
    "notice",
    "image",
    "control",
    "added",
    "line",
    "break",
    "text",
    "file",
    "selector",
    "line",
    "breaks",
    "last",
    "two",
    "elements",
    "left",
    "wireframe",
    "image",
    "upload",
    "using",
    "file",
    "selector",
    "well",
    "temperature",
    "indicator",
    "indicator",
    "basically",
    "tells",
    "us",
    "confident",
    "model",
    "every",
    "time",
    "makes",
    "guess",
    "80",
    "confident",
    "cat",
    "50",
    "confident",
    "ship",
    "let",
    "quickly",
    "implement",
    "already",
    "know",
    "make",
    "images",
    "copy",
    "previous",
    "one",
    "paste",
    "bottom",
    "web",
    "page",
    "actually",
    "let",
    "quickly",
    "refactor",
    "logo",
    "going",
    "change",
    "really",
    "point",
    "know",
    "storing",
    "variable",
    "variables",
    "vary",
    "logo",
    "top",
    "image",
    "replace",
    "image",
    "path",
    "portion",
    "variable",
    "string",
    "bottom",
    "image",
    "going",
    "change",
    "every",
    "time",
    "upload",
    "new",
    "file",
    "keep",
    "image",
    "path",
    "variable",
    "set",
    "initially",
    "placeholder",
    "uncore",
    "update",
    "go",
    "okay",
    "first",
    "let",
    "save",
    "let",
    "make",
    "sure",
    "mess",
    "anything",
    "beautiful",
    "let",
    "see",
    "update",
    "update",
    "element",
    "would",
    "usually",
    "need",
    "button",
    "attached",
    "kind",
    "callback",
    "function",
    "tyi",
    "actually",
    "use",
    "alternative",
    "called",
    "change",
    "function",
    "sounds",
    "activated",
    "changes",
    "state",
    "software",
    "kind",
    "change",
    "uploading",
    "new",
    "file",
    "one",
    "let",
    "quickly",
    "see",
    "works",
    "right",
    "index",
    "page",
    "go",
    "ahead",
    "define",
    "uncore",
    "change",
    "function",
    "takes",
    "state",
    "variable",
    "able",
    "name",
    "variable",
    "value",
    "al",
    "together",
    "three",
    "arguments",
    "without",
    "typo",
    "instead",
    "explaining",
    "let",
    "quickly",
    "print",
    "way",
    "see",
    "eyes",
    "print",
    "var",
    "name",
    "write",
    "beside",
    "var",
    "value",
    "time",
    "really",
    "choice",
    "need",
    "rerun",
    "app",
    "terminal",
    "let",
    "go",
    "ahead",
    "close",
    "current",
    "server",
    "instance",
    "contrl",
    "c",
    "press",
    "arrow",
    "fetch",
    "recent",
    "terminal",
    "command",
    "execute",
    "enter",
    "inside",
    "newest",
    "tab",
    "go",
    "ahead",
    "select",
    "image",
    "sorry",
    "guys",
    "select",
    "files",
    "going",
    "fix",
    "right",
    "away",
    "okay",
    "soon",
    "select",
    "new",
    "image",
    "unchange",
    "function",
    "automatically",
    "executed",
    "soon",
    "press",
    "open",
    "navigate",
    "back",
    "terminal",
    "see",
    "variable",
    "name",
    "content",
    "variable",
    "value",
    "path",
    "image",
    "yay",
    "content",
    "longer",
    "empty",
    "string",
    "go",
    "ahead",
    "replace",
    "placeholder",
    "image",
    "actual",
    "image",
    "uploaded",
    "go",
    "back",
    "code",
    "first",
    "implement",
    "best",
    "practice",
    "technique",
    "first",
    "add",
    "condition",
    "vore",
    "name",
    "equals",
    "equals",
    "string",
    "content",
    "update",
    "image",
    "otherwise",
    "want",
    "way",
    "update",
    "image",
    "state",
    "imore",
    "path",
    "name",
    "variable",
    "earlier",
    "assign",
    "vore",
    "value",
    "ha",
    "state",
    "automatically",
    "received",
    "onchange",
    "image",
    "path",
    "defined",
    "earlier",
    "currently",
    "set",
    "placeholder",
    "unor",
    "image",
    "okay",
    "var",
    "value",
    "course",
    "received",
    "right",
    "path",
    "image",
    "cool",
    "forget",
    "need",
    "fix",
    "file",
    "extensions",
    "problems",
    "end",
    "file",
    "selector",
    "component",
    "add",
    "another",
    "vertical",
    "bar",
    "inside",
    "specify",
    "extensions",
    "property",
    "set",
    "png",
    "save",
    "everything",
    "hopefully",
    "press",
    "file",
    "select",
    "button",
    "yay",
    "longer",
    "need",
    "manually",
    "select",
    "files",
    "see",
    "png",
    "images",
    "right",
    "away",
    "select",
    "one",
    "yay",
    "updated",
    "page",
    "amazing",
    "last",
    "item",
    "wireframe",
    "temperature",
    "indicator",
    "let",
    "go",
    "ahead",
    "addit",
    "move",
    "machine",
    "learning",
    "go",
    "ahead",
    "copy",
    "image",
    "control",
    "paste",
    "right",
    "adjust",
    "type",
    "image",
    "type",
    "indicator",
    "also",
    "get",
    "rid",
    "image",
    "path",
    "variable",
    "replace",
    "kind",
    "placeholder",
    "let",
    "say",
    "label",
    "goes",
    "course",
    "fix",
    "soon",
    "end",
    "component",
    "add",
    "control",
    "property",
    "value",
    "set",
    "zero",
    "least",
    "first",
    "add",
    "another",
    "control",
    "property",
    "called",
    "min",
    "minimum",
    "set",
    "zero",
    "well",
    "also",
    "set",
    "max",
    "property",
    "100",
    "dealing",
    "percentage",
    "forget",
    "add",
    "vertical",
    "bar",
    "end",
    "expression",
    "otherwise",
    "going",
    "going",
    "work",
    "cool",
    "let",
    "save",
    "wow",
    "big",
    "big",
    "indicator",
    "let",
    "make",
    "sure",
    "restrict",
    "nicer",
    "width",
    "back",
    "code",
    "simply",
    "add",
    "width",
    "property",
    "set",
    "um",
    "let",
    "say",
    "25",
    "vw",
    "vertical",
    "width",
    "make",
    "app",
    "look",
    "extra",
    "crisp",
    "actually",
    "copy",
    "width",
    "property",
    "also",
    "apply",
    "logo",
    "go",
    "paste",
    "uh",
    "way",
    "everything",
    "extra",
    "proportion",
    "okay",
    "let",
    "go",
    "ahead",
    "refresh",
    "app",
    "holy",
    "smokes",
    "guys",
    "app",
    "looks",
    "amazing",
    "finally",
    "move",
    "functionality",
    "things",
    "also",
    "known",
    "machine",
    "learning",
    "bunch",
    "requirements",
    "beyond",
    "tyi",
    "prepared",
    "advance",
    "lovely",
    "requirements",
    "file",
    "let",
    "quickly",
    "install",
    "pip",
    "install",
    "dasr",
    "installation",
    "complete",
    "open",
    "jupiter",
    "notebook",
    "jupiter",
    "notebook",
    "choose",
    "detailed",
    "neural",
    "network",
    "builder",
    "everything",
    "need",
    "know",
    "perform",
    "experiments",
    "basically",
    "breakdown",
    "neural",
    "network",
    "processes",
    "highly",
    "recommend",
    "beginners",
    "end",
    "going",
    "go",
    "quick",
    "builder",
    "instead",
    "explain",
    "go",
    "exact",
    "code",
    "different",
    "level",
    "detail",
    "step",
    "one",
    "designing",
    "neural",
    "networks",
    "loading",
    "data",
    "set",
    "network",
    "study",
    "really",
    "really",
    "well",
    "process",
    "called",
    "training",
    "case",
    "loading",
    "data",
    "set",
    "named",
    "sear",
    "10",
    "directly",
    "tensorflow",
    "kind",
    "data",
    "dealing",
    "well",
    "cfr",
    "10",
    "made",
    "tiny",
    "colorful",
    "images",
    "represent",
    "10",
    "classes",
    "animals",
    "vehicles",
    "images",
    "comes",
    "label",
    "represents",
    "type",
    "animal",
    "vehicle",
    "dealing",
    "images",
    "called",
    "samples",
    "x",
    "precisely",
    "32",
    "pixels",
    "wide",
    "32",
    "pixels",
    "tall",
    "since",
    "dealing",
    "colorful",
    "images",
    "three",
    "color",
    "channels",
    "first",
    "one",
    "red",
    "second",
    "one",
    "green",
    "last",
    "one",
    "blue",
    "rgb",
    "addition",
    "get",
    "images",
    "train",
    "put",
    "images",
    "aside",
    "process",
    "called",
    "testing",
    "evaluate",
    "well",
    "model",
    "trained",
    "exposing",
    "images",
    "never",
    "seen",
    "basically",
    "checking",
    "bunch",
    "learning",
    "bunch",
    "memorizing",
    "bit",
    "gap",
    "next",
    "process",
    "data",
    "reduction",
    "take",
    "good",
    "look",
    "samples",
    "labels",
    "see",
    "represent",
    "bit",
    "efficiently",
    "case",
    "used",
    "technique",
    "called",
    "normalization",
    "samples",
    "take",
    "pixel",
    "values",
    "range",
    "0",
    "255",
    "convert",
    "values",
    "range",
    "0",
    "1",
    "way",
    "images",
    "look",
    "exactly",
    "values",
    "much",
    "much",
    "smaller",
    "case",
    "labels",
    "used",
    "technique",
    "called",
    "one",
    "hut",
    "encoding",
    "convert",
    "decimal",
    "values",
    "binary",
    "equivalents",
    "finally",
    "create",
    "neural",
    "network",
    "based",
    "structure",
    "data",
    "exactly",
    "input",
    "shape",
    "32x",
    "32",
    "pixels",
    "three",
    "color",
    "channels",
    "deep",
    "also",
    "output",
    "network",
    "10",
    "classes",
    "long",
    "pretty",
    "much",
    "customize",
    "everything",
    "else",
    "find",
    "detailed",
    "instructions",
    "rules",
    "notebook",
    "model",
    "go",
    "ahead",
    "train",
    "training",
    "set",
    "number",
    "epo",
    "represents",
    "number",
    "times",
    "model",
    "go",
    "entire",
    "data",
    "set",
    "course",
    "change",
    "number",
    "anything",
    "like",
    "please",
    "remember",
    "necessarily",
    "better",
    "show",
    "future",
    "tutorials",
    "training",
    "complete",
    "model",
    "automatically",
    "saved",
    "computer",
    "baseline",
    "docas",
    "know",
    "model",
    "smart",
    "well",
    "right",
    "please",
    "make",
    "sure",
    "training",
    "accuracy",
    "gradually",
    "grows",
    "every",
    "epoch",
    "training",
    "loss",
    "gradually",
    "reduces",
    "every",
    "epoch",
    "otherwise",
    "means",
    "something",
    "wrong",
    "everything",
    "fine",
    "move",
    "testing",
    "end",
    "accuracy",
    "score",
    "accuracy",
    "score",
    "represents",
    "many",
    "test",
    "samples",
    "images",
    "network",
    "never",
    "seen",
    "many",
    "correctly",
    "classified",
    "generally",
    "speaking",
    "good",
    "number",
    "anywhere",
    "65",
    "reach",
    "numbers",
    "congratulations",
    "costomized",
    "neural",
    "network",
    "move",
    "combining",
    "application",
    "make",
    "work",
    "tensorflow",
    "docas",
    "import",
    "models",
    "right",
    "l",
    "model",
    "trained",
    "models",
    "loore",
    "model",
    "pass",
    "name",
    "case",
    "baseline",
    "maria",
    "caras",
    "lastly",
    "assign",
    "expression",
    "model",
    "use",
    "model",
    "go",
    "ahead",
    "define",
    "predictor",
    "image",
    "function",
    "takes",
    "model",
    "well",
    "path",
    "image",
    "initially",
    "let",
    "make",
    "sure",
    "model",
    "properly",
    "loaded",
    "let",
    "go",
    "go",
    "ahead",
    "print",
    "model",
    "summary",
    "empty",
    "set",
    "round",
    "brackets",
    "might",
    "well",
    "print",
    "path",
    "image",
    "polite",
    "let",
    "quickly",
    "go",
    "ahead",
    "call",
    "predict",
    "image",
    "function",
    "inside",
    "onchange",
    "event",
    "end",
    "conditional",
    "statement",
    "type",
    "predictor",
    "image",
    "pass",
    "model",
    "well",
    "var",
    "value",
    "let",
    "quickly",
    "comment",
    "uh",
    "print",
    "statement",
    "earlier",
    "going",
    "confuse",
    "us",
    "bit",
    "let",
    "navigate",
    "terminal",
    "type",
    "python",
    "classifier",
    "py",
    "let",
    "load",
    "one",
    "images",
    "usual",
    "suspect",
    "let",
    "look",
    "terminal",
    "yay",
    "lovely",
    "model",
    "summary",
    "officially",
    "connected",
    "machine",
    "learning",
    "elements",
    "graphic",
    "interface",
    "next",
    "need",
    "convert",
    "path",
    "actual",
    "image",
    "import",
    "library",
    "called",
    "pillow",
    "pill",
    "import",
    "image",
    "capital",
    "inside",
    "predict",
    "image",
    "type",
    "image",
    "open",
    "pass",
    "path",
    "image",
    "assign",
    "expression",
    "img",
    "get",
    "confused",
    "might",
    "get",
    "images",
    "kinds",
    "color",
    "formats",
    "let",
    "make",
    "sure",
    "convert",
    "rgb",
    "img",
    "convert",
    "pass",
    "string",
    "rgp",
    "reassign",
    "back",
    "img",
    "training",
    "images",
    "32",
    "pixels",
    "32",
    "pixels",
    "also",
    "need",
    "resize",
    "images",
    "img",
    "resize",
    "pass",
    "tuple",
    "32x",
    "32",
    "assign",
    "back",
    "image",
    "img",
    "load",
    "neural",
    "network",
    "yet",
    "normalized",
    "pixel",
    "values",
    "still",
    "0",
    "255",
    "instead",
    "0",
    "1",
    "let",
    "see",
    "clever",
    "trick",
    "fix",
    "need",
    "npy",
    "let",
    "first",
    "import",
    "import",
    "npi",
    "np",
    "convert",
    "image",
    "npi",
    "array",
    "np",
    "array",
    "pass",
    "img",
    "assign",
    "expression",
    "data",
    "image",
    "anymore",
    "something",
    "called",
    "tensor",
    "data",
    "tensor",
    "form",
    "go",
    "ahead",
    "divide",
    "255",
    "let",
    "reassign",
    "back",
    "data",
    "boom",
    "normalize",
    "images",
    "let",
    "quickly",
    "print",
    "make",
    "sure",
    "mess",
    "anything",
    "okay",
    "print",
    "data",
    "index",
    "zero",
    "followed",
    "another",
    "index",
    "zero",
    "way",
    "basically",
    "printing",
    "color",
    "first",
    "pixel",
    "okay",
    "care",
    "one",
    "pixel",
    "care",
    "entire",
    "image",
    "let",
    "save",
    "everything",
    "um",
    "actually",
    "run",
    "know",
    "app",
    "let",
    "make",
    "sure",
    "image",
    "manipulated",
    "actually",
    "compatible",
    "network",
    "type",
    "um",
    "model",
    "predict",
    "pass",
    "data",
    "okay",
    "assign",
    "props",
    "probabilities",
    "let",
    "save",
    "everything",
    "let",
    "select",
    "another",
    "image",
    "let",
    "go",
    "one",
    "white",
    "background",
    "let",
    "open",
    "let",
    "look",
    "terminal",
    "okay",
    "let",
    "ignore",
    "error",
    "get",
    "back",
    "shortly",
    "go",
    "pixel",
    "values",
    "255",
    "successfully",
    "converted",
    "values",
    "one",
    "yay",
    "let",
    "tackle",
    "nasty",
    "error",
    "okay",
    "seems",
    "like",
    "issues",
    "shape",
    "data",
    "fact",
    "missing",
    "entire",
    "dimension",
    "reason",
    "got",
    "error",
    "model",
    "expects",
    "long",
    "list",
    "samples",
    "one",
    "let",
    "show",
    "trick",
    "neural",
    "network",
    "process",
    "single",
    "image",
    "bit",
    "embarrassing",
    "warning",
    "advance",
    "works",
    "okay",
    "instead",
    "simply",
    "specifying",
    "data",
    "inside",
    "predict",
    "first",
    "wrap",
    "list",
    "wrap",
    "npi",
    "array",
    "np",
    "array",
    "lastly",
    "focus",
    "items",
    "item",
    "index",
    "one",
    "array",
    "think",
    "specifying",
    "zero",
    "boy",
    "oh",
    "boy",
    "surprised",
    "okay",
    "let",
    "double",
    "check",
    "mess",
    "anything",
    "let",
    "go",
    "ahead",
    "print",
    "entire",
    "list",
    "probabilities",
    "probs",
    "basically",
    "list",
    "10",
    "items",
    "one",
    "class",
    "already",
    "might",
    "well",
    "print",
    "top",
    "probability",
    "probs",
    "max",
    "empty",
    "set",
    "round",
    "brackets",
    "also",
    "okay",
    "let",
    "also",
    "print",
    "class",
    "class",
    "stop",
    "probability",
    "belongs",
    "np",
    "arg",
    "max",
    "pass",
    "probs",
    "okay",
    "let",
    "save",
    "let",
    "give",
    "quick",
    "run",
    "let",
    "load",
    "one",
    "demo",
    "images",
    "let",
    "go",
    "giant",
    "boat",
    "let",
    "navigate",
    "terminal",
    "go",
    "probs",
    "returns",
    "call",
    "class",
    "membership",
    "probability",
    "chances",
    "image",
    "belongs",
    "class",
    "chance",
    "image",
    "airplane",
    "chance",
    "image",
    "car",
    "top",
    "probability",
    "represents",
    "confident",
    "model",
    "image",
    "belongs",
    "class",
    "eight",
    "case",
    "talking",
    "85",
    "pretty",
    "confident",
    "problem",
    "class",
    "eight",
    "really",
    "mean",
    "boat",
    "navigate",
    "jupiter",
    "notebook",
    "see",
    "digit",
    "8",
    "represents",
    "class",
    "ship",
    "bravo",
    "let",
    "make",
    "sure",
    "display",
    "interface",
    "rather",
    "terminal",
    "first",
    "copy",
    "class",
    "names",
    "dictionary",
    "notebook",
    "paste",
    "top",
    "code",
    "inside",
    "predict",
    "image",
    "function",
    "finally",
    "get",
    "rid",
    "print",
    "statements",
    "except",
    "last",
    "two",
    "turn",
    "variables",
    "problems",
    "max",
    "turns",
    "topor",
    "probe",
    "argmax",
    "command",
    "turns",
    "topor",
    "pr",
    "prediction",
    "since",
    "really",
    "interested",
    "class",
    "number",
    "much",
    "interested",
    "class",
    "name",
    "wrap",
    "argmax",
    "command",
    "set",
    "square",
    "brackets",
    "specify",
    "key",
    "class",
    "names",
    "dictionary",
    "okay",
    "way",
    "key",
    "eight",
    "return",
    "value",
    "ship",
    "hm",
    "done",
    "function",
    "go",
    "ahead",
    "return",
    "top",
    "pr",
    "sorry",
    "top",
    "probe",
    "first",
    "top",
    "pr",
    "means",
    "need",
    "copy",
    "two",
    "variables",
    "unpack",
    "function",
    "call",
    "exact",
    "variable",
    "names",
    "great",
    "officially",
    "done",
    "predict",
    "image",
    "need",
    "display",
    "values",
    "guei",
    "need",
    "two",
    "new",
    "placeholder",
    "variables",
    "okay",
    "assign",
    "right",
    "image",
    "path",
    "first",
    "var",
    "variable",
    "probe",
    "since",
    "number",
    "assign",
    "zero",
    "may",
    "guess",
    "second",
    "one",
    "pr",
    "name",
    "assign",
    "empty",
    "string",
    "since",
    "probe",
    "returns",
    "confident",
    "model",
    "whenever",
    "makes",
    "guess",
    "safely",
    "specify",
    "inside",
    "temperature",
    "indicator",
    "first",
    "replacing",
    "label",
    "typi",
    "variable",
    "probe",
    "exactly",
    "value",
    "instead",
    "zero",
    "assign",
    "variable",
    "probe",
    "terms",
    "class",
    "name",
    "display",
    "right",
    "sample",
    "image",
    "inside",
    "new",
    "text",
    "control",
    "create",
    "set",
    "angle",
    "bars",
    "set",
    "vertical",
    "bars",
    "inside",
    "variable",
    "pr",
    "great",
    "thing",
    "left",
    "updating",
    "lovely",
    "typy",
    "variables",
    "inside",
    "onchange",
    "function",
    "bottom",
    "function",
    "say",
    "state",
    "probe",
    "assign",
    "topor",
    "probe",
    "problem",
    "look",
    "top",
    "probe",
    "see",
    "decimal",
    "number",
    "exactly",
    "percentage",
    "let",
    "quickly",
    "converted",
    "percentage",
    "multiplying",
    "100",
    "since",
    "like",
    "get",
    "whole",
    "number",
    "also",
    "wrap",
    "inside",
    "round",
    "function",
    "lastly",
    "assign",
    "state",
    "pred",
    "string",
    "concatenate",
    "top",
    "prad",
    "nice",
    "actually",
    "almost",
    "nice",
    "since",
    "really",
    "like",
    "everything",
    "nice",
    "neat",
    "also",
    "copy",
    "image",
    "path",
    "state",
    "change",
    "paste",
    "bottom",
    "state",
    "changes",
    "specified",
    "together",
    "let",
    "quickly",
    "save",
    "everything",
    "let",
    "see",
    "worked",
    "let",
    "try",
    "image",
    "dog",
    "beautiful",
    "model",
    "agrees",
    "90",
    "confidence",
    "problem",
    "forgot",
    "add",
    "line",
    "break",
    "let",
    "quickly",
    "fix",
    "time",
    "let",
    "load",
    "image",
    "cat",
    "okay",
    "cat",
    "47",
    "confident",
    "time",
    "much",
    "let",
    "quickly",
    "see",
    "happens",
    "trying",
    "trick",
    "neural",
    "network",
    "send",
    "image",
    "animal",
    "never",
    "seen",
    "one",
    "belong",
    "classes",
    "course",
    "talking",
    "elk",
    "deer",
    "horns",
    "close",
    "enough",
    "right",
    "let",
    "open",
    "boom",
    "network",
    "recognizes",
    "elk",
    "deer",
    "80",
    "confidence",
    "awesome",
    "lastly",
    "like",
    "test",
    "application",
    "live",
    "running",
    "taipi",
    "cloud",
    "find",
    "link",
    "description",
    "course",
    "specifically",
    "talking",
    "free",
    "hosting",
    "option",
    "like",
    "app",
    "included",
    "instructions",
    "description",
    "well",
    "brand",
    "new",
    "saying",
    "like",
    "see",
    "proper",
    "tutorial",
    "please",
    "let",
    "know",
    "thank",
    "much",
    "watching",
    "found",
    "video",
    "helpful",
    "please",
    "share",
    "world",
    "forget",
    "leave",
    "huge",
    "thumbs",
    "like",
    "see",
    "videos",
    "kind",
    "always",
    "subscribe",
    "channel",
    "turn",
    "notification",
    "bell",
    "see",
    "soon",
    "another",
    "awesome",
    "simplified",
    "tutorial",
    "meanwhile"
  ],
  "keywords": [
    "make",
    "beautiful",
    "application",
    "images",
    "new",
    "called",
    "tyi",
    "interface",
    "machine",
    "learning",
    "see",
    "neural",
    "network",
    "use",
    "let",
    "first",
    "know",
    "python",
    "upload",
    "complete",
    "create",
    "image",
    "need",
    "works",
    "lastly",
    "course",
    "files",
    "inside",
    "logo",
    "placeholder",
    "basically",
    "well",
    "bunch",
    "demo",
    "two",
    "jupiter",
    "show",
    "last",
    "case",
    "like",
    "save",
    "time",
    "great",
    "navigate",
    "terminal",
    "environment",
    "going",
    "call",
    "install",
    "run",
    "go",
    "ahead",
    "copy",
    "path",
    "paste",
    "command",
    "change",
    "open",
    "code",
    "named",
    "brackets",
    "quickly",
    "typi",
    "import",
    "might",
    "file",
    "right",
    "empty",
    "set",
    "round",
    "assign",
    "variable",
    "app",
    "name",
    "equals",
    "cool",
    "trick",
    "pass",
    "way",
    "every",
    "changes",
    "guess",
    "dealing",
    "web",
    "exactly",
    "add",
    "elements",
    "page",
    "index",
    "string",
    "heading",
    "one",
    "also",
    "text",
    "specify",
    "refresh",
    "lovely",
    "simply",
    "yay",
    "thing",
    "really",
    "actually",
    "instead",
    "get",
    "replace",
    "much",
    "control",
    "end",
    "component",
    "vertical",
    "bars",
    "type",
    "variables",
    "uncore",
    "back",
    "boom",
    "another",
    "wrap",
    "selector",
    "content",
    "represents",
    "sure",
    "otherwise",
    "select",
    "bottom",
    "line",
    "indicator",
    "confident",
    "model",
    "top",
    "update",
    "okay",
    "anything",
    "kind",
    "function",
    "state",
    "value",
    "print",
    "var",
    "fix",
    "soon",
    "property",
    "everything",
    "move",
    "zero",
    "max",
    "expression",
    "width",
    "look",
    "notebook",
    "data",
    "process",
    "training",
    "10",
    "samples",
    "32",
    "pixels",
    "since",
    "color",
    "bit",
    "pixel",
    "values",
    "0",
    "255",
    "convert",
    "number",
    "entire",
    "please",
    "predict",
    "load",
    "img",
    "np",
    "array",
    "list",
    "probs",
    "class",
    "probability",
    "probe",
    "pr"
  ]
}