{
  "text": "in this video we're going to create an\nesp32 based sensor node that together\nwith a BME 680 sensor will measure\ntemperature pressure humidity and air\nquality and send all this data over\nWi-Fi and the mqtt protocol to our\nRaspberry Pi 4 based iot server\nwe made this server in a previous video\nand essentially what this does is take\nour sensor data store it in a database\nand allow us to see it visually in a\ngrafana dashboard\nthis video is going to focus on the\nsensor side of this project so if you\nwant to have a look at the server video\nI'll link that in the cards above and\nalso down in the description\nso let's get into what we're going to\nuse for this project we're going to use\nan esp32 Dev board this is just a\ngeneric Dev board um which is an\nAliExpress special probably a clone of a\nclone of a clone\num but any Dev board will do in terms of\nsensors you can use really whatever\nsensor you like in this situation and it\nall depends on what data you want to\nmeasure I will be using a BME 680 sensor\nfrom Adafruit but you can easily adapt\nthis project for other sensors\nwe're going to need a variety of jump\ncables to connect the sensor to the\nesp32 board as well as some kind of\npower supply to power the sensor mode\nas I'm going to have this sensor in my\noffice I'm going to plug it in via USB\ndirectly to the Raspberry Pi server\nwhich is on 24 7. finally we're going to\nneed the iot server that we made in our\nprevious video\nand we're going to program everything in\nthe Arduino IDE\nso how will the sensor node work as I\npreviously mentioned this sensor node\nwill transmit sensor data over Wi-Fi via\nthe mqtt protocol mqtt is a network\nprotocol where essentially a client\npushes data to a broker the client in\nthis case is the esp32 and the broker is\nan application called mosquito running\non our Raspberry Pi server\nthe sensor data will be sent as a Json\nstring\nthis flowchart shows how the how the\nsoftware will work from a more detailed\nperspective I've kind of had to make\nthis somewhat horizontal flowchart to\nmake it fit into a 16x9 frame but\nhopefully it's clear enough for you guys\nto see essentially our code that will\nrun on the esp32 will start by opening a\nserial connection to print some debug\nmessages\nthen we will check if we have wired up\nthe sensor correctly and once we've\nconnected to the sensor we will attempt\nto connect to a Wi-Fi network\nonce we've connected to our Wi-Fi\nnetwork we'll then try and attempt to\nour mqtt server and after all this setup\nis complete we enter a main Loop which\nreads the sensor data packages it into a\nJson message and sends it to the mqtt\nserver\nthen this process is repeated as an\ninterval of your choosing the Json\nmessage is essentially the value of the\nsensor reading say temperature with a\nkey which is representative of what the\nsensor is reading\nfor example a key of T would indicate\nthat the sensor reading is temperature\nthis is then decoded by the server\nand then stored properly in our database\nthe Arduino libraries that we're going\nto use are the BME 680 and sensor\nlibraries\nthe pub sub client for mqtt\ncommunication\nArduino Json to create our Json message\nwire to enable I squared C communication\nand Wi-Fi to enable our network\nconnectivity\nas I mentioned we're using I squared C\nto connect the BME 680 sensor to the\nesp32 dev board\nthis requires four jumper cables power\nground and then clock and data lines\nin order to implement our program in the\nArduino IDE the first thing we need to\ndo is install the esp32 boards package\nfrom espressive if you haven't done that\nalready\nand this is done by adding the following\nURL to the additional boards manager in\nfile then preferences\nthis is the first time you've done this\nit might prompt you to install the board\nand that will appear in the bottom right\nhand side and you just hit install\nin terms of the libraries we listed to\ninstall them you need to open the\nlibrary manager by clicking on this icon\nand then searching for the libraries you\ndon't have installed and install them\nright so now let's get programming I\nwill explain everything as I go through\nit but if you want to skip this then the\nfull source code is available on our\nwebsite link down in the description\nand if you'd like to challenge yourself\nperhaps go back to the slide where I\nshowed you the programming flowchart and\nsee if you could start off there and\nperhaps at the end when you finish that\ncompare with what are what we programmed\nwe are starting with a fresh Arduino\nsketch and first things first we need to\ninclude all of the libraries we\npreviously listed\nafter this we create another function\ncalled reconnect for a total of three\nthat is\nsetup Loop and reconnect\nthen we create a BME object which\ninitializes the bme680 sensor over I\nsquared C and we do that using the\nAdafruit underscore bme680 Constructor\nthen we create three Char arrays or\ncharacter arrays to store your Wi-Fi\nnetwork SSID and password as well as the\nIP address of the mqtt server\nobviously I've blanked out my network\ndetails here but just substitute yours\nin they're in plain text and make sure\nto include the quotation marks either\nside\nthen we create a Wi-Fi client simply\ncalled ESP client and then we tell the\npub sub client which client we used\nthere's a lot of clients there but just\nfollow this code here\nnow let's start with our setup function\nthe code in the setup function runs once\nwhen the program is started we will\nstart with 100 millisecond delay to make\nsure that everything is started up and\nrunning properly then start the serial\nconnection with a baud rate of 115 200\nand wait for the serial connection to be\nopened before continuing\nthen we test to see if we can connect\nthe BME sensor by using an if statement\nand in the the condition of that if\nstatement we use the BME dot begin\nfunction and we check whether it returns\na one or a zero\nif the BME sensor is not detected then\nwe enter an infinite while loop\nand that will just prompt us to you know\nunplug the board check our wiring try\nagain then we need to configure the BME\nsensor and I'm using the default values\nhere from Adafruit so I'm just going to\ncopy paste them over I advise you to do\nthe same but if you really want to get\ninto the wheeze of things then have a\nlook at the data sheet of the bme680\nsensor and maybe have a play around with\nwhat these values do\nthen we attempt to connect to our Wi-Fi\nnetwork I'm going to print some debug\nmessages before using the wi-fi.begin\nfunction with the SSID and password we\npreviously set as arguments\nto check that we are connected we're\ngoing to use a while loop which checks\nthe Wi-Fi status against the WL\nunderscore connected condition\nin this while loop we print out a sort\nof loading bar of dots every half a\nsecond whilst we wait for the Wi-Fi\nnetwork to connect as this can sometimes\ntake a couple of seconds\nonce connected we print out an alert\nover serial so we know things are\nworking as anticipated\nfinally in the setup function we set up\nthe mqtt server details with client.set\nserver\nand then the server IP address and the\nport of the mqtt server which is\n1883 as a as a default\nthe first thing we're going to do in our\nmain Loop is check if we are connected\nto the mqtt server\nthe first time the program enters this\nLoop we won't be connected and so this\nfunction will run\nlet's write this function now\nin this function we create a while loop\nwhich Loops until we are connected\nI'll print a debug message so that we\ncan check what's going on\nwe then allocate a client ID to this\ndevice in the form of a string and a\nrandom number appended to the end of the\nstring\nthen we attempt to connect to the mqtt\nserver using the client.connect function\nwith the client ID as an argument\nthis function is used in the condition\nof the if statement\nif the connection fails then we print\nout the error code for debugging\nwith that function complete we can now\ngo back to our main Loop\nfirstly we create a static Json document\nwhich will contain the sensor data we\nread from the sensor we can also create\na character array and call it something\nlike output which will store the Json\nmessage we want to send to the mqtt\nserver\nthen we create a variable to store the\ncurrent time and this will be used as a\nkind of timer\nwe then create an if statement which\nwill effectively Implement a 10 second\ndelay between running the code in this\nif statement note that here I forget to\ndeclare the last message variable but\nthat's an unsigned long and I fix it\nonce I try and compile it and sort of\nface palm in a couple of minutes\nthen we read the temperature pressure\nhumidity and air quality data into\ntemporary variables\nusing the bme.read functions\nthen we need to add these variables into\nthe Json document each value has a key\nAssociated to it to indicate what value\nis being stored\nafter this we use the serialized Json\nfunction to turn this document into a\nstring that can be sent across the\nnetwork using the client.publish\nfunction\nwhich takes the argument of the topic to\npush the data to in this case home\nsensors and the Char array of the Json\nmessage\nwith all this written we can compile the\ncode and upload it to the board\nobviously you can see this has warned me\nthat I've missed the Declaration of a\nvariable but with that fixed I can\nupload the code now\nand once uploaded we should be able to\nsee that the sensor data being sent\nacross the xeron monitor is the sort of\num what we want to be sent across the\nnetwork and this should be updated every\n10 seconds\nif we open up grafana we should see all\nthis data being populated\nso this is quite a straightforward\nproject so please feel free to adapt\nthis to your needs do let us know how\nyou want to use this project down in the\ncomments we love to see how you use the\nthings you learn in our videos\nif this video has helped you out then\nplease consider liking and subscribing\nthank you very much for watching\nand as always have a nice day\n",
  "words": [
    "video",
    "going",
    "create",
    "esp32",
    "based",
    "sensor",
    "node",
    "together",
    "bme",
    "680",
    "sensor",
    "measure",
    "temperature",
    "pressure",
    "humidity",
    "air",
    "quality",
    "send",
    "data",
    "mqtt",
    "protocol",
    "raspberry",
    "pi",
    "4",
    "based",
    "iot",
    "server",
    "made",
    "server",
    "previous",
    "video",
    "essentially",
    "take",
    "sensor",
    "data",
    "store",
    "database",
    "allow",
    "us",
    "see",
    "visually",
    "grafana",
    "dashboard",
    "video",
    "going",
    "focus",
    "sensor",
    "side",
    "project",
    "want",
    "look",
    "server",
    "video",
    "link",
    "cards",
    "also",
    "description",
    "let",
    "get",
    "going",
    "use",
    "project",
    "going",
    "use",
    "esp32",
    "dev",
    "board",
    "generic",
    "dev",
    "board",
    "um",
    "aliexpress",
    "special",
    "probably",
    "clone",
    "clone",
    "clone",
    "um",
    "dev",
    "board",
    "terms",
    "sensors",
    "use",
    "really",
    "whatever",
    "sensor",
    "like",
    "situation",
    "depends",
    "data",
    "want",
    "measure",
    "using",
    "bme",
    "680",
    "sensor",
    "adafruit",
    "easily",
    "adapt",
    "project",
    "sensors",
    "going",
    "need",
    "variety",
    "jump",
    "cables",
    "connect",
    "sensor",
    "esp32",
    "board",
    "well",
    "kind",
    "power",
    "supply",
    "power",
    "sensor",
    "mode",
    "going",
    "sensor",
    "office",
    "going",
    "plug",
    "via",
    "usb",
    "directly",
    "raspberry",
    "pi",
    "server",
    "24",
    "finally",
    "going",
    "need",
    "iot",
    "server",
    "made",
    "previous",
    "video",
    "going",
    "program",
    "everything",
    "arduino",
    "ide",
    "sensor",
    "node",
    "work",
    "previously",
    "mentioned",
    "sensor",
    "node",
    "transmit",
    "sensor",
    "data",
    "via",
    "mqtt",
    "protocol",
    "mqtt",
    "network",
    "protocol",
    "essentially",
    "client",
    "pushes",
    "data",
    "broker",
    "client",
    "case",
    "esp32",
    "broker",
    "application",
    "called",
    "mosquito",
    "running",
    "raspberry",
    "pi",
    "server",
    "sensor",
    "data",
    "sent",
    "json",
    "string",
    "flowchart",
    "shows",
    "software",
    "work",
    "detailed",
    "perspective",
    "kind",
    "make",
    "somewhat",
    "horizontal",
    "flowchart",
    "make",
    "fit",
    "16x9",
    "frame",
    "hopefully",
    "clear",
    "enough",
    "guys",
    "see",
    "essentially",
    "code",
    "run",
    "esp32",
    "start",
    "opening",
    "serial",
    "connection",
    "print",
    "debug",
    "messages",
    "check",
    "wired",
    "sensor",
    "correctly",
    "connected",
    "sensor",
    "attempt",
    "connect",
    "network",
    "connected",
    "network",
    "try",
    "attempt",
    "mqtt",
    "server",
    "setup",
    "complete",
    "enter",
    "main",
    "loop",
    "reads",
    "sensor",
    "data",
    "packages",
    "json",
    "message",
    "sends",
    "mqtt",
    "server",
    "process",
    "repeated",
    "interval",
    "choosing",
    "json",
    "message",
    "essentially",
    "value",
    "sensor",
    "reading",
    "say",
    "temperature",
    "key",
    "representative",
    "sensor",
    "reading",
    "example",
    "key",
    "would",
    "indicate",
    "sensor",
    "reading",
    "temperature",
    "decoded",
    "server",
    "stored",
    "properly",
    "database",
    "arduino",
    "libraries",
    "going",
    "use",
    "bme",
    "680",
    "sensor",
    "libraries",
    "pub",
    "sub",
    "client",
    "mqtt",
    "communication",
    "arduino",
    "json",
    "create",
    "json",
    "message",
    "wire",
    "enable",
    "squared",
    "c",
    "communication",
    "enable",
    "network",
    "connectivity",
    "mentioned",
    "using",
    "squared",
    "c",
    "connect",
    "bme",
    "680",
    "sensor",
    "esp32",
    "dev",
    "board",
    "requires",
    "four",
    "jumper",
    "cables",
    "power",
    "ground",
    "clock",
    "data",
    "lines",
    "order",
    "implement",
    "program",
    "arduino",
    "ide",
    "first",
    "thing",
    "need",
    "install",
    "esp32",
    "boards",
    "package",
    "espressive",
    "done",
    "already",
    "done",
    "adding",
    "following",
    "url",
    "additional",
    "boards",
    "manager",
    "file",
    "preferences",
    "first",
    "time",
    "done",
    "might",
    "prompt",
    "install",
    "board",
    "appear",
    "bottom",
    "right",
    "hand",
    "side",
    "hit",
    "install",
    "terms",
    "libraries",
    "listed",
    "install",
    "need",
    "open",
    "library",
    "manager",
    "clicking",
    "icon",
    "searching",
    "libraries",
    "installed",
    "install",
    "right",
    "let",
    "get",
    "programming",
    "explain",
    "everything",
    "go",
    "want",
    "skip",
    "full",
    "source",
    "code",
    "available",
    "website",
    "link",
    "description",
    "like",
    "challenge",
    "perhaps",
    "go",
    "back",
    "slide",
    "showed",
    "programming",
    "flowchart",
    "see",
    "could",
    "start",
    "perhaps",
    "end",
    "finish",
    "compare",
    "programmed",
    "starting",
    "fresh",
    "arduino",
    "sketch",
    "first",
    "things",
    "first",
    "need",
    "include",
    "libraries",
    "previously",
    "listed",
    "create",
    "another",
    "function",
    "called",
    "reconnect",
    "total",
    "three",
    "setup",
    "loop",
    "reconnect",
    "create",
    "bme",
    "object",
    "initializes",
    "bme680",
    "sensor",
    "squared",
    "c",
    "using",
    "adafruit",
    "underscore",
    "bme680",
    "constructor",
    "create",
    "three",
    "char",
    "arrays",
    "character",
    "arrays",
    "store",
    "network",
    "ssid",
    "password",
    "well",
    "ip",
    "address",
    "mqtt",
    "server",
    "obviously",
    "blanked",
    "network",
    "details",
    "substitute",
    "plain",
    "text",
    "make",
    "sure",
    "include",
    "quotation",
    "marks",
    "either",
    "side",
    "create",
    "client",
    "simply",
    "called",
    "esp",
    "client",
    "tell",
    "pub",
    "sub",
    "client",
    "client",
    "used",
    "lot",
    "clients",
    "follow",
    "code",
    "let",
    "start",
    "setup",
    "function",
    "code",
    "setup",
    "function",
    "runs",
    "program",
    "started",
    "start",
    "100",
    "millisecond",
    "delay",
    "make",
    "sure",
    "everything",
    "started",
    "running",
    "properly",
    "start",
    "serial",
    "connection",
    "baud",
    "rate",
    "115",
    "200",
    "wait",
    "serial",
    "connection",
    "opened",
    "continuing",
    "test",
    "see",
    "connect",
    "bme",
    "sensor",
    "using",
    "statement",
    "condition",
    "statement",
    "use",
    "bme",
    "dot",
    "begin",
    "function",
    "check",
    "whether",
    "returns",
    "one",
    "zero",
    "bme",
    "sensor",
    "detected",
    "enter",
    "infinite",
    "loop",
    "prompt",
    "us",
    "know",
    "unplug",
    "board",
    "check",
    "wiring",
    "try",
    "need",
    "configure",
    "bme",
    "sensor",
    "using",
    "default",
    "values",
    "adafruit",
    "going",
    "copy",
    "paste",
    "advise",
    "really",
    "want",
    "get",
    "wheeze",
    "things",
    "look",
    "data",
    "sheet",
    "bme680",
    "sensor",
    "maybe",
    "play",
    "around",
    "values",
    "attempt",
    "connect",
    "network",
    "going",
    "print",
    "debug",
    "messages",
    "using",
    "function",
    "ssid",
    "password",
    "previously",
    "set",
    "arguments",
    "check",
    "connected",
    "going",
    "use",
    "loop",
    "checks",
    "status",
    "wl",
    "underscore",
    "connected",
    "condition",
    "loop",
    "print",
    "sort",
    "loading",
    "bar",
    "dots",
    "every",
    "half",
    "second",
    "whilst",
    "wait",
    "network",
    "connect",
    "sometimes",
    "take",
    "couple",
    "seconds",
    "connected",
    "print",
    "alert",
    "serial",
    "know",
    "things",
    "working",
    "anticipated",
    "finally",
    "setup",
    "function",
    "set",
    "mqtt",
    "server",
    "details",
    "server",
    "server",
    "ip",
    "address",
    "port",
    "mqtt",
    "server",
    "1883",
    "default",
    "first",
    "thing",
    "going",
    "main",
    "loop",
    "check",
    "connected",
    "mqtt",
    "server",
    "first",
    "time",
    "program",
    "enters",
    "loop",
    "wo",
    "connected",
    "function",
    "run",
    "let",
    "write",
    "function",
    "function",
    "create",
    "loop",
    "loops",
    "connected",
    "print",
    "debug",
    "message",
    "check",
    "going",
    "allocate",
    "client",
    "id",
    "device",
    "form",
    "string",
    "random",
    "number",
    "appended",
    "end",
    "string",
    "attempt",
    "connect",
    "mqtt",
    "server",
    "using",
    "function",
    "client",
    "id",
    "argument",
    "function",
    "used",
    "condition",
    "statement",
    "connection",
    "fails",
    "print",
    "error",
    "code",
    "debugging",
    "function",
    "complete",
    "go",
    "back",
    "main",
    "loop",
    "firstly",
    "create",
    "static",
    "json",
    "document",
    "contain",
    "sensor",
    "data",
    "read",
    "sensor",
    "also",
    "create",
    "character",
    "array",
    "call",
    "something",
    "like",
    "output",
    "store",
    "json",
    "message",
    "want",
    "send",
    "mqtt",
    "server",
    "create",
    "variable",
    "store",
    "current",
    "time",
    "used",
    "kind",
    "timer",
    "create",
    "statement",
    "effectively",
    "implement",
    "10",
    "second",
    "delay",
    "running",
    "code",
    "statement",
    "note",
    "forget",
    "declare",
    "last",
    "message",
    "variable",
    "unsigned",
    "long",
    "fix",
    "try",
    "compile",
    "sort",
    "face",
    "palm",
    "couple",
    "minutes",
    "read",
    "temperature",
    "pressure",
    "humidity",
    "air",
    "quality",
    "data",
    "temporary",
    "variables",
    "using",
    "functions",
    "need",
    "add",
    "variables",
    "json",
    "document",
    "value",
    "key",
    "associated",
    "indicate",
    "value",
    "stored",
    "use",
    "serialized",
    "json",
    "function",
    "turn",
    "document",
    "string",
    "sent",
    "across",
    "network",
    "using",
    "function",
    "takes",
    "argument",
    "topic",
    "push",
    "data",
    "case",
    "home",
    "sensors",
    "char",
    "array",
    "json",
    "message",
    "written",
    "compile",
    "code",
    "upload",
    "board",
    "obviously",
    "see",
    "warned",
    "missed",
    "declaration",
    "variable",
    "fixed",
    "upload",
    "code",
    "uploaded",
    "able",
    "see",
    "sensor",
    "data",
    "sent",
    "across",
    "xeron",
    "monitor",
    "sort",
    "um",
    "want",
    "sent",
    "across",
    "network",
    "updated",
    "every",
    "10",
    "seconds",
    "open",
    "grafana",
    "see",
    "data",
    "populated",
    "quite",
    "straightforward",
    "project",
    "please",
    "feel",
    "free",
    "adapt",
    "needs",
    "let",
    "us",
    "know",
    "want",
    "use",
    "project",
    "comments",
    "love",
    "see",
    "use",
    "things",
    "learn",
    "videos",
    "video",
    "helped",
    "please",
    "consider",
    "liking",
    "subscribing",
    "thank",
    "much",
    "watching",
    "always",
    "nice",
    "day"
  ],
  "keywords": [
    "video",
    "going",
    "create",
    "esp32",
    "sensor",
    "node",
    "bme",
    "680",
    "temperature",
    "data",
    "mqtt",
    "protocol",
    "raspberry",
    "pi",
    "server",
    "essentially",
    "store",
    "us",
    "see",
    "side",
    "project",
    "want",
    "let",
    "get",
    "use",
    "dev",
    "board",
    "um",
    "clone",
    "sensors",
    "like",
    "using",
    "adafruit",
    "need",
    "connect",
    "kind",
    "power",
    "program",
    "everything",
    "arduino",
    "previously",
    "network",
    "client",
    "called",
    "running",
    "sent",
    "json",
    "string",
    "flowchart",
    "make",
    "code",
    "start",
    "serial",
    "connection",
    "print",
    "debug",
    "check",
    "connected",
    "attempt",
    "try",
    "setup",
    "main",
    "loop",
    "message",
    "value",
    "reading",
    "key",
    "libraries",
    "squared",
    "c",
    "first",
    "install",
    "done",
    "time",
    "go",
    "things",
    "function",
    "bme680",
    "used",
    "statement",
    "condition",
    "know",
    "sort",
    "document",
    "variable",
    "across"
  ]
}