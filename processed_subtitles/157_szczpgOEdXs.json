{
  "text": "ever wondered how people feel about you\nwant to get a better read on how they're\nfeeling well in this video we're going\nto be doing exactly that and taking a\nlook at sentiment analysis now one of\nthe cool things that we're going to be\ndoing in\nthis video is we're going to be doing it\nusing a state-of-the-art model\ncalled vert but we'll be able to do this\nreasonably easily using the transformers\npackage\nlet's take a deeper look as to what\nwe'll be going through so in order to\nbuild up our sentiment model we're going\nto first up start out by installing the\ntransformers library transformers is\nan amazing library particularly when it\ncomes to nlp which is where sentiment\nanalysis falls in\nparticularly when we're doing it on text\nwhat we're then going to do is perform\nsome sentiment scoring\nusing a pre-trained vert model now this\nmakes it really really easy to get up\nand running\nand so we'll pass through a couple of\nprompts and see what the sentiment looks\nlike\nbut then the real kicker we're going to\ntake this one step further\nscrape down some data and reviews from\nyelp so i'm going to show you how to do\nthat\nand we're going to run our sentiment\nanalysis pipeline on those yelp reviews\nso you could extend this out and do it\non just about anything\nin this case we're going to be doing it\non yelp let's take a look as to how this\nis all going to fit together though so\nwhat we're first up going to be doing\nis downloading and installing the\npre-trained\nburp model from hugging face\ntransformers so hugging face just makes\nit super easy to go about doing this\nwhat we're then going to do is run our\nsentiment analysis on a single\nblock of text so we'll be able to\nactually pass through our own text\nand see what the sentiment looks like\nfrom a rating scale between\none to five now i kind of like this\nmodel because it actually sort of mimics\nwhat you'd have with like a star rating\nprofile\nbut in this case we're doing it for\nsentiment analysis and then last but not\nleast what we're going to do is scrape\ndown our yelp reviews and apply it to\nthose yelp reviews and have\nall of that data stored in a pandas data\nset pretty cool right\nready to do it let's get to it alrighty\nguys so in order to go through and\nperform our sentiment analysis there's\ngoing to be five things that we need to\ndo\nso first up we're going to go through\nand install and import our dependencies\nthen what we're going to do is\ninstantiate and download our pre-trained\nnlp model now the cool thing about this\nis that it's a fully pre-trained model\nyou don't really need to do too much\nelse so once we go through that we'll be\nable to leverage our nlp model to\nperform sentiment analysis and i'll show\nyou that model\nuh once we get to it then what we're\ngoing to do is encode and calculate our\nsentiment so we'll take our sentence\nconvert it into a sequence\nand then pass it through to our\nsentiment analysis model\nand then what we're going to do is take\nthis one step further and actually\nleverage it in part of a practical\nimplementation so what we're going to do\nis we're going to eventually use\nbeautiful soup to scrape some data\noff yelp we'll collect those reviews put\nit into a data frame and then we'll run\nour sentiment analysis model on those\nreviews so we'll actually be able to see\nreal time sentiment scoring so if you've\ngot a business or if you've got\na company that you're working with or\nthe company that you're running\nyou'll be able to leverage a sentiment\nanalysis pipeline on\nthat now on that note let's go on ahead\nand install and import our dependencies\nnow there's a couple of key dependencies\nthat we're going to need\none of the key ones that we're going to\nneed is going to be pie torch\nso in order to get pie torch all you\nneed to do is go to pytorch.org and\nyou'll be able to install it\nnow specifically what we need to do is\nscroll on down here\nand you'll be able to see how exactly to\ninstall it onto your machine\nso you just need to choose the pi torch\nbuild so in this case we're going to\nchoose\na stable i'm on a windows machine so\ni'll select windows but if you've got a\nmac or a linux machine you can\neffectively choose whichever one you\nneed\nwe're going to choose windows and in\nthis case i'm going to choose pip to\ninstall it we're going to leverage it\nusing python and then last but not least\ni'm going to use\ncuda 11.1 so i'll just copy this command\ndown here and what we're going to do is\nput that into our notebook so what i'll\ndo is i'll\ninclude an exclamation mark paste that\nin and i'm just going to get rid of d3\nafter pip so effectively just go to\npytorch.org\nselect what your environment looks like\nand how you want to install\npaste it into your notebook with an\nexclamation that mark at the front and\nthen drop the three\nand this effectively if we go and run\nthis now this is going to go on ahead\nand install pi torch now i believe\ni've already got it installed in this\nkernel yep so looks like it went pretty\nquickly but\nif you're getting started for the first\ntime might take a little bit of time but\ndon't stress\nthat's pretty straightforward to get\nthat all installed\nnow the next thing that we need to do is\nactually install some other dependencies\nso\nlet's go ahead and write these out and\nthen i'll pause and we'll take a look at\nwhat we're actually installing\nall righty so those are our new\ndependencies that we're going to go on\nabout and install so let's just run that\nand that will kick off that installation\nso what we're doing is we're installing\nfive different packages there\nso in order to do that written\nexclamation mark pip\ninstall transformers requests beautiful\nsoup for\npandas and numpy now i'm going to\nexplain why we need each one of these\nlibraries\nso we're going to leverage transformers\nfor our actual nlp model so this is\ngoing to allow us to easily\nimport and download and install our nlp\nmodel and specifically\nthe nlp model that we're going to be\nusing is this one so this is actually\nawesome right so it's a multi-lingual\nbert model that allows you to perform\nsentiment analysis so it actually works\non english dutch german french spanish\nand italian\nwhich is pretty cool so this is actually\na really\nwide scope sentiment model so if you\nwanted to do it on different languages\nyou could definitely do that\nnow one of my favorite things there that\nis that it actually allows you or gives\nyou\na sentiment score between one and five\nso this means that rather than just\ngetting a confidence interval or a\nnumber between zero and one you're\nactually getting a bit of a score which\ni kind of like\nnow in order to install this we'll just\nbe using transformers that'll be pretty\nstraightforward\nthen the next roof what is that for\nlibraries so requests\nis going to allow us to make a request\nto the yelp site that we're going to be\nscraping\nbeautiful soup is going to allow us to\nactually work through that soup that we\nactually get returned back from the page\nand extract the data that we actually\nneed\npandas is going to allow us to structure\nour data in a format that makes it easy\nto actually work with\nand then numpy's just going to give us\nsome additional data transformation\nprocesses now on that bit about data\nhere's other nick\nif you've worked in analytics for a\nwhile you've probably come across\nexcel virtually every person that works\nwith data would have some point\nstarted working with excel leveraging\ntransforming and even sometimes storing\nyour data\nbut what happens when it comes to taking\nyour data skills just that one step\nfurther\nwith something like python transitioning\ncan be really really difficult\nbut it doesn't need to be with my tone\ntoday's video is brought to you by\nan awesome startup and named mido it\nallows you to import transform and\nexport your data inside of a jupyter\nnotebook with just a couple of clicks\nwith a single import you can bring in\nand explore your data\nyou can then apply transformations and\ncreate new feature columns\nbut one of my absolute favorite features\nis that you can visualize interactively\nthis makes it super easy to get a feel\nfor what's happening with your\ninformation\nbut what's even better is that it writes\nthe python code for you\nso for every transformation that you\nmake with your mido sheet\nyou're able to see the code that\nactually represents that transformation\nthis means that you can save a bunch of\ntime when it comes to performing your\nexploratory data analysis\nand more time on adding value but what's\nbest of all is that you can try mido at\nyourself\nfor free just head over to trimato.io\nand you can try it out yourself\ninside of your jupiter notebook back to\nour regular program\nalrighty and back to it so what we're\nnow going to do is\nimport the dependencies that we're\nactually going to need so in this case\nwe've gone and installed all the stuff\nthat we need now we need to actually\nimport it into our notebook so let's go\nahead and do that\nalrighty and those are our dependencies\nnow\nimported so we've gone and written five\ndifferent lines of code there so let's\ntake a step back and take a look at what\nwe actually wrote\nso first up what we're doing is we're\nbringing in our tokenizer and\nour model class from transformers so to\ndo that written from\ntransformers import auto tokenizer and\nthen auto model for sequence\nclassification so our tokenizer is going\nto allow us to pass through a string and\nconvert that into a sequence of numbers\nthat we can then pass to our nlp model\nand our auto model for sequence\nclassification is going to give us the\narchitecture from transformers to be\nable to load in our nlp model but you'll\nsee that a little bit in a sec\nthen what we've gone and done is we've\nimported pytorch so import torch and\nwe're really going to use the\narg max function from torch to be able\nto extract our highest\nsequence result then we've imported\nrequests so remember request is going to\nbe used to grab\ndata or grab the web page from yelp and\nthen\nwe're importing beautiful soup so from\nbs4\nimport beautiful soup so beautiful soup\nallows us to actually traverse\nthe dom results from yelp so this allows\nus to extract data that we actually need\nin this case going to be our reviews\nand then we're importing re so re is\ngoing to allow us to create a regex\nfunction to be able to extract the\nspecific comments that we want\nso all up five lines of code so\ntransformers torch request\nbeautiful soup and re so now we're good\nto go\nthat is step one done now the next thing\nthat we need to do is actually\ninstantiate and set up our model so\nlet's go ahead and do that\nokay so that is our tokenizer and our\nmodel\nnow loaded so i've gone and written two\nlines of code there so\nfirst up we're creating our tokenizer\nwhich is this over here and then we're\nactually loading in our model so to do\nthat we've written tokenizer\nequals auto tokenizer and then we're\nusing the\nfrom pre-trained model to be able to\nload up a pre-trained\nnlp model which in this case is coming\nfrom this link over here and i will make\nthis link available in the description\nbelow\nas well as all the code that you're\nseeing in this tutorial so as per usual\njust jump over to my github account or\ncheck the description below you'll be\nable to grab those links\nso in this case the pre-trained model\nthat we're going to be using is nlp town\nforward slash bert dash base dash\nmultilingual\ndash uncased sentiment so this is this\nmodel over here so in order to do this\ni've just grabbed\neffectively the end of the url to be\nable to go on ahead and load that but\nagain i'm going to make all of that\navailable in the description below\nand then what we've also gone and done\nis created our model so we've gone and\nwritten model\nequals auto model for sequence\nclassification which is what we had from\nup here\nand then we're again using the from\npre-trained method to be able to go and\nload in the pre-trained model which in\nthis case is the exact same as what\nwe're using for our tokenizer\nso nlp town forward slash bert\nmultilingual dash uncased\nsentiment so we are good to go now so\nthat is our model setup now done so just\nthose two lines of code\nnow if you are doing this for the first\ntime it is going to need to actually\ndownload the model so i believe it's\nabout\n665 megabytes i might be a little bit\noff with that\nbut it'll ins download and install it\nfor the first time and then once you've\ngot that then\nand done it's all good to go you don't\nneed to download it again now that\nthat's done\nlet's go on ahead and actually test this\nout so we're going to pass through\na string or a prompt to our tokenizer\ntokenize it and then pass it through to\nour model and get our classification so\nlet's go ahead and try this out\nokay so first up what we've gone and\ndone is created our token so if we take\na look at our tokens now\nyou can see that it has just converted\nthis prompt that i'm passing through\ninto a sequence\nof numbers so again this is all our\ntokenizer is doing in this case now we\ncan\nencode and we can also decode so if we\nwanted to decode this set of tokens i\ncan write tokenizer\ndot decode and this will convert it back\nto\na uh what have we gotten done there\nlet's take a look at our tokens\nup we need the first list let's try that\nthere you go so we can reconvert our\ntokens back to its original text so the\nreason that we can't just pass through\nthis is because we can't pass through\na list to that decoder so what we need\nto do is extract\nthat single set of lists there so by\ndoing that all i'm doing is i'm grabbing\nthe internal list or the internal string\nand then we're decoding\nthat single string and you can see there\nthat this string\nover here so i hated this comma\nabsolutely the worst is exactly the same\nstring prompt that we're passing through\nto our encoder now again we don't really\nneed to decode in this particular case\nbut i wanted to sort of show you how\nthat works\nso what we've written there is tokens\nequals tokenizer dot encode and then\nwe've passed through our prompt which in\nthis case is i hated this comma\nabsolutely the worst and then we're\npassing through a keyword argument which\nis return\nunderscore tenses and we've set that to\npi torch\nso this entire line over here is giving\nus our encoded string\nnow what we need to do to actually\nperform some sentiment analysis is pass\nthat to our model so let's go ahead and\ndo that\nokay so we've now gone and passed our\ntokens to our models again\nreasonably straightforward right so i've\nwritten result equals model\nand then to that i've passed through our\ntokens now if we take a look at our\nresult\nyou can see that what we're going to get\nout of here is a sequence classifier\noutput class and then we're going to get\nour loss\nand then over here this is the bit that\nwe actually need so you can see it says\nlogits equals tensor and then we've got\nthese numbers\nnow these values over here in really\nsimple terms represent\nthe probability of that particular class\nbeing\nthe sentiment so in this case you can\nsee that this number here is the highest\nthat means that position\nzero or ideally really bad sentiment is\nthe uppermost class\nnow again so these positions just\nrepresent one two\nthree four and five when we're\nextracting it using pi torch it's going\nto be represented as\n0 1 2 3 and 4 because it starts from 0.\nnow in order to grab this result and\nconvert it into something that's useful\nfor us we can actually do that so let's\ntry that\nso you can see from here what we can do\nis we can use torch.argmax to get the\nhighest\nvalue result out of our results.logit's\nattribute so if we type in\nresults.logits\ni've got caplocks on\nyou can see uh what have we done that it\nshould be a result logic so you can see\nout of there we're able to get\nall of the tensor results out of this\nnow again remember the highest value is\ngoing to represent\nwhat position represents the actual\nsentiment so in this case\nour sentiment score is zero now if we\nwanted to we can convert this into an\ninteger\nand then add one so in this case the\nstring that we've passed through is\ngetting a sentiment rating of one now\nremember it's between one to five\nnow we could actually try this out with\na different string so we could say um\nthis is amazing i loved it\ngreat and then let's delete the rest of\nthat and we can run it through that\npipeline again so we'll just go and\nhit shift enter and run it again and in\nthis case you can see the sentiment that\nwe're getting back is five so again you\ncan pass through a whole bunch of\ndifferent strings and you're going to\nget\ndifferent values depending on what the\ntext that you're passing through\nactually is so we could say\nmeh it was okay\nand ideally this should be sort of uh in\nthe middle of the road and in this case\nyou can see that we got three\nso it actually allows you to return a\nresult which is sort of just an integer\nor in this case a binary value\nso one two three four or five so the\nhigher the number the better\nthe sentiment the lower the number the\nworse the sentiment now in this case\nthree is sort of middle of the road um\nwe can also let's try to get it between\nlike\nfour so we might say um it was\ngood but could have been better\noh we're still getting three let's say\ngreat\nokay there we go so we managed to get it\nto four so again you can see\nthat the model actually responds really\nreally well to changes\nin the text that it's passing through so\nyou might get if you pass through a\nreally really great review then you're\nlikely to get a five result if you pass\nthrough a\nmoderate review or one that's really\ncrap you're going to head\ncloser towards the one two or three\nvalues but again this sort of gives you\nan idea of how to actually use it\nnow in this case we're going to take it\none step further and\nactually collect some reviews so what\nwe'll do is we're going to go out to\nyelp now in this case i've got\ntwo reviews that i want to take a look\nat so i've got this\npage from mexico it's like one of my\nfavorite restaurants\nwe're going to go ahead and extract\nthese reviews down here\nand actually use them and pass them\nthrough our sentiment pipeline\nso we've got a bunch of work to do here\nnow what we need to do first up is\nactually make a request to this site\nand this is where the request library is\ngoing to come in and then if you\nactually take a look\neach of these comments are actually\nstored within a class\nthat starts with comment so you can see\nthere that it actually contains comment\nin that class\nnow what we can actually do is use regex\nto actually extract all of those classes\nout and that's exactly what we're going\nto do\nso let's go ahead and do it\noop looks like we've got a bit of an\nerror so let's uh let's take a look at\nthis\nthis should be a result there we go\nokay so we've now gone and ridden\nour scraper code now again i've plugged\nthis all into five lines of code so\nif you'd like a deeper dive into how to\nactually perform scraping by all means\ndo let me know i'd love to hear your\nthoughts on it but in this case in five\nlines of code we can effectively build a\nscraper\nso the first line of code is using the\nrequest library to actually go on ahead\nand\ngrab our web page in this case it's yelp\ndot com forward slash beers forward\nslash mexico dash sydney dash two\nbut again you could do this on a whole\nbunch of other sites and we'll actually\ntest that out\nso what you'll get from that is a\nresponse code\nthen what you can actually do is type in\ntext to get the text\nout of that web page and this represents\neverything that actually comprises that\nweb page\nso what we're then going to do is pass\nthis text to beautiful soup so the next\nline of code that we've written is soup\nequals beautiful soup and then to that\nwe're passing through this\nr.text and then we're setting our parser\nwhich in this case is a html pass up\nthen the next bit is actually going on\nand extracting the specific components\nthat we want\nfrom this web page so if we actually\ntake a look\nwhat we're then doing is we're writing\nsome regex so in this case we're looking\nfor anything that has a comment within\nthe class\nso remember i was sort of saying that\neach one of these comments has a class\nwhich starts with comment\nand if we take a look at this one you\ncan see again it's got a class which\nstarts with comment if we\nlook at uh what about this one\nagain it's got a class that starts with\ncomment so what we're doing is we've\nwritten regex\nequals re dot compile and then we've\nwritten inside of quotes\nfull stop asterisks comment full stop\nasterisks and then close quotes\nthen what we're doing is we're actually\npassing that regex through to our soup\nso beautiful soup allows you to\neffectively create a soup so if i\nactually show you this\nso this is our soup so this is in a\nformat that beautiful soup is able to\nactually search through it so this is\nthis line over here\nwhat we're then able to do is use a\nfunction like find all to be able to\nfind\nall the tags within that soup that match\nour specific formatting\nso in this case we're looking for\nparagraphs so in this case you can see\nthat i've got paragraphs here\nand then we're looking for anything that\nhas a class which matches our regex\nwhich in this case is going to be\ncomment\nso if you actually take a look all of\nour reviews\nare wrapped inside of a p tag which is a\nparagraph so again if we take a look at\nsome others\nagain wrapped in a p tag has a class of\ncomment\nwrapped in a p tag has a class of\ncomment right\ncool so what we're now going to do out\nof this results line so if we actually\ntake a look the full line is results\nequals soup dot find underscore all and\nthen we're passing through the class\nthat we or the tag that we want to look\nfor which in this case is a p\ntag and then we're looking for the class\nwhich matches our reject so if we take a\nlook at our results now\nyou can see that we've got all of our\ndifferent reviews so all of them are\nhere so you can see this person saying\nthe food is fresh and tasty the scallops\nof each a started the lunch\nsounds fancy the scallops were tender\nwith the great acidity and used to make\ni'm not going to read all these reviews\nbut you sort of get the idea right\nbut in this case you can see that these\nare keep saying in this case a\nterrible habit anyway so you can see\nhere that\nall of these reviews are actually\nwrapped inside of these html tags we\ndon't want that we\njust want the text so we can actually\nextract the text from each of these\nreviews so if we take a look at one of\nour first results\nall i need to do is type in dot text and\nthis\njust gives me the text from that tag\nwhich is exactly how we want it\nso the last line of code that i've\nwritten is reviews equals\nand then we're doing a list\ncomprehension so we're looping through\neach one of the results in our results\narray so for result in results\nwe're just going to go ahead and extract\nresults.txt and then we're storing that\ninside of a list which you can see there\nso now if we take a look at our reviews\nwe've got only the reviews that we want\nso it's removed\nall of those tags that are going to\nscrew up our results it's just giving us\nexactly what we need cool so those are\nour reviews collected now again we'll\ncome back to this and we'll actually do\nit on another link and another business\nso you could do this on just about any\nlink that you wanted from yelp\nnow again the structure of the website\nmay change in the future so if you do\nget stuck\nby all means hit me up in the comments\nbelow and let me know if you'd like to\nsee a bigger web scraping for data\nscience tutorial i'd love to do\nsomething in that space\nbut for now we've got our reviews so\nwhat we're going to do\nis we're going to load them into a data\nframe so this is step 5 and we're going\nto\nrun through each one of these reviews\nand score them so let's go ahead and do\nthat\nokay so that is our line of code but it\ndoesn't look like i've imported pandas\nyet so let's do that so import\npandas as pd\nand we also need to import numpy how did\nwe miss that do we not okay we didn't\nimport those\nimport numpy simpy\nalrighty so those are the three lines of\ncode that we need to write to be able to\nget our reviews into a data frame now\nwhy a data frame\njust makes it easier to go through and\nprocess your reviews that way\nso what i've gone and done is we've gone\nand imported two additional libraries so\nimport numpy as mp and then we've\nimported pandas so import\npandas as pd and then we're actually\ngoing on ahead and creating a data frame\nso to do that i've written df equals pd\ndot\ndata frame and then we're actually\npassing through our reviews so in this\ncase you can see we're converting our\nreviews to a numpy\narray because that's what pandas likes\nworking with so\nmp.array and then two that we're passing\nthrough our reviews\nand then we're specifying what our\ncolumns are going to be called so we're\nspecifying columns equals review inside\na square bracket so if we take a look at\nour data frame now\nyou can see that we've got all of our\nreviews easily stored in a data frame so\nwe can type df.head to view our first\nfive rows in df.tail\nto review our last five rows in this\ncase it looks like we've got about nine\nreviews\nto work with looking pretty good so far\nnow what we're actually going to do is\nwe're actually going to loop through\neach one of these reviews so if we\nactually take a look at one so df dot\nilock zero so in this case we can see\nour review let's just extract our review\nso you can see that effectively we're\njust grabbing this entire string review\nand we're storing it inside of our data\nframe now if we wanted to grab\neach one we could definitely do that now\nagain we can take this block of text and\nwe can pass it through to our same\nmodel that we had up here we first up\nneed to pass it to our tokenizer\nwe then pass it to our model and then we\ndo this little transformation down here\nto be able to get our actual sentiment\nresult\nnow what we're going to do is we're\ngoing to create a quick function\nthat allows us to do exactly that so we\ncan take a string\npass it to that function and effectively\nwhat we get at is our sentiment result\nso let's do it\nokay so what i've gone and done there is\neffectively just copied over the code\nthat we wrote in step three\nso i've copied over the tokenizer.encode\nmethod or line\ni've copied over the result line which\nactually goes and calculates our\nsentiment\nand i've copied over this line down here\nwhich actually extracts our sentiment\nscore\nand i've put that inside of a function\nso let's actually take a look at this\nwhole thing\nso i've written def so we're defining a\nnew function so sentiment\nunderscore score and then to that\nfunction we're going to be passing\nthrough\neach individual review then what we're\ndoing is we're using the\ntokenizer.encode method\non the actual review and again we're\nreturning our python\nchances and we're going to be storing\nthat inside of a variable called tokens\nagain\nno different to what we're doing up here\nthen what we're doing is we're passing\nthose tokens to our model to get our\nresult and then we're going and\nperforming that transformation exactly\nas we did\nover here to get our sentiment score so\nnow if we run this function so if we use\nsentiment score\non this line over here for example\nwhat we should get back is our result so\nthere you go so by doing that we're able\nto go through\nand grab our result or review out of our\ndata frame and actually run that so if i\ndid it on a different review so if we\nsay we did it on the second line and\nagain this is just going through and\nrunning our sentiment pipeline\non that specific review but now say for\nexample we wanted to do this\non mass so rather than going through one\nby one we wanted to do it on all of our\nreviews\nand store those reviews inside of our\ndata frame how would we go about doing\nthat\nwell we can use a apply lambda function\nto be able to go through\nrun through each one of the reviews in\nour data frame and then store that\ninside of a column so let's do it\nokay so before i go on ahead and run\nthat let me explain\nthe lines of code so what we're doing is\nwe're going through and we're going to\nloop through\nevery single one of our reviews in our\nreview column so df\nand then square brackets review so this\nallows us to extract our review column\nso if i show you that\nso you can see that's just our review\ncolumn and then we're using the apply\nfunction and lambda to be able to loop\nthrough\neach one of the reviews within that\ncolumn so we've written dot\napply and then inside of that we're in\nlambda x\nand then this is going to allow us to\nwork with each individual view as the\nvariable x\nso then what we're doing is we're using\nour sentiment score function which we\ndefined up here\nand then we're passing through x but now\nlet me explain\nwhy i've got this extra little block\nover here on this so our nlp\npipeline is actually limited as to how\nmuch text or how many tokens you can\npass through to it at one particular\ntime\nand in this case it's limited to 512\ntokens so what i've gone and done\nis i've just gone and grabbed the first\n512 tokens from each one of these\nreviews now again this may influence the\nresults of your sentiment pipeline you\ncould actually append these together or\ndo it in multiple steps and get taken\naverage\nbut in this case this is a quick\nworkaround so what i've written is x\nsquare brackets colon 512 to effectively\ngrab\neverything before the 512th value\nand then close square brackets so if i\nrun this now\nthis is going to loop through every\nsingle one of our lines and if we take a\nlook at our data frame now\nyou can see that we've now got our\nsentiment score\nfully calculated so in this case you can\nsee that for\nreview one the food is fresh and tasty\nthat's giving us a sentiment score of\nfour\ndon't come here expecting legit mexican\nfood score three\nout of all the restaurants i've tried in\nsydney i'm guessing that's going to be a\npositive review\ngot a score of five ordered feed me for\n59\ni'm guessing the rest of that review\nwasn't too great let's actually take a\nlook\nso if we go and grab what would that be\nso to do which one was two so let's grab\nthree\nso ordered feed me for 59 along with\nthat food was good quality but the\nservice was tragic and weight was poorly\nmanaged personally if you're with a\ngroup looking for light finger food size\nportion this would maybe be suitable for\nyou so again that's pretty consistent\nwith the sentiment score that it's\nactually got there\ni was pleasantly surprised with what a\ngreat job so on and so forth\nokay so you can start to see that this\nallows us to loop through\nand calculate a sentiment on a bulk\nset of data now i promised at the start\nthat we do this on another business so\nlet's go ahead and try this out\nso all we need to do to do this is\nreally just go and grab another business\nso i'm going to grab this one which is\nyelp.com forward slash beers forward\nslash social brew dash cafe dash\npiermont so i'm going to grab this\nand all i need to do in order to rerun\nthis is just change\nthe link that we've got in our\nrequest.getline so if i paste that in\nnow\nthis is going to go and grab our new\nreviews\nyou can see we've now got our reviews\nanother thing to call that as well is\nif you wanted to run this as sort of\nlike a pipeline or a python script\nthe nice thing about jupyter is that you\ncan actually just download this as a dot\npython script and you can run it that\nway\nthe only thing that you need to be\nmindful of is if you're going to be\ndoing that you need to remove\nthese command or you need to remove\nthese jupiter and magic\nlines so you have to do the pip install\ninside of your environment\nnot inside of the python script okay so\nwhat we went and did is we went and\nchanged our link inside of our request\nline and this is giving us a new review\nso if we take a look these shouldn't be\nmekki co-related\nlooking pretty good and then we can just\nkeep running through our next pipeline\nso we're going to convert our data frame\nagain\nand then we're going to run our\nsentiment pipeline on it\nand there you go so we're now getting a\nsentiment for our coffee shop so again\nthis sort of shows you how you can\neasily run through and actually go and\ncalculate sentiment\non a whole bunch of data now on that\nnote we are done\nso we've gone and done a bunch of stuff\nin this tutorial so we installed and\nimported our dependencies\nwe instantiated our model we encoded and\ncalculated our sentiment\ncollected our reviews and then loaded\nour reviews into our data frame and\nperformed our sentiment analysis\nand on that note that about wraps it up\nthanks so much for tuning in guys\nhopefully you enjoyed this video if you\ndid be sure to give it a thumbs up hit\nsubscribe and tick that bell and let me\nknow what you thought of the video and\nif you had any trouble by all means do\nhit me up in the comments below i'm\nhappy to help you out with\nany difficulties or troubles or even\njust to have a good\nold yarn thanks again for tuning in\npeace\n",
  "words": [
    "ever",
    "wondered",
    "people",
    "feel",
    "want",
    "get",
    "better",
    "read",
    "feeling",
    "well",
    "video",
    "going",
    "exactly",
    "taking",
    "look",
    "sentiment",
    "analysis",
    "one",
    "cool",
    "things",
    "going",
    "video",
    "going",
    "using",
    "model",
    "called",
    "vert",
    "able",
    "reasonably",
    "easily",
    "using",
    "transformers",
    "package",
    "let",
    "take",
    "deeper",
    "look",
    "going",
    "order",
    "build",
    "sentiment",
    "model",
    "going",
    "first",
    "start",
    "installing",
    "transformers",
    "library",
    "transformers",
    "amazing",
    "library",
    "particularly",
    "comes",
    "nlp",
    "sentiment",
    "analysis",
    "falls",
    "particularly",
    "text",
    "going",
    "perform",
    "sentiment",
    "scoring",
    "using",
    "vert",
    "model",
    "makes",
    "really",
    "really",
    "easy",
    "get",
    "running",
    "pass",
    "couple",
    "prompts",
    "see",
    "sentiment",
    "looks",
    "like",
    "real",
    "kicker",
    "going",
    "take",
    "one",
    "step",
    "scrape",
    "data",
    "reviews",
    "yelp",
    "going",
    "show",
    "going",
    "run",
    "sentiment",
    "analysis",
    "pipeline",
    "yelp",
    "reviews",
    "could",
    "extend",
    "anything",
    "case",
    "going",
    "yelp",
    "let",
    "take",
    "look",
    "going",
    "fit",
    "together",
    "though",
    "first",
    "going",
    "downloading",
    "installing",
    "burp",
    "model",
    "hugging",
    "face",
    "transformers",
    "hugging",
    "face",
    "makes",
    "super",
    "easy",
    "go",
    "going",
    "run",
    "sentiment",
    "analysis",
    "single",
    "block",
    "text",
    "able",
    "actually",
    "pass",
    "text",
    "see",
    "sentiment",
    "looks",
    "like",
    "rating",
    "scale",
    "one",
    "five",
    "kind",
    "like",
    "model",
    "actually",
    "sort",
    "mimics",
    "like",
    "star",
    "rating",
    "profile",
    "case",
    "sentiment",
    "analysis",
    "last",
    "least",
    "going",
    "scrape",
    "yelp",
    "reviews",
    "apply",
    "yelp",
    "reviews",
    "data",
    "stored",
    "pandas",
    "data",
    "set",
    "pretty",
    "cool",
    "right",
    "ready",
    "let",
    "get",
    "alrighty",
    "guys",
    "order",
    "go",
    "perform",
    "sentiment",
    "analysis",
    "going",
    "five",
    "things",
    "need",
    "first",
    "going",
    "go",
    "install",
    "import",
    "dependencies",
    "going",
    "instantiate",
    "download",
    "nlp",
    "model",
    "cool",
    "thing",
    "fully",
    "model",
    "really",
    "need",
    "much",
    "else",
    "go",
    "able",
    "leverage",
    "nlp",
    "model",
    "perform",
    "sentiment",
    "analysis",
    "show",
    "model",
    "uh",
    "get",
    "going",
    "encode",
    "calculate",
    "sentiment",
    "take",
    "sentence",
    "convert",
    "sequence",
    "pass",
    "sentiment",
    "analysis",
    "model",
    "going",
    "take",
    "one",
    "step",
    "actually",
    "leverage",
    "part",
    "practical",
    "implementation",
    "going",
    "going",
    "eventually",
    "use",
    "beautiful",
    "soup",
    "scrape",
    "data",
    "yelp",
    "collect",
    "reviews",
    "put",
    "data",
    "frame",
    "run",
    "sentiment",
    "analysis",
    "model",
    "reviews",
    "actually",
    "able",
    "see",
    "real",
    "time",
    "sentiment",
    "scoring",
    "got",
    "business",
    "got",
    "company",
    "working",
    "company",
    "running",
    "able",
    "leverage",
    "sentiment",
    "analysis",
    "pipeline",
    "note",
    "let",
    "go",
    "ahead",
    "install",
    "import",
    "dependencies",
    "couple",
    "key",
    "dependencies",
    "going",
    "need",
    "one",
    "key",
    "ones",
    "going",
    "need",
    "going",
    "pie",
    "torch",
    "order",
    "get",
    "pie",
    "torch",
    "need",
    "go",
    "able",
    "install",
    "specifically",
    "need",
    "scroll",
    "able",
    "see",
    "exactly",
    "install",
    "onto",
    "machine",
    "need",
    "choose",
    "pi",
    "torch",
    "build",
    "case",
    "going",
    "choose",
    "stable",
    "windows",
    "machine",
    "select",
    "windows",
    "got",
    "mac",
    "linux",
    "machine",
    "effectively",
    "choose",
    "whichever",
    "one",
    "need",
    "going",
    "choose",
    "windows",
    "case",
    "going",
    "choose",
    "pip",
    "install",
    "going",
    "leverage",
    "using",
    "python",
    "last",
    "least",
    "going",
    "use",
    "cuda",
    "copy",
    "command",
    "going",
    "put",
    "notebook",
    "include",
    "exclamation",
    "mark",
    "paste",
    "going",
    "get",
    "rid",
    "d3",
    "pip",
    "effectively",
    "go",
    "select",
    "environment",
    "looks",
    "like",
    "want",
    "install",
    "paste",
    "notebook",
    "exclamation",
    "mark",
    "front",
    "drop",
    "three",
    "effectively",
    "go",
    "run",
    "going",
    "go",
    "ahead",
    "install",
    "pi",
    "torch",
    "believe",
    "already",
    "got",
    "installed",
    "kernel",
    "yep",
    "looks",
    "like",
    "went",
    "pretty",
    "quickly",
    "getting",
    "started",
    "first",
    "time",
    "might",
    "take",
    "little",
    "bit",
    "time",
    "stress",
    "pretty",
    "straightforward",
    "get",
    "installed",
    "next",
    "thing",
    "need",
    "actually",
    "install",
    "dependencies",
    "let",
    "go",
    "ahead",
    "write",
    "pause",
    "take",
    "look",
    "actually",
    "installing",
    "righty",
    "new",
    "dependencies",
    "going",
    "go",
    "install",
    "let",
    "run",
    "kick",
    "installation",
    "installing",
    "five",
    "different",
    "packages",
    "order",
    "written",
    "exclamation",
    "mark",
    "pip",
    "install",
    "transformers",
    "requests",
    "beautiful",
    "soup",
    "pandas",
    "numpy",
    "going",
    "explain",
    "need",
    "one",
    "libraries",
    "going",
    "leverage",
    "transformers",
    "actual",
    "nlp",
    "model",
    "going",
    "allow",
    "us",
    "easily",
    "import",
    "download",
    "install",
    "nlp",
    "model",
    "specifically",
    "nlp",
    "model",
    "going",
    "using",
    "one",
    "actually",
    "awesome",
    "right",
    "bert",
    "model",
    "allows",
    "perform",
    "sentiment",
    "analysis",
    "actually",
    "works",
    "english",
    "dutch",
    "german",
    "french",
    "spanish",
    "italian",
    "pretty",
    "cool",
    "actually",
    "really",
    "wide",
    "scope",
    "sentiment",
    "model",
    "wanted",
    "different",
    "languages",
    "could",
    "definitely",
    "one",
    "favorite",
    "things",
    "actually",
    "allows",
    "gives",
    "sentiment",
    "score",
    "one",
    "five",
    "means",
    "rather",
    "getting",
    "confidence",
    "interval",
    "number",
    "zero",
    "one",
    "actually",
    "getting",
    "bit",
    "score",
    "kind",
    "like",
    "order",
    "install",
    "using",
    "transformers",
    "pretty",
    "straightforward",
    "next",
    "roof",
    "libraries",
    "requests",
    "going",
    "allow",
    "us",
    "make",
    "request",
    "yelp",
    "site",
    "going",
    "scraping",
    "beautiful",
    "soup",
    "going",
    "allow",
    "us",
    "actually",
    "work",
    "soup",
    "actually",
    "get",
    "returned",
    "back",
    "page",
    "extract",
    "data",
    "actually",
    "need",
    "pandas",
    "going",
    "allow",
    "us",
    "structure",
    "data",
    "format",
    "makes",
    "easy",
    "actually",
    "work",
    "numpy",
    "going",
    "give",
    "us",
    "additional",
    "data",
    "transformation",
    "processes",
    "bit",
    "data",
    "nick",
    "worked",
    "analytics",
    "probably",
    "come",
    "across",
    "excel",
    "virtually",
    "every",
    "person",
    "works",
    "data",
    "would",
    "point",
    "started",
    "working",
    "excel",
    "leveraging",
    "transforming",
    "even",
    "sometimes",
    "storing",
    "data",
    "happens",
    "comes",
    "taking",
    "data",
    "skills",
    "one",
    "step",
    "something",
    "like",
    "python",
    "transitioning",
    "really",
    "really",
    "difficult",
    "need",
    "tone",
    "today",
    "video",
    "brought",
    "awesome",
    "startup",
    "named",
    "mido",
    "allows",
    "import",
    "transform",
    "export",
    "data",
    "inside",
    "jupyter",
    "notebook",
    "couple",
    "clicks",
    "single",
    "import",
    "bring",
    "explore",
    "data",
    "apply",
    "transformations",
    "create",
    "new",
    "feature",
    "columns",
    "one",
    "absolute",
    "favorite",
    "features",
    "visualize",
    "interactively",
    "makes",
    "super",
    "easy",
    "get",
    "feel",
    "happening",
    "information",
    "even",
    "better",
    "writes",
    "python",
    "code",
    "every",
    "transformation",
    "make",
    "mido",
    "sheet",
    "able",
    "see",
    "code",
    "actually",
    "represents",
    "transformation",
    "means",
    "save",
    "bunch",
    "time",
    "comes",
    "performing",
    "exploratory",
    "data",
    "analysis",
    "time",
    "adding",
    "value",
    "best",
    "try",
    "mido",
    "free",
    "head",
    "try",
    "inside",
    "jupiter",
    "notebook",
    "back",
    "regular",
    "program",
    "alrighty",
    "back",
    "going",
    "import",
    "dependencies",
    "actually",
    "going",
    "need",
    "case",
    "gone",
    "installed",
    "stuff",
    "need",
    "need",
    "actually",
    "import",
    "notebook",
    "let",
    "go",
    "ahead",
    "alrighty",
    "dependencies",
    "imported",
    "gone",
    "written",
    "five",
    "different",
    "lines",
    "code",
    "let",
    "take",
    "step",
    "back",
    "take",
    "look",
    "actually",
    "wrote",
    "first",
    "bringing",
    "tokenizer",
    "model",
    "class",
    "transformers",
    "written",
    "transformers",
    "import",
    "auto",
    "tokenizer",
    "auto",
    "model",
    "sequence",
    "classification",
    "tokenizer",
    "going",
    "allow",
    "us",
    "pass",
    "string",
    "convert",
    "sequence",
    "numbers",
    "pass",
    "nlp",
    "model",
    "auto",
    "model",
    "sequence",
    "classification",
    "going",
    "give",
    "us",
    "architecture",
    "transformers",
    "able",
    "load",
    "nlp",
    "model",
    "see",
    "little",
    "bit",
    "sec",
    "gone",
    "done",
    "imported",
    "pytorch",
    "import",
    "torch",
    "really",
    "going",
    "use",
    "arg",
    "max",
    "function",
    "torch",
    "able",
    "extract",
    "highest",
    "sequence",
    "result",
    "imported",
    "requests",
    "remember",
    "request",
    "going",
    "used",
    "grab",
    "data",
    "grab",
    "web",
    "page",
    "yelp",
    "importing",
    "beautiful",
    "soup",
    "bs4",
    "import",
    "beautiful",
    "soup",
    "beautiful",
    "soup",
    "allows",
    "us",
    "actually",
    "traverse",
    "dom",
    "results",
    "yelp",
    "allows",
    "us",
    "extract",
    "data",
    "actually",
    "need",
    "case",
    "going",
    "reviews",
    "importing",
    "going",
    "allow",
    "us",
    "create",
    "regex",
    "function",
    "able",
    "extract",
    "specific",
    "comments",
    "want",
    "five",
    "lines",
    "code",
    "transformers",
    "torch",
    "request",
    "beautiful",
    "soup",
    "good",
    "go",
    "step",
    "one",
    "done",
    "next",
    "thing",
    "need",
    "actually",
    "instantiate",
    "set",
    "model",
    "let",
    "go",
    "ahead",
    "okay",
    "tokenizer",
    "model",
    "loaded",
    "gone",
    "written",
    "two",
    "lines",
    "code",
    "first",
    "creating",
    "tokenizer",
    "actually",
    "loading",
    "model",
    "written",
    "tokenizer",
    "equals",
    "auto",
    "tokenizer",
    "using",
    "model",
    "able",
    "load",
    "nlp",
    "model",
    "case",
    "coming",
    "link",
    "make",
    "link",
    "available",
    "description",
    "well",
    "code",
    "seeing",
    "tutorial",
    "per",
    "usual",
    "jump",
    "github",
    "account",
    "check",
    "description",
    "able",
    "grab",
    "links",
    "case",
    "model",
    "going",
    "using",
    "nlp",
    "town",
    "forward",
    "slash",
    "bert",
    "dash",
    "base",
    "dash",
    "multilingual",
    "dash",
    "uncased",
    "sentiment",
    "model",
    "order",
    "grabbed",
    "effectively",
    "end",
    "url",
    "able",
    "go",
    "ahead",
    "load",
    "going",
    "make",
    "available",
    "description",
    "also",
    "gone",
    "done",
    "created",
    "model",
    "gone",
    "written",
    "model",
    "equals",
    "auto",
    "model",
    "sequence",
    "classification",
    "using",
    "method",
    "able",
    "go",
    "load",
    "model",
    "case",
    "exact",
    "using",
    "tokenizer",
    "nlp",
    "town",
    "forward",
    "slash",
    "bert",
    "multilingual",
    "dash",
    "uncased",
    "sentiment",
    "good",
    "go",
    "model",
    "setup",
    "done",
    "two",
    "lines",
    "code",
    "first",
    "time",
    "going",
    "need",
    "actually",
    "download",
    "model",
    "believe",
    "665",
    "megabytes",
    "might",
    "little",
    "bit",
    "ins",
    "download",
    "install",
    "first",
    "time",
    "got",
    "done",
    "good",
    "go",
    "need",
    "download",
    "done",
    "let",
    "go",
    "ahead",
    "actually",
    "test",
    "going",
    "pass",
    "string",
    "prompt",
    "tokenizer",
    "tokenize",
    "pass",
    "model",
    "get",
    "classification",
    "let",
    "go",
    "ahead",
    "try",
    "okay",
    "first",
    "gone",
    "done",
    "created",
    "token",
    "take",
    "look",
    "tokens",
    "see",
    "converted",
    "prompt",
    "passing",
    "sequence",
    "numbers",
    "tokenizer",
    "case",
    "encode",
    "also",
    "decode",
    "wanted",
    "decode",
    "set",
    "tokens",
    "write",
    "tokenizer",
    "dot",
    "decode",
    "convert",
    "back",
    "uh",
    "gotten",
    "done",
    "let",
    "take",
    "look",
    "tokens",
    "need",
    "first",
    "list",
    "let",
    "try",
    "go",
    "reconvert",
    "tokens",
    "back",
    "original",
    "text",
    "reason",
    "ca",
    "pass",
    "ca",
    "pass",
    "list",
    "decoder",
    "need",
    "extract",
    "single",
    "set",
    "lists",
    "grabbing",
    "internal",
    "list",
    "internal",
    "string",
    "decoding",
    "single",
    "string",
    "see",
    "string",
    "hated",
    "comma",
    "absolutely",
    "worst",
    "exactly",
    "string",
    "prompt",
    "passing",
    "encoder",
    "really",
    "need",
    "decode",
    "particular",
    "case",
    "wanted",
    "sort",
    "show",
    "works",
    "written",
    "tokens",
    "equals",
    "tokenizer",
    "dot",
    "encode",
    "passed",
    "prompt",
    "case",
    "hated",
    "comma",
    "absolutely",
    "worst",
    "passing",
    "keyword",
    "argument",
    "return",
    "underscore",
    "tenses",
    "set",
    "pi",
    "torch",
    "entire",
    "line",
    "giving",
    "us",
    "encoded",
    "string",
    "need",
    "actually",
    "perform",
    "sentiment",
    "analysis",
    "pass",
    "model",
    "let",
    "go",
    "ahead",
    "okay",
    "gone",
    "passed",
    "tokens",
    "models",
    "reasonably",
    "straightforward",
    "right",
    "written",
    "result",
    "equals",
    "model",
    "passed",
    "tokens",
    "take",
    "look",
    "result",
    "see",
    "going",
    "get",
    "sequence",
    "classifier",
    "output",
    "class",
    "going",
    "get",
    "loss",
    "bit",
    "actually",
    "need",
    "see",
    "says",
    "logits",
    "equals",
    "tensor",
    "got",
    "numbers",
    "values",
    "really",
    "simple",
    "terms",
    "represent",
    "probability",
    "particular",
    "class",
    "sentiment",
    "case",
    "see",
    "number",
    "highest",
    "means",
    "position",
    "zero",
    "ideally",
    "really",
    "bad",
    "sentiment",
    "uppermost",
    "class",
    "positions",
    "represent",
    "one",
    "two",
    "three",
    "four",
    "five",
    "extracting",
    "using",
    "pi",
    "torch",
    "going",
    "represented",
    "0",
    "1",
    "2",
    "3",
    "4",
    "starts",
    "order",
    "grab",
    "result",
    "convert",
    "something",
    "useful",
    "us",
    "actually",
    "let",
    "try",
    "see",
    "use",
    "get",
    "highest",
    "value",
    "result",
    "attribute",
    "type",
    "got",
    "caplocks",
    "see",
    "uh",
    "done",
    "result",
    "logic",
    "see",
    "able",
    "get",
    "tensor",
    "results",
    "remember",
    "highest",
    "value",
    "going",
    "represent",
    "position",
    "represents",
    "actual",
    "sentiment",
    "case",
    "sentiment",
    "score",
    "zero",
    "wanted",
    "convert",
    "integer",
    "add",
    "one",
    "case",
    "string",
    "passed",
    "getting",
    "sentiment",
    "rating",
    "one",
    "remember",
    "one",
    "five",
    "could",
    "actually",
    "try",
    "different",
    "string",
    "could",
    "say",
    "um",
    "amazing",
    "loved",
    "great",
    "let",
    "delete",
    "rest",
    "run",
    "pipeline",
    "go",
    "hit",
    "shift",
    "enter",
    "run",
    "case",
    "see",
    "sentiment",
    "getting",
    "back",
    "five",
    "pass",
    "whole",
    "bunch",
    "different",
    "strings",
    "going",
    "get",
    "different",
    "values",
    "depending",
    "text",
    "passing",
    "actually",
    "could",
    "say",
    "meh",
    "okay",
    "ideally",
    "sort",
    "uh",
    "middle",
    "road",
    "case",
    "see",
    "got",
    "three",
    "actually",
    "allows",
    "return",
    "result",
    "sort",
    "integer",
    "case",
    "binary",
    "value",
    "one",
    "two",
    "three",
    "four",
    "five",
    "higher",
    "number",
    "better",
    "sentiment",
    "lower",
    "number",
    "worse",
    "sentiment",
    "case",
    "three",
    "sort",
    "middle",
    "road",
    "um",
    "also",
    "let",
    "try",
    "get",
    "like",
    "four",
    "might",
    "say",
    "um",
    "good",
    "could",
    "better",
    "oh",
    "still",
    "getting",
    "three",
    "let",
    "say",
    "great",
    "okay",
    "go",
    "managed",
    "get",
    "four",
    "see",
    "model",
    "actually",
    "responds",
    "really",
    "really",
    "well",
    "changes",
    "text",
    "passing",
    "might",
    "get",
    "pass",
    "really",
    "really",
    "great",
    "review",
    "likely",
    "get",
    "five",
    "result",
    "pass",
    "moderate",
    "review",
    "one",
    "really",
    "crap",
    "going",
    "head",
    "closer",
    "towards",
    "one",
    "two",
    "three",
    "values",
    "sort",
    "gives",
    "idea",
    "actually",
    "use",
    "case",
    "going",
    "take",
    "one",
    "step",
    "actually",
    "collect",
    "reviews",
    "going",
    "go",
    "yelp",
    "case",
    "got",
    "two",
    "reviews",
    "want",
    "take",
    "look",
    "got",
    "page",
    "mexico",
    "like",
    "one",
    "favorite",
    "restaurants",
    "going",
    "go",
    "ahead",
    "extract",
    "reviews",
    "actually",
    "use",
    "pass",
    "sentiment",
    "pipeline",
    "got",
    "bunch",
    "work",
    "need",
    "first",
    "actually",
    "make",
    "request",
    "site",
    "request",
    "library",
    "going",
    "come",
    "actually",
    "take",
    "look",
    "comments",
    "actually",
    "stored",
    "within",
    "class",
    "starts",
    "comment",
    "see",
    "actually",
    "contains",
    "comment",
    "class",
    "actually",
    "use",
    "regex",
    "actually",
    "extract",
    "classes",
    "exactly",
    "going",
    "let",
    "go",
    "ahead",
    "oop",
    "looks",
    "like",
    "got",
    "bit",
    "error",
    "let",
    "uh",
    "let",
    "take",
    "look",
    "result",
    "go",
    "okay",
    "gone",
    "ridden",
    "scraper",
    "code",
    "plugged",
    "five",
    "lines",
    "code",
    "like",
    "deeper",
    "dive",
    "actually",
    "perform",
    "scraping",
    "means",
    "let",
    "know",
    "love",
    "hear",
    "thoughts",
    "case",
    "five",
    "lines",
    "code",
    "effectively",
    "build",
    "scraper",
    "first",
    "line",
    "code",
    "using",
    "request",
    "library",
    "actually",
    "go",
    "ahead",
    "grab",
    "web",
    "page",
    "case",
    "yelp",
    "dot",
    "com",
    "forward",
    "slash",
    "beers",
    "forward",
    "slash",
    "mexico",
    "dash",
    "sydney",
    "dash",
    "two",
    "could",
    "whole",
    "bunch",
    "sites",
    "actually",
    "test",
    "get",
    "response",
    "code",
    "actually",
    "type",
    "text",
    "get",
    "text",
    "web",
    "page",
    "represents",
    "everything",
    "actually",
    "comprises",
    "web",
    "page",
    "going",
    "pass",
    "text",
    "beautiful",
    "soup",
    "next",
    "line",
    "code",
    "written",
    "soup",
    "equals",
    "beautiful",
    "soup",
    "passing",
    "setting",
    "parser",
    "case",
    "html",
    "pass",
    "next",
    "bit",
    "actually",
    "going",
    "extracting",
    "specific",
    "components",
    "want",
    "web",
    "page",
    "actually",
    "take",
    "look",
    "writing",
    "regex",
    "case",
    "looking",
    "anything",
    "comment",
    "within",
    "class",
    "remember",
    "sort",
    "saying",
    "one",
    "comments",
    "class",
    "starts",
    "comment",
    "take",
    "look",
    "one",
    "see",
    "got",
    "class",
    "starts",
    "comment",
    "look",
    "uh",
    "one",
    "got",
    "class",
    "starts",
    "comment",
    "written",
    "regex",
    "equals",
    "dot",
    "compile",
    "written",
    "inside",
    "quotes",
    "full",
    "stop",
    "asterisks",
    "comment",
    "full",
    "stop",
    "asterisks",
    "close",
    "quotes",
    "actually",
    "passing",
    "regex",
    "soup",
    "beautiful",
    "soup",
    "allows",
    "effectively",
    "create",
    "soup",
    "actually",
    "show",
    "soup",
    "format",
    "beautiful",
    "soup",
    "able",
    "actually",
    "search",
    "line",
    "able",
    "use",
    "function",
    "like",
    "find",
    "able",
    "find",
    "tags",
    "within",
    "soup",
    "match",
    "specific",
    "formatting",
    "case",
    "looking",
    "paragraphs",
    "case",
    "see",
    "got",
    "paragraphs",
    "looking",
    "anything",
    "class",
    "matches",
    "regex",
    "case",
    "going",
    "comment",
    "actually",
    "take",
    "look",
    "reviews",
    "wrapped",
    "inside",
    "p",
    "tag",
    "paragraph",
    "take",
    "look",
    "others",
    "wrapped",
    "p",
    "tag",
    "class",
    "comment",
    "wrapped",
    "p",
    "tag",
    "class",
    "comment",
    "right",
    "cool",
    "going",
    "results",
    "line",
    "actually",
    "take",
    "look",
    "full",
    "line",
    "results",
    "equals",
    "soup",
    "dot",
    "find",
    "underscore",
    "passing",
    "class",
    "tag",
    "want",
    "look",
    "case",
    "p",
    "tag",
    "looking",
    "class",
    "matches",
    "reject",
    "take",
    "look",
    "results",
    "see",
    "got",
    "different",
    "reviews",
    "see",
    "person",
    "saying",
    "food",
    "fresh",
    "tasty",
    "scallops",
    "started",
    "lunch",
    "sounds",
    "fancy",
    "scallops",
    "tender",
    "great",
    "acidity",
    "used",
    "make",
    "going",
    "read",
    "reviews",
    "sort",
    "get",
    "idea",
    "right",
    "case",
    "see",
    "keep",
    "saying",
    "case",
    "terrible",
    "habit",
    "anyway",
    "see",
    "reviews",
    "actually",
    "wrapped",
    "inside",
    "html",
    "tags",
    "want",
    "want",
    "text",
    "actually",
    "extract",
    "text",
    "reviews",
    "take",
    "look",
    "one",
    "first",
    "results",
    "need",
    "type",
    "dot",
    "text",
    "gives",
    "text",
    "tag",
    "exactly",
    "want",
    "last",
    "line",
    "code",
    "written",
    "reviews",
    "equals",
    "list",
    "comprehension",
    "looping",
    "one",
    "results",
    "results",
    "array",
    "result",
    "results",
    "going",
    "go",
    "ahead",
    "extract",
    "storing",
    "inside",
    "list",
    "see",
    "take",
    "look",
    "reviews",
    "got",
    "reviews",
    "want",
    "removed",
    "tags",
    "going",
    "screw",
    "results",
    "giving",
    "us",
    "exactly",
    "need",
    "cool",
    "reviews",
    "collected",
    "come",
    "back",
    "actually",
    "another",
    "link",
    "another",
    "business",
    "could",
    "link",
    "wanted",
    "yelp",
    "structure",
    "website",
    "may",
    "change",
    "future",
    "get",
    "stuck",
    "means",
    "hit",
    "comments",
    "let",
    "know",
    "like",
    "see",
    "bigger",
    "web",
    "scraping",
    "data",
    "science",
    "tutorial",
    "love",
    "something",
    "space",
    "got",
    "reviews",
    "going",
    "going",
    "load",
    "data",
    "frame",
    "step",
    "5",
    "going",
    "run",
    "one",
    "reviews",
    "score",
    "let",
    "go",
    "ahead",
    "okay",
    "line",
    "code",
    "look",
    "like",
    "imported",
    "pandas",
    "yet",
    "let",
    "import",
    "pandas",
    "pd",
    "also",
    "need",
    "import",
    "numpy",
    "miss",
    "okay",
    "import",
    "import",
    "numpy",
    "simpy",
    "alrighty",
    "three",
    "lines",
    "code",
    "need",
    "write",
    "able",
    "get",
    "reviews",
    "data",
    "frame",
    "data",
    "frame",
    "makes",
    "easier",
    "go",
    "process",
    "reviews",
    "way",
    "gone",
    "done",
    "gone",
    "imported",
    "two",
    "additional",
    "libraries",
    "import",
    "numpy",
    "mp",
    "imported",
    "pandas",
    "import",
    "pandas",
    "pd",
    "actually",
    "going",
    "ahead",
    "creating",
    "data",
    "frame",
    "written",
    "df",
    "equals",
    "pd",
    "dot",
    "data",
    "frame",
    "actually",
    "passing",
    "reviews",
    "case",
    "see",
    "converting",
    "reviews",
    "numpy",
    "array",
    "pandas",
    "likes",
    "working",
    "two",
    "passing",
    "reviews",
    "specifying",
    "columns",
    "going",
    "called",
    "specifying",
    "columns",
    "equals",
    "review",
    "inside",
    "square",
    "bracket",
    "take",
    "look",
    "data",
    "frame",
    "see",
    "got",
    "reviews",
    "easily",
    "stored",
    "data",
    "frame",
    "type",
    "view",
    "first",
    "five",
    "rows",
    "review",
    "last",
    "five",
    "rows",
    "case",
    "looks",
    "like",
    "got",
    "nine",
    "reviews",
    "work",
    "looking",
    "pretty",
    "good",
    "far",
    "actually",
    "going",
    "actually",
    "going",
    "loop",
    "one",
    "reviews",
    "actually",
    "take",
    "look",
    "one",
    "df",
    "dot",
    "ilock",
    "zero",
    "case",
    "see",
    "review",
    "let",
    "extract",
    "review",
    "see",
    "effectively",
    "grabbing",
    "entire",
    "string",
    "review",
    "storing",
    "inside",
    "data",
    "frame",
    "wanted",
    "grab",
    "one",
    "could",
    "definitely",
    "take",
    "block",
    "text",
    "pass",
    "model",
    "first",
    "need",
    "pass",
    "tokenizer",
    "pass",
    "model",
    "little",
    "transformation",
    "able",
    "get",
    "actual",
    "sentiment",
    "result",
    "going",
    "going",
    "create",
    "quick",
    "function",
    "allows",
    "us",
    "exactly",
    "take",
    "string",
    "pass",
    "function",
    "effectively",
    "get",
    "sentiment",
    "result",
    "let",
    "okay",
    "gone",
    "done",
    "effectively",
    "copied",
    "code",
    "wrote",
    "step",
    "three",
    "copied",
    "method",
    "line",
    "copied",
    "result",
    "line",
    "actually",
    "goes",
    "calculates",
    "sentiment",
    "copied",
    "line",
    "actually",
    "extracts",
    "sentiment",
    "score",
    "put",
    "inside",
    "function",
    "let",
    "actually",
    "take",
    "look",
    "whole",
    "thing",
    "written",
    "def",
    "defining",
    "new",
    "function",
    "sentiment",
    "underscore",
    "score",
    "function",
    "going",
    "passing",
    "individual",
    "review",
    "using",
    "method",
    "actual",
    "review",
    "returning",
    "python",
    "chances",
    "going",
    "storing",
    "inside",
    "variable",
    "called",
    "tokens",
    "different",
    "passing",
    "tokens",
    "model",
    "get",
    "result",
    "going",
    "performing",
    "transformation",
    "exactly",
    "get",
    "sentiment",
    "score",
    "run",
    "function",
    "use",
    "sentiment",
    "score",
    "line",
    "example",
    "get",
    "back",
    "result",
    "go",
    "able",
    "go",
    "grab",
    "result",
    "review",
    "data",
    "frame",
    "actually",
    "run",
    "different",
    "review",
    "say",
    "second",
    "line",
    "going",
    "running",
    "sentiment",
    "pipeline",
    "specific",
    "review",
    "say",
    "example",
    "wanted",
    "mass",
    "rather",
    "going",
    "one",
    "one",
    "wanted",
    "reviews",
    "store",
    "reviews",
    "inside",
    "data",
    "frame",
    "would",
    "go",
    "well",
    "use",
    "apply",
    "lambda",
    "function",
    "able",
    "go",
    "run",
    "one",
    "reviews",
    "data",
    "frame",
    "store",
    "inside",
    "column",
    "let",
    "okay",
    "go",
    "ahead",
    "run",
    "let",
    "explain",
    "lines",
    "code",
    "going",
    "going",
    "loop",
    "every",
    "single",
    "one",
    "reviews",
    "review",
    "column",
    "df",
    "square",
    "brackets",
    "review",
    "allows",
    "us",
    "extract",
    "review",
    "column",
    "show",
    "see",
    "review",
    "column",
    "using",
    "apply",
    "function",
    "lambda",
    "able",
    "loop",
    "one",
    "reviews",
    "within",
    "column",
    "written",
    "dot",
    "apply",
    "inside",
    "lambda",
    "x",
    "going",
    "allow",
    "us",
    "work",
    "individual",
    "view",
    "variable",
    "x",
    "using",
    "sentiment",
    "score",
    "function",
    "defined",
    "passing",
    "x",
    "let",
    "explain",
    "got",
    "extra",
    "little",
    "block",
    "nlp",
    "pipeline",
    "actually",
    "limited",
    "much",
    "text",
    "many",
    "tokens",
    "pass",
    "one",
    "particular",
    "time",
    "case",
    "limited",
    "512",
    "tokens",
    "gone",
    "done",
    "gone",
    "grabbed",
    "first",
    "512",
    "tokens",
    "one",
    "reviews",
    "may",
    "influence",
    "results",
    "sentiment",
    "pipeline",
    "could",
    "actually",
    "append",
    "together",
    "multiple",
    "steps",
    "get",
    "taken",
    "average",
    "case",
    "quick",
    "workaround",
    "written",
    "x",
    "square",
    "brackets",
    "colon",
    "512",
    "effectively",
    "grab",
    "everything",
    "512th",
    "value",
    "close",
    "square",
    "brackets",
    "run",
    "going",
    "loop",
    "every",
    "single",
    "one",
    "lines",
    "take",
    "look",
    "data",
    "frame",
    "see",
    "got",
    "sentiment",
    "score",
    "fully",
    "calculated",
    "case",
    "see",
    "review",
    "one",
    "food",
    "fresh",
    "tasty",
    "giving",
    "us",
    "sentiment",
    "score",
    "four",
    "come",
    "expecting",
    "legit",
    "mexican",
    "food",
    "score",
    "three",
    "restaurants",
    "tried",
    "sydney",
    "guessing",
    "going",
    "positive",
    "review",
    "got",
    "score",
    "five",
    "ordered",
    "feed",
    "59",
    "guessing",
    "rest",
    "review",
    "great",
    "let",
    "actually",
    "take",
    "look",
    "go",
    "grab",
    "would",
    "one",
    "two",
    "let",
    "grab",
    "three",
    "ordered",
    "feed",
    "59",
    "along",
    "food",
    "good",
    "quality",
    "service",
    "tragic",
    "weight",
    "poorly",
    "managed",
    "personally",
    "group",
    "looking",
    "light",
    "finger",
    "food",
    "size",
    "portion",
    "would",
    "maybe",
    "suitable",
    "pretty",
    "consistent",
    "sentiment",
    "score",
    "actually",
    "got",
    "pleasantly",
    "surprised",
    "great",
    "job",
    "forth",
    "okay",
    "start",
    "see",
    "allows",
    "us",
    "loop",
    "calculate",
    "sentiment",
    "bulk",
    "set",
    "data",
    "promised",
    "start",
    "another",
    "business",
    "let",
    "go",
    "ahead",
    "try",
    "need",
    "really",
    "go",
    "grab",
    "another",
    "business",
    "going",
    "grab",
    "one",
    "forward",
    "slash",
    "beers",
    "forward",
    "slash",
    "social",
    "brew",
    "dash",
    "cafe",
    "dash",
    "piermont",
    "going",
    "grab",
    "need",
    "order",
    "rerun",
    "change",
    "link",
    "got",
    "paste",
    "going",
    "go",
    "grab",
    "new",
    "reviews",
    "see",
    "got",
    "reviews",
    "another",
    "thing",
    "call",
    "well",
    "wanted",
    "run",
    "sort",
    "like",
    "pipeline",
    "python",
    "script",
    "nice",
    "thing",
    "jupyter",
    "actually",
    "download",
    "dot",
    "python",
    "script",
    "run",
    "way",
    "thing",
    "need",
    "mindful",
    "going",
    "need",
    "remove",
    "command",
    "need",
    "remove",
    "jupiter",
    "magic",
    "lines",
    "pip",
    "install",
    "inside",
    "environment",
    "inside",
    "python",
    "script",
    "okay",
    "went",
    "went",
    "changed",
    "link",
    "inside",
    "request",
    "line",
    "giving",
    "us",
    "new",
    "review",
    "take",
    "look",
    "mekki",
    "looking",
    "pretty",
    "good",
    "keep",
    "running",
    "next",
    "pipeline",
    "going",
    "convert",
    "data",
    "frame",
    "going",
    "run",
    "sentiment",
    "pipeline",
    "go",
    "getting",
    "sentiment",
    "coffee",
    "shop",
    "sort",
    "shows",
    "easily",
    "run",
    "actually",
    "go",
    "calculate",
    "sentiment",
    "whole",
    "bunch",
    "data",
    "note",
    "done",
    "gone",
    "done",
    "bunch",
    "stuff",
    "tutorial",
    "installed",
    "imported",
    "dependencies",
    "instantiated",
    "model",
    "encoded",
    "calculated",
    "sentiment",
    "collected",
    "reviews",
    "loaded",
    "reviews",
    "data",
    "frame",
    "performed",
    "sentiment",
    "analysis",
    "note",
    "wraps",
    "thanks",
    "much",
    "tuning",
    "guys",
    "hopefully",
    "enjoyed",
    "video",
    "sure",
    "give",
    "thumbs",
    "hit",
    "subscribe",
    "tick",
    "bell",
    "let",
    "know",
    "thought",
    "video",
    "trouble",
    "means",
    "hit",
    "comments",
    "happy",
    "help",
    "difficulties",
    "troubles",
    "even",
    "good",
    "old",
    "yarn",
    "thanks",
    "tuning",
    "peace"
  ],
  "keywords": [
    "want",
    "get",
    "well",
    "video",
    "going",
    "exactly",
    "look",
    "sentiment",
    "analysis",
    "one",
    "cool",
    "using",
    "model",
    "able",
    "transformers",
    "let",
    "take",
    "order",
    "first",
    "nlp",
    "text",
    "perform",
    "makes",
    "really",
    "pass",
    "see",
    "looks",
    "like",
    "step",
    "data",
    "reviews",
    "yelp",
    "show",
    "run",
    "pipeline",
    "could",
    "case",
    "go",
    "single",
    "actually",
    "five",
    "sort",
    "apply",
    "pandas",
    "set",
    "pretty",
    "right",
    "need",
    "install",
    "import",
    "dependencies",
    "download",
    "thing",
    "leverage",
    "uh",
    "convert",
    "sequence",
    "use",
    "beautiful",
    "soup",
    "frame",
    "time",
    "got",
    "ahead",
    "torch",
    "choose",
    "effectively",
    "python",
    "notebook",
    "three",
    "getting",
    "little",
    "bit",
    "next",
    "new",
    "different",
    "written",
    "numpy",
    "allow",
    "us",
    "allows",
    "wanted",
    "score",
    "means",
    "make",
    "request",
    "work",
    "back",
    "page",
    "extract",
    "transformation",
    "inside",
    "code",
    "bunch",
    "value",
    "try",
    "gone",
    "imported",
    "lines",
    "tokenizer",
    "class",
    "auto",
    "string",
    "load",
    "done",
    "function",
    "result",
    "grab",
    "web",
    "results",
    "regex",
    "comments",
    "good",
    "okay",
    "two",
    "equals",
    "link",
    "forward",
    "slash",
    "dash",
    "tokens",
    "passing",
    "dot",
    "list",
    "line",
    "four",
    "starts",
    "say",
    "great",
    "review",
    "comment",
    "looking",
    "tag",
    "food",
    "another",
    "loop",
    "column"
  ]
}