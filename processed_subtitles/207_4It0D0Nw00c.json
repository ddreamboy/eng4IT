{
  "text": "when you talk about devops you might\nhear the names of a number of tools such\nas Docker kubernetes ansible terraform\ngit GitHub Jenkins Prometheus grafana\nand it might be overwhelming the number\nof tools and technologies that there are\nto learn in this video I'm going to try\nand demystify these tools by walking you\nthrough a story a story of how you start\nwith a small application where you don't\nreally need a large infrastructure but\nas you expand how each of these tools\ncome in at different stages of your\nproduct to help with the different\nchallenges you face this is a very high\nlevel overview of how all of these tools\nfit in to your infrastructure as well as\nyour development workflows and I'm sure\nby the end of this video you will leave\nwith a good understanding of where these\nfit\nso it all starts with an idea so that's\nyou and you have this idea that you\nthink it's going to change the world so\nyou're going to build a website that\nbooks tickets to Mars in advance so\npeople don't have to pay too much or\nwait in a queue the future\nso what do you do as any other\nintelligent developer would do you start\nwith the market research oops sorry I\ngot that wrong as any other intelligent\ndeveloper would do you get coding\nyou open your favorite editor and start\nbuilding your idea and hours later you\nhave the first version of your product\nready and it's time to share it with the\nworld\nnow how would you do that\nthis code is still running on your\nlaptop and it's only accessible at HTTP\nlocalhost 8080 for now even if you find\na way to share it with the world from\nyour laptop when you shut down your\nlaptop no one would have access to it so\nyou need to host your application on a\nsystem that is never turned off\nso you identify a server that is either\na physical server in a data center or a\nvirtual machine in a data center or in\nthe cloud and you copy the code to it\nand you run it now you can't just run an\napplication on a system by just copying\ncode to it you need to have the system\nconfigured first to be able to run it\nfor example if the application was\nwritten in python or Java or any other\nprogramming languages then you must have\none of these programming languages or\nthe runtimes in place on the server too\nif the application uses any libraries or\npackages then you must have those exact\nversion of libraries and packages\nconfigured on the server too in the\nexact same way now you develop your\napplication on your laptop so that that\nbecomes your development environment and\nthe server you host your application on\nbecomes your production environment\nnow once all of that is set up you now\nhave your application running on the\nserver the server has an IP so it's now\naccessible at that IP address but you\ndon't want to have to share an IP\naddress to people so you purchase a\ndomain name and map that to your server\nnow you have something to share to the\nworld\nyou're all set and you're now ready to\nshare it with the world\nso you tweeted out tagging a certain\nindividual and that certain individual\nretweets it and off you go your website\nis now famous and you now have thousands\nof users visiting your site and booking\ntheir future travel to the red planet\nnow let's look at our workflow as of now\nthe current workflow involves the\ndevelopment phase where you write your\ncode on your laptop this could be on\nyour favorite text editor like vs code\nor pycharm now the code in text format\nis not good enough to run to run it as\nan application by the end user it needs\nto be in an executable format if you're\nfamiliar with Windows or binary file if\nyou're familiar with Linux and\nconverting code from a text format to a\nbinary or executable format is known as\nbuilding the code and there are tools\navailable such as the python setup tools\nor Maven or Gradle for other platforms\nand you usually have a build script that\ninvokes these tools to build the\napplication now once built the\nexecutable is moved to a production\nenvironment in this case our server and\nrun in production and that's referred to\nas the deploy stage a simple three-step\nprocess so there are so many variations\nto this process and different ways and\ntools used to do this but I'm keeping it\nsuper high level for now\nnow you have users now visiting your\nwebsite and users are requesting for\nmore features so you bring in your\nfriends along as additional developers\nand now everyone is working on their own\ndevelopment environments but on the same\ncode base and they all copied their code\nto a central Hub whenever ready and now\nthey're stepping on each other's toes\nand working on the same files at the\nsame time and creating conflicts and you\nneed a solution that can help\ncollaborate and that's where git comes\nin git helps all developers to work on\nthe same application at the same time\nand collaborate efficiently now everyone\ninstalls and configures git on their\nmachines and that's going to help in\neasily pulling the latest git code from\nthe central hub using the git pull\ncommand add their own changes and push\nit back using the git push command and\nthe central Hub is a cloud-based\nplatform that serves as a central\nlocation for all code so git is the\nunderlying technology and GitHub is the\npublicly hosted git-based Central\nRepository entry of code where you can\nconfigure project\norganizations users and Define different\naccess for different users and some\nother similar platforms are gitlab and\nbitbucket\nso to summarize git is the command line\ntool or the underlying technology that\nenables versioning of code and\ncollaboration between multiple\ndevelopers and GitHub is the git-based\npublicly accessible repository of code\nwhere you push your code to and it has a\nweb interface where you invite new\ndevelopers manage your project manage\nissues with your projects add\ndocumentation to your code Etc\nso now with four developers and git and\nGitHub in place the development issues\nare sorted however we still need to move\ncode manually to the production\nenvironment every time something new is\nready so the previous workflow involved\ndeveloping code in your development\nenvironment then building the code to an\nexecutable package and then deploying it\nto production however now with multiple\ndevelopers the code needs to be built\nwith the changes contributed by all of\nthe developers so building on the laptop\nitself no longer works as an\nindividual's laptop may not have all the\nlatest changes it makes sense to move\nthe build operation to a dedicated build\nserver that gets the latest version of\nthe code and builds it before moving\ninto production\nso now pushing new builds to production\nis risky as it might have introduced new\nbugs or broken something that worked\nbefore so we need to test it in a test\nenvironment too\nso here's how the workflow looks now\nevery developer develops code in their\ndevelopment environment in their own\nlaptops and pushes it to GitHub you then\nmanually copy the code to your build\nserver and then builds the code to an\nexecutable then manually copy the\nexecutable to the test server\nand then test the application to make\nsure that it works as expected and that\nno new bugs are introduced and then\nmanually copy the executable to\nproduction environment and deploy it and\nbecause it's a manual job and requires a\nset of manual tasks you decide to move\nall new code containing new features to\nthe production environment once a week\nhowever that's not very well accepted by\nusers or by your fellow developers\nbecause some of the minor features\nalready and don't necessarily have to\nwait till the end of the week to be\npushed production and the entire process\nof manual deployment itself takes a week\nto execute on its own when the code base\nand features grow you want to be able to\nrelease features faster and more\nfrequently with less manual effort and\nthat's where cicd tools come in\nnow cicd stands for continuous\nintegration and continuous delivery or\ndeployment and tools like Jenkins GitHub\nactions or gitlab cicd help you automate\nthese manual tasks and build a pipeline\nwith one of these tools configured every\ntime code is pushed it is automatically\npulled from the GitHub repository to the\nbuild server and then build and then the\nexecutable is automatically moved to the\ntest server and tested and on successful\ntesting it is automatically moved to the\nproduction server and deployed\nnow this allows changes features and Bug\nfixes to move faster through the\npipeline and be deployed more often with\nlesser manual effort ultimately enabling\nyou and your team to resolve issues\nquicker ship features faster and make\nyour users more happier\nnow with Git GitHub and cicd pipelines\nin place we have enabled our team to\nmake changes to our application and get\nthem to production servers seamlessly\nhowever it's still not all that seamless\nremember the dependencies and libraries\nthat we talked about earlier the ones\nthat are required to for the\napplications to run on any system these\ndependencies need to be configured the\nexact same way on the servers and this\nmeans that if a new package is required\nthis needs to be manually installed and\nconfigured on all the servers that this\ncode runs and this now is still a manual\ntask if you miss out configuring one of\nthese packages with the right version in\nthe right way it will lead to the\nsoftware not working and resulting in\nunexpected outcomes on different systems\nand that's where containers come in\ncontainers help package the application\nand its dependencies into an image that\ncan then be run on any system without\nworrying about dependencies so now\nduring the build you build a container\nimage with the application and its\ndependencies package into it and all\nother systems can now simply run a\ncontainer from that image without\nworrying about installing and\nconfiguring libraries and dependencies\nnow one technology that enables working\nwith containers is Docker with Docker\nthe developer can create a Docker file\nwhich specifies what the dependencies\nare and that Docker file can be used\nduring the build to build an image and\nthat image can then be run on any server\nusing a simple Docker run command\nnow the major functionality of a\ncontainer is that it enables isolation\nbetween processes so each container is\nan isolated instance and this allows us\nto run multiple containers each having\nits own separate instance of the\napplication on the same server\nnow let's focus on the production side\nof things on the production server\ncurrently we have one server but with\nour users increasing we want to be able\nto add more servers and run our\napplication on all of them now that we\nhave containers all we need to do is run\ncontainers on them but how do you do\nthat the right way so that containers\nare spun up when the users increase and\ndestroyed when load reduces how do you\nensure if a container fails it is\nautomatically brought back up\nand that's where container orchestration\nplatforms come in kubernetes is a\npopular container orchestration platform\nthat helps declare how containers should\nbe deployed and ensure that it is always\nrun in the same way as declared\nit can help Auto scale containers as\nwell as the underlying infrastructure\nbased on need and manage resources on\nthe underlying service to ensure optimal\nresource utilization\nby now we have developers pushing code\nto a central GitHub repository the CI CD\npipeline then pulls the code to the\nbuild server builds it to Docker images\nand then that image is used to test the\napplication in the test environment and\nfinally deployed in a production\nenvironment as containers by kubernetes\nthe underlying infrastructure is still\none big challenge so every time a new\nserver is to be provisioned it needs to\nbe set up in the exact same way as the\nothers in the cluster it needs to have\nthe right resources assigned to it the\nright version of operating system\nprobably there is some storage attached\nto it and there may be some kernel\nsettings or other software that needs to\nbe pre-configured on it such as the\ndocker runtime or the necessary\nkubernetes packages and all of these\nneed to have the exact same\nconfiguration so this is going to be one\nbig challenge if you have to click\nthrough the cloud platform GUI each time\na server needs to be provisioned and\nthis can take a lot of time and can lead\nto human errors in misconfiguring\ninfrastructure resulting in having to\nrebuild the entire server to automate\nthe provisioning of these servers tools\nlike terraform can be used terraform\nautomates the provisioning and\nconfiguration of servers irrespective of\nwhat cloud platforms they are on and it\nensures that the server is configured\nare always in the same state\nif someone manually changes a\nconfiguration on these servers and not\nthrough terraform it changes it back to\nmake sure that the state's defined is\npreserved the state is defined by\nconfiguring a terraform manifest file\nthat looks like this it's a snippet from\na terraform manifest file that has a\nlist of servers and their configuration\nso yes it looks like code because it is\ncode and that's why it's called as\ninfrastructure as code all of the\ninfrastructure configuration including\nthe virtual machines the storage buckets\nthe VPC Etc is now stored in the form of\ncode and is stored in source code\nrepositories that way it can be\nconsidered as any other code and be\ntracked if changes are needed then make\nchanges to the code and run the\nterraform apply command\nnow once the servers are provisioned the\nconfiguration of these servers can be\nautomated by tools like ansible so while\nterraform is more of an infrastructure\nprovisioning tool ansible is an\nautomation tool that helps configure\nthese infrastructure once provisioned\nnote that there are many areas both\nterraform and ansible overlap both of\nthese tools can provision infrastructure\nand automate software configuration on\nthem but each has its own benefits in\ndifferent areas so while terraform is\nused mostly for provisioning and\ndeprovisioning infrastructure ansible is\nused for post configuration activities\nsuch as installing the software and\nconfiguring them on those servers so\nsimilar to terraform ansible uses code\nto configure servers it's called ansible\nplaybooks and this code also goes to the\nsource code repository on GitHub\nnow provisioning is not all we now want\nto maintain it as well we want to be\nable to monitor these servers and take\npreventive measures we want to be able\nto see the CPU utilization on these\nservers the memory consumption monitor\nthe processes identify what process is\ncausing higher consumption Etc and\nthat's where tools like Prometheus come\nin Prometheus collects information or\nmetrics from the different servers and\nstores it centrally now not only do we\nwant to collect metrics we also want to\nbe able to visualize them graphically\nand that's where tools like grafana\ncomes in grafana helps make sense out of\nthe data collected by Prometheus by\nvisualizing it into charts and graphs\nnow all of that together help us go from\nan idea to building it deploying it\ngetting it out to our users fast and it\ndoesn't stop there getting feedback from\nour users reviewing them brainstorming\nand coming up with new ideas and\nimplementing those ideas\num is now a breeze so any code pushed\nnow goes through the pipeline and we\nhave that we have defined and it's\nautomatically built tested and deployed\nsooner resulting in multiple deploys to\nproduction every day and once deployed\nit is monitored and more feedback is\nretrieved from the user and this cycle\nrepeats onto Infinity\nand that is what devops is devops is a\ncombination of people processors and\ntools that work together in going from\nan idea to execution and delivering high\nquality software consistently well\nthat's all for this video I hope you\nenjoyed this high level overview of the\ndifferent tools and Technologies and if\nyou like the video don't forget to\nsubscribe to our Channel and if you have\nany questions feel free to leave them in\nthe comments below until next time\ngoodbye\nforeign\n",
  "words": [
    "talk",
    "devops",
    "might",
    "hear",
    "names",
    "number",
    "tools",
    "docker",
    "kubernetes",
    "ansible",
    "terraform",
    "git",
    "github",
    "jenkins",
    "prometheus",
    "grafana",
    "might",
    "overwhelming",
    "number",
    "tools",
    "technologies",
    "learn",
    "video",
    "going",
    "try",
    "demystify",
    "tools",
    "walking",
    "story",
    "story",
    "start",
    "small",
    "application",
    "really",
    "need",
    "large",
    "infrastructure",
    "expand",
    "tools",
    "come",
    "different",
    "stages",
    "product",
    "help",
    "different",
    "challenges",
    "face",
    "high",
    "level",
    "overview",
    "tools",
    "fit",
    "infrastructure",
    "well",
    "development",
    "workflows",
    "sure",
    "end",
    "video",
    "leave",
    "good",
    "understanding",
    "fit",
    "starts",
    "idea",
    "idea",
    "think",
    "going",
    "change",
    "world",
    "going",
    "build",
    "website",
    "books",
    "tickets",
    "mars",
    "advance",
    "people",
    "pay",
    "much",
    "wait",
    "queue",
    "future",
    "intelligent",
    "developer",
    "would",
    "start",
    "market",
    "research",
    "oops",
    "sorry",
    "got",
    "wrong",
    "intelligent",
    "developer",
    "would",
    "get",
    "coding",
    "open",
    "favorite",
    "editor",
    "start",
    "building",
    "idea",
    "hours",
    "later",
    "first",
    "version",
    "product",
    "ready",
    "time",
    "share",
    "world",
    "would",
    "code",
    "still",
    "running",
    "laptop",
    "accessible",
    "http",
    "localhost",
    "8080",
    "even",
    "find",
    "way",
    "share",
    "world",
    "laptop",
    "shut",
    "laptop",
    "one",
    "would",
    "access",
    "need",
    "host",
    "application",
    "system",
    "never",
    "turned",
    "identify",
    "server",
    "either",
    "physical",
    "server",
    "data",
    "center",
    "virtual",
    "machine",
    "data",
    "center",
    "cloud",
    "copy",
    "code",
    "run",
    "ca",
    "run",
    "application",
    "system",
    "copying",
    "code",
    "need",
    "system",
    "configured",
    "first",
    "able",
    "run",
    "example",
    "application",
    "written",
    "python",
    "java",
    "programming",
    "languages",
    "must",
    "one",
    "programming",
    "languages",
    "runtimes",
    "place",
    "server",
    "application",
    "uses",
    "libraries",
    "packages",
    "must",
    "exact",
    "version",
    "libraries",
    "packages",
    "configured",
    "server",
    "exact",
    "way",
    "develop",
    "application",
    "laptop",
    "becomes",
    "development",
    "environment",
    "server",
    "host",
    "application",
    "becomes",
    "production",
    "environment",
    "set",
    "application",
    "running",
    "server",
    "server",
    "ip",
    "accessible",
    "ip",
    "address",
    "want",
    "share",
    "ip",
    "address",
    "people",
    "purchase",
    "domain",
    "name",
    "map",
    "server",
    "something",
    "share",
    "world",
    "set",
    "ready",
    "share",
    "world",
    "tweeted",
    "tagging",
    "certain",
    "individual",
    "certain",
    "individual",
    "retweets",
    "go",
    "website",
    "famous",
    "thousands",
    "users",
    "visiting",
    "site",
    "booking",
    "future",
    "travel",
    "red",
    "planet",
    "let",
    "look",
    "workflow",
    "current",
    "workflow",
    "involves",
    "development",
    "phase",
    "write",
    "code",
    "laptop",
    "could",
    "favorite",
    "text",
    "editor",
    "like",
    "vs",
    "code",
    "pycharm",
    "code",
    "text",
    "format",
    "good",
    "enough",
    "run",
    "run",
    "application",
    "end",
    "user",
    "needs",
    "executable",
    "format",
    "familiar",
    "windows",
    "binary",
    "file",
    "familiar",
    "linux",
    "converting",
    "code",
    "text",
    "format",
    "binary",
    "executable",
    "format",
    "known",
    "building",
    "code",
    "tools",
    "available",
    "python",
    "setup",
    "tools",
    "maven",
    "gradle",
    "platforms",
    "usually",
    "build",
    "script",
    "invokes",
    "tools",
    "build",
    "application",
    "built",
    "executable",
    "moved",
    "production",
    "environment",
    "case",
    "server",
    "run",
    "production",
    "referred",
    "deploy",
    "stage",
    "simple",
    "process",
    "many",
    "variations",
    "process",
    "different",
    "ways",
    "tools",
    "used",
    "keeping",
    "super",
    "high",
    "level",
    "users",
    "visiting",
    "website",
    "users",
    "requesting",
    "features",
    "bring",
    "friends",
    "along",
    "additional",
    "developers",
    "everyone",
    "working",
    "development",
    "environments",
    "code",
    "base",
    "copied",
    "code",
    "central",
    "hub",
    "whenever",
    "ready",
    "stepping",
    "toes",
    "working",
    "files",
    "time",
    "creating",
    "conflicts",
    "need",
    "solution",
    "help",
    "collaborate",
    "git",
    "comes",
    "git",
    "helps",
    "developers",
    "work",
    "application",
    "time",
    "collaborate",
    "efficiently",
    "everyone",
    "installs",
    "configures",
    "git",
    "machines",
    "going",
    "help",
    "easily",
    "pulling",
    "latest",
    "git",
    "code",
    "central",
    "hub",
    "using",
    "git",
    "pull",
    "command",
    "add",
    "changes",
    "push",
    "back",
    "using",
    "git",
    "push",
    "command",
    "central",
    "hub",
    "platform",
    "serves",
    "central",
    "location",
    "code",
    "git",
    "underlying",
    "technology",
    "github",
    "publicly",
    "hosted",
    "central",
    "repository",
    "entry",
    "code",
    "configure",
    "project",
    "organizations",
    "users",
    "define",
    "different",
    "access",
    "different",
    "users",
    "similar",
    "platforms",
    "gitlab",
    "bitbucket",
    "summarize",
    "git",
    "command",
    "line",
    "tool",
    "underlying",
    "technology",
    "enables",
    "versioning",
    "code",
    "collaboration",
    "multiple",
    "developers",
    "github",
    "publicly",
    "accessible",
    "repository",
    "code",
    "push",
    "code",
    "web",
    "interface",
    "invite",
    "new",
    "developers",
    "manage",
    "project",
    "manage",
    "issues",
    "projects",
    "add",
    "documentation",
    "code",
    "etc",
    "four",
    "developers",
    "git",
    "github",
    "place",
    "development",
    "issues",
    "sorted",
    "however",
    "still",
    "need",
    "move",
    "code",
    "manually",
    "production",
    "environment",
    "every",
    "time",
    "something",
    "new",
    "ready",
    "previous",
    "workflow",
    "involved",
    "developing",
    "code",
    "development",
    "environment",
    "building",
    "code",
    "executable",
    "package",
    "deploying",
    "production",
    "however",
    "multiple",
    "developers",
    "code",
    "needs",
    "built",
    "changes",
    "contributed",
    "developers",
    "building",
    "laptop",
    "longer",
    "works",
    "individual",
    "laptop",
    "may",
    "latest",
    "changes",
    "makes",
    "sense",
    "move",
    "build",
    "operation",
    "dedicated",
    "build",
    "server",
    "gets",
    "latest",
    "version",
    "code",
    "builds",
    "moving",
    "production",
    "pushing",
    "new",
    "builds",
    "production",
    "risky",
    "might",
    "introduced",
    "new",
    "bugs",
    "broken",
    "something",
    "worked",
    "need",
    "test",
    "test",
    "environment",
    "workflow",
    "looks",
    "every",
    "developer",
    "develops",
    "code",
    "development",
    "environment",
    "laptops",
    "pushes",
    "github",
    "manually",
    "copy",
    "code",
    "build",
    "server",
    "builds",
    "code",
    "executable",
    "manually",
    "copy",
    "executable",
    "test",
    "server",
    "test",
    "application",
    "make",
    "sure",
    "works",
    "expected",
    "new",
    "bugs",
    "introduced",
    "manually",
    "copy",
    "executable",
    "production",
    "environment",
    "deploy",
    "manual",
    "job",
    "requires",
    "set",
    "manual",
    "tasks",
    "decide",
    "move",
    "new",
    "code",
    "containing",
    "new",
    "features",
    "production",
    "environment",
    "week",
    "however",
    "well",
    "accepted",
    "users",
    "fellow",
    "developers",
    "minor",
    "features",
    "already",
    "necessarily",
    "wait",
    "till",
    "end",
    "week",
    "pushed",
    "production",
    "entire",
    "process",
    "manual",
    "deployment",
    "takes",
    "week",
    "execute",
    "code",
    "base",
    "features",
    "grow",
    "want",
    "able",
    "release",
    "features",
    "faster",
    "frequently",
    "less",
    "manual",
    "effort",
    "cicd",
    "tools",
    "come",
    "cicd",
    "stands",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "deployment",
    "tools",
    "like",
    "jenkins",
    "github",
    "actions",
    "gitlab",
    "cicd",
    "help",
    "automate",
    "manual",
    "tasks",
    "build",
    "pipeline",
    "one",
    "tools",
    "configured",
    "every",
    "time",
    "code",
    "pushed",
    "automatically",
    "pulled",
    "github",
    "repository",
    "build",
    "server",
    "build",
    "executable",
    "automatically",
    "moved",
    "test",
    "server",
    "tested",
    "successful",
    "testing",
    "automatically",
    "moved",
    "production",
    "server",
    "deployed",
    "allows",
    "changes",
    "features",
    "bug",
    "fixes",
    "move",
    "faster",
    "pipeline",
    "deployed",
    "often",
    "lesser",
    "manual",
    "effort",
    "ultimately",
    "enabling",
    "team",
    "resolve",
    "issues",
    "quicker",
    "ship",
    "features",
    "faster",
    "make",
    "users",
    "happier",
    "git",
    "github",
    "cicd",
    "pipelines",
    "place",
    "enabled",
    "team",
    "make",
    "changes",
    "application",
    "get",
    "production",
    "servers",
    "seamlessly",
    "however",
    "still",
    "seamless",
    "remember",
    "dependencies",
    "libraries",
    "talked",
    "earlier",
    "ones",
    "required",
    "applications",
    "run",
    "system",
    "dependencies",
    "need",
    "configured",
    "exact",
    "way",
    "servers",
    "means",
    "new",
    "package",
    "required",
    "needs",
    "manually",
    "installed",
    "configured",
    "servers",
    "code",
    "runs",
    "still",
    "manual",
    "task",
    "miss",
    "configuring",
    "one",
    "packages",
    "right",
    "version",
    "right",
    "way",
    "lead",
    "software",
    "working",
    "resulting",
    "unexpected",
    "outcomes",
    "different",
    "systems",
    "containers",
    "come",
    "containers",
    "help",
    "package",
    "application",
    "dependencies",
    "image",
    "run",
    "system",
    "without",
    "worrying",
    "dependencies",
    "build",
    "build",
    "container",
    "image",
    "application",
    "dependencies",
    "package",
    "systems",
    "simply",
    "run",
    "container",
    "image",
    "without",
    "worrying",
    "installing",
    "configuring",
    "libraries",
    "dependencies",
    "one",
    "technology",
    "enables",
    "working",
    "containers",
    "docker",
    "docker",
    "developer",
    "create",
    "docker",
    "file",
    "specifies",
    "dependencies",
    "docker",
    "file",
    "used",
    "build",
    "build",
    "image",
    "image",
    "run",
    "server",
    "using",
    "simple",
    "docker",
    "run",
    "command",
    "major",
    "functionality",
    "container",
    "enables",
    "isolation",
    "processes",
    "container",
    "isolated",
    "instance",
    "allows",
    "us",
    "run",
    "multiple",
    "containers",
    "separate",
    "instance",
    "application",
    "server",
    "let",
    "focus",
    "production",
    "side",
    "things",
    "production",
    "server",
    "currently",
    "one",
    "server",
    "users",
    "increasing",
    "want",
    "able",
    "add",
    "servers",
    "run",
    "application",
    "containers",
    "need",
    "run",
    "containers",
    "right",
    "way",
    "containers",
    "spun",
    "users",
    "increase",
    "destroyed",
    "load",
    "reduces",
    "ensure",
    "container",
    "fails",
    "automatically",
    "brought",
    "back",
    "container",
    "orchestration",
    "platforms",
    "come",
    "kubernetes",
    "popular",
    "container",
    "orchestration",
    "platform",
    "helps",
    "declare",
    "containers",
    "deployed",
    "ensure",
    "always",
    "run",
    "way",
    "declared",
    "help",
    "auto",
    "scale",
    "containers",
    "well",
    "underlying",
    "infrastructure",
    "based",
    "need",
    "manage",
    "resources",
    "underlying",
    "service",
    "ensure",
    "optimal",
    "resource",
    "utilization",
    "developers",
    "pushing",
    "code",
    "central",
    "github",
    "repository",
    "ci",
    "cd",
    "pipeline",
    "pulls",
    "code",
    "build",
    "server",
    "builds",
    "docker",
    "images",
    "image",
    "used",
    "test",
    "application",
    "test",
    "environment",
    "finally",
    "deployed",
    "production",
    "environment",
    "containers",
    "kubernetes",
    "underlying",
    "infrastructure",
    "still",
    "one",
    "big",
    "challenge",
    "every",
    "time",
    "new",
    "server",
    "provisioned",
    "needs",
    "set",
    "exact",
    "way",
    "others",
    "cluster",
    "needs",
    "right",
    "resources",
    "assigned",
    "right",
    "version",
    "operating",
    "system",
    "probably",
    "storage",
    "attached",
    "may",
    "kernel",
    "settings",
    "software",
    "needs",
    "docker",
    "runtime",
    "necessary",
    "kubernetes",
    "packages",
    "need",
    "exact",
    "configuration",
    "going",
    "one",
    "big",
    "challenge",
    "click",
    "cloud",
    "platform",
    "gui",
    "time",
    "server",
    "needs",
    "provisioned",
    "take",
    "lot",
    "time",
    "lead",
    "human",
    "errors",
    "misconfiguring",
    "infrastructure",
    "resulting",
    "rebuild",
    "entire",
    "server",
    "automate",
    "provisioning",
    "servers",
    "tools",
    "like",
    "terraform",
    "used",
    "terraform",
    "automates",
    "provisioning",
    "configuration",
    "servers",
    "irrespective",
    "cloud",
    "platforms",
    "ensures",
    "server",
    "configured",
    "always",
    "state",
    "someone",
    "manually",
    "changes",
    "configuration",
    "servers",
    "terraform",
    "changes",
    "back",
    "make",
    "sure",
    "state",
    "defined",
    "preserved",
    "state",
    "defined",
    "configuring",
    "terraform",
    "manifest",
    "file",
    "looks",
    "like",
    "snippet",
    "terraform",
    "manifest",
    "file",
    "list",
    "servers",
    "configuration",
    "yes",
    "looks",
    "like",
    "code",
    "code",
    "called",
    "infrastructure",
    "code",
    "infrastructure",
    "configuration",
    "including",
    "virtual",
    "machines",
    "storage",
    "buckets",
    "vpc",
    "etc",
    "stored",
    "form",
    "code",
    "stored",
    "source",
    "code",
    "repositories",
    "way",
    "considered",
    "code",
    "tracked",
    "changes",
    "needed",
    "make",
    "changes",
    "code",
    "run",
    "terraform",
    "apply",
    "command",
    "servers",
    "provisioned",
    "configuration",
    "servers",
    "automated",
    "tools",
    "like",
    "ansible",
    "terraform",
    "infrastructure",
    "provisioning",
    "tool",
    "ansible",
    "automation",
    "tool",
    "helps",
    "configure",
    "infrastructure",
    "provisioned",
    "note",
    "many",
    "areas",
    "terraform",
    "ansible",
    "overlap",
    "tools",
    "provision",
    "infrastructure",
    "automate",
    "software",
    "configuration",
    "benefits",
    "different",
    "areas",
    "terraform",
    "used",
    "mostly",
    "provisioning",
    "deprovisioning",
    "infrastructure",
    "ansible",
    "used",
    "post",
    "configuration",
    "activities",
    "installing",
    "software",
    "configuring",
    "servers",
    "similar",
    "terraform",
    "ansible",
    "uses",
    "code",
    "configure",
    "servers",
    "called",
    "ansible",
    "playbooks",
    "code",
    "also",
    "goes",
    "source",
    "code",
    "repository",
    "github",
    "provisioning",
    "want",
    "maintain",
    "well",
    "want",
    "able",
    "monitor",
    "servers",
    "take",
    "preventive",
    "measures",
    "want",
    "able",
    "see",
    "cpu",
    "utilization",
    "servers",
    "memory",
    "consumption",
    "monitor",
    "processes",
    "identify",
    "process",
    "causing",
    "higher",
    "consumption",
    "etc",
    "tools",
    "like",
    "prometheus",
    "come",
    "prometheus",
    "collects",
    "information",
    "metrics",
    "different",
    "servers",
    "stores",
    "centrally",
    "want",
    "collect",
    "metrics",
    "also",
    "want",
    "able",
    "visualize",
    "graphically",
    "tools",
    "like",
    "grafana",
    "comes",
    "grafana",
    "helps",
    "make",
    "sense",
    "data",
    "collected",
    "prometheus",
    "visualizing",
    "charts",
    "graphs",
    "together",
    "help",
    "us",
    "go",
    "idea",
    "building",
    "deploying",
    "getting",
    "users",
    "fast",
    "stop",
    "getting",
    "feedback",
    "users",
    "reviewing",
    "brainstorming",
    "coming",
    "new",
    "ideas",
    "implementing",
    "ideas",
    "um",
    "breeze",
    "code",
    "pushed",
    "goes",
    "pipeline",
    "defined",
    "automatically",
    "built",
    "tested",
    "deployed",
    "sooner",
    "resulting",
    "multiple",
    "deploys",
    "production",
    "every",
    "day",
    "deployed",
    "monitored",
    "feedback",
    "retrieved",
    "user",
    "cycle",
    "repeats",
    "onto",
    "infinity",
    "devops",
    "devops",
    "combination",
    "people",
    "processors",
    "tools",
    "work",
    "together",
    "going",
    "idea",
    "execution",
    "delivering",
    "high",
    "quality",
    "software",
    "consistently",
    "well",
    "video",
    "hope",
    "enjoyed",
    "high",
    "level",
    "overview",
    "different",
    "tools",
    "technologies",
    "like",
    "video",
    "forget",
    "subscribe",
    "channel",
    "questions",
    "feel",
    "free",
    "leave",
    "comments",
    "next",
    "time",
    "goodbye",
    "foreign"
  ],
  "keywords": [
    "devops",
    "might",
    "tools",
    "docker",
    "kubernetes",
    "ansible",
    "terraform",
    "git",
    "github",
    "prometheus",
    "grafana",
    "video",
    "going",
    "start",
    "application",
    "need",
    "infrastructure",
    "come",
    "different",
    "help",
    "high",
    "level",
    "well",
    "development",
    "sure",
    "end",
    "idea",
    "world",
    "build",
    "website",
    "people",
    "developer",
    "would",
    "building",
    "version",
    "ready",
    "time",
    "share",
    "code",
    "still",
    "laptop",
    "accessible",
    "way",
    "one",
    "system",
    "server",
    "data",
    "cloud",
    "copy",
    "run",
    "configured",
    "able",
    "place",
    "libraries",
    "packages",
    "exact",
    "environment",
    "production",
    "set",
    "ip",
    "want",
    "something",
    "individual",
    "users",
    "workflow",
    "text",
    "like",
    "format",
    "needs",
    "executable",
    "file",
    "platforms",
    "built",
    "moved",
    "process",
    "used",
    "features",
    "developers",
    "working",
    "central",
    "hub",
    "helps",
    "latest",
    "using",
    "command",
    "add",
    "changes",
    "push",
    "back",
    "platform",
    "underlying",
    "technology",
    "repository",
    "configure",
    "tool",
    "enables",
    "multiple",
    "new",
    "manage",
    "issues",
    "etc",
    "however",
    "move",
    "manually",
    "every",
    "package",
    "builds",
    "test",
    "looks",
    "make",
    "manual",
    "week",
    "pushed",
    "faster",
    "cicd",
    "automate",
    "pipeline",
    "automatically",
    "deployed",
    "servers",
    "dependencies",
    "configuring",
    "right",
    "software",
    "resulting",
    "containers",
    "image",
    "container",
    "ensure",
    "provisioned",
    "configuration",
    "provisioning",
    "state",
    "defined"
  ]
}