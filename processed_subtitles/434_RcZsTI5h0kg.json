{
  "text": "Hey guys, today is the start of a series on \nPython data structures and algorithms to get  \nyou ready for interviews. Today we’re covering \nhash maps, also known as dictionaries – we’ll  \nstart the video off by explaining what hash maps \nare, why we use them, and how to code with them.  \nAfter that, we’ll solve a practice \ninterview coding question together  \nthat requires hash maps, so you get a \nbetter understanding of how to use them. \nIn the future I’ll be recreating this same series \nfor Java, C++, and other popular languages. Even  \nif you don’t know Python, you should still watch \nthis video because the explanation of the data  \nstructure is applicable to all coding languages.\nEnough of the intro, let’s dive in. \nA hash map, referred to as a dictionary \nby Python, is a data structure that stores  \ninformation, called values, and pairs them \nup with unique identifiers, called keys.  \nA simple example to understand \nthis is a university GPA directory;  \neach student likely has a unique student ID (key) \nthat has a respective GPA along with it (value).  \nOr think of a list of capital cities. \nIf we make the keys countries,  \nwe can just look up the country to find \nthe capital city, which is the value. \nHashMaps are useful for two main reasons.\nThe first is, when working with big  \nsoftware systems, readability becomes \nincredibly important, and being able  \nto customize keys can be quite helpful.\nThe second is that HashMaps allow for  \nsearching of specific values in O(1) runtime, \nwhich is faster than arrays and linked lists,  \nwhich have a search time complexity of O(n).\nNow you know what HashMaps are, and why they’re  \nuseful. But let’s dig a little deeper, \nand understand how HashMaps actually work. \nHashMaps are commonly built off of a predefined \ndata structure like an array. Like HashMaps,  \narrays do also have keys that store values – for \narrays though, the key is a pre-set number called  \nan index, which starts at 0. A HashMap is created \nfrom an array through the use of a Hash function,  \nwhich takes in custom data that we want to assign \nto a key, like a country from our example earlier,  \nand maps this data to an index on the \narray. These Hash functions can get complex,  \nespecially as they have to tackle issues that \ncome up when mapping data to indices. The most  \ncommon issue that comes up is called a collision, \nand occurs when a Hash function tries to assign a  \ndata to an already used index. In this case, the \nHash function has to have some efficient way to  \nreassign this data to a different, non-used index.\nHash functions are a bit outside the scope of this  \nvideo, and in almost all modern programming \nlanguages, HashMaps are already implemented,  \nso you don’t have to worry about building them \nyourselves. The one thing you should know about  \nHash functions however, is that once they map \ndata to a key, they cannot change this key.  \nThis means that any key in a HashMap must always \nbe immutable. If you try to assign a mutable  \ntype of data as a key, such as an array, you’ll \nget a Type Error that says “unhashable type”.  \nIf you see this error, it means you tried \nto assign a mutable data type to a key.  \nTo fix this, simply convert the data type to \nsomething that is immutable. As we got the error  \nfrom using an array, our solution would be to \nconvert it to a tuple, which makes it immutable.  \nNow, this tuple can be used as a key.\nNow hopefully it’s all coming together,  \nand you can start to understand why HashMaps are \nefficient. If we used an array for our capital  \ncity to country scenario, we would have to make \nsomething like this. For a program to find a  \ncapital city, they would have to search through \neach index until they reached the correct value.  \nWith a HashMap, the program just \nhas to receive the country name.  \nFrom here, it can put the country name into the \nHash function, which spits out the right index,  \nwithout needing to go through \nevery element in the list. \nIt's time for us to look at how HashMaps \nare actually implemented. In many languages,  \nHashMaps have different names. When it comes \nto Python, HashMaps are called dictionaries,  \nbut I generally refer to them as HashMaps anyways.\nWe first create a HashMap by initializing it.  \nLet’s call ours “city_map”. We can \ninitialize it in either of these two ways. \ncity_map = {}\ncity_map = dict() \nNow, let’s add our first key-value pair. I want \nto add in “Canada” as a key, and have an array of  \ncities as values. To do that, this is our syntax:\ncities = [“Calgary”, “Vancouver”, “Toronto”] \ncity_map[“Canada”].append(cities)\nOh no! We got a KeyError. Why did this happen?  \nThis is a very common mistake people make \nwith HashMaps. We tried to assign the 3  \ncities to the key of Canada, but that \nkey doesn’t exist in our HashMap yet!  \nSo, we first need to initialize this key.\ncity_map[“Canada”] = [] \nNow, we can add these cities to this empty array. \ncity_map[“Canada”] += cities\nThis is what our result will look like:\n  \nHere’s a neat trick – to avoid having to \ninitialize an empty array for your keys  \nevery single time, we can use a specific type \nof dictionary in Python called a DefaultDict,  \nwhich will have an empty array, or other \ntype of data, assigned to a key by default. \nHere’s what the code would look \nlike if we chose to do it this way. \nOne of the reasons Python is awesome is because \nof it’s huge library, and this is a prime example  \nof this. I highly recommend taking advantage \nof DefaultDicts for solving coding problems,  \nas it’s an incredibly useful feature that \nwill help you avoid unnecessary mistakes. \nThe other major thing you should know about \nHashMaps is how to retrieve information from them.  \nThere are three methods for \nthis: .keys, .values, and .items. \n.keys method returns all of the keys from \nthe dictionary, in the form of a list. \n.values method works similarly, \nreturning all of the values of the  \ndictionary, in the form of a list.\n.items works as a combination of  \nthe two. It returns a list of all \nof the key-value pairs as tuples \nHere’s an updated version of \nour city_map from earlier.  \nAs you can see, it now has \nmultiple countries and cities. \nIf we wanted to get only a list of the \ncities, we could do so by calling the  \n.values() method like this:\ncity_list = city_map.values() \nNow we have a list of cities in city_list \nthat we have extracted from the HashMap. \nGreat! Now that we’ve learned how \nHashMaps work, and how to code with them,  \nlet’s use our new knowledge to solve \na popular coding interview problem!\n",
  "words": [
    "hey",
    "guys",
    "today",
    "start",
    "series",
    "python",
    "data",
    "structures",
    "algorithms",
    "get",
    "ready",
    "interviews",
    "today",
    "covering",
    "hash",
    "maps",
    "also",
    "known",
    "dictionaries",
    "start",
    "video",
    "explaining",
    "hash",
    "maps",
    "use",
    "code",
    "solve",
    "practice",
    "interview",
    "coding",
    "question",
    "together",
    "requires",
    "hash",
    "maps",
    "get",
    "better",
    "understanding",
    "use",
    "future",
    "recreating",
    "series",
    "java",
    "popular",
    "languages",
    "even",
    "know",
    "python",
    "still",
    "watch",
    "video",
    "explanation",
    "data",
    "structure",
    "applicable",
    "coding",
    "languages",
    "enough",
    "intro",
    "let",
    "dive",
    "hash",
    "map",
    "referred",
    "dictionary",
    "python",
    "data",
    "structure",
    "stores",
    "information",
    "called",
    "values",
    "pairs",
    "unique",
    "identifiers",
    "called",
    "keys",
    "simple",
    "example",
    "understand",
    "university",
    "gpa",
    "directory",
    "student",
    "likely",
    "unique",
    "student",
    "id",
    "key",
    "respective",
    "gpa",
    "along",
    "value",
    "think",
    "list",
    "capital",
    "cities",
    "make",
    "keys",
    "countries",
    "look",
    "country",
    "find",
    "capital",
    "city",
    "value",
    "hashmaps",
    "useful",
    "two",
    "main",
    "reasons",
    "first",
    "working",
    "big",
    "software",
    "systems",
    "readability",
    "becomes",
    "incredibly",
    "important",
    "able",
    "customize",
    "keys",
    "quite",
    "helpful",
    "second",
    "hashmaps",
    "allow",
    "searching",
    "specific",
    "values",
    "1",
    "runtime",
    "faster",
    "arrays",
    "linked",
    "lists",
    "search",
    "time",
    "complexity",
    "n",
    "know",
    "hashmaps",
    "useful",
    "let",
    "dig",
    "little",
    "deeper",
    "understand",
    "hashmaps",
    "actually",
    "work",
    "hashmaps",
    "commonly",
    "built",
    "predefined",
    "data",
    "structure",
    "like",
    "array",
    "like",
    "hashmaps",
    "arrays",
    "also",
    "keys",
    "store",
    "values",
    "arrays",
    "though",
    "key",
    "number",
    "called",
    "index",
    "starts",
    "hashmap",
    "created",
    "array",
    "use",
    "hash",
    "function",
    "takes",
    "custom",
    "data",
    "want",
    "assign",
    "key",
    "like",
    "country",
    "example",
    "earlier",
    "maps",
    "data",
    "index",
    "array",
    "hash",
    "functions",
    "get",
    "complex",
    "especially",
    "tackle",
    "issues",
    "come",
    "mapping",
    "data",
    "indices",
    "common",
    "issue",
    "comes",
    "called",
    "collision",
    "occurs",
    "hash",
    "function",
    "tries",
    "assign",
    "data",
    "already",
    "used",
    "index",
    "case",
    "hash",
    "function",
    "efficient",
    "way",
    "reassign",
    "data",
    "different",
    "index",
    "hash",
    "functions",
    "bit",
    "outside",
    "scope",
    "video",
    "almost",
    "modern",
    "programming",
    "languages",
    "hashmaps",
    "already",
    "implemented",
    "worry",
    "building",
    "one",
    "thing",
    "know",
    "hash",
    "functions",
    "however",
    "map",
    "data",
    "key",
    "change",
    "key",
    "means",
    "key",
    "hashmap",
    "must",
    "always",
    "immutable",
    "try",
    "assign",
    "mutable",
    "type",
    "data",
    "key",
    "array",
    "get",
    "type",
    "error",
    "says",
    "unhashable",
    "type",
    "see",
    "error",
    "means",
    "tried",
    "assign",
    "mutable",
    "data",
    "type",
    "key",
    "fix",
    "simply",
    "convert",
    "data",
    "type",
    "something",
    "immutable",
    "got",
    "error",
    "using",
    "array",
    "solution",
    "would",
    "convert",
    "tuple",
    "makes",
    "immutable",
    "tuple",
    "used",
    "key",
    "hopefully",
    "coming",
    "together",
    "start",
    "understand",
    "hashmaps",
    "efficient",
    "used",
    "array",
    "capital",
    "city",
    "country",
    "scenario",
    "would",
    "make",
    "something",
    "like",
    "program",
    "find",
    "capital",
    "city",
    "would",
    "search",
    "index",
    "reached",
    "correct",
    "value",
    "hashmap",
    "program",
    "receive",
    "country",
    "name",
    "put",
    "country",
    "name",
    "hash",
    "function",
    "spits",
    "right",
    "index",
    "without",
    "needing",
    "go",
    "every",
    "element",
    "list",
    "time",
    "us",
    "look",
    "hashmaps",
    "actually",
    "implemented",
    "many",
    "languages",
    "hashmaps",
    "different",
    "names",
    "comes",
    "python",
    "hashmaps",
    "called",
    "dictionaries",
    "generally",
    "refer",
    "hashmaps",
    "anyways",
    "first",
    "create",
    "hashmap",
    "initializing",
    "let",
    "call",
    "initialize",
    "either",
    "two",
    "ways",
    "dict",
    "let",
    "add",
    "first",
    "pair",
    "want",
    "add",
    "canada",
    "key",
    "array",
    "cities",
    "values",
    "syntax",
    "cities",
    "calgary",
    "vancouver",
    "toronto",
    "canada",
    "cities",
    "oh",
    "got",
    "keyerror",
    "happen",
    "common",
    "mistake",
    "people",
    "make",
    "hashmaps",
    "tried",
    "assign",
    "3",
    "cities",
    "key",
    "canada",
    "key",
    "exist",
    "hashmap",
    "yet",
    "first",
    "need",
    "initialize",
    "key",
    "canada",
    "add",
    "cities",
    "empty",
    "array",
    "canada",
    "cities",
    "result",
    "look",
    "like",
    "neat",
    "trick",
    "avoid",
    "initialize",
    "empty",
    "array",
    "keys",
    "every",
    "single",
    "time",
    "use",
    "specific",
    "type",
    "dictionary",
    "python",
    "called",
    "defaultdict",
    "empty",
    "array",
    "type",
    "data",
    "assigned",
    "key",
    "default",
    "code",
    "would",
    "look",
    "like",
    "chose",
    "way",
    "one",
    "reasons",
    "python",
    "awesome",
    "huge",
    "library",
    "prime",
    "example",
    "highly",
    "recommend",
    "taking",
    "advantage",
    "defaultdicts",
    "solving",
    "coding",
    "problems",
    "incredibly",
    "useful",
    "feature",
    "help",
    "avoid",
    "unnecessary",
    "mistakes",
    "major",
    "thing",
    "know",
    "hashmaps",
    "retrieve",
    "information",
    "three",
    "methods",
    "method",
    "returns",
    "keys",
    "dictionary",
    "form",
    "list",
    "method",
    "works",
    "similarly",
    "returning",
    "values",
    "dictionary",
    "form",
    "list",
    "works",
    "combination",
    "two",
    "returns",
    "list",
    "pairs",
    "tuples",
    "updated",
    "version",
    "earlier",
    "see",
    "multiple",
    "countries",
    "cities",
    "wanted",
    "get",
    "list",
    "cities",
    "could",
    "calling",
    "method",
    "like",
    "list",
    "cities",
    "extracted",
    "hashmap",
    "great",
    "learned",
    "hashmaps",
    "work",
    "code",
    "let",
    "use",
    "new",
    "knowledge",
    "solve",
    "popular",
    "coding",
    "interview",
    "problem"
  ],
  "keywords": [
    "today",
    "start",
    "series",
    "python",
    "data",
    "get",
    "hash",
    "maps",
    "also",
    "dictionaries",
    "video",
    "use",
    "code",
    "solve",
    "interview",
    "coding",
    "together",
    "popular",
    "languages",
    "know",
    "structure",
    "let",
    "map",
    "dictionary",
    "information",
    "called",
    "values",
    "pairs",
    "unique",
    "keys",
    "example",
    "understand",
    "gpa",
    "student",
    "key",
    "value",
    "list",
    "capital",
    "cities",
    "make",
    "countries",
    "look",
    "country",
    "find",
    "city",
    "hashmaps",
    "useful",
    "two",
    "reasons",
    "first",
    "incredibly",
    "specific",
    "arrays",
    "search",
    "time",
    "actually",
    "work",
    "like",
    "array",
    "index",
    "hashmap",
    "function",
    "want",
    "assign",
    "earlier",
    "functions",
    "common",
    "comes",
    "already",
    "used",
    "efficient",
    "way",
    "different",
    "implemented",
    "one",
    "thing",
    "means",
    "immutable",
    "mutable",
    "type",
    "error",
    "see",
    "tried",
    "convert",
    "something",
    "got",
    "would",
    "tuple",
    "program",
    "name",
    "every",
    "initialize",
    "add",
    "canada",
    "empty",
    "avoid",
    "method",
    "returns",
    "form",
    "works"
  ]
}