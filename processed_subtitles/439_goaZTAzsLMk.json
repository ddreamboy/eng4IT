{
  "text": "what is software testing software\ntesting is a process to identify the\ncorrectness completeness and quality of\ndeveloped computer software it includes\na set of activities conducted with the\nintent of finding errors in software so\nthat it could be corrected before the\nproduct is released to the end-users in\nsimple words software testing is an\nactivity to check that the software\nsystem is defect free why is testing\nimportant this is China Airlines Airbus\na300 crashing due to a software bug on\nApril 26th 1994 killing 264 innocent\nlives\nsoftware bugs can potentially cause\nmonetary and human loss history is full\nof such examples in 1985 Canada's\ntherac-25 radiation therapy machine\nmalfunctioned due to a software bug and\ndelivered lethal radiation doses to\npatients leaving 3 people dead and\ncritically injuring 3 others in April of\n1999 a software bug caused the failure\nof a 1.2 billion dollar military\nsatellite launched the costly us\naccident in history in May of 1996 a\nsoftware bug caused the bank accounts of\n823 customers of a major US bank to be\ncredited with 920 million u.s. dollars\nas you see testing is important because\nsoftware bugs can be expensive or even\ndangerous as Paul Ehrlich puts it to err\nis human but to really foul things up\nyou need a computer\nconsider a scenario where you are moving\na file from folder a to folder B think\nof all the possible ways you can test\nthis pause the tutorial and think over\nthe exercise apart from the usual\nscenarios you can also test the\nfollowing conditions trying to move the\nfile when it is open you do not have the\nsecurity rights to paste the file in\nfolder B folder B is on a shared Drive\nand storage capacity is full folder B\nalready has a file with the same name in\nfact the list is endless or suppose you\nhave 15 input fields to test each having\n5 possible values the number of\ncombinations to be tested would be 5\nraised to 15\nif you were to test all the possible\ncombinations project execution time and\ncosts will rise exponentially hence one\nof the testing principles states that\nexhaustive testing is not possible\ninstead we need the optimal amount of\ntesting based on the risk assessment of\nthe application and the million dollar\nquestion is how do you determine this\nrisk\nto answer this let's do an exercise in\nyour opinion which operation is most\nlikely to cause your operating system to\nfail I'm sure most of you would have\nguessed opening 10 heavy graphics\napplications all at the same time so if\nyou were testing this operating system\nyou would realize that defects are\nlikely to be found in a multitasking\nmodule and that needs to be tested\nthoroughly which brings us to our next\nprincipal defect clustering which states\nthat a small number of modules contain\nmost of the defects detected with\nexperience you can identify such risky\nmodules but this approach has its own\nproblems if the same tests are repeated\nover and over again eventually the same\ntest cases will no longer find new bugs\nthis is another principle of testing\ncalled pesticide paradox to overcome\nthis the test cases need to be regularly\nreviewed and revised adding new and\ndifferent test cases to help find more\ndefects\nbut even after all this sweat and hard\nwork and testing you can never claim\nyour product is bug free to drive home\nthis point let's see this video of the\npublic launch of Windows 98\nplug it in it's going to say hey I see\nyou live in a new device and it's going\nto load in the appropriate drivers\nyou'll notice that this scanner build\nwhoa\n[Applause]\nmoving right along idea Leslie why we're\nnot shipping Windows 98 you would think\na company like Microsoft would have\ntested their OS thoroughly and would not\nrisk their reputation just to see their\nOS crashing during its public launch\nhence the testing principle states that\ntesting shows the presence of defects\ntesting reduces the probability of\nundiscovered defects remaining in the\nsoftware but even if no defects are\nfound it is not a proof of correctness\nor a proof that no defects remain in the\nsystem but what if you work extra hard\ntaking all precautions and making sure\nyour software product is 99% bug free\nand the software does not meet the needs\nand requirements of the client which\nleads us to our next principle which\nstates that absence of error is a\nfallacy finding and fixing defects does\nnot help if the system build is unusable\nand does not fulfill the user's needs\nand requirements to fix this problem the\nnext principle of testing early testing\nstates that testing should start as\nearly as possible in the software\ndevelopment lifecycle so that any\ndefects in the requirements or design\nphase are captured as well we'll have\nmore on this principle in a later\ntutorial and the last principle of\ntesting states that the testing is\ncontext dependent which basically means\nthat the way you test an e-commerce site\nwill be different from the way you test\na commercial off-the-shelf application\nbefore we close this tutorial here's a\nquick recap of the seven testing\nprinciples\nsuppose you were assigned a task to\ndevelop a custom software for a client\neach block below represents a step\nrequired to develop the software\nirrespective of your technical\nbackground try and make an educated\nguess about the sequence of steps you\nwill follow to achieve the task the\ncorrect sequence would be gather as much\ninformation as possible about the\ndetails and specifications of the\ndesired software from the client this is\nnothing but the requirements gathering\nstage plan the programming language like\nJava PHP dotnet and database like Oracle\nmy sequel etc which will best suit the\nproject also determine high-level\nfunctions in architecture this is the\ndesign stage actually code the software\nthis is the build stage next you test\nthe software to verify that it is built\nas per the specifications given by the\nclient this is the test stage once your\nsoftware product is ready you may do\nsome code changes to accommodate\nenhancements requested by the client\nthis would be the maintenance stage all\nthese levels constitute the waterfall\nmethod of a software development\nlifecycle as you may observe testing in\nthe model starts only after\nimplementation is done but if you are\nworking on a large project where the\nsystems are complex\nit's easy to miss key details in the\nrequirements phase itself in such cases\nan entirely wrong product will be\ndelivered to the client you will have to\nstart afresh with the project\nor if you manage to note the\nrequirements correctly but make serious\nmistakes in design and architecture of\nyour software you will have to redesign\nthe entire software to correct the error\nassessments of thousands of projects\nhave shown that defects introduced\nduring requirements and design make up\nclose to half of the total number of\ndefects also the costs of fixing a\ndefect increases across the development\nlifecycle the earlier in the lifecycle\nof defect is detected the cheaper it is\nto fix as they say a stitch in time\nsaves nine to address this concern the\nv-model of testing was developed for\nevery phase in the development lifecycle\nthere is a corresponding testing phase\nthe left side of the model is the\nsoftware development life cycle SDLC the\nright side of the model is the software\ntest life cycle s TLC the entire figure\nlooks like a V hence the name V model in\nthis figure you'll find a few stages\ndifferent from the waterfall method\nthese differences along with the details\nof each testing phase will be discussed\nin a later tutorial apart from the V\nmodel there are iterative development\nmodels where development is carried out\nin phases with each phase adding a\nfunctionality to the software each phase\ncomprises of its own independent set of\ndevelopment and testing activities good\nexamples of development life cycles\nfollowing the iterative method are rapid\napplication development and agile\ndevelopment\nbefore we close this tutorial here are a\nfew pointers you must note that there\nare numerous development life cycle\nmodels the development model selected\nfor a project depends on the aims and\ngoals of that project testing is not a\nstandalone activity and it has to adapt\nwith the development model chosen for\nthe project in any model testing should\nbe performed at all levels right from\nrequirements gathering all the way up to\nmaintenance\nlet's consider\nto understand the testing lifecycle you\nwork for an IT outsourcing company as\npart of the testing team and your\ncompany is hired by a bank to develop an\nonline banking application to understand\nthe testing lifecycle\nlet's first quickly go through the\ndevelopment life cycle during\nrequirement analysis phase after series\nof meetings the client decides he wants\nthe following five functionalities into\na system logon on valid credentials view\ncurrent bank account balance deposit\nmoney withdraw money transfer money to a\nthird party account next in the\nfunctional specification stage\narchitecture database and operating\nenvironment design are finalized next in\nhigh-level design stage the application\nis broken down in module and programs in\ndetail design stage the pseudocode for\nfunctions for each module is documented\nnext actual coding begins this is the\nsoftware development cycle of the\nv-model during all these phases the\ntester is not sitting idle for the\ncoding to complete but is doing\ncorresponding testing activities let's\nlook at them one by one unit testing it\nis also called component testing it is\nperformed on a standalone module to\ncheck whether it is developed correctly\nfor the login module which may look like\nthis after development typical unit test\ncases would be check response for valid\nlogin and password check response for\ninvalid login and password\ncheck response when login is empty and\nlogin button is pressed unit test is\ndone by developers but in practical\nworld developers are either reluctant to\ntest their own code or do not have time\nto unit test many times much of the unit\ntesting is done by testers\nsystem 10\nconcerned with behavior of the system as\na whole unlike integration testing which\nfocuses on data transfer amongst modules\nsystem testing checks complete\nend-to-end scenarios as the way a\ncustomer would use the system a good\nexample of test case in this phase would\nbe login into the banking application\ncheck current balance transfer some\nmoney log out\napart from functional non-functional\nrequirements like performance\nreliability etcetera are also checked\nduring system testing except it's\ntesting acceptance test is usually done\nat client location by the client once\nall the defects found in system testing\nphase are fixed focus of acceptance test\nis not to find defects but to check\nwhether the software system meets their\nrequirements since this is the first\ntime the client sees their requirements\nwhich is plain text into an actual\nworking system acceptance testing can be\ndone in two ways alpha testing the small\nset of employees of the client in our\ncase employees of the bank will use the\nsystem as the end user would beta\ntesting a small set of customers in our\ncase bank account holders will use the\nsoftware and recommend changes\nintegration testing in this phase of\ntesting individual modules are combined\nand tested as a group data transferred\nbetween the modules is tested thoroughly\nintegration testing is carried out by\ntesters consider this integration\ntesting scenario in a banking\napplication a customer is using the\ncurrent balance module his balance is\n1,000 he navigates to the transfer\nmodule and transfers 500 to a\nthird-party account the customer\nnavigates back to the current balance\nmodule and now his latest balance should\nbe 500 the modules in this project are\nassigned to five different developers to\nreduce coding time kotor 2 is ready with\nthe current balance module kotor 5 is\nnot ready with the transfer module\nrequired to test your integration\nscenario what do you do in such a\nsituation\none approach is to use BIGBANG\nintegration testing where you wait for\nall modules to be developed before you\nbegin testing the major disadvantage is\nthat it increases project execution time\nsince testers will be sitting idle until\nall modules are developed also it\nbecomes difficult to trace the root\ncause of defects alternatively you can\nuse the incremental approach where\nmodules are checked for integration as\nand when they are available\nconsider that the transfer module is yet\nto be developed but the current balance\nmodule is ready you will create a stub\nwhich will accept and give back data to\nthe current balance module note that\nthis is not a complete implementation of\nthe transfer module which will have lots\nof checks like whether the third-party\naccount number is entered correct the\namount to transfer should not be more\nthan the amount available in the account\nand so on but it will just simulate the\ndata transfer that takes place between\nthe two modules to facilitate testing on\nthe contrary if the transfer module is\nready but the current balance module is\nnot developed you will create a driver\nto simulate transfer between the modules\nto increase the effectiveness of the\nintegration testing you may use a top to\ndown approach where higher-level modules\nare tested first this technique will\nrequire creation of stubs or you may use\na bottom-up approach where lower-level\nmodules are tested first this technique\nwill require creation of drivers other\napproaches would be functional increment\nand sandwich which is a combination of\ntop to down and bottom to up the choice\nof approach chosen depends on the system\narchitecture and the location of\nhigh-risk modules\nconsider of scenario when after\nsects of integration testing the\nsoftware is made available to the\ntesting teams of a system testing you\nlook at the initial screen system looks\nfine and delay system test execution for\nthe next day since you have other\ncritical testing tasks to attend to next\nday say you plan to execute the scenario\nlongan view balance transfer 500 log out\nthe deadline is 4 hours you begin\nexecuting the scenario you enter a valid\nlogin ID password click the login button\nand boom you are taken to a blank screen\nwith absolutely no links no buttons and\nnowhere for you to proceed this is not a\nfigment of any imagination but a very\npractical condition which could arise\ndue to developer negligence time\npressures test environment configuration\nand instability etc to fix this issue\ndeveloper requires at least 5 hours\nand deadlines would be missed in fact\nnone of your team members will be able\nto execute their respective scenario\nsince the view balance is start point to\nperform any other operation and the\nentire project will be delayed have you\nchecked this yesterday itself the system\nwould have been fixed by now and you\nwould have been good for testing to\navoid such situation sanity also known\nas smoke testing is done to check\ncritical functionalities of the system\nbefore it is accepted for major testing\nsanity testing is quick and is\nnon-exhaustive goal is not to find the\nsex but to check system health\nyou\nsuppose in the current\ninstead of just showing the current\nbalance the client now wants customized\nreports based on date amount of\ntransaction obviously any such change\nneeds to be tested once deployed testing\nenhancements system changes or\nCorrections forms part of maintenance\ntesting suppose in our banking\napplication your current balance is\n2,000 using the new enhancement you\ncheck your balance for a year ago which\ncomes out to be 500 you enter the\ntransfer module and try to transfer 1000\nin order to proceed the transfer module\nchecks for the current balance but\ninstead of sending the current balance\nit sends the old balance of 500 and\ntransaction fails as you may observe\ncode changes were in current balance\nmodule only but still transfer module is\naffected regression testing is carried\nout to check modification in software\nhas not caused unintended adverse side\neffects\nfunctional testing non-functional\nrequirements like performance usability\nload factor are also important how many\ntimes have you seen such long load time\nmessages while accessing an application\nI am sure many\nto address this issue performance\ntesting is carried out to check in fine\ntune system response times the goal of\nperformance testing is to reduce\nresponse time to an acceptable level or\nyou may have seen messages like hence\nload testing is carried out to check\nsystems performance at different loads\nthat is number of users accessing the\nsystem depending on the results and\nexpected usage more system resources may\nbe added\nthat's all two types of testing in\ngeneral there are three testing types\nfunctional non-functional maintenance\nunder these types you have multiple\ntesting levels usually called as testing\ntypes you may find some difference in\nthis classification in different\nresource but the general theme remains\nthe same this is not the complete list\nas there are more than 150 types of\ntesting no need to bother or worry you\nwill pick them up as you age in the\ntesting industry also note that not all\ntesting types are applicable to all\nprojects but depends on nature and scope\nof the project more on this in a later\ntutorial thanks for listening\nas a beginner it's easy to assume the\ntesting is executing various section of\ncode on the eddakath and verifying the\nresults but in real-world testing as a\nvery formal activity and is documented\nin detail the degree of formality\ndepends on the type of application under\ntest standards followed by our\norganization and maturity of the\ndevelopment process the importance of\ndocumentation will be highlighted in the\nsucceeding tutorials for all hands on we\nwill be using the flight reservation\napplication which comes bundled with\nautomation tool qtp to get this\napplication either install QT p.m. use\nthe link given below tutorials on this\nsite for QT t and load one or use flight\nreservation therefore we have selected\nflight reservation to reduce your\nlearning curve while studying QT t and\nloadrunner below find link to\nintroduction video to flight reservation\napplication do watch it\na test scenario is any functionality of\nthe application under test that can be\ntested it is also called test\ncommissioned or test possibility for the\nflight reservation application a few\nscenarios would be check the log in\nfunctionality\ncheck that a new order can be created\ncheck that an existing order can be\nopened check that a user can fax an\norder check that the information\ndisplayed in the help section is correct\ncheck that the information displayed in\nAbout section like version program or\nname copyright information is correct\napart from these six scenarios\ntry and list all the other possible\nscenarios for the application pause the\ntutorial and complete the exercise I am\nsure you have identified many a more\nlike update order delete order check\nreports check graphs and so on for the\ntime being let's stick to the six next\nwe have already learned that exhaustive\ntesting is not possible\nsuppose you have time to execute only\nfour out of these six scenarios which\ntoo low priority scenarios of these six\nwill you eliminate think your time\nstartsnow\nsure most of you would have guessed\nscenarios 5 & 6 since they are not the\ncore functionality of the application\nthis is nothing but test prioritization\nnow consider a scenario where the client\ngives a request to add send order via\nemail functionality to flight\nreservation he also specifies the GUI\nfields and buttons he wants even though\nthis functionality is yet to be\ndeveloped try and create a few test\ncases for this requirement pause the\ntutorial and complete the exercise a few\ntest cases amongst the many you could\nhave thought of would be check response\none valid email ID is entered and sent\nis pressed check response one in-flight\nemail ID is entered and send is pressed\ncheck response one email id is empty and\nsend is pressed you may have realized\nthat to create test cases you need to\nlook at something to base your test on\nthis is nothing but test basis this test\nbasis could be the actual application\nunder test abbreviated as aut\nor maybe even your experience but most\nof the times like in this case tests\nwould be based on documents in fact this\nis what happens during the different\nphases of e model where test plans are\ncreated using the corresponding\ndocuments and once the code is ready\ntesting is done\nconsider a test scenario to check login\nfunctionality there are many possible\nvariations to check this scenario check\nresponse on entering a valid agent name\nand password check response on entering\nan invalid agent name and password check\nresponse when the agent name is empty\nand the login button is pressed and many\nmore\nthis is nothing but a test case test\nscenarios are rather vague and cover a\nwide range of possibilities testing is\nall about being very specific hence we\nneed test cases now just consider the\ntest case check response on entering a\nvalid agent name and password it's\nobvious that this test case needs input\nvalues agent name and password this is\nnothing but test data identifying test\ndata can be time-consuming and may\nsometimes require creating test data\nafresh for that reason it needs to be\ndocumented\nbefore we proceed consider a quote from\na witty man to ensure perfect aim shoot\nfirst and call whatever you hit the\ntarget but if you do not live by this\nphilosophy which I am sure most of you\ndo not then your test case must have an\nexpected result for our test case the\nexpected result would be logins should\nbe successful\nif expected results are not documented\nwe may miss out on small differences in\ncalculations and results which otherwise\nlook okay consider this example where\nyou are calculating monthly pay for an\nemployee which involves lots of\ncalculations the need for documenting\nexpected results becomes obvious suppose\nthe author of the test case has left the\norganization is on vacation is sick and\noff-duty or is just very busy with other\ncritical tasks and you are recently\nhired and have been asked to execute the\ntest case since you are new it would\ncertainly help to have test steps\ndocumented which in this case would be\nlaunched the application enter an agent\nname enter a password and click OK\nyou may think that for these simple test\nsteps documentation is not required but\nwhat if your test steps look something\nlike this I think the need will become\nimmediately obvious\nthat apart your test case may have\nfields like a precondition which\nspecifies things which must be in place\nbefore the test can run for our test\ncase a precondition would be flight\nreservation application should be\ninstalled also your test case may\ninclude a post condition which specifies\nanything that applies after the test\ncase completes for our test case a post\ncondition would be time and date of\nlogin is stored in the database during\ntest case execution you will document\nthe results observed in the actual\nresults column and may even attach some\nscreenshots\ndown comparison of actual and expected\nresults assigned pass and fail status\nthis entire table may be created in Word\nExcel or any other test management tool\nthat's all to test case design below you\nwill find links to download a sample\ntest case specification template\nconsider a scenario where the client\nchanges the requirement something's so\nfrequent in the practical world and adds\na field recipient name to the\nfunctionality so now you need to enter\nemail ID and name to send a mail\nobviously you will need to change your\ntest cases to meet this new requirement\nbut now your test case suite is very\nlarge and it is very difficult to trace\nthe test cases affected by the change\ninstead if the requirements were\nnumbered and were referenced in the test\ncase sweet\nvery easy to track the test cases that\nare affected this is nothing but\ntraceability the traceability matrix\nlinks a business requirement to its\ncorresponding functional requirement\nright up to the corresponding test cases\nif a test case fails traceability helps\ndetermine the corresponding\nfunctionality easily\nit also helps ensure that all\nrequirements are tested\nwe have already learned that exhausted\nthing is not possible\nso we need techniques to identify test\ncases with the most likelihood of\nfinding a defect out of the possible\nmany\nthere are many test case designing\ntechniques available let's look at them\none by one\nequivalence partitioning it is a black\nbox technique which can be applied to\nall levels of testing like unit\nintegration system let cetera a black\nbox technique is a technique where the\ncode is not visible to the tester in\nthis technique you divide a set of test\nconditions into partitions that can be\nconsidered the same to understand this\nwith an example let's consider the\nbehavior of tickets in the flight\nreservation application while booking a\nnew flight ticket values 1 to 10 are\nconsidered valid and ticket is booked\nfor these values values 11 to 99 are\nconsidered invalid and error message\nonly 10 tickets made the order that one\ntime is shown on entering values 100 and\nabove the ticket member defaults to a\ntwo digit number on entering values 0\nand below the ticket defaults to 1 we\ncannot test all the possible values\nbecause if done number of test cases\nwill be more than 100 to address this\nproblem we use equivalent partitioning\nwe divide the possible values of tickets\ninto groups or sets where the system\nbehavior can be considered the same\nthese sets are called\nequivalence partitions or equivalence\nclasses then we pick only one value from\neach partition for testing the\nhypothesis\nbehind this technique is that a form\ncondition or value in a partition passes\nall others will also pass\nlikewise if one condition in a partition\nfails all other conditions in that\npartition will fail that is all two\nequivalence partitioning next technique\nis boundary value analysis in this\ntechnique you test boundaries between\npartitions as in our earlier example\ninstead of checking one value from each\npartition you will check the values at\nthe boundaries like 0 1 10 11 and so on\nboundary value analysis is also called\nrange checking equivalence partitioning\nand boundary value analysis are closely\nrelated and are generally used together\nat all levels of testing\ndecision table 10\ntechnique is a good way to deal with\ncombination of inputs which produce\ndifferent results to understand this\nwith an example let's consider the\nbehavior of flight button on different\ncombinations of fly from and fly to when\nboth fly from and fly to are not set the\nflight icon is disabled in the decision\ntable we register values false for fly\nfrom and fly to and the outcome which is\nflights button will be disabled that is\nfalse\nnext when fly from the set but fly to is\nnot set flight button is disabled\ncorresponding you registered true for\nfly from in the decision table and rest\nof the entries are false\nwhen fly from is not set but fly to is\nset flight button is disabled and you\nmake entries in the decision table\nlastly only when both fly to and fly\nfrom or set flights button is enabled\nand you make corresponding entry in the\ndecision table if you observe the\noutcomes for rule 1 2 & 3 remain the\nsame so you can select any one of them\nand rule 4 for your testing the\nthis technique becomes immediately clear\nas the number of inputs increases number\nof possible combinations is given by 2\nraised to n where n is the number of\ninputs for N equals 10 which is very\ncommon in web-based testing having big\ninput forms the number of combinations\nwill be 1024 obviously you cannot test\nall the combinations but you will choose\na rich subset of the possible\ncombinations using decision based\ntesting technique\nstate transitioning diagram is helpful\nwhere you need to test different system\ntransitions to understand this with an\nexample let's consider the behavior of\nlogin screen and flight reservation\napplication consider you have entered\nagent name in the login screen on first\nattempt you enter correct password and\nyou are given access to the application\nin case you entered incorrect password\nand error screen is shown and you are\nasked to enter the password again the\nsecond time you can make three attempts\nbut if it's a fourth attempt you enter\nincorrect password the application will\nbe closed in case you enter correct\npassword at the second third or fourth\nattempt you will be given access to the\napplication amongst these various system\ntransitions the scenario of access at\nfirst attempt in close of application\nedge fourth attempt are important and\nneed to be essentially tested but\nscenario of access at 2/3 and fourth\nattempt are less important and perhaps\nyou can test one of them\nis called state chart or state graph\ncomponents of the graph states that the\nsoftware may occupy transition from one\nstate to other events that cause\ntransition actions that result from\nevents state graph is useful for\nidentifying valid transitions but if you\nwant to determine invalid transitions\nyou can use state table in a state table\nall the valid states are listed on the\nleft side of the table and the events\nthat cause them on the top each cell\nrepresents the state system will move to\nwhen the corresponding event occurs for\nexample while in s1 state you enter\ncorrect password you are taken to state\ns6 or incase you enter incorrect\npassword you are taken to state s2\nlikewise you can determine all other\nstates if you observe two invalid states\nare highlighted using this method which\nbasically means what happens when you\nare already logged into the application\nand you open another instance of flight\nreservation and enter valid or invalid\npasswords for the same agent system\nresponse for such a scenario can be\ntested\nyou\nuse case testing\nthis technique\ntest cases that cover the entire system\non a transaction-by-transaction basis\nfrom start to finish a use case is\ndescription of a particular use of the\nsystem by an actor also called user\nthe technique is used widely in\ndeveloping tests at systemö acceptance\nlevel in use case an actor is\nrepresented by a and system bias first\nwe list the main success scenario\nconsider the first step of an end-to-end\nscenario for login functionality of\nflight reservation application where the\nactor enters agent name and password in\nthe next step system will validate the\npassword next if password is correct\naccess is granted there can be extension\nof this use case if password is not\nvalid system will display message and\nask for retry four times or if password\nis not valid at the fourth time system\nwill close the application here we will\ntest the success scenario in one case of\neach extension\nreview in simple words reviews a meeting\nwhere people analyze a software work\nproduct and recommend changes with the\nobjective of improving quality the\nsoftware work product could be a design\ndocument system requirements\nspecifications code test plan etc it\nhelps in detecting defects early in the\ndevelopment lifecycle and reduces costs\nalmost always the testing team is part\nof the review meetings to understand the\nreview in detail let's consider the same\nexample of earlier to add email\nfunctionality to flight reservation\napplication for which the functional\ndesign document is prepared by the\ntechnical lead he approaches his manager\nand requests to initiate a review the\nmanager will quickly go through the\ndocument and check whether the document\nis of acceptable quality to request a\nreview by other people for example in\nthis case he finds a few spelling\nmistakes and asks the technical lead to\ncorrect them once corrected the manager\nwill send out a meeting request to all\nstakeholders along with meeting location\ninformation date and time of meeting and\nwill mention the agenda for the meeting\nhe will also attach the functional\ndesign document itself to the meeting\nrequest for reference this is the\nplanning stage next stage is the kickoff\nmeeting it is an optional stage here the\ngoal is to get everybody on the same\nwavelength regarding the document under\nreview it is beneficial for new or\nhighly complex projects next stage is\nthe preparation stage where review\nmeeting participants individually go\nthrough the document to identify defects\ncomments and questions to be asked\nduring the review meeting this phase\nnecessary to ensure that during the\nmeeting participants focus on subject in\nhand instead of daydreaming this is your\nexercise for this functional design\ndocument think of the details missing\nrequired to help you test this\nfunctionality pause the tutorial and\nthink let's continue with the next stage\nwhich is the actual review meeting here\nthe meeting participants are assigned\ndifferent roles to increase the\neffectiveness of a meeting the moderator\nis a role usually played by the manager\nwho leaves the review meeting and sets\nthe agenda the creator of the document\nunder review plays the role of author\nwho reads the document and invites\ncomments the task of the reviewer is to\ncommunicate any defects in the work\nproduct suppose one of the reviewer says\nit would be nice to have a reset button\nthe author agrees to the suggestion\nanother review comment is there is no\nmention as to where in the menu item the\nemail functionality will appear again\nthe author accepts and agrees to make\nchanges the meeting participant playing\nthe role of the scribe also known as\nrecorder will note down these defect or\nsuggestions one young reviewer suggests\nthe possibility of sharing a ticket via\nsocial networking sites like Facebook or\n'cut and so on the author strongly\ndisagrees to this and the reviewer and\nthe author enter into a heated argument\nat this juncture the moderator\nintervenes and finds an amiable solution\nwhich is to ask the client whether he\nneeds sharing via social networking\nfinally all comments are discussed and\nthe scribe gives a list of defects\ncomments suggestions that the author\nneeds to incorporate into his work\nproduct the moderator then closes the\nreview meeting\nthen as all to the meeting phase of the\nreview the important roles here are the\nmoderator the author described the\nreviewers the moderator and scribe can\nalso play the role of reviewer meaning\nthey can give review comments to the\nauthor the next phase of the review is\nthe rework phase where the author will\nmake changes in the document as per the\naction items of the meeting in the\nfollow-up phase the moderator will\ncirculate the rework document to all\nreview participants to ensure that all\nchanges have been included\nsatisfactorily that is all - a review\nprocess the various stages of a review\nprocess are this was a generic review\nnote that there are three types of\nreviews walkthrough which is led by\nauthor technical review which is led by\na trained moderator with no management\nparticipation inspection which is led by\ntrained moderator and uses entry and\nexit criteria all these three types\nfollow the same review process and the\nsame stages as discussed earlier\nlet's do an exercise for the flight\nreservation application prepare work\nbreakdown structure of the various\ntesting tasks like check login\nfunctionality check new order\nfunctionality check fax functionality\nand other similar functionalities and\nestimate the effort required to test\nthese functionalities for example login\nfunctionality can be tested in few hours\nlikewise prepare a list of all the tasks\nand corresponding effort pause the\ntutorial and complete the exercise I\nhope you made an educated guess on the\neffort required this is bottom up\nstrategy for test estimation the\ntechnique is called bottom-up sense\nbased on the tasks which is at the\nlowest level of the work breakdown\nhierarchy you estimate the duration\ndependencies and resources in bottom up\nstrategy estimates are not taken by a\nsingle person but all individual\ncontributors experts and experienced\nstaff members collectively give\nestimates the idea is to draw on the\ncollaborative wisdom of the team members\nto live at accurate tests estimates now\nsince you have considerable experience\non the flight reservation application\nuse this experience to estimate the\neffort required for full functional\ntesting of the website deuter's demo com\nthis site is functionally identical to\nthe flight reservation application just\nthat it is web-based pause the tutorial\nand do the exercise\nI hope based on your experience you came\nup with him good estimate on the efforts\nrequired to test the website this is the\ntop-down approach to estimation which is\nbased on experience another technique is\nto classify application based on their\nsize and complexity and then seeing how\nlong a project of a particular size and\ncomplexity have taken in past\nanother approach is determining average\neffort per test case in past for similar\nprojects and then using estimated test\ncases of the current project and\narriving a total effort more\nsophisticated estimation models involved\ncomplex mathematical models in practice\nmajority of the projects use top-down\napproach for estimation test estimates\ncan be affected by many factors like\ntiming pressures people factors\ngeographic distribution of the test team\nand so on that is all the estimation\nconfused with test-case sweet to\nunderstand the nitty-gritty of a test\nplan let's develop a test plan for\nflight reservation application in the\nprevious tutorial we have already\ninformed that there more than 150 types\nof testing and you cannot possibly test\nyour application for all the different\ntypes for the flight reservation\napplication you might want to test the\napplication to examine how it works when\ninstalled on different operating systems\nbut testing it to check how it works for\ndifferent browsers does not make sense\nsince it is not a web-based application\nbased on this contextual analysis you\ncan make a list of testing types that\nare in scope and will be tested and\ntesting types that are out of scope and\nwill not be executed for flight\nreservation risk could be any future\nevent with a negative consequence you\nneed to identify the risks associated\nwith your project risks are of two types\nfirst project risks example of such risk\nis senior team member leaving the\nproject at roughly every risk is\nassigned a likelihood that is chance of\nit occurring typically on a scale of 1\nto 10 also the impact of that risk is\nidentified on a scale of 1 to 10 but\njust identifying the risk is not enough\nyou need to identify a mitigation in\nthis case mitigation could be knowledge\ntransfer to other team members and\nhaving a buffer tester in place the\nsecond type of risks are product risks\nan example of a product risk would be\nflight reservation system not installing\nand test environment mitigation in this\ncase would be conducting a smoke or\nsanity testing accordingly you will make\nchanges in your scope items to include\nsanity testing this is risk based\nstrategy of testing there are many other\ntesting strategies to help you select\ntesting\nfor your application under test most of\nthe times you're out of scalp items will\nnot contain out of context testing types\nbut in context testing types excluded\ndue to the test strategy chosen budget\nand timing considerations so for example\nif timing considerations do not permit\nperformance testing it will move from in\nscope to out of scope lists that apart a\ntest plan will contain information about\nthe test estimates test team schedule\nand so on a test plan helps monitor the\nprogress of various testing activities\nand helps take controlling action in\ncase of any deviations from the planned\nactivities that is a brief overview of\nhow to create a test plan below find a\nsample test plan template for your\nreference\nwhile actually\nTooting test cases you may find that\nactual results vary from the expected\nresults this is nothing but a defect\nalso called incident bug problem or\nissues in case you find a defect what\ninformation would you convey to a\ndeveloper to help him understand the\ndefect pause the tutorial and think your\nbug report should contain following\ninformation defect ID unique\nidentification number for the defect\ndefect description detailed description\nof the defect including information\nabout the module in which defect was\nfound version version of the application\nin which defect was found steps detailed\nsteps along with screenshots with which\nthe developer can reproduce the defect\nthey raised date when the defect is\nraised reference where when you provide\nreference to the documents like\nrequirements design architecture or\nmaybe even screenshots of the error to\nhelp understand the defect detected by\nname or ID of the tester who raised the\ndefect your bug report will also contain\nfollowing information status status of\nthe defect more on this later fixed by\nname or ID of the developer who fixed it\nthey'd closed date when the defect is\nclosed\nsample bug report for your reference\nthis apart your bug report will also\ninclude severity which describes the\nimpact of the defect on the application\npriority which is related to defect\nfixing urgency severity and priority\ncould be high medium or low based on the\nimpact and urgency at which the defect\nshould be fixed respectively a defect\ncould have a very low severity but a\nhigh priority for example if there is an\nerror in the text of the logo of flight\nreservation application its severity is\nlow sentence can be fixed very easily\nand it does not affect any functionality\nof the system but it needs to be fixed\nat high priority since you do not want\nto ship out your product with incorrect\nlogo likewise a defect can be high\nseverity but low priority suppose there\nis a problem with email functionality of\nflight reservation this defect has high\nseverity since it causes the application\nto crash but the functionality is\nscheduled to release in next cycle and\ncan be fixed later which makes it a low\npriority\nfrom discovery to resolution a defect\nmoves through a definite lifecycle\ncalled the defect lifecycle let's look\ninto it\nsuppose a tester finds a defect the\ndefect is assigned a status new the\ndefect is assigned to development\nproject manager who will analyze the\ndefect he will check whether it is a\nvalid defect consider that on the flight\nreservation application the only valid\npassword is mercury but you test the\napplication for some random password\nwhich causes logon failure and report it\nas defect such defects due to corrupted\ntest data miss configurations in the\ntest environment invalid expected\nresults etc are assigned the state as\nrejected if not the defect is checked\nwhether it is in scope suppose you find\na problem with the email functionality\nbut it is not part of the current\nrelease such defects are postponed next\nmanager checks whether a similar defect\nwas raised earlier if yes\ndefect is assigned a status duplicate if\nno the defect is assigned to developer\nwho start fixing the code during the\nstage defect is assigned a status in\nprogress\nonce code is fixed defect is assigned a\nstatus fixed next the tester will retest\nthe code in case the test case passes\nthe defect is closed if the test cases\nfails again the defect is reopened and\nassigned to the developer\na situation where during the first\nrelease of flight reservation a defect\nwas found in sacks order which was fixed\nand assigned a status closed during the\nsecond upgrade release the same defect\nagain resurfaced in such cases a closed\ndefect will be reopened that is all to\nbug life cycle\n[Music]\nOh\n[Music]\n[Music]\nyou\n[Music]\nI\n[Music]\n[Music]\nyou\nyou\n",
  "words": [
    "software",
    "testing",
    "software",
    "testing",
    "process",
    "identify",
    "correctness",
    "completeness",
    "quality",
    "developed",
    "computer",
    "software",
    "includes",
    "set",
    "activities",
    "conducted",
    "intent",
    "finding",
    "errors",
    "software",
    "could",
    "corrected",
    "product",
    "released",
    "simple",
    "words",
    "software",
    "testing",
    "activity",
    "check",
    "software",
    "system",
    "defect",
    "free",
    "testing",
    "important",
    "china",
    "airlines",
    "airbus",
    "a300",
    "crashing",
    "due",
    "software",
    "bug",
    "april",
    "26th",
    "1994",
    "killing",
    "264",
    "innocent",
    "lives",
    "software",
    "bugs",
    "potentially",
    "cause",
    "monetary",
    "human",
    "loss",
    "history",
    "full",
    "examples",
    "1985",
    "canada",
    "radiation",
    "therapy",
    "machine",
    "malfunctioned",
    "due",
    "software",
    "bug",
    "delivered",
    "lethal",
    "radiation",
    "doses",
    "patients",
    "leaving",
    "3",
    "people",
    "dead",
    "critically",
    "injuring",
    "3",
    "others",
    "april",
    "1999",
    "software",
    "bug",
    "caused",
    "failure",
    "billion",
    "dollar",
    "military",
    "satellite",
    "launched",
    "costly",
    "us",
    "accident",
    "history",
    "may",
    "1996",
    "software",
    "bug",
    "caused",
    "bank",
    "accounts",
    "823",
    "customers",
    "major",
    "us",
    "bank",
    "credited",
    "920",
    "million",
    "dollars",
    "see",
    "testing",
    "important",
    "software",
    "bugs",
    "expensive",
    "even",
    "dangerous",
    "paul",
    "ehrlich",
    "puts",
    "err",
    "human",
    "really",
    "foul",
    "things",
    "need",
    "computer",
    "consider",
    "scenario",
    "moving",
    "file",
    "folder",
    "folder",
    "b",
    "think",
    "possible",
    "ways",
    "test",
    "pause",
    "tutorial",
    "think",
    "exercise",
    "apart",
    "usual",
    "scenarios",
    "also",
    "test",
    "following",
    "conditions",
    "trying",
    "move",
    "file",
    "open",
    "security",
    "rights",
    "paste",
    "file",
    "folder",
    "b",
    "folder",
    "b",
    "shared",
    "drive",
    "storage",
    "capacity",
    "full",
    "folder",
    "b",
    "already",
    "file",
    "name",
    "fact",
    "list",
    "endless",
    "suppose",
    "15",
    "input",
    "fields",
    "test",
    "5",
    "possible",
    "values",
    "number",
    "combinations",
    "tested",
    "would",
    "5",
    "raised",
    "15",
    "test",
    "possible",
    "combinations",
    "project",
    "execution",
    "time",
    "costs",
    "rise",
    "exponentially",
    "hence",
    "one",
    "testing",
    "principles",
    "states",
    "exhaustive",
    "testing",
    "possible",
    "instead",
    "need",
    "optimal",
    "amount",
    "testing",
    "based",
    "risk",
    "assessment",
    "application",
    "million",
    "dollar",
    "question",
    "determine",
    "risk",
    "answer",
    "let",
    "exercise",
    "opinion",
    "operation",
    "likely",
    "cause",
    "operating",
    "system",
    "fail",
    "sure",
    "would",
    "guessed",
    "opening",
    "10",
    "heavy",
    "graphics",
    "applications",
    "time",
    "testing",
    "operating",
    "system",
    "would",
    "realize",
    "defects",
    "likely",
    "found",
    "multitasking",
    "module",
    "needs",
    "tested",
    "thoroughly",
    "brings",
    "us",
    "next",
    "principal",
    "defect",
    "clustering",
    "states",
    "small",
    "number",
    "modules",
    "contain",
    "defects",
    "detected",
    "experience",
    "identify",
    "risky",
    "modules",
    "approach",
    "problems",
    "tests",
    "repeated",
    "eventually",
    "test",
    "cases",
    "longer",
    "find",
    "new",
    "bugs",
    "another",
    "principle",
    "testing",
    "called",
    "pesticide",
    "paradox",
    "overcome",
    "test",
    "cases",
    "need",
    "regularly",
    "reviewed",
    "revised",
    "adding",
    "new",
    "different",
    "test",
    "cases",
    "help",
    "find",
    "defects",
    "even",
    "sweat",
    "hard",
    "work",
    "testing",
    "never",
    "claim",
    "product",
    "bug",
    "free",
    "drive",
    "home",
    "point",
    "let",
    "see",
    "video",
    "public",
    "launch",
    "windows",
    "98",
    "plug",
    "going",
    "say",
    "hey",
    "see",
    "live",
    "new",
    "device",
    "going",
    "load",
    "appropriate",
    "drivers",
    "notice",
    "scanner",
    "build",
    "whoa",
    "applause",
    "moving",
    "right",
    "along",
    "idea",
    "leslie",
    "shipping",
    "windows",
    "98",
    "would",
    "think",
    "company",
    "like",
    "microsoft",
    "would",
    "tested",
    "os",
    "thoroughly",
    "would",
    "risk",
    "reputation",
    "see",
    "os",
    "crashing",
    "public",
    "launch",
    "hence",
    "testing",
    "principle",
    "states",
    "testing",
    "shows",
    "presence",
    "defects",
    "testing",
    "reduces",
    "probability",
    "undiscovered",
    "defects",
    "remaining",
    "software",
    "even",
    "defects",
    "found",
    "proof",
    "correctness",
    "proof",
    "defects",
    "remain",
    "system",
    "work",
    "extra",
    "hard",
    "taking",
    "precautions",
    "making",
    "sure",
    "software",
    "product",
    "99",
    "bug",
    "free",
    "software",
    "meet",
    "needs",
    "requirements",
    "client",
    "leads",
    "us",
    "next",
    "principle",
    "states",
    "absence",
    "error",
    "fallacy",
    "finding",
    "fixing",
    "defects",
    "help",
    "system",
    "build",
    "unusable",
    "fulfill",
    "user",
    "needs",
    "requirements",
    "fix",
    "problem",
    "next",
    "principle",
    "testing",
    "early",
    "testing",
    "states",
    "testing",
    "start",
    "early",
    "possible",
    "software",
    "development",
    "lifecycle",
    "defects",
    "requirements",
    "design",
    "phase",
    "captured",
    "well",
    "principle",
    "later",
    "tutorial",
    "last",
    "principle",
    "testing",
    "states",
    "testing",
    "context",
    "dependent",
    "basically",
    "means",
    "way",
    "test",
    "site",
    "different",
    "way",
    "test",
    "commercial",
    "application",
    "close",
    "tutorial",
    "quick",
    "recap",
    "seven",
    "testing",
    "principles",
    "suppose",
    "assigned",
    "task",
    "develop",
    "custom",
    "software",
    "client",
    "block",
    "represents",
    "step",
    "required",
    "develop",
    "software",
    "irrespective",
    "technical",
    "background",
    "try",
    "make",
    "educated",
    "guess",
    "sequence",
    "steps",
    "follow",
    "achieve",
    "task",
    "correct",
    "sequence",
    "would",
    "gather",
    "much",
    "information",
    "possible",
    "details",
    "specifications",
    "desired",
    "software",
    "client",
    "nothing",
    "requirements",
    "gathering",
    "stage",
    "plan",
    "programming",
    "language",
    "like",
    "java",
    "php",
    "dotnet",
    "database",
    "like",
    "oracle",
    "sequel",
    "etc",
    "best",
    "suit",
    "project",
    "also",
    "determine",
    "functions",
    "architecture",
    "design",
    "stage",
    "actually",
    "code",
    "software",
    "build",
    "stage",
    "next",
    "test",
    "software",
    "verify",
    "built",
    "per",
    "specifications",
    "given",
    "client",
    "test",
    "stage",
    "software",
    "product",
    "ready",
    "may",
    "code",
    "changes",
    "accommodate",
    "enhancements",
    "requested",
    "client",
    "would",
    "maintenance",
    "stage",
    "levels",
    "constitute",
    "waterfall",
    "method",
    "software",
    "development",
    "lifecycle",
    "may",
    "observe",
    "testing",
    "model",
    "starts",
    "implementation",
    "done",
    "working",
    "large",
    "project",
    "systems",
    "complex",
    "easy",
    "miss",
    "key",
    "details",
    "requirements",
    "phase",
    "cases",
    "entirely",
    "wrong",
    "product",
    "delivered",
    "client",
    "start",
    "afresh",
    "project",
    "manage",
    "note",
    "requirements",
    "correctly",
    "make",
    "serious",
    "mistakes",
    "design",
    "architecture",
    "software",
    "redesign",
    "entire",
    "software",
    "correct",
    "error",
    "assessments",
    "thousands",
    "projects",
    "shown",
    "defects",
    "introduced",
    "requirements",
    "design",
    "make",
    "close",
    "half",
    "total",
    "number",
    "defects",
    "also",
    "costs",
    "fixing",
    "defect",
    "increases",
    "across",
    "development",
    "lifecycle",
    "earlier",
    "lifecycle",
    "defect",
    "detected",
    "cheaper",
    "fix",
    "say",
    "stitch",
    "time",
    "saves",
    "nine",
    "address",
    "concern",
    "testing",
    "developed",
    "every",
    "phase",
    "development",
    "lifecycle",
    "corresponding",
    "testing",
    "phase",
    "left",
    "side",
    "model",
    "software",
    "development",
    "life",
    "cycle",
    "sdlc",
    "right",
    "side",
    "model",
    "software",
    "test",
    "life",
    "cycle",
    "tlc",
    "entire",
    "figure",
    "looks",
    "like",
    "v",
    "hence",
    "name",
    "v",
    "model",
    "figure",
    "find",
    "stages",
    "different",
    "waterfall",
    "method",
    "differences",
    "along",
    "details",
    "testing",
    "phase",
    "discussed",
    "later",
    "tutorial",
    "apart",
    "v",
    "model",
    "iterative",
    "development",
    "models",
    "development",
    "carried",
    "phases",
    "phase",
    "adding",
    "functionality",
    "software",
    "phase",
    "comprises",
    "independent",
    "set",
    "development",
    "testing",
    "activities",
    "good",
    "examples",
    "development",
    "life",
    "cycles",
    "following",
    "iterative",
    "method",
    "rapid",
    "application",
    "development",
    "agile",
    "development",
    "close",
    "tutorial",
    "pointers",
    "must",
    "note",
    "numerous",
    "development",
    "life",
    "cycle",
    "models",
    "development",
    "model",
    "selected",
    "project",
    "depends",
    "aims",
    "goals",
    "project",
    "testing",
    "standalone",
    "activity",
    "adapt",
    "development",
    "model",
    "chosen",
    "project",
    "model",
    "testing",
    "performed",
    "levels",
    "right",
    "requirements",
    "gathering",
    "way",
    "maintenance",
    "let",
    "consider",
    "understand",
    "testing",
    "lifecycle",
    "work",
    "outsourcing",
    "company",
    "part",
    "testing",
    "team",
    "company",
    "hired",
    "bank",
    "develop",
    "online",
    "banking",
    "application",
    "understand",
    "testing",
    "lifecycle",
    "let",
    "first",
    "quickly",
    "go",
    "development",
    "life",
    "cycle",
    "requirement",
    "analysis",
    "phase",
    "series",
    "meetings",
    "client",
    "decides",
    "wants",
    "following",
    "five",
    "functionalities",
    "system",
    "logon",
    "valid",
    "credentials",
    "view",
    "current",
    "bank",
    "account",
    "balance",
    "deposit",
    "money",
    "withdraw",
    "money",
    "transfer",
    "money",
    "third",
    "party",
    "account",
    "next",
    "functional",
    "specification",
    "stage",
    "architecture",
    "database",
    "operating",
    "environment",
    "design",
    "finalized",
    "next",
    "design",
    "stage",
    "application",
    "broken",
    "module",
    "programs",
    "detail",
    "design",
    "stage",
    "pseudocode",
    "functions",
    "module",
    "documented",
    "next",
    "actual",
    "coding",
    "begins",
    "software",
    "development",
    "cycle",
    "phases",
    "tester",
    "sitting",
    "idle",
    "coding",
    "complete",
    "corresponding",
    "testing",
    "activities",
    "let",
    "look",
    "one",
    "one",
    "unit",
    "testing",
    "also",
    "called",
    "component",
    "testing",
    "performed",
    "standalone",
    "module",
    "check",
    "whether",
    "developed",
    "correctly",
    "login",
    "module",
    "may",
    "look",
    "like",
    "development",
    "typical",
    "unit",
    "test",
    "cases",
    "would",
    "check",
    "response",
    "valid",
    "login",
    "password",
    "check",
    "response",
    "invalid",
    "login",
    "password",
    "check",
    "response",
    "login",
    "empty",
    "login",
    "button",
    "pressed",
    "unit",
    "test",
    "done",
    "developers",
    "practical",
    "world",
    "developers",
    "either",
    "reluctant",
    "test",
    "code",
    "time",
    "unit",
    "test",
    "many",
    "times",
    "much",
    "unit",
    "testing",
    "done",
    "testers",
    "system",
    "10",
    "concerned",
    "behavior",
    "system",
    "whole",
    "unlike",
    "integration",
    "testing",
    "focuses",
    "data",
    "transfer",
    "amongst",
    "modules",
    "system",
    "testing",
    "checks",
    "complete",
    "scenarios",
    "way",
    "customer",
    "would",
    "use",
    "system",
    "good",
    "example",
    "test",
    "case",
    "phase",
    "would",
    "login",
    "banking",
    "application",
    "check",
    "current",
    "balance",
    "transfer",
    "money",
    "log",
    "apart",
    "functional",
    "requirements",
    "like",
    "performance",
    "reliability",
    "etcetera",
    "also",
    "checked",
    "system",
    "testing",
    "except",
    "testing",
    "acceptance",
    "test",
    "usually",
    "done",
    "client",
    "location",
    "client",
    "defects",
    "found",
    "system",
    "testing",
    "phase",
    "fixed",
    "focus",
    "acceptance",
    "test",
    "find",
    "defects",
    "check",
    "whether",
    "software",
    "system",
    "meets",
    "requirements",
    "since",
    "first",
    "time",
    "client",
    "sees",
    "requirements",
    "plain",
    "text",
    "actual",
    "working",
    "system",
    "acceptance",
    "testing",
    "done",
    "two",
    "ways",
    "alpha",
    "testing",
    "small",
    "set",
    "employees",
    "client",
    "case",
    "employees",
    "bank",
    "use",
    "system",
    "end",
    "user",
    "would",
    "beta",
    "testing",
    "small",
    "set",
    "customers",
    "case",
    "bank",
    "account",
    "holders",
    "use",
    "software",
    "recommend",
    "changes",
    "integration",
    "testing",
    "phase",
    "testing",
    "individual",
    "modules",
    "combined",
    "tested",
    "group",
    "data",
    "transferred",
    "modules",
    "tested",
    "thoroughly",
    "integration",
    "testing",
    "carried",
    "testers",
    "consider",
    "integration",
    "testing",
    "scenario",
    "banking",
    "application",
    "customer",
    "using",
    "current",
    "balance",
    "module",
    "balance",
    "navigates",
    "transfer",
    "module",
    "transfers",
    "500",
    "account",
    "customer",
    "navigates",
    "back",
    "current",
    "balance",
    "module",
    "latest",
    "balance",
    "500",
    "modules",
    "project",
    "assigned",
    "five",
    "different",
    "developers",
    "reduce",
    "coding",
    "time",
    "kotor",
    "2",
    "ready",
    "current",
    "balance",
    "module",
    "kotor",
    "5",
    "ready",
    "transfer",
    "module",
    "required",
    "test",
    "integration",
    "scenario",
    "situation",
    "one",
    "approach",
    "use",
    "bigbang",
    "integration",
    "testing",
    "wait",
    "modules",
    "developed",
    "begin",
    "testing",
    "major",
    "disadvantage",
    "increases",
    "project",
    "execution",
    "time",
    "since",
    "testers",
    "sitting",
    "idle",
    "modules",
    "developed",
    "also",
    "becomes",
    "difficult",
    "trace",
    "root",
    "cause",
    "defects",
    "alternatively",
    "use",
    "incremental",
    "approach",
    "modules",
    "checked",
    "integration",
    "available",
    "consider",
    "transfer",
    "module",
    "yet",
    "developed",
    "current",
    "balance",
    "module",
    "ready",
    "create",
    "stub",
    "accept",
    "give",
    "back",
    "data",
    "current",
    "balance",
    "module",
    "note",
    "complete",
    "implementation",
    "transfer",
    "module",
    "lots",
    "checks",
    "like",
    "whether",
    "account",
    "number",
    "entered",
    "correct",
    "amount",
    "transfer",
    "amount",
    "available",
    "account",
    "simulate",
    "data",
    "transfer",
    "takes",
    "place",
    "two",
    "modules",
    "facilitate",
    "testing",
    "contrary",
    "transfer",
    "module",
    "ready",
    "current",
    "balance",
    "module",
    "developed",
    "create",
    "driver",
    "simulate",
    "transfer",
    "modules",
    "increase",
    "effectiveness",
    "integration",
    "testing",
    "may",
    "use",
    "top",
    "approach",
    "modules",
    "tested",
    "first",
    "technique",
    "require",
    "creation",
    "stubs",
    "may",
    "use",
    "approach",
    "modules",
    "tested",
    "first",
    "technique",
    "require",
    "creation",
    "drivers",
    "approaches",
    "would",
    "functional",
    "increment",
    "sandwich",
    "combination",
    "top",
    "bottom",
    "choice",
    "approach",
    "chosen",
    "depends",
    "system",
    "architecture",
    "location",
    "modules",
    "consider",
    "scenario",
    "sects",
    "integration",
    "testing",
    "software",
    "made",
    "available",
    "testing",
    "teams",
    "system",
    "testing",
    "look",
    "initial",
    "screen",
    "system",
    "looks",
    "fine",
    "delay",
    "system",
    "test",
    "execution",
    "next",
    "day",
    "since",
    "critical",
    "testing",
    "tasks",
    "attend",
    "next",
    "day",
    "say",
    "plan",
    "execute",
    "scenario",
    "longan",
    "view",
    "balance",
    "transfer",
    "500",
    "log",
    "deadline",
    "4",
    "hours",
    "begin",
    "executing",
    "scenario",
    "enter",
    "valid",
    "login",
    "id",
    "password",
    "click",
    "login",
    "button",
    "boom",
    "taken",
    "blank",
    "screen",
    "absolutely",
    "links",
    "buttons",
    "nowhere",
    "proceed",
    "figment",
    "imagination",
    "practical",
    "condition",
    "could",
    "arise",
    "due",
    "developer",
    "negligence",
    "time",
    "pressures",
    "test",
    "environment",
    "configuration",
    "instability",
    "etc",
    "fix",
    "issue",
    "developer",
    "requires",
    "least",
    "5",
    "hours",
    "deadlines",
    "would",
    "missed",
    "fact",
    "none",
    "team",
    "members",
    "able",
    "execute",
    "respective",
    "scenario",
    "since",
    "view",
    "balance",
    "start",
    "point",
    "perform",
    "operation",
    "entire",
    "project",
    "delayed",
    "checked",
    "yesterday",
    "system",
    "would",
    "fixed",
    "would",
    "good",
    "testing",
    "avoid",
    "situation",
    "sanity",
    "also",
    "known",
    "smoke",
    "testing",
    "done",
    "check",
    "critical",
    "functionalities",
    "system",
    "accepted",
    "major",
    "testing",
    "sanity",
    "testing",
    "quick",
    "goal",
    "find",
    "sex",
    "check",
    "system",
    "health",
    "suppose",
    "current",
    "instead",
    "showing",
    "current",
    "balance",
    "client",
    "wants",
    "customized",
    "reports",
    "based",
    "date",
    "amount",
    "transaction",
    "obviously",
    "change",
    "needs",
    "tested",
    "deployed",
    "testing",
    "enhancements",
    "system",
    "changes",
    "corrections",
    "forms",
    "part",
    "maintenance",
    "testing",
    "suppose",
    "banking",
    "application",
    "current",
    "balance",
    "using",
    "new",
    "enhancement",
    "check",
    "balance",
    "year",
    "ago",
    "comes",
    "500",
    "enter",
    "transfer",
    "module",
    "try",
    "transfer",
    "1000",
    "order",
    "proceed",
    "transfer",
    "module",
    "checks",
    "current",
    "balance",
    "instead",
    "sending",
    "current",
    "balance",
    "sends",
    "old",
    "balance",
    "500",
    "transaction",
    "fails",
    "may",
    "observe",
    "code",
    "changes",
    "current",
    "balance",
    "module",
    "still",
    "transfer",
    "module",
    "affected",
    "regression",
    "testing",
    "carried",
    "check",
    "modification",
    "software",
    "caused",
    "unintended",
    "adverse",
    "side",
    "effects",
    "functional",
    "testing",
    "requirements",
    "like",
    "performance",
    "usability",
    "load",
    "factor",
    "also",
    "important",
    "many",
    "times",
    "seen",
    "long",
    "load",
    "time",
    "messages",
    "accessing",
    "application",
    "sure",
    "many",
    "address",
    "issue",
    "performance",
    "testing",
    "carried",
    "check",
    "fine",
    "tune",
    "system",
    "response",
    "times",
    "goal",
    "performance",
    "testing",
    "reduce",
    "response",
    "time",
    "acceptable",
    "level",
    "may",
    "seen",
    "messages",
    "like",
    "hence",
    "load",
    "testing",
    "carried",
    "check",
    "systems",
    "performance",
    "different",
    "loads",
    "number",
    "users",
    "accessing",
    "system",
    "depending",
    "results",
    "expected",
    "usage",
    "system",
    "resources",
    "may",
    "added",
    "two",
    "types",
    "testing",
    "general",
    "three",
    "testing",
    "types",
    "functional",
    "maintenance",
    "types",
    "multiple",
    "testing",
    "levels",
    "usually",
    "called",
    "testing",
    "types",
    "may",
    "find",
    "difference",
    "classification",
    "different",
    "resource",
    "general",
    "theme",
    "remains",
    "complete",
    "list",
    "150",
    "types",
    "testing",
    "need",
    "bother",
    "worry",
    "pick",
    "age",
    "testing",
    "industry",
    "also",
    "note",
    "testing",
    "types",
    "applicable",
    "projects",
    "depends",
    "nature",
    "scope",
    "project",
    "later",
    "tutorial",
    "thanks",
    "listening",
    "beginner",
    "easy",
    "assume",
    "testing",
    "executing",
    "various",
    "section",
    "code",
    "eddakath",
    "verifying",
    "results",
    "testing",
    "formal",
    "activity",
    "documented",
    "detail",
    "degree",
    "formality",
    "depends",
    "type",
    "application",
    "test",
    "standards",
    "followed",
    "organization",
    "maturity",
    "development",
    "process",
    "importance",
    "documentation",
    "highlighted",
    "succeeding",
    "tutorials",
    "hands",
    "using",
    "flight",
    "reservation",
    "application",
    "comes",
    "bundled",
    "automation",
    "tool",
    "qtp",
    "get",
    "application",
    "either",
    "install",
    "qt",
    "use",
    "link",
    "given",
    "tutorials",
    "site",
    "qt",
    "load",
    "one",
    "use",
    "flight",
    "reservation",
    "therefore",
    "selected",
    "flight",
    "reservation",
    "reduce",
    "learning",
    "curve",
    "studying",
    "qt",
    "loadrunner",
    "find",
    "link",
    "introduction",
    "video",
    "flight",
    "reservation",
    "application",
    "watch",
    "test",
    "scenario",
    "functionality",
    "application",
    "test",
    "tested",
    "also",
    "called",
    "test",
    "commissioned",
    "test",
    "possibility",
    "flight",
    "reservation",
    "application",
    "scenarios",
    "would",
    "check",
    "log",
    "functionality",
    "check",
    "new",
    "order",
    "created",
    "check",
    "existing",
    "order",
    "opened",
    "check",
    "user",
    "fax",
    "order",
    "check",
    "information",
    "displayed",
    "help",
    "section",
    "correct",
    "check",
    "information",
    "displayed",
    "section",
    "like",
    "version",
    "program",
    "name",
    "copyright",
    "information",
    "correct",
    "apart",
    "six",
    "scenarios",
    "try",
    "list",
    "possible",
    "scenarios",
    "application",
    "pause",
    "tutorial",
    "complete",
    "exercise",
    "sure",
    "identified",
    "many",
    "like",
    "update",
    "order",
    "delete",
    "order",
    "check",
    "reports",
    "check",
    "graphs",
    "time",
    "let",
    "stick",
    "six",
    "next",
    "already",
    "learned",
    "exhaustive",
    "testing",
    "possible",
    "suppose",
    "time",
    "execute",
    "four",
    "six",
    "scenarios",
    "low",
    "priority",
    "scenarios",
    "six",
    "eliminate",
    "think",
    "time",
    "startsnow",
    "sure",
    "would",
    "guessed",
    "scenarios",
    "5",
    "6",
    "since",
    "core",
    "functionality",
    "application",
    "nothing",
    "test",
    "prioritization",
    "consider",
    "scenario",
    "client",
    "gives",
    "request",
    "add",
    "send",
    "order",
    "via",
    "email",
    "functionality",
    "flight",
    "reservation",
    "also",
    "specifies",
    "gui",
    "fields",
    "buttons",
    "wants",
    "even",
    "though",
    "functionality",
    "yet",
    "developed",
    "try",
    "create",
    "test",
    "cases",
    "requirement",
    "pause",
    "tutorial",
    "complete",
    "exercise",
    "test",
    "cases",
    "amongst",
    "many",
    "could",
    "thought",
    "would",
    "check",
    "response",
    "one",
    "valid",
    "email",
    "id",
    "entered",
    "sent",
    "pressed",
    "check",
    "response",
    "one",
    "email",
    "id",
    "entered",
    "send",
    "pressed",
    "check",
    "response",
    "one",
    "email",
    "id",
    "empty",
    "send",
    "pressed",
    "may",
    "realized",
    "create",
    "test",
    "cases",
    "need",
    "look",
    "something",
    "base",
    "test",
    "nothing",
    "test",
    "basis",
    "test",
    "basis",
    "could",
    "actual",
    "application",
    "test",
    "abbreviated",
    "aut",
    "maybe",
    "even",
    "experience",
    "times",
    "like",
    "case",
    "tests",
    "would",
    "based",
    "documents",
    "fact",
    "happens",
    "different",
    "phases",
    "e",
    "model",
    "test",
    "plans",
    "created",
    "using",
    "corresponding",
    "documents",
    "code",
    "ready",
    "testing",
    "done",
    "consider",
    "test",
    "scenario",
    "check",
    "login",
    "functionality",
    "many",
    "possible",
    "variations",
    "check",
    "scenario",
    "check",
    "response",
    "entering",
    "valid",
    "agent",
    "name",
    "password",
    "check",
    "response",
    "entering",
    "invalid",
    "agent",
    "name",
    "password",
    "check",
    "response",
    "agent",
    "name",
    "empty",
    "login",
    "button",
    "pressed",
    "many",
    "nothing",
    "test",
    "case",
    "test",
    "scenarios",
    "rather",
    "vague",
    "cover",
    "wide",
    "range",
    "possibilities",
    "testing",
    "specific",
    "hence",
    "need",
    "test",
    "cases",
    "consider",
    "test",
    "case",
    "check",
    "response",
    "entering",
    "valid",
    "agent",
    "name",
    "password",
    "obvious",
    "test",
    "case",
    "needs",
    "input",
    "values",
    "agent",
    "name",
    "password",
    "nothing",
    "test",
    "data",
    "identifying",
    "test",
    "data",
    "may",
    "sometimes",
    "require",
    "creating",
    "test",
    "data",
    "afresh",
    "reason",
    "needs",
    "documented",
    "proceed",
    "consider",
    "quote",
    "witty",
    "man",
    "ensure",
    "perfect",
    "aim",
    "shoot",
    "first",
    "call",
    "whatever",
    "hit",
    "target",
    "live",
    "philosophy",
    "sure",
    "test",
    "case",
    "must",
    "expected",
    "result",
    "test",
    "case",
    "expected",
    "result",
    "would",
    "logins",
    "successful",
    "expected",
    "results",
    "documented",
    "may",
    "miss",
    "small",
    "differences",
    "calculations",
    "results",
    "otherwise",
    "look",
    "okay",
    "consider",
    "example",
    "calculating",
    "monthly",
    "pay",
    "employee",
    "involves",
    "lots",
    "calculations",
    "need",
    "documenting",
    "expected",
    "results",
    "becomes",
    "obvious",
    "suppose",
    "author",
    "test",
    "case",
    "left",
    "organization",
    "vacation",
    "sick",
    "busy",
    "critical",
    "tasks",
    "recently",
    "hired",
    "asked",
    "execute",
    "test",
    "case",
    "since",
    "new",
    "would",
    "certainly",
    "help",
    "test",
    "steps",
    "documented",
    "case",
    "would",
    "launched",
    "application",
    "enter",
    "agent",
    "name",
    "enter",
    "password",
    "click",
    "ok",
    "may",
    "think",
    "simple",
    "test",
    "steps",
    "documentation",
    "required",
    "test",
    "steps",
    "look",
    "something",
    "like",
    "think",
    "need",
    "become",
    "immediately",
    "obvious",
    "apart",
    "test",
    "case",
    "may",
    "fields",
    "like",
    "precondition",
    "specifies",
    "things",
    "must",
    "place",
    "test",
    "run",
    "test",
    "case",
    "precondition",
    "would",
    "flight",
    "reservation",
    "application",
    "installed",
    "also",
    "test",
    "case",
    "may",
    "include",
    "post",
    "condition",
    "specifies",
    "anything",
    "applies",
    "test",
    "case",
    "completes",
    "test",
    "case",
    "post",
    "condition",
    "would",
    "time",
    "date",
    "login",
    "stored",
    "database",
    "test",
    "case",
    "execution",
    "document",
    "results",
    "observed",
    "actual",
    "results",
    "column",
    "may",
    "even",
    "attach",
    "screenshots",
    "comparison",
    "actual",
    "expected",
    "results",
    "assigned",
    "pass",
    "fail",
    "status",
    "entire",
    "table",
    "may",
    "created",
    "word",
    "excel",
    "test",
    "management",
    "tool",
    "test",
    "case",
    "design",
    "find",
    "links",
    "download",
    "sample",
    "test",
    "case",
    "specification",
    "template",
    "consider",
    "scenario",
    "client",
    "changes",
    "requirement",
    "something",
    "frequent",
    "practical",
    "world",
    "adds",
    "field",
    "recipient",
    "name",
    "functionality",
    "need",
    "enter",
    "email",
    "id",
    "name",
    "send",
    "mail",
    "obviously",
    "need",
    "change",
    "test",
    "cases",
    "meet",
    "new",
    "requirement",
    "test",
    "case",
    "suite",
    "large",
    "difficult",
    "trace",
    "test",
    "cases",
    "affected",
    "change",
    "instead",
    "requirements",
    "numbered",
    "referenced",
    "test",
    "case",
    "sweet",
    "easy",
    "track",
    "test",
    "cases",
    "affected",
    "nothing",
    "traceability",
    "traceability",
    "matrix",
    "links",
    "business",
    "requirement",
    "corresponding",
    "functional",
    "requirement",
    "right",
    "corresponding",
    "test",
    "cases",
    "test",
    "case",
    "fails",
    "traceability",
    "helps",
    "determine",
    "corresponding",
    "functionality",
    "easily",
    "also",
    "helps",
    "ensure",
    "requirements",
    "tested",
    "already",
    "learned",
    "exhausted",
    "thing",
    "possible",
    "need",
    "techniques",
    "identify",
    "test",
    "cases",
    "likelihood",
    "finding",
    "defect",
    "possible",
    "many",
    "many",
    "test",
    "case",
    "designing",
    "techniques",
    "available",
    "let",
    "look",
    "one",
    "one",
    "equivalence",
    "partitioning",
    "black",
    "box",
    "technique",
    "applied",
    "levels",
    "testing",
    "like",
    "unit",
    "integration",
    "system",
    "let",
    "cetera",
    "black",
    "box",
    "technique",
    "technique",
    "code",
    "visible",
    "tester",
    "technique",
    "divide",
    "set",
    "test",
    "conditions",
    "partitions",
    "considered",
    "understand",
    "example",
    "let",
    "consider",
    "behavior",
    "tickets",
    "flight",
    "reservation",
    "application",
    "booking",
    "new",
    "flight",
    "ticket",
    "values",
    "1",
    "10",
    "considered",
    "valid",
    "ticket",
    "booked",
    "values",
    "values",
    "11",
    "99",
    "considered",
    "invalid",
    "error",
    "message",
    "10",
    "tickets",
    "made",
    "order",
    "one",
    "time",
    "shown",
    "entering",
    "values",
    "100",
    "ticket",
    "member",
    "defaults",
    "two",
    "digit",
    "number",
    "entering",
    "values",
    "0",
    "ticket",
    "defaults",
    "1",
    "test",
    "possible",
    "values",
    "done",
    "number",
    "test",
    "cases",
    "100",
    "address",
    "problem",
    "use",
    "equivalent",
    "partitioning",
    "divide",
    "possible",
    "values",
    "tickets",
    "groups",
    "sets",
    "system",
    "behavior",
    "considered",
    "sets",
    "called",
    "equivalence",
    "partitions",
    "equivalence",
    "classes",
    "pick",
    "one",
    "value",
    "partition",
    "testing",
    "hypothesis",
    "behind",
    "technique",
    "form",
    "condition",
    "value",
    "partition",
    "passes",
    "others",
    "also",
    "pass",
    "likewise",
    "one",
    "condition",
    "partition",
    "fails",
    "conditions",
    "partition",
    "fail",
    "two",
    "equivalence",
    "partitioning",
    "next",
    "technique",
    "boundary",
    "value",
    "analysis",
    "technique",
    "test",
    "boundaries",
    "partitions",
    "earlier",
    "example",
    "instead",
    "checking",
    "one",
    "value",
    "partition",
    "check",
    "values",
    "boundaries",
    "like",
    "0",
    "1",
    "10",
    "11",
    "boundary",
    "value",
    "analysis",
    "also",
    "called",
    "range",
    "checking",
    "equivalence",
    "partitioning",
    "boundary",
    "value",
    "analysis",
    "closely",
    "related",
    "generally",
    "used",
    "together",
    "levels",
    "testing",
    "decision",
    "table",
    "10",
    "technique",
    "good",
    "way",
    "deal",
    "combination",
    "inputs",
    "produce",
    "different",
    "results",
    "understand",
    "example",
    "let",
    "consider",
    "behavior",
    "flight",
    "button",
    "different",
    "combinations",
    "fly",
    "fly",
    "fly",
    "fly",
    "set",
    "flight",
    "icon",
    "disabled",
    "decision",
    "table",
    "register",
    "values",
    "false",
    "fly",
    "fly",
    "outcome",
    "flights",
    "button",
    "disabled",
    "false",
    "next",
    "fly",
    "set",
    "fly",
    "set",
    "flight",
    "button",
    "disabled",
    "corresponding",
    "registered",
    "true",
    "fly",
    "decision",
    "table",
    "rest",
    "entries",
    "false",
    "fly",
    "set",
    "fly",
    "set",
    "flight",
    "button",
    "disabled",
    "make",
    "entries",
    "decision",
    "table",
    "lastly",
    "fly",
    "fly",
    "set",
    "flights",
    "button",
    "enabled",
    "make",
    "corresponding",
    "entry",
    "decision",
    "table",
    "observe",
    "outcomes",
    "rule",
    "1",
    "2",
    "3",
    "remain",
    "select",
    "one",
    "rule",
    "4",
    "testing",
    "technique",
    "becomes",
    "immediately",
    "clear",
    "number",
    "inputs",
    "increases",
    "number",
    "possible",
    "combinations",
    "given",
    "2",
    "raised",
    "n",
    "n",
    "number",
    "inputs",
    "n",
    "equals",
    "10",
    "common",
    "testing",
    "big",
    "input",
    "forms",
    "number",
    "combinations",
    "1024",
    "obviously",
    "test",
    "combinations",
    "choose",
    "rich",
    "subset",
    "possible",
    "combinations",
    "using",
    "decision",
    "based",
    "testing",
    "technique",
    "state",
    "transitioning",
    "diagram",
    "helpful",
    "need",
    "test",
    "different",
    "system",
    "transitions",
    "understand",
    "example",
    "let",
    "consider",
    "behavior",
    "login",
    "screen",
    "flight",
    "reservation",
    "application",
    "consider",
    "entered",
    "agent",
    "name",
    "login",
    "screen",
    "first",
    "attempt",
    "enter",
    "correct",
    "password",
    "given",
    "access",
    "application",
    "case",
    "entered",
    "incorrect",
    "password",
    "error",
    "screen",
    "shown",
    "asked",
    "enter",
    "password",
    "second",
    "time",
    "make",
    "three",
    "attempts",
    "fourth",
    "attempt",
    "enter",
    "incorrect",
    "password",
    "application",
    "closed",
    "case",
    "enter",
    "correct",
    "password",
    "second",
    "third",
    "fourth",
    "attempt",
    "given",
    "access",
    "application",
    "amongst",
    "various",
    "system",
    "transitions",
    "scenario",
    "access",
    "first",
    "attempt",
    "close",
    "application",
    "edge",
    "fourth",
    "attempt",
    "important",
    "need",
    "essentially",
    "tested",
    "scenario",
    "access",
    "fourth",
    "attempt",
    "less",
    "important",
    "perhaps",
    "test",
    "one",
    "called",
    "state",
    "chart",
    "state",
    "graph",
    "components",
    "graph",
    "states",
    "software",
    "may",
    "occupy",
    "transition",
    "one",
    "state",
    "events",
    "cause",
    "transition",
    "actions",
    "result",
    "events",
    "state",
    "graph",
    "useful",
    "identifying",
    "valid",
    "transitions",
    "want",
    "determine",
    "invalid",
    "transitions",
    "use",
    "state",
    "table",
    "state",
    "table",
    "valid",
    "states",
    "listed",
    "left",
    "side",
    "table",
    "events",
    "cause",
    "top",
    "cell",
    "represents",
    "state",
    "system",
    "move",
    "corresponding",
    "event",
    "occurs",
    "example",
    "s1",
    "state",
    "enter",
    "correct",
    "password",
    "taken",
    "state",
    "s6",
    "incase",
    "enter",
    "incorrect",
    "password",
    "taken",
    "state",
    "s2",
    "likewise",
    "determine",
    "states",
    "observe",
    "two",
    "invalid",
    "states",
    "highlighted",
    "using",
    "method",
    "basically",
    "means",
    "happens",
    "already",
    "logged",
    "application",
    "open",
    "another",
    "instance",
    "flight",
    "reservation",
    "enter",
    "valid",
    "invalid",
    "passwords",
    "agent",
    "system",
    "response",
    "scenario",
    "tested",
    "use",
    "case",
    "testing",
    "technique",
    "test",
    "cases",
    "cover",
    "entire",
    "system",
    "basis",
    "start",
    "finish",
    "use",
    "case",
    "description",
    "particular",
    "use",
    "system",
    "actor",
    "also",
    "called",
    "user",
    "technique",
    "used",
    "widely",
    "developing",
    "tests",
    "systemö",
    "acceptance",
    "level",
    "use",
    "case",
    "actor",
    "represented",
    "system",
    "bias",
    "first",
    "list",
    "main",
    "success",
    "scenario",
    "consider",
    "first",
    "step",
    "scenario",
    "login",
    "functionality",
    "flight",
    "reservation",
    "application",
    "actor",
    "enters",
    "agent",
    "name",
    "password",
    "next",
    "step",
    "system",
    "validate",
    "password",
    "next",
    "password",
    "correct",
    "access",
    "granted",
    "extension",
    "use",
    "case",
    "password",
    "valid",
    "system",
    "display",
    "message",
    "ask",
    "retry",
    "four",
    "times",
    "password",
    "valid",
    "fourth",
    "time",
    "system",
    "close",
    "application",
    "test",
    "success",
    "scenario",
    "one",
    "case",
    "extension",
    "review",
    "simple",
    "words",
    "reviews",
    "meeting",
    "people",
    "analyze",
    "software",
    "work",
    "product",
    "recommend",
    "changes",
    "objective",
    "improving",
    "quality",
    "software",
    "work",
    "product",
    "could",
    "design",
    "document",
    "system",
    "requirements",
    "specifications",
    "code",
    "test",
    "plan",
    "etc",
    "helps",
    "detecting",
    "defects",
    "early",
    "development",
    "lifecycle",
    "reduces",
    "costs",
    "almost",
    "always",
    "testing",
    "team",
    "part",
    "review",
    "meetings",
    "understand",
    "review",
    "detail",
    "let",
    "consider",
    "example",
    "earlier",
    "add",
    "email",
    "functionality",
    "flight",
    "reservation",
    "application",
    "functional",
    "design",
    "document",
    "prepared",
    "technical",
    "lead",
    "approaches",
    "manager",
    "requests",
    "initiate",
    "review",
    "manager",
    "quickly",
    "go",
    "document",
    "check",
    "whether",
    "document",
    "acceptable",
    "quality",
    "request",
    "review",
    "people",
    "example",
    "case",
    "finds",
    "spelling",
    "mistakes",
    "asks",
    "technical",
    "lead",
    "correct",
    "corrected",
    "manager",
    "send",
    "meeting",
    "request",
    "stakeholders",
    "along",
    "meeting",
    "location",
    "information",
    "date",
    "time",
    "meeting",
    "mention",
    "agenda",
    "meeting",
    "also",
    "attach",
    "functional",
    "design",
    "document",
    "meeting",
    "request",
    "reference",
    "planning",
    "stage",
    "next",
    "stage",
    "kickoff",
    "meeting",
    "optional",
    "stage",
    "goal",
    "get",
    "everybody",
    "wavelength",
    "regarding",
    "document",
    "review",
    "beneficial",
    "new",
    "highly",
    "complex",
    "projects",
    "next",
    "stage",
    "preparation",
    "stage",
    "review",
    "meeting",
    "participants",
    "individually",
    "go",
    "document",
    "identify",
    "defects",
    "comments",
    "questions",
    "asked",
    "review",
    "meeting",
    "phase",
    "necessary",
    "ensure",
    "meeting",
    "participants",
    "focus",
    "subject",
    "hand",
    "instead",
    "daydreaming",
    "exercise",
    "functional",
    "design",
    "document",
    "think",
    "details",
    "missing",
    "required",
    "help",
    "test",
    "functionality",
    "pause",
    "tutorial",
    "think",
    "let",
    "continue",
    "next",
    "stage",
    "actual",
    "review",
    "meeting",
    "meeting",
    "participants",
    "assigned",
    "different",
    "roles",
    "increase",
    "effectiveness",
    "meeting",
    "moderator",
    "role",
    "usually",
    "played",
    "manager",
    "leaves",
    "review",
    "meeting",
    "sets",
    "agenda",
    "creator",
    "document",
    "review",
    "plays",
    "role",
    "author",
    "reads",
    "document",
    "invites",
    "comments",
    "task",
    "reviewer",
    "communicate",
    "defects",
    "work",
    "product",
    "suppose",
    "one",
    "reviewer",
    "says",
    "would",
    "nice",
    "reset",
    "button",
    "author",
    "agrees",
    "suggestion",
    "another",
    "review",
    "comment",
    "mention",
    "menu",
    "item",
    "email",
    "functionality",
    "appear",
    "author",
    "accepts",
    "agrees",
    "make",
    "changes",
    "meeting",
    "participant",
    "playing",
    "role",
    "scribe",
    "also",
    "known",
    "recorder",
    "note",
    "defect",
    "suggestions",
    "one",
    "young",
    "reviewer",
    "suggests",
    "possibility",
    "sharing",
    "ticket",
    "via",
    "social",
    "networking",
    "sites",
    "like",
    "facebook",
    "author",
    "strongly",
    "disagrees",
    "reviewer",
    "author",
    "enter",
    "heated",
    "argument",
    "juncture",
    "moderator",
    "intervenes",
    "finds",
    "amiable",
    "solution",
    "ask",
    "client",
    "whether",
    "needs",
    "sharing",
    "via",
    "social",
    "networking",
    "finally",
    "comments",
    "discussed",
    "scribe",
    "gives",
    "list",
    "defects",
    "comments",
    "suggestions",
    "author",
    "needs",
    "incorporate",
    "work",
    "product",
    "moderator",
    "closes",
    "review",
    "meeting",
    "meeting",
    "phase",
    "review",
    "important",
    "roles",
    "moderator",
    "author",
    "described",
    "reviewers",
    "moderator",
    "scribe",
    "also",
    "play",
    "role",
    "reviewer",
    "meaning",
    "give",
    "review",
    "comments",
    "author",
    "next",
    "phase",
    "review",
    "rework",
    "phase",
    "author",
    "make",
    "changes",
    "document",
    "per",
    "action",
    "items",
    "meeting",
    "phase",
    "moderator",
    "circulate",
    "rework",
    "document",
    "review",
    "participants",
    "ensure",
    "changes",
    "included",
    "satisfactorily",
    "review",
    "process",
    "various",
    "stages",
    "review",
    "process",
    "generic",
    "review",
    "note",
    "three",
    "types",
    "reviews",
    "walkthrough",
    "led",
    "author",
    "technical",
    "review",
    "led",
    "trained",
    "moderator",
    "management",
    "participation",
    "inspection",
    "led",
    "trained",
    "moderator",
    "uses",
    "entry",
    "exit",
    "criteria",
    "three",
    "types",
    "follow",
    "review",
    "process",
    "stages",
    "discussed",
    "earlier",
    "let",
    "exercise",
    "flight",
    "reservation",
    "application",
    "prepare",
    "work",
    "breakdown",
    "structure",
    "various",
    "testing",
    "tasks",
    "like",
    "check",
    "login",
    "functionality",
    "check",
    "new",
    "order",
    "functionality",
    "check",
    "fax",
    "functionality",
    "similar",
    "functionalities",
    "estimate",
    "effort",
    "required",
    "test",
    "functionalities",
    "example",
    "login",
    "functionality",
    "tested",
    "hours",
    "likewise",
    "prepare",
    "list",
    "tasks",
    "corresponding",
    "effort",
    "pause",
    "tutorial",
    "complete",
    "exercise",
    "hope",
    "made",
    "educated",
    "guess",
    "effort",
    "required",
    "bottom",
    "strategy",
    "test",
    "estimation",
    "technique",
    "called",
    "sense",
    "based",
    "tasks",
    "lowest",
    "level",
    "work",
    "breakdown",
    "hierarchy",
    "estimate",
    "duration",
    "dependencies",
    "resources",
    "bottom",
    "strategy",
    "estimates",
    "taken",
    "single",
    "person",
    "individual",
    "contributors",
    "experts",
    "experienced",
    "staff",
    "members",
    "collectively",
    "give",
    "estimates",
    "idea",
    "draw",
    "collaborative",
    "wisdom",
    "team",
    "members",
    "live",
    "accurate",
    "tests",
    "estimates",
    "since",
    "considerable",
    "experience",
    "flight",
    "reservation",
    "application",
    "use",
    "experience",
    "estimate",
    "effort",
    "required",
    "full",
    "functional",
    "testing",
    "website",
    "deuter",
    "demo",
    "com",
    "site",
    "functionally",
    "identical",
    "flight",
    "reservation",
    "application",
    "pause",
    "tutorial",
    "exercise",
    "hope",
    "based",
    "experience",
    "came",
    "good",
    "estimate",
    "efforts",
    "required",
    "test",
    "website",
    "approach",
    "estimation",
    "based",
    "experience",
    "another",
    "technique",
    "classify",
    "application",
    "based",
    "size",
    "complexity",
    "seeing",
    "long",
    "project",
    "particular",
    "size",
    "complexity",
    "taken",
    "past",
    "another",
    "approach",
    "determining",
    "average",
    "effort",
    "per",
    "test",
    "case",
    "past",
    "similar",
    "projects",
    "using",
    "estimated",
    "test",
    "cases",
    "current",
    "project",
    "arriving",
    "total",
    "effort",
    "sophisticated",
    "estimation",
    "models",
    "involved",
    "complex",
    "mathematical",
    "models",
    "practice",
    "majority",
    "projects",
    "use",
    "approach",
    "estimation",
    "test",
    "estimates",
    "affected",
    "many",
    "factors",
    "like",
    "timing",
    "pressures",
    "people",
    "factors",
    "geographic",
    "distribution",
    "test",
    "team",
    "estimation",
    "confused",
    "sweet",
    "understand",
    "test",
    "plan",
    "let",
    "develop",
    "test",
    "plan",
    "flight",
    "reservation",
    "application",
    "previous",
    "tutorial",
    "already",
    "informed",
    "150",
    "types",
    "testing",
    "possibly",
    "test",
    "application",
    "different",
    "types",
    "flight",
    "reservation",
    "application",
    "might",
    "want",
    "test",
    "application",
    "examine",
    "works",
    "installed",
    "different",
    "operating",
    "systems",
    "testing",
    "check",
    "works",
    "different",
    "browsers",
    "make",
    "sense",
    "since",
    "application",
    "based",
    "contextual",
    "analysis",
    "make",
    "list",
    "testing",
    "types",
    "scope",
    "tested",
    "testing",
    "types",
    "scope",
    "executed",
    "flight",
    "reservation",
    "risk",
    "could",
    "future",
    "event",
    "negative",
    "consequence",
    "need",
    "identify",
    "risks",
    "associated",
    "project",
    "risks",
    "two",
    "types",
    "first",
    "project",
    "risks",
    "example",
    "risk",
    "senior",
    "team",
    "member",
    "leaving",
    "project",
    "roughly",
    "every",
    "risk",
    "assigned",
    "likelihood",
    "chance",
    "occurring",
    "typically",
    "scale",
    "1",
    "10",
    "also",
    "impact",
    "risk",
    "identified",
    "scale",
    "1",
    "10",
    "identifying",
    "risk",
    "enough",
    "need",
    "identify",
    "mitigation",
    "case",
    "mitigation",
    "could",
    "knowledge",
    "transfer",
    "team",
    "members",
    "buffer",
    "tester",
    "place",
    "second",
    "type",
    "risks",
    "product",
    "risks",
    "example",
    "product",
    "risk",
    "would",
    "flight",
    "reservation",
    "system",
    "installing",
    "test",
    "environment",
    "mitigation",
    "case",
    "would",
    "conducting",
    "smoke",
    "sanity",
    "testing",
    "accordingly",
    "make",
    "changes",
    "scope",
    "items",
    "include",
    "sanity",
    "testing",
    "risk",
    "based",
    "strategy",
    "testing",
    "many",
    "testing",
    "strategies",
    "help",
    "select",
    "testing",
    "application",
    "test",
    "times",
    "scalp",
    "items",
    "contain",
    "context",
    "testing",
    "types",
    "context",
    "testing",
    "types",
    "excluded",
    "due",
    "test",
    "strategy",
    "chosen",
    "budget",
    "timing",
    "considerations",
    "example",
    "timing",
    "considerations",
    "permit",
    "performance",
    "testing",
    "move",
    "scope",
    "scope",
    "lists",
    "apart",
    "test",
    "plan",
    "contain",
    "information",
    "test",
    "estimates",
    "test",
    "team",
    "schedule",
    "test",
    "plan",
    "helps",
    "monitor",
    "progress",
    "various",
    "testing",
    "activities",
    "helps",
    "take",
    "controlling",
    "action",
    "case",
    "deviations",
    "planned",
    "activities",
    "brief",
    "overview",
    "create",
    "test",
    "plan",
    "find",
    "sample",
    "test",
    "plan",
    "template",
    "reference",
    "actually",
    "tooting",
    "test",
    "cases",
    "may",
    "find",
    "actual",
    "results",
    "vary",
    "expected",
    "results",
    "nothing",
    "defect",
    "also",
    "called",
    "incident",
    "bug",
    "problem",
    "issues",
    "case",
    "find",
    "defect",
    "information",
    "would",
    "convey",
    "developer",
    "help",
    "understand",
    "defect",
    "pause",
    "tutorial",
    "think",
    "bug",
    "report",
    "contain",
    "following",
    "information",
    "defect",
    "id",
    "unique",
    "identification",
    "number",
    "defect",
    "defect",
    "description",
    "detailed",
    "description",
    "defect",
    "including",
    "information",
    "module",
    "defect",
    "found",
    "version",
    "version",
    "application",
    "defect",
    "found",
    "steps",
    "detailed",
    "steps",
    "along",
    "screenshots",
    "developer",
    "reproduce",
    "defect",
    "raised",
    "date",
    "defect",
    "raised",
    "reference",
    "provide",
    "reference",
    "documents",
    "like",
    "requirements",
    "design",
    "architecture",
    "maybe",
    "even",
    "screenshots",
    "error",
    "help",
    "understand",
    "defect",
    "detected",
    "name",
    "id",
    "tester",
    "raised",
    "defect",
    "bug",
    "report",
    "also",
    "contain",
    "following",
    "information",
    "status",
    "status",
    "defect",
    "later",
    "fixed",
    "name",
    "id",
    "developer",
    "fixed",
    "closed",
    "date",
    "defect",
    "closed",
    "sample",
    "bug",
    "report",
    "reference",
    "apart",
    "bug",
    "report",
    "also",
    "include",
    "severity",
    "describes",
    "impact",
    "defect",
    "application",
    "priority",
    "related",
    "defect",
    "fixing",
    "urgency",
    "severity",
    "priority",
    "could",
    "high",
    "medium",
    "low",
    "based",
    "impact",
    "urgency",
    "defect",
    "fixed",
    "respectively",
    "defect",
    "could",
    "low",
    "severity",
    "high",
    "priority",
    "example",
    "error",
    "text",
    "logo",
    "flight",
    "reservation",
    "application",
    "severity",
    "low",
    "sentence",
    "fixed",
    "easily",
    "affect",
    "functionality",
    "system",
    "needs",
    "fixed",
    "high",
    "priority",
    "since",
    "want",
    "ship",
    "product",
    "incorrect",
    "logo",
    "likewise",
    "defect",
    "high",
    "severity",
    "low",
    "priority",
    "suppose",
    "problem",
    "email",
    "functionality",
    "flight",
    "reservation",
    "defect",
    "high",
    "severity",
    "since",
    "causes",
    "application",
    "crash",
    "functionality",
    "scheduled",
    "release",
    "next",
    "cycle",
    "fixed",
    "later",
    "makes",
    "low",
    "priority",
    "discovery",
    "resolution",
    "defect",
    "moves",
    "definite",
    "lifecycle",
    "called",
    "defect",
    "lifecycle",
    "let",
    "look",
    "suppose",
    "tester",
    "finds",
    "defect",
    "defect",
    "assigned",
    "status",
    "new",
    "defect",
    "assigned",
    "development",
    "project",
    "manager",
    "analyze",
    "defect",
    "check",
    "whether",
    "valid",
    "defect",
    "consider",
    "flight",
    "reservation",
    "application",
    "valid",
    "password",
    "mercury",
    "test",
    "application",
    "random",
    "password",
    "causes",
    "logon",
    "failure",
    "report",
    "defect",
    "defects",
    "due",
    "corrupted",
    "test",
    "data",
    "miss",
    "configurations",
    "test",
    "environment",
    "invalid",
    "expected",
    "results",
    "etc",
    "assigned",
    "state",
    "rejected",
    "defect",
    "checked",
    "whether",
    "scope",
    "suppose",
    "find",
    "problem",
    "email",
    "functionality",
    "part",
    "current",
    "release",
    "defects",
    "postponed",
    "next",
    "manager",
    "checks",
    "whether",
    "similar",
    "defect",
    "raised",
    "earlier",
    "yes",
    "defect",
    "assigned",
    "status",
    "duplicate",
    "defect",
    "assigned",
    "developer",
    "start",
    "fixing",
    "code",
    "stage",
    "defect",
    "assigned",
    "status",
    "progress",
    "code",
    "fixed",
    "defect",
    "assigned",
    "status",
    "fixed",
    "next",
    "tester",
    "retest",
    "code",
    "case",
    "test",
    "case",
    "passes",
    "defect",
    "closed",
    "test",
    "cases",
    "fails",
    "defect",
    "reopened",
    "assigned",
    "developer",
    "situation",
    "first",
    "release",
    "flight",
    "reservation",
    "defect",
    "found",
    "sacks",
    "order",
    "fixed",
    "assigned",
    "status",
    "closed",
    "second",
    "upgrade",
    "release",
    "defect",
    "resurfaced",
    "cases",
    "closed",
    "defect",
    "reopened",
    "bug",
    "life",
    "cycle",
    "music",
    "oh",
    "music",
    "music",
    "music",
    "music",
    "music"
  ],
  "keywords": [
    "software",
    "testing",
    "process",
    "identify",
    "developed",
    "set",
    "activities",
    "could",
    "product",
    "check",
    "system",
    "defect",
    "important",
    "due",
    "bug",
    "cause",
    "people",
    "us",
    "may",
    "bank",
    "see",
    "even",
    "need",
    "consider",
    "scenario",
    "file",
    "folder",
    "b",
    "think",
    "possible",
    "test",
    "pause",
    "tutorial",
    "exercise",
    "apart",
    "scenarios",
    "also",
    "following",
    "already",
    "name",
    "list",
    "suppose",
    "5",
    "values",
    "number",
    "combinations",
    "tested",
    "would",
    "raised",
    "project",
    "execution",
    "time",
    "hence",
    "one",
    "states",
    "instead",
    "amount",
    "based",
    "risk",
    "application",
    "determine",
    "let",
    "operating",
    "sure",
    "10",
    "defects",
    "found",
    "module",
    "needs",
    "next",
    "small",
    "modules",
    "contain",
    "experience",
    "approach",
    "tests",
    "cases",
    "find",
    "new",
    "another",
    "principle",
    "called",
    "different",
    "help",
    "work",
    "load",
    "right",
    "along",
    "like",
    "requirements",
    "client",
    "error",
    "fixing",
    "user",
    "problem",
    "start",
    "development",
    "lifecycle",
    "design",
    "phase",
    "later",
    "way",
    "close",
    "assigned",
    "develop",
    "required",
    "technical",
    "try",
    "make",
    "steps",
    "correct",
    "information",
    "details",
    "nothing",
    "stage",
    "plan",
    "etc",
    "architecture",
    "code",
    "given",
    "ready",
    "changes",
    "maintenance",
    "levels",
    "method",
    "observe",
    "model",
    "done",
    "note",
    "entire",
    "projects",
    "earlier",
    "corresponding",
    "side",
    "life",
    "cycle",
    "models",
    "carried",
    "functionality",
    "good",
    "depends",
    "understand",
    "part",
    "team",
    "banking",
    "first",
    "requirement",
    "analysis",
    "functionalities",
    "valid",
    "current",
    "account",
    "balance",
    "money",
    "transfer",
    "functional",
    "environment",
    "documented",
    "actual",
    "tester",
    "complete",
    "look",
    "unit",
    "whether",
    "login",
    "response",
    "password",
    "invalid",
    "button",
    "pressed",
    "many",
    "times",
    "behavior",
    "integration",
    "data",
    "checks",
    "use",
    "example",
    "case",
    "performance",
    "checked",
    "acceptance",
    "fixed",
    "since",
    "two",
    "using",
    "500",
    "available",
    "create",
    "entered",
    "technique",
    "screen",
    "tasks",
    "execute",
    "enter",
    "id",
    "taken",
    "condition",
    "developer",
    "members",
    "sanity",
    "date",
    "order",
    "fails",
    "affected",
    "results",
    "expected",
    "types",
    "three",
    "scope",
    "various",
    "flight",
    "reservation",
    "six",
    "low",
    "priority",
    "request",
    "send",
    "email",
    "entering",
    "agent",
    "ensure",
    "author",
    "document",
    "status",
    "table",
    "helps",
    "equivalence",
    "partitioning",
    "considered",
    "ticket",
    "1",
    "value",
    "partition",
    "likewise",
    "decision",
    "fly",
    "disabled",
    "state",
    "transitions",
    "attempt",
    "access",
    "incorrect",
    "second",
    "fourth",
    "closed",
    "review",
    "meeting",
    "manager",
    "reference",
    "participants",
    "comments",
    "moderator",
    "role",
    "reviewer",
    "estimate",
    "effort",
    "strategy",
    "estimation",
    "estimates",
    "risks",
    "report",
    "severity",
    "high",
    "release",
    "music"
  ]
}