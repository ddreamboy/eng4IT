{
  "text": "[Music]\nwhat is going on guys welcome back in\ntoday's video we're going to learn how\nto use sk learns pipelines to make your\nmachine learning processing more\nprofessional so let's get right into it\nall right now for today's video i'm\ngoing to use a jupyter notebook in order\nto explain everything because i think\nit's just more convenient to do so you\ncan still follow along in pycharm in the\nidle in vs code whatever you want to use\nbut for me as a tutorial maker a jupyter\nnotebook is just more convenient when\nworking with data science machine\nlearning stuff because i can run\nindividual cells i can change individual\nparts and rerun them instead of just\nrunning the whole block of code every\ntime i do something so i'm going to use\na jupyter notebook and in order to\nexplain to you what pipelines are how to\nuse them and why you should use them\nwe're going to look at a very simple\nexample today and for this we're going\nto need the usual python data science\nstack like pandas numpy matplotlib maybe\ni mean we're not going to use math.lib\nbut sklearn is important of course\nbecause those pipelines come from\nsklearn\nand we're going to start with a very\nbasic example we're going to import\npandas as pd and we're going to create\nsome artificial data this data is going\nto start as a dictionary we're going to\nsay we have\na name\nso this is the column name and then we\nhave here anna\nbob\ncharlie\ndiana\nand eric whatever\nthen the age is gonna be\n20\n34 23\n78 and 33\nthen the gender is gonna be\nf for female m for male so f fm\nf\nm\n[Music]\nand then what we also have is a job or\nwhat they have as a job\nand\nlet's say we have uh\nthree jobs or four jobs to choose from\nlet's say we have a programmer we have a\nworker not worker sorry writer\nwe have a cook\nwe have another programmer\nand we have um\ni don't know let's say teacher or\nsomething\nnow\nthis is some sample data that we're\ngoing to use to explain pipelines and\nwhen you get data from the real world\nsometimes data is going to be missing\nfor example we might not have this data\nwe might have none here because this h\nis non-existent so we need to find a\nsolution for that\nnow first of all let's go ahead and turn\nthis into a data frame df is going to be\npandas data frame based on the data\nand then we can look at the data frame\nso this is a very small data set it's\nartificial it's not real you can also do\neverything we learned today on real data\nsets in fact i have a tutorial on how to\nuse how to predict titanic survivors\nusing the titanic data set and there we\nuse actually pipelines and a lot of\npre-processing so if you want to have a\npractical example you might want to look\nat that video\ntoday we're going to talk about the\nbasics and this is what a small data set\nlooks like for example we have missing\nvalues we have values that we cannot\nfeed into a neural network or into a\nk-neighbor's classification right we\ncannot just go ahead and say programmer\nis something that we feed into the\nneural network i mean we can do it\ncharacter by character as ascii codes\nbut that's not what we want to do those\nare categories and those are also\ncategories we have a binary value here\nmf so either male or female we have\nmissing values and we have a value that\nis irrelevant probably for the\nprediction of something now here we\ndon't have anything to predict because\nwe're not going to do an actual machine\nlearning project i want to explain the\npre-processing part with a pipeline but\nif we have like another feature here\nlike salary or happiness or whatever\nwe might use those values but the name\nis not going to be very relevant\nso for today's pre-processing the job is\ngoing to be the following i'm going to\ndefine this here as marked down we're\ngoing to say\nthe pre-processing\npipeline will be the following\nfirst we want to drop the irrelevant\nname feature\nso drop name feature\nthen what we want to do is we want to\nimpute the ages\nbasically meaning that we want to do\nsomething with the ages now we can just\ndrop this line because we don't know the\nh we can just ignore it or we can impute\nit with the mean or with another\nstrategy we're gonna impute it here\nso impute ages\nthen we're gonna um\nturn\ngender into\nuh binary slash numeric\nso zero one\num and then we're gonna turn\nor one hot encode\nthe jobs one hot encoding basically\nmeans that we take uh categories and\ninstead of um setting numbers like one\ntwo three or something\nwe create a new column for each job so\nin this case we would have column\nprogrammer writer cook teacher\nand the value is either 0 or 1. why is\nthat more reasonable than\nlabeling them with numbers and coding\nthem with 1 2 3 and 4\nbecause 1 2 3 4 will be interpreted by\nmany models as proximity so one and two\nare closer than one and four in this\ncase it doesn't make sense if programmer\nand cook have one and two and teacher\nhas four the programmer isn't closer to\nthe cook in an on a numerical scale\nthan to the teacher it is basically a\ncategory and not something like cold\nmedium warm hot or something there it\nwould make sense to use numbers in this\ncase it doesn't make sense so we create\num separate columns here\nso this is the pre-processing pipeline\nthis is what we want to do and usually\nwhat you do is you do it by hand right\nif you don't use pipelines so what you\ndo for example is you say from\nsqlearn.impute\nyou want to import a simple computer\ncome on auto completion there you go\nsimple computer um and from sklearn\ndot pre-processing you want to import\nthe one hot encoder and then you start\nyou know you drop the name feature you\ndo it yourself every time so you\nbasically say okay df equals df drop\nwe want to drop the column name on the\naxis one\nthere you go we drop the name feature\nnow i can print this here you can see we\ndon't have the name anymore now of\ncourse i cannot run this another time\nbecause then it's going to say\nthere is no column name so we have to\nrun everything here actually\nin order to make this happen\num\n[Music]\nthen the next one was impute the ages\nimpute the ages is quite simple we\ncreate an imputer\nsimple computer the strategy is going to\nbe\nthe mean strategy so basically taking\nthe mean of the other ages to basically\nignore\nignore it on a larger scale here to get\nlike the center value it doesn't make\nsense every time in this case it might\nmake sense might not\ndepending on how important dh is for the\nprediction\nand then we're going to say dfh is\nessentially just computer.fit\ntransform\n[Music]\ndata frame\nh like that now i need to run this again\nbecause i deleted the name and now if we\nlook at the data frame we have the h\nimputed so before we had here a nan and\nnow we have a 27.5 because that's the\nmean\nso this is imputed now\nnext one was uh turn\ngender into a numeric feature so numeric\ngender\nand for that we define a dictionary\nwhich basically says okay m will be\ntranslated to zero f will be translated\nto one\nand then\num the gender actually we can do it like\nthat to be consistent here\nis gonna be and then list comprehension\ngender dictionary g for g in\ndf\ngender now of course i need to rerun\nthis\nthere you go and now we have zeros and\nones here instead of m and f\nand last but at least one one hot\nencoded jobs this is gonna be not really\ncomplicated but we're gonna need a\ncouple of more\nlines of code so we're going to say\nfirst of all the encoder is going to be\nthe one hot encoder\nand then we're going to say okay the\nmatrix that we want to use here is going\nto be encoder\nfit transform\ni'm not even sure if that's the best way\nto do it this is just how i did it in\nthe titanic tutorial for example\nmaybe there is a more clean way to do it\nbut what i do is i create a matrix\nby taking the jobs and then turning it\nto array and then i basically take this\nmatrix put it into the data frame and\nthen add the columns manually by saying\ncolumn names\num\nequals programmer by the way this only\nmakes sense of course if we're not going\nto add more categories so in this case\nit might not make a lot of sense because\nthe next job might be\nuh construction worker right and then we\ndon't have the category and we mess\nthings up so job may not be the best\nexample we're gonna stick with it here\nfor the tutorial but maybe something\nlike uh roll in\nin a school for example if we're if we\nhave teachers or um staff in school we\nhave someone who cleans someone who\nteaches someone who is the um\nwhat do you call principal or something\nof the school so that would make more\nsense because we don't add new roles\nthere in this case we can always add new\njobs but since we're doing one hot\nencoding we're gonna stick with the jobs\nthat we have here\num programmer what was the other one\nwriter\ncook\nand teacher\nthose are the column names and now what\nwe do is we say for\ni in range\nlength\nmatrix t\nand by the way this is all just an\nexample you can work with real data sets\nyou can do your own pre-processing so\nthe focus is not on what we're doing\nright now this is just the the example\nwe're gonna talk about pipelines this is\nthe the most important focus here\nso column names\ni equals\nmatrix dot t i\nand then last but not least we drop\nthe\nso df equals we're going to drop the\ndrops column because we now have it\nencoded\naxis equals one now we need to run this\nagain\nand then we should be able to actually\nhave the pre-processed data frame if it\nis also printed there you go\nand this is what we want to end up with\nnow the problem is that if i go ahead\nnow and i copy this here\nand um let's say those are not the same\nvalues here but i have different values\nso it's uh something like let's let's\ncontinue with f we have fiona\num\ngerald\nefgh i don't know\nhans\nwhich is a german name\nuh\ni for\ni don't know a name with i what is\nisabella\nuh j for jacob\nthere you go and then we have like\nanother non value and then we have here\nfm\nagain fm okay there you go and then we\nhave different jobs like writer\nprogrammer\nprogrammer\nprogrammer\nand teacher if we have this data now and\nwant to do the same thing we want to get\nit in that format we would have to\nrepeat that code and of course you could\nsay okay just put it in a function and\nyes you can do that you can just make a\nfunction that does that but it's more\nprofessional to use pipelines because\nthen we have\none element passing to the next element\nso one one part of the pipeline feeds\nits output into the next pipeline um\ncomponent and then this component feeds\nit output to the next one and so on\nso\nwe can either run the full code or we\ncan use pipelines which is what we're\ngoing to do and for that we're just\ngoing to ignore this down here we're\ngoing to use that in the end to show how\npipelines work we're going to start by\ndefining estimators because in a\npipeline we have estimators an estimator\nis something that has the functions fit\ntransform fit transform\nso\nessentially a classifier is an estimator\nso when i say k-nearest nervous\nclassifier i can fit it i can transform\ni can fit transform i can also predict\nand so on\nand in a pipeline we have estimators in\norder to create an estimator we need to\nextend from the base estimator class we\nneed to create a new class and we need\nto have the functions fit and transform\nso we're going to say from\nsqlearn.base we're going to import the\nbase estimator and transform a mix in\ntransformer mixing basically just means\nthat when we define fit and transform\nit's automatically going to create fit\ntransform you don't have to specify it\nmanually\nand we're going to now create a class\nthe first thing we did was drop name\nfeature\nnow let's\njust for the sake of demonstration\nhere we're going to call this class name\ndropper just to see how it works we\nextend from base estimator we have\ntransformer mix in here as well as um as\nthe parent\nclass and now we just define the\nfunctions fit\nfit takes self x and y which is none by\ndefault\nas parameters and all we need to do here\nis return self nothing fancy we're not\ngoing to use fit here we're just going\nto return self just so we have have it\ndefined and the whole logic is going to\nbe in the transform function and the\ntransform function\ntransform\nfunction takes self and x as an input\nhere and in this case all we want to do\nis we want to say okay instead of\nreturning x and x in this case keep in\nmind is a data frame usually these\nestimators take numpy arrays when you\nuse them from sklearn hours here takes\npandas data frames so what we can do\nhere is we can treat x as the data frame\nx is essentially the same thing as df\nhere so we just return x dot drop\nand we drop\nthe name column\naxis equals one\nso this already is an estimator that we\ncan use and i think i can show you here\nhow it works\nso let's actually go ahead and turn this\ninto df2\ndf2 is going to be pd\ndata frame\ndata\nlike that and now df2 looks like that\nand what i can do now is i can say\ndropper equals namedropper\nand i can say\ndropper.fit transform\ndf2\nand now you can already see that the\nname is gone so this is what the fit\ntransform did\nand we're gonna do now different\nestimators for the different purposes\nwe're gonna have an estimator for\nfor uh what was it\ncomputing gauges we're to have one for\nmaking the gender numeric and one for\none hot encoding the drops\nand\nthe next thing that we're going to do\nhere is\ngoing to be the h impeder\nh computer is gonna also be a base\nestimator transformer mix in\nbasically we can copy this here\nthere you go\nfit function stays the same and here in\nthe transform function what we do is\nwhat we did above we say computer equals\nsimple computer\nstrategy is going to be mean and then\ncomputer\num actually how did we do that we said\ndf in this case x not the f\nh equals\nimputer dot fit transform\ndf\nand i i'm not pf sorry x\nand here we\nset h into square brackets like that\nnow you might say can we not use\ncomputer directly as\npart of the pipeline since it is already\nan estimator since it has already the\nfit transform function we can do it but\ncomputer works with um\narrays like not with uh not with data\nframes and because of that we don't do\nthat here we have one layer of\nabstraction above that and here we just\nreturn x\nas a result\nand then the next one is the\nfeature encoder we're going to combine\nthe rest into one\nestimator\nand\nbasically you can copy this again here\nand we can now actually use the logic\nfrom above so let's just copy this\ndelete\nthat paste this here\nand now this stays the same now\neverywhere we have df obviously we're\ngoing to change it to x because we're\nnot working with df but with x\nso here again we change\num f and m to one and zero\nand here we basically just do one hot\nencoding again change it to x here\ncolumn names are the same here we change\nthis to x\nchange this to x and instead of\nassigning it to df we just return it\nso again this feature encoder takes the\ndata frame we change the gender column\nto zeros and once we encode the job to\nzero and one features to binary features\nand then we drop the drop\ncolumn and that's basically it\nnow what we can do here manually is\nsince we have the data frame two let me\njust show it again df2 this is what it\nlooks like we can go ahead now and say\nokay\num create a name dropper so let's say\ndropper equals name dropper\nuh then the second one was imp equals h\ncomputer\nand then um\nink it's gonna be the\nfeature encoder\nand now what we can do is we can say\njust dropper that fit transform\nuh df2 and we get that now i can feed\nthat into the computer dot fit transform\nfunction to\nbuild on top of that result now you can\nsee that we imputed the h and then i can\nsay inc dot fit transform based on that\nresult\nand then it results in that so this\nworks but this is manually and now we\ncan use pipelines to make this even more\nconvenient by saying from sklearn dot\npipeline\nimport pipeline\nand then um\nyou're gonna say pipe for example equals\npipeline and here we pass a list of\ntuples and the first one\nwe always have to specify is the first\nelement in the tuple a name so for\nexample dropper doesn't really matter\nwhat you call it and then the actual\nthing name dropper\nand of course if you have hyper\nparameters that you can pass here in\nyour model if they're in your estimators\nif they're more complex you can do that\num in our case we have very simple\nestimators here\nthen we have computer and this is going\nto be the h computer\nand then we have\nencoder\nwhich is going to be the feature encoder\nso this is the pipeline now one\nestimator\nfeeds the result into the next one into\nthe next one and then the pipeline takes\nsome input and outputs uh the final\nresult so again if we go ahead and we\nprint df2\nthis is what it looks like and if i now\ngo ahead and i say pipe fib transform\nfit transform\n[Music]\ndf2\nyou can see that we immediately get the\nresults so we just have to use that\npipeline this pre-processing pipeline\nand this makes a lot of sense if we use\nit over and over again of course if you\njust have to do it once doesn't make a\nsense to use a pipeline for it just do\nthe steps and you're done however if you\nhave to do it over and over again\nbecause you do it first with the\ntraining data then with the validation\ndata then with the testing data and then\nin the future you might get\nnew data sets in a regular time interval\nand then you want to do it all the time\nyou don't want to do the steps all the\ntime a function is not professional you\njust use the pipeline you have one\none full piece of pre-processing\npipeline that you just feed some some\ndata in and on the other side you get\nthe complete pre-pro completely\npre-processed data set for the neural\nnetwork so you just take the raw data\nfeed it into the pipeline you get the\npre-processed data out on the other side\nand you feed it directly into the neural\nnetwork or whatever you want to use and\nthis is how you use professional\npipelines from sqlearn in python so\nthat's it for today's video hope you\nenjoyed i hope you learned something if\nso let me know by hitting the like\nbutton and leaving a comment in the\ncomment section down below and of course\ndon't forget to subscribe to this\nchannel and hit the notification bell to\nnot miss a single future video for free\nother than that thank you much for\nwatching see you next video and bye\n[Music]\nyou\n",
  "words": [
    "music",
    "going",
    "guys",
    "welcome",
    "back",
    "today",
    "video",
    "going",
    "learn",
    "use",
    "sk",
    "learns",
    "pipelines",
    "make",
    "machine",
    "learning",
    "processing",
    "professional",
    "let",
    "get",
    "right",
    "right",
    "today",
    "video",
    "going",
    "use",
    "jupyter",
    "notebook",
    "order",
    "explain",
    "everything",
    "think",
    "convenient",
    "still",
    "follow",
    "along",
    "pycharm",
    "idle",
    "vs",
    "code",
    "whatever",
    "want",
    "use",
    "tutorial",
    "maker",
    "jupyter",
    "notebook",
    "convenient",
    "working",
    "data",
    "science",
    "machine",
    "learning",
    "stuff",
    "run",
    "individual",
    "cells",
    "change",
    "individual",
    "parts",
    "rerun",
    "instead",
    "running",
    "whole",
    "block",
    "code",
    "every",
    "time",
    "something",
    "going",
    "use",
    "jupyter",
    "notebook",
    "order",
    "explain",
    "pipelines",
    "use",
    "use",
    "going",
    "look",
    "simple",
    "example",
    "today",
    "going",
    "need",
    "usual",
    "python",
    "data",
    "science",
    "stack",
    "like",
    "pandas",
    "numpy",
    "matplotlib",
    "maybe",
    "mean",
    "going",
    "use",
    "sklearn",
    "important",
    "course",
    "pipelines",
    "come",
    "sklearn",
    "going",
    "start",
    "basic",
    "example",
    "going",
    "import",
    "pandas",
    "pd",
    "going",
    "create",
    "artificial",
    "data",
    "data",
    "going",
    "start",
    "dictionary",
    "going",
    "say",
    "name",
    "column",
    "name",
    "anna",
    "bob",
    "charlie",
    "diana",
    "eric",
    "whatever",
    "age",
    "gon",
    "na",
    "20",
    "34",
    "23",
    "78",
    "33",
    "gender",
    "gon",
    "na",
    "f",
    "female",
    "male",
    "f",
    "fm",
    "f",
    "music",
    "also",
    "job",
    "job",
    "let",
    "say",
    "uh",
    "three",
    "jobs",
    "four",
    "jobs",
    "choose",
    "let",
    "say",
    "programmer",
    "worker",
    "worker",
    "sorry",
    "writer",
    "cook",
    "another",
    "programmer",
    "um",
    "know",
    "let",
    "say",
    "teacher",
    "something",
    "sample",
    "data",
    "going",
    "use",
    "explain",
    "pipelines",
    "get",
    "data",
    "real",
    "world",
    "sometimes",
    "data",
    "going",
    "missing",
    "example",
    "might",
    "data",
    "might",
    "none",
    "h",
    "need",
    "find",
    "solution",
    "first",
    "let",
    "go",
    "ahead",
    "turn",
    "data",
    "frame",
    "df",
    "going",
    "pandas",
    "data",
    "frame",
    "based",
    "data",
    "look",
    "data",
    "frame",
    "small",
    "data",
    "set",
    "artificial",
    "real",
    "also",
    "everything",
    "learned",
    "today",
    "real",
    "data",
    "sets",
    "fact",
    "tutorial",
    "use",
    "predict",
    "titanic",
    "survivors",
    "using",
    "titanic",
    "data",
    "set",
    "use",
    "actually",
    "pipelines",
    "lot",
    "want",
    "practical",
    "example",
    "might",
    "want",
    "look",
    "video",
    "today",
    "going",
    "talk",
    "basics",
    "small",
    "data",
    "set",
    "looks",
    "like",
    "example",
    "missing",
    "values",
    "values",
    "feed",
    "neural",
    "network",
    "classification",
    "right",
    "go",
    "ahead",
    "say",
    "programmer",
    "something",
    "feed",
    "neural",
    "network",
    "mean",
    "character",
    "character",
    "ascii",
    "codes",
    "want",
    "categories",
    "also",
    "categories",
    "binary",
    "value",
    "mf",
    "either",
    "male",
    "female",
    "missing",
    "values",
    "value",
    "irrelevant",
    "probably",
    "prediction",
    "something",
    "anything",
    "predict",
    "going",
    "actual",
    "machine",
    "learning",
    "project",
    "want",
    "explain",
    "part",
    "pipeline",
    "like",
    "another",
    "feature",
    "like",
    "salary",
    "happiness",
    "whatever",
    "might",
    "use",
    "values",
    "name",
    "going",
    "relevant",
    "today",
    "job",
    "going",
    "following",
    "going",
    "define",
    "marked",
    "going",
    "say",
    "pipeline",
    "following",
    "first",
    "want",
    "drop",
    "irrelevant",
    "name",
    "feature",
    "drop",
    "name",
    "feature",
    "want",
    "want",
    "impute",
    "ages",
    "basically",
    "meaning",
    "want",
    "something",
    "ages",
    "drop",
    "line",
    "know",
    "h",
    "ignore",
    "impute",
    "mean",
    "another",
    "strategy",
    "gon",
    "na",
    "impute",
    "impute",
    "ages",
    "gon",
    "na",
    "um",
    "turn",
    "gender",
    "uh",
    "binary",
    "slash",
    "numeric",
    "zero",
    "one",
    "um",
    "gon",
    "na",
    "turn",
    "one",
    "hot",
    "encode",
    "jobs",
    "one",
    "hot",
    "encoding",
    "basically",
    "means",
    "take",
    "uh",
    "categories",
    "instead",
    "um",
    "setting",
    "numbers",
    "like",
    "one",
    "two",
    "three",
    "something",
    "create",
    "new",
    "column",
    "job",
    "case",
    "would",
    "column",
    "programmer",
    "writer",
    "cook",
    "teacher",
    "value",
    "either",
    "0",
    "reasonable",
    "labeling",
    "numbers",
    "coding",
    "1",
    "2",
    "3",
    "4",
    "1",
    "2",
    "3",
    "4",
    "interpreted",
    "many",
    "models",
    "proximity",
    "one",
    "two",
    "closer",
    "one",
    "four",
    "case",
    "make",
    "sense",
    "programmer",
    "cook",
    "one",
    "two",
    "teacher",
    "four",
    "programmer",
    "closer",
    "cook",
    "numerical",
    "scale",
    "teacher",
    "basically",
    "category",
    "something",
    "like",
    "cold",
    "medium",
    "warm",
    "hot",
    "something",
    "would",
    "make",
    "sense",
    "use",
    "numbers",
    "case",
    "make",
    "sense",
    "create",
    "um",
    "separate",
    "columns",
    "pipeline",
    "want",
    "usually",
    "hand",
    "right",
    "use",
    "pipelines",
    "example",
    "say",
    "want",
    "import",
    "simple",
    "computer",
    "come",
    "auto",
    "completion",
    "go",
    "simple",
    "computer",
    "um",
    "sklearn",
    "dot",
    "want",
    "import",
    "one",
    "hot",
    "encoder",
    "start",
    "know",
    "drop",
    "name",
    "feature",
    "every",
    "time",
    "basically",
    "say",
    "okay",
    "df",
    "equals",
    "df",
    "drop",
    "want",
    "drop",
    "column",
    "name",
    "axis",
    "one",
    "go",
    "drop",
    "name",
    "feature",
    "print",
    "see",
    "name",
    "anymore",
    "course",
    "run",
    "another",
    "time",
    "going",
    "say",
    "column",
    "name",
    "run",
    "everything",
    "actually",
    "order",
    "make",
    "happen",
    "um",
    "music",
    "next",
    "one",
    "impute",
    "ages",
    "impute",
    "ages",
    "quite",
    "simple",
    "create",
    "imputer",
    "simple",
    "computer",
    "strategy",
    "going",
    "mean",
    "strategy",
    "basically",
    "taking",
    "mean",
    "ages",
    "basically",
    "ignore",
    "ignore",
    "larger",
    "scale",
    "get",
    "like",
    "center",
    "value",
    "make",
    "sense",
    "every",
    "time",
    "case",
    "might",
    "make",
    "sense",
    "might",
    "depending",
    "important",
    "dh",
    "prediction",
    "going",
    "say",
    "dfh",
    "essentially",
    "transform",
    "music",
    "data",
    "frame",
    "h",
    "like",
    "need",
    "run",
    "deleted",
    "name",
    "look",
    "data",
    "frame",
    "h",
    "imputed",
    "nan",
    "mean",
    "imputed",
    "next",
    "one",
    "uh",
    "turn",
    "gender",
    "numeric",
    "feature",
    "numeric",
    "gender",
    "define",
    "dictionary",
    "basically",
    "says",
    "okay",
    "translated",
    "zero",
    "f",
    "translated",
    "one",
    "um",
    "gender",
    "actually",
    "like",
    "consistent",
    "gon",
    "na",
    "list",
    "comprehension",
    "gender",
    "dictionary",
    "g",
    "g",
    "df",
    "gender",
    "course",
    "need",
    "rerun",
    "go",
    "zeros",
    "ones",
    "instead",
    "f",
    "last",
    "least",
    "one",
    "one",
    "hot",
    "encoded",
    "jobs",
    "gon",
    "na",
    "really",
    "complicated",
    "gon",
    "na",
    "need",
    "couple",
    "lines",
    "code",
    "going",
    "say",
    "first",
    "encoder",
    "going",
    "one",
    "hot",
    "encoder",
    "going",
    "say",
    "okay",
    "matrix",
    "want",
    "use",
    "going",
    "encoder",
    "fit",
    "transform",
    "even",
    "sure",
    "best",
    "way",
    "titanic",
    "tutorial",
    "example",
    "maybe",
    "clean",
    "way",
    "create",
    "matrix",
    "taking",
    "jobs",
    "turning",
    "array",
    "basically",
    "take",
    "matrix",
    "put",
    "data",
    "frame",
    "add",
    "columns",
    "manually",
    "saying",
    "column",
    "names",
    "um",
    "equals",
    "programmer",
    "way",
    "makes",
    "sense",
    "course",
    "going",
    "add",
    "categories",
    "case",
    "might",
    "make",
    "lot",
    "sense",
    "next",
    "job",
    "might",
    "uh",
    "construction",
    "worker",
    "right",
    "category",
    "mess",
    "things",
    "job",
    "may",
    "best",
    "example",
    "gon",
    "na",
    "stick",
    "tutorial",
    "maybe",
    "something",
    "like",
    "uh",
    "roll",
    "school",
    "example",
    "teachers",
    "um",
    "staff",
    "school",
    "someone",
    "cleans",
    "someone",
    "teaches",
    "someone",
    "um",
    "call",
    "principal",
    "something",
    "school",
    "would",
    "make",
    "sense",
    "add",
    "new",
    "roles",
    "case",
    "always",
    "add",
    "new",
    "jobs",
    "since",
    "one",
    "hot",
    "encoding",
    "gon",
    "na",
    "stick",
    "jobs",
    "um",
    "programmer",
    "one",
    "writer",
    "cook",
    "teacher",
    "column",
    "names",
    "say",
    "range",
    "length",
    "matrix",
    "way",
    "example",
    "work",
    "real",
    "data",
    "sets",
    "focus",
    "right",
    "example",
    "gon",
    "na",
    "talk",
    "pipelines",
    "important",
    "focus",
    "column",
    "names",
    "equals",
    "matrix",
    "dot",
    "last",
    "least",
    "drop",
    "df",
    "equals",
    "going",
    "drop",
    "drops",
    "column",
    "encoded",
    "axis",
    "equals",
    "one",
    "need",
    "run",
    "able",
    "actually",
    "data",
    "frame",
    "also",
    "printed",
    "go",
    "want",
    "end",
    "problem",
    "go",
    "ahead",
    "copy",
    "um",
    "let",
    "say",
    "values",
    "different",
    "values",
    "uh",
    "something",
    "like",
    "let",
    "let",
    "continue",
    "f",
    "fiona",
    "um",
    "gerald",
    "efgh",
    "know",
    "hans",
    "german",
    "name",
    "uh",
    "know",
    "name",
    "isabella",
    "uh",
    "j",
    "jacob",
    "go",
    "like",
    "another",
    "non",
    "value",
    "fm",
    "fm",
    "okay",
    "go",
    "different",
    "jobs",
    "like",
    "writer",
    "programmer",
    "programmer",
    "programmer",
    "teacher",
    "data",
    "want",
    "thing",
    "want",
    "get",
    "format",
    "would",
    "repeat",
    "code",
    "course",
    "could",
    "say",
    "okay",
    "put",
    "function",
    "yes",
    "make",
    "function",
    "professional",
    "use",
    "pipelines",
    "one",
    "element",
    "passing",
    "next",
    "element",
    "one",
    "one",
    "part",
    "pipeline",
    "feeds",
    "output",
    "next",
    "pipeline",
    "um",
    "component",
    "component",
    "feeds",
    "output",
    "next",
    "one",
    "either",
    "run",
    "full",
    "code",
    "use",
    "pipelines",
    "going",
    "going",
    "ignore",
    "going",
    "use",
    "end",
    "show",
    "pipelines",
    "work",
    "going",
    "start",
    "defining",
    "estimators",
    "pipeline",
    "estimators",
    "estimator",
    "something",
    "functions",
    "fit",
    "transform",
    "fit",
    "transform",
    "essentially",
    "classifier",
    "estimator",
    "say",
    "nervous",
    "classifier",
    "fit",
    "transform",
    "fit",
    "transform",
    "also",
    "predict",
    "pipeline",
    "estimators",
    "order",
    "create",
    "estimator",
    "need",
    "extend",
    "base",
    "estimator",
    "class",
    "need",
    "create",
    "new",
    "class",
    "need",
    "functions",
    "fit",
    "transform",
    "going",
    "say",
    "going",
    "import",
    "base",
    "estimator",
    "transform",
    "mix",
    "transformer",
    "mixing",
    "basically",
    "means",
    "define",
    "fit",
    "transform",
    "automatically",
    "going",
    "create",
    "fit",
    "transform",
    "specify",
    "manually",
    "going",
    "create",
    "class",
    "first",
    "thing",
    "drop",
    "name",
    "feature",
    "let",
    "sake",
    "demonstration",
    "going",
    "call",
    "class",
    "name",
    "dropper",
    "see",
    "works",
    "extend",
    "base",
    "estimator",
    "transformer",
    "mix",
    "well",
    "um",
    "parent",
    "class",
    "define",
    "functions",
    "fit",
    "fit",
    "takes",
    "self",
    "x",
    "none",
    "default",
    "parameters",
    "need",
    "return",
    "self",
    "nothing",
    "fancy",
    "going",
    "use",
    "fit",
    "going",
    "return",
    "self",
    "defined",
    "whole",
    "logic",
    "going",
    "transform",
    "function",
    "transform",
    "function",
    "transform",
    "function",
    "takes",
    "self",
    "x",
    "input",
    "case",
    "want",
    "want",
    "say",
    "okay",
    "instead",
    "returning",
    "x",
    "x",
    "case",
    "keep",
    "mind",
    "data",
    "frame",
    "usually",
    "estimators",
    "take",
    "numpy",
    "arrays",
    "use",
    "sklearn",
    "hours",
    "takes",
    "pandas",
    "data",
    "frames",
    "treat",
    "x",
    "data",
    "frame",
    "x",
    "essentially",
    "thing",
    "df",
    "return",
    "x",
    "dot",
    "drop",
    "drop",
    "name",
    "column",
    "axis",
    "equals",
    "one",
    "already",
    "estimator",
    "use",
    "think",
    "show",
    "works",
    "let",
    "actually",
    "go",
    "ahead",
    "turn",
    "df2",
    "df2",
    "going",
    "pd",
    "data",
    "frame",
    "data",
    "like",
    "df2",
    "looks",
    "like",
    "say",
    "dropper",
    "equals",
    "namedropper",
    "say",
    "transform",
    "df2",
    "already",
    "see",
    "name",
    "gone",
    "fit",
    "transform",
    "gon",
    "na",
    "different",
    "estimators",
    "different",
    "purposes",
    "gon",
    "na",
    "estimator",
    "uh",
    "computing",
    "gauges",
    "one",
    "making",
    "gender",
    "numeric",
    "one",
    "one",
    "hot",
    "encoding",
    "drops",
    "next",
    "thing",
    "going",
    "going",
    "h",
    "impeder",
    "h",
    "computer",
    "gon",
    "na",
    "also",
    "base",
    "estimator",
    "transformer",
    "mix",
    "basically",
    "copy",
    "go",
    "fit",
    "function",
    "stays",
    "transform",
    "function",
    "say",
    "computer",
    "equals",
    "simple",
    "computer",
    "strategy",
    "going",
    "mean",
    "computer",
    "um",
    "actually",
    "said",
    "df",
    "case",
    "x",
    "f",
    "h",
    "equals",
    "imputer",
    "dot",
    "fit",
    "transform",
    "df",
    "pf",
    "sorry",
    "x",
    "set",
    "h",
    "square",
    "brackets",
    "like",
    "might",
    "say",
    "use",
    "computer",
    "directly",
    "part",
    "pipeline",
    "since",
    "already",
    "estimator",
    "since",
    "already",
    "fit",
    "transform",
    "function",
    "computer",
    "works",
    "um",
    "arrays",
    "like",
    "uh",
    "data",
    "frames",
    "one",
    "layer",
    "abstraction",
    "return",
    "x",
    "result",
    "next",
    "one",
    "feature",
    "encoder",
    "going",
    "combine",
    "rest",
    "one",
    "estimator",
    "basically",
    "copy",
    "actually",
    "use",
    "logic",
    "let",
    "copy",
    "delete",
    "paste",
    "stays",
    "everywhere",
    "df",
    "obviously",
    "going",
    "change",
    "x",
    "working",
    "df",
    "x",
    "change",
    "um",
    "f",
    "one",
    "zero",
    "basically",
    "one",
    "hot",
    "encoding",
    "change",
    "x",
    "column",
    "names",
    "change",
    "x",
    "change",
    "x",
    "instead",
    "assigning",
    "df",
    "return",
    "feature",
    "encoder",
    "takes",
    "data",
    "frame",
    "change",
    "gender",
    "column",
    "zeros",
    "encode",
    "job",
    "zero",
    "one",
    "features",
    "binary",
    "features",
    "drop",
    "drop",
    "column",
    "basically",
    "manually",
    "since",
    "data",
    "frame",
    "two",
    "let",
    "show",
    "df2",
    "looks",
    "like",
    "go",
    "ahead",
    "say",
    "okay",
    "um",
    "create",
    "name",
    "dropper",
    "let",
    "say",
    "dropper",
    "equals",
    "name",
    "dropper",
    "uh",
    "second",
    "one",
    "imp",
    "equals",
    "h",
    "computer",
    "um",
    "ink",
    "gon",
    "na",
    "feature",
    "encoder",
    "say",
    "dropper",
    "fit",
    "transform",
    "uh",
    "df2",
    "get",
    "feed",
    "computer",
    "dot",
    "fit",
    "transform",
    "function",
    "build",
    "top",
    "result",
    "see",
    "imputed",
    "h",
    "say",
    "inc",
    "dot",
    "fit",
    "transform",
    "based",
    "result",
    "results",
    "works",
    "manually",
    "use",
    "pipelines",
    "make",
    "even",
    "convenient",
    "saying",
    "sklearn",
    "dot",
    "pipeline",
    "import",
    "pipeline",
    "um",
    "gon",
    "na",
    "say",
    "pipe",
    "example",
    "equals",
    "pipeline",
    "pass",
    "list",
    "tuples",
    "first",
    "one",
    "always",
    "specify",
    "first",
    "element",
    "tuple",
    "name",
    "example",
    "dropper",
    "really",
    "matter",
    "call",
    "actual",
    "thing",
    "name",
    "dropper",
    "course",
    "hyper",
    "parameters",
    "pass",
    "model",
    "estimators",
    "complex",
    "um",
    "case",
    "simple",
    "estimators",
    "computer",
    "going",
    "h",
    "computer",
    "encoder",
    "going",
    "feature",
    "encoder",
    "pipeline",
    "one",
    "estimator",
    "feeds",
    "result",
    "next",
    "one",
    "next",
    "one",
    "pipeline",
    "takes",
    "input",
    "outputs",
    "uh",
    "final",
    "result",
    "go",
    "ahead",
    "print",
    "df2",
    "looks",
    "like",
    "go",
    "ahead",
    "say",
    "pipe",
    "fib",
    "transform",
    "fit",
    "transform",
    "music",
    "df2",
    "see",
    "immediately",
    "get",
    "results",
    "use",
    "pipeline",
    "pipeline",
    "makes",
    "lot",
    "sense",
    "use",
    "course",
    "make",
    "sense",
    "use",
    "pipeline",
    "steps",
    "done",
    "however",
    "first",
    "training",
    "data",
    "validation",
    "data",
    "testing",
    "data",
    "future",
    "might",
    "get",
    "new",
    "data",
    "sets",
    "regular",
    "time",
    "interval",
    "want",
    "time",
    "want",
    "steps",
    "time",
    "function",
    "professional",
    "use",
    "pipeline",
    "one",
    "one",
    "full",
    "piece",
    "pipeline",
    "feed",
    "data",
    "side",
    "get",
    "complete",
    "completely",
    "data",
    "set",
    "neural",
    "network",
    "take",
    "raw",
    "data",
    "feed",
    "pipeline",
    "get",
    "data",
    "side",
    "feed",
    "directly",
    "neural",
    "network",
    "whatever",
    "want",
    "use",
    "use",
    "professional",
    "pipelines",
    "sqlearn",
    "python",
    "today",
    "video",
    "hope",
    "enjoyed",
    "hope",
    "learned",
    "something",
    "let",
    "know",
    "hitting",
    "like",
    "button",
    "leaving",
    "comment",
    "comment",
    "section",
    "course",
    "forget",
    "subscribe",
    "channel",
    "hit",
    "notification",
    "bell",
    "miss",
    "single",
    "future",
    "video",
    "free",
    "thank",
    "much",
    "watching",
    "see",
    "next",
    "video",
    "bye",
    "music"
  ],
  "keywords": [
    "music",
    "going",
    "today",
    "video",
    "use",
    "pipelines",
    "make",
    "professional",
    "let",
    "get",
    "right",
    "order",
    "explain",
    "code",
    "whatever",
    "want",
    "tutorial",
    "data",
    "run",
    "change",
    "instead",
    "time",
    "something",
    "look",
    "simple",
    "example",
    "need",
    "like",
    "pandas",
    "mean",
    "sklearn",
    "course",
    "start",
    "import",
    "create",
    "say",
    "name",
    "column",
    "gon",
    "na",
    "gender",
    "f",
    "also",
    "job",
    "uh",
    "jobs",
    "programmer",
    "writer",
    "cook",
    "another",
    "um",
    "know",
    "teacher",
    "real",
    "might",
    "h",
    "first",
    "go",
    "ahead",
    "turn",
    "frame",
    "df",
    "set",
    "actually",
    "looks",
    "values",
    "feed",
    "neural",
    "network",
    "categories",
    "value",
    "pipeline",
    "feature",
    "define",
    "drop",
    "impute",
    "ages",
    "basically",
    "ignore",
    "strategy",
    "numeric",
    "zero",
    "one",
    "hot",
    "encoding",
    "take",
    "two",
    "new",
    "case",
    "would",
    "sense",
    "computer",
    "dot",
    "encoder",
    "okay",
    "equals",
    "see",
    "next",
    "transform",
    "matrix",
    "fit",
    "way",
    "add",
    "manually",
    "names",
    "since",
    "copy",
    "different",
    "thing",
    "function",
    "estimators",
    "estimator",
    "base",
    "class",
    "dropper",
    "works",
    "takes",
    "self",
    "x",
    "return",
    "already",
    "df2",
    "result"
  ]
}