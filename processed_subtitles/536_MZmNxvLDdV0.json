{
  "text": "hi everyone\nwelcome to this video tutorial by simply\nlearn in this video we will learn about\nan important popular deep learning\nneural network called generative\nadversarial networks\nyan lacoon one of the pioneers in the\nfield of machine learning and deep\nlearning described it as the most\ninteresting idea in the last 10 years in\nmachine learning in this video you will\nlearn about what are generative\nadversarial networks and look in brief\nat generator and discriminator\nthen we'll understand how gans work and\nthe different types of gans finally\nwe'll look at some of the applications\nof gans so let's begin\nso what are generative adversarial\nnetworks\ngenerative adversarial networks or gans\nintroduced in 2014 by ian j good fellow\nand co-authors became very popular in\nthe field of machine learning\ngan is an unsupervised learning task in\nmachine learning it consists of two\nmodels that automatically discover and\nlearn the patterns in input data\nthe two models called generator and\ndiscriminator compete with each other to\nanalyze capture and copy the variations\nwithin a data set\ngans can be used to generate new\nexamples that possibly could have been\ndrawn from the original data set\nin the image below you can see that\nthere is a database that has real\nhundred rupee nodes the generator which\nis basically a neural network generates\nfake hundred rupees notes the\ndiscriminator network will identify if\nthe nodes are real or fake let us now\nunderstand in brief\nabout what is a generator\na generator in gans is a neural network\nthat creates fake data to be trained on\nthe discriminator\nit learns to generate plausible data the\ngenerated instances become negative\ntraining examples for the discriminator\nit takes a fixed length random vector\ncarrying noise as input and generates a\nsample now the main aim of the generator\nis to make the discriminator classify\nits output as real\nthe portion of the gan that trains a\ngenerator includes\na noisy input vector\nthe generator network which transforms\nthe random input into a data instance\na discriminator network which classifies\nthe generated data and a generator loss\nwhich penalizes the generator for\nfailing to dalt the discriminator\nthe back propagation method is used to\nadjust each weight in the right\ndirection by calculating the weight's\nimpact on the output\nthe back propagation method is used to\nobtain gradients and these gradients can\nhelp change the generator weights now\nlet us understand in brief what a\ndiscriminator is a discriminator is a\nneural network model that identifies\nreal data from the fake data generated\nby the generator the discriminator's\ntraining data\ncomes from two sources\nthe real data instances such as real\npictures of birds humans currency notes\netc are used by the discriminator as\npositive samples during the training\nthe fake data instances created by the\ngenerator are used as negative examples\nduring the training process while\ntraining the discriminator it connects\nwith two loss functions during\ndiscriminator training the discriminator\nignores the generator loss and just uses\nthe discriminator laws\nin the process of training the\ndiscriminator the discriminator\nclassifies both real data and fake data\nfrom the generator the discriminator\nloss penalizes the discriminator for\nmisclassifying a real data instance as\nfake or a fake data instance as real now\nmoving ahead\nlet's understand how gans work now gans\nconsists of two networks a generator\nwhich is represented as g of x and a\ndiscriminator which is represented as d\nof x they both play an adversarial game\nwhere the generator tries to fool the\ndiscriminator by generating data similar\nto those in the training set\nthe discriminator tries not to be fooled\nby identifying fake data from the real\ndata\nthey both work simultaneously to learn\nand train complex data like audio video\nor image files now you are aware that\ngans consists of two networks at\ngenerator g of x and discriminator d of\nx now the generator network takes a\nsample and generates a fake sample of\ndata the generator is trained to\nincrease the probability of the\ndiscriminator network to make mistakes\non the other hand\nthe discriminator network decides\nwhether the data is generated or taken\nfrom the real sample using a binary\nclassification problem with the help of\na sigmoid function that gives the output\nin the range 0 and 1.\nhere is an example of a generative\nadversarial network trying to identify\nif the 100 rupee nodes are real or fake\nso first a noise vector or the input\nvector is fed to the generator network\nthe generator creates fake hundred rupee\nnodes\nthe real images of hundred rupee notes\nstored in a database are passed to the\ndiscriminator along with the fake nodes\nthe discriminator then identifies the\nnodes and classifies them as real or\nfake we train the model calculate the\nloss function at the end of the\ndiscriminator network and back propagate\nthe loss into both discriminator and\ngenerator now the mathematical equation\nof training\nagain can be represented as you can see\nhere now this is the equation\nand these are the parameters here g\nrepresents generator\nd represents the discriminator\nnow p data of x is the probability\ndistribution of real data\np of z is the distribution of generator\nx is the sample of probability data of x\nz is the sample size from p of z d of x\nis the discriminator network and g of\nsaid\nis the generator network now the\ndiscriminator focuses to maximize the\nobjective function such that d of x is\nclose to 1\nand z of z is close to 0.\nit simply means that the discriminator\nshould identify all the images from the\ntraining set as real that is one\nand all the generated images as fake\nthat is zero the generator wants to\nminimize the objective function such\nthat\nd of z of z is one this means that the\ngenerator tries to generate images that\nare classified as real that is one by\nthe discriminator network next\nlet's see the steps for training a\nneural network so we have to first\ndefine the problem\nand collect the data\nthen we'll choose the architecture of\ngan now depending on your problem choose\nhow your gans should look like\nthen we need to train the discriminator\nin real data now that will help us\npredict them as real for n number of\ntimes next you need to generate fake\ninputs for the generator\nafter that we need to train the\ndiscriminator on fake data to predict\nthe generator data as fake finally train\nthe generator on the output of\ndiscriminator\nwith the discriminator predictions\navailable train the generator to fool\nthe discriminator let us now look at the\ndifferent types of gans so first we have\nvanilla gans\nnow vanilla gans have min max\noptimization formula that we saw earlier\nwhere the discriminator is a binary\nclassifier and is using sigmoid cross\nentropy loss during optimization\nin vanilla gans the generator and the\ndiscriminator are simple multi-layer\nperceptrons the algorithm tries to\noptimize the mathematical equation using\nstochastic gradient descent\nup next we have deep convolutional gans\nor dc gans\nnow dc gans support convolutional neural\nnetworks instead of vanilla neural\nnetworks at both discriminator and\ngenerator they are more stable and\ngenerate higher quality images the\ngenerator is a set of convolutional\nlayers with fractional strided\nconvolutions or transpose convolutions\nso it unsamples the input image at every\nconvolutional layer the discriminator is\na set of convolutional layers with\nstrided convolutions so it down samples\nthe input image at every convolutional\nlayer moving ahead\nthe third type you have is conditional\ngans or sea gans vanilla gans can be\nextended into conditional models by\nusing an extra label information to\ngenerate better results in c gan an\nadditional parameter called y is added\nto the generator for generating the\ncorresponding data\nlabels are fed as input to the\ndiscriminator to help distinguish the\nreal data from fake data generated\nfinally we have super resolution gans\nnow sr gans use deep neural networks\nalong with adversarial neural network to\nproduce higher resolution images super\nresolution gans generate a\nphotorealistic high resolution image\nwhen given a low resolution image let's\nlook at some of the important\napplications of gans\nso with the help of dc gans you can\ntrain images of cartoon characters for\ngenerating faces of anime characters and\npokemon characters as well next\ngans can be used on the images of humans\nto generate realistic faces the faces\nthat you see on your screens have been\ngenerated using gans and do not exist in\nreality third application we have is\ngans can be used to build realistic\nimages from textual descriptions of\nobjects like birds humans and other\nanimals\nwe input a sentence and generate\nmultiple images fitting the description\nhere is an example of a text-to-image\ntranslation using gans for a bird with a\nblack head yellow body and a sort beak\nthe final application we have is\ncreating 3d objects\nso gans can generate 3d models using 2d\npictures of objects from multiple\nperspectives gans are very popular in\nthe gaming industry\ngans can help automate the task of\ncreating 3d characters and backgrounds\nto give them a realistic feel and that\nbrings us to the end of this video on\nwhat are gans we hope this was helpful\nand informative if you liked it then\nplease subscribe to our simply learn\nchannel thank you for watching and keep\nlearning\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos turn it up and get certified\nclick here\n",
  "words": [
    "hi",
    "everyone",
    "welcome",
    "video",
    "tutorial",
    "simply",
    "learn",
    "video",
    "learn",
    "important",
    "popular",
    "deep",
    "learning",
    "neural",
    "network",
    "called",
    "generative",
    "adversarial",
    "networks",
    "yan",
    "lacoon",
    "one",
    "pioneers",
    "field",
    "machine",
    "learning",
    "deep",
    "learning",
    "described",
    "interesting",
    "idea",
    "last",
    "10",
    "years",
    "machine",
    "learning",
    "video",
    "learn",
    "generative",
    "adversarial",
    "networks",
    "look",
    "brief",
    "generator",
    "discriminator",
    "understand",
    "gans",
    "work",
    "different",
    "types",
    "gans",
    "finally",
    "look",
    "applications",
    "gans",
    "let",
    "begin",
    "generative",
    "adversarial",
    "networks",
    "generative",
    "adversarial",
    "networks",
    "gans",
    "introduced",
    "2014",
    "ian",
    "j",
    "good",
    "fellow",
    "became",
    "popular",
    "field",
    "machine",
    "learning",
    "gan",
    "unsupervised",
    "learning",
    "task",
    "machine",
    "learning",
    "consists",
    "two",
    "models",
    "automatically",
    "discover",
    "learn",
    "patterns",
    "input",
    "data",
    "two",
    "models",
    "called",
    "generator",
    "discriminator",
    "compete",
    "analyze",
    "capture",
    "copy",
    "variations",
    "within",
    "data",
    "set",
    "gans",
    "used",
    "generate",
    "new",
    "examples",
    "possibly",
    "could",
    "drawn",
    "original",
    "data",
    "set",
    "image",
    "see",
    "database",
    "real",
    "hundred",
    "rupee",
    "nodes",
    "generator",
    "basically",
    "neural",
    "network",
    "generates",
    "fake",
    "hundred",
    "rupees",
    "notes",
    "discriminator",
    "network",
    "identify",
    "nodes",
    "real",
    "fake",
    "let",
    "us",
    "understand",
    "brief",
    "generator",
    "generator",
    "gans",
    "neural",
    "network",
    "creates",
    "fake",
    "data",
    "trained",
    "discriminator",
    "learns",
    "generate",
    "plausible",
    "data",
    "generated",
    "instances",
    "become",
    "negative",
    "training",
    "examples",
    "discriminator",
    "takes",
    "fixed",
    "length",
    "random",
    "vector",
    "carrying",
    "noise",
    "input",
    "generates",
    "sample",
    "main",
    "aim",
    "generator",
    "make",
    "discriminator",
    "classify",
    "output",
    "real",
    "portion",
    "gan",
    "trains",
    "generator",
    "includes",
    "noisy",
    "input",
    "vector",
    "generator",
    "network",
    "transforms",
    "random",
    "input",
    "data",
    "instance",
    "discriminator",
    "network",
    "classifies",
    "generated",
    "data",
    "generator",
    "loss",
    "penalizes",
    "generator",
    "failing",
    "dalt",
    "discriminator",
    "back",
    "propagation",
    "method",
    "used",
    "adjust",
    "weight",
    "right",
    "direction",
    "calculating",
    "weight",
    "impact",
    "output",
    "back",
    "propagation",
    "method",
    "used",
    "obtain",
    "gradients",
    "gradients",
    "help",
    "change",
    "generator",
    "weights",
    "let",
    "us",
    "understand",
    "brief",
    "discriminator",
    "discriminator",
    "neural",
    "network",
    "model",
    "identifies",
    "real",
    "data",
    "fake",
    "data",
    "generated",
    "generator",
    "discriminator",
    "training",
    "data",
    "comes",
    "two",
    "sources",
    "real",
    "data",
    "instances",
    "real",
    "pictures",
    "birds",
    "humans",
    "currency",
    "notes",
    "etc",
    "used",
    "discriminator",
    "positive",
    "samples",
    "training",
    "fake",
    "data",
    "instances",
    "created",
    "generator",
    "used",
    "negative",
    "examples",
    "training",
    "process",
    "training",
    "discriminator",
    "connects",
    "two",
    "loss",
    "functions",
    "discriminator",
    "training",
    "discriminator",
    "ignores",
    "generator",
    "loss",
    "uses",
    "discriminator",
    "laws",
    "process",
    "training",
    "discriminator",
    "discriminator",
    "classifies",
    "real",
    "data",
    "fake",
    "data",
    "generator",
    "discriminator",
    "loss",
    "penalizes",
    "discriminator",
    "misclassifying",
    "real",
    "data",
    "instance",
    "fake",
    "fake",
    "data",
    "instance",
    "real",
    "moving",
    "ahead",
    "let",
    "understand",
    "gans",
    "work",
    "gans",
    "consists",
    "two",
    "networks",
    "generator",
    "represented",
    "g",
    "x",
    "discriminator",
    "represented",
    "x",
    "play",
    "adversarial",
    "game",
    "generator",
    "tries",
    "fool",
    "discriminator",
    "generating",
    "data",
    "similar",
    "training",
    "set",
    "discriminator",
    "tries",
    "fooled",
    "identifying",
    "fake",
    "data",
    "real",
    "data",
    "work",
    "simultaneously",
    "learn",
    "train",
    "complex",
    "data",
    "like",
    "audio",
    "video",
    "image",
    "files",
    "aware",
    "gans",
    "consists",
    "two",
    "networks",
    "generator",
    "g",
    "x",
    "discriminator",
    "x",
    "generator",
    "network",
    "takes",
    "sample",
    "generates",
    "fake",
    "sample",
    "data",
    "generator",
    "trained",
    "increase",
    "probability",
    "discriminator",
    "network",
    "make",
    "mistakes",
    "hand",
    "discriminator",
    "network",
    "decides",
    "whether",
    "data",
    "generated",
    "taken",
    "real",
    "sample",
    "using",
    "binary",
    "classification",
    "problem",
    "help",
    "sigmoid",
    "function",
    "gives",
    "output",
    "range",
    "0",
    "example",
    "generative",
    "adversarial",
    "network",
    "trying",
    "identify",
    "100",
    "rupee",
    "nodes",
    "real",
    "fake",
    "first",
    "noise",
    "vector",
    "input",
    "vector",
    "fed",
    "generator",
    "network",
    "generator",
    "creates",
    "fake",
    "hundred",
    "rupee",
    "nodes",
    "real",
    "images",
    "hundred",
    "rupee",
    "notes",
    "stored",
    "database",
    "passed",
    "discriminator",
    "along",
    "fake",
    "nodes",
    "discriminator",
    "identifies",
    "nodes",
    "classifies",
    "real",
    "fake",
    "train",
    "model",
    "calculate",
    "loss",
    "function",
    "end",
    "discriminator",
    "network",
    "back",
    "propagate",
    "loss",
    "discriminator",
    "generator",
    "mathematical",
    "equation",
    "training",
    "represented",
    "see",
    "equation",
    "parameters",
    "g",
    "represents",
    "generator",
    "represents",
    "discriminator",
    "p",
    "data",
    "x",
    "probability",
    "distribution",
    "real",
    "data",
    "p",
    "z",
    "distribution",
    "generator",
    "x",
    "sample",
    "probability",
    "data",
    "x",
    "z",
    "sample",
    "size",
    "p",
    "z",
    "x",
    "discriminator",
    "network",
    "g",
    "said",
    "generator",
    "network",
    "discriminator",
    "focuses",
    "maximize",
    "objective",
    "function",
    "x",
    "close",
    "1",
    "z",
    "z",
    "close",
    "simply",
    "means",
    "discriminator",
    "identify",
    "images",
    "training",
    "set",
    "real",
    "one",
    "generated",
    "images",
    "fake",
    "zero",
    "generator",
    "wants",
    "minimize",
    "objective",
    "function",
    "z",
    "z",
    "one",
    "means",
    "generator",
    "tries",
    "generate",
    "images",
    "classified",
    "real",
    "one",
    "discriminator",
    "network",
    "next",
    "let",
    "see",
    "steps",
    "training",
    "neural",
    "network",
    "first",
    "define",
    "problem",
    "collect",
    "data",
    "choose",
    "architecture",
    "gan",
    "depending",
    "problem",
    "choose",
    "gans",
    "look",
    "like",
    "need",
    "train",
    "discriminator",
    "real",
    "data",
    "help",
    "us",
    "predict",
    "real",
    "n",
    "number",
    "times",
    "next",
    "need",
    "generate",
    "fake",
    "inputs",
    "generator",
    "need",
    "train",
    "discriminator",
    "fake",
    "data",
    "predict",
    "generator",
    "data",
    "fake",
    "finally",
    "train",
    "generator",
    "output",
    "discriminator",
    "discriminator",
    "predictions",
    "available",
    "train",
    "generator",
    "fool",
    "discriminator",
    "let",
    "us",
    "look",
    "different",
    "types",
    "gans",
    "first",
    "vanilla",
    "gans",
    "vanilla",
    "gans",
    "min",
    "max",
    "optimization",
    "formula",
    "saw",
    "earlier",
    "discriminator",
    "binary",
    "classifier",
    "using",
    "sigmoid",
    "cross",
    "entropy",
    "loss",
    "optimization",
    "vanilla",
    "gans",
    "generator",
    "discriminator",
    "simple",
    "perceptrons",
    "algorithm",
    "tries",
    "optimize",
    "mathematical",
    "equation",
    "using",
    "stochastic",
    "gradient",
    "descent",
    "next",
    "deep",
    "convolutional",
    "gans",
    "dc",
    "gans",
    "dc",
    "gans",
    "support",
    "convolutional",
    "neural",
    "networks",
    "instead",
    "vanilla",
    "neural",
    "networks",
    "discriminator",
    "generator",
    "stable",
    "generate",
    "higher",
    "quality",
    "images",
    "generator",
    "set",
    "convolutional",
    "layers",
    "fractional",
    "strided",
    "convolutions",
    "transpose",
    "convolutions",
    "unsamples",
    "input",
    "image",
    "every",
    "convolutional",
    "layer",
    "discriminator",
    "set",
    "convolutional",
    "layers",
    "strided",
    "convolutions",
    "samples",
    "input",
    "image",
    "every",
    "convolutional",
    "layer",
    "moving",
    "ahead",
    "third",
    "type",
    "conditional",
    "gans",
    "sea",
    "gans",
    "vanilla",
    "gans",
    "extended",
    "conditional",
    "models",
    "using",
    "extra",
    "label",
    "information",
    "generate",
    "better",
    "results",
    "c",
    "gan",
    "additional",
    "parameter",
    "called",
    "added",
    "generator",
    "generating",
    "corresponding",
    "data",
    "labels",
    "fed",
    "input",
    "discriminator",
    "help",
    "distinguish",
    "real",
    "data",
    "fake",
    "data",
    "generated",
    "finally",
    "super",
    "resolution",
    "gans",
    "sr",
    "gans",
    "use",
    "deep",
    "neural",
    "networks",
    "along",
    "adversarial",
    "neural",
    "network",
    "produce",
    "higher",
    "resolution",
    "images",
    "super",
    "resolution",
    "gans",
    "generate",
    "photorealistic",
    "high",
    "resolution",
    "image",
    "given",
    "low",
    "resolution",
    "image",
    "let",
    "look",
    "important",
    "applications",
    "gans",
    "help",
    "dc",
    "gans",
    "train",
    "images",
    "cartoon",
    "characters",
    "generating",
    "faces",
    "anime",
    "characters",
    "pokemon",
    "characters",
    "well",
    "next",
    "gans",
    "used",
    "images",
    "humans",
    "generate",
    "realistic",
    "faces",
    "faces",
    "see",
    "screens",
    "generated",
    "using",
    "gans",
    "exist",
    "reality",
    "third",
    "application",
    "gans",
    "used",
    "build",
    "realistic",
    "images",
    "textual",
    "descriptions",
    "objects",
    "like",
    "birds",
    "humans",
    "animals",
    "input",
    "sentence",
    "generate",
    "multiple",
    "images",
    "fitting",
    "description",
    "example",
    "translation",
    "using",
    "gans",
    "bird",
    "black",
    "head",
    "yellow",
    "body",
    "sort",
    "beak",
    "final",
    "application",
    "creating",
    "3d",
    "objects",
    "gans",
    "generate",
    "3d",
    "models",
    "using",
    "2d",
    "pictures",
    "objects",
    "multiple",
    "perspectives",
    "gans",
    "popular",
    "gaming",
    "industry",
    "gans",
    "help",
    "automate",
    "task",
    "creating",
    "3d",
    "characters",
    "backgrounds",
    "give",
    "realistic",
    "feel",
    "brings",
    "us",
    "end",
    "video",
    "gans",
    "hope",
    "helpful",
    "informative",
    "liked",
    "please",
    "subscribe",
    "simply",
    "learn",
    "channel",
    "thank",
    "watching",
    "keep",
    "learning",
    "hi",
    "like",
    "video",
    "subscribe",
    "simply",
    "learn",
    "youtube",
    "channel",
    "click",
    "watch",
    "similar",
    "videos",
    "turn",
    "get",
    "certified",
    "click"
  ],
  "keywords": [
    "video",
    "simply",
    "learn",
    "popular",
    "deep",
    "learning",
    "neural",
    "network",
    "called",
    "generative",
    "adversarial",
    "networks",
    "one",
    "machine",
    "look",
    "brief",
    "generator",
    "discriminator",
    "understand",
    "gans",
    "work",
    "finally",
    "let",
    "gan",
    "consists",
    "two",
    "models",
    "input",
    "data",
    "set",
    "used",
    "generate",
    "examples",
    "image",
    "see",
    "real",
    "hundred",
    "rupee",
    "nodes",
    "generates",
    "fake",
    "notes",
    "identify",
    "us",
    "generated",
    "instances",
    "training",
    "vector",
    "sample",
    "output",
    "instance",
    "classifies",
    "loss",
    "back",
    "help",
    "humans",
    "represented",
    "g",
    "x",
    "tries",
    "generating",
    "train",
    "like",
    "probability",
    "using",
    "problem",
    "function",
    "first",
    "images",
    "equation",
    "p",
    "z",
    "next",
    "need",
    "vanilla",
    "convolutional",
    "dc",
    "convolutions",
    "resolution",
    "characters",
    "faces",
    "realistic",
    "objects",
    "3d"
  ]
}