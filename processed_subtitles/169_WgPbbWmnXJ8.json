{
  "text": "hey everyone welcome to my channel this\nis the object detection 101 course in\nthis course we will cover everything to\nget you started with object detection\nalong with four exciting and real world\nprojects we will first start with the\ntheory and have a look at its brief\nhistory then we will understand the\nworking of object detection along with\nits evaluation Matrix from there we will\ninstall everything from the start and\nrun the YOLO version 8 object detection\npretend models using these models we\nwill create two projects car counter and\npeople counter here we will learn how to\nimplement object tracking along with\nobject detection we will also install\nand run YOLO with our GPU for better\nperformance later we will learn how to\ntrain a custom YOLO model using our own\ndata set and create two projects using\nour own training the first one will be\npersonal protective equipment detector\nand the second one will be poker hand\ndetector where we will first detect the\nplaying cards and then create a\nclassifier to classify the correct poker\nhands if you are a beginner don't worry\nthis course is for you we will go step\nby step so it is easy to follow this is\nan information dense course that will\nprovide you with maximum knowledge\nwithout wasting your time learning\ncustom object detection is a superpower\nthat can allow you to solve real world\nproblems and it can be easily completed\nover a weekend so buckle up and get your\nnerdy glasses on and let's get started\nbut wait we are going to use nvidia's\n3080ti graphics card in this course now\nmy question to you is would you like to\nhave one too if yes then you are in luck\nI will be giving away a 3080 di graphics\ncard and all you have to do is register\nto nvidia's GTC 2023 conference through\nmy link in the description and attend\none of their sessions to enter the\ngiveaway automatically the conference\nwill be held from 20 to 23rd March 2023.\nthis is a great place to learn new\nthings and keep up with the new trends\nin technology so sign up today and I\nwill see you there\nforeign\n[Music]\nwhat is object detection object\ndetection is a computer vision technique\nfor locating objects in an image or a\nvideo object detection gives us the\nbounding box information of the object\nas well as the classification of that\nobject\nwhat is the difference between object\nclassification object detection and\nobject segmentation\nobject classification is a type of image\nrecognition that identifies what type of\nobject is present in an image here the\ncomplete image is sent for\nclassification so the output is a single\nclass\nobject detection is a type of image\nrecognition that is used to identify and\nlocate the presence of an object in an\nimage this gives us the bounding box\ninformation and the class as well here\nthe results can be multiple bounding\nboxes and classes\nobject segmentation is the type of image\nrecognition that is used to identify and\nseparate the distinct objects in an\nimage on a pixel level\nhere we get the exact shape of the\nobject detected rather than just the\nbounding box\nalthough image segmentation provides\nmore information image detection is\nstill the first choice for most computer\nvision applications since it is less\ncomputationally expensive\na brief history of object detection\nobject detection was first started in\nthe 1970s researchers started to develop\nautomated methods for object detection\nthe first automated object detection\nalgorithm were based on simple features\nsuch as edges and corners\nthe first real object detection was\nViola Jones developed in 2001. it used\nsliding Windows to search for hard-like\nfeatures which are simply rectangular\nfeatures this method became popular\nsince it was real time for the longest\ntime period this method was used for\nface detection in smartphones and\ncameras the histogram of oriented\ngradients was another method released in\n2005. that focused on the shape of the\nobject it worked by extracting the\ngradient and orientation of the edges\nthis method was mostly used to detect\nhumans in an image\nthen came the revolution of AI with\nneural networks gaining popularity the\ntrue potential was seen with\nconvolutional neural networks when\nalexnet won the imagenet large-scale\nvision recognition challenge in 2012.\nbut this solved a classification problem\nand not detection later Bruce Force\nmethods were used to repurpose the CNN\nmodels to work as detection models this\nwas a very inefficient approach so soon\nafter came the rcnn regions with CNN\nthat used selective regions to apply the\nclassifiers this gave good results but\nit was slow so then came the Fast rcnn\nand the Foster rcnn which were faster\nbut still not real time in 2015 came the\nBreakthrough of YOLO this outperformed\nall the other models and ran object\ndetection in real time this was a\ndifferent approach as it used single\npass of the input image to make\npredictions of the objects methods like\nrcnn used Regional proposal to perform\nmultiple iterations for the same image\nwhile YOLO gets it done in a single\niteration this makes YOLO more efficient\neven though the architecture of YOLO is\nbased on convolutional layers similar to\nits predecessors since then YOLO\nversions have been releasing faster than\nAndroid 8's 5 million dollar Bugattis\nevery time I come back from the toilet I\nhave to check if a newer version of YOLO\nwas already released but don't worry the\nchange between each iteration is not\nalways very significant it's like apple\ntelling us how their latest iPhone\ndesign is completely different from the\nprevious one if you don't believe me\nhave a look at these results can you\nguess which is the latest model\nabsolutely not so even if a newer\nversion comes in the previous versions\ndon't go out of date\nperformance evaluation metrics in order\nto evaluate our object detection models\nthere are two main metrics that we need\nto understand one is to evaluate how\ngood is the location and the other is\nhow good is the classification first is\nthe IOU to measure the localization and\nthe second is the map for classification\nious stands for intersection over Union\nit tells us how close the predicted\nbounding box is to the ground truth it's\na value between 0 and 1. if the boxes\noverlap then it's a perfect detection\nwith an IOU of one if the boxes have\nsome overlap then the values are between\n0 and 1. depending on how much the\noverlap is if there is no overlap then\nthe IOU is zero the value of IOU is\ncalculated by taking the ratio between\nthe area of the intersection and the\narea of the Union of bounding boxes in\norder to understand average Precision we\nneed to know confusion Matrix precision\nand recall confusion Matrix is a simple\ntable that consists of actual classes on\none side and the predicted classes on\nthe other\nlet's have a look at an example of a car\nclassifier\nin the first cell the actual class is of\na car and the model predicted it as a\ncar so it's a true positive\nin the second cell the actual class is a\nhouse but the model predicted it as a\ncar so it's a false positive\nin the third cell the actual class is a\ncar but the model predicted it has not\noccurred so it's a false negative in the\nlast cell the actual class is ball and\nthe model predicted it as not a car so\nit's a true negative this value\ncorresponds to not predicting a pounding\nbox and is usually the background so it\nis not used in the metrics calculations\nusing these values we can calculate the\nPrecision and the recall Precision is\nthe total positives out of the total\npositive predictions recall is the\nactual positives out of all predictions\nin mathematical terms Precision is true\npositive divided by true positive plus\nfalse positives recall is true positive\ndivided by true positive plus false\nnegatives since both Matrix provide us\nvaluable information we combine them to\none called the Precision average\nthe area under the Precision recall\ncurve the Precision recall curve\nmaximizes the effects of both the Matrix\nand give us a better idea of the overall\naccuracy of the model this every\nPrecision is of a single class if we\nhave multiple classes then the mean of\nthese Precision values is the mean\naverage Precision also known as map\nso the first thing we will do is to\ndownload Python and to do that we can go\nto python.org\nso we will simply go to downloads and\nhere you can see you can download the\nlatest version but that is not\nrecommended because it might have some\nerrors or it might need some bug fixes\nso we'll go to all releases and here\nwe'll go down and you can see python\n3.11 will have support till 27\npython 3.10 will have till 26 so you can\nsee the information here so this is\nbasically the long term support\nso here in the release version I would\nsuggest to go uh don't go for the latest\none go for the one that is one below the\nlatest one so for example here you can\nsee three points 10.9 so we can download\nthis we can simply press on download\nand here\nyou will go to Windows 64-bit and you\nwill click on that so it will start the\ndownload now you can have multiple\nversions of python as well so you can\nhave the same project running on\ndifferent python versions so you can see\nwhich one is more stable which one gives\nyou better results so I will show you\nhow you can do that because I already\nhave python 3.7.6 which I have been\nusing for the longest time period and I\nwill also show you how you can use\npython 3.10 in this case so we will be\nusing python 3.10 but if we had to\ndowngrade I will show you how you can do\nthat or if we had to upgrade I will show\nyou how to do that as well so what you\nwill do is you will click on python so\nhere make sure that you add python.exe\nto the path\nand you will click on install now\nokay so the setup is done and we can\nclose now we will go to pycharm which is\nour IDE\nnow if you're not familiar with IDE it\nstands for integrated development\nenvironment it's basically a notepad\nwhere you can write code but it will\nhelp you out to write the code it will\ntell you where the problems are how to\nfix the bugs and all that so what you\nwill do is you will go to pycharm so\nthis is jetbrains.com pycharm and you\nwill go to download\nand in the downloads there is a\nprofessional version and there's a\ncommunity version so you have for Mac OS\nand Linux as well so we will be working\non windows so we will download for that\nso for the community version you can\nsimply hit download because it is free\nand it is more than enough for what we\nneed\nso now the download has started and we\nwill wait for it to finish\nso now the download is complete and we\nwill hit on pycharm community\nwe'll click on next\nnext\nand we will associate dot Pi files with\nthat we'll admin folder to the path and\npart charm Community Edition we'll\ncreate the desktop icon as well\ninstall\nthen we are going to restart our\ncomputer and hit finish and then we are\ngoing to open up pycharm\nso this is not the first time I am\ninstalling pycharm so it has a memory of\nwhat I've been doing so it has some of\nthe default parameters so you might see\nsome pop-ups that will ask you a few\nquestions uh how to set up a few things\nso you can set them up click next next\nand it should be fine or you can close\nthem and the main thing that I'm going\nto tell you that you need to do is right\nnow so you will click on file and you\nare going to create a new project\nand here is the main thing so this is an\nenvironment so basically what you do is\nyou have the actual Python and you copy\nthat basically and you create a virtual\nenvironment that is separate to\neverything else so this project will\nhave its own environment and whatever\nyou install will be installed in this\nenvironment\nso this is based on a specific version\nof python so here the base interpreter\nyou have to mention so right now the\nbase interpreter is python\n3.1.0 so you can also have python for\nexample 3.7 so I have these two python\n3.7 and python 3.10 so I can choose\nbetween these two so for now I'm going\nto choose for example this one so what I\nwill do is when I'm creating the\nenvironment I'm putting down the name\nand I can write environments and I can\nwrite three one zero so this has a\nversion as well so here we'll just name\nit python project\nand we are going to hit create\nso we will use the same window to create\nthis project and here we have our python\nproject and that is created with the\nmain file and you can see the virtual\nenvironment 3.10 has been created so\nwhat I can do is I can remove all this\nand I can simply write print\nhello\nworld\nso let's go ahead and right click and we\nare going to run Main and this will give\nus hello world\nso this is running python 3.10 how do I\nknow this is because you can see here we\nhave python 3.10 we don't have python\n3.7\nso what we will do is we are going to go\nto file and any package that we want to\ninstall we can go to settings and then\nwe will go to Project python project and\nwe'll go to python interpreter and here\nwe can add any package that we want\nwhether it's opencv whether it's CV Zone\nwhether it's ultralytics whatever it is\nyou can install here so for example we\ncan go ahead and install numpy\nnumpy so we will click on install\npackage and it will take a while and you\ncan also specify which version of numpy\ndo you want to install we are installing\nthe latest one that is available right\nnow so we can hit close and here you can\nsee now in the packages we have numpy\ninstalled this is the current version\nand this is the latest version so they\nare up to date so these three are\nalready installed so you don't have to\nworry about those then we can simply\nclick ok so here if I write\nImports numpy\nand if I run this it will not give me\nany error which means numpy has been\ninstalled if I write anything else\nit will give me an error because there\nis no Library\ncalled\nnump2y right so that's the basic idea so\nthis is import numpy now if I go to file\nand if I go to settings I can create a\nnew virtual environment if I wanted to\nuse two different pythons I could create\na new virtual environment to do that you\ncan click here you can go to show all\nand over here we can click on ADD\nso here we can create a new environment\nand here we will create for 3.7\nso we will select 3.7\nas our brace interpreter and we have\nnamed the virtual environment 3 7 and\nthen we'll press ok\nso now it will create and it will shift\nit to 3.7\nwe'll hit OK but now you can see that we\ninstalled numpy earlier but it was\ninstalled in the virtual environment of\n3.10 but now it's not installed in 3.7\nbecause we are now using 3.7 as the main\nenvironment so that's why it is giving\nus an error over here so if I run this\nnow it will give me an error that there\nis no numpy but if I click here and go\nto three points 10\nand then it will load up and if I run it\nagain it will not give me an error\nbecause numpy is already installed so\nyou have to make sure that your\nlibraries are installed if you are\ntrying different versions of python so\nhere you can go to library and you can\nsee you have numpy installed\nso here in 3.7 you will not see numpy so\nwhat you can do is if you wanted to use\nin 3.7 you will make sure it's 3.7 over\nhere\nand you will go to file settings and\nhere you are going to install numpy\nnow it will install it to 3.7 as well\nso the reason I'm telling you this is\nbecause later on you might face some\nissue in for example three points 12 or\n3.15 and you want you might want to\ndowngrade or you might want to upgrade\nlater on so instead of creating a new\nproject and doing all of these things\ntogether again what you can do is you\ncan simply have a new virtual\nenvironment and have the same project\nrunning so it will not be very difficult\nto debug so here you can see we have\ninstalled numpy for 3.7 as well so now\nif I run with 3.7 or 3.10 it will run\nwith both\nso for most project we are only going to\nuse one python environment we will\nusually use the higher one unless there\nare some major issues in that so then in\nthat case we are going to downgrade so\nnow that we understand how to install\npycharm and how to install python you\ncan add more python versions now we can\nsimply go ahead and start working on our\nproject\nso here we are going to create our\npython project which is object detection\nYOLO and we are creating a new virtual\nenvironment and the environment is based\non the base interpreter of python\nversion 3.1.0 so 3.10 so it is up to you\nwhich python version you want to use so\nwe are using 3.10 if you have a newer\nversion you can use that too but don't\nuse the latest one because it might heal\nsome errors\nso what we'll do is we will simply hit\non create\nand there you go we have our project and\nhere we have a main file so what we can\ndo is we can use this main file to test\nour code we can simply write prints\nprint hello\nworld and we can run it\njust to see if everything is working and\nit's working fine so in order to get\nstarted what we have to do is we have to\ndo some installations on this virtual\nenvironment so if you look at this\nfolder we have the virtual environment\nif you click on that in the libraries\nthese are the site packages we need to\ninstall some packages in order to run\nour project so how can you do that you\ncan go to file settings and in the\nproject python interpreter you can click\non ADD you can type in the version for\nexample you can type in the site package\nname for example CV Zone\nand you can hit install now when we are\nworking with object detection there's a\nlot of libraries that are working at the\nback end so installing them one by one\nwill take a lot of time so what you can\ndo is a simple way of doing this is\ncopying a requirements file or you can\ncreate your own file as well so here\nthis is a standard version uh it's a\nstandard way of doing this so what you\ncan do is you can simply paste\nrequirements.txt\nuh in this project\nso where do you get this\nrequirements.txt you can download it\nfrom our website uh computer vision.zone\nit is free to download all you have to\ndo is sign up if you already have signed\nup just sign in with your account go to\nthe course page and there you can\ndownload everything related to the\ncourse absolutely free so you don't have\nto pay anything you can just download\nand you can copy it here so here you can\nsee as soon as we copy the\nrequirements.txt file it will give us a\nnotification package requirements all of\nthese packages have not been installed\nso what you can do is you can click on\ninstall requirements and it will install\nall the requirements that you need so\nwhat do these mean\nso for example CV Zone double equals\n1.5.6 this means use the exact same\nversion\n1.5.6 don't use anything above it don't\nuse anything below it the exact same\nversion so right now I'm using python\n3.10 so with this all of these versions\nshould work fine now when it is greater\nthan or equals to then it means that use\nthis at the very least or if there's a\nnewer version use that instead\nso this can be a little bit dangerous or\ntricky because if the newer version is\nnot compatible it might not work so you\nhave to be careful which ones uh are you\nhard coding to be exact same version and\nwhich ones are you saying for example\nhere for python we have hard coded it to\nthe exact same version normally it's not\ndone like this but because the latest\nversion has some issues in Auto\nconnecting we are going to use uh dot\nsix zero this is the version that does\nnot have this issue so that's why I've\nhard-coded it to be this exact version\nnow if you have a later version that\nworks fine for you that's okay but if it\ndoesn't then it's better if you use the\nexact same thing\nnow sometimes what happens is that you\ninstall everything but some of them do\nnot install and again that might be the\nissue of that it's not compatible they\ndon't have a version that satisfy their\nsatisfies the requirement so what you\ncan do is you can downgrade or you can\nupgrade it's based on that for example\nuh scikit-learn for example this scikit\nimage\nlet's say it doesn't work or we can\nsimply comment it and it will remove it\nfrom the install installations so later\non if I give it a wrong number let's say\nlike that it will give us an error that\nit was unable to install so in that case\neither you can come here and fix the\nnumber here based on the version or you\ncan go to file you can go to settings\nand in add you can you can search for\nPSI what was the spelling\nso I get I believe no s c i k\ni t Dash image yeah so you can click on\nthat you can specify version and you can\nselect which version do you need it\nmight be a higher version it might be a\nlower version\nso if the latest one doesn't work go to\nthe previous one by default okay so that\nbeing said\nlet's just install everything we will\nclick on install requirements it will\nask us that you want to install all of\nthese we will say yes install and then\nwe are simply going to wait for the\ninstallation to complete so the main\nlibrary that we are using is ultralytics\nthat will provide us with the YOLO\npackage and it will download the YOLO\nweights for us as well so we will be\nusing version 8 of YOLO and if later\nversions come up you can use those two\ndepending on whether they are\num\nare related to ultra analytics or not\nso all of these packages are being\ninstalled and let's wait for it to\nfinish so all the packages have now been\ninstalled as you can see all of them are\ninstalled and we are good to go so what\nwe can do is we\nare going to create a new\nfolder and we are going to call it\nchapter 5 and Within Chapter 5 we are\ngoing to say running YOLO\nso then we will right click and we will\ncreate a new python file and we will\ncall it yolo\nbasics\nbasics\nso there you go we have our first file\nand all we have to do is we have to test\nwhether the YOLO will work or not and\nhow exactly can we run it so in order to\ntest YOLO we need to have some images so\nwe are going to run it on images first\nonce we know it it works then we are\ngoing to try it with webcam in the next\nchapter\nso we have some images again you will\nfind this on our website uh once you\ndownload the zip file everything will be\nincluded in it so here you will see we\nhave images and if you open up images\nthe first image is of a school bus with\nsome kids going into the school bus\nthen the second image is of course\nand the third image is of some bikes so\nmotorbikes so these are the three image\nimages that we are going to test on so\nonce we have that now what we have to do\nis first of all we have to import\nultralytics so we are going to write\nfrom ultralytics\nImports\nYOLO\nso that is what we are going to import\nand then we also need to import CV2 and\nI will tell you why okay let's just run\nit and I will tell you why later on so\nit is very simple with only two lines of\ncode you can simply run your mod so\nfirst of all we are going to create the\nmodel we'll call model equals YOLO and\nthen we are going to give in the weights\nso there are different types of Weights\nyou have the Nano the medium the large\nit's based on you which you want to use\nnow the good thing about this method is\nthat you just type in the name of the\nthe weights that you need and it will\ndownload the weights for you so for\nexample we will write YOLO\nversion 8 and we are going to write n\nfor Nano so this will download the Nano\nversion so we'll write here PT\nthen we simply have to write results\nequals model\nand then we have to give in the source\nof the image so the image source is\nbasically Images slash and we can write\none dot PNG so this is our image\nand then\nall you have to do is you have to write\nshow\nequals true so we want to see the image\nat the end so\nthere you go so if we run this now\nright click YOLO Basics we are going to\nrun it\nlet's see what happens first of all it\nwill download the weights once it's\ndownloaded\nit will tell you that it is running on\nCPU\nso that is another thing we are going to\ndiscuss later on how to run it with GPU\nbut for now nothing happened it did\nrun the image it it told us that it is\nrunning at this this speed and this is\nthe size but it didn't actually show us\nanything\nso what exactly happened\nit actually opened up the image and it\nclosed very quickly because there was no\ndelay it just opened up and closed so we\nneed to stop it so here we will write\nimport CV2 in order to stop it we will\nsimply write CV2 dot weight key and\nwe'll give the delay of zero zero means\nthat unless the user inputs don't do\nanything so if we're on this now\nthis time around when we run it this is\nthe image that we get so we have the bus\nbeing detected we have the person being\ndetected handbag a backpack backpack so\nthere's a lot of good detections here\nand they are also giving you the\nconfidence level of each of these so\n0.35 0.78 of course the higher the\nconfidence value the better the\ndetection is\nso this is quite good\nwe can close that but here again you can\nsee that we have downloaded the weights\nand they are in our uh chapter 5 folder\nnow in order to\num make it a little more efficient we\ndon't want to download it for each\nchapter because each chapter or each\nproject we are going to have some\nweights\nso if we are using the same weights we\nshould not have it uh being downloaded\nevery single chapter so what you can do\nis you can create a new folder in the\nobject detection YOLO we will create a\nnew directory and we will call it yolo\nweights\nand we are going to\nput our weight within your low weights\nwhen we refactor it\nnow it's in the yellow weights so here\nwe can go back\ndouble dot slash that means go back and\nthen we will write YOLO Dash weights\nslash YOLO 8 9 8 n\nso if we run this now it will run\nexactly the same way because it is able\nto find uh this file within this folder\nso if you want to try out different uh\nwhat do you call versions you can simply\nchange the name here\nand you can write for example large and\nwe can try to run it and see if it works\nso it is downloading now\nand once it's downloaded it should give\nus the results so Nano will be faster\nmedium will be a bit slower large will\nbe slower and you can check out the\nother versions as well which one do you\nprefer\nso this version is 83 MBS I'm not sure\nhow much was this let's open that up\nokay this one was 6 MB so it's it's a\nhuge difference in terms of Weights so\nthere you go it has been downloaded and\nnow you can see uh we are getting better\nresults we have multiple results here we\nalso found the skateboard which was not\nfound with the Nano version\nand there was a wrong detection here for\nthe bus that is not detected as well but\nhere it's saying handbag when it's a\nbackpack so that is\nuh still a mistake but it works fine so\nthere you go so this is how you can\ndownload and you can run the models so\nwhat we can do now is we can run\nimages.png2\nso let's see what the how that works so\nthere you go so you have lots of cars\nbeing detected uh some with confidence\nof 0.88 some with 0.85 some with 0.67\nyou can you can see the pattern the\ncloser it is to the camera it actually\ndetects it very well the further it is\nfrom the camera it might not detect uh\nbasically the idea is how clear is the\nsite of viewing so if it's able to\ndetect if it's able to find the car a\nbit more it will be easier to classify\nit will be easier to detect and the\nconfidence level will be higher but if\nit's far if it's blur then of course the\nconfidence level will not be that much\nso that's the basic idea and then we'll\ngo to images three and let's see how\nthat works out so right now we are using\nthe large version and you can use the\nNano version as well okay there you go\nso here we have a lot of detections\nmotorcycles and we have a truck at the\nback uh we have a person and they are\noverlaying on each other and it's a\nlittle bit difficult to see what exactly\nis going on\nand right now we are not really\ndetecting we are not really telling the\nsystem\num that put these bounding boxes and put\nthe names and the confidence level this\nis done by default when you are saying\nshow equals true then it's doing all of\nthat so what later on what we'll do is\nuh in the in the next chapter we are\ngoing to put all of these manually\nourselves we will not use the default\nversion and that way we will have much\nmore control on how we can see because\nright now they are overlaying on each\nother and it's not very clear so it will\nit's not very useful\nuh in terms of viewing\nso that's the basic idea that's how we\ncan run different versions of YOLO the\nlarge the Nano the small the medium so\nhere if we write m\nuh by the way I wanted to check if we\nrun it with the Nano what exactly\nhappens how many detections do we get\nso there you go so it says a car car and\nthe person is not detected that was\ndetected earlier and actually let me let\nme take a screenshot of this\nand I will open it up in paint\nso this is the one with the Nano and\nlet's run it with large and then we will\ncompare\nthat will be a fun experiment uh exactly\nhow much are we getting\nwhen we are using the heavier version\nokay so here you can see\nwe do have\ncan we yeah so here you can see\nwe don't see the truck\nuh we have some motorcycles the cars are\nlimited here here we have more cars here\nwe have less\nand here we have a red which is for a\nperson here we don't and here there's\nanother truck at the back which is green\nuh we don't get that\nso yeah definitely we are getting more\nbut is it correct or not that is yet to\nbe seen So based on your requirement\nwhether you want it fast or whether you\nwant it highly accurate\num again all of these methods all of\nthese versions they are good not in a\nvery general sense but if you have a\ncontrolled environment for example\nyou're detecting cars or you're\ndetecting uh pedestrians in in a fixed\nenvironment with a fixed camera then yes\nit can be very useful you can have\ncertain limitations certain constraints\nsome certain constants that this this\nwill always be this you can add a mask\nthat do not detect in these regions only\ndetect in these regions and things like\nthat it will definitely be useful to put\nit in your project\nso that is exactly what we are going to\ndo first of all we are going to run it\nwith our webcam and then later on we\nwill try it with uh different projects\nhow we can implement this in real time\nso now in chapter number six we are\ngoing to run YOLO with our webcam so\nlet's see how we can do that so we are\ngoing to need the help of opencv in this\ncase and we are going to put bounding\nbox ourselves manually so that it is\neasier for us to decide what to display\nand what not to display so what we'll do\nis first of all we're going to we'll go\nto new and directory and then we are\ngoing to write chapter 6.\nand chapter 6 is Yolo with webcam so\nthen we are going to right click and we\nare going to create a new python file\nand we will call it yolo\nwebcam\nso\nfirst of all\nwe are going to import ultralytics as we\ndid earlier and we also have to import\npython so we will uh not python opencv\nso we will write prom ultralytics import\nYOLO\nand then we will write uh Imports\nImports\nCV2 and then we will also import\nCV zone so CV Zone we will be using to\nactually display all these um\nwhat they call detections it will make\nit a little bit easier you don't have to\nbut it will make a little bit easier so\nthe first thing we will do we will\ncreate the webcam object so we'll write\nGap equals\nuh CB2 dot video capture so this is what\nI was referring to earlier so if you are\nnot getting any suggestions so if you\nwrite dot video and you don't get any\nsuggestions then it means you probably\nare using a newer version of python of\nopencv\nso and this is the issue that we are\ngetting with the newer versions\nso where is it open CV opencv\nthere you go so opencv as you can see we\nare using version 4.60 whereas 6 8 is\nthe latest version but still 6 8 has\nthis issue that's why we are using six\nzero so we will write CV2 dot video\ncapture and the video capture ID\nbasically you have to given the ID\nnumber for your webcam I'm using\nmultiple webcams so I will give the ID\nnumber one because that is what I'm\ngoing to use but if you are using only\none webcam if you don't have multiple\nwebcams installed then you should write\nzero instead of one\nso I will write here one and then you\ncan specify cap.set you are going to set\nthe width and the height so the width uh\nbasically is prop ID number three so you\ncan write 1280 this is the width and cap\ndot set that is the prop ID number four\nthat is 720. so this is the height\nand we're going to set it at 720. so\nthis is the basic idea and again if you\nwanted to there's another one which is\nmostly used in webcam 640 by 480 these\ndimensions are commonly used so it's up\nto you which one you want to use then we\nare going to write\nwhile true and we are going to write\nsuccess\nand the image equals cap dot read and\nthen we are going to write cv2.im show\nwe want to show the image so we will\nwrite image and IMG that is the image we\nwant to show and CV2 dot weight key\nbecause we want to give it one\nmillisecond delay\nso this should run our webcam\nby default so if we right click and run\nwe should have our webcam running\nthere you go so this is the webcam as\nyou can see me it's running live so we\ncan close this and if you wanted to you\ncan write 1280 by 640\nand oh not 640 720 my bad\n1280 by 720 and that should work as well\nthere you go so now you have a bit more\narea to work with so again it's up to\nyou which one you want to use so we'll\nkeep it on this and let's go ahead and\ncreate our model so the model as we have\nseen earlier if you go to YOLO Basics\nhere you can see this is how you can\ncreate your YOLO model and then you can\nfind the results like this\nso here we are going to write model\nequals uh we are going to write YOLO\nand then we have to give in the weights\nso the weights we are going to use Nano\nfor this purpose so we will go back we\nwill write YOLO YOLO Dash weights\nand then we will write the version so\nthis is Yolo version 8 and Nano so YOLO\nversion 8 and Nano\nso I wrote the one y extra so version 8\nand Nano dot PT\nso here we will go down and we will\nwrite the results equals model\nand we are going to give in our image\nand we are going to write stream equals\ntrue now if you write stream equals to\nit will use generators and that will be\na bit more efficient than without it so\nit is recommended to use stream equals\ntrue so if we run this now\nlet's see what happens\nso we should not get any errors that's\nwhat we are trying to check if we are\ngetting any errors it means we are\nheading in the wrong direction\nthere you go we are not getting any\nerror so that is good\nso now once we have the result what we\ncan do is\nwe can check for individual bounding\nboxes and see how well it performs so\nhere once we get the results we are\ngoing to Loop through them so we are\ngoing to write poor R in results\nuh we are going to get the bounding box\nof each there's each of the results so\nwe will write here\nbox\nis\nequals\nr dot boxes\nand now we have to Loop through the\nboxes so we will write for box in boxes\nwe are going to find the X Y of each of\nthe bounding boxes so there are two\nmethods you can use X Y X Y which means\nX1 y1 X2 Y2 or X1 y1 and width and\nheight so which format do you need it\ndepends on you so here you can write box\ndot X Y X Y or you can write box dot X Y\nwidth height so which one do you want so\nI would recommend X Y X Y because it\nwill be easier to input directly to\nopencv\nso we're right here X1 y1 then X2 and Y2\nequals this\nand what we can do is we can print these\nvalues so we will copy these and we are\ngoing to Simply print them\nso let's see what do we get\nso we are getting an error not enough\nvalues to unpack expected for got one so\nit means they are just packed insides\nso what we need to do is we just need to\nget the first element of it so hopefully\nthat will work out there you go so this\nis what we are getting so we are getting\nthe value of 279 one zero three one zero\nthree eight and seven one twelve so\nagain then we have multiple detections\nthen we are getting two values\nso here we are getting X1 y1 X1 X2 and\nY2 so these are the values that we are\ngetting so what we need to do is we need\nto convert them into integers so that we\ncan actually use them so we can copy\nthis part\nand we can paste it and then we can put\nit into integer\nconvert it into integer\nand integer\nand integer\nthere you go so let's run it and see if\nit works\nso there you go now we are getting the\nvalues you can see here we are getting\nthe actual values that we can use with\nopencv so let's go ahead and create a\nrectangle to actually find out if we are\ngetting the correct bounding boxes or\nnot\nso here we will write CV2 dot rectangle\nrectangle and we'll give in our image\nand then we have the points so X1\nand y1\nthen we have the X2 and\nX2 and the Y2 so these are the points\nthat we'll give in and then we have the\ncolor so color let's put it\nit's B so let's put it at zero green is\nlet's 200 and zero or let's make it\npurple\nso two five five zero two five five that\nwill make it purple\nokay then we have the thickness let's\nput it at three and yeah that's pretty\nmuch it\nso let's run it and see if it works\nand there you go so we are detecting so\nif I bring in my phone\nyou will see there's a bounding box\naround it and it shows that it is\nworking fine\nso\num let's let's try a pen can it detect\nthe pen yeah it detects a pen as well it\ndetects the phone and let's try the\nremote it detects the remote as well but\nagain we are not actually getting uh the\nfeedback of what exactly the glass is\nand uh how confident it is\nso we are going to detect those as well\nnow uh as I mentioned earlier you can\nuse a fancy rectangle as well which we\nprovide in CV Zone package so in order\nto do that you can simply write CV Zone\ndot Corner rectangle and you will give\nin the image\nand all you have to do is given the\nbounding box so you can write here uh\nbounding box PB b o x so where is this\nbounding box coming from uh this is\nactually X Y width and height so we can\nget that too\nso we can write here\na bounding box X Y width height\nand this will give us the X1 y1 will be\nthe same and then we will have the width\nand the height and then what we can do\nis we can put it in bounding box so bbox\nequals this\nwill convert it into integers\num and there you go so this will be\nworth\nand this will be height\nthere you go now this is a repetition so\nagain\nwe can use one of them we don't have to\nuse both of them at the same time so\nlet's put this one over here\nso this one and let's put this with it\nso you can use either one of them so not\nboth of them at the same time because\nthat will be weird we can remove that so\nthis one is for opencv\nand this one is for CV Zone\nlet's run that and see if it works\nand there you go we are getting\nsomething but it is wrong so why exactly\nis it wrong\nso we are getting X1\num\nwhat happened here\nso X1 y1\nand then W and H\nso\nokay something seems wrong so let's try\nthat\num let's just get these values\nand we can subtract to get the width and\nheight so the width and height\nequals\nx 2 minus X1\nand then Y 2 minus y1\nand hopefully that will work out so\nlet's open this up\nand we can remove this\nand here for the bounding box we can\nsimply write\nX1 y1 and width and Heights\nlet's try it this way hopefully it will\nwork\nthere you go so it works now so we have\nthe green boxes and then we can also\nhave for example for the phone you can\nsee it's a little bit fancier again you\ncan change the colors\nuh the colors of these edges you can\nchange the color of the inner rectangle\nand all of that all of this information\nis given here if you click on the\ncontrol and click on Corner rectangle\nhere you will see where is it\nis it's Corner rectangle\nthere you go so it will show you this is\nthe length and this is the color for the\ncorner the color for the rectangle and\nthe rectangle thickness and the\nthickness of the corner and all of these\ndetails are given here so you can check\nhere\nand based on that\nyou can apply this okay so this is good\nso the next step would be to actually\nget the confidence values and the class\nnames so we don't have the class names\noff yet so we only are showing the\nbounding box\nso let's find out\nthe confidence first so the confidence\nis conf\nequals bounding box conf\n0.\nso this is the confidence so let's print\nthat out and see if it works\nso if we go down and there you go you\ncan see the confidence values but we\nwant it to be rounded\nso what you can do is you can use math\nso Imports\nimport math\nand then over here you can change this\nvalue\nso here we can write math Dot uh you can\nwrite ceiling or floor it's up to you so\nseal\nand that's it or\nwe and based on what exactly do you want\nto round it off so we want to round it\nto two decimal places so we are going to\nmultiply it by 100 and then we are going\nto divide it by 100.\nso that's the idea\nso if we check the confidence values now\nit will be two decimal places so\nhopefully that should be good and we are\ngetting one because we made a mistake\nhere it should be the bracket should be\nhere so you are doing the ceiling for\nthis and then you are dividing it by\n100.\nthere you go so now you're getting 0.94\nso that is good\nuh now we can display it so to display\nwe are going to use CV Zone uh now what\nexactly are we going to display we are\ngoing to display the confidence and the\nclass name so we need a box a rectangle\non top of which we can display this\nbecause if we just display it on the\nimage it is not very clear but depending\non the background so if the background\nis in contrast it will actually display\nwell if our if there are pretty much the\nsame color it will fade away so that's\nwhy we want a rectangle and on top of\nthe rectangle we want a text\nnow uh if we create a rectangle using\nopencv and then we put the text on it\nthen it won't be centered uh if the text\nis bigger it will move away it will move\nout of the box and things like that so\nin order to fix that we have a function\nin CV Zone that will create the\nrectangle it will put it uh it will put\nthe text on the rectangle and it will\nCenter it based on the length of the\ntext and all of this is done automatic\nso we can write here CB Zone\nCV Zone dots\nuh\nput text tracks and we are going to give\nin our image\nand then we have to give in the text so\nthe text let's put it an F string for\nnow because later on we are going to add\nsome stuff to it so the F string will\ncontain the confidence for now\nand then we'll given the position now\nthe position should be the starting\nvalue of our X and Y\nso it will be X1\nand y1\nbut because why one will bring it a\nlittle bit down we wanted to push it up\na little bit so we can say minus let's\nsay uh 20 or 30 or 50. uh let me check\nsomething like that so let's run that\nand see if it works\nnow this will give us an issue and I\nwill tell you what that is\nthere you go now it's giving us\n0.96 and if if I bring this in 0.94\nthat's good if I bring in my phone there\nyou go if I push it up it goes up if I\nbring it down it goes down\nthere you go\nso if I go up a bit there you go\nso that's the idea but here the problem\nis that if I go up\nyou can see the the text actually goes\nout\num and that that is not what we want uh\nwe want it to display\nso what we can do is we can write here\ntake the max\nwhether it's zero or this value\nand take the max whether it's 0 or this\nvalue\nso whichever one is bigger because if it\ngoes in minus then use 0. so it will not\ngo above that it will stay Within\nso let's try that out\nthere you go\nit doesn't seem to work very well\nuh if we go here\nuh if we go to the side it's working on\nthe side\nbut it's not working on the Y\nbecause we already have a minus 20 in\nthere so let's remove the minus 20.\nand hopefully this will work better\nor or what we can do is we can put here\n20.\nso\nwe go up\nlet me just go like this yeah\nit's not working very well so let's try\n20 or y1\nyeah now it's better\nso maybe make it 35\nso it doesn't go beyond that\nthere you go so now it's actually\nshowing us so if I have this remote\nand if I push it up\nthe confidence level stays there\neven though it's going out of\nthe image\nthere you go so that's that's good\nthat's good let's see the phone yeah\nit's working fine\nokay so this is good now what we need is\nthe class so we need to know what class\nare we detecting is it a person is it a\ncar is it a bike what exactly are we\ndetecting so this is based on the Coco\ndata set and what we can do is we can\nget the class names for that so I've\nalready created\num what you called a list and you can\nget this list from our website again you\ncan download it for free now if you\ndon't want to do that the other thing\nyou can do\nis you can simply type it\nfrom here so right now you can see it's\nshowing the complete thing on the screen\nso if you want to go ahead and simply\npipe it out you can type all these 80\nclasses so person bicycle car motorbike\nairplane blah blah blah and all of these\nso it should be in a list called class\nnames\nso once we have that\nwe need to find the ID number so if the\nID number is zero it will be a person if\nthe ID number is one it will be a\nbicycle ID number two is a car and so on\nso what we need to do is we need to find\nthe confidence uh sorry the\nthe class\nso here we found the bounding box\nthis is for pounding box\nlet's write here bounding box\nthis here is for the\nuh confidence\nand now we are going to do it for the\nclass name\nso for the class name what we have to do\nis you are going to use the same format\nyou will write CLS you can't write class\nbecause because you can't use class for\nobvious reasons so here you will write\nclass CLS and then box and you will\nwrite here CLS so that will give you the\nclass name so let's print it out\nuh or let's put it on the rectangle so\nlet's remove it here\nand we will put it directly on the\nrectangle we will write here\nuh\nCLS we'll give it a space and then this\nthere you go so this is for the\nconfidence this is for the class and\nlet's see if that works out so right now\nit will give us the class ID it will not\ngive us the actual name because we are\nnot referring it to our list once we\nrefer it to our list it will give us the\nname as well so for now it will just\ngive us it should give us ID number zero\nso here you can see 0.0 it's decimal\nplaces I'm not sure why but uh we will\nfigure that out the phone is 67 and\nthat's a very\nhigh class\nremote is 65. so what about the chair\ncan you find the chair\ncan you find the chairs\nconfused about about the chair anyways\nso what we have to do is instead of\nclass what we will write here we'll\nwrite here class names and then we will\nput in here class but if you remember it\nwas a floating value so we have to\nconvert it into integer\nso we'll put it here as integer and then\nif we run this now this time around it\nshould give us the class name as well\nforeign\nso if we open this up here you go person\n0.96 confidence if we move around that's\na suitcase I'm not sure why uh so\nsometimes it's a chair\nand then we have the remote that's very\ngood then we have the phone the cell\nphone that's very good\nso that's the basic idea and let's see\nthe pen\noh\nit's actually a toothbrush I didn't know\nthat\nso it is actually detecting this as the\ntoothbrush that's fine okay so uh if you\nwanted to check it on a video you can do\nthat too and if you wanted to make these\nuh names these labels a bit smaller you\ncan do that too so here input text rect\nhere you can write scale and you can\ngiven let's say 0.5 so that will squeeze\neverything down and it'll make it\nsmaller\nthis will be helpful in case you have a\nlot of detections for example you have a\nlot of cars on a highway or you have a\nlot of p a lot of people being detected\nso this will make it easier so there you\ngo but then it's a little bit harder to\nread so you have to change let's say\nwe'll put 0.7 then you also have to\nchange the threshold sorry in the\nthickness the thickness let's put it as\nzero point five\nactually the thickness is not 0.5 if we\ncheck the default thickness it is\nno this is not the corner Rex\nwhere is\nput extracts\nput extract is here the default\nthickness is three so let's put it as\none\nso\nif you put it as one hopefully it will\nbe able to read it even if it's a bit\nsmaller because we have a drastically\nreduced scale from 3 to 0.7 so the\nthickness well I I don't think we can go\nbelow one I'm not sure so there you go\nnow you can actually read person 0.9 0.6\nso if you bring in the remote\nyou can actually read it so that's how\nyou can increase and decrease the scale\nfor it by default it's three and three\nso it's up to you if you wanted to check\nthat okay so\num actually let's keep it there because\nwe are going to try it with the video\nand videos they usually are bigger so\nlet's put scale as one just a little bit\nbigger and you saw that the Box actually\nscales up and scales down automatically\nso that's the best part of this function\nokay so let's try it with some videos\nso what we will do is we will copy and\nwe are going to paste our videos folder\nin object detection YOLO so here we have\nsome videos bikes cars motorbikes people\nPPE 2 ppe3 so all our these are\ndifferent videos we are going to use\nthroughout the course so we have all of\nthem in one folder so here instead of\nvideo capture one let me copy that\nand I will write here\nor web\nwebcam and here we will write for video\nand we will remove for the webcam and\nfor the video all we have to do is we\nhave to point it to the correct path so\nhere if we go back we will go to videos\nand in the videos let's try let's try\nbikes\nbikes dot MP4\nand this is the size and all that so in\nin case of the video you cannot actually\nset the size so let's put it here with\nthe webcam\nlike that\nso for the video that is good let's run\nit and see if it works\nthere you go so we have a lot of people\nand we have bicycle we have person we\nhave car it's a lot of detections we\nhave traffic lights being detected as\nwell\nso that's pretty good\nand then let's try with\num cars\ncars\nagain you can try with different\nversions\nso there you go we have some cars being\ndetected looks pretty good\nand then we can try with\nmotorbikes dot MP4\nthere you go so we have some cars being\ndetected we have motorbike we have\nperson\nso those are some pretty good results\nlet's try it with the large version\nsame video with the large version and\nsee what happens\nmost probably it will be a lot slower\nthere you go and we but we are getting\nbetter results in terms of detections\nso that's good\nokay and uh then let's put it back to\nNano and the people let's try people\nhere p and E people and let's run up\nthere you go so we are detecting people\nas well\nand that's pretty good so this is the\nbasic idea of how you can use webcam\nwith the YOLO version 8 to detect these\ndifferent objects and this is quite an\nefficient way to do it so later on we\nare going to use it\nso right now we are actually using it\nwith CPU so that's why when we go to the\nlarge version it actually is very slow\nso in the next chapter we are actually\ngoing to use the same code but we are\ngoing to run it with the GPU so it will\nbe much faster than this so let's go\nahead and try that out\nnow in the previous chapter we saw that\nhow we can run a YOLO version 8 with our\nwebcam and we we took the help of opencv\nto actually do it now the problem that\nwe saw that it is using a CPU to\nactually run all the computation and\nwhile I do have a very good CPU which is\ncore I9 and it is 12th generation it is\nstill unable to handle real-time\ninformation when it comes to the large\nversion when we are using Nano version\nit's fine but when it comes to large or\nmedium version then it lags very much so\nas you can see here if we run it\nright now we are detecting a video and\nthen we are we are running a video with\nyolo version 8 large model and you can\nsee the lag is very much so it takes\nalmost 300 milliseconds to run an\ninference so only three frames per\nsecond you can say so that's not very\ngood\nso what exactly can we do we can use our\nGPU to actually run it and hopefully the\nGPU will give us real-time results so\nhow exactly can we run a GPU so first of\nall you need to have nvidia's GPU you\ncan check the GPU level on their website\nthe compute compatibility and based on\nthat it will perform very good or very\nbad based on how powerful it is now when\nit comes to installations there's a lot\nof installations required to run the GPU\nbut it is all well worth it because once\nonce you actually get it running you\nwill be able to run your GPU and you\nwill be able to run your YOLO version 8\nin real time and that is something that\nis very good to know so I've listed down\neverything in detail so let's go ahead\nand follow those steps the first thing\nyou will need is visual studio so you\nhave to install Visual Studio this is\nthe requirement for the Cuda toolkit so\nthis is the two a Cuda toolkit so this\nis the requirement of this kit so you\nhave to install this first so visual\nstudio but what exactly do we need in\nVisual Studio\nonce you run it you have to download the\ncommunity version so whichever one is\nthe latest one you can download that but\nthen the the biggest thing that we need\nis the development with C plus so you\nwill need that to install that as well\nso make sure you run uh install it\nso once we have that then you have to go\nahead and this will take a while because\nit's uh quite a few GBS so it will take\na while to download and install once\nthat is done you will go to the official\nnvidious drivers so for example I have\nthe nvidia's um\nRTX 3080 TI\nso I will select the g-force in GeForce\nI will select the 30 series and then\nGeForce RTX 3080 TI and I'm using\nWindows 10 so I will select that you\nwill select the studio driver and\nEnglish and you will search and you are\ngoing to download it now this is a\nsimple wizard you have to click next\nnext next and it should install quite\neasily once that is installed you will\ngo ahead and install Cuda toolkit\nyou can install by going to their\nwebsite so this is for uh for the Nvidia\ndeveloper you will click on Windows then\nx8664 then you will click on 11 and then\nyou will download the local version so I\nhave I believe Coda\n11.6 let me check so once you download\nit will install and I will check my\nversion as well so it will install in\nprogram files and if you go down Nvidia\nGPU Computing toolkit and if you go to\nCuda this is 11.5 so I have 11.5\nbased on the version the latest version\nyou can download as well so here it's\n11.5 we will open that up and you can\nsee again this will be an installer it\nwill be a wizard you have to click next\nnext install it in C and in C this is\nwhere you will find all the files so\nkeep this folder open because next we\nare going to install Cuda DNN which is\nwhich stands for deep neural networks\nCuda deep neural networks so again you\nhave to click on download uh the Cuda\nDNN and this will need what you call the\nregistration on their website so make\nsure you have registered and it is free\nto download so just make sure that you\nhave registered and it will let you\ndownload\nthe Cuda DNN so once you download that\nthis is what you will get\nso make sure the versions are compatible\nso right now this is for 11.5 which I\ninstalled as the toolkit so I have to\ndownload it for 11.5 uh the\nCuda DNN so this is what you will get so\nif we open up our folder\nto install this all you have to do\nis you have to open up your folder\nhere so you will see here you have a bin\nfolder so this is the Cuda toolkit I\ndon't know why it's so hard to pronounce\nthis so this is the Cuda toolkit so this\nis that and this is the DNN so if you go\nto bin\nhere you have a bin folder here you have\na bin folder open up bin and open up bin\nhere and copy all of these files and\npaste it here so just drag and drop so I\nhave already done that so it will ask me\nto do it again I will not do that again\nso then you will go back then you will\ngo back and you will go back here we\nhave already done the bin then you will\ngo to include so in include again you\nwill open include here copy all these\nfiles drag and drop them here so in the\nmain folder like that so then you will\ngo back and then you will go to lib and\ninside lib you will see all these files\nbut here you will not paste them\ndirectly you will go to x64 and over\nhere you are going to paste all these so\ndrag and drop all these over here\nso this way it will install your Cuda\ntoolkit along with the Cuda deep neural\nnetworks Cuda DNN so this is basically\nthe installation and one last thing you\nhave to do is you have to go to your\nenvironmental variables so you will\nclick on edit system variables and here\nyou will go to environment variables\nand over here you will go to Cuda path\n11.5 so this is the version that I have\nand you will make sure that it points to\nthe correct directory so if you remember\nwe had it in program files Nvidia GPU\nComputing toolkit Cuda and then version\n11.5 so make sure this and this they are\npointing to the right path so if they\nare pointing then it's fine if they are\nnot type it in make sure they are in the\ncorrect path\nso we'll hit OK and that is it so now\nthe the drivers and the Cuda toolkit and\nthe Cuda deep neural network is\ninstalled but there is one more step we\ndo need to install Pi torch which is\ncompatible with Cuda so here you can see\nin the requirements we have already\ninstalled torch but now we have to\ninstall the torch which is compatible\nwith the GPU or with Coda so how can you\ndo that we can go to their website so\nthis is the pytorch website and this is\nhow we can install so we are using the\nstable version for Windows we are going\nto use pip to install and we are\ninstalling it on Python and we are\ninstalling for Cuda 11.6 and this is the\ncommand that we need to run so we are\ngoing to copy that\nagain I will share this command so that\nit's easier for you to install so you\nwill copy that and here at the bottom\nyou are going to go to terminal now this\nis very important because some of you\nmight make this mistake and it is very\nfrustrating if you make this mistake\nmake sure you are not in local\nclick on this down arrow and select\ncommand prompt because if you are at\nlocal it will install it globally we\nwant to install it in this virtual\nenvironment so you have to go to the\ncommand prompt and here you can see it's\ninstalling it in the virtual environment\nso here we are going to paste our link\nand we are going to press OK or we are\ngoing to hit enter so this will take a\nwhile because I have done this already\nuh it has all these files archived uh in\nthe cache so that's why it is able to\ninstall this very quickly otherwise it\nwill take a while to actually install\nall of these so once it is done\nwe can go back\nand we can go to we can close all of\nthese and here in the webcam we can\nright click and we can run YOLO so if\nit's actually using the GPU then it will\nright here GPU so right now it's not\nactually showing GPU so it means there\nis something wrong uh it did not install\nit properly so if we go to file\nsettings\nan interpreter if we go to\nthe torch\nover here it is using the same torch\nthat we had earlier\nso it it's probably not using it\nproperly so what we can do is we can\nuninstall\nforeign just to make sure\nand we can uninstall\nthe torch\naudio and the torch vision\nwe can uninstall those\nwe'll press OK and then we'll go to our\nterminal and then we will run the\ncommand again\nso again you can see it is using the\ncached otherwise it is quite a big file\nit's almost 2.4 GBS so it will take a\nwhile to download and install I think\nwhat happened earlier was that all the\nrequirements were already satisfied the\ntorch was there Vision was there so it\ndidn't actually\nreinstall it didn't install anything so\nI believe that's what happened so you\nneed to uninstall and install again\nso it is currently installing so let's\nsee how it works so it is saying that\nrequires a later version of opencv we\nare using this\num I believe it should be fine so\notherwise it has installed\nso let's run that and see if we are\ngetting\nso it is updating that's why it's not\nrunning let's run that again\nthere you go so now you can see it says\nultralytics YOLO python blah blah blah\ncuda0 Nvidia GeForce uh 3080 ti so this\nmeans now it's not using the CPU it's\nactually using the GPU and if we open up\nthere we go now it's lighting fast so it\nis using the GPU earlier it was using\nthe CPU and it was dead slow but now\nit's using the GPU and remember we are\nusing the large version for this\ndemonstration and still it is running\nreal time so that is very good it means\nthe gpus has been running properly and\nit has accelerated\num our video our inference and that's\nhow it's running so right now the\ninference is 10.5 so 10 milliseconds\nearlier the inference was 300\nmilliseconds so that is a difference of\n30X so that is a very big big difference\nwhen we are using the GPU so that's\ngreat and uh again if you run into any\nissues go back and check the video again\nfollow through the steps one by one and\nit should work fine at the end so again\nit's a big difference so it's well worth\ntrying this and if it runs properly you\nwill have a much faster system that will\nbe running YOLO in real time do you want\nto implement your computer vision ideas\nto solve real world problems or upgrade\nyour resume by enhancing your computer\nvision skills then the computer\nvision.zone is the perfect platform for\nyou CV zone is a One-Stop computer\nvision platform with over 100 000 users\nwith courses sold in over 80 different\ncountries if you want to commercialize\nyour computer vision ideas then the\ncomputer vision web development course\nis the perfect course for you here you\nwill learn the basics of web development\nand computer vision as well as how to\nintegrate them to solve real world\nproblems like customer engagement car\ncounter face attendance shirt size\nmeasurement and a lot more advanced Zone\nprogramming is another great course that\nfocuses on the Practical implementation\nhere you will learn the basics of drone\nprogramming as well as advanced concepts\nlike face following body following\ngesture control and a lot more if\ndeveloping mobile apps is your thing\nthen check out our computer vision\nmobile apps course here you will learn\nthe basics and create several apps\nincluding object detection augmented\nreality face detection document scanner\nand a lot more the best part is that you\nwill create a single app that will work\nboth on IOS and Android if you are\npassionate about integrating Hardware\nwith software then check out our\ncomputer vision Arduino course here you\nwill learn the basics along with amazing\nprojects such as conveyor belt assembly\nface tracking lab gesture control phase\ndoor lock and a lot more\nthe computer vision game development is\nanother great course where fun meets\nprogramming here you will learn to\ncreate games such as Fruit Ninja balloon\npop squid game Cookie Cutter all using\nthe latest computer vision techniques\nnot only that you will learn to compile\nyour awesome game to an exe file to make\nit accessible to all you can also learn\nto implement computer vision on embedded\ndevices with our computer vision with\nJetson Nano cores here you will learn\nthe basics of Jetson Nano and computer\nvision along with creating exciting\nprojects like Lane following robot eye\ntracking object following and a lot more\nall these courses have a clear path from\nBasics to Advanced with maximum\nknowledge in a short amount of time so\ncheck out the links in the description\nto get started with their computer\nvision Journey today\nso now that we understand how to run\nYOLO and how can we run using GPU we are\ngoing to create some projects out of\nthis so the first project that we are\ngoing to do is a car counter so within a\nvideo we are going to count the number\nof cars that pass a certain region\nso to do that we'll first create a new\nfolder we'll go to oh not a new file\nwe'll go to new and we'll click on\ndirectory and here we are going to write\nproject one\nand the name of this project we are\ngoing to call it car counter\nSo within our car counter we are\nbasically going to copy the code of YOLO\nwebcam so we'll copy YOLO webcam and we\nare going to paste it in the project\none so here we will call it car dash\nlet's write it capital car dash counter\nlot Pi so we will have the exact same\ncode that we were running earlier and\nall we have to do is we have to make\nsure it's running with the videos we can\nremove the webcam part and we are going\nto run\ncars.mp4 so\nwe will have a lot of things done and\nset it up already while we start this\nproject so right now you can see it's\nrunning on GPU\nit's using 3080 TI and there you go we\nare getting the cars and we are getting\nthere bounding box information their\nclass their confidence and you can see\nuh when when it's too small it's not\nactually putting the corner rectangle\nproperly so what we can do is first of\nall let's fix that\nso here uh where is it Corner rectangle\nuh what we can write is the length\nequals I think by default it's 30. yeah\nit's dirty by default let's put it at 15\nso this is the length of the corner so\nthe green part that you see that is what\nwe are referring to so we can make it\nsmaller yeah so there you go now it's\nsmaller so the green part and if you\nwanted to you can even reduce it further\nyou can make it like say five then it\nwill be really small\nlet's see how that works out\nthere you go\num it's too small maybe eight or nine\nlet's say\nthere you go I think this is better okay\nso we have the cars coming in we have\nthe rectangle on top of it we can\nactually make it smaller so that we can\nsee it better so let's make it 0.3 or\nlet's say 0.6\nand the thickness is still one we cannot\nreduce it further I believe\nso\nthere we have it now we have it smaller\nbut you can see the the\nthe title itself is smaller but there is\nsome offset around the region which is\nquite huge so we can reduce that too so\nthere is a very there's a variable\ncalled offset\nuh called offset and by default I\nbelieve it's 15.\ndo we have an offset here\nno the bounding box\num\nyeah put text right we have offset as\n10. so let's make it 5.\nor let's put it three because we don't\nwant a huge offset we want the cars to\nbe visible\nthere you go so now it's much better\nyou can see we have the offset and we\ncan see the cars coming in it looks good\nokay so this is the basic idea that we\nhave these cars coming in now the thing\nis that it might not be a car it might\nbe a truck but then what exactly are we\ntrying to find so if you just want to do\ncars you can add a if statement that if\nit's a car then detect it otherwise we\ncan find out what are the vehicles that\nwe want to find for example in our case\nlet's say we will detect the car we'll\ndetect motorbike we'll detect bus and\nthen we will detect truck so these are\nthe four categories that we are going to\ndetect so if we go to our cars video\nlet's open that up\nthere you go so if you go a little bit\nback\nthere you go I believe this will be\ndetected as a truck\nthis is a car that's fine this is a\nmotorbike so we want to detect that too\nand then later on we also have\nuh yeah I believe this will be detected\nas truck as well\nand this should be detected as a bus so\nwe have these different categories and\nwe want to detect all of them so in that\ncase first of all we have to give an if\nstatement that only detect these\ncategories\nso here what we can do is we can write\nhere current\nclass equals\nuh the last names at CLS\nso this will give us the class name so\nover here as well instead of writing\nthis we can write current class\nand\nover here we can write if the current\nclass\nequals\ncar\nthen only we are going to display it\nso in case of motorbike\nand in case of the truck it will not get\ndetected and what we can do is we can\nput a zero here\nso every time we press the keyboard\nbutton it will go forward otherwise it\nwill not go forward by its own\nso there you go let's\nI will keep pressing and let's move\nforward\nand here you can see\nit is detecting it but it is not\ndisplaying the confidence and the class\nvalue over here as well it's not it's\nbecause we are displaying the rectangle\nthe rectangle is displayed here\nthe rectangle is if you wanted to remove\nthat as well we can do that but right\nnow it is not displaying the confidence\nand the class values\nso that is what we are trying to do so\nhere it's not detecting it so it means\nthe motorbike is not being detected and\nthen here the truck as I mentioned it's\nnot been detected\nthen let's move on to the bus\nso as you can see the bus is detected\nhere you can see it is detected but it\nis not classifying it because\nwe said that only when it's a car so\nthis is a bus and this is a truck it's\nnot detecting these two because we did\nnot clarify we did not Define them so\nhere we can say and we can also put the\nconfidence level so if the confidence\nlevel is very low then you should not\ndisplay so here we can write\nand confidence is greater than at least\n0.3 so that's what we are writing here\nthat if the confidence is greater than\n0.3 and it's a car then only you can\ndetect it so we have four categories so\nwe will write for all four of them so\nwe'll write here\nit's a car or it's a truck\nor\nit's\na bus\nor\nuh it's a motorbike\nso let's go down\nor it's a motorbike\nwe have motorbike right yeah we have\nmotorbike so car motorbike uh bus and\ntruck so these are the ones that we're\ndetecting rest of them will not detect\nand we will not even put the rectangle\naround them so we can bring it down here\nin the if statement\nand we can paste it here\nso let's run it and see how it works\nso now it will detect only those so here\nyou can see it was detecting something\nhere it was detecting probably a traffic\nsign but now it's not detecting that\nbecause it's not part of it and here you\ncan see it says motorbike at\n0.56 or five nine percent\nuh confidence\nso 59 confidence so here you can see car\nthis is detected as a truck this is also\ndetected as a truck\nso then we'll move forward\nand we'll wait for the bus\nwhether it's selected as a bus or a\ntruck so this is truck as well\nand this is truck as well\nthen there you go we have the truck\nso earlier it was detecting as a truck\nbut here it's detecting as a bus so\nactually this gives us a good uh point\nthat this point is actually where most\nof the cars will be classified properly\nat the very end it might not classify\nproperly at the very back it might not\nclassify properly but at the middle it\nshould detect and classify properly so\nthat is the region where we should count\nso this is where it gives us the idea so\nif you're trying to find that position\ntry to Loop through these images and try\nto find that correct position where the\ndetections are correct\nso that's how you can tell oh the good\nposition where the good position is okay\nso that's done so we have the cars now\nbut as you can see we have it in the\nwrong places as well so for example we\ndon't care about what's Happening Here\nif we have some counts over here it will\ninterrupt our count\nfor example if a car is com going out\nfrom here we don't want to detect that\nwe just want to detect at this point on\nthe main road so you have to constrain\nyour values so to get good results\notherwise if it's completely open it's\nnot constrained at all you might not get\nthe best results okay so how can we\nconstrain this how can we make sure that\nonly this region you detect uh what you\ncall\nuh the cars or whatever the the object\nis so once one thing you can do which is\nvery simple and that you can do within\nopencv or within this pycharm\nenvironment is that you can create a\nrectangle so you can crop this image you\ncan create this rectangle here\nand you can say okay only detect in this\nand how can you say that you will crop\nthat image and that image you are going\nto send it to your detector but that is\nnot a very good idea because the shape\nover here is not rectangular or not\nSquare so what we want is the exact\nshape\nso how can we do that now it is very\nsimple we will go to canva.com\nand we are going to create a new design\nand in this new design this design is\n1280 by 720. so this is the size of our\nvideo and that is exactly the size of\nthe design and then we are going to\nimport this video\nso here this is the video you can see\nit's the exact same one\nnow what you will do is\nyou will resize it so that it is the\ncorrect size\nit fills up the whole screen and then\nyou are going to press r\nthat will give you a rectangle\nso with this rectangle what you have to\ndo is you have to determine the region\nso we are going to rotate it\nand we are going to align it with this\ndotted line\nthis Lane we are going to align it with\nthis and for the other one we are going\nto align it with this Lane\nso let's go ahead and do that\nso we will align we'll try to align it\nas much as we can\nso\nsomething like that\nsomething like that so there you go\nand you can move it around like that\nthere you go\nso this is the first one and the second\none we are going to basically what we\nare trying to do is we are trying to\ncreate a mask so that it only views in\nthat mask region\nso we are going to put another image\nhere\nthere you go another rectangle here and\nthen this area again is very small and\nit's not very useful so we are going to\nremove that as well so we'll create\nanother rectangle and we'll put it over\nhere\nsomething like that and at the bottom as\nwell we don't want to detect so we'll\ncreate another one and we will put it\nhere\nsomething like that so depending on\nwhich region you are trying to detect\nyou can create this so the then you're\ngoing to select all of them\nand you are going to change the color to\nBlack you can do that in the beginning\nas well\nand then we are going to\nextend it so that only that region is\nvisible\nthere you go\nthat's how simple it is that's how you\ncan create this mask and all you have to\ndo now is click on the video and delete\nit that will give you the white reason\nso then you can simply share download\nand you don't need transparent\nbackground you don't need to compress\nall you have to do is you have to\ndownload the image once it's downloaded\nwe are going to import it so here is the\ndownloaded file we are going to bring it\nto our project so project one car\ncounter and we are going to name it mask\ndot PNG so if we open that up\nin projects let's close the others so\nhere mass.png this is our mask\nso we can remove that and now what we\nhave to do is we have to Overlay these\nimages so that only this region is\ndetected and uh we only find the cars\nwithin these regions\nso now what we need to do is we need to\nimport this mask\nso here at the bottom we are going to\nsay mask equals\ncv2.im read\nand we are going to read from our image\nso we'll write mass.png and once we have\nthat and we get our webcam image or we\nget our video image then we are going to\nOverlay uh the mask on our main image we\nare going to use a bitwise operation of\nand that will give us only that region\nso we are going to we are going to say\nimage re\nJin equals CB2 Dot bitwise and and we\nare going to give in our image and we\nare going to give in our mask\nand this will give us the IMG region and\nwe are going to display that image\nregion so let's copy that and paste it\nhere so we'll write it as region\nand we will write image region\nso let's run that and see if we get that\nregion as well\nand make sure they are of the same size\nif they are not of the same size it will\nnot work right now I know it's 1280 by\n720 that's why we have created the image\nof 1280x720 of the Mask otherwise it\nwill not work so there you go this is\nyour mask\nthis is the image region and as you can\nsee it will only detect in this region\nthat's what we need now so we want to\ndetect only in this part actually the\nmask is wrong\num it's it's not perfect because\nthis car is is not visible\nso this is not correct something is\nwrong let's go back to canva\nand let's undo\nyeah this is not correct we need to go a\nlittle bit higher there you go\nI guess this is a better representation\nthere you go\nso\nthen we are going to delete this\nso now it is our new mask then we are\ngoing to download\nand then we are going to delete this\nprevious mask\nand we are going to drag in our new mask\nand we will call it mask\ndot PNG and then we are going to run it\nagain and hopefully this time around we\nwill not face the same issue\nokay so this is our image and this is\nour mask there you go so if we plate\nthat seems fine to me\nyeah that's good okay so now we will\nsend only this image\nto our\nsystem so in terms of computation it\nwill be more efficient as well so\ninstead of image we will send image\nregion that's how simple it is\nso let's run that\nand there you go so based on our image\nregion as you can see only this area is\nbeing detected as cars So within this\nregion we are detecting cars behind it\nwe are not getting it on the side we are\nnot getting it so only in the middle in\nthe specified region we are getting the\ndetections so if I play it\nonce it reaches that region it detects\nit\nas a car or a bike\nand all that\nso that's good\nas you can see\nit looks good\nyeah okay so now that we have a\nspecified region and we can see all the\ncars being detected now we need to count\nthem so in order to count we need to\nhave a certain region that this is the\nline when it passes this line we will\nconsider it as counted\nso we need to know that\nsecond thing we need is an actual\ntracker\nso right now what we are doing is we are\ndetecting the cars but in the next frame\nwe do not know where the car has gone\nso what we need is a tracking ID so if\nwe detect a car in the first frame we\nneed to know where did that car go in\nthe next frame so that we can assign it\nthe same ID so in the first one if it's\nID number one in the second frame it\nshould remain ID number one it should\nnot go to item number two or three or\nfour or five\nso this is basically a tracking problem\nso within the consecutive frames we need\nto find out where is our object moving\nto so that we can assign them unique IDs\nso to count we need to find first a\nTracker\nso the tracker that we are going to use\nis called sort and you can find it on\nGitHub and here you can see it's by Abby\nWelly\nand thanks to him and the contributors\nwho actually created this tracker\nand it is very easy to use and here they\nare showing us how to use as well so all\nwe need is this sort dot Pi so if we\nclick on that\nthis is the code\nwhat we will do is we will download this\nfile of course this file will also be\navailable uh with our ZIP file so you\ncan find it there or you can come to\nGitHub and download it from here\nso we also have some requirements uh\nfilter by scikit image and lab so these\nrequirements are already fulfilled\nbecause we added that in our\nrequirements as well so filter by scikit\nimage and lab so these are the ones that\nwe have already installed\nso what we need to do is we need to\nbring in the file so let me copy that\nand I will bring it here into our\nproject one\nand this is a simple sorter a simple\nonline and real-time tracker copyright\nAlex Beverly\nyou can see here so this is all the code\nwe are not going to do anything uh to\nthis all we have to do is we need to\nknow how to use it so here to import we\nare going to write import sort\nor actually what we can do is we can\nwrite from sort\nfrom sort import everything\nso it will be easier for us to work with\nso this is what we are going to do and\nthen we are going to create an instance\nfor the sorter so what we will do is\nsorting or let's call it tracking\ntracker\nequals\nsort\nand then we have to give in the maximum\nage\nso what is the limit of the number of\nframes uh that it is gone and we still\nrecognize it within that region so if ID\nnumber one is lost how many frames do we\nwait to detect it back so the higher uh\nthe longer it will wait for it to come\nback so maximum age let's put it as 20\nminimum hits let's put it as two and\nthen we have the IOU threshold again\nthese are parameters that you can change\nbut they have default values as well if\nyou go to sort maximum age is one which\nis really bad\nuh it's not really useful then we have\nminimum hits as three and the IOU\nthreshold as 0.3 so I will I will keep\nthem the same uh let's put it as three\nand IOU threshold is 0.3 so again\num this we have explained in the theory\npart so if you're not familiar with this\ngo ahead and check that out this is the\nintersection over Union threshold to\nfind how good the\noverlap of the bounding boxes is so uh\nthese are the values you can play around\nwith them and see what type of results\nyou get now in order to run this it's\nvery very simple all you have to do is\nyou have to write tracker dot update and\nthat's it so you need to update it with\na list of detections so we will write\nhere detections now we need to find\nthese detections which we already have\nby the way because here we have the\nbounding boxes but what we need to do is\nwe need to put them in an array we need\nto put them in a list\nand we need to make sure that the format\nis exactly what this requires so what\nformat does it need we don't know\nwe can go into the sort and we can check\nhere\nso uh in the update it says\nthis is a numpy empty so by default it's\na numpy array of 0 by 5. so this is the\ndimension so we have five values\nso the format is X1 y1 X2 Y2 and the\nscore so this is what we have to feed in\nand what do we get out of it\nwe get erect\nconcatenated\num maybe it's not mentioned here what we\nget as the output or the return is X1 y1\nX2 Y2 and then we also get the main\nthing which is the ID number so that is\nwhat we need\nso\nlet's just copy that so where is the\nupdate here so our detections by default\nif we don't have any detections this\nshould be our type so we should have a\nnumpy list so right after we get the\nresults we are going to create a list or\na array of detections\ndetections and this will be empty\n0 by 5. so that is the idea and once we\nhave that\nthen we are going to once we detect it\nas a car or a truck or a bus or a\nmotorbike and the confidence is greater\nthan 0.3 then only we are going to save\nit to our detection list or detection\narray so then what we are going to write\nwe are going to write that our\ncurrent array\nequals\nnumpy dot array and we are going to give\nin the X1\nX1\ny1 X2 and Y2 and we will also give in\nthe confidence value\nso these are the five values that it\nrequires and then what we have to do is\nso normally if we have a list what we do\nis we write dot append so if you want to\nadd it to the list you just write append\nit goes down it goes down goes down like\nthat but in in a numpy array we don't\nwrite append uh what we do is we stack\nso we will do a vertical stack that's\nhow simple it is so we'll write the\nTexans\nequals numpy dot vertical stack\nand we have to give in our current\ndetection the old detections that we\nalready had and the current array\nthe current array so we stack them\ntogether so that's the ideal so once we\nhave these detections now we can simply\nsend it to the update and again this\nupdate is not dependent on what did we\ndetect new because we need to keep\nupdating it from the previous times as\nwell so we already have an empty one and\nit will keep updating so here we have\nthe detections and then we need to get\nthe results of this\nso we can write here results\nuh for the tracker equals this\nresults of the tracker equals this and\nthen we can Loop through the results of\nthis tracker so you can write for\nexample for results in\nresults tracker\nwe are going to get the X1 y1 and the X2\nand the Y2 and the ID so which is the\nmost important thing that we get the ID\nand that is basically the result\nso let's print out the results\nactually we can print out this as well\nlater on we are going to use this that's\nwhy we are writing it like that so let's\nrun that and see if we get something\nhopefully there are no errors\num otherwise we are heading in the wrong\ndirection okay there you go so now we\nhave our three IDs perfect so we have ID\nnumber one ID number two ID number three\nlet's press spacebar and then again it\nis moving on to the next one and you can\nsee it's the same ID\nthen it moves on to the next one and you\ncan see the fourth one has come up and\nit has increased that ID there you go\nand then the fifth one comes in\nand it shows so it couldn't find\nprobably uh the other two and that's why\nit's showing only three okay so in order\nto understand this better what we are\ngoing to do\nuh we are going to\ndisplay these ID numbers so it will\nbecome easier so instead of showing it\nhere or let's do both we'll show it here\nand we will show it here as well we'll\nkeep the thickness of this bigger so we\nare talking about the rectangle so the\nrectangle thickness here\nso rectangle thickness equals\nlet's say five and for the other one we\nwill make it a little bit smaller so we\ncan see what is the actual detection and\nwhat does it think where is the tracking\npart so how well the tracker detects the\nbounding box so let's let's try to find\nthat so what we'll do is\nuh again what uh we will simply use\nthese values\nare they integers yeah they seem to be\nintegers so what we can do is we can\nsimply uh create our Corner rectangle so\nwe will write here CV Zone\ndots Corner rectangle image\nand we have to give in the bounding box\ninformation so the bounding box\ninformation\nuh will be like we did here\nlet's copy that\nand uh actually let's copy this corner\nrectangle\nbecause we're lazy\nso there you go so X1 y1 width and\nheight and this time around we'll put\nthe rectangle as let's say two and we\nwill put it as blue the color so the\ncolor for the rectangle let's put it as\n255 0 and 0.\nand let's show the ID as well\nso\nhere we are showing using\nput text rect right so we will copy that\nand we will paste it here and instead of\nconfidence in current class we are going\nto display ID\nentical oh the ice Capital my bad so\nthis here\nwhy did I put I Capital let's put it\nsmall ID\nlike that okay so ID and yeah that's\nfine\nand positioning is X1 y1 so X1 y1 is\nalready bugged like it's something is\nalready there we have the\nconfidence and all that actually let's\nremove that because we know already we\nhave the classes and all that uh for its\ncar or bus or whatever so we can remove\nthat and now we'll get the ID instead of\nthat\nokay\nso let's run that and hopefully we'll\nget some good results\nso expected sequence length 2 got 4.\nwhat is happening here\num\nso it detected something\nthen it said Corner rectangle\nwe have an issue\nimage color RT opencv by argument\nrectangle\nexpected length 2 got 4.\nokay\num\nso we are getting an error here the\ncorner rectangle\nuh why are we getting an error here\nuh let me check the corner rectangle\ncolor R and color C\nr t or is it TR it's RT yeah RT\nwhat is this\nuh\nlet's let's print out\nprint out X1\nI just want to make sure that X1 is\nactually an integer and not a floating\nvalue because if it is then we have a\nproblem there you go that's why yeah\nthat's the issue so we have to do the\nsame thing we did earlier uh we have to\ndo this\nwe have to convert them into integers\nthere you go so let's run that and\nhopefully it will be fine now\nthere you go so now it's showing us okay\nthe IDS are very small let's make them\nbigger so put text rect ID Max is this\nand that scale let's put it as two and\nthickness let's put it as three offset\nlet's put it as 10.\nso it will be big values we can clearly\nsee what's going on\nthere you go uh point\nhit the point\nso ID we need to convert the ID into\ninteger as well so let's just do it here\ninteger ID\nOkay so\nthere you go so this is id1 id2 ID3 now\nis the moment of truth so if we go to\nthe next one these IDs should remain\nsame if they flip around it means it's\nnot tracking it's only detecting so if I\npress spacebar and there you go it's the\nsame\nso if I press spacebar again again it's\nthe same so one two three four if I keep\npressing\nthere you go so the four was lost but it\nkept it uh it brought back the four from\nwhere it left off\nand you can also see the Blue Line the\nblue line is basically what the tracker\nis detecting and the purple one is what\nthe detector or the YOLO is detecting so\nif we keep going forward you can see\nthis is now five and this one is nine\nnow this is not an issue because if it\ndoesn't go to Five it might have\ndetected some wrong IDs but as long as\nthe ID Remains the Same if 9 remains 9\nthen it's fine because we will have a\nline after which we cross we will detect\nit or we will count it\nso that's fine\nso there you go it's it's 14 it's 14 12\nis 12 18 is 18 19 is 19 20 is 20. uh 23\nis 23 24 is 24 and that's all good so we\ncan make a line here we can make a line\nhere and whenever that line crosses\nwhenever that ID crosses that line we\nare going to detect it as a count now uh\nhow can we do that it's very simple\nall we have to do is we have to first of\nall create the line so we are going to\nwrite here that our line equals\nso this value should be actually there's\nimage region coming here let's remove\nthat because we don't need that anymore\nnow this line uh I have checked the\nvalues already so we are going to put\nthat uh let's call it limits\nlet's call it limits instead and then we\nare going to write here 423\n297 673 and 297.\nso these are the limits\nand using these limits we are going to\ncreate a line\nso this line let's draw it after the\ntracker\nso here we'll write cv2.line and we'll\ngive in the image and then we have to\ngiven the points so the points are\nbasically limits at zero and limits at\n1.\nthen the second point will be limits at\nzero\nuh sorry limits are two and\nuh\nlimits at three\nand then what do we need then we need\nthe color so the color let's put it as\nred so it will be 0 0\nBGR so 255 and then we have the\nthickness let's put it as five and that\nshould be good so if we run this now we\nshould have a line right in the middle\nof our road\nso there you go so this is our line if\nthese\nIDs if any of these cars they cross this\nline then it will be detected as\nwhat you call detection actually what we\ncan do is we can extend it to the left a\nlittle bit because there's a gap here\nso let's go over here to the limits and\nin the uh X we can make it let's say\n400.\nwe'll move back 20 pixels\n23 to be exact\nyeah Knight's perfect so now it should\nbe fine\nuh now what we need to do next is uh\nlet's remove the the detection part so\nwe don't need to draw the the rectangles\nwhen we are detecting only for the\ntracker so here the corner rectangle we\ncan remove that\nso now it will only show us the blue\nones\nthere you go now it's only showing us\nthe blue ones actually I like I like the\npurple color\nlet's make it purple\nuh 255 and make this to five five as\nwell\nso now the the rectangles will be purple\nthere you go so yeah I like that better\nso uh the next step is to find the\ncenter point so once we have those\nCenter points we need to check if that\nCenter Point actually touched this line\nif it touched the line then we are going\nto say it was a it was a count\nso that's the idea\nso how can we find this this is our\nresults we have the X we have the Y we\nhave the where we have the height we\nhave everything all we need to do is we\nneed to find the Center so we will call\nit CX\nand c y this is the center X and the\ncenter Y and how can we find it it will\nbe X1\nPlus\nthe width divided by 2.\nand it will be y1 plus the height\ndivided by 2.\nso just to make sure that we are headed\nin the right direction we can draw it\nCV2 dot Circle and we'll give in the\nimage we will give in the CX\nand the Cy and then we are going to give\nin the radius let's give it five I don't\nknow why I'm giving everything 5 today\nso then we'll give in the color two five\nfive zero and two five five purple again\nand the the thickness let's put it as\nCV2 dot filled so we want it filled\ncompletely\nso just to make sure that uh the circles\nare at the correct position we are going\nto draw them\nand there you go so here you can see the\ncircles and as soon as this circle\nactually falls in this region we are\ngoing to count it as detected one\nthere you go so how can we do that we\ncan write\nthat if we need to check the limit of\nthe X and we need to check the limit of\nthe Y now the limit of the x is\nstraightforward we have starting from\nhere ending till here it should be\nwithin this region that's simple enough\nso we can write that the limits\nat zero this is our first limit and the\nlimits\nat one no at two this is the second\nlimit so x and x these are the two\nlimits\nso the first one is 400\nthe second one is six seven three\nso that's the idea\nso we are going to say that if CX is in\nbetween that\nand\nc y is in between what limit\nnow\nwe don't want to say if c y equals\nthe exact value of our limit no we don't\nwant to say that because this is just\nsingle value the height is a single\nvalue 297. so we don't want to say if\nthe value is exactly 297 then detect it\nas a count because sometimes the car may\nbe fast and it might not touch that\npixel value so putting it one as one\npixel value might be a problem so what\nwe need to do is we need to create a\nregion so this is our line we will have\nthis region\ncan you see yeah so you will have this\nregion in which if it lies then it is\ndetected as a count\nso what we can do is we can simply write\nthat limits\nat zero uh no at one\nplus 20\nor for this instance minus 20\nand\nfor the next one we can say Plus 20.\nso if it's if it falls in that region\nthen only it will detect it\nas detected so then we are going to say\nthat\ntotal\ncounts\nplus equals 1.\nand we didn't Define total count so we\nwill write here after tracking we will\nwrite here uh total count equals zero\nso total count plus equals one and all\nwe have to do is now we have to show the\ntotal count so let's copy this CV Zone\nfunction\num uh we'll put it on the image we will\nput we will write\ncount\nand Colin and then we will write total\ncount\nuh it's already integer so we don't need\nto worry about that and we will given\nthe value of x as\num let's say 50 and Y as let's say 50 as\nwell\nso 50 50\nand the rest we will keep at default\nuh what happened okay so let's run that\nthere you go so the total count right\nnow is zero because nothing past that\nregion so if we keep pressing and there\nyou go now it entered that region and it\ncounted as one but now you will see an\nissue if I press again it counted it as\ntwo because it is still in that region\nuh because it's not just a single line\nit's a region where it lies so because\nit's already there it's counted it as\ntwo now if we make this region very\nsmall it might not\nit might not count it at all because\nit's very low but if it make it if we\nmake it very big then it it will have\nmultiple counts so we need to have a\nbalance\nfirst of all we need to have the balance\nand the second thing that we do need is\nwe need to check if this ID is already\ncounted or not if it's already counted\nwe will not add it to the counter\nthat's how we will fix this issue\nbecause if I run it again at that same\npoint it has counted three times\nso that's not good\nokay so how can we do that\ninstead of making it a variable we will\nmake it a list I'm talking about the\ntotal count so instead of making total\ncount a variable we'll make it a list\nand in that list we will put IDs so one\ntwo five eight nine things like that so\nthen whenever we detect a new count we\nwill check if that ID is already present\nwe will not count it if it's there we\nwill not count if it's not there we will\nadd it\nokay so how will it look like\nso total count we will make it a list\nand then we will go down and here we\nwill say total count dot append\nand we are going to append the value of\nthe ID\nokay but how can we check if it's\nalready there or not in the total count\nwe will check we will write if\nuh the\ntotal counts dot count\nof\nthe ID\nequals zero then do this now what does\nthis mean\nso basically we are telling it to find\nthe number of times when we write dot\ncount it means count the number of times\nthis ID is present in this list so for\nexample if it was 5 here it will count\nthe number of times 5 is available here\nif 5 is not available it will be 0.\nif there were two fives it will be one\noh sorry two\nand then if there is no 5 it will be\nzero so this is what we are saying so we\nare saying if this ID is not already\npresent then total count dot append ID\nso this time\nit should be\ncorrect but now it is a list it is not\nan actual value that we can just write\nhere so all we have to do is we have to\nfind the length of this list so that\nwill be the total count\nso let's stop that and run it again\nand this time around\nif we click\nthis is count is one now if I go to the\nnext frame it should not count\nthere you go it didn't count if I go\nagain to the next frame it should not\ncount didn't count\nnow it should count because that's the\nsecond ID\nthen it should count third ID fourth\nfifth sixth seventh\neight and so on so if you if you see\nthat some of the detections are missing\nuh what you can do is you can increase\nthis value you can make it 30. because\nright now uh we have another check that\nis checking uh whether it's a duplicate\nor not so we don't have to worry about\nthat\nand the second thing we can do\nis we can change the color of this line\nwe can change the color of this line\nso that\nwhenever it's detected something\nit turns green so it's an indication\nthat it had a count\nso we can print it\nmaybe here at the end\nor or\nwe can simply print it again\nin red color I know it's it's a weird\nway to do this but you can do this you\ncan just simply print it again and\ninstead of red I will print it as green\nso it's basically overlaying on top of\nit\nokay\nthere you go so if we run this now at\nthis point it is detecting as a count\nbecause it's within that region\nand then it's detecting\nmaybe it's too early\nokay maybe it's too early Let's uh\nreduce this to 20 back\nor let's put it as 15. and let's put\nthis as 15 as well\nyeah I think that's better\ntwo\nthree\nfour five six that's correct\nthen seven that's correct\nuh\nthen we have eight that's correct nine\nthis will be 10 this will be 11 12 13\n14. so it should be 14 till here\nuh then 15 16 it should be 16 when it\ncrosses these all 16 that's correct then\n17 18 19.\n1718\nthat was 19 then 2021 it should be 21\nafter this this is 22. okay this is\ngetting confusing that's why we have the\ncomputer to actually find it for us so\nwhat we can do now is we can go down\nand we can put it as one\nand let's see the magic happen\nso there you go it's really fast and\nit's detecting all those counts and and\nof course it's using the GPU that's why\nit's so fast\n62 63 64 75 blah blah blah blah blah so\nthat's good so\num\nso now everything seems to work fine but\nwhat we can do next is add a little bit\nof Graphics so that it looks a little\nmore appealing so I have a graphics file\nhere\nagain you can find it on our website uh\nwithin the zip folder it's free to\ndownload just go ahead and download so\nthis is the graphics.png we are going to\nOverlay it on our main video and then we\nare going to display the numbers on this\nso how can you do that\nwe are going to read this file we are\ngoing to say image Graphics equals\ncb2.im read now the reason we are\nimporting it uh within the while loop is\nbecause if you don't do that the\ngraphics quality will be really bad over\ntime it will be it will give very bad\nresults so you have to import it every\nsingle iteration\nso graphics.png and we will write CV2\ndots\nunchanged image unchanged IM read\nunchanged so you have to write that\notherwise it will not work properly\nbecause we are going to remove the\ntransparency\nso then what we need to do is at the\nvery end we can overlay the image or\nyeah we can overlay it over here as well\nit doesn't matter so here we are going\nto write that\num cvzone dot overlay\nPNG so image uh the first one is the\nbackground or the\nthe first one is the background so this\nwill be image and the second one is our\nimage Graphics it will overlay and where\nis the position the position is zero\nzero it's right at the corner and we\nwill put it back to our image\num\nin the main file\nso let's run that and see if it's in the\ncorrect position if it is then we will\noverlay the count on it\nthere you go so now the image is there\nlooks good and now we will remove this\nrectangular count\nand instead of this count we are going\nto Simply write CV2 Dot\nput text and we are going to write\nthe image the text will be basically\nstring of the length of the total\ncount\nand then we will have\nwhat do we have next the origin uh the\norigin let me check it should be 2 5 5\nand 100. then we have CV2 dots\nfont Hershey plane and then the the font\nscale let's put it as five uh the color\nlet's put it as black\nor let's put it as red 50 let's let's\nread 50 50 255.\nand the thickness let's put it as eight\nso let's run that\nand see if it works\nand there you go so now you can see the\ncount it looks really good\nso normally you won't be able to count\nit this fast\nso finally the the robots or the AI is\nhelping us solve problems so this was\nour project for car counter and it was a\nreally really simple and as you can see\nit's very fun to do\nand it is very informative so I will see\nyou in the next one\nso now that we have completed our car\ncounter project we are going to do a\nsimilar project to that which will be\npeople countered so the difference\nbetween car counter and people counter\nwill be that we will have multiple\ndirections that we are counting in so if\nwe go to our video people\n.mp4 and we have a look at the MP4 you\ncan see that we have an escalator that\nhas two directions uh one is going up\nand the other one is going down so there\nare people going down there are people\ngoing up so we are going to count how\nmany people went up and how many people\nwent down so that will be the task for\nthis project so what we will do is first\nof all we will\ncopy\nwhich is the best thing ever\nwill copy and paste our complete project\nnow what this will allow us to do is to\nuse our previous code and we can adjust\nit to our new video and our new purpose\nso we can write here\npeople counter and this is Project\nnumber two\nso we will hit OK\nso project number two people counter\nfirst of all we will open it up and we\nwill rename it\nuh where is the rename here is the\nrename so we will write here\npeople counter there you go\nso the right people counter here we have\nsort mask and Graphics now the mask and\nGraphics are going to change but for now\njust to make sure everything works fine\nuh first of all we are going to change\nthe video\nwe will write here people and then we\nare going to run it to see what happens\nso as you can see we are still using the\nlarge version\nso there you go so we have the graphics\nover here which is for the car and we\nhave a line here which is basically\ncounting but as you can see it is not\ncounting anything because it's not\ndetecting anything because if you\nremember we asked it to only detect\nuh cars bikes trucks and\num motorbikes so that that are those are\nthe four classes that we want to detect\nso that is not being detected here\nthat's the first thing the second thing\nis that we have the mask which is being\noverlaid\num uh in the wrong place\nwe need to remove that too and then we\nalso have the counter or the graphics\nwhich which is wrong as well so first of\nall let's bring in the graphics again\nyou will find the graphics\num in the zip file when you download it\nfrom our website so I've created this\nearlier and\nthis is how it looks so this is the\ngraphics\nso what we can do is we can simply\nreplace these Graphics right away so\nthat we have one less thing to worry\nabout so here in the graphics we have\nGraphics or PNG and we will not put it\nat zero zero\nwhat we'll do instead is let me check\nthe exact values it's 730\n7 30 and 2 16. so this is the exact\nposition where it should be so if we're\non this now\nwe will have the graphics being shifted\nthere you go so we have the graphics\nover here so that is the first thing\ndone towards our people counter project\nthen the second thing that we can do is\nwe can open up the detections for people\nso here we have car and here we have the\nconfidence so the confidence will keep\nthe same the rest we will delete\nand we will write here\nperson\nif the current class is person and the\nconfidence is greater than 0.3 so now it\nshould give us the detections but\nwe will have the issue of the Mask\nbecause as you can see the mask is\naround here so it's only detecting in\nthis region so the mask is completely\nwrong\nso what we need to do we need to go\nahead and create our new mask so let's\ngo ahead and do that so we are back here\nin canva and as you can see it's the\nsame file we had this mask earlier and\nnow we are going to create a new mask\nand this is the same video that we saw\nearlier and first of all we are going to\nfill it up\nin the space\nand now we are going to start creating\nour mask we can go back and simply copy\none of the rectangles so that it will be\neasy for us to work with so here\nwe will rotate it\nlike that\nmaybe a little bit lower there you go I\nthink that's good\nwe will copy that and we will paste it\nhere okay it's not straight it's not\naligned with the\nwith the escalator so maybe around like\nthat so let's play the video so that we\ncan see till what points do we get the\npeople coming in out there you go so I\nthink yeah maybe a little bit lower\nand maybe a little bit tilted why does\nit start in the wrong position there you\ngo so yeah I think that should be fine\nand we can remove this because this is\ncorrectly aligned and we can paste it\nhere oh no\nthe angles are different\nokay so we need to rotate it again\nmaybe like that\nand we will put it here there you go so\nthis should be our new mask and we can\npush this back here\nand we will delete this video so that\nbecomes White\nwe need to fill this Gap there you go so\nwe can download this mask\nnow we need to select which page we're\ntalking about page number two and we\ndon't want any transparency or any\ncompression\nand now it's downloaded\nso we will drag it in\nour people counter and we will write\nhere mask the reason I'm showing this is\nbecause if you have a different video or\nif you are working on a different\nproject you can actually do it yourself\notherwise for me to just copy and paste\nit's very easy because I've already done\nthis but I'm showing you this so that\nyou can do it yourself for your own\nproject as well\nso this is the mask and now let's open\nup the region as well so that we are 100\nsure that it is\num working as we expected to\nso there you go so this is the mask\nand as you can see it is detecting very\nwell so one two three four five six\nseven and now we need to fix the counter\nso how many people are going up and how\nmany people are going down so in this\ncase we will have two lines so we don't\nhave just one line we will have two\nlimits first of all let's comment this\nout\nand we will go up and in the count or in\nthe limits we will have two of each so\nwe will have limit limits up\nand limits down\nlimits\ndown\nand then we have total count up\nand total count down\nso we need to put the lines here so I\nhave the lines for up it is one zero\nthree one sixty one\nand two nine six two nine six and one\nsix one\nand then for the limit noun is five two\nseven four eight nine\nand seven three five and four at night\nseven three five and\nfour eight\nnine yeah\nso yeah that's good\nand here we have uh limits because now\nwe'll have some errors because limits is\nnot actually there so what we can do is\nwe can comment all these errors\nyou can comment this control and slash\nis how you comment and then we will\ncomment this as well\nand anything else no okay so now that\nthis is commented and we know there will\nbe no errors what we can do is we can\nchange this line for example to limits\nup\nand we can write here up\nand up\nwhy am I writing it wrong\nup\nand\nup okay and then we will write again for\nthe other line we will write down\nlimits down and I'm going to copy it so\nthat I don't have to manually write it\nagain and again okay\nso let's run that and hopefully we will\nhave two lines uh one for it going up\nand one for going down\nthere you go so this line is for going\nup and this line here is for going down\nso we need to check for both of these\nindividually how many people are\ncrossing that line and how many people\nare crossing that line\nokay so then we will come to the limits\nso here let's do for one\nso instead of limits we will write\nlimits up\nsee how lazy I am I'm going up just to\ncopy it\nthe limits up I'm going to paste\neverywhere\nuh you can actually do a search and\nreplace\nbut again you see how lazy I am okay\ntotal count we'll put up\nwhy I\nI don't know why\nokay total count up dot band ID and blah\nblah\nand here in the in the\nput text\nwe are going to write up\n[Music]\nokay so let's run that and let's see uh\nwhat kind of results do we get are we\ngetting anything good because it is\nsupposed to uh get red green\nyeah so there you go it went green\none count two count\nand three count there we go and four\ncount excellent so this is working fine\nall we need to do now is take that and\nput it down uh in the correct region and\nmake it green instead of red\nso let me check the values exact values\nfor the count is\n929 and three four five three four five\nand Hershey playing Five\nand seven\nand this should be\n139\n195\nand 74. so we're giving it a bit of a\ngreen color\nuh green is more up red is for down\nso there you go so here you have zero so\nthe first one goes so you get one and\nthen the second one is two and the third\none is three\nso now we need to do for the people\ngoing down\nokay so for the people going down it's\nvery simple\nall you have to do is you have to\nuh yeah here the if condition copy that\nand paste it and instead of up now we\nare going to\nwrite down limits down so if we go down\nand here we'll write down down down down\ndown down down down down\nokay and then we have count up so that\nwill become down\ncount up will become down we will copy\nthe text\nand here the values are one one nine one\nand three four five and the color will\nbe 50 50 and 230.\nso this should be total down\nso let's run that and see if it works\nthere you go so we have the red part\nhere the green part here so this is\ngoing up one two\nthree and now it should detect these two\nas well one and two there you go so we\nhave a total number of people four\npeople going up and we have a total\nnumber of two people going down so again\nif it was crowded uh it will detect all\nthe uh other people as well and it will\ndo the calculations\nso as you can see it's very easy to\nactually change the code a little bit\nand uh cater it to your own project and\nit is very fun to play around with these\nvalues\nand because this is something that you\ncan Implement in real time and it is uh\nsomething you can implement it as a real\nworld application that's why it's really\ninformative and fun to do as well and in\nthe next part we are going to learn how\nto create your own custom model so you\ncan create your own data set and use\nthat data set to train your model and\nusing that model you can create your\nproject so that is what we are going to\ndo next so let's go ahead\nso now we have already studied and\nalready learned how actually we can use\npre-trained model to create our projects\nbut now we are going to create custom\ntrained models with our own data set and\nwe are going to use it in our projects\nso how can we do that so we can do that\nby using either nvidia's graphic card or\nwe can use it by running Google collab\nonline so we will be using Google collab\nsince everyone has access to it and it's\nfree to use and if you have your own\ngraphics card installed you can do\npretty much the same thing offline as\nwell pretty much the same code to run it\non your own PC\nso here we have a Google collab opened\nup and it's called YOLO version 8 and\nright now it's empty and what we have to\nmake sure is that the runtime is if you\ngo to change we have to make sure that\nthe runtime is GPU we are going to save\nthat\nnow uh before we actually go and write\nsome code on How to Train Your custom\nmodel we need to know what kind of data\nset that we need so the project that we\nare going to do today is called the PPE\ndetection or the personal protective\nequipment basically the hard hat and the\nconstruction jacket and The Mask so we\nneed to find whether a person is wearing\nthat or not so we have this data set\navailable on roboflow and you can see we\nhave the version YOLO 8 as well you can\nsimply download it from here so if you\nclick on that and you can download uh\nZIP to computer\nand you can press continue Now by doing\nthis what will happen is that you will\nget the data set as well as the yaml\nfile that will allow you to\nrun with yolo version 8. now if you\ndon't have a data set available online\nand if you wanted to create your own\ndata set then you actually need to know\nwhat is the format in which the data set\nshould be so in order to understand that\nwe are going to open up this\nconstruction data set\nso here is that data set if you download\nit in a zip format and if you extract it\nyou will have test train and valid these\nare the three folders and then you will\nhave a data file so in the test file you\nwill have images and labels\nin the train file you will have images\nand labels and valid also images and\nlabels so if you open up test file if\nyou open up images you will see all of\nthese different images that you have and\neach image will have a corresponding\ntext file and in that text file\nyou will see all the different\nclassifications so for example you will\nfind the class number eight at this at\nthese coordinates so these are basically\nnormalized values it means they are from\n0 to 1 in between those values if you\nmultiply it with the actual image size\nyou will get the pixel values so these\nare the four values X1 y1 and the width\nand the height so you can find all these\nvalues for all these different classes\nfor all these different images so if you\ngo to for example train you will find\nimages and within these images you will\nfind these labels and within the labels\nyou will find all these corresponding\ncoordinates so this is the file format\nand then\nthe important thing to have is the data\nso the data yaml file basically it\ngathers all this information uh into one\nplace and if you open that up\nyou will see that\nyou have train validation and test\nfolders so you have to mention where\nthese folders are and then you have the\nnumber of classes that is equal to 10 in\nthis case and you have the names of all\nthese classes so you have hard hat mask\nno hard hat no mask no safety vest\nperson\nand safety cone safety West machinery\nand so on\nso and the rest of this is uh not very\nimportant uh this is just for the\ncopyright uh and all that so what you\ncan do is and there's one more thing we\nneed to add when we bring it to Google\ncollab so what we will do is we will\ncopy all of this data to Google Drive so\nif you go to my drive right now I have a\ndata sets folder and within that data\nset we have construction safety so this\nis the exact same folder\nyou can see here\nyou can see here construction safety so\nyou have read me read me and then you\nhave the data Dot yaml and then you have\nthe test\ntrain and valid these are the three\nfolders if you open that up each folder\nwill have labels and images inside of it\nthere you go\nso this is the basic idea if we go back\nto our data sets\nconstruction safety and this is the main\nthing so here\ndata.yaml we have to make some changes\nhere so here in the file you'll go to\nthe text editor\nif you remember\nhere our file contains strain validate\nand test these are the folders that we\nhave but we need to define the path\nwhere these are present so we have to\nwrite here\npaths\nand then we have to define the path in\nour Drive in the Google Drive\nso that is what we have done here so you\nwill open that up and you will write\nhere paths and inside that you will\nwrite drive my drive and then whatever\nyour folder is so for me inside my drive\nI have the folder data sets inside that\nI have the construction safety and\ninside that we have train valid and test\nso you have to write this path the rest\nof it Remains the Same so this is the\nbasic idea of how you can upload your\nfiles to Google Drive and how you can\nedit it to run it using Google collab so\nthat's the only thing you have to do you\nhave to write here uh path and you have\nto give in the path file I will show you\nit I will show you this again once we go\ninto our Google Drive\nokay that's done but what if you have\nyour own images and you want to create\nthis uh if you want to label it what can\nyou do then now to do that we have a\nvery famous label IMG project that is\navailable on GitHub and you can see it\nis by heart\nex labs\nso thanks to all the contributors and\nthe creators so what you have to do is\nyou have to go to the releases you can\nclick on binary and here you can\ndownload the zip file\nonce you download the zip file you can\nextract it and once you extract that you\nwill get something like this label\nimage.exe now for example if you were to\nfind the poker chips if you were\ndetecting poker chips here in the data\nyou will go to predefined classes and\nhere I have given 5 10 20 50 and 100.\nthese are our five classes in case of\nconstruction safety we have hard hat no\nhard hat\njacket no jacket and stuff like that\nso you will do that and then you will go\nback and click on labelimage.exe once\nyou open that up\nyou can open directory you can select\nfor example\nthese are the images I want to label or\nwhatever so for example these are the\nimages\nso then you can press R sorry you can\npress W to actually select\nand you can Define for example this is\nclass number five and hit OK so this\nwill create this label then you'll press\nW again and this is for example for 100\nyou'll click on 100 and press ok now the\neasy way to do this is do all the fives\nfirst then all the tens then all the\nhundreds all the 20s things like that\nand once you want to export you will\nmake sure that this here it's YOLO\nformat and you will click on Save\nand here it will save the file if you\nhit save it will save the file uh in\nthat location so if we open the\ndirectory\nso here we have this directory\nso let's say we save this one so if we\nopen that up you can see it's the same\nformat so zero is for I think five\nthat's for five so the location of this\nis at this point so these are the\ncoordinates for that then class number\none is present here class number two you\nhave here and so on so this is how you\ncan label these images so the data.yml\nfile you can create yourself as I've\nmentioned it's very easy to do all you\nhave to do is you have to write the\npaths the Train the validation and the\ntest folders and then you have to write\nnumber of classes and the names of the\nclasses that's it and you will save the\nfile it's a simple text file basically\nby The Format Dot yaml\nso once you have done that\nnow we can simply go ahead and upload\neverything uh for example in this case\nuh we can download it from here the\nconstruction safety image data set and\nonce we have that we can upload it to\nour Google Drive once Google Drive these\nare the basically the files we'll select\nall and drag but I will not do that now\nthen once you have that because it will\ntake some time then we have YOLO version\n8. this is our Google collab file so\nwhat we have to do is uh first of all\nyou will go to folder and here in the\nfolder\nyou will see that we have an option here\nto connect your Drive Mount drive so\nmake sure you click on that\nand it will Mount your drive it will ask\nyou to give access once you give the\naccess this will have a cross it means\nit has been mounted so if you go back\nand you click on content\nnot the bin the content I think it's\nstill loading let's wait for it\ncontent there you go so now you have the\ndrive so if I click on the drive\nand then my drive and then I can go to\ndata sets\nand inside the data sets we have\nconstruction safety\nand inside construction safety we have\ntest strain valid and data.yml if you\ndouble click that\nthis is what we have to make sure\nso this path should be correct so if I\nright click here let's say construction\nsafety if I right click and I can say\ncopy path\nand then I can paste it here so this is\nthe path that we need to have content\ndrive so after content uh we need the\ndrive so from drive we are going to\nwrite my drive data sets construction\nsafety so this is what we need so we\nneed to make sure it is\nat the path over here so once that is\ndone\nwe can close this\nand we can close all of that\nand now we can start writing some code\nagain just make sure the runtime\nis GPU\nand we will save this and over here\nwe are going to first of all write a few\nlines of code that's it we will need\nfive lines of code and we will have our\nYOLO running and we will have our YOLO\ntraining so first of all we need to\ncheck whether we are using a graphics\ncard or not so we will write here\nand video\nSMI\nSMI\nand then we are simply going to run it\nso once we run this we will have some\ninformation\nso here you can see Tesla T4 we are\nactually using 153 60 MBS so that's good\nso we are actually using a graphics card\nso that's done now what I like to do I\nlike to uh\nclear all the outputs whenever we do\nthat so then we can write another line\nof code\nnow in this we are going to install\nultranetics so we will write here pip\ninstall\nUltra lit\nl y t i c s ultralytics\nwe will hit enter or sorry we'll hit\nplay\nso now it's done installing so that's\ndone again I will go back to edit and\nclear outputs because I don't like them\nthen we are going to go and we are going\nto import YOLO so like we did earlier\nfrom\nultralytics import\nYOLO\nYOLO is capital\nand we are going to press enter\nand there you go it has been executed\nso now we are going to write the actual\ncommand that will run YOLO and detect it\non an image so first of all we are going\nto write YOLO and then we will Define\nthe task to detect from an image we need\nto detect objects it also has the option\nof classification and it also has the\noption of segmentation but for now we\nwill just do detection you can write\nsegmentation as well if you wanted to\nsegment then we have mode predict there\nis training as well\nthere's validation as well but right now\nwe are using the mode as predict then\nthe model so which model we are using we\nare using yolo8 version uh YOLO version\n8 which is large so we are using the\nlarge model and the confidence level\nminimum should be 0.25 and what is the\nsource the source is basically the image\nso you it can be here in your drive or\nyou can give an online source so for now\nwe are just giving it an online source\nthis is basically ultrolytics.com\nImages slash bus dot jpg if you had your\nown image you can import it here and\ntest it out or if you have an image\nonline you can test it from there as\nwell so once that is done this is the\nMoment of Truth we will press enter\ncontrol enter and then it will execute\nthis command so first of all as always\nit is going to download the weights\nbecause it already does not have that\nthat is done\nnow it is running and it is using 2.0\nTesla T4 this is the GPU that it's using\nso that's good we know that it's working\nit's downloading the image and the image\nhas been downloaded and it has executed\neverything\nso as you can see this is now done and\nyou can see it downloaded the file and\nthen it gave us the result that there\nwere five people\ndetected one bicycle and one bus so if\nwe open this up uh it will not actually\nshow you the bounding boxes and all that\nbut we will need to write some code for\nthat\nbut for now you can see there's one\nperson here second here third here\nfourth hair and maybe a fifth inside\nwell over here so five people uh one\nbicycle one bus so this is the bus\nI'm not sure where the bicycle is though\num and yeah so that's the idea so it\nmeans it is working so what we need we\ndon't need to test any images here we\ncan run it on our actual offline code\nand we can write the same code here and\nit will work fine as well but we just\nwanted to check whether it's working or\nnot whether the installations are\nworking or not so once we have confirmed\nthat the installations are done what\nwhat we need is a simple one-line code\nto actually uh do our custom\ncustom Training\noh\ncustom data training\nso\nthat's it and then what we will do we\nwill add our code and I'm going to paste\nit here so now we have a similar command\nlike before we have YOLO then we have\ntask again we have detection but this\ntime around the mode is training not\nprediction it is training and it is\ntraining based on again the large\num what you call the model you can use\nthe Nano small or medium as well and\nwhere exactly is the data so this is uh\nwhat you have to Define this is what you\nhave to change so data basically equals\nuh double dot slash content drive so\nthis is the exact path that you will\ncopy and paste here so Double Dash back\nuh double dot back content drive my\ndrive data sets construction safety\nslash data dot yaml so you have to give\nthat file that file is the linking file\nfor all the data set so you need to give\nthe location of that file\nthen you can Define the number of epochs\nand the image size so that's pretty much\nit and now all you have to do is press\nrun and see the magic happen so it will\ntake a while to actually train so we\nwill let it train and then we will come\nback to it so first of all it is setting\nup all the weights here you can see 589\nof 595 items from pre-tained weights so\nwe are using the pre-drained weights to\nactually train our own model you can say\nit is transfer learning as well\nso the optimizer is has a learning rate\nof 0.01 and let's see\nwhen does it start so there you go so\nright now it has started so this is\nEpoch number one\nuh did it start not yet let's wait for\nit to start\nso now you can see the epoch has started\nthe counter has started and here you can\nsee the time that has taken already\nand the estimated time that is left\nso this is basically the idea so each\none of these will take for example\nuh two minutes or three minutes so you\ncan calculate from there it will take\nfor example 150 minutes so anyways let's\nwait for it to finish and I will see you\nonce it's done\nso now you can see that the process has\ncompleted the training is completed and\nif you go to runs this is basically in\nour content if you go to runs\nand in detect\nyou go to train\nyou will see all these files generated\nso the main thing that we need to look\nat is the best.pt these are the weights\nand this is the last weight dot PD so\nand the rest of these are basically uh\nthe parameters the response of our model\nso for example you can see over here\nresults dot PNG\nyou also have the so here you can see\nthe mean average position values and you\nalso have the recall and the Precision\nvalues and you have the training loss\nfor the class and for also for the box\nand then you also have the confusion\nMatrix so all of these things you can\ndownload you can click here and download\nit will be easier to see\notherwise you can open it up on Google\ncollab as well so here you can see the\nconfusion Matrix of how well it\nresponded uh to the training so then\nwhat you will do is you will download\nthe best file\nand once that is downloaded you are\ngoing to bring it to\nour project so here we are going to name\nour projects so we will copy YOLO with\nwebcam because that's pretty much what\nwe're doing we are running it with\nwebcam and what we will do is we will\nremove all of this and we'll write\nproject three and here we will write PPE\ndetection\nso this is our project three and it says\nYOLO webcam so we will double click that\nand right click and rename and we will\nwrite PPE\ndetection\nthere you go so now what we can do is we\ncan use the PPE videos so if we go here\nwe can open in our Explorer and you can\nsee we have these three videos this is\nthe first one\nthis is the second one\nand this is the third one so we are\ngoing to test on all three and we'll\nalso test on the webcam I do have a hard\nhat and uh I'm pretty sure we can find a\nmask and I also have the construction\njacket so maybe we'll try that as well\nso uh let's write here PPE dash one I\nbelieve that's the name and uh yeah\nthat's good and then we have to change\nthe\nmodel\nso here we are just simply going to drag\nand drop so here this is the model so we\nare going to drop it here and we are\ngoing to call it PPE\nso here we will change it to PPE and we\nwill remove all of this\nso let's go ahead and run it\nso let's\nuh actually one more thing I forgot we\ndo have to change the class names\nso if we open up our files uh that we\ngot\nthe data dot yml file we have the names\nof all the classes so we can simply copy\nit from there so this is in the data.yml\nfile and we can replace it with our\nclass names\nthere you go so these are the class\nnames and now if we run it it should\nwork fine\nthere you go so it's detecting the\nperson it's detecting the hard hat no\nmask and you can see it also detects\nsafety or no safety vest so it's not the\nmost accurate but it is giving us some\nuh good readings so what you can do is\nyou can train it with more data set and\nfor longer ebooks for more epochs to get\nbetter results so here you can see\nsafety vest no mask hard hat and person\nperson hard hat no mask and there you go\nlet's try for number three\nthere you go we have safety vests hard\nhat person no safety vest here we have\nno mask safety West started okay so what\nwe can do is uh this is a little bit\ndifficult to see what exactly has been\ndetected or and what's not been detected\nso what we can do is we can check which\nclasses are we detecting and based on\nthat we can assign a color\nso here we can put a normal rectangle\nor do we need to put yeah let's put a\nnormal rectangle instead of the corner\nrect so we will write here CB2 Dot\nuh rectangle and image and we will give\nin the\nX1 y1 and the X2 and the Y2 and then we\nare going to\nand give it in the color\nso this will be\nuh my color let's say\nmy color so by default my color\nmy color equals red so 0 0 2 5 5.\nand then we are going to write down the\nthickness the thickness let's say it's\nthree\nand that's pretty much it so\nand then for this part here put extract\nwe are also going to assign\nthe color color\nfor the rectangle\nor color for the background\nand color for the text so the color for\nthe background let's make it\nmy color\nand for the text we have to make it\nwhite\ncolor for the text we are going to make\nit white so 2 5 5 2 2 5 5 and 255.\nso let's run this and see what happens\noh we need to remove the corner\nrectangle\nso what we are trying to do is that it\nshould detect uh it should show us the\nred color and in in the case where\nthere's no mask or no hard hat and in\ncase it is present it should give us\ngreen\nso\nokay so yeah now it's my color is\nshowing but it didn't show for the put\ntext rect let's put it for the\ncolor wrecked as my color as well\nyeah now it's good so it's showing red\nfor all of these so now we need to make\nsure if uh by default it will be red if\nwe are detecting one of those classes\nthat have the green then it should\ndetect green for example we have the\nhard hat we have the mask and we have\nthe uh safety vest so these are the\nthree classes\nso what we will do is\nwe are going to check\nfirst of all we will write here current\nclass equals\nuh class names at CLS\nand if current class equals hard hat\nis it capital yes hard hat\nthen\nmy color\nequals zero two five five\nand zero\nlet's try that out\nso now all of them are green\nso what's the issue\nif current class equals hard hat\nmy color is zero two five five\num\ncurrent class is coming from here\nput text\num\nand we need to give it after so the\nrectangle because this has my color\nneeds to be here\nso we will put it here\nand\ncurrent class equals hard hats\nhard hats\nwhy did it show all of them green\nthat's weird\nlet's print the current class\nso when we are printing the current\nclass it shows person safety West safety\nbest safety vest oh we need to write\nelse\nuh else because it's not changing after\nthat my color equals\nmy color equals uh zero\nuh two uh zero zero and two five five\nnow hopefully it will be better\nyeah so there you go we have green for\nhard hat and the rest are red okay so if\nmy color class is hard hats or my\ncurrent class\nis\nsave the vest\nuh safety vest and mask\nor my\ncurrent class equals\nmask\nthen it is this otherwise the rest of\nthem are red\num\nand what else can we do we can make it\nsmaller because scale is not that good\num we are using the put text rect we can\nmake the scale 0.5 let's say and the\nthickness is one that's fine\num and the offset\noffset let's make it five instead of 10.\nso it will be a little bit smaller so\nthat it's easier to know what is going\non\nthere you go it's there's a lot of\noverlap that's why it's a little bit\nconfusing but you can see that when it's\nthe hard hat it's detecting it's showing\na screen when it's not it's showing us\nred\nuh let's try it actually the scale it's\nvery small so let's try one and let's\ntry another video the first one was the\nmost clear\nlet's try that one out\nthere you go so we have the hard hat we\nhave the person no mask and safety vest\nuh or what we can do is we can assign a\nthird color as well because if it's a\nperson then we don't need to worry about\nthat so all the red colors and all the\ngreen colors and then we're given else\nso if it's current mask and all of that\nthen we can write else if\nelse if\nand then we can write else\nelse my color is purple\nor let's say blue\ntwo five five zero and zero okay so uh\nit's no hard hat\nno hard hat\nand no safety vests and no mask\nyep\nthese are the ones for red uh then\nsafety cone\nsafety vests we don't really care about\nthat the the rest are blue\nso let's run that so the person now\nshould be blue and we should have green\nfor\nokay it's opposite\nhard hat safety vests\nand we also need to give in maybe a\nthreshold\nso that we don't get a lot of wrong\ndetections\nif the confidence level is greater than\n0.5 let's say\nthen only we'll do all of that\nso yeah we were talking about the color\nso no hard hat\nuh all of this is\nis supposed to be red\nthese are supposed to be green\nso\nand the rest are blue let's run that\nagain\nthere you go so we have the safety vest\nsafety hard hat and the person and then\nwe have the no mask so when it's not\nvery clear it's not giving good results\nbut overall it seems to work fine\nso now we can also try it with the\nwebcam so I will put it\nokay let's keep it for video\nand for webcam we can open this up\nand let's try it out\nso as you can see I'm not wearing a hard\nhat no mask and no safety vest but it's\ndetecting the person so if I wear a mask\nyou can see it's detecting the mask and\nif I wear the hard hat you can see it\ndetects the hard hat there you go if I\nremove the mask says no mask\nthere you go and we have the hard hat\nand no safety West\nso now we are headed to project number\nfour and in this project we are going to\ncreate a poker hand detector in which we\nwill first of all detect all the\ndifferent cards and once we have the\ncards we are going to determine what\npoker hand do we have so this is a very\ninteresting project because it has\nmultiple layers and the first one is to\nactually detect the cards which we will\ndo by YOLO and the second one is\nactually classifying uh what hand do we\nhave so there will be a little bit of\ncode involved there\nso where are we getting the data from\nthe data is available on roboflow\nuniverse and we are downloading the\nplaying cards image data set and we will\ndownload the YOLO version 8 so you can\nsimply click on that download zip to\ncomputer and you can press continue once\nit is downloaded you upload it to the\nGoogle Drive\nso let me show you uh where that is\nso this is the playing card data set so\nwe have validation training and test\ndata sets so we have labels and we have\nimages for each of these labels\nso like we have seen before in our BBE\nproject it is the same format and the\nthing that is different is again the\ndata.yml file so let's open that up in a\ntext editor and let's see what changes\nhave we made there so this is our data\ndot yml file and here you can see we\nhave number of classes as 52 and all of\nthese classes are based on the rank and\nthe suit so here it's 10 of Clubs 10 of\ndiamond for example so all of these as\nyou can see\nwe have here and then we have uh the\ntraining validation and test folders but\nwe also have defined the path so the\npath is drive my drive\ndata sets and playing cards fixed so\nthey had an issue earlier where they had\na duplicate so uh I believe it's fixed\nnow earlier they had 53 classes because\nthere was a duplicate but now it's fixed\nso I had to upload it again and use this\nas playing cards fixed so this is what\nwe have and then what we do next what I\ndid next is actually to save some time I\nran the exact same\nGoogle collab so you check the Nvidia\ndriver or the Nvidia graphics card and\nwe have the similar one that we had\nearlier which is Tesla T4 it is 16 GB of\nmemory and then we install ultralytics\nand after that we import Yolo from\nultralytics and this you don't have to\nperform just to make sure it's running\nyou can do that\nand then you start the training process\nso in the training process all you have\nto do is you have to change the data\npath so it will be content drive my\ndrive data sets playing cards fixed\nslash data dot yaml so this is what we\nhave to do and uh we'll have 50 epochs\nso right now it's taking a long time so\nmeanwhile it's training we are going to\ngo ahead and understand the basic\nconcepts of Poker and how we can create\na classifier for poker so that part does\nnot involve object detection but it is\nquite crucial to the project so we'll\nfirst go through that meanwhile this\nwill finish\nwhat do you call training and then we\ncan take the data and start uh the\ndetection as well so this is up and\nrunning and by the way this is the\ndata.yml file you can see it's here as\nwell so that's good\nso let's go back and try to understand\nwhat exactly uh is a poker game and how\nwe can\ncreate a classifier for it so to do that\nI've created a simple uh poker hands uh\nwhat you call classifier or you can see\nthis is the data sheet or the cheat\nsheet\nso we have a total of 10 different\nclasses so high card pair two pair three\nof a kind and so on so we will start by\nunderstanding that first of all you have\nto compare five cards so everyone has\ntwo cards and the rest are laid out uh\nin in public domain so everyone has\naccess to those cards that are in public\ndomain but the two cards that you have\nare only for you to view so what you\nhave to do is you have to check your two\ncards and you have to check the rest of\nthe cards that are in public domain to\nfind the best possible scenario so the\nbiggest hand so whenever we have these\nfive cards we call it a hand\nso we have a total of 10 types of hands\nand to understand these we need to\nunderstand what is Rank and what is suit\nso in poker uh or in playing cards we\nactually have for example this is an a\nof Hearts this is Queen of Clubs so a is\nbasically the rank and hearts is\nbasically the suit\nso five is a rank and clubs is a suit so\nsimilarly we have seven as the rank and\nDiamond as a suit so what we need to do\nis we need to understand that first of\nall we will differentiate these two some\nhands are based on just the ranks and\nsome hands are based on just the suits\nand some of them are a combination so\nlet's start with the easiest one which\nis appear\nwe will get to the high card later on\nbut let's start with the pair the pair\nyou have same rank of two cards so the\nrest of them they don't match but two of\nthem they match so it can be 2-2 it can\nbe five five it can be seven seven it\ncan be a a so whatever the card is you\nshould have a pair of the rack not the\nsuit of the rack so for example you can\nsee this is a pair of suit but that does\nnot count so you don't have a pair of\nsuit you only have a pair of rank\nokay then we have two pair two pair is\nsimilar to one pair instead that you\nhave two of them instead of one so you\nhave a king king and five five so that's\ntwo pair then you have three of a kind\nin three of a kind you have three of the\nsame ranks so it can be\n777-88 king king king queen queen queen\nor ten ten ten in this case the other\ntwo that don't matter\nthen you have a straight in straight you\nhave consecutive numbers so for example\nseven eight nine ten Jack now here again\nthe rank matters not the suit we are not\nlooking at the suits at all uh till this\npoint so for example you have two three\nfour five six that is also a straight\nthen you have uh seven eight nine ten\nJack then you can also have 910 Jack\nqueen king that is also a straight so\nyou should have consecutive ranks so uh\nif you do seven plus one that should be\nthe next one eight plus one nine so\nthat's the idea by the way the rank for\nJack\nis 11 so after 10 you have uh Jack queen\nking and Ace so Jack is 11 ranked number\n11. Queen is 12 King is 13 a is 14. so\nthat's the biggest rank okay uh after\nstraight now comes the suits\nso if you have all the same suits then\nyou have a flush so it can be all\ndiamonds it can be all Hearts it can be\nall uh clubs all Spades whatever it is\num if all of them or five of them uh are\nof the same suit then it is a flush\nthen you have a full house in Full House\nyou have three of a kind which is you\nhave three cards that are of the same\nrank\nand then you have a pair\nso you have two two two and then ten ten\nit can be five five five and seven seven\nso\nthree of a kind plus a single pair\nthat is your full house then you have\nfour of a kind which is very simple you\nhave four of the same ranks so five five\nfive five seven seven seven seven nine\nnine nine nine king king king and so on\nso the ranks are pretty much the same\nagain we don't care about the suits\nactually the suits you will have all the\nsuits so uh it's it's obvious and the\nlast card we don't care about the last\ncard\nokay\nthen we have a straight flash in the\nstraight flush we have a straight and a\nflush so we have the ranks and we have\nthe suits as well so the suits as you\ncan see all of them are clubs and uh\nstraight is eight nine ten Jack Queen\nagain it can be two three four five six\nor any other uh any other formation but\nit also has to have the suits that as\nthe same\nand the last one which is the highest\none it is that you have\nyou have a straight but starting from\nAce\nso Ace king queen Jack 10. so that is\nthe highest straight plus you have a\nflush\nso that is a royal flush\nso uh you have for example hearts hearts\nhearts hearts and then you have a king\nqueen Jack if it starts from queen or if\nit starts from King King Queen Jack 10 9\nno it's not a royal flush in that case\nit is simply\na straight or a flush so uh sorry\nstraight flush in that case it's a\nstraight flash so that is the basic idea\nand the last one if you don't have any\ncombination then you have the highest\ncard so the biggest card so for example\nif somebody uh had a pair and you had\nthe highest card the pair will win so\nwith the high card if both of you don't\nhave anything like there are two players\nplaying against each other your five\ncards versus their five cards if both of\nthem have no classes at all none of them\nthen you check which one has the highest\ncard so if you have the king and the\nother one has Queen then you win\nso that's the idea so what we will do is\nwe will classify one hand so we'll not\ndo two hands we'll do just one hand uh\nof uh our own hat so uh we will send in\nPi values uh as strings and it will\noutput us the name of the hand so that\nwill be interesting too uh accomplish so\nwe will keep this image open and I will\nput it on the side\nand we will come back to it every now\nand then so let's start by creating the\nfolder\nand we are going to call it\nprojects\nfor\npoker hand\ndetector\nso poker hand detector we're going to\nstart off with that okay so what we'll\ndo is we will create a function and this\nfunction we will input it five strings\nor you can say a list with five strings\nand it will output us the result so we\nwill create it as a module so that it is\na separate code in a separate file and\nwe can simply link it to our project\nso here we will create a new python file\nand we will call it poker hand the\ntector\nuh function let's call it\nso here we are going to\nwrite\nuh\ndef find\npoker hand\nso that's how you write what you call a\nfunction and we have to return something\nand right now we will Return to Zero\nokay so that's good and then what we\nhave to do is\nuh we we will be testing it as well so\nwe need to make sure that we run this\nindividually and then we will integrate\nit to our project so we will write if\nunderscore underscore name\nequals underscore underscore main so\nthis means that it is checking if this\nis the main file that is running then it\nwill run this code if some other file is\ncalling this function it will not run\nthis code\nso yeah we have to put double equal\nthere you go so now what we can do is we\ncan uh send in a few uh what do you call\nhands so let's start off\nso here is our image\nso let's start off by creating all these\nhands and one by one we are going to\nsend it to see what it gives so first of\nall uh let's start\nwe are going to start at the top we'll\nstart with royal flush so a of Hearts K\nof Hearts Queen and so on so here we\nwill write\nuh find\npoker hand and we will send in a list\nand inside the list we will give a of\nhearts\nthen\nK of hearts\nthen we will give\na queen of hearts then we will give\nChuck of hearts\nJack of Hearts and then we are going to\ngive 10 of hearts\nso this will be our royal flush and in\nfront of it we are going to write royal\nflush\nand then we will copy this and we are\ngoing to paste and then the second one\nwe will do is straight flush so again\nQueen Jack 10 9 8 but all of them are\nclubs\nso Queen\nqueen of Club\nthen Jack of Club\nthen 10 of Club\nnine of Club\nand eight of Club\nso this is not a royal flush it is a\nstraight Str a ight straight Flash\nso these are the two that we are\nstarting off with\nso let's run that and see what do we get\nso no actually we'll get nothing so what\nwe have to do is we have to return\nuh let's return\nwe will put here\nhand\nand we will return the hand\nokay or no we'll not return the hand we\nwant to print it so we will print\nthe hand\nokay so let's run that and see what do\nwe get\nuh now we are running the previous one\nright click and run and there you go so\nnow we are getting this\nuh these two as the output so that's\ngood we have started and the first thing\nwe will do is we will find the ranks and\nwe'll find the suits individually and\nput them in a list because what we are\ntrying to do is we are trying to\nunderstand some of them we will\nclassify based on ranks some of them\nclassifying based on suits so if we have\nthem in a list we can play around with\nthem very easily so that will be our\nfirst step we need to\nmake sure that we have the ranks and the\nsuits uh all in two different lists so\nhere we will write ranks\nequals a list and then suits equals list\nso these are the two lists that we have\nand we are going to Loop through the\nhands\nand uh for card in hand\nwe are going to Loop through the card\nand first of all\nuh\nwhat we can do is if if I wanted the\nrank for example I want the rank which\nis the first element here so all I have\nto do is I have to say card\nat zero right so let me print that out\nso if I write that that will be\nmy rank so I'm getting a I'm getting K\nQueen Jack one uh and all that so\nbasically I'm getting what I need but if\nyou look at the last one I'm getting one\nthat's wrong that's not the actual rank\nso what I can do is\nI can I can put an if statement that\nif the digits are three\nthen it means it is a 10 okay so then I\nwill take two values instead of one so I\nneed to get 0 and I need to get\ntill 1.\nbecause that's not inclusive so then I\nwill get 10 but for the rest of them I\nshould not get 2 I should get only one\nso that's the idea so I have to check\nhere if the length\nof\ncard\nequals 2\nor should we write yeah equals to\nthen it will be\nrank equals\nuh card at zero\nelse\nrank\nequals card\nat\nzero sorry zero two two\nso now if we print\nthe rank\nthen it will show us so for a king queen\nJack it's fine it's getting one and for\n10 it is getting two so that's the idea\nso for eight nine it's fine for 10 it is\ngetting the 2 that is exactly what we\nneeded so this way\nwe are basically uh getting the rank and\nwe also need the suits\nso if\nif the card has the length of two then\nthe suit is the next value right so the\nsuits\nequals\ncard at one\nbut if that's not the case\nthen the suit is basically card at two\nso 0.2 so that's the idea and now we\nwill have the rank and the suit so they\nwill be separately detected there you go\nso a of Hearts King of Hearts Queen of\nHearts ten of hearts and so on so now we\nhave it separately so all we have to do\nnow is we have to append it to our list\nso here we will say ranks dot append\nrank\nand\nsuits.append suit\nand we have to do it for each card so\nthis should be inside\nand we can remove that so once that is\ndone just to make sure we are headed in\nthe right direction we will print the\nranks\nthis will be a list of ranks\nand then we will also print suits\nsuits\nthere you go so we have the list of\nranks and we have the list of Suits we\nhave the list of ranks\nwe have the list of suits\nso that's good so now first of all we\nare going to start off\nby Royal Flush so here\nwe are going to check for royal flush\nand we'll check the rest later on\nnow how can we check for Royal Flush in\nRoyal Flush the first thing we need to\ncheck is whether it is a flush or not\nif all of them are same\nif all of them are same in the suits\nthen it is a flush\nso how can you do that\nso basically what you can do is you can\ncheck\nif or let me just print it\nso that it's easier to see actually what\nis happening so what we can do is we can\ncheck for the suits\ndot count\nthe first element okay it can be\nanything\nbecause all of them have to be same in\norder for this to be true so you can\npick any element from the list so you\ncan write suits at zero\nso basically we are asking it to count\nthe number of times you are getting this\nelement so for example it will take H\nand it will count how many times we have\nH in this list\nif that is equal to\n5\nthen it means all of them are\nuh it's a flush then all of them are the\nsame then it's a flush so let's run it\nso in the first one it's true and in the\nsecond one it's also true but let's put\nanother hand\npoker hand\nwe are going to put let's say\nwe will put another hand\nuh let's put four of a kind which is\nnext so it is five five five five and\nqueen\nso it is five of Club\nfive of\nSpade\nfive of hearts\nfive of diamond\nand we have Queen of Hearts\nQueen of Hearts so this is what is it\nfor of a Kind so in that case it will\ngive us a false because all of them are\nnot same so the last one it is giving us\nfalse because it is not a flush so this\nis only checking for a flush\nby the way the next one no the one after\nthat is a flush so let's put a flush as\nwell so we'll have another one\nso let's just put full house as well\nwe'll put Full House and flush both of\nthem so these are two two two two and\nten ten\nuh so two of so I'm writing it exactly\nlike it is so that there is no confusion\nof what we are doing uh two of diamonds\nand two of spade\ntwo of spade two of spade what is this\nwhy is that like like this\nit should be hard not\nClub okay two of spade and then ten of\nhearts\nand then turn off space Club\nthere you go so this one is what is its\nFull House\nuh full\nhouse\nand the next one\nnext one will be\nuh plush\nso in flush you have uh I'm using again\nthe same one two of diamonds then all of\nthem they will be diamonds so this will\nbe king of diamonds this is seven of\ndiamond\nthen we have six of diamond\nsix of diamonds and five of diamond\nso let's run that\nuh it's giving us a lot of outputs so\nlet's not print the hand and let's not\nprint the ranks and suits\nand we run that and there you go so the\nfirst one has a flush so it's true the\nsecond one is also a straight flash so\nit's true the third one is four of a\nkind so it's false\nthe fourth one is also false because\nit's a full house and then we also have\nanother flush so it's true so this means\nthis methodology will first of all tell\nus whether it's a plush or not so we can\ncheck for royal flush and\nwe can check for straight flush\nand we can also check for flush so we\ncan check three of these things right\naway so if we go in if we have this\nfirst condition if that is true it means\nit is a flush now once we know it is a\nflush we can get to the Second Step\nchecking whether it's a royal flush or\nnot so in in the royal flush\nwe must have the ranks so uh\nbut the thing is that it might be a of\nHearts King of Hearts but it might be\nsorted wrong so we need to make sure\nfirst of all that they are sorted\nproperly so the biggest one the highest\nrank should be the first but a king\nqueen does not have a rank yet because\nif we print it out if we print out the\nranks\nuh let's just write pass here if we\nprint out the ranks it will not give us\nfor a king and queen it's simply writing\na king queen Jack which is which is\nwrong in our case because\nuh we need to work with values uh when\nwe sort them out we want 14 to be a\ninstead of just writing a otherwise it\nwill not be organized because if I put\nif I remove a here and I put a here\nthen it will give us K first and a\nsecond which is still a royal flush but\nit's not in sequence so we are not able\nto get the rank properly so what we'll\ndo here we'll simply write if\nrank equals\num\na\nthen rank\nequals 14.\nthat's how simple it is\nso\nelse if\nrank equals\nKing\nwe'll copy that paste and paste\nokay so rank is a the ranking will be 14\nrank is K it will be 13.\nrank is Q it will be 12.\nrank is\nJack it will be 11.\nthere we go so now if we run it we will\nhave numbers so 13 14 12 11 10. now what\nwe need to make sure is that they are\nsorted properly if if they're sorted\nproperly then it will be easier for us\nto check for oil flush so what we can do\nis we can simply write sorted\nso sorted ranks\nactually we will do it after the\nsorted ranks equals sorted and we will\ngive in our ranks that's it\nso if we print\nranks again\nyou will see that now it will be sorted\nokay so ranks when we are sending them\nin\nuh they are not integers they are\num\nthey are strings so we need to convert\nit into integers\nthere you go so now you will see uh\nactually it didn't do anything why is\nthat oh because we printed ranks not\nsorted ranks okay let's run that again\nand you will see for the first one you\nwill see this one is 13 14 12 but now\nyou can see it's 10 11 12 13 14. so it\nhas sorted it so now what we can do is\num actually\nlet's forget about this order right\nbecause\nor we can use the sorted ranks but what\nwe can do is uh instead of saying that\nthe first one is 10 and the second one\nis 11 we can just say if it's in this uh\nthat that should work as well so we can\nwrite if\nuh 14\nin sorted ranks\nand so that's how you can check if 14 is\npresent in the assorted ranks\nand\nuh and then we will write another and\nthen another and\nthen we will write another and and then\nanother end so if 14 is there then 13 is\nthere then 12 is there\nthen 11 is there and then 10 is there\nI wrote one extra\nif that is the case then it means it is\na royal flush so we will print\nRoyal\nroyal flush\nso let's run that\nand there you go so here you can see it\nsays Royal Flush because this is true\nfor this the rest of them it's not true\nso what we will do is\nin order to get the output we are going\nto say uh the we are going to create a\nlist called possible\nfor simple ranks\nand this list will contain all the\npossible ranks so if for example we are\ngetting a royal flush we are going to\nput the value of 10 inside it we are\ngoing to append because sometimes what\nyou can have we can also detect a single\npair\nwhen it's two pair right so we need to\nfind the highest one so we will put all\nthe possible scenarios inside this list\nand we will pick the highest one so if\nit was for example\nif it detected that it is a three of a\nkind and it also detected it is a full\nhouse then for Full House it will be\nseven and for three of a kind it will be\nfour so we will pick seven and that will\nbe our highest uh hand so that's what we\nare going to do so in this case our\nRoyal Flush is 10. so we are going to\nput\num in inside here we are going to write\nuh possible ranks dot append\n10 so we are going to append that and\nonce we do that in the return we are\ngoing to return\nuh the possible\nranks\nmaximum value\nso that's the basic idea\num or should we return no that will\nreturn only a number wait what we can do\nis we can write the poker\npoker\nand\nranks\nequals\nwe are going to create a dictionary and\nfor each one of them we are going to\ngive a number and a name so it will be\nroyal\nLush\nthen for the second one for number nine\nuh it will be straight flush\nand for number eight\nwill be four of a kind\nthen\nfor\nnumber seven\nit will be Full House\nthen for number six\nit will be flush\nthen for number five it will be straight\nght\nand then for number four it will be\nthree of uh kind then for number three\nit will be two pair\nfor number two\nit will be pair\nfor number one\nit will be\nI covered\nso these are all our ranks and now what\nwe can do is we can\ncheck the max possible and then we can\nwrite here poker ranks\nat this value\nso we will return that and we can simply\nprint that out so here for each one of\nthem we can simply write print\nprint print\nthere you go so uh now let's remove all\nthe\nprints\nand\num what we will do is\nor should we print here\nno let's not print here\nlet's print it inside so we'll not have\nto write it again again\nso we will print the hand and we will\nprint what it is\nlike what did it detect so here print\nhand\nand prints this\nor let's give it uh let's let's call it\noutput\nis this and then print the output\nand then put the output here\nreturn the output there you go so yeah\nlet's run that and see what we get\nMax argument is an empty sequence so\nthe first one you can see it is a royal\nflush\nso it is returning that if nothing is\nthere\nuh if if there are no\nwe can simply write\nif\nuh\nnot possible ranks\nit means if possible ranks is empty then\npossible ranks\ndot append\none it means it is high card right if we\nhave not actually coded for the flash or\nthe straight or full house for now it\nwill just say\nuh high card so as we go along and we\nkeep adding uh it will keep fixing so\nfor now you can see it says Royal Flush\nfor the first one for the second third\nfourth and fifth it says high card\nso now we are heading in the right\ndirection we are getting a good output\nwe can see the results and here we are\nchecking for this sorted ranks let's\nkeep it for now maybe we will need it\nlater but actually we don't really need\nit for now\nuh so once we check that if this is the\ncase\nuh the second one we are going to check\nis for straight flush so if we know how\nto check for straight\nwe can just put the straight code inside\nthis if statement and it will become\nstraight flush because this statement is\nchecking for flush because if we write\nhere else\npossible dot append\nis uh what is flush flush is number six\nso we'll put here six and if we run this\nnow\nyou will see that this one is detected\nas a flush and this one is detected as a\nflush so this one is correct it's a\nflush but this one is a straight flush\nso we need to fix that we need to add\nanother if statement here to check for\nstraight how do you check for straight\nlet's do that first\nso here we are going to write\nokay so what happens is in order to\ncheck for straight now we need the\nsorted ranks so for example we will have\nin the sorted ranks we will have let's\nsay 10 11\n12 13 14.\nso this is our sorted ranks so what can\nwe do we can take the first element\nor we can take this element\nand we can say check the element before\nthis\nand add 1 to it so right now we are\ntalking about 11 we will take 11\nand then we will take the element before\nthis which will be 10 and we will write\nhere 10 and we will say that add 1 to\nthat element Plus 1. and check if they\nboth are equal\nso then it will become 11 equals 11. so\nthat is true then it will go to the next\nelement so it will go to 12. then it\nwill check the one before it it will be\n11 so it will write 11 and it will add\nPlus 1. so it will check if 11 plus 1 is\n12 if that is true it will become true\nso we will keep checking for all of them\nso if all of them give us true\ntrue true true true true true\nthen we will say okay it's a straight\nif even one of them gives us something\nelse for example uh this one is let's\nsay\nseven so we write here 11 and it checks\n7 plus 1 is 8. this one is false but the\nrest of them are true then it's not as\nstraight so that's how we will check it\nso to do that we are going to write some\nefficient code\nso we are going to write 4\nI in range\nso we are basically looping uh and we\nneed to Loop through one because we are\nstarting off uh let me put it back\nbecause we are starting off\nwith this value not this value we will\npick this value and add 1 to it uh sorry\nadd 1 to the previous one because this\nvalue does not have a previous value so\nwe will start from 1 and not zero so\nhere we are going to write\nfor I in range\none till the length of our\nsorted\nranks it will be five so it should be\nfine but we are still writing it so if\nthat is the case so to make it a little\nmore efficient we are going to write a\nsingle line for Loop so instead of\nwriting it after we will write it before\nthat so what exactly are we writing we\nare writing that sorted ranks at I\nso sorted ranks at I uh not one\nnot in banks at I so this will be for\nexample 11.\nthis is equal to\nsorted ranks at Pi minus 1\nplus 1. so this is what we are doing we\nare putting 11 equals 10 plus 1.\nright if that is the case\nand what we can do is we will keep\ngetting the answer and all of this will\nbe stored in a list so in that list we\ncan just write here all\nif all of them are true then it will\ngive us true if even one of them is\nfalse it will give us false\nso that's the basic idea so we need to\nput another bracket here\nand we will put an if statements\nor is there a problem one two\nthree okay there should not not be a\nbracket here okay so that's the idea let\nme comment this as well\num\nlet me put this as well here\nso that you understand what exactly\nhappened\nso if that is true it means it is a\nstraight\nso we can write possible ranks uh dot\nappend what is a straight\na straight is number five\nnumber five did we add a straight so far\nno actually let's add all of them\nbecause that that's annoying you know\ngoing back and forth so after flush we\nhave straight\nwe have straight then three of a kind\ntwo pair pair and\nhigh card so flush then we have straight\nthen we have three of a kind\nthen we have two pair\nthen we have pair and then we have\nHigh Court\nthere you go so now we did till flush\nnow we are going to do straight so for\nstraight we have\nJack of Spades clubs jack off Club\nthen we have 10 of hearts\nthen we have nine\nof Club\nthen we have eight of Club\nand then we have seven of diamond\nso this is our straight and then poker\nhand three of a kind we have ten of\nhearts\nten of Hearts then ten of Spades\n10 of Spades or is it no it's not Spade\nit's Club my bad\nuh ten of clubs and then ten of diamonds\nten of diamonds and then two of diamonds\ntwo of diamonds and then two or five of\nuh\nSpades\nthen two pair we have\nking of\nKing of Diamond\nthen we have King of Hearts\nthen we have five\nof clubs then we have five of spade\nand then we have six of diamond\nthen we have a pair pair we have two of\ndiamond\ntwo of\ntwo of\nuh what is it Spades then we have nine\nof\nnine of Clubs and we have King of\nDiamond\nthen we have 10 of\nclubs\nthe last one is king of diamonds so King\nof Diamonds five of diamonds\nthen two of diamond or five of Hearts my\nbad hearts two of diamond\nand then ten of Clubs\nand then jack off\ndiamonds a Jack of Hearts I'm getting\nmixed up\nokay so that's the idea and now let's\nrun it\num and see what you will get so we\nshould have the correct straight\nso if we run this now\nfor straight this is straight it is uh\nJack ten nine eight seven and it is\ncorrect so this is straight\nnow what we need to do is we need to\ntake this straight part\nand we need to add it to our if\nstatement here\nso we will put else if\nso first it will check if it's a flush\nand then it will check if it is a\nstraight then it will become\nstraight flush so straight flush is\nnumber nine so you can see here this is\nstraight flash so it will become number\nnine\nso if we run that now\nover here we have the royal flush it's\nfine the straight flush is now being\ndetected as well so that's very good so\nwe have the straight flush here\nokay so we have done one two\nuh three and four so we have done four\nand we have also done the fifth which is\nthe high card so we have done five out\nof ten so we are halfway done\nnow what we will do is\nwe are going to check for uh four of a\nkind then we will check for three of a\nkind then two pair and then a single\npair so uh to understand how can we\ncheck\nor why is it showing a search\nto move that\nOkay so\nto check let's do it after straight\nthis is four of a kind\nnow four of a kind\nif you have a list right four of a kind\nwill have four of them as the same and\none card would be different so for\nexample\nyou will have three three three three\nand then five\nso three of four of them are same and\none of them is different right so what\nwe can do is\nwe can tell it we can tell the computer\nto find\nto create a set what does a set do a set\nwill put all these three together\nand it will put this as separate so when\nyou do a set to this\nwhen you do a set this will become 3 and\n5.\nso we can check\nhow many do we have we have three and\nfive\nso after completing the set how many\nvalues do we have if we have two values\nthis means it might be four of a kind\nbecause there is another condition where\nyou can have two set\nand that is when you have let's say 333\nand 5 5.\nso in that case if we do a set\nthen also it will give you three and\nfive\nso we need to check first of all whether\nwhen we convert it into a set does it\ngive us two values if that is two then\nwe need to check whether\nuh this value comes three times or four\ntimes if it comes three times then it is\n4 of a kind\nif it comes three times\nthen it is\nFull House\nbecause these are three three of a kind\nand this is a pair so it becomes Full\nHouse so how can we do that first of all\nwhat we will do is\nwe will get unique values so Hand\nunique\nvalues\nequals\nset\nof\nsorted ranks\nsorted ranks but this will be a set you\ncannot use it as a list so we will\nconvert it into a list to make it easier\nfor us to work with\nso we will do that so if I print unique\nhands now print unique\nor hand unique values\nso let's print that and for each hand it\nwill print the unique values so for the\nfirst one there are no unique values so\n8 9 10 11 12 so it's printing that for\nthe second one\nagain oh sorry the first one was here\nthe second one no unique values in the\nthird one you have unique values so you\nhave five five five it's three of them\nfour of them are five so it's giving us\nfive and one of them is a 12. so it's\ngiving us 12 and 5. so this one is\nbasically four of a kind and after four\nof a kind we have a full house so that\nis also giving us two so it was giving\nus 2 and 10. so these are 3 and this is\n2.\nso now we need to check\nif\nif the unique hand list basically has\ntwo uh values so first of all we need to\ncheck if it has two values if the length\nof hands unique values\nequals 2.\nif that is the case then it will be one\nof these four of a kind or full house\nactually we should we should put this\nhere somewhere but it's okay I think we\nshould put this one outside because this\none is Journal it will also be used for\nthree of a kind it will also be used for\nFull House for two pair and so on\nbecause this is unique values\nso now we are checking for four of a\nkind so now what we will do is we are\ngoing to check we are going to Loop\nthrough all the values\nfor\nokay for value\nin hand unique values so it will Loop\nthrough the values which will be 12 and\n5 okay so for each value we need to\ncount how many times is it present\nin our complete list so we will say that\nhow many times the value of let's say uh\n3 is present in this whole\nlist we need to check that\nso we will say that\nsorted ranks dot count\nso this is our sorted list where is it\nthis sorted list is basically 8 9 10 11\n12 or in this case it is five\nfive five five Q right or queen is 13 I\nknow it's 12. so it's uh 555 and then\n12.\nso that's our sorted so we are going to\ncheck\nthis value how many times does it come\nin the main list so we will write here\nVal\nand if that comes four times\nthen we are going to write\nuh we need to write if that is the case\nthen we will write possible rank dot\nappend\nuh what is four of a kind\nfour of a kind is number eight\nso we will append eight\nand if it is not four times if it's\nthree times\nthen it means\nit is number seven which is Full House\nif it's three times\nand the the set is two\nthis is a this is a unique value this is\na unique value the set is two and one of\nthem is three it means the other one\nwill be two automatically so we know\nthat if it's three then the rank is\nseven\nso if we run this now\nyou will see that here we have the royal\nflush straight four of a kind it's\ndetected properly this is four of a kind\nthere you go and then if we have a full\nhouse it is also detected properly oh\nsorry this is Full House this is uh four\nof a kind so here we have two and ten so\nthis is Full House and this is four of a\nkind there you go and already we have\nthe flush\nand the straight working so that's good\nso the same pattern we are going to use\nwith\nuh the next the next one which is three\nof a kind\nso here we have done the flash we have\ndone the straight now we are going to\nthree of a kind so now we are going to\nthree of a kind and two pair\nso if let's say we have a three of a\nkind so we will have five five five five\nand five and we will have\nuh let's say six and seven because if we\nhave six six it becomes a full house we\nare not talking about that right uh we\nare not talking about that because we\nhave already done that so if it's six\nand seven then it will give us how many\nunique values it will give us three\nunique values because when we send it to\na set the set will be 5 6 and 7. so it\nwill give us three values\nuh\nwe can also have three values in another\nscenario what is that scenario where you\nhave let's say eight eight\nthis is a peer you then you have seven\nseven that's also appear and then you\nhave three let's say or let's say two\nso when you create a set of this\nso you will have eight seven and two so\nhow many unique values you have unique\nvalues\nare three\nalso here\nunique values\nequals three so in both cases it's three\nin this case it is\nuh three of a kinds and in this case it\nis\nuh two pair\nright so we need to check first of all\nif they are three\nactually we can write here as well\nunique values\nare two\nand unique values\nR2\nthere you go\nso four of a kind Full House and that\nokay so here we need to check if the\nlength of unique values is basically\nthree\nso here we are checking four of a kind\nand\nuh Full House\nhere we will be checking\nthree of a kind\nand pair\nthere you go\nso for both of them we first need to\ncheck the unique values there are three\nthen we will check the values\nif the value comes how many times\nwe will Loop through the value and if\nthe value comes\nso here the value will come three times\nso if the value comes three times then\nit is a three of a kind so a three of a\nkind is\n10 uh not 10 it's 4. so three of a kind\nis four\nand if the value comes\ntwo times which means here for example\nis 2 and here for example it's 2 then it\nis a\nand it is a two pair which is three\nthere you go\nuh sorry when it comes two times\nso if it's three times it is three of a\nkind if it's two times it is two pair we\ncan write it here as well\nso it's easier to know what's going on\nhere also we can write\nfour of a kind and this one is Full\nHouse\nso it's it's pretty easy all you have to\ndo is just think a little bit\nhow exactly can we do this and I believe\nuh only one is left let's run this first\nand there you go this is three of a kind\nbecause we have 10 10 and 10 and the\nother two are different so it's not a\nfull house it's three of a kind and\nactually let's change it to Full House\nhere three of a kind will make it full\nhouse if we write here 10 as well\nlet's see if it detects as a full house\nthere you go so where is it Full House\nthere you go no Full House is here\nand then it's a four of a kind sorry I\nmade it four of a kind my bad uh I\nwanted to make it full house which means\nthis is 2D so this will be also 2D my\nbad\nso this will become a full house there\nyou go see now it's a Fallout it means\nour methodology is working fine so we\nhave three of a kind working properly\nthen we have two pair\nso King King is working fine five five\nthat is a two pair excellent so now we\nhave these uh unique values and then the\nlast one is very simple\num we are checking for\na pair\nis simply when you have\nfour values\nso\nfor example you have\nlet me share an example here so you have\nfive five and then three six seven and\neight so the set of this\ndid I write more\nthank you so the set for this\nwill be five five uh will be five three\nfive three six and seven which are four\nunique unique\nvalues equals 4 which means a pair\nthat's how simple it is\nso you will simply write possible rank\ndot append and you will write two\nbecause one is already there and that is\nyour high card so if we run this now and\nwe go down and there you go so here you\nare getting a pair here you're getting a\nhigh card\nso this is basically how we can\num get these values\nso to repeats or to summarize what we\nhave done we have first of all extracted\nthe ranks and the suits and we have\ncreated a variable called possible ranks\nnot a variable a list in which we will\nstore all those ranks actually let's\nprint out the possible ranks before we\nuh print possible ranks and let's see if\nthere are more than one yeah here you\ncan see it's three three both of them\nare three so it's nine and five so it is\nalso a flush and it is also a straight\nso uh and then it is both of them\ntogether so it's straight flush\num\nand then here you have four of a kind so\nthe rest of them they don't have\nmultiples but this one has multiple as\nwell uh because it is a flush as well\nand it is a royal flush as well so it\nwill take the bigger one which is royal\nflush so yeah that's the idea and then\nuh as we were mentioning so you extract\nall the ranks and all the suits\nonce you have them in lists you sort\nthem because sorting them will make it\neasier uh especially when you are uh\nfinding the straight that will make it\nmuch easier so you will first check for\nthe royal flush no you will first check\nfor the flush so check\nlet me write here uh check for\nblush and\nthen it will check for Royal Flush over\nhere\nand then it will check for straight\nif it is flush and it is Royal then it\nwill be royal flash if it's flush and it\nis straight then it is straight flush\notherwise it will be simply flush so\nthis is flush basically\nthen we have straight in straight uh\nwhat we are doing is we are uh we are\nchecking the previous value and we are\nadding one to it and comparing it with\nour current value so 11 is been compared\nwith 10 plus 1 12 is been compared with\n11 plus 1 if all of them give us True\nValue if they are same then it becomes\nall of them are consecutively uh listed\nand ranked so that's why we will write\nit as straight\nthen comes the unique values so we will\ncheck the unique values by putting a set\nto the sorted ranks if the unique values\nare 2 it can have two possibilities four\nof a kind or full house if one of the\nvalues has four uh counts then it is a\nfour of a kind if one of the values has\nthree counts uh then it is Full House\nsame way we are checking the unique\nvalues and if the unique values are\nthree there are two possibilities one of\nthem is three of a kind if the value has\nat the count of three and if the value\nhas a count of two it means it's two\npair and then if it's single pair then\nthe unique values the set will have a\ncount of four and\num if if nothing else works out then it\nis\num uh high card and once that once all\nof that is done we have our\nuh what do you call dictionary with all\nthe rankings and the numbers and then\nfrom that we extract what output do we\nget what is our result so let me\nlet me remove all the prints so that it\nis neat and clean we don't want uh too\nmany things printed yeah so then we only\nhave the hand and what it is detected as\nso Royal fly straight flash four of a\nkind two pair and so on so this is\nbasically\nhow we can classify our poker hand and\nnow we once we have written this code\nnow we can go and use our trained model\nto find to detect that hand and then we\nwill send it to our find poker hand and\nit will give us the output of what type\nof hand it is so let's go ahead and do\nthat\nokay so now our process has been\ncompleted the training is done and we\nhad 50 epochs completed in 7.5 hours so\nfor further details you can look at the\nPrecision and recall curves and we also\nhave the confusion Matrix and all these\ntraining and validation batches\nso what we will do now is we'll download\nthe best one and we are going to use\nthat in our project so we already have\nproject 4 listed and we have created our\npoker hand function and now what we will\ndo is we will copy YOLO webcam because\nwe'll be using our webcam to run it so\nwe'll simply copy that and we will name\nit\npoker and detector\nso\nonce we have that we will bring in our\nmodel so here you can see this is best\nseven so let's drag that in and we will\ncall it\nplaying cards\ndot PT\nand over here\nnow we have to make the changes so that\nit detects these so first of all the\nclass names we need to change\nso to change that we can go back to our\ndata.yml file and we can copy all the\nnames\nand we can simply paste them here\nand we can just cut this and paste it\nhere\nthere you go\nso to make it easier to understand\nwhat's going on and we have all the\nclasses we can simply press enter after\neach of the ranks are done so after two\nis done then three four five six\nseven eight nine Ace Jack king and queen\nso as you can see we have all the\nclasses listed here and the\nthe video we are not going to use any\nvideo so we can remove that and we can\nopen up the webcam\nand we will be using webcam one and this\nis the size and we will be using our own\nweight which is playing cards\ndot PT\nand let's run this now and see if it\nworks so I have my webcam upside down\nand we have some playing cards here and\nwe are going to test them out one by one\nand see how it performs once we know\nthat all of these are detected properly\nwe can go ahead and merge our poker hand\nfunction with it so that we don't have\nany issues\nso let's see if that works it's actually\nrunning at the background so here let's\nput in two\nthere you go we are getting two h which\nis basically two of hearts\nuh then we have\nJack of Clubs\nthat's good\nwe have queen of\nSpades that's good\nso in order to make it a little bit more\nefficient what we can do is we can put\nall of the twos together and see if they\nwork fine\nthere you go two of diamond two of clubs\ntwo of spades and two off Hearts so we\nare detecting them properly\nthat's good\nthen we have the clubs oh sorry the\nthrees\nlet's try those\nand three of diamond three of Club three\nof heart three of Spades that's working\nfine as well\nuh we have to do this to make sure\neverything is working fine there might\nbe one or two classes that are not\ndetected properly so we have to make\nsure all of them are correct heart\nSpades diamond and\nclubs so those are fine as well\nso so far it is giving us really good\nresults\nand it's\nvery fast as well as you can see\nso this is five of paid five diamond\nheart and Club there you go\nthen let's check the six\nlet's put them like that\nDiamond Club heart and Spade that's fine\nthen let's put seven\nlet's try it like that\nseven all of them are correct\nlet's try eight\neight all of them are correct\nnine\nyep all of them are correct\nthen\nyep correct\nthen we have track\nyep correct\nthen let's try the queen\nyep correct let's try the Kings\nwait I'm missing a king\noh what happens\nI am missing a king\nokay so let's let's\ntry with the cards we have oh no I found\nit never mind\nokay Club heart spade diamond excellent\nand now the Moment of Truth the last one\nthe ace\nace of spade heart club and Diamond\nperfect so we have 100 out of 100 being\ndetected properly\num actually 52 out of 50 52.\nso what we will do now\nis once we detect\nfirst of all we we are already\ndisplaying it we are going to put it\nin a variable called hands or hand hand\nis equal to empty\nnow once we have this\nwe are going to\nsend this hand to our poker hand\nfunction so here if we import\nnow in order to import this we'll have\nto rename it\nrename file and we will write it poker\nhand function without the dashes so that\nit's easily imported so right here from\npoker\nso we can write here import poker\nand function so now we will have the\nability to use find poker hand so we can\ngo down here and we can send it to find\nso we can write poker hand function Dot\npoker hand function dot find\npoker hand and we will send in our hand\nso we will\ncheck the results\nequal this\nand what we have to do is we have to\nfirst of all make sure that we have five\ndifferent cards so if there are four or\ntwo or three that then it should not\nwork so we should have a total of five\nso if the length of hands\nif the length of hand\nequals 5\nthen only we are going to send this if\nit's more or less we should not send it\nso once that is done we can simply print\nthe results\nwe can display it we will display it now\nbut for now we'll do that okay so\nonce we are actually detecting this we\ncan put\nfor example a limitation that if the\nconfidence level is greater than 0.5\nthen\nhand dot append\nwe are going to append the\nclass name so the class name\nis basically CLS\nso this is not actually the class name\nthe class name is class names of CLS\nthere you go so we will append that\nso what we can do is\nwe can\nwe can print\nuh hand\nso let's try that out and see how it\nworks\nbecause we want to see what exactly are\nwe sending before we actually see the\nresults\nso let's put two cards in and let's see\nwhat result do we get\nso there you go we have\nuh some results here so there you go uh\nit is appending oh\noh it keeps adding to its which is not\ngood the hand should be\nafter each iteration it should update\nand it should clear out so we need to\nhave a fresh start every time it runs an\niteration\nso there you go we have\nwe have these asah and ah\nA S H and H okay so the problem here is\nthat it's showing it twice\nso that's not good so what we need to do\nis we need to uh create a set and send\nit back to a list so this way it will\nonly have unique values because we\ncannot have two of the same cards uh it\ncannot be possible so we can simply just\ndo a set and then it should work fine\nso here we can write and equals\nset\nof hand\nand then we can put it in a list again\nand we will print it before and we will\nprint it after\nso there you go so if this is the case\nthen the set is like this so we are\ngetting one of each so that's good\nthat's exactly what we want\nso as you can see here\nit is detecting but we are getting one\nof them okay so now what we can do is we\ncan add five of these and it should give\nus the results so let's put a four of a\nkind with because it's really easy here\nI have already A's lined up\nand we have these A's and then we can\nadd simply another card which is a king\nand we should get an output here so\nlet's go at the end and let's see so\nthere you go we are getting four of a\nkind so the Moment of Truth has been\nrevealed and we're getting a four of a\nkind excellent\nso that is really amazing to see how it\nworks now what we can do is we can\nsimply put it on\non display so that we can see it in real\ntime so here CV's onput text we can copy\nthat\nand we can paste it here and instead of\nthe class name we'll do the result\nuh results\nand\nwe will write\nyour hand\nand we will write it like that so here\nwe are going to given the position of\nzero\nand zero let's say or should we put it\nin the middle\num\nlet's do a little bit in the middle\nwhat's the size 1280 maybe 300\nand the height may be 50 and the scale\nwe want it big so let's put it at five\nand the thickness let's put it at six\num hopefully this will give us some good\nresults\nforeign\nwe need to push it down a little bit\nand we need to make it a little bit\nsmaller so maybe three and thickness is\nfive\nand we push it down further to 75.\nlet's run that\nthere you go your hand four of a kind\nexcellent so what if what if I remove\none of the A's\nand I put a king there then it becomes\nFull House\nyour hand is a full house that's\nexcellent\nand what if I put instead of an ace I\nput another king\nand okay where's this okay I need to\nremove that and then I put a random card\nlet's say six then it should be two pair\nexcellent so what we'll do is we'll go\none by one and we will test out each of\nthese scenarios\nso let's put it together\nand let's see what do we get\nso let me try it to put this here\nso the first one we are going to do is\nroyal flush\nso in which we have\nAce\nthen we have of the same type so we will\nhave the king of diamond\nthen we have the queen of diamond\nand then we have the Jack of diamond\nand then we have the 10 of diamond so\nthat should give us Royal Flush so\nthere's another card coming in here\nlet's put them straight\nthere you go so now it should give us\nthe result but it's not uh what is the\nissue\n10 of diamond j d q d k d\nand a D\nuh what seems to be the issue akh JD 10d\nQD and KD so there's a 10d somewhere\nfor some reason\nyeah there is a 10d 10d is supposed to\nbe there\na k j\nthere's another k\nH where is the cat oh okay so it's\ndetecting it here my bad so there was\nanother card on the side that's why it\nwas detecting that okay\nso there you go so you have a royal\nflush excellent now let's try a straight\nflush so uh we have let's say King\nQueen Jack 10 and if we put a nine\nuh nine of diamond then it will become a\nstraight flush because it will not be a\nroyal it will be a straight flush there\nyou go so now it is a straight flush and\nlet's try four of a kind\nso we are going to add Ace Ace Ace\nand a king so or a nine so Ace\nAce Ace\nand where is the other Ace there you go\nthere you go hand four of a kind that's\nperfect then we will try a full house so\nwe will remove the A and we will put a\nnine\nso that is a full house excellent now we\nwill try a flush so let's put all\ndiamonds so random random diamonds uh\ndoesn't have to be straight or anything\nso we are going to put six\nand a 5.\nthere you go and we have another one so\nthere you go so even if they are not\nexactly straight it will still detect\nthem so Full House then we had a flush\nthe flush is working fine now let's try\nout a straight so uh let's try out five\nthen we will try\num two three\ntwo three now we need a four\nwe also need a six\nand where is the four command\nwhere is the four\nthere you go so we have a four\nso there you go your hand is straight so\nit's upside down\nit's not really organized but still\nyou're getting a straight it's already\nstable\nI'm not sure why if you push it further\nyeah there you go now it's much\num stable much more stable so we're\ngetting it straight uh that's perfect\nthen we have to try a three of a kind\nso let's try\nwith Queens so these are three\nQueens\nand then we have a two and a king so\nyour hand is three of a kind perfect uh\nthen we have two pair so let's remove\nthe queen and let's add a king so that\nwill become two pair what happened\num\nthere you go it becomes two pair and\nthat then let's try a single pair\nthere you go your hand disappear and uh\nlet's remove the queen and let's put a\nfive here\nand that should give us high card there\nyou go it gives us high card so this is\nbasically our project successfully done\nand it looks really good and we are\ngetting real-time outputs and let's\nlet's try to\ntry it in our hand and see what it gives\nus\nthere you go it gives us high card\nso it gives us high card\nand uh let's try it uh with a beer or\nsomething so that we can see if it works\nproperly or not\num\nthere you go\nso it is appear\nit is a beer and then let's put another\nking here it will become three of\nthere you go three of a kind\nthree of a kind\nand then let's make it four of a kind I\nthink it fell down\nyou know\num we need another king\nwhere is the king\nthere you go\nso we will get four of a kind\nwe have four of a kind\nand then let's try a flash\nso\nlet's make a flush of diamonds\nblush of diamonds\nthere you go it's a flash excellent and\nwhat else can we try let's try\na full house so we have queen queen and\nking and a king and we need another\nqueen there you go so this should be a\nfull house\nFull House yep and if we remove the\nqueen and put let's say two then it will\nbecome two pair there you go\nso that's pretty good\nso as you can see\num our object detection model is working\nreally good and our\npoker hand detector is also very working\nvery good\nso this was our project as you can see\nyou can put all these things together\nand it really creates a great project\nand it gives you a lot of information\nand it is fun to play around with as\nwell so object detection is like a\nsuperpower once you understand how to\ntrain your custom models you can really\nexplore the possibilities and create\nsome really good projects that are very\nuseful in real world applications so I\nhope you have learned something here and\nI hope you will apply these methods to\nsome good use if you like this course\ngive it a thumbs up if you loved it\nshare it with your friends and I will\nsee you in the next one\n",
  "words": [
    "hey",
    "everyone",
    "welcome",
    "channel",
    "object",
    "detection",
    "101",
    "course",
    "course",
    "cover",
    "everything",
    "get",
    "started",
    "object",
    "detection",
    "along",
    "four",
    "exciting",
    "real",
    "world",
    "projects",
    "first",
    "start",
    "theory",
    "look",
    "brief",
    "history",
    "understand",
    "working",
    "object",
    "detection",
    "along",
    "evaluation",
    "matrix",
    "install",
    "everything",
    "start",
    "run",
    "yolo",
    "version",
    "8",
    "object",
    "detection",
    "pretend",
    "models",
    "using",
    "models",
    "create",
    "two",
    "projects",
    "car",
    "counter",
    "people",
    "counter",
    "learn",
    "implement",
    "object",
    "tracking",
    "along",
    "object",
    "detection",
    "also",
    "install",
    "run",
    "yolo",
    "gpu",
    "better",
    "performance",
    "later",
    "learn",
    "train",
    "custom",
    "yolo",
    "model",
    "using",
    "data",
    "set",
    "create",
    "two",
    "projects",
    "using",
    "training",
    "first",
    "one",
    "personal",
    "protective",
    "equipment",
    "detector",
    "second",
    "one",
    "poker",
    "hand",
    "detector",
    "first",
    "detect",
    "playing",
    "cards",
    "create",
    "classifier",
    "classify",
    "correct",
    "poker",
    "hands",
    "beginner",
    "worry",
    "course",
    "go",
    "step",
    "step",
    "easy",
    "follow",
    "information",
    "dense",
    "course",
    "provide",
    "maximum",
    "knowledge",
    "without",
    "wasting",
    "time",
    "learning",
    "custom",
    "object",
    "detection",
    "superpower",
    "allow",
    "solve",
    "real",
    "world",
    "problems",
    "easily",
    "completed",
    "weekend",
    "buckle",
    "get",
    "nerdy",
    "glasses",
    "let",
    "get",
    "started",
    "wait",
    "going",
    "use",
    "nvidia",
    "3080ti",
    "graphics",
    "card",
    "course",
    "question",
    "would",
    "like",
    "one",
    "yes",
    "luck",
    "giving",
    "away",
    "3080",
    "di",
    "graphics",
    "card",
    "register",
    "nvidia",
    "gtc",
    "2023",
    "conference",
    "link",
    "description",
    "attend",
    "one",
    "sessions",
    "enter",
    "giveaway",
    "automatically",
    "conference",
    "held",
    "20",
    "23rd",
    "march",
    "great",
    "place",
    "learn",
    "new",
    "things",
    "keep",
    "new",
    "trends",
    "technology",
    "sign",
    "today",
    "see",
    "foreign",
    "music",
    "object",
    "detection",
    "object",
    "detection",
    "computer",
    "vision",
    "technique",
    "locating",
    "objects",
    "image",
    "video",
    "object",
    "detection",
    "gives",
    "us",
    "bounding",
    "box",
    "information",
    "object",
    "well",
    "classification",
    "object",
    "difference",
    "object",
    "classification",
    "object",
    "detection",
    "object",
    "segmentation",
    "object",
    "classification",
    "type",
    "image",
    "recognition",
    "identifies",
    "type",
    "object",
    "present",
    "image",
    "complete",
    "image",
    "sent",
    "classification",
    "output",
    "single",
    "class",
    "object",
    "detection",
    "type",
    "image",
    "recognition",
    "used",
    "identify",
    "locate",
    "presence",
    "object",
    "image",
    "gives",
    "us",
    "bounding",
    "box",
    "information",
    "class",
    "well",
    "results",
    "multiple",
    "bounding",
    "boxes",
    "classes",
    "object",
    "segmentation",
    "type",
    "image",
    "recognition",
    "used",
    "identify",
    "separate",
    "distinct",
    "objects",
    "image",
    "pixel",
    "level",
    "get",
    "exact",
    "shape",
    "object",
    "detected",
    "rather",
    "bounding",
    "box",
    "although",
    "image",
    "segmentation",
    "provides",
    "information",
    "image",
    "detection",
    "still",
    "first",
    "choice",
    "computer",
    "vision",
    "applications",
    "since",
    "less",
    "computationally",
    "expensive",
    "brief",
    "history",
    "object",
    "detection",
    "object",
    "detection",
    "first",
    "started",
    "1970s",
    "researchers",
    "started",
    "develop",
    "automated",
    "methods",
    "object",
    "detection",
    "first",
    "automated",
    "object",
    "detection",
    "algorithm",
    "based",
    "simple",
    "features",
    "edges",
    "corners",
    "first",
    "real",
    "object",
    "detection",
    "viola",
    "jones",
    "developed",
    "used",
    "sliding",
    "windows",
    "search",
    "features",
    "simply",
    "rectangular",
    "features",
    "method",
    "became",
    "popular",
    "since",
    "real",
    "time",
    "longest",
    "time",
    "period",
    "method",
    "used",
    "face",
    "detection",
    "smartphones",
    "cameras",
    "histogram",
    "oriented",
    "gradients",
    "another",
    "method",
    "released",
    "focused",
    "shape",
    "object",
    "worked",
    "extracting",
    "gradient",
    "orientation",
    "edges",
    "method",
    "mostly",
    "used",
    "detect",
    "humans",
    "image",
    "came",
    "revolution",
    "ai",
    "neural",
    "networks",
    "gaining",
    "popularity",
    "true",
    "potential",
    "seen",
    "convolutional",
    "neural",
    "networks",
    "alexnet",
    "imagenet",
    "vision",
    "recognition",
    "challenge",
    "solved",
    "classification",
    "problem",
    "detection",
    "later",
    "bruce",
    "force",
    "methods",
    "used",
    "repurpose",
    "cnn",
    "models",
    "work",
    "detection",
    "models",
    "inefficient",
    "approach",
    "soon",
    "came",
    "rcnn",
    "regions",
    "cnn",
    "used",
    "selective",
    "regions",
    "apply",
    "classifiers",
    "gave",
    "good",
    "results",
    "slow",
    "came",
    "fast",
    "rcnn",
    "foster",
    "rcnn",
    "faster",
    "still",
    "real",
    "time",
    "2015",
    "came",
    "breakthrough",
    "yolo",
    "outperformed",
    "models",
    "ran",
    "object",
    "detection",
    "real",
    "time",
    "different",
    "approach",
    "used",
    "single",
    "pass",
    "input",
    "image",
    "make",
    "predictions",
    "objects",
    "methods",
    "like",
    "rcnn",
    "used",
    "regional",
    "proposal",
    "perform",
    "multiple",
    "iterations",
    "image",
    "yolo",
    "gets",
    "done",
    "single",
    "iteration",
    "makes",
    "yolo",
    "efficient",
    "even",
    "though",
    "architecture",
    "yolo",
    "based",
    "convolutional",
    "layers",
    "similar",
    "predecessors",
    "since",
    "yolo",
    "versions",
    "releasing",
    "faster",
    "android",
    "8",
    "5",
    "million",
    "dollar",
    "bugattis",
    "every",
    "time",
    "come",
    "back",
    "toilet",
    "check",
    "newer",
    "version",
    "yolo",
    "already",
    "released",
    "worry",
    "change",
    "iteration",
    "always",
    "significant",
    "like",
    "apple",
    "telling",
    "us",
    "latest",
    "iphone",
    "design",
    "completely",
    "different",
    "previous",
    "one",
    "believe",
    "look",
    "results",
    "guess",
    "latest",
    "model",
    "absolutely",
    "even",
    "newer",
    "version",
    "comes",
    "previous",
    "versions",
    "go",
    "date",
    "performance",
    "evaluation",
    "metrics",
    "order",
    "evaluate",
    "object",
    "detection",
    "models",
    "two",
    "main",
    "metrics",
    "need",
    "understand",
    "one",
    "evaluate",
    "good",
    "location",
    "good",
    "classification",
    "first",
    "iou",
    "measure",
    "localization",
    "second",
    "map",
    "classification",
    "ious",
    "stands",
    "intersection",
    "union",
    "tells",
    "us",
    "close",
    "predicted",
    "bounding",
    "box",
    "ground",
    "truth",
    "value",
    "0",
    "boxes",
    "overlap",
    "perfect",
    "detection",
    "iou",
    "one",
    "boxes",
    "overlap",
    "values",
    "0",
    "depending",
    "much",
    "overlap",
    "overlap",
    "iou",
    "zero",
    "value",
    "iou",
    "calculated",
    "taking",
    "ratio",
    "area",
    "intersection",
    "area",
    "union",
    "bounding",
    "boxes",
    "order",
    "understand",
    "average",
    "precision",
    "need",
    "know",
    "confusion",
    "matrix",
    "precision",
    "recall",
    "confusion",
    "matrix",
    "simple",
    "table",
    "consists",
    "actual",
    "classes",
    "one",
    "side",
    "predicted",
    "classes",
    "let",
    "look",
    "example",
    "car",
    "classifier",
    "first",
    "cell",
    "actual",
    "class",
    "car",
    "model",
    "predicted",
    "car",
    "true",
    "positive",
    "second",
    "cell",
    "actual",
    "class",
    "house",
    "model",
    "predicted",
    "car",
    "false",
    "positive",
    "third",
    "cell",
    "actual",
    "class",
    "car",
    "model",
    "predicted",
    "occurred",
    "false",
    "negative",
    "last",
    "cell",
    "actual",
    "class",
    "ball",
    "model",
    "predicted",
    "car",
    "true",
    "negative",
    "value",
    "corresponds",
    "predicting",
    "pounding",
    "box",
    "usually",
    "background",
    "used",
    "metrics",
    "calculations",
    "using",
    "values",
    "calculate",
    "precision",
    "recall",
    "precision",
    "total",
    "positives",
    "total",
    "positive",
    "predictions",
    "recall",
    "actual",
    "positives",
    "predictions",
    "mathematical",
    "terms",
    "precision",
    "true",
    "positive",
    "divided",
    "true",
    "positive",
    "plus",
    "false",
    "positives",
    "recall",
    "true",
    "positive",
    "divided",
    "true",
    "positive",
    "plus",
    "false",
    "negatives",
    "since",
    "matrix",
    "provide",
    "us",
    "valuable",
    "information",
    "combine",
    "one",
    "called",
    "precision",
    "average",
    "area",
    "precision",
    "recall",
    "curve",
    "precision",
    "recall",
    "curve",
    "maximizes",
    "effects",
    "matrix",
    "give",
    "us",
    "better",
    "idea",
    "overall",
    "accuracy",
    "model",
    "every",
    "precision",
    "single",
    "class",
    "multiple",
    "classes",
    "mean",
    "precision",
    "values",
    "mean",
    "average",
    "precision",
    "also",
    "known",
    "map",
    "first",
    "thing",
    "download",
    "python",
    "go",
    "simply",
    "go",
    "downloads",
    "see",
    "download",
    "latest",
    "version",
    "recommended",
    "might",
    "errors",
    "might",
    "need",
    "bug",
    "fixes",
    "go",
    "releases",
    "go",
    "see",
    "python",
    "support",
    "till",
    "27",
    "python",
    "till",
    "26",
    "see",
    "information",
    "basically",
    "long",
    "term",
    "support",
    "release",
    "version",
    "would",
    "suggest",
    "go",
    "uh",
    "go",
    "latest",
    "one",
    "go",
    "one",
    "one",
    "latest",
    "one",
    "example",
    "see",
    "three",
    "points",
    "download",
    "simply",
    "press",
    "download",
    "go",
    "windows",
    "click",
    "start",
    "download",
    "multiple",
    "versions",
    "python",
    "well",
    "project",
    "running",
    "different",
    "python",
    "versions",
    "see",
    "one",
    "stable",
    "one",
    "gives",
    "better",
    "results",
    "show",
    "already",
    "python",
    "using",
    "longest",
    "time",
    "period",
    "also",
    "show",
    "use",
    "python",
    "case",
    "using",
    "python",
    "downgrade",
    "show",
    "upgrade",
    "show",
    "well",
    "click",
    "python",
    "make",
    "sure",
    "add",
    "path",
    "click",
    "install",
    "okay",
    "setup",
    "done",
    "close",
    "go",
    "pycharm",
    "ide",
    "familiar",
    "ide",
    "stands",
    "integrated",
    "development",
    "environment",
    "basically",
    "notepad",
    "write",
    "code",
    "help",
    "write",
    "code",
    "tell",
    "problems",
    "fix",
    "bugs",
    "go",
    "pycharm",
    "pycharm",
    "go",
    "download",
    "downloads",
    "professional",
    "version",
    "community",
    "version",
    "mac",
    "os",
    "linux",
    "well",
    "working",
    "windows",
    "download",
    "community",
    "version",
    "simply",
    "hit",
    "download",
    "free",
    "enough",
    "need",
    "download",
    "started",
    "wait",
    "finish",
    "download",
    "complete",
    "hit",
    "pycharm",
    "community",
    "click",
    "next",
    "next",
    "associate",
    "dot",
    "pi",
    "files",
    "admin",
    "folder",
    "path",
    "part",
    "charm",
    "community",
    "edition",
    "create",
    "desktop",
    "icon",
    "well",
    "install",
    "going",
    "restart",
    "computer",
    "hit",
    "finish",
    "going",
    "open",
    "pycharm",
    "first",
    "time",
    "installing",
    "pycharm",
    "memory",
    "default",
    "parameters",
    "might",
    "see",
    "ask",
    "questions",
    "uh",
    "set",
    "things",
    "set",
    "click",
    "next",
    "next",
    "fine",
    "close",
    "main",
    "thing",
    "going",
    "tell",
    "need",
    "right",
    "click",
    "file",
    "going",
    "create",
    "new",
    "project",
    "main",
    "thing",
    "environment",
    "basically",
    "actual",
    "python",
    "copy",
    "basically",
    "create",
    "virtual",
    "environment",
    "separate",
    "everything",
    "else",
    "project",
    "environment",
    "whatever",
    "install",
    "installed",
    "environment",
    "based",
    "specific",
    "version",
    "python",
    "base",
    "interpreter",
    "mention",
    "right",
    "base",
    "interpreter",
    "python",
    "also",
    "python",
    "example",
    "two",
    "python",
    "python",
    "choose",
    "two",
    "going",
    "choose",
    "example",
    "one",
    "creating",
    "environment",
    "putting",
    "name",
    "write",
    "environments",
    "write",
    "three",
    "one",
    "zero",
    "version",
    "well",
    "name",
    "python",
    "project",
    "going",
    "hit",
    "create",
    "use",
    "window",
    "create",
    "project",
    "python",
    "project",
    "created",
    "main",
    "file",
    "see",
    "virtual",
    "environment",
    "created",
    "remove",
    "simply",
    "write",
    "print",
    "hello",
    "world",
    "let",
    "go",
    "ahead",
    "right",
    "click",
    "going",
    "run",
    "main",
    "give",
    "us",
    "hello",
    "world",
    "running",
    "python",
    "know",
    "see",
    "python",
    "python",
    "going",
    "go",
    "file",
    "package",
    "want",
    "install",
    "go",
    "settings",
    "go",
    "project",
    "python",
    "project",
    "go",
    "python",
    "interpreter",
    "add",
    "package",
    "want",
    "whether",
    "opencv",
    "whether",
    "cv",
    "zone",
    "whether",
    "ultralytics",
    "whatever",
    "install",
    "example",
    "go",
    "ahead",
    "install",
    "numpy",
    "numpy",
    "click",
    "install",
    "package",
    "take",
    "also",
    "specify",
    "version",
    "numpy",
    "want",
    "install",
    "installing",
    "latest",
    "one",
    "available",
    "right",
    "hit",
    "close",
    "see",
    "packages",
    "numpy",
    "installed",
    "current",
    "version",
    "latest",
    "version",
    "date",
    "three",
    "already",
    "installed",
    "worry",
    "simply",
    "click",
    "ok",
    "write",
    "imports",
    "numpy",
    "run",
    "give",
    "error",
    "means",
    "numpy",
    "installed",
    "write",
    "anything",
    "else",
    "give",
    "error",
    "library",
    "called",
    "nump2y",
    "right",
    "basic",
    "idea",
    "import",
    "numpy",
    "go",
    "file",
    "go",
    "settings",
    "create",
    "new",
    "virtual",
    "environment",
    "wanted",
    "use",
    "two",
    "different",
    "pythons",
    "could",
    "create",
    "new",
    "virtual",
    "environment",
    "click",
    "go",
    "show",
    "click",
    "add",
    "create",
    "new",
    "environment",
    "create",
    "select",
    "brace",
    "interpreter",
    "named",
    "virtual",
    "environment",
    "3",
    "7",
    "press",
    "ok",
    "create",
    "shift",
    "hit",
    "ok",
    "see",
    "installed",
    "numpy",
    "earlier",
    "installed",
    "virtual",
    "environment",
    "installed",
    "using",
    "main",
    "environment",
    "giving",
    "us",
    "error",
    "run",
    "give",
    "error",
    "numpy",
    "click",
    "go",
    "three",
    "points",
    "10",
    "load",
    "run",
    "give",
    "error",
    "numpy",
    "already",
    "installed",
    "make",
    "sure",
    "libraries",
    "installed",
    "trying",
    "different",
    "versions",
    "python",
    "go",
    "library",
    "see",
    "numpy",
    "installed",
    "see",
    "numpy",
    "wanted",
    "use",
    "make",
    "sure",
    "go",
    "file",
    "settings",
    "going",
    "install",
    "numpy",
    "install",
    "well",
    "reason",
    "telling",
    "later",
    "might",
    "face",
    "issue",
    "example",
    "three",
    "points",
    "12",
    "want",
    "might",
    "want",
    "downgrade",
    "might",
    "want",
    "upgrade",
    "later",
    "instead",
    "creating",
    "new",
    "project",
    "things",
    "together",
    "simply",
    "new",
    "virtual",
    "environment",
    "project",
    "running",
    "difficult",
    "debug",
    "see",
    "installed",
    "numpy",
    "well",
    "run",
    "run",
    "project",
    "going",
    "use",
    "one",
    "python",
    "environment",
    "usually",
    "use",
    "higher",
    "one",
    "unless",
    "major",
    "issues",
    "case",
    "going",
    "downgrade",
    "understand",
    "install",
    "pycharm",
    "install",
    "python",
    "add",
    "python",
    "versions",
    "simply",
    "go",
    "ahead",
    "start",
    "working",
    "project",
    "going",
    "create",
    "python",
    "project",
    "object",
    "detection",
    "yolo",
    "creating",
    "new",
    "virtual",
    "environment",
    "environment",
    "based",
    "base",
    "interpreter",
    "python",
    "version",
    "python",
    "version",
    "want",
    "use",
    "using",
    "newer",
    "version",
    "use",
    "use",
    "latest",
    "one",
    "might",
    "heal",
    "errors",
    "simply",
    "hit",
    "create",
    "go",
    "project",
    "main",
    "file",
    "use",
    "main",
    "file",
    "test",
    "code",
    "simply",
    "write",
    "prints",
    "print",
    "hello",
    "world",
    "run",
    "see",
    "everything",
    "working",
    "working",
    "fine",
    "order",
    "get",
    "started",
    "installations",
    "virtual",
    "environment",
    "look",
    "folder",
    "virtual",
    "environment",
    "click",
    "libraries",
    "site",
    "packages",
    "need",
    "install",
    "packages",
    "order",
    "run",
    "project",
    "go",
    "file",
    "settings",
    "project",
    "python",
    "interpreter",
    "click",
    "add",
    "type",
    "version",
    "example",
    "type",
    "site",
    "package",
    "name",
    "example",
    "cv",
    "zone",
    "hit",
    "install",
    "working",
    "object",
    "detection",
    "lot",
    "libraries",
    "working",
    "back",
    "end",
    "installing",
    "one",
    "one",
    "take",
    "lot",
    "time",
    "simple",
    "way",
    "copying",
    "requirements",
    "file",
    "create",
    "file",
    "well",
    "standard",
    "version",
    "uh",
    "standard",
    "way",
    "simply",
    "paste",
    "uh",
    "project",
    "get",
    "download",
    "website",
    "uh",
    "computer",
    "free",
    "download",
    "sign",
    "already",
    "signed",
    "sign",
    "account",
    "go",
    "course",
    "page",
    "download",
    "everything",
    "related",
    "course",
    "absolutely",
    "free",
    "pay",
    "anything",
    "download",
    "copy",
    "see",
    "soon",
    "copy",
    "file",
    "give",
    "us",
    "notification",
    "package",
    "requirements",
    "packages",
    "installed",
    "click",
    "install",
    "requirements",
    "install",
    "requirements",
    "need",
    "mean",
    "example",
    "cv",
    "zone",
    "double",
    "equals",
    "means",
    "use",
    "exact",
    "version",
    "use",
    "anything",
    "use",
    "anything",
    "exact",
    "version",
    "right",
    "using",
    "python",
    "versions",
    "work",
    "fine",
    "greater",
    "equals",
    "means",
    "use",
    "least",
    "newer",
    "version",
    "use",
    "instead",
    "little",
    "bit",
    "dangerous",
    "tricky",
    "newer",
    "version",
    "compatible",
    "might",
    "work",
    "careful",
    "ones",
    "uh",
    "hard",
    "coding",
    "exact",
    "version",
    "ones",
    "saying",
    "example",
    "python",
    "hard",
    "coded",
    "exact",
    "version",
    "normally",
    "done",
    "like",
    "latest",
    "version",
    "issues",
    "auto",
    "connecting",
    "going",
    "use",
    "uh",
    "dot",
    "six",
    "zero",
    "version",
    "issue",
    "exact",
    "version",
    "later",
    "version",
    "works",
    "fine",
    "okay",
    "better",
    "use",
    "exact",
    "thing",
    "sometimes",
    "happens",
    "install",
    "everything",
    "install",
    "might",
    "issue",
    "compatible",
    "version",
    "satisfy",
    "satisfies",
    "requirement",
    "downgrade",
    "upgrade",
    "based",
    "example",
    "uh",
    "example",
    "scikit",
    "image",
    "let",
    "say",
    "work",
    "simply",
    "comment",
    "remove",
    "install",
    "installations",
    "later",
    "give",
    "wrong",
    "number",
    "let",
    "say",
    "like",
    "give",
    "us",
    "error",
    "unable",
    "install",
    "case",
    "either",
    "come",
    "fix",
    "number",
    "based",
    "version",
    "go",
    "file",
    "go",
    "settings",
    "add",
    "search",
    "psi",
    "spelling",
    "get",
    "believe",
    "c",
    "k",
    "dash",
    "image",
    "yeah",
    "click",
    "specify",
    "version",
    "select",
    "version",
    "need",
    "might",
    "higher",
    "version",
    "might",
    "lower",
    "version",
    "latest",
    "one",
    "work",
    "go",
    "previous",
    "one",
    "default",
    "okay",
    "said",
    "let",
    "install",
    "everything",
    "click",
    "install",
    "requirements",
    "ask",
    "us",
    "want",
    "install",
    "say",
    "yes",
    "install",
    "simply",
    "going",
    "wait",
    "installation",
    "complete",
    "main",
    "library",
    "using",
    "ultralytics",
    "provide",
    "us",
    "yolo",
    "package",
    "download",
    "yolo",
    "weights",
    "us",
    "well",
    "using",
    "version",
    "8",
    "yolo",
    "later",
    "versions",
    "come",
    "use",
    "two",
    "depending",
    "whether",
    "um",
    "related",
    "ultra",
    "analytics",
    "packages",
    "installed",
    "let",
    "wait",
    "finish",
    "packages",
    "installed",
    "see",
    "installed",
    "good",
    "go",
    "going",
    "create",
    "new",
    "folder",
    "going",
    "call",
    "chapter",
    "5",
    "within",
    "chapter",
    "5",
    "going",
    "say",
    "running",
    "yolo",
    "right",
    "click",
    "create",
    "new",
    "python",
    "file",
    "call",
    "yolo",
    "basics",
    "basics",
    "go",
    "first",
    "file",
    "test",
    "whether",
    "yolo",
    "work",
    "exactly",
    "run",
    "order",
    "test",
    "yolo",
    "need",
    "images",
    "going",
    "run",
    "images",
    "first",
    "know",
    "works",
    "going",
    "try",
    "webcam",
    "next",
    "chapter",
    "images",
    "find",
    "website",
    "uh",
    "download",
    "zip",
    "file",
    "everything",
    "included",
    "see",
    "images",
    "open",
    "images",
    "first",
    "image",
    "school",
    "bus",
    "kids",
    "going",
    "school",
    "bus",
    "second",
    "image",
    "course",
    "third",
    "image",
    "bikes",
    "motorbikes",
    "three",
    "image",
    "images",
    "going",
    "test",
    "first",
    "import",
    "ultralytics",
    "going",
    "write",
    "ultralytics",
    "imports",
    "yolo",
    "going",
    "import",
    "also",
    "need",
    "import",
    "cv2",
    "tell",
    "okay",
    "let",
    "run",
    "tell",
    "later",
    "simple",
    "two",
    "lines",
    "code",
    "simply",
    "run",
    "mod",
    "first",
    "going",
    "create",
    "model",
    "call",
    "model",
    "equals",
    "yolo",
    "going",
    "give",
    "weights",
    "different",
    "types",
    "weights",
    "nano",
    "medium",
    "large",
    "based",
    "want",
    "use",
    "good",
    "thing",
    "method",
    "type",
    "name",
    "weights",
    "need",
    "download",
    "weights",
    "example",
    "write",
    "yolo",
    "version",
    "8",
    "going",
    "write",
    "n",
    "nano",
    "download",
    "nano",
    "version",
    "write",
    "pt",
    "simply",
    "write",
    "results",
    "equals",
    "model",
    "give",
    "source",
    "image",
    "image",
    "source",
    "basically",
    "images",
    "slash",
    "write",
    "one",
    "dot",
    "png",
    "image",
    "write",
    "show",
    "equals",
    "true",
    "want",
    "see",
    "image",
    "end",
    "go",
    "run",
    "right",
    "click",
    "yolo",
    "basics",
    "going",
    "run",
    "let",
    "see",
    "happens",
    "first",
    "download",
    "weights",
    "downloaded",
    "tell",
    "running",
    "cpu",
    "another",
    "thing",
    "going",
    "discuss",
    "later",
    "run",
    "gpu",
    "nothing",
    "happened",
    "run",
    "image",
    "told",
    "us",
    "running",
    "speed",
    "size",
    "actually",
    "show",
    "us",
    "anything",
    "exactly",
    "happened",
    "actually",
    "opened",
    "image",
    "closed",
    "quickly",
    "delay",
    "opened",
    "closed",
    "need",
    "stop",
    "write",
    "import",
    "cv2",
    "order",
    "stop",
    "simply",
    "write",
    "cv2",
    "dot",
    "weight",
    "key",
    "give",
    "delay",
    "zero",
    "zero",
    "means",
    "unless",
    "user",
    "inputs",
    "anything",
    "time",
    "around",
    "run",
    "image",
    "get",
    "bus",
    "detected",
    "person",
    "detected",
    "handbag",
    "backpack",
    "backpack",
    "lot",
    "good",
    "detections",
    "also",
    "giving",
    "confidence",
    "level",
    "course",
    "higher",
    "confidence",
    "value",
    "better",
    "detection",
    "quite",
    "good",
    "close",
    "see",
    "downloaded",
    "weights",
    "uh",
    "chapter",
    "5",
    "folder",
    "order",
    "um",
    "make",
    "little",
    "efficient",
    "want",
    "download",
    "chapter",
    "chapter",
    "project",
    "going",
    "weights",
    "using",
    "weights",
    "uh",
    "downloaded",
    "every",
    "single",
    "chapter",
    "create",
    "new",
    "folder",
    "object",
    "detection",
    "yolo",
    "create",
    "new",
    "directory",
    "call",
    "yolo",
    "weights",
    "going",
    "put",
    "weight",
    "within",
    "low",
    "weights",
    "refactor",
    "yellow",
    "weights",
    "go",
    "back",
    "double",
    "dot",
    "slash",
    "means",
    "go",
    "back",
    "write",
    "yolo",
    "dash",
    "weights",
    "slash",
    "yolo",
    "8",
    "9",
    "8",
    "n",
    "run",
    "run",
    "exactly",
    "way",
    "able",
    "find",
    "uh",
    "file",
    "within",
    "folder",
    "want",
    "try",
    "different",
    "uh",
    "call",
    "versions",
    "simply",
    "change",
    "name",
    "write",
    "example",
    "large",
    "try",
    "run",
    "see",
    "works",
    "downloading",
    "downloaded",
    "give",
    "us",
    "results",
    "nano",
    "faster",
    "medium",
    "bit",
    "slower",
    "large",
    "slower",
    "check",
    "versions",
    "well",
    "one",
    "prefer",
    "version",
    "83",
    "mbs",
    "sure",
    "much",
    "let",
    "open",
    "okay",
    "one",
    "6",
    "mb",
    "huge",
    "difference",
    "terms",
    "weights",
    "go",
    "downloaded",
    "see",
    "uh",
    "getting",
    "better",
    "results",
    "multiple",
    "results",
    "also",
    "found",
    "skateboard",
    "found",
    "nano",
    "version",
    "wrong",
    "detection",
    "bus",
    "detected",
    "well",
    "saying",
    "handbag",
    "backpack",
    "uh",
    "still",
    "mistake",
    "works",
    "fine",
    "go",
    "download",
    "run",
    "models",
    "run",
    "let",
    "see",
    "works",
    "go",
    "lots",
    "cars",
    "detected",
    "uh",
    "confidence",
    "see",
    "pattern",
    "closer",
    "camera",
    "actually",
    "detects",
    "well",
    "camera",
    "might",
    "detect",
    "uh",
    "basically",
    "idea",
    "clear",
    "site",
    "viewing",
    "able",
    "detect",
    "able",
    "find",
    "car",
    "bit",
    "easier",
    "classify",
    "easier",
    "detect",
    "confidence",
    "level",
    "higher",
    "far",
    "blur",
    "course",
    "confidence",
    "level",
    "much",
    "basic",
    "idea",
    "go",
    "images",
    "three",
    "let",
    "see",
    "works",
    "right",
    "using",
    "large",
    "version",
    "use",
    "nano",
    "version",
    "well",
    "okay",
    "go",
    "lot",
    "detections",
    "motorcycles",
    "truck",
    "back",
    "uh",
    "person",
    "overlaying",
    "little",
    "bit",
    "difficult",
    "see",
    "exactly",
    "going",
    "right",
    "really",
    "detecting",
    "really",
    "telling",
    "system",
    "um",
    "put",
    "bounding",
    "boxes",
    "put",
    "names",
    "confidence",
    "level",
    "done",
    "default",
    "saying",
    "show",
    "equals",
    "true",
    "later",
    "uh",
    "next",
    "chapter",
    "going",
    "put",
    "manually",
    "use",
    "default",
    "version",
    "way",
    "much",
    "control",
    "see",
    "right",
    "overlaying",
    "clear",
    "useful",
    "uh",
    "terms",
    "viewing",
    "basic",
    "idea",
    "run",
    "different",
    "versions",
    "yolo",
    "large",
    "nano",
    "small",
    "medium",
    "write",
    "uh",
    "way",
    "wanted",
    "check",
    "run",
    "nano",
    "exactly",
    "happens",
    "many",
    "detections",
    "get",
    "go",
    "says",
    "car",
    "car",
    "person",
    "detected",
    "detected",
    "earlier",
    "actually",
    "let",
    "let",
    "take",
    "screenshot",
    "open",
    "paint",
    "one",
    "nano",
    "let",
    "run",
    "large",
    "compare",
    "fun",
    "experiment",
    "uh",
    "exactly",
    "much",
    "getting",
    "using",
    "heavier",
    "version",
    "okay",
    "see",
    "yeah",
    "see",
    "see",
    "truck",
    "uh",
    "motorcycles",
    "cars",
    "limited",
    "cars",
    "less",
    "red",
    "person",
    "another",
    "truck",
    "back",
    "green",
    "uh",
    "get",
    "yeah",
    "definitely",
    "getting",
    "correct",
    "yet",
    "seen",
    "based",
    "requirement",
    "whether",
    "want",
    "fast",
    "whether",
    "want",
    "highly",
    "accurate",
    "um",
    "methods",
    "versions",
    "good",
    "general",
    "sense",
    "controlled",
    "environment",
    "example",
    "detecting",
    "cars",
    "detecting",
    "uh",
    "pedestrians",
    "fixed",
    "environment",
    "fixed",
    "camera",
    "yes",
    "useful",
    "certain",
    "limitations",
    "certain",
    "constraints",
    "certain",
    "constants",
    "always",
    "add",
    "mask",
    "detect",
    "regions",
    "detect",
    "regions",
    "things",
    "like",
    "definitely",
    "useful",
    "put",
    "project",
    "exactly",
    "going",
    "first",
    "going",
    "run",
    "webcam",
    "later",
    "try",
    "uh",
    "different",
    "projects",
    "implement",
    "real",
    "time",
    "chapter",
    "number",
    "six",
    "going",
    "run",
    "yolo",
    "webcam",
    "let",
    "see",
    "going",
    "need",
    "help",
    "opencv",
    "case",
    "going",
    "put",
    "bounding",
    "box",
    "manually",
    "easier",
    "us",
    "decide",
    "display",
    "display",
    "first",
    "going",
    "go",
    "new",
    "directory",
    "going",
    "write",
    "chapter",
    "chapter",
    "6",
    "yolo",
    "webcam",
    "going",
    "right",
    "click",
    "going",
    "create",
    "new",
    "python",
    "file",
    "call",
    "yolo",
    "webcam",
    "first",
    "going",
    "import",
    "ultralytics",
    "earlier",
    "also",
    "import",
    "python",
    "uh",
    "python",
    "opencv",
    "write",
    "prom",
    "ultralytics",
    "import",
    "yolo",
    "write",
    "uh",
    "imports",
    "imports",
    "cv2",
    "also",
    "import",
    "cv",
    "zone",
    "cv",
    "zone",
    "using",
    "actually",
    "display",
    "um",
    "call",
    "detections",
    "make",
    "little",
    "bit",
    "easier",
    "make",
    "little",
    "bit",
    "easier",
    "first",
    "thing",
    "create",
    "webcam",
    "object",
    "write",
    "gap",
    "equals",
    "uh",
    "cb2",
    "dot",
    "video",
    "capture",
    "referring",
    "earlier",
    "getting",
    "suggestions",
    "write",
    "dot",
    "video",
    "get",
    "suggestions",
    "means",
    "probably",
    "using",
    "newer",
    "version",
    "python",
    "opencv",
    "issue",
    "getting",
    "newer",
    "versions",
    "open",
    "cv",
    "opencv",
    "go",
    "opencv",
    "see",
    "using",
    "version",
    "whereas",
    "6",
    "8",
    "latest",
    "version",
    "still",
    "6",
    "8",
    "issue",
    "using",
    "six",
    "zero",
    "write",
    "cv2",
    "dot",
    "video",
    "capture",
    "video",
    "capture",
    "id",
    "basically",
    "given",
    "id",
    "number",
    "webcam",
    "using",
    "multiple",
    "webcams",
    "give",
    "id",
    "number",
    "one",
    "going",
    "use",
    "using",
    "one",
    "webcam",
    "multiple",
    "webcams",
    "installed",
    "write",
    "zero",
    "instead",
    "one",
    "write",
    "one",
    "specify",
    "going",
    "set",
    "width",
    "height",
    "width",
    "uh",
    "basically",
    "prop",
    "id",
    "number",
    "three",
    "write",
    "1280",
    "width",
    "cap",
    "dot",
    "set",
    "prop",
    "id",
    "number",
    "four",
    "height",
    "going",
    "set",
    "basic",
    "idea",
    "wanted",
    "another",
    "one",
    "mostly",
    "used",
    "webcam",
    "640",
    "480",
    "dimensions",
    "commonly",
    "used",
    "one",
    "want",
    "use",
    "going",
    "write",
    "true",
    "going",
    "write",
    "success",
    "image",
    "equals",
    "cap",
    "dot",
    "read",
    "going",
    "write",
    "show",
    "want",
    "show",
    "image",
    "write",
    "image",
    "img",
    "image",
    "want",
    "show",
    "cv2",
    "dot",
    "weight",
    "key",
    "want",
    "give",
    "one",
    "millisecond",
    "delay",
    "run",
    "webcam",
    "default",
    "right",
    "click",
    "run",
    "webcam",
    "running",
    "go",
    "webcam",
    "see",
    "running",
    "live",
    "close",
    "wanted",
    "write",
    "1280",
    "640",
    "oh",
    "640",
    "720",
    "bad",
    "1280",
    "720",
    "work",
    "well",
    "go",
    "bit",
    "area",
    "work",
    "one",
    "want",
    "use",
    "keep",
    "let",
    "go",
    "ahead",
    "create",
    "model",
    "model",
    "seen",
    "earlier",
    "go",
    "yolo",
    "basics",
    "see",
    "create",
    "yolo",
    "model",
    "find",
    "results",
    "like",
    "going",
    "write",
    "model",
    "equals",
    "uh",
    "going",
    "write",
    "yolo",
    "give",
    "weights",
    "weights",
    "going",
    "use",
    "nano",
    "purpose",
    "go",
    "back",
    "write",
    "yolo",
    "yolo",
    "dash",
    "weights",
    "write",
    "version",
    "yolo",
    "version",
    "8",
    "nano",
    "yolo",
    "version",
    "8",
    "nano",
    "wrote",
    "one",
    "extra",
    "version",
    "8",
    "nano",
    "dot",
    "pt",
    "go",
    "write",
    "results",
    "equals",
    "model",
    "going",
    "give",
    "image",
    "going",
    "write",
    "stream",
    "equals",
    "true",
    "write",
    "stream",
    "equals",
    "use",
    "generators",
    "bit",
    "efficient",
    "without",
    "recommended",
    "use",
    "stream",
    "equals",
    "true",
    "run",
    "let",
    "see",
    "happens",
    "get",
    "errors",
    "trying",
    "check",
    "getting",
    "errors",
    "means",
    "heading",
    "wrong",
    "direction",
    "go",
    "getting",
    "error",
    "good",
    "result",
    "check",
    "individual",
    "bounding",
    "boxes",
    "see",
    "well",
    "performs",
    "get",
    "results",
    "going",
    "loop",
    "going",
    "write",
    "poor",
    "r",
    "results",
    "uh",
    "going",
    "get",
    "bounding",
    "box",
    "results",
    "write",
    "box",
    "equals",
    "r",
    "dot",
    "boxes",
    "loop",
    "boxes",
    "write",
    "box",
    "boxes",
    "going",
    "find",
    "x",
    "bounding",
    "boxes",
    "two",
    "methods",
    "use",
    "x",
    "x",
    "means",
    "x1",
    "y1",
    "x2",
    "y2",
    "x1",
    "y1",
    "width",
    "height",
    "format",
    "need",
    "depends",
    "write",
    "box",
    "dot",
    "x",
    "x",
    "write",
    "box",
    "dot",
    "x",
    "width",
    "height",
    "one",
    "want",
    "would",
    "recommend",
    "x",
    "x",
    "easier",
    "input",
    "directly",
    "opencv",
    "right",
    "x1",
    "y1",
    "x2",
    "y2",
    "equals",
    "print",
    "values",
    "copy",
    "going",
    "simply",
    "print",
    "let",
    "see",
    "get",
    "getting",
    "error",
    "enough",
    "values",
    "unpack",
    "expected",
    "got",
    "one",
    "means",
    "packed",
    "insides",
    "need",
    "need",
    "get",
    "first",
    "element",
    "hopefully",
    "work",
    "go",
    "getting",
    "getting",
    "value",
    "279",
    "one",
    "zero",
    "three",
    "one",
    "zero",
    "three",
    "eight",
    "seven",
    "one",
    "twelve",
    "multiple",
    "detections",
    "getting",
    "two",
    "values",
    "getting",
    "x1",
    "y1",
    "x1",
    "x2",
    "y2",
    "values",
    "getting",
    "need",
    "need",
    "convert",
    "integers",
    "actually",
    "use",
    "copy",
    "part",
    "paste",
    "put",
    "integer",
    "convert",
    "integer",
    "integer",
    "integer",
    "go",
    "let",
    "run",
    "see",
    "works",
    "go",
    "getting",
    "values",
    "see",
    "getting",
    "actual",
    "values",
    "use",
    "opencv",
    "let",
    "go",
    "ahead",
    "create",
    "rectangle",
    "actually",
    "find",
    "getting",
    "correct",
    "bounding",
    "boxes",
    "write",
    "cv2",
    "dot",
    "rectangle",
    "rectangle",
    "give",
    "image",
    "points",
    "x1",
    "y1",
    "x2",
    "x2",
    "y2",
    "points",
    "give",
    "color",
    "color",
    "let",
    "put",
    "b",
    "let",
    "put",
    "zero",
    "green",
    "let",
    "200",
    "zero",
    "let",
    "make",
    "purple",
    "two",
    "five",
    "five",
    "zero",
    "two",
    "five",
    "five",
    "make",
    "purple",
    "okay",
    "thickness",
    "let",
    "put",
    "three",
    "yeah",
    "pretty",
    "much",
    "let",
    "run",
    "see",
    "works",
    "go",
    "detecting",
    "bring",
    "phone",
    "see",
    "bounding",
    "box",
    "around",
    "shows",
    "working",
    "fine",
    "um",
    "let",
    "let",
    "try",
    "pen",
    "detect",
    "pen",
    "yeah",
    "detects",
    "pen",
    "well",
    "detects",
    "phone",
    "let",
    "try",
    "remote",
    "detects",
    "remote",
    "well",
    "actually",
    "getting",
    "uh",
    "feedback",
    "exactly",
    "glass",
    "uh",
    "confident",
    "going",
    "detect",
    "well",
    "uh",
    "mentioned",
    "earlier",
    "use",
    "fancy",
    "rectangle",
    "well",
    "provide",
    "cv",
    "zone",
    "package",
    "order",
    "simply",
    "write",
    "cv",
    "zone",
    "dot",
    "corner",
    "rectangle",
    "give",
    "image",
    "given",
    "bounding",
    "box",
    "write",
    "uh",
    "bounding",
    "box",
    "pb",
    "b",
    "x",
    "bounding",
    "box",
    "coming",
    "uh",
    "actually",
    "x",
    "width",
    "height",
    "get",
    "write",
    "bounding",
    "box",
    "x",
    "width",
    "height",
    "give",
    "us",
    "x1",
    "y1",
    "width",
    "height",
    "put",
    "bounding",
    "box",
    "bbox",
    "equals",
    "convert",
    "integers",
    "um",
    "go",
    "worth",
    "height",
    "go",
    "repetition",
    "use",
    "one",
    "use",
    "time",
    "let",
    "put",
    "one",
    "one",
    "let",
    "put",
    "use",
    "either",
    "one",
    "time",
    "weird",
    "remove",
    "one",
    "opencv",
    "one",
    "cv",
    "zone",
    "let",
    "run",
    "see",
    "works",
    "go",
    "getting",
    "something",
    "wrong",
    "exactly",
    "wrong",
    "getting",
    "x1",
    "um",
    "happened",
    "x1",
    "y1",
    "w",
    "h",
    "okay",
    "something",
    "seems",
    "wrong",
    "let",
    "try",
    "um",
    "let",
    "get",
    "values",
    "subtract",
    "get",
    "width",
    "height",
    "width",
    "height",
    "equals",
    "x",
    "2",
    "minus",
    "x1",
    "2",
    "minus",
    "y1",
    "hopefully",
    "work",
    "let",
    "open",
    "remove",
    "bounding",
    "box",
    "simply",
    "write",
    "x1",
    "y1",
    "width",
    "heights",
    "let",
    "try",
    "way",
    "hopefully",
    "work",
    "go",
    "works",
    "green",
    "boxes",
    "also",
    "example",
    "phone",
    "see",
    "little",
    "bit",
    "fancier",
    "change",
    "colors",
    "uh",
    "colors",
    "edges",
    "change",
    "color",
    "inner",
    "rectangle",
    "information",
    "given",
    "click",
    "control",
    "click",
    "corner",
    "rectangle",
    "see",
    "corner",
    "rectangle",
    "go",
    "show",
    "length",
    "color",
    "corner",
    "color",
    "rectangle",
    "rectangle",
    "thickness",
    "thickness",
    "corner",
    "details",
    "given",
    "check",
    "based",
    "apply",
    "okay",
    "good",
    "next",
    "step",
    "would",
    "actually",
    "get",
    "confidence",
    "values",
    "class",
    "names",
    "class",
    "names",
    "yet",
    "showing",
    "bounding",
    "box",
    "let",
    "find",
    "confidence",
    "first",
    "confidence",
    "conf",
    "equals",
    "bounding",
    "box",
    "conf",
    "confidence",
    "let",
    "print",
    "see",
    "works",
    "go",
    "go",
    "see",
    "confidence",
    "values",
    "want",
    "rounded",
    "use",
    "math",
    "imports",
    "import",
    "math",
    "change",
    "value",
    "write",
    "math",
    "dot",
    "uh",
    "write",
    "ceiling",
    "floor",
    "seal",
    "based",
    "exactly",
    "want",
    "round",
    "want",
    "round",
    "two",
    "decimal",
    "places",
    "going",
    "multiply",
    "100",
    "going",
    "divide",
    "idea",
    "check",
    "confidence",
    "values",
    "two",
    "decimal",
    "places",
    "hopefully",
    "good",
    "getting",
    "one",
    "made",
    "mistake",
    "bracket",
    "ceiling",
    "dividing",
    "go",
    "getting",
    "good",
    "uh",
    "display",
    "display",
    "going",
    "use",
    "cv",
    "zone",
    "uh",
    "exactly",
    "going",
    "display",
    "going",
    "display",
    "confidence",
    "class",
    "name",
    "need",
    "box",
    "rectangle",
    "top",
    "display",
    "display",
    "image",
    "clear",
    "depending",
    "background",
    "background",
    "contrast",
    "actually",
    "display",
    "well",
    "pretty",
    "much",
    "color",
    "fade",
    "away",
    "want",
    "rectangle",
    "top",
    "rectangle",
    "want",
    "text",
    "uh",
    "create",
    "rectangle",
    "using",
    "opencv",
    "put",
    "text",
    "wo",
    "centered",
    "uh",
    "text",
    "bigger",
    "move",
    "away",
    "move",
    "box",
    "things",
    "like",
    "order",
    "fix",
    "function",
    "cv",
    "zone",
    "create",
    "rectangle",
    "put",
    "uh",
    "put",
    "text",
    "rectangle",
    "center",
    "based",
    "length",
    "text",
    "done",
    "automatic",
    "write",
    "cb",
    "zone",
    "cv",
    "zone",
    "dots",
    "uh",
    "put",
    "text",
    "tracks",
    "going",
    "give",
    "image",
    "give",
    "text",
    "text",
    "let",
    "put",
    "f",
    "string",
    "later",
    "going",
    "add",
    "stuff",
    "f",
    "string",
    "contain",
    "confidence",
    "given",
    "position",
    "position",
    "starting",
    "value",
    "x",
    "x1",
    "y1",
    "one",
    "bring",
    "little",
    "bit",
    "wanted",
    "push",
    "little",
    "bit",
    "say",
    "minus",
    "let",
    "say",
    "uh",
    "20",
    "30",
    "uh",
    "let",
    "check",
    "something",
    "like",
    "let",
    "run",
    "see",
    "works",
    "give",
    "us",
    "issue",
    "tell",
    "go",
    "giving",
    "us",
    "bring",
    "good",
    "bring",
    "phone",
    "go",
    "push",
    "goes",
    "bring",
    "goes",
    "go",
    "go",
    "bit",
    "go",
    "idea",
    "problem",
    "go",
    "see",
    "text",
    "actually",
    "goes",
    "um",
    "want",
    "uh",
    "want",
    "display",
    "write",
    "take",
    "max",
    "whether",
    "zero",
    "value",
    "take",
    "max",
    "whether",
    "0",
    "value",
    "whichever",
    "one",
    "bigger",
    "goes",
    "minus",
    "use",
    "go",
    "stay",
    "within",
    "let",
    "try",
    "go",
    "seem",
    "work",
    "well",
    "uh",
    "go",
    "uh",
    "go",
    "side",
    "working",
    "side",
    "working",
    "already",
    "minus",
    "20",
    "let",
    "remove",
    "minus",
    "hopefully",
    "work",
    "better",
    "put",
    "go",
    "let",
    "go",
    "like",
    "yeah",
    "working",
    "well",
    "let",
    "try",
    "20",
    "y1",
    "yeah",
    "better",
    "maybe",
    "make",
    "35",
    "go",
    "beyond",
    "go",
    "actually",
    "showing",
    "us",
    "remote",
    "push",
    "confidence",
    "level",
    "stays",
    "even",
    "though",
    "going",
    "image",
    "go",
    "good",
    "good",
    "let",
    "see",
    "phone",
    "yeah",
    "working",
    "fine",
    "okay",
    "good",
    "need",
    "class",
    "need",
    "know",
    "class",
    "detecting",
    "person",
    "car",
    "bike",
    "exactly",
    "detecting",
    "based",
    "coco",
    "data",
    "set",
    "get",
    "class",
    "names",
    "already",
    "created",
    "um",
    "called",
    "list",
    "get",
    "list",
    "website",
    "download",
    "free",
    "want",
    "thing",
    "simply",
    "type",
    "right",
    "see",
    "showing",
    "complete",
    "thing",
    "screen",
    "want",
    "go",
    "ahead",
    "simply",
    "pipe",
    "type",
    "80",
    "classes",
    "person",
    "bicycle",
    "car",
    "motorbike",
    "airplane",
    "blah",
    "blah",
    "blah",
    "list",
    "called",
    "class",
    "names",
    "need",
    "find",
    "id",
    "number",
    "id",
    "number",
    "zero",
    "person",
    "id",
    "number",
    "one",
    "bicycle",
    "id",
    "number",
    "two",
    "car",
    "need",
    "need",
    "find",
    "confidence",
    "uh",
    "sorry",
    "class",
    "found",
    "bounding",
    "box",
    "pounding",
    "box",
    "let",
    "write",
    "bounding",
    "box",
    "uh",
    "confidence",
    "going",
    "class",
    "name",
    "class",
    "name",
    "going",
    "use",
    "format",
    "write",
    "cls",
    "ca",
    "write",
    "class",
    "ca",
    "use",
    "class",
    "obvious",
    "reasons",
    "write",
    "class",
    "cls",
    "box",
    "write",
    "cls",
    "give",
    "class",
    "name",
    "let",
    "print",
    "uh",
    "let",
    "put",
    "rectangle",
    "let",
    "remove",
    "put",
    "directly",
    "rectangle",
    "write",
    "uh",
    "cls",
    "give",
    "space",
    "go",
    "confidence",
    "class",
    "let",
    "see",
    "works",
    "right",
    "give",
    "us",
    "class",
    "id",
    "give",
    "us",
    "actual",
    "name",
    "referring",
    "list",
    "refer",
    "list",
    "give",
    "us",
    "name",
    "well",
    "give",
    "us",
    "give",
    "us",
    "id",
    "number",
    "zero",
    "see",
    "decimal",
    "places",
    "sure",
    "uh",
    "figure",
    "phone",
    "67",
    "high",
    "class",
    "remote",
    "chair",
    "find",
    "chair",
    "find",
    "chairs",
    "confused",
    "chair",
    "anyways",
    "instead",
    "class",
    "write",
    "write",
    "class",
    "names",
    "put",
    "class",
    "remember",
    "floating",
    "value",
    "convert",
    "integer",
    "put",
    "integer",
    "run",
    "time",
    "around",
    "give",
    "us",
    "class",
    "name",
    "well",
    "foreign",
    "open",
    "go",
    "person",
    "confidence",
    "move",
    "around",
    "suitcase",
    "sure",
    "uh",
    "sometimes",
    "chair",
    "remote",
    "good",
    "phone",
    "cell",
    "phone",
    "good",
    "basic",
    "idea",
    "let",
    "see",
    "pen",
    "oh",
    "actually",
    "toothbrush",
    "know",
    "actually",
    "detecting",
    "toothbrush",
    "fine",
    "okay",
    "uh",
    "wanted",
    "check",
    "video",
    "wanted",
    "make",
    "uh",
    "names",
    "labels",
    "bit",
    "smaller",
    "input",
    "text",
    "rect",
    "write",
    "scale",
    "given",
    "let",
    "say",
    "squeeze",
    "everything",
    "make",
    "smaller",
    "helpful",
    "case",
    "lot",
    "detections",
    "example",
    "lot",
    "cars",
    "highway",
    "lot",
    "p",
    "lot",
    "people",
    "detected",
    "make",
    "easier",
    "go",
    "little",
    "bit",
    "harder",
    "read",
    "change",
    "let",
    "say",
    "put",
    "also",
    "change",
    "threshold",
    "sorry",
    "thickness",
    "thickness",
    "let",
    "put",
    "zero",
    "point",
    "five",
    "actually",
    "thickness",
    "check",
    "default",
    "thickness",
    "corner",
    "rex",
    "put",
    "extracts",
    "put",
    "extract",
    "default",
    "thickness",
    "three",
    "let",
    "put",
    "one",
    "put",
    "one",
    "hopefully",
    "able",
    "read",
    "even",
    "bit",
    "smaller",
    "drastically",
    "reduced",
    "scale",
    "3",
    "thickness",
    "well",
    "think",
    "go",
    "one",
    "sure",
    "go",
    "actually",
    "read",
    "person",
    "bring",
    "remote",
    "actually",
    "read",
    "increase",
    "decrease",
    "scale",
    "default",
    "three",
    "three",
    "wanted",
    "check",
    "okay",
    "um",
    "actually",
    "let",
    "keep",
    "going",
    "try",
    "video",
    "videos",
    "usually",
    "bigger",
    "let",
    "put",
    "scale",
    "one",
    "little",
    "bit",
    "bigger",
    "saw",
    "box",
    "actually",
    "scales",
    "scales",
    "automatically",
    "best",
    "part",
    "function",
    "okay",
    "let",
    "try",
    "videos",
    "copy",
    "going",
    "paste",
    "videos",
    "folder",
    "object",
    "detection",
    "yolo",
    "videos",
    "bikes",
    "cars",
    "motorbikes",
    "people",
    "ppe",
    "2",
    "ppe3",
    "different",
    "videos",
    "going",
    "use",
    "throughout",
    "course",
    "one",
    "folder",
    "instead",
    "video",
    "capture",
    "one",
    "let",
    "copy",
    "write",
    "web",
    "webcam",
    "write",
    "video",
    "remove",
    "webcam",
    "video",
    "point",
    "correct",
    "path",
    "go",
    "back",
    "go",
    "videos",
    "videos",
    "let",
    "try",
    "let",
    "try",
    "bikes",
    "bikes",
    "dot",
    "mp4",
    "size",
    "case",
    "video",
    "actually",
    "set",
    "size",
    "let",
    "put",
    "webcam",
    "like",
    "video",
    "good",
    "let",
    "run",
    "see",
    "works",
    "go",
    "lot",
    "people",
    "bicycle",
    "person",
    "car",
    "lot",
    "detections",
    "traffic",
    "lights",
    "detected",
    "well",
    "pretty",
    "good",
    "let",
    "try",
    "um",
    "cars",
    "cars",
    "try",
    "different",
    "versions",
    "go",
    "cars",
    "detected",
    "looks",
    "pretty",
    "good",
    "try",
    "motorbikes",
    "dot",
    "mp4",
    "go",
    "cars",
    "detected",
    "motorbike",
    "person",
    "pretty",
    "good",
    "results",
    "let",
    "try",
    "large",
    "version",
    "video",
    "large",
    "version",
    "see",
    "happens",
    "probably",
    "lot",
    "slower",
    "go",
    "getting",
    "better",
    "results",
    "terms",
    "detections",
    "good",
    "okay",
    "uh",
    "let",
    "put",
    "back",
    "nano",
    "people",
    "let",
    "try",
    "people",
    "p",
    "e",
    "people",
    "let",
    "run",
    "go",
    "detecting",
    "people",
    "well",
    "pretty",
    "good",
    "basic",
    "idea",
    "use",
    "webcam",
    "yolo",
    "version",
    "8",
    "detect",
    "different",
    "objects",
    "quite",
    "efficient",
    "way",
    "later",
    "going",
    "use",
    "right",
    "actually",
    "using",
    "cpu",
    "go",
    "large",
    "version",
    "actually",
    "slow",
    "next",
    "chapter",
    "actually",
    "going",
    "use",
    "code",
    "going",
    "run",
    "gpu",
    "much",
    "faster",
    "let",
    "go",
    "ahead",
    "try",
    "previous",
    "chapter",
    "saw",
    "run",
    "yolo",
    "version",
    "8",
    "webcam",
    "took",
    "help",
    "opencv",
    "actually",
    "problem",
    "saw",
    "using",
    "cpu",
    "actually",
    "run",
    "computation",
    "good",
    "cpu",
    "core",
    "i9",
    "12th",
    "generation",
    "still",
    "unable",
    "handle",
    "information",
    "comes",
    "large",
    "version",
    "using",
    "nano",
    "version",
    "fine",
    "comes",
    "large",
    "medium",
    "version",
    "lags",
    "much",
    "see",
    "run",
    "right",
    "detecting",
    "video",
    "running",
    "video",
    "yolo",
    "version",
    "8",
    "large",
    "model",
    "see",
    "lag",
    "much",
    "takes",
    "almost",
    "300",
    "milliseconds",
    "run",
    "inference",
    "three",
    "frames",
    "per",
    "second",
    "say",
    "good",
    "exactly",
    "use",
    "gpu",
    "actually",
    "run",
    "hopefully",
    "gpu",
    "give",
    "us",
    "results",
    "exactly",
    "run",
    "gpu",
    "first",
    "need",
    "nvidia",
    "gpu",
    "check",
    "gpu",
    "level",
    "website",
    "compute",
    "compatibility",
    "based",
    "perform",
    "good",
    "bad",
    "based",
    "powerful",
    "comes",
    "installations",
    "lot",
    "installations",
    "required",
    "run",
    "gpu",
    "well",
    "worth",
    "actually",
    "get",
    "running",
    "able",
    "run",
    "gpu",
    "able",
    "run",
    "yolo",
    "version",
    "8",
    "real",
    "time",
    "something",
    "good",
    "know",
    "listed",
    "everything",
    "detail",
    "let",
    "go",
    "ahead",
    "follow",
    "steps",
    "first",
    "thing",
    "need",
    "visual",
    "studio",
    "install",
    "visual",
    "studio",
    "requirement",
    "cuda",
    "toolkit",
    "two",
    "cuda",
    "toolkit",
    "requirement",
    "kit",
    "install",
    "first",
    "visual",
    "studio",
    "exactly",
    "need",
    "visual",
    "studio",
    "run",
    "download",
    "community",
    "version",
    "whichever",
    "one",
    "latest",
    "one",
    "download",
    "biggest",
    "thing",
    "need",
    "development",
    "c",
    "plus",
    "need",
    "install",
    "well",
    "make",
    "sure",
    "run",
    "uh",
    "install",
    "go",
    "ahead",
    "take",
    "uh",
    "quite",
    "gbs",
    "take",
    "download",
    "install",
    "done",
    "go",
    "official",
    "nvidious",
    "drivers",
    "example",
    "nvidia",
    "um",
    "rtx",
    "3080",
    "ti",
    "select",
    "geforce",
    "select",
    "30",
    "series",
    "geforce",
    "rtx",
    "3080",
    "ti",
    "using",
    "windows",
    "10",
    "select",
    "select",
    "studio",
    "driver",
    "english",
    "search",
    "going",
    "download",
    "simple",
    "wizard",
    "click",
    "next",
    "next",
    "next",
    "install",
    "quite",
    "easily",
    "installed",
    "go",
    "ahead",
    "install",
    "cuda",
    "toolkit",
    "install",
    "going",
    "website",
    "uh",
    "nvidia",
    "developer",
    "click",
    "windows",
    "x8664",
    "click",
    "11",
    "download",
    "local",
    "version",
    "believe",
    "coda",
    "let",
    "check",
    "download",
    "install",
    "check",
    "version",
    "well",
    "install",
    "program",
    "files",
    "go",
    "nvidia",
    "gpu",
    "computing",
    "toolkit",
    "go",
    "cuda",
    "based",
    "version",
    "latest",
    "version",
    "download",
    "well",
    "open",
    "see",
    "installer",
    "wizard",
    "click",
    "next",
    "next",
    "install",
    "c",
    "c",
    "find",
    "files",
    "keep",
    "folder",
    "open",
    "next",
    "going",
    "install",
    "cuda",
    "dnn",
    "stands",
    "deep",
    "neural",
    "networks",
    "cuda",
    "deep",
    "neural",
    "networks",
    "click",
    "download",
    "uh",
    "cuda",
    "dnn",
    "need",
    "call",
    "registration",
    "website",
    "make",
    "sure",
    "registered",
    "free",
    "download",
    "make",
    "sure",
    "registered",
    "let",
    "download",
    "cuda",
    "dnn",
    "download",
    "get",
    "make",
    "sure",
    "versions",
    "compatible",
    "right",
    "installed",
    "toolkit",
    "download",
    "uh",
    "cuda",
    "dnn",
    "get",
    "open",
    "folder",
    "install",
    "open",
    "folder",
    "see",
    "bin",
    "folder",
    "cuda",
    "toolkit",
    "know",
    "hard",
    "pronounce",
    "cuda",
    "toolkit",
    "dnn",
    "go",
    "bin",
    "bin",
    "folder",
    "bin",
    "folder",
    "open",
    "bin",
    "open",
    "bin",
    "copy",
    "files",
    "paste",
    "drag",
    "drop",
    "already",
    "done",
    "ask",
    "go",
    "back",
    "go",
    "back",
    "go",
    "back",
    "already",
    "done",
    "bin",
    "go",
    "include",
    "include",
    "open",
    "include",
    "copy",
    "files",
    "drag",
    "drop",
    "main",
    "folder",
    "like",
    "go",
    "back",
    "go",
    "lib",
    "inside",
    "lib",
    "see",
    "files",
    "paste",
    "directly",
    "go",
    "x64",
    "going",
    "paste",
    "drag",
    "drop",
    "way",
    "install",
    "cuda",
    "toolkit",
    "along",
    "cuda",
    "deep",
    "neural",
    "networks",
    "cuda",
    "dnn",
    "basically",
    "installation",
    "one",
    "last",
    "thing",
    "go",
    "environmental",
    "variables",
    "click",
    "edit",
    "system",
    "variables",
    "go",
    "environment",
    "variables",
    "go",
    "cuda",
    "path",
    "version",
    "make",
    "sure",
    "points",
    "correct",
    "directory",
    "remember",
    "program",
    "files",
    "nvidia",
    "gpu",
    "computing",
    "toolkit",
    "cuda",
    "version",
    "make",
    "sure",
    "pointing",
    "right",
    "path",
    "pointing",
    "fine",
    "type",
    "make",
    "sure",
    "correct",
    "path",
    "hit",
    "ok",
    "drivers",
    "cuda",
    "toolkit",
    "cuda",
    "deep",
    "neural",
    "network",
    "installed",
    "one",
    "step",
    "need",
    "install",
    "pi",
    "torch",
    "compatible",
    "cuda",
    "see",
    "requirements",
    "already",
    "installed",
    "torch",
    "install",
    "torch",
    "compatible",
    "gpu",
    "coda",
    "go",
    "website",
    "pytorch",
    "website",
    "install",
    "using",
    "stable",
    "version",
    "windows",
    "going",
    "use",
    "pip",
    "install",
    "installing",
    "python",
    "installing",
    "cuda",
    "command",
    "need",
    "run",
    "going",
    "copy",
    "share",
    "command",
    "easier",
    "install",
    "copy",
    "bottom",
    "going",
    "go",
    "terminal",
    "important",
    "might",
    "make",
    "mistake",
    "frustrating",
    "make",
    "mistake",
    "make",
    "sure",
    "local",
    "click",
    "arrow",
    "select",
    "command",
    "prompt",
    "local",
    "install",
    "globally",
    "want",
    "install",
    "virtual",
    "environment",
    "go",
    "command",
    "prompt",
    "see",
    "installing",
    "virtual",
    "environment",
    "going",
    "paste",
    "link",
    "going",
    "press",
    "ok",
    "going",
    "hit",
    "enter",
    "take",
    "done",
    "already",
    "uh",
    "files",
    "archived",
    "uh",
    "cache",
    "able",
    "install",
    "quickly",
    "otherwise",
    "take",
    "actually",
    "install",
    "done",
    "go",
    "back",
    "go",
    "close",
    "webcam",
    "right",
    "click",
    "run",
    "yolo",
    "actually",
    "using",
    "gpu",
    "right",
    "gpu",
    "right",
    "actually",
    "showing",
    "gpu",
    "means",
    "something",
    "wrong",
    "uh",
    "install",
    "properly",
    "go",
    "file",
    "settings",
    "interpreter",
    "go",
    "torch",
    "using",
    "torch",
    "earlier",
    "probably",
    "using",
    "properly",
    "uninstall",
    "foreign",
    "make",
    "sure",
    "uninstall",
    "torch",
    "audio",
    "torch",
    "vision",
    "uninstall",
    "press",
    "ok",
    "go",
    "terminal",
    "run",
    "command",
    "see",
    "using",
    "cached",
    "otherwise",
    "quite",
    "big",
    "file",
    "almost",
    "gbs",
    "take",
    "download",
    "install",
    "think",
    "happened",
    "earlier",
    "requirements",
    "already",
    "satisfied",
    "torch",
    "vision",
    "actually",
    "reinstall",
    "install",
    "anything",
    "believe",
    "happened",
    "need",
    "uninstall",
    "install",
    "currently",
    "installing",
    "let",
    "see",
    "works",
    "saying",
    "requires",
    "later",
    "version",
    "opencv",
    "using",
    "um",
    "believe",
    "fine",
    "otherwise",
    "installed",
    "let",
    "run",
    "see",
    "getting",
    "updating",
    "running",
    "let",
    "run",
    "go",
    "see",
    "says",
    "ultralytics",
    "yolo",
    "python",
    "blah",
    "blah",
    "blah",
    "cuda0",
    "nvidia",
    "geforce",
    "uh",
    "3080",
    "ti",
    "means",
    "using",
    "cpu",
    "actually",
    "using",
    "gpu",
    "open",
    "go",
    "lighting",
    "fast",
    "using",
    "gpu",
    "earlier",
    "using",
    "cpu",
    "dead",
    "slow",
    "using",
    "gpu",
    "remember",
    "using",
    "large",
    "version",
    "demonstration",
    "still",
    "running",
    "real",
    "time",
    "good",
    "means",
    "gpus",
    "running",
    "properly",
    "accelerated",
    "um",
    "video",
    "inference",
    "running",
    "right",
    "inference",
    "10",
    "milliseconds",
    "earlier",
    "inference",
    "300",
    "milliseconds",
    "difference",
    "30x",
    "big",
    "big",
    "difference",
    "using",
    "gpu",
    "great",
    "uh",
    "run",
    "issues",
    "go",
    "back",
    "check",
    "video",
    "follow",
    "steps",
    "one",
    "one",
    "work",
    "fine",
    "end",
    "big",
    "difference",
    "well",
    "worth",
    "trying",
    "runs",
    "properly",
    "much",
    "faster",
    "system",
    "running",
    "yolo",
    "real",
    "time",
    "want",
    "implement",
    "computer",
    "vision",
    "ideas",
    "solve",
    "real",
    "world",
    "problems",
    "upgrade",
    "resume",
    "enhancing",
    "computer",
    "vision",
    "skills",
    "computer",
    "perfect",
    "platform",
    "cv",
    "zone",
    "computer",
    "vision",
    "platform",
    "100",
    "000",
    "users",
    "courses",
    "sold",
    "80",
    "different",
    "countries",
    "want",
    "commercialize",
    "computer",
    "vision",
    "ideas",
    "computer",
    "vision",
    "web",
    "development",
    "course",
    "perfect",
    "course",
    "learn",
    "basics",
    "web",
    "development",
    "computer",
    "vision",
    "well",
    "integrate",
    "solve",
    "real",
    "world",
    "problems",
    "like",
    "customer",
    "engagement",
    "car",
    "counter",
    "face",
    "attendance",
    "shirt",
    "size",
    "measurement",
    "lot",
    "advanced",
    "zone",
    "programming",
    "another",
    "great",
    "course",
    "focuses",
    "practical",
    "implementation",
    "learn",
    "basics",
    "drone",
    "programming",
    "well",
    "advanced",
    "concepts",
    "like",
    "face",
    "following",
    "body",
    "following",
    "gesture",
    "control",
    "lot",
    "developing",
    "mobile",
    "apps",
    "thing",
    "check",
    "computer",
    "vision",
    "mobile",
    "apps",
    "course",
    "learn",
    "basics",
    "create",
    "several",
    "apps",
    "including",
    "object",
    "detection",
    "augmented",
    "reality",
    "face",
    "detection",
    "document",
    "scanner",
    "lot",
    "best",
    "part",
    "create",
    "single",
    "app",
    "work",
    "ios",
    "android",
    "passionate",
    "integrating",
    "hardware",
    "software",
    "check",
    "computer",
    "vision",
    "arduino",
    "course",
    "learn",
    "basics",
    "along",
    "amazing",
    "projects",
    "conveyor",
    "belt",
    "assembly",
    "face",
    "tracking",
    "lab",
    "gesture",
    "control",
    "phase",
    "door",
    "lock",
    "lot",
    "computer",
    "vision",
    "game",
    "development",
    "another",
    "great",
    "course",
    "fun",
    "meets",
    "programming",
    "learn",
    "create",
    "games",
    "fruit",
    "ninja",
    "balloon",
    "pop",
    "squid",
    "game",
    "cookie",
    "cutter",
    "using",
    "latest",
    "computer",
    "vision",
    "techniques",
    "learn",
    "compile",
    "awesome",
    "game",
    "exe",
    "file",
    "make",
    "accessible",
    "also",
    "learn",
    "implement",
    "computer",
    "vision",
    "embedded",
    "devices",
    "computer",
    "vision",
    "jetson",
    "nano",
    "cores",
    "learn",
    "basics",
    "jetson",
    "nano",
    "computer",
    "vision",
    "along",
    "creating",
    "exciting",
    "projects",
    "like",
    "lane",
    "following",
    "robot",
    "eye",
    "tracking",
    "object",
    "following",
    "lot",
    "courses",
    "clear",
    "path",
    "basics",
    "advanced",
    "maximum",
    "knowledge",
    "short",
    "amount",
    "time",
    "check",
    "links",
    "description",
    "get",
    "started",
    "computer",
    "vision",
    "journey",
    "today",
    "understand",
    "run",
    "yolo",
    "run",
    "using",
    "gpu",
    "going",
    "create",
    "projects",
    "first",
    "project",
    "going",
    "car",
    "counter",
    "within",
    "video",
    "going",
    "count",
    "number",
    "cars",
    "pass",
    "certain",
    "region",
    "first",
    "create",
    "new",
    "folder",
    "go",
    "oh",
    "new",
    "file",
    "go",
    "new",
    "click",
    "directory",
    "going",
    "write",
    "project",
    "one",
    "name",
    "project",
    "going",
    "call",
    "car",
    "counter",
    "within",
    "car",
    "counter",
    "basically",
    "going",
    "copy",
    "code",
    "yolo",
    "webcam",
    "copy",
    "yolo",
    "webcam",
    "going",
    "paste",
    "project",
    "one",
    "call",
    "car",
    "dash",
    "let",
    "write",
    "capital",
    "car",
    "dash",
    "counter",
    "lot",
    "pi",
    "exact",
    "code",
    "running",
    "earlier",
    "make",
    "sure",
    "running",
    "videos",
    "remove",
    "webcam",
    "part",
    "going",
    "run",
    "lot",
    "things",
    "done",
    "set",
    "already",
    "start",
    "project",
    "right",
    "see",
    "running",
    "gpu",
    "using",
    "3080",
    "ti",
    "go",
    "getting",
    "cars",
    "getting",
    "bounding",
    "box",
    "information",
    "class",
    "confidence",
    "see",
    "uh",
    "small",
    "actually",
    "putting",
    "corner",
    "rectangle",
    "properly",
    "first",
    "let",
    "fix",
    "uh",
    "corner",
    "rectangle",
    "uh",
    "write",
    "length",
    "equals",
    "think",
    "default",
    "yeah",
    "dirty",
    "default",
    "let",
    "put",
    "15",
    "length",
    "corner",
    "green",
    "part",
    "see",
    "referring",
    "make",
    "smaller",
    "yeah",
    "go",
    "smaller",
    "green",
    "part",
    "wanted",
    "even",
    "reduce",
    "make",
    "like",
    "say",
    "five",
    "really",
    "small",
    "let",
    "see",
    "works",
    "go",
    "um",
    "small",
    "maybe",
    "eight",
    "nine",
    "let",
    "say",
    "go",
    "think",
    "better",
    "okay",
    "cars",
    "coming",
    "rectangle",
    "top",
    "actually",
    "make",
    "smaller",
    "see",
    "better",
    "let",
    "make",
    "let",
    "say",
    "thickness",
    "still",
    "one",
    "reduce",
    "believe",
    "smaller",
    "see",
    "title",
    "smaller",
    "offset",
    "around",
    "region",
    "quite",
    "huge",
    "reduce",
    "variable",
    "called",
    "offset",
    "uh",
    "called",
    "offset",
    "default",
    "believe",
    "offset",
    "bounding",
    "box",
    "um",
    "yeah",
    "put",
    "text",
    "right",
    "offset",
    "let",
    "make",
    "let",
    "put",
    "three",
    "want",
    "huge",
    "offset",
    "want",
    "cars",
    "visible",
    "go",
    "much",
    "better",
    "see",
    "offset",
    "see",
    "cars",
    "coming",
    "looks",
    "good",
    "okay",
    "basic",
    "idea",
    "cars",
    "coming",
    "thing",
    "might",
    "car",
    "might",
    "truck",
    "exactly",
    "trying",
    "find",
    "want",
    "cars",
    "add",
    "statement",
    "car",
    "detect",
    "otherwise",
    "find",
    "vehicles",
    "want",
    "find",
    "example",
    "case",
    "let",
    "say",
    "detect",
    "car",
    "detect",
    "motorbike",
    "detect",
    "bus",
    "detect",
    "truck",
    "four",
    "categories",
    "going",
    "detect",
    "go",
    "cars",
    "video",
    "let",
    "open",
    "go",
    "go",
    "little",
    "bit",
    "back",
    "go",
    "believe",
    "detected",
    "truck",
    "car",
    "fine",
    "motorbike",
    "want",
    "detect",
    "later",
    "also",
    "uh",
    "yeah",
    "believe",
    "detected",
    "truck",
    "well",
    "detected",
    "bus",
    "different",
    "categories",
    "want",
    "detect",
    "case",
    "first",
    "give",
    "statement",
    "detect",
    "categories",
    "write",
    "current",
    "class",
    "equals",
    "uh",
    "last",
    "names",
    "cls",
    "give",
    "us",
    "class",
    "name",
    "well",
    "instead",
    "writing",
    "write",
    "current",
    "class",
    "write",
    "current",
    "class",
    "equals",
    "car",
    "going",
    "display",
    "case",
    "motorbike",
    "case",
    "truck",
    "get",
    "detected",
    "put",
    "zero",
    "every",
    "time",
    "press",
    "keyboard",
    "button",
    "go",
    "forward",
    "otherwise",
    "go",
    "forward",
    "go",
    "let",
    "keep",
    "pressing",
    "let",
    "move",
    "forward",
    "see",
    "detecting",
    "displaying",
    "confidence",
    "class",
    "value",
    "well",
    "displaying",
    "rectangle",
    "rectangle",
    "displayed",
    "rectangle",
    "wanted",
    "remove",
    "well",
    "right",
    "displaying",
    "confidence",
    "class",
    "values",
    "trying",
    "detecting",
    "means",
    "motorbike",
    "detected",
    "truck",
    "mentioned",
    "detected",
    "let",
    "move",
    "bus",
    "see",
    "bus",
    "detected",
    "see",
    "detected",
    "classifying",
    "said",
    "car",
    "bus",
    "truck",
    "detecting",
    "two",
    "clarify",
    "define",
    "say",
    "also",
    "put",
    "confidence",
    "level",
    "confidence",
    "level",
    "low",
    "display",
    "write",
    "confidence",
    "greater",
    "least",
    "writing",
    "confidence",
    "greater",
    "car",
    "detect",
    "four",
    "categories",
    "write",
    "four",
    "write",
    "car",
    "truck",
    "bus",
    "uh",
    "motorbike",
    "let",
    "go",
    "motorbike",
    "motorbike",
    "right",
    "yeah",
    "motorbike",
    "car",
    "motorbike",
    "uh",
    "bus",
    "truck",
    "ones",
    "detecting",
    "rest",
    "detect",
    "even",
    "put",
    "rectangle",
    "around",
    "bring",
    "statement",
    "paste",
    "let",
    "run",
    "see",
    "works",
    "detect",
    "see",
    "detecting",
    "something",
    "detecting",
    "probably",
    "traffic",
    "sign",
    "detecting",
    "part",
    "see",
    "says",
    "motorbike",
    "five",
    "nine",
    "percent",
    "uh",
    "confidence",
    "59",
    "confidence",
    "see",
    "car",
    "detected",
    "truck",
    "also",
    "detected",
    "truck",
    "move",
    "forward",
    "wait",
    "bus",
    "whether",
    "selected",
    "bus",
    "truck",
    "truck",
    "well",
    "truck",
    "well",
    "go",
    "truck",
    "earlier",
    "detecting",
    "truck",
    "detecting",
    "bus",
    "actually",
    "gives",
    "us",
    "good",
    "uh",
    "point",
    "point",
    "actually",
    "cars",
    "classified",
    "properly",
    "end",
    "might",
    "classify",
    "properly",
    "back",
    "might",
    "classify",
    "properly",
    "middle",
    "detect",
    "classify",
    "properly",
    "region",
    "count",
    "gives",
    "us",
    "idea",
    "trying",
    "find",
    "position",
    "try",
    "loop",
    "images",
    "try",
    "find",
    "correct",
    "position",
    "detections",
    "correct",
    "tell",
    "oh",
    "good",
    "position",
    "good",
    "position",
    "okay",
    "done",
    "cars",
    "see",
    "wrong",
    "places",
    "well",
    "example",
    "care",
    "happening",
    "counts",
    "interrupt",
    "count",
    "example",
    "car",
    "com",
    "going",
    "want",
    "detect",
    "want",
    "detect",
    "point",
    "main",
    "road",
    "constrain",
    "values",
    "get",
    "good",
    "results",
    "otherwise",
    "completely",
    "open",
    "constrained",
    "might",
    "get",
    "best",
    "results",
    "okay",
    "constrain",
    "make",
    "sure",
    "region",
    "detect",
    "uh",
    "call",
    "uh",
    "cars",
    "whatever",
    "object",
    "one",
    "thing",
    "simple",
    "within",
    "opencv",
    "within",
    "pycharm",
    "environment",
    "create",
    "rectangle",
    "crop",
    "image",
    "create",
    "rectangle",
    "say",
    "okay",
    "detect",
    "say",
    "crop",
    "image",
    "image",
    "going",
    "send",
    "detector",
    "good",
    "idea",
    "shape",
    "rectangular",
    "square",
    "want",
    "exact",
    "shape",
    "simple",
    "go",
    "going",
    "create",
    "new",
    "design",
    "new",
    "design",
    "design",
    "1280",
    "size",
    "video",
    "exactly",
    "size",
    "design",
    "going",
    "import",
    "video",
    "video",
    "see",
    "exact",
    "one",
    "resize",
    "correct",
    "size",
    "fills",
    "whole",
    "screen",
    "going",
    "press",
    "r",
    "give",
    "rectangle",
    "rectangle",
    "determine",
    "region",
    "going",
    "rotate",
    "going",
    "align",
    "dotted",
    "line",
    "lane",
    "going",
    "align",
    "one",
    "going",
    "align",
    "lane",
    "let",
    "go",
    "ahead",
    "align",
    "try",
    "align",
    "much",
    "something",
    "like",
    "something",
    "like",
    "go",
    "move",
    "around",
    "like",
    "go",
    "first",
    "one",
    "second",
    "one",
    "going",
    "basically",
    "trying",
    "trying",
    "create",
    "mask",
    "views",
    "mask",
    "region",
    "going",
    "put",
    "another",
    "image",
    "go",
    "another",
    "rectangle",
    "area",
    "small",
    "useful",
    "going",
    "remove",
    "well",
    "create",
    "another",
    "rectangle",
    "put",
    "something",
    "like",
    "bottom",
    "well",
    "want",
    "detect",
    "create",
    "another",
    "one",
    "put",
    "something",
    "like",
    "depending",
    "region",
    "trying",
    "detect",
    "create",
    "going",
    "select",
    "going",
    "change",
    "color",
    "black",
    "beginning",
    "well",
    "going",
    "extend",
    "region",
    "visible",
    "go",
    "simple",
    "create",
    "mask",
    "click",
    "video",
    "delete",
    "give",
    "white",
    "reason",
    "simply",
    "share",
    "download",
    "need",
    "transparent",
    "background",
    "need",
    "compress",
    "download",
    "image",
    "downloaded",
    "going",
    "import",
    "downloaded",
    "file",
    "going",
    "bring",
    "project",
    "project",
    "one",
    "car",
    "counter",
    "going",
    "name",
    "mask",
    "dot",
    "png",
    "open",
    "projects",
    "let",
    "close",
    "others",
    "mask",
    "remove",
    "overlay",
    "images",
    "region",
    "detected",
    "uh",
    "find",
    "cars",
    "within",
    "regions",
    "need",
    "need",
    "import",
    "mask",
    "bottom",
    "going",
    "say",
    "mask",
    "equals",
    "read",
    "going",
    "read",
    "image",
    "write",
    "get",
    "webcam",
    "image",
    "get",
    "video",
    "image",
    "going",
    "overlay",
    "uh",
    "mask",
    "main",
    "image",
    "going",
    "use",
    "bitwise",
    "operation",
    "give",
    "us",
    "region",
    "going",
    "going",
    "say",
    "image",
    "jin",
    "equals",
    "cb2",
    "dot",
    "bitwise",
    "going",
    "give",
    "image",
    "going",
    "give",
    "mask",
    "give",
    "us",
    "img",
    "region",
    "going",
    "display",
    "image",
    "region",
    "let",
    "copy",
    "paste",
    "write",
    "region",
    "write",
    "image",
    "region",
    "let",
    "run",
    "see",
    "get",
    "region",
    "well",
    "make",
    "sure",
    "size",
    "size",
    "work",
    "right",
    "know",
    "1280",
    "720",
    "created",
    "image",
    "1280x720",
    "mask",
    "otherwise",
    "work",
    "go",
    "mask",
    "image",
    "region",
    "see",
    "detect",
    "region",
    "need",
    "want",
    "detect",
    "part",
    "actually",
    "mask",
    "wrong",
    "um",
    "perfect",
    "car",
    "visible",
    "correct",
    "something",
    "wrong",
    "let",
    "go",
    "back",
    "canva",
    "let",
    "undo",
    "yeah",
    "correct",
    "need",
    "go",
    "little",
    "bit",
    "higher",
    "go",
    "guess",
    "better",
    "representation",
    "go",
    "going",
    "delete",
    "new",
    "mask",
    "going",
    "download",
    "going",
    "delete",
    "previous",
    "mask",
    "going",
    "drag",
    "new",
    "mask",
    "call",
    "mask",
    "dot",
    "png",
    "going",
    "run",
    "hopefully",
    "time",
    "around",
    "face",
    "issue",
    "okay",
    "image",
    "mask",
    "go",
    "plate",
    "seems",
    "fine",
    "yeah",
    "good",
    "okay",
    "send",
    "image",
    "system",
    "terms",
    "computation",
    "efficient",
    "well",
    "instead",
    "image",
    "send",
    "image",
    "region",
    "simple",
    "let",
    "run",
    "go",
    "based",
    "image",
    "region",
    "see",
    "area",
    "detected",
    "cars",
    "within",
    "region",
    "detecting",
    "cars",
    "behind",
    "getting",
    "side",
    "getting",
    "middle",
    "specified",
    "region",
    "getting",
    "detections",
    "play",
    "reaches",
    "region",
    "detects",
    "car",
    "bike",
    "good",
    "see",
    "looks",
    "good",
    "yeah",
    "okay",
    "specified",
    "region",
    "see",
    "cars",
    "detected",
    "need",
    "count",
    "order",
    "count",
    "need",
    "certain",
    "region",
    "line",
    "passes",
    "line",
    "consider",
    "counted",
    "need",
    "know",
    "second",
    "thing",
    "need",
    "actual",
    "tracker",
    "right",
    "detecting",
    "cars",
    "next",
    "frame",
    "know",
    "car",
    "gone",
    "need",
    "tracking",
    "id",
    "detect",
    "car",
    "first",
    "frame",
    "need",
    "know",
    "car",
    "go",
    "next",
    "frame",
    "assign",
    "id",
    "first",
    "one",
    "id",
    "number",
    "one",
    "second",
    "frame",
    "remain",
    "id",
    "number",
    "one",
    "go",
    "item",
    "number",
    "two",
    "three",
    "four",
    "five",
    "basically",
    "tracking",
    "problem",
    "within",
    "consecutive",
    "frames",
    "need",
    "find",
    "object",
    "moving",
    "assign",
    "unique",
    "ids",
    "count",
    "need",
    "find",
    "first",
    "tracker",
    "tracker",
    "going",
    "use",
    "called",
    "sort",
    "find",
    "github",
    "see",
    "abby",
    "welly",
    "thanks",
    "contributors",
    "actually",
    "created",
    "tracker",
    "easy",
    "use",
    "showing",
    "us",
    "use",
    "well",
    "need",
    "sort",
    "dot",
    "pi",
    "click",
    "code",
    "download",
    "file",
    "course",
    "file",
    "also",
    "available",
    "uh",
    "zip",
    "file",
    "find",
    "come",
    "github",
    "download",
    "also",
    "requirements",
    "uh",
    "filter",
    "scikit",
    "image",
    "lab",
    "requirements",
    "already",
    "fulfilled",
    "added",
    "requirements",
    "well",
    "filter",
    "scikit",
    "image",
    "lab",
    "ones",
    "already",
    "installed",
    "need",
    "need",
    "bring",
    "file",
    "let",
    "copy",
    "bring",
    "project",
    "one",
    "simple",
    "sorter",
    "simple",
    "online",
    "tracker",
    "copyright",
    "alex",
    "beverly",
    "see",
    "code",
    "going",
    "anything",
    "uh",
    "need",
    "know",
    "use",
    "import",
    "going",
    "write",
    "import",
    "sort",
    "actually",
    "write",
    "sort",
    "sort",
    "import",
    "everything",
    "easier",
    "us",
    "work",
    "going",
    "going",
    "create",
    "instance",
    "sorter",
    "sorting",
    "let",
    "call",
    "tracking",
    "tracker",
    "equals",
    "sort",
    "give",
    "maximum",
    "age",
    "limit",
    "number",
    "frames",
    "uh",
    "gone",
    "still",
    "recognize",
    "within",
    "region",
    "id",
    "number",
    "one",
    "lost",
    "many",
    "frames",
    "wait",
    "detect",
    "back",
    "higher",
    "uh",
    "longer",
    "wait",
    "come",
    "back",
    "maximum",
    "age",
    "let",
    "put",
    "20",
    "minimum",
    "hits",
    "let",
    "put",
    "two",
    "iou",
    "threshold",
    "parameters",
    "change",
    "default",
    "values",
    "well",
    "go",
    "sort",
    "maximum",
    "age",
    "one",
    "really",
    "bad",
    "uh",
    "really",
    "useful",
    "minimum",
    "hits",
    "three",
    "iou",
    "threshold",
    "keep",
    "uh",
    "let",
    "put",
    "three",
    "iou",
    "threshold",
    "um",
    "explained",
    "theory",
    "part",
    "familiar",
    "go",
    "ahead",
    "check",
    "intersection",
    "union",
    "threshold",
    "find",
    "good",
    "overlap",
    "bounding",
    "boxes",
    "uh",
    "values",
    "play",
    "around",
    "see",
    "type",
    "results",
    "get",
    "order",
    "run",
    "simple",
    "write",
    "tracker",
    "dot",
    "update",
    "need",
    "update",
    "list",
    "detections",
    "write",
    "detections",
    "need",
    "find",
    "detections",
    "already",
    "way",
    "bounding",
    "boxes",
    "need",
    "need",
    "put",
    "array",
    "need",
    "put",
    "list",
    "need",
    "make",
    "sure",
    "format",
    "exactly",
    "requires",
    "format",
    "need",
    "know",
    "go",
    "sort",
    "check",
    "uh",
    "update",
    "says",
    "numpy",
    "empty",
    "default",
    "numpy",
    "array",
    "0",
    "dimension",
    "five",
    "values",
    "format",
    "x1",
    "y1",
    "x2",
    "y2",
    "score",
    "feed",
    "get",
    "get",
    "erect",
    "concatenated",
    "um",
    "maybe",
    "mentioned",
    "get",
    "output",
    "return",
    "x1",
    "y1",
    "x2",
    "y2",
    "also",
    "get",
    "main",
    "thing",
    "id",
    "number",
    "need",
    "let",
    "copy",
    "update",
    "detections",
    "default",
    "detections",
    "type",
    "numpy",
    "list",
    "right",
    "get",
    "results",
    "going",
    "create",
    "list",
    "array",
    "detections",
    "detections",
    "empty",
    "0",
    "idea",
    "going",
    "detect",
    "car",
    "truck",
    "bus",
    "motorbike",
    "confidence",
    "greater",
    "going",
    "save",
    "detection",
    "list",
    "detection",
    "array",
    "going",
    "write",
    "going",
    "write",
    "current",
    "array",
    "equals",
    "numpy",
    "dot",
    "array",
    "going",
    "give",
    "x1",
    "x1",
    "y1",
    "x2",
    "y2",
    "also",
    "give",
    "confidence",
    "value",
    "five",
    "values",
    "requires",
    "normally",
    "list",
    "write",
    "dot",
    "append",
    "want",
    "add",
    "list",
    "write",
    "append",
    "goes",
    "goes",
    "goes",
    "like",
    "numpy",
    "array",
    "write",
    "append",
    "uh",
    "stack",
    "vertical",
    "stack",
    "simple",
    "write",
    "texans",
    "equals",
    "numpy",
    "dot",
    "vertical",
    "stack",
    "give",
    "current",
    "detection",
    "old",
    "detections",
    "already",
    "current",
    "array",
    "current",
    "array",
    "stack",
    "together",
    "ideal",
    "detections",
    "simply",
    "send",
    "update",
    "update",
    "dependent",
    "detect",
    "new",
    "need",
    "keep",
    "updating",
    "previous",
    "times",
    "well",
    "already",
    "empty",
    "one",
    "keep",
    "updating",
    "detections",
    "need",
    "get",
    "results",
    "write",
    "results",
    "uh",
    "tracker",
    "equals",
    "results",
    "tracker",
    "equals",
    "loop",
    "results",
    "tracker",
    "write",
    "example",
    "results",
    "results",
    "tracker",
    "going",
    "get",
    "x1",
    "y1",
    "x2",
    "y2",
    "id",
    "important",
    "thing",
    "get",
    "id",
    "basically",
    "result",
    "let",
    "print",
    "results",
    "actually",
    "print",
    "well",
    "later",
    "going",
    "use",
    "writing",
    "like",
    "let",
    "run",
    "see",
    "get",
    "something",
    "hopefully",
    "errors",
    "um",
    "otherwise",
    "heading",
    "wrong",
    "direction",
    "okay",
    "go",
    "three",
    "ids",
    "perfect",
    "id",
    "number",
    "one",
    "id",
    "number",
    "two",
    "id",
    "number",
    "three",
    "let",
    "press",
    "spacebar",
    "moving",
    "next",
    "one",
    "see",
    "id",
    "moves",
    "next",
    "one",
    "see",
    "fourth",
    "one",
    "come",
    "increased",
    "id",
    "go",
    "fifth",
    "one",
    "comes",
    "shows",
    "could",
    "find",
    "probably",
    "uh",
    "two",
    "showing",
    "three",
    "okay",
    "order",
    "understand",
    "better",
    "going",
    "uh",
    "going",
    "display",
    "id",
    "numbers",
    "become",
    "easier",
    "instead",
    "showing",
    "let",
    "show",
    "show",
    "well",
    "keep",
    "thickness",
    "bigger",
    "talking",
    "rectangle",
    "rectangle",
    "thickness",
    "rectangle",
    "thickness",
    "equals",
    "let",
    "say",
    "five",
    "one",
    "make",
    "little",
    "bit",
    "smaller",
    "see",
    "actual",
    "detection",
    "think",
    "tracking",
    "part",
    "well",
    "tracker",
    "detects",
    "bounding",
    "box",
    "let",
    "let",
    "try",
    "find",
    "uh",
    "uh",
    "simply",
    "use",
    "values",
    "integers",
    "yeah",
    "seem",
    "integers",
    "simply",
    "uh",
    "create",
    "corner",
    "rectangle",
    "write",
    "cv",
    "zone",
    "dots",
    "corner",
    "rectangle",
    "image",
    "give",
    "bounding",
    "box",
    "information",
    "bounding",
    "box",
    "information",
    "uh",
    "like",
    "let",
    "copy",
    "uh",
    "actually",
    "let",
    "copy",
    "corner",
    "rectangle",
    "lazy",
    "go",
    "x1",
    "y1",
    "width",
    "height",
    "time",
    "around",
    "put",
    "rectangle",
    "let",
    "say",
    "two",
    "put",
    "blue",
    "color",
    "color",
    "rectangle",
    "let",
    "put",
    "255",
    "0",
    "let",
    "show",
    "id",
    "well",
    "showing",
    "using",
    "put",
    "text",
    "rect",
    "right",
    "copy",
    "paste",
    "instead",
    "confidence",
    "current",
    "class",
    "going",
    "display",
    "id",
    "entical",
    "oh",
    "ice",
    "capital",
    "bad",
    "put",
    "capital",
    "let",
    "put",
    "small",
    "id",
    "like",
    "okay",
    "id",
    "yeah",
    "fine",
    "positioning",
    "x1",
    "y1",
    "x1",
    "y1",
    "already",
    "bugged",
    "like",
    "something",
    "already",
    "confidence",
    "actually",
    "let",
    "remove",
    "know",
    "already",
    "classes",
    "uh",
    "car",
    "bus",
    "whatever",
    "remove",
    "get",
    "id",
    "instead",
    "okay",
    "let",
    "run",
    "hopefully",
    "get",
    "good",
    "results",
    "expected",
    "sequence",
    "length",
    "2",
    "got",
    "happening",
    "um",
    "detected",
    "something",
    "said",
    "corner",
    "rectangle",
    "issue",
    "image",
    "color",
    "rt",
    "opencv",
    "argument",
    "rectangle",
    "expected",
    "length",
    "2",
    "got",
    "okay",
    "um",
    "getting",
    "error",
    "corner",
    "rectangle",
    "uh",
    "getting",
    "error",
    "uh",
    "let",
    "check",
    "corner",
    "rectangle",
    "color",
    "r",
    "color",
    "c",
    "r",
    "tr",
    "rt",
    "yeah",
    "rt",
    "uh",
    "let",
    "let",
    "print",
    "print",
    "x1",
    "want",
    "make",
    "sure",
    "x1",
    "actually",
    "integer",
    "floating",
    "value",
    "problem",
    "go",
    "yeah",
    "issue",
    "thing",
    "earlier",
    "uh",
    "convert",
    "integers",
    "go",
    "let",
    "run",
    "hopefully",
    "fine",
    "go",
    "showing",
    "us",
    "okay",
    "ids",
    "small",
    "let",
    "make",
    "bigger",
    "put",
    "text",
    "rect",
    "id",
    "max",
    "scale",
    "let",
    "put",
    "two",
    "thickness",
    "let",
    "put",
    "three",
    "offset",
    "let",
    "put",
    "big",
    "values",
    "clearly",
    "see",
    "going",
    "go",
    "uh",
    "point",
    "hit",
    "point",
    "id",
    "need",
    "convert",
    "id",
    "integer",
    "well",
    "let",
    "integer",
    "id",
    "okay",
    "go",
    "id1",
    "id2",
    "id3",
    "moment",
    "truth",
    "go",
    "next",
    "one",
    "ids",
    "remain",
    "flip",
    "around",
    "means",
    "tracking",
    "detecting",
    "press",
    "spacebar",
    "go",
    "press",
    "spacebar",
    "one",
    "two",
    "three",
    "four",
    "keep",
    "pressing",
    "go",
    "four",
    "lost",
    "kept",
    "uh",
    "brought",
    "back",
    "four",
    "left",
    "also",
    "see",
    "blue",
    "line",
    "blue",
    "line",
    "basically",
    "tracker",
    "detecting",
    "purple",
    "one",
    "detector",
    "yolo",
    "detecting",
    "keep",
    "going",
    "forward",
    "see",
    "five",
    "one",
    "nine",
    "issue",
    "go",
    "five",
    "might",
    "detected",
    "wrong",
    "ids",
    "long",
    "id",
    "remains",
    "9",
    "remains",
    "9",
    "fine",
    "line",
    "cross",
    "detect",
    "count",
    "fine",
    "go",
    "14",
    "14",
    "12",
    "12",
    "18",
    "18",
    "19",
    "19",
    "20",
    "uh",
    "23",
    "23",
    "24",
    "24",
    "good",
    "make",
    "line",
    "make",
    "line",
    "whenever",
    "line",
    "crosses",
    "whenever",
    "id",
    "crosses",
    "line",
    "going",
    "detect",
    "count",
    "uh",
    "simple",
    "first",
    "create",
    "line",
    "going",
    "write",
    "line",
    "equals",
    "value",
    "actually",
    "image",
    "region",
    "coming",
    "let",
    "remove",
    "need",
    "anymore",
    "line",
    "uh",
    "checked",
    "values",
    "already",
    "going",
    "put",
    "uh",
    "let",
    "call",
    "limits",
    "let",
    "call",
    "limits",
    "instead",
    "going",
    "write",
    "423",
    "297",
    "673",
    "limits",
    "using",
    "limits",
    "going",
    "create",
    "line",
    "line",
    "let",
    "draw",
    "tracker",
    "write",
    "give",
    "image",
    "given",
    "points",
    "points",
    "basically",
    "limits",
    "zero",
    "limits",
    "second",
    "point",
    "limits",
    "zero",
    "uh",
    "sorry",
    "limits",
    "two",
    "uh",
    "limits",
    "three",
    "need",
    "need",
    "color",
    "color",
    "let",
    "put",
    "red",
    "0",
    "0",
    "bgr",
    "255",
    "thickness",
    "let",
    "put",
    "five",
    "good",
    "run",
    "line",
    "right",
    "middle",
    "road",
    "go",
    "line",
    "ids",
    "cars",
    "cross",
    "line",
    "detected",
    "call",
    "detection",
    "actually",
    "extend",
    "left",
    "little",
    "bit",
    "gap",
    "let",
    "go",
    "limits",
    "uh",
    "x",
    "make",
    "let",
    "say",
    "move",
    "back",
    "20",
    "pixels",
    "23",
    "exact",
    "yeah",
    "knight",
    "perfect",
    "fine",
    "uh",
    "need",
    "next",
    "uh",
    "let",
    "remove",
    "detection",
    "part",
    "need",
    "draw",
    "rectangles",
    "detecting",
    "tracker",
    "corner",
    "rectangle",
    "remove",
    "show",
    "us",
    "blue",
    "ones",
    "go",
    "showing",
    "us",
    "blue",
    "ones",
    "actually",
    "like",
    "like",
    "purple",
    "color",
    "let",
    "make",
    "purple",
    "uh",
    "255",
    "make",
    "five",
    "five",
    "well",
    "rectangles",
    "purple",
    "go",
    "yeah",
    "like",
    "better",
    "uh",
    "next",
    "step",
    "find",
    "center",
    "point",
    "center",
    "points",
    "need",
    "check",
    "center",
    "point",
    "actually",
    "touched",
    "line",
    "touched",
    "line",
    "going",
    "say",
    "count",
    "idea",
    "find",
    "results",
    "x",
    "height",
    "everything",
    "need",
    "need",
    "find",
    "center",
    "call",
    "cx",
    "c",
    "center",
    "x",
    "center",
    "find",
    "x1",
    "plus",
    "width",
    "divided",
    "y1",
    "plus",
    "height",
    "divided",
    "make",
    "sure",
    "headed",
    "right",
    "direction",
    "draw",
    "cv2",
    "dot",
    "circle",
    "give",
    "image",
    "give",
    "cx",
    "cy",
    "going",
    "give",
    "radius",
    "let",
    "give",
    "five",
    "know",
    "giving",
    "everything",
    "5",
    "today",
    "give",
    "color",
    "two",
    "five",
    "five",
    "zero",
    "two",
    "five",
    "five",
    "purple",
    "thickness",
    "let",
    "put",
    "cv2",
    "dot",
    "filled",
    "want",
    "filled",
    "completely",
    "make",
    "sure",
    "uh",
    "circles",
    "correct",
    "position",
    "going",
    "draw",
    "go",
    "see",
    "circles",
    "soon",
    "circle",
    "actually",
    "falls",
    "region",
    "going",
    "count",
    "detected",
    "one",
    "go",
    "write",
    "need",
    "check",
    "limit",
    "x",
    "need",
    "check",
    "limit",
    "limit",
    "x",
    "straightforward",
    "starting",
    "ending",
    "till",
    "within",
    "region",
    "simple",
    "enough",
    "write",
    "limits",
    "zero",
    "first",
    "limit",
    "limits",
    "one",
    "two",
    "second",
    "limit",
    "x",
    "x",
    "two",
    "limits",
    "first",
    "one",
    "400",
    "second",
    "one",
    "six",
    "seven",
    "three",
    "idea",
    "going",
    "say",
    "cx",
    "c",
    "limit",
    "want",
    "say",
    "c",
    "equals",
    "exact",
    "value",
    "limit",
    "want",
    "say",
    "single",
    "value",
    "height",
    "single",
    "value",
    "want",
    "say",
    "value",
    "exactly",
    "297",
    "detect",
    "count",
    "sometimes",
    "car",
    "may",
    "fast",
    "might",
    "touch",
    "pixel",
    "value",
    "putting",
    "one",
    "one",
    "pixel",
    "value",
    "might",
    "problem",
    "need",
    "need",
    "create",
    "region",
    "line",
    "region",
    "see",
    "yeah",
    "region",
    "lies",
    "detected",
    "count",
    "simply",
    "write",
    "limits",
    "zero",
    "uh",
    "one",
    "plus",
    "20",
    "instance",
    "minus",
    "20",
    "next",
    "one",
    "say",
    "plus",
    "falls",
    "region",
    "detect",
    "detected",
    "going",
    "say",
    "total",
    "counts",
    "plus",
    "equals",
    "define",
    "total",
    "count",
    "write",
    "tracking",
    "write",
    "uh",
    "total",
    "count",
    "equals",
    "zero",
    "total",
    "count",
    "plus",
    "equals",
    "one",
    "show",
    "total",
    "count",
    "let",
    "copy",
    "cv",
    "zone",
    "function",
    "um",
    "uh",
    "put",
    "image",
    "put",
    "write",
    "count",
    "colin",
    "write",
    "total",
    "count",
    "uh",
    "already",
    "integer",
    "need",
    "worry",
    "given",
    "value",
    "x",
    "um",
    "let",
    "say",
    "50",
    "let",
    "say",
    "50",
    "well",
    "50",
    "50",
    "rest",
    "keep",
    "default",
    "uh",
    "happened",
    "okay",
    "let",
    "run",
    "go",
    "total",
    "count",
    "right",
    "zero",
    "nothing",
    "past",
    "region",
    "keep",
    "pressing",
    "go",
    "entered",
    "region",
    "counted",
    "one",
    "see",
    "issue",
    "press",
    "counted",
    "two",
    "still",
    "region",
    "uh",
    "single",
    "line",
    "region",
    "lies",
    "already",
    "counted",
    "two",
    "make",
    "region",
    "small",
    "might",
    "might",
    "count",
    "low",
    "make",
    "make",
    "big",
    "multiple",
    "counts",
    "need",
    "balance",
    "first",
    "need",
    "balance",
    "second",
    "thing",
    "need",
    "need",
    "check",
    "id",
    "already",
    "counted",
    "already",
    "counted",
    "add",
    "counter",
    "fix",
    "issue",
    "run",
    "point",
    "counted",
    "three",
    "times",
    "good",
    "okay",
    "instead",
    "making",
    "variable",
    "make",
    "list",
    "talking",
    "total",
    "count",
    "instead",
    "making",
    "total",
    "count",
    "variable",
    "make",
    "list",
    "list",
    "put",
    "ids",
    "one",
    "two",
    "five",
    "eight",
    "nine",
    "things",
    "like",
    "whenever",
    "detect",
    "new",
    "count",
    "check",
    "id",
    "already",
    "present",
    "count",
    "count",
    "add",
    "okay",
    "look",
    "like",
    "total",
    "count",
    "make",
    "list",
    "go",
    "say",
    "total",
    "count",
    "dot",
    "append",
    "going",
    "append",
    "value",
    "id",
    "okay",
    "check",
    "already",
    "total",
    "count",
    "check",
    "write",
    "uh",
    "total",
    "counts",
    "dot",
    "count",
    "id",
    "equals",
    "zero",
    "mean",
    "basically",
    "telling",
    "find",
    "number",
    "times",
    "write",
    "dot",
    "count",
    "means",
    "count",
    "number",
    "times",
    "id",
    "present",
    "list",
    "example",
    "5",
    "count",
    "number",
    "times",
    "5",
    "available",
    "5",
    "available",
    "two",
    "fives",
    "one",
    "oh",
    "sorry",
    "two",
    "5",
    "zero",
    "saying",
    "saying",
    "id",
    "already",
    "present",
    "total",
    "count",
    "dot",
    "append",
    "id",
    "time",
    "correct",
    "list",
    "actual",
    "value",
    "write",
    "find",
    "length",
    "list",
    "total",
    "count",
    "let",
    "stop",
    "run",
    "time",
    "around",
    "click",
    "count",
    "one",
    "go",
    "next",
    "frame",
    "count",
    "go",
    "count",
    "go",
    "next",
    "frame",
    "count",
    "count",
    "count",
    "second",
    "id",
    "count",
    "third",
    "id",
    "fourth",
    "fifth",
    "sixth",
    "seventh",
    "eight",
    "see",
    "detections",
    "missing",
    "uh",
    "increase",
    "value",
    "make",
    "right",
    "uh",
    "another",
    "check",
    "checking",
    "uh",
    "whether",
    "duplicate",
    "worry",
    "second",
    "thing",
    "change",
    "color",
    "line",
    "change",
    "color",
    "line",
    "whenever",
    "detected",
    "something",
    "turns",
    "green",
    "indication",
    "count",
    "print",
    "maybe",
    "end",
    "simply",
    "print",
    "red",
    "color",
    "know",
    "weird",
    "way",
    "simply",
    "print",
    "instead",
    "red",
    "print",
    "green",
    "basically",
    "overlaying",
    "top",
    "okay",
    "go",
    "run",
    "point",
    "detecting",
    "count",
    "within",
    "region",
    "detecting",
    "maybe",
    "early",
    "okay",
    "maybe",
    "early",
    "let",
    "uh",
    "reduce",
    "20",
    "back",
    "let",
    "put",
    "let",
    "put",
    "15",
    "well",
    "yeah",
    "think",
    "better",
    "two",
    "three",
    "four",
    "five",
    "six",
    "correct",
    "seven",
    "correct",
    "uh",
    "eight",
    "correct",
    "nine",
    "10",
    "11",
    "12",
    "13",
    "14",
    "till",
    "uh",
    "15",
    "16",
    "16",
    "crosses",
    "16",
    "correct",
    "17",
    "18",
    "19",
    "1718",
    "19",
    "2021",
    "21",
    "okay",
    "getting",
    "confusing",
    "computer",
    "actually",
    "find",
    "us",
    "go",
    "put",
    "one",
    "let",
    "see",
    "magic",
    "happen",
    "go",
    "really",
    "fast",
    "detecting",
    "counts",
    "course",
    "using",
    "gpu",
    "fast",
    "62",
    "63",
    "64",
    "75",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "good",
    "um",
    "everything",
    "seems",
    "work",
    "fine",
    "next",
    "add",
    "little",
    "bit",
    "graphics",
    "looks",
    "little",
    "appealing",
    "graphics",
    "file",
    "find",
    "website",
    "uh",
    "within",
    "zip",
    "folder",
    "free",
    "download",
    "go",
    "ahead",
    "download",
    "going",
    "overlay",
    "main",
    "video",
    "going",
    "display",
    "numbers",
    "going",
    "read",
    "file",
    "going",
    "say",
    "image",
    "graphics",
    "equals",
    "read",
    "reason",
    "importing",
    "uh",
    "within",
    "loop",
    "graphics",
    "quality",
    "really",
    "bad",
    "time",
    "give",
    "bad",
    "results",
    "import",
    "every",
    "single",
    "iteration",
    "write",
    "cv2",
    "dots",
    "unchanged",
    "image",
    "unchanged",
    "im",
    "read",
    "unchanged",
    "write",
    "otherwise",
    "work",
    "properly",
    "going",
    "remove",
    "transparency",
    "need",
    "end",
    "overlay",
    "image",
    "yeah",
    "overlay",
    "well",
    "matter",
    "going",
    "write",
    "um",
    "cvzone",
    "dot",
    "overlay",
    "png",
    "image",
    "uh",
    "first",
    "one",
    "background",
    "first",
    "one",
    "background",
    "image",
    "second",
    "one",
    "image",
    "graphics",
    "overlay",
    "position",
    "position",
    "zero",
    "zero",
    "right",
    "corner",
    "put",
    "back",
    "image",
    "um",
    "main",
    "file",
    "let",
    "run",
    "see",
    "correct",
    "position",
    "overlay",
    "count",
    "go",
    "image",
    "looks",
    "good",
    "remove",
    "rectangular",
    "count",
    "instead",
    "count",
    "going",
    "simply",
    "write",
    "cv2",
    "dot",
    "put",
    "text",
    "going",
    "write",
    "image",
    "text",
    "basically",
    "string",
    "length",
    "total",
    "count",
    "next",
    "origin",
    "uh",
    "origin",
    "let",
    "check",
    "2",
    "5",
    "5",
    "cv2",
    "dots",
    "font",
    "hershey",
    "plane",
    "font",
    "scale",
    "let",
    "put",
    "five",
    "uh",
    "color",
    "let",
    "put",
    "black",
    "let",
    "put",
    "red",
    "50",
    "let",
    "let",
    "read",
    "50",
    "50",
    "thickness",
    "let",
    "put",
    "eight",
    "let",
    "run",
    "see",
    "works",
    "go",
    "see",
    "count",
    "looks",
    "really",
    "good",
    "normally",
    "wo",
    "able",
    "count",
    "fast",
    "finally",
    "robots",
    "ai",
    "helping",
    "us",
    "solve",
    "problems",
    "project",
    "car",
    "counter",
    "really",
    "really",
    "simple",
    "see",
    "fun",
    "informative",
    "see",
    "next",
    "one",
    "completed",
    "car",
    "counter",
    "project",
    "going",
    "similar",
    "project",
    "people",
    "countered",
    "difference",
    "car",
    "counter",
    "people",
    "counter",
    "multiple",
    "directions",
    "counting",
    "go",
    "video",
    "people",
    "look",
    "mp4",
    "see",
    "escalator",
    "two",
    "directions",
    "uh",
    "one",
    "going",
    "one",
    "going",
    "people",
    "going",
    "people",
    "going",
    "going",
    "count",
    "many",
    "people",
    "went",
    "many",
    "people",
    "went",
    "task",
    "project",
    "first",
    "copy",
    "best",
    "thing",
    "ever",
    "copy",
    "paste",
    "complete",
    "project",
    "allow",
    "us",
    "use",
    "previous",
    "code",
    "adjust",
    "new",
    "video",
    "new",
    "purpose",
    "write",
    "people",
    "counter",
    "project",
    "number",
    "two",
    "hit",
    "ok",
    "project",
    "number",
    "two",
    "people",
    "counter",
    "first",
    "open",
    "rename",
    "uh",
    "rename",
    "rename",
    "write",
    "people",
    "counter",
    "go",
    "right",
    "people",
    "counter",
    "sort",
    "mask",
    "graphics",
    "mask",
    "graphics",
    "going",
    "change",
    "make",
    "sure",
    "everything",
    "works",
    "fine",
    "uh",
    "first",
    "going",
    "change",
    "video",
    "write",
    "people",
    "going",
    "run",
    "see",
    "happens",
    "see",
    "still",
    "using",
    "large",
    "version",
    "go",
    "graphics",
    "car",
    "line",
    "basically",
    "counting",
    "see",
    "counting",
    "anything",
    "detecting",
    "anything",
    "remember",
    "asked",
    "detect",
    "uh",
    "cars",
    "bikes",
    "trucks",
    "um",
    "motorbikes",
    "four",
    "classes",
    "want",
    "detect",
    "detected",
    "first",
    "thing",
    "second",
    "thing",
    "mask",
    "overlaid",
    "um",
    "uh",
    "wrong",
    "place",
    "need",
    "remove",
    "also",
    "counter",
    "graphics",
    "wrong",
    "well",
    "first",
    "let",
    "bring",
    "graphics",
    "find",
    "graphics",
    "um",
    "zip",
    "file",
    "download",
    "website",
    "created",
    "earlier",
    "looks",
    "graphics",
    "simply",
    "replace",
    "graphics",
    "right",
    "away",
    "one",
    "less",
    "thing",
    "worry",
    "graphics",
    "graphics",
    "png",
    "put",
    "zero",
    "zero",
    "instead",
    "let",
    "check",
    "exact",
    "values",
    "730",
    "7",
    "30",
    "2",
    "exact",
    "position",
    "graphics",
    "shifted",
    "go",
    "graphics",
    "first",
    "thing",
    "done",
    "towards",
    "people",
    "counter",
    "project",
    "second",
    "thing",
    "open",
    "detections",
    "people",
    "car",
    "confidence",
    "confidence",
    "keep",
    "rest",
    "delete",
    "write",
    "person",
    "current",
    "class",
    "person",
    "confidence",
    "greater",
    "give",
    "us",
    "detections",
    "issue",
    "mask",
    "see",
    "mask",
    "around",
    "detecting",
    "region",
    "mask",
    "completely",
    "wrong",
    "need",
    "need",
    "go",
    "ahead",
    "create",
    "new",
    "mask",
    "let",
    "go",
    "ahead",
    "back",
    "canva",
    "see",
    "file",
    "mask",
    "earlier",
    "going",
    "create",
    "new",
    "mask",
    "video",
    "saw",
    "earlier",
    "first",
    "going",
    "fill",
    "space",
    "going",
    "start",
    "creating",
    "mask",
    "go",
    "back",
    "simply",
    "copy",
    "one",
    "rectangles",
    "easy",
    "us",
    "work",
    "rotate",
    "like",
    "maybe",
    "little",
    "bit",
    "lower",
    "go",
    "think",
    "good",
    "copy",
    "paste",
    "okay",
    "straight",
    "aligned",
    "escalator",
    "maybe",
    "around",
    "like",
    "let",
    "play",
    "video",
    "see",
    "till",
    "points",
    "get",
    "people",
    "coming",
    "go",
    "think",
    "yeah",
    "maybe",
    "little",
    "bit",
    "lower",
    "maybe",
    "little",
    "bit",
    "tilted",
    "start",
    "wrong",
    "position",
    "go",
    "yeah",
    "think",
    "fine",
    "remove",
    "correctly",
    "aligned",
    "paste",
    "oh",
    "angles",
    "different",
    "okay",
    "need",
    "rotate",
    "maybe",
    "like",
    "put",
    "go",
    "new",
    "mask",
    "push",
    "back",
    "delete",
    "video",
    "becomes",
    "white",
    "need",
    "fill",
    "gap",
    "go",
    "download",
    "mask",
    "need",
    "select",
    "page",
    "talking",
    "page",
    "number",
    "two",
    "want",
    "transparency",
    "compression",
    "downloaded",
    "drag",
    "people",
    "counter",
    "write",
    "mask",
    "reason",
    "showing",
    "different",
    "video",
    "working",
    "different",
    "project",
    "actually",
    "otherwise",
    "copy",
    "paste",
    "easy",
    "already",
    "done",
    "showing",
    "project",
    "well",
    "mask",
    "let",
    "open",
    "region",
    "well",
    "100",
    "sure",
    "um",
    "working",
    "expected",
    "go",
    "mask",
    "see",
    "detecting",
    "well",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "need",
    "fix",
    "counter",
    "many",
    "people",
    "going",
    "many",
    "people",
    "going",
    "case",
    "two",
    "lines",
    "one",
    "line",
    "two",
    "limits",
    "first",
    "let",
    "comment",
    "go",
    "count",
    "limits",
    "two",
    "limit",
    "limits",
    "limits",
    "limits",
    "total",
    "count",
    "total",
    "count",
    "need",
    "put",
    "lines",
    "lines",
    "one",
    "zero",
    "three",
    "one",
    "sixty",
    "one",
    "two",
    "nine",
    "six",
    "two",
    "nine",
    "six",
    "one",
    "six",
    "one",
    "limit",
    "noun",
    "five",
    "two",
    "seven",
    "four",
    "eight",
    "nine",
    "seven",
    "three",
    "five",
    "four",
    "night",
    "seven",
    "three",
    "five",
    "four",
    "eight",
    "nine",
    "yeah",
    "yeah",
    "good",
    "uh",
    "limits",
    "errors",
    "limits",
    "actually",
    "comment",
    "errors",
    "comment",
    "control",
    "slash",
    "comment",
    "comment",
    "well",
    "anything",
    "else",
    "okay",
    "commented",
    "know",
    "errors",
    "change",
    "line",
    "example",
    "limits",
    "write",
    "writing",
    "wrong",
    "okay",
    "write",
    "line",
    "write",
    "limits",
    "going",
    "copy",
    "manually",
    "write",
    "okay",
    "let",
    "run",
    "hopefully",
    "two",
    "lines",
    "uh",
    "one",
    "going",
    "one",
    "going",
    "go",
    "line",
    "going",
    "line",
    "going",
    "need",
    "check",
    "individually",
    "many",
    "people",
    "crossing",
    "line",
    "many",
    "people",
    "crossing",
    "line",
    "okay",
    "come",
    "limits",
    "let",
    "one",
    "instead",
    "limits",
    "write",
    "limits",
    "see",
    "lazy",
    "going",
    "copy",
    "limits",
    "going",
    "paste",
    "everywhere",
    "uh",
    "actually",
    "search",
    "replace",
    "see",
    "lazy",
    "okay",
    "total",
    "count",
    "put",
    "know",
    "okay",
    "total",
    "count",
    "dot",
    "band",
    "id",
    "blah",
    "blah",
    "put",
    "text",
    "going",
    "write",
    "music",
    "okay",
    "let",
    "run",
    "let",
    "see",
    "uh",
    "kind",
    "results",
    "get",
    "getting",
    "anything",
    "good",
    "supposed",
    "uh",
    "get",
    "red",
    "green",
    "yeah",
    "go",
    "went",
    "green",
    "one",
    "count",
    "two",
    "count",
    "three",
    "count",
    "go",
    "four",
    "count",
    "excellent",
    "working",
    "fine",
    "need",
    "take",
    "put",
    "uh",
    "correct",
    "region",
    "make",
    "green",
    "instead",
    "red",
    "let",
    "check",
    "values",
    "exact",
    "values",
    "count",
    "929",
    "three",
    "four",
    "five",
    "three",
    "four",
    "five",
    "hershey",
    "playing",
    "five",
    "seven",
    "139",
    "195",
    "giving",
    "bit",
    "green",
    "color",
    "uh",
    "green",
    "red",
    "go",
    "zero",
    "first",
    "one",
    "goes",
    "get",
    "one",
    "second",
    "one",
    "two",
    "third",
    "one",
    "three",
    "need",
    "people",
    "going",
    "okay",
    "people",
    "going",
    "simple",
    "uh",
    "yeah",
    "condition",
    "copy",
    "paste",
    "instead",
    "going",
    "write",
    "limits",
    "go",
    "write",
    "okay",
    "count",
    "become",
    "count",
    "become",
    "copy",
    "text",
    "values",
    "one",
    "one",
    "nine",
    "one",
    "three",
    "four",
    "five",
    "color",
    "50",
    "50",
    "total",
    "let",
    "run",
    "see",
    "works",
    "go",
    "red",
    "part",
    "green",
    "part",
    "going",
    "one",
    "two",
    "three",
    "detect",
    "two",
    "well",
    "one",
    "two",
    "go",
    "total",
    "number",
    "people",
    "four",
    "people",
    "going",
    "total",
    "number",
    "two",
    "people",
    "going",
    "crowded",
    "uh",
    "detect",
    "uh",
    "people",
    "well",
    "calculations",
    "see",
    "easy",
    "actually",
    "change",
    "code",
    "little",
    "bit",
    "uh",
    "cater",
    "project",
    "fun",
    "play",
    "around",
    "values",
    "something",
    "implement",
    "real",
    "time",
    "uh",
    "something",
    "implement",
    "real",
    "world",
    "application",
    "really",
    "informative",
    "fun",
    "well",
    "next",
    "part",
    "going",
    "learn",
    "create",
    "custom",
    "model",
    "create",
    "data",
    "set",
    "use",
    "data",
    "set",
    "train",
    "model",
    "using",
    "model",
    "create",
    "project",
    "going",
    "next",
    "let",
    "go",
    "ahead",
    "already",
    "studied",
    "already",
    "learned",
    "actually",
    "use",
    "model",
    "create",
    "projects",
    "going",
    "create",
    "custom",
    "trained",
    "models",
    "data",
    "set",
    "going",
    "use",
    "projects",
    "using",
    "either",
    "nvidia",
    "graphic",
    "card",
    "use",
    "running",
    "google",
    "collab",
    "online",
    "using",
    "google",
    "collab",
    "since",
    "everyone",
    "access",
    "free",
    "use",
    "graphics",
    "card",
    "installed",
    "pretty",
    "much",
    "thing",
    "offline",
    "well",
    "pretty",
    "much",
    "code",
    "run",
    "pc",
    "google",
    "collab",
    "opened",
    "called",
    "yolo",
    "version",
    "8",
    "right",
    "empty",
    "make",
    "sure",
    "runtime",
    "go",
    "change",
    "make",
    "sure",
    "runtime",
    "gpu",
    "going",
    "save",
    "uh",
    "actually",
    "go",
    "write",
    "code",
    "train",
    "custom",
    "model",
    "need",
    "know",
    "kind",
    "data",
    "set",
    "need",
    "project",
    "going",
    "today",
    "called",
    "ppe",
    "detection",
    "personal",
    "protective",
    "equipment",
    "basically",
    "hard",
    "hat",
    "construction",
    "jacket",
    "mask",
    "need",
    "find",
    "whether",
    "person",
    "wearing",
    "data",
    "set",
    "available",
    "roboflow",
    "see",
    "version",
    "yolo",
    "8",
    "well",
    "simply",
    "download",
    "click",
    "download",
    "uh",
    "zip",
    "computer",
    "press",
    "continue",
    "happen",
    "get",
    "data",
    "set",
    "well",
    "yaml",
    "file",
    "allow",
    "run",
    "yolo",
    "version",
    "data",
    "set",
    "available",
    "online",
    "wanted",
    "create",
    "data",
    "set",
    "actually",
    "need",
    "know",
    "format",
    "data",
    "set",
    "order",
    "understand",
    "going",
    "open",
    "construction",
    "data",
    "set",
    "data",
    "set",
    "download",
    "zip",
    "format",
    "extract",
    "test",
    "train",
    "valid",
    "three",
    "folders",
    "data",
    "file",
    "test",
    "file",
    "images",
    "labels",
    "train",
    "file",
    "images",
    "labels",
    "valid",
    "also",
    "images",
    "labels",
    "open",
    "test",
    "file",
    "open",
    "images",
    "see",
    "different",
    "images",
    "image",
    "corresponding",
    "text",
    "file",
    "text",
    "file",
    "see",
    "different",
    "classifications",
    "example",
    "find",
    "class",
    "number",
    "eight",
    "coordinates",
    "basically",
    "normalized",
    "values",
    "means",
    "0",
    "1",
    "values",
    "multiply",
    "actual",
    "image",
    "size",
    "get",
    "pixel",
    "values",
    "four",
    "values",
    "x1",
    "y1",
    "width",
    "height",
    "find",
    "values",
    "different",
    "classes",
    "different",
    "images",
    "go",
    "example",
    "train",
    "find",
    "images",
    "within",
    "images",
    "find",
    "labels",
    "within",
    "labels",
    "find",
    "corresponding",
    "coordinates",
    "file",
    "format",
    "important",
    "thing",
    "data",
    "data",
    "yaml",
    "file",
    "basically",
    "gathers",
    "information",
    "uh",
    "one",
    "place",
    "open",
    "see",
    "train",
    "validation",
    "test",
    "folders",
    "mention",
    "folders",
    "number",
    "classes",
    "equal",
    "10",
    "case",
    "names",
    "classes",
    "hard",
    "hat",
    "mask",
    "hard",
    "hat",
    "mask",
    "safety",
    "vest",
    "person",
    "safety",
    "cone",
    "safety",
    "west",
    "machinery",
    "rest",
    "uh",
    "important",
    "uh",
    "copyright",
    "uh",
    "one",
    "thing",
    "need",
    "add",
    "bring",
    "google",
    "collab",
    "copy",
    "data",
    "google",
    "drive",
    "go",
    "drive",
    "right",
    "data",
    "sets",
    "folder",
    "within",
    "data",
    "set",
    "construction",
    "safety",
    "exact",
    "folder",
    "see",
    "see",
    "construction",
    "safety",
    "read",
    "read",
    "data",
    "dot",
    "yaml",
    "test",
    "train",
    "valid",
    "three",
    "folders",
    "open",
    "folder",
    "labels",
    "images",
    "inside",
    "go",
    "basic",
    "idea",
    "go",
    "back",
    "data",
    "sets",
    "construction",
    "safety",
    "main",
    "thing",
    "make",
    "changes",
    "file",
    "go",
    "text",
    "editor",
    "remember",
    "file",
    "contains",
    "strain",
    "validate",
    "test",
    "folders",
    "need",
    "define",
    "path",
    "present",
    "write",
    "paths",
    "define",
    "path",
    "drive",
    "google",
    "drive",
    "done",
    "open",
    "write",
    "paths",
    "inside",
    "write",
    "drive",
    "drive",
    "whatever",
    "folder",
    "inside",
    "drive",
    "folder",
    "data",
    "sets",
    "inside",
    "construction",
    "safety",
    "inside",
    "train",
    "valid",
    "test",
    "write",
    "path",
    "rest",
    "remains",
    "basic",
    "idea",
    "upload",
    "files",
    "google",
    "drive",
    "edit",
    "run",
    "using",
    "google",
    "collab",
    "thing",
    "write",
    "uh",
    "path",
    "give",
    "path",
    "file",
    "show",
    "show",
    "go",
    "google",
    "drive",
    "okay",
    "done",
    "images",
    "want",
    "create",
    "uh",
    "want",
    "label",
    "famous",
    "label",
    "img",
    "project",
    "available",
    "github",
    "see",
    "heart",
    "ex",
    "labs",
    "thanks",
    "contributors",
    "creators",
    "go",
    "releases",
    "click",
    "binary",
    "download",
    "zip",
    "file",
    "download",
    "zip",
    "file",
    "extract",
    "extract",
    "get",
    "something",
    "like",
    "label",
    "example",
    "find",
    "poker",
    "chips",
    "detecting",
    "poker",
    "chips",
    "data",
    "go",
    "predefined",
    "classes",
    "given",
    "5",
    "10",
    "20",
    "50",
    "five",
    "classes",
    "case",
    "construction",
    "safety",
    "hard",
    "hat",
    "hard",
    "hat",
    "jacket",
    "jacket",
    "stuff",
    "like",
    "go",
    "back",
    "click",
    "open",
    "open",
    "directory",
    "select",
    "example",
    "images",
    "want",
    "label",
    "whatever",
    "example",
    "images",
    "press",
    "r",
    "sorry",
    "press",
    "w",
    "actually",
    "select",
    "define",
    "example",
    "class",
    "number",
    "five",
    "hit",
    "ok",
    "create",
    "label",
    "press",
    "w",
    "example",
    "100",
    "click",
    "100",
    "press",
    "ok",
    "easy",
    "way",
    "fives",
    "first",
    "tens",
    "hundreds",
    "20s",
    "things",
    "like",
    "want",
    "export",
    "make",
    "sure",
    "yolo",
    "format",
    "click",
    "save",
    "save",
    "file",
    "hit",
    "save",
    "save",
    "file",
    "uh",
    "location",
    "open",
    "directory",
    "directory",
    "let",
    "say",
    "save",
    "one",
    "open",
    "see",
    "format",
    "zero",
    "think",
    "five",
    "five",
    "location",
    "point",
    "coordinates",
    "class",
    "number",
    "one",
    "present",
    "class",
    "number",
    "two",
    "label",
    "images",
    "file",
    "create",
    "mentioned",
    "easy",
    "write",
    "paths",
    "train",
    "validation",
    "test",
    "folders",
    "write",
    "number",
    "classes",
    "names",
    "classes",
    "save",
    "file",
    "simple",
    "text",
    "file",
    "basically",
    "format",
    "dot",
    "yaml",
    "done",
    "simply",
    "go",
    "ahead",
    "upload",
    "everything",
    "uh",
    "example",
    "case",
    "uh",
    "download",
    "construction",
    "safety",
    "image",
    "data",
    "set",
    "upload",
    "google",
    "drive",
    "google",
    "drive",
    "basically",
    "files",
    "select",
    "drag",
    "take",
    "time",
    "yolo",
    "version",
    "google",
    "collab",
    "file",
    "uh",
    "first",
    "go",
    "folder",
    "folder",
    "see",
    "option",
    "connect",
    "drive",
    "mount",
    "drive",
    "make",
    "sure",
    "click",
    "mount",
    "drive",
    "ask",
    "give",
    "access",
    "give",
    "access",
    "cross",
    "means",
    "mounted",
    "go",
    "back",
    "click",
    "content",
    "bin",
    "content",
    "think",
    "still",
    "loading",
    "let",
    "wait",
    "content",
    "go",
    "drive",
    "click",
    "drive",
    "drive",
    "go",
    "data",
    "sets",
    "inside",
    "data",
    "sets",
    "construction",
    "safety",
    "inside",
    "construction",
    "safety",
    "test",
    "strain",
    "valid",
    "double",
    "click",
    "make",
    "sure",
    "path",
    "correct",
    "right",
    "click",
    "let",
    "say",
    "construction",
    "safety",
    "right",
    "click",
    "say",
    "copy",
    "path",
    "paste",
    "path",
    "need",
    "content",
    "drive",
    "content",
    "uh",
    "need",
    "drive",
    "drive",
    "going",
    "write",
    "drive",
    "data",
    "sets",
    "construction",
    "safety",
    "need",
    "need",
    "make",
    "sure",
    "path",
    "done",
    "close",
    "close",
    "start",
    "writing",
    "code",
    "make",
    "sure",
    "runtime",
    "gpu",
    "save",
    "going",
    "first",
    "write",
    "lines",
    "code",
    "need",
    "five",
    "lines",
    "code",
    "yolo",
    "running",
    "yolo",
    "training",
    "first",
    "need",
    "check",
    "whether",
    "using",
    "graphics",
    "card",
    "write",
    "video",
    "smi",
    "smi",
    "simply",
    "going",
    "run",
    "run",
    "information",
    "see",
    "tesla",
    "t4",
    "actually",
    "using",
    "153",
    "60",
    "mbs",
    "good",
    "actually",
    "using",
    "graphics",
    "card",
    "done",
    "like",
    "like",
    "uh",
    "clear",
    "outputs",
    "whenever",
    "write",
    "another",
    "line",
    "code",
    "going",
    "install",
    "ultranetics",
    "write",
    "pip",
    "install",
    "ultra",
    "lit",
    "l",
    "c",
    "ultralytics",
    "hit",
    "enter",
    "sorry",
    "hit",
    "play",
    "done",
    "installing",
    "done",
    "go",
    "back",
    "edit",
    "clear",
    "outputs",
    "like",
    "going",
    "go",
    "going",
    "import",
    "yolo",
    "like",
    "earlier",
    "ultralytics",
    "import",
    "yolo",
    "yolo",
    "capital",
    "going",
    "press",
    "enter",
    "go",
    "executed",
    "going",
    "write",
    "actual",
    "command",
    "run",
    "yolo",
    "detect",
    "image",
    "first",
    "going",
    "write",
    "yolo",
    "define",
    "task",
    "detect",
    "image",
    "need",
    "detect",
    "objects",
    "also",
    "option",
    "classification",
    "also",
    "option",
    "segmentation",
    "detection",
    "write",
    "segmentation",
    "well",
    "wanted",
    "segment",
    "mode",
    "predict",
    "training",
    "well",
    "validation",
    "well",
    "right",
    "using",
    "mode",
    "predict",
    "model",
    "model",
    "using",
    "using",
    "yolo8",
    "version",
    "uh",
    "yolo",
    "version",
    "8",
    "large",
    "using",
    "large",
    "model",
    "confidence",
    "level",
    "minimum",
    "source",
    "source",
    "basically",
    "image",
    "drive",
    "give",
    "online",
    "source",
    "giving",
    "online",
    "source",
    "basically",
    "images",
    "slash",
    "bus",
    "dot",
    "jpg",
    "image",
    "import",
    "test",
    "image",
    "online",
    "test",
    "well",
    "done",
    "moment",
    "truth",
    "press",
    "enter",
    "control",
    "enter",
    "execute",
    "command",
    "first",
    "always",
    "going",
    "download",
    "weights",
    "already",
    "done",
    "running",
    "using",
    "tesla",
    "t4",
    "gpu",
    "using",
    "good",
    "know",
    "working",
    "downloading",
    "image",
    "image",
    "downloaded",
    "executed",
    "everything",
    "see",
    "done",
    "see",
    "downloaded",
    "file",
    "gave",
    "us",
    "result",
    "five",
    "people",
    "detected",
    "one",
    "bicycle",
    "one",
    "bus",
    "open",
    "uh",
    "actually",
    "show",
    "bounding",
    "boxes",
    "need",
    "write",
    "code",
    "see",
    "one",
    "person",
    "second",
    "third",
    "fourth",
    "hair",
    "maybe",
    "fifth",
    "inside",
    "well",
    "five",
    "people",
    "uh",
    "one",
    "bicycle",
    "one",
    "bus",
    "bus",
    "sure",
    "bicycle",
    "though",
    "um",
    "yeah",
    "idea",
    "means",
    "working",
    "need",
    "need",
    "test",
    "images",
    "run",
    "actual",
    "offline",
    "code",
    "write",
    "code",
    "work",
    "fine",
    "well",
    "wanted",
    "check",
    "whether",
    "working",
    "whether",
    "installations",
    "working",
    "confirmed",
    "installations",
    "done",
    "need",
    "simple",
    "code",
    "actually",
    "uh",
    "custom",
    "custom",
    "training",
    "oh",
    "custom",
    "data",
    "training",
    "add",
    "code",
    "going",
    "paste",
    "similar",
    "command",
    "like",
    "yolo",
    "task",
    "detection",
    "time",
    "around",
    "mode",
    "training",
    "prediction",
    "training",
    "training",
    "based",
    "large",
    "um",
    "call",
    "model",
    "use",
    "nano",
    "small",
    "medium",
    "well",
    "exactly",
    "data",
    "uh",
    "define",
    "change",
    "data",
    "basically",
    "equals",
    "uh",
    "double",
    "dot",
    "slash",
    "content",
    "drive",
    "exact",
    "path",
    "copy",
    "paste",
    "double",
    "dash",
    "back",
    "uh",
    "double",
    "dot",
    "back",
    "content",
    "drive",
    "drive",
    "data",
    "sets",
    "construction",
    "safety",
    "slash",
    "data",
    "dot",
    "yaml",
    "give",
    "file",
    "file",
    "linking",
    "file",
    "data",
    "set",
    "need",
    "give",
    "location",
    "file",
    "define",
    "number",
    "epochs",
    "image",
    "size",
    "pretty",
    "much",
    "press",
    "run",
    "see",
    "magic",
    "happen",
    "take",
    "actually",
    "train",
    "let",
    "train",
    "come",
    "back",
    "first",
    "setting",
    "weights",
    "see",
    "589",
    "595",
    "items",
    "weights",
    "using",
    "weights",
    "actually",
    "train",
    "model",
    "say",
    "transfer",
    "learning",
    "well",
    "optimizer",
    "learning",
    "rate",
    "let",
    "see",
    "start",
    "go",
    "right",
    "started",
    "epoch",
    "number",
    "one",
    "uh",
    "start",
    "yet",
    "let",
    "wait",
    "start",
    "see",
    "epoch",
    "started",
    "counter",
    "started",
    "see",
    "time",
    "taken",
    "already",
    "estimated",
    "time",
    "left",
    "basically",
    "idea",
    "one",
    "take",
    "example",
    "uh",
    "two",
    "minutes",
    "three",
    "minutes",
    "calculate",
    "take",
    "example",
    "150",
    "minutes",
    "anyways",
    "let",
    "wait",
    "finish",
    "see",
    "done",
    "see",
    "process",
    "completed",
    "training",
    "completed",
    "go",
    "runs",
    "basically",
    "content",
    "go",
    "runs",
    "detect",
    "go",
    "train",
    "see",
    "files",
    "generated",
    "main",
    "thing",
    "need",
    "look",
    "weights",
    "last",
    "weight",
    "dot",
    "pd",
    "rest",
    "basically",
    "uh",
    "parameters",
    "response",
    "model",
    "example",
    "see",
    "results",
    "dot",
    "png",
    "also",
    "see",
    "mean",
    "average",
    "position",
    "values",
    "also",
    "recall",
    "precision",
    "values",
    "training",
    "loss",
    "class",
    "also",
    "box",
    "also",
    "confusion",
    "matrix",
    "things",
    "download",
    "click",
    "download",
    "easier",
    "see",
    "otherwise",
    "open",
    "google",
    "collab",
    "well",
    "see",
    "confusion",
    "matrix",
    "well",
    "responded",
    "uh",
    "training",
    "download",
    "best",
    "file",
    "downloaded",
    "going",
    "bring",
    "project",
    "going",
    "name",
    "projects",
    "copy",
    "yolo",
    "webcam",
    "pretty",
    "much",
    "running",
    "webcam",
    "remove",
    "write",
    "project",
    "three",
    "write",
    "ppe",
    "detection",
    "project",
    "three",
    "says",
    "yolo",
    "webcam",
    "double",
    "click",
    "right",
    "click",
    "rename",
    "write",
    "ppe",
    "detection",
    "go",
    "use",
    "ppe",
    "videos",
    "go",
    "open",
    "explorer",
    "see",
    "three",
    "videos",
    "first",
    "one",
    "second",
    "one",
    "third",
    "one",
    "going",
    "test",
    "three",
    "also",
    "test",
    "webcam",
    "hard",
    "hat",
    "uh",
    "pretty",
    "sure",
    "find",
    "mask",
    "also",
    "construction",
    "jacket",
    "maybe",
    "try",
    "well",
    "uh",
    "let",
    "write",
    "ppe",
    "dash",
    "one",
    "believe",
    "name",
    "uh",
    "yeah",
    "good",
    "change",
    "model",
    "simply",
    "going",
    "drag",
    "drop",
    "model",
    "going",
    "drop",
    "going",
    "call",
    "ppe",
    "change",
    "ppe",
    "remove",
    "let",
    "go",
    "ahead",
    "run",
    "let",
    "uh",
    "actually",
    "one",
    "thing",
    "forgot",
    "change",
    "class",
    "names",
    "open",
    "files",
    "uh",
    "got",
    "data",
    "dot",
    "yml",
    "file",
    "names",
    "classes",
    "simply",
    "copy",
    "file",
    "replace",
    "class",
    "names",
    "go",
    "class",
    "names",
    "run",
    "work",
    "fine",
    "go",
    "detecting",
    "person",
    "detecting",
    "hard",
    "hat",
    "mask",
    "see",
    "also",
    "detects",
    "safety",
    "safety",
    "vest",
    "accurate",
    "giving",
    "us",
    "uh",
    "good",
    "readings",
    "train",
    "data",
    "set",
    "longer",
    "ebooks",
    "epochs",
    "get",
    "better",
    "results",
    "see",
    "safety",
    "vest",
    "mask",
    "hard",
    "hat",
    "person",
    "person",
    "hard",
    "hat",
    "mask",
    "go",
    "let",
    "try",
    "number",
    "three",
    "go",
    "safety",
    "vests",
    "hard",
    "hat",
    "person",
    "safety",
    "vest",
    "mask",
    "safety",
    "west",
    "started",
    "okay",
    "uh",
    "little",
    "bit",
    "difficult",
    "see",
    "exactly",
    "detected",
    "detected",
    "check",
    "classes",
    "detecting",
    "based",
    "assign",
    "color",
    "put",
    "normal",
    "rectangle",
    "need",
    "put",
    "yeah",
    "let",
    "put",
    "normal",
    "rectangle",
    "instead",
    "corner",
    "rect",
    "write",
    "cb2",
    "dot",
    "uh",
    "rectangle",
    "image",
    "give",
    "x1",
    "y1",
    "x2",
    "y2",
    "going",
    "give",
    "color",
    "uh",
    "color",
    "let",
    "say",
    "color",
    "default",
    "color",
    "color",
    "equals",
    "red",
    "0",
    "0",
    "2",
    "5",
    "going",
    "write",
    "thickness",
    "thickness",
    "let",
    "say",
    "three",
    "pretty",
    "much",
    "part",
    "put",
    "extract",
    "also",
    "going",
    "assign",
    "color",
    "color",
    "rectangle",
    "color",
    "background",
    "color",
    "text",
    "color",
    "background",
    "let",
    "make",
    "color",
    "text",
    "make",
    "white",
    "color",
    "text",
    "going",
    "make",
    "white",
    "2",
    "5",
    "5",
    "2",
    "2",
    "5",
    "5",
    "let",
    "run",
    "see",
    "happens",
    "oh",
    "need",
    "remove",
    "corner",
    "rectangle",
    "trying",
    "detect",
    "uh",
    "show",
    "us",
    "red",
    "color",
    "case",
    "mask",
    "hard",
    "hat",
    "case",
    "present",
    "give",
    "us",
    "green",
    "okay",
    "yeah",
    "color",
    "showing",
    "show",
    "put",
    "text",
    "rect",
    "let",
    "put",
    "color",
    "wrecked",
    "color",
    "well",
    "yeah",
    "good",
    "showing",
    "red",
    "need",
    "make",
    "sure",
    "uh",
    "default",
    "red",
    "detecting",
    "one",
    "classes",
    "green",
    "detect",
    "green",
    "example",
    "hard",
    "hat",
    "mask",
    "uh",
    "safety",
    "vest",
    "three",
    "classes",
    "going",
    "check",
    "first",
    "write",
    "current",
    "class",
    "equals",
    "uh",
    "class",
    "names",
    "cls",
    "current",
    "class",
    "equals",
    "hard",
    "hat",
    "capital",
    "yes",
    "hard",
    "hat",
    "color",
    "equals",
    "zero",
    "two",
    "five",
    "five",
    "zero",
    "let",
    "try",
    "green",
    "issue",
    "current",
    "class",
    "equals",
    "hard",
    "hat",
    "color",
    "zero",
    "two",
    "five",
    "five",
    "um",
    "current",
    "class",
    "coming",
    "put",
    "text",
    "um",
    "need",
    "give",
    "rectangle",
    "color",
    "needs",
    "put",
    "current",
    "class",
    "equals",
    "hard",
    "hats",
    "hard",
    "hats",
    "show",
    "green",
    "weird",
    "let",
    "print",
    "current",
    "class",
    "printing",
    "current",
    "class",
    "shows",
    "person",
    "safety",
    "west",
    "safety",
    "best",
    "safety",
    "vest",
    "oh",
    "need",
    "write",
    "else",
    "uh",
    "else",
    "changing",
    "color",
    "equals",
    "color",
    "equals",
    "uh",
    "zero",
    "uh",
    "two",
    "uh",
    "zero",
    "zero",
    "two",
    "five",
    "five",
    "hopefully",
    "better",
    "yeah",
    "go",
    "green",
    "hard",
    "hat",
    "rest",
    "red",
    "okay",
    "color",
    "class",
    "hard",
    "hats",
    "current",
    "class",
    "save",
    "vest",
    "uh",
    "safety",
    "vest",
    "mask",
    "current",
    "class",
    "equals",
    "mask",
    "otherwise",
    "rest",
    "red",
    "um",
    "else",
    "make",
    "smaller",
    "scale",
    "good",
    "um",
    "using",
    "put",
    "text",
    "rect",
    "make",
    "scale",
    "let",
    "say",
    "thickness",
    "one",
    "fine",
    "um",
    "offset",
    "offset",
    "let",
    "make",
    "five",
    "instead",
    "little",
    "bit",
    "smaller",
    "easier",
    "know",
    "going",
    "go",
    "lot",
    "overlap",
    "little",
    "bit",
    "confusing",
    "see",
    "hard",
    "hat",
    "detecting",
    "showing",
    "screen",
    "showing",
    "us",
    "red",
    "uh",
    "let",
    "try",
    "actually",
    "scale",
    "small",
    "let",
    "try",
    "one",
    "let",
    "try",
    "another",
    "video",
    "first",
    "one",
    "clear",
    "let",
    "try",
    "one",
    "go",
    "hard",
    "hat",
    "person",
    "mask",
    "safety",
    "vest",
    "uh",
    "assign",
    "third",
    "color",
    "well",
    "person",
    "need",
    "worry",
    "red",
    "colors",
    "green",
    "colors",
    "given",
    "else",
    "current",
    "mask",
    "write",
    "else",
    "else",
    "write",
    "else",
    "else",
    "color",
    "purple",
    "let",
    "say",
    "blue",
    "two",
    "five",
    "five",
    "zero",
    "zero",
    "okay",
    "uh",
    "hard",
    "hat",
    "hard",
    "hat",
    "safety",
    "vests",
    "mask",
    "yep",
    "ones",
    "red",
    "uh",
    "safety",
    "cone",
    "safety",
    "vests",
    "really",
    "care",
    "rest",
    "blue",
    "let",
    "run",
    "person",
    "blue",
    "green",
    "okay",
    "opposite",
    "hard",
    "hat",
    "safety",
    "vests",
    "also",
    "need",
    "give",
    "maybe",
    "threshold",
    "get",
    "lot",
    "wrong",
    "detections",
    "confidence",
    "level",
    "greater",
    "let",
    "say",
    "yeah",
    "talking",
    "color",
    "hard",
    "hat",
    "uh",
    "supposed",
    "red",
    "supposed",
    "green",
    "rest",
    "blue",
    "let",
    "run",
    "go",
    "safety",
    "vest",
    "safety",
    "hard",
    "hat",
    "person",
    "mask",
    "clear",
    "giving",
    "good",
    "results",
    "overall",
    "seems",
    "work",
    "fine",
    "also",
    "try",
    "webcam",
    "put",
    "okay",
    "let",
    "keep",
    "video",
    "webcam",
    "open",
    "let",
    "try",
    "see",
    "wearing",
    "hard",
    "hat",
    "mask",
    "safety",
    "vest",
    "detecting",
    "person",
    "wear",
    "mask",
    "see",
    "detecting",
    "mask",
    "wear",
    "hard",
    "hat",
    "see",
    "detects",
    "hard",
    "hat",
    "go",
    "remove",
    "mask",
    "says",
    "mask",
    "go",
    "hard",
    "hat",
    "safety",
    "west",
    "headed",
    "project",
    "number",
    "four",
    "project",
    "going",
    "create",
    "poker",
    "hand",
    "detector",
    "first",
    "detect",
    "different",
    "cards",
    "cards",
    "going",
    "determine",
    "poker",
    "hand",
    "interesting",
    "project",
    "multiple",
    "layers",
    "first",
    "one",
    "actually",
    "detect",
    "cards",
    "yolo",
    "second",
    "one",
    "actually",
    "classifying",
    "uh",
    "hand",
    "little",
    "bit",
    "code",
    "involved",
    "getting",
    "data",
    "data",
    "available",
    "roboflow",
    "universe",
    "downloading",
    "playing",
    "cards",
    "image",
    "data",
    "set",
    "download",
    "yolo",
    "version",
    "8",
    "simply",
    "click",
    "download",
    "zip",
    "computer",
    "press",
    "continue",
    "downloaded",
    "upload",
    "google",
    "drive",
    "let",
    "show",
    "uh",
    "playing",
    "card",
    "data",
    "set",
    "validation",
    "training",
    "test",
    "data",
    "sets",
    "labels",
    "images",
    "labels",
    "like",
    "seen",
    "bbe",
    "project",
    "format",
    "thing",
    "different",
    "file",
    "let",
    "open",
    "text",
    "editor",
    "let",
    "see",
    "changes",
    "made",
    "data",
    "dot",
    "yml",
    "file",
    "see",
    "number",
    "classes",
    "52",
    "classes",
    "based",
    "rank",
    "suit",
    "10",
    "clubs",
    "10",
    "diamond",
    "example",
    "see",
    "uh",
    "training",
    "validation",
    "test",
    "folders",
    "also",
    "defined",
    "path",
    "path",
    "drive",
    "drive",
    "data",
    "sets",
    "playing",
    "cards",
    "fixed",
    "issue",
    "earlier",
    "duplicate",
    "uh",
    "believe",
    "fixed",
    "earlier",
    "53",
    "classes",
    "duplicate",
    "fixed",
    "upload",
    "use",
    "playing",
    "cards",
    "fixed",
    "next",
    "next",
    "actually",
    "save",
    "time",
    "ran",
    "exact",
    "google",
    "collab",
    "check",
    "nvidia",
    "driver",
    "nvidia",
    "graphics",
    "card",
    "similar",
    "one",
    "earlier",
    "tesla",
    "t4",
    "16",
    "gb",
    "memory",
    "install",
    "ultralytics",
    "import",
    "yolo",
    "ultralytics",
    "perform",
    "make",
    "sure",
    "running",
    "start",
    "training",
    "process",
    "training",
    "process",
    "change",
    "data",
    "path",
    "content",
    "drive",
    "drive",
    "data",
    "sets",
    "playing",
    "cards",
    "fixed",
    "slash",
    "data",
    "dot",
    "yaml",
    "uh",
    "50",
    "epochs",
    "right",
    "taking",
    "long",
    "time",
    "meanwhile",
    "training",
    "going",
    "go",
    "ahead",
    "understand",
    "basic",
    "concepts",
    "poker",
    "create",
    "classifier",
    "poker",
    "part",
    "involve",
    "object",
    "detection",
    "quite",
    "crucial",
    "project",
    "first",
    "go",
    "meanwhile",
    "finish",
    "call",
    "training",
    "take",
    "data",
    "start",
    "uh",
    "detection",
    "well",
    "running",
    "way",
    "file",
    "see",
    "well",
    "good",
    "let",
    "go",
    "back",
    "try",
    "understand",
    "exactly",
    "uh",
    "poker",
    "game",
    "create",
    "classifier",
    "created",
    "simple",
    "uh",
    "poker",
    "hands",
    "uh",
    "call",
    "classifier",
    "see",
    "data",
    "sheet",
    "cheat",
    "sheet",
    "total",
    "10",
    "different",
    "classes",
    "high",
    "card",
    "pair",
    "two",
    "pair",
    "three",
    "kind",
    "start",
    "understanding",
    "first",
    "compare",
    "five",
    "cards",
    "everyone",
    "two",
    "cards",
    "rest",
    "laid",
    "uh",
    "public",
    "domain",
    "everyone",
    "access",
    "cards",
    "public",
    "domain",
    "two",
    "cards",
    "view",
    "check",
    "two",
    "cards",
    "check",
    "rest",
    "cards",
    "public",
    "domain",
    "find",
    "best",
    "possible",
    "scenario",
    "biggest",
    "hand",
    "whenever",
    "five",
    "cards",
    "call",
    "hand",
    "total",
    "10",
    "types",
    "hands",
    "understand",
    "need",
    "understand",
    "rank",
    "suit",
    "poker",
    "uh",
    "playing",
    "cards",
    "actually",
    "example",
    "hearts",
    "queen",
    "clubs",
    "basically",
    "rank",
    "hearts",
    "basically",
    "suit",
    "five",
    "rank",
    "clubs",
    "suit",
    "similarly",
    "seven",
    "rank",
    "diamond",
    "suit",
    "need",
    "need",
    "understand",
    "first",
    "differentiate",
    "two",
    "hands",
    "based",
    "ranks",
    "hands",
    "based",
    "suits",
    "combination",
    "let",
    "start",
    "easiest",
    "one",
    "appear",
    "get",
    "high",
    "card",
    "later",
    "let",
    "start",
    "pair",
    "pair",
    "rank",
    "two",
    "cards",
    "rest",
    "match",
    "two",
    "match",
    "five",
    "five",
    "seven",
    "seven",
    "whatever",
    "card",
    "pair",
    "rack",
    "suit",
    "rack",
    "example",
    "see",
    "pair",
    "suit",
    "count",
    "pair",
    "suit",
    "pair",
    "rank",
    "okay",
    "two",
    "pair",
    "two",
    "pair",
    "similar",
    "one",
    "pair",
    "instead",
    "two",
    "instead",
    "one",
    "king",
    "king",
    "five",
    "five",
    "two",
    "pair",
    "three",
    "kind",
    "three",
    "kind",
    "three",
    "ranks",
    "king",
    "king",
    "king",
    "queen",
    "queen",
    "queen",
    "ten",
    "ten",
    "ten",
    "case",
    "two",
    "matter",
    "straight",
    "straight",
    "consecutive",
    "numbers",
    "example",
    "seven",
    "eight",
    "nine",
    "ten",
    "jack",
    "rank",
    "matters",
    "suit",
    "looking",
    "suits",
    "uh",
    "till",
    "point",
    "example",
    "two",
    "three",
    "four",
    "five",
    "six",
    "also",
    "straight",
    "uh",
    "seven",
    "eight",
    "nine",
    "ten",
    "jack",
    "also",
    "910",
    "jack",
    "queen",
    "king",
    "also",
    "straight",
    "consecutive",
    "ranks",
    "uh",
    "seven",
    "plus",
    "one",
    "next",
    "one",
    "eight",
    "plus",
    "one",
    "nine",
    "idea",
    "way",
    "rank",
    "jack",
    "11",
    "10",
    "uh",
    "jack",
    "queen",
    "king",
    "ace",
    "jack",
    "11",
    "ranked",
    "number",
    "queen",
    "12",
    "king",
    "13",
    "biggest",
    "rank",
    "okay",
    "uh",
    "straight",
    "comes",
    "suits",
    "suits",
    "flush",
    "diamonds",
    "hearts",
    "uh",
    "clubs",
    "spades",
    "whatever",
    "um",
    "five",
    "uh",
    "suit",
    "flush",
    "full",
    "house",
    "full",
    "house",
    "three",
    "kind",
    "three",
    "cards",
    "rank",
    "pair",
    "two",
    "two",
    "two",
    "ten",
    "ten",
    "five",
    "five",
    "five",
    "seven",
    "seven",
    "three",
    "kind",
    "plus",
    "single",
    "pair",
    "full",
    "house",
    "four",
    "kind",
    "simple",
    "four",
    "ranks",
    "five",
    "five",
    "five",
    "five",
    "seven",
    "seven",
    "seven",
    "seven",
    "nine",
    "nine",
    "nine",
    "nine",
    "king",
    "king",
    "king",
    "ranks",
    "pretty",
    "much",
    "care",
    "suits",
    "actually",
    "suits",
    "suits",
    "uh",
    "obvious",
    "last",
    "card",
    "care",
    "last",
    "card",
    "okay",
    "straight",
    "flash",
    "straight",
    "flush",
    "straight",
    "flush",
    "ranks",
    "suits",
    "well",
    "suits",
    "see",
    "clubs",
    "uh",
    "straight",
    "eight",
    "nine",
    "ten",
    "jack",
    "queen",
    "two",
    "three",
    "four",
    "five",
    "six",
    "uh",
    "formation",
    "also",
    "suits",
    "last",
    "one",
    "highest",
    "one",
    "straight",
    "starting",
    "ace",
    "ace",
    "king",
    "queen",
    "jack",
    "highest",
    "straight",
    "plus",
    "flush",
    "royal",
    "flush",
    "uh",
    "example",
    "hearts",
    "hearts",
    "hearts",
    "hearts",
    "king",
    "queen",
    "jack",
    "starts",
    "queen",
    "starts",
    "king",
    "king",
    "queen",
    "jack",
    "10",
    "9",
    "royal",
    "flush",
    "case",
    "simply",
    "straight",
    "flush",
    "uh",
    "sorry",
    "straight",
    "flush",
    "case",
    "straight",
    "flash",
    "basic",
    "idea",
    "last",
    "one",
    "combination",
    "highest",
    "card",
    "biggest",
    "card",
    "example",
    "somebody",
    "uh",
    "pair",
    "highest",
    "card",
    "pair",
    "win",
    "high",
    "card",
    "anything",
    "like",
    "two",
    "players",
    "playing",
    "five",
    "cards",
    "versus",
    "five",
    "cards",
    "classes",
    "none",
    "check",
    "one",
    "highest",
    "card",
    "king",
    "one",
    "queen",
    "win",
    "idea",
    "classify",
    "one",
    "hand",
    "two",
    "hands",
    "one",
    "hand",
    "uh",
    "uh",
    "hat",
    "uh",
    "send",
    "pi",
    "values",
    "uh",
    "strings",
    "output",
    "us",
    "name",
    "hand",
    "interesting",
    "uh",
    "accomplish",
    "keep",
    "image",
    "open",
    "put",
    "side",
    "come",
    "back",
    "every",
    "let",
    "start",
    "creating",
    "folder",
    "going",
    "call",
    "projects",
    "poker",
    "hand",
    "detector",
    "poker",
    "hand",
    "detector",
    "going",
    "start",
    "okay",
    "create",
    "function",
    "function",
    "input",
    "five",
    "strings",
    "say",
    "list",
    "five",
    "strings",
    "output",
    "us",
    "result",
    "create",
    "module",
    "separate",
    "code",
    "separate",
    "file",
    "simply",
    "link",
    "project",
    "create",
    "new",
    "python",
    "file",
    "call",
    "poker",
    "hand",
    "tector",
    "uh",
    "function",
    "let",
    "call",
    "going",
    "write",
    "uh",
    "def",
    "find",
    "poker",
    "hand",
    "write",
    "call",
    "function",
    "return",
    "something",
    "right",
    "return",
    "zero",
    "okay",
    "good",
    "uh",
    "testing",
    "well",
    "need",
    "make",
    "sure",
    "run",
    "individually",
    "integrate",
    "project",
    "write",
    "underscore",
    "underscore",
    "name",
    "equals",
    "underscore",
    "underscore",
    "main",
    "means",
    "checking",
    "main",
    "file",
    "running",
    "run",
    "code",
    "file",
    "calling",
    "function",
    "run",
    "code",
    "yeah",
    "put",
    "double",
    "equal",
    "go",
    "uh",
    "send",
    "uh",
    "call",
    "hands",
    "let",
    "start",
    "image",
    "let",
    "start",
    "creating",
    "hands",
    "one",
    "one",
    "going",
    "send",
    "see",
    "gives",
    "first",
    "uh",
    "let",
    "start",
    "going",
    "start",
    "top",
    "start",
    "royal",
    "flush",
    "hearts",
    "k",
    "hearts",
    "queen",
    "write",
    "uh",
    "find",
    "poker",
    "hand",
    "send",
    "list",
    "inside",
    "list",
    "give",
    "hearts",
    "k",
    "hearts",
    "give",
    "queen",
    "hearts",
    "give",
    "chuck",
    "hearts",
    "jack",
    "hearts",
    "going",
    "give",
    "10",
    "hearts",
    "royal",
    "flush",
    "front",
    "going",
    "write",
    "royal",
    "flush",
    "copy",
    "going",
    "paste",
    "second",
    "one",
    "straight",
    "flush",
    "queen",
    "jack",
    "10",
    "9",
    "8",
    "clubs",
    "queen",
    "queen",
    "club",
    "jack",
    "club",
    "10",
    "club",
    "nine",
    "club",
    "eight",
    "club",
    "royal",
    "flush",
    "straight",
    "str",
    "ight",
    "straight",
    "flash",
    "two",
    "starting",
    "let",
    "run",
    "see",
    "get",
    "actually",
    "get",
    "nothing",
    "return",
    "uh",
    "let",
    "return",
    "put",
    "hand",
    "return",
    "hand",
    "okay",
    "return",
    "hand",
    "want",
    "print",
    "print",
    "hand",
    "okay",
    "let",
    "run",
    "see",
    "get",
    "uh",
    "running",
    "previous",
    "one",
    "right",
    "click",
    "run",
    "go",
    "getting",
    "uh",
    "two",
    "output",
    "good",
    "started",
    "first",
    "thing",
    "find",
    "ranks",
    "find",
    "suits",
    "individually",
    "put",
    "list",
    "trying",
    "trying",
    "understand",
    "classify",
    "based",
    "ranks",
    "classifying",
    "based",
    "suits",
    "list",
    "play",
    "around",
    "easily",
    "first",
    "step",
    "need",
    "make",
    "sure",
    "ranks",
    "suits",
    "uh",
    "two",
    "different",
    "lists",
    "write",
    "ranks",
    "equals",
    "list",
    "suits",
    "equals",
    "list",
    "two",
    "lists",
    "going",
    "loop",
    "hands",
    "uh",
    "card",
    "hand",
    "going",
    "loop",
    "card",
    "first",
    "uh",
    "wanted",
    "rank",
    "example",
    "want",
    "rank",
    "first",
    "element",
    "say",
    "card",
    "zero",
    "right",
    "let",
    "print",
    "write",
    "rank",
    "getting",
    "getting",
    "k",
    "queen",
    "jack",
    "one",
    "uh",
    "basically",
    "getting",
    "need",
    "look",
    "last",
    "one",
    "getting",
    "one",
    "wrong",
    "actual",
    "rank",
    "put",
    "statement",
    "digits",
    "three",
    "means",
    "10",
    "okay",
    "take",
    "two",
    "values",
    "instead",
    "one",
    "need",
    "get",
    "0",
    "need",
    "get",
    "till",
    "inclusive",
    "get",
    "10",
    "rest",
    "get",
    "2",
    "get",
    "one",
    "idea",
    "check",
    "length",
    "card",
    "equals",
    "2",
    "write",
    "yeah",
    "equals",
    "rank",
    "equals",
    "uh",
    "card",
    "zero",
    "else",
    "rank",
    "equals",
    "card",
    "zero",
    "sorry",
    "zero",
    "two",
    "two",
    "print",
    "rank",
    "show",
    "us",
    "king",
    "queen",
    "jack",
    "fine",
    "getting",
    "one",
    "10",
    "getting",
    "two",
    "idea",
    "eight",
    "nine",
    "fine",
    "10",
    "getting",
    "2",
    "exactly",
    "needed",
    "way",
    "basically",
    "uh",
    "getting",
    "rank",
    "also",
    "need",
    "suits",
    "card",
    "length",
    "two",
    "suit",
    "next",
    "value",
    "right",
    "suits",
    "equals",
    "card",
    "one",
    "case",
    "suit",
    "basically",
    "card",
    "two",
    "idea",
    "rank",
    "suit",
    "separately",
    "detected",
    "go",
    "hearts",
    "king",
    "hearts",
    "queen",
    "hearts",
    "ten",
    "hearts",
    "separately",
    "append",
    "list",
    "say",
    "ranks",
    "dot",
    "append",
    "rank",
    "suit",
    "card",
    "inside",
    "remove",
    "done",
    "make",
    "sure",
    "headed",
    "right",
    "direction",
    "print",
    "ranks",
    "list",
    "ranks",
    "also",
    "print",
    "suits",
    "suits",
    "go",
    "list",
    "ranks",
    "list",
    "suits",
    "list",
    "ranks",
    "list",
    "suits",
    "good",
    "first",
    "going",
    "start",
    "royal",
    "flush",
    "going",
    "check",
    "royal",
    "flush",
    "check",
    "rest",
    "later",
    "check",
    "royal",
    "flush",
    "royal",
    "flush",
    "first",
    "thing",
    "need",
    "check",
    "whether",
    "flush",
    "suits",
    "flush",
    "basically",
    "check",
    "let",
    "print",
    "easier",
    "see",
    "actually",
    "happening",
    "check",
    "suits",
    "dot",
    "count",
    "first",
    "element",
    "okay",
    "anything",
    "order",
    "true",
    "pick",
    "element",
    "list",
    "write",
    "suits",
    "zero",
    "basically",
    "asking",
    "count",
    "number",
    "times",
    "getting",
    "element",
    "example",
    "take",
    "h",
    "count",
    "many",
    "times",
    "h",
    "list",
    "equal",
    "5",
    "means",
    "uh",
    "flush",
    "flush",
    "let",
    "run",
    "first",
    "one",
    "true",
    "second",
    "one",
    "also",
    "true",
    "let",
    "put",
    "another",
    "hand",
    "poker",
    "hand",
    "going",
    "put",
    "let",
    "say",
    "put",
    "another",
    "hand",
    "uh",
    "let",
    "put",
    "four",
    "kind",
    "next",
    "five",
    "five",
    "five",
    "five",
    "queen",
    "five",
    "club",
    "five",
    "spade",
    "five",
    "hearts",
    "five",
    "diamond",
    "queen",
    "hearts",
    "queen",
    "hearts",
    "kind",
    "case",
    "give",
    "us",
    "false",
    "last",
    "one",
    "giving",
    "us",
    "false",
    "flush",
    "checking",
    "flush",
    "way",
    "next",
    "one",
    "one",
    "flush",
    "let",
    "put",
    "flush",
    "well",
    "another",
    "one",
    "let",
    "put",
    "full",
    "house",
    "well",
    "put",
    "full",
    "house",
    "flush",
    "two",
    "two",
    "two",
    "two",
    "ten",
    "ten",
    "uh",
    "two",
    "writing",
    "exactly",
    "like",
    "confusion",
    "uh",
    "two",
    "diamonds",
    "two",
    "spade",
    "two",
    "spade",
    "two",
    "spade",
    "like",
    "like",
    "hard",
    "club",
    "okay",
    "two",
    "spade",
    "ten",
    "hearts",
    "turn",
    "space",
    "club",
    "go",
    "one",
    "full",
    "house",
    "uh",
    "full",
    "house",
    "next",
    "one",
    "next",
    "one",
    "uh",
    "plush",
    "flush",
    "uh",
    "using",
    "one",
    "two",
    "diamonds",
    "diamonds",
    "king",
    "diamonds",
    "seven",
    "diamond",
    "six",
    "diamond",
    "six",
    "diamonds",
    "five",
    "diamond",
    "let",
    "run",
    "uh",
    "giving",
    "us",
    "lot",
    "outputs",
    "let",
    "print",
    "hand",
    "let",
    "print",
    "ranks",
    "suits",
    "run",
    "go",
    "first",
    "one",
    "flush",
    "true",
    "second",
    "one",
    "also",
    "straight",
    "flash",
    "true",
    "third",
    "one",
    "four",
    "kind",
    "false",
    "fourth",
    "one",
    "also",
    "false",
    "full",
    "house",
    "also",
    "another",
    "flush",
    "true",
    "means",
    "methodology",
    "first",
    "tell",
    "us",
    "whether",
    "plush",
    "check",
    "royal",
    "flush",
    "check",
    "straight",
    "flush",
    "also",
    "check",
    "flush",
    "check",
    "three",
    "things",
    "right",
    "away",
    "go",
    "first",
    "condition",
    "true",
    "means",
    "flush",
    "know",
    "flush",
    "get",
    "second",
    "step",
    "checking",
    "whether",
    "royal",
    "flush",
    "royal",
    "flush",
    "must",
    "ranks",
    "uh",
    "thing",
    "might",
    "hearts",
    "king",
    "hearts",
    "might",
    "sorted",
    "wrong",
    "need",
    "make",
    "sure",
    "first",
    "sorted",
    "properly",
    "biggest",
    "one",
    "highest",
    "rank",
    "first",
    "king",
    "queen",
    "rank",
    "yet",
    "print",
    "print",
    "ranks",
    "uh",
    "let",
    "write",
    "pass",
    "print",
    "ranks",
    "give",
    "us",
    "king",
    "queen",
    "simply",
    "writing",
    "king",
    "queen",
    "jack",
    "wrong",
    "case",
    "uh",
    "need",
    "work",
    "values",
    "uh",
    "sort",
    "want",
    "14",
    "instead",
    "writing",
    "otherwise",
    "organized",
    "put",
    "remove",
    "put",
    "give",
    "us",
    "k",
    "first",
    "second",
    "still",
    "royal",
    "flush",
    "sequence",
    "able",
    "get",
    "rank",
    "properly",
    "simply",
    "write",
    "rank",
    "equals",
    "um",
    "rank",
    "equals",
    "simple",
    "else",
    "rank",
    "equals",
    "king",
    "copy",
    "paste",
    "paste",
    "okay",
    "rank",
    "ranking",
    "14",
    "rank",
    "k",
    "rank",
    "q",
    "rank",
    "jack",
    "go",
    "run",
    "numbers",
    "13",
    "14",
    "12",
    "11",
    "need",
    "make",
    "sure",
    "sorted",
    "properly",
    "sorted",
    "properly",
    "easier",
    "us",
    "check",
    "oil",
    "flush",
    "simply",
    "write",
    "sorted",
    "sorted",
    "ranks",
    "actually",
    "sorted",
    "ranks",
    "equals",
    "sorted",
    "give",
    "ranks",
    "print",
    "ranks",
    "see",
    "sorted",
    "okay",
    "ranks",
    "sending",
    "uh",
    "integers",
    "um",
    "strings",
    "need",
    "convert",
    "integers",
    "go",
    "see",
    "uh",
    "actually",
    "anything",
    "oh",
    "printed",
    "ranks",
    "sorted",
    "ranks",
    "okay",
    "let",
    "run",
    "see",
    "first",
    "one",
    "see",
    "one",
    "13",
    "14",
    "12",
    "see",
    "10",
    "11",
    "12",
    "13",
    "sorted",
    "um",
    "actually",
    "let",
    "forget",
    "order",
    "right",
    "use",
    "sorted",
    "ranks",
    "uh",
    "instead",
    "saying",
    "first",
    "one",
    "10",
    "second",
    "one",
    "11",
    "say",
    "uh",
    "work",
    "well",
    "write",
    "uh",
    "14",
    "sorted",
    "ranks",
    "check",
    "14",
    "present",
    "assorted",
    "ranks",
    "uh",
    "write",
    "another",
    "another",
    "write",
    "another",
    "another",
    "end",
    "14",
    "13",
    "12",
    "11",
    "10",
    "wrote",
    "one",
    "extra",
    "case",
    "means",
    "royal",
    "flush",
    "print",
    "royal",
    "royal",
    "flush",
    "let",
    "run",
    "go",
    "see",
    "says",
    "royal",
    "flush",
    "true",
    "rest",
    "true",
    "order",
    "get",
    "output",
    "going",
    "say",
    "uh",
    "going",
    "create",
    "list",
    "called",
    "possible",
    "simple",
    "ranks",
    "list",
    "contain",
    "possible",
    "ranks",
    "example",
    "getting",
    "royal",
    "flush",
    "going",
    "put",
    "value",
    "10",
    "inside",
    "going",
    "append",
    "sometimes",
    "also",
    "detect",
    "single",
    "pair",
    "two",
    "pair",
    "right",
    "need",
    "find",
    "highest",
    "one",
    "put",
    "possible",
    "scenarios",
    "inside",
    "list",
    "pick",
    "highest",
    "one",
    "example",
    "detected",
    "three",
    "kind",
    "also",
    "detected",
    "full",
    "house",
    "full",
    "house",
    "seven",
    "three",
    "kind",
    "four",
    "pick",
    "seven",
    "highest",
    "uh",
    "hand",
    "going",
    "case",
    "royal",
    "flush",
    "going",
    "put",
    "um",
    "inside",
    "going",
    "write",
    "uh",
    "possible",
    "ranks",
    "dot",
    "append",
    "10",
    "going",
    "append",
    "return",
    "going",
    "return",
    "uh",
    "possible",
    "ranks",
    "maximum",
    "value",
    "basic",
    "idea",
    "um",
    "return",
    "return",
    "number",
    "wait",
    "write",
    "poker",
    "poker",
    "ranks",
    "equals",
    "going",
    "create",
    "dictionary",
    "one",
    "going",
    "give",
    "number",
    "name",
    "royal",
    "lush",
    "second",
    "one",
    "number",
    "nine",
    "uh",
    "straight",
    "flush",
    "number",
    "eight",
    "four",
    "kind",
    "number",
    "seven",
    "full",
    "house",
    "number",
    "six",
    "flush",
    "number",
    "five",
    "straight",
    "ght",
    "number",
    "four",
    "three",
    "uh",
    "kind",
    "number",
    "three",
    "two",
    "pair",
    "number",
    "two",
    "pair",
    "number",
    "one",
    "covered",
    "ranks",
    "check",
    "max",
    "possible",
    "write",
    "poker",
    "ranks",
    "value",
    "return",
    "simply",
    "print",
    "one",
    "simply",
    "write",
    "print",
    "print",
    "print",
    "go",
    "uh",
    "let",
    "remove",
    "prints",
    "um",
    "print",
    "let",
    "print",
    "let",
    "print",
    "inside",
    "write",
    "print",
    "hand",
    "print",
    "like",
    "detect",
    "print",
    "hand",
    "prints",
    "let",
    "give",
    "uh",
    "let",
    "let",
    "call",
    "output",
    "print",
    "output",
    "put",
    "output",
    "return",
    "output",
    "go",
    "yeah",
    "let",
    "run",
    "see",
    "get",
    "max",
    "argument",
    "empty",
    "sequence",
    "first",
    "one",
    "see",
    "royal",
    "flush",
    "returning",
    "nothing",
    "uh",
    "simply",
    "write",
    "uh",
    "possible",
    "ranks",
    "means",
    "possible",
    "ranks",
    "empty",
    "possible",
    "ranks",
    "dot",
    "append",
    "one",
    "means",
    "high",
    "card",
    "right",
    "actually",
    "coded",
    "flash",
    "straight",
    "full",
    "house",
    "say",
    "uh",
    "high",
    "card",
    "go",
    "along",
    "keep",
    "adding",
    "uh",
    "keep",
    "fixing",
    "see",
    "says",
    "royal",
    "flush",
    "first",
    "one",
    "second",
    "third",
    "fourth",
    "fifth",
    "says",
    "high",
    "card",
    "heading",
    "right",
    "direction",
    "getting",
    "good",
    "output",
    "see",
    "results",
    "checking",
    "sorted",
    "ranks",
    "let",
    "keep",
    "maybe",
    "need",
    "later",
    "actually",
    "really",
    "need",
    "uh",
    "check",
    "case",
    "uh",
    "second",
    "one",
    "going",
    "check",
    "straight",
    "flush",
    "know",
    "check",
    "straight",
    "put",
    "straight",
    "code",
    "inside",
    "statement",
    "become",
    "straight",
    "flush",
    "statement",
    "checking",
    "flush",
    "write",
    "else",
    "possible",
    "dot",
    "append",
    "uh",
    "flush",
    "flush",
    "number",
    "six",
    "put",
    "six",
    "run",
    "see",
    "one",
    "detected",
    "flush",
    "one",
    "detected",
    "flush",
    "one",
    "correct",
    "flush",
    "one",
    "straight",
    "flush",
    "need",
    "fix",
    "need",
    "add",
    "another",
    "statement",
    "check",
    "straight",
    "check",
    "straight",
    "let",
    "first",
    "going",
    "write",
    "okay",
    "happens",
    "order",
    "check",
    "straight",
    "need",
    "sorted",
    "ranks",
    "example",
    "sorted",
    "ranks",
    "let",
    "say",
    "10",
    "11",
    "12",
    "13",
    "sorted",
    "ranks",
    "take",
    "first",
    "element",
    "take",
    "element",
    "say",
    "check",
    "element",
    "add",
    "1",
    "right",
    "talking",
    "11",
    "take",
    "11",
    "take",
    "element",
    "10",
    "write",
    "10",
    "say",
    "add",
    "1",
    "element",
    "plus",
    "check",
    "equal",
    "become",
    "11",
    "equals",
    "true",
    "go",
    "next",
    "element",
    "go",
    "check",
    "one",
    "11",
    "write",
    "11",
    "add",
    "plus",
    "check",
    "11",
    "plus",
    "1",
    "12",
    "true",
    "become",
    "true",
    "keep",
    "checking",
    "give",
    "us",
    "true",
    "true",
    "true",
    "true",
    "true",
    "true",
    "true",
    "say",
    "okay",
    "straight",
    "even",
    "one",
    "gives",
    "us",
    "something",
    "else",
    "example",
    "uh",
    "one",
    "let",
    "say",
    "seven",
    "write",
    "11",
    "checks",
    "7",
    "plus",
    "1",
    "one",
    "false",
    "rest",
    "true",
    "straight",
    "check",
    "going",
    "write",
    "efficient",
    "code",
    "going",
    "write",
    "4",
    "range",
    "basically",
    "looping",
    "uh",
    "need",
    "loop",
    "one",
    "starting",
    "uh",
    "let",
    "put",
    "back",
    "starting",
    "value",
    "value",
    "pick",
    "value",
    "add",
    "1",
    "uh",
    "sorry",
    "add",
    "1",
    "previous",
    "one",
    "value",
    "previous",
    "value",
    "start",
    "1",
    "zero",
    "going",
    "write",
    "range",
    "one",
    "till",
    "length",
    "sorted",
    "ranks",
    "five",
    "fine",
    "still",
    "writing",
    "case",
    "make",
    "little",
    "efficient",
    "going",
    "write",
    "single",
    "line",
    "loop",
    "instead",
    "writing",
    "write",
    "exactly",
    "writing",
    "writing",
    "sorted",
    "ranks",
    "sorted",
    "ranks",
    "uh",
    "one",
    "banks",
    "example",
    "equal",
    "sorted",
    "ranks",
    "pi",
    "minus",
    "1",
    "plus",
    "putting",
    "11",
    "equals",
    "10",
    "plus",
    "right",
    "case",
    "keep",
    "getting",
    "answer",
    "stored",
    "list",
    "list",
    "write",
    "true",
    "give",
    "us",
    "true",
    "even",
    "one",
    "false",
    "give",
    "us",
    "false",
    "basic",
    "idea",
    "need",
    "put",
    "another",
    "bracket",
    "put",
    "statements",
    "problem",
    "one",
    "two",
    "three",
    "okay",
    "bracket",
    "okay",
    "idea",
    "let",
    "comment",
    "well",
    "um",
    "let",
    "put",
    "well",
    "understand",
    "exactly",
    "happened",
    "true",
    "means",
    "straight",
    "write",
    "possible",
    "ranks",
    "uh",
    "dot",
    "append",
    "straight",
    "straight",
    "number",
    "five",
    "number",
    "five",
    "add",
    "straight",
    "far",
    "actually",
    "let",
    "add",
    "annoying",
    "know",
    "going",
    "back",
    "forth",
    "flush",
    "straight",
    "straight",
    "three",
    "kind",
    "two",
    "pair",
    "pair",
    "high",
    "card",
    "flush",
    "straight",
    "three",
    "kind",
    "two",
    "pair",
    "pair",
    "high",
    "court",
    "go",
    "till",
    "flush",
    "going",
    "straight",
    "straight",
    "jack",
    "spades",
    "clubs",
    "jack",
    "club",
    "10",
    "hearts",
    "nine",
    "club",
    "eight",
    "club",
    "seven",
    "diamond",
    "straight",
    "poker",
    "hand",
    "three",
    "kind",
    "ten",
    "hearts",
    "ten",
    "hearts",
    "ten",
    "spades",
    "10",
    "spades",
    "spade",
    "club",
    "bad",
    "uh",
    "ten",
    "clubs",
    "ten",
    "diamonds",
    "ten",
    "diamonds",
    "two",
    "diamonds",
    "two",
    "diamonds",
    "two",
    "five",
    "uh",
    "spades",
    "two",
    "pair",
    "king",
    "king",
    "diamond",
    "king",
    "hearts",
    "five",
    "clubs",
    "five",
    "spade",
    "six",
    "diamond",
    "pair",
    "pair",
    "two",
    "diamond",
    "two",
    "two",
    "uh",
    "spades",
    "nine",
    "nine",
    "clubs",
    "king",
    "diamond",
    "10",
    "clubs",
    "last",
    "one",
    "king",
    "diamonds",
    "king",
    "diamonds",
    "five",
    "diamonds",
    "two",
    "diamond",
    "five",
    "hearts",
    "bad",
    "hearts",
    "two",
    "diamond",
    "ten",
    "clubs",
    "jack",
    "diamonds",
    "jack",
    "hearts",
    "getting",
    "mixed",
    "okay",
    "idea",
    "let",
    "run",
    "um",
    "see",
    "get",
    "correct",
    "straight",
    "run",
    "straight",
    "straight",
    "uh",
    "jack",
    "ten",
    "nine",
    "eight",
    "seven",
    "correct",
    "straight",
    "need",
    "need",
    "take",
    "straight",
    "part",
    "need",
    "add",
    "statement",
    "put",
    "else",
    "first",
    "check",
    "flush",
    "check",
    "straight",
    "become",
    "straight",
    "flush",
    "straight",
    "flush",
    "number",
    "nine",
    "see",
    "straight",
    "flash",
    "become",
    "number",
    "nine",
    "run",
    "royal",
    "flush",
    "fine",
    "straight",
    "flush",
    "detected",
    "well",
    "good",
    "straight",
    "flush",
    "okay",
    "done",
    "one",
    "two",
    "uh",
    "three",
    "four",
    "done",
    "four",
    "also",
    "done",
    "fifth",
    "high",
    "card",
    "done",
    "five",
    "ten",
    "halfway",
    "done",
    "going",
    "check",
    "uh",
    "four",
    "kind",
    "check",
    "three",
    "kind",
    "two",
    "pair",
    "single",
    "pair",
    "uh",
    "understand",
    "check",
    "showing",
    "search",
    "move",
    "okay",
    "check",
    "let",
    "straight",
    "four",
    "kind",
    "four",
    "kind",
    "list",
    "right",
    "four",
    "kind",
    "four",
    "one",
    "card",
    "would",
    "different",
    "example",
    "three",
    "three",
    "three",
    "three",
    "five",
    "three",
    "four",
    "one",
    "different",
    "right",
    "tell",
    "tell",
    "computer",
    "find",
    "create",
    "set",
    "set",
    "set",
    "put",
    "three",
    "together",
    "put",
    "separate",
    "set",
    "set",
    "become",
    "3",
    "check",
    "many",
    "three",
    "five",
    "completing",
    "set",
    "many",
    "values",
    "two",
    "values",
    "means",
    "might",
    "four",
    "kind",
    "another",
    "condition",
    "two",
    "set",
    "let",
    "say",
    "333",
    "5",
    "case",
    "set",
    "also",
    "give",
    "three",
    "five",
    "need",
    "check",
    "first",
    "whether",
    "convert",
    "set",
    "give",
    "us",
    "two",
    "values",
    "two",
    "need",
    "check",
    "whether",
    "uh",
    "value",
    "comes",
    "three",
    "times",
    "four",
    "times",
    "comes",
    "three",
    "times",
    "4",
    "kind",
    "comes",
    "three",
    "times",
    "full",
    "house",
    "three",
    "three",
    "kind",
    "pair",
    "becomes",
    "full",
    "house",
    "first",
    "get",
    "unique",
    "values",
    "hand",
    "unique",
    "values",
    "equals",
    "set",
    "sorted",
    "ranks",
    "sorted",
    "ranks",
    "set",
    "use",
    "list",
    "convert",
    "list",
    "make",
    "easier",
    "us",
    "work",
    "print",
    "unique",
    "hands",
    "print",
    "unique",
    "hand",
    "unique",
    "values",
    "let",
    "print",
    "hand",
    "print",
    "unique",
    "values",
    "first",
    "one",
    "unique",
    "values",
    "8",
    "9",
    "10",
    "11",
    "12",
    "printing",
    "second",
    "one",
    "oh",
    "sorry",
    "first",
    "one",
    "second",
    "one",
    "unique",
    "values",
    "third",
    "one",
    "unique",
    "values",
    "five",
    "five",
    "five",
    "three",
    "four",
    "five",
    "giving",
    "us",
    "five",
    "one",
    "giving",
    "us",
    "12",
    "one",
    "basically",
    "four",
    "kind",
    "four",
    "kind",
    "full",
    "house",
    "also",
    "giving",
    "us",
    "two",
    "giving",
    "us",
    "2",
    "3",
    "need",
    "check",
    "unique",
    "hand",
    "list",
    "basically",
    "two",
    "uh",
    "values",
    "first",
    "need",
    "check",
    "two",
    "values",
    "length",
    "hands",
    "unique",
    "values",
    "equals",
    "case",
    "one",
    "four",
    "kind",
    "full",
    "house",
    "actually",
    "put",
    "somewhere",
    "okay",
    "think",
    "put",
    "one",
    "outside",
    "one",
    "journal",
    "also",
    "used",
    "three",
    "kind",
    "also",
    "used",
    "full",
    "house",
    "two",
    "pair",
    "unique",
    "values",
    "checking",
    "four",
    "kind",
    "going",
    "check",
    "going",
    "loop",
    "values",
    "okay",
    "value",
    "hand",
    "unique",
    "values",
    "loop",
    "values",
    "12",
    "5",
    "okay",
    "value",
    "need",
    "count",
    "many",
    "times",
    "present",
    "complete",
    "list",
    "say",
    "many",
    "times",
    "value",
    "let",
    "say",
    "uh",
    "3",
    "present",
    "whole",
    "list",
    "need",
    "check",
    "say",
    "sorted",
    "ranks",
    "dot",
    "count",
    "sorted",
    "list",
    "sorted",
    "list",
    "basically",
    "8",
    "9",
    "10",
    "11",
    "12",
    "case",
    "five",
    "five",
    "five",
    "five",
    "q",
    "right",
    "queen",
    "13",
    "know",
    "uh",
    "555",
    "sorted",
    "going",
    "check",
    "value",
    "many",
    "times",
    "come",
    "main",
    "list",
    "write",
    "val",
    "comes",
    "four",
    "times",
    "going",
    "write",
    "uh",
    "need",
    "write",
    "case",
    "write",
    "possible",
    "rank",
    "dot",
    "append",
    "uh",
    "four",
    "kind",
    "four",
    "kind",
    "number",
    "eight",
    "append",
    "eight",
    "four",
    "times",
    "three",
    "times",
    "means",
    "number",
    "seven",
    "full",
    "house",
    "three",
    "times",
    "set",
    "two",
    "unique",
    "value",
    "unique",
    "value",
    "set",
    "two",
    "one",
    "three",
    "means",
    "one",
    "two",
    "automatically",
    "know",
    "three",
    "rank",
    "seven",
    "run",
    "see",
    "royal",
    "flush",
    "straight",
    "four",
    "kind",
    "detected",
    "properly",
    "four",
    "kind",
    "go",
    "full",
    "house",
    "also",
    "detected",
    "properly",
    "oh",
    "sorry",
    "full",
    "house",
    "uh",
    "four",
    "kind",
    "two",
    "ten",
    "full",
    "house",
    "four",
    "kind",
    "go",
    "already",
    "flush",
    "straight",
    "working",
    "good",
    "pattern",
    "going",
    "use",
    "uh",
    "next",
    "next",
    "one",
    "three",
    "kind",
    "done",
    "flash",
    "done",
    "straight",
    "going",
    "three",
    "kind",
    "going",
    "three",
    "kind",
    "two",
    "pair",
    "let",
    "say",
    "three",
    "kind",
    "five",
    "five",
    "five",
    "five",
    "five",
    "uh",
    "let",
    "say",
    "six",
    "seven",
    "six",
    "six",
    "becomes",
    "full",
    "house",
    "talking",
    "right",
    "uh",
    "talking",
    "already",
    "done",
    "six",
    "seven",
    "give",
    "us",
    "many",
    "unique",
    "values",
    "give",
    "us",
    "three",
    "unique",
    "values",
    "send",
    "set",
    "set",
    "5",
    "6",
    "give",
    "us",
    "three",
    "values",
    "uh",
    "also",
    "three",
    "values",
    "another",
    "scenario",
    "scenario",
    "let",
    "say",
    "eight",
    "eight",
    "peer",
    "seven",
    "seven",
    "also",
    "appear",
    "three",
    "let",
    "say",
    "let",
    "say",
    "two",
    "create",
    "set",
    "eight",
    "seven",
    "two",
    "many",
    "unique",
    "values",
    "unique",
    "values",
    "three",
    "also",
    "unique",
    "values",
    "equals",
    "three",
    "cases",
    "three",
    "case",
    "uh",
    "three",
    "kinds",
    "case",
    "uh",
    "two",
    "pair",
    "right",
    "need",
    "check",
    "first",
    "three",
    "actually",
    "write",
    "well",
    "unique",
    "values",
    "two",
    "unique",
    "values",
    "r2",
    "go",
    "four",
    "kind",
    "full",
    "house",
    "okay",
    "need",
    "check",
    "length",
    "unique",
    "values",
    "basically",
    "three",
    "checking",
    "four",
    "kind",
    "uh",
    "full",
    "house",
    "checking",
    "three",
    "kind",
    "pair",
    "go",
    "first",
    "need",
    "check",
    "unique",
    "values",
    "three",
    "check",
    "values",
    "value",
    "comes",
    "many",
    "times",
    "loop",
    "value",
    "value",
    "comes",
    "value",
    "come",
    "three",
    "times",
    "value",
    "comes",
    "three",
    "times",
    "three",
    "kind",
    "three",
    "kind",
    "10",
    "uh",
    "10",
    "three",
    "kind",
    "four",
    "value",
    "comes",
    "two",
    "times",
    "means",
    "example",
    "2",
    "example",
    "2",
    "two",
    "pair",
    "three",
    "go",
    "uh",
    "sorry",
    "comes",
    "two",
    "times",
    "three",
    "times",
    "three",
    "kind",
    "two",
    "times",
    "two",
    "pair",
    "write",
    "well",
    "easier",
    "know",
    "going",
    "also",
    "write",
    "four",
    "kind",
    "one",
    "full",
    "house",
    "pretty",
    "easy",
    "think",
    "little",
    "bit",
    "exactly",
    "believe",
    "uh",
    "one",
    "left",
    "let",
    "run",
    "first",
    "go",
    "three",
    "kind",
    "10",
    "10",
    "10",
    "two",
    "different",
    "full",
    "house",
    "three",
    "kind",
    "actually",
    "let",
    "change",
    "full",
    "house",
    "three",
    "kind",
    "make",
    "full",
    "house",
    "write",
    "10",
    "well",
    "let",
    "see",
    "detects",
    "full",
    "house",
    "go",
    "full",
    "house",
    "go",
    "full",
    "house",
    "four",
    "kind",
    "sorry",
    "made",
    "four",
    "kind",
    "bad",
    "uh",
    "wanted",
    "make",
    "full",
    "house",
    "means",
    "2d",
    "also",
    "2d",
    "bad",
    "become",
    "full",
    "house",
    "go",
    "see",
    "fallout",
    "means",
    "methodology",
    "working",
    "fine",
    "three",
    "kind",
    "working",
    "properly",
    "two",
    "pair",
    "king",
    "king",
    "working",
    "fine",
    "five",
    "five",
    "two",
    "pair",
    "excellent",
    "uh",
    "unique",
    "values",
    "last",
    "one",
    "simple",
    "um",
    "checking",
    "pair",
    "simply",
    "four",
    "values",
    "example",
    "let",
    "share",
    "example",
    "five",
    "five",
    "three",
    "six",
    "seven",
    "eight",
    "set",
    "write",
    "thank",
    "set",
    "five",
    "five",
    "uh",
    "five",
    "three",
    "five",
    "three",
    "six",
    "seven",
    "four",
    "unique",
    "unique",
    "values",
    "equals",
    "4",
    "means",
    "pair",
    "simple",
    "simply",
    "write",
    "possible",
    "rank",
    "dot",
    "append",
    "write",
    "two",
    "one",
    "already",
    "high",
    "card",
    "run",
    "go",
    "go",
    "getting",
    "pair",
    "getting",
    "high",
    "card",
    "basically",
    "um",
    "get",
    "values",
    "repeats",
    "summarize",
    "done",
    "first",
    "extracted",
    "ranks",
    "suits",
    "created",
    "variable",
    "called",
    "possible",
    "ranks",
    "variable",
    "list",
    "store",
    "ranks",
    "actually",
    "let",
    "print",
    "possible",
    "ranks",
    "uh",
    "print",
    "possible",
    "ranks",
    "let",
    "see",
    "one",
    "yeah",
    "see",
    "three",
    "three",
    "three",
    "nine",
    "five",
    "also",
    "flush",
    "also",
    "straight",
    "uh",
    "together",
    "straight",
    "flush",
    "um",
    "four",
    "kind",
    "rest",
    "multiples",
    "one",
    "multiple",
    "well",
    "uh",
    "flush",
    "well",
    "royal",
    "flush",
    "well",
    "take",
    "bigger",
    "one",
    "royal",
    "flush",
    "yeah",
    "idea",
    "uh",
    "mentioning",
    "extract",
    "ranks",
    "suits",
    "lists",
    "sort",
    "sorting",
    "make",
    "easier",
    "uh",
    "especially",
    "uh",
    "finding",
    "straight",
    "make",
    "much",
    "easier",
    "first",
    "check",
    "royal",
    "flush",
    "first",
    "check",
    "flush",
    "check",
    "let",
    "write",
    "uh",
    "check",
    "blush",
    "check",
    "royal",
    "flush",
    "check",
    "straight",
    "flush",
    "royal",
    "royal",
    "flash",
    "flush",
    "straight",
    "straight",
    "flush",
    "otherwise",
    "simply",
    "flush",
    "flush",
    "basically",
    "straight",
    "straight",
    "uh",
    "uh",
    "checking",
    "previous",
    "value",
    "adding",
    "one",
    "comparing",
    "current",
    "value",
    "11",
    "compared",
    "10",
    "plus",
    "1",
    "12",
    "compared",
    "11",
    "plus",
    "1",
    "give",
    "us",
    "true",
    "value",
    "becomes",
    "consecutively",
    "uh",
    "listed",
    "ranked",
    "write",
    "straight",
    "comes",
    "unique",
    "values",
    "check",
    "unique",
    "values",
    "putting",
    "set",
    "sorted",
    "ranks",
    "unique",
    "values",
    "2",
    "two",
    "possibilities",
    "four",
    "kind",
    "full",
    "house",
    "one",
    "values",
    "four",
    "uh",
    "counts",
    "four",
    "kind",
    "one",
    "values",
    "three",
    "counts",
    "uh",
    "full",
    "house",
    "way",
    "checking",
    "unique",
    "values",
    "unique",
    "values",
    "three",
    "two",
    "possibilities",
    "one",
    "three",
    "kind",
    "value",
    "count",
    "three",
    "value",
    "count",
    "two",
    "means",
    "two",
    "pair",
    "single",
    "pair",
    "unique",
    "values",
    "set",
    "count",
    "four",
    "um",
    "nothing",
    "else",
    "works",
    "um",
    "uh",
    "high",
    "card",
    "done",
    "uh",
    "call",
    "dictionary",
    "rankings",
    "numbers",
    "extract",
    "output",
    "get",
    "result",
    "let",
    "let",
    "remove",
    "prints",
    "neat",
    "clean",
    "want",
    "uh",
    "many",
    "things",
    "printed",
    "yeah",
    "hand",
    "detected",
    "royal",
    "fly",
    "straight",
    "flash",
    "four",
    "kind",
    "two",
    "pair",
    "basically",
    "classify",
    "poker",
    "hand",
    "written",
    "code",
    "go",
    "use",
    "trained",
    "model",
    "find",
    "detect",
    "hand",
    "send",
    "find",
    "poker",
    "hand",
    "give",
    "us",
    "output",
    "type",
    "hand",
    "let",
    "go",
    "ahead",
    "okay",
    "process",
    "completed",
    "training",
    "done",
    "50",
    "epochs",
    "completed",
    "hours",
    "details",
    "look",
    "precision",
    "recall",
    "curves",
    "also",
    "confusion",
    "matrix",
    "training",
    "validation",
    "batches",
    "download",
    "best",
    "one",
    "going",
    "use",
    "project",
    "already",
    "project",
    "4",
    "listed",
    "created",
    "poker",
    "hand",
    "function",
    "copy",
    "yolo",
    "webcam",
    "using",
    "webcam",
    "run",
    "simply",
    "copy",
    "name",
    "poker",
    "detector",
    "bring",
    "model",
    "see",
    "best",
    "seven",
    "let",
    "drag",
    "call",
    "playing",
    "cards",
    "dot",
    "pt",
    "make",
    "changes",
    "detects",
    "first",
    "class",
    "names",
    "need",
    "change",
    "change",
    "go",
    "back",
    "file",
    "copy",
    "names",
    "simply",
    "paste",
    "cut",
    "paste",
    "go",
    "make",
    "easier",
    "understand",
    "going",
    "classes",
    "simply",
    "press",
    "enter",
    "ranks",
    "done",
    "two",
    "done",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ace",
    "jack",
    "king",
    "queen",
    "see",
    "classes",
    "listed",
    "video",
    "going",
    "use",
    "video",
    "remove",
    "open",
    "webcam",
    "using",
    "webcam",
    "one",
    "size",
    "using",
    "weight",
    "playing",
    "cards",
    "dot",
    "pt",
    "let",
    "run",
    "see",
    "works",
    "webcam",
    "upside",
    "playing",
    "cards",
    "going",
    "test",
    "one",
    "one",
    "see",
    "performs",
    "know",
    "detected",
    "properly",
    "go",
    "ahead",
    "merge",
    "poker",
    "hand",
    "function",
    "issues",
    "let",
    "see",
    "works",
    "actually",
    "running",
    "background",
    "let",
    "put",
    "two",
    "go",
    "getting",
    "two",
    "h",
    "basically",
    "two",
    "hearts",
    "uh",
    "jack",
    "clubs",
    "good",
    "queen",
    "spades",
    "good",
    "order",
    "make",
    "little",
    "bit",
    "efficient",
    "put",
    "twos",
    "together",
    "see",
    "work",
    "fine",
    "go",
    "two",
    "diamond",
    "two",
    "clubs",
    "two",
    "spades",
    "two",
    "hearts",
    "detecting",
    "properly",
    "good",
    "clubs",
    "oh",
    "sorry",
    "threes",
    "let",
    "try",
    "three",
    "diamond",
    "three",
    "club",
    "three",
    "heart",
    "three",
    "spades",
    "working",
    "fine",
    "well",
    "uh",
    "make",
    "sure",
    "everything",
    "working",
    "fine",
    "might",
    "one",
    "two",
    "classes",
    "detected",
    "properly",
    "make",
    "sure",
    "correct",
    "heart",
    "spades",
    "diamond",
    "clubs",
    "fine",
    "well",
    "far",
    "giving",
    "us",
    "really",
    "good",
    "results",
    "fast",
    "well",
    "see",
    "five",
    "paid",
    "five",
    "diamond",
    "heart",
    "club",
    "go",
    "let",
    "check",
    "six",
    "let",
    "put",
    "like",
    "diamond",
    "club",
    "heart",
    "spade",
    "fine",
    "let",
    "put",
    "seven",
    "let",
    "try",
    "like",
    "seven",
    "correct",
    "let",
    "try",
    "eight",
    "eight",
    "correct",
    "nine",
    "yep",
    "correct",
    "yep",
    "correct",
    "track",
    "yep",
    "correct",
    "let",
    "try",
    "queen",
    "yep",
    "correct",
    "let",
    "try",
    "kings",
    "wait",
    "missing",
    "king",
    "oh",
    "happens",
    "missing",
    "king",
    "okay",
    "let",
    "let",
    "try",
    "cards",
    "oh",
    "found",
    "never",
    "mind",
    "okay",
    "club",
    "heart",
    "spade",
    "diamond",
    "excellent",
    "moment",
    "truth",
    "last",
    "one",
    "ace",
    "ace",
    "spade",
    "heart",
    "club",
    "diamond",
    "perfect",
    "100",
    "100",
    "detected",
    "properly",
    "um",
    "actually",
    "52",
    "50",
    "detect",
    "first",
    "already",
    "displaying",
    "going",
    "put",
    "variable",
    "called",
    "hands",
    "hand",
    "hand",
    "equal",
    "empty",
    "going",
    "send",
    "hand",
    "poker",
    "hand",
    "function",
    "import",
    "order",
    "import",
    "rename",
    "rename",
    "file",
    "write",
    "poker",
    "hand",
    "function",
    "without",
    "dashes",
    "easily",
    "imported",
    "right",
    "poker",
    "write",
    "import",
    "poker",
    "function",
    "ability",
    "use",
    "find",
    "poker",
    "hand",
    "go",
    "send",
    "find",
    "write",
    "poker",
    "hand",
    "function",
    "dot",
    "poker",
    "hand",
    "function",
    "dot",
    "find",
    "poker",
    "hand",
    "send",
    "hand",
    "check",
    "results",
    "equal",
    "first",
    "make",
    "sure",
    "five",
    "different",
    "cards",
    "four",
    "two",
    "three",
    "work",
    "total",
    "five",
    "length",
    "hands",
    "length",
    "hand",
    "equals",
    "5",
    "going",
    "send",
    "less",
    "send",
    "done",
    "simply",
    "print",
    "results",
    "display",
    "display",
    "okay",
    "actually",
    "detecting",
    "put",
    "example",
    "limitation",
    "confidence",
    "level",
    "greater",
    "hand",
    "dot",
    "append",
    "going",
    "append",
    "class",
    "name",
    "class",
    "name",
    "basically",
    "cls",
    "actually",
    "class",
    "name",
    "class",
    "name",
    "class",
    "names",
    "cls",
    "go",
    "append",
    "print",
    "uh",
    "hand",
    "let",
    "try",
    "see",
    "works",
    "want",
    "see",
    "exactly",
    "sending",
    "actually",
    "see",
    "results",
    "let",
    "put",
    "two",
    "cards",
    "let",
    "see",
    "result",
    "get",
    "go",
    "uh",
    "results",
    "go",
    "uh",
    "appending",
    "oh",
    "oh",
    "keeps",
    "adding",
    "good",
    "hand",
    "iteration",
    "update",
    "clear",
    "need",
    "fresh",
    "start",
    "every",
    "time",
    "runs",
    "iteration",
    "go",
    "asah",
    "ah",
    "h",
    "h",
    "okay",
    "problem",
    "showing",
    "twice",
    "good",
    "need",
    "need",
    "uh",
    "create",
    "set",
    "send",
    "back",
    "list",
    "way",
    "unique",
    "values",
    "two",
    "cards",
    "uh",
    "possible",
    "simply",
    "set",
    "work",
    "fine",
    "write",
    "equals",
    "set",
    "hand",
    "put",
    "list",
    "print",
    "print",
    "go",
    "case",
    "set",
    "like",
    "getting",
    "one",
    "good",
    "exactly",
    "want",
    "see",
    "detecting",
    "getting",
    "one",
    "okay",
    "add",
    "five",
    "give",
    "us",
    "results",
    "let",
    "put",
    "four",
    "kind",
    "really",
    "easy",
    "already",
    "lined",
    "add",
    "simply",
    "another",
    "card",
    "king",
    "get",
    "output",
    "let",
    "go",
    "end",
    "let",
    "see",
    "go",
    "getting",
    "four",
    "kind",
    "moment",
    "truth",
    "revealed",
    "getting",
    "four",
    "kind",
    "excellent",
    "really",
    "amazing",
    "see",
    "works",
    "simply",
    "put",
    "display",
    "see",
    "real",
    "time",
    "cv",
    "onput",
    "text",
    "copy",
    "paste",
    "instead",
    "class",
    "name",
    "result",
    "uh",
    "results",
    "write",
    "hand",
    "write",
    "like",
    "going",
    "given",
    "position",
    "zero",
    "zero",
    "let",
    "say",
    "put",
    "middle",
    "um",
    "let",
    "little",
    "bit",
    "middle",
    "size",
    "1280",
    "maybe",
    "300",
    "height",
    "may",
    "50",
    "scale",
    "want",
    "big",
    "let",
    "put",
    "five",
    "thickness",
    "let",
    "put",
    "six",
    "um",
    "hopefully",
    "give",
    "us",
    "good",
    "results",
    "foreign",
    "need",
    "push",
    "little",
    "bit",
    "need",
    "make",
    "little",
    "bit",
    "smaller",
    "maybe",
    "three",
    "thickness",
    "five",
    "push",
    "let",
    "run",
    "go",
    "hand",
    "four",
    "kind",
    "excellent",
    "remove",
    "one",
    "put",
    "king",
    "becomes",
    "full",
    "house",
    "hand",
    "full",
    "house",
    "excellent",
    "put",
    "instead",
    "ace",
    "put",
    "another",
    "king",
    "okay",
    "okay",
    "need",
    "remove",
    "put",
    "random",
    "card",
    "let",
    "say",
    "six",
    "two",
    "pair",
    "excellent",
    "go",
    "one",
    "one",
    "test",
    "scenarios",
    "let",
    "put",
    "together",
    "let",
    "see",
    "get",
    "let",
    "try",
    "put",
    "first",
    "one",
    "going",
    "royal",
    "flush",
    "ace",
    "type",
    "king",
    "diamond",
    "queen",
    "diamond",
    "jack",
    "diamond",
    "10",
    "diamond",
    "give",
    "us",
    "royal",
    "flush",
    "another",
    "card",
    "coming",
    "let",
    "put",
    "straight",
    "go",
    "give",
    "us",
    "result",
    "uh",
    "issue",
    "10",
    "diamond",
    "j",
    "q",
    "k",
    "uh",
    "seems",
    "issue",
    "akh",
    "jd",
    "10d",
    "qd",
    "kd",
    "10d",
    "somewhere",
    "reason",
    "yeah",
    "10d",
    "10d",
    "supposed",
    "k",
    "j",
    "another",
    "k",
    "h",
    "cat",
    "oh",
    "okay",
    "detecting",
    "bad",
    "another",
    "card",
    "side",
    "detecting",
    "okay",
    "go",
    "royal",
    "flush",
    "excellent",
    "let",
    "try",
    "straight",
    "flush",
    "uh",
    "let",
    "say",
    "king",
    "queen",
    "jack",
    "10",
    "put",
    "nine",
    "uh",
    "nine",
    "diamond",
    "become",
    "straight",
    "flush",
    "royal",
    "straight",
    "flush",
    "go",
    "straight",
    "flush",
    "let",
    "try",
    "four",
    "kind",
    "going",
    "add",
    "ace",
    "ace",
    "ace",
    "king",
    "nine",
    "ace",
    "ace",
    "ace",
    "ace",
    "go",
    "go",
    "hand",
    "four",
    "kind",
    "perfect",
    "try",
    "full",
    "house",
    "remove",
    "put",
    "nine",
    "full",
    "house",
    "excellent",
    "try",
    "flush",
    "let",
    "put",
    "diamonds",
    "random",
    "random",
    "diamonds",
    "uh",
    "straight",
    "anything",
    "going",
    "put",
    "six",
    "go",
    "another",
    "one",
    "go",
    "even",
    "exactly",
    "straight",
    "still",
    "detect",
    "full",
    "house",
    "flush",
    "flush",
    "working",
    "fine",
    "let",
    "try",
    "straight",
    "uh",
    "let",
    "try",
    "five",
    "try",
    "um",
    "two",
    "three",
    "two",
    "three",
    "need",
    "four",
    "also",
    "need",
    "six",
    "four",
    "command",
    "four",
    "go",
    "four",
    "go",
    "hand",
    "straight",
    "upside",
    "really",
    "organized",
    "still",
    "getting",
    "straight",
    "already",
    "stable",
    "sure",
    "push",
    "yeah",
    "go",
    "much",
    "um",
    "stable",
    "much",
    "stable",
    "getting",
    "straight",
    "uh",
    "perfect",
    "try",
    "three",
    "kind",
    "let",
    "try",
    "queens",
    "three",
    "queens",
    "two",
    "king",
    "hand",
    "three",
    "kind",
    "perfect",
    "uh",
    "two",
    "pair",
    "let",
    "remove",
    "queen",
    "let",
    "add",
    "king",
    "become",
    "two",
    "pair",
    "happened",
    "um",
    "go",
    "becomes",
    "two",
    "pair",
    "let",
    "try",
    "single",
    "pair",
    "go",
    "hand",
    "disappear",
    "uh",
    "let",
    "remove",
    "queen",
    "let",
    "put",
    "five",
    "give",
    "us",
    "high",
    "card",
    "go",
    "gives",
    "us",
    "high",
    "card",
    "basically",
    "project",
    "successfully",
    "done",
    "looks",
    "really",
    "good",
    "getting",
    "outputs",
    "let",
    "let",
    "try",
    "try",
    "hand",
    "see",
    "gives",
    "us",
    "go",
    "gives",
    "us",
    "high",
    "card",
    "gives",
    "us",
    "high",
    "card",
    "uh",
    "let",
    "try",
    "uh",
    "beer",
    "something",
    "see",
    "works",
    "properly",
    "um",
    "go",
    "appear",
    "beer",
    "let",
    "put",
    "another",
    "king",
    "become",
    "three",
    "go",
    "three",
    "kind",
    "three",
    "kind",
    "let",
    "make",
    "four",
    "kind",
    "think",
    "fell",
    "know",
    "um",
    "need",
    "another",
    "king",
    "king",
    "go",
    "get",
    "four",
    "kind",
    "four",
    "kind",
    "let",
    "try",
    "flash",
    "let",
    "make",
    "flush",
    "diamonds",
    "blush",
    "diamonds",
    "go",
    "flash",
    "excellent",
    "else",
    "try",
    "let",
    "try",
    "full",
    "house",
    "queen",
    "queen",
    "king",
    "king",
    "need",
    "another",
    "queen",
    "go",
    "full",
    "house",
    "full",
    "house",
    "yep",
    "remove",
    "queen",
    "put",
    "let",
    "say",
    "two",
    "become",
    "two",
    "pair",
    "go",
    "pretty",
    "good",
    "see",
    "um",
    "object",
    "detection",
    "model",
    "working",
    "really",
    "good",
    "poker",
    "hand",
    "detector",
    "also",
    "working",
    "good",
    "project",
    "see",
    "put",
    "things",
    "together",
    "really",
    "creates",
    "great",
    "project",
    "gives",
    "lot",
    "information",
    "fun",
    "play",
    "around",
    "well",
    "object",
    "detection",
    "like",
    "superpower",
    "understand",
    "train",
    "custom",
    "models",
    "really",
    "explore",
    "possibilities",
    "create",
    "really",
    "good",
    "projects",
    "useful",
    "real",
    "world",
    "applications",
    "hope",
    "learned",
    "something",
    "hope",
    "apply",
    "methods",
    "good",
    "use",
    "like",
    "course",
    "give",
    "thumbs",
    "loved",
    "share",
    "friends",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "object",
    "detection",
    "course",
    "everything",
    "get",
    "started",
    "four",
    "real",
    "projects",
    "first",
    "start",
    "understand",
    "working",
    "install",
    "run",
    "yolo",
    "version",
    "8",
    "using",
    "create",
    "two",
    "car",
    "counter",
    "people",
    "learn",
    "also",
    "gpu",
    "better",
    "later",
    "train",
    "model",
    "data",
    "set",
    "training",
    "one",
    "second",
    "poker",
    "hand",
    "detect",
    "playing",
    "cards",
    "correct",
    "hands",
    "go",
    "information",
    "time",
    "let",
    "wait",
    "going",
    "use",
    "nvidia",
    "graphics",
    "card",
    "like",
    "giving",
    "20",
    "new",
    "things",
    "keep",
    "see",
    "computer",
    "vision",
    "image",
    "video",
    "gives",
    "us",
    "bounding",
    "box",
    "well",
    "type",
    "present",
    "output",
    "single",
    "class",
    "used",
    "results",
    "multiple",
    "boxes",
    "classes",
    "level",
    "exact",
    "detected",
    "still",
    "based",
    "simple",
    "simply",
    "another",
    "true",
    "work",
    "good",
    "different",
    "make",
    "done",
    "versions",
    "5",
    "come",
    "back",
    "check",
    "already",
    "change",
    "latest",
    "previous",
    "believe",
    "comes",
    "order",
    "main",
    "need",
    "close",
    "value",
    "0",
    "perfect",
    "values",
    "much",
    "zero",
    "precision",
    "know",
    "actual",
    "example",
    "house",
    "false",
    "third",
    "last",
    "total",
    "plus",
    "called",
    "give",
    "idea",
    "thing",
    "download",
    "python",
    "might",
    "basically",
    "uh",
    "three",
    "points",
    "press",
    "click",
    "project",
    "running",
    "show",
    "case",
    "sure",
    "add",
    "path",
    "okay",
    "environment",
    "write",
    "code",
    "tell",
    "hit",
    "next",
    "dot",
    "files",
    "folder",
    "part",
    "open",
    "default",
    "fine",
    "right",
    "file",
    "copy",
    "virtual",
    "else",
    "installed",
    "name",
    "remove",
    "print",
    "ahead",
    "want",
    "whether",
    "opencv",
    "cv",
    "zone",
    "ultralytics",
    "numpy",
    "take",
    "current",
    "error",
    "means",
    "anything",
    "basic",
    "import",
    "wanted",
    "select",
    "earlier",
    "10",
    "trying",
    "issue",
    "12",
    "instead",
    "test",
    "lot",
    "way",
    "requirements",
    "paste",
    "website",
    "equals",
    "little",
    "bit",
    "hard",
    "six",
    "works",
    "say",
    "wrong",
    "number",
    "yeah",
    "weights",
    "um",
    "call",
    "chapter",
    "within",
    "basics",
    "exactly",
    "images",
    "try",
    "webcam",
    "find",
    "bus",
    "cv2",
    "nano",
    "large",
    "downloaded",
    "size",
    "actually",
    "around",
    "person",
    "detections",
    "confidence",
    "put",
    "getting",
    "cars",
    "detects",
    "easier",
    "truck",
    "really",
    "detecting",
    "names",
    "small",
    "many",
    "red",
    "green",
    "mask",
    "display",
    "id",
    "given",
    "width",
    "height",
    "read",
    "oh",
    "bad",
    "loop",
    "x",
    "x1",
    "y1",
    "x2",
    "format",
    "element",
    "hopefully",
    "eight",
    "seven",
    "integer",
    "rectangle",
    "color",
    "five",
    "thickness",
    "pretty",
    "bring",
    "corner",
    "something",
    "2",
    "length",
    "showing",
    "text",
    "function",
    "position",
    "maybe",
    "list",
    "motorbike",
    "blah",
    "sorry",
    "high",
    "smaller",
    "scale",
    "point",
    "think",
    "videos",
    "cuda",
    "toolkit",
    "11",
    "inside",
    "otherwise",
    "properly",
    "count",
    "region",
    "nine",
    "offset",
    "writing",
    "rest",
    "send",
    "line",
    "tracker",
    "unique",
    "sort",
    "limit",
    "return",
    "save",
    "append",
    "times",
    "become",
    "14",
    "limits",
    "50",
    "checking",
    "straight",
    "kind",
    "excellent",
    "google",
    "hat",
    "construction",
    "1",
    "safety",
    "vest",
    "drive",
    "sets",
    "rank",
    "suit",
    "clubs",
    "diamond",
    "pair",
    "possible",
    "hearts",
    "queen",
    "ranks",
    "suits",
    "king",
    "ten",
    "jack",
    "ace",
    "flush",
    "diamonds",
    "spades",
    "full",
    "flash",
    "royal",
    "club",
    "spade",
    "sorted"
  ]
}