{
  "text": "hello everyone\nand welcome to this session on modules\nin python\ntoday we are going to discuss this topic\nwhich is very important topic in python\nwhich helps you in reusability of code\nand you don't need to rewrite the code\nagain and again\nso we will see what are the nitty\ngritties in writing modules in python\nnow what's in it for us today\nwe are going to discuss what are python\nmodules\nwhy do we need to use them what are the\ndifferent types of python modules\nand how differently in different ways we\ncan import these modules in our code\nnow a python module is nothing but a\nsimple python file with dot py extension\nincluding the statements and the\ndefinitions\nso basically you need to prepare a\nmodule file with all the functions which\nyou want to import into your\nregular python code across all the\nmodules\nnow it contains codes that you can reuse\nin several programs so it's like saying\nyou write once a piece of code like\ncommon utility methods calculation\nmethods rounding off addition\nsubtractions or some common business\nrules which can be reused across your\nproject then you keep it at one place\nnow this helps in\nsuch a scenario where you have a large\nteam different set of developers are\nworking on different different modules\ndifferent specifications but one single\nutility module file dot py file will\ncontains all the common and reusable\nfunctions which not each and every\nindividual developer can will go and\nchange it's only few set of\nadministrators or the senior developers\ncan maintain and pass it on to the team\nnow\nfor example a file containing python\ncode demo dot py\nis will be called as a module and its\nmodule name would be demo\nso you need to take care that whatever\nthe name of the file is that is what\nwill get imported in your\npython code so we will see that with\ntheir certain examples on our jupyter\nnotebook\nnow why do we need to use as i have\nreiterated it provides flexibility to\norganize the code in a logical way\nand it enables reusability which is the\nmost important factor so one of course\nyou can organize the code you keep the\nreusable code at one place or you can\nkeep a modular approach and also\nreusable so no not all the developers\nhave to go and rewrite that code and it\nis easy to maintain\nand helps in debugging the code easily\nso if you know that there is an error\ncoming there is an issue coming uh in\none of the modules which is imported or\nwhich is the grind lying in the common\nfile then it becomes easy to debug you\njust have to go and check that\nparticular function you don't need to go\nand check in each and every piece of\ncode\nnow there are two types of python\nmodules definitely there are built-in\nmodules which python library provides\nwhich you don't need to import\nexplicitly\nbut there are certain user defined\nmodules which you create on yourself for\nyour own custom development for your own\ncustom programming\nso built-in modules are predefined\nmodules and are part of this python\nstandard library for example random date\ntime sys so we will take a look at these\nexamples also\nand of course the user defined modules\nwhich is the primary objective of this\nsession where we're going to show you\nhow do you create your own defined\nmodules and then import them\nso the user creates the user-defined\nmodules to ease complex tasks in a\nproject so you program the complex piece\nof the code in a common module and give\nit to everyone\nyou can define your own functions and\nclasses\nnow what are the different ways there\nare\nfive different ways you can import\nmodules so you can just say import\nmodule name and all the\nuh classes and functions within that\nmodule will get imported\nyou can give an alias so basically\ngiving an alias makes it simple\nand you can refer that alias throughout\nyour code\nthen\nif you want to import anything specific\nfrom the entire module you don't want to\nimport\nall the functions and classes then you\ncan just import the specific functions\nand classes and give their name then\nfourth is from module you want to import\nany address as an alias you can import\nand give an alias to the specific\nfunction name or the class name\nand then of course similar to the first\nsyntax you can module all everything so\nfirst and the last syntax are almost\nhaving the same meaning to module to\nimport everything in your module okay so\nwith this background uh\nlet's first\ntake a look at the\npython file so we have what we have done\nis we have created a\nmodule calculations dot py so just\nplease\nfocus on the part where\nthe name of the file is calculations\nand in this\npython file dot py file we have created\na couple of functions uh and the\nrelevant logic related to those\nfunctions\nso very simple functions like addition\nadd you pass two variables and you send\nthe result\nadd the variables and send it back\nbasically we are overriding uh the\npython internal operator add in our\npython module and we will be invoking\nthis one so we'll show you how to invoke\nthen you will have i have written\nmultiplication\ndivision\nremainder so you do you pass two\nvariables divide them and find the\nremainder\nthen now a custom function where i am\nadding 10 to both the variables which\nare being passed to this function and\nreturning the result\nthen there is a function which checks\nwhether the number is a prime and if it\nis not a prime number you will get this\noutput and if it is you will get a is a\nprime number\nokay\nand then another function which says\ncheck anagram\nso we will just sort the two strings\nwhich we will send and check uh both are\nequal or not if both are equal then the\nstrings are anagrams otherwise they are\nnot\nso these are the set of functions which\nyou have written now we will see how\nwill we use them in our code\nnow first syntax which i am writing is\nimport calculations so this is the name\nof my dot py file which is residing in\nthe same folder where i am writing this\npiece of code\nand now\nif you see in my\ndot py i have a variable y whose value\nis six so i'm just\nusing that value and running it and\nprinting it i'm just gonna\nuh show you how explicitly i'm invoking\nthe functions\nin the calculations class in the\ncalculations dot p by five okay\nnow\nlet's invoke\nanother function remainder passing 140\nand then i should get 20 as an\noutput\nokay\nso this has gone back and executed this\nparticular function\nnow what i'm going to do is\nanother example of my addition i'm\nsaying calculations.add\ni'm going to initialize and pass two\nvariables\nand my expected output is 35\nokay\nso it has gone and executed\nthis function\nnow i'm gonna show you another syntax of\nimporting so from calculations i'm just\nimporting the add function\nso i'll\nask for user input to enter for one and\ntwo numbers and then i'm just going to\nadd it\ntwo and five so i got my output is seven\nnow\nthe difference to be noted over here is\nthat in the previous\nuh syntax i was making a call like\ncalculations.add\nbut now i don't need to make a\ncalculations dot add syntax\nuh invocation i just need to say import\nadd\nand i just need to use the add function\nthat's all\nnow\nlet's use another\nsyntax to import\nmodules so i'm using import calculations\nas cal so all the modules are imported\nbut the alias uses\ncal and\nsimilarly like the previous example i am\ngoing to take two inputs\nand print the sum\nnow the difference in this syntax in\nthis syntax is i'm using the alias cal\ndot add\nbut my output should be same\nokay\nsimilarly i can call\nprime\nwhether it's not a prime or prime number\ni can call the check anagram using the\nsame alias\nand i can call the\nremainder function\nokay\nso i hope you have\nnoticed that the difference\nin importing the way of importing the\nmodule makes a lot of difference right\nnow let's take another example of\nimporting some functions or variables\nso i'm gonna explicitly i'm importing my\nvariable y and functions multi-prime and\ncheck anagram explicitly\nand\ni'm gonna print\ny\nokay\nand i'm gonna multiply\ntwo numbers\nso if you see i'm using these aliases\nover here\nokay i'm using these variables directly\nas i've already imported\nnow i'm going to say prime9\nnow it's printing none if you see it's\nbecause of the statements which are not\nexecuted right so that's why you are\nseeing\nnow let's check anagram\nand now\nanother thing to be noted is i'm trying\nto invoke a function remainder which i\nhave not imported over here so let's see\nhow what error python throws okay so\nyeah so python has throws an error that\nname remind remainder is not defined\nbecause i have not imported it over here\nso now\nin order to import reminder what i am\nnow\ndoing different is importing all the\nfunctions\nnow if i use reminder\nit should run\nokay\ni am using divide\nokay cool\nnow\ni am going to show you another function\nwhich is a utility function\ndirectory function\nwhich will show me\nall the functions\nvariables as part of the\npython file add at 10 check anagram\ndivide\nmulti prime remainder y and of course\nthese are some inbuilt packages\nuh which are already there in the python\nfile as part of the python loader but\nthese are the ones which i have created\nso you can actually see the list of all\nthose\nfunctions in one go\nokay\nnow i'm going to show you an example of\ninbuilt\nmodules so this import math math is an\ninbuilt module of python\nand i'm gonna show you\nhow you can see all the relevant\nfunctions within the math module all\nthese are the math module\nfunctions which are available for you\nto use i'm going to show you one or two\nso like\nprint math 2 to the power 8\nand you get the answer 256\nprint math remainder so i'm not invoking\nmy\nmodule function and invoking the math\ninbuilt\nlibrary function remainder\nand the remainder is 0 40 divided by 2\nremainder is 0\nand square root of 81\n9\nthen\nvery important another very interesting\nutilities of date time which you can use\nand you can print today's date and time\nthen another\nutility is random utility\nand\ni am going to create a list l1\nand\nwrite a piece of code\nwhich will choose a random element from\nthis list\nand\njust print it\nokay so if first time it has chosen oppo\nagain if i run it it will choose one\nplus if i again run it it might choose\nsomething else so it will randomly pick\nokay\nokay so with this we have seen that you\ncan create your own utility functions\nimport it write it in a piece of code\ndot py file import it in your code as an\nalias or all the modules and\nuse them or you can use the python\ninbuilt\nuh modules right i hope you all guys had\na great learning session and i look\nforward to connecting with you next time\nthank you\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos turn it up and get certified\nclick here\n",
  "words": [
    "hello",
    "everyone",
    "welcome",
    "session",
    "modules",
    "python",
    "today",
    "going",
    "discuss",
    "topic",
    "important",
    "topic",
    "python",
    "helps",
    "reusability",
    "code",
    "need",
    "rewrite",
    "code",
    "see",
    "nitty",
    "gritties",
    "writing",
    "modules",
    "python",
    "us",
    "today",
    "going",
    "discuss",
    "python",
    "modules",
    "need",
    "use",
    "different",
    "types",
    "python",
    "modules",
    "differently",
    "different",
    "ways",
    "import",
    "modules",
    "code",
    "python",
    "module",
    "nothing",
    "simple",
    "python",
    "file",
    "dot",
    "py",
    "extension",
    "including",
    "statements",
    "definitions",
    "basically",
    "need",
    "prepare",
    "module",
    "file",
    "functions",
    "want",
    "import",
    "regular",
    "python",
    "code",
    "across",
    "modules",
    "contains",
    "codes",
    "reuse",
    "several",
    "programs",
    "like",
    "saying",
    "write",
    "piece",
    "code",
    "like",
    "common",
    "utility",
    "methods",
    "calculation",
    "methods",
    "rounding",
    "addition",
    "subtractions",
    "common",
    "business",
    "rules",
    "reused",
    "across",
    "project",
    "keep",
    "one",
    "place",
    "helps",
    "scenario",
    "large",
    "team",
    "different",
    "set",
    "developers",
    "working",
    "different",
    "different",
    "modules",
    "different",
    "specifications",
    "one",
    "single",
    "utility",
    "module",
    "file",
    "dot",
    "py",
    "file",
    "contains",
    "common",
    "reusable",
    "functions",
    "every",
    "individual",
    "developer",
    "go",
    "change",
    "set",
    "administrators",
    "senior",
    "developers",
    "maintain",
    "pass",
    "team",
    "example",
    "file",
    "containing",
    "python",
    "code",
    "demo",
    "dot",
    "py",
    "called",
    "module",
    "module",
    "name",
    "would",
    "demo",
    "need",
    "take",
    "care",
    "whatever",
    "name",
    "file",
    "get",
    "imported",
    "python",
    "code",
    "see",
    "certain",
    "examples",
    "jupyter",
    "notebook",
    "need",
    "use",
    "reiterated",
    "provides",
    "flexibility",
    "organize",
    "code",
    "logical",
    "way",
    "enables",
    "reusability",
    "important",
    "factor",
    "one",
    "course",
    "organize",
    "code",
    "keep",
    "reusable",
    "code",
    "one",
    "place",
    "keep",
    "modular",
    "approach",
    "also",
    "reusable",
    "developers",
    "go",
    "rewrite",
    "code",
    "easy",
    "maintain",
    "helps",
    "debugging",
    "code",
    "easily",
    "know",
    "error",
    "coming",
    "issue",
    "coming",
    "uh",
    "one",
    "modules",
    "imported",
    "grind",
    "lying",
    "common",
    "file",
    "becomes",
    "easy",
    "debug",
    "go",
    "check",
    "particular",
    "function",
    "need",
    "go",
    "check",
    "every",
    "piece",
    "code",
    "two",
    "types",
    "python",
    "modules",
    "definitely",
    "modules",
    "python",
    "library",
    "provides",
    "need",
    "import",
    "explicitly",
    "certain",
    "user",
    "defined",
    "modules",
    "create",
    "custom",
    "development",
    "custom",
    "programming",
    "modules",
    "predefined",
    "modules",
    "part",
    "python",
    "standard",
    "library",
    "example",
    "random",
    "date",
    "time",
    "sys",
    "take",
    "look",
    "examples",
    "also",
    "course",
    "user",
    "defined",
    "modules",
    "primary",
    "objective",
    "session",
    "going",
    "show",
    "create",
    "defined",
    "modules",
    "import",
    "user",
    "creates",
    "modules",
    "ease",
    "complex",
    "tasks",
    "project",
    "program",
    "complex",
    "piece",
    "code",
    "common",
    "module",
    "give",
    "everyone",
    "define",
    "functions",
    "classes",
    "different",
    "ways",
    "five",
    "different",
    "ways",
    "import",
    "modules",
    "say",
    "import",
    "module",
    "name",
    "uh",
    "classes",
    "functions",
    "within",
    "module",
    "get",
    "imported",
    "give",
    "alias",
    "basically",
    "giving",
    "alias",
    "makes",
    "simple",
    "refer",
    "alias",
    "throughout",
    "code",
    "want",
    "import",
    "anything",
    "specific",
    "entire",
    "module",
    "want",
    "import",
    "functions",
    "classes",
    "import",
    "specific",
    "functions",
    "classes",
    "give",
    "name",
    "fourth",
    "module",
    "want",
    "import",
    "address",
    "alias",
    "import",
    "give",
    "alias",
    "specific",
    "function",
    "name",
    "class",
    "name",
    "course",
    "similar",
    "first",
    "syntax",
    "module",
    "everything",
    "first",
    "last",
    "syntax",
    "almost",
    "meaning",
    "module",
    "import",
    "everything",
    "module",
    "okay",
    "background",
    "uh",
    "let",
    "first",
    "take",
    "look",
    "python",
    "file",
    "done",
    "created",
    "module",
    "calculations",
    "dot",
    "py",
    "please",
    "focus",
    "part",
    "name",
    "file",
    "calculations",
    "python",
    "file",
    "dot",
    "py",
    "file",
    "created",
    "couple",
    "functions",
    "uh",
    "relevant",
    "logic",
    "related",
    "functions",
    "simple",
    "functions",
    "like",
    "addition",
    "add",
    "pass",
    "two",
    "variables",
    "send",
    "result",
    "add",
    "variables",
    "send",
    "back",
    "basically",
    "overriding",
    "uh",
    "python",
    "internal",
    "operator",
    "add",
    "python",
    "module",
    "invoking",
    "one",
    "show",
    "invoke",
    "written",
    "multiplication",
    "division",
    "remainder",
    "pass",
    "two",
    "variables",
    "divide",
    "find",
    "remainder",
    "custom",
    "function",
    "adding",
    "10",
    "variables",
    "passed",
    "function",
    "returning",
    "result",
    "function",
    "checks",
    "whether",
    "number",
    "prime",
    "prime",
    "number",
    "get",
    "output",
    "get",
    "prime",
    "number",
    "okay",
    "another",
    "function",
    "says",
    "check",
    "anagram",
    "sort",
    "two",
    "strings",
    "send",
    "check",
    "uh",
    "equal",
    "equal",
    "strings",
    "anagrams",
    "otherwise",
    "set",
    "functions",
    "written",
    "see",
    "use",
    "code",
    "first",
    "syntax",
    "writing",
    "import",
    "calculations",
    "name",
    "dot",
    "py",
    "file",
    "residing",
    "folder",
    "writing",
    "piece",
    "code",
    "see",
    "dot",
    "py",
    "variable",
    "whose",
    "value",
    "six",
    "using",
    "value",
    "running",
    "printing",
    "gon",
    "na",
    "uh",
    "show",
    "explicitly",
    "invoking",
    "functions",
    "calculations",
    "class",
    "calculations",
    "dot",
    "p",
    "five",
    "okay",
    "let",
    "invoke",
    "another",
    "function",
    "remainder",
    "passing",
    "140",
    "get",
    "20",
    "output",
    "okay",
    "gone",
    "back",
    "executed",
    "particular",
    "function",
    "going",
    "another",
    "example",
    "addition",
    "saying",
    "going",
    "initialize",
    "pass",
    "two",
    "variables",
    "expected",
    "output",
    "35",
    "okay",
    "gone",
    "executed",
    "function",
    "gon",
    "na",
    "show",
    "another",
    "syntax",
    "importing",
    "calculations",
    "importing",
    "add",
    "function",
    "ask",
    "user",
    "input",
    "enter",
    "one",
    "two",
    "numbers",
    "going",
    "add",
    "two",
    "five",
    "got",
    "output",
    "seven",
    "difference",
    "noted",
    "previous",
    "uh",
    "syntax",
    "making",
    "call",
    "like",
    "need",
    "make",
    "calculations",
    "dot",
    "add",
    "syntax",
    "uh",
    "invocation",
    "need",
    "say",
    "import",
    "add",
    "need",
    "use",
    "add",
    "function",
    "let",
    "use",
    "another",
    "syntax",
    "import",
    "modules",
    "using",
    "import",
    "calculations",
    "cal",
    "modules",
    "imported",
    "alias",
    "uses",
    "cal",
    "similarly",
    "like",
    "previous",
    "example",
    "going",
    "take",
    "two",
    "inputs",
    "print",
    "sum",
    "difference",
    "syntax",
    "syntax",
    "using",
    "alias",
    "cal",
    "dot",
    "add",
    "output",
    "okay",
    "similarly",
    "call",
    "prime",
    "whether",
    "prime",
    "prime",
    "number",
    "call",
    "check",
    "anagram",
    "using",
    "alias",
    "call",
    "remainder",
    "function",
    "okay",
    "hope",
    "noticed",
    "difference",
    "importing",
    "way",
    "importing",
    "module",
    "makes",
    "lot",
    "difference",
    "right",
    "let",
    "take",
    "another",
    "example",
    "importing",
    "functions",
    "variables",
    "gon",
    "na",
    "explicitly",
    "importing",
    "variable",
    "functions",
    "check",
    "anagram",
    "explicitly",
    "gon",
    "na",
    "print",
    "okay",
    "gon",
    "na",
    "multiply",
    "two",
    "numbers",
    "see",
    "using",
    "aliases",
    "okay",
    "using",
    "variables",
    "directly",
    "already",
    "imported",
    "going",
    "say",
    "prime9",
    "printing",
    "none",
    "see",
    "statements",
    "executed",
    "right",
    "seeing",
    "let",
    "check",
    "anagram",
    "another",
    "thing",
    "noted",
    "trying",
    "invoke",
    "function",
    "remainder",
    "imported",
    "let",
    "see",
    "error",
    "python",
    "throws",
    "okay",
    "yeah",
    "python",
    "throws",
    "error",
    "name",
    "remind",
    "remainder",
    "defined",
    "imported",
    "order",
    "import",
    "reminder",
    "different",
    "importing",
    "functions",
    "use",
    "reminder",
    "run",
    "okay",
    "using",
    "divide",
    "okay",
    "cool",
    "going",
    "show",
    "another",
    "function",
    "utility",
    "function",
    "directory",
    "function",
    "show",
    "functions",
    "variables",
    "part",
    "python",
    "file",
    "add",
    "10",
    "check",
    "anagram",
    "divide",
    "multi",
    "prime",
    "remainder",
    "course",
    "inbuilt",
    "packages",
    "uh",
    "already",
    "python",
    "file",
    "part",
    "python",
    "loader",
    "ones",
    "created",
    "actually",
    "see",
    "list",
    "functions",
    "one",
    "go",
    "okay",
    "going",
    "show",
    "example",
    "inbuilt",
    "modules",
    "import",
    "math",
    "math",
    "inbuilt",
    "module",
    "python",
    "gon",
    "na",
    "show",
    "see",
    "relevant",
    "functions",
    "within",
    "math",
    "module",
    "math",
    "module",
    "functions",
    "available",
    "use",
    "going",
    "show",
    "one",
    "two",
    "like",
    "print",
    "math",
    "2",
    "power",
    "8",
    "get",
    "answer",
    "256",
    "print",
    "math",
    "remainder",
    "invoking",
    "module",
    "function",
    "invoking",
    "math",
    "inbuilt",
    "library",
    "function",
    "remainder",
    "remainder",
    "0",
    "40",
    "divided",
    "2",
    "remainder",
    "0",
    "square",
    "root",
    "81",
    "9",
    "important",
    "another",
    "interesting",
    "utilities",
    "date",
    "time",
    "use",
    "print",
    "today",
    "date",
    "time",
    "another",
    "utility",
    "random",
    "utility",
    "going",
    "create",
    "list",
    "l1",
    "write",
    "piece",
    "code",
    "choose",
    "random",
    "element",
    "list",
    "print",
    "okay",
    "first",
    "time",
    "chosen",
    "oppo",
    "run",
    "choose",
    "one",
    "plus",
    "run",
    "might",
    "choose",
    "something",
    "else",
    "randomly",
    "pick",
    "okay",
    "okay",
    "seen",
    "create",
    "utility",
    "functions",
    "import",
    "write",
    "piece",
    "code",
    "dot",
    "py",
    "file",
    "import",
    "code",
    "alias",
    "modules",
    "use",
    "use",
    "python",
    "inbuilt",
    "uh",
    "modules",
    "right",
    "hope",
    "guys",
    "great",
    "learning",
    "session",
    "look",
    "forward",
    "connecting",
    "next",
    "time",
    "thank",
    "hi",
    "like",
    "video",
    "subscribe",
    "simply",
    "learn",
    "youtube",
    "channel",
    "click",
    "watch",
    "similar",
    "videos",
    "turn",
    "get",
    "certified",
    "click"
  ],
  "keywords": [
    "session",
    "modules",
    "python",
    "today",
    "going",
    "important",
    "helps",
    "code",
    "need",
    "see",
    "writing",
    "use",
    "different",
    "ways",
    "import",
    "module",
    "simple",
    "file",
    "dot",
    "py",
    "basically",
    "functions",
    "want",
    "like",
    "write",
    "piece",
    "common",
    "utility",
    "addition",
    "keep",
    "one",
    "set",
    "developers",
    "reusable",
    "go",
    "pass",
    "example",
    "name",
    "take",
    "get",
    "imported",
    "course",
    "error",
    "uh",
    "check",
    "function",
    "two",
    "library",
    "explicitly",
    "user",
    "defined",
    "create",
    "custom",
    "part",
    "random",
    "date",
    "time",
    "look",
    "show",
    "give",
    "classes",
    "five",
    "say",
    "alias",
    "specific",
    "first",
    "syntax",
    "okay",
    "let",
    "created",
    "calculations",
    "add",
    "variables",
    "send",
    "invoking",
    "invoke",
    "remainder",
    "divide",
    "number",
    "prime",
    "output",
    "another",
    "anagram",
    "using",
    "gon",
    "na",
    "executed",
    "importing",
    "difference",
    "call",
    "cal",
    "print",
    "right",
    "run",
    "inbuilt",
    "list",
    "math",
    "choose"
  ]
}