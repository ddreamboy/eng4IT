{
  "text": "hey nick what's with the uh green box\naround your head\nuh what green box uh the one\nthat's currently around your head\nthey're on to me just kidding\nif you want to be able to detect just\nabout anything using tensorflow object\ndetection\nthis is the course for you what's\nhappening guys my name is nicholas\nrenate and in this video we're going to\nbe going\nthrough the full blown object detection\ncourse\nso whatever object detection use case\nthat you wanted to tackle you'll be able\nto do it after going through this course\nnow we're specifically going to be going\nthrough four different use cases so\nyou'll be able to repurpose the code\nthat we've actually got to be able to\nspecifically detect\nthe exact objects that you want to use\nand it's all done\nusing open source tools mainly python\nand tensorflow object detection\nnow again this could be used in a whole\ndifferent range of use cases so say for\nexample you want to detect\na person's face or if you wanted to do\nsign language detection or face mask\ndetection\nthis is the exact same code that you can\nuse\nnow the nice thing about this as well is\nthat we'll go through all of the setup\nall of the installation\nwill show training will also show\nexporting which is a really big part of\nbeing able to build object detection\nmodels so we'll be able to export this\nto\nthe tensorflow.js format as well as tf\nlite so if you wanted to run it\nas part of a web app or if you wanted to\neven use it on a raspberry pi you could\nand we might just do that in one of our\nprojects towards the end of the tutorial\nso without further ado ready to do it\nlet's get to it\nalrighty what's happening guys welcome\nto the\nobject detection course now this course\nis intended to take you from being a\ncomplete beginner when it comes to\nobject detection\nall the way to being fully proficient\nand acting as a practitioner\nnow again we're going to take this step\nby step so you'll be able to walk\nthrough at your own pace and be able to\nlearn\nand leverage the technologies so let's\ntake a look as to what our actual game\nplan is\nfor this now there's going to be a bunch\nof stuff that we're going to go through\nso ideally this course is going to be\nfully comprehensive so you're going to\nneed\nevery or you're going to have everything\nthat you need to be able to get up\nand running so there's eight key parts\nthat we're actually going to go through\nand each of these key parts are pretty\nimportant when it comes to building\nobject detection models\nso first up what we're going to do is\nwe're going to install and\nset up everything that we need to be\nable to perform object detection\non our local machine or pc now in this\ncase we're going to be using\nthe tensorflow object detection api\nand we're going to be doing that mainly\nusing python\nnow the reason that we're using the\ntensorflow object detection api\nis that it has a whole bunch of\nadditional capabilities that make it a\nwhole heap\neasier to be able to build object\ndetection models so if you've ever\nlooked at a real-time object detection\narchitecture or model before there is a\nbunch of stuff that you actually need to\nbuild in order to actually get one of\nthese up and running\nthere's pre-processing steps there's\npost-processing steps there's\nvisualization utilities now again if\nyou're not familiar with any of these\nterms\ndon't fret we're actually going to take\nit step by step and walk through each of\nthose components\njust know that building this from\nscratch takes a lot of effort so using\ntensorflow object detection\nspeeds this up a whole heap so what\nwe're going to do is we're going to\ninstall and set up the tensorflow object\ndetection api\nthen what we're going to do is we're\ngoing to collect images and label them\nso in order to do that we're going to be\nleveraging our webcam so we'll leverage\nour webcam\nto be able to collect a whole bunch of\nimages to be able to label our objects\nnow you're probably thinking nick what\nthe hell is labeling well\nideally what you want to do when you're\nbuilding an object detection model is\nyou want to be able to label or\nidentify the objects that you want to\ntry to detect so say for example we were\nbuilding a\nface detection model well i might use my\nwebcam to take photos of myself\nand then draw a label around my face so\nthat\nwhat i'll then do is i'll take that\ntrained image or that\nimage which has been labeled and i'll\nleverage that in my trained object\ndetection model to be able to detect\nthat\nin the future that brings us to our next\nstep\ntraining the model so again we're going\nto be using the tensorflow object\ndetection api\nand we're going to be passing through\nboth our images\nand our labels or our annotations to be\nable to train\nthis model now there's a whole bunch of\ndifferent types of models that you can\nactually leverage there and there's a\nbunch available through the tensorflow\nobject detection api\nso we're going to be using a mobile net\narchitecture but again i'll talk about\nthat a little bit more once we get to it\nso we're going to be training that model\ninitially and we'll be able to leverage\nthat throughout the process\nnow if you're not sure what training is\nso when it comes to\ntraditional programming you typically\nhave data\nplus rules so think of your data as the\nfeed that you're effectively getting and\nthen you pass it through some rules or\nsome logic\nto be able to get answers or an outcome\nright so say for example you get\nso somebody sets a color variable for\nexample so the color is red\nyou might then take that variable and go\nif the color is red\nthen do x if the color is not red then\ndo y\nso that if statement think of those as\nthose rules and\neffectively what you're doing in that\naction is your intended consequence\nnow when we actually train a deep\nlearning model or\nobject detection model in this case\nwe're not actually\nspecifying those rules explicitly up\nfront this is the beauty of machine\nlearning and deep learning\nso rather than defining those rules and\ndefining what to look for when detecting\na face\nwe're actually going to do it the other\nway around and this is normal when it\ncomes to machine learning we're going to\ngive it data\nplus answers so our data is our image\nand our answers are our labels or our\nannotations\nand we're going to train our object\ndetection model to learn the rules to be\nable to detect\nfaces so machine learning sort of flips\ntraditional programming on its head so\nrather than starting off with\ndata and rules and getting answers we're\nstarting off with data and answers to\nget rules so it's\na slightly different paradigm but it\nideally gives you a really cool\noutput so once we've trained our model\nwhat we're then going to do is we're\nthen going to start\ndetecting some objects now we're going\nto do this in two different ways so\nwe're actually going to detect an\nobject using an image so say for example\nyou had an image and you wanted to be\nable to detect different objects in that\nimage\nwe're going to be able to do that so\nthis is normally known as static\ndetection so you're going to be\ngrabbing a particular object from over\nthere or over there and being able to\ngrab that image pass it through to our\nmodel and detect an object\nbut then where i think the real good bit\nis is being able to detect objects in\nreal time\nso we'll be able to take our webcam face\nit toward it towards a particular\nframe or a particular thing and we'll\nactually be able to detect objects\nusing a real-time feed now the beauty of\nthis and particularly the\nbeauty of the model that we picked in\nstep 3 which is a mobile net model\nis that it's going to be super fast so\nwe'll be able to detect objects in real\ntime when we've got a computer or a gpu\npowered machine\nand we'll be able to detect those\nobjects in real time so we can do a lot\nwith that because it is fast\nnow normally there's a trade-off between\nspeed and accuracy but again we'll talk\nabout that in performance tuning\nall right so in detecting objects we're\ngoing to detect stuff with an image and\nwe're also going to\ntext stuff using a real-time video feed\nthen what we're going to do is we're\ngoing to learn how to freeze\nand convert our model so whenever you're\nbuilding models ideally what you want to\nbe able to do\nis save down that model and maybe give\nit to somebody else so\nif you're part of a software engineering\nteam and you're the data scientist\nwhat you might want to do is you might\nwant to export your train detection\nmodel pass it through to your software\ndevelopment engineers or your machine\nlearning engineers to then be able to go\nand deploy that model\nthis is where freezing and conversion\ncomes into play now again with\ntensorflow object detection\nyou're able to freeze down your model\nthink of phrasing as\nsaving it and then if you wanted to you\ncan convert it into different formats\nin this course we're going to cover how\nto convert it into a tensorflow.js\nformat\nand we're also going to cover how to\nconvert it to tf lite\nso those tend to be the two most popular\nformats that people leverage when\nusing the tensorflow object detection\napi we're going to cover them both\nnow i normally get a lot of questions on\nthis so performance tuning so we're now\nup to step six so we're going to be\ncovering install collecting images and\nlabeling training detecting\nfreezing and conversion step six is a\nlot of the time where people come\nundone so being able to performance tune\nyour model is so so important so say for\nexample you use your webcam you go to\ndetect some stuff and it sucks it's\nreally really crappy and it's not\nactually detecting\nthe objects that you wanted to detect\nwell what are the steps that you\nactually go through to be able to\nimprove the performance of that model to\nthen be able to accurately and\neffectively detect those objects so\nwe're going to cover what to do\nwhen things go wrong and how to actually\nperform and stream your models and\nimprove that performance so that you can\nget back on track\nall right so that's step six then what\nwe're going to do is we're going to\nlearn how to train\non collab in a cloud instance now the\nbeauty of this\nand everything that i cover in this\ncourse is that all of the code\nand the full walkthrough as well as a\nguide is going to be available on github\nso\nif you go to the github repositories\nthat i'll show you later you'll actually\nsee that there's a written guide in\nterms of how to do this as well so i've\nwritten\na really big readme and a step-by-step\nwalkthrough to actually get this up and\nrunning\nas well as a couple of extra bonuses to\nmake this a little bit easier on you\nnow in a step eight this is where it all\ncomes together so we're going to be\ndoing\nthree different projects now and again\nthese are projects that i've really\nwanted to do for quite some time and\nwe're going to be doing them in real\ntime\nso the first project is actually going\nto be one that i've always wanted to do\nwe're actually going to be using this\nmicroscope which is a usb microscope\nto be able to detect defects in\nparticular or small pieces so in this\ncase\ni've got a couple of leds here that i\npulled out of my raspberry pi kit so in\nthis case it's really really small\nlet's see if we can see that you can see\nthat right there\nso it's a really small led and you can\nsee that this one there's no issues with\nit right\nbut then this one i've obviously got a\nbent pin so if i bring that a little bit\ncloser\nyou'll see that this particular pin is\nbent right\nwe're actually going to train an object\ndetection model to leverage this\nmicroscope to be able to detect\nthose bent pins now this has a whole\nwide range of use cases so say for\nexample you had\na pcb so printed circle board and you\nwanted to be able to detect\ndefects in that say for example you\nwanted to be able to look\nat a petri dish and be able to detect\ndifferent things within a particular\nmicroscope slide\nto do that as well so that'll be project\nnumber one\nproject number two is going to be able\nto detect directions so we're going to\ntrain a model\nto be able to detect our hand pointing\nup left\nright and down and then we're going to\ntake that model convert it to\ntensorflow.js and actually\nintegrate it into a web app so say for\nexample you wanted to build up on that\nand build a real-time game and pass\nthrough detections using your hand or\ndid using object detection\nyou'd be able to do that and then our\nthird and final project is actually\ngoing to be\nraspberry pi object detection so again\nthis one tends to be really really\npopular\ni have seen a bit of a performance drop\noff when you do pass it to raspberry pi\nbut we'll take\na look at that so we're going to be\nideally trying to be able to detect\nsentiment from our face using our\nraspberry pi so again i'm going to show\nyou how to do all that\nalrighty so there's eight steps we're\ngoing to go through it all and again\ntake this step by step so ideally what\ni'd recommend is\ngo through each part take a break review\nwhat you've actually gone and done\nmake sure it's all working before going\non to the next step take lots of notes\nand again if you've got any questions\nhit me up in the comments below and join\nthe discord server that's probably my\nbest tip as well\nso i'm going to include a link inside of\nthe description as well as in the pinned\ncomment to be able to join\nthe discord server so again a lot of the\npeople following the tutorials that i\nput out on youtube are\non that discord server as well as yours\ntruly so you'll be able to jump on in\nthere\nand get some help if you need it but\ni'll also show you how to sort of debug\nand walk through this tutorial\nso that's our game plan those eight\nsteps now without further ado\nlet's kick things off and let's step\ninto step one\ninstall and set up alrighty install and\nsetup\nso the first thing that i'm going to\nsort of show you is where to get the\ncode for these tutorials so in this case\ni've got three sets of code one is more\nimportant than the others but i'll show\nyou\neach of those so i've gone and written\nthree different or i've gone and built\nthree different sets of github\nrepositories that you're going to be\nable to pick up and leverage\nto get up and running with object\ndetection a whole heap plus them\nand if you've done any of my previous\nobject detection tutorials let's say for\nexample the face mask detector or the\nsign language detector\nwhat i've actually done is i've actually\nimproved that code base i've actually\nmade this flexible enough to work on a\nwindows machine\na linux machine work on colab a whole\nbunch of different environments so it\nactually detects what environment you're\ntrying to use\nand runs the appropriate code sorts out\nthe file paths\nso on so there's three different sets of\ncode so there's the tensorflow object\ndetection course code\nthere's the tensorflow object detection\napp so whenever i say tfod that's just\ntensorflow object detection\nthen there's the tensorflow object\ndetection raspberry pi code so you're\ngonna get\nthree different sets of code now in\norder to get to these\nyou just need to go to https colon\nforward slash forward slash github.com\nforward slash knick knock knack forward\nslash tfod course forward slash chair\nphone d\napp and forward slash tfod rpi so if we\nactually take a look at those so this is\nthe course code\nand again you can see that we've\nactually got our baseline image\nso here you can see that we're detecting\nlive long and thumbs up\nnow again i'm actually we're actually\ngoing to build this course oh we're\nactually going to build\nthis object detection model first up so\nit's going to be a gesture based model\nand the nice thing about each of these\nrepositories is i've actually written\nsteps um or written steps rather than\nmade a video tutorial on top of this\nso that if you prefer just walking\nthrough a step-by-step guide you can\njust walk through each one of these to\nbe able to build up these models as well\nand i've done this\nfor the tensorflow object detection\ncourse code which is the main\ntraining code i've also done it for the\napp code so it shows you how to deploy\nthe app\nand i've also done it for the raspberry\npi code so it shows you what you need to\ninstall what you need to clone to be\nable to get this\nup and running so again all of this code\nis going to be made available so if you\ncheck\nthe links in the description below\nyou'll be able to pick all this up\nyou'll be able to leverage it to your\nheart's content\nand be able to build a whole bunch of\ndifferent object detection models\nso those are the three sets of code that\nwe're going to be able to leverage so\nyou'll see once we kick off or once we\nactually start\nthe first step that we're actually going\nto go through is clone this code\nand again we'll just be using git cloned\nto be able to do that now the next thing\nthat we're going to be doing is we're\ngoing to be\ncreating a virtual environment so again\ni'm going to\nexplain a little bit of the code before\nwe actually go ahead and do it but i\ndon't want to\nspend too much time on slides so think\nof a virtual environment as\na separate room in your house so it's\nlike creating a separate room in your\nhouse\nnow the reason that we're actually using\na virtual environment is that it\nisolates all of the different python and\nall of the different\nlibrary dependencies and different\nthings that you're actually going to\nneed\nfor your tensorflow object detection\nmodel now this makes sure that it\ndoesn't\nconflict with all of the different\nlibraries and dependencies that you've\nalready got installed\ninside of your python or jupyter\nenvironment\nwhat we're going to do is we're going to\ncreate a new virtual environment so\nthink of it as creating a new room in\nyour house and we're going to\ninstall all of our object detection\nstuff inside of there so it doesn't mess\naround with any of the other things\nand it ensures that you get all of the\nmain dependencies that you need and you\ndon't get any dependency conflicts\nnow in order to do that we're going to\nbe using a library called\nvenv so this allows us to create a new\npython environment\nand again we can name it whatever i want\nor whatever you want then what we're\ngoing to do is we're going to activate\nit i'll talk about a little bit about\nthat later\nwe'll upgrade our pip dependency so this\nmakes sure that we\nhave the latest resolvers and all of the\ngood stuff that we need\nand then we're going to be installing\nipi kernel so ipi kernel is a really\nimportant dependency because it allows\nyou\nto associate your virtual environment\nwith your jupyter notebook so\nideally so we're going to be working\ninside of jupyter notebooks now we won't\ncover\ninstalling that but again if you want to\nsee how to install that from scratch\ni'll link\nto the other installation video where we\ndo the\nanaconda install and the jupyter\nnotebook install but more often than not\nif you've done any data science or\nobject detection tutorials before you'll\nhave\njupyter notebooks installed so this is\ngoing to cover all the stuff that you\nneed to go from\njupyter notebooks a little bit further\nand be able to build your object\ndetection models\nall right creating a virtual environment\nso think of it as a separate room inside\nof your house where you're going to\ninstall\nall of your object detection stuff so\nthat it doesn't screw up everything else\nmind it's also like\nlocking yourself in a room and getting\nstuff done right keeping everything in\none place\nnow there's a bunch of dependencies that\nyou need to install whenever you're\nworking with tensorflow now the\nfirst and foremost one is going to be\nthe visual c plus build tools i'll show\nyou where to install that so it's really\na just download and install\nnothing too special there so tensorflow\nneeds visual c plus plus build tools in\norder to run\nthat's pretty straightforward now again\ni'll link to the other insole tutorial\nwhere you can pick that up so that one's\npretty straightforward\nwhere most people tend to get hung up is\ninstalling these two though\ncuda and c-u-d-n-n so cuda and kuden\ngive you gpu based acceleration when\ntraining your tensorflow object\ndetection model so\nthe reason that you use a gpu is that it\nis exponentially faster to train an\nobject detection model using a gpu\nversus just using your raw cpu and your\nraw memory\nnow if you don't have a gpu don't worry\nabout it you can still go through this\ntutorial it'll just take a little bit\nlonger to train your model\nnow if you do have a gpu and you've gone\nthrough an object detection tutorial\nbefore and it wasn't actually activating\nor it wasn't actually being\nutilized i'll show you how to check that\nthen what it might have actually been\nparticularly if you're using tensorflow\nis that you might not have had the right\ncuda and kuden\ninstallations available but i'll show\nyou how to actually see\nwhether or not or how to actually find\nan appropriate combination\nnow the reason that i'm talking about\nthis is because there's consistently\ngoing to be new versions of tensorflow\ncoming out\nso you might need to update your cuda\nversion or update your cd\nand then version in order to be\nresponsive to that actual change so i'll\nshow you where to do\nboth of those or how to detect both of\nthose\nand let's actually take a look at that\nso in terms of visual studio so what you\njust need to do is go to visual studio\ncommunity download visual studio so it's\ngoing to download\neverything that you need and then\nideally what you want to do is just run\nthis install so this is going to install\nthese c plus build tools now again if\nyou want a full walkthrough so really\nit's just a matter of downloading this\nand installing that so it doesn't need a\nwhole bunch of stuff so i'm going to\ncancel that because i've already got it\ninstalled\nso you just need to download that\ninstall that and that's going to give\nyou your c plus plus build tools but\nagain if you want to see a full\nwalkthrough on how to install that i'll\ninclude a link to that as well\nnow the next thing which is more\nimportant is cuda and cu dnn\nso this only applies if you've got a gpu\nand you want to use gpu accelerated\ntraining now\ni'm not going to do this first up\nbecause i'm going to show you how to\ncheck\nyour tensorflow versions and then map to\nthe appropriate cuda and cud\nand then libraries now the reason that i\nsay this is if you actually go to this\nlink so tensorflow.org\nforward slash install forward slash\nsource also this one down here\nbut again links will be available in the\ndescription if you actually scroll\nall the way to the bottom it actually\ngives you the appropriate versions of\ntensorflow\nand cuda and cud and then to use in this\ncase this is just cpu so again\nyou can run this full object detection\ntutorial on your computer even if you\ndon't have a gpu it'll work fine\njust be a little bit slow but more\nimportantly these are the gpu\ncombinations so here if you're using\ntensorflow 2.4.0 you need to be using\npython version 3.6 to 3.8 you need to\nhave the gcc compiler 7.3.1\nbazel 3.1.0 and more importantly kudo\nand cu dnn\nso here we've got so tensorflow 2.4.0\nruns with cuda\n8 and kuda or cd and then 8 and\ncuda 11. so you need to make sure this\nis so important you need to make sure\nthat the tensorflow version\nmatches these two cuda and cu dn\nversions up here\nso if they don't match it'll still run\nit just won't leverage your gpu and\nyou'll probably be sitting there\nthinking hey i've got a gpu wise in this\ntraining faster\nmore often than not it's because of that\nand i'll actually show you how to check\nyour tensorflow version and how to get\nthe appropriate cuda and cu dn versions\nonce we've gone through the initial\nsteps of our insole so this is the linux\nuh linux mac os combo if you go to the\nwindows one over the left hand side here\nso\nin this case the install or the link is\nfor sash install forward slash\nsource underscore windows again same\nstyle of thing and again it talks about\nthe visual c plus plus build tools\nover here so again it just tells you go\nto visual studio\nhit visual studio downloads select\nredistributable\ndownload and so and the reason that i'm\nsort of going through this is i'm sort\nof showing you\nwhere the information that i'm teaching\nyou is coming from so this gives you an\nidea as to where to go to get help but\nagain you can always hit me up in the\ncomments so\nagain you've got to install visual c\nplus plus build tools through the\ndownloads\nnow if you go down further towards the\nbottom\nthese are the combos for windows so\nagain if you're using tens flow\nor if you using tensorflow gpu you need\nto be using tensorflow\ngpu 2.4.0 and cuda 8 and 11 if you're\nusing tensorflow gpu 2.3.1 for example\nthen it's going to fall into this\ncategory\nso you need to be using python 3.5 to\n3.8\num you need to use the microsoft visuals\nvisual c\nplus plus build tools to 2019 so this is\njust talking about that compiler that we\nhad\nright up here so it sounds complicated\nbut really it's just talking about that\nthat visual or this thing that we were\njust downloading um so that's fine so\nyou can use that i would move that\nso microsoft visual studio 2019\nand you need bazel but again that's\nnormally pre-installed and you need so\nin this case if you're using 2.3.0 you\nneed cuda kudun\n7.6 and 10.1 so again there's really\nspecific combinations that you need to\nbe using\nif you want to be training on your gpu\ncool\nall right so that talks a little bit\nabout that but we'll actually\ncome back to that gpu install a little\nbit later so i'll actually show you how\nto check your\ntensorflow version make sure that you've\ngot the right version in your virtual\nenvironment think about it as the other\nroom\ninside of your house and then find the\nmatching cuda and cu dnn versions\nokay now all of that might seem pretty\ncomplicated so you're probably thinking\nall right nick what the hell am i going\nto do if i get errors because\nundoubtedly you will get errors as part\nof this it's always being updated\nthere's always changes\nthere's a couple of things so the first\nthing that i'd recommend is if you're\ngetting errors\nby all means do mention it in the\ncomments below but if you're getting\nerrors during the installation steps or\nwhile you're actually running the\nnotebook\ni've actually put together an error\nguide so if you go\nthrough to the tensorflow object\ndetection course\ngithub repository which is available at\ngithub.com\nforward slash knickknack knack forward\ntfod\ncourse now again this link is going to\nbe available in the description below\ni've actually put together this error\nguide and this is based on\nall the errors all the questions that i\nsaw people were asking me\nas part of the other object detection\ntutorials that i've got\nso you can see here that say for example\nyou get a error which says no module\nnamed\nwhatever that module name is well more\noften than not the solution to that is\nto go on ahead and\ninstall that module so say for example\ni've got actually got an example here\nso if there's no module named typeguard\nwell what you want to do is then go and\ninstall typeguide using pip install\nanother one that's really really common\nis\nthe pi coco tools one so in this case\nlet's say for example you get this area\nhere so let's zoom in on that so you can\nsee it so value error numpy\nand the array size change may indicate\nbinary incompatibility\nexpected 88 from c header got 80 from pi\nobject\nsometimes these errors aren't very\ndescriptive so you probably think of\nwell that's a numpy error but actually\nit's a pi coco tools\nerror now again all of these errors and\nall of this error guide is going to be\navailable\ninside of the github repository and my\ngoal is to ideally be consistently\nupdating this so if there's new errors\nthat pop up or if there's new things\nthat pop up that\nneed a solution i'm going to be\nconsistently posting it in here so i'll\nbe cloning it updating the error guide\nso that you've consistently got another\nplace to turn but again the other place\nthat you can turn if you need support is\nto jump onto the discord\nserver again i'll include a link in the\ndescription below there's a bunch of\npeople that are already on there that\nare awesome they're providing help to\nanybody that's actually going through\nthese tutorials\nokay so that is the next thing that i\nsort of wanted to show you so that's the\nerror guide and where to get help\nif you get stuck okay so that's a lot of\nslides\nnow we want to do is or now what we want\nto do is actually get started with this\nthing and start\nbuilding up our object detection model\nso the first thing that we're going to\ndo\nis as i was saying we're going to start\nup by creating our virtual environment\nnow in this case i've actually got the\nsteps to create the virtual environment\ninside of the tensorflow object\ndetection course code\nwhich you can see down here now the\nfirst step that we\nideally want to do is we want to clone\nthis tensorflow object detection course\nrepository which contains\nour checkpoints which we can get rid of\nthat i don't know why i included that\nit includes our git ignore file our\nimage collection notebook\ntraining it let's zoom in a training and\ndetection notebook\nerror guide which i just showed as well\nas this readme which gives you all of\nthe steps that you need to go through\nso let's go ahead and clone this\nrepository so i'm just going to copy\nthis link\nand go to a new command prompt so in\nthis case i've got a new command prompt\nbecause i'm on windows if you're on a\nmac\nor a linux machine you'd just be opening\nup a terminal and i'm going to do this\nside by side so you can see what we're\ndoing so\ni'm going to create a new folder inside\nof my d drive and inside of my youtube\nfolder and i'm just going to call it\nlet's call it tensorflow object\ndetection\ncool and then what we're going to do is\ngo into that folder so i'll go into cd\nyoutube\ncd tensorflow object detection\nand then what we're going to do is clone\nthat repository as i was saying so we'll\ntype in git\nclone and then that link so again all of\nthose links are going to be available\ninside of the description below let's\njust make this so it's a little bit\neasier to see\nwhat we're doing all right so we've\nwritten git\nclone and then https colon forward\nforward slash github.com\nforward slash nick knock knack forward\nslash tfod course so this is going to\ngive us\nall of that stuff that you saw inside of\ngithub right so it's going to give us\nthe notebooks and a bunch of other stuff\nand it's actually going to clone\ncreate a new folder inside of this\ntensorflow object detector repository or\ninside of our tensorflow object\ndetection folder\nthat we've already got inside of our\nfile explorer\nso if we go ahead and run that that\nshould clone down\nyou can see it's cloning we're receiving\nobjects so again\nthe speed at which this clones is going\nto be dependent on your internet\nmine over here sucks so you can see i'm\ngetting 2.39 megabits per second\nin this case that's now done all right\ncool so we've now\ngot our repository clone so again\neverything that you saw over here\nis now over here locally\nso what we now want to do is start\ncreating our environment so in order to\ndo that as i was saying we're going to\nuse that v\ne and v package which we had over here\nso we're effectively going to go through\nsteps two and three now\nso we're going to create our virtual\nenvironment and then we're going to\nactivate it so think of\nactivating it as actually we've actually\nstepped out of that\nthink of activating it as actually\nstepping into that room so i said\ncreating a virtual environment is like\ncreating a new room in your house\nwell activating it is actually like\nstepping into that room so you're now\ninside of that environment where you're\ngoing to isolate your libraries\nso we're first up going to create a new\nenvironment and we can do that\nusing this command here so python dash m\nv e\nand v tfod now the tf od\ni'm just going to make this a little bit\nbigger the tfod\nat the end of that is actually the name\nof the environment that we're going to\nbe creating so if you wanted to name it\nsomething differently you could\nif you wanted to name it my special\nenvironment you could you could name it\nwhatever you want so in this case i'm\njust going to clear this\nusing cls if you're on a mac it's going\nto be clear\nand we're going to do that so python\ndash m v e and v\ntfod so what i've actually written here\nis we're using python\nwe're passing the m flag and then we're\ngoing to be using v e\nand v which is the dependency that we're\nusing\nand then we're going to be creating a\nnew environment called tfod so a virtual\nenvironment think of it as a new room\nit's going to be called t-f-o-d so if i\nhit\nenter what you should see is that we're\nnow\ncreating a new uh we should have done it\ninside of there let's delete that\nall right that's my error again it's\ngoing to be error stuff breaks this is\nsort of what i want to show you the\nrealities of actually doing this so\nwe're going to delete this\nhere we're actually going to do it\ninside of this tfod course folder so\nwe're going to see it into that\nand we're actually going to repeat that\ncommand here so you saw that when i\ncreated it initially it created it\noutside of there so we're going to go\ninto this folder now and we'll create it\nin here so let's do it again so type\nwill type in\npython m v e and v\ntfod so now it should create inhale\nand the reason that i do this is i just\nlike keeping everything isolated so the\nmain training code i like having it in\none section the app code i like having\nit in a separate section and then the\nraspberry pi code i like keeping that\nseparate as well again you can play\naround with this you can have your\nenvironment elsewhere if you wanted to\ni just keep them isolated so that i can\nsee what is what\nokay so you can now see that we've now\ngot our tensorflow object detection\nrepository\ncreated so if i make this a little bit\nbigger this folder over here is that\ntensorflow object detection virtual\nenvironment\nso if we open this up there's a bunch of\nstuff in here um\nso in this case it's gonna vary\ndepending on whether or not you're doing\nthis on\na mac or whether or not you're doing it\non a windows machine\nif you're doing this on collab or on a\ncloud instance you don't need to create\na virtual environment so those\nare set up so that they all run on their\nown individual pods\nso you don't need to go ahead and do\nthis but if you're doing it locally\nwhich i suggest you do\nbecause that allows you to do real-time\ndetection more on that later\ngo on ahead and create a virtual\nenvironment so the main thing that i\ntend to look for\nis inside of the for windows if i go\ninto libs\nsite packages you can see that we've got\na bunch of different\nuh libraries available there so we've\ngot peer pip\ndash 19.03.dis\ndash info a bunch of different packages\nright now\na really important thing is right so if\ni type in pip list which\nnormally shows me the different python\npackages that i've got available\nyou're going to see a ton here right so\ni've got a whole heap of different\nlibraries available right now now the\nreason that you're seeing\nall of these here but only a couple here\nis because i\nactually haven't activated my\nenvironment yet now this\nhappens so often you need to make sure\nthat you activate your environment in\norder to see\nor in order to see your isolated\npackages that you've actually got\ninstalled\nso what we're going to do now is\nactually activate our environment now\nthe command that you use is going to\ndiffer\ndepending on whether or not you're\nrunning on linux or a mac so if it's on\na linux what you're going to do is run\nsource tfod or whatever the name of your\nvirtual environment is\nforward slash bin forward slash activate\nto be able to activate your environment\nnow if you're on windows i don't know\nwhy they made this different but it is\ndifferent\nit's dot backward slash tfod again or\nthe name of your environment\nbackwards scripts backwards activate\nso in this case i'm on a windows machine\nso we're going to be using\nthe second command here so we are going\nto effectively be going so if i go back\ninto our main folder we'll go\ninto tfod we'll go into scripts\nand we're going to be running activate\nwhich you can see over there so there's\nan activate file and an activate batch\nfile so let's go ahead and run that so\nwe're going to backward slash tfod\nbackward slash scripts backwards\nactivate and what watch what happens\nonce i actually run this right so right\nnow\nwe don't actually have we we don't we're\nnot actually inside of our virtual\nenvironment\nif i run this you can now see that we've\ngot\nthis little thing over here so this\ntells us what virtual environment we're\nactually in so we're now\ninside about tensorflow object detection\nvirtual environment so again we've now\nstepped into our new room\nnow if i type in pip list you'll see\nthat it's way shorter right so this\nactually represents the actual sets of\nlibraries that we actually had available\ninside of there so remember\nall of these packages are here we don't\nhave all of these over here now if you\nwanted to deactivate the environment\nlater on\nall you need to do is type in deactivate\nthis is going to step out of it right so\nyou can see that the tfod is now gone\nin this case we actually want it\nactivated so let's do that tfod\nscripts activate so we're now back in so\nyou can see that\nwe're now there all right we're going to\nclear this clean it up\nthe next thing that we need to do is\ninstall a couple of key dependencies so\nthe first one is we want to upgrade pip\nso this is going to make sure that we\nupdate using the latest resolvers and\nthat we've got the latest pip package\nand in order to do that we just need to\nrun this command here so python dash m\npip install dash\nupgrade pip so let's do that we're going\nto type in python\ndash m what was it again pip install\ndash dash upgrade\npip install dash\ndash upgrade pip\nso this is going to upgrade our pip\ninstaller\nand you can see it's uninstalled 19.0.3\nand it's in tall installed 21.0.1\nand the thing that you'll notice is that\nas you're updating these packages you\ncan see them updated\ninside of our site packages folder as\nwell\nnow this just makes your life a whole\nheap easier because you can actually see\nwhat's being installed in real time now\nwhen it comes to actually installing\ntensorflow\nyou'll actually see that this is really\nuseful because sometimes you need to run\nthrough the install multiple times to\nmake sure they're installed but i've\nactually also got a verification script\nas well to make sure that we've got all\nthe right packages to be able to go on\nahead\nokay so we've now gone and upgraded pip\nso the next thing that we want to do is\ninstall ipi kernel so ipi kernel allows\nus to associate our virtual environment\nwith our jupyter notebook so we're going\nto be mainly working with jupyter\nnotebooks\nif you're installing jupyter notebooks\nfor the first time i'd highly recommend\ngo to anaconda python\nso you can actually install anaconda and\nthis is going to give us i'll give you\na bunch of jupiter notebooks jupyter\nlabs to be able to get this\nup and running if you don't have jupyter\nnotebooks installed already i'd highly\nrecommend just running through this\nreasonably straightforward to get up and\ninstalled i've got a video on\ninstalling that separately that i can\nlink to you as well so let me know in\nthe comments below if you want that\nalso let me know in the comments below\nif you like this sort of format me sort\nof just walking through and giving you\nan idea as to how to actually go through\nthis\ni'm always welcome for feedback if\nthere's anything you do like or you\ndon't like by all means do let me know\nokay so where are we up to now so we\nwere\ninstalling ipi kernel so let's do that\nso again ipi kernel\nallows us to associate our virtual\nenvironment to our jupyter notebook so\nfirst up we need to install it\nand then the second line here is\nactually going to allow us to associate\na little bit of a typo there that's fine\nso let's go on ahead and install ipod\nkernel so pip\ninstall ipi kernel\nlet's make this a little bit bigger\nand again you can see that we're\ninstalling libraries over here\nwe can hide our navigation pane so you\ncan see that these are all being sold\nnow right\nnow if we type in pip list again let's\njump back here\nyou can see that we've now got\nadditional packages now the next thing\nthat we want to do is actually\ninstall a virtual environment into\njupyter so this is often where people\ncome unstuck when using virtual\nenvironments with jupiter for data\nscience workloads you need to install it\nin to your jupiter kernel notebook so\nthis is going to give you the ability to\nsee\nthat virtual environment or associated\nto your notebooks\nso in order to do that we're going to be\nrunning this command so python dash\nm ipi kernel install dash dash user dash\ndash\nname tf equals tfod so let's go ahead\nand run that so\ni pi kernel all right so python\ndash m what was it again i already\nforgot ipi kernel\ninstall dash dash user dash dash\nname equals tfod that should be right so\nactually let's clear this so we can\nactually see it a little bit better\nuh what was it python\ndash m install\ndash dash python m ipi kernel installed\nmy bad\ndash dash user dash dash name equals\ntfod\nokay let's check that python dash m i by\nkernel install dash dash user dash dash\nname tfid\nokay it's all good now i wanted to call\nthis out so this\nlast bit here he's effectively telling\nthe ipi kernel package what the name of\nyour virtual environment is so if you\nchange the name of your virtual\nenvironment\nyou need to make sure that you change\nthis name here so say for example i\nwhen i created my virtual environment so\ni wrote python-m-v-e-nv\nmy special environment when i go to\ninstall that virtual environment into my\njupyter notebooks i need to change that\nname here so in that case it would be\nmy special virtual environment whatever\nyou called it so in this case if i hit\nrun that's going to now install it so\nyou can see installed kernel spec tfod\nand blah blah blah so now we've actually\ngot\nthat particular virtual environment\navailable inside of our jupyter notebook\nnow an easy way to validate that is just\nstart up jupyter notebooks\nand if you create a new dummy notebook\nor even if you just hit new\nso you'll see that we actually have tfod\navailable there so that is our virtual\nenvironment\nnow made available so now we can\nactually leverage that virtual\nenvironment when we\nwork with our notebooks cool\nall right so that brings us a two-step\nnumeral\nfive i don't know how to say five in\nspanish unfortunately but step five all\nright so we're now up to here where\nwe're actually going to go on ahead and\ncollect our images so that up until now\nwe've sort of done quite a fair bit so\nwe've gone through\nand set up our virtual environment and\nthat's our baseline setup\nnow installed now the next thing that\nwe're going to be doing is as i was\nsaying collecting our images so\nlet's go back and we're now going to\ncollect\nand label our images so part two\nis collecting and labeling our images so\nremember cast your mind back what i was\nsaying is when we\nactually go and leverage deep learning\nmodels we're going to be passing through\ndata aka\nimages and answers aka our labels to be\nable to train our object detection model\nso collecting and labeling good images\nis really really important\nnow in this case to be able to collect\nand label our images we're going to be\nleveraging\nthis jupyter notebook that you've got\nhere which is one\ndot image collection and we're going to\nbe using a\nwebcam really important thing to note is\nif you're doing this\non your machine you need to be able to\nhave access to your webcam\nin order to be able to actually collect\nimages using your webcam\nnow when it comes to labeling we're\ngoing to be using a library called\nlabel image so if i actually go back i\ncan show you what that looks like so\nit's label image\nand this allows you to label different\nimages within an\nimage so in this case it's really really\nsimple and it's really sort of fit for\npurpose\nnothing crazy that actually is involved\nin actually doing this so we're going to\nbe using that as well and i'll sort of\nwalk you through setting that up\nokay now in terms of best practices\nthere are\na couple of things to note so when\nyou're labeling\nkeep in mind the case that you're\nactually passing through\nyour images so you want to make sure\nthat the names that you pass through\nwhen you're\nactually labeling them uh the specific\ncase that you want to render so\nin this case if i name or name this\ncompletely lowercase livelong\nwhen i go to actually train my model the\nlabel that i pass through needs to be\nlived long as well so again i'll talk\nabout that a little bit later later\nkeep your labels as tight as possible so\ndon't be going so in this case i was\nlabeling the\nlive long sign don't create a big square\naround it right so you want to keep\nthese labels as tight as possible in\norder to make sure that your\nmodel is able to detect specifically\nthat object right this helps a lot when\nboosting performance\nand then include pictures of objects at\ndifferent angles and under different\nlighting conditions so what i tend to do\nis i'll actually like\nso if i'm doing gesture recognition for\nexample let's get my hand in the photos\ni'll actually move my hand around i'll\ntake it at different angles at different\nlighting positions\nso that my model learns to generalize\nbetter so ideally what you want your\nmodel to do is perform well\nnot only on your training data but also\nin the real world\nthis is what is known as your model\nbeing generalized right so it works well\nin general\nnow in order to get a model that\nperforms that well you want to give it a\nwhole bunch of different types of\ninstances of the object that you're\ntrying to detect so say for example i\nwas trying to detect pictures of my\nphone\nright if i took a photo of my phone\nlet's disable that so if i took a photo\nof my phone\njust like this in the real world if i\nthen went\nand flipped my phone if it had never\nseen images of a phone that looks like\nthis right with the different cameras\nit'd be really difficult for it to\ndetect that right so ideally you want a\nwhole bunch of different angles so if\nyou're detecting fish for example you'd\nwant to take pictures of the fish\nfront on side on the other side and the\nback top\nbottom so your model has a chance to be\nable to see different angles for that\nparticular\nobject because if it doesn't it's going\nto be really hard for it to know\nthat that particular object is what it\nis\nanother best practice is to start off\nwith 10 to 20 pictures of each class now\ni'm going to start off with\nway less than that because i'm going to\nshow you what to do if you get sucky\nperformance and how to add additional\npictures how to retrain so we're going\nto start off with less i think we're\ngoing to do five initially\nthen we're going to rebuild and then\nredo this model so\nideally we should get better performance\nlater on and we'll also do it with the\ngreen screen and without the green\nscreen so\nagain i'm going to give it a chance to\nbetter generalize so if we've got a\ngreen screen in the background as i do\nright here which you probably can't see\nright now because i've got chroma key on\nbut if i had the green screen up and i\nonly give it images where i've got a\ngreen screen available\nwhat would happen if i took the green\nscreen down maybe it might not actually\nperform that well because it has never\nseen images of my hand\nwithout a green screen behind it so\nideally you want to give your image\nthe or you want to give your model the\nbest chance possible to actually go on\nahead and detect objects\nokay so on that note let's go ahead and\nstart collecting images and\nlabeling images so in order to do this\nwe're going to be using\nthe one of the jupyter notebooks that we\ncloned down which is this one here say\nimage collection\ndot i pi and b so\nthis is step five so we're now up to\nhere all right so remember we started\noff at jupyter notebook so again i'll\ncancel this so you can see it\nso we let's clear it so in order to do\nthis i'm just going to start our droop\nin a notebook so by typing j\nu p y t e r notebook so this is going to\nstart\nup our jupyter notebook server that\nwe're able to use so if we hit enter now\nthat is now started and you can see\ninside of here we've got a\nburn system so we've got our virtual\nenvironments a tfod\nwe've got that image collection notebook\nso one dot image\nspace collection dot ipm we've got our\ntraining and detection notebook which\nwe'll talk about more later\nerror guide and our readme so we are\ngoing to start off with our image\ncollection component\nall right so if we select that that's\ngoing to open up our notebook\nand then we're just going to step\nthrough this particular file\nso what we're going to do is we're going\nto step through it so i'm going to hit\nhold shift and enter on my keyboard this\nis going to allow me to step through\neach one of these cells\nso shift enter and this first line here\nis going to install opencv so this is a\nnew dependency that we've actually got\navailable\nnow a key thing to know is that when\nyou're running this what i want you to\ncheck is either\nover here in the top left hand corner\nyou the name of your kernel that you're\nusing is the same\nas your virtual environment so if it's\nnot the same that means that you're not\ncurrently working inside of your virtual\nenvironment so you're not\nleveraging that pre-isolated environment\nthat you went and created and all of the\nstuff that you're going to be installing\nis on your local machine inside of your\nbaseline virtual environment so that\nwill mean that it's not as controlled as\npossible\nanother way to check that is if you hit\nkernel change kernel\njust make sure you've got the right one\nselected so in this case just to be safe\nso i can hit tfod again\nand in this case i'm already inside of\nthat so now when i go in\ninstall pip install opencv i'm 100\nsure that i'm actually installing inside\nof my virtual environment and again you\ncan tell this based on the insole\ncommand right\nso here you can see that it's actually\ninstalling inside of this\ntfod lib site packages library\nso again installing in the right place\nreally really critical so if you're\ngetting errors where you're installing a\nlibrary and then you've got to use it\nand you're like it's not\npicking up sometimes it can be that so\nsay for example\nyou install it in on your command line\nand you don't have your virtual\nenvironment activated well then it's\ngoing to be installing\nnot inside your virtual environment so\nwhen you do use it inside your jupyter\nnotebook it won't be picking it up\nkey thing to note make sure this little\nbit over here\nis your virtual environment so that you\nare 100 sure that you're actually using\nit\nso again we're going to step through so\nthis next cell\nso this first upsell is let's zoom in on\nthat so exclamation mark pip\ninstall opencv python so this is\ninstalling opencv\ninto your virtual environment opencv\njust stands for open computer vision so\nit's a really really popular computer\nvision library\nreally really good for working with the\nimages or video in this case we're going\nto use it to access our webcam\nand collect a bunch of images then the\nnext cell is actually importing some\ndependencies\nso you can see here that we're now\nimporting opencv so import cv2 actually\nimports opencv\nslightly different naming convention\nthis is pretty normal we're then\nimporting\nuuid so this is now giving us our unique\nidentifier\nso this will allow us to name our images\nuniquely so we don't have overlaps\nwe're then importing os which gives us\nour operating system\nthis is really good when you're working\nwith file paths so i've used os a\na lot in both of these notebooks\nparticularly to ensure that we have file\npaths that are compliant with both linux\nmac and windows so that you can sort of\nstep around those\nand we're also importing time so we're\ngoing to use this when we actually\ncollect our images to take a two second\nbreak\nbetween each image that we collect so\nthis will give us time\nto move ad to our different angles so\nremember really really important to have\nimages at different angles to help our\nmodel generalize\nokay then we're going to define the\ndifferent images to collect so in this\ncase we're going to collect\nfour different objects so in this case\nthis is going to be a multi-class\nobject detection model so we're going to\nbe able to detect thumbs up\nthumbs down thank you which is a sign\nlanguage pose and then live long so\nwe're going to give it a bunch of\ndifferent types of images or a bunch of\ndifferent types of objects to detect so\nin this case what we've actually got\nhere\nis an array so which is labels equals\nsquare brackets and then we've just got\na bunch of different strings\nso if you wanted to have different\nobjects to detect or different types of\nobjects this is where you\nchange those labels so in this case here\nwe've got thumbs up\nthumbs down thank you and live long now\nagain you could change this to your\nheart's content\njust make sure that whatever the label\nis named here\nis actually it's not so important here\nit's important later on when you\nactually go to label make sure that you\npay attention to the case\num in our projects we're actually going\nto change this up so rather than doing\nthumbs up thumbs down and live long\nsay for example with our little leds\nwe'd be doing bent and not bent\nfor example in this case we're pretty\nhappy so we can run that cell and if we\nactually take a look at our labels this\nis just a list\nso if we actually type in type\nyou can see it's just a standard list\nthere's nothing super fancy going on\nthere it's just\na place that we can hold our different\nlabels in this case and we've also got\nthis line here number of\nimages so this just represents how many\nimages we are going to collect\nper class so we're going to collect five\nimages of thumbs up five images of\nthumbs down\nfive images of thank you and five images\nof live long\nnow remember what i said during the best\npractices ideally you want to have 10 to\n20 of these images\njust when you're getting started right\nso i'll talk about this\nin performance tuning as well when you\nwant to scale this up and produce a\nmodel which is\nway way better you want to use way more\nimages than that but to prototype and to\nget up and running\n10 to 20 images ideal i'm doing five on\npurpose here because we're gonna\nperformance tune later on okay\nthen the next thing that we're going to\nbe doing is setting up our folders so\nright now we don't actually have\nanything created inside of our folder\ndirectory right so let's just\nadd a navigation pane again so if i go\ninto our tensorflow object detection\nrepository\ni don't have any folders here but i'm\nactually going to set up\na little folder directory that's\nactually going to be serviced really\nreally well when it comes to training\nand doing all about other stuff\nso this particular line here is just\nsetting up our images path\nso what we're doing is we're now going\nto create a new path which is going to\nbe called tensorflow\nand then inside of that we'll create a\nfolder called workspace folder\ninside of that called images and a\nfolder inside of that called collected\nimages\nprobably doesn't make sense right now\nlet me show you so if i hit shift enter\nit's going to set up our images path\nright so for windows you're going to get\na double backslash if you print\nthis out rather you can see that what\nit's actually doing is just navigating\nto tensorflow workspace images collected\nimages if you wanted a different file\npath you could change this\nbut just bear in mind that the rest of\nthe tutorial is going to follow that\nfile path\nand then what we're going to do is\ncreate those file paths\nso first up what this line is doing is\nchecking whether or not the path exists\nthen it's checking what type of\noperating system is being used so in\nthis case os dot name actually\nchecks what type of operating system is\nbeing used so if i actually type that\nout so earth step name\nbecause i'm on a windows machine it's\ngoing to read out nt\nyou'll see later on when i do this on a\ncolab instance because that's a linux\nmachine it's actually going to say\nposix so this gives you the ability to\nwork\nout to run on both of those operating\nsystems so in this case\nnt is going to be windows posix is going\nto be linux\nnow that's all good what we're going to\ndo is run this cell and this is actually\ngoing to create\nthis folder directory or this folder\npath so if i hit shift enter\nyou can see that that's run successfully\nnow if we go back\nyou can see let's just make this a list\nso it's easy to see\nwe've now gone and created a new folder\ncalled tensorflow so that's now\navailable there and if i step in\nwhat you'll actually see is that it is\nthat it's actually creating the whole\nfile path so tensorflow workspace\nshould zoom in on this by default it's\ngoing to create tensorflow workspace\nimages collected images so tensorflow\nworkspace images\ncollected images now what it also does\nat the same time is it creates a new\nfolder\nper class so it'll create a new one for\nthumbs up\nnew one for thumbs down new one for\nthank you and a new one for live long\nif you change this add different objects\nadd different labels\nthen it's going to create those folders\nas well when you run this particular\ncell here so if you don't have these\nfolders created make sure that you've\ngot\nyour labels defined correctly and make\nsure that you run the cell\nit'll create those folders for you now\nthe next thing that we're actually going\nto do is actually\ncapture our images so this cell over\nhere is actually going to do all of this\nfor\nus so it's going to loop through all of\nour labels it's then going to\nconnect to our webcam now this\nline is really really important here so\nright so this line\nconnects to our webcam or capture device\nso right now we're just doing it using\nour webcam right but later on when we go\nto do object detection using our\nmicroscope\ni'm actually going to need to change\nthis device number to be able to detect\nthat particular microscope now\nwhat might happen is this number that\nyou see here so right now i've got\n0 in there if you're working on a\ndifferent machine which\nundoubtedly you will be this number or\nthis video capture device is going\nmy theory right so on my mac so on my\nother mac machine\nthe number that i need to pass through\ninto here in order to be able to\nconnect to my webcam is number two now\nif you get errors which undoubtedly it\nmight happen so if i actually go back\ninto our error guide\nso if you get an error that looks like\nthis so value error images must have\nthree or four dimensions\nmore often than not that is because your\nwebcam you haven't got that webcam\nnumber\ncorrect so if you see a grey box pop up\nand you're not getting any images back\nagain it could be that as well so\nsometimes you might need to either\nchange that number or restart your\nnotebook to be able to connect\nto your specific webcam now in this case\ni believe\nvideo capture device one is correct so\nwe should be good to go\nso what's going to happen here is we're\ngoing to first up print out\nwhich label that we're collecting images\nfor so it's going to print out\ncollecting images for\nand then the label that it's looping\nthrough because remember it's going to\nloop through our labels up here\nit's then going to give us a break for\nfive seconds that enabled us to get\ninto position so it's gonna sleep for\nfive seconds and this is where that\nsleep library down here is\ncoming in handy and then it's going to\nloop through the number of images that\nwe want to collect so remember\nwe're going to collect five images in\nthis case if we change\nthis number up here from 5 to 10 or 15\nor whatever\nit's going to change the number of\nimages that we actually collect\nso it'll then print out collecting image\nfor a specific\nlabel it'll then capture the frame using\nour webcam\nand then what it's going to do this is\nreally important so it's going to\ncreate a new image and it's going to\nplace that inside of this particular\nfolder path so\nit's going to place it inside of images\npath which is let's actually print this\nout so you'll see it\nah it's not going to work if i don't\nhave an image so it's going to put it\ninside\ni'll change that now it's going to paste\nit inside of images path\nand then label so in this case say for\nexample we are up to\nthumbs up it would put it inside of\nthumbs up which is over here\nand then it'll name the actual file\nlabel\ndot and then a random number so it's\ngoing to create this unique identifier\ndot jpg so all of our files will be jpeg\nthey'll be named the specific label plus\nthe unique identifier\nand they'll all be inside of their\nrespective label folders so we're going\nto need to move these around a little\nbit later but that's fine for now\nthen it's going to use the cv2.iamwrite\ncommand to be able to write that down\ninto file and it'll actually show it to\na screen\nit'll then take a two second break again\nand if at any point we need to escape\nout of it we can hit the q key on our\nkeyboard to be able to get out of that\nit'll then close everything down\nif i zoom out of that now let's go on\nahead\nand run this are we zoomed in no we're\nnot zoomed in all right cool\nso if we run this ideally what you\nshould see is a little pop-up at the\nbottom of your screen\nwhich indicates that it's now connected\nto opencv and it's actually rendering\nso you've got remember you've got five\nseconds to get into position so in this\ncase\nthe part that we're going to go down is\nthumbs up thumbs down\nthank you and then live long so again\ni'm going to make sure\nso we might do this once see what where\nour webcam's position and we might need\nto\nfix that up so i'm just looking at where\nmine is now it should be okay\nlet's give it a crack all right so i'm\njust gonna run that cell again shift\nenter\nshould see a little pop up down the\nbottom\nlooks like it's okay for now\nyou can see that's popped up now and\nagain first position is going to be\nthumbs up\nit's very dark let's get back into the\ncenter\nnot the best images of thumbs up we'll\ntry it anyway and see what it looks like\nthumbs down\nand the next one should be thank you i\nbelieve\nlet me switch to this position\nso again you get a little bit of a break\nbetween each of these images so you've\ngot time to move around right\nif you want to increase the break you\ncan just change that number\nand again i'm trying to get into\nslightly different positions each time\nand then the last one it should be live\nlong so\nall right that looks good\nremember right now we've only got our\ngreen screen images as well so\nwe might choose to drop the green screen\nand create new detections later on if we\nget really really poor performance we'll\ntest this out\nagain this meant to be a live example so\nyou can see what some of the challenges\nthat you might face and how to solve\nthose\nalrighty cool so it looks like we've now\ngot a bunch of images so again\nif we go into tensorflow workspace\nimages collected images you can see that\nwe've now got a bunch of images so our\nlive long\npositions looking fine and the way that\ni'm sort of judging these\nthe only thing i'm a little bit\nconcerned about with these images is\nthat right now they're all\nin the same format so let's just enable\npreview\num how do we do this again preview pen\nhere\nso right now they're all sort of in the\nsame position right so this is not good\npractice when it comes to building a\ngeneralized model\nso what we might choose to do later on\nis move into different positions and\nideally drop the green screen add more\nimages train this up again\nso in this case that's our baseline\nright so and again when you're\nprototyping a key thing in any data\nscience project i preaches all the time\nprototype as fast as possible because\nthen you're going to work out whether or\nnot what you're trying to do\nis feasible and whether or not it's\npossible so say for example you're\ntrying to detect\ni don't know say for example you were\ntrying to detect bent\nuh leds and you're just doing it with a\nwebcam well\nyou're gonna need a really really hyper\naccurate model\nor one that's able to see really really\nfine grain detail to be able to do this\nso if you were to prototype really\nreally quickly with a mobile net\nmodel and just a webcam you might see\nthat you get absolutely sucky\nperformance\nnow if you do this fast at least you get\nto the end output to realize that hey\nmaybe we need to try a different\ntechnique maybe we need a different\nsensor aka\nmicroscope by doing this quickly and\nprototyping quickly you're able to see\nand establish a baseline from which you\ncan\ngo on then and try to improve\nperformance in this case we're going to\ngive it a crack and see what it looks\nlike so we've got our live long images\nlet's check thank you\nthese ones look a little bit better\nagain obstructed by the microphone a\nlittle bit we'll see how that performs\nit's looking good thumbs down\nthat looks alright again so you can see\nthat right so\ni'm giving my model a better chance to\ngeneralize by having a thumb position\nthere\nand a thumb position there that's\nlooking better and again a few different\nones\nagain reasonably close together now\nanother idea here\nright is to do it with different hands\nso in this case i've just done it with\nthis hand but i could have\nchosen to do it with this hand right\ngonna give me a better chance to\ngeneralize that way\nand thumbs up that image is crap so\nwe're actually gonna get rid so this is\nanother thing to know right so that\nsometimes you might need to delete\nimages so in this case this one's really\ndark\nand it doesn't even contain an image of\na thumbs up so if you don't have the\nobject\nincluded within that particular image\nit's not going to be used for training\nas part of the tensorflow object\ndetection api\nso we can actually just delete this\nimage and delete this one because it\nkind of sucks\nand i've got a feeling that after we\ntrain this model our thumbs up detection\nis not going to be good but let's give\nit a crack and see what it looks like we\ncan always performance tune\nlater on so keep in mind our thumb is\nreally really close to the edge this one\nis half cut off\nthis one is in front of our face so\nagain we don't have a good\nrun of example images there\nso if we wanted to we could actually\njust add more images in now right so\nrather than collecting\nimages all the way again for all of\nthese labels what i'll do\nis i'll just delete um or add in a new\narray because i've got a feeling that\nthose thumb images really\naren't that good and we'll just call it\nthumbs what was it up i think it was\nthumbs up\nso now if we take a look at our labels\nso now we should be able to collect more\nimages for thumbs up so let's go on\nahead\nso i've just gone and added in a new\nvariable so if we wanted to go back to\nour normal labels we could do that as\nwell\nnow again it's pretty common so you\nmight need to add or capture additional\nimages or capture\nless images in this case i'm just going\nto capture a couple more images a thumbs\nup because we've only got three\nand all three of them kind of suck so\nand right so like they're only like half\ndetection so this one barely even counts\nyou\ncan only just see your thumb there so\nideally we want to get a number of good\nimages so\nlet's do this now so what i'm going to\ndo is i'm going to run this\ncell again and see how we go so if i run\nthat ideally so we're going to be trying\nto collect thumbs up\nyou should see a little pop-up again\nall right we've got our frame it's\nlooking better\nall right that looks a little bit better\nnow so again\nwe go back into our folder tensorflow\nworkspace images\ncollected images and thumbs up so now\nwe've got way more right\nso if we take a look at our latest ones\nagain we've got a bunch of different\neyes are closed they're great um so\nagain got a bunch of different images\nwe're giving it a better chance to\ngeneralize and now i've got images for\nboth hands as well right\nall right so let's do that and see how\nwe go all right\nso we've now gone through installing and\nimporting our dependencies for image\ncollection defining\nthe labels that we want to collect as\nwell as how to collect additional images\nfor a particular class\nand we've also gone and set up our\nfolders and captured our images now\nagain keep in mind\nwhen you are doing this bit you might\nneed to change this number depending on\nyour webcam capture device number so\nit's fine to change it if you have to\nchange it by all means do\nmake sure that it works for you\nsometimes i try zero one two\nthree um some particular some\nactually some devices have virtual video\ncapture devices so you need to take\nthose into account as well just again\nyou might need to try five six seven\neight nine just make sure that you try a\nbunch of them ideally you should see\nthat pop-up appear exactly as i showed\nnow we're going to get to our labeling\nso as i was saying we're going to be\nusing\nlabel image for this so this particular\npackage here now if you want to take a\nlook at this package\nyou can go to github.com forward slash i\ndon't know how to pronounce that\nt-z-u-t-a-l-i-n zoo talon sorry if i\nbutchered that name\nmassive respect here it's an awesome\npackage all right so we're gonna be\nusing label image to be able to go\nand label our images now when i talk\nabout labeling really we're just drawing\nboxes around the stuff that we're trying\nto detect\nnow also another thing to keep in mind\nis you can label multiple objects in one\nimage as well so another thing to to\nkeep up your hand\nnow down the bottom here there's a whole\nbunch of installation steps that you can\nactually go through\nnow what i've actually done is i've\nactually included this within the\njupyter notebook so rather than having\nto step out install\ndo all of that stuff we can actually\njust install it using our notebook\nso first up what we're going to install\nis pi qt5 and lxml so if we run that now\nremember we're inside of our virtual\nenvironment so if we actually take a\nlook at what we've got in here now\nhit this now let's actually run this\ncell first\ncool so that's now installed and if we\nrun pip list\nyou can see that we now have a whole\nbunch of other stuff installed and if\nwe look at the two libraries or\ndependencies that we just wanted to\ninstall so pi qt5 and lxml\nwe now have lxml which is there and pi\nqt5 as well as all of its other\ndependencies so we're good there\nright now the next thing that we want to\ndo is create a little home for our label\nimage\nfile or label image package to be saved\nso what we're actually going to do is\ncreate a new folder called tensorflow\nand then label image so it'll be inside\nof our tensorflow folder\nand then a new folder called label image\nso it's effectively going to be\nlet's keep this open i don't know why i\nkeep closing that um so tfod course\ntensorflow\nso we're going to create a new directory\nhere called label image and that's going\nto be where it gets stored so if i\nrun this cell let's minimize this\nand then if we now go ahead and create\nthis\nwhat we're effectively going to be doing\nis first up creating a new directory\nusing make dr or that make deer command\nthere\nso first up we're actually going to\ncheck whether or not that file path\nexists so if it\ndoes already exist as in it's done is\ninstalled then it's not going to do\nanything so if you get any errors what\nyou might want to do is actually just\ndelete\nthe label image folder and run the cell\nagain now in this case we haven't run it\nso we can run that\nso it'll create a new directory called\nlabel image which you can see there and\nthen it's actually going to\ngo in ahead and clone this thing that i\nwas actually showing you\nso this github repository it's going to\nclone that\nso whenever i'm running these commands\nthrough a jupyter notebook it tends to\nbe\nnot a little bit slow but you don't\nactually see the progress so\nright now it is running so we've got a\nlittle star over there so you can see it\nso it is running you're just not going\nto see it if you're running on a windows\nmachine but it is clonings\nso if we open that doesn't look like\nthere's anything there yet let's wait\nthat\nfor that to clone all right so that\nis our label image package now cloned\nso if we actually open that up you can\nsee that we've now\ngot that cloned into that folder so\nwe've got tfod tensorflow label image\nand inside of that we've got\neffectively all of this stuff cloned\ninto our local repository\nnow the next thing that we need to do is\nactually go ahead and\ninstall label image i believe that might\nbe a typo there so let's just copy that\nover here\nokay and then what we're going to be\ndoing so again we're running on a\nwindows machine\nso we're going to be executing this path\ndown here\nso we're going to cd into that label\nimage folder so if i actually show you\nthat label image\nso again we're going to be going into\nthis folder so tensorflow label\nimage then we're going to be running in\nthis command here so pi rcc five dash oh\nlibs forward slash resources dot pi\nresources dot qrc\nthis is effectively the installation\nsteps that are recommended\nfrom the main package so if i actually\ngo down here\nso for windows we're going to be doing\nthis so pi rcc five\ndash zero libs forward slash resources\ndot pi resources dot qrc and then we'll\nopen it up\nso effectively we're just running\nthrough the same installation steps\nthat you would get from the actual\nrepository itself so if i go on ahead\nand run this now\nit should ideally run successfully so it\ndoesn't look like we've got any errors\nthere\nand then if we go on ahead and run this\ncommand what should actually happen now\nis that it'll\nactually open up the label image\npackage so the actual application will\nactually open up\nso if i actually hit shift enter you can\nsee\nlabel image is opening up so we've now\ngone and installed it from scratch\nand actually opened up the label image\npackage now the fun bit comes\nactually going on ahead and labeling our\nimages so what i'm going to do\nis i'm going to over this left hand side\nhere you can see that this button\ncalled opendr i'm going to wave my\ncursor around it so you can see it\nso i'm going to hit open directory or\nopen dr\nand then i'm going to navigate to my\nfolder so i'm going to go to youtube\ntens flow object detection tensorflow\nobject detection course\ntensorflow workspace images collected\nimages and remember we've got a\nrepository or a folder for each one of\nour different classes\nso in this case here what i'm going to\ndo is step into live long first\nhit select folder and sometimes it won't\nactually\nopen that folder it'll just ask you to\nselect that folder again\nwhat you need to do is just hit cancel b\nas long as you've got the files down\nhere\nit means that you're able to label them\nso i'm going to start out by labeling my\nfirst image\nso if i double click onto that that\nopens up our image now\njust a couple of quick tips so what you\ncan do in order to label this image so\nthere's a\nshortcut right so all you need to do is\nhit w and this is going to open up a\nlittle labeling\nthing over here so you can see we've got\nour cursor to label an\nimage what you then want to do is just\nselect the first point that you want to\nlabel and then drag down and create the\nobject now what i tend to do is i find\ntend to find the outermost point so in\nthis case i'm going right to the top of\nmy finger\nand right to the edge of my hand then\nwhat i'll do is i'll\ndrag it so that i only encapsulate\nthe components of my hand that i want so\nyou can see i'm going just to the edge\nof my\nwhat is that pointer finger and to the\nedge of my wrist so i'm going to be as\ntight as possible with my detection or\nmy label\nand then so remember when i kept on\nharping on about\nmake sure that your label detections are\ntight so that's what i meant by tight\nand then make sure that you pay\nattention to what you actually name\nthese labels because when we go to train\nyou're going to need to make sure that\nthe names of the labels in your\nannotations which is what we're doing\nright now\nmatch the actual labels that you pass\nthrough to your model that you're\ntraining\nso in this case i'm going to label it\nlive long and i'm going to have a\ncapital l\nand a capital a capital alpha live and a\ncapital l for long\nnow when i go to set up my labels later\non in my\ntraining step i'm going to make sure\ni've got the exact same thing\nif you don't you're going to get an\nerror right and that error is going to\nlook\nlike uh this\nso in this case here you can see it's\nwhen running generate tf record script\nblah blah blah blah blah\nand then it's you're going to get this\nkey error here but i'm actually going to\nshow you what that looks like when we go\nto do it\nso in this case keep in mind i've\nlabeled it capital live capital long\nif i go and screw up when i go to train\nit's fine you can fix it it's not hard\nbut you are going to get an error so in\nthis case pay a lot of attention to the\ncapitalization and the case of your\nlabels\nso i'm going to label it live long hit\nok and then hit ctrl\ns to save it and save\nthat's my first image labeled so we're\ngoing to go through and do the rest so i\ncan select my next image and again we're\ngoing to keep them tight\nso i can do that and say i screw up\nright and do that\ni can still go in and drag this back and\ntighten\nup my detection so i can do that make it\na bit tighter and you can see that\nthere's this little bit of my image\nover here that i haven't actually\ncaptured so if i zoom in you can see\nover there that i'm not capturing that\nso we might\npull that in now maybe i'm being a\nlittle bit pedantic now but that\nis my ocd kicking in and it is best\npractice right so you want to make sure\nthat you get this as accurate as\npossible so we're going to save this\nthat's annotation 2 done now we're going\nto go to our next image and again do the\nsame thing so we're just going to do\nthis\nfor all of our images now the beauty of\nwhat we're doing right now right\nis that we can do this for whatever type\nof object that we wanted to save so say\nfor example we wanted to do\ni don't know um and i saw a really\nreally cool video the other day\nof someone that used this to classify\nwhich way\nwaves were breaking i thought that that\nwas pretty awesome\num you could do it for a whole range of\ndifferent applications so obviously we\ndid sign language that was a great use\ncase\nsuper practical and super altruistic and\nthere's like a whole heap of\ncapabilities like there's\npeople out there that need this\ntechnology so if you've got the\ncapability to do it and you're watching\nthis course by all means find something\ninteresting\nand give it a crack so i'm obviously\ngoing to give you um some examples when\nwe actually go to do our projects but\nagain\nif you get come up with a good idea this\nexact same process that we're going\nthrough\ndefine your labels collect your images\nlabel them and then we'll get through\nto the training later on but you sort of\nget the idea that's what we're going\nthrough\nokay so we're now going to label these\nimages now one thing that i want you to\ncheck as you're doing this\nis if you go into the images folder and\nin this case we've done live long right\nthat you do have these annotations\navailable right\nso in this case i'm looking at this\nimage here i should have\na matching annotation and it's going to\nhave the exact same name\nas your image file but rather the\nextension is going to be\nxml so if i actually take a look\nlet's go details so in this case i've\ngot the image\nlet's do we need date we don't need date\nso i've got my image\nover here which is named whatever that\nis dot jpeg file and then i've got the\nannotation which\nmatches that image now if i open up this\nannotation let's take a look\nwhat's actually included in here so\ninside of my annotation i've got\nobviously the fact that it's an\nxml file so it starts off with\nannotation then tells me what folder i'm\nin\nwhat my file name is the path to that\nfile name now this doesn't matter so\nmuch when it actually comes to training\nbecause we're going to move these around\nthe source and again the database\ndoesn't matter here\nthe size is quite important because this\ndefines how big our images so in this\ncase we've got width\nheight let's make this a bit bigger we\ncan see a bit better\nwe've got width height and depth so in\nthis case it's a color image so it's\ngoing to have r\nj and b whether or not it's segmented so\nwe're not segmenting at the moment\nand then this is the bit that's really\nimportant so you might have multiple\nobjects in an image in which case this\nwould be repeated multiple times\nso here we've got the name of our object\nand again we've got it capital live\ncapital\nlong so if you screw up and you wanted\nto the names to be different you could\njust come in and change\nthese names as well we've got pose we're\nnot using that truncated and difficult\nwe're not using that\nand then we've got the bounding box so\nagain we've got the different\ncoordinates so we've got the minimum\nx value and the minimum y value so\neffectively\nwe're just giving it two points and\nwe're giving it a point here and a point\nhere\nand the square that represents that box\nis going to be our bounding box\nso that's really what it comes down to\nwhen it comes to labeling so we're\neffectively creating these xml files\nokay but right now we've only done our\none class so if we just wanted to detect\nuh live long that's perfectly fine you\ncan go on ahead and jump off to training\nif you only had one object to do you\ncould do that\nin this case keep in mind we had live\nlong we had thank you so if we go and do\nthat now so i'm going to hit step into\nthat folder\nand then hit select folder sometimes\nyou've got to hit cancel\nthen open up our image so again we're\ngoing to do the same thing now again i'm\na little concerned that we've got the\nmic there but that's fine let's give it\na crack\nso in this case i'm going to label to my\nknuckles and again to my wrist so\nthis one is going to be called thank you\noh almost had a typo they're dangerous\nso capital t\nand capital y hit okay then again\ncontrol s to save\nthen we'll go to our next one so i'm\nagain different angle so this\nshould ideally give us a better chance\nof generalizing\ni'm going to save that save\ngo to our next image and again mic there\nwe'll see what that does\nagain i'm just going to keep going\nthrough so we're going to do the next\none\nsave next one and again looks like i've\nonly got\ntwo angles there sort of up and down so\none idea there and i've screwed up my\ndetection so i'm just going to hit ok\nand then i'm going to tighten that up\nsave cool so we can double check just by\nclicking through all of them\nin this case i can see all of my\ndetections are saved and they're good\nif you forget to save what will happen\nactually i'll show you in the next one\nso in this case we should be fine so if\nwe go and check our images again\nthank you so again remember we've got\nall of our images and we've got their\nassociated\nannotation files so ideally we should\nhave a round number so it should be even\nso we've got\n10 image of five images and we've got\nfive annotations so we're good there\ncool alrighty now we're going to open up\nour next class i want to show you what\nhappens\nif we forget to save so\nlet's do thumbs down now so double click\nright so i'm going to label thumbs down\nhit ok if i then go and double click\ninto my next one when i come back to\nthat image my annotation isn't going to\nbe saved so you've got to keep in mind\nthat you need to save it right so you\nwon't actually have that file created\nso again i'm going to just do thumbs\ndown\nchange my label name so it's going to be\nthumbs down\nsave now if i step into my next image\nand come back i'm going to have that\nannotation saved\nso we'll do our next one so sometimes\nyou might notice you forget one if\nyou're doing a ton of these\num again you might um you might\nsometimes it happens you forget to save\nnow a lot of some people have asked\nabout how would we scale this up so say\nwe've got\nthousands of images there's normally\ntwo ways that i recommend here so you\ncan either outsource this\nmechanical turkey is one way to go or if\nyou go to like upwork or freelancer\nthat's another way\nthe other way is that there are newer\ntools these days that actually use\na technique called auto labeling so\nthey'll actually train a lightweight\nobject detection model to be able to\ndetect the different objects within the\nimages so it's pretty cool right\nand then what it'll do it'll ask you to\nlabel say for example 10 or 20 or 15\nimages\nand then you can run that auto labeling\nand it'll go and auto label all of the\nother images based on the lightweight\nmodel it's already trained\nnow again those are pretty sophisticated\nbut if you'd like to see a video on that\nby all means do let me know i'll see\nif i can spin something up in this case\nwe're just going to use label image so\nagain you can see all of our images\nlooking fine there\nno issues okay let's do our next\ndirectory now so we've done thumbs down\nnow we want to do thumbs up and this was\nthe one that we remember we had a lot of\nimages for so we went\nand collected more so we are now doing\nthumbs down let's just i can't remember\nif i labeled that correctly now so the\nother one we did label thumbs down right\nso if we open up our annotation\nyep thumbs down okay so we're good and\nthumbs down with capitals perfect all\nright\nso now we're going to do thumbs up so\nlet's label it\nand same thing hit w to get that\nshortcut and open it up\nthis is going to be thumbs up\nsave next image this is a partial so\nthat's fine\nlet's do it anyway\nagain i'm just going to keep going\nthrough so again this\ncan get a little tedious when you go to\ntiny images but just uh\nsort of walk through normally i'll grab\na coffee and i'll just grind through and\nlabel these objects and again\nprototype so don't start out by labeling\nuh\nthousands of images because it might not\nbe the right technique so what i'd\nalways recommend\nis do 1025 if you\nreally want to keep it super fast\nprototype train and then evaluate right\nso don't commit to building a huge\nobject detection model before uh look\ndon't commit to building the whole thing\nwith thousands of images\nbecause you want to make sure that\nyou're going down the right technique\nyou're getting the right levels of data\nyou're getting you're using the right\ntypes of sensors\nto be able to do this so prototype first\ngoing to make you a lot more efficient\ni'm going to keep doing our thumbs up\nand again i'm going to adjust our label\nthis time because i screwed up\nso that looks a bit better save\nand then we're going to do that thumbs\nup save\nyou can see so i i did that thumbs up\nmight perform a little bit better now\nbecause we've now got images at a bunch\nof different angles\nlet's tighten that one up and save it\nagain\num but keep in mind we've only got a\ngreen screen in the background at the\nmoment so it'll be interesting to see\nwhat performance looks like\nand if it sucks we'll make it better\nokay cool let's double check our\nannotations as per usual so we're good\ngood good good good\ngood good good all right cool so that\nlooks all good so we've now labeled all\nof our images\nand if we check that let's bring that\nback\nso thumbs down it now has all of our\nannotations so if we're going to live\nlong\nwe're good there\nthank you we are good there\nthumbs down we're good there\nthumbs up we're good there as well okay\ncool so we've now gone and completed all\nof our labeling now the next thing\nwhich you really need to do is we're now\ngoing to split this up into a training\nand testing partition so when we get to\nour training step\nwe're going to train our images or train\nour model on\na portion of images and then we're going\nto separate part of it out or we're\ngoing to use the other part of our\nimages\nto actually test how it is so the reason\nthat we split this up is we want to\ntrain it on a segment of images\nthat we're going to use for training and\nthen we want to test it on a set of\nimages that it's\nnever seen before look the images might\nbe similar but we want to give it a\nchance to try it out and see what\nperformance looks like on images that it\nhasn't\nexplicitly seen before so to do that so\nyou can see we've got step 6 here so\nwe've now done\nlet's quickly recap so we've imported\nour dependencies\nwe've defined our images to collect\nwe've set up our folders we've captured\nour images\nand we've labeled so we've done quite a\nfair bit now what we need to do is move\nthem into a training and test\ntesting partition which is step six so\nwhat i'm going to do\nis i'm going to go back into that folder\nso inside of our images folders i'm\ngoing to hold there and i'm going to\ncreate two new folders now so i'm going\nto call one called train\nand i'm going to call one called test\nnow the names of these folders is really\nimportant because\ninside of the training script it's\nactually going to be looking for these\ntraining and testing folders or the test\nand train folder explicitly\nso you need to make sure that you create\nthese folders and you need to make sure\nthat you have images\nand the associated annotation in it so\nwhat i'm going to do now\nis i'm going to take a random portion of\nour images from\neach class so we're going to take some\nfrom\nlivelong some from thank you some thumbs\ndown something thumbs up\nand we're going to put it into that\ntraining folder so these are the going\nto be the images that we use to train\nour object detection model\nso if i step in to live long i'm going\nto get everything\nincluding the annotation so maybe we'll\nleave one image for testing so what\nwe're going to have effectively one\ntwo three four images and one two three\nfour annotation so i'm going to cut that\npaste it into the training folder and\ni'm gonna do this for each class so\nwe're gonna go into thank you so one\ntwo three four five six seven eight so\nagain four images four annotations\nagain paste it into the training folder\nnow we're gonna do a thumbs down and\nagain one two three four five six\nseven eight got to grab that one\ngonna go back in and the reason why i'm\nbeing so explicit in making sure that we\ngrab the annotation and the image is if\nyou skip out and you don't have the\nannotation or if you skip out and you\ndon't have the image it's going to screw\nup when you go to do the training step\nso you need to make sure that you grab\nboth the image\nand both the annotation really really\nimportant\nand we're going to do the last step so\ni'm going to grab let's leave two images\nfor testing there so i'm going to grab\n1 2 3 4 5 6\n7 8 9 10 11 12. all right\nso we'll leave two images and two\nannotations for thumbs up because\nremember we add more images there\nall right and then we're going to paste\nthose into our training folder so now we\nshould have an\neven number so we've got 36 a little bit\nsmaller down there but we've got 36\nimages so we've got the images and the\nannotation so we're good\nfor our training now we need to do the\nsame thing for our testing so we're just\ngoing to grab the rest\npaste it into our test thank you\nand again you could automate this you\ncould write a little bit of python\nscript to\nrandomly select your folders if you do\nget around to it let me know i'd love to\nsee the code\num paste it into test but i found that\njust doing it manually isn't too bad um\nparticularly if you only got a small\nsegment of images\ni'm going to grab our thumbs down a\nthumbs up and then paste that into test\nright so ideally what you should end up\nwith is an even number of images both\ninside of your test folder and inside of\nyour train folder\nso if we take a look at our full file\npath inside of our tfod\ncourse folder we should have tensorflow\nworkspace\nimages test and test has images and\nannotations\nand train and again train has images and\nannotations\nso these images and annotations are\ngoing to be used to actually train our\nmodel we're going to do this technique\nor user technique\nwhich converts these images and\nannotations to something called a\ntensorflow record\nand again i've got scripts to help you\ndo that so we're going to convert those\nand then use that those tensorflow\nrecords to be able to actually train our\nmodel\nnow if we go back into our images folder\nwe can also just delete these folders as\nwell now because we don't need these\nthere's nothing in them\nso inside of collected images we can\nactually just delete that now\nso again all of our images and\nannotations are inside of test and train\nso we're good to go now inside of that\nimage collection\nnotebook i've also got the code to\ncompress these images to be able to push\nthem up\ninto collab but again we're going to do\nthat when we get to\nour collab training so again hold on for\nthat for now you don't need to run these\nlast two cells\nwhich is everything under step 7 which\nsays optional\ncool all right so that's image\ncollection and labeling done so we've\ngone and collected our images\ncaptured our images labeled them using\nlabel image and we've now gone and split\nthem\nup into our training and testing\npartition so again remember\nlast step was really really important\nyou need to have a training and a\ntesting folder\nbecause this is what our training script\nis going to be looking for\nso we've also added to some of those\nbest practices so we were case sensitive\nwe made sure we got our cases right we\nkept our labels tight\nand right now we've only done five\nimages of each class except for thumbs\nup so again we might choose to add more\nlater on\nso we're good there this brings us two\nstep\nthree training our models so in part\nthree we're actually going to start\ntraining our models so\nwe're specifically going to be using a\nmodel called a mobile net which is a\nspecific deep learning architecture but\nyou could use a bunch of different types\nof models\nand we might actually do that in the\nperformance shooting section as well\nso when it comes to training a model\nusing tensorflow object detection so\nthere's a bunch of steps that you need\nto go through and a bunch of\ndependencies that you're going to be\nneeding\nnow namely because we are using\ntensorflow object detection one of the\ncore dependencies\nis going to be tensorflow so we're\nactually going to go through install\nall of our dependencies set up our\nfolder structures and actually start\ntraining this model\nnow as part of this we're also going to\nbe evaluating our model now i might come\nback to this a little bit later\nbut i wanted to talk about how to\nevaluate your models\nnow the nice thing about tensorflow\nobject detection is that you're able to\ncalculate these evaluation metrics\nafter you've actually gone and trained\nyour model now specifically when you run\nyour evaluation you're going to get two\nkey things\nso you'll get precision and normally\nyou'll get a metric called map which\nstands for mean\naverage precision and this basically\ntries to calculate\nwhat proportion of your detections were\ncorrect\nright so what it's actually doing is\nit's calculating the true positive\nor so how it's actually calculated is\nit's the number of true positive\ndetections\ndivided by the true positives and false\npositives\nso effectively it's the number of\ndetections that it got right so in this\ncase here you can see i've got this\nlittle matrix so this is a true positive\ndetection\nso you can see this is the sign for\nhello right and\nit's accurately detected the sign hello\nso it's a true positive\nnow on the other case you might have a\nfalse positive so\nit's gone and detected a label here\nwhich says hello but it doesn't that's\nnot actually correct because it doesn't\nactually have\nthat label there or it doesn't actually\nhave that object there so\neven though it's gone and made a\npositive detection it's a false positive\nbecause it's not\nactually correct you've also got a true\nnegative\nwhich in this case there's no object so\nthere's no hello in there so say for\nexample this is just a hello model\nso there's no actual hello object in\nthere in that case it's actually a true\nnegative\nnow in this case we've got a false\nnegative so there is a hello object in\nthere but it hasn't detected that as\nhello\nso it's falsely rejected it right so\nwhat you're actually going to get\nwhen you calculate your evaluation\nmetrics are precision and recall which\nare calculated\noff the number of true positive false\npositive true negative and false\nnegative detections\nso in this case your precision metric is\ngoing to be true positive\nwhich are the number of detections that\nhave accurately detected the correct\nobject\ndivided by the number of true positives\nand the false positives so effectively\nwhat that's giving you in layman's terms\nis what proportion of my detections were\nactually correct right\nso this is correct this is bad so\nideally you want this precision number\nto be as\nhigh as possible a higher precision\nnumber is a better precision number\nlikewise a higher recall number is also\na better number\nso your recall is calculated as the\nnumber of true positives\ndivided by the true positives and the\nfalse negatives\nright so this is basically capturing\nwhat proportion\nof my actual objects did i capture so in\nthis case\nyou can see that we might have captured\nthis but we didn't capture this so\nreally it's trying to measure hey\nfor the objects that were in the screen\nwhat proportion of those did we actually\nget\nso when we calculate our evaluation\nmetrics later on you'll actually be able\nto see these\num you also see loss talked about a\nlittle bit so it's a method of\nevaluating how well the model is\nperforming against\nthe data provided ideally you want loss\nto be as low as possible recall to be as\nhigh as possible\nand precision to be as high as possible\nbut again we'll talk about this when we\nget to that step\nall right so tensorflow model zoo so\nthere's a whole\nheap of different type of model that you\ncan actually go on ahead and train\nright now what you normally have to do\nis balance a trade-off so you'll balance\nfaster detections ideally being able to\ndetect stuff really really quickly\nversus lower accuracy so the ones that\ntend to be faster\ntend to be less accurate not all the\ntime but most of the time\nthe ones that are highly accurate tend\nto be slower right so if you have more\nsophisticated models bigger\narchitectures it's going to take slower\nto actually make that detection\nso if i actually show you right so if\nyou actually go to google and type in\ntensorflow\nmodel zoo and make sure you type in tf2\nwhich stands for tensorflow 2. there's a\nheap of different types of models right\nso these models are just different model\nnames and different model architectures\nso if i zoom in here you'll see that\nwe've got a model called centernet we've\ngot another model called\nefficient det we've got an sse mobile\nnet\nwhich stands for single shot detector\nmobile net single shot detector resonant\nso each of these just represent\ndifferent neural network architectures\nwhich are used for object detection\nnow you don't need to go into great\namounts of detail as to how these are\nactually built up what you do need to\nknow as a practitioner however is that\nusing different models is going to\nresult in different levels of accuracy\nas well as different levels of speed\nso say for example i wanted to use so\nlet's actually take a look at the model\nthat we're going to be using so we're\nactually using this one here so ssd\nmobile net v2\nfpm light 320 by 320. so this is the\nmodel that we're actually going to be\nusing\nand if you actually take a look at that\nlink there so if i copy this link\naddress\nthe let's actually open up the notebook\nactually we'll come back to that so the\nlink for this is actually going to be\nthe link that we're actually using\nin our notebook and i'll show you that\nin a sec um now\nthis model has a let's take a look here\nso we've got two components we've got\nspeed and we've got our mean average\nprecision remember\nwe talked about precision here in this\ncase we've got the average precision\nwhich is represented over here on the\ncoco dataset so this is just a standard\ndata set\nso just think of these two columns as\nhow fast the model is and how accurate\nthe model is likely to be so in this\ncase we've got a bit of a balanced model\nright\nso our ssd mobile net is going to run\neach frame in 22 milliseconds so ideally\nyou want this number to be\nthe lower the better and it's going to\nhave a mean average precision\nof 22.2 so again it's reasonably\nbalanced\nnow remember when i said so you're going\nto have a bit of a trade-off here so\nin this case and certain certain\narchitectures can be fast and can be\nhighly accurate as well so just keep\nthat in mind as well\nso you might get a model that's really\nreally quick but also really really\naccurate\nso we could use this one here but say\nfor example we wanted to get a model\nwhich is more accurate later on well we\nmight choose\nto go to this one so ssd mobile net v2\nfp and light 640 by 640.\nso it is going to be slower so it's\ngoing to take 39 milliseconds per frame\nbut you can see here that our mean\naverage precision is 28.2\nso again there's a trade-off so you\nmight choose to use a\nso you i guess you can sort of make a\ndecision here so if you need a model\nthat's going to be deployed\non a phone or on a raspberry pi\nyou ideally want to optimize for speed\nright because a raspberry pi isn't going\nwithout any acceleration isn't going to\nbe that\nperform or isn't going to be able to\nperform that fast anyway so you want to\nchoose the\nmodel which is already really really\nlightweight and it's going to be able to\nrun\nso in this case this is why i tend to\nuse this model a lot unless i have a\nspecific use case\nwhere i need a really really accurate\nmodel now again\na core difference between this model and\nthis model is that this model is\nactually going to compress\nour image from 640 by 480 which we had\nfrom our webcam to 320 by 320 when we\nactually pass it through\nyou don't actually need to do anything\nas part of this it's actually going to\nuse a technique called pre-processing\nto compress that down to 320 by 320\nand then in post-processing it's going\nto take the detections that it found\nand convert it back to your original\nresolution so it'll actually do that for\nyou and this is one of the advantages of\nthe tensorflow update detection model\nor api you don't have to do that\npre-processing and post-processing which\ncan be a pain sometimes\nanother cool thing about it is it does a\ntechnique or uses a bunch of techniques\ncalled image augmentation\nso it might darken your image you might\nshift it it might flip it and it will do\nthe same for the detection so it does\nall of that for you\ncertain models will have different\nlevels of data augmentation or image\naugmentation\nbut just keep in mind the reason that\nyou do those is to ideally get a better\nperforming model so ideally a more\naccurate model\nnow again you can use a bunch of\ndifferent types of models there's one\nreally\nreally slow one down here which again\nruns in 301 milliseconds\nbut the reason that this particular\nmodel takes a lot longer is because this\nactually gives you a bunch of additional\nstuff as well so this actually uses a\nmask\nwhich in this case this this course\ncovers object detection\nthe mask model which you can see down\nhere actually does something called\nimage segmentation as well so rather\nthan just detecting a box around my face\nit can actually trace around my face and\ndetect the specific shape of my face not\njust a box\nnow again because it is a lot more\nsophisticated\nit's going to take a lot longer to run\nso in this case 301 milliseconds\nso again you've got a bit of a trade-off\nhere as to which model you choose to use\nnow\nwe're going to be using this one over\nhere so ssd mobile net\nv2 fpm live 320 by 320 but again in\nperformance tuning we might choose to\nuse the different model\nand see what that looks like so that is\ntensorflow model zoo so whenever\nsomebody asks you about tensorflow model\nzoo this\nis normally what they're talking about\nokay so that is that\nnow sometimes you might not want to\ntrain locally on your machine you rather\nuse a cloud instance so say for example\nyou're not at home you can't access your\ndesktop\nyou might want to train something on\ncollab well you can do that but a key\nthing to note is that\nwhen you train on a cloud instance\nsometimes it can be difficult to connect\nto different\ndevices so say for example you want to\nconnect your microscope or connect your\nwebcam\nsometimes that can be a little bit\ntricky so that's just one thing to keep\nin mind\nbut again we'll cover that a little bit\nlater on when we get to that cloud\nsection\nso on that note it's time to kick off\nour training so again\nwe're going to jump back into our\njupiter notebook which we had over here\nand before we were operating inside of\nour image collection notebook but this\ntime\nwe are now going to open up our training\nand detection notebook\nso there's a bunch of stuff that we're\ngoing to be going through this but we're\ngoing to go step\nby step so all up there are\n13 steps all together in this notebook\nbut we are going to go for our training\nsection at least\nwe are going to go up to step 7 so\nevaluate our model so we're going to\neffectively go through all of these\nsteps so by the end of this\nwe should have a trained object\ndetection model that we can then begin\nto use in\nour detection section so again we're\njust going to step into our first cell\nand we're going to run it so in this\ncase we're importing operating system as\nwell\nand then we're actually going to set up\nour pre-trained model variables so in\nthis case\nwe're defining what we want our custom\nmodel folder to be so\nagain when we go to our performance\ntuning model we might change this\nwe're setting up the name of our\npre-trained model so this is going to be\nthe name\nof the file that we download from our\ntensorflow model zoo which is over here\nso when we actually download this where\nis it\nlet me find it again so this particular\nfile here if so when we actually\ndownload it from here\nwhat you'll actually see is the file\nthat we get back is called ssd\nunderscore mobile net underscore v2 fpm\nlite\n320 by 320 coco 17 tpu-8\nso again this is something that i've\njust sort of pre-configured so again if\nyou wanted to customize this you could\nas well and then what i've also got in\nhere is the pre-trained model url so i\nwas saying before that we've got our\nmodel url now where i got this from\nis if i right click on this and copy\nthis link address\nwhat you'll actually see so i'm going\ninto a lot more detail in this than i\nnormally do and i sort of wanted to show\nyou\nhow i built these up so this link that\nwe've got here\nis the same right so you can see that\nthat's the exact same link so what we're\neffectively doing is we're going to be\ndownloading that model from the\ntensorflow model zoom\nand using it in here right so we've got\nthe name of the file so\nif we wanted to replace this we just\nneed to make sure that we get the name\nof the new file right so in this case we\ncan see that it's\ngoing to be ssd underscore mobile net\nunderscore v2 fp and light 320 by 320\nunderscore coco 17 underscore\ntpu-8.tar.gz\nso again if we got a different one we\ncould change this pre-trained model name\nor we'd need to change this pre-trained\nmodel name and this pre-trained\nmodel url but you don't need to stress\nabout this for now you can just leave it\nit's going to work\nand then we're setting up a few\ndifferent variables so we're setting up\na generate tf record script which we'll\ncome to later\nin our label map name which again we'll\ncome to later so i'm actually going to\nrun\nthrough this cell this cell this cell\nand this cell\nand what you'll actually notice now is\nthat we've actually got a couple of\nthings\nso this over here is going to create our\ndifferent paths\nso if i actually type in paths so this\njust makes it a whole heap\neasier to work with all of the stuff\nthat we've got available within\nour working directory so we're able to\nrefer to each one of these reasonably\neasily so say for example we wanted to\nget\nwhere our model is going to be we could\njust type in paths\ncheckpoint path and you can see that\nwe're now going to have that folder\nthere\nnow let me explain each one of these\nparts our workspace is going to be a\nhigh level workspace\nso let's open this up\nso our workspace is going to be this and\ninside of our workspace we're going to\nhave our annotations which is where\nwe're going to create our tf record\nfiles\nmore on that later images was already\nthere from when we collected our images\nwe also have our models folder and our\nmy ssd mobnet folder which represents\nthese two lines over let's find it\nso we've got our models folder which is\nthis and our which is our model path and\nwe've also got our checkpoint path which\nis this as well\nso if you actually take a look at\ncheckpoint path or if we type in model\npath first up\nthat is this folder here so tensorflow\nworkspace models\nwe type in checkpoint path\nthat is this folder here but again you\ndon't need to mess around with this i'm\nsort of just giving you a bit of an\nexplainer as to what each one of these\nare\nso each one of these represents a\ndifferent file path that we've got\navailable there so if you want to dig\ninto these a little bit more you can\nwe've also got a couple of variables\ninside of this files dictionary here so\nif we type in files\nyou can see that we've got a file for\nour pipeline config which we don't have\ncreated yet\nour tf record script and our label map\nbut again more on those later\nthis script down here is actually\ncreating all of that directory so you\ncan see before that we didn't have all\nof these directories created right\nso our script actually went and did that\nso if we actually now step into our\ntensorflow folder\nwe should now have five folders so our\nlabel image folder\nour models folder our pro talk folder\nagain more on that later a scripts\nfolder and our workspace folder\nand if you step into your workspace\nfolder you're gonna have a bunch more\navailable in there as well okay\nthat is our folder structure now set up\nnow the next thing that we're going to\ngo ahead and do is\nactually download our tensorflow models\nfrom our tensorflow model zoo\nand we're also going to install\ntensorflow object detection\nnow this tends to be where a lot of\npeople get stuck so we're actually going\nto take this step by step and i'm going\nto show you what to look for\nand how to validate that you've actually\ngot this successfully installed\nso again we're going to step into our\nfirst cell which is this one over here\nand we're going to hit shift enter\nand this is going to install a package\ncalled wget so this is just going to\nallow us to actually\npull down our model from tensorflow\nmodel zoom and then what we're going to\ndo is actually clone down\nthe tensorflow object detection\nrepository so if i copy this link here\nlet me actually show you that\nso this is the tensorflow model garden\nnow\ninside of here there is a bunch of stuff\nthat is available for tensorflow but\nspecifically we're interested in object\ndetection and when people refer to the\ntensorflow object detection api\nthis specific section which is in\nresearch\nand object detection is what they're\ntalking about so everything that's in\nhere is what represents\nthe tensorflow object detection api now\nagain you can see that there's a bunch\nof stuff that's available through here\nthere's\na whole bunch of documentation on this\nas well\nthere's also a bunch of open source\ntutorials that are out there but again\ni've\ntended to find this to be a little bit\ntricky to actually get through so again\nthis is why we're building up this\ncourse and while we're going to be going\nthrough it in great detail\nso what we're actually going to go on\nahead and do in that next line of code\nthat we're about to run\nis we're actually going to clone\neverything that you see here\nand we're going to clone it into this\nfolder so we're going to clone it into\ntensorflow\nor if we start off inside of our root\ndirectory so tensorflow object detection\ncourse\nwe're going to clone this model garden\nwhich is everything you see here\ninto tensorflow and then models so then\nwhat we're actually going to do is we're\ngoing to install it from there so if i\nrun this cell here it's going to do\nexactly that now this may take a little\nbit of time to run\ndepending on the speed of your internet\nso let's go on ahead and run that\nokay so that is our tensorflow model\ngarden now cloned\nso you can see in here that we've got a\nwhole bunch of stuff so we've got\ncommunity official orbit research so on\nand so forth\nthat is just mimicking this now again\nkeep in mind there's a lot of stuff in\nhere that you're not going to need for\nthis\nbut we're just cloning down the entire\nrepository so specifically we're going\nto need\ninside of the research folder inside of\nobject detection\nthis is us right here this is all the\nstuff that we're going to need to\nleverage\nthe tensorflow object detection model\napi or the tensorflow object detection\napi now keep in mind this is tensorflow\n2 so this is the latest version in\ntensorflow\nnot tensorflow 1. cool\nall righty so what are we going to do\nnow so we are going to then\ngo on ahead and install it so right now\nwe've just cloned it so if we take a\nlook let's minimize this\nwe've just cloned it into this\nrepository so again remember inside of\nresearch inside of object detection\nthis is all of the stuff that we're\ngoing to leverage\nnow what we actually need to do is\nactually run through the install step\nnow again there's a bunch of stuff\nrequired to actually go ahead and\ninstall this so\nif you do get stuck or if you do run\ninto issues by all means check the model\nguide\nbut i'm actually going to step you\nthrough how i actually go on ahead and\ninstall this stuff\nso the next cell is actually going to\nagain detect whether or not we're using\nlinux or whether or not we're installing\nwindows\nand it's going to do three things so\nit's at first up it's going to install\nprotoc\nso protoc so a lot of the tensorflow\nobject detection stuff using uses\nsomething called protocol buffers\nso if you actually type in protoc\nso what we're actually going to do is\nwe're going to set this up\nfor our tensorflow object detection api\nso again you don't need to do anything\nbut run that cell it's going to do it\nfor you\nnow normally this can be a little bit\ntedious so again it's just going to run\nthis cell and do it for us\nlocally so if we run this now it's going\nto install protoc\nand then it this line over here is\nactually going to go ahead and install\nthe official tensorflow object detection\napi\nthen what we'll do is we'll actually\nverify our installation so this script\ndown here so let's actually clear\nour output so we can see that so this\ncell down here is\nactually going to run our verification\nscript so this will tell us\nwhether or not we've actually got the\ntensorflow object detection api\ninstalled successfully\nif it is installed successfully you'll\nsee it read as okay so that will mean\nthat\nwe've successfully installed the object\ndetection api and we can kick things off\nif not i'm going to show you how to work\nthrough it and how to get it installed\nappropriately\nokay so what we're going to do now is we\nare going to run this cell over here\nso this going to install protox set it\nup and it's going to install the object\ndetection api so let's run this\nnow again this is going to take a little\nwhile to run and ideally\nif you're running inside of a notebook\non windows you might not get the status\nupdates but the way to check\nif it's currently running is if you go\ninto remember we're inside of our\nvirtual environment yes again make sure\nthat that's\nenabled and you're running it inside of\nthat particular notebook inside of that\nenvironment so what we're going to do is\nactually\nshow so i'll show you that so if we go\ninto our tfod\nfile now in the inside of libs site\npackages you'll actually see that it's\ninstalling packages so\nright now it's up to 10 30 or 11 30.\nso you can see it's installing a whole\nbunch of different libraries\nso what you should ideally see is that\nthis is continuously installing stuff\nnow it may say that it's successfully\ncompleted\nbut ideally what you want to do is until\nyou get an okay from that verification\nscript\nit hasn't successfully installed right\nso this is going to be\nyour golden bible so let's run the\nverification script\nso you can see here that it's saying\nthat there's no module named tensorflow\nso what we're going to do is run this\nnext line down here which actually\ninstalls tensorflow for us\nso what i did is i included some of the\nlines that i used to solve these errors\nso by running a verification script this\nis again a standard tensorflow object\ndetection script\nthat allows us to verify our\ninstallation so in this case it's\ntelling us hey\neven though we've gone and run that\nscript it doesn't look like we've got\ntensorflow installed\nso this next line down here is you might\nnot need to run it it might say\nokay and i'll show you what it looks\nlike when it's successful might work all\nperfectly if it doesn't then in this\ncase we're going to install tensorflow\nso let's do that\nand ideally you should start to see\ntensorflow installing on the right hand\nside\ncool so that should be tensorflow\ninstalled even though\nso right now keep in mind so sometimes\nyou can run into errors with this\nso even though we ran tensorflow\ninstalled it doesn't look like it's in\nsort tense flow so i can't actually see\nthe tensorflow\nfile or library there so tensorboard\ntensorboard plug-in tf models official\ntf slim\nso if we go and run this again it's\nstill gonna tell us no module installed\nor no\nmodule name tensorflow so run it again\nand again it should ideally install\nthe second time around don't ask me why\nit just seems like sometimes it throws\nup\ndoesn't seem to want to run so now it's\ninstalling a bunch of additional\npackages you can see tensorflow there\nso ideally this is looking a little bit\nbetter this time\nso let's wait and see\nso again that verification script is\nyour golden bible right so like if you\nget\nthe okay sign then you should be good to\ngo so in this case looks like it's still\ninstalling\nit's completed over here let's run our\nverification script again\nthat's looking a lot better this time so\nit didn't run really fast so ideally\nit'll take a little bit of time\nalright so we've now got an error called\nno module named matplotlib\nso this one it looks like again i've got\nthe script to run that\nnow again this no module found error is\npretty common so this just means that\nyou need to install a package\nnow i've got this again inside of the\nerror guide so if you get no module\nnamed whatever\nyou just need to go in ahead and install\nit sometimes you need to uninstall it\nand then reinstall it\nif you need to uninstall it's just pip\nuninstall and then whatever library you\nneed to uninstall and then dash yes and\nthen you install whichever one you want\nso in this case here i'm going to run\nthis next cell which does matplotlib and\nprotobuf for us\nokay that's looking good so you can see\nagain inside of our virtual environment\nthis is the advantage of having the\nvirtual environment you can actually see\nvisually what libraries are installed so\nthat's looks like it's gone and done\nthat let's go and run this verification\nscript again\nall right so no module named pil so\nlet's go ahead and install this so this\none is one that i didn't have\npre-configured right\nso we can do that so pip install\npi i believe pil is pillow right so\num so again if you get these types\nerrors you can just google them so no\nmodule named pill\njust means you need to install pillows\nand more often that they're not people\nare going to tell you to install pillows\npip and saw pillow right\nso let's go ahead and run that\ncool that looks like it's installed\nlet's run that now\nagain checking our verification script\nwhat are we getting now no module named\nyaml\nso this looks like it might not have\nlet's check out so let's run pip list\nnow\nso have we actually installed tensorflow\nbut 2.4.1 that's looking good okay\nall right so let's install yaml now\nand module named yaml so let's see how\nwe install that\nto install yaml we need to run\ni believe it's pi yaml yep so it looks\nlike so python piping saw pi ammo so\nlet's do that\nokay so that looks like it's installed\nyou can see payamal there so let's again\nrun our verification script\ni can hear my gpu spinning up right now\nso maybe that looks like a good sign so\nthis\nis looking good even though it's in red\nall right beautiful so we're good now\nif you get to the point where you run\nthis successfully and\nright down the bottom even though it's\nin red i know it doesn't look that great\nit should say okay so if it says okay\nthen that means you have successfully\ninstalled the tensorflow object\ndetection library right\nso basically this means that it's going\nto go and run all of its verification\ntests to make sure that it's actually\nworking and if it's run successfully you\nshould get okay down the bottom let me\nzoom in on that because that\nif you get to that point that's a huge\nwin right now you saw how i was solving\nthose arrows so if you've got no module\nx just go and install that module if\nyou've got no module y go and install\nthat module sometimes you need to\nuninstall stuff and reinstall stuff\nbut again if you get stuck hit me up in\nthe comments below join the discord\nserver\nbut ideally that's going to be the same\npattern right so if it says\nno module x you just go and install\nmodule x\nand because you're inside of your\nvirtual environment it's going to be\ninstalling in the correct place\nnow remember our virtual environment is\nup here so we're using tfod\nneed to make sure you're in there so\nwhat did we have to go and do to get\nours to run so we installed tensorflow\nagain we installed matplotlib and\nprotobuf and we installed\npillow so remember we installed pip\ninstall pillow and we also installed\npymel now again this might be different\ndepending on your particular environment\nyou might need to install more stuff\nless stuff it might just run perfectly\nfine\nbut i wanted to show you a real-life\ninstallation because this is me\ninstalling from scratch\nyou can start to see what it actually\ntakes to install it\nokay um so it's not all sunshine and\nrainbows that's i guess the the core\nthing that i wanted to point out so i'm\nnot just doing it in smoke and mirrors\nyou can see that you might run into\nstuff but more often than not it's just\na pip install that you need to do\nnow if we run import object detection\nyou might still see that you get a\nerror here where it says no module named\nobject detection\nwhat you can do to solve this is just\nrestart your kernel so first up let's\nclear all of our output from this so\nit's a little bit clearer\nif i run import object detection again\nit's still saying no module so what i\nnormally do here is i'll restart my\nnotebook so if i hit let me show you so\nif we go to up to kernel\nrestart and then i'll say restart\nyou can see it said kernel ready then\nwhat i'll do is i'll go up to here\nzoom out re-import these you don't need\nto do all of this again so we just need\nto run\nwget and then if we go down here\nyou can see that it's now installed\nsuccessfully sometimes you just need to\nrestart your kernel to be able to import\ninto your notebook and in that case\nthat's our object detection api\nnow installed and available and ready\nfor use so\nwe went and installed a bunch of stuff\nthere so if we run pip list you can see\nthat we have\na heap of additional libraries now\ninstalled now remember when i sort of\nsaid that if you\ninstall tensorflow and you want to use\nyour gpu you've got to install some\nadditional stuff\nwell in this case here we've got\ntensorflow 2.4.1\nso this is the equivalent of 2.4 like\nfalls into the 2.4.0 there is\ntensorflow 2.5.0 available at the moment\nso you just need to make sure that you\nfind the appropriate cuda\nand cud and then version for that now to\ndo that\nwhat i normally do is i'll go into\ngoogle and i'll just search for cuda\nwell let's take a look at what version\nwe need first so again we go to\ntenseflow.org\nforward slash install forward slash\nsource windows because i'm on a windows\nmachine\nwe could just as easily go back to the\nlinux and mac os page and do that\nin this case we're on windows so if i\nscroll down\nbecause i'm using 2.4.0 i need to have\nkuden 8 org and cuda 11 installed\nnow in this case i've already got it\ninstalled but i want to show you where\nto get it from so if we go to cuda 11\nif you just go to google and type in\ncuda 11 you can see that cuda toolkit\n11.0 is available so if i select that\nand then i choose my operating system so\nin this case i'm on windows\ni can choose version at what version of\nwindows and once i'm on windows 10\nnot server and then you can choose which\ntype of installer you want so you can\neither choose a network install or\na local install which downloads\neverything so if we choose\nnetwork install and then hit download\ni've already got this downloaded so we\ndon't need to wait there\nso once you've got it downloaded you\nshould get a file\ncalled this so you'll get a file let me\nmake that a little bit\nbigger so it's called cuda underscore\n11.02\nand then in my case it's windows so if\nyou actually double click that\nit'll walk you through the package\ninstallation and in this case it's going\nto install\ninto my cuda folder here so if i hit ok\nand then basically what i do is i just\nclick click and go through that cuda\ninstallation there's nothing too crazy\nthere\nright so you just hit next next next no\nissues so it's going to install cuda\ninto your machine\nso rather than sitting through this i'm\nactually going to show you the next step\nso\nonce you've gone through and installed\ncuda so again i've got the full insole\nvideo where i show up from scratch but\nbasically\nyou're gonna double click cuda install\nit walk through the installation\nthen what you need to do and this is the\nbit where it is a little bit more tricky\nso once you've got cuda you then need to\nget the matching insulation\nof c-u-d-n-n which in this case here is\ngoing to be cu dnn\n8.0 so again to find that and i'm\nshowing you how to find it on google\nrather than just giving you the direct\nlinks because these are going to\nconsistently change\nso if we type in cud and then and\nremember we needed what version do we\nneed\nwe need eight so i'm going to type in\ncud and then eight because again\nthese consistently change and in this\ncase\nthese are going to be available from the\nnvidia site just as we got from cuda as\nwell so we're going to go to\nnvidia cu dnn and we're going to look\nthere should be\nkudern8 let's see what's available there\nright so down here we've got a link to\ngtc now we won't see\ndownload cdn now in order to do this or\nnot in order to download cdn\n8 you're going to need a nvidia\ndeveloper account but it's free you just\nneed to sign up\nso i'm going to select download cu dnn\nand then we need to log in so this is\nwhy you need the developer program\nmembership so in this case i can log in\nand then log in so do the captcha so\nwhat are doing trucks\nand then it should allow you to actually\ngo ahead and download\ndownload cu dnn now you do need both but\nonly if you're training on a gpu if you\ndon't have a gpu on your local machine\nyou don't need to go ahead and do this\nso in order to download it you just need\nto hit i agree to the terms\nand then you're looking for the version\nthat you need so in this case there's\ntwo versions available here\nso there's cu dnn v8 for cuda 11 and\nthere's cu dnn\nv8.1 for cuda 10.2 so remember that we\nhad\nfor our particular version of tensorflow\nwhich is 2.4.x\nwe need cudn 8 for cuda 11. so in this\ncase we\nare going to get cu dnn which i believe\nthat's\nv8 1.1 so we actually need to go find a\ndifferent version right so it's cud\nand then eight dot zero\nand let's find it so in this case we're\ngoing to go to the archive\nall right so this is looking better so\nyou can see here that we've got a bunch\nof eight versions so rather than having\n8.1 again these are going to\nconsistently come out with new versions\nso we need this one over here so we've\ngot\ncuda 11 which is over there and we've\ngot cu dnn\nv8.05 so we can download this just find\nthe version for your machine\nso in this case we've got cdnn library\nfor windows x86 so i can download that\nand that's going to download so in this\ncase again i've already got this\ninstalled so we can cancel that\nso it's going to look a little something\nlike\nthis so it looks like i've got 11.2 here\nbut\nwhat do we need c u d and then\nokay i guess this one must have worked\nall right so it's going to look a little\nbit like this so we've got c u d and\nthen\nand it's a zipped file so what you want\nto do is extract it and in this case i'm\njust going to extract it here\nand then what we're going to do is we're\ngoing to copy the cu d and then files\ninto their respective folders inside of\nour cuda installation location\nthat was probably a bit of a mouthful\nbut basically you're just copying and\npasting stuff\nokay so we've got our stuff extracted so\nwhich one is it it's this one here\nso if i double click into it now you can\nsee inside of cuda i'm going to have a\nbin folder which has a whole bunch of\ncud and then\nstuff an includes folder which again has\na bunch of cu dnn stuff and a lib folder\nwhich again\nhas a bunch of cu d and n stuff what we\nneed to do\nis open this or is copy those folders\ninto our cuda folder so if i actually\nshow you what mine looks like\nso if we go and find nvidia and i\nbelieve\nit's inside of this folder called nvidia\ngpu computing toolkit so i've got cuda\ni've got a bunch of versions\npre-installed\ninside of my bin folder i just copy\nthese bin files\nso i'd copy all of those over now i've\nalready got them done so\ni'm good to go but you can see that i've\nalready got these available here\nso i've copied these cdn and files into\nthe bin file inside of my kudo directory\nagain if i go back\ni'll have to do it for my include file\nso again\ninclude do the same thing so i've got\nthey should be in here so you can see\nthat i've got all the cdn files\ni've just copied those into here and\nagain likewise you've got to do it for\nthe lib\nx86\nlib x86 and again we're just doing it\nback in here so you can see i've got c\nall of these cu dnn files again i've\njust copied these over into the\nrespective cuda folder so once that's\ndone on your windows machine you just\nneed to do one\nlast thing and make sure that it's added\nto your path so in this case if i\nopen up my properties go to advanced\nsystem settings environment variables\nand then go to my path you can see i've\ngot my bin folder\nor the path to my bin folder the path to\nmy lib nvp folder\nand the path to my cup ti folder so\nthere should be three\nso this one this one and this one i\ndon't know let's see if we can make that\na bit bigger there you go\nso these three file paths are the ones\nthat you're going to need added it to\nyour path on a windows machine\nin order to enable this to work so again\nthis is just pointing to this particular\nfolder over here so if i go\nin let's make this a little bit easier\nto see\nso we are pointing to our so nvidia gpu\nand then see some pointing of v11 and\nthen bin\nand then you can see i'm pointing to\nso my bin folder which is this one my\nvvp folder which is this one\nand then my cup ti folder so if i go\nback in\nso it's under extras cup ti\nand then lib xx86 or that doesn't\nactually look like that one's\nbeen defined right that's a bit better\nlib64 cool so that should be all good\nbut again i'll show you how to check\nwhether or not that's working\nwhen we actually go to train so you'll\nbe able to actually see whether or not\nit's picking up the appropriate version\nof cuda\nso that's sort of just an extra\nin-source step that you need to go\nthrough\nif you want to train on your gpu if you\ndon't have a gpu on your machine\nshould be good to go don't need to worry\nabout that\nbut that is our installation done now\nmore often than not that can be a bit of\na nightmare process but you can start to\nsee that\nthere is a flow to it so go through run\nthrough your install\ntest your verification script and then\njust keep running through to make sure\nthat you\neffectively get that okay symbol at the\nend when you run your verification\nscript so again we can actually run this\nagain\nand ideally what we should get is that\nokay symbol or that okay\nstatus right at the end even though it's\nin bright red as long as you get the\nokay at the bottom you should be good to\ngo so let's run this\nand keep in mind we restarted our kernel\nso even though we restarted we should\nstill see\nthat okay pop up and again\nlooks like it's okay so we're inside of\nour virtual environment we've got our\nokay status popping up\nwe're good to go all right so we are now\nup to this cell down here\nso this cell over here is actually going\nto download our\nmodel from the tensorflow model zoo so\nif we cast our minds back\nour tensorflow model zoo was this one\nover here so remember\nwe've got a whole heap of models that we\ncan already use for our training\nnow the reason that we do this is\nbecause one we get a\nstate-of-the-art architecture that we\ncan use and two\nwe're going to be leveraging a technique\ncalled transfer learning\nnow out of the box we can actually use\nthese models to do standard object\ndetection so this is detecting just\ngeneric objects so\na phone a bottle a towel so on and so\nforth\nwhat we're going to do is we're going to\nleverage what that machine learning\nmodel or what that deep learning model\nalready knows\nto be able to transfer that knowledge\nover and detect custom objects so in\nthis case we're going to be detecting\nour different hand poses\nright so the reason that we're using\nthat architecture is mainly for those\ntwo reasons\nnow what we're going to do is we're\ngoing to run this cell\nand again it's checking which operating\nsystem we're in\nit's then using wget to get it from our\npre-trained model url which is what we\ndefined\nup here and i'll show you how to do a\nmore sophisticated or a different model\nonce we get to our performance tuning\nsection\nso now that that is ideally what should\nhappen is that this particular cell\nover here is going to clone down that\nmodel from tensorflow model zoo\nand it's going to paste it or put it\ninside of a specific folder\nso if you go into tensorflow workspace\npre-trained models\nyou can see that it's actually gone and\ncloned down that model into that\nspecific folder and this is why i\ndefined the name of that folder earlier\non because we are actually going to be\nleveraging all of the stuff that it's in\nhere\nso inside of that folder let's go back\nyou're going to have\nthe clone of repository so in this case\nit's just copied down\nthe compressed file it's then untied\nthat file so that is\nlet me just bring that over here it's\nthen\nuntied it which is over here and it's\nalso\nmoved that particular file into this\nworkspace so now you should\nideally have all of this so you've got a\ncheckpoint folder which contains all of\nthe different checkpoints for your file\nthink of this as the different saved\ncomponents to your\nmodel or the pre-trained model you've\ngot a saved model.protobar file and a\nvariables file so again this is\neverything that you get when you\nactually\nfreeze your model and again i'm going to\nshow you how to do this later on for\nyour own custom model as well but just\nthink of this\nas your pre-trained model that you're\ngoing to be able to leverage for your\ncustom object detection\nso that's good now now the next thing\nthat we want to do is create something\ncalled a label map\nso a label map effectively represents a\nmap of all your different labels so\nremember we had thumbs\nup thumbs down thank you and live long\nnow i've already got these written here\nright so i've got thumbs up thumbs down\nthank you and live long so let's go\nahead and run this this should run\nsuccessfully\nso no errors there so if we go into our\nworkspace\nso this is going to be written into our\nfiles label map file which was defined\nover here so it's going to be inside of\nannotation path and then the label map\nname\nand our annotation path is annotations\nand then a label map is named\nlabel map and or dot pb text so if we\nopen this up\nyou can see we've got a item for each\none of our objects so thumbs up thumbs\ndown thank you\nlive long now remember when i said the\ncase was really really important\nthis is why so when we go the next step\nthat we're going to normally run through\nis actually creating our tf records so\nwhat this actually does is it creates a\nfile format which is called a tf record\nwhich is available to be used to\nactually go ahead and train your object\ndetection model so if we go\ninto these next two lines so you can\nskip this one over here so this is only\nused if you're training on collab\nso if we go and run this tf record\nscript which is there\nthis is going to run a or clone a file\nfrom my github which is called generate\ntf record so let me show you that\nso it's going to clone this file and\nthis is the file that generates your tf\nrecords\nagain you don't need to go into a great\namount of detail for what that actually\ndoes just know that it's converting\nyour annotations in your images into a\nfile format that it can use\nso if i run this cell it's going to\nclone it down\nand then you should ideally have a file\nso if you go into workspace and then\nwhere\nis this this is in tensorflow sorry\nscripts should get that file so generate\ntf\nrecord or generate underscore tier of\nrecord so that's now available there\nnow what we're going to do is run this\nfile here so i'm going to show you once\nrunning without errors and then i'm\ngoing to screw up a label map to show\nyou why\nthe case is so important so if i run\nthis\noh it looks like we've got another\nmodule error so in this case we've got a\nmodule error so what do we do when we go\nto module error\njust going ahead and install that so it\nlooks like it's pi tz so let's check how\nto install that\nso it looks like we just need to pip\ninstall pi tz so let's go ahead and do\nthat\nso again if you get any of those no\nmodule errors you just need to install\nit\nsee if that runs now okay that's looking\nlike it's running successfully\nso again to solve that error it was a no\nmodule error so to solve that we just\ninstall the module\nand then when we run our tf record\nscript what it's actually going to do is\ngo on ahead\nand create so if we go into our\ntensorflow workspace annotations file\nwe've now got a train and a test record\nso these are what are going to be used\nto actually train our model\nnow if i screw up our label map right so\nsay for example i take off\nthe capital u from our thumbs up label\nthis is going to screw up that\ngeneration so if i go and run\nour generate script again watch this\nso you can see that we've got this key\nerror so here are thumbs up\nand then kiara thumbs up so this is\nbecause we have\nincluded the incorrect label so it is\ncase sensitive so you need to make sure\nthat the case is correct\nso if i go and fix that up now and\nchange\nour label name to thumbs up and rerun\nthat again\nso this should now run successfully and\nagain no issues\ncool now the next thing that we're going\nto do is pretty straightforward so now\nwhat we're going to do is just go\nand copy our model config so our model\nconfig\nis so remember there were a bunch of\ndifferent types of let's just close this\nand this and this\nso there are a bunch of different types\nof models inside of our tensorflow model\nzoo\nnow the pipeline config is what controls\nwhat your model actually looks like so\nif i go\ninto let's start from the start\nso tensorflow workspace pre-trained\nmodels\nssd mobile net underscore v2 underscore\nfp and light underscore 320 by 320\nunderscore coco 17 underscore tpu-8\nthis pipeline file over here is what\ndefines the architecture of your model\nand what it actually looks like\nnow what we're going to do is we're\ngoing to customize this for our specific\nmodel but\nthis sort of gives you a baseline so in\nhere you're going to have the number of\nclasses\nyou're going to have that image resizer\nwhich i was talking about so remember it\nresizes it\n320x320 your feature extractor\none that i particularly like is\npost processing no data augmentation so\nyou can see here that it actually does\nyour data augmentation for you\nthis is important because i'll show you\nin some of the other models later on\nyou'll get a slightly\ndifferent data augmentation architecture\nthis is just important to note that it\ngives you some pre-built data\naugmentation\ninside of your model if you scroll down\nyou can see that you've got all of these\npath to be configured components so we\nactually need to update these\nwith our components for our model so we\nneed to update fine tune checkpoint\nwe need to update our label map path our\ninput path our label map path and our\ninput path\nour label map path is our label map dot\npb text so that's what we created\nand our input path in this case our\ntrain input reader or our train input\npath\nis going to be our train dot record file\nwhich is\nlet's go back which is this file here\nand a test input file\nwhich is what's being referred to or our\neval input file\nwhich is what's being referred to down\nhere is going to be our test file\nbut again you don't need to worry about\nthis i just wanted to give you a little\nbit of additional background\nour code is going to do that for us so\nif we go and step through\nso first up what we're going to do is\ncopy that pipeline file from our\npre-trained models folder\nso we'll copy it from here\ninto our my ssdmobnet folder so if we\nrun that\nyou can see that that's now being copied\nand then the next sets of code are\nactually just going to do\nall of that configuration for it so if\nwe actually just step through all of\nthat\nright so it's opened up our config file\nit's gone and\nset all of our different file paths and\nit's gone and saved it so if i open up\nour\ncustomize one now what you'll see\nis that it's going to change the number\nof classes so this represents the number\nof different types of objects we're\ngoing to use if we scroll on down\nlet's close this\nyou can see that we've actually also\ngone and set up our different\npaths so we've gone and set up our fine\ntune checkpoint our label map path our\ninput path\nso on and so forth so set that up set\nthat up set that up\nso this is now all configured and pretty\nmuch good to go for us to kick off\ntraining so if we close this now\nwhat we can actually do is actually\nstart training our model so we're now\nfinally\nup to the good bit so before we actually\ngo and train our model let's take a look\nat what we've done because we have done\nquite a fair bit so we set up all of our\npaths\nwe downloaded and installed the\ntensorflow object detection\napi so remember we had to go through a\nnumber of iterations but as long as your\nverification script says okay we are\ngood to go\nwe then went and downloaded our\npre-trained model from the tensorflow\nmodel zoo\nwe created our label map and remember\nthat is\ninside of our workspace annotations and\nthen label map\ndot pb text so if i open that up it's\nreally just this\nwe then created our tf records which\nagain are our test\nand our train files we copied our config\nto our training folder and then updated\nthat so again that's all just code\ndriven you don't need to do anything\nthere\nnow we're up to the good bit training\nour model so in this case what we're\ngoing to do is hit shift enter\nshift enter and then print out our\ncommand now i'm going to run this\noutside of a notebook so that's going to\nallow us to see our progress\nas our model is actually training now if\nyou run it inside of the notebook the\nonly disadvantage is that\nparticularly on a windows machine you're\nnot going to see the status update in\nreal time\nso i'm going to copy this over here\nand then i'm going to open up a new\ncommand prompt\nthen navigate to where i've got my root\ntensorflow object detection course\nfolder so let's do that\nand i'm going to go into tfod course\nall right cool so we want to be in this\ntop level folder so you should ideally\nsee the tensorflow folder so let's clear\nthat\nnow what we need to do again is remember\nwe need to activate our environment so\nto do that we can do\nbackward slash tfod\nbackward slash scripts backward slash\nactivate\nnow if we type that so again we're still\ninside of our tensorflow folder\nnow what we can do is we can actually\ncopy that command so let me just explain\nthat command a little bit\nso the first thing is actually running\nour model training script\nso what it's doing is it's using the\nmodel underscore main\nunderscore tf2 dot pyscript now again\ni'm going to this\ninto a little bit more detail than i\nusually would because i really want to\nexplain to you how this actually works\nso what it's actually doing is it's\ngoing into tensorflow\nmodels research object detection\nand then it's running this script down\nhere model main underscore tf2\nprobably a little bit small to see so\nmodel main tf2 down there\nthat was probably obscured by me so it's\nrunning that over there so model main\nunderscore tf2 so that is\nthis component here so it's running that\nthen we're passing through a number of\narguments so first up we're passing\nthrough our model directory so this is\nwhere our pipeline.config file is\nremember our pipeline config had all of\nour custom paths\nhad a number of our labels and had all\nof our different details of the specific\nobject that we're going to use then we\nare passing through our actual pipeline\nconfig\nand we're also passing through the\nnumber of training steps that we want to\ngo ahead and run through so in this case\nwe should be good to go now so we're\ngoing to copy this command\nand we are going to paste it into that\nnew command prompt so let's clear that\nand keep in mind we've activated our\nvirtual environment so your virtual\nenvironment has to be activated\notherwise you're not going to be able to\nleverage all of that tensorflow object\ndetection stuff that you've gone ahead\nand insert so if we paste that command\nin there now\noh the last the last parameter is the\nnumber of training steps so you can\nincrease this or decrease this ideally i\nnormally set it to 2000 for my first\nprototyping step\nthen i'll go and clear out all my\ntraining and then i'll set it to 10 000\nwhen i come to do my actual training run\nso let's go ahead and run that\nand ideally so you can see that it's\nsuccessfully opened\nand looks like we've got an error there\nokay this is good cool\nso we've got this area here so value\nerror numpy and d array size change may\nindicate binary incompatibility\nexpected 88 from c header got 80 from pi\nobjects if we copy this\nand again go into our error guide\nand search for that you can see that\nthat particular error is solved by\nreinstalling pi coco tools so let's go\nahead and do this so we can pip and\ninstall pi coco tool so let's copy that\ncool so that's it uninstalled and then\nwe can reinstall it\nokay so in spite of these that looks\nfine\nso it says it's successfully installed\nby coco tools again\nso let's go ahead and paste in our\ncommand again\nso if we go back to our notebook we can\ncopy this\nno module named tensorflow add-on so\nagain this is a no module error so we\nshould be able to pip install\ntensorflow add-ons\nnow let's try it running a command\nno module named gin all right so this\nthese no module errors are specifically\nattached to the tensorflow version so\nlet's just type in pip list first up\nso even though we've got tensorflow\n2.4.1 tensorflow estimator\nso let's run let's install gin so pip\ninstall\ngin\ntry our training command again\nso let's search for that one\nlooks like i've encountered that one\nagain and it looks like\nwe need to downgrade so let's do that so\nlet's pip install\ngen config 0.1.1 so let's try that\nlet's try this\nokay that's looking good so it looks\nlike we sorted through those errors and\nagain no more dual errors are normally\njust solved by installing the right\nlibrary\nif you can't find the right library just\ntake a look google around see what\npeople have done and more often than not\nthese are common errors\nso in this case we just needed to\ninstall or pip install gin config\nbut now you can see that this is\nactually running or well i know from\nexperience that this is actually running\nnow so what you're going to see\nis first up if you're running on a gpu\nthat your gpu memory is taken up so you\ncan see that\nlet me bring this over to this side so\nyou can see that i'm now using the full\neight gigs on my gpu\nand ideally in a couple of seconds you\nshould start to see\nour loss metrics showing up\nnow one of the things i actually just\nnoticed is that we didn't actually have\ntensorflow gpu installed so it was\ntaking a long time\nfor that training to kick off which was\na little bit weird to be honest so\nnormally it should take no more than\n15 10 to 15 seconds to actually kick off\nso what we're going to do\nis we're going to so i actually just\ninstalled tensorflow and then what we're\ngoing to do is make sure that we've got\nthe right versions of tensorflow and\ntensorflow gp installed so we'll install\npip\ninstall tensorflow\nand we add 2.4.1 and we're going to\ninstall tensorflow gpu as well because\nyou need\ntensorflow gpu to leverage the gpu so\nrun tensorflow\ndash gpu equals 2.4.1 so even though\nour verification script is fine we do\nstill need tensorflow gpu so\nbefore it was fine to run on cpu to\nleverage the gpu we need tensorflow dash\ngpu so let's\ngo ahead and install that\nand give that a couple of moments to\ninstall\nand ideally we should see that we've got\ntensorflow gpu installed\nso if you kick off your training and you\ndo have a gpu you've set up cuda and cu\ndnn\nthe next thing to check if it's not\nkicking off on your gpu or not starting\nthe train relatively fast\nis whether or not you've got tensorflow\ngpu installed so then we're going to\ncopy our command\nand now you should see that our training\nkicks off a lot faster let's clear this\npaste that in and let's see how long\nthis takes now\nso if it takes a long time double check\nthat as well so whether or not you've\ngot tensorflow gpu installed\nso these are all pretty normal outputs\njust looking positive\nso when it sort of gets to this line and\nagain it might be a little bit different\ndepending on what you're training on so\nuse\nfn underscore output underscore\nsignature instead\nso normally that means that it sort of\ngot to the next step so ideally what you\nshould see is the loss metrics appear\nafter this\nso let's wait and see\nsort of stalls we'll restart it no there\nyou go all right cool so that looks like\nit's kicked it off so you can see that\nnow we're getting these metrics here so\nbasically after every 100 steps this is\ngoing to be printed out\nso you'll get step 100 per time so\nyou'll get the time per step so in this\ncase it's 0.82\ns or seconds we've also got the loss so\nin this case our loss\nis 0.693 now if you cast your minds back\nto\nour evaluation set what we're saying is\nthat you want your loss to be as low as\npossible\nyour mean precision and your or your\nmean average precision as well as your\nrecall to be as high as possible\nso in this case we're going to let this\nrun so ideally you're going to see this\noutput after every\n100 steps so in this case we've got our\nfirst 100 steps and if we also take a\nlook\nyou can see that we've got our\ncheckpoints starting to generate here as\nwell so we're looking good for now we're\ngoing to let that run\nand we'll see how we go so ideally\nremember we we kicked off our training\nfor 2000 steps in our training command\nwhich is right up\nhere so we had 2000 training steps\nideally after 2000 training steps we\nshould have our fully trained model so\nlet's let that run and then we'll come\nback and take a look and do some\ndetections\nso that is our model fully trained so\nyou can see that we got up to step 2000\nand our final loss let me bring this\nover to this side and our final loss\nwas 0.188 now if you also take a look\ninside of our my ssd mob net you can\nalso see that we've got all of our\ncheckpoints generated\nso we've now effectively gone through\nand trained our model\nnow what we can do is actually go and\nevaluate it so remember how sort of\nsaying you've got your mean\nprecision metric so you've got precision\nand recall\nwe can actually go and calculate these\nusing the tensorflow object detection\nlibrary\nso what we can do is run our evaluation\nscript so if we go\nand run our evaluation script model so\nwe've gone and done\nstep six and again our model is\nsuccessfully trained so it didn't take\ntoo long what did it take\num so 0.153 seconds per step so again it\ngot pretty fast on the gpu\nnow what we can go on ahead and do is\nevaluate it so if we go to step 7\nhit shift enter print out that command\nnow we can actually run this one\nuh we'll run it using our command prompt\nso we'll copy that so if we go and paste\nthat command again so we're making sure\nthat we're inside of our virtual\nenvironment\nwe can go and paste this hit enter and\nthis is actually going to go on ahead\nand calculate\nour performance metrics for the model\nthat we've currently got in that folder\nso again it's going to go through all of\nthese different lines\nwrite out a bunch of stuff and ideally\nwhat you should see towards the end of\nit\nis that you get this little table that\ngives you all of your performance\nmetrics\nand there you go so you can see here\nthat we're getting our\naverage precision our average recall we\nshould get some\nloss metrics as well so they're down\nhere so you can see that we've got a\nbunch of loss metrics\nbut i'd pay most attention to these ones\nup here so you can see here\nthat our average precision at 0.5 to\n0.95 iu so\npay attention to this is 0.688 so again\nit's not the highest precision but it's\nnot too bad\nour recall is about 70 so again not too\nbad given the fact that we only gave it\nwhat like five or six images\nper class so again not too bad right now\nwhat you can also do is you can\nalso open up these same detection\nmetrics as well as the loss metrics\nusing tensorboard so if you haven't\nworked with tensorboard before basically\nit's an interactive monitoring tool that\ncomes\nwell that is open source through\ntensorflow so what we can do in order to\nuse that\nso we can just step out of this by\nhitting control c\nis inside of our my ssd mob net folder\nyou've got two folders which i haven't\nreally talked about yet so\nyou've got this train folder that's\ngenerated when you kick off your model\ntraining\nand you've also got this eval folder\nwhich is generated once you go and run\nthis evaluation script so effectively uh\nscript the script under 7 evaluate the\nmodel so these two folders are going to\nbe generated after training and after\nevaluation\nnow what you can actually do is you can\nactually step into these folders and\nspin up tensorboard so let's go ahead\nand do this so right now\nwe are in our root folder so we can go\ninto tensorflow\nand then we can go into workspace\nand then i believe cd models\nand then we want to go into our my ssd\nmob net folder\nthis is probably going to be right down\nin the corner cd my\nst mob net\nand now we're going to have this train\nfolder\nand this eval folder so if we go into\nlet's do train first because train is\ngoing to\nif you open up tensorboard inside of the\ntrain folder you're going to get lost\nmetrics\nif you open it up inside of the eval\nfolder you're actually going to get your\nevaluation metrics so let's do a train\nfolder cd train\nand then the command that you want to\nwrite in order to open up tensboard is\ntensorboard\nit's right down the bottom let's clear\nthis first\ntensorboard dash\nlog dear equals dot\nso this is going to open up tensorboard\nin the current folder so if we do that\nand i've typed in tensorboard wrong\nthis should open up tensorboard and\ntensorboards installed when you install\ntensorflow\nthen what you can do is you can go to\nthis url here so localhost\n6006\nand this is going to open up tensorboard\nso through here you can see all of your\nloss metrics so you can see that over\ntime the loss is reduced\nand remember we want loss to be lower\nbecause loss a reduced loss indicates\nit's performing\nbetter on our training data so in this\ncase you can see our classification loss\nand localization loss and our normalized\nloss so you sort of want these to be in\nan\ninverse hockey stick trend so starting\nup high and then dropping low\nnow this is all well and good but you're\nprobably more interested on the\nevaluation metric so again\nyou can sort of navigate through this\nyou can also see the images that we've\ngone and use\nso our train images and these are our\ndifferent samples\nyou can adjust your brightness and this\nis just viewing them at the moment as\nwell right\ncool but what we actually want to do is\ntake a look at our evaluation metric so\nif we step out of this\nand if we rather than being inside of\nour train folder\nif we go back and go into our eval\nfolder\nso remember that is this folder over\nhere\nwe can run tensorboard again and this is\ngoing to give us\na slightly different view so again we're\njust going to run tensorboard dash dash\nlog dr equals dot so remember this is\nimportant because it represents the\ncurrent folder\nand again so it's going to open up\ntensorboard it'll start up it's running\nat the same url so http\nlocalhost 6006. so we can actually just\nrefresh this\nand you can see that this is giving us\nour evaluation metrics now so you can\nsee\nthat our mean average precision is 6.876\ndown the bottom there so it's a little\nbit hard to see\nand now what is this metric over here\nthis is again our precision\nwe can close this we've also got our\nrecall which is 70\nagain these are the same metrics that\nyou saw when we ran our evaluation\nscript\nnow what we can also do is we can run\nthis after every training run so we'll\nactually be able to see what our\nperformance looks like\nover time as well so again you've got\nthe ability to do that you can also view\nyour loss\nas well here so this gives you your\ntesting loss on these particular\nsets of data you can also view your\nimages again\nthis sort of gives you an idea of our\nreal-time performance\nagain you can see that this is what it's\nactually going to look like when it\ncomes to actually go and detect our\nmodels and it looks like it's detecting\npretty accurately so that is thumbs down\nthat is thank you that is live long this\none looks like it's gone\nand had a little bit of an issue with\nthank you there but thumbs up looks like\nit's performing all right\nand eve side by side alright looks like\ni got a little crazy there as well\nso all right so that looks all well and\ngood so that gives you an idea of how to\ntrain and evaluate your model as well\nnow on that note we are now up to\ndetecting objects so first up what we're\ngoing to do is we're going to detect our\nobject\nor detect an object with an image so\nthis particularly useful if you're\ndetecting from a cloud provider that\ndoesn't actually have\naccess to a sensor like a webcam or in\nthis case a microscope\nso we're going to detect using an image\nbut then we're also going to detect in\nreal time so we'll be able to throw up\ndifferent symbols so live long thumbs up\nso on and so forth\nand we'll actually be able to see those\ndetections in real time\nonce that's done the last thing that\nwe're going to do is freeze our graph\nand then export so let's go ahead\nand perform our detections and then\nwe'll run through our last step\nwhich is going ahead and freezing and\nexporting our graph and then we've\nobviously got our projects and\nperformance tuning as well\nso let's step back so again using our\nsame\nnotebook what we can do is we'll just\nkill off our tensorboard instance so\nthis doesn't use up our gpu\nso what we can now do is we can actually\nload our trained model from our\ncheckpoint so we've now gone through\nlet's quickly recap\nso we've set up our paths under step\nzero so we downloaded our pre-trained\nmodel and install tensorflow object\ndetection\nwe created our label map and remember\nthis is just a set of labels that\nrepresent our different\nobjects that we want to detect created\nour tf records\ncopied our config and set that up we\nthen went and trained our model using\nthe command\nprompt and evaluated as well the next\nthing that we're going to do is\nload our model so now if you go into\nyour pre-trained model folder or your\ntrained model folder\nwhich is the my ssd mob net folder so\nremember if we go into tfod\ntensorflow workspace models my ssd mob\nnet this\nis your custom model right so everything\nin here represents your trained custom\nmodel so if you wanted to give this to\nsomeone else\nyou'd be giving them this folder because\nit contains your pipeline\nand all of your checkpoints now the\nlatest checkpoint that we can see here\nis checkpoint three so this is our most\ntrained model\nif you train for longer you'd ideally\nget checkpoints with greater numbers as\nwell\nso what we're going to do is we're going\nto run that particular cell so the\nimport\nand then we're going to change this line\nhere which you can see it says\ncheckpoint 5 to checkpoint 3\nbecause that is our latest checkpoint so\nwe can run this and\nset it up that's going to import our\nlatest checkpoint and then what we can\ndo is actually detect from an image so\nlet's go ahead and import that\ndependency under step 9\nset up our category index and then we'll\ngrab an image so let's go\ninto our workspace\nnow images and we'll grab a test image\nso let's grab this one over here so i'm\njust going to grab\nthe name of that image and i'm going to\nreplace it\nover here right so basically inside of\nthis line here so\nunder step 9 we've got the third cell\nwhich is image path\nequals os.path.join we're basically just\nresetting the path to that image so if i\ntype out image path now\nright it's just the path to that\nparticular test image that we had there\nso if i go and take a look\nso basically the full file path\nis tensorflow object detection tfod\ncourse tensorflow workspace images test\ntensorflow workspace images test and\nthen that particular image so we're good\nto go\nso now what we can do is run this cell\nand this is actually going to run\nobject detection on that image and print\nout our results which we should\nsee here in a second so let's give that\na sec\nand there you go so you can see right\ndown there\nit's gone and accurately detected that\nthat particular symbol is live long with\na 98\nconfidence metric so again we could do\nthis on a different image if we wanted\nto\nso let's grab another one let's grab\nthank you so if we grab that\nlabel we'll grab that image name and\nreplace this\nrun this again we can delete that now\nso again that's detected thank you\nsuccessfully let's try another one\nthumbs up\nso again all i'm doing is i'm changing\nthe part to that image if you had your\nimages somewhere else you could do that\nas well\nsince it accurately detected thumbs up\n86 percent confidence so\nnot the greatest on that one this thumbs\nup the thumbs up was the one that we\ntook new images of as well wasn't it so\nagain we could performance tune there\nand let's do thumbs down\nokay so not too bad so 100 on thumbs\ndown so that gives you an idea of how to\ndo it with images now basically what\nwe're doing here is we're loading the\nimage\ninto python we're creating it or\nconverting it to a tensor\nand running our detection so this line\nover here is actually using our\ndetection function which we\nimported and then it's going ahead\nmaking those detections and then\nvisualizing it so again if you'd like to\nsee me explain this in more detail or\nmaybe even code it up from scratch\nby all means do leave a mention in the\ncomments below i'd love to hear your\nfeedback\nokay so those are our detections so\nthat's all great now the next thing that\nwe actually want to do is make some\nreal-time detections from our webcam so\nlet's go on ahead and run this cell\nunder step 10.\nnow i'm going to not run this cell which\nis pip uninstall opencv dash\npython-headless\ndash y we'll come back to that in a\nsecond and that's normally a resolution\nto\na pretty common error but let's go ahead\nand run our real-time capture and see\nhow we go\nso it looks like it's running\nokay so it looks like it's got our feed\nso it's got live long\nthumbs up thumbs down that's actually\nreally really good considering we only\ntrained for 2000 steps with not a whole\nheap of images that's actually\nperforming really well so live long\nthumbs up thumbs down thank you let's\nsee what it looks like with the green\nscreen down because remember we didn't\ntrain with this\nso live long still performing well\nthumbs up\nthumbs down thank you\nwhat if we did a joint\nso thumbs up so thumbs up is not\nperforming the best\nbut if we did live long you can see\nthere that\nbecause we maybe haven't done too many\nimages trained on\nso let's do thumbs up so all right so\nagain so you can see that the\nperformance\nisn't so good when we try to change it\nor use different hands so\nokay that maybe that's performing not\ntoo bad so thumbs up isn't performing\nwell with this particular hand so again\nwe might add\nsome additional images we might add\nimages of each hand but again that's\nperforming reasonably well right and\nlike this is dual hand right now so it's\nit's not too bad thank you it's\nperforming okay\nhow about live long so live long on this\nhand\nyeah pretty cool but that sort of gives\nyou an idea of what's possible right so\nlike really really quickly we've built\nan object detection model that's able to\ndetect\na bunch of stuff so thumbs up is\nperfectly fine\nor is it the thumbs down\nokay it's not so bad maybe it needs to\nbe a little bit closer to the camera\nbut again these are the things that you\ncould additionally train for so we could\nadd\nmore images of closer to the camera we\ncould add more images of this hand doing\nlive long sort of gives you an idea of\nhow you can performance tune and\nupdate your model to be able to perform\nbetter now if you want to quit\nout of this all you need to do is hit q\nand that's going to close it off\nbut again that sort of gives you an idea\nof what's possible with real-time object\ndetection\nalrighty so we've now gone and also made\ndetections\nusing an image as well as using a webcam\nnow you can also do this with an\nexisting video feed or\nan existing video if you'd like to see\nme do a video on that by all means\nmention it in the comments below i'd\nlove to hear your feedback\nall right so this brings us to\nfreezing and conversion so part five\nfreezing and conversion so now what\nwe're going to do\nis freeze our graph and again as i was\nsort of saying\nfreezing your graph is the equivalent of\nsaving a slice of your model or\neffectively saving it down\nso that you can use it next time so\nwe're going to freeze our graph\nwe're also going to export it to\ntensorflow.js so if we wanted to use it\nlater\nand we're also going to export it to\ntier flight and we'll eventually use\nthis in our raspberry pi project\nwe'll use our tfjs export for our web\napp\nnow these are all reasonably\nstraightforward so i've just got step\n10 11 and 12. all you need to do is run\nthrough these and it's going to freeze\nyour graph so let's go ahead and run\nthis\nand i'm not going to copy this command\noutside of the notebook it's probably\njust easier to run it here\nand once you've frozen your graph this\nis going to appear\nlet's just make our mouse work this is\ngoing to appear\ninside of our\nexport folder so ideally what you should\nget is inside of if we go back to our\nroot\nso tensorflow workspace models\nmy ssd mob net inside of our export\nfolder we're going to have\nour frozen graph made available\nso let's give that a second so again\nthis might take a little bit of time to\nrun\nand so that looks like it's now complete\nso let's just check\nit doesn't look like any errors there\nand you can see that you've now got your\ncheckpoint\nyour saved model assets variables\nand your savedmodel.protobuff file now\nif you remember correctly remember how i\nsaid that we were going to\ncreate a similar output to what we had\nfor our pre-trained models\nyou can see that we're now doing the\nexact same thing so we've now created\nour own slice\nof our own custom model which looks\nalmost identical to what we had from our\npre-trained model\nbut now again this is based on our\ncustom model so again we've got\nall of that available inside of our\nexport folders we've got our checkpoint\nwe've got our save model\nand we've got our pipeline config and\nthis will mimic exactly what we had\nfor our custom one so if i scroll down\nagain so this is currently still\npointing at our own file folders\nyou can see that you've got all of the\nstuff that you\ncustom built for your own model right so\nthis is now available to be used\nelsewhere so you could actually\ngo and convert this which is exactly\nwhat we're going to do\nbut again you could pass this off to\nsomeone they could pick this up and use\nit as well\nnow the next conversion that we're going\nto do is we're going to export this to\ntfjs so if we go\nand run all the steps beneath step 11.\nso first up it's going to install\ntensorflow.js converter or the\ntensorflow.js converter\nand then again it's going to create this\ncommand print it out\nand then it's going to run it so ideally\nthis should create a model.json file and\na number of bin folders and i'm going to\nshow you how to use this inside of our\nprojects\nbut for now we're just going to convert\nit and we'll be able to leverage it\nlater on\nso give that a couple of minutes and you\nshould effectively have your converted\ntensorflow.js\nmodel and there you go so you can see\nthat we've now got our bin files so\nwe've got our different shards and we've\ngot this model.json file which is\nhuge so if you actually scroll through\nthis this represents our entire deep\nlearning model in json format now when\nwe load this\ninto our react app or into our\ntensorflow.js app\nwhich is in javascript but again i've\nwritten all that code for you you just\nneed to paste it in there\nthis effectively represents the full\narchitecture and the weights and\neverything which is actually pretty cool\nnow the last conversion that we want to\ndo is conversion to tf\nlight so again same sort of deal except\nthis time rather than our exports being\nexport or tfjs export we're going to\nexport into tf lite\nexport so again let's just go on ahead\nand run these commands\nso the tflight conversion takes two\nparts so first up we convert it to\nwhat was it again so we export it to a\ntf like graph\nand so we do it using this command and\nthen we go and actually run it using the\ntf lite converter so this is again a\nslightly separate app but again\nyou don't need to worry too much about\nthis it's actually just going to convert\nit and output it to exactly the output\nthat you need\nto be able to go and leverage that so\nlet's let that run and that brings us\nto the end of this end-to-end model so\nyou can see\nthat we've now gone and converted and\nit's still running the second part so\nlet's give that a sec\nperfect and that looks like it's gone\nand effectively finished so now\nif you go into this tier flight export\nfolder\ndouble click saved model you've now got\nthis folder called detect.tflight\nand that is your tflight export\nso that about brings us to the end of\nour conversion so we've now gone\nand frozen our graph exported it to tfjs\nand\nexported it to tf lite and it also\nbrings us\nto sort of the end of our full\nrun-through of actually working with\ntensorflow object detection\nso all up what we did is we set up all\nof our stuff and installed all\nof the tensorflow object detection\ndependencies we set up our virtual\nenvironment which is called tfod\nwe imported our dependencies defined our\nnew images to collect\nset up our folders captured our images\nand labeled them\nwe then went and did all of our installs\nwe trained our model and then we\nevaluated it\ndetected from an image which you can see\nhere we also detected from our webcam\nwhich you saw using the real-time webcam\nfeed\nwe then went and froze our graph and\nthen converted it to tfjs\nand converted it to tf lite so that is a\nfull end to end walkthrough of how to\nwork with the tensorflow object\ndetection api\nnow what we're going to do is get\nstarted with\nour performance tuning so say your model\ndoesn't actually perform\nthat well what do you go about doing\nwell this is really where performance\ntuning comes in\nso normally there's three key things\nthat i'll do to\nimprove the performance of an existing\nmodel so\nthe first thing is adding more images of\na low performing class to your training\ndata set so you saw that when we're\ndoing\nthumbs up thumbs down live long and\nthank you we're sometimes getting\nnot the greatest detections now one of\nthe easiest ways we can fix this is to\ntake the green screen down\nand take images of both of our different\npositions using different hands so this\nis going to give\na model a better chance to generalize so\nwhen people talk about model\ngeneralizing\nreally it's being able to perform well\nin real world situations\nthe second thing that we can do is train\nour model for longer so you saw that\nwhen we generated our training command\nwe had 2\n000 steps now what we can do is we can\nactually clear out our training folder\nand bump that up a little bit so say for\nexample we train for 3000 steps\nthis gives our model a better chance at\nreducing its loss\ngeneralizing and performing better\noverall now the last thing that we can\ndo is also\nchange our model architecture so we\ntalked a little bit about\nthe tensorflow model zoo so you saw that\nwe're using the 320 by 320 model so if\nwe actually take a look at that\nwe were using this model over here so\nssd mobile net v2 fpm light 320 by 320\nwhich had a speed of 22 milliseconds per\nframe and an average accuracy\nof 22.2 but we could also upgrade this\nand use a slightly more advanced model\nnow again we're going to have that\nperformance trade-off so you might\nhave a slower model but again it might\nmake better detection so say for example\nwe were to use this model here\nwhich in this case takes 39 milliseconds\nper frame\nbut also has a better accuracy metric so\nwe could do that as well\nso what we're going to do is we're going\nto add some of these techniques to our\nexisting model so what we'll do is we'll\nadd more images\nof our different classes so in this case\nwe know that our thumbs up thumbs down\ndetections weren't working so well so\nwe'll add more images of those\nand then what we'll also do is we'll\ntrain our model for longer so we'll bump\nthis up to 3000\nand if we get time we'll change our\narchitecture and i'll show you what that\nlooks like so effectively that's really\njust creating\nan entire new model but the nice thing\nabout the jupyter notebook that i've\nsort of set up is that you can plug in\nthe new url and this will allow you to\ncreate an entirely new model\nand build it using a new architecture\nalrighty so first things first\nso adding more images of our low\nperforming classes to our training set\nso we're just going to add\nmore images of thumbs up thumbs down\nwith our green screen down\nand we will see how our performance\nlooks like so if we go back to our\nnotebook\nso remember we've got our image\ncollection notebook and our training and\ndetection notebook\nlet me just check we're zoomed in we're\ngood so what we're going to do is rather\nthan collect images of\nevery single class we're just going to\ncollect some more images of\nour thumbs up and thumbs down so we can\nget rid of\nthank you and live long so that way we\ndon't have to label a ton of stuff\nright so these were the classes that\ndidn't seem to perform that well\nparticularly\nwhen we were doing it with different\nhands right so when we were switching it\nwasn't\nactually performing that great so what\nwe'll do is we'll\ngrab some more images of those and label\nthem now we'll add\nuh let's add six so we've got an even\nnumber so we'll do three of each hand\nin each position okay so again we're\ngoing to\nimport to this and again make sure\nyou're inside of your virtual\nenvironment\nso you can see up here that we're inside\nof tensorflow object detection which\nis a virtual environment that we created\nso what we'll do is we'll import opencv\nor\nimport our dependencies then we'll\nupdate our label map so\nbefore let's just have a look so before\nwe had a thumbs up thumbs down thank you\nand live long\nwe are going to just remove the stuff\nthat we don't need so thank you and live\nlong\nso we can remove those and we'll change\nthe number of images that we want to\ncollect so rather than collecting five\nwe're going to collect\nsix so three of each run that we can\nthen take a look at our labels so now\nwe're just collecting\nthumbs up and thumbs down and again so\nwhen we\nactually output these particular images\nthey're going to be inside\nof our images part so if i go into\ntensorflow workspace\nimages and collected images remember\nthey're going to appear inside of these\nfolders again so live long thank you\nthumbs up thumbs down now it's not going\nto\nadd additional images to live long and\nthank you just thumbs up and thumbs down\nso let's go on ahead and do that so if\nwe\nset up our folders we've already got\nthese folders created so again if we\nstep through this not going to break\nanything\nand then what we can do is run our image\ncapture so\nnow i changed this while i was doing\nsome testing so we're going to set that\nback to zero\nand again so what we're going to be\ndoing is we're going to be capturing\nimages in our different positions so\nwe'll step back and we'll take images\num we might take the green screen down\nit might not we'll just evaluate and see\nhow it goes\nso what we'll do now is we'll hit shift\nenter and ideally you should see the\nlittle python pop up towards the bottom\nso remember it sleeps for a little while\nbefore it opens up we're just going to\nhave a thumbs up\ncool right now we'll do it with our\nother hand\noh that's off the screen then we're\ngoing to do thumbs down\nso three on each again\nthe screen again looks like we had some\nsucky images there so let's just go take\na look at what we collected\nbecause i've got a feeling some of those\nwere going to be off the screen so if we\ngo to tense flow\ntensorflow workspace images\nand then collected images so remember we\ncollected thumbs down and thumbs up\nso if we go to looks like there's some\nimages there left from my testing so let\nme just delete those\nso these look okay so that's\nthumbs down thumbs down this one doesn't\nlook so good too\nlet me just make that a little bit\nbigger so you can see that we don't even\nhave an object on the screen to detect\nso we can delete that one\nand delete that one this looks fine this\nlooks fine\nagain ideally we could probably get\nbetter detections and these are all of\nthe same\nside right so it doesn't look like we've\ncaptured the other ones that was\nprobably a little bit too slow so let's\njust\nuh see that one i'm happy with that one\ni'm happy with\nthat one's okay let's delete that one\nand we're going to grab some\nthree more thumbs down ideally with the\nour other hand\nokay so let's go to thumbs up again more\nimages from testing\nokay and so again that's poor image\nthere's no class there\nit's right it's a little bit dark that's\nright it's a little bit dark\nit's fine that's fine as well even\nthough i look a little sleepy there and\nthat's okay so one two all right so\nwe're gonna add\nin a couple more images and then we'll\njust sort of evaluate what we actually\nwant to keep so\nlet's do a couple more so again to do it\nagain all we just need to do is run\nthis excel under four capture images and\nthis is just going to capture our images\nagain so if we run this again\nso we'll do some more thumbs up\none switch\nnow it's going to be thumbs down\nkeep going off the screen come on nick\nokay let's have a look at what we've got\nnow so\nall right so we've got some more thumbs\nup\nthis is kind of good so you can see that\nthis is a little bit dark so i mean that\nmight be a good chance to give our model\nto general or\nmight give our model some additional\ndata to generalize\nso that's fine and that's okay that's\nfine that's fine that's fine\nit's looking better\nokay so i think we're good there so for\nthumbs up so it looks like we're gonna\nhave\nwhat is this 11 new images\nand if we're going to thumbs down let's\ntake a look at what we've got\nit's fine\nagain we're going to get rid of this one\nbecause that's\noff the screen this one because that's\noff the screen\nokay cool so we've got a bunch of new\nimages now what we're going to do is\nwe're going to go on ahead and label\nthese again\nso remember when we went and labeled all\nwe need to do is go through our step\n5 and image labeling and this is going\nto open up label image to be able\nto label images now because we've gone\nand installed all of this already we\ndon't actually need to run\nevery single cell so these ones up here\nso pip and saw pip list\nthese couple these are just doing the\ninstallation so everything\nall of these cells which you can see\nhere these are really just doing the\ninsulation all we need to run\nis this one so this is actually going to\nopen up label image so if you've already\nrun through the installation\nyou're good you don't need to go on\nahead and install it so if we just run\nthis cell\nis oh we need to define our label image\npath so let's run this cell\nso you can see here that it's saying the\nsystem cannot find the path specified\nand that's because we're asking it to\nopen up label image path\nover there but we haven't defined it yet\nwhich is this what this cell is doing so\nif you run\nthe label image path this should allow\nyou to open it up so if we open this now\nhow a label image platform should open\nso you can see that that's now open now\nwhat we're going to do is as per usual\nwe're just going to go ahead and label\nour images\nso again w and this is thumbs down\nand remember it's case sensitive so\nthumbs down\nand we need to save go to the next one\nthumbs down save\ncomes down save\nyou can see that we've now got varying\nimages right so we've got both hands\ncovered\nso there's a better chance that the\nmodel will perform better a lot of the\ntime this is trial and error so you've\ngot to evaluate and see what's going to\nmake your model perform better but\nnormally this is the first step so i'll\ngo on ahead\nand i'll add more images of the classes\nwhich i wasn't too happy with this one\nis a bit of a shocker image but we'll\nwait and see\nokay and we'll do the next one this\nthumbs down again\ncool then we'll open our next directory\nwhich is thumbs up\nand we'll go and do these ones in the\nsame manner\nagain we're just changing the label name\npaying attention as to whether or not\nit's case or paying attention when it is\ncase sensitive\nagain we can adjust these if we need to\nand saving we'll go to the next one\nsave go to the next one\nsave the next one\nand just keep going through until you've\ngot all of your images labeled\nagain this is something that you could\nstart looking at uh auto labeling tools\nfor\nobviously to improve at your efficiency\nalso pay attention pay attention if you\ndo start using those tools as to what\nthe performance of those auto labeled\nimages are\nsometimes even though you use an auto\nlabeled\nauto labeling tool you still do need to\ngo through and do a bit of a manual\nreview but again\nsomething that could potentially improve\nhow quickly you're able to label images\nso i'm just going to finish the rest of\nthese up\nsave that do the next one\nokay cool so that is now done now\nremember whenever we\nare labeling new images we need to copy\nthem into the training and test\nfolder so no real change there so i'm\ngoing to copy the majority of these\nso let's go that looks like we've got a\ngood mix there so let's copy these\nand we're going to put them into the\ntraining folder\nand then we're going to go back to our\ncollected images go to thumbs up\ndo the same thing and let's just grab\nthese\nand that looks okay and remember you\nneed to grab the annotation\nas well as the image so if you don't\nhave both\nthen you're gonna have a bad time so we\nare going to grab why do we still have a\nbunch of thumbs down\nthat's because we didn't cut we copied\nso we go\ndelete those copy those last couple\nand we're going to paste the rest inside\nof our testing folder\nand remember we did all of those so\nwe're going to paste the rest\nin to our testing folder all right so\nnow we've just added more images\nof our classes that we weren't too\nconfident about i thought we pasted\nthose in there already\nef7 let's just cut those\nokay we did all right so now if we go\ninto our collected images folder thumbs\ndown\nwe already did those\nand a thumbs up cool all right so that\nis\nnow all well and good so we've now gone\nand added more images to our testing\nfolder and more images to our training\nfolder\nnow if we are going to retrain we're\neffectively going to be using\nour training and detection notebook\nagain or we can also stop label image so\nif you just hit stop\nthat's going to close this off and we\ncan close that as well\nall right so now that we've got our\nimages collected the next thing that we\nneed to do is go on ahead and train our\nmodel\nnow in order to do this we are zoomed in\nquite a fair bit there let's just go to\n125. so in order to do this we're just\ngoing to go back to our training and\ndetection notebook and we're just really\ngoing to change one thing\nso namely i'm going to change this\ncustom model name so when we built our\nfirst baseline model\nwe actually named it my underscore ssd\nunderscore mob net\nnow we're going to call it slightly\ndifferent so we're going to just add on\nunderscore tuned and this is going to\ngive us a new folder so again if we step\nthrough this\nit's going to create a new folder which\nagain you can see there so we've now\ngot my underscore ssd underscore mob net\nunderscore tuned\nso we've now got a separate folder\nthat's going to contain our tuned model\nnow we can keep going through this and\neffectively\nthis is going to give us the ability to\ngo on ahead and train a\ntuned model now we can skip this entire\nstep\nentirely so we don't need to download\nany new pre-trained models\nor reinstall tensorflow object detection\nwe've done that we've gone through that\npane that's now done and dusted\na label map we can run that again but\nreally we're doing this so we've got\nthis label line\navailable and then we're going to create\nour tf records again\nso we are going to now create new tf\nrecords\nand again we don't need to install this\noh hit install pi\ntz again we had that installed we are\nhowever going to run\nthis generation so remember this is\ngoing to create our test record and our\ntrain record\nso if we run this hopefully fingers\ncrossed no issues and\nthis should give us our new tf records\nto be able to go on ahead and train with\nso let's let that run\nand it looks like we don't have any\nerrors there so we've successfully\ncreated\nour tf record file intense flow\nworkspace annotations train record and\ntensorflow workspace annotations\ntest.record\nso we're good to go now now the next\nthing that we need to do is copy\nour pipeline config so this is going to\ncopy the pre-trained pipeline config\ninto our new tune model so if we run\nthat inside\nof our my ssd mob net tune folder you've\nnow got this pipeline file\nwe can hide this we don't need a preview\npane\nminimize that so it's a little bit\neasier to see so we've got this pipeline\nconfig file\nand then really we just need to make our\nupdates as per usual so this is really\njust\nfilling in what's inside of this\npipeline config so if we take a look at\nthis\nremember right down the bottom we need\nto configure all of these paths but\nwe've got our code here that's going to\ndo it for us\nso we're just going to step through\nit's going to open up our pipeline\nconfig and again this is just the\nstandard one\nand keep stepping through so this\nsection here is probably one of the most\nimportant this is actually\nupdating the pipeline config so if we go\nand run that\nrun that again or run the next cell now\nwhen we open up this pipeline you can\nsee that we're now going to have\nall of our label map paths so on and so\nforth defined\nso that's all well and good now what we\ncan do is run our training script\nso again this is all sort of pretty\nmodular so you can just sort of run\nthrough it and it should\nideally work now the one thing that we\nare going to change is the number of\ntraining steps because remember i said\nthe things to try are adding more images\nand changing\nthe length of training time so we can\nbump that up and we'll increase that to\n3000 and we can run that command\nand again try this out so you might want\nto play around you might want to train\nfor longer train for a shorter amount of\ntime\nthe world's euro stick here so again a\nlot of it is experimental so we're going\nto copy this\nand we're going to open up a new command\nprompt\nand as per usual we're going to go to\nwhere our virtual environment is and\nactivate that so let's go and do that\nokay so that's where our virtual\nenvironment is so you can see that we've\ngot tfod there so we can activate that\nso remember\ndot backslash tfod scripts\nactivate so that's our virtual\nenvironment now activated you can see it\nthere\nand then what we can do is paste in our\ntraining command so let's go ahead and\nrun this\nand ideally we should have a trained\nmodel come\nright about after\nokay so after 3 000 steps of training we\nfinally got\nour final trained model which had a loss\nof 0.213 now keep in mind we had more\nimages we had images at different angles\nso ideally what we want to do is run our\nvaluation script\nto see how our model is actually\nperforming so remember our last model\nhad\na i believe it was mean average\nprecision of 0.7 so now we can see what\nour model\nor how our model is performing like this\ntime so to evaluate our model remember\nwe just go through and run the code\nunder step 7\nso if we hit that and enter that so this\nis going to give us\nour new evaluation code so we can copy\nthis over\nand paste it into a model or into our\ncommand prompt\nso this should ideally run our\nevaluation pipeline so it will take a\nlittle while and ideally we should get\nsome evaluation metrics generated\nokay and you can see that we've now got\nour valuation metrics\ncalculated and it looks like we have\nmanaged to improve our model so you can\nsee here\nthat our average precision is now 0.834\nso that's a bit of a\nreasonably large jump compared to what\nwe had initially so before this was\nabout 0.7\nand i believe average recall was 0.69 or\nsomething along those lines so again\nthey were way lower they were in the\nsevens and sixes\nnot the 84 to 80 what\n84 range so so again we have managed to\nimprove our model\nand generate a better object detection\nmodel so simply by adding more images\num adding additional labels and\ndifferent positions we've ideally\nproduced a model which should generalize\nbetter\nnow what we can actually do as well is\nagain load this new model now because we\nhave trained for longer\nwe're going to have a new checkpoint so\nif we create a\nlet me just show you this so again if we\ngo back into our directory\nyoutube tensorflow object detection tfod\ncourse tensorflow workspace\nmodels and remember so this was our\nbaseline model\nthat we initially trained and then we\ntrained our tune model now if we open\nthis up you can see\nwe're all the way up to checkpoint four\nso this is our latest model so\nin order to load this what we need to do\nis change the checkpoint that we're\ngoing to be loading\nso rather than loading checkpoint three\nwe need to load checkpoint four\nand then what we can do is we can\nactually go and run some detections so\nrather than detecting from an image\nlet's just jump straight to real-time\ndetection which is effectively this cell\nhere\nand if we run that that should\neffectively\nopen up our webcam and give us the\nability to make some real-time detection\nso let's see\nhow that actually performs\nokay so we've got our detection window\nthumbs up thumbs down thumbs up thumbs\ndown\nall right so this is detecting live long\nso let's move over a little bit there\nyou go\nway better right so that's again\nperforming ridiculously quickly\nso we did train for longer we trained\nwith more images\nso really faster right now we're really\nreally quick and this is switching\nreally fast as long as my hands aren't\nbelow\nand so that sort of gives you an idea as\nto how you can go about performance\ntuning so again you can see it's very\nvery quick\nand we're doing pretty well there\nawesome all right cool now the next\nthing that you can also do\nin order to performance tune is change\nthe architecture so\nif we cast our minds back we sort of\ntalked a little bit about adding more\nimages and training for longer\nnow the next thing that you can also do\nis change the architecture\nnow in order to do this you can re all\nyou really need to do with the\nparticular code set that i've got\nis change the link that you actually\nwant to use so in this case we're using\nlet me just zoom in we are using this\n320 by 320 model\nbut say for example we wanted to use uh\nthis one over here so again there's some\nnuances if you want to tune them\nbut really all it's a matter of doing is\ncopying the link address\nand then going back over to our\ndetection notebook and changing\nthe pre-trained model url so if i\nactually run this\nso you can see it's updated the url for\nthat specific model\nand then what we need to do so once\nwe've got that we just need to grab this\nname here so you can see here that it's\ncalled ssd mobile\nat v2 fp and light 640 by 640\ncoco 17 underscore tpu-8 so we can copy\nthat over\nand paste it here so this is effectively\ngoing to give us the ability\nto go and grab a new pre-trained model\nso\nwhen i run this it's going to download a\nnew pre-trained model and effectively\nwalk us through the exact same steps now\ni'm not going to go through this in a\nhuge amount of detail but\nif you'd like to see a more detailed\nvideo on using different architectures\nby all means do let me know but it sort\nof gives you a feel for how you might go\nabout this so really you grab the new\nmodel link\nand then this cell over here is actually\ngoing to go on ahead and\ndownload that new pre-trained model so\nthen what will happen is inside of your\npre-trained models folder\nworkspace pre-trained models so you'll\nget as you can see that i've already\ndownloaded a bunch of different ones so\nit'll just download\na new a new pre-trained model that\nyou're able to use\nso that about wraps up performance\ntuning so we did a bunch of stuff there\nwe didn't really need to change our\nmodel architecture in order to get\nbetter performance really it's about\nthe image quality so rubbish in is going\nto equal rubbish out\nquality in is going to equal quality out\nso having different styles of images\ndifferent images\nof different qualities and different\nimages at different angles as well as\ntraining for longer\nmore often than not is going to be\nsufficient for producing a\nbetter model so this brings us to\nour next part training on collab so in\norder to train on collab you can go\nthrough\npretty much the same steps the core\ndifference is that you need to have\ncollected your images already in order\nto be able to do this\nso let's go ahead and jump onto collab\nand we'll\nstart doing that so again the core thing\nthat i was saying is that in order to\ntrain on collab you do need to\nhave your images pre-collected it just\nmakes your life pre-collected and\npre-annotated\njust going to make your life a bunch\neasier so let's go ahead\nand do this now the easiest way to get\nyour images on to collab is\ninside of our image collection notebook\nright down the bottom i had this code\ncell which allows you to compress your\nimages\nand archive them so if we actually run\nthat cell\nthis is going to compress the images\nthat we've got so if we go\ninto our images folder now workspace\nimages\nyou now you're now going to have this\nfile called archive.tar.gz\nso this is all of our images from our\ntraining and testing folder and now\ncompressed and\narchived so what we can actually do is\njump on over to colab\nso in this case i've just gone to\ncolab.research.google.com\nand then i can actually bring in a\ngithub\nfile so what we'll do is we'll grab in\nour main github repository which was\nwhere are we so tfod course\nwe can paste that link in\nand then we're really interested in our\ntraining and detection notebook so let's\ngrab that\nand then the nice thing about this\nnotebook that i've set up is that\nyou can sort of just walk through this\nnotebook now if you don't want to have\nto deal with all of the installation\nsteps and all of that stuff that we had\nto do to get us up and running\ncodelab sort of gives you a nice\nalternative to that core thing you need\nto do is go to your runtime and change\nyour runtime type to gpu in this case it\nlooks like it's already selected\nso we can hit gpu and hit save and then\nwhat we're going to do is step through\nour notebook so we're going to hit shift\nenter\nand run anyway and this is going to\nstart\nimporting and creating our folder\nstructure so again\nby running the first four cells we\nshould have our folder structure created\nyou can see we do so tensorflow\nworkspace annotations\nimages now the one thing that you will\nneed to do is\nupload your files so specifically your\nimages so if we select our images folder\nwhat we're going to do is upload\nthe images that we just compressed so\nwe're going to go into\nwhere our archive is so tensorflow\nobject detection tfod\ncourse tensorflow workspace images and\nthen remember we had this\narchive so let's upload that\nso we've now got our archive.targeyz\nfile there\nwhat we'll do is we'll copy that into\nour images folder\nand then when we actually go through the\nrest of this notebook so let's just hit\nshift enter so if we keep going through\nso this is going to clone our tensorflow\nmodels repo\nwhich should give us our files in here\nonce that's done\nand then if we go to our next cell so\nnow we're installing tensorflow object\ndetection so this will take a little\nwhile\nand so keep in mind this is installing\nall of our dependencies to be able to\nleverage\ntensorflow object detection so that's\nlooking promising at the moment looks\nlike it's all installed we can run our\nverification script see if that's all\ngood\nso this looking promising at the moment\ndoesn't look like we've got any errors\nand again whenever you're running the\nverification script gotta check that it\nsays okay so in this case\nwe've got the all clear so that's\nlooking fine test importing object\ndetection no issues there so we're good\nto go right\nso what we can now do is bring in our\npre-trained model so again\npretty standard so this is going to give\nus our pre-trained model over here\nwe can then create our label map\ncreate our tf records\nso again this is going to create our tf\nrecord so if we go into our annotations\nwe've now got our test record and our\ntrain record created\nwe can then go into our so what we'll do\nis we'll copy our pipeline config\nthrough so we're just stepping through\nthis notebook so it\ndoesn't look like we've got any errors\nso far update our config\nso this should give us our custom config\ninside\nof our models my steam obnet folder\nso you can see it there and then we can\ntrain the model\nnow the nice thing about training in\ncolab is that we can just run through\nand execute that command in the cell so\nyou can see that now i'm running that\ncommand\nand all things holding equal without\nerrors we should get our model\ntraining kick off now again the key\nthing in here is that\nyou won't be able to perform real-time\nobject detection using your webcam you\ncan still do it using the image so we'll\ntest that out\nwe'll see what that looks like\nso that's looking like it's running\nthere without issues\nand then again we just need to wait for\nour loss metrics to show up so that\ngives us a good indication that it's\nrunning successfully\nno issues okay and that's our first loss\nmetric appearing so you can see there\nthat we've got\nour step 100 per step and we've got our\nloss metrics appearing\nso that's a good indication that all is\nsuccessful and it's running in collab so\nwe can let that run and we'll\ncome back evaluate that model load it\nfrom a checkpoint and then run our\ndetection from an image but again from\nhere you can sort of keep stepping\nthrough\nif you wanted to once you get to the\nphrasing\nand conversion step you can grab so you\ncan\nactually zip up and export everything\ninside of this workspace folder so i\nwrote the code down here so you could if\nyou actually wanted to grab everything\nyou could zip up your entire my ssd mob\nnet folder bring it back down to your\ndesktop and run it from there\nas well but again this looks like it's\nall running pretty successfully\nwe check out my ssd mob net folder you\ncan see that we've got\nour checkpoint appearing there so we've\ngot checkpoint one\ncool let's let that run and we'll be\nright back\nokay so that's our model finish training\nso you can see we got up to step 2000\nright down here with a final loss of\n0.247 now what we can do is we can\nevaluate our model as well so again\nwe can run it in cell and ideally what\nwe should see\nis our mean average precision and our\nmean\nor our average recall as well so ideally\nthis will pop up\nonce we've got that calculated\nand all we're really doing here is\nrunning the code and uh step seven so\nevaluate the model\nso this will appear as soon as we've got\nthose detection metric or those accuracy\nand evaluation metrics calculated so\nagain similar to what we did inside of\nour command prompt\nbut now you're doing it inside of the\ncell inside of colab\nso that's looking promising it's found\nour checkpoint three and in a second\nlooks like we've got our detection\nmetric so again this is\nour model and this is our non-tuned\nmodel right so remember we trained our\ntuned model for longer we ran that for\n3000 steps this was only 2000 steps\nso you can see our average precision in\nthis case is 0.71\nand our average recall is 0.715 now what\nwe can do is we can also detect\nour model using an image so we can run\nthrough our cells to load up our\nmodel in this case our latest checkpoint\nis checkpoint 3.\nso all we need to do is change our\ncheckpoint to checkpoint three in this\nline here\nwhich is checkpoint.restore so this\ngoing to load up checkpoint3\ninto our notebook so we can actually\nleverage that so if we run that cell\noh we actually need to stop our\nevaluation first\nand then we should be able to continue\nonwards\nand detect from an image so in this case\nwe're going to be detecting\nfrom an image so what what happened is\nwe our evaluation script is going to\nkeep running and keep looking\nfor a new checkpoint so we actually need\nto force stop that in order to continue\non with ourselves\nso in this case i just hit stop to get\nthat to stop\nnow what we can do is we can load from\nour checkpoint so what we really just\ndid there is we changed our\ncheckpoint.restore file\nand we made sure that we're pointing\nthrough to the latest checkpoint so in\nthis case it's going to be\n3 which is what we've got over there so\nif we run that\nthat's all looking good and then we can\ndetect from an image so remember our\nimage\nname needs to be a valid image inside of\nour images folder so if we open up\nimages\nand then test you can see that we've got\nlet's make sure that we've actually got\nthis file so\nwe have uh livelong0253422 so\nlet's take a look to see whether or not\nwe've got that\nwell easier yet we can just copy the\nname of this file\nso let's grab this one\nand we don't need a new code cell so\nlet's just paste the name of the file\nthere\nand then we should need to run these two\ncells to bring it so this is going to\nbring in our dependencies it's going to\nload up our category index\nagain same as what we did in our\nbaseline notebook and then if we run\nthis cell ideally we should be able to\nsee a detection so this is going to run\nusing our object detection model and try\nto make a detection\nusing that particular image that we've\ngot over there\nperfect and you can see it has in fact\ndetected live long so you can see that\nthere again you can make this image a\nlittle bit bigger if you wanted to\num we could try a different image so\nlet's try a\nthumbs down so if we copy that file name\nand we pasted that over here again we\ncan make another detection\nand this should be thumbs down which in\nfact it has detected by the looks of it\nso you can see\nit's a little bit sketchy there or a\nlittle bit small but you can see that it\nhas in fact detected our object so that\ngives you an\nidea of how to train on collab now again\nif you wanted to convert or export all\nof this\ni've actually got the code to export it\ndown here so what we can do\nis run this cell and\nit will zip up and export your files and\nif you wanted to you could\nload that into google drive as well and\nexport it bring it back down locally and\nrun it locally if you wanted to\nbut keep in mind if you want to run it\nlocally you do need to install the\nobject detection api to have that\navailable locally\nso that about wraps up training on colab\nand really wraps\nup our part seven of this course the\nnext part that we're going to be going\nthrough\nare our projects now there's\nspecifically three projects that we're\ngoing to go through reasonably quickly\nso this just sort of gives you an idea\nas to where you can potentially take\nthis object detection technology further\nor might give you some ideas as to where\nyou can apply it in your real life\nso the first project that we're going to\ntake a look at is how we can use\ndifferent types of sensors so\nspecifically a microscope to be able to\nuse\nor perform object detection so we'll\ngive that a try\nand i have noticed that it does get very\nvery close to the object so we'll wait\nand see and take a look at performance\nthere\nthen we'll take a look at building a web\napp so again we're\nable to leverage the existing code base\nwe're just able to repurpose it to be\nable to build up a tensorflow.js app and\ni'll show you where to get the code for\nthat\nand then last but not least we'll export\nour model and be able to perform\nuh some raspberry pi sentiment so we'll\njust be trying to detect\none class there so whether or not i'm\nhappy or not so in this\nthis case we're going to be going\nthrough each of these three projects but\nstarting off with microscope\ndefect detection then web app directions\nand then\nlast but not least our raspberry pi\nsentiment\nokay so we're going to jump back into\nour notebooks we can close collab for\nnow\nand close that and again let's just\nrestart our notebook so we're going to\nshut these down\nand again all things start so say for\nexample we're starting off with our\nmicroscope\ndefect detection now this particular\nmicroscope that i'm actually working\nwith is a usb microscope so you can see\nit there right\nand i'll link to this in the description\nbelow if you want to\ntest this out or take a look at it\nyourself so think of this as just\nanother camera so right now\ni'm using a webcam to be able to perform\nobject detection but we could just as\neasily use a different sensor say for\nexample you had\na better or high resolution webcam or a\nslightly different webcam you could\ndefinitely use that as well\nnow we're specifically going to be\ntrying to train a model to detect\ndefects in these little leds here\nthey're really really small so it might\nbe a little bit difficult for you to see\nbut\num so you can see that this is a green\nled and it's got a bent pin\nthis one is still a green led but this\none doesn't have a bent pin\ni've got a red one as well and again you\ncould do this on other stuff so if you\nhad like a printed circuit board you\ncould try that out as well\nso let's i'm going to plug in this usb\nmicroscope and take a look at what this\nlooks like\nso you need to get it into focus a\nlittle bit so we're going to write some\ncode to be able to see\nthe output of this webcam first before\nwe commit to actually collecting images\nso what we're going to do now is again\nwe're going to close down our notebooks\nand we're sort of going to start from\nscratch so we're still going to be\nworking within\nour environment that we've already\ncreated because we've gone through so\nmuch effort to set this up we've got our\nvirtual\nenvironment we've got all of our\ndependencies installed\nwell first i'm going to start out by\nopening up our image collection notebook\nand we're just going to create a new\nsection just before capture images\nand we'll call this uh i don't know 4.x\nso i'm just going to create a new\nmarkdown section and i'm going to say\nthis\nis uh testing microscope\nposition ning\ncool and then we'll convert this to a\nmarkdown cell\nand then we're going to import opencv as\nour dependency\nand sort of just leave it at that for\nnow so what we'll do actually we should\nprobably put this\nup let's put it up here\nso we'll make it 1.x\nso what we're going to try to do is\nwe're going to try to read from our usb\nmicroscope to be able to at least get a\nfeed\nand then we'll position it try to get\nsome zooms appropriately and then see\nwhat this looks like i've never tested\nthis before so i wanted to see\nwhether or not it's possible what our\nresults look like and what it looks like\nto do object detection with different\ntypes of sensors\nokay so the first thing that we're going\nto do is we've imported our dependencies\nfrom an image collection notebook now\nwe're going to try to read in a feed\nfrom this particular microscope so in\norder to do that we first up need\nto get a feed so we're going to call or\ncreate a new variable called cap\nequals cv2.video capture\nand we're going to try out sensor 0\nfirst so remember this is no different\nto this line\ndown here so we're just grabbing a video\ncapture from our capture device\nthen we're going to include a while loop\nso while cap is opened\nso this is checking that our capture\ndevice feed is still available\nso when you actually set up this capture\nright you can type in cap.read\nand this is going to read the feed from\nyour microscope so what we can then do\nis extract the two variables that we get\nfrom that so we can type in red\ncomma frame which again is no different\nto what we're doing when we're capturing\nthe images from our webcam which we did\nfor our different gestures so\nin this case we're going to be trying to\ndetect two different classes so either a\nbent pin or not a bent pin\nbut we ideally want to position our\nmicroscope appropriately first because i\nplayed around with it yesterday and it\nis a little\nbit temperamental in terms of focusing\nso\nlet's position it first and get it uh in\nthe right spot\nso we're going to write ret comma frame\ncap dot read and then we need to\nshow our feed so to do that we can type\nin the cv2\ndot i am show and then we name the name\nof our frame so we're going to\ncall this microscope feed\nand then we are going to display our\nframe so a frame that we actually get\nback from here is actually just an image\nright it's an image from our microscope\nso that should give us our feed and then\nwe can copy\nthis little bit over here so this is um\nthese four lines of code let me actually\nexplain that in a sec\nright so these four lines of code so\nthis basically is what gives us our\nability to sort of quit\nout of our feed and close that little\npython window and then cap.release is\njust best practice so this allows us to\nrelease\nour capture device and destroy any of\nour opencv windows ideally you want to\nrun this\nafter you close any cv2 web capture and\nsometimes you might get your sensor hung\nup so say for example it won't detect\nimages anymore it might sort of freeze\nup\nrunning those two lines normally\nresolves a bunch of those problems so\nlet's go ahead and test this out so in\nthis case we\nlet's just double check so we've written\nso we're getting our capture so cap\nequals cv2.video capture and we're\ntesting out device one\nand we're looping through so while the\ncaptcha is opened\nthen grab or read the frame show it back\nto us\nand then if we try to break out of it\nthen break out of it so let's run this\nand see what happens\nokay so what are we getting there so uh\nso cv2.iamshow so let's try another\ncapture device\nokay that's looking more positive now\nall right so this looks good so i had to\nchange the video capture devices capture\ndevice zero is probably my current\nwebcam that i'm actually streaming on\nso we might need to change that now\nright now this looks kind of weird so\nwe're not actually seeing anything from\nour microscope feed but that's because\ni'm just got it currently pointed to a\npiece of paper\nso if i move this around right\nlet's move it there so you can currently\nsee\nlike one of the leds so if we bring that\ninto focus a little bit more\nnope the other way\nall right cool so we've now got one of\nthe leds actually appearing so i can\nmove this around\nand you can currently see that we've got\nthat actually appearing so we've got a\nbent pin there\nso you can see that it's definitely\nbroken or it's obviously not going to\nwork if we try to plug it in\nwe can try putting in another led\nso in this case we've got one that\nactually is working\nbut right now you can sort of see that\nwe're sort of going down the same path\nright\nso rather than having a particular or\ndoing gesture based detection\nthis time we're actually just going to\nbe using a slightly different feed but\nwe're still\ngrabbing pictures from a camera\nso in this case we're sort of good so\ni've got got the position based on my\nsheet of paper so i'm doing it on a\nwhite background to ideally allow us to\nsee this a little bit better\nso we actually want to collect some\nimages of our\nuh the different pins and whether or not\nthey're broken or not so i'm just going\nto put it back into position\nand it's rolling away from me there we\ngo\nlet's bring that a little bit closer\nthere you go nope\nit still wants to roll okay so i'm going\nto hold it there\nstay okay so what we need to do now is\nactually collect a bunch of images of\nour particular led so if i bring that\nback into frame\ni should have kept it in position but so\nright now this is pins the pins are fine\nwe need to collect a bunch of images of\ndifferent styles of pins\nso again this is probably going to be a\nlittle bit finicky we need to obviously\nget these right into position in order\nto get the photos appropriate\nbut we'll test this out okay so we've\ngot our webcam position appropriate or\nour microscope positioned appropriately\nso we can quit out of that using q and\nwhat we\nprobably need to do for this particular\nproject is collect images for\ntwo particular classes so really a bent\npin\nand a non-bent pin so we're going to\ncreate two different image types so bent\npin and\ni don't know what should we call the\nother one okay pin\nactually we'll call it defective and\nnon-defective defective\npin non d\neffective pin so we're going to only\ncollect\ntwo different classes this time so\ndefective pin and non-defective pin\nand we'll try with i don't know five\nimages again and we'll give that a crack\nso this is going to create\ntwo new sets of images and again when we\ngo through and run our\nsetup folders so we can delete this\nthat's left over\nso this is going to create new folders\nfor our new\nimage classes so if we go into our\nimages we've now got\na folder for defective pin and\nnon-defective pin we can actually delete\nthese old ones so live long thank you\nthumbs up thumbs down we don't need\nthose anymore\nso those are now all cleaned up now what\nwe also probably need to do is clean up\nwhat's inside\nof our test folder because we don't need\nthose anymore we're doing a new project\nand we are now going to collect our\nimages for our defective pins and our\nnon-defective pins\nso we've got the folders created we can\nnow go to our captcha\nand we're going to test out video\ncapture device one\nbecause that's the device that we had to\ngrab up here to be\nable to grab the images of our pins so\nlet's run this and see how we go\nokay we're getting our frame\nbring it back\nokay so i've got it we probably need to\nrun this again so right now i've got a\nwe had a picture of a non-defective pin\nso let's stop this\nand go back into our collected images so\nthese are the\nokay pins so we want to delete those\nbecause\nthose are fine they are\nthey are effectively non-defective but\nwe had those images in defective\nso we're going to put the images of our\ndefective pin there first up\nlet's just double check we've got the\nfeed right\nokay so that's looking fine let's\nactually position\nit this way right so that looks okay\ni'm just making sure we can get it in\nthe frame appropriately\nokay that's looking good so let's just\ntry to bring it in a little bit more\nthat looks good as the trick so i move\nthe paper not the actual pin\nokay mastery at last okay so what we're\ngoing to do now is collect images of our\ndefective pin\nlet's just do one at a time so that we\ncan actually pause\nand i'm just going to do it for a red\none we won't bother with the green ones\nfor now\nlet's do a defective pin oh we need to\nstop this cell as well\nso if we just jump back into here hit q\nthat's going to close it down\nokay so what we're going to do is\ncollect images of this defective pin and\ni'm just going to move it around\nslightly and we can probably increase\nthe time that we want to sleep between\nframes so let's give us a little bit\nmore time so three seconds\nso this line here which you can see that\nreads time dot sleep this is how long we\nactually sleep between each image\ncapture so right now it's set to three\nseconds\nso if we run this\nlet's wait for our frame to pop up so\nright now it's positioned so ideally we\nshould be getting\nappropriate images already\ncool all right so we can move it\nslightly\nokay so that's done so we've got our\nimages for our defective pin\nlet's do our non-defective pin\nand remember we're not collecting a\nwhole bunch of images here so this will\nbe interesting to see what performance\nlooks like\nlet's just position it again so we'll\nrun this cell up here\nand we've added a new\ncell there so that looks like a typo so\nlet's just run that again\nokay so we want to position it down\nokay so that's looking okay\nall right so let's try that\nokay and then we can quit that by\nhitting q\njust holding the sheet of paper as we're\ncollecting and what we need to do\nnow is type in this is going to be a\nnon-defective pin that we're collecting\nso we can set that label and then\nwe can run this so this is going to\ncollect images of our non-defective pin\nor non-defective led but again you could\ndo this on a whole bunch of different\nuse cases right so i'm doing it on\nleds and specific components and we're\njust going to move it slightly each time\nokay cool so let's take a look at our\nimages\nall right so we've got some defective\npins here\nuh let's show our preview pane so we've\ngot defective pins\nand if we go into our non-defective pins\nlooks like we've got non-defective pins\ncool so again now what we're going to do\nis go through our same process so we're\ngoing to label our images so we've got\nall of this installed\nwe are going to run our labeling line\nwhich is this one down here\nso this will open up label\nimage so let's run that and again we\nneed to set up our label\nimage path which is this really we\nshould bring this down\nhere and then again if you've got any\nfeedback for the code or the notebooks\nor if you want any clarification\nhit me up in the comments below join the\ndiscord server more than happy to have a\nchat\nso let's open up i'll set our label\nimage path open up label image\nand get to labeling so we're going to\nopen our directory we're going to go\ninto where our images are so in this\ncase\nit's again in our workspace images\nfolder\ncollected images and defective pin\nso we're going to hit w and we'll just\ndo\nlet's just do this bit\nthis bit yeah let's do that\nso we're going to say this is a\ndefective pin\nright and then we're going to save\nsave again i'm hitting w and i'm just\nlabeling each one of these now if it\nwasn't so finicky i probably would have\ndone a bunch of different positions but\nthe\nmicroscope is super sensitive so\nwait and see what performance looks like\non this\nso i'm just going to label it hit save\nall right and then we're going to open\nup our other directory so again same\nprocess\nwe're just using a different sensor and\nthis is going to be pretty consistent\nwith most of the projects and then we're\ngoing to label these\nnon-defective pin\nso save and pay attention to your labels\nas per usual\nbecause it is important\nand i've got a feeling our model will\nwon't be generalized as much as possible\nbecause right now we've only got our\npins in one direction so we'll see what\nthat looks like but again you can always\ngo through the performance tuning\nsteps to get this to perform better and\nwe sort of went through that so you add\nin\nimages of different angles at different\npositions under different lighting\npositions\nthat should help out okay so those\nare our images labeled so if we go\nthrough so you can see that they're\nthey've all saved and we've got five of\neach class\nso we're good to go there now as per\nusual we're going to copy our images\ninto our training and testing folders so\nwe're going to grab\nthe majority so we'll only leave one for\ntesting it for each class\nand we're going to paste these into our\ntraining folder\nif we go back into our images collected\nimages non-defective pin\nwe'll leave one\nand again back into there and then the\nlast one we're going to put that into\nour testing folder so\ncool all right so we are all set up now\nso we've got our\ntraining images or testing images and\nour training images\nuh so we should be able to now go\nthrough again our training pipeline\nwhat we will do however is we're going\nto probably create\na a new folder for our\ncustom object detection model in this\ncase for our project so we'll call it a\npin detection or something along those\nlines and we will do that by opening up\nour training and detection\njupyter notebook and so our last model\nthat we had was\nmy ssd mob net tuned in this case we're\ngoing to call it microscope\nand we are going to leave everything\npretty much the same we want to revert\nthis back\nto our other models so this right now\nis our custom model we don't want to use\nthat so let's grab the link to our\nexisting one\nwhich is going to be this one here\ncopy link address and i'm going to paste\nthat there\nreally this is sort of just making sure\nthat we're resetting back to usual so\nwe've already got this model downloaded\nso we don't need to download it again\nbut we could if we wanted to all right\nso we're going to import our operating\nsystem set this up\ngo through our paths create our file\npaths\nand create those actual directories so\nnow if we go in you can see we've got a\nfolder for our microscope\nmodel and then we're going to go through\nthe rest so again we can skip step one\nwe don't need to do that because we've\nalready set up tensorflow object\ndetection and we've already\ncloned our pre-trained model which is\nwhat this cell does\nwhat we do need to do however is update\nour label map so\nif you cast your minds back when we set\nup our images so if we go into workspace\nimages\ntrain so we need to make sure we get the\nappropriate label so it's going to be\ndefective pin and\nit will be\nwhat was the name of that sorry i've got\nto open up the actual annotation\nand non-defective pin so we're going to\nupdate these labels here so\nagain this this whole code base is\nreally really general purpose so you\ncould do a bunch of stuff with it so\nwe're just going to rename our labels so\ndefective pin\nand i'm doing this under step two label\nmap so this first line here\nagain we probably talked about a while\nago but this first line is what sets up\nour labels\nthen this is what creates a label map\nwhich is what tensorflow object\ndetection api\nneeds to actually to actually train i'm\ngoing to\nset up our next label non-defective pin\nso we'll do that and now if we go and\nopen up that actual label map\nwhich will be inside of tensorflow\nworkspace annotations\nlet's open this\nyou can see we've now got one class for\ndefective pin and one class for\nnon-defective pin so we're good to go\nthere now what we want to do is again we\nare going to\ncreate our tf record so we don't need to\nrun\nthis cell here this is what unarchives\nour images\ninside of colab because we're not\nrunning on collab we're good to go don't\nneed to run that\nthis cell actually clones our generate\ntf records group so we can\nbring that in it's not really good\nbecause it already is there it's not\ngoing to clone it again so\nwe've got a conditional statement there\nthat's going to prevent that happening\nwhat we do need to run is this cell here\nso this cell here is what creates our tf\nrecords and remember our tf records\nare what allow us to actually train our\nmodel it's what our tensorflow object\ndetection api uses so if we run that\nfingers cross we effectively create our\ntf records so it looks like no\nissues there and then again we're going\nto copy our model config to\nour training folder so remember we\ncreated a new training folder called\nmicroscope\nso if we run that we should be able to\ngo into our microscope folder\nwhich is in models microscope and you\ncan see that we've got our pipeline\nthere\nwe just need to update our config\nso again so that's our baseline we make\nour updates\nif we reload it this is a cool thing\nright so you can actually reload that\nconfig\nby running this cell here so config\nunderscore util dot get configs\nfrom underscore pipeline file and then\nwe're specifically going to load that up\nanother thing that i had a thought about\nis if you'd like to actually see me\nwrite this code from scratch\nplease do let me know i think it'll be a\nhuge tutorial but if you think it would\nbe useful to be able to learn how to\nactually do this i'd love to hear your\nthoughts on this\nas well maybe we'll do a live stream so\nin this case\nthat's looking good so we've reset our\nclasses and if we scroll down\nwe'll reset our label map and where our\ntest.record file is\nlet's go on ahead and train our model so\nagain we're going to\ngenerate our training script under step\nsix\nwhich gives us this year and we probably\ndon't need a train for 3000 steps let's\ndo\na regular 2000 so then we'll copy this\ninto a new command prompt and again same\nfolder so we can stick\ninside of this folder here so the\nyoutube tensorflow object detection tfod\ncourse folder and we've got our\nenvironment activated\nwe should be able to paste this in and\nkick off our training so\nwe'll kick this off and we'll be right\nback as soon as that's done\nalrighty so our microscope object\ndetection model\nhas now finished training so ideally the\nend goal for this\nis when we load this up we should be\nable to detect a\nbent pin and effectively or a defective\npin and a non-defective pin\nso i'm interested to see how this goes\nbecause i've never tried this so this\nwould be really really interesting so\nlet's go on ahead and do this now so\nwe'll just make sure our gpu is fully\nreleased because sometimes it can\nthrow up a whole bunch of issues if it's\nnot\nnow inside of our microscope folder you\ncan see we're up to checkpoint 4. so\nthis is a little bit further than usual\nso\nwhat we'll do is we will load in\ncheckpoint four so that's looking good\nand so let me just quickly give a recap\non this notebook so step zero sets up\nyour path\nstep one or ideally point one\nis what's going to download your\npre-trained models from tensorflow\nmodels and\ninstall tensorflow step two is where we\ncreate our label maps our different\nlabels\nstep three creates our tens flow records\nfour\ncopies our pre-trained model config\ninto our custom model config folder\nor into our custom model folder step\nfive's\nupdates that config and then step six\ntrains which is where we copy our\ncommand\nstep seven goes and evaluates that model\nso this is purely optional step seven\nstep eight is where we actually\ninitially load our checkpoint so if you\nget more checkpoints than checkpoint\nfour which is what i wanted to call this\nout\nyou can change this number to detect or\nuse an older model or use a newer model\nyou\nsort of worlds your eyes to that so and\nthen step nine is detecting from an\nimage step 10\ndetect from your webcam and then step 10\n11\n12 are going to be your exporting and\nfreezing\nstep 13 is your zip and export so again\ni sort of wanted to drive that point\nhome that there's\na logical sequence of this so\nto run through step eight what we're\ngoing to do is\nrun this import cell which you can see\nhere\nand then we'll load our checkpoint so\nwe've set it to checkpoint4\nand then we can detect from an image so\nlet's try detecting from an image first\nbefore we\nmess around with actual the actual\nmicroscope so we're going to grab\nthe name of an image from our test\nfolder\nso we'll grab this defective pin and\nwe're just going to grab the name of\nthat\nimage and then paste it in here\nright so all i did was i grabbed this\nparticular image i grabbed the name of\nthat particular file\nand then i've overridden what's in this\ncell here so this\nis basically pointing to where our image\nactually is i'm just updating that\nthen what we can do is run that import\nwhich we just did then\nset up our category index and if you\ntake a look at this category index\nprobably haven't talked about it much\nthis is just another representation of a\nlabel map\nso we can close that again bring in our\nimage and then ideally\nfingers crossed this should be able to\ndetect\nwhether or not it's defective or not\ndefective\nso now we're actually running the cell\nto detect\noh my god it actually detected it how\ncool is that so you can see that it's\nactually\ndetected the fact that it's a defective\npin now this is probably\na gimme because i mean they're sort of\nin the same position but that is is\nreally really cool what's possible there\num because this opens up a whole wide\nrange of opportunity right like you can\nnow\nuse different types of sensors you can\nscan over different types of things\nlet's grab another image so um so what\nwas the other one inside a test so\nnon-defective pin so let's see if that\nworks\nso we're just going to update the name\nof the image\nto non-defective pin run it again oh and\nit's detected non-defective pin with\nsuper confidence\nthe bigger test however is if we detect\ntry doing this\nin real time and see how it actually\nperforms so\nvideo capture zero i think we actually\nneed to go to video capture one\nso let's test that and see if that opens\nup\nthat's looking like it's working\npretty cool so that's detecting a\nnon-defective pin\neven if i switch it the other way it's\nstill going pretty okay\nsweet right and this is all coming\nthrough that little microscope that i\nshowed you what if we did a\ndefective one let's bring it into frame\nlook at that uh where are we so this is\nsort of the concern that i had with\nhaving\nthe defective pin in a particular\nposition so you can see that it's\nit's definitely not performing as well\nwith the defective pin but you sort of\nget the idea right\nwhat's possible there obviously gonna\npick it up\nso it doesn't like the defective pin\nat least from the images\nokay so it's actually picking wait it's\npicking that up as non-defective what if\nwe did a different color\ni wonder if it's the lighting as well\nthis is me just playing around with\ndefective pins and stuff\nokay\njust trying to get this into the center\nthere we go\nokay so it had a little so what we can\nactually do here this is actually a good\npoint\ntime to actually show you something so\nif i quit out of this\nthis detection frame here actually has a\nbunch of parameters that you can choose\nto tune\nnow the two that i'm going to get you to\nplace pay most attention to are these\ndown here\nso these two lines max boxes to draw and\nminimum score threshold define\nwhat level of quality detections you're\nactually going to show so right now i've\ngot it set to reasonably high right\nso i'm not going to show anything that\nhas a detection accuracy of less than 80\nbut in this case we're not be we're not\nable to pick up the defective\npin so what we might do is we might\nrelax this constraint a little bit and\ndrop it to\n40 for example so if we run that again\nokay so now you can see that it's we're\nobviously getting a whole bunch of\ndetections\nso this is sort of what happens right so\nthere's a bit of a trade-off as to\nwhether or not you're going to be able\nto\nor want to show everything versus not\nshow everything so\nin this case you can see that it's we're\ngetting 60 so what we might do is not\ndrop it down so much to four let's drop\nit to 60\nand try that again okay so we're now not\ngetting anything all right so you can\nsee there that it's detecting defective\npin\nreasonably well it's interesting that\nit's not actually\ndoing the bend it's still detecting that\nit's a defective pin\nbut it's not doing the bend interesting\nso this is the green one\nlet's try the red one and keep in mind\nwe didn't train on a green image\non a green pin the led is rolling away\nand so that's a non-defective pin let's\ntry another green one which is a\nnon-defective\nand keep in mind when we train we\ntrained at an angle right\nso this is going to be obviously skewed\nso when i put it at an angle for\nwhatever reason\nit thinks that that's a non-defective\npin straight away but if we\nchange it the other way you can see that\nwe're getting some lower accuracy\ndetections for whatever\nit's detecting my thumb as a defective\npin\nthey're pretty cool right like so you\ncan start to see what's possible with\nthis so\nif i bring that into frame again\noh it's detecting my fingers is\nnon-defective\npretty cool so let's throw in a bunch of\nthem\ndefective and these are all sort of\noverlapping right so let me move spread\nthem out a little\nso we're getting non-defective on that\nred one which is appropriate\nwhat about if we went to this green one\nsaying that's defective so that might be\nan indication that we need to train a\nlittle bit more on that\nall right spin this around okay so you\ncan see at that angle it's detecting\nthat it's not\ndefective so that might be an indication\nagain that we need to give it a couple\nof different angles\nlet's try it that's saying it's a\nnon-defective when really it should be\ndefective\nand you can reduce the number of boxes\nthat you're also going to draw as well\nso in this case i'm drawing a bunch\nyou can change that parameter again\nhopefully losing napkins let's move it\naround\npretty cool right so that shows you\nwhat's possible with a bunch of other\ndifferent types of sensors so\nagain you could train this you could\nperformance tune you could get it better\nso that sort of summarizes project\nnumber one and being able to use\ndifferent types of sensors\nfor our object detection so just to\nquickly summarize what we did\nwe went through our image collection\nnotebook we\nrepositioned our microscopes or we wrote\nthis custom code here\nto be able to make sure that we get our\nmicroscope positioned appropriately\nwe then defined our images that we\nwanted to collect set up our new folders\ncaptured our images and then we labeled\nusing label image again so again pretty\nstandard process so you're always going\nto capture your images\nlabel your objects then train now we're\nin our training we sort of went pretty\nstandard here\nwe didn't do anything too crazy we just\ncreated a new folder called microscope\nthat means that all of our microscope\nstuff is going to be stored\ninside of a folder called microscope now\nagain for our new projects we're going\nto just create a new folder or for our\nnext couple of projects we're just going\nto create another folder\nand build up from that that brings us\nto project number\ntwo so in this case our next model is\ngoing to be\na web app for direction so what we're\nideally going to try to do\nis build a object detection model that\nallows us to detect\nup down left and right\nthen what we'll do is we'll use a little\nbit more of the conversion code to\nexport this out to tensorflow.js\nand i'm going to show you how to\nactually create a web app like what you\ncan see on the screen so that's actually\nrunning in a browser at the moment\nso let's go back to our jupiter notebook\nand again we're going to start as per\nusual sort of this is sort of what i\nwanted to drive home so\nwhenever you're regardless of what\nyou're building you're sort of begun\nyou're sort of going to be going through\nthe same process so you're going to\ncollect your images you're going to\nlabel then you're going to do whatever\nexporting you want or you're going to\nrun real-time detection\nso here we're going to go back into our\nimage collection code\nand again we've already got our imports\ndone we don't need to retest or actually\nwe should probably retest to see\nbecause i've gone and unplugged the\nmicroscope now and i've plugged in a\nwebcam so let's see if that's working\nokay that doesn't look like it's happy\nlet's try video capture device one\nplugged it in looks like it's okay all\nright cool\nso that's our webcam so i just had to\nchange the video capture device so we're\nback to video capture device\none so if i move this way it's fine if i\nmove this way so it looks like\ni'm in front of the camera so what we're\ngoing to do for this particular model is\nwe're going to be detecting\nlet's get back in front of the mic is\nwe're going to be detecting\nup down left\nright so ideally we should be able to\ndetect those\ninside of our web app now the beauty of\ndoing this web app is that you could go\nand deploy this as your own\nwebsite later on and have users be able\nto actually use that\nso now this is going to take a little\nbit of javascript skill but it's not a\nwhole heap and we're also going to need\nto upload some files but again i'm going\nto walk you through this\nand all the code for this is actually\navailable inside of the github\nrepository\nso now what we're going to be doing is\nwe'll be combining the\ncode from our tensorflow object\ndetection course\nand the code from our tensorflow object\ndetection app github repository\nto be able to load this up\nso let's go ahead and do this\nso i'm going to quit out of this so\nwe've got the right feed\nand we're just going to change our video\ncapture device back to zero down here to\nmake sure we've got the right camera\nand then what we need to do is collect\nimages of left right up and down so\nwe're going to set reset our label so\nleft\nright up\nand down okay so now we're rather than\ncollecting thumbs up\nor thumbs down or live long or whatever\nor even the defective and non-defective\npins\nwe're going to be just defining\ndirection so left right up and down and\nwe'll try with\ndifferent hands and whatnot so\nwhat we can now do is run this\nparticular cell and we can test our\nlabels i don't know why i deleted that\nand you can see that we've got our\ncorrect labels are left right up and\ndown\nagain we're going to set up our folders\nso if we go into our images\nwe again can delete everything that's in\nthere so if we go into tensorflow\nworkspace\nimages and collected images so we've got\ndefective and non-defective pin\nso we can get rid of those we don't need\nthem anymore\nand what we're going to do now is create\nour folders for left right up and down\nso if we do that\nand run through the steps under step\nthree this should create our\ndown left right up and down folders\nand then what we can do is capture our\nimages as per usual so again we\nprobably don't need three seconds break\nso we can change that\nso again we're just going to point in\nour different directions capture our\ndifferent images and labels so let's go\nahead\nand kick things off so we should be\ngoing left right up and down\nso let's do it again we should get our\nlittle pop up so we're going to be going\nleft first\ni have to use my mouse with my lip right\nhere or left hand\nokay so left\nthen right\nagain move your hand around i probably\nshould have collected different images\nwhen i collected left right now it's\ncovered\non my face is behind it so i'm just\ngoing to move my hand around\nand it should be we should be up to up\nright so up\nprobably do both hands to help\ngeneralize\nand then down\nagain we'll try to use a different hand\noh that's a dual hand\ncool all right so those are our images\ncollected so we can go and check\nthose out so i've gone to youtube\ntensorflow object detection tfod\ncourse tensorflow workspace images\ncollected images so we've now got images\ninside down\nleft right and up\nso that's looking good okay now what we\nneed to do is label as per usual so\nagain\nwe need to define our label image path\nwhich we had\nalready and we need to open up label\nimage because keep in mind we've already\ngot it installed so we're just going to\nopen it up\nso i'm going to go into my image path or\nimage paths\nand we're going to start labeling so\nwe're going to go into collected images\nand down\nand then open those up so that's down\nand again paying attention to the case\non our\nimages\nbeautiful do the next one\nnow again if we get lackluster\nperformance we can always come back\nand performance tune as well so we're\ngoing to do down on that one\nbeautiful all right so that's down done\nlet's grab the next one so left\nthis probably needs to be flipped but\nthat's fine\nbehind the mic yeah that'll be an\ninteresting one\nand we'll keep on going so left so down\nhad okay\nimages left i'm a little concerned\nbecause they're all kind of in front of\nmy face\nso again we might not get the best\nperformance on here but again it's all\nabout testing and training and\ntrying it out so left then we'll go left\nagain\ncool so that's all of them done we can\ncheck our labels all right so we're good\nthere\nthen we'll go into right let's do that\ni'm going to change our label again save\nright save the next one\nsave that\nsave that and then last one\nover here\nokay let's check our labels\nbeautiful alrighty last one\nup and let's do it\nokay and then last one\nand keep in mind we're only doing five\nimages per object or per class at the\nmoment but you could definitely do more\ni normally do 5\n10 to 20 when i'm just prototyping and\nobviously if i'm labeling 20 images in\nthis tutorial it's going to take quite a\nwhile so 5 is fine\nbut play around add more images add less\nimages and remember you can collect\na varying number of images just by\nchanging this line over here so number\nunderscore images so right now i've got\nit set to 5 we could set it to 10 20 30\n40 50\n100 if you really wanted to okay so\non that note we have now gone and\nlabeled our images so if we go\ninto our images folder again and again\nit's probably getting repetitive now but\nit sort of gives you an idea of\nagain the process is going to be the\nsame so we've got our images in down\nand our annotations for down and left\nright and then up and so what we'll do\nis we'll clear out our test folder of\nour pin stuff\nand now what we'll do is we'll go to our\ncollected images\nand again we're going to do the same\nthing so we're going to cut them out and\npaste them into a training and testing\nsplit\nso we've done down let's do left\nwe're going to paste so at the moment\ni'm pasting\nfour of the available images inside of\nthe training folder so what would that\nbe\nan 80 20 split and play around if you\nwant to include more or less\nagain sort of trial and error a little\nbit here\nand data science and specifically this\nbeing deep learning and data science it\nis an\niterative process so you can go through\nan experiment and\nyou don't need to get it perfectly right\nthe first time it's more than\nokay if you play around and try\ndifferent things out\nokay so we've got our images there\nwhat we want to do now is go and grab\nthe rest and throw it inside of test so\nwe're going to have one\nimage per class in our test folder\ni'm just going to keep doing this and\nagain this is just copying and pasting\nright so you could potentially automate\nthis\nif you use the os library and just\nrandomly choose which files to place\ninto train and test\nbut in this case i just find it easier\nto do it manually because then i've got\na little bit more control over it\nokay so where are we so we've now got\nour images inside of test so we've got\nfive image or four images so left so\ndown\nwhat is that left right and up and again\ninside of train we've got\na whole heap more we're going to go\nthrough our standard process now so\nwe're going to go through\nback into our training folder and again\nwe are going to stop label image because\nyou can see it's still running up there\nand we've got a little star so we can\nstop that\njump into our training and detection\nfolder and what we'll do is we'll just\nre we can actually just clear all of our\nstuff here so we can make sure that we\nare importing so we're going to import\noperating system\nwe're going to change our folder name so\nwe're going to call this one directions\nand then so this will effectively\nremember we had our my ssd mob net\nfolder my\nmy ssd mob net tune folder we also had\nour microscope folder now we're going to\nhave one called directions\nso if we run this and run this and this\nand this\nthis should create our new file paths\ngo into youtube tensorflow object\ndetection tfod\ntensorflow workspace uh where i have\nmodels\nyou can see we've now got a folder\ncalled directions and this is going to\nbe the current model that we build\nand then again we can skip skip step one\nbecause we've already set up our\nenvironment we are\nin our virtual environment already so we\ndon't need to do anything magic there\nwhat we do need to do as per usual is\nupdate our label map so remember we had\nleft right up and down and they were all\ncapitalized so we're going to create\nthose new labels so left\nright\nand then we'll create two new items\nup and down\nand again just double check you need to\nmake sure these unique these ids are\nunique as well so this should be three\nand four another good thing to know\nso let me just quickly show you so again\nwe want to check our images so make sure\nthat we've got the right case so if we\ngo into\ntrain let's take a look at down again\nthat's capitalized let's look at left\nagain that's the actual image\nagain left is capitalized here so you\ncan see that\nlet's do right so i'm just double\nchecking because obviously\nchecking up front is going to save you a\nlot of time down the track when you're\ntrying to debug errors if they do come\nup and up is capitalized as well so\nwe're good there\nwe are good so we've got left right up\nand down we've got unique identifiers\nfor each one of them so one\ntwo three and four i think we're good to\ngo so\nlet's go and run this annotation which\nis fine so that's going to update our\nlabel map\ncreate our tf record so again we can\nskip this cell because it's only for\ncolab so we can\nimport our new generate tf record script\nagain we've got it already so it's going\nto skip it\nwe already had pi tz installed so we can\nactually delete that cell we don't need\nthat anymore\nand then we can run our tf record\ngenerations again\nideally this should successfully create\nour train record and our test\nrecord we're going to copy our model\nconfig\nto our custom folder again which will go\ninto our directions folder\nand then we're going to go on ahead and\nupdate our config so if we re-import it\nin this cell\nyou can see that in fact we've gone and\nupdated\nit looks like we've got the number of\nclasses equals to four so again this is\nupdated\nif we scroll on down again we are\npicking up\nour correct folders this is all looking\ngood\nokay so again now what we're going to do\nis train our model so we're going to run\nour command to generate our training\nscript\nagain print it out we're going to copy\nthis\nwe are going to create a new command\nprompt and again we've already got this\none so this was from our\nor is this from the defective\nnon-defective\npin example of project and we're going\nto run our training code so if we paste\nthat in this should kick things off and\nit should kick off our training so again\nwe'll be right back as soon as this is\ndone\nokay so that is our model train so this\nis our directions model and eventually\nwhat we're going to be plugging into our\nweb app so you can see we went all the\nway up to\nstep 2000 and ended up with a loss of\n0.299\nnow what we'll do is we'll test this out\ninside of our jupiter notebook as per\nusual\nso again let's take a look at our\ncheckpoint so if we go\ninto our workspace models and then\ndirections\nso you can see we're now up to\ncheckpoint three this is a key thing to\ntake a look at\nguys so if you're training your model\ndon't always assume you're going to be\nat checkpoint 4 after 2 000 steps or\ncheckpoint 3\nit could vary so you always want to make\nsure you pull down the one with the\nhighest\nindex so ideally in this case it's going\nto be checkpoint 3. so there's\ncheckpoint 1 2 and 3.\nso we want checkpoint 3. in this case\nthat's exactly what we're going to do so\nremember for\nour um what was it our pin or defective\npin\ndetection what we had the latest model\nthat we had was checkpoint four so we\nupdated it to that there\nwhat we're going to do is we're going to\ndo checkpoint dot restore and we're\ngoing to\nspecifically pass through checkpoint\nthree in this case\nthen what we'll do is we'll import this\nas per usual so all of our dependencies\nfor step eight\nload up checkpoint three and again we're\ngoing to skip right through\nto real-time detections because that's\nmy favorite\nwe're going to make sure that we set our\nvideo capture device back to zero\nbecause remember video capture device\none was for our microscope number zero\nwas for\nour webcam so let's try this out so in\nthis case i'm just going to hit\nrun and we'll bump up our minimum score\nthreshold back up to\nlet's say 90 um and give that a run so\nlet's run that\nwe need to import cv2 which is part of\nthis cell\nwe're probably going to need our\ncategory index and we don't need that\nimage path\nso let's do that let's see hopefully we\nshould get a little pop-up\nand all things holding equal we should\nget some real-time detections\nso i can see my webcams just activated\nso sometimes it takes a little bit of\ntime to start\nclose task manager okay so that's open\nso up looks like it's detecting\nappropriately\ndown looks like it i only wanted oh no\nthat's fine\nso down left\noh that should be right okay so we've\ngot an issue with left and right\noh so right works well okay over there\nbut if i bring it here so this is what i\nwas saying so remember when we were\ncollecting our images i said that having\nall of those images across my face might\ncause an issue because right now it's\nsaying that\nboth left and right over my face is left\nbut if i put\nright over here in the green it's okay\nso it's saying right as long as it's\nnot on my face is going to be right\nnow left over my face hmm okay\nall right so we might want to do a\nlittle bit more performance tuning on\nthere but you can sort of see\nhow you might go about building your\ndetection model so what i'd actually do\nin order to solve this\nis i'd include more images of me\npurely pointing what's this this is left\nso in this case that left is fine left\nis okay if i do it over my face and if i\nalways did right over my shoulder then\ni'd be okay\nbut in this case if i did it like this\nyou can see it's maybe not performing as\nwell but you sort of get the idea right\nso you can go and perform and stream\nthis\nmake it better improve that model\naccuracy so we've got up\nworking fine down working fine we can do\nit with that other hand\nokay so other hand we might need to add\nin a little bit more\ntuning there so up is okay down with\nthat hand is not okay\nyou can start to see this is how you\nmight evaluate your model and you'd add\nin additional images\nof the particular classes that aren't\nperforming so well so that's sort of how\nyou go about that performance tuning\nbut it doesn't stop there for this\nparticular model we are going to take\nthis\none step further so i'm going to quit\nout of this\nparticular detection and we are going to\nfreeze our graph this time so we're\ngoing to run through step 10\nand freeze our graph and so we'll go\nahead and run that\nand we're also going to run through\neverything in step 11 and convert to\ntensorflow.js as well\nso this should do two things so inside\nof our export which\nonce our frozen graph is done we'll get\nan export here\nand then we'll also get a tensorflow.js\nexport and then what we're going to do\nis we're actually going to build up this\napp so to do that we've got to do a\ncouple of key things\nso namely what we need to do is go to\nibm cloud in this case we're using ibm\ncloud to host our model\nand we specifically want to go to\ncloud.ibm.com forward slash catalog\nwhat we need is cloud object store\nand so i'm just going to log in so what\nyou'll need to do is if you're doing\nthis for the first time\nyou'll either need to log in or sign up\nso sign up if you haven't signed up\nbefore\nand then you can just plug in your\ndetails and again this is all free so\nyou can run this for free\nat the moment based on your model so\nwhat i'm going to do is i'm going to log\nin\nand if you actually take a look at the\nsteps inside of the github repository so\ngithub.com\nforward slash tfod app this is actually\ngoing to walk you through each of these\nsteps so if you maybe get a little bit\nlost as to where i'm going through\nand then by all means do check that out\nbut effectively we're going to be\nfollowing\nthe steps that you can see there okay so\nlet's actually do this one step at a\ntime so let's make sure that our exports\nwork so it looks like our frozen graph\nhas been generated\nso let's take a look at that\nso if we go to youtube tensorflow object\ndetection\ntfod course tensorflow\nworkspace models and we look at\ndirections\ninside of export we've now got our\nfrozen graph\nand if we take a look at tfjs export\nwe've got that done as well\nso we are in good shape now\nlet's go back to our tensorflow object\ndetection app component\nand see what we need to do so first up\nwhat it's saying is we need to\nclone this repository so let's go ahead\nand do that\nso if we copy this link here and again\nthe link to this all of this stuff is\ngoing to be available in the description\nbelow\nso by all means do check it out there\nand if you need anything else by all\nmeans hit me up in the comments\nso we are going to open up our new\ncommand prompt\nand what i'm going to do now is i'm\ngoing to\ncd out of my tfod course which\nbrings me here actually we should just\nprobably create a new command prompt for\nthis\nso we're going to go into d drive cd\nyoutube\ngo into our tensorflow object detection\nrepository\ntyping is a bit of a shocker all right\nso we're in so inside of that folder\nwe've got tensorflow object detection\ncourse\nand then if we go into that tensorflow\nobject detection course that's our root\nrepository for where we've been doing\neverything so far so you can see\nif i type in deer if you're working on a\nlinux i'm typing india it's going to be\nls\nif you're on a linux machine so that's\nall of our\nbaseline root dependencies so image\ncollection and our training and\ndetection jupyter notebook is in there\nso we're going to jump back out of that\nand what we're going to do is we're\ngoing to clone that repository that\nwe're just looking at so\nthis one over here which is the\ntensorflow object detection\nreact app so this is using a javascript\nweb development library called react or\nweb development\narchitecture called react and it's just\na really good pretty sort of stable\nlibrary it looks really similar to html\nso if you've ever done any html\nbut you don't actually need to write\nanything that's the beauty of this so\ni've\npre-written it all you should be able to\npick it up and go so i'm going to\nclone this repository what we'll do is\ntype in git clone\nclone that and then what i'm going to do\nis i'm going to go into that folder so\ncd and it's going to be called tfod app\nand then let's take a look at that so\nwe've got all of our stuff there then\nwhat we'll do is we'll open this up\ninside of a code editor so i'm going to\nopen it up in vs code so\ninside of here there is a bunch of stuff\nthat you can take a look at so there's a\ncause config more on that later\npackage.json\nyou don't really need to worry about too\nmuch of this apart from\nthis line here inside of the app.js file\nbut i will come to that\nand sort of explain what we need to do\nso let's go back to\nour walkthrough steps and do that the\nnext thing that we need to do is\ninstall node so node.js is a server\npackage or\na basically a server runtime that we can\nuse\nfor running our react app so if you\nhaven't got this installed\njust go to nodejs.org and again the link\nis available inside of the github repo\ndownload it and install it and you\nshould be good to go\nthen the next thing that we want to do\nis install our app dependency so\nunder step 3 we're going to go in ahead\nand do that so if we go back\nwhat i'm going to do is inside i'm just\ngoing to open up a new terminal inside\nof vs code and what we're going to do\nhere\nis we are going to type in the following\ncommand so npm\ninstall so think of npm as the\npackage manager or the equivalent of pip\nbut for javascript in this case there's\na bunch of others or resource managers\nbut in this case we're going to be using\nnpm so an npm comes when you install\nnode so keep that in mind you need to\nhave node installed in order for this to\nwork\nso we're going to type in npm install\nand i'm just going to bring that up just\nto make sure my head isn't covering it\nand hit enter so this is going to\ninstall all of the dependencies\nfor our react app that we're going to\nneed and\nthis might take a little while so let's\nlet that run and then we'll be right\nback\nokay so those look like all of our\ndependencies are now installed and you\ncan tell\nbased on the fact that we've now got\nthis node modules file\nnow this is going to be using\ntensorflow.js in the background so it's\nall configured you really just need to\nkeep going through\nthe different steps that we've got\ninside of our github repo\nso in this case we've done steps one\nwe've cloned the repo we've\ninstalled node i've already got it\ninstalled but again i'm showing you sort\nof where to go to do that\nthe next thing that we need to do is\nactually create a new free object\nstorage repository on ibm cloud\nso to do that we're going to hit this\nlink we should do this in a separate\nlink so we'll open a new tab and again\nthis is that that place that i was sort\nof referring you to\nso in this case we can create a new\ncloud object storage and just hit\nlight and then hit create in this case\ni've already got one created so\nall you need to do is hit light and then\nhit create\ndown here and then what you can do is\nyou can go and ahead and open it up so\nif i go and open up my\ninstance i'll show you what it looks\nlike\nso once you've got your cloud object\nstorage repository\nmade available it's going to look a\nlittle bit like\nthis now what you want to do from here\nis create\na bucket so to do that which is\neffectively what we\nare doing in step five so assume we've\nalready gone and created\nthat cloud object storage bucket so what\nwe'll do is we'll create a bucket now\nwhich is\nstep five so we'll hit create a bucket\nor create bucket\nand then what we're going to do is just\nhit\nuh i think we're going to hit customize\nyour bucket and we'll name our bucket so\nwhat we're going to do is we're going to\nname this\npay attention to this name because\nyou'll need it later on so we're going\nto call it directions\ntfod that sounds good again you can name\nwhatever you want you just make sure you\nkeep note of that particular name\nand then we are going to select our\nlocation so i'm going to choose\na you seed but you could choose a bunch\nof different regions to host this in\nand then that's about it then we can\nskip all the way down\nto the bottom and hit create bucket and\nso this will spin for a little while\nand we should be good okay so that\nis step five now or half done so we've\ncreated the bucket we need to store the\nmodel.json file\nand the dot bin files in the bucket so\nthese were the files that we created\nlet me minimize this and this and this\nso these were the files that we that\nwere created when we went and ran\nour tensorflow.js export so this line\nover here is what\nwent and created those particular files\nnow if you go into the folder called\ntfjs\nexport all of the files that you're\ngoing to need to upload are in there so\ngroup one dash shard one of three all of\nthese so you need to upload all of these\ninto your bucket\nto do this we just go back to our bucket\nhit upload and then we can select this\nlittle region over here to actually\nupload our file so we're going to click\ninto that\ngo into our repository so youtube\ntensorflow object detection tfod course\ntensorflow workspace and then we're\nmodels and then we're gonna go into our\ndirections folder\nand then we want our tfjs export and\nwe're just gonna select\nall of that and hit open and that's\ngonna upload our folders\nthen what we need to do to actually go\non ahead and upload i've got a feeling\nmy head is going to be blocking that so\ni'll move out of the way\nwe just need to hit upload and that will\nupload our files into there and then\nthere's two things that we need to do in\norder to get this\nall good and running okay so that's\nlooking like it is working fine so we\ncan go on ahead\nand close that\nthen what i want you to do is grab or\nselect this model.json file oh it hasn't\nbeen generated yet so\nwe'll come back to that so we're then\ngoing to go on to\nour next step which is enable a public\naccess policy so\nthis is step 6 over here so to do that\nwe can close this\nand on the left hand side you're going\nto see this button over here called\naccess policies so we can select that\nand what we're effectively doing is\nwe're hosting our model here so this is\ngoing to allow us\nto actually host our model and leverage\nit from pretty much anywhere in the\nworld so we need to do\ntwo specific things we need to put our\nmodel in a bucket\nand then we need to make it available to\nthe world wide web so we can reach it\nfrom our app\nso right now we've got it in our bucket\nbut right now we can't actually access\nit from our app so we're going to enable\npublic access\nso once you've hit access policies go on\nover to public access\nand then choose so leave the leave it as\naccess group public access\nand then leave the role as content\nreader and just hit create access policy\nand then it's going to give you a\nwarning because now it's going to be\npublicly available\nhit enable and that is our access group\npolicy created\nso then what we want to do is actually\ngo back and grab the url to this\nparticular model.json file\nso now that you've created the public or\nenabled public access you should be able\nto grab\nthis object public url over here so i'm\njust going to copy that\nand what we'll do is we'll go over into\nour app that we created which is this\nover here so what we cloned down\nand in order to use that particular line\nthat i just got you to create\nyou just need to go inside of so say\nthis is your main app folder\nwhat you're going to need to do is go\ninto source\napp.js and if you go to line 17 or at\nthe moment it's line 17 but if you just\nsearch for the line that says const net\nequals await tf\nload graph model so this is actually\ngoing to load\nour react or load our tensorflow.js\nmodel\ninto our web app so if i minimize this\nit looks like that at the moment that's\nan existing one i tested so we're just\ngoing to paste our new\nlink over there and hit save\nso we're good for now so there's going\nto be a few other things that we need to\nupdate to get this to run\nnow namely we need to enable something\ncalled cross\norigin resource sharing so in order to\ndo this we need to\nrun through a couple of key commands\nand in order to actually do that we need\nto have the ibm cloud object store cli\ninstalled so to do that you can type in\ncloud\nobject storage cli installation\nand this installation over here is going\nto walk you through how to actually\nget up and running so you're going to\nneed to install the ibm cloud cli first\nand then the cloud object storage cli so\nagain\ni've got a full-blown tutorial on how to\ninstall this but if you run\nthrough the installation steps on here\nit's going to walk you through how to do\nthis now if we go through let's actually\ntake a look so if we go to ibm\ncloud cli install\nso this is the first one so we've got to\ndo the ibm cloud cli\ninstall first up so to do this we can\nuse a browser to access the official ibm\ncloud cli release github repository and\nselect the installer of your os to begin\nthe download so let's select this\nand you can see there's a bunch of\ndifferent installers so you can use mac\nos\nwindows 64-bit windows 32-bit so we'll\ndo windows 64.\nand you can see it's downloaded\nlet's run this hit yes\nso it's going to up perform an upgrade\nso i've already got it installed so it's\njust going to upgrade so let's let it\ninstall\nand so you need this for the next step\nso this is actually going to be what\nallows us to\nthis is going to allow us to enable\nsomething called cross-origin resource\nsharing but i'll explain this a little\nbit more in a second\nand then what we want to do is install\nthe ibm cloud object\nstorage cli so i'm going to show you how\nto do this so you actually do this\nthrough the ibm cloud cli and cli just\nstands for command line interface so\nit's basically it allows you to run it\nthrough a command line right\nso to do this next step what we need to\ndo is run this command here so i'm going\nto show you how to do this\nso first up what you need to do is log\ninto ibm cloud so i'm just going to\nclear this\nso to do that you can just type in ibm\ncloud\nlog in and by default as soon as you hit\nlog in it's going to ask you to pass\nthrough your email\nand your password and these are going to\nbe the same details that you passed\nthrough when you went and created your\nbucket so when you created your bucket\nuh right up here i was sort of saying\nthat you would have had to either hit\nlog in or sign up when you hit sign up\nyou would have passed through your email\npassword your password so the details\nthat you put here are going to be the\nsame\ndetails in this particular case so you\npass through your email and your\npassword\nso i'm going to go ahead and log in\nokay so i've now gone ahead and logged\nin so i just passed through my email and\nmy password i did it slightly different\nbecause i've got a different account\nbut that's fine you just pass through\nyour email and your password and you'd\nbe able to log in\nnow what we need to do is install the\nibm\ncloud storage client so to do this we\njust copy this command here\nand paste it and so this is going to go\non ahead and install that cli so we can\njust hit yes\nand we should be good to go\ncool so that's now done so we can clear\nthis to give us a little bit more space\nand then if we go back to our tensorflow\nobject detection\nrepository or tensorflow object\ndetection app repository that is now\nstep seven done so we installed the ibm\ncloud cli\nand we installed the cloud object\nstorage plugin\nnow what we can do is we can just run\nthis command here so what you need to do\nis change one single thing and that is\nthe name of the bucket\nso the full command is going to be let\nme just zoom out a little\nit's going to be ibm cloud cos so cloud\nobject store that's the\ncloud object storage service which you\nsaw over here\nbucket dash cause dash put dash dash\nbucket\nso this is the name in this case the my\nold bucket name was called live long\nbecause i was doing a live long\ndetection then dash dash cause\ndash configuration and then we pass\nthrough the name of the configuration\nfile\nbut i've already got that available for\nyou so you should be able to work with\nthat reasonably easily\nnot reasonably easily you you won't need\nto make any updates to that or write\nyour own configuration so\ni'm going to copy this and we're going\nto update this i'll show you how to\nupdate it\nso let's bring jump back into our app so\nover here\njust jump into the readme for now and\ni'm just going to paste this command\nlet's just paste it in here so what we\nneed to do is\nnamely replace this bucket name with the\nname of our bucket name so if we go back\nremember we created the name of our\nbucket\nin this case it was called directions\ntfod so we can copy this\nand then just replace that there and\nthen\nin order to run this command line so you\nobviously need to be logged into the ibm\ncloud cli which is what we just did\nyou need to be in the top level\nrepository or the top level folder of\nour tfod app so in this case we've\nactually got this file called cause\nconfig\nthis is going to do what we need it or\nthis is effectively what's going to\nenable\ncause for us now cause stands for\ncross-origin resource sharing so it\nbasically means that our web app can\naccess a url from somewhere\nelse so namely you don't have this\nenabled because you don't want your web\napp to be accessing a whole bunch of\nstuff and namely\nwe're locking down the buckets because\nwe don't want them to be accessible from\nanywhere but in this case we do because\nwe want our app to be able to get to it\nso we're going to enable it right and\nthen\nin order to do that we're going to be\nrunning this command so this\nis going to be going to our cloud object\nstorage service\nit's going to put our cause policy which\nis what we've got in this course config\nfile and this is part of the clone\nrepository so you don't need to create\nanything from here\nall you really need to do is log into\nibm cloud and then just change\nor whatever the name of the bucket that\nyou created was you need to replace that\nhere so in this case it was live long\nbefore we're going to\npaste in the name of our bucket which is\ndirections tfod\nso paste that there and then what we're\ngoing to do is we're going to run this\ninside of our command line or terminal\nso in this case i'm running inside of\nwindows so it's brought up a powershell\nterminal but if you're doing this on a\nmac you might be doing it inside of a\nterminal it's just called terminal or\nbash terminal\nso we're going to run that command so\nlet's just make sure we've got that\ncause config file\nwe do so we should be good to go so\nlet's clear this\nrun that command and it looks like\nno issues there so it said okay\nsuccessfully set course configuration on\nbucket directions\ntfod so we are looking good now\nnow what we need to do is go through the\nrest of our steps\nso step nine is update the following\nline with the link to your model url so\nwe've actually already done this right\nso remember we went into app.js\nand we actually already pasted the name\nto our custommodel.json file and this is\nwhat we uploaded into our bucket over\nhere so this model.json file\nis our tensorflow.js model and it's\ngoing to be what allows us to run\nour web app using our model\nso that step 9 is now done\nstep 10 is update the label map inside\nof utilities.js with your labels\nso what we can do is we can go into\nutilities.js\nover here and all we really need to do\nis update this label map up there so we\nneed to update it for what names or what\nour labels actually are and the colors\nthat we want them to represent\nso in this case we're going to go back\nto our jupyter notebook\nand remember our labels were right up\nhere\nso remember we set up these labels so\nleft right up down so we're just going\nto do the exact same\nthing here so if we go back into our app\nso\nleft\nright\nup\ndown and save that so you can add in\nmore if you wanted to so you can add in\nadditional labels you can add in\nadditional colors and you can update\nthis based on your specific app\nin this case we're just updating it for\nour different directional models and\nthen\nmake sure you hit save so that should be\nit in terms of all the stuff that we\nneed to do so we've now gone and done\nstep 10\nnow step 11 is just starting the app so\nto do that we'll run npm\nstart let's try this out so again\nmake sure you're in the root directory\nso tfod app\nand then what we can do is type in npm\nstart and all things holding equal this\nshould work so let's wait and see so\nthis will automatically open up your\nbrowser\nto the link where our model is actually\nrunning\nand it should access your webcam now\nit'll take a little while to start up\nand compile but then you should be able\nto test it out\nso let's give that a second and then\nwe'll take a look at our results\nokay so it looks like our react app has\nstarted and you can see that we've got\nour camera available\nso if we take a look it doesn't look\nlike it is detecting now if you get\nerrors like this and you're not actually\ngetting detections i want to show you\nhow to actually debug\nthis so in this particular app\nfrom line 50 onwards you're actually\ngetting your detection so this line here\nso line 50. so const obj equals a weight\nnet dot execute async expanded and you\ncan see how i actually built this up if\nyou want to see the full tutorial for\nhow i actually wrote this\nagain i've got the code available and i\ncan more than happy to share that with\nyou\nif you're getting errors and it's not\nworking so this is the way that i sort\nof normally process through this first\nup what i'll do is i'll change the\nconfidence metric and in this case\nwe've got our confidence metric\navailable through this line here on line\n61.\nso let me just check yep should be line\n61. so we can change this number here so\nright now it's set to 90 percent\nlet's just jump out of that so it's set\nto 90 so we can change that and drop it\ndown so let's drop it a 40\nand see if we get any detections\nnope okay it's just me pointing at\nmyself then the next thing to check is\nsometimes tensorflow.js\nwill change the order of objects from\nthe converted model\nso in this case what we actually do is\nwe expect the boxes to be\nthe fourth item in the detection result\narray\nwe expect the classes to be the fifth\nitem and we expect the scores to be the\nsixth item but it's not always the case\nso if we actually type in console\ndot log this is the equivalent of print\nin python\nand if we type in a weight and then if\nwe go through each one of these objects\nin the object array we can actually\ndetermine what is what so if we type in\nobject\nzero this is going to print out the\nfirst object so if we take a look at\nthat\nand let's just bring this side by side\nand hit inspect so this is going to\nallow us to see what object is what so\nyou can see here\nthat we've definitely got something in\nthere and it looks like it's an array\nand each array has\nfive values so that is not our boxes so\nlet's try\nobject one and so this is sort of how to\nwork out where your objects actually are\nwhen you go to deploy this out\nso what you're looking for and this is a\nslightly different one so it's not that\none\noh actually it might be\nso this looks like so this is the\nnon-normalized result so right now you\ncan see that we're getting add boxes but\nthey've got negatives in them you don't\nwant that one so let's try object two\nand all i'm doing is i'm changing the\nnumber over here so you can see i'm\nchanging that\nso let's take a look at this so this is\nokay so this is our classes so this is\nwhat we do need\nso you can see here that we've got one\ntwo three four so this represents the\ndifferent classes\nthat are available for our particular\napp so what i'm going to do\nis i'm going to change this line here so\nline 55 which has our classes we're\ngonna change that to object two\nhit save so now we've at least got our\nclasses placed appropriately and then\nwe're gonna go through our next\nvalue so we wanna check what's in object\nthree or lit position three in our array\nor\nour results array and what's this\nso this looks like some this looks like\nnon-post process box classes so you can\nsee here that these are very low numbers\nso if we actually try\nto use these for our boxes well i'll\nactually give you an example right so\nthis is object three\nso if we set this to our boxes let's\ntake a look\nso it's getting detections but let's\nwait for it to run\nyou can see that it's detecting all the\nclasses in the top corner so it's really\nreally small so if you set that value to\nyour boxes\nit's not really going to work so let's\ntry object four see what that is\nand so it looks like got a hundred\nthat's just the count of objects that\nhave been detected\nlet's try object five\nthis is looking promising array 100 okay\nso this might actually yeah so this one\nis or this particular set of arrays is\nour boxes so it should look something\nlike this\nthere should be a number between zero\nand ideally one\nso i believe it's x i can actually tell\nyou correctly\nso these values represent your y value\nyour x value your height and your width\nso in this case you've got all of your\nbox values so this is what you'd expect\nyour box value to look like so\nit's a bunch of numbers between zero and\none\nso there shouldn't be any negative\nvalues in there if it is\nit's the i believe it's the non pre or\nnon post process value so you don't\nactually want those\nso what we're going to do is we're going\nto set the value of the boxes array so\nline 54\nequal to five so let's just minimize\nthis\nright so now we should be drawing our\nboxes correctly\noh and we've remember we've set our\nconfidence metric really really low so\nlet's bump that up because right now\nit's\nlosing the plot so we're going to set\nthat back to up to 90.\nso we're at least getting detections now\nhave we saved that\noh we haven't changed our scores so\nwe've got to find where our scores are\nfirst as well\nso let's go and change that for now so\nlet's zoom out a little bit there\nright now it's gone a little crazy so\nlet's see what object six is\nthis looks like it's just all right so\nit's not that so this\ni believe is an index value so we don't\nwant that\ntry object seven\nlet's see what these values are okay\nthese are our confidence scores so there\nshould be a value between\nzero and one so i believe they're\nalready sorted as well so the highest\nconfidence is going to be the top value\nso what we need to do is just\nset this number equal to 7.\nlet's do that and we should have\nresolved it now\nso again you just got to work through it\nand all right so if we take a look\nbeautiful so now we're working so you\nmight need to change this around\ndepending on what the\nresults of your object array come out as\nso again but that sort of\nshows you how to sort it through so your\nboxes are going to be a value\nit should you should have a number of\narrays and each one of those arrays are\ngoing to have four values between zero\nand one so those represent\nyour coordinates your classes are just\ngoing to be standard\nintegers so it's going to be one two\nthree and four or the number of\ndifferent objects that you've got in\nyour model and\nyour scores are going to be the sorted\narray with the highest confidence value\nat the top now let's go ahead and test\nthis out right so we've actually gone\nand done quite a fair bit here so\nwe can minimize this expand it out and\nif we take a look\nwe're accurately detecting up we go down\nwe're getting down it looks like it's\nokay\nthe coordinates might be a little bit\noff that's a bit better\nand then left right and left so left\nover my face but anywhere else it's\nit's detecting right so and then we're\ngetting right over here and again\nreasonable confidence metrics but that\nsort of shows you what's possible right\nlike you could do so much with this you\ncould build apps you could build\ndirectional apps\num you could do sentiment analysis via\nthe web again there's a whole bunch of\nideas so if you\nthink of anything awesome let me know\ni'd love to hear your ideas\nnow you can also change the colors of\nthe different\nlabels so in this case you can just\nchange it by changing the color\nattached to each different class but on\nthat note that is project two wrapped up\nso we've now gone\nand taken a raw object detection model\nwe collected our images\nagain using our image collection script\nwe change it from left to right\nup and down and again the performance on\nleft and right wasn't the greatest but\nremember we took\nimages right over our face which isn't\nalways that cool\nwe then went and trained our model using\nour regular training script\nwe then went and did a bunch of stuff as\nwell right so we uploaded our model into\nibm cloud\nto be able to host it we then set our\ncause value so we're able to access it\nfrom our app\nand then last but not least we actually\nwent and updated all of our app details\nso remember when you're updating in here\na couple of key things to do so you need\nto go into your app.js file\nupdate line 17 in this case it's line 17\nbut just\nlook for the line that says tf dot load\ngraph model so you update that with\nyour hosted model update your labels\ninside of the utilities.js file and then\nyou might need to play around with\nyour object detection array so you might\nneed to change these values\nbut in this case we are pretty much done\nso for project number two so we've now\ngot our real-time app\nup and running it's able to detect up\ndown left\nand right pretty cool right\nand so what we'll do is if you want to\nstop that app you can just jump in to\nvs code and just hit control c um\nor it'll be command c on a windows\nmachine or on a mac machine\nso that is our app done so you could do\nthat with a whole bunch of different\nmodels so it doesn't just need to be\nyour directions model we did it for the\nsign language video so again if you want\nto take a look at that video by all\nmeans\ni will link to that in the description\nbelow so you can take a look at that\nbut now we are up to project\nnumber three so raspberry pi sentiment\nso we're going to keep this one\nrelatively simple so we might try one or\ntwo classes so maybe\nhappy and then like sad or something\nlike that so we'll\nso obviously running object detection\nmodels on a raspberry pi\ndoes have certain things that you sort\nof need to cater for obviously i don't\nhave a gpu on this particular one\nit's just a raspberry pi there's nothing\nfancy happening there just a raspberry\npi\nnow you can get a gpu extender like for\nexample coral\nyou can also get like jets and nanos or\nsort of linux style devices like that to\nbe able to run it\nbut we're going to use a standard\nraspberry pi box and test this out now\ni've got it\nsitting right next to my webcam so we're\nactually going to remote desktop into\nour raspberry pi to be able to work with\nit\nand we should be able to run similar\ndetections to what we've done\nalready in this case we're just going to\nbe doing it from scratch\ncool all right so what we're going to do\nis kick this off and again\nas we've done before we're going to be\ndoing it very much in the same\nmanner so we're going to be collecting\nour images training our model\nthe key difference between this\nparticular project and the last two is\nin the first one we just used a straight\nup\nwe used a microscope to be able to make\nthose detections but the tfjs app we\nconverted to tfjs to be able to run it\nnow for our raspberry pi model we're\nactually going to be focused on\nconverting this to tf\nlite and we're going to be using our\nspecific model in a tf\nlite format so let's go on\nahead and do this now what we'll do is\nwe'll first up open up our image\ncollection notebook so again\nnothing crazy there and this time rather\nthan having so for\nour directions model specifically our\ntfjs app\nwe had left right up and down here we're\ngonna have let's just try\nhappy and sad\nso we're gonna update those so we're\nreally just gonna have two objects now\nyou could even try one object depending\non performance and see what that\nlooks like so again we're going to\nimport our dependencies there's\nno need let's actually test our webcam\nto make sure it's pointing at me\nappropriately\nlet's wait for that to open up cool\nthat's all good so we'll move over here\nto collect our images and maybe we'll do\nlike happy and then like sad so like sad\nis like our face covered so we've got\nreally clear and defined objects because\nagain the camera that i've got on the\nraspberry pi is not as good as the\nwebcam that i'm using on\nmy pc as well another thing to keep in\nmind\nso let's go ahead and do this\nso we've got our labels and we're just\ngoing to collect images of happy and sad\nwe should probably clear out our\nexisting images so if we go into\ntensorflow\nworkspace images and then collected\nimages remember we had the\ndown left up and right different images\nso we can delete those we don't need\nthem anymore\nnow what we're going to do is collect\nour images for our sentiment detector so\nhappy or sad\nso first up we need to create the paths\nand this is what step three does\nso that should have created our path so\nyou can see we've got happy and sad\nthen what we're going to do is collect\nour images so again we're going to\ncollect five images but you could change\nthis if you wanted to so i'm going to\nget into position\nand collect them so let's run this\nand we'll wait for our little pop-up so\ni'm a little away from the mic\noh no it's running it's not happy\nright and then i think we're up to sad\nso\nso sad will be covering our face sorry\nyou probably can't hear me\ni'm trying to see through my fingers\nalright cool\nall right that should be all of our\nimages collected so let's go and take a\nlook at what we've got so insider happy\nwe probably should i love this photo\nthis is great this is me just dumb\nstruck\nokay so we're gonna delete that one and\nwe're gonna delete that one\nthis is okay this is now we want me\nsmiling in them\nall right cool this is fine for sad so\nsad is\nus covering our face so we're going to\ndo happy and let's collect some more\nimages of happy so remember we can just\nisolate what we want to do so we want\nthree more images of happy\nso let's do that so all i've done is\ni've just removed\nsad from our labels array or labels list\nif it's python\nand then we want three more images so\nwe've got an even number of happy and\nsad images\nso let's run this and then run our\ncapture again and i'm going to try to be\nhappy this time\ni'm just wait\nokay cool so let's go and take a look at\nour images again\nthis one yeah all right whatever we'll\ncount that as happy that's fine\nthat's fine that's fine that's fine okay\ncool so we've got our images\nnow as you might have guessed it we're\ngoing to go and label our images\nso we need to define our label path as\nper usual\nspin up label image and let's go ahead\nand do it\nso we're going to go back into our\nimages so workspace images\nand then collected images happy\nand do our labeling so we're going to\nsay that this is me happy\nsave that\nsave that and again i'm doing happy in\ncaps\nokay so pay attention to that because\ncapitalization is super important\nor case is super important for this\nnow again for the most majority of this\ncourse i've been doing it with a green\nbackground but you could obviously do it\nwithout a green background or a green\nscreen\ni have just been taking the photos with\nthe green screen but that's okay it will\nstill work without it\nbecause you saw that we took it down and\nwe tested it without the green screen\nnow what we're going to do is switch\ninto our sad folder and do the same so\nthat's\nour already done happy let's do sad\nso let's capture everything to there so\nsad\nsad nick all right then we're going to\ndo the next one\nand we're good\nand again i'm just keeping going through\ni'm making sure my detections or my\nlabels are really\nas close as possible to correct sad\nand i'm saving each object again so this\nmakes sure that we've actually we're not\ngoing to all this effort and then\nforgetting to save\nand just there\nperfect okay cool let's check him so\nthat's fine that's fine that's one\nthat's one okay cool so that's good\nlet's just open up our happy\ndirectory because i wasn't sure if we\nsaved all of those fine\nfine fine this is also another thing to\nknow right so you can go back and open\nup the directory of images if you wanted\nto go and update a label for\nexample so say for example we wanted to\ndo microphones we could go and label the\nmicrophone and type in microphone i\ndon't want to do it because it's going\nto screw up\nbut in this case when we only want happy\nand sad for this but say for example we\nwanted to edit it like i didn't capture\nmy fortune\nwe can go and make that update and hit\nsave to be able to go and overwrite oh\nit looks like i've just gone and killed\nthat off let's go and make sure that\nwe've still got that\nuh yep so we're all still good you sort\nof get the idea so you can open up a\nfolder you can make those updates\nalrighty now as per usual we are going\nto go on ahead\nand save our move our annotations into\nour training and test folders i'm going\nto go back\ninto our images folder i'm going to\ndelete everything from our test folder\nand our train folder so these were all\nabout directions\nand we are going to go and grab our\ncollected images\nso happy so we'll grab four and four\nnope yep so those so again remember you\ngot to grab the annotation\nand the image we're going to paste those\ninto train\nso this will be a what now it'll be\na 80 split again so again we've got one\nimage left\ninside of our test folder\nand then we'll do the same thing with\nsad sorry if there's a little whining on\nthe microphone i've got the raspberry pi\nrunning already so\nit is a little loud i'm going to copy\nthis\nand then we're going to do our test\nimages oh that's not right\nso these test images should actually be\ninside of train so let's\ncut those paste it into train cool so\nwe should have eight images in train and\nwe should have\ntwo images and tests so we gotta go get\nthat other one so let's grab this sad\none\nand let's paste that in\nokay cool we're good so if we go into\nour test folder we've got two images and\nif we go into our train folder we've got\neight images pretty\ncool that you can build it like object\ndetection model of just eight images\nright so\nagain this is super powerful what we're\ndoing here so happy i'm pretty sure\nwe've already moved that so we can\nactually go\nand delete our folders inside of\ncollected images we don't need those\nanymore okay now the next thing that we\nneed to do\nis go back into our training model so\nwe're going to go on ahead\nand train a new model so this time we're\ngoing to call our model\nsentiment and again it's not a\nfull-blown sentiment model it's just a\nhigh-level object detection model but\nyou could obviously extend this out\nand we are running and again make sure\nyou're in your virtual environment so\nwe're going to hit\ngo through all of our path steps so\nwe'll import our operating system\nset up our new custom model name set up\nour paths\nfiles we'll actually create the paths so\nnow if we go in\nto our workspace models you can see that\nwe've got our sentiment folder already\nset up\nnow again we don't need to do step\nnumber one because we did that right at\nthe start we set up our tensorflow\nmodels our model zoo and we installed\ntensorflow object detection\nnow all we need to do is update this\nlabel map so under step two\nso we're gonna say what was it happy\nand sad\nsave that and then we're gonna hit shift\nenter\nto create our label map so if we go and\ncheck that label map if we go into\nworkspace\nannotations let's open it up inside of\nvs\ncode that's looking good so we've got\nhappy and sad we're good to go there\nand then we can create our tf records\nand again this step over here we can\nskip that\nthat's the collab step and run this and\nthis cell and this is going to should\nideally create our tf records without\nissue\ncool so that's gone and created them as\nper usual we're going to copy\nour pre-trained model config to our\ncustom model folder\nso let's do that then we're going to\nupdate it\nusing these steps we can go and double\ncheck that it's gone\nupdated so if we go into our sentiment\nfolder\nand open up this pipeline as per usual\nlet's open up one\nof vs code got the correct number of\nclasses and if we scroll\nall the way at the bottom most\nimportantly we've gone and reset the\nfine tune checkpoint\nthe label map path input path so on and\nso forth so we're good to go\ncool now the next thing that we need to\ndo\nis as per usual train our model so we're\ngoing to generate our command\nand then we are going to go on ahead and\npaste this into a command prompt so\nagain as per usual\nwe need to make sure we have the virtual\nenvironment\nenabled and we need to make sure we're\nin the top level directory\nso again from here you should be able to\nsee tensorflow and tfod and then we're\ngonna go on ahead\npaste our training command and then\nwe'll let that run and we'll be right\nback so i'm gonna paste it in\nand we'll be right back cool so it's\nkicking off\nwe'll be right back\nall righty so that is our sentiment\nmodeled\nfinished training now full transparency\ni did run it into an\nerror when i kicked off this training\nrun now wasn't anything that we wrote in\nterms of code\nit was because all of the vram\navailable on my particular pc was taken\nup\nnow in order to solve that particular\nerror all i had to do was\nstop my jupyter notebook which was\nconsuming all of the vram\nso if i take a look i want to actually\nshow you this error because it\nis pretty common particularly if you're\nworking on a gpu machine\nif you see this area anywhere so q blast\nunderscore status underscore alloc\nunderscore failed\nor anything along those lines that\nnormally means or\nyou can see there's a similar one down\nthe bottom so c-u-d-n-n\nunderscore status underscore alloc\nfailed so again that normally means that\nyour gpu\nis completely consumed so if you go and\ntake a look inside of your task manager\nand your gpu memory is completely\nconsumed\nand you try to run the training run\nyou're going to have a bad time so\nideally what you want to do is stop\nanything which might be using the gpu\nat any point in time and then kick off\nyour training again\nnow in this case once i did that so i\nwent and ran\nthe training command again so you can\nsee it sort of errored out and it\nstopped there\nwent and ran the training run again and\nit ran successfully so right down the\nbottom\nagain there's lots of lines so right\ndown the bottom you can see that we've\ngot our loss metrics appearing so step\n2000 and our final\nloss was 0.212 and again if we take a\nlook inside of our model folder\nspecifically the sentiment folder we've\ngot all of our checkpoints generated now\nas well okay now the next thing so\nbecause i stopped this notebooks i\nstopped notebook 2. so you can see that\nthat's definitely not running now so\nwhat we need to do is start that back up\nso we'll close this one\nopen it back up and then what we need to\ndo is import operating system\nimport these paths and then if we scroll\non down\nwe need this labels array this is\nimportant\nand then if we go all the way down to\nstep 8\nyou should be able to reload all of your\nstuff now again double check what your\nlatest checkpoint is in this case it's\ncheckpoint three\nso we're fine with checkpoint three\nthere so under step eight we can\nimport our model so we're gonna test it\nout before we go and push it out to\nour raspberry pi so let's import that\nmodel\nand again i'm going to skip doing the\nimage but we could if you wanted to\num we're going to jump straight through\nto real time to see what our sentiment\nlooks like\nso let's run this and cv2 is not defined\nso that's our error there and that's\njust because we skipped\nimporting cv2 up here\nso if we rerun this ideally we should\nget some detection so we can close our\ntask manager\ndon't need that so i've just seen\nmy webcam start up so i can see the\nlittle light on it\nlooks like we've got an error here so\ncategory index is not defined so that's\nan\neasy fix we just need to re-import this\nso whenever you restart your notebook\nthere's going to be a few things that\nyou've obviously got to import\nso if we import our category index try\nthis again\nthis might actually error now because i\ndidn't release my captcha but we'll wait\nand see oh no we're good\nall right so saying happy sad\nhow's it looking sad happy\npretty cool right so like that's a\nlightweight sentiment model so it's\nchasing my head around\nif i put my head down so what's it\nactually take for it to go to sad so if\ni bring my hands up\nso it's starting to get closer to sad if\ni go\nall the way so if i cover my face it's\nsad\nif i unhide my face it's happy so again\nyou can sort of see that it's\nwith these models you can pretty much\nbuild whatever you'd like this is why i\nkind of love tensorflow object detect or\nlove the tensorflow object detection api\nit's really\nreasonably quick to do once you've got\nit set up you don't need to go and set\nup the stuff all the time\nso what's it looking like so it's still\nsaying that's happy\nwe get in position so that's saying sad\nso again\nyou can play around with this but i love\nthat it's chasing my head around so cool\nall right so in this case so we're happy\nnow but we want to take it a little bit\nfurther and actually push this out to\nour raspberry pi so we're going to quit\nout of this by hitting q\non our keyboard we're then going to\nfreeze our graph so we're going to go\nthrough step 10.\nwe don't need to go through the\nconversion to tfjs because we're not\ndoing that this time so we need to do\neverything under step 10 and everything\nunder step 12\nin order to get this to work so what\nwe're going to do is we're going to run\nthrough step 10 and freeze our graph so\nif i run\nall of those steps including the command\nwe'll run this one\nfrom the command or from our notebook\nthis should generate our\nexport file which is over here\nwhich is over here\nand then once that's generated we'll be\nable to run the\ntf light conversion so again a lot of\nthese scripts are sort of pre-configured\nyou can sort of pick them up and\nleverage them\nlet's give that a sec\nnow while that's happening let's take a\nlook at the steps that we need to go\nthrough\nin order to build our raspberry pi\ndetection\nso again the third and final github\nrepository that i've sort of made\navailable and written up\nis the tensorflow object detection\nwalkthrough with raspberry pi so again\nall the other steps that you need to go\nthrough to get this up and running are\nin here so first up we're going to start\nby going through our tensorflow object\ndetection course to create our tf light\nfiles\nthen we'll clone this to our raspberry\npi so we can either clone it from our\nraspberry pi or\ndownload it to our pc and then copy it\nover from our remote desktop connection\nso in terms of this remote desktop\nconnection i'm actually using something\ncalled\nxrdp which allows you\nto remote desktop or remote into\nyour raspberry pi so it's actually\npretty cool so it makes life a whole lot\neasier i can code\non my raspberry pi from my local pc\nwithout having to actually go into\nthe raspberry pi but all the code is\nactually still executing from the\nraspberry pi\nand so once we've done that we've just\ngot to install a bunch of dependencies\ncopy our converted model over and then\nrun it so let's go on ahead\nand do this okay so we've now gone\nthrough\nand frozen our graph so we can see that\nin here so we've got our checkpoint our\nsaved model and our pipeline file\ngood to go there now what we need to do\nis convert it to tf lite so this is all\ngoing to happen\ninside of the tf light export folder so\nlet's go ahead and run this\nand we should see all of our results pop\nup let's just bring this over to the\nside here cool\nso if we run everything under step 12\ni don't know why i focus on putting that\nto the side all right so we're going to\nrun everything under step 12 so tf\nflight script\nthis this this this this this and this\nand ideally this should generate our\ntier flight export exports what you're\nlooking for is a file called\ndetect.tflight that's the core file that\nyou're going to be able to leverage\ninside of our raspberry pi now i've\nalready got a raspberry pi remote\ndesktop into so i'm already remoted into\nit\nor hooked into it if you want to say\nthat\nand so we'll be able to jump into that\nand take a look at that as well\nso let's give that a sec and then we\nshould be able to kick things off\nokay so that's the first part of it done\nin a second you'll see\nso you can see inside a tier flight\nexport we've got this saved model folder\nand once the second command runs you'll\nhave detect.tflightmade available so\nyou'll be able to pick that up and\nleverage it\ncool so you can see we've now got detect\ntier flights it's a little bit small\nthere\ncan make a bit bigger it's that file\nover there\nso if we take a look at our steps what\nwe've now done\nand this is this these are the steps for\nthe tfod\nrpi repository so the raspberry pi code\nin this particular case\nnow what we're going to do is clone this\nrepository so i'm going to jump into my\nraspberry pi now\nand right over up here you can see that\ni'm just remote desktop into it\nand i'm going to create a new file or\nnew folder actually and we're going to\ncall this sentiment\nand we're going to jump into that so\nwe're actually going to open this up\ninside of vs code so i've got vs code\ninstalled on this raspberry pi\ncool nothing in there yet so we're going\nto open up a terminal\nand this is a bash terminal and we're\ngoing to type in git\nclone and then paste that link\nuh did we have what link do we have\nthere oh we already had a git clone so\nwe don't need to type in git clean let's\nclear this\nlet's make this a bit bigger as well so\nwe can see what we're doing\nright so we're going to paste that\ncommand into here so git clone and then\nthe tensorflow object detection\nrepository so you can see that we've now\ngot that or it's\nstarting to come through so in there\nwe've got a couple of things so we've\ngot the detect\npi file and this is the main file that\nwe're actually going to use to run\nour detection so all of our good stuff\nis actually in here\nthen we've got an existing detect.tf\nlite\nmodel so we can actually run this off\nthe bat without actually having to do\nanything\nelse so in this case it's just a simple\nbasic hello model\nnow before we actually do that though\nthere's a couple of key dependencies\nthat we need to install now\nthey're all listed in this readme here\nso if we actually bring these up\nyou can see that we've got a bunch of\nfiles that we actually need to install\nso\nspecifically these are all required to\nbe able to work with\nopencv so and then the last one is\nactually installing this python\ntflight runtime so this is really really\nimportant to have\nthese dependencies available because\nit's going to mean the difference\nbetween your model running and not\nrunning\nso what we'll do is we'll go through\neach one of these and we'll install them\nso i've already got this configured but\nit's all good let's go ahead and do it\nso we're just going to paste the first\ncommand\nso let's copy this\nso that's going to install opencv python\nlooks like it's already installed then\nwe'll install the so all of these are\ndependencies\nfor um opencv so specifically we need to\ninstall these as well\nin order for this to work so i'm just\ngoing to copy these and install them\nso it looks like package all right so\nwe've got to\ngo through all of the rest of these as\nwell so let's go ahead and install these\nmy copy and paste doesn't seem to want\nto work so we're going to have to do\nthis manually\ncool so that's the next one done\nand again i'm just going through each\none of these packages that we need to\ninstall and i'm going through and\ninstalling them so\nwe'll just copy and paste and i sort of\nwanted to show it to you from scratch\nbecause that\nat least you can sort of see how to\nactually get this up and running\nthis next one done\nand it looks like a lot of these are\nalready installed so it's going through\nthem\nreasonably quickly it's not actually\ninstalling it\ncool that's that\nokay so those are all of these packages\ninstalled so we've now done\nall of these right but we've got these\ncouple\nof packages left to do so let's go ahead\nand do this one\ncool and then this one\nawesome then you should normally do a\ngeneric\nupdate so we'll do the update and we'll\ninstall our tier flight runtime so this\nlast one is the most important one this\none over here so this is actually what's\ngoing to allow you to leverage\nthe tier flight runtime without\nexplicitly having to go and install the\nfull tensorflow object detection\napi so once we've got this line done\nwe're pretty much\nhome free so let's let this run for a\nsec and then we should be good to go\nonce our\nupdate is done\ncool that's done now we'll do the last\none so this is going to install our tf\nlight runtimes as i was saying this\nis the main package which allows you to\nleverage a tf light\nmodel and specifically our object\ndetection model\nwithin our raspberry pi so we're going\nto copy this\nand again these are all available\nthrough the readme so\ndon't fret if you haven't picked up\nexactly what the command is that's fine\nall going to be available through there\ncool so that's already installed now\nnow rather than running our custom model\nfirst up i want to show you\nhow to leverage the model that's already\nin there so you can sort of get a feel\nfor what this is going to look like\nso to run this let's just clear these\ncommands\nwe just need to cd into that particular\ndirectory because right now let's\njust type in ls right now we've got this\nsubfolder right so tfod\nrpi so we're going to cd into that\nand then if we type in ls now so we've\ngot our main folders so to run this all\nwe need to do is run\npython3 detect dot pi so let's go ahead\nand run that so python\n3 detect\ndot pi and all things holding equal\nwe should okay so we've got our object\nour detection box\nopening up and this is just a straight\nup hello model so you can see it's a\nlittle bit slow and again it's running\non a raspberry pi so it's not crazy fast\nbut you can sort of see that it's\ndetecting hello\nit's detecting my face and again it's\nnot the most accurate model but you sort\nof get a feel for\nwhat's possible here right\nif i bring my hand a little bit closer\nand start to see that's making\ndetections on our raspberry pi\nright okay so if we hit q we can close\nthat as per usual now\nwhat we want to do is we actually want\nto do this with our custom model\nso in order to do that we just need to\ngo back\ninto our where we actually saved our\ndetect.tflight file\ncopy this and paste it into this\nrepository so what i'm going to do is\ni'm just going to paste it down and\nagain if you're doing this\nwithout idping into it you could\ndefinitely transfer it like\nsave it up into google drive or a box\nfolder\nand bring that over in this case having\nidp available makes it a lot faster\nso we're going to copy and then replace\nit so we'll overwrite\ncool so that's good and then what we\nneed to do the last thing that we need\nto do specifically\nis we need to update this labels.txt\nfile so really all we need to do here is\nupdate it for our custom labels\nand remember if you remember correctly\nwe had\ntwo custom labels they were just happy\nand sad i'm just double checking the\norder that we had them in so remember we\nhad happy as id1 and sad as id2\nso let's go ahead and do that so we're\njust going to make happy the first\nobject\nand then sad the second object so we'll\nhit save\nnow all things holding equal if we run\ndetect dot pi\nagain so python 3 detect.pi we should\neffectively be running our custom model\nnow so let's clear this\nlet's try that so in order to run this\nwe're just going to run python3\ndetect dot pi\nand again we'll see if we get any\ndetection so again we haven't trained\nfor that long so at the moment\nis a little bit slower and again we're\ngoing through idp so\nit doesn't look like we're getting any\ndetections and that's indicated based on\nwhat you're seeing down here so it looks\nlike we've got a random one\nlooks like they're real reasonably low\nquality so what we might want to do\nis drop our detection threshold so if\nyou're going to detect\ndot pi you can actually change this\nup so actually in this line here so on\nline\n68 if you change this so let's try\ndropping it to i don't know 20 percent\nfor now\nso by changing that and then what we can\ndo is rerun this\nso rerun our command so we're going to\nrun\npython 3 detect apply again so let's see\nif we get some detections now so it's\nlooking like we're getting detections\nalready\nokay so we're getting one big sad we're\ngetting happy\nit's looking like there's a fake\ndetection over there so\nthere we go it's detecting me as happy\nand chad at the same time but you sort\nof get the idea right so you could\ndefinitely train this for a lot longer\nyou're getting these false detections\nover here which isn't that great it was\na detecting sad\nso let's have a look\nso it doesn't look like it's that great\nat detecting sad\nyou sort of get the idea so you can\nobviously train this for a lot longer\nperformance tested we only trained it on\neight images as well so obviously this\ncamera on the raspberry pi is going to\nbe different to what we trained on so\nyou're going to get\ndifferent performance when you do\ncrossover so that's another thing to\nkeep in mind\nbut if we go happy\nyou can see that it's definitely picking\nus up there is a little bit of lag when\ngoing through idp\nso if we go to sad let's see if we can\nat least get one sad detection\nmove over a little\nlots of happiness weirdly enough let's\ntry dropping green screen\nit's got one big sad but\nall right so it's detecting sad but it's\nsomewhere up here so it's not the best\nresult\ni would say drawing a big box around me\nas being sad\nif we smile\nagain so it's not the best generalized\nmodel but it sort of shows you what's\npossible right\nso that gives you an idea of how you can\ngo about making your detections\non raspberry pi so again looks like it's\npretty happy detecting me is happy\nmaybe sad not so much so if we wanted to\nperformance tune this we're going to add\nin more images\nof me being sad in that particular case\nunder different lighting conditions i'd\nprobably drop the lighting because\nthe feed from the raspberry pi isn't as\nbright as the webcam i've got on my\ncomputer but you can sort of see\nthat there are ways to tune this and\nthere's ways to go and deploy your model\nand a whole bunch of projects that you\ncan sort of take away to go and build\nyourself\nnow performance for the sentiment model\nwas okay but during\nediting i couldn't help thinking that\nthis could be so much better\nso what i ended up doing is performing\nsome additional performance tuning to\nideally\neek out a little bit of additional\nperformance out of this model my ocd was\nin overdrive so i decided\nto let it run free and try to get this\nperforming a little bit better\nthis is what happened so during editing\ni couldn't help thinking that i really\nwanted to get better performance\nout of that sentiment model so again as\nwe went through in step six or part six\nof this course\ni went through a performance tuning step\nso i added more images of the performing\nclasses that weren't performing so well\nin this case added more of both\nour sad sentiment and our happy\nsentiment and i ended up training our\nmodel for longer i didn't really need to\nchange the architecture but if i hadn't\nhad a performance boost\nthat would have been my next step so\nlet's take a look at what it is that i\nactually did\nso first up i added a number of\nadditional images so all up you can see\nthat i added\nabout 20 additional images and if we\nactually open these up\nyou can see i've got images at a number\nof different angles\nso this gives or this boosts our chances\nof having a model that generalizes well\nand i also took down the green screen to\nideally\nsee if that had any impact on whether or\nnot our performance was going to\nboost or not boost so if we keep taking\na look you can see i've got images at a\nwhole bunch of different angles and i\nalso had some images of me looking happy\nas well and you can see i'm moving my\nhead around\nand this gives our model a better chance\nof actually being able to detect our\nhead\nwith the green screen up but also with\nthe green screen down so you can see\na bunch of different angles and again i\nwent about the same\nlabeling step so all i did was i created\nnew images went and labeled them again\nthat was the first thing that i did the\nsecond thing that i did is i went and\ntrained a model for longer so if i\nactually show you\ni ended up training i kicked off the\ntraining for 10\n000 steps so you can see 10 000 there\nbut i actually stopped this at about\n5600 steps i was kind of getting\nimpatient and wanted to just test it out\nso i trained for an additional 5600\nsteps now what that gave me\nis a brand new model so i didn't retrain\nthe existing model actually went and\nperformance tuned and created a new\nmodel\nso if you actually take a look exactly\nas what we did during the performance\ntuning step so if\ni went into workspace models you can see\nhere that i've got a model called\nsentiment two and my checkpoint went all\nthe way\nup to checkpoint six so you can see that\nthere because i trained for longer i had\na checkpoint with a greater\nindex again i went through the same\nsteps i went and converted it to a\nfrozen\ntf like graph i then went and converted\nit to a tf light model\nand then i brought this into my\nraspberry pi\nso now this particular detect.tflight\nmodel that we had here\nis the model that's been trained for\n5600 steps and it's been trained\non 20 additional images those were the\ncore changes that i made here\nnow if we try running this model again\nlet's take a look at performance so if i\ntype in python 3\nlet's bring that up a little bit detect\ndot play\nyou can see that we're detecting happy\nwe're not getting all of those false\ndetections\nso for smile\nwe're good now let's test out sad\nbecause remember sad wasn't working\nright so that was the key thing that we\nwanted to test out\nso if i put my hands over my face now\nyou can see that we are detecting the\nfact that i'm sad so\nagain it's a much better performing\nmodel if we take the green screen down\nlet's take a look at performance it's\nthere as well\nso right now it's performing well with\nthe green screen up but what about if we\ntook\nthe green screen down so again\nstill detecting that we're happy\nand if we try out sad again so if i put\nmy hands over my face\nyou can see that we're getting\nsignificantly better performance now\nand so you can see the little label in\nthe bottom corner but again performing\nway better and all i really did was i\nadded those additional images and i\ntrained\nthe 5600 steps so you can see the power\nof performance tuning\nand again just because you get not the\nbest performance first time around\ndoesn't mean that you can't go and\nimprove performance after that to be\nable to generate better results\nso that really shows you the power of\nperformance tuning in this particular\ncase\nediting nick out now on that note let's\ndo a quick recap so the last\nand final project that we did was\nsentiment analysis\nso we went and collected our images\nusing our standard image collection\ncapability we went and labeled\nour happy and sad detections we then\nalso went and\ncreated our updated label map and\ntrained our model\nbut the core difference between this and\nthe previous two projects is we\nobviously went\nand converted it to tf flight so that we\nhad that capability there\nwe then went an rdp'd into our raspberry\npi\nsaved the model and ran out detect the\npi script to be able to detect\nif we're happy or not so it looks like\nagain you could performance tune this\nand you could make this a lot better\nwith a lot more training a lot more\nimages so you've got\nthe possibility to go and make this\nbetter and let me know if you do i'd\nlove to see if you build a better\nsentiment analysis app it'd be great to\nsee i think it's something super useful\num and on that note that wraps up our\nthird and final project so we went\nand did the first project which is our\nmicroscope detection our second project\nwhich is our directional model\nand then our third and final project\nwhich was our raspberry pi\nsentiment model and also on that note\nthat about\nwraps up our object detection course so\nhopefully you found this useful and if\nyou've got any feedback comments or need\nany help\nby all means hit me up in the comments\nbelow thanks and that about wraps it up\nthanks so much for tuning in guys\nhopefully you enjoyed the full object\ndetection course\nnow please do let me know if you have\nany problems at all if you need a hand\nby all means\nhit me up in the comments below but also\njoin our discord channel so i'm\nreally active on there so if you've got\nany questions need some help\nor want to join the community by all\nmeans do jump on there\nthanks again for tuning in peace\n",
  "words": [
    "hey",
    "nick",
    "uh",
    "green",
    "box",
    "around",
    "head",
    "uh",
    "green",
    "box",
    "uh",
    "one",
    "currently",
    "around",
    "head",
    "kidding",
    "want",
    "able",
    "detect",
    "anything",
    "using",
    "tensorflow",
    "object",
    "detection",
    "course",
    "happening",
    "guys",
    "name",
    "nicholas",
    "renate",
    "video",
    "going",
    "going",
    "full",
    "blown",
    "object",
    "detection",
    "course",
    "whatever",
    "object",
    "detection",
    "use",
    "case",
    "wanted",
    "tackle",
    "able",
    "going",
    "course",
    "specifically",
    "going",
    "going",
    "four",
    "different",
    "use",
    "cases",
    "able",
    "repurpose",
    "code",
    "actually",
    "got",
    "able",
    "specifically",
    "detect",
    "exact",
    "objects",
    "want",
    "use",
    "done",
    "using",
    "open",
    "source",
    "tools",
    "mainly",
    "python",
    "tensorflow",
    "object",
    "detection",
    "could",
    "used",
    "whole",
    "different",
    "range",
    "use",
    "cases",
    "say",
    "example",
    "want",
    "detect",
    "person",
    "face",
    "wanted",
    "sign",
    "language",
    "detection",
    "face",
    "mask",
    "detection",
    "exact",
    "code",
    "use",
    "nice",
    "thing",
    "well",
    "go",
    "setup",
    "installation",
    "show",
    "training",
    "also",
    "show",
    "exporting",
    "really",
    "big",
    "part",
    "able",
    "build",
    "object",
    "detection",
    "models",
    "able",
    "export",
    "format",
    "well",
    "tf",
    "lite",
    "wanted",
    "run",
    "part",
    "web",
    "app",
    "wanted",
    "even",
    "use",
    "raspberry",
    "pi",
    "could",
    "might",
    "one",
    "projects",
    "towards",
    "end",
    "tutorial",
    "without",
    "ado",
    "ready",
    "let",
    "get",
    "alrighty",
    "happening",
    "guys",
    "welcome",
    "object",
    "detection",
    "course",
    "course",
    "intended",
    "take",
    "complete",
    "beginner",
    "comes",
    "object",
    "detection",
    "way",
    "fully",
    "proficient",
    "acting",
    "practitioner",
    "going",
    "take",
    "step",
    "step",
    "able",
    "walk",
    "pace",
    "able",
    "learn",
    "leverage",
    "technologies",
    "let",
    "take",
    "look",
    "actual",
    "game",
    "plan",
    "going",
    "bunch",
    "stuff",
    "going",
    "go",
    "ideally",
    "course",
    "going",
    "fully",
    "comprehensive",
    "going",
    "need",
    "every",
    "going",
    "everything",
    "need",
    "able",
    "get",
    "running",
    "eight",
    "key",
    "parts",
    "actually",
    "going",
    "go",
    "key",
    "parts",
    "pretty",
    "important",
    "comes",
    "building",
    "object",
    "detection",
    "models",
    "first",
    "going",
    "going",
    "install",
    "set",
    "everything",
    "need",
    "able",
    "perform",
    "object",
    "detection",
    "local",
    "machine",
    "pc",
    "case",
    "going",
    "using",
    "tensorflow",
    "object",
    "detection",
    "api",
    "going",
    "mainly",
    "using",
    "python",
    "reason",
    "using",
    "tensorflow",
    "object",
    "detection",
    "api",
    "whole",
    "bunch",
    "additional",
    "capabilities",
    "make",
    "whole",
    "heap",
    "easier",
    "able",
    "build",
    "object",
    "detection",
    "models",
    "ever",
    "looked",
    "object",
    "detection",
    "architecture",
    "model",
    "bunch",
    "stuff",
    "actually",
    "need",
    "build",
    "order",
    "actually",
    "get",
    "one",
    "running",
    "steps",
    "steps",
    "visualization",
    "utilities",
    "familiar",
    "terms",
    "fret",
    "actually",
    "going",
    "take",
    "step",
    "step",
    "walk",
    "components",
    "know",
    "building",
    "scratch",
    "takes",
    "lot",
    "effort",
    "using",
    "tensorflow",
    "object",
    "detection",
    "speeds",
    "whole",
    "heap",
    "going",
    "going",
    "install",
    "set",
    "tensorflow",
    "object",
    "detection",
    "api",
    "going",
    "going",
    "collect",
    "images",
    "label",
    "order",
    "going",
    "leveraging",
    "webcam",
    "leverage",
    "webcam",
    "able",
    "collect",
    "whole",
    "bunch",
    "images",
    "able",
    "label",
    "objects",
    "probably",
    "thinking",
    "nick",
    "hell",
    "labeling",
    "well",
    "ideally",
    "want",
    "building",
    "object",
    "detection",
    "model",
    "want",
    "able",
    "label",
    "identify",
    "objects",
    "want",
    "try",
    "detect",
    "say",
    "example",
    "building",
    "face",
    "detection",
    "model",
    "well",
    "might",
    "use",
    "webcam",
    "take",
    "photos",
    "draw",
    "label",
    "around",
    "face",
    "take",
    "trained",
    "image",
    "image",
    "labeled",
    "leverage",
    "trained",
    "object",
    "detection",
    "model",
    "able",
    "detect",
    "future",
    "brings",
    "us",
    "next",
    "step",
    "training",
    "model",
    "going",
    "using",
    "tensorflow",
    "object",
    "detection",
    "api",
    "going",
    "passing",
    "images",
    "labels",
    "annotations",
    "able",
    "train",
    "model",
    "whole",
    "bunch",
    "different",
    "types",
    "models",
    "actually",
    "leverage",
    "bunch",
    "available",
    "tensorflow",
    "object",
    "detection",
    "api",
    "going",
    "using",
    "mobile",
    "net",
    "architecture",
    "talk",
    "little",
    "bit",
    "get",
    "going",
    "training",
    "model",
    "initially",
    "able",
    "leverage",
    "throughout",
    "process",
    "sure",
    "training",
    "comes",
    "traditional",
    "programming",
    "typically",
    "data",
    "plus",
    "rules",
    "think",
    "data",
    "feed",
    "effectively",
    "getting",
    "pass",
    "rules",
    "logic",
    "able",
    "get",
    "answers",
    "outcome",
    "right",
    "say",
    "example",
    "get",
    "somebody",
    "sets",
    "color",
    "variable",
    "example",
    "color",
    "red",
    "might",
    "take",
    "variable",
    "go",
    "color",
    "red",
    "x",
    "color",
    "red",
    "statement",
    "think",
    "rules",
    "effectively",
    "action",
    "intended",
    "consequence",
    "actually",
    "train",
    "deep",
    "learning",
    "model",
    "object",
    "detection",
    "model",
    "case",
    "actually",
    "specifying",
    "rules",
    "explicitly",
    "front",
    "beauty",
    "machine",
    "learning",
    "deep",
    "learning",
    "rather",
    "defining",
    "rules",
    "defining",
    "look",
    "detecting",
    "face",
    "actually",
    "going",
    "way",
    "around",
    "normal",
    "comes",
    "machine",
    "learning",
    "going",
    "give",
    "data",
    "plus",
    "answers",
    "data",
    "image",
    "answers",
    "labels",
    "annotations",
    "going",
    "train",
    "object",
    "detection",
    "model",
    "learn",
    "rules",
    "able",
    "detect",
    "faces",
    "machine",
    "learning",
    "sort",
    "flips",
    "traditional",
    "programming",
    "head",
    "rather",
    "starting",
    "data",
    "rules",
    "getting",
    "answers",
    "starting",
    "data",
    "answers",
    "get",
    "rules",
    "slightly",
    "different",
    "paradigm",
    "ideally",
    "gives",
    "really",
    "cool",
    "output",
    "trained",
    "model",
    "going",
    "going",
    "start",
    "detecting",
    "objects",
    "going",
    "two",
    "different",
    "ways",
    "actually",
    "going",
    "detect",
    "object",
    "using",
    "image",
    "say",
    "example",
    "image",
    "wanted",
    "able",
    "detect",
    "different",
    "objects",
    "image",
    "going",
    "able",
    "normally",
    "known",
    "static",
    "detection",
    "going",
    "grabbing",
    "particular",
    "object",
    "able",
    "grab",
    "image",
    "pass",
    "model",
    "detect",
    "object",
    "think",
    "real",
    "good",
    "bit",
    "able",
    "detect",
    "objects",
    "real",
    "time",
    "able",
    "take",
    "webcam",
    "face",
    "toward",
    "towards",
    "particular",
    "frame",
    "particular",
    "thing",
    "actually",
    "able",
    "detect",
    "objects",
    "using",
    "feed",
    "beauty",
    "particularly",
    "beauty",
    "model",
    "picked",
    "step",
    "3",
    "mobile",
    "net",
    "model",
    "going",
    "super",
    "fast",
    "able",
    "detect",
    "objects",
    "real",
    "time",
    "got",
    "computer",
    "gpu",
    "powered",
    "machine",
    "able",
    "detect",
    "objects",
    "real",
    "time",
    "lot",
    "fast",
    "normally",
    "speed",
    "accuracy",
    "talk",
    "performance",
    "tuning",
    "right",
    "detecting",
    "objects",
    "going",
    "detect",
    "stuff",
    "image",
    "also",
    "going",
    "text",
    "stuff",
    "using",
    "video",
    "feed",
    "going",
    "going",
    "learn",
    "freeze",
    "convert",
    "model",
    "whenever",
    "building",
    "models",
    "ideally",
    "want",
    "able",
    "save",
    "model",
    "maybe",
    "give",
    "somebody",
    "else",
    "part",
    "software",
    "engineering",
    "team",
    "data",
    "scientist",
    "might",
    "want",
    "might",
    "want",
    "export",
    "train",
    "detection",
    "model",
    "pass",
    "software",
    "development",
    "engineers",
    "machine",
    "learning",
    "engineers",
    "able",
    "go",
    "deploy",
    "model",
    "freezing",
    "conversion",
    "comes",
    "play",
    "tensorflow",
    "object",
    "detection",
    "able",
    "freeze",
    "model",
    "think",
    "phrasing",
    "saving",
    "wanted",
    "convert",
    "different",
    "formats",
    "course",
    "going",
    "cover",
    "convert",
    "format",
    "also",
    "going",
    "cover",
    "convert",
    "tf",
    "lite",
    "tend",
    "two",
    "popular",
    "formats",
    "people",
    "leverage",
    "using",
    "tensorflow",
    "object",
    "detection",
    "api",
    "going",
    "cover",
    "normally",
    "get",
    "lot",
    "questions",
    "performance",
    "tuning",
    "step",
    "six",
    "going",
    "covering",
    "install",
    "collecting",
    "images",
    "labeling",
    "training",
    "detecting",
    "freezing",
    "conversion",
    "step",
    "six",
    "lot",
    "time",
    "people",
    "come",
    "undone",
    "able",
    "performance",
    "tune",
    "model",
    "important",
    "say",
    "example",
    "use",
    "webcam",
    "go",
    "detect",
    "stuff",
    "sucks",
    "really",
    "really",
    "crappy",
    "actually",
    "detecting",
    "objects",
    "wanted",
    "detect",
    "well",
    "steps",
    "actually",
    "go",
    "able",
    "improve",
    "performance",
    "model",
    "able",
    "accurately",
    "effectively",
    "detect",
    "objects",
    "going",
    "cover",
    "things",
    "go",
    "wrong",
    "actually",
    "perform",
    "stream",
    "models",
    "improve",
    "performance",
    "get",
    "back",
    "track",
    "right",
    "step",
    "six",
    "going",
    "going",
    "learn",
    "train",
    "collab",
    "cloud",
    "instance",
    "beauty",
    "everything",
    "cover",
    "course",
    "code",
    "full",
    "walkthrough",
    "well",
    "guide",
    "going",
    "available",
    "github",
    "go",
    "github",
    "repositories",
    "show",
    "later",
    "actually",
    "see",
    "written",
    "guide",
    "terms",
    "well",
    "written",
    "really",
    "big",
    "readme",
    "walkthrough",
    "actually",
    "get",
    "running",
    "well",
    "couple",
    "extra",
    "bonuses",
    "make",
    "little",
    "bit",
    "easier",
    "step",
    "eight",
    "comes",
    "together",
    "going",
    "three",
    "different",
    "projects",
    "projects",
    "really",
    "wanted",
    "quite",
    "time",
    "going",
    "real",
    "time",
    "first",
    "project",
    "actually",
    "going",
    "one",
    "always",
    "wanted",
    "actually",
    "going",
    "using",
    "microscope",
    "usb",
    "microscope",
    "able",
    "detect",
    "defects",
    "particular",
    "small",
    "pieces",
    "case",
    "got",
    "couple",
    "leds",
    "pulled",
    "raspberry",
    "pi",
    "kit",
    "case",
    "really",
    "really",
    "small",
    "let",
    "see",
    "see",
    "see",
    "right",
    "really",
    "small",
    "led",
    "see",
    "one",
    "issues",
    "right",
    "one",
    "obviously",
    "got",
    "bent",
    "pin",
    "bring",
    "little",
    "bit",
    "closer",
    "see",
    "particular",
    "pin",
    "bent",
    "right",
    "actually",
    "going",
    "train",
    "object",
    "detection",
    "model",
    "leverage",
    "microscope",
    "able",
    "detect",
    "bent",
    "pins",
    "whole",
    "wide",
    "range",
    "use",
    "cases",
    "say",
    "example",
    "pcb",
    "printed",
    "circle",
    "board",
    "wanted",
    "able",
    "detect",
    "defects",
    "say",
    "example",
    "wanted",
    "able",
    "look",
    "petri",
    "dish",
    "able",
    "detect",
    "different",
    "things",
    "within",
    "particular",
    "microscope",
    "slide",
    "well",
    "project",
    "number",
    "one",
    "project",
    "number",
    "two",
    "going",
    "able",
    "detect",
    "directions",
    "going",
    "train",
    "model",
    "able",
    "detect",
    "hand",
    "pointing",
    "left",
    "right",
    "going",
    "take",
    "model",
    "convert",
    "actually",
    "integrate",
    "web",
    "app",
    "say",
    "example",
    "wanted",
    "build",
    "build",
    "game",
    "pass",
    "detections",
    "using",
    "hand",
    "using",
    "object",
    "detection",
    "able",
    "third",
    "final",
    "project",
    "actually",
    "going",
    "raspberry",
    "pi",
    "object",
    "detection",
    "one",
    "tends",
    "really",
    "really",
    "popular",
    "seen",
    "bit",
    "performance",
    "drop",
    "pass",
    "raspberry",
    "pi",
    "take",
    "look",
    "going",
    "ideally",
    "trying",
    "able",
    "detect",
    "sentiment",
    "face",
    "using",
    "raspberry",
    "pi",
    "going",
    "show",
    "alrighty",
    "eight",
    "steps",
    "going",
    "go",
    "take",
    "step",
    "step",
    "ideally",
    "recommend",
    "go",
    "part",
    "take",
    "break",
    "review",
    "actually",
    "gone",
    "done",
    "make",
    "sure",
    "working",
    "going",
    "next",
    "step",
    "take",
    "lots",
    "notes",
    "got",
    "questions",
    "hit",
    "comments",
    "join",
    "discord",
    "server",
    "probably",
    "best",
    "tip",
    "well",
    "going",
    "include",
    "link",
    "inside",
    "description",
    "well",
    "pinned",
    "comment",
    "able",
    "join",
    "discord",
    "server",
    "lot",
    "people",
    "following",
    "tutorials",
    "put",
    "youtube",
    "discord",
    "server",
    "well",
    "truly",
    "able",
    "jump",
    "get",
    "help",
    "need",
    "also",
    "show",
    "sort",
    "debug",
    "walk",
    "tutorial",
    "game",
    "plan",
    "eight",
    "steps",
    "without",
    "ado",
    "let",
    "kick",
    "things",
    "let",
    "step",
    "step",
    "one",
    "install",
    "set",
    "alrighty",
    "install",
    "setup",
    "first",
    "thing",
    "going",
    "sort",
    "show",
    "get",
    "code",
    "tutorials",
    "case",
    "got",
    "three",
    "sets",
    "code",
    "one",
    "important",
    "others",
    "show",
    "gone",
    "written",
    "three",
    "different",
    "gone",
    "built",
    "three",
    "different",
    "sets",
    "github",
    "repositories",
    "going",
    "able",
    "pick",
    "leverage",
    "get",
    "running",
    "object",
    "detection",
    "whole",
    "heap",
    "plus",
    "done",
    "previous",
    "object",
    "detection",
    "tutorials",
    "let",
    "say",
    "example",
    "face",
    "mask",
    "detector",
    "sign",
    "language",
    "detector",
    "actually",
    "done",
    "actually",
    "improved",
    "code",
    "base",
    "actually",
    "made",
    "flexible",
    "enough",
    "work",
    "windows",
    "machine",
    "linux",
    "machine",
    "work",
    "colab",
    "whole",
    "bunch",
    "different",
    "environments",
    "actually",
    "detects",
    "environment",
    "trying",
    "use",
    "runs",
    "appropriate",
    "code",
    "sorts",
    "file",
    "paths",
    "three",
    "different",
    "sets",
    "code",
    "tensorflow",
    "object",
    "detection",
    "course",
    "code",
    "tensorflow",
    "object",
    "detection",
    "app",
    "whenever",
    "say",
    "tfod",
    "tensorflow",
    "object",
    "detection",
    "tensorflow",
    "object",
    "detection",
    "raspberry",
    "pi",
    "code",
    "gon",
    "na",
    "get",
    "three",
    "different",
    "sets",
    "code",
    "order",
    "get",
    "need",
    "go",
    "https",
    "colon",
    "forward",
    "slash",
    "forward",
    "slash",
    "forward",
    "slash",
    "knick",
    "knock",
    "knack",
    "forward",
    "slash",
    "tfod",
    "course",
    "forward",
    "slash",
    "chair",
    "phone",
    "app",
    "forward",
    "slash",
    "tfod",
    "rpi",
    "actually",
    "take",
    "look",
    "course",
    "code",
    "see",
    "actually",
    "got",
    "baseline",
    "image",
    "see",
    "detecting",
    "live",
    "long",
    "thumbs",
    "actually",
    "actually",
    "going",
    "build",
    "course",
    "oh",
    "actually",
    "going",
    "build",
    "object",
    "detection",
    "model",
    "first",
    "going",
    "gesture",
    "based",
    "model",
    "nice",
    "thing",
    "repositories",
    "actually",
    "written",
    "steps",
    "um",
    "written",
    "steps",
    "rather",
    "made",
    "video",
    "tutorial",
    "top",
    "prefer",
    "walking",
    "guide",
    "walk",
    "one",
    "able",
    "build",
    "models",
    "well",
    "done",
    "tensorflow",
    "object",
    "detection",
    "course",
    "code",
    "main",
    "training",
    "code",
    "also",
    "done",
    "app",
    "code",
    "shows",
    "deploy",
    "app",
    "also",
    "done",
    "raspberry",
    "pi",
    "code",
    "shows",
    "need",
    "install",
    "need",
    "clone",
    "able",
    "get",
    "running",
    "code",
    "going",
    "made",
    "available",
    "check",
    "links",
    "description",
    "able",
    "pick",
    "able",
    "leverage",
    "heart",
    "content",
    "able",
    "build",
    "whole",
    "bunch",
    "different",
    "object",
    "detection",
    "models",
    "three",
    "sets",
    "code",
    "going",
    "able",
    "leverage",
    "see",
    "kick",
    "actually",
    "start",
    "first",
    "step",
    "actually",
    "going",
    "go",
    "clone",
    "code",
    "using",
    "git",
    "cloned",
    "able",
    "next",
    "thing",
    "going",
    "going",
    "creating",
    "virtual",
    "environment",
    "going",
    "explain",
    "little",
    "bit",
    "code",
    "actually",
    "go",
    "ahead",
    "want",
    "spend",
    "much",
    "time",
    "slides",
    "think",
    "virtual",
    "environment",
    "separate",
    "room",
    "house",
    "like",
    "creating",
    "separate",
    "room",
    "house",
    "reason",
    "actually",
    "using",
    "virtual",
    "environment",
    "isolates",
    "different",
    "python",
    "different",
    "library",
    "dependencies",
    "different",
    "things",
    "actually",
    "going",
    "need",
    "tensorflow",
    "object",
    "detection",
    "model",
    "makes",
    "sure",
    "conflict",
    "different",
    "libraries",
    "dependencies",
    "already",
    "got",
    "installed",
    "inside",
    "python",
    "jupyter",
    "environment",
    "going",
    "going",
    "create",
    "new",
    "virtual",
    "environment",
    "think",
    "creating",
    "new",
    "room",
    "house",
    "going",
    "install",
    "object",
    "detection",
    "stuff",
    "inside",
    "mess",
    "around",
    "things",
    "ensures",
    "get",
    "main",
    "dependencies",
    "need",
    "get",
    "dependency",
    "conflicts",
    "order",
    "going",
    "using",
    "library",
    "called",
    "venv",
    "allows",
    "us",
    "create",
    "new",
    "python",
    "environment",
    "name",
    "whatever",
    "want",
    "whatever",
    "want",
    "going",
    "going",
    "activate",
    "talk",
    "little",
    "bit",
    "later",
    "upgrade",
    "pip",
    "dependency",
    "makes",
    "sure",
    "latest",
    "resolvers",
    "good",
    "stuff",
    "need",
    "going",
    "installing",
    "ipi",
    "kernel",
    "ipi",
    "kernel",
    "really",
    "important",
    "dependency",
    "allows",
    "associate",
    "virtual",
    "environment",
    "jupyter",
    "notebook",
    "ideally",
    "going",
    "working",
    "inside",
    "jupyter",
    "notebooks",
    "wo",
    "cover",
    "installing",
    "want",
    "see",
    "install",
    "scratch",
    "link",
    "installation",
    "video",
    "anaconda",
    "install",
    "jupyter",
    "notebook",
    "install",
    "often",
    "done",
    "data",
    "science",
    "object",
    "detection",
    "tutorials",
    "jupyter",
    "notebooks",
    "installed",
    "going",
    "cover",
    "stuff",
    "need",
    "go",
    "jupyter",
    "notebooks",
    "little",
    "bit",
    "able",
    "build",
    "object",
    "detection",
    "models",
    "right",
    "creating",
    "virtual",
    "environment",
    "think",
    "separate",
    "room",
    "inside",
    "house",
    "going",
    "install",
    "object",
    "detection",
    "stuff",
    "screw",
    "everything",
    "else",
    "mind",
    "also",
    "like",
    "locking",
    "room",
    "getting",
    "stuff",
    "done",
    "right",
    "keeping",
    "everything",
    "one",
    "place",
    "bunch",
    "dependencies",
    "need",
    "install",
    "whenever",
    "working",
    "tensorflow",
    "first",
    "foremost",
    "one",
    "going",
    "visual",
    "c",
    "plus",
    "build",
    "tools",
    "show",
    "install",
    "really",
    "download",
    "install",
    "nothing",
    "special",
    "tensorflow",
    "needs",
    "visual",
    "c",
    "plus",
    "plus",
    "build",
    "tools",
    "order",
    "run",
    "pretty",
    "straightforward",
    "link",
    "insole",
    "tutorial",
    "pick",
    "one",
    "pretty",
    "straightforward",
    "people",
    "tend",
    "get",
    "hung",
    "installing",
    "two",
    "though",
    "cuda",
    "cuda",
    "kuden",
    "give",
    "gpu",
    "based",
    "acceleration",
    "training",
    "tensorflow",
    "object",
    "detection",
    "model",
    "reason",
    "use",
    "gpu",
    "exponentially",
    "faster",
    "train",
    "object",
    "detection",
    "model",
    "using",
    "gpu",
    "versus",
    "using",
    "raw",
    "cpu",
    "raw",
    "memory",
    "gpu",
    "worry",
    "still",
    "go",
    "tutorial",
    "take",
    "little",
    "bit",
    "longer",
    "train",
    "model",
    "gpu",
    "gone",
    "object",
    "detection",
    "tutorial",
    "actually",
    "activating",
    "actually",
    "utilized",
    "show",
    "check",
    "might",
    "actually",
    "particularly",
    "using",
    "tensorflow",
    "might",
    "right",
    "cuda",
    "kuden",
    "installations",
    "available",
    "show",
    "actually",
    "see",
    "whether",
    "actually",
    "find",
    "appropriate",
    "combination",
    "reason",
    "talking",
    "consistently",
    "going",
    "new",
    "versions",
    "tensorflow",
    "coming",
    "might",
    "need",
    "update",
    "cuda",
    "version",
    "update",
    "cd",
    "version",
    "order",
    "responsive",
    "actual",
    "change",
    "show",
    "detect",
    "let",
    "actually",
    "take",
    "look",
    "terms",
    "visual",
    "studio",
    "need",
    "go",
    "visual",
    "studio",
    "community",
    "download",
    "visual",
    "studio",
    "going",
    "download",
    "everything",
    "need",
    "ideally",
    "want",
    "run",
    "install",
    "going",
    "install",
    "c",
    "plus",
    "build",
    "tools",
    "want",
    "full",
    "walkthrough",
    "really",
    "matter",
    "downloading",
    "installing",
    "need",
    "whole",
    "bunch",
    "stuff",
    "going",
    "cancel",
    "already",
    "got",
    "installed",
    "need",
    "download",
    "install",
    "going",
    "give",
    "c",
    "plus",
    "plus",
    "build",
    "tools",
    "want",
    "see",
    "full",
    "walkthrough",
    "install",
    "include",
    "link",
    "well",
    "next",
    "thing",
    "important",
    "cuda",
    "cu",
    "dnn",
    "applies",
    "got",
    "gpu",
    "want",
    "use",
    "gpu",
    "accelerated",
    "training",
    "going",
    "first",
    "going",
    "show",
    "check",
    "tensorflow",
    "versions",
    "map",
    "appropriate",
    "cuda",
    "cud",
    "libraries",
    "reason",
    "say",
    "actually",
    "go",
    "link",
    "forward",
    "slash",
    "install",
    "forward",
    "slash",
    "source",
    "also",
    "one",
    "links",
    "available",
    "description",
    "actually",
    "scroll",
    "way",
    "bottom",
    "actually",
    "gives",
    "appropriate",
    "versions",
    "tensorflow",
    "cuda",
    "cud",
    "use",
    "case",
    "cpu",
    "run",
    "full",
    "object",
    "detection",
    "tutorial",
    "computer",
    "even",
    "gpu",
    "work",
    "fine",
    "little",
    "bit",
    "slow",
    "importantly",
    "gpu",
    "combinations",
    "using",
    "tensorflow",
    "need",
    "using",
    "python",
    "version",
    "need",
    "gcc",
    "compiler",
    "bazel",
    "importantly",
    "kudo",
    "cu",
    "dnn",
    "got",
    "tensorflow",
    "runs",
    "cuda",
    "8",
    "kuda",
    "cd",
    "8",
    "cuda",
    "need",
    "make",
    "sure",
    "important",
    "need",
    "make",
    "sure",
    "tensorflow",
    "version",
    "matches",
    "two",
    "cuda",
    "cu",
    "dn",
    "versions",
    "match",
    "still",
    "run",
    "wo",
    "leverage",
    "gpu",
    "probably",
    "sitting",
    "thinking",
    "hey",
    "got",
    "gpu",
    "wise",
    "training",
    "faster",
    "often",
    "actually",
    "show",
    "check",
    "tensorflow",
    "version",
    "get",
    "appropriate",
    "cuda",
    "cu",
    "dn",
    "versions",
    "gone",
    "initial",
    "steps",
    "insole",
    "linux",
    "uh",
    "linux",
    "mac",
    "os",
    "combo",
    "go",
    "windows",
    "one",
    "left",
    "hand",
    "side",
    "case",
    "install",
    "link",
    "sash",
    "install",
    "forward",
    "slash",
    "source",
    "underscore",
    "windows",
    "style",
    "thing",
    "talks",
    "visual",
    "c",
    "plus",
    "plus",
    "build",
    "tools",
    "tells",
    "go",
    "visual",
    "studio",
    "hit",
    "visual",
    "studio",
    "downloads",
    "select",
    "redistributable",
    "download",
    "reason",
    "sort",
    "going",
    "sort",
    "showing",
    "information",
    "teaching",
    "coming",
    "gives",
    "idea",
    "go",
    "get",
    "help",
    "always",
    "hit",
    "comments",
    "got",
    "install",
    "visual",
    "c",
    "plus",
    "plus",
    "build",
    "tools",
    "downloads",
    "go",
    "towards",
    "bottom",
    "combos",
    "windows",
    "using",
    "tens",
    "flow",
    "using",
    "tensorflow",
    "gpu",
    "need",
    "using",
    "tensorflow",
    "gpu",
    "cuda",
    "8",
    "11",
    "using",
    "tensorflow",
    "gpu",
    "example",
    "going",
    "fall",
    "category",
    "need",
    "using",
    "python",
    "um",
    "need",
    "use",
    "microsoft",
    "visuals",
    "visual",
    "c",
    "plus",
    "plus",
    "build",
    "tools",
    "2019",
    "talking",
    "compiler",
    "right",
    "sounds",
    "complicated",
    "really",
    "talking",
    "visual",
    "thing",
    "downloading",
    "um",
    "fine",
    "use",
    "would",
    "move",
    "microsoft",
    "visual",
    "studio",
    "2019",
    "need",
    "bazel",
    "normally",
    "need",
    "case",
    "using",
    "need",
    "cuda",
    "kudun",
    "really",
    "specific",
    "combinations",
    "need",
    "using",
    "want",
    "training",
    "gpu",
    "cool",
    "right",
    "talks",
    "little",
    "bit",
    "actually",
    "come",
    "back",
    "gpu",
    "install",
    "little",
    "bit",
    "later",
    "actually",
    "show",
    "check",
    "tensorflow",
    "version",
    "make",
    "sure",
    "got",
    "right",
    "version",
    "virtual",
    "environment",
    "think",
    "room",
    "inside",
    "house",
    "find",
    "matching",
    "cuda",
    "cu",
    "dnn",
    "versions",
    "okay",
    "might",
    "seem",
    "pretty",
    "complicated",
    "probably",
    "thinking",
    "right",
    "nick",
    "hell",
    "going",
    "get",
    "errors",
    "undoubtedly",
    "get",
    "errors",
    "part",
    "always",
    "updated",
    "always",
    "changes",
    "couple",
    "things",
    "first",
    "thing",
    "recommend",
    "getting",
    "errors",
    "means",
    "mention",
    "comments",
    "getting",
    "errors",
    "installation",
    "steps",
    "actually",
    "running",
    "notebook",
    "actually",
    "put",
    "together",
    "error",
    "guide",
    "go",
    "tensorflow",
    "object",
    "detection",
    "course",
    "github",
    "repository",
    "available",
    "forward",
    "slash",
    "knickknack",
    "knack",
    "forward",
    "tfod",
    "course",
    "link",
    "going",
    "available",
    "description",
    "actually",
    "put",
    "together",
    "error",
    "guide",
    "based",
    "errors",
    "questions",
    "saw",
    "people",
    "asking",
    "part",
    "object",
    "detection",
    "tutorials",
    "got",
    "see",
    "say",
    "example",
    "get",
    "error",
    "says",
    "module",
    "named",
    "whatever",
    "module",
    "name",
    "well",
    "often",
    "solution",
    "go",
    "ahead",
    "install",
    "module",
    "say",
    "example",
    "got",
    "actually",
    "got",
    "example",
    "module",
    "named",
    "typeguard",
    "well",
    "want",
    "go",
    "install",
    "typeguide",
    "using",
    "pip",
    "install",
    "another",
    "one",
    "really",
    "really",
    "common",
    "pi",
    "coco",
    "tools",
    "one",
    "case",
    "let",
    "say",
    "example",
    "get",
    "area",
    "let",
    "zoom",
    "see",
    "value",
    "error",
    "numpy",
    "array",
    "size",
    "change",
    "may",
    "indicate",
    "binary",
    "incompatibility",
    "expected",
    "88",
    "c",
    "header",
    "got",
    "80",
    "pi",
    "object",
    "sometimes",
    "errors",
    "descriptive",
    "probably",
    "think",
    "well",
    "numpy",
    "error",
    "actually",
    "pi",
    "coco",
    "tools",
    "error",
    "errors",
    "error",
    "guide",
    "going",
    "available",
    "inside",
    "github",
    "repository",
    "goal",
    "ideally",
    "consistently",
    "updating",
    "new",
    "errors",
    "pop",
    "new",
    "things",
    "pop",
    "need",
    "solution",
    "going",
    "consistently",
    "posting",
    "cloning",
    "updating",
    "error",
    "guide",
    "consistently",
    "got",
    "another",
    "place",
    "turn",
    "place",
    "turn",
    "need",
    "support",
    "jump",
    "onto",
    "discord",
    "server",
    "include",
    "link",
    "description",
    "bunch",
    "people",
    "already",
    "awesome",
    "providing",
    "help",
    "anybody",
    "actually",
    "going",
    "tutorials",
    "okay",
    "next",
    "thing",
    "sort",
    "wanted",
    "show",
    "error",
    "guide",
    "get",
    "help",
    "get",
    "stuck",
    "okay",
    "lot",
    "slides",
    "want",
    "want",
    "actually",
    "get",
    "started",
    "thing",
    "start",
    "building",
    "object",
    "detection",
    "model",
    "first",
    "thing",
    "going",
    "saying",
    "going",
    "start",
    "creating",
    "virtual",
    "environment",
    "case",
    "actually",
    "got",
    "steps",
    "create",
    "virtual",
    "environment",
    "inside",
    "tensorflow",
    "object",
    "detection",
    "course",
    "code",
    "see",
    "first",
    "step",
    "ideally",
    "want",
    "want",
    "clone",
    "tensorflow",
    "object",
    "detection",
    "course",
    "repository",
    "contains",
    "checkpoints",
    "get",
    "rid",
    "know",
    "included",
    "includes",
    "git",
    "ignore",
    "file",
    "image",
    "collection",
    "notebook",
    "training",
    "let",
    "zoom",
    "training",
    "detection",
    "notebook",
    "error",
    "guide",
    "showed",
    "well",
    "readme",
    "gives",
    "steps",
    "need",
    "go",
    "let",
    "go",
    "ahead",
    "clone",
    "repository",
    "going",
    "copy",
    "link",
    "go",
    "new",
    "command",
    "prompt",
    "case",
    "got",
    "new",
    "command",
    "prompt",
    "windows",
    "mac",
    "linux",
    "machine",
    "opening",
    "terminal",
    "going",
    "side",
    "side",
    "see",
    "going",
    "create",
    "new",
    "folder",
    "inside",
    "drive",
    "inside",
    "youtube",
    "folder",
    "going",
    "call",
    "let",
    "call",
    "tensorflow",
    "object",
    "detection",
    "cool",
    "going",
    "go",
    "folder",
    "go",
    "cd",
    "youtube",
    "cd",
    "tensorflow",
    "object",
    "detection",
    "going",
    "clone",
    "repository",
    "saying",
    "type",
    "git",
    "clone",
    "link",
    "links",
    "going",
    "available",
    "inside",
    "description",
    "let",
    "make",
    "little",
    "bit",
    "easier",
    "see",
    "right",
    "written",
    "git",
    "clone",
    "https",
    "colon",
    "forward",
    "forward",
    "slash",
    "forward",
    "slash",
    "nick",
    "knock",
    "knack",
    "forward",
    "slash",
    "tfod",
    "course",
    "going",
    "give",
    "us",
    "stuff",
    "saw",
    "inside",
    "github",
    "right",
    "going",
    "give",
    "us",
    "notebooks",
    "bunch",
    "stuff",
    "actually",
    "going",
    "clone",
    "create",
    "new",
    "folder",
    "inside",
    "tensorflow",
    "object",
    "detector",
    "repository",
    "inside",
    "tensorflow",
    "object",
    "detection",
    "folder",
    "already",
    "got",
    "inside",
    "file",
    "explorer",
    "go",
    "ahead",
    "run",
    "clone",
    "see",
    "cloning",
    "receiving",
    "objects",
    "speed",
    "clones",
    "going",
    "dependent",
    "internet",
    "mine",
    "sucks",
    "see",
    "getting",
    "megabits",
    "per",
    "second",
    "case",
    "done",
    "right",
    "cool",
    "got",
    "repository",
    "clone",
    "everything",
    "saw",
    "locally",
    "want",
    "start",
    "creating",
    "environment",
    "order",
    "saying",
    "going",
    "use",
    "v",
    "e",
    "v",
    "package",
    "effectively",
    "going",
    "go",
    "steps",
    "two",
    "three",
    "going",
    "create",
    "virtual",
    "environment",
    "going",
    "activate",
    "think",
    "activating",
    "actually",
    "actually",
    "stepped",
    "think",
    "activating",
    "actually",
    "stepping",
    "room",
    "said",
    "creating",
    "virtual",
    "environment",
    "like",
    "creating",
    "new",
    "room",
    "house",
    "well",
    "activating",
    "actually",
    "like",
    "stepping",
    "room",
    "inside",
    "environment",
    "going",
    "isolate",
    "libraries",
    "first",
    "going",
    "create",
    "new",
    "environment",
    "using",
    "command",
    "python",
    "dash",
    "v",
    "e",
    "v",
    "tfod",
    "tf",
    "od",
    "going",
    "make",
    "little",
    "bit",
    "bigger",
    "tfod",
    "end",
    "actually",
    "name",
    "environment",
    "going",
    "creating",
    "wanted",
    "name",
    "something",
    "differently",
    "could",
    "wanted",
    "name",
    "special",
    "environment",
    "could",
    "could",
    "name",
    "whatever",
    "want",
    "case",
    "going",
    "clear",
    "using",
    "cls",
    "mac",
    "going",
    "clear",
    "going",
    "python",
    "dash",
    "v",
    "e",
    "v",
    "tfod",
    "actually",
    "written",
    "using",
    "python",
    "passing",
    "flag",
    "going",
    "using",
    "v",
    "e",
    "v",
    "dependency",
    "using",
    "going",
    "creating",
    "new",
    "environment",
    "called",
    "tfod",
    "virtual",
    "environment",
    "think",
    "new",
    "room",
    "going",
    "called",
    "hit",
    "enter",
    "see",
    "creating",
    "new",
    "uh",
    "done",
    "inside",
    "let",
    "delete",
    "right",
    "error",
    "going",
    "error",
    "stuff",
    "breaks",
    "sort",
    "want",
    "show",
    "realities",
    "actually",
    "going",
    "delete",
    "actually",
    "going",
    "inside",
    "tfod",
    "course",
    "folder",
    "going",
    "see",
    "actually",
    "going",
    "repeat",
    "command",
    "saw",
    "created",
    "initially",
    "created",
    "outside",
    "going",
    "go",
    "folder",
    "create",
    "let",
    "type",
    "type",
    "python",
    "v",
    "e",
    "v",
    "tfod",
    "create",
    "inhale",
    "reason",
    "like",
    "keeping",
    "everything",
    "isolated",
    "main",
    "training",
    "code",
    "like",
    "one",
    "section",
    "app",
    "code",
    "like",
    "separate",
    "section",
    "raspberry",
    "pi",
    "code",
    "like",
    "keeping",
    "separate",
    "well",
    "play",
    "around",
    "environment",
    "elsewhere",
    "wanted",
    "keep",
    "isolated",
    "see",
    "okay",
    "see",
    "got",
    "tensorflow",
    "object",
    "detection",
    "repository",
    "created",
    "make",
    "little",
    "bit",
    "bigger",
    "folder",
    "tensorflow",
    "object",
    "detection",
    "virtual",
    "environment",
    "open",
    "bunch",
    "stuff",
    "um",
    "case",
    "gon",
    "na",
    "vary",
    "depending",
    "whether",
    "mac",
    "whether",
    "windows",
    "machine",
    "collab",
    "cloud",
    "instance",
    "need",
    "create",
    "virtual",
    "environment",
    "set",
    "run",
    "individual",
    "pods",
    "need",
    "go",
    "ahead",
    "locally",
    "suggest",
    "allows",
    "detection",
    "later",
    "go",
    "ahead",
    "create",
    "virtual",
    "environment",
    "main",
    "thing",
    "tend",
    "look",
    "inside",
    "windows",
    "go",
    "libs",
    "site",
    "packages",
    "see",
    "got",
    "bunch",
    "different",
    "uh",
    "libraries",
    "available",
    "got",
    "peer",
    "pip",
    "dash",
    "dash",
    "info",
    "bunch",
    "different",
    "packages",
    "right",
    "really",
    "important",
    "thing",
    "right",
    "type",
    "pip",
    "list",
    "normally",
    "shows",
    "different",
    "python",
    "packages",
    "got",
    "available",
    "going",
    "see",
    "ton",
    "right",
    "got",
    "whole",
    "heap",
    "different",
    "libraries",
    "available",
    "right",
    "reason",
    "seeing",
    "couple",
    "actually",
    "activated",
    "environment",
    "yet",
    "happens",
    "often",
    "need",
    "make",
    "sure",
    "activate",
    "environment",
    "order",
    "see",
    "order",
    "see",
    "isolated",
    "packages",
    "actually",
    "got",
    "installed",
    "going",
    "actually",
    "activate",
    "environment",
    "command",
    "use",
    "going",
    "differ",
    "depending",
    "whether",
    "running",
    "linux",
    "mac",
    "linux",
    "going",
    "run",
    "source",
    "tfod",
    "whatever",
    "name",
    "virtual",
    "environment",
    "forward",
    "slash",
    "bin",
    "forward",
    "slash",
    "activate",
    "able",
    "activate",
    "environment",
    "windows",
    "know",
    "made",
    "different",
    "different",
    "dot",
    "backward",
    "slash",
    "tfod",
    "name",
    "environment",
    "backwards",
    "scripts",
    "backwards",
    "activate",
    "case",
    "windows",
    "machine",
    "going",
    "using",
    "second",
    "command",
    "going",
    "effectively",
    "going",
    "go",
    "back",
    "main",
    "folder",
    "go",
    "tfod",
    "go",
    "scripts",
    "going",
    "running",
    "activate",
    "see",
    "activate",
    "file",
    "activate",
    "batch",
    "file",
    "let",
    "go",
    "ahead",
    "run",
    "going",
    "backward",
    "slash",
    "tfod",
    "backward",
    "slash",
    "scripts",
    "backwards",
    "activate",
    "watch",
    "happens",
    "actually",
    "run",
    "right",
    "right",
    "actually",
    "actually",
    "inside",
    "virtual",
    "environment",
    "run",
    "see",
    "got",
    "little",
    "thing",
    "tells",
    "us",
    "virtual",
    "environment",
    "actually",
    "inside",
    "tensorflow",
    "object",
    "detection",
    "virtual",
    "environment",
    "stepped",
    "new",
    "room",
    "type",
    "pip",
    "list",
    "see",
    "way",
    "shorter",
    "right",
    "actually",
    "represents",
    "actual",
    "sets",
    "libraries",
    "actually",
    "available",
    "inside",
    "remember",
    "packages",
    "wanted",
    "deactivate",
    "environment",
    "later",
    "need",
    "type",
    "deactivate",
    "going",
    "step",
    "right",
    "see",
    "tfod",
    "gone",
    "case",
    "actually",
    "want",
    "activated",
    "let",
    "tfod",
    "scripts",
    "activate",
    "back",
    "see",
    "right",
    "going",
    "clear",
    "clean",
    "next",
    "thing",
    "need",
    "install",
    "couple",
    "key",
    "dependencies",
    "first",
    "one",
    "want",
    "upgrade",
    "pip",
    "going",
    "make",
    "sure",
    "update",
    "using",
    "latest",
    "resolvers",
    "got",
    "latest",
    "pip",
    "package",
    "order",
    "need",
    "run",
    "command",
    "python",
    "dash",
    "pip",
    "install",
    "dash",
    "upgrade",
    "pip",
    "let",
    "going",
    "type",
    "python",
    "dash",
    "pip",
    "install",
    "dash",
    "dash",
    "upgrade",
    "pip",
    "install",
    "dash",
    "dash",
    "upgrade",
    "pip",
    "going",
    "upgrade",
    "pip",
    "installer",
    "see",
    "uninstalled",
    "tall",
    "installed",
    "thing",
    "notice",
    "updating",
    "packages",
    "see",
    "updated",
    "inside",
    "site",
    "packages",
    "folder",
    "well",
    "makes",
    "life",
    "whole",
    "heap",
    "easier",
    "actually",
    "see",
    "installed",
    "real",
    "time",
    "comes",
    "actually",
    "installing",
    "tensorflow",
    "actually",
    "see",
    "really",
    "useful",
    "sometimes",
    "need",
    "run",
    "install",
    "multiple",
    "times",
    "make",
    "sure",
    "installed",
    "actually",
    "also",
    "got",
    "verification",
    "script",
    "well",
    "make",
    "sure",
    "got",
    "right",
    "packages",
    "able",
    "go",
    "ahead",
    "okay",
    "gone",
    "upgraded",
    "pip",
    "next",
    "thing",
    "want",
    "install",
    "ipi",
    "kernel",
    "ipi",
    "kernel",
    "allows",
    "us",
    "associate",
    "virtual",
    "environment",
    "jupyter",
    "notebook",
    "going",
    "mainly",
    "working",
    "jupyter",
    "notebooks",
    "installing",
    "jupyter",
    "notebooks",
    "first",
    "time",
    "highly",
    "recommend",
    "go",
    "anaconda",
    "python",
    "actually",
    "install",
    "anaconda",
    "going",
    "give",
    "us",
    "give",
    "bunch",
    "jupiter",
    "notebooks",
    "jupyter",
    "labs",
    "able",
    "get",
    "running",
    "jupyter",
    "notebooks",
    "installed",
    "already",
    "highly",
    "recommend",
    "running",
    "reasonably",
    "straightforward",
    "get",
    "installed",
    "got",
    "video",
    "installing",
    "separately",
    "link",
    "well",
    "let",
    "know",
    "comments",
    "want",
    "also",
    "let",
    "know",
    "comments",
    "like",
    "sort",
    "format",
    "sort",
    "walking",
    "giving",
    "idea",
    "actually",
    "go",
    "always",
    "welcome",
    "feedback",
    "anything",
    "like",
    "like",
    "means",
    "let",
    "know",
    "okay",
    "installing",
    "ipi",
    "kernel",
    "let",
    "ipi",
    "kernel",
    "allows",
    "us",
    "associate",
    "virtual",
    "environment",
    "jupyter",
    "notebook",
    "first",
    "need",
    "install",
    "second",
    "line",
    "actually",
    "going",
    "allow",
    "us",
    "associate",
    "little",
    "bit",
    "typo",
    "fine",
    "let",
    "go",
    "ahead",
    "install",
    "ipod",
    "kernel",
    "pip",
    "install",
    "ipi",
    "kernel",
    "let",
    "make",
    "little",
    "bit",
    "bigger",
    "see",
    "installing",
    "libraries",
    "hide",
    "navigation",
    "pane",
    "see",
    "sold",
    "right",
    "type",
    "pip",
    "list",
    "let",
    "jump",
    "back",
    "see",
    "got",
    "additional",
    "packages",
    "next",
    "thing",
    "want",
    "actually",
    "install",
    "virtual",
    "environment",
    "jupyter",
    "often",
    "people",
    "come",
    "unstuck",
    "using",
    "virtual",
    "environments",
    "jupiter",
    "data",
    "science",
    "workloads",
    "need",
    "install",
    "jupiter",
    "kernel",
    "notebook",
    "going",
    "give",
    "ability",
    "see",
    "virtual",
    "environment",
    "associated",
    "notebooks",
    "order",
    "going",
    "running",
    "command",
    "python",
    "dash",
    "ipi",
    "kernel",
    "install",
    "dash",
    "dash",
    "user",
    "dash",
    "dash",
    "name",
    "tf",
    "equals",
    "tfod",
    "let",
    "go",
    "ahead",
    "run",
    "pi",
    "kernel",
    "right",
    "python",
    "dash",
    "already",
    "forgot",
    "ipi",
    "kernel",
    "install",
    "dash",
    "dash",
    "user",
    "dash",
    "dash",
    "name",
    "equals",
    "tfod",
    "right",
    "actually",
    "let",
    "clear",
    "actually",
    "see",
    "little",
    "bit",
    "better",
    "uh",
    "python",
    "dash",
    "install",
    "dash",
    "dash",
    "python",
    "ipi",
    "kernel",
    "installed",
    "bad",
    "dash",
    "dash",
    "user",
    "dash",
    "dash",
    "name",
    "equals",
    "tfod",
    "okay",
    "let",
    "check",
    "python",
    "dash",
    "kernel",
    "install",
    "dash",
    "dash",
    "user",
    "dash",
    "dash",
    "name",
    "tfid",
    "okay",
    "good",
    "wanted",
    "call",
    "last",
    "bit",
    "effectively",
    "telling",
    "ipi",
    "kernel",
    "package",
    "name",
    "virtual",
    "environment",
    "change",
    "name",
    "virtual",
    "environment",
    "need",
    "make",
    "sure",
    "change",
    "name",
    "say",
    "example",
    "created",
    "virtual",
    "environment",
    "wrote",
    "special",
    "environment",
    "go",
    "install",
    "virtual",
    "environment",
    "jupyter",
    "notebooks",
    "need",
    "change",
    "name",
    "case",
    "would",
    "special",
    "virtual",
    "environment",
    "whatever",
    "called",
    "case",
    "hit",
    "run",
    "going",
    "install",
    "see",
    "installed",
    "kernel",
    "spec",
    "tfod",
    "blah",
    "blah",
    "blah",
    "actually",
    "got",
    "particular",
    "virtual",
    "environment",
    "available",
    "inside",
    "jupyter",
    "notebook",
    "easy",
    "way",
    "validate",
    "start",
    "jupyter",
    "notebooks",
    "create",
    "new",
    "dummy",
    "notebook",
    "even",
    "hit",
    "new",
    "see",
    "actually",
    "tfod",
    "available",
    "virtual",
    "environment",
    "made",
    "available",
    "actually",
    "leverage",
    "virtual",
    "environment",
    "work",
    "notebooks",
    "cool",
    "right",
    "brings",
    "us",
    "numeral",
    "five",
    "know",
    "say",
    "five",
    "spanish",
    "unfortunately",
    "step",
    "five",
    "right",
    "actually",
    "going",
    "go",
    "ahead",
    "collect",
    "images",
    "sort",
    "done",
    "quite",
    "fair",
    "bit",
    "gone",
    "set",
    "virtual",
    "environment",
    "baseline",
    "setup",
    "installed",
    "next",
    "thing",
    "going",
    "saying",
    "collecting",
    "images",
    "let",
    "go",
    "back",
    "going",
    "collect",
    "label",
    "images",
    "part",
    "two",
    "collecting",
    "labeling",
    "images",
    "remember",
    "cast",
    "mind",
    "back",
    "saying",
    "actually",
    "go",
    "leverage",
    "deep",
    "learning",
    "models",
    "going",
    "passing",
    "data",
    "aka",
    "images",
    "answers",
    "aka",
    "labels",
    "able",
    "train",
    "object",
    "detection",
    "model",
    "collecting",
    "labeling",
    "good",
    "images",
    "really",
    "really",
    "important",
    "case",
    "able",
    "collect",
    "label",
    "images",
    "going",
    "leveraging",
    "jupyter",
    "notebook",
    "got",
    "one",
    "dot",
    "image",
    "collection",
    "going",
    "using",
    "webcam",
    "really",
    "important",
    "thing",
    "note",
    "machine",
    "need",
    "able",
    "access",
    "webcam",
    "order",
    "able",
    "actually",
    "collect",
    "images",
    "using",
    "webcam",
    "comes",
    "labeling",
    "going",
    "using",
    "library",
    "called",
    "label",
    "image",
    "actually",
    "go",
    "back",
    "show",
    "looks",
    "like",
    "label",
    "image",
    "allows",
    "label",
    "different",
    "images",
    "within",
    "image",
    "case",
    "really",
    "really",
    "simple",
    "really",
    "sort",
    "fit",
    "purpose",
    "nothing",
    "crazy",
    "actually",
    "involved",
    "actually",
    "going",
    "using",
    "well",
    "sort",
    "walk",
    "setting",
    "okay",
    "terms",
    "best",
    "practices",
    "couple",
    "things",
    "note",
    "labeling",
    "keep",
    "mind",
    "case",
    "actually",
    "passing",
    "images",
    "want",
    "make",
    "sure",
    "names",
    "pass",
    "actually",
    "labeling",
    "uh",
    "specific",
    "case",
    "want",
    "render",
    "case",
    "name",
    "name",
    "completely",
    "lowercase",
    "livelong",
    "go",
    "actually",
    "train",
    "model",
    "label",
    "pass",
    "needs",
    "lived",
    "long",
    "well",
    "talk",
    "little",
    "bit",
    "later",
    "later",
    "keep",
    "labels",
    "tight",
    "possible",
    "going",
    "case",
    "labeling",
    "live",
    "long",
    "sign",
    "create",
    "big",
    "square",
    "around",
    "right",
    "want",
    "keep",
    "labels",
    "tight",
    "possible",
    "order",
    "make",
    "sure",
    "model",
    "able",
    "detect",
    "specifically",
    "object",
    "right",
    "helps",
    "lot",
    "boosting",
    "performance",
    "include",
    "pictures",
    "objects",
    "different",
    "angles",
    "different",
    "lighting",
    "conditions",
    "tend",
    "actually",
    "like",
    "gesture",
    "recognition",
    "example",
    "let",
    "get",
    "hand",
    "photos",
    "actually",
    "move",
    "hand",
    "around",
    "take",
    "different",
    "angles",
    "different",
    "lighting",
    "positions",
    "model",
    "learns",
    "generalize",
    "better",
    "ideally",
    "want",
    "model",
    "perform",
    "well",
    "training",
    "data",
    "also",
    "real",
    "world",
    "known",
    "model",
    "generalized",
    "right",
    "works",
    "well",
    "general",
    "order",
    "get",
    "model",
    "performs",
    "well",
    "want",
    "give",
    "whole",
    "bunch",
    "different",
    "types",
    "instances",
    "object",
    "trying",
    "detect",
    "say",
    "example",
    "trying",
    "detect",
    "pictures",
    "phone",
    "right",
    "took",
    "photo",
    "phone",
    "let",
    "disable",
    "took",
    "photo",
    "phone",
    "like",
    "real",
    "world",
    "went",
    "flipped",
    "phone",
    "never",
    "seen",
    "images",
    "phone",
    "looks",
    "like",
    "right",
    "different",
    "cameras",
    "really",
    "difficult",
    "detect",
    "right",
    "ideally",
    "want",
    "whole",
    "bunch",
    "different",
    "angles",
    "detecting",
    "fish",
    "example",
    "want",
    "take",
    "pictures",
    "fish",
    "front",
    "side",
    "side",
    "back",
    "top",
    "bottom",
    "model",
    "chance",
    "able",
    "see",
    "different",
    "angles",
    "particular",
    "object",
    "going",
    "really",
    "hard",
    "know",
    "particular",
    "object",
    "another",
    "best",
    "practice",
    "start",
    "10",
    "20",
    "pictures",
    "class",
    "going",
    "start",
    "way",
    "less",
    "going",
    "show",
    "get",
    "sucky",
    "performance",
    "add",
    "additional",
    "pictures",
    "retrain",
    "going",
    "start",
    "less",
    "think",
    "going",
    "five",
    "initially",
    "going",
    "rebuild",
    "redo",
    "model",
    "ideally",
    "get",
    "better",
    "performance",
    "later",
    "also",
    "green",
    "screen",
    "without",
    "green",
    "screen",
    "going",
    "give",
    "chance",
    "better",
    "generalize",
    "got",
    "green",
    "screen",
    "background",
    "right",
    "probably",
    "ca",
    "see",
    "right",
    "got",
    "chroma",
    "key",
    "green",
    "screen",
    "give",
    "images",
    "got",
    "green",
    "screen",
    "available",
    "would",
    "happen",
    "took",
    "green",
    "screen",
    "maybe",
    "might",
    "actually",
    "perform",
    "well",
    "never",
    "seen",
    "images",
    "hand",
    "without",
    "green",
    "screen",
    "behind",
    "ideally",
    "want",
    "give",
    "image",
    "want",
    "give",
    "model",
    "best",
    "chance",
    "possible",
    "actually",
    "go",
    "ahead",
    "detect",
    "objects",
    "okay",
    "note",
    "let",
    "go",
    "ahead",
    "start",
    "collecting",
    "images",
    "labeling",
    "images",
    "order",
    "going",
    "using",
    "one",
    "jupyter",
    "notebooks",
    "cloned",
    "one",
    "say",
    "image",
    "collection",
    "dot",
    "pi",
    "b",
    "step",
    "five",
    "right",
    "remember",
    "started",
    "jupyter",
    "notebook",
    "cancel",
    "see",
    "let",
    "clear",
    "order",
    "going",
    "start",
    "droop",
    "notebook",
    "typing",
    "j",
    "u",
    "p",
    "e",
    "r",
    "notebook",
    "going",
    "start",
    "jupyter",
    "notebook",
    "server",
    "able",
    "use",
    "hit",
    "enter",
    "started",
    "see",
    "inside",
    "got",
    "burn",
    "system",
    "got",
    "virtual",
    "environments",
    "tfod",
    "got",
    "image",
    "collection",
    "notebook",
    "one",
    "dot",
    "image",
    "space",
    "collection",
    "dot",
    "ipm",
    "got",
    "training",
    "detection",
    "notebook",
    "talk",
    "later",
    "error",
    "guide",
    "readme",
    "going",
    "start",
    "image",
    "collection",
    "component",
    "right",
    "select",
    "going",
    "open",
    "notebook",
    "going",
    "step",
    "particular",
    "file",
    "going",
    "going",
    "step",
    "going",
    "hit",
    "hold",
    "shift",
    "enter",
    "keyboard",
    "going",
    "allow",
    "step",
    "one",
    "cells",
    "shift",
    "enter",
    "first",
    "line",
    "going",
    "install",
    "opencv",
    "new",
    "dependency",
    "actually",
    "got",
    "available",
    "key",
    "thing",
    "know",
    "running",
    "want",
    "check",
    "either",
    "top",
    "left",
    "hand",
    "corner",
    "name",
    "kernel",
    "using",
    "virtual",
    "environment",
    "means",
    "currently",
    "working",
    "inside",
    "virtual",
    "environment",
    "leveraging",
    "environment",
    "went",
    "created",
    "stuff",
    "going",
    "installing",
    "local",
    "machine",
    "inside",
    "baseline",
    "virtual",
    "environment",
    "mean",
    "controlled",
    "possible",
    "another",
    "way",
    "check",
    "hit",
    "kernel",
    "change",
    "kernel",
    "make",
    "sure",
    "got",
    "right",
    "one",
    "selected",
    "case",
    "safe",
    "hit",
    "tfod",
    "case",
    "already",
    "inside",
    "go",
    "install",
    "pip",
    "install",
    "opencv",
    "100",
    "sure",
    "actually",
    "installing",
    "inside",
    "virtual",
    "environment",
    "tell",
    "based",
    "insole",
    "command",
    "right",
    "see",
    "actually",
    "installing",
    "inside",
    "tfod",
    "lib",
    "site",
    "packages",
    "library",
    "installing",
    "right",
    "place",
    "really",
    "really",
    "critical",
    "getting",
    "errors",
    "installing",
    "library",
    "got",
    "use",
    "like",
    "picking",
    "sometimes",
    "say",
    "example",
    "install",
    "command",
    "line",
    "virtual",
    "environment",
    "activated",
    "well",
    "going",
    "installing",
    "inside",
    "virtual",
    "environment",
    "use",
    "inside",
    "jupyter",
    "notebook",
    "wo",
    "picking",
    "key",
    "thing",
    "note",
    "make",
    "sure",
    "little",
    "bit",
    "virtual",
    "environment",
    "100",
    "sure",
    "actually",
    "using",
    "going",
    "step",
    "next",
    "cell",
    "first",
    "upsell",
    "let",
    "zoom",
    "exclamation",
    "mark",
    "pip",
    "install",
    "opencv",
    "python",
    "installing",
    "opencv",
    "virtual",
    "environment",
    "opencv",
    "stands",
    "open",
    "computer",
    "vision",
    "really",
    "really",
    "popular",
    "computer",
    "vision",
    "library",
    "really",
    "really",
    "good",
    "working",
    "images",
    "video",
    "case",
    "going",
    "use",
    "access",
    "webcam",
    "collect",
    "bunch",
    "images",
    "next",
    "cell",
    "actually",
    "importing",
    "dependencies",
    "see",
    "importing",
    "opencv",
    "import",
    "cv2",
    "actually",
    "imports",
    "opencv",
    "slightly",
    "different",
    "naming",
    "convention",
    "pretty",
    "normal",
    "importing",
    "uuid",
    "giving",
    "us",
    "unique",
    "identifier",
    "allow",
    "us",
    "name",
    "images",
    "uniquely",
    "overlaps",
    "importing",
    "os",
    "gives",
    "us",
    "operating",
    "system",
    "really",
    "good",
    "working",
    "file",
    "paths",
    "used",
    "os",
    "lot",
    "notebooks",
    "particularly",
    "ensure",
    "file",
    "paths",
    "compliant",
    "linux",
    "mac",
    "windows",
    "sort",
    "step",
    "around",
    "also",
    "importing",
    "time",
    "going",
    "use",
    "actually",
    "collect",
    "images",
    "take",
    "two",
    "second",
    "break",
    "image",
    "collect",
    "give",
    "us",
    "time",
    "move",
    "ad",
    "different",
    "angles",
    "remember",
    "really",
    "really",
    "important",
    "images",
    "different",
    "angles",
    "help",
    "model",
    "generalize",
    "okay",
    "going",
    "define",
    "different",
    "images",
    "collect",
    "case",
    "going",
    "collect",
    "four",
    "different",
    "objects",
    "case",
    "going",
    "object",
    "detection",
    "model",
    "going",
    "able",
    "detect",
    "thumbs",
    "thumbs",
    "thank",
    "sign",
    "language",
    "pose",
    "live",
    "long",
    "going",
    "give",
    "bunch",
    "different",
    "types",
    "images",
    "bunch",
    "different",
    "types",
    "objects",
    "detect",
    "case",
    "actually",
    "got",
    "array",
    "labels",
    "equals",
    "square",
    "brackets",
    "got",
    "bunch",
    "different",
    "strings",
    "wanted",
    "different",
    "objects",
    "detect",
    "different",
    "types",
    "objects",
    "change",
    "labels",
    "case",
    "got",
    "thumbs",
    "thumbs",
    "thank",
    "live",
    "long",
    "could",
    "change",
    "heart",
    "content",
    "make",
    "sure",
    "whatever",
    "label",
    "named",
    "actually",
    "important",
    "important",
    "later",
    "actually",
    "go",
    "label",
    "make",
    "sure",
    "pay",
    "attention",
    "case",
    "um",
    "projects",
    "actually",
    "going",
    "change",
    "rather",
    "thumbs",
    "thumbs",
    "live",
    "long",
    "say",
    "example",
    "little",
    "leds",
    "bent",
    "bent",
    "example",
    "case",
    "pretty",
    "happy",
    "run",
    "cell",
    "actually",
    "take",
    "look",
    "labels",
    "list",
    "actually",
    "type",
    "type",
    "see",
    "standard",
    "list",
    "nothing",
    "super",
    "fancy",
    "going",
    "place",
    "hold",
    "different",
    "labels",
    "case",
    "also",
    "got",
    "line",
    "number",
    "images",
    "represents",
    "many",
    "images",
    "going",
    "collect",
    "per",
    "class",
    "going",
    "collect",
    "five",
    "images",
    "thumbs",
    "five",
    "images",
    "thumbs",
    "five",
    "images",
    "thank",
    "five",
    "images",
    "live",
    "long",
    "remember",
    "said",
    "best",
    "practices",
    "ideally",
    "want",
    "10",
    "20",
    "images",
    "getting",
    "started",
    "right",
    "talk",
    "performance",
    "tuning",
    "well",
    "want",
    "scale",
    "produce",
    "model",
    "way",
    "way",
    "better",
    "want",
    "use",
    "way",
    "images",
    "prototype",
    "get",
    "running",
    "10",
    "20",
    "images",
    "ideal",
    "five",
    "purpose",
    "gon",
    "na",
    "performance",
    "tune",
    "later",
    "okay",
    "next",
    "thing",
    "going",
    "setting",
    "folders",
    "right",
    "actually",
    "anything",
    "created",
    "inside",
    "folder",
    "directory",
    "right",
    "let",
    "add",
    "navigation",
    "pane",
    "go",
    "tensorflow",
    "object",
    "detection",
    "repository",
    "folders",
    "actually",
    "going",
    "set",
    "little",
    "folder",
    "directory",
    "actually",
    "going",
    "serviced",
    "really",
    "really",
    "well",
    "comes",
    "training",
    "stuff",
    "particular",
    "line",
    "setting",
    "images",
    "path",
    "going",
    "create",
    "new",
    "path",
    "going",
    "called",
    "tensorflow",
    "inside",
    "create",
    "folder",
    "called",
    "workspace",
    "folder",
    "inside",
    "called",
    "images",
    "folder",
    "inside",
    "called",
    "collected",
    "images",
    "probably",
    "make",
    "sense",
    "right",
    "let",
    "show",
    "hit",
    "shift",
    "enter",
    "going",
    "set",
    "images",
    "path",
    "right",
    "windows",
    "going",
    "get",
    "double",
    "backslash",
    "print",
    "rather",
    "see",
    "actually",
    "navigating",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "wanted",
    "different",
    "file",
    "path",
    "could",
    "change",
    "bear",
    "mind",
    "rest",
    "tutorial",
    "going",
    "follow",
    "file",
    "path",
    "going",
    "create",
    "file",
    "paths",
    "first",
    "line",
    "checking",
    "whether",
    "path",
    "exists",
    "checking",
    "type",
    "operating",
    "system",
    "used",
    "case",
    "os",
    "dot",
    "name",
    "actually",
    "checks",
    "type",
    "operating",
    "system",
    "used",
    "actually",
    "type",
    "earth",
    "step",
    "name",
    "windows",
    "machine",
    "going",
    "read",
    "nt",
    "see",
    "later",
    "colab",
    "instance",
    "linux",
    "machine",
    "actually",
    "going",
    "say",
    "posix",
    "gives",
    "ability",
    "work",
    "run",
    "operating",
    "systems",
    "case",
    "nt",
    "going",
    "windows",
    "posix",
    "going",
    "linux",
    "good",
    "going",
    "run",
    "cell",
    "actually",
    "going",
    "create",
    "folder",
    "directory",
    "folder",
    "path",
    "hit",
    "shift",
    "enter",
    "see",
    "run",
    "successfully",
    "go",
    "back",
    "see",
    "let",
    "make",
    "list",
    "easy",
    "see",
    "gone",
    "created",
    "new",
    "folder",
    "called",
    "tensorflow",
    "available",
    "step",
    "actually",
    "see",
    "actually",
    "creating",
    "whole",
    "file",
    "path",
    "tensorflow",
    "workspace",
    "zoom",
    "default",
    "going",
    "create",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "also",
    "time",
    "creates",
    "new",
    "folder",
    "per",
    "class",
    "create",
    "new",
    "one",
    "thumbs",
    "new",
    "one",
    "thumbs",
    "new",
    "one",
    "thank",
    "new",
    "one",
    "live",
    "long",
    "change",
    "add",
    "different",
    "objects",
    "add",
    "different",
    "labels",
    "going",
    "create",
    "folders",
    "well",
    "run",
    "particular",
    "cell",
    "folders",
    "created",
    "make",
    "sure",
    "got",
    "labels",
    "defined",
    "correctly",
    "make",
    "sure",
    "run",
    "cell",
    "create",
    "folders",
    "next",
    "thing",
    "actually",
    "going",
    "actually",
    "capture",
    "images",
    "cell",
    "actually",
    "going",
    "us",
    "going",
    "loop",
    "labels",
    "going",
    "connect",
    "webcam",
    "line",
    "really",
    "really",
    "important",
    "right",
    "line",
    "connects",
    "webcam",
    "capture",
    "device",
    "right",
    "using",
    "webcam",
    "right",
    "later",
    "go",
    "object",
    "detection",
    "using",
    "microscope",
    "actually",
    "going",
    "need",
    "change",
    "device",
    "number",
    "able",
    "detect",
    "particular",
    "microscope",
    "might",
    "happen",
    "number",
    "see",
    "right",
    "got",
    "0",
    "working",
    "different",
    "machine",
    "undoubtedly",
    "number",
    "video",
    "capture",
    "device",
    "going",
    "theory",
    "right",
    "mac",
    "mac",
    "machine",
    "number",
    "need",
    "pass",
    "order",
    "able",
    "connect",
    "webcam",
    "number",
    "two",
    "get",
    "errors",
    "undoubtedly",
    "might",
    "happen",
    "actually",
    "go",
    "back",
    "error",
    "guide",
    "get",
    "error",
    "looks",
    "like",
    "value",
    "error",
    "images",
    "must",
    "three",
    "four",
    "dimensions",
    "often",
    "webcam",
    "got",
    "webcam",
    "number",
    "correct",
    "see",
    "grey",
    "box",
    "pop",
    "getting",
    "images",
    "back",
    "could",
    "well",
    "sometimes",
    "might",
    "need",
    "either",
    "change",
    "number",
    "restart",
    "notebook",
    "able",
    "connect",
    "specific",
    "webcam",
    "case",
    "believe",
    "video",
    "capture",
    "device",
    "one",
    "correct",
    "good",
    "go",
    "going",
    "happen",
    "going",
    "first",
    "print",
    "label",
    "collecting",
    "images",
    "going",
    "print",
    "collecting",
    "images",
    "label",
    "looping",
    "remember",
    "going",
    "loop",
    "labels",
    "going",
    "give",
    "us",
    "break",
    "five",
    "seconds",
    "enabled",
    "us",
    "get",
    "position",
    "gon",
    "na",
    "sleep",
    "five",
    "seconds",
    "sleep",
    "library",
    "coming",
    "handy",
    "going",
    "loop",
    "number",
    "images",
    "want",
    "collect",
    "remember",
    "going",
    "collect",
    "five",
    "images",
    "case",
    "change",
    "number",
    "5",
    "10",
    "15",
    "whatever",
    "going",
    "change",
    "number",
    "images",
    "actually",
    "collect",
    "print",
    "collecting",
    "image",
    "specific",
    "label",
    "capture",
    "frame",
    "using",
    "webcam",
    "going",
    "really",
    "important",
    "going",
    "create",
    "new",
    "image",
    "going",
    "place",
    "inside",
    "particular",
    "folder",
    "path",
    "going",
    "place",
    "inside",
    "images",
    "path",
    "let",
    "actually",
    "print",
    "see",
    "ah",
    "going",
    "work",
    "image",
    "going",
    "put",
    "inside",
    "change",
    "going",
    "paste",
    "inside",
    "images",
    "path",
    "label",
    "case",
    "say",
    "example",
    "thumbs",
    "would",
    "put",
    "inside",
    "thumbs",
    "name",
    "actual",
    "file",
    "label",
    "dot",
    "random",
    "number",
    "going",
    "create",
    "unique",
    "identifier",
    "dot",
    "jpg",
    "files",
    "jpeg",
    "named",
    "specific",
    "label",
    "plus",
    "unique",
    "identifier",
    "inside",
    "respective",
    "label",
    "folders",
    "going",
    "need",
    "move",
    "around",
    "little",
    "bit",
    "later",
    "fine",
    "going",
    "use",
    "command",
    "able",
    "write",
    "file",
    "actually",
    "show",
    "screen",
    "take",
    "two",
    "second",
    "break",
    "point",
    "need",
    "escape",
    "hit",
    "q",
    "key",
    "keyboard",
    "able",
    "get",
    "close",
    "everything",
    "zoom",
    "let",
    "go",
    "ahead",
    "run",
    "zoomed",
    "zoomed",
    "right",
    "cool",
    "run",
    "ideally",
    "see",
    "little",
    "bottom",
    "screen",
    "indicates",
    "connected",
    "opencv",
    "actually",
    "rendering",
    "got",
    "remember",
    "got",
    "five",
    "seconds",
    "get",
    "position",
    "case",
    "part",
    "going",
    "go",
    "thumbs",
    "thumbs",
    "thank",
    "live",
    "long",
    "going",
    "make",
    "sure",
    "might",
    "see",
    "webcam",
    "position",
    "might",
    "need",
    "fix",
    "looking",
    "mine",
    "okay",
    "let",
    "give",
    "crack",
    "right",
    "gon",
    "na",
    "run",
    "cell",
    "shift",
    "enter",
    "see",
    "little",
    "pop",
    "bottom",
    "looks",
    "like",
    "okay",
    "see",
    "popped",
    "first",
    "position",
    "going",
    "thumbs",
    "dark",
    "let",
    "get",
    "back",
    "center",
    "best",
    "images",
    "thumbs",
    "try",
    "anyway",
    "see",
    "looks",
    "like",
    "thumbs",
    "next",
    "one",
    "thank",
    "believe",
    "let",
    "switch",
    "position",
    "get",
    "little",
    "bit",
    "break",
    "images",
    "got",
    "time",
    "move",
    "around",
    "right",
    "want",
    "increase",
    "break",
    "change",
    "number",
    "trying",
    "get",
    "slightly",
    "different",
    "positions",
    "time",
    "last",
    "one",
    "live",
    "long",
    "right",
    "looks",
    "good",
    "remember",
    "right",
    "got",
    "green",
    "screen",
    "images",
    "well",
    "might",
    "choose",
    "drop",
    "green",
    "screen",
    "create",
    "new",
    "detections",
    "later",
    "get",
    "really",
    "really",
    "poor",
    "performance",
    "test",
    "meant",
    "live",
    "example",
    "see",
    "challenges",
    "might",
    "face",
    "solve",
    "alrighty",
    "cool",
    "looks",
    "like",
    "got",
    "bunch",
    "images",
    "go",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "see",
    "got",
    "bunch",
    "images",
    "live",
    "long",
    "positions",
    "looking",
    "fine",
    "way",
    "sort",
    "judging",
    "thing",
    "little",
    "bit",
    "concerned",
    "images",
    "right",
    "format",
    "let",
    "enable",
    "preview",
    "um",
    "preview",
    "pen",
    "right",
    "sort",
    "position",
    "right",
    "good",
    "practice",
    "comes",
    "building",
    "generalized",
    "model",
    "might",
    "choose",
    "later",
    "move",
    "different",
    "positions",
    "ideally",
    "drop",
    "green",
    "screen",
    "add",
    "images",
    "train",
    "case",
    "baseline",
    "right",
    "prototyping",
    "key",
    "thing",
    "data",
    "science",
    "project",
    "preaches",
    "time",
    "prototype",
    "fast",
    "possible",
    "going",
    "work",
    "whether",
    "trying",
    "feasible",
    "whether",
    "possible",
    "say",
    "example",
    "trying",
    "detect",
    "know",
    "say",
    "example",
    "trying",
    "detect",
    "bent",
    "uh",
    "leds",
    "webcam",
    "well",
    "gon",
    "na",
    "need",
    "really",
    "really",
    "hyper",
    "accurate",
    "model",
    "one",
    "able",
    "see",
    "really",
    "really",
    "fine",
    "grain",
    "detail",
    "able",
    "prototype",
    "really",
    "really",
    "quickly",
    "mobile",
    "net",
    "model",
    "webcam",
    "might",
    "see",
    "get",
    "absolutely",
    "sucky",
    "performance",
    "fast",
    "least",
    "get",
    "end",
    "output",
    "realize",
    "hey",
    "maybe",
    "need",
    "try",
    "different",
    "technique",
    "maybe",
    "need",
    "different",
    "sensor",
    "aka",
    "microscope",
    "quickly",
    "prototyping",
    "quickly",
    "able",
    "see",
    "establish",
    "baseline",
    "go",
    "try",
    "improve",
    "performance",
    "case",
    "going",
    "give",
    "crack",
    "see",
    "looks",
    "like",
    "got",
    "live",
    "long",
    "images",
    "let",
    "check",
    "thank",
    "ones",
    "look",
    "little",
    "bit",
    "better",
    "obstructed",
    "microphone",
    "little",
    "bit",
    "see",
    "performs",
    "looking",
    "good",
    "thumbs",
    "looks",
    "alright",
    "see",
    "right",
    "giving",
    "model",
    "better",
    "chance",
    "generalize",
    "thumb",
    "position",
    "thumb",
    "position",
    "looking",
    "better",
    "different",
    "ones",
    "reasonably",
    "close",
    "together",
    "another",
    "idea",
    "right",
    "different",
    "hands",
    "case",
    "done",
    "hand",
    "could",
    "chosen",
    "hand",
    "right",
    "gon",
    "na",
    "give",
    "better",
    "chance",
    "generalize",
    "way",
    "thumbs",
    "image",
    "crap",
    "actually",
    "gon",
    "na",
    "get",
    "rid",
    "another",
    "thing",
    "know",
    "right",
    "sometimes",
    "might",
    "need",
    "delete",
    "images",
    "case",
    "one",
    "really",
    "dark",
    "even",
    "contain",
    "image",
    "thumbs",
    "object",
    "included",
    "within",
    "particular",
    "image",
    "going",
    "used",
    "training",
    "part",
    "tensorflow",
    "object",
    "detection",
    "api",
    "actually",
    "delete",
    "image",
    "delete",
    "one",
    "kind",
    "sucks",
    "got",
    "feeling",
    "train",
    "model",
    "thumbs",
    "detection",
    "going",
    "good",
    "let",
    "give",
    "crack",
    "see",
    "looks",
    "like",
    "always",
    "performance",
    "tune",
    "later",
    "keep",
    "mind",
    "thumb",
    "really",
    "really",
    "close",
    "edge",
    "one",
    "half",
    "cut",
    "one",
    "front",
    "face",
    "good",
    "run",
    "example",
    "images",
    "wanted",
    "could",
    "actually",
    "add",
    "images",
    "right",
    "rather",
    "collecting",
    "images",
    "way",
    "labels",
    "delete",
    "um",
    "add",
    "new",
    "array",
    "got",
    "feeling",
    "thumb",
    "images",
    "really",
    "good",
    "call",
    "thumbs",
    "think",
    "thumbs",
    "take",
    "look",
    "labels",
    "able",
    "collect",
    "images",
    "thumbs",
    "let",
    "go",
    "ahead",
    "gone",
    "added",
    "new",
    "variable",
    "wanted",
    "go",
    "back",
    "normal",
    "labels",
    "could",
    "well",
    "pretty",
    "common",
    "might",
    "need",
    "add",
    "capture",
    "additional",
    "images",
    "capture",
    "less",
    "images",
    "case",
    "going",
    "capture",
    "couple",
    "images",
    "thumbs",
    "got",
    "three",
    "three",
    "kind",
    "suck",
    "right",
    "like",
    "like",
    "half",
    "detection",
    "one",
    "barely",
    "even",
    "counts",
    "see",
    "thumb",
    "ideally",
    "want",
    "get",
    "number",
    "good",
    "images",
    "let",
    "going",
    "going",
    "run",
    "cell",
    "see",
    "go",
    "run",
    "ideally",
    "going",
    "trying",
    "collect",
    "thumbs",
    "see",
    "little",
    "right",
    "got",
    "frame",
    "looking",
    "better",
    "right",
    "looks",
    "little",
    "bit",
    "better",
    "go",
    "back",
    "folder",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "thumbs",
    "got",
    "way",
    "right",
    "take",
    "look",
    "latest",
    "ones",
    "got",
    "bunch",
    "different",
    "eyes",
    "closed",
    "great",
    "um",
    "got",
    "bunch",
    "different",
    "images",
    "giving",
    "better",
    "chance",
    "generalize",
    "got",
    "images",
    "hands",
    "well",
    "right",
    "right",
    "let",
    "see",
    "go",
    "right",
    "gone",
    "installing",
    "importing",
    "dependencies",
    "image",
    "collection",
    "defining",
    "labels",
    "want",
    "collect",
    "well",
    "collect",
    "additional",
    "images",
    "particular",
    "class",
    "also",
    "gone",
    "set",
    "folders",
    "captured",
    "images",
    "keep",
    "mind",
    "bit",
    "might",
    "need",
    "change",
    "number",
    "depending",
    "webcam",
    "capture",
    "device",
    "number",
    "fine",
    "change",
    "change",
    "means",
    "make",
    "sure",
    "works",
    "sometimes",
    "try",
    "zero",
    "one",
    "two",
    "three",
    "um",
    "particular",
    "actually",
    "devices",
    "virtual",
    "video",
    "capture",
    "devices",
    "need",
    "take",
    "account",
    "well",
    "might",
    "need",
    "try",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "make",
    "sure",
    "try",
    "bunch",
    "ideally",
    "see",
    "appear",
    "exactly",
    "showed",
    "going",
    "get",
    "labeling",
    "saying",
    "going",
    "using",
    "label",
    "image",
    "particular",
    "package",
    "want",
    "take",
    "look",
    "package",
    "go",
    "forward",
    "slash",
    "know",
    "pronounce",
    "zoo",
    "talon",
    "sorry",
    "butchered",
    "name",
    "massive",
    "respect",
    "awesome",
    "package",
    "right",
    "gon",
    "na",
    "using",
    "label",
    "image",
    "able",
    "go",
    "label",
    "images",
    "talk",
    "labeling",
    "really",
    "drawing",
    "boxes",
    "around",
    "stuff",
    "trying",
    "detect",
    "also",
    "another",
    "thing",
    "keep",
    "mind",
    "label",
    "multiple",
    "objects",
    "one",
    "image",
    "well",
    "another",
    "thing",
    "keep",
    "hand",
    "bottom",
    "whole",
    "bunch",
    "installation",
    "steps",
    "actually",
    "go",
    "actually",
    "done",
    "actually",
    "included",
    "within",
    "jupyter",
    "notebook",
    "rather",
    "step",
    "install",
    "stuff",
    "actually",
    "install",
    "using",
    "notebook",
    "first",
    "going",
    "install",
    "pi",
    "qt5",
    "lxml",
    "run",
    "remember",
    "inside",
    "virtual",
    "environment",
    "actually",
    "take",
    "look",
    "got",
    "hit",
    "let",
    "actually",
    "run",
    "cell",
    "first",
    "cool",
    "installed",
    "run",
    "pip",
    "list",
    "see",
    "whole",
    "bunch",
    "stuff",
    "installed",
    "look",
    "two",
    "libraries",
    "dependencies",
    "wanted",
    "install",
    "pi",
    "qt5",
    "lxml",
    "lxml",
    "pi",
    "qt5",
    "well",
    "dependencies",
    "good",
    "right",
    "next",
    "thing",
    "want",
    "create",
    "little",
    "home",
    "label",
    "image",
    "file",
    "label",
    "image",
    "package",
    "saved",
    "actually",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "tensorflow",
    "label",
    "image",
    "inside",
    "tensorflow",
    "folder",
    "new",
    "folder",
    "called",
    "label",
    "image",
    "effectively",
    "going",
    "let",
    "keep",
    "open",
    "know",
    "keep",
    "closing",
    "um",
    "tfod",
    "course",
    "tensorflow",
    "going",
    "create",
    "new",
    "directory",
    "called",
    "label",
    "image",
    "going",
    "gets",
    "stored",
    "run",
    "cell",
    "let",
    "minimize",
    "go",
    "ahead",
    "create",
    "effectively",
    "going",
    "first",
    "creating",
    "new",
    "directory",
    "using",
    "make",
    "dr",
    "make",
    "deer",
    "command",
    "first",
    "actually",
    "going",
    "check",
    "whether",
    "file",
    "path",
    "exists",
    "already",
    "exist",
    "done",
    "installed",
    "going",
    "anything",
    "get",
    "errors",
    "might",
    "want",
    "actually",
    "delete",
    "label",
    "image",
    "folder",
    "run",
    "cell",
    "case",
    "run",
    "run",
    "create",
    "new",
    "directory",
    "called",
    "label",
    "image",
    "see",
    "actually",
    "going",
    "go",
    "ahead",
    "clone",
    "thing",
    "actually",
    "showing",
    "github",
    "repository",
    "going",
    "clone",
    "whenever",
    "running",
    "commands",
    "jupyter",
    "notebook",
    "tends",
    "little",
    "bit",
    "slow",
    "actually",
    "see",
    "progress",
    "right",
    "running",
    "got",
    "little",
    "star",
    "see",
    "running",
    "going",
    "see",
    "running",
    "windows",
    "machine",
    "clonings",
    "open",
    "look",
    "like",
    "anything",
    "yet",
    "let",
    "wait",
    "clone",
    "right",
    "label",
    "image",
    "package",
    "cloned",
    "actually",
    "open",
    "see",
    "got",
    "cloned",
    "folder",
    "got",
    "tfod",
    "tensorflow",
    "label",
    "image",
    "inside",
    "got",
    "effectively",
    "stuff",
    "cloned",
    "local",
    "repository",
    "next",
    "thing",
    "need",
    "actually",
    "go",
    "ahead",
    "install",
    "label",
    "image",
    "believe",
    "might",
    "typo",
    "let",
    "copy",
    "okay",
    "going",
    "running",
    "windows",
    "machine",
    "going",
    "executing",
    "path",
    "going",
    "cd",
    "label",
    "image",
    "folder",
    "actually",
    "show",
    "label",
    "image",
    "going",
    "going",
    "folder",
    "tensorflow",
    "label",
    "image",
    "going",
    "running",
    "command",
    "pi",
    "rcc",
    "five",
    "dash",
    "oh",
    "libs",
    "forward",
    "slash",
    "resources",
    "dot",
    "pi",
    "resources",
    "dot",
    "qrc",
    "effectively",
    "installation",
    "steps",
    "recommended",
    "main",
    "package",
    "actually",
    "go",
    "windows",
    "going",
    "pi",
    "rcc",
    "five",
    "dash",
    "zero",
    "libs",
    "forward",
    "slash",
    "resources",
    "dot",
    "pi",
    "resources",
    "dot",
    "qrc",
    "open",
    "effectively",
    "running",
    "installation",
    "steps",
    "would",
    "get",
    "actual",
    "repository",
    "go",
    "ahead",
    "run",
    "ideally",
    "run",
    "successfully",
    "look",
    "like",
    "got",
    "errors",
    "go",
    "ahead",
    "run",
    "command",
    "actually",
    "happen",
    "actually",
    "open",
    "label",
    "image",
    "package",
    "actual",
    "application",
    "actually",
    "open",
    "actually",
    "hit",
    "shift",
    "enter",
    "see",
    "label",
    "image",
    "opening",
    "gone",
    "installed",
    "scratch",
    "actually",
    "opened",
    "label",
    "image",
    "package",
    "fun",
    "bit",
    "comes",
    "actually",
    "going",
    "ahead",
    "labeling",
    "images",
    "going",
    "going",
    "left",
    "hand",
    "side",
    "see",
    "button",
    "called",
    "opendr",
    "going",
    "wave",
    "cursor",
    "around",
    "see",
    "going",
    "hit",
    "open",
    "directory",
    "open",
    "dr",
    "going",
    "navigate",
    "folder",
    "going",
    "go",
    "youtube",
    "tens",
    "flow",
    "object",
    "detection",
    "tensorflow",
    "object",
    "detection",
    "course",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "remember",
    "got",
    "repository",
    "folder",
    "one",
    "different",
    "classes",
    "case",
    "going",
    "step",
    "live",
    "long",
    "first",
    "hit",
    "select",
    "folder",
    "sometimes",
    "wo",
    "actually",
    "open",
    "folder",
    "ask",
    "select",
    "folder",
    "need",
    "hit",
    "cancel",
    "b",
    "long",
    "got",
    "files",
    "means",
    "able",
    "label",
    "going",
    "start",
    "labeling",
    "first",
    "image",
    "double",
    "click",
    "onto",
    "opens",
    "image",
    "couple",
    "quick",
    "tips",
    "order",
    "label",
    "image",
    "shortcut",
    "right",
    "need",
    "hit",
    "w",
    "going",
    "open",
    "little",
    "labeling",
    "thing",
    "see",
    "got",
    "cursor",
    "label",
    "image",
    "want",
    "select",
    "first",
    "point",
    "want",
    "label",
    "drag",
    "create",
    "object",
    "tend",
    "find",
    "tend",
    "find",
    "outermost",
    "point",
    "case",
    "going",
    "right",
    "top",
    "finger",
    "right",
    "edge",
    "hand",
    "drag",
    "encapsulate",
    "components",
    "hand",
    "want",
    "see",
    "going",
    "edge",
    "pointer",
    "finger",
    "edge",
    "wrist",
    "going",
    "tight",
    "possible",
    "detection",
    "label",
    "remember",
    "kept",
    "harping",
    "make",
    "sure",
    "label",
    "detections",
    "tight",
    "meant",
    "tight",
    "make",
    "sure",
    "pay",
    "attention",
    "actually",
    "name",
    "labels",
    "go",
    "train",
    "going",
    "need",
    "make",
    "sure",
    "names",
    "labels",
    "annotations",
    "right",
    "match",
    "actual",
    "labels",
    "pass",
    "model",
    "training",
    "case",
    "going",
    "label",
    "live",
    "long",
    "going",
    "capital",
    "l",
    "capital",
    "capital",
    "alpha",
    "live",
    "capital",
    "l",
    "long",
    "go",
    "set",
    "labels",
    "later",
    "training",
    "step",
    "going",
    "make",
    "sure",
    "got",
    "exact",
    "thing",
    "going",
    "get",
    "error",
    "right",
    "error",
    "going",
    "look",
    "like",
    "uh",
    "case",
    "see",
    "running",
    "generate",
    "tf",
    "record",
    "script",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "going",
    "get",
    "key",
    "error",
    "actually",
    "going",
    "show",
    "looks",
    "like",
    "go",
    "case",
    "keep",
    "mind",
    "labeled",
    "capital",
    "live",
    "capital",
    "long",
    "go",
    "screw",
    "go",
    "train",
    "fine",
    "fix",
    "hard",
    "going",
    "get",
    "error",
    "case",
    "pay",
    "lot",
    "attention",
    "capitalization",
    "case",
    "labels",
    "going",
    "label",
    "live",
    "long",
    "hit",
    "ok",
    "hit",
    "ctrl",
    "save",
    "save",
    "first",
    "image",
    "labeled",
    "going",
    "go",
    "rest",
    "select",
    "next",
    "image",
    "going",
    "keep",
    "tight",
    "say",
    "screw",
    "right",
    "still",
    "go",
    "drag",
    "back",
    "tighten",
    "detection",
    "make",
    "bit",
    "tighter",
    "see",
    "little",
    "bit",
    "image",
    "actually",
    "captured",
    "zoom",
    "see",
    "capturing",
    "might",
    "pull",
    "maybe",
    "little",
    "bit",
    "pedantic",
    "ocd",
    "kicking",
    "best",
    "practice",
    "right",
    "want",
    "make",
    "sure",
    "get",
    "accurate",
    "possible",
    "going",
    "save",
    "annotation",
    "2",
    "done",
    "going",
    "go",
    "next",
    "image",
    "thing",
    "going",
    "images",
    "beauty",
    "right",
    "right",
    "whatever",
    "type",
    "object",
    "wanted",
    "save",
    "say",
    "example",
    "wanted",
    "know",
    "um",
    "saw",
    "really",
    "really",
    "cool",
    "video",
    "day",
    "someone",
    "used",
    "classify",
    "way",
    "waves",
    "breaking",
    "thought",
    "pretty",
    "awesome",
    "um",
    "could",
    "whole",
    "range",
    "different",
    "applications",
    "obviously",
    "sign",
    "language",
    "great",
    "use",
    "case",
    "super",
    "practical",
    "super",
    "altruistic",
    "like",
    "whole",
    "heap",
    "capabilities",
    "like",
    "people",
    "need",
    "technology",
    "got",
    "capability",
    "watching",
    "course",
    "means",
    "find",
    "something",
    "interesting",
    "give",
    "crack",
    "obviously",
    "going",
    "give",
    "um",
    "examples",
    "actually",
    "go",
    "projects",
    "get",
    "come",
    "good",
    "idea",
    "exact",
    "process",
    "going",
    "define",
    "labels",
    "collect",
    "images",
    "label",
    "get",
    "training",
    "later",
    "sort",
    "get",
    "idea",
    "going",
    "okay",
    "going",
    "label",
    "images",
    "one",
    "thing",
    "want",
    "check",
    "go",
    "images",
    "folder",
    "case",
    "done",
    "live",
    "long",
    "right",
    "annotations",
    "available",
    "right",
    "case",
    "looking",
    "image",
    "matching",
    "annotation",
    "going",
    "exact",
    "name",
    "image",
    "file",
    "rather",
    "extension",
    "going",
    "xml",
    "actually",
    "take",
    "look",
    "let",
    "go",
    "details",
    "case",
    "got",
    "image",
    "let",
    "need",
    "date",
    "need",
    "date",
    "got",
    "image",
    "named",
    "whatever",
    "dot",
    "jpeg",
    "file",
    "got",
    "annotation",
    "matches",
    "image",
    "open",
    "annotation",
    "let",
    "take",
    "look",
    "actually",
    "included",
    "inside",
    "annotation",
    "got",
    "obviously",
    "fact",
    "xml",
    "file",
    "starts",
    "annotation",
    "tells",
    "folder",
    "file",
    "name",
    "path",
    "file",
    "name",
    "matter",
    "much",
    "actually",
    "comes",
    "training",
    "going",
    "move",
    "around",
    "source",
    "database",
    "matter",
    "size",
    "quite",
    "important",
    "defines",
    "big",
    "images",
    "case",
    "got",
    "width",
    "height",
    "let",
    "make",
    "bit",
    "bigger",
    "see",
    "bit",
    "better",
    "got",
    "width",
    "height",
    "depth",
    "case",
    "color",
    "image",
    "going",
    "r",
    "j",
    "b",
    "whether",
    "segmented",
    "segmenting",
    "moment",
    "bit",
    "really",
    "important",
    "might",
    "multiple",
    "objects",
    "image",
    "case",
    "would",
    "repeated",
    "multiple",
    "times",
    "got",
    "name",
    "object",
    "got",
    "capital",
    "live",
    "capital",
    "long",
    "screw",
    "wanted",
    "names",
    "different",
    "could",
    "come",
    "change",
    "names",
    "well",
    "got",
    "pose",
    "using",
    "truncated",
    "difficult",
    "using",
    "got",
    "bounding",
    "box",
    "got",
    "different",
    "coordinates",
    "got",
    "minimum",
    "x",
    "value",
    "minimum",
    "value",
    "effectively",
    "giving",
    "two",
    "points",
    "giving",
    "point",
    "point",
    "square",
    "represents",
    "box",
    "going",
    "bounding",
    "box",
    "really",
    "comes",
    "comes",
    "labeling",
    "effectively",
    "creating",
    "xml",
    "files",
    "okay",
    "right",
    "done",
    "one",
    "class",
    "wanted",
    "detect",
    "uh",
    "live",
    "long",
    "perfectly",
    "fine",
    "go",
    "ahead",
    "jump",
    "training",
    "one",
    "object",
    "could",
    "case",
    "keep",
    "mind",
    "live",
    "long",
    "thank",
    "go",
    "going",
    "hit",
    "step",
    "folder",
    "hit",
    "select",
    "folder",
    "sometimes",
    "got",
    "hit",
    "cancel",
    "open",
    "image",
    "going",
    "thing",
    "little",
    "concerned",
    "got",
    "mic",
    "fine",
    "let",
    "give",
    "crack",
    "case",
    "going",
    "label",
    "knuckles",
    "wrist",
    "one",
    "going",
    "called",
    "thank",
    "oh",
    "almost",
    "typo",
    "dangerous",
    "capital",
    "capital",
    "hit",
    "okay",
    "control",
    "save",
    "go",
    "next",
    "one",
    "different",
    "angle",
    "ideally",
    "give",
    "us",
    "better",
    "chance",
    "generalizing",
    "going",
    "save",
    "save",
    "go",
    "next",
    "image",
    "mic",
    "see",
    "going",
    "keep",
    "going",
    "going",
    "next",
    "one",
    "save",
    "next",
    "one",
    "looks",
    "like",
    "got",
    "two",
    "angles",
    "sort",
    "one",
    "idea",
    "screwed",
    "detection",
    "going",
    "hit",
    "ok",
    "going",
    "tighten",
    "save",
    "cool",
    "double",
    "check",
    "clicking",
    "case",
    "see",
    "detections",
    "saved",
    "good",
    "forget",
    "save",
    "happen",
    "actually",
    "show",
    "next",
    "one",
    "case",
    "fine",
    "go",
    "check",
    "images",
    "thank",
    "remember",
    "got",
    "images",
    "got",
    "associated",
    "annotation",
    "files",
    "ideally",
    "round",
    "number",
    "even",
    "got",
    "10",
    "image",
    "five",
    "images",
    "got",
    "five",
    "annotations",
    "good",
    "cool",
    "alrighty",
    "going",
    "open",
    "next",
    "class",
    "want",
    "show",
    "happens",
    "forget",
    "save",
    "let",
    "thumbs",
    "double",
    "click",
    "right",
    "going",
    "label",
    "thumbs",
    "hit",
    "ok",
    "go",
    "double",
    "click",
    "next",
    "one",
    "come",
    "back",
    "image",
    "annotation",
    "going",
    "saved",
    "got",
    "keep",
    "mind",
    "need",
    "save",
    "right",
    "wo",
    "actually",
    "file",
    "created",
    "going",
    "thumbs",
    "change",
    "label",
    "name",
    "going",
    "thumbs",
    "save",
    "step",
    "next",
    "image",
    "come",
    "back",
    "going",
    "annotation",
    "saved",
    "next",
    "one",
    "sometimes",
    "might",
    "notice",
    "forget",
    "one",
    "ton",
    "um",
    "might",
    "um",
    "might",
    "sometimes",
    "happens",
    "forget",
    "save",
    "lot",
    "people",
    "asked",
    "would",
    "scale",
    "say",
    "got",
    "thousands",
    "images",
    "normally",
    "two",
    "ways",
    "recommend",
    "either",
    "outsource",
    "mechanical",
    "turkey",
    "one",
    "way",
    "go",
    "go",
    "like",
    "upwork",
    "freelancer",
    "another",
    "way",
    "way",
    "newer",
    "tools",
    "days",
    "actually",
    "use",
    "technique",
    "called",
    "auto",
    "labeling",
    "actually",
    "train",
    "lightweight",
    "object",
    "detection",
    "model",
    "able",
    "detect",
    "different",
    "objects",
    "within",
    "images",
    "pretty",
    "cool",
    "right",
    "ask",
    "label",
    "say",
    "example",
    "10",
    "20",
    "15",
    "images",
    "run",
    "auto",
    "labeling",
    "go",
    "auto",
    "label",
    "images",
    "based",
    "lightweight",
    "model",
    "already",
    "trained",
    "pretty",
    "sophisticated",
    "like",
    "see",
    "video",
    "means",
    "let",
    "know",
    "see",
    "spin",
    "something",
    "case",
    "going",
    "use",
    "label",
    "image",
    "see",
    "images",
    "looking",
    "fine",
    "issues",
    "okay",
    "let",
    "next",
    "directory",
    "done",
    "thumbs",
    "want",
    "thumbs",
    "one",
    "remember",
    "lot",
    "images",
    "went",
    "collected",
    "thumbs",
    "let",
    "ca",
    "remember",
    "labeled",
    "correctly",
    "one",
    "label",
    "thumbs",
    "right",
    "open",
    "annotation",
    "yep",
    "thumbs",
    "okay",
    "good",
    "thumbs",
    "capitals",
    "perfect",
    "right",
    "going",
    "thumbs",
    "let",
    "label",
    "thing",
    "hit",
    "w",
    "get",
    "shortcut",
    "open",
    "going",
    "thumbs",
    "save",
    "next",
    "image",
    "partial",
    "fine",
    "let",
    "anyway",
    "going",
    "keep",
    "going",
    "get",
    "little",
    "tedious",
    "go",
    "tiny",
    "images",
    "uh",
    "sort",
    "walk",
    "normally",
    "grab",
    "coffee",
    "grind",
    "label",
    "objects",
    "prototype",
    "start",
    "labeling",
    "uh",
    "thousands",
    "images",
    "might",
    "right",
    "technique",
    "always",
    "recommend",
    "1025",
    "really",
    "want",
    "keep",
    "super",
    "fast",
    "prototype",
    "train",
    "evaluate",
    "right",
    "commit",
    "building",
    "huge",
    "object",
    "detection",
    "model",
    "uh",
    "look",
    "commit",
    "building",
    "whole",
    "thing",
    "thousands",
    "images",
    "want",
    "make",
    "sure",
    "going",
    "right",
    "technique",
    "getting",
    "right",
    "levels",
    "data",
    "getting",
    "using",
    "right",
    "types",
    "sensors",
    "able",
    "prototype",
    "first",
    "going",
    "make",
    "lot",
    "efficient",
    "going",
    "keep",
    "thumbs",
    "going",
    "adjust",
    "label",
    "time",
    "screwed",
    "looks",
    "bit",
    "better",
    "save",
    "going",
    "thumbs",
    "save",
    "see",
    "thumbs",
    "might",
    "perform",
    "little",
    "bit",
    "better",
    "got",
    "images",
    "bunch",
    "different",
    "angles",
    "let",
    "tighten",
    "one",
    "save",
    "um",
    "keep",
    "mind",
    "got",
    "green",
    "screen",
    "background",
    "moment",
    "interesting",
    "see",
    "performance",
    "looks",
    "like",
    "sucks",
    "make",
    "better",
    "okay",
    "cool",
    "let",
    "double",
    "check",
    "annotations",
    "per",
    "usual",
    "good",
    "good",
    "good",
    "good",
    "good",
    "good",
    "good",
    "good",
    "right",
    "cool",
    "looks",
    "good",
    "labeled",
    "images",
    "check",
    "let",
    "bring",
    "back",
    "thumbs",
    "annotations",
    "going",
    "live",
    "long",
    "good",
    "thank",
    "good",
    "thumbs",
    "good",
    "thumbs",
    "good",
    "well",
    "okay",
    "cool",
    "gone",
    "completed",
    "labeling",
    "next",
    "thing",
    "really",
    "need",
    "going",
    "split",
    "training",
    "testing",
    "partition",
    "get",
    "training",
    "step",
    "going",
    "train",
    "images",
    "train",
    "model",
    "portion",
    "images",
    "going",
    "separate",
    "part",
    "going",
    "use",
    "part",
    "images",
    "actually",
    "test",
    "reason",
    "split",
    "want",
    "train",
    "segment",
    "images",
    "going",
    "use",
    "training",
    "want",
    "test",
    "set",
    "images",
    "never",
    "seen",
    "look",
    "images",
    "might",
    "similar",
    "want",
    "give",
    "chance",
    "try",
    "see",
    "performance",
    "looks",
    "like",
    "images",
    "explicitly",
    "seen",
    "see",
    "got",
    "step",
    "6",
    "done",
    "let",
    "quickly",
    "recap",
    "imported",
    "dependencies",
    "defined",
    "images",
    "collect",
    "set",
    "folders",
    "captured",
    "images",
    "labeled",
    "done",
    "quite",
    "fair",
    "bit",
    "need",
    "move",
    "training",
    "test",
    "testing",
    "partition",
    "step",
    "six",
    "going",
    "going",
    "go",
    "back",
    "folder",
    "inside",
    "images",
    "folders",
    "going",
    "hold",
    "going",
    "create",
    "two",
    "new",
    "folders",
    "going",
    "call",
    "one",
    "called",
    "train",
    "going",
    "call",
    "one",
    "called",
    "test",
    "names",
    "folders",
    "really",
    "important",
    "inside",
    "training",
    "script",
    "actually",
    "going",
    "looking",
    "training",
    "testing",
    "folders",
    "test",
    "train",
    "folder",
    "explicitly",
    "need",
    "make",
    "sure",
    "create",
    "folders",
    "need",
    "make",
    "sure",
    "images",
    "associated",
    "annotation",
    "going",
    "going",
    "take",
    "random",
    "portion",
    "images",
    "class",
    "going",
    "take",
    "livelong",
    "thank",
    "thumbs",
    "something",
    "thumbs",
    "going",
    "put",
    "training",
    "folder",
    "going",
    "images",
    "use",
    "train",
    "object",
    "detection",
    "model",
    "step",
    "live",
    "long",
    "going",
    "get",
    "everything",
    "including",
    "annotation",
    "maybe",
    "leave",
    "one",
    "image",
    "testing",
    "going",
    "effectively",
    "one",
    "two",
    "three",
    "four",
    "images",
    "one",
    "two",
    "three",
    "four",
    "annotation",
    "going",
    "cut",
    "paste",
    "training",
    "folder",
    "gon",
    "na",
    "class",
    "gon",
    "na",
    "go",
    "thank",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "four",
    "images",
    "four",
    "annotations",
    "paste",
    "training",
    "folder",
    "gon",
    "na",
    "thumbs",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "got",
    "grab",
    "one",
    "gon",
    "na",
    "go",
    "back",
    "reason",
    "explicit",
    "making",
    "sure",
    "grab",
    "annotation",
    "image",
    "skip",
    "annotation",
    "skip",
    "image",
    "going",
    "screw",
    "go",
    "training",
    "step",
    "need",
    "make",
    "sure",
    "grab",
    "image",
    "annotation",
    "really",
    "really",
    "important",
    "going",
    "last",
    "step",
    "going",
    "grab",
    "let",
    "leave",
    "two",
    "images",
    "testing",
    "going",
    "grab",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "right",
    "leave",
    "two",
    "images",
    "two",
    "annotations",
    "thumbs",
    "remember",
    "add",
    "images",
    "right",
    "going",
    "paste",
    "training",
    "folder",
    "even",
    "number",
    "got",
    "36",
    "little",
    "bit",
    "smaller",
    "got",
    "36",
    "images",
    "got",
    "images",
    "annotation",
    "good",
    "training",
    "need",
    "thing",
    "testing",
    "going",
    "grab",
    "rest",
    "paste",
    "test",
    "thank",
    "could",
    "automate",
    "could",
    "write",
    "little",
    "bit",
    "python",
    "script",
    "randomly",
    "select",
    "folders",
    "get",
    "around",
    "let",
    "know",
    "love",
    "see",
    "code",
    "um",
    "paste",
    "test",
    "found",
    "manually",
    "bad",
    "um",
    "particularly",
    "got",
    "small",
    "segment",
    "images",
    "going",
    "grab",
    "thumbs",
    "thumbs",
    "paste",
    "test",
    "right",
    "ideally",
    "end",
    "even",
    "number",
    "images",
    "inside",
    "test",
    "folder",
    "inside",
    "train",
    "folder",
    "take",
    "look",
    "full",
    "file",
    "path",
    "inside",
    "tfod",
    "course",
    "folder",
    "tensorflow",
    "workspace",
    "images",
    "test",
    "test",
    "images",
    "annotations",
    "train",
    "train",
    "images",
    "annotations",
    "images",
    "annotations",
    "going",
    "used",
    "actually",
    "train",
    "model",
    "going",
    "technique",
    "user",
    "technique",
    "converts",
    "images",
    "annotations",
    "something",
    "called",
    "tensorflow",
    "record",
    "got",
    "scripts",
    "help",
    "going",
    "convert",
    "use",
    "tensorflow",
    "records",
    "able",
    "actually",
    "train",
    "model",
    "go",
    "back",
    "images",
    "folder",
    "also",
    "delete",
    "folders",
    "well",
    "need",
    "nothing",
    "inside",
    "collected",
    "images",
    "actually",
    "delete",
    "images",
    "annotations",
    "inside",
    "test",
    "train",
    "good",
    "go",
    "inside",
    "image",
    "collection",
    "notebook",
    "also",
    "got",
    "code",
    "compress",
    "images",
    "able",
    "push",
    "collab",
    "going",
    "get",
    "collab",
    "training",
    "hold",
    "need",
    "run",
    "last",
    "two",
    "cells",
    "everything",
    "step",
    "7",
    "says",
    "optional",
    "cool",
    "right",
    "image",
    "collection",
    "labeling",
    "done",
    "gone",
    "collected",
    "images",
    "captured",
    "images",
    "labeled",
    "using",
    "label",
    "image",
    "gone",
    "split",
    "training",
    "testing",
    "partition",
    "remember",
    "last",
    "step",
    "really",
    "really",
    "important",
    "need",
    "training",
    "testing",
    "folder",
    "training",
    "script",
    "going",
    "looking",
    "also",
    "added",
    "best",
    "practices",
    "case",
    "sensitive",
    "made",
    "sure",
    "got",
    "cases",
    "right",
    "kept",
    "labels",
    "tight",
    "right",
    "done",
    "five",
    "images",
    "class",
    "except",
    "thumbs",
    "might",
    "choose",
    "add",
    "later",
    "good",
    "brings",
    "us",
    "two",
    "step",
    "three",
    "training",
    "models",
    "part",
    "three",
    "actually",
    "going",
    "start",
    "training",
    "models",
    "specifically",
    "going",
    "using",
    "model",
    "called",
    "mobile",
    "net",
    "specific",
    "deep",
    "learning",
    "architecture",
    "could",
    "use",
    "bunch",
    "different",
    "types",
    "models",
    "might",
    "actually",
    "performance",
    "shooting",
    "section",
    "well",
    "comes",
    "training",
    "model",
    "using",
    "tensorflow",
    "object",
    "detection",
    "bunch",
    "steps",
    "need",
    "go",
    "bunch",
    "dependencies",
    "going",
    "needing",
    "namely",
    "using",
    "tensorflow",
    "object",
    "detection",
    "one",
    "core",
    "dependencies",
    "going",
    "tensorflow",
    "actually",
    "going",
    "go",
    "install",
    "dependencies",
    "set",
    "folder",
    "structures",
    "actually",
    "start",
    "training",
    "model",
    "part",
    "also",
    "going",
    "evaluating",
    "model",
    "might",
    "come",
    "back",
    "little",
    "bit",
    "later",
    "wanted",
    "talk",
    "evaluate",
    "models",
    "nice",
    "thing",
    "tensorflow",
    "object",
    "detection",
    "able",
    "calculate",
    "evaluation",
    "metrics",
    "actually",
    "gone",
    "trained",
    "model",
    "specifically",
    "run",
    "evaluation",
    "going",
    "get",
    "two",
    "key",
    "things",
    "get",
    "precision",
    "normally",
    "get",
    "metric",
    "called",
    "map",
    "stands",
    "mean",
    "average",
    "precision",
    "basically",
    "tries",
    "calculate",
    "proportion",
    "detections",
    "correct",
    "right",
    "actually",
    "calculating",
    "true",
    "positive",
    "actually",
    "calculated",
    "number",
    "true",
    "positive",
    "detections",
    "divided",
    "true",
    "positives",
    "false",
    "positives",
    "effectively",
    "number",
    "detections",
    "got",
    "right",
    "case",
    "see",
    "got",
    "little",
    "matrix",
    "true",
    "positive",
    "detection",
    "see",
    "sign",
    "hello",
    "right",
    "accurately",
    "detected",
    "sign",
    "hello",
    "true",
    "positive",
    "case",
    "might",
    "false",
    "positive",
    "gone",
    "detected",
    "label",
    "says",
    "hello",
    "actually",
    "correct",
    "actually",
    "label",
    "actually",
    "object",
    "even",
    "though",
    "gone",
    "made",
    "positive",
    "detection",
    "false",
    "positive",
    "actually",
    "correct",
    "also",
    "got",
    "true",
    "negative",
    "case",
    "object",
    "hello",
    "say",
    "example",
    "hello",
    "model",
    "actual",
    "hello",
    "object",
    "case",
    "actually",
    "true",
    "negative",
    "case",
    "got",
    "false",
    "negative",
    "hello",
    "object",
    "detected",
    "hello",
    "falsely",
    "rejected",
    "right",
    "actually",
    "going",
    "get",
    "calculate",
    "evaluation",
    "metrics",
    "precision",
    "recall",
    "calculated",
    "number",
    "true",
    "positive",
    "false",
    "positive",
    "true",
    "negative",
    "false",
    "negative",
    "detections",
    "case",
    "precision",
    "metric",
    "going",
    "true",
    "positive",
    "number",
    "detections",
    "accurately",
    "detected",
    "correct",
    "object",
    "divided",
    "number",
    "true",
    "positives",
    "false",
    "positives",
    "effectively",
    "giving",
    "layman",
    "terms",
    "proportion",
    "detections",
    "actually",
    "correct",
    "right",
    "correct",
    "bad",
    "ideally",
    "want",
    "precision",
    "number",
    "high",
    "possible",
    "higher",
    "precision",
    "number",
    "better",
    "precision",
    "number",
    "likewise",
    "higher",
    "recall",
    "number",
    "also",
    "better",
    "number",
    "recall",
    "calculated",
    "number",
    "true",
    "positives",
    "divided",
    "true",
    "positives",
    "false",
    "negatives",
    "right",
    "basically",
    "capturing",
    "proportion",
    "actual",
    "objects",
    "capture",
    "case",
    "see",
    "might",
    "captured",
    "capture",
    "really",
    "trying",
    "measure",
    "hey",
    "objects",
    "screen",
    "proportion",
    "actually",
    "get",
    "calculate",
    "evaluation",
    "metrics",
    "later",
    "actually",
    "able",
    "see",
    "um",
    "also",
    "see",
    "loss",
    "talked",
    "little",
    "bit",
    "method",
    "evaluating",
    "well",
    "model",
    "performing",
    "data",
    "provided",
    "ideally",
    "want",
    "loss",
    "low",
    "possible",
    "recall",
    "high",
    "possible",
    "precision",
    "high",
    "possible",
    "talk",
    "get",
    "step",
    "right",
    "tensorflow",
    "model",
    "zoo",
    "whole",
    "heap",
    "different",
    "type",
    "model",
    "actually",
    "go",
    "ahead",
    "train",
    "right",
    "normally",
    "balance",
    "balance",
    "faster",
    "detections",
    "ideally",
    "able",
    "detect",
    "stuff",
    "really",
    "really",
    "quickly",
    "versus",
    "lower",
    "accuracy",
    "ones",
    "tend",
    "faster",
    "tend",
    "less",
    "accurate",
    "time",
    "time",
    "ones",
    "highly",
    "accurate",
    "tend",
    "slower",
    "right",
    "sophisticated",
    "models",
    "bigger",
    "architectures",
    "going",
    "take",
    "slower",
    "actually",
    "make",
    "detection",
    "actually",
    "show",
    "right",
    "actually",
    "go",
    "google",
    "type",
    "tensorflow",
    "model",
    "zoo",
    "make",
    "sure",
    "type",
    "tf2",
    "stands",
    "tensorflow",
    "heap",
    "different",
    "types",
    "models",
    "right",
    "models",
    "different",
    "model",
    "names",
    "different",
    "model",
    "architectures",
    "zoom",
    "see",
    "got",
    "model",
    "called",
    "centernet",
    "got",
    "another",
    "model",
    "called",
    "efficient",
    "det",
    "got",
    "sse",
    "mobile",
    "net",
    "stands",
    "single",
    "shot",
    "detector",
    "mobile",
    "net",
    "single",
    "shot",
    "detector",
    "resonant",
    "represent",
    "different",
    "neural",
    "network",
    "architectures",
    "used",
    "object",
    "detection",
    "need",
    "go",
    "great",
    "amounts",
    "detail",
    "actually",
    "built",
    "need",
    "know",
    "practitioner",
    "however",
    "using",
    "different",
    "models",
    "going",
    "result",
    "different",
    "levels",
    "accuracy",
    "well",
    "different",
    "levels",
    "speed",
    "say",
    "example",
    "wanted",
    "use",
    "let",
    "actually",
    "take",
    "look",
    "model",
    "going",
    "using",
    "actually",
    "using",
    "one",
    "ssd",
    "mobile",
    "net",
    "v2",
    "fpm",
    "light",
    "320",
    "model",
    "actually",
    "going",
    "using",
    "actually",
    "take",
    "look",
    "link",
    "copy",
    "link",
    "address",
    "let",
    "actually",
    "open",
    "notebook",
    "actually",
    "come",
    "back",
    "link",
    "actually",
    "going",
    "link",
    "actually",
    "using",
    "notebook",
    "show",
    "sec",
    "um",
    "model",
    "let",
    "take",
    "look",
    "got",
    "two",
    "components",
    "got",
    "speed",
    "got",
    "mean",
    "average",
    "precision",
    "remember",
    "talked",
    "precision",
    "case",
    "got",
    "average",
    "precision",
    "represented",
    "coco",
    "dataset",
    "standard",
    "data",
    "set",
    "think",
    "two",
    "columns",
    "fast",
    "model",
    "accurate",
    "model",
    "likely",
    "case",
    "got",
    "bit",
    "balanced",
    "model",
    "right",
    "ssd",
    "mobile",
    "net",
    "going",
    "run",
    "frame",
    "22",
    "milliseconds",
    "ideally",
    "want",
    "number",
    "lower",
    "better",
    "going",
    "mean",
    "average",
    "precision",
    "reasonably",
    "balanced",
    "remember",
    "said",
    "going",
    "bit",
    "case",
    "certain",
    "certain",
    "architectures",
    "fast",
    "highly",
    "accurate",
    "well",
    "keep",
    "mind",
    "well",
    "might",
    "get",
    "model",
    "really",
    "really",
    "quick",
    "also",
    "really",
    "really",
    "accurate",
    "could",
    "use",
    "one",
    "say",
    "example",
    "wanted",
    "get",
    "model",
    "accurate",
    "later",
    "well",
    "might",
    "choose",
    "go",
    "one",
    "ssd",
    "mobile",
    "net",
    "v2",
    "fp",
    "light",
    "640",
    "going",
    "slower",
    "going",
    "take",
    "39",
    "milliseconds",
    "per",
    "frame",
    "see",
    "mean",
    "average",
    "precision",
    "might",
    "choose",
    "use",
    "guess",
    "sort",
    "make",
    "decision",
    "need",
    "model",
    "going",
    "deployed",
    "phone",
    "raspberry",
    "pi",
    "ideally",
    "want",
    "optimize",
    "speed",
    "right",
    "raspberry",
    "pi",
    "going",
    "without",
    "acceleration",
    "going",
    "perform",
    "going",
    "able",
    "perform",
    "fast",
    "anyway",
    "want",
    "choose",
    "model",
    "already",
    "really",
    "really",
    "lightweight",
    "going",
    "able",
    "run",
    "case",
    "tend",
    "use",
    "model",
    "lot",
    "unless",
    "specific",
    "use",
    "case",
    "need",
    "really",
    "really",
    "accurate",
    "model",
    "core",
    "difference",
    "model",
    "model",
    "model",
    "actually",
    "going",
    "compress",
    "image",
    "640",
    "480",
    "webcam",
    "320",
    "320",
    "actually",
    "pass",
    "actually",
    "need",
    "anything",
    "part",
    "actually",
    "going",
    "use",
    "technique",
    "called",
    "compress",
    "320",
    "320",
    "going",
    "take",
    "detections",
    "found",
    "convert",
    "back",
    "original",
    "resolution",
    "actually",
    "one",
    "advantages",
    "tensorflow",
    "update",
    "detection",
    "model",
    "api",
    "pain",
    "sometimes",
    "another",
    "cool",
    "thing",
    "technique",
    "uses",
    "bunch",
    "techniques",
    "called",
    "image",
    "augmentation",
    "might",
    "darken",
    "image",
    "might",
    "shift",
    "might",
    "flip",
    "detection",
    "certain",
    "models",
    "different",
    "levels",
    "data",
    "augmentation",
    "image",
    "augmentation",
    "keep",
    "mind",
    "reason",
    "ideally",
    "get",
    "better",
    "performing",
    "model",
    "ideally",
    "accurate",
    "model",
    "use",
    "bunch",
    "different",
    "types",
    "models",
    "one",
    "really",
    "really",
    "slow",
    "one",
    "runs",
    "301",
    "milliseconds",
    "reason",
    "particular",
    "model",
    "takes",
    "lot",
    "longer",
    "actually",
    "gives",
    "bunch",
    "additional",
    "stuff",
    "well",
    "actually",
    "uses",
    "mask",
    "case",
    "course",
    "covers",
    "object",
    "detection",
    "mask",
    "model",
    "see",
    "actually",
    "something",
    "called",
    "image",
    "segmentation",
    "well",
    "rather",
    "detecting",
    "box",
    "around",
    "face",
    "actually",
    "trace",
    "around",
    "face",
    "detect",
    "specific",
    "shape",
    "face",
    "box",
    "lot",
    "sophisticated",
    "going",
    "take",
    "lot",
    "longer",
    "run",
    "case",
    "301",
    "milliseconds",
    "got",
    "bit",
    "model",
    "choose",
    "use",
    "going",
    "using",
    "one",
    "ssd",
    "mobile",
    "net",
    "v2",
    "fpm",
    "live",
    "320",
    "320",
    "performance",
    "tuning",
    "might",
    "choose",
    "use",
    "different",
    "model",
    "see",
    "looks",
    "like",
    "tensorflow",
    "model",
    "zoo",
    "whenever",
    "somebody",
    "asks",
    "tensorflow",
    "model",
    "zoo",
    "normally",
    "talking",
    "okay",
    "sometimes",
    "might",
    "want",
    "train",
    "locally",
    "machine",
    "rather",
    "use",
    "cloud",
    "instance",
    "say",
    "example",
    "home",
    "ca",
    "access",
    "desktop",
    "might",
    "want",
    "train",
    "something",
    "collab",
    "well",
    "key",
    "thing",
    "note",
    "train",
    "cloud",
    "instance",
    "sometimes",
    "difficult",
    "connect",
    "different",
    "devices",
    "say",
    "example",
    "want",
    "connect",
    "microscope",
    "connect",
    "webcam",
    "sometimes",
    "little",
    "bit",
    "tricky",
    "one",
    "thing",
    "keep",
    "mind",
    "cover",
    "little",
    "bit",
    "later",
    "get",
    "cloud",
    "section",
    "note",
    "time",
    "kick",
    "training",
    "going",
    "jump",
    "back",
    "jupiter",
    "notebook",
    "operating",
    "inside",
    "image",
    "collection",
    "notebook",
    "time",
    "going",
    "open",
    "training",
    "detection",
    "notebook",
    "bunch",
    "stuff",
    "going",
    "going",
    "going",
    "go",
    "step",
    "step",
    "13",
    "steps",
    "together",
    "notebook",
    "going",
    "go",
    "training",
    "section",
    "least",
    "going",
    "go",
    "step",
    "7",
    "evaluate",
    "model",
    "going",
    "effectively",
    "go",
    "steps",
    "end",
    "trained",
    "object",
    "detection",
    "model",
    "begin",
    "use",
    "detection",
    "section",
    "going",
    "step",
    "first",
    "cell",
    "going",
    "run",
    "case",
    "importing",
    "operating",
    "system",
    "well",
    "actually",
    "going",
    "set",
    "model",
    "variables",
    "case",
    "defining",
    "want",
    "custom",
    "model",
    "folder",
    "go",
    "performance",
    "tuning",
    "model",
    "might",
    "change",
    "setting",
    "name",
    "model",
    "going",
    "name",
    "file",
    "download",
    "tensorflow",
    "model",
    "zoo",
    "actually",
    "download",
    "let",
    "find",
    "particular",
    "file",
    "actually",
    "download",
    "actually",
    "see",
    "file",
    "get",
    "back",
    "called",
    "ssd",
    "underscore",
    "mobile",
    "net",
    "underscore",
    "v2",
    "fpm",
    "lite",
    "320",
    "320",
    "coco",
    "17",
    "something",
    "sort",
    "wanted",
    "customize",
    "could",
    "well",
    "also",
    "got",
    "model",
    "url",
    "saying",
    "got",
    "model",
    "url",
    "got",
    "right",
    "click",
    "copy",
    "link",
    "address",
    "actually",
    "see",
    "going",
    "lot",
    "detail",
    "normally",
    "sort",
    "wanted",
    "show",
    "built",
    "link",
    "got",
    "right",
    "see",
    "exact",
    "link",
    "effectively",
    "going",
    "downloading",
    "model",
    "tensorflow",
    "model",
    "zoom",
    "using",
    "right",
    "got",
    "name",
    "file",
    "wanted",
    "replace",
    "need",
    "make",
    "sure",
    "get",
    "name",
    "new",
    "file",
    "right",
    "case",
    "see",
    "going",
    "ssd",
    "underscore",
    "mobile",
    "net",
    "underscore",
    "v2",
    "fp",
    "light",
    "320",
    "320",
    "underscore",
    "coco",
    "17",
    "underscore",
    "got",
    "different",
    "one",
    "could",
    "change",
    "model",
    "name",
    "need",
    "change",
    "model",
    "name",
    "model",
    "url",
    "need",
    "stress",
    "leave",
    "going",
    "work",
    "setting",
    "different",
    "variables",
    "setting",
    "generate",
    "tf",
    "record",
    "script",
    "come",
    "later",
    "label",
    "map",
    "name",
    "come",
    "later",
    "actually",
    "going",
    "run",
    "cell",
    "cell",
    "cell",
    "cell",
    "actually",
    "notice",
    "actually",
    "got",
    "couple",
    "things",
    "going",
    "create",
    "different",
    "paths",
    "actually",
    "type",
    "paths",
    "makes",
    "whole",
    "heap",
    "easier",
    "work",
    "stuff",
    "got",
    "available",
    "within",
    "working",
    "directory",
    "able",
    "refer",
    "one",
    "reasonably",
    "easily",
    "say",
    "example",
    "wanted",
    "get",
    "model",
    "going",
    "could",
    "type",
    "paths",
    "checkpoint",
    "path",
    "see",
    "going",
    "folder",
    "let",
    "explain",
    "one",
    "parts",
    "workspace",
    "going",
    "high",
    "level",
    "workspace",
    "let",
    "open",
    "workspace",
    "going",
    "inside",
    "workspace",
    "going",
    "annotations",
    "going",
    "create",
    "tf",
    "record",
    "files",
    "later",
    "images",
    "already",
    "collected",
    "images",
    "also",
    "models",
    "folder",
    "ssd",
    "mobnet",
    "folder",
    "represents",
    "two",
    "lines",
    "let",
    "find",
    "got",
    "models",
    "folder",
    "model",
    "path",
    "also",
    "got",
    "checkpoint",
    "path",
    "well",
    "actually",
    "take",
    "look",
    "checkpoint",
    "path",
    "type",
    "model",
    "path",
    "first",
    "folder",
    "tensorflow",
    "workspace",
    "models",
    "type",
    "checkpoint",
    "path",
    "folder",
    "need",
    "mess",
    "around",
    "sort",
    "giving",
    "bit",
    "explainer",
    "one",
    "one",
    "represents",
    "different",
    "file",
    "path",
    "got",
    "available",
    "want",
    "dig",
    "little",
    "bit",
    "also",
    "got",
    "couple",
    "variables",
    "inside",
    "files",
    "dictionary",
    "type",
    "files",
    "see",
    "got",
    "file",
    "pipeline",
    "config",
    "created",
    "yet",
    "tf",
    "record",
    "script",
    "label",
    "map",
    "later",
    "script",
    "actually",
    "creating",
    "directory",
    "see",
    "directories",
    "created",
    "right",
    "script",
    "actually",
    "went",
    "actually",
    "step",
    "tensorflow",
    "folder",
    "five",
    "folders",
    "label",
    "image",
    "folder",
    "models",
    "folder",
    "pro",
    "talk",
    "folder",
    "later",
    "scripts",
    "folder",
    "workspace",
    "folder",
    "step",
    "workspace",
    "folder",
    "gon",
    "na",
    "bunch",
    "available",
    "well",
    "okay",
    "folder",
    "structure",
    "set",
    "next",
    "thing",
    "going",
    "go",
    "ahead",
    "actually",
    "download",
    "tensorflow",
    "models",
    "tensorflow",
    "model",
    "zoo",
    "also",
    "going",
    "install",
    "tensorflow",
    "object",
    "detection",
    "tends",
    "lot",
    "people",
    "get",
    "stuck",
    "actually",
    "going",
    "take",
    "step",
    "step",
    "going",
    "show",
    "look",
    "validate",
    "actually",
    "got",
    "successfully",
    "installed",
    "going",
    "step",
    "first",
    "cell",
    "one",
    "going",
    "hit",
    "shift",
    "enter",
    "going",
    "install",
    "package",
    "called",
    "wget",
    "going",
    "allow",
    "us",
    "actually",
    "pull",
    "model",
    "tensorflow",
    "model",
    "zoom",
    "going",
    "actually",
    "clone",
    "tensorflow",
    "object",
    "detection",
    "repository",
    "copy",
    "link",
    "let",
    "actually",
    "show",
    "tensorflow",
    "model",
    "garden",
    "inside",
    "bunch",
    "stuff",
    "available",
    "tensorflow",
    "specifically",
    "interested",
    "object",
    "detection",
    "people",
    "refer",
    "tensorflow",
    "object",
    "detection",
    "api",
    "specific",
    "section",
    "research",
    "object",
    "detection",
    "talking",
    "everything",
    "represents",
    "tensorflow",
    "object",
    "detection",
    "api",
    "see",
    "bunch",
    "stuff",
    "available",
    "whole",
    "bunch",
    "documentation",
    "well",
    "also",
    "bunch",
    "open",
    "source",
    "tutorials",
    "tended",
    "find",
    "little",
    "bit",
    "tricky",
    "actually",
    "get",
    "building",
    "course",
    "going",
    "going",
    "great",
    "detail",
    "actually",
    "going",
    "go",
    "ahead",
    "next",
    "line",
    "code",
    "run",
    "actually",
    "going",
    "clone",
    "everything",
    "see",
    "going",
    "clone",
    "folder",
    "going",
    "clone",
    "tensorflow",
    "start",
    "inside",
    "root",
    "directory",
    "tensorflow",
    "object",
    "detection",
    "course",
    "going",
    "clone",
    "model",
    "garden",
    "everything",
    "see",
    "tensorflow",
    "models",
    "actually",
    "going",
    "going",
    "install",
    "run",
    "cell",
    "going",
    "exactly",
    "may",
    "take",
    "little",
    "bit",
    "time",
    "run",
    "depending",
    "speed",
    "internet",
    "let",
    "go",
    "ahead",
    "run",
    "okay",
    "tensorflow",
    "model",
    "garden",
    "cloned",
    "see",
    "got",
    "whole",
    "bunch",
    "stuff",
    "got",
    "community",
    "official",
    "orbit",
    "research",
    "forth",
    "mimicking",
    "keep",
    "mind",
    "lot",
    "stuff",
    "going",
    "need",
    "cloning",
    "entire",
    "repository",
    "specifically",
    "going",
    "need",
    "inside",
    "research",
    "folder",
    "inside",
    "object",
    "detection",
    "us",
    "right",
    "stuff",
    "going",
    "need",
    "leverage",
    "tensorflow",
    "object",
    "detection",
    "model",
    "api",
    "tensorflow",
    "object",
    "detection",
    "api",
    "keep",
    "mind",
    "tensorflow",
    "2",
    "latest",
    "version",
    "tensorflow",
    "tensorflow",
    "cool",
    "righty",
    "going",
    "going",
    "go",
    "ahead",
    "install",
    "right",
    "cloned",
    "take",
    "look",
    "let",
    "minimize",
    "cloned",
    "repository",
    "remember",
    "inside",
    "research",
    "inside",
    "object",
    "detection",
    "stuff",
    "going",
    "leverage",
    "actually",
    "need",
    "actually",
    "run",
    "install",
    "step",
    "bunch",
    "stuff",
    "required",
    "actually",
    "go",
    "ahead",
    "install",
    "get",
    "stuck",
    "run",
    "issues",
    "means",
    "check",
    "model",
    "guide",
    "actually",
    "going",
    "step",
    "actually",
    "go",
    "ahead",
    "install",
    "stuff",
    "next",
    "cell",
    "actually",
    "going",
    "detect",
    "whether",
    "using",
    "linux",
    "whether",
    "installing",
    "windows",
    "going",
    "three",
    "things",
    "first",
    "going",
    "install",
    "protoc",
    "protoc",
    "lot",
    "tensorflow",
    "object",
    "detection",
    "stuff",
    "using",
    "uses",
    "something",
    "called",
    "protocol",
    "buffers",
    "actually",
    "type",
    "protoc",
    "actually",
    "going",
    "going",
    "set",
    "tensorflow",
    "object",
    "detection",
    "api",
    "need",
    "anything",
    "run",
    "cell",
    "going",
    "normally",
    "little",
    "bit",
    "tedious",
    "going",
    "run",
    "cell",
    "us",
    "locally",
    "run",
    "going",
    "install",
    "protoc",
    "line",
    "actually",
    "going",
    "go",
    "ahead",
    "install",
    "official",
    "tensorflow",
    "object",
    "detection",
    "api",
    "actually",
    "verify",
    "installation",
    "script",
    "let",
    "actually",
    "clear",
    "output",
    "see",
    "cell",
    "actually",
    "going",
    "run",
    "verification",
    "script",
    "tell",
    "us",
    "whether",
    "actually",
    "got",
    "tensorflow",
    "object",
    "detection",
    "api",
    "installed",
    "successfully",
    "installed",
    "successfully",
    "see",
    "read",
    "okay",
    "mean",
    "successfully",
    "installed",
    "object",
    "detection",
    "api",
    "kick",
    "things",
    "going",
    "show",
    "work",
    "get",
    "installed",
    "appropriately",
    "okay",
    "going",
    "going",
    "run",
    "cell",
    "going",
    "install",
    "protox",
    "set",
    "going",
    "install",
    "object",
    "detection",
    "api",
    "let",
    "run",
    "going",
    "take",
    "little",
    "run",
    "ideally",
    "running",
    "inside",
    "notebook",
    "windows",
    "might",
    "get",
    "status",
    "updates",
    "way",
    "check",
    "currently",
    "running",
    "go",
    "remember",
    "inside",
    "virtual",
    "environment",
    "yes",
    "make",
    "sure",
    "enabled",
    "running",
    "inside",
    "particular",
    "notebook",
    "inside",
    "environment",
    "going",
    "actually",
    "show",
    "show",
    "go",
    "tfod",
    "file",
    "inside",
    "libs",
    "site",
    "packages",
    "actually",
    "see",
    "installing",
    "packages",
    "right",
    "10",
    "30",
    "11",
    "see",
    "installing",
    "whole",
    "bunch",
    "different",
    "libraries",
    "ideally",
    "see",
    "continuously",
    "installing",
    "stuff",
    "may",
    "say",
    "successfully",
    "completed",
    "ideally",
    "want",
    "get",
    "okay",
    "verification",
    "script",
    "successfully",
    "installed",
    "right",
    "going",
    "golden",
    "bible",
    "let",
    "run",
    "verification",
    "script",
    "see",
    "saying",
    "module",
    "named",
    "tensorflow",
    "going",
    "run",
    "next",
    "line",
    "actually",
    "installs",
    "tensorflow",
    "us",
    "included",
    "lines",
    "used",
    "solve",
    "errors",
    "running",
    "verification",
    "script",
    "standard",
    "tensorflow",
    "object",
    "detection",
    "script",
    "allows",
    "us",
    "verify",
    "installation",
    "case",
    "telling",
    "us",
    "hey",
    "even",
    "though",
    "gone",
    "run",
    "script",
    "look",
    "like",
    "got",
    "tensorflow",
    "installed",
    "next",
    "line",
    "might",
    "need",
    "run",
    "might",
    "say",
    "okay",
    "show",
    "looks",
    "like",
    "successful",
    "might",
    "work",
    "perfectly",
    "case",
    "going",
    "install",
    "tensorflow",
    "let",
    "ideally",
    "start",
    "see",
    "tensorflow",
    "installing",
    "right",
    "hand",
    "side",
    "cool",
    "tensorflow",
    "installed",
    "even",
    "though",
    "right",
    "keep",
    "mind",
    "sometimes",
    "run",
    "errors",
    "even",
    "though",
    "ran",
    "tensorflow",
    "installed",
    "look",
    "like",
    "sort",
    "tense",
    "flow",
    "ca",
    "actually",
    "see",
    "tensorflow",
    "file",
    "library",
    "tensorboard",
    "tensorboard",
    "tf",
    "models",
    "official",
    "tf",
    "slim",
    "go",
    "run",
    "still",
    "gon",
    "na",
    "tell",
    "us",
    "module",
    "installed",
    "module",
    "name",
    "tensorflow",
    "run",
    "ideally",
    "install",
    "second",
    "time",
    "around",
    "ask",
    "seems",
    "like",
    "sometimes",
    "throws",
    "seem",
    "want",
    "run",
    "installing",
    "bunch",
    "additional",
    "packages",
    "see",
    "tensorflow",
    "ideally",
    "looking",
    "little",
    "bit",
    "better",
    "time",
    "let",
    "wait",
    "see",
    "verification",
    "script",
    "golden",
    "bible",
    "right",
    "like",
    "get",
    "okay",
    "sign",
    "good",
    "go",
    "case",
    "looks",
    "like",
    "still",
    "installing",
    "completed",
    "let",
    "run",
    "verification",
    "script",
    "looking",
    "lot",
    "better",
    "time",
    "run",
    "really",
    "fast",
    "ideally",
    "take",
    "little",
    "bit",
    "time",
    "alright",
    "got",
    "error",
    "called",
    "module",
    "named",
    "matplotlib",
    "one",
    "looks",
    "like",
    "got",
    "script",
    "run",
    "module",
    "found",
    "error",
    "pretty",
    "common",
    "means",
    "need",
    "install",
    "package",
    "got",
    "inside",
    "error",
    "guide",
    "get",
    "module",
    "named",
    "whatever",
    "need",
    "go",
    "ahead",
    "install",
    "sometimes",
    "need",
    "uninstall",
    "reinstall",
    "need",
    "uninstall",
    "pip",
    "uninstall",
    "whatever",
    "library",
    "need",
    "uninstall",
    "dash",
    "yes",
    "install",
    "whichever",
    "one",
    "want",
    "case",
    "going",
    "run",
    "next",
    "cell",
    "matplotlib",
    "protobuf",
    "us",
    "okay",
    "looking",
    "good",
    "see",
    "inside",
    "virtual",
    "environment",
    "advantage",
    "virtual",
    "environment",
    "actually",
    "see",
    "visually",
    "libraries",
    "installed",
    "looks",
    "like",
    "gone",
    "done",
    "let",
    "go",
    "run",
    "verification",
    "script",
    "right",
    "module",
    "named",
    "pil",
    "let",
    "go",
    "ahead",
    "install",
    "one",
    "one",
    "right",
    "pip",
    "install",
    "pi",
    "believe",
    "pil",
    "pillow",
    "right",
    "um",
    "get",
    "types",
    "errors",
    "google",
    "module",
    "named",
    "pill",
    "means",
    "need",
    "install",
    "pillows",
    "often",
    "people",
    "going",
    "tell",
    "install",
    "pillows",
    "pip",
    "saw",
    "pillow",
    "right",
    "let",
    "go",
    "ahead",
    "run",
    "cool",
    "looks",
    "like",
    "installed",
    "let",
    "run",
    "checking",
    "verification",
    "script",
    "getting",
    "module",
    "named",
    "yaml",
    "looks",
    "like",
    "might",
    "let",
    "check",
    "let",
    "run",
    "pip",
    "list",
    "actually",
    "installed",
    "tensorflow",
    "looking",
    "good",
    "okay",
    "right",
    "let",
    "install",
    "yaml",
    "module",
    "named",
    "yaml",
    "let",
    "see",
    "install",
    "install",
    "yaml",
    "need",
    "run",
    "believe",
    "pi",
    "yaml",
    "yep",
    "looks",
    "like",
    "python",
    "piping",
    "saw",
    "pi",
    "ammo",
    "let",
    "okay",
    "looks",
    "like",
    "installed",
    "see",
    "payamal",
    "let",
    "run",
    "verification",
    "script",
    "hear",
    "gpu",
    "spinning",
    "right",
    "maybe",
    "looks",
    "like",
    "good",
    "sign",
    "looking",
    "good",
    "even",
    "though",
    "red",
    "right",
    "beautiful",
    "good",
    "get",
    "point",
    "run",
    "successfully",
    "right",
    "bottom",
    "even",
    "though",
    "red",
    "know",
    "look",
    "great",
    "say",
    "okay",
    "says",
    "okay",
    "means",
    "successfully",
    "installed",
    "tensorflow",
    "object",
    "detection",
    "library",
    "right",
    "basically",
    "means",
    "going",
    "go",
    "run",
    "verification",
    "tests",
    "make",
    "sure",
    "actually",
    "working",
    "run",
    "successfully",
    "get",
    "okay",
    "bottom",
    "let",
    "zoom",
    "get",
    "point",
    "huge",
    "win",
    "right",
    "saw",
    "solving",
    "arrows",
    "got",
    "module",
    "x",
    "go",
    "install",
    "module",
    "got",
    "module",
    "go",
    "install",
    "module",
    "sometimes",
    "need",
    "uninstall",
    "stuff",
    "reinstall",
    "stuff",
    "get",
    "stuck",
    "hit",
    "comments",
    "join",
    "discord",
    "server",
    "ideally",
    "going",
    "pattern",
    "right",
    "says",
    "module",
    "x",
    "go",
    "install",
    "module",
    "x",
    "inside",
    "virtual",
    "environment",
    "going",
    "installing",
    "correct",
    "place",
    "remember",
    "virtual",
    "environment",
    "using",
    "tfod",
    "need",
    "make",
    "sure",
    "go",
    "get",
    "run",
    "installed",
    "tensorflow",
    "installed",
    "matplotlib",
    "protobuf",
    "installed",
    "pillow",
    "remember",
    "installed",
    "pip",
    "install",
    "pillow",
    "also",
    "installed",
    "pymel",
    "might",
    "different",
    "depending",
    "particular",
    "environment",
    "might",
    "need",
    "install",
    "stuff",
    "less",
    "stuff",
    "might",
    "run",
    "perfectly",
    "fine",
    "wanted",
    "show",
    "installation",
    "installing",
    "scratch",
    "start",
    "see",
    "actually",
    "takes",
    "install",
    "okay",
    "um",
    "sunshine",
    "rainbows",
    "guess",
    "core",
    "thing",
    "wanted",
    "point",
    "smoke",
    "mirrors",
    "see",
    "might",
    "run",
    "stuff",
    "often",
    "pip",
    "install",
    "need",
    "run",
    "import",
    "object",
    "detection",
    "might",
    "still",
    "see",
    "get",
    "error",
    "says",
    "module",
    "named",
    "object",
    "detection",
    "solve",
    "restart",
    "kernel",
    "first",
    "let",
    "clear",
    "output",
    "little",
    "bit",
    "clearer",
    "run",
    "import",
    "object",
    "detection",
    "still",
    "saying",
    "module",
    "normally",
    "restart",
    "notebook",
    "hit",
    "let",
    "show",
    "go",
    "kernel",
    "restart",
    "say",
    "restart",
    "see",
    "said",
    "kernel",
    "ready",
    "go",
    "zoom",
    "need",
    "need",
    "run",
    "wget",
    "go",
    "see",
    "installed",
    "successfully",
    "sometimes",
    "need",
    "restart",
    "kernel",
    "able",
    "import",
    "notebook",
    "case",
    "object",
    "detection",
    "api",
    "installed",
    "available",
    "ready",
    "use",
    "went",
    "installed",
    "bunch",
    "stuff",
    "run",
    "pip",
    "list",
    "see",
    "heap",
    "additional",
    "libraries",
    "installed",
    "remember",
    "sort",
    "said",
    "install",
    "tensorflow",
    "want",
    "use",
    "gpu",
    "got",
    "install",
    "additional",
    "stuff",
    "well",
    "case",
    "got",
    "tensorflow",
    "equivalent",
    "like",
    "falls",
    "tensorflow",
    "available",
    "moment",
    "need",
    "make",
    "sure",
    "find",
    "appropriate",
    "cuda",
    "cud",
    "version",
    "normally",
    "go",
    "google",
    "search",
    "cuda",
    "well",
    "let",
    "take",
    "look",
    "version",
    "need",
    "first",
    "go",
    "forward",
    "slash",
    "install",
    "forward",
    "slash",
    "source",
    "windows",
    "windows",
    "machine",
    "could",
    "easily",
    "go",
    "back",
    "linux",
    "mac",
    "os",
    "page",
    "case",
    "windows",
    "scroll",
    "using",
    "need",
    "kuden",
    "8",
    "org",
    "cuda",
    "11",
    "installed",
    "case",
    "already",
    "got",
    "installed",
    "want",
    "show",
    "get",
    "go",
    "cuda",
    "11",
    "go",
    "google",
    "type",
    "cuda",
    "11",
    "see",
    "cuda",
    "toolkit",
    "available",
    "select",
    "choose",
    "operating",
    "system",
    "case",
    "windows",
    "choose",
    "version",
    "version",
    "windows",
    "windows",
    "10",
    "server",
    "choose",
    "type",
    "installer",
    "want",
    "either",
    "choose",
    "network",
    "install",
    "local",
    "install",
    "downloads",
    "everything",
    "choose",
    "network",
    "install",
    "hit",
    "download",
    "already",
    "got",
    "downloaded",
    "need",
    "wait",
    "got",
    "downloaded",
    "get",
    "file",
    "called",
    "get",
    "file",
    "let",
    "make",
    "little",
    "bit",
    "bigger",
    "called",
    "cuda",
    "underscore",
    "case",
    "windows",
    "actually",
    "double",
    "click",
    "walk",
    "package",
    "installation",
    "case",
    "going",
    "install",
    "cuda",
    "folder",
    "hit",
    "ok",
    "basically",
    "click",
    "click",
    "go",
    "cuda",
    "installation",
    "nothing",
    "crazy",
    "right",
    "hit",
    "next",
    "next",
    "next",
    "issues",
    "going",
    "install",
    "cuda",
    "machine",
    "rather",
    "sitting",
    "actually",
    "going",
    "show",
    "next",
    "step",
    "gone",
    "installed",
    "cuda",
    "got",
    "full",
    "insole",
    "video",
    "show",
    "scratch",
    "basically",
    "gon",
    "na",
    "double",
    "click",
    "cuda",
    "install",
    "walk",
    "installation",
    "need",
    "bit",
    "little",
    "bit",
    "tricky",
    "got",
    "cuda",
    "need",
    "get",
    "matching",
    "insulation",
    "case",
    "going",
    "cu",
    "dnn",
    "find",
    "showing",
    "find",
    "google",
    "rather",
    "giving",
    "direct",
    "links",
    "going",
    "consistently",
    "change",
    "type",
    "cud",
    "remember",
    "needed",
    "version",
    "need",
    "need",
    "eight",
    "going",
    "type",
    "cud",
    "eight",
    "consistently",
    "change",
    "case",
    "going",
    "available",
    "nvidia",
    "site",
    "got",
    "cuda",
    "well",
    "going",
    "go",
    "nvidia",
    "cu",
    "dnn",
    "going",
    "look",
    "kudern8",
    "let",
    "see",
    "available",
    "right",
    "got",
    "link",
    "gtc",
    "wo",
    "see",
    "download",
    "cdn",
    "order",
    "order",
    "download",
    "cdn",
    "8",
    "going",
    "need",
    "nvidia",
    "developer",
    "account",
    "free",
    "need",
    "sign",
    "going",
    "select",
    "download",
    "cu",
    "dnn",
    "need",
    "log",
    "need",
    "developer",
    "program",
    "membership",
    "case",
    "log",
    "log",
    "captcha",
    "trucks",
    "allow",
    "actually",
    "go",
    "ahead",
    "download",
    "download",
    "cu",
    "dnn",
    "need",
    "training",
    "gpu",
    "gpu",
    "local",
    "machine",
    "need",
    "go",
    "ahead",
    "order",
    "download",
    "need",
    "hit",
    "agree",
    "terms",
    "looking",
    "version",
    "need",
    "case",
    "two",
    "versions",
    "available",
    "cu",
    "dnn",
    "v8",
    "cuda",
    "11",
    "cu",
    "dnn",
    "cuda",
    "remember",
    "particular",
    "version",
    "tensorflow",
    "need",
    "cudn",
    "8",
    "cuda",
    "case",
    "going",
    "get",
    "cu",
    "dnn",
    "believe",
    "v8",
    "actually",
    "need",
    "go",
    "find",
    "different",
    "version",
    "right",
    "cud",
    "eight",
    "dot",
    "zero",
    "let",
    "find",
    "case",
    "going",
    "go",
    "archive",
    "right",
    "looking",
    "better",
    "see",
    "got",
    "bunch",
    "eight",
    "versions",
    "rather",
    "going",
    "consistently",
    "come",
    "new",
    "versions",
    "need",
    "one",
    "got",
    "cuda",
    "11",
    "got",
    "cu",
    "dnn",
    "download",
    "find",
    "version",
    "machine",
    "case",
    "got",
    "cdnn",
    "library",
    "windows",
    "x86",
    "download",
    "going",
    "download",
    "case",
    "already",
    "got",
    "installed",
    "cancel",
    "going",
    "look",
    "little",
    "something",
    "like",
    "looks",
    "like",
    "got",
    "need",
    "c",
    "u",
    "okay",
    "guess",
    "one",
    "must",
    "worked",
    "right",
    "going",
    "look",
    "little",
    "bit",
    "like",
    "got",
    "c",
    "u",
    "zipped",
    "file",
    "want",
    "extract",
    "case",
    "going",
    "extract",
    "going",
    "going",
    "copy",
    "cu",
    "files",
    "respective",
    "folders",
    "inside",
    "cuda",
    "installation",
    "location",
    "probably",
    "bit",
    "mouthful",
    "basically",
    "copying",
    "pasting",
    "stuff",
    "okay",
    "got",
    "stuff",
    "extracted",
    "one",
    "one",
    "double",
    "click",
    "see",
    "inside",
    "cuda",
    "going",
    "bin",
    "folder",
    "whole",
    "bunch",
    "cud",
    "stuff",
    "includes",
    "folder",
    "bunch",
    "cu",
    "dnn",
    "stuff",
    "lib",
    "folder",
    "bunch",
    "cu",
    "n",
    "stuff",
    "need",
    "open",
    "copy",
    "folders",
    "cuda",
    "folder",
    "actually",
    "show",
    "mine",
    "looks",
    "like",
    "go",
    "find",
    "nvidia",
    "believe",
    "inside",
    "folder",
    "called",
    "nvidia",
    "gpu",
    "computing",
    "toolkit",
    "got",
    "cuda",
    "got",
    "bunch",
    "versions",
    "inside",
    "bin",
    "folder",
    "copy",
    "bin",
    "files",
    "copy",
    "already",
    "got",
    "done",
    "good",
    "go",
    "see",
    "already",
    "got",
    "available",
    "copied",
    "cdn",
    "files",
    "bin",
    "file",
    "inside",
    "kudo",
    "directory",
    "go",
    "back",
    "include",
    "file",
    "include",
    "thing",
    "got",
    "see",
    "got",
    "cdn",
    "files",
    "copied",
    "likewise",
    "got",
    "lib",
    "x86",
    "lib",
    "x86",
    "back",
    "see",
    "got",
    "c",
    "cu",
    "dnn",
    "files",
    "copied",
    "respective",
    "cuda",
    "folder",
    "done",
    "windows",
    "machine",
    "need",
    "one",
    "last",
    "thing",
    "make",
    "sure",
    "added",
    "path",
    "case",
    "open",
    "properties",
    "go",
    "advanced",
    "system",
    "settings",
    "environment",
    "variables",
    "go",
    "path",
    "see",
    "got",
    "bin",
    "folder",
    "path",
    "bin",
    "folder",
    "path",
    "lib",
    "nvp",
    "folder",
    "path",
    "cup",
    "ti",
    "folder",
    "three",
    "one",
    "one",
    "one",
    "know",
    "let",
    "see",
    "make",
    "bit",
    "bigger",
    "go",
    "three",
    "file",
    "paths",
    "ones",
    "going",
    "need",
    "added",
    "path",
    "windows",
    "machine",
    "order",
    "enable",
    "work",
    "pointing",
    "particular",
    "folder",
    "go",
    "let",
    "make",
    "little",
    "bit",
    "easier",
    "see",
    "pointing",
    "nvidia",
    "gpu",
    "see",
    "pointing",
    "v11",
    "bin",
    "see",
    "pointing",
    "bin",
    "folder",
    "one",
    "vvp",
    "folder",
    "one",
    "cup",
    "ti",
    "folder",
    "go",
    "back",
    "extras",
    "cup",
    "ti",
    "lib",
    "xx86",
    "actually",
    "look",
    "like",
    "one",
    "defined",
    "right",
    "bit",
    "better",
    "lib64",
    "cool",
    "good",
    "show",
    "check",
    "whether",
    "working",
    "actually",
    "go",
    "train",
    "able",
    "actually",
    "see",
    "whether",
    "picking",
    "appropriate",
    "version",
    "cuda",
    "sort",
    "extra",
    "step",
    "need",
    "go",
    "want",
    "train",
    "gpu",
    "gpu",
    "machine",
    "good",
    "go",
    "need",
    "worry",
    "installation",
    "done",
    "often",
    "bit",
    "nightmare",
    "process",
    "start",
    "see",
    "flow",
    "go",
    "run",
    "install",
    "test",
    "verification",
    "script",
    "keep",
    "running",
    "make",
    "sure",
    "effectively",
    "get",
    "okay",
    "symbol",
    "end",
    "run",
    "verification",
    "script",
    "actually",
    "run",
    "ideally",
    "get",
    "okay",
    "symbol",
    "okay",
    "status",
    "right",
    "end",
    "even",
    "though",
    "bright",
    "red",
    "long",
    "get",
    "okay",
    "bottom",
    "good",
    "go",
    "let",
    "run",
    "keep",
    "mind",
    "restarted",
    "kernel",
    "even",
    "though",
    "restarted",
    "still",
    "see",
    "okay",
    "pop",
    "looks",
    "like",
    "okay",
    "inside",
    "virtual",
    "environment",
    "got",
    "okay",
    "status",
    "popping",
    "good",
    "go",
    "right",
    "cell",
    "cell",
    "actually",
    "going",
    "download",
    "model",
    "tensorflow",
    "model",
    "zoo",
    "cast",
    "minds",
    "back",
    "tensorflow",
    "model",
    "zoo",
    "one",
    "remember",
    "got",
    "whole",
    "heap",
    "models",
    "already",
    "use",
    "training",
    "reason",
    "one",
    "get",
    "architecture",
    "use",
    "two",
    "going",
    "leveraging",
    "technique",
    "called",
    "transfer",
    "learning",
    "box",
    "actually",
    "use",
    "models",
    "standard",
    "object",
    "detection",
    "detecting",
    "generic",
    "objects",
    "phone",
    "bottle",
    "towel",
    "forth",
    "going",
    "going",
    "leverage",
    "machine",
    "learning",
    "model",
    "deep",
    "learning",
    "model",
    "already",
    "knows",
    "able",
    "transfer",
    "knowledge",
    "detect",
    "custom",
    "objects",
    "case",
    "going",
    "detecting",
    "different",
    "hand",
    "poses",
    "right",
    "reason",
    "using",
    "architecture",
    "mainly",
    "two",
    "reasons",
    "going",
    "going",
    "run",
    "cell",
    "checking",
    "operating",
    "system",
    "using",
    "wget",
    "get",
    "model",
    "url",
    "defined",
    "show",
    "sophisticated",
    "different",
    "model",
    "get",
    "performance",
    "tuning",
    "section",
    "ideally",
    "happen",
    "particular",
    "cell",
    "going",
    "clone",
    "model",
    "tensorflow",
    "model",
    "zoo",
    "going",
    "paste",
    "put",
    "inside",
    "specific",
    "folder",
    "go",
    "tensorflow",
    "workspace",
    "models",
    "see",
    "actually",
    "gone",
    "cloned",
    "model",
    "specific",
    "folder",
    "defined",
    "name",
    "folder",
    "earlier",
    "actually",
    "going",
    "leveraging",
    "stuff",
    "inside",
    "folder",
    "let",
    "go",
    "back",
    "going",
    "clone",
    "repository",
    "case",
    "copied",
    "compressed",
    "file",
    "untied",
    "file",
    "let",
    "bring",
    "untied",
    "also",
    "moved",
    "particular",
    "file",
    "workspace",
    "ideally",
    "got",
    "checkpoint",
    "folder",
    "contains",
    "different",
    "checkpoints",
    "file",
    "think",
    "different",
    "saved",
    "components",
    "model",
    "model",
    "got",
    "saved",
    "file",
    "variables",
    "file",
    "everything",
    "get",
    "actually",
    "freeze",
    "model",
    "going",
    "show",
    "later",
    "custom",
    "model",
    "well",
    "think",
    "model",
    "going",
    "able",
    "leverage",
    "custom",
    "object",
    "detection",
    "good",
    "next",
    "thing",
    "want",
    "create",
    "something",
    "called",
    "label",
    "map",
    "label",
    "map",
    "effectively",
    "represents",
    "map",
    "different",
    "labels",
    "remember",
    "thumbs",
    "thumbs",
    "thank",
    "live",
    "long",
    "already",
    "got",
    "written",
    "right",
    "got",
    "thumbs",
    "thumbs",
    "thank",
    "live",
    "long",
    "let",
    "go",
    "ahead",
    "run",
    "run",
    "successfully",
    "errors",
    "go",
    "workspace",
    "going",
    "written",
    "files",
    "label",
    "map",
    "file",
    "defined",
    "going",
    "inside",
    "annotation",
    "path",
    "label",
    "map",
    "name",
    "annotation",
    "path",
    "annotations",
    "label",
    "map",
    "named",
    "label",
    "map",
    "dot",
    "pb",
    "text",
    "open",
    "see",
    "got",
    "item",
    "one",
    "objects",
    "thumbs",
    "thumbs",
    "thank",
    "live",
    "long",
    "remember",
    "said",
    "case",
    "really",
    "really",
    "important",
    "go",
    "next",
    "step",
    "going",
    "normally",
    "run",
    "actually",
    "creating",
    "tf",
    "records",
    "actually",
    "creates",
    "file",
    "format",
    "called",
    "tf",
    "record",
    "available",
    "used",
    "actually",
    "go",
    "ahead",
    "train",
    "object",
    "detection",
    "model",
    "go",
    "next",
    "two",
    "lines",
    "skip",
    "one",
    "used",
    "training",
    "collab",
    "go",
    "run",
    "tf",
    "record",
    "script",
    "going",
    "run",
    "clone",
    "file",
    "github",
    "called",
    "generate",
    "tf",
    "record",
    "let",
    "show",
    "going",
    "clone",
    "file",
    "file",
    "generates",
    "tf",
    "records",
    "need",
    "go",
    "great",
    "amount",
    "detail",
    "actually",
    "know",
    "converting",
    "annotations",
    "images",
    "file",
    "format",
    "use",
    "run",
    "cell",
    "going",
    "clone",
    "ideally",
    "file",
    "go",
    "workspace",
    "tensorflow",
    "sorry",
    "scripts",
    "get",
    "file",
    "generate",
    "tf",
    "record",
    "generate",
    "underscore",
    "tier",
    "record",
    "available",
    "going",
    "run",
    "file",
    "going",
    "show",
    "running",
    "without",
    "errors",
    "going",
    "screw",
    "label",
    "map",
    "show",
    "case",
    "important",
    "run",
    "oh",
    "looks",
    "like",
    "got",
    "another",
    "module",
    "error",
    "case",
    "got",
    "module",
    "error",
    "go",
    "module",
    "error",
    "going",
    "ahead",
    "install",
    "looks",
    "like",
    "pi",
    "tz",
    "let",
    "check",
    "install",
    "looks",
    "like",
    "need",
    "pip",
    "install",
    "pi",
    "tz",
    "let",
    "go",
    "ahead",
    "get",
    "module",
    "errors",
    "need",
    "install",
    "see",
    "runs",
    "okay",
    "looking",
    "like",
    "running",
    "successfully",
    "solve",
    "error",
    "module",
    "error",
    "solve",
    "install",
    "module",
    "run",
    "tf",
    "record",
    "script",
    "actually",
    "going",
    "go",
    "ahead",
    "create",
    "go",
    "tensorflow",
    "workspace",
    "annotations",
    "file",
    "got",
    "train",
    "test",
    "record",
    "going",
    "used",
    "actually",
    "train",
    "model",
    "screw",
    "label",
    "map",
    "right",
    "say",
    "example",
    "take",
    "capital",
    "u",
    "thumbs",
    "label",
    "going",
    "screw",
    "generation",
    "go",
    "run",
    "generate",
    "script",
    "watch",
    "see",
    "got",
    "key",
    "error",
    "thumbs",
    "kiara",
    "thumbs",
    "included",
    "incorrect",
    "label",
    "case",
    "sensitive",
    "need",
    "make",
    "sure",
    "case",
    "correct",
    "go",
    "fix",
    "change",
    "label",
    "name",
    "thumbs",
    "rerun",
    "run",
    "successfully",
    "issues",
    "cool",
    "next",
    "thing",
    "going",
    "pretty",
    "straightforward",
    "going",
    "go",
    "copy",
    "model",
    "config",
    "model",
    "config",
    "remember",
    "bunch",
    "different",
    "types",
    "let",
    "close",
    "bunch",
    "different",
    "types",
    "models",
    "inside",
    "tensorflow",
    "model",
    "zoo",
    "pipeline",
    "config",
    "controls",
    "model",
    "actually",
    "looks",
    "like",
    "go",
    "let",
    "start",
    "start",
    "tensorflow",
    "workspace",
    "models",
    "ssd",
    "mobile",
    "net",
    "underscore",
    "v2",
    "underscore",
    "fp",
    "light",
    "underscore",
    "320",
    "320",
    "underscore",
    "coco",
    "17",
    "underscore",
    "pipeline",
    "file",
    "defines",
    "architecture",
    "model",
    "actually",
    "looks",
    "like",
    "going",
    "going",
    "customize",
    "specific",
    "model",
    "sort",
    "gives",
    "baseline",
    "going",
    "number",
    "classes",
    "going",
    "image",
    "resizer",
    "talking",
    "remember",
    "resizes",
    "320x320",
    "feature",
    "extractor",
    "one",
    "particularly",
    "like",
    "post",
    "processing",
    "data",
    "augmentation",
    "see",
    "actually",
    "data",
    "augmentation",
    "important",
    "show",
    "models",
    "later",
    "get",
    "slightly",
    "different",
    "data",
    "augmentation",
    "architecture",
    "important",
    "note",
    "gives",
    "data",
    "augmentation",
    "inside",
    "model",
    "scroll",
    "see",
    "got",
    "path",
    "configured",
    "components",
    "actually",
    "need",
    "update",
    "components",
    "model",
    "need",
    "update",
    "fine",
    "tune",
    "checkpoint",
    "need",
    "update",
    "label",
    "map",
    "path",
    "input",
    "path",
    "label",
    "map",
    "path",
    "input",
    "path",
    "label",
    "map",
    "path",
    "label",
    "map",
    "dot",
    "pb",
    "text",
    "created",
    "input",
    "path",
    "case",
    "train",
    "input",
    "reader",
    "train",
    "input",
    "path",
    "going",
    "train",
    "dot",
    "record",
    "file",
    "let",
    "go",
    "back",
    "file",
    "test",
    "input",
    "file",
    "referred",
    "eval",
    "input",
    "file",
    "referred",
    "going",
    "test",
    "file",
    "need",
    "worry",
    "wanted",
    "give",
    "little",
    "bit",
    "additional",
    "background",
    "code",
    "going",
    "us",
    "go",
    "step",
    "first",
    "going",
    "copy",
    "pipeline",
    "file",
    "models",
    "folder",
    "copy",
    "ssdmobnet",
    "folder",
    "run",
    "see",
    "copied",
    "next",
    "sets",
    "code",
    "actually",
    "going",
    "configuration",
    "actually",
    "step",
    "right",
    "opened",
    "config",
    "file",
    "gone",
    "set",
    "different",
    "file",
    "paths",
    "gone",
    "saved",
    "open",
    "customize",
    "one",
    "see",
    "going",
    "change",
    "number",
    "classes",
    "represents",
    "number",
    "different",
    "types",
    "objects",
    "going",
    "use",
    "scroll",
    "let",
    "close",
    "see",
    "actually",
    "also",
    "gone",
    "set",
    "different",
    "paths",
    "gone",
    "set",
    "fine",
    "tune",
    "checkpoint",
    "label",
    "map",
    "path",
    "input",
    "path",
    "forth",
    "set",
    "set",
    "set",
    "configured",
    "pretty",
    "much",
    "good",
    "go",
    "us",
    "kick",
    "training",
    "close",
    "actually",
    "actually",
    "start",
    "training",
    "model",
    "finally",
    "good",
    "bit",
    "actually",
    "go",
    "train",
    "model",
    "let",
    "take",
    "look",
    "done",
    "done",
    "quite",
    "fair",
    "bit",
    "set",
    "paths",
    "downloaded",
    "installed",
    "tensorflow",
    "object",
    "detection",
    "api",
    "remember",
    "go",
    "number",
    "iterations",
    "long",
    "verification",
    "script",
    "says",
    "okay",
    "good",
    "go",
    "went",
    "downloaded",
    "model",
    "tensorflow",
    "model",
    "zoo",
    "created",
    "label",
    "map",
    "remember",
    "inside",
    "workspace",
    "annotations",
    "label",
    "map",
    "dot",
    "pb",
    "text",
    "open",
    "really",
    "created",
    "tf",
    "records",
    "test",
    "train",
    "files",
    "copied",
    "config",
    "training",
    "folder",
    "updated",
    "code",
    "driven",
    "need",
    "anything",
    "good",
    "bit",
    "training",
    "model",
    "case",
    "going",
    "hit",
    "shift",
    "enter",
    "shift",
    "enter",
    "print",
    "command",
    "going",
    "run",
    "outside",
    "notebook",
    "going",
    "allow",
    "us",
    "see",
    "progress",
    "model",
    "actually",
    "training",
    "run",
    "inside",
    "notebook",
    "disadvantage",
    "particularly",
    "windows",
    "machine",
    "going",
    "see",
    "status",
    "update",
    "real",
    "time",
    "going",
    "copy",
    "going",
    "open",
    "new",
    "command",
    "prompt",
    "navigate",
    "got",
    "root",
    "tensorflow",
    "object",
    "detection",
    "course",
    "folder",
    "let",
    "going",
    "go",
    "tfod",
    "course",
    "right",
    "cool",
    "want",
    "top",
    "level",
    "folder",
    "ideally",
    "see",
    "tensorflow",
    "folder",
    "let",
    "clear",
    "need",
    "remember",
    "need",
    "activate",
    "environment",
    "backward",
    "slash",
    "tfod",
    "backward",
    "slash",
    "scripts",
    "backward",
    "slash",
    "activate",
    "type",
    "still",
    "inside",
    "tensorflow",
    "folder",
    "actually",
    "copy",
    "command",
    "let",
    "explain",
    "command",
    "little",
    "bit",
    "first",
    "thing",
    "actually",
    "running",
    "model",
    "training",
    "script",
    "using",
    "model",
    "underscore",
    "main",
    "underscore",
    "tf2",
    "dot",
    "pyscript",
    "going",
    "little",
    "bit",
    "detail",
    "usually",
    "would",
    "really",
    "want",
    "explain",
    "actually",
    "works",
    "actually",
    "going",
    "tensorflow",
    "models",
    "research",
    "object",
    "detection",
    "running",
    "script",
    "model",
    "main",
    "underscore",
    "tf2",
    "probably",
    "little",
    "bit",
    "small",
    "see",
    "model",
    "main",
    "tf2",
    "probably",
    "obscured",
    "running",
    "model",
    "main",
    "underscore",
    "tf2",
    "component",
    "running",
    "passing",
    "number",
    "arguments",
    "first",
    "passing",
    "model",
    "directory",
    "file",
    "remember",
    "pipeline",
    "config",
    "custom",
    "paths",
    "number",
    "labels",
    "different",
    "details",
    "specific",
    "object",
    "going",
    "use",
    "passing",
    "actual",
    "pipeline",
    "config",
    "also",
    "passing",
    "number",
    "training",
    "steps",
    "want",
    "go",
    "ahead",
    "run",
    "case",
    "good",
    "go",
    "going",
    "copy",
    "command",
    "going",
    "paste",
    "new",
    "command",
    "prompt",
    "let",
    "clear",
    "keep",
    "mind",
    "activated",
    "virtual",
    "environment",
    "virtual",
    "environment",
    "activated",
    "otherwise",
    "going",
    "able",
    "leverage",
    "tensorflow",
    "object",
    "detection",
    "stuff",
    "gone",
    "ahead",
    "insert",
    "paste",
    "command",
    "oh",
    "last",
    "last",
    "parameter",
    "number",
    "training",
    "steps",
    "increase",
    "decrease",
    "ideally",
    "normally",
    "set",
    "2000",
    "first",
    "prototyping",
    "step",
    "go",
    "clear",
    "training",
    "set",
    "10",
    "000",
    "come",
    "actual",
    "training",
    "run",
    "let",
    "go",
    "ahead",
    "run",
    "ideally",
    "see",
    "successfully",
    "opened",
    "looks",
    "like",
    "got",
    "error",
    "okay",
    "good",
    "cool",
    "got",
    "area",
    "value",
    "error",
    "numpy",
    "array",
    "size",
    "change",
    "may",
    "indicate",
    "binary",
    "incompatibility",
    "expected",
    "88",
    "c",
    "header",
    "got",
    "80",
    "pi",
    "objects",
    "copy",
    "go",
    "error",
    "guide",
    "search",
    "see",
    "particular",
    "error",
    "solved",
    "reinstalling",
    "pi",
    "coco",
    "tools",
    "let",
    "go",
    "ahead",
    "pip",
    "install",
    "pi",
    "coco",
    "tool",
    "let",
    "copy",
    "cool",
    "uninstalled",
    "reinstall",
    "okay",
    "spite",
    "looks",
    "fine",
    "says",
    "successfully",
    "installed",
    "coco",
    "tools",
    "let",
    "go",
    "ahead",
    "paste",
    "command",
    "go",
    "back",
    "notebook",
    "copy",
    "module",
    "named",
    "tensorflow",
    "module",
    "error",
    "able",
    "pip",
    "install",
    "tensorflow",
    "let",
    "try",
    "running",
    "command",
    "module",
    "named",
    "gin",
    "right",
    "module",
    "errors",
    "specifically",
    "attached",
    "tensorflow",
    "version",
    "let",
    "type",
    "pip",
    "list",
    "first",
    "even",
    "though",
    "got",
    "tensorflow",
    "tensorflow",
    "estimator",
    "let",
    "run",
    "let",
    "install",
    "gin",
    "pip",
    "install",
    "gin",
    "try",
    "training",
    "command",
    "let",
    "search",
    "one",
    "looks",
    "like",
    "encountered",
    "one",
    "looks",
    "like",
    "need",
    "downgrade",
    "let",
    "let",
    "pip",
    "install",
    "gen",
    "config",
    "let",
    "try",
    "let",
    "try",
    "okay",
    "looking",
    "good",
    "looks",
    "like",
    "sorted",
    "errors",
    "dual",
    "errors",
    "normally",
    "solved",
    "installing",
    "right",
    "library",
    "ca",
    "find",
    "right",
    "library",
    "take",
    "look",
    "google",
    "around",
    "see",
    "people",
    "done",
    "often",
    "common",
    "errors",
    "case",
    "needed",
    "install",
    "pip",
    "install",
    "gin",
    "config",
    "see",
    "actually",
    "running",
    "well",
    "know",
    "experience",
    "actually",
    "running",
    "going",
    "see",
    "first",
    "running",
    "gpu",
    "gpu",
    "memory",
    "taken",
    "see",
    "let",
    "bring",
    "side",
    "see",
    "using",
    "full",
    "eight",
    "gigs",
    "gpu",
    "ideally",
    "couple",
    "seconds",
    "start",
    "see",
    "loss",
    "metrics",
    "showing",
    "one",
    "things",
    "actually",
    "noticed",
    "actually",
    "tensorflow",
    "gpu",
    "installed",
    "taking",
    "long",
    "time",
    "training",
    "kick",
    "little",
    "bit",
    "weird",
    "honest",
    "normally",
    "take",
    "15",
    "10",
    "15",
    "seconds",
    "actually",
    "kick",
    "going",
    "going",
    "actually",
    "installed",
    "tensorflow",
    "going",
    "make",
    "sure",
    "got",
    "right",
    "versions",
    "tensorflow",
    "tensorflow",
    "gp",
    "installed",
    "install",
    "pip",
    "install",
    "tensorflow",
    "add",
    "going",
    "install",
    "tensorflow",
    "gpu",
    "well",
    "need",
    "tensorflow",
    "gpu",
    "leverage",
    "gpu",
    "run",
    "tensorflow",
    "dash",
    "gpu",
    "equals",
    "even",
    "though",
    "verification",
    "script",
    "fine",
    "still",
    "need",
    "tensorflow",
    "gpu",
    "fine",
    "run",
    "cpu",
    "leverage",
    "gpu",
    "need",
    "tensorflow",
    "dash",
    "gpu",
    "let",
    "go",
    "ahead",
    "install",
    "give",
    "couple",
    "moments",
    "install",
    "ideally",
    "see",
    "got",
    "tensorflow",
    "gpu",
    "installed",
    "kick",
    "training",
    "gpu",
    "set",
    "cuda",
    "cu",
    "dnn",
    "next",
    "thing",
    "check",
    "kicking",
    "gpu",
    "starting",
    "train",
    "relatively",
    "fast",
    "whether",
    "got",
    "tensorflow",
    "gpu",
    "installed",
    "going",
    "copy",
    "command",
    "see",
    "training",
    "kicks",
    "lot",
    "faster",
    "let",
    "clear",
    "paste",
    "let",
    "see",
    "long",
    "takes",
    "takes",
    "long",
    "time",
    "double",
    "check",
    "well",
    "whether",
    "got",
    "tensorflow",
    "gpu",
    "installed",
    "pretty",
    "normal",
    "outputs",
    "looking",
    "positive",
    "sort",
    "gets",
    "line",
    "might",
    "little",
    "bit",
    "different",
    "depending",
    "training",
    "use",
    "fn",
    "underscore",
    "output",
    "underscore",
    "signature",
    "instead",
    "normally",
    "means",
    "sort",
    "got",
    "next",
    "step",
    "ideally",
    "see",
    "loss",
    "metrics",
    "appear",
    "let",
    "wait",
    "see",
    "sort",
    "stalls",
    "restart",
    "go",
    "right",
    "cool",
    "looks",
    "like",
    "kicked",
    "see",
    "getting",
    "metrics",
    "basically",
    "every",
    "100",
    "steps",
    "going",
    "printed",
    "get",
    "step",
    "100",
    "per",
    "time",
    "get",
    "time",
    "per",
    "step",
    "case",
    "seconds",
    "also",
    "got",
    "loss",
    "case",
    "loss",
    "cast",
    "minds",
    "back",
    "evaluation",
    "set",
    "saying",
    "want",
    "loss",
    "low",
    "possible",
    "mean",
    "precision",
    "mean",
    "average",
    "precision",
    "well",
    "recall",
    "high",
    "possible",
    "case",
    "going",
    "let",
    "run",
    "ideally",
    "going",
    "see",
    "output",
    "every",
    "100",
    "steps",
    "case",
    "got",
    "first",
    "100",
    "steps",
    "also",
    "take",
    "look",
    "see",
    "got",
    "checkpoints",
    "starting",
    "generate",
    "well",
    "looking",
    "good",
    "going",
    "let",
    "run",
    "see",
    "go",
    "ideally",
    "remember",
    "kicked",
    "training",
    "2000",
    "steps",
    "training",
    "command",
    "right",
    "2000",
    "training",
    "steps",
    "ideally",
    "2000",
    "training",
    "steps",
    "fully",
    "trained",
    "model",
    "let",
    "let",
    "run",
    "come",
    "back",
    "take",
    "look",
    "detections",
    "model",
    "fully",
    "trained",
    "see",
    "got",
    "step",
    "2000",
    "final",
    "loss",
    "let",
    "bring",
    "side",
    "final",
    "loss",
    "also",
    "take",
    "look",
    "inside",
    "ssd",
    "mob",
    "net",
    "also",
    "see",
    "got",
    "checkpoints",
    "generated",
    "effectively",
    "gone",
    "trained",
    "model",
    "actually",
    "go",
    "evaluate",
    "remember",
    "sort",
    "saying",
    "got",
    "mean",
    "precision",
    "metric",
    "got",
    "precision",
    "recall",
    "actually",
    "go",
    "calculate",
    "using",
    "tensorflow",
    "object",
    "detection",
    "library",
    "run",
    "evaluation",
    "script",
    "go",
    "run",
    "evaluation",
    "script",
    "model",
    "gone",
    "done",
    "step",
    "six",
    "model",
    "successfully",
    "trained",
    "take",
    "long",
    "take",
    "um",
    "seconds",
    "per",
    "step",
    "got",
    "pretty",
    "fast",
    "gpu",
    "go",
    "ahead",
    "evaluate",
    "go",
    "step",
    "7",
    "hit",
    "shift",
    "enter",
    "print",
    "command",
    "actually",
    "run",
    "one",
    "uh",
    "run",
    "using",
    "command",
    "prompt",
    "copy",
    "go",
    "paste",
    "command",
    "making",
    "sure",
    "inside",
    "virtual",
    "environment",
    "go",
    "paste",
    "hit",
    "enter",
    "actually",
    "going",
    "go",
    "ahead",
    "calculate",
    "performance",
    "metrics",
    "model",
    "currently",
    "got",
    "folder",
    "going",
    "go",
    "different",
    "lines",
    "write",
    "bunch",
    "stuff",
    "ideally",
    "see",
    "towards",
    "end",
    "get",
    "little",
    "table",
    "gives",
    "performance",
    "metrics",
    "go",
    "see",
    "getting",
    "average",
    "precision",
    "average",
    "recall",
    "get",
    "loss",
    "metrics",
    "well",
    "see",
    "got",
    "bunch",
    "loss",
    "metrics",
    "pay",
    "attention",
    "ones",
    "see",
    "average",
    "precision",
    "iu",
    "pay",
    "attention",
    "highest",
    "precision",
    "bad",
    "recall",
    "70",
    "bad",
    "given",
    "fact",
    "gave",
    "like",
    "five",
    "six",
    "images",
    "per",
    "class",
    "bad",
    "right",
    "also",
    "also",
    "open",
    "detection",
    "metrics",
    "well",
    "loss",
    "metrics",
    "using",
    "tensorboard",
    "worked",
    "tensorboard",
    "basically",
    "interactive",
    "monitoring",
    "tool",
    "comes",
    "well",
    "open",
    "source",
    "tensorflow",
    "order",
    "use",
    "step",
    "hitting",
    "control",
    "c",
    "inside",
    "ssd",
    "mob",
    "net",
    "folder",
    "got",
    "two",
    "folders",
    "really",
    "talked",
    "yet",
    "got",
    "train",
    "folder",
    "generated",
    "kick",
    "model",
    "training",
    "also",
    "got",
    "eval",
    "folder",
    "generated",
    "go",
    "run",
    "evaluation",
    "script",
    "effectively",
    "uh",
    "script",
    "script",
    "7",
    "evaluate",
    "model",
    "two",
    "folders",
    "going",
    "generated",
    "training",
    "evaluation",
    "actually",
    "actually",
    "step",
    "folders",
    "spin",
    "tensorboard",
    "let",
    "go",
    "ahead",
    "right",
    "root",
    "folder",
    "go",
    "tensorflow",
    "go",
    "workspace",
    "believe",
    "cd",
    "models",
    "want",
    "go",
    "ssd",
    "mob",
    "net",
    "folder",
    "probably",
    "going",
    "right",
    "corner",
    "cd",
    "st",
    "mob",
    "net",
    "going",
    "train",
    "folder",
    "eval",
    "folder",
    "go",
    "let",
    "train",
    "first",
    "train",
    "going",
    "open",
    "tensorboard",
    "inside",
    "train",
    "folder",
    "going",
    "get",
    "lost",
    "metrics",
    "open",
    "inside",
    "eval",
    "folder",
    "actually",
    "going",
    "get",
    "evaluation",
    "metrics",
    "let",
    "train",
    "folder",
    "cd",
    "train",
    "command",
    "want",
    "write",
    "order",
    "open",
    "tensboard",
    "tensorboard",
    "right",
    "bottom",
    "let",
    "clear",
    "first",
    "tensorboard",
    "dash",
    "log",
    "dear",
    "equals",
    "dot",
    "going",
    "open",
    "tensorboard",
    "current",
    "folder",
    "typed",
    "tensorboard",
    "wrong",
    "open",
    "tensorboard",
    "tensorboards",
    "installed",
    "install",
    "tensorflow",
    "go",
    "url",
    "localhost",
    "6006",
    "going",
    "open",
    "tensorboard",
    "see",
    "loss",
    "metrics",
    "see",
    "time",
    "loss",
    "reduced",
    "remember",
    "want",
    "loss",
    "lower",
    "loss",
    "reduced",
    "loss",
    "indicates",
    "performing",
    "better",
    "training",
    "data",
    "case",
    "see",
    "classification",
    "loss",
    "localization",
    "loss",
    "normalized",
    "loss",
    "sort",
    "want",
    "inverse",
    "hockey",
    "stick",
    "trend",
    "starting",
    "high",
    "dropping",
    "low",
    "well",
    "good",
    "probably",
    "interested",
    "evaluation",
    "metric",
    "sort",
    "navigate",
    "also",
    "see",
    "images",
    "gone",
    "use",
    "train",
    "images",
    "different",
    "samples",
    "adjust",
    "brightness",
    "viewing",
    "moment",
    "well",
    "right",
    "cool",
    "actually",
    "want",
    "take",
    "look",
    "evaluation",
    "metric",
    "step",
    "rather",
    "inside",
    "train",
    "folder",
    "go",
    "back",
    "go",
    "eval",
    "folder",
    "remember",
    "folder",
    "run",
    "tensorboard",
    "going",
    "give",
    "us",
    "slightly",
    "different",
    "view",
    "going",
    "run",
    "tensorboard",
    "dash",
    "dash",
    "log",
    "dr",
    "equals",
    "dot",
    "remember",
    "important",
    "represents",
    "current",
    "folder",
    "going",
    "open",
    "tensorboard",
    "start",
    "running",
    "url",
    "http",
    "localhost",
    "actually",
    "refresh",
    "see",
    "giving",
    "us",
    "evaluation",
    "metrics",
    "see",
    "mean",
    "average",
    "precision",
    "bottom",
    "little",
    "bit",
    "hard",
    "see",
    "metric",
    "precision",
    "close",
    "also",
    "got",
    "recall",
    "70",
    "metrics",
    "saw",
    "ran",
    "evaluation",
    "script",
    "also",
    "run",
    "every",
    "training",
    "run",
    "actually",
    "able",
    "see",
    "performance",
    "looks",
    "like",
    "time",
    "well",
    "got",
    "ability",
    "also",
    "view",
    "loss",
    "well",
    "gives",
    "testing",
    "loss",
    "particular",
    "sets",
    "data",
    "also",
    "view",
    "images",
    "sort",
    "gives",
    "idea",
    "performance",
    "see",
    "actually",
    "going",
    "look",
    "like",
    "comes",
    "actually",
    "go",
    "detect",
    "models",
    "looks",
    "like",
    "detecting",
    "pretty",
    "accurately",
    "thumbs",
    "thank",
    "live",
    "long",
    "one",
    "looks",
    "like",
    "gone",
    "little",
    "bit",
    "issue",
    "thank",
    "thumbs",
    "looks",
    "like",
    "performing",
    "right",
    "eve",
    "side",
    "side",
    "alright",
    "looks",
    "like",
    "got",
    "little",
    "crazy",
    "well",
    "right",
    "looks",
    "well",
    "good",
    "gives",
    "idea",
    "train",
    "evaluate",
    "model",
    "well",
    "note",
    "detecting",
    "objects",
    "first",
    "going",
    "going",
    "detect",
    "object",
    "detect",
    "object",
    "image",
    "particularly",
    "useful",
    "detecting",
    "cloud",
    "provider",
    "actually",
    "access",
    "sensor",
    "like",
    "webcam",
    "case",
    "microscope",
    "going",
    "detect",
    "using",
    "image",
    "also",
    "going",
    "detect",
    "real",
    "time",
    "able",
    "throw",
    "different",
    "symbols",
    "live",
    "long",
    "thumbs",
    "forth",
    "actually",
    "able",
    "see",
    "detections",
    "real",
    "time",
    "done",
    "last",
    "thing",
    "going",
    "freeze",
    "graph",
    "export",
    "let",
    "go",
    "ahead",
    "perform",
    "detections",
    "run",
    "last",
    "step",
    "going",
    "ahead",
    "freezing",
    "exporting",
    "graph",
    "obviously",
    "got",
    "projects",
    "performance",
    "tuning",
    "well",
    "let",
    "step",
    "back",
    "using",
    "notebook",
    "kill",
    "tensorboard",
    "instance",
    "use",
    "gpu",
    "actually",
    "load",
    "trained",
    "model",
    "checkpoint",
    "gone",
    "let",
    "quickly",
    "recap",
    "set",
    "paths",
    "step",
    "zero",
    "downloaded",
    "model",
    "install",
    "tensorflow",
    "object",
    "detection",
    "created",
    "label",
    "map",
    "remember",
    "set",
    "labels",
    "represent",
    "different",
    "objects",
    "want",
    "detect",
    "created",
    "tf",
    "records",
    "copied",
    "config",
    "set",
    "went",
    "trained",
    "model",
    "using",
    "command",
    "prompt",
    "evaluated",
    "well",
    "next",
    "thing",
    "going",
    "load",
    "model",
    "go",
    "model",
    "folder",
    "trained",
    "model",
    "folder",
    "ssd",
    "mob",
    "net",
    "folder",
    "remember",
    "go",
    "tfod",
    "tensorflow",
    "workspace",
    "models",
    "ssd",
    "mob",
    "net",
    "custom",
    "model",
    "right",
    "everything",
    "represents",
    "trained",
    "custom",
    "model",
    "wanted",
    "give",
    "someone",
    "else",
    "giving",
    "folder",
    "contains",
    "pipeline",
    "checkpoints",
    "latest",
    "checkpoint",
    "see",
    "checkpoint",
    "three",
    "trained",
    "model",
    "train",
    "longer",
    "ideally",
    "get",
    "checkpoints",
    "greater",
    "numbers",
    "well",
    "going",
    "going",
    "run",
    "particular",
    "cell",
    "import",
    "going",
    "change",
    "line",
    "see",
    "says",
    "checkpoint",
    "5",
    "checkpoint",
    "3",
    "latest",
    "checkpoint",
    "run",
    "set",
    "going",
    "import",
    "latest",
    "checkpoint",
    "actually",
    "detect",
    "image",
    "let",
    "go",
    "ahead",
    "import",
    "dependency",
    "step",
    "9",
    "set",
    "category",
    "index",
    "grab",
    "image",
    "let",
    "go",
    "workspace",
    "images",
    "grab",
    "test",
    "image",
    "let",
    "grab",
    "one",
    "going",
    "grab",
    "name",
    "image",
    "going",
    "replace",
    "right",
    "basically",
    "inside",
    "line",
    "step",
    "9",
    "got",
    "third",
    "cell",
    "image",
    "path",
    "equals",
    "basically",
    "resetting",
    "path",
    "image",
    "type",
    "image",
    "path",
    "right",
    "path",
    "particular",
    "test",
    "image",
    "go",
    "take",
    "look",
    "basically",
    "full",
    "file",
    "path",
    "tensorflow",
    "object",
    "detection",
    "tfod",
    "course",
    "tensorflow",
    "workspace",
    "images",
    "test",
    "tensorflow",
    "workspace",
    "images",
    "test",
    "particular",
    "image",
    "good",
    "go",
    "run",
    "cell",
    "actually",
    "going",
    "run",
    "object",
    "detection",
    "image",
    "print",
    "results",
    "see",
    "second",
    "let",
    "give",
    "sec",
    "go",
    "see",
    "right",
    "gone",
    "accurately",
    "detected",
    "particular",
    "symbol",
    "live",
    "long",
    "98",
    "confidence",
    "metric",
    "could",
    "different",
    "image",
    "wanted",
    "let",
    "grab",
    "another",
    "one",
    "let",
    "grab",
    "thank",
    "grab",
    "label",
    "grab",
    "image",
    "name",
    "replace",
    "run",
    "delete",
    "detected",
    "thank",
    "successfully",
    "let",
    "try",
    "another",
    "one",
    "thumbs",
    "changing",
    "part",
    "image",
    "images",
    "somewhere",
    "else",
    "could",
    "well",
    "since",
    "accurately",
    "detected",
    "thumbs",
    "86",
    "percent",
    "confidence",
    "greatest",
    "one",
    "thumbs",
    "thumbs",
    "one",
    "took",
    "new",
    "images",
    "well",
    "could",
    "performance",
    "tune",
    "let",
    "thumbs",
    "okay",
    "bad",
    "100",
    "thumbs",
    "gives",
    "idea",
    "images",
    "basically",
    "loading",
    "image",
    "python",
    "creating",
    "converting",
    "tensor",
    "running",
    "detection",
    "line",
    "actually",
    "using",
    "detection",
    "function",
    "imported",
    "going",
    "ahead",
    "making",
    "detections",
    "visualizing",
    "like",
    "see",
    "explain",
    "detail",
    "maybe",
    "even",
    "code",
    "scratch",
    "means",
    "leave",
    "mention",
    "comments",
    "love",
    "hear",
    "feedback",
    "okay",
    "detections",
    "great",
    "next",
    "thing",
    "actually",
    "want",
    "make",
    "detections",
    "webcam",
    "let",
    "go",
    "ahead",
    "run",
    "cell",
    "step",
    "going",
    "run",
    "cell",
    "pip",
    "uninstall",
    "opencv",
    "dash",
    "dash",
    "come",
    "back",
    "second",
    "normally",
    "resolution",
    "pretty",
    "common",
    "error",
    "let",
    "go",
    "ahead",
    "run",
    "capture",
    "see",
    "go",
    "looks",
    "like",
    "running",
    "okay",
    "looks",
    "like",
    "got",
    "feed",
    "got",
    "live",
    "long",
    "thumbs",
    "thumbs",
    "actually",
    "really",
    "really",
    "good",
    "considering",
    "trained",
    "2000",
    "steps",
    "whole",
    "heap",
    "images",
    "actually",
    "performing",
    "really",
    "well",
    "live",
    "long",
    "thumbs",
    "thumbs",
    "thank",
    "let",
    "see",
    "looks",
    "like",
    "green",
    "screen",
    "remember",
    "train",
    "live",
    "long",
    "still",
    "performing",
    "well",
    "thumbs",
    "thumbs",
    "thank",
    "joint",
    "thumbs",
    "thumbs",
    "performing",
    "best",
    "live",
    "long",
    "see",
    "maybe",
    "done",
    "many",
    "images",
    "trained",
    "let",
    "thumbs",
    "right",
    "see",
    "performance",
    "good",
    "try",
    "change",
    "use",
    "different",
    "hands",
    "okay",
    "maybe",
    "performing",
    "bad",
    "thumbs",
    "performing",
    "well",
    "particular",
    "hand",
    "might",
    "add",
    "additional",
    "images",
    "might",
    "add",
    "images",
    "hand",
    "performing",
    "reasonably",
    "well",
    "right",
    "like",
    "dual",
    "hand",
    "right",
    "bad",
    "thank",
    "performing",
    "okay",
    "live",
    "long",
    "live",
    "long",
    "hand",
    "yeah",
    "pretty",
    "cool",
    "sort",
    "gives",
    "idea",
    "possible",
    "right",
    "like",
    "really",
    "really",
    "quickly",
    "built",
    "object",
    "detection",
    "model",
    "able",
    "detect",
    "bunch",
    "stuff",
    "thumbs",
    "perfectly",
    "fine",
    "thumbs",
    "okay",
    "bad",
    "maybe",
    "needs",
    "little",
    "bit",
    "closer",
    "camera",
    "things",
    "could",
    "additionally",
    "train",
    "could",
    "add",
    "images",
    "closer",
    "camera",
    "could",
    "add",
    "images",
    "hand",
    "live",
    "long",
    "sort",
    "gives",
    "idea",
    "performance",
    "tune",
    "update",
    "model",
    "able",
    "perform",
    "better",
    "want",
    "quit",
    "need",
    "hit",
    "q",
    "going",
    "close",
    "sort",
    "gives",
    "idea",
    "possible",
    "object",
    "detection",
    "alrighty",
    "gone",
    "also",
    "made",
    "detections",
    "using",
    "image",
    "well",
    "using",
    "webcam",
    "also",
    "existing",
    "video",
    "feed",
    "existing",
    "video",
    "like",
    "see",
    "video",
    "means",
    "mention",
    "comments",
    "love",
    "hear",
    "feedback",
    "right",
    "brings",
    "us",
    "freezing",
    "conversion",
    "part",
    "five",
    "freezing",
    "conversion",
    "going",
    "freeze",
    "graph",
    "sort",
    "saying",
    "freezing",
    "graph",
    "equivalent",
    "saving",
    "slice",
    "model",
    "effectively",
    "saving",
    "use",
    "next",
    "time",
    "going",
    "freeze",
    "graph",
    "also",
    "going",
    "export",
    "wanted",
    "use",
    "later",
    "also",
    "going",
    "export",
    "tier",
    "flight",
    "eventually",
    "use",
    "raspberry",
    "pi",
    "project",
    "use",
    "tfjs",
    "export",
    "web",
    "app",
    "reasonably",
    "straightforward",
    "got",
    "step",
    "10",
    "11",
    "need",
    "run",
    "going",
    "freeze",
    "graph",
    "let",
    "go",
    "ahead",
    "run",
    "going",
    "copy",
    "command",
    "outside",
    "notebook",
    "probably",
    "easier",
    "run",
    "frozen",
    "graph",
    "going",
    "appear",
    "let",
    "make",
    "mouse",
    "work",
    "going",
    "appear",
    "inside",
    "export",
    "folder",
    "ideally",
    "get",
    "inside",
    "go",
    "back",
    "root",
    "tensorflow",
    "workspace",
    "models",
    "ssd",
    "mob",
    "net",
    "inside",
    "export",
    "folder",
    "going",
    "frozen",
    "graph",
    "made",
    "available",
    "let",
    "give",
    "second",
    "might",
    "take",
    "little",
    "bit",
    "time",
    "run",
    "looks",
    "like",
    "complete",
    "let",
    "check",
    "look",
    "like",
    "errors",
    "see",
    "got",
    "checkpoint",
    "saved",
    "model",
    "assets",
    "variables",
    "file",
    "remember",
    "correctly",
    "remember",
    "said",
    "going",
    "create",
    "similar",
    "output",
    "models",
    "see",
    "exact",
    "thing",
    "created",
    "slice",
    "custom",
    "model",
    "looks",
    "almost",
    "identical",
    "model",
    "based",
    "custom",
    "model",
    "got",
    "available",
    "inside",
    "export",
    "folders",
    "got",
    "checkpoint",
    "got",
    "save",
    "model",
    "got",
    "pipeline",
    "config",
    "mimic",
    "exactly",
    "custom",
    "one",
    "scroll",
    "currently",
    "still",
    "pointing",
    "file",
    "folders",
    "see",
    "got",
    "stuff",
    "custom",
    "built",
    "model",
    "right",
    "available",
    "used",
    "elsewhere",
    "could",
    "actually",
    "go",
    "convert",
    "exactly",
    "going",
    "could",
    "pass",
    "someone",
    "could",
    "pick",
    "use",
    "well",
    "next",
    "conversion",
    "going",
    "going",
    "export",
    "tfjs",
    "go",
    "run",
    "steps",
    "beneath",
    "step",
    "first",
    "going",
    "install",
    "converter",
    "converter",
    "going",
    "create",
    "command",
    "print",
    "going",
    "run",
    "ideally",
    "create",
    "file",
    "number",
    "bin",
    "folders",
    "going",
    "show",
    "use",
    "inside",
    "projects",
    "going",
    "convert",
    "able",
    "leverage",
    "later",
    "give",
    "couple",
    "minutes",
    "effectively",
    "converted",
    "model",
    "go",
    "see",
    "got",
    "bin",
    "files",
    "got",
    "different",
    "shards",
    "got",
    "file",
    "huge",
    "actually",
    "scroll",
    "represents",
    "entire",
    "deep",
    "learning",
    "model",
    "json",
    "format",
    "load",
    "react",
    "app",
    "app",
    "javascript",
    "written",
    "code",
    "need",
    "paste",
    "effectively",
    "represents",
    "full",
    "architecture",
    "weights",
    "everything",
    "actually",
    "pretty",
    "cool",
    "last",
    "conversion",
    "want",
    "conversion",
    "tf",
    "light",
    "sort",
    "deal",
    "except",
    "time",
    "rather",
    "exports",
    "export",
    "tfjs",
    "export",
    "going",
    "export",
    "tf",
    "lite",
    "export",
    "let",
    "go",
    "ahead",
    "run",
    "commands",
    "tflight",
    "conversion",
    "takes",
    "two",
    "parts",
    "first",
    "convert",
    "export",
    "tf",
    "like",
    "graph",
    "using",
    "command",
    "go",
    "actually",
    "run",
    "using",
    "tf",
    "lite",
    "converter",
    "slightly",
    "separate",
    "app",
    "need",
    "worry",
    "much",
    "actually",
    "going",
    "convert",
    "output",
    "exactly",
    "output",
    "need",
    "able",
    "go",
    "leverage",
    "let",
    "let",
    "run",
    "brings",
    "us",
    "end",
    "model",
    "see",
    "gone",
    "converted",
    "still",
    "running",
    "second",
    "part",
    "let",
    "give",
    "sec",
    "perfect",
    "looks",
    "like",
    "gone",
    "effectively",
    "finished",
    "go",
    "tier",
    "flight",
    "export",
    "folder",
    "double",
    "click",
    "saved",
    "model",
    "got",
    "folder",
    "called",
    "tflight",
    "export",
    "brings",
    "us",
    "end",
    "conversion",
    "gone",
    "frozen",
    "graph",
    "exported",
    "tfjs",
    "exported",
    "tf",
    "lite",
    "also",
    "brings",
    "us",
    "sort",
    "end",
    "full",
    "actually",
    "working",
    "tensorflow",
    "object",
    "detection",
    "set",
    "stuff",
    "installed",
    "tensorflow",
    "object",
    "detection",
    "dependencies",
    "set",
    "virtual",
    "environment",
    "called",
    "tfod",
    "imported",
    "dependencies",
    "defined",
    "new",
    "images",
    "collect",
    "set",
    "folders",
    "captured",
    "images",
    "labeled",
    "went",
    "installs",
    "trained",
    "model",
    "evaluated",
    "detected",
    "image",
    "see",
    "also",
    "detected",
    "webcam",
    "saw",
    "using",
    "webcam",
    "feed",
    "went",
    "froze",
    "graph",
    "converted",
    "tfjs",
    "converted",
    "tf",
    "lite",
    "full",
    "end",
    "end",
    "walkthrough",
    "work",
    "tensorflow",
    "object",
    "detection",
    "api",
    "going",
    "get",
    "started",
    "performance",
    "tuning",
    "say",
    "model",
    "actually",
    "perform",
    "well",
    "go",
    "well",
    "really",
    "performance",
    "tuning",
    "comes",
    "normally",
    "three",
    "key",
    "things",
    "improve",
    "performance",
    "existing",
    "model",
    "first",
    "thing",
    "adding",
    "images",
    "low",
    "performing",
    "class",
    "training",
    "data",
    "set",
    "saw",
    "thumbs",
    "thumbs",
    "live",
    "long",
    "thank",
    "sometimes",
    "getting",
    "greatest",
    "detections",
    "one",
    "easiest",
    "ways",
    "fix",
    "take",
    "green",
    "screen",
    "take",
    "images",
    "different",
    "positions",
    "using",
    "different",
    "hands",
    "going",
    "give",
    "model",
    "better",
    "chance",
    "generalize",
    "people",
    "talk",
    "model",
    "generalizing",
    "really",
    "able",
    "perform",
    "well",
    "real",
    "world",
    "situations",
    "second",
    "thing",
    "train",
    "model",
    "longer",
    "saw",
    "generated",
    "training",
    "command",
    "2",
    "000",
    "steps",
    "actually",
    "clear",
    "training",
    "folder",
    "bump",
    "little",
    "bit",
    "say",
    "example",
    "train",
    "3000",
    "steps",
    "gives",
    "model",
    "better",
    "chance",
    "reducing",
    "loss",
    "generalizing",
    "performing",
    "better",
    "overall",
    "last",
    "thing",
    "also",
    "change",
    "model",
    "architecture",
    "talked",
    "little",
    "bit",
    "tensorflow",
    "model",
    "zoo",
    "saw",
    "using",
    "320",
    "320",
    "model",
    "actually",
    "take",
    "look",
    "using",
    "model",
    "ssd",
    "mobile",
    "net",
    "v2",
    "fpm",
    "light",
    "320",
    "320",
    "speed",
    "22",
    "milliseconds",
    "per",
    "frame",
    "average",
    "accuracy",
    "could",
    "also",
    "upgrade",
    "use",
    "slightly",
    "advanced",
    "model",
    "going",
    "performance",
    "might",
    "slower",
    "model",
    "might",
    "make",
    "better",
    "detection",
    "say",
    "example",
    "use",
    "model",
    "case",
    "takes",
    "39",
    "milliseconds",
    "per",
    "frame",
    "also",
    "better",
    "accuracy",
    "metric",
    "could",
    "well",
    "going",
    "going",
    "add",
    "techniques",
    "existing",
    "model",
    "add",
    "images",
    "different",
    "classes",
    "case",
    "know",
    "thumbs",
    "thumbs",
    "detections",
    "working",
    "well",
    "add",
    "images",
    "also",
    "train",
    "model",
    "longer",
    "bump",
    "3000",
    "get",
    "time",
    "change",
    "architecture",
    "show",
    "looks",
    "like",
    "effectively",
    "really",
    "creating",
    "entire",
    "new",
    "model",
    "nice",
    "thing",
    "jupyter",
    "notebook",
    "sort",
    "set",
    "plug",
    "new",
    "url",
    "allow",
    "create",
    "entirely",
    "new",
    "model",
    "build",
    "using",
    "new",
    "architecture",
    "alrighty",
    "first",
    "things",
    "first",
    "adding",
    "images",
    "low",
    "performing",
    "classes",
    "training",
    "set",
    "going",
    "add",
    "images",
    "thumbs",
    "thumbs",
    "green",
    "screen",
    "see",
    "performance",
    "looks",
    "like",
    "go",
    "back",
    "notebook",
    "remember",
    "got",
    "image",
    "collection",
    "notebook",
    "training",
    "detection",
    "notebook",
    "let",
    "check",
    "zoomed",
    "good",
    "going",
    "rather",
    "collect",
    "images",
    "every",
    "single",
    "class",
    "going",
    "collect",
    "images",
    "thumbs",
    "thumbs",
    "get",
    "rid",
    "thank",
    "live",
    "long",
    "way",
    "label",
    "ton",
    "stuff",
    "right",
    "classes",
    "seem",
    "perform",
    "well",
    "particularly",
    "different",
    "hands",
    "right",
    "switching",
    "actually",
    "performing",
    "great",
    "grab",
    "images",
    "label",
    "add",
    "uh",
    "let",
    "add",
    "six",
    "got",
    "even",
    "number",
    "three",
    "hand",
    "position",
    "okay",
    "going",
    "import",
    "make",
    "sure",
    "inside",
    "virtual",
    "environment",
    "see",
    "inside",
    "tensorflow",
    "object",
    "detection",
    "virtual",
    "environment",
    "created",
    "import",
    "opencv",
    "import",
    "dependencies",
    "update",
    "label",
    "map",
    "let",
    "look",
    "thumbs",
    "thumbs",
    "thank",
    "live",
    "long",
    "going",
    "remove",
    "stuff",
    "need",
    "thank",
    "live",
    "long",
    "remove",
    "change",
    "number",
    "images",
    "want",
    "collect",
    "rather",
    "collecting",
    "five",
    "going",
    "collect",
    "six",
    "three",
    "run",
    "take",
    "look",
    "labels",
    "collecting",
    "thumbs",
    "thumbs",
    "actually",
    "output",
    "particular",
    "images",
    "going",
    "inside",
    "images",
    "part",
    "go",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "remember",
    "going",
    "appear",
    "inside",
    "folders",
    "live",
    "long",
    "thank",
    "thumbs",
    "thumbs",
    "going",
    "add",
    "additional",
    "images",
    "live",
    "long",
    "thank",
    "thumbs",
    "thumbs",
    "let",
    "go",
    "ahead",
    "set",
    "folders",
    "already",
    "got",
    "folders",
    "created",
    "step",
    "going",
    "break",
    "anything",
    "run",
    "image",
    "capture",
    "changed",
    "testing",
    "going",
    "set",
    "back",
    "zero",
    "going",
    "going",
    "capturing",
    "images",
    "different",
    "positions",
    "step",
    "back",
    "take",
    "images",
    "um",
    "might",
    "take",
    "green",
    "screen",
    "might",
    "evaluate",
    "see",
    "goes",
    "hit",
    "shift",
    "enter",
    "ideally",
    "see",
    "little",
    "python",
    "pop",
    "towards",
    "bottom",
    "remember",
    "sleeps",
    "little",
    "opens",
    "going",
    "thumbs",
    "cool",
    "right",
    "hand",
    "oh",
    "screen",
    "going",
    "thumbs",
    "three",
    "screen",
    "looks",
    "like",
    "sucky",
    "images",
    "let",
    "go",
    "take",
    "look",
    "collected",
    "got",
    "feeling",
    "going",
    "screen",
    "go",
    "tense",
    "flow",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "remember",
    "collected",
    "thumbs",
    "thumbs",
    "go",
    "looks",
    "like",
    "images",
    "left",
    "testing",
    "let",
    "delete",
    "look",
    "okay",
    "thumbs",
    "thumbs",
    "one",
    "look",
    "good",
    "let",
    "make",
    "little",
    "bit",
    "bigger",
    "see",
    "even",
    "object",
    "screen",
    "detect",
    "delete",
    "one",
    "delete",
    "one",
    "looks",
    "fine",
    "looks",
    "fine",
    "ideally",
    "could",
    "probably",
    "get",
    "better",
    "detections",
    "side",
    "right",
    "look",
    "like",
    "captured",
    "ones",
    "probably",
    "little",
    "bit",
    "slow",
    "let",
    "uh",
    "see",
    "one",
    "happy",
    "one",
    "happy",
    "one",
    "okay",
    "let",
    "delete",
    "one",
    "going",
    "grab",
    "three",
    "thumbs",
    "ideally",
    "hand",
    "okay",
    "let",
    "go",
    "thumbs",
    "images",
    "testing",
    "okay",
    "poor",
    "image",
    "class",
    "right",
    "little",
    "bit",
    "dark",
    "right",
    "little",
    "bit",
    "dark",
    "fine",
    "fine",
    "well",
    "even",
    "though",
    "look",
    "little",
    "sleepy",
    "okay",
    "one",
    "two",
    "right",
    "gon",
    "na",
    "add",
    "couple",
    "images",
    "sort",
    "evaluate",
    "actually",
    "want",
    "keep",
    "let",
    "couple",
    "need",
    "run",
    "excel",
    "four",
    "capture",
    "images",
    "going",
    "capture",
    "images",
    "run",
    "thumbs",
    "one",
    "switch",
    "going",
    "thumbs",
    "keep",
    "going",
    "screen",
    "come",
    "nick",
    "okay",
    "let",
    "look",
    "got",
    "right",
    "got",
    "thumbs",
    "kind",
    "good",
    "see",
    "little",
    "bit",
    "dark",
    "mean",
    "might",
    "good",
    "chance",
    "give",
    "model",
    "general",
    "might",
    "give",
    "model",
    "additional",
    "data",
    "generalize",
    "fine",
    "okay",
    "fine",
    "fine",
    "fine",
    "looking",
    "better",
    "okay",
    "think",
    "good",
    "thumbs",
    "looks",
    "like",
    "gon",
    "na",
    "11",
    "new",
    "images",
    "going",
    "thumbs",
    "let",
    "take",
    "look",
    "got",
    "fine",
    "going",
    "get",
    "rid",
    "one",
    "screen",
    "one",
    "screen",
    "okay",
    "cool",
    "got",
    "bunch",
    "new",
    "images",
    "going",
    "going",
    "go",
    "ahead",
    "label",
    "remember",
    "went",
    "labeled",
    "need",
    "go",
    "step",
    "5",
    "image",
    "labeling",
    "going",
    "open",
    "label",
    "image",
    "able",
    "label",
    "images",
    "gone",
    "installed",
    "already",
    "actually",
    "need",
    "run",
    "every",
    "single",
    "cell",
    "ones",
    "pip",
    "saw",
    "pip",
    "list",
    "couple",
    "installation",
    "everything",
    "cells",
    "see",
    "really",
    "insulation",
    "need",
    "run",
    "one",
    "actually",
    "going",
    "open",
    "label",
    "image",
    "already",
    "run",
    "installation",
    "good",
    "need",
    "go",
    "ahead",
    "install",
    "run",
    "cell",
    "oh",
    "need",
    "define",
    "label",
    "image",
    "path",
    "let",
    "run",
    "cell",
    "see",
    "saying",
    "system",
    "find",
    "path",
    "specified",
    "asking",
    "open",
    "label",
    "image",
    "path",
    "defined",
    "yet",
    "cell",
    "run",
    "label",
    "image",
    "path",
    "allow",
    "open",
    "open",
    "label",
    "image",
    "platform",
    "open",
    "see",
    "open",
    "going",
    "per",
    "usual",
    "going",
    "go",
    "ahead",
    "label",
    "images",
    "w",
    "thumbs",
    "remember",
    "case",
    "sensitive",
    "thumbs",
    "need",
    "save",
    "go",
    "next",
    "one",
    "thumbs",
    "save",
    "comes",
    "save",
    "see",
    "got",
    "varying",
    "images",
    "right",
    "got",
    "hands",
    "covered",
    "better",
    "chance",
    "model",
    "perform",
    "better",
    "lot",
    "time",
    "trial",
    "error",
    "got",
    "evaluate",
    "see",
    "going",
    "make",
    "model",
    "perform",
    "better",
    "normally",
    "first",
    "step",
    "go",
    "ahead",
    "add",
    "images",
    "classes",
    "happy",
    "one",
    "bit",
    "shocker",
    "image",
    "wait",
    "see",
    "okay",
    "next",
    "one",
    "thumbs",
    "cool",
    "open",
    "next",
    "directory",
    "thumbs",
    "go",
    "ones",
    "manner",
    "changing",
    "label",
    "name",
    "paying",
    "attention",
    "whether",
    "case",
    "paying",
    "attention",
    "case",
    "sensitive",
    "adjust",
    "need",
    "saving",
    "go",
    "next",
    "one",
    "save",
    "go",
    "next",
    "one",
    "save",
    "next",
    "one",
    "keep",
    "going",
    "got",
    "images",
    "labeled",
    "something",
    "could",
    "start",
    "looking",
    "uh",
    "auto",
    "labeling",
    "tools",
    "obviously",
    "improve",
    "efficiency",
    "also",
    "pay",
    "attention",
    "pay",
    "attention",
    "start",
    "using",
    "tools",
    "performance",
    "auto",
    "labeled",
    "images",
    "sometimes",
    "even",
    "though",
    "use",
    "auto",
    "labeled",
    "auto",
    "labeling",
    "tool",
    "still",
    "need",
    "go",
    "bit",
    "manual",
    "review",
    "something",
    "could",
    "potentially",
    "improve",
    "quickly",
    "able",
    "label",
    "images",
    "going",
    "finish",
    "rest",
    "save",
    "next",
    "one",
    "okay",
    "cool",
    "done",
    "remember",
    "whenever",
    "labeling",
    "new",
    "images",
    "need",
    "copy",
    "training",
    "test",
    "folder",
    "real",
    "change",
    "going",
    "copy",
    "majority",
    "let",
    "go",
    "looks",
    "like",
    "got",
    "good",
    "mix",
    "let",
    "copy",
    "going",
    "put",
    "training",
    "folder",
    "going",
    "go",
    "back",
    "collected",
    "images",
    "go",
    "thumbs",
    "thing",
    "let",
    "grab",
    "looks",
    "okay",
    "remember",
    "need",
    "grab",
    "annotation",
    "well",
    "image",
    "gon",
    "na",
    "bad",
    "time",
    "going",
    "grab",
    "still",
    "bunch",
    "thumbs",
    "cut",
    "copied",
    "go",
    "delete",
    "copy",
    "last",
    "couple",
    "going",
    "paste",
    "rest",
    "inside",
    "testing",
    "folder",
    "remember",
    "going",
    "paste",
    "rest",
    "testing",
    "folder",
    "right",
    "added",
    "images",
    "classes",
    "confident",
    "thought",
    "pasted",
    "already",
    "ef7",
    "let",
    "cut",
    "okay",
    "right",
    "go",
    "collected",
    "images",
    "folder",
    "thumbs",
    "already",
    "thumbs",
    "cool",
    "right",
    "well",
    "good",
    "gone",
    "added",
    "images",
    "testing",
    "folder",
    "images",
    "training",
    "folder",
    "going",
    "retrain",
    "effectively",
    "going",
    "using",
    "training",
    "detection",
    "notebook",
    "also",
    "stop",
    "label",
    "image",
    "hit",
    "stop",
    "going",
    "close",
    "close",
    "well",
    "right",
    "got",
    "images",
    "collected",
    "next",
    "thing",
    "need",
    "go",
    "ahead",
    "train",
    "model",
    "order",
    "zoomed",
    "quite",
    "fair",
    "bit",
    "let",
    "go",
    "order",
    "going",
    "go",
    "back",
    "training",
    "detection",
    "notebook",
    "really",
    "going",
    "change",
    "one",
    "thing",
    "namely",
    "going",
    "change",
    "custom",
    "model",
    "name",
    "built",
    "first",
    "baseline",
    "model",
    "actually",
    "named",
    "underscore",
    "ssd",
    "underscore",
    "mob",
    "net",
    "going",
    "call",
    "slightly",
    "different",
    "going",
    "add",
    "underscore",
    "tuned",
    "going",
    "give",
    "us",
    "new",
    "folder",
    "step",
    "going",
    "create",
    "new",
    "folder",
    "see",
    "got",
    "underscore",
    "ssd",
    "underscore",
    "mob",
    "net",
    "underscore",
    "tuned",
    "got",
    "separate",
    "folder",
    "going",
    "contain",
    "tuned",
    "model",
    "keep",
    "going",
    "effectively",
    "going",
    "give",
    "us",
    "ability",
    "go",
    "ahead",
    "train",
    "tuned",
    "model",
    "skip",
    "entire",
    "step",
    "entirely",
    "need",
    "download",
    "new",
    "models",
    "reinstall",
    "tensorflow",
    "object",
    "detection",
    "done",
    "gone",
    "pane",
    "done",
    "dusted",
    "label",
    "map",
    "run",
    "really",
    "got",
    "label",
    "line",
    "available",
    "going",
    "create",
    "tf",
    "records",
    "going",
    "create",
    "new",
    "tf",
    "records",
    "need",
    "install",
    "oh",
    "hit",
    "install",
    "pi",
    "tz",
    "installed",
    "however",
    "going",
    "run",
    "generation",
    "remember",
    "going",
    "create",
    "test",
    "record",
    "train",
    "record",
    "run",
    "hopefully",
    "fingers",
    "crossed",
    "issues",
    "give",
    "us",
    "new",
    "tf",
    "records",
    "able",
    "go",
    "ahead",
    "train",
    "let",
    "let",
    "run",
    "looks",
    "like",
    "errors",
    "successfully",
    "created",
    "tf",
    "record",
    "file",
    "intense",
    "flow",
    "workspace",
    "annotations",
    "train",
    "record",
    "tensorflow",
    "workspace",
    "annotations",
    "good",
    "go",
    "next",
    "thing",
    "need",
    "copy",
    "pipeline",
    "config",
    "going",
    "copy",
    "pipeline",
    "config",
    "new",
    "tune",
    "model",
    "run",
    "inside",
    "ssd",
    "mob",
    "net",
    "tune",
    "folder",
    "got",
    "pipeline",
    "file",
    "hide",
    "need",
    "preview",
    "pane",
    "minimize",
    "little",
    "bit",
    "easier",
    "see",
    "got",
    "pipeline",
    "config",
    "file",
    "really",
    "need",
    "make",
    "updates",
    "per",
    "usual",
    "really",
    "filling",
    "inside",
    "pipeline",
    "config",
    "take",
    "look",
    "remember",
    "right",
    "bottom",
    "need",
    "configure",
    "paths",
    "got",
    "code",
    "going",
    "us",
    "going",
    "step",
    "going",
    "open",
    "pipeline",
    "config",
    "standard",
    "one",
    "keep",
    "stepping",
    "section",
    "probably",
    "one",
    "important",
    "actually",
    "updating",
    "pipeline",
    "config",
    "go",
    "run",
    "run",
    "run",
    "next",
    "cell",
    "open",
    "pipeline",
    "see",
    "going",
    "label",
    "map",
    "paths",
    "forth",
    "defined",
    "well",
    "good",
    "run",
    "training",
    "script",
    "sort",
    "pretty",
    "modular",
    "sort",
    "run",
    "ideally",
    "work",
    "one",
    "thing",
    "going",
    "change",
    "number",
    "training",
    "steps",
    "remember",
    "said",
    "things",
    "try",
    "adding",
    "images",
    "changing",
    "length",
    "training",
    "time",
    "bump",
    "increase",
    "3000",
    "run",
    "command",
    "try",
    "might",
    "want",
    "play",
    "around",
    "might",
    "want",
    "train",
    "longer",
    "train",
    "shorter",
    "amount",
    "time",
    "world",
    "euro",
    "stick",
    "lot",
    "experimental",
    "going",
    "copy",
    "going",
    "open",
    "new",
    "command",
    "prompt",
    "per",
    "usual",
    "going",
    "go",
    "virtual",
    "environment",
    "activate",
    "let",
    "go",
    "okay",
    "virtual",
    "environment",
    "see",
    "got",
    "tfod",
    "activate",
    "remember",
    "dot",
    "backslash",
    "tfod",
    "scripts",
    "activate",
    "virtual",
    "environment",
    "activated",
    "see",
    "paste",
    "training",
    "command",
    "let",
    "go",
    "ahead",
    "run",
    "ideally",
    "trained",
    "model",
    "come",
    "right",
    "okay",
    "3",
    "000",
    "steps",
    "training",
    "finally",
    "got",
    "final",
    "trained",
    "model",
    "loss",
    "keep",
    "mind",
    "images",
    "images",
    "different",
    "angles",
    "ideally",
    "want",
    "run",
    "valuation",
    "script",
    "see",
    "model",
    "actually",
    "performing",
    "remember",
    "last",
    "model",
    "believe",
    "mean",
    "average",
    "precision",
    "see",
    "model",
    "model",
    "performing",
    "like",
    "time",
    "evaluate",
    "model",
    "remember",
    "go",
    "run",
    "code",
    "step",
    "7",
    "hit",
    "enter",
    "going",
    "give",
    "us",
    "new",
    "evaluation",
    "code",
    "copy",
    "paste",
    "model",
    "command",
    "prompt",
    "ideally",
    "run",
    "evaluation",
    "pipeline",
    "take",
    "little",
    "ideally",
    "get",
    "evaluation",
    "metrics",
    "generated",
    "okay",
    "see",
    "got",
    "valuation",
    "metrics",
    "calculated",
    "looks",
    "like",
    "managed",
    "improve",
    "model",
    "see",
    "average",
    "precision",
    "bit",
    "reasonably",
    "large",
    "jump",
    "compared",
    "initially",
    "believe",
    "average",
    "recall",
    "something",
    "along",
    "lines",
    "way",
    "lower",
    "sevens",
    "sixes",
    "84",
    "80",
    "84",
    "range",
    "managed",
    "improve",
    "model",
    "generate",
    "better",
    "object",
    "detection",
    "model",
    "simply",
    "adding",
    "images",
    "um",
    "adding",
    "additional",
    "labels",
    "different",
    "positions",
    "ideally",
    "produced",
    "model",
    "generalize",
    "better",
    "actually",
    "well",
    "load",
    "new",
    "model",
    "trained",
    "longer",
    "going",
    "new",
    "checkpoint",
    "create",
    "let",
    "show",
    "go",
    "back",
    "directory",
    "youtube",
    "tensorflow",
    "object",
    "detection",
    "tfod",
    "course",
    "tensorflow",
    "workspace",
    "models",
    "remember",
    "baseline",
    "model",
    "initially",
    "trained",
    "trained",
    "tune",
    "model",
    "open",
    "see",
    "way",
    "checkpoint",
    "four",
    "latest",
    "model",
    "order",
    "load",
    "need",
    "change",
    "checkpoint",
    "going",
    "loading",
    "rather",
    "loading",
    "checkpoint",
    "three",
    "need",
    "load",
    "checkpoint",
    "four",
    "actually",
    "go",
    "run",
    "detections",
    "rather",
    "detecting",
    "image",
    "let",
    "jump",
    "straight",
    "detection",
    "effectively",
    "cell",
    "run",
    "effectively",
    "open",
    "webcam",
    "give",
    "us",
    "ability",
    "make",
    "detection",
    "let",
    "see",
    "actually",
    "performs",
    "okay",
    "got",
    "detection",
    "window",
    "thumbs",
    "thumbs",
    "thumbs",
    "thumbs",
    "right",
    "detecting",
    "live",
    "long",
    "let",
    "move",
    "little",
    "bit",
    "go",
    "way",
    "better",
    "right",
    "performing",
    "ridiculously",
    "quickly",
    "train",
    "longer",
    "trained",
    "images",
    "really",
    "faster",
    "right",
    "really",
    "really",
    "quick",
    "switching",
    "really",
    "fast",
    "long",
    "hands",
    "sort",
    "gives",
    "idea",
    "go",
    "performance",
    "tuning",
    "see",
    "quick",
    "pretty",
    "well",
    "awesome",
    "right",
    "cool",
    "next",
    "thing",
    "also",
    "order",
    "performance",
    "tune",
    "change",
    "architecture",
    "cast",
    "minds",
    "back",
    "sort",
    "talked",
    "little",
    "bit",
    "adding",
    "images",
    "training",
    "longer",
    "next",
    "thing",
    "also",
    "change",
    "architecture",
    "order",
    "really",
    "need",
    "particular",
    "code",
    "set",
    "got",
    "change",
    "link",
    "actually",
    "want",
    "use",
    "case",
    "using",
    "let",
    "zoom",
    "using",
    "320",
    "320",
    "model",
    "say",
    "example",
    "wanted",
    "use",
    "uh",
    "one",
    "nuances",
    "want",
    "tune",
    "really",
    "matter",
    "copying",
    "link",
    "address",
    "going",
    "back",
    "detection",
    "notebook",
    "changing",
    "model",
    "url",
    "actually",
    "run",
    "see",
    "updated",
    "url",
    "specific",
    "model",
    "need",
    "got",
    "need",
    "grab",
    "name",
    "see",
    "called",
    "ssd",
    "mobile",
    "v2",
    "fp",
    "light",
    "640",
    "640",
    "coco",
    "17",
    "underscore",
    "copy",
    "paste",
    "effectively",
    "going",
    "give",
    "us",
    "ability",
    "go",
    "grab",
    "new",
    "model",
    "run",
    "going",
    "download",
    "new",
    "model",
    "effectively",
    "walk",
    "us",
    "exact",
    "steps",
    "going",
    "go",
    "huge",
    "amount",
    "detail",
    "like",
    "see",
    "detailed",
    "video",
    "using",
    "different",
    "architectures",
    "means",
    "let",
    "know",
    "sort",
    "gives",
    "feel",
    "might",
    "go",
    "really",
    "grab",
    "new",
    "model",
    "link",
    "cell",
    "actually",
    "going",
    "go",
    "ahead",
    "download",
    "new",
    "model",
    "happen",
    "inside",
    "models",
    "folder",
    "workspace",
    "models",
    "get",
    "see",
    "already",
    "downloaded",
    "bunch",
    "different",
    "ones",
    "download",
    "new",
    "new",
    "model",
    "able",
    "use",
    "wraps",
    "performance",
    "tuning",
    "bunch",
    "stuff",
    "really",
    "need",
    "change",
    "model",
    "architecture",
    "order",
    "get",
    "better",
    "performance",
    "really",
    "image",
    "quality",
    "rubbish",
    "going",
    "equal",
    "rubbish",
    "quality",
    "going",
    "equal",
    "quality",
    "different",
    "styles",
    "images",
    "different",
    "images",
    "different",
    "qualities",
    "different",
    "images",
    "different",
    "angles",
    "well",
    "training",
    "longer",
    "often",
    "going",
    "sufficient",
    "producing",
    "better",
    "model",
    "brings",
    "us",
    "next",
    "part",
    "training",
    "collab",
    "order",
    "train",
    "collab",
    "go",
    "pretty",
    "much",
    "steps",
    "core",
    "difference",
    "need",
    "collected",
    "images",
    "already",
    "order",
    "able",
    "let",
    "go",
    "ahead",
    "jump",
    "onto",
    "collab",
    "start",
    "core",
    "thing",
    "saying",
    "order",
    "train",
    "collab",
    "need",
    "images",
    "makes",
    "life",
    "going",
    "make",
    "life",
    "bunch",
    "easier",
    "let",
    "go",
    "ahead",
    "easiest",
    "way",
    "get",
    "images",
    "collab",
    "inside",
    "image",
    "collection",
    "notebook",
    "right",
    "bottom",
    "code",
    "cell",
    "allows",
    "compress",
    "images",
    "archive",
    "actually",
    "run",
    "cell",
    "going",
    "compress",
    "images",
    "got",
    "go",
    "images",
    "folder",
    "workspace",
    "images",
    "going",
    "file",
    "called",
    "images",
    "training",
    "testing",
    "folder",
    "compressed",
    "archived",
    "actually",
    "jump",
    "colab",
    "case",
    "gone",
    "actually",
    "bring",
    "github",
    "file",
    "grab",
    "main",
    "github",
    "repository",
    "tfod",
    "course",
    "paste",
    "link",
    "really",
    "interested",
    "training",
    "detection",
    "notebook",
    "let",
    "grab",
    "nice",
    "thing",
    "notebook",
    "set",
    "sort",
    "walk",
    "notebook",
    "want",
    "deal",
    "installation",
    "steps",
    "stuff",
    "get",
    "us",
    "running",
    "codelab",
    "sort",
    "gives",
    "nice",
    "alternative",
    "core",
    "thing",
    "need",
    "go",
    "runtime",
    "change",
    "runtime",
    "type",
    "gpu",
    "case",
    "looks",
    "like",
    "already",
    "selected",
    "hit",
    "gpu",
    "hit",
    "save",
    "going",
    "step",
    "notebook",
    "going",
    "hit",
    "shift",
    "enter",
    "run",
    "anyway",
    "going",
    "start",
    "importing",
    "creating",
    "folder",
    "structure",
    "running",
    "first",
    "four",
    "cells",
    "folder",
    "structure",
    "created",
    "see",
    "tensorflow",
    "workspace",
    "annotations",
    "images",
    "one",
    "thing",
    "need",
    "upload",
    "files",
    "specifically",
    "images",
    "select",
    "images",
    "folder",
    "going",
    "upload",
    "images",
    "compressed",
    "going",
    "go",
    "archive",
    "tensorflow",
    "object",
    "detection",
    "tfod",
    "course",
    "tensorflow",
    "workspace",
    "images",
    "remember",
    "archive",
    "let",
    "upload",
    "got",
    "file",
    "copy",
    "images",
    "folder",
    "actually",
    "go",
    "rest",
    "notebook",
    "let",
    "hit",
    "shift",
    "enter",
    "keep",
    "going",
    "going",
    "clone",
    "tensorflow",
    "models",
    "repo",
    "give",
    "us",
    "files",
    "done",
    "go",
    "next",
    "cell",
    "installing",
    "tensorflow",
    "object",
    "detection",
    "take",
    "little",
    "keep",
    "mind",
    "installing",
    "dependencies",
    "able",
    "leverage",
    "tensorflow",
    "object",
    "detection",
    "looking",
    "promising",
    "moment",
    "looks",
    "like",
    "installed",
    "run",
    "verification",
    "script",
    "see",
    "good",
    "looking",
    "promising",
    "moment",
    "look",
    "like",
    "got",
    "errors",
    "whenever",
    "running",
    "verification",
    "script",
    "got",
    "ta",
    "check",
    "says",
    "okay",
    "case",
    "got",
    "clear",
    "looking",
    "fine",
    "test",
    "importing",
    "object",
    "detection",
    "issues",
    "good",
    "go",
    "right",
    "bring",
    "model",
    "pretty",
    "standard",
    "going",
    "give",
    "us",
    "model",
    "create",
    "label",
    "map",
    "create",
    "tf",
    "records",
    "going",
    "create",
    "tf",
    "record",
    "go",
    "annotations",
    "got",
    "test",
    "record",
    "train",
    "record",
    "created",
    "go",
    "copy",
    "pipeline",
    "config",
    "stepping",
    "notebook",
    "look",
    "like",
    "got",
    "errors",
    "far",
    "update",
    "config",
    "give",
    "us",
    "custom",
    "config",
    "inside",
    "models",
    "steam",
    "obnet",
    "folder",
    "see",
    "train",
    "model",
    "nice",
    "thing",
    "training",
    "colab",
    "run",
    "execute",
    "command",
    "cell",
    "see",
    "running",
    "command",
    "things",
    "holding",
    "equal",
    "without",
    "errors",
    "get",
    "model",
    "training",
    "kick",
    "key",
    "thing",
    "wo",
    "able",
    "perform",
    "object",
    "detection",
    "using",
    "webcam",
    "still",
    "using",
    "image",
    "test",
    "see",
    "looks",
    "like",
    "looking",
    "like",
    "running",
    "without",
    "issues",
    "need",
    "wait",
    "loss",
    "metrics",
    "show",
    "gives",
    "us",
    "good",
    "indication",
    "running",
    "successfully",
    "issues",
    "okay",
    "first",
    "loss",
    "metric",
    "appearing",
    "see",
    "got",
    "step",
    "100",
    "per",
    "step",
    "got",
    "loss",
    "metrics",
    "appearing",
    "good",
    "indication",
    "successful",
    "running",
    "collab",
    "let",
    "run",
    "come",
    "back",
    "evaluate",
    "model",
    "load",
    "checkpoint",
    "run",
    "detection",
    "image",
    "sort",
    "keep",
    "stepping",
    "wanted",
    "get",
    "phrasing",
    "conversion",
    "step",
    "grab",
    "actually",
    "zip",
    "export",
    "everything",
    "inside",
    "workspace",
    "folder",
    "wrote",
    "code",
    "could",
    "actually",
    "wanted",
    "grab",
    "everything",
    "could",
    "zip",
    "entire",
    "ssd",
    "mob",
    "net",
    "folder",
    "bring",
    "back",
    "desktop",
    "run",
    "well",
    "looks",
    "like",
    "running",
    "pretty",
    "successfully",
    "check",
    "ssd",
    "mob",
    "net",
    "folder",
    "see",
    "got",
    "checkpoint",
    "appearing",
    "got",
    "checkpoint",
    "one",
    "cool",
    "let",
    "let",
    "run",
    "right",
    "back",
    "okay",
    "model",
    "finish",
    "training",
    "see",
    "got",
    "step",
    "2000",
    "right",
    "final",
    "loss",
    "evaluate",
    "model",
    "well",
    "run",
    "cell",
    "ideally",
    "see",
    "mean",
    "average",
    "precision",
    "mean",
    "average",
    "recall",
    "well",
    "ideally",
    "pop",
    "got",
    "calculated",
    "really",
    "running",
    "code",
    "uh",
    "step",
    "seven",
    "evaluate",
    "model",
    "appear",
    "soon",
    "got",
    "detection",
    "metric",
    "accuracy",
    "evaluation",
    "metrics",
    "calculated",
    "similar",
    "inside",
    "command",
    "prompt",
    "inside",
    "cell",
    "inside",
    "colab",
    "looking",
    "promising",
    "found",
    "checkpoint",
    "three",
    "second",
    "looks",
    "like",
    "got",
    "detection",
    "metric",
    "model",
    "model",
    "right",
    "remember",
    "trained",
    "tuned",
    "model",
    "longer",
    "ran",
    "3000",
    "steps",
    "2000",
    "steps",
    "see",
    "average",
    "precision",
    "case",
    "average",
    "recall",
    "also",
    "detect",
    "model",
    "using",
    "image",
    "run",
    "cells",
    "load",
    "model",
    "case",
    "latest",
    "checkpoint",
    "checkpoint",
    "need",
    "change",
    "checkpoint",
    "checkpoint",
    "three",
    "line",
    "going",
    "load",
    "checkpoint3",
    "notebook",
    "actually",
    "leverage",
    "run",
    "cell",
    "oh",
    "actually",
    "need",
    "stop",
    "evaluation",
    "first",
    "able",
    "continue",
    "onwards",
    "detect",
    "image",
    "case",
    "going",
    "detecting",
    "image",
    "happened",
    "evaluation",
    "script",
    "going",
    "keep",
    "running",
    "keep",
    "looking",
    "new",
    "checkpoint",
    "actually",
    "need",
    "force",
    "stop",
    "order",
    "continue",
    "case",
    "hit",
    "stop",
    "get",
    "stop",
    "load",
    "checkpoint",
    "really",
    "changed",
    "file",
    "made",
    "sure",
    "pointing",
    "latest",
    "checkpoint",
    "case",
    "going",
    "3",
    "got",
    "run",
    "looking",
    "good",
    "detect",
    "image",
    "remember",
    "image",
    "name",
    "needs",
    "valid",
    "image",
    "inside",
    "images",
    "folder",
    "open",
    "images",
    "test",
    "see",
    "got",
    "let",
    "make",
    "sure",
    "actually",
    "got",
    "file",
    "uh",
    "livelong0253422",
    "let",
    "take",
    "look",
    "see",
    "whether",
    "got",
    "well",
    "easier",
    "yet",
    "copy",
    "name",
    "file",
    "let",
    "grab",
    "one",
    "need",
    "new",
    "code",
    "cell",
    "let",
    "paste",
    "name",
    "file",
    "need",
    "run",
    "two",
    "cells",
    "bring",
    "going",
    "bring",
    "dependencies",
    "going",
    "load",
    "category",
    "index",
    "baseline",
    "notebook",
    "run",
    "cell",
    "ideally",
    "able",
    "see",
    "detection",
    "going",
    "run",
    "using",
    "object",
    "detection",
    "model",
    "try",
    "make",
    "detection",
    "using",
    "particular",
    "image",
    "got",
    "perfect",
    "see",
    "fact",
    "detected",
    "live",
    "long",
    "see",
    "make",
    "image",
    "little",
    "bit",
    "bigger",
    "wanted",
    "um",
    "could",
    "try",
    "different",
    "image",
    "let",
    "try",
    "thumbs",
    "copy",
    "file",
    "name",
    "pasted",
    "make",
    "another",
    "detection",
    "thumbs",
    "fact",
    "detected",
    "looks",
    "see",
    "little",
    "bit",
    "sketchy",
    "little",
    "bit",
    "small",
    "see",
    "fact",
    "detected",
    "object",
    "gives",
    "idea",
    "train",
    "collab",
    "wanted",
    "convert",
    "export",
    "actually",
    "got",
    "code",
    "export",
    "run",
    "cell",
    "zip",
    "export",
    "files",
    "wanted",
    "could",
    "load",
    "google",
    "drive",
    "well",
    "export",
    "bring",
    "back",
    "locally",
    "run",
    "locally",
    "wanted",
    "keep",
    "mind",
    "want",
    "run",
    "locally",
    "need",
    "install",
    "object",
    "detection",
    "api",
    "available",
    "locally",
    "wraps",
    "training",
    "colab",
    "really",
    "wraps",
    "part",
    "seven",
    "course",
    "next",
    "part",
    "going",
    "going",
    "projects",
    "specifically",
    "three",
    "projects",
    "going",
    "go",
    "reasonably",
    "quickly",
    "sort",
    "gives",
    "idea",
    "potentially",
    "take",
    "object",
    "detection",
    "technology",
    "might",
    "give",
    "ideas",
    "apply",
    "real",
    "life",
    "first",
    "project",
    "going",
    "take",
    "look",
    "use",
    "different",
    "types",
    "sensors",
    "specifically",
    "microscope",
    "able",
    "use",
    "perform",
    "object",
    "detection",
    "give",
    "try",
    "noticed",
    "get",
    "close",
    "object",
    "wait",
    "see",
    "take",
    "look",
    "performance",
    "take",
    "look",
    "building",
    "web",
    "app",
    "able",
    "leverage",
    "existing",
    "code",
    "base",
    "able",
    "repurpose",
    "able",
    "build",
    "app",
    "show",
    "get",
    "code",
    "last",
    "least",
    "export",
    "model",
    "able",
    "perform",
    "uh",
    "raspberry",
    "pi",
    "sentiment",
    "trying",
    "detect",
    "one",
    "class",
    "whether",
    "happy",
    "case",
    "going",
    "going",
    "three",
    "projects",
    "starting",
    "microscope",
    "defect",
    "detection",
    "web",
    "app",
    "directions",
    "last",
    "least",
    "raspberry",
    "pi",
    "sentiment",
    "okay",
    "going",
    "jump",
    "back",
    "notebooks",
    "close",
    "collab",
    "close",
    "let",
    "restart",
    "notebook",
    "going",
    "shut",
    "things",
    "start",
    "say",
    "example",
    "starting",
    "microscope",
    "defect",
    "detection",
    "particular",
    "microscope",
    "actually",
    "working",
    "usb",
    "microscope",
    "see",
    "right",
    "link",
    "description",
    "want",
    "test",
    "take",
    "look",
    "think",
    "another",
    "camera",
    "right",
    "using",
    "webcam",
    "able",
    "perform",
    "object",
    "detection",
    "could",
    "easily",
    "use",
    "different",
    "sensor",
    "say",
    "example",
    "better",
    "high",
    "resolution",
    "webcam",
    "slightly",
    "different",
    "webcam",
    "could",
    "definitely",
    "use",
    "well",
    "specifically",
    "going",
    "trying",
    "train",
    "model",
    "detect",
    "defects",
    "little",
    "leds",
    "really",
    "really",
    "small",
    "might",
    "little",
    "bit",
    "difficult",
    "see",
    "um",
    "see",
    "green",
    "led",
    "got",
    "bent",
    "pin",
    "one",
    "still",
    "green",
    "led",
    "one",
    "bent",
    "pin",
    "got",
    "red",
    "one",
    "well",
    "could",
    "stuff",
    "like",
    "printed",
    "circuit",
    "board",
    "could",
    "try",
    "well",
    "let",
    "going",
    "plug",
    "usb",
    "microscope",
    "take",
    "look",
    "looks",
    "like",
    "need",
    "get",
    "focus",
    "little",
    "bit",
    "going",
    "write",
    "code",
    "able",
    "see",
    "output",
    "webcam",
    "first",
    "commit",
    "actually",
    "collecting",
    "images",
    "going",
    "going",
    "close",
    "notebooks",
    "sort",
    "going",
    "start",
    "scratch",
    "still",
    "going",
    "working",
    "within",
    "environment",
    "already",
    "created",
    "gone",
    "much",
    "effort",
    "set",
    "got",
    "virtual",
    "environment",
    "got",
    "dependencies",
    "installed",
    "well",
    "first",
    "going",
    "start",
    "opening",
    "image",
    "collection",
    "notebook",
    "going",
    "create",
    "new",
    "section",
    "capture",
    "images",
    "call",
    "uh",
    "know",
    "going",
    "create",
    "new",
    "markdown",
    "section",
    "going",
    "say",
    "uh",
    "testing",
    "microscope",
    "position",
    "ning",
    "cool",
    "convert",
    "markdown",
    "cell",
    "going",
    "import",
    "opencv",
    "dependency",
    "sort",
    "leave",
    "actually",
    "probably",
    "put",
    "let",
    "put",
    "make",
    "going",
    "try",
    "going",
    "try",
    "read",
    "usb",
    "microscope",
    "able",
    "least",
    "get",
    "feed",
    "position",
    "try",
    "get",
    "zooms",
    "appropriately",
    "see",
    "looks",
    "like",
    "never",
    "tested",
    "wanted",
    "see",
    "whether",
    "possible",
    "results",
    "look",
    "like",
    "looks",
    "like",
    "object",
    "detection",
    "different",
    "types",
    "sensors",
    "okay",
    "first",
    "thing",
    "going",
    "imported",
    "dependencies",
    "image",
    "collection",
    "notebook",
    "going",
    "try",
    "read",
    "feed",
    "particular",
    "microscope",
    "order",
    "first",
    "need",
    "get",
    "feed",
    "going",
    "call",
    "create",
    "new",
    "variable",
    "called",
    "cap",
    "equals",
    "capture",
    "going",
    "try",
    "sensor",
    "0",
    "first",
    "remember",
    "different",
    "line",
    "grabbing",
    "video",
    "capture",
    "capture",
    "device",
    "going",
    "include",
    "loop",
    "cap",
    "opened",
    "checking",
    "capture",
    "device",
    "feed",
    "still",
    "available",
    "actually",
    "set",
    "capture",
    "right",
    "type",
    "going",
    "read",
    "feed",
    "microscope",
    "extract",
    "two",
    "variables",
    "get",
    "type",
    "red",
    "comma",
    "frame",
    "different",
    "capturing",
    "images",
    "webcam",
    "different",
    "gestures",
    "case",
    "going",
    "trying",
    "detect",
    "two",
    "different",
    "classes",
    "either",
    "bent",
    "pin",
    "bent",
    "pin",
    "ideally",
    "want",
    "position",
    "microscope",
    "appropriately",
    "first",
    "played",
    "around",
    "yesterday",
    "little",
    "bit",
    "temperamental",
    "terms",
    "focusing",
    "let",
    "position",
    "first",
    "get",
    "uh",
    "right",
    "spot",
    "going",
    "write",
    "ret",
    "comma",
    "frame",
    "cap",
    "dot",
    "read",
    "need",
    "show",
    "feed",
    "type",
    "cv2",
    "dot",
    "show",
    "name",
    "name",
    "frame",
    "going",
    "call",
    "microscope",
    "feed",
    "going",
    "display",
    "frame",
    "frame",
    "actually",
    "get",
    "back",
    "actually",
    "image",
    "right",
    "image",
    "microscope",
    "give",
    "us",
    "feed",
    "copy",
    "little",
    "bit",
    "um",
    "four",
    "lines",
    "code",
    "let",
    "actually",
    "explain",
    "sec",
    "right",
    "four",
    "lines",
    "code",
    "basically",
    "gives",
    "us",
    "ability",
    "sort",
    "quit",
    "feed",
    "close",
    "little",
    "python",
    "window",
    "best",
    "practice",
    "allows",
    "us",
    "release",
    "capture",
    "device",
    "destroy",
    "opencv",
    "windows",
    "ideally",
    "want",
    "run",
    "close",
    "cv2",
    "web",
    "capture",
    "sometimes",
    "might",
    "get",
    "sensor",
    "hung",
    "say",
    "example",
    "wo",
    "detect",
    "images",
    "anymore",
    "might",
    "sort",
    "freeze",
    "running",
    "two",
    "lines",
    "normally",
    "resolves",
    "bunch",
    "problems",
    "let",
    "go",
    "ahead",
    "test",
    "case",
    "let",
    "double",
    "check",
    "written",
    "getting",
    "capture",
    "cap",
    "equals",
    "capture",
    "testing",
    "device",
    "one",
    "looping",
    "captcha",
    "opened",
    "grab",
    "read",
    "frame",
    "show",
    "back",
    "us",
    "try",
    "break",
    "break",
    "let",
    "run",
    "see",
    "happens",
    "okay",
    "getting",
    "uh",
    "let",
    "try",
    "another",
    "capture",
    "device",
    "okay",
    "looking",
    "positive",
    "right",
    "looks",
    "good",
    "change",
    "video",
    "capture",
    "devices",
    "capture",
    "device",
    "zero",
    "probably",
    "current",
    "webcam",
    "actually",
    "streaming",
    "might",
    "need",
    "change",
    "right",
    "looks",
    "kind",
    "weird",
    "actually",
    "seeing",
    "anything",
    "microscope",
    "feed",
    "got",
    "currently",
    "pointed",
    "piece",
    "paper",
    "move",
    "around",
    "right",
    "let",
    "move",
    "currently",
    "see",
    "like",
    "one",
    "leds",
    "bring",
    "focus",
    "little",
    "bit",
    "nope",
    "way",
    "right",
    "cool",
    "got",
    "one",
    "leds",
    "actually",
    "appearing",
    "move",
    "around",
    "currently",
    "see",
    "got",
    "actually",
    "appearing",
    "got",
    "bent",
    "pin",
    "see",
    "definitely",
    "broken",
    "obviously",
    "going",
    "work",
    "try",
    "plug",
    "try",
    "putting",
    "another",
    "led",
    "case",
    "got",
    "one",
    "actually",
    "working",
    "right",
    "sort",
    "see",
    "sort",
    "going",
    "path",
    "right",
    "rather",
    "particular",
    "gesture",
    "based",
    "detection",
    "time",
    "actually",
    "going",
    "using",
    "slightly",
    "different",
    "feed",
    "still",
    "grabbing",
    "pictures",
    "camera",
    "case",
    "sort",
    "good",
    "got",
    "got",
    "position",
    "based",
    "sheet",
    "paper",
    "white",
    "background",
    "ideally",
    "allow",
    "us",
    "see",
    "little",
    "bit",
    "better",
    "actually",
    "want",
    "collect",
    "images",
    "uh",
    "different",
    "pins",
    "whether",
    "broken",
    "going",
    "put",
    "back",
    "position",
    "rolling",
    "away",
    "go",
    "let",
    "bring",
    "little",
    "bit",
    "closer",
    "go",
    "nope",
    "still",
    "wants",
    "roll",
    "okay",
    "going",
    "hold",
    "stay",
    "okay",
    "need",
    "actually",
    "collect",
    "bunch",
    "images",
    "particular",
    "led",
    "bring",
    "back",
    "frame",
    "kept",
    "position",
    "right",
    "pins",
    "pins",
    "fine",
    "need",
    "collect",
    "bunch",
    "images",
    "different",
    "styles",
    "pins",
    "probably",
    "going",
    "little",
    "bit",
    "finicky",
    "need",
    "obviously",
    "get",
    "right",
    "position",
    "order",
    "get",
    "photos",
    "appropriate",
    "test",
    "okay",
    "got",
    "webcam",
    "position",
    "appropriate",
    "microscope",
    "positioned",
    "appropriately",
    "quit",
    "using",
    "q",
    "probably",
    "need",
    "particular",
    "project",
    "collect",
    "images",
    "two",
    "particular",
    "classes",
    "really",
    "bent",
    "pin",
    "pin",
    "going",
    "create",
    "two",
    "different",
    "image",
    "types",
    "bent",
    "pin",
    "know",
    "call",
    "one",
    "okay",
    "pin",
    "actually",
    "call",
    "defective",
    "defective",
    "pin",
    "non",
    "effective",
    "pin",
    "going",
    "collect",
    "two",
    "different",
    "classes",
    "time",
    "defective",
    "pin",
    "pin",
    "try",
    "know",
    "five",
    "images",
    "give",
    "crack",
    "going",
    "create",
    "two",
    "new",
    "sets",
    "images",
    "go",
    "run",
    "setup",
    "folders",
    "delete",
    "left",
    "going",
    "create",
    "new",
    "folders",
    "new",
    "image",
    "classes",
    "go",
    "images",
    "got",
    "folder",
    "defective",
    "pin",
    "pin",
    "actually",
    "delete",
    "old",
    "ones",
    "live",
    "long",
    "thank",
    "thumbs",
    "thumbs",
    "need",
    "anymore",
    "cleaned",
    "also",
    "probably",
    "need",
    "clean",
    "inside",
    "test",
    "folder",
    "need",
    "anymore",
    "new",
    "project",
    "going",
    "collect",
    "images",
    "defective",
    "pins",
    "pins",
    "got",
    "folders",
    "created",
    "go",
    "captcha",
    "going",
    "test",
    "video",
    "capture",
    "device",
    "one",
    "device",
    "grab",
    "able",
    "grab",
    "images",
    "pins",
    "let",
    "run",
    "see",
    "go",
    "okay",
    "getting",
    "frame",
    "bring",
    "back",
    "okay",
    "got",
    "probably",
    "need",
    "run",
    "right",
    "got",
    "picture",
    "pin",
    "let",
    "stop",
    "go",
    "back",
    "collected",
    "images",
    "okay",
    "pins",
    "want",
    "delete",
    "fine",
    "effectively",
    "images",
    "defective",
    "going",
    "put",
    "images",
    "defective",
    "pin",
    "first",
    "let",
    "double",
    "check",
    "got",
    "feed",
    "right",
    "okay",
    "looking",
    "fine",
    "let",
    "actually",
    "position",
    "way",
    "right",
    "looks",
    "okay",
    "making",
    "sure",
    "get",
    "frame",
    "appropriately",
    "okay",
    "looking",
    "good",
    "let",
    "try",
    "bring",
    "little",
    "bit",
    "looks",
    "good",
    "trick",
    "move",
    "paper",
    "actual",
    "pin",
    "okay",
    "mastery",
    "last",
    "okay",
    "going",
    "collect",
    "images",
    "defective",
    "pin",
    "let",
    "one",
    "time",
    "actually",
    "pause",
    "going",
    "red",
    "one",
    "wo",
    "bother",
    "green",
    "ones",
    "let",
    "defective",
    "pin",
    "oh",
    "need",
    "stop",
    "cell",
    "well",
    "jump",
    "back",
    "hit",
    "q",
    "going",
    "close",
    "okay",
    "going",
    "collect",
    "images",
    "defective",
    "pin",
    "going",
    "move",
    "around",
    "slightly",
    "probably",
    "increase",
    "time",
    "want",
    "sleep",
    "frames",
    "let",
    "give",
    "us",
    "little",
    "bit",
    "time",
    "three",
    "seconds",
    "line",
    "see",
    "reads",
    "time",
    "dot",
    "sleep",
    "long",
    "actually",
    "sleep",
    "image",
    "capture",
    "right",
    "set",
    "three",
    "seconds",
    "run",
    "let",
    "wait",
    "frame",
    "pop",
    "right",
    "positioned",
    "ideally",
    "getting",
    "appropriate",
    "images",
    "already",
    "cool",
    "right",
    "move",
    "slightly",
    "okay",
    "done",
    "got",
    "images",
    "defective",
    "pin",
    "let",
    "pin",
    "remember",
    "collecting",
    "whole",
    "bunch",
    "images",
    "interesting",
    "see",
    "performance",
    "looks",
    "like",
    "let",
    "position",
    "run",
    "cell",
    "added",
    "new",
    "cell",
    "looks",
    "like",
    "typo",
    "let",
    "run",
    "okay",
    "want",
    "position",
    "okay",
    "looking",
    "okay",
    "right",
    "let",
    "try",
    "okay",
    "quit",
    "hitting",
    "q",
    "holding",
    "sheet",
    "paper",
    "collecting",
    "need",
    "type",
    "going",
    "pin",
    "collecting",
    "set",
    "label",
    "run",
    "going",
    "collect",
    "images",
    "pin",
    "led",
    "could",
    "whole",
    "bunch",
    "different",
    "use",
    "cases",
    "right",
    "leds",
    "specific",
    "components",
    "going",
    "move",
    "slightly",
    "time",
    "okay",
    "cool",
    "let",
    "take",
    "look",
    "images",
    "right",
    "got",
    "defective",
    "pins",
    "uh",
    "let",
    "show",
    "preview",
    "pane",
    "got",
    "defective",
    "pins",
    "go",
    "pins",
    "looks",
    "like",
    "got",
    "pins",
    "cool",
    "going",
    "go",
    "process",
    "going",
    "label",
    "images",
    "got",
    "installed",
    "going",
    "run",
    "labeling",
    "line",
    "one",
    "open",
    "label",
    "image",
    "let",
    "run",
    "need",
    "set",
    "label",
    "image",
    "path",
    "really",
    "bring",
    "got",
    "feedback",
    "code",
    "notebooks",
    "want",
    "clarification",
    "hit",
    "comments",
    "join",
    "discord",
    "server",
    "happy",
    "chat",
    "let",
    "open",
    "set",
    "label",
    "image",
    "path",
    "open",
    "label",
    "image",
    "get",
    "labeling",
    "going",
    "open",
    "directory",
    "going",
    "go",
    "images",
    "case",
    "workspace",
    "images",
    "folder",
    "collected",
    "images",
    "defective",
    "pin",
    "going",
    "hit",
    "w",
    "let",
    "bit",
    "bit",
    "yeah",
    "let",
    "going",
    "say",
    "defective",
    "pin",
    "right",
    "going",
    "save",
    "save",
    "hitting",
    "w",
    "labeling",
    "one",
    "finicky",
    "probably",
    "would",
    "done",
    "bunch",
    "different",
    "positions",
    "microscope",
    "super",
    "sensitive",
    "wait",
    "see",
    "performance",
    "looks",
    "like",
    "going",
    "label",
    "hit",
    "save",
    "right",
    "going",
    "open",
    "directory",
    "process",
    "using",
    "different",
    "sensor",
    "going",
    "pretty",
    "consistent",
    "projects",
    "going",
    "label",
    "pin",
    "save",
    "pay",
    "attention",
    "labels",
    "per",
    "usual",
    "important",
    "got",
    "feeling",
    "model",
    "wo",
    "generalized",
    "much",
    "possible",
    "right",
    "got",
    "pins",
    "one",
    "direction",
    "see",
    "looks",
    "like",
    "always",
    "go",
    "performance",
    "tuning",
    "steps",
    "get",
    "perform",
    "better",
    "sort",
    "went",
    "add",
    "images",
    "different",
    "angles",
    "different",
    "positions",
    "different",
    "lighting",
    "positions",
    "help",
    "okay",
    "images",
    "labeled",
    "go",
    "see",
    "saved",
    "got",
    "five",
    "class",
    "good",
    "go",
    "per",
    "usual",
    "going",
    "copy",
    "images",
    "training",
    "testing",
    "folders",
    "going",
    "grab",
    "majority",
    "leave",
    "one",
    "testing",
    "class",
    "going",
    "paste",
    "training",
    "folder",
    "go",
    "back",
    "images",
    "collected",
    "images",
    "pin",
    "leave",
    "one",
    "back",
    "last",
    "one",
    "going",
    "put",
    "testing",
    "folder",
    "cool",
    "right",
    "set",
    "got",
    "training",
    "images",
    "testing",
    "images",
    "training",
    "images",
    "uh",
    "able",
    "go",
    "training",
    "pipeline",
    "however",
    "going",
    "probably",
    "create",
    "new",
    "folder",
    "custom",
    "object",
    "detection",
    "model",
    "case",
    "project",
    "call",
    "pin",
    "detection",
    "something",
    "along",
    "lines",
    "opening",
    "training",
    "detection",
    "jupyter",
    "notebook",
    "last",
    "model",
    "ssd",
    "mob",
    "net",
    "tuned",
    "case",
    "going",
    "call",
    "microscope",
    "going",
    "leave",
    "everything",
    "pretty",
    "much",
    "want",
    "revert",
    "back",
    "models",
    "right",
    "custom",
    "model",
    "want",
    "use",
    "let",
    "grab",
    "link",
    "existing",
    "one",
    "going",
    "one",
    "copy",
    "link",
    "address",
    "going",
    "paste",
    "really",
    "sort",
    "making",
    "sure",
    "resetting",
    "back",
    "usual",
    "already",
    "got",
    "model",
    "downloaded",
    "need",
    "download",
    "could",
    "wanted",
    "right",
    "going",
    "import",
    "operating",
    "system",
    "set",
    "go",
    "paths",
    "create",
    "file",
    "paths",
    "create",
    "actual",
    "directories",
    "go",
    "see",
    "got",
    "folder",
    "microscope",
    "model",
    "going",
    "go",
    "rest",
    "skip",
    "step",
    "one",
    "need",
    "already",
    "set",
    "tensorflow",
    "object",
    "detection",
    "already",
    "cloned",
    "model",
    "cell",
    "need",
    "however",
    "update",
    "label",
    "map",
    "cast",
    "minds",
    "back",
    "set",
    "images",
    "go",
    "workspace",
    "images",
    "train",
    "need",
    "make",
    "sure",
    "get",
    "appropriate",
    "label",
    "going",
    "defective",
    "pin",
    "name",
    "sorry",
    "got",
    "open",
    "actual",
    "annotation",
    "pin",
    "going",
    "update",
    "labels",
    "whole",
    "code",
    "base",
    "really",
    "really",
    "general",
    "purpose",
    "could",
    "bunch",
    "stuff",
    "going",
    "rename",
    "labels",
    "defective",
    "pin",
    "step",
    "two",
    "label",
    "map",
    "first",
    "line",
    "probably",
    "talked",
    "ago",
    "first",
    "line",
    "sets",
    "labels",
    "creates",
    "label",
    "map",
    "tensorflow",
    "object",
    "detection",
    "api",
    "needs",
    "actually",
    "actually",
    "train",
    "going",
    "set",
    "next",
    "label",
    "pin",
    "go",
    "open",
    "actual",
    "label",
    "map",
    "inside",
    "tensorflow",
    "workspace",
    "annotations",
    "let",
    "open",
    "see",
    "got",
    "one",
    "class",
    "defective",
    "pin",
    "one",
    "class",
    "pin",
    "good",
    "go",
    "want",
    "going",
    "create",
    "tf",
    "record",
    "need",
    "run",
    "cell",
    "unarchives",
    "images",
    "inside",
    "colab",
    "running",
    "collab",
    "good",
    "go",
    "need",
    "run",
    "cell",
    "actually",
    "clones",
    "generate",
    "tf",
    "records",
    "group",
    "bring",
    "really",
    "good",
    "already",
    "going",
    "clone",
    "got",
    "conditional",
    "statement",
    "going",
    "prevent",
    "happening",
    "need",
    "run",
    "cell",
    "cell",
    "creates",
    "tf",
    "records",
    "remember",
    "tf",
    "records",
    "allow",
    "us",
    "actually",
    "train",
    "model",
    "tensorflow",
    "object",
    "detection",
    "api",
    "uses",
    "run",
    "fingers",
    "cross",
    "effectively",
    "create",
    "tf",
    "records",
    "looks",
    "like",
    "issues",
    "going",
    "copy",
    "model",
    "config",
    "training",
    "folder",
    "remember",
    "created",
    "new",
    "training",
    "folder",
    "called",
    "microscope",
    "run",
    "able",
    "go",
    "microscope",
    "folder",
    "models",
    "microscope",
    "see",
    "got",
    "pipeline",
    "need",
    "update",
    "config",
    "baseline",
    "make",
    "updates",
    "reload",
    "cool",
    "thing",
    "right",
    "actually",
    "reload",
    "config",
    "running",
    "cell",
    "config",
    "underscore",
    "util",
    "dot",
    "get",
    "configs",
    "underscore",
    "pipeline",
    "file",
    "specifically",
    "going",
    "load",
    "another",
    "thing",
    "thought",
    "like",
    "actually",
    "see",
    "write",
    "code",
    "scratch",
    "please",
    "let",
    "know",
    "think",
    "huge",
    "tutorial",
    "think",
    "would",
    "useful",
    "able",
    "learn",
    "actually",
    "love",
    "hear",
    "thoughts",
    "well",
    "maybe",
    "live",
    "stream",
    "case",
    "looking",
    "good",
    "reset",
    "classes",
    "scroll",
    "reset",
    "label",
    "map",
    "file",
    "let",
    "go",
    "ahead",
    "train",
    "model",
    "going",
    "generate",
    "training",
    "script",
    "step",
    "six",
    "gives",
    "us",
    "year",
    "probably",
    "need",
    "train",
    "3000",
    "steps",
    "let",
    "regular",
    "2000",
    "copy",
    "new",
    "command",
    "prompt",
    "folder",
    "stick",
    "inside",
    "folder",
    "youtube",
    "tensorflow",
    "object",
    "detection",
    "tfod",
    "course",
    "folder",
    "got",
    "environment",
    "activated",
    "able",
    "paste",
    "kick",
    "training",
    "kick",
    "right",
    "back",
    "soon",
    "done",
    "alrighty",
    "microscope",
    "object",
    "detection",
    "model",
    "finished",
    "training",
    "ideally",
    "end",
    "goal",
    "load",
    "able",
    "detect",
    "bent",
    "pin",
    "effectively",
    "defective",
    "pin",
    "pin",
    "interested",
    "see",
    "goes",
    "never",
    "tried",
    "would",
    "really",
    "really",
    "interesting",
    "let",
    "go",
    "ahead",
    "make",
    "sure",
    "gpu",
    "fully",
    "released",
    "sometimes",
    "throw",
    "whole",
    "bunch",
    "issues",
    "inside",
    "microscope",
    "folder",
    "see",
    "checkpoint",
    "little",
    "bit",
    "usual",
    "load",
    "checkpoint",
    "four",
    "looking",
    "good",
    "let",
    "quickly",
    "give",
    "recap",
    "notebook",
    "step",
    "zero",
    "sets",
    "path",
    "step",
    "one",
    "ideally",
    "point",
    "one",
    "going",
    "download",
    "models",
    "tensorflow",
    "models",
    "install",
    "tensorflow",
    "step",
    "two",
    "create",
    "label",
    "maps",
    "different",
    "labels",
    "step",
    "three",
    "creates",
    "tens",
    "flow",
    "records",
    "four",
    "copies",
    "model",
    "config",
    "custom",
    "model",
    "config",
    "folder",
    "custom",
    "model",
    "folder",
    "step",
    "five",
    "updates",
    "config",
    "step",
    "six",
    "trains",
    "copy",
    "command",
    "step",
    "seven",
    "goes",
    "evaluates",
    "model",
    "purely",
    "optional",
    "step",
    "seven",
    "step",
    "eight",
    "actually",
    "initially",
    "load",
    "checkpoint",
    "get",
    "checkpoints",
    "checkpoint",
    "four",
    "wanted",
    "call",
    "change",
    "number",
    "detect",
    "use",
    "older",
    "model",
    "use",
    "newer",
    "model",
    "sort",
    "worlds",
    "eyes",
    "step",
    "nine",
    "detecting",
    "image",
    "step",
    "10",
    "detect",
    "webcam",
    "step",
    "10",
    "11",
    "12",
    "going",
    "exporting",
    "freezing",
    "step",
    "13",
    "zip",
    "export",
    "sort",
    "wanted",
    "drive",
    "point",
    "home",
    "logical",
    "sequence",
    "run",
    "step",
    "eight",
    "going",
    "run",
    "import",
    "cell",
    "see",
    "load",
    "checkpoint",
    "set",
    "checkpoint4",
    "detect",
    "image",
    "let",
    "try",
    "detecting",
    "image",
    "first",
    "mess",
    "around",
    "actual",
    "actual",
    "microscope",
    "going",
    "grab",
    "name",
    "image",
    "test",
    "folder",
    "grab",
    "defective",
    "pin",
    "going",
    "grab",
    "name",
    "image",
    "paste",
    "right",
    "grabbed",
    "particular",
    "image",
    "grabbed",
    "name",
    "particular",
    "file",
    "overridden",
    "cell",
    "basically",
    "pointing",
    "image",
    "actually",
    "updating",
    "run",
    "import",
    "set",
    "category",
    "index",
    "take",
    "look",
    "category",
    "index",
    "probably",
    "talked",
    "much",
    "another",
    "representation",
    "label",
    "map",
    "close",
    "bring",
    "image",
    "ideally",
    "fingers",
    "crossed",
    "able",
    "detect",
    "whether",
    "defective",
    "defective",
    "actually",
    "running",
    "cell",
    "detect",
    "oh",
    "god",
    "actually",
    "detected",
    "cool",
    "see",
    "actually",
    "detected",
    "fact",
    "defective",
    "pin",
    "probably",
    "gim",
    "mean",
    "sort",
    "position",
    "really",
    "really",
    "cool",
    "possible",
    "um",
    "opens",
    "whole",
    "wide",
    "range",
    "opportunity",
    "right",
    "like",
    "use",
    "different",
    "types",
    "sensors",
    "scan",
    "different",
    "types",
    "things",
    "let",
    "grab",
    "another",
    "image",
    "um",
    "one",
    "inside",
    "test",
    "pin",
    "let",
    "see",
    "works",
    "going",
    "update",
    "name",
    "image",
    "pin",
    "run",
    "oh",
    "detected",
    "pin",
    "super",
    "confidence",
    "bigger",
    "test",
    "however",
    "detect",
    "try",
    "real",
    "time",
    "see",
    "actually",
    "performs",
    "video",
    "capture",
    "zero",
    "think",
    "actually",
    "need",
    "go",
    "video",
    "capture",
    "one",
    "let",
    "test",
    "see",
    "opens",
    "looking",
    "like",
    "working",
    "pretty",
    "cool",
    "detecting",
    "pin",
    "even",
    "switch",
    "way",
    "still",
    "going",
    "pretty",
    "okay",
    "sweet",
    "right",
    "coming",
    "little",
    "microscope",
    "showed",
    "defective",
    "one",
    "let",
    "bring",
    "frame",
    "look",
    "uh",
    "sort",
    "concern",
    "defective",
    "pin",
    "particular",
    "position",
    "see",
    "definitely",
    "performing",
    "well",
    "defective",
    "pin",
    "sort",
    "get",
    "idea",
    "right",
    "possible",
    "obviously",
    "gon",
    "na",
    "pick",
    "like",
    "defective",
    "pin",
    "least",
    "images",
    "okay",
    "actually",
    "picking",
    "wait",
    "picking",
    "different",
    "color",
    "wonder",
    "lighting",
    "well",
    "playing",
    "around",
    "defective",
    "pins",
    "stuff",
    "okay",
    "trying",
    "get",
    "center",
    "go",
    "okay",
    "little",
    "actually",
    "actually",
    "good",
    "point",
    "time",
    "actually",
    "show",
    "something",
    "quit",
    "detection",
    "frame",
    "actually",
    "bunch",
    "parameters",
    "choose",
    "tune",
    "two",
    "going",
    "get",
    "place",
    "pay",
    "attention",
    "two",
    "lines",
    "max",
    "boxes",
    "draw",
    "minimum",
    "score",
    "threshold",
    "define",
    "level",
    "quality",
    "detections",
    "actually",
    "going",
    "show",
    "right",
    "got",
    "set",
    "reasonably",
    "high",
    "right",
    "going",
    "show",
    "anything",
    "detection",
    "accuracy",
    "less",
    "80",
    "case",
    "able",
    "pick",
    "defective",
    "pin",
    "might",
    "might",
    "relax",
    "constraint",
    "little",
    "bit",
    "drop",
    "40",
    "example",
    "run",
    "okay",
    "see",
    "obviously",
    "getting",
    "whole",
    "bunch",
    "detections",
    "sort",
    "happens",
    "right",
    "bit",
    "whether",
    "going",
    "able",
    "want",
    "show",
    "everything",
    "versus",
    "show",
    "everything",
    "case",
    "see",
    "getting",
    "60",
    "might",
    "drop",
    "much",
    "four",
    "let",
    "drop",
    "60",
    "try",
    "okay",
    "getting",
    "anything",
    "right",
    "see",
    "detecting",
    "defective",
    "pin",
    "reasonably",
    "well",
    "interesting",
    "actually",
    "bend",
    "still",
    "detecting",
    "defective",
    "pin",
    "bend",
    "interesting",
    "green",
    "one",
    "let",
    "try",
    "red",
    "one",
    "keep",
    "mind",
    "train",
    "green",
    "image",
    "green",
    "pin",
    "led",
    "rolling",
    "away",
    "pin",
    "let",
    "try",
    "another",
    "green",
    "one",
    "keep",
    "mind",
    "train",
    "trained",
    "angle",
    "right",
    "going",
    "obviously",
    "skewed",
    "put",
    "angle",
    "whatever",
    "reason",
    "thinks",
    "pin",
    "straight",
    "away",
    "change",
    "way",
    "see",
    "getting",
    "lower",
    "accuracy",
    "detections",
    "whatever",
    "detecting",
    "thumb",
    "defective",
    "pin",
    "pretty",
    "cool",
    "right",
    "like",
    "start",
    "see",
    "possible",
    "bring",
    "frame",
    "oh",
    "detecting",
    "fingers",
    "pretty",
    "cool",
    "let",
    "throw",
    "bunch",
    "defective",
    "sort",
    "overlapping",
    "right",
    "let",
    "move",
    "spread",
    "little",
    "getting",
    "red",
    "one",
    "appropriate",
    "went",
    "green",
    "one",
    "saying",
    "defective",
    "might",
    "indication",
    "need",
    "train",
    "little",
    "bit",
    "right",
    "spin",
    "around",
    "okay",
    "see",
    "angle",
    "detecting",
    "defective",
    "might",
    "indication",
    "need",
    "give",
    "couple",
    "different",
    "angles",
    "let",
    "try",
    "saying",
    "really",
    "defective",
    "reduce",
    "number",
    "boxes",
    "also",
    "going",
    "draw",
    "well",
    "case",
    "drawing",
    "bunch",
    "change",
    "parameter",
    "hopefully",
    "losing",
    "napkins",
    "let",
    "move",
    "around",
    "pretty",
    "cool",
    "right",
    "shows",
    "possible",
    "bunch",
    "different",
    "types",
    "sensors",
    "could",
    "train",
    "could",
    "performance",
    "tune",
    "could",
    "get",
    "better",
    "sort",
    "summarizes",
    "project",
    "number",
    "one",
    "able",
    "use",
    "different",
    "types",
    "sensors",
    "object",
    "detection",
    "quickly",
    "summarize",
    "went",
    "image",
    "collection",
    "notebook",
    "repositioned",
    "microscopes",
    "wrote",
    "custom",
    "code",
    "able",
    "make",
    "sure",
    "get",
    "microscope",
    "positioned",
    "appropriately",
    "defined",
    "images",
    "wanted",
    "collect",
    "set",
    "new",
    "folders",
    "captured",
    "images",
    "labeled",
    "using",
    "label",
    "image",
    "pretty",
    "standard",
    "process",
    "always",
    "going",
    "capture",
    "images",
    "label",
    "objects",
    "train",
    "training",
    "sort",
    "went",
    "pretty",
    "standard",
    "anything",
    "crazy",
    "created",
    "new",
    "folder",
    "called",
    "microscope",
    "means",
    "microscope",
    "stuff",
    "going",
    "stored",
    "inside",
    "folder",
    "called",
    "microscope",
    "new",
    "projects",
    "going",
    "create",
    "new",
    "folder",
    "next",
    "couple",
    "projects",
    "going",
    "create",
    "another",
    "folder",
    "build",
    "brings",
    "us",
    "project",
    "number",
    "two",
    "case",
    "next",
    "model",
    "going",
    "web",
    "app",
    "direction",
    "ideally",
    "going",
    "try",
    "build",
    "object",
    "detection",
    "model",
    "allows",
    "us",
    "detect",
    "left",
    "right",
    "use",
    "little",
    "bit",
    "conversion",
    "code",
    "export",
    "going",
    "show",
    "actually",
    "create",
    "web",
    "app",
    "like",
    "see",
    "screen",
    "actually",
    "running",
    "browser",
    "moment",
    "let",
    "go",
    "back",
    "jupiter",
    "notebook",
    "going",
    "start",
    "per",
    "usual",
    "sort",
    "sort",
    "wanted",
    "drive",
    "home",
    "whenever",
    "regardless",
    "building",
    "sort",
    "begun",
    "sort",
    "going",
    "going",
    "process",
    "going",
    "collect",
    "images",
    "going",
    "label",
    "going",
    "whatever",
    "exporting",
    "want",
    "going",
    "run",
    "detection",
    "going",
    "go",
    "back",
    "image",
    "collection",
    "code",
    "already",
    "got",
    "imports",
    "done",
    "need",
    "retest",
    "actually",
    "probably",
    "retest",
    "see",
    "gone",
    "unplugged",
    "microscope",
    "plugged",
    "webcam",
    "let",
    "see",
    "working",
    "okay",
    "look",
    "like",
    "happy",
    "let",
    "try",
    "video",
    "capture",
    "device",
    "one",
    "plugged",
    "looks",
    "like",
    "okay",
    "right",
    "cool",
    "webcam",
    "change",
    "video",
    "capture",
    "device",
    "back",
    "video",
    "capture",
    "device",
    "one",
    "move",
    "way",
    "fine",
    "move",
    "way",
    "looks",
    "like",
    "front",
    "camera",
    "going",
    "particular",
    "model",
    "going",
    "detecting",
    "let",
    "get",
    "back",
    "front",
    "mic",
    "going",
    "detecting",
    "left",
    "right",
    "ideally",
    "able",
    "detect",
    "inside",
    "web",
    "app",
    "beauty",
    "web",
    "app",
    "could",
    "go",
    "deploy",
    "website",
    "later",
    "users",
    "able",
    "actually",
    "use",
    "going",
    "take",
    "little",
    "bit",
    "javascript",
    "skill",
    "whole",
    "heap",
    "also",
    "going",
    "need",
    "upload",
    "files",
    "going",
    "walk",
    "code",
    "actually",
    "available",
    "inside",
    "github",
    "repository",
    "going",
    "combining",
    "code",
    "tensorflow",
    "object",
    "detection",
    "course",
    "code",
    "tensorflow",
    "object",
    "detection",
    "app",
    "github",
    "repository",
    "able",
    "load",
    "let",
    "go",
    "ahead",
    "going",
    "quit",
    "got",
    "right",
    "feed",
    "going",
    "change",
    "video",
    "capture",
    "device",
    "back",
    "zero",
    "make",
    "sure",
    "got",
    "right",
    "camera",
    "need",
    "collect",
    "images",
    "left",
    "right",
    "going",
    "set",
    "reset",
    "label",
    "left",
    "right",
    "okay",
    "rather",
    "collecting",
    "thumbs",
    "thumbs",
    "live",
    "long",
    "whatever",
    "even",
    "defective",
    "pins",
    "going",
    "defining",
    "direction",
    "left",
    "right",
    "try",
    "different",
    "hands",
    "whatnot",
    "run",
    "particular",
    "cell",
    "test",
    "labels",
    "know",
    "deleted",
    "see",
    "got",
    "correct",
    "labels",
    "left",
    "right",
    "going",
    "set",
    "folders",
    "go",
    "images",
    "delete",
    "everything",
    "go",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "got",
    "defective",
    "pin",
    "get",
    "rid",
    "need",
    "anymore",
    "going",
    "create",
    "folders",
    "left",
    "right",
    "run",
    "steps",
    "step",
    "three",
    "create",
    "left",
    "right",
    "folders",
    "capture",
    "images",
    "per",
    "usual",
    "probably",
    "need",
    "three",
    "seconds",
    "break",
    "change",
    "going",
    "point",
    "different",
    "directions",
    "capture",
    "different",
    "images",
    "labels",
    "let",
    "go",
    "ahead",
    "kick",
    "things",
    "going",
    "left",
    "right",
    "let",
    "get",
    "little",
    "pop",
    "going",
    "going",
    "left",
    "first",
    "use",
    "mouse",
    "lip",
    "right",
    "left",
    "hand",
    "okay",
    "left",
    "right",
    "move",
    "hand",
    "around",
    "probably",
    "collected",
    "different",
    "images",
    "collected",
    "left",
    "right",
    "covered",
    "face",
    "behind",
    "going",
    "move",
    "hand",
    "around",
    "right",
    "probably",
    "hands",
    "help",
    "generalize",
    "try",
    "use",
    "different",
    "hand",
    "oh",
    "dual",
    "hand",
    "cool",
    "right",
    "images",
    "collected",
    "go",
    "check",
    "gone",
    "youtube",
    "tensorflow",
    "object",
    "detection",
    "tfod",
    "course",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "got",
    "images",
    "inside",
    "left",
    "right",
    "looking",
    "good",
    "okay",
    "need",
    "label",
    "per",
    "usual",
    "need",
    "define",
    "label",
    "image",
    "path",
    "already",
    "need",
    "open",
    "label",
    "image",
    "keep",
    "mind",
    "already",
    "got",
    "installed",
    "going",
    "open",
    "going",
    "go",
    "image",
    "path",
    "image",
    "paths",
    "going",
    "start",
    "labeling",
    "going",
    "go",
    "collected",
    "images",
    "open",
    "paying",
    "attention",
    "case",
    "images",
    "beautiful",
    "next",
    "one",
    "get",
    "lackluster",
    "performance",
    "always",
    "come",
    "back",
    "performance",
    "tune",
    "well",
    "going",
    "one",
    "beautiful",
    "right",
    "done",
    "let",
    "grab",
    "next",
    "one",
    "left",
    "probably",
    "needs",
    "flipped",
    "fine",
    "behind",
    "mic",
    "yeah",
    "interesting",
    "one",
    "keep",
    "going",
    "left",
    "okay",
    "images",
    "left",
    "little",
    "concerned",
    "kind",
    "front",
    "face",
    "might",
    "get",
    "best",
    "performance",
    "testing",
    "training",
    "trying",
    "left",
    "go",
    "left",
    "cool",
    "done",
    "check",
    "labels",
    "right",
    "good",
    "go",
    "right",
    "let",
    "going",
    "change",
    "label",
    "save",
    "right",
    "save",
    "next",
    "one",
    "save",
    "save",
    "last",
    "one",
    "okay",
    "let",
    "check",
    "labels",
    "beautiful",
    "alrighty",
    "last",
    "one",
    "let",
    "okay",
    "last",
    "one",
    "keep",
    "mind",
    "five",
    "images",
    "per",
    "object",
    "per",
    "class",
    "moment",
    "could",
    "definitely",
    "normally",
    "5",
    "10",
    "20",
    "prototyping",
    "obviously",
    "labeling",
    "20",
    "images",
    "tutorial",
    "going",
    "take",
    "quite",
    "5",
    "fine",
    "play",
    "around",
    "add",
    "images",
    "add",
    "less",
    "images",
    "remember",
    "collect",
    "varying",
    "number",
    "images",
    "changing",
    "line",
    "number",
    "underscore",
    "images",
    "right",
    "got",
    "set",
    "5",
    "could",
    "set",
    "10",
    "20",
    "30",
    "40",
    "50",
    "100",
    "really",
    "wanted",
    "okay",
    "note",
    "gone",
    "labeled",
    "images",
    "go",
    "images",
    "folder",
    "probably",
    "getting",
    "repetitive",
    "sort",
    "gives",
    "idea",
    "process",
    "going",
    "got",
    "images",
    "annotations",
    "left",
    "right",
    "clear",
    "test",
    "folder",
    "pin",
    "stuff",
    "go",
    "collected",
    "images",
    "going",
    "thing",
    "going",
    "cut",
    "paste",
    "training",
    "testing",
    "split",
    "done",
    "let",
    "left",
    "going",
    "paste",
    "moment",
    "pasting",
    "four",
    "available",
    "images",
    "inside",
    "training",
    "folder",
    "would",
    "80",
    "20",
    "split",
    "play",
    "around",
    "want",
    "include",
    "less",
    "sort",
    "trial",
    "error",
    "little",
    "bit",
    "data",
    "science",
    "specifically",
    "deep",
    "learning",
    "data",
    "science",
    "iterative",
    "process",
    "go",
    "experiment",
    "need",
    "get",
    "perfectly",
    "right",
    "first",
    "time",
    "okay",
    "play",
    "around",
    "try",
    "different",
    "things",
    "okay",
    "got",
    "images",
    "want",
    "go",
    "grab",
    "rest",
    "throw",
    "inside",
    "test",
    "going",
    "one",
    "image",
    "per",
    "class",
    "test",
    "folder",
    "going",
    "keep",
    "copying",
    "pasting",
    "right",
    "could",
    "potentially",
    "automate",
    "use",
    "os",
    "library",
    "randomly",
    "choose",
    "files",
    "place",
    "train",
    "test",
    "case",
    "find",
    "easier",
    "manually",
    "got",
    "little",
    "bit",
    "control",
    "okay",
    "got",
    "images",
    "inside",
    "test",
    "got",
    "five",
    "image",
    "four",
    "images",
    "left",
    "left",
    "right",
    "inside",
    "train",
    "got",
    "whole",
    "heap",
    "going",
    "go",
    "standard",
    "process",
    "going",
    "go",
    "back",
    "training",
    "folder",
    "going",
    "stop",
    "label",
    "image",
    "see",
    "still",
    "running",
    "got",
    "little",
    "star",
    "stop",
    "jump",
    "training",
    "detection",
    "folder",
    "actually",
    "clear",
    "stuff",
    "make",
    "sure",
    "importing",
    "going",
    "import",
    "operating",
    "system",
    "going",
    "change",
    "folder",
    "name",
    "going",
    "call",
    "one",
    "directions",
    "effectively",
    "remember",
    "ssd",
    "mob",
    "net",
    "folder",
    "ssd",
    "mob",
    "net",
    "tune",
    "folder",
    "also",
    "microscope",
    "folder",
    "going",
    "one",
    "called",
    "directions",
    "run",
    "run",
    "create",
    "new",
    "file",
    "paths",
    "go",
    "youtube",
    "tensorflow",
    "object",
    "detection",
    "tfod",
    "tensorflow",
    "workspace",
    "uh",
    "models",
    "see",
    "got",
    "folder",
    "called",
    "directions",
    "going",
    "current",
    "model",
    "build",
    "skip",
    "skip",
    "step",
    "one",
    "already",
    "set",
    "environment",
    "virtual",
    "environment",
    "already",
    "need",
    "anything",
    "magic",
    "need",
    "per",
    "usual",
    "update",
    "label",
    "map",
    "remember",
    "left",
    "right",
    "capitalized",
    "going",
    "create",
    "new",
    "labels",
    "left",
    "right",
    "create",
    "two",
    "new",
    "items",
    "double",
    "check",
    "need",
    "make",
    "sure",
    "unique",
    "ids",
    "unique",
    "well",
    "three",
    "four",
    "another",
    "good",
    "thing",
    "know",
    "let",
    "quickly",
    "show",
    "want",
    "check",
    "images",
    "make",
    "sure",
    "got",
    "right",
    "case",
    "go",
    "train",
    "let",
    "take",
    "look",
    "capitalized",
    "let",
    "look",
    "left",
    "actual",
    "image",
    "left",
    "capitalized",
    "see",
    "let",
    "right",
    "double",
    "checking",
    "obviously",
    "checking",
    "front",
    "going",
    "save",
    "lot",
    "time",
    "track",
    "trying",
    "debug",
    "errors",
    "come",
    "capitalized",
    "well",
    "good",
    "good",
    "got",
    "left",
    "right",
    "got",
    "unique",
    "identifiers",
    "one",
    "one",
    "two",
    "three",
    "four",
    "think",
    "good",
    "go",
    "let",
    "go",
    "run",
    "annotation",
    "fine",
    "going",
    "update",
    "label",
    "map",
    "create",
    "tf",
    "record",
    "skip",
    "cell",
    "colab",
    "import",
    "new",
    "generate",
    "tf",
    "record",
    "script",
    "got",
    "already",
    "going",
    "skip",
    "already",
    "pi",
    "tz",
    "installed",
    "actually",
    "delete",
    "cell",
    "need",
    "anymore",
    "run",
    "tf",
    "record",
    "generations",
    "ideally",
    "successfully",
    "create",
    "train",
    "record",
    "test",
    "record",
    "going",
    "copy",
    "model",
    "config",
    "custom",
    "folder",
    "go",
    "directions",
    "folder",
    "going",
    "go",
    "ahead",
    "update",
    "config",
    "cell",
    "see",
    "fact",
    "gone",
    "updated",
    "looks",
    "like",
    "got",
    "number",
    "classes",
    "equals",
    "four",
    "updated",
    "scroll",
    "picking",
    "correct",
    "folders",
    "looking",
    "good",
    "okay",
    "going",
    "train",
    "model",
    "going",
    "run",
    "command",
    "generate",
    "training",
    "script",
    "print",
    "going",
    "copy",
    "going",
    "create",
    "new",
    "command",
    "prompt",
    "already",
    "got",
    "one",
    "defective",
    "pin",
    "example",
    "project",
    "going",
    "run",
    "training",
    "code",
    "paste",
    "kick",
    "things",
    "kick",
    "training",
    "right",
    "back",
    "soon",
    "done",
    "okay",
    "model",
    "train",
    "directions",
    "model",
    "eventually",
    "going",
    "plugging",
    "web",
    "app",
    "see",
    "went",
    "way",
    "step",
    "2000",
    "ended",
    "loss",
    "test",
    "inside",
    "jupiter",
    "notebook",
    "per",
    "usual",
    "let",
    "take",
    "look",
    "checkpoint",
    "go",
    "workspace",
    "models",
    "directions",
    "see",
    "checkpoint",
    "three",
    "key",
    "thing",
    "take",
    "look",
    "guys",
    "training",
    "model",
    "always",
    "assume",
    "going",
    "checkpoint",
    "4",
    "2",
    "000",
    "steps",
    "checkpoint",
    "3",
    "could",
    "vary",
    "always",
    "want",
    "make",
    "sure",
    "pull",
    "one",
    "highest",
    "index",
    "ideally",
    "case",
    "going",
    "checkpoint",
    "checkpoint",
    "1",
    "2",
    "want",
    "checkpoint",
    "case",
    "exactly",
    "going",
    "remember",
    "um",
    "pin",
    "defective",
    "pin",
    "detection",
    "latest",
    "model",
    "checkpoint",
    "four",
    "updated",
    "going",
    "going",
    "checkpoint",
    "dot",
    "restore",
    "going",
    "specifically",
    "pass",
    "checkpoint",
    "three",
    "case",
    "import",
    "per",
    "usual",
    "dependencies",
    "step",
    "eight",
    "load",
    "checkpoint",
    "three",
    "going",
    "skip",
    "right",
    "detections",
    "favorite",
    "going",
    "make",
    "sure",
    "set",
    "video",
    "capture",
    "device",
    "back",
    "zero",
    "remember",
    "video",
    "capture",
    "device",
    "one",
    "microscope",
    "number",
    "zero",
    "webcam",
    "let",
    "try",
    "case",
    "going",
    "hit",
    "run",
    "bump",
    "minimum",
    "score",
    "threshold",
    "back",
    "let",
    "say",
    "90",
    "um",
    "give",
    "run",
    "let",
    "run",
    "need",
    "import",
    "cv2",
    "part",
    "cell",
    "probably",
    "going",
    "need",
    "category",
    "index",
    "need",
    "image",
    "path",
    "let",
    "let",
    "see",
    "hopefully",
    "get",
    "little",
    "things",
    "holding",
    "equal",
    "get",
    "detections",
    "see",
    "webcams",
    "activated",
    "sometimes",
    "takes",
    "little",
    "bit",
    "time",
    "start",
    "close",
    "task",
    "manager",
    "okay",
    "open",
    "looks",
    "like",
    "detecting",
    "appropriately",
    "looks",
    "like",
    "wanted",
    "oh",
    "fine",
    "left",
    "oh",
    "right",
    "okay",
    "got",
    "issue",
    "left",
    "right",
    "oh",
    "right",
    "works",
    "well",
    "okay",
    "bring",
    "saying",
    "remember",
    "collecting",
    "images",
    "said",
    "images",
    "across",
    "face",
    "might",
    "cause",
    "issue",
    "right",
    "saying",
    "left",
    "right",
    "face",
    "left",
    "put",
    "right",
    "green",
    "okay",
    "saying",
    "right",
    "long",
    "face",
    "going",
    "right",
    "left",
    "face",
    "hmm",
    "okay",
    "right",
    "might",
    "want",
    "little",
    "bit",
    "performance",
    "tuning",
    "sort",
    "see",
    "might",
    "go",
    "building",
    "detection",
    "model",
    "actually",
    "order",
    "solve",
    "include",
    "images",
    "purely",
    "pointing",
    "left",
    "case",
    "left",
    "fine",
    "left",
    "okay",
    "face",
    "always",
    "right",
    "shoulder",
    "okay",
    "case",
    "like",
    "see",
    "maybe",
    "performing",
    "well",
    "sort",
    "get",
    "idea",
    "right",
    "go",
    "perform",
    "stream",
    "make",
    "better",
    "improve",
    "model",
    "accuracy",
    "got",
    "working",
    "fine",
    "working",
    "fine",
    "hand",
    "okay",
    "hand",
    "might",
    "need",
    "add",
    "little",
    "bit",
    "tuning",
    "okay",
    "hand",
    "okay",
    "start",
    "see",
    "might",
    "evaluate",
    "model",
    "add",
    "additional",
    "images",
    "particular",
    "classes",
    "performing",
    "well",
    "sort",
    "go",
    "performance",
    "tuning",
    "stop",
    "particular",
    "model",
    "going",
    "take",
    "one",
    "step",
    "going",
    "quit",
    "particular",
    "detection",
    "going",
    "freeze",
    "graph",
    "time",
    "going",
    "run",
    "step",
    "10",
    "freeze",
    "graph",
    "go",
    "ahead",
    "run",
    "also",
    "going",
    "run",
    "everything",
    "step",
    "11",
    "convert",
    "well",
    "two",
    "things",
    "inside",
    "export",
    "frozen",
    "graph",
    "done",
    "get",
    "export",
    "also",
    "get",
    "export",
    "going",
    "actually",
    "going",
    "build",
    "app",
    "got",
    "couple",
    "key",
    "things",
    "namely",
    "need",
    "go",
    "ibm",
    "cloud",
    "case",
    "using",
    "ibm",
    "cloud",
    "host",
    "model",
    "specifically",
    "want",
    "go",
    "forward",
    "slash",
    "catalog",
    "need",
    "cloud",
    "object",
    "store",
    "going",
    "log",
    "need",
    "first",
    "time",
    "either",
    "need",
    "log",
    "sign",
    "sign",
    "signed",
    "plug",
    "details",
    "free",
    "run",
    "free",
    "moment",
    "based",
    "model",
    "going",
    "going",
    "log",
    "actually",
    "take",
    "look",
    "steps",
    "inside",
    "github",
    "repository",
    "forward",
    "slash",
    "tfod",
    "app",
    "actually",
    "going",
    "walk",
    "steps",
    "maybe",
    "get",
    "little",
    "bit",
    "lost",
    "going",
    "means",
    "check",
    "effectively",
    "going",
    "following",
    "steps",
    "see",
    "okay",
    "let",
    "actually",
    "one",
    "step",
    "time",
    "let",
    "make",
    "sure",
    "exports",
    "work",
    "looks",
    "like",
    "frozen",
    "graph",
    "generated",
    "let",
    "take",
    "look",
    "go",
    "youtube",
    "tensorflow",
    "object",
    "detection",
    "tfod",
    "course",
    "tensorflow",
    "workspace",
    "models",
    "look",
    "directions",
    "inside",
    "export",
    "got",
    "frozen",
    "graph",
    "take",
    "look",
    "tfjs",
    "export",
    "got",
    "done",
    "well",
    "good",
    "shape",
    "let",
    "go",
    "back",
    "tensorflow",
    "object",
    "detection",
    "app",
    "component",
    "see",
    "need",
    "first",
    "saying",
    "need",
    "clone",
    "repository",
    "let",
    "go",
    "ahead",
    "copy",
    "link",
    "link",
    "stuff",
    "going",
    "available",
    "description",
    "means",
    "check",
    "need",
    "anything",
    "else",
    "means",
    "hit",
    "comments",
    "going",
    "open",
    "new",
    "command",
    "prompt",
    "going",
    "going",
    "cd",
    "tfod",
    "course",
    "brings",
    "actually",
    "probably",
    "create",
    "new",
    "command",
    "prompt",
    "going",
    "go",
    "drive",
    "cd",
    "youtube",
    "go",
    "tensorflow",
    "object",
    "detection",
    "repository",
    "typing",
    "bit",
    "shocker",
    "right",
    "inside",
    "folder",
    "got",
    "tensorflow",
    "object",
    "detection",
    "course",
    "go",
    "tensorflow",
    "object",
    "detection",
    "course",
    "root",
    "repository",
    "everything",
    "far",
    "see",
    "type",
    "deer",
    "working",
    "linux",
    "typing",
    "india",
    "going",
    "ls",
    "linux",
    "machine",
    "baseline",
    "root",
    "dependencies",
    "image",
    "collection",
    "training",
    "detection",
    "jupyter",
    "notebook",
    "going",
    "jump",
    "back",
    "going",
    "going",
    "clone",
    "repository",
    "looking",
    "one",
    "tensorflow",
    "object",
    "detection",
    "react",
    "app",
    "using",
    "javascript",
    "web",
    "development",
    "library",
    "called",
    "react",
    "web",
    "development",
    "architecture",
    "called",
    "react",
    "really",
    "good",
    "pretty",
    "sort",
    "stable",
    "library",
    "looks",
    "really",
    "similar",
    "html",
    "ever",
    "done",
    "html",
    "actually",
    "need",
    "write",
    "anything",
    "beauty",
    "able",
    "pick",
    "go",
    "going",
    "clone",
    "repository",
    "type",
    "git",
    "clone",
    "clone",
    "going",
    "going",
    "go",
    "folder",
    "cd",
    "going",
    "called",
    "tfod",
    "app",
    "let",
    "take",
    "look",
    "got",
    "stuff",
    "open",
    "inside",
    "code",
    "editor",
    "going",
    "open",
    "vs",
    "code",
    "inside",
    "bunch",
    "stuff",
    "take",
    "look",
    "cause",
    "config",
    "later",
    "really",
    "need",
    "worry",
    "much",
    "apart",
    "line",
    "inside",
    "file",
    "come",
    "sort",
    "explain",
    "need",
    "let",
    "go",
    "back",
    "walkthrough",
    "steps",
    "next",
    "thing",
    "need",
    "install",
    "node",
    "server",
    "package",
    "basically",
    "server",
    "runtime",
    "use",
    "running",
    "react",
    "app",
    "got",
    "installed",
    "go",
    "link",
    "available",
    "inside",
    "github",
    "repo",
    "download",
    "install",
    "good",
    "go",
    "next",
    "thing",
    "want",
    "install",
    "app",
    "dependency",
    "step",
    "3",
    "going",
    "go",
    "ahead",
    "go",
    "back",
    "going",
    "inside",
    "going",
    "open",
    "new",
    "terminal",
    "inside",
    "vs",
    "code",
    "going",
    "going",
    "type",
    "following",
    "command",
    "npm",
    "install",
    "think",
    "npm",
    "package",
    "manager",
    "equivalent",
    "pip",
    "javascript",
    "case",
    "bunch",
    "others",
    "resource",
    "managers",
    "case",
    "going",
    "using",
    "npm",
    "npm",
    "comes",
    "install",
    "node",
    "keep",
    "mind",
    "need",
    "node",
    "installed",
    "order",
    "work",
    "going",
    "type",
    "npm",
    "install",
    "going",
    "bring",
    "make",
    "sure",
    "head",
    "covering",
    "hit",
    "enter",
    "going",
    "install",
    "dependencies",
    "react",
    "app",
    "going",
    "need",
    "might",
    "take",
    "little",
    "let",
    "let",
    "run",
    "right",
    "back",
    "okay",
    "look",
    "like",
    "dependencies",
    "installed",
    "tell",
    "based",
    "fact",
    "got",
    "node",
    "modules",
    "file",
    "going",
    "using",
    "background",
    "configured",
    "really",
    "need",
    "keep",
    "going",
    "different",
    "steps",
    "got",
    "inside",
    "github",
    "repo",
    "case",
    "done",
    "steps",
    "one",
    "cloned",
    "repo",
    "installed",
    "node",
    "already",
    "got",
    "installed",
    "showing",
    "sort",
    "go",
    "next",
    "thing",
    "need",
    "actually",
    "create",
    "new",
    "free",
    "object",
    "storage",
    "repository",
    "ibm",
    "cloud",
    "going",
    "hit",
    "link",
    "separate",
    "link",
    "open",
    "new",
    "tab",
    "place",
    "sort",
    "referring",
    "case",
    "create",
    "new",
    "cloud",
    "object",
    "storage",
    "hit",
    "light",
    "hit",
    "create",
    "case",
    "already",
    "got",
    "one",
    "created",
    "need",
    "hit",
    "light",
    "hit",
    "create",
    "go",
    "ahead",
    "open",
    "go",
    "open",
    "instance",
    "show",
    "looks",
    "like",
    "got",
    "cloud",
    "object",
    "storage",
    "repository",
    "made",
    "available",
    "going",
    "look",
    "little",
    "bit",
    "like",
    "want",
    "create",
    "bucket",
    "effectively",
    "step",
    "five",
    "assume",
    "already",
    "gone",
    "created",
    "cloud",
    "object",
    "storage",
    "bucket",
    "create",
    "bucket",
    "step",
    "five",
    "hit",
    "create",
    "bucket",
    "create",
    "bucket",
    "going",
    "hit",
    "uh",
    "think",
    "going",
    "hit",
    "customize",
    "bucket",
    "name",
    "bucket",
    "going",
    "going",
    "name",
    "pay",
    "attention",
    "name",
    "need",
    "later",
    "going",
    "call",
    "directions",
    "tfod",
    "sounds",
    "good",
    "name",
    "whatever",
    "want",
    "make",
    "sure",
    "keep",
    "note",
    "particular",
    "name",
    "going",
    "select",
    "location",
    "going",
    "choose",
    "seed",
    "could",
    "choose",
    "bunch",
    "different",
    "regions",
    "host",
    "skip",
    "way",
    "bottom",
    "hit",
    "create",
    "bucket",
    "spin",
    "little",
    "good",
    "okay",
    "step",
    "five",
    "half",
    "done",
    "created",
    "bucket",
    "need",
    "store",
    "file",
    "dot",
    "bin",
    "files",
    "bucket",
    "files",
    "created",
    "let",
    "minimize",
    "files",
    "created",
    "went",
    "ran",
    "export",
    "line",
    "went",
    "created",
    "particular",
    "files",
    "go",
    "folder",
    "called",
    "tfjs",
    "export",
    "files",
    "going",
    "need",
    "upload",
    "group",
    "one",
    "dash",
    "shard",
    "one",
    "three",
    "need",
    "upload",
    "bucket",
    "go",
    "back",
    "bucket",
    "hit",
    "upload",
    "select",
    "little",
    "region",
    "actually",
    "upload",
    "file",
    "going",
    "click",
    "go",
    "repository",
    "youtube",
    "tensorflow",
    "object",
    "detection",
    "tfod",
    "course",
    "tensorflow",
    "workspace",
    "models",
    "gon",
    "na",
    "go",
    "directions",
    "folder",
    "want",
    "tfjs",
    "export",
    "gon",
    "na",
    "select",
    "hit",
    "open",
    "gon",
    "na",
    "upload",
    "folders",
    "need",
    "actually",
    "go",
    "ahead",
    "upload",
    "got",
    "feeling",
    "head",
    "going",
    "blocking",
    "move",
    "way",
    "need",
    "hit",
    "upload",
    "upload",
    "files",
    "two",
    "things",
    "need",
    "order",
    "get",
    "good",
    "running",
    "okay",
    "looking",
    "like",
    "working",
    "fine",
    "go",
    "ahead",
    "close",
    "want",
    "grab",
    "select",
    "file",
    "oh",
    "generated",
    "yet",
    "come",
    "back",
    "going",
    "go",
    "next",
    "step",
    "enable",
    "public",
    "access",
    "policy",
    "step",
    "6",
    "close",
    "left",
    "hand",
    "side",
    "going",
    "see",
    "button",
    "called",
    "access",
    "policies",
    "select",
    "effectively",
    "hosting",
    "model",
    "going",
    "allow",
    "us",
    "actually",
    "host",
    "model",
    "leverage",
    "pretty",
    "much",
    "anywhere",
    "world",
    "need",
    "two",
    "specific",
    "things",
    "need",
    "put",
    "model",
    "bucket",
    "need",
    "make",
    "available",
    "world",
    "wide",
    "web",
    "reach",
    "app",
    "right",
    "got",
    "bucket",
    "right",
    "ca",
    "actually",
    "access",
    "app",
    "going",
    "enable",
    "public",
    "access",
    "hit",
    "access",
    "policies",
    "go",
    "public",
    "access",
    "choose",
    "leave",
    "leave",
    "access",
    "group",
    "public",
    "access",
    "leave",
    "role",
    "content",
    "reader",
    "hit",
    "create",
    "access",
    "policy",
    "going",
    "give",
    "warning",
    "going",
    "publicly",
    "available",
    "hit",
    "enable",
    "access",
    "group",
    "policy",
    "created",
    "want",
    "actually",
    "go",
    "back",
    "grab",
    "url",
    "particular",
    "file",
    "created",
    "public",
    "enabled",
    "public",
    "access",
    "able",
    "grab",
    "object",
    "public",
    "url",
    "going",
    "copy",
    "go",
    "app",
    "created",
    "cloned",
    "order",
    "use",
    "particular",
    "line",
    "got",
    "create",
    "need",
    "go",
    "inside",
    "say",
    "main",
    "app",
    "folder",
    "going",
    "need",
    "go",
    "source",
    "go",
    "line",
    "17",
    "moment",
    "line",
    "17",
    "search",
    "line",
    "says",
    "const",
    "net",
    "equals",
    "await",
    "tf",
    "load",
    "graph",
    "model",
    "actually",
    "going",
    "load",
    "react",
    "load",
    "model",
    "web",
    "app",
    "minimize",
    "looks",
    "like",
    "moment",
    "existing",
    "one",
    "tested",
    "going",
    "paste",
    "new",
    "link",
    "hit",
    "save",
    "good",
    "going",
    "things",
    "need",
    "update",
    "get",
    "run",
    "namely",
    "need",
    "enable",
    "something",
    "called",
    "cross",
    "origin",
    "resource",
    "sharing",
    "order",
    "need",
    "run",
    "couple",
    "key",
    "commands",
    "order",
    "actually",
    "need",
    "ibm",
    "cloud",
    "object",
    "store",
    "cli",
    "installed",
    "type",
    "cloud",
    "object",
    "storage",
    "cli",
    "installation",
    "installation",
    "going",
    "walk",
    "actually",
    "get",
    "running",
    "going",
    "need",
    "install",
    "ibm",
    "cloud",
    "cli",
    "first",
    "cloud",
    "object",
    "storage",
    "cli",
    "got",
    "tutorial",
    "install",
    "run",
    "installation",
    "steps",
    "going",
    "walk",
    "go",
    "let",
    "actually",
    "take",
    "look",
    "go",
    "ibm",
    "cloud",
    "cli",
    "install",
    "first",
    "one",
    "got",
    "ibm",
    "cloud",
    "cli",
    "install",
    "first",
    "use",
    "browser",
    "access",
    "official",
    "ibm",
    "cloud",
    "cli",
    "release",
    "github",
    "repository",
    "select",
    "installer",
    "os",
    "begin",
    "download",
    "let",
    "select",
    "see",
    "bunch",
    "different",
    "installers",
    "use",
    "mac",
    "os",
    "windows",
    "windows",
    "windows",
    "see",
    "downloaded",
    "let",
    "run",
    "hit",
    "yes",
    "going",
    "perform",
    "upgrade",
    "already",
    "got",
    "installed",
    "going",
    "upgrade",
    "let",
    "let",
    "install",
    "need",
    "next",
    "step",
    "actually",
    "going",
    "allows",
    "us",
    "going",
    "allow",
    "us",
    "enable",
    "something",
    "called",
    "resource",
    "sharing",
    "explain",
    "little",
    "bit",
    "second",
    "want",
    "install",
    "ibm",
    "cloud",
    "object",
    "storage",
    "cli",
    "going",
    "show",
    "actually",
    "ibm",
    "cloud",
    "cli",
    "cli",
    "stands",
    "command",
    "line",
    "interface",
    "basically",
    "allows",
    "run",
    "command",
    "line",
    "right",
    "next",
    "step",
    "need",
    "run",
    "command",
    "going",
    "show",
    "first",
    "need",
    "log",
    "ibm",
    "cloud",
    "going",
    "clear",
    "type",
    "ibm",
    "cloud",
    "log",
    "default",
    "soon",
    "hit",
    "log",
    "going",
    "ask",
    "pass",
    "email",
    "password",
    "going",
    "details",
    "passed",
    "went",
    "created",
    "bucket",
    "created",
    "bucket",
    "uh",
    "right",
    "sort",
    "saying",
    "would",
    "either",
    "hit",
    "log",
    "sign",
    "hit",
    "sign",
    "would",
    "passed",
    "email",
    "password",
    "password",
    "details",
    "put",
    "going",
    "details",
    "particular",
    "case",
    "pass",
    "email",
    "password",
    "going",
    "go",
    "ahead",
    "log",
    "okay",
    "gone",
    "ahead",
    "logged",
    "passed",
    "email",
    "password",
    "slightly",
    "different",
    "got",
    "different",
    "account",
    "fine",
    "pass",
    "email",
    "password",
    "able",
    "log",
    "need",
    "install",
    "ibm",
    "cloud",
    "storage",
    "client",
    "copy",
    "command",
    "paste",
    "going",
    "go",
    "ahead",
    "install",
    "cli",
    "hit",
    "yes",
    "good",
    "go",
    "cool",
    "done",
    "clear",
    "give",
    "us",
    "little",
    "bit",
    "space",
    "go",
    "back",
    "tensorflow",
    "object",
    "detection",
    "repository",
    "tensorflow",
    "object",
    "detection",
    "app",
    "repository",
    "step",
    "seven",
    "done",
    "installed",
    "ibm",
    "cloud",
    "cli",
    "installed",
    "cloud",
    "object",
    "storage",
    "plugin",
    "run",
    "command",
    "need",
    "change",
    "one",
    "single",
    "thing",
    "name",
    "bucket",
    "full",
    "command",
    "going",
    "let",
    "zoom",
    "little",
    "going",
    "ibm",
    "cloud",
    "cos",
    "cloud",
    "object",
    "store",
    "cloud",
    "object",
    "storage",
    "service",
    "saw",
    "bucket",
    "dash",
    "cause",
    "dash",
    "put",
    "dash",
    "dash",
    "bucket",
    "name",
    "case",
    "old",
    "bucket",
    "name",
    "called",
    "live",
    "long",
    "live",
    "long",
    "detection",
    "dash",
    "dash",
    "cause",
    "dash",
    "configuration",
    "pass",
    "name",
    "configuration",
    "file",
    "already",
    "got",
    "available",
    "able",
    "work",
    "reasonably",
    "easily",
    "reasonably",
    "easily",
    "wo",
    "need",
    "make",
    "updates",
    "write",
    "configuration",
    "going",
    "copy",
    "going",
    "update",
    "show",
    "update",
    "let",
    "bring",
    "jump",
    "back",
    "app",
    "jump",
    "readme",
    "going",
    "paste",
    "command",
    "let",
    "paste",
    "need",
    "namely",
    "replace",
    "bucket",
    "name",
    "name",
    "bucket",
    "name",
    "go",
    "back",
    "remember",
    "created",
    "name",
    "bucket",
    "case",
    "called",
    "directions",
    "tfod",
    "copy",
    "replace",
    "order",
    "run",
    "command",
    "line",
    "obviously",
    "need",
    "logged",
    "ibm",
    "cloud",
    "cli",
    "need",
    "top",
    "level",
    "repository",
    "top",
    "level",
    "folder",
    "tfod",
    "app",
    "case",
    "actually",
    "got",
    "file",
    "called",
    "cause",
    "config",
    "going",
    "need",
    "effectively",
    "going",
    "enable",
    "cause",
    "us",
    "cause",
    "stands",
    "resource",
    "sharing",
    "basically",
    "means",
    "web",
    "app",
    "access",
    "url",
    "somewhere",
    "else",
    "namely",
    "enabled",
    "want",
    "web",
    "app",
    "accessing",
    "whole",
    "bunch",
    "stuff",
    "namely",
    "locking",
    "buckets",
    "want",
    "accessible",
    "anywhere",
    "case",
    "want",
    "app",
    "able",
    "get",
    "going",
    "enable",
    "right",
    "order",
    "going",
    "running",
    "command",
    "going",
    "going",
    "cloud",
    "object",
    "storage",
    "service",
    "going",
    "put",
    "cause",
    "policy",
    "got",
    "course",
    "config",
    "file",
    "part",
    "clone",
    "repository",
    "need",
    "create",
    "anything",
    "really",
    "need",
    "log",
    "ibm",
    "cloud",
    "change",
    "whatever",
    "name",
    "bucket",
    "created",
    "need",
    "replace",
    "case",
    "live",
    "long",
    "going",
    "paste",
    "name",
    "bucket",
    "directions",
    "tfod",
    "paste",
    "going",
    "going",
    "run",
    "inside",
    "command",
    "line",
    "terminal",
    "case",
    "running",
    "inside",
    "windows",
    "brought",
    "powershell",
    "terminal",
    "mac",
    "might",
    "inside",
    "terminal",
    "called",
    "terminal",
    "bash",
    "terminal",
    "going",
    "run",
    "command",
    "let",
    "make",
    "sure",
    "got",
    "cause",
    "config",
    "file",
    "good",
    "go",
    "let",
    "clear",
    "run",
    "command",
    "looks",
    "like",
    "issues",
    "said",
    "okay",
    "successfully",
    "set",
    "course",
    "configuration",
    "bucket",
    "directions",
    "tfod",
    "looking",
    "good",
    "need",
    "go",
    "rest",
    "steps",
    "step",
    "nine",
    "update",
    "following",
    "line",
    "link",
    "model",
    "url",
    "actually",
    "already",
    "done",
    "right",
    "remember",
    "went",
    "actually",
    "already",
    "pasted",
    "name",
    "file",
    "uploaded",
    "bucket",
    "file",
    "model",
    "going",
    "allows",
    "us",
    "run",
    "web",
    "app",
    "using",
    "model",
    "step",
    "9",
    "done",
    "step",
    "10",
    "update",
    "label",
    "map",
    "inside",
    "labels",
    "go",
    "really",
    "need",
    "update",
    "label",
    "map",
    "need",
    "update",
    "names",
    "labels",
    "actually",
    "colors",
    "want",
    "represent",
    "case",
    "going",
    "go",
    "back",
    "jupyter",
    "notebook",
    "remember",
    "labels",
    "right",
    "remember",
    "set",
    "labels",
    "left",
    "right",
    "going",
    "exact",
    "thing",
    "go",
    "back",
    "app",
    "left",
    "right",
    "save",
    "add",
    "wanted",
    "add",
    "additional",
    "labels",
    "add",
    "additional",
    "colors",
    "update",
    "based",
    "specific",
    "app",
    "case",
    "updating",
    "different",
    "directional",
    "models",
    "make",
    "sure",
    "hit",
    "save",
    "terms",
    "stuff",
    "need",
    "gone",
    "done",
    "step",
    "10",
    "step",
    "11",
    "starting",
    "app",
    "run",
    "npm",
    "start",
    "let",
    "try",
    "make",
    "sure",
    "root",
    "directory",
    "tfod",
    "app",
    "type",
    "npm",
    "start",
    "things",
    "holding",
    "equal",
    "work",
    "let",
    "wait",
    "see",
    "automatically",
    "open",
    "browser",
    "link",
    "model",
    "actually",
    "running",
    "access",
    "webcam",
    "take",
    "little",
    "start",
    "compile",
    "able",
    "test",
    "let",
    "give",
    "second",
    "take",
    "look",
    "results",
    "okay",
    "looks",
    "like",
    "react",
    "app",
    "started",
    "see",
    "got",
    "camera",
    "available",
    "take",
    "look",
    "look",
    "like",
    "detecting",
    "get",
    "errors",
    "like",
    "actually",
    "getting",
    "detections",
    "want",
    "show",
    "actually",
    "debug",
    "particular",
    "app",
    "line",
    "50",
    "onwards",
    "actually",
    "getting",
    "detection",
    "line",
    "line",
    "const",
    "obj",
    "equals",
    "weight",
    "net",
    "dot",
    "execute",
    "async",
    "expanded",
    "see",
    "actually",
    "built",
    "want",
    "see",
    "full",
    "tutorial",
    "actually",
    "wrote",
    "got",
    "code",
    "available",
    "happy",
    "share",
    "getting",
    "errors",
    "working",
    "way",
    "sort",
    "normally",
    "process",
    "first",
    "change",
    "confidence",
    "metric",
    "case",
    "got",
    "confidence",
    "metric",
    "available",
    "line",
    "line",
    "let",
    "check",
    "yep",
    "line",
    "change",
    "number",
    "right",
    "set",
    "90",
    "percent",
    "let",
    "jump",
    "set",
    "90",
    "change",
    "drop",
    "let",
    "drop",
    "40",
    "see",
    "get",
    "detections",
    "nope",
    "okay",
    "pointing",
    "next",
    "thing",
    "check",
    "sometimes",
    "change",
    "order",
    "objects",
    "converted",
    "model",
    "case",
    "actually",
    "expect",
    "boxes",
    "fourth",
    "item",
    "detection",
    "result",
    "array",
    "expect",
    "classes",
    "fifth",
    "item",
    "expect",
    "scores",
    "sixth",
    "item",
    "always",
    "case",
    "actually",
    "type",
    "console",
    "dot",
    "log",
    "equivalent",
    "print",
    "python",
    "type",
    "weight",
    "go",
    "one",
    "objects",
    "object",
    "array",
    "actually",
    "determine",
    "type",
    "object",
    "zero",
    "going",
    "print",
    "first",
    "object",
    "take",
    "look",
    "let",
    "bring",
    "side",
    "side",
    "hit",
    "inspect",
    "going",
    "allow",
    "us",
    "see",
    "object",
    "see",
    "definitely",
    "got",
    "something",
    "looks",
    "like",
    "array",
    "array",
    "five",
    "values",
    "boxes",
    "let",
    "try",
    "object",
    "one",
    "sort",
    "work",
    "objects",
    "actually",
    "go",
    "deploy",
    "looking",
    "slightly",
    "different",
    "one",
    "one",
    "oh",
    "actually",
    "might",
    "looks",
    "like",
    "result",
    "right",
    "see",
    "getting",
    "add",
    "boxes",
    "got",
    "negatives",
    "want",
    "one",
    "let",
    "try",
    "object",
    "two",
    "changing",
    "number",
    "see",
    "changing",
    "let",
    "take",
    "look",
    "okay",
    "classes",
    "need",
    "see",
    "got",
    "one",
    "two",
    "three",
    "four",
    "represents",
    "different",
    "classes",
    "available",
    "particular",
    "app",
    "going",
    "going",
    "change",
    "line",
    "line",
    "55",
    "classes",
    "gon",
    "na",
    "change",
    "object",
    "two",
    "hit",
    "save",
    "least",
    "got",
    "classes",
    "placed",
    "appropriately",
    "gon",
    "na",
    "go",
    "next",
    "value",
    "wan",
    "na",
    "check",
    "object",
    "three",
    "lit",
    "position",
    "three",
    "array",
    "results",
    "array",
    "looks",
    "like",
    "looks",
    "like",
    "process",
    "box",
    "classes",
    "see",
    "low",
    "numbers",
    "actually",
    "try",
    "use",
    "boxes",
    "well",
    "actually",
    "give",
    "example",
    "right",
    "object",
    "three",
    "set",
    "boxes",
    "let",
    "take",
    "look",
    "getting",
    "detections",
    "let",
    "wait",
    "run",
    "see",
    "detecting",
    "classes",
    "top",
    "corner",
    "really",
    "really",
    "small",
    "set",
    "value",
    "boxes",
    "really",
    "going",
    "work",
    "let",
    "try",
    "object",
    "four",
    "see",
    "looks",
    "like",
    "got",
    "hundred",
    "count",
    "objects",
    "detected",
    "let",
    "try",
    "object",
    "five",
    "looking",
    "promising",
    "array",
    "100",
    "okay",
    "might",
    "actually",
    "yeah",
    "one",
    "particular",
    "set",
    "arrays",
    "boxes",
    "look",
    "something",
    "like",
    "number",
    "zero",
    "ideally",
    "one",
    "believe",
    "x",
    "actually",
    "tell",
    "correctly",
    "values",
    "represent",
    "value",
    "x",
    "value",
    "height",
    "width",
    "case",
    "got",
    "box",
    "values",
    "expect",
    "box",
    "value",
    "look",
    "like",
    "bunch",
    "numbers",
    "zero",
    "one",
    "negative",
    "values",
    "believe",
    "non",
    "pre",
    "non",
    "post",
    "process",
    "value",
    "actually",
    "want",
    "going",
    "going",
    "set",
    "value",
    "boxes",
    "array",
    "line",
    "54",
    "equal",
    "five",
    "let",
    "minimize",
    "right",
    "drawing",
    "boxes",
    "correctly",
    "oh",
    "remember",
    "set",
    "confidence",
    "metric",
    "really",
    "really",
    "low",
    "let",
    "bump",
    "right",
    "losing",
    "plot",
    "going",
    "set",
    "back",
    "least",
    "getting",
    "detections",
    "saved",
    "oh",
    "changed",
    "scores",
    "got",
    "find",
    "scores",
    "first",
    "well",
    "let",
    "go",
    "change",
    "let",
    "zoom",
    "little",
    "bit",
    "right",
    "gone",
    "little",
    "crazy",
    "let",
    "see",
    "object",
    "six",
    "looks",
    "like",
    "right",
    "believe",
    "index",
    "value",
    "want",
    "try",
    "object",
    "seven",
    "let",
    "see",
    "values",
    "okay",
    "confidence",
    "scores",
    "value",
    "zero",
    "one",
    "believe",
    "already",
    "sorted",
    "well",
    "highest",
    "confidence",
    "going",
    "top",
    "value",
    "need",
    "set",
    "number",
    "equal",
    "let",
    "resolved",
    "got",
    "work",
    "right",
    "take",
    "look",
    "beautiful",
    "working",
    "might",
    "need",
    "change",
    "around",
    "depending",
    "results",
    "object",
    "array",
    "come",
    "sort",
    "shows",
    "sort",
    "boxes",
    "going",
    "value",
    "number",
    "arrays",
    "one",
    "arrays",
    "going",
    "four",
    "values",
    "zero",
    "one",
    "represent",
    "coordinates",
    "classes",
    "going",
    "standard",
    "integers",
    "going",
    "one",
    "two",
    "three",
    "four",
    "number",
    "different",
    "objects",
    "got",
    "model",
    "scores",
    "going",
    "sorted",
    "array",
    "highest",
    "confidence",
    "value",
    "top",
    "let",
    "go",
    "ahead",
    "test",
    "right",
    "actually",
    "gone",
    "done",
    "quite",
    "fair",
    "bit",
    "minimize",
    "expand",
    "take",
    "look",
    "accurately",
    "detecting",
    "go",
    "getting",
    "looks",
    "like",
    "okay",
    "coordinates",
    "might",
    "little",
    "bit",
    "bit",
    "better",
    "left",
    "right",
    "left",
    "left",
    "face",
    "anywhere",
    "else",
    "detecting",
    "right",
    "getting",
    "right",
    "reasonable",
    "confidence",
    "metrics",
    "sort",
    "shows",
    "possible",
    "right",
    "like",
    "could",
    "much",
    "could",
    "build",
    "apps",
    "could",
    "build",
    "directional",
    "apps",
    "um",
    "could",
    "sentiment",
    "analysis",
    "via",
    "web",
    "whole",
    "bunch",
    "ideas",
    "think",
    "anything",
    "awesome",
    "let",
    "know",
    "love",
    "hear",
    "ideas",
    "also",
    "change",
    "colors",
    "different",
    "labels",
    "case",
    "change",
    "changing",
    "color",
    "attached",
    "different",
    "class",
    "note",
    "project",
    "two",
    "wrapped",
    "gone",
    "taken",
    "raw",
    "object",
    "detection",
    "model",
    "collected",
    "images",
    "using",
    "image",
    "collection",
    "script",
    "change",
    "left",
    "right",
    "performance",
    "left",
    "right",
    "greatest",
    "remember",
    "took",
    "images",
    "right",
    "face",
    "always",
    "cool",
    "went",
    "trained",
    "model",
    "using",
    "regular",
    "training",
    "script",
    "went",
    "bunch",
    "stuff",
    "well",
    "right",
    "uploaded",
    "model",
    "ibm",
    "cloud",
    "able",
    "host",
    "set",
    "cause",
    "value",
    "able",
    "access",
    "app",
    "last",
    "least",
    "actually",
    "went",
    "updated",
    "app",
    "details",
    "remember",
    "updating",
    "couple",
    "key",
    "things",
    "need",
    "go",
    "file",
    "update",
    "line",
    "17",
    "case",
    "line",
    "17",
    "look",
    "line",
    "says",
    "tf",
    "dot",
    "load",
    "graph",
    "model",
    "update",
    "hosted",
    "model",
    "update",
    "labels",
    "inside",
    "file",
    "might",
    "need",
    "play",
    "around",
    "object",
    "detection",
    "array",
    "might",
    "need",
    "change",
    "values",
    "case",
    "pretty",
    "much",
    "done",
    "project",
    "number",
    "two",
    "got",
    "app",
    "running",
    "able",
    "detect",
    "left",
    "right",
    "pretty",
    "cool",
    "right",
    "want",
    "stop",
    "app",
    "jump",
    "vs",
    "code",
    "hit",
    "control",
    "c",
    "um",
    "command",
    "c",
    "windows",
    "machine",
    "mac",
    "machine",
    "app",
    "done",
    "could",
    "whole",
    "bunch",
    "different",
    "models",
    "need",
    "directions",
    "model",
    "sign",
    "language",
    "video",
    "want",
    "take",
    "look",
    "video",
    "means",
    "link",
    "description",
    "take",
    "look",
    "project",
    "number",
    "three",
    "raspberry",
    "pi",
    "sentiment",
    "going",
    "keep",
    "one",
    "relatively",
    "simple",
    "might",
    "try",
    "one",
    "two",
    "classes",
    "maybe",
    "happy",
    "like",
    "sad",
    "something",
    "like",
    "obviously",
    "running",
    "object",
    "detection",
    "models",
    "raspberry",
    "pi",
    "certain",
    "things",
    "sort",
    "need",
    "cater",
    "obviously",
    "gpu",
    "particular",
    "one",
    "raspberry",
    "pi",
    "nothing",
    "fancy",
    "happening",
    "raspberry",
    "pi",
    "get",
    "gpu",
    "extender",
    "like",
    "example",
    "coral",
    "also",
    "get",
    "like",
    "jets",
    "nanos",
    "sort",
    "linux",
    "style",
    "devices",
    "like",
    "able",
    "run",
    "going",
    "use",
    "standard",
    "raspberry",
    "pi",
    "box",
    "test",
    "got",
    "sitting",
    "right",
    "next",
    "webcam",
    "actually",
    "going",
    "remote",
    "desktop",
    "raspberry",
    "pi",
    "able",
    "work",
    "able",
    "run",
    "similar",
    "detections",
    "done",
    "already",
    "case",
    "going",
    "scratch",
    "cool",
    "right",
    "going",
    "kick",
    "done",
    "going",
    "much",
    "manner",
    "going",
    "collecting",
    "images",
    "training",
    "model",
    "key",
    "difference",
    "particular",
    "project",
    "last",
    "two",
    "first",
    "one",
    "used",
    "straight",
    "used",
    "microscope",
    "able",
    "make",
    "detections",
    "tfjs",
    "app",
    "converted",
    "tfjs",
    "able",
    "run",
    "raspberry",
    "pi",
    "model",
    "actually",
    "going",
    "focused",
    "converting",
    "tf",
    "lite",
    "going",
    "using",
    "specific",
    "model",
    "tf",
    "lite",
    "format",
    "let",
    "go",
    "ahead",
    "first",
    "open",
    "image",
    "collection",
    "notebook",
    "nothing",
    "crazy",
    "time",
    "rather",
    "directions",
    "model",
    "specifically",
    "tfjs",
    "app",
    "left",
    "right",
    "gon",
    "na",
    "let",
    "try",
    "happy",
    "sad",
    "gon",
    "na",
    "update",
    "really",
    "gon",
    "na",
    "two",
    "objects",
    "could",
    "even",
    "try",
    "one",
    "object",
    "depending",
    "performance",
    "see",
    "looks",
    "like",
    "going",
    "import",
    "dependencies",
    "need",
    "let",
    "actually",
    "test",
    "webcam",
    "make",
    "sure",
    "pointing",
    "appropriately",
    "let",
    "wait",
    "open",
    "cool",
    "good",
    "move",
    "collect",
    "images",
    "maybe",
    "like",
    "happy",
    "like",
    "sad",
    "like",
    "sad",
    "like",
    "face",
    "covered",
    "got",
    "really",
    "clear",
    "defined",
    "objects",
    "camera",
    "got",
    "raspberry",
    "pi",
    "good",
    "webcam",
    "using",
    "pc",
    "well",
    "another",
    "thing",
    "keep",
    "mind",
    "let",
    "go",
    "ahead",
    "got",
    "labels",
    "going",
    "collect",
    "images",
    "happy",
    "sad",
    "probably",
    "clear",
    "existing",
    "images",
    "go",
    "tensorflow",
    "workspace",
    "images",
    "collected",
    "images",
    "remember",
    "left",
    "right",
    "different",
    "images",
    "delete",
    "need",
    "anymore",
    "going",
    "collect",
    "images",
    "sentiment",
    "detector",
    "happy",
    "sad",
    "first",
    "need",
    "create",
    "paths",
    "step",
    "three",
    "created",
    "path",
    "see",
    "got",
    "happy",
    "sad",
    "going",
    "collect",
    "images",
    "going",
    "collect",
    "five",
    "images",
    "could",
    "change",
    "wanted",
    "going",
    "get",
    "position",
    "collect",
    "let",
    "run",
    "wait",
    "little",
    "little",
    "away",
    "mic",
    "oh",
    "running",
    "happy",
    "right",
    "think",
    "sad",
    "sad",
    "covering",
    "face",
    "sorry",
    "probably",
    "ca",
    "hear",
    "trying",
    "see",
    "fingers",
    "alright",
    "cool",
    "right",
    "images",
    "collected",
    "let",
    "go",
    "take",
    "look",
    "got",
    "insider",
    "happy",
    "probably",
    "love",
    "photo",
    "great",
    "dumb",
    "struck",
    "okay",
    "gon",
    "na",
    "delete",
    "one",
    "gon",
    "na",
    "delete",
    "one",
    "okay",
    "want",
    "smiling",
    "right",
    "cool",
    "fine",
    "sad",
    "sad",
    "us",
    "covering",
    "face",
    "going",
    "happy",
    "let",
    "collect",
    "images",
    "happy",
    "remember",
    "isolate",
    "want",
    "want",
    "three",
    "images",
    "happy",
    "let",
    "done",
    "removed",
    "sad",
    "labels",
    "array",
    "labels",
    "list",
    "python",
    "want",
    "three",
    "images",
    "got",
    "even",
    "number",
    "happy",
    "sad",
    "images",
    "let",
    "run",
    "run",
    "capture",
    "going",
    "try",
    "happy",
    "time",
    "wait",
    "okay",
    "cool",
    "let",
    "go",
    "take",
    "look",
    "images",
    "one",
    "yeah",
    "right",
    "whatever",
    "count",
    "happy",
    "fine",
    "fine",
    "fine",
    "fine",
    "okay",
    "cool",
    "got",
    "images",
    "might",
    "guessed",
    "going",
    "go",
    "label",
    "images",
    "need",
    "define",
    "label",
    "path",
    "per",
    "usual",
    "spin",
    "label",
    "image",
    "let",
    "go",
    "ahead",
    "going",
    "go",
    "back",
    "images",
    "workspace",
    "images",
    "collected",
    "images",
    "happy",
    "labeling",
    "going",
    "say",
    "happy",
    "save",
    "save",
    "happy",
    "caps",
    "okay",
    "pay",
    "attention",
    "capitalization",
    "super",
    "important",
    "case",
    "super",
    "important",
    "majority",
    "course",
    "green",
    "background",
    "could",
    "obviously",
    "without",
    "green",
    "background",
    "green",
    "screen",
    "taking",
    "photos",
    "green",
    "screen",
    "okay",
    "still",
    "work",
    "without",
    "saw",
    "took",
    "tested",
    "without",
    "green",
    "screen",
    "going",
    "switch",
    "sad",
    "folder",
    "already",
    "done",
    "happy",
    "let",
    "sad",
    "let",
    "capture",
    "everything",
    "sad",
    "sad",
    "nick",
    "right",
    "going",
    "next",
    "one",
    "good",
    "keeping",
    "going",
    "making",
    "sure",
    "detections",
    "labels",
    "really",
    "close",
    "possible",
    "correct",
    "sad",
    "saving",
    "object",
    "makes",
    "sure",
    "actually",
    "going",
    "effort",
    "forgetting",
    "save",
    "perfect",
    "okay",
    "cool",
    "let",
    "check",
    "fine",
    "fine",
    "one",
    "one",
    "okay",
    "cool",
    "good",
    "let",
    "open",
    "happy",
    "directory",
    "sure",
    "saved",
    "fine",
    "fine",
    "fine",
    "also",
    "another",
    "thing",
    "know",
    "right",
    "go",
    "back",
    "open",
    "directory",
    "images",
    "wanted",
    "go",
    "update",
    "label",
    "example",
    "say",
    "example",
    "wanted",
    "microphones",
    "could",
    "go",
    "label",
    "microphone",
    "type",
    "microphone",
    "want",
    "going",
    "screw",
    "case",
    "want",
    "happy",
    "sad",
    "say",
    "example",
    "wanted",
    "edit",
    "like",
    "capture",
    "fortune",
    "go",
    "make",
    "update",
    "hit",
    "save",
    "able",
    "go",
    "overwrite",
    "oh",
    "looks",
    "like",
    "gone",
    "killed",
    "let",
    "go",
    "make",
    "sure",
    "still",
    "got",
    "uh",
    "yep",
    "still",
    "good",
    "sort",
    "get",
    "idea",
    "open",
    "folder",
    "make",
    "updates",
    "alrighty",
    "per",
    "usual",
    "going",
    "go",
    "ahead",
    "save",
    "move",
    "annotations",
    "training",
    "test",
    "folders",
    "going",
    "go",
    "back",
    "images",
    "folder",
    "going",
    "delete",
    "everything",
    "test",
    "folder",
    "train",
    "folder",
    "directions",
    "going",
    "go",
    "grab",
    "collected",
    "images",
    "happy",
    "grab",
    "four",
    "four",
    "nope",
    "yep",
    "remember",
    "got",
    "grab",
    "annotation",
    "image",
    "going",
    "paste",
    "train",
    "80",
    "split",
    "got",
    "one",
    "image",
    "left",
    "inside",
    "test",
    "folder",
    "thing",
    "sad",
    "sorry",
    "little",
    "whining",
    "microphone",
    "got",
    "raspberry",
    "pi",
    "running",
    "already",
    "little",
    "loud",
    "going",
    "copy",
    "going",
    "test",
    "images",
    "oh",
    "right",
    "test",
    "images",
    "actually",
    "inside",
    "train",
    "let",
    "cut",
    "paste",
    "train",
    "cool",
    "eight",
    "images",
    "train",
    "two",
    "images",
    "tests",
    "got",
    "ta",
    "go",
    "get",
    "one",
    "let",
    "grab",
    "sad",
    "one",
    "let",
    "paste",
    "okay",
    "cool",
    "good",
    "go",
    "test",
    "folder",
    "got",
    "two",
    "images",
    "go",
    "train",
    "folder",
    "got",
    "eight",
    "images",
    "pretty",
    "cool",
    "build",
    "like",
    "object",
    "detection",
    "model",
    "eight",
    "images",
    "right",
    "super",
    "powerful",
    "happy",
    "pretty",
    "sure",
    "already",
    "moved",
    "actually",
    "go",
    "delete",
    "folders",
    "inside",
    "collected",
    "images",
    "need",
    "anymore",
    "okay",
    "next",
    "thing",
    "need",
    "go",
    "back",
    "training",
    "model",
    "going",
    "go",
    "ahead",
    "train",
    "new",
    "model",
    "time",
    "going",
    "call",
    "model",
    "sentiment",
    "sentiment",
    "model",
    "object",
    "detection",
    "model",
    "could",
    "obviously",
    "extend",
    "running",
    "make",
    "sure",
    "virtual",
    "environment",
    "going",
    "hit",
    "go",
    "path",
    "steps",
    "import",
    "operating",
    "system",
    "set",
    "new",
    "custom",
    "model",
    "name",
    "set",
    "paths",
    "files",
    "actually",
    "create",
    "paths",
    "go",
    "workspace",
    "models",
    "see",
    "got",
    "sentiment",
    "folder",
    "already",
    "set",
    "need",
    "step",
    "number",
    "one",
    "right",
    "start",
    "set",
    "tensorflow",
    "models",
    "model",
    "zoo",
    "installed",
    "tensorflow",
    "object",
    "detection",
    "need",
    "update",
    "label",
    "map",
    "step",
    "two",
    "gon",
    "na",
    "say",
    "happy",
    "sad",
    "save",
    "gon",
    "na",
    "hit",
    "shift",
    "enter",
    "create",
    "label",
    "map",
    "go",
    "check",
    "label",
    "map",
    "go",
    "workspace",
    "annotations",
    "let",
    "open",
    "inside",
    "vs",
    "code",
    "looking",
    "good",
    "got",
    "happy",
    "sad",
    "good",
    "go",
    "create",
    "tf",
    "records",
    "step",
    "skip",
    "collab",
    "step",
    "run",
    "cell",
    "going",
    "ideally",
    "create",
    "tf",
    "records",
    "without",
    "issue",
    "cool",
    "gone",
    "created",
    "per",
    "usual",
    "going",
    "copy",
    "model",
    "config",
    "custom",
    "model",
    "folder",
    "let",
    "going",
    "update",
    "using",
    "steps",
    "go",
    "double",
    "check",
    "gone",
    "updated",
    "go",
    "sentiment",
    "folder",
    "open",
    "pipeline",
    "per",
    "usual",
    "let",
    "open",
    "one",
    "vs",
    "code",
    "got",
    "correct",
    "number",
    "classes",
    "scroll",
    "way",
    "bottom",
    "importantly",
    "gone",
    "reset",
    "fine",
    "tune",
    "checkpoint",
    "label",
    "map",
    "path",
    "input",
    "path",
    "forth",
    "good",
    "go",
    "cool",
    "next",
    "thing",
    "need",
    "per",
    "usual",
    "train",
    "model",
    "going",
    "generate",
    "command",
    "going",
    "go",
    "ahead",
    "paste",
    "command",
    "prompt",
    "per",
    "usual",
    "need",
    "make",
    "sure",
    "virtual",
    "environment",
    "enabled",
    "need",
    "make",
    "sure",
    "top",
    "level",
    "directory",
    "able",
    "see",
    "tensorflow",
    "tfod",
    "gon",
    "na",
    "go",
    "ahead",
    "paste",
    "training",
    "command",
    "let",
    "run",
    "right",
    "back",
    "gon",
    "na",
    "paste",
    "right",
    "back",
    "cool",
    "kicking",
    "right",
    "back",
    "righty",
    "sentiment",
    "modeled",
    "finished",
    "training",
    "full",
    "transparency",
    "run",
    "error",
    "kicked",
    "training",
    "run",
    "anything",
    "wrote",
    "terms",
    "code",
    "vram",
    "available",
    "particular",
    "pc",
    "taken",
    "order",
    "solve",
    "particular",
    "error",
    "stop",
    "jupyter",
    "notebook",
    "consuming",
    "vram",
    "take",
    "look",
    "want",
    "actually",
    "show",
    "error",
    "pretty",
    "common",
    "particularly",
    "working",
    "gpu",
    "machine",
    "see",
    "area",
    "anywhere",
    "q",
    "blast",
    "underscore",
    "status",
    "underscore",
    "alloc",
    "underscore",
    "failed",
    "anything",
    "along",
    "lines",
    "normally",
    "means",
    "see",
    "similar",
    "one",
    "bottom",
    "underscore",
    "status",
    "underscore",
    "alloc",
    "failed",
    "normally",
    "means",
    "gpu",
    "completely",
    "consumed",
    "go",
    "take",
    "look",
    "inside",
    "task",
    "manager",
    "gpu",
    "memory",
    "completely",
    "consumed",
    "try",
    "run",
    "training",
    "run",
    "going",
    "bad",
    "time",
    "ideally",
    "want",
    "stop",
    "anything",
    "might",
    "using",
    "gpu",
    "point",
    "time",
    "kick",
    "training",
    "case",
    "went",
    "ran",
    "training",
    "command",
    "see",
    "sort",
    "errored",
    "stopped",
    "went",
    "ran",
    "training",
    "run",
    "ran",
    "successfully",
    "right",
    "bottom",
    "lots",
    "lines",
    "right",
    "bottom",
    "see",
    "got",
    "loss",
    "metrics",
    "appearing",
    "step",
    "2000",
    "final",
    "loss",
    "take",
    "look",
    "inside",
    "model",
    "folder",
    "specifically",
    "sentiment",
    "folder",
    "got",
    "checkpoints",
    "generated",
    "well",
    "okay",
    "next",
    "thing",
    "stopped",
    "notebooks",
    "stopped",
    "notebook",
    "see",
    "definitely",
    "running",
    "need",
    "start",
    "back",
    "close",
    "one",
    "open",
    "back",
    "need",
    "import",
    "operating",
    "system",
    "import",
    "paths",
    "scroll",
    "need",
    "labels",
    "array",
    "important",
    "go",
    "way",
    "step",
    "8",
    "able",
    "reload",
    "stuff",
    "double",
    "check",
    "latest",
    "checkpoint",
    "case",
    "checkpoint",
    "three",
    "fine",
    "checkpoint",
    "three",
    "step",
    "eight",
    "import",
    "model",
    "gon",
    "na",
    "test",
    "go",
    "push",
    "raspberry",
    "pi",
    "let",
    "import",
    "model",
    "going",
    "skip",
    "image",
    "could",
    "wanted",
    "um",
    "going",
    "jump",
    "straight",
    "real",
    "time",
    "see",
    "sentiment",
    "looks",
    "like",
    "let",
    "run",
    "cv2",
    "defined",
    "error",
    "skipped",
    "importing",
    "cv2",
    "rerun",
    "ideally",
    "get",
    "detection",
    "close",
    "task",
    "manager",
    "need",
    "seen",
    "webcam",
    "start",
    "see",
    "little",
    "light",
    "looks",
    "like",
    "got",
    "error",
    "category",
    "index",
    "defined",
    "easy",
    "fix",
    "need",
    "whenever",
    "restart",
    "notebook",
    "going",
    "things",
    "obviously",
    "got",
    "import",
    "import",
    "category",
    "index",
    "try",
    "might",
    "actually",
    "error",
    "release",
    "captcha",
    "wait",
    "see",
    "oh",
    "good",
    "right",
    "saying",
    "happy",
    "sad",
    "looking",
    "sad",
    "happy",
    "pretty",
    "cool",
    "right",
    "like",
    "lightweight",
    "sentiment",
    "model",
    "chasing",
    "head",
    "around",
    "put",
    "head",
    "actually",
    "take",
    "go",
    "sad",
    "bring",
    "hands",
    "starting",
    "get",
    "closer",
    "sad",
    "go",
    "way",
    "cover",
    "face",
    "sad",
    "unhide",
    "face",
    "happy",
    "sort",
    "see",
    "models",
    "pretty",
    "much",
    "build",
    "whatever",
    "like",
    "kind",
    "love",
    "tensorflow",
    "object",
    "detect",
    "love",
    "tensorflow",
    "object",
    "detection",
    "api",
    "really",
    "reasonably",
    "quick",
    "got",
    "set",
    "need",
    "go",
    "set",
    "stuff",
    "time",
    "looking",
    "like",
    "still",
    "saying",
    "happy",
    "get",
    "position",
    "saying",
    "sad",
    "play",
    "around",
    "love",
    "chasing",
    "head",
    "around",
    "cool",
    "right",
    "case",
    "happy",
    "want",
    "take",
    "little",
    "bit",
    "actually",
    "push",
    "raspberry",
    "pi",
    "going",
    "quit",
    "hitting",
    "q",
    "keyboard",
    "going",
    "freeze",
    "graph",
    "going",
    "go",
    "step",
    "need",
    "go",
    "conversion",
    "tfjs",
    "time",
    "need",
    "everything",
    "step",
    "10",
    "everything",
    "step",
    "12",
    "order",
    "get",
    "work",
    "going",
    "going",
    "run",
    "step",
    "10",
    "freeze",
    "graph",
    "run",
    "steps",
    "including",
    "command",
    "run",
    "one",
    "command",
    "notebook",
    "generate",
    "export",
    "file",
    "generated",
    "able",
    "run",
    "tf",
    "light",
    "conversion",
    "lot",
    "scripts",
    "sort",
    "sort",
    "pick",
    "leverage",
    "let",
    "give",
    "sec",
    "happening",
    "let",
    "take",
    "look",
    "steps",
    "need",
    "go",
    "order",
    "build",
    "raspberry",
    "pi",
    "detection",
    "third",
    "final",
    "github",
    "repository",
    "sort",
    "made",
    "available",
    "written",
    "tensorflow",
    "object",
    "detection",
    "walkthrough",
    "raspberry",
    "pi",
    "steps",
    "need",
    "go",
    "get",
    "running",
    "first",
    "going",
    "start",
    "going",
    "tensorflow",
    "object",
    "detection",
    "course",
    "create",
    "tf",
    "light",
    "files",
    "clone",
    "raspberry",
    "pi",
    "either",
    "clone",
    "raspberry",
    "pi",
    "download",
    "pc",
    "copy",
    "remote",
    "desktop",
    "connection",
    "terms",
    "remote",
    "desktop",
    "connection",
    "actually",
    "using",
    "something",
    "called",
    "xrdp",
    "allows",
    "remote",
    "desktop",
    "remote",
    "raspberry",
    "pi",
    "actually",
    "pretty",
    "cool",
    "makes",
    "life",
    "whole",
    "lot",
    "easier",
    "code",
    "raspberry",
    "pi",
    "local",
    "pc",
    "without",
    "actually",
    "go",
    "raspberry",
    "pi",
    "code",
    "actually",
    "still",
    "executing",
    "raspberry",
    "pi",
    "done",
    "got",
    "install",
    "bunch",
    "dependencies",
    "copy",
    "converted",
    "model",
    "run",
    "let",
    "go",
    "ahead",
    "okay",
    "gone",
    "frozen",
    "graph",
    "see",
    "got",
    "checkpoint",
    "saved",
    "model",
    "pipeline",
    "file",
    "good",
    "go",
    "need",
    "convert",
    "tf",
    "lite",
    "going",
    "happen",
    "inside",
    "tf",
    "light",
    "export",
    "folder",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "results",
    "pop",
    "let",
    "bring",
    "side",
    "cool",
    "run",
    "everything",
    "step",
    "12",
    "know",
    "focus",
    "putting",
    "side",
    "right",
    "going",
    "run",
    "everything",
    "step",
    "12",
    "tf",
    "flight",
    "script",
    "ideally",
    "generate",
    "tier",
    "flight",
    "export",
    "exports",
    "looking",
    "file",
    "called",
    "core",
    "file",
    "going",
    "able",
    "leverage",
    "inside",
    "raspberry",
    "pi",
    "already",
    "got",
    "raspberry",
    "pi",
    "remote",
    "desktop",
    "already",
    "remoted",
    "hooked",
    "want",
    "say",
    "able",
    "jump",
    "take",
    "look",
    "well",
    "let",
    "give",
    "sec",
    "able",
    "kick",
    "things",
    "okay",
    "first",
    "part",
    "done",
    "second",
    "see",
    "see",
    "inside",
    "tier",
    "flight",
    "export",
    "got",
    "saved",
    "model",
    "folder",
    "second",
    "command",
    "runs",
    "available",
    "able",
    "pick",
    "leverage",
    "cool",
    "see",
    "got",
    "detect",
    "tier",
    "flights",
    "little",
    "bit",
    "small",
    "make",
    "bit",
    "bigger",
    "file",
    "take",
    "look",
    "steps",
    "done",
    "steps",
    "tfod",
    "rpi",
    "repository",
    "raspberry",
    "pi",
    "code",
    "particular",
    "case",
    "going",
    "clone",
    "repository",
    "going",
    "jump",
    "raspberry",
    "pi",
    "right",
    "see",
    "remote",
    "desktop",
    "going",
    "create",
    "new",
    "file",
    "new",
    "folder",
    "actually",
    "going",
    "call",
    "sentiment",
    "going",
    "jump",
    "actually",
    "going",
    "open",
    "inside",
    "vs",
    "code",
    "got",
    "vs",
    "code",
    "installed",
    "raspberry",
    "pi",
    "cool",
    "nothing",
    "yet",
    "going",
    "open",
    "terminal",
    "bash",
    "terminal",
    "going",
    "type",
    "git",
    "clone",
    "paste",
    "link",
    "uh",
    "link",
    "oh",
    "already",
    "git",
    "clone",
    "need",
    "type",
    "git",
    "clean",
    "let",
    "clear",
    "let",
    "make",
    "bit",
    "bigger",
    "well",
    "see",
    "right",
    "going",
    "paste",
    "command",
    "git",
    "clone",
    "tensorflow",
    "object",
    "detection",
    "repository",
    "see",
    "got",
    "starting",
    "come",
    "got",
    "couple",
    "things",
    "got",
    "detect",
    "pi",
    "file",
    "main",
    "file",
    "actually",
    "going",
    "use",
    "run",
    "detection",
    "good",
    "stuff",
    "actually",
    "got",
    "existing",
    "lite",
    "model",
    "actually",
    "run",
    "bat",
    "without",
    "actually",
    "anything",
    "else",
    "case",
    "simple",
    "basic",
    "hello",
    "model",
    "actually",
    "though",
    "couple",
    "key",
    "dependencies",
    "need",
    "install",
    "listed",
    "readme",
    "actually",
    "bring",
    "see",
    "got",
    "bunch",
    "files",
    "actually",
    "need",
    "install",
    "specifically",
    "required",
    "able",
    "work",
    "opencv",
    "last",
    "one",
    "actually",
    "installing",
    "python",
    "tflight",
    "runtime",
    "really",
    "really",
    "important",
    "dependencies",
    "available",
    "going",
    "mean",
    "difference",
    "model",
    "running",
    "running",
    "go",
    "one",
    "install",
    "already",
    "got",
    "configured",
    "good",
    "let",
    "go",
    "ahead",
    "going",
    "paste",
    "first",
    "command",
    "let",
    "copy",
    "going",
    "install",
    "opencv",
    "python",
    "looks",
    "like",
    "already",
    "installed",
    "install",
    "dependencies",
    "um",
    "opencv",
    "specifically",
    "need",
    "install",
    "well",
    "order",
    "work",
    "going",
    "copy",
    "install",
    "looks",
    "like",
    "package",
    "right",
    "got",
    "go",
    "rest",
    "well",
    "let",
    "go",
    "ahead",
    "install",
    "copy",
    "paste",
    "seem",
    "want",
    "work",
    "going",
    "manually",
    "cool",
    "next",
    "one",
    "done",
    "going",
    "one",
    "packages",
    "need",
    "install",
    "going",
    "installing",
    "copy",
    "paste",
    "sort",
    "wanted",
    "show",
    "scratch",
    "least",
    "sort",
    "see",
    "actually",
    "get",
    "running",
    "next",
    "one",
    "done",
    "looks",
    "like",
    "lot",
    "already",
    "installed",
    "going",
    "reasonably",
    "quickly",
    "actually",
    "installing",
    "cool",
    "okay",
    "packages",
    "installed",
    "done",
    "right",
    "got",
    "couple",
    "packages",
    "left",
    "let",
    "go",
    "ahead",
    "one",
    "cool",
    "one",
    "awesome",
    "normally",
    "generic",
    "update",
    "update",
    "install",
    "tier",
    "flight",
    "runtime",
    "last",
    "one",
    "important",
    "one",
    "one",
    "actually",
    "going",
    "allow",
    "leverage",
    "tier",
    "flight",
    "runtime",
    "without",
    "explicitly",
    "go",
    "install",
    "full",
    "tensorflow",
    "object",
    "detection",
    "api",
    "got",
    "line",
    "done",
    "pretty",
    "much",
    "home",
    "free",
    "let",
    "let",
    "run",
    "sec",
    "good",
    "go",
    "update",
    "done",
    "cool",
    "done",
    "last",
    "one",
    "going",
    "install",
    "tf",
    "light",
    "runtimes",
    "saying",
    "main",
    "package",
    "allows",
    "leverage",
    "tf",
    "light",
    "model",
    "specifically",
    "object",
    "detection",
    "model",
    "within",
    "raspberry",
    "pi",
    "going",
    "copy",
    "available",
    "readme",
    "fret",
    "picked",
    "exactly",
    "command",
    "fine",
    "going",
    "available",
    "cool",
    "already",
    "installed",
    "rather",
    "running",
    "custom",
    "model",
    "first",
    "want",
    "show",
    "leverage",
    "model",
    "already",
    "sort",
    "get",
    "feel",
    "going",
    "look",
    "like",
    "run",
    "let",
    "clear",
    "commands",
    "need",
    "cd",
    "particular",
    "directory",
    "right",
    "let",
    "type",
    "ls",
    "right",
    "got",
    "subfolder",
    "right",
    "tfod",
    "rpi",
    "going",
    "cd",
    "type",
    "ls",
    "got",
    "main",
    "folders",
    "run",
    "need",
    "run",
    "python3",
    "detect",
    "dot",
    "pi",
    "let",
    "go",
    "ahead",
    "run",
    "python",
    "3",
    "detect",
    "dot",
    "pi",
    "things",
    "holding",
    "equal",
    "okay",
    "got",
    "object",
    "detection",
    "box",
    "opening",
    "straight",
    "hello",
    "model",
    "see",
    "little",
    "bit",
    "slow",
    "running",
    "raspberry",
    "pi",
    "crazy",
    "fast",
    "sort",
    "see",
    "detecting",
    "hello",
    "detecting",
    "face",
    "accurate",
    "model",
    "sort",
    "get",
    "feel",
    "possible",
    "right",
    "bring",
    "hand",
    "little",
    "bit",
    "closer",
    "start",
    "see",
    "making",
    "detections",
    "raspberry",
    "pi",
    "right",
    "okay",
    "hit",
    "q",
    "close",
    "per",
    "usual",
    "want",
    "actually",
    "want",
    "custom",
    "model",
    "order",
    "need",
    "go",
    "back",
    "actually",
    "saved",
    "file",
    "copy",
    "paste",
    "repository",
    "going",
    "going",
    "paste",
    "without",
    "idping",
    "could",
    "definitely",
    "transfer",
    "like",
    "save",
    "google",
    "drive",
    "box",
    "folder",
    "bring",
    "case",
    "idp",
    "available",
    "makes",
    "lot",
    "faster",
    "going",
    "copy",
    "replace",
    "overwrite",
    "cool",
    "good",
    "need",
    "last",
    "thing",
    "need",
    "specifically",
    "need",
    "update",
    "file",
    "really",
    "need",
    "update",
    "custom",
    "labels",
    "remember",
    "remember",
    "correctly",
    "two",
    "custom",
    "labels",
    "happy",
    "sad",
    "double",
    "checking",
    "order",
    "remember",
    "happy",
    "id1",
    "sad",
    "id2",
    "let",
    "go",
    "ahead",
    "going",
    "make",
    "happy",
    "first",
    "object",
    "sad",
    "second",
    "object",
    "hit",
    "save",
    "things",
    "holding",
    "equal",
    "run",
    "detect",
    "dot",
    "pi",
    "python",
    "3",
    "effectively",
    "running",
    "custom",
    "model",
    "let",
    "clear",
    "let",
    "try",
    "order",
    "run",
    "going",
    "run",
    "python3",
    "detect",
    "dot",
    "pi",
    "see",
    "get",
    "detection",
    "trained",
    "long",
    "moment",
    "little",
    "bit",
    "slower",
    "going",
    "idp",
    "look",
    "like",
    "getting",
    "detections",
    "indicated",
    "based",
    "seeing",
    "looks",
    "like",
    "got",
    "random",
    "one",
    "looks",
    "like",
    "real",
    "reasonably",
    "low",
    "quality",
    "might",
    "want",
    "drop",
    "detection",
    "threshold",
    "going",
    "detect",
    "dot",
    "pi",
    "actually",
    "change",
    "actually",
    "line",
    "line",
    "68",
    "change",
    "let",
    "try",
    "dropping",
    "know",
    "20",
    "percent",
    "changing",
    "rerun",
    "rerun",
    "command",
    "going",
    "run",
    "python",
    "3",
    "detect",
    "apply",
    "let",
    "see",
    "get",
    "detections",
    "looking",
    "like",
    "getting",
    "detections",
    "already",
    "okay",
    "getting",
    "one",
    "big",
    "sad",
    "getting",
    "happy",
    "looking",
    "like",
    "fake",
    "detection",
    "go",
    "detecting",
    "happy",
    "chad",
    "time",
    "sort",
    "get",
    "idea",
    "right",
    "could",
    "definitely",
    "train",
    "lot",
    "longer",
    "getting",
    "false",
    "detections",
    "great",
    "detecting",
    "sad",
    "let",
    "look",
    "look",
    "like",
    "great",
    "detecting",
    "sad",
    "sort",
    "get",
    "idea",
    "obviously",
    "train",
    "lot",
    "longer",
    "performance",
    "tested",
    "trained",
    "eight",
    "images",
    "well",
    "obviously",
    "camera",
    "raspberry",
    "pi",
    "going",
    "different",
    "trained",
    "going",
    "get",
    "different",
    "performance",
    "crossover",
    "another",
    "thing",
    "keep",
    "mind",
    "go",
    "happy",
    "see",
    "definitely",
    "picking",
    "us",
    "little",
    "bit",
    "lag",
    "going",
    "idp",
    "go",
    "sad",
    "let",
    "see",
    "least",
    "get",
    "one",
    "sad",
    "detection",
    "move",
    "little",
    "lots",
    "happiness",
    "weirdly",
    "enough",
    "let",
    "try",
    "dropping",
    "green",
    "screen",
    "got",
    "one",
    "big",
    "sad",
    "right",
    "detecting",
    "sad",
    "somewhere",
    "best",
    "result",
    "would",
    "say",
    "drawing",
    "big",
    "box",
    "around",
    "sad",
    "smile",
    "best",
    "generalized",
    "model",
    "sort",
    "shows",
    "possible",
    "right",
    "gives",
    "idea",
    "go",
    "making",
    "detections",
    "raspberry",
    "pi",
    "looks",
    "like",
    "pretty",
    "happy",
    "detecting",
    "happy",
    "maybe",
    "sad",
    "much",
    "wanted",
    "performance",
    "tune",
    "going",
    "add",
    "images",
    "sad",
    "particular",
    "case",
    "different",
    "lighting",
    "conditions",
    "probably",
    "drop",
    "lighting",
    "feed",
    "raspberry",
    "pi",
    "bright",
    "webcam",
    "got",
    "computer",
    "sort",
    "see",
    "ways",
    "tune",
    "ways",
    "go",
    "deploy",
    "model",
    "whole",
    "bunch",
    "projects",
    "sort",
    "take",
    "away",
    "go",
    "build",
    "performance",
    "sentiment",
    "model",
    "okay",
    "editing",
    "could",
    "help",
    "thinking",
    "could",
    "much",
    "better",
    "ended",
    "performing",
    "additional",
    "performance",
    "tuning",
    "ideally",
    "eek",
    "little",
    "bit",
    "additional",
    "performance",
    "model",
    "ocd",
    "overdrive",
    "decided",
    "let",
    "run",
    "free",
    "try",
    "get",
    "performing",
    "little",
    "bit",
    "better",
    "happened",
    "editing",
    "could",
    "help",
    "thinking",
    "really",
    "wanted",
    "get",
    "better",
    "performance",
    "sentiment",
    "model",
    "went",
    "step",
    "six",
    "part",
    "six",
    "course",
    "went",
    "performance",
    "tuning",
    "step",
    "added",
    "images",
    "performing",
    "classes",
    "performing",
    "well",
    "case",
    "added",
    "sad",
    "sentiment",
    "happy",
    "sentiment",
    "ended",
    "training",
    "model",
    "longer",
    "really",
    "need",
    "change",
    "architecture",
    "performance",
    "boost",
    "would",
    "next",
    "step",
    "let",
    "take",
    "look",
    "actually",
    "first",
    "added",
    "number",
    "additional",
    "images",
    "see",
    "added",
    "20",
    "additional",
    "images",
    "actually",
    "open",
    "see",
    "got",
    "images",
    "number",
    "different",
    "angles",
    "gives",
    "boosts",
    "chances",
    "model",
    "generalizes",
    "well",
    "also",
    "took",
    "green",
    "screen",
    "ideally",
    "see",
    "impact",
    "whether",
    "performance",
    "going",
    "boost",
    "boost",
    "keep",
    "taking",
    "look",
    "see",
    "got",
    "images",
    "whole",
    "bunch",
    "different",
    "angles",
    "also",
    "images",
    "looking",
    "happy",
    "well",
    "see",
    "moving",
    "head",
    "around",
    "gives",
    "model",
    "better",
    "chance",
    "actually",
    "able",
    "detect",
    "head",
    "green",
    "screen",
    "also",
    "green",
    "screen",
    "see",
    "bunch",
    "different",
    "angles",
    "went",
    "labeling",
    "step",
    "created",
    "new",
    "images",
    "went",
    "labeled",
    "first",
    "thing",
    "second",
    "thing",
    "went",
    "trained",
    "model",
    "longer",
    "actually",
    "show",
    "ended",
    "training",
    "kicked",
    "training",
    "10",
    "000",
    "steps",
    "see",
    "10",
    "000",
    "actually",
    "stopped",
    "5600",
    "steps",
    "kind",
    "getting",
    "impatient",
    "wanted",
    "test",
    "trained",
    "additional",
    "5600",
    "steps",
    "gave",
    "brand",
    "new",
    "model",
    "retrain",
    "existing",
    "model",
    "actually",
    "went",
    "performance",
    "tuned",
    "created",
    "new",
    "model",
    "actually",
    "take",
    "look",
    "exactly",
    "performance",
    "tuning",
    "step",
    "went",
    "workspace",
    "models",
    "see",
    "got",
    "model",
    "called",
    "sentiment",
    "two",
    "checkpoint",
    "went",
    "way",
    "checkpoint",
    "six",
    "see",
    "trained",
    "longer",
    "checkpoint",
    "greater",
    "index",
    "went",
    "steps",
    "went",
    "converted",
    "frozen",
    "tf",
    "like",
    "graph",
    "went",
    "converted",
    "tf",
    "light",
    "model",
    "brought",
    "raspberry",
    "pi",
    "particular",
    "model",
    "model",
    "trained",
    "5600",
    "steps",
    "trained",
    "20",
    "additional",
    "images",
    "core",
    "changes",
    "made",
    "try",
    "running",
    "model",
    "let",
    "take",
    "look",
    "performance",
    "type",
    "python",
    "3",
    "let",
    "bring",
    "little",
    "bit",
    "detect",
    "dot",
    "play",
    "see",
    "detecting",
    "happy",
    "getting",
    "false",
    "detections",
    "smile",
    "good",
    "let",
    "test",
    "sad",
    "remember",
    "sad",
    "working",
    "right",
    "key",
    "thing",
    "wanted",
    "test",
    "put",
    "hands",
    "face",
    "see",
    "detecting",
    "fact",
    "sad",
    "much",
    "better",
    "performing",
    "model",
    "take",
    "green",
    "screen",
    "let",
    "take",
    "look",
    "performance",
    "well",
    "right",
    "performing",
    "well",
    "green",
    "screen",
    "took",
    "green",
    "screen",
    "still",
    "detecting",
    "happy",
    "try",
    "sad",
    "put",
    "hands",
    "face",
    "see",
    "getting",
    "significantly",
    "better",
    "performance",
    "see",
    "little",
    "label",
    "bottom",
    "corner",
    "performing",
    "way",
    "better",
    "really",
    "added",
    "additional",
    "images",
    "trained",
    "5600",
    "steps",
    "see",
    "power",
    "performance",
    "tuning",
    "get",
    "best",
    "performance",
    "first",
    "time",
    "around",
    "mean",
    "ca",
    "go",
    "improve",
    "performance",
    "able",
    "generate",
    "better",
    "results",
    "really",
    "shows",
    "power",
    "performance",
    "tuning",
    "particular",
    "case",
    "editing",
    "nick",
    "note",
    "let",
    "quick",
    "recap",
    "last",
    "final",
    "project",
    "sentiment",
    "analysis",
    "went",
    "collected",
    "images",
    "using",
    "standard",
    "image",
    "collection",
    "capability",
    "went",
    "labeled",
    "happy",
    "sad",
    "detections",
    "also",
    "went",
    "created",
    "updated",
    "label",
    "map",
    "trained",
    "model",
    "core",
    "difference",
    "previous",
    "two",
    "projects",
    "obviously",
    "went",
    "converted",
    "tf",
    "flight",
    "capability",
    "went",
    "rdp",
    "raspberry",
    "pi",
    "saved",
    "model",
    "ran",
    "detect",
    "pi",
    "script",
    "able",
    "detect",
    "happy",
    "looks",
    "like",
    "could",
    "performance",
    "tune",
    "could",
    "make",
    "lot",
    "better",
    "lot",
    "training",
    "lot",
    "images",
    "got",
    "possibility",
    "go",
    "make",
    "better",
    "let",
    "know",
    "love",
    "see",
    "build",
    "better",
    "sentiment",
    "analysis",
    "app",
    "great",
    "see",
    "think",
    "something",
    "super",
    "useful",
    "um",
    "note",
    "wraps",
    "third",
    "final",
    "project",
    "went",
    "first",
    "project",
    "microscope",
    "detection",
    "second",
    "project",
    "directional",
    "model",
    "third",
    "final",
    "project",
    "raspberry",
    "pi",
    "sentiment",
    "model",
    "also",
    "note",
    "wraps",
    "object",
    "detection",
    "course",
    "hopefully",
    "found",
    "useful",
    "got",
    "feedback",
    "comments",
    "need",
    "help",
    "means",
    "hit",
    "comments",
    "thanks",
    "wraps",
    "thanks",
    "much",
    "tuning",
    "guys",
    "hopefully",
    "enjoyed",
    "full",
    "object",
    "detection",
    "course",
    "please",
    "let",
    "know",
    "problems",
    "need",
    "hand",
    "means",
    "hit",
    "comments",
    "also",
    "join",
    "discord",
    "channel",
    "really",
    "active",
    "got",
    "questions",
    "need",
    "help",
    "want",
    "join",
    "community",
    "means",
    "jump",
    "thanks",
    "tuning",
    "peace"
  ],
  "keywords": [
    "uh",
    "green",
    "box",
    "around",
    "one",
    "want",
    "able",
    "detect",
    "anything",
    "using",
    "tensorflow",
    "object",
    "detection",
    "course",
    "name",
    "video",
    "going",
    "full",
    "whatever",
    "use",
    "case",
    "wanted",
    "specifically",
    "four",
    "different",
    "code",
    "actually",
    "got",
    "objects",
    "done",
    "open",
    "tools",
    "python",
    "could",
    "used",
    "whole",
    "say",
    "example",
    "face",
    "sign",
    "thing",
    "well",
    "go",
    "installation",
    "show",
    "training",
    "also",
    "really",
    "part",
    "build",
    "models",
    "export",
    "tf",
    "run",
    "web",
    "app",
    "even",
    "raspberry",
    "pi",
    "might",
    "projects",
    "end",
    "without",
    "let",
    "get",
    "take",
    "comes",
    "way",
    "step",
    "walk",
    "leverage",
    "look",
    "actual",
    "bunch",
    "stuff",
    "ideally",
    "need",
    "everything",
    "running",
    "eight",
    "key",
    "pretty",
    "important",
    "building",
    "first",
    "install",
    "set",
    "perform",
    "machine",
    "api",
    "reason",
    "additional",
    "make",
    "heap",
    "architecture",
    "model",
    "order",
    "steps",
    "know",
    "lot",
    "collect",
    "images",
    "label",
    "webcam",
    "probably",
    "labeling",
    "try",
    "trained",
    "image",
    "labeled",
    "us",
    "next",
    "labels",
    "annotations",
    "train",
    "types",
    "available",
    "mobile",
    "net",
    "little",
    "bit",
    "process",
    "sure",
    "data",
    "plus",
    "think",
    "feed",
    "effectively",
    "getting",
    "pass",
    "right",
    "learning",
    "rather",
    "detecting",
    "give",
    "sort",
    "slightly",
    "gives",
    "cool",
    "start",
    "two",
    "normally",
    "particular",
    "grab",
    "real",
    "good",
    "time",
    "frame",
    "fast",
    "gpu",
    "performance",
    "tuning",
    "convert",
    "save",
    "maybe",
    "conversion",
    "people",
    "six",
    "collecting",
    "come",
    "tune",
    "things",
    "back",
    "collab",
    "cloud",
    "guide",
    "github",
    "later",
    "see",
    "couple",
    "three",
    "project",
    "always",
    "microscope",
    "obviously",
    "bent",
    "pin",
    "bring",
    "pins",
    "number",
    "directions",
    "hand",
    "left",
    "detections",
    "trying",
    "sentiment",
    "gone",
    "working",
    "hit",
    "comments",
    "best",
    "link",
    "inside",
    "put",
    "jump",
    "kick",
    "made",
    "work",
    "windows",
    "linux",
    "environment",
    "file",
    "paths",
    "tfod",
    "gon",
    "na",
    "forward",
    "slash",
    "live",
    "long",
    "thumbs",
    "oh",
    "um",
    "main",
    "clone",
    "check",
    "creating",
    "virtual",
    "ahead",
    "much",
    "like",
    "library",
    "dependencies",
    "already",
    "installed",
    "jupyter",
    "create",
    "new",
    "called",
    "allows",
    "activate",
    "pip",
    "latest",
    "installing",
    "kernel",
    "notebook",
    "notebooks",
    "mind",
    "c",
    "download",
    "though",
    "cuda",
    "still",
    "longer",
    "whether",
    "find",
    "update",
    "version",
    "cd",
    "change",
    "cu",
    "dnn",
    "map",
    "bottom",
    "fine",
    "side",
    "underscore",
    "select",
    "idea",
    "11",
    "would",
    "move",
    "specific",
    "okay",
    "errors",
    "means",
    "error",
    "repository",
    "saw",
    "module",
    "named",
    "another",
    "zoom",
    "value",
    "array",
    "sometimes",
    "saying",
    "collection",
    "copy",
    "command",
    "prompt",
    "folder",
    "call",
    "type",
    "per",
    "second",
    "package",
    "dash",
    "something",
    "clear",
    "enter",
    "delete",
    "created",
    "keep",
    "packages",
    "dot",
    "represents",
    "remember",
    "verification",
    "script",
    "reasonably",
    "line",
    "allow",
    "equals",
    "better",
    "last",
    "five",
    "note",
    "access",
    "looks",
    "possible",
    "angles",
    "went",
    "chance",
    "10",
    "class",
    "add",
    "screen",
    "system",
    "shift",
    "opencv",
    "mean",
    "cell",
    "import",
    "thank",
    "attention",
    "happy",
    "folders",
    "directory",
    "path",
    "workspace",
    "collected",
    "double",
    "successfully",
    "defined",
    "capture",
    "device",
    "correct",
    "believe",
    "position",
    "paste",
    "files",
    "point",
    "close",
    "looking",
    "choose",
    "test",
    "quickly",
    "ones",
    "zero",
    "zoo",
    "boxes",
    "saved",
    "wait",
    "classes",
    "generate",
    "record",
    "annotation",
    "moment",
    "evaluate",
    "usual",
    "testing",
    "skip",
    "records",
    "evaluation",
    "metrics",
    "precision",
    "metric",
    "average",
    "basically",
    "true",
    "detected",
    "loss",
    "performing",
    "ssd",
    "light",
    "320",
    "custom",
    "url",
    "checkpoint",
    "pipeline",
    "config",
    "tensorboard",
    "log",
    "mob",
    "graph",
    "load",
    "stop",
    "defective",
    "ibm",
    "bucket",
    "cli",
    "sad"
  ]
}