{
  "text": "Welcome to our data analysis with Python tutorial.\nMy name is Santiago and I will be your instructor.\nThis is a joint initiative between Free Code\nCamp and remoter. In this tutorial, we'll\nexplore the capabilities of Python on the\nentire PI Data stack to perform data analysis,\nwe'll learn how to read data from multiple\nsources such as databases, CSV and Excel files,\nhow to clean and transform it by applying\nstatistical functions and how to create beautiful\nvisualizations will show you all the important\ntools of the PI Data stack pandas, matplotlib,\nSeabourn and many others. This tutorial is\ngoing to be useful both for Python beginners\nthat want to learn how to manage data with\nPython, and also traditional data analysts\ncoming from Excel tableau, etc. You learn\nhow programming can power up your day to day\nanalysis. So let's get started.\nWelcome to our data analysis with Python tutorial\nMy name is Santiago and I am an instructor@remoter.com\nan online Data Science Academy. This tutorial\nis a result of a joint effort by remoter and\nFree Code Camp, and it's totally free. It\nincludes slides, Jupyter, notebooks and coding\nexercises. Let me tell you a little bit more\nabout remoter were an online hands on Data\nScience Academy. We specialize in data science,\nincluding data analysis, programming and machine\nlearning. We have a complete course catalog\nand we're adding more content every month.\nIf you're interested in learning data science\nor data analysis, check us out. As part of\nthis joint effort between Free Code Camp and\nremoter you can get a 10% discount in your\nfirst month by using the following discount\ncoupon. Let's quickly review the contents\nof this tutorial. In the description of this\nvideo, we have included direct links to each\nsection, so you can jump between them. This\nis the first section and we are going to discuss\none is data analysis. We'll also talk about\ndata analysis with Python and why programming\ntools like Python SQL and pandas are important.\nIn the following section will show you a real\nexample of data analysis using Python. So\nyou can see the power of it will not explain\nthe tools in detail. It's just a quick demonstration\nfor you to understand what this tutorial is\nabout. The following sections will be the\nones explaining each tool in detail, there\nare two more sections that I want to especially\npoint out. The first one is section number\nthree Jupiter tutorial. This is not mandatory,\nand you can skip it if you already know how\nto use Jupyter notebooks. Also the last section\nPython in under 10 minutes. This is just a\nrecap of Python. If you're coming from other\nlanguages, you might want to take this first.\nIf that's the case, again, you can use the\nlinks in the video description to jump straight\nto it. All right now let's define what is\ndata analysis. I think the Wikipedia article\nsummarizes perfectly the process of inspecting,\ncleansing, transforming and modeling data\nwith the goal of discovering useful information,\nyou forming conclusions and support decision\nmaking. Let's analyze this definition piece\nby piece. The first part of the process of\ndata analysis is usually tedious. It starts\nby gathering the data and cleaning it and\ntransforming it for further analysis. This\nis where Python and the PI Data Tools Excel.\nWe're going to be using pandas to read, clean\nand transform our data. Modeling data means\nadapting real life scenarios to information\nsystems using inferential statistics to see\nif any pattern or model arise. For this we're\ngoing to be using the statistical analysis\nfeatures panelists and visualizations for\nmatplotlib and Seabourn. Once we have processed\nthe data and created models out of it, we'll\ntry to drive conclusions from it finding interesting\npatterns or anomalies that might arise. The\nword information here is key. We're trying\nto transform data into information. Our data\nmight be a huge list of all the purchases\nmade in Walmart in the last year, the information\nwill be something like pop tarts sell better\non Tuesdays. This is the final objective data\nanalysis we need to provide evidence of our\nfindings, create a readable reports and dashboards\nand aid other departments with the information\nwe've gathered. Multiple actors will use your\nanalysis, marketing sales, accounting executives,\netc. They might need to see a different view\nof the same information. They might all need\ndifferent reports or level of detail what\ntools are available today for data analysis.\nWe've broken these down into two main categories,\nour managed tools, our close products, tools\nyou can buy and start using right out of the\nbox. Excel is a good example. Tableau and\nluchar are probably the most popular ones\nfor data analysis. In the other extreme, we\nhave what we call programming languages or\nwe Call them open tools. These are not sold\nby an individual vendor, but they are a combination\nof languages open source libraries and products.\nPython R and Giulia are the most popular ones\nin this category. Let's explore the advantages\nand disadvantages of them. The main advantage\nof close tools like Tableau or Excel is that\nthey are generally easy to learn. There is\na company writing documentation providing\nsupport and driving the creation of the product.\nThe biggest disadvantage is that the scope\nof the tool is limited, you can cross the\nboundaries of it. In contrast, using Python\nand the universe of PI Data Tools gives you\namazing flexibility. Do you need to read data\nfrom a closed API using secret key authentication\nfor example, you can do it? Do you need to\nconsume data directly from AWS kinases, you\ncan do it a programming language is the most\npowerful tool you can learn. Another important\nadvantage is a general scope of a programming\nlanguage. What happens if Tableau for example,\ngoes out of business. Or if you just get bored\nfrom it and feel like your career is taught\nyou need a career change? learning how to\nprocess data, using a programming language\ngives you freedom? The main disadvantage of\na programming language is that it's not as\nsimple to learn as with a tool, you need to\nlearn the basics of coding first, and it takes\ntime. Why are we choosing Python to do data\nanalysis? Python is the best programming language\nto learn to code. It's simple, intuitive,\nand unreadable. It includes 1000s of libraries\nto do virtually anything from cryptography\nto IoT. Python is free and open source. That\nmeans that there are 1000s of PI's very smart\npeople seeing the internals of the language\nunder libraries. from Google to Bank of America,\nmajor institutions rely on Python every day,\nwhich means that it's very hard for it to\ngo away. Finally, Python has a great open\nsource spirit. The community is amazing, the\ndocumentation, so exhaustive, and there are\na lot of free tutorials around checkout for\nconferences in your area, it's very likely\nthat there is a local group of Python developers\nin your city. We couldn't be talking about\ndata analysis without mentioning r r is also\na great programming language. We prefer Python\nbecause it's easier to get started and more\ngeneral in the libraries and tools it includes.\nR has a huge library of statistical functions.\nAnd if you're in a highly technical discipline,\nyou should check it out. Let's quickly review\nthe data analysis process. The process starts\nby getting the data where is your data coming\nfrom? Usually it's in your own database, but\nit could also come from files stored in a\ndifferent format, or a web API. Once you've\ncollected the data, you will need to clean\nit. If the source of the data is your own\ndatabase, then it's probably in writing shape.\nIf you're using more extreme sources like\nweb scraping, then the process will be more\ntedious. With your data clean, you'll now\nneed to rearrange and reshape the data for\nbetter analysis, transforming fields merging\ntables, combining data from multiple sources,\netc. The objective of this process to get\nthe data ready for the next step. The process\nof analysis involves extracting patterns from\nthe data that is now clean and in shape. Capturing\ntrends or anomalies. statistical analysis\nwill be fundamental in this process. Finally,\nit's time to do something with data analysis.\nIf this was a data science project, we could\nbe ready to implement machine learning models.\nIf we focus strictly on data analysis, we'll\nprobably need to build reports communicate\nour results, and support decision making.\nLet's finish by saying that in real life,\nthis process isn't so linear, we're usually\njumping back and forth between the step and\nit looks more like a cycle than a straight\nline. What is the difference between data\nanalysis and data science? The boundaries\nbetween data analysis and data science are\nnot very clear. The main differences are that\ndata scientists usually have more programming\nand math skills, they can then apply these\nskills in machine learning on ETL processes.\nThe analysts on the other hand, have a better\ncommunication skills creating better reports\nwith stronger storytelling abilities. By the\nway, these Weiler chart you're seeing right\nhere is available in the notes in case you\nwant to check out the source code. Let's explore\nthe Python and PI Data ecosystem, all the\ntools and libraries that we will be using.\nThe most important libraries that we will\nbe using are pandas for data analysis, and\nmatplotlib and Seabourn for visualizations.\nBut the ecosystem is large and there are many\nuseful libraries for specific use cases. How\ndo Python data analysts think if you're coming\nfrom a traditional data analysis place using\ntools like Excel and Tableau you're probably\nused to have a constant visual reference of\nyour data. All these tools are point on Click.\nThis works great for a small amount of data.\nBut it's less useful when the amount of records\ngrow. It's just impossible for humans to visually\nreference too much data, and the processing\ngets incredibly slow. In contrast, when we\nwork with Python, we don't have a constant\nvisual reference of the data we're working\nwith. We know it's there. We know how it looks\nlike. We know the main statistical properties\nof it, but we're not constantly looking at\nit. These allows us to work with millions\nof records incredibly fast. This also means\nyou can move your data analysis processes\nfrom one computer to the other, and for example,\nto the cloud without much overhead. And finally,\nwhy would you like to add Python to your data\nanalysis skills aside from the advantages\nof freedom and power theories, another important\nreason, according to PayScale, data analysts\nthat no Python and SQL are better paid than\nthe ones that don't know how to use programming\ntools. So that's it. Let's get started in\nour following section will show you a real\nworld example of data analysis with Python,\nwe want you to see right away what you will\nbe able to do after this tutorial.\nWe're gonna start this tutorial by working\nwith a real example of data analysis and data\nprocessing with Python, we're not going to\nget into the details yet, the following sections\nwill explain what each one of the tools does,\nand what is the best way to apply them combining\nand the details of them. In general, this\nis just for you to have a quick on high level\nreference of our day to day processes, data\nanalysts, data managers, data scientist using\nPython. So the first data set that we're going\nto use is a CSV file that has this form, you\ncan find it right here, under the data directory,\nthe data we're going to be used is this, I\nhave just transformed it into a spreadsheet.\nSo we can pretty much look at it from a more\nvisual perspective. But remember, as we said\nin the introduction, as data analysts are\nnot constantly looking at the data, right,\nwe don't have a constant visual reference,\nwe are more driven by the understanding of\nthe data right in the back of our head, and\nwe understand how what the data looks like,\nwhat's the shape of it. And that's what it's\nconducting our analysis. So the first thing\nwe're going to do is we're going to read it\nthis CSV into Python, and you can see how\nsimple it is just one line of code gets us\nthe CSV read into byte, then we're going to\ngive a quick reference. And this is what the\ndata frame that we have created looks like\ndata frame is a special word is a special\ndata structure, we use independent tool. And\nagain, we're going to see that in detail in\nthe pan this part of this tutorial. The data\nframe is pretty much the CSV representation,\nbut it has a few more enforced things like\nfor example, each column has a strict data\ntype. And we will not be able to change it\nto tetra, it's a better way to conduct our\nanalysis, the shape of our data frame tells\nus how many rows and how many columns we have.\nSo you can imagine that with these amount\nof rows, it's not so simple to again, follow\na visual representation of it's like, it's\npretty much infants crawling, in this point\n100,000 rows. But the way we work is by immediately\nafter we load our data we have we want to\nfind some sort of reference in the shape and\nthe the properties of the data we're working\nwith. And for that we're going to do first\nan info to quickly understand the columns\nwe're working with. In this case, we have\ndate, which is a date time field, we have\nday, month year on that are just complimentary\nto date, we have the customer age, which is\nuninjured, which makes sense right? age group,\nyou can say it's right here. It's age group\nyouth, customer gender, we have an idea again,\nof the of the entire data set, we know the\ncolumns we have, but we also know how large\nit is. And we don't care what's in between,\nwe will be cleaning it probably, but we don't\nneed to actually start looking row per row,\nright just with our very limited eyes, we\nhave a better understanding of the structure\nof our data in this way. And we're going one\nstep further, we will also have a better understanding\nof the statistical properties of this data\nframe with a describe method. For all those\nnumeric fields, I can have an idea\nof the statistical properties of those. So\nfor example, I know that the average age of\nthese data set is 35 years old. I also know\nthat the maximum age in this case if these\nOr is the sales data is 87 years old, I know\nthe minimum is 17 years old. And again, I\ncan start building right if my understanding\nof this that physical properties of it. So\nin this case, the median of my age is very\nclose to the mean. So this is telling me,\nall is telling me something, and the same\nthing is going to happen for each one of the\ncolumns that we are using.\nFor example, we have a negative profit here,\nand we have very large values here are these\ncorrect, is maybe there's a mistake, again,\nit's by having a quick statistical view of\nour data, we're going to be driving the process\nof analysis without the need of constantly\nlooking at all the rows that we have. It's\na, it's a more general holistic overview.\nSo we're gonna start with unit cost, let's,\nlet's see what it looks like. And we're going\nto do a describe only if you need coast, which\nis pretty much what we had right here. In\nthe previous in this line, what we did was\nfor the entire data frame for the entire data,\nin this case, we're just focusing in the unit\ncoast, cost, sorry, column, the mean, the\nmedian, all fields, we know already pretty\nmuch from this, and we're gonna quickly plot\nthem, we're going to use these tools to visualize\nthem. And it's the same tool, it's paying\nthis that it's using on top, right? It's using\nmatplotlib. So the visualization is created\nwith matplotlib. But we're doing it directly\nfrom pandas. And again, don't worry, this\nis all explained in pandas lessons. So this\nis unit costs, right is what this is the box,\nbut we have just created, we have the whiskers\nthat mean that shows us the the first and\nthird quartile, the median. And then we see\nall the outliers that we have right here.\nSo we see that our product study is around\n$500 is considered to be an outlier. And the\nsame thing if we do a density plot, right.\nSo this is what it looks like. We're going\nto draw two more charts, right, in which we're\ngoing to pretty much point out the mean and\nthe median, right in the distribution charts.\nAnd we're going to do a quick histogram of\nthe costs of our products. Moving forward,\nwe're going to talk about age groups with\nthe age of a customer. And at any moment,\nwe can always do something like sales sort\nhere to give a quick reference, we know that\nthe the age of the customer is expressed in\nactual years old they were but also they have\nbeen categorized with three, four, actually\nfour age groups, seniors, youth, young adults\nand adults, right. So they we have given categories\nwere creative, right to better understand\nthese groups, and we do that with values.\nValue counts, we can quickly get a pie chart\nout of it, or we could get a bar chart out\nof it. As you can see, right here, we're doing\nan analysis of our data, we see that adults\nright here are the largest group in our for\nour data at least. So moving forward, what\nabout a correlation analysis? What is a correlation\nbetween some of our properties, we will probably\nhave high correlation for example, between\nprofit and unit cost, for example, or order\nquantity, that's kind of expected, but that's\nall something that we can do right here. This\nis matrix right of correlation showing in\nred high correlation. So order quantity, and\nunit cost or where is profit right here. Profit\nis right here. So we see high correlation\nwith unit with cost with profit. Now with\nprofit, actually, it's the opposite blue is\nhigh correlation, I'm sorry, the diagonal,\nwhich is blue, is correlation is equals one.\nSo high correlation is blue. And we see that\nprofit has huge correlate has a lot of correlation,\npositive correlation with unit cost and unit\nprice. And negative correlation is with dark\nred. So we again can have a quick idea. Let's\nsee, for example, here profit, it has negative\ncorrelation with order quantity, which is\ninteresting, right? It's we wouldn't dig deeper\ninto that, of course, the profit has a high\ncorrelation positive with revenue, right?\nAnd again, it's just a quick correlation analysis.\nWe can also do a quick scatterplot to analyze\nthe customer age and the revenue right to\nsee if there is any, any correlation there.\nRight? And the same thing for revenue and\nprofit. This is obvious, right? We can we\ncan quickly draw a diagonal here, right. So\nthere is a lot Linear depth and dependency\nbetween these variables. So a form a few more\nbox plots, in this case, understanding the\nprofit per age group, right, so we can see\nhow the profit will be, will change depending\nof the customer's age, and a few more box\nplots. And we're creating these these grid\nof year customer age, unit costs, etc, for\nmultiple things. So moving forward, something\nthat we can quickly do when we're working\nwith Python, especially within this is Drew\nshape or data or derive it from other columns,\nright. So this is pretty common in Excel,\nwe can create these revenue per age column,\nif you're here in Google spreadsheets, you're\ngoing to do something like revenue, per age,\nand you're going to do something like equals,\nright? Equals revenue, divided, I don't remember\nif this correct formula we're using, but just\nfor, for you to have a reference. And we're\ngoing to pretty much extend this whole thing.\nThere we go, Oh, well is processing, and I\nhave 100,000 rows. So you can see how slow\nit is, I let's compare that just to the way\nPython works, I'm gonna execute this thing.\nIt was instant, you know, extremely fast.\nAnd it was all calculated seems that we have\nthe same results as expected. same results\nas expected. And we can quickly plot both\nthe in a density plot and in a histogram,\nas you can see, right there, now that revenue\nparade is going to be relevant. In any case,\nit's just to show you the capabilities of\nwhat we can do. Let's annual analyze, well,\nwe're gonna create a new column, which is\ncalculated cost is the total, the total orders\nthe total, the quantity of the order, times\nthe cost, right, extremely simple formula,\nvery fast process. And we're gonna get right\nhere, how many rows had a different value\nthan what was provided by cost? So what we're\ndoing right here is like, we're quickly checking\nif the cost provided by the data set, at some\npoint doesn't align with the actual cost we\nare calculating. So is there any mistakes\nthat were made by the I don't know the original\nsystem, or people doing a data entry, if these\nnew column is different from cost, we want\nto know about that. And that doesn't happen.\nSo again, quick, quick, regression plot. In\nthis case, it's very obvious that there is\nsome linear dependency between calculate cost\nand profit. So more formulas, in this case\ncosts part cost plus profit. So we're going\nto adding a little bit more, there is no difference\nwith the revenue and the calculated revenue\nthat we are having. So that all makes sense,\nwe're going to do a quick histogram of the\nrevenue. We can, for example, on 3%, to all\nthe prices that we are using, we need to increase\nprices. How are you going to do that? Well,\nit's very simple with Python, we're just going\nto do increase everything by point 03. And\nnow all the prices have changed.\nWhat else we're going to be able to do quick\nfiltering, let's get all the sales from the\nstate of Kentucky right. So these are all\nthe sales from the state of Kentucky, we can\nget only the average of the sales by these\nage group on only revenue, right. So these,\nall these filtering options, and extremely\nsimple to get with Python. In this case, we\nsay, give me all the sales from these age\ngroup, and also from this country, right,\nand we're gonna get the average revenue from\nthese groups that we are selecting. And again,\nto modify the data, we can make just a few\nquick modifications, like in this case, we're\ngoing to say, all the sales from country right\nto revenue, we're going to increase it by\n1.1. I don't know why, which is doing it arbitrarily.\nIt's just for me to show you how it works.\nSo far, so good. Again, we've done a couple\nthings, you don't need to know about the details,\nwe will actually go through that in the NumPy\nindependence sections in this tutorial. So\njust for you to have a quick reference of\nit. There are exercises associated with these\ngiven lectures. So if you want to pause right\nnow and get into the exercises, that's going\nto be very helpful. We're going to move forward\nnow with the second lecture in which we will\nbe using a database this Akila database and\nwe're going Be erasing data, instead of from\na CSV file, as we did before, we're going\nto read data now from a database. Reading\ndata from a SQL database is as simple as it\nis from an Excel file or a CSV file, as we\nwere doing with our previous example. And\nonce you've read the data, that's we're going\nto do now the process is the same. So what\nwe have right here is a query a SQL query,\nif you don't know about SQL, you can check\nour courses or other courses online. Basically,\nwe're pulling the data from the database.\nThis is one of the advantages of Python, it's\nnot, there are connectors for pretty much\nevery database provided out there, Oracle,\nPostgres, MySQL, SQL Server, etc. In this\nparticular example, we're going to be using\nMySQL. So once you construct the query, and\nyou pull the data from the database, then\nthe process is the same, we have just converted\nthese outside data into a data frame that\nwe can use with our Python skills. The first\nstep, as usual, is to check the shape information\ndescription of our data of our data frame.\nIn this case, we want to, again understand\nthe structure of it. So we want to know how\nmany rows we have 16,000, we want to know\na little bit more about our rows, we want\nto know about a little bit more about our\ncolumns, and how many rows how many records\nwe have for each one of them and the type\nof each one of these columns. And we also\nwant to have a better statistical understanding\nof our data. So we do a quick describe, and\nwe have more details about it. If we want\nto focus in individual columns, right, we\ncan just do that by in this case, we're gonna\nfocus in film rental rate, right, pretty much\nhow much you pay to rent a film. Um, we're\ngonna see the kind of distribution we have,\nwe can call it distribution, it's pretty much\na categorical field in this case, but basically,\nthe rentals are divided into three main categories\nare prices, zero 99 299 499. So that's these\nbox plot these pretty much perfect, never\nseen in real life plot box plot gives you\nthose prices. And move forward, we can also\ncheck very quickly a categorical analysis,\nunderstanding the distribution of rentals\nbetween cities, so we have two cities. And\nit's pretty much even as you can see right\nhere, creating new columns and reshaping the\ndata for further analysis, etc, is relatively\nsimple. In this case, we're going to analyze\ntheir return in rentals, right, which, which\nfilms are going to be more profitable for\nthe company div, dividing the rental rate,\nhow much we charge, divided by the cost, how\nmuch it costs us to acquire the film. So in\nthis case, we can see the distribution of\nthat, right. So most rentals are here in the\nbeginning. And then we have more profitable\nrentals, were making up to 60% above the rental.\nAnd we can quickly analyze the mean and the\nmedian fit right to have a quick idea of all\nthat.\nFinally, selection and indexing, if you want\nto start focusing, if you want to go into\ndata, right, you want to zoom in, you want\nto have a better understanding. So you start\nfiltering, in this case, we can filter by\ncustomer, but if you want to do it per city,\nif you want to do it per state, if you want\nto do it per film, per price category, etc.\nIt's very simple to filter to filter and zooming,\nwhich is one particular characteristic of\nyour data. So you can perform a more detailed\nanalysis. So in this case, we have all the\nthe films are rented by the customer last\nname, Hanson, which doesn't mean it's the\nsame person. But again, it's very simple to\nfilter dot. And here, we can do we can very\nquickly see which ones are the price, the\nfilm's sorry, that have the highest replacement\ncost, right. So basically, what we're doing\nis we're going to isolate those films that\nhave the highest replacement cost. And also\nwe can see right here just for you to have\nan idea, all the films that are in the category\nPG or pG 13. It's very simple to to filter\nthat data. So this is the process we usually\nfollow. we imported the data, we reshape it\nsomehow create columns, there is an important\nprocess of cleaning up or not highlighting\nthis part of the tutorial, we're going to\ntalk about it in the tutorial itself. There's\nthe process of cleaning, then reshaping creating\nnew columns, combining data and creating visualizations.\nThis is the process, right? We're following\nhere with our Python skills, but it's a tone\nmore to odd as you might imagine, from creating\nreports to running machine learning processes,\ncreating linear regressions, etc. For now,\nthis is just a quick understanding of the\nprocess. We follow. Now starting now we're\ngonna move forward with more details of each\none of the individual tools we're going to\ntalk about. We're going to talk about Jupyter\nnotebooks. We're going to talk about NumPy.\nWe're going to talk about pandas, we're going\nto talk about mapa, lib, seaborne, etc. Starting\nnow, right? The first thing we're going to\nsee is, what is this whole thing that I've\nbeen using this Jupyter Notebook, I want you\nto now too, if you want, if you if you don't\nhave experience with it, I want you to have\nan idea of how it works. And then we're going\nto move forward the individual tools, NumPy,\npandas, etc. Remember, there are exercises\nalso associated with this particular lecture.\nSo you can always go back again, and work\nwith them. Once you get more a better understanding\nof the tools we are using.\nBefore we jump into the actual data analysis\ncourse, and we start talking about Python,\npandas, all the tools, we're going to use\nimport files, read data from databases, etc,\nI want to show you the environment that we\nwork with. It's our primary environment, it's\nthe tool that we use 99% of the time on its\nJupyter Notebook, there are going to be different\nterms here, I'm going to be referring to it\nas Jupyter Notebook. But as you are going\nto see in this, in this part of the of our\ntutorial, you can see that Jupiter is actually\na whole ecosystem of tools. And it's a very\ninteresting project. Jupiter is a free and\nopen source, again, ecosystem of multiple\ntools. And primarily, we're gonna talk about\nfirst, what is a Jupyter Notebook. What you're\nseeing right here, and you're gonna see live\nin a second, I can actually show it to you\nis this thing we're going to use. And we are\nalso going to talk about Jupiter lab. Okay,\nwhich is the evolution of the regular Jupyter\nNotebook. So, I think this could be familiar\nto you already. Usually the questions in the\nquestion is, what's the difference between\nJupyter Notebook and Jupiter lab? Well, the\ndifference is that Jupiter lab is just a nicer\ninterface on top of Jupyter notebooks. It's\nnot just the plain notebook. This is a notebook,\nbut I'm scrolling right now. It's also the\naddition of tree view, it's an addition of\nget tools, as an addition of command to lead\nand multiple other things. You can open some\nfiles with a nice preview in it, etc. So,\nJupiter lab Jupyter Notebook, they are similar\nJupiter lab easy, again, the evolution of\na Jupyter Notebook. And that's what we're\nusing. Again, Jupiter is a free and open source\nproject. So anybody can install it, anybody\ncan download it, it's very simple to get it\nset up in your local computer. In this case,\nwe're using something we call notebooks AI,\nit's a project that provides Jupiter environment\nfor free in the cloud. So you don't need to\ninstall things locally, you don't need to\nput things in sync in your own hard drive,\nright you That means you don't need to buck\nit up, for example, because it's just a service,\nit's all worked in the cloud. So said that,\nI want to tell you that we have compiled a\nvery quick list of everything, we're going\nto talk in this part of the tutorial, in this\nlist of two, it's just a thread of with multiple,\nmultiple hints of how to use Jupyter notebooks.\nSo after the video after the course, if you\nforget some of these concepts, you can always\ngo back to this to it, it's a quick reference\nfor you to have. So let's get started. Why\ndo we use a Jupyter Notebook? Because it's\nan interactive real time environment to produce\nour or to to explore our data and to do our\ndata analysis. It's a tool you're gonna fire\ncommands, and it will immediately respond\nwith something back. It's a very interactive\ntool, when we're working with data analysis,\nand this is mainly main difference with some\nother tools like for example, Excel, tableau,\netc, is that we are not constantly looking\nat the data, there is no visual reference,\nlike for example you have in Excel, right?\nSo in Excel, you're constantly looking at\nthe data, you have it in front of you, there\nare 100,000 cells and you can stroll and see\nthem. The problem is that that's not scalable,\nright? It's like nobody can work with 100,000\nrows in their, in their, in their mind, we\nwill always forget something. So the way we\nwork with Python indeed, analysis is by always\nhaving a reference of how our data looks like\nbut always at the back of our head and we're\nnot constantly looking at it. We're like this\nperson from the matrix, you know, the, the\nthe commander of the matrix that commands\npeople to get get in and out. We're basically\ntelling people telling people that basically\nasking data, right asking questions to the\ndata, and having a picture in our mind of\nhow that's going to work, we're not constantly\nlooking at it, we're just having a reference,\nor in our in the back of our heads of what\nour data looks like. So that's why this tool\nis very useful. This tool is useful Also,\nif you're just training your Python skills,\nand or their permanent language skills, because\nwhat you're gonna see is it's just a regular\nPython interpreter. In this case, I can execute\nsome code, that's two one times, actually\none plus three, there we go. And the result\nis four. Right. So this is a Python is a fully\nfeatured Python interpreter. The good thing\nis that again, it's going to respond to us\npretty much immediately I create a command\nand I immediately get a response, I can do\nsomething a print here, hello world. And I\nimmediately get a response, I can do Hello,\nworld, times, times three. Again, it's a again,\na Python interpreter, a fully feature Python\ninterpreter, but it's not being accessed from\na terminal, which you can write this is the\ngood thing about Jupiter lab to have a terminal,\nI can do Python, right. And I can do two,\ntime three, and I get an answer back. But\nthis is not convenient to work with our data,\nwe need something a little bit more interactive,\nwe can also mix with documents, that's going\nto be the advantage of a Jupyter. notebook.\nSo what what's the way we work with Jupyter\nnotebooks, there are a few concepts, very\nimportant concepts that we are going to follow\na Jupyter Notebook is just a sequence of multiple\ncells, okay, everything is a cell. And as\nyou can see, when I click on these cells,\neven if even if it doesn't look like being\na cell, it is, you will see that these blue\nthing right here, right is pretty much following\nme because I'm clicking on the cell, and I'm\nselecting that particular cell. Everything\nhappens within a cell, if I want to execute\nsome code I can do, again, one plus five,\nand to get a result or a result back, right,\nthat's, that's how it works. So I'm creating\na cell, I'm deleting a cell, I create another\ncell again. So it's everything happens with\na cell, and I'm going to tell you how to add\nthe cells, how to remove them how to execute\ncode, etc. The interesting thing about a cell\nis that it can either be Python code, or any\nother programming language you're using in\nthis case is a Python data analysis course.\nIt can be Python code, as we're we were doing\nbefore one plus three, this is Python code,\nor it can be what we call markdown, okay,\nwhich is a formatting\nformat, right? To create text, that will be\na render with sort of HTML ID at the output.\nSo in this case, this is what the source code\nof the markdown looks like in markdown, any\nline that starts with this part, it's going\nto be a title, in this case, it's going to\nbe the largest, the biggest title you can\nhave is just one pod, and then you keep adding\nto reviews the size in this case, level three\ntitle. And then you can have for example,\nthis is a quote this is bold, this is it Alex,\nthis is a link, right? So let me actually,\nI could copy the cell and open the source\ncode. There we go. So this is a link right\nissue, issue is created or it's rendered as\na link. So markdown, what is is that is a\ntext formatting tool, right or protocol, we\ncould say that in this case, we just specify\nus we have some\nsome rules to use in our in our text, and\nmarkdown knows how to interpret them and format\nright or return a formatted document after\nthem. So for example, here, we have green\ndivider, which is a picture and we know it's\na picture because it starts with an exclamation\nmarks. And that's that what you're saying\nright here. So again, a cell can be either\nPython code, or it can be markdown. markdown\nis an entire thing on its own. You can get\nany tutorial online free, it's it's fairly\nsimple to get started with. And it's also\nvery important because when you're formatting\nyour reports, right, when you're creating\nyour reports, you want them to look pretty,\nyou can use markdown for not and what we're\ngoing to see later So you can export these\nnotebooks and they will generate PDFs, right.\nSo this whole thing can be a PDF or an or\nan HTML page. So after you're done with your\ndata analysis, you can hand over to whoever\nasked for the analysis, a PDF report, which\nis pretty neat. So moving forward, again,\nany cell is going to be either markdown, or\nit's going to be code right here. So these\nones code, and you can switch the modes, you\ncan say, this LS code, or actually, let's\nmake it markdown. So right now, if it's a\ncode, it doesn't doesn't matter, or just,\nit's not executing anything, because the cell\nis interpret as markdown. So now, I'm switched\nback to code. And now it works. Again, I said,\nSure. It can also be raw, but to be honest,\nwe don't use raw very often. So again, you\nhave this this general cell type, this cell\nwe're using, what type is it? Is it code is\nit markdown, you can switch it with these\nwith the selector right here. So a few more\nthings that I have to tell you right away,\nso you can start internalizing them, and it's\ngonna take some time to get used to it. But\nonce you get used to it, you're gonna move\nvery fast in your data analysis with Python\nJupyter notebooks. The first thing is, as\nyou're seeing right here, every cell has been\ngiven an execution number. So any, the cells\nwill be moved, right, they will be moving\naround, you will be moving them around. But\nyou will always know which one executed before\nanother one. And that's because every execution,\nyou run will be assigned an execution number.\nIn this case, this is the seventh time I have\nexecuted code. If I execute code again, for\nexample, I don't know, two times two, this\nis the eighth time that I've executed code.\nAnd if I move this thing, right here, if you're\nreading this thing, top down, you will not\nbe full, right? You will understand this thing.\nIt was moved, the cell was moved, the structure\nof the notebook changed. But these thing was\nexecuted after this other cell, right? xact.\nAnd this is seven. So the execution order\nis always preserved. So that's an important\nthing. Something else that you're seeing me\nchange the structure, and do things with the\nnotebook without using any menu. And that's\nbecause I know how to use keyboard commands\nkeyword shortcuts to run most of these commands.\nSo for example, how can I add a new cell I\nhave these is a markdown cell. This is a code\ncell, if I need a cell before these one, what's\nwhat's that command that I'm going to issue\nin order to create the cell, in this case,\nthe command is going to be the letter A, I\njust type A, and there is a new cell creative.\nHow can I delete the cell, it can be two times\nthat the key two times the D key. And again,\nthis is all these reference with built. So\nfor example, right here, whereas hit at some\npoint, you can.\nHere, you can type, you can press A to create\na new cell, you can press B to create a new\ncell, what we call below. So let me put something\nhere, this is a reference. And I'm going to\nput here the letter B and it's going to create\na cell B below the currently selected one.\nSo the selection here is here in the blue,\nI hit let me delete this one, I hit B. And\nagain, it's going to create a cell below the\npreviously selected one, if I hit a, it's\ngoing to create a cell above that previously\ncreated one. So these, these are the mnemonics\nof the creation. Something else and it's very\nimportant why when I'm in this cell, and I\nhit the letter, a leader, literally it just\nhits the letter A in my keyword, no control,\nno command, just a, it creates a new cell,\nand it doesn't type A inside the document,\nright? So right here, if I type A, it's adding\nan actual a character in the cell. Why didn't\nthat happen before. And you're going to notice\nthat when I change, when I'm going to call\na mode in a second, you're going to see that\nthe content of the cell is grayed out, show\nwhat now when I when I press on the letter\nA it actually creates to sell and it's not\nadding content to the sell itself. If I go\nback again to the other mode, and I'm going\nto give you a better explanation in a second.\nIf I type anything, in this case, a it's actually\nappended to the text within it. So this is\nmy interaction to sell modes and this is very\nimportant. The Jupyter Notebook is a mode\nbase editor, right? So there are multiple\neditors are, for example, vim or VI, vi, those\nare mode based editors, which basically, the\nbehavior of your work will change depending\non the mode that it's currently activated.\nSo for example, in this case, I am in addition\nmode, because any character that I type will\nbe appended to the cell, A, B, C, D, etc.\nIf I switch out of editing mode to what we're\ngonna call command mode, I switch out of that\nmode. Now the cell is grayed out, and any\nkey that I hit, it's gonna do something different\nassociated with that key. So A is going to\ncreate a new cell above, B is going to create\na new cell below, Double D is going to delete\nthis cell, right. So that's, that's the important\npart of Mo. That's one of the most important\nparts in order to understand how to work with\nJupyter notebooks, the mode that you're currently\nworking with, and there are only two modes,\nso it's fairly simple. This is command mode.\nAnd we recognize command mode, because this\ncell is grayed out. When we get into edit\nmode, there is a regular prompt, as you're\nsaying before, the number one on the cell\nis actually subjects of addition. So that's\nthe way we can realize that, how are you going\nto switch from modes, in this case, I'm in\nediting mode, if I'm using my mouse just pointing,\nI can click outside, I'm gonna get out of\nthe edit mode into command mode. If I point\ninside and going back again, to the Edit Mode,\nbut let me tell you something right away and\nthen say, we don't like to use our mouse,\nwe don't like to point and click, because\nthat's very slow. We like to use our keyboard,\nwe move very fast with our keyboard. So how\nare you going to switch from, from editing\nmode back to command mode, that's going to\nbe with the Escape key to go from editing\nto command, edit as Escape key, it's going\nto switch out of editing, but when mode. And\nif you actually want to make modifications\nto the cell, basically, you want to get into\nedit mode, you're going to hit the return\nkey, that's going to get you into edit mode,\nagain. So we have tackle multiple things are\nwriting, again, we said in Jupyter notebooks,\nwe're going to use Python code very quickly\nto interact with our data, we need a real\ntime, you know, I'm asking a you're answering\ntype of editor. That's what the Jupyter Notebook\nis. The Jupyter Notebook has these two modes,\nedit and, and command mode. And then the cells\nwhich is pretty much everything is the most\nimportant, it's a fundamental part of the\nnotebook, the cell is going to have two types\ncan be either code, or it's going to be markdown,\nright. And now I'm going to start showing\nyou more features. And I'm going to show you,\nI'm going to show you the most important commands.\nAnd of course, how the what the keyboard shortcuts\nfor those commands are, so you can move freely.\nAnd and and work with Jupyter Notebooks in\nthe most efficient way. So let's get started.\nFirst of all, for for from the most important\ncommands is moving right. So navigating, it's\nvery simple to navigate, just use your arrow\nkeys, up and down, up and down. And you're\ngoing to move around in your notebook. If\nyou wanted to switch the type, right going\nfrom markdown to code, etc, you can switch\nuse these drop down or you can press the specific\nkey is to switch to either markdown or Python.\nSo for my markdown, you're gonna switch sorry,\nhit the M key, that's going to make it markdown.\nFor Python, you're going to hit the Y key,\nthat's going to make it Python code. So M\nand y are going to switch you back and forth.\nKeep an eye on the selector you're going to\nhit y m y m is going to switch it from code\nto markdown.\nWhat else how can you execute code once you\nare within your typing code and you want to\nexecute it, there are two types of executions\nyou can run. The first one is going to keep\nthe selection the currently selected an active\ncell is going to stay the same place you are\nand that's going to be my by keeping press\nthe Ctrl key and hitting return that's going\nto run decode on the cell there the prompt\nor the current selected cell will remain being\nthe same. So I'm running this thing a couple\nof times already on this selection or the\ncurrently highlighted cell stays the same,\nI can change that by using shift return. So\nI keep the shift key pressed. And I hit return\nand is going to execute the code. But it will\nimmediately switch the prompt or the currently\nselected cell to the following one. And that's\nuseful when you have multiple cells, you want\nto execute one after the other. So you can\nkeep hitting shift, return, return, return\nreturn, and it keeps you moving right from\ntop to bottom. Alright, so Ctrl return or\nshift return to change the execution is the\nsame is just what's going to happen with the\ncurrently selected cell. We already saw how\nto create cells with the A key, we create\na cell above with B key we create a cell below.\nTo delete a cell, you're going to hit the\nD key, the D key two times one after the other\nvery quickly, dd is going to delete these\nthe cell. What happens if you made a mistake,\nand you want to undo the previously issued\ncommands? Well, the mnemonic here is going\nto be Ctrl Z, you know the mnemonic, it's\nnot the command, it's going to be Ctrl Z,\nyou only need to press the Z key, you know,\nyou don't need Ctrl Z, and it's gonna undo\nwhatever you did in your previous command.\nAlright, so a B, D deletion, and then Z to\nundo the all the commands were saying they\nall have a correspondence in this toolbar\nor in this command palette. So for example,\nright here, I could run this code by pressing\nthese play button right here you see it, the\nexecution is changing. There are multiple\nones and you can search them if you don't\nremember right here. And the neat thing about\nit is that you actually have the shortcuts\nto issue the same command. So let's say you\ndon't remember how execute and stay stay in\nthe same cell, or move whatever you can search\nfor run. And you can see what's the name,\nand what's the actual command that you have,\nright there, right. So you can, at least for\nyour first ad or a month working with Jupyter\nnotebooks, you will usually need to go back\nto these commands, and try to remember the\nthe quick shortcuts. And with time and practice,\nthose will just come naturally. So moving\nforward, what else, we have a few other commands,\nin this case, we have something to cut and\npaste the cell somewhere else, just cut and\npaste, that's going to be x to cut it, or\nyou can also use the scissors here, x to cut\nit. And to paste it, you can use this button\nor actually these buttons sorry, or you can\njust press the V key V is going to paste it\nwherever you're currently standing it. So\nI'm going to cut it, I'm going to remove it\nfrom here, and I'm going to paste it below\nthere. Or you can also copy it. So instead\nof cutting it, you can press the C key just\ngoing to cut, sorry, copy. And then you can\nactually say where you want to paste it. In\nthis case, we have duplicated the same cell.\nAnd it looks something interesting here, the\nexecution count remains the same. So again,\nthere is like this unique identifier for your\nexecutions, which means that you know, when\nand where something was executed. Moving forward,\nwe're going to use some code here, we're going\nto import some tools, you can see some characteristics\nor advantages of Jupyter notebooks and why\nwe use it so often compared to, for example,\nthe regular Python terminal.\nOne very important thing is visualizations,\nwe as data analyst, we're constantly getting\ndata on expressing it through images, or animated\nanimations, right. But most commonly, images.\nThe main library we use in Python is model\nlive. And model lib is a first class citizen\nin Jupyter notebooks, which means that you\ncan just run the figures from matplotlib.\nAnd they will just show up directly in your\nnotebook without the need of doing anything.\nCrazy. So can you imagine showing these these\nbeautiful picture in this terminal? That's\nthat's very hard, of course. So again, that's\none of the main advantages of a Jupyter Notebook.\nMoving forward, what we're going to do is\nwe're going to first we're going to get some\ndata from a public API. So there is these\ncrypto watch service, which basically has\ncrypto information, Bitcoin, ether, etc. And\nyou can check the docs, we can actually open\nthem. It's gonna give you market data Tesla.\nYou can check the docs and How you can get\nin this case it's BTC Bitcoin to euro, sexual\nsee if we can change it to USD USD price.\nThere we go. So this is the current price\nof bitcoin results, surprise, etc. And we're\nactually going to do markets do we have crack\nand BTC USD, let's do, let's actually issue\nthe same query we're going to use which is\nopen high, low, close Oh h LC. And don't worry,\nthis looks ugly. But this is actually what\nwe're using. There's a list of results write\nfor all different candles, we call them, we\nget the idea of the open price, close price,\nhigh price and low price. So we're going to\nissue those, we're going to issue these requests\nto the internet to these API, the crypto the\ncrypto watch API, so you can get information\nabout bacon to do some analysis, I say they\ncan, you can actually get it from ether for\nfor ether for author different types of crypto\nor currencies. So the function we're defining\nis get history, get historic price, it's a\nvery simple function that uses pandas is one\nof the most important tools, we're going to\nbe using this course. And the requests library,\nwhich is also very famous library for Python.\nAnd what we're going to do here is we're going\nto get Bitcoin on ether prize for an entire\nweek. Right. So from ferreted that the second\nFebruary sorry, February 25, up to today,\nright? So depending on when I'm shooting this\nvideo, and we're gonna get a quick reference\nof the prices open, high, low, close. So in\nthis case, we have four information per hour.\nOkay, so this is something you can actually\nchange in the in the, in the request you're\nmaking to the API, you can reuse the candles\neyes. In this case, we're keeping it per hour.\nSo we have by the hour information about Bitcoin,\nin this particular market, which is bitstamp.\nHere, we have these day these day, and these\nare right, when I'm in the morning, open,\nclose, highest price and lowest price, and\nalso the volume that was operated within this\ntime period. And we're gonna immediately plot\nthe price. So we see that in these time, which\nI think is an entire day, we the price dropped,\nit's actually a few days, like an entire week,\nthe price dropped from $9,600 below, right\n9000. So it was a pretty significant drop.\nLet's see ether highperformance. We have here\nall the records, and how it moved. So this\nis what I tell you that when you're doing\ndata analysis with programming tool like Python\nrar, you're not constantly looking at the\ndata. So what I'm showing you right here are\nthe first five records, we actually have.\nLet's do that. We actually have 169. Records,\nokay, 169 Records. And this is per hour. So\nif we do 169 hours divided by 24 hours, we\nhave seven days, right? So we have seven days\nof data 169 Records, and then we have a little\nbit more information keeps this to go. I'm\ngonna get to that in a second. But basically,\nthis is one I tell you 169 Records, to be\nhonest, something you could be saying in a\nspreadsheet. But I want you to get the concept\nhere. We're not just looking at our data,\nwe have it in our brain, we know what did\nit we know what shape it has. We know how\nmany records it had, we know information standard\ndeviation, what's the mean of that? Right?\nSo close price was the standard deviation,\nright? What's the the average, the mean, the\nmedian, right? So we have information about\nour data. It's sitting behind, you know, in\nour brain, but we're not looking at it. And\nthat's because with a very simple example,\nwith only 169 Records, but in real life, we're\ndealing with millions of records, so it's\nimpossible to see it. Have you ever tried\nis crawling in an Excel spreadsheet through\nmillions of records. It's crazy. It's not\npossible. It's just unusable. So that's again,\nthe way we work with data analysis in Python\nand R and other tools. We don't constantly\nkeep an eye on the data. We know the shape\nof it. And we just have these quick references\nlike show me the first five records. I mean,\nthe last five records, show me this chunk\nhere down there, but that's it. So again,\nthese are the visualizations we're creating\non Jupyter notebooks. Again, it's just very\nsimple to get the plot done right there. We're\ngoing to also see in Jupyter notebooks, a\nfew other pretty neat things. The first one\nis that we can use another library, which\nis called bokeem. And the difference is that\nboakye will have charts that are interactive.\nSo I'm moving it right here, it has JavaScript.\nAnd it's interactive, you look back again,\nto what we had here. This is a static chart,\nit's just a PNG, you can actually export it\nas a PNG, there is nothing you can do with\nit. With bokeem, it's actually a dynamic,\ndynamically generated interactive charts.\nSo I can, I can zoom in piece of data, right,\nI can move it around, I can just do whatever\nI want with it. I can refresh and reset it\nto whatever it was. And it's a dynamically\ngenerated chart. The difference is, if you're\nworking with data, dynamically in your analysis,\nsort of in your exploration, then boek is\na planning tool because you can zoom in, right,\nso what's going on here, let's, let's look\nat these things. If we're working on a mean,\nreverting strategy, for example, we see a\nhigh volume, we see a low volume, the mean\nis going to be here. So we see some mean reversion\nin there. It's very interesting. If you need\nto, for example, export a PDF, export a huge\nHTML file, then static images are going to\nbe probably better. So that's the difference\nbetween them. To be honest, model lib is a\nlot more popular than bogey, we use model\nlive a lot more because it's we actually have\na few other tools like seaborne that make\nit very easy to access and use it. What else\nJupyter Notebooks work very well with some\nExcel, Excel files with all the file formats\ncsvs, XML, Excel files, etc. And that's also\nthe the availability of Jupiter lab. So Jupiter\nlab can immediately interpret and opens his\nv files can open with some extensions, XLS\nfiles, XML files, JSON files has a very nice\neditor and tree view for Jason. So the Jupiter\nlab environment combined with Python Jupyter\nNotebooks will give you a good idea of Jupiter\nin general. So in this case, we have just\nsaved I'm not going to execute these you can\ntry it out. But you can execute and run what\nwe have just done and export this crypto file\nus an Excel spreadsheet. So you can just click\non here and you can basically download it,\nyou're going to open it and see what has\nThere we go.\nSo let me reduce the size of this thing. There\nwe go. So you can see that we have just exported\nto spread two sheets, in this case, Bitcoin\non ether, right? With the data that we had\nin our previous notebook, right. So that's\nall again, the combination of Jupiter, the\ncombination of Python and the combination\nof Jupiter lab, which are tools just work\nvery well together. So we're gonna keep moving\nforward, in this video, this tutorial, I'm\ntalking about more data analysis, in general,\nwe're going to talk about Python, we're going\nto do a quick review of Python. Maybe when\nwe when I was running these commands, you\nfelt you felt a little bit lost what I was\ndoing with it. So we're gonna do a quick review\nof Python and all that. And of course, we're\ngonna get directly deep into data analysis\nwith pandas with some other tools, I want\nto tell you something before we finish this\nchapter. And it's not, it's very important\nfor you to get familiar with data analysis,\nwith sorry, with Jupyter notebooks, because\nyou're going to spend a ton of time with it.\nAnd it's a very, very valuable skill that\nyou can get if you get proficient, comfortable\nwith Jupyter notebooks, you know, like creating\ncells, deleting cells, cutting, pasting, moving\nthings around, etc. For you to generate reports\nJupyter notebooks are going to be excellent.\nSo keep an eye on it. Keep practicing, it's\nthe only way to learn it to the to the analysis.\nKeep practicing it, keep open the command\nPolat. So you can always want if you forgot,\nhow can it caught a cell? Well, there is here\nit is command x, right? It's gonna just tell\nyou upfront, keep an eye on it, keep working\nwith it and practicing it. And once you get\nfamiliar with Jupyter notebooks, you're going\nto move very, very fast. Remember, they have\nthese nice list of compiled commands and reference\nyou can always access if you need extra help.\nAnd we're going to keep moving forward now\nwith more data analysis.\nNow it's time to talk about NumPy, one of\nthe most important libraries in the Python\necosystem for data processing. In general,\nit's the one that got pretty much everything\nstarted. And if you trace back NumPy, it,\nit's a very old developed library. 20 years,\nmaybe it's it's an extremely popular library\nand important library, I'm not gonna say popular.\nAnd I'm going to explain why in just a second.\nBut it's a very, very important library in\nthe Python ecosystem for data processing.\nNumPy is a library that will lead you it's\na numeric competing library, it's just to\nprocess numbers to calculate things with numbers.\nAnd that's it. So NumPy has a very limited\nscope, we could say, and this is an on purpose,\na very simple library, when you look at it,\nand when you look at the API, which is very\nconsistent, by the way, why is NumPy so important?\nWell, in Python, numeric processing, and just\npure Python processing numbers is very slow.\nOkay, Python is not slow as itself compared\nto other programming languages. But when you\ngo down, right to very deep levels of performance,\nwhen you are processing large amounts of data,\nright, and you need to squeeze, even, you\nknow, that tiny bite at the end of your pipeline,\nyou need to squeeze every flow up from your\nCPU, then Python is not the right tool for\nnon Python as as a pure python programming\nlanguage. NumPy is actually solving that NumPy\nis a very efficient numeric processing library\nthat sits on top of Python, and gives you\nthe same API as you're going to work with\nwith just writing Python code, as you're saying\nhere. But low level, it's going to be using\nhigh performance, numeric computations and,\nand arrays of numbers and representations,\netc. That's it. That's it for pi NumPy. It's\nextremely simple from from an API perspective,\nbut it's extremely powerful. Why did I say\nthat? It's not so popular. But yes, it's so\nimportant. Well, because in reality, we don't\nusually employ NumPy directly, you will not\nsee yourself using NumPy. So often, but you\nwill be using other tools in Python, like\nfor example, pandas, and matplotlib. And they\nare all working on top of NumPy. They're all\nrelying on relying on NumPy for their numeric\nprocessing. So that's why NumPy is so important.\nSo the for, at least for this part of the\ntutorial NumPy. I'm going to divide it into\npieces. The first one is going to be a very\ndetail, low level explanation of how NumPy\nworks, why we need to use NumPy. And what\nare the differences between different bite\nsizes for numbers, we're going to talk about\nintegers. But this is going to apply for decimals\nand data types also. And why you need a very\nlow level, optimize to us number. Now you\ncan, you can skip this part, you're going\nto find in the description of this tutorial,\nthe precise moment in time. So you can just\nskip and go directly to the second part, which\nis when we actually start using NumPy. And\nI show you how to create arrays, how to make\ncomputations, etc. So for now, we're going\nto divide it in two parts, we're going to\nstart first with the low level explanation\nwhich you can escape if you want, because\nit's not going to be crucial, you can easily\nuse NumPy. Without it. We have found that\nfor some of our students, it's it's important\nto understand the low level basics of it,\nespecially if you didn't have a computer science\nbackground, it can help you get you know,\nraise your right your level of understanding\nof computers, and how to make your computations\nmore efficient. But don't worry if you if\nyou don't want to go through that now it's\nfine. You can skip this part and come back\nlater or any other at any other moment. You\ndon't need the ease to use NumPy seriously,\nyou don't need it. It's going to be beneficial,\nbut you don't absolutely lead so you can just\nskip and come later. So with that said, let's\nactually go into into a deep\nunderstanding and explanation of how computers\nstore integers, numbers in memory and what\nare bytes bits etc. In order to understand\nwhy NumPy is so important. We have to go back\nagain to the basics. What are numbers, how\nthey are represented in computers, etc. As\nyou might know already a computer can only\nprocess ones and zeros bits, it can't process\nnumbers or just decimal numbers to be more\ncorrect, sorry, it only can process ones and\nzeros. A computer is just always storing and\nprocessing ones and zeros. It's a binary machine.\nYour memory is the central place around the\nrandom access memory in your computer is the\nthe central place where your computer is storing\nthe data that it's actively processing, right.\nSo you have, for example, a hard drive, which\nstores long term data. But the computer can\nprocess data directly from your hard drive.\nBefore doing that, it has to load it into\nyour ram into your random access memory again,\nusually, right a computer is going to have\nwhat eight gigabytes 1632 doesn't matter.\nLet's say you have eight gigabytes of memory,\nthat at some point is going to translate to\nnumber of bits that your computer can store.\nSo if you follow, if you follow these we have\nright here, you can see the total number of\nbits available in a regular computer with\neight gigabytes of memory. Why is this important?\nBecause again, the objective of these of these\ntutorial is the objective of this bar, at\nleast is to explain how you can squeeze out\nof every single bit you can in your computer,\nright? How can you make it more efficient?\nFor your numeric processing, both in storage?\nuse less memory for the same data? And also\nhow to make it faster, right for your calculations.\nSo in terms of physical storage, or actually\nmemory storage, right? How can we make it?\nHow can we optimize to use the least amount\nof memory for this given problem? That's the\nobjective of optimizing it, we need to understand\nhow numbers decimals or sorry, integers into\ndecimal numeric system are represented in\nbinary, right. So these table right here shows\nyou the first nine numbers, 01234, etc. and\ntheir binary representation. In your computer.\nLet's say you want to store the age of user\nage of a user, which is 32. You can't store\n32 in here, because your computer again doesn't\nknow about decimals, it only knows about binary.\nTo do that, you will need to find the correct\nrepresentation in ones and zeros of 3030.\nAll right, sorry, two, which is not this one,\nto be honest, I'm just making it up as we\ngo. But again, you need to know the correct\nbinary representation of these number in norther.\nTo store that data, how can you know that?\nWell, there is this whole binary arithmetic,\nright? There's a whole part of math dedicated\nto binary doesn't matter for now. But I'm\ngoing to just drive the intuition of it so\nyou can have a better understanding. And if\nyou're interested, you can dig deeper later.\nSo basically, any decimal number needs to\nbe stored in a binary format, which of course\nonly steaks ones and zeros. And what we usually\ndo is just we keep increasing zeros and ones\nin positions, right. So in this case, we have\nthe number zero, the number one, that's fine.\nOnce we need to store the number two, winning\nnow to increase the number, the position right\nhere we need to increase, right, so we need\nto go from two to one zero, we'd go to the\nnumber three, it's one one, and then we need\nto go to number four, we need to increase\npositions again, because we only have two\nsymbols, zero and one. So as you're seeing\nright here, up to these level, we need only\none position. Up to this level, we need two\npositions. This level, we need three positions.\nAnd these levels going to need four positions.\nAnd you'll see how the size of each of these\nis increasing. And it has a\nan explanation behind it that we're going\nto see in a second. So the question is how\nmany decimal numbers you can store with n\nbytes and bits, sorry, bits. So let's say\nwe have n bits. And let's say n is equals\nto three. That means that you only have three\npositions, right three bits, how many total\ndecimal numbers, you can store with it? Well\nwe can store 000 we can store zero, we can\nstore 100 we can start stores are you one\nzero, right? So in this size, we can store\nup to here, we can store up to seven numbers\n111 is equals to seven was, once we've filled\nall the positions, right, we've reached the\nlimit, right? The largest number, the largest\nbinary for this amount of symbols or positions.\nThat's the number seven. So these means that\nwith three numbers, you can start from zero\nfrom zero, here, zero up to one, one. In total,\nyou can store eight decimal numbers, here\nyou have eight decimal numbers 012345678,\ntotal decimal numbers from zero to seven.\nThe\nequation if you want behind this is as follows.\nIf you have n equals three, and it's, in order\nto know how many decimal numbers you can store\nwith those bits, it's two to the power of\nn, in this case, is total a bit. So if we\ngo back into our drawings, we said that with\nthree bits, we can store up to eight decimal\nnumbers. And again, the equation is two to\nthe power of n is going to give you how many\ndecimal numbers you need. You can always do\nthe opposite process using logarithm and get\nhow many bits you're going to need to create\nto store a given decimal number. I'm, I'm\nnot going to get into that. So we don't complicate\nit. But again, the math behind it is extremely\nsimple. So now, moving forward, we're going\nto delete this whole thing. Moving forward.\nWhy is this important? When you're working\nwith your data, when you're doing your data\nanalysis, you know what, what data you're\nwhat type of data, you're working with their\nown numbers, but numbers only usually have\na connotation behind, right? So let's say\nthat you have here it's a table of people,\nand you have the total net worth of the person.\nAnd also you have the age of the person. The\nage is a value that will range between what\nzero, right? Just born\nto,\nI don't know, 120, we can say I don't know,\nwhat's the maximum age registered right now,\nthe oldest human being but zero to 120, it\nseems, seems reasonable. In your other column\nnet worth for this person, the range is it's\ncompletely difference. We can go from something\nlike $0 up to, I don't know $60 billion, I\nthink Mark Zuckerberg or Jeff Bezos or one\nof those. So we go from zero to 62 billions\nin this case, if there are dollars, what happened\nif this is a highly devaluated currency? Would\nwe have to go to trillions, right? So these\ntwo even though they're just plain numbers,\nand we can say they are integers, even though\nthese are pulling numbers, they have an integers,\nthey have a different connotation, and they\nwill need different requirements in terms\nof storage size, right? So if we say that\nnh goes from zero to 120, we don't need so\nmany. So many bits to store it in memory,\nright? We can do the math, actually, how many\nbits Do we need in order to store 120 100?\nAnd what do we say 120. Right? Well, if you\ndo the math, you will see that two to the\npower two to the power of seven is 128. So\nif you have if you have seven bits here, seven\nbits, you're going to store from zero, up\nto 1111111, which is actually 127. Okay, these\nnumber, all ones, seven ones in binary is\nequals to 127. in decimal, in total, we can\nstore 128 numbers 00 matters, up to 127. So\nthat means that for our column right to column,\nage, here age, we only we can use the size\nof the men We need to use is going to be seven\nbits per user, or costumer or person, whatever.\nWhat about these number right here, if we\nhave to go up to a couple billions? Well,\nin that case, the numbers a little bit more\ncomplicated, we're going to need, for example,\nwe can say 64, or 3232. It's actually 64,\nprobably, but with 32 bits, right, you can\nstore up to from zero up to these volume.\nSo again, I don't know about the currency\nwe're using or anything, so we can assume.\nBut here, we need 32\nbits in order to store that. And now you can\ndo the math, how many how much memory space\nyou need, in order to process this data? How\nmany records Do you have, if you have only\n1000 Records, that's not significant. You\ncan use whatever, you can use 64 bits here\nto store the age, and you're not going to\nhave a problem. But what happens if you have\nmore what happens? What happens if you have\nthe entire population of the earth, you have\n7 billion records here 7 billion records,\nthen every bit that you're saving in these\ncolumns is going to be important? Because\nhe's going to take a ton of data. And of course,\nyou have a ton more columns, right? What happens\nif you are processing trillions of records\nfrom financial transactions, right, you want\nto be very, you want to be very efficient\nand optimize every single bit, you can't.\nAnd that means again, selecting the correct\nnumber of have a bit per the columns you're\ncurrently processing. So so far, so good,\nagain, when there's 10, that the the number\nin decimal that we need to store has a correspondence\nwith emits, right? eight bits is one byte.\nAnd the more we can optimize that, the less\nmemory we're going to use for our obligations.\nWhere does NumPy come in place? Why are we\ntalking about data in these NumPy lessons?\nWell, they're right. The idea is that NumPy\nis a library that will lead you has a very\nadvanced numeric processing, in order to let\nyou select the number of bits you want to\ntake for an integer. Even more, let's say\nyou for forget about NumPy, you want to process\nthis thing with pure Python. So you x equals\nfive, for example, working with Python, you\ncreate a number, we're storing age as a five,\nhow many bytes? How many bits? Do you think\nthe simple variable takes in memory? How many?\nWell, in reality, even though we think it\nshould be around, what, three, three bits,\neight, let's say to be simple, too simplistic.\nIn reality, for Python, this is going to take\naround 20 bytes. Okay, so we are wasting a\nton of memory in order to store this number.\nAnd why is that? Well, because Python is a\nhigh level, object oriented programming language.\nThe reasoning behind it is that Python is\nsimple to write, write simple to also read\nand, and, and code on top of it. But again,\nin order to create that simplicity, in its\nsyrup, all the numbers in objects, which have\nall these attributes, that if you know, advanced\nPython, you're going to recognize that are\nnot necessary. So these is taking a ton of\nmemory. And a regular, very simple number\nin Python ends up consuming 100 times more\nmemory than what it should be consumed. And\nthis one NumPy comes in place in NumPy, you\ncan create numbers that are for example, you\ncan control the size, in terms of bits, you\ncan say I want to create a number that has\nonly eight bits. And that's it, that you're\ngoing to create a one byte integer, and you're\nvery precise and how much memory it takes,\nyou can create a number that it's actually\nneed a little bit more space, we're going\nto do NP int, and we can hear us a talkie,\nyou're going to get auto completion 6016 bit\nor eight or 32 or 64, right. So we can actually\nbe a lot more precise in the number of bits\nthat we need. And this is extremely important\nfor again, our high level processing. On top\nof that, NumPy is our array processing library\nat NumPy is 99%, about processing a race constantly\nprocessing erase the data structures we have\nin Python, the built in data structures we\nhave in Python, for example, the list dictionary,\nthey are not optimized for high level computing.\nSo if you have a list of numbers in Python,\nlet's say you have, I don't\nknow, l equals 3224, right, you have three\nnumbers in your list. In Python there, it's\nnot guaranteed that the least they'll the\nlist is gonna contain all the numbers, three\nto four in contiguous positions is gonna,\nit might put them in separate positions in\nmemory. On top of that, you can't rely on\nadvanced CPU directives and instructions for\nprocessing matrix matrices, sorry, because\nPython, again, is wrapping these things in\nobjects. So there is no access to these high\nperformance, low level instructions with NumPy,\nthat changes because when you create an array\nNumPy, you say, I want to create an array\nof three numbers, and they are all into eight,\nthen imposition forget about this is not these\nare not bytes I am, I'm using these drawing\nas a general representation of memory. So\nin that case, in NumPy, when you create these\nthree element, int, eight array, it's going\nto create those three elements in contiguous\npositions in memory, three to four, and they\nare only going to take that amount of memory\nthe police said they were going to take and\non top of that, we can rely on a bunch of\nvery efficient low level instructions from\nyour CPU for matrix matrix calculation, this\nis something that it's a little bit more advanced.\nAnd it's something that has exploded in the\npast 10 years CPUs with more with richer instruction\nsets, and the same thing for GPUs, you might\nhave heard, especially with machine learning\nand all that we need, we need fast array processing,\nwhen we are storing features and weights and\nall that's a topic for for different story.\nBut again, the idea is we need right a ton\nof week, sorry, we can use all these important\nand very efficient, low level directives from\nour CPU, which makes our computations a lot\nfaster. So again, as a recap, you don't need\nto know all these to work with NumPy. That's\nthe first thing. Second, you don't need to\nget extremely, extremely conscious about all\nthe numbers you use. At the beginning, you're\njust going to use NumPy as it is, and you're\ngoing to use just the default types that it\npicks in 38 cents or in 32. In 64, that's\nfine.\nBut then, with when you get into bottlenecks,\nwhen you're working with with larger amount\nof with more amount of data, then you might\nneed to get into the details of that size\nof the integers that you're using. And this\nall applies to float. So I'm just using integers\nbecause it's simpler. But it's all applies\nto floats. So again, NumPy, the main advantage\nis that it's it has built in very fast and\nI raised kit, take advantage of CPU instructions\nfor matrices and arrays and all that. And\nit also has a very efficient representations\nof numbers, right are not the regular objects\nof Python. Again, recap, you don't need a\nlist. If you want to get into more details,\nI recommend you to get a little bit more understanding\nabout binary arithmetic, and how numbers are\nuncomputable architecture, how numbers are\nstored in memory, etc, especially for floats\nand all that's a completely different representations.\nSo with that said, we're going to see now\nhow we actually use NumPy without worrying\nso much about the low level details. And that's\nthe beauty of NumPy. So we have already done\nour low level explanation of binary arithmetic,\nwhy unknown vice important and all that if\nyou skipped it, that's perfectly fine, you\nwill not need it. The reasoning was to include\nwas that if you're in this tutorial, you're\nprobably looking for fast and efficient options\nto process large volumes of data. And that's\nwhen all those things come into play. So let's\nwithout further ado, let's just get started\nand start using NumPy as a library. So again,\nas I told you, a NumPy is a very simple library\nfor array, processing and numeric powers.\nTo sing, it has a few objects, numbers, floats,\ninteger floats, arrays, and that's it. And\nit's very simple, but it's extremely powerful.\nSo, in NumPy, we're going to create these\narrays, which look a lot like Python lists,\nbut there are going to be significant differences.\nThe first one is, of course, performance.\nIf you go to the previous part, when we were\ndiscussing the binary representation of an\narray of numbers, in Python and NumPy, you're\ngoing to see the difference between them.\nSo in this case, we're creating two arrays.\nAnd you will see right that the creation is\nextremely simple. The only thing that changes\nwe need to add this NP dot array, and then\nwe're passing in this case, a list of numbers.\nThis is something we will usually be reading\nfrom external sources. Now, how can you access\nindividual elements of a NumPy array is this\nworks in the same way as with a Python list,\nyou can say give me the first element, give\nme the second element. And it's zero index,\nlike, again, in a Python list. Slicing works\nthe same way. So in this case, up a zero to\nsomething, a one up to three rights, just\ngetting low level, right, on high level of\nthe index, negative indexing, and steps, they\nall work in the same way as with a Python\nlist. So if you know how to use a Python list,\nyou will know how to use a NumPy array. There\nis one new thing right here so differently\nfrom a Python list. And it's what it's called\nmulti indexing. Let's say you have a, an array\nthis case B, and you need to extract three\nelements out of it, you need the element of\nthe first position, third position and last\nposition, you can just type B of zero, B,\nA to B at minus one, or, and this works, this\nalso works for a list. Or you can use again,\nmod the indexing, which is from B, I want\nto select the elements in zero to n minus\none first element, third element on last element,\nright, so you pass an int, another list containing\nthe indices of the elements that you want\nto select. And in this case, the important\npart is the result. It's another NumPy array,\nit's not just individual elements, you're\ncreating another NumPy array, which again,\nif you're processing, it's gonna be a lot\nfaster. So arrays have types associated. And\nthis is related to what we were speaking before.\nAs a NumPy array is a continuous is continuously\nassigning memory, the NumPy library needs\nto know what's the type of the object you're\nstoring, you can't just or you know, anything,\na string a number within it, because it will\nnot be able to\nprovide performance and optimizations for\narrays or non consistence insights. So for\nexample, when we create these arrays only\nhad injures by default NumPy selected in 64,\nis because of the platform, it's a 64 bit\nplatform, you can tune this, and you can select\nus, we're going to see other sizes in a second,\nwhen we created the array B that contain decimals\nor floats, it assign a different type, which\nis float 64. Again, the default type is always\nsix, at least in this platform that is 64\nbits, it's going to be float 64 and integer\n64. You can always change that you can say\nActually, I want these, even though these\nare all integers, I want you\nto\ncreate them using a float type, or as we saw\nin our previous video, we can say it should\nbe actually type integer x. So smaller integers,\nfor performance, for performance for better\nperformance. Alright. So moving forward, we\nwere also going to see a few other types like\nfor example, strings on the regular objects.\nBut as you're going to see this, there is\nno point of storing these things in NumPy\nNumPy, stores numbers date Booleans, but not\na regular individual objects as we're seeing\nright here. There is a way to store strings,\nit's perfectly valid and it has its own time.\nIts own type sorry, and it's related to the\nUnicode representation memory etc. But again,\nNumPy is usually used for numeric processing.\nSo the idea of NumPy arrays is we can create\nmulti dimensional arrays we can create the\nwhat we had created before. This is a one\ndimensional array right? Just one dimension,\nyou can create matrices, which in this case\nare two dimensional, we have two rows and\nthree columns. And NumPy has a ton of attributes\nand functions to work with multi dimensional\narrays. So the first thing we're going to\nsee is the shape of an array, which is two\nrows by three columns, how many dimensions\nit has, it has one vertical and one horizontal,\nwe have two dimensions. And what's the total\nsize of the array in this case, the total\nsize is six, the total number of elements\nwe have, let's go one dimension. Further,\nlet's create a three dimensional object, a\nthree dimensional array, which is basically\na cube. In this case, for B, we have that\nthe shape is two by two by three, the number\nof dimensions is three, and the size is a\ntotal count of elements. 12, you always have\nto be careful when you're creating these multi\nmulti dimensional arrays. If the dimension\ndimensions don't much, like in this case,\nright here, where we have this second list\nthat only has one less than bits in it, then\nthe dimensions will not match. And it will\njust tape you they'll use sorry, that the\narray is of type objects. And the shape is\nonly two only has two elements, these one\nelement, and there's another element. So in\nthis case, we've done we've done it wrong,\nbasically. And you have to be careful when\ncreating these these objects by hand. So how\ncan you index and slice matrices? We've done\nit for a one dimensional array. So we were\nselecting elements, individual elements, give\nme the first element, give me the second element\ncetera? How can we do it with a matrix with\na matrix, what we're going to do is going\nto be very similar to what we did before.\nThe difference is that now we have to account\nfor multiple dimensions when I do give me\na at one, is it the column add one, or is\nit the row at one? Well, as you can see, it's\nthe row. So this is going to be right here.\n012. Right. And there is also another dimension,\nright? So this is 012. In terms of index,\nindex positions for our slicing. So here,\nhow can you get the first element, the first\nelement of this second? rope. In that case,\nyou're going to first select the first row,\nthe sorry, the second row, and then select\nthe first element. And that's what you get\nnumber four. But there is a better way, which\nis by using the multi dimensional selection\nof NumPy. In this case, you're going to say\nfrom this matrix, I want to select and here\nyou're going to pass a in this case, you're\ngoing to pass dimension one dimension to dimension\nthree, dimension four, etc, right. And these\nare selectors for each one of those dimensions\nthat you're passing. In this case, we say,\nfor a row level one, the element, the position\none second element, and for a column level,\nwe want the first element in it. And it's\nthe same thing as we did before. The advantage\nof this index and keeping in mind and remaining\nit is that it will also let you add slicing,\nright, so you'd say I want to select every\nthing from dimension one, which is rows. So\nin this case, you say from zero up to two\nis these two ones, the two is not included\nupper limit the same as as Python. And then\nyou can also pass other other dimensions,\nyou say, I want to select every row, that's\nfine. But then I want to select from column\nlevel, I only want to select the elements\nup to two. So these two and these two, and\nthe two, right, so 124578. These all works\nas intuitive as it gets. Remember this syntax\nis the important that you need to keep in\nmind. Moving forward for modification, you\ncan say I want to assign these new array to\nthis entire row, right? So if the dimensions\nmatch, that is going to work now 10 is equals\nit's added to the second row, or you can just\nuse what we call usually an expand operation.\nWe're just going to say for row number two,\nI want to assign the number 99 and NumPy is\ngoing to take care of expanding it into this\ncorresponding array, given the number of dimensions\nthat you have So so far that selection, it's\nsimple, we're going to see also is that NumPy\nhas a huge advantage of containing a ton of\noperations you can perform on top of your\narrays and matrices, your multi dimensional\narrays in general. So the first one is the\nall the summers basic methods we have. So\ngiven an array, all these methods are already\nbuilt in the sum, the mean average, right,\nstandard deviation, variance, etc. And that\nalso works for matrices. So in this case,\nwe can get the sum the mean standard deviation,\nor we can do it per axis. So this is very\nuseful, we can get the, the here, let's compare\nthese two, there we go, we can get the some\nof these, what is this first column, the second\ncolumn or the third column, we can get it\nthe first row, second row and the third row.\nSo it's either this dimension, this dimension\none, or it's a vertical dimension, which is\nx equals one, right? So per row per column.\nOr, if you have more dimensions, you can just\nkeep increasing the number of this answers.\nAnd that's just going to work as expected.\nBroadcasting vectorized operations, this is\na fundamental topic that we're going to talk\nabout. And it's going to be extremely related\nto Boolean arrays. And these are a few new\nthings that you have to keep in mind with\nworking with NumPy. And now we're going to\ntalk about vectorized operations and broadcasting,\nwhich can be a counterintuitive topic at the\nbeginning, but then you're going to understand\nhow much sense it makes. It's one of the fundamental\npieces of NumPy. We've seen how NumPy works\nin a very general way we saw the multi dimensional\narrays and all those advantages. But you might\nbe thinking, I mean, I don't need another\nlibrary just to complete the summer domain.\nWhen I show you the vectorized operations\nand broadcasting part, this is going to make\na little bit more sense of why NumPy is so\nimportant. So to get started, we're going\nto have these array, which is a right, that's\njust very simple array vectorize vectorized\noperations are operations performed between\nboth arrays and arrays and arrays and scalars,\nlike in this case right here, which are extremely\nfast, they're optimized to be extremely fast.\nIn this case, what we're going to do is we're\ngoing to sum the entire array plus 10. And\nwhat it means we're going to see an example\nof what happens without with Python.\nBut what it means is that let me show you\nthe results, that each one of the elements\nwithin the array will be applied the same\noperation. So usually, that's the concept\nof vectorizing an operation you have the number\nand then this operation is applied to each\none of the elements in here are actually in\nthese other one, right, so here and here and\nhere. And here to result in these new array,\nthe operation is expressed at an array level,\nright, we say a plus 10. That's it. But then\nagain, internally, this is broadcast said\nto each one of the individual elements within\nthe array. And this gives me how a plus 10?\nWell, a times 10, for example, which also\nin this case is we're playing the times 10\noperations to each one of the elements in\nthe array, resulting in a new array with the\nresult of that operation. And these resulting\nin a new array is very important, because\nas we're going to see, NumPy is an immutable\nfirst library, it will not any operation,\nyou performing an array will not modify it,\nbut it will return a new array, if we check\nthe status of a, you're going to see that\nthe elements are the same, it has never changed,\nwe are creating a new array and returning\nit. There are ways to override these behavior\nif you want. And this they all these operations\nwere performing these way always have the\ninterface of plus equals minus equals times\nequals etc, which will indeed modify their\nrights. In this case, we're making a broadcasting\noperation, adding 100 to each one of the elements\nin this array. And now this operation was\nimmutable. A was modified and did it hasn't\nreturned a new operation. If you remember\nfrom your pure Python skills write the correspondence\nof vectorized operations are list comprehensions,\nin which you're expressing an operation for\neach one of the elements in your collection.\nRight. So that's a list comprehension. It's\na it's pretty similar to what we're doing\nwith NumPy. The main difference is that this\nis all optimized and extreme. It's extremely\nfast. So, the operations are these vectorized\noperations are reduced broadcasting doesn't\nneed to be only between arrays and scalars\ncan only be between arrays and arrays. So\nin this case, we have a and we have B and\nshowing you right here. And we can do something\nlike a plus b. And what you're saying is that\nif there is a correspondence, right, so zero\nplus 10, one plus 10, two plus 10, right?\nLet me, let me do it in this way. 110 210\nand 310. There we go. And that's the result\nthat we get right here. So these for these\nto work, you of course, need the arrays to\nbe online and to have the same shape.\nBut when that does work, then the operation\nis extremely fast in memory. And it's aligned,\nit's a vectorized operations with seen so\nfar. Why is this topic of vectorize operations\nso important? Well, because of the following,\nwhich is bull in a race. And this is a very,\nvery, very important thing. If you don't completely\nget it now, I asked you please, to go and\ncheck the exercises we have for this lesson,\nbecause we're gonna use it a ton. And we're\ngonna, we're gonna see that in pan, this,\nthe same syntax, the same primitives of Boolean\narrays, a play apply, and we're going to use\nthe same things. So why are Boolean arrays\nsimilar to vectorize? operations? Well, all\nthese operations we've had performed here\nare just arithmetic operations, mathematical\noperations, plus something times something,\netc. If you look at the operators that you\nhave in your programming language, it's it's\nnot only mathematical operators, like plus\nor minus, or times, you also have Boolean\noperators. And the question now is going to\nbe what happens when you apply Boolean operations,\nwhen you apply Boolean operators to it. So\ngiven our right, we had, what ways we had\nto select different numbers. For example,\nin this case, we need the first and last element,\nwe do zero and minus one. That's, that's the\nway we saw with NumPy. We also saw the traditional\nPython one, right, so we can say a zero, and\nalso want to get a minus one. So this is the\nfirst, the first way of selecting these elements,\nwe know there's a second way with multi index\nselection. And there is a third way and this\nis new, which is with Boolean arrays right\nhere. So in this case, we're gonna say I want\nto select the elements in this order, right?\nAnd you're gonna pass either true or false\nif you want to actually select the element\nor not, right, so if you have four elements,\nyou have to pass four Boolean values, saying,\nI want to select this element, I don't want\nto select these ones. I mean, I don't want\nto like this element. And I do want to select\nthis element right here. So I want the first\none, and the last one, and the result will\nbe the same 030303. So so far, it's it's nothing\nterribly new, right? So this is new, but it's\nnot extremely complicated. We are showing\nyou a brand new way of selecting data, you\ncan select regular Python multi index, or\na Boolean array. Now, you might be thinking,\nwell, I manually write true false false, true,\ntrue false, for I don't know how many records\nyou have a million records, this is not scalable,\nright, you will not say to write all the strong\nforces. But this is actually very important,\nbecause these arrays are the ones that are\nthe result of broadcasting Boolean operations.\nSo we saw again, regular arithmetic operation\nlike this, but we also have it for Boolean\noperations. So we what happens if we ask a\ngreater than or equals to the number two,\nright, and array A is this right here is 0123,\nthen the result is false for zero, false for\none, because they are not greater or equal\nto do true for number two, of course, and\ntwo untrue for number three. So all the individual\nelements that match this condition will have\ntrue and false. In other cases, this is the\npower of Boolean arrays, we will be able now\nto combine these operations. So now we can\ndo a greater than or equals to two, right\nthat a equals A being greater than or equals\nto the number two. The\nadvantage of this is just filtering, we're\nfiltering No, no numeric arrays very quickly\nwith a very familiar syntax a greater than\nequals to and we just provide that as the\nindex of the operation. It's pretty much What\nis happening right here? We're saying use\nthese Boolean array. It's a willing list,\nright? is a Python list with Boolean, to filter\nor sorry to select elements based on that.\nBut the question is, how do we construct that\nlist of Boolean? Well, in this case, we have\nconstructed it by including a predicate by\nincluding a condition that needs to be matched.\nThe result, again, is filtering. It's a query\nmethod, you're looking, looking up some data,\nyou're saying, Give me all the elements that\nmatch this condition. So you can say, for\nexample, these values can be of course calculated,\nyou can say, give me all the elements that\nare greater than the mean. Or you can actually\nprovide other Boolean appraiser operators\nlike for example, all the elements that are\nnot greater than the mean. So that means they're\nless or equals and the mean, or you can also\ninclude all their Boolean operators like or,\nor, and so or n and in NumPy, are expressed\nwith a pipe or an ampersand ampersand. Because\nwe can't use just the regular or and then\nin Python, we can, but it's a good choice,\nthey've selected this. So again, this is the\nconcept of Boolean arrays, we are going to\nconstruct these arrays that artist Boolean\nrepresentations or Booleans, based on conditions,\nright, so we have this matrix, and we're gonna\nsay I want to select these one, and these\none end is one, etc. So in that case, this\nis the result right here. This is the result\nof that. And we can generate a dynamic Boolean\narray, we never manually type all these right,\nwe don't sit and say true, false false through\netc. We just Run Query filtering option, a\nBoolean operation, which results in a Boolean\narray. And now we can use it as filtering.\nSo again, the idea here is that the operations\nwe saw in broadcasting before, a timestamp\nare also defined for Boolean operators. Boolean\noperators return Boolean, a race, which can\nbe used in filtering, that's the idea of all\nof it. And you can even combine these operations,\nyou can say, A equals zero, or a equals one,\na less or equal to two. And it's also divisible\nby zero, you can combine all these queries.\nSo now it looks a lot more powerful than when\nwe were doing before. So moving forward, talking\nabout linear algebra very quickly. And this\nis we're approaching the end of the NumPy\nlesson. The part the important part of of\nlinear algebra is that NumPy already contains\nall the most important operations for it already\noptimized with low level semantics, it's going\nto be extremely fast, adult product cross\nproducts, and all that transposing majors\nis all that works as expected. And again,\nthese might be very important, specially,\nfor example, machine learning, etc. It's it's\nextremely important. And finally, to wrap\nup what we saw in our, in our binary explanation\nat the beginning, what you might have escaped\nis the difference in sizes between NumPy and\nPython, the differences in terms of performance\nbetween them. So in Python, a regular number,\nthis is just a regular engine in Python, that\ntotal size is 28 bytes in order and just let\nthis thing for a second. The total number\nof bytes, not bits bytes that you need in\nPython to store a simple number, as the number\none is 28 unit 28 bytes to store just the\nnumber one is extremely,\nsuper space consuming, right? It's not very\nefficient, larger numbers will even take more\nbytes to store them. What's the size of the\nintegers? Well, we've seen it we have, for\nexample, we can create integers with eight\nbytes. We can create integers with one byte\nright which were something like here we have\nnp.int eight will already know how many bytes\nhas only one byte, right, but you can have\ncontrol of how many bytes or bits write your\nnumbers will take. And you can see here the\ndifference between the size of an integer\nin Python which is extremely large 28 byte\non NumPy and also the difference in performance.\nLet's say for example, we want here you have\nthe ultimate difference in size of lists,\nwhich is also significant. But I want to focus\non performance, we have two elements two,\nwe have one list that has the first 1000 numbers,\nI will have a NumPy array that has the first\n1000 numbers, we're going to perform the same\noperation in both of them. Let's use the Python\none. First, we're going to do the Python one\nfirst. In this case, we're, we're squaring\nall the elements in the list, okay, the elements\nA squared, and then we're summing all the\noperations might so we express it at saying,\ncreate a new list, x times x, sorry, squared,\n4x, nl, and then some everything, how much\ntime it takes 321 microseconds, we're gonna\ndo the same thing with NumPy, we're gonna\nsay NP dot sum, a square. And you're gonna\nsee that it's a lot faster in the NumPy perspective,\nthen the Python perspective. And these are\nall very, very tiny, tiny operations with\nsmall numbers. What happens if we add more\nnumbers, let's add two more numbers here.\nThat's odd. Two more numbers here. And we're\ngoing to do the same two operations. So as\nyou see here, that that the units have even\nchanged, we're still in the microsecond layer\nhere with NumPy, we've gone to the millisecond\nlayer in Python. So as the size of your objects\nincrease, NumPy will prove to be extremely\nfast compared to Python. So there are a few\nother functions you can see here, for example,\nextracting normal, random numbers, etc. I'm\ngoing to live let these for you to look, if\nyou're interested in them, I remember you\nhave the exercises, which can help you solidify\nall the concepts we discussed. And we're going\nto move forward now to work with pandas, we're\ngoing to see also visualizations are gonna\nkeep moving forward this data analysis with\nPython tutorial.\nNow, it's finally time to talk about pandas\nis the most important library that we use\nfor data analysis in our day to day basis\nwith Python. It's a library that will aid\nin the entire process of your data analysis\nproject, you're going to start getting the\ndata, step one, getting the data from multiple\nsources, like databases, Excel files, CSV,\nfiles, etc. That's all gonna get into pandas,\nyou're going to be processing the data, right?\nSo you're going to be combining merging, doing\ndifferent types of analysis, you're going\nto be visualizing the data, right, so a bar\nchart, you're going to be visualizing the\ndata with pandas, and you're going to be creating\nreports, you're going to be also doing simple\nstatistical analysis, you're going to be doing\nmachine learning close to it, with the help\nof other libraries, but everything from the\nplatform that provides the pandas library,\nit's, again, one of the most important libraries\nin in in the data analysis data science ecosystem\nwith Python. pandas has recently released\nthe version 1.0. So we are talking about a\nvery mature library. It's been around for\na long time now. And again, it's the primary\nlibrary that we use in Python for data analysis\nand data science. So I'm going to do a quick\nintroduction to the data structures of pandas\nhouse, and we're gonna understand how they\nwork. So you can start building right the\nphone, we're gonna start building the foundations,\nI need you to be very familiar with the way\nthe data structures from pandas are processed.\nAnd then we're going to move into other things\nlike reading files, grouping data, etc. So\nto get things started, we're going to talk\nabout the first data structure to pandas house,\nwhich is this series. In reality, pandas has\ntwo main data structures that it uses all\nthe time, and it's the series under the data\nframe. The data frame is the one you will\nprobably be more familiar with. It looks just\nlike an Excel table. But we're gonna start\nfirst with a series. Okay, so just stay with\nme here. We're going to talk about a series\nfor a second. In this case, we have important\npandas, and we have also imported NumPy. As,\nas you might imagine, as I told you before,\nin the NumPy part of this tutorial, we're\nsaying NumPy is fundamental for data analysis\nbecause every other library pandas, matplotlib,\nthey all sit on top of NumPy and you can see\nit right here. We're gonna be using some features\nfrom NumPy within this lesson, too. So these\nis a series in pandas, what you see right\nhere, it's The concept of a series is this\nordered sequence of elements right? Or indexed\nright with they are all indexed by a given\nindex, of course. And you might think that\nthis looks a lot like a Python list, right?\nSo in this case, we're storing the population\nof countries, right in millions of inhabitants.\nIn this case, it's jevelin. g7. pub is because\nwe're getting the population of the Group\nof Seven, you can console the Wikipedia page.\nBut basically, we are storing population in\nhere in this series. And again, it looks a\nlot like a list, but we're gonna find a ton\nof differences in here. So the first one is\nthat the the series has an associated data\ntype. And this is something we saw in NumPy,\nwhen a NumPy array couldn't hold different\ntypes of objects, we were all we were only\nhaving one type of object. In this case, it's\nfloat 64. So all the numbers of the series\nwill be of type float 64, the underlying data\nstructure, the 10, this is using to store\nthese objects is a NumPy array. So a second\ndifference we see very quickly is that zeros\ncan have a name, right. So now when we display\nthe series, we see that it has a name. Now\nit might not make a ton of sense. But once\nthis series is part of a data frame in the\nform of a column, then the name is going to\nmake a lot more sense. So moving forward,\nagain, we saw that A has a type. And again,\nthis is because the backed the data is backed\nby a NumPy array that you can always consult,\nyou can check values of a series. And you're\ngoing to get the array that it's backing up\nthat pandas series, right, so you can see\nthat it's a NumPy array.\nOnce you have these series, we were just consulting\nhere, design pop, you can in you can select\nelements as you good in a regular list, right?\nSo for example, give me the first element,\ngive me the second element, the last element,\netc. And that's because a series inherently\nhas an index, similar to list a list when\nyou create a list in Python, right? So if\nI create L equals a, b, and see, but there\nis something wrong here missing, quote, this\nlist, we don't say it right. But the idea\nis that there is an index here, zero, this\nis one, and this is two, right? In the pendous\nseries, this is a lot more explicit, each\nelement has an associated value within it.\nAnd you might think that is pretty much the\nsame thing. They're all they're both the list\non the series, there are both sequences, they're\nordered sequences of elements. But we're going\nto see that there is a fundamental difference,\nand is that we can arbitrarily change the\nindex of a series. So by default, when we\ncreated it, we didn't assign any indices.\nSo by default, it was a range index from zero\nup to n minus one elements. But you can actually\narbitrarily again, say, what is the index\nof your series. And in this case, these data\nstructure these series has now these indices\nthat we're seeing right here. Why is this\nimportant? Because now we're going to be referring\nto these values, not by a sequential position,\nbut by a name, but by a label by the index,\nwhich has a meaningful name for us humans.\nOkay. So now, these thing looks a little bit\nmore like a dictionary we could say, than\na list, we started thinking that a series\nwas similar to list but now, we can think\nthat a series is limit similar to a dictionary.\nBut wait, don't get me wrong here. The series\nhas a fundamental trait, and it's that it's\nstill ordered something that didn't happen\nwith. With dictionaries, dictionaries in Python,\nare not ordered, actually, in python 3.7.\nThey're ordered, but we shouldn't be thinking\nthat they are ordered their unordered data\nstructures. In this case, a series is in the\norder. So it has both those advantages. It's\nordered candidates always before friends,\nthat's as we decided to create it, but also\nit has names or labels or keys associated\nwith the values as a dictionary. So this is\ncreating the series from scratch. Right? All\nthese methods, you can see you can create\na series bypassing the index it doesn't have\nTo be a two step process where you first created\nthe series, and then add the index, in this\ncase, you can do everything at once. And the\nindexing is now going to be done by those\nindices, right. So those labels that make\nup the index will be used to index specific\ndata. So g7 pop, we see has these countries\nwith these population. And now, before the\nindex, we were saying, I want to get what's\nthe population of Canada, and then we had\nto remember, what was the position of Canada,\noh, it's the first help countries, we have\nto do g7, pop zero. With the index, now we\ncan just consult what's the population of\nCanada, what's the population of Japan. And\nas you can see, the syntax is the same as\nwith a Python dictionary, it's just pretty\nmuch same, you pass the key and is going to\nget the value. So again, summary, the advantage\nof a series is it's it's a ordered sequence\nof elements, backed by a NumPy array, very\nefficient very fast. But it also has\nan index that can take any labels we pass,\nso it's going to make it a lot better for\nindexing, you can steal when you have a series,\nyou can still get the elements by the sequential\nordering. After all, it's a sequential data\nstructure, and doesn't matter if you have\nin an index, you can still say, Hey, I know\nwe have on the index. But if you want to get\nthe last element, or the first element or\nthe second element, you're going to do that\nby using the attributes, I look at it and\nsay to this series from this series, I'm going\nto ilok locate by sequential position, these\nelement the element in position zero or the\nlast element. And that still works as expected\nseries also support multiple indices as we\nsaw with NumPy. So in this case, we can get\ntwo elements out of two, three n elements,\nyou can pass multiple indices. And the same\nthing happens with more with sequential multi\nindex series also support range or selection\nor slices. But there is a fundamental difference\nhere, this is very important here attention,\nthere's a fundamental difference with Python,\nand it's not in Python, the upper limit of\na slice is not returned. So from our list\nthat we created before, if I do l, up to number\ntwo, I don't get the index See, right, so\nthis is zero. This is one, this is two, two\nis not included in our pandas series, the\nupper limit is indeed included. So if when\nyou asked from Canada up to Italy, Italy is\nin the result. Okay, so this is something\nto consider when using index selection in\npandas, I think this is still valid, it's\nvery, I understand the reasoning behind it's\njust different from Python. So, you should\nremember, Boolean arrays, which was a topic\nwe discussed in our previous lesson of NumPy.\nBoolean arrays is still a thing in pandas,\nthe difference is we instead of saying Boolean\narrays, we should say Boolean series right,\nthe idea is that we will be able to perform\noperations on top of series. So for example,\nright here we have mathematical operations\non top of series in this case, we have the\nzero D seven pop, which as I told you the\nbeginning is in millions of inhabitants. If\nwe want to get the series of interest units,\nwe will need to do Jessamine pop times 1 million\nand there we go now is in terms of units these\noperations right these vectorized operations\nthe bras these broadcasting operations can\nalso be performed with Boolean operands. So\ninstead of a multiplication, a summation and\nsubtraction, etc. We can add we can use a\nBoolean operators. So in this case, we get\nasked\nwhat\nare the countries that have more than 770\nmillion inhabitants we will receive receive\ntheir assault is a bull in aerates, Nebraska,\nright? Well, let's hear it you know, but basically,\nit's the same concept of with us with a NumPy\nBoolean array. Canada, friends, they do not\nhave more than 70 million inhabitants in Germany\ndoes have seven more than 70 million inhabitants\nhere. 80 on the same for Japan, so Japan Here\nis the same on the same for the US, the US\nalso have past more than 70 million inhabitants.\nSo again, the Boolean array or Boolean series\nin this case, works in the same way, as with\nNumPy. And selection also applies. So I can\nnow select, I can say, give me from these\nseries g7 pop, all the countries that have\nmore than 70 million inhabitants, the value\nis more than 70. So now, again, we are building\nfiltering, we're building a query language\nif you want on top of pandas, we're selecting\ndata based on this condition. Remember, when\nif you ever have trouble remember all these,\nthe idea is that you can always track down\nthe way this index is being built. In this\ncase, we are it's not that the selection knows\nanything, these first election knows anything\nabout how to select countries with more than\n70 these operation was performed first, which\nresulted in these series. And now this series\nwill be indexed by these array, this Boolean\narray. And the result is as you can see it,\nand again, these operations can be run with\ncalculator methods, and all the operators\nwe saw in our previous lesson, which was not,\nwhich was or this irregular pipe, or, and\namberson, which is the and all these can be\napplied in any order you want. So if we read\nthis thing, which is complicated in purpose,\nit's worth saying give me all the elements\nthat are above the mean, minus two standard\ndeviations or below the mean, actually, above\nthe mean, and here was below the mean, or\nif this isn't correct, but it doesn't matter.\nIt's just an OR operation between two ends\nof the it's actually, it's above the mean,\nminus the standard deviation. So we are applying\nthis operation or right, that operation we\nhave before so they're not the or, and the\nand they all work with Boolean selection as\nwell. The operations we saw from a mathematical\nperspective mean in in statistical operations,\nwe saw a NumPy. Some mean, average standard\ndeviation, we're actually using standard deviation\nbefore, they're all still relevant in this\ncase, but also you can use traditional NumPy\nfunctions with our pandas series, because\nagain, a panda's series is internally backed\nby a NumPy array.\nSo this is all the same, as you can see, here\nis an example that it's a little bit more\nclear, we're getting all the countries that\nhave more than 80 million inhabitants, and\nall the countries have less than 200 million\ninhabitants. So it has to be above 80. But\nit also has to be below 200. Okay, or in this\ncase, we say either above 80, or below 40,\nor below 40. Right. So that's with the OR\noperator or the NOT operator. Modifying series\nis relatively simple. Whenever you have a\nvalue, you can just assign it all together.\nIn this case, we're saying Canada is now 40.5.\nI don't know why we just wanted to do it.\nThis is by index, you can also do it by sequential\npositions. So in this case, we're going to\nsay the last country should have 500 now.\nSo we're going to see a right here, the last\ncountry has 500 now, or you can also modify\nelements based now bool and selection. So\nyou can say all the countries that have less\nthan 70 million inhabitants, all these from\nour previous query, all these will now be\n99.9. So as you can see, it has changed all\nthese countries. So this the assignment works\nby direct indexing, or also works by Boolean\nindexing. And this is going to be extremely\nimportant when we are cleaning data. So let's\nmove forward and start talking about data\nframes now before you have exercises in for\nseries, and also for data frames, so I recommend\nyou to check them out. So talking about data\nframes, this is what a data frame is going\nto look like. It's pretty much the same thing.\nus an Excel table. So this was our series\nand this is going to be our data frame. It's\na table. So it looks a lot like an Excel spreadsheet.\nAnd actually, it's very common to create pandas\ndata frames out of CSV files, which are tables\nbasically. And I'm going to create it we created\nwith these data frame object I created. There\nyou go, these are data frame. And as you can\nsee, right, it has columns that we have assigned.\nIn this case, we were designing the columns,\nand we have rows of values right below each\none of these columns. Why? What's the similarity\nwith with series, and it's not a data frame\ncolumn will be basically a series. So we can\nthink a data frame is a combination of multiple\nseries one per column, we're going to assign\nan index to the data frame the same way that\nwe did with our series. So in this case, this\nis our data frame. Sorry, right here. This\nis our data frame that has the index, right?\nAnd it has the columns as we had before, what\ncolumns Do we have, what's the index of the\ndata frame, these are all attributes that\nyou can consult, there are a couple of very\ninteresting methods from data frames that\nwe use all the time. The first one is the\ninfo method. That's going to give you quick\nquick information about the structure of your\ndata frame. Right. So it's going to tell you\nwhat columns you have population GDP surface\narea, HDI continent. And it's also going to\ntell you the types and how many no values\nyou have, it's actually telling you how many\nnon null values you have. But we use these\nwhen we're cleaning data to quickly then define\nthose columns and have missing values, we\ncan check for the size of the data frame,\nwe can check for the shape. And this is similar\nto a matrix right, a two dimensional array\nin NumPy is pretty much a data frame. And\nalso similar to info the voice again, to check\na summary of the structure of the data frame,\nwe can also use this cribe, which is going\nto give you a summary of the statistics of\nthe data frame. And in this case, what we\nsee is that for each numeric column, only\nthose columns are numeric continent is not\nhere, for example, this is continent so you\ncan see the type is object is a string, basically,\nall the numeric columns, we're going to have\nsummary statistics for them. So for example,\nfor population, how many elements we have,\nwhat's the mean, right? What's the average\nRomney, what's the standard deviation, the\nminimum, the maximum, and in between a couple\nof percentiles 25th 50th and 75th percentiles.\nSo this is quick summary statistics. And we\ndo this a lot. So keep in mind, his crime\nmethod is very popular.\nAs you could see, in the in the info method,\nthe columns have associated types, okay, so\nthis is very important. They continent is\nan object that means that it's basically a\nstring HDI is a float and surface area is\nan integer. And that's because NumPy, pandas\nis automatically with through NumPy, is automatically\nrecognizing the correct type to assign to\neach one of the columns. This is similar to\nwhat we saw with a series in which the series\ncontain natural datatype, a series was part\nof a given data type. So that's something\nyou cannot change. And in this case, checking\nvalue counts, you can have a quick reference\nof the types of your series. So moving forward,\nhow will we we will be selecting data from\nseries Well, there are a couple of methods.\nAnd this might be a little bit confusing.\nSo what I'm going to do is I'm going to skip\nand just going to give you a quick reference\nfirst, and then you can read if you want through\nthe process we follow here, given a data frame,\nand this is just two quick rules, given a\ndata frame, you're going to select by index\nusing the lock attributes. So the lock attribute\nis will let you select individual rows. So\nfor example, when I get Canada and that's\nthe value of Canada, when I lock attribute\nwill let you select similar to the series,\nthe row by sequential position. So let's say\nWe want to select the last row. In this case,\nit's the United States of America. So again,\nlook lets you select a select rows by route\nby index, give me the row under this index,\nI log will let you select rows by sequential\nposition, give me the last row, the first\nrow, the second row, etc. And finally, without\nusing lock without using a lock, just by saying\nthe f up something, you are selecting that\ncolumn, give me the entire give me a V and\ntire column population right here, the entire\ncolumn population. So what you're seeing here,\nfirst, first of all, this is a quick reference\ndot dot Lok will give you an element by index,\nI look we'll give you an element by position,\nI wrote by position and just doing df, on\nsome things gonna give you the element, the\ncolumn sorry that you are passing. So it's\nlike, both look on I look, look and I look\nwork in a horizontal ladder, give me this,\nwhile bf art, whatever works in in a vertical\nmontanus, which is getting you a given row.\nBut something more interesting here is that\nall the results, these one and these one and\nthese one, they're all series, what are being\nreturned our series. So that's what we saw\nbefore. And the way it works is first, if\nwe focus in this last example, we're going\nto see that it's pretty standard, just these\nseries right here was is a one return I remember\nit has a type and everything. So that's, that's\nfine. If If we ask for a row, like in this\ncase, we can get for example, here easily.\nThere you go. The result is also series. But\nwhat you can see here is that this thing is\nkind of transposed in a way dot here was the\nvolume of this year is population is here,\nand GDP is here and surface area is here HDI\non continent on here you have volleys. So\nit's it's again, it's it's being transposed,\nright from vertical to horizontal, in our\nregular series manner on the index of this\nseries is extracted as the name\nthat the column hot. So in this case, the\nname right there is the value of the index\nthat it had. So you can read more about it\nright here. But I just want you to remember\nthese rules don't lock you select by index\ndot I lock you select by sequential position,\nthe F at something you go by column, there\nare times when these might not apply. So or\nnot want to apply, there will be some issues.\nSo for example, if your rows if your index\nis numeric, you might have issues with these\nform or dot form, just respecting these three.\nFor now, it's gonna get you any element you\nwant to get either by row or column. So from\nwhat we've seen, the oldest slicing also works\nas expected. So we can get, for example easily,\nor we can get friends up too easily. So the\nupper limit is included. But again, it's built\nlook and we select by indices from France\nto Italy, we can also do the second dimension\nsimilar to the way we worked with NumPy, we\ncan do second dimension here. And we can get\nall the countries that are from France, or\nto Italy, including Italy, but only the population\ncolumn or population and GDP. So here you\ncan see the second dimension being applied\nat the concept of of multiple dimensions in\nselection being applied also to famous for\nilok. It works in the same way that in that\nthen multi index and the slicing. So we get\nfor example, from one to three right in sequential\npositions. In this case, the upper limit is\nnot included. So that's another difference\nfrom what we have. And we can also do multi\ndimensions we can say give me the countries\nfrom one to three and the column should be\n0123 should be the third column, the fourth\ncolumn, the column under index three which\nis HDI, so that also works as expected. And\nagain, recommended, always use Look, I like\nto select rows and just use the naked data\nframe to select columns as we saw before.\nNow moving forward, conditional selection\nBoolean arrays will series, whatever you want\nto call it. This also works for data frames.\nAnd it's very important, it's a way to filter\ndata, it's a way for us to consult the data\nwhen the when, when it so in this case, what\nwe have is, we want to select all those countries,\nwhich the population is greater than 70. Okay,\nso all the countries that have more than 70\nmillion habitants, similar to what we were\nwe did with a series, but in this case, we\nwant to do it with a data frame. So what you're\ngoing to see here is that we're going to construct\na Boolean series as we did in our previous\nvideo, right? So every country with more than\n70, false false, true false. And we're going\nto inject that result, that Boolean series\nin a dot lock selection, give me all the countries\nwhich match here than that the true value\nin it. And remember, just this is kind of\nmnemonics are a way to remember, the way pandas\nknows how to filter things is by matching\nthis index, right from the resulting series.\nWith these index of the resulting data frame.\nThese are two different objects, they are\ncompletely different objects, but their index\nmuch. So here, Japan, March, Germany March,\nso here, Germany, on Japan, they are the same,\nand that's why that thing is working us expect\nthat they This is just the first dimension,\nwhich is give me these rows, you can also\non the second dimension, saying give me these\ncolumn, or these columns, right. So that's\nsteel, that's the awards us desire. So what\nabout dropping stuff, you can say, whenever\nyou have data from you can say give me just\nthese pieces, or you can say drop the others,\nright, it's just pretty much the same. Dropping\nis very simple, you can drop by index, drop\nthis value drop Canada altogether, period,\nor drop these indices can in Japan, or you\ncan also drop columns, drop population, and\nHDI as columns. These ways also have a more\nadvanced usage, which is with access similar\nto NumPy. I don't recommend them so much,\nbut you can still use them and see them here.\nSo all the operations we've seen, so far,\nthey're all working. The most important part\nhere is the broadcasting operation that we're\ngoing to do between series. So we're going\nto create a new series crisis. And I'm gonna\nshow you what it looks like. So we have here\ncrisis. And we're going to perform a broadcasting\noperation between between these, I'm going\nto show you what this thing looks like first,\nbetween that two, these data frame on the\ncrisis. And the result will be that we will\nsubtract, I don't know what's this number\n1 million, subtract 1 million for each volume\nin here. And we're gonna subtract 0.3 HDI\nfor each one of those. So what you can see\nhere is again, this alignment between columns\nand indices, the GDP here is matched with\nthese GDP and the HDI is much with these HDI.\nSo there are two different objects, two independent\nobjects, these series and these data frame\nhere. But when we combine them with an operation\nlike this, the the columns in this case are\naligned GDP, and HDI and they work together.\nSo you're gonna subtract these value in all\nthese column, let me remove this, you can\nsubtract these values in all this column for\nall these values, I'm going to subtract these\nvalue here in these column for all these values.\nThat's the way it's going to work. So moving\nforward, what about modifying data frames?\nNow I wanna I want to show you something.\nAnd that's when we were dropping stuff before.\nWe were not actually modifying the data frame.\nSo here we did df dot drop Canada, but df\nstill has Canada in it. And that's because\nsimilar to what happened with NumPy these\noperations are all immutable. They are not\nchanging the underlying data frame. We are\nstoring. We are storing we're creating new\ndata frames that store the result of the given\noperation. So in this case, you have to drop\nCanada. The result is that the these new data\nframe but the underlying That iframe is not\nchanged. That's because again, they are immutable\noperations. 99.9 operations in pandas, it\nare immutable, there are ways to change it,\nthere are ways to make the changes permanent.\nBut for now, I want you just to think that\neverything is immutable. Whenever you want\nto perform an operation, it's going to create\na new series. If you want to keep track of\nthis, you will just need to do something like\ndf two equals that, or even df equals, you\nknow, just to modify the current data frame.\nAgain, there will be a way to not do that.\nBut we're going to save in a sec. So modifying\nseries more explicitly, that affrontare modifying\ndata frame more explicitly, how can you create\na new column? Well, very simple. Assign a\ncolumn, I said, let's say in this, this column\nright here, it says similar to say, here,\nlanguage. Oh, it's just read only. But if\nI say language equals, and I can just write\nwhatever I want. In this case, what we've\ndone is that the language, let me show you\nwhat Lynx had, in this case, was a tiny series,\nit didn't have elements for all the indices\nin the data frames, but that doesn't matter.\npandas will match all the indices of our chill\nexist. And it will live like the rest. This\nna n is what we use for a blank. It's another\nnumber from NumPy. We're going to talk more\nabout it when we start doing cleaning data.\nData cleaning, sorry. So again, links France,\nGermany, Italy, you can see the volleys are\nall up there. What happens if you want to\nchange a value the language series already\nexist, you want to change it or column or\nread exist, you want to change it. So in this\ncase, we're going to say df language equals\nEnglish. So we're going to change it all together,\ndf now will be affected, and all the values\nof language will be English. How can you relate\nHow can you realize when there is an operation\nthat is changing the underlying data from\nthe underlying series or than the line NumPy\narray, it's usually when you have an equal\nsymbol, remember, NumPy, we saw something\nplus equals, in this case, whenever you have\na plus and equals symbol is you're modifying\nthe underlying data frame.\nSo for example, check this out, the Rename\nfunction or method of a data frame will let\nyou pass columns and indices to rename. So\nin this case, we want to change the United\nStates to USA, the EU, United Kingdom to UK\nand Argentina to AR, Argentina doesn't exist\nin this data frame. But that doesn't cause\na problem. And that's why we want to show\nyou, the US, UK were modified correctly, and\nHDI was modified correctly. And a PC which\ndoesn't exist, didn't cause any problems.\nNow, why am I showing you this because remember,\nthese operations are immutable. If I check\nwhat's the state of the data frame, we see\nthat the original data frame has not been\nchanged HDI a steel HDI, it doesn't matter\nif we renamed it before, it's still the same\ndata from the same thing for days, indices,\nall these operations are immutable. A few\nmore examples of modifying data just for you\nto look at. And something that is very common\nfor us is creating columns that are combinations\nof other columns. So again, this is read only,\nbut you can you can imagine, that I could\ndo is hear something like for example, GDP\nper capita, right? If I go here, and I do\nGDP per capita, GDP, p per capita, per capita,\nand here I say is equals to the GDP, this\ncolumn divided by this column, right? So I\ndo something like B, B three, actually, C\nthree, C three, divided by b three, right.\nAnd then we would extend the values all the\nway along here. In pen this, we could do something\nvery similar. We can do just any column, we\ncan just perform operations, broadcasting\noperations between them, in this case, GDP\nby population. And we can assign that series\nwhich is a result right there. So it's a series\nwe are going to assign that series to a new\ncolumn. So GDP per capita Now, there you go\nis now a column of our data for. Again, all\nthese broadcasting operations are extremely\nfast, they are backed by their NumPy array,\nand they result in a series. So very quick\nstatistical information, a few methods, right\nto do summary statistics. We saw them with\nthis crime method. But minimum maximums mean,\nmedian, all that works as expected. Something\nthat I want you to note here, if possible,\nis that with pandas, we have, I'm going to\nchange colors here, we're going to use red.\nWith pandas, you have this concept of a data\nframe, right data frame that has multiple\ncolumns, multiple rows. And these operations\nare resulting operations are resulting in\njust one series. So in pandas, you have your\ndata frame, and you have your series. And\nwe could say we have individual numbers. And\nit's like always, the data frame is always\nresorting back to this, it's like some operations\nwill just return a series. And the series\ncan be used in a data frame, right. So in\nthis case, these resulted in a series, but\nthen we merely use the series to set the value\nof a column. Right. So that's why understanding\nseries is so important. So there are a few\nmore assignment exercises for you here. So\nyou can check them out and complete them if\nit's going to make a little bit more sense\nonce you're working with it.\nFinally, I want to give you a very quick introduction\nto reading the external data on plotting.\nAnd to do that, we're going to use a few methods\nthat are very popular in there, maybe we can\nlook them up very quickly here, we can say\nread CSV, use the read CSV function from pandas.\nSo these function, read CSV. And as we have\nread CSV, we actually have a few others read\nsequel, read Excel, read XML, there are multiple\nadjacent or multiple ones, read HTML will\nbe able to automatically parse an HTML page\nand read it. So a few functions like these\nlike, what we're going to do with these read\nCSV, right here is the structure of it. A\nfew of these functions will let us import\ndata from an external source into our pain\nthis workflow. So in this case, what we're\ngoing to read is these BTC market prize volumes,\nso it's right here, if I open the CSV, this\nis what it looks like. It's the date of the\nprice taken a read and devalue the bread,\nthe timestamp, and the value the timestamp\nof the value no decide the price of bitcoin\n2017. Now it's close to $9,000, I think. But\njust note inside, but again, this is a CSV,\nand this is a CSV that we're going to be writing.\nTo do that, again, we're going to use this\nmethod read CSV, the method will automatically\nparse the CSV, as expected. And there you\ngo. And the process now will be for us to\nstart tuning it to get to the right point.\nSo I'm going to show you a few customization\nSP customizations, we can do with the receipt,\nread CSV function. So the first one, and sorry,\nlet me tell you first, we have a ton of attributes\nhere. So we have a ton of customization to\ndo with read CSV, you will not remember all\nthis, you will not remember everything out\nof the top of your head. So don't worry, you\ncan always go back again to the documentation\nand just practice, it's going to come naturally.\nSo the first thing, the first row of the CSV\nwas considered to be the column names. So\nin this case, this fine lesson have a column\nname, let's say I add it, I'm going to do\ntimestamp, timestamp price, you're going to\nsave it, I'm going to rearrange the file and\nre re read it. There you go. So by default,\npandas is assuming that the first line of\nthe CSV is the rd columns. I'm going to go\nback into what it was. Right, and I'm gonna\nshow you again, that's the assumption that\npandas is doing. We're gonna Of course, of\ncourse, change that assumption, because in\nthis case, our CSV file does not have column\nnames. So we're going to just say Heather\nequals none. And this is when we start seeing\nthe attributes that we're going to use from\nthe read CSV function, read CSV. When I do\nhether equals none for us going to be known.\nThat means don't infer don't read a header.\nDon't try to infer a header, a header from\nthe CSV file. And the columns are zero and\none. So now I'm going to change the columns.\nAnd I say, actually to be time something prize.\nAnd now what I'm going to do is show you the\nfirst rows. So you're saying here that I have\nthese df dot head method that I'm doing. That's\nbecause this is a significantly large file.\nSo we're going to say not not that long, but\nat least it doesn't fit in my screen. What's\nthe shape of the day CSV or the data frame?\nIt has 365 rows, and we have two columns.\nSo we can do df the info, for example, to\nhave a little bit more reference about we\nhave 365 values, there are no no values, and\nprice is actually float, that Tamsin is an\nobject and we're going to fix that in a second.\nI'm sorry, that the F that head on the F dot\ntail, are the methods we used to get either\nthe first and files or the end row sorry,\nor the last n rows, which are five rows, by\ndefault, you can change that and say, Show\nme the last three rows, for example, that's\nsomething you can do. And again, the types\nso the types is the timestamp in this case,\nthe timestamp column was not properly parsed\nas a date, he was parsed as an object as a\nstring, which we don't want. So we're going\nto use the function PD dot today time, something\nwe're gonna explore in more detail in the\nreading in the cleaning data cleaning course.\nPart sorry, if it weren't tutorial, we're\ngonna use it today time function to turn these\ncolumn D f, the timestamp into an actual date.\nAnd now we're going to say, the F that timestamp\nequals to this function resulting, and now\neverything looks as expected, there is one\nmore change that we want to do, we want to\nset the index of the data frame to be the\ntimestamp, because by doing so, we can quickly\naccess price information led me see what was\nthe price of bitcoin in 2000 1709 29. And\nI make a mistake here, I forgot to do the\nLLC. There you go. So we have the value of\nBitcoin. On these particular date, forgot,\nlook, remember that to get value from a particular\nrow, you have to do dot lock. There we go.\nSo we are getting Dodd's particular value.\nBecause we've made a timestamp the index,\nwe get artists value directly from the index.\nSo what happens if you want to turn this thing\ninto an automated script, for example, when\nI run this process, every day at 5am, whatever\nwe can, we want to read the CSV, strip the\ncolumns, rename them turn into timestamps,\netc. This is what we've done so far. Read\nthe CSV without a header, create the columns,\nturn it into a daytime timestamp into a daytime\nand assign it to the index. And that's the\nresult again, well, actually, the read CSV,\noh, sorry, the read CSV method is so powerful\nthat it will let us do all these actions in\njust one call of the read CSV method, we there\nare parameters that will let you customize\nthe behavior to achieve the same results that\nwe did with four lines of code right here.\nSo in this case, we're gonna say, read this\nCSV, don't assign a header, that's something\nwe do already or don't don't infer our header\nfrom the first line. These are the column\nnames. So we don't need an extra line, we\ncan just say these are the columns names.\nOh, and by the way, the first column is going\nto be the index of the data frame. Oh, and\nalso part of the date. They've the index,\nit's a date, so part of the date, and we have\nthe same result as before. So now I'm going\nto pro try and same thing. There we go. So\nyou can see it's work. So very quickly pan\nthis plotting. Alright, so we're going to\nbe doing here is I want to show you very quickly,\nI don't know what's this thing is as a vertical\nscrolling. I want to show you very quickly\nthat you can create plots with Hannah's interest\na breeze. It's so simple to create a block.\nSo in this case, what we're going to be doing\nis, given a data frame, you can always invoke\nthe plot method. And the plot method, what\nit's doing, it's using the map plot live library,\nsomething that you can check if you want in\nthe docs. But for now, it's not necessary\nwith these, we're going to be more than enough.\nWhat it's doing is just using, again, the\nregular plug library, as you can see dimopoulos\nLibrary, which is part of the standard PI\nData stack. And again, for us to access using\npandas is extremely simple, just df dot plot,\nyou're done, you can set the plot as you want,\nwe're gonna see more details of matplotlib.\nSo don't worry too much about that later.\nSo there is a more challenging example here\nthat I can just run very quickly, you can\ninspect the process we follow to fix the data.\nBut this is what we have, there we go.\nAnd what you can see right here is the difference\nbetween the Bitcoin and ether in this period\nof time right here, and they are both loaded\nin the same chart. And that's because this\nis the resulting data frame, we have Bitcoin\non one side, and we have ether on the other\nside on we are plotting it right here, we're\ncreating one plot with all of it. And we are\nnoticing these empty value right here. So\nwhat we can do is we can go from December\n1 up to January the first these period, so\nwe can select that period, is in that lock.\nAnd we can just go ahead and plot it again.\nAnd this is what you see right here, the gap\nthat we're seeing. So again, this was the\nintroduction to pindus. We have a real life\nexample of pandas following up. Also we have\na little bit of data, more data cleaning on\nreading all the interesting files and sources\nof data for in getting more data into the\npipeline, right. So the idea is going to be\nshowing you how you can import data from Excel\nfrom SQL and then do the actual processing\nand analysis.\nNow it's time to talk about data cleaning,\nwe have arrived to that point in our tutorial,\nin which we have pulled the data, I've shown\nyou how to manipulate it with pandas, the\nbeginning at least the introduction to data\nmanipulation with pandas, and now it's time\nto properly fix it. For the sake of brevity,\nwe are skipping a few parts of the process\nof data cleaning, especially you're going\nto find it in this first notebook that we\ntalked about basics, conceptual, missing data\nwith Python with NumPy. And we're going to\nmiss a few other things. But I'm just going\nto mention them. pretty generic, pretty general\nform. And then you can of course dig deeper,\nyou can check our courses if you want to know\nmore about it. Usually when we talk about\ndata cleaning, where it's in from a more conceptual\nlevel, we're going to talk about a four step\nprocess. The first step is usually finding\nmissing data, which is the simplest problem\nto identify from a data set when something\nis missing. So you have car sales data. And\nthere is a car that has no name right? Or\nthere is a card has no price, right? So there\nis an number missing or there is a category\nmissing and there's a string missing. And\nof course, each one of those is going to have\na different meaning how to solve how to fix\ndata set that is missing data, it can be very\nsimple. If you can just for example, drop\nthe record, if you can fill the value, right.\nSo for example, the prices fill in these missing,\nyou can fill it with the average value of\nthe sales data or something like that. Or\nit can be very complicated if the volume is\nimportant if you can't move forward until\nyou actually find that missing volume. And\nit can involve something like picking up the\nphone calling your ETL team asking what's\ngoing on that the data is missing. Or even\nif you're buying the data, you have to call\nthe vendor, ask them why their ID if you've\nyou're paying for that and there is data mentioning\netc. So it can be a very political process.\nIt depends what's your use case. But again,\nfrom a technical perspective, identifying\nmissing data and fixing it is going to be\nextremely simple. Once you have fixed the\nmissing values, then you start looking for\nthe data is assuming the data is not clean\nyet in this process of data cleaning. The\nsecond step is when there are invalid values.\nSo you have for example,\ncolumn that is price and there is a string\nwithin it right here. We're expecting only\nnumbers and there are strings in it. So then\nIt's not going to be complicated to identify,\nit's not going to be too complicated to fix\nit. But again, we're increasing the complexity\nuntil a deeann of these data cleaning process,\nwe're gonna reach problems that have to do\nwith the domain of the day you're looking\nright. So for example, you have a column that\nis customer age, and there is a value that\nis 170. Right? So that is not an invalid value,\nit's a perfectly valid integer. The problem\nis that given the domain, right, but speaking\nabout customer age, is highly unlikely that\na customer is 170 years old, right? So in\nthat case, the vowel is completely valid,\nthere is no missing data, there is no invalid\nvalues, etc, is just about the domain. And\nthis is when things get very complicated,\nbecause in this case, that example of age\nis something that resonates with all of us,\nwe know about age of humans. But if you're\nworking in a domain, if you're working as\na data analyst, in a domain that you don't\nknow much about, right, then you might not\nbe able to judge if a value is invalid or\nnot. If I am working in a biology lab, and\nI have something like white cells count per\nmilliliter of blood, I don't know what's what\nit's a good value, or what's an invalid value,\nright. So it's, it's something you need to\nknow the domain. So that's usually the the\nmost complicated part of data cleaning, when\nyou reach the limit of everything is valid,\neverything checks out. And now I need to make\nsure that these value is valid for these domain\nthat we're working. So again, this is the\nspectrum that we're going to be revisiting\ntoday. So to get things started, the way pin\nthis works with no values is is it has four\nfunctions, which actually there are synonyms,\nit's going to be it's going to be relatively\nsimple, just trust me on that. There are a\nfew things first, everything that pandas does\nin the process of missing values, is related\nto the way NumPy works. So again, we're skipping\nit, you can go to that notebook, check it\nout by yourself. But it's extremely simple.\nNumPy has these objects and n not a number\nto identify a missing value or no value in\nPython world to have the non value. But again,\nin pandas and NumPy, we're going to use na\nn none on there, or in this case, at the beginning,\nwe have these two functions is no n is na,\nwhich are complete synonyms, we're going to\nfind also is no and no we have it isn't a\nand they're also complete synonyms. So no\nn na for pan, this is the same. You can use\nthe one you prefer. Sadly, I like is na because\nit's the way I learned it. I think for my\nstudents I usually recommend is no, because\nit feels more correct. And it feels more self\nexplanatory. So you can use the one you prefer,\nif you can use is no, I think that's going\nto be better. If you get used to ease in a\nthen you're going to be on my side, just do\nwhatever you prefer. So again, it's no one's\ngonna say true or false, depending if the\nvalue is no or none, right? And of course\nnot No, it's going to be or not na is going\nto be the opposite. So not na have not a number\nis false, and not an A of three is true. If\nyou get to this first notebook, you're going\nto set all the false e values on the true\nfi values in detail in terms of Python, anything\nthat is not empty or non etc is going to be\nconsidered to be truthy. So anything you pass\nhere that again, is not an empty string or\na no is going to be considered a true fi value.\nSo it's no not no or is it a and none an A,\nthey both work also with entire series or\nentire data frames, right? So it's not just\nfor one of Valley you can pass an entire series.\nAnd the result back is going to be if the\nseries is if the series what values in this\nseries are either no or not no, depending\nwhat's the question you're asking either is\nnull or not null. So in this case, we say\nwhich one is of the series are no, this is\nnot, no this is not No, this is no so this\nis only true. And the opposite for the following\nmethod we are applying are actually function.\nAnd again the same thing works with not\nentire entire data frame. So something we\ndo usually is if you look in to not know unknown,\na few hacks that we usually apply are the\ncount on actually this be the sum of all the\nno values or not no value. So we have this\nentire series, we can say how many not null\nvalues we have. And if we sum those, not no\nvalues. In this case, we're going to get a\nresult out which is the entire the entire\nsummary Have the nod no bounds we have asked,\nand the same thing is gonna happen if we say\nis no. So if I do here is no, some, we're\ngonna get how many novels we have? And it's\npretty much the opposite of this question\nis no. And the way it works is in Python bullions\nare pretty much integers, they're ones and\nzeros. So every true Val is going to count\nas one and every four is going to count as\nzero. So if you ask for the sum of a Boolean\nseries, you're going to get out the result\nof the number of truths that are available\nin that series right. So, in this case, we\nhave to know values we ask how many knows\nvalue we have is know that some we get two\nout, you can use these tricks to filter the\ndata with a series. So in this case, we can\nsay give me all the values that are not known.\nRight? Just not know. Also, something interesting\nis that both for data frames are for series.\nThe not not no is no isn't a not an A methods\nalso, sorry, functions also work as methods.\nSo in this case, we can say instead of PV\ndot know, we can say s.is, no load s, that\nis no. So now, it gets a little bit more,\na little bit simpler. But if the final objective\nof these core as equals alzarri, s selecting\nonly the boundaries are no no, was to drop\nthe null values, then there is a simpler form,\nwhich is dropping, okay, so in this case,\nwe can say s dot drop in a, and we're basically\ninvoking the same thing that is happening\nhere, we're missing we're just excluding sorry,\nall the missing values in the series or the\ndata frame, because this also works for data\nframes. So what's the one, one important thing\nto remember here is that all these methods\nare immutable, we are not actually changing\nor modifying the original series, the underlying\nseries is not being modified, there is a new\nseries that is returned. So if I invoke s,\nagain, this thing has is not modifying their\nseries, you're creating a new series, and\nthat's the one that hasn't, that doesn't have\nthe missing values. Everything we've said\nalso works for data frames. So right here,\nwith these on a frame, we can say how many,\nright? The first thing usually is to start\nwith an info method, right? So we have info,\nand we see that there are in total, four entries,\nfour rows, we can also do a shape, if we need\nmore information about the structure of our\ndata frame. So there are four rows, four entries\nin our index, column A has only two no no\nvalues. So that means there are two values\nthat are actually no no, sorry, no, there\nis column B that has three nought non null\nvalues. So that means that one value must\nbe known, and that's for column B, again,\nso usually info gets you very close to understand\nthe structure of your data frame and how many\nvalues there are missing. The same thing happens\nwith some, we can just do df.is, null isn't\na and then some, we're gonna get a quick reference\nof how many null values we have in that given\ndata frame. Drop in a works in the same way,\nbut there is a significant difference. The\nway drop in a works in a data frame by default\nis by dropping any row that has at least one,\nno value. So these row has no value dropped,\nthese row has no value dropped, these row\nhas two new values dropped, this is the only\none that it's not being dropped, right. So\nit's very harsh in that respect, you can change\nthat to make it to the column only, only keep\nthe column that has no no values, and that's\nby switching the axis equals to one. And there\nis also a way to select a subset or thresholds.\nSo only delete rows that have less than three\nvalid values. For example, in that case, you're\ngoing to use something like the strategy of\nthe drop in a you're gonna say, drop the columns,\nthe rows, sorry, are the columns because it\nis also works for columns that have all the\nvalues and no, or drop. The This is the default\nbehavior, drop all the rows that have any\nvalue in an NA or specify a threshold, which\nyou mean by basically saying, I need this\namount of valid values in order to keep the\nrope it's the way it works. Now, which ones\nto drop is which wants to keep based on the\nfresco. So once you have identified it No\nvalues, it's extremely simple to clean them\nto sorry, fix them. So the first method we're\ngoing to see is fill in a within a particular\nvalue, we're going to say from this series,\nI want you to fill the blanks or fill the\nmissing values with or fill the anaise. fill\nthem with numbers zero in this case. So these\ntwo are numbers zero, or, of course, you can\nuse any statistical method you want. In this\ncase, we can use the main. Remember, this\nis not altering the series, the original series\nis still the same, we're not changing it,\nit's creating new series because all these\nmethods are immutable.\nThe following method is or this the following\nway This method works is by passing a method\nwhich is for field or backward fields, these\nare the possibilities. And basically the way\nit works is it's overflowing, all the values\ntop down, at least in Fairfield, right starting\nhere, it's dropping this value here, dropping\nthis volley here. And dropping now three here,\nas this thing is a nun, it gets replaced.\nSo this thing is three now, which gets throw\nup here. And now this thing is three again.\nSo that's what we have right there. And of\ncourse, backward fields works in the other\nway, starts with four and moves, it moves\nit here and then moves here, etc. You have\nto be careful when using these. Because if\nyou have no no values at the beginning or\nthe end, then you're gonna end up again, with\nno values because there is nothing to fifth\nforward, right, this is the first volley you\nhave India. And all we've seen also works\nfor Donna friend. So both boggler fail for\nfield or both in terms of rows for feeling,\nright, so we have, we have these, these data\nsets. So we do for field row base is going\nto be one to here too. And then five. So that's\ngoing to be for field x is one, if you use\nfor field x zero, then it's a vertical filling,\nright? It's going to go here, one 130 30.\nSo that's for the column, that is y here,\none 130 30. So it's either for filling in,\nin, sorry, this direction for failing, or\nit's going to be in this direction, depending\non the axes that you are passing. And actually,\nlet me we're going to put the correct forms\nwith axes equals zero, it's going to be columns,\nit's going to be visit direction with axes\nequals one, it's going to be row based. So\nit's this direction, right? So we had a no\nvolley here, that got fail in this way. Okay,\nmoving forward, we what else we have, we have\nhere, checking for values. And we've pretty\nmuch seen this already, you can use the is\nknow, the sum method to get how many values\nyou have. And there is also any an old, which\nwill give you very quick. These are usually\ncalled Boolean tests, you can say ask if there\nare any values are valid, or all the values\nare valid is just to build more complicated\nqueries. So so far, so good. So the process\nwe said was at the beginning, we were fixing\nmissing data, missing values, there is nothing\nin there. We have read a data frame, where's\nour data frame right here? We have read our\ndata frame from CSV from a database, and the\nvalue is missing. No, there is a hole in it.\nSo we have quickly identified it with isn't\na or is no, we were able to drop the ones\nwe didn't want to keep dropping a or we were\nable to fill the volume we wanted to fill\nfill a name that was simple isn't a drop in\na fill in a what happens when you're cleaning\ndata that actually has a value, so there is\nno nothing missing.\nBut those warnings are invalid. So for example,\nhere, the sex column is a categorical column\nthat only accepts an on f. d on question mark,\nthose are invalid they are, it's very simple\nto see an invalid value here because it's\ncompletely out of the scope. The same thing\nas we have, for example, question mark in\nthe age column where we have we have a string\nin the age column, it's very simple to identify\nthat, how we're going to clean those. Let's\nstart with sex first, because it's simpler\nin this case, the first check we can do is\nwith either unique or with volley counts,\nI'm going to use value counts. We've seen\nthis method before. It's a quick summary of\nall the unique values you have. And in this\ncase, volley counts also gives you a total\ncount for those values. How can you fix them?\nWell, there is a replace method which is extremely\nintuitive. You can just replace in this case,\nwe're changing all of these two F's and The\nEnd two M's, and it can work in multiple columns.\nFor those volleys, that again, we said were\nmore complicated to fix, like, in this case,\nwe know age, in this case, is 290. And we\nknow because we know the domain, that 290\nas an invalid age for a human. So we will\nneed usually in those cases, we're going to\nneed more complicated fixing, and it will\ninvolve more programming, that's the reality,\nyou have to be better coding. In this case,\nwe know that these volley is invalid, because\nit's probably an extra zero. So all these\nvalues, you're pulling a CSV with ages, and\nthere are a total of 180 290 32 320, for example,\ninvalid values out of 100, right in the 100\nplaces. And that's because there were typos\nwhen they were creating the ages. So how are\nyou going to fix that? Well, in this case,\nit involves a little bit more programming,\nwe're dividing everything by 10.\nSo also, something that may be useful is dealing\nwith duplicates. And we need to first define\nwhat's going to be a duplicate value. So this\nis, this is usually a little bit more political,\nif you want, you have to define what's going\nto be a duplicate. In this case, we have a\nseries that contains ambassadors, and each,\ntheir master is the index, the country of\nthe ambassador is going to be the value, right?\nThis is usually the important part. The rating\nhere says the word conducting a party, and\nwe want to invite one Ambassador per country,\nwe don't want to repeat ambassadors, ambassadors.\nSo in this case, what's going to happen is\nthat these two in our humanize at least, we\ncan click clearly and quickly see that these\ntwo belong to the same country. And these\nthree belong to the same country. But here\nagain, we have to define which ones are the\nduplicate, if you want, and which ones are\nnot duplicate. So for example, maybe we can\nsay the first one is duplicate, or we can\nsay the last one is duplicate. So this is\nthe first one not duplicate, or actually can\nsay this, the last one is one, and when I\nbite, it's not to duplicate. So we're going\nto have political rules if you want for each\none of those. So let's see the duplicated\nmethod and the way it works by default. By\ndefault, duplicated method is going to return\ntrue for duplicate for all the it's it, I'm\ngoing to invert it, it's going to not treat\nit as a duplicate as the first instance that\nit says. So the method is actually walking\ntop down right now saying, Do I have friends?\nNo, I don't have friends. I'm going to keep\nit here. Because it's the first time I see\nfriends. Do I have the UK? No, I don't have\nthe UK, it's just gonna keep it here. Then\nit sees the UK again realizes the UK is already\nthere, too. It's already present. So this\none is going to be considered a duplicate.\nItaly is here, it's fine. The first occurrence\nof Germany, it's fine wrightstown, Germany,\nbut then it says Germany two more times. And\nit realizes that Germany was there. So those\nare now duplicates, right. So the way it works\nby default, we can change that and change\nit to last to the last element is not considered\nto be duplicate, and the other two are considered\nto be duplicate. And the same thing here.\nKim, here is the one consider duplicate. So\nit's either top down or bottom up depending\nthe way the parameter you're passing, it's\neither keep default or keep last, or you can\nbe a little bit more harsh on say everything\nduplicate it is actually to be needs to be\nconsidered duplicate. So these two are duplicates,\nand these three are all duplicates, as you\ncan see, right there. Similar to the duplicated\nmethod, which pretty much tells you which\nvalues are duplicated, it's it helps you identify\nthem, you also have the drop duplicates, and\nin this case, what this method is going to\ndo is basically the same thing as before,\nbut dropping all the values are checked for\ntrue, right if the method is if the value\nis missing, it's gonna just drop it. And the\nsame rules apply default, last and false.\nFor subsets in this case, we have Ace, we\nhave multiple, we have multiple players in\nthe data frame. But what happens is that these\nplayer Colby is present three times for humanize\nwe see Kobe three times. What is going to\nhappen here is that the The way we're going\nto think about duplicates is by understanding\nthe correct subset that we should check. In\nthis case, Coby plain as sn SG is duplicated\ntwo times but COBie, playing us in SF could\nbe considered a different player if you want,\nbecause maybe it's a different season, or\nit's a different, a different position they\nplayed. So in that case, we need to pass What's\nthis subset that we are going to consider\nduplicate, only check for the column name,\nor check for the column name on or not check\nfor the column name, which is the default\nis going to check the entire data frame. And\nwhen that happens, then these two are considered\nto be duplicate. So these one is a duplicate\nwith this rule, if we put keep last, sorry,\nkeep false, both are going to be considered\nduplicate. So this second occurrence is the\nduplicate one. And the last one is a completely\ndifferent row, because the the value in position\nis different. That's the way it works here.\nMoving forward with more cleaning of values,\nwe're going to talk about string handling.\nAnd this is a very neat feature of panelists,\nthat special types of columns will have special\nattributes. So given the column type, so df\ninfo, which is an object, which is a string,\nright, in pandas, that all the strings columns\nare going to have these special attribute\nwhich is str, all the daytime columns, something\nwe're not going to cover, but you need to\nknow, all the daytime columns have a.dt, Math\nattribute, all the categorical columns don't\nhave a.ca t cat attributes. And those attributes,\nstr DT cart, they have a special methods associated\nthe domain of that column. All the methods\nassociated with string are of course, we're\nstring handling, or the methods associated\nwith DT r for data handling. So in this case,\nwe're going to review all not all very good\nsubset of the string methods we can apply.\nAnd something interesting is that all these\nmethods have a very good have a lot of relevance.\nAnd they're related to the ones in pure Python.\nSo if you have a pure Python string, there's\na split method. There is a contains method\nor I don't know if there was a contain actual,\nit's actually, I think it's the in operator,\nbut there is a strip, and there is a replace,\nright, so most of the methods under the str\nattribute in pandas have,\nhave an analogy in the standard library of\nstring handling with Python. So starting at\nthe beginning, this data we have, I'm going\nto delete this this data we have, what we\nare going to do is split the values right\nby an underscore. So in this case, that's\nwhat we have, we have split all the volleys\nwith that underscore, and we're going to use\nthe special attribute is expand, expand sorry,\nequals true. And what it's going to do, it's\ngoing to create a data frame out of that.\nSo we create a data frame with 70 columns.\nAnd this is what we have now. So we can keep\napplying methods. So for example, contains\nor content contains, regular or contains with\nregular expressions rights for you to see\nthe power of it, we can just strip replace,\nand we can do even regular expressions with\nreplacing so we could fix something like this\nquestion mark in a string, we could fix it\nwith regular expressions if you know how to\nhandle them. And finally, something that is\ngoing to be very helpful when you're doing\ndata cleaning, is looking at the data from\na visualization perspective. data cleaning\nhas a ton to do with statistical understanding\nof your data to when a volume is considered\nan outlier. For example, it might be invalid,\nand you want to claim it. So but that's a\nlot more about statistics. And this case,\nI want to show you very quickly, the mottled\nleave library, I've been promising for some\nsome time now, the mapa lib library. So far,\nwe've accessed it directly from pandas, from\npandas, or we're doing a data frame dot plot.\nIt's these library mapper lib is the one backing\nall those methods and we're going to see how\nto use it directly. Now. The model live library\nhas two important API's we're gonna call him\none is the one that I don't prefer, which\nis the global API, but it's the most common\none. It's the one you're gonna find around\nthe global API. And the second one is the\nobject oriented API. So it's around here.\nAnd usually there are there are ways it's\njust two different ways of doing the same\nthing. Okay. The global API is an API that\nit's in part inspired in MATLAB. It's been\naround for a long time on sadly Most of the\nanswers you find in Stack Overflow tutorials\nand books will be using these global API.\nThe way the word the one I prefer the most.\nAnd I'm gonna explain you why in a second.\nIt's going to be the object oriented API.\nBut I want to show you both. So you have a\nreference. If you follow me in this feeling\nof preferring the object oriented API, you\nwill always have to translate global to Opie.\nWhy is it considered a global API? Well, we\nhave imported matplotlib.pi plot as PLT. So\nwe haven't imported the whole module, the\nwhole Python module, depending how much you\nknow about Python programming is going to\nmake sense or not. We have important the whole\nmodule. And now what we're doing is we're\ninvoking PLT dot figure. And finally, and\nthen we're going to do a title. And then finally,\nwe're planning two things. We're plotting\nx, our plotting x squared and minus x squared.\nAnd why is this global because we're invoking\nfunctions that are at module level. And there\nis an object, the final plot, that it's being\nmodified by these very generalistic and global\ncourts, right. So by by doing these call right\nhere, I'm modifying the final result of the\nplot. Let me show you a more complicated example.\nSo you see the problems with the global API.\nIf you look at these line, if you could delete\neverything, let's actually delete everything.\nWhat is this line doing which plot is affecting,\nyou do not know, there is no object oriented\nway of saying in this second plot the plot\non the right or the figure on the right, or\nactually the sub plot on the right, I want\nyou to plot this thing, you're just saying\nit to the entire module. And depending the\norder that you set it, is where it's going\nto land, that particular figure where it's\ngoing to land in which plot, it's going to\nlend. Again, it's a global API. So we start\nsaying, I'm going to create a figure, trust\nme from So from now on, I'm going to start\ndrawing on it, there's going to be the title.\nAnd hey, by the way, it's going to have one\nrow, it's going to have two columns. And I'm\ngonna start drawing in the first plot these\none right here, these one right here on the\nleft, okay. So now I have kind of activated\nif you want that plot, it's active. So now\nI'm going to start drawing on it. So every\naction that happens after this line is going\nto be affecting these blocks, these blocks,\nright. So then I plot x and x square, I plot\nthis vertical line, I put a legend, I set\nlabels, etc. And at some point, I just stop\nand say, Hey, now I want to switch the plot,\nI want to now start plotting. Sorry, I want\nto start plotting here in this second one,\nbecause I have just changed that the first\nline these one. Oh, sorry, the way it works\nis by saying the first row, second column,\nbut second plot. So now I want to start plotting\nin here, every successive line will affect\nthat line. And again, you can see that understanding\na code, given the order that the order in\nthe sequence of lines is very hard. If you\nhave to debug a report that has a plot that\ntakes 100 lines, then you have to keep in\nyour brain, what's happening top down, a different\napproach is going to be the object oriented\napproach, in which we're creating a figure.\nAnd we're creating axes. So in this case,\nwe have in this case, we have right here,\none entire figure in red. And we have in here,\npurple, we have two axes. So these axes one,\nand this is access to so we have two axes.\nWe're going to create those using an object\noriented approach. And we're going to keep\nreferences to them. So we're going to say\nlater, to these blocks to these artists, sorry,\nI want to plot something. And that will be\nvery explicit, it's going to be an object\noriented way. So the first thing is creating\nthe figure on DCE. The axis in this case,\nwe have just one axis, that's it, but you\ncan have more and then you say in this axis,\nI want to plug this thing in this axis, I\nwant to pull up that thing, etc. When you\nhave multiple axes, so I could show you. I'm\ngoing to go back again to that in a second.\nBut In this case in which we have four axes,\nright, so we create one figure. And it has\nfour axes, we do it with this subplots, method\nsaying and rows and columns. Now we say to\nthe axes number one, I want to put this thing\nto axis number two, I don't want to put that\nthing, right. So it's 1234. And now it's a\nlot more explicit, it's not depending on the\norder, I could change this order, that doesn't\nmatter.\nThey're that the results are gonna be the\nsame oxes number four has yellow, regardless\nof the position that we're following. So the\nmap will live. And now that we have clear\nout the differences in both API's, maple leaf\nhas this very simple plot function, or method,\ndepending on sugar enter global, that we'll\nplot something you specify. In this case,\nwe're passing all the values in x and all\nthe values in y. And in this case, we're passing\na given line style, this can change with these\ntype of syntax, you're saying, I'm plotting\nthis thing in X, I'm blowing this thing in\ny second parameter and why. And I want you\nto use a straight line, it's a straight line,\nyes, with this marker, the dot and in green.\nSo this is if you are very familiar with it.\nIf you're very familiar with my bullet you\ncan use to send links in other games, you\ncan just say line style market marker, sorry,\ncolor specific keyword arguments for each\none of those. So do we only have line plots\nin APA live? No, of course not. We have a\nhuge variety of plots. And by the way, there\nis another one here, if you want to see more\nevents are grids, you can create these grids\nand put different things in it. And again,\nnot only land plots, one good example is a\nnice scatterplot. So basically, we're plotting\nX and Y correlation. And there is also our\nvalue, our color map, right. So given the\nvolume, there is going to be a change in color.\nSo these kind of lets you plot three to four\ndimensions of your data, the volume x, the\nvolume, y, the size of the bubble, and the\ncolor of the bubble. So where you're pretty\nmuch encoding four dimensions in just one\nfigure, right. So in this case, we're just\nusing two different scatter plots, there's\nmore information here, we can also block histograms,\nthat we've very quickly seen that with pandas\nwith pandas is, is very simple with just plot\ntype histogram, current histogram hist, actually,\nyou can look it up in our previous lessons.\nSo just go back into the index in the video.\nAnd the histogram is extremely simple just\ntakes the valleys you're plotting and how\nmany bends you want, or some more advanced\narguments here, like the alpha level, etc.\nBut it's simple. And similar to the histogram,\nyou can also create kernel density estimator\ndiagrams, which is very similar to distance\nto simulate if you want a continuous distribution.\nYou can combine these plots if you want, in\nthis case, we are creating the plots were\nplotting a histogram. And they were plotting\nthe lines and they were plotting our changing\nlimits. But that's pretty much it. And you\ncan also create bar plots, right? So in this\ncase, we have PLT dot bar, or here we have\ntwo bars are stacked, right? That's the different\nway to look at it. And finally, check in outliers.\nYou can always plot histograms or box plots,\nright? So box plots are also a nice feature\nto have in here. So this was all with data\ncleaning, we're gonna keep moving forward\nthis tutorial, I want to mention one more\nthing here. And it's there are notes here\nfor kind of a task that you can follow with\ndata cleaning, which where we are identifying\nwhere indentifying missing values in given\npositions with is known as an A. And right\nhere, we're looking into more detail about\nsome statistical properties of the data, in\ncase we need to clean it. Okay, so this is\nlittle bit more events. And it's it's related\nto the concept of cleaning data given the\ndomain. So the statistical analysis can tell\nyou that this value is an outlier. For this\ndistribution, the value might be valid. So\nfor example, a human being is 90 years old.\nThat's, that's valid, that's a valid age.\nBut if you're analyzing data about high school\nstudents, and a human that it's not a year\nsoul, it's going to be completely invalid\nor it's going to be an outlier in that distribution.\nAnd you can treat it as such You valid valid\nand clean it out, remove it, for example.\nSo that's, that's deal a little bit more with\nthe whole statistical analysis you can follow\nhere, it's a little bit more advanced for\nthe scenario. So let's move forward with the\nrest of the videos.\nNow it's time to get into more advanced features\nof pandas to import external data. So we've\nseen already in our real life example, the\nway we can import data from CSV files, and\nfrom SQL databases, right, we had actually\nthose two lessons, the objective of these\npart of the tutorial is to show you how you\ncan improve or get into more advanced use\ncases of importing data. So we're going to\nstart for example, with csvs, and text files.\nAnd again, you've seen it already. But here,\nwe're gonna give it an extra twist. So I'm\ngoing to show you more advanced features.\nAnd for special use cases, txt files, CSV\nfiles, is, conceptually speaking, a CSV file\nis a text file, it's just human readable text,\nright? That it's encoding information. The\nidea for CSV file is that it's tabular. Right?\nSo it's a plain text file that contains tabular\ndata in it, and it's separated. csv stands\nfor comma separated, but it can be separated\ncan be anything, we can see more examples\nlater. But basically, the idea is that it's\na text file that it's tabular into in a tabular\nformat. So though, both CSV files and text\nfiles will be read with the same method. So\nto get things started, I want to show you\nthe basic way we import will read data from,\nfrom from external sources using Python without\neven starting yet, with pandas. So you don't\nneed to know this, it's usually it's usually\nproductive if you want for data scientists\nor data analysts to understand a little bit\nmore how fire reading and writing works in\ncomputers, because there are multiple, multiple\nconcepts align, here, they evolved, operating\nsystems processes your language, right, it's\nnot same thing to read a file with our or\nwith Python or with another language. So there\nare multiple concepts here. And even though\npandas in this case can make it simple, very\nsimple to read and write data, you can get\na little bit of a more advanced use case,\nif you know the internals of again, both the\noperating system processes on your language.\nSo this the way we read data with a reader\nfile, sorry, using pure Python, we use a function\nopen. And in this case, we're using a context\nmanager, just a security feature, again, related\nto to the advanced usage of reading and writing\nfiles. But it creates a file pointer, right.\nAnd with a file pointer, you can then use\nthe very simple API x point post. But they\nbut that pointer, which is something like\nred line, red lines, read a number of bytes\nor characters, or you can just even trade\nFP as an iterator, just do a four line in\nFP. But basically, we're going to do something\nlike this, we'll start reading data from top\nto bottom, just a month to, I don't know,\nwe hit I've given in this case, we're doing\nit just for a couple of lines. What else we\ncan, it gets very difficult when you're reading\ntext files to process them, because it's usually\nhard to parse the structure of the file. So\nit's not the same thing to have a funnel that\nis separated by comma separated by colons\nseparated by pipes, spaces, etc. So you're\ngonna see that once you want to get a little\nbit more, I don't know a little bit more with\nan advanced usage, right, or a little bit\nmore fancy your calculations and and the way\nyou parse the data, it's gonna, it's gonna\nget harder. So that's why we're going to use\npandas, or I'm going to show you in a second,\nthis is the module that is part of, of Python.\nSo this is the file that we're going to be\nreading. It's the XM review file, and I'm\ngoing to open it. And even though it doesn't\nlook like a CSV, it isn't either CSV. The\ndifference is that here the separator is the\ngreater sign, it's not the comma, it's a greater\nsign. That's going to be what marks the elimination\nbetween different fields in our CSV file.\nSo we're gonna use the CSV module. And\nthe way right here to parse the data using\nthat module is by passing a special delegator,\nright? So that's gonna be the type of work\nyou might need to do when you're parsing the\ndata. It's not the same thing to have that\nlimiter dates a greater sign. It's not the\nsame thing to have numbers for example, that\nare enclosed in quotes. All those things right\nwill change the way you work on all days is\ngoing to be abstracted away by the pandas\nmodule. So to get things started, again, with\npandas, at least, pandas has multiple read\nunderscore something methods that will work\nfor different sources, right. So we saw already\nhave read sequel we've seen read CSV, there's\nalso a read HTML to directly parse information\nfrom a table, it's literally you can just\nyou pass a website's going to read information\nfrom a table, or read Jason read more advanced\nformats like pocket, or Stata, etc. And, again,\neach file format will usually have a correspondence\nin pandas, it's, I've never had the chance\nto rewrite my own stuff. To be honest, the\nsame thing is going to happen for something\nlike Excel, which might need external modules,\nit's not directly provided by pandas, but\nby installing those modules, you can easily\nincorporate Excel files in your day to day\nwork. So the read CSV file methods already\nhas a ton of parameters. So this day, the\nmain characteristic of all these rate something\nmethods, given the amount of possibilities\nyou're going to have with these files, there\nexist a ton of different ways to customize\nthe method invocation. Alright, so again,\nCSV files, we saw, there are multiple things\nhappen. csv is a passage that have a header\ndon't have a header, different delimiters\ndifferent and closing of strings or numbers,\nmultiple things, blank lines, etc, multiple\nthings are going to happen. And that's all\nyou're able to customize all that with the\nread CSV method. So this is the reference\nof all the\nattributes you can pass to it, usually something\nthat I do, and I do this very often, and I\nuse pandas a lot, and I still do something\nlike read CSV, and I get the documentation\nright here, to look into the, the parameters\nthat I think I need to pass to my particular\nuse case. So keep an eye always in the docs,\nbecause it's impossible to remember all the\nparameters in the CSV. So in this case, what\nwe're gonna do is something very interesting\nis we're gonna parse a CSV file, but it's\nnot located in this computer, it's not locally\navailable in the computer. The CSV file is\nthese one right here, which actually is the\nsource, if I get the raw version is this thing.\nSo this is CSV file, what I could do here\nis download the file, right, so just do File,\nSave, get the CSV file on my computer uploaded\nhere, right, so just copy and paste here,\ndrag and drop it here. But actually pain this\nhas this nice characteristic that it will\nread a CSV that it's either locally as we\ndid with BTC market price, or you can also\ndo it remotely, it's automatically going to\ndownload the content of those files. And it's\ngoing to provide, it's going to save it in\nmemory for further usage. So there's a very\nneat feature. And again, this is the the CSV\nfile that we are using. And again, the same\nthing, if it's a local file, it works in the\nsame way. So a few features you've seen already,\nin this case, we can do Heather known, if\nyou don't want to treat the first row as a\nheader. Or what about missing values, we can\ntreat some of these values like a question\nmark, or like an exclamation mark, or dash\netc. us not a number, not a value, right,\nso it's a missing value. And now any of these\nvalues we have passed, will be transformed\ninto another number for easier and easier\nprocess cleaning, we can pass names, which\nis going to be basically the column names\nfor each one. And we can also specify column\ntypes, as you can see, right there. So now\nthe types are going to be float. And object.\nWe've done this already in one of our lessons,\nwe are parsing the time and there you go.\nSo putting all together, we get to these advanced\nforms of reading csvs where we're passing\ncolumn names were passing types, were asking\nto read dates, were passing no values, Heather's\netc. So this is a pretty common thing we are\ndoing. So what about XM review, if we try\nparsing this thing, we get this very ugly\nformat. In this case, they put the parameter\nto specify the what we used to call delimiter\nin CSV is now set from separator so the separator,\nit's going to be the greatest sign and that\njust works as it needs. So, a few more examples\nyou can check on here the most important part\nis following right, the documentation to find\nthose particular use cases that you are having\nso for example, some Like skip blank lines,\nor whenever there are like empty rows at the\nbeginning, right. So if you have empty rows\nat the beginning is something you can also\nsay skip rows. So you don't need to parse\nthose out, it's not going to break, etc. So\nthat is all part of the read CSV file. And\nto finalize these part, at least csvs, I'm\ngoing to tell you something that applies to\npretty much every other data format. As you\nhave a read something method, there's going\nto be a to something method, it's basically\nthe process of writing. So you can do read\nCSV, or you can do to CSV. So these CSV that\nwe imported from the external source and the\nremote source, we can just do to CSV and it's\ngoing to store it locally. Alright, and there\nare multiple options also to pass the CSV\ndelimiter, or actually the separator, if you\nwant to include a header if you want include\nan index, etc. They're pretty much the same\nas the other one. But the idea is that for\nevery read something method, there's gonna\nexist a to something method that it's basically\nthe process of writing. So let's move forward\nwith a few more data formats. And interesting,\nwe're gonna get to read directly HTML pages\nin just a couple of minutes. And now it's\ntime to read data from databases. We have\nalready done that in our real example with\nPanis part of the tutorial. But I want to\nshow you a little bit more details details\nfor you understand how data is being processed\nin case, this is a common scenario for me\nimporting data from databases. So the libraries\nyou will need first thing, depending on what\ndatabase engine, you're using Postgres, MySQL,\nOracle, etc, you will need to install different\nlibraries. But the API's, once you have installed,\nthose libraries are going to be the same.\nThere's actually p Ep from Python that actually\ndefines the interface for databases, libraries,\nunpin, this can work with pretty much any\nany database of these SQL common database\nthat comply with that interface. In this example,\nwe're going to use SQL lite because the database\nright here, there's nothing, no server to\nconnect, etc, is extremely simple to get started.\nAnd the example we're going to use, or the\ndanavas example we're going to use is actually\ndifferent one from our previous video is reading\nin the previous one, we were using circular,\nin this case, we're going to be using chinuch,\nwhich is smaller both in structure and in\nsize. So it's going to be a little bit simpler.\nSo to get things going here, the same thing\nthat we did with our previous part, that was\nhow to read data from files, I show you how\nto actually read data using Python. So forget\nabout pandas for a second, I told you, if\nwe go back again, to the beginning of time,\nthere was no pain this, this was the way we\nwere writing, finance, open FP, FP, the red\nlines, etc. So I now want to show you what\npredates to pin this, what was the default\nway to read data before paying this, which\nis with the regular again, interface from\nPython. So the way it works is we're gonna\nimport SQL lite three, we're gonna create\na connection. And now with this connection,\nwe have these common interface that again,\nit's common for pretty much any other database\nthat you're used to. And the default behavior\nis we're going to create a cursor. And we're\ngoing to execute queries using that cursor.\nIn this case, we're going to execute a regular\nSelect star from employees limit, Fox will\nwant to have five, five records out of the\ntable employees, once you have executed a\nquery, it's like they're waiting, you can\ndo a fetch all to get all the results of that\nquery. And here are all these results. As\nyou are noticing this is the result is a list\nof tables. So it's not extremely useful. Now,\nif you combine it with pain, this you can\njust create a data frame out of that info.\nAnd we're close. It's not perfect, but we're\nclose. So let me show you now before we were\ngonna close it Kurt Dickerson on the connection.\nLet me show you now how we work with pandas.\nWith pandas we have as we have a read CSV\nmethod, we also have a read, see as read SQL\nmethod, and in this case, what this method\nis going to receive is the first parameter\nis going to be the query that we're passing\nand the second parameter is going to be the\nconnection. That's the object the connection\nobject to actually issue the connection by\npanelists. So it gets a simple as writing\nthe query. And now everything has been imported\ninto a data frame, including column names\nand all that if you want to get a little bit\nfancier, you can either specify the index\ncolumn, there's going to be use, of course\nas a index, and also what types to parse for\na specific column. So now we have pretty much\nall the work down. So we're going from something\nvery manual as processing things with a coarser\netc, which might also be as low to using pain\nthis to do Actually imported data from the\ndatabase. There is actually a caveat here\nthat I'm going to tell you is kind of a very\ndeep detail of the way pandas works, and is\nthat the read SQL method is actually a shell\nfor two other methods, read SQL query and\nread SQL table. Alright, so right SQL table\non read SQL query, when you're using read\nSQL, it's actually kind of forward in the\nwork to either query or table, or an SQL query\nis the default behavior, what we've done so\nfar, so in this case, it's just going to issue\na query and the connection is going to read\nit for you. In contrast rate SQL table is\ncan I read an entire table, you just pass\na name, and it's going to automatically give\nyou all the information for it. So in this\ncase, all the column names, etc. So it's a\nlot simpler to read an entire table, the only\nthing to keep in mind is that to use this\nmethod, you need to install these libraries,\nSQL alchemy, and the connections generated\nfrom it. So in this case, we create an engine\non we create a connection objects, and now\nwe can pass an actual auction object sorry\nfor pandas to do it. So again, it's pretty\nmuch the same, if you find yourself doing\nRed Star from this table, Red Star from that\ntable, it's a lot easier just to write SQL\ntable, and that's going to do it just advance.\nAs we saw that read CSV files hard to CSV,\nsorry, read CSV method had a to CSV method,\nthe same thing happens with read SQL, there\nis a read SQL and the results are to SQL,\nwhat's what it's going to let you do is get\nthe from the database and write it down into\na database table directly. So it's going to\nalso receive the connection, right? So to\nSQL, it's gonna receive what he will name\nof these data frame, what table name is going\nto be, and a connection object. Now something\nto keep in mind is that to SQL has an important\nparameter, which is what happens if the table\nalready exists, that in the default way, it's\ngoing to fail, just going to throw an error\nwhen you are trying to save data to a table.\nAnd this makes sense, because as data analysts\nwere usually reading data and processing it,\nwe're not so much writing it. So we want to\nmeet make sure that it's not by mistake. But\nif you do actually want to write data, you\ncan just change this parameter if exists something\nlike replace or append. Usually, we're writing\nto intermediate intermediary table tables,\nagain, you can choose either to replace the\nwhole concept of the table, be careful here,\nor to append, write, just write it a dn of\nthe current table. So that's just for to see.\nSo this was the way to read data from databases,\nof course, we're not touching on anything\nlike SQL and all that, that it's a lot more\nadvanced, it's just for you, if you already\nknow SQL, if you're already working with databases,\nyou can pretty much copy and paste what we're\ndoing here. And you're gonna, you're gonna\nget your data import into Python. So let's\nmove forward to read some HTML files. And\nnow very quickly, I'm going to show you how\nto read tables or data frames directly from\nHTML web pages. To be honest, this is a simple\nmethod is going to be just read HTML, but\nit depends a lot on the structure of the web\npage. So if it's not well structured, or the\ntables are not correctly created, you're going\nto have issues and you will have to do a ton\nof data cleaning. In my experience, whenever\nI try to parse a table from a well structure\nsite like Wikipedia, or some stats site, it\nusually works very well. And it's a very quick\nway of hacking. You know, whenever you have\nquestions, you know, like, I don't know, I\nneed to know the GDP of countries. Instead\nof looking for a GDP data set, you can just\ngo to Wikipedia page, there is usually a table\nthere, you can directly parse it and you are\ndone. So again, it's it's a relatively simple\nway to get some data for quick hacking and\nexploration. The way it's going to work is\nwe have these HTML creative. It's just for\ntesting purposes. To get started, usually,\nof course, you will try to read something\nfrom a live website. So you're going to pass\nthe URL to the read HTML method. And the read\nHTML method will download the content of the\npage and parse it. Let's suppose we have the\nthe content already the HTML, and this is\nwhat it looks like. This is a exactly the\nsame HTML we have on top, I'm just displaying\nit here in a book. And what we're gonna do\nis we're gonna invoke the method, read the\nHTML. And the read HTML method is going to\nparse the entire HTML and look for multiple\ntables, not just one site will potentially\nhave multiple tables, even if you don't see\nthem. The is a common way to structure things\nin HTML to use tables. That's why it's going\nto pause multiple tables. In this case, we\nstored them all in a DFS, multiple player\nlike multiple data frames. And we see that\nthere is only one. So in that case, we're\njust going to get the first data frame. And\nit has correctly parsed what we had before\njust working in the same way.\nThe same is going to happen with for example,\nthings for headings and all that if the table\ndoesn't have a header, it's gonna automatically\nright understand.in that case. So that's pretty\nmuch as we know it already. In this case,\nwhat you're going to see is what I told you\nbefore about data cleaning process that these\ntable does not have a header like the previous\none that has a T head to head attribute, in\nthis case, a header is just another row. So\nthat's why read HTML is going to have issues\nand you have to provide a little bit extra\ninformation. So let's see another more realistic\nexample. And we're going to parse data directly\nfrom a website, let me tell you here, just\njust for educational purposes, you always\nneed to understand if you have if the data\nis public, so you can actually parse it. Again,\nfor Wikipedia, at least what I do, the content\nis created comments, so you can get a hand\non it. There. What we want to show you here\nis that a very complicated table that has\nmultiple headers, etc. So that's why we're\nusing this example. So we're gonna get the\nURL, and we're gonna directly do NBA tables.\nEquals read HTML, the only table in this page\nis this one, the large one. So that works.\nAnd now we're gonna get NBA is going to be\nthat and we see that the all the players in\nthis case have been parsed. What about something\nelse, let's actually open this page right\nhere to Wikipedia, for the Simpsons. And here,\nwe will probably find several tables. See,\nwe have one right here, this one. So I'm going\nto import it. We have 27 tables, again, you\ndon't see it. You don't see them, sorry, but\nthey are there. And the most important one\nis the one we care is these one right here.\nSo the problem you're gonna have with this\ntable is that each using both columns, pans\nand rows pans. So in this case, this column\nhere is pans for one to three columns. And\nthese row here stands for 123, at least three\nrows. So that column spans results in these\nvery ugly data frame, and you will need a\nlittle bit of extra cleaning. So that probably\nyou're going to find with HTML tables that\nusually there are things that are not well\nformatted for machines that are formatted\nfor humans. So for example, in this case,\nwe have this header repeated, when you parse\nthis data, you're going to find that every\n20 rows, there is going to be header row,\nand you will have to clinic every for in this\ncase, to enter rows, you will need to drop\nit you will do something like df the drop,\nlet's see, actually, if we can see it haven't\ntried this, but let's just do it like that\nhead, and you're going to find 25 Records\nnow. So here, record 22, we find that, Heather,\nso what we're going to do is you will need\nto do something like df the drop df dot drop,\nrange 22 starting in 22, up to the F the shape,\nzero, right, these many rows plus one plus\none and every 20 rows, I don't know this is\ngoing to work, just run it. Hope didn't it\ndidn't even work. It didn't compile. Oh, this\nis NBA actually. There you go.\nSo maybe it works, you can check it. But what\nI'm going to say is, again, there is some\ncleaning to do because HTML pages are optimized\nfor humans, not for machines. So usually,\nit's going to take a little bit more time.\nThe good news is that there is usually a service\nassociated that you can consult. So for example,\nthere is a Wikipedia API that you can use\ninstead of a page. But again, sometimes just\neasier to pull the data directly from Wikipedia.\nSo that's it. You can also write data to CSV\nor of course or HTML. That's pretty much the\nstandard. As we've said, this is up all we\nhad for the read data portion. And we're gonna\nmove forward now with a few other methods,\nespecially what we call data wrangling. We're\ngoing to do a little bit of grouping and keep\nmoving forward with our tutorial. We have\ndecided kind of last minute to our final source\nof external data that it's going to be an\nExcel file. It's just a common Excel files,\nyou know it, because we imagine that you might\ncome from an Excel backgrounds, you can just\nexport the data you have in your Excel files,\nExcel spreadsheets, and load them into Jupyter\nNotebook and start working with them with\nhim this so you can try things out and kind\nof draw the pearls in between Excel and what\nyou do with pandas and Python. So the first\nthing is, an Excel file is not a text file.\nSo if you try getting the content of it, it's\nnot a text file, it's not so simple to parse\nit. So that's why it's gonna require external\ntools that they already installed in notebooks\nAI, there might be a student's holding goal\nup, but it depends on your computer, how you're\ngoing to install it. So just keep in mind\nthat there might be issues when importing\ndata from Excel, if they if there is low compatibility\nbetween the library you're using another spreadsheet\nversion you're using. But without those without\ngetting into those details, there is read\nExcel method, which pretty much takes care\nof everything for you has different parameters,\nlike the finding the the sheet that you're\nreading from, of course, the path, etc. So\nwe're going to start reading these file, which\nis products file that has three sheets, products,\ndescriptions, and merchants. And it's actually\nsomething we use in an Excel file to sorry,\nin our data analysis, from Excel to pandas\ncourse, to show how to merge data and all\nthat. And from this file, what we're gonna\ndo is just read Excel. And what you're gonna\nsee is that it reads the first sheet of the\nExcel file, I mean, a data frame is just corresponds\nto one sheet only, right? And the first one\nis product. So that's what we are writing.\nThere are different behaviors for it, you\ncan change the way you parse, Heather's etc,\nyou notoriety defining and specific index,\nthat's pretty much everything we have seen.\nSo far, it's selecting specific shifts is\nsimple, just pause the sheet name, and you\ncan share the rate story either products,\nmerchants, whatever is available in the current\nExcel file. There is another format or a new\nspecific class that it's a little bit more\nadvanced. But it's the Excel file class. So\nit's not, as we were doing here, right, Excel\ndirectly is going to read thought Excel file\ninto a data frame, but you're going to instantiate\nthis Excel file class, with the parameter\nbeing the file name. And now these files gonna\nhave just a reference of everything you have.\nIn this case, we can do for example, sheet\nnames, it's going to tell you how product\ndescriptions merchants, there's a little bit\nmore explanatory data analysis. So let's say\nyou can't use Excel to actually see the contents\nof the Excel file, this is going to be helpful,\nyou're going to first parse the Excel file,\nget the sheet names, and a little bit more\nof an understanding of it. And now we can\nsay from these files we have previously parsed\nright here or instantiated, we can parse the\nproduct, the product sheet, and that's going\nto get you that that frame. And the same thing\nis going to happen with all the parameters\nweekend pass, they are the same as read Excel.\nFinally, you can see that the results are\nto excel file. And it works pretty much the\nsame way as to CSV, and decide if you pass\nan index or not. And also you can define if\nyou're going to pass a sheet name or not,\nare just going to be the default one. So as\nyou can see, getting your data into a from\nan Excel file into a CSV, data frames array\nis extremely simple. There are more customizations\nto do, let's say all your file is shifted\narray, either rows or columns, you can change\nthat with Star row or column that's going\nto work, too. So that's pretty much the only\nthing we need. If your writing process is\na little bit more complicated. Like for example,\nyou want to write specific sheets in our multi\nsheets. Excel file, you can use what we call\nan Excel right and it's also part of fantasy,\nyou instantiate the rider, and then you can\nstart the ride process saying which shades\nyou want to ride with each one of those, that\nfriend. So again, reading and writing data\nfrom on to Excel files is relatively simple.\nIt all depends on the libraries are installed.\nIt depends on on what libraries you have in\nyour current environment, if it's windows\nor if it's a Linux slash slash mark, the documentation\nof PD dot read Excel\nmight have more details for the given platform\nthat you have. So let's see if it names per\ndocument, if it's not here, it's gonna be\nin the pandas documentation, but there might\nbe a requirement\nFor each one of the platforms, that pan This\nis supported. So just check it out, check\nfor your own for your own platform if you're\nin Windows, Mac Linux, how to get those libraries\ninstalled.\nSo in case you're just getting started with\nPython, and you might come from another language,\nthe objective of this quick section is to\nshow you Python. Ideally, in under 10 minutes,\nI think it's going to take a little bit more.\nBut there's a very, very, very quick reference\nof Python, again, just the high level features\nof the language, how to use it, how to code\nfunctions, how to import modules, variables,\ndata types, collections, etc. You can just\nscroll through this notebook, if you want\nto take less time, I will be providing an\nexplanation on top of all the topics, but\nthere's a very good reference of the entire\nlanguage. So to get things started, Python\nis an old language period. It has card, it\nhas caught more attention in the past five\nto 10 years. But it's a very old language.\nIt's even older than Java. It's up here in\n1990s. And it was created by this person good\nby Guido van Rossum. And it's an important\nactor in our ecosystem he is used to be I\nthink he still the one deciding discussions\netc, when it comes to defining features of\nthe language, etc. Python is a high level\ninterpreted dynamic language. And this means\na tone actually, if we read these entire sentence,\ninterpreted high level, general purpose, this\nis basically high level programming language,\nit's object oriented. And it also includes\nfunctional attributes or functional features\nlike functions as first class objects, etc.\nAnd it also, of course, it supports imperative\nprogramming. And it has a wide variety of\napplications, you can do web development with\nPython, you can do scripting, it's a lot use\nfor system development for configuring machines\nin general. And of course, you can also do\ndata science, it has multiple applications\nhas a couple of interesting features like\nindentation, for defining blocks, etc, that\nmake it and very good language to get started\nwith programming. So if Python is your first\nlanguage, you should be comfortable with it.\nIt's a very good idea for me, it wasn't my\nfirst language. And I hope it was, it wasn't.\nBut I, I have taught people programming with\nPython as their first language. Seriously,\nit's always been very good for them, because\nPython doesn't have weird things like my have\nin JavaScript or Java. So it's a very concise\nlanguage and consistent language to be honest.\nSo let's get started very quickly. First of\nall, when you're going to install Python,\nyour own computer or you can use notebooks\nAI or Google call up. But if you're installing\nin your own computer, you might see that you\ncan install either Python two, or Python three,\nor actually, if you're reading tutorials online,\netc, you might see Python two and Python three,\nthe reality is that Python two was deprecated\nin 2020, so the you cannot you should not\nuse it anymore. There are still ways to install\nPython two, but it was deprecated. So you\nshouldn't use Python two, you should stick\nwith Python three, which is the evolution\nof the language. So ton of fixes from Python\nto the bay where, where things happen in the\nlanguage and used to confuse beginners. So\nthat's no longer a problem. Python three,\nagain, is what you should use, you will read\nin multiple tutorials, etc. What they are\nusing Python two, you should try using Python\nthree, and sometimes the code will break,\nbut the changes to fix it are not very hard.\nSo to get things started here, I will be drawing\nthe problem of this and with regular syntaxes.\nFor example, this is the way you will define\na function in for example, JavaScript. And\nit's also very similar to something like C\nor Java based languages, the function keyword,\ncurly braces, etc. So I will be drawing a\nparlors and with these sort of languages.\nSo to get things out of the way to defined\nfunction in Python is in this way. And the\nmain characteristic of this language is that\nthe way we're going to define blocks is by\nUsing different indentation levels. So this\nis a valid function in Python def is the key\nwhere we use the name of the function the\nparameters it receives. And the way to define\nthat the body of the function is by just indenting.\nEverything one level to the right. Usually,\nthis is just for spaces.\nAnother example is an if else statement. So\nif this thing happens, do that if else do\nsomething else, right? This is JavaScript.\nIn Python, again, it's defined by indentation.\nIf this thing happens, we indent one level\nto the right, do this else do something else,\nif there was another if statement here, if\nI don't know, language, ends with something\nlike I don't know, three, then do something\nelse. Print pi, three, for example. So we're\nindenting everything to the right, every time\nwe start a new block, whenever the block finishes\nis just when you go back again, print this\nas first block, right, that's the way it's\ngoing to work it by indenting. Our blocks,\nthis is very good, because first, we don't\nhave debates of where we should place the\ncurly braces. And also, because it makes it\na lot more readable, it's a lot easier to\nread these code because there is obligated\nobligatory indentation to even make the code\nwork to. So you can see that's that's just\nhow it works. How we're going to make comments\nin Python, just by using the number pad symbol,\nthere we go. And the way to define variables\nis just by specifying the name. So it Python\nis a language that you don't need to declare\nvariables, you just declare and define everything\nand just one pass, you know, you find a variable,\nas it goes. Python is dynamically dynamically\ntyped. But it's also strongly typed. And these\nmight kind of cause confusions. But basically,\nyou can assign variables to any value you\nwant. And you will see that collections etc,\nare heterogeneous in terms of types, etc.\nIt is a very dynamic language. Talking about\ntypes, I'm going to show you the most important\ntypes that we have in Python, especially we\nhave numbers, of course, integers, we don't\nhave so many like, like, you might find that\nother languages, like different precision\ncetera, we have integers, there is also the\nconcept of Long's that has changed with Python\ntwo. To be honest, on Python three, to be\nhonest, we use just integers, that's the way\nwe work. It's a, it's a smart enough type\nto save storage when needed. So that's, that's\ngood. And it will also have floats, right,\nwhich is the regular float type for floating\npoint arithmetic in other languages. And of\ncourse, it suffers if you want from strange\nbehavior from float floating point arithmetic,\nlike in this case, you can prevent that by\nusing the decimal module, which, as you can\nsee, doesn't suffer from from this issue.\nSo numbers, we have integers floats, and we\nalso have decimals, strings are just a type\nstr, and they are defined literal, right,\nas in this in the st, you can see right here,\nyou can just type the string as it goes. There\nis a difference between there was a difference\nalready in Python two, between Unicode and\nstrings, etc. In Python three, that has all\nbeen fixed. So we Python three, this is all\nUnicode. And there is the concept or the difference\nin terms of the concept of something being\nthe type. The Unicode code points as it's\nthis string, and the underlying encoding will\nturn it into binary. So in Python three still\nhave we have a few ways to differentiate between\nwhether it's a binary string or whether it's\na text based string. For you shouldn't worry\nabout it, I just want you to know, if you're\nwriting a Python tutorial, for example, you\nmight find a difference between Unicode strings\nand regular strings, which is, is no longer\nsomething that we should be worrying about.\nIf you have a string that it's too long and\nit expands multiple lines, you can always\nwrite it using three quotes can be double\nquotes or single or single quotes.\nSo just to create multi line strings is extremely\nsimple. Boolean there are two Boolean type\ndo Boolean objects are unique, right? It's\nkind of a single tone which is the true or\nfalse objects. For example, They are of type\nBo. There is also the concept of No, in Python,\nwhich is none, we don't have no, we have none,\nbut it serves pretty much the same purpose.\nIn Python, everything is an object. So even\nthis strange, strange objects, like none will\nhave an associated class, if you want, everything\nin Python is an object. So all these types\nof you have seen. So for example, we have\nthis string, which is H of a string. The type\nis str, you can use the int, str float bool\ntypes, right, but it's the result of the type\nalso as function. So in order to cast in this\ncase, a string into in order to cast a string\ninto an integer, you will use it you will\ndo it using the end function, which is the\nsame thing that you get with these, for example,\nso this is the same as this, as you can see,\nwhat we have to show. So functions again,\ndeath is the key word we use, we don't use\nfunction, we use death I, you can use define,\nas a mnemonic, the name of the function parameters\nare optional, and finally have the return\nkeyword, you should always include a return\nyou usually 99% of the time, the function\nshould return something. Because that's going\nto be the result assigned once we invoke the\nfunction just this is pretty regular. If your\nfunction doesn't return anything explicitly,\nif that means if you haven't written down\na return statement anywhere in your function,\nthe function will still return something so\nthat the fact that you haven't included a\nreturn statement explicitly doesn't mean that\nthe function is not returning anything implicitly,\nactually, it is returning something, it's\nreturning none, right. So by default, if you\ndon't include a return, Python will do this.\nJust for you to know a function always returns\nsomething as specified parameters and passing\nparameters is pretty standard. Python has\nsome advanced features with parameters like\nfor example, variable length arguments, we\ncan pass as many arguments, we want to make\nit very dynamic keyword arguments, named arguments,\netc. So all their ethic operators, you know,\nalready, the shin modulus, in this case, were\ndoing a power its operation, all this is pretty\nstandard. And the same thing happens with\nall our Boolean operators greater than greater\nor equals then etc, there are type checking.\nSo this is when we have the strongly typed\nfeature, even though Python is dynamically\ntyped. It is the types are enforced. In this\ncase, you cannot compare a two with this doesn't\nmake any sense. And Python is going to complain\nabout that. So this is an example of an error\nin Python. The exception type error was raised\non the same thing with bolens and not on or\noperators. As we saw before control flow is\ndefined by the indentation so every new block\nis defined with an indentation level. Python\nincludes if else and also l F, which is very\nconvenient. And this is an example If this\nhappens, Elif, Elif, etc. Python does not\nhave a switch statement. For example, loops,\nhow are you going to loop through something\nin Python loops on lists,\nor\ncollections in general, are very interconnected.\nBecause in reality, when you're looping the\nPython, you're not doing a regular in Python,\nwe don't have something like in, in Java,\nyou're gonna have something like int i equals\nzero.\nWhat else I\nit's been decades. And I this is I haven't\ncoding in Java. So I, I don't know, minus\n10, less than 10 less than 10. And here we\ndo I put last There you go. So we don't, we\ndon't have these in Python. We have a way\nto mimic it. But we in Python, we always eat\niterate over a collection. So what we're going\nto do is we're going to create a range elements,\nand we're going to iterate over it. So the\nway it works is very close to one other language\nis going to be a for each. Alright, so in\nthis case, we have all these elements and\nwe're going to do for name in names, that's\nit. And at any moment, the name is going to\nbe associated with an element in the list.\nwhile loops are part of the language, they\nare usually discouraged in favor of for loops.\nIf something can be coded with a for loop,\nit should be coded with a for loop and not\na while loop. Because as you might know, already,\nthese my trigger or these might result in\nan infinite loop if you're not checking the\nconditions correctly. So the collections we\nhave in Python, are the fundamental ones,\nthe primitive ones, the most important ones\nare first the list Python is we do a heavy\nusage of lists. And it's just a heterogeneous\ndata structure. So you can put anything in\nit. And actually, all these collections are\nheterogeneous, you can mix volumes as you\nwant. And in this case, we have three elements\nthat we have added one string, one integer,\none string, and one Boolean. And let me say\nsomething here. Even though pythons, Python\nsupports mixed types in the collections, it\ndoesn't mean that you should do it. To be\nhonest, we should, you should usually avoid\nmixing types in collections, because that\nmeans we don't, we don't know what we're putting\nin it, right. So it's, we should be consistent.\nSo it's possible, revisit your code, if you\nhave too many different types in it. I'm checking\nthe length length function accessing elements\nis by by zero indexed, and we use square brackets.\nSo in this case, give me the first element\ngiven the second element. And also we can\nindex starting from the from behind from the\nend. So in this case, minus one, minus two,\nminus three. So in this case, minus one minus\ntwo, again, give you different elements, you\ncan check the operations associated with all\nthese elements. Very quickly, a list is L\ndot append, we're going to append the new\nelement. So the list now has that element\nat the end. And we can check if that element\nis part of the list in this case is true in\nthis case is false. topples are similar to\nlists, they are also sequences, but the main\ndifference is that they are immutable, there\nis no way to add new elements to a tupple,\nor remove elements from a tupple once it has\nbeen created. So in this case, we have created\na list with three elements. Now tupple, sorry,\nwith three elements, we can access it, we\ncan check if something is in it in the same\nway that we did with a list. But in this case,\nwith a tupple. Again, you cannot modify it\ntupple never changes, you can't add elements\nto it. Another important data structure is\na dictionary. In Python, a dictionary is a\nkey value, right and mapping, it's similar\nto an object in JavaScript or hash table in\nin, in Java, it's a key value mapping type.\nAnd in this case, we are going to associate\nvalues to names. So you can see this, the\nway I like to explain it is if you create\na topo list, right? So let's say we're going\nto create a list, out of all these elements,\ngive me one second, we're going to create\na list. There we go, we're gonna copy these\nelements. And we're gonna associate that to\nour list. There you go. So these are a list,\nwe could very well store the information about\nour customers in a list, right? That works.\nI mean, I can get it done. The problem is\nthat whenever I need to access information\nabout this list, we're going to say, for example,\nI don't know I want to give me the email for\nthis\ncustomer, I have to remember the position\nthat the email is located so in this case\nis going to be position number one, if these\ninformation grows, instead of having 1234\nvalues or four pieces of information for our\nuser, we have 100. Right, then it's gonna\nbe very hard to access those individual volleys.\nSo that's why we create dictionaries, dictionaries\nare collections of values. The important part\nis on the right, the important part is the\nvalue. But they are instead of just indexed\nby the precision, we give them arbitrary names,\nwe tell them very explicit names. This is\nthe name, this is the email. This is the age.\nAnd this is if they are subscribed or not.\nSo once we create these dictionary, we can\naccess those values by the name, give me the\nemail of these user or is the age present\nof the user is the last name present of the\nuser in the user in the user dictionary. So\nagain, it's a way to store information associating\nlater In order to make it simpler for us later,\nlet me delete this. And I move four sets sets\nare very common data structure, he is when\nyou're learning about a collections and, and\nand yeah, the instructions in general, it's\nnot so common in too many languages. I mean,\nit's not very popular in Python, we use it\noften because it has a very interesting feature,\nfirst of all, and it's something that I forgot\nto tell you about dictionaries, both sets\nand dictionaries, are what we call unordered.\ndata structures, you never know, the order\nof the elements. In Python, with recent versions,\nthere have been changes, which make Python\ndictionaries ordered. But for now, I'm going\nto say you shouldn't rely on it, you should\nthink your dictionaries as they are completely\nunordered data structures, and the same thing\nfor sets, sets are, it's a bag that contains\nelements, you know, it's a big bag, you keep\nthrowing elements inside of the set, there\nis no orphan in it. And what's gonna happen\nwith it, you're gonna odd elements, for example,\nto the set, or you're going to remove elements\nto the set. And there is one important thing\nthat makes this set so useful, and it's the\nmembership operation, I'm gonna\nwrite it down here, membership, ship operation,\nthere you go. So you can access these notebooks\nlater.\nSo in the membership operation, the the, the\nprocess of checking if something now, nine\nin s, the process s of checking this is extremely\nfast, it will be called oh one. And this is\nbecause as you might have seen here, when\nI created this set, I included a couple of\nrepeated elements, 333, write 11179, the resulting\nset doesn't have those repeated elements,\nthese are two features of the set, the set\nwill only contain unique values. And by the\nway, it's implemented behind the scenes will\nmake dot these unique values are extremely\nsimple to check whenever you pass these membership\noperation is extremely simple, or sorry, is\nextremely performant. It's very fast, different\nfrom for example, a list. So keep it in mind\nsets are very, very useful when you're checking\nfor members. So again, as I told you before,\nwe're going to iterate over collections with\nthe for loop. So in this case is if we have\na list, it's going to be for element in list.\nThere you go. If you have a user dictionary,\nuse a dictionary, sorry, in this case user,\nwe're going to the default iteration is by\nkey, we're going to get for name email age\nsubscribed, and we have to extract the value\nout of the of the dictionary, we could also\ndo for value in user dot values. Oh, there\nyou go. Or you can iterate over both key and\nvalue with items. Key. And value. There you\ngo. So each iteration in in in Python is very\nreadable to put it in a way. And again, remember,\nwe're always using the for loop that assumes\nthat you're iterating over a collection, we\ndon't have the for Ei equals zero equals zero,\nI equals zero, i less than 10. i plus plus\nwe don't have that right in Python, we can\nsimulate it with for i in range. Five, for\nexample. Print. We've got simulated with the\nrange function, which generates pretty much\nthose elements. Something that you might have\nheard about Python is that it has a huge library\nof built in modules, right that you can just\nimport and just gonna work. There are so many\nthings already coded in Python, that it makes\nit very simple for you to create something\non top. Do you want an a library for I don't\nknow security cryptography Math, numeric processing\nNumPy, right? machine learning web development,\ncreating games through is pi game, do you\nwant to create a graphical user interface,\nwhatever you want to do, there is usually\na library that has already been coded and\nwill make your job easier. On top of that,\nthe bill team is down there library, right,\nwhich is already included with Python, it's\nnot third party. In this case, it's already\ncreated by the Python core team. It's a huge\nlibrary, so many modules. And the way it works\nis by importing this module, so this is the\nway we work with packages and modules, there\nare differences between modules and packages,\nthird party ability, and this is a little\nbit more advanced. But again, this gives that\nrandom number generator, it's already built\nin. And you can check the docs\nright here.\nexceptions, whenever you do something that\ndoesn't work. So in this case, we say, if\nthe age is greater than 21, but age is a string,\nit's an it's not an integer, this is going\nto fail. We can catch exceptions before they\nhappen, that's going to be with a try and\naccept lock. Right. In that case, if this\nfails, if anything here fails, these blocks\ngoing to be kicked in. And you can catch the\nexception without the program fail failing.\nAnd you can be more explicit about the error\naspect. So again, this is just an introduction.\nIt might be useful if you're coming from another\nlanguage, especially to keep this notebook\nas a reference. We're going to be using Python\na lot, of course, and it's a great language\nif you want to do scripting, work development,\nof course processing with data, data analysis,\netc, visualizations, machine learning, Python\nis just great. So I hope this tiny tiny reuse\nlesson helps you port your knowledge from\nother languages into Python. And that's it.\n",
  "words": [
    "welcome",
    "data",
    "analysis",
    "python",
    "tutorial",
    "name",
    "santiago",
    "instructor",
    "joint",
    "initiative",
    "free",
    "code",
    "camp",
    "remoter",
    "tutorial",
    "explore",
    "capabilities",
    "python",
    "entire",
    "pi",
    "data",
    "stack",
    "perform",
    "data",
    "analysis",
    "learn",
    "read",
    "data",
    "multiple",
    "sources",
    "databases",
    "csv",
    "excel",
    "files",
    "clean",
    "transform",
    "applying",
    "statistical",
    "functions",
    "create",
    "beautiful",
    "visualizations",
    "show",
    "important",
    "tools",
    "pi",
    "data",
    "stack",
    "pandas",
    "matplotlib",
    "seabourn",
    "many",
    "others",
    "tutorial",
    "going",
    "useful",
    "python",
    "beginners",
    "want",
    "learn",
    "manage",
    "data",
    "python",
    "also",
    "traditional",
    "data",
    "analysts",
    "coming",
    "excel",
    "tableau",
    "etc",
    "learn",
    "programming",
    "power",
    "day",
    "day",
    "analysis",
    "let",
    "get",
    "started",
    "welcome",
    "data",
    "analysis",
    "python",
    "tutorial",
    "name",
    "santiago",
    "instructor",
    "online",
    "data",
    "science",
    "academy",
    "tutorial",
    "result",
    "joint",
    "effort",
    "remoter",
    "free",
    "code",
    "camp",
    "totally",
    "free",
    "includes",
    "slides",
    "jupyter",
    "notebooks",
    "coding",
    "exercises",
    "let",
    "tell",
    "little",
    "bit",
    "remoter",
    "online",
    "hands",
    "data",
    "science",
    "academy",
    "specialize",
    "data",
    "science",
    "including",
    "data",
    "analysis",
    "programming",
    "machine",
    "learning",
    "complete",
    "course",
    "catalog",
    "adding",
    "content",
    "every",
    "month",
    "interested",
    "learning",
    "data",
    "science",
    "data",
    "analysis",
    "check",
    "us",
    "part",
    "joint",
    "effort",
    "free",
    "code",
    "camp",
    "remoter",
    "get",
    "10",
    "discount",
    "first",
    "month",
    "using",
    "following",
    "discount",
    "coupon",
    "let",
    "quickly",
    "review",
    "contents",
    "tutorial",
    "description",
    "video",
    "included",
    "direct",
    "links",
    "section",
    "jump",
    "first",
    "section",
    "going",
    "discuss",
    "one",
    "data",
    "analysis",
    "also",
    "talk",
    "data",
    "analysis",
    "python",
    "programming",
    "tools",
    "like",
    "python",
    "sql",
    "pandas",
    "important",
    "following",
    "section",
    "show",
    "real",
    "example",
    "data",
    "analysis",
    "using",
    "python",
    "see",
    "power",
    "explain",
    "tools",
    "detail",
    "quick",
    "demonstration",
    "understand",
    "tutorial",
    "following",
    "sections",
    "ones",
    "explaining",
    "tool",
    "detail",
    "two",
    "sections",
    "want",
    "especially",
    "point",
    "first",
    "one",
    "section",
    "number",
    "three",
    "jupiter",
    "tutorial",
    "mandatory",
    "skip",
    "already",
    "know",
    "use",
    "jupyter",
    "notebooks",
    "also",
    "last",
    "section",
    "python",
    "10",
    "minutes",
    "recap",
    "python",
    "coming",
    "languages",
    "might",
    "want",
    "take",
    "first",
    "case",
    "use",
    "links",
    "video",
    "description",
    "jump",
    "straight",
    "right",
    "let",
    "define",
    "data",
    "analysis",
    "think",
    "wikipedia",
    "article",
    "summarizes",
    "perfectly",
    "process",
    "inspecting",
    "cleansing",
    "transforming",
    "modeling",
    "data",
    "goal",
    "discovering",
    "useful",
    "information",
    "forming",
    "conclusions",
    "support",
    "decision",
    "making",
    "let",
    "analyze",
    "definition",
    "piece",
    "piece",
    "first",
    "part",
    "process",
    "data",
    "analysis",
    "usually",
    "tedious",
    "starts",
    "gathering",
    "data",
    "cleaning",
    "transforming",
    "analysis",
    "python",
    "pi",
    "data",
    "tools",
    "excel",
    "going",
    "using",
    "pandas",
    "read",
    "clean",
    "transform",
    "data",
    "modeling",
    "data",
    "means",
    "adapting",
    "real",
    "life",
    "scenarios",
    "information",
    "systems",
    "using",
    "inferential",
    "statistics",
    "see",
    "pattern",
    "model",
    "arise",
    "going",
    "using",
    "statistical",
    "analysis",
    "features",
    "panelists",
    "visualizations",
    "matplotlib",
    "seabourn",
    "processed",
    "data",
    "created",
    "models",
    "try",
    "drive",
    "conclusions",
    "finding",
    "interesting",
    "patterns",
    "anomalies",
    "might",
    "arise",
    "word",
    "information",
    "key",
    "trying",
    "transform",
    "data",
    "information",
    "data",
    "might",
    "huge",
    "list",
    "purchases",
    "made",
    "walmart",
    "last",
    "year",
    "information",
    "something",
    "like",
    "pop",
    "tarts",
    "sell",
    "better",
    "tuesdays",
    "final",
    "objective",
    "data",
    "analysis",
    "need",
    "provide",
    "evidence",
    "findings",
    "create",
    "readable",
    "reports",
    "dashboards",
    "aid",
    "departments",
    "information",
    "gathered",
    "multiple",
    "actors",
    "use",
    "analysis",
    "marketing",
    "sales",
    "accounting",
    "executives",
    "etc",
    "might",
    "need",
    "see",
    "different",
    "view",
    "information",
    "might",
    "need",
    "different",
    "reports",
    "level",
    "detail",
    "tools",
    "available",
    "today",
    "data",
    "analysis",
    "broken",
    "two",
    "main",
    "categories",
    "managed",
    "tools",
    "close",
    "products",
    "tools",
    "buy",
    "start",
    "using",
    "right",
    "box",
    "excel",
    "good",
    "example",
    "tableau",
    "luchar",
    "probably",
    "popular",
    "ones",
    "data",
    "analysis",
    "extreme",
    "call",
    "programming",
    "languages",
    "call",
    "open",
    "tools",
    "sold",
    "individual",
    "vendor",
    "combination",
    "languages",
    "open",
    "source",
    "libraries",
    "products",
    "python",
    "r",
    "giulia",
    "popular",
    "ones",
    "category",
    "let",
    "explore",
    "advantages",
    "disadvantages",
    "main",
    "advantage",
    "close",
    "tools",
    "like",
    "tableau",
    "excel",
    "generally",
    "easy",
    "learn",
    "company",
    "writing",
    "documentation",
    "providing",
    "support",
    "driving",
    "creation",
    "product",
    "biggest",
    "disadvantage",
    "scope",
    "tool",
    "limited",
    "cross",
    "boundaries",
    "contrast",
    "using",
    "python",
    "universe",
    "pi",
    "data",
    "tools",
    "gives",
    "amazing",
    "flexibility",
    "need",
    "read",
    "data",
    "closed",
    "api",
    "using",
    "secret",
    "key",
    "authentication",
    "example",
    "need",
    "consume",
    "data",
    "directly",
    "aws",
    "kinases",
    "programming",
    "language",
    "powerful",
    "tool",
    "learn",
    "another",
    "important",
    "advantage",
    "general",
    "scope",
    "programming",
    "language",
    "happens",
    "tableau",
    "example",
    "goes",
    "business",
    "get",
    "bored",
    "feel",
    "like",
    "career",
    "taught",
    "need",
    "career",
    "change",
    "learning",
    "process",
    "data",
    "using",
    "programming",
    "language",
    "gives",
    "freedom",
    "main",
    "disadvantage",
    "programming",
    "language",
    "simple",
    "learn",
    "tool",
    "need",
    "learn",
    "basics",
    "coding",
    "first",
    "takes",
    "time",
    "choosing",
    "python",
    "data",
    "analysis",
    "python",
    "best",
    "programming",
    "language",
    "learn",
    "code",
    "simple",
    "intuitive",
    "unreadable",
    "includes",
    "1000s",
    "libraries",
    "virtually",
    "anything",
    "cryptography",
    "iot",
    "python",
    "free",
    "open",
    "source",
    "means",
    "1000s",
    "pi",
    "smart",
    "people",
    "seeing",
    "internals",
    "language",
    "libraries",
    "google",
    "bank",
    "america",
    "major",
    "institutions",
    "rely",
    "python",
    "every",
    "day",
    "means",
    "hard",
    "go",
    "away",
    "finally",
    "python",
    "great",
    "open",
    "source",
    "spirit",
    "community",
    "amazing",
    "documentation",
    "exhaustive",
    "lot",
    "free",
    "tutorials",
    "around",
    "checkout",
    "conferences",
    "area",
    "likely",
    "local",
    "group",
    "python",
    "developers",
    "city",
    "could",
    "talking",
    "data",
    "analysis",
    "without",
    "mentioning",
    "r",
    "r",
    "also",
    "great",
    "programming",
    "language",
    "prefer",
    "python",
    "easier",
    "get",
    "started",
    "general",
    "libraries",
    "tools",
    "includes",
    "r",
    "huge",
    "library",
    "statistical",
    "functions",
    "highly",
    "technical",
    "discipline",
    "check",
    "let",
    "quickly",
    "review",
    "data",
    "analysis",
    "process",
    "process",
    "starts",
    "getting",
    "data",
    "data",
    "coming",
    "usually",
    "database",
    "could",
    "also",
    "come",
    "files",
    "stored",
    "different",
    "format",
    "web",
    "api",
    "collected",
    "data",
    "need",
    "clean",
    "source",
    "data",
    "database",
    "probably",
    "writing",
    "shape",
    "using",
    "extreme",
    "sources",
    "like",
    "web",
    "scraping",
    "process",
    "tedious",
    "data",
    "clean",
    "need",
    "rearrange",
    "reshape",
    "data",
    "better",
    "analysis",
    "transforming",
    "fields",
    "merging",
    "tables",
    "combining",
    "data",
    "multiple",
    "sources",
    "etc",
    "objective",
    "process",
    "get",
    "data",
    "ready",
    "next",
    "step",
    "process",
    "analysis",
    "involves",
    "extracting",
    "patterns",
    "data",
    "clean",
    "shape",
    "capturing",
    "trends",
    "anomalies",
    "statistical",
    "analysis",
    "fundamental",
    "process",
    "finally",
    "time",
    "something",
    "data",
    "analysis",
    "data",
    "science",
    "project",
    "could",
    "ready",
    "implement",
    "machine",
    "learning",
    "models",
    "focus",
    "strictly",
    "data",
    "analysis",
    "probably",
    "need",
    "build",
    "reports",
    "communicate",
    "results",
    "support",
    "decision",
    "making",
    "let",
    "finish",
    "saying",
    "real",
    "life",
    "process",
    "linear",
    "usually",
    "jumping",
    "back",
    "forth",
    "step",
    "looks",
    "like",
    "cycle",
    "straight",
    "line",
    "difference",
    "data",
    "analysis",
    "data",
    "science",
    "boundaries",
    "data",
    "analysis",
    "data",
    "science",
    "clear",
    "main",
    "differences",
    "data",
    "scientists",
    "usually",
    "programming",
    "math",
    "skills",
    "apply",
    "skills",
    "machine",
    "learning",
    "etl",
    "processes",
    "analysts",
    "hand",
    "better",
    "communication",
    "skills",
    "creating",
    "better",
    "reports",
    "stronger",
    "storytelling",
    "abilities",
    "way",
    "weiler",
    "chart",
    "seeing",
    "right",
    "available",
    "notes",
    "case",
    "want",
    "check",
    "source",
    "code",
    "let",
    "explore",
    "python",
    "pi",
    "data",
    "ecosystem",
    "tools",
    "libraries",
    "using",
    "important",
    "libraries",
    "using",
    "pandas",
    "data",
    "analysis",
    "matplotlib",
    "seabourn",
    "visualizations",
    "ecosystem",
    "large",
    "many",
    "useful",
    "libraries",
    "specific",
    "use",
    "cases",
    "python",
    "data",
    "analysts",
    "think",
    "coming",
    "traditional",
    "data",
    "analysis",
    "place",
    "using",
    "tools",
    "like",
    "excel",
    "tableau",
    "probably",
    "used",
    "constant",
    "visual",
    "reference",
    "data",
    "tools",
    "point",
    "click",
    "works",
    "great",
    "small",
    "amount",
    "data",
    "less",
    "useful",
    "amount",
    "records",
    "grow",
    "impossible",
    "humans",
    "visually",
    "reference",
    "much",
    "data",
    "processing",
    "gets",
    "incredibly",
    "slow",
    "contrast",
    "work",
    "python",
    "constant",
    "visual",
    "reference",
    "data",
    "working",
    "know",
    "know",
    "looks",
    "like",
    "know",
    "main",
    "statistical",
    "properties",
    "constantly",
    "looking",
    "allows",
    "us",
    "work",
    "millions",
    "records",
    "incredibly",
    "fast",
    "also",
    "means",
    "move",
    "data",
    "analysis",
    "processes",
    "one",
    "computer",
    "example",
    "cloud",
    "without",
    "much",
    "overhead",
    "finally",
    "would",
    "like",
    "add",
    "python",
    "data",
    "analysis",
    "skills",
    "aside",
    "advantages",
    "freedom",
    "power",
    "theories",
    "another",
    "important",
    "reason",
    "according",
    "payscale",
    "data",
    "analysts",
    "python",
    "sql",
    "better",
    "paid",
    "ones",
    "know",
    "use",
    "programming",
    "tools",
    "let",
    "get",
    "started",
    "following",
    "section",
    "show",
    "real",
    "world",
    "example",
    "data",
    "analysis",
    "python",
    "want",
    "see",
    "right",
    "away",
    "able",
    "tutorial",
    "gon",
    "na",
    "start",
    "tutorial",
    "working",
    "real",
    "example",
    "data",
    "analysis",
    "data",
    "processing",
    "python",
    "going",
    "get",
    "details",
    "yet",
    "following",
    "sections",
    "explain",
    "one",
    "tools",
    "best",
    "way",
    "apply",
    "combining",
    "details",
    "general",
    "quick",
    "high",
    "level",
    "reference",
    "day",
    "day",
    "processes",
    "data",
    "analysts",
    "data",
    "managers",
    "data",
    "scientist",
    "using",
    "python",
    "first",
    "data",
    "set",
    "going",
    "use",
    "csv",
    "file",
    "form",
    "find",
    "right",
    "data",
    "directory",
    "data",
    "going",
    "used",
    "transformed",
    "spreadsheet",
    "pretty",
    "much",
    "look",
    "visual",
    "perspective",
    "remember",
    "said",
    "introduction",
    "data",
    "analysts",
    "constantly",
    "looking",
    "data",
    "right",
    "constant",
    "visual",
    "reference",
    "driven",
    "understanding",
    "data",
    "right",
    "back",
    "head",
    "understand",
    "data",
    "looks",
    "like",
    "shape",
    "conducting",
    "analysis",
    "first",
    "thing",
    "going",
    "going",
    "read",
    "csv",
    "python",
    "see",
    "simple",
    "one",
    "line",
    "code",
    "gets",
    "us",
    "csv",
    "read",
    "byte",
    "going",
    "give",
    "quick",
    "reference",
    "data",
    "frame",
    "created",
    "looks",
    "like",
    "data",
    "frame",
    "special",
    "word",
    "special",
    "data",
    "structure",
    "use",
    "independent",
    "tool",
    "going",
    "see",
    "detail",
    "pan",
    "part",
    "tutorial",
    "data",
    "frame",
    "pretty",
    "much",
    "csv",
    "representation",
    "enforced",
    "things",
    "like",
    "example",
    "column",
    "strict",
    "data",
    "type",
    "able",
    "change",
    "tetra",
    "better",
    "way",
    "conduct",
    "analysis",
    "shape",
    "data",
    "frame",
    "tells",
    "us",
    "many",
    "rows",
    "many",
    "columns",
    "imagine",
    "amount",
    "rows",
    "simple",
    "follow",
    "visual",
    "representation",
    "like",
    "pretty",
    "much",
    "infants",
    "crawling",
    "point",
    "rows",
    "way",
    "work",
    "immediately",
    "load",
    "data",
    "want",
    "find",
    "sort",
    "reference",
    "shape",
    "properties",
    "data",
    "working",
    "going",
    "first",
    "info",
    "quickly",
    "understand",
    "columns",
    "working",
    "case",
    "date",
    "date",
    "time",
    "field",
    "day",
    "month",
    "year",
    "complimentary",
    "date",
    "customer",
    "age",
    "uninjured",
    "makes",
    "sense",
    "right",
    "age",
    "group",
    "say",
    "right",
    "age",
    "group",
    "youth",
    "customer",
    "gender",
    "idea",
    "entire",
    "data",
    "set",
    "know",
    "columns",
    "also",
    "know",
    "large",
    "care",
    "cleaning",
    "probably",
    "need",
    "actually",
    "start",
    "looking",
    "row",
    "per",
    "row",
    "right",
    "limited",
    "eyes",
    "better",
    "understanding",
    "structure",
    "data",
    "way",
    "going",
    "one",
    "step",
    "also",
    "better",
    "understanding",
    "statistical",
    "properties",
    "data",
    "frame",
    "describe",
    "method",
    "numeric",
    "fields",
    "idea",
    "statistical",
    "properties",
    "example",
    "know",
    "average",
    "age",
    "data",
    "set",
    "35",
    "years",
    "old",
    "also",
    "know",
    "maximum",
    "age",
    "case",
    "sales",
    "data",
    "87",
    "years",
    "old",
    "know",
    "minimum",
    "17",
    "years",
    "old",
    "start",
    "building",
    "right",
    "understanding",
    "physical",
    "properties",
    "case",
    "median",
    "age",
    "close",
    "mean",
    "telling",
    "telling",
    "something",
    "thing",
    "going",
    "happen",
    "one",
    "columns",
    "using",
    "example",
    "negative",
    "profit",
    "large",
    "values",
    "correct",
    "maybe",
    "mistake",
    "quick",
    "statistical",
    "view",
    "data",
    "going",
    "driving",
    "process",
    "analysis",
    "without",
    "need",
    "constantly",
    "looking",
    "rows",
    "general",
    "holistic",
    "overview",
    "gon",
    "na",
    "start",
    "unit",
    "cost",
    "let",
    "let",
    "see",
    "looks",
    "like",
    "going",
    "describe",
    "need",
    "coast",
    "pretty",
    "much",
    "right",
    "previous",
    "line",
    "entire",
    "data",
    "frame",
    "entire",
    "data",
    "case",
    "focusing",
    "unit",
    "coast",
    "cost",
    "sorry",
    "column",
    "mean",
    "median",
    "fields",
    "know",
    "already",
    "pretty",
    "much",
    "gon",
    "na",
    "quickly",
    "plot",
    "going",
    "use",
    "tools",
    "visualize",
    "tool",
    "paying",
    "using",
    "top",
    "right",
    "using",
    "matplotlib",
    "visualization",
    "created",
    "matplotlib",
    "directly",
    "pandas",
    "worry",
    "explained",
    "pandas",
    "lessons",
    "unit",
    "costs",
    "right",
    "box",
    "created",
    "whiskers",
    "mean",
    "shows",
    "us",
    "first",
    "third",
    "quartile",
    "median",
    "see",
    "outliers",
    "right",
    "see",
    "product",
    "study",
    "around",
    "500",
    "considered",
    "outlier",
    "thing",
    "density",
    "plot",
    "right",
    "looks",
    "like",
    "going",
    "draw",
    "two",
    "charts",
    "right",
    "going",
    "pretty",
    "much",
    "point",
    "mean",
    "median",
    "right",
    "distribution",
    "charts",
    "going",
    "quick",
    "histogram",
    "costs",
    "products",
    "moving",
    "forward",
    "going",
    "talk",
    "age",
    "groups",
    "age",
    "customer",
    "moment",
    "always",
    "something",
    "like",
    "sales",
    "sort",
    "give",
    "quick",
    "reference",
    "know",
    "age",
    "customer",
    "expressed",
    "actual",
    "years",
    "old",
    "also",
    "categorized",
    "three",
    "four",
    "actually",
    "four",
    "age",
    "groups",
    "seniors",
    "youth",
    "young",
    "adults",
    "adults",
    "right",
    "given",
    "categories",
    "creative",
    "right",
    "better",
    "understand",
    "groups",
    "values",
    "value",
    "counts",
    "quickly",
    "get",
    "pie",
    "chart",
    "could",
    "get",
    "bar",
    "chart",
    "see",
    "right",
    "analysis",
    "data",
    "see",
    "adults",
    "right",
    "largest",
    "group",
    "data",
    "least",
    "moving",
    "forward",
    "correlation",
    "analysis",
    "correlation",
    "properties",
    "probably",
    "high",
    "correlation",
    "example",
    "profit",
    "unit",
    "cost",
    "example",
    "order",
    "quantity",
    "kind",
    "expected",
    "something",
    "right",
    "matrix",
    "right",
    "correlation",
    "showing",
    "red",
    "high",
    "correlation",
    "order",
    "quantity",
    "unit",
    "cost",
    "profit",
    "right",
    "profit",
    "right",
    "see",
    "high",
    "correlation",
    "unit",
    "cost",
    "profit",
    "profit",
    "actually",
    "opposite",
    "blue",
    "high",
    "correlation",
    "sorry",
    "diagonal",
    "blue",
    "correlation",
    "equals",
    "one",
    "high",
    "correlation",
    "blue",
    "see",
    "profit",
    "huge",
    "correlate",
    "lot",
    "correlation",
    "positive",
    "correlation",
    "unit",
    "cost",
    "unit",
    "price",
    "negative",
    "correlation",
    "dark",
    "red",
    "quick",
    "idea",
    "let",
    "see",
    "example",
    "profit",
    "negative",
    "correlation",
    "order",
    "quantity",
    "interesting",
    "right",
    "would",
    "dig",
    "deeper",
    "course",
    "profit",
    "high",
    "correlation",
    "positive",
    "revenue",
    "right",
    "quick",
    "correlation",
    "analysis",
    "also",
    "quick",
    "scatterplot",
    "analyze",
    "customer",
    "age",
    "revenue",
    "right",
    "see",
    "correlation",
    "right",
    "thing",
    "revenue",
    "profit",
    "obvious",
    "right",
    "quickly",
    "draw",
    "diagonal",
    "right",
    "lot",
    "linear",
    "depth",
    "dependency",
    "variables",
    "form",
    "box",
    "plots",
    "case",
    "understanding",
    "profit",
    "per",
    "age",
    "group",
    "right",
    "see",
    "profit",
    "change",
    "depending",
    "customer",
    "age",
    "box",
    "plots",
    "creating",
    "grid",
    "year",
    "customer",
    "age",
    "unit",
    "costs",
    "etc",
    "multiple",
    "things",
    "moving",
    "forward",
    "something",
    "quickly",
    "working",
    "python",
    "especially",
    "within",
    "drew",
    "shape",
    "data",
    "derive",
    "columns",
    "right",
    "pretty",
    "common",
    "excel",
    "create",
    "revenue",
    "per",
    "age",
    "column",
    "google",
    "spreadsheets",
    "going",
    "something",
    "like",
    "revenue",
    "per",
    "age",
    "going",
    "something",
    "like",
    "equals",
    "right",
    "equals",
    "revenue",
    "divided",
    "remember",
    "correct",
    "formula",
    "using",
    "reference",
    "going",
    "pretty",
    "much",
    "extend",
    "whole",
    "thing",
    "go",
    "oh",
    "well",
    "processing",
    "rows",
    "see",
    "slow",
    "let",
    "compare",
    "way",
    "python",
    "works",
    "gon",
    "na",
    "execute",
    "thing",
    "instant",
    "know",
    "extremely",
    "fast",
    "calculated",
    "seems",
    "results",
    "expected",
    "results",
    "expected",
    "quickly",
    "plot",
    "density",
    "plot",
    "histogram",
    "see",
    "right",
    "revenue",
    "parade",
    "going",
    "relevant",
    "case",
    "show",
    "capabilities",
    "let",
    "annual",
    "analyze",
    "well",
    "gon",
    "na",
    "create",
    "new",
    "column",
    "calculated",
    "cost",
    "total",
    "total",
    "orders",
    "total",
    "quantity",
    "order",
    "times",
    "cost",
    "right",
    "extremely",
    "simple",
    "formula",
    "fast",
    "process",
    "gon",
    "na",
    "get",
    "right",
    "many",
    "rows",
    "different",
    "value",
    "provided",
    "cost",
    "right",
    "like",
    "quickly",
    "checking",
    "cost",
    "provided",
    "data",
    "set",
    "point",
    "align",
    "actual",
    "cost",
    "calculating",
    "mistakes",
    "made",
    "know",
    "original",
    "system",
    "people",
    "data",
    "entry",
    "new",
    "column",
    "different",
    "cost",
    "want",
    "know",
    "happen",
    "quick",
    "quick",
    "regression",
    "plot",
    "case",
    "obvious",
    "linear",
    "dependency",
    "calculate",
    "cost",
    "profit",
    "formulas",
    "case",
    "costs",
    "part",
    "cost",
    "plus",
    "profit",
    "going",
    "adding",
    "little",
    "bit",
    "difference",
    "revenue",
    "calculated",
    "revenue",
    "makes",
    "sense",
    "going",
    "quick",
    "histogram",
    "revenue",
    "example",
    "3",
    "prices",
    "using",
    "need",
    "increase",
    "prices",
    "going",
    "well",
    "simple",
    "python",
    "going",
    "increase",
    "everything",
    "point",
    "prices",
    "changed",
    "else",
    "going",
    "able",
    "quick",
    "filtering",
    "let",
    "get",
    "sales",
    "state",
    "kentucky",
    "right",
    "sales",
    "state",
    "kentucky",
    "get",
    "average",
    "sales",
    "age",
    "group",
    "revenue",
    "right",
    "filtering",
    "options",
    "extremely",
    "simple",
    "get",
    "python",
    "case",
    "say",
    "give",
    "sales",
    "age",
    "group",
    "also",
    "country",
    "right",
    "gon",
    "na",
    "get",
    "average",
    "revenue",
    "groups",
    "selecting",
    "modify",
    "data",
    "make",
    "quick",
    "modifications",
    "like",
    "case",
    "going",
    "say",
    "sales",
    "country",
    "right",
    "revenue",
    "going",
    "increase",
    "know",
    "arbitrarily",
    "show",
    "works",
    "far",
    "good",
    "done",
    "couple",
    "things",
    "need",
    "know",
    "details",
    "actually",
    "go",
    "numpy",
    "independence",
    "sections",
    "tutorial",
    "quick",
    "reference",
    "exercises",
    "associated",
    "given",
    "lectures",
    "want",
    "pause",
    "right",
    "get",
    "exercises",
    "going",
    "helpful",
    "going",
    "move",
    "forward",
    "second",
    "lecture",
    "using",
    "database",
    "akila",
    "database",
    "going",
    "erasing",
    "data",
    "instead",
    "csv",
    "file",
    "going",
    "read",
    "data",
    "database",
    "reading",
    "data",
    "sql",
    "database",
    "simple",
    "excel",
    "file",
    "csv",
    "file",
    "previous",
    "example",
    "read",
    "data",
    "going",
    "process",
    "right",
    "query",
    "sql",
    "query",
    "know",
    "sql",
    "check",
    "courses",
    "courses",
    "online",
    "basically",
    "pulling",
    "data",
    "database",
    "one",
    "advantages",
    "python",
    "connectors",
    "pretty",
    "much",
    "every",
    "database",
    "provided",
    "oracle",
    "postgres",
    "mysql",
    "sql",
    "server",
    "etc",
    "particular",
    "example",
    "going",
    "using",
    "mysql",
    "construct",
    "query",
    "pull",
    "data",
    "database",
    "process",
    "converted",
    "outside",
    "data",
    "data",
    "frame",
    "use",
    "python",
    "skills",
    "first",
    "step",
    "usual",
    "check",
    "shape",
    "information",
    "description",
    "data",
    "data",
    "frame",
    "case",
    "want",
    "understand",
    "structure",
    "want",
    "know",
    "many",
    "rows",
    "want",
    "know",
    "little",
    "bit",
    "rows",
    "want",
    "know",
    "little",
    "bit",
    "columns",
    "many",
    "rows",
    "many",
    "records",
    "one",
    "type",
    "one",
    "columns",
    "also",
    "want",
    "better",
    "statistical",
    "understanding",
    "data",
    "quick",
    "describe",
    "details",
    "want",
    "focus",
    "individual",
    "columns",
    "right",
    "case",
    "gon",
    "na",
    "focus",
    "film",
    "rental",
    "rate",
    "right",
    "pretty",
    "much",
    "much",
    "pay",
    "rent",
    "film",
    "um",
    "gon",
    "na",
    "see",
    "kind",
    "distribution",
    "call",
    "distribution",
    "pretty",
    "much",
    "categorical",
    "field",
    "case",
    "basically",
    "rentals",
    "divided",
    "three",
    "main",
    "categories",
    "prices",
    "zero",
    "99",
    "299",
    "box",
    "plot",
    "pretty",
    "much",
    "perfect",
    "never",
    "seen",
    "real",
    "life",
    "plot",
    "box",
    "plot",
    "gives",
    "prices",
    "move",
    "forward",
    "also",
    "check",
    "quickly",
    "categorical",
    "analysis",
    "understanding",
    "distribution",
    "rentals",
    "cities",
    "two",
    "cities",
    "pretty",
    "much",
    "even",
    "see",
    "right",
    "creating",
    "new",
    "columns",
    "reshaping",
    "data",
    "analysis",
    "etc",
    "relatively",
    "simple",
    "case",
    "going",
    "analyze",
    "return",
    "rentals",
    "right",
    "films",
    "going",
    "profitable",
    "company",
    "div",
    "dividing",
    "rental",
    "rate",
    "much",
    "charge",
    "divided",
    "cost",
    "much",
    "costs",
    "us",
    "acquire",
    "film",
    "case",
    "see",
    "distribution",
    "right",
    "rentals",
    "beginning",
    "profitable",
    "rentals",
    "making",
    "60",
    "rental",
    "quickly",
    "analyze",
    "mean",
    "median",
    "fit",
    "right",
    "quick",
    "idea",
    "finally",
    "selection",
    "indexing",
    "want",
    "start",
    "focusing",
    "want",
    "go",
    "data",
    "right",
    "want",
    "zoom",
    "want",
    "better",
    "understanding",
    "start",
    "filtering",
    "case",
    "filter",
    "customer",
    "want",
    "per",
    "city",
    "want",
    "per",
    "state",
    "want",
    "per",
    "film",
    "per",
    "price",
    "category",
    "etc",
    "simple",
    "filter",
    "filter",
    "zooming",
    "one",
    "particular",
    "characteristic",
    "data",
    "perform",
    "detailed",
    "analysis",
    "case",
    "films",
    "rented",
    "customer",
    "last",
    "name",
    "hanson",
    "mean",
    "person",
    "simple",
    "filter",
    "dot",
    "quickly",
    "see",
    "ones",
    "price",
    "film",
    "sorry",
    "highest",
    "replacement",
    "cost",
    "right",
    "basically",
    "going",
    "isolate",
    "films",
    "highest",
    "replacement",
    "cost",
    "also",
    "see",
    "right",
    "idea",
    "films",
    "category",
    "pg",
    "pg",
    "simple",
    "filter",
    "data",
    "process",
    "usually",
    "follow",
    "imported",
    "data",
    "reshape",
    "somehow",
    "create",
    "columns",
    "important",
    "process",
    "cleaning",
    "highlighting",
    "part",
    "tutorial",
    "going",
    "talk",
    "tutorial",
    "process",
    "cleaning",
    "reshaping",
    "creating",
    "new",
    "columns",
    "combining",
    "data",
    "creating",
    "visualizations",
    "process",
    "right",
    "following",
    "python",
    "skills",
    "tone",
    "odd",
    "might",
    "imagine",
    "creating",
    "reports",
    "running",
    "machine",
    "learning",
    "processes",
    "creating",
    "linear",
    "regressions",
    "etc",
    "quick",
    "understanding",
    "process",
    "follow",
    "starting",
    "gon",
    "na",
    "move",
    "forward",
    "details",
    "one",
    "individual",
    "tools",
    "going",
    "talk",
    "going",
    "talk",
    "jupyter",
    "notebooks",
    "going",
    "talk",
    "numpy",
    "going",
    "talk",
    "pandas",
    "going",
    "talk",
    "mapa",
    "lib",
    "seaborne",
    "etc",
    "starting",
    "right",
    "first",
    "thing",
    "going",
    "see",
    "whole",
    "thing",
    "using",
    "jupyter",
    "notebook",
    "want",
    "want",
    "experience",
    "want",
    "idea",
    "works",
    "going",
    "move",
    "forward",
    "individual",
    "tools",
    "numpy",
    "pandas",
    "etc",
    "remember",
    "exercises",
    "also",
    "associated",
    "particular",
    "lecture",
    "always",
    "go",
    "back",
    "work",
    "get",
    "better",
    "understanding",
    "tools",
    "using",
    "jump",
    "actual",
    "data",
    "analysis",
    "course",
    "start",
    "talking",
    "python",
    "pandas",
    "tools",
    "going",
    "use",
    "import",
    "files",
    "read",
    "data",
    "databases",
    "etc",
    "want",
    "show",
    "environment",
    "work",
    "primary",
    "environment",
    "tool",
    "use",
    "99",
    "time",
    "jupyter",
    "notebook",
    "going",
    "different",
    "terms",
    "going",
    "referring",
    "jupyter",
    "notebook",
    "going",
    "see",
    "part",
    "tutorial",
    "see",
    "jupiter",
    "actually",
    "whole",
    "ecosystem",
    "tools",
    "interesting",
    "project",
    "jupiter",
    "free",
    "open",
    "source",
    "ecosystem",
    "multiple",
    "tools",
    "primarily",
    "gon",
    "na",
    "talk",
    "first",
    "jupyter",
    "notebook",
    "seeing",
    "right",
    "gon",
    "na",
    "see",
    "live",
    "second",
    "actually",
    "show",
    "thing",
    "going",
    "use",
    "also",
    "going",
    "talk",
    "jupiter",
    "lab",
    "okay",
    "evolution",
    "regular",
    "jupyter",
    "notebook",
    "think",
    "could",
    "familiar",
    "already",
    "usually",
    "questions",
    "question",
    "difference",
    "jupyter",
    "notebook",
    "jupiter",
    "lab",
    "well",
    "difference",
    "jupiter",
    "lab",
    "nicer",
    "interface",
    "top",
    "jupyter",
    "notebooks",
    "plain",
    "notebook",
    "notebook",
    "scrolling",
    "right",
    "also",
    "addition",
    "tree",
    "view",
    "addition",
    "get",
    "tools",
    "addition",
    "command",
    "lead",
    "multiple",
    "things",
    "open",
    "files",
    "nice",
    "preview",
    "etc",
    "jupiter",
    "lab",
    "jupyter",
    "notebook",
    "similar",
    "jupiter",
    "lab",
    "easy",
    "evolution",
    "jupyter",
    "notebook",
    "using",
    "jupiter",
    "free",
    "open",
    "source",
    "project",
    "anybody",
    "install",
    "anybody",
    "download",
    "simple",
    "get",
    "set",
    "local",
    "computer",
    "case",
    "using",
    "something",
    "call",
    "notebooks",
    "ai",
    "project",
    "provides",
    "jupiter",
    "environment",
    "free",
    "cloud",
    "need",
    "install",
    "things",
    "locally",
    "need",
    "put",
    "things",
    "sync",
    "hard",
    "drive",
    "right",
    "means",
    "need",
    "buck",
    "example",
    "service",
    "worked",
    "cloud",
    "said",
    "want",
    "tell",
    "compiled",
    "quick",
    "list",
    "everything",
    "going",
    "talk",
    "part",
    "tutorial",
    "list",
    "two",
    "thread",
    "multiple",
    "multiple",
    "hints",
    "use",
    "jupyter",
    "notebooks",
    "video",
    "course",
    "forget",
    "concepts",
    "always",
    "go",
    "back",
    "quick",
    "reference",
    "let",
    "get",
    "started",
    "use",
    "jupyter",
    "notebook",
    "interactive",
    "real",
    "time",
    "environment",
    "produce",
    "explore",
    "data",
    "data",
    "analysis",
    "tool",
    "gon",
    "na",
    "fire",
    "commands",
    "immediately",
    "respond",
    "something",
    "back",
    "interactive",
    "tool",
    "working",
    "data",
    "analysis",
    "mainly",
    "main",
    "difference",
    "tools",
    "like",
    "example",
    "excel",
    "tableau",
    "etc",
    "constantly",
    "looking",
    "data",
    "visual",
    "reference",
    "like",
    "example",
    "excel",
    "right",
    "excel",
    "constantly",
    "looking",
    "data",
    "front",
    "cells",
    "stroll",
    "see",
    "problem",
    "scalable",
    "right",
    "like",
    "nobody",
    "work",
    "rows",
    "mind",
    "always",
    "forget",
    "something",
    "way",
    "work",
    "python",
    "indeed",
    "analysis",
    "always",
    "reference",
    "data",
    "looks",
    "like",
    "always",
    "back",
    "head",
    "constantly",
    "looking",
    "like",
    "person",
    "matrix",
    "know",
    "commander",
    "matrix",
    "commands",
    "people",
    "get",
    "get",
    "basically",
    "telling",
    "people",
    "telling",
    "people",
    "basically",
    "asking",
    "data",
    "right",
    "asking",
    "questions",
    "data",
    "picture",
    "mind",
    "going",
    "work",
    "constantly",
    "looking",
    "reference",
    "back",
    "heads",
    "data",
    "looks",
    "like",
    "tool",
    "useful",
    "tool",
    "useful",
    "also",
    "training",
    "python",
    "skills",
    "permanent",
    "language",
    "skills",
    "gon",
    "na",
    "see",
    "regular",
    "python",
    "interpreter",
    "case",
    "execute",
    "code",
    "two",
    "one",
    "times",
    "actually",
    "one",
    "plus",
    "three",
    "go",
    "result",
    "four",
    "right",
    "python",
    "fully",
    "featured",
    "python",
    "interpreter",
    "good",
    "thing",
    "going",
    "respond",
    "us",
    "pretty",
    "much",
    "immediately",
    "create",
    "command",
    "immediately",
    "get",
    "response",
    "something",
    "print",
    "hello",
    "world",
    "immediately",
    "get",
    "response",
    "hello",
    "world",
    "times",
    "times",
    "three",
    "python",
    "interpreter",
    "fully",
    "feature",
    "python",
    "interpreter",
    "accessed",
    "terminal",
    "write",
    "good",
    "thing",
    "jupiter",
    "lab",
    "terminal",
    "python",
    "right",
    "two",
    "time",
    "three",
    "get",
    "answer",
    "back",
    "convenient",
    "work",
    "data",
    "need",
    "something",
    "little",
    "bit",
    "interactive",
    "also",
    "mix",
    "documents",
    "going",
    "advantage",
    "jupyter",
    "notebook",
    "way",
    "work",
    "jupyter",
    "notebooks",
    "concepts",
    "important",
    "concepts",
    "going",
    "follow",
    "jupyter",
    "notebook",
    "sequence",
    "multiple",
    "cells",
    "okay",
    "everything",
    "cell",
    "see",
    "click",
    "cells",
    "even",
    "even",
    "look",
    "like",
    "cell",
    "see",
    "blue",
    "thing",
    "right",
    "right",
    "pretty",
    "much",
    "following",
    "clicking",
    "cell",
    "selecting",
    "particular",
    "cell",
    "everything",
    "happens",
    "within",
    "cell",
    "want",
    "execute",
    "code",
    "one",
    "plus",
    "five",
    "get",
    "result",
    "result",
    "back",
    "right",
    "works",
    "creating",
    "cell",
    "deleting",
    "cell",
    "create",
    "another",
    "cell",
    "everything",
    "happens",
    "cell",
    "going",
    "tell",
    "add",
    "cells",
    "remove",
    "execute",
    "code",
    "etc",
    "interesting",
    "thing",
    "cell",
    "either",
    "python",
    "code",
    "programming",
    "language",
    "using",
    "case",
    "python",
    "data",
    "analysis",
    "course",
    "python",
    "code",
    "one",
    "plus",
    "three",
    "python",
    "code",
    "call",
    "markdown",
    "okay",
    "formatting",
    "format",
    "right",
    "create",
    "text",
    "render",
    "sort",
    "html",
    "id",
    "output",
    "case",
    "source",
    "code",
    "markdown",
    "looks",
    "like",
    "markdown",
    "line",
    "starts",
    "part",
    "going",
    "title",
    "case",
    "going",
    "largest",
    "biggest",
    "title",
    "one",
    "pod",
    "keep",
    "adding",
    "reviews",
    "size",
    "case",
    "level",
    "three",
    "title",
    "example",
    "quote",
    "bold",
    "alex",
    "link",
    "right",
    "let",
    "actually",
    "could",
    "copy",
    "cell",
    "open",
    "source",
    "code",
    "go",
    "link",
    "right",
    "issue",
    "issue",
    "created",
    "rendered",
    "link",
    "markdown",
    "text",
    "formatting",
    "tool",
    "right",
    "protocol",
    "could",
    "say",
    "case",
    "specify",
    "us",
    "rules",
    "use",
    "text",
    "markdown",
    "knows",
    "interpret",
    "format",
    "right",
    "return",
    "formatted",
    "document",
    "example",
    "green",
    "divider",
    "picture",
    "know",
    "picture",
    "starts",
    "exclamation",
    "marks",
    "saying",
    "right",
    "cell",
    "either",
    "python",
    "code",
    "markdown",
    "markdown",
    "entire",
    "thing",
    "get",
    "tutorial",
    "online",
    "free",
    "fairly",
    "simple",
    "get",
    "started",
    "also",
    "important",
    "formatting",
    "reports",
    "right",
    "creating",
    "reports",
    "want",
    "look",
    "pretty",
    "use",
    "markdown",
    "going",
    "see",
    "later",
    "export",
    "notebooks",
    "generate",
    "pdfs",
    "right",
    "whole",
    "thing",
    "pdf",
    "html",
    "page",
    "done",
    "data",
    "analysis",
    "hand",
    "whoever",
    "asked",
    "analysis",
    "pdf",
    "report",
    "pretty",
    "neat",
    "moving",
    "forward",
    "cell",
    "going",
    "either",
    "markdown",
    "going",
    "code",
    "right",
    "ones",
    "code",
    "switch",
    "modes",
    "say",
    "ls",
    "code",
    "actually",
    "let",
    "make",
    "markdown",
    "right",
    "code",
    "matter",
    "executing",
    "anything",
    "cell",
    "interpret",
    "markdown",
    "switched",
    "back",
    "code",
    "works",
    "said",
    "sure",
    "also",
    "raw",
    "honest",
    "use",
    "raw",
    "often",
    "general",
    "cell",
    "type",
    "cell",
    "using",
    "type",
    "code",
    "markdown",
    "switch",
    "selector",
    "right",
    "things",
    "tell",
    "right",
    "away",
    "start",
    "internalizing",
    "gon",
    "na",
    "take",
    "time",
    "get",
    "used",
    "get",
    "used",
    "gon",
    "na",
    "move",
    "fast",
    "data",
    "analysis",
    "python",
    "jupyter",
    "notebooks",
    "first",
    "thing",
    "seeing",
    "right",
    "every",
    "cell",
    "given",
    "execution",
    "number",
    "cells",
    "moved",
    "right",
    "moving",
    "around",
    "moving",
    "around",
    "always",
    "know",
    "one",
    "executed",
    "another",
    "one",
    "every",
    "execution",
    "run",
    "assigned",
    "execution",
    "number",
    "case",
    "seventh",
    "time",
    "executed",
    "code",
    "execute",
    "code",
    "example",
    "know",
    "two",
    "times",
    "two",
    "eighth",
    "time",
    "executed",
    "code",
    "move",
    "thing",
    "right",
    "reading",
    "thing",
    "top",
    "full",
    "right",
    "understand",
    "thing",
    "moved",
    "cell",
    "moved",
    "structure",
    "notebook",
    "changed",
    "thing",
    "executed",
    "cell",
    "right",
    "xact",
    "seven",
    "execution",
    "order",
    "always",
    "preserved",
    "important",
    "thing",
    "something",
    "else",
    "seeing",
    "change",
    "structure",
    "things",
    "notebook",
    "without",
    "using",
    "menu",
    "know",
    "use",
    "keyboard",
    "commands",
    "keyword",
    "shortcuts",
    "run",
    "commands",
    "example",
    "add",
    "new",
    "cell",
    "markdown",
    "cell",
    "code",
    "cell",
    "need",
    "cell",
    "one",
    "command",
    "going",
    "issue",
    "order",
    "create",
    "cell",
    "case",
    "command",
    "going",
    "letter",
    "type",
    "new",
    "cell",
    "creative",
    "delete",
    "cell",
    "two",
    "times",
    "key",
    "two",
    "times",
    "key",
    "reference",
    "built",
    "example",
    "right",
    "whereas",
    "hit",
    "point",
    "type",
    "press",
    "create",
    "new",
    "cell",
    "press",
    "b",
    "create",
    "new",
    "cell",
    "call",
    "let",
    "put",
    "something",
    "reference",
    "going",
    "put",
    "letter",
    "b",
    "going",
    "create",
    "cell",
    "b",
    "currently",
    "selected",
    "one",
    "selection",
    "blue",
    "hit",
    "let",
    "delete",
    "one",
    "hit",
    "going",
    "create",
    "cell",
    "previously",
    "selected",
    "one",
    "hit",
    "going",
    "create",
    "cell",
    "previously",
    "created",
    "one",
    "mnemonics",
    "creation",
    "something",
    "else",
    "important",
    "cell",
    "hit",
    "letter",
    "leader",
    "literally",
    "hits",
    "letter",
    "keyword",
    "control",
    "command",
    "creates",
    "new",
    "cell",
    "type",
    "inside",
    "document",
    "right",
    "right",
    "type",
    "adding",
    "actual",
    "character",
    "cell",
    "happen",
    "going",
    "notice",
    "change",
    "going",
    "call",
    "mode",
    "second",
    "going",
    "see",
    "content",
    "cell",
    "grayed",
    "show",
    "press",
    "letter",
    "actually",
    "creates",
    "sell",
    "adding",
    "content",
    "sell",
    "go",
    "back",
    "mode",
    "going",
    "give",
    "better",
    "explanation",
    "second",
    "type",
    "anything",
    "case",
    "actually",
    "appended",
    "text",
    "within",
    "interaction",
    "sell",
    "modes",
    "important",
    "jupyter",
    "notebook",
    "mode",
    "base",
    "editor",
    "right",
    "multiple",
    "editors",
    "example",
    "vim",
    "vi",
    "vi",
    "mode",
    "based",
    "editors",
    "basically",
    "behavior",
    "work",
    "change",
    "depending",
    "mode",
    "currently",
    "activated",
    "example",
    "case",
    "addition",
    "mode",
    "character",
    "type",
    "appended",
    "cell",
    "b",
    "c",
    "etc",
    "switch",
    "editing",
    "mode",
    "gon",
    "na",
    "call",
    "command",
    "mode",
    "switch",
    "mode",
    "cell",
    "grayed",
    "key",
    "hit",
    "gon",
    "na",
    "something",
    "different",
    "associated",
    "key",
    "going",
    "create",
    "new",
    "cell",
    "b",
    "going",
    "create",
    "new",
    "cell",
    "double",
    "going",
    "delete",
    "cell",
    "right",
    "important",
    "part",
    "mo",
    "one",
    "important",
    "parts",
    "order",
    "understand",
    "work",
    "jupyter",
    "notebooks",
    "mode",
    "currently",
    "working",
    "two",
    "modes",
    "fairly",
    "simple",
    "command",
    "mode",
    "recognize",
    "command",
    "mode",
    "cell",
    "grayed",
    "get",
    "edit",
    "mode",
    "regular",
    "prompt",
    "saying",
    "number",
    "one",
    "cell",
    "actually",
    "subjects",
    "addition",
    "way",
    "realize",
    "going",
    "switch",
    "modes",
    "case",
    "editing",
    "mode",
    "using",
    "mouse",
    "pointing",
    "click",
    "outside",
    "gon",
    "na",
    "get",
    "edit",
    "mode",
    "command",
    "mode",
    "point",
    "inside",
    "going",
    "back",
    "edit",
    "mode",
    "let",
    "tell",
    "something",
    "right",
    "away",
    "say",
    "like",
    "use",
    "mouse",
    "like",
    "point",
    "click",
    "slow",
    "like",
    "use",
    "keyboard",
    "move",
    "fast",
    "keyboard",
    "going",
    "switch",
    "editing",
    "mode",
    "back",
    "command",
    "mode",
    "going",
    "escape",
    "key",
    "go",
    "editing",
    "command",
    "edit",
    "escape",
    "key",
    "going",
    "switch",
    "editing",
    "mode",
    "actually",
    "want",
    "make",
    "modifications",
    "cell",
    "basically",
    "want",
    "get",
    "edit",
    "mode",
    "going",
    "hit",
    "return",
    "key",
    "going",
    "get",
    "edit",
    "mode",
    "tackle",
    "multiple",
    "things",
    "writing",
    "said",
    "jupyter",
    "notebooks",
    "going",
    "use",
    "python",
    "code",
    "quickly",
    "interact",
    "data",
    "need",
    "real",
    "time",
    "know",
    "asking",
    "answering",
    "type",
    "editor",
    "jupyter",
    "notebook",
    "jupyter",
    "notebook",
    "two",
    "modes",
    "edit",
    "command",
    "mode",
    "cells",
    "pretty",
    "much",
    "everything",
    "important",
    "fundamental",
    "part",
    "notebook",
    "cell",
    "going",
    "two",
    "types",
    "either",
    "code",
    "going",
    "markdown",
    "right",
    "going",
    "start",
    "showing",
    "features",
    "going",
    "show",
    "going",
    "show",
    "important",
    "commands",
    "course",
    "keyboard",
    "shortcuts",
    "commands",
    "move",
    "freely",
    "work",
    "jupyter",
    "notebooks",
    "efficient",
    "way",
    "let",
    "get",
    "started",
    "first",
    "important",
    "commands",
    "moving",
    "right",
    "navigating",
    "simple",
    "navigate",
    "use",
    "arrow",
    "keys",
    "going",
    "move",
    "around",
    "notebook",
    "wanted",
    "switch",
    "type",
    "right",
    "going",
    "markdown",
    "code",
    "etc",
    "switch",
    "use",
    "drop",
    "press",
    "specific",
    "key",
    "switch",
    "either",
    "markdown",
    "python",
    "markdown",
    "gon",
    "na",
    "switch",
    "sorry",
    "hit",
    "key",
    "going",
    "make",
    "markdown",
    "python",
    "going",
    "hit",
    "key",
    "going",
    "make",
    "python",
    "code",
    "going",
    "switch",
    "back",
    "forth",
    "keep",
    "eye",
    "selector",
    "going",
    "hit",
    "going",
    "switch",
    "code",
    "markdown",
    "else",
    "execute",
    "code",
    "within",
    "typing",
    "code",
    "want",
    "execute",
    "two",
    "types",
    "executions",
    "run",
    "first",
    "one",
    "going",
    "keep",
    "selection",
    "currently",
    "selected",
    "active",
    "cell",
    "going",
    "stay",
    "place",
    "going",
    "keeping",
    "press",
    "ctrl",
    "key",
    "hitting",
    "return",
    "going",
    "run",
    "decode",
    "cell",
    "prompt",
    "current",
    "selected",
    "cell",
    "remain",
    "running",
    "thing",
    "couple",
    "times",
    "already",
    "selection",
    "currently",
    "highlighted",
    "cell",
    "stays",
    "change",
    "using",
    "shift",
    "return",
    "keep",
    "shift",
    "key",
    "pressed",
    "hit",
    "return",
    "going",
    "execute",
    "code",
    "immediately",
    "switch",
    "prompt",
    "currently",
    "selected",
    "cell",
    "following",
    "one",
    "useful",
    "multiple",
    "cells",
    "want",
    "execute",
    "one",
    "keep",
    "hitting",
    "shift",
    "return",
    "return",
    "return",
    "return",
    "keeps",
    "moving",
    "right",
    "top",
    "bottom",
    "alright",
    "ctrl",
    "return",
    "shift",
    "return",
    "change",
    "execution",
    "going",
    "happen",
    "currently",
    "selected",
    "cell",
    "already",
    "saw",
    "create",
    "cells",
    "key",
    "create",
    "cell",
    "b",
    "key",
    "create",
    "cell",
    "delete",
    "cell",
    "going",
    "hit",
    "key",
    "key",
    "two",
    "times",
    "one",
    "quickly",
    "dd",
    "going",
    "delete",
    "cell",
    "happens",
    "made",
    "mistake",
    "want",
    "undo",
    "previously",
    "issued",
    "commands",
    "well",
    "mnemonic",
    "going",
    "ctrl",
    "z",
    "know",
    "mnemonic",
    "command",
    "going",
    "ctrl",
    "z",
    "need",
    "press",
    "z",
    "key",
    "know",
    "need",
    "ctrl",
    "z",
    "gon",
    "na",
    "undo",
    "whatever",
    "previous",
    "command",
    "alright",
    "b",
    "deletion",
    "z",
    "undo",
    "commands",
    "saying",
    "correspondence",
    "toolbar",
    "command",
    "palette",
    "example",
    "right",
    "could",
    "run",
    "code",
    "pressing",
    "play",
    "button",
    "right",
    "see",
    "execution",
    "changing",
    "multiple",
    "ones",
    "search",
    "remember",
    "right",
    "neat",
    "thing",
    "actually",
    "shortcuts",
    "issue",
    "command",
    "let",
    "say",
    "remember",
    "execute",
    "stay",
    "stay",
    "cell",
    "move",
    "whatever",
    "search",
    "run",
    "see",
    "name",
    "actual",
    "command",
    "right",
    "right",
    "least",
    "first",
    "ad",
    "month",
    "working",
    "jupyter",
    "notebooks",
    "usually",
    "need",
    "go",
    "back",
    "commands",
    "try",
    "remember",
    "quick",
    "shortcuts",
    "time",
    "practice",
    "come",
    "naturally",
    "moving",
    "forward",
    "else",
    "commands",
    "case",
    "something",
    "cut",
    "paste",
    "cell",
    "somewhere",
    "else",
    "cut",
    "paste",
    "going",
    "x",
    "cut",
    "also",
    "use",
    "scissors",
    "x",
    "cut",
    "paste",
    "use",
    "button",
    "actually",
    "buttons",
    "sorry",
    "press",
    "v",
    "key",
    "v",
    "going",
    "paste",
    "wherever",
    "currently",
    "standing",
    "going",
    "cut",
    "going",
    "remove",
    "going",
    "paste",
    "also",
    "copy",
    "instead",
    "cutting",
    "press",
    "c",
    "key",
    "going",
    "cut",
    "sorry",
    "copy",
    "actually",
    "say",
    "want",
    "paste",
    "case",
    "duplicated",
    "cell",
    "looks",
    "something",
    "interesting",
    "execution",
    "count",
    "remains",
    "like",
    "unique",
    "identifier",
    "executions",
    "means",
    "know",
    "something",
    "executed",
    "moving",
    "forward",
    "going",
    "use",
    "code",
    "going",
    "import",
    "tools",
    "see",
    "characteristics",
    "advantages",
    "jupyter",
    "notebooks",
    "use",
    "often",
    "compared",
    "example",
    "regular",
    "python",
    "terminal",
    "one",
    "important",
    "thing",
    "visualizations",
    "data",
    "analyst",
    "constantly",
    "getting",
    "data",
    "expressing",
    "images",
    "animated",
    "animations",
    "right",
    "commonly",
    "images",
    "main",
    "library",
    "use",
    "python",
    "model",
    "live",
    "model",
    "lib",
    "first",
    "class",
    "citizen",
    "jupyter",
    "notebooks",
    "means",
    "run",
    "figures",
    "matplotlib",
    "show",
    "directly",
    "notebook",
    "without",
    "need",
    "anything",
    "crazy",
    "imagine",
    "showing",
    "beautiful",
    "picture",
    "terminal",
    "hard",
    "course",
    "one",
    "main",
    "advantages",
    "jupyter",
    "notebook",
    "moving",
    "forward",
    "going",
    "going",
    "first",
    "going",
    "get",
    "data",
    "public",
    "api",
    "crypto",
    "watch",
    "service",
    "basically",
    "crypto",
    "information",
    "bitcoin",
    "ether",
    "etc",
    "check",
    "docs",
    "actually",
    "open",
    "gon",
    "na",
    "give",
    "market",
    "data",
    "tesla",
    "check",
    "docs",
    "get",
    "case",
    "btc",
    "bitcoin",
    "euro",
    "sexual",
    "see",
    "change",
    "usd",
    "usd",
    "price",
    "go",
    "current",
    "price",
    "bitcoin",
    "results",
    "surprise",
    "etc",
    "actually",
    "going",
    "markets",
    "crack",
    "btc",
    "usd",
    "let",
    "let",
    "actually",
    "issue",
    "query",
    "going",
    "use",
    "open",
    "high",
    "low",
    "close",
    "oh",
    "h",
    "lc",
    "worry",
    "looks",
    "ugly",
    "actually",
    "using",
    "list",
    "results",
    "write",
    "different",
    "candles",
    "call",
    "get",
    "idea",
    "open",
    "price",
    "close",
    "price",
    "high",
    "price",
    "low",
    "price",
    "going",
    "issue",
    "going",
    "issue",
    "requests",
    "internet",
    "api",
    "crypto",
    "crypto",
    "watch",
    "api",
    "get",
    "information",
    "bacon",
    "analysis",
    "say",
    "actually",
    "get",
    "ether",
    "ether",
    "author",
    "different",
    "types",
    "crypto",
    "currencies",
    "function",
    "defining",
    "get",
    "history",
    "get",
    "historic",
    "price",
    "simple",
    "function",
    "uses",
    "pandas",
    "one",
    "important",
    "tools",
    "going",
    "using",
    "course",
    "requests",
    "library",
    "also",
    "famous",
    "library",
    "python",
    "going",
    "going",
    "get",
    "bitcoin",
    "ether",
    "prize",
    "entire",
    "week",
    "right",
    "ferreted",
    "second",
    "february",
    "sorry",
    "february",
    "25",
    "today",
    "right",
    "depending",
    "shooting",
    "video",
    "gon",
    "na",
    "get",
    "quick",
    "reference",
    "prices",
    "open",
    "high",
    "low",
    "close",
    "case",
    "four",
    "information",
    "per",
    "hour",
    "okay",
    "something",
    "actually",
    "change",
    "request",
    "making",
    "api",
    "reuse",
    "candles",
    "eyes",
    "case",
    "keeping",
    "per",
    "hour",
    "hour",
    "information",
    "bitcoin",
    "particular",
    "market",
    "bitstamp",
    "day",
    "day",
    "right",
    "morning",
    "open",
    "close",
    "highest",
    "price",
    "lowest",
    "price",
    "also",
    "volume",
    "operated",
    "within",
    "time",
    "period",
    "gon",
    "na",
    "immediately",
    "plot",
    "price",
    "see",
    "time",
    "think",
    "entire",
    "day",
    "price",
    "dropped",
    "actually",
    "days",
    "like",
    "entire",
    "week",
    "price",
    "dropped",
    "right",
    "pretty",
    "significant",
    "drop",
    "let",
    "see",
    "ether",
    "highperformance",
    "records",
    "moved",
    "tell",
    "data",
    "analysis",
    "programming",
    "tool",
    "like",
    "python",
    "rar",
    "constantly",
    "looking",
    "data",
    "showing",
    "right",
    "first",
    "five",
    "records",
    "actually",
    "let",
    "actually",
    "records",
    "okay",
    "169",
    "records",
    "per",
    "hour",
    "169",
    "hours",
    "divided",
    "24",
    "hours",
    "seven",
    "days",
    "right",
    "seven",
    "days",
    "data",
    "169",
    "records",
    "little",
    "bit",
    "information",
    "keeps",
    "go",
    "gon",
    "na",
    "get",
    "second",
    "basically",
    "one",
    "tell",
    "169",
    "records",
    "honest",
    "something",
    "could",
    "saying",
    "spreadsheet",
    "want",
    "get",
    "concept",
    "looking",
    "data",
    "brain",
    "know",
    "know",
    "shape",
    "know",
    "many",
    "records",
    "know",
    "information",
    "standard",
    "deviation",
    "mean",
    "right",
    "close",
    "price",
    "standard",
    "deviation",
    "right",
    "average",
    "mean",
    "median",
    "right",
    "information",
    "data",
    "sitting",
    "behind",
    "know",
    "brain",
    "looking",
    "simple",
    "example",
    "169",
    "records",
    "real",
    "life",
    "dealing",
    "millions",
    "records",
    "impossible",
    "see",
    "ever",
    "tried",
    "crawling",
    "excel",
    "spreadsheet",
    "millions",
    "records",
    "crazy",
    "possible",
    "unusable",
    "way",
    "work",
    "data",
    "analysis",
    "python",
    "r",
    "tools",
    "constantly",
    "keep",
    "eye",
    "data",
    "know",
    "shape",
    "quick",
    "references",
    "like",
    "show",
    "first",
    "five",
    "records",
    "mean",
    "last",
    "five",
    "records",
    "show",
    "chunk",
    "visualizations",
    "creating",
    "jupyter",
    "notebooks",
    "simple",
    "get",
    "plot",
    "done",
    "right",
    "going",
    "also",
    "see",
    "jupyter",
    "notebooks",
    "pretty",
    "neat",
    "things",
    "first",
    "one",
    "use",
    "another",
    "library",
    "called",
    "bokeem",
    "difference",
    "boakye",
    "charts",
    "interactive",
    "moving",
    "right",
    "javascript",
    "interactive",
    "look",
    "back",
    "static",
    "chart",
    "png",
    "actually",
    "export",
    "png",
    "nothing",
    "bokeem",
    "actually",
    "dynamic",
    "dynamically",
    "generated",
    "interactive",
    "charts",
    "zoom",
    "piece",
    "data",
    "right",
    "move",
    "around",
    "whatever",
    "want",
    "refresh",
    "reset",
    "whatever",
    "dynamically",
    "generated",
    "chart",
    "difference",
    "working",
    "data",
    "dynamically",
    "analysis",
    "sort",
    "exploration",
    "boek",
    "planning",
    "tool",
    "zoom",
    "right",
    "going",
    "let",
    "let",
    "look",
    "things",
    "working",
    "mean",
    "reverting",
    "strategy",
    "example",
    "see",
    "high",
    "volume",
    "see",
    "low",
    "volume",
    "mean",
    "going",
    "see",
    "mean",
    "reversion",
    "interesting",
    "need",
    "example",
    "export",
    "pdf",
    "export",
    "huge",
    "html",
    "file",
    "static",
    "images",
    "going",
    "probably",
    "better",
    "difference",
    "honest",
    "model",
    "lib",
    "lot",
    "popular",
    "bogey",
    "use",
    "model",
    "live",
    "lot",
    "actually",
    "tools",
    "like",
    "seaborne",
    "make",
    "easy",
    "access",
    "use",
    "else",
    "jupyter",
    "notebooks",
    "work",
    "well",
    "excel",
    "excel",
    "files",
    "file",
    "formats",
    "csvs",
    "xml",
    "excel",
    "files",
    "etc",
    "also",
    "availability",
    "jupiter",
    "lab",
    "jupiter",
    "lab",
    "immediately",
    "interpret",
    "opens",
    "v",
    "files",
    "open",
    "extensions",
    "xls",
    "files",
    "xml",
    "files",
    "json",
    "files",
    "nice",
    "editor",
    "tree",
    "view",
    "jason",
    "jupiter",
    "lab",
    "environment",
    "combined",
    "python",
    "jupyter",
    "notebooks",
    "give",
    "good",
    "idea",
    "jupiter",
    "general",
    "case",
    "saved",
    "going",
    "execute",
    "try",
    "execute",
    "run",
    "done",
    "export",
    "crypto",
    "file",
    "us",
    "excel",
    "spreadsheet",
    "click",
    "basically",
    "download",
    "going",
    "open",
    "see",
    "go",
    "let",
    "reduce",
    "size",
    "thing",
    "go",
    "see",
    "exported",
    "spread",
    "two",
    "sheets",
    "case",
    "bitcoin",
    "ether",
    "right",
    "data",
    "previous",
    "notebook",
    "right",
    "combination",
    "jupiter",
    "combination",
    "python",
    "combination",
    "jupiter",
    "lab",
    "tools",
    "work",
    "well",
    "together",
    "gon",
    "na",
    "keep",
    "moving",
    "forward",
    "video",
    "tutorial",
    "talking",
    "data",
    "analysis",
    "general",
    "going",
    "talk",
    "python",
    "going",
    "quick",
    "review",
    "python",
    "maybe",
    "running",
    "commands",
    "felt",
    "felt",
    "little",
    "bit",
    "lost",
    "gon",
    "na",
    "quick",
    "review",
    "python",
    "course",
    "gon",
    "na",
    "get",
    "directly",
    "deep",
    "data",
    "analysis",
    "pandas",
    "tools",
    "want",
    "tell",
    "something",
    "finish",
    "chapter",
    "important",
    "get",
    "familiar",
    "data",
    "analysis",
    "sorry",
    "jupyter",
    "notebooks",
    "going",
    "spend",
    "ton",
    "time",
    "valuable",
    "skill",
    "get",
    "get",
    "proficient",
    "comfortable",
    "jupyter",
    "notebooks",
    "know",
    "like",
    "creating",
    "cells",
    "deleting",
    "cells",
    "cutting",
    "pasting",
    "moving",
    "things",
    "around",
    "etc",
    "generate",
    "reports",
    "jupyter",
    "notebooks",
    "going",
    "excellent",
    "keep",
    "eye",
    "keep",
    "practicing",
    "way",
    "learn",
    "analysis",
    "keep",
    "practicing",
    "keep",
    "open",
    "command",
    "polat",
    "always",
    "want",
    "forgot",
    "caught",
    "cell",
    "well",
    "command",
    "x",
    "right",
    "gon",
    "na",
    "tell",
    "upfront",
    "keep",
    "eye",
    "keep",
    "working",
    "practicing",
    "get",
    "familiar",
    "jupyter",
    "notebooks",
    "going",
    "move",
    "fast",
    "remember",
    "nice",
    "list",
    "compiled",
    "commands",
    "reference",
    "always",
    "access",
    "need",
    "extra",
    "help",
    "going",
    "keep",
    "moving",
    "forward",
    "data",
    "analysis",
    "time",
    "talk",
    "numpy",
    "one",
    "important",
    "libraries",
    "python",
    "ecosystem",
    "data",
    "processing",
    "general",
    "one",
    "got",
    "pretty",
    "much",
    "everything",
    "started",
    "trace",
    "back",
    "numpy",
    "old",
    "developed",
    "library",
    "20",
    "years",
    "maybe",
    "extremely",
    "popular",
    "library",
    "important",
    "library",
    "gon",
    "na",
    "say",
    "popular",
    "going",
    "explain",
    "second",
    "important",
    "library",
    "python",
    "ecosystem",
    "data",
    "processing",
    "numpy",
    "library",
    "lead",
    "numeric",
    "competing",
    "library",
    "process",
    "numbers",
    "calculate",
    "things",
    "numbers",
    "numpy",
    "limited",
    "scope",
    "could",
    "say",
    "purpose",
    "simple",
    "library",
    "look",
    "look",
    "api",
    "consistent",
    "way",
    "numpy",
    "important",
    "well",
    "python",
    "numeric",
    "processing",
    "pure",
    "python",
    "processing",
    "numbers",
    "slow",
    "okay",
    "python",
    "slow",
    "compared",
    "programming",
    "languages",
    "go",
    "right",
    "deep",
    "levels",
    "performance",
    "processing",
    "large",
    "amounts",
    "data",
    "right",
    "need",
    "squeeze",
    "even",
    "know",
    "tiny",
    "bite",
    "end",
    "pipeline",
    "need",
    "squeeze",
    "every",
    "flow",
    "cpu",
    "python",
    "right",
    "tool",
    "non",
    "python",
    "pure",
    "python",
    "programming",
    "language",
    "numpy",
    "actually",
    "solving",
    "numpy",
    "efficient",
    "numeric",
    "processing",
    "library",
    "sits",
    "top",
    "python",
    "gives",
    "api",
    "going",
    "work",
    "writing",
    "python",
    "code",
    "saying",
    "low",
    "level",
    "going",
    "using",
    "high",
    "performance",
    "numeric",
    "computations",
    "arrays",
    "numbers",
    "representations",
    "etc",
    "pi",
    "numpy",
    "extremely",
    "simple",
    "api",
    "perspective",
    "extremely",
    "powerful",
    "say",
    "popular",
    "yes",
    "important",
    "well",
    "reality",
    "usually",
    "employ",
    "numpy",
    "directly",
    "see",
    "using",
    "numpy",
    "often",
    "using",
    "tools",
    "python",
    "like",
    "example",
    "pandas",
    "matplotlib",
    "working",
    "top",
    "numpy",
    "relying",
    "relying",
    "numpy",
    "numeric",
    "processing",
    "numpy",
    "important",
    "least",
    "part",
    "tutorial",
    "numpy",
    "going",
    "divide",
    "pieces",
    "first",
    "one",
    "going",
    "detail",
    "low",
    "level",
    "explanation",
    "numpy",
    "works",
    "need",
    "use",
    "numpy",
    "differences",
    "different",
    "bite",
    "sizes",
    "numbers",
    "going",
    "talk",
    "integers",
    "going",
    "apply",
    "decimals",
    "data",
    "types",
    "also",
    "need",
    "low",
    "level",
    "optimize",
    "us",
    "number",
    "skip",
    "part",
    "going",
    "find",
    "description",
    "tutorial",
    "precise",
    "moment",
    "time",
    "skip",
    "go",
    "directly",
    "second",
    "part",
    "actually",
    "start",
    "using",
    "numpy",
    "show",
    "create",
    "arrays",
    "make",
    "computations",
    "etc",
    "going",
    "divide",
    "two",
    "parts",
    "going",
    "start",
    "first",
    "low",
    "level",
    "explanation",
    "escape",
    "want",
    "going",
    "crucial",
    "easily",
    "use",
    "numpy",
    "without",
    "found",
    "students",
    "important",
    "understand",
    "low",
    "level",
    "basics",
    "especially",
    "computer",
    "science",
    "background",
    "help",
    "get",
    "know",
    "raise",
    "right",
    "level",
    "understanding",
    "computers",
    "make",
    "computations",
    "efficient",
    "worry",
    "want",
    "go",
    "fine",
    "skip",
    "part",
    "come",
    "back",
    "later",
    "moment",
    "need",
    "ease",
    "use",
    "numpy",
    "seriously",
    "need",
    "going",
    "beneficial",
    "absolutely",
    "lead",
    "skip",
    "come",
    "later",
    "said",
    "let",
    "actually",
    "go",
    "deep",
    "understanding",
    "explanation",
    "computers",
    "store",
    "integers",
    "numbers",
    "memory",
    "bytes",
    "bits",
    "etc",
    "order",
    "understand",
    "numpy",
    "important",
    "go",
    "back",
    "basics",
    "numbers",
    "represented",
    "computers",
    "etc",
    "might",
    "know",
    "already",
    "computer",
    "process",
    "ones",
    "zeros",
    "bits",
    "ca",
    "process",
    "numbers",
    "decimal",
    "numbers",
    "correct",
    "sorry",
    "process",
    "ones",
    "zeros",
    "computer",
    "always",
    "storing",
    "processing",
    "ones",
    "zeros",
    "binary",
    "machine",
    "memory",
    "central",
    "place",
    "around",
    "random",
    "access",
    "memory",
    "computer",
    "central",
    "place",
    "computer",
    "storing",
    "data",
    "actively",
    "processing",
    "right",
    "example",
    "hard",
    "drive",
    "stores",
    "long",
    "term",
    "data",
    "computer",
    "process",
    "data",
    "directly",
    "hard",
    "drive",
    "load",
    "ram",
    "random",
    "access",
    "memory",
    "usually",
    "right",
    "computer",
    "going",
    "eight",
    "gigabytes",
    "1632",
    "matter",
    "let",
    "say",
    "eight",
    "gigabytes",
    "memory",
    "point",
    "going",
    "translate",
    "number",
    "bits",
    "computer",
    "store",
    "follow",
    "follow",
    "right",
    "see",
    "total",
    "number",
    "bits",
    "available",
    "regular",
    "computer",
    "eight",
    "gigabytes",
    "memory",
    "important",
    "objective",
    "tutorial",
    "objective",
    "bar",
    "least",
    "explain",
    "squeeze",
    "every",
    "single",
    "bit",
    "computer",
    "right",
    "make",
    "efficient",
    "numeric",
    "processing",
    "storage",
    "use",
    "less",
    "memory",
    "data",
    "also",
    "make",
    "faster",
    "right",
    "calculations",
    "terms",
    "physical",
    "storage",
    "actually",
    "memory",
    "storage",
    "right",
    "make",
    "optimize",
    "use",
    "least",
    "amount",
    "memory",
    "given",
    "problem",
    "objective",
    "optimizing",
    "need",
    "understand",
    "numbers",
    "decimals",
    "sorry",
    "integers",
    "decimal",
    "numeric",
    "system",
    "represented",
    "binary",
    "right",
    "table",
    "right",
    "shows",
    "first",
    "nine",
    "numbers",
    "01234",
    "etc",
    "binary",
    "representation",
    "computer",
    "let",
    "say",
    "want",
    "store",
    "age",
    "user",
    "age",
    "user",
    "ca",
    "store",
    "32",
    "computer",
    "know",
    "decimals",
    "knows",
    "binary",
    "need",
    "find",
    "correct",
    "representation",
    "ones",
    "zeros",
    "right",
    "sorry",
    "two",
    "one",
    "honest",
    "making",
    "go",
    "need",
    "know",
    "correct",
    "binary",
    "representation",
    "number",
    "norther",
    "store",
    "data",
    "know",
    "well",
    "whole",
    "binary",
    "arithmetic",
    "right",
    "whole",
    "part",
    "math",
    "dedicated",
    "binary",
    "matter",
    "going",
    "drive",
    "intuition",
    "better",
    "understanding",
    "interested",
    "dig",
    "deeper",
    "later",
    "basically",
    "decimal",
    "number",
    "needs",
    "stored",
    "binary",
    "format",
    "course",
    "steaks",
    "ones",
    "zeros",
    "usually",
    "keep",
    "increasing",
    "zeros",
    "ones",
    "positions",
    "right",
    "case",
    "number",
    "zero",
    "number",
    "one",
    "fine",
    "need",
    "store",
    "number",
    "two",
    "winning",
    "increase",
    "number",
    "position",
    "right",
    "need",
    "increase",
    "right",
    "need",
    "go",
    "two",
    "one",
    "zero",
    "go",
    "number",
    "three",
    "one",
    "one",
    "need",
    "go",
    "number",
    "four",
    "need",
    "increase",
    "positions",
    "two",
    "symbols",
    "zero",
    "one",
    "seeing",
    "right",
    "level",
    "need",
    "one",
    "position",
    "level",
    "need",
    "two",
    "positions",
    "level",
    "need",
    "three",
    "positions",
    "levels",
    "going",
    "need",
    "four",
    "positions",
    "see",
    "size",
    "increasing",
    "explanation",
    "behind",
    "going",
    "see",
    "second",
    "question",
    "many",
    "decimal",
    "numbers",
    "store",
    "n",
    "bytes",
    "bits",
    "sorry",
    "bits",
    "let",
    "say",
    "n",
    "bits",
    "let",
    "say",
    "n",
    "equals",
    "three",
    "means",
    "three",
    "positions",
    "right",
    "three",
    "bits",
    "many",
    "total",
    "decimal",
    "numbers",
    "store",
    "well",
    "store",
    "000",
    "store",
    "zero",
    "store",
    "100",
    "start",
    "stores",
    "one",
    "zero",
    "right",
    "size",
    "store",
    "store",
    "seven",
    "numbers",
    "111",
    "equals",
    "seven",
    "filled",
    "positions",
    "right",
    "reached",
    "limit",
    "right",
    "largest",
    "number",
    "largest",
    "binary",
    "amount",
    "symbols",
    "positions",
    "number",
    "seven",
    "means",
    "three",
    "numbers",
    "start",
    "zero",
    "zero",
    "zero",
    "one",
    "one",
    "total",
    "store",
    "eight",
    "decimal",
    "numbers",
    "eight",
    "decimal",
    "numbers",
    "012345678",
    "total",
    "decimal",
    "numbers",
    "zero",
    "seven",
    "equation",
    "want",
    "behind",
    "follows",
    "n",
    "equals",
    "three",
    "order",
    "know",
    "many",
    "decimal",
    "numbers",
    "store",
    "bits",
    "two",
    "power",
    "n",
    "case",
    "total",
    "bit",
    "go",
    "back",
    "drawings",
    "said",
    "three",
    "bits",
    "store",
    "eight",
    "decimal",
    "numbers",
    "equation",
    "two",
    "power",
    "n",
    "going",
    "give",
    "many",
    "decimal",
    "numbers",
    "need",
    "always",
    "opposite",
    "process",
    "using",
    "logarithm",
    "get",
    "many",
    "bits",
    "going",
    "need",
    "create",
    "store",
    "given",
    "decimal",
    "number",
    "going",
    "get",
    "complicate",
    "math",
    "behind",
    "extremely",
    "simple",
    "moving",
    "forward",
    "going",
    "delete",
    "whole",
    "thing",
    "moving",
    "forward",
    "important",
    "working",
    "data",
    "data",
    "analysis",
    "know",
    "data",
    "type",
    "data",
    "working",
    "numbers",
    "numbers",
    "usually",
    "connotation",
    "behind",
    "right",
    "let",
    "say",
    "table",
    "people",
    "total",
    "net",
    "worth",
    "person",
    "also",
    "age",
    "person",
    "age",
    "value",
    "range",
    "zero",
    "right",
    "born",
    "know",
    "120",
    "say",
    "know",
    "maximum",
    "age",
    "registered",
    "right",
    "oldest",
    "human",
    "zero",
    "120",
    "seems",
    "seems",
    "reasonable",
    "column",
    "net",
    "worth",
    "person",
    "range",
    "completely",
    "difference",
    "go",
    "something",
    "like",
    "0",
    "know",
    "60",
    "billion",
    "think",
    "mark",
    "zuckerberg",
    "jeff",
    "bezos",
    "one",
    "go",
    "zero",
    "62",
    "billions",
    "case",
    "dollars",
    "happened",
    "highly",
    "devaluated",
    "currency",
    "would",
    "go",
    "trillions",
    "right",
    "two",
    "even",
    "though",
    "plain",
    "numbers",
    "say",
    "integers",
    "even",
    "though",
    "pulling",
    "numbers",
    "integers",
    "different",
    "connotation",
    "need",
    "different",
    "requirements",
    "terms",
    "storage",
    "size",
    "right",
    "say",
    "nh",
    "goes",
    "zero",
    "120",
    "need",
    "many",
    "many",
    "bits",
    "store",
    "memory",
    "right",
    "math",
    "actually",
    "many",
    "bits",
    "need",
    "order",
    "store",
    "120",
    "100",
    "say",
    "right",
    "well",
    "math",
    "see",
    "two",
    "power",
    "two",
    "power",
    "seven",
    "seven",
    "bits",
    "seven",
    "bits",
    "going",
    "store",
    "zero",
    "1111111",
    "actually",
    "okay",
    "number",
    "ones",
    "seven",
    "ones",
    "binary",
    "equals",
    "decimal",
    "total",
    "store",
    "128",
    "numbers",
    "00",
    "matters",
    "means",
    "column",
    "right",
    "column",
    "age",
    "age",
    "use",
    "size",
    "men",
    "need",
    "use",
    "going",
    "seven",
    "bits",
    "per",
    "user",
    "costumer",
    "person",
    "whatever",
    "number",
    "right",
    "go",
    "couple",
    "billions",
    "well",
    "case",
    "numbers",
    "little",
    "bit",
    "complicated",
    "going",
    "need",
    "example",
    "say",
    "64",
    "actually",
    "64",
    "probably",
    "32",
    "bits",
    "right",
    "store",
    "zero",
    "volume",
    "know",
    "currency",
    "using",
    "anything",
    "assume",
    "need",
    "32",
    "bits",
    "order",
    "store",
    "math",
    "many",
    "much",
    "memory",
    "space",
    "need",
    "order",
    "process",
    "data",
    "many",
    "records",
    "1000",
    "records",
    "significant",
    "use",
    "whatever",
    "use",
    "64",
    "bits",
    "store",
    "age",
    "going",
    "problem",
    "happens",
    "happens",
    "happens",
    "entire",
    "population",
    "earth",
    "7",
    "billion",
    "records",
    "7",
    "billion",
    "records",
    "every",
    "bit",
    "saving",
    "columns",
    "going",
    "important",
    "going",
    "take",
    "ton",
    "data",
    "course",
    "ton",
    "columns",
    "right",
    "happens",
    "processing",
    "trillions",
    "records",
    "financial",
    "transactions",
    "right",
    "want",
    "want",
    "efficient",
    "optimize",
    "every",
    "single",
    "bit",
    "ca",
    "means",
    "selecting",
    "correct",
    "number",
    "bit",
    "per",
    "columns",
    "currently",
    "processing",
    "far",
    "good",
    "10",
    "number",
    "decimal",
    "need",
    "store",
    "correspondence",
    "emits",
    "right",
    "eight",
    "bits",
    "one",
    "byte",
    "optimize",
    "less",
    "memory",
    "going",
    "use",
    "obligations",
    "numpy",
    "come",
    "place",
    "talking",
    "data",
    "numpy",
    "lessons",
    "well",
    "right",
    "idea",
    "numpy",
    "library",
    "lead",
    "advanced",
    "numeric",
    "processing",
    "order",
    "let",
    "select",
    "number",
    "bits",
    "want",
    "take",
    "integer",
    "even",
    "let",
    "say",
    "forget",
    "numpy",
    "want",
    "process",
    "thing",
    "pure",
    "python",
    "x",
    "equals",
    "five",
    "example",
    "working",
    "python",
    "create",
    "number",
    "storing",
    "age",
    "five",
    "many",
    "bytes",
    "many",
    "bits",
    "think",
    "simple",
    "variable",
    "takes",
    "memory",
    "many",
    "well",
    "reality",
    "even",
    "though",
    "think",
    "around",
    "three",
    "three",
    "bits",
    "eight",
    "let",
    "say",
    "simple",
    "simplistic",
    "reality",
    "python",
    "going",
    "take",
    "around",
    "20",
    "bytes",
    "okay",
    "wasting",
    "ton",
    "memory",
    "order",
    "store",
    "number",
    "well",
    "python",
    "high",
    "level",
    "object",
    "oriented",
    "programming",
    "language",
    "reasoning",
    "behind",
    "python",
    "simple",
    "write",
    "write",
    "simple",
    "also",
    "read",
    "code",
    "top",
    "order",
    "create",
    "simplicity",
    "syrup",
    "numbers",
    "objects",
    "attributes",
    "know",
    "advanced",
    "python",
    "going",
    "recognize",
    "necessary",
    "taking",
    "ton",
    "memory",
    "regular",
    "simple",
    "number",
    "python",
    "ends",
    "consuming",
    "100",
    "times",
    "memory",
    "consumed",
    "one",
    "numpy",
    "comes",
    "place",
    "numpy",
    "create",
    "numbers",
    "example",
    "control",
    "size",
    "terms",
    "bits",
    "say",
    "want",
    "create",
    "number",
    "eight",
    "bits",
    "going",
    "create",
    "one",
    "byte",
    "integer",
    "precise",
    "much",
    "memory",
    "takes",
    "create",
    "number",
    "actually",
    "need",
    "little",
    "bit",
    "space",
    "going",
    "np",
    "int",
    "hear",
    "us",
    "talkie",
    "going",
    "get",
    "auto",
    "completion",
    "6016",
    "bit",
    "eight",
    "32",
    "64",
    "right",
    "actually",
    "lot",
    "precise",
    "number",
    "bits",
    "need",
    "extremely",
    "important",
    "high",
    "level",
    "processing",
    "top",
    "numpy",
    "array",
    "processing",
    "library",
    "numpy",
    "99",
    "processing",
    "race",
    "constantly",
    "processing",
    "erase",
    "data",
    "structures",
    "python",
    "built",
    "data",
    "structures",
    "python",
    "example",
    "list",
    "dictionary",
    "optimized",
    "high",
    "level",
    "computing",
    "list",
    "numbers",
    "python",
    "let",
    "say",
    "know",
    "l",
    "equals",
    "3224",
    "right",
    "three",
    "numbers",
    "list",
    "python",
    "guaranteed",
    "least",
    "list",
    "gon",
    "na",
    "contain",
    "numbers",
    "three",
    "four",
    "contiguous",
    "positions",
    "gon",
    "na",
    "might",
    "put",
    "separate",
    "positions",
    "memory",
    "top",
    "ca",
    "rely",
    "advanced",
    "cpu",
    "directives",
    "instructions",
    "processing",
    "matrix",
    "matrices",
    "sorry",
    "python",
    "wrapping",
    "things",
    "objects",
    "access",
    "high",
    "performance",
    "low",
    "level",
    "instructions",
    "numpy",
    "changes",
    "create",
    "array",
    "numpy",
    "say",
    "want",
    "create",
    "array",
    "three",
    "numbers",
    "eight",
    "imposition",
    "forget",
    "bytes",
    "using",
    "drawing",
    "general",
    "representation",
    "memory",
    "case",
    "numpy",
    "create",
    "three",
    "element",
    "int",
    "eight",
    "array",
    "going",
    "create",
    "three",
    "elements",
    "contiguous",
    "positions",
    "memory",
    "three",
    "four",
    "going",
    "take",
    "amount",
    "memory",
    "police",
    "said",
    "going",
    "take",
    "top",
    "rely",
    "bunch",
    "efficient",
    "low",
    "level",
    "instructions",
    "cpu",
    "matrix",
    "matrix",
    "calculation",
    "something",
    "little",
    "bit",
    "advanced",
    "something",
    "exploded",
    "past",
    "10",
    "years",
    "cpus",
    "richer",
    "instruction",
    "sets",
    "thing",
    "gpus",
    "might",
    "heard",
    "especially",
    "machine",
    "learning",
    "need",
    "need",
    "fast",
    "array",
    "processing",
    "storing",
    "features",
    "weights",
    "topic",
    "different",
    "story",
    "idea",
    "need",
    "right",
    "ton",
    "week",
    "sorry",
    "use",
    "important",
    "efficient",
    "low",
    "level",
    "directives",
    "cpu",
    "makes",
    "computations",
    "lot",
    "faster",
    "recap",
    "need",
    "know",
    "work",
    "numpy",
    "first",
    "thing",
    "second",
    "need",
    "get",
    "extremely",
    "extremely",
    "conscious",
    "numbers",
    "use",
    "beginning",
    "going",
    "use",
    "numpy",
    "going",
    "use",
    "default",
    "types",
    "picks",
    "38",
    "cents",
    "64",
    "fine",
    "get",
    "bottlenecks",
    "working",
    "larger",
    "amount",
    "amount",
    "data",
    "might",
    "need",
    "get",
    "details",
    "size",
    "integers",
    "using",
    "applies",
    "float",
    "using",
    "integers",
    "simpler",
    "applies",
    "floats",
    "numpy",
    "main",
    "advantage",
    "built",
    "fast",
    "raised",
    "kit",
    "take",
    "advantage",
    "cpu",
    "instructions",
    "matrices",
    "arrays",
    "also",
    "efficient",
    "representations",
    "numbers",
    "right",
    "regular",
    "objects",
    "python",
    "recap",
    "need",
    "list",
    "want",
    "get",
    "details",
    "recommend",
    "get",
    "little",
    "bit",
    "understanding",
    "binary",
    "arithmetic",
    "numbers",
    "uncomputable",
    "architecture",
    "numbers",
    "stored",
    "memory",
    "etc",
    "especially",
    "floats",
    "completely",
    "different",
    "representations",
    "said",
    "going",
    "see",
    "actually",
    "use",
    "numpy",
    "without",
    "worrying",
    "much",
    "low",
    "level",
    "details",
    "beauty",
    "numpy",
    "already",
    "done",
    "low",
    "level",
    "explanation",
    "binary",
    "arithmetic",
    "unknown",
    "vice",
    "important",
    "skipped",
    "perfectly",
    "fine",
    "need",
    "reasoning",
    "include",
    "tutorial",
    "probably",
    "looking",
    "fast",
    "efficient",
    "options",
    "process",
    "large",
    "volumes",
    "data",
    "things",
    "come",
    "play",
    "let",
    "without",
    "ado",
    "let",
    "get",
    "started",
    "start",
    "using",
    "numpy",
    "library",
    "told",
    "numpy",
    "simple",
    "library",
    "array",
    "processing",
    "numeric",
    "powers",
    "sing",
    "objects",
    "numbers",
    "floats",
    "integer",
    "floats",
    "arrays",
    "simple",
    "extremely",
    "powerful",
    "numpy",
    "going",
    "create",
    "arrays",
    "look",
    "lot",
    "like",
    "python",
    "lists",
    "going",
    "significant",
    "differences",
    "first",
    "one",
    "course",
    "performance",
    "go",
    "previous",
    "part",
    "discussing",
    "binary",
    "representation",
    "array",
    "numbers",
    "python",
    "numpy",
    "going",
    "see",
    "difference",
    "case",
    "creating",
    "two",
    "arrays",
    "see",
    "right",
    "creation",
    "extremely",
    "simple",
    "thing",
    "changes",
    "need",
    "add",
    "np",
    "dot",
    "array",
    "passing",
    "case",
    "list",
    "numbers",
    "something",
    "usually",
    "reading",
    "external",
    "sources",
    "access",
    "individual",
    "elements",
    "numpy",
    "array",
    "works",
    "way",
    "python",
    "list",
    "say",
    "give",
    "first",
    "element",
    "give",
    "second",
    "element",
    "zero",
    "index",
    "like",
    "python",
    "list",
    "slicing",
    "works",
    "way",
    "case",
    "zero",
    "something",
    "one",
    "three",
    "rights",
    "getting",
    "low",
    "level",
    "right",
    "high",
    "level",
    "index",
    "negative",
    "indexing",
    "steps",
    "work",
    "way",
    "python",
    "list",
    "know",
    "use",
    "python",
    "list",
    "know",
    "use",
    "numpy",
    "array",
    "one",
    "new",
    "thing",
    "right",
    "differently",
    "python",
    "list",
    "called",
    "multi",
    "indexing",
    "let",
    "say",
    "array",
    "case",
    "b",
    "need",
    "extract",
    "three",
    "elements",
    "need",
    "element",
    "first",
    "position",
    "third",
    "position",
    "last",
    "position",
    "type",
    "b",
    "zero",
    "b",
    "b",
    "minus",
    "one",
    "works",
    "also",
    "works",
    "list",
    "use",
    "mod",
    "indexing",
    "b",
    "want",
    "select",
    "elements",
    "zero",
    "n",
    "minus",
    "one",
    "first",
    "element",
    "third",
    "element",
    "last",
    "element",
    "right",
    "pass",
    "int",
    "another",
    "list",
    "containing",
    "indices",
    "elements",
    "want",
    "select",
    "case",
    "important",
    "part",
    "result",
    "another",
    "numpy",
    "array",
    "individual",
    "elements",
    "creating",
    "another",
    "numpy",
    "array",
    "processing",
    "gon",
    "na",
    "lot",
    "faster",
    "arrays",
    "types",
    "associated",
    "related",
    "speaking",
    "numpy",
    "array",
    "continuous",
    "continuously",
    "assigning",
    "memory",
    "numpy",
    "library",
    "needs",
    "know",
    "type",
    "object",
    "storing",
    "ca",
    "know",
    "anything",
    "string",
    "number",
    "within",
    "able",
    "provide",
    "performance",
    "optimizations",
    "arrays",
    "non",
    "consistence",
    "insights",
    "example",
    "create",
    "arrays",
    "injures",
    "default",
    "numpy",
    "selected",
    "64",
    "platform",
    "64",
    "bit",
    "platform",
    "tune",
    "select",
    "us",
    "going",
    "see",
    "sizes",
    "second",
    "created",
    "array",
    "b",
    "contain",
    "decimals",
    "floats",
    "assign",
    "different",
    "type",
    "float",
    "default",
    "type",
    "always",
    "six",
    "least",
    "platform",
    "64",
    "bits",
    "going",
    "float",
    "64",
    "integer",
    "always",
    "change",
    "say",
    "actually",
    "want",
    "even",
    "though",
    "integers",
    "want",
    "create",
    "using",
    "float",
    "type",
    "saw",
    "previous",
    "video",
    "say",
    "actually",
    "type",
    "integer",
    "smaller",
    "integers",
    "performance",
    "performance",
    "better",
    "performance",
    "alright",
    "moving",
    "forward",
    "also",
    "going",
    "see",
    "types",
    "like",
    "example",
    "strings",
    "regular",
    "objects",
    "going",
    "see",
    "point",
    "storing",
    "things",
    "numpy",
    "numpy",
    "stores",
    "numbers",
    "date",
    "booleans",
    "regular",
    "individual",
    "objects",
    "seeing",
    "right",
    "way",
    "store",
    "strings",
    "perfectly",
    "valid",
    "time",
    "type",
    "sorry",
    "related",
    "unicode",
    "representation",
    "memory",
    "etc",
    "numpy",
    "usually",
    "used",
    "numeric",
    "processing",
    "idea",
    "numpy",
    "arrays",
    "create",
    "multi",
    "dimensional",
    "arrays",
    "create",
    "created",
    "one",
    "dimensional",
    "array",
    "right",
    "one",
    "dimension",
    "create",
    "matrices",
    "case",
    "two",
    "dimensional",
    "two",
    "rows",
    "three",
    "columns",
    "numpy",
    "ton",
    "attributes",
    "functions",
    "work",
    "multi",
    "dimensional",
    "arrays",
    "first",
    "thing",
    "going",
    "see",
    "shape",
    "array",
    "two",
    "rows",
    "three",
    "columns",
    "many",
    "dimensions",
    "one",
    "vertical",
    "one",
    "horizontal",
    "two",
    "dimensions",
    "total",
    "size",
    "array",
    "case",
    "total",
    "size",
    "six",
    "total",
    "number",
    "elements",
    "let",
    "go",
    "one",
    "dimension",
    "let",
    "create",
    "three",
    "dimensional",
    "object",
    "three",
    "dimensional",
    "array",
    "basically",
    "cube",
    "case",
    "b",
    "shape",
    "two",
    "two",
    "three",
    "number",
    "dimensions",
    "three",
    "size",
    "total",
    "count",
    "elements",
    "12",
    "always",
    "careful",
    "creating",
    "multi",
    "multi",
    "dimensional",
    "arrays",
    "dimension",
    "dimensions",
    "much",
    "like",
    "case",
    "right",
    "second",
    "list",
    "one",
    "less",
    "bits",
    "dimensions",
    "match",
    "tape",
    "use",
    "sorry",
    "array",
    "type",
    "objects",
    "shape",
    "two",
    "two",
    "elements",
    "one",
    "element",
    "another",
    "element",
    "case",
    "done",
    "done",
    "wrong",
    "basically",
    "careful",
    "creating",
    "objects",
    "hand",
    "index",
    "slice",
    "matrices",
    "done",
    "one",
    "dimensional",
    "array",
    "selecting",
    "elements",
    "individual",
    "elements",
    "give",
    "first",
    "element",
    "give",
    "second",
    "element",
    "cetera",
    "matrix",
    "matrix",
    "going",
    "going",
    "similar",
    "difference",
    "account",
    "multiple",
    "dimensions",
    "give",
    "one",
    "column",
    "add",
    "one",
    "row",
    "one",
    "well",
    "see",
    "row",
    "going",
    "right",
    "right",
    "also",
    "another",
    "dimension",
    "right",
    "terms",
    "index",
    "index",
    "positions",
    "slicing",
    "get",
    "first",
    "element",
    "first",
    "element",
    "second",
    "rope",
    "case",
    "going",
    "first",
    "select",
    "first",
    "row",
    "sorry",
    "second",
    "row",
    "select",
    "first",
    "element",
    "get",
    "number",
    "four",
    "better",
    "way",
    "using",
    "multi",
    "dimensional",
    "selection",
    "numpy",
    "case",
    "going",
    "say",
    "matrix",
    "want",
    "select",
    "going",
    "pass",
    "case",
    "going",
    "pass",
    "dimension",
    "one",
    "dimension",
    "dimension",
    "three",
    "dimension",
    "four",
    "etc",
    "right",
    "selectors",
    "one",
    "dimensions",
    "passing",
    "case",
    "say",
    "row",
    "level",
    "one",
    "element",
    "position",
    "one",
    "second",
    "element",
    "column",
    "level",
    "want",
    "first",
    "element",
    "thing",
    "advantage",
    "index",
    "keeping",
    "mind",
    "remaining",
    "also",
    "let",
    "add",
    "slicing",
    "right",
    "say",
    "want",
    "select",
    "every",
    "thing",
    "dimension",
    "one",
    "rows",
    "case",
    "say",
    "zero",
    "two",
    "two",
    "ones",
    "two",
    "included",
    "upper",
    "limit",
    "python",
    "also",
    "pass",
    "dimensions",
    "say",
    "want",
    "select",
    "every",
    "row",
    "fine",
    "want",
    "select",
    "column",
    "level",
    "want",
    "select",
    "elements",
    "two",
    "two",
    "two",
    "two",
    "right",
    "works",
    "intuitive",
    "gets",
    "remember",
    "syntax",
    "important",
    "need",
    "keep",
    "mind",
    "moving",
    "forward",
    "modification",
    "say",
    "want",
    "assign",
    "new",
    "array",
    "entire",
    "row",
    "right",
    "dimensions",
    "match",
    "going",
    "work",
    "10",
    "equals",
    "added",
    "second",
    "row",
    "use",
    "call",
    "usually",
    "expand",
    "operation",
    "going",
    "say",
    "row",
    "number",
    "two",
    "want",
    "assign",
    "number",
    "99",
    "numpy",
    "going",
    "take",
    "care",
    "expanding",
    "corresponding",
    "array",
    "given",
    "number",
    "dimensions",
    "far",
    "selection",
    "simple",
    "going",
    "see",
    "also",
    "numpy",
    "huge",
    "advantage",
    "containing",
    "ton",
    "operations",
    "perform",
    "top",
    "arrays",
    "matrices",
    "multi",
    "dimensional",
    "arrays",
    "general",
    "first",
    "one",
    "summers",
    "basic",
    "methods",
    "given",
    "array",
    "methods",
    "already",
    "built",
    "sum",
    "mean",
    "average",
    "right",
    "standard",
    "deviation",
    "variance",
    "etc",
    "also",
    "works",
    "matrices",
    "case",
    "get",
    "sum",
    "mean",
    "standard",
    "deviation",
    "per",
    "axis",
    "useful",
    "get",
    "let",
    "compare",
    "two",
    "go",
    "get",
    "first",
    "column",
    "second",
    "column",
    "third",
    "column",
    "get",
    "first",
    "row",
    "second",
    "row",
    "third",
    "row",
    "either",
    "dimension",
    "dimension",
    "one",
    "vertical",
    "dimension",
    "x",
    "equals",
    "one",
    "right",
    "per",
    "row",
    "per",
    "column",
    "dimensions",
    "keep",
    "increasing",
    "number",
    "answers",
    "going",
    "work",
    "expected",
    "broadcasting",
    "vectorized",
    "operations",
    "fundamental",
    "topic",
    "going",
    "talk",
    "going",
    "extremely",
    "related",
    "boolean",
    "arrays",
    "new",
    "things",
    "keep",
    "mind",
    "working",
    "numpy",
    "going",
    "talk",
    "vectorized",
    "operations",
    "broadcasting",
    "counterintuitive",
    "topic",
    "beginning",
    "going",
    "understand",
    "much",
    "sense",
    "makes",
    "one",
    "fundamental",
    "pieces",
    "numpy",
    "seen",
    "numpy",
    "works",
    "general",
    "way",
    "saw",
    "multi",
    "dimensional",
    "arrays",
    "advantages",
    "might",
    "thinking",
    "mean",
    "need",
    "another",
    "library",
    "complete",
    "summer",
    "domain",
    "show",
    "vectorized",
    "operations",
    "broadcasting",
    "part",
    "going",
    "make",
    "little",
    "bit",
    "sense",
    "numpy",
    "important",
    "get",
    "started",
    "going",
    "array",
    "right",
    "simple",
    "array",
    "vectorize",
    "vectorized",
    "operations",
    "operations",
    "performed",
    "arrays",
    "arrays",
    "arrays",
    "scalars",
    "like",
    "case",
    "right",
    "extremely",
    "fast",
    "optimized",
    "extremely",
    "fast",
    "case",
    "going",
    "going",
    "sum",
    "entire",
    "array",
    "plus",
    "means",
    "going",
    "see",
    "example",
    "happens",
    "without",
    "python",
    "means",
    "let",
    "show",
    "results",
    "one",
    "elements",
    "within",
    "array",
    "applied",
    "operation",
    "usually",
    "concept",
    "vectorizing",
    "operation",
    "number",
    "operation",
    "applied",
    "one",
    "elements",
    "actually",
    "one",
    "right",
    "result",
    "new",
    "array",
    "operation",
    "expressed",
    "array",
    "level",
    "right",
    "say",
    "plus",
    "internally",
    "broadcast",
    "said",
    "one",
    "individual",
    "elements",
    "within",
    "array",
    "gives",
    "plus",
    "10",
    "well",
    "times",
    "10",
    "example",
    "also",
    "case",
    "playing",
    "times",
    "10",
    "operations",
    "one",
    "elements",
    "array",
    "resulting",
    "new",
    "array",
    "result",
    "operation",
    "resulting",
    "new",
    "array",
    "important",
    "going",
    "see",
    "numpy",
    "immutable",
    "first",
    "library",
    "operation",
    "performing",
    "array",
    "modify",
    "return",
    "new",
    "array",
    "check",
    "status",
    "going",
    "see",
    "elements",
    "never",
    "changed",
    "creating",
    "new",
    "array",
    "returning",
    "ways",
    "override",
    "behavior",
    "want",
    "operations",
    "performing",
    "way",
    "always",
    "interface",
    "plus",
    "equals",
    "minus",
    "equals",
    "times",
    "equals",
    "etc",
    "indeed",
    "modify",
    "rights",
    "case",
    "making",
    "broadcasting",
    "operation",
    "adding",
    "100",
    "one",
    "elements",
    "array",
    "operation",
    "immutable",
    "modified",
    "returned",
    "new",
    "operation",
    "remember",
    "pure",
    "python",
    "skills",
    "write",
    "correspondence",
    "vectorized",
    "operations",
    "list",
    "comprehensions",
    "expressing",
    "operation",
    "one",
    "elements",
    "collection",
    "right",
    "list",
    "comprehension",
    "pretty",
    "similar",
    "numpy",
    "main",
    "difference",
    "optimized",
    "extreme",
    "extremely",
    "fast",
    "operations",
    "vectorized",
    "operations",
    "reduced",
    "broadcasting",
    "need",
    "arrays",
    "scalars",
    "arrays",
    "arrays",
    "case",
    "b",
    "showing",
    "right",
    "something",
    "like",
    "plus",
    "saying",
    "correspondence",
    "right",
    "zero",
    "plus",
    "10",
    "one",
    "plus",
    "10",
    "two",
    "plus",
    "10",
    "right",
    "let",
    "let",
    "way",
    "110",
    "210",
    "go",
    "result",
    "get",
    "right",
    "work",
    "course",
    "need",
    "arrays",
    "online",
    "shape",
    "work",
    "operation",
    "extremely",
    "fast",
    "memory",
    "aligned",
    "vectorized",
    "operations",
    "seen",
    "far",
    "topic",
    "vectorize",
    "operations",
    "important",
    "well",
    "following",
    "bull",
    "race",
    "important",
    "thing",
    "completely",
    "get",
    "asked",
    "please",
    "go",
    "check",
    "exercises",
    "lesson",
    "gon",
    "na",
    "use",
    "ton",
    "gon",
    "na",
    "gon",
    "na",
    "see",
    "pan",
    "syntax",
    "primitives",
    "boolean",
    "arrays",
    "play",
    "apply",
    "going",
    "use",
    "things",
    "boolean",
    "arrays",
    "similar",
    "vectorize",
    "operations",
    "well",
    "operations",
    "performed",
    "arithmetic",
    "operations",
    "mathematical",
    "operations",
    "plus",
    "something",
    "times",
    "something",
    "etc",
    "look",
    "operators",
    "programming",
    "language",
    "mathematical",
    "operators",
    "like",
    "plus",
    "minus",
    "times",
    "also",
    "boolean",
    "operators",
    "question",
    "going",
    "happens",
    "apply",
    "boolean",
    "operations",
    "apply",
    "boolean",
    "operators",
    "given",
    "right",
    "ways",
    "select",
    "different",
    "numbers",
    "example",
    "case",
    "need",
    "first",
    "last",
    "element",
    "zero",
    "minus",
    "one",
    "way",
    "saw",
    "numpy",
    "also",
    "saw",
    "traditional",
    "python",
    "one",
    "right",
    "say",
    "zero",
    "also",
    "want",
    "get",
    "minus",
    "one",
    "first",
    "first",
    "way",
    "selecting",
    "elements",
    "know",
    "second",
    "way",
    "multi",
    "index",
    "selection",
    "third",
    "way",
    "new",
    "boolean",
    "arrays",
    "right",
    "case",
    "gon",
    "na",
    "say",
    "want",
    "select",
    "elements",
    "order",
    "right",
    "gon",
    "na",
    "pass",
    "either",
    "true",
    "false",
    "want",
    "actually",
    "select",
    "element",
    "right",
    "four",
    "elements",
    "pass",
    "four",
    "boolean",
    "values",
    "saying",
    "want",
    "select",
    "element",
    "want",
    "select",
    "ones",
    "mean",
    "want",
    "like",
    "element",
    "want",
    "select",
    "element",
    "right",
    "want",
    "first",
    "one",
    "last",
    "one",
    "result",
    "far",
    "nothing",
    "terribly",
    "new",
    "right",
    "new",
    "extremely",
    "complicated",
    "showing",
    "brand",
    "new",
    "way",
    "selecting",
    "data",
    "select",
    "regular",
    "python",
    "multi",
    "index",
    "boolean",
    "array",
    "might",
    "thinking",
    "well",
    "manually",
    "write",
    "true",
    "false",
    "false",
    "true",
    "true",
    "false",
    "know",
    "many",
    "records",
    "million",
    "records",
    "scalable",
    "right",
    "say",
    "write",
    "strong",
    "forces",
    "actually",
    "important",
    "arrays",
    "ones",
    "result",
    "broadcasting",
    "boolean",
    "operations",
    "saw",
    "regular",
    "arithmetic",
    "operation",
    "like",
    "also",
    "boolean",
    "operations",
    "happens",
    "ask",
    "greater",
    "equals",
    "number",
    "two",
    "right",
    "array",
    "right",
    "0123",
    "result",
    "false",
    "zero",
    "false",
    "one",
    "greater",
    "equal",
    "true",
    "number",
    "two",
    "course",
    "two",
    "untrue",
    "number",
    "three",
    "individual",
    "elements",
    "match",
    "condition",
    "true",
    "false",
    "cases",
    "power",
    "boolean",
    "arrays",
    "able",
    "combine",
    "operations",
    "greater",
    "equals",
    "two",
    "right",
    "equals",
    "greater",
    "equals",
    "number",
    "two",
    "advantage",
    "filtering",
    "filtering",
    "numeric",
    "arrays",
    "quickly",
    "familiar",
    "syntax",
    "greater",
    "equals",
    "provide",
    "index",
    "operation",
    "pretty",
    "much",
    "happening",
    "right",
    "saying",
    "use",
    "boolean",
    "array",
    "willing",
    "list",
    "right",
    "python",
    "list",
    "boolean",
    "filter",
    "sorry",
    "select",
    "elements",
    "based",
    "question",
    "construct",
    "list",
    "boolean",
    "well",
    "case",
    "constructed",
    "including",
    "predicate",
    "including",
    "condition",
    "needs",
    "matched",
    "result",
    "filtering",
    "query",
    "method",
    "looking",
    "looking",
    "data",
    "saying",
    "give",
    "elements",
    "match",
    "condition",
    "say",
    "example",
    "values",
    "course",
    "calculated",
    "say",
    "give",
    "elements",
    "greater",
    "mean",
    "actually",
    "provide",
    "boolean",
    "appraiser",
    "operators",
    "like",
    "example",
    "elements",
    "greater",
    "mean",
    "means",
    "less",
    "equals",
    "mean",
    "also",
    "include",
    "boolean",
    "operators",
    "like",
    "n",
    "numpy",
    "expressed",
    "pipe",
    "ampersand",
    "ampersand",
    "ca",
    "use",
    "regular",
    "python",
    "good",
    "choice",
    "selected",
    "concept",
    "boolean",
    "arrays",
    "going",
    "construct",
    "arrays",
    "artist",
    "boolean",
    "representations",
    "booleans",
    "based",
    "conditions",
    "right",
    "matrix",
    "gon",
    "na",
    "say",
    "want",
    "select",
    "one",
    "one",
    "end",
    "one",
    "etc",
    "case",
    "result",
    "right",
    "result",
    "generate",
    "dynamic",
    "boolean",
    "array",
    "never",
    "manually",
    "type",
    "right",
    "sit",
    "say",
    "true",
    "false",
    "false",
    "etc",
    "run",
    "query",
    "filtering",
    "option",
    "boolean",
    "operation",
    "results",
    "boolean",
    "array",
    "use",
    "filtering",
    "idea",
    "operations",
    "saw",
    "broadcasting",
    "timestamp",
    "also",
    "defined",
    "boolean",
    "operators",
    "boolean",
    "operators",
    "return",
    "boolean",
    "race",
    "used",
    "filtering",
    "idea",
    "even",
    "combine",
    "operations",
    "say",
    "equals",
    "zero",
    "equals",
    "one",
    "less",
    "equal",
    "two",
    "also",
    "divisible",
    "zero",
    "combine",
    "queries",
    "looks",
    "lot",
    "powerful",
    "moving",
    "forward",
    "talking",
    "linear",
    "algebra",
    "quickly",
    "approaching",
    "end",
    "numpy",
    "lesson",
    "part",
    "important",
    "part",
    "linear",
    "algebra",
    "numpy",
    "already",
    "contains",
    "important",
    "operations",
    "already",
    "optimized",
    "low",
    "level",
    "semantics",
    "going",
    "extremely",
    "fast",
    "adult",
    "product",
    "cross",
    "products",
    "transposing",
    "majors",
    "works",
    "expected",
    "might",
    "important",
    "specially",
    "example",
    "machine",
    "learning",
    "etc",
    "extremely",
    "important",
    "finally",
    "wrap",
    "saw",
    "binary",
    "explanation",
    "beginning",
    "might",
    "escaped",
    "difference",
    "sizes",
    "numpy",
    "python",
    "differences",
    "terms",
    "performance",
    "python",
    "regular",
    "number",
    "regular",
    "engine",
    "python",
    "total",
    "size",
    "28",
    "bytes",
    "order",
    "let",
    "thing",
    "second",
    "total",
    "number",
    "bytes",
    "bits",
    "bytes",
    "need",
    "python",
    "store",
    "simple",
    "number",
    "number",
    "one",
    "28",
    "unit",
    "28",
    "bytes",
    "store",
    "number",
    "one",
    "extremely",
    "super",
    "space",
    "consuming",
    "right",
    "efficient",
    "larger",
    "numbers",
    "even",
    "take",
    "bytes",
    "store",
    "size",
    "integers",
    "well",
    "seen",
    "example",
    "create",
    "integers",
    "eight",
    "bytes",
    "create",
    "integers",
    "one",
    "byte",
    "right",
    "something",
    "like",
    "eight",
    "already",
    "know",
    "many",
    "bytes",
    "one",
    "byte",
    "right",
    "control",
    "many",
    "bytes",
    "bits",
    "write",
    "numbers",
    "take",
    "see",
    "difference",
    "size",
    "integer",
    "python",
    "extremely",
    "large",
    "28",
    "byte",
    "numpy",
    "also",
    "difference",
    "performance",
    "let",
    "say",
    "example",
    "want",
    "ultimate",
    "difference",
    "size",
    "lists",
    "also",
    "significant",
    "want",
    "focus",
    "performance",
    "two",
    "elements",
    "two",
    "one",
    "list",
    "first",
    "1000",
    "numbers",
    "numpy",
    "array",
    "first",
    "1000",
    "numbers",
    "going",
    "perform",
    "operation",
    "let",
    "use",
    "python",
    "one",
    "first",
    "going",
    "python",
    "one",
    "first",
    "case",
    "squaring",
    "elements",
    "list",
    "okay",
    "elements",
    "squared",
    "summing",
    "operations",
    "might",
    "express",
    "saying",
    "create",
    "new",
    "list",
    "x",
    "times",
    "x",
    "sorry",
    "squared",
    "4x",
    "nl",
    "everything",
    "much",
    "time",
    "takes",
    "321",
    "microseconds",
    "gon",
    "na",
    "thing",
    "numpy",
    "gon",
    "na",
    "say",
    "np",
    "dot",
    "sum",
    "square",
    "gon",
    "na",
    "see",
    "lot",
    "faster",
    "numpy",
    "perspective",
    "python",
    "perspective",
    "tiny",
    "tiny",
    "operations",
    "small",
    "numbers",
    "happens",
    "add",
    "numbers",
    "let",
    "add",
    "two",
    "numbers",
    "odd",
    "two",
    "numbers",
    "going",
    "two",
    "operations",
    "see",
    "units",
    "even",
    "changed",
    "still",
    "microsecond",
    "layer",
    "numpy",
    "gone",
    "millisecond",
    "layer",
    "python",
    "size",
    "objects",
    "increase",
    "numpy",
    "prove",
    "extremely",
    "fast",
    "compared",
    "python",
    "functions",
    "see",
    "example",
    "extracting",
    "normal",
    "random",
    "numbers",
    "etc",
    "going",
    "live",
    "let",
    "look",
    "interested",
    "remember",
    "exercises",
    "help",
    "solidify",
    "concepts",
    "discussed",
    "going",
    "move",
    "forward",
    "work",
    "pandas",
    "going",
    "see",
    "also",
    "visualizations",
    "gon",
    "na",
    "keep",
    "moving",
    "forward",
    "data",
    "analysis",
    "python",
    "tutorial",
    "finally",
    "time",
    "talk",
    "pandas",
    "important",
    "library",
    "use",
    "data",
    "analysis",
    "day",
    "day",
    "basis",
    "python",
    "library",
    "aid",
    "entire",
    "process",
    "data",
    "analysis",
    "project",
    "going",
    "start",
    "getting",
    "data",
    "step",
    "one",
    "getting",
    "data",
    "multiple",
    "sources",
    "like",
    "databases",
    "excel",
    "files",
    "csv",
    "files",
    "etc",
    "gon",
    "na",
    "get",
    "pandas",
    "going",
    "processing",
    "data",
    "right",
    "going",
    "combining",
    "merging",
    "different",
    "types",
    "analysis",
    "going",
    "visualizing",
    "data",
    "right",
    "bar",
    "chart",
    "going",
    "visualizing",
    "data",
    "pandas",
    "going",
    "creating",
    "reports",
    "going",
    "also",
    "simple",
    "statistical",
    "analysis",
    "going",
    "machine",
    "learning",
    "close",
    "help",
    "libraries",
    "everything",
    "platform",
    "provides",
    "pandas",
    "library",
    "one",
    "important",
    "libraries",
    "data",
    "analysis",
    "data",
    "science",
    "ecosystem",
    "python",
    "pandas",
    "recently",
    "released",
    "version",
    "talking",
    "mature",
    "library",
    "around",
    "long",
    "time",
    "primary",
    "library",
    "use",
    "python",
    "data",
    "analysis",
    "data",
    "science",
    "going",
    "quick",
    "introduction",
    "data",
    "structures",
    "pandas",
    "house",
    "gon",
    "na",
    "understand",
    "work",
    "start",
    "building",
    "right",
    "phone",
    "gon",
    "na",
    "start",
    "building",
    "foundations",
    "need",
    "familiar",
    "way",
    "data",
    "structures",
    "pandas",
    "processed",
    "going",
    "move",
    "things",
    "like",
    "reading",
    "files",
    "grouping",
    "data",
    "etc",
    "get",
    "things",
    "started",
    "going",
    "talk",
    "first",
    "data",
    "structure",
    "pandas",
    "house",
    "series",
    "reality",
    "pandas",
    "two",
    "main",
    "data",
    "structures",
    "uses",
    "time",
    "series",
    "data",
    "frame",
    "data",
    "frame",
    "one",
    "probably",
    "familiar",
    "looks",
    "like",
    "excel",
    "table",
    "gon",
    "na",
    "start",
    "first",
    "series",
    "okay",
    "stay",
    "going",
    "talk",
    "series",
    "second",
    "case",
    "important",
    "pandas",
    "also",
    "imported",
    "numpy",
    "might",
    "imagine",
    "told",
    "numpy",
    "part",
    "tutorial",
    "saying",
    "numpy",
    "fundamental",
    "data",
    "analysis",
    "every",
    "library",
    "pandas",
    "matplotlib",
    "sit",
    "top",
    "numpy",
    "see",
    "right",
    "gon",
    "na",
    "using",
    "features",
    "numpy",
    "within",
    "lesson",
    "series",
    "pandas",
    "see",
    "right",
    "concept",
    "series",
    "ordered",
    "sequence",
    "elements",
    "right",
    "indexed",
    "right",
    "indexed",
    "given",
    "index",
    "course",
    "might",
    "think",
    "looks",
    "lot",
    "like",
    "python",
    "list",
    "right",
    "case",
    "storing",
    "population",
    "countries",
    "right",
    "millions",
    "inhabitants",
    "case",
    "jevelin",
    "g7",
    "pub",
    "getting",
    "population",
    "group",
    "seven",
    "console",
    "wikipedia",
    "page",
    "basically",
    "storing",
    "population",
    "series",
    "looks",
    "lot",
    "like",
    "list",
    "gon",
    "na",
    "find",
    "ton",
    "differences",
    "first",
    "one",
    "series",
    "associated",
    "data",
    "type",
    "something",
    "saw",
    "numpy",
    "numpy",
    "array",
    "could",
    "hold",
    "different",
    "types",
    "objects",
    "one",
    "type",
    "object",
    "case",
    "float",
    "numbers",
    "series",
    "type",
    "float",
    "64",
    "underlying",
    "data",
    "structure",
    "10",
    "using",
    "store",
    "objects",
    "numpy",
    "array",
    "second",
    "difference",
    "see",
    "quickly",
    "zeros",
    "name",
    "right",
    "display",
    "series",
    "see",
    "name",
    "might",
    "make",
    "ton",
    "sense",
    "series",
    "part",
    "data",
    "frame",
    "form",
    "column",
    "name",
    "going",
    "make",
    "lot",
    "sense",
    "moving",
    "forward",
    "saw",
    "type",
    "backed",
    "data",
    "backed",
    "numpy",
    "array",
    "always",
    "consult",
    "check",
    "values",
    "series",
    "going",
    "get",
    "array",
    "backing",
    "pandas",
    "series",
    "right",
    "see",
    "numpy",
    "array",
    "series",
    "consulting",
    "design",
    "pop",
    "select",
    "elements",
    "good",
    "regular",
    "list",
    "right",
    "example",
    "give",
    "first",
    "element",
    "give",
    "second",
    "element",
    "last",
    "element",
    "etc",
    "series",
    "inherently",
    "index",
    "similar",
    "list",
    "list",
    "create",
    "list",
    "python",
    "right",
    "create",
    "l",
    "equals",
    "b",
    "see",
    "something",
    "wrong",
    "missing",
    "quote",
    "list",
    "say",
    "right",
    "idea",
    "index",
    "zero",
    "one",
    "two",
    "right",
    "pendous",
    "series",
    "lot",
    "explicit",
    "element",
    "associated",
    "value",
    "within",
    "might",
    "think",
    "pretty",
    "much",
    "thing",
    "list",
    "series",
    "sequences",
    "ordered",
    "sequences",
    "elements",
    "going",
    "see",
    "fundamental",
    "difference",
    "arbitrarily",
    "change",
    "index",
    "series",
    "default",
    "created",
    "assign",
    "indices",
    "default",
    "range",
    "index",
    "zero",
    "n",
    "minus",
    "one",
    "elements",
    "actually",
    "arbitrarily",
    "say",
    "index",
    "series",
    "case",
    "data",
    "structure",
    "series",
    "indices",
    "seeing",
    "right",
    "important",
    "going",
    "referring",
    "values",
    "sequential",
    "position",
    "name",
    "label",
    "index",
    "meaningful",
    "name",
    "us",
    "humans",
    "okay",
    "thing",
    "looks",
    "little",
    "bit",
    "like",
    "dictionary",
    "could",
    "say",
    "list",
    "started",
    "thinking",
    "series",
    "similar",
    "list",
    "think",
    "series",
    "limit",
    "similar",
    "dictionary",
    "wait",
    "get",
    "wrong",
    "series",
    "fundamental",
    "trait",
    "still",
    "ordered",
    "something",
    "happen",
    "dictionaries",
    "dictionaries",
    "python",
    "ordered",
    "actually",
    "python",
    "ordered",
    "thinking",
    "ordered",
    "unordered",
    "data",
    "structures",
    "case",
    "series",
    "order",
    "advantages",
    "ordered",
    "candidates",
    "always",
    "friends",
    "decided",
    "create",
    "also",
    "names",
    "labels",
    "keys",
    "associated",
    "values",
    "dictionary",
    "creating",
    "series",
    "scratch",
    "right",
    "methods",
    "see",
    "create",
    "series",
    "bypassing",
    "index",
    "two",
    "step",
    "process",
    "first",
    "created",
    "series",
    "add",
    "index",
    "case",
    "everything",
    "indexing",
    "going",
    "done",
    "indices",
    "right",
    "labels",
    "make",
    "index",
    "used",
    "index",
    "specific",
    "data",
    "g7",
    "pop",
    "see",
    "countries",
    "population",
    "index",
    "saying",
    "want",
    "get",
    "population",
    "canada",
    "remember",
    "position",
    "canada",
    "oh",
    "first",
    "help",
    "countries",
    "g7",
    "pop",
    "zero",
    "index",
    "consult",
    "population",
    "canada",
    "population",
    "japan",
    "see",
    "syntax",
    "python",
    "dictionary",
    "pretty",
    "much",
    "pass",
    "key",
    "going",
    "get",
    "value",
    "summary",
    "advantage",
    "series",
    "ordered",
    "sequence",
    "elements",
    "backed",
    "numpy",
    "array",
    "efficient",
    "fast",
    "also",
    "index",
    "take",
    "labels",
    "pass",
    "going",
    "make",
    "lot",
    "better",
    "indexing",
    "steal",
    "series",
    "still",
    "get",
    "elements",
    "sequential",
    "ordering",
    "sequential",
    "data",
    "structure",
    "matter",
    "index",
    "still",
    "say",
    "hey",
    "know",
    "index",
    "want",
    "get",
    "last",
    "element",
    "first",
    "element",
    "second",
    "element",
    "going",
    "using",
    "attributes",
    "look",
    "say",
    "series",
    "series",
    "going",
    "ilok",
    "locate",
    "sequential",
    "position",
    "element",
    "element",
    "position",
    "zero",
    "last",
    "element",
    "still",
    "works",
    "expected",
    "series",
    "also",
    "support",
    "multiple",
    "indices",
    "saw",
    "numpy",
    "case",
    "get",
    "two",
    "elements",
    "two",
    "three",
    "n",
    "elements",
    "pass",
    "multiple",
    "indices",
    "thing",
    "happens",
    "sequential",
    "multi",
    "index",
    "series",
    "also",
    "support",
    "range",
    "selection",
    "slices",
    "fundamental",
    "difference",
    "important",
    "attention",
    "fundamental",
    "difference",
    "python",
    "python",
    "upper",
    "limit",
    "slice",
    "returned",
    "list",
    "created",
    "l",
    "number",
    "two",
    "get",
    "index",
    "see",
    "right",
    "zero",
    "one",
    "two",
    "two",
    "included",
    "pandas",
    "series",
    "upper",
    "limit",
    "indeed",
    "included",
    "asked",
    "canada",
    "italy",
    "italy",
    "result",
    "okay",
    "something",
    "consider",
    "using",
    "index",
    "selection",
    "pandas",
    "think",
    "still",
    "valid",
    "understand",
    "reasoning",
    "behind",
    "different",
    "python",
    "remember",
    "boolean",
    "arrays",
    "topic",
    "discussed",
    "previous",
    "lesson",
    "numpy",
    "boolean",
    "arrays",
    "still",
    "thing",
    "pandas",
    "difference",
    "instead",
    "saying",
    "boolean",
    "arrays",
    "say",
    "boolean",
    "series",
    "right",
    "idea",
    "able",
    "perform",
    "operations",
    "top",
    "series",
    "example",
    "right",
    "mathematical",
    "operations",
    "top",
    "series",
    "case",
    "zero",
    "seven",
    "pop",
    "told",
    "beginning",
    "millions",
    "inhabitants",
    "want",
    "get",
    "series",
    "interest",
    "units",
    "need",
    "jessamine",
    "pop",
    "times",
    "1",
    "million",
    "go",
    "terms",
    "units",
    "operations",
    "right",
    "vectorized",
    "operations",
    "bras",
    "broadcasting",
    "operations",
    "also",
    "performed",
    "boolean",
    "operands",
    "instead",
    "multiplication",
    "summation",
    "subtraction",
    "etc",
    "add",
    "use",
    "boolean",
    "operators",
    "case",
    "get",
    "asked",
    "countries",
    "770",
    "million",
    "inhabitants",
    "receive",
    "receive",
    "assault",
    "bull",
    "aerates",
    "nebraska",
    "right",
    "well",
    "let",
    "hear",
    "know",
    "basically",
    "concept",
    "us",
    "numpy",
    "boolean",
    "array",
    "canada",
    "friends",
    "70",
    "million",
    "inhabitants",
    "germany",
    "seven",
    "70",
    "million",
    "inhabitants",
    "80",
    "japan",
    "japan",
    "us",
    "us",
    "also",
    "past",
    "70",
    "million",
    "inhabitants",
    "boolean",
    "array",
    "boolean",
    "series",
    "case",
    "works",
    "way",
    "numpy",
    "selection",
    "also",
    "applies",
    "select",
    "say",
    "give",
    "series",
    "g7",
    "pop",
    "countries",
    "70",
    "million",
    "inhabitants",
    "value",
    "building",
    "filtering",
    "building",
    "query",
    "language",
    "want",
    "top",
    "pandas",
    "selecting",
    "data",
    "based",
    "condition",
    "remember",
    "ever",
    "trouble",
    "remember",
    "idea",
    "always",
    "track",
    "way",
    "index",
    "built",
    "case",
    "selection",
    "knows",
    "anything",
    "first",
    "election",
    "knows",
    "anything",
    "select",
    "countries",
    "70",
    "operation",
    "performed",
    "first",
    "resulted",
    "series",
    "series",
    "indexed",
    "array",
    "boolean",
    "array",
    "result",
    "see",
    "operations",
    "run",
    "calculator",
    "methods",
    "operators",
    "saw",
    "previous",
    "lesson",
    "irregular",
    "pipe",
    "amberson",
    "applied",
    "order",
    "want",
    "read",
    "thing",
    "complicated",
    "purpose",
    "worth",
    "saying",
    "give",
    "elements",
    "mean",
    "minus",
    "two",
    "standard",
    "deviations",
    "mean",
    "actually",
    "mean",
    "mean",
    "correct",
    "matter",
    "operation",
    "two",
    "ends",
    "actually",
    "mean",
    "minus",
    "standard",
    "deviation",
    "applying",
    "operation",
    "right",
    "operation",
    "work",
    "boolean",
    "selection",
    "well",
    "operations",
    "saw",
    "mathematical",
    "perspective",
    "mean",
    "statistical",
    "operations",
    "saw",
    "numpy",
    "mean",
    "average",
    "standard",
    "deviation",
    "actually",
    "using",
    "standard",
    "deviation",
    "still",
    "relevant",
    "case",
    "also",
    "use",
    "traditional",
    "numpy",
    "functions",
    "pandas",
    "series",
    "panda",
    "series",
    "internally",
    "backed",
    "numpy",
    "array",
    "see",
    "example",
    "little",
    "bit",
    "clear",
    "getting",
    "countries",
    "80",
    "million",
    "inhabitants",
    "countries",
    "less",
    "200",
    "million",
    "inhabitants",
    "also",
    "okay",
    "case",
    "say",
    "either",
    "80",
    "40",
    "right",
    "operator",
    "operator",
    "modifying",
    "series",
    "relatively",
    "simple",
    "whenever",
    "value",
    "assign",
    "together",
    "case",
    "saying",
    "canada",
    "know",
    "wanted",
    "index",
    "also",
    "sequential",
    "positions",
    "case",
    "going",
    "say",
    "last",
    "country",
    "500",
    "going",
    "see",
    "right",
    "last",
    "country",
    "500",
    "also",
    "modify",
    "elements",
    "based",
    "bool",
    "selection",
    "say",
    "countries",
    "less",
    "70",
    "million",
    "inhabitants",
    "previous",
    "query",
    "see",
    "changed",
    "countries",
    "assignment",
    "works",
    "direct",
    "indexing",
    "also",
    "works",
    "boolean",
    "indexing",
    "going",
    "extremely",
    "important",
    "cleaning",
    "data",
    "let",
    "move",
    "forward",
    "start",
    "talking",
    "data",
    "frames",
    "exercises",
    "series",
    "also",
    "data",
    "frames",
    "recommend",
    "check",
    "talking",
    "data",
    "frames",
    "data",
    "frame",
    "going",
    "look",
    "like",
    "pretty",
    "much",
    "thing",
    "us",
    "excel",
    "table",
    "series",
    "going",
    "data",
    "frame",
    "table",
    "looks",
    "lot",
    "like",
    "excel",
    "spreadsheet",
    "actually",
    "common",
    "create",
    "pandas",
    "data",
    "frames",
    "csv",
    "files",
    "tables",
    "basically",
    "going",
    "create",
    "created",
    "data",
    "frame",
    "object",
    "created",
    "go",
    "data",
    "frame",
    "see",
    "right",
    "columns",
    "assigned",
    "case",
    "designing",
    "columns",
    "rows",
    "values",
    "right",
    "one",
    "columns",
    "similarity",
    "series",
    "data",
    "frame",
    "column",
    "basically",
    "series",
    "think",
    "data",
    "frame",
    "combination",
    "multiple",
    "series",
    "one",
    "per",
    "column",
    "going",
    "assign",
    "index",
    "data",
    "frame",
    "way",
    "series",
    "case",
    "data",
    "frame",
    "sorry",
    "right",
    "data",
    "frame",
    "index",
    "right",
    "columns",
    "columns",
    "index",
    "data",
    "frame",
    "attributes",
    "consult",
    "couple",
    "interesting",
    "methods",
    "data",
    "frames",
    "use",
    "time",
    "first",
    "one",
    "info",
    "method",
    "going",
    "give",
    "quick",
    "quick",
    "information",
    "structure",
    "data",
    "frame",
    "right",
    "going",
    "tell",
    "columns",
    "population",
    "gdp",
    "surface",
    "area",
    "hdi",
    "continent",
    "also",
    "going",
    "tell",
    "types",
    "many",
    "values",
    "actually",
    "telling",
    "many",
    "non",
    "null",
    "values",
    "use",
    "cleaning",
    "data",
    "quickly",
    "define",
    "columns",
    "missing",
    "values",
    "check",
    "size",
    "data",
    "frame",
    "check",
    "shape",
    "similar",
    "matrix",
    "right",
    "two",
    "dimensional",
    "array",
    "numpy",
    "pretty",
    "much",
    "data",
    "frame",
    "also",
    "similar",
    "info",
    "voice",
    "check",
    "summary",
    "structure",
    "data",
    "frame",
    "also",
    "use",
    "cribe",
    "going",
    "give",
    "summary",
    "statistics",
    "data",
    "frame",
    "case",
    "see",
    "numeric",
    "column",
    "columns",
    "numeric",
    "continent",
    "example",
    "continent",
    "see",
    "type",
    "object",
    "string",
    "basically",
    "numeric",
    "columns",
    "going",
    "summary",
    "statistics",
    "example",
    "population",
    "many",
    "elements",
    "mean",
    "right",
    "average",
    "romney",
    "standard",
    "deviation",
    "minimum",
    "maximum",
    "couple",
    "percentiles",
    "25th",
    "50th",
    "75th",
    "percentiles",
    "quick",
    "summary",
    "statistics",
    "lot",
    "keep",
    "mind",
    "crime",
    "method",
    "popular",
    "could",
    "see",
    "info",
    "method",
    "columns",
    "associated",
    "types",
    "okay",
    "important",
    "continent",
    "object",
    "means",
    "basically",
    "string",
    "hdi",
    "float",
    "surface",
    "area",
    "integer",
    "numpy",
    "pandas",
    "automatically",
    "numpy",
    "automatically",
    "recognizing",
    "correct",
    "type",
    "assign",
    "one",
    "columns",
    "similar",
    "saw",
    "series",
    "series",
    "contain",
    "natural",
    "datatype",
    "series",
    "part",
    "given",
    "data",
    "type",
    "something",
    "change",
    "case",
    "checking",
    "value",
    "counts",
    "quick",
    "reference",
    "types",
    "series",
    "moving",
    "forward",
    "selecting",
    "data",
    "series",
    "well",
    "couple",
    "methods",
    "might",
    "little",
    "bit",
    "confusing",
    "going",
    "going",
    "skip",
    "going",
    "give",
    "quick",
    "reference",
    "first",
    "read",
    "want",
    "process",
    "follow",
    "given",
    "data",
    "frame",
    "two",
    "quick",
    "rules",
    "given",
    "data",
    "frame",
    "going",
    "select",
    "index",
    "using",
    "lock",
    "attributes",
    "lock",
    "attribute",
    "let",
    "select",
    "individual",
    "rows",
    "example",
    "get",
    "canada",
    "value",
    "canada",
    "lock",
    "attribute",
    "let",
    "select",
    "similar",
    "series",
    "row",
    "sequential",
    "position",
    "let",
    "say",
    "want",
    "select",
    "last",
    "row",
    "case",
    "united",
    "states",
    "america",
    "look",
    "lets",
    "select",
    "select",
    "rows",
    "route",
    "index",
    "give",
    "row",
    "index",
    "log",
    "let",
    "select",
    "rows",
    "sequential",
    "position",
    "give",
    "last",
    "row",
    "first",
    "row",
    "second",
    "row",
    "etc",
    "finally",
    "without",
    "using",
    "lock",
    "without",
    "using",
    "lock",
    "saying",
    "f",
    "something",
    "selecting",
    "column",
    "give",
    "entire",
    "give",
    "v",
    "tire",
    "column",
    "population",
    "right",
    "entire",
    "column",
    "population",
    "seeing",
    "first",
    "first",
    "quick",
    "reference",
    "dot",
    "dot",
    "lok",
    "give",
    "element",
    "index",
    "look",
    "give",
    "element",
    "position",
    "wrote",
    "position",
    "df",
    "things",
    "gon",
    "na",
    "give",
    "element",
    "column",
    "sorry",
    "passing",
    "like",
    "look",
    "look",
    "look",
    "look",
    "work",
    "horizontal",
    "ladder",
    "give",
    "bf",
    "art",
    "whatever",
    "works",
    "vertical",
    "montanus",
    "getting",
    "given",
    "row",
    "something",
    "interesting",
    "results",
    "one",
    "one",
    "one",
    "series",
    "returned",
    "series",
    "saw",
    "way",
    "works",
    "first",
    "focus",
    "last",
    "example",
    "going",
    "see",
    "pretty",
    "standard",
    "series",
    "right",
    "one",
    "return",
    "remember",
    "type",
    "everything",
    "fine",
    "ask",
    "row",
    "like",
    "case",
    "get",
    "example",
    "easily",
    "go",
    "result",
    "also",
    "series",
    "see",
    "thing",
    "kind",
    "transposed",
    "way",
    "dot",
    "volume",
    "year",
    "population",
    "gdp",
    "surface",
    "area",
    "hdi",
    "continent",
    "volleys",
    "transposed",
    "right",
    "vertical",
    "horizontal",
    "regular",
    "series",
    "manner",
    "index",
    "series",
    "extracted",
    "name",
    "column",
    "hot",
    "case",
    "name",
    "right",
    "value",
    "index",
    "read",
    "right",
    "want",
    "remember",
    "rules",
    "lock",
    "select",
    "index",
    "dot",
    "lock",
    "select",
    "sequential",
    "position",
    "f",
    "something",
    "go",
    "column",
    "times",
    "might",
    "apply",
    "want",
    "apply",
    "issues",
    "example",
    "rows",
    "index",
    "numeric",
    "might",
    "issues",
    "form",
    "dot",
    "form",
    "respecting",
    "three",
    "gon",
    "na",
    "get",
    "element",
    "want",
    "get",
    "either",
    "row",
    "column",
    "seen",
    "oldest",
    "slicing",
    "also",
    "works",
    "expected",
    "get",
    "example",
    "easily",
    "get",
    "friends",
    "easily",
    "upper",
    "limit",
    "included",
    "built",
    "look",
    "select",
    "indices",
    "france",
    "italy",
    "also",
    "second",
    "dimension",
    "similar",
    "way",
    "worked",
    "numpy",
    "second",
    "dimension",
    "get",
    "countries",
    "france",
    "italy",
    "including",
    "italy",
    "population",
    "column",
    "population",
    "gdp",
    "see",
    "second",
    "dimension",
    "applied",
    "concept",
    "multiple",
    "dimensions",
    "selection",
    "applied",
    "also",
    "famous",
    "ilok",
    "works",
    "way",
    "multi",
    "index",
    "slicing",
    "get",
    "example",
    "one",
    "three",
    "right",
    "sequential",
    "positions",
    "case",
    "upper",
    "limit",
    "included",
    "another",
    "difference",
    "also",
    "multi",
    "dimensions",
    "say",
    "give",
    "countries",
    "one",
    "three",
    "column",
    "0123",
    "third",
    "column",
    "fourth",
    "column",
    "column",
    "index",
    "three",
    "hdi",
    "also",
    "works",
    "expected",
    "recommended",
    "always",
    "use",
    "look",
    "like",
    "select",
    "rows",
    "use",
    "naked",
    "data",
    "frame",
    "select",
    "columns",
    "saw",
    "moving",
    "forward",
    "conditional",
    "selection",
    "boolean",
    "arrays",
    "series",
    "whatever",
    "want",
    "call",
    "also",
    "works",
    "data",
    "frames",
    "important",
    "way",
    "filter",
    "data",
    "way",
    "us",
    "consult",
    "data",
    "case",
    "want",
    "select",
    "countries",
    "population",
    "greater",
    "okay",
    "countries",
    "70",
    "million",
    "habitants",
    "similar",
    "series",
    "case",
    "want",
    "data",
    "frame",
    "going",
    "see",
    "going",
    "construct",
    "boolean",
    "series",
    "previous",
    "video",
    "right",
    "every",
    "country",
    "70",
    "false",
    "false",
    "true",
    "false",
    "going",
    "inject",
    "result",
    "boolean",
    "series",
    "dot",
    "lock",
    "selection",
    "give",
    "countries",
    "match",
    "true",
    "value",
    "remember",
    "kind",
    "mnemonics",
    "way",
    "remember",
    "way",
    "pandas",
    "knows",
    "filter",
    "things",
    "matching",
    "index",
    "right",
    "resulting",
    "series",
    "index",
    "resulting",
    "data",
    "frame",
    "two",
    "different",
    "objects",
    "completely",
    "different",
    "objects",
    "index",
    "much",
    "japan",
    "march",
    "germany",
    "march",
    "germany",
    "japan",
    "thing",
    "working",
    "us",
    "expect",
    "first",
    "dimension",
    "give",
    "rows",
    "also",
    "second",
    "dimension",
    "saying",
    "give",
    "column",
    "columns",
    "right",
    "steel",
    "awards",
    "us",
    "desire",
    "dropping",
    "stuff",
    "say",
    "whenever",
    "data",
    "say",
    "give",
    "pieces",
    "say",
    "drop",
    "others",
    "right",
    "pretty",
    "much",
    "dropping",
    "simple",
    "drop",
    "index",
    "drop",
    "value",
    "drop",
    "canada",
    "altogether",
    "period",
    "drop",
    "indices",
    "japan",
    "also",
    "drop",
    "columns",
    "drop",
    "population",
    "hdi",
    "columns",
    "ways",
    "also",
    "advanced",
    "usage",
    "access",
    "similar",
    "numpy",
    "recommend",
    "much",
    "still",
    "use",
    "see",
    "operations",
    "seen",
    "far",
    "working",
    "important",
    "part",
    "broadcasting",
    "operation",
    "going",
    "series",
    "going",
    "create",
    "new",
    "series",
    "crisis",
    "gon",
    "na",
    "show",
    "looks",
    "like",
    "crisis",
    "going",
    "perform",
    "broadcasting",
    "operation",
    "going",
    "show",
    "thing",
    "looks",
    "like",
    "first",
    "two",
    "data",
    "frame",
    "crisis",
    "result",
    "subtract",
    "know",
    "number",
    "1",
    "million",
    "subtract",
    "1",
    "million",
    "volume",
    "gon",
    "na",
    "subtract",
    "hdi",
    "one",
    "see",
    "alignment",
    "columns",
    "indices",
    "gdp",
    "matched",
    "gdp",
    "hdi",
    "much",
    "hdi",
    "two",
    "different",
    "objects",
    "two",
    "independent",
    "objects",
    "series",
    "data",
    "frame",
    "combine",
    "operation",
    "like",
    "columns",
    "case",
    "aligned",
    "gdp",
    "hdi",
    "work",
    "together",
    "gon",
    "na",
    "subtract",
    "value",
    "column",
    "let",
    "remove",
    "subtract",
    "values",
    "column",
    "values",
    "going",
    "subtract",
    "value",
    "column",
    "values",
    "way",
    "going",
    "work",
    "moving",
    "forward",
    "modifying",
    "data",
    "frames",
    "wan",
    "na",
    "want",
    "show",
    "something",
    "dropping",
    "stuff",
    "actually",
    "modifying",
    "data",
    "frame",
    "df",
    "dot",
    "drop",
    "canada",
    "df",
    "still",
    "canada",
    "similar",
    "happened",
    "numpy",
    "operations",
    "immutable",
    "changing",
    "underlying",
    "data",
    "frame",
    "storing",
    "storing",
    "creating",
    "new",
    "data",
    "frames",
    "store",
    "result",
    "given",
    "operation",
    "case",
    "drop",
    "canada",
    "result",
    "new",
    "data",
    "frame",
    "underlying",
    "iframe",
    "changed",
    "immutable",
    "operations",
    "operations",
    "pandas",
    "immutable",
    "ways",
    "change",
    "ways",
    "make",
    "changes",
    "permanent",
    "want",
    "think",
    "everything",
    "immutable",
    "whenever",
    "want",
    "perform",
    "operation",
    "going",
    "create",
    "new",
    "series",
    "want",
    "keep",
    "track",
    "need",
    "something",
    "like",
    "df",
    "two",
    "equals",
    "even",
    "df",
    "equals",
    "know",
    "modify",
    "current",
    "data",
    "frame",
    "way",
    "going",
    "save",
    "sec",
    "modifying",
    "series",
    "explicitly",
    "affrontare",
    "modifying",
    "data",
    "frame",
    "explicitly",
    "create",
    "new",
    "column",
    "well",
    "simple",
    "assign",
    "column",
    "said",
    "let",
    "say",
    "column",
    "right",
    "says",
    "similar",
    "say",
    "language",
    "oh",
    "read",
    "say",
    "language",
    "equals",
    "write",
    "whatever",
    "want",
    "case",
    "done",
    "language",
    "let",
    "show",
    "lynx",
    "case",
    "tiny",
    "series",
    "elements",
    "indices",
    "data",
    "frames",
    "matter",
    "pandas",
    "match",
    "indices",
    "chill",
    "exist",
    "live",
    "like",
    "rest",
    "na",
    "n",
    "use",
    "blank",
    "another",
    "number",
    "numpy",
    "going",
    "talk",
    "start",
    "cleaning",
    "data",
    "data",
    "cleaning",
    "sorry",
    "links",
    "france",
    "germany",
    "italy",
    "see",
    "volleys",
    "happens",
    "want",
    "change",
    "value",
    "language",
    "series",
    "already",
    "exist",
    "want",
    "change",
    "column",
    "read",
    "exist",
    "want",
    "change",
    "case",
    "going",
    "say",
    "df",
    "language",
    "equals",
    "english",
    "going",
    "change",
    "together",
    "df",
    "affected",
    "values",
    "language",
    "english",
    "relate",
    "realize",
    "operation",
    "changing",
    "underlying",
    "data",
    "underlying",
    "series",
    "line",
    "numpy",
    "array",
    "usually",
    "equal",
    "symbol",
    "remember",
    "numpy",
    "saw",
    "something",
    "plus",
    "equals",
    "case",
    "whenever",
    "plus",
    "equals",
    "symbol",
    "modifying",
    "underlying",
    "data",
    "frame",
    "example",
    "check",
    "rename",
    "function",
    "method",
    "data",
    "frame",
    "let",
    "pass",
    "columns",
    "indices",
    "rename",
    "case",
    "want",
    "change",
    "united",
    "states",
    "usa",
    "eu",
    "united",
    "kingdom",
    "uk",
    "argentina",
    "ar",
    "argentina",
    "exist",
    "data",
    "frame",
    "cause",
    "problem",
    "want",
    "show",
    "us",
    "uk",
    "modified",
    "correctly",
    "hdi",
    "modified",
    "correctly",
    "pc",
    "exist",
    "cause",
    "problems",
    "showing",
    "remember",
    "operations",
    "immutable",
    "check",
    "state",
    "data",
    "frame",
    "see",
    "original",
    "data",
    "frame",
    "changed",
    "hdi",
    "steel",
    "hdi",
    "matter",
    "renamed",
    "still",
    "data",
    "thing",
    "days",
    "indices",
    "operations",
    "immutable",
    "examples",
    "modifying",
    "data",
    "look",
    "something",
    "common",
    "us",
    "creating",
    "columns",
    "combinations",
    "columns",
    "read",
    "imagine",
    "could",
    "hear",
    "something",
    "like",
    "example",
    "gdp",
    "per",
    "capita",
    "right",
    "go",
    "gdp",
    "per",
    "capita",
    "gdp",
    "p",
    "per",
    "capita",
    "per",
    "capita",
    "say",
    "equals",
    "gdp",
    "column",
    "divided",
    "column",
    "right",
    "something",
    "like",
    "b",
    "b",
    "three",
    "actually",
    "c",
    "three",
    "c",
    "three",
    "divided",
    "b",
    "three",
    "right",
    "would",
    "extend",
    "values",
    "way",
    "along",
    "pen",
    "could",
    "something",
    "similar",
    "column",
    "perform",
    "operations",
    "broadcasting",
    "operations",
    "case",
    "gdp",
    "population",
    "assign",
    "series",
    "result",
    "right",
    "series",
    "going",
    "assign",
    "series",
    "new",
    "column",
    "gdp",
    "per",
    "capita",
    "go",
    "column",
    "data",
    "broadcasting",
    "operations",
    "extremely",
    "fast",
    "backed",
    "numpy",
    "array",
    "result",
    "series",
    "quick",
    "statistical",
    "information",
    "methods",
    "right",
    "summary",
    "statistics",
    "saw",
    "crime",
    "method",
    "minimum",
    "maximums",
    "mean",
    "median",
    "works",
    "expected",
    "something",
    "want",
    "note",
    "possible",
    "pandas",
    "going",
    "change",
    "colors",
    "going",
    "use",
    "red",
    "pandas",
    "concept",
    "data",
    "frame",
    "right",
    "data",
    "frame",
    "multiple",
    "columns",
    "multiple",
    "rows",
    "operations",
    "resulting",
    "operations",
    "resulting",
    "one",
    "series",
    "pandas",
    "data",
    "frame",
    "series",
    "could",
    "say",
    "individual",
    "numbers",
    "like",
    "always",
    "data",
    "frame",
    "always",
    "resorting",
    "back",
    "like",
    "operations",
    "return",
    "series",
    "series",
    "used",
    "data",
    "frame",
    "right",
    "case",
    "resulted",
    "series",
    "merely",
    "use",
    "series",
    "set",
    "value",
    "column",
    "right",
    "understanding",
    "series",
    "important",
    "assignment",
    "exercises",
    "check",
    "complete",
    "going",
    "make",
    "little",
    "bit",
    "sense",
    "working",
    "finally",
    "want",
    "give",
    "quick",
    "introduction",
    "reading",
    "external",
    "data",
    "plotting",
    "going",
    "use",
    "methods",
    "popular",
    "maybe",
    "look",
    "quickly",
    "say",
    "read",
    "csv",
    "use",
    "read",
    "csv",
    "function",
    "pandas",
    "function",
    "read",
    "csv",
    "read",
    "csv",
    "actually",
    "others",
    "read",
    "sequel",
    "read",
    "excel",
    "read",
    "xml",
    "multiple",
    "adjacent",
    "multiple",
    "ones",
    "read",
    "html",
    "able",
    "automatically",
    "parse",
    "html",
    "page",
    "read",
    "functions",
    "like",
    "like",
    "going",
    "read",
    "csv",
    "right",
    "structure",
    "functions",
    "let",
    "us",
    "import",
    "data",
    "external",
    "source",
    "pain",
    "workflow",
    "case",
    "going",
    "read",
    "btc",
    "market",
    "prize",
    "volumes",
    "right",
    "open",
    "csv",
    "looks",
    "like",
    "date",
    "price",
    "taken",
    "read",
    "devalue",
    "bread",
    "timestamp",
    "value",
    "timestamp",
    "value",
    "decide",
    "price",
    "bitcoin",
    "close",
    "think",
    "note",
    "inside",
    "csv",
    "csv",
    "going",
    "writing",
    "going",
    "use",
    "method",
    "read",
    "csv",
    "method",
    "automatically",
    "parse",
    "csv",
    "expected",
    "go",
    "process",
    "us",
    "start",
    "tuning",
    "get",
    "right",
    "point",
    "going",
    "show",
    "customization",
    "sp",
    "customizations",
    "receipt",
    "read",
    "csv",
    "function",
    "first",
    "one",
    "sorry",
    "let",
    "tell",
    "first",
    "ton",
    "attributes",
    "ton",
    "customization",
    "read",
    "csv",
    "remember",
    "remember",
    "everything",
    "top",
    "head",
    "worry",
    "always",
    "go",
    "back",
    "documentation",
    "practice",
    "going",
    "come",
    "naturally",
    "first",
    "thing",
    "first",
    "row",
    "csv",
    "considered",
    "column",
    "names",
    "case",
    "fine",
    "lesson",
    "column",
    "name",
    "let",
    "say",
    "add",
    "going",
    "timestamp",
    "timestamp",
    "price",
    "going",
    "save",
    "going",
    "rearrange",
    "file",
    "read",
    "go",
    "default",
    "pandas",
    "assuming",
    "first",
    "line",
    "csv",
    "rd",
    "columns",
    "going",
    "go",
    "back",
    "right",
    "gon",
    "na",
    "show",
    "assumption",
    "pandas",
    "gon",
    "na",
    "course",
    "course",
    "change",
    "assumption",
    "case",
    "csv",
    "file",
    "column",
    "names",
    "going",
    "say",
    "heather",
    "equals",
    "none",
    "start",
    "seeing",
    "attributes",
    "going",
    "use",
    "read",
    "csv",
    "function",
    "read",
    "csv",
    "hether",
    "equals",
    "none",
    "us",
    "going",
    "known",
    "means",
    "infer",
    "read",
    "header",
    "try",
    "infer",
    "header",
    "header",
    "csv",
    "file",
    "columns",
    "zero",
    "one",
    "going",
    "change",
    "columns",
    "say",
    "actually",
    "time",
    "something",
    "prize",
    "going",
    "show",
    "first",
    "rows",
    "saying",
    "df",
    "dot",
    "head",
    "method",
    "significantly",
    "large",
    "file",
    "going",
    "say",
    "long",
    "least",
    "fit",
    "screen",
    "shape",
    "day",
    "csv",
    "data",
    "frame",
    "365",
    "rows",
    "two",
    "columns",
    "df",
    "info",
    "example",
    "little",
    "bit",
    "reference",
    "365",
    "values",
    "values",
    "price",
    "actually",
    "float",
    "tamsin",
    "object",
    "going",
    "fix",
    "second",
    "sorry",
    "f",
    "head",
    "f",
    "dot",
    "tail",
    "methods",
    "used",
    "get",
    "either",
    "first",
    "files",
    "end",
    "row",
    "sorry",
    "last",
    "n",
    "rows",
    "five",
    "rows",
    "default",
    "change",
    "say",
    "show",
    "last",
    "three",
    "rows",
    "example",
    "something",
    "types",
    "types",
    "timestamp",
    "case",
    "timestamp",
    "column",
    "properly",
    "parsed",
    "date",
    "parsed",
    "object",
    "string",
    "want",
    "going",
    "use",
    "function",
    "pd",
    "dot",
    "today",
    "time",
    "something",
    "gon",
    "na",
    "explore",
    "detail",
    "reading",
    "cleaning",
    "data",
    "cleaning",
    "course",
    "part",
    "sorry",
    "tutorial",
    "gon",
    "na",
    "use",
    "today",
    "time",
    "function",
    "turn",
    "column",
    "f",
    "timestamp",
    "actual",
    "date",
    "going",
    "say",
    "f",
    "timestamp",
    "equals",
    "function",
    "resulting",
    "everything",
    "looks",
    "expected",
    "one",
    "change",
    "want",
    "want",
    "set",
    "index",
    "data",
    "frame",
    "timestamp",
    "quickly",
    "access",
    "price",
    "information",
    "led",
    "see",
    "price",
    "bitcoin",
    "2000",
    "1709",
    "make",
    "mistake",
    "forgot",
    "llc",
    "go",
    "value",
    "bitcoin",
    "particular",
    "date",
    "forgot",
    "look",
    "remember",
    "get",
    "value",
    "particular",
    "row",
    "dot",
    "lock",
    "go",
    "getting",
    "dodd",
    "particular",
    "value",
    "made",
    "timestamp",
    "index",
    "get",
    "artists",
    "value",
    "directly",
    "index",
    "happens",
    "want",
    "turn",
    "thing",
    "automated",
    "script",
    "example",
    "run",
    "process",
    "every",
    "day",
    "5am",
    "whatever",
    "want",
    "read",
    "csv",
    "strip",
    "columns",
    "rename",
    "turn",
    "timestamps",
    "etc",
    "done",
    "far",
    "read",
    "csv",
    "without",
    "header",
    "create",
    "columns",
    "turn",
    "daytime",
    "timestamp",
    "daytime",
    "assign",
    "index",
    "result",
    "well",
    "actually",
    "read",
    "csv",
    "oh",
    "sorry",
    "read",
    "csv",
    "method",
    "powerful",
    "let",
    "us",
    "actions",
    "one",
    "call",
    "read",
    "csv",
    "method",
    "parameters",
    "let",
    "customize",
    "behavior",
    "achieve",
    "results",
    "four",
    "lines",
    "code",
    "right",
    "case",
    "gon",
    "na",
    "say",
    "read",
    "csv",
    "assign",
    "header",
    "something",
    "already",
    "infer",
    "header",
    "first",
    "line",
    "column",
    "names",
    "need",
    "extra",
    "line",
    "say",
    "columns",
    "names",
    "oh",
    "way",
    "first",
    "column",
    "going",
    "index",
    "data",
    "frame",
    "oh",
    "also",
    "part",
    "date",
    "index",
    "date",
    "part",
    "date",
    "result",
    "going",
    "pro",
    "try",
    "thing",
    "go",
    "see",
    "work",
    "quickly",
    "pan",
    "plotting",
    "alright",
    "going",
    "want",
    "show",
    "quickly",
    "know",
    "thing",
    "vertical",
    "scrolling",
    "want",
    "show",
    "quickly",
    "create",
    "plots",
    "hannah",
    "interest",
    "breeze",
    "simple",
    "create",
    "block",
    "case",
    "going",
    "given",
    "data",
    "frame",
    "always",
    "invoke",
    "plot",
    "method",
    "plot",
    "method",
    "using",
    "map",
    "plot",
    "live",
    "library",
    "something",
    "check",
    "want",
    "docs",
    "necessary",
    "going",
    "enough",
    "using",
    "regular",
    "plug",
    "library",
    "see",
    "dimopoulos",
    "library",
    "part",
    "standard",
    "pi",
    "data",
    "stack",
    "us",
    "access",
    "using",
    "pandas",
    "extremely",
    "simple",
    "df",
    "dot",
    "plot",
    "done",
    "set",
    "plot",
    "want",
    "gon",
    "na",
    "see",
    "details",
    "matplotlib",
    "worry",
    "much",
    "later",
    "challenging",
    "example",
    "run",
    "quickly",
    "inspect",
    "process",
    "follow",
    "fix",
    "data",
    "go",
    "see",
    "right",
    "difference",
    "bitcoin",
    "ether",
    "period",
    "time",
    "right",
    "loaded",
    "chart",
    "resulting",
    "data",
    "frame",
    "bitcoin",
    "one",
    "side",
    "ether",
    "side",
    "plotting",
    "right",
    "creating",
    "one",
    "plot",
    "noticing",
    "empty",
    "value",
    "right",
    "go",
    "december",
    "1",
    "january",
    "first",
    "period",
    "select",
    "period",
    "lock",
    "go",
    "ahead",
    "plot",
    "see",
    "right",
    "gap",
    "seeing",
    "introduction",
    "pindus",
    "real",
    "life",
    "example",
    "pandas",
    "following",
    "also",
    "little",
    "bit",
    "data",
    "data",
    "cleaning",
    "reading",
    "interesting",
    "files",
    "sources",
    "data",
    "getting",
    "data",
    "pipeline",
    "right",
    "idea",
    "going",
    "showing",
    "import",
    "data",
    "excel",
    "sql",
    "actual",
    "processing",
    "analysis",
    "time",
    "talk",
    "data",
    "cleaning",
    "arrived",
    "point",
    "tutorial",
    "pulled",
    "data",
    "shown",
    "manipulate",
    "pandas",
    "beginning",
    "least",
    "introduction",
    "data",
    "manipulation",
    "pandas",
    "time",
    "properly",
    "fix",
    "sake",
    "brevity",
    "skipping",
    "parts",
    "process",
    "data",
    "cleaning",
    "especially",
    "going",
    "find",
    "first",
    "notebook",
    "talked",
    "basics",
    "conceptual",
    "missing",
    "data",
    "python",
    "numpy",
    "going",
    "miss",
    "things",
    "going",
    "mention",
    "pretty",
    "generic",
    "pretty",
    "general",
    "form",
    "course",
    "dig",
    "deeper",
    "check",
    "courses",
    "want",
    "know",
    "usually",
    "talk",
    "data",
    "cleaning",
    "conceptual",
    "level",
    "going",
    "talk",
    "four",
    "step",
    "process",
    "first",
    "step",
    "usually",
    "finding",
    "missing",
    "data",
    "simplest",
    "problem",
    "identify",
    "data",
    "set",
    "something",
    "missing",
    "car",
    "sales",
    "data",
    "car",
    "name",
    "right",
    "card",
    "price",
    "right",
    "number",
    "missing",
    "category",
    "missing",
    "string",
    "missing",
    "course",
    "one",
    "going",
    "different",
    "meaning",
    "solve",
    "fix",
    "data",
    "set",
    "missing",
    "data",
    "simple",
    "example",
    "drop",
    "record",
    "fill",
    "value",
    "right",
    "example",
    "prices",
    "fill",
    "missing",
    "fill",
    "average",
    "value",
    "sales",
    "data",
    "something",
    "like",
    "complicated",
    "volume",
    "important",
    "ca",
    "move",
    "forward",
    "actually",
    "find",
    "missing",
    "volume",
    "involve",
    "something",
    "like",
    "picking",
    "phone",
    "calling",
    "etl",
    "team",
    "asking",
    "going",
    "data",
    "missing",
    "even",
    "buying",
    "data",
    "call",
    "vendor",
    "ask",
    "id",
    "paying",
    "data",
    "mentioning",
    "etc",
    "political",
    "process",
    "depends",
    "use",
    "case",
    "technical",
    "perspective",
    "identifying",
    "missing",
    "data",
    "fixing",
    "going",
    "extremely",
    "simple",
    "fixed",
    "missing",
    "values",
    "start",
    "looking",
    "data",
    "assuming",
    "data",
    "clean",
    "yet",
    "process",
    "data",
    "cleaning",
    "second",
    "step",
    "invalid",
    "values",
    "example",
    "column",
    "price",
    "string",
    "within",
    "right",
    "expecting",
    "numbers",
    "strings",
    "going",
    "complicated",
    "identify",
    "going",
    "complicated",
    "fix",
    "increasing",
    "complexity",
    "deeann",
    "data",
    "cleaning",
    "process",
    "gon",
    "na",
    "reach",
    "problems",
    "domain",
    "day",
    "looking",
    "right",
    "example",
    "column",
    "customer",
    "age",
    "value",
    "right",
    "invalid",
    "value",
    "perfectly",
    "valid",
    "integer",
    "problem",
    "given",
    "domain",
    "right",
    "speaking",
    "customer",
    "age",
    "highly",
    "unlikely",
    "customer",
    "170",
    "years",
    "old",
    "right",
    "case",
    "vowel",
    "completely",
    "valid",
    "missing",
    "data",
    "invalid",
    "values",
    "etc",
    "domain",
    "things",
    "get",
    "complicated",
    "case",
    "example",
    "age",
    "something",
    "resonates",
    "us",
    "know",
    "age",
    "humans",
    "working",
    "domain",
    "working",
    "data",
    "analyst",
    "domain",
    "know",
    "much",
    "right",
    "might",
    "able",
    "judge",
    "value",
    "invalid",
    "working",
    "biology",
    "lab",
    "something",
    "like",
    "white",
    "cells",
    "count",
    "per",
    "milliliter",
    "blood",
    "know",
    "good",
    "value",
    "invalid",
    "value",
    "right",
    "something",
    "need",
    "know",
    "domain",
    "usually",
    "complicated",
    "part",
    "data",
    "cleaning",
    "reach",
    "limit",
    "everything",
    "valid",
    "everything",
    "checks",
    "need",
    "make",
    "sure",
    "value",
    "valid",
    "domain",
    "working",
    "spectrum",
    "going",
    "revisiting",
    "today",
    "get",
    "things",
    "started",
    "way",
    "pin",
    "works",
    "values",
    "four",
    "functions",
    "actually",
    "synonyms",
    "going",
    "going",
    "relatively",
    "simple",
    "trust",
    "things",
    "first",
    "everything",
    "pandas",
    "process",
    "missing",
    "values",
    "related",
    "way",
    "numpy",
    "works",
    "skipping",
    "go",
    "notebook",
    "check",
    "extremely",
    "simple",
    "numpy",
    "objects",
    "n",
    "number",
    "identify",
    "missing",
    "value",
    "value",
    "python",
    "world",
    "non",
    "value",
    "pandas",
    "numpy",
    "going",
    "use",
    "na",
    "n",
    "none",
    "case",
    "beginning",
    "two",
    "functions",
    "n",
    "na",
    "complete",
    "synonyms",
    "going",
    "find",
    "also",
    "also",
    "complete",
    "synonyms",
    "n",
    "na",
    "pan",
    "use",
    "one",
    "prefer",
    "sadly",
    "like",
    "na",
    "way",
    "learned",
    "think",
    "students",
    "usually",
    "recommend",
    "feels",
    "correct",
    "feels",
    "self",
    "explanatory",
    "use",
    "one",
    "prefer",
    "use",
    "think",
    "going",
    "better",
    "get",
    "used",
    "ease",
    "going",
    "side",
    "whatever",
    "prefer",
    "one",
    "gon",
    "na",
    "say",
    "true",
    "false",
    "depending",
    "value",
    "none",
    "right",
    "course",
    "going",
    "na",
    "going",
    "opposite",
    "na",
    "number",
    "false",
    "three",
    "true",
    "get",
    "first",
    "notebook",
    "going",
    "set",
    "false",
    "e",
    "values",
    "true",
    "fi",
    "values",
    "detail",
    "terms",
    "python",
    "anything",
    "empty",
    "non",
    "etc",
    "going",
    "considered",
    "truthy",
    "anything",
    "pass",
    "empty",
    "string",
    "going",
    "considered",
    "true",
    "fi",
    "value",
    "none",
    "work",
    "also",
    "entire",
    "series",
    "entire",
    "data",
    "frames",
    "right",
    "one",
    "valley",
    "pass",
    "entire",
    "series",
    "result",
    "back",
    "going",
    "series",
    "series",
    "values",
    "series",
    "either",
    "depending",
    "question",
    "asking",
    "either",
    "null",
    "null",
    "case",
    "say",
    "one",
    "series",
    "true",
    "opposite",
    "following",
    "method",
    "applying",
    "actually",
    "function",
    "thing",
    "works",
    "entire",
    "entire",
    "data",
    "frame",
    "something",
    "usually",
    "look",
    "know",
    "unknown",
    "hacks",
    "usually",
    "apply",
    "count",
    "actually",
    "sum",
    "values",
    "value",
    "entire",
    "series",
    "say",
    "many",
    "null",
    "values",
    "sum",
    "values",
    "case",
    "going",
    "get",
    "result",
    "entire",
    "entire",
    "summary",
    "nod",
    "bounds",
    "asked",
    "thing",
    "gon",
    "na",
    "happen",
    "say",
    "gon",
    "na",
    "get",
    "many",
    "novels",
    "pretty",
    "much",
    "opposite",
    "question",
    "way",
    "works",
    "python",
    "bullions",
    "pretty",
    "much",
    "integers",
    "ones",
    "zeros",
    "every",
    "true",
    "val",
    "going",
    "count",
    "one",
    "every",
    "four",
    "going",
    "count",
    "zero",
    "ask",
    "sum",
    "boolean",
    "series",
    "going",
    "get",
    "result",
    "number",
    "truths",
    "available",
    "series",
    "right",
    "case",
    "know",
    "values",
    "ask",
    "many",
    "knows",
    "value",
    "know",
    "get",
    "two",
    "use",
    "tricks",
    "filter",
    "data",
    "series",
    "case",
    "say",
    "give",
    "values",
    "known",
    "right",
    "know",
    "also",
    "something",
    "interesting",
    "data",
    "frames",
    "series",
    "methods",
    "also",
    "sorry",
    "functions",
    "also",
    "work",
    "methods",
    "case",
    "say",
    "instead",
    "pv",
    "dot",
    "know",
    "say",
    "load",
    "gets",
    "little",
    "bit",
    "little",
    "bit",
    "simpler",
    "final",
    "objective",
    "core",
    "equals",
    "alzarri",
    "selecting",
    "boundaries",
    "drop",
    "null",
    "values",
    "simpler",
    "form",
    "dropping",
    "okay",
    "case",
    "say",
    "dot",
    "drop",
    "basically",
    "invoking",
    "thing",
    "happening",
    "missing",
    "excluding",
    "sorry",
    "missing",
    "values",
    "series",
    "data",
    "frame",
    "also",
    "works",
    "data",
    "frames",
    "one",
    "one",
    "important",
    "thing",
    "remember",
    "methods",
    "immutable",
    "actually",
    "changing",
    "modifying",
    "original",
    "series",
    "underlying",
    "series",
    "modified",
    "new",
    "series",
    "returned",
    "invoke",
    "thing",
    "modifying",
    "series",
    "creating",
    "new",
    "series",
    "one",
    "missing",
    "values",
    "everything",
    "said",
    "also",
    "works",
    "data",
    "frames",
    "right",
    "frame",
    "say",
    "many",
    "right",
    "first",
    "thing",
    "usually",
    "start",
    "info",
    "method",
    "right",
    "info",
    "see",
    "total",
    "four",
    "entries",
    "four",
    "rows",
    "also",
    "shape",
    "need",
    "information",
    "structure",
    "data",
    "frame",
    "four",
    "rows",
    "four",
    "entries",
    "index",
    "column",
    "two",
    "values",
    "means",
    "two",
    "values",
    "actually",
    "sorry",
    "column",
    "b",
    "three",
    "nought",
    "non",
    "null",
    "values",
    "means",
    "one",
    "value",
    "must",
    "known",
    "column",
    "b",
    "usually",
    "info",
    "gets",
    "close",
    "understand",
    "structure",
    "data",
    "frame",
    "many",
    "values",
    "missing",
    "thing",
    "happens",
    "null",
    "gon",
    "na",
    "get",
    "quick",
    "reference",
    "many",
    "null",
    "values",
    "given",
    "data",
    "frame",
    "drop",
    "works",
    "way",
    "significant",
    "difference",
    "way",
    "drop",
    "works",
    "data",
    "frame",
    "default",
    "dropping",
    "row",
    "least",
    "one",
    "value",
    "row",
    "value",
    "dropped",
    "row",
    "value",
    "dropped",
    "row",
    "two",
    "new",
    "values",
    "dropped",
    "one",
    "dropped",
    "right",
    "harsh",
    "respect",
    "change",
    "make",
    "column",
    "keep",
    "column",
    "values",
    "switching",
    "axis",
    "equals",
    "one",
    "also",
    "way",
    "select",
    "subset",
    "thresholds",
    "delete",
    "rows",
    "less",
    "three",
    "valid",
    "values",
    "example",
    "case",
    "going",
    "use",
    "something",
    "like",
    "strategy",
    "drop",
    "gon",
    "na",
    "say",
    "drop",
    "columns",
    "rows",
    "sorry",
    "columns",
    "also",
    "works",
    "columns",
    "values",
    "drop",
    "default",
    "behavior",
    "drop",
    "rows",
    "value",
    "na",
    "specify",
    "threshold",
    "mean",
    "basically",
    "saying",
    "need",
    "amount",
    "valid",
    "values",
    "order",
    "keep",
    "rope",
    "way",
    "works",
    "ones",
    "drop",
    "wants",
    "keep",
    "based",
    "fresco",
    "identified",
    "values",
    "extremely",
    "simple",
    "clean",
    "sorry",
    "fix",
    "first",
    "method",
    "going",
    "see",
    "fill",
    "within",
    "particular",
    "value",
    "going",
    "say",
    "series",
    "want",
    "fill",
    "blanks",
    "fill",
    "missing",
    "values",
    "fill",
    "anaise",
    "fill",
    "numbers",
    "zero",
    "case",
    "two",
    "numbers",
    "zero",
    "course",
    "use",
    "statistical",
    "method",
    "want",
    "case",
    "use",
    "main",
    "remember",
    "altering",
    "series",
    "original",
    "series",
    "still",
    "changing",
    "creating",
    "new",
    "series",
    "methods",
    "immutable",
    "following",
    "method",
    "following",
    "way",
    "method",
    "works",
    "passing",
    "method",
    "field",
    "backward",
    "fields",
    "possibilities",
    "basically",
    "way",
    "works",
    "overflowing",
    "values",
    "top",
    "least",
    "fairfield",
    "right",
    "starting",
    "dropping",
    "value",
    "dropping",
    "volley",
    "dropping",
    "three",
    "thing",
    "nun",
    "gets",
    "replaced",
    "thing",
    "three",
    "gets",
    "throw",
    "thing",
    "three",
    "right",
    "course",
    "backward",
    "fields",
    "works",
    "way",
    "starts",
    "four",
    "moves",
    "moves",
    "moves",
    "etc",
    "careful",
    "using",
    "values",
    "beginning",
    "end",
    "gon",
    "na",
    "end",
    "values",
    "nothing",
    "fifth",
    "forward",
    "right",
    "first",
    "volley",
    "india",
    "seen",
    "also",
    "works",
    "donna",
    "friend",
    "boggler",
    "fail",
    "field",
    "terms",
    "rows",
    "feeling",
    "right",
    "data",
    "sets",
    "field",
    "row",
    "base",
    "going",
    "one",
    "five",
    "going",
    "field",
    "x",
    "one",
    "use",
    "field",
    "x",
    "zero",
    "vertical",
    "filling",
    "right",
    "going",
    "go",
    "one",
    "130",
    "column",
    "one",
    "130",
    "either",
    "filling",
    "sorry",
    "direction",
    "failing",
    "going",
    "direction",
    "depending",
    "axes",
    "passing",
    "actually",
    "let",
    "going",
    "put",
    "correct",
    "forms",
    "axes",
    "equals",
    "zero",
    "going",
    "columns",
    "going",
    "visit",
    "direction",
    "axes",
    "equals",
    "one",
    "going",
    "row",
    "based",
    "direction",
    "right",
    "volley",
    "got",
    "fail",
    "way",
    "okay",
    "moving",
    "forward",
    "else",
    "checking",
    "values",
    "pretty",
    "much",
    "seen",
    "already",
    "use",
    "know",
    "sum",
    "method",
    "get",
    "many",
    "values",
    "also",
    "old",
    "give",
    "quick",
    "usually",
    "called",
    "boolean",
    "tests",
    "say",
    "ask",
    "values",
    "valid",
    "values",
    "valid",
    "build",
    "complicated",
    "queries",
    "far",
    "good",
    "process",
    "said",
    "beginning",
    "fixing",
    "missing",
    "data",
    "missing",
    "values",
    "nothing",
    "read",
    "data",
    "frame",
    "data",
    "frame",
    "right",
    "read",
    "data",
    "frame",
    "csv",
    "database",
    "value",
    "missing",
    "hole",
    "quickly",
    "identified",
    "able",
    "drop",
    "ones",
    "want",
    "keep",
    "dropping",
    "able",
    "fill",
    "volume",
    "wanted",
    "fill",
    "fill",
    "name",
    "simple",
    "drop",
    "fill",
    "happens",
    "cleaning",
    "data",
    "actually",
    "value",
    "nothing",
    "missing",
    "warnings",
    "invalid",
    "example",
    "sex",
    "column",
    "categorical",
    "column",
    "accepts",
    "question",
    "mark",
    "invalid",
    "simple",
    "see",
    "invalid",
    "value",
    "completely",
    "scope",
    "thing",
    "example",
    "question",
    "mark",
    "age",
    "column",
    "string",
    "age",
    "column",
    "simple",
    "identify",
    "going",
    "clean",
    "let",
    "start",
    "sex",
    "first",
    "simpler",
    "case",
    "first",
    "check",
    "either",
    "unique",
    "volley",
    "counts",
    "going",
    "use",
    "value",
    "counts",
    "seen",
    "method",
    "quick",
    "summary",
    "unique",
    "values",
    "case",
    "volley",
    "counts",
    "also",
    "gives",
    "total",
    "count",
    "values",
    "fix",
    "well",
    "replace",
    "method",
    "extremely",
    "intuitive",
    "replace",
    "case",
    "changing",
    "two",
    "f",
    "end",
    "two",
    "work",
    "multiple",
    "columns",
    "volleys",
    "said",
    "complicated",
    "fix",
    "like",
    "case",
    "know",
    "age",
    "case",
    "know",
    "know",
    "domain",
    "290",
    "invalid",
    "age",
    "human",
    "need",
    "usually",
    "cases",
    "going",
    "need",
    "complicated",
    "fixing",
    "involve",
    "programming",
    "reality",
    "better",
    "coding",
    "case",
    "know",
    "volley",
    "invalid",
    "probably",
    "extra",
    "zero",
    "values",
    "pulling",
    "csv",
    "ages",
    "total",
    "180",
    "290",
    "32",
    "320",
    "example",
    "invalid",
    "values",
    "100",
    "right",
    "100",
    "places",
    "typos",
    "creating",
    "ages",
    "going",
    "fix",
    "well",
    "case",
    "involves",
    "little",
    "bit",
    "programming",
    "dividing",
    "everything",
    "also",
    "something",
    "may",
    "useful",
    "dealing",
    "duplicates",
    "need",
    "first",
    "define",
    "going",
    "duplicate",
    "value",
    "usually",
    "little",
    "bit",
    "political",
    "want",
    "define",
    "going",
    "duplicate",
    "case",
    "series",
    "contains",
    "ambassadors",
    "master",
    "index",
    "country",
    "ambassador",
    "going",
    "value",
    "right",
    "usually",
    "important",
    "part",
    "rating",
    "says",
    "word",
    "conducting",
    "party",
    "want",
    "invite",
    "one",
    "ambassador",
    "per",
    "country",
    "want",
    "repeat",
    "ambassadors",
    "ambassadors",
    "case",
    "going",
    "happen",
    "two",
    "humanize",
    "least",
    "click",
    "clearly",
    "quickly",
    "see",
    "two",
    "belong",
    "country",
    "three",
    "belong",
    "country",
    "define",
    "ones",
    "duplicate",
    "want",
    "ones",
    "duplicate",
    "example",
    "maybe",
    "say",
    "first",
    "one",
    "duplicate",
    "say",
    "last",
    "one",
    "duplicate",
    "first",
    "one",
    "duplicate",
    "actually",
    "say",
    "last",
    "one",
    "one",
    "bite",
    "duplicate",
    "going",
    "political",
    "rules",
    "want",
    "one",
    "let",
    "see",
    "duplicated",
    "method",
    "way",
    "works",
    "default",
    "default",
    "duplicated",
    "method",
    "going",
    "return",
    "true",
    "duplicate",
    "going",
    "invert",
    "going",
    "treat",
    "duplicate",
    "first",
    "instance",
    "says",
    "method",
    "actually",
    "walking",
    "top",
    "right",
    "saying",
    "friends",
    "friends",
    "going",
    "keep",
    "first",
    "time",
    "see",
    "friends",
    "uk",
    "uk",
    "gon",
    "na",
    "keep",
    "sees",
    "uk",
    "realizes",
    "uk",
    "already",
    "already",
    "present",
    "one",
    "going",
    "considered",
    "duplicate",
    "italy",
    "fine",
    "first",
    "occurrence",
    "germany",
    "fine",
    "wrightstown",
    "germany",
    "says",
    "germany",
    "two",
    "times",
    "realizes",
    "germany",
    "duplicates",
    "right",
    "way",
    "works",
    "default",
    "change",
    "change",
    "last",
    "last",
    "element",
    "considered",
    "duplicate",
    "two",
    "considered",
    "duplicate",
    "thing",
    "kim",
    "one",
    "consider",
    "duplicate",
    "either",
    "top",
    "bottom",
    "depending",
    "way",
    "parameter",
    "passing",
    "either",
    "keep",
    "default",
    "keep",
    "last",
    "little",
    "bit",
    "harsh",
    "say",
    "everything",
    "duplicate",
    "actually",
    "needs",
    "considered",
    "duplicate",
    "two",
    "duplicates",
    "three",
    "duplicates",
    "see",
    "right",
    "similar",
    "duplicated",
    "method",
    "pretty",
    "much",
    "tells",
    "values",
    "duplicated",
    "helps",
    "identify",
    "also",
    "drop",
    "duplicates",
    "case",
    "method",
    "going",
    "basically",
    "thing",
    "dropping",
    "values",
    "checked",
    "true",
    "right",
    "method",
    "value",
    "missing",
    "gon",
    "na",
    "drop",
    "rules",
    "apply",
    "default",
    "last",
    "false",
    "subsets",
    "case",
    "ace",
    "multiple",
    "multiple",
    "players",
    "data",
    "frame",
    "happens",
    "player",
    "colby",
    "present",
    "three",
    "times",
    "humanize",
    "see",
    "kobe",
    "three",
    "times",
    "going",
    "happen",
    "way",
    "going",
    "think",
    "duplicates",
    "understanding",
    "correct",
    "subset",
    "check",
    "case",
    "coby",
    "plain",
    "sn",
    "sg",
    "duplicated",
    "two",
    "times",
    "cobie",
    "playing",
    "us",
    "sf",
    "could",
    "considered",
    "different",
    "player",
    "want",
    "maybe",
    "different",
    "season",
    "different",
    "different",
    "position",
    "played",
    "case",
    "need",
    "pass",
    "subset",
    "going",
    "consider",
    "duplicate",
    "check",
    "column",
    "name",
    "check",
    "column",
    "name",
    "check",
    "column",
    "name",
    "default",
    "going",
    "check",
    "entire",
    "data",
    "frame",
    "happens",
    "two",
    "considered",
    "duplicate",
    "one",
    "duplicate",
    "rule",
    "put",
    "keep",
    "last",
    "sorry",
    "keep",
    "false",
    "going",
    "considered",
    "duplicate",
    "second",
    "occurrence",
    "duplicate",
    "one",
    "last",
    "one",
    "completely",
    "different",
    "row",
    "value",
    "position",
    "different",
    "way",
    "works",
    "moving",
    "forward",
    "cleaning",
    "values",
    "going",
    "talk",
    "string",
    "handling",
    "neat",
    "feature",
    "panelists",
    "special",
    "types",
    "columns",
    "special",
    "attributes",
    "given",
    "column",
    "type",
    "df",
    "info",
    "object",
    "string",
    "right",
    "pandas",
    "strings",
    "columns",
    "going",
    "special",
    "attribute",
    "str",
    "daytime",
    "columns",
    "something",
    "going",
    "cover",
    "need",
    "know",
    "daytime",
    "columns",
    "math",
    "attribute",
    "categorical",
    "columns",
    "cat",
    "attributes",
    "attributes",
    "str",
    "dt",
    "cart",
    "special",
    "methods",
    "associated",
    "domain",
    "column",
    "methods",
    "associated",
    "string",
    "course",
    "string",
    "handling",
    "methods",
    "associated",
    "dt",
    "r",
    "data",
    "handling",
    "case",
    "going",
    "review",
    "good",
    "subset",
    "string",
    "methods",
    "apply",
    "something",
    "interesting",
    "methods",
    "good",
    "lot",
    "relevance",
    "related",
    "ones",
    "pure",
    "python",
    "pure",
    "python",
    "string",
    "split",
    "method",
    "contains",
    "method",
    "know",
    "contain",
    "actual",
    "actually",
    "think",
    "operator",
    "strip",
    "replace",
    "right",
    "methods",
    "str",
    "attribute",
    "pandas",
    "analogy",
    "standard",
    "library",
    "string",
    "handling",
    "python",
    "starting",
    "beginning",
    "data",
    "going",
    "delete",
    "data",
    "going",
    "split",
    "values",
    "right",
    "underscore",
    "case",
    "split",
    "volleys",
    "underscore",
    "going",
    "use",
    "special",
    "attribute",
    "expand",
    "expand",
    "sorry",
    "equals",
    "true",
    "going",
    "going",
    "create",
    "data",
    "frame",
    "create",
    "data",
    "frame",
    "70",
    "columns",
    "keep",
    "applying",
    "methods",
    "example",
    "contains",
    "content",
    "contains",
    "regular",
    "contains",
    "regular",
    "expressions",
    "rights",
    "see",
    "power",
    "strip",
    "replace",
    "even",
    "regular",
    "expressions",
    "replacing",
    "could",
    "fix",
    "something",
    "like",
    "question",
    "mark",
    "string",
    "could",
    "fix",
    "regular",
    "expressions",
    "know",
    "handle",
    "finally",
    "something",
    "going",
    "helpful",
    "data",
    "cleaning",
    "looking",
    "data",
    "visualization",
    "perspective",
    "data",
    "cleaning",
    "ton",
    "statistical",
    "understanding",
    "data",
    "volume",
    "considered",
    "outlier",
    "example",
    "might",
    "invalid",
    "want",
    "claim",
    "lot",
    "statistics",
    "case",
    "want",
    "show",
    "quickly",
    "mottled",
    "leave",
    "library",
    "promising",
    "time",
    "mapa",
    "lib",
    "library",
    "far",
    "accessed",
    "directly",
    "pandas",
    "pandas",
    "data",
    "frame",
    "dot",
    "plot",
    "library",
    "mapper",
    "lib",
    "one",
    "backing",
    "methods",
    "going",
    "see",
    "use",
    "directly",
    "model",
    "live",
    "library",
    "two",
    "important",
    "api",
    "gon",
    "na",
    "call",
    "one",
    "one",
    "prefer",
    "global",
    "api",
    "common",
    "one",
    "one",
    "gon",
    "na",
    "find",
    "around",
    "global",
    "api",
    "second",
    "one",
    "object",
    "oriented",
    "api",
    "around",
    "usually",
    "ways",
    "two",
    "different",
    "ways",
    "thing",
    "okay",
    "global",
    "api",
    "api",
    "part",
    "inspired",
    "matlab",
    "around",
    "long",
    "time",
    "sadly",
    "answers",
    "find",
    "stack",
    "overflow",
    "tutorials",
    "books",
    "using",
    "global",
    "api",
    "way",
    "word",
    "one",
    "prefer",
    "gon",
    "na",
    "explain",
    "second",
    "going",
    "object",
    "oriented",
    "api",
    "want",
    "show",
    "reference",
    "follow",
    "feeling",
    "preferring",
    "object",
    "oriented",
    "api",
    "always",
    "translate",
    "global",
    "opie",
    "considered",
    "global",
    "api",
    "well",
    "imported",
    "plot",
    "plt",
    "imported",
    "whole",
    "module",
    "whole",
    "python",
    "module",
    "depending",
    "much",
    "know",
    "python",
    "programming",
    "going",
    "make",
    "sense",
    "important",
    "whole",
    "module",
    "invoking",
    "plt",
    "dot",
    "figure",
    "finally",
    "going",
    "title",
    "finally",
    "planning",
    "two",
    "things",
    "plotting",
    "x",
    "plotting",
    "x",
    "squared",
    "minus",
    "x",
    "squared",
    "global",
    "invoking",
    "functions",
    "module",
    "level",
    "object",
    "final",
    "plot",
    "modified",
    "generalistic",
    "global",
    "courts",
    "right",
    "call",
    "right",
    "modifying",
    "final",
    "result",
    "plot",
    "let",
    "show",
    "complicated",
    "example",
    "see",
    "problems",
    "global",
    "api",
    "look",
    "line",
    "could",
    "delete",
    "everything",
    "let",
    "actually",
    "delete",
    "everything",
    "line",
    "plot",
    "affecting",
    "know",
    "object",
    "oriented",
    "way",
    "saying",
    "second",
    "plot",
    "plot",
    "right",
    "figure",
    "right",
    "actually",
    "sub",
    "plot",
    "right",
    "want",
    "plot",
    "thing",
    "saying",
    "entire",
    "module",
    "depending",
    "order",
    "set",
    "going",
    "land",
    "particular",
    "figure",
    "going",
    "land",
    "plot",
    "going",
    "lend",
    "global",
    "api",
    "start",
    "saying",
    "going",
    "create",
    "figure",
    "trust",
    "going",
    "start",
    "drawing",
    "going",
    "title",
    "hey",
    "way",
    "going",
    "one",
    "row",
    "going",
    "two",
    "columns",
    "gon",
    "na",
    "start",
    "drawing",
    "first",
    "plot",
    "one",
    "right",
    "one",
    "right",
    "left",
    "okay",
    "kind",
    "activated",
    "want",
    "plot",
    "active",
    "going",
    "start",
    "drawing",
    "every",
    "action",
    "happens",
    "line",
    "going",
    "affecting",
    "blocks",
    "blocks",
    "right",
    "plot",
    "x",
    "x",
    "square",
    "plot",
    "vertical",
    "line",
    "put",
    "legend",
    "set",
    "labels",
    "etc",
    "point",
    "stop",
    "say",
    "hey",
    "want",
    "switch",
    "plot",
    "want",
    "start",
    "plotting",
    "sorry",
    "want",
    "start",
    "plotting",
    "second",
    "one",
    "changed",
    "first",
    "line",
    "one",
    "oh",
    "sorry",
    "way",
    "works",
    "saying",
    "first",
    "row",
    "second",
    "column",
    "second",
    "plot",
    "want",
    "start",
    "plotting",
    "every",
    "successive",
    "line",
    "affect",
    "line",
    "see",
    "understanding",
    "code",
    "given",
    "order",
    "order",
    "sequence",
    "lines",
    "hard",
    "debug",
    "report",
    "plot",
    "takes",
    "100",
    "lines",
    "keep",
    "brain",
    "happening",
    "top",
    "different",
    "approach",
    "going",
    "object",
    "oriented",
    "approach",
    "creating",
    "figure",
    "creating",
    "axes",
    "case",
    "case",
    "right",
    "one",
    "entire",
    "figure",
    "red",
    "purple",
    "two",
    "axes",
    "axes",
    "one",
    "access",
    "two",
    "axes",
    "going",
    "create",
    "using",
    "object",
    "oriented",
    "approach",
    "going",
    "keep",
    "references",
    "going",
    "say",
    "later",
    "blocks",
    "artists",
    "sorry",
    "want",
    "plot",
    "something",
    "explicit",
    "going",
    "object",
    "oriented",
    "way",
    "first",
    "thing",
    "creating",
    "figure",
    "dce",
    "axis",
    "case",
    "one",
    "axis",
    "say",
    "axis",
    "want",
    "plug",
    "thing",
    "axis",
    "want",
    "pull",
    "thing",
    "etc",
    "multiple",
    "axes",
    "could",
    "show",
    "going",
    "go",
    "back",
    "second",
    "case",
    "four",
    "axes",
    "right",
    "create",
    "one",
    "figure",
    "four",
    "axes",
    "subplots",
    "method",
    "saying",
    "rows",
    "columns",
    "say",
    "axes",
    "number",
    "one",
    "want",
    "put",
    "thing",
    "axis",
    "number",
    "two",
    "want",
    "put",
    "thing",
    "right",
    "lot",
    "explicit",
    "depending",
    "order",
    "could",
    "change",
    "order",
    "matter",
    "results",
    "gon",
    "na",
    "oxes",
    "number",
    "four",
    "yellow",
    "regardless",
    "position",
    "following",
    "map",
    "live",
    "clear",
    "differences",
    "api",
    "maple",
    "leaf",
    "simple",
    "plot",
    "function",
    "method",
    "depending",
    "sugar",
    "enter",
    "global",
    "plot",
    "something",
    "specify",
    "case",
    "passing",
    "values",
    "x",
    "values",
    "case",
    "passing",
    "given",
    "line",
    "style",
    "change",
    "type",
    "syntax",
    "saying",
    "plotting",
    "thing",
    "x",
    "blowing",
    "thing",
    "second",
    "parameter",
    "want",
    "use",
    "straight",
    "line",
    "straight",
    "line",
    "yes",
    "marker",
    "dot",
    "green",
    "familiar",
    "familiar",
    "bullet",
    "use",
    "send",
    "links",
    "games",
    "say",
    "line",
    "style",
    "market",
    "marker",
    "sorry",
    "color",
    "specific",
    "keyword",
    "arguments",
    "one",
    "line",
    "plots",
    "apa",
    "live",
    "course",
    "huge",
    "variety",
    "plots",
    "way",
    "another",
    "one",
    "want",
    "see",
    "events",
    "grids",
    "create",
    "grids",
    "put",
    "different",
    "things",
    "land",
    "plots",
    "one",
    "good",
    "example",
    "nice",
    "scatterplot",
    "basically",
    "plotting",
    "x",
    "correlation",
    "also",
    "value",
    "color",
    "map",
    "right",
    "given",
    "volume",
    "going",
    "change",
    "color",
    "kind",
    "lets",
    "plot",
    "three",
    "four",
    "dimensions",
    "data",
    "volume",
    "x",
    "volume",
    "size",
    "bubble",
    "color",
    "bubble",
    "pretty",
    "much",
    "encoding",
    "four",
    "dimensions",
    "one",
    "figure",
    "right",
    "case",
    "using",
    "two",
    "different",
    "scatter",
    "plots",
    "information",
    "also",
    "block",
    "histograms",
    "quickly",
    "seen",
    "pandas",
    "pandas",
    "simple",
    "plot",
    "type",
    "histogram",
    "current",
    "histogram",
    "hist",
    "actually",
    "look",
    "previous",
    "lessons",
    "go",
    "back",
    "index",
    "video",
    "histogram",
    "extremely",
    "simple",
    "takes",
    "valleys",
    "plotting",
    "many",
    "bends",
    "want",
    "advanced",
    "arguments",
    "like",
    "alpha",
    "level",
    "etc",
    "simple",
    "similar",
    "histogram",
    "also",
    "create",
    "kernel",
    "density",
    "estimator",
    "diagrams",
    "similar",
    "distance",
    "simulate",
    "want",
    "continuous",
    "distribution",
    "combine",
    "plots",
    "want",
    "case",
    "creating",
    "plots",
    "plotting",
    "histogram",
    "plotting",
    "lines",
    "plotting",
    "changing",
    "limits",
    "pretty",
    "much",
    "also",
    "create",
    "bar",
    "plots",
    "right",
    "case",
    "plt",
    "dot",
    "bar",
    "two",
    "bars",
    "stacked",
    "right",
    "different",
    "way",
    "look",
    "finally",
    "check",
    "outliers",
    "always",
    "plot",
    "histograms",
    "box",
    "plots",
    "right",
    "box",
    "plots",
    "also",
    "nice",
    "feature",
    "data",
    "cleaning",
    "gon",
    "na",
    "keep",
    "moving",
    "forward",
    "tutorial",
    "want",
    "mention",
    "one",
    "thing",
    "notes",
    "kind",
    "task",
    "follow",
    "data",
    "cleaning",
    "identifying",
    "indentifying",
    "missing",
    "values",
    "given",
    "positions",
    "known",
    "right",
    "looking",
    "detail",
    "statistical",
    "properties",
    "data",
    "case",
    "need",
    "clean",
    "okay",
    "little",
    "bit",
    "events",
    "related",
    "concept",
    "cleaning",
    "data",
    "given",
    "domain",
    "statistical",
    "analysis",
    "tell",
    "value",
    "outlier",
    "distribution",
    "value",
    "might",
    "valid",
    "example",
    "human",
    "90",
    "years",
    "old",
    "valid",
    "valid",
    "age",
    "analyzing",
    "data",
    "high",
    "school",
    "students",
    "human",
    "year",
    "soul",
    "going",
    "completely",
    "invalid",
    "going",
    "outlier",
    "distribution",
    "treat",
    "valid",
    "valid",
    "clean",
    "remove",
    "example",
    "deal",
    "little",
    "bit",
    "whole",
    "statistical",
    "analysis",
    "follow",
    "little",
    "bit",
    "advanced",
    "scenario",
    "let",
    "move",
    "forward",
    "rest",
    "videos",
    "time",
    "get",
    "advanced",
    "features",
    "pandas",
    "import",
    "external",
    "data",
    "seen",
    "already",
    "real",
    "life",
    "example",
    "way",
    "import",
    "data",
    "csv",
    "files",
    "sql",
    "databases",
    "right",
    "actually",
    "two",
    "lessons",
    "objective",
    "part",
    "tutorial",
    "show",
    "improve",
    "get",
    "advanced",
    "use",
    "cases",
    "importing",
    "data",
    "going",
    "start",
    "example",
    "csvs",
    "text",
    "files",
    "seen",
    "already",
    "gon",
    "na",
    "give",
    "extra",
    "twist",
    "going",
    "show",
    "advanced",
    "features",
    "special",
    "use",
    "cases",
    "txt",
    "files",
    "csv",
    "files",
    "conceptually",
    "speaking",
    "csv",
    "file",
    "text",
    "file",
    "human",
    "readable",
    "text",
    "right",
    "encoding",
    "information",
    "idea",
    "csv",
    "file",
    "tabular",
    "right",
    "plain",
    "text",
    "file",
    "contains",
    "tabular",
    "data",
    "separated",
    "csv",
    "stands",
    "comma",
    "separated",
    "separated",
    "anything",
    "see",
    "examples",
    "later",
    "basically",
    "idea",
    "text",
    "file",
    "tabular",
    "tabular",
    "format",
    "though",
    "csv",
    "files",
    "text",
    "files",
    "read",
    "method",
    "get",
    "things",
    "started",
    "want",
    "show",
    "basic",
    "way",
    "import",
    "read",
    "data",
    "external",
    "sources",
    "using",
    "python",
    "without",
    "even",
    "starting",
    "yet",
    "pandas",
    "need",
    "know",
    "usually",
    "usually",
    "productive",
    "want",
    "data",
    "scientists",
    "data",
    "analysts",
    "understand",
    "little",
    "bit",
    "fire",
    "reading",
    "writing",
    "works",
    "computers",
    "multiple",
    "multiple",
    "concepts",
    "align",
    "evolved",
    "operating",
    "systems",
    "processes",
    "language",
    "right",
    "thing",
    "read",
    "file",
    "python",
    "another",
    "language",
    "multiple",
    "concepts",
    "even",
    "though",
    "pandas",
    "case",
    "make",
    "simple",
    "simple",
    "read",
    "write",
    "data",
    "get",
    "little",
    "bit",
    "advanced",
    "use",
    "case",
    "know",
    "internals",
    "operating",
    "system",
    "processes",
    "language",
    "way",
    "read",
    "data",
    "reader",
    "file",
    "sorry",
    "using",
    "pure",
    "python",
    "use",
    "function",
    "open",
    "case",
    "using",
    "context",
    "manager",
    "security",
    "feature",
    "related",
    "advanced",
    "usage",
    "reading",
    "writing",
    "files",
    "creates",
    "file",
    "pointer",
    "right",
    "file",
    "pointer",
    "use",
    "simple",
    "api",
    "x",
    "point",
    "post",
    "pointer",
    "something",
    "like",
    "red",
    "line",
    "red",
    "lines",
    "read",
    "number",
    "bytes",
    "characters",
    "even",
    "trade",
    "fp",
    "iterator",
    "four",
    "line",
    "fp",
    "basically",
    "going",
    "something",
    "like",
    "start",
    "reading",
    "data",
    "top",
    "bottom",
    "month",
    "know",
    "hit",
    "given",
    "case",
    "couple",
    "lines",
    "else",
    "gets",
    "difficult",
    "reading",
    "text",
    "files",
    "process",
    "usually",
    "hard",
    "parse",
    "structure",
    "file",
    "thing",
    "funnel",
    "separated",
    "comma",
    "separated",
    "colons",
    "separated",
    "pipes",
    "spaces",
    "etc",
    "gon",
    "na",
    "see",
    "want",
    "get",
    "little",
    "bit",
    "know",
    "little",
    "bit",
    "advanced",
    "usage",
    "right",
    "little",
    "bit",
    "fancy",
    "calculations",
    "way",
    "parse",
    "data",
    "gon",
    "na",
    "gon",
    "na",
    "get",
    "harder",
    "going",
    "use",
    "pandas",
    "going",
    "show",
    "second",
    "module",
    "part",
    "python",
    "file",
    "going",
    "reading",
    "xm",
    "review",
    "file",
    "going",
    "open",
    "even",
    "though",
    "look",
    "like",
    "csv",
    "either",
    "csv",
    "difference",
    "separator",
    "greater",
    "sign",
    "comma",
    "greater",
    "sign",
    "going",
    "marks",
    "elimination",
    "different",
    "fields",
    "csv",
    "file",
    "gon",
    "na",
    "use",
    "csv",
    "module",
    "way",
    "right",
    "parse",
    "data",
    "using",
    "module",
    "passing",
    "special",
    "delegator",
    "right",
    "gon",
    "na",
    "type",
    "work",
    "might",
    "need",
    "parsing",
    "data",
    "thing",
    "limiter",
    "dates",
    "greater",
    "sign",
    "thing",
    "numbers",
    "example",
    "enclosed",
    "quotes",
    "things",
    "right",
    "change",
    "way",
    "work",
    "days",
    "going",
    "abstracted",
    "away",
    "pandas",
    "module",
    "get",
    "things",
    "started",
    "pandas",
    "least",
    "pandas",
    "multiple",
    "read",
    "underscore",
    "something",
    "methods",
    "work",
    "different",
    "sources",
    "right",
    "saw",
    "already",
    "read",
    "sequel",
    "seen",
    "read",
    "csv",
    "also",
    "read",
    "html",
    "directly",
    "parse",
    "information",
    "table",
    "literally",
    "pass",
    "website",
    "going",
    "read",
    "information",
    "table",
    "read",
    "jason",
    "read",
    "advanced",
    "formats",
    "like",
    "pocket",
    "stata",
    "etc",
    "file",
    "format",
    "usually",
    "correspondence",
    "pandas",
    "never",
    "chance",
    "rewrite",
    "stuff",
    "honest",
    "thing",
    "going",
    "happen",
    "something",
    "like",
    "excel",
    "might",
    "need",
    "external",
    "modules",
    "directly",
    "provided",
    "pandas",
    "installing",
    "modules",
    "easily",
    "incorporate",
    "excel",
    "files",
    "day",
    "day",
    "work",
    "read",
    "csv",
    "file",
    "methods",
    "already",
    "ton",
    "parameters",
    "day",
    "main",
    "characteristic",
    "rate",
    "something",
    "methods",
    "given",
    "amount",
    "possibilities",
    "going",
    "files",
    "exist",
    "ton",
    "different",
    "ways",
    "customize",
    "method",
    "invocation",
    "alright",
    "csv",
    "files",
    "saw",
    "multiple",
    "things",
    "happen",
    "csv",
    "passage",
    "header",
    "header",
    "different",
    "delimiters",
    "different",
    "closing",
    "strings",
    "numbers",
    "multiple",
    "things",
    "blank",
    "lines",
    "etc",
    "multiple",
    "things",
    "going",
    "happen",
    "able",
    "customize",
    "read",
    "csv",
    "method",
    "reference",
    "attributes",
    "pass",
    "usually",
    "something",
    "often",
    "use",
    "pandas",
    "lot",
    "still",
    "something",
    "like",
    "read",
    "csv",
    "get",
    "documentation",
    "right",
    "look",
    "parameters",
    "think",
    "need",
    "pass",
    "particular",
    "use",
    "case",
    "keep",
    "eye",
    "always",
    "docs",
    "impossible",
    "remember",
    "parameters",
    "csv",
    "case",
    "gon",
    "na",
    "something",
    "interesting",
    "gon",
    "na",
    "parse",
    "csv",
    "file",
    "located",
    "computer",
    "locally",
    "available",
    "computer",
    "csv",
    "file",
    "one",
    "right",
    "actually",
    "source",
    "get",
    "raw",
    "version",
    "thing",
    "csv",
    "file",
    "could",
    "download",
    "file",
    "right",
    "file",
    "save",
    "get",
    "csv",
    "file",
    "computer",
    "uploaded",
    "right",
    "copy",
    "paste",
    "drag",
    "drop",
    "actually",
    "pain",
    "nice",
    "characteristic",
    "read",
    "csv",
    "either",
    "locally",
    "btc",
    "market",
    "price",
    "also",
    "remotely",
    "automatically",
    "going",
    "download",
    "content",
    "files",
    "going",
    "provide",
    "going",
    "save",
    "memory",
    "usage",
    "neat",
    "feature",
    "csv",
    "file",
    "using",
    "thing",
    "local",
    "file",
    "works",
    "way",
    "features",
    "seen",
    "already",
    "case",
    "heather",
    "known",
    "want",
    "treat",
    "first",
    "row",
    "header",
    "missing",
    "values",
    "treat",
    "values",
    "like",
    "question",
    "mark",
    "like",
    "exclamation",
    "mark",
    "dash",
    "etc",
    "us",
    "number",
    "value",
    "right",
    "missing",
    "value",
    "values",
    "passed",
    "transformed",
    "another",
    "number",
    "easier",
    "easier",
    "process",
    "cleaning",
    "pass",
    "names",
    "going",
    "basically",
    "column",
    "names",
    "one",
    "also",
    "specify",
    "column",
    "types",
    "see",
    "right",
    "types",
    "going",
    "float",
    "object",
    "done",
    "already",
    "one",
    "lessons",
    "parsing",
    "time",
    "go",
    "putting",
    "together",
    "get",
    "advanced",
    "forms",
    "reading",
    "csvs",
    "passing",
    "column",
    "names",
    "passing",
    "types",
    "asking",
    "read",
    "dates",
    "passing",
    "values",
    "heather",
    "etc",
    "pretty",
    "common",
    "thing",
    "xm",
    "review",
    "try",
    "parsing",
    "thing",
    "get",
    "ugly",
    "format",
    "case",
    "put",
    "parameter",
    "specify",
    "used",
    "call",
    "delimiter",
    "csv",
    "set",
    "separator",
    "separator",
    "going",
    "greatest",
    "sign",
    "works",
    "needs",
    "examples",
    "check",
    "important",
    "part",
    "following",
    "right",
    "documentation",
    "find",
    "particular",
    "use",
    "cases",
    "example",
    "like",
    "skip",
    "blank",
    "lines",
    "whenever",
    "like",
    "empty",
    "rows",
    "beginning",
    "right",
    "empty",
    "rows",
    "beginning",
    "something",
    "also",
    "say",
    "skip",
    "rows",
    "need",
    "parse",
    "going",
    "break",
    "etc",
    "part",
    "read",
    "csv",
    "file",
    "finalize",
    "part",
    "least",
    "csvs",
    "going",
    "tell",
    "something",
    "applies",
    "pretty",
    "much",
    "every",
    "data",
    "format",
    "read",
    "something",
    "method",
    "going",
    "something",
    "method",
    "basically",
    "process",
    "writing",
    "read",
    "csv",
    "csv",
    "csv",
    "imported",
    "external",
    "source",
    "remote",
    "source",
    "csv",
    "going",
    "store",
    "locally",
    "alright",
    "multiple",
    "options",
    "also",
    "pass",
    "csv",
    "delimiter",
    "actually",
    "separator",
    "want",
    "include",
    "header",
    "want",
    "include",
    "index",
    "etc",
    "pretty",
    "much",
    "one",
    "idea",
    "every",
    "read",
    "something",
    "method",
    "gon",
    "na",
    "exist",
    "something",
    "method",
    "basically",
    "process",
    "writing",
    "let",
    "move",
    "forward",
    "data",
    "formats",
    "interesting",
    "gon",
    "na",
    "get",
    "read",
    "directly",
    "html",
    "pages",
    "couple",
    "minutes",
    "time",
    "read",
    "data",
    "databases",
    "already",
    "done",
    "real",
    "example",
    "panis",
    "part",
    "tutorial",
    "want",
    "show",
    "little",
    "bit",
    "details",
    "details",
    "understand",
    "data",
    "processed",
    "case",
    "common",
    "scenario",
    "importing",
    "data",
    "databases",
    "libraries",
    "need",
    "first",
    "thing",
    "depending",
    "database",
    "engine",
    "using",
    "postgres",
    "mysql",
    "oracle",
    "etc",
    "need",
    "install",
    "different",
    "libraries",
    "api",
    "installed",
    "libraries",
    "going",
    "actually",
    "p",
    "ep",
    "python",
    "actually",
    "defines",
    "interface",
    "databases",
    "libraries",
    "unpin",
    "work",
    "pretty",
    "much",
    "database",
    "sql",
    "common",
    "database",
    "comply",
    "interface",
    "example",
    "going",
    "use",
    "sql",
    "lite",
    "database",
    "right",
    "nothing",
    "server",
    "connect",
    "etc",
    "extremely",
    "simple",
    "get",
    "started",
    "example",
    "going",
    "use",
    "danavas",
    "example",
    "going",
    "use",
    "actually",
    "different",
    "one",
    "previous",
    "video",
    "reading",
    "previous",
    "one",
    "using",
    "circular",
    "case",
    "going",
    "using",
    "chinuch",
    "smaller",
    "structure",
    "size",
    "going",
    "little",
    "bit",
    "simpler",
    "get",
    "things",
    "going",
    "thing",
    "previous",
    "part",
    "read",
    "data",
    "files",
    "show",
    "actually",
    "read",
    "data",
    "using",
    "python",
    "forget",
    "pandas",
    "second",
    "told",
    "go",
    "back",
    "beginning",
    "time",
    "pain",
    "way",
    "writing",
    "finance",
    "open",
    "fp",
    "fp",
    "red",
    "lines",
    "etc",
    "want",
    "show",
    "predates",
    "pin",
    "default",
    "way",
    "read",
    "data",
    "paying",
    "regular",
    "interface",
    "python",
    "way",
    "works",
    "gon",
    "na",
    "import",
    "sql",
    "lite",
    "three",
    "gon",
    "na",
    "create",
    "connection",
    "connection",
    "common",
    "interface",
    "common",
    "pretty",
    "much",
    "database",
    "used",
    "default",
    "behavior",
    "going",
    "create",
    "cursor",
    "going",
    "execute",
    "queries",
    "using",
    "cursor",
    "case",
    "going",
    "execute",
    "regular",
    "select",
    "star",
    "employees",
    "limit",
    "fox",
    "want",
    "five",
    "five",
    "records",
    "table",
    "employees",
    "executed",
    "query",
    "like",
    "waiting",
    "fetch",
    "get",
    "results",
    "query",
    "results",
    "noticing",
    "result",
    "list",
    "tables",
    "extremely",
    "useful",
    "combine",
    "pain",
    "create",
    "data",
    "frame",
    "info",
    "close",
    "perfect",
    "close",
    "let",
    "show",
    "gon",
    "na",
    "close",
    "kurt",
    "dickerson",
    "connection",
    "let",
    "show",
    "work",
    "pandas",
    "pandas",
    "read",
    "csv",
    "method",
    "also",
    "read",
    "see",
    "read",
    "sql",
    "method",
    "case",
    "method",
    "going",
    "receive",
    "first",
    "parameter",
    "going",
    "query",
    "passing",
    "second",
    "parameter",
    "going",
    "connection",
    "object",
    "connection",
    "object",
    "actually",
    "issue",
    "connection",
    "panelists",
    "gets",
    "simple",
    "writing",
    "query",
    "everything",
    "imported",
    "data",
    "frame",
    "including",
    "column",
    "names",
    "want",
    "get",
    "little",
    "bit",
    "fancier",
    "either",
    "specify",
    "index",
    "column",
    "going",
    "use",
    "course",
    "index",
    "also",
    "types",
    "parse",
    "specific",
    "column",
    "pretty",
    "much",
    "work",
    "going",
    "something",
    "manual",
    "processing",
    "things",
    "coarser",
    "etc",
    "might",
    "also",
    "low",
    "using",
    "pain",
    "actually",
    "imported",
    "data",
    "database",
    "actually",
    "caveat",
    "going",
    "tell",
    "kind",
    "deep",
    "detail",
    "way",
    "pandas",
    "works",
    "read",
    "sql",
    "method",
    "actually",
    "shell",
    "two",
    "methods",
    "read",
    "sql",
    "query",
    "read",
    "sql",
    "table",
    "alright",
    "right",
    "sql",
    "table",
    "read",
    "sql",
    "query",
    "using",
    "read",
    "sql",
    "actually",
    "kind",
    "forward",
    "work",
    "either",
    "query",
    "table",
    "sql",
    "query",
    "default",
    "behavior",
    "done",
    "far",
    "case",
    "going",
    "issue",
    "query",
    "connection",
    "going",
    "read",
    "contrast",
    "rate",
    "sql",
    "table",
    "read",
    "entire",
    "table",
    "pass",
    "name",
    "going",
    "automatically",
    "give",
    "information",
    "case",
    "column",
    "names",
    "etc",
    "lot",
    "simpler",
    "read",
    "entire",
    "table",
    "thing",
    "keep",
    "mind",
    "use",
    "method",
    "need",
    "install",
    "libraries",
    "sql",
    "alchemy",
    "connections",
    "generated",
    "case",
    "create",
    "engine",
    "create",
    "connection",
    "objects",
    "pass",
    "actual",
    "auction",
    "object",
    "sorry",
    "pandas",
    "pretty",
    "much",
    "find",
    "red",
    "star",
    "table",
    "red",
    "star",
    "table",
    "lot",
    "easier",
    "write",
    "sql",
    "table",
    "going",
    "advance",
    "saw",
    "read",
    "csv",
    "files",
    "hard",
    "csv",
    "sorry",
    "read",
    "csv",
    "method",
    "csv",
    "method",
    "thing",
    "happens",
    "read",
    "sql",
    "read",
    "sql",
    "results",
    "sql",
    "going",
    "let",
    "get",
    "database",
    "write",
    "database",
    "table",
    "directly",
    "going",
    "also",
    "receive",
    "connection",
    "right",
    "sql",
    "gon",
    "na",
    "receive",
    "name",
    "data",
    "frame",
    "table",
    "name",
    "going",
    "connection",
    "object",
    "something",
    "keep",
    "mind",
    "sql",
    "important",
    "parameter",
    "happens",
    "table",
    "already",
    "exists",
    "default",
    "way",
    "going",
    "fail",
    "going",
    "throw",
    "error",
    "trying",
    "save",
    "data",
    "table",
    "makes",
    "sense",
    "data",
    "analysts",
    "usually",
    "reading",
    "data",
    "processing",
    "much",
    "writing",
    "want",
    "meet",
    "make",
    "sure",
    "mistake",
    "actually",
    "want",
    "write",
    "data",
    "change",
    "parameter",
    "exists",
    "something",
    "like",
    "replace",
    "append",
    "usually",
    "writing",
    "intermediate",
    "intermediary",
    "table",
    "tables",
    "choose",
    "either",
    "replace",
    "whole",
    "concept",
    "table",
    "careful",
    "append",
    "write",
    "write",
    "dn",
    "current",
    "table",
    "see",
    "way",
    "read",
    "data",
    "databases",
    "course",
    "touching",
    "anything",
    "like",
    "sql",
    "lot",
    "advanced",
    "already",
    "know",
    "sql",
    "already",
    "working",
    "databases",
    "pretty",
    "much",
    "copy",
    "paste",
    "gon",
    "na",
    "gon",
    "na",
    "get",
    "data",
    "import",
    "python",
    "let",
    "move",
    "forward",
    "read",
    "html",
    "files",
    "quickly",
    "going",
    "show",
    "read",
    "tables",
    "data",
    "frames",
    "directly",
    "html",
    "web",
    "pages",
    "honest",
    "simple",
    "method",
    "going",
    "read",
    "html",
    "depends",
    "lot",
    "structure",
    "web",
    "page",
    "well",
    "structured",
    "tables",
    "correctly",
    "created",
    "going",
    "issues",
    "ton",
    "data",
    "cleaning",
    "experience",
    "whenever",
    "try",
    "parse",
    "table",
    "well",
    "structure",
    "site",
    "like",
    "wikipedia",
    "stats",
    "site",
    "usually",
    "works",
    "well",
    "quick",
    "way",
    "hacking",
    "know",
    "whenever",
    "questions",
    "know",
    "like",
    "know",
    "need",
    "know",
    "gdp",
    "countries",
    "instead",
    "looking",
    "gdp",
    "data",
    "set",
    "go",
    "wikipedia",
    "page",
    "usually",
    "table",
    "directly",
    "parse",
    "done",
    "relatively",
    "simple",
    "way",
    "get",
    "data",
    "quick",
    "hacking",
    "exploration",
    "way",
    "going",
    "work",
    "html",
    "creative",
    "testing",
    "purposes",
    "get",
    "started",
    "usually",
    "course",
    "try",
    "read",
    "something",
    "live",
    "website",
    "going",
    "pass",
    "url",
    "read",
    "html",
    "method",
    "read",
    "html",
    "method",
    "download",
    "content",
    "page",
    "parse",
    "let",
    "suppose",
    "content",
    "already",
    "html",
    "looks",
    "like",
    "exactly",
    "html",
    "top",
    "displaying",
    "book",
    "gon",
    "na",
    "gon",
    "na",
    "invoke",
    "method",
    "read",
    "html",
    "read",
    "html",
    "method",
    "going",
    "parse",
    "entire",
    "html",
    "look",
    "multiple",
    "tables",
    "one",
    "site",
    "potentially",
    "multiple",
    "tables",
    "even",
    "see",
    "common",
    "way",
    "structure",
    "things",
    "html",
    "use",
    "tables",
    "going",
    "pause",
    "multiple",
    "tables",
    "case",
    "stored",
    "dfs",
    "multiple",
    "player",
    "like",
    "multiple",
    "data",
    "frames",
    "see",
    "one",
    "case",
    "going",
    "get",
    "first",
    "data",
    "frame",
    "correctly",
    "parsed",
    "working",
    "way",
    "going",
    "happen",
    "example",
    "things",
    "headings",
    "table",
    "header",
    "gon",
    "na",
    "automatically",
    "right",
    "case",
    "pretty",
    "much",
    "know",
    "already",
    "case",
    "going",
    "see",
    "told",
    "data",
    "cleaning",
    "process",
    "table",
    "header",
    "like",
    "previous",
    "one",
    "head",
    "head",
    "attribute",
    "case",
    "header",
    "another",
    "row",
    "read",
    "html",
    "going",
    "issues",
    "provide",
    "little",
    "bit",
    "extra",
    "information",
    "let",
    "see",
    "another",
    "realistic",
    "example",
    "going",
    "parse",
    "data",
    "directly",
    "website",
    "let",
    "tell",
    "educational",
    "purposes",
    "always",
    "need",
    "understand",
    "data",
    "public",
    "actually",
    "parse",
    "wikipedia",
    "least",
    "content",
    "created",
    "comments",
    "get",
    "hand",
    "want",
    "show",
    "complicated",
    "table",
    "multiple",
    "headers",
    "etc",
    "using",
    "example",
    "gon",
    "na",
    "get",
    "url",
    "gon",
    "na",
    "directly",
    "nba",
    "tables",
    "equals",
    "read",
    "html",
    "table",
    "page",
    "one",
    "large",
    "one",
    "works",
    "gon",
    "na",
    "get",
    "nba",
    "going",
    "see",
    "players",
    "case",
    "parsed",
    "something",
    "else",
    "let",
    "actually",
    "open",
    "page",
    "right",
    "wikipedia",
    "simpsons",
    "probably",
    "find",
    "several",
    "tables",
    "see",
    "one",
    "right",
    "one",
    "going",
    "import",
    "27",
    "tables",
    "see",
    "see",
    "sorry",
    "important",
    "one",
    "one",
    "care",
    "one",
    "right",
    "problem",
    "gon",
    "na",
    "table",
    "using",
    "columns",
    "pans",
    "rows",
    "pans",
    "case",
    "column",
    "pans",
    "one",
    "three",
    "columns",
    "row",
    "stands",
    "123",
    "least",
    "three",
    "rows",
    "column",
    "spans",
    "results",
    "ugly",
    "data",
    "frame",
    "need",
    "little",
    "bit",
    "extra",
    "cleaning",
    "probably",
    "going",
    "find",
    "html",
    "tables",
    "usually",
    "things",
    "well",
    "formatted",
    "machines",
    "formatted",
    "humans",
    "example",
    "case",
    "header",
    "repeated",
    "parse",
    "data",
    "going",
    "find",
    "every",
    "20",
    "rows",
    "going",
    "header",
    "row",
    "clinic",
    "every",
    "case",
    "enter",
    "rows",
    "need",
    "drop",
    "something",
    "like",
    "df",
    "drop",
    "let",
    "see",
    "actually",
    "see",
    "tried",
    "let",
    "like",
    "head",
    "going",
    "find",
    "25",
    "records",
    "record",
    "22",
    "find",
    "heather",
    "going",
    "need",
    "something",
    "like",
    "df",
    "drop",
    "df",
    "dot",
    "drop",
    "range",
    "22",
    "starting",
    "22",
    "f",
    "shape",
    "zero",
    "right",
    "many",
    "rows",
    "plus",
    "one",
    "plus",
    "one",
    "every",
    "20",
    "rows",
    "know",
    "going",
    "work",
    "run",
    "hope",
    "even",
    "work",
    "compile",
    "oh",
    "nba",
    "actually",
    "go",
    "maybe",
    "works",
    "check",
    "going",
    "say",
    "cleaning",
    "html",
    "pages",
    "optimized",
    "humans",
    "machines",
    "usually",
    "going",
    "take",
    "little",
    "bit",
    "time",
    "good",
    "news",
    "usually",
    "service",
    "associated",
    "consult",
    "example",
    "wikipedia",
    "api",
    "use",
    "instead",
    "page",
    "sometimes",
    "easier",
    "pull",
    "data",
    "directly",
    "wikipedia",
    "also",
    "write",
    "data",
    "csv",
    "course",
    "html",
    "pretty",
    "much",
    "standard",
    "said",
    "read",
    "data",
    "portion",
    "gon",
    "na",
    "move",
    "forward",
    "methods",
    "especially",
    "call",
    "data",
    "wrangling",
    "going",
    "little",
    "bit",
    "grouping",
    "keep",
    "moving",
    "forward",
    "tutorial",
    "decided",
    "kind",
    "last",
    "minute",
    "final",
    "source",
    "external",
    "data",
    "going",
    "excel",
    "file",
    "common",
    "excel",
    "files",
    "know",
    "imagine",
    "might",
    "come",
    "excel",
    "backgrounds",
    "export",
    "data",
    "excel",
    "files",
    "excel",
    "spreadsheets",
    "load",
    "jupyter",
    "notebook",
    "start",
    "working",
    "try",
    "things",
    "kind",
    "draw",
    "pearls",
    "excel",
    "pandas",
    "python",
    "first",
    "thing",
    "excel",
    "file",
    "text",
    "file",
    "try",
    "getting",
    "content",
    "text",
    "file",
    "simple",
    "parse",
    "gon",
    "na",
    "require",
    "external",
    "tools",
    "already",
    "installed",
    "notebooks",
    "ai",
    "might",
    "student",
    "holding",
    "goal",
    "depends",
    "computer",
    "going",
    "install",
    "keep",
    "mind",
    "might",
    "issues",
    "importing",
    "data",
    "excel",
    "low",
    "compatibility",
    "library",
    "using",
    "another",
    "spreadsheet",
    "version",
    "using",
    "without",
    "without",
    "getting",
    "details",
    "read",
    "excel",
    "method",
    "pretty",
    "much",
    "takes",
    "care",
    "everything",
    "different",
    "parameters",
    "like",
    "finding",
    "sheet",
    "reading",
    "course",
    "path",
    "etc",
    "going",
    "start",
    "reading",
    "file",
    "products",
    "file",
    "three",
    "sheets",
    "products",
    "descriptions",
    "merchants",
    "actually",
    "something",
    "use",
    "excel",
    "file",
    "sorry",
    "data",
    "analysis",
    "excel",
    "pandas",
    "course",
    "show",
    "merge",
    "data",
    "file",
    "gon",
    "na",
    "read",
    "excel",
    "gon",
    "na",
    "see",
    "reads",
    "first",
    "sheet",
    "excel",
    "file",
    "mean",
    "data",
    "frame",
    "corresponds",
    "one",
    "sheet",
    "right",
    "first",
    "one",
    "product",
    "writing",
    "different",
    "behaviors",
    "change",
    "way",
    "parse",
    "heather",
    "etc",
    "notoriety",
    "defining",
    "specific",
    "index",
    "pretty",
    "much",
    "everything",
    "seen",
    "far",
    "selecting",
    "specific",
    "shifts",
    "simple",
    "pause",
    "sheet",
    "name",
    "share",
    "rate",
    "story",
    "either",
    "products",
    "merchants",
    "whatever",
    "available",
    "current",
    "excel",
    "file",
    "another",
    "format",
    "new",
    "specific",
    "class",
    "little",
    "bit",
    "advanced",
    "excel",
    "file",
    "class",
    "right",
    "excel",
    "directly",
    "going",
    "read",
    "thought",
    "excel",
    "file",
    "data",
    "frame",
    "going",
    "instantiate",
    "excel",
    "file",
    "class",
    "parameter",
    "file",
    "name",
    "files",
    "gon",
    "na",
    "reference",
    "everything",
    "case",
    "example",
    "sheet",
    "names",
    "going",
    "tell",
    "product",
    "descriptions",
    "merchants",
    "little",
    "bit",
    "explanatory",
    "data",
    "analysis",
    "let",
    "say",
    "ca",
    "use",
    "excel",
    "actually",
    "see",
    "contents",
    "excel",
    "file",
    "going",
    "helpful",
    "going",
    "first",
    "parse",
    "excel",
    "file",
    "get",
    "sheet",
    "names",
    "little",
    "bit",
    "understanding",
    "say",
    "files",
    "previously",
    "parsed",
    "right",
    "instantiated",
    "parse",
    "product",
    "product",
    "sheet",
    "going",
    "get",
    "frame",
    "thing",
    "going",
    "happen",
    "parameters",
    "weekend",
    "pass",
    "read",
    "excel",
    "finally",
    "see",
    "results",
    "excel",
    "file",
    "works",
    "pretty",
    "much",
    "way",
    "csv",
    "decide",
    "pass",
    "index",
    "also",
    "define",
    "going",
    "pass",
    "sheet",
    "name",
    "going",
    "default",
    "one",
    "see",
    "getting",
    "data",
    "excel",
    "file",
    "csv",
    "data",
    "frames",
    "array",
    "extremely",
    "simple",
    "customizations",
    "let",
    "say",
    "file",
    "shifted",
    "array",
    "either",
    "rows",
    "columns",
    "change",
    "star",
    "row",
    "column",
    "going",
    "work",
    "pretty",
    "much",
    "thing",
    "need",
    "writing",
    "process",
    "little",
    "bit",
    "complicated",
    "like",
    "example",
    "want",
    "write",
    "specific",
    "sheets",
    "multi",
    "sheets",
    "excel",
    "file",
    "use",
    "call",
    "excel",
    "right",
    "also",
    "part",
    "fantasy",
    "instantiate",
    "rider",
    "start",
    "ride",
    "process",
    "saying",
    "shades",
    "want",
    "ride",
    "one",
    "friend",
    "reading",
    "writing",
    "data",
    "excel",
    "files",
    "relatively",
    "simple",
    "depends",
    "libraries",
    "installed",
    "depends",
    "libraries",
    "current",
    "environment",
    "windows",
    "linux",
    "slash",
    "slash",
    "mark",
    "documentation",
    "pd",
    "dot",
    "read",
    "excel",
    "might",
    "details",
    "given",
    "platform",
    "let",
    "see",
    "names",
    "per",
    "document",
    "gon",
    "na",
    "pandas",
    "documentation",
    "might",
    "requirement",
    "one",
    "platforms",
    "pan",
    "supported",
    "check",
    "check",
    "platform",
    "windows",
    "mac",
    "linux",
    "get",
    "libraries",
    "installed",
    "case",
    "getting",
    "started",
    "python",
    "might",
    "come",
    "another",
    "language",
    "objective",
    "quick",
    "section",
    "show",
    "python",
    "ideally",
    "10",
    "minutes",
    "think",
    "going",
    "take",
    "little",
    "bit",
    "quick",
    "reference",
    "python",
    "high",
    "level",
    "features",
    "language",
    "use",
    "code",
    "functions",
    "import",
    "modules",
    "variables",
    "data",
    "types",
    "collections",
    "etc",
    "scroll",
    "notebook",
    "want",
    "take",
    "less",
    "time",
    "providing",
    "explanation",
    "top",
    "topics",
    "good",
    "reference",
    "entire",
    "language",
    "get",
    "things",
    "started",
    "python",
    "old",
    "language",
    "period",
    "card",
    "caught",
    "attention",
    "past",
    "five",
    "10",
    "years",
    "old",
    "language",
    "even",
    "older",
    "java",
    "1990s",
    "created",
    "person",
    "good",
    "guido",
    "van",
    "rossum",
    "important",
    "actor",
    "ecosystem",
    "used",
    "think",
    "still",
    "one",
    "deciding",
    "discussions",
    "etc",
    "comes",
    "defining",
    "features",
    "language",
    "etc",
    "python",
    "high",
    "level",
    "interpreted",
    "dynamic",
    "language",
    "means",
    "tone",
    "actually",
    "read",
    "entire",
    "sentence",
    "interpreted",
    "high",
    "level",
    "general",
    "purpose",
    "basically",
    "high",
    "level",
    "programming",
    "language",
    "object",
    "oriented",
    "also",
    "includes",
    "functional",
    "attributes",
    "functional",
    "features",
    "like",
    "functions",
    "first",
    "class",
    "objects",
    "etc",
    "also",
    "course",
    "supports",
    "imperative",
    "programming",
    "wide",
    "variety",
    "applications",
    "web",
    "development",
    "python",
    "scripting",
    "lot",
    "use",
    "system",
    "development",
    "configuring",
    "machines",
    "general",
    "course",
    "also",
    "data",
    "science",
    "multiple",
    "applications",
    "couple",
    "interesting",
    "features",
    "like",
    "indentation",
    "defining",
    "blocks",
    "etc",
    "make",
    "good",
    "language",
    "get",
    "started",
    "programming",
    "python",
    "first",
    "language",
    "comfortable",
    "good",
    "idea",
    "first",
    "language",
    "hope",
    "taught",
    "people",
    "programming",
    "python",
    "first",
    "language",
    "seriously",
    "always",
    "good",
    "python",
    "weird",
    "things",
    "like",
    "javascript",
    "java",
    "concise",
    "language",
    "consistent",
    "language",
    "honest",
    "let",
    "get",
    "started",
    "quickly",
    "first",
    "going",
    "install",
    "python",
    "computer",
    "use",
    "notebooks",
    "ai",
    "google",
    "call",
    "installing",
    "computer",
    "might",
    "see",
    "install",
    "either",
    "python",
    "two",
    "python",
    "three",
    "actually",
    "reading",
    "tutorials",
    "online",
    "etc",
    "might",
    "see",
    "python",
    "two",
    "python",
    "three",
    "reality",
    "python",
    "two",
    "deprecated",
    "2020",
    "use",
    "anymore",
    "still",
    "ways",
    "install",
    "python",
    "two",
    "deprecated",
    "use",
    "python",
    "two",
    "stick",
    "python",
    "three",
    "evolution",
    "language",
    "ton",
    "fixes",
    "python",
    "bay",
    "things",
    "happen",
    "language",
    "used",
    "confuse",
    "beginners",
    "longer",
    "problem",
    "python",
    "three",
    "use",
    "read",
    "multiple",
    "tutorials",
    "etc",
    "using",
    "python",
    "two",
    "try",
    "using",
    "python",
    "three",
    "sometimes",
    "code",
    "break",
    "changes",
    "fix",
    "hard",
    "get",
    "things",
    "started",
    "drawing",
    "problem",
    "regular",
    "syntaxes",
    "example",
    "way",
    "define",
    "function",
    "example",
    "javascript",
    "also",
    "similar",
    "something",
    "like",
    "c",
    "java",
    "based",
    "languages",
    "function",
    "keyword",
    "curly",
    "braces",
    "etc",
    "drawing",
    "parlors",
    "sort",
    "languages",
    "get",
    "things",
    "way",
    "defined",
    "function",
    "python",
    "way",
    "main",
    "characteristic",
    "language",
    "way",
    "going",
    "define",
    "blocks",
    "using",
    "different",
    "indentation",
    "levels",
    "valid",
    "function",
    "python",
    "def",
    "key",
    "use",
    "name",
    "function",
    "parameters",
    "receives",
    "way",
    "define",
    "body",
    "function",
    "indenting",
    "everything",
    "one",
    "level",
    "right",
    "usually",
    "spaces",
    "another",
    "example",
    "else",
    "statement",
    "thing",
    "happens",
    "else",
    "something",
    "else",
    "right",
    "javascript",
    "python",
    "defined",
    "indentation",
    "thing",
    "happens",
    "indent",
    "one",
    "level",
    "right",
    "else",
    "something",
    "else",
    "another",
    "statement",
    "know",
    "language",
    "ends",
    "something",
    "like",
    "know",
    "three",
    "something",
    "else",
    "print",
    "pi",
    "three",
    "example",
    "indenting",
    "everything",
    "right",
    "every",
    "time",
    "start",
    "new",
    "block",
    "whenever",
    "block",
    "finishes",
    "go",
    "back",
    "print",
    "first",
    "block",
    "right",
    "way",
    "going",
    "work",
    "indenting",
    "blocks",
    "good",
    "first",
    "debates",
    "place",
    "curly",
    "braces",
    "also",
    "makes",
    "lot",
    "readable",
    "lot",
    "easier",
    "read",
    "code",
    "obligated",
    "obligatory",
    "indentation",
    "even",
    "make",
    "code",
    "work",
    "see",
    "works",
    "going",
    "make",
    "comments",
    "python",
    "using",
    "number",
    "pad",
    "symbol",
    "go",
    "way",
    "define",
    "variables",
    "specifying",
    "name",
    "python",
    "language",
    "need",
    "declare",
    "variables",
    "declare",
    "define",
    "everything",
    "one",
    "pass",
    "know",
    "find",
    "variable",
    "goes",
    "python",
    "dynamically",
    "dynamically",
    "typed",
    "also",
    "strongly",
    "typed",
    "might",
    "kind",
    "cause",
    "confusions",
    "basically",
    "assign",
    "variables",
    "value",
    "want",
    "see",
    "collections",
    "etc",
    "heterogeneous",
    "terms",
    "types",
    "etc",
    "dynamic",
    "language",
    "talking",
    "types",
    "going",
    "show",
    "important",
    "types",
    "python",
    "especially",
    "numbers",
    "course",
    "integers",
    "many",
    "like",
    "like",
    "might",
    "find",
    "languages",
    "like",
    "different",
    "precision",
    "cetera",
    "integers",
    "also",
    "concept",
    "long",
    "changed",
    "python",
    "two",
    "honest",
    "python",
    "three",
    "honest",
    "use",
    "integers",
    "way",
    "work",
    "smart",
    "enough",
    "type",
    "save",
    "storage",
    "needed",
    "good",
    "also",
    "floats",
    "right",
    "regular",
    "float",
    "type",
    "floating",
    "point",
    "arithmetic",
    "languages",
    "course",
    "suffers",
    "want",
    "strange",
    "behavior",
    "float",
    "floating",
    "point",
    "arithmetic",
    "like",
    "case",
    "prevent",
    "using",
    "decimal",
    "module",
    "see",
    "suffer",
    "issue",
    "numbers",
    "integers",
    "floats",
    "also",
    "decimals",
    "strings",
    "type",
    "str",
    "defined",
    "literal",
    "right",
    "st",
    "see",
    "right",
    "type",
    "string",
    "goes",
    "difference",
    "difference",
    "already",
    "python",
    "two",
    "unicode",
    "strings",
    "etc",
    "python",
    "three",
    "fixed",
    "python",
    "three",
    "unicode",
    "concept",
    "difference",
    "terms",
    "concept",
    "something",
    "type",
    "unicode",
    "code",
    "points",
    "string",
    "underlying",
    "encoding",
    "turn",
    "binary",
    "python",
    "three",
    "still",
    "ways",
    "differentiate",
    "whether",
    "binary",
    "string",
    "whether",
    "text",
    "based",
    "string",
    "worry",
    "want",
    "know",
    "writing",
    "python",
    "tutorial",
    "example",
    "might",
    "find",
    "difference",
    "unicode",
    "strings",
    "regular",
    "strings",
    "longer",
    "something",
    "worrying",
    "string",
    "long",
    "expands",
    "multiple",
    "lines",
    "always",
    "write",
    "using",
    "three",
    "quotes",
    "double",
    "quotes",
    "single",
    "single",
    "quotes",
    "create",
    "multi",
    "line",
    "strings",
    "extremely",
    "simple",
    "boolean",
    "two",
    "boolean",
    "type",
    "boolean",
    "objects",
    "unique",
    "right",
    "kind",
    "single",
    "tone",
    "true",
    "false",
    "objects",
    "example",
    "type",
    "bo",
    "also",
    "concept",
    "python",
    "none",
    "none",
    "serves",
    "pretty",
    "much",
    "purpose",
    "python",
    "everything",
    "object",
    "even",
    "strange",
    "strange",
    "objects",
    "like",
    "none",
    "associated",
    "class",
    "want",
    "everything",
    "python",
    "object",
    "types",
    "seen",
    "example",
    "string",
    "h",
    "string",
    "type",
    "str",
    "use",
    "int",
    "str",
    "float",
    "bool",
    "types",
    "right",
    "result",
    "type",
    "also",
    "function",
    "order",
    "cast",
    "case",
    "string",
    "order",
    "cast",
    "string",
    "integer",
    "use",
    "using",
    "end",
    "function",
    "thing",
    "get",
    "example",
    "see",
    "show",
    "functions",
    "death",
    "key",
    "word",
    "use",
    "use",
    "function",
    "use",
    "death",
    "use",
    "define",
    "mnemonic",
    "name",
    "function",
    "parameters",
    "optional",
    "finally",
    "return",
    "keyword",
    "always",
    "include",
    "return",
    "usually",
    "99",
    "time",
    "function",
    "return",
    "something",
    "going",
    "result",
    "assigned",
    "invoke",
    "function",
    "pretty",
    "regular",
    "function",
    "return",
    "anything",
    "explicitly",
    "means",
    "written",
    "return",
    "statement",
    "anywhere",
    "function",
    "function",
    "still",
    "return",
    "something",
    "fact",
    "included",
    "return",
    "statement",
    "explicitly",
    "mean",
    "function",
    "returning",
    "anything",
    "implicitly",
    "actually",
    "returning",
    "something",
    "returning",
    "none",
    "right",
    "default",
    "include",
    "return",
    "python",
    "know",
    "function",
    "always",
    "returns",
    "something",
    "specified",
    "parameters",
    "passing",
    "parameters",
    "pretty",
    "standard",
    "python",
    "advanced",
    "features",
    "parameters",
    "like",
    "example",
    "variable",
    "length",
    "arguments",
    "pass",
    "many",
    "arguments",
    "want",
    "make",
    "dynamic",
    "keyword",
    "arguments",
    "named",
    "arguments",
    "etc",
    "ethic",
    "operators",
    "know",
    "already",
    "shin",
    "modulus",
    "case",
    "power",
    "operation",
    "pretty",
    "standard",
    "thing",
    "happens",
    "boolean",
    "operators",
    "greater",
    "greater",
    "equals",
    "etc",
    "type",
    "checking",
    "strongly",
    "typed",
    "feature",
    "even",
    "though",
    "python",
    "dynamically",
    "typed",
    "types",
    "enforced",
    "case",
    "compare",
    "two",
    "make",
    "sense",
    "python",
    "going",
    "complain",
    "example",
    "error",
    "python",
    "exception",
    "type",
    "error",
    "raised",
    "thing",
    "bolens",
    "operators",
    "saw",
    "control",
    "flow",
    "defined",
    "indentation",
    "every",
    "new",
    "block",
    "defined",
    "indentation",
    "level",
    "python",
    "includes",
    "else",
    "also",
    "l",
    "f",
    "convenient",
    "example",
    "happens",
    "elif",
    "elif",
    "etc",
    "python",
    "switch",
    "statement",
    "example",
    "loops",
    "going",
    "loop",
    "something",
    "python",
    "loops",
    "lists",
    "collections",
    "general",
    "interconnected",
    "reality",
    "looping",
    "python",
    "regular",
    "python",
    "something",
    "like",
    "java",
    "gon",
    "na",
    "something",
    "like",
    "int",
    "equals",
    "zero",
    "else",
    "decades",
    "coding",
    "java",
    "know",
    "minus",
    "10",
    "less",
    "10",
    "less",
    "put",
    "last",
    "go",
    "python",
    "way",
    "mimic",
    "python",
    "always",
    "eat",
    "iterate",
    "collection",
    "going",
    "going",
    "create",
    "range",
    "elements",
    "going",
    "iterate",
    "way",
    "works",
    "close",
    "one",
    "language",
    "going",
    "alright",
    "case",
    "elements",
    "going",
    "name",
    "names",
    "moment",
    "name",
    "going",
    "associated",
    "element",
    "list",
    "loops",
    "part",
    "language",
    "usually",
    "discouraged",
    "favor",
    "loops",
    "something",
    "coded",
    "loop",
    "coded",
    "loop",
    "loop",
    "might",
    "know",
    "already",
    "trigger",
    "might",
    "result",
    "infinite",
    "loop",
    "checking",
    "conditions",
    "correctly",
    "collections",
    "python",
    "fundamental",
    "ones",
    "primitive",
    "ones",
    "important",
    "ones",
    "first",
    "list",
    "python",
    "heavy",
    "usage",
    "lists",
    "heterogeneous",
    "data",
    "structure",
    "put",
    "anything",
    "actually",
    "collections",
    "heterogeneous",
    "mix",
    "volumes",
    "want",
    "case",
    "three",
    "elements",
    "added",
    "one",
    "string",
    "one",
    "integer",
    "one",
    "string",
    "one",
    "boolean",
    "let",
    "say",
    "something",
    "even",
    "though",
    "pythons",
    "python",
    "supports",
    "mixed",
    "types",
    "collections",
    "mean",
    "honest",
    "usually",
    "avoid",
    "mixing",
    "types",
    "collections",
    "means",
    "know",
    "putting",
    "right",
    "consistent",
    "possible",
    "revisit",
    "code",
    "many",
    "different",
    "types",
    "checking",
    "length",
    "length",
    "function",
    "accessing",
    "elements",
    "zero",
    "indexed",
    "use",
    "square",
    "brackets",
    "case",
    "give",
    "first",
    "element",
    "given",
    "second",
    "element",
    "also",
    "index",
    "starting",
    "behind",
    "end",
    "case",
    "minus",
    "one",
    "minus",
    "two",
    "minus",
    "three",
    "case",
    "minus",
    "one",
    "minus",
    "two",
    "give",
    "different",
    "elements",
    "check",
    "operations",
    "associated",
    "elements",
    "quickly",
    "list",
    "l",
    "dot",
    "append",
    "going",
    "append",
    "new",
    "element",
    "list",
    "element",
    "end",
    "check",
    "element",
    "part",
    "list",
    "case",
    "true",
    "case",
    "false",
    "topples",
    "similar",
    "lists",
    "also",
    "sequences",
    "main",
    "difference",
    "immutable",
    "way",
    "add",
    "new",
    "elements",
    "tupple",
    "remove",
    "elements",
    "tupple",
    "created",
    "case",
    "created",
    "list",
    "three",
    "elements",
    "tupple",
    "sorry",
    "three",
    "elements",
    "access",
    "check",
    "something",
    "way",
    "list",
    "case",
    "tupple",
    "modify",
    "tupple",
    "never",
    "changes",
    "ca",
    "add",
    "elements",
    "another",
    "important",
    "data",
    "structure",
    "dictionary",
    "python",
    "dictionary",
    "key",
    "value",
    "right",
    "mapping",
    "similar",
    "object",
    "javascript",
    "hash",
    "table",
    "java",
    "key",
    "value",
    "mapping",
    "type",
    "case",
    "going",
    "associate",
    "values",
    "names",
    "see",
    "way",
    "like",
    "explain",
    "create",
    "topo",
    "list",
    "right",
    "let",
    "say",
    "going",
    "create",
    "list",
    "elements",
    "give",
    "one",
    "second",
    "going",
    "create",
    "list",
    "go",
    "gon",
    "na",
    "copy",
    "elements",
    "gon",
    "na",
    "associate",
    "list",
    "go",
    "list",
    "could",
    "well",
    "store",
    "information",
    "customers",
    "list",
    "right",
    "works",
    "mean",
    "get",
    "done",
    "problem",
    "whenever",
    "need",
    "access",
    "information",
    "list",
    "going",
    "say",
    "example",
    "know",
    "want",
    "give",
    "email",
    "customer",
    "remember",
    "position",
    "email",
    "located",
    "case",
    "going",
    "position",
    "number",
    "one",
    "information",
    "grows",
    "instead",
    "1234",
    "values",
    "four",
    "pieces",
    "information",
    "user",
    "right",
    "gon",
    "na",
    "hard",
    "access",
    "individual",
    "volleys",
    "create",
    "dictionaries",
    "dictionaries",
    "collections",
    "values",
    "important",
    "part",
    "right",
    "important",
    "part",
    "value",
    "instead",
    "indexed",
    "precision",
    "give",
    "arbitrary",
    "names",
    "tell",
    "explicit",
    "names",
    "name",
    "email",
    "age",
    "subscribed",
    "create",
    "dictionary",
    "access",
    "values",
    "name",
    "give",
    "email",
    "user",
    "age",
    "present",
    "user",
    "last",
    "name",
    "present",
    "user",
    "user",
    "user",
    "dictionary",
    "way",
    "store",
    "information",
    "associating",
    "later",
    "order",
    "make",
    "simpler",
    "us",
    "later",
    "let",
    "delete",
    "move",
    "four",
    "sets",
    "sets",
    "common",
    "data",
    "structure",
    "learning",
    "collections",
    "yeah",
    "instructions",
    "general",
    "common",
    "many",
    "languages",
    "mean",
    "popular",
    "python",
    "use",
    "often",
    "interesting",
    "feature",
    "first",
    "something",
    "forgot",
    "tell",
    "dictionaries",
    "sets",
    "dictionaries",
    "call",
    "unordered",
    "data",
    "structures",
    "never",
    "know",
    "order",
    "elements",
    "python",
    "recent",
    "versions",
    "changes",
    "make",
    "python",
    "dictionaries",
    "ordered",
    "going",
    "say",
    "rely",
    "think",
    "dictionaries",
    "completely",
    "unordered",
    "data",
    "structures",
    "thing",
    "sets",
    "sets",
    "bag",
    "contains",
    "elements",
    "know",
    "big",
    "bag",
    "keep",
    "throwing",
    "elements",
    "inside",
    "set",
    "orphan",
    "gon",
    "na",
    "happen",
    "gon",
    "na",
    "odd",
    "elements",
    "example",
    "set",
    "going",
    "remove",
    "elements",
    "set",
    "one",
    "important",
    "thing",
    "makes",
    "set",
    "useful",
    "membership",
    "operation",
    "gon",
    "na",
    "write",
    "membership",
    "ship",
    "operation",
    "go",
    "access",
    "notebooks",
    "later",
    "membership",
    "operation",
    "process",
    "checking",
    "something",
    "nine",
    "process",
    "checking",
    "extremely",
    "fast",
    "called",
    "oh",
    "one",
    "might",
    "seen",
    "created",
    "set",
    "included",
    "couple",
    "repeated",
    "elements",
    "333",
    "write",
    "11179",
    "resulting",
    "set",
    "repeated",
    "elements",
    "two",
    "features",
    "set",
    "set",
    "contain",
    "unique",
    "values",
    "way",
    "implemented",
    "behind",
    "scenes",
    "make",
    "dot",
    "unique",
    "values",
    "extremely",
    "simple",
    "check",
    "whenever",
    "pass",
    "membership",
    "operation",
    "extremely",
    "simple",
    "sorry",
    "extremely",
    "performant",
    "fast",
    "different",
    "example",
    "list",
    "keep",
    "mind",
    "sets",
    "useful",
    "checking",
    "members",
    "told",
    "going",
    "iterate",
    "collections",
    "loop",
    "case",
    "list",
    "going",
    "element",
    "list",
    "go",
    "user",
    "dictionary",
    "use",
    "dictionary",
    "sorry",
    "case",
    "user",
    "going",
    "default",
    "iteration",
    "key",
    "going",
    "get",
    "name",
    "email",
    "age",
    "subscribed",
    "extract",
    "value",
    "dictionary",
    "could",
    "also",
    "value",
    "user",
    "dot",
    "values",
    "oh",
    "go",
    "iterate",
    "key",
    "value",
    "items",
    "key",
    "value",
    "go",
    "iteration",
    "python",
    "readable",
    "put",
    "way",
    "remember",
    "always",
    "using",
    "loop",
    "assumes",
    "iterating",
    "collection",
    "ei",
    "equals",
    "zero",
    "equals",
    "zero",
    "equals",
    "zero",
    "less",
    "plus",
    "plus",
    "right",
    "python",
    "simulate",
    "range",
    "five",
    "example",
    "print",
    "got",
    "simulated",
    "range",
    "function",
    "generates",
    "pretty",
    "much",
    "elements",
    "something",
    "might",
    "heard",
    "python",
    "huge",
    "library",
    "built",
    "modules",
    "right",
    "import",
    "gon",
    "na",
    "work",
    "many",
    "things",
    "already",
    "coded",
    "python",
    "makes",
    "simple",
    "create",
    "something",
    "top",
    "want",
    "library",
    "know",
    "security",
    "cryptography",
    "math",
    "numeric",
    "processing",
    "numpy",
    "right",
    "machine",
    "learning",
    "web",
    "development",
    "creating",
    "games",
    "pi",
    "game",
    "want",
    "create",
    "graphical",
    "user",
    "interface",
    "whatever",
    "want",
    "usually",
    "library",
    "already",
    "coded",
    "make",
    "job",
    "easier",
    "top",
    "bill",
    "team",
    "library",
    "right",
    "already",
    "included",
    "python",
    "third",
    "party",
    "case",
    "already",
    "created",
    "python",
    "core",
    "team",
    "huge",
    "library",
    "many",
    "modules",
    "way",
    "works",
    "importing",
    "module",
    "way",
    "work",
    "packages",
    "modules",
    "differences",
    "modules",
    "packages",
    "third",
    "party",
    "ability",
    "little",
    "bit",
    "advanced",
    "gives",
    "random",
    "number",
    "generator",
    "already",
    "built",
    "check",
    "docs",
    "right",
    "exceptions",
    "whenever",
    "something",
    "work",
    "case",
    "say",
    "age",
    "greater",
    "21",
    "age",
    "string",
    "integer",
    "going",
    "fail",
    "catch",
    "exceptions",
    "happen",
    "going",
    "try",
    "accept",
    "lock",
    "right",
    "case",
    "fails",
    "anything",
    "fails",
    "blocks",
    "going",
    "kicked",
    "catch",
    "exception",
    "without",
    "program",
    "fail",
    "failing",
    "explicit",
    "error",
    "aspect",
    "introduction",
    "might",
    "useful",
    "coming",
    "another",
    "language",
    "especially",
    "keep",
    "notebook",
    "reference",
    "going",
    "using",
    "python",
    "lot",
    "course",
    "great",
    "language",
    "want",
    "scripting",
    "work",
    "development",
    "course",
    "processing",
    "data",
    "data",
    "analysis",
    "etc",
    "visualizations",
    "machine",
    "learning",
    "python",
    "great",
    "hope",
    "tiny",
    "tiny",
    "reuse",
    "lesson",
    "helps",
    "port",
    "knowledge",
    "languages",
    "python"
  ],
  "keywords": [
    "data",
    "analysis",
    "python",
    "tutorial",
    "name",
    "free",
    "code",
    "entire",
    "pi",
    "perform",
    "learn",
    "read",
    "multiple",
    "sources",
    "databases",
    "csv",
    "excel",
    "files",
    "clean",
    "statistical",
    "functions",
    "create",
    "visualizations",
    "show",
    "important",
    "tools",
    "pandas",
    "matplotlib",
    "many",
    "going",
    "useful",
    "want",
    "also",
    "analysts",
    "etc",
    "programming",
    "power",
    "day",
    "let",
    "get",
    "started",
    "science",
    "result",
    "jupyter",
    "notebooks",
    "exercises",
    "tell",
    "little",
    "bit",
    "machine",
    "learning",
    "course",
    "content",
    "every",
    "check",
    "us",
    "part",
    "10",
    "first",
    "using",
    "following",
    "quickly",
    "video",
    "included",
    "one",
    "talk",
    "like",
    "sql",
    "real",
    "example",
    "see",
    "detail",
    "quick",
    "understand",
    "ones",
    "tool",
    "two",
    "especially",
    "point",
    "number",
    "three",
    "jupiter",
    "skip",
    "already",
    "know",
    "use",
    "last",
    "languages",
    "might",
    "take",
    "case",
    "right",
    "define",
    "think",
    "wikipedia",
    "process",
    "information",
    "usually",
    "cleaning",
    "means",
    "features",
    "created",
    "try",
    "interesting",
    "key",
    "huge",
    "list",
    "something",
    "better",
    "objective",
    "need",
    "reports",
    "sales",
    "different",
    "level",
    "main",
    "close",
    "start",
    "box",
    "good",
    "probably",
    "popular",
    "call",
    "open",
    "individual",
    "source",
    "libraries",
    "advantage",
    "writing",
    "api",
    "directly",
    "language",
    "another",
    "general",
    "happens",
    "change",
    "simple",
    "time",
    "anything",
    "seeing",
    "hard",
    "go",
    "finally",
    "lot",
    "around",
    "group",
    "could",
    "talking",
    "without",
    "library",
    "getting",
    "database",
    "come",
    "format",
    "shape",
    "tables",
    "step",
    "fundamental",
    "results",
    "saying",
    "back",
    "looks",
    "line",
    "difference",
    "math",
    "skills",
    "apply",
    "creating",
    "way",
    "ecosystem",
    "large",
    "specific",
    "used",
    "reference",
    "works",
    "amount",
    "less",
    "records",
    "much",
    "processing",
    "gets",
    "work",
    "working",
    "constantly",
    "looking",
    "fast",
    "move",
    "computer",
    "add",
    "able",
    "gon",
    "na",
    "details",
    "high",
    "set",
    "file",
    "find",
    "pretty",
    "look",
    "remember",
    "said",
    "understanding",
    "head",
    "thing",
    "give",
    "frame",
    "special",
    "structure",
    "representation",
    "things",
    "column",
    "type",
    "rows",
    "columns",
    "follow",
    "immediately",
    "info",
    "date",
    "customer",
    "age",
    "makes",
    "sense",
    "say",
    "idea",
    "actually",
    "row",
    "per",
    "method",
    "numeric",
    "average",
    "years",
    "old",
    "mean",
    "happen",
    "profit",
    "values",
    "correct",
    "unit",
    "cost",
    "previous",
    "sorry",
    "plot",
    "top",
    "third",
    "considered",
    "distribution",
    "histogram",
    "moving",
    "forward",
    "always",
    "actual",
    "four",
    "given",
    "value",
    "least",
    "correlation",
    "order",
    "kind",
    "expected",
    "matrix",
    "showing",
    "red",
    "equals",
    "price",
    "revenue",
    "plots",
    "depending",
    "within",
    "common",
    "whole",
    "oh",
    "well",
    "execute",
    "extremely",
    "new",
    "total",
    "times",
    "checking",
    "plus",
    "everything",
    "changed",
    "else",
    "filtering",
    "country",
    "selecting",
    "make",
    "far",
    "done",
    "couple",
    "numpy",
    "associated",
    "second",
    "instead",
    "reading",
    "query",
    "basically",
    "particular",
    "zero",
    "seen",
    "even",
    "return",
    "beginning",
    "selection",
    "indexing",
    "filter",
    "dot",
    "notebook",
    "import",
    "terms",
    "live",
    "lab",
    "okay",
    "regular",
    "familiar",
    "question",
    "command",
    "similar",
    "install",
    "put",
    "commands",
    "cells",
    "problem",
    "mind",
    "write",
    "cell",
    "five",
    "either",
    "markdown",
    "text",
    "html",
    "keep",
    "size",
    "issue",
    "later",
    "page",
    "switch",
    "matter",
    "honest",
    "run",
    "seven",
    "delete",
    "built",
    "hit",
    "press",
    "b",
    "currently",
    "selected",
    "mode",
    "explanation",
    "based",
    "types",
    "efficient",
    "drop",
    "alright",
    "saw",
    "whatever",
    "paste",
    "x",
    "bitcoin",
    "ether",
    "low",
    "function",
    "volume",
    "concept",
    "standard",
    "deviation",
    "behind",
    "access",
    "ton",
    "numbers",
    "performance",
    "end",
    "arrays",
    "integers",
    "fine",
    "store",
    "memory",
    "bytes",
    "bits",
    "zeros",
    "ca",
    "decimal",
    "storing",
    "binary",
    "eight",
    "table",
    "user",
    "positions",
    "position",
    "n",
    "limit",
    "range",
    "completely",
    "though",
    "complicated",
    "64",
    "population",
    "advanced",
    "select",
    "integer",
    "object",
    "oriented",
    "objects",
    "attributes",
    "array",
    "structures",
    "dictionary",
    "element",
    "elements",
    "sets",
    "default",
    "float",
    "passing",
    "external",
    "index",
    "multi",
    "minus",
    "pass",
    "indices",
    "string",
    "assign",
    "strings",
    "valid",
    "dimensional",
    "dimension",
    "dimensions",
    "operation",
    "operations",
    "methods",
    "sum",
    "broadcasting",
    "vectorized",
    "boolean",
    "domain",
    "resulting",
    "immutable",
    "ways",
    "operators",
    "true",
    "false",
    "million",
    "greater",
    "timestamp",
    "contains",
    "still",
    "series",
    "ordered",
    "countries",
    "inhabitants",
    "underlying",
    "missing",
    "sequential",
    "dictionaries",
    "names",
    "canada",
    "summary",
    "70",
    "germany",
    "modifying",
    "whenever",
    "frames",
    "gdp",
    "hdi",
    "null",
    "lock",
    "f",
    "df",
    "dropping",
    "plotting",
    "parse",
    "none",
    "header",
    "fix",
    "parameters",
    "lines",
    "fill",
    "invalid",
    "axes",
    "duplicate",
    "parameter",
    "global",
    "module",
    "figure",
    "connection",
    "sheet",
    "collections"
  ]
}