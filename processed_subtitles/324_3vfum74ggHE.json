{
  "text": "which python web framework is the best\nflask is considered the most popular\nbeginner framework django is the most\npopular full stack framework offering\nthe most functionality and is used by\nmany companies in production and fast\napi has only been around for three years\nbut it took the hearts of the python\ndeveloper community by storm\nfacilitating rapid development and\noffering a tremendous web app speed when\ncomparing google trends flask is on top\nclosely followed by django but fast api\nis rising quickly based on github stars\ndjango is the winner but also closely\nfollowed by flask and fast api catching\nup quickly and in the speed benchmark\ntest fast api is the clear winner\noutperforming the other frameworks by a\nfactor of two or even three so which one\nshould you use it's hard to give one\nclear recommendation because as always\nthe answer depends each framework has\nits own strengths and weaknesses and all\nof them are great so in this video i\ncreated the same to-do app with all\nthree frameworks in the process you\nlearn how to use each framework and\nhopefully get a better feel for the\ntrade-offs between each of these so in\nthe end you can make the best choice for\nyour next project the project we are\ngoing to build is a simple to do app\nproviding functionality to add update\nand delete to-do's for each app you'll\nlearn how to use a database use html\ntemplates and implement the api routes\nso let's get started let's start with\nflask flask is well established in the\npython community it is loved by\nbeginners and experts for its simple\nsyntax while still being capable of\nmanaging full-blown production-ready web\napps so let's see how to do it first i\nrecommend to create a virtual\nenvironment and then activate it then we\nneed to install flask and also flask sql\nalchemy to work with a database then we\ncreate one file app.pi and import all\nclasses and functions from flask that we\nneed the convention is always to create\nan app instance with a double underscore\nname and then creating a route is as\nsimple as defining a function and using\nthe appropriate decorator here we say\napp.get and then a simple forward slash\nsince this is our home page this would\nnow display hello world on the website\nin order to use the database we import\nsql alchemy now we have to set some\nconfiguration variables for example the\nname or path to the database here we\nsimply use a sqlite file and then we\ncreate a database instance by using sql\nalchemy and passing the app to it now we\ncreate a model for the database so we\ncreate a class to do that inherits from\ndb.model and we give it three columns\nwith the appropriate data type we want\nan id a title and a complete flag for\nthe to-do item and then we call\ndb.createall to create and initialize\nour database\nnow of course we want to use this so in\nthe home route we call\ndb.session.query2do to retrieve all\nto-do items and then we use the render\ntemplate function from flask with a\ntemplate file name and the to-do list is\nadditional arguments so that we can use\nit in the html code of course we need to\ncreate the template so we have to create\na folder named templates and then a file\nthat we call base.html\nand here we can use normal html code\nthat displays a form and all to do items\nnow what is special here are these curly\nbraces with percent characters this is\nspecial ginger 2 template syntax that\nbasically allows us some python-like\nlogic for example we can have a for loop\nwhere we iterate over all to-do's and\nshow the id and title for each to-do\nthen we have an if-else statement to\ncheck the complete flag and show the\nlabel in a different style and then we\nalso need closing statements for the if\nand also for the for loop we also create\ntwo links that are the buttons to update\nand delete a to do and the important\npart is that the ahref points to the\nupdate and delete route for this\nparticular to-do id please note that\nthese will be get requests which is not\na best practice for updating and\ndeleting data but it works and for\nsimplicity i will use it like this now\nwe go back to the app.pi and can\nimplement the remaining routes first\nlet's create a route to add a new item\nthis has the\napp.postdecorator since it should be a\npost request we get the title\nwirerequest.form and then we create a\nnew to-do item and call\nand db.session.add.com the changes as\nlast step in here i use the redirect\nfunction together with the url4 function\nto redirect and load the updated home\npage the update route works similar here\nwe query the particular to-do item with\nthe id remember that we also specified\nthe id in the html code then we update\nthe complete flag commit the changes and\nagain redirect to the home page and the\ndelete route is the very same code\nexcept that here we delete the to-do and\nthat's it 49 lines of code is all we\nneed super simple and straightforward\nthis is where flask really shines it\nwon't be that quick with the other two\nframeworks now to run the app we can\nexport the environment variables flask\napp equals app.pi and flask n equals\ndevelopment to get hot reloading and\nthen we say flask run to start their\ndevelopment server and now we can add\nnew to-do's update them and also delete\nthem\nnext let's use fast api it's one of the\nfastest python web frameworks out there\nright now it also provides an easy\nsyntax allows for rapid development and\noffers some more nice to have features\nlike automatic interactive documentation\nand type validation that's why\ndevelopers love it and it's rising so\nfast in popularity that i think it will\nsoon catch up with flask and django\nlet's create a new virtual environment\nfor this project then we need to install\nfast api we also need an asgi server for\nexample uv corn and for the template\nfiles and database support we need\npython multipart sql alchemy and ginger\n2. these are essentially the same\ndependencies as we get with the flask\nand flask sql installation here we\ncreate three files app.pi models.pi and\ndatabase.pi we need a little bit more\ncode for each compared to flask and we\nwant to maintain a clean project\nstructure the basic app will be very\nsimilar to before we import fast api\ncreate an app instance and create a\nfunction that we decorate with app.get\nhere we return a dictionary which will\nbe automatically converted to a json\nresponse one cool thing to mention here\nis that we could also declare the\nfunction as async dev since fast api\nsupports asynchronous programming out of\nthe box and allows for an extremely fast\nweb app but for simplicity i'll stick\nwith a normal function here fast api\nheavily relies on tie pins so if we want\na dynamic route we use this syntax we\nput the argument in curly braces in the\nroute and then we use the same name as\nfunction argument together with a type\nhint in this case it should be an\ninteger this is concise reduces bugs and\ngives us automatic type checking which\nwe will see later so let's continue with\nour to-do app we need a few more imports\nfrom fast api we also import a few\nrequirements from starlet this is the\nasgi framework that fast api is built on\ntop of then we specify our template\ndirectory and use a template response in\nthe home function we pass the request as\nargument and also the database which is\na session object that depends on another\nfunction don't worry about this syntax\nyet it will become clear in a moment but\nnote that again for each argument we are\nusing typins here and then again we\nquery the database for all to do's and\nreturn a template response that needs\nthe html file the request and the to-do\nlist in this case the arguments for the\ntemplate file are passed as dictionary\nnow we also create a template directory\nand the base.html file and here we can\nuse the exact same code as before since\nwe are also using ginger 2 templating\nsyntax now let's set up the database we\nget the imports and set up the path to\nthe sqlite database then we need to\ncreate an engine we also need to create\na session instance and lastly we declare\nthe base class from which the model will\ninherit in the next step for the model\nwe import the database and this base\nclass we just declared and then we\ncreate a to-do class that looks very\nsimilar to the one from the flask app\nbut now we inherit from base then we\ndefine a table name and use the same\nfields as before now we can go back to\napp.pi and make use of all of this we\nimport the session class so we can use\nit as type hint we import the models the\nsession local object and the engine then\nwe create all database tables and then\nwe create a helper function to access\nthe data by session this will now be\npassed to the home function as a\ndependency which means if the database\ncannot be accessed then also the request\nto this route throws an error and this\nis already handled for us by fast api so\nyou can see we need a little bit more\ncode here but in return we get a lot\nmore functionality already and a safer\ncode now inside the function we can use\nthe session object and query the\ndatabase with the same syntax as in the\nflask app let's continue and add the add\nroute which must be a post request\nas parameter we also use the request and\nthe database and now as new argument we\nalso put in the title which is a string\nthat comes from the form and then again\nwe create a new to-do added to the\ndatabase and commit the change and then\ni get the url of the home page and\nreturn a redirect response i also\nspecify a particular status code which\nis needed because we now change from a\npost route to a get route very similar\nwe now add the update route and as\nmentioned before we use the to do id as\ndynamic argument with a tie hint then we\nquery the to do change the complete flag\ncommit the change and again redirect to\nthe home page and finally we use the\nsame code for the delete route but here\nwe delete the to-do item and that's it\nwe can now start a server by saying\nuvicorn app colon app the first is the\nfile name and the second is the app\ninstance we also use minus minus reload\nwhile we are in development mode and\nthen we can go to this address and have\na working to-do app one more cool\nfeature we also get out of the box with\nfast api is automatic api documentation\nso we can go to the slash docs route and\nhere we see all the different api\nendpoints together with the type for\nexample we can click on the add post\nendpoint and then we see more details\nlike that it needs a title as string we\ncan also try this out enter a title and\nexecute the command and then we can\ninspect the result so here we see we get\nthe response code 200 so all is good and\nwe see the raw template response that is\nvisible on the page we could also try\nanother route so let's test the update\nroute this needs a to-do id as integer\nso if we try to send a string here then\nit wouldn't let us and on the page we\nwould see an error code and again all of\nthis is handled for us by fast api and\nthis is possible because we used the tie\npins all right and that's the to-do app\nwith fast api i hope i could demonstrate\nsome of the cool features here now for\nthe final app we use django while flask\nand fast api are considered to be more\nlike a micro framework change is a full\nstack framework with many batteries\nincluded it's the backend framework of\nchoice for many fortune 500 companies\nwhile the learning curve might be\nsteeper than with the others it offers\nso many features that it makes your life\neasier once you know your way around it\nagain i start by creating and activating\na virtual environment then we only need\nto say pip install django this comes\nwith all the requirements that we need\nnow we say changu admin start project\nand give it the name to do app this\ncreates a new folder and inside the\nfolder we have the manage.py file and\nanother subfolder with the same name and\nall the starter files we need we cd into\nthe first folder and can run python\nmanage.pi run server this starts the\nserver and we have the initial app up\nand running for now we quit the server\nagain and say python manage.pi start app\nand the name to do list an app is a\ncomponent inside a project that is\nresponsible for certain things like here\nfor managing the to-dos in this simple\nproject this is the only app we need but\nimagine if we add authentication then we\ncould put this in another app to keep\nthe logic separate and clean after\ncreating an app we also need to add the\napp name to the installed apps in the\nsettings.py file now we want to add the\nviews so inside to do list.views pi we\nadd a function that gets a request and\nthen we return the render function with\na template name and this dictionary all\nitems we want to pass the missing to-do\npart will be implemented in a moment for\neach view we need to register a url so\nwe create a urls.pi file inside the\nto-do-list folder import the path\nfunction the views module and then we\ndefine all url patterns we want to add\nin this case we leave the route of the\npath empty since this is our home page\nand then we use the corresponding\nfunction and can also give it a name now\nwe go to the to do app.urls.pi\nand use the include function to include\nall urls from the to do list app you can\nsee that there already exists an admin\npath this is because django gives us an\nadmin panel out of the box which we will\nsee in a moment now we will need to\ncreate the template file so let's create\na new templates folder in the top\ndirectory and then we again create the\nbase html file and put in the same code\ndjango uses its own templating language\nwhich is similar but slightly different\nthan the ginger 2 template but in this\ncase we only have a for loop and an if\nstatement and this is actually the very\nsame syntax but there is one thing we\nneed to change in the form part we need\nto add the csrf token this is a security\nmechanism that prevents attacks to the\nform but we don't need to do more than\nadding this here now we need to go back\nto the settings.py and add the templates\nfolder to the directories key now we\nimplement the model class so inside the\nto-do list models.py we create a class\nthat inherits from models.model and then\nwe again create the same fields with the\ncorrect data type and we also implement\nthe string method to see an accurate\ndescription here we don't need to create\nan id since django does this for us now\nin the console we say python manage.pi\nmake migrations followed by\npythonmanage.pi migrate then we also\ncreate a super user because i want to\nshow you the admin panel so we say\npython manage pi create super user we\nfollow the instructions and put in a\nname and email and the password as next\nstep we go to the admin.py and register\nthe to-do model and now we go back to\nthe views.pi import the to-do class and\nthen query all to-do's in the index\nfunction let's run the server again and\ntest this we see the home page with zero\nto-do's for now if we click on the add\nbutton we get an error since we haven't\nimplemented this view yet but one cool\nfeature that is already available is the\nadmin panel so if we go to the slash\nadmin route we can log in with the super\nuser we created and here we can see\ndifferent groups and users if we would\nadd authentication we also see the to-do\nmodels with all the fields we specified\nand here we can interact with our\ndatabase so we could add or modify the\ndatabase entries right from the admin\npanel this is one very cool built-in\nfeature that you don't get with the\nother frameworks so now let's log out\nagain and implement the missing views so\nwe import two more functions and then\nimplement the add route we require that\nthis should be a post method by using\nthis decorator we could also check the\ntype of the request inside the function\nbut i wanted to show you this second way\nof doing it inside the function we then\ncreate and save a new to-do and redirect\nto the index page now we implement the\nupdate function this gets an additional\nparameter to do id which is then be used\nto query for this to do and then we\nchange the complete flag and save it and\nagain redirect the syntax for working\nwith django models is slightly different\nthan before but in my opinion it's even\nmore simple and straightforward and the\nlast view we need is the delete view\nwhich is very similar but here we delete\nthe to do and now we only need to add\nall these views to the urls.py\nso in here we add all the paths with the\ncorresponding route and view function we\ncan use this syntax with a data type and\nparameter name to add dynamic views and\nthat's it we can now go back to our app\nand we should be able to add new to-do's\nand then update and delete them awesome\nalright that's it you can find the code\nfor all apps on github the link is in\nthe description this video was a lot of\nwork so if you enjoyed it please hit the\nlike button i'm also interested to hear\nwhat's your favorite framework so please\nleave me a comment below and as always i\nhope to see you in the next video bye\n",
  "words": [
    "python",
    "web",
    "framework",
    "best",
    "flask",
    "considered",
    "popular",
    "beginner",
    "framework",
    "django",
    "popular",
    "full",
    "stack",
    "framework",
    "offering",
    "functionality",
    "used",
    "many",
    "companies",
    "production",
    "fast",
    "api",
    "around",
    "three",
    "years",
    "took",
    "hearts",
    "python",
    "developer",
    "community",
    "storm",
    "facilitating",
    "rapid",
    "development",
    "offering",
    "tremendous",
    "web",
    "app",
    "speed",
    "comparing",
    "google",
    "trends",
    "flask",
    "top",
    "closely",
    "followed",
    "django",
    "fast",
    "api",
    "rising",
    "quickly",
    "based",
    "github",
    "stars",
    "django",
    "winner",
    "also",
    "closely",
    "followed",
    "flask",
    "fast",
    "api",
    "catching",
    "quickly",
    "speed",
    "benchmark",
    "test",
    "fast",
    "api",
    "clear",
    "winner",
    "outperforming",
    "frameworks",
    "factor",
    "two",
    "even",
    "three",
    "one",
    "use",
    "hard",
    "give",
    "one",
    "clear",
    "recommendation",
    "always",
    "answer",
    "depends",
    "framework",
    "strengths",
    "weaknesses",
    "great",
    "video",
    "created",
    "app",
    "three",
    "frameworks",
    "process",
    "learn",
    "use",
    "framework",
    "hopefully",
    "get",
    "better",
    "feel",
    "end",
    "make",
    "best",
    "choice",
    "next",
    "project",
    "project",
    "going",
    "build",
    "simple",
    "app",
    "providing",
    "functionality",
    "add",
    "update",
    "delete",
    "app",
    "learn",
    "use",
    "database",
    "use",
    "html",
    "templates",
    "implement",
    "api",
    "routes",
    "let",
    "get",
    "started",
    "let",
    "start",
    "flask",
    "flask",
    "well",
    "established",
    "python",
    "community",
    "loved",
    "beginners",
    "experts",
    "simple",
    "syntax",
    "still",
    "capable",
    "managing",
    "web",
    "apps",
    "let",
    "see",
    "first",
    "recommend",
    "create",
    "virtual",
    "environment",
    "activate",
    "need",
    "install",
    "flask",
    "also",
    "flask",
    "sql",
    "alchemy",
    "work",
    "database",
    "create",
    "one",
    "file",
    "import",
    "classes",
    "functions",
    "flask",
    "need",
    "convention",
    "always",
    "create",
    "app",
    "instance",
    "double",
    "underscore",
    "name",
    "creating",
    "route",
    "simple",
    "defining",
    "function",
    "using",
    "appropriate",
    "decorator",
    "say",
    "simple",
    "forward",
    "slash",
    "since",
    "home",
    "page",
    "would",
    "display",
    "hello",
    "world",
    "website",
    "order",
    "use",
    "database",
    "import",
    "sql",
    "alchemy",
    "set",
    "configuration",
    "variables",
    "example",
    "name",
    "path",
    "database",
    "simply",
    "use",
    "sqlite",
    "file",
    "create",
    "database",
    "instance",
    "using",
    "sql",
    "alchemy",
    "passing",
    "app",
    "create",
    "model",
    "database",
    "create",
    "class",
    "inherits",
    "give",
    "three",
    "columns",
    "appropriate",
    "data",
    "type",
    "want",
    "id",
    "title",
    "complete",
    "flag",
    "item",
    "call",
    "create",
    "initialize",
    "database",
    "course",
    "want",
    "use",
    "home",
    "route",
    "call",
    "retrieve",
    "items",
    "use",
    "render",
    "template",
    "function",
    "flask",
    "template",
    "file",
    "name",
    "list",
    "additional",
    "arguments",
    "use",
    "html",
    "code",
    "course",
    "need",
    "create",
    "template",
    "create",
    "folder",
    "named",
    "templates",
    "file",
    "call",
    "use",
    "normal",
    "html",
    "code",
    "displays",
    "form",
    "items",
    "special",
    "curly",
    "braces",
    "percent",
    "characters",
    "special",
    "ginger",
    "2",
    "template",
    "syntax",
    "basically",
    "allows",
    "us",
    "logic",
    "example",
    "loop",
    "iterate",
    "show",
    "id",
    "title",
    "statement",
    "check",
    "complete",
    "flag",
    "show",
    "label",
    "different",
    "style",
    "also",
    "need",
    "closing",
    "statements",
    "also",
    "loop",
    "also",
    "create",
    "two",
    "links",
    "buttons",
    "update",
    "delete",
    "important",
    "part",
    "ahref",
    "points",
    "update",
    "delete",
    "route",
    "particular",
    "id",
    "please",
    "note",
    "get",
    "requests",
    "best",
    "practice",
    "updating",
    "deleting",
    "data",
    "works",
    "simplicity",
    "use",
    "like",
    "go",
    "back",
    "implement",
    "remaining",
    "routes",
    "first",
    "let",
    "create",
    "route",
    "add",
    "new",
    "item",
    "since",
    "post",
    "request",
    "get",
    "title",
    "create",
    "new",
    "item",
    "call",
    "changes",
    "last",
    "step",
    "use",
    "redirect",
    "function",
    "together",
    "url4",
    "function",
    "redirect",
    "load",
    "updated",
    "home",
    "page",
    "update",
    "route",
    "works",
    "similar",
    "query",
    "particular",
    "item",
    "id",
    "remember",
    "also",
    "specified",
    "id",
    "html",
    "code",
    "update",
    "complete",
    "flag",
    "commit",
    "changes",
    "redirect",
    "home",
    "page",
    "delete",
    "route",
    "code",
    "except",
    "delete",
    "49",
    "lines",
    "code",
    "need",
    "super",
    "simple",
    "straightforward",
    "flask",
    "really",
    "shines",
    "wo",
    "quick",
    "two",
    "frameworks",
    "run",
    "app",
    "export",
    "environment",
    "variables",
    "flask",
    "app",
    "equals",
    "flask",
    "n",
    "equals",
    "development",
    "get",
    "hot",
    "reloading",
    "say",
    "flask",
    "run",
    "start",
    "development",
    "server",
    "add",
    "new",
    "update",
    "also",
    "delete",
    "next",
    "let",
    "use",
    "fast",
    "api",
    "one",
    "fastest",
    "python",
    "web",
    "frameworks",
    "right",
    "also",
    "provides",
    "easy",
    "syntax",
    "allows",
    "rapid",
    "development",
    "offers",
    "nice",
    "features",
    "like",
    "automatic",
    "interactive",
    "documentation",
    "type",
    "validation",
    "developers",
    "love",
    "rising",
    "fast",
    "popularity",
    "think",
    "soon",
    "catch",
    "flask",
    "django",
    "let",
    "create",
    "new",
    "virtual",
    "environment",
    "project",
    "need",
    "install",
    "fast",
    "api",
    "also",
    "need",
    "asgi",
    "server",
    "example",
    "uv",
    "corn",
    "template",
    "files",
    "database",
    "support",
    "need",
    "python",
    "multipart",
    "sql",
    "alchemy",
    "ginger",
    "essentially",
    "dependencies",
    "get",
    "flask",
    "flask",
    "sql",
    "installation",
    "create",
    "three",
    "files",
    "need",
    "little",
    "bit",
    "code",
    "compared",
    "flask",
    "want",
    "maintain",
    "clean",
    "project",
    "structure",
    "basic",
    "app",
    "similar",
    "import",
    "fast",
    "api",
    "create",
    "app",
    "instance",
    "create",
    "function",
    "decorate",
    "return",
    "dictionary",
    "automatically",
    "converted",
    "json",
    "response",
    "one",
    "cool",
    "thing",
    "mention",
    "could",
    "also",
    "declare",
    "function",
    "async",
    "dev",
    "since",
    "fast",
    "api",
    "supports",
    "asynchronous",
    "programming",
    "box",
    "allows",
    "extremely",
    "fast",
    "web",
    "app",
    "simplicity",
    "stick",
    "normal",
    "function",
    "fast",
    "api",
    "heavily",
    "relies",
    "tie",
    "pins",
    "want",
    "dynamic",
    "route",
    "use",
    "syntax",
    "put",
    "argument",
    "curly",
    "braces",
    "route",
    "use",
    "name",
    "function",
    "argument",
    "together",
    "type",
    "hint",
    "case",
    "integer",
    "concise",
    "reduces",
    "bugs",
    "gives",
    "us",
    "automatic",
    "type",
    "checking",
    "see",
    "later",
    "let",
    "continue",
    "app",
    "need",
    "imports",
    "fast",
    "api",
    "also",
    "import",
    "requirements",
    "starlet",
    "asgi",
    "framework",
    "fast",
    "api",
    "built",
    "top",
    "specify",
    "template",
    "directory",
    "use",
    "template",
    "response",
    "home",
    "function",
    "pass",
    "request",
    "argument",
    "also",
    "database",
    "session",
    "object",
    "depends",
    "another",
    "function",
    "worry",
    "syntax",
    "yet",
    "become",
    "clear",
    "moment",
    "note",
    "argument",
    "using",
    "typins",
    "query",
    "database",
    "return",
    "template",
    "response",
    "needs",
    "html",
    "file",
    "request",
    "list",
    "case",
    "arguments",
    "template",
    "file",
    "passed",
    "dictionary",
    "also",
    "create",
    "template",
    "directory",
    "file",
    "use",
    "exact",
    "code",
    "since",
    "also",
    "using",
    "ginger",
    "2",
    "templating",
    "syntax",
    "let",
    "set",
    "database",
    "get",
    "imports",
    "set",
    "path",
    "sqlite",
    "database",
    "need",
    "create",
    "engine",
    "also",
    "need",
    "create",
    "session",
    "instance",
    "lastly",
    "declare",
    "base",
    "class",
    "model",
    "inherit",
    "next",
    "step",
    "model",
    "import",
    "database",
    "base",
    "class",
    "declared",
    "create",
    "class",
    "looks",
    "similar",
    "one",
    "flask",
    "app",
    "inherit",
    "base",
    "define",
    "table",
    "name",
    "use",
    "fields",
    "go",
    "back",
    "make",
    "use",
    "import",
    "session",
    "class",
    "use",
    "type",
    "hint",
    "import",
    "models",
    "session",
    "local",
    "object",
    "engine",
    "create",
    "database",
    "tables",
    "create",
    "helper",
    "function",
    "access",
    "data",
    "session",
    "passed",
    "home",
    "function",
    "dependency",
    "means",
    "database",
    "accessed",
    "also",
    "request",
    "route",
    "throws",
    "error",
    "already",
    "handled",
    "us",
    "fast",
    "api",
    "see",
    "need",
    "little",
    "bit",
    "code",
    "return",
    "get",
    "lot",
    "functionality",
    "already",
    "safer",
    "code",
    "inside",
    "function",
    "use",
    "session",
    "object",
    "query",
    "database",
    "syntax",
    "flask",
    "app",
    "let",
    "continue",
    "add",
    "add",
    "route",
    "must",
    "post",
    "request",
    "parameter",
    "also",
    "use",
    "request",
    "database",
    "new",
    "argument",
    "also",
    "put",
    "title",
    "string",
    "comes",
    "form",
    "create",
    "new",
    "added",
    "database",
    "commit",
    "change",
    "get",
    "url",
    "home",
    "page",
    "return",
    "redirect",
    "response",
    "also",
    "specify",
    "particular",
    "status",
    "code",
    "needed",
    "change",
    "post",
    "route",
    "get",
    "route",
    "similar",
    "add",
    "update",
    "route",
    "mentioned",
    "use",
    "id",
    "dynamic",
    "argument",
    "tie",
    "hint",
    "query",
    "change",
    "complete",
    "flag",
    "commit",
    "change",
    "redirect",
    "home",
    "page",
    "finally",
    "use",
    "code",
    "delete",
    "route",
    "delete",
    "item",
    "start",
    "server",
    "saying",
    "uvicorn",
    "app",
    "colon",
    "app",
    "first",
    "file",
    "name",
    "second",
    "app",
    "instance",
    "also",
    "use",
    "minus",
    "minus",
    "reload",
    "development",
    "mode",
    "go",
    "address",
    "working",
    "app",
    "one",
    "cool",
    "feature",
    "also",
    "get",
    "box",
    "fast",
    "api",
    "automatic",
    "api",
    "documentation",
    "go",
    "slash",
    "docs",
    "route",
    "see",
    "different",
    "api",
    "endpoints",
    "together",
    "type",
    "example",
    "click",
    "add",
    "post",
    "endpoint",
    "see",
    "details",
    "like",
    "needs",
    "title",
    "string",
    "also",
    "try",
    "enter",
    "title",
    "execute",
    "command",
    "inspect",
    "result",
    "see",
    "get",
    "response",
    "code",
    "200",
    "good",
    "see",
    "raw",
    "template",
    "response",
    "visible",
    "page",
    "could",
    "also",
    "try",
    "another",
    "route",
    "let",
    "test",
    "update",
    "route",
    "needs",
    "id",
    "integer",
    "try",
    "send",
    "string",
    "would",
    "let",
    "us",
    "page",
    "would",
    "see",
    "error",
    "code",
    "handled",
    "us",
    "fast",
    "api",
    "possible",
    "used",
    "tie",
    "pins",
    "right",
    "app",
    "fast",
    "api",
    "hope",
    "could",
    "demonstrate",
    "cool",
    "features",
    "final",
    "app",
    "use",
    "django",
    "flask",
    "fast",
    "api",
    "considered",
    "like",
    "micro",
    "framework",
    "change",
    "full",
    "stack",
    "framework",
    "many",
    "batteries",
    "included",
    "backend",
    "framework",
    "choice",
    "many",
    "fortune",
    "500",
    "companies",
    "learning",
    "curve",
    "might",
    "steeper",
    "others",
    "offers",
    "many",
    "features",
    "makes",
    "life",
    "easier",
    "know",
    "way",
    "around",
    "start",
    "creating",
    "activating",
    "virtual",
    "environment",
    "need",
    "say",
    "pip",
    "install",
    "django",
    "comes",
    "requirements",
    "need",
    "say",
    "changu",
    "admin",
    "start",
    "project",
    "give",
    "name",
    "app",
    "creates",
    "new",
    "folder",
    "inside",
    "folder",
    "file",
    "another",
    "subfolder",
    "name",
    "starter",
    "files",
    "need",
    "cd",
    "first",
    "folder",
    "run",
    "python",
    "run",
    "server",
    "starts",
    "server",
    "initial",
    "app",
    "running",
    "quit",
    "server",
    "say",
    "python",
    "start",
    "app",
    "name",
    "list",
    "app",
    "component",
    "inside",
    "project",
    "responsible",
    "certain",
    "things",
    "like",
    "managing",
    "simple",
    "project",
    "app",
    "need",
    "imagine",
    "add",
    "authentication",
    "could",
    "put",
    "another",
    "app",
    "keep",
    "logic",
    "separate",
    "clean",
    "creating",
    "app",
    "also",
    "need",
    "add",
    "app",
    "name",
    "installed",
    "apps",
    "file",
    "want",
    "add",
    "views",
    "inside",
    "pi",
    "add",
    "function",
    "gets",
    "request",
    "return",
    "render",
    "function",
    "template",
    "name",
    "dictionary",
    "items",
    "want",
    "pass",
    "missing",
    "part",
    "implemented",
    "moment",
    "view",
    "need",
    "register",
    "url",
    "create",
    "file",
    "inside",
    "folder",
    "import",
    "path",
    "function",
    "views",
    "module",
    "define",
    "url",
    "patterns",
    "want",
    "add",
    "case",
    "leave",
    "route",
    "path",
    "empty",
    "since",
    "home",
    "page",
    "use",
    "corresponding",
    "function",
    "also",
    "give",
    "name",
    "go",
    "use",
    "include",
    "function",
    "include",
    "urls",
    "list",
    "app",
    "see",
    "already",
    "exists",
    "admin",
    "path",
    "django",
    "gives",
    "us",
    "admin",
    "panel",
    "box",
    "see",
    "moment",
    "need",
    "create",
    "template",
    "file",
    "let",
    "create",
    "new",
    "templates",
    "folder",
    "top",
    "directory",
    "create",
    "base",
    "html",
    "file",
    "put",
    "code",
    "django",
    "uses",
    "templating",
    "language",
    "similar",
    "slightly",
    "different",
    "ginger",
    "2",
    "template",
    "case",
    "loop",
    "statement",
    "actually",
    "syntax",
    "one",
    "thing",
    "need",
    "change",
    "form",
    "part",
    "need",
    "add",
    "csrf",
    "token",
    "security",
    "mechanism",
    "prevents",
    "attacks",
    "form",
    "need",
    "adding",
    "need",
    "go",
    "back",
    "add",
    "templates",
    "folder",
    "directories",
    "key",
    "implement",
    "model",
    "class",
    "inside",
    "list",
    "create",
    "class",
    "inherits",
    "create",
    "fields",
    "correct",
    "data",
    "type",
    "also",
    "implement",
    "string",
    "method",
    "see",
    "accurate",
    "description",
    "need",
    "create",
    "id",
    "since",
    "django",
    "us",
    "console",
    "say",
    "python",
    "make",
    "migrations",
    "followed",
    "migrate",
    "also",
    "create",
    "super",
    "user",
    "want",
    "show",
    "admin",
    "panel",
    "say",
    "python",
    "manage",
    "pi",
    "create",
    "super",
    "user",
    "follow",
    "instructions",
    "put",
    "name",
    "email",
    "password",
    "next",
    "step",
    "go",
    "register",
    "model",
    "go",
    "back",
    "import",
    "class",
    "query",
    "index",
    "function",
    "let",
    "run",
    "server",
    "test",
    "see",
    "home",
    "page",
    "zero",
    "click",
    "add",
    "button",
    "get",
    "error",
    "since",
    "implemented",
    "view",
    "yet",
    "one",
    "cool",
    "feature",
    "already",
    "available",
    "admin",
    "panel",
    "go",
    "slash",
    "admin",
    "route",
    "log",
    "super",
    "user",
    "created",
    "see",
    "different",
    "groups",
    "users",
    "would",
    "add",
    "authentication",
    "also",
    "see",
    "models",
    "fields",
    "specified",
    "interact",
    "database",
    "could",
    "add",
    "modify",
    "database",
    "entries",
    "right",
    "admin",
    "panel",
    "one",
    "cool",
    "feature",
    "get",
    "frameworks",
    "let",
    "log",
    "implement",
    "missing",
    "views",
    "import",
    "two",
    "functions",
    "implement",
    "add",
    "route",
    "require",
    "post",
    "method",
    "using",
    "decorator",
    "could",
    "also",
    "check",
    "type",
    "request",
    "inside",
    "function",
    "wanted",
    "show",
    "second",
    "way",
    "inside",
    "function",
    "create",
    "save",
    "new",
    "redirect",
    "index",
    "page",
    "implement",
    "update",
    "function",
    "gets",
    "additional",
    "parameter",
    "id",
    "used",
    "query",
    "change",
    "complete",
    "flag",
    "save",
    "redirect",
    "syntax",
    "working",
    "django",
    "models",
    "slightly",
    "different",
    "opinion",
    "even",
    "simple",
    "straightforward",
    "last",
    "view",
    "need",
    "delete",
    "view",
    "similar",
    "delete",
    "need",
    "add",
    "views",
    "add",
    "paths",
    "corresponding",
    "route",
    "view",
    "function",
    "use",
    "syntax",
    "data",
    "type",
    "parameter",
    "name",
    "add",
    "dynamic",
    "views",
    "go",
    "back",
    "app",
    "able",
    "add",
    "new",
    "update",
    "delete",
    "awesome",
    "alright",
    "find",
    "code",
    "apps",
    "github",
    "link",
    "description",
    "video",
    "lot",
    "work",
    "enjoyed",
    "please",
    "hit",
    "like",
    "button",
    "also",
    "interested",
    "hear",
    "favorite",
    "framework",
    "please",
    "leave",
    "comment",
    "always",
    "hope",
    "see",
    "next",
    "video",
    "bye"
  ],
  "keywords": [
    "python",
    "web",
    "framework",
    "best",
    "flask",
    "django",
    "functionality",
    "used",
    "many",
    "fast",
    "api",
    "three",
    "development",
    "app",
    "top",
    "followed",
    "also",
    "test",
    "clear",
    "frameworks",
    "two",
    "one",
    "use",
    "give",
    "always",
    "video",
    "get",
    "make",
    "next",
    "project",
    "simple",
    "add",
    "update",
    "delete",
    "database",
    "html",
    "templates",
    "implement",
    "let",
    "start",
    "syntax",
    "apps",
    "see",
    "first",
    "create",
    "virtual",
    "environment",
    "need",
    "install",
    "sql",
    "alchemy",
    "file",
    "import",
    "instance",
    "name",
    "creating",
    "route",
    "function",
    "using",
    "say",
    "slash",
    "since",
    "home",
    "page",
    "would",
    "set",
    "example",
    "path",
    "model",
    "class",
    "data",
    "type",
    "want",
    "id",
    "title",
    "complete",
    "flag",
    "item",
    "call",
    "items",
    "template",
    "list",
    "code",
    "folder",
    "form",
    "ginger",
    "2",
    "allows",
    "us",
    "loop",
    "show",
    "different",
    "part",
    "particular",
    "please",
    "like",
    "go",
    "back",
    "new",
    "post",
    "request",
    "step",
    "redirect",
    "together",
    "similar",
    "query",
    "commit",
    "super",
    "run",
    "server",
    "right",
    "features",
    "automatic",
    "files",
    "return",
    "dictionary",
    "response",
    "cool",
    "could",
    "box",
    "tie",
    "dynamic",
    "put",
    "argument",
    "hint",
    "case",
    "directory",
    "session",
    "object",
    "another",
    "moment",
    "needs",
    "base",
    "fields",
    "models",
    "error",
    "already",
    "inside",
    "parameter",
    "string",
    "change",
    "url",
    "feature",
    "try",
    "admin",
    "views",
    "view",
    "panel",
    "user"
  ]
}