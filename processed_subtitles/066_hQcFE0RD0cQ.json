{
  "text": "Welcome everyone to a Edureka YouTube channel. My name is Saurabh and today I'll be taking\nyou through this entire session on Devops\nfull course. So we have designed this crash\ncourse in such a way that it starts from the\nbasic topics and also covers the advanced\nones. So we'll be covering all the stages\nand tools involved in Devops. So this is how\nthe modules are structured. We'll start by\nunderstanding. What is the meaning of devops?\nWhat was the methodology before devops? Right?\nSo all those questions will be answered in\nthe first module. Then we are going to talk\nabout what is git how it works. And what is\nthe meaning of Version Control and how we\ncan achieve that with the help of git, that\nsession will be taken by Miss Reyshma. Post that I'll be teaching you how you can create\nreally cool digital pipelines with the help\nof Jenkins Maven and git and GitHub. After\nthat. I'll be talking about the most famous\nsoftware containerization platform, which\nis docker and post that Vardhan we'll be\nteaching you how you can Kubernetes for orchestrating\nDocker container clusters. After that, We\nare going to talk about configuration management\nusing ansible and puppet. Now, both of these\ntools are really famous in the market ansible\nis pretty trending whereas puppet is very\nmature it is there in the market since 2005\nfinally. I'll be teaching you how you can\nperform continuous monitoring with the help\nof Nagios. So let's start the session guys.\nWill Begin by understanding what is devops?\nSo this is what we'll be discussing today.\nWe'll Begin by understanding why we need devops\neverything exists for a reason. So we'll try\nto figure out that reason we are going to\nsee what are the various limitations that\nthe traditional software delivery methodologies\nand how it devops overcomes all of those limitations.\nThen we are going to focus on what exactly\nis the devops methodology and what are the\nvarious stages and tools involved in devops.\nAnd then finally in the hands on part I will\ntell you how you can create a docker image\nhow you can build it test it and even push\nit onto Docker Hub in an automated fashion\nusing Jenkins. So I hope you all are clear with the\nagenda. So let's move forward guys and we'll\nsee why we need DevOps. So guys, let's start\nwith the waterfall model. Now before devops\norganizations were using this particular software\ndevelopment methodology. It was first documented\nin the year 1970 by Royce and was the first\npublic documented life cycle model. The waterfall\nmodel describes a development method that\nis linear and sequential waterfall development\nhas distinct goals for each phase of development.\nNow, you must be thinking why the name waterfall\nmodel because it's pretty similar to a waterfall.\nNow what happens in a waterfall once the water\nhas flowed over the edge of the cliff. It\ncannot turn back the same is the case for\nwaterfall development strategy as well. An\napplication will go to the next stage only\nwhen the previous stage is complete. So let\nus focus on what are the various stages involved\nin waterfall methodology. So notice the diagram\nthat is there in front of your screen. If\nyou notice it's almost like a waterfall or\nyou can even visualize it as a ladder as well.\nSo first what happens the client gives requirement\nfor an application. So you gather that requirement\nand you try to analyze it then what happens\nyou design the application how the application\nis going to look like. Then you start writing\nthe code for the application and you build\nit when I say build it involves multiple think\ncompiling your application, you know unit\ntesting then even it involves packaging is\nwell after that it is deployed onto the test\nservers for testing and then deployed onto\nthe broad service for release. And once the\napplication is life. It is monitored. Now.\nI know this small looks perfect and trust\nme guys. It was at that time, but think about\nit what will happen if we use it. Now fine.\nLet me give you a few disadvantages of this\nmodel. So here are a few disadvantages. So\nfirst one is once the application is in the\ntesting stage. It is very difficult to go\nback and change something that was not well\nthought out in the concept stage now what\nI mean by that suppose you have written the\ncode for the entire application but in testing\nthere's some bug in that particular application\nnow in order to remove that bug you need to\ngo through the entire source code of the application\nwhich used to take a lot of time, right? So\nthat is Very big limitation of waterfall model\napart from that. No working software is produced\nuntil late during the life cycle. We saw that\nwhen we are discussing about various stages\nof what for more there are high amount of\nrisk and uncertainty which means that once\nyour product is life it is there in the market\nthen if there is any bug or any downtime,\nthen you have to go through the entire source\ncode of the application again, you have to\ngo through that entire process of waterfall\nmodel that we just saw in order to produce\na working software again, right? So that's\nhow it used to take. A lot of time. There's\na lot of risk and uncertainty and imagine\nif you have upgraded some software stack in\nyour production environment and that led to\nthe failure of your application now to go\nback to the previous table version used to\nalso take a lot of time now, it is not a good\nmodel for complex and object oriented projects\nand it is not suitable for the Project's where\nrequirements are at a moderate to high risk\nof changing. So what I mean by that suppose\nyour client has given you a requirement for\na web application today now you have taken\nOwn sweet time and you are in a condition\nthe release the application say after one\nyear now after one year, the market has changed.\nThe client does not want a web application.\nHe's looking for a mobile application now,\nso this type of model is not suitable where\nrequirements are at a moderate to high risk\nof changing. So there's a question popped\nin my screen is from Jessica. She's asking\nso all the iteration in the waterfall model\ngoes through all the stages. Well, there are\nno I tration as such Jessica. First of all,\nit is not agile methodology or devops. It\nis waterfall model, right? There are no I\ntrations once the stage is complete then only\nit will be good. It will be going to the next\nstage. So there are no I trations as such\nif you're talking about the application and\nit is life and then there is some bug or there\nis some downtime then at that time based on\nthe kind of box, which is there in the application\nSuppose. There might be a bug because of some\nflawed version of a software stack installed\nin your production environment. Probably some\nupgraded version because if that your application\nis not working properly. You need to roll\nback to the previous table version of the\nsoftware stack in your production environment.\nSo that can be one bug apart from that. There\nmight be bugs related to the code in which\nyou have to check the entire source code of\nthe application again. Now if you look at\nit to roll back and incorporate the feedback\nthat you have got is used to take a lot of\ntime. Right? So I hope this answers your question.\nAll right, she's finally the answer any of\nthe questions any other doubt you have guys\nyou can just go ahead and ask me find so there\nare no questions right now. So I hope you\nhave understood what was the relation with\nwaterfall model. What are the various limitations\nof this waterfall model. Now we are going\nto focus on the next methodology that is called\nthe agile methodology. Now agile methodology\nis a practice that promotes continuous iteration\nof development and testing throughout the\nsoftware development life cycle of the project.\nSo the development and the testing of an application\nused to happen continuously with the agile\nmethodology. So what I mean by that if you\nfocus on a diagram that is there in front\nof your screen, so here we get the feedback\nfrom the testing that we have done in the\nprevious iteration. We design the application\nagain, then we develop it there again. We\ntest it then we discover few things that we\ncan incorporate in the application. We again\ndesign it develop it and there are multiple\nI trations involved in development and testing\nof a particular application cinestyle. Methodology.\nEach project is broken up into several I trations\nand all I tration should be of the same time\nduration and generally it is between 2 to\n8 weeks and at the end of each iteration of\nworking for dr. Should be delivered. So this\nis what agile methodology in a nutshell is\nnow let me go ahead and compare this with\nthe waterfall model. Now if you notice in\nthe diagram that is there in front of your\nscreen, so waterfall model is pretty linear\nand it's pretty straight as you can see from\nthe diagram that we analyze requirements.\nWe plan it design. It build it test it. And\nthen finally we deploy it onto the processor\nwas for release, but when I talk about the\nagile methodology over here the design build\nand testing part is happening continously.\nWe are writing the code. We are building the\napplication. We are testing it continuously\nand there are several iterations involved\nin this particular stage. And once the final\ntesting is done. It is then deployed onto\nthe broad service for release, right? So agile\nmethodology basically breaks down the entire\nsoftware delivery life cycle into small sprains\nor iterations that we call it due to which\nthe development and the testing part of the\nsoftware delivery life cycle used to happen\ncontinously. Let's move forward and we are\ngoing to focus on what are the various limitations\nof agile methodology the first and the biggest\nlimitation of agile methodology is that the\ndeaf part of the team was pretty agile right\nthe development and testing used to happen\ncontinuously. But when I talk about deployment\nthen that was not continuous there were still\na lot of conflicts happening between the Devon\nthe off side of the company the dev team wants\nagility. Whereas the Ops Team want stability\nand there's a very common conflict that happens\nand a lot of you can actually relate to it\nthat the code works fine in the developers\nlaptop, but when it reaches to production\nthere is some bug in the application or it\ndoes not work any production at all. So this\nis because if you know some inconsistency\nin the Computing environment And that has\ncaused that and due to which the operations\nteam and the dev team used to fight a lot.\nThere are a lot of conflicts guys at that\ntime happening. So agile methodology made\nthe deaf part of the company pretty agile,\nbut when I talk about the off side of the\ncompany, they needed some solution in order\nto solve the problem that I've just discussed\nright? So I hope you are able to understand\nwhat kind of a problem I'm focusing on. If\nyou go back to the previous diagram as well\nso over here if you notice only the design\nbuild and test or you can say Development\nbuilding and testing part is continuous, right\nthe deployment is still linear. You need to\ndeploy it manually on to the various products\novers. That's what you was happening in the\nagile methodology. Right? So the error that\nI was talking about you too busy. Our application\nis not working fine. I mean once your application\nis life and do you do some software stack\nin the production environment? It doesn't\nwork properly now to go back and change something\nin the production environment used to take\na lot of time. For example, you know, you\nhave upgraded some particular software stack\nand because of that your application is Doll\nworking it fails to work now to go back to\nthe previous table version of the software\nstack the operations team was taking a lot\nof time because they have to go through the\nlogin scripts that they have written on in\norder to provision the infrastructure. So\nlet me just give you a quick recap of the\nthings that we have discussed till now, we\nhave discussed quite a lot of history. We\nstarted with the waterfall model the traditional\nwaterfall model be understood what are its\nvarious stages and what are the limitations\nof this waterfall mode? Then we went ahead\nand understood what exactly the design methodology\nand how is it different from the waterfall\nmodel and what are the various limitations\nof the agile methodology? So this is what\nwe have discussed till now now we are going\nto look at the solution to all the problems\nthat we have just discussed and the solution\nis none other than divorce divorce is basically\na software development strategy which Bridges\nthe gap between the deaf side and the offside\nof the company. So devops is basically a term\nfor a group of Concepts that while not all\nnew half catalyze into a movement and a rapidly\nspreading. Well, the technical community like\nany new and popular term people may have confused\nand sometimes contradictory impressions of\nwhat it is. So let me tell you guys devops\nis not a technology. It is a methodology.\nSo basically devops is a practice that equated\nto the study of building evolving and operating\nrapidly changing systems at scale. Now. Let\nme put this in simpler terms. So devops is\nthe practice of operations and development\nEngineers participating together in the entire\nsoftware life cycle from design through the\ndevelopment process to production support\nand you can also say that devops is also characterized\nby operation staff making use many of the\nsame techniques as Developers for this system\nwork. I'll explain you that how is this definition\nrelevant because all we are saying here is\ndevops is characterized by operation staff\nmaking use many of the same techniques as\nDevelopers for their systems work seven. I\nwill explain you infrastructure as code you\nwill understand why I am using this particular\ndefinition. So as you know, that devops is\na software development strategy which Bridges\nthe gap between the dev part in the upside\nof the company and helps us to deliver good\nquality software in time and how this happens\nthis happens because of various stages and\ntools involved in Des Moines. So here is a\ndiagram which is nothing but an infinite Loop\nbecause everything happens continuously in\nDev Ops guys, everything starting from coding\ntesting deployment monitoring everything is\nhappening continuously, and these are the\nvarious tools which are involved in the devops\nmethodologic, right? So not only the knowledge\nof these tools are important for a divorce\nengineer, but also how to use these tools.\nHow can I architect my software delivery lifecycle\nsuch that I get the maximum output right?\nSo it doesn't mean that you know, if I have\na good knowledge of Jenkins or gate or docker\nthen I become a divorce engineer. No that\nis not true. You should know how to use them.\nYou should know where to use them to get the\nmaximum output. So I hope you have got my\npoint what I'm trying to say here in the next\nslide. Be discussing about various stages\nthat are involved in devops fine. So let's\nmove forward guys and we are going to focus\non various stages involved in divorce. So\nthese are the various stages involved in devops.\nLet me just take you through all these stages\none by one starting from Version Control.\nSo I'll be discussing all of these stages\none by one as well. But let me just give you\nan entire picture of these stages in one slide\nfirst. So Version Control is basically maintaining\ndifferent versions of the code what I mean\nby that Suppose there are multiple developers\nwriting a code for a particular application.\nSo how will I know that which developer has\nmade which commits at what time and which\ncommits is actually causing the error and\nhow will I revert back to the previous commit\nso I hope you are getting my point my point\nhere is how will I manage that source code\nsuppose developer a has made a commit and\nthat commit is causing some error. Now how\nwill I know the developer a has made that\ncommit and at what time he made that comment\nand very the code was that editing happened,\nright? So all of these questions can be answered\nonce you use Version Control tools like git\nsubversion. XXXX of we are going to focus\non getting our course. So then we have continuous\nintegration. So continuous integration is\nbasically building your application continuously\nwhat I mean by that suppose any developer\nmade a change the source code a continuous\nintegration server should be able to pull\nthat code. I am prepare a built now when I\nsay build people have this misconception of\nyou know, only compiling the source code.\nIt is not true guys includes everything starting\nfrom compiling your source code validating\nyour source code code review unit, testing\nintegration, testing, etc, etc. And even packaging\nyour application as well. Then comes continuous\ndelivery. Now the same continuous integration\ntool that we are using suppose Jenkins. Now\nwhat Jenkins will do once the application\nis built. It will be deployed onto the test\nservers for testing to perform, you know,\nuser acceptance test or end user testing whether\nyou call it there will be using tools like\nselenium right for performing automation testing.\nAnd once that is done it will be then deployed\nonto the process servers for release, right\nthat is called continuous deployment and here\nwe'll be using configuration management and\nTools so this is basically to provision your\ninfrastructure to provision your Prada environment\nand let me tell you guys continuous deployment\nis something which is not a good practice\nbecause before releasing a product in the\nmarket, there might be multiple checks that\nyou want to do before that right? There might\nbe multiple other testings that you want to\ndo. So you don't want this to be automated\nright? That's why continuous deployment is\nsomething which is not preferred after continuous\ndelivery. We can go ahead and manually use\nconfiguration management tools like puppet\nchef ansible and salts tag, or we can even\nuse Docker for a similar purpose and then\nwe can go ahead and deploy it onto the Crossovers\nfor release. And once the application is live.\nIt is continuously monitored by tools like\nNagi Os or Splunk, which will provide the\nrelevant feedback to the concern teams, right?\nSo these are various stages involved in devops,\nright? So now let me just go back to clear\nif there are doubts. So this is our various\nstages are scheduled various jobs schedule.\nSo we have Jenkins here. We have a continuous\nintegration server. So what Jenkins will do\nthe moment any developer makes a change in\nthe source code it Take that code and then\nit will trigger a built using tools like Maven\nor and or Gradle. Once that is done. It will\ndeploy it onto the test servers for testing\nfor end user testing using tools like selenium\nj-unit Etc. Then what happens it will automatically\ntake that tested application and deploy it\nonto the process servers for release, right?\nAnd then it is continuously monitored by tools.\nLike Nagi was plunky LK cetera et cetera.\nSo Jenkins is basically heart of devops life\ncycle. It gives you a nice 360 degree view\nof your entire software delivery life cycle.\nSo with that UI you can go ahead and have\na look how your application is doing currently\nright? We're in which stage it is in right\nnow testing is done or not. All those things.\nYou can go ahead and see in the Jenkins dashboard\nright? There might be multiple jobs running\nin the Jenkins dashboard that you can see\nand it gives you a very good picture of the\nentire software delivery life cycle. Uh, don't\nworry. I'm going to discuss all of these stages\nin detail when we move forward. We are going\nto discuss each of these stages one by one.\nEating from source code management or even\ncall us Version Control. Now what happens\nin source code management? There are two types\nof source code management approaches one is\ncalled centralized Version Control. And another\none is called the distributed Version Control\nthe source code management. Now imagine there\nare multiple developers writing a code for\nan application if there is some bug introduced\nhow will we know which commits has caused\nthat error and how will I revert back to the\nprevious version of the code in order to solve\nthese issues source code management tools\nwere introduced and there are two types of\nsource code management tools one is called\ncentralized Version Control and another is\ndistributed Version Control. So let's discuss\nthe centralized Version Control first. So\ncentralized version control system uses a\ncentral server to store all the files and\nenables team collaboration. It works in a\nsingle repository to which users can directly\naccess a central server. So this is what happens\nhere guys. So every developer has a working\ncopy the working directory. So the moment\nthey want to make any change in the source\ncode. They can go ahead and make a comment\nin the shared repository right and they can\neven update their working. By you know pulling\nthe code that is there in the repository as\nwell. So the repository then the diagram that\nyour nose noticing indicates a central server\nthat could be local or remote which is directly\nconnected to each of the programmers workstation.\nAs you can see now every programmer can extract\nor update their workstation or the data present\nin the repository or can even make changes\nto the data or committed in the repository.\nEvery operation is performed directly on the\ncentral server or the central repository,\neven though it seems pretty convenient to\nmaintain a single repository, but it has a\nlot of drawbacks. But before I tell you the\ndrawbacks, let me tell you what advantage\nwe have here. So first of all, if anyone makes\na comment in the repository, then it will\nbe a commit ID Associated to it and there\nwill always be a commit message. So, you know,\nwhich person has made that commit and at what\ntime and where in the code basically, right\nso you can always revert back but let me now\ndiscuss few disadvantages. First of all, it\nis not locally available. Meaning you always\nneed to be connected to a network to perform\nany action. It is always not available locally,\nright? So you need to be connected with the\nsome sort of network. Basically since everything\nis centralized in case of the central server\ngetting crashed or corrupted. It will result\nin losing the entire data of the project.\nRight? So that's a very serious issue guys.\nAnd that is one of the reasons why Industries\ndon't prefer centralized Version Control System,\nthat's talk about the distributed version\ncontrol system. Now now these systems do not\nnecessary rely on a central server to store\nall the versions of the project file. So in\ndistributed Version Control System, every\ncontributor has a local copy or clone of the\nmain repository as you can see, I'm highlighting\nwith my cursor right now that is everyone\nmaintains a local repository of their own\nwhich contains all the files and metadata\npresent in the main repository. As you can\nsee then the diagram is well, every programmer\nmaintains a local repository on its own which\nis actually the copy or clone of the central\nrepository on their hard drive. They can commit\nand update the local repository without any\ninterference. They can update the local repositories\nwith new data coming from the central server\nby an operation called pull and effect changes\nthe main repository by an operation called\npush write operation called push from the\nlocal post re now. You must be thinking what\nadvantage we get here. What are the advantages\nof distributed version control over the centralized\nVersion Control now basically the act of cloning\nand entire repository gives you that Advantage.\nLet me tell you how now all operations apart\nfrom push-and-pull are very fast because the\ntool only needs to access the hard drive not\na remote server, hence, you do not always\nneed an internet connection committing new\nchange sets can be done locally without manipulating\nthe data on the main proposed three. Once\nyou have a group of change sets ready. You\ncan push them all at once. So what you can\ndo is you can ask the commit to your local\nrepository, which is there in your local hard\ndrive. You can commit the changes. Are you\nwant in the source code you can you know,\nonce you review it and then once you have\nquite a lot of It's ready. You can go ahead\nand push it onto the central server as well\nas the central server gets crashed at any\npoint of time. The lost data can be easily\nrecovered from any one of the contributors\nlocal repository. This is one very big Advantage\napart from that since every contributor has\na full copy of the project repository. They\ncan share changes with one another if they\nwant to get some feedback before affecting\nthe changes in the main repository as well.\nSo these are the various ways in which you\nknow distributed version control system is\nactually better than a centralized version\ncontrol system. So we saw the two types of\nphones code Management systems and I hope\nyou have understood it. We are going to discuss\na one source code management tool called gate,\nwhich is very popular in the market right\nnow almost all the companies actually use\nget for now. I'll move forward and we'll go\ninto focus on a source code management tool\na distributed Version Control tool that is\ncalled as get now before I move forward guys.\nLet me make this thing clear. So when I say\nVersion Control or source code management,\nit's one in the same thing. Let's talk about\nget now now git is a distributed Version Control\ntool. Boards distributed nonlinear workflows\nby providing data Assurance for developing\nquality software, right? So it's a pretty\ntough definition to follow but it will be\neasier for you to understand with the diagram\nthat is there in front of your screen. So\nfor example, I am a developer and this is\nmy working directory right now. What I want\nto do is I want to make some changes to my\nlocal repository because it is a distributed\nVersion Control System. I have my local repository\nas well. So what I'll do I'll perform a get\nadd operation now because of get add whatever\nwas there in my working directory will be\npresent in the staging area. Now, you can\nvisualize the staging area as something which\nis between the working directory and your\nlocal repository, right? And once you have\ndone get ad you can go ahead and perform git\ncommit to make changes to your local repository.\nAnd once that is done you can go ahead and\npush your changes to the remote repository\nas well. After that you can even perform get\npull to add whatever is there in your remote\nrepository to your local repository and perform\nget check out to our everything which was\nthere in your Capacity of working directory\nas well. All right, so let me just repeat\nit once more for you guys. So I have a working\ndirectory here. Now in order to add that to\nmy local repository. I need to First perform\nget add that will add it to my staging area\nstaging area is nothing but area between the\nworking directory and the local repository\nafter guitar. I can go ahead and execute git\ncommit which will add the changes to my local\nrepository. Once that is done. I can perform\nget push to push the changes that I've made\nin my local repository to the remote repository\nand in order to pull other changes which are\nthere in the remote repository of the local\nrepository. You can perform get pull and finally\nget check out that will be added to your working\ndirectory as well and get more which is also\na pretty similar command now before we move\nforward guys. Let me just show you a few basic\ncommands of get so I've already installed\nget in my Center is virtual machine. So let\nme just quickly open my Center as virtual\nmachine to show you a few basic operations\nthat you can perform with get device virtual\nmachine, and I've told you that have already\ninstalled get now in order to check the version\nof get you can just Then he'd get - - version\nand you can see that I have two point seven\npoint two here. Let me go ahead and clear\nmy terminal. So now let me first make a directory\nand let me call this as a deal breaker - repository\nand I'll move into this array core repository.\nSo first thing that I need to do is initialize\nthis repository as an empty git repository.\nSo for that all I have to type here is get\nin it and it will go ahead and initialize\nthis R empty directory as a local git repository.\nSo it has been initialized now as you can\nsee initialise empty git repository in home\nand Drake I drink - report dot kit or right\nthen so over here. I'm just going to create\na file of python file. So let me just name\nthat as a deer a card dot p y and I'm going\nto make some changes in this particular files.\nSo I'll use G edit for that. I'm just going\nto write in here, uh normal print statement.\nWelcome to Ed Eureka close the parenthesis\nsave it. Close it. Let me get my terminal\nnow if I hit an LS command so I can see that\nedeka dot py file is here. Now. If you can\nrecall from the slides, I was telling you\nin order to add a particular file or a directory\ninto the local git repository first. I need\nto add it to my staging area and how will\nI do that by using the guitar? Come on. So\nall I have to type here is get ad at the name\nof my file, which is edureka.py then here\nwe go. So it is done now now if I type in\nhere git status it will give me the files\nwhich I need to commit. So this particular\ncommand gives me the status status as a little\ntell me model files. They need to commit to\nthe local repository. So it says when you\nfile has been created that is in the record\nor py in the state and it is present in the\nstaging area and I need to come at this particular\nPhi. So all I have to type here is git commit\n- M and the message that I want so I'll just\ntype in here first commit and here we go.\nSo it is successfully done now. So I've added\na particular file to my local git repository.\nSo now what I'm going to show you is basically\nhow to deal with the remote repositories.\nSo I have a remote git repository present\non GitHub. So I have created a GitHub account.\nThe first thing that you need to do is create\na GitHub account and then you can go ahead\nand create a new repository there and then\nI'll tell you how to add that particular repository\nto a local git repository. Let me just go\nto my browser once and me just zoom in a bit.\nAnd yeah, so this is my GitHub account guys.\nAnd what I'm going to do is I'm first going\nto go to this repository stab and I'm going\nto add one new repository. So I'll click on\nnew. I'm going to give a name to this repository.\nSo whatever name that you want to give you\njust go ahead and do that. Let me just write\nit here. Get - tutorial - Dev Ops, whatever\nname that you feel like just go ahead and\nwrite that I'm going to keep it public if\nyou want any description you can go ahead\nand give that and I can also initialize it\nwith a readme create a posse and that's all\nyou have to do in order to create a remote\nGitHub repository now over here. You can see\nthat there's only one read me dot MD file.\nSo what I'm going to do, I'm just going to\ncopy this particular SSH link and I'm going\nto perform git remote add origin and the link\nthere are just copy. I'll paste it here and\nhere we go. So this has basically added my\nremote repository to my local repository.\nNow, what I can do is I can go ahead and pull\nwhatever is there in my remote repository\nto my local git repository for that. All our\nto type here is git pull origin master and\nhere we go. Set is done. Now as you can see\nthat I've pulled all the changes. So let me\nclear my terminal and hit an endless command.\nSo you'll find read me dot MD present here\nright now. What I'm going to show you is basically\nhow to push this array card or py file onto\nmy remote repository. So for that all I have\nto type here is git push origin master and\nhere we go. So it is done. Now. Let me just\ngo ahead and refresh this particular repository\nand you'll find Erica py file here. Let me\njust go ahead and reload this so you can see\na record or py file where I've written welcome\nto edit a car. So it's that easy guys. Let\nme clear my terminal now. So I've covered\nfew basics of get so let's move forward with\nthis devops tutorial and we are going to focus\non the next stage which is called continuous\nintegration. So we have seen few basic commands\nof get we saw how to initialize an empty directory\ninto a git repository how we can you know,\nadd a file to the staging area and how we\ncan go ahead and commit in the local repository.\nAfter that. We saw how we can push the changes\nin the local repository to the remote repository.\nMy repository was on GitHub. I told you how\nto connect to the remote repository and then\nhow even you can pull the changes from the\nremote repository rights all of these things\nwe have discussed in detail. Now, let's move\nforward guys in we are going to focus on the\nnext stage which is called continuous integration.\nSo continuous integration is basically a development\npractice in which the developers are required\nto commit changes. Just the source code in\na shared repository several times a day, or\nyou can say more frequently and every commit\nmade in the repository is then built this\nallows the teams to detect the problems early.\nSo let us understand this with the help of\nthe diagram that is there in front of your\nscreen. So here we have multiple developers\nwhich are writing code for a particular application\nand all of them are committing code to a shared\nrepository which can be a git repository or\nsubversion repository from there the Jenkins\nserver, which is nothing but a continuous\nintegration tool will pull that code the moment\nany developer commits a change in the source\ncode the moment any developer coming to change\nin the source code Jenkins server will pull\nthat it will prepare a built now as I have\ntold you earlier as well build does not only\nmean compiling the source code. It includes\ncompiling but apart from that there are other\nthings as well. For example code review unit\ntesting integration testing, you know packaging\nyour application into an executable file.\nIt can be a war file. It can be a jar file.\nSo it happens in a continuous manner the moment\nany developer coming to change in the source\ncode Jenkins server will pull that prepare\na bill. Right. This is called as continuous\nintegration. So Jenkins has various Tools\nin order to perform this so it has various\ntools for development testing and deployment\nTechnologies. It has well over 2,500 plugins.\nSo you need to install that plug-in and you\ncan just go ahead and Trigger whatever job\nyou wanted with the help of Jenkins. It is\noriginally written in Java. Right and let's\nmove forward and we are going to focus on\ncontinuous delivery now, so continuous delivery\nis nothing but taking continuous integration\nto The Next Step. So what are we doing in\na continuous manner or in an automated fashion?\nWe are taking this build application onto\nthe test server for end user testing or unit\nor user acceptance test, right? So that is\nbasically what is continuous delivery. So\nlet us just summarize containers delivery\nagain moment. Any developers makes a change\nin the source code. Jenkins will pull that\ncode prepare a built once build a successful.\nIt will take the build application and Jenkins\nwill deploy it onto the test server for end\nuser testing or user acceptance test. So this\nis basically what continuous delivery is is\nhappens in a continuous fashion. So what advantage\nwe get here? Basically if they the build failure\nthen we know which commits has caused that\nerror and we don't need to go through the\nentire source code of the application similarly\nfor testing even if any bug appears in testing\nis well, we know which comment has caused\nthat are Ernie can just go ahead and you know\nhave a look at that particular comment instead\nof checking out the entire source code of\nthe application. So they basically this system\nallows the team to detect problems early,\nright as you can see from the diagram as web.\nYou know, if you want to learn more about\nJenkins, I'll leave a link in the chat box.\nYou can go ahead and refer that and people\nare watching it on YouTube can find that link\nin the description box below now, we're going\nto talk about continuous deployment. So continuous\ndeployment is basically taking the application\nthe build application that you have tested\nand deploying that onto the process servers\nfor release in an automated fashion. So once\nthe application is tested it will automatically\nbe deployed on to the broad service for release.\nNow, this is something not a good practice\nas I've told you earlier as well because there\nmight be certain checks that you need to do\nnow to release your software in the market.\nAre you might want to Market your product\nbefore that? So there are a lot of things\nthat you want to do before deploying your\napplication. So it is not advisable or a good\npractice to you know, actually automatically\ndeploying your application onto the processor\nwhich for release so this is basically continuous\nintegration delivery and deployment any questions.\nYou have guys you can ask me. All right, so\nDorothy wants me to repeat it. Once more sure\njovial do that. Let's start with continuous\nintegration. So continuous integration is\nbasically committing the changes in the source\ncode more frequently and every commit will\nthen be built using a Jenkins server, right\nor any continuous integration server. So this\nJenkins what it will do it will trigger a\nbuild the moment any developer commits a change\nin the source code and build includes of compiling\ncode review unit, testing integration testing\npackaging and everything. So I hope you are\nclear with what is continuous integration.\nIt is basically continuously building your\napplication, you know, the moment any developer\ncome in to change in the source code. Jenkins\nwill pull that code and repairable. Let's\nmove forward and now I'm going to explain\nyou continuous delivery now incontinence delivery\nthe package that we Created here the war of\nthe jar file of the executable file. Jenkins\nwill take that package and it will deploy\nit onto the test server for end user testing.\nSo this kind of testing is called the end\nuser testing or user acceptance test where\nyou need to deploy your application onto a\nserver which can be a replica of your production\nserver and you perform end user testing or\nyou call it user acceptance test. For example\nin my application if I want to check all the\nfunctions right functional testing if I want\nto perform functional testing of my application,\nI will first go ahead and check whether my\nsearch engine is working then I'll check whether\npeople are able to log in or not. So all those\nfunctions of a website when I check or an\napplication and I check is basically after\ndeploying it on to apps over right? So that's\nsort of testing is basically what is your\nfunctional testing or what? I'm trying to\nrefer here next up. We are going to continuously\ndeploy our application onto the process servers\nfor release. So once the application is tested\nit will be then deployed onto the broad service\nfor release and I've told you earlier is well,\nit is not a good practice to deploy your application\ncontinuously or in an automated fashion. So\nguys you have discussed a lot about Jenkins.\nHow about I show you How Jenkins UI looks\nlike and how you can download plugins on all\nthose things. So I've already installed Jenkins\nin my Center is virtual machine. So let me\njust quickly open. My Center is virtual machine.\nSo guys, this is my Center is virtual machine\nagain and over here. I have configured my\nJenkins on localhost port 8080 / Jenkins and\nhere we go. Just need to provide the username\nand password that you have given when you\nare installing Jenkins. So this is how Jenkins\nlooks like guys over here. There are multiple\noptions. You can just go and play around with\nit. Let me just take you through a few basic\noptions that are there. So when you click\non new item, you'll be directed to a page\nwhich will ask you to give a name to your\nproject. So give whatever name that you want\nto give then choose a kind of project that\nyou want. Right and then you can go ahead\nand provide the required specifications required\nconfigurations for your project. Now when\nI was talking about plugins, let me tell you\nhow you can actually install plug-ins. So\nyou need to go to manage and kins and here's\na tab that you'll find manage plugins. In\nthis tab, you can find all the updates that\nare there for the plugins that you have already\ninstalled in the available section. You'll\nfind all the available plugins that Jenkins\nsupport so you can just go ahead and search\nfor the plug-in that you want to install just\ncheck it and then you can go ahead and install\nit similarly. The plug-ins that are installed\nwill be found in the install Tab and then\nyou can go ahead and check out the advanced\ntab as well. So this is something different.\nLet's not just focus on this for now. Let\nme go back to the dashboard and this is basically\none project that I've executed which is called\nAda Rekha Pipeline and this blue color symbolizes\nand it was successful the blue Colour ball\nmeans it was successful. That's how it works\nguys. So I was just giving you a tour to the\nJenkins dashboard will actually execute the\nPractical as well. So we'll come back to it\nlater. But for now, let me open my slides\nin will proceed with the next stage in the\ndevops life cycle. So now let's talk about\nconfiguration management. So what exactly\nis configuration management, so now let me\ntalk about few issues with the deployment\nof a particular application or provisioning\nof the server's so basically what happens,\nyou know, I've been My application but when\nI deployed onto the test servers or onto the\nprocess servers, there are some dependency\nissues because of his my application is not\nworking fine. For example in my developers\nlaptop. There might be some software stack\nwhich was upgraded but in my prod and in the\ntest environment, they're still using the\noutdated version of that software side because\nof which the application is not working fine.\nThis is just one example apart from that what\nhappens when your application is life and\nit goes down because of some reason and that\nreason can be you have upgraded the software\nstack. Now, how will you go back to the previous\ntable version of that software stack. So there\nare a lot of issues with you know, the admin\nside of the company the upside of the company\nwhich were removed the help of configuration\nmanagement tools. So, you know before Edmonds\nused to write these long scripts in order\nto provision the infrastructure whether it's\nthe test environment of the prod environment\nof the dev environment, so they utilize those\nlong scripts, right which is prone to error\nplus. It used to take a lot of time and apart\nfrom that the Edmund who has written that\nscript. No one else can actually recognize\nwhat's the problem with it once if you have\nto debug it, so there are a lot of problems\nat work. Are with the admin side or the Absurd\nthe company which were removed by the help\nof configuration management tools and when\nvery important concept that you guys should\nunderstand is called infrastructure as code\nwhich means that writing code for your infrastructure.\nThat's what it means suppose if I want to\ninstall lamp stack on all of these three environments\nwhether it's devtest abroad I will write the\ncode for installing lamp stack in one central\nlocation and I can go ahead and deploy it\nonto devtest and prom so I have the record\nof the system State president my one central\nlocation, even if I upgrade to the next version,\nI still have the recorded the previous stable\nversion of the software stack, right? So I\ndon't have to manually go ahead and you know\nwrite scripts and deployed onto the nodes\nthis is that easy guys. So let me just focus\non few challenges at configuration management\nhelps us to overcome. First of all, it can\nhelp us to figure out which components to\nchange when requirements change. It also helps\nus in redoing an implementation because the\nrequirements have changed since the last implementation\nand very important Point guys that it helps\nus to revert to a Previous version of the\ncomponent if you have replaced with a new\nbut the flawed version now, let me tell you\nthe importance of configuration management\nthrough a use case now the best example I\nknow is of New York Stock Exchange a software\nglitch prevented the NYC from Trading stocks\nfor almost 90 minutes this led to millions\nof dollars of loss a new software installation\ncaused the problem that software was installed\non 8 of its twenty trading Terminals and the\nsystem was tested out the night before however\nin the morning it failed to operate on the\na term ends. So there was a need to switch\nback to the old software. Now you might think\nthat this was a failure of nyc's configuration\nmanagement process, but in reality, it was\na success as a result of proper configuration\nmanagement NYC recovered from that situation\nin 90 minutes, which was pretty fast have\nthe problem continued longer the consequences\nwould have been more severe guys. So I hope\nyou have understood its importance. Now, let's\nfocus on various tools available for configuration\nmanagement. So we have multiple tools like\nPapa Jeff and silence. Stack I'm going to\nfocus on pop it for now. So pop it is a configuration\nmanagement tool that is used for deploying\nconfiguring and managing servers. So, let's\nsee, what are the various functions of puppet.\nSo first of all, you can Define distinct configurations\nfor each and every host and continuously check\nand confirm whether required configuration\nis in place and is not altered on the host.\nSo what I mean by that you can actually Define\ndistinct configuration for example in my one\nparticular node. I need this office. I can\nanother node. I need this office stack so\nI can you know, defined distinct configurations\nfor different nodes and continuously check\nand confirm whether the required configuration\nis in place and is not alter and if it is\naltered pop, it will revert back to the required\nconfigurations. This is one function of puppet.\nIt can also help in Dynamic scaling up and\nscaling down of machines. So what will happen\nif in your company there's a big billion day\nsale, right and you're expecting a lot of\ntraffic. So at that time in order to provision\nmore servers probably today our task is to\nprovision 10 servers and tomorrow you might\nhave two revisions. Jim's right. So how will\nyou do that? You cannot go ahead and do that\nmanually by writing scripts. You need tools\nlike puppet that can help you in Dynamic scaling\nup and scaling down of machines. It provides\ncontrol over all of your configured machines.\nSo a centralized change gets propagated to\nall automatically so it follows a master-slave\narchitecture in which the slaves will pull\nthe central server for changes made in the\nconfiguration. So we have multiple nodes there\nwhich are connected to the master. So they\nwill poll they will check continuously. Is\nthere any change in the configuration happened\nthe master the moment any change happen it\nwill pull that configuration and deploy it\nonto that particular node. I hope you're getting\nmy point. So this is called pull configuration\nand push configuration. The master will actually\npush the configurations on to the nose which\nhappens in ansible and salts that but does\nnot happen in pop it in Chef. So these two\ntools follow full configuration and an smellin\nsalts that follows push configuration in which\nthese configurations are pushed onto the nodes\nand here in chef and puppet. The nodes will\npull that configurations. They keep on checking\nthe master at regular intervals and if there's\nany change in the configuration It'll pull\nit now. Let me explain you the architecture\nthat is there in front of your screen. So\nthat is basically a typical puppet architecture\nin which what happens you can see that there's\na master/slave architecture here is our puppet\nmaster and here is our puppet slave now the\nfunctions which are performed in this architecture\nfirst, the puppet agent sends the fact to\nthe puppet master. So this puppet slave will\nfirst send the fact to the Puppet Master facts\nwhat our Fox basically they are key value\ndata appears. It represents some aspects of\nslave states such as its IP address up time\noperating system or whether it's a virtual\nmachine, right? So that's what basically facts\nare and the puppet master uses a fact to compile\na catalog that defines how the slaves should\nbe configured. Now. What is the catalog it\nis a document that describes a desired state\nfor each resource that Puppet Master manages.\nHonestly, then what happens the puppet slave\nreports back to the master indicating that\nconfiguration is complete and which is also\nvisible in the puppet dashboard. So that's\nhow it works guys. So let's move Forward and\ntalk about containerization. So what exactly\nis containerization so I believe all of you\nhave heard about virtual machines? So what\nare containers containers are nothing but\nthe lightweight alternatives to Virtual machines.\nSo let me just explain that to you. So we\nhave Docker containers that will contain the\nbinaries and libraries required for a particular\napplication. And that's when we call it. You\nknow, we have containerized a particular application.\nRight? So let us focus on the diagram that\nis there in front of your screen. So here\nwe have host operating system on top of which\nwe have Docker engine. We have a No guest\noperating system here guys. It uses the host\noperating system and we're learning to Containers\ncontainer one will have application one and\nit's binaries in libraries the container to\nwill have application to and it's binaries\nand libraries. So all I need in order to run\nmy application is this particular container\nor this particular container? Because all\nthe dependencies are already present in that\nparticular container. So what is basically\na container it contains my application the\ndependencies of my application. The binary\nis Ivory is required for that application.\nIs that in my container nowadays? If you must\nhave noticed that even you want to install\nsome software you will actually get ready\nto use Docker container, right? That is the\nreason because it's pretty lightweight when\nyou compare it with virtual machines, right?\nSo let me discuss a use case how you can actually\nuse Docker in the industry. So suppose you\nhave some complex requirements for your application.\nIt can be a microservice. It can be a monolithic\napplication anything. So let's just take microservice.\nSo suppose you have complex requirements for\nyour microservice your you have written the\ndockerfile for that with the help of this\nDocker 5. I can create a Docker image. So\nDocker image is nothing but you know a template\nyou can think of it as a template for your\nDocker container, right? And with the help\nof Docker image, you can create as many Docker\ncontainers as you want. Let me repeat it once\nmore so we have written the complex requirements\nfor a micro service application in an easy\nto write Docker file from there. We have created\na Docker image and with the help of Docker\nimage we can build as many containers as we\nwant. Now that Docker image I can upload that\nonto Docker Hub, which is nothing. Butter\ngit repository of Docker images we can have\npublic repositories can have private repositories\ne and from Docker Hub any team beat staging\na production can pull that particular image\nand prepare as many containers as they want.\nSo what advantage we get here, whatever was\nthere in my developers laptop, right? The\nMicrosoft is application. The guy who has\nwritten that and the requirement for that\nmicrobes obvious application. So that guy's\nbasically a developer and because he's only\ndeveloping the application. So whatever is\nthere in my developers laptop I have replicated\nin my staging as well as in a production.\nSo there's a consistent Computing environment\nthroughout my software delivery life cycle.\nI hope you are getting my point. So guys,\nlet me just quickly brief you again about\nwhat exactly a Docker containers so just visualize\ncontainer as actually a box in which our application\nis present with all its dependencies except\nthe box is infinitely replicable. Whatever\nhappens in the Box stays in the Box unless\nyou explicitly take something out or put something\nin and when it breaks you will just throw\nit away and get a new What so containers usually\nmake your application easy to run on different\ncomputer. Ideally the same image should be\nused to run containers in every environment\nstage from development to production. So that's\nwhat basically Docker containers are. So guys.\nThis is my sent to us virtual machine here\nagain, and I've already installed docker.\nSo the first thing is I need to start Docker\nfor that. I'll type system CTL start docker.\nGive the password. And it has started successfully.\nSo now what I'm going to do, there are few\nimages which are already there in Docker up\nwhich are public images. You can pull it at\nanytime you want. Right? So you can go ahead\nand run that image as many times as you want.\nYou can create as many containers as you want.\nSo basically when I execute the command of\npulling an image from dog a rabbit will try\nto First find it locally whether its present\nor not and if it is present then it's well\nand good. Otherwise, we'll go ahead and pull\nit from the docker Hub. So right so before\nI move forward, let me just show you how dr.\nOf looks like If you have not created an account\nand Dock and have you need to go and do that\nbecause for executing a use case you have\nto do is it's free of cost. So this is our\ndoctor of looks like guys and this is my repository\nthat you can notice here. Right? I can go\nahead and search for images here as well.\nSo for example, if I want to search for Hadoop\nimages, which I believe one of you asked so\nyou can find that we have Hadoop images present\nhere as well. Right? So these are nothing\nbut few images that are there on Docker Hub.\nSo I believe now I can go back to my terminal\nand execute your basic Docker commands. So\nthe first thing that I'm going to execute\nis called Docker images which will give the\nlist of all the images that I have in my local\nsystem. So I have quite a lot of images you\ncan see right this is the size and and all\nthose things when it was created the image.\nThis is called the image ID, right? So I have\nall of these things displayed on my console.\nLet me just clear my terminal now what I'm\ngoing to do, I'm going to pull an image rights.\nAll I have to type here is the awkward pull\nfor example if I want to pull an Ubuntu image.\nJust type in here Docker pull open to and\nhere we go. So it is using default tag latest.\nSo tag is something that I'll tell you later\nparty at will provide the default tag latest\nall the time. So it is pulling from the docker\nHub right now because it couldn't find it\nlocally. So download is completed is currently\nextracting it. Now if I want to run a container,\nall I have to type here is to occur and - IIT\nUbuntu or you can type the image ideas. Well,\nso I am in the Ubuntu container. So I've told\nyou how you can see the various Docker images\nof told you how you can pull an image from\nDocker Hub and how you can actually go ahead\nand run a container and you're going to focus\non continuous monitoring now, so continuous\nmonitoring tools resolve any system errors,\nyou know, what kind of system errors low memory\nunreachable server, etc, etc. Before they\nhave any negative impact on your business\nproductivity. Now, what are the reasons to\nuse continuous monitoring tools? Let me tell\nyou that it detects any network or server\nproblems. It can determine the root cause\nof any issue. It maintains the security and\navailability of the services and also monitors\nin troubleshoot server performance issues.\nIt also allows us to plan for infrastructure\nupgrades before outdated system cause failures\nand it can respond to issues of the first\nsign of problem and let me tell you guys these\ntools can be used to automatically fix problems\nwhen they are detected as well. It also ensures\nit infrastructure outages have a minimal effect\non your organization's bottom line and can\nmonitor your entire infrastructure and business\nprocesses. So what is continuous monitoring\nit is all about the ability of an organization\nto detect report respond contain and mitigate\nthat acts that occur on its infrastructure\nor on the software. So basically we have to\nmonitor the events on the ongoing basis and\ndetermine what level of risk. We are experiencing.\nSo if I have to summarize continuous monitoring\nin one definition, I will say it is the integration\nof an organization security tools. So we have\ndifferent security tools in an organization\nthe integration of those tools the aggregation\nnormalization and correlation of the data\nthat is produced by the security tools right\nnow. It happens the data that has been produced\nthe analysis of that data based on the organization's\nrisk goals and threat knowledge and near real-time\nresponse to the risks identified is basically\nwhat is continuous monitoring and this is\na very good saying guys if you can't measure\nit, you can't manage it. I hope you know what\nI'm talking about. Now, there are multiple\ncontinuous monitoring tools available in the\nmarket. We're going to focus on nagas now\ngive us is used for continuous monitoring\nof systems application services and business\nprocesses in a devops culture, right and in\nthe event of failure nagas can alert technical\nstaff of the problem allowing them to begin\nthe mediation process before outages affect\nbusiness processes and users or Customers\nso with nagas you don't have to explain why\n19 infrastructure outage affect your organization's\nbottom line. So let me tell you how it works.\nSo I'll focus on the diagram that is there\nin front of your screen. So now I give is\nruns on a server usually as a Daemon or a\nservice it periodically runs plugins residing\non the same server, they contact holes or\nservers on your network so you can see it\nin the diagram as well. It periodically runs\nplugins residing on the same server. They\ncontact horse or servers on your network or\non the Internet or Source overs, which can\nbe locally present or can be remotely present\nas well. One can view the status information\nusing the web interface. You can also receive\nemail or SMS notification if something happens,\nso now gives them and behaves like a scheduler\nthat runs out in scripts at certain moments.\nIt stores the results of those scripts and\nwe'll run other scripts if these results change\nnow what our plugins plugins are compiled\nexecutables or scripts that can be run from\na command line to check the status of a host\nor service. So now uses the results from the\nplugins. Mine the current status of the host\nand services on your network. So what happened\nactually in this diagram now your server is\nrunning on a host and plugins interact with\nlocal or remote host right. Now. These plugins\nwill send the information to the scheduler\nwhich displays that in the gy that's what\nis happening guys. All right, so we have discussed\nall the stages. So let me just give you a\nquick recap of what all things we have discussed\nfirst. We saw what was the methodology before\ndevops? We saw the waterfall model. What were\nits limitations then we understood the agile\nmodel and the difference between the waterfall\nand agile methodology. And what are the limitations\nof agile methodology then we understood how\ndevops overcomes all of those limitations\nin what exactly is the worms. We saw the various\nstages and tools involved in devops starting\nfrom Version Control. Then we saw continuous\nintegration. Then we saw countenance delivery.\nThen we saw countenance deployment. Basically,\nwe understood the difference between integration\ndelivery and deployment then we saw what is\nconfiguration management and containerization\nand finally explained continuous monitoring,\nright? So in between I was even switching\nback to my virtual machine where a few tools\nalready installed and I was telling you a\nfew Basics about those tools now comes the\nmost awaited topic of today's session which\nis our use case. So let's see what we are\ngoing to implement in today's use case. So\nthis is what we'll be doing. We have git repository,\nright? So developers will be committing code\nto this git repository. And from there. Jenkins\nwill pull that code and it will first clone\nthat repository after cloning that repository\nit will build a Docker image using a Docker\nfile. So we have the dockerfile will use that\nto build an image. Once that image is built.\nWe are going to test it and then push it onto\nDocker Hub as I've told you what is the organ\nof is nothing but like a git repository of\nDocker images. So this is what we'll be doing.\nLet me just repeat it once more so developers\nwill be committing changes in the source code.\nSo the moment any developers commit to change\nin the source code Jenkins will clone the\nentire git repository. It will build a Docker\nimage based on a Docker file that will create\nand from there. It will push the docker image\nonto the docker Hub. This will happen automatically.\nThe click of a button. So what I'll do is\nwe'll be using will be using gate Jenkins\nand Docker. So let me just quickly open my\nVirtual Machine and I'll show you that so\nwhat our application is all about. So we are\nbasically what creating a Docker image of\na particular application and then pushing\nit onto Docker Hub in an automated fashion.\nAnd our code is written in the GitHub repository.\nSo what is it application? So it's basically\na Hello World server written with node. So\nwe have a main dot JS. Let me just go ahead\nand show you on my GitHub repository. Let\nme just go back. So this is how our application\nlooks like guys we have main dot J's right\napart from that. We have packaged or Json\nfor a dependencies. Then we have Jenkins file\nand dockerfile Jenkins file. I'll explain\nit to you what we are going to do with it.\nBut before that let me just explain you few\nbasics of Docker file and how we can build\na Docker image of this particular. Very basic\nnode.js application. First thing is writing\na Docker file now to be able to build a Docker\nimage with our application. We will need a\nDocker file. Yeah, right you can think of\nit as a blueprint for Docker. It tells Docker\nwhat the contents in parameters of our image\nshould be so Docker images are often based\non other images, but before that, let me just\ngo ahead and create a Docker file for you.\nSo let me just first clone this particular\nRepository. So let me go to that particular\ndirectory first. It's Darren downloads. Let\nme unzip this first unzip divorce - tutorial\nand let me hit an LS command. So here is my\napplication present. So I'll just go to this\nparticular devops - tutorial - master and\nlet me just say my terminal let us focus on\nwhat all files we have. We have dockerfile.\nLet's not focus on Jenkins file at all for\nnow, right we have dockerfile. We have main\ndot J's package dot Json read me dot MD and\nwe have test dot J's. So I have a Docker file\nwith the help of which I will be creating\na Docker image, right? So let me just show\nyou what I have written in this Docker file\nbefore this. Let me tell you that Docker images\nare often based on other images right for\nthis example. We are basing our image on the\nofficial node Docker image. So this line that\nyou are seeing is basically to base our application\non the official node Docker image. This makes\nour job easy and our dockerfile very very\nshort guys. So the in a hectic task of installing\nnode, and it's dependencies in the image is\nalready done in our basement. So we'll just\nneed to include our application. Then we have\nset a label maintainer. I mean, this is optional\nif you want to do it. Go ahead. If you don't\nwant to do it, it's still fine. There's a\nhealth check which is basically for Docker\nto be able to tell if the server is actually\nup or not. And then finally we are telling\nDocker which Port ask server will run on right?\nSo this is how we have written the dockerfile.\nLet me just go ahead and close this and now\nI'm going to create an image using this Docker\nfile. So for that all I have to type here\nis sudo docker Bell slash home slash Edureka\ndownloads devops - tutorial basically the\npath to my dockerfile and here we go need\nto provide the sudo password. So had I started\nnow and is creating an image for me the docker\nimage and it is done it successfully built\nand this is my image ID, right so I can just\ngo ahead and run this as well. So all I have\nto type here is Docker Run - it and my image\nID and here we go. So it is listening at Port\n8000. Let me just stop it for now. So I've\ntold you how you can create an image using\nDocker file right now. What I'm going to do,\nI'm going to use Jenkins in order to clone\na git repository then build an image and then\nperform testing and finally pushing it onto\nDocker Hub my own tokra profile. All right,\nbut before that what we need to do is we need\nto tell Jenkins what our stages are and what\nto do in each one of them for this purpose.\nWe will write Jenkins pipeline specification\nin on Jenkins file. So let me show you how\nthe Jenkins file looks like just click on\nit. So this is what I have written in my Jenkins\nfile, right? That's pretty self-explanatory\nfirst. I've defined my application. I mean\njust clone the repository that I have then\nbuild that image. This is the target I'm using\na draca one, which is username. And Erica\nis the repository name rights built that image\nthen test it. So we are just going to print\ntest passed and then finally push it onto\nDocker Hub, right? So this is the URL of Docker\nHub and my credentials are actually saved\nin Jenkins in Docker Hub credentials. So,\nlet me just show you how you can save those\ncredentials. So go to the credentials tab,\nso here you need to click on system and click\non global credentials. Now over here, you\ncan go ahead and click on update and you need\nto provide your username your password and\nyour doctor have credential ID that whatever\nyou gonna pass there, right? So, let me just\ntype the password again. All right. Now we\nneed to tell Jenkins two things where to find\nour code and what credentials to use to publish\nthe docker image, right? So I've already configured\nmy project. Let me just go ahead and show\nyou what I have written there. So the first\nthing is the name of my project right which\nI was showing you when you create a new item\nover there. There's an option called where\nyou need to give the name of your project\nand I've chosen pipeline project. So if I\nhave to show you the pipeline project you\ncan go to new item. And this is what I've\nchosen that the kind of project and then I\nhave clicked on Bill triggers. So basically\nthis will pull my CM the source code management\nrepository after every minute Whenever there\nis a change in the source code will pull that\nand it will repeat the entire process after\nevery minute then Advanced project options\nare selected the pipeline script from SCM\nhere either you can write pipeline script\ndirectly or you can click on Pipeline script\nfrom source code management that kind of source\ncode management is get then I've provided\nthe link to my repository and that's all I\nhave done now when I scroll down there's nothing\nelse I can just click on apply and Save So\nI've already build this project one. So let\nme just go ahead and do it again. All right\nside. I started first. It will clone the repository\nthat I have. You can find all the logs. Once\nyou click on this blue color ball and you\ncan find the logs here as well. So once you\nclick here, you'll find it over here as well.\nAnd similarly the logs are present here also,\nso now I we have successfully build our image.\nWe have tested it now. We are pushing it onto\nDocker hub. So we are successfully pushed\nour image onto Docker Hub as well. Now if\nI go back to my profile and I go to my repository\nhere. So you can find the image is already\npresent here have actually pushed it multiple\ntimes. So this is how you will execute the\nPractical. It was very easy guys. So let me\njust give you a quick recap of all the things\nwe have done first. I told you how you can\nwrite a Docker file in order to create a Docker\nimage of a particular application. So we were\nbasing our image on the official node image\nof present of the docker Hub, right which\nalready contains all the dependencies and\nit makes a Docker file looks very small after\nthat. I build an image using the dockerfile\nthen I explain to you how you can use Jenkins\nin order to automate the task of cloning a\nrepository then building a Docker image testing\nthe docker image and then finally uploading\nthe add-on to the docker Hub. We did that\nautomatically with the help of Jenkins a told\nyou where you need to provide the credentials\nwhat our tags how you can write Jenkins file\nthe next part of the use cases different teams\nbeat staging and production can actually pull\nthe image that we have uploaded onto Docker\nHub and can run as many containers as you\nwant. Hey everyone, this is Reyshma from Edureka\nand today's tutorial. We're going to learn\nabout git and GitHub. So without any further\nAdo, let us begin this tutorial by looking\nat the topics that we'll be learning today.\nSo at first we will see what is Version Control\nand why do we actually need Version Control\nafter that? We'll take a look at the different\nversion control tools and then we'll see all\nabout GitHub and get lots of taking account\na case study of the Dominion Enterprises about\nhow they're using GitHub after that. We'll\ntake a look at the features of git and finally\nwe're going to use all the git commands to\nperform all the get operations. So this is\nexactly what we'll be learning today. So we're\ngood to go. So let us begin with the first\ntopic. What is Version Control? Well, you\ncan think of Version Control as the management.\nSystem that manages the changes that you make\nin your project till the end the changes that\nyou make might be some kind of adding some\nnew files or you're modifying the older files\nby changing the source code or something.\nSo what the version control system does is\nthat every time you make a change in your\nproject? It creates a snapshot of your entire\nproject and saves it and these snapshots are\nactually known as different versions. Now\nif you're having trouble with the word snapshot\njust consider that snapshot is actually the\nentire state of your project at a particular\ntime. It means that it will contain what kind\nof files your project is storing at that time\nand what kind of changes you have made. So\nthis is what a particular version contains\nnow, if you see the example here, let's say\nthat I have been developing my own website.\nSo let's say that in the beginning. I just\nhad only one web page which is called the\nindex dot HTML and Few days. I have added\nanother webpage to it, which is called about\ndot HTML and I have made some modifications\nin the about our HTML by adding some kind\nof pictures and some kind of text. So, let's\nsee what actually the Version Control System\nstores. So you'll see that it has detected\nthat something has been modified and something\nhas been created. For example, it is storing\nthat about dot HTML is created and some kind\nof photo is created or added into it and let's\nsay that after a few days. I have changed\nthe entire page layout of the about dot HTML\npage. So again, my version control system\nwill detect some kind of change and will say\nthat some about duration T. Ml has been modified\nand you can consider all of these three snapshots\nas different versions. So when I only have\nmy index dot HTML webpage and I do not have\nanything else. This is my version 1 and after\nthat when I added another web page, this is\ngoing to be a version 2 and after have The\npage layout of my web page. This is my version\n3. So this is how a Version Control System\nstores different versions. So I hope that\nyou've all understood what is a version control\nsystem and what are versions so let us move\non to the next topic and now we'll see why\ndo we actually need Version Control? Because\nyou might be thinking that why should I need\na Version Control? I know what the changes\nthat I have made and maybe I'm making this\nchanges just because I'm correcting my project\nor something, but there are a number of things\nbecause of why we need Version Control n so\nlet us take a look at them one by one. So\nthe first thing that version control system\navails us is collaboration. Now imagine that\nthere are three developers working on a particular\nproject and everyone is working in isolation\nor even if they're working in the same shared\nfolder. So there might be conflicts sometimes\nwhen each one of them are trying to modify\nthe same file. Now, let's say they are working\nin isolation. Everyone is minding their own\nbusiness. Now the developer one has made some\nchanges XYZ in a particular application and\nin the same application the developer to has\nmade some kind of other changes ABC and they\nare continuing doing that same thing. They're\nmaking the same modifications to the same\nfile, but they're doing it differently. So\nat the end when you try to collaborate or\nwhen you try to merge all of their work together,\nyou'll come up with a lot of conflicts and\nyou might not know who have done what kind\nof changes and this will at the end end up\nin chaos. But with Version Control System,\nit provides you with a shared workspace and\nit continuously tells you who has made what\nkind of change are what has been changed.\nSo you'll always get notified if someone has\nmade changed in your project. So with Version\nControl System a collaboration is available\ntween all the developers and you can visualize\neveryone's work properly and as a result your\nproject will always evolve as a whole from\nthe start and it will save a lot of time for\nyou because there won't be much conflicts\nbecause obviously if the developer a will\nsee that he has already made some changes\nhe won't go for that right because he can\ncarry out his other work. You can make some\nother changes without interfering his work.\nOkay, so we'll move on to the next reason\nfor what I we need Version Control System.\nAnd this is one of the most important things\nbecause of why we need Version Control System.\nI'll tell you why now. The next reason is\nbecause of storing versions because saving\na version of your project after you have made\nchanges is very essential and without a Version\nControl System. It can actually get confusing\nbecause there might be some kind of questions\nthat will arise in your mind when you are\ntrying to save a version the first question\nmight be how much would you save would you\njust save the entire project or would you\njust save the changes that you made now? If\nyou only save the changes it'll be very hard\nfor you to view the whole project at a time.\nAnd if you try to save the entire project\nat every time there will be a huge amount\nof unnecessary and redundant data lying around\nbecause you'll be saving the same thing that\nhas been remaining unchanged again. And again,\nI will cover up a lot of your space and after\nthat they're not the problem comes that. How\ndo I actually named this versions now? Even\nif you are a very organized person and you\nmight actually come up with a very comprehensive\nnaming scheme, but as soon as your project\nstarts varying and it comes to variance there\nis a pretty good chance that you'll actually\nlose track of naming them. And finally the\nmost important question. Is that how do you\nknow what exactly is different between these\nversions now you ask me that? Okay. What's\nthe difference between version 1 and version\n2 what exactly was changed you need to remember\nor document them as well. Now when you have\na version control system, you don't have to\nworry about any of that. You don't have to\nworry about how much you need to save. How\ndo you name them? Are you have to you don't\nhave to remember that what exactly is different\ndifferent between the versions because the\nVersion Control System always acknowledges\nthat there is only one project. So when you're\nworking on your project, there is only one\nversion on your disk. And everything else\nall the changes that they've made in the past\nare all neatly packed inside the Version Control\nSystem. Let us go ahead and see the next reason\nnow version control system provides me with\na backup. Now the diagram that you see here\nis actually the layout of a particul distributed\nVersion Control System here. You've got your\ncentral server where all the project files\nare located and apart from that every one\nof the developers has a local copy of all\nthe files that is present in the central server\ninside their local machine and this is known\nas the local copies. So what the developers\ndo is that every time they start coding at\nthe start of the day, they actually fetch\nall the project files from the central server\nand store it in the local machine and after\nthey are done working the actually transfer\nall the files back into the central server.\nSo at every time you'll always Is have a local\ncopy in your local machine at times of Crisis.\nLike maybe let's say that your central server\ngets crashed and you have lost all your project\nfiles. You don't have to worry about that\nbecause all the developers are maintaining\na local copy the same exact copy of all the\nfiles that is related to your project that\nis present in the central server. Is there\nin your local machine and even if let's say\nthat maybe this developer has not updated\nhis local copy with all the files if he loses\nand the central servers gets crashed and the\ndeveloper has not maintained its local copy\nis always going to be someone who has already\nupdated it because obviously there is going\nto be huge number of collaborators working\non the project. So even a particular developer\ncan communicate with other developers and\nget fetch all the project files from other\ndevelopers local copy as well. So it is very\nreliable when you have a version control system\nbecause you're always going to have a backup\nof all. You're fired. So the next thing and\nwhich Version Control helps us is to analyze\nmy project because when you have finished\nyour project you want to know that how your\nproject has actually evolved so that you can\nmake an analysis of it and you can know that\nwhat could you have done better or what could\nhave been improved in your project? So you\nneed some kind of data to make an analysis\nand you want to know that what is exactly\nchanged and when was it change and how much\ntime did it take and Version Control System\nactually provides you with all the information\nbecause every time you change something version\ncontrol system provides you with the proper\ndescription of what was changed. And when\nwas it changed you can also see the entire\ntimeline and you can make your analysis report\nin a very easy way because you have got all\nthe data present here. So this is how a version\ncontrol system helps you to analyze your project\nas well. So let us move ahead and let us take\na look. Add the Version Control tools because\nin order to incorporate version control system\nin your project, you have to use a Version\nControl tool. So let us take a look at what\nis available. What kind of tools can I use\nto incorporate version control system. So\nhere we've got the four most popular version\ncontrol system tools and they are get and\nthis is what we'll be learning in today's\ntutorial will be learning how to use git and\napart from get you have got other options\nas well. You've got the Apache subversion\nand this is also popularly known as SBN SVN\nand CVS, which is the concurrent version systems.\nThey both are a centralized Version Control\ntool. It means that they do not provide all\nthe developers with a local copy. It means\nthat all the contributors are all the collaborators\nare actually working directly with the central\nrepository only they don't maintain local\ncopy and Kind of actually becoming obsolete\nbecause everyone prefers a distributed Version\nControl System where everyone has an okay\ncopy and Mercurial on the other hand is very\nsimilar to get it is also a distributed Version\nControl tool but we'll be learning all about\nget here. That's what I get is highlighted\nin yellow. So let's move ahead. So this is\nthe interest over time graph and this graph\nhas been collected from Google Trends and\nthis actually shows you that how many people\nhave been using what at what time so the blue\nline here actually represents get the green\nis SVN. The yellow is Mercurial and the red\nis CVS. So you can see that from the start\nget has always been the most popular version\ncontrol tool as compared to as bian Mercurial\nand CVS and it has always kind of been a bad\nday for CVS, but get has always been popular.\nSo why not use get right? So there's nothing\nto say much about That a yes and a lot of\nmy fellow attendees agree with me. We should\nall use get and we're going to learn how to\nuse get in this tutorial. So let us move ahead\nand let us all learn about git and GitHub\nright now. So the diagram that you see on\nmy left is actually the diagram which represents\nthat what exactly is GitHub and what exactly\nis get now I've been talking about a distributed\nversion control system and the right hand\nside diagram actually shows you the typical\nlayout of a distributed Version Control System\nhere. We've got a central server or a central\nrepository now, I'll be using the word repository\na lot from now on just so that you don't get\nconfused. I'll just give you a brief overview.\nI'll also tell you in detail. What is the\nrepository and I'll explain you everything\nlater in this tutorial, but for now just consider\nrepository as a data space where you store\nall the project files any kind of files that\nis related. Your project in there, so don't\nget confused when I say rip off the tree instead\nof server or anything else. So in a Distributive\nVersion Control System, you've got a central\nrepository and you've got local repositories\nas well and every of the developers at first\nmake the changes in their local repository\nand after that they push those changes or\ntransfer those changes from into the central\nrepository and also the update their local\nrepositories with all the new files that are\npushed into the central repository by an operation\ncalled pull. So this is how the fetch data\nfrom Central repository. And now if you see\nthe diagram again on the left, you'll know\nthat GitHub is going to be my central repository\nand get is the tool that is going to allow\nme to create my local repositories. Now, let\nme exactly tell you what is GitHub. Now people\nactually get confused between git and GitHub\nthey I think that it's kind of the same thing\nmaybe because of the name they sound very\nalike. But it is actually very different.\nWell git is a Version Control tool that will\nallow you to perform all these kind of operations\nto fetch data from the central server and\nto just push all your local files into the\ncentral server. So this is what get will allow\nyou to do it is just a Version Control Management\ntool. Whereas in GitHub. It is a code hosting\nplatform for Version Control collaboration.\nSo GitHub is just a company that allows you\nto host your central repository in a remote\nserver. If you want me to explain in easy\nwords, you can consider GitHub as a social\nnetwork, which is very much similar to Facebook.\nLike only the differences that this is a social\nnetwork for the developers. We're in Facebook,\nyou're sharing all your photos and videos\nor any kind of statuses. What the developers\ndoing get have is that they share their code\nfor everyone to see their projects either\ncode about how they have worked on. So that\nis GitHub. There are certain advantages of\na distributed Version Control System. Well,\nthe first thing that I've already discussed\nwas that it provides you with the backup.\nSo if at any time your central server crashes,\neveryone will have a backup of all their files\nand the next reason is that it provides you\nwith speed because Central servers typically\nlocated on a remote server and you have to\nalways travel over a network to get access\nto all the files. So if at sometimes you don't\nhave internet and you want to work on your\nproject, so that will be kind of impossible\nbecause you don't have access to all your\nfiles, but with a distributed Version Control\nSystem, you don't need internet access always\nyou just need internet when you want to push\nor pull from the central server apart from\nthat you can work on your own your files are\nall inside your local machine so fetching\nit. In your workspace is not a problem. So\nthat are all the advantages that you get with\na distributed version control system and a\ncentralized version control system cannot\nactually provide you that so now let us take\na look at a GitHub case study of the Dominion\nEnterprises. So Dominion Enterprises is a\nleading marketing services and Publishing\ncompany that works across several Industries\nand they have got more than 100 offices worldwide.\nSo they have distributed a technical team\nsupport to develop a range of a website and\nthey include the most popular websites like\nfor and.com volts.com homes.com. All the Dominion\nEnterprises websites actually get more than\ntens of million unique visitors every month\nand each of the website that they work on\nhas a separate development team and all of\nthem has got a unique needs and You were close\nof their own and all of them were working\nindependently and each team has their own\ngoals their own projects and budgets, but\nthey actually wanted to share the resources\nand they wanted everyone to see what each\nof the teams are actually working on. So basically\nthey want to transparency. Well the needed\na platform that was flexible enough to support\na variety of workflows. And that would provide\nall the Dominion Enterprises development around\nthe world with a secure place to share code\nand work together and for that they adopted\nGitHub as the platform. And the reason for\nchoosing GitHub is that all the developers\nacross the Dominion Enterprises, we're already\nusing github.com. So when the time came to\nadopt a new version control platform, so obviously\nGitHub Enterprise definitely seemed like a\nvery intuitive choice and because everyone\nall the developers were also familiar with\nGitHub. So the learning curve Was also very\nsmall and so they could start contributing\ncode right away into GitHub and with GitHub\nall the developer teams. All the development\nteams were provided access to when they can\nalways share their code on what they're working\non. So at the end everyone has got a very\nsecure place to share code and work together.\nAnd as Joe Fuller, the CIO of dominion Enterprises\nsays that GitHub Enterprise has allowed us\nto store our company source code in a central\ncorporately control system and Dominion Enterprises\nactually manages more than 45 websites, and\nit was very important for dominion and the\nprice to choose a platform that made working\ntogether possible. And this wasn't just a\nmatter of sharing Dominion Enterprises open\nsource project on GitHub. They also had to\ncombat the implications of storing private\ncode publicly to make their work more transparent\nacross the company as well and they were also\nusing Jenkins to facilitate continuous integration\nenvironment and in order to continuously deliver\ntheir software. They have adopted GitHub as\na Version Control platform. So GitHub actually\nfacilitated a lot of things for Dominion Enterprises\nand for that there were able to incorporate\na continuous integration environment with\nJenkins and they were actually sharing their\ncode and making software delivery even more\nfaster. So this is how GitHub helped not only\njust a minute Enterprises, but I'm sure there's\nmight be common to a lot of other companies\nas well. So let us move forward. So now this\nis the topic that we were waiting for and\nnow we'll learn what is get so git is a distributed\nVersion Control tool and it supports distributed\nnon linear workflow. So get is the tool that\nactually facilitates all the distributed Version\nControl System benefits because it will provide\nyou to create a local Repository. In your\nlocal machine and it will help you to access\nyour remote repository to fetch files from\nthere or push files and do that. So get is\nthe tool that you required to perform all\nthese operations and I'll be telling you all\nabout how to perform these operations using\nget later in this tutorial for now. Just think\nof get as a to that you actually need to do\nall kind of Version Control System task. So\nwe'll move on and we'll see the different\nfeatures of git now. So these are the different\nfeatures of get is distributed get is compatible\nget a provides you with the non linear workflow\nat avails you branching. It's very lightweight\nit provides you with speed. It's open source.\nIt's reliable secure and economical. So let\nus take a look at all these features one by\none. So the first feature that we're going\nto look into is its distributed now, I've\nbeen like telling you it's a it's a distributor.\nVersion Control tool that means that the feature\nthat get provides you is that it gives you\nthe power of having a local repository and\nlets you have a local copy of the entire development\nhistory, which is located in the central repository\nand it will fetch all the files from the central\nrepository to get your local repository always\nupdated and this time calling it distributed\nbecause every was let's say that there might\nbe a number of collaborators or developers\nso they might be living in different parts\nof the world. Someone might be working from\nthe United States and one might be in India.\nSo the word the project is actually distributed.\nEveryone has a local copy. So it is distributed\nworldwide you can say so this is what distributed\nactually means. So the next feature is that\nit is compatible. Now, let's say that you\nmight not be using get on the first place.\nBut you have a different version control system\nalready installed like SVN, like Apache subversion\nor CVS and you want to switch to get because\nobviously you're not happy with the centralized\nversion control system and you want a more\ndistributed version control system. So you\nwant to migrate from SVN to get but you are\nworried that you might have to transfer all\nthe files all the huge amount of files that\nyou have in your SVN repository into a git\nrepository. Well, if you are afraid of doing\nthat, let me tell you you don't have to be\nanymore because get is compatible with as\nVM repositories as well. So you just have\nto download and install get in your system\nand and you can directly access the SVN repository\nover a network which is the central repository.\nSo the local repository that you'll have is\ngoing to be a good trip. The tree and if you\ndon't want to change your central repository,\nthen you can do that as well. We can use get\nSVN and you can directly access all the files\nall the files in your project that is residing\nin an SVN repository. So do you don't have\nto change that and it is compatible with existing\nsystems and protocols but there are protocols\nlike SSH and winner in protocol. So obviously\nget users SSH to connect to the central repository\nas well. So it is very compatible with all\nthe existing things so you don't have to so\nwhen you are migrating into get when you are\nstarting to use get you don't have to actually\nchange a lot of things so is as I have everyone\nunderstood these two features by so far Okay,\nthe next feature of get is that it supports\nnonlinear development of software. Now when\nyou're working with get get actually records\nthe current state of your project by creating\na tree graph from the index a tree that you\nknow is nonlinear now when you're working\nwith get get actual records the current state\nof the project by creating a tree graph from\nthe index. And as you know that a tree is\na non linear data structure and it is usually\nactually in the form of a directed acyclic\ngraph which is popularly known as the DH e.\nSo, this is how I actually get facilitates\na nonlinear development of software and it\nalso includes techniques where you can navigate\nand visualize all of your work that you are\ncurrently doing and how does it actually facilitate\nand when I'm talking about non-linearity,\nhow does get actually facilitates a nonlinear\ndevelopment is actually by Crunching now branching\nactually allows you to make a nonlinear software\ndevelopment. And this is the gift feature\nthat actually makes get stand apart from nearly\nevery other Version Control Management do\nbecause get is the only one which has a branching\nmodel. So get allows and get actually encourages\nyou to have a multiple local branches and\nall of the branches are actually independent\nof each other the and the creation and merging\nand deletion of all these branches actually\ntakes only a few seconds and there is a thing\ncalled the master Branch. It means the main\nbranch which starts from the start of your\nproject to the end of your project and it\nwill always contain the production quality\ncode. It will always contain the entire project\nand after that it is very lightweight now\nyou might be thinking that since we're using\nlocal repositories on our local machine and\nwe're fetching all the files that are in the\ncentral repository. And if you think that\nway you can know that there are like hon,\nmaybe there are It's of people's pushing their\ncode into the central repository and and updating\nmy local repository with all those files.\nSo the data might be very huge but actually\nget uses lossless compression technique and\nit compresses the data on the client side.\nSo even though it might look like that you've\ngot a lot of files when it actually comes\nto storage or storing the data in your local\nrepository. It is all compressed and it doesn't\ntake up a lot of space only when you're fetching\nyour data from the local repository into your\nworkspace. It converts it and then you can\nwork on it. And whenever you push it again,\nyou can press it again and store it in a very\nminimal space in your disk and after that\nit provides you with a lot of speed now, since\nyou have a local repository and you don't\nhave to always travel over a network to fetch\nfiles, so it does not take any time to get\nfiles in your into your workspace from your\nlocal repository because and if you see that\nit is actually Three times faster than fetching\ndata from a remote repository because he's\nobviously have to travel over a network to\nget that data or the files that you want and\nMozilla has actually performed some kind of\nperformance tests and it is found out that\nget is actually one order of magnitude faster\nthan other version control tools, which is\nactually equal to 10 times faster than other\nversion control tools. And the reason for\nthat is because get is actually written in\nC and C is not like other high-level languages.\nIt is very close to machine language. So it\nproduces all the runtime overheads and it\nmakes all the processing very fast. So get\nis very small and it get is very fast. And\nthe next feature is that it is open source.\nWell, you know that get was actually created\nby Linus Torvalds and he's the famous man\nwho created the Linux kernel and he actually\nused get in the development of the Next Colonel\nnow, they were using a Version Control System\ncalled bitkeeper first, but it was not open\nsource day. So the owner of bitkeeper has\nactually made it a paid version and this actually\ngot Linus Torvalds mad. So what he did is\nthat he created his own version control system\ntool and he came up with get and he made it\nopen source for everyone so that you can so\nthe source code is available and you can modify\nit on your own and you can get it for free.\nSo there is one more good thing about get\nand after that it is very reliable. Like I've\nbeen telling you since the star that egg have\na backup of all the files in your local repository.\nSo if your central server crashes, you don't\nhave to worry your files are all saving your\nlocal repository and even if it's not in your\nlocal repository, it might be in some other\ndevelopers local repository and you can tell\nhim when and whenever you need some that data\nand you lose the data and after your central\nserver is all If it was crashed, he can directly\npush all the data into the central repository\nand from there everyone and Skinner always\nhave a backup. So the next thing is that get\nis actually very secure now git uses the sha-1\ndo name and identify objects. So whenever\nyou actually make change it actually creates\na commit object and after you have made changes\nand you have committed to those changes, it\nis actually very hard to go back and change\nit without other people knowing it because\nwhenever you make a commit the sha-1 actually\nconverts it what is sha-1. Well it is a kind\nof cryptographic algorithm. It is a message\ndigest algorithm that actually converts your\ncommit object into a four digit hexadecimal\ncode Now message AI uses techniques and algorithms\nlike md4 md5 and it is actually very secure.\nIt is considered to be very secure because\neven National Security Agency of the United\nStates of America uses ssj. I so if they're\nusing it so you might know that it is very\nsecure as well. And if you want to know what's\nmd5 and message digest I'm not going to take\nyou through the whole algorithm whole cryptographic\nalgorithm about how they make that Cipher\nand all you can Google it and you can learn\nwhat is sji, but the main concept of it is\nthat after you have made changes. You cannot\ndeny that you have not met changes because\nit will store it and everyone can see it it\nwill create commit hash for you. So everyone\nwill see it and this commit hash can is also\nuseful when you want to revert back to previous\nversions you want to know that which commits\nexactly caused what problem and if you want\nto remove that commit or if you want to remove\nthat version you can do that because sha I\nwill give you the hash log of every government\nso we move on and see the Feature, which is\neconomical now get is actually released under\nthe general public license and it means that\nit is for free. You don't have to pay any\nmoney to download get in your system. You\ncan have kids without burning a hole in your\npocket. And since all the heavy lifting is\ndone on the kind side because everything you\ndo you do it on your own entire workspace\nand you push it into the local repository\nfirst, and after that it's pushing the central\nserver. So it means that people are only pushing\ninto the central server after when they're\nsure about their work and and they're not\nexperimenting on the central repository. So\nyour central repository can be very simple\nenough. You don't have to worry about having\na very complex and very powerful hardware\nand a lot of money can be saved on that as\nwell. So get us free get a small so good provides\nyou with all the cool features that you would\nactually want. So this All the get features.\nSo we'll go ahead to the next topic our next\nthe first we'll see what is a repository now\nas GitHub says that it is a directory or storage\nspace where all your projects get live. It\ncan be local to a folder on your computer\nlike your local repository or it can be a\nstorage space and GitHub or another online\nhost. It means your central repository and\nyou can keep your gold files text files image\nfiles. You name it? You can keep it inside\na repository everything that is related to\nyour project and like I have been chanting\nsince the start of this tutorial that we have\ngot two kinds of repositories. We've got the\ncentral repository and we've got the local\nrepository and now let us take a look at what\nthis repositories actually are. It's on my\nleft hand side. You can see all about the\ncentral repository and in the right hand side.\nThis is all about my local repository and\nthe diagram in the middle actually shows you\nthe entire layout so the local repository\nwill be inside my local machine and my central\nrepository for now is going to be on GitHub.\nSo my central repository is typically located\non a remote server and like I just told you\nit is typically located on GitHub and my local\nrepository is going to be my local machine\nat we reside in as in a DOT git folder and\nit will be inside your Project's root. The\ndot git folder is going to be inside your\nProject's root and it will contain all the\ntemplates and all the objects and every other\nconfiguration files when you create your local\nrepository and since you're pushing all the\ncode, your central repository will also have\nthe same dot git repository folder inside\nit and the sole purpose of having a central\nrepository is so that you're all the Actors\nare all the developers can actually share\nand exchange the data because someone might\nbe working on a different problem and someone\nmight be needing help in that so what you\ncan do is that he can push all the code all\nthe problems that he has sauce or something\nthat he has worked on it to the central repository\nand everyone else can see it and everyone\nelse can pull his code and use it for themselves\nas well. So this is just meant for sharing\ndata. Whereas in local repository. It is only\nyou can access it and it is only meant for\nyour own so you can work in your local repository.\nYou can work in isolation and no one will\ninterfere even after you have done after years\nsure that your code is working and you want\nto show it to everyone just transfer it or\npush it into the central Repository. Okay,\nso now we'll be seeing the get operations\nand come on. So this is how we'll be using\nit. There are various operations and commands\nthat will help us to do all the things that\nwe were just talking about right now. We're\ntalking about pushing changes. So these are\nall get operations. So we'll be performing\nall these operations will be creating repositories\nwith this command will be making changes in\nthe files that are in a repositories with\nthe commands will be also doing parallel nonlinear\ndevelopment that I was just talking about\nand we also be sinking a repositories so that\nour Central repository and local repository\nare connected. So I'll show you how to do\nthat one by one. So the first thing that we\nneed to do is create repositories, so we need\na central repository and we need a local repository\nnow will host our Central repository on GitHub.\nSo for that you need an account in GitHub.\nAnd create a repository there and for your\nlocal repository you have to install get in\nyour system. And if you are working on a completely\nnew project and if you want to start something\nfresh and very new you can just use git init\nto create your repository or if you want to\njoin an ongoing project, and if you're new\nto the project and you just join so what you\ncan do is that you can clone the central repository\nusing this command get blown. So let us do\nthat. So let's first create a GitHub account\nand create repositories on GitHub. I said\nfirst you need to go to github.com. And if\nyou don't have an account, you can sign up\nfor GitHub and here you just have to pick\na username that has not been already taken\nyou have just provide your email address get\na password and then just click this green\nbutton here and your account will be created.\nIt's very easy don't have to do much and after\nthat you just have to verify your email and\neverything and after you're done with all\nsort of thing. You can just go a sign in our\nalready have an account. So I'm just going\nto sign in here. Softer you're signed in you'll\nfind this page here. So you'll get two buttons\nwhere you can read the guide of how to use\nGitHub or you can just start a project right\naway. Now, I'll be telling you all about GitHub\nso you don't have to click this button right\nnow. So you can just go ahead and start a\nproject. So now get tells that for every project\nyou need to have you need to maintain a unique\nrepository it is because it's very healthy\nand keeps things very clean because if you\nare storing just the files related to one\nproject in a repository, you won't get confused\nlater. So when you're creating a new repository,\nyou have to provide with a repository name\nnow, I'm just going to name it get - GitHub.\nAnd you can provide it with the description\nof this repository. And this is optional.\nIf you don't want to you can leave it blank\nand you can choose whether you want it public\nor private. Now if you want to it to be private,\nyou have to pay some kind of amount. So like\nthis will cost you $7 a month. And so what\nwhat is the benefit of having a private account?\nIs that only you can say it if you don't want\nto share your code with anyone and you don't\nwant anyone to see it. You can do that in\nGitHub as well. But for now, I'll just leave\nit public. I just want it for free and let\neveryone see my work what you have done. So\nwe'll just leave it up lik for now and after\nthat you can initialize this repository with\nthe read me. So the readme file will contain\nthe description of your files. This is the\nfirst file that is going to be inside a repository\nwhen you create the repository, so and it's\na good habit to actually initialize your repository\nof the readme, so I'll just click this option.\nThis is the option to add git ignore. Now.\nThere might be some kind of files that you\ndon't want when you're making operations,\nlike push or pull you don't want those files\nto get pushed or pulled like it might be some\nkind of log files or anything so you can add\nthose files and get ignore here. So right\nnow I don't have gone any files that this\nis just the starting of our project. So I\nwill just ignore this get ignore for now.\nAnd then you can actually add some license\nas well. So you can just go through what this\nlicense actually are. But if you want to just\nleave it as none. And after that just click\non this green button here, so just create\na repository. And so there it is so you can\nsee this is the initial comment you have initialized\nyour repository with the readme and this is\nyour readme file. Now if you want to make\nchanges and do the read me file, just click\non it and click on the edit pencil image or\nicon kind of that is in here and you can make\nchanges on the readme files if you want to\nwrite something. Let's say just write it as\nscription. So this is our tutorial purpose\nand that's it. Just keeping it simple. And\nafter that you've made changes. The next thing\nthat you have to do is you have to commit\na changes so you can just go down and click\non this commit changes green button here.\nAnd it's done. So you have updated read me\ndot MD and this is your commit hash so you\ncan see that in here. So if you go back to\nyour repository, you can say that something\nhas been updated and will show you when was\nyour last commit little even show you the\ntime? So and for now you're on the branch\nmaster your and this will actually show you\nall the logs. So since only I'm contributing\nhere. So this is only one contributor and\nI've just made two commits. The first one\nwas when I initialized it and right now when\nI modified it and right now I have not created\nany branches. So there is only one branch.\nSo now my central repository has been created.\nSo the next thing that I need to do is create\na local repository in my local machine. Now\nI have already installed get in my system.\nI have using a Windows system. So I have installed\nget for Windows. So if you want some help\nwith the installation, I have already written\na Blog on that. I'll leave the link of the\nblog in the description below. You can refer\nto that blog and install get in your system.\nNow, I've already done that. So let's say\nthat I want my project to be in the C drive.\nSo let's say I'm just waiting in folder here\nfrom my project. So just name it. Ed Eureka\nproject and let's say that this is where I\nwant my local repository to been. So the first\nthing that I'll do is right click and I'll\nclick this option here git bash here. And\nthis will actually open up a very colorful\nterminal for you to use and this is called\nthe git bash emulator. So this is where you'll\nbe typing all your commands and you'll be\ndoing all your work in the get back here.\nSo in order to create your local repository,\nthe first thing that you'll do is type in\nthis command get in it and press enter. So\nnow you can see that it is initialized empty\ngit repository on this path. So, let's see\nand you can see that a DOT get of a folder\nhas been created here and if you see here\nand see you can see that it contains all the\nconfigurations and the object details and\neverything. So your repository is initializing.\nThis is going to be your local repository.\nSo after we have created a repositories, it\nis very important to link them because how\nwould you know which repository to push into\nand how will you just pull all the changes\nor all the files from a remote repository?\nIf you don't know if they're not connected\nproperly. So in order to connect them with\nthe first thing that we need to do is that\nwe need to add a region and we're going to\ncall our remote repository as origin and we'll\nbe using the command git remote add origin\nto add so that we can pull files from our\nGitHub or Central repository. And in order\nto fetch files. We can use git pull and if\nyou want to transfer all your files or push\nfiles into GitHub will be using git push.\nSo let me just show you how to do that. So\nwe are back in the local repository. And as\nyou can see now that I have not got any kind\nof files. And if you go to my central repository,\nyou can see that I've got a readme file. So\nthe first thing that I need to do is to add\nthis remote repository as my origin. So for\nthat I'll clear my screen first. So for that\nyou need to use this command. Git remote add\norigin. And the link of yours and the repository\nand let me just show you where you can find\nthis link. So when you go back into your repository,\nyou'll find this green button here, which\nis the Clone or download just click here.\nAnd this is the HTTP URL that you want. So\njust copy it on your clipboard. Go back to\nyour git bash and paste it and enter so your\noriginal has been added successfully because\nit's not showing any kind of Errors. So now\nwhat will do is that will perform a git pull.\nIt means will fetch all the files from the\ncentral repository into my local Repository.\nSo just type in the command get full. origin\nmaster And you can see that they have done\nsome kind of fetching from the master Branch\ninto the master branch and let us see that\nwhether all the files have been fished or\nnot. Let us go back to our local repository\nand there is the readme file that was in my\ncentral repository and now it is in my local\nrepository. So this is how you actually update\nyour local repository from the central repository\nyou perform a git pull and it will fetch all\nthe files from this entire repository in your\nlocal machine. So let us move forward and\nmove ahead to the next operation. Now, I've\ntold you in order to sync repositories, you\nalso need to use a git push, but since we\nhave not done anything in our local repository\nnow, so I'll perform the good get push later\non after a show you all the operations and\nwe'll be doing a lot of things. So at the\nend I'll be performing the git push and push\nall the changes into my central Repository.\nAnd actually that is how you should do that\nthe it's a good habit and it's a good practice\nif you're working with GitHub and get is that\nwhen you start working. The first thing that\nyou need to do is make a get bull to fetch\nall the files from your central repository\nso that you could get updated with all the\nchanges that has been recently made by everyone\nelse and after you're done working after you're\nsure that your code is running then only make\nthe get Bush so that everyone can see it you\nshould not make very frequent changes into\nthe central repository because that might\ninterrupt the work of your other collaborators\nor other contributors as well. So let us move\nahead and see how we can make changes. So\nnow get actually has a concept it has an intermediate\nlayer that resides between your workspace\nand your local repository. Now when you want\nto commit changes or make changes in your\nlocal repository, you have to add those files\nin the index first. So this is the layer that\nis between your workspace and local repository.\nNow, if your files are not in the index, you\ncannot make commit organ app cannot make changes\ninto your local repository. So for that you\nhave to use the command git add and you might\nget confused that which all files are in the\nindex and which all are not. So if you want\nto see that you can use the command git status\nand after you have added the changes in the\nindex you can use the command git commit to\nmake the changes in the local repository.\nNow, let me tell you what is exactly a git\ncommit everyone will be talking about get\ncoming. Committing changes when you're making\nchanges. So let us just know what is a git\ncommit. So let's say that you have not made\nany kind of changes or this is your initial\nproject. So what a comet is is that it is\nkind of object which is actually a version\nof your project. So let's say that you have\nmade some changes and you have committed those\nchanges what your version control system will\ndo is that it will create another commit object\nand this is going to be your different version\nwith the changes. So your commit snapshots\nactually going to contain snapshots of the\nproject which is actually changed. So this\nis what come it is. So I'll just show you\nI'll just go ahead and show you how to commit\nchanges in your local repository. So we're\nback into our local repository. And so let's\njust create some files here. So now if you're\ndeveloping a project you might be just only\ncontributing your source code files into the\ncentral repository. So now I'm not just going\nto tell you all about coding. So we're just\ngoing to create some text files write something\nin that which is actually pretty much the\nsame if you're working on a gold and you're\nstoring your source code in your repositories.\nSo I just go ahead and create a simple text\nfile. Just name it Eddie one. Just write something\nso I'll just try first file. Save this file\nclose it. So now remember that even if I have\ncreated inside this repository, this is actually\nshowing my work space and it is not in my\nlocal repository now because I have not committed\nit. So what I'm going to do is that I'm going\nto see what all files are in my index. But\nbefore that I'll clear my screen because I\ndon't like junk on my screen. Okay. So the\nfirst thing that we're going to see is that\nwhat all files are added in my index and for\nthat I just told you we're going to use the\ncommand git status. So you can see that it\nis calling anyone dot txt which we just have\nwritten. It is calling it an untracked file\nnow untracked files are those which are not\nadded in the index yet. So this is newly created.\nI have not added it explicitly into the index.\nSo if I want to commit changes in Eddie one\ndot txt, I will have to add it in the index.\nSo for that I'll just use the command git\nadd and the name of your file which is a D1\nDot txt. And it has been added. So now let\nus check the status again. So for that will\nchoose get status. And you can see that changes\nready to be committed is the Eddie Wonder\ntxt? Because it's in the index and now you\ncan commit changes on your local repository.\nSo in order to commit the command that you\nshould be using is git commit. - em because\nwhenever you are committing you always have\nto give a commit message so that everyone\ncan see who made all this comments and what\nexactly is just so this commit message is\njust for your purpose that you can see what\nexactly was changed. But even if you don't\ndry it it the version control system is also\ngoing to do that. And if you have configured\nyour get it is always going to show that who's\nthe user who has committed this change. So\nI was just talking about writing a commit\nmessage. So I'm just going to write something\nlike adding first commit and press enter so\nyou can see one file change something has\nbeen inserted. So this is the changes are\nfinally committed in my local repository.\nAnd if you want to see how actually get stores\nall this commit with actually I'll show you\nafter I show you how to commit multiple files\ntogether. So let's just go back into our local\nRebel folder and we'll just create some more\nfiles more text files. I'm just going to name\nit. I do do with create another one. Just\nname it I do three. Let's just write something\nover here. We just say second file. Sorry.\nso let's go back to our get bash terminal\nand Now let us see the get status. So now\nyou can see that it is showing that I do too\nand I do three are not in my index and if\nyou remember anyone was already in the index,\nactually, let me just go back and make some\nmodifications in Eddie one as well. So I'm\ngoing to ride. modified one So, let's see\nget status again. And you can see that it\nis showing that anyone is modified and there\nare untracked files and you do and edit three.\nBecause I haven't added them in my index yet.\nSo now Sebastian and Jamie you have been asking\nme how to like a doll multiple files together.\nSo now I'm going to add all these files at\nonce so for that I'm just going to use get\nat - capital a Just press enter and now see\nthe get status. And you see that all the files\nhave been added to the index and ones. And\nit's similarly with commit as well. So now\nthat you have added all the files in the index.\nI can also commit them all at once and how\nto do that. Let me just show you you just\nhave to write git commit and - small a so\nif you want to commit all you have to use\n- small are in case of git commit whereas\nin case of get add if you want to add all\nthe files you have to use - capital A. So\njust remember that difference and add message.\nhiding so you can see three files has been\nchanged and now let me show you how this actually\ngets stores all this comets. So you can perform\nan operation called the git log. And you can\nsee so This Is 40 digit hexadecimal code that\nI was taking a talking about and this is the\nsha-1 hash and you can see the date and you\nhave got the commit message that we have just\nprovided where I just wrote adding three files\ntogether. It shows it it shows the date and\nthe exact time and the author and this is\nme because I've already configured it with\nmy name. So this is how you can see come in\nand this is actually how Version Control System\nlike get actually stores all your commit.\nSo let us go back and see the next operation\nwhich is how to do parallel development or\nnon-linear development. And the first operation\nis branching now, we've been talking about\nbranching a lot and let me just tell you what\nexactly is branching and what exactly you\ncan do with branching. Well, you can think\nof branches like a pointer to a To become\nit. Let's say that you've made changes in\nyour main branch. Now remember that your main\nbranch that I told you about. It's called\nThe Master branch and the master Branch will\ncontain all the code. So let's say that you're\nworking on the master branch and you've just\nmade a change and you've decided to add some\nnew feature on to it. So you want to work\non the new feature individually or you don't\nwant to interfere with the master Branch.\nSo if you want to separate that you can actually\ncreate a branch from this commit and let me\nshow you how to actually create branches.\nNow Alice tell you that there are two kinds\nof branches their local branches and remote\ntracking branches. Your remote branches are\nthe branches that is going to connect your\nbranches from your local repository to your\ncentral repository and local branches are\nsomething that you only create in your workspace.\nThat is only going to work with your with\nthe files in your local repository. So I'll\nshow you how to create branches and then everything\nwill Clear to you. So let us go back to our\ngit Bash. Clear the screen. And right now\nwe are in the master branch and this indicates\nwhich brands you were onto right now. So we're\nin the master Branch right now and we're going\nto create a different branch. So for that\nyou just have to type the command git branch\nand write a branch name. So let us just call\nit first branch. and enter so now you have\ncreated a branch and and this first Branch\nwill now contain all the files that were in\nthe master because it originated from the\nmaster Branch. So now the shows that you are\nstill in the master branch and if you want\nto switch to the new branch that you just\ncreated you have to use this command git checkout,\nbut it's called checking out it going to move\nfrom one branch to another it's called checking\nout and get so we're going to use git checkout\nand the name of the branch. Switch to first\nbrush and now you can see that we are in the\nfirst branch and now we can start doing all\nthe work in our first Branch. So let us create\nsome more files in the first Branch. So let's\ngo back and this will actually show me my\nworkspace off my first Branch right now. So\nwe'll just create another text document and\nwe're going to name it edu for and you can\njust write something first. garage to save\nit just will go back and now we've made some\nchanges. So let us just commit this changes\nall at once. So let me just use git add. After\nthat, what do you have to do if you remember\nis that you have to perform a git commit?\nAnd I guess one pile changed. So now remember\nthat I have only made this edu for change\nin my first branch and this is not in my master\nBranch it because now we are in the first\nBranch if it lists out all the files in the\nfirst Branch, you can see that you've got\nthe Eddie one. I did 283 and the readme which\nwas in the master Branch because it will be\nthere because it originated from the master\nbranch and apart from that. It has a new file\ncalled edu for DOT txt. And now if you just\nmove back into the master Branch, let's say\nWe're going back into the Master Garage. And\nif you just see the five Master Branch, you'll\nfind that there is no edu for because I've\nonly made the changes in my first Branch.\nSo what we have done now is that we have created\nbranches and we have also understood the purpose\nof creating branches because you're moving\non to the next topic. The next thing we'll\nsee is merging so now if you're creating branches\nand you are developing a new feature and you\nwant to add that new feature, so you have\nto do an operation called emerging emerging\nmeans combining the work of different branches\nall together and it's very important that\nafter you have branched off from a master\nBranch always combine it back in at the end\nafter you're done working with the branch\nalways remember to merge it back in so now\nwe have created branches. Let us see and we\nhave made changes in our Branch like we have\nadded edu for and if you want to combine that\nback in our Master Branch because like I told\nyou your master Branch will always contain\nyour production quality. Code so let us know\nactually merge start merging those files because\nI've already created branches. It's time that\nwe merge them. So we are back in my terminal.\nAnd what do we need to do is merge those changes\nand if you remember that we've got a different\nfile in my first branch, which is the ending\nfor and it's not there in the master Branch\nyet. So what I want to do is merge that Branch\ninto my master Branch so for that I'll use\na command called git merge and the name of\nmy branch and there is a very important thing\nto remember when you're merging is that you\nwant to merge the work of your first Branch\ninto master. So you want Master to be the\ndestination. So whenever you're merging you\nhave to remember that you were always checked\nout in the destination Branch some already\nchecked out in the master Branch, so I don't\nhave to change it back. So I'll just use the\ncommand git merge and the name of the branch\nwhich word you want to merge it into and you\nhave to provide the name of the branch whose\nwork you want merged into the current branch\nthat you were checked out. So for now, I've\njust got one branch, which is called the first\nbranch. and and so you can see that one file\nchain. Something has been added. We are in\nthe master bounce right now. So now let us\nlist out all the files in the master branch\nand there you see now you have edu for DOT\ntxt, which was not there before. I'm merged\nit. So this is what merging does now you have\nto remember that your first branch is still\nseparate. Now, if you want to go back into\nyour first branch and modify some changes\nagain in the first branch and keep it there\nyou can do that. It will not actually affect\nthe master Branch until you merge it. So let\nme just show you an example. So just go back\nto my first branch. So now let us make changes\nand add you for. I'll just ride modified in\nfirst branch. We'll go back and we'll just\ncommit all these changes and I'll just use\ngit. So now remember that the git commit all\nis also performed for another purpose now.\nIt doesn't only actually commit all the uncommitted\nfile at once if your files are in the index\nand you have just modified it also does the\njob of adding it to the index Again by modifying\nit and then committing it but it won't work.\nIf you have never added that file in the index\nnow Eddie for was already in the index now\nafter modifying it I have not explicitly added\nin the index. And if I'm using git commit\nall it will explicitly add it in the index\nbit will because it was already a track file\nand then it will commit the changes also in\nmy local Repository. So you see I didn't use\nthe command git add. I just did it with Git\ncommit because it was already attract file.\nSo one file has been changed. So now if you\njust just cat it and you can see that it's\ndifferent. It shows the modification that\nwe have done, which is modified it first Branch\nnow, let's just go back to my master branch.\nNow remember that I have not emerged it yet\nand my master Branch also contains a copy\nof edu for and let's see what this copy actually\ncontains. See you see that the modification\nhas not affected in the master Branch because\nI have only done the modification in the first\nBranch. So the copy that is in the master\nbranch has not it's not the modified copy\nbecause I have not emerged it yet. So it's\nvery important to remember that if you actually\nwant all the changes that you have made in\nthe first Branch all the things that you have\ndeveloped in the Anu branch that you have\ncreated make sure that you merge it in don't\nforget to merge or else it will not show any\nkind of modifications. So I hope that if understood\nwhy emerging is important how to actually\nmerge different branches together. So we'll\njust move on to the next topic and which is\nrebasing now when you say rebasing rebasing\nis also another kind of merging. So the first\nthing that you need to understand about vbase\nis that it actually solves the same problem\nas of git merge and both of these commands\nare designed to integrate changes from one\nbranch into another. It's just that they just\ndo the same task in a different way. Now what\nrebasing means if you see the workflow diagram\nhere is that you've got your master branch\nand you've got a new Branch now when you're\nrebasing it what it does if you see in this\nworkflow diagram here is that if God a new\nbranch and your master branch and when your\nrebasing it instead of creating a Comet which\nwill have two parent commits. What rebasing\ndoes is that it actually places the entire\ncommit history of your branch onto the tip\nof the master. Now you would ask me. Why should\nwe do that? Like what is the use of that?\nWell, the major benefit of using a re basis\nthat you get a much cleaner project history.\nSo I hope you've understood the concept of\nrebase. So let me just show you how to actually\ndo rebasing. Okay. So what we're going to\ndo is that we're going to do some more work\nin our branch and after that will be base\nour branch on to muster. So we'll just go\nback to our branch. You skip check out. first\nbranch and now we're going to create some\nmore files here. same it at your five and\nlet's say I do six. So we're going to write\nsome random stuff. I'd say we're saying welcome\nto Ed, Eureka. one all right the same thing\nagain that Sarah come two so we have created\nthis and now we're going back to our get bash\nand we're going to add all these new files\nbecause now we need to add because it we cannot\ndo it with just get commit all because these\nare untracked files. This is the files that\nI've just created right now. So I'm using\nAnd now we're going to commit. And it has\nbeen committed. So now if you just see all\nthe files, you can see any one two, three,\nfour five six and read me and if you go back\nto the master. And if you just list out all\nthe files and master it only has up to four\nthe five and six are still in my first brush\nand I have not emerged it yet. And I'm not\ngoing to use git merge right now. I'm going\nto use rebase this time instead of using git\nmerge and this you'll see that this will actually\ndo the same thing. So for that you just have\nto use the command. So let us go back to our\nfirst branch. Okay did a typing error? Irst\nBR a MCH. Okay switch the first branch and\nnow we're going to use the command git rebase\nmaster. Now it is showing that my current\nBranch first branch is up to date just because\nbecause whatever is in the master branch is\nalready there in my first branch and they\nwere no new files to be added. So that is\nthe thing. So, but if you want to do it in\nthe reverse way, I'll show you what will happen.\nSo let's just go and check out let's do rebasing\nkit rebase first branch. So now what happened\nis that all the work of first branch has been\nattached to the master branch and it has been\ndone linearly. There was no new set of comments.\nSo now if you see all the files are the master\nBranch, you'll find that you've got a new\nfive and Ed U6 as well, which was in the first\nBranch. So basically rebasing has merged all\nthe work of my first Branch into the master,\nbut the only thing that happened is that it\nhappened in a linear way all the commits that\nwe did in first Branch actually got rid dashed\nto the head in the master. So this was all\nabout nonlinear development. I have told you\nabout branching merging rebasing we've made\nchanges with pull changes committed changes,\nbut I remember that I haven't shown you how\nto push changes. So since we're done working\nin our local repository now, we have made\nare all final changes and now we want it to\ncontribute in our Central Repository. Tree.\nSo for that we're going to use git push and\nI'm going to show you how to do a get Bush\nright now. Before I go ahead to explain you\na get Bush. You have to know that when you\nare actually setting up your repository. If\nyou remember your GitHub repository as a public\nrepository, it means that you're giving a\nread access to everyone else in the GitHub\ncommunity. So everyone else can clone or download\nyour repository files. So when you're pushing\nchanges in a repository, you have to know\nthat you need to have certain access rights\nbecause it is the central repository. This\nis where you're storing your actual code.\nSo you don't want other people to interfere\nin it by pushing wrong codes or something.\nSo we're going to connect a mice and repository\nvia ssh in order to push changes into my central\nrepository now at the beginning when I was\ntrying to make this connection with SSS rows\nfacing some certain kind of problems. Let\nme go back to the repository of me show you\nwhen you click this button. You see that this\nis your HTTP URL in order that we use in order\nto connect with yours and repository now if\nyou want to use SSH, so this is your SSH connection\nURL. So so in order to connect with ssh, what\ndo you need to do is that you have to generate\na public SSH key and then just add that key\nsimply into your GitHub account. And after\nthat you can start pushing changes. So first\nwe'll do that will generate SSH public key.\nSo for that, we'll use this command SSH - heejun.\nSo under file, there is already an SSH key,\nso they want to override it. Yes. So my SSH\nkey has been generated and it has been saved\nin here. So if I want to see it and just use\ncat and copy it. So this is my public SSH\nkey if I want to add this SSH key, I'll go\nback into my GitHub account. And here I will\ngo back and settings and we'll go and click\non this option SSH and gpg keys and I've already\nhad two SSH Keys added and I want to add my\nnew one. So I'm going to click this button\nnew SSH key and just make sure that you provide\na name to it. I'm just going to keep it in\norder because I've named the other ones sssh\nwon an SSS to just say I'm going to say it's\nsh3. So just paste your search key in here.\nJust copy this key. Paste it and click on\nthis button, which is ADD SSH key. Okay, so\nnow well the first thing you need to do is\nclear the screen. And now what you need to\ndo is you need to use this command as the\nsearch - d And your SSI at URL that we use\nwhich is get at the rate github.com. And enter\nso my SSH authentication has been successfully\ndone. So I'll go back to my GitHub account.\nAnd if I refresh this you can see that the\nkey is green. It means that it has been properly\nauthenticated and now I'm ready to push changes\non to the central repository. So we'll just\nstart doing it. So let me just tell you one\nmore thing that if you are developing something\nin your local repository and you have done\nit in a particular branch in your repository\nand let's say that you don't want to push\nthis changes into the master branch of your\ncentral report or your GitHub repository.\nSo let's say that whatever work that you have\ndone. It will stay in a separate branch in\nyour GitHub repository so that it does not\ninterfere with the master branch and everyone\ncan identify that it is actually your branch\nand you have created it and this Branch only\ncontains your work. So for that let me just\ngo to the GitHub repository and show you something.\nLet's go to the repositories. And this is\nthe repository that I have just created today.\nSo when you go in the repository, you can\nsee that I have only got one branch here,\nwhich is the master branch. And if I want\nto create branches I can create it here, but\nI would advise you to create all branches\nfrom your command line or from you get bash\nonly in your central repository as well. So\nlet us go back in our branch. So now what\nI want is that I want all the work of the\nfirst branch in my local repository to make\na new branch in the central repository and\nthat branch in my central repository will\ncontain all the files that is in the first\nbranch of my local repository through so for\nthat I'll just perform. get Push the name\nof my remote which is origin and first branch.\nAnd you can see that it has pushed all the\nchanges. So let us verify. Let us go back\nto our repository and let's refresh it. So\nthis is the master branch and you can see\nthat it has created another branch, which\nis called the first Branch because I have\npushed all the files from my first Branch\ninto an and I have created a new Branch or\nfirst Branch as similar to my first branch\nin my local repository here in GitHub. So\nnow if we go to Branch you can see that there\nis not only a single Master we have also got\nanother branch, which is called the first\nBranch now if you want to check out this brand\njust click on it. And you can see it has all\nthe files with all the combat logs here in\nthis Branch. So this is how you push changes\nand if you want to push all the change in\nto master you can do the same thing. Let us\ngo back to our Branch master. And we're going\nto perform a git push here. But only what\nwe're going to do this time is we're going\nto push all the files into the master branch\nand my central repository. So for that I'll\njust use this get bush. Okay, so the push\noperation is done. And if you go back here\nand if you go back to master, you can see\nthat all the files that were in the master\nbranch in. My local repo has been added into\nthe master branch of my central Ripple also.\nSo this is how you make changes and from your\ncentral repository to look repository. So\nthis is exactly what you do with get so if\nI have to summarize what I just showed you\nentirely in this when I'm when I was telling\nabout get ad and committing and pushing and\npulling so this is exactly what is happening.\nSo this is your local repository. This is\nyour working directory. So the staging area\nis our index the intermediate layer between\nyour workspace and your local repository.\nSo you have to add your files into the staging\narea or the index with Git add and a commit\nthose changes with Git commit and your local\nrepository and if you want to push all this\nListen to the remote repository or the central\nrepository where everyone can see it you use\na get Bush and similarly. If you want to pull\nall those files of fetch all those files from\nyour GitHub repository, you can use git pull\nand you want to use branches. If you want\nto move from one branch to another you can\nuse git checkout. And if you want to combine\nthe work of different branches together, you\ncan use git merge. So this is entirely what\nyou do when you're performing all these kind\nof operations. So I hope it is clear to everyone\nso I'll just show you how can you check out\nwhat has been changed and modifications so\nSo just clear the screen and okay. So let\nus go back to our terminal and just for experimentation\nproper just to show you that how we can actually\nget revert back to our previous changes. So\nnow you might not want to change everything\nthat you made an Eddie wanted to do a duet\nfor or some other files that we just created.\nSo let's just go and create a new file modify\nit two times and revert back to the previous\nversion just for demonstration purpose. So\nI'm just going to create a new text file.\nLet's call it revert. And now let us just\ntype something. Hello. Let's just keep it\nthat simple. Just save it and go back. We'll\nadd this file. then commit this let's say\njust call it revert once just remember that\nthis is the first comment that I made with\nrevert one enter. So it has been changed.\nSo now let's go back and modify this. So after\nI've committed this file, it means that it\nhas stored a version with the text Hello exclamation\nin my revert text file. So I'm just going\nto go back and change something in here. So\nI'm just let us just add there. Hello there.\nSave it. Let's go back to our bash. Now. Let\nus commit this file again because I've made\nsome changes and I want a different version\nof the revert file. So we'll just go ahead\nand commit again. So I'll use git commit all.\nSaints River do and enter and it's done. So\nnow if I want to revert back to okay, so now\nyou just see the file. You can see I've modified\nit. So now it has got hello there. Let's say\nthat I want to go back to my previous version.\nI would just want to go back to when I had\njust hello. So for that, I'll just check my\ngit log. I can check the hair that this is\nthe commit log or the commit hash. When I\nfirst committed revert it means that this\nis the version one of my revert. Now, what\nyou need to do is that you need to copy this\ncommit hash. Now, you can just copy the first\neight hexadecimal digits and that will be\nit. So just copy it whole I just clear the\nscreen first. So you just need to go use this\ncommand get check out and hexadecimal code\nor the hexadecimal digits that you just copied\nand the name of your file, which is revert\nDot txt. So you just have to use this command\nkit. Check out and the commit hash that you\njust copied the first 8 digits and you have\nto name the file, which is revert Dot txt.\nSo now when you just see this file, you have\ngone back to the previous commit. And now\nwhen you just display this file, you can see\nthat now I've only got just hello. It means\nthat I have rolled back to the previous version\nbecause I have used the commit hash when I\ninitially committed with the first change.\nSo this is how you revert back to a previous\nversion. So this is what we have learned today\nin today's tutorial. We have understood. What\nis Version Control and why do we need version\ncontrols? And we've also learned about the\ndifferent version control tools. And in that\nwe have primarily focused on get and we have\nlearned all about git and GitHub about how\nto create repositories and perform some kind\nof operations and commands in order to push\npull and move files from one repository to\nanother we've also studied about the features\nof git and we've also seen a case study about\nhow Dominion Enterprises which is one of the\nbiggest public In company who makes very popular\nwebsites that we have got right now. We have\nseen how they have used GitHub as well. Hello\neveryone. This is order from 80 Rekha in today's\nsession will focus on what is Jenkins. So\nwithout any further Ado let us move forward\nand have a look at the agenda for today first.\nWe'll see why we need continuous integration.\nWhat are the problems that industries were\nfacing before continuous integration was introduced\nafter that will understand what exactly is\ncontinuous integration and will see various\ntypes of continuous integration tools among\nthose countries integration tools will focus\non Jenkins and we'll also look at Jenkins\ndistributed architecture finally in our hands\non part will prepare a build pipeline using\nJenkins and I'll also tell you how to add\nJenkins slaves now, I'll move forward and\nwe'll see why we need continuous integration.\nSo this is the process before continuous integration\nover here, as you can see that there's a group\nof developers who are making changes to the\nsource code that is present in the source\ncode repository. This repository can be a\ngit repository subversion repository Etc.\nAnd then the entire source code of the application\nis written it will be built by tools like\nand Maven Etc. And after that that built application\nwill be deployed onto the test server for\ntesting if there's any bug in the code developers\nare notified with the help of the feedback\nloop as you can see it on the screen and if\nthere are no bugs then the application is\ndeployed onto the production server release.\nI know you must be thinking that what is the\nproblem with this process is process looks\nfine. As you first write the code then you\nbuild it. Then you test it and finally you\ndeploy but let us look at the flaws that were\nthere in this process one by one. So this\nis the first problem guys as you can see that\nthere is a developer who's waiting for a long\ntime in order to get the test results as first\nthe entire source code of the application\nwill be built and then only it will be deployed\nonto the test server for testing. It takes\na lot of time so developers have to For a\nlong time in order to get the test results.\nThe second problem is since the entire source\ncode of the application is first build and\nthen it is tested. So if there's any bug in\nthe code developers have to go through the\nentire source code of the application as you\ncan see that there is a frustrated developer\nbecause he has written a code for an application\nwhich was built successfully but in testing\nthere were certain bugs in that so he has\nto check the entire source code of the application\nin order to remove that bug which takes a\nlot of time so basically locating and fixing\nof bugs was very time-consuming. So I hope\nyou are clear with the two problems that we\nhave just discussed now, we'll move forward\nand we'll see two more problems that were\nthere before continuous integration. So the\nthird problem was software delivery process\nwas slow developers were actually wasting\na lot of time in locating and fixing of birds\ninstead of building new applications as we\njust saw that locating and fixing of bugs\nwas a very time-consuming task due to which\ndevelopers are not able to focus on building\nnew applications. You can relate that to the\ndiagram which is present in front of your\nscreen as Always a lot of time in watching\nTV doing social media similarly developers\nwere also basic a lot of time in fixing bugs.\nAll right. So let us have a look at the fourth\nproblem that is continuous feedback continues\nfeedback related to things like build failures\ntest status Etc was not present due to which\nthe developers were unaware of how their application\nis doing the process that you showed before\ncontinuous integration. There was a feedback\nloop present. So what I will do I will go\nback to that particular diagram and I'll try\nto explain you from there. So the feedback\nloop is here when the entire source code of\nthe application is built and tested then only\nthe developers are notified about the bugs\nin the code. All right, when we talk about\nCantonese feedback suppose this developer\nthat I'm highlighting makes any commit to\nthe source code that is present in the source\ncode repository. And at that time the code\nshould be pulled and it should be built and\nthe moment it is built the developer should\nbe notified about the build status and then\nonce it is built successfully it is then deployed\nonto the test server for testing at that time.\nWhatever the test data says the developer\nshould be notified about it. Similarly, if\nthis developer makes any commit to the source\ncode at that time. The coach should be pulled.\nIt should be built and the build status should\nbe notified the developers after that. It\nshould be deployed onto the test server for\ntesting and the test results should also be\ngiven to the developers. So I hope you all\nare clear. What is the difference between\ncontinents feedback and feedback? So incontinence\nfeedback you're getting the feedback on the\nrun. So we'll move forward and we'll see how\nexactly continuous integration addresses these\nproblems. Let us see how exactly continuous\nintegration is resolving the issues that we\nhave discussed. So what happens here, there\nare multiple developers. So if any one of\nthem makes any commit to the source code that\nis present in the source code repository,\nthe code will be pulled it will be built tested\nand deployed. So what advantage we get here.\nSo first of all, any comment that is made\nto the source code is built and tested due\nto which if there is any bug in the code developers\nactually know where the bug is present or\nbitch come it has caused that error so they\ndon't need to go through the entire source\ncode of the application. They just need to\ncheck that particular. Because introduce the\nbutton. All right. So in that way locating\nand fixing of bugs becomes very easy apart\nfrom that the first problem that we saw the\ndevelopers have to wait for a long time in\norder to get the test result here every commit\nmade to the source code is tested. So they\ndon't need to wait for a long time in order\nto get the test results. So when we talk about\nthe third problem that was software delivery\nprocess was slow is completely removed with\nthis process developers are not actually focusing\non locating and fixing of bugs because that\nwon't take a lot of time as we just discussed\ninstead of that. They're focusing on building\nnew applications. Now a fourth problem was\nthat there is feedback was not present. But\nover here as you can see on the Run developers\nare getting the feedback about the build status\ntest results Etc developers are continuously\nnotified about how their application is doing.\nSo I will move forward now, I'll compare the\ntwo scenarios that is before continuous integration\nand after continuous integration now over\nhere what you can see is before continuous\nintegration as we just saw first the source\ncode of the application will be built the\nentire source code then only it will be tested.\nBut when we talk about after continuous integration\nevery commit whatever change you made in the\nsource code whatever change the my new changes.\nWell you committed to the source code that\ntime only the code will be pulled. It will\nbe built and then lll be tested developers\nhave to wait for a long time in order to get\nthe test results as we just saw because the\n- source code will be first build and then\nit will be deployed onto the test server.\nBut when we talk about continuous integration\nthe test result of every come it will be given\nto the developers and when we talk about feedback,\nthere was no feedback that was present earlier,\nbut in continuous integration feedback is\npresent for every committee met to the source\ncode. You will be provided with the relevant\nresult. All right, so now let us move forward\nand we'll see what exactly is continuous integration\nnow in continuous integration process developers\nare required to make frequent commits to the\nsource code. They have to frequently make\nchanges in the source code and because of\nthat any change made in the source code, it\nwill report by The Continuous integration\nserver, and then that code will be built or\nyou can say it will be compiled. All right\nnow. Pentagon The Continuous integration tool\nthat you are using or depending on the needs\nof your organization. It will also be deployed\nonto the test server for testing and once\ntesting is done. It will also be deployed\nonto the production server for release and\ndevelopers are continuously getting the feedback\nabout their application on the run. So I hope\nI'm clear with this particular process. So\nwe'll see the importance of continuous integration\nwith the help of a case study of Nokia. So\nNokia adopted a process called nightly build\nnightly build can be considered as a predecessor\nto continuous integration. Let me tell you\nwhy. All right. So over here as you can see\nthat there are there are developers who are\ncommitting changes to the source code that\nis present in a shared repository. All right,\nand then what happens in the night? There\nis a build server. This build server will\npull the shared repository for changes and\nthen it'll pull that code and prepare a bill.\nAll right. So in that way whatever commits\nare made throughout the day are compiled in\nthe night. So obviously this process is better\nthan writing the entire source code of the\napplication and then Bai Ling it but again\nsince if there is any bug in the code developers\nhave to check all the comments that have been\nmade throughout the day so it is not the ideal\nway of doing things because you are again\nwasting a lot of time in locating and fixing\nof bucks. All right, so I want answers from\nyou all guys. What can be the solution to\nthis problem. How can Nokia address is particular\nproblem since we have seen what exactly continuous\nintegration is and why we need now without\nwasting any time. I'll move forward and I'll\nshow you how Nokia solved this problem. So\nNokia adopted continuous integration as a\nsolution in which what happens developers\ncommit changes to the source code in a shared\nrepository. All right, and then what happens\nis a continuous integration server this continuous\nintegration server pose the repository for\nchanges if it finds that there is any change\nmade in the source code and it will pull the\ncode and compile it. So what is happening\nthe moment you commit a change in the source\ncode continuous integration server will pull\nthat and prepare a build. So if there is any\nbug in the code developers know which government\nis causing that error. All right, so they\ncan do Go through that particular commit in\norder to fix the bug. So in this way locating\nand fixing of box was very easy, but we saw\nthat in nightly builds if there is any bug\nthey have to check all the comments that have\nbeen made throughout the day. So with the\nhelp of continuous integration, they know\nwhich commits is causing that error. So locating\nin fixing of bugs didn't take a lot of time.\nOkay before I move forward, let me give you\na quick recap of what we have discussed till\nnow first. We saw why we need continuous integration.\nWhat were the problems that industries were\nfacing before continuous integration was introduced\nafter that. We saw how continuous integration\naddresses those problems and we understood\nwhat exactly continuous integration is. And\nthen in order to understand the importance\nof continuous integration, we saw case study\nof Nokia in which they shifted from nightly\nbuild to continuous integration. So we'll\nmove forward and we'll see various continuous\nintegration tools available in the market.\nThese are the four most widely used continuous\nintegration tools. First is Jenkins on which\nwe will focus in today's session then buildbot\nTravis and bamboo. Right and let us move forward\nand see what exactly jenkins's so Jenkins\nis a continuous integration tool. It is an\nopen source tool and it is written in Java\nhow it achieves continuous integration. It\ndoes that with the help of plugins. Jenkins\nhave well over a thousand plugins. And that\nis the major reason why we are focusing on\nJenkins. Let me tell you guys it is the most\nwidely accepted tool for continuous integration\nbecause of its flexibility and the amount\nof plugins that it supports. So as you can\nsee from the diagram itself that it is supporting\nvarious development deployment testing Technologies,\nfor example gate Maven selenium puppet ansible\nlawgivers. All right. So if you want to integrate\na particular tool you need to make sure that\nplug-in for that tool is installed in your\nJenkins the for better understanding of Jenkins.\nLet me show you the Jenkins dashboard. I've\ninstalled Jenkins in my Ubuntu box. So if\nyou want to learn how to install Jenkins,\nyou can refer the Jenkins installation video.\nSo this is a Jenkins dashboard guys, as you\ncan see that there are currently no jobs because\nof that this section is empty otherwise We'll\ngive you the status of all your build jobs\nover here. Now when you click on new item,\nyou can actually start a new project all over\nfrom scratch. All right. Now, let us go back\nto our slides. Let us move forward and see\nwhat are the various categories of plugins\nas I told you earlier is when the Jenkins\nachieves continuous integration with the help\nof plugins. All right, and Jenkins opposed\nwell over a thousand plugins and that is the\nmajor reason why Jenkins is so popular nowadays.\nSo the plug-in categorization is there on\nyour screen but there are certain plugins\nfor testing like j-unit selenium Etc when\nwe talk about reports, we have multiple plugins,\nfor example HTML publisher for notification.\nAlso, we have many plugins and I've written\none of them that is Jenkins build notification\nplug-in and we talked about deployment we\nhave plugins like deploy plug-in when we talk\nabout compiled we have plugins like Maven\nand Etc. Alright, so let us move forward and\nsee how to actually install a plug-in on the\nsame about to box where my Jenkins is installed.\nSo over here in order to install Jenkins,\nwhat you need to do is you need to click on\nmanage. Ken's option and overhead, as you\ncan see that there's an option called manage\nplugins. Just click over there. As you can\nsee that it has certain updates for the existing\nplugins, which I have already installed. Right\nthen there's an option called installed where\nyou'll get the list of plugins that are there\nin your system. All right, and at the same\ntime, there's an option called available.\nIt will give you all the plugins that are\navailable with Jenkins. Alright, so now what\nI will do I will go ahead and install a plug-in\nthat is called HTML publisher. So it's very\neasy. What you need to do is just type the\nname of the plug-in. Headed HTML publisher\nplugin, just click over there and install\nwithout restart. So it is now installing that\nplug-in we need to wait for some time. So\nit has now successfully installed now, let\nus go back to our Jenkins dashboard. So we\nhave understood what exactly Jenkins is and\nwe have seen various 10 kids plugins as well.\nSo now is the time to understand Jenkins with\nan example will see a general workflow how\nJenkins can be used. All right. So let us\ngo back to our slides. So now as I have told\nyou earlier as well, we'll see Jenkins example,\nso let us move forward. So what are what is\nhappening developers are committing changes\nto the source code and that source code is\npresent in a shared repository. It can be\na git repository subversion repository or\nany other repository. All right. Now, let\nus move forward and see what happens now now\nwe're here what is happening. There's a Jenkins\nserver. It is actually polling the source\ncode repository at regular intervals to see\nif any developer has made any commit to the\nsource code. If there is a change in the source\ncode it will pull the code and we'll prepare\na build and at the same time developers will\nbe notified about the build results now, let\nus execute this practically. All right, so\nI will again go back to my Jenkins dashboard,\nwhich is there in my Ubuntu bar. What had\nwhat I'm going to do is I'm going to create\na new item read basically a new project now\nover here. I'll give a suitable named my project\nyou can use any name that you want. I'll just\nwrite compile. And now I click on freestyle\nproject. The reason for doing that is free-style\nproject is the most configurable and the flexible\noption. It is easier to set up as well. And\nat the same time many of the options that\nwe configure here are present in other build\njobs as well move forward with freestyle project\nand I'll click on ok now over here what I'll\ndo, I'll go to the source code management\nTab and it will ask you for what type of source\ncode management you want. I'll click on get\nand over here. You need to type your repository\nURL in my case. It is http. github.com your\nusername slash the name of your Repository.\nAnd finally dot get all right now in the bill\nauction, you have multiple options. All right.\nSo what I will do I click on invoke top-level\nMaven targets. So now over here, let me tell\nyou guys it may even has a built life cycle\nand that build life cycle is made up of multiple\nbuild phases. Typically the sequence for build\nphase will be festive validate the code then\nyou compile it. Then you test it. Then you\nperform unit test by using suitable unit testing\nframework. Then you package your code in a\ndistributable format like a jars, then you\nverify it and you can actually install any\npackage that you want with the help of install\nbuild phase and then you can deploy it in\nthe production environment for release. So\nI hope you have understood the maven build\nlife cycle. So in the goals tab, so what I\nneed to do is I need to compile the code that\nis present in the GitHub account. So for that\nin the gold stabbed I need to write compile.\nSo this will trigger the compile build phase\nof Maven now, that's it guys. That's it. Just\nclick on apply. And save now on the left hand\nside. There's an option called bill now to\ntrigger the built just click over there and\nyou will be able to see the the Builder starting\nin order to see the console output. You can\nclick on that build and you see the console\noutput. So it has validated the GitHub account\nand it is now starting to compile that code\nwhich is there in the GitHub account. So we\nare successfully compiled the code that was\npresent in the GitHub account. Now, let us\ngo back to the Jenkins dashboard. Now in this\nJenkins dashboard, you can see that my project\nis displayed over here. And as you can see\nthe blue color of the ball indicates that\nas that it has been successfully executed.\nAll right. Now, let us go back to the slides\nnow, let us move forward and see what happens.\nOnce you have compile your code. Now the code\nthat you have compiled you need to test it.\nAll right. So what Jenkins will do it will\ndeploy the code onto the test server for testing\nand at the same time developers will be notified\nabout the test results as well. So let us\nagain execute this practically, I'll go back\nto my Ubuntu box again. So in the GitHub repository,\nthe test cases are already defined. Alright,\nso we are going to analyze those test cases\nwith the help of Maven. So let me tell you\nhow to do it will again go and click on new\nitem on over here will give any suitable name\nto a project. I'll just type test. I'll again\nuse freestyle project for the reason that\nI've told you earlier click on OK and in the\nsource code management tab. Now before applying\nunit testing on the code that I've compiled.\nI need to First review it with the help of\nPMD plug-in. I'll do that. So for that I will\nagain click on new item and a over here. I\nneed to type the name of the project. So I'll\njust type it as code underscore review. Freestyle\nproject click. Ok. Now the source code management\ntab. I will again choose gate and give my\nrepository URL https. github.com username\n/ name of the Repository . Kit All right now\nscroll doubt now in the build tab. I'm going\nto click over there. And again, I will click\non invoke top-level Maven targets now in order\nto review the code. I am going to use the\nMatrix profile of Maven. So how to do that.\nLet me tell you you need to type here - p\nMatrix PMD: PMD, all right, and this will\nactually produce a PMD report that contains\nall the warnings and errors now in the post\nBill action tab, I click on publish PMD analysis\nresult. That's all click on apply and Save\nthe finally click on Bill now. And let us\nsee the console output. So it has now pulled\nthe code from the GitHub account and Performing\nthe code review. So they successfully review\nthe code now. Let us go back to the project\nover here. You can see an option called PMD\nwarnings just click over there and it will\ndisplay all the warnings that are there present\nin your code. So this is the PMD Alice's report\nover here. As you can see that there are total\n11 warnings and you can find the details here\nas well like package you have then you have\nthen you have categories then the types of\nwarnings which are there like for example,\nempty cache blocks empty finally block. Now,\nyou have one more tab called warnings over\nthere. You can find where the warning is present\nthe filename package. All right, then you\ncan find all the details in the details tab.\nIt will actually tell you where the warning\nis present in your code. All right. Now, let\nus go back to the Jenkins dashboard and now\nwe'll perform unit tests on the code that\nwe have compiled for that again. I'll click\non new item and I'll give a name to this project.\nI will just type test. And I click on freestyle\nproject. Okay. Now in the source code management\ntab, I'll click on get now over here. I'll\ntype the repository URL http. github.com / username\n/ name of the Repository . Kit and in the\nbuild option I click on again invoke top-level\nMaven targets now over here as I've told you\nearlier as well that Maven build life cycle\nhas multiple build phases like first it would\nvalidate the code compile then tested package\nthat will verify then it will install if certain\npackages are required. And then finally it\nwill deploy it. Alright. So one of the phase\nis actually testing that performs unit testing\nusing the suitable unit testing framework.\nThe test cases are already defined in my GitHub\naccount. So to analyze the test case in the\nGold section, I need to write tests. All right,\nand it will invoke the test phase of the maven\nbuild life cycle. All right, so just click\non apply and Save finally click on Builder\nTo see the console output click here now in\nthe source code management tab. I'll select\nget all right over here again. I need to type\nmy repository URL. That is HTTP github.com\n/ username. / repository name dot get and\nnow in the build tab. I'll select invoke top-level\nMaven targets and over here as I have told\nyou earlier as well that the maven build life\ncycle has multiple phases. All right, and\none of that phase is unit tests, so in order\nto invoke that unit test what I need to do\nis in the goals tab, I need to write tests\nand it will invoke the test build phase of\nthe maven build life cycle. All right. So\nthe moment I write tests here and I'll build\nit. It will actually analyze the test cases\nthat are present in the GitHub account. So\nlet us write test and apply and Save Finally\nclick on Bill now. And in order to see the\nconsole output click here. So does pull the\ncode from the GitHub account and now it's\nperforming unit test. So we have successfully\nperform testing on that code now, I will go\nback to my Jenkins dashboard or as you can\nsee that all the three build jobs that have\nexecuted a successful which is indicated with\nthe help of view colored ball. All right.\nNow, let us go back to our slides. So we have\nsuccessfully performed in unit tests on the\ntest cases that were there on the GitHub account\nnow, we'll move forward and see what happens\nafter that. Now finally, you can deploy that\nbuild application or to the production environment\nfor release, but when you have one single\nJenkins over there are multiple disadvantages.\nSo let us discuss that one by one so we'll\nmove forward and we'll see what are the disadvantages\nof using one single Jenkins over now. What\nI'll do I'll go back to my Jenkins dashboard\nand I'll show you how to create a build pipeline.\nAll right. So for that I'll move to my Ubuntu\nbox. Once again now over here you can see\nthat there is an option of plus. Ok, just\nclick over there now over here click on build\npipeline view, whatever name you want. You\ncan give I'll just give it as a do Rekha.\npipeline And click on ok. Now over here what\nyou can do you can give some certain description\nabout your bill pipeline. All right, and there\nare multiple options that you can just have\na look and over here. There's an option called\nselect initial job. So I want compiled to\nbe my first job and there are display options\nover here number of display builds that you\nwant. I'll just keep it as 5 now the row headers\nthat you want column headers, so you can just\nhave a look at all these options and you can\nplay around with them just for the introductory\nexample, let us keep it this way now finally\nclick on apply and ok. Currently you can see\nthat there is only one job that is compiled.\nSo what I'll do, I'll add more jobs this pipeline\nfor that. I'll go back to my Jenkins dashboard\nand over here. I'll add code review as well.\nSo for that I will go to configure. And in\nthis bill triggers tab, what I'll do I click\non build after other projects are built. So\nwhatever project that you want to execute\nbefore code review just type that so I want\ncompile. Yeah, click on compile and over here.\nYou can see that there are multiple options\nlike trigger only if build stable trigger,\neven if the build is unstable trigger, even\nif the build page so I'll just click on a\ntrigger even if the bill fails. All right,\nfinally click on apply and safe. Similarly\nif I want to add my test job as well to the\npipeline. I can click on configure and again\nthe bill triggers tab. I'll click on build\nafter other projects are built. So overhead\ntype the project that you want to execute\nbefore this particular project in our case.\nIt is code review. So let us click over there\ntrigger, even if the build fails apply and\nSave Now let us go back to the dashboard and\nsee how our pipeline looks like. So this is\nour pipeline. Okay, so when we click on run\nLet us see what happens first. It will compile\nthe code from the GitHub account. That is\nit will pull the code and it will compile\nit. So now this compile is done. All right,\nnow it will review the code. So the code review\nhas started in order to see the log. You can\nclick on Console. It will give you the console\noutput. Now once code review is done. It will\nstart testing. It will perform unit tests\nor it's a code has been successfully reviewed\nwith the as you can see the color has become\ngreen. Now, the testing has started it will\nperform unit tests on the test case is that\nthere in the GitHub account? So we have successfully\nexecuted three build jobs that is compile\nthe code then review it and then perform testing.\nAll right, and this is the build pipeline\nguys. So let us go back to the Jenkins dashboard.\nAnd we'll go back to our slides now. So now\nwe have successfully performed unit tests\non the test cases that are present in the\nGitHub account. All right. Now, let us move\nforward and see what else you can do with\nJenkins. Now the application that we have\ntested that can also be deployed onto the\nproduction server for release as well. Alright,\nso now let us move forward and see what are\nthe disadvantages of this one single Jenkins\nover. So there are two major disadvantages\nof using one single Jenkins over first is\nyou might require different environments for\nyour builds and test jobs. All right. So at\nthat time one single Jenkins over cannot serve\na purpose and the second major disadvantages\nsuppose. You have a heavier projects to build\non regular basis. So at that time one single\nJenkins server cannot simply handle the load.\nLet us understand this with an example suppose.\nIf you need to run web test using Internet\nExplorer. So at that time you need a Windows\nmachine, but your other build jobs might require\na Linux box. So you can't use one single Jenkins\nover. All right, so let us move forward. See\nwhat is actually the solution to this problem\nthe solution to this problem is Jenkins distributed\narchitecture. So the Jenkins distributed architecture\nconsists of a Jenkins master and multiple\nJenkins slave. So this Jenkins Master is actually\nused for scheduling build jobs. It also dispatches\nbuilds to the slaves for actual execution.\nAll right, it also monitors a slave that is\npossibly taking them online and offline as\nrequired and it also records and presents\nthe build results and you can directly executable\njob or Master instance as well. Now when we\ntalk about Jenkins slaves, these slaves are\nnothing but the Java executable that are present\non remote machines. All right, so these slaves\nbasically here's the request of the Jenkins\nmaster or you can say they perform the jobs\nAs Told by the Jenkins Master they operate\non variety of operating system. So you can\nconfigure Jenkins in order to execute a particular\ntype of builds up on a particular Jenkins\nslave or on a particular type of Jenkins slave\nor you can actually let Jenkins pick the next\navailable. Budget get slave. All right. Now\nI go back again to my Ubuntu box and I'll\nshow you practically how to add Jenkins slaves\nnow over here as you can see that there is\nan option called Mana Jenkins just click over\nthere and when you scroll down you'll see\nman option called managed nodes under the\nleft hand side. There is an option called\nnew node. Just click over there click on permanent\nagent give a name to your slave. I'll just\ngive it as slave underscore one. Click on\nOK over here. You need to write the remote\nroot directory. So I'll keep it as slash home\nslash Edureka. And labels are not mandatory\nstill if you want you can use that and launch\nmethod. I want it to be launched slave agents\nvia SSH. All right over here. You need to\ngive the IP address of your horse. So let\nme show you the IP address of my Host this\nmy Jenkins slave, which I'll be using like\nJenkins slave. So, this is the machine that\nI'll be using as Jenkins slave in order to\ncheck the IP address. I'll type ifconfig.\nThis is the IP address of that machine just\ncopy it. Now I'll go back to my Jenkins master.\nAnd in the host tab, I'll just paste that\nIP address and over here. You can add the\ncredentials to do that. Just click on ADD\nand over here. You can give the user name.\nI'll give it as root password. That's all\njust click on ADD. And over here select it.\nFinally save it. Now it is currently adding\nthe slave in order to see the logs. You can\nclick on that slave again. Now, it has successfully\nadded that particular slave. Now what I'll\ndo, I'll show you the logs for that and click\non slave. And on the left hand side, you will\nnotice an option called log just click over\nthere and we'll give you the output. So as\nyou can see agent has successfully connected\nand it is online right now. Now what I'll\ndo, I'll go to my Jenkins slave and I'll show\nyou in slash home slash enter a car that it\nis added. Let me first clear my terminal now\nwhat I'll do, I'll show you the contents of\nSlash home slash at Eureka. As you can see\nthat we have successfully added slave dot\njar. That means we have successfully added\nJenkins slave to our Jenkins Master. Hello\neveryone. This is ordered from 80 Rekha and\ntoday's session will focus on what is docker.\nSo without any further Ado let us move forward\nand have a look at the agenda for today first.\nWe'll see why we need Docker will focus on\nvarious problems that industries were facing\nbefore Docker was introduced after that will\nunderstand what exactly Docker is and for\nbetter understanding of Docker will also look\nat a Docker example after that will understand\nhow Industries are using Docker with the case\nstudy of Indiana University. Our fifth topic\nwill focus on various Docker components, like\nimages containers Etc and our Hands-On part\nwill focus on installing WordPress and phpmyadmin\nusing Docker compose. So we'll move forward\nand we'll see why we need Docker. So this\nis the most common problem that industries\nwere facing as you can see that there is a\ndeveloper who has built an application that\nworks fine in his own environment. But when\nit reach production there were certain issues\nwith that application. Why does that happen\nthat happens because of difference in the\nComputing environment between deaf and product\nI'll move forward and we'll see the second\nproblem before we proceed with the second\nproblem. It is very important for us to understand.\nWhat a microservices consider a very large\napplication that application is broken down\ninto smaller Services. Each of those Services\ncan be termed as micro services or we can\nput it in another way as well microservices\ncan be considered a small processes that communicates\nwith each other over a network to fulfill\none particular goal. Let us understand this\nwith an example as you can see that there\nis an online shopping service application.\nIt can be broken down into smaller micro services\nlike account service product catalog card\nserver and Order server Microsoft was architecture\nis gaining a lot of popularity nowadays even\ngiants like Facebook and Amazon are adopting\nmicro service architecture. There are three\nmajor reasons for adopting microservice architecture,\nor you can say there are three major advantages\nof using Microsoft's architecture first. There\nare certain applications which are easier\nto build and maintain when they are broken\ndown into smaller pieces or smaller Services.\nSecond reason is suppose if I want to update\na particular software or I want a new technology\nstack in one of my module on one of my service\nso I can easily do that because the dependency\nconcerns will be very less when compared to\nthe application as a whole. Apart from that\nthe third reason is if any of my module of\nor any of my service goes down, then my whole\napplication remains largely unaffected. So\nI hope we are clear with what our micro services\nand what are their advantages so we'll move\nforward and see what are the problems in adopting\nthis micro service architecture. So this is\none way of implementing microservice architecture\nover here, as you can see that there's a host\nmachine and on top of that host machine there\nare multiple virtual machines each of these\nvirtual machines contains the dependencies\nfor one micro service. So you must be thinking\nwhat is the disadvantage here? The major disadvantage\nhere is in Virtual machines. There is a lot\nof wastage of resources resources such as\nRAM processor disk space are not utilized\ncompletely by the micro service which is running\nin these virtual machines. So it is not an\nideal way to implement microservice architecture\nand I have just given you an example of five\nmicroservices. What if there are more than\n5 micro Services what if your application\nis so huge that it requires? Microsoft versus\nso at that time using virtual machines doesn't\nmake sense because of the wastage of resources.\nSo let us first discuss the implementation\nof microservice problem that we just saw.\nSo what is happening here. There's a host\nmachine and on top of that host machine. There's\na virtual machine and on top of that virtual\nmachine, there are multiple Docker containers\nand each of these Docker containers contains\nthe dependencies 41 Microsoft Office. So you\nmust be thinking what is the difference here\nearlier? We were using virtual machines. Now,\nwe are using our Docker containers on top\nof virtual machines. Let me tell you guys\nDocker containers are actually lightweight\nAlternatives of virtual machines. What does\nthat mean in Docker containers? You don't\nneed to pre-allocate any Ram or any disk space.\nSo it will take the RAM and disk space according\nto the requirements of applications. All right.\nNow, let us see how Dockers all the problem\nof not having a consistent Computing environment\nthroughout the software delivery life cycle.\nLet me tell you first of all Docker containers\nare actually developed by the developers.\nSo now let us see how Dockers all the first\nThat we saw where an application works fine\nand development environment but not in production.\nSo Docker containers can be used throughout\nthe SCLC life cycle in order to provide consistent\nComputing environment. So the same environment\nwill be present in Dev test and product. So\nthere won't be any difference in the Computing\nenvironment. So let us move forward and understand\nwhat exactly Docker is. So the docker containers\ndoes not use the guest operating system. It\nuses the host operating system. Let us refer\nto the diagram that is shown. There is the\nhost operating system and on top of that host\noperating system. There's a Docker engine\nand with the help of this Docker engine Docker\ncontainers are formed and these containers\nhave applications running in them and the\nrequirements for those applications such as\nall the binaries and libraries are also packaged\nin the same container. All right, and there\ncan be multiple containers running as you\ncan see that there are two containers here\n1 & 2. So on top of the host machine is a\ndocker engine and on top of the docker engine\nthere are multiple containers and Each of\nthose containers will have an application\nrunning on them and whatever the binaries\nand library is required for that application\nis also packaged in the same container. So\nI hope you are clear. So now let us move forward\nand understand Docker in more detail. So this\nis a general workflow of Docker or you can\nsay one way of using Docker over here. What\nis happening a developer writes a code that\ndefines an application requirements or the\ndependencies in an easy to write Docker file\nand this Docker file produces Docker images.\nSo whatever dependencies are required for\na particular application is present inside\nthis image and what our Docker containers\nDocker containers are nothing but the runtime\ninstance of Docker image. This particular\nimage is uploaded onto the docker Hub. Now,\nwhat is Docker Hub? Docker Hub is nothing\nbut a git repository for Docker images it\ncontains public as well as private repositories.\nSo from public repositories, you can pull\nyour image as well and you can upload your\nown images as well on to the docker Hub. All\nright from Docker Hub various teams such as\nQA or production. We'll pull the image and\nprepare their own containers as you can see\nfrom the diagram. So what is the major advantage\nwe get through this workflow? So whatever\nthe dependencies that are required for your\napplication is actually present throughout\nthe software delivery life cycle. If you can\nrecall the first problem that we saw that\nan application works fine in development environment,\nbut when it reaches production, it is not\nworking properly. So that particular problem\nis easily resolved with the help of this particular\nworkflow because you have a same environment\nthroughout the software delivery lifecycle\nbe Dev test or product will see if a better\nunderstanding of Docker a Docker example.\nSo this is another way of using Docker in\nthe previous example, we saw that Docker images\nwere used and those images were uploaded onto\nthe docker Hub. I'm from Doc and have various\nteams were pulling those images and building\ntheir own containers. But Docker images are\nhuge in size and requires a lot of network\nbandwidth. So in order to say that Network\nbandwidth, we use this kind of a work flow\nover here. We use Jenkins server. Or any continuous\nintegration server to build an environment\nthat contains all the dependencies for a particular\napplication or a Microsoft Office and that\nbuild environment is deployed onto various\nteams, like testing staging and production.\nSo let us move forward and see what exactly\nis happening in this particular image over\nhere developer has written complex requirements\nfor a micro service in an easy to write dockerfile.\nAnd the code is then pushed onto the get repository\nfrom GitHub repository continuous integration\nservers. Like Jenkins will pull that code\nand build an environment that contains all\nthey have dependencies for that particular\nmicro service and that environment is deployed\non to testing staging and production. So in\nthis way, whatever requirements are there\nfor your micro service is present throughout\nthe software delivery life cycle. So if you\ncan recall the first problem we're application\nworks fine in Dev, but does not work in prod.\nSo with this workflow we can completely remove\nthat problem because the requirements for\nthe Microsoft Office is present throughout\nThe software delivery life cycle and this\nimage also explains how easy it is to implement\na Microsoft's architecture using Docker now,\nlet us move forward and see how Industries\nare adopting Docker. So this is the case study\nof Indiana University before Docker. They\nwere facing many problems. So let us have\na look at those problems one by one. The first\nproblem was they were using custom script\nin order to deploy that application onto various\nvm's. So this requires a lot of manual steps\nand the second problem was their environment\nwas optimized for legacy Java based applications,\nbut they're growing environment involves new\nproducts that aren't solely java-based. So\nin order to provide these students the best\npossible experience, they needed to began\nmodernizing their applications. Let us move\nforward and see what all other problems Indiana\nUniversity was facing. So in the previous\nproblem of dog, Indiana University, they wanted\nto start modernizing their applications. So\nfor that they wanted to move from a monolithic\narchitecture to a Microsoft Office architecture\nand the previous slides. We also saw that\nif you want to update a particular technology\nin one of your micro service it is easy to\ndo that because will be very less dependency\nconstrains when compared to the whole application.\nSo because of that reason they wanted to start\nmodernizing their application. They wanted\nto move to a micro service architecture. Let\nus move forward and see what are the other\nproblems that they were facing Indiana University\nalso needed security for their sensitive student\ndata such as SSN and student health care data.\nSo there are four major problems that they\nwere facing before Docker now, let us see\nhow they have implemented Docker to solve\nall these problems the solution to all these\nproblems was docker Data Center and Docker\ndata center has various components, which\nare there in front of your screen first is\nuniversal control plane, then comes ldap swarm.\nCS engine and finally Docker trusted registry\nnow, let us move forward and see how they\nhave implemented Docker data center in their\ninfrastructure. This is a workflow of how\nIndiana University has adopted Docker data\ncenter. This is dr. Trusted registry. It is\nnothing but the storage of all your Docker\nimages and each of those images contain the\ndependencies 41 Microsoft Office as we saw\nthat the Indiana University wanted to move\nfrom a monolithic architecture to a Microsoft\nis architecture. So because of that reason\nthese Docker images contain the dependencies\nfor one particular micro service, but not\nthe whole application. All right, after that\ncomes universal control plane. It is used\nto deploy Services onto various hosts with\nthe help of Docker images that are stored\nin the docker trusted registry. So it obscene\ncan manage their entire infrastructure from\none single place with the help of universal\ncontrol plane web user interface. They can\nactually use it to provision Docker installed\nsoftware on various hosts, and then deploy\napplications without doing a lot Of manual\nsteps as we saw in the previous slides that\nIndiana University was earlier using custom\nscripts to deploy our application onto VMS\nthat requires a lot of manual steps that problem\nis completely removed here when we talk about\nsecurity the role based access controls within\nthe docker data center allowed Indiana University\nto Define level of access to various themes.\nFor example, they can provide read-only access\nto Docker containers for production team.\nAnd at the same time they can actually provide\nread and write access to the dev team. So\nI hope we all are clear with how Indiana University\nhas adopted Docker data center will move forward\nand see what are the various Docker components.\nFirst is Docker registry Docker registry is\nnothing but the storage of all your Docker\nimages your images can be stored either in\npublic repositories or in private repositories.\nThese repositories can be present locally\nor it can be present on the cloud dog. A provides\na cloud hosted service called Docker Hub Docker\nHub as public as well as private repositories\nfrom public repositories. You can actually\npull an image and prepare your own containers\nat the same time. You can write an image and\nupload that onto the docker Hub. You can upload\nthat into your private repository or you can\nupload that on a public repository as well.\nThat is totally up to you. So for better understanding\nof Docker Hub, let me just show you how it\nlooks like. So this is how a Docker Hub looks\nlike. So first you need to actually sign in\nwith your own login credentials. After that.\nYou will see a page like this, which says\nwelcome to Docker Hub over here, as you can\nsee that there is an option of create repository\nwhere you can create your own public or private\nrepositories and upload images and at the\nsame time. There's an option called explore\nrepositories this contains all the repositories.\nThese which are available publicly. So let\nus go ahead and explore some of the publicly\navailable repositories. So we have a repositories\nfor nginx reddish Ubuntu then we have Docker\nregistry Alpine Mongo my SQL swarm. So what\nI'll do I'll show you a centralized repository.\nSo this is the centralized repository which\ncontains the center West image. Now, what\nI will do later in the session, I'll actually\npull a centralized image from Docker Hub.\nNow, let us move forward and see what our\nDocker images and containers. So Docker images\nare nothing but the read-only templates that\nare used to create containers these Docker\nimages contains all the dependencies for a\nparticular application or a Microsoft Office.\nYou can create your own image and upload that\nonto the docker Hub. And at the same time\nyou can also pull the images which are available\nin the public repositories and the in Docker\nHub. Let us move forward and see what our\nDocker containers Docker containers are nothing\nbut the runtime instances of Docker images\nit contains everything that is required to\nrun an application or a Microsoft Office and\nat the same time. It is also possible that\nmore than one image is required to create\na one container. Alright, so for better understanding\nof Docker images and Docker containers, what\nI'll do on my Ubuntu box, I will pull a sin\n2x image and I'll run a sin to waste container\nin that. So let us move forward and first\ninstall Docker in my Ubuntu box. So guys,\nthis is my Ubuntu box over here first. I'll\nupdate the packages. So for that I will type\nsudo apt-get update. asking for password it\nis done now. Before installing Docker. I need\nto install the recommended packages for that.\nI'll type sudo. Apt get install. Line-X - image\n- extra - you name space - are and now a line\nirks - image - extra - virtual and here we\ngo. Press why? So we are done with the prerequisite.\nSo let us go ahead and install Docker for\nthat. I'll type sudo. apt-get install Docker\n- engine so we have successfully installed\nDocker if you want to install Docker and send\ntwo ways. You can refer the center is Docker\ninstallation video. Now we need to start this\ndocker servicer for that. I'll type sudo service\ndocker start. So it says the job is already\nrunning. Now. What I will do I will pull us\ninto his image from Docker Hub and I will\nrun the center waste container. So for that\nI will type sudo. Docker pull and the name\nof the image. That is st. OS the first it\nwill check the local registry for Centos image.\nIf it doesn't find there then it will go to\nthe docker hub for st. OS image and it will\npull the image from there. So we have successfully\npulled us into his image from Docker Hub.\nNow, I'll run the center as container. So\nfor that I'll type sudo Docker Run - it sent\nOS that is the name of the image. And here\nwe go. So we are now in the Centre ice container.\nLet me exit from this. Clear my terminal.\nSo let us now recall what we did first. We\ninstalled awkard on open to after that. We\npulled sent to his image from Docker Hub.\nAnd then we build a center as container using\nthat Center West image now. I'll move forward\nand I'll tell you what exactly Docker compose\nis. So let us understand what exactly Docker\ncompose is suppose you have multiple applications\non various containers and all those containers\nare actually linked together. So you don't\nwant to actually execute each of those containers\none by one but you want to run those containers\nat once with a single command. So that's where\nDocker compose comes into the picture with\nDocker compose. You can actually run multiple\napplications present on various containers\nwith one single command that is docker - compose\nup as you can see that there is an example\nin front of you imagine you're able to Define\nthree containers one running a web app another\nrunning a post Kris. And another running a\nred is in a uml file that is called Docker\ncompose file. And from there. You can actually\nexecute all these three containers with one\nsingle command. That is Takin - compose up\nlet us understand this with an example suppose.\nYou want to publish a Blog for that you'll\nuse CMS and WordPress is one of the most widely\nused CMS so you need one. Default WordPress\nand you need one more container for my SQL\nas bakit and that my SQL container should\nbe linked to the WordPress container apart\nfrom that. You need one more container for\nphpmyadmin that should be linked to my SQL\ndatabase as it is used to access mySQL database.\nSo what if you are able to Define all these\nthree containers in one yamen file and with\none command that is docker - composer, all\nthree containers are up and running. So let\nme show you practically how it is done on\nthe same open to box where I've installed\nDocker and I've pulled a center s image. This\nis my Ubuntu box first. I need to install\nDocker compose here, but before that I need\npython pip so for that I will type sudo. Opt\nget installed. Titan - VIP and here we go.\nSo it is done now. I will clear my terminal\nand now I'll install Docker compose for that.\nI'll type sudo VIP install Docker - compose\nand here we go. So Docker compose is successfully\ninstalled. Now I'll make a directory and I'll\nname it as WordPress mkdir WordPress. Now\nI'll enter this WordPress directory. Now over\nhere, I'll edit Docker - compose dot HTML\nfile using G edit. You can use any other editor\nthat you want. I'll use G edit. So I'll type\nsudo G edit Docker - compose dot HTML and\nhere we go. So what here what I'll do, I'll\nfirst open a document. And I'll copy this\nyeah Mel code. And I will paste it here. So\nlet me tell you what I've done first. I have\ndefined a container as and I'm named it as\nWordPress. It is built from an image WordPress\nthat is present on the docker Hub. But this\nWordPress image does not have a database.\nSo for that I have defined one more container\nand I've named it as WordPress underscore\nDB. It is actually built from the image that\nis called Maria DB which is present in the\nword press and I need to link this WordPress\nunderscore DB with the WordPress container.\nSo for that I have written links WordPress\nunderscore DB: my SQL. All right, and in the\npost section this port 80 of the docker container\nwill actually be linked to Port eight zero\neight zero of by host machine. So are we clear\ntill here now? What I've done I've defined\na password here as a deer a cow. You can give\nwhatever password that you want and have defined\none more container called phpmyadmin. This\ncontainer is built from the image corbino's\n/ talker - phpmyadmin that is present on the\ndocker Hub again. I need to link this particular\ncontainer with WordPress underscore DB container\nfor that. I have written links WordPress underscore\nDB: my SQL and the port section the port 80\nof my Docker container will actually be linked\nto Port 80 181 of the host machine and finally\nI've given a username that is root and I've\ngiven a password as Ed Eureka. So let us now\nsave it and we'll quit Let me first clear\nmy terminal. And now I run a command sudo\nDocker - compose. Up - D and here we go. So\nthis command will actually pull all the three\nimages and we'll build the three containers.\nSo it is done now. Let me clear my terminal.\nNow what I'll do, I'll open my browser and\nover here. I'll type the IP address of my\nmachine or I can type the hostname as well.\nFirst name of my machine is localhost. So\nI'll type localhost and put a zero eight zero\nthat I've given for WordPress. So it will\ndirect you to a WordPress installation page\nover here. You need to fill this particular\nform, which is asking you for site title.\nI'll give it as editor acre username. Also,\nI will give as edureka password. I'll type\narea Rekha confirm the use of weak password\nthen type your email address and it is asking\nsearch engine or visibility which I want.\nSo I want click here and finally, I'll click\non install WordPress. So this is my WordPress\ndashboard and WordPress is now successfully\ninstalled. Now what I'll do, I'll open one\nmore top on over here. I'll type localhost\nor the IP address of a machine and I'll go\nto Port 80 1814 phpmyadmin. And over here,\nI need to give the user name. If you can recall.\nI've given route and password has given as\na do Rekha and here we go. So PHP, my admin\nis successfully installed. This phpmyadmin\nis actually used to access a my SQL database\nand this my SQL database is used as back-end\nfor WordPress. If you've landed on this video,\nthen it's definitely because you want to install\na Kubernetescluster at your machine. Now,\nwe all know how tough the installation process\nis hence this video on our YouTube channel.\nMy name is Walden and I'll be your host for\ntoday. So without wasting any time let me\nshow you what are the various steps that we\nhave to follow. Now. There are various steps\nthat we have to run both at the Masters and\nand the slave end and then a few commands\nonly at the master sent to bring up the cluster\nand then one command which has to be run at\nall the slave ends so that they can join the\ncluster. Okay. So let me get started by showing\nyou those commands on those installation steps,\nwhich have to be run commonly on both the\nMasters and and the slave and first of all,\nwe have to update your repository. Okay, since\nI am using Ubuntu To update my app to get\nrepository. Okay, and after that we would\nhave to turn up this vapp space be the Masters\nend or the slaves and communities will not\nwork if the swap space is on. Okay, we have\nto disable that so there are a couple of commands\nfor that and then the next part is you have\nto update the hostname the hosts file and\nwe have to set a static IP address for all\nthe nodes in your cluster. Okay, we have to\ndo that because at any point of time if your\nmaster or if your node in the cluster of fails,\nthen when they restart they should have the\nsame IP address if you have a dynamic IP address\nand then if they restart because of a failure\ncondition, then it will be a problem because\nthey are not be able to join the cluster because\nyou'll have a different IP address. So that's\nall you have to do these things. All right,\nthere are a couple of commands for that and\nafter that we have to install the openssh\nserver and docker that is because Humanity's\nrequires the openssh functionality and it\nof course needs Docker because everything\nin kubernetes is containers, right? So we\nare going to make use of Docker containers.\nSo that's why we have to install these two\ncomponents and finally we have to install\nQ barium. You're black and you have cereal\nnow. These are the core components of your\nKubernetes. All right. So these are the various\ncomponents that have to be installed on both\nyour master and your slave and so let me first\nof all open up my VMS and then show you how\nto get started now before I get started. Let\nme tell you one thing. You have a cluster\nyou have a master and then you have slaves\nin that cluster, right? Your master should\nalways have better configurations than your\nslave. So for that reason, if you're using\nvirtual machines on your host, then you have\nto ensure that your master has at least 2\nGB of RAM and to core CPUs. Okay, and your\nslave has 2GB of RAM and at least one core\nCPU. So these are the basic necessities for\nyour master and slave machines on that note.\nI think I can get started. So first of all,\nI'll bring up my virtual machine and go through\nthese installation processes. So I hope everyone\ncan see my screen here. This is my first VM\nand what I'm going to do is I'm going to make\nthis my master. Okay, so all the commands\nto install the various components are present\nwith me in my notepad Okay, so I'm going to\nuse this for reference and then quickly execute\nthese commands and show you how communities\nis installed. So first of all, we have to\nupdate our Advocate repository. Okay, but\nbefore that, let's log in as s you okay, so\nI'm going to do a sudo OSU so that I can execute\nall the following commands as pseudo user.\nOkay. So so to OSU there goes my root password\nand now you can see the difference here right\nhere. I was executing it as a normal user,\nbut from here am a root user. So I'm going\nto execute all these commands as s you so\nfirst of all Let's do an update. I'm going\nto copy this and paste it here apt-get update\nupdate my Ubuntu repositories. All right,\nso it's going to take quite some time. So\njust hold on till it's completed. Okay. So\nthis is done. The next thing I have to do\nis turn off my swap space. Okay. Now the command\nto disable my strap space is swap off space\nflag a let me go back here and do the same.\nOkay swap off but flag. And now we have to\ngo to this FS tab. So this is a file called\nFS tap OK and we will have a line with the\nentry of swap space because at any point of\ntime if you have enabled swap space, then\nyou will have a line over there. Now we have\nto disable that line. Okay, we can disable\nthat line by commenting out that line. So\nlet me show you how that's done. I'm just\nusing the Nano Editor to open this fstab file.\nOkay, so you can see this land right where\nit says swap file. This is the one which after\ncomment out. So just let me come down here\nand comment it out like this. Okay with the\nhash now, let me save this and exit. Now the\nnext thing after do is update my host name\nand my hosts file and then set a static IP\naddress. So let me get started by first updating\nthe hostname. So for that I have to go to\nthis file host name, which is in this /hc\npath. So I'm again using Nano for that. You\ncan see here. It's a director - virtualbox,\nright? So let me replace this and say okay\nMaster as in Cuba not he's master. So let\nme save this and exit now if you want your\nhost name to reflect over here because right\nnow it says root at the rate at Oracle virtualbox\nthe host name is does not look updated as\nyet and if you want it to be updated to k\nMaster, then you have to first of all restart\nthis VM or your system. If you're doing it\non a system, then you have to restart your\nsystem. And if you do it on a VM, you have\nto restart your VM. Okay, so let me restart\nmy VM in some time. But before that there\nare a few more commands, which I want to run\nand that is set a static IP address. Okay,\nso I'm going to copy this if conflict I'm\ngoing to run this config command Okay. So\nright now my IP address is one ninety two\ndot one sixty eight dot 56.1 not one and the\nnext time when I turn on this machine, I do\nnot want a different IP address. So to set\nthis as a static IP address. I have a couple\nof commands. Let me execute that command first.\nSo you can see this interface is file. Right?\nSo under SC / Network, we have a file called\ninterfaces. So this is where you define all\nyour network interfaces. Now, let me enter\nthis file and add the rules to make it static\nIP address as you can see here. The last three\nlines are the ones which ensure that this\nmachine will have a static IP address. These\nthree lines are already there on my machine.\nNow if you want to set a static IP address\nof your and then make sure that you have these\nthings defined correctly. Okay. My IP address\nis not one not one. So I would just read in\nit like this. So let me just exit. So the\nnext thing that I have to do is go to the\nhosts file and update my IP address over there.\nOkay, so I'm going to copy this and go to\nmy Etsy / hosts files now over here. You can\nsee that there is no entry. So after mention\nthat this is Mike a master. So let me specify\nmy IP address first. This is my IP address\nand now we have to update the name of the\nhost. So this host of - Kay Master so I'm\njust going to enter that and save this. Okay.\nNow the thing that we have to do now is restart\nthis machine. So let me just reset this machine\nand get back to you in the meanwhile. Okay.\nSo now that we are back on let me check if\nmy host name and hosts have all been updated.\nYes. There you go. You can see here, right\nit recorded k Master. So this means that my\nhost name has been successfully updated we\ncan also verify my IP address is the same\nlet me do an if config and as you can see\nmy appearance has not changed. All right,\nso this is good. Now. This is what we wanted.\nNow. Let's continue with our installation\nprocess. Let me clear the screen and go back\nto the notepad and execute those commands\nwhich first of all install my openssh server.\nSo this is going to be the command to do that\nand we have to execute this as pseudo user.\nRight so sudo apt-get install openssh server.\nThat's the command. Okay, let me say yes and\nenter. Okay. So my SSH server would have been\ninstalled by now that makes clear the screen\nand install Docker. But before I run this\ncommand which installs Dhaka and it will update\nmy repository. Okay, so let me log in as pseudo\nfirst fault. Okay, so do is use the command\nand okay I have logged in as root user. Now.\nThe next thing is update my repository so\nafter do an update update. Now again, this\nis going to take some more time. So just hold\non till then. Okay, this is also done. Now\nwe can straight away run the command to install\nDocker. Now. This is the command to install\nDocker. Okay from the aggregate repository.\nI'm installing Docker and this specifying\n- why because - why is my flag? So whenever\nthere's a problem that comes in while installation\nsaying do you want to install it? Yes or no,\nthen when you specify - why then it means\nthat by default it will accept why as a parameter.\nOkay, so that is the only constant behind\n- why so again inserting Dockers going to\ntake a few more minutes. Just hang on till\nthen. Okay, great. So Docker is also installed.\nOkay. So let me go back to the notepad. So\nto establish the Kubernetes environment the\nthree main components that Kubernetes is made\nup of RQ barium cubelet and Cube cereal, but\njust before I install these three components\nthere are a few things I have to do they are\nlike installing curl and then downloading\ncertain packages from this URL and then running\nan update. Okay. So let me execute these commands\none after the other first and then install\nKubernetes. So let's first of all start with\nthis command where I'm installing curl. Okay.\nNow the next command is basically downloading\nthese packages using curl and curl is basically\nthis tool using which you can download these\npackages using your command line. Okay. So\nthis is basically a web URL right so I can\naccess whatever packages are there on this\nweb URL and download them using curl. So that's\nwhy I've installed car in the first place.\nSo when executing this command I get this\nwhich is perfect now when I go back then there\nis this which we have to execute. Okay, let\nme hit enter and I'm done and finally I have\nto update my app get repository and common\nfor that. Is this one apt-get update? Okay,\ngreat. So all the presentation steps are also\ndone. Now. I can say to me set up my Kubernetes\nenvironment by executing this command. So\nin the same command I say install cubelet\nyou barium and Cube CDL and to just avoid\nthe yes prompt am specifying the - wife lat.\nOkay, which would by default take yes as a\nparameter. And of course I'm taking it from\nthe aggregate repository, right? So, let me\njust copy this and paste it here. Give it\na few more minutes guys because in Sony kubernetes\nis going to take some time. Okay bingo. So\nmy humanities has also been installed successfully.\nOkay. Let me conclude the setting up of this\ncube root is environment by updating the communities\nconfiguration. Okay. So there's this file.\nYou're right Q beta m dot f so, this is the\ncube ADM is the one that's going to let me\nadminister my Kubernetes. So after go to this\nfile and add this one line, okay, so let me\nfirst of all open up this file using my Nano\neditor. So let me again log in as soda OSU\nand this is the command. So as you can see\nwe have these set of environment variables.\nSo right after the last environment variable\nhave to add this one line and that line is\nthis one All right. Now, let me just save\nthis and exit brilliant. So with that the\ncomponents which have to be installed at both\nthe master and the slave come to an end. Now.\nWhat I will do next is run certain commands\nonly at the master to bring up the cluster\nand then run this one command at all my slaves\nto join the cluster. Alright. So before I\nstart doing anything more over here, let me\nalso tell you that I have already done the\nsame steps on my node. So if you are doing\nit at your end, then whatever steps you've\ndone so far run the same set of commands on\nanother VM because that will be acting as\nyour node v m but in my case, I have already\ndone that just to save some time, you know,\nso let me show you that this is Mike a master\nof and right here. I have my K node, which\nis nothing but my communities node and I've\nbasically run the same set of commands in\nboth the places, but there is one thing which\nI have to ensure before I bring up the cluster\nand that is and short the network IP addresses\nand the host name and the hosts. So this is\nmy communities node, so All I'm going to do\nwhat chat and say /hc posts. Okay. Now over\nhere. I have the IP address of my Cube ladies\nnode. That is this very machine and a specify\nthe name of the host. However, the name of\nmy Kubernetes Master host is not present and\nneither is the IP address. So that is one\nmanual entry we have to do if you remember\nlet me go to my master on check. What is the\nIP address? Yes. So the IP address over here\nis one ninety two dot one sixty eight dot\n56.1 not one. So this is the IP address. I\nhave to add in my node end. So after modify\nthis file for that, all right, but before\nthat you have to also ensure that this is\na static IP address. So let me ensure that\nthe IP address of my cluster node does not\nchange. So the first thing we have to do before\nanything is check. What is the current IP\naddress and for my node the IP addresses one?\nNinety two dot one sixty eight dot 56.1 not\nto okay now, let me run this command. Network\ninterfaces. Okay. So as you can see here,\nthis is already set to be a static IP address.\nWe have to ensure that these same lines are\nthere in your machine if you wanted to be\na static IP address since it's already there\nfor me. I'm not going to make any change but\nrather I'm going to go and check. What's my\nhost name? I mean the whole same should anyways\ngive the same thing because right now it's\nkeynote. So that's what it's gonna reflect.\nBut anyways, let me just show it to you. Okay,\nso my host name is keynote brilliant. So this\nmeans that that is one thing which I have\nto change and that is nothing but adding the\nparticular entry for my master. So let me\nfirst clear the screen and then using my Nano\neditor. In fact, I'll have to run it as pseudo.\nSo as a pseudo user I'm going to open my Nano\neditor and edit my hosts file. Okay, so here\nlet me just add the IP address of my master.\nSo what exactly is the IP address of the master?\nYes, this is my k Master. So I'm just going\nto copy this IP address come back here and\npaste the IP address and I'm gonna say the\nname of that particular host is came master.\nAnd now let me save this perfect. Now, what\nI have to do now is go back to my master and\nensure that the hosts file here has raised\nabout my slave. I'll clear the screen and\nfirst I'll open up my hosts file. So on my\nmasters and the only entry is there for the\nmaster. So I have to write another line where\nthat specify the IP address or my slave and\nthen add the name of that particular host.\nThat is K node. And again, let me use the\nNano editor for this purpose. So I'm going\nto say sudo Nano /hc posts. Okay, so I'm going\nto come here say one ninety two dot one sixty\neight dot 56.1 not to and then say Okay node.\nAll right. Now all the entries are perfect.\nI'm going to save this and Exit so the hosts\nfile on both my master and my slave has been\nupdated the static IP address for both my\nmaster and the slave has been updated and\nalso the kubernetes environment has been established.\nOkay. Now before we go further and bring up\nthe cluster, let me do a restart because I've\nupdated my hosts file. Okay. So let me restart\nboth of my master and my slave VMS and if\nyou're doing it at your and then you have\nto do the very same, okay, so let's say restart\nand similarly. Let me go to my load here and\ndo a restart. Okay, so I've just logged in\nand now that my systems are restarted. I can\ngo ahead and execute the commands at only\nthe Masters and to bring up the cluster. Okay.\nSo first of all, let me go through the steps\nwhich are needed to be run on the Masters\nend. So add the master of first of all, we\nhave to run a couple of commands to initiate\nthe Kubernetes cluster and then we have to\ninstall a pod Network. We have to install\na pod Network because all my containers inside\na single port will have to communicate over\na network Port is nothing but a network of\ncontainers. So there are various container\nnetworks, which I can use so I can use the\nCalico poor Network. I can use a flannel poor\nNetwork or I can use anyone you can see the\nentire list in the communities documentation.\nAnd in this session, I am going to use the\ncalcio network. Okay, so that's pretty simple\nand straightforward and that's what I'm going\nto show you next. So once you've set up the\nPod Network, you can straight away bring up\nthe communities dashboard and remember that\nyou have to set up the communities dashboard\nand bring this up before your notes join the\ncluster because in this version of Cuba Nettie's\nif you first get your notes to join the cluster\nand after that if you try bringing the kubernetes\ndashboard up then your communities dashboard\ngets hosted on the And you don't want that\nto happen, right? If you want the dashboard\nto come up at your Masters and you have to\nbring up the dashboard before your nodes join\nthe cluster. So these would be the three commands\nthat we will have to run initiating the cluster\nof inserting the poor Network and then setting\nup the Kubernetes dashboard. So let me go\nto my master and execute commands for each\nof these processes. So I suppose this is my\nmaster. And yes, this is my k Master. So so\nfirst of all to bring up the cluster we have\nto execute this command. Let me copy this\nand over here. We have to replace the IP addresses.\nSo the IP address of my master, right? So\nthis machine after specified that IP address\nover here because this is where the other\nIP addresses can come and join This is the\nmaster right? So I'm just seeing a pi server\nadvertise the address 56.1 not one so that\nall the other nodes can come and join the\ncluster on this IP address and along with\nthis. I have to also specify the port Network\nsince I've chosen the Calico poor Network.\nThere is a network range which my Calico poor\nNetwork uses so a cni basically stands for\ncontainer network interface. If I'm using\nthe Calico poor Network then after use this\nnetwork range, but in case of few want to\nuse a flannel poor Network, then you can use\nthis network range. Okay, so let me just copy\nthis one and paste it. All right. So the command\nis pseudo Cube ADM in it for Network followed\nby the IP address from where the other nodes\nwill have to join. So let's go ahead and enter\nSo since you're doing for the first time give\nit a few minutes because kubernetes take some\ntime to install. Just hold on until that happens.\nAll right. Okay, great. Now it says that your\nkubernetes master has initialized successfully\nthat's good news. And it also says that to\nstart using your cluster. We need to run the\nfollowing commands as a regular user. Okay,\nso we'll note that log out as a pseudo user\nand as a regular user executes these three\ncommands and also if I have to deploy a poor\nNetwork then after run a command, okay. So\nthis is that command which I have to run to\nbring up my poor Network. So I'll be basically\ncloning the yamen file which is present over\nhere. So before I get to all these things\nlet me show you that we have a cube joint\ncommand which is generated. Right? So this\nis generated in my masters and and I have\nto execute this command at my node to join\nthe cluster, but that would be the last step\nbecause like I said earlier these three commands\nwill have to be first executed then after\nbring up my poor Network then after bring\nup my dashboard and then I have to get my\nnotes to join the class are using this command.\nSo for my reference, I'm just going to copy\nthis command and store it somewhere else.\nOkay. So right under this Let me just do this\ncommand for later reference. And in the meanwhile,\nlet me go ahead and execute all these commands\none after the other. These are as per Cube\nentities instructions, right? Yes. I would\nlike to rewrite it. And then okay. Now that\nI've done with this let me first of all bring\nup my pod Network. Okay. Now the command to\nbring up my pod network is this Perfect. So\nmy calcio pod has been created now I can verify\nif my poor has been created by running the\ncube CDL get pods command. Okay. So this is\nmy Cube serial get pods. I can say - oh wide\nall namespaces. Okay by specifying the - oh\nwide and all namespaces. I'll basically get\nall the pods ever deployed. Even the default\npose with get deployed when the Kubernetes\ncluster initiates. So basically the kubernetes\ncluster is initiated and deployed along with\na few default ones especially for your poor\nNetwork. There is one part which is hosted\nfor your cluster. There's one pod For Your\nRocker board itself, and then there's one\npot which is deployed for your dashboard and\nwhatnot. So this is the entire list, right?\nSo if you're calcio for your SED, there's\none pod for your Cube controller. There's\na pot and we have various spots like this\nright for your master and you're a pi server\nand many things. So these are the default\ndeployments that you get So anyways, as you\ncan see the default deployments are all healthy\nbecause it says the status is all running\nand everything is basically you're running\nin the cube system namespace. All right, and\nit's all running on my k Master That's Mike\nunit is master. So the next thing that I have\nto do is bring up the dashboard before I can\nget my notes to join. Okay, so I'll go to\nthe notepad and copy the command to bring\nup my dashboard. So copy and paste so great.\nThis is my communities dashboard, which as\nyou know, basically this part has come up\nnow. If I execute this same Cube serial, get\npods command, then you can see that I've got\none more pot which is deployed for my dashboard\nbasically. So last time this was not there\nbecause I had not deployed my dashboard at\nthat time, right? So I don't need to plug\nmy iPod Network and whatnot and the other\nthings right? So I've deployed it and the\ncontinuous creating so in probably a few more\nseconds, this would also be running anyways\nin the meanwhile, what we can do is we can\nwork on the other things which are needed\nto bring up the dashboard the first fall.\nAbel your proxy and get it to be hope for\nweb server. There's a skip serial proxy command\nOkay. So with this your service would be starting\nto be served on this particular port number.\nOkay, localhost port number eight thousand\none of my master. Okay, not from the nodes.\nSo if I could just go to my Firefox and go\nto local Lowe's 8001 then my dad would be\nup and running over there. So basically my\ndashboard is being served on this particular\nport number. But if I want to actually get\nmy dashboard which shows my deployments and\non my services then that's a different URL.\nOkay. So yeah as you can see here. Localized\n8,000 / API slash V 1 right this entire URL\nis which is going to lead me to my dashboard.\nBut at this point of time I cannot log into\nmy dashboard because it's prompting me for\na token and I do not have a token because\nI have not done any cluster old binding and\nI have not mentioned that I am the admin of\nthis particular dashboard. So to enable all\nthose things there are a few more commands\nthat we have to execute starting with creating\na service account for your dashboard. So this\nis the command to create your service account.\nSo go back to the terminal and probably a\nnew terminal window execute this command Okay.\nSo with this you're creating a service account\nfor your dashboard, and after that you have\nto do the cluster roll binding for your newly\ncreated service account. Okay. So the dashboard\nhas been created and default namespace as\nper this. Okay, and here I'm saying that my\ndashboard is going to be for admin and I'm\ndoing the cross the road binding. Okay, and\nnow that this is created I can straight away\nget the token because if you remember it's\nasking me for a token to login, right? So\neven though I am the admin now have a not\nbe able to log in without D token, so to generate\nthe token I have to again run this command\nCube City will get secret key. Okay, so I'm\ngoing to copy this and paste it here. So this\nis the token or this is the key that basically\nneeds to be used. So let me copy this entire\ntoken and paste it over here. So let me just\nsave this and yeah, now you can see that my\ncommunity's cluster has been set up and I\ncan see the same thing from the dashboard\nover here. So basically by default the communities\nservice is deployed. Right? So this is what\nyou can see but I've just brought the dashboard\nnow and the cluster is not ready under my\nnodes join in. So let's go to the final part\nof this demonstration. We're in I'll ask my\nslaves to join the cluster. So you remember\nI copied the joint cluster which was generated\nat my Master's end in my notepad. So I'm going\nto copy that and execute that at the slaves\nand to join the cluster. Okay. So let me first\nof all go to my notepad and yeah, this is\nthe joint command which I had copyright. So\nI'm going to copy this and now I'm going to\ngo to my node. Yep. So, let me just paste\nthis and let's see what happens. Let me just\nrun this command as pseudo. It's a perfect.\nI've got the message that I have successfully\nestablished connection with the API server\non this particular IP address and port number,\nright? So this means that my node has joined\nthe cluster we can verify that from the dashboard\nitself. So if I go back to my dashboard, which\nis hosted on my master master Zen, so I have\nan option here as nodes. If I click on this\nthen I will get the details about my nodes\nover here. So earlier I only have the keymaster\nbut now I have both the key master and the\nK node give it a few more seconds until my\nnote comes up. I can also verify the same\nfrom my terminal. So if I go to my terminal\nhere and if I run the command Cube CTL get\nnodes then if we give me the details about\nthe nodes which are there in my cluster soak\na master is one that is already there in the\ncluster but cannot however will take some\nmore time to join my cluster. Alright, so\nthat's it guys. So that is about my deployment\nand that's how you deploy a community's cluster.\nSo from here on you can do whatever deployment\nyou want. Whatever you want to deploy you\ncan deploy it. Easily very effectively either\nfrom the dashboard or from the CLI and there\nare various other video tutorials of ours,\nwhich you can refer to to see how a deployment\nis made on Kubernetes. So I would request\nyou to go to the other videos and see how\ndeployment is made and I would like to conclude\nthis video on that note. If you're a devops\nguy, then you would have definitely heard\nof communities but I don't think the devops\nworld knows enough of what exactly kubernetes\nis and where it's used. And that's why we\nhad Erica of come up with this video on what\nis communities. My name is Walden and I'll\nbe representing a tárrega in this video.\nAnd as you can see from the screen, these\nwill be the topics that we'll be covering\nin today's session as first start off by talking\nabout what is the need for communities? And\nafter that I will talk about what exactly\nit is and what it's not and I will do this\nbecause there are a lot of myths surrounding\ncommunities and there's a lot of confusion\npeople have misunderstood communities to be\na containerization platform. Well, it's not\nokay. So I will explain what exactly it is\nover here. And then after that I will talk\nabout how exactly communities works. I will\ntalk about the architecture and all the related\nthings. And after that I will give you a use\ncase. I will tell you how communities was\nused at Pokemon go and how it helped Pokemon\ngo become one of the best games of the year\n2017 And finally at the end of the video,\nyou will get a demonstration of how to do\ndeployment with Kubernetes. Okay. So I think\nthe agenda is pretty clear you I think we\ncan get started with our first topic then\nnow first topic is all about. Why do we need\nKubernetes? Okay now to understand why do\nwe need Cuba Nettie's let's understand what\nare the benefits and drawbacks of containers.\nNow, first of all containers are good. They\nare amazingly good right any container for\nthat matter of fact a Linux container or a\nDocker container or even a rocket Continuum,\nright? They all do one thing they package\nyour application and isolated from everything\nelse, right? They isolate the application\nfrom the host mainly and this makes the container\nof fast reliable efficient light weight and\nscalable now hold the thought yes containers\nare scalable, but then there's a problem that\ncomes with that and this is what is the resultant\nof the need for Kubernetes even though continues\nare scalable. They are not very easily scalable.\nOkay, so let's look at it this way. You have\none container you might want to probably scale\nit up to to contain over three containers.\nWill it's possible right? It's going to take\na little bit of manual effort. But yeah, you\ncan scale it up. You know what I have a problem.\nBut then look at a real world scenario where\nyou might want to scale up to like 5200 containers\nthen in that case what happens I mean after\nscaling up, would you do you have to manage\nthose containers? Right? We have to make sure\nthat they are all working. They are all active\nand they're all talking to each other because\nif they're not talking to each other then\nthere's no point of scaling up itself because\nin that case the server's would not be able\nto handle the roads if they're not able to\ntalk to each other correct. So it's really\nimportant that they are manageable when they\nare scaled up and now let's talk about this\npoint. Is it really tough to scale up containers?\nWell the answer for that might be know. It\nmight not be tough. It's pretty easy to scale\nup containers, but the problem is what happens\nafter that. Okay, once you scale up containers,\nyou will have a lot of problems. Like I told\nyou the containers first for should have to\ncommunicate with each other because Not so\nmany in number and they work together to basically\nhost the service right the application and\nif they are not working together and talking\ntogether then the application is not hosted\nand scaling up is a waste so that's the number\none reason and the next is that the containers\nhave to be deployed appropriately and they\nhave to also be managed they have to be deployed\nappropriately because you cannot have the\ncontainers deployed in this random places.\nYou have to deploy them in the right places.\nYou cannot have one container in one particular\ncloud and the other one somewhere else. So\nthat would have a lot of complications. Well,\nof course it's possible. But yeah, it would\nlead to a lot of complications internally\nyou want to avoid all that so you have to\nhave one place where everything is deployed\nappropriately and you have to make sure that\nthe IP addresses are set everywhere and the\nport numbers are open for the containers to\ntalk to each other and all these things. Right.\nSo these are the two other points the next\nPoint our the next problem with scaling up\nis that auto scaling is never a functionality\nover here? Okay, and this is one of the things\nwhich is the biggest benefit with Cuba Nets.\nThe problem technically is there is no Auto\nscaling functionality. Okay, there's no concept\nof that at all. And you may ask at this point\nof time. Why do we even need auto-scaling?\nOkay, so let me explain the need for auto\nscaling with an example. So let's say that\nyou are an e-commerce portal. Okay, something\nlike an Amazon or a flip card and let's say\nthat you have decent amount of traffic on\nthe weekdays, but on the weekends, you have\na spike in traffic. Probably you have like\n4X or 5x the usual traffic and in that case\nwhat happens is maybe your servers are good\nenough to handle the requests coming in on\nweekdays, right? But the requests that come\non the weekends right from the increased traffic\nthat cannot be serviced by our servers right?\nMaybe it's too much for your servers to handle\nthe load and maybe in the short term. It's\nfine maybe once or twice you can survive but\nthey will definitely come a time when your\nserver will start crashing because it cannot\nhandle that many requests per second or permanent.\nAnd if you want to really avoid this problem\nwhat you do you have to scale up and now would\nyou Lead keep scaling up every weekend and\nscaling down after the weekend, right? I mean\ntechnically is it possible? Will you be buying\nyour servers and then setting it up and every\nFriday would you be again by new Star Wars\nsetting up your infrastructure? And then the\nmoment your weekday starts. Would you just\ndestroy all your servers? Whatever you build.\nWould that would you be doing? No, right?\nObviously, that's a pretty tedious task. So\nthat's where something like Cuban Aires comes\nin and what communities does is it keeps analyzing\nyour traffic and the load that's being used\nby the container and as and when the traffic\nis are reaching the threshold auto-scaling\nhappens where if the server's have a lot of\ntraffic and if it needs no more such servers\nfor handling requests, then it starts killing\nof the containers on its own. There is no\nmanual intervention needed at all. So that's\none benefit with Kubernetes and one traditional\nproblem that we have with scaling up of containers.\nOkay, and then yeah, the one last problem\nthat we have is the distribution of traffic\nthat is still challenging without something\nthat can manage your containers. I mean you\nhave so many containers, but how will the\ntraffic be distributed? Load balancing. How\ndoes that happen? You just have containers\nright? You have 50 containers. How does the\nload balancing happen? So all these are questions.\nWe should really consider because containerization\nis all good and cool. It was much better than\nVMS. Yes containerization. It was basically\na concept which was sold on the basis of for\nscaling up. Right? We said that vm's cannot\nbe scaled up easily. So we told use containers\nand with containers you can easily scale up.\nSo that was the whole reason we basically\nsold containers with the tagline of scaling\nup. But in today's world, our demand is ever\nmore that even the regular containers cannot\nbe enough so scaling up a so much or and so\ndetailed that we need something else to manage\nyour containers, correct. Do we agree that\nwe need something right? And that is exactly\nwhat Cuban Aries is. So Kubernetes is a container\nmanagement tool. All right. So this is open\nsource and this basically automate your container\ndeployment your continue scaling and descaling\nand your continual load balancing the benefit\nwith this is that it works brilliantly with\nall the cloud vendors with all A big cloud\nvendors or your hybrid Cloud vendors and it\nalso works on from Isis. So that is one big\nselling point of kubernetes. Right? And if\nI should give more information about communities\nthen let me tell you that this was a Google\ndeveloped product. Okay. It's basically a\nbrainchild of Google and that pretty much\nis the end of the story for every other competitor\nout there because the community that Google\nbrings in along with it is going to be huge\nor basically the Head Start that communities\nwould get because of being a Google brain\nchild is humongous. And that is one of the\nreasons why kubernetes is one of the best\ncontainer management tools in the market period\nand given that communities is a Google product.\nThey have written the whole product on go\nlanguage. And of course now Google has contributed\nthis whole communities project to the CN CF\nwhich is nothing but the cloud native Computing\nFoundation or simply Cloud native Foundation,\nright? You can just call them either that\nand they have donated their open source project\nto them. And if I have to just summarize what\nHumanities is you can just think of it like\nthis it can group like a number. Containers\ninto one logical unit for managing and deploying\nan application or a particular service. So\nthat's a very simple definition of what communities\nis. It can be easily used for deploying your\napplication. Of course. It's going to be Docker\ncontainers which you will be deploying. But\nsince you will be using a lot of Docker containers\nas part of your production, you will also\nhave to use Kubernetes which will be managing\nyour multiple Docker containers, right? So\nthis is the role it plays in terms of deployment\nand scaling upskilling down is primarily the\ngame of communities from your existing architecture.\nIt can scale up to any number you want. It\ncan scale down anytime and the best part is\nthe scaling can also be set to be automatic.\nLike I just explained some time back right\nyou can make communities communities would\nanalyze the traffic and then figure out if\nthe scaling up needs to be done or the Skilling\nnoun can be done and all those things. And\nof course the most important part load balancing,\nright? I mean what good is your container\nor group of containers if load balancing cannot\nbe enabled right? So communities does that\nalso and these Some of the points on based\non which kubernetes is built. So I'm pretty\nsure you have got a good understanding of\nwhat communities is by now Write a brief idea\nat least so moving forward. Let's look at\nthe features of Kubernetes Okay. So we've\nseen what exactly kubernetes is how would\nusers Docker containers or other connector\nor containers in general? But now let's see\nsome of the selling points of humanities or\nwhy it's a must for you. Let's start off with\nautomatic bin packing when we say automatic\nbin packing. It's basically that communities\npackages your application and it automatically\nplaces containers based on their requirements\nand the resources that are available. So that's\nthe number one advantage the second thing\nservice Discovery and load balancing. There\nis no need to worry. I mean if you know, if\nyou're if you're going to use Kubernetes then\nyou don't have to worry about networking and\ncommunication because communities will just\nautomatically assign containers their own\nIP addresses and probably a single DNS name\nfor a set of containers which are performing\na logical operation. And of course, there\nwill be loads. Dancing across them so you\ndon't have to worry about all these things.\nSo that's why we say that there is service\nDiscovery and load balancing with kubernetes\nand the third feature of kubernetes. Is that\nstorage orchestration with communities, you\ncan automatically Mount your storage system\nof your choice. You can choose that to be\neither a local storage or maybe on a public\nCloud providers such as a gcp or AWS or even\na network storage system such as NFS or other\nthings, right? So that was the feature number\nthree now, please remember for self-healing\nnow, this is one of my favorite parts of Humanity's\nactually not just communities even with respect\nto dr. Swamp. I really like this part of self-healing\nwhat self feeling is all about is that whenever\nkubernetes realizes that one of your containers\nhas failed then it will restart that container\non its own right and we create a new container\nin place of this crashed one and in case you're\nnode itself fails, then what you bilities\nwould do in that case has whatever containers\nwere running in that failed node. Those containers\nwould be started in another node, right? Of\ncourse, you would have to have more In that\ncluster if there's another node in the cluster\ndefinitely room would be made for this field\ncontainer to start a service. So that happens\nso the next feature is batch execution. So\nwhen we say batch execution, it's that along\nwith Services Humanities can also manage your\nbatch and CIA work loads, which is more of\na devops roll. Right? So as part of your CIA\nworkloads communities can replace your containers\nwhich fail and it can restart and restore\nthe original state that is what is possible\nwith kubernetes and secret and configuration\nmanagement. That is another big feature with\nkubernetes. And that is the concept of where\nyou can deploy and update your secrets and\napplication configuration without having to\nrebuild your entire image and without having\nto expose your secrets in your stack configuration\nor anything, right? So if you want to deploy\nan update your secrets only that can be done.\nSo it's not available with all the other tools,\nright? So communities is one that does that\nyou don't have to restart everything and rebuild\nyour entire container. That's one benefit\nand then we have Horizonte scaling which of\ncourse you will My that of already you can\nscale your applications up and down easily\nwith a simple command. The simple command\ncan be run on the CLI or you can easily do\nit on your GUI, which is your dashboard. Your\ncommunity is dashboard or Auto scaling is\npossible Right based on the CPU usage. Your\ncontainers would automatically be scaled up\nor scaled down. So that's one more feature\nand the fun feature that we have is automatic\nrollbacks and roll outs now Kubernetes what\nit does is whenever there's an update your\napplication, which you want to release communities\nprogressively rolls out these changes and\nupdates to the application or its complications\nby this ensuring that one instance after the\nother is send these updates and it makes sure\nthat not all instances are updated at the\nsame time thus ensuring that yes, there is\nhigh availability. And even if something goes\nwrong, then the Cuban ladies will roll back\nthat change for you. So all these things are\nenabled and these are the features with Humanities.\nSo if you're really considering a solution\nfor your containers from managing your containers,\nthen communities should be your solution.\nTo that should be your answer. So that is\nabout the various features of Kubernetes now\nmoving forward here. Let's talk about a few\nof the myths surrounding communities and we\nare doing this because a lot of people have\nconfusion with respect to what exactly it\nis. So people have this misunderstanding that\ncommunities is like docker which is a continuation\nplatform, right? That's what people think\nand that is not true. So this kind of a confusion\nis what I intend to solve in the upcoming\nslides. I will not talk about what exactly\nkubernetes is and what communities is not\nlet me start with what it's not now. The first\nthing is that communities is not to be compared\nwith Docker because it's not the right set\nof parameters which are comparing them against\nDocker is a containerization platform and\na Kubernetes is a container management platform,\nwhich means that once you have containerized\nyour application with the help of Docker containers\nor Linux containers, and when you are scaling\nup these containers to a big number like 50\nor a hundred that's where communities would\ncome in when you have like multiple containers\nwhich need to be managed. That's where communities\ncan comment and effectively do it. You can\nspecify the configurations and communities\nwould make sure that at all times these conditions\nare satisfied. So that's what community is\nyou can tell in your configurations that at\nall time. I want these many containers running.\nI want these many pods running and so many\nother needs right you can specify much more\nthan that and whatever you do at all times\nyour cluster master or your communities Master\nwould ensure that this condition is satisfied.\nSo that is what exactly Community is, but\nthat does not mean that talker does not solve\nthis purpose. So Docker also have their own\nplug-in. I wouldn't call it a plug-in. It's\nactually another tool of there's so there's\nsomething called as Docker swamp and Dockers\nwarm does a similar thing it does contain\na management like Mass container management\nso similar to what communities does when you\nhave like 50 to 100 containers Docker swarm\nwould help you in managing those containers,\nbut if you look at who is prevailing in the\nmarket today, I would say it's communities\nbecause communities came in first and the\nmoment they came in they were backed by Google\nThey had this huge Community with they just\nswept along with them. So they have like hardly\nleft any in any market for Docker and for\ndr. Stromm, but that does not mean that they\nare better than Docker because they are at\nthe end of the day using Docker. So communities\nis only as good as what Docker is if there\nare no Docker containers, then there's no\nneed for communities in the first place. So\nCuban adiz and Docker they go hand in hand.\nOkay. So that is the point you have to note\nand I think that would also explain the point\nthat kubernetes is not for continue Rising\napplications. Right? And the last thing is\nthat Kubernetes is not for applications with\na simple architecture. Okay, if your architecture\nreview your applications architecture is pretty\ncomplex, then you can probably use Cuban IDs\nto uncomplicate that architecture. Okay, but\nif you're having a very simple one in the\nfirst place then using kubernetes would not\nserve you any good and it could probably make\nit a little more complicated than what it\nalready is, right. So this is what kubernetes\nis not now speaking of what exactly kubernetes\nis. The first point is Kubernetes is robust.\nAnd reliable now when I see a robust and reliable,\nI'm referring to the fact that the cluster\nthat is created the communities cluster, right?\nThis is very strong. It's very rigid and it's\nnot going to be broken easily. The reason\nbeing the configurations which is specified\nright at any point of time if any container\nfails a new container would come up right\nor that whole container would be restarted.\nOne of the things will definitely happen.\nIf your node fails then the containers which\nare running in a particular node. They would\nstart running in a different node, right?\nSo that's why it's reliable and it's strong\nbecause at any point of time your cluster\nwould be at full force. And at any time if\nit's not happening, then you would be able\nto see that something's wrong and you have\nto troubleshoot your node and then everything\nwould be fine. So Cuban, it's would do everything\npossible and it pretty much does everything\npossible to let us know that the problem is\nnot at its end and it's giving the exact result\nthat we want. That's what communities are\ndoing. And the next thing is that Humanity's\nactually is the best solution for scaling\nup containers at least in today's. I could\nbecause the two biggest players in this market\nare radhika swamp and Humanities and Docker\nswarm is not really the better one here because\nthey came in a little late even though doctor\nwas there from the beginning communities came\nafter that but doc a swarm which we are talking\nabout came in somewhere around 2016 or 2017.\nRight? But communities came somewhere around\n2015 and they had a very good Head Start.\nThey were the first ones to do this and they're\nbacking by Google is just icing on the cake\nbecause whatever problem you have with respect\nto Containers, if you just go up and if you\nput your error there then you will have a\nlot of people on github.com and get up queries\nand then on stack overflow will be resolving\nthose errors, right? So that's the kind of\nMarket they have so it's back be a really\nhuge Community. That's what kubernetes is\nand to conclude this slide Humanities is a\ncontainer orchestration platform and nothing\nelse. All right. So I think these two slides\nwould have given you more information and\nmore clarity with respect to what kubernetes\nis. And how different it is from docker and\ndocker swamp, right? So now moving on let's\ngo to the next topic where we will compare\nHumanities with DACA swamp and we are comparing\nwith Docker swamp because we cannot compare\nDocker and Kubernetes head on. Okay, so that\nis what you have to understand if you are\nthis person over here if you are Sam who is\nwondering which is the right comparison then\nlet me reassure you that the difference can\nonly be between Humanities and doctors Mom.\nOkay. So let's go ahead and see what the difference\nis. Actually. Let's start off with your installation\nand configuration. Okay. So that's the first\nparameter will use to compare these two and\nover here doc a swarm comes out on top because\nDockers little easier you have around two\nor three commands which will help you have\nyour cluster up and running that includes\nthe node joining the cluster, right? But with\nkubernetes it's way more complicated than\ntalking swamp, right? So you have like close\nto ten to eleven commands, which you have\nto execute and then there's a certain pattern\nyou have to follow to ensure that there are\nno errors, right? Yes, and that's why I'm\nconsuming and that's why it's complicated.\nBut once your cluster is ready that time kubernetes\nis the winner because the flexibility the\nrigidness and the robustness that communities\ngives you cannot be offered by dr. Swamp.\nYes, dr. Storm is faster, but yes not as good\nas communities when it comes to your actual\nworking and speaking of the GUI. Once you\nhave set up your cluster or you can use a\nGOI with communities for deploying your applications.\nRight? So you don't need to always use your\nCLI. You have a dashboard which comes up and\nthe dashboard. If you give it admin privileges,\nthen you can use it. You can deploy your application\nfrom the dashboard itself everything just\ndrag-and-drop click functionality right with\njust click functionality. You can do that.\nThe same is not the case with Docker swarm.\nYou have no GUI in Dhaka swamp Okay. So doc\nIslam is not the winner over here. It's Kubernetes\nand he is going to the third parameter scalability.\nSo people again have a bad misconception that\ncommunities is better it is the solution for\nscaling up. And it is better and faster than\ndr. Stromm. Well, it could be better but yes,\nit's not faster than doctors warm. Even if\nyou want to scale up right? There is a report\nwhere I recently read that the scaling up\nin Dhaka swarm is almost five times faster\nthan the scaling up with Kubernetes. So that\nis the difference. But yes, once you are scaling\nup is done after that your cluster strength\nwith kubernetes is going to be much stronger\nthan your doctor swamp plus the strength.\nThat's again because of the various configurations.\nThat should have been specified by then. That\nis the thing now moving on to the next parameter\nwe have is load balancing requires manual\nservice configuration. Okay. This is in case\nof kubernetes and yes, this could be shortfall.\nBut with dr. Storm there is inbuilt load balancing\ntechniques, which you don't need to worry\nabout. Okay, even the load balancing which\nrequires manual effort in case of communities\nis not do much there are times when you have\nto manually specify what are your configuration\nyou have to make a few changes but yes, it's\nnot as much as what you thinking and speaking\nof updates and rollbacks. What communities\ndoes is it does the Scheduling to maintain\nthe services while updating. Okay. Yeah, that's\nvery similar to how it works of darkness form\nwherein you have like Progressive updates\nand service Health monitoring happens throughout\nthe update, but the difference is when something\ngoes wrong Humanity's goes that extra mile\nof doing a roll back and putting you back\nto the previous state right before the update\nwas launched. So that is the thing with kubernetes\nand the next parameter. We are comparing those\ntwo upon is data volumes. So data volumes\nin Cuba nattie's can be shared with other\ncontainers, but only within the same pod,\nso we have a concept called pods in communities.\nOkay, now board is nothing but something which\ngroups related containers right a logical\ngrouping of containers together. So that is\na pot and whichever containers are there inside\nthis pod. They can have a shared volume. Okay,\nlike storage volume, but in case of doctors\nfrom you don't have the concept of poor at\nall. So the shared volumes can be between\nany other container. There is no restriction\nwith respect to that and dr. Swann and then\nfinally we have this All the logging and monitoring.\nSo when it comes to logging and monitoring\nHumanities provides inbuilt tools for this\npurpose. Okay, but with dr. Storm you have\nto install third-party tools if you want to\ndo logging and monitoring so that is the fall\nbackward. Dr. Swann because logging is really\nimportant one because you will know what the\nproblem is. You'll know which card in a failed\nwhat happened there is exactly the error,\nright? So logs would help you give that answer\nand monitoring is important because you have\nto always keep a check on your nodes, right?\nSo as the master of the cluster it's very\nimportant that there's monitoring and that's\nwhere our communities has a slight advantage\nover doc a swarm. Okay, but before I finish\nthis topic there is this one slide. I want\nto show you which is about the statistics.\nSo this stat I picked it up from this Platform\n9, which is nothing but a company that writes\nabout tech. Okay and what they've said is\nthat the number of news articles there were\nproduced right in that one particular year\nhad 90% of those covered on Kubernetes compared\nto the 10 percent. It on Docker swamp amazing,\nright? That's a big difference. That means\nfor every one blog written or for everyone\narticle written on Docker swamp. There are\nnine different articles written on humanities\nand similarly for web searches for web searches\nkubernetes is 90 percent compared to Dhaka\nswarms 10% and Publications GitHub Stars.\nThe number of commits on GitHub. All these\nthings are clearly one vacuum energy is everywhere.\nSo communities is the one that's dominating\nthis market and that's pretty visible from\nthis stat also, right? So I think that pretty\nmuch brings an end to this particular topic\nnow moving forward. Let me show you a use\ncase. Let me talk about how this game this\namazing game called Pokemon go was powered\nwith the help of communities. I'm pretty sure\nyou all know what it is, right? You guys know\nPokemon go. It's the very famous game and\nit was actually the best game of the year\n2017 and the main reason for that being the\nbest is because of kubernetes and let me tell\nyou why but before I tell you why there are\nfew things, which I want to just talk about\nI'll give you an overview of Pokemon goers\nand let me talk about a few key Stacks. So\nPokemon go is an augmented reality game developed\nby Niantic for your Android and for iOS devices.\nOkay, and those key stats read that they've\nhad like 500 million plus downloads overall\nand 20 million plus daily active users. Now\nthat is massive daily. If you're having like\n20 million users plus then you have achieved\nan amazing thing. So that's how good this\ngame is. Okay, and then this game was actually\ninitially launched only in North America Australia\nNew Zealand, and I'm aware of this fact because\nI'm based out of India and I did not get access\nto this game because the moment news got out\nthat we have a game like this. I started downloading\nit, but I couldn't really find any link or\nI couldn't download it at all. So they launched\nit only in these countries, but what they\nfaced right in spite of just reading it in\nthese three countries. They had like a major\nproblem and that problem is what I'm going\nto talk about in the next slide, right? So\nmy use case is based on that very fact that\nIn spite of launching it only in these three\ncountries or in probably North America and\nthen in Australia New Zealand, they could\nhave had a meltdown but rather with the help\nof Humanity's they used that same problem\nas the basis for their raw success. So that's\nwhat happened. Now let that be a suspense\nand before I get to that let me just finish\nthis slide one amazing thing about Pokemon\ngo is that it has inspired users to walk over\n5.4 billion miles an hour. Okay. Yes do the\nmath five point four billion miles in one\nyear. That's again a very big number and it\nsays that it has surpassed engineering Expectations\nby 50 times. Now this last sign is not with\nrespect to the Pokemon Go the game but it\nis with respect to the backend and the use\nof Kubernetes to achieve whatever was needed.\nOkay, so I think I've spent enough time over\nhere. Let me go ahead and talk about the most\ninteresting part and tell you how the back\nin architecture of Pokemon go was okay. So\nyou have a Pokémon go container, which had\ntwo primary components one is your Google\nbig table, which is your main. Database where\neverything is going in and coming out and\nthen you have your programs which is a run\non your java Cloud, right? So these two things\nare what is running your game mapreduce and\nCloud dataflow wear something it was used\nfor scaling up. Okay, so it's not just the\ncontainer scaling up but it's with respect\nto the application how the program would react\nwhen there are these increased number of users\nand how to handle increased number of requests.\nSo that's where the mapper uses. The Paradigm\ncomes in right the mapping and then reducing\nthat whole concept. So this was their one\ndeployment. Okay, and when we say in defy,\nit means that they had this over capacities\nwhich could go up til five times. Okay. So\ntechnically they could only serve X number\nof requests but in case of failure conditions\nor heavy traffic load conditions, the max\nthe server could handle was 5x because after\n5x the server would start crashing that was\ntheir prediction. Okay, and what actually\nhappened at Pokemon go on releasing in just\nthose three different geographies. Is that\nthe Deployed it the usage became so much that\nit was not XM R of X, which is technically\nthey're a failure limit and it is not even\n5 x which is the server's capability but the\ntraffic that they got was up to 50 times 50\ntimes more than what they expected. So, you\nknow that when your traffic is so much then\nyou're going to be brought down to your knees.\nThat's a definite and that's a given right.\nThis is like a success story and this is too\ngood to be true kind of a story and in that\nkind of a scenario if the request start coming\nin are so much that if they reach 50 x then\nit's gone, right the application is gone for\na toss. So that's where kubernetes comes in\nand they overcome all the challenges. How\ndid you overcome the challenges because Cuban\nareas can do both vertical scaling and horizontal\nscaling at ease and that is the biggest problem\nright? Because any application and any other\ncompany can easily do horizontal scaling where\nyou just spin up more containers and more\ninstances and you set up the environment but\nvertical scaling is something which is very\nspecific and this is even more challenging.\nNow it's more specific to this particular\ngame because the virtual reality would keep\nchanging whenever a person moves around or\nwalks around somewhere in his apartments or\nsomewhere on the road. Then the ram right\nthat would have to increase the memory the\nin memory and the storage memory all this\nwould increase so in real time your servers\ncapacity also has to increase vertically.\nSo once they have deployed it, it's not just\nabout horizontal scalability anymore. It's\nnot about satisfying more requests. It's about\nsatisfying that same request with respect\nto having more Hardware space more RAM space\nand all these things right that one particular\nserver should have more performance abilities.\nThat's what it's about and communities solve\nboth of these problems effortlessly and neon\ntape were also surprised that kubernetes could\ndo it and that was because of the help that\nthey got from Google. I read an article recently\nthat they had a neon thick slab. He met with\nsome of the top Executives in Google and then\ngcp right and then they figure out how things\nare supposed to go and they of course Met\nwith the Hedgehog communities and they figure\nout a way to actually scale it up to 50 time\nin a very short time. So that is the challenge\nthat they represented and thanks to communities.\nThey could handle three times the traffic\nthat they expected which is like a very one\nof story and which is very very surprising\nthat you know, something like this would happen.\nSo that is about the use case and that pretty\nmuch brings an end to this topic of how Pokemon\ngo used communities to achieve something because\nin today's world Pokemon go is a really revered\ngame because of what it could write it basically\nbeat all the stereotypes of a game and whatever\nanybody could have anything negative against\nthe game, right? So they could say that these\nmobile games and video games make you lazy.\nThey make you just sit in one place and all\nthese things. Right and Pokemon go was something\nwhich was different it actually made people\nwalk around and it made people exercise and\nthat goes on to show how popular this game\nbecame if humanity is lies at the heart of\nsomething which became so popular and something\nNow became so big then you should imagine\nhow big the humanities or how beautiful communities\nis, right? So that is about this topic now\nmoving forward. Let me just quickly talk about\nthe architecture of communities. Okay. So\nthe communities architecture is very simple.\nWe have the cube Master which controls a pretty\nmuch everything. We should note that it is\nnot a Docker swarm where your Cube Master\nwill also have containers running. Okay, so\nthey won't be containers over here. So all\nthe containers will be running all the services\nwhich will be running will be only on your\nnodes. It's not going to be on your master\nand you would have to first of all create\nyour rock Master. That's the first step in\ncreating your cluster and then you would have\nto get your notes to join your cluster. Okay.\nSo bead your pods or beat your containers\neverything would be running on your nodes\nand your master would only be scheduling or\nreplicating these containers across all these\nnodes and making sure that your configurations\nare satisfied, right? Whatever you specify\nin the beginning and the way you access your\nCube Master is why are two ways You can either\nuse it via the UI or where the CLI. So the\nCLI is the default way and this is the main\nway technically because if you want to start\nsetting up your cluster you use the CLI, you\nset up your cluster and from here, you can\nenable the dashboard and when you enable the\ndashboard then you can probably get the GUI\nand then you can start using your communities\nand start deploying by just with the help\nof the dashboard right my just the click functionality.\nYou can deploy an application which you want\nrather than having to write. I am L file or\nfeed commands one after the other from the\nCLI. So that is the working of Kubernetes.\nOkay. Now, let's concentrate a little more\non how things work on the load end. Now as\nsaid before communities Master controls your\nnodes and inside nodes you have containers.\nOkay, and now these containers are not just\ncontained inside them but they are actually\ncontained inside pods. Okay, so you have nodes\ninside which there are pots and inside each\nof these pods. They will be a number of containers\ndepending upon Your configuration and your\nrequirement right now these pods which contain\na number of containers are a logical binding\nor logical grouping of these containers supposing\nyou have one application X which is running\nin Node 1. Okay. So you will have a part for\nthis particular application and all the containers\nwhich are needed to execute this particular\napplication will be a part of this particular\npart, right? So that's how God works and that's\nwhat the difference is with respect to what\nDoc is warm and two bananas because I'm dr.\nSwamp. You will not have a pot. You just have\ncontinuous running on your node and the other\ntwo terminologies which you should know is\nthat of replication controller and service.\nYour replication controller is the Masters\nresource to ensuring that the request number\nof pods are always running on the nodes, right?\nSo that's trigger confirmation or an affirmation\nwhich says that okay. This many number of\nPODS will always be running and these many\nnumber of containers will always be running\nsomething like that. Right? So you see it\nand the replication controller will always\nensure that's happening and your service is\njust an object on the master that provides\nload. I don't think of course is replicated\ngroup of PODS. Right? So that's how Humanities\nworks and I think this is good enough introduction\nfor you. And I think now I can go to the demo\npart where and I will show you how to deploy\napplications on your communities by either\nyour CLI, or either via your Jama files or\nby or dashboard. Okay guys, so let's get started\nand for the demo purpose. I have two VMS with\nme. Okay. So as you can see, this is my Cube\nMaster which would be acting as my master\nin my cluster. And then I have another VM\nwhich is my Cube Node 1. Okay. So it's a cluster\nwith one master and one node. All right. Now\nfor the ease of purpose for this video, I\nhave compiled the list of commands in this\ntext document right? So here I have all the\ncommands which are needed to start your cluster\non then the other configurations and all those\nthings. So I'll be using these every copying\nthese commands and then I'll show you side-by-side\nand I will also explain when I do that as\nto what each of these commands mean now there's\none prerequisite that needs to be satisfied.\nAnd that is the master of should have at least\ntwo core CPUs. Okay and 4GB of RAM and your\nnode should have at least one course if you\nand 4GB of ram so just make sure that this\nmuch of Hardware is given to your VMS right\nif you are using To what a Linux operating\nsystem well and good but if you are using\na VM on top of a Windows OS then I would request\nyou to satisfy these things. Okay, these two\ncriterias and I think we can straight away\nstart. Let me open up my terminal first fault.\nOkay. This is my node. I'm going back to my\nmaster. Okay. Yes. So first of all, if you\nhave to start your cluster, you have to start\nit from your Masters end. Okay, and the command\nfor that is Q barium in it, you specify the\nport Network flag and the API server flag.\nWe are specifying the port Network flag because\nthe different containers inside your pod should\nbe able to talk to each other easily. Right?\nSo that was the whole concept of self discovery,\nwhich I spoke about earlier during the features\nof communities. So for this self-discovery,\nwe have like different poor networks using\nwhich the containers would talk to each other\nand if you go to the documentation the community\nis documentation. You can find a lot of options\nare you can use either Calico pod or you can\nuse a flannel poor Network. So when we say\npoor Network, it's basically a framed as the\ncni. Okay container network interface. Okay,\nso you can use either a Calico cni or a flannel\ncni or any of the other ones. This is the\ntwo popular ones and I will be using the calcio\ncni. Okay. So this is the network range for\nthis particular pod, and this will Specify\nover here. Okay, and then over here we have\nto specify the IP address of the master. So\nlet me first of all copy this entire line.\nAnd before I paste it here, let me do an if\nconfig and find out what is the IP address\nof this particular machine of my master machine.\nThe IP address is one ninety two dot one sixty\neight dot 56.1. Not one. Okay. So let's just\nkeep that in mind and let me paste the command\nover here in place of the master IP address.\nI'm going to specify the IP address of the\nmaster. Okay, but I just read out. It is one.\nNinety two dot one sixty eight dot 56.1 not\none and the Pod Network. I told you that I'm\ngoing to use the Calico pod. So let's copy\nthis network range and paste it here. So all\nmy containers inside this particular pot would\nbe assigned an IP address in this range. Okay.\nNow, let me just go ahead and hit enter and\nthen your cluster would begin to set up. So\nit's going X expected. So it's going to take\na few minutes. So just to hold on there. Okay,\nperfect. My Cuban its master has initialized\nsuccessfully and if you want to start using\nyour cluster, you have to run the following\nas a regular user. Right so we have three\ncommands which is suggested by kubernetes\nitself. And that is actually the same set\nof commands or even I have here. Okay, so\nI'll be running the same commands. This is\nto set up the environment. And then after\nthat we have this token generated, right the\njoining token. So the token along with the\ninlet address of the IP of the master if I\nbasically execute this command in my nodes,\nthen I will be joining this cluster where\nthis is the master, right? So this is my master\nmachine. This is created the cluster. So now\nbefore I do this though, there are a few steps\nin the middle. One of those steps is executing\nall these three commands and after that comes\nbring up the dashboard and setting up the\nboard Network right - the calcio apart. So\nI have to set up the Calico pod and then after\nalso set up the dashboard because if I do\nnot start the And this before the nodes then\nthe node cannot join and I will have very\nsevere complications. So let me first of all\ngo ahead and run these three commands one\nof the other. Okay, since I have the same\ncommands in my text doc. I'll just copy it\nfrom there. Okay, say ctrl-c paste enter.\nOkay, and I'll copy this line. So remember\nyou have to execute all these things as regular\nuser. Okay, you can probably use your pseudo.\nBut yeah, you'll be executing it as your regular\nuser and it's asking me if I want to overwrite\nthe existing whatever is there in this directory,\nI would say yes because I've already done\nthis before but if you are setting up the\ncluster for the first time, you will not have\nthis prompt. Okay. Now, let me go to the third\nline copy this and paste it here. Okay, perfect.\nNow I've ran these three commands as I was\ntold by communities. Now, the next thing that\nI have to do is before I check the node status\nand all these things. Let me just set up the\nnetwork. Okay, the poor Network. So like I\nsaid, this is the Line This is the command\nthat we have to run to set up the Calico Network.\nOkay to all of the notes to join our particular\nNetwork. So it will be copying the template\nof this Calico document file is present over\nhere in this box. Okay. So hit enter and yes,\nmy thing is created. Calcio Cube controllers\ncreated now, I'll just go back here and see\nat this point of time. I can check if my Master's\nconnected to the particular pod. Okay, so\nI can run the cube CDL get loads command Okay.\nThis would say that I have one particular\nresource connected to the cluster. Okay name\nof the machine and this role is master and\nyet the state is ready. Okay, if you want\nto get an idea of all the different pods which\nare running by default then you can do the\ncubes. He'll get pods along with few options.\nOkay should specify these flags and they are.\nAll namespaces and with the flag O specify\nwide. Okay. So this way I get all the pods\nwhich are started by default. Okay. So there\nare different services like at CD4 Cube controllers\nfor the Calico node for the SED Master for\nevery single service. There's a separate container\nand pot started. Okay, so that's what you\ncan understand from this part. Okay, that\nis the safe assumption. Now that we know the\ncluster the cluster is ready and the Masters\npart of a cluster. Let's go ahead and execute\nthis dashboard. Okay. Remember if you want\nto use a dashboard then you have to run this\ncommand before your notes join this particular\ncluster because the moment your notes join\ninto the cluster bring up the dashboard is\ngoing to be challenging and it will start\nthrowing arrows. OK it will say that it's\nbeing hosted on the Node which we do not want\nwe want the dashboard to be on the server\nitself right on the master. So first, let's\nbring the dashboard up. So I'm going to copy\nthis and paste it here. Okay, Enter great.\nCommunities dashboard is created. Now the\nnext command that you have to get your dashboard\nup and running is Cube cereal proxy. Okay\nwith this we get a message saying that it's\nbeing served at this particular port number\nand yes, you are right now there you can if\nyou access Local Host. What was the port number\nagain? Localhost? Yeah one 27.0 or 0.1 is\nlocalhost. Okay followed by port number eight\nthousand one, okay. Yeah, so right now we\nare not having the dashboard because it is\na technically accessed on another URL. But\nbefore we do that, there are various other\nthings that we have to access. I mean we have\nto set okay, because right now we have only\nenabled the dashboard now if you want to access\nthe dashboard you have to first of all create\na service account. Okay. The instructions\nare here. Okay, you have to first of all create\na service account for dashboard. Then you\nhave to say that okay, you are going to be\nthe admin user of this particular service\naccount and we have to enable that functionality\nhere. You should say dashboard admin privileges\nand you should do the cluster binding. Okay,\nthe cluster roll binding is what you have\nto do and after that to join to that poor\nto get access to that particular dashboard.\nWe have to basically give a key. Okay. It's\nlike a password. So we have to generate that\ntoken first and then we can access the dashboard.\nSo again for the dashboard there are these\nthree commands. Well, you can get confused\ndown the line. But remember this is separate\nfrom the above. Okay. So what we did initially\nis rant these three commands which kubernetes.\nOh To execute and after that the next necessity\nwas bring up a pod. So this was that command\nfor the Pod and then this was the command\nfor getting the dashboard up and right after\nthat run the proxy and then on that particular\nport number will start being served. So my\ndad would is being served but I'm not getting\nthe UI here and if I want to get the you--if\nyou create the service account and do these\nthree things, right? So let's start with this\nand then continue. I hope this wasn't confusing\nguys. Okay, I can't do it here. So let me\nopen a new terminal. Okay here I'm going to\npaste it. And yes service account created.\nLet me go back here and execute this command\nwhen I'm doing the role binding I'm saying\nthat my dashboard will should have admin functionalities\nand that's going to be the cluster roll. Okay\ncluster admin, and then the service account\nis what I'm using and it's going to be in\ndefault namespace. Okay. So when I created\nthe account I said that I want to create this\nparticular account in default namespace. So\nthe same thing I'm specifying here. Okay - good\nadmin created good. So let's generate the\nThat is needed to access my dashboard. Okay\nbefore I execute this command, let me show\nyou that once so if you go to this URL, right\n/ API slash V 1 / namespaces. Yep, let me\nshow to you here. Okay. So this is the particular\nURL where you will get access to the dashboard.\nOkay login access to the dashboard localhost\n8001 API V1 namespaces / Cube system / Services\nslash HTTP Cuban eighties. Dashboard: / proxy.\nOkay. Remember this one that is the same thing\nover here and like I told you it's asking\nme for my password. So I would say token but\nlet me go here and hit the command and generate\nthe token. So this is the token amount of\ncopy this from here till here going to say\ncopy and this is what I have to paste over\nhere. All right. So Simon update. Yes, perfect\nwith this is my dashboard, right? This is\nmy Cuban eighties dashboard. And this is how\nit looks like whatever I want. I can get an\noverview of everything. So that is workloads.\nIf I come down there is deployments. I have\noption to see the pods and then I can see\nwhat are the different Services running among\nmost of the other functionalities. Okay. So\nright now we don't have any bar graph or pie\ngraph shown you which clusters up which board\nis up and all because I have not added any\nnode and there is no service out as running\nright. So I mean, this is the outlay of the\ndashboard. Okay, you will get access to everything\nyou want from the left. You can drill down\ninto each of these namespaces or pods on containers\nright now. If you want to deploy something\nthrough the dashboard right through the click\nfunctionality, then you can go here. Okay,\nbut before I create any container or before\nI create any pot or any deployment for that\nmatter of fact, I have to have nodes because\nthese will be running only on nodes. Correct,\nwhatever. I deploy they have done only on\nnode. So let me first open up my node and\nget the node to join this particular cluster\nof mine. Now, if you remember the command\nto join the node got generated at the master\nand correct. So, let me go and fetch that\nagain. So that was the first command that\nwe ran right this one. So, let's just copy\nthis. And paste this one at my node end. This\nis the IP of my master and it will just join\nat this particular port number. Let me hit\nenter. Let's see what happens. Okay, let me\nrun it as root user. Okay? Okay, perfect successfully\nestablished connection with the API server\nand it says this node has joined the cluster\nRight Bingo. So this is good news to me. Now\nif I go back to my master and in fact, if\nI open up the dashboard there would be an\noption of nodes. Right? So initially now,\nit's showing this master Masters. The only\nthing that is part of my nodes, let me just\nrefresh it and you would see that even node\n- 1 would be a part of it. Right? So there\nare two resources to instances one is the\nmaster itself and the other is the node now\nif I go to overview, you will get more details\nif I start my application if I start my servers\nor containers then all those would start showing\nup your right. So it's high time. I start\nshowing you how to deploy it to deployed using\nthe dashboard. I told you this is the functionality.\nSo let's go ahead and click on this create.\nAnd yeah mind you from the dashboard is the\neasiest way to deploy your application, right?\nSo even developers around the world do the\nsame thing for the first time probably they\ncreated using the Amal file. And then from\nthere on they start editing the ml file on\ntop of the dashboard itself or the create\nor deploy the application from here itself.\nSo we'll do the same thing. Go to create an\napp using functionality click functionality.\nYou can do it over here. So let's give a name\nto your application. I'll just say it you\nrecur demo. Okay, let that be the name of\nmy application and I want to basically pull\nan engines image. Okay. I want to launch an\nengine service. So I'm going to specify the\nimage name in my Docker Hub. Okay. So it says\neither the URL of a Public Image or any registry\nor a private image hosted on Docker Hub or\nGoogle container registry. So I don't have\nto specify the URL per se but if you are specifying\na Docker Hub, if you are specifying this image\nto be pulled from Docker Hub, then you can\njust use the name of the image which has to\nbe pulled. That's good enough. Right engine\nto the name and that's good enough and I can\nchoose to set my number of ports to one or\ntwo in that way. I will have two containers\nrunning in the pot. Right? So this is done\nand the final part is actually without the\nfinal part. I can strip it deployed. Okay,\nbut if I deployed then my application would\nbe created but I would just don't get the\nUI. I mean, I won't see the engine service\nso that I get the service. I have to enable\none more functionality here. Okay, the server's\nhere click on the drop down and you will have\nexternal option right? So click on external\nthis would let you access this particular\nservice from your host machine, right? So\nthat is the definition so you can see the\nexplanation here and internal or external\nservice can be defined to map and incoming\nport to a Target Port seen by the container\nso engines which would be hosted on one of\nthe container ports. That could not be accessible\nif I don't specify anything here, but now\nthat I've said access it externally on a particular\nport number then it will get mapped for me\nby default. And jinkx runs on port number\n80. So the target put would be the same but\nthe port I want to expose it to that. I can\nmap into anything I want so I'm going to say\n82. All right, so that's it. It's as simple\nas this this way. Your application is launched\nwith two pods, so I can just go down and click\non deploy and this way my application should\nbe deployed. My deployment is successful.\nThere are two pods running. So what I can\ndo is I can go to the service and try to access\nthe UI, right? So it says that it's running\non this particular port number 82153. So copy\nthis and say localhost 321530 k hit enter\nbingo. So it says welcome to Jenkins and I'm\nbuilding the UI, right? So I'm able to access\nmy application which I just launched through\nthe dashboard. It was as simple as that. So\nthis is one way of for launching or making\na deployment. There are two other ways. Like\nI told you one is using your CLI itself your\ncommand line interface of your draw Linux\nmachine, which is the terminal or you can\ndo it by uploading the yamen file. You can\ndo it by uploading the yamen file because\neverything here is in the form of Yama Lord\nJason. Okay, that's like the default way.\nSo whatever deployment I made right that also\nthose configurations are stored in the form\nof Yaman. So if I click on view or edit yeonggil,\nall the configurations are specified the default\nones have been taken. So I said the name should\nbe a director demo that is what has been.\nOh you're that is the name of my deployment?\nOkay. So kind is deployment the version of\nmy API. It's this one extension /we 1 beta\n1 and then other metadata I have various other\nlists. So if you know how to write a normal\nfile then I think it would be a little more\neasier for you to understand and create your\ndeployment because you will file is everything\nabout lists and maps and these are all files\nare always lists about maps and maps about\nlists. So it might be a little confusing.\nSo probably will have another tutorial video\non how to write a normal file for Cuban its\ndeployment but I would keep that for another\nsession. Okay. Let me get back to this session\nand show you the next deployment. Okay, the\nnext deployment technique, so let me just\nclose this and go back to overview. Okay,\nso I have this one deployment very good. Okay.\nSo let's go to this. Yeah. So what I'll do\nis let me delete this deployment. Okay our\nlet me at least scale it down because Don't\nwant too many resources to be used on my node\nalso because I will have to show two more\ndeployments. Right so I have reduced my deployment\nover here. And I think it's be good enough.\nGreat. So let's go back to the cube set up\nthis document of mine. So this is where we're\nat. Right we could check our deployments we\ncould do all these things. So one thing which\nI might have forgotten is showing the nodes\nwhich are part of the cluster of right. So\nthis is my master. Yeah, so I kind of forgot\nto show you this Cube CDL get node. So the\nsame view that you got on your dashboard you\nget it here. Also, I mean, these are the two\nnodes and this is the name and all these things.\nOkay, and I can also do the cube CDL get pods\nwhich would tell me all the pods that are\nrunning under a car. Demo is the pot which\nI have started. Okay. This is my God. Now\nif I specify with the other flags right with\nall namespaces and with wide then all the\ndefault pause which get created along with\nyour kubernetes cluster. Those will also get\ndisplayed. Let me show you that also just\nin case Okay. Yeah. So this is the one which\nI created and the other ones are the default\nof deployments that come with few minutes\nthe moment you install set up the cluster\nthese get started. Okay, and if you can see\nhere this particular that this particular\na dareka demo, which I started is running\non my Node 1 along with this Cube proxy and\nthis particular Calico node. So Easter services\nare running on master and node. And this one\nis running only on my Node 1 right you can\nsee this right the Calico node runs both on\nmy node over here and on my master and similarly\nthe queue proxy runs on my node here and on\nmy master. So this is the one that's running\nonly on my Note. Okay, so getting back to\nwhat I was about to explain you. The next\npart is how to deploy anything through your\nterminal now to deploy your same engines application\nthrough your CLI. We can follow these set\nof commands Okay, so there are a couple of\nsteps here. First of all to create a deployment.\nWe have to run this command. OK Cube cereal\ncreate deployment and drinks and then the\nname of the image that you want to create.\nThis is going to be the name of your deployment.\nAnd this is the name of the image which you\nwant to use so control C and let me go to\nthe terminal here on my master. I'm executing\nthis command Cube cereal create a deployment.\nOkay. So the deployment engines is created\nif you want we can verify that also over here\nso under deployments right now, we have one\nentry in the array card Mo and yes now you\ncan see there are two engines and arica demo.\nSo this is pending. I mean, it would take\na few seconds. So in the meanwhile let this\ncontinue with the other steps. Once you have\ncreated a deployments, you have to create\nthe service. Okay after say which is the node\nPort which can be used to access that Particular\nservice, right because deployment of just\na deployment you're just deploying your container\nif you want to access it. Like I told you\nearlier from your local from your host machine\nall those things. Then you have to enable\nthe node board. If you want to get your deployments\non your terminal you can run this command\nCube CDL get deployments. Okay engines also\ncomes up over here, right? If you want more\ndetails about your diploma. You can use this\ncommand Cube CDL describe you get like more\ndetails about this particular development\nas to what is the name? What is the port number?\nIt's sort of siding on all these things. Okay.\nLet's not complicate this you can probably\nuse that for understanding later. So once\nthat is done, the next thing that you have\nto do is you have to create the service on\nthe nodes you have created the deployment,\nbut yes create the service on the nodes using\nthis particular command Cube cereal. Create\nservice and say note Port. Okay, this means\nyou want to access it at this particular Point\nnumber you're doing the port mapping 80 is\n280. Okay, container Port 80 to the internal\nnode, Port 80. Okay. So service for engines\nis created. And if you want to check which\nof the diplomas are running in which nodes\nyou can run the command Cube City L. Get SVC.\nOkay, this would tell you okay, you have two\ndifferent services at a record Mo and engines\nand they are anyone these port numbers and\non these nodes, right? So communities is the\none which God created automatically enter\na car. Demo is the one which I created. Okay\nengines is again, the one which I created\ncommunities comes up on its own just specifying\nto you because this is a container for the\ncluster itself. Okay. So let's just go back\nhere and then yes and similarly if you want\nto delete a deployment then you can just use\nthis command Cube CDL delete deployment followed\nby the name of the deployment, right? It's\npretty simple. You can do it this way. Otherwise\nfrom the dashboard. You can delete it like\nhow I showed you all your click over here\nand then you can click on delete and then\nif you want to scale you can scale it. So\nboth of these deployment of mine have one\nporridge, right? So let's do one thing. So\nlet's just go to the engines service. And\nhere let's try accessing this particular service.\nLocal Host. Okay, perfect here. Also it says\nwelcome to engines right. So with this you\ncan understand that the port mapping worked\nand by going to service you will get to know\non which port number you can access it on\nyour host machine, right? So this is the internal\ncontainer Port map to this particular Port\nof mine. Okay. Now if one if not for this\nif this doesn't work, you can also use the\ncluster IP for the same thing trust ripe is\ngoing to basically the IP using which all\nyour containers access each other, right?\nSo if your body will have an IP. So whatever\nis running in their containers that will again\nbe accessible on your cluster I be so so it's\nthe same thing right? So let me just close\nthese pages and that's how you deploy an application\nthrough your CLI. So this comes to our last\npart of this video, which is nothing but deployment\nvia Yaman file. So for again deployment where\nI am and file you have to write your yawm\nAl code, right? You have to either write your\nyawm Al code or your Json code, correct? So\nthis the code which I have written. Just in\nJama format. And in fact, I already have it\nin my machine here. So how about I just do\nan LS? Yeah, there is deployment at Dotty.\nAlright, so let me show you that so this is\nmy yamen file. Okay. So here I specify various\nconfigurations similar to how I did it using\nthe GUI or Rider reducing the CLI it something\nsimilar gesture. I specify everything and\none particular file here. If you can see that.\nI have a specify the API version. Okay, so\nI'm using extensions dot a slash b 1 or beta\n1. Okay. I can do this or I can just simply\nspecify version 1 I can do either of those\nand then the next important line is the kind\nso kind is important because you have to specify\nwhat kind of file it is. Is it a deployment\nfile or is it for a pod deployment or is it\nfor your container deployment or is it the\noverall deployment? What is it? So I've said\ndeployment okay, because I want to deploy\nthe containers also along with the pot. So\nI'm saying deployment in case you want to\ndeploy only the pod which you realistically\ndon't need to. Okay. Why would it just deploy\nup? But in case if you want to deploy a pot\nthen you can go ahead and write Port here\nand then just specify what are the different\ncontainers. Okay, but in my case, it's a complete\ndeployment right with the pods and the services\nand the containers. So I will go ahead and\nwrite other things and under the metadata.\nI will specify the name of my application.\nI can specify what I want. I can put my name\nalso over here like Warden, okay, and I can\nsave this and then the important part is this\nback part. So here is where you set the number\nof replicas. Do you remember I told you that\nthere's something called has replication controller\nwhich controls the number of ports that you\nwill be running. So it is that line. So if\nI have a set to over here, it means that I\nwill have two pods running of this particular\napplication of Verdun. Okay, what exactly\nam I doing here under spec AB saying that\nI want to Containers so I have intended or\ncontainer line over here and then I have two\ncontainers inside. So the first container\nwhich I want to create is of the name front\nend. Okay, and I'm using an engines image\nand similarly. The port number that this would\nbe active on is container Port 80. All right,\nand then I'm saying that I want a second container\nand the container for this could I could rename\nthis to anything? I can say back end and I\ncan choose which image I want. I can probably\nchoose a httpd image also. Okay, and I can\nagain say the port's that this will be running\non I can say the container Port that it should\nrun on is put number is 88 right? So that's\nhow simple it is. All right. And since it's\nyour first video tutorial the important takeaways\nfrom this yawm Al file configuration is that\nunder specular have to specify the containers?\nAnd yes everything in Json format with all\nthe Intel dacians and all these things. Okay,\neven if you have an extra space anywhere over\nhere, then you are real file would throw an\ninvalid error. So make sure that is not there.\nMake sure you specify the containers appropriately\nif it's going to be just one container. Well\nand good it's two containers. Make sure you\nintend it in the right way and then you can\nspecify the number of PODS. You want to give\na name to your deployment and Mainly established\nread these rules. Okay. So once you're done\nwith this just save it and close the yamen\nfile. Okay. So this is your deployment djamel.\nNow, you can straight away upload this table\nfile to your Kubernetes. Okay, and that way\nyour application would be straight with deployed.\nOkay. Now the command for that is Cube cereal\ncreate - F and the name of the file. Okay.\nSo let me copy this and then the name of my\nfile is deployment or djamel. So let me hit\nenter. Perfect. So my deployment the third\ndeployment vardhan is also created right so\nwe can check our deployments from the earlier\ncommand. That is nothing but Cube CDL get\ndeployments. Okay. It's not get deployment\naudiometer. Sorry. It's get deployments. And\nas you can see here, there is an Adder a guard\nMo there is engines and there is Verdun and\nthe funny thing which you should have noticed\nis that I said, I want to replicas right to\npods. So that's why the desire is to currently\nwe have to up to date is one. So okay update\nis to brilliant available is 0 because let's\njust give it a few seconds in 23 seconds.\nI don't think the board would have started.\nSo let's go back to our dashboard and verify\nif there's a third deployment that comes up\nover here. Okay, perfect. So that's how it's\ngoing to work. Okay, so probably is going\nto take some more time because the containers\njust restarting. So let's just give it some\nmore time. This could well be because of the\nfact that my node has very less resource,\nright? So I have too many deployments that\ncould be the very reason. So what I can do\nis I could go ahead and delete other deployments\nso that my node can handle these many containers\nand pods right? So let me delete this particular\ndeployment and Rings deployment and let me\nalso delete this Adder a car demo deployment\nof mine. Okay. Now let's refresh and just\nwait for this to happen. Okay. So what I can\ndo instead is I could have a very simple deployment\nright? So let me go back to my terminal and\nlet me delete my deployment. Okay, and let\nme redeployed again, so Cube CDL delete deployment.\nOkay, so what then this deployment has been\ndeleted? Okay. So let's just clear the screen\nand let's do G edit of the yamen file again\nand here let's make things simpler. Let me\njust delete this container from here. Let\nme save this right and close this now. Let\nme create a deployment with this. Okay. So\nwhat then is created, let me go up here and\nrefresh. Let's see what happens. Okay. So\nthis time it's all green because it's all\nhealthy. My nodes are successful or at least\nit's going to be successful container creating.\nPerfect. So two parts of mine are up and running\nand both my paws are running right and both\nare running on Node 1 pause to or of to those\nare the two deployments and replica set and\nthen Services, right? So it's engines which\nis the basement which is being used. So well\nand good. This is also working. So guys. Yeah,\nthat's about it. Right. So when I try to upload\nit, maybe there was some other error probably\nin the arm will file they could developments\nfrom small mistake or it could have been because\nmy known had too many containers running those\ncould have been the reasons. But anyways,\nthis is how you deployed through your yamen\nfile. All right, so that kind of brings us\nto the end of this session where I've showed\nyou a demonstration of deploying your containers\nin three different ways CLI dashboard and\nyour yamen files. Hey everyone, this is Reyshma\nfrom Edureka. And today we'll be learning\nwhat is ansible. First,let us look at the\ntopics that we'll be learning today. Well,\nit's quite a long list. It means we'll be\nlearning a lot of things today. Let us take\na look at them one by one. So first we'll\nsee the problems that were before configuration\nmanagement and how configuration management\nhelp to solve. It will see what ansible is\nand the different features of ansible after\nthat. We'll see how NASA is implemented and\ncivil to solve all their problems. After that.\nWe'll see how we can use ansible for orchestration\nprovisioning configuration management application\ndeployment and security. And in the end, we'll\nwrite some ansible playbooks to install lamp\nstack on my node machine and host your website\nin my note machine. Now before I tell you\nabout the problems, let us first understand\nwhat configuration management actually is.\nWell configuration management is actually\nthe management of your software on top of\nyour Hardware. What it does is that it maintains\nthe consistency of your product based on its\nrequirements its design and its physical and\nfunctional attributes. Now, how does it maintain\nthe consistency it is because the configuration\nmanagement is applied over the entire life\ncycle of your system. And hence. It provides\nyou with a very good visibility and control\nwhen I say visibility. It means that you can\ncontinuously check and monitor the performances\nof all your assistants. So if at any time\nthe performance of any of his system is degrading\nthe configuration management system will notify\nyou and hence. You can prevent errors before\nit actually occurs and by control, I mean\nthat you have the power to change anything.\nSo if any of your servers failed you can reconfigure\nit again to repair it so that it is up and\nrunning again, or you can even replace the\nserver if needed and also the configuration\nmanagement system holds the entire historical\ndata of your infrastructure it DOC. Men's\nall the snapshots of every version of your\ninfrastructure. So overall the configuration\nmanagement process facilitates the orderly\nmanagement of your system information and\nsystem changes so that it can use it for beneficial\npurposes. So let us proceed to the next topic\nand see the problems before configuration\nmanagement and how configuration management\nsolved it and with that you'll understand\nmore about configuration management as well.\nSo, let's see now, why do we need configuration\nmanagement now, the necessaries behind configuration\nmanagement was dependent upon a certain number\nof factors and certain number of reasons.\nSo let us take a look at them one by one.\nSo the first problem was managing multiple\nservers now earlier every system was managed\nby hand and by that, I mean that you have\nto login to them via SSH make changes and\nthen log off again. Now imagine if a system\nadministrator would have to make changes in\nmultiple number of servers. You'll have to\ndo this task of logging in making changes\nand longing of again and again repeatedly,\nso this would take up a lot of time and there\nis no time left for the system administrators\nto monitor the performances of the system\ncontinuously safe at any time any of the servers\nwould fail it took a lot of time to even detect\nthe faulty server and to even more time to\nrepair it because the configuration scripts\nthat they wrote was very complex and it was\nvery hard to make changes on to them. So after\nconfiguration management system came into\nthe picture what it did is that it divided\nall the systems in my infrastructure according\nto their dedicated tasks their design or architecture\nand the organize my system in an efficient\nway. Like I've proved my web servers together\nmy database servers together application servers\ntogether and this process is known as baselining.\nNow. Let's for an example say that I wanted\nto install lamp stack in my system and lamp\nstack is a software bundle where L stands\nfor Linux a for Apache and for MySQL and P\nfor PHP. So I need this different software's\nfor different purposes. Like I need Apache\nserver to host my web pages and it PHP for\nmy web development. I need Linux as my operating\nsystem and MySQL as my data definition language\nor data manipulation language since now all\nthe systems in my infrastructure is Baseline.\nI would know exactly where to install each\nof the software's. For example, I'll use Apache\nas my web server here for database. I will\ninstall the MySQL here and also begin easy\nfor me to monitor my entire system. For example,\nif my web pages are not running I would know\nthat there's something wrong. With my web\nservers, so I'll go check in here. I don't\nhave to check the database servers and application\nservers for that. Similarly. If I'm not able\nto insert data or extract data from my database.\nI would know that something is wrong with\nmy database servers. I don't need to check\nthese too for that matter. So what configuration\nmanagement system did with baselining is that\nit organized mess system in an efficient way\nso that I can manage and monitor all my servers\nefficiently. Now, let us see the second problem\nthat we had which were scaling up and scaling\ndown. See nowadays, you can come up with requirements\nat any time and you might have to scale up\nor scale down your systems on the Fly and\nthis is something that you cannot always plan\nahead and scaling up. Your infrastructure\ndoesn't always mean that you just buy new\nhardware and just place them anywhere. Haphazardly.\nYou cannot do that. You also need to provision\nand configure this new machines properly.\nSo with configuration management system, I've\nalready got my infrastructure baselined so\nI know exactly how this new machines are going\nto work according to their dedicated task\nand where should I actually place them and\nthe scripts that configuration management\nuses are reusable so you can use the same\nscripts that you use to configure your older\nmachines to configure your new machines as\nwell. So let me explain it to you with an\nexample. So let me explain it to you with\nan example. Let's say that if you're working\nin an e-commerce website and you decide to\nhold a mega sale. New Year Christmas sale\nor anything? So it's obvious that there is\ngoing to be a huge rise in the traffic. So\nyou might need more web servers to handle\nthat amount of requests and you might even\nneed a load balancers or maybe to to distribute\nthat amount of traffic onto your web servers\nand these changes however need to be made\nat a very short span of time. So after you've\ngot the necessary Hardware, you also need\nto provision them accordingly and with configuration\nmanagement, you can easily provision this\nnew machines using either recipes or play\nbooks or any kind of script that configuration\nmanagement uses. And also after the sale is\nover you don't need that many web servers\nor a load balancer so you can disable them\nusing the same easy scripts as well and also\nscaling down is very important when you are\nusing cloud services when you do not need\nany of those machines, it's no point in keeping\nthem. So you have to scale down as well because\nyou have to reconfigure your entire infrastructure\nas well and with configuration management.\nIt is a very easy. Anything to Auto scale\nup and scale down your infrastructure. So\nI think you all have understood this problem\nand how configuration management salted so\nlet us take a look at the third problem. Third\nproblem was the work velocity of the developers\nwere affected because the system administrators\nwere taking time to configure the server's\nafter the developers have written a code.\nThe next job is to deploy them on different\nservers like test servers and production servers\nfor testing it out and releasing it but then\nagain every server was managed by hand before\nso the system administrators would again have\nto do the same thing log in to its server\nconfigure them properly by making changes\nand do the same thing again to all servers.\nSo this was taking a lot of time now before\ndevops game you the picture there was already\nagility in the developers end for which they\nwere able to release new software's very frequently,\nbut it was taking a lot of time for the system\nadministrators to configure the servers for\ntesting so the developers would have Wait\nfor all the test results and this highly hamper\nthe word velocity of the developers. But after\nthere was configuration management the system\nadministrator had got access to a configuration\nmanagement tool which allowed them to configure\nall the servers at one go. All they had to\ndo is write down all the configurations and\nwrite down the list of all the software's\nthat there need to provision this servers\nand deploy it on all of the servers at one\ngo. So now agility even came into the system\nadministrators and as well. So now after configuration\nmanagement the developers and the system administrators\nwere finally able to work in the same base.\nNow, this is how configuration management\nsolve the third problem now, let us take a\nlook at the last problem. Now the last problem\nwas rolling back in today's scenario. Everyone\nwants a change and you need to keep making\nchanges frequently because customers will\nstart losing interest if things stay the same\nso you need to keep releasing new features\nto upgrade your application even giants like\nAmazon and Facebook. They do it now and then\nand still they're unsure if the users are\ngoing to like it or not. Now imagine if the\nusers did not like it they would have to roll\nback to the previous version again, so, let's\nsee how it creates a problem. Now before there\nwas configuration management. Let's say you've\ngot the old version which is the version one\nwhen you're upgrading it you're changing all\nthe configurations in the production server.\nYou're deleting the old configurations completely\nand deploying the new version now if the users\ndid not like it you would have to reconfigure\nThis Server again with the old configurations\nand that will take up a lot of time. So application\nis going to be Down for that amount of time\nthat you need for reconfiguring the server\nand this might create a problem. But when\nyou're using configuration management system,\nas you know that it documents every version\nof your infrastructure when you're upgrading\nit with configuration management, it will\nremove the configurations of the older version,\nbut it will be well documented. It will be\nkept there and then the newer version is deployed.\nNow if the users did not like it this time,\nthe older of the configuration version was\nalready documented. So all you have to do\nis just switch back to the old version and\nthis won't take up any time and you can upgrade\nor roll back your application in zero downtime\nzero downtime means that your application\nwould be down for zero time. It means that\nthe users will not notice that your application\nwent down and you can achieve it seamlessly\nand this is how configuration management system\nsolved all the problems that was before. So\nguys. I hope that if all understood how Management\ndid that let us now move on to the next topic?\nNow the question is how do I incorporate configuration\nManagement in my system? Well, you do that\nusing configuration management tools. So let's\ntake a look at all the available configuration\nmanagement tools. So here I've got the four\nmost popular tools that is available in the\nmarket right now. I've got ansible and Saul\nstack which are push-based configuration management\ntool by push-based. I mean that you can directly\npush all those configurations on to your node\nmachines directly while chef and puppet are\nboth pull based configuration management tools.\nIt means that they rely on a central server\nfor configurations the pull all the configurations\nfrom a central server. There are other configuration\nmanagement tools available in the market to\nbut but these four are the most popular ones.\nSo now let's know more about ansible now ansible\nis a configuration management tool that can\nbe used for provisioning orchestration application\ndeployment Automation and it's a push based\nconfiguration management tool. Like I told\nyou what it does is that it automate your\nentire it infrastructure and gives you large\nproductivity gains and it can automate pretty\nmuch anything. It can automate your Cloud\nyour networks your servers and all your it\nprocesses. So let us move on to the next topic.\nSo now let us see the features of ansible.\nThe first feature is that it's very simple.\nIt's simple to install and setup and it's\nvery easy to learn because ansible Play books\nare written in a very simple data serialization\nlanguage, which is known as Gamal and it's\npretty much like English. So anyone can understand\nthat and it's very easy to learn next feature\nbecause of which ansible is preferred over\nother configuration management tools is because\nit's Agent kallus it means that you do not\nneed any kind of Agents or any kind of plan\nsoftware's to manage your node machines. All\nyou have to do is install ansible in your\ncontrol machine and just make an SSH connection\nwith your nodes and start pushing configurations\nright away. The next feature is that it's\nvery powerful, even though you call ansible\nsimple and it does not require any agent.\nIt has the capabilities to model very complex\nit workflows and it comes with a very interesting\nfeature, which is called the batteries included.\nIt means that you've got everything that you\nalready need and in ansible it's because it\ncomes with more than 750 inbuilt modules,\nwhich you can use them for any purpose in\nyour project. And it's very efficient because\nall the modules that ansible comes with they\nare extensible. It means that you can customize\nthem according to your needs and for doing\nthat you do not need to use the same programming\nlanguage that it was originally written in\nyou can choose any kind of programming language\nthat you're comfortable with and then customize\nthose modules for your own use. So this is\nthe power and Liberty that ansible gives you\nnow, let us take a look at the case study\nof NASA. What were the problems that NASA\nwas facing and how ansible solved all those\nproblems? Now NASA is an organization that\nhas been sending men to the Moon. They are\ncarrying out missions and Mars and they're\nlaunching satellites now and then to monitor\nthe Earth and not just the Earth. They're\neven monitoring other galaxies and other planets\nas well. So you can imagine the kind and the\namount of data that NASA might be dealing\nwith but all the applications were in a traditional\nHardware based Data Center and they wanted\nto move into a cloud-based environment because\nthey wanted better agility and they wanted\nbetter adaptive planning for that. And also\nthey wanted to save costs because a lot of\nmoney was spent on just the maintenance of\nthe hardware and also they wanted more security\nbecause NASA is a government organization\nof the United States of America and obviously,\nthey wanted more security because NASA is\na government organization of the United States\nof America and the hold a lot of confidential\ndetails as well for the government. So they\njust Cannot always rely on the hardware to\nstore all This Confidential files, they needed\nmore security because if at any time the hardware\nfails, they cannot afford to lose that data\nand that is why they wanted to move all their\n65 applications from a hardware environment\nto a cloud-based environment. Now, let us\ntake a look. What was the problem now for\nthis migration of all the data into a cloud\nenvironment. They contacted a company called\nin Frozen now in Frozen is a company who is\na cloud broker and integrator to implement\nsolutions to meet needs with security. So\nin phase and was responsible for making this\ntransition and NASA wanted to make this transition\nin a very short span of time. So all the applications\nwere migrated as it is into the cloud environment\nand because of this all the AWS accounts and\nall the virtual private clouds that was previously\ndefined they all got accumulated in a single\ndata space and this It up a huge chunk of\ndata and NASA had no way of centrally managing\nit and even simple tasks like giving a particular\nsystem administrator access rights to a particular\naccount. This became a very tedious job with\nNASA wanted to automate and to and deployment\nof all their apps and for that they needed\na management system. So this was the situation\nwhen NASA moved into the cloud so you can\nsee that all those AWS accounts and virtual\nprivate cows. They got accumulated and made\na huge chunk of data and everyone was excessing\ndirectly to it. So there is a problem in managing\nthe credentials for all the users and the\ndifferent teams, but NASA needed was divided\nup all their inventories all the resources\ninto groups and number of hosts. And also\nthey wanted to divide up all the users in\ntwo different teams and give each team different\ncredentials and permissions. And also if you\nlook in the more granular level each user\nin each team could also have different credentials\nand permissions. Let's say that you want to\ngive the team leader of a particular team\naccess to some kind of data what you don't\nwant the other users in the team to access\nthat data. So also NASA wanted to Define different\ncredentials for each individual member as\nwell the wanted to divide up all the data\naccording to the projects and jobs also now,\nso I wanted to move from chaos into a more\norganized Manner and for that they adopted\nansible tower now ansible Tower is ansible\nin and more enterprise-level ansible Tower\nprovides you with the dashboard which provides\nall the status summary of all the hosts and\njob and simple Tower is a web-based interface\nfor managing your organization. It provides\nyou with a very easy to use user interface\nfor managing quick deployments and monitoring\nall the configurations. So, let's see what\nanswer build our did it has the credential\nmanagement system which could give different\naccess permission to each individual user\nand Teams and also divided up the user into\nteams and single individual users as well\nand it has a job assignment system and you\ncan also assign jobs using ansible tower X\nsuppose. Let's say that you have assigned\njob one to a single user job to another single\nuser while job to could be assigned to a particular\nteam. Similarly. The whole inventory was also\nmanaged all the servers. Let's say dedicated\nto a particular mission was grouped together\nall the host machines and other systems as\nwell Sansa built our help NASA to organize\neverything now, let us take a look at the\ndashboard that ansible Tower provides us.\nSo this is the screenshot of the dashboard\nat a very initial level. You can see right\nnow there is zero host. Nothing is there but\nI'm just showing you what ansible tower provides\nyou so on the top you can check all the users\nand teams. You can manage the credentials\nfrom here. You can check your different projects\nand inventories. You can make job templates\nand schedule job. As well. So this is where\nyou can schedule jobs and provide every job\nwith a particular ID so that you can track\nit. You can check your job status here whether\nyour job was successful or failed and since\nansible Tower is a configuration management\nsystem. It will hold the historical data as\nwell. So you can check the job statuses of\nthe past month or the month before that. You\ncan check the host status as well. You can\ncheck how many hosts are up and running you\ncan see the host count here. So this dashboard\nof ansible tower provides you with so much\nease of monitoring all your systems. So it's\nvery easy to use ansible to our dashboard\nanyone in your company anyone can use it because\nit's very user-friendly now, let us see the\nresults that NASA achieved after it has used\nansible tower now updating nasa.gov used to\ntake one hour of time and after using ansible\nit got down to just five minutes security\npatching updates where a multi-day process\nand now it requires only 45 minutes the provisioning\nof os accounts can be done in just 10 minutes\nearlier the application Stack Up time required\none to two hours and now it's done in only\n10 minutes. It also achieved a near real-time\nRAM and this monitoring and baselining all\nthe standard Amazon machine image has this\nused to be a one-hour manual process. And\nnow you don't even need manual interference\nfor that. It became a background invisible\nprocess. So you can see that how ansible has\ndrastically changed the overall management\nsystem of NASA. So guys, I hope that if understood\nhow I answered will help NASA. If you have\nany question, you may ask me at any time on\nthe chat window. So let us proceed to the\nnext topic. Now this was all about how others\nhave used ansible. So now let us take a look\nat the ansible architecture so that we can\nunderstand more about ansible and decide how\nwe can use ansible. So this is the overall\nansible architecture. I've got the answer.\nAutomation engine and I've got the inventory\nand a Playbook inside the automation engine.\nI've got the configuration management database\nhere and host and this configuration management\ndatabase is a repository that acts as a data\nwarehouse for all your it installations. It\nholds all the data relating to the collection\nof your all it assets and these are commonly\nknown as configuration items and it also holds\nthe data which describe the relationships\nbetween such assets. So this is a repository\nfor all your configuration management data\nand here I've got the ansible automation engine.\nI've got the inventory year and inventory\nis nothing but the list of all the IP addresses\nof all my host machines now as I told you\nhow to use configuration management you use\nit with the configuration management tool\nlike ansible but how do you use ansible? Well,\nyou do that using playbooks. And playbooks\ndescribe the entire workflow of your system.\nInside playbooks. I've got modules apis and\nplugins now modules are the core files now\nplay books contain a set of place which are\na set of tasks and inside every task. There\nis a particular module. So when you run a\nplay book, it's the modules that actually\nget executed on all your node machines. So\nmodules are the core files and like I told\nyou before ansible already comes with inbuilt\nmodules, which you can use and you can also\ncustomize them as well as comes with different\nCloud modules database modules. And don't\nworry. I'll be showing you how to use those\nmodules in ansible and there are different\napis as well. Well API is an answerable are\nnot meant for direct consumption. They're\njust there to support the command line tools.\nFor example, they have the python API and\nthese apis can also be used as a transport\nfor cloud services, whether it's public or\nprivate you can use it then I've got plugins\nnow plug in Our special kind of module that\nallowed to execute ansible task as job Bill\nstep and plugins are pieces of code that augment\nthe ansible score functionality and ansible\nalso comes with a number of Handy plugins\nthat you can use. For example, you have action\nplugins cash plugins callback plugins and\nalso you can create plugins of your own as\nwell. Let me tell you how exactly different\nit is from a module. Let me give you the example\nof action plug-in now action plug in our front-end\nmodules and what it does is that when you\nstart running a Playbook something needs to\nbe done on the control machine as well. So\nthis action plugins trigger those action and\nexecute those tasks in the controller machine\nbefore calling the actual modules that are\ngetting executed in the Playbook. And also\nyou have a special kind of plug-in called\nThe Connection plug in which allows you to\nconnect to the docker containers in your note\nmachine and many more and finally I have this\nhost machine that is Elected via SSH and this\nwas machines could be either windows or Linux\nor any kind of machines. And also let me tell\nyou that it's not always needed to use SSH\nfor connection. You can use any kind of network\nAuthentication Protocol you can use Kerberos\nand also you can use the connection plugins\nas well. So this is fairly a very simple ansible\narchitecture. So now that you've understood\nthe architecture, let us write a play book\nnow now let me tell you how to write a play\nbook and playbooks and ansible are simple\nfiles written in HTML code and yambol is a\ndata serialization language. You can think\nof data serialization language as a translator\nfor breaking down all your data structure\nand serialize them in a particular order which\ncan be reconstructed again for later use and\nyou can use this reconstructed data structure\nin the same environment or even in a different\nenvironment. So this is the control machine\nwhere ansible will be installed and this is\nwhere you'll be writing your playbooks. Let\nme show you the structure of how to write\na play book. However, play book starts with\nthree dashes on the top. So first you have\nto mention the list of all your host machines\nhere. It means where do you want this Playbook\nto run? Then you can mention variables by\ngathering facts, then you can mention the\ndifferent tasks that you want. Now remember\nthat the task get executed in the same order\nthat you write them. For example, if you want\nto install software a first and then softer\nbeef later on. So make sure that the first\ntask would be install software and the next\ntask would be install software be and then\nI've got handlers at the bottom. The handlers\nare also tasks but the difference is in order\nto execute handlers. You need some sort of\ntriggers in the list of tasks. For example,\nwe use notify. I'll show you an example now.\nOkay, let me show you an example of Playbook\nso that you can relate to this structure.\nSo this is an example of an ansible Playbook\nto install Apache like I told It starts with\nthree dashes on the top remember that every\nlist starts with a dash in the front or a\n- here. I've only mentioned just the name\nof one group. You can mention the name of\nseveral groups where you want to run your\nplaybook. Then I've got the tasks you give\na name for the task which is install Apache\nand then you use a module here. I'm using\nthe app module to download the package. So\nthis is the syntax of writing the app module.\nSo you give the name of the package which\nis Apache to update cache is equal to yes.\nSo it means that it will make sure that app\nget is already updated in your note machine\nbefore it installs the Apache 2 and you mentioned\nState equal to latest. It means that it will\ndownload the latest version of Apache 2. And\nthis is the trigger because I'm using handlers\nyou're right and the Handler here is to restart\nApache and I'm using the service module here\nand the name of the software that I want to\nrestart is Apache. And state is able to restart\nit. So notify have mentioned that there is\ngoing to be a Handler whose job would be to\nrestart Apache 2 and then the task in the\nHandler would get executed and it will restart\nApache 2. So this is a simple Playbook and\nwill also be writing similar kind of playbooks\nlater on the Hands-On part. So you'll be learning\nagain. So if it's looking a little gibberish\nfor you will be doing and that on the Hands-On\npart so then it will clear all your doubts.\nSo now let us see how to use ansible and understand\nits applications so we can use ansible for\napplication deployment configuration management\nsecurity and compliance provisioning and orchestration.\nSo let us take a look at them one by one first.\nLet us see how we can use ansible for orchestration.\nWell orchestration means let's say that we\nhave defined configurations for each of my\nsystems, but I also need to make sure how\nthis configurations will interact with each\nother. So this is the process of Orchestration\nbut I decide that how the different configurations\non different of my systems and my infrastructure\nwould interact with each other in order to\nmaintain a seamless flow of my application\nand your application deployments need to be\norchestrated because you've got a front-end\nand back-end Services. You've got databases\nyou've got monitoring networks and storage\nand each of them has their own role to play\nwith with their configuration and deployment\nand you cannot just run all of them is ones\nand expect that the right thing happens. So\nwhat you need is that you need an orchestration\ntool that all this task happen in the proper\norder that the database is up before the backend\nserver and the front end server is removed\nfrom the load balancer before it gets upgraded\nand that your networks would have their proper\nvlans configured. So this is what ansible\nhelps you to do. So, let me give you a simple\nexample so that you can understand it better.\nLet's say that I want to host a website on\nmy node machines. And this is precisely what\nwe're going to do later on the Hands-On part.\nSo first and in order to do that first, I\nhave to install the necessary software, which\nis the lamp stack and after that I have to\ndeploy all the HTML and PHP files on the web\nserver. And after that I'll be gathering some\nkind of information from my web pages that\nwill go inside my database server. Now, if\nyou want to perform these all tasks, you have\nto make sure that the necessary software is\ninstalled first now, I cannot deploy the HTML\nPHP files on the web servers. If I don't have\na web servers if a party is not installed.\nSo this is orchestration where you mention\nthat the task that needs to be carried out\nbefore and the task that needs to be carried\nout later. So this is what ansible playbooks\nallow you to do. Now. Let's see what provisioning\nis like provisioning in English means to provide\nwith something that is needed. It is same\nin case of ansible it. That ansible will make\nsure that all the necessary software is that\nyou need for your application to run is properly\ninstalled in each of the environments of your\ninfrastructure. Let us take a look at this\nexample here to understand what provisioning\nactually is. Now if I want to provision a\npython web application that I'm hosting on\nMicrosoft Azure and Microsoft is your is very\nsimilar to AWS and it is also a cloud platform\non which you can build up all your applications.\nSo let's say so now if I want to host my if\nI'm developing a python web application for\ncoding I would need the Microsoft is your\ndocument database. I would need Visual Studio\nor need to install python also and some kind\nof software development kit and different\napis for that so ansible so you can list out\nthe name of all the software development kits\nand all this necessary software's that you\nwill require for coding this web that it would\nrequire in order to develop your web application.\nSo you can list out all the necessary software\nis that you'd be needing in ansible playbook\nin order to develop your web application and\nfor testing your code out you will again need\nMicrosoft Azure document database you would\nagain note visual studio and some kind of\ntesting software. So again, you can list out\nall the software's and ansible Playbook and\nit will provision your testing environment\nas well. And it's the same thing while you're\ndeploying it on the production server as well\nand Sybil will provision your entire application\nat all stages at coding stage a testing and\nat the production stage also, so guys, I hope\nyou've understood what provisioning is let\nus move on to the next topic and see how we\ncan achieve configuration management with\nansible now ansible configurations are simple\ndata descriptions of your infrastructure,\nwhich is both human readable and machine possible\nand app server requires. Nothing more than\nan SSH key in order to start managing systems\nand you can start managing them without installing.\nAny kind of agent or client software? So you\ncan avoid the problem of managing the management\nwhich is very common in different automation\nsystems. For example, I've got my host machines\nand Apache web servers installed in each of\nthe host machines. I've also got PHP and MySQL\ninstalled if I want to make configuration\nchanges if I want to update a party and update\nmy MySQL I can do it directly. I can push\nthose new configuration details directly onto\nmy host machines or my note machines and my\nserver and you can do it very easily using\nansible playbooks. So let us move on to the\nnext topic and let us see how application\ndeployment has been made easier with ansible\nnow ansible is the simplest way to deploy\nyour applications. It gives you the power\nto deploy all your multi-tier applications\nwhere reliably and consistently and you can\ndo it all from a common framework. You can\nconfigure all the needed Services as well\nas push application artifacts from one system.\nWith ansible you can write Play books which\nare the description of the desired state of\nyour system and it is usually kept in the\nsource control sensible. Then does all the\nhard work for you to get your systems to the\nstate. No matter what state they are currently\nin and play books make all your installations\nall your upgrades for day-to-day management,\nvery repeatable. So with ansible you can write\nPlay books which are the descriptions of the\ndesired state of the systems. And these are\nusually kept in the source control and simple\nthen does all the hard work for you to get\nall your systems in the desired State no matter\nwhat state they're currently in and playbooks\nmake all your installations your upgrades\nand for all your day-to-day Management in\na very repeatable and reliable way. So let's\nsay that I am using a version control system\nlike get while I'm developing my app. And\nalso I'm using Jenkins for continuous integration\nnow Jenkins will extract code from get every\ntime there is a new Commit and then making\nsoftware built and later. This build will\nget deployed in the test server for testing.\nNow if changes are kept making in the code\nbase continuously. You would have to configure\nyour test and the production server continuously\nas well according to the changes. So what\nansible does is that it continuously keeps\non checking the Version Control System here\nso that it can configure the test and the\nproduction server accordingly and quickly\nand hence. It makes your application deployment\nlike a piece of cake. So guys, I think you\nhave understood the application deployment.\nDon't worry in the Hands-On part will also\nbe deploying our own applications on different\nservers as well. Now, let us see how we can\nachieve security with ansible in today's complex.\nIt environment security is Paramount you need\nsecurity for your systems you need security\nfor your data and not just your data your\ncustomers data as well. Not only you must\nbe able to Define what it means for your systems\nto be. You also need to be able to Simply\napply that security and also you need to constantly\nmonitor your systems in order to ensure that\nthey remain compliant with that security and\nwith ansible. You can simply Define security\nfor your systems using playbooks with playbooks.\nYou can set up firewall rules. You can log\ndown different users or groups and you can\neven apply custom security policies as well\nnow ansible also works with the Mind Point\nGroup which rights and civil rules to apply\nthese aesthetic now disa stick is a cybersecurity\nmethodology for standardizing security protocols\nwithin your network servers and different\ncomputers. And also it is very compliant with\nthe existing SSH and win RM protocols. And\nthis is also a reason why ansible is preferred\nover other configuration management tools\nand it is also compatible with different security\nverification tools like opens Gap and stigma\nwhat tools like opens cap and stigma does\nis that it carries out a timely inspection.\nAll your software inventory and check for\nany kind of vulnerabilities and it allows\nyou to take steps to prevent those attacks\nbefore they actually happen and you can apply\nthe security over your entire infrastructure\nusing ansible. So, how about some Hands-On\nwith ansible? So let us write some ansible\nplaybooks now. So what are we going to do\nis that we are going to install lamp stack\nand then we're going to host a website on\nthe Apache server and will also collect some\ndata from our webpage and store it in the\nMySQL server. So guys, let's get started.\nSo here I'm using the Oracle virtualbox manager\nand here I've created two virtual machines.\nThe first is the ansible control machine and\nthe ansible host machine. So ansible control\nmachine is the machine where I have installed\nand simple and this is where I'll be writing\nall my playbooks and answer will host one\nhere is going to be my note machine. This\nis where the playbooks are going to get deployed.\nSo in this machine, I'll deploy my website.\nSo I'll be hosting a website in the answer\nwill host one. Just go to my control machine\nand start writing the playbooks. So this is\nmy ansible control machine. Now. Let's go\nto the terminal first. So this is the terminal\nof my ansible control machine. And now I've\nalready installed ansible here and I've already\nmade an SSH connection with my note machine.\nSo let me hear just become the root user first\nnow, you should know that you do not always\nneed to become the root user in order to use\nansible. I'm just becoming the root user for\nmy convenience because I like to get all the\nroot privileges while I'm using ansible, but\nyou can pseudo to any user if you like So\nlet me clear my screen first. Now before we\nstart writing play boo status first check\nthe version of ansible that is installed here.\nAnd for that I'll just use the command ansible\n- - version. And as you can see here that\nI have got the ansible two point two point\nzero point zero version here. Now. Let me\nshow you my host inventory file since I've\ngot only one node machine here. So I'm going\nto show you where exactly the IP address of\nmy node machine is being stored. So open the\nhosts file for you now, so I'm just going\nto open the file and show it to you. So I'm\nusing the G edit editor and the default location\nof your host inventory file is at sea. I'm\nsupposed / posts. And this is your host inventory\nfile and now have mentioned the IP address\nof my host machine here, which is one. Ninety\ntwo point one sixty eight point 56.1 02 and\nI have named it under the group name test\nservers. So always write the name of your\ngroup under the square brackets now, I just\nhave one node machine. So there is only one\nIP address. If you have many node machines,\nyou can just let us down the IP address under\nthis line. It's as simple as that or if you\neven want to group it under a different name,\nyou can use a different name use another square\nbracket and put a different name for another\nset of your hosts. Okay. Now, let me clear\nmy screen first. So first, let me just test\nout the SSH connection whether it's working\nproperly or not using ansible. So for that\nI'll just type in the command and Sybil and\npink and then the name of the group of my\nhost machines, which is test servers in my\ncase. And thank changed to Paul. It means\nthat an SSH connection is already established\nbetween my control machine and my note machine.\nSo we are all ready to write playbooks and\nstart deploying it on the notes. So the first\nthing that I need to do is write a provisioning\nPlaybook now, since I'm going to host a website,\nI would first need to install the necessary\nsoftware's so I'll be writing a provisioning\nplaybook for that and out provision my node\nmachine using lamp stack. So let us write\na Playbook to install lamp stack on my Note\nmachine now, I've already written that Playbook.\nSo I'm just going to show it to you. I'm using\nthe Gia did editor again and the name of my\nprovisioning playbook is lamp stack. And the\nextension for AML file is Dot. Yml, and this\nis my playbook. Now. Let me tell you how I\nhave written this Playbook as I told you that\nevery play book starts with three dashes on\nthe top. So here are the three dashes and\nthen I've given a name to this Playbook which\nis to install Apache PHP and MySQL. Now, I've\nalready got the L in my lamb because I'm using\na Ubuntu machine which is a Linux operating\nsystem. So I need to install Apache PHP and\nMySQL now and then you have to mention the\nhost here on which you want this Playbook\nto get deployed. So I've mentioned this over\nhere and then I want to escalate my privileges\nfor which I'm using become and become user\nit is because sometimes you want to become\nanother user different from what you are actually\nlogged into the remote machine. So you can\nuse escalating privileges tools like so or\npseudo to gain root privileges. And so and\nthat is why I've used become and become user\nfor that. So I'm becoming the user root and\nI'm using become true here on the top. What\nit does is that it activates Your Privilege\nescalation and then you become the root user\non the remote machine and then gather facts\ntrue. Now, what it will do is that we gather\nuseful variables about the remote host. Now\nwhat exactly it will gather is some sort of\nfiles or some kind of keys which can be used\nlater in a different Playbook. And as you\nknow that every Playbook is a list of tasks\nthat you need to perform. So this is the list\nof all my tasks that I'm going to perform\nand since it's a provisioning Playbook, which\nmeans I'm only installing the necessary softwares.\nThat will be needed in order to host a website\non my Note machine. So first I'm installing\nApache so given the task name as install apache2\nand then I'm using the package module here.\nAnd this is the syntax of the package module.\nSo you have to first specify the name of the\npackage that you are going to download which\nis Apache 2 and then you put State equal to\npresent now since we're installing something\nfor the first time and it won't this package\nto be present in your node machine. So you're\nputting State equal to present now similarly\nif you want to delete something you can put\nState equal to absent and it works that way\nso I've installed in Apache PHP module and\nI've installed PHP client PHP Emperor PHP\nGD library of install a package PHP MySQL.\nAnd finally, I've installed the MySQL server\nin the similar way that I've installed a party\nto this is a very simple Playbook to provision\nyour node machine and actually all the playbooks\nare simple. So I hope that you have understood\nhow to write a Book now, let me tell you something\nthat you should always keep in mind while\nyou were writing playbooks make sure that\nyou are always extra careful with the indentation\nbecause Gamal is a data serialization language\nand it differentiates between elements with\ndifferent indentations. For example, I've\ngot a name here and a name here also, but\nyou can see that the indentations are different\nit is because this is the name of my entire\nPlaybook while this is just the name of my\nparticular task. So these two are different\nthings and they need to have different indentations\nthe ones with the similar indentations are\nknown as siblings like this one. This is also\ndoing the same thing. This is also installing\nsome kind of package and this is also installing\nsome kind of package. So these are similar,\nso that's why you should be very careful with\nindentation. Otherwise, it will create a problem\nfor you. So what are we waiting for? Let us\nrun this Playbook clear my screen first. So\nin order to run a play book and the command\nthat you should be using to run an answerable\nPlaybook is ansible - Playbook And then the\nname of your file, which is lamp stack dot\nJama and here we go. And here it is. Okay\nbecause it is able to connect to my note machine.\nApache 2 has been installed. And it's done.\nMy playbook is successfully run. And how do\nI know that? I know that seeing these common\nreturn values. So these common return values\nlike okay changed unreachable and fate. They\ngive me the status summary of how my playbook\nwas run. So okay equal to 8, it means there\nwere eight tasks. That was Run Okay changed\nequal to 7. It means that something in my\nnote between has been changed because obviously\nI've install new packages into my note machine.\nSo it's showing changed equal to 7 unreachable\nis equal to 0 it means that there is zero\nhost that were unreachable and failed equal\nto 0 it means that zero tasks where fate so\nmy playbook was run successfully on to my\nnote between. So let us check my note machine\nand see if Apache and MySQL has been installed.\nSo let us go to my node machine now. So this\nis my node machine. So let us check knife.\nApache server has been installed. So I'm going\nto my web browser. So this is my web browser\nin my note machine. Let me go to the Local\nHost and check if Apache web server has been\ndownloaded and it's there. It works. Now.\nThis is the default web page of apache2 web\nserver. So now I know for sure that Apache\nwas installed in my note machine now. Let\nus see if MySQL server has been installed.\nLet me go to my terminal. This is the terminal\nof my load machine. Now. If you want to check\nif MySQL has installed just use this following\ncommand. mice ql user is root then - p sudo\npassword password again for MySQL and there\nit is. So MySQL server was also successfully\ninstalled in my note machine. So let's go\nback to my control machine and let's do what\nis left to do. So we're back into our control\nmachine. Now. I've already provisioned my\nnote machine. So let's see what we need to\ndo next now since we are deploying a website\non the Node machine, let me first show you\nhow my first web page looks like let me first\nshow you how my first web page looks like\nso this is going to be my first web page which\nis index dot HTML and I've got two more PHP\nfiles also this salvi actually deploying these\nfiles onto my node machine. So let me just\nopen the first webpage to you. So this is\ngoing to be my first web page. And what I'm\ngoing to do is that I'm going to ask for name\nand email because this is a registration page\nfor at Eureka where you have to register with\nyour name and email and I want this name and\nemail to go into my database. So for that\nI need to create a database and also need\nto create a table for this name and email\ndata to store into so for that will write\nanother play book and we'll be using database\nmodules in that clear the screen first now\nagain, I've already written that Playbook.\nSo let me just show it to you. So using the\nG edit editor here again and the name of this\nPlaybook is my school module. Okay. So this\nis my playbook. So like all Playbook it starts\nwith three dashes and here I have mentioned\nhost all now. I just have only one host. I\nknow I could have mentioned either the only\none IP address directly or even given the\nname of my group but I've written just all\nyour so that you can know that if you had\nmany group names or you have many notes and\nyou want this Playbook to run on all of your\nnode machines, you can use this all and this\nPlaybook will get deployed on all your note\nmachines. So this is another way of mentioning\nyour hosts and I'm using remote user root\nand this is another method to escalate your\nprivileges. It's similar to become and become\nuser. So on the remote user to have root privileges\nwhile this Playbook would run and then the\nlist of the tasks and so what I'm doing in\nthis Playbook is that since I have to connect\nto my MySQL server, which is present in my\nnote machine. I need a particular software\nfor that which is the MySQL python module\nand I'm Download and install it using tip\nnow dip is the python package manager with\nwhich you can install and download python\npackages. But first, I need to install Pippin\nmy note machine. So since I told you that\nthe tasks that you write in a Playbook it\ngets executed in the same order that you write\nthem. So my first task is to install pip and\nthen I'm using the app module here here. I've\ngiven the name of the package which is python\nbit and state equal to present and after that.\nI'm installing some other software's using\nbit and I'm stalling some other related software's\nas well. I'm also installing Library - with\nblind deaf. And after that using pip, I'm\ninstalling the MySQL python module now notice\nthat so you can consider this as an orchestration\nPlaybook because here I'm making sure that\npip has to get installed first and after papers\ninstalled I'm using pip to install another\npython package. So you see what we did here\nright and then I'm going to use the database\nmodules for Getting a new user to access the\ndatabase and then I'm creating the database\nnamed a do so for creating a MySQL user. I've\nused the MySQL user database module that ansible\ncomes with and this is the syntax of the MySQL\nuser module recreate the name of the new user\nwhich is edureka, you mentioned the password\nand the preview here. It means what privileges\ndo you want to give it to the new user and\nhere I'm granting all privileges for all database.\nAnd since you're creating it for the first\ntime and you want state to be present. Similarly,\nI'm using the mysqldb module to create a database\nin my MySQL server named ed you so this is\nthe very simple syntax of using mysqldb module.\nWe have to just give the name of the database\nin DB equal to and state equal to present.\nSo this will create a database named Eddie\nalso and after that I also need to create\na table inside the database for storing my\nname and email details, right and and unfortunately\nansible does not have any MySQL table creating\nmodules. So what I did is that I've used a\nCommand Module here. We Command Module and\ndirectly going to use my SQL queries to create\na table and the syntax is something like this\nso you can write it down or remember it if\nyou want to use it. So for that since I'm\nwriting a MySQL Query I started with mySQL\nuser Eddie wake up the - us for the user and\nthen for password Etc. Wake up. Now after\n- e just write the query that you need to\nexecute on the MySQL server and write it in\nsingle quotations. So I have written the query\nto create a table and this is create table\nare EG the name the email and then after that\njust mention the name of the database on which\nyou want to create this table, which is a\ndo for me. So this is my orchestration PlayBook.\nClear my screen first. The command is ansible\n- Playbook and the name of your play book,\nwhich is MySQL modding. And here we go. Again,\nmy common return values tell me that the Playbook\nwas done successfully because there are no\nfail task and no unreachable host and there\nare change task in my note machine. So now\nall the packages are downloaded now, my node\nmachine is well provisioned. It's properly\norchestrated. Now. What are we waiting for?\nLet's deploy your application. Well clear\nthe screen first. So now let me tell you what\nexactly do we need to do in order to deploy\nmy application and in my case, these are just\nthree PHP files and HTML files that I need\nto deploy it on my Note machine in order to\ndisplay this HTML files and PHP files on my\nweb server in my note machine. What I need\nto do is that I need to copy this files from\nmy control machine to the proper location\nin my notebook machine and we can do that\nusing playbooks. So let me just show you the\nPlaybook to copy files. And the name of my\nfather is deployed website. So this is my\nplaybook to deploy my application and here\nagain, I've used the three dashes and then\nthe name of my playbook is copy the host as\nyou know that it's going to be test servers.\nI'm using privilege escalation again, and\nI'm using become and become user Again The\nGather facts again true. And here is the list\nof the task the task is to just copy my file\nfrom my control machine and paste it in my\ndestination machine, which is my node machine\nand for that and for copying I've used a copy\nmodule and copy module is a file module that\nansible comes with so this is the syntax of\nthe copy module here. You just need to mention\na source and source is the path where my file\nis contained in my control machine, which\nis home at Eureka documents. And the name\nof the file is index dot HTML, and I wanted\nto go too far www HTML and it's index dot\nHTML, so I should be copying my files. Into\nthis location in order for it to display it\non the web page and similarly have copied\nmy other PHP files using the same copy module.\nI've mentioned the source and destination\nand copying them to the same destination from\nthe same source. So I don't think any of you\nwould have questions here. This is the most\neasiest Playbook that we have written today.\nSo let us deploy our application now and for\nthat we need to run this play book and before\nthat we need to clear the screen because there\nare a lot of stuff on our screen right now.\nSo let's run the Playbook. And here we go,\nand it was very quick because there was nothing\nmuch to do. You just have to copy files from\none location to another and these are very\nsmall files. Let us go back to our host machine\nand see if it's working. So you're back again\nat our host machine. Let's go to my web browser\nto check that. So let me refresh it and there\nit is. And so here is my first web page. So\nmy application was successfully deployed.\nSo now let us enter our name and email here\nand check if it is getting entered in my database.\nSo let's put our name and the email. It's\nwhy z.com and add it so new record created\nsuccessfully. It means that it is getting\ninserted into my database. Now, let's go back\nand view it and there it is. So congratulations,\nyou have successfully written playbooks to\ndeploy your application your provision your\nnode machines using playbooks and orchestrated\nthem using playbooks now, even though at the\nbeginning it seemed like a huge task to do\nand so we'll play both made it so easy. Hello\neveryone. This is Saurabh from Edureka in\ntoday's session will focus on what his puppet.\nSo without any further Ado let us move forward\nand how look at the agenda for today first.\nWe'll see why we need configuration management\nwhile the various problems are industries\nwere facing before configuration management\nwas introduced after that will understand\nwhat exactly is configuration management and\nwe'll look at various configuration management\ntools after We'll focus on puppet and we'll\nsee the puppet architecture along with the\nvarious puppet components and finally in our\nhands on part will learn how to deploy my\nSQL and PHP using puppet. So I'll move forward\nand we'll see what are the various problems\nbefore configuration management. So this is\nthe first problem guys, let us understand\nthis with an example suppose. You are a system\nadministrator and your job is to deploy mean\nstack say on four nodes. All right means dark\nis actually Mongo DB Enterprise angularjs\nand node.js so you need to deploy means dark\non four notes that is not a big issue. You\ncan manually deploy that and four nodes but\nwhat happens when your infrastructure becomes\nhuge you may need to deploy the same means\ntax a on hundreds of notes. Now, how will\nyou approach the task? You can't do it manually\nbecause if you do it manually, it'll take\na lot of time plus they will be wastage of\nresources along with that. There is a chance\nof human error. I mean, it increases the risk\nof human error. All right, so we'll take the\nsame example forward. And we'll see what are\nthe other problems before configuration management.\nNow, this is the second problem guys. So it's\nfine like you in the previous step you have\ndeployed means that one hundreds of nodes\nmanually. Now what happens there is an updated\nversion of Mongo DB available and your organization\nwants to shift that updated version. Now,\nhow will you do that? You want to go to the\nupdated version of Mongo DB? So what you'll\ndo you'll actually go and manually update\nmongodb on all the nodes in your infrastructure.\nRight? So again, that will take a lot of time\nbut now what happens that updated version\nof the software has certain glitches your\ncompany wants to roll back to the previous\nversion of the software, which is mongo DB\nin this case. So you want to go back to the\nprevious version. Now, how will you do that?\nRemember you have not kept the historical\nrecord of Mongo DB during the updating. I\nmean you have updated mongodb biannually on\nall the nodes. You don't have the record of\nthe previous version of Mongo DB. So what\nyou need to do you need to go and manually\nReinstall mongodb on all the nodes. So rollback\nwas a very painful task. I mean it used to\ntake a lot of time. Now. This is the third\nproblem guys over here what happens you have\nupdated mongodb in the previous step on say\ndevelopment environment and in the testing\nenvironment, but when we talk about the production\nenvironment, they're still using the previous\nversion of mongodb. Now what happens there\nmight be certain applications that work that\nare not compatible with the previous version\nof mongodb All right. So what happened developers\nwrite a code and that works fine in his own\nenvironment or beat his own laptop after that.\nIt works fine till testing is well. Now when\nit reaches production since they're using\nthe older version of Mongo DB which is not\ncompatible with the application that developers\nhave built so it won't work properly there\nmight be certain functions which won't work\nproperly in the production environment. So\nthere is an inconsistency in the Computing\nenvironment due to which the application might\nwork in the development environment, but in\nproduct it is not working properly. Now what\nI'll do, I'll move forward and I'll tell you\nhow important configuration management is\nwith the help of a use case. So configuration\nmanagement. Add New York Stock Exchange. All\nright. This is the best example of configuration\nmanagement that I can think of what happened\na software glitch prevented the New York Stock\nExchange from Trading stocks for almost 90\nminutes this led to millions of dollars of\nloss a new software installation caused the\nproblem. The software was installed on 8 of\nits twenty trading Terminals and the system\nwas tested out the night before however in\nthe morning it failed to operate properly\non the a terminals. So there was a need to\nswitch back to the old software you might\nthink that this was a failure of New York\nStock Exchange has configuration management\nprocess, but in reality, it was a success\nas a result of proper configuration management\nprocess NYSE recovered from that situation\nin 90 minutes, which was pretty fast. Let\nme tell you guys had the problem continued\nlonger the consequences would have been more\nsevere so because the proper configuration\nmanagement, New York Stock Exchange Painted\nloss of millions of dollars they were able\nto roll back to the previous version of the\nsoftware within 90 minutes. So we'll move\nforward and we'll see what exactly configuration\nmanagement is. So what is configuration management\nconfiguration management is basically a process\nthat helps you to manage changes in your infrastructure\nin a more systematic and structured way. If\nyou're updating a software you keep a record\nof what all things you have updated. What\nwill change is you are making in your infrastructure\nall those things and how you achieve configuration\nmanagement you achieve that with the help\nof a very important concept called infrastructure\nas code. Now. What is the infrastructure is\ncode infrastructure as code simply means that\nyou're writing code for infrastructure. Let\nus refer the diagram that is present in front\nof your screen. Now what happens in infrastructure\nis code you write the code for infrastructure\nin one central location. You can call it a\nserver. You can call it a master or whatever\nyou want to call it. All right. Now that code\nis deployed onto the dev environment test\nenvironment and the product environment. Basically\nyour entire infrastructure. All right, whatever.\nNo, do you want to configure your configure\nthat with the help of that one central location?\nSo let us take an example. All right suppose\nyou want to deploy Apache Tomcat say on all\nof your notes. So what you'll do in one location\nwill write the code to install Apache tomcat\nand then you'll push that onto the nodes which\nyou want to configure. What are the advantage\nyou get here. First of all the first problem\nif you can recall that configuring large infrastructure\nwas very hectic job, but because of configuration\nmanagement, it becomes very easy how it becomes\neasy. You just need to write the code in one\ncentral location and replicate that on hundreds\nof notes it is that easy. You don't need to\ngo and manually install or update the software\non all the nodes. All right. Now the second\nproblem was you cannot roll back to the previous\ntable version in time. But what happens here,\nsince you have everything well documented\nin the central location rolling back to the\nprevious version was not a time-consuming\ntask. Now the third problem was there was\na variation or inconsistency in Various teams,\nlike Dev team Testament product team like\nthe environment the Computing environment\nwas a different in-depth testing product.\nBut with the help of infrastructure as code\nwhat happens all your three environment that\nis there tested product have the same Computing\nenvironment. So I hope we all are clear with\nwhat is configuration management and what\nis infrastructure is code. So we'll move forward\nand we'll see what are the different type\nof configuration management approaches are\nthere now, there are two types of configuration\nmanagement approaches one is push configuration.\nAnother is pull configuration. All right.\nLet me tell you push configuration first input\nconfiguration what happens there's one centralized\nserver and it has all the configurations inside\nit if you want to configure certain amount\nof nodes. All right, say you want to configure\nfor notes as shown in the diagram. So what\nhappens if you push those configuration to\nthese nodes there are certain commands that\nyou need to execute on that particular central\nlocation and with the help of that command\nthose are configurations, which are present\nwill be pushed onto the nodes now, Let us\nsee what what happens in pull configuration\nin pull configuration. There is one centralized\nserver, but it won't push all the configurations\non to the nodes what happens nodes actually\nposed the central server at say 5 minutes\nor 10 minutes basically at periodic intervals.\nAll right, so it will pose the central servers\nfor the configurations and after that it will\npull the configurations that are there in\nthe central server so over here, you don't\nneed to execute any command nodes will add\nautomatically pull all the configurations\nthat are there in the centralized server and\npop it in Chef both uses full configuration.\nBut when you talk about push configuration\nansible unsourced accuses push configuration,\nso I'll move forward and we'll look at various\nconfiguration management tools. So these are\nthe four of most widely adopted tools for\nconfiguration management. I have highlighted\npuppet because in this session, we are going\nto focus on puppet and it uses pull configuration\nand when we talk about Saul stock, it uses\npush configuration, so does ansible ansible\nalso uses push. Listen Chef also uses the\npulley configuration. All right, so pop it\nand chef uses pull configuration, but ansible\nand solve Stark uses push configuration. Now,\nlet us move forward and see what exactly puppet\nis. So pop it is basically a configuration\nmanagement tool that is used to deploy a particular\napplication configure your nodes and manager\nservice. Like they can possibly take your\nservers online and offline as required configure\nthem and deploy a certain package or an application\nonto the node. So right with the help of puppet,\nyou can do that with ease and the architecture\nthat it uses master-slave architecture. Let\nus understand this with an example. So this\nis Puppet Master over here. All the configurations\nare present and these are all the puppet agents.\nAll right, so these puppet agents pole the\ncentral or the Puppet Master at regular intervals\nand whatever configurations are present. It\nwill pull those configuration basically. So\nlet us move forward and focus on the Puppet\nMaster Slave architecture now, this is a Also\nslave architecture guys over here what happens\nthe puppet agent or the puppet node sends\nfacts to the puppet master and these facts\nare basically a key value our data pair that\nrepresents some aspect of slave state that\naspect can be its IP address time operating\nsystem or whether it's a virtual machine and\nthen Factor gathers those basic information\nabout puppet slave such as Hardware details\nnetwork settings operating system type and\nversion IP addresses Mark addresses all those\nthings. Now these parts are then made available\nin Puppet Masters manifest as variables now\nPuppet Master uses those facts that it has\nreceived from the puppet agent or the puppet\nnode to compile a catalog that catalog defines\nhow the slave should be configured and at\nthe catalog is a document that describes a\ndesired state for each resource that Puppet\nMaster manages, honestly, so it is basically\na compilation of all the resources that Puppet\nMaster applies to a given slave as well as\nat the relationship between Those resources\nso the catalog is compiled by the puppet master\nand then it is sent back to the node and then\nfinally slave provides data about how it has\nimplemented that catalog and if sandbags our\nreport. So basically the node or the agent\nsends the report back that the configurations\nare complete and they can actually view that\nin the puppet dashboard as well. Now what\nhappens is the connection between the node\nor the puppet agent and the puppet master\nhappens with the help of SSL secure encryption.\nAll right, we'll move forward and we'll see\nhow actually the connection between the puppet\nmaster and puppet node happens. So this is\nhow puppet master and slave connection happens\nwhat happens first of all the puppets slave\nit requests for the Puppet Master certificate.\nAll right. It sends a request to the master\ncertificate and once Puppet Master receives\nthat request it will send the master certificate\nand once puppet slave has received the master\ncertificate Puppet Master will again send\na request to the slave regarding the its own\ncertificate. All right. So it will request\na for the puppet agent to send its own certificate.\nThe puppet slave is generate its own certificate\nand send it to Puppet Master. Now what puppet\nmaster has to do puppet master has to sign\nthat certificate. Alright. So once it has\nsigned the certificate puppet slave can actually\nrequest for the data. All right all the configurations\nand then finally Puppet Master will send those\nconfigurations on to the puppets late. This\nis how puppet master and slave communicates.\nNow, let me show you practically how this\nhappens. I have installed puppet master and\npuppet slave on my sent to West machines.\nAll right, I'm using 2 virtual machines 14\npuppet master and another for puppet sleep.\nSo let us move forward and execute this practically\nnow, this is my Puppet Master virtual machine\nover here. I've already created a puppet master\ncertificate, but there is no puppet agent\ncertificate right now and how will you confirm\nthat there is a command that is puppet. Third\nlist and it will display all the certificates\nthat are pending in puppet master. I mean\nthat are pending for the approval from the\nmaster. All right, so currently there are\nno certificates available. So what I'll do\nis I'll go to my puppet agent and I'll fetch\nthe Puppet Master certificate which are generated\nearlier and at the same time generate the\npuppet agent certificate and send it to master\nfor signing it. So this is my puppet agent\nvirtual machine now over here as I've told\nyou earlier as well. I'll generate a puppet\nagent certificate and at the same time I'll\nfetch the Puppet Master certificate and that\nagent certificate will be sent to puppet master\nand it will sign that puppet my agent certificate.\nSo let us proceed with that for that. I'll\ntype up it agent - t and here we go. All right,\nso it is creating a new SSL key for the puppet\nagent as you can see in the logs itself. So\nit has sent a Certificate request and this\nis the fingerprint for that. So exiting no\ncertificate found and wait for sword is disabled.\nSo what I need to do is I need to go back\nto my Puppet Master virtual machine and the\nsigned this particular certificate that is\ngenerated by puppet agent. Now over here if\nyou want to see the list of certificates,\nwhat do you need to do? You need to type up\nit so at least I have told you earlier as\nwell. So let us see what all certificates\nare there now, so as you can see that there\nis a certificate that has been sent by puppet\nagent. All right, so I need to sign this particular\nsort of again. So for that what I will do\nI'll type pop it. Search sign on the name\nof the certificate that is puppet agent and\nhere we go. So that successfully signed the\ncertificate that was requested by puppet agent.\nNow what I'll do, I'll go back to my puppet\nagent virtual image and over there. I'll update\nthe changes that have been made in the Puppet\nMaster. Let me first clear my terminal and\nnow again, I'll type puppet agent - tea. All\nright, so we have successfully established\na secure connection between puppet master\nand puppet agent. Now. Let me give you a quick\nrecap of what we have discussed a lot first.\nWe saw what are the various problems before\nconfiguration management be focused on three\nmajor problems that were there. All right.\nAnd after that we saw how important configuration\nmanagement is with the help of a use case\nof New York Stock Exchange. And finally we\nsaw what exactly configuration management\nis. And what do you mean by infrastructure\nis code. We also looked at various configuration\nmanagement tools are namely Chef puppet ansible\nand saltstack and after that we understood\nwhat exactly pop it is. And what is the master-slave\narchitecture that it has and how puppet master\nand puppet slave communicates. All right,\nso I'll move forward and we'll see what use\ncase I have for you today. So what we are\ngoing to do in today's session or we are going\nto deploy a my SQL and PHP using puppet. So\nfor that what I will do, I'll first a download\nthe predefined modules for my dad. SQL and\nPHP that are there in the puppet Foods. All\nright, those modules will actually Define\nthe two classes that is PHP and MySQL. Now\nyou cannot deploy the class directly onto\nthe nodes. So what do you need to do? When\nyou in puppet Boniface you need to declare\nthose classes, whatever class you have defined.\nYou need to declare those classes. I'll tell\nyou what our manifest modules you don't need\nto worry about that. I'm just giving a general\noverview of what we are going to do in today's\nsession. So you just need to declare those\ntwo classes at as PHP and MySQL and finally\njust deploy that onto the nose it is that\nsimple guys. So as you can see that there\nwill be a code for PHP and MySQL from that\nPuppet Master, it will be deployed onto the\nnose or the puppet agents will move forward\nand we'll see what are the various phases\nin which will be implementing the use case.\nAlright. So first we'll define a class has\nall right classes are nothing but the collection\nof various resources. How will do that will\ndo that with the help of modules that will\nactually download a module from the puppet.\nBoat and we'll use that module that defines\nwho classes as I've told you PHP and MySQL\nand then I'm going to declare that class in\nthe Manifest and finally deploy that onto\nthe nodes. All right. So let us move forward\nand before actually doing this it is very\nimportant for you to understand certain basics\nof pop it like code basics of puppet like\nwhat our classes resources manifest modules\nall those things. So we'll move forward and\nunderstand those things one by one. Now. What\nhappens is first of all, I'll explain you\nresources classes manifests in modules separately.\nBut before that, let me just give you an overview\nof what are these things? All right, how do\nthey work together? So what happens there\nare certain resources or write a user is a\nresource of pile is a resource. Basically\nanything that is there can be considered as\na resource. So multiple resources actually\ncombine together to form a class. So now this\nclass you can declare it in any of the benefits\nthat you want. You can declare it in multiple\nmanifests. All right, and then finally you\ncan bundle all These manifest together to\nform a module. Now. Let me tell you guys it\nis not mandatory that with you will combine\nthe resources and define a class. You can\nactually deploy the resources directly. It\nis a good practice if you combine the resources\nin the form of classes because it becomes\neasier for you to manage the same goes for\nmanifest as well. And I'll tell you how to\ndo that as well. You can write a puppet code\nand deploy that onto the nodes and at the\nsame time it is not necessary for you to bundle\nthe Manifest that you are using in the form\nof modules. But if you do that, it becomes\nmore manageable and it becomes more structured.\nAll right, so it becomes easier for you to\nhandle multiple manifests. All right. So let\nus move forward and have a look at what exactly\nare resources and what our class is in puppet.\nNow what our resources anything that is there\nis a resource a user is a resource other told\nyou about file can be a resource. Basically\nanything that is there can be considered as\na resource. So puppet code is composed primarily\nof a resource declarations a resource describes\nsomething about the state of the System it\ncan be such as a certain user or a file should\nexist or a package should be installed now\nhere we have the syntax of the resource. All\nright, first you write the type of the resource.\nThen you give a name to it in the single quotes\nand various attributes that you want to Define\nin the example. I've shown you that it will\ncreate a file that is I need d.com and this\nattribute will make sure that it is present.\nSo let us execute this practically guys. I'll\nagain go back to my Center as virtual machine\nnow over here. What I'll do I'll use the G\nedit editor you can use whatever editor you\nwant and I'll type the path for my manifest\ndirectory and in this directory. I let Define\na file. All right and with the dot DB extension,\nso I'll just name it as a side dot p p and\nhere we go. Now what head are the resource\nexamples that I've shown you in this light?\nI will just write the same example and the\nlet us see what happens file open the braces\nnow give the path HC. / I knit DDOT conf Ina\nDDOT conf. Colon, and antenna, and now I'm\ngoing to write the attribute, so I'm going\nto make sure that it is present in sure. The\nDefine is created. Etsy I knit / I knit. DDOT\nconf comma and the now-closed the braces save\nit and close it. Now what you need to do.\nYou need to go to the puppet Asian once more\nand over there. I'm going to execute agent\n- t command that will update the changes made\nin the Puppet Master. Now we're here. I'll\nuse the puppet agent - t command and let us\nsee if the file I need the dot-coms is created\nor not. All right, so it has done it successfully\nnow. What I'll do is just to confirm that\nI'll use LS command for that. I will type\nLS Etsy. Ina DDOT Kant And as you can see\nthat it has been created, right so we have\nunderstood what exactly a resources in puppet,\nright? So now let us see what our classes\nclasses are nothing but the group of resources.\nAll right, so you group multiple resources\ntogether to form one single sauce and you\ncan declare that class in multiple manifest\nas we have seen earlier. It has a syntax error.\nLet us see first you need to write class then\ngive a name to that class open the braces\nwrite the code in the body and then close\nthe brace is it's very simple and it is pretty\nmuch similar to the other coding languages\nthat you if you if you have come across any\nother coding languages. It is pretty much\nsimilar to the class that you define over\nthere as well. All right, so we have a question\nfrom my uncle he's asking can you specify\nwhat exactly the difference between a resource\nand a class classes are actually nothing but\nthe bundle of resources. All right, all those\nResources Group together forms a class and\nwhat you can say is a resource describes a\nsingle. Or a package but what happens a class\ndescribes everything needed to configure an\nentire service or an application? So we'll\nmove forward and we'll see what our manifest\nso this is puppet manifest now what exactly\nit is, every slave has got its configuration\ndetails in puppet master and it is written\nin the native puppet language. These details\nare written in the language that puppet can\nunderstand and that language is termed as\nmanifests. So this is Manifest all the puppet\nprograms are basically termed as Manifest.\nSo for example, you can write a manifest in\npuppet master that creates a file and install\nthe party's over on puppet slaves connected\nto the Puppet Master. Alright, so you can\nsee I've given you an example over here. It\nuses a class that is called Apache and this\nclass is defined with the help of predefined\nmodules that are there in puppet port and\nthen various our tributes like Define the\nvirtual hosts in the port and the root directory,\nso Basically, there are two ways to actually\ndeclare a class in puppet manifest either.\nYou can just write include and the name of\nthe class or you can if you don't want to\nuse a default attributes of that class, you\ncan make the changes in that by using this\nparticular syntax that is you write the class\nopen the braces and the class name: whatever\nchanges or whatever the attributes that you\nwant apart from the one which are there in\nDeep by default and then finally close the\nbraces. All right. So now I'll execute a manifest\npractically that will install Apache on my\nnotes. All right now need to deploy Apache\nusing puppets. All right. So what I need to\ndo, I need to write the code to deploy apart\na in the Manifest directory. I've already\ncreated a file with DOT CPP extension. If\nyou can remember when I was talking about\nresources, right? So now again, I'll use the\nsame file that is side b p and I'll write\nthe code to deploy a partay. All right. So\nwhat I'll do I'll just I'll use the G editor\nyou can use whatever editor you feel like\nit see Pop It manifest and site. Art p p and\nhere we go. Now over here. I'll just delete\nthe resource that I've defined here. I like\nmy screen to be nice and clean and now I will\nwrite the code to deploy a party so for that\nI will tight package. httpd : now I need to\nensure it is install. So for that I'll type\nin sure installed. Give a comma Now I need\nto start this Apache service for that. I'll\ntype service. httpd in short running through\na coma now close the braces the save it and\nclose it. Let me clear my terminal. And now\nwhat I'll do, I'll go to my puppet agent from\nthere. It will pull the configurations that\nare present in my Puppet Master. Now what\nhappens periodically puppet agent actually\npulls the configuration from Puppet Master\nand it is around 30 minutes, right? It takes\naround half an hour after every half an hour\npuppet agent pulls the configuration from\nPuppet Master, right so you can configure\nthat as well. If you don't want to do it just\nthrow in a command puppet agent - tea and\nit will automatically pull the configurations\nare representing the puppet master. So for\nthat I will go to my puppet agent virtual\nmachine now here what I'll do, I'll type a\ncommand puppet agent - t and let us see what\nhappens. So it is done now now what I'll do\njust to confirm that I will open my browser.\nAnd over here, I will type the hostname of\nmy machine which is localhost and let us see\nif a party is installed. All right, so Apache\nhas been successfully installed now, let us\ngo back to our slides and see what exactly\nmodules are. So what our puppet modules puppet\nmodule can be considered as a self-contained\nbundle of code and data. Let us put it in\nanother way. We can say that puppet module\nis a collection of manifest and data such\nas Parks files templates Etc. All right, and\nthey have a specific directory structure.\nModules are basically used for organizing\nyour puppet code because they allow you to\nsplit your code into multiple manifest. So\nthey provide you a proper structure in order\nto manage a manifest because in real time,\nyou'll be having multiple manifest to manage\nthose manifests. It is always a good practice\nto bundle them together in the form of modules.\nSo by default puppet modules are present in\nthe directly / HC / puppet / modules, whatever\nmodules you download from Puppet force will\nbe present in this module directory. All right,\neven if you create your own modules, you have\nto create in this particular directory. That\nis / HC / puppet / modules. So now let us\nstart the most awaited topic of today's session\nthat is deploying PHP and my SQL using puppet.\nNow, what I'm going to do is I'm going to\ndownload the two modules one is for PHP and\nanother is for MySQL. So those two modules\nwill actually Define PHP and MySQL class for\nme now after that I need to declare that class\nin the Manifest. Then site dot PHP file present\nin the puppet manifest. So I'll declare that\nclass in the Manifest. And then finally, I'll\nthrow in a command puppet agent - teen my\nagent and it will pull those configurations\nand PHP and MySQL will be deployed. So basically\nwhen you download a module you are defining\na class. You cannot directly deploy the class\nyou need to declare it in the Manifest and\nI will again go back to my sin to icebox now\nover here. What I'll do, I'll download the\nmy SQL module from the puppet forward. So\nforth are all type puppet mode. You'll install\nPuppet Labs. - my sequel - - give the night\nversion name so I will use three point one\nzero point zero and here we go. So what is\nhappening here as you can see the saying preparing\nto install into / HC / puppet / modules, right?\nSo it will be installed in this directories\napart from that. It is actually downloading\nthis from the forge a pi dot puppet labs.com.\nSo it is done now, that means that successfully\ninstall MySQL module from Puppet Fort. All\nright. Let me just clear my terminal and now\nI will install PHP modules for that. I'll\ntype puppet module install. - a PHP - - version\nthat is four point zero point zero - beta\n1 and here we go. So it is done. Now that\nmeans we have successfully installed two modules\none is PHP and other is my SQL. All right.\nLet me show you where it is present in my\nmachine. So what I'll do, I'll just hit an\nLS command and I'll show you in puppet modules.\nAnd here we go. So as you can see that there's\na my SQL module and PHP module that we have\njust downloaded from Puppet Foods. Now what\nI need to do is I have defined by SQL and\nPHP class, but I need to declare that in the\nsite dot PHP file present in the puppet manifest.\nSo for that what I will do I'll first use\nthe G edit editor you can use whatever editor\nthat you want. I'm saying it again and again,\nbut you can use whatever editor that you want.\nI personally prefer G edit and now manifest\nside dot p p and here we go. Now as I told\nyou earlier is well, I like my screen to be\nclean and nice. So I'll just remove this and\nover here. I will just declare the two classes.\nThat is my secret and PHP. Include my sequel.\nServer and the next line. I'll include the\nPHP class for that anti PHP. Just save it\nnow close it. Let me clear my terminal now\nwhat I'll do, I'll go to my puppet agent.\nAnd from there. I'll hit a command puppet\nagent - t that will pull the configurations\nfrom Puppet Master. So let us just proceed\nwith that. Let me first clear my terminal\nand now I'll tie puppet agent - t and here\nwe go. So we have successfully deployed PHP\nand MySQL using puppet. All right, let me\njust clear my terminal and I'll just confirm\nit by typing my sequel - we All right, this\nwill display the version now as just exit\nfrom here and now I'll show you the PHP versions\nof adult type PHP - version and here we go.\nAlright, so this means that we have successfully\ninstalled PHP and MySQL using puppet. So now\nlet me just give you a quick recap of what\nwe have discussed in love. All right. So first\nwe saw why we need configuration management.\nWhat are the various problems that were there\nbefore configuration management? And we understood\nthe importance of configuration management\nwith a use case of New York Stock Exchange.\nAll right, after that we saw what exactly\nconfiguration management is and we understood\na very important concept called infrastructure\nas code. Then we focused on various type of\nconfiguration management approaches namely\npush and pull then we saw various configuration\nmanagement tools are namely puppet chef ansible\nand Source tag after that. We focus on pop\nit and we saw what exactly puppet is its Master\nSlave architecture how puppet master and slave\ncommunicates all those things then we understood\nthe puppet code Basics. We understood what\nour resources what a class is Manifest modules\nand finally in our hands on part. I told you\nhow to deploy PHP and MySQL using puppet My\nname is Sato. And today we'll be talking about\nNagi ways. So let's move forward and have\na look at the agenda for today. So this is\nwhat we'll be discussing. Will Begin by understanding\nwhy we need continuous monitoring what is\ncontinuous monitoring and what are the various\ntools available for continuous monitoring.\nThen we are going to focus on Nagi OS we are\ngoing to look at its architecture how it works.\nWe are also going to look at one case study\nand finally in the demo. I will be showing\nyou how you can monitor a remote host using\nNRP, which is nothing but nagios remote plug-in\nexecutor. So I hope you all are clear with\nthe agenda. Let's move forward and we'll start\nby understanding why we need continuous monitoring.\nWell, there are multiple reasons guys, but\nI mentioned for very important reasons why\nwe need continuous monitoring. So let's have\na look at each of these one by one. The first\none is failure of see ICD pipelines since\ndevops is a buzzword in the industry right\nnow. And most of the organizations are using\ndevops practices. Obviously, they are implementing\nsee ICD pipelines or it is also called as\ndigital pipelines right now the idea behind\nthese SED pipeline is to make sure that the\nrelease should happen more frequently and\nit should be more stable in an automated fashion.\nRight because there are a lot of competitors\nyou might have in the market and you want\nto release your product before them. So agility\nis very very important. And that's why we\nuse eicd pipelines. Now when you implement\nsuch a pipeline you realize that there can't\nbe any manual intervention at any step in\nthe process or the entire pipeline slows down.\nSo you will basically defeat the entire purpose\nmanual monitoring slows down your deployment\nPipeline and increases the risk of performance\nproblems propagating in production, right?\nSo I hope you have understood this. If you\nnotice the three points that I've mentioned\nit's pretty self-explanatory rapid introduction\nof performance problems and errors, right\nbecause you are releasing software and more\nfrequently. So there has to be rapid introduction\nof performance problems rapid introduction\nof new endpoints causing monitoring issues.\nAgain, this is pretty self-explanatory then\nthe root cause analysis as a number of services\nexpands because you are releasing software\nmore frequently, right? So definitely the\nnumber Services are going to increase and\nthere's a lengthy root cause analysis, you\nknow, because of which you lose a lot of time,\nright? So let's move forward and we look at\nthe next reason why we need continuous monitoring.\nFor example, we have an application which\nis light, right? We have deployed it on the\nproduction server. Now. We are running a p.m.\nSolutions which is basically application performance\nmonitoring. We are monitoring our application\nhow the performance is. Is there any down\ntime all those things? Right? And then we\nfigure out certain issues with our applications\non performance issues now to go back basically\nto roll back and to incorporate those changes\nto remove those bugs developers are going\nto take some time because the process is huge\nbecause your application is already live,\nright? You cannot afford any downtime. Now,\nimagine what if before releasing the software\non a pre production server, which is nothing\nbut the replica of my production server. I\ncan run those APM solutions to figure out\nhow my application is going to perform and\nit actually goes live right so that way whatever\nissues of their developers will be notified\nbefore and they can take the corrective action.\nSo I hope you have understood my point. The\nnext thing is server Health cannot be compromised\nat any cost. So I think it's pretty obvious\nguys. Your application is running on a server.\nYou cannot afford any downtime in that particular\nserver or increase in the response time also,\nright. So you require some sort of a monitoring\nsystem to check your server Health as well.\nRight? What if your application goes down\nbecause you're so it isn't responding right?\nSo you don't want any scenario like that in\na world like today where everything is so\nDynamic, and the competition is growing. Exponentially.\nYou want to give best service to your customers,\nright? And I think so / health is very very\nimportant because that's where your application\nis running guys are not things. I have to\nstress too much on this right, so we basically\nrequire continuous monitoring of a server\nas well. Now, let me just give you a quick\nrecap of the things that we have discussed.\nSo we have understood why we need continuous\nmonitoring by looking at three four examples,\nright? The first thing is we solve what are\nthe issues with see ICD pipeline right? We\ncannot have any sort of manual intervention\nfor monitoring in source of bye. Because you're\ngoing to defeat the purpose of such pipeline.\nThen we saw that developers have to be notified\nabout the performance issues of the application\nbefore releasing it in the market. Then we\nsaw server Health cannot be compromised at\nany cost. Right? So these are the three major\nreasons why I think continuous monitoring\nis very important for most of the organization's\nright? Although there are many other reasons\nas well right now. Let's move forward and\nunderstand what exactly is continuous monitoring\nbecause we just talked a lot of scenarios\nwhere Manuel monitoring or a traditional monitoring\nprocesses are not going to be enough. Right?\nSo let us understand what exactly is continuous\nmonitoring and how is it different from what\nrelation process so basically continuous monitoring\ntools resolve any sort of system errors before\nthey have any negative impact on your business.\nIt can be low memory unreachable server, etc.\nEtc. Apart from that. They can also monitor\nthe business processes and the application\nas well as your server which we have just\ndiscussed. Right? So continuous monitoring\nis basically an effective system where The\nentire it infrastructure starting from your\napplication to your business process to your\nserver is monitored in an ongoing way and\nin an automated fashion, right? That's what\nbasically is the Crux of continuous monitoring.\nSo these are the multiple phases given to\nus by n is T for implementing continuous monitoring\nand is is basically National Institute of\nStandards and technology. So let me just take\nyou through each of these stages first thing\nis defined so in to basically develop a monitoring\nstrategy, then what you're going to do you\nare going to establish measures and Matrix\nand you also going to stablish monitoring\nand assessment frequencies at how frequently\nare going to monitor it right. Then you are\ngoing to implement whatever you have stablished\nthe plan that you have laid down. Then you're\ngoing to analyze data and report findings,\nright? So whatever issues that are there you're\ngoing to find that pose that you're going\nto respond and mitigate that error and finally\nyou're going to review and update the application\nor whatever you were monitoring right now.\nLet us move forward and patreon is also given\nus multiple phases involved in continuous\nmonitoring. So let us have a look at those\nold. So one by one The first thing is continuous\nDiscovery. So contentious Discovery is basically\ndiscovering in maintaining near real-time\ninventory of all networks and information\nassets, including hardware and software if\nI have to give an example basically identifying\nand tracking confidential and critical data\nstored on desktops laptops and servers. Right\nnext comes continuous assessment. It basically\nmeans automatically scanning and comparing\ninformation assets against industry and data\nrepositories determine oner abilities. That's\nthe entire point of continuous assessment.\nRight? So one way to do that is prioritizing\nfindings and providing detailed reports right\nby Department platform Network asset and vulnerability\ntype next comes continuous audit, so continuously\nevaluating your client server and network\ndevice configurations and comparing them with\nstandard policies is basically what continues\naudit is, right. So basically what you're\ngoing to do here is gain insights into problematic\ncontrols using patterns and access permission\nof sensitive data. Then comes continuous patching.\nIt means automatically deploying and updating\nsoftware to eliminate vulnerabilities and\nmaintain compliance. Right? So if I have to\ngive you an example may be correcting configuration\nsettings, including network access and provision\nsoftware according to end users role in policies.\nAll those things next comes continents reporting.\nSo aggregating the scanning results from different\ndepartments scan types and organizations into\none Central repository is basically what content\nis reporting is right for automatically analyzing\nand correlating unusual activities in compliance\nwith regulations. So I think it's pretty easy\nto understand if I have to repeat it once\nmore I would say continuous Discovery is basically\ndiscovering and maintaining an inventory a\nnear real-time inventory of all the network\nand information assets. Whether it's your\nHardware or software then continuous assessment\nmeans automatically scanning and comparing\nthe information assets from Gardens discovery\nthat we have seen against industry and data\nrepositories to determine vulnerabilities\ncontinuous audit is basically Continuously\nevaluating your client server and network\ndevice with configurations and comparing them\nwith standards and policies Contreras patching\nis automatically deploying and updating software\nto eliminate vulnerabilities and maintain\ncompliance right patching is basically your\nremedy kind of a thing where you actually\nrespond to the threats that you see or vulnerabilities\nthat you see in your application Garden is\nreporting is basically aggregating scanning\nresults from different departments scan types\nare organizations into one Central repository.\nSo these are nothing but the various phases\ninvolved in continuous monitoring. Let us\nhave a look at various continents monitoring\ntools available in the market. So these are\npretty famous tools. I think a lot of you\nmight have heard about these tools one is\nAmazon cloudwatch, which is nothing but a\nservice provided to us by AWS Splunk is also\nvery famous. And we have e LK and argue ways\nright CLK is basically elastic log stash and\nCabana in this session. We are going to focus\non argue is because it's a pretty mature to\nlot of companies have used this tool and it\nhas a major market share as well and it's\nbasically well suited for your entire it Whether\nit's your application or server or even it's\nyour business process now, let us have a look\nat what exactly is not your ways and how it\nworks. So now I give which is basically a\ntool used for continuous monitoring of systems\nyour application your services and business\nprocesses Etc in a devops culture right now\nin the event of failure. Nagios can alert\ntechnical staff of the problem allowing them\nto begin a remedy ation processes before outages\naffect business processes and users or customers.\nSo I hope you are getting my point. It can\nallow the technical staff of the problem and\nthey can begin remediation processes before\noutages affect their business process or end\nusers or customers right with the argues.\nYou don't have to explain why an answer in\ninfrastructure outage affect your organization's\nbottom line, right? So let us focus on the\ndiagram that is there in front of your screen.\nSo now use basically runs on a server usually\nas a Daemon or a service and it periodically\nruns plugins residing in the same server what\nthey do they basically contact hosts on servers\nor on your network or on the Internet. Now\none can view the status information using\nthe web interface and you can also receive\nemail or SMS notification if something goes\nwrong, right so basically nagas Damon behaves\nlike a scheduler that runs certain scripts\nat certain moments. It stores the results\nof those cribs and we'll run other scripts\nif these results change. I hope you are getting\nmy point here right now. If you're wondering\nwhat our plugins of these are nothing but\ncompiled executables or scripts. It can be\npearls great shell script Etc that can run\nfrom a command line to check the status of\na host or a service noun argue is uses the\nresults from the plugins to determine the\ncurrent status of the host. And so this is\non your network. Now, let us see various features\nof Naga ways. Let me just take you through\nall these features one by one. It's pretty\nscalable and secure and manageable as well.\nIt has a good log in database system. It automatically\nsends alerts which we just saw it. It takes\nnetwork errors and server crashes. It has\neasy writing plug-in. You can write your own\nplugins right based on. Requirement yours\nbusiness need then you can monitor your business\nprocess and it infrastructure with a single\npass guys issues can be fixed automatically.\nIf you have configured in such a way then\ndefinitely you can fix those issues automatically\nand it also has support for implementing redundant\nmonitoring posts. So I hope you are understood\nthese features there are many more but these\nare the pretty attractive features and why\nand argue s is so popular is because of these\nfeatures, let us now discuss the architecture\nof nagios in detail. So basically now argue\nis has a server agent architecture right now\nusually in a network an argue a server is\nrunning on a host which we just saw in the\nprevious diagram, right? So consider this\nas my host. So now I guess server is running\non a host and plugins interact with local\nand remote Hood. So here we have plugins.\nSo these will interact with the local resources\nor services and these will also interact with\nthe remote resources or services or host right.\nNow. These plugins will send the information\nto the scheduler which will display that in\nthe GUI right now. Let me repeat it. Again.\nNargis is build on a circuit. Good Agent architecture.\nRight and usually in argue is server is running\non a host and these plugins will interact\nwith the local host or services or even the\nremote host Services. Right? And these plugins\nwill send the information to the scheduler\nnagios process scheduler, which will then\ndisplay it on the web interface and if something\ngoes wrong the concern teams will be notified\nVia SMS or through email, right? So I think\nwe have covered quite a lot of theory. So\nlet me just go ahead and open my centralized\nvirtual machine where I've already installed\nnow. Gos, so let me just open my Center as\nvirtual machine first. So this is my Center\nis virtual machine guys. And this is how the\nnagios dashboard looks like. I'm running it\nat Port 8000. You can run it wherever you\nwant to explain that in the installation video\nhow you can install it now. If you notice\nthere are a lot of options on the left hand\nside you can you know, go ahead and play around\nwith it. You'll get a better idea. But let\nme just focus on few important ones. So here\nwe have a map option here, right? If you click\non that, then you can see that you have a\nlocal host and you have a remote host as well.\nMy nagas process is monitoring both the local\nhost and the remote host the remote host is\ncurrently down. That's why you see it like\nthis when I will be running it'll be showing\nyou how it basically looks like now if I go\nahead and click on host. You will see all\nthe hoes that I'm currently monitoring some\nmonitoring edureka and Local Host said Eureka\nis basically a remote server and Local Host\nis currently on which my Onaga server is running\nright? So obviously it is up at the other\nserver is down. If I click on Services, you\ncan see that these are the services that I'm\nmonitoring for my remote host our monitoring\nCPU load ping and SSH and for my Local Host.\nI'm watching current load current users HTTP\npaying root partition SSH swap usage in total\nprocesses. You can add as many services as\nyou want. All you have to do is change the\nhost dot CFG file, which I'm going to show\nyou later. But for now, let us go back to\nour slides will continue from there. So let\nme just give you a small recap of what all\nthings we have discussed. So we first saw\nwhy we need continuous monitoring. We saw\nvarious reasons why Industries need continuous\nmonitoring and how it is different from the\ntraditional monitoring systems. Then we saw\nwhat is exactly continuous monitoring and\nwhat are the various phases involved in implementing\na continuous monitoring strategy. Then we\nsaw what are the various continuous monitoring\ntools available in the market and we focus\non argue as we saw what is not gue base how\nit works? What is its architecture right.\nNow we're going to talk about something called\nis n RP e nagios remote plug-in executor of\nwhich is basically used for monitoring remote\nLinux or Unix machines. So it'll allow you\nto execute nagios plugins on those remote\nmachines. Now the main reason for doing this\nis to allow nog you wish to monitor local\nresources, you know, like CPU load memory\nusage Etc on remote machines now since these\npublic resources are not usually exposed to\nexternal machines and agent like NRP must\nbe installed on the remote Linux or Unix machines.\nSo even I have installed that in my Center\nice box, that's why I was able to monitor\nthe remote Linux host that I'm talking about.\nAlso. If you check out my nagas installation\nvideo, I have also explained how you can install\nNRP now if you notice the diagram here, so\nwhat we have is basically the Jake underscore\nn RP plug-in residing on the local monitoring\nmachine. This is your local monitoring machine,\nwhich we just saw right? So this is where\nmine argue our server is now the Czech underscore\nin RP plug-in resides in a local monitoring\nmachine where you're not arguing over is right.\nSo the one which we saw is basically my local\nmachine or you can say where my Naga server\nis, right? So this check underscoring RP plug-in\nresides on that particular machine now this\nNRP Daemon which you can see in the diagram\nruns on remote machine the remote Linux or\nUnix machine which in my case was edureka\nif you remember and since I didn't start that\nmachine so it was down right so that NRP Damon\nwill run on that particular machine now, there\nis a secure socket layer SSL connection between\nmonitoring host and the remote host you can\nsee it in the diagram as well the SSL connection,\nright? So what it is doing it is checking\nthe disk space load HTTP FTP remote services\non the other host site then these are local\nresources and services. So basically this\nis how an RP Works guys. Do you have and check\nunderscore an Plug in designing in the host\nmachine. You have NRP Daemon running on the\nremote machine. There's an SSL connection,\nright? Yeah, you have SSL connection and this\nNRP plug-in basically helps us to monitor\nthat remote machine. That's how it works.\nLet's look at one very interesting case study.\nThis is from bitten attics. And I found it\non the nagios website itself. So if you want\nto check out go ahead and check out their\nwebsite as well. They have pretty cool case\nstudies the power from Internet Explorer.\nSo there are a lot of other case studies on\ntheir website. So bit etics provides basically\nOutsource it management and Consulting to\nnonprofit or small to medium businesses right\nnow bitnet has got a project where they were\nsupposed to monitor an online store for an\ne-commerce retailer with a billion dollar\nannual revenue, which is huge guys. Now, it\nwas not only supposed to you know monitor\nthe store but it also needed to ensure that\nthe cart and the checkout functionality is\nworking fine and was also supposed to check\nfor website deformation and notify the necessary\nstaff if anything went wrong right seems like\nan easy task but let us see what are the Problems\nthat bitnet X phase now bitnet X hit a roadblock\nupon realizing that the clients data center\nwas located in New Jersey more than 500 miles\naway from their staff in New York, right?\nThere was a distance of 500 miles between\ntheir their staff is located and the data\ncenter. Now, let us see what are the problems\nthey face because of this now the two areas\nneeded a unique but at the same time a comprehensive\nmonitoring for their Dev test and prod environment\nof the same platform, right and the next challenge\nwas monitoring would be hampered by the firewall\nrestrictions between different applications\nsites functions Etc. So I think you have a\nlot of you know about this firewalls is basically\nsometimes can be a nightmare right apart from\nthat most of the notification that were sent\nto the client what ignored because mostly\nthose are false positive, right? So the client\ndidn't bother to even check those notifications\nnow, what was the solution? So the first solution\nthe thought is adding SSH firewall rules for\nNetwork Operation Center personnel and Equipment\nsecond is analyzing web pages to see if there's\nany problem with Occurrences the third and\nthe very important point was converting notification\nto nag, uh alerts and the problem that we\nsaw a false positive was completely removed\nwith this escalation logic. We're converting\nnot as notifications of Nargis alerts and\nescalations with specific time periods for\ndifferent groups, right? I hope you are getting\nmy point here now configuring event handlers\nto restart Services before notification, which\nwas basically a fixed for 90% of the issues\nand using nagios core and multiple servers\nat the NOC facility and each Target is worker\nwas deployed at the application Level with\ndirect access to the host. So whatever bag\nis worker or agent or remote machine we have\nwas deployed at the application Level and\nhad the direct access to the host or the master\nwhatever you want to call it and they have\nimplemented the same architecture for production\nquality assurance staging and development\nenvironments. Now, let's see what was the\nresult now because of this there was a dramatic\nreduction in notifications. Thanks to the\nevent handlers new configuration. Then there\nwas an increase in up time from 85% Early\n298 personally, which is significant guys,\nright then they saw a dramatic reduction in\nfalse positive because if the escalation is\nlogic that I was just talking about then fourth\npoint is estimating the need to log into multiple\nboxes and change configuration file. Thanks\nto nagas configuration maintained in a central\nrepository and post automatically to appropriate\nservice fourth point is estimating the need\nto log into multiple boxes and change the\nconfiguration files and that happens because\nthe inauguration configuration maintained\nin a central repository or essential master\nand can be pushed automatically to all these\nslaves to all the servers are slaves are agents\nwhatever you want to call it. So this was\na result of using nog u.s. Right now is the\ntime to check out a demo where what I'll be\ndoing is I'll be monitoring couple of services\nactually more than a couple of services offer\nremote Linux machine through mine argue Ace\nhose which I just showed you right? So from\nthere, I'll be monitoring a remote Linux host\nCaldera Rekha, and I'll be monitoring like\n34 Services you can have whatever you want\nand let me just show you watch the process\nonce you have installed. I guess what you\nneed to do in order to make sure that you\nhave remote host or a remote machine being\nmonitored by your nagios host. Now in order\nto execute this demo, which I'm going to show\nyou. You must have lamp stack on your system.\nRight Linux Apache MySQL and PHP and I'm going\nto use Center West 7 here. Let me just quickly\nopen my Center as virtual machine and we'll\nproceed from there. So guys, this is my sent\nto us virtualbox where I've already installed\nargue as I've told you earlier as well in\nthis is where mine argue is host is running\nor you can see the NOG your server is running\nand you can see the dashboard in front of\nyour screen as well. Right? So let me just\nquickly open the terminal first me clear the\nscreen. So let me just show you where I've\ninstalled argue is that this is the path right?\nIf you notice in front of your screen, it's\nin user local Nagi OS what I can do is just\nclear the screen and I'll show you what our\nlaw directories are inside this so we can\ngo inside this Etsy directory. And inside\nthis I'm going to go inside the objects directory,\nright? So why I'm doing this is basically\nif I want to add any command for example Ample\nI want to add the check underscore n RP command.\nThat's how I'm going to monitor my remote\nLinux host if you remember in the diagram,\nright? So that's what I'm going to do. I'm\ngoing to add that particular command. I've\nalready done that. So let me just show you\nhow it looks so just type generator you can\nchoose whatever editor that you like and go\ninside the commands dot CFG file and let me\njust open it. So these are the various commands\nthat I was talking about. Now, you can just\nhave a look at all these commands. This is\nto basically notify host a by email if anything\ngoes down anything goes wrong in the host.\nThis is for service. Basically it'll notify\nif there's any problem with the service through\nemail. This will check if my host machine\nis alive. I mean, is it up and running now\nthis command is basically to check the disk\nspace like the local disk, then load rights.\nYou can see all of these things here swap\nFTP. So I've added these commands and you\ncan have a look at all of these commands which\nI've mentioned here and the last command you\nsee is I've added manually because all these\ncommands once you install your get it by default,\nbut the IP take underscore n RP which I'm\nhighlighting right now with my cursor is something\nwhich I have added in order to make sure that\nI will monitor the remote clinics horse. Now,\nlet me just go ahead and save this right.\nLet me clear my screen again and I'll go back\nto my nagios directory. Let me share my screen\nagain now, basically what this will do is\nthis will allow you to use a check and the\nscore an RP command in you're not give service\ndefinitions right. Now. What we need to do\nis update the NRP configuration file. So use\nyour favorite editor and open NR P dot c f\ng which you will find in this particular directory\nitself. So all I have to do is first I'll\nhit LS and then I can just check out the set\nC directory. Now if you notice there is an\nNR P dot CFG file, right? I've already added\nit. So I'll just go ahead and show you what\nthe help of G edit or you can use whatever\neditor that you prefer now over here. You\nneed to find this allowed host directive and\nadd the private IP address of your Nas device\nover to the gamma delimited list is Scroll\ndown you will find something all allowed host.\nRight? So just add a comma and start with\nthe IP address of the machine that you want\nto monitor So currently let me just open it\nonce more. So I'm going to use sudo because\nI don't have the Privileges now in this allowed\nhost directory. All I have to do is comma\nand the IP address of the host said I want\nto monitor so it is one. Ninety two dot one\nsixty eight dot 1.21. Just go ahead save it\ncome back clear the terminal now save and\nexit. Now this configures in RP to accept\nrequests from your Nas device over why it's\nprivate IP address, right and then just go\nahead and restart NRP to put the changes into\neffect now on you and argue server. You need\nto create a configuration file for each of\nthe remote host that you monitor as I was\nmentioning before is well now where you're\ngoing to find it in HC servers directory and\nlet me just go ahead and open that for you.\nLet me go to the server's directory. Now if\nyou notice here, there is a deer a card or\nCFG file. This is basically the host. We'll\nbe monitoring right now. If I go ahead and\nshow you what I have written here is basically\nfirst what I have done is I have defined the\nhost. It's basically a Linux server and the\nname of that. So what is Eddie raker allies?\nWhatever you want to give this is the IP address\nmaximum check attempts the periods. I want\nto check it 24/7 notification interval is\nwhat I have mentioned here and notification\nperiod so this is basically about all my host\nnow in that hose what all services are going\nto monitor our new monitor generic services,\nlike pink then I want to monitor SSH then\nI'm going to monitor CPU load is when these\nare the three services that I'll be monitoring\nand you can find that in your side C. So was\nthat a tree over there? You have to create\na proper configuration file for all of the\nhose that you want to monitor Let Me Clear\nMy terminal again the just to show you. My\nremote machine is well, let me just open that.\nSo this is my remote machine guys over here.\nI've already installed NRP so over here, I'm\njust going to show you how you can restart\nan RP systemctl restart. And rpe service and\nhere we go the asking for the password. I've\ngiven that a man not a piece of its has started\nactually have restarted again. I've already\nstarted it before as well. Let me just show\nyou how my nagios dashboard looks like in\nmy server. Now. This is my dashboard again.\nIf I go to my host tab, you can see that we\nare monitoring to host a dinner a kind localhost.\nErica is the one which I just showed you which\nis up and running right? I can go ahead and\ncheck out this map Legacy map viewer as well\nwhich basically tells me that my a direct\nas remote host then also I have various sources\nthat are monitoring. So if you remember I\nwas monitoring CPU load ping and SSH which\nyou can see it over here as well. Right? So\nthis is all it for today's session. I hope\nyou guys have enjoyed listening to this video.\nIf you have any questions, you can go ahead\nand mention that in the comment section. And\nif you're looking to gain hands-on experience\nand devops, you can go ahead and check out\nour website www.guitariq.com / devops. You\ncan view upcoming patches and enroll for the\nThat will set you on the path of becoming\na successful devops engineer, and if you're\nstill curious to know more about the divorce\nroles and responsibilities, you can check\nout the videos mentioned in the description.\nThank you and happy learning.\n",
  "words": [
    "welcome",
    "everyone",
    "edureka",
    "youtube",
    "channel",
    "name",
    "saurabh",
    "today",
    "taking",
    "entire",
    "session",
    "devops",
    "full",
    "course",
    "designed",
    "crash",
    "course",
    "way",
    "starts",
    "basic",
    "topics",
    "also",
    "covers",
    "advanced",
    "ones",
    "covering",
    "stages",
    "tools",
    "involved",
    "devops",
    "modules",
    "structured",
    "start",
    "understanding",
    "meaning",
    "devops",
    "methodology",
    "devops",
    "right",
    "questions",
    "answered",
    "first",
    "module",
    "going",
    "talk",
    "git",
    "works",
    "meaning",
    "version",
    "control",
    "achieve",
    "help",
    "git",
    "session",
    "taken",
    "miss",
    "reyshma",
    "post",
    "teaching",
    "create",
    "really",
    "cool",
    "digital",
    "pipelines",
    "help",
    "jenkins",
    "maven",
    "git",
    "github",
    "talking",
    "famous",
    "software",
    "containerization",
    "platform",
    "docker",
    "post",
    "vardhan",
    "teaching",
    "kubernetes",
    "orchestrating",
    "docker",
    "container",
    "clusters",
    "going",
    "talk",
    "configuration",
    "management",
    "using",
    "ansible",
    "puppet",
    "tools",
    "really",
    "famous",
    "market",
    "ansible",
    "pretty",
    "trending",
    "whereas",
    "puppet",
    "mature",
    "market",
    "since",
    "2005",
    "finally",
    "teaching",
    "perform",
    "continuous",
    "monitoring",
    "help",
    "nagios",
    "let",
    "start",
    "session",
    "guys",
    "begin",
    "understanding",
    "devops",
    "discussing",
    "today",
    "begin",
    "understanding",
    "need",
    "devops",
    "everything",
    "exists",
    "reason",
    "try",
    "figure",
    "reason",
    "going",
    "see",
    "various",
    "limitations",
    "traditional",
    "software",
    "delivery",
    "methodologies",
    "devops",
    "overcomes",
    "limitations",
    "going",
    "focus",
    "exactly",
    "devops",
    "methodology",
    "various",
    "stages",
    "tools",
    "involved",
    "devops",
    "finally",
    "hands",
    "part",
    "tell",
    "create",
    "docker",
    "image",
    "build",
    "test",
    "even",
    "push",
    "onto",
    "docker",
    "hub",
    "automated",
    "fashion",
    "using",
    "jenkins",
    "hope",
    "clear",
    "agenda",
    "let",
    "move",
    "forward",
    "guys",
    "see",
    "need",
    "devops",
    "guys",
    "let",
    "start",
    "waterfall",
    "model",
    "devops",
    "organizations",
    "using",
    "particular",
    "software",
    "development",
    "methodology",
    "first",
    "documented",
    "year",
    "1970",
    "royce",
    "first",
    "public",
    "documented",
    "life",
    "cycle",
    "model",
    "waterfall",
    "model",
    "describes",
    "development",
    "method",
    "linear",
    "sequential",
    "waterfall",
    "development",
    "distinct",
    "goals",
    "phase",
    "development",
    "must",
    "thinking",
    "name",
    "waterfall",
    "model",
    "pretty",
    "similar",
    "waterfall",
    "happens",
    "waterfall",
    "water",
    "flowed",
    "edge",
    "cliff",
    "turn",
    "back",
    "case",
    "waterfall",
    "development",
    "strategy",
    "well",
    "application",
    "go",
    "next",
    "stage",
    "previous",
    "stage",
    "complete",
    "let",
    "us",
    "focus",
    "various",
    "stages",
    "involved",
    "waterfall",
    "methodology",
    "notice",
    "diagram",
    "front",
    "screen",
    "notice",
    "almost",
    "like",
    "waterfall",
    "even",
    "visualize",
    "ladder",
    "well",
    "first",
    "happens",
    "client",
    "gives",
    "requirement",
    "application",
    "gather",
    "requirement",
    "try",
    "analyze",
    "happens",
    "design",
    "application",
    "application",
    "going",
    "look",
    "like",
    "start",
    "writing",
    "code",
    "application",
    "build",
    "say",
    "build",
    "involves",
    "multiple",
    "think",
    "compiling",
    "application",
    "know",
    "unit",
    "testing",
    "even",
    "involves",
    "packaging",
    "well",
    "deployed",
    "onto",
    "test",
    "servers",
    "testing",
    "deployed",
    "onto",
    "broad",
    "service",
    "release",
    "application",
    "life",
    "monitored",
    "know",
    "small",
    "looks",
    "perfect",
    "trust",
    "guys",
    "time",
    "think",
    "happen",
    "use",
    "fine",
    "let",
    "give",
    "disadvantages",
    "model",
    "disadvantages",
    "first",
    "one",
    "application",
    "testing",
    "stage",
    "difficult",
    "go",
    "back",
    "change",
    "something",
    "well",
    "thought",
    "concept",
    "stage",
    "mean",
    "suppose",
    "written",
    "code",
    "entire",
    "application",
    "testing",
    "bug",
    "particular",
    "application",
    "order",
    "remove",
    "bug",
    "need",
    "go",
    "entire",
    "source",
    "code",
    "application",
    "used",
    "take",
    "lot",
    "time",
    "right",
    "big",
    "limitation",
    "waterfall",
    "model",
    "apart",
    "working",
    "software",
    "produced",
    "late",
    "life",
    "cycle",
    "saw",
    "discussing",
    "various",
    "stages",
    "high",
    "amount",
    "risk",
    "uncertainty",
    "means",
    "product",
    "life",
    "market",
    "bug",
    "downtime",
    "go",
    "entire",
    "source",
    "code",
    "application",
    "go",
    "entire",
    "process",
    "waterfall",
    "model",
    "saw",
    "order",
    "produce",
    "working",
    "software",
    "right",
    "used",
    "take",
    "lot",
    "time",
    "lot",
    "risk",
    "uncertainty",
    "imagine",
    "upgraded",
    "software",
    "stack",
    "production",
    "environment",
    "led",
    "failure",
    "application",
    "go",
    "back",
    "previous",
    "table",
    "version",
    "used",
    "also",
    "take",
    "lot",
    "time",
    "good",
    "model",
    "complex",
    "object",
    "oriented",
    "projects",
    "suitable",
    "project",
    "requirements",
    "moderate",
    "high",
    "risk",
    "changing",
    "mean",
    "suppose",
    "client",
    "given",
    "requirement",
    "web",
    "application",
    "today",
    "taken",
    "sweet",
    "time",
    "condition",
    "release",
    "application",
    "say",
    "one",
    "year",
    "one",
    "year",
    "market",
    "changed",
    "client",
    "want",
    "web",
    "application",
    "looking",
    "mobile",
    "application",
    "type",
    "model",
    "suitable",
    "requirements",
    "moderate",
    "high",
    "risk",
    "changing",
    "question",
    "popped",
    "screen",
    "jessica",
    "asking",
    "iteration",
    "waterfall",
    "model",
    "goes",
    "stages",
    "well",
    "tration",
    "jessica",
    "first",
    "agile",
    "methodology",
    "devops",
    "waterfall",
    "model",
    "right",
    "trations",
    "stage",
    "complete",
    "good",
    "going",
    "next",
    "stage",
    "trations",
    "talking",
    "application",
    "life",
    "bug",
    "downtime",
    "time",
    "based",
    "kind",
    "box",
    "application",
    "suppose",
    "might",
    "bug",
    "flawed",
    "version",
    "software",
    "stack",
    "installed",
    "production",
    "environment",
    "probably",
    "upgraded",
    "version",
    "application",
    "working",
    "properly",
    "need",
    "roll",
    "back",
    "previous",
    "table",
    "version",
    "software",
    "stack",
    "production",
    "environment",
    "one",
    "bug",
    "apart",
    "might",
    "bugs",
    "related",
    "code",
    "check",
    "entire",
    "source",
    "code",
    "application",
    "look",
    "roll",
    "back",
    "incorporate",
    "feedback",
    "got",
    "used",
    "take",
    "lot",
    "time",
    "right",
    "hope",
    "answers",
    "question",
    "right",
    "finally",
    "answer",
    "questions",
    "doubt",
    "guys",
    "go",
    "ahead",
    "ask",
    "find",
    "questions",
    "right",
    "hope",
    "understood",
    "relation",
    "waterfall",
    "model",
    "various",
    "limitations",
    "waterfall",
    "model",
    "going",
    "focus",
    "next",
    "methodology",
    "called",
    "agile",
    "methodology",
    "agile",
    "methodology",
    "practice",
    "promotes",
    "continuous",
    "iteration",
    "development",
    "testing",
    "throughout",
    "software",
    "development",
    "life",
    "cycle",
    "project",
    "development",
    "testing",
    "application",
    "used",
    "happen",
    "continuously",
    "agile",
    "methodology",
    "mean",
    "focus",
    "diagram",
    "front",
    "screen",
    "get",
    "feedback",
    "testing",
    "done",
    "previous",
    "iteration",
    "design",
    "application",
    "develop",
    "test",
    "discover",
    "things",
    "incorporate",
    "application",
    "design",
    "develop",
    "multiple",
    "trations",
    "involved",
    "development",
    "testing",
    "particular",
    "application",
    "cinestyle",
    "methodology",
    "project",
    "broken",
    "several",
    "trations",
    "tration",
    "time",
    "duration",
    "generally",
    "2",
    "8",
    "weeks",
    "end",
    "iteration",
    "working",
    "delivered",
    "agile",
    "methodology",
    "nutshell",
    "let",
    "go",
    "ahead",
    "compare",
    "waterfall",
    "model",
    "notice",
    "diagram",
    "front",
    "screen",
    "waterfall",
    "model",
    "pretty",
    "linear",
    "pretty",
    "straight",
    "see",
    "diagram",
    "analyze",
    "requirements",
    "plan",
    "design",
    "build",
    "test",
    "finally",
    "deploy",
    "onto",
    "processor",
    "release",
    "talk",
    "agile",
    "methodology",
    "design",
    "build",
    "testing",
    "part",
    "happening",
    "continously",
    "writing",
    "code",
    "building",
    "application",
    "testing",
    "continuously",
    "several",
    "iterations",
    "involved",
    "particular",
    "stage",
    "final",
    "testing",
    "done",
    "deployed",
    "onto",
    "broad",
    "service",
    "release",
    "right",
    "agile",
    "methodology",
    "basically",
    "breaks",
    "entire",
    "software",
    "delivery",
    "life",
    "cycle",
    "small",
    "sprains",
    "iterations",
    "call",
    "due",
    "development",
    "testing",
    "part",
    "software",
    "delivery",
    "life",
    "cycle",
    "used",
    "happen",
    "continously",
    "let",
    "move",
    "forward",
    "going",
    "focus",
    "various",
    "limitations",
    "agile",
    "methodology",
    "first",
    "biggest",
    "limitation",
    "agile",
    "methodology",
    "deaf",
    "part",
    "team",
    "pretty",
    "agile",
    "right",
    "development",
    "testing",
    "used",
    "happen",
    "continuously",
    "talk",
    "deployment",
    "continuous",
    "still",
    "lot",
    "conflicts",
    "happening",
    "devon",
    "side",
    "company",
    "dev",
    "team",
    "wants",
    "agility",
    "whereas",
    "ops",
    "team",
    "want",
    "stability",
    "common",
    "conflict",
    "happens",
    "lot",
    "actually",
    "relate",
    "code",
    "works",
    "fine",
    "developers",
    "laptop",
    "reaches",
    "production",
    "bug",
    "application",
    "work",
    "production",
    "know",
    "inconsistency",
    "computing",
    "environment",
    "caused",
    "due",
    "operations",
    "team",
    "dev",
    "team",
    "used",
    "fight",
    "lot",
    "lot",
    "conflicts",
    "guys",
    "time",
    "happening",
    "agile",
    "methodology",
    "made",
    "deaf",
    "part",
    "company",
    "pretty",
    "agile",
    "talk",
    "side",
    "company",
    "needed",
    "solution",
    "order",
    "solve",
    "problem",
    "discussed",
    "right",
    "hope",
    "able",
    "understand",
    "kind",
    "problem",
    "focusing",
    "go",
    "back",
    "previous",
    "diagram",
    "well",
    "notice",
    "design",
    "build",
    "test",
    "say",
    "development",
    "building",
    "testing",
    "part",
    "continuous",
    "right",
    "deployment",
    "still",
    "linear",
    "need",
    "deploy",
    "manually",
    "various",
    "products",
    "overs",
    "happening",
    "agile",
    "methodology",
    "right",
    "error",
    "talking",
    "busy",
    "application",
    "working",
    "fine",
    "mean",
    "application",
    "life",
    "software",
    "stack",
    "production",
    "environment",
    "work",
    "properly",
    "go",
    "back",
    "change",
    "something",
    "production",
    "environment",
    "used",
    "take",
    "lot",
    "time",
    "example",
    "know",
    "upgraded",
    "particular",
    "software",
    "stack",
    "application",
    "doll",
    "working",
    "fails",
    "work",
    "go",
    "back",
    "previous",
    "table",
    "version",
    "software",
    "stack",
    "operations",
    "team",
    "taking",
    "lot",
    "time",
    "go",
    "login",
    "scripts",
    "written",
    "order",
    "provision",
    "infrastructure",
    "let",
    "give",
    "quick",
    "recap",
    "things",
    "discussed",
    "till",
    "discussed",
    "quite",
    "lot",
    "history",
    "started",
    "waterfall",
    "model",
    "traditional",
    "waterfall",
    "model",
    "understood",
    "various",
    "stages",
    "limitations",
    "waterfall",
    "mode",
    "went",
    "ahead",
    "understood",
    "exactly",
    "design",
    "methodology",
    "different",
    "waterfall",
    "model",
    "various",
    "limitations",
    "agile",
    "methodology",
    "discussed",
    "till",
    "going",
    "look",
    "solution",
    "problems",
    "discussed",
    "solution",
    "none",
    "divorce",
    "divorce",
    "basically",
    "software",
    "development",
    "strategy",
    "bridges",
    "gap",
    "deaf",
    "side",
    "offside",
    "company",
    "devops",
    "basically",
    "term",
    "group",
    "concepts",
    "new",
    "half",
    "catalyze",
    "movement",
    "rapidly",
    "spreading",
    "well",
    "technical",
    "community",
    "like",
    "new",
    "popular",
    "term",
    "people",
    "may",
    "confused",
    "sometimes",
    "contradictory",
    "impressions",
    "let",
    "tell",
    "guys",
    "devops",
    "technology",
    "methodology",
    "basically",
    "devops",
    "practice",
    "equated",
    "study",
    "building",
    "evolving",
    "operating",
    "rapidly",
    "changing",
    "systems",
    "scale",
    "let",
    "put",
    "simpler",
    "terms",
    "devops",
    "practice",
    "operations",
    "development",
    "engineers",
    "participating",
    "together",
    "entire",
    "software",
    "life",
    "cycle",
    "design",
    "development",
    "process",
    "production",
    "support",
    "also",
    "say",
    "devops",
    "also",
    "characterized",
    "operation",
    "staff",
    "making",
    "use",
    "many",
    "techniques",
    "developers",
    "system",
    "work",
    "explain",
    "definition",
    "relevant",
    "saying",
    "devops",
    "characterized",
    "operation",
    "staff",
    "making",
    "use",
    "many",
    "techniques",
    "developers",
    "systems",
    "work",
    "seven",
    "explain",
    "infrastructure",
    "code",
    "understand",
    "using",
    "particular",
    "definition",
    "know",
    "devops",
    "software",
    "development",
    "strategy",
    "bridges",
    "gap",
    "dev",
    "part",
    "upside",
    "company",
    "helps",
    "us",
    "deliver",
    "good",
    "quality",
    "software",
    "time",
    "happens",
    "happens",
    "various",
    "stages",
    "tools",
    "involved",
    "des",
    "moines",
    "diagram",
    "nothing",
    "infinite",
    "loop",
    "everything",
    "happens",
    "continuously",
    "dev",
    "ops",
    "guys",
    "everything",
    "starting",
    "coding",
    "testing",
    "deployment",
    "monitoring",
    "everything",
    "happening",
    "continuously",
    "various",
    "tools",
    "involved",
    "devops",
    "methodologic",
    "right",
    "knowledge",
    "tools",
    "important",
    "divorce",
    "engineer",
    "also",
    "use",
    "tools",
    "architect",
    "software",
    "delivery",
    "lifecycle",
    "get",
    "maximum",
    "output",
    "right",
    "mean",
    "know",
    "good",
    "knowledge",
    "jenkins",
    "gate",
    "docker",
    "become",
    "divorce",
    "engineer",
    "true",
    "know",
    "use",
    "know",
    "use",
    "get",
    "maximum",
    "output",
    "hope",
    "got",
    "point",
    "trying",
    "say",
    "next",
    "slide",
    "discussing",
    "various",
    "stages",
    "involved",
    "devops",
    "fine",
    "let",
    "move",
    "forward",
    "guys",
    "going",
    "focus",
    "various",
    "stages",
    "involved",
    "divorce",
    "various",
    "stages",
    "involved",
    "devops",
    "let",
    "take",
    "stages",
    "one",
    "one",
    "starting",
    "version",
    "control",
    "discussing",
    "stages",
    "one",
    "one",
    "well",
    "let",
    "give",
    "entire",
    "picture",
    "stages",
    "one",
    "slide",
    "first",
    "version",
    "control",
    "basically",
    "maintaining",
    "different",
    "versions",
    "code",
    "mean",
    "suppose",
    "multiple",
    "developers",
    "writing",
    "code",
    "particular",
    "application",
    "know",
    "developer",
    "made",
    "commits",
    "time",
    "commits",
    "actually",
    "causing",
    "error",
    "revert",
    "back",
    "previous",
    "commit",
    "hope",
    "getting",
    "point",
    "point",
    "manage",
    "source",
    "code",
    "suppose",
    "developer",
    "made",
    "commit",
    "commit",
    "causing",
    "error",
    "know",
    "developer",
    "made",
    "commit",
    "time",
    "made",
    "comment",
    "code",
    "editing",
    "happened",
    "right",
    "questions",
    "answered",
    "use",
    "version",
    "control",
    "tools",
    "like",
    "git",
    "subversion",
    "xxxx",
    "going",
    "focus",
    "getting",
    "course",
    "continuous",
    "integration",
    "continuous",
    "integration",
    "basically",
    "building",
    "application",
    "continuously",
    "mean",
    "suppose",
    "developer",
    "made",
    "change",
    "source",
    "code",
    "continuous",
    "integration",
    "server",
    "able",
    "pull",
    "code",
    "prepare",
    "built",
    "say",
    "build",
    "people",
    "misconception",
    "know",
    "compiling",
    "source",
    "code",
    "true",
    "guys",
    "includes",
    "everything",
    "starting",
    "compiling",
    "source",
    "code",
    "validating",
    "source",
    "code",
    "code",
    "review",
    "unit",
    "testing",
    "integration",
    "testing",
    "etc",
    "etc",
    "even",
    "packaging",
    "application",
    "well",
    "comes",
    "continuous",
    "delivery",
    "continuous",
    "integration",
    "tool",
    "using",
    "suppose",
    "jenkins",
    "jenkins",
    "application",
    "built",
    "deployed",
    "onto",
    "test",
    "servers",
    "testing",
    "perform",
    "know",
    "user",
    "acceptance",
    "test",
    "end",
    "user",
    "testing",
    "whether",
    "call",
    "using",
    "tools",
    "like",
    "selenium",
    "right",
    "performing",
    "automation",
    "testing",
    "done",
    "deployed",
    "onto",
    "process",
    "servers",
    "release",
    "right",
    "called",
    "continuous",
    "deployment",
    "using",
    "configuration",
    "management",
    "tools",
    "basically",
    "provision",
    "infrastructure",
    "provision",
    "prada",
    "environment",
    "let",
    "tell",
    "guys",
    "continuous",
    "deployment",
    "something",
    "good",
    "practice",
    "releasing",
    "product",
    "market",
    "might",
    "multiple",
    "checks",
    "want",
    "right",
    "might",
    "multiple",
    "testings",
    "want",
    "want",
    "automated",
    "right",
    "continuous",
    "deployment",
    "something",
    "preferred",
    "continuous",
    "delivery",
    "go",
    "ahead",
    "manually",
    "use",
    "configuration",
    "management",
    "tools",
    "like",
    "puppet",
    "chef",
    "ansible",
    "salts",
    "tag",
    "even",
    "use",
    "docker",
    "similar",
    "purpose",
    "go",
    "ahead",
    "deploy",
    "onto",
    "crossovers",
    "release",
    "application",
    "live",
    "continuously",
    "monitored",
    "tools",
    "like",
    "nagi",
    "os",
    "splunk",
    "provide",
    "relevant",
    "feedback",
    "concern",
    "teams",
    "right",
    "various",
    "stages",
    "involved",
    "devops",
    "right",
    "let",
    "go",
    "back",
    "clear",
    "doubts",
    "various",
    "stages",
    "scheduled",
    "various",
    "jobs",
    "schedule",
    "jenkins",
    "continuous",
    "integration",
    "server",
    "jenkins",
    "moment",
    "developer",
    "makes",
    "change",
    "source",
    "code",
    "take",
    "code",
    "trigger",
    "built",
    "using",
    "tools",
    "like",
    "maven",
    "gradle",
    "done",
    "deploy",
    "onto",
    "test",
    "servers",
    "testing",
    "end",
    "user",
    "testing",
    "using",
    "tools",
    "like",
    "selenium",
    "etc",
    "happens",
    "automatically",
    "take",
    "tested",
    "application",
    "deploy",
    "onto",
    "process",
    "servers",
    "release",
    "right",
    "continuously",
    "monitored",
    "tools",
    "like",
    "nagi",
    "plunky",
    "lk",
    "cetera",
    "et",
    "cetera",
    "jenkins",
    "basically",
    "heart",
    "devops",
    "life",
    "cycle",
    "gives",
    "nice",
    "360",
    "degree",
    "view",
    "entire",
    "software",
    "delivery",
    "life",
    "cycle",
    "ui",
    "go",
    "ahead",
    "look",
    "application",
    "currently",
    "right",
    "stage",
    "right",
    "testing",
    "done",
    "things",
    "go",
    "ahead",
    "see",
    "jenkins",
    "dashboard",
    "right",
    "might",
    "multiple",
    "jobs",
    "running",
    "jenkins",
    "dashboard",
    "see",
    "gives",
    "good",
    "picture",
    "entire",
    "software",
    "delivery",
    "life",
    "cycle",
    "uh",
    "worry",
    "going",
    "discuss",
    "stages",
    "detail",
    "move",
    "forward",
    "going",
    "discuss",
    "stages",
    "one",
    "one",
    "eating",
    "source",
    "code",
    "management",
    "even",
    "call",
    "us",
    "version",
    "control",
    "happens",
    "source",
    "code",
    "management",
    "two",
    "types",
    "source",
    "code",
    "management",
    "approaches",
    "one",
    "called",
    "centralized",
    "version",
    "control",
    "another",
    "one",
    "called",
    "distributed",
    "version",
    "control",
    "source",
    "code",
    "management",
    "imagine",
    "multiple",
    "developers",
    "writing",
    "code",
    "application",
    "bug",
    "introduced",
    "know",
    "commits",
    "caused",
    "error",
    "revert",
    "back",
    "previous",
    "version",
    "code",
    "order",
    "solve",
    "issues",
    "source",
    "code",
    "management",
    "tools",
    "introduced",
    "two",
    "types",
    "source",
    "code",
    "management",
    "tools",
    "one",
    "called",
    "centralized",
    "version",
    "control",
    "another",
    "distributed",
    "version",
    "control",
    "let",
    "discuss",
    "centralized",
    "version",
    "control",
    "first",
    "centralized",
    "version",
    "control",
    "system",
    "uses",
    "central",
    "server",
    "store",
    "files",
    "enables",
    "team",
    "collaboration",
    "works",
    "single",
    "repository",
    "users",
    "directly",
    "access",
    "central",
    "server",
    "happens",
    "guys",
    "every",
    "developer",
    "working",
    "copy",
    "working",
    "directory",
    "moment",
    "want",
    "make",
    "change",
    "source",
    "code",
    "go",
    "ahead",
    "make",
    "comment",
    "shared",
    "repository",
    "right",
    "even",
    "update",
    "working",
    "know",
    "pulling",
    "code",
    "repository",
    "well",
    "repository",
    "diagram",
    "nose",
    "noticing",
    "indicates",
    "central",
    "server",
    "could",
    "local",
    "remote",
    "directly",
    "connected",
    "programmers",
    "workstation",
    "see",
    "every",
    "programmer",
    "extract",
    "update",
    "workstation",
    "data",
    "present",
    "repository",
    "even",
    "make",
    "changes",
    "data",
    "committed",
    "repository",
    "every",
    "operation",
    "performed",
    "directly",
    "central",
    "server",
    "central",
    "repository",
    "even",
    "though",
    "seems",
    "pretty",
    "convenient",
    "maintain",
    "single",
    "repository",
    "lot",
    "drawbacks",
    "tell",
    "drawbacks",
    "let",
    "tell",
    "advantage",
    "first",
    "anyone",
    "makes",
    "comment",
    "repository",
    "commit",
    "id",
    "associated",
    "always",
    "commit",
    "message",
    "know",
    "person",
    "made",
    "commit",
    "time",
    "code",
    "basically",
    "right",
    "always",
    "revert",
    "back",
    "let",
    "discuss",
    "disadvantages",
    "first",
    "locally",
    "available",
    "meaning",
    "always",
    "need",
    "connected",
    "network",
    "perform",
    "action",
    "always",
    "available",
    "locally",
    "right",
    "need",
    "connected",
    "sort",
    "network",
    "basically",
    "since",
    "everything",
    "centralized",
    "case",
    "central",
    "server",
    "getting",
    "crashed",
    "corrupted",
    "result",
    "losing",
    "entire",
    "data",
    "project",
    "right",
    "serious",
    "issue",
    "guys",
    "one",
    "reasons",
    "industries",
    "prefer",
    "centralized",
    "version",
    "control",
    "system",
    "talk",
    "distributed",
    "version",
    "control",
    "system",
    "systems",
    "necessary",
    "rely",
    "central",
    "server",
    "store",
    "versions",
    "project",
    "file",
    "distributed",
    "version",
    "control",
    "system",
    "every",
    "contributor",
    "local",
    "copy",
    "clone",
    "main",
    "repository",
    "see",
    "highlighting",
    "cursor",
    "right",
    "everyone",
    "maintains",
    "local",
    "repository",
    "contains",
    "files",
    "metadata",
    "present",
    "main",
    "repository",
    "see",
    "diagram",
    "well",
    "every",
    "programmer",
    "maintains",
    "local",
    "repository",
    "actually",
    "copy",
    "clone",
    "central",
    "repository",
    "hard",
    "drive",
    "commit",
    "update",
    "local",
    "repository",
    "without",
    "interference",
    "update",
    "local",
    "repositories",
    "new",
    "data",
    "coming",
    "central",
    "server",
    "operation",
    "called",
    "pull",
    "effect",
    "changes",
    "main",
    "repository",
    "operation",
    "called",
    "push",
    "write",
    "operation",
    "called",
    "push",
    "local",
    "post",
    "must",
    "thinking",
    "advantage",
    "get",
    "advantages",
    "distributed",
    "version",
    "control",
    "centralized",
    "version",
    "control",
    "basically",
    "act",
    "cloning",
    "entire",
    "repository",
    "gives",
    "advantage",
    "let",
    "tell",
    "operations",
    "apart",
    "fast",
    "tool",
    "needs",
    "access",
    "hard",
    "drive",
    "remote",
    "server",
    "hence",
    "always",
    "need",
    "internet",
    "connection",
    "committing",
    "new",
    "change",
    "sets",
    "done",
    "locally",
    "without",
    "manipulating",
    "data",
    "main",
    "proposed",
    "three",
    "group",
    "change",
    "sets",
    "ready",
    "push",
    "ask",
    "commit",
    "local",
    "repository",
    "local",
    "hard",
    "drive",
    "commit",
    "changes",
    "want",
    "source",
    "code",
    "know",
    "review",
    "quite",
    "lot",
    "ready",
    "go",
    "ahead",
    "push",
    "onto",
    "central",
    "server",
    "well",
    "central",
    "server",
    "gets",
    "crashed",
    "point",
    "time",
    "lost",
    "data",
    "easily",
    "recovered",
    "one",
    "contributors",
    "local",
    "repository",
    "one",
    "big",
    "advantage",
    "apart",
    "since",
    "every",
    "contributor",
    "full",
    "copy",
    "project",
    "repository",
    "share",
    "changes",
    "one",
    "another",
    "want",
    "get",
    "feedback",
    "affecting",
    "changes",
    "main",
    "repository",
    "well",
    "various",
    "ways",
    "know",
    "distributed",
    "version",
    "control",
    "system",
    "actually",
    "better",
    "centralized",
    "version",
    "control",
    "system",
    "saw",
    "two",
    "types",
    "phones",
    "code",
    "management",
    "systems",
    "hope",
    "understood",
    "going",
    "discuss",
    "one",
    "source",
    "code",
    "management",
    "tool",
    "called",
    "gate",
    "popular",
    "market",
    "right",
    "almost",
    "companies",
    "actually",
    "use",
    "get",
    "move",
    "forward",
    "go",
    "focus",
    "source",
    "code",
    "management",
    "tool",
    "distributed",
    "version",
    "control",
    "tool",
    "called",
    "get",
    "move",
    "forward",
    "guys",
    "let",
    "make",
    "thing",
    "clear",
    "say",
    "version",
    "control",
    "source",
    "code",
    "management",
    "one",
    "thing",
    "let",
    "talk",
    "get",
    "git",
    "distributed",
    "version",
    "control",
    "tool",
    "boards",
    "distributed",
    "nonlinear",
    "workflows",
    "providing",
    "data",
    "assurance",
    "developing",
    "quality",
    "software",
    "right",
    "pretty",
    "tough",
    "definition",
    "follow",
    "easier",
    "understand",
    "diagram",
    "front",
    "screen",
    "example",
    "developer",
    "working",
    "directory",
    "right",
    "want",
    "want",
    "make",
    "changes",
    "local",
    "repository",
    "distributed",
    "version",
    "control",
    "system",
    "local",
    "repository",
    "well",
    "perform",
    "get",
    "add",
    "operation",
    "get",
    "add",
    "whatever",
    "working",
    "directory",
    "present",
    "staging",
    "area",
    "visualize",
    "staging",
    "area",
    "something",
    "working",
    "directory",
    "local",
    "repository",
    "right",
    "done",
    "get",
    "ad",
    "go",
    "ahead",
    "perform",
    "git",
    "commit",
    "make",
    "changes",
    "local",
    "repository",
    "done",
    "go",
    "ahead",
    "push",
    "changes",
    "remote",
    "repository",
    "well",
    "even",
    "perform",
    "get",
    "pull",
    "add",
    "whatever",
    "remote",
    "repository",
    "local",
    "repository",
    "perform",
    "get",
    "check",
    "everything",
    "capacity",
    "working",
    "directory",
    "well",
    "right",
    "let",
    "repeat",
    "guys",
    "working",
    "directory",
    "order",
    "add",
    "local",
    "repository",
    "need",
    "first",
    "perform",
    "get",
    "add",
    "add",
    "staging",
    "area",
    "staging",
    "area",
    "nothing",
    "area",
    "working",
    "directory",
    "local",
    "repository",
    "guitar",
    "go",
    "ahead",
    "execute",
    "git",
    "commit",
    "add",
    "changes",
    "local",
    "repository",
    "done",
    "perform",
    "get",
    "push",
    "push",
    "changes",
    "made",
    "local",
    "repository",
    "remote",
    "repository",
    "order",
    "pull",
    "changes",
    "remote",
    "repository",
    "local",
    "repository",
    "perform",
    "get",
    "pull",
    "finally",
    "get",
    "check",
    "added",
    "working",
    "directory",
    "well",
    "get",
    "also",
    "pretty",
    "similar",
    "command",
    "move",
    "forward",
    "guys",
    "let",
    "show",
    "basic",
    "commands",
    "get",
    "already",
    "installed",
    "get",
    "center",
    "virtual",
    "machine",
    "let",
    "quickly",
    "open",
    "center",
    "virtual",
    "machine",
    "show",
    "basic",
    "operations",
    "perform",
    "get",
    "device",
    "virtual",
    "machine",
    "told",
    "already",
    "installed",
    "get",
    "order",
    "check",
    "version",
    "get",
    "get",
    "version",
    "see",
    "two",
    "point",
    "seven",
    "point",
    "two",
    "let",
    "go",
    "ahead",
    "clear",
    "terminal",
    "let",
    "first",
    "make",
    "directory",
    "let",
    "call",
    "deal",
    "breaker",
    "repository",
    "move",
    "array",
    "core",
    "repository",
    "first",
    "thing",
    "need",
    "initialize",
    "repository",
    "empty",
    "git",
    "repository",
    "type",
    "get",
    "go",
    "ahead",
    "initialize",
    "r",
    "empty",
    "directory",
    "local",
    "git",
    "repository",
    "initialized",
    "see",
    "initialise",
    "empty",
    "git",
    "repository",
    "home",
    "drake",
    "drink",
    "report",
    "dot",
    "kit",
    "right",
    "going",
    "create",
    "file",
    "python",
    "file",
    "let",
    "name",
    "deer",
    "card",
    "dot",
    "p",
    "going",
    "make",
    "changes",
    "particular",
    "files",
    "use",
    "g",
    "edit",
    "going",
    "write",
    "uh",
    "normal",
    "print",
    "statement",
    "welcome",
    "ed",
    "eureka",
    "close",
    "parenthesis",
    "save",
    "close",
    "let",
    "get",
    "terminal",
    "hit",
    "ls",
    "command",
    "see",
    "edeka",
    "dot",
    "py",
    "file",
    "recall",
    "slides",
    "telling",
    "order",
    "add",
    "particular",
    "file",
    "directory",
    "local",
    "git",
    "repository",
    "first",
    "need",
    "add",
    "staging",
    "area",
    "using",
    "guitar",
    "come",
    "type",
    "get",
    "ad",
    "name",
    "file",
    "go",
    "done",
    "type",
    "git",
    "status",
    "give",
    "files",
    "need",
    "commit",
    "particular",
    "command",
    "gives",
    "status",
    "status",
    "little",
    "tell",
    "model",
    "files",
    "need",
    "commit",
    "local",
    "repository",
    "says",
    "file",
    "created",
    "record",
    "py",
    "state",
    "present",
    "staging",
    "area",
    "need",
    "come",
    "particular",
    "phi",
    "type",
    "git",
    "commit",
    "message",
    "want",
    "type",
    "first",
    "commit",
    "go",
    "successfully",
    "done",
    "added",
    "particular",
    "file",
    "local",
    "git",
    "repository",
    "going",
    "show",
    "basically",
    "deal",
    "remote",
    "repositories",
    "remote",
    "git",
    "repository",
    "present",
    "github",
    "created",
    "github",
    "account",
    "first",
    "thing",
    "need",
    "create",
    "github",
    "account",
    "go",
    "ahead",
    "create",
    "new",
    "repository",
    "tell",
    "add",
    "particular",
    "repository",
    "local",
    "git",
    "repository",
    "let",
    "go",
    "browser",
    "zoom",
    "bit",
    "yeah",
    "github",
    "account",
    "guys",
    "going",
    "first",
    "going",
    "go",
    "repository",
    "stab",
    "going",
    "add",
    "one",
    "new",
    "repository",
    "click",
    "new",
    "going",
    "give",
    "name",
    "repository",
    "whatever",
    "name",
    "want",
    "give",
    "go",
    "ahead",
    "let",
    "write",
    "get",
    "tutorial",
    "dev",
    "ops",
    "whatever",
    "name",
    "feel",
    "like",
    "go",
    "ahead",
    "write",
    "going",
    "keep",
    "public",
    "want",
    "description",
    "go",
    "ahead",
    "give",
    "also",
    "initialize",
    "readme",
    "create",
    "posse",
    "order",
    "create",
    "remote",
    "github",
    "repository",
    "see",
    "one",
    "read",
    "dot",
    "md",
    "file",
    "going",
    "going",
    "copy",
    "particular",
    "ssh",
    "link",
    "going",
    "perform",
    "git",
    "remote",
    "add",
    "origin",
    "link",
    "copy",
    "paste",
    "go",
    "basically",
    "added",
    "remote",
    "repository",
    "local",
    "repository",
    "go",
    "ahead",
    "pull",
    "whatever",
    "remote",
    "repository",
    "local",
    "git",
    "repository",
    "type",
    "git",
    "pull",
    "origin",
    "master",
    "go",
    "set",
    "done",
    "see",
    "pulled",
    "changes",
    "let",
    "clear",
    "terminal",
    "hit",
    "endless",
    "command",
    "find",
    "read",
    "dot",
    "md",
    "present",
    "right",
    "going",
    "show",
    "basically",
    "push",
    "array",
    "card",
    "py",
    "file",
    "onto",
    "remote",
    "repository",
    "type",
    "git",
    "push",
    "origin",
    "master",
    "go",
    "done",
    "let",
    "go",
    "ahead",
    "refresh",
    "particular",
    "repository",
    "find",
    "erica",
    "py",
    "file",
    "let",
    "go",
    "ahead",
    "reload",
    "see",
    "record",
    "py",
    "file",
    "written",
    "welcome",
    "edit",
    "car",
    "easy",
    "guys",
    "let",
    "clear",
    "terminal",
    "covered",
    "basics",
    "get",
    "let",
    "move",
    "forward",
    "devops",
    "tutorial",
    "going",
    "focus",
    "next",
    "stage",
    "called",
    "continuous",
    "integration",
    "seen",
    "basic",
    "commands",
    "get",
    "saw",
    "initialize",
    "empty",
    "directory",
    "git",
    "repository",
    "know",
    "add",
    "file",
    "staging",
    "area",
    "go",
    "ahead",
    "commit",
    "local",
    "repository",
    "saw",
    "push",
    "changes",
    "local",
    "repository",
    "remote",
    "repository",
    "repository",
    "github",
    "told",
    "connect",
    "remote",
    "repository",
    "even",
    "pull",
    "changes",
    "remote",
    "repository",
    "rights",
    "things",
    "discussed",
    "detail",
    "let",
    "move",
    "forward",
    "guys",
    "going",
    "focus",
    "next",
    "stage",
    "called",
    "continuous",
    "integration",
    "continuous",
    "integration",
    "basically",
    "development",
    "practice",
    "developers",
    "required",
    "commit",
    "changes",
    "source",
    "code",
    "shared",
    "repository",
    "several",
    "times",
    "day",
    "say",
    "frequently",
    "every",
    "commit",
    "made",
    "repository",
    "built",
    "allows",
    "teams",
    "detect",
    "problems",
    "early",
    "let",
    "us",
    "understand",
    "help",
    "diagram",
    "front",
    "screen",
    "multiple",
    "developers",
    "writing",
    "code",
    "particular",
    "application",
    "committing",
    "code",
    "shared",
    "repository",
    "git",
    "repository",
    "subversion",
    "repository",
    "jenkins",
    "server",
    "nothing",
    "continuous",
    "integration",
    "tool",
    "pull",
    "code",
    "moment",
    "developer",
    "commits",
    "change",
    "source",
    "code",
    "moment",
    "developer",
    "coming",
    "change",
    "source",
    "code",
    "jenkins",
    "server",
    "pull",
    "prepare",
    "built",
    "told",
    "earlier",
    "well",
    "build",
    "mean",
    "compiling",
    "source",
    "code",
    "includes",
    "compiling",
    "apart",
    "things",
    "well",
    "example",
    "code",
    "review",
    "unit",
    "testing",
    "integration",
    "testing",
    "know",
    "packaging",
    "application",
    "executable",
    "file",
    "war",
    "file",
    "jar",
    "file",
    "happens",
    "continuous",
    "manner",
    "moment",
    "developer",
    "coming",
    "change",
    "source",
    "code",
    "jenkins",
    "server",
    "pull",
    "prepare",
    "bill",
    "right",
    "called",
    "continuous",
    "integration",
    "jenkins",
    "various",
    "tools",
    "order",
    "perform",
    "various",
    "tools",
    "development",
    "testing",
    "deployment",
    "technologies",
    "well",
    "plugins",
    "need",
    "install",
    "go",
    "ahead",
    "trigger",
    "whatever",
    "job",
    "wanted",
    "help",
    "jenkins",
    "originally",
    "written",
    "java",
    "right",
    "let",
    "move",
    "forward",
    "going",
    "focus",
    "continuous",
    "delivery",
    "continuous",
    "delivery",
    "nothing",
    "taking",
    "continuous",
    "integration",
    "next",
    "step",
    "continuous",
    "manner",
    "automated",
    "fashion",
    "taking",
    "build",
    "application",
    "onto",
    "test",
    "server",
    "end",
    "user",
    "testing",
    "unit",
    "user",
    "acceptance",
    "test",
    "right",
    "basically",
    "continuous",
    "delivery",
    "let",
    "us",
    "summarize",
    "containers",
    "delivery",
    "moment",
    "developers",
    "makes",
    "change",
    "source",
    "code",
    "jenkins",
    "pull",
    "code",
    "prepare",
    "built",
    "build",
    "successful",
    "take",
    "build",
    "application",
    "jenkins",
    "deploy",
    "onto",
    "test",
    "server",
    "end",
    "user",
    "testing",
    "user",
    "acceptance",
    "test",
    "basically",
    "continuous",
    "delivery",
    "happens",
    "continuous",
    "fashion",
    "advantage",
    "get",
    "basically",
    "build",
    "failure",
    "know",
    "commits",
    "caused",
    "error",
    "need",
    "go",
    "entire",
    "source",
    "code",
    "application",
    "similarly",
    "testing",
    "even",
    "bug",
    "appears",
    "testing",
    "well",
    "know",
    "comment",
    "caused",
    "ernie",
    "go",
    "ahead",
    "know",
    "look",
    "particular",
    "comment",
    "instead",
    "checking",
    "entire",
    "source",
    "code",
    "application",
    "basically",
    "system",
    "allows",
    "team",
    "detect",
    "problems",
    "early",
    "right",
    "see",
    "diagram",
    "web",
    "know",
    "want",
    "learn",
    "jenkins",
    "leave",
    "link",
    "chat",
    "box",
    "go",
    "ahead",
    "refer",
    "people",
    "watching",
    "youtube",
    "find",
    "link",
    "description",
    "box",
    "going",
    "talk",
    "continuous",
    "deployment",
    "continuous",
    "deployment",
    "basically",
    "taking",
    "application",
    "build",
    "application",
    "tested",
    "deploying",
    "onto",
    "process",
    "servers",
    "release",
    "automated",
    "fashion",
    "application",
    "tested",
    "automatically",
    "deployed",
    "broad",
    "service",
    "release",
    "something",
    "good",
    "practice",
    "told",
    "earlier",
    "well",
    "might",
    "certain",
    "checks",
    "need",
    "release",
    "software",
    "market",
    "might",
    "want",
    "market",
    "product",
    "lot",
    "things",
    "want",
    "deploying",
    "application",
    "advisable",
    "good",
    "practice",
    "know",
    "actually",
    "automatically",
    "deploying",
    "application",
    "onto",
    "processor",
    "release",
    "basically",
    "continuous",
    "integration",
    "delivery",
    "deployment",
    "questions",
    "guys",
    "ask",
    "right",
    "dorothy",
    "wants",
    "repeat",
    "sure",
    "jovial",
    "let",
    "start",
    "continuous",
    "integration",
    "continuous",
    "integration",
    "basically",
    "committing",
    "changes",
    "source",
    "code",
    "frequently",
    "every",
    "commit",
    "built",
    "using",
    "jenkins",
    "server",
    "right",
    "continuous",
    "integration",
    "server",
    "jenkins",
    "trigger",
    "build",
    "moment",
    "developer",
    "commits",
    "change",
    "source",
    "code",
    "build",
    "includes",
    "compiling",
    "code",
    "review",
    "unit",
    "testing",
    "integration",
    "testing",
    "packaging",
    "everything",
    "hope",
    "clear",
    "continuous",
    "integration",
    "basically",
    "continuously",
    "building",
    "application",
    "know",
    "moment",
    "developer",
    "come",
    "change",
    "source",
    "code",
    "jenkins",
    "pull",
    "code",
    "repairable",
    "let",
    "move",
    "forward",
    "going",
    "explain",
    "continuous",
    "delivery",
    "incontinence",
    "delivery",
    "package",
    "created",
    "war",
    "jar",
    "file",
    "executable",
    "file",
    "jenkins",
    "take",
    "package",
    "deploy",
    "onto",
    "test",
    "server",
    "end",
    "user",
    "testing",
    "kind",
    "testing",
    "called",
    "end",
    "user",
    "testing",
    "user",
    "acceptance",
    "test",
    "need",
    "deploy",
    "application",
    "onto",
    "server",
    "replica",
    "production",
    "server",
    "perform",
    "end",
    "user",
    "testing",
    "call",
    "user",
    "acceptance",
    "test",
    "example",
    "application",
    "want",
    "check",
    "functions",
    "right",
    "functional",
    "testing",
    "want",
    "perform",
    "functional",
    "testing",
    "application",
    "first",
    "go",
    "ahead",
    "check",
    "whether",
    "search",
    "engine",
    "working",
    "check",
    "whether",
    "people",
    "able",
    "log",
    "functions",
    "website",
    "check",
    "application",
    "check",
    "basically",
    "deploying",
    "apps",
    "right",
    "sort",
    "testing",
    "basically",
    "functional",
    "testing",
    "trying",
    "refer",
    "next",
    "going",
    "continuously",
    "deploy",
    "application",
    "onto",
    "process",
    "servers",
    "release",
    "application",
    "tested",
    "deployed",
    "onto",
    "broad",
    "service",
    "release",
    "told",
    "earlier",
    "well",
    "good",
    "practice",
    "deploy",
    "application",
    "continuously",
    "automated",
    "fashion",
    "guys",
    "discussed",
    "lot",
    "jenkins",
    "show",
    "jenkins",
    "ui",
    "looks",
    "like",
    "download",
    "plugins",
    "things",
    "already",
    "installed",
    "jenkins",
    "center",
    "virtual",
    "machine",
    "let",
    "quickly",
    "open",
    "center",
    "virtual",
    "machine",
    "guys",
    "center",
    "virtual",
    "machine",
    "configured",
    "jenkins",
    "localhost",
    "port",
    "8080",
    "jenkins",
    "go",
    "need",
    "provide",
    "username",
    "password",
    "given",
    "installing",
    "jenkins",
    "jenkins",
    "looks",
    "like",
    "guys",
    "multiple",
    "options",
    "go",
    "play",
    "around",
    "let",
    "take",
    "basic",
    "options",
    "click",
    "new",
    "item",
    "directed",
    "page",
    "ask",
    "give",
    "name",
    "project",
    "give",
    "whatever",
    "name",
    "want",
    "give",
    "choose",
    "kind",
    "project",
    "want",
    "right",
    "go",
    "ahead",
    "provide",
    "required",
    "specifications",
    "required",
    "configurations",
    "project",
    "talking",
    "plugins",
    "let",
    "tell",
    "actually",
    "install",
    "need",
    "go",
    "manage",
    "kins",
    "tab",
    "find",
    "manage",
    "plugins",
    "tab",
    "find",
    "updates",
    "plugins",
    "already",
    "installed",
    "available",
    "section",
    "find",
    "available",
    "plugins",
    "jenkins",
    "support",
    "go",
    "ahead",
    "search",
    "want",
    "install",
    "check",
    "go",
    "ahead",
    "install",
    "similarly",
    "installed",
    "found",
    "install",
    "tab",
    "go",
    "ahead",
    "check",
    "advanced",
    "tab",
    "well",
    "something",
    "different",
    "let",
    "focus",
    "let",
    "go",
    "back",
    "dashboard",
    "basically",
    "one",
    "project",
    "executed",
    "called",
    "ada",
    "rekha",
    "pipeline",
    "blue",
    "color",
    "symbolizes",
    "successful",
    "blue",
    "colour",
    "ball",
    "means",
    "successful",
    "works",
    "guys",
    "giving",
    "tour",
    "jenkins",
    "dashboard",
    "actually",
    "execute",
    "practical",
    "well",
    "come",
    "back",
    "later",
    "let",
    "open",
    "slides",
    "proceed",
    "next",
    "stage",
    "devops",
    "life",
    "cycle",
    "let",
    "talk",
    "configuration",
    "management",
    "exactly",
    "configuration",
    "management",
    "let",
    "talk",
    "issues",
    "deployment",
    "particular",
    "application",
    "provisioning",
    "server",
    "basically",
    "happens",
    "know",
    "application",
    "deployed",
    "onto",
    "test",
    "servers",
    "onto",
    "process",
    "servers",
    "dependency",
    "issues",
    "application",
    "working",
    "fine",
    "example",
    "developers",
    "laptop",
    "might",
    "software",
    "stack",
    "upgraded",
    "prod",
    "test",
    "environment",
    "still",
    "using",
    "outdated",
    "version",
    "software",
    "side",
    "application",
    "working",
    "fine",
    "one",
    "example",
    "apart",
    "happens",
    "application",
    "life",
    "goes",
    "reason",
    "reason",
    "upgraded",
    "software",
    "stack",
    "go",
    "back",
    "previous",
    "table",
    "version",
    "software",
    "stack",
    "lot",
    "issues",
    "know",
    "admin",
    "side",
    "company",
    "upside",
    "company",
    "removed",
    "help",
    "configuration",
    "management",
    "tools",
    "know",
    "edmonds",
    "used",
    "write",
    "long",
    "scripts",
    "order",
    "provision",
    "infrastructure",
    "whether",
    "test",
    "environment",
    "prod",
    "environment",
    "dev",
    "environment",
    "utilize",
    "long",
    "scripts",
    "right",
    "prone",
    "error",
    "plus",
    "used",
    "take",
    "lot",
    "time",
    "apart",
    "edmund",
    "written",
    "script",
    "one",
    "else",
    "actually",
    "recognize",
    "problem",
    "debug",
    "lot",
    "problems",
    "work",
    "admin",
    "side",
    "absurd",
    "company",
    "removed",
    "help",
    "configuration",
    "management",
    "tools",
    "important",
    "concept",
    "guys",
    "understand",
    "called",
    "infrastructure",
    "code",
    "means",
    "writing",
    "code",
    "infrastructure",
    "means",
    "suppose",
    "want",
    "install",
    "lamp",
    "stack",
    "three",
    "environments",
    "whether",
    "devtest",
    "abroad",
    "write",
    "code",
    "installing",
    "lamp",
    "stack",
    "one",
    "central",
    "location",
    "go",
    "ahead",
    "deploy",
    "onto",
    "devtest",
    "prom",
    "record",
    "system",
    "state",
    "president",
    "one",
    "central",
    "location",
    "even",
    "upgrade",
    "next",
    "version",
    "still",
    "recorded",
    "previous",
    "stable",
    "version",
    "software",
    "stack",
    "right",
    "manually",
    "go",
    "ahead",
    "know",
    "write",
    "scripts",
    "deployed",
    "onto",
    "nodes",
    "easy",
    "guys",
    "let",
    "focus",
    "challenges",
    "configuration",
    "management",
    "helps",
    "us",
    "overcome",
    "first",
    "help",
    "us",
    "figure",
    "components",
    "change",
    "requirements",
    "change",
    "also",
    "helps",
    "us",
    "redoing",
    "implementation",
    "requirements",
    "changed",
    "since",
    "last",
    "implementation",
    "important",
    "point",
    "guys",
    "helps",
    "us",
    "revert",
    "previous",
    "version",
    "component",
    "replaced",
    "new",
    "flawed",
    "version",
    "let",
    "tell",
    "importance",
    "configuration",
    "management",
    "use",
    "case",
    "best",
    "example",
    "know",
    "new",
    "york",
    "stock",
    "exchange",
    "software",
    "glitch",
    "prevented",
    "nyc",
    "trading",
    "stocks",
    "almost",
    "90",
    "minutes",
    "led",
    "millions",
    "dollars",
    "loss",
    "new",
    "software",
    "installation",
    "caused",
    "problem",
    "software",
    "installed",
    "8",
    "twenty",
    "trading",
    "terminals",
    "system",
    "tested",
    "night",
    "however",
    "morning",
    "failed",
    "operate",
    "term",
    "ends",
    "need",
    "switch",
    "back",
    "old",
    "software",
    "might",
    "think",
    "failure",
    "nyc",
    "configuration",
    "management",
    "process",
    "reality",
    "success",
    "result",
    "proper",
    "configuration",
    "management",
    "nyc",
    "recovered",
    "situation",
    "90",
    "minutes",
    "pretty",
    "fast",
    "problem",
    "continued",
    "longer",
    "consequences",
    "would",
    "severe",
    "guys",
    "hope",
    "understood",
    "importance",
    "let",
    "focus",
    "various",
    "tools",
    "available",
    "configuration",
    "management",
    "multiple",
    "tools",
    "like",
    "papa",
    "jeff",
    "silence",
    "stack",
    "going",
    "focus",
    "pop",
    "pop",
    "configuration",
    "management",
    "tool",
    "used",
    "deploying",
    "configuring",
    "managing",
    "servers",
    "let",
    "see",
    "various",
    "functions",
    "puppet",
    "first",
    "define",
    "distinct",
    "configurations",
    "every",
    "host",
    "continuously",
    "check",
    "confirm",
    "whether",
    "required",
    "configuration",
    "place",
    "altered",
    "host",
    "mean",
    "actually",
    "define",
    "distinct",
    "configuration",
    "example",
    "one",
    "particular",
    "node",
    "need",
    "office",
    "another",
    "node",
    "need",
    "office",
    "stack",
    "know",
    "defined",
    "distinct",
    "configurations",
    "different",
    "nodes",
    "continuously",
    "check",
    "confirm",
    "whether",
    "required",
    "configuration",
    "place",
    "alter",
    "altered",
    "pop",
    "revert",
    "back",
    "required",
    "configurations",
    "one",
    "function",
    "puppet",
    "also",
    "help",
    "dynamic",
    "scaling",
    "scaling",
    "machines",
    "happen",
    "company",
    "big",
    "billion",
    "day",
    "sale",
    "right",
    "expecting",
    "lot",
    "traffic",
    "time",
    "order",
    "provision",
    "servers",
    "probably",
    "today",
    "task",
    "provision",
    "10",
    "servers",
    "tomorrow",
    "might",
    "two",
    "revisions",
    "jim",
    "right",
    "go",
    "ahead",
    "manually",
    "writing",
    "scripts",
    "need",
    "tools",
    "like",
    "puppet",
    "help",
    "dynamic",
    "scaling",
    "scaling",
    "machines",
    "provides",
    "control",
    "configured",
    "machines",
    "centralized",
    "change",
    "gets",
    "propagated",
    "automatically",
    "follows",
    "architecture",
    "slaves",
    "pull",
    "central",
    "server",
    "changes",
    "made",
    "configuration",
    "multiple",
    "nodes",
    "connected",
    "master",
    "poll",
    "check",
    "continuously",
    "change",
    "configuration",
    "happened",
    "master",
    "moment",
    "change",
    "happen",
    "pull",
    "configuration",
    "deploy",
    "onto",
    "particular",
    "node",
    "hope",
    "getting",
    "point",
    "called",
    "pull",
    "configuration",
    "push",
    "configuration",
    "master",
    "actually",
    "push",
    "configurations",
    "nose",
    "happens",
    "ansible",
    "salts",
    "happen",
    "pop",
    "chef",
    "two",
    "tools",
    "follow",
    "full",
    "configuration",
    "smellin",
    "salts",
    "follows",
    "push",
    "configuration",
    "configurations",
    "pushed",
    "onto",
    "nodes",
    "chef",
    "puppet",
    "nodes",
    "pull",
    "configurations",
    "keep",
    "checking",
    "master",
    "regular",
    "intervals",
    "change",
    "configuration",
    "pull",
    "let",
    "explain",
    "architecture",
    "front",
    "screen",
    "basically",
    "typical",
    "puppet",
    "architecture",
    "happens",
    "see",
    "architecture",
    "puppet",
    "master",
    "puppet",
    "slave",
    "functions",
    "performed",
    "architecture",
    "first",
    "puppet",
    "agent",
    "sends",
    "fact",
    "puppet",
    "master",
    "puppet",
    "slave",
    "first",
    "send",
    "fact",
    "puppet",
    "master",
    "facts",
    "fox",
    "basically",
    "key",
    "value",
    "data",
    "appears",
    "represents",
    "aspects",
    "slave",
    "states",
    "ip",
    "address",
    "time",
    "operating",
    "system",
    "whether",
    "virtual",
    "machine",
    "right",
    "basically",
    "facts",
    "puppet",
    "master",
    "uses",
    "fact",
    "compile",
    "catalog",
    "defines",
    "slaves",
    "configured",
    "catalog",
    "document",
    "describes",
    "desired",
    "state",
    "resource",
    "puppet",
    "master",
    "manages",
    "honestly",
    "happens",
    "puppet",
    "slave",
    "reports",
    "back",
    "master",
    "indicating",
    "configuration",
    "complete",
    "also",
    "visible",
    "puppet",
    "dashboard",
    "works",
    "guys",
    "let",
    "move",
    "forward",
    "talk",
    "containerization",
    "exactly",
    "containerization",
    "believe",
    "heard",
    "virtual",
    "machines",
    "containers",
    "containers",
    "nothing",
    "lightweight",
    "alternatives",
    "virtual",
    "machines",
    "let",
    "explain",
    "docker",
    "containers",
    "contain",
    "binaries",
    "libraries",
    "required",
    "particular",
    "application",
    "call",
    "know",
    "containerized",
    "particular",
    "application",
    "right",
    "let",
    "us",
    "focus",
    "diagram",
    "front",
    "screen",
    "host",
    "operating",
    "system",
    "top",
    "docker",
    "engine",
    "guest",
    "operating",
    "system",
    "guys",
    "uses",
    "host",
    "operating",
    "system",
    "learning",
    "containers",
    "container",
    "one",
    "application",
    "one",
    "binaries",
    "libraries",
    "container",
    "application",
    "binaries",
    "libraries",
    "need",
    "order",
    "run",
    "application",
    "particular",
    "container",
    "particular",
    "container",
    "dependencies",
    "already",
    "present",
    "particular",
    "container",
    "basically",
    "container",
    "contains",
    "application",
    "dependencies",
    "application",
    "binary",
    "ivory",
    "required",
    "application",
    "container",
    "nowadays",
    "must",
    "noticed",
    "even",
    "want",
    "install",
    "software",
    "actually",
    "get",
    "ready",
    "use",
    "docker",
    "container",
    "right",
    "reason",
    "pretty",
    "lightweight",
    "compare",
    "virtual",
    "machines",
    "right",
    "let",
    "discuss",
    "use",
    "case",
    "actually",
    "use",
    "docker",
    "industry",
    "suppose",
    "complex",
    "requirements",
    "application",
    "microservice",
    "monolithic",
    "application",
    "anything",
    "let",
    "take",
    "microservice",
    "suppose",
    "complex",
    "requirements",
    "microservice",
    "written",
    "dockerfile",
    "help",
    "docker",
    "create",
    "docker",
    "image",
    "docker",
    "image",
    "nothing",
    "know",
    "template",
    "think",
    "template",
    "docker",
    "container",
    "right",
    "help",
    "docker",
    "image",
    "create",
    "many",
    "docker",
    "containers",
    "want",
    "let",
    "repeat",
    "written",
    "complex",
    "requirements",
    "micro",
    "service",
    "application",
    "easy",
    "write",
    "docker",
    "file",
    "created",
    "docker",
    "image",
    "help",
    "docker",
    "image",
    "build",
    "many",
    "containers",
    "want",
    "docker",
    "image",
    "upload",
    "onto",
    "docker",
    "hub",
    "nothing",
    "butter",
    "git",
    "repository",
    "docker",
    "images",
    "public",
    "repositories",
    "private",
    "repositories",
    "e",
    "docker",
    "hub",
    "team",
    "beat",
    "staging",
    "production",
    "pull",
    "particular",
    "image",
    "prepare",
    "many",
    "containers",
    "want",
    "advantage",
    "get",
    "whatever",
    "developers",
    "laptop",
    "right",
    "microsoft",
    "application",
    "guy",
    "written",
    "requirement",
    "microbes",
    "obvious",
    "application",
    "guy",
    "basically",
    "developer",
    "developing",
    "application",
    "whatever",
    "developers",
    "laptop",
    "replicated",
    "staging",
    "well",
    "production",
    "consistent",
    "computing",
    "environment",
    "throughout",
    "software",
    "delivery",
    "life",
    "cycle",
    "hope",
    "getting",
    "point",
    "guys",
    "let",
    "quickly",
    "brief",
    "exactly",
    "docker",
    "containers",
    "visualize",
    "container",
    "actually",
    "box",
    "application",
    "present",
    "dependencies",
    "except",
    "box",
    "infinitely",
    "replicable",
    "whatever",
    "happens",
    "box",
    "stays",
    "box",
    "unless",
    "explicitly",
    "take",
    "something",
    "put",
    "something",
    "breaks",
    "throw",
    "away",
    "get",
    "new",
    "containers",
    "usually",
    "make",
    "application",
    "easy",
    "run",
    "different",
    "computer",
    "ideally",
    "image",
    "used",
    "run",
    "containers",
    "every",
    "environment",
    "stage",
    "development",
    "production",
    "basically",
    "docker",
    "containers",
    "guys",
    "sent",
    "us",
    "virtual",
    "machine",
    "already",
    "installed",
    "docker",
    "first",
    "thing",
    "need",
    "start",
    "docker",
    "type",
    "system",
    "ctl",
    "start",
    "docker",
    "give",
    "password",
    "started",
    "successfully",
    "going",
    "images",
    "already",
    "docker",
    "public",
    "images",
    "pull",
    "anytime",
    "want",
    "right",
    "go",
    "ahead",
    "run",
    "image",
    "many",
    "times",
    "want",
    "create",
    "many",
    "containers",
    "want",
    "basically",
    "execute",
    "command",
    "pulling",
    "image",
    "dog",
    "rabbit",
    "try",
    "first",
    "find",
    "locally",
    "whether",
    "present",
    "present",
    "well",
    "good",
    "otherwise",
    "go",
    "ahead",
    "pull",
    "docker",
    "hub",
    "right",
    "move",
    "forward",
    "let",
    "show",
    "looks",
    "like",
    "created",
    "account",
    "dock",
    "need",
    "go",
    "executing",
    "use",
    "case",
    "free",
    "cost",
    "doctor",
    "looks",
    "like",
    "guys",
    "repository",
    "notice",
    "right",
    "go",
    "ahead",
    "search",
    "images",
    "well",
    "example",
    "want",
    "search",
    "hadoop",
    "images",
    "believe",
    "one",
    "asked",
    "find",
    "hadoop",
    "images",
    "present",
    "well",
    "right",
    "nothing",
    "images",
    "docker",
    "hub",
    "believe",
    "go",
    "back",
    "terminal",
    "execute",
    "basic",
    "docker",
    "commands",
    "first",
    "thing",
    "going",
    "execute",
    "called",
    "docker",
    "images",
    "give",
    "list",
    "images",
    "local",
    "system",
    "quite",
    "lot",
    "images",
    "see",
    "right",
    "size",
    "things",
    "created",
    "image",
    "called",
    "image",
    "id",
    "right",
    "things",
    "displayed",
    "console",
    "let",
    "clear",
    "terminal",
    "going",
    "going",
    "pull",
    "image",
    "rights",
    "type",
    "awkward",
    "pull",
    "example",
    "want",
    "pull",
    "ubuntu",
    "image",
    "type",
    "docker",
    "pull",
    "open",
    "go",
    "using",
    "default",
    "tag",
    "latest",
    "tag",
    "something",
    "tell",
    "later",
    "party",
    "provide",
    "default",
    "tag",
    "latest",
    "time",
    "pulling",
    "docker",
    "hub",
    "right",
    "could",
    "find",
    "locally",
    "download",
    "completed",
    "currently",
    "extracting",
    "want",
    "run",
    "container",
    "type",
    "occur",
    "iit",
    "ubuntu",
    "type",
    "image",
    "ideas",
    "well",
    "ubuntu",
    "container",
    "told",
    "see",
    "various",
    "docker",
    "images",
    "told",
    "pull",
    "image",
    "docker",
    "hub",
    "actually",
    "go",
    "ahead",
    "run",
    "container",
    "going",
    "focus",
    "continuous",
    "monitoring",
    "continuous",
    "monitoring",
    "tools",
    "resolve",
    "system",
    "errors",
    "know",
    "kind",
    "system",
    "errors",
    "low",
    "memory",
    "unreachable",
    "server",
    "etc",
    "etc",
    "negative",
    "impact",
    "business",
    "productivity",
    "reasons",
    "use",
    "continuous",
    "monitoring",
    "tools",
    "let",
    "tell",
    "detects",
    "network",
    "server",
    "problems",
    "determine",
    "root",
    "cause",
    "issue",
    "maintains",
    "security",
    "availability",
    "services",
    "also",
    "monitors",
    "troubleshoot",
    "server",
    "performance",
    "issues",
    "also",
    "allows",
    "us",
    "plan",
    "infrastructure",
    "upgrades",
    "outdated",
    "system",
    "cause",
    "failures",
    "respond",
    "issues",
    "first",
    "sign",
    "problem",
    "let",
    "tell",
    "guys",
    "tools",
    "used",
    "automatically",
    "fix",
    "problems",
    "detected",
    "well",
    "also",
    "ensures",
    "infrastructure",
    "outages",
    "minimal",
    "effect",
    "organization",
    "bottom",
    "line",
    "monitor",
    "entire",
    "infrastructure",
    "business",
    "processes",
    "continuous",
    "monitoring",
    "ability",
    "organization",
    "detect",
    "report",
    "respond",
    "contain",
    "mitigate",
    "acts",
    "occur",
    "infrastructure",
    "software",
    "basically",
    "monitor",
    "events",
    "ongoing",
    "basis",
    "determine",
    "level",
    "risk",
    "experiencing",
    "summarize",
    "continuous",
    "monitoring",
    "one",
    "definition",
    "say",
    "integration",
    "organization",
    "security",
    "tools",
    "different",
    "security",
    "tools",
    "organization",
    "integration",
    "tools",
    "aggregation",
    "normalization",
    "correlation",
    "data",
    "produced",
    "security",
    "tools",
    "right",
    "happens",
    "data",
    "produced",
    "analysis",
    "data",
    "based",
    "organization",
    "risk",
    "goals",
    "threat",
    "knowledge",
    "near",
    "response",
    "risks",
    "identified",
    "basically",
    "continuous",
    "monitoring",
    "good",
    "saying",
    "guys",
    "ca",
    "measure",
    "ca",
    "manage",
    "hope",
    "know",
    "talking",
    "multiple",
    "continuous",
    "monitoring",
    "tools",
    "available",
    "market",
    "going",
    "focus",
    "nagas",
    "give",
    "us",
    "used",
    "continuous",
    "monitoring",
    "systems",
    "application",
    "services",
    "business",
    "processes",
    "devops",
    "culture",
    "right",
    "event",
    "failure",
    "nagas",
    "alert",
    "technical",
    "staff",
    "problem",
    "allowing",
    "begin",
    "mediation",
    "process",
    "outages",
    "affect",
    "business",
    "processes",
    "users",
    "customers",
    "nagas",
    "explain",
    "19",
    "infrastructure",
    "outage",
    "affect",
    "organization",
    "bottom",
    "line",
    "let",
    "tell",
    "works",
    "focus",
    "diagram",
    "front",
    "screen",
    "give",
    "runs",
    "server",
    "usually",
    "daemon",
    "service",
    "periodically",
    "runs",
    "plugins",
    "residing",
    "server",
    "contact",
    "holes",
    "servers",
    "network",
    "see",
    "diagram",
    "well",
    "periodically",
    "runs",
    "plugins",
    "residing",
    "server",
    "contact",
    "horse",
    "servers",
    "network",
    "internet",
    "source",
    "overs",
    "locally",
    "present",
    "remotely",
    "present",
    "well",
    "one",
    "view",
    "status",
    "information",
    "using",
    "web",
    "interface",
    "also",
    "receive",
    "email",
    "sms",
    "notification",
    "something",
    "happens",
    "gives",
    "behaves",
    "like",
    "scheduler",
    "runs",
    "scripts",
    "certain",
    "moments",
    "stores",
    "results",
    "scripts",
    "run",
    "scripts",
    "results",
    "change",
    "plugins",
    "plugins",
    "compiled",
    "executables",
    "scripts",
    "run",
    "command",
    "line",
    "check",
    "status",
    "host",
    "service",
    "uses",
    "results",
    "plugins",
    "mine",
    "current",
    "status",
    "host",
    "services",
    "network",
    "happened",
    "actually",
    "diagram",
    "server",
    "running",
    "host",
    "plugins",
    "interact",
    "local",
    "remote",
    "host",
    "right",
    "plugins",
    "send",
    "information",
    "scheduler",
    "displays",
    "gy",
    "happening",
    "guys",
    "right",
    "discussed",
    "stages",
    "let",
    "give",
    "quick",
    "recap",
    "things",
    "discussed",
    "first",
    "saw",
    "methodology",
    "devops",
    "saw",
    "waterfall",
    "model",
    "limitations",
    "understood",
    "agile",
    "model",
    "difference",
    "waterfall",
    "agile",
    "methodology",
    "limitations",
    "agile",
    "methodology",
    "understood",
    "devops",
    "overcomes",
    "limitations",
    "exactly",
    "worms",
    "saw",
    "various",
    "stages",
    "tools",
    "involved",
    "devops",
    "starting",
    "version",
    "control",
    "saw",
    "continuous",
    "integration",
    "saw",
    "countenance",
    "delivery",
    "saw",
    "countenance",
    "deployment",
    "basically",
    "understood",
    "difference",
    "integration",
    "delivery",
    "deployment",
    "saw",
    "configuration",
    "management",
    "containerization",
    "finally",
    "explained",
    "continuous",
    "monitoring",
    "right",
    "even",
    "switching",
    "back",
    "virtual",
    "machine",
    "tools",
    "already",
    "installed",
    "telling",
    "basics",
    "tools",
    "comes",
    "awaited",
    "topic",
    "today",
    "session",
    "use",
    "case",
    "let",
    "see",
    "going",
    "implement",
    "today",
    "use",
    "case",
    "git",
    "repository",
    "right",
    "developers",
    "committing",
    "code",
    "git",
    "repository",
    "jenkins",
    "pull",
    "code",
    "first",
    "clone",
    "repository",
    "cloning",
    "repository",
    "build",
    "docker",
    "image",
    "using",
    "docker",
    "file",
    "dockerfile",
    "use",
    "build",
    "image",
    "image",
    "built",
    "going",
    "test",
    "push",
    "onto",
    "docker",
    "hub",
    "told",
    "organ",
    "nothing",
    "like",
    "git",
    "repository",
    "docker",
    "images",
    "let",
    "repeat",
    "developers",
    "committing",
    "changes",
    "source",
    "code",
    "moment",
    "developers",
    "commit",
    "change",
    "source",
    "code",
    "jenkins",
    "clone",
    "entire",
    "git",
    "repository",
    "build",
    "docker",
    "image",
    "based",
    "docker",
    "file",
    "create",
    "push",
    "docker",
    "image",
    "onto",
    "docker",
    "hub",
    "happen",
    "automatically",
    "click",
    "button",
    "using",
    "using",
    "gate",
    "jenkins",
    "docker",
    "let",
    "quickly",
    "open",
    "virtual",
    "machine",
    "show",
    "application",
    "basically",
    "creating",
    "docker",
    "image",
    "particular",
    "application",
    "pushing",
    "onto",
    "docker",
    "hub",
    "automated",
    "fashion",
    "code",
    "written",
    "github",
    "repository",
    "application",
    "basically",
    "hello",
    "world",
    "server",
    "written",
    "node",
    "main",
    "dot",
    "js",
    "let",
    "go",
    "ahead",
    "show",
    "github",
    "repository",
    "let",
    "go",
    "back",
    "application",
    "looks",
    "like",
    "guys",
    "main",
    "dot",
    "j",
    "right",
    "apart",
    "packaged",
    "json",
    "dependencies",
    "jenkins",
    "file",
    "dockerfile",
    "jenkins",
    "file",
    "explain",
    "going",
    "let",
    "explain",
    "basics",
    "docker",
    "file",
    "build",
    "docker",
    "image",
    "particular",
    "basic",
    "application",
    "first",
    "thing",
    "writing",
    "docker",
    "file",
    "able",
    "build",
    "docker",
    "image",
    "application",
    "need",
    "docker",
    "file",
    "yeah",
    "right",
    "think",
    "blueprint",
    "docker",
    "tells",
    "docker",
    "contents",
    "parameters",
    "image",
    "docker",
    "images",
    "often",
    "based",
    "images",
    "let",
    "go",
    "ahead",
    "create",
    "docker",
    "file",
    "let",
    "first",
    "clone",
    "particular",
    "repository",
    "let",
    "go",
    "particular",
    "directory",
    "first",
    "darren",
    "downloads",
    "let",
    "unzip",
    "first",
    "unzip",
    "divorce",
    "tutorial",
    "let",
    "hit",
    "ls",
    "command",
    "application",
    "present",
    "go",
    "particular",
    "devops",
    "tutorial",
    "master",
    "let",
    "say",
    "terminal",
    "let",
    "us",
    "focus",
    "files",
    "dockerfile",
    "let",
    "focus",
    "jenkins",
    "file",
    "right",
    "dockerfile",
    "main",
    "dot",
    "j",
    "package",
    "dot",
    "json",
    "read",
    "dot",
    "md",
    "test",
    "dot",
    "j",
    "docker",
    "file",
    "help",
    "creating",
    "docker",
    "image",
    "right",
    "let",
    "show",
    "written",
    "docker",
    "file",
    "let",
    "tell",
    "docker",
    "images",
    "often",
    "based",
    "images",
    "right",
    "example",
    "basing",
    "image",
    "official",
    "node",
    "docker",
    "image",
    "line",
    "seeing",
    "basically",
    "base",
    "application",
    "official",
    "node",
    "docker",
    "image",
    "makes",
    "job",
    "easy",
    "dockerfile",
    "short",
    "guys",
    "hectic",
    "task",
    "installing",
    "node",
    "dependencies",
    "image",
    "already",
    "done",
    "basement",
    "need",
    "include",
    "application",
    "set",
    "label",
    "maintainer",
    "mean",
    "optional",
    "want",
    "go",
    "ahead",
    "want",
    "still",
    "fine",
    "health",
    "check",
    "basically",
    "docker",
    "able",
    "tell",
    "server",
    "actually",
    "finally",
    "telling",
    "docker",
    "port",
    "ask",
    "server",
    "run",
    "right",
    "written",
    "dockerfile",
    "let",
    "go",
    "ahead",
    "close",
    "going",
    "create",
    "image",
    "using",
    "docker",
    "file",
    "type",
    "sudo",
    "docker",
    "bell",
    "slash",
    "home",
    "slash",
    "edureka",
    "downloads",
    "devops",
    "tutorial",
    "basically",
    "path",
    "dockerfile",
    "go",
    "need",
    "provide",
    "sudo",
    "password",
    "started",
    "creating",
    "image",
    "docker",
    "image",
    "done",
    "successfully",
    "built",
    "image",
    "id",
    "right",
    "go",
    "ahead",
    "run",
    "well",
    "type",
    "docker",
    "run",
    "image",
    "id",
    "go",
    "listening",
    "port",
    "let",
    "stop",
    "told",
    "create",
    "image",
    "using",
    "docker",
    "file",
    "right",
    "going",
    "going",
    "use",
    "jenkins",
    "order",
    "clone",
    "git",
    "repository",
    "build",
    "image",
    "perform",
    "testing",
    "finally",
    "pushing",
    "onto",
    "docker",
    "hub",
    "tokra",
    "profile",
    "right",
    "need",
    "need",
    "tell",
    "jenkins",
    "stages",
    "one",
    "purpose",
    "write",
    "jenkins",
    "pipeline",
    "specification",
    "jenkins",
    "file",
    "let",
    "show",
    "jenkins",
    "file",
    "looks",
    "like",
    "click",
    "written",
    "jenkins",
    "file",
    "right",
    "pretty",
    "first",
    "defined",
    "application",
    "mean",
    "clone",
    "repository",
    "build",
    "image",
    "target",
    "using",
    "draca",
    "one",
    "username",
    "erica",
    "repository",
    "name",
    "rights",
    "built",
    "image",
    "test",
    "going",
    "print",
    "test",
    "passed",
    "finally",
    "push",
    "onto",
    "docker",
    "hub",
    "right",
    "url",
    "docker",
    "hub",
    "credentials",
    "actually",
    "saved",
    "jenkins",
    "docker",
    "hub",
    "credentials",
    "let",
    "show",
    "save",
    "credentials",
    "go",
    "credentials",
    "tab",
    "need",
    "click",
    "system",
    "click",
    "global",
    "credentials",
    "go",
    "ahead",
    "click",
    "update",
    "need",
    "provide",
    "username",
    "password",
    "doctor",
    "credential",
    "id",
    "whatever",
    "gon",
    "na",
    "pass",
    "right",
    "let",
    "type",
    "password",
    "right",
    "need",
    "tell",
    "jenkins",
    "two",
    "things",
    "find",
    "code",
    "credentials",
    "use",
    "publish",
    "docker",
    "image",
    "right",
    "already",
    "configured",
    "project",
    "let",
    "go",
    "ahead",
    "show",
    "written",
    "first",
    "thing",
    "name",
    "project",
    "right",
    "showing",
    "create",
    "new",
    "item",
    "option",
    "called",
    "need",
    "give",
    "name",
    "project",
    "chosen",
    "pipeline",
    "project",
    "show",
    "pipeline",
    "project",
    "go",
    "new",
    "item",
    "chosen",
    "kind",
    "project",
    "clicked",
    "bill",
    "triggers",
    "basically",
    "pull",
    "cm",
    "source",
    "code",
    "management",
    "repository",
    "every",
    "minute",
    "whenever",
    "change",
    "source",
    "code",
    "pull",
    "repeat",
    "entire",
    "process",
    "every",
    "minute",
    "advanced",
    "project",
    "options",
    "selected",
    "pipeline",
    "script",
    "scm",
    "either",
    "write",
    "pipeline",
    "script",
    "directly",
    "click",
    "pipeline",
    "script",
    "source",
    "code",
    "management",
    "kind",
    "source",
    "code",
    "management",
    "get",
    "provided",
    "link",
    "repository",
    "done",
    "scroll",
    "nothing",
    "else",
    "click",
    "apply",
    "save",
    "already",
    "build",
    "project",
    "one",
    "let",
    "go",
    "ahead",
    "right",
    "side",
    "started",
    "first",
    "clone",
    "repository",
    "find",
    "logs",
    "click",
    "blue",
    "color",
    "ball",
    "find",
    "logs",
    "well",
    "click",
    "find",
    "well",
    "similarly",
    "logs",
    "present",
    "also",
    "successfully",
    "build",
    "image",
    "tested",
    "pushing",
    "onto",
    "docker",
    "hub",
    "successfully",
    "pushed",
    "image",
    "onto",
    "docker",
    "hub",
    "well",
    "go",
    "back",
    "profile",
    "go",
    "repository",
    "find",
    "image",
    "already",
    "present",
    "actually",
    "pushed",
    "multiple",
    "times",
    "execute",
    "practical",
    "easy",
    "guys",
    "let",
    "give",
    "quick",
    "recap",
    "things",
    "done",
    "first",
    "told",
    "write",
    "docker",
    "file",
    "order",
    "create",
    "docker",
    "image",
    "particular",
    "application",
    "basing",
    "image",
    "official",
    "node",
    "image",
    "present",
    "docker",
    "hub",
    "right",
    "already",
    "contains",
    "dependencies",
    "makes",
    "docker",
    "file",
    "looks",
    "small",
    "build",
    "image",
    "using",
    "dockerfile",
    "explain",
    "use",
    "jenkins",
    "order",
    "automate",
    "task",
    "cloning",
    "repository",
    "building",
    "docker",
    "image",
    "testing",
    "docker",
    "image",
    "finally",
    "uploading",
    "docker",
    "hub",
    "automatically",
    "help",
    "jenkins",
    "told",
    "need",
    "provide",
    "credentials",
    "tags",
    "write",
    "jenkins",
    "file",
    "next",
    "part",
    "use",
    "cases",
    "different",
    "teams",
    "beat",
    "staging",
    "production",
    "actually",
    "pull",
    "image",
    "uploaded",
    "onto",
    "docker",
    "hub",
    "run",
    "many",
    "containers",
    "want",
    "hey",
    "everyone",
    "reyshma",
    "edureka",
    "today",
    "tutorial",
    "going",
    "learn",
    "git",
    "github",
    "without",
    "ado",
    "let",
    "us",
    "begin",
    "tutorial",
    "looking",
    "topics",
    "learning",
    "today",
    "first",
    "see",
    "version",
    "control",
    "actually",
    "need",
    "version",
    "control",
    "take",
    "look",
    "different",
    "version",
    "control",
    "tools",
    "see",
    "github",
    "get",
    "lots",
    "taking",
    "account",
    "case",
    "study",
    "dominion",
    "enterprises",
    "using",
    "github",
    "take",
    "look",
    "features",
    "git",
    "finally",
    "going",
    "use",
    "git",
    "commands",
    "perform",
    "get",
    "operations",
    "exactly",
    "learning",
    "today",
    "good",
    "go",
    "let",
    "us",
    "begin",
    "first",
    "topic",
    "version",
    "control",
    "well",
    "think",
    "version",
    "control",
    "management",
    "system",
    "manages",
    "changes",
    "make",
    "project",
    "till",
    "end",
    "changes",
    "make",
    "might",
    "kind",
    "adding",
    "new",
    "files",
    "modifying",
    "older",
    "files",
    "changing",
    "source",
    "code",
    "something",
    "version",
    "control",
    "system",
    "every",
    "time",
    "make",
    "change",
    "project",
    "creates",
    "snapshot",
    "entire",
    "project",
    "saves",
    "snapshots",
    "actually",
    "known",
    "different",
    "versions",
    "trouble",
    "word",
    "snapshot",
    "consider",
    "snapshot",
    "actually",
    "entire",
    "state",
    "project",
    "particular",
    "time",
    "means",
    "contain",
    "kind",
    "files",
    "project",
    "storing",
    "time",
    "kind",
    "changes",
    "made",
    "particular",
    "version",
    "contains",
    "see",
    "example",
    "let",
    "say",
    "developing",
    "website",
    "let",
    "say",
    "beginning",
    "one",
    "web",
    "page",
    "called",
    "index",
    "dot",
    "html",
    "days",
    "added",
    "another",
    "webpage",
    "called",
    "dot",
    "html",
    "made",
    "modifications",
    "html",
    "adding",
    "kind",
    "pictures",
    "kind",
    "text",
    "let",
    "see",
    "actually",
    "version",
    "control",
    "system",
    "stores",
    "see",
    "detected",
    "something",
    "modified",
    "something",
    "created",
    "example",
    "storing",
    "dot",
    "html",
    "created",
    "kind",
    "photo",
    "created",
    "added",
    "let",
    "say",
    "days",
    "changed",
    "entire",
    "page",
    "layout",
    "dot",
    "html",
    "page",
    "version",
    "control",
    "system",
    "detect",
    "kind",
    "change",
    "say",
    "duration",
    "ml",
    "modified",
    "consider",
    "three",
    "snapshots",
    "different",
    "versions",
    "index",
    "dot",
    "html",
    "webpage",
    "anything",
    "else",
    "version",
    "1",
    "added",
    "another",
    "web",
    "page",
    "going",
    "version",
    "2",
    "page",
    "layout",
    "web",
    "page",
    "version",
    "version",
    "control",
    "system",
    "stores",
    "different",
    "versions",
    "hope",
    "understood",
    "version",
    "control",
    "system",
    "versions",
    "let",
    "us",
    "move",
    "next",
    "topic",
    "see",
    "actually",
    "need",
    "version",
    "control",
    "might",
    "thinking",
    "need",
    "version",
    "control",
    "know",
    "changes",
    "made",
    "maybe",
    "making",
    "changes",
    "correcting",
    "project",
    "something",
    "number",
    "things",
    "need",
    "version",
    "control",
    "n",
    "let",
    "us",
    "take",
    "look",
    "one",
    "one",
    "first",
    "thing",
    "version",
    "control",
    "system",
    "avails",
    "us",
    "collaboration",
    "imagine",
    "three",
    "developers",
    "working",
    "particular",
    "project",
    "everyone",
    "working",
    "isolation",
    "even",
    "working",
    "shared",
    "folder",
    "might",
    "conflicts",
    "sometimes",
    "one",
    "trying",
    "modify",
    "file",
    "let",
    "say",
    "working",
    "isolation",
    "everyone",
    "minding",
    "business",
    "developer",
    "one",
    "made",
    "changes",
    "xyz",
    "particular",
    "application",
    "application",
    "developer",
    "made",
    "kind",
    "changes",
    "abc",
    "continuing",
    "thing",
    "making",
    "modifications",
    "file",
    "differently",
    "end",
    "try",
    "collaborate",
    "try",
    "merge",
    "work",
    "together",
    "come",
    "lot",
    "conflicts",
    "might",
    "know",
    "done",
    "kind",
    "changes",
    "end",
    "end",
    "chaos",
    "version",
    "control",
    "system",
    "provides",
    "shared",
    "workspace",
    "continuously",
    "tells",
    "made",
    "kind",
    "change",
    "changed",
    "always",
    "get",
    "notified",
    "someone",
    "made",
    "changed",
    "project",
    "version",
    "control",
    "system",
    "collaboration",
    "available",
    "tween",
    "developers",
    "visualize",
    "everyone",
    "work",
    "properly",
    "result",
    "project",
    "always",
    "evolve",
    "whole",
    "start",
    "save",
    "lot",
    "time",
    "wo",
    "much",
    "conflicts",
    "obviously",
    "developer",
    "see",
    "already",
    "made",
    "changes",
    "wo",
    "go",
    "right",
    "carry",
    "work",
    "make",
    "changes",
    "without",
    "interfering",
    "work",
    "okay",
    "move",
    "next",
    "reason",
    "need",
    "version",
    "control",
    "system",
    "one",
    "important",
    "things",
    "need",
    "version",
    "control",
    "system",
    "tell",
    "next",
    "reason",
    "storing",
    "versions",
    "saving",
    "version",
    "project",
    "made",
    "changes",
    "essential",
    "without",
    "version",
    "control",
    "system",
    "actually",
    "get",
    "confusing",
    "might",
    "kind",
    "questions",
    "arise",
    "mind",
    "trying",
    "save",
    "version",
    "first",
    "question",
    "might",
    "much",
    "would",
    "save",
    "would",
    "save",
    "entire",
    "project",
    "would",
    "save",
    "changes",
    "made",
    "save",
    "changes",
    "hard",
    "view",
    "whole",
    "project",
    "time",
    "try",
    "save",
    "entire",
    "project",
    "every",
    "time",
    "huge",
    "amount",
    "unnecessary",
    "redundant",
    "data",
    "lying",
    "around",
    "saving",
    "thing",
    "remaining",
    "unchanged",
    "cover",
    "lot",
    "space",
    "problem",
    "comes",
    "actually",
    "named",
    "versions",
    "even",
    "organized",
    "person",
    "might",
    "actually",
    "come",
    "comprehensive",
    "naming",
    "scheme",
    "soon",
    "project",
    "starts",
    "varying",
    "comes",
    "variance",
    "pretty",
    "good",
    "chance",
    "actually",
    "lose",
    "track",
    "naming",
    "finally",
    "important",
    "question",
    "know",
    "exactly",
    "different",
    "versions",
    "ask",
    "okay",
    "difference",
    "version",
    "1",
    "version",
    "2",
    "exactly",
    "changed",
    "need",
    "remember",
    "document",
    "well",
    "version",
    "control",
    "system",
    "worry",
    "worry",
    "much",
    "need",
    "save",
    "name",
    "remember",
    "exactly",
    "different",
    "different",
    "versions",
    "version",
    "control",
    "system",
    "always",
    "acknowledges",
    "one",
    "project",
    "working",
    "project",
    "one",
    "version",
    "disk",
    "everything",
    "else",
    "changes",
    "made",
    "past",
    "neatly",
    "packed",
    "inside",
    "version",
    "control",
    "system",
    "let",
    "us",
    "go",
    "ahead",
    "see",
    "next",
    "reason",
    "version",
    "control",
    "system",
    "provides",
    "backup",
    "diagram",
    "see",
    "actually",
    "layout",
    "particul",
    "distributed",
    "version",
    "control",
    "system",
    "got",
    "central",
    "server",
    "project",
    "files",
    "located",
    "apart",
    "every",
    "one",
    "developers",
    "local",
    "copy",
    "files",
    "present",
    "central",
    "server",
    "inside",
    "local",
    "machine",
    "known",
    "local",
    "copies",
    "developers",
    "every",
    "time",
    "start",
    "coding",
    "start",
    "day",
    "actually",
    "fetch",
    "project",
    "files",
    "central",
    "server",
    "store",
    "local",
    "machine",
    "done",
    "working",
    "actually",
    "transfer",
    "files",
    "back",
    "central",
    "server",
    "every",
    "time",
    "always",
    "local",
    "copy",
    "local",
    "machine",
    "times",
    "crisis",
    "like",
    "maybe",
    "let",
    "say",
    "central",
    "server",
    "gets",
    "crashed",
    "lost",
    "project",
    "files",
    "worry",
    "developers",
    "maintaining",
    "local",
    "copy",
    "exact",
    "copy",
    "files",
    "related",
    "project",
    "present",
    "central",
    "server",
    "local",
    "machine",
    "even",
    "let",
    "say",
    "maybe",
    "developer",
    "updated",
    "local",
    "copy",
    "files",
    "loses",
    "central",
    "servers",
    "gets",
    "crashed",
    "developer",
    "maintained",
    "local",
    "copy",
    "always",
    "going",
    "someone",
    "already",
    "updated",
    "obviously",
    "going",
    "huge",
    "number",
    "collaborators",
    "working",
    "project",
    "even",
    "particular",
    "developer",
    "communicate",
    "developers",
    "get",
    "fetch",
    "project",
    "files",
    "developers",
    "local",
    "copy",
    "well",
    "reliable",
    "version",
    "control",
    "system",
    "always",
    "going",
    "backup",
    "fired",
    "next",
    "thing",
    "version",
    "control",
    "helps",
    "us",
    "analyze",
    "project",
    "finished",
    "project",
    "want",
    "know",
    "project",
    "actually",
    "evolved",
    "make",
    "analysis",
    "know",
    "could",
    "done",
    "better",
    "could",
    "improved",
    "project",
    "need",
    "kind",
    "data",
    "make",
    "analysis",
    "want",
    "know",
    "exactly",
    "changed",
    "change",
    "much",
    "time",
    "take",
    "version",
    "control",
    "system",
    "actually",
    "provides",
    "information",
    "every",
    "time",
    "change",
    "something",
    "version",
    "control",
    "system",
    "provides",
    "proper",
    "description",
    "changed",
    "changed",
    "also",
    "see",
    "entire",
    "timeline",
    "make",
    "analysis",
    "report",
    "easy",
    "way",
    "got",
    "data",
    "present",
    "version",
    "control",
    "system",
    "helps",
    "analyze",
    "project",
    "well",
    "let",
    "us",
    "move",
    "ahead",
    "let",
    "us",
    "take",
    "look",
    "add",
    "version",
    "control",
    "tools",
    "order",
    "incorporate",
    "version",
    "control",
    "system",
    "project",
    "use",
    "version",
    "control",
    "tool",
    "let",
    "us",
    "take",
    "look",
    "available",
    "kind",
    "tools",
    "use",
    "incorporate",
    "version",
    "control",
    "system",
    "got",
    "four",
    "popular",
    "version",
    "control",
    "system",
    "tools",
    "get",
    "learning",
    "today",
    "tutorial",
    "learning",
    "use",
    "git",
    "apart",
    "get",
    "got",
    "options",
    "well",
    "got",
    "apache",
    "subversion",
    "also",
    "popularly",
    "known",
    "sbn",
    "svn",
    "cvs",
    "concurrent",
    "version",
    "systems",
    "centralized",
    "version",
    "control",
    "tool",
    "means",
    "provide",
    "developers",
    "local",
    "copy",
    "means",
    "contributors",
    "collaborators",
    "actually",
    "working",
    "directly",
    "central",
    "repository",
    "maintain",
    "local",
    "copy",
    "kind",
    "actually",
    "becoming",
    "obsolete",
    "everyone",
    "prefers",
    "distributed",
    "version",
    "control",
    "system",
    "everyone",
    "okay",
    "copy",
    "mercurial",
    "hand",
    "similar",
    "get",
    "also",
    "distributed",
    "version",
    "control",
    "tool",
    "learning",
    "get",
    "get",
    "highlighted",
    "yellow",
    "let",
    "move",
    "ahead",
    "interest",
    "time",
    "graph",
    "graph",
    "collected",
    "google",
    "trends",
    "actually",
    "shows",
    "many",
    "people",
    "using",
    "time",
    "blue",
    "line",
    "actually",
    "represents",
    "get",
    "green",
    "svn",
    "yellow",
    "mercurial",
    "red",
    "cvs",
    "see",
    "start",
    "get",
    "always",
    "popular",
    "version",
    "control",
    "tool",
    "compared",
    "bian",
    "mercurial",
    "cvs",
    "always",
    "kind",
    "bad",
    "day",
    "cvs",
    "get",
    "always",
    "popular",
    "use",
    "get",
    "right",
    "nothing",
    "say",
    "much",
    "yes",
    "lot",
    "fellow",
    "attendees",
    "agree",
    "use",
    "get",
    "going",
    "learn",
    "use",
    "get",
    "tutorial",
    "let",
    "us",
    "move",
    "ahead",
    "let",
    "us",
    "learn",
    "git",
    "github",
    "right",
    "diagram",
    "see",
    "left",
    "actually",
    "diagram",
    "represents",
    "exactly",
    "github",
    "exactly",
    "get",
    "talking",
    "distributed",
    "version",
    "control",
    "system",
    "right",
    "hand",
    "side",
    "diagram",
    "actually",
    "shows",
    "typical",
    "layout",
    "distributed",
    "version",
    "control",
    "system",
    "got",
    "central",
    "server",
    "central",
    "repository",
    "using",
    "word",
    "repository",
    "lot",
    "get",
    "confused",
    "give",
    "brief",
    "overview",
    "also",
    "tell",
    "detail",
    "repository",
    "explain",
    "everything",
    "later",
    "tutorial",
    "consider",
    "repository",
    "data",
    "space",
    "store",
    "project",
    "files",
    "kind",
    "files",
    "related",
    "project",
    "get",
    "confused",
    "say",
    "rip",
    "tree",
    "instead",
    "server",
    "anything",
    "else",
    "distributive",
    "version",
    "control",
    "system",
    "got",
    "central",
    "repository",
    "got",
    "local",
    "repositories",
    "well",
    "every",
    "developers",
    "first",
    "make",
    "changes",
    "local",
    "repository",
    "push",
    "changes",
    "transfer",
    "changes",
    "central",
    "repository",
    "also",
    "update",
    "local",
    "repositories",
    "new",
    "files",
    "pushed",
    "central",
    "repository",
    "operation",
    "called",
    "pull",
    "fetch",
    "data",
    "central",
    "repository",
    "see",
    "diagram",
    "left",
    "know",
    "github",
    "going",
    "central",
    "repository",
    "get",
    "tool",
    "going",
    "allow",
    "create",
    "local",
    "repositories",
    "let",
    "exactly",
    "tell",
    "github",
    "people",
    "actually",
    "get",
    "confused",
    "git",
    "github",
    "think",
    "kind",
    "thing",
    "maybe",
    "name",
    "sound",
    "alike",
    "actually",
    "different",
    "well",
    "git",
    "version",
    "control",
    "tool",
    "allow",
    "perform",
    "kind",
    "operations",
    "fetch",
    "data",
    "central",
    "server",
    "push",
    "local",
    "files",
    "central",
    "server",
    "get",
    "allow",
    "version",
    "control",
    "management",
    "tool",
    "whereas",
    "github",
    "code",
    "hosting",
    "platform",
    "version",
    "control",
    "collaboration",
    "github",
    "company",
    "allows",
    "host",
    "central",
    "repository",
    "remote",
    "server",
    "want",
    "explain",
    "easy",
    "words",
    "consider",
    "github",
    "social",
    "network",
    "much",
    "similar",
    "facebook",
    "like",
    "differences",
    "social",
    "network",
    "developers",
    "facebook",
    "sharing",
    "photos",
    "videos",
    "kind",
    "statuses",
    "developers",
    "get",
    "share",
    "code",
    "everyone",
    "see",
    "projects",
    "either",
    "code",
    "worked",
    "github",
    "certain",
    "advantages",
    "distributed",
    "version",
    "control",
    "system",
    "well",
    "first",
    "thing",
    "already",
    "discussed",
    "provides",
    "backup",
    "time",
    "central",
    "server",
    "crashes",
    "everyone",
    "backup",
    "files",
    "next",
    "reason",
    "provides",
    "speed",
    "central",
    "servers",
    "typically",
    "located",
    "remote",
    "server",
    "always",
    "travel",
    "network",
    "get",
    "access",
    "files",
    "sometimes",
    "internet",
    "want",
    "work",
    "project",
    "kind",
    "impossible",
    "access",
    "files",
    "distributed",
    "version",
    "control",
    "system",
    "need",
    "internet",
    "access",
    "always",
    "need",
    "internet",
    "want",
    "push",
    "pull",
    "central",
    "server",
    "apart",
    "work",
    "files",
    "inside",
    "local",
    "machine",
    "fetching",
    "workspace",
    "problem",
    "advantages",
    "get",
    "distributed",
    "version",
    "control",
    "system",
    "centralized",
    "version",
    "control",
    "system",
    "actually",
    "provide",
    "let",
    "us",
    "take",
    "look",
    "github",
    "case",
    "study",
    "dominion",
    "enterprises",
    "dominion",
    "enterprises",
    "leading",
    "marketing",
    "services",
    "publishing",
    "company",
    "works",
    "across",
    "several",
    "industries",
    "got",
    "100",
    "offices",
    "worldwide",
    "distributed",
    "technical",
    "team",
    "support",
    "develop",
    "range",
    "website",
    "include",
    "popular",
    "websites",
    "like",
    "dominion",
    "enterprises",
    "websites",
    "actually",
    "get",
    "tens",
    "million",
    "unique",
    "visitors",
    "every",
    "month",
    "website",
    "work",
    "separate",
    "development",
    "team",
    "got",
    "unique",
    "needs",
    "close",
    "working",
    "independently",
    "team",
    "goals",
    "projects",
    "budgets",
    "actually",
    "wanted",
    "share",
    "resources",
    "wanted",
    "everyone",
    "see",
    "teams",
    "actually",
    "working",
    "basically",
    "want",
    "transparency",
    "well",
    "needed",
    "platform",
    "flexible",
    "enough",
    "support",
    "variety",
    "workflows",
    "would",
    "provide",
    "dominion",
    "enterprises",
    "development",
    "around",
    "world",
    "secure",
    "place",
    "share",
    "code",
    "work",
    "together",
    "adopted",
    "github",
    "platform",
    "reason",
    "choosing",
    "github",
    "developers",
    "across",
    "dominion",
    "enterprises",
    "already",
    "using",
    "time",
    "came",
    "adopt",
    "new",
    "version",
    "control",
    "platform",
    "obviously",
    "github",
    "enterprise",
    "definitely",
    "seemed",
    "like",
    "intuitive",
    "choice",
    "everyone",
    "developers",
    "also",
    "familiar",
    "github",
    "learning",
    "curve",
    "also",
    "small",
    "could",
    "start",
    "contributing",
    "code",
    "right",
    "away",
    "github",
    "github",
    "developer",
    "teams",
    "development",
    "teams",
    "provided",
    "access",
    "always",
    "share",
    "code",
    "working",
    "end",
    "everyone",
    "got",
    "secure",
    "place",
    "share",
    "code",
    "work",
    "together",
    "joe",
    "fuller",
    "cio",
    "dominion",
    "enterprises",
    "says",
    "github",
    "enterprise",
    "allowed",
    "us",
    "store",
    "company",
    "source",
    "code",
    "central",
    "corporately",
    "control",
    "system",
    "dominion",
    "enterprises",
    "actually",
    "manages",
    "45",
    "websites",
    "important",
    "dominion",
    "price",
    "choose",
    "platform",
    "made",
    "working",
    "together",
    "possible",
    "matter",
    "sharing",
    "dominion",
    "enterprises",
    "open",
    "source",
    "project",
    "github",
    "also",
    "combat",
    "implications",
    "storing",
    "private",
    "code",
    "publicly",
    "make",
    "work",
    "transparent",
    "across",
    "company",
    "well",
    "also",
    "using",
    "jenkins",
    "facilitate",
    "continuous",
    "integration",
    "environment",
    "order",
    "continuously",
    "deliver",
    "software",
    "adopted",
    "github",
    "version",
    "control",
    "platform",
    "github",
    "actually",
    "facilitated",
    "lot",
    "things",
    "dominion",
    "enterprises",
    "able",
    "incorporate",
    "continuous",
    "integration",
    "environment",
    "jenkins",
    "actually",
    "sharing",
    "code",
    "making",
    "software",
    "delivery",
    "even",
    "faster",
    "github",
    "helped",
    "minute",
    "enterprises",
    "sure",
    "might",
    "common",
    "lot",
    "companies",
    "well",
    "let",
    "us",
    "move",
    "forward",
    "topic",
    "waiting",
    "learn",
    "get",
    "git",
    "distributed",
    "version",
    "control",
    "tool",
    "supports",
    "distributed",
    "non",
    "linear",
    "workflow",
    "get",
    "tool",
    "actually",
    "facilitates",
    "distributed",
    "version",
    "control",
    "system",
    "benefits",
    "provide",
    "create",
    "local",
    "repository",
    "local",
    "machine",
    "help",
    "access",
    "remote",
    "repository",
    "fetch",
    "files",
    "push",
    "files",
    "get",
    "tool",
    "required",
    "perform",
    "operations",
    "telling",
    "perform",
    "operations",
    "using",
    "get",
    "later",
    "tutorial",
    "think",
    "get",
    "actually",
    "need",
    "kind",
    "version",
    "control",
    "system",
    "task",
    "move",
    "see",
    "different",
    "features",
    "git",
    "different",
    "features",
    "get",
    "distributed",
    "get",
    "compatible",
    "get",
    "provides",
    "non",
    "linear",
    "workflow",
    "avails",
    "branching",
    "lightweight",
    "provides",
    "speed",
    "open",
    "source",
    "reliable",
    "secure",
    "economical",
    "let",
    "us",
    "take",
    "look",
    "features",
    "one",
    "one",
    "first",
    "feature",
    "going",
    "look",
    "distributed",
    "like",
    "telling",
    "distributor",
    "version",
    "control",
    "tool",
    "means",
    "feature",
    "get",
    "provides",
    "gives",
    "power",
    "local",
    "repository",
    "lets",
    "local",
    "copy",
    "entire",
    "development",
    "history",
    "located",
    "central",
    "repository",
    "fetch",
    "files",
    "central",
    "repository",
    "get",
    "local",
    "repository",
    "always",
    "updated",
    "time",
    "calling",
    "distributed",
    "every",
    "let",
    "say",
    "might",
    "number",
    "collaborators",
    "developers",
    "might",
    "living",
    "different",
    "parts",
    "world",
    "someone",
    "might",
    "working",
    "united",
    "states",
    "one",
    "might",
    "india",
    "word",
    "project",
    "actually",
    "distributed",
    "everyone",
    "local",
    "copy",
    "distributed",
    "worldwide",
    "say",
    "distributed",
    "actually",
    "means",
    "next",
    "feature",
    "compatible",
    "let",
    "say",
    "might",
    "using",
    "get",
    "first",
    "place",
    "different",
    "version",
    "control",
    "system",
    "already",
    "installed",
    "like",
    "svn",
    "like",
    "apache",
    "subversion",
    "cvs",
    "want",
    "switch",
    "get",
    "obviously",
    "happy",
    "centralized",
    "version",
    "control",
    "system",
    "want",
    "distributed",
    "version",
    "control",
    "system",
    "want",
    "migrate",
    "svn",
    "get",
    "worried",
    "might",
    "transfer",
    "files",
    "huge",
    "amount",
    "files",
    "svn",
    "repository",
    "git",
    "repository",
    "well",
    "afraid",
    "let",
    "tell",
    "anymore",
    "get",
    "compatible",
    "vm",
    "repositories",
    "well",
    "download",
    "install",
    "get",
    "system",
    "directly",
    "access",
    "svn",
    "repository",
    "network",
    "central",
    "repository",
    "local",
    "repository",
    "going",
    "good",
    "trip",
    "tree",
    "want",
    "change",
    "central",
    "repository",
    "well",
    "use",
    "get",
    "svn",
    "directly",
    "access",
    "files",
    "files",
    "project",
    "residing",
    "svn",
    "repository",
    "change",
    "compatible",
    "existing",
    "systems",
    "protocols",
    "protocols",
    "like",
    "ssh",
    "winner",
    "protocol",
    "obviously",
    "get",
    "users",
    "ssh",
    "connect",
    "central",
    "repository",
    "well",
    "compatible",
    "existing",
    "things",
    "migrating",
    "get",
    "starting",
    "use",
    "get",
    "actually",
    "change",
    "lot",
    "things",
    "everyone",
    "understood",
    "two",
    "features",
    "far",
    "okay",
    "next",
    "feature",
    "get",
    "supports",
    "nonlinear",
    "development",
    "software",
    "working",
    "get",
    "get",
    "actually",
    "records",
    "current",
    "state",
    "project",
    "creating",
    "tree",
    "graph",
    "index",
    "tree",
    "know",
    "nonlinear",
    "working",
    "get",
    "get",
    "actual",
    "records",
    "current",
    "state",
    "project",
    "creating",
    "tree",
    "graph",
    "index",
    "know",
    "tree",
    "non",
    "linear",
    "data",
    "structure",
    "usually",
    "actually",
    "form",
    "directed",
    "acyclic",
    "graph",
    "popularly",
    "known",
    "dh",
    "actually",
    "get",
    "facilitates",
    "nonlinear",
    "development",
    "software",
    "also",
    "includes",
    "techniques",
    "navigate",
    "visualize",
    "work",
    "currently",
    "actually",
    "facilitate",
    "talking",
    "get",
    "actually",
    "facilitates",
    "nonlinear",
    "development",
    "actually",
    "crunching",
    "branching",
    "actually",
    "allows",
    "make",
    "nonlinear",
    "software",
    "development",
    "gift",
    "feature",
    "actually",
    "makes",
    "get",
    "stand",
    "apart",
    "nearly",
    "every",
    "version",
    "control",
    "management",
    "get",
    "one",
    "branching",
    "model",
    "get",
    "allows",
    "get",
    "actually",
    "encourages",
    "multiple",
    "local",
    "branches",
    "branches",
    "actually",
    "independent",
    "creation",
    "merging",
    "deletion",
    "branches",
    "actually",
    "takes",
    "seconds",
    "thing",
    "called",
    "master",
    "branch",
    "means",
    "main",
    "branch",
    "starts",
    "start",
    "project",
    "end",
    "project",
    "always",
    "contain",
    "production",
    "quality",
    "code",
    "always",
    "contain",
    "entire",
    "project",
    "lightweight",
    "might",
    "thinking",
    "since",
    "using",
    "local",
    "repositories",
    "local",
    "machine",
    "fetching",
    "files",
    "central",
    "repository",
    "think",
    "way",
    "know",
    "like",
    "hon",
    "maybe",
    "people",
    "pushing",
    "code",
    "central",
    "repository",
    "updating",
    "local",
    "repository",
    "files",
    "data",
    "might",
    "huge",
    "actually",
    "get",
    "uses",
    "lossless",
    "compression",
    "technique",
    "compresses",
    "data",
    "client",
    "side",
    "even",
    "though",
    "might",
    "look",
    "like",
    "got",
    "lot",
    "files",
    "actually",
    "comes",
    "storage",
    "storing",
    "data",
    "local",
    "repository",
    "compressed",
    "take",
    "lot",
    "space",
    "fetching",
    "data",
    "local",
    "repository",
    "workspace",
    "converts",
    "work",
    "whenever",
    "push",
    "press",
    "store",
    "minimal",
    "space",
    "disk",
    "provides",
    "lot",
    "speed",
    "since",
    "local",
    "repository",
    "always",
    "travel",
    "network",
    "fetch",
    "files",
    "take",
    "time",
    "get",
    "files",
    "workspace",
    "local",
    "repository",
    "see",
    "actually",
    "three",
    "times",
    "faster",
    "fetching",
    "data",
    "remote",
    "repository",
    "obviously",
    "travel",
    "network",
    "get",
    "data",
    "files",
    "want",
    "mozilla",
    "actually",
    "performed",
    "kind",
    "performance",
    "tests",
    "found",
    "get",
    "actually",
    "one",
    "order",
    "magnitude",
    "faster",
    "version",
    "control",
    "tools",
    "actually",
    "equal",
    "10",
    "times",
    "faster",
    "version",
    "control",
    "tools",
    "reason",
    "get",
    "actually",
    "written",
    "c",
    "c",
    "like",
    "languages",
    "close",
    "machine",
    "language",
    "produces",
    "runtime",
    "overheads",
    "makes",
    "processing",
    "fast",
    "get",
    "small",
    "get",
    "fast",
    "next",
    "feature",
    "open",
    "source",
    "well",
    "know",
    "get",
    "actually",
    "created",
    "linus",
    "torvalds",
    "famous",
    "man",
    "created",
    "linux",
    "kernel",
    "actually",
    "used",
    "get",
    "development",
    "next",
    "colonel",
    "using",
    "version",
    "control",
    "system",
    "called",
    "bitkeeper",
    "first",
    "open",
    "source",
    "day",
    "owner",
    "bitkeeper",
    "actually",
    "made",
    "paid",
    "version",
    "actually",
    "got",
    "linus",
    "torvalds",
    "mad",
    "created",
    "version",
    "control",
    "system",
    "tool",
    "came",
    "get",
    "made",
    "open",
    "source",
    "everyone",
    "source",
    "code",
    "available",
    "modify",
    "get",
    "free",
    "one",
    "good",
    "thing",
    "get",
    "reliable",
    "like",
    "telling",
    "since",
    "star",
    "egg",
    "backup",
    "files",
    "local",
    "repository",
    "central",
    "server",
    "crashes",
    "worry",
    "files",
    "saving",
    "local",
    "repository",
    "even",
    "local",
    "repository",
    "might",
    "developers",
    "local",
    "repository",
    "tell",
    "whenever",
    "need",
    "data",
    "lose",
    "data",
    "central",
    "server",
    "crashed",
    "directly",
    "push",
    "data",
    "central",
    "repository",
    "everyone",
    "skinner",
    "always",
    "backup",
    "next",
    "thing",
    "get",
    "actually",
    "secure",
    "git",
    "uses",
    "name",
    "identify",
    "objects",
    "whenever",
    "actually",
    "make",
    "change",
    "actually",
    "creates",
    "commit",
    "object",
    "made",
    "changes",
    "committed",
    "changes",
    "actually",
    "hard",
    "go",
    "back",
    "change",
    "without",
    "people",
    "knowing",
    "whenever",
    "make",
    "commit",
    "actually",
    "converts",
    "well",
    "kind",
    "cryptographic",
    "algorithm",
    "message",
    "digest",
    "algorithm",
    "actually",
    "converts",
    "commit",
    "object",
    "four",
    "digit",
    "hexadecimal",
    "code",
    "message",
    "ai",
    "uses",
    "techniques",
    "algorithms",
    "like",
    "md4",
    "md5",
    "actually",
    "secure",
    "considered",
    "secure",
    "even",
    "national",
    "security",
    "agency",
    "united",
    "states",
    "america",
    "uses",
    "ssj",
    "using",
    "might",
    "know",
    "secure",
    "well",
    "want",
    "know",
    "md5",
    "message",
    "digest",
    "going",
    "take",
    "whole",
    "algorithm",
    "whole",
    "cryptographic",
    "algorithm",
    "make",
    "cipher",
    "google",
    "learn",
    "sji",
    "main",
    "concept",
    "made",
    "changes",
    "deny",
    "met",
    "changes",
    "store",
    "everyone",
    "see",
    "create",
    "commit",
    "hash",
    "everyone",
    "see",
    "commit",
    "hash",
    "also",
    "useful",
    "want",
    "revert",
    "back",
    "previous",
    "versions",
    "want",
    "know",
    "commits",
    "exactly",
    "caused",
    "problem",
    "want",
    "remove",
    "commit",
    "want",
    "remove",
    "version",
    "sha",
    "give",
    "hash",
    "log",
    "every",
    "government",
    "move",
    "see",
    "feature",
    "economical",
    "get",
    "actually",
    "released",
    "general",
    "public",
    "license",
    "means",
    "free",
    "pay",
    "money",
    "download",
    "get",
    "system",
    "kids",
    "without",
    "burning",
    "hole",
    "pocket",
    "since",
    "heavy",
    "lifting",
    "done",
    "kind",
    "side",
    "everything",
    "entire",
    "workspace",
    "push",
    "local",
    "repository",
    "first",
    "pushing",
    "central",
    "server",
    "means",
    "people",
    "pushing",
    "central",
    "server",
    "sure",
    "work",
    "experimenting",
    "central",
    "repository",
    "central",
    "repository",
    "simple",
    "enough",
    "worry",
    "complex",
    "powerful",
    "hardware",
    "lot",
    "money",
    "saved",
    "well",
    "get",
    "us",
    "free",
    "get",
    "small",
    "good",
    "provides",
    "cool",
    "features",
    "would",
    "actually",
    "want",
    "get",
    "features",
    "go",
    "ahead",
    "next",
    "topic",
    "next",
    "first",
    "see",
    "repository",
    "github",
    "says",
    "directory",
    "storage",
    "space",
    "projects",
    "get",
    "live",
    "local",
    "folder",
    "computer",
    "like",
    "local",
    "repository",
    "storage",
    "space",
    "github",
    "another",
    "online",
    "host",
    "means",
    "central",
    "repository",
    "keep",
    "gold",
    "files",
    "text",
    "files",
    "image",
    "files",
    "name",
    "keep",
    "inside",
    "repository",
    "everything",
    "related",
    "project",
    "like",
    "chanting",
    "since",
    "start",
    "tutorial",
    "got",
    "two",
    "kinds",
    "repositories",
    "got",
    "central",
    "repository",
    "got",
    "local",
    "repository",
    "let",
    "us",
    "take",
    "look",
    "repositories",
    "actually",
    "left",
    "hand",
    "side",
    "see",
    "central",
    "repository",
    "right",
    "hand",
    "side",
    "local",
    "repository",
    "diagram",
    "middle",
    "actually",
    "shows",
    "entire",
    "layout",
    "local",
    "repository",
    "inside",
    "local",
    "machine",
    "central",
    "repository",
    "going",
    "github",
    "central",
    "repository",
    "typically",
    "located",
    "remote",
    "server",
    "like",
    "told",
    "typically",
    "located",
    "github",
    "local",
    "repository",
    "going",
    "local",
    "machine",
    "reside",
    "dot",
    "git",
    "folder",
    "inside",
    "project",
    "root",
    "dot",
    "git",
    "folder",
    "going",
    "inside",
    "project",
    "root",
    "contain",
    "templates",
    "objects",
    "every",
    "configuration",
    "files",
    "create",
    "local",
    "repository",
    "since",
    "pushing",
    "code",
    "central",
    "repository",
    "also",
    "dot",
    "git",
    "repository",
    "folder",
    "inside",
    "sole",
    "purpose",
    "central",
    "repository",
    "actors",
    "developers",
    "actually",
    "share",
    "exchange",
    "data",
    "someone",
    "might",
    "working",
    "different",
    "problem",
    "someone",
    "might",
    "needing",
    "help",
    "push",
    "code",
    "problems",
    "sauce",
    "something",
    "worked",
    "central",
    "repository",
    "everyone",
    "else",
    "see",
    "everyone",
    "else",
    "pull",
    "code",
    "use",
    "well",
    "meant",
    "sharing",
    "data",
    "whereas",
    "local",
    "repository",
    "access",
    "meant",
    "work",
    "local",
    "repository",
    "work",
    "isolation",
    "one",
    "interfere",
    "even",
    "done",
    "years",
    "sure",
    "code",
    "working",
    "want",
    "show",
    "everyone",
    "transfer",
    "push",
    "central",
    "repository",
    "okay",
    "seeing",
    "get",
    "operations",
    "come",
    "using",
    "various",
    "operations",
    "commands",
    "help",
    "us",
    "things",
    "talking",
    "right",
    "talking",
    "pushing",
    "changes",
    "get",
    "operations",
    "performing",
    "operations",
    "creating",
    "repositories",
    "command",
    "making",
    "changes",
    "files",
    "repositories",
    "commands",
    "also",
    "parallel",
    "nonlinear",
    "development",
    "talking",
    "also",
    "sinking",
    "repositories",
    "central",
    "repository",
    "local",
    "repository",
    "connected",
    "show",
    "one",
    "one",
    "first",
    "thing",
    "need",
    "create",
    "repositories",
    "need",
    "central",
    "repository",
    "need",
    "local",
    "repository",
    "host",
    "central",
    "repository",
    "github",
    "need",
    "account",
    "github",
    "create",
    "repository",
    "local",
    "repository",
    "install",
    "get",
    "system",
    "working",
    "completely",
    "new",
    "project",
    "want",
    "start",
    "something",
    "fresh",
    "new",
    "use",
    "git",
    "init",
    "create",
    "repository",
    "want",
    "join",
    "ongoing",
    "project",
    "new",
    "project",
    "join",
    "clone",
    "central",
    "repository",
    "using",
    "command",
    "get",
    "blown",
    "let",
    "us",
    "let",
    "first",
    "create",
    "github",
    "account",
    "create",
    "repositories",
    "github",
    "said",
    "first",
    "need",
    "go",
    "account",
    "sign",
    "github",
    "pick",
    "username",
    "already",
    "taken",
    "provide",
    "email",
    "address",
    "get",
    "password",
    "click",
    "green",
    "button",
    "account",
    "created",
    "easy",
    "much",
    "verify",
    "email",
    "everything",
    "done",
    "sort",
    "thing",
    "go",
    "sign",
    "already",
    "account",
    "going",
    "sign",
    "softer",
    "signed",
    "find",
    "page",
    "get",
    "two",
    "buttons",
    "read",
    "guide",
    "use",
    "github",
    "start",
    "project",
    "right",
    "away",
    "telling",
    "github",
    "click",
    "button",
    "right",
    "go",
    "ahead",
    "start",
    "project",
    "get",
    "tells",
    "every",
    "project",
    "need",
    "need",
    "maintain",
    "unique",
    "repository",
    "healthy",
    "keeps",
    "things",
    "clean",
    "storing",
    "files",
    "related",
    "one",
    "project",
    "repository",
    "wo",
    "get",
    "confused",
    "later",
    "creating",
    "new",
    "repository",
    "provide",
    "repository",
    "name",
    "going",
    "name",
    "get",
    "github",
    "provide",
    "description",
    "repository",
    "optional",
    "want",
    "leave",
    "blank",
    "choose",
    "whether",
    "want",
    "public",
    "private",
    "want",
    "private",
    "pay",
    "kind",
    "amount",
    "like",
    "cost",
    "7",
    "month",
    "benefit",
    "private",
    "account",
    "say",
    "want",
    "share",
    "code",
    "anyone",
    "want",
    "anyone",
    "see",
    "github",
    "well",
    "leave",
    "public",
    "want",
    "free",
    "let",
    "everyone",
    "see",
    "work",
    "done",
    "leave",
    "lik",
    "initialize",
    "repository",
    "read",
    "readme",
    "file",
    "contain",
    "description",
    "files",
    "first",
    "file",
    "going",
    "inside",
    "repository",
    "create",
    "repository",
    "good",
    "habit",
    "actually",
    "initialize",
    "repository",
    "readme",
    "click",
    "option",
    "option",
    "add",
    "git",
    "ignore",
    "might",
    "kind",
    "files",
    "want",
    "making",
    "operations",
    "like",
    "push",
    "pull",
    "want",
    "files",
    "get",
    "pushed",
    "pulled",
    "like",
    "might",
    "kind",
    "log",
    "files",
    "anything",
    "add",
    "files",
    "get",
    "ignore",
    "right",
    "gone",
    "files",
    "starting",
    "project",
    "ignore",
    "get",
    "ignore",
    "actually",
    "add",
    "license",
    "well",
    "go",
    "license",
    "actually",
    "want",
    "leave",
    "none",
    "click",
    "green",
    "button",
    "create",
    "repository",
    "see",
    "initial",
    "comment",
    "initialized",
    "repository",
    "readme",
    "readme",
    "file",
    "want",
    "make",
    "changes",
    "read",
    "file",
    "click",
    "click",
    "edit",
    "pencil",
    "image",
    "icon",
    "kind",
    "make",
    "changes",
    "readme",
    "files",
    "want",
    "write",
    "something",
    "let",
    "say",
    "write",
    "scription",
    "tutorial",
    "purpose",
    "keeping",
    "simple",
    "made",
    "changes",
    "next",
    "thing",
    "commit",
    "changes",
    "go",
    "click",
    "commit",
    "changes",
    "green",
    "button",
    "done",
    "updated",
    "read",
    "dot",
    "md",
    "commit",
    "hash",
    "see",
    "go",
    "back",
    "repository",
    "say",
    "something",
    "updated",
    "show",
    "last",
    "commit",
    "little",
    "even",
    "show",
    "time",
    "branch",
    "master",
    "actually",
    "show",
    "logs",
    "since",
    "contributing",
    "one",
    "contributor",
    "made",
    "two",
    "commits",
    "first",
    "one",
    "initialized",
    "right",
    "modified",
    "right",
    "created",
    "branches",
    "one",
    "branch",
    "central",
    "repository",
    "created",
    "next",
    "thing",
    "need",
    "create",
    "local",
    "repository",
    "local",
    "machine",
    "already",
    "installed",
    "get",
    "system",
    "using",
    "windows",
    "system",
    "installed",
    "get",
    "windows",
    "want",
    "help",
    "installation",
    "already",
    "written",
    "blog",
    "leave",
    "link",
    "blog",
    "description",
    "refer",
    "blog",
    "install",
    "get",
    "system",
    "already",
    "done",
    "let",
    "say",
    "want",
    "project",
    "c",
    "drive",
    "let",
    "say",
    "waiting",
    "folder",
    "project",
    "name",
    "ed",
    "eureka",
    "project",
    "let",
    "say",
    "want",
    "local",
    "repository",
    "first",
    "thing",
    "right",
    "click",
    "click",
    "option",
    "git",
    "bash",
    "actually",
    "open",
    "colorful",
    "terminal",
    "use",
    "called",
    "git",
    "bash",
    "emulator",
    "typing",
    "commands",
    "work",
    "get",
    "back",
    "order",
    "create",
    "local",
    "repository",
    "first",
    "thing",
    "type",
    "command",
    "get",
    "press",
    "enter",
    "see",
    "initialized",
    "empty",
    "git",
    "repository",
    "path",
    "let",
    "see",
    "see",
    "dot",
    "get",
    "folder",
    "created",
    "see",
    "see",
    "see",
    "contains",
    "configurations",
    "object",
    "details",
    "everything",
    "repository",
    "initializing",
    "going",
    "local",
    "repository",
    "created",
    "repositories",
    "important",
    "link",
    "would",
    "know",
    "repository",
    "push",
    "pull",
    "changes",
    "files",
    "remote",
    "repository",
    "know",
    "connected",
    "properly",
    "order",
    "connect",
    "first",
    "thing",
    "need",
    "need",
    "add",
    "region",
    "going",
    "call",
    "remote",
    "repository",
    "origin",
    "using",
    "command",
    "git",
    "remote",
    "add",
    "origin",
    "add",
    "pull",
    "files",
    "github",
    "central",
    "repository",
    "order",
    "fetch",
    "files",
    "use",
    "git",
    "pull",
    "want",
    "transfer",
    "files",
    "push",
    "files",
    "github",
    "using",
    "git",
    "push",
    "let",
    "show",
    "back",
    "local",
    "repository",
    "see",
    "got",
    "kind",
    "files",
    "go",
    "central",
    "repository",
    "see",
    "got",
    "readme",
    "file",
    "first",
    "thing",
    "need",
    "add",
    "remote",
    "repository",
    "origin",
    "clear",
    "screen",
    "first",
    "need",
    "use",
    "command",
    "git",
    "remote",
    "add",
    "origin",
    "link",
    "repository",
    "let",
    "show",
    "find",
    "link",
    "go",
    "back",
    "repository",
    "find",
    "green",
    "button",
    "clone",
    "download",
    "click",
    "http",
    "url",
    "want",
    "copy",
    "clipboard",
    "go",
    "back",
    "git",
    "bash",
    "paste",
    "enter",
    "original",
    "added",
    "successfully",
    "showing",
    "kind",
    "errors",
    "perform",
    "git",
    "pull",
    "means",
    "fetch",
    "files",
    "central",
    "repository",
    "local",
    "repository",
    "type",
    "command",
    "get",
    "full",
    "origin",
    "master",
    "see",
    "done",
    "kind",
    "fetching",
    "master",
    "branch",
    "master",
    "branch",
    "let",
    "us",
    "see",
    "whether",
    "files",
    "fished",
    "let",
    "us",
    "go",
    "back",
    "local",
    "repository",
    "readme",
    "file",
    "central",
    "repository",
    "local",
    "repository",
    "actually",
    "update",
    "local",
    "repository",
    "central",
    "repository",
    "perform",
    "git",
    "pull",
    "fetch",
    "files",
    "entire",
    "repository",
    "local",
    "machine",
    "let",
    "us",
    "move",
    "forward",
    "move",
    "ahead",
    "next",
    "operation",
    "told",
    "order",
    "sync",
    "repositories",
    "also",
    "need",
    "use",
    "git",
    "push",
    "since",
    "done",
    "anything",
    "local",
    "repository",
    "perform",
    "good",
    "get",
    "push",
    "later",
    "show",
    "operations",
    "lot",
    "things",
    "end",
    "performing",
    "git",
    "push",
    "push",
    "changes",
    "central",
    "repository",
    "actually",
    "good",
    "habit",
    "good",
    "practice",
    "working",
    "github",
    "get",
    "start",
    "working",
    "first",
    "thing",
    "need",
    "make",
    "get",
    "bull",
    "fetch",
    "files",
    "central",
    "repository",
    "could",
    "get",
    "updated",
    "changes",
    "recently",
    "made",
    "everyone",
    "else",
    "done",
    "working",
    "sure",
    "code",
    "running",
    "make",
    "get",
    "bush",
    "everyone",
    "see",
    "make",
    "frequent",
    "changes",
    "central",
    "repository",
    "might",
    "interrupt",
    "work",
    "collaborators",
    "contributors",
    "well",
    "let",
    "us",
    "move",
    "ahead",
    "see",
    "make",
    "changes",
    "get",
    "actually",
    "concept",
    "intermediate",
    "layer",
    "resides",
    "workspace",
    "local",
    "repository",
    "want",
    "commit",
    "changes",
    "make",
    "changes",
    "local",
    "repository",
    "add",
    "files",
    "index",
    "first",
    "layer",
    "workspace",
    "local",
    "repository",
    "files",
    "index",
    "make",
    "commit",
    "organ",
    "app",
    "make",
    "changes",
    "local",
    "repository",
    "use",
    "command",
    "git",
    "add",
    "might",
    "get",
    "confused",
    "files",
    "index",
    "want",
    "see",
    "use",
    "command",
    "git",
    "status",
    "added",
    "changes",
    "index",
    "use",
    "command",
    "git",
    "commit",
    "make",
    "changes",
    "local",
    "repository",
    "let",
    "tell",
    "exactly",
    "git",
    "commit",
    "everyone",
    "talking",
    "get",
    "coming",
    "committing",
    "changes",
    "making",
    "changes",
    "let",
    "us",
    "know",
    "git",
    "commit",
    "let",
    "say",
    "made",
    "kind",
    "changes",
    "initial",
    "project",
    "comet",
    "kind",
    "object",
    "actually",
    "version",
    "project",
    "let",
    "say",
    "made",
    "changes",
    "committed",
    "changes",
    "version",
    "control",
    "system",
    "create",
    "another",
    "commit",
    "object",
    "going",
    "different",
    "version",
    "changes",
    "commit",
    "snapshots",
    "actually",
    "going",
    "contain",
    "snapshots",
    "project",
    "actually",
    "changed",
    "come",
    "show",
    "go",
    "ahead",
    "show",
    "commit",
    "changes",
    "local",
    "repository",
    "back",
    "local",
    "repository",
    "let",
    "create",
    "files",
    "developing",
    "project",
    "might",
    "contributing",
    "source",
    "code",
    "files",
    "central",
    "repository",
    "going",
    "tell",
    "coding",
    "going",
    "create",
    "text",
    "files",
    "write",
    "something",
    "actually",
    "pretty",
    "much",
    "working",
    "gold",
    "storing",
    "source",
    "code",
    "repositories",
    "go",
    "ahead",
    "create",
    "simple",
    "text",
    "file",
    "name",
    "eddie",
    "one",
    "write",
    "something",
    "try",
    "first",
    "file",
    "save",
    "file",
    "close",
    "remember",
    "even",
    "created",
    "inside",
    "repository",
    "actually",
    "showing",
    "work",
    "space",
    "local",
    "repository",
    "committed",
    "going",
    "going",
    "see",
    "files",
    "index",
    "clear",
    "screen",
    "like",
    "junk",
    "screen",
    "okay",
    "first",
    "thing",
    "going",
    "see",
    "files",
    "added",
    "index",
    "told",
    "going",
    "use",
    "command",
    "git",
    "status",
    "see",
    "calling",
    "anyone",
    "dot",
    "txt",
    "written",
    "calling",
    "untracked",
    "file",
    "untracked",
    "files",
    "added",
    "index",
    "yet",
    "newly",
    "created",
    "added",
    "explicitly",
    "index",
    "want",
    "commit",
    "changes",
    "eddie",
    "one",
    "dot",
    "txt",
    "add",
    "index",
    "use",
    "command",
    "git",
    "add",
    "name",
    "file",
    "d1",
    "dot",
    "txt",
    "added",
    "let",
    "us",
    "check",
    "status",
    "choose",
    "get",
    "status",
    "see",
    "changes",
    "ready",
    "committed",
    "eddie",
    "wonder",
    "txt",
    "index",
    "commit",
    "changes",
    "local",
    "repository",
    "order",
    "commit",
    "command",
    "using",
    "git",
    "commit",
    "em",
    "whenever",
    "committing",
    "always",
    "give",
    "commit",
    "message",
    "everyone",
    "see",
    "made",
    "comments",
    "exactly",
    "commit",
    "message",
    "purpose",
    "see",
    "exactly",
    "changed",
    "even",
    "dry",
    "version",
    "control",
    "system",
    "also",
    "going",
    "configured",
    "get",
    "always",
    "going",
    "show",
    "user",
    "committed",
    "change",
    "talking",
    "writing",
    "commit",
    "message",
    "going",
    "write",
    "something",
    "like",
    "adding",
    "first",
    "commit",
    "press",
    "enter",
    "see",
    "one",
    "file",
    "change",
    "something",
    "inserted",
    "changes",
    "finally",
    "committed",
    "local",
    "repository",
    "want",
    "see",
    "actually",
    "get",
    "stores",
    "commit",
    "actually",
    "show",
    "show",
    "commit",
    "multiple",
    "files",
    "together",
    "let",
    "go",
    "back",
    "local",
    "rebel",
    "folder",
    "create",
    "files",
    "text",
    "files",
    "going",
    "name",
    "create",
    "another",
    "one",
    "name",
    "three",
    "let",
    "write",
    "something",
    "say",
    "second",
    "file",
    "sorry",
    "let",
    "go",
    "back",
    "get",
    "bash",
    "terminal",
    "let",
    "us",
    "see",
    "get",
    "status",
    "see",
    "showing",
    "three",
    "index",
    "remember",
    "anyone",
    "already",
    "index",
    "actually",
    "let",
    "go",
    "back",
    "make",
    "modifications",
    "eddie",
    "one",
    "well",
    "going",
    "ride",
    "modified",
    "one",
    "let",
    "see",
    "get",
    "status",
    "see",
    "showing",
    "anyone",
    "modified",
    "untracked",
    "files",
    "edit",
    "three",
    "added",
    "index",
    "yet",
    "sebastian",
    "jamie",
    "asking",
    "like",
    "doll",
    "multiple",
    "files",
    "together",
    "going",
    "add",
    "files",
    "going",
    "use",
    "get",
    "capital",
    "press",
    "enter",
    "see",
    "get",
    "status",
    "see",
    "files",
    "added",
    "index",
    "ones",
    "similarly",
    "commit",
    "well",
    "added",
    "files",
    "index",
    "also",
    "commit",
    "let",
    "show",
    "write",
    "git",
    "commit",
    "small",
    "want",
    "commit",
    "use",
    "small",
    "case",
    "git",
    "commit",
    "whereas",
    "case",
    "get",
    "add",
    "want",
    "add",
    "files",
    "use",
    "capital",
    "remember",
    "difference",
    "add",
    "message",
    "hiding",
    "see",
    "three",
    "files",
    "changed",
    "let",
    "show",
    "actually",
    "gets",
    "stores",
    "comets",
    "perform",
    "operation",
    "called",
    "git",
    "log",
    "see",
    "40",
    "digit",
    "hexadecimal",
    "code",
    "taking",
    "talking",
    "hash",
    "see",
    "date",
    "got",
    "commit",
    "message",
    "provided",
    "wrote",
    "adding",
    "three",
    "files",
    "together",
    "shows",
    "shows",
    "date",
    "exact",
    "time",
    "author",
    "already",
    "configured",
    "name",
    "see",
    "come",
    "actually",
    "version",
    "control",
    "system",
    "like",
    "get",
    "actually",
    "stores",
    "commit",
    "let",
    "us",
    "go",
    "back",
    "see",
    "next",
    "operation",
    "parallel",
    "development",
    "development",
    "first",
    "operation",
    "branching",
    "talking",
    "branching",
    "lot",
    "let",
    "tell",
    "exactly",
    "branching",
    "exactly",
    "branching",
    "well",
    "think",
    "branches",
    "like",
    "pointer",
    "become",
    "let",
    "say",
    "made",
    "changes",
    "main",
    "branch",
    "remember",
    "main",
    "branch",
    "told",
    "called",
    "master",
    "branch",
    "master",
    "branch",
    "contain",
    "code",
    "let",
    "say",
    "working",
    "master",
    "branch",
    "made",
    "change",
    "decided",
    "add",
    "new",
    "feature",
    "want",
    "work",
    "new",
    "feature",
    "individually",
    "want",
    "interfere",
    "master",
    "branch",
    "want",
    "separate",
    "actually",
    "create",
    "branch",
    "commit",
    "let",
    "show",
    "actually",
    "create",
    "branches",
    "alice",
    "tell",
    "two",
    "kinds",
    "branches",
    "local",
    "branches",
    "remote",
    "tracking",
    "branches",
    "remote",
    "branches",
    "branches",
    "going",
    "connect",
    "branches",
    "local",
    "repository",
    "central",
    "repository",
    "local",
    "branches",
    "something",
    "create",
    "workspace",
    "going",
    "work",
    "files",
    "local",
    "repository",
    "show",
    "create",
    "branches",
    "everything",
    "clear",
    "let",
    "us",
    "go",
    "back",
    "git",
    "bash",
    "clear",
    "screen",
    "right",
    "master",
    "branch",
    "indicates",
    "brands",
    "onto",
    "right",
    "master",
    "branch",
    "right",
    "going",
    "create",
    "different",
    "branch",
    "type",
    "command",
    "git",
    "branch",
    "write",
    "branch",
    "name",
    "let",
    "us",
    "call",
    "first",
    "branch",
    "enter",
    "created",
    "branch",
    "first",
    "branch",
    "contain",
    "files",
    "master",
    "originated",
    "master",
    "branch",
    "shows",
    "still",
    "master",
    "branch",
    "want",
    "switch",
    "new",
    "branch",
    "created",
    "use",
    "command",
    "git",
    "checkout",
    "called",
    "checking",
    "going",
    "move",
    "one",
    "branch",
    "another",
    "called",
    "checking",
    "get",
    "going",
    "use",
    "git",
    "checkout",
    "name",
    "branch",
    "switch",
    "first",
    "brush",
    "see",
    "first",
    "branch",
    "start",
    "work",
    "first",
    "branch",
    "let",
    "us",
    "create",
    "files",
    "first",
    "branch",
    "let",
    "go",
    "back",
    "actually",
    "show",
    "workspace",
    "first",
    "branch",
    "right",
    "create",
    "another",
    "text",
    "document",
    "going",
    "name",
    "edu",
    "write",
    "something",
    "first",
    "garage",
    "save",
    "go",
    "back",
    "made",
    "changes",
    "let",
    "us",
    "commit",
    "changes",
    "let",
    "use",
    "git",
    "add",
    "remember",
    "perform",
    "git",
    "commit",
    "guess",
    "one",
    "pile",
    "changed",
    "remember",
    "made",
    "edu",
    "change",
    "first",
    "branch",
    "master",
    "branch",
    "first",
    "branch",
    "lists",
    "files",
    "first",
    "branch",
    "see",
    "got",
    "eddie",
    "one",
    "283",
    "readme",
    "master",
    "branch",
    "originated",
    "master",
    "branch",
    "apart",
    "new",
    "file",
    "called",
    "edu",
    "dot",
    "txt",
    "move",
    "back",
    "master",
    "branch",
    "let",
    "say",
    "going",
    "back",
    "master",
    "garage",
    "see",
    "five",
    "master",
    "branch",
    "find",
    "edu",
    "made",
    "changes",
    "first",
    "branch",
    "done",
    "created",
    "branches",
    "also",
    "understood",
    "purpose",
    "creating",
    "branches",
    "moving",
    "next",
    "topic",
    "next",
    "thing",
    "see",
    "merging",
    "creating",
    "branches",
    "developing",
    "new",
    "feature",
    "want",
    "add",
    "new",
    "feature",
    "operation",
    "called",
    "emerging",
    "emerging",
    "means",
    "combining",
    "work",
    "different",
    "branches",
    "together",
    "important",
    "branched",
    "master",
    "branch",
    "always",
    "combine",
    "back",
    "end",
    "done",
    "working",
    "branch",
    "always",
    "remember",
    "merge",
    "back",
    "created",
    "branches",
    "let",
    "us",
    "see",
    "made",
    "changes",
    "branch",
    "like",
    "added",
    "edu",
    "want",
    "combine",
    "back",
    "master",
    "branch",
    "like",
    "told",
    "master",
    "branch",
    "always",
    "contain",
    "production",
    "quality",
    "code",
    "let",
    "us",
    "know",
    "actually",
    "merge",
    "start",
    "merging",
    "files",
    "already",
    "created",
    "branches",
    "time",
    "merge",
    "back",
    "terminal",
    "need",
    "merge",
    "changes",
    "remember",
    "got",
    "different",
    "file",
    "first",
    "branch",
    "ending",
    "master",
    "branch",
    "yet",
    "want",
    "merge",
    "branch",
    "master",
    "branch",
    "use",
    "command",
    "called",
    "git",
    "merge",
    "name",
    "branch",
    "important",
    "thing",
    "remember",
    "merging",
    "want",
    "merge",
    "work",
    "first",
    "branch",
    "master",
    "want",
    "master",
    "destination",
    "whenever",
    "merging",
    "remember",
    "always",
    "checked",
    "destination",
    "branch",
    "already",
    "checked",
    "master",
    "branch",
    "change",
    "back",
    "use",
    "command",
    "git",
    "merge",
    "name",
    "branch",
    "word",
    "want",
    "merge",
    "provide",
    "name",
    "branch",
    "whose",
    "work",
    "want",
    "merged",
    "current",
    "branch",
    "checked",
    "got",
    "one",
    "branch",
    "called",
    "first",
    "branch",
    "see",
    "one",
    "file",
    "chain",
    "something",
    "added",
    "master",
    "bounce",
    "right",
    "let",
    "us",
    "list",
    "files",
    "master",
    "branch",
    "see",
    "edu",
    "dot",
    "txt",
    "merged",
    "merging",
    "remember",
    "first",
    "branch",
    "still",
    "separate",
    "want",
    "go",
    "back",
    "first",
    "branch",
    "modify",
    "changes",
    "first",
    "branch",
    "keep",
    "actually",
    "affect",
    "master",
    "branch",
    "merge",
    "let",
    "show",
    "example",
    "go",
    "back",
    "first",
    "branch",
    "let",
    "us",
    "make",
    "changes",
    "add",
    "ride",
    "modified",
    "first",
    "branch",
    "go",
    "back",
    "commit",
    "changes",
    "use",
    "git",
    "remember",
    "git",
    "commit",
    "also",
    "performed",
    "another",
    "purpose",
    "actually",
    "commit",
    "uncommitted",
    "file",
    "files",
    "index",
    "modified",
    "also",
    "job",
    "adding",
    "index",
    "modifying",
    "committing",
    "wo",
    "work",
    "never",
    "added",
    "file",
    "index",
    "eddie",
    "already",
    "index",
    "modifying",
    "explicitly",
    "added",
    "index",
    "using",
    "git",
    "commit",
    "explicitly",
    "add",
    "index",
    "bit",
    "already",
    "track",
    "file",
    "commit",
    "changes",
    "also",
    "local",
    "repository",
    "see",
    "use",
    "command",
    "git",
    "add",
    "git",
    "commit",
    "already",
    "attract",
    "file",
    "one",
    "file",
    "changed",
    "cat",
    "see",
    "different",
    "shows",
    "modification",
    "done",
    "modified",
    "first",
    "branch",
    "let",
    "go",
    "back",
    "master",
    "branch",
    "remember",
    "emerged",
    "yet",
    "master",
    "branch",
    "also",
    "contains",
    "copy",
    "edu",
    "let",
    "see",
    "copy",
    "actually",
    "contains",
    "see",
    "see",
    "modification",
    "affected",
    "master",
    "branch",
    "done",
    "modification",
    "first",
    "branch",
    "copy",
    "master",
    "branch",
    "modified",
    "copy",
    "emerged",
    "yet",
    "important",
    "remember",
    "actually",
    "want",
    "changes",
    "made",
    "first",
    "branch",
    "things",
    "developed",
    "anu",
    "branch",
    "created",
    "make",
    "sure",
    "merge",
    "forget",
    "merge",
    "else",
    "show",
    "kind",
    "modifications",
    "hope",
    "understood",
    "emerging",
    "important",
    "actually",
    "merge",
    "different",
    "branches",
    "together",
    "move",
    "next",
    "topic",
    "rebasing",
    "say",
    "rebasing",
    "rebasing",
    "also",
    "another",
    "kind",
    "merging",
    "first",
    "thing",
    "need",
    "understand",
    "vbase",
    "actually",
    "solves",
    "problem",
    "git",
    "merge",
    "commands",
    "designed",
    "integrate",
    "changes",
    "one",
    "branch",
    "another",
    "task",
    "different",
    "way",
    "rebasing",
    "means",
    "see",
    "workflow",
    "diagram",
    "got",
    "master",
    "branch",
    "got",
    "new",
    "branch",
    "rebasing",
    "see",
    "workflow",
    "diagram",
    "god",
    "new",
    "branch",
    "master",
    "branch",
    "rebasing",
    "instead",
    "creating",
    "comet",
    "two",
    "parent",
    "commits",
    "rebasing",
    "actually",
    "places",
    "entire",
    "commit",
    "history",
    "branch",
    "onto",
    "tip",
    "master",
    "would",
    "ask",
    "like",
    "use",
    "well",
    "major",
    "benefit",
    "using",
    "basis",
    "get",
    "much",
    "cleaner",
    "project",
    "history",
    "hope",
    "understood",
    "concept",
    "rebase",
    "let",
    "show",
    "actually",
    "rebasing",
    "okay",
    "going",
    "going",
    "work",
    "branch",
    "base",
    "branch",
    "muster",
    "go",
    "back",
    "branch",
    "skip",
    "check",
    "first",
    "branch",
    "going",
    "create",
    "files",
    "five",
    "let",
    "say",
    "six",
    "going",
    "write",
    "random",
    "stuff",
    "say",
    "saying",
    "welcome",
    "ed",
    "eureka",
    "one",
    "right",
    "thing",
    "sarah",
    "come",
    "two",
    "created",
    "going",
    "back",
    "get",
    "bash",
    "going",
    "add",
    "new",
    "files",
    "need",
    "add",
    "get",
    "commit",
    "untracked",
    "files",
    "files",
    "created",
    "right",
    "using",
    "going",
    "commit",
    "committed",
    "see",
    "files",
    "see",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "read",
    "go",
    "back",
    "master",
    "list",
    "files",
    "master",
    "four",
    "five",
    "six",
    "still",
    "first",
    "brush",
    "emerged",
    "yet",
    "going",
    "use",
    "git",
    "merge",
    "right",
    "going",
    "use",
    "rebase",
    "time",
    "instead",
    "using",
    "git",
    "merge",
    "see",
    "actually",
    "thing",
    "use",
    "command",
    "let",
    "us",
    "go",
    "back",
    "first",
    "branch",
    "okay",
    "typing",
    "error",
    "irst",
    "br",
    "mch",
    "okay",
    "switch",
    "first",
    "branch",
    "going",
    "use",
    "command",
    "git",
    "rebase",
    "master",
    "showing",
    "current",
    "branch",
    "first",
    "branch",
    "date",
    "whatever",
    "master",
    "branch",
    "already",
    "first",
    "branch",
    "new",
    "files",
    "added",
    "thing",
    "want",
    "reverse",
    "way",
    "show",
    "happen",
    "let",
    "go",
    "check",
    "let",
    "rebasing",
    "kit",
    "rebase",
    "first",
    "branch",
    "happened",
    "work",
    "first",
    "branch",
    "attached",
    "master",
    "branch",
    "done",
    "linearly",
    "new",
    "set",
    "comments",
    "see",
    "files",
    "master",
    "branch",
    "find",
    "got",
    "new",
    "five",
    "ed",
    "u6",
    "well",
    "first",
    "branch",
    "basically",
    "rebasing",
    "merged",
    "work",
    "first",
    "branch",
    "master",
    "thing",
    "happened",
    "happened",
    "linear",
    "way",
    "commits",
    "first",
    "branch",
    "actually",
    "got",
    "rid",
    "dashed",
    "head",
    "master",
    "nonlinear",
    "development",
    "told",
    "branching",
    "merging",
    "rebasing",
    "made",
    "changes",
    "pull",
    "changes",
    "committed",
    "changes",
    "remember",
    "shown",
    "push",
    "changes",
    "since",
    "done",
    "working",
    "local",
    "repository",
    "made",
    "final",
    "changes",
    "want",
    "contribute",
    "central",
    "repository",
    "tree",
    "going",
    "use",
    "git",
    "push",
    "going",
    "show",
    "get",
    "bush",
    "right",
    "go",
    "ahead",
    "explain",
    "get",
    "bush",
    "know",
    "actually",
    "setting",
    "repository",
    "remember",
    "github",
    "repository",
    "public",
    "repository",
    "means",
    "giving",
    "read",
    "access",
    "everyone",
    "else",
    "github",
    "community",
    "everyone",
    "else",
    "clone",
    "download",
    "repository",
    "files",
    "pushing",
    "changes",
    "repository",
    "know",
    "need",
    "certain",
    "access",
    "rights",
    "central",
    "repository",
    "storing",
    "actual",
    "code",
    "want",
    "people",
    "interfere",
    "pushing",
    "wrong",
    "codes",
    "something",
    "going",
    "connect",
    "mice",
    "repository",
    "via",
    "ssh",
    "order",
    "push",
    "changes",
    "central",
    "repository",
    "beginning",
    "trying",
    "make",
    "connection",
    "sss",
    "rows",
    "facing",
    "certain",
    "kind",
    "problems",
    "let",
    "go",
    "back",
    "repository",
    "show",
    "click",
    "button",
    "see",
    "http",
    "url",
    "order",
    "use",
    "order",
    "connect",
    "repository",
    "want",
    "use",
    "ssh",
    "ssh",
    "connection",
    "url",
    "order",
    "connect",
    "ssh",
    "need",
    "generate",
    "public",
    "ssh",
    "key",
    "add",
    "key",
    "simply",
    "github",
    "account",
    "start",
    "pushing",
    "changes",
    "first",
    "generate",
    "ssh",
    "public",
    "key",
    "use",
    "command",
    "ssh",
    "heejun",
    "file",
    "already",
    "ssh",
    "key",
    "want",
    "override",
    "yes",
    "ssh",
    "key",
    "generated",
    "saved",
    "want",
    "see",
    "use",
    "cat",
    "copy",
    "public",
    "ssh",
    "key",
    "want",
    "add",
    "ssh",
    "key",
    "go",
    "back",
    "github",
    "account",
    "go",
    "back",
    "settings",
    "go",
    "click",
    "option",
    "ssh",
    "gpg",
    "keys",
    "already",
    "two",
    "ssh",
    "keys",
    "added",
    "want",
    "add",
    "new",
    "one",
    "going",
    "click",
    "button",
    "new",
    "ssh",
    "key",
    "make",
    "sure",
    "provide",
    "name",
    "going",
    "keep",
    "order",
    "named",
    "ones",
    "sssh",
    "sss",
    "say",
    "going",
    "say",
    "sh3",
    "paste",
    "search",
    "key",
    "copy",
    "key",
    "paste",
    "click",
    "button",
    "add",
    "ssh",
    "key",
    "okay",
    "well",
    "first",
    "thing",
    "need",
    "clear",
    "screen",
    "need",
    "need",
    "use",
    "command",
    "search",
    "ssi",
    "url",
    "use",
    "get",
    "rate",
    "enter",
    "ssh",
    "authentication",
    "successfully",
    "done",
    "go",
    "back",
    "github",
    "account",
    "refresh",
    "see",
    "key",
    "green",
    "means",
    "properly",
    "authenticated",
    "ready",
    "push",
    "changes",
    "central",
    "repository",
    "start",
    "let",
    "tell",
    "one",
    "thing",
    "developing",
    "something",
    "local",
    "repository",
    "done",
    "particular",
    "branch",
    "repository",
    "let",
    "say",
    "want",
    "push",
    "changes",
    "master",
    "branch",
    "central",
    "report",
    "github",
    "repository",
    "let",
    "say",
    "whatever",
    "work",
    "done",
    "stay",
    "separate",
    "branch",
    "github",
    "repository",
    "interfere",
    "master",
    "branch",
    "everyone",
    "identify",
    "actually",
    "branch",
    "created",
    "branch",
    "contains",
    "work",
    "let",
    "go",
    "github",
    "repository",
    "show",
    "something",
    "let",
    "go",
    "repositories",
    "repository",
    "created",
    "today",
    "go",
    "repository",
    "see",
    "got",
    "one",
    "branch",
    "master",
    "branch",
    "want",
    "create",
    "branches",
    "create",
    "would",
    "advise",
    "create",
    "branches",
    "command",
    "line",
    "get",
    "bash",
    "central",
    "repository",
    "well",
    "let",
    "us",
    "go",
    "back",
    "branch",
    "want",
    "want",
    "work",
    "first",
    "branch",
    "local",
    "repository",
    "make",
    "new",
    "branch",
    "central",
    "repository",
    "branch",
    "central",
    "repository",
    "contain",
    "files",
    "first",
    "branch",
    "local",
    "repository",
    "perform",
    "get",
    "push",
    "name",
    "remote",
    "origin",
    "first",
    "branch",
    "see",
    "pushed",
    "changes",
    "let",
    "us",
    "verify",
    "let",
    "us",
    "go",
    "back",
    "repository",
    "let",
    "refresh",
    "master",
    "branch",
    "see",
    "created",
    "another",
    "branch",
    "called",
    "first",
    "branch",
    "pushed",
    "files",
    "first",
    "branch",
    "created",
    "new",
    "branch",
    "first",
    "branch",
    "similar",
    "first",
    "branch",
    "local",
    "repository",
    "github",
    "go",
    "branch",
    "see",
    "single",
    "master",
    "also",
    "got",
    "another",
    "branch",
    "called",
    "first",
    "branch",
    "want",
    "check",
    "brand",
    "click",
    "see",
    "files",
    "combat",
    "logs",
    "branch",
    "push",
    "changes",
    "want",
    "push",
    "change",
    "master",
    "thing",
    "let",
    "us",
    "go",
    "back",
    "branch",
    "master",
    "going",
    "perform",
    "git",
    "push",
    "going",
    "time",
    "going",
    "push",
    "files",
    "master",
    "branch",
    "central",
    "repository",
    "use",
    "get",
    "bush",
    "okay",
    "push",
    "operation",
    "done",
    "go",
    "back",
    "go",
    "back",
    "master",
    "see",
    "files",
    "master",
    "branch",
    "local",
    "repo",
    "added",
    "master",
    "branch",
    "central",
    "ripple",
    "also",
    "make",
    "changes",
    "central",
    "repository",
    "look",
    "repository",
    "exactly",
    "get",
    "summarize",
    "showed",
    "entirely",
    "telling",
    "get",
    "ad",
    "committing",
    "pushing",
    "pulling",
    "exactly",
    "happening",
    "local",
    "repository",
    "working",
    "directory",
    "staging",
    "area",
    "index",
    "intermediate",
    "layer",
    "workspace",
    "local",
    "repository",
    "add",
    "files",
    "staging",
    "area",
    "index",
    "git",
    "add",
    "commit",
    "changes",
    "git",
    "commit",
    "local",
    "repository",
    "want",
    "push",
    "listen",
    "remote",
    "repository",
    "central",
    "repository",
    "everyone",
    "see",
    "use",
    "get",
    "bush",
    "similarly",
    "want",
    "pull",
    "files",
    "fetch",
    "files",
    "github",
    "repository",
    "use",
    "git",
    "pull",
    "want",
    "use",
    "branches",
    "want",
    "move",
    "one",
    "branch",
    "another",
    "use",
    "git",
    "checkout",
    "want",
    "combine",
    "work",
    "different",
    "branches",
    "together",
    "use",
    "git",
    "merge",
    "entirely",
    "performing",
    "kind",
    "operations",
    "hope",
    "clear",
    "everyone",
    "show",
    "check",
    "changed",
    "modifications",
    "clear",
    "screen",
    "okay",
    "let",
    "us",
    "go",
    "back",
    "terminal",
    "experimentation",
    "proper",
    "show",
    "actually",
    "get",
    "revert",
    "back",
    "previous",
    "changes",
    "might",
    "want",
    "change",
    "everything",
    "made",
    "eddie",
    "wanted",
    "duet",
    "files",
    "created",
    "let",
    "go",
    "create",
    "new",
    "file",
    "modify",
    "two",
    "times",
    "revert",
    "back",
    "previous",
    "version",
    "demonstration",
    "purpose",
    "going",
    "create",
    "new",
    "text",
    "file",
    "let",
    "call",
    "revert",
    "let",
    "us",
    "type",
    "something",
    "hello",
    "let",
    "keep",
    "simple",
    "save",
    "go",
    "back",
    "add",
    "file",
    "commit",
    "let",
    "say",
    "call",
    "revert",
    "remember",
    "first",
    "comment",
    "made",
    "revert",
    "one",
    "enter",
    "changed",
    "let",
    "go",
    "back",
    "modify",
    "committed",
    "file",
    "means",
    "stored",
    "version",
    "text",
    "hello",
    "exclamation",
    "revert",
    "text",
    "file",
    "going",
    "go",
    "back",
    "change",
    "something",
    "let",
    "us",
    "add",
    "hello",
    "save",
    "let",
    "go",
    "back",
    "bash",
    "let",
    "us",
    "commit",
    "file",
    "made",
    "changes",
    "want",
    "different",
    "version",
    "revert",
    "file",
    "go",
    "ahead",
    "commit",
    "use",
    "git",
    "commit",
    "saints",
    "river",
    "enter",
    "done",
    "want",
    "revert",
    "back",
    "okay",
    "see",
    "file",
    "see",
    "modified",
    "got",
    "hello",
    "let",
    "say",
    "want",
    "go",
    "back",
    "previous",
    "version",
    "would",
    "want",
    "go",
    "back",
    "hello",
    "check",
    "git",
    "log",
    "check",
    "hair",
    "commit",
    "log",
    "commit",
    "hash",
    "first",
    "committed",
    "revert",
    "means",
    "version",
    "one",
    "revert",
    "need",
    "need",
    "copy",
    "commit",
    "hash",
    "copy",
    "first",
    "eight",
    "hexadecimal",
    "digits",
    "copy",
    "whole",
    "clear",
    "screen",
    "first",
    "need",
    "go",
    "use",
    "command",
    "get",
    "check",
    "hexadecimal",
    "code",
    "hexadecimal",
    "digits",
    "copied",
    "name",
    "file",
    "revert",
    "dot",
    "txt",
    "use",
    "command",
    "kit",
    "check",
    "commit",
    "hash",
    "copied",
    "first",
    "8",
    "digits",
    "name",
    "file",
    "revert",
    "dot",
    "txt",
    "see",
    "file",
    "gone",
    "back",
    "previous",
    "commit",
    "display",
    "file",
    "see",
    "got",
    "hello",
    "means",
    "rolled",
    "back",
    "previous",
    "version",
    "used",
    "commit",
    "hash",
    "initially",
    "committed",
    "first",
    "change",
    "revert",
    "back",
    "previous",
    "version",
    "learned",
    "today",
    "today",
    "tutorial",
    "understood",
    "version",
    "control",
    "need",
    "version",
    "controls",
    "also",
    "learned",
    "different",
    "version",
    "control",
    "tools",
    "primarily",
    "focused",
    "get",
    "learned",
    "git",
    "github",
    "create",
    "repositories",
    "perform",
    "kind",
    "operations",
    "commands",
    "order",
    "push",
    "pull",
    "move",
    "files",
    "one",
    "repository",
    "another",
    "also",
    "studied",
    "features",
    "git",
    "also",
    "seen",
    "case",
    "study",
    "dominion",
    "enterprises",
    "one",
    "biggest",
    "public",
    "company",
    "makes",
    "popular",
    "websites",
    "got",
    "right",
    "seen",
    "used",
    "github",
    "well",
    "hello",
    "everyone",
    "order",
    "80",
    "rekha",
    "today",
    "session",
    "focus",
    "jenkins",
    "without",
    "ado",
    "let",
    "us",
    "move",
    "forward",
    "look",
    "agenda",
    "today",
    "first",
    "see",
    "need",
    "continuous",
    "integration",
    "problems",
    "industries",
    "facing",
    "continuous",
    "integration",
    "introduced",
    "understand",
    "exactly",
    "continuous",
    "integration",
    "see",
    "various",
    "types",
    "continuous",
    "integration",
    "tools",
    "among",
    "countries",
    "integration",
    "tools",
    "focus",
    "jenkins",
    "also",
    "look",
    "jenkins",
    "distributed",
    "architecture",
    "finally",
    "hands",
    "part",
    "prepare",
    "build",
    "pipeline",
    "using",
    "jenkins",
    "also",
    "tell",
    "add",
    "jenkins",
    "slaves",
    "move",
    "forward",
    "see",
    "need",
    "continuous",
    "integration",
    "process",
    "continuous",
    "integration",
    "see",
    "group",
    "developers",
    "making",
    "changes",
    "source",
    "code",
    "present",
    "source",
    "code",
    "repository",
    "repository",
    "git",
    "repository",
    "subversion",
    "repository",
    "etc",
    "entire",
    "source",
    "code",
    "application",
    "written",
    "built",
    "tools",
    "like",
    "maven",
    "etc",
    "built",
    "application",
    "deployed",
    "onto",
    "test",
    "server",
    "testing",
    "bug",
    "code",
    "developers",
    "notified",
    "help",
    "feedback",
    "loop",
    "see",
    "screen",
    "bugs",
    "application",
    "deployed",
    "onto",
    "production",
    "server",
    "release",
    "know",
    "must",
    "thinking",
    "problem",
    "process",
    "process",
    "looks",
    "fine",
    "first",
    "write",
    "code",
    "build",
    "test",
    "finally",
    "deploy",
    "let",
    "us",
    "look",
    "flaws",
    "process",
    "one",
    "one",
    "first",
    "problem",
    "guys",
    "see",
    "developer",
    "waiting",
    "long",
    "time",
    "order",
    "get",
    "test",
    "results",
    "first",
    "entire",
    "source",
    "code",
    "application",
    "built",
    "deployed",
    "onto",
    "test",
    "server",
    "testing",
    "takes",
    "lot",
    "time",
    "developers",
    "long",
    "time",
    "order",
    "get",
    "test",
    "results",
    "second",
    "problem",
    "since",
    "entire",
    "source",
    "code",
    "application",
    "first",
    "build",
    "tested",
    "bug",
    "code",
    "developers",
    "go",
    "entire",
    "source",
    "code",
    "application",
    "see",
    "frustrated",
    "developer",
    "written",
    "code",
    "application",
    "built",
    "successfully",
    "testing",
    "certain",
    "bugs",
    "check",
    "entire",
    "source",
    "code",
    "application",
    "order",
    "remove",
    "bug",
    "takes",
    "lot",
    "time",
    "basically",
    "locating",
    "fixing",
    "bugs",
    "hope",
    "clear",
    "two",
    "problems",
    "discussed",
    "move",
    "forward",
    "see",
    "two",
    "problems",
    "continuous",
    "integration",
    "third",
    "problem",
    "software",
    "delivery",
    "process",
    "slow",
    "developers",
    "actually",
    "wasting",
    "lot",
    "time",
    "locating",
    "fixing",
    "birds",
    "instead",
    "building",
    "new",
    "applications",
    "saw",
    "locating",
    "fixing",
    "bugs",
    "task",
    "due",
    "developers",
    "able",
    "focus",
    "building",
    "new",
    "applications",
    "relate",
    "diagram",
    "present",
    "front",
    "screen",
    "always",
    "lot",
    "time",
    "watching",
    "tv",
    "social",
    "media",
    "similarly",
    "developers",
    "also",
    "basic",
    "lot",
    "time",
    "fixing",
    "bugs",
    "right",
    "let",
    "us",
    "look",
    "fourth",
    "problem",
    "continuous",
    "feedback",
    "continues",
    "feedback",
    "related",
    "things",
    "like",
    "build",
    "failures",
    "test",
    "status",
    "etc",
    "present",
    "due",
    "developers",
    "unaware",
    "application",
    "process",
    "showed",
    "continuous",
    "integration",
    "feedback",
    "loop",
    "present",
    "go",
    "back",
    "particular",
    "diagram",
    "try",
    "explain",
    "feedback",
    "loop",
    "entire",
    "source",
    "code",
    "application",
    "built",
    "tested",
    "developers",
    "notified",
    "bugs",
    "code",
    "right",
    "talk",
    "cantonese",
    "feedback",
    "suppose",
    "developer",
    "highlighting",
    "makes",
    "commit",
    "source",
    "code",
    "present",
    "source",
    "code",
    "repository",
    "time",
    "code",
    "pulled",
    "built",
    "moment",
    "built",
    "developer",
    "notified",
    "build",
    "status",
    "built",
    "successfully",
    "deployed",
    "onto",
    "test",
    "server",
    "testing",
    "time",
    "whatever",
    "test",
    "data",
    "says",
    "developer",
    "notified",
    "similarly",
    "developer",
    "makes",
    "commit",
    "source",
    "code",
    "time",
    "coach",
    "pulled",
    "built",
    "build",
    "status",
    "notified",
    "developers",
    "deployed",
    "onto",
    "test",
    "server",
    "testing",
    "test",
    "results",
    "also",
    "given",
    "developers",
    "hope",
    "clear",
    "difference",
    "continents",
    "feedback",
    "feedback",
    "incontinence",
    "feedback",
    "getting",
    "feedback",
    "run",
    "move",
    "forward",
    "see",
    "exactly",
    "continuous",
    "integration",
    "addresses",
    "problems",
    "let",
    "us",
    "see",
    "exactly",
    "continuous",
    "integration",
    "resolving",
    "issues",
    "discussed",
    "happens",
    "multiple",
    "developers",
    "one",
    "makes",
    "commit",
    "source",
    "code",
    "present",
    "source",
    "code",
    "repository",
    "code",
    "pulled",
    "built",
    "tested",
    "deployed",
    "advantage",
    "get",
    "first",
    "comment",
    "made",
    "source",
    "code",
    "built",
    "tested",
    "due",
    "bug",
    "code",
    "developers",
    "actually",
    "know",
    "bug",
    "present",
    "bitch",
    "come",
    "caused",
    "error",
    "need",
    "go",
    "entire",
    "source",
    "code",
    "application",
    "need",
    "check",
    "particular",
    "introduce",
    "button",
    "right",
    "way",
    "locating",
    "fixing",
    "bugs",
    "becomes",
    "easy",
    "apart",
    "first",
    "problem",
    "saw",
    "developers",
    "wait",
    "long",
    "time",
    "order",
    "get",
    "test",
    "result",
    "every",
    "commit",
    "made",
    "source",
    "code",
    "tested",
    "need",
    "wait",
    "long",
    "time",
    "order",
    "get",
    "test",
    "results",
    "talk",
    "third",
    "problem",
    "software",
    "delivery",
    "process",
    "slow",
    "completely",
    "removed",
    "process",
    "developers",
    "actually",
    "focusing",
    "locating",
    "fixing",
    "bugs",
    "wo",
    "take",
    "lot",
    "time",
    "discussed",
    "instead",
    "focusing",
    "building",
    "new",
    "applications",
    "fourth",
    "problem",
    "feedback",
    "present",
    "see",
    "run",
    "developers",
    "getting",
    "feedback",
    "build",
    "status",
    "test",
    "results",
    "etc",
    "developers",
    "continuously",
    "notified",
    "application",
    "move",
    "forward",
    "compare",
    "two",
    "scenarios",
    "continuous",
    "integration",
    "continuous",
    "integration",
    "see",
    "continuous",
    "integration",
    "saw",
    "first",
    "source",
    "code",
    "application",
    "built",
    "entire",
    "source",
    "code",
    "tested",
    "talk",
    "continuous",
    "integration",
    "every",
    "commit",
    "whatever",
    "change",
    "made",
    "source",
    "code",
    "whatever",
    "change",
    "new",
    "changes",
    "well",
    "committed",
    "source",
    "code",
    "time",
    "code",
    "pulled",
    "built",
    "lll",
    "tested",
    "developers",
    "wait",
    "long",
    "time",
    "order",
    "get",
    "test",
    "results",
    "saw",
    "source",
    "code",
    "first",
    "build",
    "deployed",
    "onto",
    "test",
    "server",
    "talk",
    "continuous",
    "integration",
    "test",
    "result",
    "every",
    "come",
    "given",
    "developers",
    "talk",
    "feedback",
    "feedback",
    "present",
    "earlier",
    "continuous",
    "integration",
    "feedback",
    "present",
    "every",
    "committee",
    "met",
    "source",
    "code",
    "provided",
    "relevant",
    "result",
    "right",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "exactly",
    "continuous",
    "integration",
    "continuous",
    "integration",
    "process",
    "developers",
    "required",
    "make",
    "frequent",
    "commits",
    "source",
    "code",
    "frequently",
    "make",
    "changes",
    "source",
    "code",
    "change",
    "made",
    "source",
    "code",
    "report",
    "continuous",
    "integration",
    "server",
    "code",
    "built",
    "say",
    "compiled",
    "right",
    "pentagon",
    "continuous",
    "integration",
    "tool",
    "using",
    "depending",
    "needs",
    "organization",
    "also",
    "deployed",
    "onto",
    "test",
    "server",
    "testing",
    "testing",
    "done",
    "also",
    "deployed",
    "onto",
    "production",
    "server",
    "release",
    "developers",
    "continuously",
    "getting",
    "feedback",
    "application",
    "run",
    "hope",
    "clear",
    "particular",
    "process",
    "see",
    "importance",
    "continuous",
    "integration",
    "help",
    "case",
    "study",
    "nokia",
    "nokia",
    "adopted",
    "process",
    "called",
    "nightly",
    "build",
    "nightly",
    "build",
    "considered",
    "predecessor",
    "continuous",
    "integration",
    "let",
    "tell",
    "right",
    "see",
    "developers",
    "committing",
    "changes",
    "source",
    "code",
    "present",
    "shared",
    "repository",
    "right",
    "happens",
    "night",
    "build",
    "server",
    "build",
    "server",
    "pull",
    "shared",
    "repository",
    "changes",
    "pull",
    "code",
    "prepare",
    "bill",
    "right",
    "way",
    "whatever",
    "commits",
    "made",
    "throughout",
    "day",
    "compiled",
    "night",
    "obviously",
    "process",
    "better",
    "writing",
    "entire",
    "source",
    "code",
    "application",
    "bai",
    "ling",
    "since",
    "bug",
    "code",
    "developers",
    "check",
    "comments",
    "made",
    "throughout",
    "day",
    "ideal",
    "way",
    "things",
    "wasting",
    "lot",
    "time",
    "locating",
    "fixing",
    "bucks",
    "right",
    "want",
    "answers",
    "guys",
    "solution",
    "problem",
    "nokia",
    "address",
    "particular",
    "problem",
    "since",
    "seen",
    "exactly",
    "continuous",
    "integration",
    "need",
    "without",
    "wasting",
    "time",
    "move",
    "forward",
    "show",
    "nokia",
    "solved",
    "problem",
    "nokia",
    "adopted",
    "continuous",
    "integration",
    "solution",
    "happens",
    "developers",
    "commit",
    "changes",
    "source",
    "code",
    "shared",
    "repository",
    "right",
    "happens",
    "continuous",
    "integration",
    "server",
    "continuous",
    "integration",
    "server",
    "pose",
    "repository",
    "changes",
    "finds",
    "change",
    "made",
    "source",
    "code",
    "pull",
    "code",
    "compile",
    "happening",
    "moment",
    "commit",
    "change",
    "source",
    "code",
    "continuous",
    "integration",
    "server",
    "pull",
    "prepare",
    "build",
    "bug",
    "code",
    "developers",
    "know",
    "government",
    "causing",
    "error",
    "right",
    "go",
    "particular",
    "commit",
    "order",
    "fix",
    "bug",
    "way",
    "locating",
    "fixing",
    "box",
    "easy",
    "saw",
    "nightly",
    "builds",
    "bug",
    "check",
    "comments",
    "made",
    "throughout",
    "day",
    "help",
    "continuous",
    "integration",
    "know",
    "commits",
    "causing",
    "error",
    "locating",
    "fixing",
    "bugs",
    "take",
    "lot",
    "time",
    "okay",
    "move",
    "forward",
    "let",
    "give",
    "quick",
    "recap",
    "discussed",
    "till",
    "first",
    "saw",
    "need",
    "continuous",
    "integration",
    "problems",
    "industries",
    "facing",
    "continuous",
    "integration",
    "introduced",
    "saw",
    "continuous",
    "integration",
    "addresses",
    "problems",
    "understood",
    "exactly",
    "continuous",
    "integration",
    "order",
    "understand",
    "importance",
    "continuous",
    "integration",
    "saw",
    "case",
    "study",
    "nokia",
    "shifted",
    "nightly",
    "build",
    "continuous",
    "integration",
    "move",
    "forward",
    "see",
    "various",
    "continuous",
    "integration",
    "tools",
    "available",
    "market",
    "four",
    "widely",
    "used",
    "continuous",
    "integration",
    "tools",
    "first",
    "jenkins",
    "focus",
    "today",
    "session",
    "buildbot",
    "travis",
    "bamboo",
    "right",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "exactly",
    "jenkins",
    "jenkins",
    "continuous",
    "integration",
    "tool",
    "open",
    "source",
    "tool",
    "written",
    "java",
    "achieves",
    "continuous",
    "integration",
    "help",
    "plugins",
    "jenkins",
    "well",
    "thousand",
    "plugins",
    "major",
    "reason",
    "focusing",
    "jenkins",
    "let",
    "tell",
    "guys",
    "widely",
    "accepted",
    "tool",
    "continuous",
    "integration",
    "flexibility",
    "amount",
    "plugins",
    "supports",
    "see",
    "diagram",
    "supporting",
    "various",
    "development",
    "deployment",
    "testing",
    "technologies",
    "example",
    "gate",
    "maven",
    "selenium",
    "puppet",
    "ansible",
    "lawgivers",
    "right",
    "want",
    "integrate",
    "particular",
    "tool",
    "need",
    "make",
    "sure",
    "tool",
    "installed",
    "jenkins",
    "better",
    "understanding",
    "jenkins",
    "let",
    "show",
    "jenkins",
    "dashboard",
    "installed",
    "jenkins",
    "ubuntu",
    "box",
    "want",
    "learn",
    "install",
    "jenkins",
    "refer",
    "jenkins",
    "installation",
    "video",
    "jenkins",
    "dashboard",
    "guys",
    "see",
    "currently",
    "jobs",
    "section",
    "empty",
    "otherwise",
    "give",
    "status",
    "build",
    "jobs",
    "click",
    "new",
    "item",
    "actually",
    "start",
    "new",
    "project",
    "scratch",
    "right",
    "let",
    "us",
    "go",
    "back",
    "slides",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "various",
    "categories",
    "plugins",
    "told",
    "earlier",
    "jenkins",
    "achieves",
    "continuous",
    "integration",
    "help",
    "plugins",
    "right",
    "jenkins",
    "opposed",
    "well",
    "thousand",
    "plugins",
    "major",
    "reason",
    "jenkins",
    "popular",
    "nowadays",
    "categorization",
    "screen",
    "certain",
    "plugins",
    "testing",
    "like",
    "selenium",
    "etc",
    "talk",
    "reports",
    "multiple",
    "plugins",
    "example",
    "html",
    "publisher",
    "notification",
    "also",
    "many",
    "plugins",
    "written",
    "one",
    "jenkins",
    "build",
    "notification",
    "talked",
    "deployment",
    "plugins",
    "like",
    "deploy",
    "talk",
    "compiled",
    "plugins",
    "like",
    "maven",
    "etc",
    "alright",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "actually",
    "install",
    "box",
    "jenkins",
    "installed",
    "order",
    "install",
    "jenkins",
    "need",
    "need",
    "click",
    "manage",
    "ken",
    "option",
    "overhead",
    "see",
    "option",
    "called",
    "manage",
    "plugins",
    "click",
    "see",
    "certain",
    "updates",
    "existing",
    "plugins",
    "already",
    "installed",
    "right",
    "option",
    "called",
    "installed",
    "get",
    "list",
    "plugins",
    "system",
    "right",
    "time",
    "option",
    "called",
    "available",
    "give",
    "plugins",
    "available",
    "jenkins",
    "alright",
    "go",
    "ahead",
    "install",
    "called",
    "html",
    "publisher",
    "easy",
    "need",
    "type",
    "name",
    "headed",
    "html",
    "publisher",
    "plugin",
    "click",
    "install",
    "without",
    "restart",
    "installing",
    "need",
    "wait",
    "time",
    "successfully",
    "installed",
    "let",
    "us",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "understood",
    "exactly",
    "jenkins",
    "seen",
    "various",
    "10",
    "kids",
    "plugins",
    "well",
    "time",
    "understand",
    "jenkins",
    "example",
    "see",
    "general",
    "workflow",
    "jenkins",
    "used",
    "right",
    "let",
    "us",
    "go",
    "back",
    "slides",
    "told",
    "earlier",
    "well",
    "see",
    "jenkins",
    "example",
    "let",
    "us",
    "move",
    "forward",
    "happening",
    "developers",
    "committing",
    "changes",
    "source",
    "code",
    "source",
    "code",
    "present",
    "shared",
    "repository",
    "git",
    "repository",
    "subversion",
    "repository",
    "repository",
    "right",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "happens",
    "happening",
    "jenkins",
    "server",
    "actually",
    "polling",
    "source",
    "code",
    "repository",
    "regular",
    "intervals",
    "see",
    "developer",
    "made",
    "commit",
    "source",
    "code",
    "change",
    "source",
    "code",
    "pull",
    "code",
    "prepare",
    "build",
    "time",
    "developers",
    "notified",
    "build",
    "results",
    "let",
    "us",
    "execute",
    "practically",
    "right",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "ubuntu",
    "bar",
    "going",
    "going",
    "create",
    "new",
    "item",
    "read",
    "basically",
    "new",
    "project",
    "give",
    "suitable",
    "named",
    "project",
    "use",
    "name",
    "want",
    "write",
    "compile",
    "click",
    "freestyle",
    "project",
    "reason",
    "project",
    "configurable",
    "flexible",
    "option",
    "easier",
    "set",
    "well",
    "time",
    "many",
    "options",
    "configure",
    "present",
    "build",
    "jobs",
    "well",
    "move",
    "forward",
    "freestyle",
    "project",
    "click",
    "ok",
    "go",
    "source",
    "code",
    "management",
    "tab",
    "ask",
    "type",
    "source",
    "code",
    "management",
    "want",
    "click",
    "get",
    "need",
    "type",
    "repository",
    "url",
    "case",
    "http",
    "username",
    "slash",
    "name",
    "repository",
    "finally",
    "dot",
    "get",
    "right",
    "bill",
    "auction",
    "multiple",
    "options",
    "right",
    "click",
    "invoke",
    "maven",
    "targets",
    "let",
    "tell",
    "guys",
    "may",
    "even",
    "built",
    "life",
    "cycle",
    "build",
    "life",
    "cycle",
    "made",
    "multiple",
    "build",
    "phases",
    "typically",
    "sequence",
    "build",
    "phase",
    "festive",
    "validate",
    "code",
    "compile",
    "test",
    "perform",
    "unit",
    "test",
    "using",
    "suitable",
    "unit",
    "testing",
    "framework",
    "package",
    "code",
    "distributable",
    "format",
    "like",
    "jars",
    "verify",
    "actually",
    "install",
    "package",
    "want",
    "help",
    "install",
    "build",
    "phase",
    "deploy",
    "production",
    "environment",
    "release",
    "hope",
    "understood",
    "maven",
    "build",
    "life",
    "cycle",
    "goals",
    "tab",
    "need",
    "need",
    "compile",
    "code",
    "present",
    "github",
    "account",
    "gold",
    "stabbed",
    "need",
    "write",
    "compile",
    "trigger",
    "compile",
    "build",
    "phase",
    "maven",
    "guys",
    "click",
    "apply",
    "save",
    "left",
    "hand",
    "side",
    "option",
    "called",
    "bill",
    "trigger",
    "built",
    "click",
    "able",
    "see",
    "builder",
    "starting",
    "order",
    "see",
    "console",
    "output",
    "click",
    "build",
    "see",
    "console",
    "output",
    "validated",
    "github",
    "account",
    "starting",
    "compile",
    "code",
    "github",
    "account",
    "successfully",
    "compiled",
    "code",
    "present",
    "github",
    "account",
    "let",
    "us",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "jenkins",
    "dashboard",
    "see",
    "project",
    "displayed",
    "see",
    "blue",
    "color",
    "ball",
    "indicates",
    "successfully",
    "executed",
    "right",
    "let",
    "us",
    "go",
    "back",
    "slides",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "happens",
    "compile",
    "code",
    "code",
    "compiled",
    "need",
    "test",
    "right",
    "jenkins",
    "deploy",
    "code",
    "onto",
    "test",
    "server",
    "testing",
    "time",
    "developers",
    "notified",
    "test",
    "results",
    "well",
    "let",
    "us",
    "execute",
    "practically",
    "go",
    "back",
    "ubuntu",
    "box",
    "github",
    "repository",
    "test",
    "cases",
    "already",
    "defined",
    "alright",
    "going",
    "analyze",
    "test",
    "cases",
    "help",
    "maven",
    "let",
    "tell",
    "go",
    "click",
    "new",
    "item",
    "give",
    "suitable",
    "name",
    "project",
    "type",
    "test",
    "use",
    "freestyle",
    "project",
    "reason",
    "told",
    "earlier",
    "click",
    "ok",
    "source",
    "code",
    "management",
    "tab",
    "applying",
    "unit",
    "testing",
    "code",
    "compiled",
    "need",
    "first",
    "review",
    "help",
    "pmd",
    "click",
    "new",
    "item",
    "need",
    "type",
    "name",
    "project",
    "type",
    "code",
    "underscore",
    "review",
    "freestyle",
    "project",
    "click",
    "source",
    "code",
    "management",
    "tab",
    "choose",
    "gate",
    "give",
    "repository",
    "url",
    "https",
    "username",
    "name",
    "repository",
    "kit",
    "right",
    "scroll",
    "doubt",
    "build",
    "tab",
    "going",
    "click",
    "click",
    "invoke",
    "maven",
    "targets",
    "order",
    "review",
    "code",
    "going",
    "use",
    "matrix",
    "profile",
    "maven",
    "let",
    "tell",
    "need",
    "type",
    "p",
    "matrix",
    "pmd",
    "pmd",
    "right",
    "actually",
    "produce",
    "pmd",
    "report",
    "contains",
    "warnings",
    "errors",
    "post",
    "bill",
    "action",
    "tab",
    "click",
    "publish",
    "pmd",
    "analysis",
    "result",
    "click",
    "apply",
    "save",
    "finally",
    "click",
    "bill",
    "let",
    "us",
    "see",
    "console",
    "output",
    "pulled",
    "code",
    "github",
    "account",
    "performing",
    "code",
    "review",
    "successfully",
    "review",
    "code",
    "let",
    "us",
    "go",
    "back",
    "project",
    "see",
    "option",
    "called",
    "pmd",
    "warnings",
    "click",
    "display",
    "warnings",
    "present",
    "code",
    "pmd",
    "alice",
    "report",
    "see",
    "total",
    "11",
    "warnings",
    "find",
    "details",
    "well",
    "like",
    "package",
    "categories",
    "types",
    "warnings",
    "like",
    "example",
    "empty",
    "cache",
    "blocks",
    "empty",
    "finally",
    "block",
    "one",
    "tab",
    "called",
    "warnings",
    "find",
    "warning",
    "present",
    "filename",
    "package",
    "right",
    "find",
    "details",
    "details",
    "tab",
    "actually",
    "tell",
    "warning",
    "present",
    "code",
    "right",
    "let",
    "us",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "perform",
    "unit",
    "tests",
    "code",
    "compiled",
    "click",
    "new",
    "item",
    "give",
    "name",
    "project",
    "type",
    "test",
    "click",
    "freestyle",
    "project",
    "okay",
    "source",
    "code",
    "management",
    "tab",
    "click",
    "get",
    "type",
    "repository",
    "url",
    "http",
    "username",
    "name",
    "repository",
    "kit",
    "build",
    "option",
    "click",
    "invoke",
    "maven",
    "targets",
    "told",
    "earlier",
    "well",
    "maven",
    "build",
    "life",
    "cycle",
    "multiple",
    "build",
    "phases",
    "like",
    "first",
    "would",
    "validate",
    "code",
    "compile",
    "tested",
    "package",
    "verify",
    "install",
    "certain",
    "packages",
    "required",
    "finally",
    "deploy",
    "alright",
    "one",
    "phase",
    "actually",
    "testing",
    "performs",
    "unit",
    "testing",
    "using",
    "suitable",
    "unit",
    "testing",
    "framework",
    "test",
    "cases",
    "already",
    "defined",
    "github",
    "account",
    "analyze",
    "test",
    "case",
    "gold",
    "section",
    "need",
    "write",
    "tests",
    "right",
    "invoke",
    "test",
    "phase",
    "maven",
    "build",
    "life",
    "cycle",
    "right",
    "click",
    "apply",
    "save",
    "finally",
    "click",
    "builder",
    "see",
    "console",
    "output",
    "click",
    "source",
    "code",
    "management",
    "tab",
    "select",
    "get",
    "right",
    "need",
    "type",
    "repository",
    "url",
    "http",
    "username",
    "repository",
    "name",
    "dot",
    "get",
    "build",
    "tab",
    "select",
    "invoke",
    "maven",
    "targets",
    "told",
    "earlier",
    "well",
    "maven",
    "build",
    "life",
    "cycle",
    "multiple",
    "phases",
    "right",
    "one",
    "phase",
    "unit",
    "tests",
    "order",
    "invoke",
    "unit",
    "test",
    "need",
    "goals",
    "tab",
    "need",
    "write",
    "tests",
    "invoke",
    "test",
    "build",
    "phase",
    "maven",
    "build",
    "life",
    "cycle",
    "right",
    "moment",
    "write",
    "tests",
    "build",
    "actually",
    "analyze",
    "test",
    "cases",
    "present",
    "github",
    "account",
    "let",
    "us",
    "write",
    "test",
    "apply",
    "save",
    "finally",
    "click",
    "bill",
    "order",
    "see",
    "console",
    "output",
    "click",
    "pull",
    "code",
    "github",
    "account",
    "performing",
    "unit",
    "test",
    "successfully",
    "perform",
    "testing",
    "code",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "see",
    "three",
    "build",
    "jobs",
    "executed",
    "successful",
    "indicated",
    "help",
    "view",
    "colored",
    "ball",
    "right",
    "let",
    "us",
    "go",
    "back",
    "slides",
    "successfully",
    "performed",
    "unit",
    "tests",
    "test",
    "cases",
    "github",
    "account",
    "move",
    "forward",
    "see",
    "happens",
    "finally",
    "deploy",
    "build",
    "application",
    "production",
    "environment",
    "release",
    "one",
    "single",
    "jenkins",
    "multiple",
    "disadvantages",
    "let",
    "us",
    "discuss",
    "one",
    "one",
    "move",
    "forward",
    "see",
    "disadvantages",
    "using",
    "one",
    "single",
    "jenkins",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "show",
    "create",
    "build",
    "pipeline",
    "right",
    "move",
    "ubuntu",
    "box",
    "see",
    "option",
    "plus",
    "ok",
    "click",
    "click",
    "build",
    "pipeline",
    "view",
    "whatever",
    "name",
    "want",
    "give",
    "give",
    "rekha",
    "pipeline",
    "click",
    "give",
    "certain",
    "description",
    "bill",
    "pipeline",
    "right",
    "multiple",
    "options",
    "look",
    "option",
    "called",
    "select",
    "initial",
    "job",
    "want",
    "compiled",
    "first",
    "job",
    "display",
    "options",
    "number",
    "display",
    "builds",
    "want",
    "keep",
    "5",
    "row",
    "headers",
    "want",
    "column",
    "headers",
    "look",
    "options",
    "play",
    "around",
    "introductory",
    "example",
    "let",
    "us",
    "keep",
    "way",
    "finally",
    "click",
    "apply",
    "currently",
    "see",
    "one",
    "job",
    "compiled",
    "add",
    "jobs",
    "pipeline",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "add",
    "code",
    "review",
    "well",
    "go",
    "configure",
    "bill",
    "triggers",
    "tab",
    "click",
    "build",
    "projects",
    "built",
    "whatever",
    "project",
    "want",
    "execute",
    "code",
    "review",
    "type",
    "want",
    "compile",
    "yeah",
    "click",
    "compile",
    "see",
    "multiple",
    "options",
    "like",
    "trigger",
    "build",
    "stable",
    "trigger",
    "even",
    "build",
    "unstable",
    "trigger",
    "even",
    "build",
    "page",
    "click",
    "trigger",
    "even",
    "bill",
    "fails",
    "right",
    "finally",
    "click",
    "apply",
    "safe",
    "similarly",
    "want",
    "add",
    "test",
    "job",
    "well",
    "pipeline",
    "click",
    "configure",
    "bill",
    "triggers",
    "tab",
    "click",
    "build",
    "projects",
    "built",
    "overhead",
    "type",
    "project",
    "want",
    "execute",
    "particular",
    "project",
    "case",
    "code",
    "review",
    "let",
    "us",
    "click",
    "trigger",
    "even",
    "build",
    "fails",
    "apply",
    "save",
    "let",
    "us",
    "go",
    "back",
    "dashboard",
    "see",
    "pipeline",
    "looks",
    "like",
    "pipeline",
    "okay",
    "click",
    "run",
    "let",
    "us",
    "see",
    "happens",
    "first",
    "compile",
    "code",
    "github",
    "account",
    "pull",
    "code",
    "compile",
    "compile",
    "done",
    "right",
    "review",
    "code",
    "code",
    "review",
    "started",
    "order",
    "see",
    "log",
    "click",
    "console",
    "give",
    "console",
    "output",
    "code",
    "review",
    "done",
    "start",
    "testing",
    "perform",
    "unit",
    "tests",
    "code",
    "successfully",
    "reviewed",
    "see",
    "color",
    "become",
    "green",
    "testing",
    "started",
    "perform",
    "unit",
    "tests",
    "test",
    "case",
    "github",
    "account",
    "successfully",
    "executed",
    "three",
    "build",
    "jobs",
    "compile",
    "code",
    "review",
    "perform",
    "testing",
    "right",
    "build",
    "pipeline",
    "guys",
    "let",
    "us",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "go",
    "back",
    "slides",
    "successfully",
    "performed",
    "unit",
    "tests",
    "test",
    "cases",
    "present",
    "github",
    "account",
    "right",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "else",
    "jenkins",
    "application",
    "tested",
    "also",
    "deployed",
    "onto",
    "production",
    "server",
    "release",
    "well",
    "alright",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "disadvantages",
    "one",
    "single",
    "jenkins",
    "two",
    "major",
    "disadvantages",
    "using",
    "one",
    "single",
    "jenkins",
    "first",
    "might",
    "require",
    "different",
    "environments",
    "builds",
    "test",
    "jobs",
    "right",
    "time",
    "one",
    "single",
    "jenkins",
    "serve",
    "purpose",
    "second",
    "major",
    "disadvantages",
    "suppose",
    "heavier",
    "projects",
    "build",
    "regular",
    "basis",
    "time",
    "one",
    "single",
    "jenkins",
    "server",
    "simply",
    "handle",
    "load",
    "let",
    "us",
    "understand",
    "example",
    "suppose",
    "need",
    "run",
    "web",
    "test",
    "using",
    "internet",
    "explorer",
    "time",
    "need",
    "windows",
    "machine",
    "build",
    "jobs",
    "might",
    "require",
    "linux",
    "box",
    "ca",
    "use",
    "one",
    "single",
    "jenkins",
    "right",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "actually",
    "solution",
    "problem",
    "solution",
    "problem",
    "jenkins",
    "distributed",
    "architecture",
    "jenkins",
    "distributed",
    "architecture",
    "consists",
    "jenkins",
    "master",
    "multiple",
    "jenkins",
    "slave",
    "jenkins",
    "master",
    "actually",
    "used",
    "scheduling",
    "build",
    "jobs",
    "also",
    "dispatches",
    "builds",
    "slaves",
    "actual",
    "execution",
    "right",
    "also",
    "monitors",
    "slave",
    "possibly",
    "taking",
    "online",
    "offline",
    "required",
    "also",
    "records",
    "presents",
    "build",
    "results",
    "directly",
    "executable",
    "job",
    "master",
    "instance",
    "well",
    "talk",
    "jenkins",
    "slaves",
    "slaves",
    "nothing",
    "java",
    "executable",
    "present",
    "remote",
    "machines",
    "right",
    "slaves",
    "basically",
    "request",
    "jenkins",
    "master",
    "say",
    "perform",
    "jobs",
    "told",
    "jenkins",
    "master",
    "operate",
    "variety",
    "operating",
    "system",
    "configure",
    "jenkins",
    "order",
    "execute",
    "particular",
    "type",
    "builds",
    "particular",
    "jenkins",
    "slave",
    "particular",
    "type",
    "jenkins",
    "slave",
    "actually",
    "let",
    "jenkins",
    "pick",
    "next",
    "available",
    "budget",
    "get",
    "slave",
    "right",
    "go",
    "back",
    "ubuntu",
    "box",
    "show",
    "practically",
    "add",
    "jenkins",
    "slaves",
    "see",
    "option",
    "called",
    "mana",
    "jenkins",
    "click",
    "scroll",
    "see",
    "man",
    "option",
    "called",
    "managed",
    "nodes",
    "left",
    "hand",
    "side",
    "option",
    "called",
    "new",
    "node",
    "click",
    "click",
    "permanent",
    "agent",
    "give",
    "name",
    "slave",
    "give",
    "slave",
    "underscore",
    "one",
    "click",
    "ok",
    "need",
    "write",
    "remote",
    "root",
    "directory",
    "keep",
    "slash",
    "home",
    "slash",
    "edureka",
    "labels",
    "mandatory",
    "still",
    "want",
    "use",
    "launch",
    "method",
    "want",
    "launched",
    "slave",
    "agents",
    "via",
    "ssh",
    "right",
    "need",
    "give",
    "ip",
    "address",
    "horse",
    "let",
    "show",
    "ip",
    "address",
    "host",
    "jenkins",
    "slave",
    "using",
    "like",
    "jenkins",
    "slave",
    "machine",
    "using",
    "jenkins",
    "slave",
    "order",
    "check",
    "ip",
    "address",
    "type",
    "ifconfig",
    "ip",
    "address",
    "machine",
    "copy",
    "go",
    "back",
    "jenkins",
    "master",
    "host",
    "tab",
    "paste",
    "ip",
    "address",
    "add",
    "credentials",
    "click",
    "add",
    "give",
    "user",
    "name",
    "give",
    "root",
    "password",
    "click",
    "add",
    "select",
    "finally",
    "save",
    "currently",
    "adding",
    "slave",
    "order",
    "see",
    "logs",
    "click",
    "slave",
    "successfully",
    "added",
    "particular",
    "slave",
    "show",
    "logs",
    "click",
    "slave",
    "left",
    "hand",
    "side",
    "notice",
    "option",
    "called",
    "log",
    "click",
    "give",
    "output",
    "see",
    "agent",
    "successfully",
    "connected",
    "online",
    "right",
    "go",
    "jenkins",
    "slave",
    "show",
    "slash",
    "home",
    "slash",
    "enter",
    "car",
    "added",
    "let",
    "first",
    "clear",
    "terminal",
    "show",
    "contents",
    "slash",
    "home",
    "slash",
    "eureka",
    "see",
    "successfully",
    "added",
    "slave",
    "dot",
    "jar",
    "means",
    "successfully",
    "added",
    "jenkins",
    "slave",
    "jenkins",
    "master",
    "hello",
    "everyone",
    "ordered",
    "80",
    "rekha",
    "today",
    "session",
    "focus",
    "docker",
    "without",
    "ado",
    "let",
    "us",
    "move",
    "forward",
    "look",
    "agenda",
    "today",
    "first",
    "see",
    "need",
    "docker",
    "focus",
    "various",
    "problems",
    "industries",
    "facing",
    "docker",
    "introduced",
    "understand",
    "exactly",
    "docker",
    "better",
    "understanding",
    "docker",
    "also",
    "look",
    "docker",
    "example",
    "understand",
    "industries",
    "using",
    "docker",
    "case",
    "study",
    "indiana",
    "university",
    "fifth",
    "topic",
    "focus",
    "various",
    "docker",
    "components",
    "like",
    "images",
    "containers",
    "etc",
    "part",
    "focus",
    "installing",
    "wordpress",
    "phpmyadmin",
    "using",
    "docker",
    "compose",
    "move",
    "forward",
    "see",
    "need",
    "docker",
    "common",
    "problem",
    "industries",
    "facing",
    "see",
    "developer",
    "built",
    "application",
    "works",
    "fine",
    "environment",
    "reach",
    "production",
    "certain",
    "issues",
    "application",
    "happen",
    "happens",
    "difference",
    "computing",
    "environment",
    "deaf",
    "product",
    "move",
    "forward",
    "see",
    "second",
    "problem",
    "proceed",
    "second",
    "problem",
    "important",
    "us",
    "understand",
    "microservices",
    "consider",
    "large",
    "application",
    "application",
    "broken",
    "smaller",
    "services",
    "services",
    "termed",
    "micro",
    "services",
    "put",
    "another",
    "way",
    "well",
    "microservices",
    "considered",
    "small",
    "processes",
    "communicates",
    "network",
    "fulfill",
    "one",
    "particular",
    "goal",
    "let",
    "us",
    "understand",
    "example",
    "see",
    "online",
    "shopping",
    "service",
    "application",
    "broken",
    "smaller",
    "micro",
    "services",
    "like",
    "account",
    "service",
    "product",
    "catalog",
    "card",
    "server",
    "order",
    "server",
    "microsoft",
    "architecture",
    "gaining",
    "lot",
    "popularity",
    "nowadays",
    "even",
    "giants",
    "like",
    "facebook",
    "amazon",
    "adopting",
    "micro",
    "service",
    "architecture",
    "three",
    "major",
    "reasons",
    "adopting",
    "microservice",
    "architecture",
    "say",
    "three",
    "major",
    "advantages",
    "using",
    "microsoft",
    "architecture",
    "first",
    "certain",
    "applications",
    "easier",
    "build",
    "maintain",
    "broken",
    "smaller",
    "pieces",
    "smaller",
    "services",
    "second",
    "reason",
    "suppose",
    "want",
    "update",
    "particular",
    "software",
    "want",
    "new",
    "technology",
    "stack",
    "one",
    "module",
    "one",
    "service",
    "easily",
    "dependency",
    "concerns",
    "less",
    "compared",
    "application",
    "whole",
    "apart",
    "third",
    "reason",
    "module",
    "service",
    "goes",
    "whole",
    "application",
    "remains",
    "largely",
    "unaffected",
    "hope",
    "clear",
    "micro",
    "services",
    "advantages",
    "move",
    "forward",
    "see",
    "problems",
    "adopting",
    "micro",
    "service",
    "architecture",
    "one",
    "way",
    "implementing",
    "microservice",
    "architecture",
    "see",
    "host",
    "machine",
    "top",
    "host",
    "machine",
    "multiple",
    "virtual",
    "machines",
    "virtual",
    "machines",
    "contains",
    "dependencies",
    "one",
    "micro",
    "service",
    "must",
    "thinking",
    "disadvantage",
    "major",
    "disadvantage",
    "virtual",
    "machines",
    "lot",
    "wastage",
    "resources",
    "resources",
    "ram",
    "processor",
    "disk",
    "space",
    "utilized",
    "completely",
    "micro",
    "service",
    "running",
    "virtual",
    "machines",
    "ideal",
    "way",
    "implement",
    "microservice",
    "architecture",
    "given",
    "example",
    "five",
    "microservices",
    "5",
    "micro",
    "services",
    "application",
    "huge",
    "requires",
    "microsoft",
    "versus",
    "time",
    "using",
    "virtual",
    "machines",
    "make",
    "sense",
    "wastage",
    "resources",
    "let",
    "us",
    "first",
    "discuss",
    "implementation",
    "microservice",
    "problem",
    "saw",
    "happening",
    "host",
    "machine",
    "top",
    "host",
    "machine",
    "virtual",
    "machine",
    "top",
    "virtual",
    "machine",
    "multiple",
    "docker",
    "containers",
    "docker",
    "containers",
    "contains",
    "dependencies",
    "41",
    "microsoft",
    "office",
    "must",
    "thinking",
    "difference",
    "earlier",
    "using",
    "virtual",
    "machines",
    "using",
    "docker",
    "containers",
    "top",
    "virtual",
    "machines",
    "let",
    "tell",
    "guys",
    "docker",
    "containers",
    "actually",
    "lightweight",
    "alternatives",
    "virtual",
    "machines",
    "mean",
    "docker",
    "containers",
    "need",
    "ram",
    "disk",
    "space",
    "take",
    "ram",
    "disk",
    "space",
    "according",
    "requirements",
    "applications",
    "right",
    "let",
    "us",
    "see",
    "dockers",
    "problem",
    "consistent",
    "computing",
    "environment",
    "throughout",
    "software",
    "delivery",
    "life",
    "cycle",
    "let",
    "tell",
    "first",
    "docker",
    "containers",
    "actually",
    "developed",
    "developers",
    "let",
    "us",
    "see",
    "dockers",
    "first",
    "saw",
    "application",
    "works",
    "fine",
    "development",
    "environment",
    "production",
    "docker",
    "containers",
    "used",
    "throughout",
    "sclc",
    "life",
    "cycle",
    "order",
    "provide",
    "consistent",
    "computing",
    "environment",
    "environment",
    "present",
    "dev",
    "test",
    "product",
    "wo",
    "difference",
    "computing",
    "environment",
    "let",
    "us",
    "move",
    "forward",
    "understand",
    "exactly",
    "docker",
    "docker",
    "containers",
    "use",
    "guest",
    "operating",
    "system",
    "uses",
    "host",
    "operating",
    "system",
    "let",
    "us",
    "refer",
    "diagram",
    "shown",
    "host",
    "operating",
    "system",
    "top",
    "host",
    "operating",
    "system",
    "docker",
    "engine",
    "help",
    "docker",
    "engine",
    "docker",
    "containers",
    "formed",
    "containers",
    "applications",
    "running",
    "requirements",
    "applications",
    "binaries",
    "libraries",
    "also",
    "packaged",
    "container",
    "right",
    "multiple",
    "containers",
    "running",
    "see",
    "two",
    "containers",
    "1",
    "top",
    "host",
    "machine",
    "docker",
    "engine",
    "top",
    "docker",
    "engine",
    "multiple",
    "containers",
    "containers",
    "application",
    "running",
    "whatever",
    "binaries",
    "library",
    "required",
    "application",
    "also",
    "packaged",
    "container",
    "hope",
    "clear",
    "let",
    "us",
    "move",
    "forward",
    "understand",
    "docker",
    "detail",
    "general",
    "workflow",
    "docker",
    "say",
    "one",
    "way",
    "using",
    "docker",
    "happening",
    "developer",
    "writes",
    "code",
    "defines",
    "application",
    "requirements",
    "dependencies",
    "easy",
    "write",
    "docker",
    "file",
    "docker",
    "file",
    "produces",
    "docker",
    "images",
    "whatever",
    "dependencies",
    "required",
    "particular",
    "application",
    "present",
    "inside",
    "image",
    "docker",
    "containers",
    "docker",
    "containers",
    "nothing",
    "runtime",
    "instance",
    "docker",
    "image",
    "particular",
    "image",
    "uploaded",
    "onto",
    "docker",
    "hub",
    "docker",
    "hub",
    "docker",
    "hub",
    "nothing",
    "git",
    "repository",
    "docker",
    "images",
    "contains",
    "public",
    "well",
    "private",
    "repositories",
    "public",
    "repositories",
    "pull",
    "image",
    "well",
    "upload",
    "images",
    "well",
    "docker",
    "hub",
    "right",
    "docker",
    "hub",
    "various",
    "teams",
    "qa",
    "production",
    "pull",
    "image",
    "prepare",
    "containers",
    "see",
    "diagram",
    "major",
    "advantage",
    "get",
    "workflow",
    "whatever",
    "dependencies",
    "required",
    "application",
    "actually",
    "present",
    "throughout",
    "software",
    "delivery",
    "life",
    "cycle",
    "recall",
    "first",
    "problem",
    "saw",
    "application",
    "works",
    "fine",
    "development",
    "environment",
    "reaches",
    "production",
    "working",
    "properly",
    "particular",
    "problem",
    "easily",
    "resolved",
    "help",
    "particular",
    "workflow",
    "environment",
    "throughout",
    "software",
    "delivery",
    "lifecycle",
    "dev",
    "test",
    "product",
    "see",
    "better",
    "understanding",
    "docker",
    "docker",
    "example",
    "another",
    "way",
    "using",
    "docker",
    "previous",
    "example",
    "saw",
    "docker",
    "images",
    "used",
    "images",
    "uploaded",
    "onto",
    "docker",
    "hub",
    "doc",
    "various",
    "teams",
    "pulling",
    "images",
    "building",
    "containers",
    "docker",
    "images",
    "huge",
    "size",
    "requires",
    "lot",
    "network",
    "bandwidth",
    "order",
    "say",
    "network",
    "bandwidth",
    "use",
    "kind",
    "work",
    "flow",
    "use",
    "jenkins",
    "server",
    "continuous",
    "integration",
    "server",
    "build",
    "environment",
    "contains",
    "dependencies",
    "particular",
    "application",
    "microsoft",
    "office",
    "build",
    "environment",
    "deployed",
    "onto",
    "various",
    "teams",
    "like",
    "testing",
    "staging",
    "production",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "exactly",
    "happening",
    "particular",
    "image",
    "developer",
    "written",
    "complex",
    "requirements",
    "micro",
    "service",
    "easy",
    "write",
    "dockerfile",
    "code",
    "pushed",
    "onto",
    "get",
    "repository",
    "github",
    "repository",
    "continuous",
    "integration",
    "servers",
    "like",
    "jenkins",
    "pull",
    "code",
    "build",
    "environment",
    "contains",
    "dependencies",
    "particular",
    "micro",
    "service",
    "environment",
    "deployed",
    "testing",
    "staging",
    "production",
    "way",
    "whatever",
    "requirements",
    "micro",
    "service",
    "present",
    "throughout",
    "software",
    "delivery",
    "life",
    "cycle",
    "recall",
    "first",
    "problem",
    "application",
    "works",
    "fine",
    "dev",
    "work",
    "prod",
    "workflow",
    "completely",
    "remove",
    "problem",
    "requirements",
    "microsoft",
    "office",
    "present",
    "throughout",
    "software",
    "delivery",
    "life",
    "cycle",
    "image",
    "also",
    "explains",
    "easy",
    "implement",
    "microsoft",
    "architecture",
    "using",
    "docker",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "industries",
    "adopting",
    "docker",
    "case",
    "study",
    "indiana",
    "university",
    "docker",
    "facing",
    "many",
    "problems",
    "let",
    "us",
    "look",
    "problems",
    "one",
    "one",
    "first",
    "problem",
    "using",
    "custom",
    "script",
    "order",
    "deploy",
    "application",
    "onto",
    "various",
    "vm",
    "requires",
    "lot",
    "manual",
    "steps",
    "second",
    "problem",
    "environment",
    "optimized",
    "legacy",
    "java",
    "based",
    "applications",
    "growing",
    "environment",
    "involves",
    "new",
    "products",
    "solely",
    "order",
    "provide",
    "students",
    "best",
    "possible",
    "experience",
    "needed",
    "began",
    "modernizing",
    "applications",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "problems",
    "indiana",
    "university",
    "facing",
    "previous",
    "problem",
    "dog",
    "indiana",
    "university",
    "wanted",
    "start",
    "modernizing",
    "applications",
    "wanted",
    "move",
    "monolithic",
    "architecture",
    "microsoft",
    "office",
    "architecture",
    "previous",
    "slides",
    "also",
    "saw",
    "want",
    "update",
    "particular",
    "technology",
    "one",
    "micro",
    "service",
    "easy",
    "less",
    "dependency",
    "constrains",
    "compared",
    "whole",
    "application",
    "reason",
    "wanted",
    "start",
    "modernizing",
    "application",
    "wanted",
    "move",
    "micro",
    "service",
    "architecture",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "problems",
    "facing",
    "indiana",
    "university",
    "also",
    "needed",
    "security",
    "sensitive",
    "student",
    "data",
    "ssn",
    "student",
    "health",
    "care",
    "data",
    "four",
    "major",
    "problems",
    "facing",
    "docker",
    "let",
    "us",
    "see",
    "implemented",
    "docker",
    "solve",
    "problems",
    "solution",
    "problems",
    "docker",
    "data",
    "center",
    "docker",
    "data",
    "center",
    "various",
    "components",
    "front",
    "screen",
    "first",
    "universal",
    "control",
    "plane",
    "comes",
    "ldap",
    "swarm",
    "cs",
    "engine",
    "finally",
    "docker",
    "trusted",
    "registry",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "implemented",
    "docker",
    "data",
    "center",
    "infrastructure",
    "workflow",
    "indiana",
    "university",
    "adopted",
    "docker",
    "data",
    "center",
    "trusted",
    "registry",
    "nothing",
    "storage",
    "docker",
    "images",
    "images",
    "contain",
    "dependencies",
    "41",
    "microsoft",
    "office",
    "saw",
    "indiana",
    "university",
    "wanted",
    "move",
    "monolithic",
    "architecture",
    "microsoft",
    "architecture",
    "reason",
    "docker",
    "images",
    "contain",
    "dependencies",
    "one",
    "particular",
    "micro",
    "service",
    "whole",
    "application",
    "right",
    "comes",
    "universal",
    "control",
    "plane",
    "used",
    "deploy",
    "services",
    "onto",
    "various",
    "hosts",
    "help",
    "docker",
    "images",
    "stored",
    "docker",
    "trusted",
    "registry",
    "obscene",
    "manage",
    "entire",
    "infrastructure",
    "one",
    "single",
    "place",
    "help",
    "universal",
    "control",
    "plane",
    "web",
    "user",
    "interface",
    "actually",
    "use",
    "provision",
    "docker",
    "installed",
    "software",
    "various",
    "hosts",
    "deploy",
    "applications",
    "without",
    "lot",
    "manual",
    "steps",
    "saw",
    "previous",
    "slides",
    "indiana",
    "university",
    "earlier",
    "using",
    "custom",
    "scripts",
    "deploy",
    "application",
    "onto",
    "vms",
    "requires",
    "lot",
    "manual",
    "steps",
    "problem",
    "completely",
    "removed",
    "talk",
    "security",
    "role",
    "based",
    "access",
    "controls",
    "within",
    "docker",
    "data",
    "center",
    "allowed",
    "indiana",
    "university",
    "define",
    "level",
    "access",
    "various",
    "themes",
    "example",
    "provide",
    "access",
    "docker",
    "containers",
    "production",
    "team",
    "time",
    "actually",
    "provide",
    "read",
    "write",
    "access",
    "dev",
    "team",
    "hope",
    "clear",
    "indiana",
    "university",
    "adopted",
    "docker",
    "data",
    "center",
    "move",
    "forward",
    "see",
    "various",
    "docker",
    "components",
    "first",
    "docker",
    "registry",
    "docker",
    "registry",
    "nothing",
    "storage",
    "docker",
    "images",
    "images",
    "stored",
    "either",
    "public",
    "repositories",
    "private",
    "repositories",
    "repositories",
    "present",
    "locally",
    "present",
    "cloud",
    "dog",
    "provides",
    "cloud",
    "hosted",
    "service",
    "called",
    "docker",
    "hub",
    "docker",
    "hub",
    "public",
    "well",
    "private",
    "repositories",
    "public",
    "repositories",
    "actually",
    "pull",
    "image",
    "prepare",
    "containers",
    "time",
    "write",
    "image",
    "upload",
    "onto",
    "docker",
    "hub",
    "upload",
    "private",
    "repository",
    "upload",
    "public",
    "repository",
    "well",
    "totally",
    "better",
    "understanding",
    "docker",
    "hub",
    "let",
    "show",
    "looks",
    "like",
    "docker",
    "hub",
    "looks",
    "like",
    "first",
    "need",
    "actually",
    "sign",
    "login",
    "credentials",
    "see",
    "page",
    "like",
    "says",
    "welcome",
    "docker",
    "hub",
    "see",
    "option",
    "create",
    "repository",
    "create",
    "public",
    "private",
    "repositories",
    "upload",
    "images",
    "time",
    "option",
    "called",
    "explore",
    "repositories",
    "contains",
    "repositories",
    "available",
    "publicly",
    "let",
    "us",
    "go",
    "ahead",
    "explore",
    "publicly",
    "available",
    "repositories",
    "repositories",
    "nginx",
    "reddish",
    "ubuntu",
    "docker",
    "registry",
    "alpine",
    "mongo",
    "sql",
    "swarm",
    "show",
    "centralized",
    "repository",
    "centralized",
    "repository",
    "contains",
    "center",
    "west",
    "image",
    "later",
    "session",
    "actually",
    "pull",
    "centralized",
    "image",
    "docker",
    "hub",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "docker",
    "images",
    "containers",
    "docker",
    "images",
    "nothing",
    "templates",
    "used",
    "create",
    "containers",
    "docker",
    "images",
    "contains",
    "dependencies",
    "particular",
    "application",
    "microsoft",
    "office",
    "create",
    "image",
    "upload",
    "onto",
    "docker",
    "hub",
    "time",
    "also",
    "pull",
    "images",
    "available",
    "public",
    "repositories",
    "docker",
    "hub",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "docker",
    "containers",
    "docker",
    "containers",
    "nothing",
    "runtime",
    "instances",
    "docker",
    "images",
    "contains",
    "everything",
    "required",
    "run",
    "application",
    "microsoft",
    "office",
    "time",
    "also",
    "possible",
    "one",
    "image",
    "required",
    "create",
    "one",
    "container",
    "alright",
    "better",
    "understanding",
    "docker",
    "images",
    "docker",
    "containers",
    "ubuntu",
    "box",
    "pull",
    "sin",
    "2x",
    "image",
    "run",
    "sin",
    "waste",
    "container",
    "let",
    "us",
    "move",
    "forward",
    "first",
    "install",
    "docker",
    "ubuntu",
    "box",
    "guys",
    "ubuntu",
    "box",
    "first",
    "update",
    "packages",
    "type",
    "sudo",
    "update",
    "asking",
    "password",
    "done",
    "installing",
    "docker",
    "need",
    "install",
    "recommended",
    "packages",
    "type",
    "sudo",
    "apt",
    "get",
    "install",
    "image",
    "extra",
    "name",
    "space",
    "line",
    "irks",
    "image",
    "extra",
    "virtual",
    "go",
    "press",
    "done",
    "prerequisite",
    "let",
    "us",
    "go",
    "ahead",
    "install",
    "docker",
    "type",
    "sudo",
    "install",
    "docker",
    "engine",
    "successfully",
    "installed",
    "docker",
    "want",
    "install",
    "docker",
    "send",
    "two",
    "ways",
    "refer",
    "center",
    "docker",
    "installation",
    "video",
    "need",
    "start",
    "docker",
    "servicer",
    "type",
    "sudo",
    "service",
    "docker",
    "start",
    "says",
    "job",
    "already",
    "running",
    "pull",
    "us",
    "image",
    "docker",
    "hub",
    "run",
    "center",
    "waste",
    "container",
    "type",
    "sudo",
    "docker",
    "pull",
    "name",
    "image",
    "os",
    "first",
    "check",
    "local",
    "registry",
    "centos",
    "image",
    "find",
    "go",
    "docker",
    "hub",
    "os",
    "image",
    "pull",
    "image",
    "successfully",
    "pulled",
    "us",
    "image",
    "docker",
    "hub",
    "run",
    "center",
    "container",
    "type",
    "sudo",
    "docker",
    "run",
    "sent",
    "os",
    "name",
    "image",
    "go",
    "centre",
    "ice",
    "container",
    "let",
    "exit",
    "clear",
    "terminal",
    "let",
    "us",
    "recall",
    "first",
    "installed",
    "awkard",
    "open",
    "pulled",
    "sent",
    "image",
    "docker",
    "hub",
    "build",
    "center",
    "container",
    "using",
    "center",
    "west",
    "image",
    "move",
    "forward",
    "tell",
    "exactly",
    "docker",
    "compose",
    "let",
    "us",
    "understand",
    "exactly",
    "docker",
    "compose",
    "suppose",
    "multiple",
    "applications",
    "various",
    "containers",
    "containers",
    "actually",
    "linked",
    "together",
    "want",
    "actually",
    "execute",
    "containers",
    "one",
    "one",
    "want",
    "run",
    "containers",
    "single",
    "command",
    "docker",
    "compose",
    "comes",
    "picture",
    "docker",
    "compose",
    "actually",
    "run",
    "multiple",
    "applications",
    "present",
    "various",
    "containers",
    "one",
    "single",
    "command",
    "docker",
    "compose",
    "see",
    "example",
    "front",
    "imagine",
    "able",
    "define",
    "three",
    "containers",
    "one",
    "running",
    "web",
    "app",
    "another",
    "running",
    "post",
    "kris",
    "another",
    "running",
    "red",
    "uml",
    "file",
    "called",
    "docker",
    "compose",
    "file",
    "actually",
    "execute",
    "three",
    "containers",
    "one",
    "single",
    "command",
    "takin",
    "compose",
    "let",
    "us",
    "understand",
    "example",
    "suppose",
    "want",
    "publish",
    "blog",
    "use",
    "cms",
    "wordpress",
    "one",
    "widely",
    "used",
    "cms",
    "need",
    "one",
    "default",
    "wordpress",
    "need",
    "one",
    "container",
    "sql",
    "bakit",
    "sql",
    "container",
    "linked",
    "wordpress",
    "container",
    "apart",
    "need",
    "one",
    "container",
    "phpmyadmin",
    "linked",
    "sql",
    "database",
    "used",
    "access",
    "mysql",
    "database",
    "able",
    "define",
    "three",
    "containers",
    "one",
    "yamen",
    "file",
    "one",
    "command",
    "docker",
    "composer",
    "three",
    "containers",
    "running",
    "let",
    "show",
    "practically",
    "done",
    "open",
    "box",
    "installed",
    "docker",
    "pulled",
    "center",
    "image",
    "ubuntu",
    "box",
    "first",
    "need",
    "install",
    "docker",
    "compose",
    "need",
    "python",
    "pip",
    "type",
    "sudo",
    "opt",
    "get",
    "installed",
    "titan",
    "vip",
    "go",
    "done",
    "clear",
    "terminal",
    "install",
    "docker",
    "compose",
    "type",
    "sudo",
    "vip",
    "install",
    "docker",
    "compose",
    "go",
    "docker",
    "compose",
    "successfully",
    "installed",
    "make",
    "directory",
    "name",
    "wordpress",
    "mkdir",
    "wordpress",
    "enter",
    "wordpress",
    "directory",
    "edit",
    "docker",
    "compose",
    "dot",
    "html",
    "file",
    "using",
    "g",
    "edit",
    "use",
    "editor",
    "want",
    "use",
    "g",
    "edit",
    "type",
    "sudo",
    "g",
    "edit",
    "docker",
    "compose",
    "dot",
    "html",
    "go",
    "first",
    "open",
    "document",
    "copy",
    "yeah",
    "mel",
    "code",
    "paste",
    "let",
    "tell",
    "done",
    "first",
    "defined",
    "container",
    "named",
    "wordpress",
    "built",
    "image",
    "wordpress",
    "present",
    "docker",
    "hub",
    "wordpress",
    "image",
    "database",
    "defined",
    "one",
    "container",
    "named",
    "wordpress",
    "underscore",
    "db",
    "actually",
    "built",
    "image",
    "called",
    "maria",
    "db",
    "present",
    "word",
    "press",
    "need",
    "link",
    "wordpress",
    "underscore",
    "db",
    "wordpress",
    "container",
    "written",
    "links",
    "wordpress",
    "underscore",
    "db",
    "sql",
    "right",
    "post",
    "section",
    "port",
    "80",
    "docker",
    "container",
    "actually",
    "linked",
    "port",
    "eight",
    "zero",
    "eight",
    "zero",
    "host",
    "machine",
    "clear",
    "till",
    "done",
    "defined",
    "password",
    "deer",
    "cow",
    "give",
    "whatever",
    "password",
    "want",
    "defined",
    "one",
    "container",
    "called",
    "phpmyadmin",
    "container",
    "built",
    "image",
    "corbino",
    "talker",
    "phpmyadmin",
    "present",
    "docker",
    "hub",
    "need",
    "link",
    "particular",
    "container",
    "wordpress",
    "underscore",
    "db",
    "container",
    "written",
    "links",
    "wordpress",
    "underscore",
    "db",
    "sql",
    "port",
    "section",
    "port",
    "80",
    "docker",
    "container",
    "actually",
    "linked",
    "port",
    "80",
    "181",
    "host",
    "machine",
    "finally",
    "given",
    "username",
    "root",
    "given",
    "password",
    "ed",
    "eureka",
    "let",
    "us",
    "save",
    "quit",
    "let",
    "first",
    "clear",
    "terminal",
    "run",
    "command",
    "sudo",
    "docker",
    "compose",
    "go",
    "command",
    "actually",
    "pull",
    "three",
    "images",
    "build",
    "three",
    "containers",
    "done",
    "let",
    "clear",
    "terminal",
    "open",
    "browser",
    "type",
    "ip",
    "address",
    "machine",
    "type",
    "hostname",
    "well",
    "first",
    "name",
    "machine",
    "localhost",
    "type",
    "localhost",
    "put",
    "zero",
    "eight",
    "zero",
    "given",
    "wordpress",
    "direct",
    "wordpress",
    "installation",
    "page",
    "need",
    "fill",
    "particular",
    "form",
    "asking",
    "site",
    "title",
    "give",
    "editor",
    "acre",
    "username",
    "also",
    "give",
    "edureka",
    "password",
    "type",
    "area",
    "rekha",
    "confirm",
    "use",
    "weak",
    "password",
    "type",
    "email",
    "address",
    "asking",
    "search",
    "engine",
    "visibility",
    "want",
    "want",
    "click",
    "finally",
    "click",
    "install",
    "wordpress",
    "wordpress",
    "dashboard",
    "wordpress",
    "successfully",
    "installed",
    "open",
    "one",
    "top",
    "type",
    "localhost",
    "ip",
    "address",
    "machine",
    "go",
    "port",
    "80",
    "1814",
    "phpmyadmin",
    "need",
    "give",
    "user",
    "name",
    "recall",
    "given",
    "route",
    "password",
    "given",
    "rekha",
    "go",
    "php",
    "admin",
    "successfully",
    "installed",
    "phpmyadmin",
    "actually",
    "used",
    "access",
    "sql",
    "database",
    "sql",
    "database",
    "used",
    "wordpress",
    "landed",
    "video",
    "definitely",
    "want",
    "install",
    "kubernetescluster",
    "machine",
    "know",
    "tough",
    "installation",
    "process",
    "hence",
    "video",
    "youtube",
    "channel",
    "name",
    "walden",
    "host",
    "today",
    "without",
    "wasting",
    "time",
    "let",
    "show",
    "various",
    "steps",
    "follow",
    "various",
    "steps",
    "run",
    "masters",
    "slave",
    "end",
    "commands",
    "master",
    "sent",
    "bring",
    "cluster",
    "one",
    "command",
    "run",
    "slave",
    "ends",
    "join",
    "cluster",
    "okay",
    "let",
    "get",
    "started",
    "showing",
    "commands",
    "installation",
    "steps",
    "run",
    "commonly",
    "masters",
    "slave",
    "first",
    "update",
    "repository",
    "okay",
    "since",
    "using",
    "ubuntu",
    "update",
    "app",
    "get",
    "repository",
    "okay",
    "would",
    "turn",
    "vapp",
    "space",
    "masters",
    "end",
    "slaves",
    "communities",
    "work",
    "swap",
    "space",
    "okay",
    "disable",
    "couple",
    "commands",
    "next",
    "part",
    "update",
    "hostname",
    "hosts",
    "file",
    "set",
    "static",
    "ip",
    "address",
    "nodes",
    "cluster",
    "okay",
    "point",
    "time",
    "master",
    "node",
    "cluster",
    "fails",
    "restart",
    "ip",
    "address",
    "dynamic",
    "ip",
    "address",
    "restart",
    "failure",
    "condition",
    "problem",
    "able",
    "join",
    "cluster",
    "different",
    "ip",
    "address",
    "things",
    "right",
    "couple",
    "commands",
    "install",
    "openssh",
    "server",
    "docker",
    "humanity",
    "requires",
    "openssh",
    "functionality",
    "course",
    "needs",
    "docker",
    "everything",
    "kubernetes",
    "containers",
    "right",
    "going",
    "make",
    "use",
    "docker",
    "containers",
    "install",
    "two",
    "components",
    "finally",
    "install",
    "q",
    "barium",
    "black",
    "cereal",
    "core",
    "components",
    "kubernetes",
    "right",
    "various",
    "components",
    "installed",
    "master",
    "slave",
    "let",
    "first",
    "open",
    "vms",
    "show",
    "get",
    "started",
    "get",
    "started",
    "let",
    "tell",
    "one",
    "thing",
    "cluster",
    "master",
    "slaves",
    "cluster",
    "right",
    "master",
    "always",
    "better",
    "configurations",
    "slave",
    "reason",
    "using",
    "virtual",
    "machines",
    "host",
    "ensure",
    "master",
    "least",
    "2",
    "gb",
    "ram",
    "core",
    "cpus",
    "okay",
    "slave",
    "2gb",
    "ram",
    "least",
    "one",
    "core",
    "cpu",
    "basic",
    "necessities",
    "master",
    "slave",
    "machines",
    "note",
    "think",
    "get",
    "started",
    "first",
    "bring",
    "virtual",
    "machine",
    "go",
    "installation",
    "processes",
    "hope",
    "everyone",
    "see",
    "screen",
    "first",
    "vm",
    "going",
    "going",
    "make",
    "master",
    "okay",
    "commands",
    "install",
    "various",
    "components",
    "present",
    "notepad",
    "okay",
    "going",
    "use",
    "reference",
    "quickly",
    "execute",
    "commands",
    "show",
    "communities",
    "installed",
    "first",
    "update",
    "advocate",
    "repository",
    "okay",
    "let",
    "log",
    "okay",
    "going",
    "sudo",
    "osu",
    "execute",
    "following",
    "commands",
    "pseudo",
    "user",
    "okay",
    "osu",
    "goes",
    "root",
    "password",
    "see",
    "difference",
    "right",
    "executing",
    "normal",
    "user",
    "root",
    "user",
    "going",
    "execute",
    "commands",
    "first",
    "let",
    "update",
    "going",
    "copy",
    "paste",
    "update",
    "update",
    "ubuntu",
    "repositories",
    "right",
    "going",
    "take",
    "quite",
    "time",
    "hold",
    "till",
    "completed",
    "okay",
    "done",
    "next",
    "thing",
    "turn",
    "swap",
    "space",
    "okay",
    "command",
    "disable",
    "strap",
    "space",
    "swap",
    "space",
    "flag",
    "let",
    "go",
    "back",
    "okay",
    "swap",
    "flag",
    "go",
    "fs",
    "tab",
    "file",
    "called",
    "fs",
    "tap",
    "ok",
    "line",
    "entry",
    "swap",
    "space",
    "point",
    "time",
    "enabled",
    "swap",
    "space",
    "line",
    "disable",
    "line",
    "okay",
    "disable",
    "line",
    "commenting",
    "line",
    "let",
    "show",
    "done",
    "using",
    "nano",
    "editor",
    "open",
    "fstab",
    "file",
    "okay",
    "see",
    "land",
    "right",
    "says",
    "swap",
    "file",
    "one",
    "comment",
    "let",
    "come",
    "comment",
    "like",
    "okay",
    "hash",
    "let",
    "save",
    "exit",
    "next",
    "thing",
    "update",
    "host",
    "name",
    "hosts",
    "file",
    "set",
    "static",
    "ip",
    "address",
    "let",
    "get",
    "started",
    "first",
    "updating",
    "hostname",
    "go",
    "file",
    "host",
    "name",
    "path",
    "using",
    "nano",
    "see",
    "director",
    "virtualbox",
    "right",
    "let",
    "replace",
    "say",
    "okay",
    "master",
    "cuba",
    "master",
    "let",
    "save",
    "exit",
    "want",
    "host",
    "name",
    "reflect",
    "right",
    "says",
    "root",
    "rate",
    "oracle",
    "virtualbox",
    "host",
    "name",
    "look",
    "updated",
    "yet",
    "want",
    "updated",
    "k",
    "master",
    "first",
    "restart",
    "vm",
    "system",
    "system",
    "restart",
    "system",
    "vm",
    "restart",
    "vm",
    "okay",
    "let",
    "restart",
    "vm",
    "time",
    "commands",
    "want",
    "run",
    "set",
    "static",
    "ip",
    "address",
    "okay",
    "going",
    "copy",
    "conflict",
    "going",
    "run",
    "config",
    "command",
    "okay",
    "right",
    "ip",
    "address",
    "one",
    "ninety",
    "two",
    "dot",
    "one",
    "sixty",
    "eight",
    "dot",
    "one",
    "next",
    "time",
    "turn",
    "machine",
    "want",
    "different",
    "ip",
    "address",
    "set",
    "static",
    "ip",
    "address",
    "couple",
    "commands",
    "let",
    "execute",
    "command",
    "first",
    "see",
    "interface",
    "file",
    "right",
    "sc",
    "network",
    "file",
    "called",
    "interfaces",
    "define",
    "network",
    "interfaces",
    "let",
    "enter",
    "file",
    "add",
    "rules",
    "make",
    "static",
    "ip",
    "address",
    "see",
    "last",
    "three",
    "lines",
    "ones",
    "ensure",
    "machine",
    "static",
    "ip",
    "address",
    "three",
    "lines",
    "already",
    "machine",
    "want",
    "set",
    "static",
    "ip",
    "address",
    "make",
    "sure",
    "things",
    "defined",
    "correctly",
    "okay",
    "ip",
    "address",
    "one",
    "one",
    "would",
    "read",
    "like",
    "let",
    "exit",
    "next",
    "thing",
    "go",
    "hosts",
    "file",
    "update",
    "ip",
    "address",
    "okay",
    "going",
    "copy",
    "go",
    "etsy",
    "hosts",
    "files",
    "see",
    "entry",
    "mention",
    "mike",
    "master",
    "let",
    "specify",
    "ip",
    "address",
    "first",
    "ip",
    "address",
    "update",
    "name",
    "host",
    "host",
    "kay",
    "master",
    "going",
    "enter",
    "save",
    "okay",
    "thing",
    "restart",
    "machine",
    "let",
    "reset",
    "machine",
    "get",
    "back",
    "meanwhile",
    "okay",
    "back",
    "let",
    "check",
    "host",
    "name",
    "hosts",
    "updated",
    "yes",
    "go",
    "see",
    "right",
    "recorded",
    "k",
    "master",
    "means",
    "host",
    "name",
    "successfully",
    "updated",
    "also",
    "verify",
    "ip",
    "address",
    "let",
    "config",
    "see",
    "appearance",
    "changed",
    "right",
    "good",
    "wanted",
    "let",
    "continue",
    "installation",
    "process",
    "let",
    "clear",
    "screen",
    "go",
    "back",
    "notepad",
    "execute",
    "commands",
    "first",
    "install",
    "openssh",
    "server",
    "going",
    "command",
    "execute",
    "pseudo",
    "user",
    "right",
    "sudo",
    "install",
    "openssh",
    "server",
    "command",
    "okay",
    "let",
    "say",
    "yes",
    "enter",
    "okay",
    "ssh",
    "server",
    "would",
    "installed",
    "makes",
    "clear",
    "screen",
    "install",
    "docker",
    "run",
    "command",
    "installs",
    "dhaka",
    "update",
    "repository",
    "okay",
    "let",
    "log",
    "pseudo",
    "first",
    "fault",
    "okay",
    "use",
    "command",
    "okay",
    "logged",
    "root",
    "user",
    "next",
    "thing",
    "update",
    "repository",
    "update",
    "update",
    "going",
    "take",
    "time",
    "hold",
    "till",
    "okay",
    "also",
    "done",
    "straight",
    "away",
    "run",
    "command",
    "install",
    "docker",
    "command",
    "install",
    "docker",
    "okay",
    "aggregate",
    "repository",
    "installing",
    "docker",
    "specifying",
    "flag",
    "whenever",
    "problem",
    "comes",
    "installation",
    "saying",
    "want",
    "install",
    "yes",
    "specify",
    "means",
    "default",
    "accept",
    "parameter",
    "okay",
    "constant",
    "behind",
    "inserting",
    "dockers",
    "going",
    "take",
    "minutes",
    "hang",
    "till",
    "okay",
    "great",
    "docker",
    "also",
    "installed",
    "okay",
    "let",
    "go",
    "back",
    "notepad",
    "establish",
    "kubernetes",
    "environment",
    "three",
    "main",
    "components",
    "kubernetes",
    "made",
    "rq",
    "barium",
    "cubelet",
    "cube",
    "cereal",
    "install",
    "three",
    "components",
    "things",
    "like",
    "installing",
    "curl",
    "downloading",
    "certain",
    "packages",
    "url",
    "running",
    "update",
    "okay",
    "let",
    "execute",
    "commands",
    "one",
    "first",
    "install",
    "kubernetes",
    "let",
    "first",
    "start",
    "command",
    "installing",
    "curl",
    "okay",
    "next",
    "command",
    "basically",
    "downloading",
    "packages",
    "using",
    "curl",
    "curl",
    "basically",
    "tool",
    "using",
    "download",
    "packages",
    "using",
    "command",
    "line",
    "okay",
    "basically",
    "web",
    "url",
    "right",
    "access",
    "whatever",
    "packages",
    "web",
    "url",
    "download",
    "using",
    "curl",
    "installed",
    "car",
    "first",
    "place",
    "executing",
    "command",
    "get",
    "perfect",
    "go",
    "back",
    "execute",
    "okay",
    "let",
    "hit",
    "enter",
    "done",
    "finally",
    "update",
    "app",
    "get",
    "repository",
    "common",
    "one",
    "update",
    "okay",
    "great",
    "presentation",
    "steps",
    "also",
    "done",
    "say",
    "set",
    "kubernetes",
    "environment",
    "executing",
    "command",
    "command",
    "say",
    "install",
    "cubelet",
    "barium",
    "cube",
    "cdl",
    "avoid",
    "yes",
    "prompt",
    "specifying",
    "wife",
    "lat",
    "okay",
    "would",
    "default",
    "take",
    "yes",
    "parameter",
    "course",
    "taking",
    "aggregate",
    "repository",
    "right",
    "let",
    "copy",
    "paste",
    "give",
    "minutes",
    "guys",
    "sony",
    "kubernetes",
    "going",
    "take",
    "time",
    "okay",
    "bingo",
    "humanities",
    "also",
    "installed",
    "successfully",
    "okay",
    "let",
    "conclude",
    "setting",
    "cube",
    "root",
    "environment",
    "updating",
    "communities",
    "configuration",
    "okay",
    "file",
    "right",
    "q",
    "beta",
    "dot",
    "f",
    "cube",
    "adm",
    "one",
    "going",
    "let",
    "administer",
    "kubernetes",
    "go",
    "file",
    "add",
    "one",
    "line",
    "okay",
    "let",
    "first",
    "open",
    "file",
    "using",
    "nano",
    "editor",
    "let",
    "log",
    "soda",
    "osu",
    "command",
    "see",
    "set",
    "environment",
    "variables",
    "right",
    "last",
    "environment",
    "variable",
    "add",
    "one",
    "line",
    "line",
    "one",
    "right",
    "let",
    "save",
    "exit",
    "brilliant",
    "components",
    "installed",
    "master",
    "slave",
    "come",
    "end",
    "next",
    "run",
    "certain",
    "commands",
    "master",
    "bring",
    "cluster",
    "run",
    "one",
    "command",
    "slaves",
    "join",
    "cluster",
    "alright",
    "start",
    "anything",
    "let",
    "also",
    "tell",
    "already",
    "done",
    "steps",
    "node",
    "end",
    "whatever",
    "steps",
    "done",
    "far",
    "run",
    "set",
    "commands",
    "another",
    "vm",
    "acting",
    "node",
    "v",
    "case",
    "already",
    "done",
    "save",
    "time",
    "know",
    "let",
    "show",
    "mike",
    "master",
    "right",
    "k",
    "node",
    "nothing",
    "communities",
    "node",
    "basically",
    "run",
    "set",
    "commands",
    "places",
    "one",
    "thing",
    "ensure",
    "bring",
    "cluster",
    "short",
    "network",
    "ip",
    "addresses",
    "host",
    "name",
    "hosts",
    "communities",
    "node",
    "going",
    "chat",
    "say",
    "posts",
    "okay",
    "ip",
    "address",
    "cube",
    "ladies",
    "node",
    "machine",
    "specify",
    "name",
    "host",
    "however",
    "name",
    "kubernetes",
    "master",
    "host",
    "present",
    "neither",
    "ip",
    "address",
    "one",
    "manual",
    "entry",
    "remember",
    "let",
    "go",
    "master",
    "check",
    "ip",
    "address",
    "yes",
    "ip",
    "address",
    "one",
    "ninety",
    "two",
    "dot",
    "one",
    "sixty",
    "eight",
    "dot",
    "one",
    "ip",
    "address",
    "add",
    "node",
    "end",
    "modify",
    "file",
    "right",
    "also",
    "ensure",
    "static",
    "ip",
    "address",
    "let",
    "ensure",
    "ip",
    "address",
    "cluster",
    "node",
    "change",
    "first",
    "thing",
    "anything",
    "check",
    "current",
    "ip",
    "address",
    "node",
    "ip",
    "addresses",
    "one",
    "ninety",
    "two",
    "dot",
    "one",
    "sixty",
    "eight",
    "dot",
    "okay",
    "let",
    "run",
    "command",
    "network",
    "interfaces",
    "okay",
    "see",
    "already",
    "set",
    "static",
    "ip",
    "address",
    "ensure",
    "lines",
    "machine",
    "wanted",
    "static",
    "ip",
    "address",
    "since",
    "already",
    "going",
    "make",
    "change",
    "rather",
    "going",
    "go",
    "check",
    "host",
    "name",
    "mean",
    "whole",
    "anyways",
    "give",
    "thing",
    "right",
    "keynote",
    "gon",
    "na",
    "reflect",
    "anyways",
    "let",
    "show",
    "okay",
    "host",
    "name",
    "keynote",
    "brilliant",
    "means",
    "one",
    "thing",
    "change",
    "nothing",
    "adding",
    "particular",
    "entry",
    "master",
    "let",
    "first",
    "clear",
    "screen",
    "using",
    "nano",
    "editor",
    "fact",
    "run",
    "pseudo",
    "pseudo",
    "user",
    "going",
    "open",
    "nano",
    "editor",
    "edit",
    "hosts",
    "file",
    "okay",
    "let",
    "add",
    "ip",
    "address",
    "master",
    "exactly",
    "ip",
    "address",
    "master",
    "yes",
    "k",
    "master",
    "going",
    "copy",
    "ip",
    "address",
    "come",
    "back",
    "paste",
    "ip",
    "address",
    "gon",
    "na",
    "say",
    "name",
    "particular",
    "host",
    "came",
    "master",
    "let",
    "save",
    "perfect",
    "go",
    "back",
    "master",
    "ensure",
    "hosts",
    "file",
    "raised",
    "slave",
    "clear",
    "screen",
    "first",
    "open",
    "hosts",
    "file",
    "masters",
    "entry",
    "master",
    "write",
    "another",
    "line",
    "specify",
    "ip",
    "address",
    "slave",
    "add",
    "name",
    "particular",
    "host",
    "k",
    "node",
    "let",
    "use",
    "nano",
    "editor",
    "purpose",
    "going",
    "say",
    "sudo",
    "nano",
    "posts",
    "okay",
    "going",
    "come",
    "say",
    "one",
    "ninety",
    "two",
    "dot",
    "one",
    "sixty",
    "eight",
    "dot",
    "say",
    "okay",
    "node",
    "right",
    "entries",
    "perfect",
    "going",
    "save",
    "exit",
    "hosts",
    "file",
    "master",
    "slave",
    "updated",
    "static",
    "ip",
    "address",
    "master",
    "slave",
    "updated",
    "also",
    "kubernetes",
    "environment",
    "established",
    "okay",
    "go",
    "bring",
    "cluster",
    "let",
    "restart",
    "updated",
    "hosts",
    "file",
    "okay",
    "let",
    "restart",
    "master",
    "slave",
    "vms",
    "okay",
    "let",
    "say",
    "restart",
    "similarly",
    "let",
    "go",
    "load",
    "restart",
    "okay",
    "logged",
    "systems",
    "restarted",
    "go",
    "ahead",
    "execute",
    "commands",
    "masters",
    "bring",
    "cluster",
    "okay",
    "first",
    "let",
    "go",
    "steps",
    "needed",
    "run",
    "masters",
    "end",
    "add",
    "master",
    "first",
    "run",
    "couple",
    "commands",
    "initiate",
    "kubernetes",
    "cluster",
    "install",
    "pod",
    "network",
    "install",
    "pod",
    "network",
    "containers",
    "inside",
    "single",
    "port",
    "communicate",
    "network",
    "port",
    "nothing",
    "network",
    "containers",
    "various",
    "container",
    "networks",
    "use",
    "use",
    "calico",
    "poor",
    "network",
    "use",
    "flannel",
    "poor",
    "network",
    "use",
    "anyone",
    "see",
    "entire",
    "list",
    "communities",
    "documentation",
    "session",
    "going",
    "use",
    "calcio",
    "network",
    "okay",
    "pretty",
    "simple",
    "straightforward",
    "going",
    "show",
    "next",
    "set",
    "pod",
    "network",
    "straight",
    "away",
    "bring",
    "communities",
    "dashboard",
    "remember",
    "set",
    "communities",
    "dashboard",
    "bring",
    "notes",
    "join",
    "cluster",
    "version",
    "cuba",
    "nettie",
    "first",
    "get",
    "notes",
    "join",
    "cluster",
    "try",
    "bringing",
    "kubernetes",
    "dashboard",
    "communities",
    "dashboard",
    "gets",
    "hosted",
    "want",
    "happen",
    "right",
    "want",
    "dashboard",
    "come",
    "masters",
    "bring",
    "dashboard",
    "nodes",
    "join",
    "cluster",
    "would",
    "three",
    "commands",
    "run",
    "initiating",
    "cluster",
    "inserting",
    "poor",
    "network",
    "setting",
    "kubernetes",
    "dashboard",
    "let",
    "go",
    "master",
    "execute",
    "commands",
    "processes",
    "suppose",
    "master",
    "yes",
    "k",
    "master",
    "first",
    "bring",
    "cluster",
    "execute",
    "command",
    "let",
    "copy",
    "replace",
    "ip",
    "addresses",
    "ip",
    "address",
    "master",
    "right",
    "machine",
    "specified",
    "ip",
    "address",
    "ip",
    "addresses",
    "come",
    "join",
    "master",
    "right",
    "seeing",
    "pi",
    "server",
    "advertise",
    "address",
    "one",
    "nodes",
    "come",
    "join",
    "cluster",
    "ip",
    "address",
    "along",
    "also",
    "specify",
    "port",
    "network",
    "since",
    "chosen",
    "calico",
    "poor",
    "network",
    "network",
    "range",
    "calico",
    "poor",
    "network",
    "uses",
    "cni",
    "basically",
    "stands",
    "container",
    "network",
    "interface",
    "using",
    "calico",
    "poor",
    "network",
    "use",
    "network",
    "range",
    "case",
    "want",
    "use",
    "flannel",
    "poor",
    "network",
    "use",
    "network",
    "range",
    "okay",
    "let",
    "copy",
    "one",
    "paste",
    "right",
    "command",
    "pseudo",
    "cube",
    "adm",
    "network",
    "followed",
    "ip",
    "address",
    "nodes",
    "join",
    "let",
    "go",
    "ahead",
    "enter",
    "since",
    "first",
    "time",
    "give",
    "minutes",
    "kubernetes",
    "take",
    "time",
    "install",
    "hold",
    "happens",
    "right",
    "okay",
    "great",
    "says",
    "kubernetes",
    "master",
    "initialized",
    "successfully",
    "good",
    "news",
    "also",
    "says",
    "start",
    "using",
    "cluster",
    "need",
    "run",
    "following",
    "commands",
    "regular",
    "user",
    "okay",
    "note",
    "log",
    "pseudo",
    "user",
    "regular",
    "user",
    "executes",
    "three",
    "commands",
    "also",
    "deploy",
    "poor",
    "network",
    "run",
    "command",
    "okay",
    "command",
    "run",
    "bring",
    "poor",
    "network",
    "basically",
    "cloning",
    "yamen",
    "file",
    "present",
    "get",
    "things",
    "let",
    "show",
    "cube",
    "joint",
    "command",
    "generated",
    "right",
    "generated",
    "masters",
    "execute",
    "command",
    "node",
    "join",
    "cluster",
    "would",
    "last",
    "step",
    "like",
    "said",
    "earlier",
    "three",
    "commands",
    "first",
    "executed",
    "bring",
    "poor",
    "network",
    "bring",
    "dashboard",
    "get",
    "notes",
    "join",
    "class",
    "using",
    "command",
    "reference",
    "going",
    "copy",
    "command",
    "store",
    "somewhere",
    "else",
    "okay",
    "right",
    "let",
    "command",
    "later",
    "reference",
    "meanwhile",
    "let",
    "go",
    "ahead",
    "execute",
    "commands",
    "one",
    "per",
    "cube",
    "entities",
    "instructions",
    "right",
    "yes",
    "would",
    "like",
    "rewrite",
    "okay",
    "done",
    "let",
    "first",
    "bring",
    "pod",
    "network",
    "okay",
    "command",
    "bring",
    "pod",
    "network",
    "perfect",
    "calcio",
    "pod",
    "created",
    "verify",
    "poor",
    "created",
    "running",
    "cube",
    "cdl",
    "get",
    "pods",
    "command",
    "okay",
    "cube",
    "serial",
    "get",
    "pods",
    "say",
    "oh",
    "wide",
    "namespaces",
    "okay",
    "specifying",
    "oh",
    "wide",
    "namespaces",
    "basically",
    "get",
    "pods",
    "ever",
    "deployed",
    "even",
    "default",
    "pose",
    "get",
    "deployed",
    "kubernetes",
    "cluster",
    "initiates",
    "basically",
    "kubernetes",
    "cluster",
    "initiated",
    "deployed",
    "along",
    "default",
    "ones",
    "especially",
    "poor",
    "network",
    "one",
    "part",
    "hosted",
    "cluster",
    "one",
    "pod",
    "rocker",
    "board",
    "one",
    "pot",
    "deployed",
    "dashboard",
    "whatnot",
    "entire",
    "list",
    "right",
    "calcio",
    "sed",
    "one",
    "pod",
    "cube",
    "controller",
    "pot",
    "various",
    "spots",
    "like",
    "right",
    "master",
    "pi",
    "server",
    "many",
    "things",
    "default",
    "deployments",
    "get",
    "anyways",
    "see",
    "default",
    "deployments",
    "healthy",
    "says",
    "status",
    "running",
    "everything",
    "basically",
    "running",
    "cube",
    "system",
    "namespace",
    "right",
    "running",
    "k",
    "master",
    "mike",
    "unit",
    "master",
    "next",
    "thing",
    "bring",
    "dashboard",
    "get",
    "notes",
    "join",
    "okay",
    "go",
    "notepad",
    "copy",
    "command",
    "bring",
    "dashboard",
    "copy",
    "paste",
    "great",
    "communities",
    "dashboard",
    "know",
    "basically",
    "part",
    "come",
    "execute",
    "cube",
    "serial",
    "get",
    "pods",
    "command",
    "see",
    "got",
    "one",
    "pot",
    "deployed",
    "dashboard",
    "basically",
    "last",
    "time",
    "deployed",
    "dashboard",
    "time",
    "right",
    "need",
    "plug",
    "ipod",
    "network",
    "whatnot",
    "things",
    "right",
    "deployed",
    "continuous",
    "creating",
    "probably",
    "seconds",
    "would",
    "also",
    "running",
    "anyways",
    "meanwhile",
    "work",
    "things",
    "needed",
    "bring",
    "dashboard",
    "first",
    "fall",
    "abel",
    "proxy",
    "get",
    "hope",
    "web",
    "server",
    "skip",
    "serial",
    "proxy",
    "command",
    "okay",
    "service",
    "would",
    "starting",
    "served",
    "particular",
    "port",
    "number",
    "okay",
    "localhost",
    "port",
    "number",
    "eight",
    "thousand",
    "one",
    "master",
    "okay",
    "nodes",
    "could",
    "go",
    "firefox",
    "go",
    "local",
    "lowe",
    "8001",
    "dad",
    "would",
    "running",
    "basically",
    "dashboard",
    "served",
    "particular",
    "port",
    "number",
    "want",
    "actually",
    "get",
    "dashboard",
    "shows",
    "deployments",
    "services",
    "different",
    "url",
    "okay",
    "yeah",
    "see",
    "localized",
    "api",
    "slash",
    "v",
    "1",
    "right",
    "entire",
    "url",
    "going",
    "lead",
    "dashboard",
    "point",
    "time",
    "log",
    "dashboard",
    "prompting",
    "token",
    "token",
    "done",
    "cluster",
    "old",
    "binding",
    "mentioned",
    "admin",
    "particular",
    "dashboard",
    "enable",
    "things",
    "commands",
    "execute",
    "starting",
    "creating",
    "service",
    "account",
    "dashboard",
    "command",
    "create",
    "service",
    "account",
    "go",
    "back",
    "terminal",
    "probably",
    "new",
    "terminal",
    "window",
    "execute",
    "command",
    "okay",
    "creating",
    "service",
    "account",
    "dashboard",
    "cluster",
    "roll",
    "binding",
    "newly",
    "created",
    "service",
    "account",
    "okay",
    "dashboard",
    "created",
    "default",
    "namespace",
    "per",
    "okay",
    "saying",
    "dashboard",
    "going",
    "admin",
    "cross",
    "road",
    "binding",
    "okay",
    "created",
    "straight",
    "away",
    "get",
    "token",
    "remember",
    "asking",
    "token",
    "login",
    "right",
    "even",
    "though",
    "admin",
    "able",
    "log",
    "without",
    "token",
    "generate",
    "token",
    "run",
    "command",
    "cube",
    "city",
    "get",
    "secret",
    "key",
    "okay",
    "going",
    "copy",
    "paste",
    "token",
    "key",
    "basically",
    "needs",
    "used",
    "let",
    "copy",
    "entire",
    "token",
    "paste",
    "let",
    "save",
    "yeah",
    "see",
    "community",
    "cluster",
    "set",
    "see",
    "thing",
    "dashboard",
    "basically",
    "default",
    "communities",
    "service",
    "deployed",
    "right",
    "see",
    "brought",
    "dashboard",
    "cluster",
    "ready",
    "nodes",
    "join",
    "let",
    "go",
    "final",
    "part",
    "demonstration",
    "ask",
    "slaves",
    "join",
    "cluster",
    "remember",
    "copied",
    "joint",
    "cluster",
    "generated",
    "master",
    "end",
    "notepad",
    "going",
    "copy",
    "execute",
    "slaves",
    "join",
    "cluster",
    "okay",
    "let",
    "first",
    "go",
    "notepad",
    "yeah",
    "joint",
    "command",
    "copyright",
    "going",
    "copy",
    "going",
    "go",
    "node",
    "yep",
    "let",
    "paste",
    "let",
    "see",
    "happens",
    "let",
    "run",
    "command",
    "pseudo",
    "perfect",
    "got",
    "message",
    "successfully",
    "established",
    "connection",
    "api",
    "server",
    "particular",
    "ip",
    "address",
    "port",
    "number",
    "right",
    "means",
    "node",
    "joined",
    "cluster",
    "verify",
    "dashboard",
    "go",
    "back",
    "dashboard",
    "hosted",
    "master",
    "master",
    "zen",
    "option",
    "nodes",
    "click",
    "get",
    "details",
    "nodes",
    "earlier",
    "keymaster",
    "key",
    "master",
    "k",
    "node",
    "give",
    "seconds",
    "note",
    "comes",
    "also",
    "verify",
    "terminal",
    "go",
    "terminal",
    "run",
    "command",
    "cube",
    "ctl",
    "get",
    "nodes",
    "give",
    "details",
    "nodes",
    "cluster",
    "soak",
    "master",
    "one",
    "already",
    "cluster",
    "however",
    "take",
    "time",
    "join",
    "cluster",
    "alright",
    "guys",
    "deployment",
    "deploy",
    "community",
    "cluster",
    "whatever",
    "deployment",
    "want",
    "whatever",
    "want",
    "deploy",
    "deploy",
    "easily",
    "effectively",
    "either",
    "dashboard",
    "cli",
    "various",
    "video",
    "tutorials",
    "refer",
    "see",
    "deployment",
    "made",
    "kubernetes",
    "would",
    "request",
    "go",
    "videos",
    "see",
    "deployment",
    "made",
    "would",
    "like",
    "conclude",
    "video",
    "note",
    "devops",
    "guy",
    "would",
    "definitely",
    "heard",
    "communities",
    "think",
    "devops",
    "world",
    "knows",
    "enough",
    "exactly",
    "kubernetes",
    "used",
    "erica",
    "come",
    "video",
    "communities",
    "name",
    "walden",
    "representing",
    "tárrega",
    "video",
    "see",
    "screen",
    "topics",
    "covering",
    "today",
    "session",
    "first",
    "start",
    "talking",
    "need",
    "communities",
    "talk",
    "exactly",
    "lot",
    "myths",
    "surrounding",
    "communities",
    "lot",
    "confusion",
    "people",
    "misunderstood",
    "communities",
    "containerization",
    "platform",
    "well",
    "okay",
    "explain",
    "exactly",
    "talk",
    "exactly",
    "communities",
    "works",
    "talk",
    "architecture",
    "related",
    "things",
    "give",
    "use",
    "case",
    "tell",
    "communities",
    "used",
    "pokemon",
    "go",
    "helped",
    "pokemon",
    "go",
    "become",
    "one",
    "best",
    "games",
    "year",
    "2017",
    "finally",
    "end",
    "video",
    "get",
    "demonstration",
    "deployment",
    "kubernetes",
    "okay",
    "think",
    "agenda",
    "pretty",
    "clear",
    "think",
    "get",
    "started",
    "first",
    "topic",
    "first",
    "topic",
    "need",
    "kubernetes",
    "okay",
    "understand",
    "need",
    "cuba",
    "nettie",
    "let",
    "understand",
    "benefits",
    "drawbacks",
    "containers",
    "first",
    "containers",
    "good",
    "amazingly",
    "good",
    "right",
    "container",
    "matter",
    "fact",
    "linux",
    "container",
    "docker",
    "container",
    "even",
    "rocket",
    "continuum",
    "right",
    "one",
    "thing",
    "package",
    "application",
    "isolated",
    "everything",
    "else",
    "right",
    "isolate",
    "application",
    "host",
    "mainly",
    "makes",
    "container",
    "fast",
    "reliable",
    "efficient",
    "light",
    "weight",
    "scalable",
    "hold",
    "thought",
    "yes",
    "containers",
    "scalable",
    "problem",
    "comes",
    "resultant",
    "need",
    "kubernetes",
    "even",
    "though",
    "continues",
    "scalable",
    "easily",
    "scalable",
    "okay",
    "let",
    "look",
    "way",
    "one",
    "container",
    "might",
    "want",
    "probably",
    "scale",
    "contain",
    "three",
    "containers",
    "possible",
    "right",
    "going",
    "take",
    "little",
    "bit",
    "manual",
    "effort",
    "yeah",
    "scale",
    "know",
    "problem",
    "look",
    "real",
    "world",
    "scenario",
    "might",
    "want",
    "scale",
    "like",
    "5200",
    "containers",
    "case",
    "happens",
    "mean",
    "scaling",
    "would",
    "manage",
    "containers",
    "right",
    "make",
    "sure",
    "working",
    "active",
    "talking",
    "talking",
    "point",
    "scaling",
    "case",
    "server",
    "would",
    "able",
    "handle",
    "roads",
    "able",
    "talk",
    "correct",
    "really",
    "important",
    "manageable",
    "scaled",
    "let",
    "talk",
    "point",
    "really",
    "tough",
    "scale",
    "containers",
    "well",
    "answer",
    "might",
    "know",
    "might",
    "tough",
    "pretty",
    "easy",
    "scale",
    "containers",
    "problem",
    "happens",
    "okay",
    "scale",
    "containers",
    "lot",
    "problems",
    "like",
    "told",
    "containers",
    "first",
    "communicate",
    "many",
    "number",
    "work",
    "together",
    "basically",
    "host",
    "service",
    "right",
    "application",
    "working",
    "together",
    "talking",
    "together",
    "application",
    "hosted",
    "scaling",
    "waste",
    "number",
    "one",
    "reason",
    "next",
    "containers",
    "deployed",
    "appropriately",
    "also",
    "managed",
    "deployed",
    "appropriately",
    "containers",
    "deployed",
    "random",
    "places",
    "deploy",
    "right",
    "places",
    "one",
    "container",
    "one",
    "particular",
    "cloud",
    "one",
    "somewhere",
    "else",
    "would",
    "lot",
    "complications",
    "well",
    "course",
    "possible",
    "yeah",
    "would",
    "lead",
    "lot",
    "complications",
    "internally",
    "want",
    "avoid",
    "one",
    "place",
    "everything",
    "deployed",
    "appropriately",
    "make",
    "sure",
    "ip",
    "addresses",
    "set",
    "everywhere",
    "port",
    "numbers",
    "open",
    "containers",
    "talk",
    "things",
    "right",
    "two",
    "points",
    "next",
    "point",
    "next",
    "problem",
    "scaling",
    "auto",
    "scaling",
    "never",
    "functionality",
    "okay",
    "one",
    "things",
    "biggest",
    "benefit",
    "cuba",
    "nets",
    "problem",
    "technically",
    "auto",
    "scaling",
    "functionality",
    "okay",
    "concept",
    "may",
    "ask",
    "point",
    "time",
    "even",
    "need",
    "okay",
    "let",
    "explain",
    "need",
    "auto",
    "scaling",
    "example",
    "let",
    "say",
    "portal",
    "okay",
    "something",
    "like",
    "amazon",
    "flip",
    "card",
    "let",
    "say",
    "decent",
    "amount",
    "traffic",
    "weekdays",
    "weekends",
    "spike",
    "traffic",
    "probably",
    "like",
    "4x",
    "5x",
    "usual",
    "traffic",
    "case",
    "happens",
    "maybe",
    "servers",
    "good",
    "enough",
    "handle",
    "requests",
    "coming",
    "weekdays",
    "right",
    "requests",
    "come",
    "weekends",
    "right",
    "increased",
    "traffic",
    "serviced",
    "servers",
    "right",
    "maybe",
    "much",
    "servers",
    "handle",
    "load",
    "maybe",
    "short",
    "term",
    "fine",
    "maybe",
    "twice",
    "survive",
    "definitely",
    "come",
    "time",
    "server",
    "start",
    "crashing",
    "handle",
    "many",
    "requests",
    "per",
    "second",
    "permanent",
    "want",
    "really",
    "avoid",
    "problem",
    "scale",
    "would",
    "lead",
    "keep",
    "scaling",
    "every",
    "weekend",
    "scaling",
    "weekend",
    "right",
    "mean",
    "technically",
    "possible",
    "buying",
    "servers",
    "setting",
    "every",
    "friday",
    "would",
    "new",
    "star",
    "wars",
    "setting",
    "infrastructure",
    "moment",
    "weekday",
    "starts",
    "would",
    "destroy",
    "servers",
    "whatever",
    "build",
    "would",
    "would",
    "right",
    "obviously",
    "pretty",
    "tedious",
    "task",
    "something",
    "like",
    "cuban",
    "aires",
    "comes",
    "communities",
    "keeps",
    "analyzing",
    "traffic",
    "load",
    "used",
    "container",
    "traffic",
    "reaching",
    "threshold",
    "happens",
    "server",
    "lot",
    "traffic",
    "needs",
    "servers",
    "handling",
    "requests",
    "starts",
    "killing",
    "containers",
    "manual",
    "intervention",
    "needed",
    "one",
    "benefit",
    "kubernetes",
    "one",
    "traditional",
    "problem",
    "scaling",
    "containers",
    "okay",
    "yeah",
    "one",
    "last",
    "problem",
    "distribution",
    "traffic",
    "still",
    "challenging",
    "without",
    "something",
    "manage",
    "containers",
    "mean",
    "many",
    "containers",
    "traffic",
    "distributed",
    "load",
    "balancing",
    "happen",
    "containers",
    "right",
    "50",
    "containers",
    "load",
    "balancing",
    "happen",
    "questions",
    "really",
    "consider",
    "containerization",
    "good",
    "cool",
    "much",
    "better",
    "vms",
    "yes",
    "containerization",
    "basically",
    "concept",
    "sold",
    "basis",
    "scaling",
    "right",
    "said",
    "vm",
    "scaled",
    "easily",
    "told",
    "use",
    "containers",
    "containers",
    "easily",
    "scale",
    "whole",
    "reason",
    "basically",
    "sold",
    "containers",
    "tagline",
    "scaling",
    "today",
    "world",
    "demand",
    "ever",
    "even",
    "regular",
    "containers",
    "enough",
    "scaling",
    "much",
    "detailed",
    "need",
    "something",
    "else",
    "manage",
    "containers",
    "correct",
    "agree",
    "need",
    "something",
    "right",
    "exactly",
    "cuban",
    "aries",
    "kubernetes",
    "container",
    "management",
    "tool",
    "right",
    "open",
    "source",
    "basically",
    "automate",
    "container",
    "deployment",
    "continue",
    "scaling",
    "descaling",
    "continual",
    "load",
    "balancing",
    "benefit",
    "works",
    "brilliantly",
    "cloud",
    "vendors",
    "big",
    "cloud",
    "vendors",
    "hybrid",
    "cloud",
    "vendors",
    "also",
    "works",
    "isis",
    "one",
    "big",
    "selling",
    "point",
    "kubernetes",
    "right",
    "give",
    "information",
    "communities",
    "let",
    "tell",
    "google",
    "developed",
    "product",
    "okay",
    "basically",
    "brainchild",
    "google",
    "pretty",
    "much",
    "end",
    "story",
    "every",
    "competitor",
    "community",
    "google",
    "brings",
    "along",
    "going",
    "huge",
    "basically",
    "head",
    "start",
    "communities",
    "would",
    "get",
    "google",
    "brain",
    "child",
    "humongous",
    "one",
    "reasons",
    "kubernetes",
    "one",
    "best",
    "container",
    "management",
    "tools",
    "market",
    "period",
    "given",
    "communities",
    "google",
    "product",
    "written",
    "whole",
    "product",
    "go",
    "language",
    "course",
    "google",
    "contributed",
    "whole",
    "communities",
    "project",
    "cn",
    "cf",
    "nothing",
    "cloud",
    "native",
    "computing",
    "foundation",
    "simply",
    "cloud",
    "native",
    "foundation",
    "right",
    "call",
    "either",
    "donated",
    "open",
    "source",
    "project",
    "summarize",
    "humanities",
    "think",
    "like",
    "group",
    "like",
    "number",
    "containers",
    "one",
    "logical",
    "unit",
    "managing",
    "deploying",
    "application",
    "particular",
    "service",
    "simple",
    "definition",
    "communities",
    "easily",
    "used",
    "deploying",
    "application",
    "course",
    "going",
    "docker",
    "containers",
    "deploying",
    "since",
    "using",
    "lot",
    "docker",
    "containers",
    "part",
    "production",
    "also",
    "use",
    "kubernetes",
    "managing",
    "multiple",
    "docker",
    "containers",
    "right",
    "role",
    "plays",
    "terms",
    "deployment",
    "scaling",
    "upskilling",
    "primarily",
    "game",
    "communities",
    "existing",
    "architecture",
    "scale",
    "number",
    "want",
    "scale",
    "anytime",
    "best",
    "part",
    "scaling",
    "also",
    "set",
    "automatic",
    "like",
    "explained",
    "time",
    "back",
    "right",
    "make",
    "communities",
    "communities",
    "would",
    "analyze",
    "traffic",
    "figure",
    "scaling",
    "needs",
    "done",
    "skilling",
    "noun",
    "done",
    "things",
    "course",
    "important",
    "part",
    "load",
    "balancing",
    "right",
    "mean",
    "good",
    "container",
    "group",
    "containers",
    "load",
    "balancing",
    "enabled",
    "right",
    "communities",
    "also",
    "points",
    "based",
    "kubernetes",
    "built",
    "pretty",
    "sure",
    "got",
    "good",
    "understanding",
    "communities",
    "write",
    "brief",
    "idea",
    "least",
    "moving",
    "forward",
    "let",
    "look",
    "features",
    "kubernetes",
    "okay",
    "seen",
    "exactly",
    "kubernetes",
    "would",
    "users",
    "docker",
    "containers",
    "connector",
    "containers",
    "general",
    "let",
    "see",
    "selling",
    "points",
    "humanities",
    "must",
    "let",
    "start",
    "automatic",
    "bin",
    "packing",
    "say",
    "automatic",
    "bin",
    "packing",
    "basically",
    "communities",
    "packages",
    "application",
    "automatically",
    "places",
    "containers",
    "based",
    "requirements",
    "resources",
    "available",
    "number",
    "one",
    "advantage",
    "second",
    "thing",
    "service",
    "discovery",
    "load",
    "balancing",
    "need",
    "worry",
    "mean",
    "know",
    "going",
    "use",
    "kubernetes",
    "worry",
    "networking",
    "communication",
    "communities",
    "automatically",
    "assign",
    "containers",
    "ip",
    "addresses",
    "probably",
    "single",
    "dns",
    "name",
    "set",
    "containers",
    "performing",
    "logical",
    "operation",
    "course",
    "loads",
    "dancing",
    "across",
    "worry",
    "things",
    "say",
    "service",
    "discovery",
    "load",
    "balancing",
    "kubernetes",
    "third",
    "feature",
    "kubernetes",
    "storage",
    "orchestration",
    "communities",
    "automatically",
    "mount",
    "storage",
    "system",
    "choice",
    "choose",
    "either",
    "local",
    "storage",
    "maybe",
    "public",
    "cloud",
    "providers",
    "gcp",
    "aws",
    "even",
    "network",
    "storage",
    "system",
    "nfs",
    "things",
    "right",
    "feature",
    "number",
    "three",
    "please",
    "remember",
    "one",
    "favorite",
    "parts",
    "humanity",
    "actually",
    "communities",
    "even",
    "respect",
    "swamp",
    "really",
    "like",
    "part",
    "self",
    "feeling",
    "whenever",
    "kubernetes",
    "realizes",
    "one",
    "containers",
    "failed",
    "restart",
    "container",
    "right",
    "create",
    "new",
    "container",
    "place",
    "crashed",
    "one",
    "case",
    "node",
    "fails",
    "bilities",
    "would",
    "case",
    "whatever",
    "containers",
    "running",
    "failed",
    "node",
    "containers",
    "would",
    "started",
    "another",
    "node",
    "right",
    "course",
    "would",
    "cluster",
    "another",
    "node",
    "cluster",
    "definitely",
    "room",
    "would",
    "made",
    "field",
    "container",
    "start",
    "service",
    "happens",
    "next",
    "feature",
    "batch",
    "execution",
    "say",
    "batch",
    "execution",
    "along",
    "services",
    "humanities",
    "also",
    "manage",
    "batch",
    "cia",
    "work",
    "loads",
    "devops",
    "roll",
    "right",
    "part",
    "cia",
    "workloads",
    "communities",
    "replace",
    "containers",
    "fail",
    "restart",
    "restore",
    "original",
    "state",
    "possible",
    "kubernetes",
    "secret",
    "configuration",
    "management",
    "another",
    "big",
    "feature",
    "kubernetes",
    "concept",
    "deploy",
    "update",
    "secrets",
    "application",
    "configuration",
    "without",
    "rebuild",
    "entire",
    "image",
    "without",
    "expose",
    "secrets",
    "stack",
    "configuration",
    "anything",
    "right",
    "want",
    "deploy",
    "update",
    "secrets",
    "done",
    "available",
    "tools",
    "right",
    "communities",
    "one",
    "restart",
    "everything",
    "rebuild",
    "entire",
    "container",
    "one",
    "benefit",
    "horizonte",
    "scaling",
    "course",
    "already",
    "scale",
    "applications",
    "easily",
    "simple",
    "command",
    "simple",
    "command",
    "run",
    "cli",
    "easily",
    "gui",
    "dashboard",
    "community",
    "dashboard",
    "auto",
    "scaling",
    "possible",
    "right",
    "based",
    "cpu",
    "usage",
    "containers",
    "would",
    "automatically",
    "scaled",
    "scaled",
    "one",
    "feature",
    "fun",
    "feature",
    "automatic",
    "rollbacks",
    "roll",
    "outs",
    "kubernetes",
    "whenever",
    "update",
    "application",
    "want",
    "release",
    "communities",
    "progressively",
    "rolls",
    "changes",
    "updates",
    "application",
    "complications",
    "ensuring",
    "one",
    "instance",
    "send",
    "updates",
    "makes",
    "sure",
    "instances",
    "updated",
    "time",
    "thus",
    "ensuring",
    "yes",
    "high",
    "availability",
    "even",
    "something",
    "goes",
    "wrong",
    "cuban",
    "ladies",
    "roll",
    "back",
    "change",
    "things",
    "enabled",
    "features",
    "humanities",
    "really",
    "considering",
    "solution",
    "containers",
    "managing",
    "containers",
    "communities",
    "solution",
    "answer",
    "various",
    "features",
    "kubernetes",
    "moving",
    "forward",
    "let",
    "talk",
    "myths",
    "surrounding",
    "communities",
    "lot",
    "people",
    "confusion",
    "respect",
    "exactly",
    "people",
    "misunderstanding",
    "communities",
    "like",
    "docker",
    "continuation",
    "platform",
    "right",
    "people",
    "think",
    "true",
    "kind",
    "confusion",
    "intend",
    "solve",
    "upcoming",
    "slides",
    "talk",
    "exactly",
    "kubernetes",
    "communities",
    "let",
    "start",
    "first",
    "thing",
    "communities",
    "compared",
    "docker",
    "right",
    "set",
    "parameters",
    "comparing",
    "docker",
    "containerization",
    "platform",
    "kubernetes",
    "container",
    "management",
    "platform",
    "means",
    "containerized",
    "application",
    "help",
    "docker",
    "containers",
    "linux",
    "containers",
    "scaling",
    "containers",
    "big",
    "number",
    "like",
    "50",
    "hundred",
    "communities",
    "would",
    "come",
    "like",
    "multiple",
    "containers",
    "need",
    "managed",
    "communities",
    "comment",
    "effectively",
    "specify",
    "configurations",
    "communities",
    "would",
    "make",
    "sure",
    "times",
    "conditions",
    "satisfied",
    "community",
    "tell",
    "configurations",
    "time",
    "want",
    "many",
    "containers",
    "running",
    "want",
    "many",
    "pods",
    "running",
    "many",
    "needs",
    "right",
    "specify",
    "much",
    "whatever",
    "times",
    "cluster",
    "master",
    "communities",
    "master",
    "would",
    "ensure",
    "condition",
    "satisfied",
    "exactly",
    "community",
    "mean",
    "talker",
    "solve",
    "purpose",
    "docker",
    "also",
    "would",
    "call",
    "actually",
    "another",
    "tool",
    "something",
    "called",
    "docker",
    "swamp",
    "dockers",
    "warm",
    "similar",
    "thing",
    "contain",
    "management",
    "like",
    "mass",
    "container",
    "management",
    "similar",
    "communities",
    "like",
    "50",
    "100",
    "containers",
    "docker",
    "swarm",
    "would",
    "help",
    "managing",
    "containers",
    "look",
    "prevailing",
    "market",
    "today",
    "would",
    "say",
    "communities",
    "communities",
    "came",
    "first",
    "moment",
    "came",
    "backed",
    "google",
    "huge",
    "community",
    "swept",
    "along",
    "like",
    "hardly",
    "left",
    "market",
    "docker",
    "stromm",
    "mean",
    "better",
    "docker",
    "end",
    "day",
    "using",
    "docker",
    "communities",
    "good",
    "docker",
    "docker",
    "containers",
    "need",
    "communities",
    "first",
    "place",
    "cuban",
    "adiz",
    "docker",
    "go",
    "hand",
    "hand",
    "okay",
    "point",
    "note",
    "think",
    "would",
    "also",
    "explain",
    "point",
    "kubernetes",
    "continue",
    "rising",
    "applications",
    "right",
    "last",
    "thing",
    "kubernetes",
    "applications",
    "simple",
    "architecture",
    "okay",
    "architecture",
    "review",
    "applications",
    "architecture",
    "pretty",
    "complex",
    "probably",
    "use",
    "cuban",
    "ids",
    "uncomplicate",
    "architecture",
    "okay",
    "simple",
    "one",
    "first",
    "place",
    "using",
    "kubernetes",
    "would",
    "serve",
    "good",
    "could",
    "probably",
    "make",
    "little",
    "complicated",
    "already",
    "right",
    "kubernetes",
    "speaking",
    "exactly",
    "kubernetes",
    "first",
    "point",
    "kubernetes",
    "robust",
    "reliable",
    "see",
    "robust",
    "reliable",
    "referring",
    "fact",
    "cluster",
    "created",
    "communities",
    "cluster",
    "right",
    "strong",
    "rigid",
    "going",
    "broken",
    "easily",
    "reason",
    "configurations",
    "specified",
    "right",
    "point",
    "time",
    "container",
    "fails",
    "new",
    "container",
    "would",
    "come",
    "right",
    "whole",
    "container",
    "would",
    "restarted",
    "one",
    "things",
    "definitely",
    "happen",
    "node",
    "fails",
    "containers",
    "running",
    "particular",
    "node",
    "would",
    "start",
    "running",
    "different",
    "node",
    "right",
    "reliable",
    "strong",
    "point",
    "time",
    "cluster",
    "would",
    "full",
    "force",
    "time",
    "happening",
    "would",
    "able",
    "see",
    "something",
    "wrong",
    "troubleshoot",
    "node",
    "everything",
    "would",
    "fine",
    "cuban",
    "would",
    "everything",
    "possible",
    "pretty",
    "much",
    "everything",
    "possible",
    "let",
    "us",
    "know",
    "problem",
    "end",
    "giving",
    "exact",
    "result",
    "want",
    "communities",
    "next",
    "thing",
    "humanity",
    "actually",
    "best",
    "solution",
    "scaling",
    "containers",
    "least",
    "today",
    "could",
    "two",
    "biggest",
    "players",
    "market",
    "radhika",
    "swamp",
    "humanities",
    "docker",
    "swarm",
    "really",
    "better",
    "one",
    "came",
    "little",
    "late",
    "even",
    "though",
    "doctor",
    "beginning",
    "communities",
    "came",
    "doc",
    "swarm",
    "talking",
    "came",
    "somewhere",
    "around",
    "2016",
    "right",
    "communities",
    "came",
    "somewhere",
    "around",
    "2015",
    "good",
    "head",
    "start",
    "first",
    "ones",
    "backing",
    "google",
    "icing",
    "cake",
    "whatever",
    "problem",
    "respect",
    "containers",
    "go",
    "put",
    "error",
    "lot",
    "people",
    "get",
    "queries",
    "stack",
    "overflow",
    "resolving",
    "errors",
    "right",
    "kind",
    "market",
    "back",
    "really",
    "huge",
    "community",
    "kubernetes",
    "conclude",
    "slide",
    "humanities",
    "container",
    "orchestration",
    "platform",
    "nothing",
    "else",
    "right",
    "think",
    "two",
    "slides",
    "would",
    "given",
    "information",
    "clarity",
    "respect",
    "kubernetes",
    "different",
    "docker",
    "docker",
    "swamp",
    "right",
    "moving",
    "let",
    "go",
    "next",
    "topic",
    "compare",
    "humanities",
    "daca",
    "swamp",
    "comparing",
    "docker",
    "swamp",
    "compare",
    "docker",
    "kubernetes",
    "head",
    "okay",
    "understand",
    "person",
    "sam",
    "wondering",
    "right",
    "comparison",
    "let",
    "reassure",
    "difference",
    "humanities",
    "doctors",
    "mom",
    "okay",
    "let",
    "go",
    "ahead",
    "see",
    "difference",
    "actually",
    "let",
    "start",
    "installation",
    "configuration",
    "okay",
    "first",
    "parameter",
    "use",
    "compare",
    "two",
    "doc",
    "swarm",
    "comes",
    "top",
    "dockers",
    "little",
    "easier",
    "around",
    "two",
    "three",
    "commands",
    "help",
    "cluster",
    "running",
    "includes",
    "node",
    "joining",
    "cluster",
    "right",
    "kubernetes",
    "way",
    "complicated",
    "talking",
    "swamp",
    "right",
    "like",
    "close",
    "ten",
    "eleven",
    "commands",
    "execute",
    "certain",
    "pattern",
    "follow",
    "ensure",
    "errors",
    "right",
    "yes",
    "consuming",
    "complicated",
    "cluster",
    "ready",
    "time",
    "kubernetes",
    "winner",
    "flexibility",
    "rigidness",
    "robustness",
    "communities",
    "gives",
    "offered",
    "swamp",
    "yes",
    "storm",
    "faster",
    "yes",
    "good",
    "communities",
    "comes",
    "actual",
    "working",
    "speaking",
    "gui",
    "set",
    "cluster",
    "use",
    "goi",
    "communities",
    "deploying",
    "applications",
    "right",
    "need",
    "always",
    "use",
    "cli",
    "dashboard",
    "comes",
    "dashboard",
    "give",
    "admin",
    "privileges",
    "use",
    "deploy",
    "application",
    "dashboard",
    "everything",
    "click",
    "functionality",
    "right",
    "click",
    "functionality",
    "case",
    "docker",
    "swarm",
    "gui",
    "dhaka",
    "swamp",
    "okay",
    "doc",
    "islam",
    "winner",
    "kubernetes",
    "going",
    "third",
    "parameter",
    "scalability",
    "people",
    "bad",
    "misconception",
    "communities",
    "better",
    "solution",
    "scaling",
    "better",
    "faster",
    "stromm",
    "well",
    "could",
    "better",
    "yes",
    "faster",
    "doctors",
    "warm",
    "even",
    "want",
    "scale",
    "right",
    "report",
    "recently",
    "read",
    "scaling",
    "dhaka",
    "swarm",
    "almost",
    "five",
    "times",
    "faster",
    "scaling",
    "kubernetes",
    "difference",
    "yes",
    "scaling",
    "done",
    "cluster",
    "strength",
    "kubernetes",
    "going",
    "much",
    "stronger",
    "doctor",
    "swamp",
    "plus",
    "strength",
    "various",
    "configurations",
    "specified",
    "thing",
    "moving",
    "next",
    "parameter",
    "load",
    "balancing",
    "requires",
    "manual",
    "service",
    "configuration",
    "okay",
    "case",
    "kubernetes",
    "yes",
    "could",
    "shortfall",
    "storm",
    "inbuilt",
    "load",
    "balancing",
    "techniques",
    "need",
    "worry",
    "okay",
    "even",
    "load",
    "balancing",
    "requires",
    "manual",
    "effort",
    "case",
    "communities",
    "much",
    "times",
    "manually",
    "specify",
    "configuration",
    "make",
    "changes",
    "yes",
    "much",
    "thinking",
    "speaking",
    "updates",
    "rollbacks",
    "communities",
    "scheduling",
    "maintain",
    "services",
    "updating",
    "okay",
    "yeah",
    "similar",
    "works",
    "darkness",
    "form",
    "wherein",
    "like",
    "progressive",
    "updates",
    "service",
    "health",
    "monitoring",
    "happens",
    "throughout",
    "update",
    "difference",
    "something",
    "goes",
    "wrong",
    "humanity",
    "goes",
    "extra",
    "mile",
    "roll",
    "back",
    "putting",
    "back",
    "previous",
    "state",
    "right",
    "update",
    "launched",
    "thing",
    "kubernetes",
    "next",
    "parameter",
    "comparing",
    "two",
    "upon",
    "data",
    "volumes",
    "data",
    "volumes",
    "cuba",
    "nattie",
    "shared",
    "containers",
    "within",
    "pod",
    "concept",
    "called",
    "pods",
    "communities",
    "okay",
    "board",
    "nothing",
    "something",
    "groups",
    "related",
    "containers",
    "right",
    "logical",
    "grouping",
    "containers",
    "together",
    "pot",
    "whichever",
    "containers",
    "inside",
    "pod",
    "shared",
    "volume",
    "okay",
    "like",
    "storage",
    "volume",
    "case",
    "doctors",
    "concept",
    "poor",
    "shared",
    "volumes",
    "container",
    "restriction",
    "respect",
    "swann",
    "finally",
    "logging",
    "monitoring",
    "comes",
    "logging",
    "monitoring",
    "humanities",
    "provides",
    "inbuilt",
    "tools",
    "purpose",
    "okay",
    "storm",
    "install",
    "tools",
    "want",
    "logging",
    "monitoring",
    "fall",
    "backward",
    "swann",
    "logging",
    "really",
    "important",
    "one",
    "know",
    "problem",
    "know",
    "card",
    "failed",
    "happened",
    "exactly",
    "error",
    "right",
    "logs",
    "would",
    "help",
    "give",
    "answer",
    "monitoring",
    "important",
    "always",
    "keep",
    "check",
    "nodes",
    "right",
    "master",
    "cluster",
    "important",
    "monitoring",
    "communities",
    "slight",
    "advantage",
    "doc",
    "swarm",
    "okay",
    "finish",
    "topic",
    "one",
    "slide",
    "want",
    "show",
    "statistics",
    "stat",
    "picked",
    "platform",
    "9",
    "nothing",
    "company",
    "writes",
    "tech",
    "okay",
    "said",
    "number",
    "news",
    "articles",
    "produced",
    "right",
    "one",
    "particular",
    "year",
    "90",
    "covered",
    "kubernetes",
    "compared",
    "10",
    "percent",
    "docker",
    "swamp",
    "amazing",
    "right",
    "big",
    "difference",
    "means",
    "every",
    "one",
    "blog",
    "written",
    "everyone",
    "article",
    "written",
    "docker",
    "swamp",
    "nine",
    "different",
    "articles",
    "written",
    "humanities",
    "similarly",
    "web",
    "searches",
    "web",
    "searches",
    "kubernetes",
    "90",
    "percent",
    "compared",
    "dhaka",
    "swarms",
    "10",
    "publications",
    "github",
    "stars",
    "number",
    "commits",
    "github",
    "things",
    "clearly",
    "one",
    "vacuum",
    "energy",
    "everywhere",
    "communities",
    "one",
    "dominating",
    "market",
    "pretty",
    "visible",
    "stat",
    "also",
    "right",
    "think",
    "pretty",
    "much",
    "brings",
    "end",
    "particular",
    "topic",
    "moving",
    "forward",
    "let",
    "show",
    "use",
    "case",
    "let",
    "talk",
    "game",
    "amazing",
    "game",
    "called",
    "pokemon",
    "go",
    "powered",
    "help",
    "communities",
    "pretty",
    "sure",
    "know",
    "right",
    "guys",
    "know",
    "pokemon",
    "go",
    "famous",
    "game",
    "actually",
    "best",
    "game",
    "year",
    "2017",
    "main",
    "reason",
    "best",
    "kubernetes",
    "let",
    "tell",
    "tell",
    "things",
    "want",
    "talk",
    "give",
    "overview",
    "pokemon",
    "goers",
    "let",
    "talk",
    "key",
    "stacks",
    "pokemon",
    "go",
    "augmented",
    "reality",
    "game",
    "developed",
    "niantic",
    "android",
    "ios",
    "devices",
    "okay",
    "key",
    "stats",
    "read",
    "like",
    "500",
    "million",
    "plus",
    "downloads",
    "overall",
    "20",
    "million",
    "plus",
    "daily",
    "active",
    "users",
    "massive",
    "daily",
    "like",
    "20",
    "million",
    "users",
    "plus",
    "achieved",
    "amazing",
    "thing",
    "good",
    "game",
    "okay",
    "game",
    "actually",
    "initially",
    "launched",
    "north",
    "america",
    "australia",
    "new",
    "zealand",
    "aware",
    "fact",
    "based",
    "india",
    "get",
    "access",
    "game",
    "moment",
    "news",
    "got",
    "game",
    "like",
    "started",
    "downloading",
    "could",
    "really",
    "find",
    "link",
    "could",
    "download",
    "launched",
    "countries",
    "faced",
    "right",
    "spite",
    "reading",
    "three",
    "countries",
    "like",
    "major",
    "problem",
    "problem",
    "going",
    "talk",
    "next",
    "slide",
    "right",
    "use",
    "case",
    "based",
    "fact",
    "spite",
    "launching",
    "three",
    "countries",
    "probably",
    "north",
    "america",
    "australia",
    "new",
    "zealand",
    "could",
    "meltdown",
    "rather",
    "help",
    "humanity",
    "used",
    "problem",
    "basis",
    "raw",
    "success",
    "happened",
    "let",
    "suspense",
    "get",
    "let",
    "finish",
    "slide",
    "one",
    "amazing",
    "thing",
    "pokemon",
    "go",
    "inspired",
    "users",
    "walk",
    "billion",
    "miles",
    "hour",
    "okay",
    "yes",
    "math",
    "five",
    "point",
    "four",
    "billion",
    "miles",
    "one",
    "year",
    "big",
    "number",
    "says",
    "surpassed",
    "engineering",
    "expectations",
    "50",
    "times",
    "last",
    "sign",
    "respect",
    "pokemon",
    "go",
    "game",
    "respect",
    "backend",
    "use",
    "kubernetes",
    "achieve",
    "whatever",
    "needed",
    "okay",
    "think",
    "spent",
    "enough",
    "time",
    "let",
    "go",
    "ahead",
    "talk",
    "interesting",
    "part",
    "tell",
    "back",
    "architecture",
    "pokemon",
    "go",
    "okay",
    "pokémon",
    "go",
    "container",
    "two",
    "primary",
    "components",
    "one",
    "google",
    "big",
    "table",
    "main",
    "database",
    "everything",
    "going",
    "coming",
    "programs",
    "run",
    "java",
    "cloud",
    "right",
    "two",
    "things",
    "running",
    "game",
    "mapreduce",
    "cloud",
    "dataflow",
    "wear",
    "something",
    "used",
    "scaling",
    "okay",
    "container",
    "scaling",
    "respect",
    "application",
    "program",
    "would",
    "react",
    "increased",
    "number",
    "users",
    "handle",
    "increased",
    "number",
    "requests",
    "mapper",
    "uses",
    "paradigm",
    "comes",
    "right",
    "mapping",
    "reducing",
    "whole",
    "concept",
    "one",
    "deployment",
    "okay",
    "say",
    "defy",
    "means",
    "capacities",
    "could",
    "go",
    "til",
    "five",
    "times",
    "okay",
    "technically",
    "could",
    "serve",
    "x",
    "number",
    "requests",
    "case",
    "failure",
    "conditions",
    "heavy",
    "traffic",
    "load",
    "conditions",
    "max",
    "server",
    "could",
    "handle",
    "5x",
    "5x",
    "server",
    "would",
    "start",
    "crashing",
    "prediction",
    "okay",
    "actually",
    "happened",
    "pokemon",
    "go",
    "releasing",
    "three",
    "different",
    "geographies",
    "deployed",
    "usage",
    "became",
    "much",
    "xm",
    "r",
    "x",
    "technically",
    "failure",
    "limit",
    "even",
    "5",
    "x",
    "server",
    "capability",
    "traffic",
    "got",
    "50",
    "times",
    "50",
    "times",
    "expected",
    "know",
    "traffic",
    "much",
    "going",
    "brought",
    "knees",
    "definite",
    "given",
    "right",
    "like",
    "success",
    "story",
    "good",
    "true",
    "kind",
    "story",
    "kind",
    "scenario",
    "request",
    "start",
    "coming",
    "much",
    "reach",
    "50",
    "x",
    "gone",
    "right",
    "application",
    "gone",
    "toss",
    "kubernetes",
    "comes",
    "overcome",
    "challenges",
    "overcome",
    "challenges",
    "cuban",
    "areas",
    "vertical",
    "scaling",
    "horizontal",
    "scaling",
    "ease",
    "biggest",
    "problem",
    "right",
    "application",
    "company",
    "easily",
    "horizontal",
    "scaling",
    "spin",
    "containers",
    "instances",
    "set",
    "environment",
    "vertical",
    "scaling",
    "something",
    "specific",
    "even",
    "challenging",
    "specific",
    "particular",
    "game",
    "virtual",
    "reality",
    "would",
    "keep",
    "changing",
    "whenever",
    "person",
    "moves",
    "around",
    "walks",
    "around",
    "somewhere",
    "apartments",
    "somewhere",
    "road",
    "ram",
    "right",
    "would",
    "increase",
    "memory",
    "memory",
    "storage",
    "memory",
    "would",
    "increase",
    "real",
    "time",
    "servers",
    "capacity",
    "also",
    "increase",
    "vertically",
    "deployed",
    "horizontal",
    "scalability",
    "anymore",
    "satisfying",
    "requests",
    "satisfying",
    "request",
    "respect",
    "hardware",
    "space",
    "ram",
    "space",
    "things",
    "right",
    "one",
    "particular",
    "server",
    "performance",
    "abilities",
    "communities",
    "solve",
    "problems",
    "effortlessly",
    "neon",
    "tape",
    "also",
    "surprised",
    "kubernetes",
    "could",
    "help",
    "got",
    "google",
    "read",
    "article",
    "recently",
    "neon",
    "thick",
    "slab",
    "met",
    "top",
    "executives",
    "google",
    "gcp",
    "right",
    "figure",
    "things",
    "supposed",
    "go",
    "course",
    "met",
    "hedgehog",
    "communities",
    "figure",
    "way",
    "actually",
    "scale",
    "50",
    "time",
    "short",
    "time",
    "challenge",
    "represented",
    "thanks",
    "communities",
    "could",
    "handle",
    "three",
    "times",
    "traffic",
    "expected",
    "like",
    "one",
    "story",
    "surprising",
    "know",
    "something",
    "like",
    "would",
    "happen",
    "use",
    "case",
    "pretty",
    "much",
    "brings",
    "end",
    "topic",
    "pokemon",
    "go",
    "used",
    "communities",
    "achieve",
    "something",
    "today",
    "world",
    "pokemon",
    "go",
    "really",
    "revered",
    "game",
    "could",
    "write",
    "basically",
    "beat",
    "stereotypes",
    "game",
    "whatever",
    "anybody",
    "could",
    "anything",
    "negative",
    "game",
    "right",
    "could",
    "say",
    "mobile",
    "games",
    "video",
    "games",
    "make",
    "lazy",
    "make",
    "sit",
    "one",
    "place",
    "things",
    "right",
    "pokemon",
    "go",
    "something",
    "different",
    "actually",
    "made",
    "people",
    "walk",
    "around",
    "made",
    "people",
    "exercise",
    "goes",
    "show",
    "popular",
    "game",
    "became",
    "humanity",
    "lies",
    "heart",
    "something",
    "became",
    "popular",
    "something",
    "became",
    "big",
    "imagine",
    "big",
    "humanities",
    "beautiful",
    "communities",
    "right",
    "topic",
    "moving",
    "forward",
    "let",
    "quickly",
    "talk",
    "architecture",
    "communities",
    "okay",
    "communities",
    "architecture",
    "simple",
    "cube",
    "master",
    "controls",
    "pretty",
    "much",
    "everything",
    "note",
    "docker",
    "swarm",
    "cube",
    "master",
    "also",
    "containers",
    "running",
    "okay",
    "wo",
    "containers",
    "containers",
    "running",
    "services",
    "running",
    "nodes",
    "going",
    "master",
    "would",
    "first",
    "create",
    "rock",
    "master",
    "first",
    "step",
    "creating",
    "cluster",
    "would",
    "get",
    "notes",
    "join",
    "cluster",
    "okay",
    "bead",
    "pods",
    "beat",
    "containers",
    "everything",
    "would",
    "running",
    "nodes",
    "master",
    "would",
    "scheduling",
    "replicating",
    "containers",
    "across",
    "nodes",
    "making",
    "sure",
    "configurations",
    "satisfied",
    "right",
    "whatever",
    "specify",
    "beginning",
    "way",
    "access",
    "cube",
    "master",
    "two",
    "ways",
    "either",
    "use",
    "via",
    "ui",
    "cli",
    "cli",
    "default",
    "way",
    "main",
    "way",
    "technically",
    "want",
    "start",
    "setting",
    "cluster",
    "use",
    "cli",
    "set",
    "cluster",
    "enable",
    "dashboard",
    "enable",
    "dashboard",
    "probably",
    "get",
    "gui",
    "start",
    "using",
    "communities",
    "start",
    "deploying",
    "help",
    "dashboard",
    "right",
    "click",
    "functionality",
    "deploy",
    "application",
    "want",
    "rather",
    "write",
    "l",
    "file",
    "feed",
    "commands",
    "one",
    "cli",
    "working",
    "kubernetes",
    "okay",
    "let",
    "concentrate",
    "little",
    "things",
    "work",
    "load",
    "end",
    "said",
    "communities",
    "master",
    "controls",
    "nodes",
    "inside",
    "nodes",
    "containers",
    "okay",
    "containers",
    "contained",
    "inside",
    "actually",
    "contained",
    "inside",
    "pods",
    "okay",
    "nodes",
    "inside",
    "pots",
    "inside",
    "pods",
    "number",
    "containers",
    "depending",
    "upon",
    "configuration",
    "requirement",
    "right",
    "pods",
    "contain",
    "number",
    "containers",
    "logical",
    "binding",
    "logical",
    "grouping",
    "containers",
    "supposing",
    "one",
    "application",
    "x",
    "running",
    "node",
    "okay",
    "part",
    "particular",
    "application",
    "containers",
    "needed",
    "execute",
    "particular",
    "application",
    "part",
    "particular",
    "part",
    "right",
    "god",
    "works",
    "difference",
    "respect",
    "doc",
    "warm",
    "two",
    "bananas",
    "swamp",
    "pot",
    "continuous",
    "running",
    "node",
    "two",
    "terminologies",
    "know",
    "replication",
    "controller",
    "service",
    "replication",
    "controller",
    "masters",
    "resource",
    "ensuring",
    "request",
    "number",
    "pods",
    "always",
    "running",
    "nodes",
    "right",
    "trigger",
    "confirmation",
    "affirmation",
    "says",
    "okay",
    "many",
    "number",
    "pods",
    "always",
    "running",
    "many",
    "number",
    "containers",
    "always",
    "running",
    "something",
    "like",
    "right",
    "see",
    "replication",
    "controller",
    "always",
    "ensure",
    "happening",
    "service",
    "object",
    "master",
    "provides",
    "load",
    "think",
    "course",
    "replicated",
    "group",
    "pods",
    "right",
    "humanities",
    "works",
    "think",
    "good",
    "enough",
    "introduction",
    "think",
    "go",
    "demo",
    "part",
    "show",
    "deploy",
    "applications",
    "communities",
    "either",
    "cli",
    "either",
    "via",
    "jama",
    "files",
    "dashboard",
    "okay",
    "guys",
    "let",
    "get",
    "started",
    "demo",
    "purpose",
    "two",
    "vms",
    "okay",
    "see",
    "cube",
    "master",
    "would",
    "acting",
    "master",
    "cluster",
    "another",
    "vm",
    "cube",
    "node",
    "okay",
    "cluster",
    "one",
    "master",
    "one",
    "node",
    "right",
    "ease",
    "purpose",
    "video",
    "compiled",
    "list",
    "commands",
    "text",
    "document",
    "right",
    "commands",
    "needed",
    "start",
    "cluster",
    "configurations",
    "things",
    "using",
    "every",
    "copying",
    "commands",
    "show",
    "also",
    "explain",
    "commands",
    "mean",
    "one",
    "prerequisite",
    "needs",
    "satisfied",
    "master",
    "least",
    "two",
    "core",
    "cpus",
    "okay",
    "4gb",
    "ram",
    "node",
    "least",
    "one",
    "course",
    "4gb",
    "ram",
    "make",
    "sure",
    "much",
    "hardware",
    "given",
    "vms",
    "right",
    "using",
    "linux",
    "operating",
    "system",
    "well",
    "good",
    "using",
    "vm",
    "top",
    "windows",
    "os",
    "would",
    "request",
    "satisfy",
    "things",
    "okay",
    "two",
    "criterias",
    "think",
    "straight",
    "away",
    "start",
    "let",
    "open",
    "terminal",
    "first",
    "fault",
    "okay",
    "node",
    "going",
    "back",
    "master",
    "okay",
    "yes",
    "first",
    "start",
    "cluster",
    "start",
    "masters",
    "end",
    "okay",
    "command",
    "q",
    "barium",
    "specify",
    "port",
    "network",
    "flag",
    "api",
    "server",
    "flag",
    "specifying",
    "port",
    "network",
    "flag",
    "different",
    "containers",
    "inside",
    "pod",
    "able",
    "talk",
    "easily",
    "right",
    "whole",
    "concept",
    "self",
    "discovery",
    "spoke",
    "earlier",
    "features",
    "communities",
    "like",
    "different",
    "poor",
    "networks",
    "using",
    "containers",
    "would",
    "talk",
    "go",
    "documentation",
    "community",
    "documentation",
    "find",
    "lot",
    "options",
    "use",
    "either",
    "calico",
    "pod",
    "use",
    "flannel",
    "poor",
    "network",
    "say",
    "poor",
    "network",
    "basically",
    "framed",
    "cni",
    "okay",
    "container",
    "network",
    "interface",
    "okay",
    "use",
    "either",
    "calico",
    "cni",
    "flannel",
    "cni",
    "ones",
    "two",
    "popular",
    "ones",
    "using",
    "calcio",
    "cni",
    "okay",
    "network",
    "range",
    "particular",
    "pod",
    "specify",
    "okay",
    "specify",
    "ip",
    "address",
    "master",
    "let",
    "first",
    "copy",
    "entire",
    "line",
    "paste",
    "let",
    "config",
    "find",
    "ip",
    "address",
    "particular",
    "machine",
    "master",
    "machine",
    "ip",
    "address",
    "one",
    "ninety",
    "two",
    "dot",
    "one",
    "sixty",
    "eight",
    "dot",
    "one",
    "okay",
    "let",
    "keep",
    "mind",
    "let",
    "paste",
    "command",
    "place",
    "master",
    "ip",
    "address",
    "going",
    "specify",
    "ip",
    "address",
    "master",
    "okay",
    "read",
    "one",
    "ninety",
    "two",
    "dot",
    "one",
    "sixty",
    "eight",
    "dot",
    "one",
    "pod",
    "network",
    "told",
    "going",
    "use",
    "calico",
    "pod",
    "let",
    "copy",
    "network",
    "range",
    "paste",
    "containers",
    "inside",
    "particular",
    "pot",
    "would",
    "assigned",
    "ip",
    "address",
    "range",
    "okay",
    "let",
    "go",
    "ahead",
    "hit",
    "enter",
    "cluster",
    "would",
    "begin",
    "set",
    "going",
    "x",
    "expected",
    "going",
    "take",
    "minutes",
    "hold",
    "okay",
    "perfect",
    "cuban",
    "master",
    "initialized",
    "successfully",
    "want",
    "start",
    "using",
    "cluster",
    "run",
    "following",
    "regular",
    "user",
    "right",
    "three",
    "commands",
    "suggested",
    "kubernetes",
    "actually",
    "set",
    "commands",
    "even",
    "okay",
    "running",
    "commands",
    "set",
    "environment",
    "token",
    "generated",
    "right",
    "joining",
    "token",
    "token",
    "along",
    "inlet",
    "address",
    "ip",
    "master",
    "basically",
    "execute",
    "command",
    "nodes",
    "joining",
    "cluster",
    "master",
    "right",
    "master",
    "machine",
    "created",
    "cluster",
    "though",
    "steps",
    "middle",
    "one",
    "steps",
    "executing",
    "three",
    "commands",
    "comes",
    "bring",
    "dashboard",
    "setting",
    "board",
    "network",
    "right",
    "calcio",
    "apart",
    "set",
    "calico",
    "pod",
    "also",
    "set",
    "dashboard",
    "start",
    "nodes",
    "node",
    "join",
    "severe",
    "complications",
    "let",
    "first",
    "go",
    "ahead",
    "run",
    "three",
    "commands",
    "one",
    "okay",
    "since",
    "commands",
    "text",
    "doc",
    "copy",
    "okay",
    "say",
    "paste",
    "enter",
    "okay",
    "copy",
    "line",
    "remember",
    "execute",
    "things",
    "regular",
    "user",
    "okay",
    "probably",
    "use",
    "pseudo",
    "yeah",
    "executing",
    "regular",
    "user",
    "asking",
    "want",
    "overwrite",
    "existing",
    "whatever",
    "directory",
    "would",
    "say",
    "yes",
    "already",
    "done",
    "setting",
    "cluster",
    "first",
    "time",
    "prompt",
    "okay",
    "let",
    "go",
    "third",
    "line",
    "copy",
    "paste",
    "okay",
    "perfect",
    "ran",
    "three",
    "commands",
    "told",
    "communities",
    "next",
    "thing",
    "check",
    "node",
    "status",
    "things",
    "let",
    "set",
    "network",
    "okay",
    "poor",
    "network",
    "like",
    "said",
    "line",
    "command",
    "run",
    "set",
    "calico",
    "network",
    "okay",
    "notes",
    "join",
    "particular",
    "network",
    "copying",
    "template",
    "calico",
    "document",
    "file",
    "present",
    "box",
    "okay",
    "hit",
    "enter",
    "yes",
    "thing",
    "created",
    "calcio",
    "cube",
    "controllers",
    "created",
    "go",
    "back",
    "see",
    "point",
    "time",
    "check",
    "master",
    "connected",
    "particular",
    "pod",
    "okay",
    "run",
    "cube",
    "cdl",
    "get",
    "loads",
    "command",
    "okay",
    "would",
    "say",
    "one",
    "particular",
    "resource",
    "connected",
    "cluster",
    "okay",
    "name",
    "machine",
    "role",
    "master",
    "yet",
    "state",
    "ready",
    "okay",
    "want",
    "get",
    "idea",
    "different",
    "pods",
    "running",
    "default",
    "cubes",
    "get",
    "pods",
    "along",
    "options",
    "okay",
    "specify",
    "flags",
    "namespaces",
    "flag",
    "specify",
    "wide",
    "okay",
    "way",
    "get",
    "pods",
    "started",
    "default",
    "okay",
    "different",
    "services",
    "like",
    "cd4",
    "cube",
    "controllers",
    "calico",
    "node",
    "sed",
    "master",
    "every",
    "single",
    "service",
    "separate",
    "container",
    "pot",
    "started",
    "okay",
    "understand",
    "part",
    "okay",
    "safe",
    "assumption",
    "know",
    "cluster",
    "cluster",
    "ready",
    "masters",
    "part",
    "cluster",
    "let",
    "go",
    "ahead",
    "execute",
    "dashboard",
    "okay",
    "remember",
    "want",
    "use",
    "dashboard",
    "run",
    "command",
    "notes",
    "join",
    "particular",
    "cluster",
    "moment",
    "notes",
    "join",
    "cluster",
    "bring",
    "dashboard",
    "going",
    "challenging",
    "start",
    "throwing",
    "arrows",
    "ok",
    "say",
    "hosted",
    "node",
    "want",
    "want",
    "dashboard",
    "server",
    "right",
    "master",
    "first",
    "let",
    "bring",
    "dashboard",
    "going",
    "copy",
    "paste",
    "okay",
    "enter",
    "great",
    "communities",
    "dashboard",
    "created",
    "next",
    "command",
    "get",
    "dashboard",
    "running",
    "cube",
    "cereal",
    "proxy",
    "okay",
    "get",
    "message",
    "saying",
    "served",
    "particular",
    "port",
    "number",
    "yes",
    "right",
    "access",
    "local",
    "host",
    "port",
    "number",
    "localhost",
    "yeah",
    "one",
    "localhost",
    "okay",
    "followed",
    "port",
    "number",
    "eight",
    "thousand",
    "one",
    "okay",
    "yeah",
    "right",
    "dashboard",
    "technically",
    "accessed",
    "another",
    "url",
    "various",
    "things",
    "access",
    "mean",
    "set",
    "okay",
    "right",
    "enabled",
    "dashboard",
    "want",
    "access",
    "dashboard",
    "first",
    "create",
    "service",
    "account",
    "okay",
    "instructions",
    "okay",
    "first",
    "create",
    "service",
    "account",
    "dashboard",
    "say",
    "okay",
    "going",
    "admin",
    "user",
    "particular",
    "service",
    "account",
    "enable",
    "functionality",
    "say",
    "dashboard",
    "admin",
    "privileges",
    "cluster",
    "binding",
    "okay",
    "cluster",
    "roll",
    "binding",
    "join",
    "poor",
    "get",
    "access",
    "particular",
    "dashboard",
    "basically",
    "give",
    "key",
    "okay",
    "like",
    "password",
    "generate",
    "token",
    "first",
    "access",
    "dashboard",
    "dashboard",
    "three",
    "commands",
    "well",
    "get",
    "confused",
    "line",
    "remember",
    "separate",
    "okay",
    "initially",
    "rant",
    "three",
    "commands",
    "kubernetes",
    "oh",
    "execute",
    "next",
    "necessity",
    "bring",
    "pod",
    "command",
    "pod",
    "command",
    "getting",
    "dashboard",
    "right",
    "run",
    "proxy",
    "particular",
    "port",
    "number",
    "start",
    "served",
    "dad",
    "would",
    "served",
    "getting",
    "ui",
    "want",
    "get",
    "create",
    "service",
    "account",
    "three",
    "things",
    "right",
    "let",
    "start",
    "continue",
    "hope",
    "confusing",
    "guys",
    "okay",
    "ca",
    "let",
    "open",
    "new",
    "terminal",
    "okay",
    "going",
    "paste",
    "yes",
    "service",
    "account",
    "created",
    "let",
    "go",
    "back",
    "execute",
    "command",
    "role",
    "binding",
    "saying",
    "dashboard",
    "admin",
    "functionalities",
    "going",
    "cluster",
    "roll",
    "okay",
    "cluster",
    "admin",
    "service",
    "account",
    "using",
    "going",
    "default",
    "namespace",
    "okay",
    "created",
    "account",
    "said",
    "want",
    "create",
    "particular",
    "account",
    "default",
    "namespace",
    "thing",
    "specifying",
    "okay",
    "good",
    "admin",
    "created",
    "good",
    "let",
    "generate",
    "needed",
    "access",
    "dashboard",
    "okay",
    "execute",
    "command",
    "let",
    "show",
    "go",
    "url",
    "right",
    "api",
    "slash",
    "v",
    "1",
    "namespaces",
    "yep",
    "let",
    "show",
    "okay",
    "particular",
    "url",
    "get",
    "access",
    "dashboard",
    "okay",
    "login",
    "access",
    "dashboard",
    "localhost",
    "8001",
    "api",
    "v1",
    "namespaces",
    "cube",
    "system",
    "services",
    "slash",
    "http",
    "cuban",
    "eighties",
    "dashboard",
    "proxy",
    "okay",
    "remember",
    "one",
    "thing",
    "like",
    "told",
    "asking",
    "password",
    "would",
    "say",
    "token",
    "let",
    "go",
    "hit",
    "command",
    "generate",
    "token",
    "token",
    "amount",
    "copy",
    "till",
    "going",
    "say",
    "copy",
    "paste",
    "right",
    "simon",
    "update",
    "yes",
    "perfect",
    "dashboard",
    "right",
    "cuban",
    "eighties",
    "dashboard",
    "looks",
    "like",
    "whatever",
    "want",
    "get",
    "overview",
    "everything",
    "workloads",
    "come",
    "deployments",
    "option",
    "see",
    "pods",
    "see",
    "different",
    "services",
    "running",
    "among",
    "functionalities",
    "okay",
    "right",
    "bar",
    "graph",
    "pie",
    "graph",
    "shown",
    "clusters",
    "board",
    "added",
    "node",
    "service",
    "running",
    "right",
    "mean",
    "outlay",
    "dashboard",
    "okay",
    "get",
    "access",
    "everything",
    "want",
    "left",
    "drill",
    "namespaces",
    "pods",
    "containers",
    "right",
    "want",
    "deploy",
    "something",
    "dashboard",
    "right",
    "click",
    "functionality",
    "go",
    "okay",
    "create",
    "container",
    "create",
    "pot",
    "deployment",
    "matter",
    "fact",
    "nodes",
    "running",
    "nodes",
    "correct",
    "whatever",
    "deploy",
    "done",
    "node",
    "let",
    "first",
    "open",
    "node",
    "get",
    "node",
    "join",
    "particular",
    "cluster",
    "mine",
    "remember",
    "command",
    "join",
    "node",
    "got",
    "generated",
    "master",
    "correct",
    "let",
    "go",
    "fetch",
    "first",
    "command",
    "ran",
    "right",
    "one",
    "let",
    "copy",
    "paste",
    "one",
    "node",
    "end",
    "ip",
    "master",
    "join",
    "particular",
    "port",
    "number",
    "let",
    "hit",
    "enter",
    "let",
    "see",
    "happens",
    "okay",
    "let",
    "run",
    "root",
    "user",
    "okay",
    "okay",
    "perfect",
    "successfully",
    "established",
    "connection",
    "api",
    "server",
    "says",
    "node",
    "joined",
    "cluster",
    "right",
    "bingo",
    "good",
    "news",
    "go",
    "back",
    "master",
    "fact",
    "open",
    "dashboard",
    "would",
    "option",
    "nodes",
    "right",
    "initially",
    "showing",
    "master",
    "masters",
    "thing",
    "part",
    "nodes",
    "let",
    "refresh",
    "would",
    "see",
    "even",
    "node",
    "1",
    "would",
    "part",
    "right",
    "two",
    "resources",
    "instances",
    "one",
    "master",
    "node",
    "go",
    "overview",
    "get",
    "details",
    "start",
    "application",
    "start",
    "servers",
    "containers",
    "would",
    "start",
    "showing",
    "right",
    "high",
    "time",
    "start",
    "showing",
    "deploy",
    "deployed",
    "using",
    "dashboard",
    "told",
    "functionality",
    "let",
    "go",
    "ahead",
    "click",
    "create",
    "yeah",
    "mind",
    "dashboard",
    "easiest",
    "way",
    "deploy",
    "application",
    "right",
    "even",
    "developers",
    "around",
    "world",
    "thing",
    "first",
    "time",
    "probably",
    "created",
    "using",
    "amal",
    "file",
    "start",
    "editing",
    "ml",
    "file",
    "top",
    "dashboard",
    "create",
    "deploy",
    "application",
    "thing",
    "go",
    "create",
    "app",
    "using",
    "functionality",
    "click",
    "functionality",
    "let",
    "give",
    "name",
    "application",
    "say",
    "recur",
    "demo",
    "okay",
    "let",
    "name",
    "application",
    "want",
    "basically",
    "pull",
    "engines",
    "image",
    "okay",
    "want",
    "launch",
    "engine",
    "service",
    "going",
    "specify",
    "image",
    "name",
    "docker",
    "hub",
    "okay",
    "says",
    "either",
    "url",
    "public",
    "image",
    "registry",
    "private",
    "image",
    "hosted",
    "docker",
    "hub",
    "google",
    "container",
    "registry",
    "specify",
    "url",
    "per",
    "se",
    "specifying",
    "docker",
    "hub",
    "specifying",
    "image",
    "pulled",
    "docker",
    "hub",
    "use",
    "name",
    "image",
    "pulled",
    "good",
    "enough",
    "right",
    "engine",
    "name",
    "good",
    "enough",
    "choose",
    "set",
    "number",
    "ports",
    "one",
    "two",
    "way",
    "two",
    "containers",
    "running",
    "pot",
    "right",
    "done",
    "final",
    "part",
    "actually",
    "without",
    "final",
    "part",
    "strip",
    "deployed",
    "okay",
    "deployed",
    "application",
    "would",
    "created",
    "would",
    "get",
    "ui",
    "mean",
    "wo",
    "see",
    "engine",
    "service",
    "get",
    "service",
    "enable",
    "one",
    "functionality",
    "okay",
    "server",
    "click",
    "drop",
    "external",
    "option",
    "right",
    "click",
    "external",
    "would",
    "let",
    "access",
    "particular",
    "service",
    "host",
    "machine",
    "right",
    "definition",
    "see",
    "explanation",
    "internal",
    "external",
    "service",
    "defined",
    "map",
    "incoming",
    "port",
    "target",
    "port",
    "seen",
    "container",
    "engines",
    "would",
    "hosted",
    "one",
    "container",
    "ports",
    "could",
    "accessible",
    "specify",
    "anything",
    "said",
    "access",
    "externally",
    "particular",
    "port",
    "number",
    "get",
    "mapped",
    "default",
    "jinkx",
    "runs",
    "port",
    "number",
    "target",
    "put",
    "would",
    "port",
    "want",
    "expose",
    "map",
    "anything",
    "want",
    "going",
    "say",
    "right",
    "simple",
    "way",
    "application",
    "launched",
    "two",
    "pods",
    "go",
    "click",
    "deploy",
    "way",
    "application",
    "deployed",
    "deployment",
    "successful",
    "two",
    "pods",
    "running",
    "go",
    "service",
    "try",
    "access",
    "ui",
    "right",
    "says",
    "running",
    "particular",
    "port",
    "number",
    "copy",
    "say",
    "localhost",
    "321530",
    "k",
    "hit",
    "enter",
    "bingo",
    "says",
    "welcome",
    "jenkins",
    "building",
    "ui",
    "right",
    "able",
    "access",
    "application",
    "launched",
    "dashboard",
    "simple",
    "one",
    "way",
    "launching",
    "making",
    "deployment",
    "two",
    "ways",
    "like",
    "told",
    "one",
    "using",
    "cli",
    "command",
    "line",
    "interface",
    "draw",
    "linux",
    "machine",
    "terminal",
    "uploading",
    "yamen",
    "file",
    "uploading",
    "yamen",
    "file",
    "everything",
    "form",
    "yama",
    "lord",
    "jason",
    "okay",
    "like",
    "default",
    "way",
    "whatever",
    "deployment",
    "made",
    "right",
    "also",
    "configurations",
    "stored",
    "form",
    "yaman",
    "click",
    "view",
    "edit",
    "yeonggil",
    "configurations",
    "specified",
    "default",
    "ones",
    "taken",
    "said",
    "name",
    "director",
    "demo",
    "oh",
    "name",
    "deployment",
    "okay",
    "kind",
    "deployment",
    "version",
    "api",
    "one",
    "extension",
    "1",
    "beta",
    "1",
    "metadata",
    "various",
    "lists",
    "know",
    "write",
    "normal",
    "file",
    "think",
    "would",
    "little",
    "easier",
    "understand",
    "create",
    "deployment",
    "file",
    "everything",
    "lists",
    "maps",
    "files",
    "always",
    "lists",
    "maps",
    "maps",
    "lists",
    "might",
    "little",
    "confusing",
    "probably",
    "another",
    "tutorial",
    "video",
    "write",
    "normal",
    "file",
    "cuban",
    "deployment",
    "would",
    "keep",
    "another",
    "session",
    "okay",
    "let",
    "get",
    "back",
    "session",
    "show",
    "next",
    "deployment",
    "okay",
    "next",
    "deployment",
    "technique",
    "let",
    "close",
    "go",
    "back",
    "overview",
    "okay",
    "one",
    "deployment",
    "good",
    "okay",
    "let",
    "go",
    "yeah",
    "let",
    "delete",
    "deployment",
    "okay",
    "let",
    "least",
    "scale",
    "want",
    "many",
    "resources",
    "used",
    "node",
    "also",
    "show",
    "two",
    "deployments",
    "right",
    "reduced",
    "deployment",
    "think",
    "good",
    "enough",
    "great",
    "let",
    "go",
    "back",
    "cube",
    "set",
    "document",
    "mine",
    "right",
    "could",
    "check",
    "deployments",
    "could",
    "things",
    "one",
    "thing",
    "might",
    "forgotten",
    "showing",
    "nodes",
    "part",
    "cluster",
    "right",
    "master",
    "yeah",
    "kind",
    "forgot",
    "show",
    "cube",
    "cdl",
    "get",
    "node",
    "view",
    "got",
    "dashboard",
    "get",
    "also",
    "mean",
    "two",
    "nodes",
    "name",
    "things",
    "okay",
    "also",
    "cube",
    "cdl",
    "get",
    "pods",
    "would",
    "tell",
    "pods",
    "running",
    "car",
    "demo",
    "pot",
    "started",
    "okay",
    "god",
    "specify",
    "flags",
    "right",
    "namespaces",
    "wide",
    "default",
    "pause",
    "get",
    "created",
    "along",
    "kubernetes",
    "cluster",
    "also",
    "get",
    "displayed",
    "let",
    "show",
    "also",
    "case",
    "okay",
    "yeah",
    "one",
    "created",
    "ones",
    "default",
    "deployments",
    "come",
    "minutes",
    "moment",
    "install",
    "set",
    "cluster",
    "get",
    "started",
    "okay",
    "see",
    "particular",
    "particular",
    "dareka",
    "demo",
    "started",
    "running",
    "node",
    "1",
    "along",
    "cube",
    "proxy",
    "particular",
    "calico",
    "node",
    "easter",
    "services",
    "running",
    "master",
    "node",
    "one",
    "running",
    "node",
    "1",
    "right",
    "see",
    "right",
    "calico",
    "node",
    "runs",
    "node",
    "master",
    "similarly",
    "queue",
    "proxy",
    "runs",
    "node",
    "master",
    "one",
    "running",
    "note",
    "okay",
    "getting",
    "back",
    "explain",
    "next",
    "part",
    "deploy",
    "anything",
    "terminal",
    "deploy",
    "engines",
    "application",
    "cli",
    "follow",
    "set",
    "commands",
    "okay",
    "couple",
    "steps",
    "first",
    "create",
    "deployment",
    "run",
    "command",
    "ok",
    "cube",
    "cereal",
    "create",
    "deployment",
    "drinks",
    "name",
    "image",
    "want",
    "create",
    "going",
    "name",
    "deployment",
    "name",
    "image",
    "want",
    "use",
    "control",
    "c",
    "let",
    "go",
    "terminal",
    "master",
    "executing",
    "command",
    "cube",
    "cereal",
    "create",
    "deployment",
    "okay",
    "deployment",
    "engines",
    "created",
    "want",
    "verify",
    "also",
    "deployments",
    "right",
    "one",
    "entry",
    "array",
    "card",
    "mo",
    "yes",
    "see",
    "two",
    "engines",
    "arica",
    "demo",
    "pending",
    "mean",
    "would",
    "take",
    "seconds",
    "meanwhile",
    "let",
    "continue",
    "steps",
    "created",
    "deployments",
    "create",
    "service",
    "okay",
    "say",
    "node",
    "port",
    "used",
    "access",
    "particular",
    "service",
    "right",
    "deployment",
    "deployment",
    "deploying",
    "container",
    "want",
    "access",
    "like",
    "told",
    "earlier",
    "local",
    "host",
    "machine",
    "things",
    "enable",
    "node",
    "board",
    "want",
    "get",
    "deployments",
    "terminal",
    "run",
    "command",
    "cube",
    "cdl",
    "get",
    "deployments",
    "okay",
    "engines",
    "also",
    "comes",
    "right",
    "want",
    "details",
    "diploma",
    "use",
    "command",
    "cube",
    "cdl",
    "describe",
    "get",
    "like",
    "details",
    "particular",
    "development",
    "name",
    "port",
    "number",
    "sort",
    "siding",
    "things",
    "okay",
    "let",
    "complicate",
    "probably",
    "use",
    "understanding",
    "later",
    "done",
    "next",
    "thing",
    "create",
    "service",
    "nodes",
    "created",
    "deployment",
    "yes",
    "create",
    "service",
    "nodes",
    "using",
    "particular",
    "command",
    "cube",
    "cereal",
    "create",
    "service",
    "say",
    "note",
    "port",
    "okay",
    "means",
    "want",
    "access",
    "particular",
    "point",
    "number",
    "port",
    "mapping",
    "80",
    "okay",
    "container",
    "port",
    "80",
    "internal",
    "node",
    "port",
    "okay",
    "service",
    "engines",
    "created",
    "want",
    "check",
    "diplomas",
    "running",
    "nodes",
    "run",
    "command",
    "cube",
    "city",
    "get",
    "svc",
    "okay",
    "would",
    "tell",
    "okay",
    "two",
    "different",
    "services",
    "record",
    "mo",
    "engines",
    "anyone",
    "port",
    "numbers",
    "nodes",
    "right",
    "communities",
    "one",
    "god",
    "created",
    "automatically",
    "enter",
    "car",
    "demo",
    "one",
    "created",
    "okay",
    "engines",
    "one",
    "created",
    "communities",
    "comes",
    "specifying",
    "container",
    "cluster",
    "okay",
    "let",
    "go",
    "back",
    "yes",
    "similarly",
    "want",
    "delete",
    "deployment",
    "use",
    "command",
    "cube",
    "cdl",
    "delete",
    "deployment",
    "followed",
    "name",
    "deployment",
    "right",
    "pretty",
    "simple",
    "way",
    "otherwise",
    "dashboard",
    "delete",
    "like",
    "showed",
    "click",
    "click",
    "delete",
    "want",
    "scale",
    "scale",
    "deployment",
    "mine",
    "one",
    "porridge",
    "right",
    "let",
    "one",
    "thing",
    "let",
    "go",
    "engines",
    "service",
    "let",
    "try",
    "accessing",
    "particular",
    "service",
    "local",
    "host",
    "okay",
    "perfect",
    "also",
    "says",
    "welcome",
    "engines",
    "right",
    "understand",
    "port",
    "mapping",
    "worked",
    "going",
    "service",
    "get",
    "know",
    "port",
    "number",
    "access",
    "host",
    "machine",
    "right",
    "internal",
    "container",
    "port",
    "map",
    "particular",
    "port",
    "mine",
    "okay",
    "one",
    "work",
    "also",
    "use",
    "cluster",
    "ip",
    "thing",
    "trust",
    "ripe",
    "going",
    "basically",
    "ip",
    "using",
    "containers",
    "access",
    "right",
    "body",
    "ip",
    "whatever",
    "running",
    "containers",
    "accessible",
    "cluster",
    "thing",
    "right",
    "let",
    "close",
    "pages",
    "deploy",
    "application",
    "cli",
    "comes",
    "last",
    "part",
    "video",
    "nothing",
    "deployment",
    "via",
    "yaman",
    "file",
    "deployment",
    "file",
    "write",
    "yawm",
    "al",
    "code",
    "right",
    "either",
    "write",
    "yawm",
    "al",
    "code",
    "json",
    "code",
    "correct",
    "code",
    "written",
    "jama",
    "format",
    "fact",
    "already",
    "machine",
    "ls",
    "yeah",
    "deployment",
    "dotty",
    "alright",
    "let",
    "show",
    "yamen",
    "file",
    "okay",
    "specify",
    "various",
    "configurations",
    "similar",
    "using",
    "gui",
    "rider",
    "reducing",
    "cli",
    "something",
    "similar",
    "gesture",
    "specify",
    "everything",
    "one",
    "particular",
    "file",
    "see",
    "specify",
    "api",
    "version",
    "okay",
    "using",
    "extensions",
    "dot",
    "slash",
    "b",
    "1",
    "beta",
    "okay",
    "simply",
    "specify",
    "version",
    "1",
    "either",
    "next",
    "important",
    "line",
    "kind",
    "kind",
    "important",
    "specify",
    "kind",
    "file",
    "deployment",
    "file",
    "pod",
    "deployment",
    "container",
    "deployment",
    "overall",
    "deployment",
    "said",
    "deployment",
    "okay",
    "want",
    "deploy",
    "containers",
    "also",
    "along",
    "pot",
    "saying",
    "deployment",
    "case",
    "want",
    "deploy",
    "pod",
    "realistically",
    "need",
    "okay",
    "would",
    "deploy",
    "case",
    "want",
    "deploy",
    "pot",
    "go",
    "ahead",
    "write",
    "port",
    "specify",
    "different",
    "containers",
    "okay",
    "case",
    "complete",
    "deployment",
    "right",
    "pods",
    "services",
    "containers",
    "go",
    "ahead",
    "write",
    "things",
    "metadata",
    "specify",
    "name",
    "application",
    "specify",
    "want",
    "put",
    "name",
    "also",
    "like",
    "warden",
    "okay",
    "save",
    "important",
    "part",
    "back",
    "part",
    "set",
    "number",
    "replicas",
    "remember",
    "told",
    "something",
    "called",
    "replication",
    "controller",
    "controls",
    "number",
    "ports",
    "running",
    "line",
    "set",
    "means",
    "two",
    "pods",
    "running",
    "particular",
    "application",
    "verdun",
    "okay",
    "exactly",
    "spec",
    "ab",
    "saying",
    "want",
    "containers",
    "intended",
    "container",
    "line",
    "two",
    "containers",
    "inside",
    "first",
    "container",
    "want",
    "create",
    "name",
    "front",
    "end",
    "okay",
    "using",
    "engines",
    "image",
    "similarly",
    "port",
    "number",
    "would",
    "active",
    "container",
    "port",
    "right",
    "saying",
    "want",
    "second",
    "container",
    "container",
    "could",
    "could",
    "rename",
    "anything",
    "say",
    "back",
    "end",
    "choose",
    "image",
    "want",
    "probably",
    "choose",
    "httpd",
    "image",
    "also",
    "okay",
    "say",
    "port",
    "running",
    "say",
    "container",
    "port",
    "run",
    "put",
    "number",
    "88",
    "right",
    "simple",
    "right",
    "since",
    "first",
    "video",
    "tutorial",
    "important",
    "takeaways",
    "yawm",
    "al",
    "file",
    "configuration",
    "specular",
    "specify",
    "containers",
    "yes",
    "everything",
    "json",
    "format",
    "intel",
    "dacians",
    "things",
    "okay",
    "even",
    "extra",
    "space",
    "anywhere",
    "real",
    "file",
    "would",
    "throw",
    "invalid",
    "error",
    "make",
    "sure",
    "make",
    "sure",
    "specify",
    "containers",
    "appropriately",
    "going",
    "one",
    "container",
    "well",
    "good",
    "two",
    "containers",
    "make",
    "sure",
    "intend",
    "right",
    "way",
    "specify",
    "number",
    "pods",
    "want",
    "give",
    "name",
    "deployment",
    "mainly",
    "established",
    "read",
    "rules",
    "okay",
    "done",
    "save",
    "close",
    "yamen",
    "file",
    "okay",
    "deployment",
    "djamel",
    "straight",
    "away",
    "upload",
    "table",
    "file",
    "kubernetes",
    "okay",
    "way",
    "application",
    "would",
    "straight",
    "deployed",
    "okay",
    "command",
    "cube",
    "cereal",
    "create",
    "f",
    "name",
    "file",
    "okay",
    "let",
    "copy",
    "name",
    "file",
    "deployment",
    "djamel",
    "let",
    "hit",
    "enter",
    "perfect",
    "deployment",
    "third",
    "deployment",
    "vardhan",
    "also",
    "created",
    "right",
    "check",
    "deployments",
    "earlier",
    "command",
    "nothing",
    "cube",
    "cdl",
    "get",
    "deployments",
    "okay",
    "get",
    "deployment",
    "audiometer",
    "sorry",
    "get",
    "deployments",
    "see",
    "adder",
    "guard",
    "mo",
    "engines",
    "verdun",
    "funny",
    "thing",
    "noticed",
    "said",
    "want",
    "replicas",
    "right",
    "pods",
    "desire",
    "currently",
    "date",
    "one",
    "okay",
    "update",
    "brilliant",
    "available",
    "0",
    "let",
    "give",
    "seconds",
    "23",
    "seconds",
    "think",
    "board",
    "would",
    "started",
    "let",
    "go",
    "back",
    "dashboard",
    "verify",
    "third",
    "deployment",
    "comes",
    "okay",
    "perfect",
    "going",
    "work",
    "okay",
    "probably",
    "going",
    "take",
    "time",
    "containers",
    "restarting",
    "let",
    "give",
    "time",
    "could",
    "well",
    "fact",
    "node",
    "less",
    "resource",
    "right",
    "many",
    "deployments",
    "could",
    "reason",
    "could",
    "go",
    "ahead",
    "delete",
    "deployments",
    "node",
    "handle",
    "many",
    "containers",
    "pods",
    "right",
    "let",
    "delete",
    "particular",
    "deployment",
    "rings",
    "deployment",
    "let",
    "also",
    "delete",
    "adder",
    "car",
    "demo",
    "deployment",
    "mine",
    "okay",
    "let",
    "refresh",
    "wait",
    "happen",
    "okay",
    "instead",
    "could",
    "simple",
    "deployment",
    "right",
    "let",
    "go",
    "back",
    "terminal",
    "let",
    "delete",
    "deployment",
    "okay",
    "let",
    "redeployed",
    "cube",
    "cdl",
    "delete",
    "deployment",
    "okay",
    "deployment",
    "deleted",
    "okay",
    "let",
    "clear",
    "screen",
    "let",
    "g",
    "edit",
    "yamen",
    "file",
    "let",
    "make",
    "things",
    "simpler",
    "let",
    "delete",
    "container",
    "let",
    "save",
    "right",
    "close",
    "let",
    "create",
    "deployment",
    "okay",
    "created",
    "let",
    "go",
    "refresh",
    "let",
    "see",
    "happens",
    "okay",
    "time",
    "green",
    "healthy",
    "nodes",
    "successful",
    "least",
    "going",
    "successful",
    "container",
    "creating",
    "perfect",
    "two",
    "parts",
    "mine",
    "running",
    "paws",
    "running",
    "right",
    "running",
    "node",
    "1",
    "pause",
    "two",
    "deployments",
    "replica",
    "set",
    "services",
    "right",
    "engines",
    "basement",
    "used",
    "well",
    "good",
    "also",
    "working",
    "guys",
    "yeah",
    "right",
    "try",
    "upload",
    "maybe",
    "error",
    "probably",
    "arm",
    "file",
    "could",
    "developments",
    "small",
    "mistake",
    "could",
    "known",
    "many",
    "containers",
    "running",
    "could",
    "reasons",
    "anyways",
    "deployed",
    "yamen",
    "file",
    "right",
    "kind",
    "brings",
    "us",
    "end",
    "session",
    "showed",
    "demonstration",
    "deploying",
    "containers",
    "three",
    "different",
    "ways",
    "cli",
    "dashboard",
    "yamen",
    "files",
    "hey",
    "everyone",
    "reyshma",
    "edureka",
    "today",
    "learning",
    "ansible",
    "first",
    "let",
    "us",
    "look",
    "topics",
    "learning",
    "today",
    "well",
    "quite",
    "long",
    "list",
    "means",
    "learning",
    "lot",
    "things",
    "today",
    "let",
    "us",
    "take",
    "look",
    "one",
    "one",
    "first",
    "see",
    "problems",
    "configuration",
    "management",
    "configuration",
    "management",
    "help",
    "solve",
    "see",
    "ansible",
    "different",
    "features",
    "ansible",
    "see",
    "nasa",
    "implemented",
    "civil",
    "solve",
    "problems",
    "see",
    "use",
    "ansible",
    "orchestration",
    "provisioning",
    "configuration",
    "management",
    "application",
    "deployment",
    "security",
    "end",
    "write",
    "ansible",
    "playbooks",
    "install",
    "lamp",
    "stack",
    "node",
    "machine",
    "host",
    "website",
    "note",
    "machine",
    "tell",
    "problems",
    "let",
    "us",
    "first",
    "understand",
    "configuration",
    "management",
    "actually",
    "well",
    "configuration",
    "management",
    "actually",
    "management",
    "software",
    "top",
    "hardware",
    "maintains",
    "consistency",
    "product",
    "based",
    "requirements",
    "design",
    "physical",
    "functional",
    "attributes",
    "maintain",
    "consistency",
    "configuration",
    "management",
    "applied",
    "entire",
    "life",
    "cycle",
    "system",
    "hence",
    "provides",
    "good",
    "visibility",
    "control",
    "say",
    "visibility",
    "means",
    "continuously",
    "check",
    "monitor",
    "performances",
    "assistants",
    "time",
    "performance",
    "system",
    "degrading",
    "configuration",
    "management",
    "system",
    "notify",
    "hence",
    "prevent",
    "errors",
    "actually",
    "occurs",
    "control",
    "mean",
    "power",
    "change",
    "anything",
    "servers",
    "failed",
    "reconfigure",
    "repair",
    "running",
    "even",
    "replace",
    "server",
    "needed",
    "also",
    "configuration",
    "management",
    "system",
    "holds",
    "entire",
    "historical",
    "data",
    "infrastructure",
    "doc",
    "men",
    "snapshots",
    "every",
    "version",
    "infrastructure",
    "overall",
    "configuration",
    "management",
    "process",
    "facilitates",
    "orderly",
    "management",
    "system",
    "information",
    "system",
    "changes",
    "use",
    "beneficial",
    "purposes",
    "let",
    "us",
    "proceed",
    "next",
    "topic",
    "see",
    "problems",
    "configuration",
    "management",
    "configuration",
    "management",
    "solved",
    "understand",
    "configuration",
    "management",
    "well",
    "let",
    "see",
    "need",
    "configuration",
    "management",
    "necessaries",
    "behind",
    "configuration",
    "management",
    "dependent",
    "upon",
    "certain",
    "number",
    "factors",
    "certain",
    "number",
    "reasons",
    "let",
    "us",
    "take",
    "look",
    "one",
    "one",
    "first",
    "problem",
    "managing",
    "multiple",
    "servers",
    "earlier",
    "every",
    "system",
    "managed",
    "hand",
    "mean",
    "login",
    "via",
    "ssh",
    "make",
    "changes",
    "log",
    "imagine",
    "system",
    "administrator",
    "would",
    "make",
    "changes",
    "multiple",
    "number",
    "servers",
    "task",
    "logging",
    "making",
    "changes",
    "longing",
    "repeatedly",
    "would",
    "take",
    "lot",
    "time",
    "time",
    "left",
    "system",
    "administrators",
    "monitor",
    "performances",
    "system",
    "continuously",
    "safe",
    "time",
    "servers",
    "would",
    "fail",
    "took",
    "lot",
    "time",
    "even",
    "detect",
    "faulty",
    "server",
    "even",
    "time",
    "repair",
    "configuration",
    "scripts",
    "wrote",
    "complex",
    "hard",
    "make",
    "changes",
    "configuration",
    "management",
    "system",
    "came",
    "picture",
    "divided",
    "systems",
    "infrastructure",
    "according",
    "dedicated",
    "tasks",
    "design",
    "architecture",
    "organize",
    "system",
    "efficient",
    "way",
    "like",
    "proved",
    "web",
    "servers",
    "together",
    "database",
    "servers",
    "together",
    "application",
    "servers",
    "together",
    "process",
    "known",
    "baselining",
    "let",
    "example",
    "say",
    "wanted",
    "install",
    "lamp",
    "stack",
    "system",
    "lamp",
    "stack",
    "software",
    "bundle",
    "l",
    "stands",
    "linux",
    "apache",
    "mysql",
    "p",
    "php",
    "need",
    "different",
    "software",
    "different",
    "purposes",
    "like",
    "need",
    "apache",
    "server",
    "host",
    "web",
    "pages",
    "php",
    "web",
    "development",
    "need",
    "linux",
    "operating",
    "system",
    "mysql",
    "data",
    "definition",
    "language",
    "data",
    "manipulation",
    "language",
    "since",
    "systems",
    "infrastructure",
    "baseline",
    "would",
    "know",
    "exactly",
    "install",
    "software",
    "example",
    "use",
    "apache",
    "web",
    "server",
    "database",
    "install",
    "mysql",
    "also",
    "begin",
    "easy",
    "monitor",
    "entire",
    "system",
    "example",
    "web",
    "pages",
    "running",
    "would",
    "know",
    "something",
    "wrong",
    "web",
    "servers",
    "go",
    "check",
    "check",
    "database",
    "servers",
    "application",
    "servers",
    "similarly",
    "able",
    "insert",
    "data",
    "extract",
    "data",
    "database",
    "would",
    "know",
    "something",
    "wrong",
    "database",
    "servers",
    "need",
    "check",
    "matter",
    "configuration",
    "management",
    "system",
    "baselining",
    "organized",
    "mess",
    "system",
    "efficient",
    "way",
    "manage",
    "monitor",
    "servers",
    "efficiently",
    "let",
    "us",
    "see",
    "second",
    "problem",
    "scaling",
    "scaling",
    "see",
    "nowadays",
    "come",
    "requirements",
    "time",
    "might",
    "scale",
    "scale",
    "systems",
    "fly",
    "something",
    "always",
    "plan",
    "ahead",
    "scaling",
    "infrastructure",
    "always",
    "mean",
    "buy",
    "new",
    "hardware",
    "place",
    "anywhere",
    "haphazardly",
    "also",
    "need",
    "provision",
    "configure",
    "new",
    "machines",
    "properly",
    "configuration",
    "management",
    "system",
    "already",
    "got",
    "infrastructure",
    "baselined",
    "know",
    "exactly",
    "new",
    "machines",
    "going",
    "work",
    "according",
    "dedicated",
    "task",
    "actually",
    "place",
    "scripts",
    "configuration",
    "management",
    "uses",
    "reusable",
    "use",
    "scripts",
    "use",
    "configure",
    "older",
    "machines",
    "configure",
    "new",
    "machines",
    "well",
    "let",
    "explain",
    "example",
    "let",
    "explain",
    "example",
    "let",
    "say",
    "working",
    "website",
    "decide",
    "hold",
    "mega",
    "sale",
    "new",
    "year",
    "christmas",
    "sale",
    "anything",
    "obvious",
    "going",
    "huge",
    "rise",
    "traffic",
    "might",
    "need",
    "web",
    "servers",
    "handle",
    "amount",
    "requests",
    "might",
    "even",
    "need",
    "load",
    "balancers",
    "maybe",
    "distribute",
    "amount",
    "traffic",
    "onto",
    "web",
    "servers",
    "changes",
    "however",
    "need",
    "made",
    "short",
    "span",
    "time",
    "got",
    "necessary",
    "hardware",
    "also",
    "need",
    "provision",
    "accordingly",
    "configuration",
    "management",
    "easily",
    "provision",
    "new",
    "machines",
    "using",
    "either",
    "recipes",
    "play",
    "books",
    "kind",
    "script",
    "configuration",
    "management",
    "uses",
    "also",
    "sale",
    "need",
    "many",
    "web",
    "servers",
    "load",
    "balancer",
    "disable",
    "using",
    "easy",
    "scripts",
    "well",
    "also",
    "scaling",
    "important",
    "using",
    "cloud",
    "services",
    "need",
    "machines",
    "point",
    "keeping",
    "scale",
    "well",
    "reconfigure",
    "entire",
    "infrastructure",
    "well",
    "configuration",
    "management",
    "easy",
    "anything",
    "auto",
    "scale",
    "scale",
    "infrastructure",
    "think",
    "understood",
    "problem",
    "configuration",
    "management",
    "salted",
    "let",
    "us",
    "take",
    "look",
    "third",
    "problem",
    "third",
    "problem",
    "work",
    "velocity",
    "developers",
    "affected",
    "system",
    "administrators",
    "taking",
    "time",
    "configure",
    "server",
    "developers",
    "written",
    "code",
    "next",
    "job",
    "deploy",
    "different",
    "servers",
    "like",
    "test",
    "servers",
    "production",
    "servers",
    "testing",
    "releasing",
    "every",
    "server",
    "managed",
    "hand",
    "system",
    "administrators",
    "would",
    "thing",
    "log",
    "server",
    "configure",
    "properly",
    "making",
    "changes",
    "thing",
    "servers",
    "taking",
    "lot",
    "time",
    "devops",
    "game",
    "picture",
    "already",
    "agility",
    "developers",
    "end",
    "able",
    "release",
    "new",
    "software",
    "frequently",
    "taking",
    "lot",
    "time",
    "system",
    "administrators",
    "configure",
    "servers",
    "testing",
    "developers",
    "would",
    "wait",
    "test",
    "results",
    "highly",
    "hamper",
    "word",
    "velocity",
    "developers",
    "configuration",
    "management",
    "system",
    "administrator",
    "got",
    "access",
    "configuration",
    "management",
    "tool",
    "allowed",
    "configure",
    "servers",
    "one",
    "go",
    "write",
    "configurations",
    "write",
    "list",
    "software",
    "need",
    "provision",
    "servers",
    "deploy",
    "servers",
    "one",
    "go",
    "agility",
    "even",
    "came",
    "system",
    "administrators",
    "well",
    "configuration",
    "management",
    "developers",
    "system",
    "administrators",
    "finally",
    "able",
    "work",
    "base",
    "configuration",
    "management",
    "solve",
    "third",
    "problem",
    "let",
    "us",
    "take",
    "look",
    "last",
    "problem",
    "last",
    "problem",
    "rolling",
    "back",
    "today",
    "scenario",
    "everyone",
    "wants",
    "change",
    "need",
    "keep",
    "making",
    "changes",
    "frequently",
    "customers",
    "start",
    "losing",
    "interest",
    "things",
    "stay",
    "need",
    "keep",
    "releasing",
    "new",
    "features",
    "upgrade",
    "application",
    "even",
    "giants",
    "like",
    "amazon",
    "facebook",
    "still",
    "unsure",
    "users",
    "going",
    "like",
    "imagine",
    "users",
    "like",
    "would",
    "roll",
    "back",
    "previous",
    "version",
    "let",
    "see",
    "creates",
    "problem",
    "configuration",
    "management",
    "let",
    "say",
    "got",
    "old",
    "version",
    "version",
    "one",
    "upgrading",
    "changing",
    "configurations",
    "production",
    "server",
    "deleting",
    "old",
    "configurations",
    "completely",
    "deploying",
    "new",
    "version",
    "users",
    "like",
    "would",
    "reconfigure",
    "server",
    "old",
    "configurations",
    "take",
    "lot",
    "time",
    "application",
    "going",
    "amount",
    "time",
    "need",
    "reconfiguring",
    "server",
    "might",
    "create",
    "problem",
    "using",
    "configuration",
    "management",
    "system",
    "know",
    "documents",
    "every",
    "version",
    "infrastructure",
    "upgrading",
    "configuration",
    "management",
    "remove",
    "configurations",
    "older",
    "version",
    "well",
    "documented",
    "kept",
    "newer",
    "version",
    "deployed",
    "users",
    "like",
    "time",
    "older",
    "configuration",
    "version",
    "already",
    "documented",
    "switch",
    "back",
    "old",
    "version",
    "wo",
    "take",
    "time",
    "upgrade",
    "roll",
    "back",
    "application",
    "zero",
    "downtime",
    "zero",
    "downtime",
    "means",
    "application",
    "would",
    "zero",
    "time",
    "means",
    "users",
    "notice",
    "application",
    "went",
    "achieve",
    "seamlessly",
    "configuration",
    "management",
    "system",
    "solved",
    "problems",
    "guys",
    "hope",
    "understood",
    "management",
    "let",
    "us",
    "move",
    "next",
    "topic",
    "question",
    "incorporate",
    "configuration",
    "management",
    "system",
    "well",
    "using",
    "configuration",
    "management",
    "tools",
    "let",
    "take",
    "look",
    "available",
    "configuration",
    "management",
    "tools",
    "got",
    "four",
    "popular",
    "tools",
    "available",
    "market",
    "right",
    "got",
    "ansible",
    "saul",
    "stack",
    "configuration",
    "management",
    "tool",
    "mean",
    "directly",
    "push",
    "configurations",
    "node",
    "machines",
    "directly",
    "chef",
    "puppet",
    "pull",
    "based",
    "configuration",
    "management",
    "tools",
    "means",
    "rely",
    "central",
    "server",
    "configurations",
    "pull",
    "configurations",
    "central",
    "server",
    "configuration",
    "management",
    "tools",
    "available",
    "market",
    "four",
    "popular",
    "ones",
    "let",
    "know",
    "ansible",
    "ansible",
    "configuration",
    "management",
    "tool",
    "used",
    "provisioning",
    "orchestration",
    "application",
    "deployment",
    "automation",
    "push",
    "based",
    "configuration",
    "management",
    "tool",
    "like",
    "told",
    "automate",
    "entire",
    "infrastructure",
    "gives",
    "large",
    "productivity",
    "gains",
    "automate",
    "pretty",
    "much",
    "anything",
    "automate",
    "cloud",
    "networks",
    "servers",
    "processes",
    "let",
    "us",
    "move",
    "next",
    "topic",
    "let",
    "us",
    "see",
    "features",
    "ansible",
    "first",
    "feature",
    "simple",
    "simple",
    "install",
    "setup",
    "easy",
    "learn",
    "ansible",
    "play",
    "books",
    "written",
    "simple",
    "data",
    "serialization",
    "language",
    "known",
    "gamal",
    "pretty",
    "much",
    "like",
    "english",
    "anyone",
    "understand",
    "easy",
    "learn",
    "next",
    "feature",
    "ansible",
    "preferred",
    "configuration",
    "management",
    "tools",
    "agent",
    "kallus",
    "means",
    "need",
    "kind",
    "agents",
    "kind",
    "plan",
    "software",
    "manage",
    "node",
    "machines",
    "install",
    "ansible",
    "control",
    "machine",
    "make",
    "ssh",
    "connection",
    "nodes",
    "start",
    "pushing",
    "configurations",
    "right",
    "away",
    "next",
    "feature",
    "powerful",
    "even",
    "though",
    "call",
    "ansible",
    "simple",
    "require",
    "agent",
    "capabilities",
    "model",
    "complex",
    "workflows",
    "comes",
    "interesting",
    "feature",
    "called",
    "batteries",
    "included",
    "means",
    "got",
    "everything",
    "already",
    "need",
    "ansible",
    "comes",
    "750",
    "inbuilt",
    "modules",
    "use",
    "purpose",
    "project",
    "efficient",
    "modules",
    "ansible",
    "comes",
    "extensible",
    "means",
    "customize",
    "according",
    "needs",
    "need",
    "use",
    "programming",
    "language",
    "originally",
    "written",
    "choose",
    "kind",
    "programming",
    "language",
    "comfortable",
    "customize",
    "modules",
    "use",
    "power",
    "liberty",
    "ansible",
    "gives",
    "let",
    "us",
    "take",
    "look",
    "case",
    "study",
    "nasa",
    "problems",
    "nasa",
    "facing",
    "ansible",
    "solved",
    "problems",
    "nasa",
    "organization",
    "sending",
    "men",
    "moon",
    "carrying",
    "missions",
    "mars",
    "launching",
    "satellites",
    "monitor",
    "earth",
    "earth",
    "even",
    "monitoring",
    "galaxies",
    "planets",
    "well",
    "imagine",
    "kind",
    "amount",
    "data",
    "nasa",
    "might",
    "dealing",
    "applications",
    "traditional",
    "hardware",
    "based",
    "data",
    "center",
    "wanted",
    "move",
    "environment",
    "wanted",
    "better",
    "agility",
    "wanted",
    "better",
    "adaptive",
    "planning",
    "also",
    "wanted",
    "save",
    "costs",
    "lot",
    "money",
    "spent",
    "maintenance",
    "hardware",
    "also",
    "wanted",
    "security",
    "nasa",
    "government",
    "organization",
    "united",
    "states",
    "america",
    "obviously",
    "wanted",
    "security",
    "nasa",
    "government",
    "organization",
    "united",
    "states",
    "america",
    "hold",
    "lot",
    "confidential",
    "details",
    "well",
    "government",
    "always",
    "rely",
    "hardware",
    "store",
    "confidential",
    "files",
    "needed",
    "security",
    "time",
    "hardware",
    "fails",
    "afford",
    "lose",
    "data",
    "wanted",
    "move",
    "65",
    "applications",
    "hardware",
    "environment",
    "environment",
    "let",
    "us",
    "take",
    "look",
    "problem",
    "migration",
    "data",
    "cloud",
    "environment",
    "contacted",
    "company",
    "called",
    "frozen",
    "frozen",
    "company",
    "cloud",
    "broker",
    "integrator",
    "implement",
    "solutions",
    "meet",
    "needs",
    "security",
    "phase",
    "responsible",
    "making",
    "transition",
    "nasa",
    "wanted",
    "make",
    "transition",
    "short",
    "span",
    "time",
    "applications",
    "migrated",
    "cloud",
    "environment",
    "aws",
    "accounts",
    "virtual",
    "private",
    "clouds",
    "previously",
    "defined",
    "got",
    "accumulated",
    "single",
    "data",
    "space",
    "huge",
    "chunk",
    "data",
    "nasa",
    "way",
    "centrally",
    "managing",
    "even",
    "simple",
    "tasks",
    "like",
    "giving",
    "particular",
    "system",
    "administrator",
    "access",
    "rights",
    "particular",
    "account",
    "became",
    "tedious",
    "job",
    "nasa",
    "wanted",
    "automate",
    "deployment",
    "apps",
    "needed",
    "management",
    "system",
    "situation",
    "nasa",
    "moved",
    "cloud",
    "see",
    "aws",
    "accounts",
    "virtual",
    "private",
    "cows",
    "got",
    "accumulated",
    "made",
    "huge",
    "chunk",
    "data",
    "everyone",
    "excessing",
    "directly",
    "problem",
    "managing",
    "credentials",
    "users",
    "different",
    "teams",
    "nasa",
    "needed",
    "divided",
    "inventories",
    "resources",
    "groups",
    "number",
    "hosts",
    "also",
    "wanted",
    "divide",
    "users",
    "two",
    "different",
    "teams",
    "give",
    "team",
    "different",
    "credentials",
    "permissions",
    "also",
    "look",
    "granular",
    "level",
    "user",
    "team",
    "could",
    "also",
    "different",
    "credentials",
    "permissions",
    "let",
    "say",
    "want",
    "give",
    "team",
    "leader",
    "particular",
    "team",
    "access",
    "kind",
    "data",
    "want",
    "users",
    "team",
    "access",
    "data",
    "also",
    "nasa",
    "wanted",
    "define",
    "different",
    "credentials",
    "individual",
    "member",
    "well",
    "wanted",
    "divide",
    "data",
    "according",
    "projects",
    "jobs",
    "also",
    "wanted",
    "move",
    "chaos",
    "organized",
    "manner",
    "adopted",
    "ansible",
    "tower",
    "ansible",
    "tower",
    "ansible",
    "ansible",
    "tower",
    "provides",
    "dashboard",
    "provides",
    "status",
    "summary",
    "hosts",
    "job",
    "simple",
    "tower",
    "interface",
    "managing",
    "organization",
    "provides",
    "easy",
    "use",
    "user",
    "interface",
    "managing",
    "quick",
    "deployments",
    "monitoring",
    "configurations",
    "let",
    "see",
    "answer",
    "build",
    "credential",
    "management",
    "system",
    "could",
    "give",
    "different",
    "access",
    "permission",
    "individual",
    "user",
    "teams",
    "also",
    "divided",
    "user",
    "teams",
    "single",
    "individual",
    "users",
    "well",
    "job",
    "assignment",
    "system",
    "also",
    "assign",
    "jobs",
    "using",
    "ansible",
    "tower",
    "x",
    "suppose",
    "let",
    "say",
    "assigned",
    "job",
    "one",
    "single",
    "user",
    "job",
    "another",
    "single",
    "user",
    "job",
    "could",
    "assigned",
    "particular",
    "team",
    "similarly",
    "whole",
    "inventory",
    "also",
    "managed",
    "servers",
    "let",
    "say",
    "dedicated",
    "particular",
    "mission",
    "grouped",
    "together",
    "host",
    "machines",
    "systems",
    "well",
    "sansa",
    "built",
    "help",
    "nasa",
    "organize",
    "everything",
    "let",
    "us",
    "take",
    "look",
    "dashboard",
    "ansible",
    "tower",
    "provides",
    "us",
    "screenshot",
    "dashboard",
    "initial",
    "level",
    "see",
    "right",
    "zero",
    "host",
    "nothing",
    "showing",
    "ansible",
    "tower",
    "provides",
    "top",
    "check",
    "users",
    "teams",
    "manage",
    "credentials",
    "check",
    "different",
    "projects",
    "inventories",
    "make",
    "job",
    "templates",
    "schedule",
    "job",
    "well",
    "schedule",
    "jobs",
    "provide",
    "every",
    "job",
    "particular",
    "id",
    "track",
    "check",
    "job",
    "status",
    "whether",
    "job",
    "successful",
    "failed",
    "since",
    "ansible",
    "tower",
    "configuration",
    "management",
    "system",
    "hold",
    "historical",
    "data",
    "well",
    "check",
    "job",
    "statuses",
    "past",
    "month",
    "month",
    "check",
    "host",
    "status",
    "well",
    "check",
    "many",
    "hosts",
    "running",
    "see",
    "host",
    "count",
    "dashboard",
    "ansible",
    "tower",
    "provides",
    "much",
    "ease",
    "monitoring",
    "systems",
    "easy",
    "use",
    "ansible",
    "dashboard",
    "anyone",
    "company",
    "anyone",
    "use",
    "let",
    "us",
    "see",
    "results",
    "nasa",
    "achieved",
    "used",
    "ansible",
    "tower",
    "updating",
    "used",
    "take",
    "one",
    "hour",
    "time",
    "using",
    "ansible",
    "got",
    "five",
    "minutes",
    "security",
    "patching",
    "updates",
    "process",
    "requires",
    "45",
    "minutes",
    "provisioning",
    "os",
    "accounts",
    "done",
    "10",
    "minutes",
    "earlier",
    "application",
    "stack",
    "time",
    "required",
    "one",
    "two",
    "hours",
    "done",
    "10",
    "minutes",
    "also",
    "achieved",
    "near",
    "ram",
    "monitoring",
    "baselining",
    "standard",
    "amazon",
    "machine",
    "image",
    "used",
    "manual",
    "process",
    "even",
    "need",
    "manual",
    "interference",
    "became",
    "background",
    "invisible",
    "process",
    "see",
    "ansible",
    "drastically",
    "changed",
    "overall",
    "management",
    "system",
    "nasa",
    "guys",
    "hope",
    "understood",
    "answered",
    "help",
    "nasa",
    "question",
    "may",
    "ask",
    "time",
    "chat",
    "window",
    "let",
    "us",
    "proceed",
    "next",
    "topic",
    "others",
    "used",
    "ansible",
    "let",
    "us",
    "take",
    "look",
    "ansible",
    "architecture",
    "understand",
    "ansible",
    "decide",
    "use",
    "ansible",
    "overall",
    "ansible",
    "architecture",
    "got",
    "answer",
    "automation",
    "engine",
    "got",
    "inventory",
    "playbook",
    "inside",
    "automation",
    "engine",
    "got",
    "configuration",
    "management",
    "database",
    "host",
    "configuration",
    "management",
    "database",
    "repository",
    "acts",
    "data",
    "warehouse",
    "installations",
    "holds",
    "data",
    "relating",
    "collection",
    "assets",
    "commonly",
    "known",
    "configuration",
    "items",
    "also",
    "holds",
    "data",
    "describe",
    "relationships",
    "assets",
    "repository",
    "configuration",
    "management",
    "data",
    "got",
    "ansible",
    "automation",
    "engine",
    "got",
    "inventory",
    "year",
    "inventory",
    "nothing",
    "list",
    "ip",
    "addresses",
    "host",
    "machines",
    "told",
    "use",
    "configuration",
    "management",
    "use",
    "configuration",
    "management",
    "tool",
    "like",
    "ansible",
    "use",
    "ansible",
    "well",
    "using",
    "playbooks",
    "playbooks",
    "describe",
    "entire",
    "workflow",
    "system",
    "inside",
    "playbooks",
    "got",
    "modules",
    "apis",
    "plugins",
    "modules",
    "core",
    "files",
    "play",
    "books",
    "contain",
    "set",
    "place",
    "set",
    "tasks",
    "inside",
    "every",
    "task",
    "particular",
    "module",
    "run",
    "play",
    "book",
    "modules",
    "actually",
    "get",
    "executed",
    "node",
    "machines",
    "modules",
    "core",
    "files",
    "like",
    "told",
    "ansible",
    "already",
    "comes",
    "inbuilt",
    "modules",
    "use",
    "also",
    "customize",
    "well",
    "comes",
    "different",
    "cloud",
    "modules",
    "database",
    "modules",
    "worry",
    "showing",
    "use",
    "modules",
    "ansible",
    "different",
    "apis",
    "well",
    "well",
    "api",
    "answerable",
    "meant",
    "direct",
    "consumption",
    "support",
    "command",
    "line",
    "tools",
    "example",
    "python",
    "api",
    "apis",
    "also",
    "used",
    "transport",
    "cloud",
    "services",
    "whether",
    "public",
    "private",
    "use",
    "got",
    "plugins",
    "plug",
    "special",
    "kind",
    "module",
    "allowed",
    "execute",
    "ansible",
    "task",
    "job",
    "bill",
    "step",
    "plugins",
    "pieces",
    "code",
    "augment",
    "ansible",
    "score",
    "functionality",
    "ansible",
    "also",
    "comes",
    "number",
    "handy",
    "plugins",
    "use",
    "example",
    "action",
    "plugins",
    "cash",
    "plugins",
    "callback",
    "plugins",
    "also",
    "create",
    "plugins",
    "well",
    "let",
    "tell",
    "exactly",
    "different",
    "module",
    "let",
    "give",
    "example",
    "action",
    "action",
    "plug",
    "modules",
    "start",
    "running",
    "playbook",
    "something",
    "needs",
    "done",
    "control",
    "machine",
    "well",
    "action",
    "plugins",
    "trigger",
    "action",
    "execute",
    "tasks",
    "controller",
    "machine",
    "calling",
    "actual",
    "modules",
    "getting",
    "executed",
    "playbook",
    "also",
    "special",
    "kind",
    "called",
    "connection",
    "plug",
    "allows",
    "connect",
    "docker",
    "containers",
    "note",
    "machine",
    "many",
    "finally",
    "host",
    "machine",
    "elected",
    "via",
    "ssh",
    "machines",
    "could",
    "either",
    "windows",
    "linux",
    "kind",
    "machines",
    "also",
    "let",
    "tell",
    "always",
    "needed",
    "use",
    "ssh",
    "connection",
    "use",
    "kind",
    "network",
    "authentication",
    "protocol",
    "use",
    "kerberos",
    "also",
    "use",
    "connection",
    "plugins",
    "well",
    "fairly",
    "simple",
    "ansible",
    "architecture",
    "understood",
    "architecture",
    "let",
    "us",
    "write",
    "play",
    "book",
    "let",
    "tell",
    "write",
    "play",
    "book",
    "playbooks",
    "ansible",
    "simple",
    "files",
    "written",
    "html",
    "code",
    "yambol",
    "data",
    "serialization",
    "language",
    "think",
    "data",
    "serialization",
    "language",
    "translator",
    "breaking",
    "data",
    "structure",
    "serialize",
    "particular",
    "order",
    "reconstructed",
    "later",
    "use",
    "use",
    "reconstructed",
    "data",
    "structure",
    "environment",
    "even",
    "different",
    "environment",
    "control",
    "machine",
    "ansible",
    "installed",
    "writing",
    "playbooks",
    "let",
    "show",
    "structure",
    "write",
    "play",
    "book",
    "however",
    "play",
    "book",
    "starts",
    "three",
    "dashes",
    "top",
    "first",
    "mention",
    "list",
    "host",
    "machines",
    "means",
    "want",
    "playbook",
    "run",
    "mention",
    "variables",
    "gathering",
    "facts",
    "mention",
    "different",
    "tasks",
    "want",
    "remember",
    "task",
    "get",
    "executed",
    "order",
    "write",
    "example",
    "want",
    "install",
    "software",
    "first",
    "softer",
    "beef",
    "later",
    "make",
    "sure",
    "first",
    "task",
    "would",
    "install",
    "software",
    "next",
    "task",
    "would",
    "install",
    "software",
    "got",
    "handlers",
    "bottom",
    "handlers",
    "also",
    "tasks",
    "difference",
    "order",
    "execute",
    "handlers",
    "need",
    "sort",
    "triggers",
    "list",
    "tasks",
    "example",
    "use",
    "notify",
    "show",
    "example",
    "okay",
    "let",
    "show",
    "example",
    "playbook",
    "relate",
    "structure",
    "example",
    "ansible",
    "playbook",
    "install",
    "apache",
    "like",
    "told",
    "starts",
    "three",
    "dashes",
    "top",
    "remember",
    "every",
    "list",
    "starts",
    "dash",
    "front",
    "mentioned",
    "name",
    "one",
    "group",
    "mention",
    "name",
    "several",
    "groups",
    "want",
    "run",
    "playbook",
    "got",
    "tasks",
    "give",
    "name",
    "task",
    "install",
    "apache",
    "use",
    "module",
    "using",
    "app",
    "module",
    "download",
    "package",
    "syntax",
    "writing",
    "app",
    "module",
    "give",
    "name",
    "package",
    "apache",
    "update",
    "cache",
    "equal",
    "yes",
    "means",
    "make",
    "sure",
    "app",
    "get",
    "already",
    "updated",
    "note",
    "machine",
    "installs",
    "apache",
    "2",
    "mentioned",
    "state",
    "equal",
    "latest",
    "means",
    "download",
    "latest",
    "version",
    "apache",
    "trigger",
    "using",
    "handlers",
    "right",
    "handler",
    "restart",
    "apache",
    "using",
    "service",
    "module",
    "name",
    "software",
    "want",
    "restart",
    "apache",
    "state",
    "able",
    "restart",
    "notify",
    "mentioned",
    "going",
    "handler",
    "whose",
    "job",
    "would",
    "restart",
    "apache",
    "2",
    "task",
    "handler",
    "would",
    "get",
    "executed",
    "restart",
    "apache",
    "simple",
    "playbook",
    "also",
    "writing",
    "similar",
    "kind",
    "playbooks",
    "later",
    "part",
    "learning",
    "looking",
    "little",
    "gibberish",
    "part",
    "clear",
    "doubts",
    "let",
    "us",
    "see",
    "use",
    "ansible",
    "understand",
    "applications",
    "use",
    "ansible",
    "application",
    "deployment",
    "configuration",
    "management",
    "security",
    "compliance",
    "provisioning",
    "orchestration",
    "let",
    "us",
    "take",
    "look",
    "one",
    "one",
    "first",
    "let",
    "us",
    "see",
    "use",
    "ansible",
    "orchestration",
    "well",
    "orchestration",
    "means",
    "let",
    "say",
    "defined",
    "configurations",
    "systems",
    "also",
    "need",
    "make",
    "sure",
    "configurations",
    "interact",
    "process",
    "orchestration",
    "decide",
    "different",
    "configurations",
    "different",
    "systems",
    "infrastructure",
    "would",
    "interact",
    "order",
    "maintain",
    "seamless",
    "flow",
    "application",
    "application",
    "deployments",
    "need",
    "orchestrated",
    "got",
    "services",
    "got",
    "databases",
    "got",
    "monitoring",
    "networks",
    "storage",
    "role",
    "play",
    "configuration",
    "deployment",
    "run",
    "ones",
    "expect",
    "right",
    "thing",
    "happens",
    "need",
    "need",
    "orchestration",
    "tool",
    "task",
    "happen",
    "proper",
    "order",
    "database",
    "backend",
    "server",
    "front",
    "end",
    "server",
    "removed",
    "load",
    "balancer",
    "gets",
    "upgraded",
    "networks",
    "would",
    "proper",
    "vlans",
    "configured",
    "ansible",
    "helps",
    "let",
    "give",
    "simple",
    "example",
    "understand",
    "better",
    "let",
    "say",
    "want",
    "host",
    "website",
    "node",
    "machines",
    "precisely",
    "going",
    "later",
    "part",
    "first",
    "order",
    "first",
    "install",
    "necessary",
    "software",
    "lamp",
    "stack",
    "deploy",
    "html",
    "php",
    "files",
    "web",
    "server",
    "gathering",
    "kind",
    "information",
    "web",
    "pages",
    "go",
    "inside",
    "database",
    "server",
    "want",
    "perform",
    "tasks",
    "make",
    "sure",
    "necessary",
    "software",
    "installed",
    "first",
    "deploy",
    "html",
    "php",
    "files",
    "web",
    "servers",
    "web",
    "servers",
    "party",
    "installed",
    "orchestration",
    "mention",
    "task",
    "needs",
    "carried",
    "task",
    "needs",
    "carried",
    "later",
    "ansible",
    "playbooks",
    "allow",
    "let",
    "see",
    "provisioning",
    "like",
    "provisioning",
    "english",
    "means",
    "provide",
    "something",
    "needed",
    "case",
    "ansible",
    "ansible",
    "make",
    "sure",
    "necessary",
    "software",
    "need",
    "application",
    "run",
    "properly",
    "installed",
    "environments",
    "infrastructure",
    "let",
    "us",
    "take",
    "look",
    "example",
    "understand",
    "provisioning",
    "actually",
    "want",
    "provision",
    "python",
    "web",
    "application",
    "hosting",
    "microsoft",
    "azure",
    "microsoft",
    "similar",
    "aws",
    "also",
    "cloud",
    "platform",
    "build",
    "applications",
    "let",
    "say",
    "want",
    "host",
    "developing",
    "python",
    "web",
    "application",
    "coding",
    "would",
    "need",
    "microsoft",
    "document",
    "database",
    "would",
    "need",
    "visual",
    "studio",
    "need",
    "install",
    "python",
    "also",
    "kind",
    "software",
    "development",
    "kit",
    "different",
    "apis",
    "ansible",
    "list",
    "name",
    "software",
    "development",
    "kits",
    "necessary",
    "software",
    "require",
    "coding",
    "web",
    "would",
    "require",
    "order",
    "develop",
    "web",
    "application",
    "list",
    "necessary",
    "software",
    "needing",
    "ansible",
    "playbook",
    "order",
    "develop",
    "web",
    "application",
    "testing",
    "code",
    "need",
    "microsoft",
    "azure",
    "document",
    "database",
    "would",
    "note",
    "visual",
    "studio",
    "kind",
    "testing",
    "software",
    "list",
    "software",
    "ansible",
    "playbook",
    "provision",
    "testing",
    "environment",
    "well",
    "thing",
    "deploying",
    "production",
    "server",
    "well",
    "sybil",
    "provision",
    "entire",
    "application",
    "stages",
    "coding",
    "stage",
    "testing",
    "production",
    "stage",
    "also",
    "guys",
    "hope",
    "understood",
    "provisioning",
    "let",
    "us",
    "move",
    "next",
    "topic",
    "see",
    "achieve",
    "configuration",
    "management",
    "ansible",
    "ansible",
    "configurations",
    "simple",
    "data",
    "descriptions",
    "infrastructure",
    "human",
    "readable",
    "machine",
    "possible",
    "app",
    "server",
    "requires",
    "nothing",
    "ssh",
    "key",
    "order",
    "start",
    "managing",
    "systems",
    "start",
    "managing",
    "without",
    "installing",
    "kind",
    "agent",
    "client",
    "software",
    "avoid",
    "problem",
    "managing",
    "management",
    "common",
    "different",
    "automation",
    "systems",
    "example",
    "got",
    "host",
    "machines",
    "apache",
    "web",
    "servers",
    "installed",
    "host",
    "machines",
    "also",
    "got",
    "php",
    "mysql",
    "installed",
    "want",
    "make",
    "configuration",
    "changes",
    "want",
    "update",
    "party",
    "update",
    "mysql",
    "directly",
    "push",
    "new",
    "configuration",
    "details",
    "directly",
    "onto",
    "host",
    "machines",
    "note",
    "machines",
    "server",
    "easily",
    "using",
    "ansible",
    "playbooks",
    "let",
    "us",
    "move",
    "next",
    "topic",
    "let",
    "us",
    "see",
    "application",
    "deployment",
    "made",
    "easier",
    "ansible",
    "ansible",
    "simplest",
    "way",
    "deploy",
    "applications",
    "gives",
    "power",
    "deploy",
    "applications",
    "reliably",
    "consistently",
    "common",
    "framework",
    "configure",
    "needed",
    "services",
    "well",
    "push",
    "application",
    "artifacts",
    "one",
    "system",
    "ansible",
    "write",
    "play",
    "books",
    "description",
    "desired",
    "state",
    "system",
    "usually",
    "kept",
    "source",
    "control",
    "sensible",
    "hard",
    "work",
    "get",
    "systems",
    "state",
    "matter",
    "state",
    "currently",
    "play",
    "books",
    "make",
    "installations",
    "upgrades",
    "management",
    "repeatable",
    "ansible",
    "write",
    "play",
    "books",
    "descriptions",
    "desired",
    "state",
    "systems",
    "usually",
    "kept",
    "source",
    "control",
    "simple",
    "hard",
    "work",
    "get",
    "systems",
    "desired",
    "state",
    "matter",
    "state",
    "currently",
    "playbooks",
    "make",
    "installations",
    "upgrades",
    "management",
    "repeatable",
    "reliable",
    "way",
    "let",
    "say",
    "using",
    "version",
    "control",
    "system",
    "like",
    "get",
    "developing",
    "app",
    "also",
    "using",
    "jenkins",
    "continuous",
    "integration",
    "jenkins",
    "extract",
    "code",
    "get",
    "every",
    "time",
    "new",
    "commit",
    "making",
    "software",
    "built",
    "later",
    "build",
    "get",
    "deployed",
    "test",
    "server",
    "testing",
    "changes",
    "kept",
    "making",
    "code",
    "base",
    "continuously",
    "would",
    "configure",
    "test",
    "production",
    "server",
    "continuously",
    "well",
    "according",
    "changes",
    "ansible",
    "continuously",
    "keeps",
    "checking",
    "version",
    "control",
    "system",
    "configure",
    "test",
    "production",
    "server",
    "accordingly",
    "quickly",
    "hence",
    "makes",
    "application",
    "deployment",
    "like",
    "piece",
    "cake",
    "guys",
    "think",
    "understood",
    "application",
    "deployment",
    "worry",
    "part",
    "also",
    "deploying",
    "applications",
    "different",
    "servers",
    "well",
    "let",
    "us",
    "see",
    "achieve",
    "security",
    "ansible",
    "today",
    "complex",
    "environment",
    "security",
    "paramount",
    "need",
    "security",
    "systems",
    "need",
    "security",
    "data",
    "data",
    "customers",
    "data",
    "well",
    "must",
    "able",
    "define",
    "means",
    "systems",
    "also",
    "need",
    "able",
    "simply",
    "apply",
    "security",
    "also",
    "need",
    "constantly",
    "monitor",
    "systems",
    "order",
    "ensure",
    "remain",
    "compliant",
    "security",
    "ansible",
    "simply",
    "define",
    "security",
    "systems",
    "using",
    "playbooks",
    "playbooks",
    "set",
    "firewall",
    "rules",
    "log",
    "different",
    "users",
    "groups",
    "even",
    "apply",
    "custom",
    "security",
    "policies",
    "well",
    "ansible",
    "also",
    "works",
    "mind",
    "point",
    "group",
    "rights",
    "civil",
    "rules",
    "apply",
    "aesthetic",
    "disa",
    "stick",
    "cybersecurity",
    "methodology",
    "standardizing",
    "security",
    "protocols",
    "within",
    "network",
    "servers",
    "different",
    "computers",
    "also",
    "compliant",
    "existing",
    "ssh",
    "win",
    "rm",
    "protocols",
    "also",
    "reason",
    "ansible",
    "preferred",
    "configuration",
    "management",
    "tools",
    "also",
    "compatible",
    "different",
    "security",
    "verification",
    "tools",
    "like",
    "opens",
    "gap",
    "stigma",
    "tools",
    "like",
    "opens",
    "cap",
    "stigma",
    "carries",
    "timely",
    "inspection",
    "software",
    "inventory",
    "check",
    "kind",
    "vulnerabilities",
    "allows",
    "take",
    "steps",
    "prevent",
    "attacks",
    "actually",
    "happen",
    "apply",
    "security",
    "entire",
    "infrastructure",
    "using",
    "ansible",
    "ansible",
    "let",
    "us",
    "write",
    "ansible",
    "playbooks",
    "going",
    "going",
    "install",
    "lamp",
    "stack",
    "going",
    "host",
    "website",
    "apache",
    "server",
    "also",
    "collect",
    "data",
    "webpage",
    "store",
    "mysql",
    "server",
    "guys",
    "let",
    "get",
    "started",
    "using",
    "oracle",
    "virtualbox",
    "manager",
    "created",
    "two",
    "virtual",
    "machines",
    "first",
    "ansible",
    "control",
    "machine",
    "ansible",
    "host",
    "machine",
    "ansible",
    "control",
    "machine",
    "machine",
    "installed",
    "simple",
    "writing",
    "playbooks",
    "answer",
    "host",
    "one",
    "going",
    "note",
    "machine",
    "playbooks",
    "going",
    "get",
    "deployed",
    "machine",
    "deploy",
    "website",
    "hosting",
    "website",
    "answer",
    "host",
    "one",
    "go",
    "control",
    "machine",
    "start",
    "writing",
    "playbooks",
    "ansible",
    "control",
    "machine",
    "let",
    "go",
    "terminal",
    "first",
    "terminal",
    "ansible",
    "control",
    "machine",
    "already",
    "installed",
    "ansible",
    "already",
    "made",
    "ssh",
    "connection",
    "note",
    "machine",
    "let",
    "hear",
    "become",
    "root",
    "user",
    "first",
    "know",
    "always",
    "need",
    "become",
    "root",
    "user",
    "order",
    "use",
    "ansible",
    "becoming",
    "root",
    "user",
    "convenience",
    "like",
    "get",
    "root",
    "privileges",
    "using",
    "ansible",
    "pseudo",
    "user",
    "like",
    "let",
    "clear",
    "screen",
    "first",
    "start",
    "writing",
    "play",
    "boo",
    "status",
    "first",
    "check",
    "version",
    "ansible",
    "installed",
    "use",
    "command",
    "ansible",
    "version",
    "see",
    "got",
    "ansible",
    "two",
    "point",
    "two",
    "point",
    "zero",
    "point",
    "zero",
    "version",
    "let",
    "show",
    "host",
    "inventory",
    "file",
    "since",
    "got",
    "one",
    "node",
    "machine",
    "going",
    "show",
    "exactly",
    "ip",
    "address",
    "node",
    "machine",
    "stored",
    "open",
    "hosts",
    "file",
    "going",
    "open",
    "file",
    "show",
    "using",
    "g",
    "edit",
    "editor",
    "default",
    "location",
    "host",
    "inventory",
    "file",
    "sea",
    "supposed",
    "posts",
    "host",
    "inventory",
    "file",
    "mentioned",
    "ip",
    "address",
    "host",
    "machine",
    "one",
    "ninety",
    "two",
    "point",
    "one",
    "sixty",
    "eight",
    "point",
    "02",
    "named",
    "group",
    "name",
    "test",
    "servers",
    "always",
    "write",
    "name",
    "group",
    "square",
    "brackets",
    "one",
    "node",
    "machine",
    "one",
    "ip",
    "address",
    "many",
    "node",
    "machines",
    "let",
    "us",
    "ip",
    "address",
    "line",
    "simple",
    "even",
    "want",
    "group",
    "different",
    "name",
    "use",
    "different",
    "name",
    "use",
    "another",
    "square",
    "bracket",
    "put",
    "different",
    "name",
    "another",
    "set",
    "hosts",
    "okay",
    "let",
    "clear",
    "screen",
    "first",
    "first",
    "let",
    "test",
    "ssh",
    "connection",
    "whether",
    "working",
    "properly",
    "using",
    "ansible",
    "type",
    "command",
    "sybil",
    "pink",
    "name",
    "group",
    "host",
    "machines",
    "test",
    "servers",
    "case",
    "thank",
    "changed",
    "paul",
    "means",
    "ssh",
    "connection",
    "already",
    "established",
    "control",
    "machine",
    "note",
    "machine",
    "ready",
    "write",
    "playbooks",
    "start",
    "deploying",
    "notes",
    "first",
    "thing",
    "need",
    "write",
    "provisioning",
    "playbook",
    "since",
    "going",
    "host",
    "website",
    "would",
    "first",
    "need",
    "install",
    "necessary",
    "software",
    "writing",
    "provisioning",
    "playbook",
    "provision",
    "node",
    "machine",
    "using",
    "lamp",
    "stack",
    "let",
    "us",
    "write",
    "playbook",
    "install",
    "lamp",
    "stack",
    "note",
    "machine",
    "already",
    "written",
    "playbook",
    "going",
    "show",
    "using",
    "gia",
    "editor",
    "name",
    "provisioning",
    "playbook",
    "lamp",
    "stack",
    "extension",
    "aml",
    "file",
    "dot",
    "yml",
    "playbook",
    "let",
    "tell",
    "written",
    "playbook",
    "told",
    "every",
    "play",
    "book",
    "starts",
    "three",
    "dashes",
    "top",
    "three",
    "dashes",
    "given",
    "name",
    "playbook",
    "install",
    "apache",
    "php",
    "mysql",
    "already",
    "got",
    "l",
    "lamb",
    "using",
    "ubuntu",
    "machine",
    "linux",
    "operating",
    "system",
    "need",
    "install",
    "apache",
    "php",
    "mysql",
    "mention",
    "host",
    "want",
    "playbook",
    "get",
    "deployed",
    "mentioned",
    "want",
    "escalate",
    "privileges",
    "using",
    "become",
    "become",
    "user",
    "sometimes",
    "want",
    "become",
    "another",
    "user",
    "different",
    "actually",
    "logged",
    "remote",
    "machine",
    "use",
    "escalating",
    "privileges",
    "tools",
    "like",
    "pseudo",
    "gain",
    "root",
    "privileges",
    "used",
    "become",
    "become",
    "user",
    "becoming",
    "user",
    "root",
    "using",
    "become",
    "true",
    "top",
    "activates",
    "privilege",
    "escalation",
    "become",
    "root",
    "user",
    "remote",
    "machine",
    "gather",
    "facts",
    "true",
    "gather",
    "useful",
    "variables",
    "remote",
    "host",
    "exactly",
    "gather",
    "sort",
    "files",
    "kind",
    "keys",
    "used",
    "later",
    "different",
    "playbook",
    "know",
    "every",
    "playbook",
    "list",
    "tasks",
    "need",
    "perform",
    "list",
    "tasks",
    "going",
    "perform",
    "since",
    "provisioning",
    "playbook",
    "means",
    "installing",
    "necessary",
    "softwares",
    "needed",
    "order",
    "host",
    "website",
    "note",
    "machine",
    "first",
    "installing",
    "apache",
    "given",
    "task",
    "name",
    "install",
    "apache2",
    "using",
    "package",
    "module",
    "syntax",
    "package",
    "module",
    "first",
    "specify",
    "name",
    "package",
    "going",
    "download",
    "apache",
    "2",
    "put",
    "state",
    "equal",
    "present",
    "since",
    "installing",
    "something",
    "first",
    "time",
    "wo",
    "package",
    "present",
    "node",
    "machine",
    "putting",
    "state",
    "equal",
    "present",
    "similarly",
    "want",
    "delete",
    "something",
    "put",
    "state",
    "equal",
    "absent",
    "works",
    "way",
    "installed",
    "apache",
    "php",
    "module",
    "installed",
    "php",
    "client",
    "php",
    "emperor",
    "php",
    "gd",
    "library",
    "install",
    "package",
    "php",
    "mysql",
    "finally",
    "installed",
    "mysql",
    "server",
    "similar",
    "way",
    "installed",
    "party",
    "simple",
    "playbook",
    "provision",
    "node",
    "machine",
    "actually",
    "playbooks",
    "simple",
    "hope",
    "understood",
    "write",
    "book",
    "let",
    "tell",
    "something",
    "always",
    "keep",
    "mind",
    "writing",
    "playbooks",
    "make",
    "sure",
    "always",
    "extra",
    "careful",
    "indentation",
    "gamal",
    "data",
    "serialization",
    "language",
    "differentiates",
    "elements",
    "different",
    "indentations",
    "example",
    "got",
    "name",
    "name",
    "also",
    "see",
    "indentations",
    "different",
    "name",
    "entire",
    "playbook",
    "name",
    "particular",
    "task",
    "two",
    "different",
    "things",
    "need",
    "different",
    "indentations",
    "ones",
    "similar",
    "indentations",
    "known",
    "siblings",
    "like",
    "one",
    "also",
    "thing",
    "also",
    "installing",
    "kind",
    "package",
    "also",
    "installing",
    "kind",
    "package",
    "similar",
    "careful",
    "indentation",
    "otherwise",
    "create",
    "problem",
    "waiting",
    "let",
    "us",
    "run",
    "playbook",
    "clear",
    "screen",
    "first",
    "order",
    "run",
    "play",
    "book",
    "command",
    "using",
    "run",
    "answerable",
    "playbook",
    "ansible",
    "playbook",
    "name",
    "file",
    "lamp",
    "stack",
    "dot",
    "jama",
    "go",
    "okay",
    "able",
    "connect",
    "note",
    "machine",
    "apache",
    "2",
    "installed",
    "done",
    "playbook",
    "successfully",
    "run",
    "know",
    "know",
    "seeing",
    "common",
    "return",
    "values",
    "common",
    "return",
    "values",
    "like",
    "okay",
    "changed",
    "unreachable",
    "fate",
    "give",
    "status",
    "summary",
    "playbook",
    "run",
    "okay",
    "equal",
    "8",
    "means",
    "eight",
    "tasks",
    "run",
    "okay",
    "changed",
    "equal",
    "means",
    "something",
    "note",
    "changed",
    "obviously",
    "install",
    "new",
    "packages",
    "note",
    "machine",
    "showing",
    "changed",
    "equal",
    "7",
    "unreachable",
    "equal",
    "0",
    "means",
    "zero",
    "host",
    "unreachable",
    "failed",
    "equal",
    "0",
    "means",
    "zero",
    "tasks",
    "fate",
    "playbook",
    "run",
    "successfully",
    "note",
    "let",
    "us",
    "check",
    "note",
    "machine",
    "see",
    "apache",
    "mysql",
    "installed",
    "let",
    "us",
    "go",
    "node",
    "machine",
    "node",
    "machine",
    "let",
    "us",
    "check",
    "knife",
    "apache",
    "server",
    "installed",
    "going",
    "web",
    "browser",
    "web",
    "browser",
    "note",
    "machine",
    "let",
    "go",
    "local",
    "host",
    "check",
    "apache",
    "web",
    "server",
    "downloaded",
    "works",
    "default",
    "web",
    "page",
    "apache2",
    "web",
    "server",
    "know",
    "sure",
    "apache",
    "installed",
    "note",
    "machine",
    "let",
    "us",
    "see",
    "mysql",
    "server",
    "installed",
    "let",
    "go",
    "terminal",
    "terminal",
    "load",
    "machine",
    "want",
    "check",
    "mysql",
    "installed",
    "use",
    "following",
    "command",
    "mice",
    "ql",
    "user",
    "root",
    "p",
    "sudo",
    "password",
    "password",
    "mysql",
    "mysql",
    "server",
    "also",
    "successfully",
    "installed",
    "note",
    "machine",
    "let",
    "go",
    "back",
    "control",
    "machine",
    "let",
    "left",
    "back",
    "control",
    "machine",
    "already",
    "provisioned",
    "note",
    "machine",
    "let",
    "see",
    "need",
    "next",
    "since",
    "deploying",
    "website",
    "node",
    "machine",
    "let",
    "first",
    "show",
    "first",
    "web",
    "page",
    "looks",
    "like",
    "let",
    "first",
    "show",
    "first",
    "web",
    "page",
    "looks",
    "like",
    "going",
    "first",
    "web",
    "page",
    "index",
    "dot",
    "html",
    "got",
    "two",
    "php",
    "files",
    "also",
    "salvi",
    "actually",
    "deploying",
    "files",
    "onto",
    "node",
    "machine",
    "let",
    "open",
    "first",
    "webpage",
    "going",
    "first",
    "web",
    "page",
    "going",
    "going",
    "ask",
    "name",
    "email",
    "registration",
    "page",
    "eureka",
    "register",
    "name",
    "email",
    "want",
    "name",
    "email",
    "go",
    "database",
    "need",
    "create",
    "database",
    "also",
    "need",
    "create",
    "table",
    "name",
    "email",
    "data",
    "store",
    "write",
    "another",
    "play",
    "book",
    "using",
    "database",
    "modules",
    "clear",
    "screen",
    "first",
    "already",
    "written",
    "playbook",
    "let",
    "show",
    "using",
    "g",
    "edit",
    "editor",
    "name",
    "playbook",
    "school",
    "module",
    "okay",
    "playbook",
    "like",
    "playbook",
    "starts",
    "three",
    "dashes",
    "mentioned",
    "host",
    "one",
    "host",
    "know",
    "could",
    "mentioned",
    "either",
    "one",
    "ip",
    "address",
    "directly",
    "even",
    "given",
    "name",
    "group",
    "written",
    "know",
    "many",
    "group",
    "names",
    "many",
    "notes",
    "want",
    "playbook",
    "run",
    "node",
    "machines",
    "use",
    "playbook",
    "get",
    "deployed",
    "note",
    "machines",
    "another",
    "way",
    "mentioning",
    "hosts",
    "using",
    "remote",
    "user",
    "root",
    "another",
    "method",
    "escalate",
    "privileges",
    "similar",
    "become",
    "become",
    "user",
    "remote",
    "user",
    "root",
    "privileges",
    "playbook",
    "would",
    "run",
    "list",
    "tasks",
    "playbook",
    "since",
    "connect",
    "mysql",
    "server",
    "present",
    "note",
    "machine",
    "need",
    "particular",
    "software",
    "mysql",
    "python",
    "module",
    "download",
    "install",
    "using",
    "tip",
    "dip",
    "python",
    "package",
    "manager",
    "install",
    "download",
    "python",
    "packages",
    "first",
    "need",
    "install",
    "pippin",
    "note",
    "machine",
    "since",
    "told",
    "tasks",
    "write",
    "playbook",
    "gets",
    "executed",
    "order",
    "write",
    "first",
    "task",
    "install",
    "pip",
    "using",
    "app",
    "module",
    "given",
    "name",
    "package",
    "python",
    "bit",
    "state",
    "equal",
    "present",
    "installing",
    "software",
    "using",
    "bit",
    "stalling",
    "related",
    "software",
    "well",
    "also",
    "installing",
    "library",
    "blind",
    "deaf",
    "using",
    "pip",
    "installing",
    "mysql",
    "python",
    "module",
    "notice",
    "consider",
    "orchestration",
    "playbook",
    "making",
    "sure",
    "pip",
    "get",
    "installed",
    "first",
    "papers",
    "installed",
    "using",
    "pip",
    "install",
    "another",
    "python",
    "package",
    "see",
    "right",
    "going",
    "use",
    "database",
    "modules",
    "getting",
    "new",
    "user",
    "access",
    "database",
    "creating",
    "database",
    "named",
    "creating",
    "mysql",
    "user",
    "used",
    "mysql",
    "user",
    "database",
    "module",
    "ansible",
    "comes",
    "syntax",
    "mysql",
    "user",
    "module",
    "recreate",
    "name",
    "new",
    "user",
    "edureka",
    "mentioned",
    "password",
    "preview",
    "means",
    "privileges",
    "want",
    "give",
    "new",
    "user",
    "granting",
    "privileges",
    "database",
    "since",
    "creating",
    "first",
    "time",
    "want",
    "state",
    "present",
    "similarly",
    "using",
    "mysqldb",
    "module",
    "create",
    "database",
    "mysql",
    "server",
    "named",
    "ed",
    "simple",
    "syntax",
    "using",
    "mysqldb",
    "module",
    "give",
    "name",
    "database",
    "db",
    "equal",
    "state",
    "equal",
    "present",
    "create",
    "database",
    "named",
    "eddie",
    "also",
    "also",
    "need",
    "create",
    "table",
    "inside",
    "database",
    "storing",
    "name",
    "email",
    "details",
    "right",
    "unfortunately",
    "ansible",
    "mysql",
    "table",
    "creating",
    "modules",
    "used",
    "command",
    "module",
    "command",
    "module",
    "directly",
    "going",
    "use",
    "sql",
    "queries",
    "create",
    "table",
    "syntax",
    "something",
    "like",
    "write",
    "remember",
    "want",
    "use",
    "since",
    "writing",
    "mysql",
    "query",
    "started",
    "mysql",
    "user",
    "eddie",
    "wake",
    "us",
    "user",
    "password",
    "etc",
    "wake",
    "e",
    "write",
    "query",
    "need",
    "execute",
    "mysql",
    "server",
    "write",
    "single",
    "quotations",
    "written",
    "query",
    "create",
    "table",
    "create",
    "table",
    "eg",
    "name",
    "email",
    "mention",
    "name",
    "database",
    "want",
    "create",
    "table",
    "orchestration",
    "playbook",
    "clear",
    "screen",
    "first",
    "command",
    "ansible",
    "playbook",
    "name",
    "play",
    "book",
    "mysql",
    "modding",
    "go",
    "common",
    "return",
    "values",
    "tell",
    "playbook",
    "done",
    "successfully",
    "fail",
    "task",
    "unreachable",
    "host",
    "change",
    "task",
    "note",
    "machine",
    "packages",
    "downloaded",
    "node",
    "machine",
    "well",
    "provisioned",
    "properly",
    "orchestrated",
    "waiting",
    "let",
    "deploy",
    "application",
    "well",
    "clear",
    "screen",
    "first",
    "let",
    "tell",
    "exactly",
    "need",
    "order",
    "deploy",
    "application",
    "case",
    "three",
    "php",
    "files",
    "html",
    "files",
    "need",
    "deploy",
    "note",
    "machine",
    "order",
    "display",
    "html",
    "files",
    "php",
    "files",
    "web",
    "server",
    "note",
    "machine",
    "need",
    "need",
    "copy",
    "files",
    "control",
    "machine",
    "proper",
    "location",
    "notebook",
    "machine",
    "using",
    "playbooks",
    "let",
    "show",
    "playbook",
    "copy",
    "files",
    "name",
    "father",
    "deployed",
    "website",
    "playbook",
    "deploy",
    "application",
    "used",
    "three",
    "dashes",
    "name",
    "playbook",
    "copy",
    "host",
    "know",
    "going",
    "test",
    "servers",
    "using",
    "privilege",
    "escalation",
    "using",
    "become",
    "become",
    "user",
    "gather",
    "facts",
    "true",
    "list",
    "task",
    "task",
    "copy",
    "file",
    "control",
    "machine",
    "paste",
    "destination",
    "machine",
    "node",
    "machine",
    "copying",
    "used",
    "copy",
    "module",
    "copy",
    "module",
    "file",
    "module",
    "ansible",
    "comes",
    "syntax",
    "copy",
    "module",
    "need",
    "mention",
    "source",
    "source",
    "path",
    "file",
    "contained",
    "control",
    "machine",
    "home",
    "eureka",
    "documents",
    "name",
    "file",
    "index",
    "dot",
    "html",
    "wanted",
    "go",
    "far",
    "www",
    "html",
    "index",
    "dot",
    "html",
    "copying",
    "files",
    "location",
    "order",
    "display",
    "web",
    "page",
    "similarly",
    "copied",
    "php",
    "files",
    "using",
    "copy",
    "module",
    "mentioned",
    "source",
    "destination",
    "copying",
    "destination",
    "source",
    "think",
    "would",
    "questions",
    "easiest",
    "playbook",
    "written",
    "today",
    "let",
    "us",
    "deploy",
    "application",
    "need",
    "run",
    "play",
    "book",
    "need",
    "clear",
    "screen",
    "lot",
    "stuff",
    "screen",
    "right",
    "let",
    "run",
    "playbook",
    "go",
    "quick",
    "nothing",
    "much",
    "copy",
    "files",
    "one",
    "location",
    "another",
    "small",
    "files",
    "let",
    "us",
    "go",
    "back",
    "host",
    "machine",
    "see",
    "working",
    "back",
    "host",
    "machine",
    "let",
    "go",
    "web",
    "browser",
    "check",
    "let",
    "refresh",
    "first",
    "web",
    "page",
    "application",
    "successfully",
    "deployed",
    "let",
    "us",
    "enter",
    "name",
    "email",
    "check",
    "getting",
    "entered",
    "database",
    "let",
    "put",
    "name",
    "email",
    "add",
    "new",
    "record",
    "created",
    "successfully",
    "means",
    "getting",
    "inserted",
    "database",
    "let",
    "go",
    "back",
    "view",
    "congratulations",
    "successfully",
    "written",
    "playbooks",
    "deploy",
    "application",
    "provision",
    "node",
    "machines",
    "using",
    "playbooks",
    "orchestrated",
    "using",
    "playbooks",
    "even",
    "though",
    "beginning",
    "seemed",
    "like",
    "huge",
    "task",
    "play",
    "made",
    "easy",
    "hello",
    "everyone",
    "saurabh",
    "edureka",
    "today",
    "session",
    "focus",
    "puppet",
    "without",
    "ado",
    "let",
    "us",
    "move",
    "forward",
    "look",
    "agenda",
    "today",
    "first",
    "see",
    "need",
    "configuration",
    "management",
    "various",
    "problems",
    "industries",
    "facing",
    "configuration",
    "management",
    "introduced",
    "understand",
    "exactly",
    "configuration",
    "management",
    "look",
    "various",
    "configuration",
    "management",
    "tools",
    "focus",
    "puppet",
    "see",
    "puppet",
    "architecture",
    "along",
    "various",
    "puppet",
    "components",
    "finally",
    "hands",
    "part",
    "learn",
    "deploy",
    "sql",
    "php",
    "using",
    "puppet",
    "move",
    "forward",
    "see",
    "various",
    "problems",
    "configuration",
    "management",
    "first",
    "problem",
    "guys",
    "let",
    "us",
    "understand",
    "example",
    "suppose",
    "system",
    "administrator",
    "job",
    "deploy",
    "mean",
    "stack",
    "say",
    "four",
    "nodes",
    "right",
    "means",
    "dark",
    "actually",
    "mongo",
    "db",
    "enterprise",
    "angularjs",
    "need",
    "deploy",
    "means",
    "dark",
    "four",
    "notes",
    "big",
    "issue",
    "manually",
    "deploy",
    "four",
    "nodes",
    "happens",
    "infrastructure",
    "becomes",
    "huge",
    "may",
    "need",
    "deploy",
    "means",
    "tax",
    "hundreds",
    "notes",
    "approach",
    "task",
    "ca",
    "manually",
    "manually",
    "take",
    "lot",
    "time",
    "plus",
    "wastage",
    "resources",
    "along",
    "chance",
    "human",
    "error",
    "mean",
    "increases",
    "risk",
    "human",
    "error",
    "right",
    "take",
    "example",
    "forward",
    "see",
    "problems",
    "configuration",
    "management",
    "second",
    "problem",
    "guys",
    "fine",
    "like",
    "previous",
    "step",
    "deployed",
    "means",
    "one",
    "hundreds",
    "nodes",
    "manually",
    "happens",
    "updated",
    "version",
    "mongo",
    "db",
    "available",
    "organization",
    "wants",
    "shift",
    "updated",
    "version",
    "want",
    "go",
    "updated",
    "version",
    "mongo",
    "db",
    "actually",
    "go",
    "manually",
    "update",
    "mongodb",
    "nodes",
    "infrastructure",
    "right",
    "take",
    "lot",
    "time",
    "happens",
    "updated",
    "version",
    "software",
    "certain",
    "glitches",
    "company",
    "wants",
    "roll",
    "back",
    "previous",
    "version",
    "software",
    "mongo",
    "db",
    "case",
    "want",
    "go",
    "back",
    "previous",
    "version",
    "remember",
    "kept",
    "historical",
    "record",
    "mongo",
    "db",
    "updating",
    "mean",
    "updated",
    "mongodb",
    "biannually",
    "nodes",
    "record",
    "previous",
    "version",
    "mongo",
    "db",
    "need",
    "need",
    "go",
    "manually",
    "reinstall",
    "mongodb",
    "nodes",
    "rollback",
    "painful",
    "task",
    "mean",
    "used",
    "take",
    "lot",
    "time",
    "third",
    "problem",
    "guys",
    "happens",
    "updated",
    "mongodb",
    "previous",
    "step",
    "say",
    "development",
    "environment",
    "testing",
    "environment",
    "talk",
    "production",
    "environment",
    "still",
    "using",
    "previous",
    "version",
    "mongodb",
    "happens",
    "might",
    "certain",
    "applications",
    "work",
    "compatible",
    "previous",
    "version",
    "mongodb",
    "right",
    "happened",
    "developers",
    "write",
    "code",
    "works",
    "fine",
    "environment",
    "beat",
    "laptop",
    "works",
    "fine",
    "till",
    "testing",
    "well",
    "reaches",
    "production",
    "since",
    "using",
    "older",
    "version",
    "mongo",
    "db",
    "compatible",
    "application",
    "developers",
    "built",
    "wo",
    "work",
    "properly",
    "might",
    "certain",
    "functions",
    "wo",
    "work",
    "properly",
    "production",
    "environment",
    "inconsistency",
    "computing",
    "environment",
    "due",
    "application",
    "might",
    "work",
    "development",
    "environment",
    "product",
    "working",
    "properly",
    "move",
    "forward",
    "tell",
    "important",
    "configuration",
    "management",
    "help",
    "use",
    "case",
    "configuration",
    "management",
    "add",
    "new",
    "york",
    "stock",
    "exchange",
    "right",
    "best",
    "example",
    "configuration",
    "management",
    "think",
    "happened",
    "software",
    "glitch",
    "prevented",
    "new",
    "york",
    "stock",
    "exchange",
    "trading",
    "stocks",
    "almost",
    "90",
    "minutes",
    "led",
    "millions",
    "dollars",
    "loss",
    "new",
    "software",
    "installation",
    "caused",
    "problem",
    "software",
    "installed",
    "8",
    "twenty",
    "trading",
    "terminals",
    "system",
    "tested",
    "night",
    "however",
    "morning",
    "failed",
    "operate",
    "properly",
    "terminals",
    "need",
    "switch",
    "back",
    "old",
    "software",
    "might",
    "think",
    "failure",
    "new",
    "york",
    "stock",
    "exchange",
    "configuration",
    "management",
    "process",
    "reality",
    "success",
    "result",
    "proper",
    "configuration",
    "management",
    "process",
    "nyse",
    "recovered",
    "situation",
    "90",
    "minutes",
    "pretty",
    "fast",
    "let",
    "tell",
    "guys",
    "problem",
    "continued",
    "longer",
    "consequences",
    "would",
    "severe",
    "proper",
    "configuration",
    "management",
    "new",
    "york",
    "stock",
    "exchange",
    "painted",
    "loss",
    "millions",
    "dollars",
    "able",
    "roll",
    "back",
    "previous",
    "version",
    "software",
    "within",
    "90",
    "minutes",
    "move",
    "forward",
    "see",
    "exactly",
    "configuration",
    "management",
    "configuration",
    "management",
    "configuration",
    "management",
    "basically",
    "process",
    "helps",
    "manage",
    "changes",
    "infrastructure",
    "systematic",
    "structured",
    "way",
    "updating",
    "software",
    "keep",
    "record",
    "things",
    "updated",
    "change",
    "making",
    "infrastructure",
    "things",
    "achieve",
    "configuration",
    "management",
    "achieve",
    "help",
    "important",
    "concept",
    "called",
    "infrastructure",
    "code",
    "infrastructure",
    "code",
    "infrastructure",
    "code",
    "simply",
    "means",
    "writing",
    "code",
    "infrastructure",
    "let",
    "us",
    "refer",
    "diagram",
    "present",
    "front",
    "screen",
    "happens",
    "infrastructure",
    "code",
    "write",
    "code",
    "infrastructure",
    "one",
    "central",
    "location",
    "call",
    "server",
    "call",
    "master",
    "whatever",
    "want",
    "call",
    "right",
    "code",
    "deployed",
    "onto",
    "dev",
    "environment",
    "test",
    "environment",
    "product",
    "environment",
    "basically",
    "entire",
    "infrastructure",
    "right",
    "whatever",
    "want",
    "configure",
    "configure",
    "help",
    "one",
    "central",
    "location",
    "let",
    "us",
    "take",
    "example",
    "right",
    "suppose",
    "want",
    "deploy",
    "apache",
    "tomcat",
    "say",
    "notes",
    "one",
    "location",
    "write",
    "code",
    "install",
    "apache",
    "tomcat",
    "push",
    "onto",
    "nodes",
    "want",
    "configure",
    "advantage",
    "get",
    "first",
    "first",
    "problem",
    "recall",
    "configuring",
    "large",
    "infrastructure",
    "hectic",
    "job",
    "configuration",
    "management",
    "becomes",
    "easy",
    "becomes",
    "easy",
    "need",
    "write",
    "code",
    "one",
    "central",
    "location",
    "replicate",
    "hundreds",
    "notes",
    "easy",
    "need",
    "go",
    "manually",
    "install",
    "update",
    "software",
    "nodes",
    "right",
    "second",
    "problem",
    "roll",
    "back",
    "previous",
    "table",
    "version",
    "time",
    "happens",
    "since",
    "everything",
    "well",
    "documented",
    "central",
    "location",
    "rolling",
    "back",
    "previous",
    "version",
    "task",
    "third",
    "problem",
    "variation",
    "inconsistency",
    "various",
    "teams",
    "like",
    "dev",
    "team",
    "testament",
    "product",
    "team",
    "like",
    "environment",
    "computing",
    "environment",
    "different",
    "testing",
    "product",
    "help",
    "infrastructure",
    "code",
    "happens",
    "three",
    "environment",
    "tested",
    "product",
    "computing",
    "environment",
    "hope",
    "clear",
    "configuration",
    "management",
    "infrastructure",
    "code",
    "move",
    "forward",
    "see",
    "different",
    "type",
    "configuration",
    "management",
    "approaches",
    "two",
    "types",
    "configuration",
    "management",
    "approaches",
    "one",
    "push",
    "configuration",
    "another",
    "pull",
    "configuration",
    "right",
    "let",
    "tell",
    "push",
    "configuration",
    "first",
    "input",
    "configuration",
    "happens",
    "one",
    "centralized",
    "server",
    "configurations",
    "inside",
    "want",
    "configure",
    "certain",
    "amount",
    "nodes",
    "right",
    "say",
    "want",
    "configure",
    "notes",
    "shown",
    "diagram",
    "happens",
    "push",
    "configuration",
    "nodes",
    "certain",
    "commands",
    "need",
    "execute",
    "particular",
    "central",
    "location",
    "help",
    "command",
    "configurations",
    "present",
    "pushed",
    "onto",
    "nodes",
    "let",
    "us",
    "see",
    "happens",
    "pull",
    "configuration",
    "pull",
    "configuration",
    "one",
    "centralized",
    "server",
    "wo",
    "push",
    "configurations",
    "nodes",
    "happens",
    "nodes",
    "actually",
    "posed",
    "central",
    "server",
    "say",
    "5",
    "minutes",
    "10",
    "minutes",
    "basically",
    "periodic",
    "intervals",
    "right",
    "pose",
    "central",
    "servers",
    "configurations",
    "pull",
    "configurations",
    "central",
    "server",
    "need",
    "execute",
    "command",
    "nodes",
    "add",
    "automatically",
    "pull",
    "configurations",
    "centralized",
    "server",
    "pop",
    "chef",
    "uses",
    "full",
    "configuration",
    "talk",
    "push",
    "configuration",
    "ansible",
    "unsourced",
    "accuses",
    "push",
    "configuration",
    "move",
    "forward",
    "look",
    "various",
    "configuration",
    "management",
    "tools",
    "four",
    "widely",
    "adopted",
    "tools",
    "configuration",
    "management",
    "highlighted",
    "puppet",
    "session",
    "going",
    "focus",
    "puppet",
    "uses",
    "pull",
    "configuration",
    "talk",
    "saul",
    "stock",
    "uses",
    "push",
    "configuration",
    "ansible",
    "ansible",
    "also",
    "uses",
    "push",
    "listen",
    "chef",
    "also",
    "uses",
    "pulley",
    "configuration",
    "right",
    "pop",
    "chef",
    "uses",
    "pull",
    "configuration",
    "ansible",
    "solve",
    "stark",
    "uses",
    "push",
    "configuration",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "exactly",
    "puppet",
    "pop",
    "basically",
    "configuration",
    "management",
    "tool",
    "used",
    "deploy",
    "particular",
    "application",
    "configure",
    "nodes",
    "manager",
    "service",
    "like",
    "possibly",
    "take",
    "servers",
    "online",
    "offline",
    "required",
    "configure",
    "deploy",
    "certain",
    "package",
    "application",
    "onto",
    "node",
    "right",
    "help",
    "puppet",
    "ease",
    "architecture",
    "uses",
    "architecture",
    "let",
    "us",
    "understand",
    "example",
    "puppet",
    "master",
    "configurations",
    "present",
    "puppet",
    "agents",
    "right",
    "puppet",
    "agents",
    "pole",
    "central",
    "puppet",
    "master",
    "regular",
    "intervals",
    "whatever",
    "configurations",
    "present",
    "pull",
    "configuration",
    "basically",
    "let",
    "us",
    "move",
    "forward",
    "focus",
    "puppet",
    "master",
    "slave",
    "architecture",
    "also",
    "slave",
    "architecture",
    "guys",
    "happens",
    "puppet",
    "agent",
    "puppet",
    "node",
    "sends",
    "facts",
    "puppet",
    "master",
    "facts",
    "basically",
    "key",
    "value",
    "data",
    "pair",
    "represents",
    "aspect",
    "slave",
    "state",
    "aspect",
    "ip",
    "address",
    "time",
    "operating",
    "system",
    "whether",
    "virtual",
    "machine",
    "factor",
    "gathers",
    "basic",
    "information",
    "puppet",
    "slave",
    "hardware",
    "details",
    "network",
    "settings",
    "operating",
    "system",
    "type",
    "version",
    "ip",
    "addresses",
    "mark",
    "addresses",
    "things",
    "parts",
    "made",
    "available",
    "puppet",
    "masters",
    "manifest",
    "variables",
    "puppet",
    "master",
    "uses",
    "facts",
    "received",
    "puppet",
    "agent",
    "puppet",
    "node",
    "compile",
    "catalog",
    "catalog",
    "defines",
    "slave",
    "configured",
    "catalog",
    "document",
    "describes",
    "desired",
    "state",
    "resource",
    "puppet",
    "master",
    "manages",
    "honestly",
    "basically",
    "compilation",
    "resources",
    "puppet",
    "master",
    "applies",
    "given",
    "slave",
    "well",
    "relationship",
    "resources",
    "catalog",
    "compiled",
    "puppet",
    "master",
    "sent",
    "back",
    "node",
    "finally",
    "slave",
    "provides",
    "data",
    "implemented",
    "catalog",
    "sandbags",
    "report",
    "basically",
    "node",
    "agent",
    "sends",
    "report",
    "back",
    "configurations",
    "complete",
    "actually",
    "view",
    "puppet",
    "dashboard",
    "well",
    "happens",
    "connection",
    "node",
    "puppet",
    "agent",
    "puppet",
    "master",
    "happens",
    "help",
    "ssl",
    "secure",
    "encryption",
    "right",
    "move",
    "forward",
    "see",
    "actually",
    "connection",
    "puppet",
    "master",
    "puppet",
    "node",
    "happens",
    "puppet",
    "master",
    "slave",
    "connection",
    "happens",
    "happens",
    "first",
    "puppets",
    "slave",
    "requests",
    "puppet",
    "master",
    "certificate",
    "right",
    "sends",
    "request",
    "master",
    "certificate",
    "puppet",
    "master",
    "receives",
    "request",
    "send",
    "master",
    "certificate",
    "puppet",
    "slave",
    "received",
    "master",
    "certificate",
    "puppet",
    "master",
    "send",
    "request",
    "slave",
    "regarding",
    "certificate",
    "right",
    "request",
    "puppet",
    "agent",
    "send",
    "certificate",
    "puppet",
    "slave",
    "generate",
    "certificate",
    "send",
    "puppet",
    "master",
    "puppet",
    "master",
    "puppet",
    "master",
    "sign",
    "certificate",
    "alright",
    "signed",
    "certificate",
    "puppet",
    "slave",
    "actually",
    "request",
    "data",
    "right",
    "configurations",
    "finally",
    "puppet",
    "master",
    "send",
    "configurations",
    "puppets",
    "late",
    "puppet",
    "master",
    "slave",
    "communicates",
    "let",
    "show",
    "practically",
    "happens",
    "installed",
    "puppet",
    "master",
    "puppet",
    "slave",
    "sent",
    "west",
    "machines",
    "right",
    "using",
    "2",
    "virtual",
    "machines",
    "14",
    "puppet",
    "master",
    "another",
    "puppet",
    "sleep",
    "let",
    "us",
    "move",
    "forward",
    "execute",
    "practically",
    "puppet",
    "master",
    "virtual",
    "machine",
    "already",
    "created",
    "puppet",
    "master",
    "certificate",
    "puppet",
    "agent",
    "certificate",
    "right",
    "confirm",
    "command",
    "puppet",
    "third",
    "list",
    "display",
    "certificates",
    "pending",
    "puppet",
    "master",
    "mean",
    "pending",
    "approval",
    "master",
    "right",
    "currently",
    "certificates",
    "available",
    "go",
    "puppet",
    "agent",
    "fetch",
    "puppet",
    "master",
    "certificate",
    "generated",
    "earlier",
    "time",
    "generate",
    "puppet",
    "agent",
    "certificate",
    "send",
    "master",
    "signing",
    "puppet",
    "agent",
    "virtual",
    "machine",
    "told",
    "earlier",
    "well",
    "generate",
    "puppet",
    "agent",
    "certificate",
    "time",
    "fetch",
    "puppet",
    "master",
    "certificate",
    "agent",
    "certificate",
    "sent",
    "puppet",
    "master",
    "sign",
    "puppet",
    "agent",
    "certificate",
    "let",
    "us",
    "proceed",
    "type",
    "agent",
    "go",
    "right",
    "creating",
    "new",
    "ssl",
    "key",
    "puppet",
    "agent",
    "see",
    "logs",
    "sent",
    "certificate",
    "request",
    "fingerprint",
    "exiting",
    "certificate",
    "found",
    "wait",
    "sword",
    "disabled",
    "need",
    "need",
    "go",
    "back",
    "puppet",
    "master",
    "virtual",
    "machine",
    "signed",
    "particular",
    "certificate",
    "generated",
    "puppet",
    "agent",
    "want",
    "see",
    "list",
    "certificates",
    "need",
    "need",
    "type",
    "least",
    "told",
    "earlier",
    "well",
    "let",
    "us",
    "see",
    "certificates",
    "see",
    "certificate",
    "sent",
    "puppet",
    "agent",
    "right",
    "need",
    "sign",
    "particular",
    "sort",
    "type",
    "pop",
    "search",
    "sign",
    "name",
    "certificate",
    "puppet",
    "agent",
    "go",
    "successfully",
    "signed",
    "certificate",
    "requested",
    "puppet",
    "agent",
    "go",
    "back",
    "puppet",
    "agent",
    "virtual",
    "image",
    "update",
    "changes",
    "made",
    "puppet",
    "master",
    "let",
    "first",
    "clear",
    "terminal",
    "type",
    "puppet",
    "agent",
    "tea",
    "right",
    "successfully",
    "established",
    "secure",
    "connection",
    "puppet",
    "master",
    "puppet",
    "agent",
    "let",
    "give",
    "quick",
    "recap",
    "discussed",
    "lot",
    "first",
    "saw",
    "various",
    "problems",
    "configuration",
    "management",
    "focused",
    "three",
    "major",
    "problems",
    "right",
    "saw",
    "important",
    "configuration",
    "management",
    "help",
    "use",
    "case",
    "new",
    "york",
    "stock",
    "exchange",
    "finally",
    "saw",
    "exactly",
    "configuration",
    "management",
    "mean",
    "infrastructure",
    "code",
    "also",
    "looked",
    "various",
    "configuration",
    "management",
    "tools",
    "namely",
    "chef",
    "puppet",
    "ansible",
    "saltstack",
    "understood",
    "exactly",
    "pop",
    "architecture",
    "puppet",
    "master",
    "puppet",
    "slave",
    "communicates",
    "right",
    "move",
    "forward",
    "see",
    "use",
    "case",
    "today",
    "going",
    "today",
    "session",
    "going",
    "deploy",
    "sql",
    "php",
    "using",
    "puppet",
    "first",
    "download",
    "predefined",
    "modules",
    "dad",
    "sql",
    "php",
    "puppet",
    "foods",
    "right",
    "modules",
    "actually",
    "define",
    "two",
    "classes",
    "php",
    "mysql",
    "deploy",
    "class",
    "directly",
    "onto",
    "nodes",
    "need",
    "puppet",
    "boniface",
    "need",
    "declare",
    "classes",
    "whatever",
    "class",
    "defined",
    "need",
    "declare",
    "classes",
    "tell",
    "manifest",
    "modules",
    "need",
    "worry",
    "giving",
    "general",
    "overview",
    "going",
    "today",
    "session",
    "need",
    "declare",
    "two",
    "classes",
    "php",
    "mysql",
    "finally",
    "deploy",
    "onto",
    "nose",
    "simple",
    "guys",
    "see",
    "code",
    "php",
    "mysql",
    "puppet",
    "master",
    "deployed",
    "onto",
    "nose",
    "puppet",
    "agents",
    "move",
    "forward",
    "see",
    "various",
    "phases",
    "implementing",
    "use",
    "case",
    "alright",
    "first",
    "define",
    "class",
    "right",
    "classes",
    "nothing",
    "collection",
    "various",
    "resources",
    "help",
    "modules",
    "actually",
    "download",
    "module",
    "puppet",
    "boat",
    "use",
    "module",
    "defines",
    "classes",
    "told",
    "php",
    "mysql",
    "going",
    "declare",
    "class",
    "manifest",
    "finally",
    "deploy",
    "onto",
    "nodes",
    "right",
    "let",
    "us",
    "move",
    "forward",
    "actually",
    "important",
    "understand",
    "certain",
    "basics",
    "pop",
    "like",
    "code",
    "basics",
    "puppet",
    "like",
    "classes",
    "resources",
    "manifest",
    "modules",
    "things",
    "move",
    "forward",
    "understand",
    "things",
    "one",
    "one",
    "happens",
    "first",
    "explain",
    "resources",
    "classes",
    "manifests",
    "modules",
    "separately",
    "let",
    "give",
    "overview",
    "things",
    "right",
    "work",
    "together",
    "happens",
    "certain",
    "resources",
    "write",
    "user",
    "resource",
    "pile",
    "resource",
    "basically",
    "anything",
    "considered",
    "resource",
    "multiple",
    "resources",
    "actually",
    "combine",
    "together",
    "form",
    "class",
    "class",
    "declare",
    "benefits",
    "want",
    "declare",
    "multiple",
    "manifests",
    "right",
    "finally",
    "bundle",
    "manifest",
    "together",
    "form",
    "module",
    "let",
    "tell",
    "guys",
    "mandatory",
    "combine",
    "resources",
    "define",
    "class",
    "actually",
    "deploy",
    "resources",
    "directly",
    "good",
    "practice",
    "combine",
    "resources",
    "form",
    "classes",
    "becomes",
    "easier",
    "manage",
    "goes",
    "manifest",
    "well",
    "tell",
    "well",
    "write",
    "puppet",
    "code",
    "deploy",
    "onto",
    "nodes",
    "time",
    "necessary",
    "bundle",
    "manifest",
    "using",
    "form",
    "modules",
    "becomes",
    "manageable",
    "becomes",
    "structured",
    "right",
    "becomes",
    "easier",
    "handle",
    "multiple",
    "manifests",
    "right",
    "let",
    "us",
    "move",
    "forward",
    "look",
    "exactly",
    "resources",
    "class",
    "puppet",
    "resources",
    "anything",
    "resource",
    "user",
    "resource",
    "told",
    "file",
    "resource",
    "basically",
    "anything",
    "considered",
    "resource",
    "puppet",
    "code",
    "composed",
    "primarily",
    "resource",
    "declarations",
    "resource",
    "describes",
    "something",
    "state",
    "system",
    "certain",
    "user",
    "file",
    "exist",
    "package",
    "installed",
    "syntax",
    "resource",
    "right",
    "first",
    "write",
    "type",
    "resource",
    "give",
    "name",
    "single",
    "quotes",
    "various",
    "attributes",
    "want",
    "define",
    "example",
    "shown",
    "create",
    "file",
    "need",
    "attribute",
    "make",
    "sure",
    "present",
    "let",
    "us",
    "execute",
    "practically",
    "guys",
    "go",
    "back",
    "center",
    "virtual",
    "machine",
    "use",
    "g",
    "edit",
    "editor",
    "use",
    "whatever",
    "editor",
    "want",
    "type",
    "path",
    "manifest",
    "directory",
    "directory",
    "let",
    "define",
    "file",
    "right",
    "dot",
    "db",
    "extension",
    "name",
    "side",
    "dot",
    "p",
    "p",
    "go",
    "head",
    "resource",
    "examples",
    "shown",
    "light",
    "write",
    "example",
    "let",
    "us",
    "see",
    "happens",
    "file",
    "open",
    "braces",
    "give",
    "path",
    "hc",
    "knit",
    "ddot",
    "conf",
    "ina",
    "ddot",
    "conf",
    "colon",
    "antenna",
    "going",
    "write",
    "attribute",
    "going",
    "make",
    "sure",
    "present",
    "sure",
    "define",
    "created",
    "etsy",
    "knit",
    "knit",
    "ddot",
    "conf",
    "comma",
    "braces",
    "save",
    "close",
    "need",
    "need",
    "go",
    "puppet",
    "asian",
    "going",
    "execute",
    "agent",
    "command",
    "update",
    "changes",
    "made",
    "puppet",
    "master",
    "use",
    "puppet",
    "agent",
    "command",
    "let",
    "us",
    "see",
    "file",
    "need",
    "created",
    "right",
    "done",
    "successfully",
    "confirm",
    "use",
    "ls",
    "command",
    "type",
    "ls",
    "etsy",
    "ina",
    "ddot",
    "kant",
    "see",
    "created",
    "right",
    "understood",
    "exactly",
    "resources",
    "puppet",
    "right",
    "let",
    "us",
    "see",
    "classes",
    "classes",
    "nothing",
    "group",
    "resources",
    "right",
    "group",
    "multiple",
    "resources",
    "together",
    "form",
    "one",
    "single",
    "sauce",
    "declare",
    "class",
    "multiple",
    "manifest",
    "seen",
    "earlier",
    "syntax",
    "error",
    "let",
    "us",
    "see",
    "first",
    "need",
    "write",
    "class",
    "give",
    "name",
    "class",
    "open",
    "braces",
    "write",
    "code",
    "body",
    "close",
    "brace",
    "simple",
    "pretty",
    "much",
    "similar",
    "coding",
    "languages",
    "come",
    "across",
    "coding",
    "languages",
    "pretty",
    "much",
    "similar",
    "class",
    "define",
    "well",
    "right",
    "question",
    "uncle",
    "asking",
    "specify",
    "exactly",
    "difference",
    "resource",
    "class",
    "classes",
    "actually",
    "nothing",
    "bundle",
    "resources",
    "right",
    "resources",
    "group",
    "together",
    "forms",
    "class",
    "say",
    "resource",
    "describes",
    "single",
    "package",
    "happens",
    "class",
    "describes",
    "everything",
    "needed",
    "configure",
    "entire",
    "service",
    "application",
    "move",
    "forward",
    "see",
    "manifest",
    "puppet",
    "manifest",
    "exactly",
    "every",
    "slave",
    "got",
    "configuration",
    "details",
    "puppet",
    "master",
    "written",
    "native",
    "puppet",
    "language",
    "details",
    "written",
    "language",
    "puppet",
    "understand",
    "language",
    "termed",
    "manifests",
    "manifest",
    "puppet",
    "programs",
    "basically",
    "termed",
    "manifest",
    "example",
    "write",
    "manifest",
    "puppet",
    "master",
    "creates",
    "file",
    "install",
    "party",
    "puppet",
    "slaves",
    "connected",
    "puppet",
    "master",
    "alright",
    "see",
    "given",
    "example",
    "uses",
    "class",
    "called",
    "apache",
    "class",
    "defined",
    "help",
    "predefined",
    "modules",
    "puppet",
    "port",
    "various",
    "tributes",
    "like",
    "define",
    "virtual",
    "hosts",
    "port",
    "root",
    "directory",
    "basically",
    "two",
    "ways",
    "actually",
    "declare",
    "class",
    "puppet",
    "manifest",
    "either",
    "write",
    "include",
    "name",
    "class",
    "want",
    "use",
    "default",
    "attributes",
    "class",
    "make",
    "changes",
    "using",
    "particular",
    "syntax",
    "write",
    "class",
    "open",
    "braces",
    "class",
    "name",
    "whatever",
    "changes",
    "whatever",
    "attributes",
    "want",
    "apart",
    "one",
    "deep",
    "default",
    "finally",
    "close",
    "braces",
    "right",
    "execute",
    "manifest",
    "practically",
    "install",
    "apache",
    "notes",
    "right",
    "need",
    "deploy",
    "apache",
    "using",
    "puppets",
    "right",
    "need",
    "need",
    "write",
    "code",
    "deploy",
    "apart",
    "manifest",
    "directory",
    "already",
    "created",
    "file",
    "dot",
    "cpp",
    "extension",
    "remember",
    "talking",
    "resources",
    "right",
    "use",
    "file",
    "side",
    "b",
    "p",
    "write",
    "code",
    "deploy",
    "partay",
    "right",
    "use",
    "g",
    "editor",
    "use",
    "whatever",
    "editor",
    "feel",
    "like",
    "see",
    "pop",
    "manifest",
    "site",
    "art",
    "p",
    "p",
    "go",
    "delete",
    "resource",
    "defined",
    "like",
    "screen",
    "nice",
    "clean",
    "write",
    "code",
    "deploy",
    "party",
    "tight",
    "package",
    "httpd",
    "need",
    "ensure",
    "install",
    "type",
    "sure",
    "installed",
    "give",
    "comma",
    "need",
    "start",
    "apache",
    "service",
    "type",
    "service",
    "httpd",
    "short",
    "running",
    "coma",
    "close",
    "braces",
    "save",
    "close",
    "let",
    "clear",
    "terminal",
    "go",
    "puppet",
    "agent",
    "pull",
    "configurations",
    "present",
    "puppet",
    "master",
    "happens",
    "periodically",
    "puppet",
    "agent",
    "actually",
    "pulls",
    "configuration",
    "puppet",
    "master",
    "around",
    "30",
    "minutes",
    "right",
    "takes",
    "around",
    "half",
    "hour",
    "every",
    "half",
    "hour",
    "puppet",
    "agent",
    "pulls",
    "configuration",
    "puppet",
    "master",
    "right",
    "configure",
    "well",
    "want",
    "throw",
    "command",
    "puppet",
    "agent",
    "tea",
    "automatically",
    "pull",
    "configurations",
    "representing",
    "puppet",
    "master",
    "go",
    "puppet",
    "agent",
    "virtual",
    "machine",
    "type",
    "command",
    "puppet",
    "agent",
    "let",
    "us",
    "see",
    "happens",
    "done",
    "confirm",
    "open",
    "browser",
    "type",
    "hostname",
    "machine",
    "localhost",
    "let",
    "us",
    "see",
    "party",
    "installed",
    "right",
    "apache",
    "successfully",
    "installed",
    "let",
    "us",
    "go",
    "back",
    "slides",
    "see",
    "exactly",
    "modules",
    "puppet",
    "modules",
    "puppet",
    "module",
    "considered",
    "bundle",
    "code",
    "data",
    "let",
    "us",
    "put",
    "another",
    "way",
    "say",
    "puppet",
    "module",
    "collection",
    "manifest",
    "data",
    "parks",
    "files",
    "templates",
    "etc",
    "right",
    "specific",
    "directory",
    "structure",
    "modules",
    "basically",
    "used",
    "organizing",
    "puppet",
    "code",
    "allow",
    "split",
    "code",
    "multiple",
    "manifest",
    "provide",
    "proper",
    "structure",
    "order",
    "manage",
    "manifest",
    "real",
    "time",
    "multiple",
    "manifest",
    "manage",
    "manifests",
    "always",
    "good",
    "practice",
    "bundle",
    "together",
    "form",
    "modules",
    "default",
    "puppet",
    "modules",
    "present",
    "directly",
    "hc",
    "puppet",
    "modules",
    "whatever",
    "modules",
    "download",
    "puppet",
    "force",
    "present",
    "module",
    "directory",
    "right",
    "even",
    "create",
    "modules",
    "create",
    "particular",
    "directory",
    "hc",
    "puppet",
    "modules",
    "let",
    "us",
    "start",
    "awaited",
    "topic",
    "today",
    "session",
    "deploying",
    "php",
    "sql",
    "using",
    "puppet",
    "going",
    "going",
    "download",
    "two",
    "modules",
    "one",
    "php",
    "another",
    "mysql",
    "two",
    "modules",
    "actually",
    "define",
    "php",
    "mysql",
    "class",
    "need",
    "declare",
    "class",
    "manifest",
    "site",
    "dot",
    "php",
    "file",
    "present",
    "puppet",
    "manifest",
    "declare",
    "class",
    "manifest",
    "finally",
    "throw",
    "command",
    "puppet",
    "agent",
    "teen",
    "agent",
    "pull",
    "configurations",
    "php",
    "mysql",
    "deployed",
    "basically",
    "download",
    "module",
    "defining",
    "class",
    "directly",
    "deploy",
    "class",
    "need",
    "declare",
    "manifest",
    "go",
    "back",
    "sin",
    "icebox",
    "download",
    "sql",
    "module",
    "puppet",
    "forward",
    "forth",
    "type",
    "puppet",
    "mode",
    "install",
    "puppet",
    "labs",
    "sequel",
    "give",
    "night",
    "version",
    "name",
    "use",
    "three",
    "point",
    "one",
    "zero",
    "point",
    "zero",
    "go",
    "happening",
    "see",
    "saying",
    "preparing",
    "install",
    "hc",
    "puppet",
    "modules",
    "right",
    "installed",
    "directories",
    "apart",
    "actually",
    "downloading",
    "forge",
    "pi",
    "dot",
    "puppet",
    "done",
    "means",
    "successfully",
    "install",
    "mysql",
    "module",
    "puppet",
    "fort",
    "right",
    "let",
    "clear",
    "terminal",
    "install",
    "php",
    "modules",
    "type",
    "puppet",
    "module",
    "install",
    "php",
    "version",
    "four",
    "point",
    "zero",
    "point",
    "zero",
    "beta",
    "1",
    "go",
    "done",
    "means",
    "successfully",
    "installed",
    "two",
    "modules",
    "one",
    "php",
    "sql",
    "right",
    "let",
    "show",
    "present",
    "machine",
    "hit",
    "ls",
    "command",
    "show",
    "puppet",
    "modules",
    "go",
    "see",
    "sql",
    "module",
    "php",
    "module",
    "downloaded",
    "puppet",
    "foods",
    "need",
    "defined",
    "sql",
    "php",
    "class",
    "need",
    "declare",
    "site",
    "dot",
    "php",
    "file",
    "present",
    "puppet",
    "manifest",
    "first",
    "use",
    "g",
    "edit",
    "editor",
    "use",
    "whatever",
    "editor",
    "want",
    "saying",
    "use",
    "whatever",
    "editor",
    "want",
    "personally",
    "prefer",
    "g",
    "edit",
    "manifest",
    "side",
    "dot",
    "p",
    "p",
    "go",
    "told",
    "earlier",
    "well",
    "like",
    "screen",
    "clean",
    "nice",
    "remove",
    "declare",
    "two",
    "classes",
    "secret",
    "php",
    "include",
    "sequel",
    "server",
    "next",
    "line",
    "include",
    "php",
    "class",
    "anti",
    "php",
    "save",
    "close",
    "let",
    "clear",
    "terminal",
    "go",
    "puppet",
    "agent",
    "hit",
    "command",
    "puppet",
    "agent",
    "pull",
    "configurations",
    "puppet",
    "master",
    "let",
    "us",
    "proceed",
    "let",
    "first",
    "clear",
    "terminal",
    "tie",
    "puppet",
    "agent",
    "go",
    "successfully",
    "deployed",
    "php",
    "mysql",
    "using",
    "puppet",
    "right",
    "let",
    "clear",
    "terminal",
    "confirm",
    "typing",
    "sequel",
    "right",
    "display",
    "version",
    "exit",
    "show",
    "php",
    "versions",
    "adult",
    "type",
    "php",
    "version",
    "go",
    "alright",
    "means",
    "successfully",
    "installed",
    "php",
    "mysql",
    "using",
    "puppet",
    "let",
    "give",
    "quick",
    "recap",
    "discussed",
    "love",
    "right",
    "first",
    "saw",
    "need",
    "configuration",
    "management",
    "various",
    "problems",
    "configuration",
    "management",
    "understood",
    "importance",
    "configuration",
    "management",
    "use",
    "case",
    "new",
    "york",
    "stock",
    "exchange",
    "right",
    "saw",
    "exactly",
    "configuration",
    "management",
    "understood",
    "important",
    "concept",
    "called",
    "infrastructure",
    "code",
    "focused",
    "various",
    "type",
    "configuration",
    "management",
    "approaches",
    "namely",
    "push",
    "pull",
    "saw",
    "various",
    "configuration",
    "management",
    "tools",
    "namely",
    "puppet",
    "chef",
    "ansible",
    "source",
    "tag",
    "focus",
    "pop",
    "saw",
    "exactly",
    "puppet",
    "master",
    "slave",
    "architecture",
    "puppet",
    "master",
    "slave",
    "communicates",
    "things",
    "understood",
    "puppet",
    "code",
    "basics",
    "understood",
    "resources",
    "class",
    "manifest",
    "modules",
    "finally",
    "hands",
    "part",
    "told",
    "deploy",
    "php",
    "mysql",
    "using",
    "puppet",
    "name",
    "sato",
    "today",
    "talking",
    "nagi",
    "ways",
    "let",
    "move",
    "forward",
    "look",
    "agenda",
    "today",
    "discussing",
    "begin",
    "understanding",
    "need",
    "continuous",
    "monitoring",
    "continuous",
    "monitoring",
    "various",
    "tools",
    "available",
    "continuous",
    "monitoring",
    "going",
    "focus",
    "nagi",
    "os",
    "going",
    "look",
    "architecture",
    "works",
    "also",
    "going",
    "look",
    "one",
    "case",
    "study",
    "finally",
    "demo",
    "showing",
    "monitor",
    "remote",
    "host",
    "using",
    "nrp",
    "nothing",
    "nagios",
    "remote",
    "executor",
    "hope",
    "clear",
    "agenda",
    "let",
    "move",
    "forward",
    "start",
    "understanding",
    "need",
    "continuous",
    "monitoring",
    "well",
    "multiple",
    "reasons",
    "guys",
    "mentioned",
    "important",
    "reasons",
    "need",
    "continuous",
    "monitoring",
    "let",
    "look",
    "one",
    "one",
    "first",
    "one",
    "failure",
    "see",
    "icd",
    "pipelines",
    "since",
    "devops",
    "buzzword",
    "industry",
    "right",
    "organizations",
    "using",
    "devops",
    "practices",
    "obviously",
    "implementing",
    "see",
    "icd",
    "pipelines",
    "also",
    "called",
    "digital",
    "pipelines",
    "right",
    "idea",
    "behind",
    "sed",
    "pipeline",
    "make",
    "sure",
    "release",
    "happen",
    "frequently",
    "stable",
    "automated",
    "fashion",
    "right",
    "lot",
    "competitors",
    "might",
    "market",
    "want",
    "release",
    "product",
    "agility",
    "important",
    "use",
    "eicd",
    "pipelines",
    "implement",
    "pipeline",
    "realize",
    "ca",
    "manual",
    "intervention",
    "step",
    "process",
    "entire",
    "pipeline",
    "slows",
    "basically",
    "defeat",
    "entire",
    "purpose",
    "manual",
    "monitoring",
    "slows",
    "deployment",
    "pipeline",
    "increases",
    "risk",
    "performance",
    "problems",
    "propagating",
    "production",
    "right",
    "hope",
    "understood",
    "notice",
    "three",
    "points",
    "mentioned",
    "pretty",
    "rapid",
    "introduction",
    "performance",
    "problems",
    "errors",
    "right",
    "releasing",
    "software",
    "frequently",
    "rapid",
    "introduction",
    "performance",
    "problems",
    "rapid",
    "introduction",
    "new",
    "endpoints",
    "causing",
    "monitoring",
    "issues",
    "pretty",
    "root",
    "cause",
    "analysis",
    "number",
    "services",
    "expands",
    "releasing",
    "software",
    "frequently",
    "right",
    "definitely",
    "number",
    "services",
    "going",
    "increase",
    "lengthy",
    "root",
    "cause",
    "analysis",
    "know",
    "lose",
    "lot",
    "time",
    "right",
    "let",
    "move",
    "forward",
    "look",
    "next",
    "reason",
    "need",
    "continuous",
    "monitoring",
    "example",
    "application",
    "light",
    "right",
    "deployed",
    "production",
    "server",
    "running",
    "solutions",
    "basically",
    "application",
    "performance",
    "monitoring",
    "monitoring",
    "application",
    "performance",
    "time",
    "things",
    "right",
    "figure",
    "certain",
    "issues",
    "applications",
    "performance",
    "issues",
    "go",
    "back",
    "basically",
    "roll",
    "back",
    "incorporate",
    "changes",
    "remove",
    "bugs",
    "developers",
    "going",
    "take",
    "time",
    "process",
    "huge",
    "application",
    "already",
    "live",
    "right",
    "afford",
    "downtime",
    "imagine",
    "releasing",
    "software",
    "pre",
    "production",
    "server",
    "nothing",
    "replica",
    "production",
    "server",
    "run",
    "apm",
    "solutions",
    "figure",
    "application",
    "going",
    "perform",
    "actually",
    "goes",
    "live",
    "right",
    "way",
    "whatever",
    "issues",
    "developers",
    "notified",
    "take",
    "corrective",
    "action",
    "hope",
    "understood",
    "point",
    "next",
    "thing",
    "server",
    "health",
    "compromised",
    "cost",
    "think",
    "pretty",
    "obvious",
    "guys",
    "application",
    "running",
    "server",
    "afford",
    "downtime",
    "particular",
    "server",
    "increase",
    "response",
    "time",
    "also",
    "right",
    "require",
    "sort",
    "monitoring",
    "system",
    "check",
    "server",
    "health",
    "well",
    "right",
    "application",
    "goes",
    "responding",
    "right",
    "want",
    "scenario",
    "like",
    "world",
    "like",
    "today",
    "everything",
    "dynamic",
    "competition",
    "growing",
    "exponentially",
    "want",
    "give",
    "best",
    "service",
    "customers",
    "right",
    "think",
    "health",
    "important",
    "application",
    "running",
    "guys",
    "things",
    "stress",
    "much",
    "right",
    "basically",
    "require",
    "continuous",
    "monitoring",
    "server",
    "well",
    "let",
    "give",
    "quick",
    "recap",
    "things",
    "discussed",
    "understood",
    "need",
    "continuous",
    "monitoring",
    "looking",
    "three",
    "four",
    "examples",
    "right",
    "first",
    "thing",
    "solve",
    "issues",
    "see",
    "icd",
    "pipeline",
    "right",
    "sort",
    "manual",
    "intervention",
    "monitoring",
    "source",
    "bye",
    "going",
    "defeat",
    "purpose",
    "pipeline",
    "saw",
    "developers",
    "notified",
    "performance",
    "issues",
    "application",
    "releasing",
    "market",
    "saw",
    "server",
    "health",
    "compromised",
    "cost",
    "right",
    "three",
    "major",
    "reasons",
    "think",
    "continuous",
    "monitoring",
    "important",
    "organization",
    "right",
    "although",
    "many",
    "reasons",
    "well",
    "right",
    "let",
    "move",
    "forward",
    "understand",
    "exactly",
    "continuous",
    "monitoring",
    "talked",
    "lot",
    "scenarios",
    "manuel",
    "monitoring",
    "traditional",
    "monitoring",
    "processes",
    "going",
    "enough",
    "right",
    "let",
    "us",
    "understand",
    "exactly",
    "continuous",
    "monitoring",
    "different",
    "relation",
    "process",
    "basically",
    "continuous",
    "monitoring",
    "tools",
    "resolve",
    "sort",
    "system",
    "errors",
    "negative",
    "impact",
    "business",
    "low",
    "memory",
    "unreachable",
    "server",
    "etc",
    "etc",
    "apart",
    "also",
    "monitor",
    "business",
    "processes",
    "application",
    "well",
    "server",
    "discussed",
    "right",
    "continuous",
    "monitoring",
    "basically",
    "effective",
    "system",
    "entire",
    "infrastructure",
    "starting",
    "application",
    "business",
    "process",
    "server",
    "monitored",
    "ongoing",
    "way",
    "automated",
    "fashion",
    "right",
    "basically",
    "crux",
    "continuous",
    "monitoring",
    "multiple",
    "phases",
    "given",
    "us",
    "n",
    "implementing",
    "continuous",
    "monitoring",
    "basically",
    "national",
    "institute",
    "standards",
    "technology",
    "let",
    "take",
    "stages",
    "first",
    "thing",
    "defined",
    "basically",
    "develop",
    "monitoring",
    "strategy",
    "going",
    "going",
    "establish",
    "measures",
    "matrix",
    "also",
    "going",
    "stablish",
    "monitoring",
    "assessment",
    "frequencies",
    "frequently",
    "going",
    "monitor",
    "right",
    "going",
    "implement",
    "whatever",
    "stablished",
    "plan",
    "laid",
    "going",
    "analyze",
    "data",
    "report",
    "findings",
    "right",
    "whatever",
    "issues",
    "going",
    "find",
    "pose",
    "going",
    "respond",
    "mitigate",
    "error",
    "finally",
    "going",
    "review",
    "update",
    "application",
    "whatever",
    "monitoring",
    "right",
    "let",
    "us",
    "move",
    "forward",
    "patreon",
    "also",
    "given",
    "us",
    "multiple",
    "phases",
    "involved",
    "continuous",
    "monitoring",
    "let",
    "us",
    "look",
    "old",
    "one",
    "one",
    "first",
    "thing",
    "continuous",
    "discovery",
    "contentious",
    "discovery",
    "basically",
    "discovering",
    "maintaining",
    "near",
    "inventory",
    "networks",
    "information",
    "assets",
    "including",
    "hardware",
    "software",
    "give",
    "example",
    "basically",
    "identifying",
    "tracking",
    "confidential",
    "critical",
    "data",
    "stored",
    "desktops",
    "laptops",
    "servers",
    "right",
    "next",
    "comes",
    "continuous",
    "assessment",
    "basically",
    "means",
    "automatically",
    "scanning",
    "comparing",
    "information",
    "assets",
    "industry",
    "data",
    "repositories",
    "determine",
    "oner",
    "abilities",
    "entire",
    "point",
    "continuous",
    "assessment",
    "right",
    "one",
    "way",
    "prioritizing",
    "findings",
    "providing",
    "detailed",
    "reports",
    "right",
    "department",
    "platform",
    "network",
    "asset",
    "vulnerability",
    "type",
    "next",
    "comes",
    "continuous",
    "audit",
    "continuously",
    "evaluating",
    "client",
    "server",
    "network",
    "device",
    "configurations",
    "comparing",
    "standard",
    "policies",
    "basically",
    "continues",
    "audit",
    "right",
    "basically",
    "going",
    "gain",
    "insights",
    "problematic",
    "controls",
    "using",
    "patterns",
    "access",
    "permission",
    "sensitive",
    "data",
    "comes",
    "continuous",
    "patching",
    "means",
    "automatically",
    "deploying",
    "updating",
    "software",
    "eliminate",
    "vulnerabilities",
    "maintain",
    "compliance",
    "right",
    "give",
    "example",
    "may",
    "correcting",
    "configuration",
    "settings",
    "including",
    "network",
    "access",
    "provision",
    "software",
    "according",
    "end",
    "users",
    "role",
    "policies",
    "things",
    "next",
    "comes",
    "continents",
    "reporting",
    "aggregating",
    "scanning",
    "results",
    "different",
    "departments",
    "scan",
    "types",
    "organizations",
    "one",
    "central",
    "repository",
    "basically",
    "content",
    "reporting",
    "right",
    "automatically",
    "analyzing",
    "correlating",
    "unusual",
    "activities",
    "compliance",
    "regulations",
    "think",
    "pretty",
    "easy",
    "understand",
    "repeat",
    "would",
    "say",
    "continuous",
    "discovery",
    "basically",
    "discovering",
    "maintaining",
    "inventory",
    "near",
    "inventory",
    "network",
    "information",
    "assets",
    "whether",
    "hardware",
    "software",
    "continuous",
    "assessment",
    "means",
    "automatically",
    "scanning",
    "comparing",
    "information",
    "assets",
    "gardens",
    "discovery",
    "seen",
    "industry",
    "data",
    "repositories",
    "determine",
    "vulnerabilities",
    "continuous",
    "audit",
    "basically",
    "continuously",
    "evaluating",
    "client",
    "server",
    "network",
    "device",
    "configurations",
    "comparing",
    "standards",
    "policies",
    "contreras",
    "patching",
    "automatically",
    "deploying",
    "updating",
    "software",
    "eliminate",
    "vulnerabilities",
    "maintain",
    "compliance",
    "right",
    "patching",
    "basically",
    "remedy",
    "kind",
    "thing",
    "actually",
    "respond",
    "threats",
    "see",
    "vulnerabilities",
    "see",
    "application",
    "garden",
    "reporting",
    "basically",
    "aggregating",
    "scanning",
    "results",
    "different",
    "departments",
    "scan",
    "types",
    "organizations",
    "one",
    "central",
    "repository",
    "nothing",
    "various",
    "phases",
    "involved",
    "continuous",
    "monitoring",
    "let",
    "us",
    "look",
    "various",
    "continents",
    "monitoring",
    "tools",
    "available",
    "market",
    "pretty",
    "famous",
    "tools",
    "think",
    "lot",
    "might",
    "heard",
    "tools",
    "one",
    "amazon",
    "cloudwatch",
    "nothing",
    "service",
    "provided",
    "us",
    "aws",
    "splunk",
    "also",
    "famous",
    "e",
    "lk",
    "argue",
    "ways",
    "right",
    "clk",
    "basically",
    "elastic",
    "log",
    "stash",
    "cabana",
    "session",
    "going",
    "focus",
    "argue",
    "pretty",
    "mature",
    "lot",
    "companies",
    "used",
    "tool",
    "major",
    "market",
    "share",
    "well",
    "basically",
    "well",
    "suited",
    "entire",
    "whether",
    "application",
    "server",
    "even",
    "business",
    "process",
    "let",
    "us",
    "look",
    "exactly",
    "ways",
    "works",
    "give",
    "basically",
    "tool",
    "used",
    "continuous",
    "monitoring",
    "systems",
    "application",
    "services",
    "business",
    "processes",
    "etc",
    "devops",
    "culture",
    "right",
    "event",
    "failure",
    "nagios",
    "alert",
    "technical",
    "staff",
    "problem",
    "allowing",
    "begin",
    "remedy",
    "ation",
    "processes",
    "outages",
    "affect",
    "business",
    "processes",
    "users",
    "customers",
    "hope",
    "getting",
    "point",
    "allow",
    "technical",
    "staff",
    "problem",
    "begin",
    "remediation",
    "processes",
    "outages",
    "affect",
    "business",
    "process",
    "end",
    "users",
    "customers",
    "right",
    "argues",
    "explain",
    "answer",
    "infrastructure",
    "outage",
    "affect",
    "organization",
    "bottom",
    "line",
    "right",
    "let",
    "us",
    "focus",
    "diagram",
    "front",
    "screen",
    "use",
    "basically",
    "runs",
    "server",
    "usually",
    "daemon",
    "service",
    "periodically",
    "runs",
    "plugins",
    "residing",
    "server",
    "basically",
    "contact",
    "hosts",
    "servers",
    "network",
    "internet",
    "one",
    "view",
    "status",
    "information",
    "using",
    "web",
    "interface",
    "also",
    "receive",
    "email",
    "sms",
    "notification",
    "something",
    "goes",
    "wrong",
    "right",
    "basically",
    "nagas",
    "damon",
    "behaves",
    "like",
    "scheduler",
    "runs",
    "certain",
    "scripts",
    "certain",
    "moments",
    "stores",
    "results",
    "cribs",
    "run",
    "scripts",
    "results",
    "change",
    "hope",
    "getting",
    "point",
    "right",
    "wondering",
    "plugins",
    "nothing",
    "compiled",
    "executables",
    "scripts",
    "pearls",
    "great",
    "shell",
    "script",
    "etc",
    "run",
    "command",
    "line",
    "check",
    "status",
    "host",
    "service",
    "noun",
    "argue",
    "uses",
    "results",
    "plugins",
    "determine",
    "current",
    "status",
    "host",
    "network",
    "let",
    "us",
    "see",
    "various",
    "features",
    "naga",
    "ways",
    "let",
    "take",
    "features",
    "one",
    "one",
    "pretty",
    "scalable",
    "secure",
    "manageable",
    "well",
    "good",
    "log",
    "database",
    "system",
    "automatically",
    "sends",
    "alerts",
    "saw",
    "takes",
    "network",
    "errors",
    "server",
    "crashes",
    "easy",
    "writing",
    "write",
    "plugins",
    "right",
    "based",
    "requirement",
    "business",
    "need",
    "monitor",
    "business",
    "process",
    "infrastructure",
    "single",
    "pass",
    "guys",
    "issues",
    "fixed",
    "automatically",
    "configured",
    "way",
    "definitely",
    "fix",
    "issues",
    "automatically",
    "also",
    "support",
    "implementing",
    "redundant",
    "monitoring",
    "posts",
    "hope",
    "understood",
    "features",
    "many",
    "pretty",
    "attractive",
    "features",
    "argue",
    "popular",
    "features",
    "let",
    "us",
    "discuss",
    "architecture",
    "nagios",
    "detail",
    "basically",
    "argue",
    "server",
    "agent",
    "architecture",
    "right",
    "usually",
    "network",
    "argue",
    "server",
    "running",
    "host",
    "saw",
    "previous",
    "diagram",
    "right",
    "consider",
    "host",
    "guess",
    "server",
    "running",
    "host",
    "plugins",
    "interact",
    "local",
    "remote",
    "hood",
    "plugins",
    "interact",
    "local",
    "resources",
    "services",
    "also",
    "interact",
    "remote",
    "resources",
    "services",
    "host",
    "right",
    "plugins",
    "send",
    "information",
    "scheduler",
    "display",
    "gui",
    "right",
    "let",
    "repeat",
    "nargis",
    "build",
    "circuit",
    "good",
    "agent",
    "architecture",
    "right",
    "usually",
    "argue",
    "server",
    "running",
    "host",
    "plugins",
    "interact",
    "local",
    "host",
    "services",
    "even",
    "remote",
    "host",
    "services",
    "right",
    "plugins",
    "send",
    "information",
    "scheduler",
    "nagios",
    "process",
    "scheduler",
    "display",
    "web",
    "interface",
    "something",
    "goes",
    "wrong",
    "concern",
    "teams",
    "notified",
    "via",
    "sms",
    "email",
    "right",
    "think",
    "covered",
    "quite",
    "lot",
    "theory",
    "let",
    "go",
    "ahead",
    "open",
    "centralized",
    "virtual",
    "machine",
    "already",
    "installed",
    "gos",
    "let",
    "open",
    "center",
    "virtual",
    "machine",
    "first",
    "center",
    "virtual",
    "machine",
    "guys",
    "nagios",
    "dashboard",
    "looks",
    "like",
    "running",
    "port",
    "run",
    "wherever",
    "want",
    "explain",
    "installation",
    "video",
    "install",
    "notice",
    "lot",
    "options",
    "left",
    "hand",
    "side",
    "know",
    "go",
    "ahead",
    "play",
    "around",
    "get",
    "better",
    "idea",
    "let",
    "focus",
    "important",
    "ones",
    "map",
    "option",
    "right",
    "click",
    "see",
    "local",
    "host",
    "remote",
    "host",
    "well",
    "nagas",
    "process",
    "monitoring",
    "local",
    "host",
    "remote",
    "host",
    "remote",
    "host",
    "currently",
    "see",
    "like",
    "running",
    "showing",
    "basically",
    "looks",
    "like",
    "go",
    "ahead",
    "click",
    "host",
    "see",
    "hoes",
    "currently",
    "monitoring",
    "monitoring",
    "edureka",
    "local",
    "host",
    "said",
    "eureka",
    "basically",
    "remote",
    "server",
    "local",
    "host",
    "currently",
    "onaga",
    "server",
    "running",
    "right",
    "obviously",
    "server",
    "click",
    "services",
    "see",
    "services",
    "monitoring",
    "remote",
    "host",
    "monitoring",
    "cpu",
    "load",
    "ping",
    "ssh",
    "local",
    "host",
    "watching",
    "current",
    "load",
    "current",
    "users",
    "http",
    "paying",
    "root",
    "partition",
    "ssh",
    "swap",
    "usage",
    "total",
    "processes",
    "add",
    "many",
    "services",
    "want",
    "change",
    "host",
    "dot",
    "cfg",
    "file",
    "going",
    "show",
    "later",
    "let",
    "us",
    "go",
    "back",
    "slides",
    "continue",
    "let",
    "give",
    "small",
    "recap",
    "things",
    "discussed",
    "first",
    "saw",
    "need",
    "continuous",
    "monitoring",
    "saw",
    "various",
    "reasons",
    "industries",
    "need",
    "continuous",
    "monitoring",
    "different",
    "traditional",
    "monitoring",
    "systems",
    "saw",
    "exactly",
    "continuous",
    "monitoring",
    "various",
    "phases",
    "involved",
    "implementing",
    "continuous",
    "monitoring",
    "strategy",
    "saw",
    "various",
    "continuous",
    "monitoring",
    "tools",
    "available",
    "market",
    "focus",
    "argue",
    "saw",
    "gue",
    "base",
    "works",
    "architecture",
    "right",
    "going",
    "talk",
    "something",
    "called",
    "n",
    "rp",
    "e",
    "nagios",
    "remote",
    "executor",
    "basically",
    "used",
    "monitoring",
    "remote",
    "linux",
    "unix",
    "machines",
    "allow",
    "execute",
    "nagios",
    "plugins",
    "remote",
    "machines",
    "main",
    "reason",
    "allow",
    "nog",
    "wish",
    "monitor",
    "local",
    "resources",
    "know",
    "like",
    "cpu",
    "load",
    "memory",
    "usage",
    "etc",
    "remote",
    "machines",
    "since",
    "public",
    "resources",
    "usually",
    "exposed",
    "external",
    "machines",
    "agent",
    "like",
    "nrp",
    "must",
    "installed",
    "remote",
    "linux",
    "unix",
    "machines",
    "even",
    "installed",
    "center",
    "ice",
    "box",
    "able",
    "monitor",
    "remote",
    "linux",
    "host",
    "talking",
    "also",
    "check",
    "nagas",
    "installation",
    "video",
    "also",
    "explained",
    "install",
    "nrp",
    "notice",
    "diagram",
    "basically",
    "jake",
    "underscore",
    "n",
    "rp",
    "residing",
    "local",
    "monitoring",
    "machine",
    "local",
    "monitoring",
    "machine",
    "saw",
    "right",
    "mine",
    "argue",
    "server",
    "czech",
    "underscore",
    "rp",
    "resides",
    "local",
    "monitoring",
    "machine",
    "arguing",
    "right",
    "one",
    "saw",
    "basically",
    "local",
    "machine",
    "say",
    "naga",
    "server",
    "right",
    "check",
    "underscoring",
    "rp",
    "resides",
    "particular",
    "machine",
    "nrp",
    "daemon",
    "see",
    "diagram",
    "runs",
    "remote",
    "machine",
    "remote",
    "linux",
    "unix",
    "machine",
    "case",
    "edureka",
    "remember",
    "since",
    "start",
    "machine",
    "right",
    "nrp",
    "damon",
    "run",
    "particular",
    "machine",
    "secure",
    "socket",
    "layer",
    "ssl",
    "connection",
    "monitoring",
    "host",
    "remote",
    "host",
    "see",
    "diagram",
    "well",
    "ssl",
    "connection",
    "right",
    "checking",
    "disk",
    "space",
    "load",
    "http",
    "ftp",
    "remote",
    "services",
    "host",
    "site",
    "local",
    "resources",
    "services",
    "basically",
    "rp",
    "works",
    "guys",
    "check",
    "underscore",
    "plug",
    "designing",
    "host",
    "machine",
    "nrp",
    "daemon",
    "running",
    "remote",
    "machine",
    "ssl",
    "connection",
    "right",
    "yeah",
    "ssl",
    "connection",
    "nrp",
    "basically",
    "helps",
    "us",
    "monitor",
    "remote",
    "machine",
    "works",
    "let",
    "look",
    "one",
    "interesting",
    "case",
    "study",
    "bitten",
    "attics",
    "found",
    "nagios",
    "website",
    "want",
    "check",
    "go",
    "ahead",
    "check",
    "website",
    "well",
    "pretty",
    "cool",
    "case",
    "studies",
    "power",
    "internet",
    "explorer",
    "lot",
    "case",
    "studies",
    "website",
    "bit",
    "etics",
    "provides",
    "basically",
    "outsource",
    "management",
    "consulting",
    "nonprofit",
    "small",
    "medium",
    "businesses",
    "right",
    "bitnet",
    "got",
    "project",
    "supposed",
    "monitor",
    "online",
    "store",
    "retailer",
    "billion",
    "dollar",
    "annual",
    "revenue",
    "huge",
    "guys",
    "supposed",
    "know",
    "monitor",
    "store",
    "also",
    "needed",
    "ensure",
    "cart",
    "checkout",
    "functionality",
    "working",
    "fine",
    "also",
    "supposed",
    "check",
    "website",
    "deformation",
    "notify",
    "necessary",
    "staff",
    "anything",
    "went",
    "wrong",
    "right",
    "seems",
    "like",
    "easy",
    "task",
    "let",
    "us",
    "see",
    "problems",
    "bitnet",
    "x",
    "phase",
    "bitnet",
    "x",
    "hit",
    "roadblock",
    "upon",
    "realizing",
    "clients",
    "data",
    "center",
    "located",
    "new",
    "jersey",
    "500",
    "miles",
    "away",
    "staff",
    "new",
    "york",
    "right",
    "distance",
    "500",
    "miles",
    "staff",
    "located",
    "data",
    "center",
    "let",
    "us",
    "see",
    "problems",
    "face",
    "two",
    "areas",
    "needed",
    "unique",
    "time",
    "comprehensive",
    "monitoring",
    "dev",
    "test",
    "prod",
    "environment",
    "platform",
    "right",
    "next",
    "challenge",
    "monitoring",
    "would",
    "hampered",
    "firewall",
    "restrictions",
    "different",
    "applications",
    "sites",
    "functions",
    "etc",
    "think",
    "lot",
    "know",
    "firewalls",
    "basically",
    "sometimes",
    "nightmare",
    "right",
    "apart",
    "notification",
    "sent",
    "client",
    "ignored",
    "mostly",
    "false",
    "positive",
    "right",
    "client",
    "bother",
    "even",
    "check",
    "notifications",
    "solution",
    "first",
    "solution",
    "thought",
    "adding",
    "ssh",
    "firewall",
    "rules",
    "network",
    "operation",
    "center",
    "personnel",
    "equipment",
    "second",
    "analyzing",
    "web",
    "pages",
    "see",
    "problem",
    "occurrences",
    "third",
    "important",
    "point",
    "converting",
    "notification",
    "nag",
    "uh",
    "alerts",
    "problem",
    "saw",
    "false",
    "positive",
    "completely",
    "removed",
    "escalation",
    "logic",
    "converting",
    "notifications",
    "nargis",
    "alerts",
    "escalations",
    "specific",
    "time",
    "periods",
    "different",
    "groups",
    "right",
    "hope",
    "getting",
    "point",
    "configuring",
    "event",
    "handlers",
    "restart",
    "services",
    "notification",
    "basically",
    "fixed",
    "90",
    "issues",
    "using",
    "nagios",
    "core",
    "multiple",
    "servers",
    "noc",
    "facility",
    "target",
    "worker",
    "deployed",
    "application",
    "level",
    "direct",
    "access",
    "host",
    "whatever",
    "bag",
    "worker",
    "agent",
    "remote",
    "machine",
    "deployed",
    "application",
    "level",
    "direct",
    "access",
    "host",
    "master",
    "whatever",
    "want",
    "call",
    "implemented",
    "architecture",
    "production",
    "quality",
    "assurance",
    "staging",
    "development",
    "environments",
    "let",
    "see",
    "result",
    "dramatic",
    "reduction",
    "notifications",
    "thanks",
    "event",
    "handlers",
    "new",
    "configuration",
    "increase",
    "time",
    "85",
    "early",
    "298",
    "personally",
    "significant",
    "guys",
    "right",
    "saw",
    "dramatic",
    "reduction",
    "false",
    "positive",
    "escalation",
    "logic",
    "talking",
    "fourth",
    "point",
    "estimating",
    "need",
    "log",
    "multiple",
    "boxes",
    "change",
    "configuration",
    "file",
    "thanks",
    "nagas",
    "configuration",
    "maintained",
    "central",
    "repository",
    "post",
    "automatically",
    "appropriate",
    "service",
    "fourth",
    "point",
    "estimating",
    "need",
    "log",
    "multiple",
    "boxes",
    "change",
    "configuration",
    "files",
    "happens",
    "inauguration",
    "configuration",
    "maintained",
    "central",
    "repository",
    "essential",
    "master",
    "pushed",
    "automatically",
    "slaves",
    "servers",
    "slaves",
    "agents",
    "whatever",
    "want",
    "call",
    "result",
    "using",
    "nog",
    "right",
    "time",
    "check",
    "demo",
    "monitoring",
    "couple",
    "services",
    "actually",
    "couple",
    "services",
    "offer",
    "remote",
    "linux",
    "machine",
    "mine",
    "argue",
    "ace",
    "hose",
    "showed",
    "right",
    "monitoring",
    "remote",
    "linux",
    "host",
    "caldera",
    "rekha",
    "monitoring",
    "like",
    "34",
    "services",
    "whatever",
    "want",
    "let",
    "show",
    "watch",
    "process",
    "installed",
    "guess",
    "need",
    "order",
    "make",
    "sure",
    "remote",
    "host",
    "remote",
    "machine",
    "monitored",
    "nagios",
    "host",
    "order",
    "execute",
    "demo",
    "going",
    "show",
    "must",
    "lamp",
    "stack",
    "system",
    "right",
    "linux",
    "apache",
    "mysql",
    "php",
    "going",
    "use",
    "center",
    "west",
    "7",
    "let",
    "quickly",
    "open",
    "center",
    "virtual",
    "machine",
    "proceed",
    "guys",
    "sent",
    "us",
    "virtualbox",
    "already",
    "installed",
    "argue",
    "told",
    "earlier",
    "well",
    "mine",
    "argue",
    "host",
    "running",
    "see",
    "nog",
    "server",
    "running",
    "see",
    "dashboard",
    "front",
    "screen",
    "well",
    "right",
    "let",
    "quickly",
    "open",
    "terminal",
    "first",
    "clear",
    "screen",
    "let",
    "show",
    "installed",
    "argue",
    "path",
    "right",
    "notice",
    "front",
    "screen",
    "user",
    "local",
    "nagi",
    "os",
    "clear",
    "screen",
    "show",
    "law",
    "directories",
    "inside",
    "go",
    "inside",
    "etsy",
    "directory",
    "inside",
    "going",
    "go",
    "inside",
    "objects",
    "directory",
    "right",
    "basically",
    "want",
    "add",
    "command",
    "example",
    "ample",
    "want",
    "add",
    "check",
    "underscore",
    "n",
    "rp",
    "command",
    "going",
    "monitor",
    "remote",
    "linux",
    "host",
    "remember",
    "diagram",
    "right",
    "going",
    "going",
    "add",
    "particular",
    "command",
    "already",
    "done",
    "let",
    "show",
    "looks",
    "type",
    "generator",
    "choose",
    "whatever",
    "editor",
    "like",
    "go",
    "inside",
    "commands",
    "dot",
    "cfg",
    "file",
    "let",
    "open",
    "various",
    "commands",
    "talking",
    "look",
    "commands",
    "basically",
    "notify",
    "host",
    "email",
    "anything",
    "goes",
    "anything",
    "goes",
    "wrong",
    "host",
    "service",
    "basically",
    "notify",
    "problem",
    "service",
    "email",
    "check",
    "host",
    "machine",
    "alive",
    "mean",
    "running",
    "command",
    "basically",
    "check",
    "disk",
    "space",
    "like",
    "local",
    "disk",
    "load",
    "rights",
    "see",
    "things",
    "swap",
    "ftp",
    "added",
    "commands",
    "look",
    "commands",
    "mentioned",
    "last",
    "command",
    "see",
    "added",
    "manually",
    "commands",
    "install",
    "get",
    "default",
    "ip",
    "take",
    "underscore",
    "n",
    "rp",
    "highlighting",
    "right",
    "cursor",
    "something",
    "added",
    "order",
    "make",
    "sure",
    "monitor",
    "remote",
    "clinics",
    "horse",
    "let",
    "go",
    "ahead",
    "save",
    "right",
    "let",
    "clear",
    "screen",
    "go",
    "back",
    "nagios",
    "directory",
    "let",
    "share",
    "screen",
    "basically",
    "allow",
    "use",
    "check",
    "score",
    "rp",
    "command",
    "give",
    "service",
    "definitions",
    "right",
    "need",
    "update",
    "nrp",
    "configuration",
    "file",
    "use",
    "favorite",
    "editor",
    "open",
    "nr",
    "p",
    "dot",
    "c",
    "f",
    "g",
    "find",
    "particular",
    "directory",
    "first",
    "hit",
    "ls",
    "check",
    "set",
    "c",
    "directory",
    "notice",
    "nr",
    "p",
    "dot",
    "cfg",
    "file",
    "right",
    "already",
    "added",
    "go",
    "ahead",
    "show",
    "help",
    "g",
    "edit",
    "use",
    "whatever",
    "editor",
    "prefer",
    "need",
    "find",
    "allowed",
    "host",
    "directive",
    "add",
    "private",
    "ip",
    "address",
    "nas",
    "device",
    "gamma",
    "delimited",
    "list",
    "scroll",
    "find",
    "something",
    "allowed",
    "host",
    "right",
    "add",
    "comma",
    "start",
    "ip",
    "address",
    "machine",
    "want",
    "monitor",
    "currently",
    "let",
    "open",
    "going",
    "use",
    "sudo",
    "privileges",
    "allowed",
    "host",
    "directory",
    "comma",
    "ip",
    "address",
    "host",
    "said",
    "want",
    "monitor",
    "one",
    "ninety",
    "two",
    "dot",
    "one",
    "sixty",
    "eight",
    "dot",
    "go",
    "ahead",
    "save",
    "come",
    "back",
    "clear",
    "terminal",
    "save",
    "exit",
    "configures",
    "rp",
    "accept",
    "requests",
    "nas",
    "device",
    "private",
    "ip",
    "address",
    "right",
    "go",
    "ahead",
    "restart",
    "nrp",
    "put",
    "changes",
    "effect",
    "argue",
    "server",
    "need",
    "create",
    "configuration",
    "file",
    "remote",
    "host",
    "monitor",
    "mentioning",
    "well",
    "going",
    "find",
    "hc",
    "servers",
    "directory",
    "let",
    "go",
    "ahead",
    "open",
    "let",
    "go",
    "server",
    "directory",
    "notice",
    "deer",
    "card",
    "cfg",
    "file",
    "basically",
    "host",
    "monitoring",
    "right",
    "go",
    "ahead",
    "show",
    "written",
    "basically",
    "first",
    "done",
    "defined",
    "host",
    "basically",
    "linux",
    "server",
    "name",
    "eddie",
    "raker",
    "allies",
    "whatever",
    "want",
    "give",
    "ip",
    "address",
    "maximum",
    "check",
    "attempts",
    "periods",
    "want",
    "check",
    "notification",
    "interval",
    "mentioned",
    "notification",
    "period",
    "basically",
    "host",
    "hose",
    "services",
    "going",
    "monitor",
    "new",
    "monitor",
    "generic",
    "services",
    "like",
    "pink",
    "want",
    "monitor",
    "ssh",
    "going",
    "monitor",
    "cpu",
    "load",
    "three",
    "services",
    "monitoring",
    "find",
    "side",
    "tree",
    "create",
    "proper",
    "configuration",
    "file",
    "hose",
    "want",
    "monitor",
    "let",
    "clear",
    "terminal",
    "show",
    "remote",
    "machine",
    "well",
    "let",
    "open",
    "remote",
    "machine",
    "guys",
    "already",
    "installed",
    "nrp",
    "going",
    "show",
    "restart",
    "rp",
    "systemctl",
    "restart",
    "rpe",
    "service",
    "go",
    "asking",
    "password",
    "given",
    "man",
    "piece",
    "started",
    "actually",
    "restarted",
    "already",
    "started",
    "well",
    "let",
    "show",
    "nagios",
    "dashboard",
    "looks",
    "like",
    "server",
    "dashboard",
    "go",
    "host",
    "tab",
    "see",
    "monitoring",
    "host",
    "dinner",
    "kind",
    "localhost",
    "erica",
    "one",
    "showed",
    "running",
    "right",
    "go",
    "ahead",
    "check",
    "map",
    "legacy",
    "map",
    "viewer",
    "well",
    "basically",
    "tells",
    "direct",
    "remote",
    "host",
    "also",
    "various",
    "sources",
    "monitoring",
    "remember",
    "monitoring",
    "cpu",
    "load",
    "ping",
    "ssh",
    "see",
    "well",
    "right",
    "today",
    "session",
    "hope",
    "guys",
    "enjoyed",
    "listening",
    "video",
    "questions",
    "go",
    "ahead",
    "mention",
    "comment",
    "section",
    "looking",
    "gain",
    "experience",
    "devops",
    "go",
    "ahead",
    "check",
    "website",
    "devops",
    "view",
    "upcoming",
    "patches",
    "enroll",
    "set",
    "path",
    "becoming",
    "successful",
    "devops",
    "engineer",
    "still",
    "curious",
    "know",
    "divorce",
    "roles",
    "responsibilities",
    "check",
    "videos",
    "mentioned",
    "description",
    "thank",
    "happy",
    "learning"
  ],
  "keywords": [
    "everyone",
    "name",
    "today",
    "taking",
    "entire",
    "session",
    "devops",
    "course",
    "way",
    "also",
    "ones",
    "stages",
    "tools",
    "involved",
    "modules",
    "start",
    "understanding",
    "methodology",
    "right",
    "first",
    "module",
    "going",
    "talk",
    "git",
    "works",
    "version",
    "control",
    "help",
    "create",
    "really",
    "jenkins",
    "maven",
    "github",
    "talking",
    "software",
    "platform",
    "docker",
    "kubernetes",
    "container",
    "configuration",
    "management",
    "using",
    "ansible",
    "puppet",
    "market",
    "pretty",
    "since",
    "finally",
    "perform",
    "continuous",
    "monitoring",
    "nagios",
    "let",
    "guys",
    "need",
    "everything",
    "reason",
    "try",
    "see",
    "various",
    "delivery",
    "focus",
    "exactly",
    "part",
    "tell",
    "image",
    "build",
    "test",
    "even",
    "push",
    "onto",
    "hub",
    "hope",
    "clear",
    "move",
    "forward",
    "waterfall",
    "model",
    "particular",
    "development",
    "public",
    "life",
    "cycle",
    "similar",
    "happens",
    "back",
    "case",
    "well",
    "application",
    "go",
    "next",
    "stage",
    "previous",
    "us",
    "notice",
    "diagram",
    "front",
    "screen",
    "like",
    "gives",
    "look",
    "writing",
    "code",
    "say",
    "multiple",
    "think",
    "know",
    "unit",
    "testing",
    "deployed",
    "servers",
    "service",
    "release",
    "small",
    "looks",
    "perfect",
    "time",
    "happen",
    "use",
    "fine",
    "give",
    "one",
    "change",
    "something",
    "concept",
    "mean",
    "suppose",
    "written",
    "bug",
    "order",
    "source",
    "used",
    "take",
    "lot",
    "big",
    "apart",
    "working",
    "saw",
    "amount",
    "means",
    "product",
    "process",
    "stack",
    "production",
    "environment",
    "table",
    "good",
    "project",
    "requirements",
    "given",
    "web",
    "changed",
    "want",
    "type",
    "goes",
    "agile",
    "based",
    "kind",
    "box",
    "might",
    "installed",
    "probably",
    "properly",
    "roll",
    "bugs",
    "check",
    "feedback",
    "got",
    "ahead",
    "ask",
    "find",
    "understood",
    "called",
    "practice",
    "throughout",
    "continuously",
    "get",
    "done",
    "things",
    "end",
    "deploy",
    "happening",
    "building",
    "basically",
    "call",
    "team",
    "deployment",
    "still",
    "side",
    "company",
    "dev",
    "actually",
    "developers",
    "work",
    "operations",
    "made",
    "needed",
    "solution",
    "solve",
    "problem",
    "discussed",
    "able",
    "understand",
    "manually",
    "error",
    "example",
    "scripts",
    "provision",
    "infrastructure",
    "started",
    "different",
    "problems",
    "group",
    "new",
    "community",
    "popular",
    "people",
    "study",
    "operating",
    "systems",
    "scale",
    "put",
    "together",
    "operation",
    "making",
    "many",
    "system",
    "explain",
    "saying",
    "nothing",
    "starting",
    "important",
    "become",
    "point",
    "versions",
    "developer",
    "commits",
    "revert",
    "commit",
    "getting",
    "manage",
    "comment",
    "happened",
    "integration",
    "server",
    "pull",
    "prepare",
    "built",
    "review",
    "etc",
    "comes",
    "tool",
    "user",
    "whether",
    "purpose",
    "provide",
    "teams",
    "jobs",
    "moment",
    "makes",
    "trigger",
    "automatically",
    "tested",
    "view",
    "currently",
    "dashboard",
    "running",
    "worry",
    "two",
    "centralized",
    "another",
    "distributed",
    "issues",
    "uses",
    "central",
    "store",
    "files",
    "single",
    "repository",
    "users",
    "directly",
    "access",
    "every",
    "copy",
    "directory",
    "make",
    "shared",
    "update",
    "could",
    "local",
    "remote",
    "data",
    "present",
    "changes",
    "committed",
    "advantage",
    "anyone",
    "always",
    "message",
    "available",
    "network",
    "result",
    "reasons",
    "necessary",
    "file",
    "clone",
    "main",
    "contains",
    "without",
    "repositories",
    "write",
    "needs",
    "connection",
    "committing",
    "three",
    "easily",
    "better",
    "thing",
    "add",
    "whatever",
    "staging",
    "area",
    "execute",
    "added",
    "command",
    "show",
    "commands",
    "already",
    "center",
    "virtual",
    "machine",
    "open",
    "told",
    "terminal",
    "report",
    "dot",
    "python",
    "p",
    "g",
    "edit",
    "close",
    "save",
    "hit",
    "slides",
    "come",
    "status",
    "says",
    "created",
    "state",
    "successfully",
    "account",
    "yeah",
    "click",
    "tutorial",
    "keep",
    "read",
    "ssh",
    "link",
    "paste",
    "master",
    "set",
    "pulled",
    "easy",
    "required",
    "times",
    "earlier",
    "bill",
    "plugins",
    "install",
    "job",
    "wanted",
    "containers",
    "similarly",
    "deploying",
    "certain",
    "sure",
    "package",
    "engine",
    "log",
    "website",
    "download",
    "localhost",
    "port",
    "password",
    "installing",
    "options",
    "play",
    "around",
    "page",
    "choose",
    "configurations",
    "tab",
    "pipeline",
    "later",
    "provisioning",
    "admin",
    "else",
    "lamp",
    "location",
    "nodes",
    "components",
    "last",
    "minutes",
    "installation",
    "would",
    "pop",
    "managing",
    "define",
    "host",
    "place",
    "node",
    "defined",
    "scaling",
    "machines",
    "traffic",
    "task",
    "provides",
    "architecture",
    "slaves",
    "slave",
    "agent",
    "fact",
    "send",
    "key",
    "ip",
    "address",
    "compile",
    "resource",
    "contain",
    "top",
    "learning",
    "run",
    "dependencies",
    "anything",
    "micro",
    "images",
    "private",
    "microsoft",
    "sent",
    "list",
    "ubuntu",
    "default",
    "business",
    "root",
    "security",
    "services",
    "performance",
    "organization",
    "line",
    "monitor",
    "processes",
    "runs",
    "information",
    "email",
    "results",
    "compiled",
    "difference",
    "topic",
    "creating",
    "pushing",
    "sudo",
    "slash",
    "url",
    "credentials",
    "showing",
    "option",
    "whenever",
    "either",
    "apply",
    "dominion",
    "enterprises",
    "features",
    "index",
    "html",
    "text",
    "1",
    "maybe",
    "number",
    "merge",
    "notified",
    "whole",
    "wo",
    "much",
    "obviously",
    "okay",
    "huge",
    "space",
    "remember",
    "inside",
    "fetch",
    "updated",
    "four",
    "apache",
    "hand",
    "google",
    "yes",
    "left",
    "resources",
    "enough",
    "secure",
    "came",
    "possible",
    "workflow",
    "feature",
    "vm",
    "form",
    "branches",
    "branch",
    "storage",
    "equal",
    "language",
    "linux",
    "simple",
    "hardware",
    "join",
    "said",
    "enter",
    "details",
    "app",
    "second",
    "rebasing",
    "major",
    "facing",
    "eight",
    "third",
    "applications",
    "addresses",
    "video",
    "alright",
    "restart",
    "configure",
    "underscore",
    "packages",
    "handle",
    "load",
    "request",
    "wordpress",
    "compose",
    "manual",
    "steps",
    "hosts",
    "cloud",
    "sql",
    "database",
    "mysql",
    "editor",
    "db",
    "zero",
    "php",
    "masters",
    "bring",
    "cluster",
    "communities",
    "static",
    "functionality",
    "ensure",
    "note",
    "pseudo",
    "specify",
    "cube",
    "humanities",
    "pod",
    "calico",
    "poor",
    "notes",
    "along",
    "class",
    "pods",
    "pot",
    "deployments",
    "token",
    "mentioned",
    "cli",
    "pokemon",
    "cuban",
    "game",
    "orchestration",
    "swamp",
    "privileges",
    "demo",
    "engines",
    "delete",
    "nasa",
    "playbooks",
    "tasks",
    "inventory",
    "playbook",
    "book",
    "manifest",
    "certificate",
    "classes",
    "declare",
    "argue"
  ]
}