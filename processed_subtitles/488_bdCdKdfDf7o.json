{
  "text": "what's the room temperature\nit's currently 32.5 degrees and the wall\nmounted type is off\nturn on air conditioner\ngot it turning on the wall mounted tight\ndecrease the temperature okay\ncooling down the wall mounted tight\nswitch off air conditioner\nsure turning the wall mounted type off\nhi everyone i hope that introduction was\nenough\nto let you know what you're going to see\nin this particular video few weeks ago i\nposted a challenge\non how to design iot and i wanted you to\ncontribute to the system design so that\ni can review that\nhimanshu had created a pull request with\nthis particular design i'm going to\nreview this particular design and i will\nalso explain\nthe same diagram with my own transition\nand i will also let you know what can be\nimproved and what is missing and things\nlike that\nlet's get started\n[Music]\npress the bell icon on the youtube app\nand never miss\nany update from tech primers i'm going\nto assume the cloud platform which we\nare going to leverage\nis going to be aws cloud and i have a\nwi-fi connection at home\nwhere i have an air condition installed\nwith an iot hardware device\nsomething like raspberry pi embedded\nwithin this particular device\nso i am assuming that there is a\nhardware control board which is already\nequipped in the hardware\nwe are going to create a mobile\napplication or a mobile client\nand we are going to see how the backend\nis going to be designed within the aws\ninfrastructure\nwe are going to expose apis to this\nparticular mobile application so we are\ngoing to create an api gateway which is\namazon's api gateway\nwhich in turn is going to be connected\nto amazon sqs\nand sqs is going to trigger a lambda if\nyou ask me why\nsks is being leveraged here can we\ndirectly connect from\napi gateway to the lambda you can\ndefinitely do that but you can add sqs\nto add some\nresiliency inbuilt within this whole\nflow\nwhat if the lambda application resulted\nin a failure response\nand you want the user to trigger the\nrequest again in that case you can\ndefinitely leverage sqs and you can\nretry stuff\nbased on your response code from the\nlambdas that's another reason i think\nhimanshu has used sqs here which is a\ngood thought\nso from excuse we are going to trigger a\nlambda function the lambda function is\ngoing to persist the\nmetadata of what the user is going to\ntrigger into a dynamodb\ndata store and it is also going to call\nan iot core\nservice so this is awss iot interaction\nlayer where you can use iot core to\nconnect to different devices\nand you can get responses from them so\nwe are going to use\ndynamodb from the lambda to store some\nmetadata information and from the lambda\nto the iot device we are going to use\nsomething called as iot core which can\nconnect to your\ndevice applications here assume that we\nhave a raspberry pi\ninstalled within the hardware and it's\ngoing to get the response back from that\ndevice since we have used an air\nconditioner we are going to leverage\nfeatures which are specific only to the\nair conditioner so as a part of this\nflow\nthe user let us say is requesting for\nthe temperature of the\nroom for example when i showed in the\ndemo initially i requested for the room\ntemperature\nso this flow will request the room\ntemperature\nfrom the lambda to the iot core layer\nand iot core knows that the\nair conditioner is off however using the\nhardware interaction board\nwhich has sensors inbuilt within that so\nyou can definitely get\nthe climate sensor or the temperature\nsensor to get to know what is happening\nwithin the room\nand you can get the response back from\nthe iot core\nyou can push that into something called\niit events so iot events is another\nservice from aws\nusing which you can interact with\ndifferent aws services you can connect\nto\nfor example we can connect it to uh\nkinesis fire host\nso that you can store whatever event is\ncoming in into a data store like s3 and\nyou can use\nthat to archive information you can use\nit to query\ninformation for analytics purpose etc\nusing athena\nfrom the iot events what we are going to\ndo is we are going to trigger a lambda\nfrom the lambda we are going to store\nthe metadata information into the\ndynamodb because when we requested we\nknow what we requested and\nwhen the response came back we can store\nthe state of that\nparticular response inside the dynamodb\ndatabase so that we don't have to retry\nif something happens\nfor the response let's say there is a\ntimeout and we did not get the response\nwithin a stipulated timeout we can\ntrigger\nlambda to go and fix those stuff\nso you can leverage dynamodb streams to\ntrigger\nlambdas if there are any timeouts which\nare happening\nfor this particular end to end flow once\nthat is done we are going to get the\nmessage and push it into\nsns so himanshu has mentioned here as\nsns\nsns can connect and send email\nnotification or\nmobile notifications into your mobile\ndevice however we want to connect it to\nthe application right so in that case\ni would have leveraged sqs because using\nsql you can push that message into your\nmobile specific queue but then how will\nyou\nregister each of the device into sqs\nright so that's the next question which\narises and\nthat's why i think human shoe had\nleveraged\namazon sms so that you can push a\nnotification and the notification can\nsend the response back to the mobile\nclient one another alternative what we\ncan do for this particular architecture\nis\ninstead of having this as an\nasynchronous four you can have a\nsynchronous flow embedded\nby leveraging the response from the iot\nevents and you can have a timeout\nembedded so that you can just give a\nresponse error or maybe you can retry on\nyour own\nwe can also integrate this whole api\ngateway into the alexa enabled devices\nlike eco or\nalexa device itself directly most of the\napps these days support a unified way of\nintegrating\nwith iot devices so if you had seen\nearlier i was able to connect my\ngoogle assistant with the think queue\napp from lg\nso google assistant has a plugin which\nyou can leverage to connect to the\nthinkq app\nso that you can get the same features\nwhatever the app provides into the\ngoogle assistant by default some things\nwhich were missing from this\narchitecture was\nthe monitoring aspect of this\napplication i would add cloud watch for\nmonitoring the logs and raise alarms\nif there are any failures or if we want\nto retry some things and i will leverage\namazon x-ray to do distributed lock\ntracing so what if i want to trace\nwhat happened to my request right if\nsomething went wrong so i can definitely\nleverage amazon x-ray for that\nalso to keep things secure i'm going to\nleverage the amazon kms so that you can\nencrypt your data when you are storing\nit within the amazon\ndynamodb or even with s3 so you can\nleverage your own\nkeys to store or encrypt the data\nfinally since it is all exposed to\ninternet and you have lot of\ninternet connectivity we can leverage\nthe aws shield\nto protect our account or services from\ndenial of service attacks this is one\nway of designing a system\nfor an iot device there are n possible\nways of designing\nyour system if you have a different\nthought and you think that might fit\nwell\ndo raise a pull request in this\nparticular github repo i will leave the\nlink for that in the description below\nhowever thanks himanshu for providing\nthis architecture\nand i hope lot of people would have\nlearned different kinds of ways in which\nyou can interact with iot devices and\nhow you can retrieve data from iot and\nthen show that in your mobile\napplication or your web application\ni hope you found this particular video\ninteresting\nas always if you like the video go ahead\nand like it if you haven't subscribed to\nthe channel go ahead and subscribe to it\nmeet you again in the next video thank\nyou very much\n",
  "words": [
    "room",
    "temperature",
    "currently",
    "degrees",
    "wall",
    "mounted",
    "type",
    "turn",
    "air",
    "conditioner",
    "got",
    "turning",
    "wall",
    "mounted",
    "tight",
    "decrease",
    "temperature",
    "okay",
    "cooling",
    "wall",
    "mounted",
    "tight",
    "switch",
    "air",
    "conditioner",
    "sure",
    "turning",
    "wall",
    "mounted",
    "type",
    "hi",
    "everyone",
    "hope",
    "introduction",
    "enough",
    "let",
    "know",
    "going",
    "see",
    "particular",
    "video",
    "weeks",
    "ago",
    "posted",
    "challenge",
    "design",
    "iot",
    "wanted",
    "contribute",
    "system",
    "design",
    "review",
    "himanshu",
    "created",
    "pull",
    "request",
    "particular",
    "design",
    "going",
    "review",
    "particular",
    "design",
    "also",
    "explain",
    "diagram",
    "transition",
    "also",
    "let",
    "know",
    "improved",
    "missing",
    "things",
    "like",
    "let",
    "get",
    "started",
    "music",
    "press",
    "bell",
    "icon",
    "youtube",
    "app",
    "never",
    "miss",
    "update",
    "tech",
    "primers",
    "going",
    "assume",
    "cloud",
    "platform",
    "going",
    "leverage",
    "going",
    "aws",
    "cloud",
    "connection",
    "home",
    "air",
    "condition",
    "installed",
    "iot",
    "hardware",
    "device",
    "something",
    "like",
    "raspberry",
    "pi",
    "embedded",
    "within",
    "particular",
    "device",
    "assuming",
    "hardware",
    "control",
    "board",
    "already",
    "equipped",
    "hardware",
    "going",
    "create",
    "mobile",
    "application",
    "mobile",
    "client",
    "going",
    "see",
    "backend",
    "going",
    "designed",
    "within",
    "aws",
    "infrastructure",
    "going",
    "expose",
    "apis",
    "particular",
    "mobile",
    "application",
    "going",
    "create",
    "api",
    "gateway",
    "amazon",
    "api",
    "gateway",
    "turn",
    "going",
    "connected",
    "amazon",
    "sqs",
    "sqs",
    "going",
    "trigger",
    "lambda",
    "ask",
    "sks",
    "leveraged",
    "directly",
    "connect",
    "api",
    "gateway",
    "lambda",
    "definitely",
    "add",
    "sqs",
    "add",
    "resiliency",
    "inbuilt",
    "within",
    "whole",
    "flow",
    "lambda",
    "application",
    "resulted",
    "failure",
    "response",
    "want",
    "user",
    "trigger",
    "request",
    "case",
    "definitely",
    "leverage",
    "sqs",
    "retry",
    "stuff",
    "based",
    "response",
    "code",
    "lambdas",
    "another",
    "reason",
    "think",
    "himanshu",
    "used",
    "sqs",
    "good",
    "thought",
    "excuse",
    "going",
    "trigger",
    "lambda",
    "function",
    "lambda",
    "function",
    "going",
    "persist",
    "metadata",
    "user",
    "going",
    "trigger",
    "dynamodb",
    "data",
    "store",
    "also",
    "going",
    "call",
    "iot",
    "core",
    "service",
    "awss",
    "iot",
    "interaction",
    "layer",
    "use",
    "iot",
    "core",
    "connect",
    "different",
    "devices",
    "get",
    "responses",
    "going",
    "use",
    "dynamodb",
    "lambda",
    "store",
    "metadata",
    "information",
    "lambda",
    "iot",
    "device",
    "going",
    "use",
    "something",
    "called",
    "iot",
    "core",
    "connect",
    "device",
    "applications",
    "assume",
    "raspberry",
    "pi",
    "installed",
    "within",
    "hardware",
    "going",
    "get",
    "response",
    "back",
    "device",
    "since",
    "used",
    "air",
    "conditioner",
    "going",
    "leverage",
    "features",
    "specific",
    "air",
    "conditioner",
    "part",
    "flow",
    "user",
    "let",
    "us",
    "say",
    "requesting",
    "temperature",
    "room",
    "example",
    "showed",
    "demo",
    "initially",
    "requested",
    "room",
    "temperature",
    "flow",
    "request",
    "room",
    "temperature",
    "lambda",
    "iot",
    "core",
    "layer",
    "iot",
    "core",
    "knows",
    "air",
    "conditioner",
    "however",
    "using",
    "hardware",
    "interaction",
    "board",
    "sensors",
    "inbuilt",
    "within",
    "definitely",
    "get",
    "climate",
    "sensor",
    "temperature",
    "sensor",
    "get",
    "know",
    "happening",
    "within",
    "room",
    "get",
    "response",
    "back",
    "iot",
    "core",
    "push",
    "something",
    "called",
    "iit",
    "events",
    "iot",
    "events",
    "another",
    "service",
    "aws",
    "using",
    "interact",
    "different",
    "aws",
    "services",
    "connect",
    "example",
    "connect",
    "uh",
    "kinesis",
    "fire",
    "host",
    "store",
    "whatever",
    "event",
    "coming",
    "data",
    "store",
    "like",
    "s3",
    "use",
    "archive",
    "information",
    "use",
    "query",
    "information",
    "analytics",
    "purpose",
    "etc",
    "using",
    "athena",
    "iot",
    "events",
    "going",
    "going",
    "trigger",
    "lambda",
    "lambda",
    "going",
    "store",
    "metadata",
    "information",
    "dynamodb",
    "requested",
    "know",
    "requested",
    "response",
    "came",
    "back",
    "store",
    "state",
    "particular",
    "response",
    "inside",
    "dynamodb",
    "database",
    "retry",
    "something",
    "happens",
    "response",
    "let",
    "say",
    "timeout",
    "get",
    "response",
    "within",
    "stipulated",
    "timeout",
    "trigger",
    "lambda",
    "go",
    "fix",
    "stuff",
    "leverage",
    "dynamodb",
    "streams",
    "trigger",
    "lambdas",
    "timeouts",
    "happening",
    "particular",
    "end",
    "end",
    "flow",
    "done",
    "going",
    "get",
    "message",
    "push",
    "sns",
    "himanshu",
    "mentioned",
    "sns",
    "sns",
    "connect",
    "send",
    "email",
    "notification",
    "mobile",
    "notifications",
    "mobile",
    "device",
    "however",
    "want",
    "connect",
    "application",
    "right",
    "case",
    "would",
    "leveraged",
    "sqs",
    "using",
    "sql",
    "push",
    "message",
    "mobile",
    "specific",
    "queue",
    "register",
    "device",
    "sqs",
    "right",
    "next",
    "question",
    "arises",
    "think",
    "human",
    "shoe",
    "leveraged",
    "amazon",
    "sms",
    "push",
    "notification",
    "notification",
    "send",
    "response",
    "back",
    "mobile",
    "client",
    "one",
    "another",
    "alternative",
    "particular",
    "architecture",
    "instead",
    "asynchronous",
    "four",
    "synchronous",
    "flow",
    "embedded",
    "leveraging",
    "response",
    "iot",
    "events",
    "timeout",
    "embedded",
    "give",
    "response",
    "error",
    "maybe",
    "retry",
    "also",
    "integrate",
    "whole",
    "api",
    "gateway",
    "alexa",
    "enabled",
    "devices",
    "like",
    "eco",
    "alexa",
    "device",
    "directly",
    "apps",
    "days",
    "support",
    "unified",
    "way",
    "integrating",
    "iot",
    "devices",
    "seen",
    "earlier",
    "able",
    "connect",
    "google",
    "assistant",
    "think",
    "queue",
    "app",
    "lg",
    "google",
    "assistant",
    "plugin",
    "leverage",
    "connect",
    "thinkq",
    "app",
    "get",
    "features",
    "whatever",
    "app",
    "provides",
    "google",
    "assistant",
    "default",
    "things",
    "missing",
    "architecture",
    "monitoring",
    "aspect",
    "application",
    "would",
    "add",
    "cloud",
    "watch",
    "monitoring",
    "logs",
    "raise",
    "alarms",
    "failures",
    "want",
    "retry",
    "things",
    "leverage",
    "amazon",
    "distributed",
    "lock",
    "tracing",
    "want",
    "trace",
    "happened",
    "request",
    "right",
    "something",
    "went",
    "wrong",
    "definitely",
    "leverage",
    "amazon",
    "also",
    "keep",
    "things",
    "secure",
    "going",
    "leverage",
    "amazon",
    "kms",
    "encrypt",
    "data",
    "storing",
    "within",
    "amazon",
    "dynamodb",
    "even",
    "s3",
    "leverage",
    "keys",
    "store",
    "encrypt",
    "data",
    "finally",
    "since",
    "exposed",
    "internet",
    "lot",
    "internet",
    "connectivity",
    "leverage",
    "aws",
    "shield",
    "protect",
    "account",
    "services",
    "denial",
    "service",
    "attacks",
    "one",
    "way",
    "designing",
    "system",
    "iot",
    "device",
    "n",
    "possible",
    "ways",
    "designing",
    "system",
    "different",
    "thought",
    "think",
    "might",
    "fit",
    "well",
    "raise",
    "pull",
    "request",
    "particular",
    "github",
    "repo",
    "leave",
    "link",
    "description",
    "however",
    "thanks",
    "himanshu",
    "providing",
    "architecture",
    "hope",
    "lot",
    "people",
    "would",
    "learned",
    "different",
    "kinds",
    "ways",
    "interact",
    "iot",
    "devices",
    "retrieve",
    "data",
    "iot",
    "show",
    "mobile",
    "application",
    "web",
    "application",
    "hope",
    "found",
    "particular",
    "video",
    "interesting",
    "always",
    "like",
    "video",
    "go",
    "ahead",
    "like",
    "subscribed",
    "channel",
    "go",
    "ahead",
    "subscribe",
    "meet",
    "next",
    "video",
    "thank",
    "much"
  ],
  "keywords": [
    "room",
    "temperature",
    "wall",
    "mounted",
    "air",
    "conditioner",
    "hope",
    "let",
    "know",
    "going",
    "particular",
    "video",
    "design",
    "iot",
    "system",
    "himanshu",
    "request",
    "also",
    "things",
    "like",
    "get",
    "app",
    "cloud",
    "leverage",
    "aws",
    "hardware",
    "device",
    "something",
    "embedded",
    "within",
    "mobile",
    "application",
    "api",
    "gateway",
    "amazon",
    "sqs",
    "trigger",
    "lambda",
    "leveraged",
    "connect",
    "definitely",
    "add",
    "flow",
    "response",
    "want",
    "user",
    "retry",
    "another",
    "think",
    "metadata",
    "dynamodb",
    "data",
    "store",
    "core",
    "service",
    "use",
    "different",
    "devices",
    "information",
    "back",
    "requested",
    "however",
    "using",
    "push",
    "events",
    "timeout",
    "go",
    "sns",
    "notification",
    "right",
    "would",
    "architecture",
    "google",
    "assistant"
  ]
}