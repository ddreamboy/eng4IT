{
  "text": "hello everyone welcome again in this\nsoftware testing tutorial\nwe are going to understand what is\nsoftware development lifecycle\nor sdlc so software development\nlife cycle is the setup process that\nyou follow if you're working in any\nsoftware development team\nto basically start developing the\nsoftware and deliver it\nuntil the software is deployed and\nmaintained right\nso the whole process is known as\nsoftware development lifecycle\nnow that process you need to understand\nstep by step what all phases are there\nto develop any software or analyze the\nrequirement and then develop the\nsoftware and deliver it to the customer\nor deploy in the production right so we\nneed to understand\nif we want to work in the software\ntesting team we need to also understand\nwhat software development life cycle is\nand based on different you know\napproaches will understand how\nsoftware development life cycle you know\nis in different software development\napproaches say for example waterfall\ndevelopment approach how\nsdlc is there and then if you are\nfollowing the\nmodel how software development lifecycle\nis in the viewmodel or in the agile\napproach for example strong so let's\nstart with the software development\nlifecycle\num so here i'll totally cover sdlc\nand in the next tutorial i'll cover\nsoftware testing lifecycle which is sort\nof\na subset of software development\nlifecycle sdnc\nfits within software development live\nsite\nso the first phase in software\ndevelopment lifecycle is\nthe requirement gathering okay so\nrequirement\ngathering\nand analysis\nokay so what does the requirement\ngathering means right so we'll\nunderstand first requirement gathering\nand then analysis so say for example\nthere is an organization uh abc\nand this is the organization which takes\nthe software development project okay so\nyou will be you know having certain\nteams there development teams\nso team one two three and these\nteams basically work on different\ndevelopment projects\nnow any organization or any person\nwho is the customer who wants to build\nsomething say for example\ni am a customer and i want to build an\napp\nokay so what i'll do is i'll either if\ni'm a big organization i'll\nyou know have a tendering and then i'll\nannounce that i want to build something\nlike this there will be multiple\norganizations that will build and then\nbased on those bids i'll choose\nthe organization or the team that i want\nto\ngive the project right so uh\nnow if i want to build an app or a\nwebsite\nuh in the simplest form okay so\ni'll provide some requirements to the\norganization right so what\nrequirement gathering is basically once\nthis abc organization gets the project\nand if i am the customer\nthen i will provide the requirements or\nyou know there will be team of people\nbasically in the customer\nyou know team so who will\nprovide the requirement to the\norganization who wants to\nbuild the software right or who will be\nbuilding the software for us\nso those requirement when gathered by\nthis particular organization is known as\nrequirement gathering\nokay so all the features that i want to\nbe in my app or in my website i will\nprovide those details and then\nall the details will be documented okay\nso all the details will be documented\nand this is what the requirements\ndocument is\nin the waterfall approach this was a\nlindy you know requirements document\nbut in agile it's in the form of user\nstories or epics basically so epic will\nbe the high level user story\nthat is what captures the high level\nrequirement of the customer\nokay so this is what a requirement\ngathering\nphase is when you gather the requirement\nabout the software what customer is\nactually looking for\nin or in terms of feature what the\ncustomer is looking for into\nthe software or the app that you're\ntrying to build\nthen the analysis phase is basically\nonce you gather the requirement you also\nanalyze the requirement whether those\nrequirements are feasible or not\nright so feasibility analysis is very\nimportant so\nonce the customer provides a certain\nrequirement there might be some\nlimitations in terms of technology\nsupport or any other\nyou know issues because of that\nyou might not be able to fulfill those\nrequirements or not be\nable to implement those requirements so\nin that particular case\nwhat you need to do is you need to\nbasically analyze and understand that\nwhether those requirement implementation\nis possible or not\nif not you need to communicate that to\nthe customer about\nthe analysis and then there will be\ndiscussion and\nupdates accordingly to the requirement\nokay so this is about the requirement\ngathering and analysis phase this is the\nfirst phase of software development life\ncycle\nthe next phase is the design phase all\nright\nwhat this design phase is all about so\nonce the requirement\nare available in the design phase what\nthe technical architects do\nis in the team you have the requirement\nand based on those requirements you want\nto basically\nlay the foundation of how the software\nwill be built\nright so say for example you want to\nbuild a house okay\nso the first thing you do is you design\nhow you want to build\nright you don't directly start building\nthe house without\nhaving a design and understanding how\nthe house will look like\nso if a customer said that i want you\nknow three rooms in my house two\nbathrooms\num you know two kitchen living room\nso all those things need to be designed\nproperly\nfirst and shown to the customer and uh\nclarified from the customer\nis this how you want to you know um is\nthis where you want your room to be\nis this where you want your kitchen to\nbe right so same\nis true with the software you need to\nbasically\nfirst design based on what you have got\ngathered as the requirement\nand then analyze with the customer the\ndesign that that's what exactly he's\nwant he wants\nor she wants so similar is the case like\nthe car case\nso i have the car a customer asked to\nyou know build a car with four wheels\nand i have put four wheels here\nright so this is not fit for you so i\nneed to basically have the design and\nshow it to customer whether you want\nwheels here or whether you want wheels\nhere right so customer will say no no\nthis is not what i want\nthis car is not going to move right so i\nwant a car that moves so this is how you\nclarify the requirement with the\ncustomer\nokay so in the design you design how the\noverall\nsoftware is going to you know what the\ndesign will look like\nso technical architects do it and then\nthis is what the design\nphases and in design there are different\nphases\nas well so high level design low level\ndesign um\nthat is within the design phase\nso that's the second phase third phase\nis develop\nnow what happens in develop is\nso development the development phase is\nactually the coding phase\nright so once you have the design ready\nand you know what you are\ngoing to build then you start the\ndevelopment work or you start building\nthe house right so you have the design\nyou have the foundation laid\nand then you know you start\nputting the bricks and same is the case\nwith the\nsoftware so once the design is ready the\nnext phase is the development of coding\nphase wherein the development team will\nstart\nwriting the code to implement those\nrequirements\nokay the fourth phase is the\ntest okay so once the development is\ndone\nand a development team has you know\ncreated certain features or developed\ncertain features they will\nprovide those features or they'll deploy\nthose features\ninto the test environment for the\ntesters\nto test okay now if you're you will be\nworking as a test\nuh tester within team you will go to\nthat particular you know test\nenvironment and\nlaunch the application or the app and\nverify\nthat whatever features or whatever\nrequirements are being built in this\nparticular release\nthey are working as expected right so\nthis is the\ntesting phase so in testing phase you do\nthe testing work for the\napplication or the app okay\nthen after the testing\nis successful everything is fine and\nstakeholders have agreed\nto release the software the next phase\nis\nto basically deploy right\nwhat does deployment so deploy means\ndeploying to production\nso you won't be having all the code into\nthe testing right you have to basically\nmove it to production where the customer\ncan access or if it is for the public\nuser for example\ngmail is the application which is used\nby everyone right\nall the public whoever has the gmail\naccount or wants to create a gmail\naccount\nnow if gmail google would have developed\nand\njust kept it there in their testing\nenvironment and not available\nover the internet then that's just\nwithin their organization it's not\navailable to the public\nnow if it wants the the\ncustomer for gmail are the people like\nyou and me\nright so they have to move it to the\nproduction over the internet\nand this is what deployment is so in the\ndeployment they move the code to the\nproduction\nand make it available to the relevant\ncustomer for\nwhom that software is being built so in\nin gmail case it is for\nus and that is why it is you know\ndeployed in the data centers\nor the whole code and it is available\nover the internet for us to\naccess the gmail emails all right so in\nthe deployment phase the actual code is\nbeing deployed\nfor the customers who are going to use\nit\nit might be a set of customers or it\nmight be the wider public\nall right so it depends what the context\nis of that particular\nsoftware so after the deployment phase\nthe next phase is the maintenance\nall right so in maintenance phase\nonce the deployment happens okay in the\nproduction\nthe software needs to be maintained\nright so for example you\nbuy a car you bring it it's a new car\nafter every six months you have to\nservice it right so it is required\nbecause if you want to use\nthe car without any issues you have to\nbasically\ntake care of it you have to maintain and\nyou have to see that there are no issues\nor there are there are every every\nfunctionality or machinery is working as\nexpected\nsimilarly in software you have to\nbasically ensure that you do that\nmaintenance or regular maintenance\num uh for the software so that it is\nnot it doesn't crash so say for example\nthe software\nuh might try to do you know hardware\nissues or\nthere might be you know issues within\nthe software itself so as we have\nalready understood about the seven\nprinciples of software testing\nso 100 testing is not possible and even\nthough\nif you still can't find any more issues\nin your software\nit doesn't mean that the software that\ndeployed\nthat is deployed in the production is\n100 defectory right\nso you can't say that so in maintenance\nphase what happens is you basically\nregularly maintain the software\nand you also fix any of the production\nissues that come through right so once\nthe software is in the maintenance\nyou keep a watch on\nwhat all issues are being reported by\nthe customers\nand if there are critical issues or any\nissues that are being reported by the\ncustomer they\nare being fixed and redeployed in the\nproduction so this is what what happens\ninto the\nmaintenance phase right so these\nare the key six uh so basically six\nphases of software development life\ncycle\nand you need to understand the software\ndevelopment life cycle\nbefore you understand the software\ntesting life cycle\nin the next tutorial that i'll cover\nright so requirement gathering and\nanalysis\ndesign development testing deploy and\nmaintenance very simple\nit's a phase or a life cycle that\nany development team will follow to\ndevelop any software or application\nright now these phases\nthis is uh you know will remain\ntrue for waterfall for v model for an\neven for agile right so in\nagile uh you know you will have the\nrequirement gathering so this\nis this won't happen in each and every\nsprint but it will happen in you know\nsay for example two to three months or\nin in a one\nincrement of program increment so there\nwill be requirement gathering phase\nand then design development testing\ntesting will happen\ndesign development testing happens in\nvery short iterations two to four week\ncycle\nbut phases are still same so phases will\nstill be there\nthe only difference which happens\nbetween these development approaches\nis the timeline that you follow in\nwaterfall approach\nit will be longer timelines in a child\nit will be smaller timelines\nin agile maintenance you know like\ndeployment\nand maintenance or deployment to\nproduction uh can happen every month\nokay so it depends how the organization\nwants to deploy to the production\nokay but in waterfall it was usually\nlike six months to one year so it\ndepended\nuh how the organization wants to deploy\nthe production waterfall approach\nright so this is the basic software\ndevelopment lifecycle\num understand it very well\nif there are any doubts please comment\nin the comment section\nand i'll clarify all those doubts so\nthat you are good enough\nto go ahead and explain it to any\ninterviewer\nin the software testing interview so\nthat's all for this tutorial\nplease do share and subscribe and thank\nyou very much for watching\n",
  "words": [
    "hello",
    "everyone",
    "welcome",
    "software",
    "testing",
    "tutorial",
    "going",
    "understand",
    "software",
    "development",
    "lifecycle",
    "sdlc",
    "software",
    "development",
    "life",
    "cycle",
    "setup",
    "process",
    "follow",
    "working",
    "software",
    "development",
    "team",
    "basically",
    "start",
    "developing",
    "software",
    "deliver",
    "software",
    "deployed",
    "maintained",
    "right",
    "whole",
    "process",
    "known",
    "software",
    "development",
    "lifecycle",
    "process",
    "need",
    "understand",
    "step",
    "step",
    "phases",
    "develop",
    "software",
    "analyze",
    "requirement",
    "develop",
    "software",
    "deliver",
    "customer",
    "deploy",
    "production",
    "right",
    "need",
    "understand",
    "want",
    "work",
    "software",
    "testing",
    "team",
    "need",
    "also",
    "understand",
    "software",
    "development",
    "life",
    "cycle",
    "based",
    "different",
    "know",
    "approaches",
    "understand",
    "software",
    "development",
    "life",
    "cycle",
    "know",
    "different",
    "software",
    "development",
    "approaches",
    "say",
    "example",
    "waterfall",
    "development",
    "approach",
    "sdlc",
    "following",
    "model",
    "software",
    "development",
    "lifecycle",
    "viewmodel",
    "agile",
    "approach",
    "example",
    "strong",
    "let",
    "start",
    "software",
    "development",
    "lifecycle",
    "um",
    "totally",
    "cover",
    "sdlc",
    "next",
    "tutorial",
    "cover",
    "software",
    "testing",
    "lifecycle",
    "sort",
    "subset",
    "software",
    "development",
    "lifecycle",
    "sdnc",
    "fits",
    "within",
    "software",
    "development",
    "live",
    "site",
    "first",
    "phase",
    "software",
    "development",
    "lifecycle",
    "requirement",
    "gathering",
    "okay",
    "requirement",
    "gathering",
    "analysis",
    "okay",
    "requirement",
    "gathering",
    "means",
    "right",
    "understand",
    "first",
    "requirement",
    "gathering",
    "analysis",
    "say",
    "example",
    "organization",
    "uh",
    "abc",
    "organization",
    "takes",
    "software",
    "development",
    "project",
    "okay",
    "know",
    "certain",
    "teams",
    "development",
    "teams",
    "team",
    "one",
    "two",
    "three",
    "teams",
    "basically",
    "work",
    "different",
    "development",
    "projects",
    "organization",
    "person",
    "customer",
    "wants",
    "build",
    "something",
    "say",
    "example",
    "customer",
    "want",
    "build",
    "app",
    "okay",
    "either",
    "big",
    "organization",
    "know",
    "tendering",
    "announce",
    "want",
    "build",
    "something",
    "like",
    "multiple",
    "organizations",
    "build",
    "based",
    "bids",
    "choose",
    "organization",
    "team",
    "want",
    "give",
    "project",
    "right",
    "uh",
    "want",
    "build",
    "app",
    "website",
    "uh",
    "simplest",
    "form",
    "okay",
    "provide",
    "requirements",
    "organization",
    "right",
    "requirement",
    "gathering",
    "basically",
    "abc",
    "organization",
    "gets",
    "project",
    "customer",
    "provide",
    "requirements",
    "know",
    "team",
    "people",
    "basically",
    "customer",
    "know",
    "team",
    "provide",
    "requirement",
    "organization",
    "wants",
    "build",
    "software",
    "right",
    "building",
    "software",
    "us",
    "requirement",
    "gathered",
    "particular",
    "organization",
    "known",
    "requirement",
    "gathering",
    "okay",
    "features",
    "want",
    "app",
    "website",
    "provide",
    "details",
    "details",
    "documented",
    "okay",
    "details",
    "documented",
    "requirements",
    "document",
    "waterfall",
    "approach",
    "lindy",
    "know",
    "requirements",
    "document",
    "agile",
    "form",
    "user",
    "stories",
    "epics",
    "basically",
    "epic",
    "high",
    "level",
    "user",
    "story",
    "captures",
    "high",
    "level",
    "requirement",
    "customer",
    "okay",
    "requirement",
    "gathering",
    "phase",
    "gather",
    "requirement",
    "software",
    "customer",
    "actually",
    "looking",
    "terms",
    "feature",
    "customer",
    "looking",
    "software",
    "app",
    "trying",
    "build",
    "analysis",
    "phase",
    "basically",
    "gather",
    "requirement",
    "also",
    "analyze",
    "requirement",
    "whether",
    "requirements",
    "feasible",
    "right",
    "feasibility",
    "analysis",
    "important",
    "customer",
    "provides",
    "certain",
    "requirement",
    "might",
    "limitations",
    "terms",
    "technology",
    "support",
    "know",
    "issues",
    "might",
    "able",
    "fulfill",
    "requirements",
    "able",
    "implement",
    "requirements",
    "particular",
    "case",
    "need",
    "need",
    "basically",
    "analyze",
    "understand",
    "whether",
    "requirement",
    "implementation",
    "possible",
    "need",
    "communicate",
    "customer",
    "analysis",
    "discussion",
    "updates",
    "accordingly",
    "requirement",
    "okay",
    "requirement",
    "gathering",
    "analysis",
    "phase",
    "first",
    "phase",
    "software",
    "development",
    "life",
    "cycle",
    "next",
    "phase",
    "design",
    "phase",
    "right",
    "design",
    "phase",
    "requirement",
    "available",
    "design",
    "phase",
    "technical",
    "architects",
    "team",
    "requirement",
    "based",
    "requirements",
    "want",
    "basically",
    "lay",
    "foundation",
    "software",
    "built",
    "right",
    "say",
    "example",
    "want",
    "build",
    "house",
    "okay",
    "first",
    "thing",
    "design",
    "want",
    "build",
    "right",
    "directly",
    "start",
    "building",
    "house",
    "without",
    "design",
    "understanding",
    "house",
    "look",
    "like",
    "customer",
    "said",
    "want",
    "know",
    "three",
    "rooms",
    "house",
    "two",
    "bathrooms",
    "um",
    "know",
    "two",
    "kitchen",
    "living",
    "room",
    "things",
    "need",
    "designed",
    "properly",
    "first",
    "shown",
    "customer",
    "uh",
    "clarified",
    "customer",
    "want",
    "know",
    "um",
    "want",
    "room",
    "want",
    "kitchen",
    "right",
    "true",
    "software",
    "need",
    "basically",
    "first",
    "design",
    "based",
    "got",
    "gathered",
    "requirement",
    "analyze",
    "customer",
    "design",
    "exactly",
    "want",
    "wants",
    "wants",
    "similar",
    "case",
    "like",
    "car",
    "case",
    "car",
    "customer",
    "asked",
    "know",
    "build",
    "car",
    "four",
    "wheels",
    "put",
    "four",
    "wheels",
    "right",
    "fit",
    "need",
    "basically",
    "design",
    "show",
    "customer",
    "whether",
    "want",
    "wheels",
    "whether",
    "want",
    "wheels",
    "right",
    "customer",
    "say",
    "want",
    "car",
    "going",
    "move",
    "right",
    "want",
    "car",
    "moves",
    "clarify",
    "requirement",
    "customer",
    "okay",
    "design",
    "design",
    "overall",
    "software",
    "going",
    "know",
    "design",
    "look",
    "like",
    "technical",
    "architects",
    "design",
    "phases",
    "design",
    "different",
    "phases",
    "well",
    "high",
    "level",
    "design",
    "low",
    "level",
    "design",
    "um",
    "within",
    "design",
    "phase",
    "second",
    "phase",
    "third",
    "phase",
    "develop",
    "happens",
    "develop",
    "development",
    "development",
    "phase",
    "actually",
    "coding",
    "phase",
    "right",
    "design",
    "ready",
    "know",
    "going",
    "build",
    "start",
    "development",
    "work",
    "start",
    "building",
    "house",
    "right",
    "design",
    "foundation",
    "laid",
    "know",
    "start",
    "putting",
    "bricks",
    "case",
    "software",
    "design",
    "ready",
    "next",
    "phase",
    "development",
    "coding",
    "phase",
    "wherein",
    "development",
    "team",
    "start",
    "writing",
    "code",
    "implement",
    "requirements",
    "okay",
    "fourth",
    "phase",
    "test",
    "okay",
    "development",
    "done",
    "development",
    "team",
    "know",
    "created",
    "certain",
    "features",
    "developed",
    "certain",
    "features",
    "provide",
    "features",
    "deploy",
    "features",
    "test",
    "environment",
    "testers",
    "test",
    "okay",
    "working",
    "test",
    "uh",
    "tester",
    "within",
    "team",
    "go",
    "particular",
    "know",
    "test",
    "environment",
    "launch",
    "application",
    "app",
    "verify",
    "whatever",
    "features",
    "whatever",
    "requirements",
    "built",
    "particular",
    "release",
    "working",
    "expected",
    "right",
    "testing",
    "phase",
    "testing",
    "phase",
    "testing",
    "work",
    "application",
    "app",
    "okay",
    "testing",
    "successful",
    "everything",
    "fine",
    "stakeholders",
    "agreed",
    "release",
    "software",
    "next",
    "phase",
    "basically",
    "deploy",
    "right",
    "deployment",
    "deploy",
    "means",
    "deploying",
    "production",
    "wo",
    "code",
    "testing",
    "right",
    "basically",
    "move",
    "production",
    "customer",
    "access",
    "public",
    "user",
    "example",
    "gmail",
    "application",
    "used",
    "everyone",
    "right",
    "public",
    "whoever",
    "gmail",
    "account",
    "wants",
    "create",
    "gmail",
    "account",
    "gmail",
    "google",
    "would",
    "developed",
    "kept",
    "testing",
    "environment",
    "available",
    "internet",
    "within",
    "organization",
    "available",
    "public",
    "wants",
    "customer",
    "gmail",
    "people",
    "like",
    "right",
    "move",
    "production",
    "internet",
    "deployment",
    "deployment",
    "move",
    "code",
    "production",
    "make",
    "available",
    "relevant",
    "customer",
    "software",
    "built",
    "gmail",
    "case",
    "us",
    "know",
    "deployed",
    "data",
    "centers",
    "whole",
    "code",
    "available",
    "internet",
    "us",
    "access",
    "gmail",
    "emails",
    "right",
    "deployment",
    "phase",
    "actual",
    "code",
    "deployed",
    "customers",
    "going",
    "use",
    "might",
    "set",
    "customers",
    "might",
    "wider",
    "public",
    "right",
    "depends",
    "context",
    "particular",
    "software",
    "deployment",
    "phase",
    "next",
    "phase",
    "maintenance",
    "right",
    "maintenance",
    "phase",
    "deployment",
    "happens",
    "okay",
    "production",
    "software",
    "needs",
    "maintained",
    "right",
    "example",
    "buy",
    "car",
    "bring",
    "new",
    "car",
    "every",
    "six",
    "months",
    "service",
    "right",
    "required",
    "want",
    "use",
    "car",
    "without",
    "issues",
    "basically",
    "take",
    "care",
    "maintain",
    "see",
    "issues",
    "every",
    "every",
    "functionality",
    "machinery",
    "working",
    "expected",
    "similarly",
    "software",
    "basically",
    "ensure",
    "maintenance",
    "regular",
    "maintenance",
    "um",
    "uh",
    "software",
    "crash",
    "say",
    "example",
    "software",
    "uh",
    "might",
    "try",
    "know",
    "hardware",
    "issues",
    "might",
    "know",
    "issues",
    "within",
    "software",
    "already",
    "understood",
    "seven",
    "principles",
    "software",
    "testing",
    "100",
    "testing",
    "possible",
    "even",
    "though",
    "still",
    "ca",
    "find",
    "issues",
    "software",
    "mean",
    "software",
    "deployed",
    "deployed",
    "production",
    "100",
    "defectory",
    "right",
    "ca",
    "say",
    "maintenance",
    "phase",
    "happens",
    "basically",
    "regularly",
    "maintain",
    "software",
    "also",
    "fix",
    "production",
    "issues",
    "come",
    "right",
    "software",
    "maintenance",
    "keep",
    "watch",
    "issues",
    "reported",
    "customers",
    "critical",
    "issues",
    "issues",
    "reported",
    "customer",
    "fixed",
    "redeployed",
    "production",
    "happens",
    "maintenance",
    "phase",
    "right",
    "key",
    "six",
    "uh",
    "basically",
    "six",
    "phases",
    "software",
    "development",
    "life",
    "cycle",
    "need",
    "understand",
    "software",
    "development",
    "life",
    "cycle",
    "understand",
    "software",
    "testing",
    "life",
    "cycle",
    "next",
    "tutorial",
    "cover",
    "right",
    "requirement",
    "gathering",
    "analysis",
    "design",
    "development",
    "testing",
    "deploy",
    "maintenance",
    "simple",
    "phase",
    "life",
    "cycle",
    "development",
    "team",
    "follow",
    "develop",
    "software",
    "application",
    "right",
    "phases",
    "uh",
    "know",
    "remain",
    "true",
    "waterfall",
    "v",
    "model",
    "even",
    "agile",
    "right",
    "agile",
    "uh",
    "know",
    "requirement",
    "gathering",
    "wo",
    "happen",
    "every",
    "sprint",
    "happen",
    "know",
    "say",
    "example",
    "two",
    "three",
    "months",
    "one",
    "increment",
    "program",
    "increment",
    "requirement",
    "gathering",
    "phase",
    "design",
    "development",
    "testing",
    "testing",
    "happen",
    "design",
    "development",
    "testing",
    "happens",
    "short",
    "iterations",
    "two",
    "four",
    "week",
    "cycle",
    "phases",
    "still",
    "phases",
    "still",
    "difference",
    "happens",
    "development",
    "approaches",
    "timeline",
    "follow",
    "waterfall",
    "approach",
    "longer",
    "timelines",
    "child",
    "smaller",
    "timelines",
    "agile",
    "maintenance",
    "know",
    "like",
    "deployment",
    "maintenance",
    "deployment",
    "production",
    "uh",
    "happen",
    "every",
    "month",
    "okay",
    "depends",
    "organization",
    "wants",
    "deploy",
    "production",
    "okay",
    "waterfall",
    "usually",
    "like",
    "six",
    "months",
    "one",
    "year",
    "depended",
    "uh",
    "organization",
    "wants",
    "deploy",
    "production",
    "waterfall",
    "approach",
    "right",
    "basic",
    "software",
    "development",
    "lifecycle",
    "um",
    "understand",
    "well",
    "doubts",
    "please",
    "comment",
    "comment",
    "section",
    "clarify",
    "doubts",
    "good",
    "enough",
    "go",
    "ahead",
    "explain",
    "interviewer",
    "software",
    "testing",
    "interview",
    "tutorial",
    "please",
    "share",
    "subscribe",
    "thank",
    "much",
    "watching"
  ],
  "keywords": [
    "software",
    "testing",
    "tutorial",
    "going",
    "understand",
    "development",
    "lifecycle",
    "life",
    "cycle",
    "working",
    "team",
    "basically",
    "start",
    "deployed",
    "right",
    "need",
    "phases",
    "develop",
    "analyze",
    "requirement",
    "customer",
    "deploy",
    "production",
    "want",
    "work",
    "based",
    "different",
    "know",
    "say",
    "example",
    "waterfall",
    "approach",
    "agile",
    "um",
    "next",
    "within",
    "first",
    "phase",
    "gathering",
    "okay",
    "analysis",
    "organization",
    "uh",
    "certain",
    "two",
    "wants",
    "build",
    "app",
    "like",
    "provide",
    "requirements",
    "particular",
    "features",
    "level",
    "whether",
    "might",
    "issues",
    "case",
    "design",
    "available",
    "house",
    "car",
    "wheels",
    "move",
    "happens",
    "code",
    "test",
    "application",
    "deployment",
    "public",
    "gmail",
    "maintenance",
    "every",
    "six",
    "happen"
  ]
}