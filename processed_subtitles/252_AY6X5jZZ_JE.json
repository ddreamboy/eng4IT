{
  "text": "all right so we've been learning\nJavaScript and we've been learning\ncomputer programming at the same time so\nfar we've covered variables IFL\nstatements and comparison operators next\nup we're going to learn functions\nfunctions at first to a new programmer\ncan feel a little tricky but I promise\nyou they'll catch on a lot faster than\nit feels like at the very beginning so\nstick with it and do what we do in this\nexercise a couple days in a row and\nyou're going to feel pretty confident\nwith what functions are before we get\ninto functions let's move job script\ninto our web page because we don't want\nto be writing functions in the console\nit's too many lines it would be too\nannoying so here we go we're on our\nindex.html file and if you're going to\ninsert CSS on your page there's two ways\nto do it you can do a style\ntag and then anything within the style\ntags is treated as CSS or you can pull\nin an external stylesheet another file\nwith a link tag JavaScript works the\nsame way we can run a script tag\nand then anything within this script tag\nis treated as JavaScript I'm going to\nsay alert um and I'm also going to hit\nsave and I'm running what's called live\nreload so when I save my file this web\nbrowser is going to automatically reload\nmy page if you're doing this on your on\nyour own without live reload you're\ngoing to have to save and then hit\nrefresh if you want to see how I'm doing\nlive reload I'll put some links to that\nin the description but it might be a\nlittle over your head if you're a brand\nnew user so there you go you can see\nthat now my web page when it reloads has\nalerted a empty alert for me and there's\na reason I put the script tag at the\nbottom of the page and let me show you\nwhy by moving it up towards the top I'm\ngoing to hit save again and you'll\nnotice that now I get the alert before I\nsee my web page I have an empty page and\nthe alert fires this happens because\njavascripts happens in sequence as your\nweb page is rendering all the elements\nwhat that means is is when your browser\nopens up your HTML file it's going to\nstart going through line by line and\nadding in all the elements so when it\ngets to a script tag it's going to load\nall that JavaScript and then it's going\nto run it before it does anything else\nso in this case it runs my alert up here\nbefore it's rendered all these elements\nonto the page you know JavaScript is\nreally pretty fast you're not really\ndoing alerts a lot so all the user will\nnormally notice if you put your script\nat the top of the page is the web page\nmight feel like it appears a little bit\nslower if you put it down here at the\nbottom of the page right before the\nclosing body tag then what's going to\nhappen is is your web page will spit out\nall the content first so it looks like\nthe web page is loaded and a split\nsecond later your script will be\nactivated and web developers have\nlearned over the years that this creates\na much faster feeling web page and the\nuser doesn't know any different so we\nrecommend that always put your script\ntags at the bottom right before your\nclosing body tag there's almost never a\nreason that your script needs to go in\nthe top up in the header so the script\ntag is the first way of doing it and\njust like a link tag you can also give\nthe script tag a file to pull in as well\nso in this case I'm going to delete the\ncontent and I'm just going to go Source\nSRC equals and then that basically is\nlike the href is for CSS so instead of\npulling in the Styles main.css I'm going\nto pull in the scripts\nmain.js and now that file gets loaded in\nand execute it as soon as it's loaded\nthe normal folder name for JavaScript is\ngoing to be called a JS folder or a\nscripts folder so here we have scripts\nJS is just fine either one works so now\nI'm loading in this main.js file so if I\nhit alert and save you see I get that\nalert as well and it's already rendered\nmy web page first before it's executing\nmy JavaScript so there's how you get\nJavaScript on a page if you have\nmultiple JavaScript files you can do\nmultiple script tags just like that and\nit will execute them in order it's going\nto run my main.js first then my main.\ntwo then my main do3 then my main4 so\nthat's what's going to happen if you\nhave multiple script tags if you want to\nbreak up your JavaScript into several\nfiles to make it easier to maintain so\nlet's go ahead and learn about functions\nso functions are basically a piece of\ncode that does one or more actions piece\nof code that does one or more actions\nso I'll just show you what a function is\nbecause it's a lot easier to see it than\nto hear about it you start off by typing\nfunction and we'll just call this\nfunction go you open and close your\nparentheses and then you open and close\nyour curly braces so whatever I put in\nhere is going to execute when the go\nfunction is called so let's just say\nalert\nhigh alerts hey\nthere and so it's going to do two alerts\nI'm going to save my web page refreshes\nand guess what nothing happens because I\ndefined my go function but I didn't call\nmy G function I call it by saying go\nopen close parenthesis and then a\nsemicolon now when I refresh it's going\nto say hi and then it's going to say hey\nthere I have my function a cool thing\nabout functions is they can be called as\nmany times as you want I can call go\ntwice hi hey there hi hey there so\nthat's kind of cool another thing about\nfunctions is they accept what are called\nAR arguments let me show you what\narguments are I could say name age and\nthen instead of alerting hi hey there I\ncan alert name and I can alert age now\nin order for it to know what the name\nand the age are I pass them in when I'm\ncalling my function so I can say my name\nis will and I'm 34 because I just had a\nbirthday so now will gets passed in as\nthe first argument which is name and 34\ngets passed and is a second argument\nwhich is age so now it's going to alert\nwill and then it's going to alert 34\nlet's save it there you go will there\nyou go 34 once again these are called\narguments and what arguments allow us to\ndo is they allow us to make code\nreusable because at first you might\nthink hm I could just stick to go I\ncould go ver name equals\nwill and then ver age equals\n34 and then I could forget this whole\narguments thing and I could just say\nalert name age well yep that's going to\ndo the same thing it's going to alert\nwill and it's going to alert 34 but if I\ncode it with arguments it's reusable let\nme show you let's go back to name\nage let's go back to will 34 and now I\ncan call it a second time with a\ndifferent\nperson let's say my wife\nLaura 28 there we go so now it's going\nto run one time with Will and 34 will 34\nand then the next time it runs it's\ngoing to run with Laura 28 and so that's\nkind of a good way of coding it's it's\ncalled dry which is do not repeat\nyourself if I could\nspell do not repeat yourself Dr y do not\nrepeat yourself or don't repeat yourself\nso dry code is a good thing we want to\ncode as little as possible that makes it\neasy to maintain that makes for as few\nlines of code AS possible so that's kind\nof what a function does it accepts\narguments and it runs multiple commands\nnow a function also returns a value\nwhatever you type in return will\nactually give you a value out let me\nshow you what a return value does you\nmight remember from prompt earlier in\nthe first lesson we went ver name equals\nprompt and then prompt opened up a\nwindow well I'll just show you right\nthere it opened up a window and then\nwhen I said will enter will got passed\nin from the prompt into my name variable\nso what actually happened was is prompt\nhad a return value that name received\nyou see that it executed this first and\nwhen prompt was done whatever prompt\nreturned which was my name will went\ninto name and so how you code a function\nlike that is very\nsimple let's make a function called add\nand let's make it first second we want\nto add two numbers together and so I'm\ngoing to go add let's say ver sum equals\nadd one and two so we're going to add\none and two together and so instead of\njust going first plus\nsecond I'm going to return first plus\nsecond so now nothing actually happens\nin this function like alerts or anything\nlike that we are going to return the\nvalue value of first plus second which\nmeans it's going to run the function the\nfunction executes it returns kicks back\nout first plus second which means that\nit's going to add one and two and then\nthat is going to get passed into sum so\nnow I can alert\nsum and sum is going to be three there\nyou go three because I added one and two\nit returned that back out so I could do\nsomething silly like this could pass in\nadd one and two that's one that's two\nI'm just going to return will so now\nit's just going to say well Su equals\nwill and I alerted to I basically\nignored my arguments I returned whatever\nvalue I wanted to return which didn't\nmake any sense and that value got passed\ninto here so no now no matter what I\npass into add function it's always going\nto return will of course again that's\nkind of silly I want to return 1 + 2\nand now I have my ADD function another\nway that you can do this with a little\nbit less code is I could just\nalert add one and two so it's going to\nrun this first because this is an inner\nfunction JavaScript is going to know I\nhave to run this in order to know what\nto give to alert whatever this returns\nI'm going to pass into my alert function\nas the value so this will do the exact\nsame thing it's going to run one and two\none and two returns three\nand then as far as JavaScript is\nconcerned it's just going to alert that\nreturned value so I'm going to save that\nyou see it alerts three let me show you\nwhat happens if you alert if you return\na second time let's return will\nnow it does absolutely nothing because\nas soon as the return happens this\nfunction is finished what happens after\nthe return never fires JavaScript is\ndone so I can say\nalerts hi there and you're never going\nto see alert high there it alerts three\nfrom down here and I never see the alert\nhigh there up here the function ran it\nreturned and then the function was\nfinished now you can have multiple\nreturns you could do something like\nH let's go there name\nequals we say this um let's go\nalert add\nadd is kind of a bad we'll call we'll go\nback to go since we're not going to be\ndoing adding will and we'll go back to\nmy my age of\n34 so this is going to be now called go\nname\nage\nif age is less than\n20 then we are going to\nreturn name plus an exclamation mark CU\nafter all I'm less than 20 that's pretty\ncool else we are just going to return my\nname so now this will return a different\nthing if my age is less than 20 then I'm\ngoing to return name shouted else I'm\ngoing to return just my name so go now\nwe'll check this out and it's just going\nto return my name because I'm older than\n20 and then I'm going to alert that\nthere you go just will so let's change\nmy name to\n19 and now it's going to shout my name\nbecause after all you shout at teenagers\na lot more more than you do at adults um\nand what happens if I don't return\nanything at all let's say I say go name\nand age and I'm going to get undefined\nso this function has no return which\nmeans it's returning nothing which means\nit's returning undefined which brings us\nto one more of our types in JavaScript\nand that is the undefined\ntype if I say ver a but I don't give it\na value then I alert a it's going to\nalert undefined I defined a as a\nvariable but I didn't Define the value\nof a so another type in JavaScript is\nundefined and it means simply well\nundefined so that's about all you need\nto know with that so by default every\nfunction is going to return undefined\nunless you give it a return\nvalue will again so there you go that's\nfunctions let's um let's leave it there\nfor now so I'm going to say go ahead\nmake an addition function make a\nsubtraction function make a\nmultiplication function make some\nfunctions play around with them and once\nyou feel confident with that let's move\non to our last lesson before we get into\nsome actual useful things that we can\nuse JavaScript for on our web page\n",
  "words": [
    "right",
    "learning",
    "javascript",
    "learning",
    "computer",
    "programming",
    "time",
    "far",
    "covered",
    "variables",
    "ifl",
    "statements",
    "comparison",
    "operators",
    "next",
    "going",
    "learn",
    "functions",
    "functions",
    "first",
    "new",
    "programmer",
    "feel",
    "little",
    "tricky",
    "promise",
    "catch",
    "lot",
    "faster",
    "feels",
    "like",
    "beginning",
    "stick",
    "exercise",
    "couple",
    "days",
    "row",
    "going",
    "feel",
    "pretty",
    "confident",
    "functions",
    "get",
    "functions",
    "let",
    "move",
    "job",
    "script",
    "web",
    "page",
    "want",
    "writing",
    "functions",
    "console",
    "many",
    "lines",
    "would",
    "annoying",
    "go",
    "file",
    "going",
    "insert",
    "css",
    "page",
    "two",
    "ways",
    "style",
    "tag",
    "anything",
    "within",
    "style",
    "tags",
    "treated",
    "css",
    "pull",
    "external",
    "stylesheet",
    "another",
    "file",
    "link",
    "tag",
    "javascript",
    "works",
    "way",
    "run",
    "script",
    "tag",
    "anything",
    "within",
    "script",
    "tag",
    "treated",
    "javascript",
    "going",
    "say",
    "alert",
    "um",
    "also",
    "going",
    "hit",
    "save",
    "running",
    "called",
    "live",
    "reload",
    "save",
    "file",
    "web",
    "browser",
    "going",
    "automatically",
    "reload",
    "page",
    "without",
    "live",
    "reload",
    "going",
    "save",
    "hit",
    "refresh",
    "want",
    "see",
    "live",
    "reload",
    "put",
    "links",
    "description",
    "might",
    "little",
    "head",
    "brand",
    "new",
    "user",
    "go",
    "see",
    "web",
    "page",
    "reloads",
    "alerted",
    "empty",
    "alert",
    "reason",
    "put",
    "script",
    "tag",
    "bottom",
    "page",
    "let",
    "show",
    "moving",
    "towards",
    "top",
    "going",
    "hit",
    "save",
    "notice",
    "get",
    "alert",
    "see",
    "web",
    "page",
    "empty",
    "page",
    "alert",
    "fires",
    "happens",
    "javascripts",
    "happens",
    "sequence",
    "web",
    "page",
    "rendering",
    "elements",
    "means",
    "browser",
    "opens",
    "html",
    "file",
    "going",
    "start",
    "going",
    "line",
    "line",
    "adding",
    "elements",
    "gets",
    "script",
    "tag",
    "going",
    "load",
    "javascript",
    "going",
    "run",
    "anything",
    "else",
    "case",
    "runs",
    "alert",
    "rendered",
    "elements",
    "onto",
    "page",
    "know",
    "javascript",
    "really",
    "pretty",
    "fast",
    "really",
    "alerts",
    "lot",
    "user",
    "normally",
    "notice",
    "put",
    "script",
    "top",
    "page",
    "web",
    "page",
    "might",
    "feel",
    "like",
    "appears",
    "little",
    "bit",
    "slower",
    "put",
    "bottom",
    "page",
    "right",
    "closing",
    "body",
    "tag",
    "going",
    "happen",
    "web",
    "page",
    "spit",
    "content",
    "first",
    "looks",
    "like",
    "web",
    "page",
    "loaded",
    "split",
    "second",
    "later",
    "script",
    "activated",
    "web",
    "developers",
    "learned",
    "years",
    "creates",
    "much",
    "faster",
    "feeling",
    "web",
    "page",
    "user",
    "know",
    "different",
    "recommend",
    "always",
    "put",
    "script",
    "tags",
    "bottom",
    "right",
    "closing",
    "body",
    "tag",
    "almost",
    "never",
    "reason",
    "script",
    "needs",
    "go",
    "top",
    "header",
    "script",
    "tag",
    "first",
    "way",
    "like",
    "link",
    "tag",
    "also",
    "give",
    "script",
    "tag",
    "file",
    "pull",
    "well",
    "case",
    "going",
    "delete",
    "content",
    "going",
    "go",
    "source",
    "src",
    "equals",
    "basically",
    "like",
    "href",
    "css",
    "instead",
    "pulling",
    "styles",
    "going",
    "pull",
    "scripts",
    "file",
    "gets",
    "loaded",
    "execute",
    "soon",
    "loaded",
    "normal",
    "folder",
    "name",
    "javascript",
    "going",
    "called",
    "js",
    "folder",
    "scripts",
    "folder",
    "scripts",
    "js",
    "fine",
    "either",
    "one",
    "works",
    "loading",
    "file",
    "hit",
    "alert",
    "save",
    "see",
    "get",
    "alert",
    "well",
    "already",
    "rendered",
    "web",
    "page",
    "first",
    "executing",
    "javascript",
    "get",
    "javascript",
    "page",
    "multiple",
    "javascript",
    "files",
    "multiple",
    "script",
    "tags",
    "like",
    "execute",
    "order",
    "going",
    "run",
    "first",
    "main",
    "two",
    "main",
    "do3",
    "main4",
    "going",
    "happen",
    "multiple",
    "script",
    "tags",
    "want",
    "break",
    "javascript",
    "several",
    "files",
    "make",
    "easier",
    "maintain",
    "let",
    "go",
    "ahead",
    "learn",
    "functions",
    "functions",
    "basically",
    "piece",
    "code",
    "one",
    "actions",
    "piece",
    "code",
    "one",
    "actions",
    "show",
    "function",
    "lot",
    "easier",
    "see",
    "hear",
    "start",
    "typing",
    "function",
    "call",
    "function",
    "go",
    "open",
    "close",
    "parentheses",
    "open",
    "close",
    "curly",
    "braces",
    "whatever",
    "put",
    "going",
    "execute",
    "go",
    "function",
    "called",
    "let",
    "say",
    "alert",
    "high",
    "alerts",
    "hey",
    "going",
    "two",
    "alerts",
    "going",
    "save",
    "web",
    "page",
    "refreshes",
    "guess",
    "nothing",
    "happens",
    "defined",
    "go",
    "function",
    "call",
    "g",
    "function",
    "call",
    "saying",
    "go",
    "open",
    "close",
    "parenthesis",
    "semicolon",
    "refresh",
    "going",
    "say",
    "hi",
    "going",
    "say",
    "hey",
    "function",
    "cool",
    "thing",
    "functions",
    "called",
    "many",
    "times",
    "want",
    "call",
    "go",
    "twice",
    "hi",
    "hey",
    "hi",
    "hey",
    "kind",
    "cool",
    "another",
    "thing",
    "functions",
    "accept",
    "called",
    "ar",
    "arguments",
    "let",
    "show",
    "arguments",
    "could",
    "say",
    "name",
    "age",
    "instead",
    "alerting",
    "hi",
    "hey",
    "alert",
    "name",
    "alert",
    "age",
    "order",
    "know",
    "name",
    "age",
    "pass",
    "calling",
    "function",
    "say",
    "name",
    "34",
    "birthday",
    "gets",
    "passed",
    "first",
    "argument",
    "name",
    "34",
    "gets",
    "passed",
    "second",
    "argument",
    "age",
    "going",
    "alert",
    "going",
    "alert",
    "34",
    "let",
    "save",
    "go",
    "go",
    "34",
    "called",
    "arguments",
    "arguments",
    "allow",
    "us",
    "allow",
    "us",
    "make",
    "code",
    "reusable",
    "first",
    "might",
    "think",
    "hm",
    "could",
    "stick",
    "go",
    "could",
    "go",
    "ver",
    "name",
    "equals",
    "ver",
    "age",
    "equals",
    "34",
    "could",
    "forget",
    "whole",
    "arguments",
    "thing",
    "could",
    "say",
    "alert",
    "name",
    "age",
    "well",
    "yep",
    "going",
    "thing",
    "going",
    "alert",
    "going",
    "alert",
    "34",
    "code",
    "arguments",
    "reusable",
    "let",
    "show",
    "let",
    "go",
    "back",
    "name",
    "age",
    "let",
    "go",
    "back",
    "34",
    "call",
    "second",
    "time",
    "different",
    "person",
    "let",
    "say",
    "wife",
    "laura",
    "28",
    "go",
    "going",
    "run",
    "one",
    "time",
    "34",
    "34",
    "next",
    "time",
    "runs",
    "going",
    "run",
    "laura",
    "28",
    "kind",
    "good",
    "way",
    "coding",
    "called",
    "dry",
    "repeat",
    "could",
    "spell",
    "repeat",
    "dr",
    "repeat",
    "repeat",
    "dry",
    "code",
    "good",
    "thing",
    "want",
    "code",
    "little",
    "possible",
    "makes",
    "easy",
    "maintain",
    "makes",
    "lines",
    "code",
    "possible",
    "kind",
    "function",
    "accepts",
    "arguments",
    "runs",
    "multiple",
    "commands",
    "function",
    "also",
    "returns",
    "value",
    "whatever",
    "type",
    "return",
    "actually",
    "give",
    "value",
    "let",
    "show",
    "return",
    "value",
    "might",
    "remember",
    "prompt",
    "earlier",
    "first",
    "lesson",
    "went",
    "ver",
    "name",
    "equals",
    "prompt",
    "prompt",
    "opened",
    "window",
    "well",
    "show",
    "right",
    "opened",
    "window",
    "said",
    "enter",
    "got",
    "passed",
    "prompt",
    "name",
    "variable",
    "actually",
    "happened",
    "prompt",
    "return",
    "value",
    "name",
    "received",
    "see",
    "executed",
    "first",
    "prompt",
    "done",
    "whatever",
    "prompt",
    "returned",
    "name",
    "went",
    "name",
    "code",
    "function",
    "like",
    "simple",
    "let",
    "make",
    "function",
    "called",
    "add",
    "let",
    "make",
    "first",
    "second",
    "want",
    "add",
    "two",
    "numbers",
    "together",
    "going",
    "go",
    "add",
    "let",
    "say",
    "ver",
    "sum",
    "equals",
    "add",
    "one",
    "two",
    "going",
    "add",
    "one",
    "two",
    "together",
    "instead",
    "going",
    "first",
    "plus",
    "second",
    "going",
    "return",
    "first",
    "plus",
    "second",
    "nothing",
    "actually",
    "happens",
    "function",
    "like",
    "alerts",
    "anything",
    "like",
    "going",
    "return",
    "value",
    "value",
    "first",
    "plus",
    "second",
    "means",
    "going",
    "run",
    "function",
    "function",
    "executes",
    "returns",
    "kicks",
    "back",
    "first",
    "plus",
    "second",
    "means",
    "going",
    "add",
    "one",
    "two",
    "going",
    "get",
    "passed",
    "sum",
    "alert",
    "sum",
    "sum",
    "going",
    "three",
    "go",
    "three",
    "added",
    "one",
    "two",
    "returned",
    "back",
    "could",
    "something",
    "silly",
    "like",
    "could",
    "pass",
    "add",
    "one",
    "two",
    "one",
    "two",
    "going",
    "return",
    "going",
    "say",
    "well",
    "su",
    "equals",
    "alerted",
    "basically",
    "ignored",
    "arguments",
    "returned",
    "whatever",
    "value",
    "wanted",
    "return",
    "make",
    "sense",
    "value",
    "got",
    "passed",
    "matter",
    "pass",
    "add",
    "function",
    "always",
    "going",
    "return",
    "course",
    "kind",
    "silly",
    "want",
    "return",
    "1",
    "2",
    "add",
    "function",
    "another",
    "way",
    "little",
    "bit",
    "less",
    "code",
    "could",
    "alert",
    "add",
    "one",
    "two",
    "going",
    "run",
    "first",
    "inner",
    "function",
    "javascript",
    "going",
    "know",
    "run",
    "order",
    "know",
    "give",
    "alert",
    "whatever",
    "returns",
    "going",
    "pass",
    "alert",
    "function",
    "value",
    "exact",
    "thing",
    "going",
    "run",
    "one",
    "two",
    "one",
    "two",
    "returns",
    "three",
    "far",
    "javascript",
    "concerned",
    "going",
    "alert",
    "returned",
    "value",
    "going",
    "save",
    "see",
    "alerts",
    "three",
    "let",
    "show",
    "happens",
    "alert",
    "return",
    "second",
    "time",
    "let",
    "return",
    "absolutely",
    "nothing",
    "soon",
    "return",
    "happens",
    "function",
    "finished",
    "happens",
    "return",
    "never",
    "fires",
    "javascript",
    "done",
    "say",
    "alerts",
    "hi",
    "never",
    "going",
    "see",
    "alert",
    "high",
    "alerts",
    "three",
    "never",
    "see",
    "alert",
    "high",
    "function",
    "ran",
    "returned",
    "function",
    "finished",
    "multiple",
    "returns",
    "could",
    "something",
    "like",
    "h",
    "let",
    "go",
    "name",
    "equals",
    "say",
    "um",
    "let",
    "go",
    "alert",
    "add",
    "add",
    "kind",
    "bad",
    "call",
    "go",
    "back",
    "go",
    "since",
    "going",
    "adding",
    "go",
    "back",
    "age",
    "34",
    "going",
    "called",
    "go",
    "name",
    "age",
    "age",
    "less",
    "20",
    "going",
    "return",
    "name",
    "plus",
    "exclamation",
    "mark",
    "cu",
    "less",
    "20",
    "pretty",
    "cool",
    "else",
    "going",
    "return",
    "name",
    "return",
    "different",
    "thing",
    "age",
    "less",
    "20",
    "going",
    "return",
    "name",
    "shouted",
    "else",
    "going",
    "return",
    "name",
    "go",
    "check",
    "going",
    "return",
    "name",
    "older",
    "20",
    "going",
    "alert",
    "go",
    "let",
    "change",
    "name",
    "19",
    "going",
    "shout",
    "name",
    "shout",
    "teenagers",
    "lot",
    "adults",
    "um",
    "happens",
    "return",
    "anything",
    "let",
    "say",
    "say",
    "go",
    "name",
    "age",
    "going",
    "get",
    "undefined",
    "function",
    "return",
    "means",
    "returning",
    "nothing",
    "means",
    "returning",
    "undefined",
    "brings",
    "us",
    "one",
    "types",
    "javascript",
    "undefined",
    "type",
    "say",
    "ver",
    "give",
    "value",
    "alert",
    "going",
    "alert",
    "undefined",
    "defined",
    "variable",
    "define",
    "value",
    "another",
    "type",
    "javascript",
    "undefined",
    "means",
    "simply",
    "well",
    "undefined",
    "need",
    "know",
    "default",
    "every",
    "function",
    "going",
    "return",
    "undefined",
    "unless",
    "give",
    "return",
    "value",
    "go",
    "functions",
    "let",
    "um",
    "let",
    "leave",
    "going",
    "say",
    "go",
    "ahead",
    "make",
    "addition",
    "function",
    "make",
    "subtraction",
    "function",
    "make",
    "multiplication",
    "function",
    "make",
    "functions",
    "play",
    "around",
    "feel",
    "confident",
    "let",
    "move",
    "last",
    "lesson",
    "get",
    "actual",
    "useful",
    "things",
    "use",
    "javascript",
    "web",
    "page"
  ],
  "keywords": [
    "right",
    "javascript",
    "time",
    "going",
    "functions",
    "first",
    "feel",
    "little",
    "lot",
    "like",
    "get",
    "let",
    "script",
    "web",
    "page",
    "want",
    "go",
    "file",
    "two",
    "tag",
    "anything",
    "tags",
    "another",
    "way",
    "run",
    "say",
    "alert",
    "um",
    "hit",
    "save",
    "called",
    "reload",
    "see",
    "put",
    "might",
    "show",
    "happens",
    "means",
    "gets",
    "know",
    "alerts",
    "second",
    "never",
    "give",
    "well",
    "equals",
    "name",
    "one",
    "multiple",
    "make",
    "code",
    "function",
    "call",
    "whatever",
    "hey",
    "nothing",
    "hi",
    "thing",
    "kind",
    "arguments",
    "could",
    "age",
    "pass",
    "34",
    "passed",
    "ver",
    "back",
    "repeat",
    "returns",
    "value",
    "return",
    "prompt",
    "returned",
    "add",
    "sum",
    "plus",
    "three",
    "less",
    "20",
    "undefined"
  ]
}