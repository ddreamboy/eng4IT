{
  "text": "hello everyone and thank you so much for\njoining in and welcome to video record\nwebinars so team today it's an\ninteresting session on machine learning\nso we'll be discussing about the python\nlibraries for data science that you have\nto know in this current year so this is\nthe updated list so we'll go through one\nby one today\nso the agenda for today's session is\nlike this so we'll understand what\nexactly is Python and then we will look\ninto the important features of python\nwhich makes it so popular and so famous\nof the reason that it is and then we\nwill look into the libraries that you\nhave to learn for data science in the\ncurrent year and we'll also have a quick\nhand transition about this topic of data\nscience so that's the agenda for today's\nsession so let's proceed ahead and let's\nget started\nso let's start by understanding the\nPython programming language now when we\ntalk about this python see this python\nis a programming language which has been\ncreated by a person called Judo one\nerosum so this was created in the year\nof 1989 and the Python programming\nlanguage our the name python was\nactually inspired by the Creator's\nfavorite show that is the create an\nemails Monty Python so that's where the\nterm python was actually used I mean\nwhen he started thinking about creating\na programming language actually and here\nthis best part about this Python\nprogramming language is\nit's a general purpose high level\ninterpreted language with easy easy\nsyntax and dynamic semantics\nso at that time before python one of the\ncommon issue that we had with other\nprogramming language was it was\ndifficult to write so the reason it was\ndifficult to write because it's not\nsomething it is very difficult to type\nit's because there were a lot of rules\nthere were a lot of rules which were\nbeing involved in the other programming\nlanguages\nthat was one of the main reason so the\nsyntax was very difficult maybe to give\nyou an example at the end of every\nsentence maybe you have to use a\nspecific symbol or there are certain set\nof rules that you have to follow in\norder to write a computer program so\nwhat used to happen was as a beginner\nwhen you started to use that programming\nlanguage in your project\nmost of the time were actually involved\nin fixing these syntax issues rather\nthan working on the real problem\nso that was a challenge that were being\nfaced at that time so hence he decided\nto create a programming language which\nis easy to write easy to create easy to\nwrite the program with less syntax rule\nto learn for so this would in turn\nenable the people to focus more on\nproblem solving rather than working on\nthe rules and this python is a\nprogramming language which it has got\nsome of the key ideas like key benefits\nof this programming languages one it is\nopen source that means you can use this\npython interpreter for free and you can\nmake the changes you can also publish\nyour own version you can use it for\nindustry purpose or everything is for\nfree and it has got an amazing Community\nSupport so whenever you have got any\nquestion you can post your query in the\nstack Overflow and the other famous\nfamous sites where you can get the help\nfrom the community which is very active\ncommunity of python and python has a\nvery large standard Library using which\nyou can actually get the library and use\nit in your program to complete the\nprojects on time and it is it supports\nthe object-oriented programming\nstructures which is the classes and\nobject and it's an easy to learn\nprogramming language because it has got\nthe easy syntax and the way that you\nwould write the program it is very\nsimple and you can anyone can start\ncoding it in an easier manner so that's\nthe main idea about this Python\nprogramming language\nand here when we talk about this Python\nprogramming language it has some of the\nother important features so let's look\ninto the important features of Python\nprogramming language one important\nfeature is its Simplicity it is designed\nso that as I mentioned you can think\nmore of a code that means think more of\nthe problem that you are trying to solve\nrather than thinking about the syntax or\nthe rules that's one of the important\nfeature and that's one of the main\nreason where the data scientists prefer\nto use Python programming language\nbecause when we talk about data science\nit's all about generating the insights\nfrom the data set now when you want to\nget more information out of the data set\nit would make sense if you spend more\ntime with the data rather than the rules\nisn't it so that's the main idea right\nnow so which we're using this you can\nthink more of a code and less of a\nsyntax\nthat's the key important feature and\nhere this is an open source which means\nit is free for everyone to use\nit is portable so it can be written in\none computer and executed in the other\ncomputer without any issue so as a\nresult of this the sharing of code is\nvery simple when we talk about the\npython codes\nand it is admittable and the extensible\nso it allows the code from other\nprogramming languages like C C plus plus\ncan be embedded into this Python program\nso that certain functions can actually\nbe performed so as a result of this this\nwould make the python even more powerful\nand this python is a interpreted\nprogramming language and the best part\nis the memory management the CPU so all\nthese things will be handled by python\nitself we don't have to worry about it\nand it does in a pretty good way and the\npython has a huge Library support\nit has called huge headset of libraries\nlike numpy for numerical array data type\nand we have got matplotlib in c bond for\ncreating the visualization we've got\npandas library for the data processing\nso we've got various libraries that we\nhave got which will help us in solving\nthe problems in a better way\nand this python is based on object\noriented programming structure so as a\nresult of this this will help us to\nbreak down the complex problem into the\ncode with the help of the security so\nthat it can obtain the better solution\nso here when we talk about the\nobject-oriented programming structure\nwhere we'll be dealing with the data\ntypes of classes and the objects so\nthat's the overall idea about this\nobject oriented programming approach\nand when we talk about this libraries so\nlet's have a look into the important\nlibraries for data science when we talk\nabout this Python programming language\nthe first and the important library that\nwe generally use it whenever we are\nworking with the data we see pandas\nLibrary it's a library\nwhich is written in for the Python\nprogramming language and this is\nspecially used for data manipulation and\nthe analysis that is the main idea right\nnow it will help us to perform the data\ngo to perform the analysis in an\neffective way and this library is well\nsuited for various types of data set so\nit is suited for the tabular data it is\nsuited for ordered and the unordered\ntime series data and even this would\nwork for any other types of\nobservational or the statistical data as\nwell so it is suitable for various types\nof data set and this is the most\ncommonly used Library when we are\nloading the data set because this will\nhelp us to load the data set in a\nstructured format which will enable us\nto perform the analysis on top of it\nso that's the main advantage of using\nthis python that is the pandas Library\nokay the next library that we have got\nis the numpy library so numpy is a core\nlibrary that we have got for scientific\ncomputing\nso when we say scientific Computing so\none of the key thing that we want to do\nwhenever we are working with the data\nset is we want to perform the operation\nit could be as simple as multiplication\nor it could be any complex mathematical\noperation that we want to perform on the\ndata set now at that time okay at that\ntime so here having a library which will\nhelp us to compute that calculation in a\nbetter way will make our life easy\nbecause the calculations will happen in\na much better in a much better and an\nefficient way that's the overall idea\nand the importance of this numpy Library\nokay and then\nwe have got the address Library okay so\nwhen we talk about this panel sorry we\nare talking then we have got this\nmatplotlib library now when we talk\nabout this matte naughty Library\nso this is actually a package that we\nhave got for creating the 2D plots so\nhere we use it for creation of various\ntypes of plot depending on the data that\nwe are working we've got bar graph we've\ngot histogram chart we've got scatter\nplot we've got pie chart we have got\nhexagonal pinchard area plot so these\nare the various types of plot that is\nsupported by this matplotlib library and\nwe choose the relevant type of plot\ndepending on the type of data that we\nare dealing with\nokay so generally when we are working\nwith this matplotlip Library we'll be\nimporting the matplotlib especially by\ndirectly importing the its pipelot\nmodule so you will import people\nimporting the matplot tube Library as\nimport matplotlib\ndot Pi plot as PLT then the we will\ndefinitely call the various other\nplotting function the reason that we\nimport this pipelot module because all\nthe plotting functions are available\ninside this Pi plot module that's the\nmain idea of importing this mat.lib\nlibrary and then we have got selenium so\nselenium is a package or a library which\nwe generally use it to automate the web\nbrowser interaction with the help of\nPython programming language\nso with this Webdriver API binding so we\ncan actually write the code in the\nPython programming language and we can\nperform the action and that means we can\nactually perform the automated testing\nwith the help of the selenium Webdriver\nby running the web testing on the\nvarious browsers\nmoving on the next library that we have\ngot is opencv Library so opencv is a\npython Library which is designed to\nsolve the computer vision problems\nso here when we talk about the opencv so\nopen EV array structures are converted\nto and from the numpy arrays\nhere this is the library which is well\nknown for computer vision based task so\nwhenever we are working with the images\nor the video data you'll definitely\nstart using this opencv library and yeah\nthat's about the opencv libraries it's\nbasically we use it whenever we are\ndealing with the visual data on our\nnumber five we've got the Sci-Fi Library\nso scipy is a free and an open source\npython library and this is also used for\nscientific Computing and Technical\ncomputing\nnow this scipy library has various\nbuilt-in functions which we can use it\nto perform the direct scientific\nComputing it has got Advanced scientific\nComputing functions which we can use it\nand apply it on the data set we don't\nhave to create those function or Define\nthose mathematical operation it is\nalready available by default that's the\nadvantage of using this scipy Library\nand the next library that we have got is\nthe scikit now the scikit library\npsychic learn library is one of the\nimportant Library when it comes to the\ndata science here\nthis scikit Library we will we actually\ncall this as\nthe machine learning library for the\nPython programming language\nnow this scikit-learn has got the\nmachine learning models for various\ntasks like classification\nregression as well as the clustering\nalgorithm so these are the common types\nof algorithms which are supported out of\nthe box from the cyclic Library you can\ncheck out the documentation page as well\nso and it's not just the models all the\nother helper functions like splitting\nthe data set into two parts or\nperforming the pre-processing like the\none hot encoder standard scalar and any\nmean Max scale so all the required types\nof data transformation that we want to\ndo it is supported and once the model\nhas been trade when it comes to the\nevaluation it has got the variation\nfunctions for regression as well as\nclassification to name a few rmsc MSC R2\nscore which comes under the irrigation\nand under the classification we've got\nPrecision recall F1 score classification\nreport\nso we have got these various metrics and\nall these are supported by scikitlan\nLibrary itself\nthis Library which is an open source you\ncan also publish your own model or you\ncan create your own custom model by\nmaking use of the concept of subclassing\nfrom the model class\nokay these are some of the important\nfeatures of this scikit-learn Library\nmoving on we've got the spark Library so\nPi spark so the pi spark is also known\nas the spark python API it actually\nexposes the spark programming model to\nthe Python programming language\nso that's the importance of Pi spark\nLibrary\nand we've got a library that's called as\nDjango so Django is a pythmic framework\nand this is a framework which provides a\nstructure and the common methodologies\nto make the life of a web application\ndeveloper a much easier one for building\nthe flexible scalable and maintainable\nweb application\nit's a high level and it has got the MVC\nmvt style architecture and it's a web\nframework which is written for quick and\nPowerful programming Python language and\nit has got the open source collection of\nlibraries for building a full\nfunctioning web application that's the\nimportance of this angle Library\nand on number one we've got the\ntensorflow so tensorflow is a python\nLibrary which we generally use it to\nimplement the Deep learning neural\nnetwork\nhere when it comes to the computation\nthe computation will happen as a data\nflow graph where we can switch on the\ndata flow and every operation that we\nperform on the data set will be\nremembered so by remembering the\noperation we can also take the gradients\nthat means we can go backward and\nextract the gradients and using the\ngradients we can update the parameters\nso these are some of the important\nlibraries that we have got and Python\nprogramming language now to give you a\nbetter understanding about this Python\nprogramming language so let's take up an\nexample uh task of the machine learning\nand you will be able to understand how\neasy it is to work with the same so I'm\ngoing to launch a new notebook\nsee for showing you the demonstration\nI've got the code already written so\nhere we've got a given data set okay I'm\ngoing to execute all the cells\nokay so what we are going to do is if\nyou look into this scenario I'm already\nimporting two imported libraries numpy\nlibrary and the pandas library now using\nthe pandas Library so as I've mentioned\nwe generally use the pandas library to\nload the rate asset and work with the\ndata set and even in this scenario I'm\nusing the pandas library and\nspecifically the function of read CSV\nfunction to read the file and create it\nas a data frame object which is a data\ntype of pandas library and not just\ncreating the data frame we can also\nmodify the data set as well for example\nin this scenario okay so we have got the\ncolumns uh that means like a column\ncalled unnamed 0 and I'm dropping that\ncolumn that means I am removing this\ncolumn from the data frame\nand we can make use of the head function\nto display first few entries of this\ndata frame\nand here we have got the other inbuilt\nfunctions to check whether we have any\nmissing values in our data frame and in\nour case we have the missing value count\nas 0 which means\nwe do not have any missing values in our\ndata set now that's a good thing\nnow once we have done the analysis maybe\nif I want to create any visualization at\nthat time I'll be making use of the\nmatplotlib library\nnow once I've done the basic analysis on\nthe given data set next we'll proceed\nahead and apply this data set on a\nmachine learning model now as I\nmentioned the library that we'll be\nusing is the scikit-learn library for\nall the machine learning models so here\nto get started so I'm splitting my data\nset and inside this scale on the design\nkitlearn Library we've got a function\nthat is called as the trained split\nfunction\nso this is a function which will help us\nokay so this will actually help us in\nsplitting the data set into two parts\nokay so this is about this will split\nthe data set into two parts\nand then once we split the data set into\ntwo parts so this is X and Y so so then\nwe will use the split data and apply it\non the machine learning model now in\nthis example I'm importing the machine\nlearning of linear regression and once\nthis is imported okay what we are doing\nnext is we are performing the fit on\nthis given data set\nnow as I mentioned python is an\nobject-oriented programming language I\nam importing a class and once I'm\nimporting the class I'm creating an\nobject for that class\nand I'm calling the object method of it\nokay that is the reason that you see it\nin this way and then once we have\nperformed the fit so the attributes of\nthat object we can display to understand\nthe overall working of the model\nnow here in the scenario I'm importing\nThe Matrix Matrix will help me to\nevaluate a machine learning model now as\nI as you can clearly see I'm using the\nevaluation metric of R2 score which is\navailable inside the scikitlan Library\nitself\nI'm importing the metrics\nI'm gen I'm finding the R2 score and in\nthis scenario the R2 score is\n0.5888 and not just that this also has\nthe mean squared error and when we find\nthe mean squared error value it is\n10.617 and mean absolute error is\n2.57 so like this we can go ahead and\nperform the analysis on the data set by\nmaking use of all the important\nlibraries that are available to us in\nPython programming language and not just\nthat here we have done the Improvement\nso instead of using a single data we are\nusing the multiple data and we are\nworking with this data set and here in\nthis example I'm importing the c bond\nlibrary mat.lib library in order to\ncreate the visualization and this\nvisualization is called as heat map\nwhich will help me to understand the\nrelationship between two variables\nso in this way the various libraries\nwill be used whenever we are working\nwith the data set\nokay so this is about the introduction\nto the important libraries that we have\ngot in Python programming language and\nhow it is used and the importance of the\nsame whenever we are writing the code\nokay folks so with this we come to the\nend of today's session thank you so much\neveryone\nand all the very best I look forward to\nseeing you next time\n",
  "words": [
    "hello",
    "everyone",
    "thank",
    "much",
    "joining",
    "welcome",
    "video",
    "record",
    "webinars",
    "team",
    "today",
    "interesting",
    "session",
    "machine",
    "learning",
    "discussing",
    "python",
    "libraries",
    "data",
    "science",
    "know",
    "current",
    "year",
    "updated",
    "list",
    "go",
    "one",
    "one",
    "today",
    "agenda",
    "today",
    "session",
    "like",
    "understand",
    "exactly",
    "python",
    "look",
    "important",
    "features",
    "python",
    "makes",
    "popular",
    "famous",
    "reason",
    "look",
    "libraries",
    "learn",
    "data",
    "science",
    "current",
    "year",
    "also",
    "quick",
    "hand",
    "transition",
    "topic",
    "data",
    "science",
    "agenda",
    "today",
    "session",
    "let",
    "proceed",
    "ahead",
    "let",
    "get",
    "started",
    "let",
    "start",
    "understanding",
    "python",
    "programming",
    "language",
    "talk",
    "python",
    "see",
    "python",
    "programming",
    "language",
    "created",
    "person",
    "called",
    "judo",
    "one",
    "erosum",
    "created",
    "year",
    "1989",
    "python",
    "programming",
    "language",
    "name",
    "python",
    "actually",
    "inspired",
    "creator",
    "favorite",
    "show",
    "create",
    "emails",
    "monty",
    "python",
    "term",
    "python",
    "actually",
    "used",
    "mean",
    "started",
    "thinking",
    "creating",
    "programming",
    "language",
    "actually",
    "best",
    "part",
    "python",
    "programming",
    "language",
    "general",
    "purpose",
    "high",
    "level",
    "interpreted",
    "language",
    "easy",
    "easy",
    "syntax",
    "dynamic",
    "semantics",
    "time",
    "python",
    "one",
    "common",
    "issue",
    "programming",
    "language",
    "difficult",
    "write",
    "reason",
    "difficult",
    "write",
    "something",
    "difficult",
    "type",
    "lot",
    "rules",
    "lot",
    "rules",
    "involved",
    "programming",
    "languages",
    "one",
    "main",
    "reason",
    "syntax",
    "difficult",
    "maybe",
    "give",
    "example",
    "end",
    "every",
    "sentence",
    "maybe",
    "use",
    "specific",
    "symbol",
    "certain",
    "set",
    "rules",
    "follow",
    "order",
    "write",
    "computer",
    "program",
    "used",
    "happen",
    "beginner",
    "started",
    "use",
    "programming",
    "language",
    "project",
    "time",
    "actually",
    "involved",
    "fixing",
    "syntax",
    "issues",
    "rather",
    "working",
    "real",
    "problem",
    "challenge",
    "faced",
    "time",
    "hence",
    "decided",
    "create",
    "programming",
    "language",
    "easy",
    "write",
    "easy",
    "create",
    "easy",
    "write",
    "program",
    "less",
    "syntax",
    "rule",
    "learn",
    "would",
    "turn",
    "enable",
    "people",
    "focus",
    "problem",
    "solving",
    "rather",
    "working",
    "rules",
    "python",
    "programming",
    "language",
    "got",
    "key",
    "ideas",
    "like",
    "key",
    "benefits",
    "programming",
    "languages",
    "one",
    "open",
    "source",
    "means",
    "use",
    "python",
    "interpreter",
    "free",
    "make",
    "changes",
    "also",
    "publish",
    "version",
    "use",
    "industry",
    "purpose",
    "everything",
    "free",
    "got",
    "amazing",
    "community",
    "support",
    "whenever",
    "got",
    "question",
    "post",
    "query",
    "stack",
    "overflow",
    "famous",
    "famous",
    "sites",
    "get",
    "help",
    "community",
    "active",
    "community",
    "python",
    "python",
    "large",
    "standard",
    "library",
    "using",
    "actually",
    "get",
    "library",
    "use",
    "program",
    "complete",
    "projects",
    "time",
    "supports",
    "programming",
    "structures",
    "classes",
    "object",
    "easy",
    "learn",
    "programming",
    "language",
    "got",
    "easy",
    "syntax",
    "way",
    "would",
    "write",
    "program",
    "simple",
    "anyone",
    "start",
    "coding",
    "easier",
    "manner",
    "main",
    "idea",
    "python",
    "programming",
    "language",
    "talk",
    "python",
    "programming",
    "language",
    "important",
    "features",
    "let",
    "look",
    "important",
    "features",
    "python",
    "programming",
    "language",
    "one",
    "important",
    "feature",
    "simplicity",
    "designed",
    "mentioned",
    "think",
    "code",
    "means",
    "think",
    "problem",
    "trying",
    "solve",
    "rather",
    "thinking",
    "syntax",
    "rules",
    "one",
    "important",
    "feature",
    "one",
    "main",
    "reason",
    "data",
    "scientists",
    "prefer",
    "use",
    "python",
    "programming",
    "language",
    "talk",
    "data",
    "science",
    "generating",
    "insights",
    "data",
    "set",
    "want",
    "get",
    "information",
    "data",
    "set",
    "would",
    "make",
    "sense",
    "spend",
    "time",
    "data",
    "rather",
    "rules",
    "main",
    "idea",
    "right",
    "using",
    "think",
    "code",
    "less",
    "syntax",
    "key",
    "important",
    "feature",
    "open",
    "source",
    "means",
    "free",
    "everyone",
    "use",
    "portable",
    "written",
    "one",
    "computer",
    "executed",
    "computer",
    "without",
    "issue",
    "result",
    "sharing",
    "code",
    "simple",
    "talk",
    "python",
    "codes",
    "admittable",
    "extensible",
    "allows",
    "code",
    "programming",
    "languages",
    "like",
    "c",
    "c",
    "plus",
    "plus",
    "embedded",
    "python",
    "program",
    "certain",
    "functions",
    "actually",
    "performed",
    "result",
    "would",
    "make",
    "python",
    "even",
    "powerful",
    "python",
    "interpreted",
    "programming",
    "language",
    "best",
    "part",
    "memory",
    "management",
    "cpu",
    "things",
    "handled",
    "python",
    "worry",
    "pretty",
    "good",
    "way",
    "python",
    "huge",
    "library",
    "support",
    "called",
    "huge",
    "headset",
    "libraries",
    "like",
    "numpy",
    "numerical",
    "array",
    "data",
    "type",
    "got",
    "matplotlib",
    "c",
    "bond",
    "creating",
    "visualization",
    "got",
    "pandas",
    "library",
    "data",
    "processing",
    "got",
    "various",
    "libraries",
    "got",
    "help",
    "us",
    "solving",
    "problems",
    "better",
    "way",
    "python",
    "based",
    "object",
    "oriented",
    "programming",
    "structure",
    "result",
    "help",
    "us",
    "break",
    "complex",
    "problem",
    "code",
    "help",
    "security",
    "obtain",
    "better",
    "solution",
    "talk",
    "programming",
    "structure",
    "dealing",
    "data",
    "types",
    "classes",
    "objects",
    "overall",
    "idea",
    "object",
    "oriented",
    "programming",
    "approach",
    "talk",
    "libraries",
    "let",
    "look",
    "important",
    "libraries",
    "data",
    "science",
    "talk",
    "python",
    "programming",
    "language",
    "first",
    "important",
    "library",
    "generally",
    "use",
    "whenever",
    "working",
    "data",
    "see",
    "pandas",
    "library",
    "library",
    "written",
    "python",
    "programming",
    "language",
    "specially",
    "used",
    "data",
    "manipulation",
    "analysis",
    "main",
    "idea",
    "right",
    "help",
    "us",
    "perform",
    "data",
    "go",
    "perform",
    "analysis",
    "effective",
    "way",
    "library",
    "well",
    "suited",
    "various",
    "types",
    "data",
    "set",
    "suited",
    "tabular",
    "data",
    "suited",
    "ordered",
    "unordered",
    "time",
    "series",
    "data",
    "even",
    "would",
    "work",
    "types",
    "observational",
    "statistical",
    "data",
    "well",
    "suitable",
    "various",
    "types",
    "data",
    "set",
    "commonly",
    "used",
    "library",
    "loading",
    "data",
    "set",
    "help",
    "us",
    "load",
    "data",
    "set",
    "structured",
    "format",
    "enable",
    "us",
    "perform",
    "analysis",
    "top",
    "main",
    "advantage",
    "using",
    "python",
    "pandas",
    "library",
    "okay",
    "next",
    "library",
    "got",
    "numpy",
    "library",
    "numpy",
    "core",
    "library",
    "got",
    "scientific",
    "computing",
    "say",
    "scientific",
    "computing",
    "one",
    "key",
    "thing",
    "want",
    "whenever",
    "working",
    "data",
    "set",
    "want",
    "perform",
    "operation",
    "could",
    "simple",
    "multiplication",
    "could",
    "complex",
    "mathematical",
    "operation",
    "want",
    "perform",
    "data",
    "set",
    "time",
    "okay",
    "time",
    "library",
    "help",
    "us",
    "compute",
    "calculation",
    "better",
    "way",
    "make",
    "life",
    "easy",
    "calculations",
    "happen",
    "much",
    "better",
    "much",
    "better",
    "efficient",
    "way",
    "overall",
    "idea",
    "importance",
    "numpy",
    "library",
    "okay",
    "got",
    "address",
    "library",
    "okay",
    "talk",
    "panel",
    "sorry",
    "talking",
    "got",
    "matplotlib",
    "library",
    "talk",
    "matte",
    "naughty",
    "library",
    "actually",
    "package",
    "got",
    "creating",
    "2d",
    "plots",
    "use",
    "creation",
    "various",
    "types",
    "plot",
    "depending",
    "data",
    "working",
    "got",
    "bar",
    "graph",
    "got",
    "histogram",
    "chart",
    "got",
    "scatter",
    "plot",
    "got",
    "pie",
    "chart",
    "got",
    "hexagonal",
    "pinchard",
    "area",
    "plot",
    "various",
    "types",
    "plot",
    "supported",
    "matplotlib",
    "library",
    "choose",
    "relevant",
    "type",
    "plot",
    "depending",
    "type",
    "data",
    "dealing",
    "okay",
    "generally",
    "working",
    "matplotlip",
    "library",
    "importing",
    "matplotlib",
    "especially",
    "directly",
    "importing",
    "pipelot",
    "module",
    "import",
    "people",
    "importing",
    "matplot",
    "tube",
    "library",
    "import",
    "matplotlib",
    "dot",
    "pi",
    "plot",
    "plt",
    "definitely",
    "call",
    "various",
    "plotting",
    "function",
    "reason",
    "import",
    "pipelot",
    "module",
    "plotting",
    "functions",
    "available",
    "inside",
    "pi",
    "plot",
    "module",
    "main",
    "idea",
    "importing",
    "library",
    "got",
    "selenium",
    "selenium",
    "package",
    "library",
    "generally",
    "use",
    "automate",
    "web",
    "browser",
    "interaction",
    "help",
    "python",
    "programming",
    "language",
    "webdriver",
    "api",
    "binding",
    "actually",
    "write",
    "code",
    "python",
    "programming",
    "language",
    "perform",
    "action",
    "means",
    "actually",
    "perform",
    "automated",
    "testing",
    "help",
    "selenium",
    "webdriver",
    "running",
    "web",
    "testing",
    "various",
    "browsers",
    "moving",
    "next",
    "library",
    "got",
    "opencv",
    "library",
    "opencv",
    "python",
    "library",
    "designed",
    "solve",
    "computer",
    "vision",
    "problems",
    "talk",
    "opencv",
    "open",
    "ev",
    "array",
    "structures",
    "converted",
    "numpy",
    "arrays",
    "library",
    "well",
    "known",
    "computer",
    "vision",
    "based",
    "task",
    "whenever",
    "working",
    "images",
    "video",
    "data",
    "definitely",
    "start",
    "using",
    "opencv",
    "library",
    "yeah",
    "opencv",
    "libraries",
    "basically",
    "use",
    "whenever",
    "dealing",
    "visual",
    "data",
    "number",
    "five",
    "got",
    "library",
    "scipy",
    "free",
    "open",
    "source",
    "python",
    "library",
    "also",
    "used",
    "scientific",
    "computing",
    "technical",
    "computing",
    "scipy",
    "library",
    "various",
    "functions",
    "use",
    "perform",
    "direct",
    "scientific",
    "computing",
    "got",
    "advanced",
    "scientific",
    "computing",
    "functions",
    "use",
    "apply",
    "data",
    "set",
    "create",
    "function",
    "define",
    "mathematical",
    "operation",
    "already",
    "available",
    "default",
    "advantage",
    "using",
    "scipy",
    "library",
    "next",
    "library",
    "got",
    "scikit",
    "scikit",
    "library",
    "psychic",
    "learn",
    "library",
    "one",
    "important",
    "library",
    "comes",
    "data",
    "science",
    "scikit",
    "library",
    "actually",
    "call",
    "machine",
    "learning",
    "library",
    "python",
    "programming",
    "language",
    "got",
    "machine",
    "learning",
    "models",
    "various",
    "tasks",
    "like",
    "classification",
    "regression",
    "well",
    "clustering",
    "algorithm",
    "common",
    "types",
    "algorithms",
    "supported",
    "box",
    "cyclic",
    "library",
    "check",
    "documentation",
    "page",
    "well",
    "models",
    "helper",
    "functions",
    "like",
    "splitting",
    "data",
    "set",
    "two",
    "parts",
    "performing",
    "like",
    "one",
    "hot",
    "encoder",
    "standard",
    "scalar",
    "mean",
    "max",
    "scale",
    "required",
    "types",
    "data",
    "transformation",
    "want",
    "supported",
    "model",
    "trade",
    "comes",
    "evaluation",
    "got",
    "variation",
    "functions",
    "regression",
    "well",
    "classification",
    "name",
    "rmsc",
    "msc",
    "r2",
    "score",
    "comes",
    "irrigation",
    "classification",
    "got",
    "precision",
    "recall",
    "f1",
    "score",
    "classification",
    "report",
    "got",
    "various",
    "metrics",
    "supported",
    "scikitlan",
    "library",
    "library",
    "open",
    "source",
    "also",
    "publish",
    "model",
    "create",
    "custom",
    "model",
    "making",
    "use",
    "concept",
    "subclassing",
    "model",
    "class",
    "okay",
    "important",
    "features",
    "library",
    "moving",
    "got",
    "spark",
    "library",
    "pi",
    "spark",
    "pi",
    "spark",
    "also",
    "known",
    "spark",
    "python",
    "api",
    "actually",
    "exposes",
    "spark",
    "programming",
    "model",
    "python",
    "programming",
    "language",
    "importance",
    "pi",
    "spark",
    "library",
    "got",
    "library",
    "called",
    "django",
    "django",
    "pythmic",
    "framework",
    "framework",
    "provides",
    "structure",
    "common",
    "methodologies",
    "make",
    "life",
    "web",
    "application",
    "developer",
    "much",
    "easier",
    "one",
    "building",
    "flexible",
    "scalable",
    "maintainable",
    "web",
    "application",
    "high",
    "level",
    "got",
    "mvc",
    "mvt",
    "style",
    "architecture",
    "web",
    "framework",
    "written",
    "quick",
    "powerful",
    "programming",
    "python",
    "language",
    "got",
    "open",
    "source",
    "collection",
    "libraries",
    "building",
    "full",
    "functioning",
    "web",
    "application",
    "importance",
    "angle",
    "library",
    "number",
    "one",
    "got",
    "tensorflow",
    "tensorflow",
    "python",
    "library",
    "generally",
    "use",
    "implement",
    "deep",
    "learning",
    "neural",
    "network",
    "comes",
    "computation",
    "computation",
    "happen",
    "data",
    "flow",
    "graph",
    "switch",
    "data",
    "flow",
    "every",
    "operation",
    "perform",
    "data",
    "set",
    "remembered",
    "remembering",
    "operation",
    "also",
    "take",
    "gradients",
    "means",
    "go",
    "backward",
    "extract",
    "gradients",
    "using",
    "gradients",
    "update",
    "parameters",
    "important",
    "libraries",
    "got",
    "python",
    "programming",
    "language",
    "give",
    "better",
    "understanding",
    "python",
    "programming",
    "language",
    "let",
    "take",
    "example",
    "uh",
    "task",
    "machine",
    "learning",
    "able",
    "understand",
    "easy",
    "work",
    "going",
    "launch",
    "new",
    "notebook",
    "see",
    "showing",
    "demonstration",
    "got",
    "code",
    "already",
    "written",
    "got",
    "given",
    "data",
    "set",
    "okay",
    "going",
    "execute",
    "cells",
    "okay",
    "going",
    "look",
    "scenario",
    "already",
    "importing",
    "two",
    "imported",
    "libraries",
    "numpy",
    "library",
    "pandas",
    "library",
    "using",
    "pandas",
    "library",
    "mentioned",
    "generally",
    "use",
    "pandas",
    "library",
    "load",
    "rate",
    "asset",
    "work",
    "data",
    "set",
    "even",
    "scenario",
    "using",
    "pandas",
    "library",
    "specifically",
    "function",
    "read",
    "csv",
    "function",
    "read",
    "file",
    "create",
    "data",
    "frame",
    "object",
    "data",
    "type",
    "pandas",
    "library",
    "creating",
    "data",
    "frame",
    "also",
    "modify",
    "data",
    "set",
    "well",
    "example",
    "scenario",
    "okay",
    "got",
    "columns",
    "uh",
    "means",
    "like",
    "column",
    "called",
    "unnamed",
    "0",
    "dropping",
    "column",
    "means",
    "removing",
    "column",
    "data",
    "frame",
    "make",
    "use",
    "head",
    "function",
    "display",
    "first",
    "entries",
    "data",
    "frame",
    "got",
    "inbuilt",
    "functions",
    "check",
    "whether",
    "missing",
    "values",
    "data",
    "frame",
    "case",
    "missing",
    "value",
    "count",
    "0",
    "means",
    "missing",
    "values",
    "data",
    "set",
    "good",
    "thing",
    "done",
    "analysis",
    "maybe",
    "want",
    "create",
    "visualization",
    "time",
    "making",
    "use",
    "matplotlib",
    "library",
    "done",
    "basic",
    "analysis",
    "given",
    "data",
    "set",
    "next",
    "proceed",
    "ahead",
    "apply",
    "data",
    "set",
    "machine",
    "learning",
    "model",
    "mentioned",
    "library",
    "using",
    "library",
    "machine",
    "learning",
    "models",
    "get",
    "started",
    "splitting",
    "data",
    "set",
    "inside",
    "scale",
    "design",
    "kitlearn",
    "library",
    "got",
    "function",
    "called",
    "trained",
    "split",
    "function",
    "function",
    "help",
    "us",
    "okay",
    "actually",
    "help",
    "us",
    "splitting",
    "data",
    "set",
    "two",
    "parts",
    "okay",
    "split",
    "data",
    "set",
    "two",
    "parts",
    "split",
    "data",
    "set",
    "two",
    "parts",
    "x",
    "use",
    "split",
    "data",
    "apply",
    "machine",
    "learning",
    "model",
    "example",
    "importing",
    "machine",
    "learning",
    "linear",
    "regression",
    "imported",
    "okay",
    "next",
    "performing",
    "fit",
    "given",
    "data",
    "set",
    "mentioned",
    "python",
    "programming",
    "language",
    "importing",
    "class",
    "importing",
    "class",
    "creating",
    "object",
    "class",
    "calling",
    "object",
    "method",
    "okay",
    "reason",
    "see",
    "way",
    "performed",
    "fit",
    "attributes",
    "object",
    "display",
    "understand",
    "overall",
    "working",
    "model",
    "scenario",
    "importing",
    "matrix",
    "matrix",
    "help",
    "evaluate",
    "machine",
    "learning",
    "model",
    "clearly",
    "see",
    "using",
    "evaluation",
    "metric",
    "r2",
    "score",
    "available",
    "inside",
    "scikitlan",
    "library",
    "importing",
    "metrics",
    "gen",
    "finding",
    "r2",
    "score",
    "scenario",
    "r2",
    "score",
    "also",
    "mean",
    "squared",
    "error",
    "find",
    "mean",
    "squared",
    "error",
    "value",
    "mean",
    "absolute",
    "error",
    "like",
    "go",
    "ahead",
    "perform",
    "analysis",
    "data",
    "set",
    "making",
    "use",
    "important",
    "libraries",
    "available",
    "us",
    "python",
    "programming",
    "language",
    "done",
    "improvement",
    "instead",
    "using",
    "single",
    "data",
    "using",
    "multiple",
    "data",
    "working",
    "data",
    "set",
    "example",
    "importing",
    "c",
    "bond",
    "library",
    "library",
    "order",
    "create",
    "visualization",
    "visualization",
    "called",
    "heat",
    "map",
    "help",
    "understand",
    "relationship",
    "two",
    "variables",
    "way",
    "various",
    "libraries",
    "used",
    "whenever",
    "working",
    "data",
    "set",
    "okay",
    "introduction",
    "important",
    "libraries",
    "got",
    "python",
    "programming",
    "language",
    "used",
    "importance",
    "whenever",
    "writing",
    "code",
    "okay",
    "folks",
    "come",
    "end",
    "today",
    "session",
    "thank",
    "much",
    "everyone",
    "best",
    "look",
    "forward",
    "seeing",
    "next",
    "time"
  ],
  "keywords": [
    "everyone",
    "much",
    "today",
    "session",
    "machine",
    "learning",
    "python",
    "libraries",
    "data",
    "science",
    "year",
    "go",
    "one",
    "like",
    "understand",
    "look",
    "important",
    "features",
    "famous",
    "reason",
    "learn",
    "also",
    "let",
    "ahead",
    "get",
    "started",
    "start",
    "programming",
    "language",
    "talk",
    "see",
    "called",
    "actually",
    "create",
    "used",
    "mean",
    "creating",
    "best",
    "easy",
    "syntax",
    "time",
    "common",
    "difficult",
    "write",
    "type",
    "rules",
    "languages",
    "main",
    "maybe",
    "example",
    "use",
    "set",
    "computer",
    "program",
    "happen",
    "rather",
    "working",
    "problem",
    "would",
    "got",
    "key",
    "open",
    "source",
    "means",
    "free",
    "make",
    "community",
    "whenever",
    "help",
    "library",
    "using",
    "object",
    "way",
    "simple",
    "idea",
    "feature",
    "mentioned",
    "think",
    "code",
    "want",
    "written",
    "result",
    "c",
    "functions",
    "even",
    "numpy",
    "matplotlib",
    "visualization",
    "pandas",
    "various",
    "us",
    "better",
    "structure",
    "dealing",
    "types",
    "overall",
    "generally",
    "analysis",
    "perform",
    "well",
    "suited",
    "work",
    "okay",
    "next",
    "scientific",
    "computing",
    "operation",
    "importance",
    "plot",
    "supported",
    "importing",
    "module",
    "import",
    "pi",
    "function",
    "available",
    "inside",
    "selenium",
    "web",
    "opencv",
    "scipy",
    "apply",
    "already",
    "scikit",
    "comes",
    "models",
    "classification",
    "regression",
    "splitting",
    "two",
    "parts",
    "model",
    "r2",
    "score",
    "making",
    "class",
    "spark",
    "framework",
    "application",
    "gradients",
    "going",
    "given",
    "scenario",
    "frame",
    "column",
    "missing",
    "done",
    "split",
    "error"
  ]
}