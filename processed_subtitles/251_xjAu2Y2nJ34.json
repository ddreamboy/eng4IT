{
  "text": "alright welcome back and this part we're\ngonna cover functions and why do we want\nto create functions how do we create\nthem and why they are awesome\nso let's start off with creating another\nvariable here so we're gonna call this\nConst and we're gonna call it name all\nright super original and we're gonna\ncall it dev add like so good we're gonna\nsave this and now we're gonna create the\nfunction so what is a function a simple\nway to explain a function is a set of\ncode that we're gonna write to do things\nfor us so we just we just separate a\nspecific task that we had into a\nfunction so in a real-life example it\nwould be something like it is a function\nbecause it has more steps so you go into\nthe kitchen grab the food you prepare\nthe food then you're gonna eat it and\nthen if you want you can wash the plates\nif you want and that's the whole process\nokay so the function would be a set of\ncode that you write that does a task\nalright so rather than doing like grab\nfood eat food whoa\nand write a whole bunch of crap down\nhere rather than doing this we can\ncreate a function that's gonna isolate\neverything that we want it to do so to\nshow you a great example we're gonna I'm\ngonna introduce you to something that we\ncan do on this name so what we can do is\nthe way we create a function is we're\ngonna write function like so and again\nwe can give it a name like let's say\nthis function is gonna take our name\nhere and it's gonna put everything in\nuppercase alright so\nwe're gonna name this upper case like so\nand it's a good convention also to use a\nlower case here and then upper case here\nso let's say you want to have a variable\ncalled gallery images cons gallery\nimages like so so this is how we're\ngonna write it just because it's gonna\nmake everything more clear it's gonna\nmake everything more visible on what's\ngoing on and it's just basically a\nconvention that people use so rather\nthan doing it lowercase like this and\nthen everything just goes together like\nthis it's gonna look ugly and it's gonna\nbe hard to to read it and like this is\neverything it's just gonna be more\nvisible so anyways this is why we wrote\nit like this and what we're gonna do\nhere is we're gonna open up some\nparentheses like so and then some\nbrackets like so all right I'm gonna go\nover what all of these dot do but what\nwe did here is we created a function and\nin here we can give a set of\ninstructions of what we want it to do\nnow let's for now remain this rename\nthis to logger and here let's say we're\ngonna console.log Party Time party time\nlike so\nalright multiple times and the way I did\nthat is I just hold shift and alt and\npress down on the down arrow and it's\njust gonna multiply it's gonna create a\ncopy of this down here alright so this\nis our function it's just gonna console\na quick time pretty time four times good\nbut if we look at our code our console\nhere nothing's happening why is that\nwell this is now gonna execute so when\nwe run this code what's gonna happen\nbasically is JavaScript is gonna take a\nlook at this and it's gonna say oh okay\nso we have a name variable alright it\nhas a value of Devitt cool I'm gonna\nsave this in memory nice okay we have a\nfunction here\nand it has console logs or whatever you\nwant cool I'm gonna save this in memory\nso whenever we want to run the function\nwe need to run it we need to run it so\nthis is just saving it to memory all\nright it's not actually doing anything\nright now so the way we run this code is\nwe're gonna write the name of it like so\nlogger add the parentheses and then\nwe're gonna close it like so so the way\nwe did it so far hit save and now you're\ngonna see Party Time party time party\ntime party time so this is called a\nfunction invocation all right so this is\nwhere you want to execute your function\nso this is all it does cool but why do\nwe need to add these things here\nand why are these brackets here well the\nthing is that the brackets mean that\neverything that's available here is only\navailable here and what I mean by that\nis if we take the sconce name and add it\nin here like so our name down here is\nnot gonna be available so what's gonna\nhappen here is we pass the variable in\nthis function so it's only gonna be\navailable in here all right name is not\ngonna be available down here all right\nso whatever variables you add inside the\nfunction are not gonna be available down\nhere outside of the function all right\nso basically what these are called to\nquickly go to this is called the global\nscope and this call this is called the\nfunction scoped all right so but however\nif you add this to global scope then in\nhere console.log name so this is gonna\nbe available here so everything from\nglobal scope is gonna be available in\nour function scope\nhowever variables declared in our\nfunction scope are now gonna be\navailable in our global\nso whatever you have in your function is\nclosed and whatever you have in global\nis available everywhere okay that's all\nyou need to know for now all right cool\nso let's delete this and why do we need\nthese well now it's the time to change\nthis to two upper is we're going to do\nour text to uppercase cool\nso let's invoke it again here to upper\nlike so close let's see if we get\npartytime good\nwell rather than having party time we\nwant to get this and make it uppercase\ncool so what we can do here is we can\nadd the reason why we add these\nparentheses is that we can add key\nparameter to it and what the parameter\ndoes is basically you can inject a\nvariable or a value inside of it and\nit's gonna run down here you're gonna\nhave access to it down here so what I\nmean by that is let's say we have\nactually I say let's say we want to add\ntwo numbers together so to let's say\neither like so so here what we can do is\nwe can console.log and we're gonna say\nlet's just add two values here so you\ncan name these whatever you want you can\nsay number one number two with comments\nokay so here we can console log number\none plus number two all right now this\ndoesn't make any sense\nwhat is number one and what is number\ntwo we don't know and we can't log the\naddition down here cool well it makes no\nsense until you invoke the function so\neither here we can pass in here the two\ndifferent numbers that we want and\nthat's going to be injected in the\nparameter here and then it's gonna pass\ndown here and add the numbers together\nso if we add five here and\nfive or ten then the five is gonna go in\nhere so basically it's gonna be injected\nin here ten is gonna be injected in here\nand then the console.log it's gonna add\nthese two numbers together so if we save\nwe're gonna get 15 here so that's that's\nwhy we use the parentheses is because we\ncan add different parameters and here\nnow why is this useful well again if we\ngo back jumping around with this to\nupper case 10,000 times but if we had\nthe two upper well we know that we are\ngonna get a text that we want to\nuppercase now we can we might need\ndifferent kind of text to be uppercase\nso we don't want to just execute it on\nthis and I'm gonna show you in one bit\nso let's just say we have a text in here\nand what we can do here is we can get\nthe text and if we add dot we can call\nadditional functions that are built into\nJavaScript so as strings so texts have\ndifferent functions built into them\nnumbers have different built-in\nfunctions that we can use on our code so\nwe can do text dot to upper case like so\nand then we do the parameters again this\nis something inbuilt in JavaScript\nthat's gonna make our text uppercase so\nnow we can say console.log text like so\nit's safe and down here we can say to\nupper and now what we can do is we can\ninject the name from up here down here\nso if we say name and we check well\nactually what we need to do is we can\ntake and create a new variable rather\nthan just console logging text because\nthat that the value that's going to be\nconsole logged what we can do is we can\ncreate a cons called upper case\nlike so so we create a new variable and\ndysfunction and we just set it equal to\nour text that we get from our parameter\nand then uppercase it so we can\nconsole.log uppercase t' here so if we\nhit save then you're gonna see that\neverything is uppercase like so so again\nto walk through this super fast we\ncreate a function like so we give it a\nname so just like variables this is a\nparameter here we create a new variable\nand we just set it equal to our\nparameter that's going to come in which\nis the name so we're passing the name\nthis one from up here into here so this\nis dev add here and then our uppercase\nis going to be equal to dev ed dot to\nuppercase so this is a again a a\nfunction that's already built in for us\nthat we can use on our text and then we\njust cancel out the uppercase so that's\nhow we can use functions so the cool\nthing now is that we can create cons\nYouTuber is equal to you name a youtuber\nand Trevor C media right so down here we\ncan just save to upper youtuber and boom\nwe should have traversing media all\nuppercase so there we go\nthat's how that's the basic sub\nfunctions that we can use and later on\nwe're gonna cover again different\nfunctions that are already built in for\nus that we can use alright so this is\none way we can use a function I'm gonna\ndelete everything here another way we\ncan use one is by doing the way we do\nvariables which I prefer actually rather\nthan this so then this method so what we\ncan do is we can do const and we can\nright give it a name so two upper like\nso equals u and we can set it equal to a\nfunction just like normal okay so this\nis another version you can use and the\nlast version which is the modern version\nwe can use this is rather than\nwriting this whole function thing we can\nmake this one shorter so we don't even\nneed to write function so what you can\nreplace here is you can remove the\nfunction keyword and after the\nparameters you can just add an equal and\na bigger than sign so this is the\nshortest way you can write a function so\nyou set it equal to a some empty\nparameters that you have here and you do\nequal and bigger than sign so you don't\nneed to write function anymore so these\nare the three ways I prefer this way you\ncan use different ones but I thought I'd\nshow all three of them for you all right\nso that's it those are functions\nbasically and in the next video we're\ngonna cover Ray's objects and all the\nother good stuff so thanks again for\nwatching the next videos are gonna be up\nand like one or two days so I'm gonna\nrelease three parts again for you\nalright thank you so much for watching\nagain please drop a subscribe and I'm\ngonna see you in a bit bye bye\n",
  "words": [
    "alright",
    "welcome",
    "back",
    "part",
    "gon",
    "na",
    "cover",
    "functions",
    "want",
    "create",
    "functions",
    "create",
    "awesome",
    "let",
    "start",
    "creating",
    "another",
    "variable",
    "gon",
    "na",
    "call",
    "const",
    "gon",
    "na",
    "call",
    "name",
    "right",
    "super",
    "original",
    "gon",
    "na",
    "call",
    "dev",
    "add",
    "like",
    "good",
    "gon",
    "na",
    "save",
    "gon",
    "na",
    "create",
    "function",
    "function",
    "simple",
    "way",
    "explain",
    "function",
    "set",
    "code",
    "gon",
    "na",
    "write",
    "things",
    "us",
    "separate",
    "specific",
    "task",
    "function",
    "example",
    "would",
    "something",
    "like",
    "function",
    "steps",
    "go",
    "kitchen",
    "grab",
    "food",
    "prepare",
    "food",
    "gon",
    "na",
    "eat",
    "want",
    "wash",
    "plates",
    "want",
    "whole",
    "process",
    "okay",
    "function",
    "would",
    "set",
    "code",
    "write",
    "task",
    "alright",
    "rather",
    "like",
    "grab",
    "food",
    "eat",
    "food",
    "whoa",
    "write",
    "whole",
    "bunch",
    "crap",
    "rather",
    "create",
    "function",
    "gon",
    "na",
    "isolate",
    "everything",
    "want",
    "show",
    "great",
    "example",
    "gon",
    "na",
    "gon",
    "na",
    "introduce",
    "something",
    "name",
    "way",
    "create",
    "function",
    "gon",
    "na",
    "write",
    "function",
    "like",
    "give",
    "name",
    "like",
    "let",
    "say",
    "function",
    "gon",
    "na",
    "take",
    "name",
    "gon",
    "na",
    "put",
    "everything",
    "uppercase",
    "alright",
    "gon",
    "na",
    "name",
    "upper",
    "case",
    "like",
    "good",
    "convention",
    "also",
    "use",
    "lower",
    "case",
    "upper",
    "case",
    "let",
    "say",
    "want",
    "variable",
    "called",
    "gallery",
    "images",
    "cons",
    "gallery",
    "images",
    "like",
    "gon",
    "na",
    "write",
    "gon",
    "na",
    "make",
    "everything",
    "clear",
    "gon",
    "na",
    "make",
    "everything",
    "visible",
    "going",
    "basically",
    "convention",
    "people",
    "use",
    "rather",
    "lowercase",
    "like",
    "everything",
    "goes",
    "together",
    "like",
    "gon",
    "na",
    "look",
    "ugly",
    "gon",
    "na",
    "hard",
    "read",
    "like",
    "everything",
    "gon",
    "na",
    "visible",
    "anyways",
    "wrote",
    "like",
    "gon",
    "na",
    "gon",
    "na",
    "open",
    "parentheses",
    "like",
    "brackets",
    "like",
    "right",
    "gon",
    "na",
    "go",
    "dot",
    "created",
    "function",
    "give",
    "set",
    "instructions",
    "want",
    "let",
    "remain",
    "rename",
    "logger",
    "let",
    "say",
    "gon",
    "na",
    "party",
    "time",
    "party",
    "time",
    "like",
    "alright",
    "multiple",
    "times",
    "way",
    "hold",
    "shift",
    "alt",
    "press",
    "arrow",
    "gon",
    "na",
    "multiply",
    "gon",
    "na",
    "create",
    "copy",
    "alright",
    "function",
    "gon",
    "na",
    "console",
    "quick",
    "time",
    "pretty",
    "time",
    "four",
    "times",
    "good",
    "look",
    "code",
    "console",
    "nothing",
    "happening",
    "well",
    "gon",
    "na",
    "execute",
    "run",
    "code",
    "gon",
    "na",
    "happen",
    "basically",
    "javascript",
    "gon",
    "na",
    "take",
    "look",
    "gon",
    "na",
    "say",
    "oh",
    "okay",
    "name",
    "variable",
    "alright",
    "value",
    "devitt",
    "cool",
    "gon",
    "na",
    "save",
    "memory",
    "nice",
    "okay",
    "function",
    "console",
    "logs",
    "whatever",
    "want",
    "cool",
    "gon",
    "na",
    "save",
    "memory",
    "whenever",
    "want",
    "run",
    "function",
    "need",
    "run",
    "need",
    "run",
    "saving",
    "memory",
    "right",
    "actually",
    "anything",
    "right",
    "way",
    "run",
    "code",
    "gon",
    "na",
    "write",
    "name",
    "like",
    "logger",
    "add",
    "parentheses",
    "gon",
    "na",
    "close",
    "like",
    "way",
    "far",
    "hit",
    "save",
    "gon",
    "na",
    "see",
    "party",
    "time",
    "party",
    "time",
    "party",
    "time",
    "party",
    "time",
    "called",
    "function",
    "invocation",
    "right",
    "want",
    "execute",
    "function",
    "cool",
    "need",
    "add",
    "things",
    "brackets",
    "well",
    "thing",
    "brackets",
    "mean",
    "everything",
    "available",
    "available",
    "mean",
    "take",
    "sconce",
    "name",
    "add",
    "like",
    "name",
    "gon",
    "na",
    "available",
    "gon",
    "na",
    "happen",
    "pass",
    "variable",
    "function",
    "gon",
    "na",
    "available",
    "right",
    "name",
    "gon",
    "na",
    "available",
    "right",
    "whatever",
    "variables",
    "add",
    "inside",
    "function",
    "gon",
    "na",
    "available",
    "outside",
    "function",
    "right",
    "basically",
    "called",
    "quickly",
    "go",
    "called",
    "global",
    "scope",
    "call",
    "called",
    "function",
    "scoped",
    "right",
    "however",
    "add",
    "global",
    "scope",
    "name",
    "gon",
    "na",
    "available",
    "everything",
    "global",
    "scope",
    "gon",
    "na",
    "available",
    "function",
    "scope",
    "however",
    "variables",
    "declared",
    "function",
    "scope",
    "gon",
    "na",
    "available",
    "global",
    "whatever",
    "function",
    "closed",
    "whatever",
    "global",
    "available",
    "everywhere",
    "okay",
    "need",
    "know",
    "right",
    "cool",
    "let",
    "delete",
    "need",
    "well",
    "time",
    "change",
    "two",
    "upper",
    "going",
    "text",
    "uppercase",
    "cool",
    "let",
    "invoke",
    "upper",
    "like",
    "close",
    "let",
    "see",
    "get",
    "partytime",
    "good",
    "well",
    "rather",
    "party",
    "time",
    "want",
    "get",
    "make",
    "uppercase",
    "cool",
    "add",
    "reason",
    "add",
    "parentheses",
    "add",
    "key",
    "parameter",
    "parameter",
    "basically",
    "inject",
    "variable",
    "value",
    "inside",
    "gon",
    "na",
    "run",
    "gon",
    "na",
    "access",
    "mean",
    "let",
    "say",
    "actually",
    "say",
    "let",
    "say",
    "want",
    "add",
    "two",
    "numbers",
    "together",
    "let",
    "say",
    "either",
    "like",
    "gon",
    "na",
    "say",
    "let",
    "add",
    "two",
    "values",
    "name",
    "whatever",
    "want",
    "say",
    "number",
    "one",
    "number",
    "two",
    "comments",
    "okay",
    "console",
    "log",
    "number",
    "one",
    "plus",
    "number",
    "two",
    "right",
    "make",
    "sense",
    "number",
    "one",
    "number",
    "two",
    "know",
    "ca",
    "log",
    "addition",
    "cool",
    "well",
    "makes",
    "sense",
    "invoke",
    "function",
    "either",
    "pass",
    "two",
    "different",
    "numbers",
    "want",
    "going",
    "injected",
    "parameter",
    "gon",
    "na",
    "pass",
    "add",
    "numbers",
    "together",
    "add",
    "five",
    "five",
    "ten",
    "five",
    "gon",
    "na",
    "go",
    "basically",
    "gon",
    "na",
    "injected",
    "ten",
    "gon",
    "na",
    "injected",
    "gon",
    "na",
    "add",
    "two",
    "numbers",
    "together",
    "save",
    "gon",
    "na",
    "get",
    "15",
    "use",
    "parentheses",
    "add",
    "different",
    "parameters",
    "useful",
    "well",
    "go",
    "back",
    "jumping",
    "around",
    "upper",
    "case",
    "times",
    "two",
    "upper",
    "well",
    "know",
    "gon",
    "na",
    "get",
    "text",
    "want",
    "uppercase",
    "might",
    "need",
    "different",
    "kind",
    "text",
    "uppercase",
    "want",
    "execute",
    "gon",
    "na",
    "show",
    "one",
    "bit",
    "let",
    "say",
    "text",
    "get",
    "text",
    "add",
    "dot",
    "call",
    "additional",
    "functions",
    "built",
    "javascript",
    "strings",
    "texts",
    "different",
    "functions",
    "built",
    "numbers",
    "different",
    "functions",
    "use",
    "code",
    "text",
    "dot",
    "upper",
    "case",
    "like",
    "parameters",
    "something",
    "inbuilt",
    "javascript",
    "gon",
    "na",
    "make",
    "text",
    "uppercase",
    "say",
    "text",
    "like",
    "safe",
    "say",
    "upper",
    "inject",
    "name",
    "say",
    "name",
    "check",
    "well",
    "actually",
    "need",
    "take",
    "create",
    "new",
    "variable",
    "rather",
    "console",
    "logging",
    "text",
    "value",
    "going",
    "console",
    "logged",
    "create",
    "cons",
    "called",
    "upper",
    "case",
    "like",
    "create",
    "new",
    "variable",
    "dysfunction",
    "set",
    "equal",
    "text",
    "get",
    "parameter",
    "uppercase",
    "uppercase",
    "hit",
    "save",
    "gon",
    "na",
    "see",
    "everything",
    "uppercase",
    "like",
    "walk",
    "super",
    "fast",
    "create",
    "function",
    "like",
    "give",
    "name",
    "like",
    "variables",
    "parameter",
    "create",
    "new",
    "variable",
    "set",
    "equal",
    "parameter",
    "going",
    "come",
    "name",
    "passing",
    "name",
    "one",
    "dev",
    "add",
    "uppercase",
    "going",
    "equal",
    "dev",
    "ed",
    "dot",
    "uppercase",
    "function",
    "already",
    "built",
    "us",
    "use",
    "text",
    "cancel",
    "uppercase",
    "use",
    "functions",
    "cool",
    "thing",
    "create",
    "cons",
    "youtuber",
    "equal",
    "name",
    "youtuber",
    "trevor",
    "c",
    "media",
    "right",
    "save",
    "upper",
    "youtuber",
    "boom",
    "traversing",
    "media",
    "uppercase",
    "go",
    "basic",
    "sub",
    "functions",
    "use",
    "later",
    "gon",
    "na",
    "cover",
    "different",
    "functions",
    "already",
    "built",
    "us",
    "use",
    "alright",
    "one",
    "way",
    "use",
    "function",
    "gon",
    "na",
    "delete",
    "everything",
    "another",
    "way",
    "use",
    "one",
    "way",
    "variables",
    "prefer",
    "actually",
    "rather",
    "method",
    "const",
    "right",
    "give",
    "name",
    "two",
    "upper",
    "like",
    "equals",
    "u",
    "set",
    "equal",
    "function",
    "like",
    "normal",
    "okay",
    "another",
    "version",
    "use",
    "last",
    "version",
    "modern",
    "version",
    "use",
    "rather",
    "writing",
    "whole",
    "function",
    "thing",
    "make",
    "one",
    "shorter",
    "even",
    "need",
    "write",
    "function",
    "replace",
    "remove",
    "function",
    "keyword",
    "parameters",
    "add",
    "equal",
    "bigger",
    "sign",
    "shortest",
    "way",
    "write",
    "function",
    "set",
    "equal",
    "empty",
    "parameters",
    "equal",
    "bigger",
    "sign",
    "need",
    "write",
    "function",
    "anymore",
    "three",
    "ways",
    "prefer",
    "way",
    "use",
    "different",
    "ones",
    "thought",
    "show",
    "three",
    "right",
    "functions",
    "basically",
    "next",
    "video",
    "gon",
    "na",
    "cover",
    "ray",
    "objects",
    "good",
    "stuff",
    "thanks",
    "watching",
    "next",
    "videos",
    "gon",
    "na",
    "like",
    "one",
    "two",
    "days",
    "gon",
    "na",
    "release",
    "three",
    "parts",
    "alright",
    "thank",
    "much",
    "watching",
    "please",
    "drop",
    "subscribe",
    "gon",
    "na",
    "see",
    "bit",
    "bye",
    "bye"
  ],
  "keywords": [
    "alright",
    "gon",
    "na",
    "functions",
    "want",
    "create",
    "let",
    "variable",
    "call",
    "name",
    "right",
    "add",
    "like",
    "good",
    "save",
    "function",
    "way",
    "set",
    "code",
    "write",
    "go",
    "food",
    "okay",
    "rather",
    "everything",
    "give",
    "say",
    "take",
    "uppercase",
    "upper",
    "case",
    "use",
    "called",
    "make",
    "going",
    "basically",
    "together",
    "parentheses",
    "dot",
    "party",
    "time",
    "console",
    "well",
    "run",
    "cool",
    "whatever",
    "need",
    "actually",
    "see",
    "available",
    "variables",
    "global",
    "scope",
    "two",
    "text",
    "get",
    "parameter",
    "numbers",
    "number",
    "one",
    "different",
    "parameters",
    "built",
    "equal"
  ]
}