{
  "text": "[Music]\nhey everyone this is Neha from IDEO Rico\nand I welcome you all to Erica's YouTube\nchannel and this session is all about\nsoftware testing tutorial so let me\nquickly tell you the topics that I will\nbe covering in this session first I will\ntell you what a software testing and\nwhat is the need for software testing\nnext I will talk about software\ndevelopment lifecycle and its various\nmodels after that I will walk you\nthrough principles of testing and once\nyou understand these fundamentals next\nlet's dive into software testing\nlifecycle and understand various steps\ninvolved in it and moving further to the\ndiscussion you will be seeing methods of\ntesting its levels and some artifacts of\nsoftware testing documentation and I\nwill also talk about defect management\nand bug lifecycle now moving to\nautomation testing you will be\nunderstanding fundamentals of automation\ntesting and its various tools you will\nalso be learning by selenium is most\npreferable tool for automation testing\nand finally I will wrap up the session\nby telling you how to locate elements\nand perform actions on the webpages in\nselenium without any further ado let's\nget straight into the module first let's\nunderstand what a software testing\nsoftware testing can be defined as an\nactivity to check whether the actual\nresults match the expected results and\nit also ensures that the product is free\nfrom any bug or defect testing of a\nsoftware also involves the\nimplementation of products module or\nsystem part for evaluating all or some\nof its properties through testing\ntesters can identify errors gaps and\nrequirement or missing elements in a\nproject or a system testing can be done\nboth by manually or with the help of\nautomated tools available in the market\nso why testing is important software\ntesting is where it all boils down to\ntoday's world of technology is\ncompletely dominated by machines and\ntheir behavior is controlled by the\nsoftware powering it well the machines\nbehave exactly as we want them to every\ntime everywhere yes the answer to all\nthese questions lie in software testing\nby the end of the day at a software\napplication\nand success rate which is going to\ncontrol your business growth the same\nthing can be set even for web\napplications because most businesses\ntoday are completely reliant on the\ninternet for example you can see here\nthe airplane crash and the bankrupt why\nit is happening just because the system\nwas not tested properly before it was\nlaunched and that's why we say testing\nis important else it might lead to a\nloss of monetary value jobs or even loss\nof a human and these are the examples of\nan untested software that becomes\nhazardous so software testing plays a\nsignificant role in testing a software\nor a system if the bugs are or defect is\nnot properly removed from the system it\nmight lead to system failure and that's\nwhy testing is important now let's see\nwho performs software testing this\nquestions answer is depending on the\nprocess and it's connected project\nstakeholders in the industry of\ninformation technology big companies\nhave team members who bear the\nresponsibility for evaluating the\nproject or software based on the\nrequirements during the test phase\nmoreover some bugs can get detected if\nproper testing is done and the\ndevelopment of a software or application\nso people who can do testing our\nsoftware testers project developer\nproject lead team manager and end users\nso these are the people who takes care\nof software testing having understood\nthis let's see what is software\ndevelopment lifecycle software\ndevelopment lifecycle is a process used\nby the software industry to design\ndevelop and test high quality software's\nstl see that the software development\nlifecycle aims to produce a high quality\nsoftware that meets or exceeds customer\nexpectations reaches completion within\ntimes and cost estimates as you can see\nhere it involves many phases and let me\nexplain you each of these phases first\nrequirement phase requirement gathering\nand analysis is the most important phase\nin SDLC here business on\nlist collects a requirement from the\ncustomer or client as per the clients\nbusiness needs and documents and\nrequirements and the business\nrequirement specification that is the\ndocument name and it varies depending\nupon the organization\nsome examples are CRS that is customer\nrequirement specification and some might\ncall it as business specification as\nwell and then they provide the same to\nthe development team next analysis phase\nonce a requirement gathering and\nanalysis is done the next step is to\ndefine and document the product\nrequirements and get them approved by\nthe customer this is done through SRS\nthat a software requirement\nspecification document and software\nrequirements specification consists of\nall the product requirement to be\ndesigned and developed during the\nproject lifecycle and key people\ninvolved in this phase are project\nmanager business analyst and senior\nmembers of the team and the outcome of\nthis phase will be software requirement\nspecification now moving to design phase\nit has two steps one high level design\nand the other one low level design so in\nhigh level design it gives the\narchitecture of the software product to\nbe developed and is done by the\narchitects and senior developers in low\nlevel design it is done by senior\ndevelopers here it describes how each\nand every feature in the product should\nwork and how every component should work\nhere only the design will be there and\nnot decode and the outcome from this\nphase is the high level document and\nlower level document which works as an\ninput to the next phase so next is the\ndevelopment or your coding phase so what\nhappens here developers of all levels\nare the seniors juniors freshers all are\ninvolved in this phase this is the phase\nwhere we start building the software and\nstart writing the code for the product\nthe outcome from this phase is the\nsource code document and the developed\nproduct now talking about the testing\nphase here when the software is ready it\nis sent to the testing document where\ntests team tests it thorough lead for\ndifferent effects the either test\nsoftware manually or using the automated\ntools depending on the process defined\nin software testing lifecycle and also\nensures that each and every component of\nthe software works fine once a queue way\nthat is the quality analyst make sure\nthat the software is error-free it goes\nto the next stage which is\nimplementation and the outcome of this\nphase is the quality product and the\ntesting artifacts I'll talk about the\ntesting artifacts at the later part so\nonce all this is done the next and the\nlast step is deployment and maintenance\nphase after successful testing that\nproduct is delivered and deployed to the\ncustomer for the use deployment is done\nby the deployment engineers or the\nimplementation engineers once when the\ncustom will start using the developed\nsystem then the actual problems will\ncome up and needs to be solved from time\nto time fixing the issues found by the\ncustomer comes in maintenance phase 100%\ntesting is not possible because the way\npesters does the product is different\nfrom the way customer use a product\nmaintenance should be done as per SLA\nthat a service level agreement these are\nthe various phases involved in software\ndevelopment lifecycle and this is how it\nworks now we have different models of\nsoftware development life cycle like\nwaterfall model spiral model agile model\netc now let's talk about what a fall\nmodel and understand how it works\nwaterfall model is a traditional model\nit is a sequential design process that\nis often used in SDLC in which the\nprogress is seen as flowing downwards\nlike a waterfall through the different\nphases such as requirement gathering\nfeasibility study analysis design coding\ntesting installation and maintenance\nevery next phase is began only once the\ngoal of the previous phase is completed\nthis methodology is preferred in\nprojects where quality is more important\nas compared to schedule or cost the\nmethodology is best suitable for\nshort-term projects where the\nrequirements will not change for example\nyour attendance management or calculator\netcetera so benefits of using this model\nare requirements do not\nin orders a design and code so we get a\nstable product and this model is very\nsimple to implement requirements I'll\nfinalize earlier in the lifecycle so\nthere won't be any chaos in the next\nphases and requirement resources to\nimplement this model are minimal\ncompared to other methodologies and\nevery phase has specific deliverables it\ngives high visibility to the project\nmanager and clients about the progress\nof the project so what are its\ndisadvantages the main disadvantage is\nthat backtracking is not possible\nbutters we cannot go back and change the\nrequirements once the design stage is\nreached and change and requirements\nleads to change in design and code which\nresults defect in the project due to\noverlapping of phases and by this\ncustomer may not be satisfied if the\nchanges that they need are not\nincorporated in the product and the end\nof the waterfall model may not be a\nflexible product and this model can be\nused only when the requirements are very\nwell known and fixed and it is also not\nsuitable for long term projects where\nrequirements may change time to time so\nthis is about waterfall model next let's\ntake a look at bow hem spiral model\nspiral model works in an iterative\nnature it is the combination of both\nprototype development process and linear\ndevelopment process that is your\nwaterfall model and this model place\nmore emphasis on risk analysis mostly\nthis model adopts large and complicated\nprojects where risk is very high every\niteration starts with the planning and\nends with the product evaluation by\nclient so let's take an example of the\nproduct development team like Microsoft\nthey know that there will be a high risk\nand they face lots of difficulties in\nthe journey of developing and releasing\nthe project and also they know that they\nwill release next version of product\nwhen the current version is in existence\nand they prefer spiral model to develop\nthe product in an iterative nature so\nthey could release one version of the\nproduct to the end-user and star\ndeveloping next version which includes\nnew enhancements and improvements on the\nprevious version and that is based on\nthe issues faced by the user and the\nprevious version like Microsoft released\nWindows 8 and improved it based on user\nfeedback and release the next version\nthat is 8.1 and it went on so it mainly\nundergoes four phases at this planning\nphase and in the space requirement\ngathering cost estimation and resource\nallocation is being done and next phase\ndoes risk analysis phase here strengths\nand weaknesses of the project is being\nknown and next comes your design on\nengineering phase their coding internal\ntesting and deployment is being done and\nthe last is the evaluation phase like\nclient evaluation client-side testing to\nget the feedback etc so benefits of\nusing this model are it allows\nrequirement changes and it is also\nsuitable for large and complicated\nprojects the main thing is it allows\nbetter risk analysis and is cost\neffective due to good risk management\nand disadvantages is that it is not\nsuitable for small projects and the\nsuccess of a project depends on the risk\nanalysis phase that's all so this is all\nabout the spiral model and different\ntypes of models in sdlc now let's move\nfurther and understand principles of\ntesting testing of software is\nexceptionally imaginative and an\nintellectual task for testers to perform\ntesting of software or applications\npursue some principles that are\nmentioned over here these principles\nalso play a significant role for\nsoftware tester to test the project and\nthey are first one software testing can\nhelp in detecting bugs testing any\nsoftware or project can help in\nrevealing few or some defects that may\nor may not be detected by developers\nhowever testing of software alone cannot\nconfirm that your developed product or\nsoftware is error free hence it's\nessential to devise test cases and find\nout as many defects as possible next\ntesting with effectiveness is impossible\nso\nwhat is this until your project or\napplication under test has a state\nforward structure having limited input\nit won't be likely or achievable to\ncheck and test all feasible sets of beta\nmodules and scenarios and next early\ntesting the earlier you will begin to\ntest your project or software the better\nyou will find to utilize your existing\ntime next defect in clustering at the\ntime of testing you can observe that\nmajority of the defects or bugs that are\nreported are because of a small number\nof modules inside your software or\nsystem next software testing is context\ndependent an error free or bug free\nsoftware is a myth just because when our\ntester tested an application and did not\ndetect any defects in the project\ndoesn't indicate or imply that your\nsoftware is ready for shipping so at the\ntime of testing modules or working of\nsoftware you as a tester needs to test\nwhether your software is meeting all the\nrequirements of the client or not and\nwhether the bugs found during testing\nhas been mended or not these many\nfactors need to be considered before\nshipping the software or releasing it to\nthe market so these are some of the\nprinciples of software testing that one\nshould keep in mind while testing a\nsoftware now let's move further and\nunderstand one of the most widely used\nmodel that is verification and\nvalidation model to understand this\nmodel let's first understand what is\nverification and validation and software\nfirst verification verification as a\nstatic analysis technique in this\ntechnique testing is done without\nexecuting the code for example you can\nsay inspection walkthrough reviews etc\nnext validation validation is the\ndynamic analysis technique where testing\nis done by executing the code for\nexample your functional and\nnon-functional testing techniques in\nverification and validation model the\ndevelopment and QA activities are done\nsimultaneously there is no discrete\nphase called testing rather testing\nstarts right from the requirement phase\nthe verification and Val\nactivities go hand-in-hand so just have\na look at the figure over here and you\ncan see here in a typical development\nprocess the left-hand side shows the\ndevelopment activities and the\nright-hand side shows the testing\nactivities I should not be wrong if I\nsay that and the development phase both\nverification and validation are\nperformed along with the actual\ndevelopment activities now let's\nunderstand each of these phases in depth\nso first talking about the left-hand\nside as you all know left-hand side\nactivities are the development\nactivities normally we feel what testing\ncan we do in the development phase but\nthis is the beauty of the model which\ndemonstrates that testing can be done in\nall phases of development activities as\nwell\nso here requirements are collected and\nlies and studied here how the system is\nimplemented is not important but what\nthe system is supposed to do is\nimportant like brainstorming sessions\nwalkthroughs interviews are all done\nhere to have the objective set clear so\nverification activity is like or\nrequirements reviews and validation\nactivities like creation of user\nacceptance test and it's test cases and\nthe artifacts produced here will be\nrequirement understanding document and\nuser acceptance test test cases that is\nUAT test cases so this is about the\nrequirement analysis phase now talking\nabout software specification in this\nphase a high level design of the\nsoftware is built the team studies and\ninvestigates on how the requirements\ncould be implemented and the technical\nfeasibility of the requirements is also\nstudied and here the team also comes up\nwith the modules that would be created\nbased on the software and hardware needs\nso verification activities that include\nhere are design reviews and validation\nactivities like creation of system test\nplan and cases and creation of\ntraceability metrics and the artifacts\nproduced here are system test cases\nfeasibility reports system test plan\nhardware software requirements and\nmodules to be created\nso the next phase is the architectural\ndesign or your high-level design in the\nspace based on the high level design\nsoftware architecture is creative the\nmodules their relationship and\ndependencies architectural diagrams\ndatabase tables technology details are\nall finalized in this phase so again\nverification activities like design\nreviews are included and validation\nactivities like integration test plan\nand test cases and the artifacts produce\nour design documents integration test\nplan and test cases and database table\ndesigns etc now coming to module design\nalso called as low level design in this\nphase each and every model of the\nsoftware component are designed\nindividually methods classes interfaces\ndata types etc are all finalized in this\nface so again verification activities\nlike design reviews is included and\nvalidation activities like creation and\nreview of unit test cases and the\nartifacts that are produced will be unit\ntest cases so next we have the\nimplementation or code in this face\nactual coding is done so code review and\ntest cases review our verification\nactivities and creation of functional\ntest cases our validation activities and\nartifacts produced will be test cases\nand review checklist so this is all\nabout left-hand side that is your\ndevelopment phase now talking about the\nright hand side this side demonstrate\nthe testing activities or validation\nspace so we will start from bottom that\nis your unit testing in this face all\nthe unit test case is created in the low\nlevel design are executed so what does\nunit testing unit testing is a white box\ntesting technic where a piece of code is\nwritten which invokes a method to test\nwhether the code snippet is giving the\nexpected output or not this testing is\nbasically performed by the development\nteam in case of any anomaly defects are\nlogged and tracked so artifacts produced\nhere our unit test execution results\nnext comes integration testing in the\nface the integration test cases are\nexecuted which were created in the\narchitectural design or your high-level\ndesign phase in case of any anomalies\ndefects are logged and tracked even here\nso now talking about integration testing\nin this phase the integration test cases\nare executed which were created in the\narchitectural design or your high-level\ndesign phase in case of any anomalies\ndefects are logged and tracked so in\nintegration testing it validates whether\nthe components of the application works\ntogether as expected and the artifacts\nproduced here are integration test\nresults and now coming to system testing\nin this phase all the system test cases\nfunctional test cases and non-functional\ntest cases are executed in other words\nthe actual and full-fledged testing of\nthe application takes place here so\ndefects are logged and tracked for its\nclosure progress reporting is also a\nmajor part in this face the traceability\nmetrics are updated to check the\ncoverage and risk mitigated and the\nartifacts produced are test results test\nlogs defect report the summary report\nand updated traceability matrices and\nnow talking about the last phase that is\nuser acceptance testing so acceptance\ntesting is basically related to business\nrequirements testing here testing is\ndone to validate that the business\nrequirements are met in the user\nenvironment and compatibility testing\nand sometimes non-functional testing are\nalso done in this phase and the\nartifacts produced will be user\nacceptance test results updated business\ncoverage matrices so these are the\nvarious phases involved in the testing\nthat is the right-hand side of the model\nthat's why it is called V&B model where\nverification is nothing but development\nphase and validation is testing phase so\nwhen they use B model the model is to be\nused when requirement is well-defined\nand not ambiguous acceptance criteria\nare well defined project the short to\nmedium and size and technology and tools\nused are not dynamic\nthese are the situations when you should\nuse verification and validation model\nnow let's move further and understand\nsoftware testing lifecycle software\ntesting lifecycle is a testing process\nwhich is executed in systematic and\nplanned manner in software testing\nlifecycle process different activities\nare carried out to improve the quality\nof the product so these are the various\nstages involved in software testing\nlifecycle first requirement analysis\nthis is the very first step ins of\nproducing lifecycle in this step the\nQuality Assurance team that is your QA\nteam understands the requirement in\nterms of what we will be testing and\nfigure out the testable requirements if\nany conflict missing or not understood\nany requirement then QA teams follows up\nwith the various stakeholders like\nbusiness analysts system architecture\nclient technical manager to better\nunderstand the detailed knowledge of\nrequirement and after that we have best\nplanning test planning is most important\nphase of software testing life cycle\nwhere all testing strategy is defined\nthis phase is also called as test\nstrategy phase in this phase typically\ntest manager is involved to determine\nthe effort and cost estimates for the\nentire project this phase will be kicked\noff on the requirement gathering phase\nis completed and based on the\nrequirement analysis we can start\npreparing the test plan and the result\nof this planning phase will be the test\nplan or press strategy or testing effort\nestimation documents once test planning\nphase is completed then QA team can\nstart with test cases development\nactivity so next we have test case\ndevelopment and this is started once the\ntest planning activity is finished this\nis the phase where testing team write\ndown the detailed test cases along with\ntest cases testing team also prepares a\ntest data for testing once the test\ncases are ready then these test cases\ncan be reviewed by peer members or QA\nlead and also the requirement\ntraceability matrix is prepared so what\nis this requirement race ability\nMatros is an industry accepted format\nfor tracking requirements where each\ntest case is marked with the requirement\nand using this RTM that is requirement\ntraceability matrix can track backward\nand forward traceability after all this\nyou have to set up the environment for\ntesting so this is a vital part of STL C\nand basically test environment decides\non which condition software is tested\nand it is an independent activity and\ncan be started parallel with test case\ndevelopment next we have test execution\nonce a preparation of test case\ndevelopment and test environment setup\nis completed then test execution phase\ncan be kicked off in this phase testing\nteam start executing test case is based\non prepare test planning and prepare\ntest cases in the prior step and finally\nwe have the test cycle closure so in\nthis once the test case is passed then\nsame can be marked as passed if any disk\ncase is failed then corresponding defect\ncan be reported to development team by a\nbug tracking system and bug can be\nlinked for corresponding test cases for\nfurther analysis so these are the\nvarious phases involved in software\ntesting lifecycle before I go further\nlet me clear out software testing is of\ntwo types manual testing and automation\ntesting and selenium was founded as an\nautomation testing tool to overcome the\nlimitations and drawbacks of manual\ntesting so till now whatever you learnt\nwas manual testing that is the testing\nof a software is done manually without\nthe use of automated tool or\napplications that are available in the\nmarket automation testing is an\nautomated technique where the tester\nwrites scripts by own and use a suitable\ntool to test the software it is\nbasically an automation process of for\nmanual process like regression testing\nautomation testing is also you to test\nthe application from Lord performance\nand stress point of view what are the\nchallenges faced by manual testing\nmanual testing means the application is\ntest manually by QA testers and tests\nneeds to be perform annually\nevery environment using a different data\nset and success/failure rate of every\ntransaction should be recorded so look\nat the image over here you can see a\npoor chap over here who manually\nverifies the transactions recorded the\nchallenges he is facing cause Phatak\nboredom delay in work mistake and errors\nbecause of manual effort and this leads\nto the need for automation testing and\nautomation testing beats manual testing\nevery time why because it is faster\nneeds less investment in human resource\nit is not prone to errors frequent\nexecution of tests is possible support\nlights-out execution and also supports\nregression and functional testing as\nwell and let's take a similar example\nsuppose there is login page and we have\nto verify if all the login attempts are\nsuccessful then it will be really very\neasy to write a piece of code which will\nvalidate if all transaction or login\nattempts a success or not moreover these\ntests can be configured in such a way\nthat they are tested in different\nenvironments and web browsers what else\ncan be done you can automate the\ngeneration of result file by scheduling\nit for a particular time during the day\nthen you can also automate the\ngeneration of reports based on those\nresults and the key point is that\nautomation testing makes our testers job\na whole lot simpler so these are some of\nthe challenges faced with manual testing\nand automation testing overcomes it now\nlet's see different testing methods of\nsoftware first is blackbox testing this\ntesting is also called as a behavioral\ntesting where the software tests the\ninternal structure design and\nimplementation and the user interface of\nthe product that is being tested is not\nalready known to the tester so that is\nthe reason it is called as blackbox\nwhere the input is being passed as a\ntest case to the blackbox but the\ninternal implementation details are not\nknown to the tester and output is being\ngiven next white box testing this type\nof technique deals with testing the\ninternal structure\nlogic design and implementation of\ndifferent modules this is also called as\na glass box testing where the internal\nimplementation details are known to the\ntester that is the code logic internal\nlogic design and many more and next we\nhave gray box testing in this it\ncombines a concept of both black box and\nwhite box that this internal\nimplementation details are partly known\nto the tester by the rest of the\ninternal implementation details are not\nknown to the tester and that's the\nreason it is called as grey box testing\nso these are the three methods of\nsoftware testing now let's see the\ndifference between functional and\nnon-functional testing as already listed\nfunctional testing is performed before\nnon-functional testing and\nnon-functional testing is performed\nafter functional testing and functional\ntesting is based on customer\nrequirements on the other hand\nnon-functional is based on customers\nexpectations functional testing\ndescribes what the product does and\nnon-functional describes how the product\nworks and examples of functional testing\nare unit testing acceptance mode testing\nintegration and regression testing and\nnon-functional testing includes\nperformance testing volume testing\nscalability load testing strain and\nstress testing etc so these are the\ndifferences between functional and\nnon-functional testing now let's talk\nabout software testing levels it starts\nfrom unit testing where unit test cases\nare produced and then it goes to\nintegration testing where the software\nis combined and tested and it produce\nintegration test cases and then comes\nsystem testing where the integrated\nsoftware or project is tested and then\ncomes acceptance testing where the\nsystem needs to be tested for adequacy\nso these are the software testing levels\nthat starts off with unit testing and\nends with acceptance testing now let's\nmove further and understand software\ntesting documentation documenting the\ntest case deals with documentation part\nof the developed product\nshould have to be prepared before or at\nthe time of software testing documenting\nthe test cases will facilitate you to\nestimate the testing effort you will\nneed along with the test coverage and\ntracking and tracing requirement here\nyou will learn to dig into how\ndocumentation is beneficial by testing\nalong with some of the features of it so\nwhy do you think documentation is\nnecessary some commonly applied\ndocumentation artifacts associated with\nsoftware testing are this plan does\nscenario test case and traceability\nmatrix let's discuss each of these in\nbrief first this plan test plan provides\nthe outline strategy which will be\nimplemented for testing the application\nand the resources which will be needed\nare also described it also holds the\ndetails about on which environment the\ntests will be performed so let's take an\nexample of how we have to maintain a\ntest plan report so this is my test plan\nreport where I have columns like this\nnumber the type of the test target file\ntest name purpose of the test the\nsituation expected output actual output\nand outcomes and actions that are\nrequired for example say you are testing\na website so the test type will be\nwebsite and you have to give your test\nnumber say your testing on particular\nlogin information you can give the\ntarget file as login information and you\ncan give whatever the test that you're\nperforming say for example unit testing\nand you can check the purpose and the\nsituations whether all the clicks are\nworking or not or the email address is\nbeing entered or not in the login page\nand whatever the output that you expect\nand whatever the actual output that\narrives and what is the outcome of it\nand the actions that you need to be\nperformed these are all the main\nconsiderations of a test plan report now\nlet's see what is at a scenario this\nscenario can be considered as a single\nline statement which notifies the area\nin which your application will\nexperiment this artifact is needed for\nensuring the overall procedure test\nfrom start to finish so again this is\nyour test scenario where you need to\nhave your use case ID your requirement\nID the scenario on which you're working\non and what is it a scenario and how\nmany test cases that is the number of\ntest cases that is required so you can\ngo on documenting all the records over\nhere and the test scenario next is test\ncase test cases engage in collected step\nand conditions with inputs which can be\nimplemented at the time of testing this\nactivity focuses on making sure whether\na product went through a set of tests or\nfaced by any means such as functionality\nor other aspects many types of test\ncases are being checked during testing\nlike functional test cases negative\nerror test cases logical and physical\ntest cases and user interface test cases\nas well so these are the columns which\nare necessary for a test case that is\nyour test case ID your test case\nwhatever it is its description the step\nthat you take for testing a particular\nsoftware or a particular test case and\nits description again your expected\nresult actual output status and comment\nnow the last artifact that we have the\nstress of the t matrix it is also known\nas requirement traceability matrix and\nit contains the table which sketches\nyour requirements when your products\nsoftware development lifecycle is being\ncreated this documenting artifact can be\nimplemented for forward tracing which is\nto go from designing or can be\nimplemented for backward tracing as well\nwhich is the reverse of forward tracing\nso this is how you put our traceability\nmatrix that is you will be having your\nrequirement race ability where you have\nn number of test cases and here you have\nbusiness requirements so the matrix will\nbe put if the result will be passed on\nboth the ends so this is all about the\ndocumentation artifacts and the various\ntypes of artifacts that are involved in\nsoftware documentation now let's talk\nabout defect management as we know\ndefect management is a part of\nwe're testing process but what exactly\nis defect management and software\ntesting has not been known now I will\ntalk about it and tell you what exactly\nis defect management process to realize\nwhat defect management process actually\nis we should first understand the\ndefinition generally defect management\ncan be defined as a process of detecting\nbugs and fixing them it is necessary to\nsay that bugs occur constantly in the\nprocess of software development they are\na part of the software industry and that\nis because of the fact that software\ndevelopment is quite a complex process\nthe team members are usually placed in\nstrict timeframes they must write large\npieces of code every day and they\nusually don't have time to think about\nhow to avoid bugs\nhence every software development project\nrequires a process that helps to detect\ndefects and fix them the process of\ndefect management or bug tracking is\nusually conducted at the stage of\nproduct testing without realizing this\nit would be hard to understand the\nnature of defect management software\ntesting can be conducted in two\ndifferent ways\nusually the developers test the product\nthemselves however there's also a type\nof testing that is based on user\ninvolvement the final users are often\nprovided with an ability to report on\nthe bugs they find nevertheless but this\nis not the best way of testing because\nthe users could hardly find all the bugs\nand there are four steps involved in\ndefect management process and they are\nas shown on the screen the first step is\nthe stage of defect detecting we already\nmentioned that it can be conducted\neither by the team of developers or by\nthe users regardless of the type of the\ntesting the main goal is to detect all\nthe bugs and the final product or its\npart next step is formulation of bug\nreports so these are the documents that\ninclude all necessary information about\ncertain bugs\nusually they contain Delta on the type\nof bug and the\npossible way of its correction and next\nstep\nthat is the third step is the stage of\nbug fixing after the bugs are fixed this\nshould be tested once more to make sure\nthat the software works properly and\nduring the final step the bug list is\ncreated so this is a document that\ncontains information about all the bugs\nthat occurred during the project's\nperformance and the team often uses the\nbug list because the similar bugs have\noccurred so this is all about the defect\nmanagement process next we'll see what\nis the defect lifecycle or a bug life\ncycle defect life cycle is a cycle which\nare defect or a bug goes through during\nits lifetime it starts when a defect is\nfound and ends when a defect is closed\nafter ensuring it's not reproduced the\nflat life cycle is related to the bug\nfound during testing this life cycle can\nvary from organization to organization\nand also from project to project based\non several factors like organization\npolicy software development model like\nagile iterative project timeline team\nstructure etc bug or defect life cycle\nconsists of these following stages and\nthat starts from new this is the stage\nwhen a defect is logged and posted for\nthe first time and that defect state is\ngiven as new next assign after the\ntester has posted the bug the lead of\nthe tester approves that the bug is\ngenuine and he assigns the bug to\ncorresponding developer and the\ndeveloper team and this state is given\nas assigned next active or open at this\nstate the developer has started\nanalyzing and working on the defect fix\nand when developer makes necessary code\nchanges and verifies the changes he or\nshe can make the bug status as fixed and\nthe bug is passed the testing team so at\nthis stage the tester do the testing of\nthe changed code which the developer has\ngiven to him to check whether the defect\nhas got fixed or not and as you can see\non the left hand side you have a reopen\nstate and thus if the\nstill exist even after the bug is fixed\nby the developer the tester changes the\nstatus to reopen again the bug goes\nthrough the lifecycle once again and\nnext again it will go through verify\nthatis it should be verified by the\ntester again and again to check whether\nthe bug is completely removed and or\nsuffer our particular product is error\nfree and then you have a closed state\nthat means once the bug is fixed it is\ntested by the tester if the tester feels\nthat the bug no longer legs in the\nsoftware he or she changes the status of\nthe bug to closed the state means that\nthe bug is fixed tested and approved and\nyou can see from active state it goes to\ntwo more stages that is rejected and\ndefer rejected means if the developer\nfeels that the bug is not genuine he\nrejects the bug then the state of the\nbug is changed or rejected deferred\nstate indicates the bug is expected to\nbe fixed in next releases the reasons\nfor changing the buck to this state have\nmany factors some of them are priority\nof the bug may be low lack of time for\nthe release or the bug may not have\nmajor effect on the software and that's\na reason it is said as deferred so this\nis all about the bug lifecycle and the\nvarious stages the bug goes through once\nit is new till closed now let's move on\nto divide reuse software testing type\nthat does automation testing as I have\nalready mentioned automation testing is\nan automated technique where the tester\nwrites scripts by own and uses suitable\ntools to test the software it is\nbasically an automation process of a\nmanual process so there are many tools\nto carry out automation testing like\nselenium testing with HPE unified\nfunctional testing tests complete ran\nracks weight ir weight iron TELRIC test\nstudio tours car tests and many more so\nwhat is selenium and buy it as a\npreferable tool selenium is an\nopen-source tool which is used for\nautomating the test carried on the web\nbrowser wait before you get carried away\nlet me reiterate\nonly testing of web applications is\npossible with selenium we can neither\ntest any desktop application nor test\nany mobile application using selenium\nsince selenium is open source\nthere is no licensing cost involved\nwhich is a major advantage over other\ntesting tools so why do you prefer\nselenium the reasons behind ever-growing\npopularity of selenium our test scripts\ncan be written in any of these\nprogramming languages like Java Python\nc-sharp PHP Ruby pull and dotnet as well\nand tests can also be carried out in any\nof the OS like Windows operating system\nMac or Linux not only that it can be\ncarried out using any browser like\nMozilla Internet Explorer Google Chrome\nOpera Safari etc and tests can be\nintegrated with tools like testing G and\nJ unit for managing test cases and\ngenerating the reports and it can also\nbe integrated with maven Jenkins and\ndocker to achieve continuous testing and\nthat is the reason everyone prefers\nselenium over other automation testing\ntools so how to locate web elements and\nperform action so this is nothing but\nyour web page where you have inspected\nthe element and you are trying to locate\na particular element on the web page so\nhow is that done I'll tell you how that\nis with the help of selenium locators so\nwhat is a locator locator can be termed\nas an address that identifies a web\nelement uniquely within the web page\nthey are the HTML properties of the web\nelement which tells selenium about the\nweb element it needs to perform the\naction on selenium uses locators to\ninteract with the web element on the\nwebpage they are considered as the\nlifeblood of the tests using the right\nlocator and shows at the tester faster\nmore reliable or has lower maintenance\nover releases if you are fortunate\nenough to be working with unique IDs and\nclasses then you are usually all set but\nthere will be times when choosing your\nright locator will becomes a nightmare\nit can be a real challenge to verify\nthat you have\nright locators to accomplish whatever\nyou want so there are diverse range of\npebble amounts like Xbox ID radio button\netc and identifying these can be a\ntricky approach so let's see how and\nwhat are the different types of locators\nthat can be used to locate a particular\nweb element on the webpage so we have ID\nname link text CSS selector partial link\ntext and XPath first coming to IB the\nbest and most popular method to identify\nweb element is to use ID the ID of each\nelement is alleged to be unique IDs are\nthe safest and fastest locator option\nand all they should be the first choice\neven when there are multiple choices\nit's like an employee number or account\nwhich will be unique let's see an\nexample how to locate it and how to\nwrite a particular script for selenium\nso the very first step is to open your\nEclipse create a class I have created a\nclass called for selenium script and\navold in my main method now next what I\nwill do so the first step is to register\nchromedriver\nwhy when you write a script and run it\nthe chrome driver will launch the Google\nChrome if you are using Google Chrome\nweb browser or if you are using Mozilla\nFirefox you can choose equal driver so\nas I'm using chrome driver I have to set\nthe properties for chrome driver I'll\nset it like this I'll give system dot\nset property\nokay now I have launched my chromedriver\nso what's next now I will use driver\ntorget method to navigate through Ebates\noutcomes why because I am using ebay.com\nwebsite to test it so I will copy this\nand here I will give try forget\nand I will paste the value of EB within\ndouble-quotes okay after I do this I\nhave to use the ID locator to locate a\nparticular web element now suppose say I\nwant to locate the search box what I\nwill do I'll right-click on this choose\ninspect as I click on this thing you can\nsee the search box is getting\nhighlighted which implies as I mouse\nover on this you can see this search for\nanything was getting highlighted as you\ncan see here it has a ID attribute whose\nvalue is G H AC okay so I will copy this\nand I live on method here that is\nDreifort dot find element\nby dot ID and what is the value of ID\nthat you copied from eBay at this GH AC\nokay so when you try to locate the spy\nID that particular search box will be\nhighlighted okay now I want to do\nsomething like say I want to enter some\nvalues for this so how will I do that I\nwant to give like something called\nguitar or say mobile and click on the\nsearch when I search it over here you\ncan see the search filtered by shop by\nbrand okay so what I'm doing here is I'm\ncreating it manually so if I want to\nsearch the same thing by selenium how\nwill I do that for that what I use after\nthis I will use a method called send\nkeys okay and I will pass the value of\nsend keys as mobile so now next once you\ngive the send Keys as mobiles it will\nenter the value over here like mobiles\nokay but it won't give a search so in\norder to get the search what we should\ndo you can see the search button over\nhere so inspect that and again even that\nhas the ID whose value is GH button okay\nso what I'll do is copy this again I'll\ntry a driver or find element by ID and\nsenators she hatch button as it is a\nbutton I have to use a click method\nbecause we are clicking on the button\nare not sending any values to the button\nbut if it is our textbox then you can\nsend the keys and send the value okay\nsimple save it now what's the next step\nyou are giving ID and searching mobiles\nand clicking on the search box right but\nthere is something called implicit\nweights that is required to wait for a\nparticular amount of time and then\nproceed further so I will be writing\nsome methods over here so I will use\nthis method why because I want to\nmaximize the window of the output and I\nwant to delete all the cookies and I\nwant to set the page time or for 40\nseconds\nit's showing an exception because I\nhaven't imported the package and one\nmore thing I have said the implicitly\nwait for 30 seconds which implies it\nwill wait for 30 seconds and listen\nuntil the element is loaded that is this\none so even after 30 seconds if the\nelement is not loaded then it will throw\nan exception saying no such element\nfound okay so that is the reason I'm\nusing implicit wait but if the element\nis loaded within first two or five\nseconds then the rest or 25 seconds will\nbe ignored that is the reason implicit\nand explicit waits both are called as\ndynamic weights I'll explain you\nexplicit weight also don't worry for now\nlet's run the program and check the\noutput as you can see chromedriver\nlaunched to Google Chrome maximize the\nwindow and opened eBay calm you can see\nit entered more bias by itself loaded\nand gave the output as desired correct\nsounds much interesting right everything\nisn't automated correct yeah that's true\nnow let's learn one more locator that is\nnamed simple instead of ID we have to\nuse name that's all it's same like ID\nonly but we have to use name to locate a\nparticular element is in name locator\nI'll be using mint.com say I want to do\nsign up and you can see here it has an\nemail address tab I'll just click on\ninspect and you can see it has element\nwhose value is email name is an\nattribute whose value is email correct\nso let's see how to do that I want to\nsign up I'll inspect on this you can see\nit has a name whose value is email so\nI'll copy this and instead of by ID I\nwill make it as by name so hereby is a\nclass and name will be your locator or\nyour web element or your locator and I\nwill paste the value let us email and I\nwant to send email like something at\nEureka at the rate gmail.com my email\naddress and next I can also write the\npassword as well even that has the name\nattribute whose value is password\nso again by name I'll give and I'll\nchange this as password and I will send\nsomething like depending on my choice\nso it's capital K now say once I enter\nthe email I want it to wait for two to\nthree seconds and then enter the\npassword in that case what I will do\nafter the statement\nI'll give thread dots sleep of 3,000\nwhich implies it will date three seconds\nonly\nokay so save this and run the program so\nagain chromedriver launched google\nchrome navigated through mantra calm to\nthis page and it entered at eureka at\ngmail.com waiting for three seconds and\nthen enter the password correct as you\ncan see it is written as chrome is being\ncontrolled by automated test software\ncorrect so this is how you can use\nthread dot sleep in between the two\nelements and gone next we have link text\nthat is useful only for links that\nstarts with the anchor tag and H\nreference and if something text is\npresent in the link then you can use\nthis link text locator and next you have\nCSS selector it's very easy so CSS is\nmainly used to provide style rules for\nthe web pages and they can use for\nidentifying one or more elements on the\nweb page using CSS if you start using\nCSS selectors to identify elements you\nwill love the speed shell show you one\nsmall example how do you see as a\nselectors so to demonstrate CSS selector\nsay I want to locate the search box\nusing CSS selector so I have inspected\nthat and I have mentioned ID is a unique\nlocator so whenever you write anything\nit will be with respect to ID so I will\nshow you how to locate the element using\nCSS click on elements and click ctrl F\nwhere you can write string selector or\nXPath and remember CSS selector always\nstarts with hash and what is the value\nof ID\nit is GH ac correct so I'll just give GH\nAC on right thing that you can see it\nhighlighted the element which implies it\nwas able to locate the particular\nelement using CSS selector\nsounds much easier right instead of\nfinding the name your link tags\neverything and just write the ID value\nand you will be able to locate the\nparticular element correct same thing\nyou can copy this and paste it over here\nI'm sorry I have to again change it to\nebay.com first I'm sorry here and make\nit a spy CSS selector that's all and I\nwill pass a value as hash CH AC because\nthat's ID value okay something like no\nheadphones\nI commend this for now save the Sun run\nthe program again it launched Google\nChrome navigated through ebay.com\nand enter the value as headphones as I\ndid not click on the search it's not\ntaking if you want again you can click\non the search inspect copy the value\nthat is gh button this one and you can\npaste it over your and choose click\nmethod because you're clicking on the\nsearch box so that's how you can use CSS\nselectors as well next will be your\npartial link text so if you know some\nsituations we may have to find the links\nby a portion of the text and that it\ncontains because you know proper text\nwill not be there in such cases we can\nuse partial link text to locate the\nelements and now talking about my\nfavorite locator XPath it is designed to\nadapt the navigation of xml elements\nwith the purpose of selecting individual\nelements attributes or some part of an\nXML document for specific processing so\nsyntax goes like this it has double\nforward slash a tag name at select\nattribute an attribute name followed by\nhis attribute value I'll show you a\nsimple example of using XPath let's\nbreak mantra and try to locate this\nlogin information as you can see here it\nhas the input tag and it has a\nplaceholder whose value is your email\naddress so I'll let it over here only as\nI have told it starts with double\nforward slash I will give it and it has\na input tag okay and it also has\na placeholder whose value is your email\naddress so I will paste the value and\nyour value should be within single\nquotes on writing this you can see it\nwas able to locate the particular\nelement so now say I want to write it\nusing XPath I'll copy this expert and\nwrite it over here and I'll send key is\nlike on some email address so just run\nthe program and check the output it's\nlaunched Google Chrome that is your\nchrome Drive for launch google chrome\nnavigating through mantra and it will\nwrite the prescribed email address okay\nso this is how you can use expert to\nlocate a particular element under the\npage sounds much easier so this is how\nbasically you can use different types of\nelements to locate a particular element\non the webpage and you can use implicit\nand explicit ways yeah when I talk about\nexplicit bits I'll show you how to use\nit now I want to use yahoo.com and I'll\nexplain you explicit weights okay so I\nhave given the X part for login username\nI'll show you how you can even use for\nthis also no issues but but I want to\nmake you comfortable with different\nwebsites so I'm just showing that so\nwhen you click here I inspect on this\nand I will write the XPath I can give\nthe X part for this because it contains\nan ID whose value is login username so\nsame thing I have given over here that\nis ID that will be your username and\nsend kisses at a record rate yahoo.com\nand it has the click button that is this\nnext button again it has an ID attribute\nwhose value is login sign-in so based on\nthat I have written these two statements\nand I have used a webdriver weight\nexplicit way it is always achieved using\nwebdriver weights okay it's a concept of\nthe dynamic weight which weighs\ndynamically for specific conditions it\ncan be implemented by the driver weight\nclass it doesn't have any keyword like\nexplicit weight as it has for implicit\nwe can simply give webdriver weight\nHere I am creating an object of weight\nand I'm sending my driver that will be\nthis I am giving explicit weight as 20\nseconds and then I'm creating a web\nelement and asking it to wait until\nexpected conditions as visibility of the\nelement located by expert that is login\nusername that will be or email box so it\nwill wait until the expected condition\nsays visibility of the element that is\nlocated by this XPath simple so save\nthis and you can run the program and\ncheck the output so there are many\nvisibility conditions like you have\nelement to be clickable element to be\nvisible URL to be located and many more\nas such you can simply give ctrl + Shift\nwill get to know\nlet's see how the output will be so it\nentered add you record Aradia who comm\nasking to move to next correct so as a\ndeserve explicit wait we can change the\ntimings accordingly but implicit wait\none set cannot be changed as it is a\nglobal wait and it can be applicable to\nthe entire program but for webdriver\nwait that is you explicit wait you have\nto creep on creating a webdriver wait\nfor specific elements so it goes like\nthat simple so these are some of the\nbest practices for locators that is they\nare simple and small as possible and\nthey work even after you change the\nproperties of UI element and they work\neven after you change the properties of\nUI element around the element your\ntarget sounds much easier right so if\nyou want to learn more about locators\nweights and XPath and more about the\nselenium basics you can check out the\nplaylist for selenium videos and you can\nfind and master all these things so\nthat's all for the session on software\ntesting tutorial I hope you got a clear\nidea about manual testing and automation\ntesting as well and I hope you'll learn\nsomething out of it thank you and have a\nnice day I hope you have enjoyed\nlistening to this video please be kind\nenough to like it and you can comment\nany of your doubts and queries and we\nwill reply them at the earliest do look\nout for more videos in our playlist and\nsubscribe to any rekha channel to learn\nmore happy learning\n",
  "words": [
    "music",
    "hey",
    "everyone",
    "neha",
    "ideo",
    "rico",
    "welcome",
    "erica",
    "youtube",
    "channel",
    "session",
    "software",
    "testing",
    "tutorial",
    "let",
    "quickly",
    "tell",
    "topics",
    "covering",
    "session",
    "first",
    "tell",
    "software",
    "testing",
    "need",
    "software",
    "testing",
    "next",
    "talk",
    "software",
    "development",
    "lifecycle",
    "various",
    "models",
    "walk",
    "principles",
    "testing",
    "understand",
    "fundamentals",
    "next",
    "let",
    "dive",
    "software",
    "testing",
    "lifecycle",
    "understand",
    "various",
    "steps",
    "involved",
    "moving",
    "discussion",
    "seeing",
    "methods",
    "testing",
    "levels",
    "artifacts",
    "software",
    "testing",
    "documentation",
    "also",
    "talk",
    "defect",
    "management",
    "bug",
    "lifecycle",
    "moving",
    "automation",
    "testing",
    "understanding",
    "fundamentals",
    "automation",
    "testing",
    "various",
    "tools",
    "also",
    "learning",
    "selenium",
    "preferable",
    "tool",
    "automation",
    "testing",
    "finally",
    "wrap",
    "session",
    "telling",
    "locate",
    "elements",
    "perform",
    "actions",
    "webpages",
    "selenium",
    "without",
    "ado",
    "let",
    "get",
    "straight",
    "module",
    "first",
    "let",
    "understand",
    "software",
    "testing",
    "software",
    "testing",
    "defined",
    "activity",
    "check",
    "whether",
    "actual",
    "results",
    "match",
    "expected",
    "results",
    "also",
    "ensures",
    "product",
    "free",
    "bug",
    "defect",
    "testing",
    "software",
    "also",
    "involves",
    "implementation",
    "products",
    "module",
    "system",
    "part",
    "evaluating",
    "properties",
    "testing",
    "testers",
    "identify",
    "errors",
    "gaps",
    "requirement",
    "missing",
    "elements",
    "project",
    "system",
    "testing",
    "done",
    "manually",
    "help",
    "automated",
    "tools",
    "available",
    "market",
    "testing",
    "important",
    "software",
    "testing",
    "boils",
    "today",
    "world",
    "technology",
    "completely",
    "dominated",
    "machines",
    "behavior",
    "controlled",
    "software",
    "powering",
    "well",
    "machines",
    "behave",
    "exactly",
    "want",
    "every",
    "time",
    "everywhere",
    "yes",
    "answer",
    "questions",
    "lie",
    "software",
    "testing",
    "end",
    "day",
    "software",
    "application",
    "success",
    "rate",
    "going",
    "control",
    "business",
    "growth",
    "thing",
    "set",
    "even",
    "web",
    "applications",
    "businesses",
    "today",
    "completely",
    "reliant",
    "internet",
    "example",
    "see",
    "airplane",
    "crash",
    "bankrupt",
    "happening",
    "system",
    "tested",
    "properly",
    "launched",
    "say",
    "testing",
    "important",
    "else",
    "might",
    "lead",
    "loss",
    "monetary",
    "value",
    "jobs",
    "even",
    "loss",
    "human",
    "examples",
    "untested",
    "software",
    "becomes",
    "hazardous",
    "software",
    "testing",
    "plays",
    "significant",
    "role",
    "testing",
    "software",
    "system",
    "bugs",
    "defect",
    "properly",
    "removed",
    "system",
    "might",
    "lead",
    "system",
    "failure",
    "testing",
    "important",
    "let",
    "see",
    "performs",
    "software",
    "testing",
    "questions",
    "answer",
    "depending",
    "process",
    "connected",
    "project",
    "stakeholders",
    "industry",
    "information",
    "technology",
    "big",
    "companies",
    "team",
    "members",
    "bear",
    "responsibility",
    "evaluating",
    "project",
    "software",
    "based",
    "requirements",
    "test",
    "phase",
    "moreover",
    "bugs",
    "get",
    "detected",
    "proper",
    "testing",
    "done",
    "development",
    "software",
    "application",
    "people",
    "testing",
    "software",
    "testers",
    "project",
    "developer",
    "project",
    "lead",
    "team",
    "manager",
    "end",
    "users",
    "people",
    "takes",
    "care",
    "software",
    "testing",
    "understood",
    "let",
    "see",
    "software",
    "development",
    "lifecycle",
    "software",
    "development",
    "lifecycle",
    "process",
    "used",
    "software",
    "industry",
    "design",
    "develop",
    "test",
    "high",
    "quality",
    "software",
    "stl",
    "see",
    "software",
    "development",
    "lifecycle",
    "aims",
    "produce",
    "high",
    "quality",
    "software",
    "meets",
    "exceeds",
    "customer",
    "expectations",
    "reaches",
    "completion",
    "within",
    "times",
    "cost",
    "estimates",
    "see",
    "involves",
    "many",
    "phases",
    "let",
    "explain",
    "phases",
    "first",
    "requirement",
    "phase",
    "requirement",
    "gathering",
    "analysis",
    "important",
    "phase",
    "sdlc",
    "business",
    "list",
    "collects",
    "requirement",
    "customer",
    "client",
    "per",
    "clients",
    "business",
    "needs",
    "documents",
    "requirements",
    "business",
    "requirement",
    "specification",
    "document",
    "name",
    "varies",
    "depending",
    "upon",
    "organization",
    "examples",
    "crs",
    "customer",
    "requirement",
    "specification",
    "might",
    "call",
    "business",
    "specification",
    "well",
    "provide",
    "development",
    "team",
    "next",
    "analysis",
    "phase",
    "requirement",
    "gathering",
    "analysis",
    "done",
    "next",
    "step",
    "define",
    "document",
    "product",
    "requirements",
    "get",
    "approved",
    "customer",
    "done",
    "srs",
    "software",
    "requirement",
    "specification",
    "document",
    "software",
    "requirements",
    "specification",
    "consists",
    "product",
    "requirement",
    "designed",
    "developed",
    "project",
    "lifecycle",
    "key",
    "people",
    "involved",
    "phase",
    "project",
    "manager",
    "business",
    "analyst",
    "senior",
    "members",
    "team",
    "outcome",
    "phase",
    "software",
    "requirement",
    "specification",
    "moving",
    "design",
    "phase",
    "two",
    "steps",
    "one",
    "high",
    "level",
    "design",
    "one",
    "low",
    "level",
    "design",
    "high",
    "level",
    "design",
    "gives",
    "architecture",
    "software",
    "product",
    "developed",
    "done",
    "architects",
    "senior",
    "developers",
    "low",
    "level",
    "design",
    "done",
    "senior",
    "developers",
    "describes",
    "every",
    "feature",
    "product",
    "work",
    "every",
    "component",
    "work",
    "design",
    "decode",
    "outcome",
    "phase",
    "high",
    "level",
    "document",
    "lower",
    "level",
    "document",
    "works",
    "input",
    "next",
    "phase",
    "next",
    "development",
    "coding",
    "phase",
    "happens",
    "developers",
    "levels",
    "seniors",
    "juniors",
    "freshers",
    "involved",
    "phase",
    "phase",
    "start",
    "building",
    "software",
    "start",
    "writing",
    "code",
    "product",
    "outcome",
    "phase",
    "source",
    "code",
    "document",
    "developed",
    "product",
    "talking",
    "testing",
    "phase",
    "software",
    "ready",
    "sent",
    "testing",
    "document",
    "tests",
    "team",
    "tests",
    "thorough",
    "lead",
    "different",
    "effects",
    "either",
    "test",
    "software",
    "manually",
    "using",
    "automated",
    "tools",
    "depending",
    "process",
    "defined",
    "software",
    "testing",
    "lifecycle",
    "also",
    "ensures",
    "every",
    "component",
    "software",
    "works",
    "fine",
    "queue",
    "way",
    "quality",
    "analyst",
    "make",
    "sure",
    "software",
    "goes",
    "next",
    "stage",
    "implementation",
    "outcome",
    "phase",
    "quality",
    "product",
    "testing",
    "artifacts",
    "talk",
    "testing",
    "artifacts",
    "later",
    "part",
    "done",
    "next",
    "last",
    "step",
    "deployment",
    "maintenance",
    "phase",
    "successful",
    "testing",
    "product",
    "delivered",
    "deployed",
    "customer",
    "use",
    "deployment",
    "done",
    "deployment",
    "engineers",
    "implementation",
    "engineers",
    "custom",
    "start",
    "using",
    "developed",
    "system",
    "actual",
    "problems",
    "come",
    "needs",
    "solved",
    "time",
    "time",
    "fixing",
    "issues",
    "found",
    "customer",
    "comes",
    "maintenance",
    "phase",
    "100",
    "testing",
    "possible",
    "way",
    "pesters",
    "product",
    "different",
    "way",
    "customer",
    "use",
    "product",
    "maintenance",
    "done",
    "per",
    "sla",
    "service",
    "level",
    "agreement",
    "various",
    "phases",
    "involved",
    "software",
    "development",
    "lifecycle",
    "works",
    "different",
    "models",
    "software",
    "development",
    "life",
    "cycle",
    "like",
    "waterfall",
    "model",
    "spiral",
    "model",
    "agile",
    "model",
    "etc",
    "let",
    "talk",
    "fall",
    "model",
    "understand",
    "works",
    "waterfall",
    "model",
    "traditional",
    "model",
    "sequential",
    "design",
    "process",
    "often",
    "used",
    "sdlc",
    "progress",
    "seen",
    "flowing",
    "downwards",
    "like",
    "waterfall",
    "different",
    "phases",
    "requirement",
    "gathering",
    "feasibility",
    "study",
    "analysis",
    "design",
    "coding",
    "testing",
    "installation",
    "maintenance",
    "every",
    "next",
    "phase",
    "began",
    "goal",
    "previous",
    "phase",
    "completed",
    "methodology",
    "preferred",
    "projects",
    "quality",
    "important",
    "compared",
    "schedule",
    "cost",
    "methodology",
    "best",
    "suitable",
    "projects",
    "requirements",
    "change",
    "example",
    "attendance",
    "management",
    "calculator",
    "etcetera",
    "benefits",
    "using",
    "model",
    "requirements",
    "orders",
    "design",
    "code",
    "get",
    "stable",
    "product",
    "model",
    "simple",
    "implement",
    "requirements",
    "finalize",
    "earlier",
    "lifecycle",
    "wo",
    "chaos",
    "next",
    "phases",
    "requirement",
    "resources",
    "implement",
    "model",
    "minimal",
    "compared",
    "methodologies",
    "every",
    "phase",
    "specific",
    "deliverables",
    "gives",
    "high",
    "visibility",
    "project",
    "manager",
    "clients",
    "progress",
    "project",
    "disadvantages",
    "main",
    "disadvantage",
    "backtracking",
    "possible",
    "butters",
    "go",
    "back",
    "change",
    "requirements",
    "design",
    "stage",
    "reached",
    "change",
    "requirements",
    "leads",
    "change",
    "design",
    "code",
    "results",
    "defect",
    "project",
    "due",
    "overlapping",
    "phases",
    "customer",
    "may",
    "satisfied",
    "changes",
    "need",
    "incorporated",
    "product",
    "end",
    "waterfall",
    "model",
    "may",
    "flexible",
    "product",
    "model",
    "used",
    "requirements",
    "well",
    "known",
    "fixed",
    "also",
    "suitable",
    "long",
    "term",
    "projects",
    "requirements",
    "may",
    "change",
    "time",
    "time",
    "waterfall",
    "model",
    "next",
    "let",
    "take",
    "look",
    "bow",
    "hem",
    "spiral",
    "model",
    "spiral",
    "model",
    "works",
    "iterative",
    "nature",
    "combination",
    "prototype",
    "development",
    "process",
    "linear",
    "development",
    "process",
    "waterfall",
    "model",
    "model",
    "place",
    "emphasis",
    "risk",
    "analysis",
    "mostly",
    "model",
    "adopts",
    "large",
    "complicated",
    "projects",
    "risk",
    "high",
    "every",
    "iteration",
    "starts",
    "planning",
    "ends",
    "product",
    "evaluation",
    "client",
    "let",
    "take",
    "example",
    "product",
    "development",
    "team",
    "like",
    "microsoft",
    "know",
    "high",
    "risk",
    "face",
    "lots",
    "difficulties",
    "journey",
    "developing",
    "releasing",
    "project",
    "also",
    "know",
    "release",
    "next",
    "version",
    "product",
    "current",
    "version",
    "existence",
    "prefer",
    "spiral",
    "model",
    "develop",
    "product",
    "iterative",
    "nature",
    "could",
    "release",
    "one",
    "version",
    "product",
    "star",
    "developing",
    "next",
    "version",
    "includes",
    "new",
    "enhancements",
    "improvements",
    "previous",
    "version",
    "based",
    "issues",
    "faced",
    "user",
    "previous",
    "version",
    "like",
    "microsoft",
    "released",
    "windows",
    "8",
    "improved",
    "based",
    "user",
    "feedback",
    "release",
    "next",
    "version",
    "went",
    "mainly",
    "undergoes",
    "four",
    "phases",
    "planning",
    "phase",
    "space",
    "requirement",
    "gathering",
    "cost",
    "estimation",
    "resource",
    "allocation",
    "done",
    "next",
    "phase",
    "risk",
    "analysis",
    "phase",
    "strengths",
    "weaknesses",
    "project",
    "known",
    "next",
    "comes",
    "design",
    "engineering",
    "phase",
    "coding",
    "internal",
    "testing",
    "deployment",
    "done",
    "last",
    "evaluation",
    "phase",
    "like",
    "client",
    "evaluation",
    "testing",
    "get",
    "feedback",
    "etc",
    "benefits",
    "using",
    "model",
    "allows",
    "requirement",
    "changes",
    "also",
    "suitable",
    "large",
    "complicated",
    "projects",
    "main",
    "thing",
    "allows",
    "better",
    "risk",
    "analysis",
    "cost",
    "effective",
    "due",
    "good",
    "risk",
    "management",
    "disadvantages",
    "suitable",
    "small",
    "projects",
    "success",
    "project",
    "depends",
    "risk",
    "analysis",
    "phase",
    "spiral",
    "model",
    "different",
    "types",
    "models",
    "sdlc",
    "let",
    "move",
    "understand",
    "principles",
    "testing",
    "testing",
    "software",
    "exceptionally",
    "imaginative",
    "intellectual",
    "task",
    "testers",
    "perform",
    "testing",
    "software",
    "applications",
    "pursue",
    "principles",
    "mentioned",
    "principles",
    "also",
    "play",
    "significant",
    "role",
    "software",
    "tester",
    "test",
    "project",
    "first",
    "one",
    "software",
    "testing",
    "help",
    "detecting",
    "bugs",
    "testing",
    "software",
    "project",
    "help",
    "revealing",
    "defects",
    "may",
    "may",
    "detected",
    "developers",
    "however",
    "testing",
    "software",
    "alone",
    "confirm",
    "developed",
    "product",
    "software",
    "error",
    "free",
    "hence",
    "essential",
    "devise",
    "test",
    "cases",
    "find",
    "many",
    "defects",
    "possible",
    "next",
    "testing",
    "effectiveness",
    "impossible",
    "project",
    "application",
    "test",
    "state",
    "forward",
    "structure",
    "limited",
    "input",
    "wo",
    "likely",
    "achievable",
    "check",
    "test",
    "feasible",
    "sets",
    "beta",
    "modules",
    "scenarios",
    "next",
    "early",
    "testing",
    "earlier",
    "begin",
    "test",
    "project",
    "software",
    "better",
    "find",
    "utilize",
    "existing",
    "time",
    "next",
    "defect",
    "clustering",
    "time",
    "testing",
    "observe",
    "majority",
    "defects",
    "bugs",
    "reported",
    "small",
    "number",
    "modules",
    "inside",
    "software",
    "system",
    "next",
    "software",
    "testing",
    "context",
    "dependent",
    "error",
    "free",
    "bug",
    "free",
    "software",
    "myth",
    "tester",
    "tested",
    "application",
    "detect",
    "defects",
    "project",
    "indicate",
    "imply",
    "software",
    "ready",
    "shipping",
    "time",
    "testing",
    "modules",
    "working",
    "software",
    "tester",
    "needs",
    "test",
    "whether",
    "software",
    "meeting",
    "requirements",
    "client",
    "whether",
    "bugs",
    "found",
    "testing",
    "mended",
    "many",
    "factors",
    "need",
    "considered",
    "shipping",
    "software",
    "releasing",
    "market",
    "principles",
    "software",
    "testing",
    "one",
    "keep",
    "mind",
    "testing",
    "software",
    "let",
    "move",
    "understand",
    "one",
    "widely",
    "used",
    "model",
    "verification",
    "validation",
    "model",
    "understand",
    "model",
    "let",
    "first",
    "understand",
    "verification",
    "validation",
    "software",
    "first",
    "verification",
    "verification",
    "static",
    "analysis",
    "technique",
    "technique",
    "testing",
    "done",
    "without",
    "executing",
    "code",
    "example",
    "say",
    "inspection",
    "walkthrough",
    "reviews",
    "etc",
    "next",
    "validation",
    "validation",
    "dynamic",
    "analysis",
    "technique",
    "testing",
    "done",
    "executing",
    "code",
    "example",
    "functional",
    "testing",
    "techniques",
    "verification",
    "validation",
    "model",
    "development",
    "qa",
    "activities",
    "done",
    "simultaneously",
    "discrete",
    "phase",
    "called",
    "testing",
    "rather",
    "testing",
    "starts",
    "right",
    "requirement",
    "phase",
    "verification",
    "val",
    "activities",
    "go",
    "look",
    "figure",
    "see",
    "typical",
    "development",
    "process",
    "side",
    "shows",
    "development",
    "activities",
    "side",
    "shows",
    "testing",
    "activities",
    "wrong",
    "say",
    "development",
    "phase",
    "verification",
    "validation",
    "performed",
    "along",
    "actual",
    "development",
    "activities",
    "let",
    "understand",
    "phases",
    "depth",
    "first",
    "talking",
    "side",
    "know",
    "side",
    "activities",
    "development",
    "activities",
    "normally",
    "feel",
    "testing",
    "development",
    "phase",
    "beauty",
    "model",
    "demonstrates",
    "testing",
    "done",
    "phases",
    "development",
    "activities",
    "well",
    "requirements",
    "collected",
    "lies",
    "studied",
    "system",
    "implemented",
    "important",
    "system",
    "supposed",
    "important",
    "like",
    "brainstorming",
    "sessions",
    "walkthroughs",
    "interviews",
    "done",
    "objective",
    "set",
    "clear",
    "verification",
    "activity",
    "like",
    "requirements",
    "reviews",
    "validation",
    "activities",
    "like",
    "creation",
    "user",
    "acceptance",
    "test",
    "test",
    "cases",
    "artifacts",
    "produced",
    "requirement",
    "understanding",
    "document",
    "user",
    "acceptance",
    "test",
    "test",
    "cases",
    "uat",
    "test",
    "cases",
    "requirement",
    "analysis",
    "phase",
    "talking",
    "software",
    "specification",
    "phase",
    "high",
    "level",
    "design",
    "software",
    "built",
    "team",
    "studies",
    "investigates",
    "requirements",
    "could",
    "implemented",
    "technical",
    "feasibility",
    "requirements",
    "also",
    "studied",
    "team",
    "also",
    "comes",
    "modules",
    "would",
    "created",
    "based",
    "software",
    "hardware",
    "needs",
    "verification",
    "activities",
    "include",
    "design",
    "reviews",
    "validation",
    "activities",
    "like",
    "creation",
    "system",
    "test",
    "plan",
    "cases",
    "creation",
    "traceability",
    "metrics",
    "artifacts",
    "produced",
    "system",
    "test",
    "cases",
    "feasibility",
    "reports",
    "system",
    "test",
    "plan",
    "hardware",
    "software",
    "requirements",
    "modules",
    "created",
    "next",
    "phase",
    "architectural",
    "design",
    "design",
    "space",
    "based",
    "high",
    "level",
    "design",
    "software",
    "architecture",
    "creative",
    "modules",
    "relationship",
    "dependencies",
    "architectural",
    "diagrams",
    "database",
    "tables",
    "technology",
    "details",
    "finalized",
    "phase",
    "verification",
    "activities",
    "like",
    "design",
    "reviews",
    "included",
    "validation",
    "activities",
    "like",
    "integration",
    "test",
    "plan",
    "test",
    "cases",
    "artifacts",
    "produce",
    "design",
    "documents",
    "integration",
    "test",
    "plan",
    "test",
    "cases",
    "database",
    "table",
    "designs",
    "etc",
    "coming",
    "module",
    "design",
    "also",
    "called",
    "low",
    "level",
    "design",
    "phase",
    "every",
    "model",
    "software",
    "component",
    "designed",
    "individually",
    "methods",
    "classes",
    "interfaces",
    "data",
    "types",
    "etc",
    "finalized",
    "face",
    "verification",
    "activities",
    "like",
    "design",
    "reviews",
    "included",
    "validation",
    "activities",
    "like",
    "creation",
    "review",
    "unit",
    "test",
    "cases",
    "artifacts",
    "produced",
    "unit",
    "test",
    "cases",
    "next",
    "implementation",
    "code",
    "face",
    "actual",
    "coding",
    "done",
    "code",
    "review",
    "test",
    "cases",
    "review",
    "verification",
    "activities",
    "creation",
    "functional",
    "test",
    "cases",
    "validation",
    "activities",
    "artifacts",
    "produced",
    "test",
    "cases",
    "review",
    "checklist",
    "side",
    "development",
    "phase",
    "talking",
    "right",
    "hand",
    "side",
    "side",
    "demonstrate",
    "testing",
    "activities",
    "validation",
    "space",
    "start",
    "bottom",
    "unit",
    "testing",
    "face",
    "unit",
    "test",
    "case",
    "created",
    "low",
    "level",
    "design",
    "executed",
    "unit",
    "testing",
    "unit",
    "testing",
    "white",
    "box",
    "testing",
    "technic",
    "piece",
    "code",
    "written",
    "invokes",
    "method",
    "test",
    "whether",
    "code",
    "snippet",
    "giving",
    "expected",
    "output",
    "testing",
    "basically",
    "performed",
    "development",
    "team",
    "case",
    "anomaly",
    "defects",
    "logged",
    "tracked",
    "artifacts",
    "produced",
    "unit",
    "test",
    "execution",
    "results",
    "next",
    "comes",
    "integration",
    "testing",
    "face",
    "integration",
    "test",
    "cases",
    "executed",
    "created",
    "architectural",
    "design",
    "design",
    "phase",
    "case",
    "anomalies",
    "defects",
    "logged",
    "tracked",
    "even",
    "talking",
    "integration",
    "testing",
    "phase",
    "integration",
    "test",
    "cases",
    "executed",
    "created",
    "architectural",
    "design",
    "design",
    "phase",
    "case",
    "anomalies",
    "defects",
    "logged",
    "tracked",
    "integration",
    "testing",
    "validates",
    "whether",
    "components",
    "application",
    "works",
    "together",
    "expected",
    "artifacts",
    "produced",
    "integration",
    "test",
    "results",
    "coming",
    "system",
    "testing",
    "phase",
    "system",
    "test",
    "cases",
    "functional",
    "test",
    "cases",
    "test",
    "cases",
    "executed",
    "words",
    "actual",
    "testing",
    "application",
    "takes",
    "place",
    "defects",
    "logged",
    "tracked",
    "closure",
    "progress",
    "reporting",
    "also",
    "major",
    "part",
    "face",
    "traceability",
    "metrics",
    "updated",
    "check",
    "coverage",
    "risk",
    "mitigated",
    "artifacts",
    "produced",
    "test",
    "results",
    "test",
    "logs",
    "defect",
    "report",
    "summary",
    "report",
    "updated",
    "traceability",
    "matrices",
    "talking",
    "last",
    "phase",
    "user",
    "acceptance",
    "testing",
    "acceptance",
    "testing",
    "basically",
    "related",
    "business",
    "requirements",
    "testing",
    "testing",
    "done",
    "validate",
    "business",
    "requirements",
    "met",
    "user",
    "environment",
    "compatibility",
    "testing",
    "sometimes",
    "testing",
    "also",
    "done",
    "phase",
    "artifacts",
    "produced",
    "user",
    "acceptance",
    "test",
    "results",
    "updated",
    "business",
    "coverage",
    "matrices",
    "various",
    "phases",
    "involved",
    "testing",
    "side",
    "model",
    "called",
    "v",
    "b",
    "model",
    "verification",
    "nothing",
    "development",
    "phase",
    "validation",
    "testing",
    "phase",
    "use",
    "b",
    "model",
    "model",
    "used",
    "requirement",
    "ambiguous",
    "acceptance",
    "criteria",
    "well",
    "defined",
    "project",
    "short",
    "medium",
    "size",
    "technology",
    "tools",
    "used",
    "dynamic",
    "situations",
    "use",
    "verification",
    "validation",
    "model",
    "let",
    "move",
    "understand",
    "software",
    "testing",
    "lifecycle",
    "software",
    "testing",
    "lifecycle",
    "testing",
    "process",
    "executed",
    "systematic",
    "planned",
    "manner",
    "software",
    "testing",
    "lifecycle",
    "process",
    "different",
    "activities",
    "carried",
    "improve",
    "quality",
    "product",
    "various",
    "stages",
    "involved",
    "software",
    "testing",
    "lifecycle",
    "first",
    "requirement",
    "analysis",
    "first",
    "step",
    "ins",
    "producing",
    "lifecycle",
    "step",
    "quality",
    "assurance",
    "team",
    "qa",
    "team",
    "understands",
    "requirement",
    "terms",
    "testing",
    "figure",
    "testable",
    "requirements",
    "conflict",
    "missing",
    "understood",
    "requirement",
    "qa",
    "teams",
    "follows",
    "various",
    "stakeholders",
    "like",
    "business",
    "analysts",
    "system",
    "architecture",
    "client",
    "technical",
    "manager",
    "better",
    "understand",
    "detailed",
    "knowledge",
    "requirement",
    "best",
    "planning",
    "test",
    "planning",
    "important",
    "phase",
    "software",
    "testing",
    "life",
    "cycle",
    "testing",
    "strategy",
    "defined",
    "phase",
    "also",
    "called",
    "test",
    "strategy",
    "phase",
    "phase",
    "typically",
    "test",
    "manager",
    "involved",
    "determine",
    "effort",
    "cost",
    "estimates",
    "entire",
    "project",
    "phase",
    "kicked",
    "requirement",
    "gathering",
    "phase",
    "completed",
    "based",
    "requirement",
    "analysis",
    "start",
    "preparing",
    "test",
    "plan",
    "result",
    "planning",
    "phase",
    "test",
    "plan",
    "press",
    "strategy",
    "testing",
    "effort",
    "estimation",
    "documents",
    "test",
    "planning",
    "phase",
    "completed",
    "qa",
    "team",
    "start",
    "test",
    "cases",
    "development",
    "activity",
    "next",
    "test",
    "case",
    "development",
    "started",
    "test",
    "planning",
    "activity",
    "finished",
    "phase",
    "testing",
    "team",
    "write",
    "detailed",
    "test",
    "cases",
    "along",
    "test",
    "cases",
    "testing",
    "team",
    "also",
    "prepares",
    "test",
    "data",
    "testing",
    "test",
    "cases",
    "ready",
    "test",
    "cases",
    "reviewed",
    "peer",
    "members",
    "qa",
    "lead",
    "also",
    "requirement",
    "traceability",
    "matrix",
    "prepared",
    "requirement",
    "race",
    "ability",
    "matros",
    "industry",
    "accepted",
    "format",
    "tracking",
    "requirements",
    "test",
    "case",
    "marked",
    "requirement",
    "using",
    "rtm",
    "requirement",
    "traceability",
    "matrix",
    "track",
    "backward",
    "forward",
    "traceability",
    "set",
    "environment",
    "testing",
    "vital",
    "part",
    "stl",
    "c",
    "basically",
    "test",
    "environment",
    "decides",
    "condition",
    "software",
    "tested",
    "independent",
    "activity",
    "started",
    "parallel",
    "test",
    "case",
    "development",
    "next",
    "test",
    "execution",
    "preparation",
    "test",
    "case",
    "development",
    "test",
    "environment",
    "setup",
    "completed",
    "test",
    "execution",
    "phase",
    "kicked",
    "phase",
    "testing",
    "team",
    "start",
    "executing",
    "test",
    "case",
    "based",
    "prepare",
    "test",
    "planning",
    "prepare",
    "test",
    "cases",
    "prior",
    "step",
    "finally",
    "test",
    "cycle",
    "closure",
    "test",
    "case",
    "passed",
    "marked",
    "passed",
    "disk",
    "case",
    "failed",
    "corresponding",
    "defect",
    "reported",
    "development",
    "team",
    "bug",
    "tracking",
    "system",
    "bug",
    "linked",
    "corresponding",
    "test",
    "cases",
    "analysis",
    "various",
    "phases",
    "involved",
    "software",
    "testing",
    "lifecycle",
    "go",
    "let",
    "clear",
    "software",
    "testing",
    "two",
    "types",
    "manual",
    "testing",
    "automation",
    "testing",
    "selenium",
    "founded",
    "automation",
    "testing",
    "tool",
    "overcome",
    "limitations",
    "drawbacks",
    "manual",
    "testing",
    "till",
    "whatever",
    "learnt",
    "manual",
    "testing",
    "testing",
    "software",
    "done",
    "manually",
    "without",
    "use",
    "automated",
    "tool",
    "applications",
    "available",
    "market",
    "automation",
    "testing",
    "automated",
    "technique",
    "tester",
    "writes",
    "scripts",
    "use",
    "suitable",
    "tool",
    "test",
    "software",
    "basically",
    "automation",
    "process",
    "manual",
    "process",
    "like",
    "regression",
    "testing",
    "automation",
    "testing",
    "also",
    "test",
    "application",
    "lord",
    "performance",
    "stress",
    "point",
    "view",
    "challenges",
    "faced",
    "manual",
    "testing",
    "manual",
    "testing",
    "means",
    "application",
    "test",
    "manually",
    "qa",
    "testers",
    "tests",
    "needs",
    "perform",
    "annually",
    "every",
    "environment",
    "using",
    "different",
    "data",
    "set",
    "rate",
    "every",
    "transaction",
    "recorded",
    "look",
    "image",
    "see",
    "poor",
    "chap",
    "manually",
    "verifies",
    "transactions",
    "recorded",
    "challenges",
    "facing",
    "cause",
    "phatak",
    "boredom",
    "delay",
    "work",
    "mistake",
    "errors",
    "manual",
    "effort",
    "leads",
    "need",
    "automation",
    "testing",
    "automation",
    "testing",
    "beats",
    "manual",
    "testing",
    "every",
    "time",
    "faster",
    "needs",
    "less",
    "investment",
    "human",
    "resource",
    "prone",
    "errors",
    "frequent",
    "execution",
    "tests",
    "possible",
    "support",
    "execution",
    "also",
    "supports",
    "regression",
    "functional",
    "testing",
    "well",
    "let",
    "take",
    "similar",
    "example",
    "suppose",
    "login",
    "page",
    "verify",
    "login",
    "attempts",
    "successful",
    "really",
    "easy",
    "write",
    "piece",
    "code",
    "validate",
    "transaction",
    "login",
    "attempts",
    "success",
    "moreover",
    "tests",
    "configured",
    "way",
    "tested",
    "different",
    "environments",
    "web",
    "browsers",
    "else",
    "done",
    "automate",
    "generation",
    "result",
    "file",
    "scheduling",
    "particular",
    "time",
    "day",
    "also",
    "automate",
    "generation",
    "reports",
    "based",
    "results",
    "key",
    "point",
    "automation",
    "testing",
    "makes",
    "testers",
    "job",
    "whole",
    "lot",
    "simpler",
    "challenges",
    "faced",
    "manual",
    "testing",
    "automation",
    "testing",
    "overcomes",
    "let",
    "see",
    "different",
    "testing",
    "methods",
    "software",
    "first",
    "blackbox",
    "testing",
    "testing",
    "also",
    "called",
    "behavioral",
    "testing",
    "software",
    "tests",
    "internal",
    "structure",
    "design",
    "implementation",
    "user",
    "interface",
    "product",
    "tested",
    "already",
    "known",
    "tester",
    "reason",
    "called",
    "blackbox",
    "input",
    "passed",
    "test",
    "case",
    "blackbox",
    "internal",
    "implementation",
    "details",
    "known",
    "tester",
    "output",
    "given",
    "next",
    "white",
    "box",
    "testing",
    "type",
    "technique",
    "deals",
    "testing",
    "internal",
    "structure",
    "logic",
    "design",
    "implementation",
    "different",
    "modules",
    "also",
    "called",
    "glass",
    "box",
    "testing",
    "internal",
    "implementation",
    "details",
    "known",
    "tester",
    "code",
    "logic",
    "internal",
    "logic",
    "design",
    "many",
    "next",
    "gray",
    "box",
    "testing",
    "combines",
    "concept",
    "black",
    "box",
    "white",
    "box",
    "internal",
    "implementation",
    "details",
    "partly",
    "known",
    "tester",
    "rest",
    "internal",
    "implementation",
    "details",
    "known",
    "tester",
    "reason",
    "called",
    "grey",
    "box",
    "testing",
    "three",
    "methods",
    "software",
    "testing",
    "let",
    "see",
    "difference",
    "functional",
    "testing",
    "already",
    "listed",
    "functional",
    "testing",
    "performed",
    "testing",
    "testing",
    "performed",
    "functional",
    "testing",
    "functional",
    "testing",
    "based",
    "customer",
    "requirements",
    "hand",
    "based",
    "customers",
    "expectations",
    "functional",
    "testing",
    "describes",
    "product",
    "describes",
    "product",
    "works",
    "examples",
    "functional",
    "testing",
    "unit",
    "testing",
    "acceptance",
    "mode",
    "testing",
    "integration",
    "regression",
    "testing",
    "testing",
    "includes",
    "performance",
    "testing",
    "volume",
    "testing",
    "scalability",
    "load",
    "testing",
    "strain",
    "stress",
    "testing",
    "etc",
    "differences",
    "functional",
    "testing",
    "let",
    "talk",
    "software",
    "testing",
    "levels",
    "starts",
    "unit",
    "testing",
    "unit",
    "test",
    "cases",
    "produced",
    "goes",
    "integration",
    "testing",
    "software",
    "combined",
    "tested",
    "produce",
    "integration",
    "test",
    "cases",
    "comes",
    "system",
    "testing",
    "integrated",
    "software",
    "project",
    "tested",
    "comes",
    "acceptance",
    "testing",
    "system",
    "needs",
    "tested",
    "adequacy",
    "software",
    "testing",
    "levels",
    "starts",
    "unit",
    "testing",
    "ends",
    "acceptance",
    "testing",
    "let",
    "move",
    "understand",
    "software",
    "testing",
    "documentation",
    "documenting",
    "test",
    "case",
    "deals",
    "documentation",
    "part",
    "developed",
    "product",
    "prepared",
    "time",
    "software",
    "testing",
    "documenting",
    "test",
    "cases",
    "facilitate",
    "estimate",
    "testing",
    "effort",
    "need",
    "along",
    "test",
    "coverage",
    "tracking",
    "tracing",
    "requirement",
    "learn",
    "dig",
    "documentation",
    "beneficial",
    "testing",
    "along",
    "features",
    "think",
    "documentation",
    "necessary",
    "commonly",
    "applied",
    "documentation",
    "artifacts",
    "associated",
    "software",
    "testing",
    "plan",
    "scenario",
    "test",
    "case",
    "traceability",
    "matrix",
    "let",
    "discuss",
    "brief",
    "first",
    "plan",
    "test",
    "plan",
    "provides",
    "outline",
    "strategy",
    "implemented",
    "testing",
    "application",
    "resources",
    "needed",
    "also",
    "described",
    "also",
    "holds",
    "details",
    "environment",
    "tests",
    "performed",
    "let",
    "take",
    "example",
    "maintain",
    "test",
    "plan",
    "report",
    "test",
    "plan",
    "report",
    "columns",
    "like",
    "number",
    "type",
    "test",
    "target",
    "file",
    "test",
    "name",
    "purpose",
    "test",
    "situation",
    "expected",
    "output",
    "actual",
    "output",
    "outcomes",
    "actions",
    "required",
    "example",
    "say",
    "testing",
    "website",
    "test",
    "type",
    "website",
    "give",
    "test",
    "number",
    "say",
    "testing",
    "particular",
    "login",
    "information",
    "give",
    "target",
    "file",
    "login",
    "information",
    "give",
    "whatever",
    "test",
    "performing",
    "say",
    "example",
    "unit",
    "testing",
    "check",
    "purpose",
    "situations",
    "whether",
    "clicks",
    "working",
    "email",
    "address",
    "entered",
    "login",
    "page",
    "whatever",
    "output",
    "expect",
    "whatever",
    "actual",
    "output",
    "arrives",
    "outcome",
    "actions",
    "need",
    "performed",
    "main",
    "considerations",
    "test",
    "plan",
    "report",
    "let",
    "see",
    "scenario",
    "scenario",
    "considered",
    "single",
    "line",
    "statement",
    "notifies",
    "area",
    "application",
    "experiment",
    "artifact",
    "needed",
    "ensuring",
    "overall",
    "procedure",
    "test",
    "start",
    "finish",
    "test",
    "scenario",
    "need",
    "use",
    "case",
    "id",
    "requirement",
    "id",
    "scenario",
    "working",
    "scenario",
    "many",
    "test",
    "cases",
    "number",
    "test",
    "cases",
    "required",
    "go",
    "documenting",
    "records",
    "test",
    "scenario",
    "next",
    "test",
    "case",
    "test",
    "cases",
    "engage",
    "collected",
    "step",
    "conditions",
    "inputs",
    "implemented",
    "time",
    "testing",
    "activity",
    "focuses",
    "making",
    "sure",
    "whether",
    "product",
    "went",
    "set",
    "tests",
    "faced",
    "means",
    "functionality",
    "aspects",
    "many",
    "types",
    "test",
    "cases",
    "checked",
    "testing",
    "like",
    "functional",
    "test",
    "cases",
    "negative",
    "error",
    "test",
    "cases",
    "logical",
    "physical",
    "test",
    "cases",
    "user",
    "interface",
    "test",
    "cases",
    "well",
    "columns",
    "necessary",
    "test",
    "case",
    "test",
    "case",
    "id",
    "test",
    "case",
    "whatever",
    "description",
    "step",
    "take",
    "testing",
    "particular",
    "software",
    "particular",
    "test",
    "case",
    "description",
    "expected",
    "result",
    "actual",
    "output",
    "status",
    "comment",
    "last",
    "artifact",
    "stress",
    "matrix",
    "also",
    "known",
    "requirement",
    "traceability",
    "matrix",
    "contains",
    "table",
    "sketches",
    "requirements",
    "products",
    "software",
    "development",
    "lifecycle",
    "created",
    "documenting",
    "artifact",
    "implemented",
    "forward",
    "tracing",
    "go",
    "designing",
    "implemented",
    "backward",
    "tracing",
    "well",
    "reverse",
    "forward",
    "tracing",
    "put",
    "traceability",
    "matrix",
    "requirement",
    "race",
    "ability",
    "n",
    "number",
    "test",
    "cases",
    "business",
    "requirements",
    "matrix",
    "put",
    "result",
    "passed",
    "ends",
    "documentation",
    "artifacts",
    "various",
    "types",
    "artifacts",
    "involved",
    "software",
    "documentation",
    "let",
    "talk",
    "defect",
    "management",
    "know",
    "defect",
    "management",
    "part",
    "testing",
    "process",
    "exactly",
    "defect",
    "management",
    "software",
    "testing",
    "known",
    "talk",
    "tell",
    "exactly",
    "defect",
    "management",
    "process",
    "realize",
    "defect",
    "management",
    "process",
    "actually",
    "first",
    "understand",
    "definition",
    "generally",
    "defect",
    "management",
    "defined",
    "process",
    "detecting",
    "bugs",
    "fixing",
    "necessary",
    "say",
    "bugs",
    "occur",
    "constantly",
    "process",
    "software",
    "development",
    "part",
    "software",
    "industry",
    "fact",
    "software",
    "development",
    "quite",
    "complex",
    "process",
    "team",
    "members",
    "usually",
    "placed",
    "strict",
    "timeframes",
    "must",
    "write",
    "large",
    "pieces",
    "code",
    "every",
    "day",
    "usually",
    "time",
    "think",
    "avoid",
    "bugs",
    "hence",
    "every",
    "software",
    "development",
    "project",
    "requires",
    "process",
    "helps",
    "detect",
    "defects",
    "fix",
    "process",
    "defect",
    "management",
    "bug",
    "tracking",
    "usually",
    "conducted",
    "stage",
    "product",
    "testing",
    "without",
    "realizing",
    "would",
    "hard",
    "understand",
    "nature",
    "defect",
    "management",
    "software",
    "testing",
    "conducted",
    "two",
    "different",
    "ways",
    "usually",
    "developers",
    "test",
    "product",
    "however",
    "also",
    "type",
    "testing",
    "based",
    "user",
    "involvement",
    "final",
    "users",
    "often",
    "provided",
    "ability",
    "report",
    "bugs",
    "find",
    "nevertheless",
    "best",
    "way",
    "testing",
    "users",
    "could",
    "hardly",
    "find",
    "bugs",
    "four",
    "steps",
    "involved",
    "defect",
    "management",
    "process",
    "shown",
    "screen",
    "first",
    "step",
    "stage",
    "defect",
    "detecting",
    "already",
    "mentioned",
    "conducted",
    "either",
    "team",
    "developers",
    "users",
    "regardless",
    "type",
    "testing",
    "main",
    "goal",
    "detect",
    "bugs",
    "final",
    "product",
    "part",
    "next",
    "step",
    "formulation",
    "bug",
    "reports",
    "documents",
    "include",
    "necessary",
    "information",
    "certain",
    "bugs",
    "usually",
    "contain",
    "delta",
    "type",
    "bug",
    "possible",
    "way",
    "correction",
    "next",
    "step",
    "third",
    "step",
    "stage",
    "bug",
    "fixing",
    "bugs",
    "fixed",
    "tested",
    "make",
    "sure",
    "software",
    "works",
    "properly",
    "final",
    "step",
    "bug",
    "list",
    "created",
    "document",
    "contains",
    "information",
    "bugs",
    "occurred",
    "project",
    "performance",
    "team",
    "often",
    "uses",
    "bug",
    "list",
    "similar",
    "bugs",
    "occurred",
    "defect",
    "management",
    "process",
    "next",
    "see",
    "defect",
    "lifecycle",
    "bug",
    "life",
    "cycle",
    "defect",
    "life",
    "cycle",
    "cycle",
    "defect",
    "bug",
    "goes",
    "lifetime",
    "starts",
    "defect",
    "found",
    "ends",
    "defect",
    "closed",
    "ensuring",
    "reproduced",
    "flat",
    "life",
    "cycle",
    "related",
    "bug",
    "found",
    "testing",
    "life",
    "cycle",
    "vary",
    "organization",
    "organization",
    "also",
    "project",
    "project",
    "based",
    "several",
    "factors",
    "like",
    "organization",
    "policy",
    "software",
    "development",
    "model",
    "like",
    "agile",
    "iterative",
    "project",
    "timeline",
    "team",
    "structure",
    "etc",
    "bug",
    "defect",
    "life",
    "cycle",
    "consists",
    "following",
    "stages",
    "starts",
    "new",
    "stage",
    "defect",
    "logged",
    "posted",
    "first",
    "time",
    "defect",
    "state",
    "given",
    "new",
    "next",
    "assign",
    "tester",
    "posted",
    "bug",
    "lead",
    "tester",
    "approves",
    "bug",
    "genuine",
    "assigns",
    "bug",
    "corresponding",
    "developer",
    "developer",
    "team",
    "state",
    "given",
    "assigned",
    "next",
    "active",
    "open",
    "state",
    "developer",
    "started",
    "analyzing",
    "working",
    "defect",
    "fix",
    "developer",
    "makes",
    "necessary",
    "code",
    "changes",
    "verifies",
    "changes",
    "make",
    "bug",
    "status",
    "fixed",
    "bug",
    "passed",
    "testing",
    "team",
    "stage",
    "tester",
    "testing",
    "changed",
    "code",
    "developer",
    "given",
    "check",
    "whether",
    "defect",
    "got",
    "fixed",
    "see",
    "left",
    "hand",
    "side",
    "reopen",
    "state",
    "thus",
    "still",
    "exist",
    "even",
    "bug",
    "fixed",
    "developer",
    "tester",
    "changes",
    "status",
    "reopen",
    "bug",
    "goes",
    "lifecycle",
    "next",
    "go",
    "verify",
    "thatis",
    "verified",
    "tester",
    "check",
    "whether",
    "bug",
    "completely",
    "removed",
    "suffer",
    "particular",
    "product",
    "error",
    "free",
    "closed",
    "state",
    "means",
    "bug",
    "fixed",
    "tested",
    "tester",
    "tester",
    "feels",
    "bug",
    "longer",
    "legs",
    "software",
    "changes",
    "status",
    "bug",
    "closed",
    "state",
    "means",
    "bug",
    "fixed",
    "tested",
    "approved",
    "see",
    "active",
    "state",
    "goes",
    "two",
    "stages",
    "rejected",
    "defer",
    "rejected",
    "means",
    "developer",
    "feels",
    "bug",
    "genuine",
    "rejects",
    "bug",
    "state",
    "bug",
    "changed",
    "rejected",
    "deferred",
    "state",
    "indicates",
    "bug",
    "expected",
    "fixed",
    "next",
    "releases",
    "reasons",
    "changing",
    "buck",
    "state",
    "many",
    "factors",
    "priority",
    "bug",
    "may",
    "low",
    "lack",
    "time",
    "release",
    "bug",
    "may",
    "major",
    "effect",
    "software",
    "reason",
    "said",
    "deferred",
    "bug",
    "lifecycle",
    "various",
    "stages",
    "bug",
    "goes",
    "new",
    "till",
    "closed",
    "let",
    "move",
    "divide",
    "reuse",
    "software",
    "testing",
    "type",
    "automation",
    "testing",
    "already",
    "mentioned",
    "automation",
    "testing",
    "automated",
    "technique",
    "tester",
    "writes",
    "scripts",
    "uses",
    "suitable",
    "tools",
    "test",
    "software",
    "basically",
    "automation",
    "process",
    "manual",
    "process",
    "many",
    "tools",
    "carry",
    "automation",
    "testing",
    "like",
    "selenium",
    "testing",
    "hpe",
    "unified",
    "functional",
    "testing",
    "tests",
    "complete",
    "ran",
    "racks",
    "weight",
    "ir",
    "weight",
    "iron",
    "telric",
    "test",
    "studio",
    "tours",
    "car",
    "tests",
    "many",
    "selenium",
    "buy",
    "preferable",
    "tool",
    "selenium",
    "tool",
    "used",
    "automating",
    "test",
    "carried",
    "web",
    "browser",
    "wait",
    "get",
    "carried",
    "away",
    "let",
    "reiterate",
    "testing",
    "web",
    "applications",
    "possible",
    "selenium",
    "neither",
    "test",
    "desktop",
    "application",
    "test",
    "mobile",
    "application",
    "using",
    "selenium",
    "since",
    "selenium",
    "open",
    "source",
    "licensing",
    "cost",
    "involved",
    "major",
    "advantage",
    "testing",
    "tools",
    "prefer",
    "selenium",
    "reasons",
    "behind",
    "popularity",
    "selenium",
    "test",
    "scripts",
    "written",
    "programming",
    "languages",
    "like",
    "java",
    "python",
    "php",
    "ruby",
    "pull",
    "dotnet",
    "well",
    "tests",
    "also",
    "carried",
    "os",
    "like",
    "windows",
    "operating",
    "system",
    "mac",
    "linux",
    "carried",
    "using",
    "browser",
    "like",
    "mozilla",
    "internet",
    "explorer",
    "google",
    "chrome",
    "opera",
    "safari",
    "etc",
    "tests",
    "integrated",
    "tools",
    "like",
    "testing",
    "g",
    "j",
    "unit",
    "managing",
    "test",
    "cases",
    "generating",
    "reports",
    "also",
    "integrated",
    "maven",
    "jenkins",
    "docker",
    "achieve",
    "continuous",
    "testing",
    "reason",
    "everyone",
    "prefers",
    "selenium",
    "automation",
    "testing",
    "tools",
    "locate",
    "web",
    "elements",
    "perform",
    "action",
    "nothing",
    "web",
    "page",
    "inspected",
    "element",
    "trying",
    "locate",
    "particular",
    "element",
    "web",
    "page",
    "done",
    "tell",
    "help",
    "selenium",
    "locators",
    "locator",
    "locator",
    "termed",
    "address",
    "identifies",
    "web",
    "element",
    "uniquely",
    "within",
    "web",
    "page",
    "html",
    "properties",
    "web",
    "element",
    "tells",
    "selenium",
    "web",
    "element",
    "needs",
    "perform",
    "action",
    "selenium",
    "uses",
    "locators",
    "interact",
    "web",
    "element",
    "webpage",
    "considered",
    "lifeblood",
    "tests",
    "using",
    "right",
    "locator",
    "shows",
    "tester",
    "faster",
    "reliable",
    "lower",
    "maintenance",
    "releases",
    "fortunate",
    "enough",
    "working",
    "unique",
    "ids",
    "classes",
    "usually",
    "set",
    "times",
    "choosing",
    "right",
    "locator",
    "becomes",
    "nightmare",
    "real",
    "challenge",
    "verify",
    "right",
    "locators",
    "accomplish",
    "whatever",
    "want",
    "diverse",
    "range",
    "pebble",
    "amounts",
    "like",
    "xbox",
    "id",
    "radio",
    "button",
    "etc",
    "identifying",
    "tricky",
    "approach",
    "let",
    "see",
    "different",
    "types",
    "locators",
    "used",
    "locate",
    "particular",
    "web",
    "element",
    "webpage",
    "id",
    "name",
    "link",
    "text",
    "css",
    "selector",
    "partial",
    "link",
    "text",
    "xpath",
    "first",
    "coming",
    "ib",
    "best",
    "popular",
    "method",
    "identify",
    "web",
    "element",
    "use",
    "id",
    "id",
    "element",
    "alleged",
    "unique",
    "ids",
    "safest",
    "fastest",
    "locator",
    "option",
    "first",
    "choice",
    "even",
    "multiple",
    "choices",
    "like",
    "employee",
    "number",
    "account",
    "unique",
    "let",
    "see",
    "example",
    "locate",
    "write",
    "particular",
    "script",
    "selenium",
    "first",
    "step",
    "open",
    "eclipse",
    "create",
    "class",
    "created",
    "class",
    "called",
    "selenium",
    "script",
    "avold",
    "main",
    "method",
    "next",
    "first",
    "step",
    "register",
    "chromedriver",
    "write",
    "script",
    "run",
    "chrome",
    "driver",
    "launch",
    "google",
    "chrome",
    "using",
    "google",
    "chrome",
    "web",
    "browser",
    "using",
    "mozilla",
    "firefox",
    "choose",
    "equal",
    "driver",
    "using",
    "chrome",
    "driver",
    "set",
    "properties",
    "chrome",
    "driver",
    "set",
    "like",
    "give",
    "system",
    "dot",
    "set",
    "property",
    "okay",
    "launched",
    "chromedriver",
    "next",
    "use",
    "driver",
    "torget",
    "method",
    "navigate",
    "ebates",
    "outcomes",
    "using",
    "website",
    "test",
    "copy",
    "give",
    "try",
    "forget",
    "paste",
    "value",
    "eb",
    "within",
    "okay",
    "use",
    "id",
    "locator",
    "locate",
    "particular",
    "web",
    "element",
    "suppose",
    "say",
    "want",
    "locate",
    "search",
    "box",
    "choose",
    "inspect",
    "click",
    "thing",
    "see",
    "search",
    "box",
    "getting",
    "highlighted",
    "implies",
    "mouse",
    "see",
    "search",
    "anything",
    "getting",
    "highlighted",
    "see",
    "id",
    "attribute",
    "whose",
    "value",
    "g",
    "h",
    "ac",
    "okay",
    "copy",
    "live",
    "method",
    "dreifort",
    "dot",
    "find",
    "element",
    "dot",
    "id",
    "value",
    "id",
    "copied",
    "ebay",
    "gh",
    "ac",
    "okay",
    "try",
    "locate",
    "spy",
    "id",
    "particular",
    "search",
    "box",
    "highlighted",
    "okay",
    "want",
    "something",
    "like",
    "say",
    "want",
    "enter",
    "values",
    "want",
    "give",
    "like",
    "something",
    "called",
    "guitar",
    "say",
    "mobile",
    "click",
    "search",
    "search",
    "see",
    "search",
    "filtered",
    "shop",
    "brand",
    "okay",
    "creating",
    "manually",
    "want",
    "search",
    "thing",
    "selenium",
    "use",
    "use",
    "method",
    "called",
    "send",
    "keys",
    "okay",
    "pass",
    "value",
    "send",
    "keys",
    "mobile",
    "next",
    "give",
    "send",
    "keys",
    "mobiles",
    "enter",
    "value",
    "like",
    "mobiles",
    "okay",
    "wo",
    "give",
    "search",
    "order",
    "get",
    "search",
    "see",
    "search",
    "button",
    "inspect",
    "even",
    "id",
    "whose",
    "value",
    "gh",
    "button",
    "okay",
    "copy",
    "try",
    "driver",
    "find",
    "element",
    "id",
    "senators",
    "hatch",
    "button",
    "button",
    "use",
    "click",
    "method",
    "clicking",
    "button",
    "sending",
    "values",
    "button",
    "textbox",
    "send",
    "keys",
    "send",
    "value",
    "okay",
    "simple",
    "save",
    "next",
    "step",
    "giving",
    "id",
    "searching",
    "mobiles",
    "clicking",
    "search",
    "box",
    "right",
    "something",
    "called",
    "implicit",
    "weights",
    "required",
    "wait",
    "particular",
    "amount",
    "time",
    "proceed",
    "writing",
    "methods",
    "use",
    "method",
    "want",
    "maximize",
    "window",
    "output",
    "want",
    "delete",
    "cookies",
    "want",
    "set",
    "page",
    "time",
    "40",
    "seconds",
    "showing",
    "exception",
    "imported",
    "package",
    "one",
    "thing",
    "said",
    "implicitly",
    "wait",
    "30",
    "seconds",
    "implies",
    "wait",
    "30",
    "seconds",
    "listen",
    "element",
    "loaded",
    "one",
    "even",
    "30",
    "seconds",
    "element",
    "loaded",
    "throw",
    "exception",
    "saying",
    "element",
    "found",
    "okay",
    "reason",
    "using",
    "implicit",
    "wait",
    "element",
    "loaded",
    "within",
    "first",
    "two",
    "five",
    "seconds",
    "rest",
    "25",
    "seconds",
    "ignored",
    "reason",
    "implicit",
    "explicit",
    "waits",
    "called",
    "dynamic",
    "weights",
    "explain",
    "explicit",
    "weight",
    "also",
    "worry",
    "let",
    "run",
    "program",
    "check",
    "output",
    "see",
    "chromedriver",
    "launched",
    "google",
    "chrome",
    "maximize",
    "window",
    "opened",
    "ebay",
    "calm",
    "see",
    "entered",
    "bias",
    "loaded",
    "gave",
    "output",
    "desired",
    "correct",
    "sounds",
    "much",
    "interesting",
    "right",
    "everything",
    "automated",
    "correct",
    "yeah",
    "true",
    "let",
    "learn",
    "one",
    "locator",
    "named",
    "simple",
    "instead",
    "id",
    "use",
    "name",
    "like",
    "id",
    "use",
    "name",
    "locate",
    "particular",
    "element",
    "name",
    "locator",
    "using",
    "say",
    "want",
    "sign",
    "see",
    "email",
    "address",
    "tab",
    "click",
    "inspect",
    "see",
    "element",
    "whose",
    "value",
    "email",
    "name",
    "attribute",
    "whose",
    "value",
    "email",
    "correct",
    "let",
    "see",
    "want",
    "sign",
    "inspect",
    "see",
    "name",
    "whose",
    "value",
    "email",
    "copy",
    "instead",
    "id",
    "make",
    "name",
    "hereby",
    "class",
    "name",
    "locator",
    "web",
    "element",
    "locator",
    "paste",
    "value",
    "let",
    "us",
    "email",
    "want",
    "send",
    "email",
    "like",
    "something",
    "eureka",
    "rate",
    "email",
    "address",
    "next",
    "also",
    "write",
    "password",
    "well",
    "even",
    "name",
    "attribute",
    "whose",
    "value",
    "password",
    "name",
    "give",
    "change",
    "password",
    "send",
    "something",
    "like",
    "depending",
    "choice",
    "capital",
    "k",
    "say",
    "enter",
    "email",
    "want",
    "wait",
    "two",
    "three",
    "seconds",
    "enter",
    "password",
    "case",
    "statement",
    "give",
    "thread",
    "dots",
    "sleep",
    "implies",
    "date",
    "three",
    "seconds",
    "okay",
    "save",
    "run",
    "program",
    "chromedriver",
    "launched",
    "google",
    "chrome",
    "navigated",
    "mantra",
    "calm",
    "page",
    "entered",
    "eureka",
    "waiting",
    "three",
    "seconds",
    "enter",
    "password",
    "correct",
    "see",
    "written",
    "chrome",
    "controlled",
    "automated",
    "test",
    "software",
    "correct",
    "use",
    "thread",
    "dot",
    "sleep",
    "two",
    "elements",
    "gone",
    "next",
    "link",
    "text",
    "useful",
    "links",
    "starts",
    "anchor",
    "tag",
    "h",
    "reference",
    "something",
    "text",
    "present",
    "link",
    "use",
    "link",
    "text",
    "locator",
    "next",
    "css",
    "selector",
    "easy",
    "css",
    "mainly",
    "used",
    "provide",
    "style",
    "rules",
    "web",
    "pages",
    "use",
    "identifying",
    "one",
    "elements",
    "web",
    "page",
    "using",
    "css",
    "start",
    "using",
    "css",
    "selectors",
    "identify",
    "elements",
    "love",
    "speed",
    "shell",
    "show",
    "one",
    "small",
    "example",
    "see",
    "selectors",
    "demonstrate",
    "css",
    "selector",
    "say",
    "want",
    "locate",
    "search",
    "box",
    "using",
    "css",
    "selector",
    "inspected",
    "mentioned",
    "id",
    "unique",
    "locator",
    "whenever",
    "write",
    "anything",
    "respect",
    "id",
    "show",
    "locate",
    "element",
    "using",
    "css",
    "click",
    "elements",
    "click",
    "ctrl",
    "f",
    "write",
    "string",
    "selector",
    "xpath",
    "remember",
    "css",
    "selector",
    "always",
    "starts",
    "hash",
    "value",
    "id",
    "gh",
    "ac",
    "correct",
    "give",
    "gh",
    "ac",
    "right",
    "thing",
    "see",
    "highlighted",
    "element",
    "implies",
    "able",
    "locate",
    "particular",
    "element",
    "using",
    "css",
    "selector",
    "sounds",
    "much",
    "easier",
    "right",
    "instead",
    "finding",
    "name",
    "link",
    "tags",
    "everything",
    "write",
    "id",
    "value",
    "able",
    "locate",
    "particular",
    "element",
    "correct",
    "thing",
    "copy",
    "paste",
    "sorry",
    "change",
    "first",
    "sorry",
    "make",
    "spy",
    "css",
    "selector",
    "pass",
    "value",
    "hash",
    "ch",
    "ac",
    "id",
    "value",
    "okay",
    "something",
    "like",
    "headphones",
    "commend",
    "save",
    "sun",
    "run",
    "program",
    "launched",
    "google",
    "chrome",
    "navigated",
    "enter",
    "value",
    "headphones",
    "click",
    "search",
    "taking",
    "want",
    "click",
    "search",
    "inspect",
    "copy",
    "value",
    "gh",
    "button",
    "one",
    "paste",
    "choose",
    "click",
    "method",
    "clicking",
    "search",
    "box",
    "use",
    "css",
    "selectors",
    "well",
    "next",
    "partial",
    "link",
    "text",
    "know",
    "situations",
    "may",
    "find",
    "links",
    "portion",
    "text",
    "contains",
    "know",
    "proper",
    "text",
    "cases",
    "use",
    "partial",
    "link",
    "text",
    "locate",
    "elements",
    "talking",
    "favorite",
    "locator",
    "xpath",
    "designed",
    "adapt",
    "navigation",
    "xml",
    "elements",
    "purpose",
    "selecting",
    "individual",
    "elements",
    "attributes",
    "part",
    "xml",
    "document",
    "specific",
    "processing",
    "syntax",
    "goes",
    "like",
    "double",
    "forward",
    "slash",
    "tag",
    "name",
    "select",
    "attribute",
    "attribute",
    "name",
    "followed",
    "attribute",
    "value",
    "show",
    "simple",
    "example",
    "using",
    "xpath",
    "let",
    "break",
    "mantra",
    "try",
    "locate",
    "login",
    "information",
    "see",
    "input",
    "tag",
    "placeholder",
    "whose",
    "value",
    "email",
    "address",
    "let",
    "told",
    "starts",
    "double",
    "forward",
    "slash",
    "give",
    "input",
    "tag",
    "okay",
    "also",
    "placeholder",
    "whose",
    "value",
    "email",
    "address",
    "paste",
    "value",
    "value",
    "within",
    "single",
    "quotes",
    "writing",
    "see",
    "able",
    "locate",
    "particular",
    "element",
    "say",
    "want",
    "write",
    "using",
    "xpath",
    "copy",
    "expert",
    "write",
    "send",
    "key",
    "like",
    "email",
    "address",
    "run",
    "program",
    "check",
    "output",
    "launched",
    "google",
    "chrome",
    "chrome",
    "drive",
    "launch",
    "google",
    "chrome",
    "navigating",
    "mantra",
    "write",
    "prescribed",
    "email",
    "address",
    "okay",
    "use",
    "expert",
    "locate",
    "particular",
    "element",
    "page",
    "sounds",
    "much",
    "easier",
    "basically",
    "use",
    "different",
    "types",
    "elements",
    "locate",
    "particular",
    "element",
    "webpage",
    "use",
    "implicit",
    "explicit",
    "ways",
    "yeah",
    "talk",
    "explicit",
    "bits",
    "show",
    "use",
    "want",
    "use",
    "explain",
    "explicit",
    "weights",
    "okay",
    "given",
    "x",
    "part",
    "login",
    "username",
    "show",
    "even",
    "use",
    "also",
    "issues",
    "want",
    "make",
    "comfortable",
    "different",
    "websites",
    "showing",
    "click",
    "inspect",
    "write",
    "xpath",
    "give",
    "x",
    "part",
    "contains",
    "id",
    "whose",
    "value",
    "login",
    "username",
    "thing",
    "given",
    "id",
    "username",
    "send",
    "kisses",
    "record",
    "rate",
    "click",
    "button",
    "next",
    "button",
    "id",
    "attribute",
    "whose",
    "value",
    "login",
    "based",
    "written",
    "two",
    "statements",
    "used",
    "webdriver",
    "weight",
    "explicit",
    "way",
    "always",
    "achieved",
    "using",
    "webdriver",
    "weights",
    "okay",
    "concept",
    "dynamic",
    "weight",
    "weighs",
    "dynamically",
    "specific",
    "conditions",
    "implemented",
    "driver",
    "weight",
    "class",
    "keyword",
    "like",
    "explicit",
    "weight",
    "implicit",
    "simply",
    "give",
    "webdriver",
    "weight",
    "creating",
    "object",
    "weight",
    "sending",
    "driver",
    "giving",
    "explicit",
    "weight",
    "20",
    "seconds",
    "creating",
    "web",
    "element",
    "asking",
    "wait",
    "expected",
    "conditions",
    "visibility",
    "element",
    "located",
    "expert",
    "login",
    "username",
    "email",
    "box",
    "wait",
    "expected",
    "condition",
    "says",
    "visibility",
    "element",
    "located",
    "xpath",
    "simple",
    "save",
    "run",
    "program",
    "check",
    "output",
    "many",
    "visibility",
    "conditions",
    "like",
    "element",
    "clickable",
    "element",
    "visible",
    "url",
    "located",
    "many",
    "simply",
    "give",
    "ctrl",
    "shift",
    "get",
    "know",
    "let",
    "see",
    "output",
    "entered",
    "add",
    "record",
    "aradia",
    "comm",
    "asking",
    "move",
    "next",
    "correct",
    "deserve",
    "explicit",
    "wait",
    "change",
    "timings",
    "accordingly",
    "implicit",
    "wait",
    "one",
    "set",
    "changed",
    "global",
    "wait",
    "applicable",
    "entire",
    "program",
    "webdriver",
    "wait",
    "explicit",
    "wait",
    "creep",
    "creating",
    "webdriver",
    "wait",
    "specific",
    "elements",
    "goes",
    "like",
    "simple",
    "best",
    "practices",
    "locators",
    "simple",
    "small",
    "possible",
    "work",
    "even",
    "change",
    "properties",
    "ui",
    "element",
    "work",
    "even",
    "change",
    "properties",
    "ui",
    "element",
    "around",
    "element",
    "target",
    "sounds",
    "much",
    "easier",
    "right",
    "want",
    "learn",
    "locators",
    "weights",
    "xpath",
    "selenium",
    "basics",
    "check",
    "playlist",
    "selenium",
    "videos",
    "find",
    "master",
    "things",
    "session",
    "software",
    "testing",
    "tutorial",
    "hope",
    "got",
    "clear",
    "idea",
    "manual",
    "testing",
    "automation",
    "testing",
    "well",
    "hope",
    "learn",
    "something",
    "thank",
    "nice",
    "day",
    "hope",
    "enjoyed",
    "listening",
    "video",
    "please",
    "kind",
    "enough",
    "like",
    "comment",
    "doubts",
    "queries",
    "reply",
    "earliest",
    "look",
    "videos",
    "playlist",
    "subscribe",
    "rekha",
    "channel",
    "learn",
    "happy",
    "learning"
  ],
  "keywords": [
    "session",
    "software",
    "testing",
    "let",
    "tell",
    "first",
    "need",
    "next",
    "talk",
    "development",
    "lifecycle",
    "various",
    "principles",
    "understand",
    "involved",
    "methods",
    "levels",
    "artifacts",
    "documentation",
    "also",
    "defect",
    "management",
    "bug",
    "automation",
    "tools",
    "selenium",
    "tool",
    "locate",
    "elements",
    "perform",
    "without",
    "get",
    "defined",
    "activity",
    "check",
    "whether",
    "actual",
    "results",
    "expected",
    "product",
    "free",
    "implementation",
    "system",
    "part",
    "properties",
    "testers",
    "requirement",
    "project",
    "done",
    "manually",
    "help",
    "automated",
    "important",
    "technology",
    "well",
    "want",
    "every",
    "time",
    "day",
    "application",
    "rate",
    "business",
    "thing",
    "set",
    "even",
    "web",
    "applications",
    "example",
    "see",
    "tested",
    "launched",
    "say",
    "lead",
    "value",
    "bugs",
    "depending",
    "process",
    "industry",
    "information",
    "team",
    "members",
    "based",
    "requirements",
    "test",
    "phase",
    "developer",
    "manager",
    "users",
    "used",
    "design",
    "high",
    "quality",
    "customer",
    "within",
    "cost",
    "many",
    "phases",
    "gathering",
    "analysis",
    "client",
    "needs",
    "documents",
    "specification",
    "document",
    "name",
    "organization",
    "step",
    "developed",
    "outcome",
    "two",
    "one",
    "level",
    "low",
    "developers",
    "work",
    "works",
    "input",
    "coding",
    "start",
    "code",
    "talking",
    "tests",
    "different",
    "using",
    "way",
    "make",
    "goes",
    "stage",
    "last",
    "deployment",
    "maintenance",
    "use",
    "found",
    "comes",
    "possible",
    "life",
    "cycle",
    "like",
    "waterfall",
    "model",
    "spiral",
    "etc",
    "completed",
    "projects",
    "best",
    "suitable",
    "change",
    "simple",
    "specific",
    "visibility",
    "main",
    "go",
    "may",
    "changes",
    "known",
    "fixed",
    "take",
    "look",
    "risk",
    "starts",
    "planning",
    "ends",
    "know",
    "face",
    "release",
    "version",
    "new",
    "faced",
    "user",
    "internal",
    "small",
    "types",
    "move",
    "mentioned",
    "tester",
    "defects",
    "error",
    "cases",
    "find",
    "state",
    "forward",
    "structure",
    "modules",
    "number",
    "working",
    "verification",
    "validation",
    "technique",
    "reviews",
    "dynamic",
    "functional",
    "qa",
    "activities",
    "called",
    "right",
    "side",
    "performed",
    "along",
    "implemented",
    "creation",
    "acceptance",
    "produced",
    "created",
    "plan",
    "traceability",
    "reports",
    "architectural",
    "details",
    "integration",
    "review",
    "unit",
    "case",
    "executed",
    "box",
    "written",
    "method",
    "output",
    "basically",
    "logged",
    "tracked",
    "execution",
    "report",
    "environment",
    "carried",
    "stages",
    "strategy",
    "effort",
    "result",
    "write",
    "matrix",
    "tracking",
    "passed",
    "manual",
    "whatever",
    "means",
    "login",
    "page",
    "particular",
    "already",
    "reason",
    "given",
    "type",
    "three",
    "documenting",
    "tracing",
    "learn",
    "necessary",
    "scenario",
    "give",
    "email",
    "address",
    "entered",
    "id",
    "conditions",
    "status",
    "contains",
    "usually",
    "closed",
    "weight",
    "wait",
    "google",
    "chrome",
    "element",
    "locators",
    "locator",
    "unique",
    "button",
    "link",
    "text",
    "css",
    "selector",
    "xpath",
    "class",
    "chromedriver",
    "run",
    "driver",
    "dot",
    "okay",
    "copy",
    "try",
    "paste",
    "search",
    "inspect",
    "click",
    "highlighted",
    "implies",
    "attribute",
    "whose",
    "ac",
    "gh",
    "something",
    "enter",
    "creating",
    "send",
    "keys",
    "save",
    "implicit",
    "weights",
    "seconds",
    "loaded",
    "explicit",
    "program",
    "correct",
    "sounds",
    "much",
    "password",
    "tag",
    "show",
    "username",
    "webdriver"
  ]
}