{
  "text": "hello everyone welcome again in this\nsoftware testing tutorial\nwe are going to understand what is\nsoftware testing\nnow this is very very important question\nwhen you go for any interview in\nsoftware testing\nor even if you are trying to learn\nsoftware testing and\nget into software testing job you need\nto understand\nbasically what is software testing\nbefore you can learn\nany other concepts all right so first\nthing\nwe need to understand what is software\ntesting\nwatch this video till end so that you do\nnot miss any of the key concepts that\ni'm going to explain in this particular\ntutorial\nbefore we understand software testing\nlet's first understand\nwhat is testing in general sense say for\nexample you go into the market you buy\nany product\nyou take it back home as soon as say for\nexample\nit is an electronic appliance or any\nkitchen appliance\nyou plug it in and it you know\nit doesn't work it doesn't turn on it\nor if it turns on it it doesn't function\nproperly\nwhat is your feeling in that particular\ncase you are really annoyed or we get\nreally annoyed\nwith the company or the product uh\nyou know the company that has provided\nthat product and\nwe question the quality assurance or the\nquality\ncriteria that that company has\nfor their product line right now how do\nthe companies ensure that they are\ndelivering the quality product it is\nthrough\nthe testing right so it doesn't matter\nwhether you\nyou are buying a car you are buying any\nelectronic appliances or anything\nelse there is always a level of testing\ninvolved in any of the product that\ngoes into the market that you buy all\nright\nso even if you are you know\ntaking any of the services say for\nexample you are you know\nopting for any services you also\nconsider the quality of the service\nright how the customer services\nso quality is everywhere whether it's a\nservice or product\nnow when it comes to products it is\nbasically\nensured through a defined a predefined\nprocess of testing so that is in general\nwhat testing is\nif we talk about the product or any\nother you know like industries\ncar manufacturing electronic\nmanufacturing etc\nso they have their own defined processes\nand tools to ensure\nthat the products that are coming out of\nthe assembly line\nare being tested properly and work\nproperly before\nthey are you know brought into the\nmarket and being sold to the consumers\nand they use it right now when we\ncorrelate that to software\nwhen you test the software it becomes a\nsoftware testing\nso what exactly software software is any\napplication say for example\nany website you take any application uh\nwhich which has complex functionality\naround you know\nfront and back and web services so any\napplication which\nfulfills the business logic is\nsort of software if it is you know like\na mobile app\num or any other application that is\navailable out there over the internet\nright so these sort of applications\nare known as software so softwares are\nbuilt\ninto you know using many different\nprogramming languages\nfor example like cc plus plus java there\nare n number of programming languages\nthat can be used\nnow you have mobile devices where you\nhave apps so these are\nall software when you are testing these\nsoftwares\nit is known as software testing now\nsoftware testing is not a standalone\nactivity\nit's a predefined process that you need\nto follow\nfrom step by step and ensure that the\nparticular\nproduct that you are trying to you know\nput it to the market or say for example\nan app you want to\ninstall or you want to launch it into\nthe app store\nprior to launching the app you want to\nensure that whatever functionality\nthat particular app needs to provide to\nthe customers\nit works as expected i'll take an\nexample of\nthe app say for example whatsapp okay\nvery widely used\nso say for example you are building\nsomething similar or you are you are\ncreating something\nsimilar to whatsapp so there will be\ncoding done\nright so once the coding is done there\nwill be features added so for example\ni should be able to you know send text\nmessages\nto other people when i you know add them\nin my contact list right when i add them\nin the in the contact list\ni should be able to call them so these\nare you know like some of the features\nthat\nin the whatsapp or the app scenario you\nwill basically\ntest before you actually say that yes\nthis functionality say functionality one\nfunctionality two\nis uh you know make call all right\nso i should be able to make call i\nshould be able to\ntext to other person functionality three\nadd contacts right\nand then functionality for say for\nexample\nadd profile picture\nright at profile pic so these are some\nof the\nfunctionalities in this particular app\nnow this is the app now say for example\nyou want to test an e-commerce website\nokay\nso e-commerce website so what\nfunctionalities that e-commerce website\nwill have\nsorry about my handwriting um but this\nis e-commerce website\nso say for example functionality one is\nyou know add items add items\nto cart then\nfunctionality to\nremove items right remove items if i\nwant to\nfrom cart\nokay so similarly there'll be you know\nlike different\nso this is the example of the app this\nis example of the website which will\nhave you know like\nyou know all different interfaces\nbuilt-in\nintegration built-in and then you as a\ntester will follow a\ndefined process so you have this\nrequirement this functionality say for\nexample it will have\nthe requirement or it will come as a\nuser story if you are following scrum\nmethodology or agile agile approaches\nthen\nyou will basically go through those user\nstories\nand analyze the user stories write the\ntest cases to\nensure that these you know requirements\nthat are mentioned\nsay for example adding items into the\ncard you write test cases you will then\nensure that those test cases actually\nwork as expected right so you run the\nwebsite you launch the website\nthat is being built um and then you will\nrun those test cases what you will do is\nyou will add the items into the cart you\nwill try to add the items you will try\nto remove the items from the card\nand then proceed further so you'll say\nyes these test cases have passed or\nthese\ntest cases have failed so if any of the\nfunctionality doesn't work as\nit is defined in the requirement you\nwill say it has\nfailed right so this is the overall\nexample or with example um\nto explain you what exactly is software\ntesting it is not a standalone activity\nit is a you know a life cycle\nand it basically consists of um all the\nstatic approaches and the dynamic\napproaches so\nthere are a lot of activities that need\nto be involved there say for example\nonce you get the requirement you analyze\nthose requirement as the testing team or\ntester\nand see whether there are any gaps into\nthose requirement\nso that analysis is the static part when\nyou design your test cases you ensure\nthat all the coverage\nfor that particular requirement is there\nfor that particular\nuser story or the requirement all right\nso that analysis\npart is the static part when you execute\nthe code or when you run the code and\nactually launch the website or actually\nlaunch the whatsapp on ios or android\nand then you know click on it or test or\nfollow different steps that's the\ndynamic part of the software testing\nright\nso this is basically you know what\nexactly software testing that's the\nfirst part it is process it is it\nconsists of static and dynamic\ntesting the second thing is that\nit is um meant to find\nthe defects prior to launching the\napplication right\nbefore you launch any of the you know\napp or application\nto the customer software testing ensures\nthat your testing team is able to find\nthose errors well in advance before you\nactually go into the production right\nnow 100 um defect removal or identifying\nhundred percent defect\nor making sure that your your product is\n100 defect free\nis not possible but yes still software\ntesting ensures that\nmost of the critical scenarios or the\nbasis\nbasic scenarios are still working the\nedge scenarios\nyes there could be possibility it is not\npossible to test hundred percent\nit is possible uh that there will be\nstill some you know production defects\nand that's where that maintenance\ntesting comes into place\nso this is a brief introduction and\ncorrelation of software testing with any\nother testing\ninto the market and with the you know\nany of the application or\napp that you test within the software\nspace so that's all for this tutorial\nhope\ni was able to clarify the question\nwhat is software testing this is the\nfirst and foremost\nquestion if you're going for an\ninterview and our fresher or you know\nlike\nnew graduate you will be asked this\nquestion so you need to\nyou need to know how you can correlate\nit with the real life examples\nand explain to the interviewer along\nwith you know\nlearning the overall software testing\nfrom\nhere on so that's all for this tutorial\nhope you like it\nthank you very much for watching\n",
  "words": [
    "hello",
    "everyone",
    "welcome",
    "software",
    "testing",
    "tutorial",
    "going",
    "understand",
    "software",
    "testing",
    "important",
    "question",
    "go",
    "interview",
    "software",
    "testing",
    "even",
    "trying",
    "learn",
    "software",
    "testing",
    "get",
    "software",
    "testing",
    "job",
    "need",
    "understand",
    "basically",
    "software",
    "testing",
    "learn",
    "concepts",
    "right",
    "first",
    "thing",
    "need",
    "understand",
    "software",
    "testing",
    "watch",
    "video",
    "till",
    "end",
    "miss",
    "key",
    "concepts",
    "going",
    "explain",
    "particular",
    "tutorial",
    "understand",
    "software",
    "testing",
    "let",
    "first",
    "understand",
    "testing",
    "general",
    "sense",
    "say",
    "example",
    "go",
    "market",
    "buy",
    "product",
    "take",
    "back",
    "home",
    "soon",
    "say",
    "example",
    "electronic",
    "appliance",
    "kitchen",
    "appliance",
    "plug",
    "know",
    "work",
    "turn",
    "turns",
    "function",
    "properly",
    "feeling",
    "particular",
    "case",
    "really",
    "annoyed",
    "get",
    "really",
    "annoyed",
    "company",
    "product",
    "uh",
    "know",
    "company",
    "provided",
    "product",
    "question",
    "quality",
    "assurance",
    "quality",
    "criteria",
    "company",
    "product",
    "line",
    "right",
    "companies",
    "ensure",
    "delivering",
    "quality",
    "product",
    "testing",
    "right",
    "matter",
    "whether",
    "buying",
    "car",
    "buying",
    "electronic",
    "appliances",
    "anything",
    "else",
    "always",
    "level",
    "testing",
    "involved",
    "product",
    "goes",
    "market",
    "buy",
    "right",
    "even",
    "know",
    "taking",
    "services",
    "say",
    "example",
    "know",
    "opting",
    "services",
    "also",
    "consider",
    "quality",
    "service",
    "right",
    "customer",
    "services",
    "quality",
    "everywhere",
    "whether",
    "service",
    "product",
    "comes",
    "products",
    "basically",
    "ensured",
    "defined",
    "predefined",
    "process",
    "testing",
    "general",
    "testing",
    "talk",
    "product",
    "know",
    "like",
    "industries",
    "car",
    "manufacturing",
    "electronic",
    "manufacturing",
    "etc",
    "defined",
    "processes",
    "tools",
    "ensure",
    "products",
    "coming",
    "assembly",
    "line",
    "tested",
    "properly",
    "work",
    "properly",
    "know",
    "brought",
    "market",
    "sold",
    "consumers",
    "use",
    "right",
    "correlate",
    "software",
    "test",
    "software",
    "becomes",
    "software",
    "testing",
    "exactly",
    "software",
    "software",
    "application",
    "say",
    "example",
    "website",
    "take",
    "application",
    "uh",
    "complex",
    "functionality",
    "around",
    "know",
    "front",
    "back",
    "web",
    "services",
    "application",
    "fulfills",
    "business",
    "logic",
    "sort",
    "software",
    "know",
    "like",
    "mobile",
    "app",
    "um",
    "application",
    "available",
    "internet",
    "right",
    "sort",
    "applications",
    "known",
    "software",
    "softwares",
    "built",
    "know",
    "using",
    "many",
    "different",
    "programming",
    "languages",
    "example",
    "like",
    "cc",
    "plus",
    "plus",
    "java",
    "n",
    "number",
    "programming",
    "languages",
    "used",
    "mobile",
    "devices",
    "apps",
    "software",
    "testing",
    "softwares",
    "known",
    "software",
    "testing",
    "software",
    "testing",
    "standalone",
    "activity",
    "predefined",
    "process",
    "need",
    "follow",
    "step",
    "step",
    "ensure",
    "particular",
    "product",
    "trying",
    "know",
    "put",
    "market",
    "say",
    "example",
    "app",
    "want",
    "install",
    "want",
    "launch",
    "app",
    "store",
    "prior",
    "launching",
    "app",
    "want",
    "ensure",
    "whatever",
    "functionality",
    "particular",
    "app",
    "needs",
    "provide",
    "customers",
    "works",
    "expected",
    "take",
    "example",
    "app",
    "say",
    "example",
    "whatsapp",
    "okay",
    "widely",
    "used",
    "say",
    "example",
    "building",
    "something",
    "similar",
    "creating",
    "something",
    "similar",
    "whatsapp",
    "coding",
    "done",
    "right",
    "coding",
    "done",
    "features",
    "added",
    "example",
    "able",
    "know",
    "send",
    "text",
    "messages",
    "people",
    "know",
    "add",
    "contact",
    "list",
    "right",
    "add",
    "contact",
    "list",
    "able",
    "call",
    "know",
    "like",
    "features",
    "whatsapp",
    "app",
    "scenario",
    "basically",
    "test",
    "actually",
    "say",
    "yes",
    "functionality",
    "say",
    "functionality",
    "one",
    "functionality",
    "two",
    "uh",
    "know",
    "make",
    "call",
    "right",
    "able",
    "make",
    "call",
    "able",
    "text",
    "person",
    "functionality",
    "three",
    "add",
    "contacts",
    "right",
    "functionality",
    "say",
    "example",
    "add",
    "profile",
    "picture",
    "right",
    "profile",
    "pic",
    "functionalities",
    "particular",
    "app",
    "app",
    "say",
    "example",
    "want",
    "test",
    "website",
    "okay",
    "website",
    "functionalities",
    "website",
    "sorry",
    "handwriting",
    "um",
    "website",
    "say",
    "example",
    "functionality",
    "one",
    "know",
    "add",
    "items",
    "add",
    "items",
    "cart",
    "functionality",
    "remove",
    "items",
    "right",
    "remove",
    "items",
    "want",
    "cart",
    "okay",
    "similarly",
    "know",
    "like",
    "different",
    "example",
    "app",
    "example",
    "website",
    "know",
    "like",
    "know",
    "different",
    "interfaces",
    "integration",
    "tester",
    "follow",
    "defined",
    "process",
    "requirement",
    "functionality",
    "say",
    "example",
    "requirement",
    "come",
    "user",
    "story",
    "following",
    "scrum",
    "methodology",
    "agile",
    "agile",
    "approaches",
    "basically",
    "go",
    "user",
    "stories",
    "analyze",
    "user",
    "stories",
    "write",
    "test",
    "cases",
    "ensure",
    "know",
    "requirements",
    "mentioned",
    "say",
    "example",
    "adding",
    "items",
    "card",
    "write",
    "test",
    "cases",
    "ensure",
    "test",
    "cases",
    "actually",
    "work",
    "expected",
    "right",
    "run",
    "website",
    "launch",
    "website",
    "built",
    "um",
    "run",
    "test",
    "cases",
    "add",
    "items",
    "cart",
    "try",
    "add",
    "items",
    "try",
    "remove",
    "items",
    "card",
    "proceed",
    "say",
    "yes",
    "test",
    "cases",
    "passed",
    "test",
    "cases",
    "failed",
    "functionality",
    "work",
    "defined",
    "requirement",
    "say",
    "failed",
    "right",
    "overall",
    "example",
    "example",
    "um",
    "explain",
    "exactly",
    "software",
    "testing",
    "standalone",
    "activity",
    "know",
    "life",
    "cycle",
    "basically",
    "consists",
    "um",
    "static",
    "approaches",
    "dynamic",
    "approaches",
    "lot",
    "activities",
    "need",
    "involved",
    "say",
    "example",
    "get",
    "requirement",
    "analyze",
    "requirement",
    "testing",
    "team",
    "tester",
    "see",
    "whether",
    "gaps",
    "requirement",
    "analysis",
    "static",
    "part",
    "design",
    "test",
    "cases",
    "ensure",
    "coverage",
    "particular",
    "requirement",
    "particular",
    "user",
    "story",
    "requirement",
    "right",
    "analysis",
    "part",
    "static",
    "part",
    "execute",
    "code",
    "run",
    "code",
    "actually",
    "launch",
    "website",
    "actually",
    "launch",
    "whatsapp",
    "ios",
    "android",
    "know",
    "click",
    "test",
    "follow",
    "different",
    "steps",
    "dynamic",
    "part",
    "software",
    "testing",
    "right",
    "basically",
    "know",
    "exactly",
    "software",
    "testing",
    "first",
    "part",
    "process",
    "consists",
    "static",
    "dynamic",
    "testing",
    "second",
    "thing",
    "um",
    "meant",
    "find",
    "defects",
    "prior",
    "launching",
    "application",
    "right",
    "launch",
    "know",
    "app",
    "application",
    "customer",
    "software",
    "testing",
    "ensures",
    "testing",
    "team",
    "able",
    "find",
    "errors",
    "well",
    "advance",
    "actually",
    "go",
    "production",
    "right",
    "100",
    "um",
    "defect",
    "removal",
    "identifying",
    "hundred",
    "percent",
    "defect",
    "making",
    "sure",
    "product",
    "100",
    "defect",
    "free",
    "possible",
    "yes",
    "still",
    "software",
    "testing",
    "ensures",
    "critical",
    "scenarios",
    "basis",
    "basic",
    "scenarios",
    "still",
    "working",
    "edge",
    "scenarios",
    "yes",
    "could",
    "possibility",
    "possible",
    "test",
    "hundred",
    "percent",
    "possible",
    "uh",
    "still",
    "know",
    "production",
    "defects",
    "maintenance",
    "testing",
    "comes",
    "place",
    "brief",
    "introduction",
    "correlation",
    "software",
    "testing",
    "testing",
    "market",
    "know",
    "application",
    "app",
    "test",
    "within",
    "software",
    "space",
    "tutorial",
    "hope",
    "able",
    "clarify",
    "question",
    "software",
    "testing",
    "first",
    "foremost",
    "question",
    "going",
    "interview",
    "fresher",
    "know",
    "like",
    "new",
    "graduate",
    "asked",
    "question",
    "need",
    "need",
    "know",
    "correlate",
    "real",
    "life",
    "examples",
    "explain",
    "interviewer",
    "along",
    "know",
    "learning",
    "overall",
    "software",
    "testing",
    "tutorial",
    "hope",
    "like",
    "thank",
    "much",
    "watching"
  ],
  "keywords": [
    "software",
    "testing",
    "tutorial",
    "going",
    "understand",
    "question",
    "go",
    "get",
    "need",
    "basically",
    "right",
    "first",
    "explain",
    "particular",
    "say",
    "example",
    "market",
    "product",
    "take",
    "electronic",
    "know",
    "work",
    "properly",
    "company",
    "uh",
    "quality",
    "ensure",
    "whether",
    "services",
    "defined",
    "process",
    "like",
    "test",
    "exactly",
    "application",
    "website",
    "functionality",
    "app",
    "um",
    "different",
    "follow",
    "want",
    "launch",
    "whatsapp",
    "okay",
    "able",
    "add",
    "call",
    "actually",
    "yes",
    "items",
    "cart",
    "remove",
    "requirement",
    "user",
    "approaches",
    "cases",
    "run",
    "static",
    "dynamic",
    "part",
    "defect",
    "possible",
    "still",
    "scenarios"
  ]
}