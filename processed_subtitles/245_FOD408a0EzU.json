{
  "text": "functions are arguably one of the most\nimportant Concepts in the entirety of\nJavaScript you'll use them literally\neverywhere and the one of the core\nbuilding blocks of JavaScript but\nlearning functions can be quite\ndifficult especially if you're just\ngetting started with JavaScript so in\nthis video I'm going to break down\nexactly how functions work what they can\ndo the different ways you can use them\nand why you would even want to use them\nin the first place also this entire\nvideo is based on a similar video that I\nhave in my JavaScript simplified course\nthis course is perfect if you're a\nbeginner JavaScript developer because it\ntakes you from knowing absolutely\nnothing about JavaScript all the way up\nto being an intermediate JavaScript\ndeveloper with things like testing\nsecurity and clean code I highly\nrecommend checking out this course it's\ngoing to be linked down in the\ndescription for you\nforeign welcome back to web dev\nsimplified my name is Kyle and my job is\nto simplify the web for you so you can\nstart building your dream project sooner\nand today we're going to be talking\nabout functions so let's say I have some\ncode that just console logs out the text\nhigh and then I have a bunch of other\ncode somewhere in the middle and then\nfinally somewhere else I'm console\nlogging out hi again you can see my code\nworks fine it says hi says hi again and\nall the code in the middle is running\njust fine if I had some code there to\nrun what happens if I want to change\nthis console log High to say hello well\nI need to change it to hello here okay\nnow we need to change it to hello down\nhere so I had to change my code in two\ndifferent places essentially I know for\na fact that this console log that says\nhello and this one on the bottom are\nalways going to be exactly the same and\nI want them to do the exact same thing\nevery single time I call them but right\nnow they're copied between different\nplaces and every time I change one I\nneed to make sure I update the other one\nthis is the perfect use case for a\nfunction because a function in\nJavaScript all it does is it takes some\ntype of logic so console logging hello\ntoo and it just puts that inside of a\nparticular piece of code that you can\nrun whenever you want and it's always\ngoing to do the same thing every single\ntime so let me show you really quickly\nhow you would create a function to do\nthis little bit of a log so to create a\nfunction you just need to type the\nkeyword function and you'll know you've\ndone this correctly if in your editor\nit'll probably turn a different color in\nmy example it turns blue but it could be\nany color for your particular editor\nthen you need to give your function a\nname so just hit space give it a name\nwe'll call this one say hi now the final\nstep you need to do is you need to close\nthis off with parentheses so you put an\nopen and a closing parenthesis and then\nfinally some open and closing curly\nbraces so what we have here again is we\nhave the keyword function we have a name\nfor a function and then functions can\nactually take arguments and parameters\ninside of them so you can like pass code\nto a function in our case we're not\ndealing with that and that's why our\nparentheses here are completely blank\nand for now that's perfectly okay then\nthe final thing we have is these open\nand closing curly braces everything\nbetween these curly braces is going to\nbe the code that gets executed in your\nfunction so everything we put inside of\nhere all of this gets executed every\ntime we call our say hi function I want\nto do in here is machine a console log\nhi and if I save my code you'll notice\nnothing gets printed on the right hand\nside of my screen but we also have no\nerrors at all so this code is working\nbut it's not doing anything and that's\nbecause by default when you create a\nfunction which is what we've done here\nthe function just stores some code to\nexecute later it doesn't do anything it\ndoesn't run any code it's just saying\nhey I have this function called say hi\nand when you call it I'm going to run\nall the code inside these curly brackets\nbut for now I'm not going to do anything\nuntil you tell me to do something so\nlet's talk about how we actually call a\nfunction to call a function all you do\nis you type out the name of the function\nin our case say Hi and then you again\nuse parentheses so open and close the\nparentheses that's how you tell your\nfunction you want to call it so we're\nsaying call to say hi function and pass\nabsolutely nothing to it because we\ndidn't put anything inside of our\nparentheses here now if I run this you\ncan see it prints out High because\nwhat's happening is it creates our\nfunction right here then later in our\ncode we're calling that function and\nwhen you call the function it just goes\ninto these curly brackets and runs all\nthe code inside of them and that's all\nthat happens if we run this function a\nsecond time you'll see it prints out\nHigh twice and if I changes to hello I\nonly have to change it in one place and\nit updates both of the functions that\nare being called that's again one of the\nhuge benefits for functions because you\ncan take logic and code that you're\nusing all over the place put it in one\nplace and then you can reuse it and\nchange it easily all in one place now up\nuntil this point all we've done is\ncreate a very basic function that\ndoesn't take any arguments and just does\nwhatever we tell it to we can if we want\nmake this have multiple lines so this\ncould say hello\nand buy and now you can see when we\ncalled this it's going to say hello and\nthen it's going to say bye so you can\nhave as many lines of code as you want\nin here as long as they're between these\ncurly braces what happens if you want to\npass code to a function what's in our\ncase try to create a sum function so\nwe're going to say the function and\nwe're going to call it sum we're going\nto do those opening and closing\nparentheses and opening and closing\ncurly brackets but I want to pass some\ncode to our sum function all you need to\ndo is just give it a name whatever you\nwant you could call it anything you want\nin our case we'll call it a and we'll\ncall it B because we want to add the\nnumbers A and B together when you pass\ndifferent variables inside of a function\nlike this you just need to separate them\nby a comma that's all it takes you don't\neven need the space I just put it for\nreadability purposes and now we're\npassing in a variable called a and a\nvariable called B and I just want to log\nout adding those two variables together\nso I'm just going to log out whatever A\nplus b is and you'll notice before I\nadded a plus b these were kind of dark\ngray color in my editor I want to add a\nplus b they become a more bright color\nthat's just my editor telling me that\nbefore I wasn't using these variables\nand now I am using these variables so\nnow to call this function we just type\nsum and we put the opening and closing\nbrackets here opening closing\nparentheses but now we also need to pass\nit a value so let's pass to the values\none and two again separated by a comma\nif I save you can see it logs out 3\nbecause it's just adding 1 and 2 which\nis what I pass into here so when you\nhave parameters and arguments inside of\na function that you can pass between\nthem you'll notice that whatever the\nfirst thing you pass to the function is\nis just defined as this first variable\nhere so that is a you can see if I\nconsole DOT log a\nand I save this you can see it prints\nout one if I change this to console log\nB you can see it prints out too because\nwhatever your second value is here\ncorresponds to the second value here so\nthey directly map to each other one to\none into wherever they're going so\nwhatever you put here gets put into this\nvariable whatever you put here gets put\ninto this variable B here it's almost\nexactly the same thing as if you just\nsaid like const a equals one cons to b\nequals two and then you copy whatever\ncode is inside this function and paste\nit down below that's the exact same\nthing that happens when we run sum 1 and\n2.\nso let's get rid of all that code bring\nit back to what we had here now what\nhappens though if we don't pass a\nvariable for B so I'm just going to\nconsole log A and B so you can see it\nprints out one and two but what happens\nif I don't pass anything for our second\nvalue if I save you notice it prints out\nundefined and it doesn't actually throw\nany errors JavaScript is a bit unique\nwhen it comes to functions and that it\ndoesn't throw any errors if you don't\npass enough arguments it just sets all\nthe arguments you don't pass to\nundefined so if I pass nothing you'll\nthen just both A and B are set to\nundefined because I didn't pass anything\nat all for them so anytime you leave off\nsome variables that you're trying to\npass to your function it'll always just\nset them to undefined so it's really\nimportant to understand now the final\nthing I want to talk about with\nfunctions is how you actually get data\nout of a function because up until this\npoint all we've been doing is logging\nout some information to the screen but\nwe haven't been returning any data to be\nused so instead of just logging out a\nplus b i want to return a plus b so I\ncan use it later and to do that you use\nthe return keyword so you just type in\nthe return keyword if you've done it\ncorrectly it'll turn a color in your\neditor and then you pass whatever you\nwant to return so I could just say here\nsum equals\na plus b and then I can return our sum\ndown here and that's going to work just\nfine or I can have what I had before\nwhich is in line a plus b so now\nwhatever A plus b is is going to be\nreturned from my function so again let's\npass in one and two and when we say if\nyou'll notice nothing's logged out which\nis great but our sum is being printed\nout here so we have our actual sum value\nwhich is right here we'll just call it\nvalue make it a little bit easier to\nread and I can console.log our value and\nnow you'll notice it prints out three so\nwhen you use the return keyword what\nessentially happens is it takes whatever\nthat value is you're returning and it\nputs it inside the variable of that\nfunction so it just comes out of the\nfunction this is really powerful on one\nof the main use cases for a function is\ngetting some other data from that\nfunction it's going to do a bunch of\nstuff and then spit out some data for\nyou so all the time you're going to see\ncode like this where you set a value\nbased on the result of a specific\nfunction another interesting thing about\nthis return keyword is it makes sure no\ncode runs after it so we can just say\nconsole.log\nnever will run and we save you'll notice\nthis never gets printed out it's even\nkind of grayed out inside of my editor\nand that's because every single time\nwhenever you run return the function\nimmediately exits out nothing else\nafterwards is ever going to be run this\nis actually really useful and people\nwill use this to exit out of functions\nearly if there's like an error of some\nform now something really neat that you\nmay have actually picked up on this\nvideo is that console.log is actually a\nfunction on its own we just change this\nback here to high you'll notice that\nthis works just like a normal function\nwe're calling this log function with our\nparentheses and we're passing it a\nspecific value and console.log is really\ncool because that's what it is it's just\na function that takes in some values and\nthere's lots of functions built into\nJavaScript that you've probably already\nused before but this is probably the one\nyou've used the most and you may not\nhave even realized that this itself is a\nspecific function so that's why it's\nreally important in JavaScript to make\nsure you understand the fundamentals of\nwhat is going on because if you do it\nmakes all these magical seeming things\nlike console.log much simpler to\nunderstand because it really is just a\nfunction that's all it is so if you're\ninterested in actually learning those\nbuilding blocks in JavaScript and making\nsure you understand the Core Concepts so\nyou can really truly understand\nJavaScript I highly recommend my\nJavaScript simplified course it's going\nto be linked in the description this\nvideo and it takes you from knowing\nabsolutely nothing about JavaScript all\nthe way to being an intermediate\ndeveloper with skills far past what I\nknew when I landed my first Dev job so\nwith that said thank you very much for\nwatching and have a good day\n",
  "words": [
    "functions",
    "arguably",
    "one",
    "important",
    "concepts",
    "entirety",
    "javascript",
    "use",
    "literally",
    "everywhere",
    "one",
    "core",
    "building",
    "blocks",
    "javascript",
    "learning",
    "functions",
    "quite",
    "difficult",
    "especially",
    "getting",
    "started",
    "javascript",
    "video",
    "going",
    "break",
    "exactly",
    "functions",
    "work",
    "different",
    "ways",
    "use",
    "would",
    "even",
    "want",
    "use",
    "first",
    "place",
    "also",
    "entire",
    "video",
    "based",
    "similar",
    "video",
    "javascript",
    "simplified",
    "course",
    "course",
    "perfect",
    "beginner",
    "javascript",
    "developer",
    "takes",
    "knowing",
    "absolutely",
    "nothing",
    "javascript",
    "way",
    "intermediate",
    "javascript",
    "developer",
    "things",
    "like",
    "testing",
    "security",
    "clean",
    "code",
    "highly",
    "recommend",
    "checking",
    "course",
    "going",
    "linked",
    "description",
    "foreign",
    "welcome",
    "back",
    "web",
    "dev",
    "simplified",
    "name",
    "kyle",
    "job",
    "simplify",
    "web",
    "start",
    "building",
    "dream",
    "project",
    "sooner",
    "today",
    "going",
    "talking",
    "functions",
    "let",
    "say",
    "code",
    "console",
    "logs",
    "text",
    "high",
    "bunch",
    "code",
    "somewhere",
    "middle",
    "finally",
    "somewhere",
    "else",
    "console",
    "logging",
    "hi",
    "see",
    "code",
    "works",
    "fine",
    "says",
    "hi",
    "says",
    "hi",
    "code",
    "middle",
    "running",
    "fine",
    "code",
    "run",
    "happens",
    "want",
    "change",
    "console",
    "log",
    "high",
    "say",
    "hello",
    "well",
    "need",
    "change",
    "hello",
    "okay",
    "need",
    "change",
    "hello",
    "change",
    "code",
    "two",
    "different",
    "places",
    "essentially",
    "know",
    "fact",
    "console",
    "log",
    "says",
    "hello",
    "one",
    "bottom",
    "always",
    "going",
    "exactly",
    "want",
    "exact",
    "thing",
    "every",
    "single",
    "time",
    "call",
    "right",
    "copied",
    "different",
    "places",
    "every",
    "time",
    "change",
    "one",
    "need",
    "make",
    "sure",
    "update",
    "one",
    "perfect",
    "use",
    "case",
    "function",
    "function",
    "javascript",
    "takes",
    "type",
    "logic",
    "console",
    "logging",
    "hello",
    "puts",
    "inside",
    "particular",
    "piece",
    "code",
    "run",
    "whenever",
    "want",
    "always",
    "going",
    "thing",
    "every",
    "single",
    "time",
    "let",
    "show",
    "really",
    "quickly",
    "would",
    "create",
    "function",
    "little",
    "bit",
    "log",
    "create",
    "function",
    "need",
    "type",
    "keyword",
    "function",
    "know",
    "done",
    "correctly",
    "editor",
    "probably",
    "turn",
    "different",
    "color",
    "example",
    "turns",
    "blue",
    "could",
    "color",
    "particular",
    "editor",
    "need",
    "give",
    "function",
    "name",
    "hit",
    "space",
    "give",
    "name",
    "call",
    "one",
    "say",
    "hi",
    "final",
    "step",
    "need",
    "need",
    "close",
    "parentheses",
    "put",
    "open",
    "closing",
    "parenthesis",
    "finally",
    "open",
    "closing",
    "curly",
    "braces",
    "keyword",
    "function",
    "name",
    "function",
    "functions",
    "actually",
    "take",
    "arguments",
    "parameters",
    "inside",
    "like",
    "pass",
    "code",
    "function",
    "case",
    "dealing",
    "parentheses",
    "completely",
    "blank",
    "perfectly",
    "okay",
    "final",
    "thing",
    "open",
    "closing",
    "curly",
    "braces",
    "everything",
    "curly",
    "braces",
    "going",
    "code",
    "gets",
    "executed",
    "function",
    "everything",
    "put",
    "inside",
    "gets",
    "executed",
    "every",
    "time",
    "call",
    "say",
    "hi",
    "function",
    "want",
    "machine",
    "console",
    "log",
    "hi",
    "save",
    "code",
    "notice",
    "nothing",
    "gets",
    "printed",
    "right",
    "hand",
    "side",
    "screen",
    "also",
    "errors",
    "code",
    "working",
    "anything",
    "default",
    "create",
    "function",
    "done",
    "function",
    "stores",
    "code",
    "execute",
    "later",
    "anything",
    "run",
    "code",
    "saying",
    "hey",
    "function",
    "called",
    "say",
    "hi",
    "call",
    "going",
    "run",
    "code",
    "inside",
    "curly",
    "brackets",
    "going",
    "anything",
    "tell",
    "something",
    "let",
    "talk",
    "actually",
    "call",
    "function",
    "call",
    "function",
    "type",
    "name",
    "function",
    "case",
    "say",
    "hi",
    "use",
    "parentheses",
    "open",
    "close",
    "parentheses",
    "tell",
    "function",
    "want",
    "call",
    "saying",
    "call",
    "say",
    "hi",
    "function",
    "pass",
    "absolutely",
    "nothing",
    "put",
    "anything",
    "inside",
    "parentheses",
    "run",
    "see",
    "prints",
    "high",
    "happening",
    "creates",
    "function",
    "right",
    "later",
    "code",
    "calling",
    "function",
    "call",
    "function",
    "goes",
    "curly",
    "brackets",
    "runs",
    "code",
    "inside",
    "happens",
    "run",
    "function",
    "second",
    "time",
    "see",
    "prints",
    "high",
    "twice",
    "changes",
    "hello",
    "change",
    "one",
    "place",
    "updates",
    "functions",
    "called",
    "one",
    "huge",
    "benefits",
    "functions",
    "take",
    "logic",
    "code",
    "using",
    "place",
    "put",
    "one",
    "place",
    "reuse",
    "change",
    "easily",
    "one",
    "place",
    "point",
    "done",
    "create",
    "basic",
    "function",
    "take",
    "arguments",
    "whatever",
    "tell",
    "want",
    "make",
    "multiple",
    "lines",
    "could",
    "say",
    "hello",
    "buy",
    "see",
    "called",
    "going",
    "say",
    "hello",
    "going",
    "say",
    "bye",
    "many",
    "lines",
    "code",
    "want",
    "long",
    "curly",
    "braces",
    "happens",
    "want",
    "pass",
    "code",
    "function",
    "case",
    "try",
    "create",
    "sum",
    "function",
    "going",
    "say",
    "function",
    "going",
    "call",
    "sum",
    "going",
    "opening",
    "closing",
    "parentheses",
    "opening",
    "closing",
    "curly",
    "brackets",
    "want",
    "pass",
    "code",
    "sum",
    "function",
    "need",
    "give",
    "name",
    "whatever",
    "want",
    "could",
    "call",
    "anything",
    "want",
    "case",
    "call",
    "call",
    "b",
    "want",
    "add",
    "numbers",
    "b",
    "together",
    "pass",
    "different",
    "variables",
    "inside",
    "function",
    "like",
    "need",
    "separate",
    "comma",
    "takes",
    "even",
    "need",
    "space",
    "put",
    "readability",
    "purposes",
    "passing",
    "variable",
    "called",
    "variable",
    "called",
    "b",
    "want",
    "log",
    "adding",
    "two",
    "variables",
    "together",
    "going",
    "log",
    "whatever",
    "plus",
    "b",
    "notice",
    "added",
    "plus",
    "b",
    "kind",
    "dark",
    "gray",
    "color",
    "editor",
    "want",
    "add",
    "plus",
    "b",
    "become",
    "bright",
    "color",
    "editor",
    "telling",
    "using",
    "variables",
    "using",
    "variables",
    "call",
    "function",
    "type",
    "sum",
    "put",
    "opening",
    "closing",
    "brackets",
    "opening",
    "closing",
    "parentheses",
    "also",
    "need",
    "pass",
    "value",
    "let",
    "pass",
    "values",
    "one",
    "two",
    "separated",
    "comma",
    "save",
    "see",
    "logs",
    "3",
    "adding",
    "1",
    "2",
    "pass",
    "parameters",
    "arguments",
    "inside",
    "function",
    "pass",
    "notice",
    "whatever",
    "first",
    "thing",
    "pass",
    "function",
    "defined",
    "first",
    "variable",
    "see",
    "console",
    "dot",
    "log",
    "save",
    "see",
    "prints",
    "one",
    "change",
    "console",
    "log",
    "b",
    "see",
    "prints",
    "whatever",
    "second",
    "value",
    "corresponds",
    "second",
    "value",
    "directly",
    "map",
    "one",
    "one",
    "wherever",
    "going",
    "whatever",
    "put",
    "gets",
    "put",
    "variable",
    "whatever",
    "put",
    "gets",
    "put",
    "variable",
    "b",
    "almost",
    "exactly",
    "thing",
    "said",
    "like",
    "const",
    "equals",
    "one",
    "cons",
    "b",
    "equals",
    "two",
    "copy",
    "whatever",
    "code",
    "inside",
    "function",
    "paste",
    "exact",
    "thing",
    "happens",
    "run",
    "sum",
    "1",
    "let",
    "get",
    "rid",
    "code",
    "bring",
    "back",
    "happens",
    "though",
    "pass",
    "variable",
    "b",
    "going",
    "console",
    "log",
    "b",
    "see",
    "prints",
    "one",
    "two",
    "happens",
    "pass",
    "anything",
    "second",
    "value",
    "save",
    "notice",
    "prints",
    "undefined",
    "actually",
    "throw",
    "errors",
    "javascript",
    "bit",
    "unique",
    "comes",
    "functions",
    "throw",
    "errors",
    "pass",
    "enough",
    "arguments",
    "sets",
    "arguments",
    "pass",
    "undefined",
    "pass",
    "nothing",
    "b",
    "set",
    "undefined",
    "pass",
    "anything",
    "anytime",
    "leave",
    "variables",
    "trying",
    "pass",
    "function",
    "always",
    "set",
    "undefined",
    "really",
    "important",
    "understand",
    "final",
    "thing",
    "want",
    "talk",
    "functions",
    "actually",
    "get",
    "data",
    "function",
    "point",
    "logging",
    "information",
    "screen",
    "returning",
    "data",
    "used",
    "instead",
    "logging",
    "plus",
    "b",
    "want",
    "return",
    "plus",
    "b",
    "use",
    "later",
    "use",
    "return",
    "keyword",
    "type",
    "return",
    "keyword",
    "done",
    "correctly",
    "turn",
    "color",
    "editor",
    "pass",
    "whatever",
    "want",
    "return",
    "could",
    "say",
    "sum",
    "equals",
    "plus",
    "b",
    "return",
    "sum",
    "going",
    "work",
    "fine",
    "line",
    "plus",
    "b",
    "whatever",
    "plus",
    "b",
    "going",
    "returned",
    "function",
    "let",
    "pass",
    "one",
    "two",
    "say",
    "notice",
    "nothing",
    "logged",
    "great",
    "sum",
    "printed",
    "actual",
    "sum",
    "value",
    "right",
    "call",
    "value",
    "make",
    "little",
    "bit",
    "easier",
    "read",
    "value",
    "notice",
    "prints",
    "three",
    "use",
    "return",
    "keyword",
    "essentially",
    "happens",
    "takes",
    "whatever",
    "value",
    "returning",
    "puts",
    "inside",
    "variable",
    "function",
    "comes",
    "function",
    "really",
    "powerful",
    "one",
    "main",
    "use",
    "cases",
    "function",
    "getting",
    "data",
    "function",
    "going",
    "bunch",
    "stuff",
    "spit",
    "data",
    "time",
    "going",
    "see",
    "code",
    "like",
    "set",
    "value",
    "based",
    "result",
    "specific",
    "function",
    "another",
    "interesting",
    "thing",
    "return",
    "keyword",
    "makes",
    "sure",
    "code",
    "runs",
    "say",
    "never",
    "run",
    "save",
    "notice",
    "never",
    "gets",
    "printed",
    "even",
    "kind",
    "grayed",
    "inside",
    "editor",
    "every",
    "single",
    "time",
    "whenever",
    "run",
    "return",
    "function",
    "immediately",
    "exits",
    "nothing",
    "else",
    "afterwards",
    "ever",
    "going",
    "run",
    "actually",
    "really",
    "useful",
    "people",
    "use",
    "exit",
    "functions",
    "early",
    "like",
    "error",
    "form",
    "something",
    "really",
    "neat",
    "may",
    "actually",
    "picked",
    "video",
    "actually",
    "function",
    "change",
    "back",
    "high",
    "notice",
    "works",
    "like",
    "normal",
    "function",
    "calling",
    "log",
    "function",
    "parentheses",
    "passing",
    "specific",
    "value",
    "really",
    "cool",
    "function",
    "takes",
    "values",
    "lots",
    "functions",
    "built",
    "javascript",
    "probably",
    "already",
    "used",
    "probably",
    "one",
    "used",
    "may",
    "even",
    "realized",
    "specific",
    "function",
    "really",
    "important",
    "javascript",
    "make",
    "sure",
    "understand",
    "fundamentals",
    "going",
    "makes",
    "magical",
    "seeming",
    "things",
    "like",
    "much",
    "simpler",
    "understand",
    "really",
    "function",
    "interested",
    "actually",
    "learning",
    "building",
    "blocks",
    "javascript",
    "making",
    "sure",
    "understand",
    "core",
    "concepts",
    "really",
    "truly",
    "understand",
    "javascript",
    "highly",
    "recommend",
    "javascript",
    "simplified",
    "course",
    "going",
    "linked",
    "description",
    "video",
    "takes",
    "knowing",
    "absolutely",
    "nothing",
    "javascript",
    "way",
    "intermediate",
    "developer",
    "skills",
    "far",
    "past",
    "knew",
    "landed",
    "first",
    "dev",
    "job",
    "said",
    "thank",
    "much",
    "watching",
    "good",
    "day"
  ],
  "keywords": [
    "functions",
    "one",
    "javascript",
    "use",
    "video",
    "going",
    "different",
    "even",
    "want",
    "first",
    "place",
    "course",
    "takes",
    "nothing",
    "like",
    "code",
    "name",
    "let",
    "say",
    "console",
    "high",
    "logging",
    "hi",
    "see",
    "run",
    "happens",
    "change",
    "log",
    "hello",
    "need",
    "two",
    "thing",
    "every",
    "time",
    "call",
    "right",
    "make",
    "sure",
    "case",
    "function",
    "type",
    "inside",
    "really",
    "create",
    "keyword",
    "done",
    "editor",
    "color",
    "could",
    "parentheses",
    "put",
    "open",
    "closing",
    "curly",
    "braces",
    "actually",
    "arguments",
    "pass",
    "gets",
    "save",
    "notice",
    "anything",
    "called",
    "brackets",
    "prints",
    "second",
    "whatever",
    "sum",
    "opening",
    "b",
    "variables",
    "variable",
    "plus",
    "value",
    "undefined",
    "understand",
    "data",
    "return"
  ]
}