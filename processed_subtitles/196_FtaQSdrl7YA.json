{
  "text": "congrats on deciding to learn JavaScript\nthis crash course is actually a very\nsmall part of the software development\nmini boot Cam that I teach where you\nlearn every part of the software\ndevelopment life cycle to become a\nsoftware engineer or understand the\nentire concept and then go and pursue a\ncareer in Cloud engineering or devops\nengineering Etc but in this video we'll\ndive into JavaScript and really\nunderstand not only the syntax and the\nbasics but also the important and very\ninteresting Concepts behind JavaScript\nwe will start by looking at the big\npicture first so we can understand where\nJavaScript fits in exactly when thinking\nabout website programming and then we'll\njump into the demo and program with\nJavaScript so let's get started right\naway imagine the following scenario you\nwake up in the morning get your coffee\nopen your laptop and open Facebook in\nyour browser so let's pause there what\nhappened when you typed in Facebook in\nyour browser and you saw a fresh new\nfeed with all the new stuff that has\nhappened while you were asleep what\nhappened there in the background\ntechnologically so Facebook is an\napplication that some developers sitting\nmostly in California are developing and\nthese guys and girls are writing a bunch\nof code and all that code that makes up\nFacebook lives in California so what\nhappens when you open Facebook on your\nlaptop is that part of that code that\nlives in California travels all the way\nto your laptop to your location and ends\nup temporarily living on your laptop\nthat's why sometimes when you refresh\nand see a blank page or loading and you\nbecome annoyed because you can't see\nyour feed within 3 seconds that's when\nall the data is coming or traveling from\nsomewhere to your laptop so it may need\nsome time so how does that travel there\nare internet cables everywhere in the\nworld actual physical cables that let\nelectricity travel through from one\nplace in the world to another that's how\neverything is connected everywhere and\nthat's why in some remote places in\nAfrica or Asia or just remote Villages\nanywhere in the world where there is no\ninternet and you're wondering like wow\nhow is this possible no internet that's\nsuper crazy but that's pretty simple\nactually because nobody built those\ninternet cables near those areas and\nregions because of economic reasons and\nso on now if you think about it it would\nbe super inefficient if every time\nsomeone in Europe open Facebook and all\nthe data needed to travel to these\nplaces all the way from California so\nFacebook has built locations evenly\ndistributed all around the world that\nstore part of the code and data that\ndoesn't change much so it can get to you\nmuch faster so back to that part of code\nthat just traveled to you that's HTML\nCSS and JavaScript so what are these\nwhen you see a website that just looks\nugly so we just text no fun colors no\nstyling that's a naked HTML it's\nnecessary but no one wants to see some\nplain ugly text without any styling so\nwhat makes the text pretty and it colors\nand some fun to it is CSS it's like\nflash on a skeleton now you have a flash\nthat looks good but it doesn't do\nanything it doesn't move it doesn't talk\ndoesn't respond you can interact with it\nand it's the same way with HTML plus CSS\npage typical use cases are visit card\nwebsites where you can read texts\ndisplayed in nice style but you can't\nleave a comment you can send a message\nyou can do anything with the website so\nall that action comes purely from\nJavaScript so you want to upload a photo\non Facebook that's JavaScript you want\nto send a message through a messenger\nthat's JavaScript you want to like your\nfriend's picture or leave a comment all\nJavaScript so everything that you\ninteract with in the UI which stands for\nuser interface is through JavaScript and\nthe combination of these three HTML CSS\nand JavaScript is called front end it's\nthe Facebook code that everyone sees so\nit's in the front and as I said all\nthese three files leave on your laptop\nwhen you open Facebook so you can see\nand even edit them so I could go and\nchange Facebook style like this and this\nwon't affect anyone else in the world\nsince everyone has their own copy of\nthese files on their laptops but there\nis another part of the code that doesn't\ntravel to you the beckon code that is in\nthe back and no one can see so you may\nbe now wondering if I can do anything in\nfront end like upload images message\nsomeone leave a comment like what's the\nbackend for what does it do well when\nyou upload a picture on Facebook you\nsurely want your friends to see that too\nor when you message someone you want to\nkeep a history of these messages that\nmeans you want all this data to persist\nor in other words the data to be saved\nover time now if JavaScript only leaves\non your laptop it wouldn't make sense to\njust have that photo only locally on\nyour computer that's where the beon\ncomes in so what happens is that\nJavaScript takes that image that you\nuploaded puts it in an envelope and\nhands it over to internet saying hey can\nyou deliver this to backand at this\nspecific location so now we can follow\nthis delivery all the way to the backend\nand see what happens there or what what\ndoes backend do when it gets that image\nnow Beck in code can be written in Java\npython PHP or even JavaScript so there\nare different technologies that you can\nuse to write all that backend part of\nthe code so let's say in our example\nit's Java so what does Java do it checks\nand examines the photo it sees is it a\nvalid delivery there's no threat no\ndanger I know the sender I trust it so\nI'll open the envelope see everything is\nfine and hands it over to database to\nsave it for lat\nso database is like a warehouse it's a\nbig space where you can keep all the\nimages messages likes comments that\ndifferent users are producing it's all\nin there so to have a more specific\nunderstanding let's actually see how the\nlocation where beckon code and database\nleave quote unquote actually look like\nso as I mentioned before Facebook has\nall these buildings distributed all\naround the world actual physical build\nbuildings with servers inside and I\ndon't know what you imagine when you\nthink about servers but whatever it is\nit's probably not very close to reality\nso let me show an example of a server\nbuilding of a typical big company like\nFacebook so it's a location where\nmachines uh that're interconnected with\neach other are running 24/7 in order to\nmake sure that Facebook or this\napplication is available for everybody\nin the world all the time\nand that's where Beck and code and\ndatabase actually leave so that's where\nall the magic happens so when the\nenvelope gets delivered to your backend\nthat's where it ends up so the address\nthat it's sent to is one of those\nmachines in among these hundreds or\nthousands of machines that will take\nyour image validate and then save it\ninto a database so it happens all inside\nthere so now consider your friend logs\ninto Facebook on her computer same way\nfront and code travels to her laptop\nalong with new data like images messages\nfrom friends Etc all coming from these\nservers so how does Facebook know what\ndata you should see on your news feed\nnow in the database Warehouse Facebook\ncreates isolated spaces for each user\nwith their personal data images Etc and\nobviously on Facebook you want to have\nsome privacy meaning you want only your\nfriends to see your posts so Facebook\ncreates Connections in the database\nbetween users that are friends and\nthat's how Facebook decides what\ninformation to send to a user when they\nlog into the application along with new\ndata like images and messages from\nfriends including the image that you\njust uploaded all coming from these\nservers so to summarize a web\napplication is always made up of three\ncomponents\nyou have a front-end code backend and\ndatabase front end is what you see and\ninteract with in your browser in the\nuser interface of the application\nbackend is the code that waits for new\nmessages from Front End about the\nchanges you make like new uploads new\nmessages likes and handles them and\ndatabase is where all these changes are\nstored for future usage like when you\ncome back the next day to use the\napplication or when your friend ens the\napplication most of the applications are\nwritten by teams of developers and not\njust a single developer and there are a\nlot of developers that are full stick\nmeaning they know all three they can\nwork with front end backend and database\nhowever each of these three areas alone\nis its own it field so some developers\nactually choose to specialize in just\none area and become for example a\nfrontend developer so in big companies\nlike Facebook you would have teams with\nspecialized frontend developers backend\ndevelopers and database developers and\nthese things like front-end backend\ndatabase and virtual servers you\nactually learn all these in our software\nengineering mini boot camp so if you're\na complete beginner in this field and\nhave no it knowledge and feel\noverwhelmed by all these Concepts and\ncomponents and don't know where to start\nthen this mini boot camp is going to be\nexactly for you so make sure to check\nout the link to the course in the video\ndescription so now that you know the\nbasics of how the websites are built and\ngenerally how the web Works let's start\nby learning programming Basics with\nJavaScript so let's see what JavaScript\nis and how it's used all modern web\napplications which are applications that\nare used through internet browser are\nall written using JavaScript because it\nhas become the standard in developing\nweb applications the way these web\napplications are built is that you have\na layer of HTML which gets styled and\nmade more beautiful by CSS in order to\nmake this beautiful surface also called\nuser interface smarter and more\nintelligent we use JavaScript to write\nlogic to create features examples of\nsuch features are user registration\nbooking a ticket online shopping sharing\nphotos writing messages Etc so when\nthinking about how websites are built\none can separate the design layer and\nlogic layer and in big complex\napplications used by millions of users\neach part becomes big enough on its own\nso as a result you also have website\ndesigners also called UI designers and\nJavaScript developers as separate jobs\nmaybe you've heard of programming\nlanguages like Java python C Etc in one\nsentence all these are backend\nprogramming languages and JavaScript is\na frontend programming language in fact\nJavaScript is currently the only\nprogramming language you can use to\nwrite front and code now to make all\nthese more tangible let's see how HTML\nCSS and JavaScript code actually looks\nlike HTML CSS and JavaScript are simple\nfiles that you write in a text editor\nand these files have texts and keywords\nin them which have specific meanings to\nthe browser in other words browser will\nknow exactly what to do with these\nkeywords so the question is when you\ncreate file with JavaScript keywords\ninside how does browser know that it's\nJavaScript and not some other text it\nknows because you tell it explicitly\nusing the file extension the typical\nsimple file will have a text extension\ntxt for example but when you create file\ncalled for example\napp.js browser knows it must interpret\nall the contents of the file as\nJavaScript code and it works exactly the\nsame with HTML and CSS to note here\nbrowsers are also written by developers\nusing some code so this functionality to\ninterpret HTML CSS and JavaScript was\nexplicitly programmed and made part of\nall modern browsers it's important to\nmention here that learning HTML and CSS\nis pretty easy since there are just a\nhandful of Concepts you need to\nunderstand and learn they don't change\nmuch over time and they're also less\nlogical so it's more learning syntax by\nheart to use them JavaScript on the\nother hand is very Dynamic and much more\npowerful since you write almost all the\nlogic with it so JavaScript changes a\nlot and improves continuously to make\nwriting all these logic easier and more\nstructured so obviously when you look at\nat a simple web application Logic for\nsimple payment or uploading a picture or\nwriting a message can be straightforward\nand easy but think of the complex\nwebsites use daily that have hundreds of\nfunctionalities so that's a lot of\nJavaScript code that developers have to\nmanage and work with and that can be\nvery challenging because of that over\ntime many developers or teams of\ndevelopers that use JavaScript came up\nwith different ways to improve it and\nmake it easier and better and they did\nit in parallel independent of each other\nor also based on each other's ideas and\nas a result different JavaScript quote\nunquote flavors or as we call them\nFrameworks emerged so framework is\nbasically an improved version of pure\nvanilla JavaScript which offers its own\nadditional Concepts and syntax on top of\nJavaScript Concepts and syntax that\nmakes writing complex JavaScript code\neasier and most of these Frameworks help\nyou pretty much do the same but the\ndifference between them is in how they\nhelp you write the code structure it and\nmanage it and naturally when other\ndevelopers tried all these different\nFrameworks a handful of the best of\nthese Frameworks became widely accepted\nand some of the most popular are reactjs\nangularjs and vuejs so both pure\nJavaScript and JavaScript Frameworks are\ncontinuously developing and improving in\nparallel now to mention here nodejs\nwhich is also a JavaScript framework is\ndifferent from all the others because\nit's meant not for frontend code but for\nbackand code so it's an alternative to\nJava python C Etc this means that if you\nlearn JavaScript you will be able to\nbasically program the whole web\napplication from front end to backend\nusing just JavaScript which could be a\none incentive to learn JavaScript this\nmeans that in order to learn any of\nthese Frameworks that I just mentioned\nyou first need to understand basic\nJavaScript Concepts and syntax because\nall of these Frameworks are based on\nJavaScript and once you've learned basic\nconcepts of JavaScript then you can go\nahead and choose one of these Frameworks\nto learn and it will be much easier for\nyou to learn Concepts and syntax of that\nframework on top of JavaScript and in\nour software engineering course we learn\nJavaScript in depth and then we learn\nvue.js framework specifically and how to\nbuild applications with it plus in the\ncourse I point out exactly and compare\nthe advantages of using a framework\ncompared to vanilla JavaScript to build\nfront-end applications so in the next\nsections we're going to cover the basic\nconcepts and syntax of JavaScript so\nthat you have a foundation to learn any\nJavaScript framework so let's start by\nlearning the basic building blocks of\nJavaScript which are the data types and\nvariables and we will look at\njavascript's five main data types and\nthen I'll show you what variables are\nand why we need them know that these two\nbuilding blocks are the same for\nwhatever programming language you learn\nso if I was doing a Java tutorial the\nconcepts would be the same the\ndifference is in the syntax and this is\na good thing because unlike learning\nnatural languages when you learn one\nprogramming language it will be much\neasier to learn another one so with that\nsaid let's Dive Right In now the\nsimplest way to start writing JavaScript\nis directly into the browser since all\nmodern browsers are able to interpret\nJavaScript and come packaged with\nso-called developer tools so open either\nFirefox or Chrome browser on your laptop\nif you don't have these browsers\ninstalled I suggest you install them\nbecause using browsers like Internet\nExplorer to run and execute JavaScript\nis not a good idea so I would download\neither Firefox or Chrome and in your\nbrowser right click somewhere on the\nsurface and select inspect if your\nbrowser is in your native language then\nit would be called something else but it\nshould translate to inspect and when you\nclick that you see something like\nthis and this space right here is called\ndeveloper tools and here you should see\na console Tab and when you click on it\nyou get this space where you can write\nJavaScript directly in the next section\nI will show you all the different places\nwhere you can write and execute\nJavaScript and which one you will\nusually use as a developer but in this\npart we're going to use the browser\nconsole so that I can demonstrate some\nsimple examples so the first data type\nthat we're going to talk about is\nnumbers obviously when you're writing an\napplication you need numbers some of the\nexamples are uh YouTube displays number\nof subscribers for each Channel or\nnumber of likes for each video or how\nmany videos one has when you search\nsomething on web application like Google\nfor example you usually see total heits\nuh Etc so these are all use cases where\nyou need numbers and these examples use\nwhole numbers but for example when you\nhave an online shop where you need to\ndisplay prices prices obviously won't be\nwhole numbers always but rather decimal\nnumbers with send de ision also Amazon\nratings right they can be 4.5 for\nexample and in JavaScript there are own\ndata types for whole numbers and for\ndecimal numbers the whole number data\ntype is called integer and these are\nnumbers like 0 300 minus 45 so positive\nnegative numbers they're all integers\nand decimal numbers have a data type of\ndecimal and again they're positive or\nnegative or zero so\n0.0 um\n90\n777 minus\n50.5 they're all decimals the second\ndata type is string the way I like to\nexplain what string is is basically\neverything you see on your keyboard so\nobviously all the letters no matter what\nlanguage they're in but also all the\nspecial characters like M percent plus\nminus and also the space character on\nyour keyboard you also have numbers and\nnumbers are characters or strings also\nso how does JavaScript know whether you\nmean a number like integer or decimal\nlike five for example or a character\nfive it knows it using quotes So you\ntell JavaScript that you're using string\nby using quotes it could be single\nquotes or double quotes So this single\ncharacters or any combination of them is\na string so let's say a couple of\nexamples so three in quotes is a string\na o with umls letters from\nnon-english alphabets combination of\nletters and numbers special characters\nlike in email or in password and also an\nempty space character is also a string\nso just to mention here so difference\nbetween character and string so\ncharacter is basically just one letter\nor one number one special character and\nstring is a character or a combination\nof multiple characters so these are all\nstrings and this single keys are\ncharacters another data type in\nprogramming languages is Boolean now to\nunderstand this let's say you enter\nwrong password when logging into your\napplication usually you get a message\nsaying you provided a wrong password or\nyou accidentally enter wrong credit card\nnumber uh when buying tickets um or\ninvalid email address when registering\nso in the background developers write\nJavaScript code that validates whether\nthe information that you provided is\nwrong or right or correct and to express\nthat wrong or correct state booleans are\nused so word true expresses correct\nState and false expresses wrong state so\nagain just like with numbers you can\nwrite a simple string false with quotes\nand JavaScript know that you mean a\nstring without quotes it will be a\nBoolean expression false that's how\nJavaScript can differentiate between\nthose two in addition to that true false\ncan also be used for simple yes no\nsituations like is the apartment on\nAirbnb available to book on this date\nyes no that will be true or false in\nBoolean terms or is user logged in\ndepending depending on whether logged in\nor not you will see different web page\nthat's a Boolean expression is it a\npremium user true false also bulling\nexpression Etc another data type is\narray that expresses lists think of\napplications that display lists of the\nsame kind of data like list of friends\non Facebook or list of apartments on\nAirbnb or list of comments for your\nInstagram picture lists have their own\ndata types in all programming languages\nin JavaScript its data type is an array\nfor example list of friends names will\nlook like this it will be an\narray that's an array that includes\nmultiple names and now the syntax of the\narray that encloses square brackets so\nthat's how JavaScript knows or can\ninterpret that it's dealing with an\narray or you could also have a list of\nratings for Amazon products for\nexample so this will be an array with\nnumbers as you see array contains other\ndata types so here we have uh list of\nstrings and here we have numbers and in\nJavaScript you can mix different data\ntypes inside an array here we have\nintegers and decimals in one array you\ncan also write an array like this where\nyou have string in integer and Boolean\nexpression and the last data type in\nJavaScript is an object now in the\nAmazon review for example you don't just\nsee a list of ratings you also see the\nauthor's name next to the rating and\ntext they wrote In addition so you need\nall this information grouped in one item\nin the array you express that using\nobject data type so a single rating\nobject will look like this and not the\nsyntax of curly braces\nso as we saw array was expressed using\nsquare brackets and object is written\nusing curly braces so that syntax is\nimportant so that JavaScript understands\nwhat data type you're writing another\nexample is an apartment object on Airbnb\nwhich will include all the attributes it\nhas like location price ratings\ndescription availability images Etc so\nan object for that information will look\nsomething like this just with more\ninformation inside and here you see that\nthe syntax highlighting of the browser\nis also helping to see that strings\nbooleans and numbers are colored uh in\ndifferent way meaning that JavaScript\nunderstands the difference between\nthem so as you see object has key value\npairs so that you know which value\nstands for what so all these author name\nuser are 12 rating five these are key\nvalue pairs where the key basically\ndescribes what the value stands for and\nthe name of that key is totally up to\nyou you decide what that's going to be\nalso you can use any data type as a\nvalue inside of an object so here we\nhave a string integer Boolean and array\nas a value and you can also use another\nobject as a value inside of an object\nand finally uh if go back to the ratings\nyou will have multiple rating objects so\na list of rating objects so the final\nlist of these rating objects will look\nlike this so you will be an array with\nsquare brackets and it will have bunch\nof objects that are comma separated now\nthis is probably the most complex\nstructure you will deal with most of the\ntime so it shouldn't get much more\ncomplex than\nthis\nnow we saw all these data type example\nvalues but how do you use them to write\na so-called logic in JavaScript the\nsimplest use case is some basic addition\nsubtraction etc for numbers you can use\nSimple arithmetic from elementary school\nto calculate basic things and here I\nwill use the chance to break this common\nmisconception that you have to be super\ngood at math to learn programming which\nis completely 100% wrong I was a\nsoftware engineer for many years and\nworked in a lot of different projects\nand I have barely used anything more\nadvanced than simple arithmetics like\nplus minus multiply and divide when\nwriting web applications so in\nJavaScript you can do all of\nthis you can do subtraction\nmultiply\ndivide and you can also combine them\njust like you would with a calculator\nand of course you can do the same with\ndesk decimals some real life use cases\nfor these basic arithmetics are for\nexample when you add multiple items to\nyour shopping card on Amazon you see the\nsum and you also see the price breakdown\nwhich is item prices plus shipment costs\nor when you have product ratings based\non all the individual ratings you\ndisplay the average rating or on Uber\nfor example you see the distance from\npickup locations to the destination in\nkilometers or miles and in minutes\nall of these are simple\ncalculations which are possible in\nJavaScript now obviously all these\noperators are meant for numbers but\nthere is a case where we can use the\nplus operator for string data types so\nwhat will happen if I write string 12 +\nstring 12 so we get\n1,212 so what happened here is that\nJavaScript knows that these two are are\nstrings and not numbers and instead of\nadding them it handles them as strings\nby gluing them to each other and in\nprogramming that's called string\nconcatenation and no you don't have to\nremember that word just so you know that\nthere are weird names for simple things\nin programming the same way you can glue\na string to any other data type so you\ncan do blah to 12 and the number will\nalso turn into a string so to say or you\ncan do the same with Boolean\nvalues because JavaScript interprets\nthat as you want to create another\nstring out of these two\nvalues and this examples probably don't\nmake much sense but in the next section\nof this video I will show you some more\nreal life examples why this concept is\nactually very\nimportant now let's understand one of\nthe most important building blocks of\nany programming language variables and\nlet's see what variables are to\nunderstand the concept of variables\nthink about the following scenario you\nchange your username on Facebook so\nobviously your changed username is\ndisplayed on your profile but also all\nthe comments that you wrote before the\nname change should now appear with your\nnew username and also in all your\nfriends lists your new username will\nappear all right so this means if you\nhad Facebook code where your username is\nwritten in all those different places so\nyou have your username in the profile\nsection you have your username in\ncomment one comment 2 Etc and in all\nyour friends lists right written\ndirectly as is or let's consider another\nexample think about online shop each\nproduct has a price and it's displayed\nin a list in the products own detail\npage and maybe also in combination to\nother products so if the store now\noffers a discount and the price changes\nobviously the price should be updated in\neach location where it's displayed so\nagain in code it will look something\nlike this obviously this is not a valid\nJavaScript code but just to give you an\nidea so somewhere in one Javascript file\nyou have the list of products where the\nproduct price is directly written as is\nand you'll have the same in\ndetail page section of the product and\ncombination now when the username on\nproduct\nchanges in those two scenarios all these\nvariables need to be overwritten which\nmeans that you will have to go and\nchange the price here and here and here\nand same with the username change it in\nall places where it's used now that\nwould be absolutely inconvenient\nconsidering applications are so Dynamic\nand things change a lot\nso that's where variables come in so\ninstead of writing the actual value in\n10 different places you write the value\nonce and then reference it 10 times from\n10 different places and that reference\nto the actual value is called a variable\nand you give variables a name that makes\nsense for that value so for example\nproduct a price equals 50 so now you\ncreate a reference for the value 50\nwhich is called Product a price or\nusername equals app user a so you take\nthe actual value which is string and\ncreate a reference to it but in addition\nto that you should also let JavaScript\nknow explicitly that this random name\nthat you just came up with is a variable\nand you do that using VAR\nkeyword like this and remember keywords\nare words that have special meaning to\nJavaScript and because of that if you\nnoticed the coloring or the highlighting\nof the word changed once I added VAR in\nfront of it so now JavaScript knows that\nthis is a variable keyword and this is\nthe name of that reference or variable\nor the same with product a price\nvariable and in code it will now look\nlike this so first you'll create that\nreference somewhere like this and then\nin all the locations or all the places\nin JavaScript code where you need that\nvalue that actual number value you use\nthe reference instead of the actual\nvalue so you have your text and the\nreference to the number in all those\ndifferent locations and here note the\nplus operator that I showed you earlier\nthis is an example of string cenation\nmeaning string is glued to another value\nand this this is where this concept is\nvery useful so when you run or execute\nthis line what happens is that\nJavaScript in the background replaces\nthis reference with the actual value so\nwhen I execute this I see product a\nprice 50 and this is a real example\nwhere plus operator with strings is\nactually very important and you will use\nthis a lot because you will use\nvariables a lot in order to make this\nvariable concept stick more let's\nconsider two additional use cases first\nconsider multilanguage applications on\nmost applications you can select a\npreferred language and see all your\nnavigation buttons Etc in your language\nnow if application supports 10 languages\nobviously developers don't create 10\ndifferent websites instead the same text\nis translated in 10 different languages\nand reference using variables and\ndepending on which language which the\nuser selects the correct reference is\nused and the Second Use case which is\nvery important is user input so when you\nsign up for a web application you need\nto enter your name last name email\npassword these are all user inputs so\nwhat you input in the application as a\ndeveloper when you when you prepare that\ncode for future usage you don't know\nwhat these values are going to be\nbecause users can enter anything but\nwhat you know is the name of the\nvariables that will reference these\nvalues and this way you can use the\nactual values without even knowing what\nthey\nare now the question is when we create\nJavaScript files and write lots of\nJavaScript logic inside how do we run\nthis logic in browser how do we give\nthat JavaScript code to the browser to\nexecute it there are three ways to\nexecute your JavaScript code the\nsimplest way to start writing JavaScript\nis directly into the\nbrowser this is a place where you can\nwrite JavaScript directly and the\nbrowser will interpret and execute your\nJavaScript code right here so you don't\nhave to set up anything and this is the\neasiest way to start especially if you\nwant to try out some simple commands so\nlet's actually write some JavaScript\ncode there so you can create variables\nhere or you can do some\ncalculations and you can\nat number one and number two Etc so you\ncan do many things here however if I\nrefresh the page of course all the code\nwill be gone and also you can execute\nonly one command at a time and usually\nwhen you're developing you want to save\nthat code and execute the whole thing at\nonce and not have it disappear every\ntime you refresh the browser so for that\nyou need to write JavaScript in a file\nand then give that file to browser in\norder to execute the code\ninside and the file that browser accepts\nto execute JavaScript code is HTML I'm\ngoing to create a basic HTML outline so\nthat our browser can execute the\nJavaScript code so how can I write the\nHTML file with JavaScript code in an\neditor so if you are on Windows you may\nhave a notepad a simple text editor or\nionm have a text edit and I can create a\nnew document if I open that I can write\njust normal text here so I'm going to\nwrite some simple html text and HTML as\nwe saw at the beginning is a separate\nscripting language to basically write\nthe structure of a website and I teach\ncomplete HTML and CSS in the software\ndevelopment miniot camp but here our\nfocus is on JavaScript so we're going to\nuse the most basic HTML possible to be\nable to execute JavaScript on the\nwebsite so so maybe you're wondering if\nI'm writing HTML in the same editor\nwhere I would write normal text how does\nbrowser know that it's an HTML file well\nwhen you save the file instead of text\ndocument I'm going to choose HTML so\nHTML extension and I'm going to call\nthis file index which is a standard or\ncommon name for the main HTML file so\nwhen I save this you also see the icon\nthat has Chrome logo in it or maybe some\nother browser logo that means it's a\nbrowser executable and since this is\njust HTML in order to add JavaScript\ncode I'm going to add tag called Script\nthat's where JavaScript goes\nand and this is a part where we'd write\nall the JavaScript code so for example\nhere I can create a variable called some\nname and so on now I said you can write\nthe whole HTML and JavaScript in here\nbut the problem with using the simple\neditor is that they don't help you in\nwriting code so here you see they don't\nhighlight the keywords they don't tell\nyou you made a syntax error or any other\ntips so for example in browser when we\nwrote VAR name some name you get the\nhighlighting of the keyword of the\nvariable name of the data type for\nexample if you have a number it has a\ndifferent highlighting Etc so you don't\nhave any of that in simple editor and it\nalso looks pretty ugly so instead there\nare special editors for different\nprogramming languages that help you with\nhighlighting and other features to write\nthe code and there are special ones for\nwriting HTML and JavaScript code\nspecifically the one that we'll be using\nin this course is webstorm from\njetbrains which is actually an\nintegrated development environment M or\nIDE and not a simple code editor what\ndoes that mean exactly well when you\ninstall webstorm you basically have\neverything that you need for website\ndevelopment in there so various features\nBeyond just writing code are included\nout of the box or in other words you get\nan IDE with full batteries included and\nwe'll see some of its cool features\nthroughout the course so if I type in\nwebstorm download we can check out their\ndownload page for your specific\noperating system and if I click on\ndeveloper tools you actually see they\nhave a list of multiple idees and they\nhave dedicated idees for different\nprogramming languages and webstorm is\nspecifically for JavaScript so it gives\nus these awesome features specifically\nfor JavaScript development and the great\nthing is they have special offers for\nstudents universities startups for all\ntheir idees including webstorm so let's\ngo ahead and download the webstorm IDE\nfor free to develop our JavaScript\napplication I'm using Mac OS so I'm\ngoing to download this one and once\ndownloaded you just double click on this\ninstaller file let's drag webstorm to\nthe applications and there you go we\nhave webstorm available locally let's\ndouble click again and it's going to\nopen the webstorm\nIDE this is the welcome page and let's\ngo ahead and create a new product\nproject let's call this JavaScript app\nand create and in the webstor settings\nI'm actually going to zoom in so that\nyou can see the code better so I'm going\nto set it to\n150 and there you go this is what we are\nstarting\nwith so now let's create a new file in\nour JavaScript application project if\nyou go here and right click with your\nmouse you see these options and we we\ncan create a new generic file or if we\nknow that we're going to be writing a\nJavaScript or HTML file we can actually\nchoose specifically that type of file\nand this way webstorm actually knows\nthat you want to write HTML or\nJavaScript code and it actually helps\nyou create the boilerplate code or the\ninitial code for that file specifically\nso let's see what happens if I choose\nHTML file from the options and let's\ncall this file\nindex.html like we did before and know\nthat we have HTML extension in the file\nname and if I hit enter there you go\nwebstorm actually knows that this is a\nbasic HTML structure all these tags are\nneeded for a proper HTML page so it\nautogenerated all these so you don't\nhave to type it out from scratch this is\nsuper convenient and let's give our\nindex.html web page a tiple let's call\nit JS\napp just like we did here and that's it\nnow you can ignore actually all this\ncode here that was autogenerated this is\nkind of a structure a main structure for\na properly formatted HTML so everything\nthat is needed is right here what we\nwant to focus on is writing our\nJavaScript code so if we check our index\nHTML file that we wrote before we have\nthis script text with some JavaScript\ncode inside so I'm going to copy that\nblock we already have the body tags and\nthe script tags usually go inside the\nhead Texs so between those opening and\nclosing head Texs or between the body\nTexs so in our case we're going to add\nthem in the head and as soon as I paste\nin the script block webstorm IDE already\nhighlights some of the issues with our\nsyntax so because we use this simple\ntext edit editor we have some wrong\ncharacters that can't be interpreted by\nthe browser so we need to fix them and\nknow that we have these red underlines\nhere that are for error and then we have\nthese orange underlines which are for\nwarning so this need to be fixed because\notherwise our JavaScript is not going to\nwork so we're simply going to replace\nthose with a standard quotes basically\nand that's it and as you see with the\nsyntax highlighting the value assignment\nto the variable is working now and the\nerror is gone now you notice we have\nanother underline here which is a\nwarning this means the code is going to\nwork fine without any issues but we\ncould make some improvement to this code\nit says VAR is used instead of let or\nconst so what is it about back in the\nday when JavaScript was in the early\nphases VAR keyword was used to declare\nthe variables later as the JavaScript\nprogramming language evolved and\nimproved and Engineers who were\ndeveloping JavaScript programming\nlanguage made those improvements these\ntwo Alternatives were added to defining\nvariables the let and const keywords and\nthe reason for that Improvement or the\nmain benefit of that is to prevent\nbasically accidentally overwriting the\nvariable values because JavaScript is\nvery flexible which is great but it also\nmeans means that you can make lots of\naccidental mistakes and one of them\nbeing defining the same variable\nmultiple times and accidentally\noverwriting the previous variable\nbecause you didn't know that you already\nhad that variable in your code and\nbecause of that we have these two\nAlternatives so the con is basically for\nuse cases where Define a variable so\nbasically a value that you want to\nreference in multiple places but that\nvalue should never change for example if\nwe're developing an e-commerce\napplication for Nike the name of the\nshop or the brand name Nike should never\nchange right imagine someone overwriting\nthe name of the brand or name of the\nshop from Nike to something else so this\nvalue should not change dynamically\nwithin the program or within the\napplication so we had thousands of lines\nof code here there should not be a line\nthat overrides the value of brand if\nthat happens accidentally Again by the\nmistake of developer then and the fact\nthat we're using const in front of it\nwill tell JavaScript that program cannot\noverwrite the value of this variable and\nfor all the other use cases where we\nwant to allow program to change the\nvariable value we can use let instead of\nthe VAR example again would be if we had\nsome prices for different items and then\non some days we have a campaign so that\nprice can dynamically change when\ndiscounts get applied for example or if\nwe have a customer name and they change\ntheir username or whatever that value\ncould change as well so using let for\nall the other variables instead of VAR\nis a good practice and as you see\nwebstorm itself is helping us especially\nas beginner developers to learn those\nsyntax issues as well as good\nprogramming practices so now we have a\nfully functioning HTML file with\nJavaScript code inside that is working\nand properly written now the question is\nis how do we execute the index HTML file\nin the browser so how do we take this\nfile and contents and make it work in\nthe browser now there are a couple of\nsimple ways to do that and I'm going to\nshow you all the options so you can\ncompare them the first very easy option\nis to drag and drop this file into the\nbrowser so just open a new tab on the\nbrowser and we need to locate this file\nin the file explorer\nand we can do that by navigating\ndirectly to this file using this\nlocation that you see here so this is my\nhome\ndirectory called Nana and inside that I\nhave these webstorm projects which\nautomatically gets created by the way by\nwebstorm and inside that I have Js app\nand\nindex.html or you can also save yourself\nall that just right click on the file\nitself open in finder and there you go\nso now back to the browser one way to\nexecute this index.html in the browser\nis just take this file and drop it\ninside the browser and there you go now\nwe don't see anything here it's just\nWhite Blank Page because we are not\ndisplaying anything we're just creating\na variable not even using\nit but if we open the inspect or the\ndeveloper tools of the browser we can\nsee that this is exactly our our\nindex.html with our script inside so\nthat's one way a second also very simple\nway is to Simply double click on\nindex.html and this will open a fresh\nnew browser tab like this\nagain the same page with the same\ncontents and note that we have this\ntitle here this JS app displayed which\nwe defined right here so that's the\ntitle of the web page now there are two\nmore ways of executing our index.html\nfile specifically using web stor and\nthese are actually way more convenient\nbecause you can open this file directly\nfrom here using one of the browser icons\nso webstorm actually detects the\nbrowsers that you have available and it\nwill show you the icons so you can open\nthis HTML file in one of your browsers\nso if I click inside side again this\nopens a new browser tab automatically\nthis is our title it even has this\nwebstorm logo here as you see the value\ninside the browser URL is different\nbecause it's coming directly from web\nstore and inspect again there you go\nthis is our code and final probably the\nmost convenient way of opening your\nindex.html file a browser is using this\nweb storms built-in browser preview so\nlet's click on this and see what happens\nand as you see it shows us the browser\nintegrated directly in the web storms\nIDE and that leads me back to the name\nIDE which stands for integrated\ndevelopment environment so basically\nthis is an environment where all the\ntools and the things you need for\napplication development are directly\nintegrated in into this environment and\nthe convenient part about this is\nobviously that you don't need to switch\nbetween the IDE and the browser you have\neverything in one place you have your\nfolder and file structure here you have\nthe code editor here and you have the\nbrowser and a cool thing about it is\nthat right now we don't have any text\ndisplayed on the website but let's\nactually display something so we can see\nhow it works this is our\nawesome JavaScript\napplication and as soon as I save and by\nthe way shortcut for saving is command s\non Mech or control s on Windows as soon\nas I save notice here the text is\ndisplayed right away right and again add\nsomething here and all those changes are\ndirectly displayed here this saves a lot\nof time when you're actually actively\ndeveloping and making thousands of\nchanges so you don't have to refresh and\nreload all the time so this is available\nout of the box in our case we're\nactually going to stick to the browser\nbecause we want to\nuse the browser developer tools because\nwe're going to be outputting some stuff\nhere for our tutorial specifically\nhowever if I was developing myself and\nwriting the HTML code then I would\nactually go for this preview feature so\nlet's close this and we already have the\napplication open in browser and you\nnoticed that on the browser as well\nwithout refreshing or reloading the page\nthe changes are automatically applied so\nlet's go back and remove this and again\nlet's save go back and the changes are\napplied so we have the same auto sync or\nautomatically reload on Save when we\nopen this\nindex.html using one of these browser\nicons here which again as you know\nnotice is different from when we\ndirectly drag and drop the file in the\nbrowser here we would have to explicitly\nrefresh to apply the changes now this\nmay look like a small thing when you're\njust getting started however when you're\na little bit more experienced and you're\ndeveloping actively this may save you a\nlot of time and a lot of nerves awesome\nnow if you want to also display stuff in\nthe browser console we can add a line\nhere console do log which basically\noutputs whatever we pass in to the\nbrowser so we can pass in the variable\nreference\nor a stream\ndirectly like this again as soon as I\nsave this will automatically be reloaded\nin the browser and there you go we have\nthe variable value and we have whatever\nI wrote directly in the console.log so\nconsole.log basically prints out stuff\ndirectly in this console tab right here\nnow imagine we actually wrote Our HTML\nweb page structure right here within the\nbody Tex which can be actually a very\nlarge HTML file and in addition to that\nwe wrote a lot of JavaScript\nfunctionality within those script texts\nthat will be pretty inconvenient because\nnow we have lots of lines of code within\none file so we have HTML here we have\nJavaScript here and maybe thousands of\nlines of code which makes it difficult\nfor us to have an overview of all the\nthings this file contains and we're kind\nof mixing two different things within\none file so in programming as your code\ngrows it's always a good practice to\nkeep your code clean have multiple files\nwhere each file contains a limited\nnumber of code lines so that you can\neasily navigate through your application\ncode or if you have new team members new\ndevelopers joining your project team\nthey can easily navigate through the\napplication code so it's always a good\npractice to have your code clean and\nespecially to separate the\nfunctionalities from HTML CSS and\nJavaScript that means instead of having\nour JavaScript code directly inside we\nwant to actually have it in a separate\nJavascript file and Link it here and\nit's super simple actually\nso first thing we want to do is to\ncreate own dedicated JavaScript file\ninstead of having JavaScript directly in\nthe HTML file so going back here right\nclick with your mouse again and this\ntime we're going to create a new\nJavascript file and we're going to call\nthis\n.js and again notice the JS extension in\nthe file name this way browser will know\nthis is a Javascript file hit enter and\nyou also see these different icons that\nwebstorm displays for different file\ntypes so even if we did not have the\nextensions for the files just by looking\nat the icons you will know this is\nJavascript file this is HTML and\nobviously other types of files will have\ntheir own icons as well this is so now\nwe're going to Simply take all this\nJavaScript code that is defined within\nthe script text we're going to cut that\nout or you can just use the shortcut\nand we're going to paste it directly in\nhere and you notice in JavaScript file\nwe don't need any text we can just write\nJavaScript line by line like this and\nyou notice again webstorm detecting that\nit is a Javascript file actually\nprovides some additional functionality\neven to our code and one of them is\nshowing the data type of the variable So\nbased on the value it's automatically\ndetected that this is a string variable\nand it's basically showing that as an\nadditional hint to help us in\nprogramming however we're not done yet\nbecause now we have those empty scripts\nbut there's no linking or connection\nbetween our HTML and JavaScript file we\nneed to actually tell this HTML file to\nget the script from somewhere so we need\nthe source of the new JavaScript code\nand the way we Define it is we leave\nthis section empty so nothing actually\ngoes between the script tags and instead\nwithin the opening script tag we Define\na source\nSRC so this basically is a pointer to\nJavaScript file that contains the script\nthat we want to load as part of HTML\npage and as you see again super\nconveniently webstorm is automatically\nsuggesting us all the files that we have\nin our current project and it tells us\nyou want to to reference epto JS and if\nwe do if I just click on it it basically\nautomatically sets that as the source\nname right here and that gives us the\nlink that we want and again super\nconvenient especially as a beginner that\nthe IDE itself provides all these\nadditional explainers telling you what\ndifferent tags are and so on and as I\nsaid nothing actually goes between those\nscript tags so we can just leave it\nempty and this will load the same script\nthat we had defined directly here now\nfrom a separate Javascript file so in\norder to test this I'm going to make a\nchange in the JavaScript code and we're\ngoing to see whether that is actually\nreloaded in the browser once we save it\nso I'm going to say output in console\nfrom\napp.js\nfile and I'm going to save this make\nsure to save both changes in both files\nbecause if if you don't save the changes\nin webstorm it's not going to be\nreloaded in the browser so now let's\ncheck back with our browser and without\nany refresh you see output in console\nfrom .js file and if I go back to the\nelements which is the HTML tags body and\nso on we see that script is linking to\napp.js and this is another element that\nis also loaded in the browser\nalong with HTML file and that is also\nvery interesting and important so these\nare the HTML elements on the page\nhowever if I go to the sources tab right\nhere you see our index.html\nfile this is the file that we wrote and\nthis is some additional stuff that\nwebstorm actually adds to our index HTML\nautomatically to give us this automatic\nloading and then we have our .j s file\nalso loaded\nalongside and if I check the sources of\nour previous\nindex.html that had the script directly\nyou see that we don't have any\nJavascript file it's just HTML now let's\nlearn about the next important concepts\nof conditionals and comparison operators\nwhich are also common Concepts across\nall programming languages and if those\nterms sound scary to you I'm going to\nexplain those with very simple examples\nand visualizations to make sure you\nunderstand them very\neasily so first let's see what\ncomparison operators\nare let's consider as an example\nFacebook featured to display birthdays\nof its users so basically if today is\nyour birthday Facebook will show a\nbirthday icon and will send\nnotifications to all your friends and\nfor Facebook to check whether it's your\nbirthday today basically it has to\ncompare today with your birth date right\nso that comparison or equals in\nJavaScript is expressed with three\ncomparison signs like this so one\ncomparison sign is reserved for\nassigning variables so double or triple\nequal signs are used to check the\nequality of two values so let's see the\ndifference between the two so let's say\nI have a variable\nH 30 so if I compare value of variable H\nto 30 then I get true right if I triple\ncompare that I also get true so same\nresults now if I\ncompare the value with a string\nrepresentation of 30 I also get\ntrue however if if I triple\ncheck I get false and this is the\ndifference between these two the double\ncomparison checks equality of the values\non two sides so checks the value here\nchecks the value here and Compares them\nby the value the triple equality\nCompares value and also the type the\ndata type of those values so if I have a\nnumber here and a number here which are\nthe same values then it's going to be\ntrue if I have a number value here which\nis defined here and a string value here\nof the same value I get false because\nthe data types are not the same so\nthat's the difference and obviously if I\nput here another value it's going to be\nfalse in any case right like this or\nlike this doesn't really matter and that\nlittle difference can actually have a\nbig impact that's why this concept is\nimportant in JavaScript general rule is\nthat you should in most cases use the\ntriple equation to compare two values\nnow let's consider another example where\nyou order something on Amazon and says\nthat shipping is free above purchase of\n€20 so when you add things to your card\nprogram checks whether your order total\nis above 20 or below 20 and then\ncalculates the shipment cost based on\nthat and let's say it charges you5 if\nyour if your total order is under €20 so\nnow we don't have the equal check\nanymore but rather is it higher or is it\nlower so the way to check that is let's\nclear this so let's define the variables\nso you have the total price let's say\nyou gathered items that are €19 and now\nthe program checks if total price is\ngreater than €\n20 you get a bullan expression of false\nbecause this condition is wrong in the\nsame way the program can also check the\nopposite direction so we can check\nwhether your total price is below 20 but\nnotice that we don't check for Value 20\nso what happens if the total price is\nexactly 20 so basically here we need to\ncheck that if total price is below 20 or\n€20 in both cases you get charged for\nthe shipping so in order to do that you\ncan combine those two expressions and\nsay like this so either it should be\nless than 20 or it should be exactly\n20 and as you see each of these\ncomparisons return to you a Boolean\nexpression of either false or true only\none of these outcomes is possible so\nwhat this means is that in the program\nyou check if this condition comes out as\ntrue then you want to offer free\nshipping otherwise you want to charge €5\nfor shipping and the way it's going to\nbe written inside of the program using\nJavaScript syntax is if tour price is\ngreater than 20 here will be code that\nlet's say calculates um or sets the\nprice of shipping so here we set it to\nzero there's no shipping cost otherwise\nis expressed with else shipping\ncost equals to 5 so this is how the\nconditions are used in JavaScript to\ncheck the condition and based on that do\neither this or if we switched that\ncondition we can also check if total\nprice is less than or equal to 20 then\nshipping cost will be set to five\notherwise the shipping cost will be zero\nso to go back to some technical terms in\nJavaScript this here is called if else\nstatements whatever is inside if is\ncalled a condition so this thing here\nthat evaluates to either true or false\nis a condition and this here that\ncompares those two values is called a\ncomparison operator so greater smaller\nequals Etc all these are comparison\noperators but let's say you have a case\nwhere you have three different shipping\ncosts right so for example if the price\nis below €1 you get charged 5 shipping\ncost if it's below 20 you get charged\nonly €3 and if it's above 20 you get\ncharged nothing now you don't have if\nelse only but you have three conditions\nit's also super simple to do that with\nif else so basically you check again if\ntotal price is less than or equal to 10\nyou get charged\n5 and here you are going to say else if\nwhich is another statement where you can\nwrite the conditional where we're going\nto check whether total price\nis less than or equal to 20 in that case\nyou get charged\n€3 and there comes our final else which\nis\nzero so now I have three conditions here\nso the first condition here says it's\nless than or equal to 10 the first one\nchecks another condition and the third\none um important thing to note here that\nthe last else or the the else here\ndoesn't have a condition explicitly but\nit implies that both of these above\nconditions were false so both of them\nwere wrong be and because it's implicit\nwe don't have to check it explicitly\nhere so you could also go here and do\nthat else\nif price is greater than 20 and this\nwill work just fine however because it's\nimplicit we don't need that so we saw\ncomparisons between two values using\nequals higher or lower the final\noperator is not equals for example\nconsider a feature where a web\napplication checks whether user is a\npremium member or not obviously if you\nare not a premium user you won't see the\ncool features they have or you won't be\nable to access some premium content so\nwhen you log in program will check is\nuser membership premium so with equals\nor it can check user membership not\npremium and in order to express that\nnegative comparison you use this syntax\nso not equals in JavaScript is expressed\nwith exclamation mark and double equals\nand to show that in IFL statement let's\nsay if user membership is not premium\nshow user non premium contents or maybe\neven recommend a premium upgrade as a\nmarketing measure and else show premium\ncontents and finally you can combine all\nthese\nconditions so for example if today is\nyour birthday and you have displayed\nthat on your profile only then the\nprogram will show the notification so\nboth conditions must be true so if\ntoday's date is the same as your birth\ndate and birthday displayed is true so\nhere you can use a comparison with uh\nBoolean true or false so both these\nconditions must be true for notification\nto be sent and in JavaScript the Syntax\nfor end is this so This basically is\nalso a valid condition that you can also\nput inside of the if condition so if\nthis whole thing is true then show\nnotification else do not or another\nexample back to the shipment cost let's\nsay you don't pay for the shipment if\nthe total price is over €20 or you have\nAmazon Prime account so the way to\nexpress that would be total price over\n€20 or Amazon Prime\nequals true so here only one of them has\nto be true for you to get free shipment\nor in JavaScript is expressed with\ndouble pipes and again you can put that\nin if\nstatement and say if either this or this\nis true then give a free shipment\notherwise don't and you can also use\nnegation in conditions for example you\nwant to check whether this whole thing\nis false and the way to do that is using\nthe exclamation mark and the brackets so\nbasically this will check whether this\nwhole condition is\nfalse now let's learn about one of the\nmost important Concepts in any\nprogramming language which is\nfunctions and let's understand with\nsimple examples what they are and why we\nneed them so let's go back to our JS app\nproject and we're going to work in this\nEP tojs file so I'm going to delete this\nand instead we're going to work with\nthis simple shipping cost calculation\nlogic so this if else statement is our\nJavaScript logic that basically\ncalculates based on whatever total price\nis how much shipping cost a customer\nwill have to pay and let's actually\noutput whatever the shipping cost is in\nthe console so we have this application\nup and running open in our browser so\nwhatever we output with console.log is\ngoing to appear right here and in\nwebstorm actually there is a very\nconvenient way of writing console.log if\nyou're lazy like me and don't want to\ntype out the whole thing you can simply\ndo\nlog enter and that basically\nautocompletes console.log now we want to\nlog whatever shipping cost value was\ncalculated by our logic so I have just\nset 19 as a total price you can set\nwhatever value you want and then we're\ngoing to output the result I'm going to\nsave it and if we go back to the browser\nyou see the output here however I don't\nwant to see just number I want to see\nwhat is it exactly what does a number\nrefers to so I want to have a full\nsentence like\nshipping cost for you is whatever the\nvalue of shipping cost variable is so\nbasically we have a string here string\nvalue and with that string value we also\nwant to Output the value of a variable\nand there is one way to do that in\nJavaScript which is just combining these\ntwo with the plus sign so it's not an\narithmetic operation like with numbers\nbut in this case it basically takes\nwhatever string value of this is and\nthen whatever value this variable has\nand outputs it as one sentence or one\nstring so if I save this go back there\nyou go you see the full sentence however\nthere is more elegant way to do that\nwhich is is way nicer which\nis we remove these double quotes here\nand instead we use what's called back\nticks like this for the entire thing\nincluding the variable and then to tell\nJavaScript these are all text and this\nis actually name of the variable it's\nnot the string itself we use this syntax\nwhich is dollar sign and curly braces\nthat's it and you see in webstorm itself\nthat the highlighting the syntax\nhighlighting changed so this is treated\nas a variable so it's value will be\nextracted and this is treated as the\nnormal string again let's save go back\nand we have the same result okay now\nthis whole thing here is a fully\nfunctioning logic that we wrote in\nJavaScript that takes whatever total\nprices and calculates the shipping cost\nbased on that and then outputs it in the\nconsole now imagine if we really had an\ne-commerce application we would have\nthousands or tens of thousands of users\nmaybe and everyone will be shopping in\ntheir own shopping cart and adding items\nso we would actually need to calculate\nthis for every single purchase they make\non our e-commerce application so this\nlogic this whole thing May repeat in our\napplication code multiple times and\nimagine we had 10 different places where\nthis calculation needs to be done and we\nwould have to basically replicate this\ncode in 10 different places throughout\nour application code that seems like a\nvery inefficient way of coding right\nbecause we're repeating the same thing\n10 times like I explained with variables\nwhere we use the same value multiple\ntimes except in this case it's even\nworse because we're repeating the the\nentire code block multiple\ntimes and that's where functions come in\nso you can think of a function as kind\nof a variable reference so just like we\nsaved a certain value once in a variable\nand then we reference that variable\nevery time we needed to grab that value\nthe same way we can save an entire code\nBlock in a function and then whenever we\nneed that code block or that logic we\ncan reference it by using the function\nname so I'm going to put this entire\ncode block including the assignment to\ntotal price variable inside a function\nand the Syntax for that is actually\nsuper easy what we do is just like with\nvariables we have VAR or let or const\nkeyword with functions we have one\nkeyword called\nfunction then then we have the name of\nthe function which is usually\ndescriptive that describes whatever that\ncode logic that the function references\nactually does in our case let's call\nthis calculate shipping cost because\nthat's what the code block does right\ncalculate shipping cost and note at the\nend of the function name we have this\nbrackets opening and closing brackets\nand after that we have curly braces and\nthese curly braces will basically\ncontain the block the code block that\nfunction references so if I take this\nwhole thing and paste it in here and\nthere you go we have just created or\ndeclared a function and know this\nindentation right here so with this\ncurly braces we're telling JavaScript\nthat this is the start of the function\ncode block and this is the end so\nwhatever is between those curly braces\nis the code block or logic that will get\nexecuted whenever we reference this\nfunction name and just like here we have\nthis indentation here we have the entire\nfunction body indented and webstorm\nactually handles the indentation so we\ndon't have to fix anything now you\nprobably also notice this underlines\nhere this orange underline again\nwebstorm is helping us understand some\nimprovements that we could make to our\ncode so this is not an error this would\nactually work however there is a room\nfor improvement and let's say as a\nbeginner you see these underlines and\nyou hover over it and you see this\ndescription like implicitly declared and\nyou're thinking I don't know what that\nmeans so I don't know how to fix that\nwarning another really cool thing that\nwebstorm has that I have used\nextensively in my programming projects\nis kind of an Autos suggest for the fix\nso what you can do is whenever you see\nthis kind of underline you can\nuse this shortcut that you see right\nhere which on MacBook is option enter\nwith the mouse inside that code block\nthat needs to be fixed I'm going to do\noption enter you see that webstorm\nactually gives you suggestions to how to\nfix that so I'm going to choose the\nfirst one and let's see what happens\nthere you go so you see the warning was\nabout the variable shipping cost not\nbeing declared and webstorm\nautomatically edit the Declaration in\nthe\ncode so let's put it here and there you\ngo we have no warnings no errors and we\njust added an improvement to our code\nnow since we didn't change any values\nthe output of this function should be\nthe same now let's save this code and\nlet's see what happens when we switch to\nthe browser let's see what we see there\nso I'm going to switch to the browser\nand you see we have an empty output so\nwhat happened here you see we have an\nempty output so this line of code\nobviously didn't get executed because we\ndon't see the sentence in the console\noutput so what happened here we have\nexactly the same code as before this\ntime just in a function and that is a\nvery important concept about functions\nthat you need to understand as a\nbeginner in programming that just like\nwith variables we declare the variable\nwhich means we save the value into the\nvariable reference and then later at\nsome point we use that variable the same\nway we first declare the function or we\ncreate the function and we assign\nwhatever code block logic to it and then\nlater we can use that function or code\nblock inside that function to execute\nthe logic that means function\ndeclaration itself does not execute the\ncode it just saves whatever code you put\ninside the function block and you also\nsee webstorm actually highlighting this\nfunction name as gray and if I hover\nover it it says unused function so we\nhave declared the function but we're not\nusing it and using a function is also\ncalled in programming calling a function\nand the way to call a function is\nfunction name and the brackets and you\nsee the color of the function name\nchanged and it doesn't say unused\nfunction anymore so now let's save this\nand see the output in the browser if I\nswitch back you see that function code\nwas executed and we see the result right\nhere and the great thing is now whenever\nwe need this entire code block to\nexecute we simply need to\ncall the function with the name and\nthat's it so let's say there was some\nlogic\nhere and somewhere down here we need\nthat logic executed\nagain we simply call the function and\nnow it's going to execute same code\nblock for that function\ncall and by the way this is a Syntax for\ncomments so whenever you start a line in\nJavaScript with Slash two times you also\nsee the color is gray whatever you type\nin\nhere this tells JavaScript that this is\nnot a code that needs to be executed\nthis is simply a comment a self note for\nyourself or for your programming\ncolleagues which usually is used to\ndocument the logic that you write in the\nfunction if it's not understandable just\nfrom the code so let's clean this up and\nlet's see another very interesting\nconcept of\nfunctions now we know that the total\nprice is a dynamic value so every time\ncustomers are shopping that value will\nbe different so we can't hardcode it\nhere instead it will always be different\nfor each purchase of each customer so we\nneed to use a different value each time\nwe calculate the shipping cost that\nmeans we have to remove it from here and\nwhen we do that you see automatically\nthis warning from webstorm that tells us\nthis variable is not declared anywhere\nthere is nowhere in the code where we're\nsetting a value for this variable which\nmeans we're referencing a variable that\ndoesn't exist that we haven't created so\nwe need to do both first we need to\ncreate a variable and then we have to\nassign some value to that so so let's\nsay at the beginning we have this\nvariable total\nprice which is a simple Declaration of\nthe variable we're not assigning a value\nto it because the value will be\ndynamically set when a user gets on our\nplatform and starts\nshopping right so let's say we have some\nlogic here that basically tracks the\nuser behavior on a platform let's say a\nshopping cart and user is putting the\nstuff in the shopping\ncart\nand the total price of whatever user is\npurchasing is now let's say €1 and the\nuser\ncontinues\nshopping adding more\nitems and total price gets to €1 19 for\nexample and then at some point the\ncustomer is ready\nto order they have everything they need\nand now they want to basically pay and\nplace the order for all the items so\nwhen that happens we want to calculate\nthe shipping cost and again imagine this\nis all code in our application we have\ntons of logic and at some point we are\ncalling the calculate shipment cost\nfunction to calculate the cost based on\nthe total price for the customer so we\nwant to do is we want to give that total\nprice as input to our calculate shipping\ncost function which in programming is\nalso called passing a value to a\nfunction as a parameter as an input\nparameter and that is also super easy we\nbasically take the value or in this case\nvariable that references the value and\npass it between those brackets as an\ninput parameter to the function and now\nyou understand what the brackets are\nthere for for a function when we have no\ninput parameters that we're passing to a\nfunction then the brackets are empty or\nwe can pass in one two or 10 parameters\nwithin those brackets and then on the\nfunction definition we need to\nexplicitly say this function is\nexpecting a parameter an\ninput so whenever someone either us the\nsame engineer who declar the function or\nyour teammates other Engineers who also\nwant to use the same function they know\noh this function is expecting a\nparameter which is total price so I need\nto pass that input because otherwise\nobviously it can't do its job because\nthe total price value will not be set\nand to do that we Define that in the\nfunction\ndefinition like this just the name of\nthe variable and this is another very\nimportant\nthing these two names do not have to be\nthe same so we're going to call this\nlet's call this total\nprice param or parameter so this is a\nvariable reference to this value that\nwe're passing here and obviously that's\nwhat we need to use in our logic within\nour function and something that is very\nhelpful to understand this concept is\nthat when we call this function with\nvalue 19 passed in as total price\nvariable what happens in the background\nin the function execution is the\nfollowing this variable is created\nwithin the function with a value 19\nthat's exactly what happens in the\nbackground when we pass a parameter to a\nfunction So within the function that is\ncreated as a variable with that value\nassigned and now we can use that\nvariable\nwithin the function block wherever we\nneed that value and we don't need to do\nthat because it happens in the\nbackground and this is our complete\nlogic so now the total price is dynamic\nit's calculated somewhere else in our\napplication code whenever user is adding\nstuff to the shopping cart and when they\nclick on check out or ready to order or\nwhatever then we are calling this\nfunction and passing the total price as\na parameter so this will be calculated\nand we can even add another console log\nhere with our shortcut and\nsay for\ntotal price\nof whatever the total price is I'm going\nto save this go back to the browser and\nthere you go our logic is fully\nfunctional\nnow let's do one final Improvement to\nour shipping cost calculation logic and\nlet's say once a year in our company in\nour e-commerce company we change the\nshipping costs so last year it was five\nas a standard shipping cost and for\nlittle bit discounted version we had\nthree but this year we want to increase\nthose prices because of inflation or\nwhatever so in this case the engineers\nor us in this case need to change the\ncode to update the shipping cost values\nand we may be using these two values in\nother parts of the application as well\nfor different logic like here we're\ndoing the shipping cost calculation\nmaybe we have a logic for discounts and\nthese values are used there as well or\nin the checkout logic or in the payment\nfunction and so on so if these values\nchange because of our company policy we\nneed to go to our application find every\nsingle JavaScript file and code block\nwhere this is hardcoded and we need to\nupdate them and again this is a perfect\ncase for using variables for values that\nare referenced in multiple different\nplaces and that may change at some point\nnow in this case this is not a variable\nthat changes in the program like the\ntotal price for example it's not a\ndynamic value it's a Val that changes\nless frequently and whenever that\nhappens we manually have to update it in\nthe code and those are variables that we\nusually Define with const keyword so\nthat means right here we're going to\ncreate two variables for the standard\nshipping cost and the discounted one and\nwe're going to call that exactly that\nstandard shipping\ncost let's say we raised it to six 6 and\nwe have\ndiscounted shimy cost which is\n4 and as I explained the difference\nbetween these two is that the variables\nthat are defined as const or\nconstant those values cannot be changed\nprogrammatically you can only go here\nand update the value but the program\nitself cannot change it so JavaScript\nwill not allow it so for for example\nsomewhere in the code right here if I\nwas like let's set it to seven whatever\nyou see this error that says attempting\nto assign to constant or read only\nvariable so this is not going to\nwork which again prevents accidental\nrewrite of the variables and now we can\nreference the\nconstants in our application logic and\nthis is another very important Concept\nin programming especially when we're\nwriting functions that as you see we\nstarted with a lot of hardcoded values\nand then step by step we remove them and\nnow almost everything in our logic is\nreferenced as variables and we don't\nhave many hardcoded values here and this\nis a best practice in programming in\ngeneral so now let's test our\napplication again and let's say here the\nuser started shopping they decided maybe\nwe're ready to check out so we\ncalculated shipping cost they remembered\nthey forgot one item so they continued\nshopping eded that in the shopping cart\nnow they ready to check out and we\ncalculate the shipping cost again so in\nthe first case we're at €10 which means\nthey're paying the standard shipping\ncost as we have defined in our logic\nhere with 19 they see discounted\nshipping cost\nso they will get charged the disc\ndiscounted shipping cost and when they\nsee that they think you know what I\nwould like to save myself that shipping\ncost entirely so I'm going to add one\nmore item to my shopping cart to qualify\nfor a free shipping with zero cost so\nhere they add one more\nitem that brings the total price to\nlet's say\n24\nthey will see the new shipping cost\ncalculated which should be zero and here\nthey place the\norder so let's save our logic and see\nthe output and to differentiate between\nthe outputs let's actually add like a\ndecoration line kind of thing which\nbasically outputs something like this or\na\ndivider just just a visual divider for\nus in the console log so let's save it\ngo back and there you go shipping cost\nis six for the total price of 10 then we\nhave four discounted one and here with\n24 we are at free\nshipping and one final note that I want\nto make is you probably ask yourself\nabout the variable and function names\nwhat you see here is called chemel case\nso you basically start with a lowercase\ncharacter and then every other word that\nyou add in the name is capitalized like\nthis and this is a standard naming\nconvention for functions and variables\nin JavaScript specifically know that\ndifferent programming languages have\ntheir own different conventions that\nmeans you can name these actually\nwhatever you want you can\ndo this or you can do underline\nlike this all of this will work because\nthere are variable names you can name\nthem as you wish however in JavaScript\nthis camel case naming is a standard and\nwith that congratulations you have\ncompleted the entire JavaScript crash\ncourse you have learned tons of very\nimportant Concepts that are the main\nbuilding blocks of any programming\nlanguage out there and you have a good\nbasic understanding of JavaScript\nhowever this is just the beginning there\nare way more exciting and interesting\nthings awaiting in the JavaScript world\nand generally in the software\ndevelopment world if you want to\ncontinue and really dive into this world\nof programming and the best most fun way\nto do this will be with our software\nengineering mini Boot Camp or what we\nalso call an IT beginners course and I\nwill be more than happy to continue\nteaching you there in it beginners\ncourse we're going to dive in deeper\ninto the web development you're going to\nlearn JavaScript Frameworks for\nfront-end development and for backend\ndevelopment you're going to learn how to\nbuild proper websites with database\nconnection and tools for managing\ndependencies of an application learn\nabout HTTP requests and protocols as\nwell as how to take the web application\nyou just created and deploy it on a\nsimple virtual server on a cloud\nplatform learn about firewall\nconfigurations operating system commands\nand if any of these Concepts sound\ncompletely foreign to you and sound very\ndifficult trust me you will learn all of\nthis with the simplest explanations and\nexamples that I use throughout the\nentire course to make this Learning\nJourney for you as simple and fun as\npossible so at the end of our software\nengineering miniot camp once you have\nlearned all of this you will have a\nsolid knowledge equivalent to a junior\nsoftware engineer so absolutely make\nsure to check out our software\nengineering mini boot camp in the video\ndescription or directly linked here in\nthe video and hope to see you there with\nthat thank you for watching and see you\nin the next video\n",
  "words": [
    "congrats",
    "deciding",
    "learn",
    "javascript",
    "crash",
    "course",
    "actually",
    "small",
    "part",
    "software",
    "development",
    "mini",
    "boot",
    "cam",
    "teach",
    "learn",
    "every",
    "part",
    "software",
    "development",
    "life",
    "cycle",
    "become",
    "software",
    "engineer",
    "understand",
    "entire",
    "concept",
    "go",
    "pursue",
    "career",
    "cloud",
    "engineering",
    "devops",
    "engineering",
    "etc",
    "video",
    "dive",
    "javascript",
    "really",
    "understand",
    "syntax",
    "basics",
    "also",
    "important",
    "interesting",
    "concepts",
    "behind",
    "javascript",
    "start",
    "looking",
    "big",
    "picture",
    "first",
    "understand",
    "javascript",
    "fits",
    "exactly",
    "thinking",
    "website",
    "programming",
    "jump",
    "demo",
    "program",
    "javascript",
    "let",
    "get",
    "started",
    "right",
    "away",
    "imagine",
    "following",
    "scenario",
    "wake",
    "morning",
    "get",
    "coffee",
    "open",
    "laptop",
    "open",
    "facebook",
    "browser",
    "let",
    "pause",
    "happened",
    "typed",
    "facebook",
    "browser",
    "saw",
    "fresh",
    "new",
    "feed",
    "new",
    "stuff",
    "happened",
    "asleep",
    "happened",
    "background",
    "technologically",
    "facebook",
    "application",
    "developers",
    "sitting",
    "mostly",
    "california",
    "developing",
    "guys",
    "girls",
    "writing",
    "bunch",
    "code",
    "code",
    "makes",
    "facebook",
    "lives",
    "california",
    "happens",
    "open",
    "facebook",
    "laptop",
    "part",
    "code",
    "lives",
    "california",
    "travels",
    "way",
    "laptop",
    "location",
    "ends",
    "temporarily",
    "living",
    "laptop",
    "sometimes",
    "refresh",
    "see",
    "blank",
    "page",
    "loading",
    "become",
    "annoyed",
    "ca",
    "see",
    "feed",
    "within",
    "3",
    "seconds",
    "data",
    "coming",
    "traveling",
    "somewhere",
    "laptop",
    "may",
    "need",
    "time",
    "travel",
    "internet",
    "cables",
    "everywhere",
    "world",
    "actual",
    "physical",
    "cables",
    "let",
    "electricity",
    "travel",
    "one",
    "place",
    "world",
    "another",
    "everything",
    "connected",
    "everywhere",
    "remote",
    "places",
    "africa",
    "asia",
    "remote",
    "villages",
    "anywhere",
    "world",
    "internet",
    "wondering",
    "like",
    "wow",
    "possible",
    "internet",
    "super",
    "crazy",
    "pretty",
    "simple",
    "actually",
    "nobody",
    "built",
    "internet",
    "cables",
    "near",
    "areas",
    "regions",
    "economic",
    "reasons",
    "think",
    "would",
    "super",
    "inefficient",
    "every",
    "time",
    "someone",
    "europe",
    "open",
    "facebook",
    "data",
    "needed",
    "travel",
    "places",
    "way",
    "california",
    "facebook",
    "built",
    "locations",
    "evenly",
    "distributed",
    "around",
    "world",
    "store",
    "part",
    "code",
    "data",
    "change",
    "much",
    "get",
    "much",
    "faster",
    "back",
    "part",
    "code",
    "traveled",
    "html",
    "css",
    "javascript",
    "see",
    "website",
    "looks",
    "ugly",
    "text",
    "fun",
    "colors",
    "styling",
    "naked",
    "html",
    "necessary",
    "one",
    "wants",
    "see",
    "plain",
    "ugly",
    "text",
    "without",
    "styling",
    "makes",
    "text",
    "pretty",
    "colors",
    "fun",
    "css",
    "like",
    "flash",
    "skeleton",
    "flash",
    "looks",
    "good",
    "anything",
    "move",
    "talk",
    "respond",
    "interact",
    "way",
    "html",
    "plus",
    "css",
    "page",
    "typical",
    "use",
    "cases",
    "visit",
    "card",
    "websites",
    "read",
    "texts",
    "displayed",
    "nice",
    "style",
    "ca",
    "leave",
    "comment",
    "send",
    "message",
    "anything",
    "website",
    "action",
    "comes",
    "purely",
    "javascript",
    "want",
    "upload",
    "photo",
    "facebook",
    "javascript",
    "want",
    "send",
    "message",
    "messenger",
    "javascript",
    "want",
    "like",
    "friend",
    "picture",
    "leave",
    "comment",
    "javascript",
    "everything",
    "interact",
    "ui",
    "stands",
    "user",
    "interface",
    "javascript",
    "combination",
    "three",
    "html",
    "css",
    "javascript",
    "called",
    "front",
    "end",
    "facebook",
    "code",
    "everyone",
    "sees",
    "front",
    "said",
    "three",
    "files",
    "leave",
    "laptop",
    "open",
    "facebook",
    "see",
    "even",
    "edit",
    "could",
    "go",
    "change",
    "facebook",
    "style",
    "like",
    "wo",
    "affect",
    "anyone",
    "else",
    "world",
    "since",
    "everyone",
    "copy",
    "files",
    "laptops",
    "another",
    "part",
    "code",
    "travel",
    "beckon",
    "code",
    "back",
    "one",
    "see",
    "may",
    "wondering",
    "anything",
    "front",
    "end",
    "like",
    "upload",
    "images",
    "message",
    "someone",
    "leave",
    "comment",
    "like",
    "backend",
    "well",
    "upload",
    "picture",
    "facebook",
    "surely",
    "want",
    "friends",
    "see",
    "message",
    "someone",
    "want",
    "keep",
    "history",
    "messages",
    "means",
    "want",
    "data",
    "persist",
    "words",
    "data",
    "saved",
    "time",
    "javascript",
    "leaves",
    "laptop",
    "would",
    "make",
    "sense",
    "photo",
    "locally",
    "computer",
    "beon",
    "comes",
    "happens",
    "javascript",
    "takes",
    "image",
    "uploaded",
    "puts",
    "envelope",
    "hands",
    "internet",
    "saying",
    "hey",
    "deliver",
    "backand",
    "specific",
    "location",
    "follow",
    "delivery",
    "way",
    "backend",
    "see",
    "happens",
    "backend",
    "gets",
    "image",
    "beck",
    "code",
    "written",
    "java",
    "python",
    "php",
    "even",
    "javascript",
    "different",
    "technologies",
    "use",
    "write",
    "backend",
    "part",
    "code",
    "let",
    "say",
    "example",
    "java",
    "java",
    "checks",
    "examines",
    "photo",
    "sees",
    "valid",
    "delivery",
    "threat",
    "danger",
    "know",
    "sender",
    "trust",
    "open",
    "envelope",
    "see",
    "everything",
    "fine",
    "hands",
    "database",
    "save",
    "lat",
    "database",
    "like",
    "warehouse",
    "big",
    "space",
    "keep",
    "images",
    "messages",
    "likes",
    "comments",
    "different",
    "users",
    "producing",
    "specific",
    "understanding",
    "let",
    "actually",
    "see",
    "location",
    "beckon",
    "code",
    "database",
    "leave",
    "quote",
    "unquote",
    "actually",
    "look",
    "like",
    "mentioned",
    "facebook",
    "buildings",
    "distributed",
    "around",
    "world",
    "actual",
    "physical",
    "build",
    "buildings",
    "servers",
    "inside",
    "know",
    "imagine",
    "think",
    "servers",
    "whatever",
    "probably",
    "close",
    "reality",
    "let",
    "show",
    "example",
    "server",
    "building",
    "typical",
    "big",
    "company",
    "like",
    "facebook",
    "location",
    "machines",
    "uh",
    "interconnected",
    "running",
    "order",
    "make",
    "sure",
    "facebook",
    "application",
    "available",
    "everybody",
    "world",
    "time",
    "beck",
    "code",
    "database",
    "actually",
    "leave",
    "magic",
    "happens",
    "envelope",
    "gets",
    "delivered",
    "backend",
    "ends",
    "address",
    "sent",
    "one",
    "machines",
    "among",
    "hundreds",
    "thousands",
    "machines",
    "take",
    "image",
    "validate",
    "save",
    "database",
    "happens",
    "inside",
    "consider",
    "friend",
    "logs",
    "facebook",
    "computer",
    "way",
    "front",
    "code",
    "travels",
    "laptop",
    "along",
    "new",
    "data",
    "like",
    "images",
    "messages",
    "friends",
    "etc",
    "coming",
    "servers",
    "facebook",
    "know",
    "data",
    "see",
    "news",
    "feed",
    "database",
    "warehouse",
    "facebook",
    "creates",
    "isolated",
    "spaces",
    "user",
    "personal",
    "data",
    "images",
    "etc",
    "obviously",
    "facebook",
    "want",
    "privacy",
    "meaning",
    "want",
    "friends",
    "see",
    "posts",
    "facebook",
    "creates",
    "connections",
    "database",
    "users",
    "friends",
    "facebook",
    "decides",
    "information",
    "send",
    "user",
    "log",
    "application",
    "along",
    "new",
    "data",
    "like",
    "images",
    "messages",
    "friends",
    "including",
    "image",
    "uploaded",
    "coming",
    "servers",
    "summarize",
    "web",
    "application",
    "always",
    "made",
    "three",
    "components",
    "code",
    "backend",
    "database",
    "front",
    "end",
    "see",
    "interact",
    "browser",
    "user",
    "interface",
    "application",
    "backend",
    "code",
    "waits",
    "new",
    "messages",
    "front",
    "end",
    "changes",
    "make",
    "like",
    "new",
    "uploads",
    "new",
    "messages",
    "likes",
    "handles",
    "database",
    "changes",
    "stored",
    "future",
    "usage",
    "like",
    "come",
    "back",
    "next",
    "day",
    "use",
    "application",
    "friend",
    "ens",
    "application",
    "applications",
    "written",
    "teams",
    "developers",
    "single",
    "developer",
    "lot",
    "developers",
    "full",
    "stick",
    "meaning",
    "know",
    "three",
    "work",
    "front",
    "end",
    "backend",
    "database",
    "however",
    "three",
    "areas",
    "alone",
    "field",
    "developers",
    "actually",
    "choose",
    "specialize",
    "one",
    "area",
    "become",
    "example",
    "frontend",
    "developer",
    "big",
    "companies",
    "like",
    "facebook",
    "would",
    "teams",
    "specialized",
    "frontend",
    "developers",
    "backend",
    "developers",
    "database",
    "developers",
    "things",
    "like",
    "backend",
    "database",
    "virtual",
    "servers",
    "actually",
    "learn",
    "software",
    "engineering",
    "mini",
    "boot",
    "camp",
    "complete",
    "beginner",
    "field",
    "knowledge",
    "feel",
    "overwhelmed",
    "concepts",
    "components",
    "know",
    "start",
    "mini",
    "boot",
    "camp",
    "going",
    "exactly",
    "make",
    "sure",
    "check",
    "link",
    "course",
    "video",
    "description",
    "know",
    "basics",
    "websites",
    "built",
    "generally",
    "web",
    "works",
    "let",
    "start",
    "learning",
    "programming",
    "basics",
    "javascript",
    "let",
    "see",
    "javascript",
    "used",
    "modern",
    "web",
    "applications",
    "applications",
    "used",
    "internet",
    "browser",
    "written",
    "using",
    "javascript",
    "become",
    "standard",
    "developing",
    "web",
    "applications",
    "way",
    "web",
    "applications",
    "built",
    "layer",
    "html",
    "gets",
    "styled",
    "made",
    "beautiful",
    "css",
    "order",
    "make",
    "beautiful",
    "surface",
    "also",
    "called",
    "user",
    "interface",
    "smarter",
    "intelligent",
    "use",
    "javascript",
    "write",
    "logic",
    "create",
    "features",
    "examples",
    "features",
    "user",
    "registration",
    "booking",
    "ticket",
    "online",
    "shopping",
    "sharing",
    "photos",
    "writing",
    "messages",
    "etc",
    "thinking",
    "websites",
    "built",
    "one",
    "separate",
    "design",
    "layer",
    "logic",
    "layer",
    "big",
    "complex",
    "applications",
    "used",
    "millions",
    "users",
    "part",
    "becomes",
    "big",
    "enough",
    "result",
    "also",
    "website",
    "designers",
    "also",
    "called",
    "ui",
    "designers",
    "javascript",
    "developers",
    "separate",
    "jobs",
    "maybe",
    "heard",
    "programming",
    "languages",
    "like",
    "java",
    "python",
    "c",
    "etc",
    "one",
    "sentence",
    "backend",
    "programming",
    "languages",
    "javascript",
    "frontend",
    "programming",
    "language",
    "fact",
    "javascript",
    "currently",
    "programming",
    "language",
    "use",
    "write",
    "front",
    "code",
    "make",
    "tangible",
    "let",
    "see",
    "html",
    "css",
    "javascript",
    "code",
    "actually",
    "looks",
    "like",
    "html",
    "css",
    "javascript",
    "simple",
    "files",
    "write",
    "text",
    "editor",
    "files",
    "texts",
    "keywords",
    "specific",
    "meanings",
    "browser",
    "words",
    "browser",
    "know",
    "exactly",
    "keywords",
    "question",
    "create",
    "file",
    "javascript",
    "keywords",
    "inside",
    "browser",
    "know",
    "javascript",
    "text",
    "knows",
    "tell",
    "explicitly",
    "using",
    "file",
    "extension",
    "typical",
    "simple",
    "file",
    "text",
    "extension",
    "txt",
    "example",
    "create",
    "file",
    "called",
    "example",
    "browser",
    "knows",
    "must",
    "interpret",
    "contents",
    "file",
    "javascript",
    "code",
    "works",
    "exactly",
    "html",
    "css",
    "note",
    "browsers",
    "also",
    "written",
    "developers",
    "using",
    "code",
    "functionality",
    "interpret",
    "html",
    "css",
    "javascript",
    "explicitly",
    "programmed",
    "made",
    "part",
    "modern",
    "browsers",
    "important",
    "mention",
    "learning",
    "html",
    "css",
    "pretty",
    "easy",
    "since",
    "handful",
    "concepts",
    "need",
    "understand",
    "learn",
    "change",
    "much",
    "time",
    "also",
    "less",
    "logical",
    "learning",
    "syntax",
    "heart",
    "use",
    "javascript",
    "hand",
    "dynamic",
    "much",
    "powerful",
    "since",
    "write",
    "almost",
    "logic",
    "javascript",
    "changes",
    "lot",
    "improves",
    "continuously",
    "make",
    "writing",
    "logic",
    "easier",
    "structured",
    "obviously",
    "look",
    "simple",
    "web",
    "application",
    "logic",
    "simple",
    "payment",
    "uploading",
    "picture",
    "writing",
    "message",
    "straightforward",
    "easy",
    "think",
    "complex",
    "websites",
    "use",
    "daily",
    "hundreds",
    "functionalities",
    "lot",
    "javascript",
    "code",
    "developers",
    "manage",
    "work",
    "challenging",
    "time",
    "many",
    "developers",
    "teams",
    "developers",
    "use",
    "javascript",
    "came",
    "different",
    "ways",
    "improve",
    "make",
    "easier",
    "better",
    "parallel",
    "independent",
    "also",
    "based",
    "ideas",
    "result",
    "different",
    "javascript",
    "quote",
    "unquote",
    "flavors",
    "call",
    "frameworks",
    "emerged",
    "framework",
    "basically",
    "improved",
    "version",
    "pure",
    "vanilla",
    "javascript",
    "offers",
    "additional",
    "concepts",
    "syntax",
    "top",
    "javascript",
    "concepts",
    "syntax",
    "makes",
    "writing",
    "complex",
    "javascript",
    "code",
    "easier",
    "frameworks",
    "help",
    "pretty",
    "much",
    "difference",
    "help",
    "write",
    "code",
    "structure",
    "manage",
    "naturally",
    "developers",
    "tried",
    "different",
    "frameworks",
    "handful",
    "best",
    "frameworks",
    "became",
    "widely",
    "accepted",
    "popular",
    "reactjs",
    "angularjs",
    "vuejs",
    "pure",
    "javascript",
    "javascript",
    "frameworks",
    "continuously",
    "developing",
    "improving",
    "parallel",
    "mention",
    "nodejs",
    "also",
    "javascript",
    "framework",
    "different",
    "others",
    "meant",
    "frontend",
    "code",
    "backand",
    "code",
    "alternative",
    "java",
    "python",
    "c",
    "etc",
    "means",
    "learn",
    "javascript",
    "able",
    "basically",
    "program",
    "whole",
    "web",
    "application",
    "front",
    "end",
    "backend",
    "using",
    "javascript",
    "could",
    "one",
    "incentive",
    "learn",
    "javascript",
    "means",
    "order",
    "learn",
    "frameworks",
    "mentioned",
    "first",
    "need",
    "understand",
    "basic",
    "javascript",
    "concepts",
    "syntax",
    "frameworks",
    "based",
    "javascript",
    "learned",
    "basic",
    "concepts",
    "javascript",
    "go",
    "ahead",
    "choose",
    "one",
    "frameworks",
    "learn",
    "much",
    "easier",
    "learn",
    "concepts",
    "syntax",
    "framework",
    "top",
    "javascript",
    "software",
    "engineering",
    "course",
    "learn",
    "javascript",
    "depth",
    "learn",
    "framework",
    "specifically",
    "build",
    "applications",
    "plus",
    "course",
    "point",
    "exactly",
    "compare",
    "advantages",
    "using",
    "framework",
    "compared",
    "vanilla",
    "javascript",
    "build",
    "applications",
    "next",
    "sections",
    "going",
    "cover",
    "basic",
    "concepts",
    "syntax",
    "javascript",
    "foundation",
    "learn",
    "javascript",
    "framework",
    "let",
    "start",
    "learning",
    "basic",
    "building",
    "blocks",
    "javascript",
    "data",
    "types",
    "variables",
    "look",
    "javascript",
    "five",
    "main",
    "data",
    "types",
    "show",
    "variables",
    "need",
    "know",
    "two",
    "building",
    "blocks",
    "whatever",
    "programming",
    "language",
    "learn",
    "java",
    "tutorial",
    "concepts",
    "would",
    "difference",
    "syntax",
    "good",
    "thing",
    "unlike",
    "learning",
    "natural",
    "languages",
    "learn",
    "one",
    "programming",
    "language",
    "much",
    "easier",
    "learn",
    "another",
    "one",
    "said",
    "let",
    "dive",
    "right",
    "simplest",
    "way",
    "start",
    "writing",
    "javascript",
    "directly",
    "browser",
    "since",
    "modern",
    "browsers",
    "able",
    "interpret",
    "javascript",
    "come",
    "packaged",
    "developer",
    "tools",
    "open",
    "either",
    "firefox",
    "chrome",
    "browser",
    "laptop",
    "browsers",
    "installed",
    "suggest",
    "install",
    "using",
    "browsers",
    "like",
    "internet",
    "explorer",
    "run",
    "execute",
    "javascript",
    "good",
    "idea",
    "would",
    "download",
    "either",
    "firefox",
    "chrome",
    "browser",
    "right",
    "click",
    "somewhere",
    "surface",
    "select",
    "inspect",
    "browser",
    "native",
    "language",
    "would",
    "called",
    "something",
    "else",
    "translate",
    "inspect",
    "click",
    "see",
    "something",
    "like",
    "space",
    "right",
    "called",
    "developer",
    "tools",
    "see",
    "console",
    "tab",
    "click",
    "get",
    "space",
    "write",
    "javascript",
    "directly",
    "next",
    "section",
    "show",
    "different",
    "places",
    "write",
    "execute",
    "javascript",
    "one",
    "usually",
    "use",
    "developer",
    "part",
    "going",
    "use",
    "browser",
    "console",
    "demonstrate",
    "simple",
    "examples",
    "first",
    "data",
    "type",
    "going",
    "talk",
    "numbers",
    "obviously",
    "writing",
    "application",
    "need",
    "numbers",
    "examples",
    "uh",
    "youtube",
    "displays",
    "number",
    "subscribers",
    "channel",
    "number",
    "likes",
    "video",
    "many",
    "videos",
    "one",
    "search",
    "something",
    "web",
    "application",
    "like",
    "google",
    "example",
    "usually",
    "see",
    "total",
    "heits",
    "uh",
    "etc",
    "use",
    "cases",
    "need",
    "numbers",
    "examples",
    "use",
    "whole",
    "numbers",
    "example",
    "online",
    "shop",
    "need",
    "display",
    "prices",
    "prices",
    "obviously",
    "wo",
    "whole",
    "numbers",
    "always",
    "rather",
    "decimal",
    "numbers",
    "send",
    "de",
    "ision",
    "also",
    "amazon",
    "ratings",
    "right",
    "example",
    "javascript",
    "data",
    "types",
    "whole",
    "numbers",
    "decimal",
    "numbers",
    "whole",
    "number",
    "data",
    "type",
    "called",
    "integer",
    "numbers",
    "like",
    "0",
    "300",
    "minus",
    "45",
    "positive",
    "negative",
    "numbers",
    "integers",
    "decimal",
    "numbers",
    "data",
    "type",
    "decimal",
    "positive",
    "negative",
    "zero",
    "um",
    "90",
    "777",
    "minus",
    "decimals",
    "second",
    "data",
    "type",
    "string",
    "way",
    "like",
    "explain",
    "string",
    "basically",
    "everything",
    "see",
    "keyboard",
    "obviously",
    "letters",
    "matter",
    "language",
    "also",
    "special",
    "characters",
    "like",
    "percent",
    "plus",
    "minus",
    "also",
    "space",
    "character",
    "keyboard",
    "also",
    "numbers",
    "numbers",
    "characters",
    "strings",
    "also",
    "javascript",
    "know",
    "whether",
    "mean",
    "number",
    "like",
    "integer",
    "decimal",
    "like",
    "five",
    "example",
    "character",
    "five",
    "knows",
    "using",
    "quotes",
    "tell",
    "javascript",
    "using",
    "string",
    "using",
    "quotes",
    "could",
    "single",
    "quotes",
    "double",
    "quotes",
    "single",
    "characters",
    "combination",
    "string",
    "let",
    "say",
    "couple",
    "examples",
    "three",
    "quotes",
    "string",
    "umls",
    "letters",
    "alphabets",
    "combination",
    "letters",
    "numbers",
    "special",
    "characters",
    "like",
    "email",
    "password",
    "also",
    "empty",
    "space",
    "character",
    "also",
    "string",
    "mention",
    "difference",
    "character",
    "string",
    "character",
    "basically",
    "one",
    "letter",
    "one",
    "number",
    "one",
    "special",
    "character",
    "string",
    "character",
    "combination",
    "multiple",
    "characters",
    "strings",
    "single",
    "keys",
    "characters",
    "another",
    "data",
    "type",
    "programming",
    "languages",
    "boolean",
    "understand",
    "let",
    "say",
    "enter",
    "wrong",
    "password",
    "logging",
    "application",
    "usually",
    "get",
    "message",
    "saying",
    "provided",
    "wrong",
    "password",
    "accidentally",
    "enter",
    "wrong",
    "credit",
    "card",
    "number",
    "uh",
    "buying",
    "tickets",
    "um",
    "invalid",
    "email",
    "address",
    "registering",
    "background",
    "developers",
    "write",
    "javascript",
    "code",
    "validates",
    "whether",
    "information",
    "provided",
    "wrong",
    "right",
    "correct",
    "express",
    "wrong",
    "correct",
    "state",
    "booleans",
    "used",
    "word",
    "true",
    "expresses",
    "correct",
    "state",
    "false",
    "expresses",
    "wrong",
    "state",
    "like",
    "numbers",
    "write",
    "simple",
    "string",
    "false",
    "quotes",
    "javascript",
    "know",
    "mean",
    "string",
    "without",
    "quotes",
    "boolean",
    "expression",
    "false",
    "javascript",
    "differentiate",
    "two",
    "addition",
    "true",
    "false",
    "also",
    "used",
    "simple",
    "yes",
    "situations",
    "like",
    "apartment",
    "airbnb",
    "available",
    "book",
    "date",
    "yes",
    "true",
    "false",
    "boolean",
    "terms",
    "user",
    "logged",
    "depending",
    "depending",
    "whether",
    "logged",
    "see",
    "different",
    "web",
    "page",
    "boolean",
    "expression",
    "premium",
    "user",
    "true",
    "false",
    "also",
    "bulling",
    "expression",
    "etc",
    "another",
    "data",
    "type",
    "array",
    "expresses",
    "lists",
    "think",
    "applications",
    "display",
    "lists",
    "kind",
    "data",
    "like",
    "list",
    "friends",
    "facebook",
    "list",
    "apartments",
    "airbnb",
    "list",
    "comments",
    "instagram",
    "picture",
    "lists",
    "data",
    "types",
    "programming",
    "languages",
    "javascript",
    "data",
    "type",
    "array",
    "example",
    "list",
    "friends",
    "names",
    "look",
    "like",
    "array",
    "array",
    "includes",
    "multiple",
    "names",
    "syntax",
    "array",
    "encloses",
    "square",
    "brackets",
    "javascript",
    "knows",
    "interpret",
    "dealing",
    "array",
    "could",
    "also",
    "list",
    "ratings",
    "amazon",
    "products",
    "example",
    "array",
    "numbers",
    "see",
    "array",
    "contains",
    "data",
    "types",
    "uh",
    "list",
    "strings",
    "numbers",
    "javascript",
    "mix",
    "different",
    "data",
    "types",
    "inside",
    "array",
    "integers",
    "decimals",
    "one",
    "array",
    "also",
    "write",
    "array",
    "like",
    "string",
    "integer",
    "boolean",
    "expression",
    "last",
    "data",
    "type",
    "javascript",
    "object",
    "amazon",
    "review",
    "example",
    "see",
    "list",
    "ratings",
    "also",
    "see",
    "author",
    "name",
    "next",
    "rating",
    "text",
    "wrote",
    "addition",
    "need",
    "information",
    "grouped",
    "one",
    "item",
    "array",
    "express",
    "using",
    "object",
    "data",
    "type",
    "single",
    "rating",
    "object",
    "look",
    "like",
    "syntax",
    "curly",
    "braces",
    "saw",
    "array",
    "expressed",
    "using",
    "square",
    "brackets",
    "object",
    "written",
    "using",
    "curly",
    "braces",
    "syntax",
    "important",
    "javascript",
    "understands",
    "data",
    "type",
    "writing",
    "another",
    "example",
    "apartment",
    "object",
    "airbnb",
    "include",
    "attributes",
    "like",
    "location",
    "price",
    "ratings",
    "description",
    "availability",
    "images",
    "etc",
    "object",
    "information",
    "look",
    "something",
    "like",
    "information",
    "inside",
    "see",
    "syntax",
    "highlighting",
    "browser",
    "also",
    "helping",
    "see",
    "strings",
    "booleans",
    "numbers",
    "colored",
    "uh",
    "different",
    "way",
    "meaning",
    "javascript",
    "understands",
    "difference",
    "see",
    "object",
    "key",
    "value",
    "pairs",
    "know",
    "value",
    "stands",
    "author",
    "name",
    "user",
    "12",
    "rating",
    "five",
    "key",
    "value",
    "pairs",
    "key",
    "basically",
    "describes",
    "value",
    "stands",
    "name",
    "key",
    "totally",
    "decide",
    "going",
    "also",
    "use",
    "data",
    "type",
    "value",
    "inside",
    "object",
    "string",
    "integer",
    "boolean",
    "array",
    "value",
    "also",
    "use",
    "another",
    "object",
    "value",
    "inside",
    "object",
    "finally",
    "uh",
    "go",
    "back",
    "ratings",
    "multiple",
    "rating",
    "objects",
    "list",
    "rating",
    "objects",
    "final",
    "list",
    "rating",
    "objects",
    "look",
    "like",
    "array",
    "square",
    "brackets",
    "bunch",
    "objects",
    "comma",
    "separated",
    "probably",
    "complex",
    "structure",
    "deal",
    "time",
    "get",
    "much",
    "complex",
    "saw",
    "data",
    "type",
    "example",
    "values",
    "use",
    "write",
    "logic",
    "javascript",
    "simplest",
    "use",
    "case",
    "basic",
    "addition",
    "subtraction",
    "etc",
    "numbers",
    "use",
    "simple",
    "arithmetic",
    "elementary",
    "school",
    "calculate",
    "basic",
    "things",
    "use",
    "chance",
    "break",
    "common",
    "misconception",
    "super",
    "good",
    "math",
    "learn",
    "programming",
    "completely",
    "100",
    "wrong",
    "software",
    "engineer",
    "many",
    "years",
    "worked",
    "lot",
    "different",
    "projects",
    "barely",
    "used",
    "anything",
    "advanced",
    "simple",
    "arithmetics",
    "like",
    "plus",
    "minus",
    "multiply",
    "divide",
    "writing",
    "web",
    "applications",
    "javascript",
    "subtraction",
    "multiply",
    "divide",
    "also",
    "combine",
    "like",
    "would",
    "calculator",
    "course",
    "desk",
    "decimals",
    "real",
    "life",
    "use",
    "cases",
    "basic",
    "arithmetics",
    "example",
    "add",
    "multiple",
    "items",
    "shopping",
    "card",
    "amazon",
    "see",
    "sum",
    "also",
    "see",
    "price",
    "breakdown",
    "item",
    "prices",
    "plus",
    "shipment",
    "costs",
    "product",
    "ratings",
    "based",
    "individual",
    "ratings",
    "display",
    "average",
    "rating",
    "uber",
    "example",
    "see",
    "distance",
    "pickup",
    "locations",
    "destination",
    "kilometers",
    "miles",
    "minutes",
    "simple",
    "calculations",
    "possible",
    "javascript",
    "obviously",
    "operators",
    "meant",
    "numbers",
    "case",
    "use",
    "plus",
    "operator",
    "string",
    "data",
    "types",
    "happen",
    "write",
    "string",
    "12",
    "string",
    "12",
    "get",
    "happened",
    "javascript",
    "knows",
    "two",
    "strings",
    "numbers",
    "instead",
    "adding",
    "handles",
    "strings",
    "gluing",
    "programming",
    "called",
    "string",
    "concatenation",
    "remember",
    "word",
    "know",
    "weird",
    "names",
    "simple",
    "things",
    "programming",
    "way",
    "glue",
    "string",
    "data",
    "type",
    "blah",
    "12",
    "number",
    "also",
    "turn",
    "string",
    "say",
    "boolean",
    "values",
    "javascript",
    "interprets",
    "want",
    "create",
    "another",
    "string",
    "two",
    "values",
    "examples",
    "probably",
    "make",
    "much",
    "sense",
    "next",
    "section",
    "video",
    "show",
    "real",
    "life",
    "examples",
    "concept",
    "actually",
    "important",
    "let",
    "understand",
    "one",
    "important",
    "building",
    "blocks",
    "programming",
    "language",
    "variables",
    "let",
    "see",
    "variables",
    "understand",
    "concept",
    "variables",
    "think",
    "following",
    "scenario",
    "change",
    "username",
    "facebook",
    "obviously",
    "changed",
    "username",
    "displayed",
    "profile",
    "also",
    "comments",
    "wrote",
    "name",
    "change",
    "appear",
    "new",
    "username",
    "also",
    "friends",
    "lists",
    "new",
    "username",
    "appear",
    "right",
    "means",
    "facebook",
    "code",
    "username",
    "written",
    "different",
    "places",
    "username",
    "profile",
    "section",
    "username",
    "comment",
    "one",
    "comment",
    "2",
    "etc",
    "friends",
    "lists",
    "right",
    "written",
    "directly",
    "let",
    "consider",
    "another",
    "example",
    "think",
    "online",
    "shop",
    "product",
    "price",
    "displayed",
    "list",
    "products",
    "detail",
    "page",
    "maybe",
    "also",
    "combination",
    "products",
    "store",
    "offers",
    "discount",
    "price",
    "changes",
    "obviously",
    "price",
    "updated",
    "location",
    "displayed",
    "code",
    "look",
    "something",
    "like",
    "obviously",
    "valid",
    "javascript",
    "code",
    "give",
    "idea",
    "somewhere",
    "one",
    "javascript",
    "file",
    "list",
    "products",
    "product",
    "price",
    "directly",
    "written",
    "detail",
    "page",
    "section",
    "product",
    "combination",
    "username",
    "product",
    "changes",
    "two",
    "scenarios",
    "variables",
    "need",
    "overwritten",
    "means",
    "go",
    "change",
    "price",
    "username",
    "change",
    "places",
    "used",
    "would",
    "absolutely",
    "inconvenient",
    "considering",
    "applications",
    "dynamic",
    "things",
    "change",
    "lot",
    "variables",
    "come",
    "instead",
    "writing",
    "actual",
    "value",
    "10",
    "different",
    "places",
    "write",
    "value",
    "reference",
    "10",
    "times",
    "10",
    "different",
    "places",
    "reference",
    "actual",
    "value",
    "called",
    "variable",
    "give",
    "variables",
    "name",
    "makes",
    "sense",
    "value",
    "example",
    "product",
    "price",
    "equals",
    "50",
    "create",
    "reference",
    "value",
    "50",
    "called",
    "product",
    "price",
    "username",
    "equals",
    "app",
    "user",
    "take",
    "actual",
    "value",
    "string",
    "create",
    "reference",
    "addition",
    "also",
    "let",
    "javascript",
    "know",
    "explicitly",
    "random",
    "name",
    "came",
    "variable",
    "using",
    "var",
    "keyword",
    "like",
    "remember",
    "keywords",
    "words",
    "special",
    "meaning",
    "javascript",
    "noticed",
    "coloring",
    "highlighting",
    "word",
    "changed",
    "added",
    "var",
    "front",
    "javascript",
    "knows",
    "variable",
    "keyword",
    "name",
    "reference",
    "variable",
    "product",
    "price",
    "variable",
    "code",
    "look",
    "like",
    "first",
    "create",
    "reference",
    "somewhere",
    "like",
    "locations",
    "places",
    "javascript",
    "code",
    "need",
    "value",
    "actual",
    "number",
    "value",
    "use",
    "reference",
    "instead",
    "actual",
    "value",
    "text",
    "reference",
    "number",
    "different",
    "locations",
    "note",
    "plus",
    "operator",
    "showed",
    "earlier",
    "example",
    "string",
    "cenation",
    "meaning",
    "string",
    "glued",
    "another",
    "value",
    "concept",
    "useful",
    "run",
    "execute",
    "line",
    "happens",
    "javascript",
    "background",
    "replaces",
    "reference",
    "actual",
    "value",
    "execute",
    "see",
    "product",
    "price",
    "50",
    "real",
    "example",
    "plus",
    "operator",
    "strings",
    "actually",
    "important",
    "use",
    "lot",
    "use",
    "variables",
    "lot",
    "order",
    "make",
    "variable",
    "concept",
    "stick",
    "let",
    "consider",
    "two",
    "additional",
    "use",
    "cases",
    "first",
    "consider",
    "multilanguage",
    "applications",
    "applications",
    "select",
    "preferred",
    "language",
    "see",
    "navigation",
    "buttons",
    "etc",
    "language",
    "application",
    "supports",
    "10",
    "languages",
    "obviously",
    "developers",
    "create",
    "10",
    "different",
    "websites",
    "instead",
    "text",
    "translated",
    "10",
    "different",
    "languages",
    "reference",
    "using",
    "variables",
    "depending",
    "language",
    "user",
    "selects",
    "correct",
    "reference",
    "used",
    "second",
    "use",
    "case",
    "important",
    "user",
    "input",
    "sign",
    "web",
    "application",
    "need",
    "enter",
    "name",
    "last",
    "name",
    "email",
    "password",
    "user",
    "inputs",
    "input",
    "application",
    "developer",
    "prepare",
    "code",
    "future",
    "usage",
    "know",
    "values",
    "going",
    "users",
    "enter",
    "anything",
    "know",
    "name",
    "variables",
    "reference",
    "values",
    "way",
    "use",
    "actual",
    "values",
    "without",
    "even",
    "knowing",
    "question",
    "create",
    "javascript",
    "files",
    "write",
    "lots",
    "javascript",
    "logic",
    "inside",
    "run",
    "logic",
    "browser",
    "give",
    "javascript",
    "code",
    "browser",
    "execute",
    "three",
    "ways",
    "execute",
    "javascript",
    "code",
    "simplest",
    "way",
    "start",
    "writing",
    "javascript",
    "directly",
    "browser",
    "place",
    "write",
    "javascript",
    "directly",
    "browser",
    "interpret",
    "execute",
    "javascript",
    "code",
    "right",
    "set",
    "anything",
    "easiest",
    "way",
    "start",
    "especially",
    "want",
    "try",
    "simple",
    "commands",
    "let",
    "actually",
    "write",
    "javascript",
    "code",
    "create",
    "variables",
    "calculations",
    "number",
    "one",
    "number",
    "two",
    "etc",
    "many",
    "things",
    "however",
    "refresh",
    "page",
    "course",
    "code",
    "gone",
    "also",
    "execute",
    "one",
    "command",
    "time",
    "usually",
    "developing",
    "want",
    "save",
    "code",
    "execute",
    "whole",
    "thing",
    "disappear",
    "every",
    "time",
    "refresh",
    "browser",
    "need",
    "write",
    "javascript",
    "file",
    "give",
    "file",
    "browser",
    "order",
    "execute",
    "code",
    "inside",
    "file",
    "browser",
    "accepts",
    "execute",
    "javascript",
    "code",
    "html",
    "going",
    "create",
    "basic",
    "html",
    "outline",
    "browser",
    "execute",
    "javascript",
    "code",
    "write",
    "html",
    "file",
    "javascript",
    "code",
    "editor",
    "windows",
    "may",
    "notepad",
    "simple",
    "text",
    "editor",
    "ionm",
    "text",
    "edit",
    "create",
    "new",
    "document",
    "open",
    "write",
    "normal",
    "text",
    "going",
    "write",
    "simple",
    "html",
    "text",
    "html",
    "saw",
    "beginning",
    "separate",
    "scripting",
    "language",
    "basically",
    "write",
    "structure",
    "website",
    "teach",
    "complete",
    "html",
    "css",
    "software",
    "development",
    "miniot",
    "camp",
    "focus",
    "javascript",
    "going",
    "use",
    "basic",
    "html",
    "possible",
    "able",
    "execute",
    "javascript",
    "website",
    "maybe",
    "wondering",
    "writing",
    "html",
    "editor",
    "would",
    "write",
    "normal",
    "text",
    "browser",
    "know",
    "html",
    "file",
    "well",
    "save",
    "file",
    "instead",
    "text",
    "document",
    "going",
    "choose",
    "html",
    "html",
    "extension",
    "going",
    "call",
    "file",
    "index",
    "standard",
    "common",
    "name",
    "main",
    "html",
    "file",
    "save",
    "also",
    "see",
    "icon",
    "chrome",
    "logo",
    "maybe",
    "browser",
    "logo",
    "means",
    "browser",
    "executable",
    "since",
    "html",
    "order",
    "add",
    "javascript",
    "code",
    "going",
    "add",
    "tag",
    "called",
    "script",
    "javascript",
    "goes",
    "part",
    "write",
    "javascript",
    "code",
    "example",
    "create",
    "variable",
    "called",
    "name",
    "said",
    "write",
    "whole",
    "html",
    "javascript",
    "problem",
    "using",
    "simple",
    "editor",
    "help",
    "writing",
    "code",
    "see",
    "highlight",
    "keywords",
    "tell",
    "made",
    "syntax",
    "error",
    "tips",
    "example",
    "browser",
    "wrote",
    "var",
    "name",
    "name",
    "get",
    "highlighting",
    "keyword",
    "variable",
    "name",
    "data",
    "type",
    "example",
    "number",
    "different",
    "highlighting",
    "etc",
    "simple",
    "editor",
    "also",
    "looks",
    "pretty",
    "ugly",
    "instead",
    "special",
    "editors",
    "different",
    "programming",
    "languages",
    "help",
    "highlighting",
    "features",
    "write",
    "code",
    "special",
    "ones",
    "writing",
    "html",
    "javascript",
    "code",
    "specifically",
    "one",
    "using",
    "course",
    "webstorm",
    "jetbrains",
    "actually",
    "integrated",
    "development",
    "environment",
    "ide",
    "simple",
    "code",
    "editor",
    "mean",
    "exactly",
    "well",
    "install",
    "webstorm",
    "basically",
    "everything",
    "need",
    "website",
    "development",
    "various",
    "features",
    "beyond",
    "writing",
    "code",
    "included",
    "box",
    "words",
    "get",
    "ide",
    "full",
    "batteries",
    "included",
    "see",
    "cool",
    "features",
    "throughout",
    "course",
    "type",
    "webstorm",
    "download",
    "check",
    "download",
    "page",
    "specific",
    "operating",
    "system",
    "click",
    "developer",
    "tools",
    "actually",
    "see",
    "list",
    "multiple",
    "idees",
    "dedicated",
    "idees",
    "different",
    "programming",
    "languages",
    "webstorm",
    "specifically",
    "javascript",
    "gives",
    "us",
    "awesome",
    "features",
    "specifically",
    "javascript",
    "development",
    "great",
    "thing",
    "special",
    "offers",
    "students",
    "universities",
    "startups",
    "idees",
    "including",
    "webstorm",
    "let",
    "go",
    "ahead",
    "download",
    "webstorm",
    "ide",
    "free",
    "develop",
    "javascript",
    "application",
    "using",
    "mac",
    "os",
    "going",
    "download",
    "one",
    "downloaded",
    "double",
    "click",
    "installer",
    "file",
    "let",
    "drag",
    "webstorm",
    "applications",
    "go",
    "webstorm",
    "available",
    "locally",
    "let",
    "double",
    "click",
    "going",
    "open",
    "webstorm",
    "ide",
    "welcome",
    "page",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "product",
    "project",
    "let",
    "call",
    "javascript",
    "app",
    "create",
    "webstor",
    "settings",
    "actually",
    "going",
    "zoom",
    "see",
    "code",
    "better",
    "going",
    "set",
    "150",
    "go",
    "starting",
    "let",
    "create",
    "new",
    "file",
    "javascript",
    "application",
    "project",
    "go",
    "right",
    "click",
    "mouse",
    "see",
    "options",
    "create",
    "new",
    "generic",
    "file",
    "know",
    "going",
    "writing",
    "javascript",
    "html",
    "file",
    "actually",
    "choose",
    "specifically",
    "type",
    "file",
    "way",
    "webstorm",
    "actually",
    "knows",
    "want",
    "write",
    "html",
    "javascript",
    "code",
    "actually",
    "helps",
    "create",
    "boilerplate",
    "code",
    "initial",
    "code",
    "file",
    "specifically",
    "let",
    "see",
    "happens",
    "choose",
    "html",
    "file",
    "options",
    "let",
    "call",
    "file",
    "like",
    "know",
    "html",
    "extension",
    "file",
    "name",
    "hit",
    "enter",
    "go",
    "webstorm",
    "actually",
    "knows",
    "basic",
    "html",
    "structure",
    "tags",
    "needed",
    "proper",
    "html",
    "page",
    "autogenerated",
    "type",
    "scratch",
    "super",
    "convenient",
    "let",
    "give",
    "web",
    "page",
    "tiple",
    "let",
    "call",
    "js",
    "app",
    "like",
    "ignore",
    "actually",
    "code",
    "autogenerated",
    "kind",
    "structure",
    "main",
    "structure",
    "properly",
    "formatted",
    "html",
    "everything",
    "needed",
    "right",
    "want",
    "focus",
    "writing",
    "javascript",
    "code",
    "check",
    "index",
    "html",
    "file",
    "wrote",
    "script",
    "text",
    "javascript",
    "code",
    "inside",
    "going",
    "copy",
    "block",
    "already",
    "body",
    "tags",
    "script",
    "tags",
    "usually",
    "go",
    "inside",
    "head",
    "texs",
    "opening",
    "closing",
    "head",
    "texs",
    "body",
    "texs",
    "case",
    "going",
    "add",
    "head",
    "soon",
    "paste",
    "script",
    "block",
    "webstorm",
    "ide",
    "already",
    "highlights",
    "issues",
    "syntax",
    "use",
    "simple",
    "text",
    "edit",
    "editor",
    "wrong",
    "characters",
    "ca",
    "interpreted",
    "browser",
    "need",
    "fix",
    "know",
    "red",
    "underlines",
    "error",
    "orange",
    "underlines",
    "warning",
    "need",
    "fixed",
    "otherwise",
    "javascript",
    "going",
    "work",
    "simply",
    "going",
    "replace",
    "standard",
    "quotes",
    "basically",
    "see",
    "syntax",
    "highlighting",
    "value",
    "assignment",
    "variable",
    "working",
    "error",
    "gone",
    "notice",
    "another",
    "underline",
    "warning",
    "means",
    "code",
    "going",
    "work",
    "fine",
    "without",
    "issues",
    "could",
    "make",
    "improvement",
    "code",
    "says",
    "var",
    "used",
    "instead",
    "let",
    "const",
    "back",
    "day",
    "javascript",
    "early",
    "phases",
    "var",
    "keyword",
    "used",
    "declare",
    "variables",
    "later",
    "javascript",
    "programming",
    "language",
    "evolved",
    "improved",
    "engineers",
    "developing",
    "javascript",
    "programming",
    "language",
    "made",
    "improvements",
    "two",
    "alternatives",
    "added",
    "defining",
    "variables",
    "let",
    "const",
    "keywords",
    "reason",
    "improvement",
    "main",
    "benefit",
    "prevent",
    "basically",
    "accidentally",
    "overwriting",
    "variable",
    "values",
    "javascript",
    "flexible",
    "great",
    "also",
    "means",
    "means",
    "make",
    "lots",
    "accidental",
    "mistakes",
    "one",
    "defining",
    "variable",
    "multiple",
    "times",
    "accidentally",
    "overwriting",
    "previous",
    "variable",
    "know",
    "already",
    "variable",
    "code",
    "two",
    "alternatives",
    "con",
    "basically",
    "use",
    "cases",
    "define",
    "variable",
    "basically",
    "value",
    "want",
    "reference",
    "multiple",
    "places",
    "value",
    "never",
    "change",
    "example",
    "developing",
    "application",
    "nike",
    "name",
    "shop",
    "brand",
    "name",
    "nike",
    "never",
    "change",
    "right",
    "imagine",
    "someone",
    "overwriting",
    "name",
    "brand",
    "name",
    "shop",
    "nike",
    "something",
    "else",
    "value",
    "change",
    "dynamically",
    "within",
    "program",
    "within",
    "application",
    "thousands",
    "lines",
    "code",
    "line",
    "overrides",
    "value",
    "brand",
    "happens",
    "accidentally",
    "mistake",
    "developer",
    "fact",
    "using",
    "const",
    "front",
    "tell",
    "javascript",
    "program",
    "overwrite",
    "value",
    "variable",
    "use",
    "cases",
    "want",
    "allow",
    "program",
    "change",
    "variable",
    "value",
    "use",
    "let",
    "instead",
    "var",
    "example",
    "would",
    "prices",
    "different",
    "items",
    "days",
    "campaign",
    "price",
    "dynamically",
    "change",
    "discounts",
    "get",
    "applied",
    "example",
    "customer",
    "name",
    "change",
    "username",
    "whatever",
    "value",
    "could",
    "change",
    "well",
    "using",
    "let",
    "variables",
    "instead",
    "var",
    "good",
    "practice",
    "see",
    "webstorm",
    "helping",
    "us",
    "especially",
    "beginner",
    "developers",
    "learn",
    "syntax",
    "issues",
    "well",
    "good",
    "programming",
    "practices",
    "fully",
    "functioning",
    "html",
    "file",
    "javascript",
    "code",
    "inside",
    "working",
    "properly",
    "written",
    "question",
    "execute",
    "index",
    "html",
    "file",
    "browser",
    "take",
    "file",
    "contents",
    "make",
    "work",
    "browser",
    "couple",
    "simple",
    "ways",
    "going",
    "show",
    "options",
    "compare",
    "first",
    "easy",
    "option",
    "drag",
    "drop",
    "file",
    "browser",
    "open",
    "new",
    "tab",
    "browser",
    "need",
    "locate",
    "file",
    "file",
    "explorer",
    "navigating",
    "directly",
    "file",
    "using",
    "location",
    "see",
    "home",
    "directory",
    "called",
    "nana",
    "inside",
    "webstorm",
    "projects",
    "automatically",
    "gets",
    "created",
    "way",
    "webstorm",
    "inside",
    "js",
    "app",
    "also",
    "save",
    "right",
    "click",
    "file",
    "open",
    "finder",
    "go",
    "back",
    "browser",
    "one",
    "way",
    "execute",
    "browser",
    "take",
    "file",
    "drop",
    "inside",
    "browser",
    "go",
    "see",
    "anything",
    "white",
    "blank",
    "page",
    "displaying",
    "anything",
    "creating",
    "variable",
    "even",
    "using",
    "open",
    "inspect",
    "developer",
    "tools",
    "browser",
    "see",
    "exactly",
    "script",
    "inside",
    "one",
    "way",
    "second",
    "also",
    "simple",
    "way",
    "simply",
    "double",
    "click",
    "open",
    "fresh",
    "new",
    "browser",
    "tab",
    "like",
    "page",
    "contents",
    "note",
    "title",
    "js",
    "app",
    "displayed",
    "defined",
    "right",
    "title",
    "web",
    "page",
    "two",
    "ways",
    "executing",
    "file",
    "specifically",
    "using",
    "web",
    "stor",
    "actually",
    "way",
    "convenient",
    "open",
    "file",
    "directly",
    "using",
    "one",
    "browser",
    "icons",
    "webstorm",
    "actually",
    "detects",
    "browsers",
    "available",
    "show",
    "icons",
    "open",
    "html",
    "file",
    "one",
    "browsers",
    "click",
    "inside",
    "side",
    "opens",
    "new",
    "browser",
    "tab",
    "automatically",
    "title",
    "even",
    "webstorm",
    "logo",
    "see",
    "value",
    "inside",
    "browser",
    "url",
    "different",
    "coming",
    "directly",
    "web",
    "store",
    "inspect",
    "go",
    "code",
    "final",
    "probably",
    "convenient",
    "way",
    "opening",
    "file",
    "browser",
    "using",
    "web",
    "storms",
    "browser",
    "preview",
    "let",
    "click",
    "see",
    "happens",
    "see",
    "shows",
    "us",
    "browser",
    "integrated",
    "directly",
    "web",
    "storms",
    "ide",
    "leads",
    "back",
    "name",
    "ide",
    "stands",
    "integrated",
    "development",
    "environment",
    "basically",
    "environment",
    "tools",
    "things",
    "need",
    "application",
    "development",
    "directly",
    "integrated",
    "environment",
    "convenient",
    "part",
    "obviously",
    "need",
    "switch",
    "ide",
    "browser",
    "everything",
    "one",
    "place",
    "folder",
    "file",
    "structure",
    "code",
    "editor",
    "browser",
    "cool",
    "thing",
    "right",
    "text",
    "displayed",
    "website",
    "let",
    "actually",
    "display",
    "something",
    "see",
    "works",
    "awesome",
    "javascript",
    "application",
    "soon",
    "save",
    "way",
    "shortcut",
    "saving",
    "command",
    "mech",
    "control",
    "windows",
    "soon",
    "save",
    "notice",
    "text",
    "displayed",
    "right",
    "away",
    "right",
    "add",
    "something",
    "changes",
    "directly",
    "displayed",
    "saves",
    "lot",
    "time",
    "actually",
    "actively",
    "developing",
    "making",
    "thousands",
    "changes",
    "refresh",
    "reload",
    "time",
    "available",
    "box",
    "case",
    "actually",
    "going",
    "stick",
    "browser",
    "want",
    "use",
    "browser",
    "developer",
    "tools",
    "going",
    "outputting",
    "stuff",
    "tutorial",
    "specifically",
    "however",
    "developing",
    "writing",
    "html",
    "code",
    "would",
    "actually",
    "go",
    "preview",
    "feature",
    "let",
    "close",
    "already",
    "application",
    "open",
    "browser",
    "noticed",
    "browser",
    "well",
    "without",
    "refreshing",
    "reloading",
    "page",
    "changes",
    "automatically",
    "applied",
    "let",
    "go",
    "back",
    "remove",
    "let",
    "save",
    "go",
    "back",
    "changes",
    "applied",
    "auto",
    "sync",
    "automatically",
    "reload",
    "save",
    "open",
    "using",
    "one",
    "browser",
    "icons",
    "know",
    "notice",
    "different",
    "directly",
    "drag",
    "drop",
    "file",
    "browser",
    "would",
    "explicitly",
    "refresh",
    "apply",
    "changes",
    "may",
    "look",
    "like",
    "small",
    "thing",
    "getting",
    "started",
    "however",
    "little",
    "bit",
    "experienced",
    "developing",
    "actively",
    "may",
    "save",
    "lot",
    "time",
    "lot",
    "nerves",
    "awesome",
    "want",
    "also",
    "display",
    "stuff",
    "browser",
    "console",
    "add",
    "line",
    "console",
    "log",
    "basically",
    "outputs",
    "whatever",
    "pass",
    "browser",
    "pass",
    "variable",
    "reference",
    "stream",
    "directly",
    "like",
    "soon",
    "save",
    "automatically",
    "reloaded",
    "browser",
    "go",
    "variable",
    "value",
    "whatever",
    "wrote",
    "directly",
    "basically",
    "prints",
    "stuff",
    "directly",
    "console",
    "tab",
    "right",
    "imagine",
    "actually",
    "wrote",
    "html",
    "web",
    "page",
    "structure",
    "right",
    "within",
    "body",
    "tex",
    "actually",
    "large",
    "html",
    "file",
    "addition",
    "wrote",
    "lot",
    "javascript",
    "functionality",
    "within",
    "script",
    "texts",
    "pretty",
    "inconvenient",
    "lots",
    "lines",
    "code",
    "within",
    "one",
    "file",
    "html",
    "javascript",
    "maybe",
    "thousands",
    "lines",
    "code",
    "makes",
    "difficult",
    "us",
    "overview",
    "things",
    "file",
    "contains",
    "kind",
    "mixing",
    "two",
    "different",
    "things",
    "within",
    "one",
    "file",
    "programming",
    "code",
    "grows",
    "always",
    "good",
    "practice",
    "keep",
    "code",
    "clean",
    "multiple",
    "files",
    "file",
    "contains",
    "limited",
    "number",
    "code",
    "lines",
    "easily",
    "navigate",
    "application",
    "code",
    "new",
    "team",
    "members",
    "new",
    "developers",
    "joining",
    "project",
    "team",
    "easily",
    "navigate",
    "application",
    "code",
    "always",
    "good",
    "practice",
    "code",
    "clean",
    "especially",
    "separate",
    "functionalities",
    "html",
    "css",
    "javascript",
    "means",
    "instead",
    "javascript",
    "code",
    "directly",
    "inside",
    "want",
    "actually",
    "separate",
    "javascript",
    "file",
    "link",
    "super",
    "simple",
    "actually",
    "first",
    "thing",
    "want",
    "create",
    "dedicated",
    "javascript",
    "file",
    "instead",
    "javascript",
    "directly",
    "html",
    "file",
    "going",
    "back",
    "right",
    "click",
    "mouse",
    "time",
    "going",
    "create",
    "new",
    "javascript",
    "file",
    "going",
    "call",
    "notice",
    "js",
    "extension",
    "file",
    "name",
    "way",
    "browser",
    "know",
    "javascript",
    "file",
    "hit",
    "enter",
    "also",
    "see",
    "different",
    "icons",
    "webstorm",
    "displays",
    "different",
    "file",
    "types",
    "even",
    "extensions",
    "files",
    "looking",
    "icons",
    "know",
    "javascript",
    "file",
    "html",
    "obviously",
    "types",
    "files",
    "icons",
    "well",
    "going",
    "simply",
    "take",
    "javascript",
    "code",
    "defined",
    "within",
    "script",
    "text",
    "going",
    "cut",
    "use",
    "shortcut",
    "going",
    "paste",
    "directly",
    "notice",
    "javascript",
    "file",
    "need",
    "text",
    "write",
    "javascript",
    "line",
    "line",
    "like",
    "notice",
    "webstorm",
    "detecting",
    "javascript",
    "file",
    "actually",
    "provides",
    "additional",
    "functionality",
    "even",
    "code",
    "one",
    "showing",
    "data",
    "type",
    "variable",
    "based",
    "value",
    "automatically",
    "detected",
    "string",
    "variable",
    "basically",
    "showing",
    "additional",
    "hint",
    "help",
    "us",
    "programming",
    "however",
    "done",
    "yet",
    "empty",
    "scripts",
    "linking",
    "connection",
    "html",
    "javascript",
    "file",
    "need",
    "actually",
    "tell",
    "html",
    "file",
    "get",
    "script",
    "somewhere",
    "need",
    "source",
    "new",
    "javascript",
    "code",
    "way",
    "define",
    "leave",
    "section",
    "empty",
    "nothing",
    "actually",
    "goes",
    "script",
    "tags",
    "instead",
    "within",
    "opening",
    "script",
    "tag",
    "define",
    "source",
    "src",
    "basically",
    "pointer",
    "javascript",
    "file",
    "contains",
    "script",
    "want",
    "load",
    "part",
    "html",
    "page",
    "see",
    "super",
    "conveniently",
    "webstorm",
    "automatically",
    "suggesting",
    "us",
    "files",
    "current",
    "project",
    "tells",
    "us",
    "want",
    "reference",
    "epto",
    "js",
    "click",
    "basically",
    "automatically",
    "sets",
    "source",
    "name",
    "right",
    "gives",
    "us",
    "link",
    "want",
    "super",
    "convenient",
    "especially",
    "beginner",
    "ide",
    "provides",
    "additional",
    "explainers",
    "telling",
    "different",
    "tags",
    "said",
    "nothing",
    "actually",
    "goes",
    "script",
    "tags",
    "leave",
    "empty",
    "load",
    "script",
    "defined",
    "directly",
    "separate",
    "javascript",
    "file",
    "order",
    "test",
    "going",
    "make",
    "change",
    "javascript",
    "code",
    "going",
    "see",
    "whether",
    "actually",
    "reloaded",
    "browser",
    "save",
    "going",
    "say",
    "output",
    "console",
    "file",
    "going",
    "save",
    "make",
    "sure",
    "save",
    "changes",
    "files",
    "save",
    "changes",
    "webstorm",
    "going",
    "reloaded",
    "browser",
    "let",
    "check",
    "back",
    "browser",
    "without",
    "refresh",
    "see",
    "output",
    "console",
    "file",
    "go",
    "back",
    "elements",
    "html",
    "tags",
    "body",
    "see",
    "script",
    "linking",
    "another",
    "element",
    "also",
    "loaded",
    "browser",
    "along",
    "html",
    "file",
    "also",
    "interesting",
    "important",
    "html",
    "elements",
    "page",
    "however",
    "go",
    "sources",
    "tab",
    "right",
    "see",
    "file",
    "file",
    "wrote",
    "additional",
    "stuff",
    "webstorm",
    "actually",
    "adds",
    "index",
    "html",
    "automatically",
    "give",
    "us",
    "automatic",
    "loading",
    "file",
    "also",
    "loaded",
    "alongside",
    "check",
    "sources",
    "previous",
    "script",
    "directly",
    "see",
    "javascript",
    "file",
    "html",
    "let",
    "learn",
    "next",
    "important",
    "concepts",
    "conditionals",
    "comparison",
    "operators",
    "also",
    "common",
    "concepts",
    "across",
    "programming",
    "languages",
    "terms",
    "sound",
    "scary",
    "going",
    "explain",
    "simple",
    "examples",
    "visualizations",
    "make",
    "sure",
    "understand",
    "easily",
    "first",
    "let",
    "see",
    "comparison",
    "operators",
    "let",
    "consider",
    "example",
    "facebook",
    "featured",
    "display",
    "birthdays",
    "users",
    "basically",
    "today",
    "birthday",
    "facebook",
    "show",
    "birthday",
    "icon",
    "send",
    "notifications",
    "friends",
    "facebook",
    "check",
    "whether",
    "birthday",
    "today",
    "basically",
    "compare",
    "today",
    "birth",
    "date",
    "right",
    "comparison",
    "equals",
    "javascript",
    "expressed",
    "three",
    "comparison",
    "signs",
    "like",
    "one",
    "comparison",
    "sign",
    "reserved",
    "assigning",
    "variables",
    "double",
    "triple",
    "equal",
    "signs",
    "used",
    "check",
    "equality",
    "two",
    "values",
    "let",
    "see",
    "difference",
    "two",
    "let",
    "say",
    "variable",
    "h",
    "30",
    "compare",
    "value",
    "variable",
    "h",
    "30",
    "get",
    "true",
    "right",
    "triple",
    "compare",
    "also",
    "get",
    "true",
    "results",
    "compare",
    "value",
    "string",
    "representation",
    "30",
    "also",
    "get",
    "true",
    "however",
    "triple",
    "check",
    "get",
    "false",
    "difference",
    "two",
    "double",
    "comparison",
    "checks",
    "equality",
    "values",
    "two",
    "sides",
    "checks",
    "value",
    "checks",
    "value",
    "compares",
    "value",
    "triple",
    "equality",
    "compares",
    "value",
    "also",
    "type",
    "data",
    "type",
    "values",
    "number",
    "number",
    "values",
    "going",
    "true",
    "number",
    "value",
    "defined",
    "string",
    "value",
    "value",
    "get",
    "false",
    "data",
    "types",
    "difference",
    "obviously",
    "put",
    "another",
    "value",
    "going",
    "false",
    "case",
    "right",
    "like",
    "like",
    "really",
    "matter",
    "little",
    "difference",
    "actually",
    "big",
    "impact",
    "concept",
    "important",
    "javascript",
    "general",
    "rule",
    "cases",
    "use",
    "triple",
    "equation",
    "compare",
    "two",
    "values",
    "let",
    "consider",
    "another",
    "example",
    "order",
    "something",
    "amazon",
    "says",
    "shipping",
    "free",
    "purchase",
    "add",
    "things",
    "card",
    "program",
    "checks",
    "whether",
    "order",
    "total",
    "20",
    "20",
    "calculates",
    "shipment",
    "cost",
    "based",
    "let",
    "say",
    "charges",
    "you5",
    "total",
    "order",
    "equal",
    "check",
    "anymore",
    "rather",
    "higher",
    "lower",
    "way",
    "check",
    "let",
    "clear",
    "let",
    "define",
    "variables",
    "total",
    "price",
    "let",
    "say",
    "gathered",
    "items",
    "program",
    "checks",
    "total",
    "price",
    "greater",
    "20",
    "get",
    "bullan",
    "expression",
    "false",
    "condition",
    "wrong",
    "way",
    "program",
    "also",
    "check",
    "opposite",
    "direction",
    "check",
    "whether",
    "total",
    "price",
    "20",
    "notice",
    "check",
    "value",
    "20",
    "happens",
    "total",
    "price",
    "exactly",
    "20",
    "basically",
    "need",
    "check",
    "total",
    "price",
    "20",
    "cases",
    "get",
    "charged",
    "shipping",
    "order",
    "combine",
    "two",
    "expressions",
    "say",
    "like",
    "either",
    "less",
    "20",
    "exactly",
    "20",
    "see",
    "comparisons",
    "return",
    "boolean",
    "expression",
    "either",
    "false",
    "true",
    "one",
    "outcomes",
    "possible",
    "means",
    "program",
    "check",
    "condition",
    "comes",
    "true",
    "want",
    "offer",
    "free",
    "shipping",
    "otherwise",
    "want",
    "charge",
    "shipping",
    "way",
    "going",
    "written",
    "inside",
    "program",
    "using",
    "javascript",
    "syntax",
    "tour",
    "price",
    "greater",
    "20",
    "code",
    "let",
    "say",
    "calculates",
    "um",
    "sets",
    "price",
    "shipping",
    "set",
    "zero",
    "shipping",
    "cost",
    "otherwise",
    "expressed",
    "else",
    "shipping",
    "cost",
    "equals",
    "5",
    "conditions",
    "used",
    "javascript",
    "check",
    "condition",
    "based",
    "either",
    "switched",
    "condition",
    "also",
    "check",
    "total",
    "price",
    "less",
    "equal",
    "20",
    "shipping",
    "cost",
    "set",
    "five",
    "otherwise",
    "shipping",
    "cost",
    "zero",
    "go",
    "back",
    "technical",
    "terms",
    "javascript",
    "called",
    "else",
    "statements",
    "whatever",
    "inside",
    "called",
    "condition",
    "thing",
    "evaluates",
    "either",
    "true",
    "false",
    "condition",
    "compares",
    "two",
    "values",
    "called",
    "comparison",
    "operator",
    "greater",
    "smaller",
    "equals",
    "etc",
    "comparison",
    "operators",
    "let",
    "say",
    "case",
    "three",
    "different",
    "shipping",
    "costs",
    "right",
    "example",
    "price",
    "get",
    "charged",
    "5",
    "shipping",
    "cost",
    "20",
    "get",
    "charged",
    "20",
    "get",
    "charged",
    "nothing",
    "else",
    "three",
    "conditions",
    "also",
    "super",
    "simple",
    "else",
    "basically",
    "check",
    "total",
    "price",
    "less",
    "equal",
    "10",
    "get",
    "charged",
    "5",
    "going",
    "say",
    "else",
    "another",
    "statement",
    "write",
    "conditional",
    "going",
    "check",
    "whether",
    "total",
    "price",
    "less",
    "equal",
    "20",
    "case",
    "get",
    "charged",
    "comes",
    "final",
    "else",
    "zero",
    "three",
    "conditions",
    "first",
    "condition",
    "says",
    "less",
    "equal",
    "10",
    "first",
    "one",
    "checks",
    "another",
    "condition",
    "third",
    "one",
    "um",
    "important",
    "thing",
    "note",
    "last",
    "else",
    "else",
    "condition",
    "explicitly",
    "implies",
    "conditions",
    "false",
    "wrong",
    "implicit",
    "check",
    "explicitly",
    "could",
    "also",
    "go",
    "else",
    "price",
    "greater",
    "20",
    "work",
    "fine",
    "however",
    "implicit",
    "need",
    "saw",
    "comparisons",
    "two",
    "values",
    "using",
    "equals",
    "higher",
    "lower",
    "final",
    "operator",
    "equals",
    "example",
    "consider",
    "feature",
    "web",
    "application",
    "checks",
    "whether",
    "user",
    "premium",
    "member",
    "obviously",
    "premium",
    "user",
    "wo",
    "see",
    "cool",
    "features",
    "wo",
    "able",
    "access",
    "premium",
    "content",
    "log",
    "program",
    "check",
    "user",
    "membership",
    "premium",
    "equals",
    "check",
    "user",
    "membership",
    "premium",
    "order",
    "express",
    "negative",
    "comparison",
    "use",
    "syntax",
    "equals",
    "javascript",
    "expressed",
    "exclamation",
    "mark",
    "double",
    "equals",
    "show",
    "ifl",
    "statement",
    "let",
    "say",
    "user",
    "membership",
    "premium",
    "show",
    "user",
    "non",
    "premium",
    "contents",
    "maybe",
    "even",
    "recommend",
    "premium",
    "upgrade",
    "marketing",
    "measure",
    "else",
    "show",
    "premium",
    "contents",
    "finally",
    "combine",
    "conditions",
    "example",
    "today",
    "birthday",
    "displayed",
    "profile",
    "program",
    "show",
    "notification",
    "conditions",
    "must",
    "true",
    "today",
    "date",
    "birth",
    "date",
    "birthday",
    "displayed",
    "true",
    "use",
    "comparison",
    "uh",
    "boolean",
    "true",
    "false",
    "conditions",
    "must",
    "true",
    "notification",
    "sent",
    "javascript",
    "syntax",
    "end",
    "basically",
    "also",
    "valid",
    "condition",
    "also",
    "put",
    "inside",
    "condition",
    "whole",
    "thing",
    "true",
    "show",
    "notification",
    "else",
    "another",
    "example",
    "back",
    "shipment",
    "cost",
    "let",
    "say",
    "pay",
    "shipment",
    "total",
    "price",
    "amazon",
    "prime",
    "account",
    "way",
    "express",
    "would",
    "total",
    "price",
    "amazon",
    "prime",
    "equals",
    "true",
    "one",
    "true",
    "get",
    "free",
    "shipment",
    "javascript",
    "expressed",
    "double",
    "pipes",
    "put",
    "statement",
    "say",
    "either",
    "true",
    "give",
    "free",
    "shipment",
    "otherwise",
    "also",
    "use",
    "negation",
    "conditions",
    "example",
    "want",
    "check",
    "whether",
    "whole",
    "thing",
    "false",
    "way",
    "using",
    "exclamation",
    "mark",
    "brackets",
    "basically",
    "check",
    "whether",
    "whole",
    "condition",
    "false",
    "let",
    "learn",
    "one",
    "important",
    "concepts",
    "programming",
    "language",
    "functions",
    "let",
    "understand",
    "simple",
    "examples",
    "need",
    "let",
    "go",
    "back",
    "js",
    "app",
    "project",
    "going",
    "work",
    "ep",
    "tojs",
    "file",
    "going",
    "delete",
    "instead",
    "going",
    "work",
    "simple",
    "shipping",
    "cost",
    "calculation",
    "logic",
    "else",
    "statement",
    "javascript",
    "logic",
    "basically",
    "calculates",
    "based",
    "whatever",
    "total",
    "price",
    "much",
    "shipping",
    "cost",
    "customer",
    "pay",
    "let",
    "actually",
    "output",
    "whatever",
    "shipping",
    "cost",
    "console",
    "application",
    "running",
    "open",
    "browser",
    "whatever",
    "output",
    "going",
    "appear",
    "right",
    "webstorm",
    "actually",
    "convenient",
    "way",
    "writing",
    "lazy",
    "like",
    "want",
    "type",
    "whole",
    "thing",
    "simply",
    "log",
    "enter",
    "basically",
    "autocompletes",
    "want",
    "log",
    "whatever",
    "shipping",
    "cost",
    "value",
    "calculated",
    "logic",
    "set",
    "19",
    "total",
    "price",
    "set",
    "whatever",
    "value",
    "want",
    "going",
    "output",
    "result",
    "going",
    "save",
    "go",
    "back",
    "browser",
    "see",
    "output",
    "however",
    "want",
    "see",
    "number",
    "want",
    "see",
    "exactly",
    "number",
    "refers",
    "want",
    "full",
    "sentence",
    "like",
    "shipping",
    "cost",
    "whatever",
    "value",
    "shipping",
    "cost",
    "variable",
    "basically",
    "string",
    "string",
    "value",
    "string",
    "value",
    "also",
    "want",
    "output",
    "value",
    "variable",
    "one",
    "way",
    "javascript",
    "combining",
    "two",
    "plus",
    "sign",
    "arithmetic",
    "operation",
    "like",
    "numbers",
    "case",
    "basically",
    "takes",
    "whatever",
    "string",
    "value",
    "whatever",
    "value",
    "variable",
    "outputs",
    "one",
    "sentence",
    "one",
    "string",
    "save",
    "go",
    "back",
    "go",
    "see",
    "full",
    "sentence",
    "however",
    "elegant",
    "way",
    "way",
    "nicer",
    "remove",
    "double",
    "quotes",
    "instead",
    "use",
    "called",
    "back",
    "ticks",
    "like",
    "entire",
    "thing",
    "including",
    "variable",
    "tell",
    "javascript",
    "text",
    "actually",
    "name",
    "variable",
    "string",
    "use",
    "syntax",
    "dollar",
    "sign",
    "curly",
    "braces",
    "see",
    "webstorm",
    "highlighting",
    "syntax",
    "highlighting",
    "changed",
    "treated",
    "variable",
    "value",
    "extracted",
    "treated",
    "normal",
    "string",
    "let",
    "save",
    "go",
    "back",
    "result",
    "okay",
    "whole",
    "thing",
    "fully",
    "functioning",
    "logic",
    "wrote",
    "javascript",
    "takes",
    "whatever",
    "total",
    "prices",
    "calculates",
    "shipping",
    "cost",
    "based",
    "outputs",
    "console",
    "imagine",
    "really",
    "application",
    "would",
    "thousands",
    "tens",
    "thousands",
    "users",
    "maybe",
    "everyone",
    "shopping",
    "shopping",
    "cart",
    "adding",
    "items",
    "would",
    "actually",
    "need",
    "calculate",
    "every",
    "single",
    "purchase",
    "make",
    "application",
    "logic",
    "whole",
    "thing",
    "may",
    "repeat",
    "application",
    "code",
    "multiple",
    "times",
    "imagine",
    "10",
    "different",
    "places",
    "calculation",
    "needs",
    "done",
    "would",
    "basically",
    "replicate",
    "code",
    "10",
    "different",
    "places",
    "throughout",
    "application",
    "code",
    "seems",
    "like",
    "inefficient",
    "way",
    "coding",
    "right",
    "repeating",
    "thing",
    "10",
    "times",
    "like",
    "explained",
    "variables",
    "use",
    "value",
    "multiple",
    "times",
    "except",
    "case",
    "even",
    "worse",
    "repeating",
    "entire",
    "code",
    "block",
    "multiple",
    "times",
    "functions",
    "come",
    "think",
    "function",
    "kind",
    "variable",
    "reference",
    "like",
    "saved",
    "certain",
    "value",
    "variable",
    "reference",
    "variable",
    "every",
    "time",
    "needed",
    "grab",
    "value",
    "way",
    "save",
    "entire",
    "code",
    "block",
    "function",
    "whenever",
    "need",
    "code",
    "block",
    "logic",
    "reference",
    "using",
    "function",
    "name",
    "going",
    "put",
    "entire",
    "code",
    "block",
    "including",
    "assignment",
    "total",
    "price",
    "variable",
    "inside",
    "function",
    "syntax",
    "actually",
    "super",
    "easy",
    "like",
    "variables",
    "var",
    "let",
    "const",
    "keyword",
    "functions",
    "one",
    "keyword",
    "called",
    "function",
    "name",
    "function",
    "usually",
    "descriptive",
    "describes",
    "whatever",
    "code",
    "logic",
    "function",
    "references",
    "actually",
    "case",
    "let",
    "call",
    "calculate",
    "shipping",
    "cost",
    "code",
    "block",
    "right",
    "calculate",
    "shipping",
    "cost",
    "note",
    "end",
    "function",
    "name",
    "brackets",
    "opening",
    "closing",
    "brackets",
    "curly",
    "braces",
    "curly",
    "braces",
    "basically",
    "contain",
    "block",
    "code",
    "block",
    "function",
    "references",
    "take",
    "whole",
    "thing",
    "paste",
    "go",
    "created",
    "declared",
    "function",
    "know",
    "indentation",
    "right",
    "curly",
    "braces",
    "telling",
    "javascript",
    "start",
    "function",
    "code",
    "block",
    "end",
    "whatever",
    "curly",
    "braces",
    "code",
    "block",
    "logic",
    "get",
    "executed",
    "whenever",
    "reference",
    "function",
    "name",
    "like",
    "indentation",
    "entire",
    "function",
    "body",
    "indented",
    "webstorm",
    "actually",
    "handles",
    "indentation",
    "fix",
    "anything",
    "probably",
    "also",
    "notice",
    "underlines",
    "orange",
    "underline",
    "webstorm",
    "helping",
    "us",
    "understand",
    "improvements",
    "could",
    "make",
    "code",
    "error",
    "would",
    "actually",
    "work",
    "however",
    "room",
    "improvement",
    "let",
    "say",
    "beginner",
    "see",
    "underlines",
    "hover",
    "see",
    "description",
    "like",
    "implicitly",
    "declared",
    "thinking",
    "know",
    "means",
    "know",
    "fix",
    "warning",
    "another",
    "really",
    "cool",
    "thing",
    "webstorm",
    "used",
    "extensively",
    "programming",
    "projects",
    "kind",
    "autos",
    "suggest",
    "fix",
    "whenever",
    "see",
    "kind",
    "underline",
    "use",
    "shortcut",
    "see",
    "right",
    "macbook",
    "option",
    "enter",
    "mouse",
    "inside",
    "code",
    "block",
    "needs",
    "fixed",
    "going",
    "option",
    "enter",
    "see",
    "webstorm",
    "actually",
    "gives",
    "suggestions",
    "fix",
    "going",
    "choose",
    "first",
    "one",
    "let",
    "see",
    "happens",
    "go",
    "see",
    "warning",
    "variable",
    "shipping",
    "cost",
    "declared",
    "webstorm",
    "automatically",
    "edit",
    "declaration",
    "code",
    "let",
    "put",
    "go",
    "warnings",
    "errors",
    "added",
    "improvement",
    "code",
    "since",
    "change",
    "values",
    "output",
    "function",
    "let",
    "save",
    "code",
    "let",
    "see",
    "happens",
    "switch",
    "browser",
    "let",
    "see",
    "see",
    "going",
    "switch",
    "browser",
    "see",
    "empty",
    "output",
    "happened",
    "see",
    "empty",
    "output",
    "line",
    "code",
    "obviously",
    "get",
    "executed",
    "see",
    "sentence",
    "console",
    "output",
    "happened",
    "exactly",
    "code",
    "time",
    "function",
    "important",
    "concept",
    "functions",
    "need",
    "understand",
    "beginner",
    "programming",
    "like",
    "variables",
    "declare",
    "variable",
    "means",
    "save",
    "value",
    "variable",
    "reference",
    "later",
    "point",
    "use",
    "variable",
    "way",
    "first",
    "declare",
    "function",
    "create",
    "function",
    "assign",
    "whatever",
    "code",
    "block",
    "logic",
    "later",
    "use",
    "function",
    "code",
    "block",
    "inside",
    "function",
    "execute",
    "logic",
    "means",
    "function",
    "declaration",
    "execute",
    "code",
    "saves",
    "whatever",
    "code",
    "put",
    "inside",
    "function",
    "block",
    "also",
    "see",
    "webstorm",
    "actually",
    "highlighting",
    "function",
    "name",
    "gray",
    "hover",
    "says",
    "unused",
    "function",
    "declared",
    "function",
    "using",
    "using",
    "function",
    "also",
    "called",
    "programming",
    "calling",
    "function",
    "way",
    "call",
    "function",
    "function",
    "name",
    "brackets",
    "see",
    "color",
    "function",
    "name",
    "changed",
    "say",
    "unused",
    "function",
    "anymore",
    "let",
    "save",
    "see",
    "output",
    "browser",
    "switch",
    "back",
    "see",
    "function",
    "code",
    "executed",
    "see",
    "result",
    "right",
    "great",
    "thing",
    "whenever",
    "need",
    "entire",
    "code",
    "block",
    "execute",
    "simply",
    "need",
    "call",
    "function",
    "name",
    "let",
    "say",
    "logic",
    "somewhere",
    "need",
    "logic",
    "executed",
    "simply",
    "call",
    "function",
    "going",
    "execute",
    "code",
    "block",
    "function",
    "call",
    "way",
    "syntax",
    "comments",
    "whenever",
    "start",
    "line",
    "javascript",
    "slash",
    "two",
    "times",
    "also",
    "see",
    "color",
    "gray",
    "whatever",
    "type",
    "tells",
    "javascript",
    "code",
    "needs",
    "executed",
    "simply",
    "comment",
    "self",
    "note",
    "programming",
    "colleagues",
    "usually",
    "used",
    "document",
    "logic",
    "write",
    "function",
    "understandable",
    "code",
    "let",
    "clean",
    "let",
    "see",
    "another",
    "interesting",
    "concept",
    "functions",
    "know",
    "total",
    "price",
    "dynamic",
    "value",
    "every",
    "time",
    "customers",
    "shopping",
    "value",
    "different",
    "ca",
    "hardcode",
    "instead",
    "always",
    "different",
    "purchase",
    "customer",
    "need",
    "use",
    "different",
    "value",
    "time",
    "calculate",
    "shipping",
    "cost",
    "means",
    "remove",
    "see",
    "automatically",
    "warning",
    "webstorm",
    "tells",
    "us",
    "variable",
    "declared",
    "anywhere",
    "nowhere",
    "code",
    "setting",
    "value",
    "variable",
    "means",
    "referencing",
    "variable",
    "exist",
    "created",
    "need",
    "first",
    "need",
    "create",
    "variable",
    "assign",
    "value",
    "let",
    "say",
    "beginning",
    "variable",
    "total",
    "price",
    "simple",
    "declaration",
    "variable",
    "assigning",
    "value",
    "value",
    "dynamically",
    "set",
    "user",
    "gets",
    "platform",
    "starts",
    "shopping",
    "right",
    "let",
    "say",
    "logic",
    "basically",
    "tracks",
    "user",
    "behavior",
    "platform",
    "let",
    "say",
    "shopping",
    "cart",
    "user",
    "putting",
    "stuff",
    "shopping",
    "cart",
    "total",
    "price",
    "whatever",
    "user",
    "purchasing",
    "let",
    "say",
    "user",
    "continues",
    "shopping",
    "adding",
    "items",
    "total",
    "price",
    "gets",
    "19",
    "example",
    "point",
    "customer",
    "ready",
    "order",
    "everything",
    "need",
    "want",
    "basically",
    "pay",
    "place",
    "order",
    "items",
    "happens",
    "want",
    "calculate",
    "shipping",
    "cost",
    "imagine",
    "code",
    "application",
    "tons",
    "logic",
    "point",
    "calling",
    "calculate",
    "shipment",
    "cost",
    "function",
    "calculate",
    "cost",
    "based",
    "total",
    "price",
    "customer",
    "want",
    "want",
    "give",
    "total",
    "price",
    "input",
    "calculate",
    "shipping",
    "cost",
    "function",
    "programming",
    "also",
    "called",
    "passing",
    "value",
    "function",
    "parameter",
    "input",
    "parameter",
    "also",
    "super",
    "easy",
    "basically",
    "take",
    "value",
    "case",
    "variable",
    "references",
    "value",
    "pass",
    "brackets",
    "input",
    "parameter",
    "function",
    "understand",
    "brackets",
    "function",
    "input",
    "parameters",
    "passing",
    "function",
    "brackets",
    "empty",
    "pass",
    "one",
    "two",
    "10",
    "parameters",
    "within",
    "brackets",
    "function",
    "definition",
    "need",
    "explicitly",
    "say",
    "function",
    "expecting",
    "parameter",
    "input",
    "whenever",
    "someone",
    "either",
    "us",
    "engineer",
    "declar",
    "function",
    "teammates",
    "engineers",
    "also",
    "want",
    "use",
    "function",
    "know",
    "oh",
    "function",
    "expecting",
    "parameter",
    "total",
    "price",
    "need",
    "pass",
    "input",
    "otherwise",
    "obviously",
    "ca",
    "job",
    "total",
    "price",
    "value",
    "set",
    "define",
    "function",
    "definition",
    "like",
    "name",
    "variable",
    "another",
    "important",
    "thing",
    "two",
    "names",
    "going",
    "call",
    "let",
    "call",
    "total",
    "price",
    "param",
    "parameter",
    "variable",
    "reference",
    "value",
    "passing",
    "obviously",
    "need",
    "use",
    "logic",
    "within",
    "function",
    "something",
    "helpful",
    "understand",
    "concept",
    "call",
    "function",
    "value",
    "19",
    "passed",
    "total",
    "price",
    "variable",
    "happens",
    "background",
    "function",
    "execution",
    "following",
    "variable",
    "created",
    "within",
    "function",
    "value",
    "19",
    "exactly",
    "happens",
    "background",
    "pass",
    "parameter",
    "function",
    "within",
    "function",
    "created",
    "variable",
    "value",
    "assigned",
    "use",
    "variable",
    "within",
    "function",
    "block",
    "wherever",
    "need",
    "value",
    "need",
    "happens",
    "background",
    "complete",
    "logic",
    "total",
    "price",
    "dynamic",
    "calculated",
    "somewhere",
    "else",
    "application",
    "code",
    "whenever",
    "user",
    "adding",
    "stuff",
    "shopping",
    "cart",
    "click",
    "check",
    "ready",
    "order",
    "whatever",
    "calling",
    "function",
    "passing",
    "total",
    "price",
    "parameter",
    "calculated",
    "even",
    "add",
    "another",
    "console",
    "log",
    "shortcut",
    "say",
    "total",
    "price",
    "whatever",
    "total",
    "price",
    "going",
    "save",
    "go",
    "back",
    "browser",
    "go",
    "logic",
    "fully",
    "functional",
    "let",
    "one",
    "final",
    "improvement",
    "shipping",
    "cost",
    "calculation",
    "logic",
    "let",
    "say",
    "year",
    "company",
    "company",
    "change",
    "shipping",
    "costs",
    "last",
    "year",
    "five",
    "standard",
    "shipping",
    "cost",
    "little",
    "bit",
    "discounted",
    "version",
    "three",
    "year",
    "want",
    "increase",
    "prices",
    "inflation",
    "whatever",
    "case",
    "engineers",
    "us",
    "case",
    "need",
    "change",
    "code",
    "update",
    "shipping",
    "cost",
    "values",
    "may",
    "using",
    "two",
    "values",
    "parts",
    "application",
    "well",
    "different",
    "logic",
    "like",
    "shipping",
    "cost",
    "calculation",
    "maybe",
    "logic",
    "discounts",
    "values",
    "used",
    "well",
    "checkout",
    "logic",
    "payment",
    "function",
    "values",
    "change",
    "company",
    "policy",
    "need",
    "go",
    "application",
    "find",
    "every",
    "single",
    "javascript",
    "file",
    "code",
    "block",
    "hardcoded",
    "need",
    "update",
    "perfect",
    "case",
    "using",
    "variables",
    "values",
    "referenced",
    "multiple",
    "different",
    "places",
    "may",
    "change",
    "point",
    "case",
    "variable",
    "changes",
    "program",
    "like",
    "total",
    "price",
    "example",
    "dynamic",
    "value",
    "val",
    "changes",
    "less",
    "frequently",
    "whenever",
    "happens",
    "manually",
    "update",
    "code",
    "variables",
    "usually",
    "define",
    "const",
    "keyword",
    "means",
    "right",
    "going",
    "create",
    "two",
    "variables",
    "standard",
    "shipping",
    "cost",
    "discounted",
    "one",
    "going",
    "call",
    "exactly",
    "standard",
    "shipping",
    "cost",
    "let",
    "say",
    "raised",
    "six",
    "6",
    "discounted",
    "shimy",
    "cost",
    "4",
    "explained",
    "difference",
    "two",
    "variables",
    "defined",
    "const",
    "constant",
    "values",
    "changed",
    "programmatically",
    "go",
    "update",
    "value",
    "program",
    "change",
    "javascript",
    "allow",
    "example",
    "somewhere",
    "code",
    "right",
    "like",
    "let",
    "set",
    "seven",
    "whatever",
    "see",
    "error",
    "says",
    "attempting",
    "assign",
    "constant",
    "read",
    "variable",
    "going",
    "work",
    "prevents",
    "accidental",
    "rewrite",
    "variables",
    "reference",
    "constants",
    "application",
    "logic",
    "another",
    "important",
    "concept",
    "programming",
    "especially",
    "writing",
    "functions",
    "see",
    "started",
    "lot",
    "hardcoded",
    "values",
    "step",
    "step",
    "remove",
    "almost",
    "everything",
    "logic",
    "referenced",
    "variables",
    "many",
    "hardcoded",
    "values",
    "best",
    "practice",
    "programming",
    "general",
    "let",
    "test",
    "application",
    "let",
    "say",
    "user",
    "started",
    "shopping",
    "decided",
    "maybe",
    "ready",
    "check",
    "calculated",
    "shipping",
    "cost",
    "remembered",
    "forgot",
    "one",
    "item",
    "continued",
    "shopping",
    "eded",
    "shopping",
    "cart",
    "ready",
    "check",
    "calculate",
    "shipping",
    "cost",
    "first",
    "case",
    "means",
    "paying",
    "standard",
    "shipping",
    "cost",
    "defined",
    "logic",
    "19",
    "see",
    "discounted",
    "shipping",
    "cost",
    "get",
    "charged",
    "disc",
    "discounted",
    "shipping",
    "cost",
    "see",
    "think",
    "know",
    "would",
    "like",
    "save",
    "shipping",
    "cost",
    "entirely",
    "going",
    "add",
    "one",
    "item",
    "shopping",
    "cart",
    "qualify",
    "free",
    "shipping",
    "zero",
    "cost",
    "add",
    "one",
    "item",
    "brings",
    "total",
    "price",
    "let",
    "say",
    "24",
    "see",
    "new",
    "shipping",
    "cost",
    "calculated",
    "zero",
    "place",
    "order",
    "let",
    "save",
    "logic",
    "see",
    "output",
    "differentiate",
    "outputs",
    "let",
    "actually",
    "add",
    "like",
    "decoration",
    "line",
    "kind",
    "thing",
    "basically",
    "outputs",
    "something",
    "like",
    "divider",
    "visual",
    "divider",
    "us",
    "console",
    "log",
    "let",
    "save",
    "go",
    "back",
    "go",
    "shipping",
    "cost",
    "six",
    "total",
    "price",
    "10",
    "four",
    "discounted",
    "one",
    "24",
    "free",
    "shipping",
    "one",
    "final",
    "note",
    "want",
    "make",
    "probably",
    "ask",
    "variable",
    "function",
    "names",
    "see",
    "called",
    "chemel",
    "case",
    "basically",
    "start",
    "lowercase",
    "character",
    "every",
    "word",
    "add",
    "name",
    "capitalized",
    "like",
    "standard",
    "naming",
    "convention",
    "functions",
    "variables",
    "javascript",
    "specifically",
    "know",
    "different",
    "programming",
    "languages",
    "different",
    "conventions",
    "means",
    "name",
    "actually",
    "whatever",
    "want",
    "underline",
    "like",
    "work",
    "variable",
    "names",
    "name",
    "wish",
    "however",
    "javascript",
    "camel",
    "case",
    "naming",
    "standard",
    "congratulations",
    "completed",
    "entire",
    "javascript",
    "crash",
    "course",
    "learned",
    "tons",
    "important",
    "concepts",
    "main",
    "building",
    "blocks",
    "programming",
    "language",
    "good",
    "basic",
    "understanding",
    "javascript",
    "however",
    "beginning",
    "way",
    "exciting",
    "interesting",
    "things",
    "awaiting",
    "javascript",
    "world",
    "generally",
    "software",
    "development",
    "world",
    "want",
    "continue",
    "really",
    "dive",
    "world",
    "programming",
    "best",
    "fun",
    "way",
    "software",
    "engineering",
    "mini",
    "boot",
    "camp",
    "also",
    "call",
    "beginners",
    "course",
    "happy",
    "continue",
    "teaching",
    "beginners",
    "course",
    "going",
    "dive",
    "deeper",
    "web",
    "development",
    "going",
    "learn",
    "javascript",
    "frameworks",
    "development",
    "backend",
    "development",
    "going",
    "learn",
    "build",
    "proper",
    "websites",
    "database",
    "connection",
    "tools",
    "managing",
    "dependencies",
    "application",
    "learn",
    "http",
    "requests",
    "protocols",
    "well",
    "take",
    "web",
    "application",
    "created",
    "deploy",
    "simple",
    "virtual",
    "server",
    "cloud",
    "platform",
    "learn",
    "firewall",
    "configurations",
    "operating",
    "system",
    "commands",
    "concepts",
    "sound",
    "completely",
    "foreign",
    "sound",
    "difficult",
    "trust",
    "learn",
    "simplest",
    "explanations",
    "examples",
    "use",
    "throughout",
    "entire",
    "course",
    "make",
    "learning",
    "journey",
    "simple",
    "fun",
    "possible",
    "end",
    "software",
    "engineering",
    "miniot",
    "camp",
    "learned",
    "solid",
    "knowledge",
    "equivalent",
    "junior",
    "software",
    "engineer",
    "absolutely",
    "make",
    "sure",
    "check",
    "software",
    "engineering",
    "mini",
    "boot",
    "camp",
    "video",
    "description",
    "directly",
    "linked",
    "video",
    "hope",
    "see",
    "thank",
    "watching",
    "see",
    "next",
    "video"
  ],
  "keywords": [
    "learn",
    "javascript",
    "course",
    "actually",
    "part",
    "software",
    "development",
    "every",
    "understand",
    "entire",
    "concept",
    "go",
    "engineering",
    "etc",
    "video",
    "syntax",
    "also",
    "important",
    "concepts",
    "start",
    "big",
    "first",
    "exactly",
    "website",
    "programming",
    "program",
    "let",
    "get",
    "right",
    "imagine",
    "open",
    "laptop",
    "facebook",
    "browser",
    "happened",
    "new",
    "stuff",
    "background",
    "application",
    "developers",
    "developing",
    "writing",
    "code",
    "happens",
    "way",
    "location",
    "refresh",
    "see",
    "page",
    "within",
    "data",
    "somewhere",
    "may",
    "need",
    "time",
    "internet",
    "world",
    "actual",
    "one",
    "another",
    "everything",
    "places",
    "like",
    "super",
    "pretty",
    "simple",
    "think",
    "would",
    "change",
    "much",
    "back",
    "html",
    "css",
    "text",
    "without",
    "good",
    "anything",
    "plus",
    "use",
    "cases",
    "websites",
    "displayed",
    "leave",
    "comment",
    "message",
    "want",
    "user",
    "combination",
    "three",
    "called",
    "front",
    "end",
    "files",
    "even",
    "could",
    "else",
    "since",
    "images",
    "backend",
    "well",
    "friends",
    "messages",
    "means",
    "make",
    "gets",
    "written",
    "java",
    "different",
    "write",
    "say",
    "example",
    "checks",
    "know",
    "database",
    "save",
    "users",
    "look",
    "inside",
    "whatever",
    "probably",
    "show",
    "uh",
    "order",
    "thousands",
    "take",
    "consider",
    "obviously",
    "log",
    "web",
    "changes",
    "next",
    "applications",
    "single",
    "developer",
    "lot",
    "work",
    "however",
    "choose",
    "things",
    "camp",
    "going",
    "check",
    "learning",
    "used",
    "using",
    "standard",
    "logic",
    "create",
    "features",
    "examples",
    "shopping",
    "separate",
    "maybe",
    "languages",
    "language",
    "editor",
    "keywords",
    "file",
    "knows",
    "tell",
    "explicitly",
    "note",
    "browsers",
    "less",
    "based",
    "call",
    "frameworks",
    "framework",
    "basically",
    "additional",
    "difference",
    "structure",
    "whole",
    "basic",
    "specifically",
    "compare",
    "types",
    "variables",
    "five",
    "two",
    "thing",
    "directly",
    "tools",
    "either",
    "execute",
    "click",
    "something",
    "console",
    "tab",
    "usually",
    "type",
    "numbers",
    "number",
    "total",
    "display",
    "prices",
    "amazon",
    "ratings",
    "zero",
    "string",
    "special",
    "characters",
    "character",
    "strings",
    "whether",
    "quotes",
    "double",
    "empty",
    "multiple",
    "boolean",
    "enter",
    "wrong",
    "true",
    "false",
    "expression",
    "premium",
    "array",
    "kind",
    "list",
    "names",
    "brackets",
    "object",
    "name",
    "rating",
    "wrote",
    "curly",
    "braces",
    "price",
    "highlighting",
    "value",
    "final",
    "values",
    "case",
    "calculate",
    "add",
    "items",
    "shipment",
    "product",
    "instead",
    "username",
    "give",
    "10",
    "reference",
    "times",
    "variable",
    "equals",
    "app",
    "var",
    "keyword",
    "line",
    "input",
    "set",
    "script",
    "webstorm",
    "ide",
    "us",
    "free",
    "tags",
    "convenient",
    "js",
    "block",
    "otherwise",
    "simply",
    "notice",
    "const",
    "define",
    "automatically",
    "created",
    "defined",
    "icons",
    "pass",
    "output",
    "comparison",
    "equal",
    "put",
    "shipping",
    "20",
    "cost",
    "condition",
    "charged",
    "conditions",
    "functions",
    "cart",
    "function",
    "whenever",
    "parameter",
    "discounted"
  ]
}