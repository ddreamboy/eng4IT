{
  "text": "the event Loop is a pretty notorious\nTopic in JavaScript but when we zoom out\nit's just a tiny component within the\nJavaScript runtime we also have the call\nstack we have web apis we have the task\nq microtask q and then eventually the\nevent Loop well to be a little more\ntechnically accurate here we actually\nhave the JavaScript engine in which we\nhave the call stack and then also the\nmemory Heap but to keep my slides a\nlittle organized I'll just be showing\nthe call stack here all these components\ntogether allow us to use asynchronous\ntasks in a non-blocking way in\nJavaScript and this is important because\nJavaScript itself is single threaded\nwe're only working with a single call\nstack so the call stack manages the\nexecution of our program so if we have\nthe following script we first have\nconsole log one so a new execution\ncontext is created pushed onto the call\nstack which is then evaluated and logs\none then we have console log two same\nstory execution context is created\npushed onto the call stack is evaluated\nin logs two then on line 14 we invoke\nanother function the log three and four\nand within this function body we invoke\nyet another function log three and\nwithin log three we invoke another\nfunction log the console log three\neventually it logs three then on the\nsecond line within the log three and\nfour function body we console log four\nfour gets logged and now the log three\nand four execution context is popped off\nthe call stack as well now something\nimportant to remember here again is that\nJavaScript can handle a single task at a\ntime so if we for example had this long\nrunning task in which we have a pretty\nheavy computation it takes a while\nbefore for JavaScript can continue with\nthe rest of our program so the console\nlog long task done is only logged after\na couple seconds and this is not what we\nwant CU in the meantime our entire\nprogram is frozen so we want to avoid\nthese long running tasks but in a real\nlife application we often have to use\nthese long running tasks like maybe a\nnetwork request or anything based on\nuser input timers so what happens then\nlike is our entire cost stch just\nblocked until we get the data back no\nbecause we're actually using web API in\nthose cases and web apis provide a set\nof interfaces that allow us to interact\nwith the browser's features this\nincludes functionality that we often use\nlike the document object model fetch set\ntimeout and so many more the browser is\na very powerful platform with a lot of\nfeatures some of these features are\nrequired like the rendering engine or\nthe networking stack but we also have\naccess to some cooler ones like device\nones sensors cameras geolocation and so\non okay cool but what this does have to\ndo with with long running tasks well\nsome of these web apis allow us to\noffload long running tasks to the\nbrowser so when we invoke such an API\nwe're kind of just initiating that\noffloading and web apis that expose\nthese asynchronous capabilities are\neither callback based or promise based\nso first let's focus on the Callback\nbased apis and I'm just going to use the\ngeolocation API because it's fun I could\nhave used any other callback based API\nbut let's say that we want to get the\nuser's location and for this we can use\nthe get current position method exposed\nby the geolocation API and this receives\ntwo callbacks first we have the success\ncall back in case everything goes well\nand the user allows us to get the\nlocation and we actually get it from the\nbrowser or the error call back in case\nanything goes wrong so let's see what\nhappens when we actually use this in our\nscript so first the get current position\ninvocation gets added to the call stack\nhowever this is just to register those\ncall backs and initiate that async task\nafter doing that it can get popped off\nthe call stack immediately so it doesn't\nwait for any data now in the background\nthe browser starts some kind of process\nthat eventually shows the user popup now\nof course we don't know when the user is\ngoing to interact with this popup but\nthat's not a problem because this is not\nhappening on the call stack so our\nentire website is still responsive in\ncase other tasks need to run instead now\nfinally the user clicks on allow so the\nAPI receives the data from the browser\nand uses the success call back to handle\nthis result however it can't just push\nthat call back back onto the call stack\nthis could disrupt an already running\ntask and just create very unpredictable\nBehavior so instead the call back gets\npushed to the task CU which is also\ncalled the Callback queue for this exact\nreason the task CU holds web API\ncallbacks and event handlers to be able\nto get executed at some point later in\nthe future and this is where we finally\nget to the event loop it's the event\nLoop's responsibility to check if the\ncall stack is empty and if that's the\ncase so if nothing is running and then\ngets the first available task from the\ntask queue and moves this to the call St\nwhere it's executed so now finally we\nhandle the results and the user's\nlocation is logged to the console\nanother very popular callback based web\nAPI is set timeout and set timeout also\nreceives a call back and a delay so\nlet's see how that works so first we\nencounter a set timeout and this again\ngets added to the call stack but all it\ndoes again is register that call back\nand also to delay with the timer's API\nand in the background the browser will\nactually handle that timer then we have\nanother set timeout and again it\nregisters the call back and the delay\nnow our timers are still running and we\nhave a console log end of script this\njust gets added to the call stack and\nlogs and of script Nothing asynchronous\nhere now after 100 milliseconds the\nbrowser is like hey 100 milliseconds\nexpired so now the Callback moves onto\nthe task Q there's nothing on the call\nstack right now so this moves onto the\ncall stack where eventually it logs 100\nmilliseconds now 2,000 milliseconds are\nup again same story The call back is\npushed onto the testq call stack is\nempty so it moves onto the call stack\nwhere it logs 2,000 milliseconds so it's\njust very important to remember that\nwhen you have a set timeout and a delay\nit's not the delay until it gets moved\nonto the call stack no it's the delay\nuntil it gets moved to the task Q so\nthis means that the delay that we\nspecify might not actually be the delay\nto execution because if the call stack\nwas still very full with other tasks and\nthis could run for many more seconds the\ncall back would still have to wait in\nthe task cu until the call stack is\nempty so just something to to keep in\nmind so long story short the call backs\nprovided by web apis are pushed onto the\ntest queue when the asynchronous task\ncompletes so what about the\npromise-based ones if you haven't\nchecked out my promises video yet I\nhighly recommend you watch it because\nI'll just assume some basic promise\nknowledge uh while explaining this\nentire flow whenever we work with\npromises we're working with the\nmicrotask Q the microtask queue is a\nspecial queue dedicated to then catch\nfinally call backs uh a function body\nexecution after await the Q microtest\ncall back and the new mutation Observer\ncall back so only those callbacks or\nthose function body parts get pushed\nonto the microtask CU so it's very\nspecific however the event Loop\nprioritizes the microtask Q so whenever\nthe call stack is empty the event Loop\nfirst ensures that the microtask Q is\nentirely empty so it gets all the tasks\nfrom the microtask Q moves them onto the\ncall stack where they get executed and\nonly then will it move to the task que\nand after each task in the task CU it\nagain checks the microtask Q and A\npopular promise based web API fetch so\nlet's see what happens behind the scenes\nwhen we invoke fetch so whenever we call\nfetch it's added to the call step this\nis just responsible for creating a\npromise object which by default is\npending the result is undefined and we\ndon't have any promise reactions just\nyet it also initiates that background\nNetwork request that's handled by the\nbrowser then we move on to the next line\nwe have the den Handler and this creates\na promise reaction record where we have\nres console log res the server still\nhasn't responded by the way but we got\nto line four so there we have a\nsynchronous console log end of script so\nnow end of script is logged to the\nconsole and then finally the server\nreturns some data so now the promised\ndata set to fulfilled the promised\nresults is now the response object with\nthe data that we got from the server and\nthe promised reaction Handler is now\nalso pushed to the microtask Q right\nbecause it's a then call back and that\ngets pushed to the microtask Q the call\nstack is empty so the event Loop checks\nthe microtask Q moves this to the call\nstack where it eventually logs the\nresult that we got from the server\nsomething to keep in mind with\nmicrotasks is that a microtask can also\nschedule another microtask and this\nmeans that the event Loop is just\nconstantly handling the microtask and it\ncan never actually get to the task CU it\nwould just have to wait indefinitely so\nwe're kind of creating an infinite Loop\nan infinite microtask Loop um freezing\nour entire program I believe in node you\ncan set like Mex tick depth or something\nlike that which prevents this exact\nthing from happening but just make sure\nthat you don't accidentally end up doing\nthat and we can also promisify uh a\ncallback based API so for example we can\nrep the get current position with a new\npromise Constructor and for the success\ncall back and the error call back we\njust pass resolve and reject so this can\nbe a pretty nice solution just to\nimprove the readability within your\ncodebase a bit all right A little quiz\nto see if you uh kind of understand it\nso we have a promised resolve with a den\nHandler we have a set timeout we have a\nQ microtask in which we have another q\nmicrotask and then we have a console log\nfive it's up to you to see what gets\nlogged so pause the video now and let's\nsee if you got it right and the right\nanswer is\n51342 so let's see why first we have the\npromise resolve and this just creates a\nnew promise object that's instantly\nresolved then on the next line we have\nthe den Handler the promise is already\nresolved so in the background it does\ncreate that promised reaction but the\nHandler is immediately pushed to the\nmicrotask Q then we have set timeout\nwhich is responsible for initiating that\ntimer so the call back and the delay get\npassed to the API and in the background\nthe browser start some sort of timer\nthen we have q microtask so the call is\nadded to the call stack and this cues\nthat call back to the microtask que then\nwe have the synchronous cons Log 5 so\nthis gets push to the call stack and\nlogs five and in the meantime the 10\nmilliseconds are up so the call back\nfrom set timeout is pushed to the task Q\ncuz this was a call back based API so\ntask Q our script is done the call stack\nis empty so the event Loop checks the\nmicrotas Q and there we have the promise\nHandler call back and this eventually\ncalls console log one so one is logged\nto the console then we have the Q\nmicrotask callback and within this\ncallback we call console log three so\nthree is locked to the console then we\ncall another q microtask and this cues\nanother microtask with it with its call\nback to the microtask que however the\nevent Loop has to to ensure that the\nmicrotask Q is entirely empty before\nmoving on to the task Q so that call\nback is immediately moved onto the call\nstack again and logs four now finally\nthe call stack is empty and the\nmicrotask Q is empty so the first\navailable task from the task Q is moved\nonto the call stack and this eventually\nlogs two so now we have\n51342 so let's just recap what we've\ncovered so far so JavaScript is single\nthreaded it can only handle one task at\na time we can use web apis to interact\nwith the features leveraged by the\nbrowser and some of these apis allow us\nto initiate Asing tasks in the\nbackground so the function call that\ninitiates an asnc task like that is\nstill added to the call stack but this\nis just to hand it off to the browser\nthe actual async task is handled in the\nbackground so it does not block the call\nstack the task CU is used by callback\nbased web apis to enue the Callback once\nthe asynchronous task has completed\nthen we have the microtask Q which is\nonly used by promise handlers the async\nfunction bodies after await the Q\nmicrotask Q callbacks and the new\nmutation Observer callbacks this queue\nhas priority over the task q and the\nevent Loop ensures that this queue is\nentirely empty before moving on to the\ntask q and after handling each task from\nthe task Q the event loop again checks\nthe microtask Q to ensure that nothing\nhas been added in the meantime you often\ncome across asynchronous JavaScript and\nif you aren't entirely sure why things\nexecute a certain way it might just be\nvery discouraging but I hope that my\nexplanation for the task q and the micro\ntasq and the event Loop kind of helped\nyou understand why certain parts of our\ncode execute at a certain time of course\nas always if you have any specific\nquestions feel free to reach out but I\nalso highly recommend that you kind of\njust play around with it yourself like\ntry using set timeout try using Q\nmicrotask just to get a better sense of\nlike oh yeah okay I understand why this\nruns at this time time and why this\ndoesn't execute stuff like that good\nluck and have fun coding\n",
  "words": [
    "event",
    "loop",
    "pretty",
    "notorious",
    "topic",
    "javascript",
    "zoom",
    "tiny",
    "component",
    "within",
    "javascript",
    "runtime",
    "also",
    "call",
    "stack",
    "web",
    "apis",
    "task",
    "q",
    "microtask",
    "q",
    "eventually",
    "event",
    "loop",
    "well",
    "little",
    "technically",
    "accurate",
    "actually",
    "javascript",
    "engine",
    "call",
    "stack",
    "also",
    "memory",
    "heap",
    "keep",
    "slides",
    "little",
    "organized",
    "showing",
    "call",
    "stack",
    "components",
    "together",
    "allow",
    "us",
    "use",
    "asynchronous",
    "tasks",
    "way",
    "javascript",
    "important",
    "javascript",
    "single",
    "threaded",
    "working",
    "single",
    "call",
    "stack",
    "call",
    "stack",
    "manages",
    "execution",
    "program",
    "following",
    "script",
    "first",
    "console",
    "log",
    "one",
    "new",
    "execution",
    "context",
    "created",
    "pushed",
    "onto",
    "call",
    "stack",
    "evaluated",
    "logs",
    "one",
    "console",
    "log",
    "two",
    "story",
    "execution",
    "context",
    "created",
    "pushed",
    "onto",
    "call",
    "stack",
    "evaluated",
    "logs",
    "two",
    "line",
    "14",
    "invoke",
    "another",
    "function",
    "log",
    "three",
    "four",
    "within",
    "function",
    "body",
    "invoke",
    "yet",
    "another",
    "function",
    "log",
    "three",
    "within",
    "log",
    "three",
    "invoke",
    "another",
    "function",
    "log",
    "console",
    "log",
    "three",
    "eventually",
    "logs",
    "three",
    "second",
    "line",
    "within",
    "log",
    "three",
    "four",
    "function",
    "body",
    "console",
    "log",
    "four",
    "four",
    "gets",
    "logged",
    "log",
    "three",
    "four",
    "execution",
    "context",
    "popped",
    "call",
    "stack",
    "well",
    "something",
    "important",
    "remember",
    "javascript",
    "handle",
    "single",
    "task",
    "time",
    "example",
    "long",
    "running",
    "task",
    "pretty",
    "heavy",
    "computation",
    "takes",
    "javascript",
    "continue",
    "rest",
    "program",
    "console",
    "log",
    "long",
    "task",
    "done",
    "logged",
    "couple",
    "seconds",
    "want",
    "cu",
    "meantime",
    "entire",
    "program",
    "frozen",
    "want",
    "avoid",
    "long",
    "running",
    "tasks",
    "real",
    "life",
    "application",
    "often",
    "use",
    "long",
    "running",
    "tasks",
    "like",
    "maybe",
    "network",
    "request",
    "anything",
    "based",
    "user",
    "input",
    "timers",
    "happens",
    "like",
    "entire",
    "cost",
    "stch",
    "blocked",
    "get",
    "data",
    "back",
    "actually",
    "using",
    "web",
    "api",
    "cases",
    "web",
    "apis",
    "provide",
    "set",
    "interfaces",
    "allow",
    "us",
    "interact",
    "browser",
    "features",
    "includes",
    "functionality",
    "often",
    "use",
    "like",
    "document",
    "object",
    "model",
    "fetch",
    "set",
    "timeout",
    "many",
    "browser",
    "powerful",
    "platform",
    "lot",
    "features",
    "features",
    "required",
    "like",
    "rendering",
    "engine",
    "networking",
    "stack",
    "also",
    "access",
    "cooler",
    "ones",
    "like",
    "device",
    "ones",
    "sensors",
    "cameras",
    "geolocation",
    "okay",
    "cool",
    "long",
    "running",
    "tasks",
    "well",
    "web",
    "apis",
    "allow",
    "us",
    "offload",
    "long",
    "running",
    "tasks",
    "browser",
    "invoke",
    "api",
    "kind",
    "initiating",
    "offloading",
    "web",
    "apis",
    "expose",
    "asynchronous",
    "capabilities",
    "either",
    "callback",
    "based",
    "promise",
    "based",
    "first",
    "let",
    "focus",
    "callback",
    "based",
    "apis",
    "going",
    "use",
    "geolocation",
    "api",
    "fun",
    "could",
    "used",
    "callback",
    "based",
    "api",
    "let",
    "say",
    "want",
    "get",
    "user",
    "location",
    "use",
    "get",
    "current",
    "position",
    "method",
    "exposed",
    "geolocation",
    "api",
    "receives",
    "two",
    "callbacks",
    "first",
    "success",
    "call",
    "back",
    "case",
    "everything",
    "goes",
    "well",
    "user",
    "allows",
    "us",
    "get",
    "location",
    "actually",
    "get",
    "browser",
    "error",
    "call",
    "back",
    "case",
    "anything",
    "goes",
    "wrong",
    "let",
    "see",
    "happens",
    "actually",
    "use",
    "script",
    "first",
    "get",
    "current",
    "position",
    "invocation",
    "gets",
    "added",
    "call",
    "stack",
    "however",
    "register",
    "call",
    "backs",
    "initiate",
    "async",
    "task",
    "get",
    "popped",
    "call",
    "stack",
    "immediately",
    "wait",
    "data",
    "background",
    "browser",
    "starts",
    "kind",
    "process",
    "eventually",
    "shows",
    "user",
    "popup",
    "course",
    "know",
    "user",
    "going",
    "interact",
    "popup",
    "problem",
    "happening",
    "call",
    "stack",
    "entire",
    "website",
    "still",
    "responsive",
    "case",
    "tasks",
    "need",
    "run",
    "instead",
    "finally",
    "user",
    "clicks",
    "allow",
    "api",
    "receives",
    "data",
    "browser",
    "uses",
    "success",
    "call",
    "back",
    "handle",
    "result",
    "however",
    "ca",
    "push",
    "call",
    "back",
    "back",
    "onto",
    "call",
    "stack",
    "could",
    "disrupt",
    "already",
    "running",
    "task",
    "create",
    "unpredictable",
    "behavior",
    "instead",
    "call",
    "back",
    "gets",
    "pushed",
    "task",
    "cu",
    "also",
    "called",
    "callback",
    "queue",
    "exact",
    "reason",
    "task",
    "cu",
    "holds",
    "web",
    "api",
    "callbacks",
    "event",
    "handlers",
    "able",
    "get",
    "executed",
    "point",
    "later",
    "future",
    "finally",
    "get",
    "event",
    "loop",
    "event",
    "loop",
    "responsibility",
    "check",
    "call",
    "stack",
    "empty",
    "case",
    "nothing",
    "running",
    "gets",
    "first",
    "available",
    "task",
    "task",
    "queue",
    "moves",
    "call",
    "st",
    "executed",
    "finally",
    "handle",
    "results",
    "user",
    "location",
    "logged",
    "console",
    "another",
    "popular",
    "callback",
    "based",
    "web",
    "api",
    "set",
    "timeout",
    "set",
    "timeout",
    "also",
    "receives",
    "call",
    "back",
    "delay",
    "let",
    "see",
    "works",
    "first",
    "encounter",
    "set",
    "timeout",
    "gets",
    "added",
    "call",
    "stack",
    "register",
    "call",
    "back",
    "also",
    "delay",
    "timer",
    "api",
    "background",
    "browser",
    "actually",
    "handle",
    "timer",
    "another",
    "set",
    "timeout",
    "registers",
    "call",
    "back",
    "delay",
    "timers",
    "still",
    "running",
    "console",
    "log",
    "end",
    "script",
    "gets",
    "added",
    "call",
    "stack",
    "logs",
    "script",
    "nothing",
    "asynchronous",
    "100",
    "milliseconds",
    "browser",
    "like",
    "hey",
    "100",
    "milliseconds",
    "expired",
    "callback",
    "moves",
    "onto",
    "task",
    "q",
    "nothing",
    "call",
    "stack",
    "right",
    "moves",
    "onto",
    "call",
    "stack",
    "eventually",
    "logs",
    "100",
    "milliseconds",
    "milliseconds",
    "story",
    "call",
    "back",
    "pushed",
    "onto",
    "testq",
    "call",
    "stack",
    "empty",
    "moves",
    "onto",
    "call",
    "stack",
    "logs",
    "milliseconds",
    "important",
    "remember",
    "set",
    "timeout",
    "delay",
    "delay",
    "gets",
    "moved",
    "onto",
    "call",
    "stack",
    "delay",
    "gets",
    "moved",
    "task",
    "q",
    "means",
    "delay",
    "specify",
    "might",
    "actually",
    "delay",
    "execution",
    "call",
    "stack",
    "still",
    "full",
    "tasks",
    "could",
    "run",
    "many",
    "seconds",
    "call",
    "back",
    "would",
    "still",
    "wait",
    "task",
    "cu",
    "call",
    "stack",
    "empty",
    "something",
    "keep",
    "mind",
    "long",
    "story",
    "short",
    "call",
    "backs",
    "provided",
    "web",
    "apis",
    "pushed",
    "onto",
    "test",
    "queue",
    "asynchronous",
    "task",
    "completes",
    "ones",
    "checked",
    "promises",
    "video",
    "yet",
    "highly",
    "recommend",
    "watch",
    "assume",
    "basic",
    "promise",
    "knowledge",
    "uh",
    "explaining",
    "entire",
    "flow",
    "whenever",
    "work",
    "promises",
    "working",
    "microtask",
    "q",
    "microtask",
    "queue",
    "special",
    "queue",
    "dedicated",
    "catch",
    "finally",
    "call",
    "backs",
    "uh",
    "function",
    "body",
    "execution",
    "await",
    "q",
    "microtest",
    "call",
    "back",
    "new",
    "mutation",
    "observer",
    "call",
    "back",
    "callbacks",
    "function",
    "body",
    "parts",
    "get",
    "pushed",
    "onto",
    "microtask",
    "cu",
    "specific",
    "however",
    "event",
    "loop",
    "prioritizes",
    "microtask",
    "q",
    "whenever",
    "call",
    "stack",
    "empty",
    "event",
    "loop",
    "first",
    "ensures",
    "microtask",
    "q",
    "entirely",
    "empty",
    "gets",
    "tasks",
    "microtask",
    "q",
    "moves",
    "onto",
    "call",
    "stack",
    "get",
    "executed",
    "move",
    "task",
    "que",
    "task",
    "task",
    "cu",
    "checks",
    "microtask",
    "q",
    "popular",
    "promise",
    "based",
    "web",
    "api",
    "fetch",
    "let",
    "see",
    "happens",
    "behind",
    "scenes",
    "invoke",
    "fetch",
    "whenever",
    "call",
    "fetch",
    "added",
    "call",
    "step",
    "responsible",
    "creating",
    "promise",
    "object",
    "default",
    "pending",
    "result",
    "undefined",
    "promise",
    "reactions",
    "yet",
    "also",
    "initiates",
    "background",
    "network",
    "request",
    "handled",
    "browser",
    "move",
    "next",
    "line",
    "den",
    "handler",
    "creates",
    "promise",
    "reaction",
    "record",
    "res",
    "console",
    "log",
    "res",
    "server",
    "still",
    "responded",
    "way",
    "got",
    "line",
    "four",
    "synchronous",
    "console",
    "log",
    "end",
    "script",
    "end",
    "script",
    "logged",
    "console",
    "finally",
    "server",
    "returns",
    "data",
    "promised",
    "data",
    "set",
    "fulfilled",
    "promised",
    "results",
    "response",
    "object",
    "data",
    "got",
    "server",
    "promised",
    "reaction",
    "handler",
    "also",
    "pushed",
    "microtask",
    "q",
    "right",
    "call",
    "back",
    "gets",
    "pushed",
    "microtask",
    "q",
    "call",
    "stack",
    "empty",
    "event",
    "loop",
    "checks",
    "microtask",
    "q",
    "moves",
    "call",
    "stack",
    "eventually",
    "logs",
    "result",
    "got",
    "server",
    "something",
    "keep",
    "mind",
    "microtasks",
    "microtask",
    "also",
    "schedule",
    "another",
    "microtask",
    "means",
    "event",
    "loop",
    "constantly",
    "handling",
    "microtask",
    "never",
    "actually",
    "get",
    "task",
    "cu",
    "would",
    "wait",
    "indefinitely",
    "kind",
    "creating",
    "infinite",
    "loop",
    "infinite",
    "microtask",
    "loop",
    "um",
    "freezing",
    "entire",
    "program",
    "believe",
    "node",
    "set",
    "like",
    "mex",
    "tick",
    "depth",
    "something",
    "like",
    "prevents",
    "exact",
    "thing",
    "happening",
    "make",
    "sure",
    "accidentally",
    "end",
    "also",
    "promisify",
    "uh",
    "callback",
    "based",
    "api",
    "example",
    "rep",
    "get",
    "current",
    "position",
    "new",
    "promise",
    "constructor",
    "success",
    "call",
    "back",
    "error",
    "call",
    "back",
    "pass",
    "resolve",
    "reject",
    "pretty",
    "nice",
    "solution",
    "improve",
    "readability",
    "within",
    "codebase",
    "bit",
    "right",
    "little",
    "quiz",
    "see",
    "uh",
    "kind",
    "understand",
    "promised",
    "resolve",
    "den",
    "handler",
    "set",
    "timeout",
    "q",
    "microtask",
    "another",
    "q",
    "microtask",
    "console",
    "log",
    "five",
    "see",
    "gets",
    "logged",
    "pause",
    "video",
    "let",
    "see",
    "got",
    "right",
    "right",
    "answer",
    "51342",
    "let",
    "see",
    "first",
    "promise",
    "resolve",
    "creates",
    "new",
    "promise",
    "object",
    "instantly",
    "resolved",
    "next",
    "line",
    "den",
    "handler",
    "promise",
    "already",
    "resolved",
    "background",
    "create",
    "promised",
    "reaction",
    "handler",
    "immediately",
    "pushed",
    "microtask",
    "q",
    "set",
    "timeout",
    "responsible",
    "initiating",
    "timer",
    "call",
    "back",
    "delay",
    "get",
    "passed",
    "api",
    "background",
    "browser",
    "start",
    "sort",
    "timer",
    "q",
    "microtask",
    "call",
    "added",
    "call",
    "stack",
    "cues",
    "call",
    "back",
    "microtask",
    "que",
    "synchronous",
    "cons",
    "log",
    "5",
    "gets",
    "push",
    "call",
    "stack",
    "logs",
    "five",
    "meantime",
    "10",
    "milliseconds",
    "call",
    "back",
    "set",
    "timeout",
    "pushed",
    "task",
    "q",
    "cuz",
    "call",
    "back",
    "based",
    "api",
    "task",
    "q",
    "script",
    "done",
    "call",
    "stack",
    "empty",
    "event",
    "loop",
    "checks",
    "microtas",
    "q",
    "promise",
    "handler",
    "call",
    "back",
    "eventually",
    "calls",
    "console",
    "log",
    "one",
    "one",
    "logged",
    "console",
    "q",
    "microtask",
    "callback",
    "within",
    "callback",
    "call",
    "console",
    "log",
    "three",
    "three",
    "locked",
    "console",
    "call",
    "another",
    "q",
    "microtask",
    "cues",
    "another",
    "microtask",
    "call",
    "back",
    "microtask",
    "que",
    "however",
    "event",
    "loop",
    "ensure",
    "microtask",
    "q",
    "entirely",
    "empty",
    "moving",
    "task",
    "q",
    "call",
    "back",
    "immediately",
    "moved",
    "onto",
    "call",
    "stack",
    "logs",
    "four",
    "finally",
    "call",
    "stack",
    "empty",
    "microtask",
    "q",
    "empty",
    "first",
    "available",
    "task",
    "task",
    "q",
    "moved",
    "onto",
    "call",
    "stack",
    "eventually",
    "logs",
    "two",
    "51342",
    "let",
    "recap",
    "covered",
    "far",
    "javascript",
    "single",
    "threaded",
    "handle",
    "one",
    "task",
    "time",
    "use",
    "web",
    "apis",
    "interact",
    "features",
    "leveraged",
    "browser",
    "apis",
    "allow",
    "us",
    "initiate",
    "asing",
    "tasks",
    "background",
    "function",
    "call",
    "initiates",
    "asnc",
    "task",
    "like",
    "still",
    "added",
    "call",
    "stack",
    "hand",
    "browser",
    "actual",
    "async",
    "task",
    "handled",
    "background",
    "block",
    "call",
    "stack",
    "task",
    "cu",
    "used",
    "callback",
    "based",
    "web",
    "apis",
    "enue",
    "callback",
    "asynchronous",
    "task",
    "completed",
    "microtask",
    "q",
    "used",
    "promise",
    "handlers",
    "async",
    "function",
    "bodies",
    "await",
    "q",
    "microtask",
    "q",
    "callbacks",
    "new",
    "mutation",
    "observer",
    "callbacks",
    "queue",
    "priority",
    "task",
    "q",
    "event",
    "loop",
    "ensures",
    "queue",
    "entirely",
    "empty",
    "moving",
    "task",
    "q",
    "handling",
    "task",
    "task",
    "q",
    "event",
    "loop",
    "checks",
    "microtask",
    "q",
    "ensure",
    "nothing",
    "added",
    "meantime",
    "often",
    "come",
    "across",
    "asynchronous",
    "javascript",
    "entirely",
    "sure",
    "things",
    "execute",
    "certain",
    "way",
    "might",
    "discouraging",
    "hope",
    "explanation",
    "task",
    "q",
    "micro",
    "tasq",
    "event",
    "loop",
    "kind",
    "helped",
    "understand",
    "certain",
    "parts",
    "code",
    "execute",
    "certain",
    "time",
    "course",
    "always",
    "specific",
    "questions",
    "feel",
    "free",
    "reach",
    "also",
    "highly",
    "recommend",
    "kind",
    "play",
    "around",
    "like",
    "try",
    "using",
    "set",
    "timeout",
    "try",
    "using",
    "q",
    "microtask",
    "get",
    "better",
    "sense",
    "like",
    "oh",
    "yeah",
    "okay",
    "understand",
    "runs",
    "time",
    "time",
    "execute",
    "stuff",
    "like",
    "good",
    "luck",
    "fun",
    "coding"
  ],
  "keywords": [
    "event",
    "loop",
    "javascript",
    "within",
    "also",
    "call",
    "stack",
    "web",
    "apis",
    "task",
    "q",
    "microtask",
    "eventually",
    "well",
    "actually",
    "allow",
    "us",
    "use",
    "asynchronous",
    "tasks",
    "single",
    "execution",
    "program",
    "script",
    "first",
    "console",
    "log",
    "one",
    "new",
    "pushed",
    "onto",
    "logs",
    "two",
    "line",
    "invoke",
    "another",
    "function",
    "three",
    "four",
    "body",
    "gets",
    "logged",
    "something",
    "handle",
    "time",
    "long",
    "running",
    "cu",
    "entire",
    "like",
    "based",
    "user",
    "get",
    "data",
    "back",
    "api",
    "set",
    "browser",
    "features",
    "object",
    "fetch",
    "timeout",
    "kind",
    "callback",
    "promise",
    "let",
    "callbacks",
    "case",
    "see",
    "added",
    "however",
    "background",
    "still",
    "finally",
    "queue",
    "empty",
    "nothing",
    "moves",
    "delay",
    "timer",
    "end",
    "milliseconds",
    "right",
    "moved",
    "uh",
    "entirely",
    "checks",
    "handler",
    "server",
    "got",
    "promised"
  ]
}