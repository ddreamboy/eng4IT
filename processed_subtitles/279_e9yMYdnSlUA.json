{
  "text": "in this video I will share with you five\ntips to better organize your python code\nthese are not going to be life-changing\nthey're not going to have to do with\nsoftware design and software\narchitecture there are simple things\nthat you can Implement that make your\ncode much more readable and easier to\nnavigate with that said let's get into\ntip number\n[Music]\none all right so my tip number one is to\nuse modules and and packages now a\nmodule is an individual python file a\npackage is a directory containing\nmultiple python modules this is the best\nway to organize your python code\nwhenever you're working on a relatively\nlarge project you definitely want to\nutilize both of these things right now I\nwill give you a quick two-minute\ntutorial on how they work if you want to\nlearn more and learn more about software\ndesign in particular then check out my\ncourse programming expert. I'll leave a\nlink to it in the description you can\nuse discount code Tim if you are\ninterested regardless let's have a look\nat this so here you can see that I have\nthis physics package and what makes it a\npackage is the fact that I have this a\nknit. pi file inside of it so whenever\nyou want to make a package you do a\ndirectory you put some python modules\nwhatever you want you don't have to have\nany but if you want some and then you\nput an underscore uncore\nnitor dop now this is a special file and\nI'll talk about how it works in a second\nbut this is what makes this uh folder\nhere a package okay so now that I've\ndone that from main.py I can come here\nand say import and then just import the\nname of the directory itself now notice\nwhen I run the code here there's no\nerror I'm able to import this\nsuccessfully and let's have a look at\nsomething cool here when I go inside of\na knit. piy and I run the code or I have\nprint hello world now when I come to\nmain.py and I run this notice hello\nworld prints out now I didn't print\nanything from here I just imported the\nphysics package and what happens is\nwhatever's inside of a nit dopy that's\ngoing to run exactly one time the first\ntime that this package is imported so\nfrom my main file I import the package\nand then whatever's inside of here runs\nexactly once now the power of this is\nthat you can do some initialization code\ninside of your package you also can\nimport things from a nitpy which then\nallows main.py to import them without\nknowing what's inside of the package so\nyou'll see what I mean here but I have\nthis class uh let's actually go with\nforces okay so I have this forces class\nso what I can do is go to a nitpy and I\ncan say something like from Dot and then\nforces import and then forces okay we'll\ncontinue to print to low world and now\nwhat this allows me to do is from\nmain.py I can now say from physics\nimport and I can import forces and the\nreason I can do that is because we've\nimported here now if I remove this line\nso let's actually remove it and try when\nI run this notice it says forces is not\nin the module or not in the package\nphysics sorry can't find it okay let's\nclear that let's go back here let's\nreimport that now let's run and notice\nit prints out hello world but now I\ncould also use forces if I want so I\ncould say forces like this and when I\ninitialize it it just prints something\nout so let's initialize it let's run and\nthen I get hello world and forces so\nthat is really the power of modules and\npackages you can put packages inside of\nother packages and what I was doing here\nin a nitpy is something called a\nrelative import where I am importing\nfrom the current package that's what the\nsingle dot means the uh the forces file\nand then from the forces file I'm\nimporting the forces class anyways that\nis tip number one use modules and\npackages don't be afraid to separate\nyour code out if you have one large file\ncontaining multiple classes multiple\nfunctions all kinds of stuff that\ndoesn't make sense to be in one place\nseparate into multiple modules separate\nit into multiple packages and then write\nthe appropriate import statements to\nbring everything into the file that you\nneed all right so tip number two may be\nslightly controversial so let me know in\nthe comments if you disagree with me of\ncourse there's exceptions to everything\nthat I'm saying here and this is going\nto be to place a single class in a\nsingle file again there may be some\nexceptions some people may say to not do\nthis but for me when I'm writing\nprimarily objectoriented style code in\nPython I like to place each of my\nclasses in an individual file so in this\ncase I have an angular momentum class\nobviously it's a very simple example\njust for the video and I've placed it in\na file F called angular momentum now\nanother thing to note here when you're\nnaming files in Python the convention is\nto do snake case so snake case with all\nlowercase letters you should not have\nany Capitals in there and if you want to\nhave a space do an underscore but when\nyou're naming a class you want to have\nthis in Pascal case so Pascal case means\ncapital on the first word capital on all\nthe other words no spaces and no\nunderscores so it looks a little bit\nweird because this is different than the\nfile name but that's the convention in\nPython that's what you are supposed to\ndo according to pep 8 anyways that is\nwhat I'm saying for this tip Place each\nclass in an individual file I find this\nmakes your code very organized very easy\nto find the different classes and if you\nneed to use a class from another class\nthen just import all right that is tip\nnumber two all right so for tip number\nthree which is to group related\nfunctionality together I'm here on my\norganization's GitHub page I'll leave it\nin the description if you want to\ncontribute to open source projects then\nplease check this out all of the stuff\nhere is done by volunteers I have\nwritten a single line of code and this\nis all organized and facilitated through\nmy Discord server\ndiscord.gg WT I'll leave a link to in\nthe description we have like 33,000\nmembers so please join that if you want\nto be a part of this and you can also\nask some of the people who have set\nthese repositories up hey how did you\nstructure the code if you're curious\nabout that anyways I'm going to go to\nthis API directory here I don't know\nwhat a lot of this stuff is because\nagain I've not read any of this code\nit's all volunteers but I'm just going\nto show you how they've kind of\nstructured the different repositories uh\nand you'll see how easy it is to\nnavigate everything and how someone like\nme who again has really never looked at\nthis before can easily figure out where\nall of the different code is so the tip\nwas as a reminder group related\nfunctionality together so immediately\nwhen I'm looking here I see a bunch of\nrandom files these files are fine to\njust be in the main directory because\nthey're all kind of unrelated and since\nall these things are unrelated they'll\nall be in the same place so we're\ngrouping the unrelated things together\nwhich you know in turn groups related\nthings together uh anyways that we have\nutils test docs and then API so\nimmediately we have four packages or\nfour directories that are separating out\nthe main things that we have in our\napplication so when I go to utils I see\nthat I get some utilities notice I have\nmy init.py inside of here we're\nimporting a few things and then saying\nall is equal to this another python\nconvention I won't really talk about\nthat then if I come here to test I have\na bunch of different tests I have my\ntest utilities so the utilities for the\ntest are in a separate uh I guess you\ncould call this a package although it\ndoesn't have the init.py file but that's\nfine you can still kind of call it a\npackage uh continuing we have our docs\nokay documentation here so we have an MD\nfile markdown file for how you actually\nrun some of the different things here\ngoing back we have API inside of API we\nhave models we have Services we have\nversions if I go to Services uh we have\nthe different Services if I go to\nversions We have a version V1 okay so\nthis is where I'm getting at it's not\nsuper complicated there's not a ton of\nstuff that you have to do just think\nlogically about what stuff makes sense\nto be together and put it together in\nthis case they thought we had API\ndocumentation tests and utils that was\nthe main group of stuff okay all the\nstuff related to that goes inside of the\npackage if there's more specific stuff\nwithin say the API within the docs we\nmake a new package or folder for that\nand we are good to go all right so my\nnext tip is a quick one and this is to\nplace all of your Utilities in a single\nplace so either a single file or a\nsingle package now there's a lot of\ntimes when you're writing kind of helper\nfunction function or functions that\ndon't belong in a certain class or\nbelong in a certain file and you don't\nreally know where to put them for\nexample maybe you want to convert a date\nfrom the date time object to a string or\nmaybe you want to you know figure out\nthe distance between two points whatever\nthere's some random kind of helper\nfunctions that again aren't easily\nclassified into a class or a file or\nsome part that already exists in your\napplication if that's the case what you\nwant to do is create a utility package\nor a utility module if you only have say\nthree or four functions that you're\nusing and dump them all into there like\nI was saying before when you have stuff\nthat's not related together all of the\nstuff that's not related you should put\nin one place because what relates it is\nthe fact that it's not related to\nsomething else I know that's a little\nbit backwards but I just want to show\nyou here in this codebase they have the\nutils package right and inside of utils\nwe have things related to permissions\nthese are going to be used in multiple\nplaces they don't make sense to be\nanywhere other than the permissions file\nright same thing with response we have\nstuff related to the response we have a\nJson response class time. py okay this\nis doing stuff with time snowflake time\nwhatever I don't know exactly what's\ngoing on but the point is the way\nthey've named this and organized it it's\nvery easy for me to go in and see where\nthe utilities are being used and that\nway they're not clogging up different\nfiles and if I want to add something or\nchange something I can do it all in one\nplace in the utils package or utils file\nthat was it for that tip let's move on\nto number five all right so my last tip\nfor you here is to organize your import\nstatements now I don't know if they've\ndone it exactly the way I'm going to\nrecommend in this code base but I can\nalready see that they have this uh being\ndone decently and this becomes very\nimportant when you have a ton of\ndifferent Imports and a large project so\nyou'll see a lot of python files where\nyou have like 20 Imports 30 Imports in\nthis case we have 11 Imports and it's\njust really nice and easy when you\nactually organize and sort the Imports\nso you can go in whatever style you want\nso long as you're uh consistent across\nyour project what I like to do is import\nall of my third party libraries first\nwhich is actually what they've done here\nso they're using fast API so they take\nall their stuff from Fast API then from\nfake reies then from AOH HTTP then from\nlogging although logging is actually a\nbuilt-in module in Python so I wouldn't\nput that exactly with all this anyways I\nlike to go thirdparty Imports then I\nlike to go built-in Imports so something\nlike OS Json logging stuff that you\ndon't have to install this built into\npython then I like to go with my local\nfiles or my relative Imports so in this\ncase these are all local files that\nthey've coded themselves utils response\nuh API config and then lastly I like to\nalphabetically order my imports although\nthat can be a little bit challenging\nsometimes because you have to ask how\nare you doing it alphabetically are you\ndoing it by the name of the package for\nexample or the name of the module are\nyou doing it by what you're importing so\nthat one's not as important anyways this\njust makes it really easy to quickly go\nin locate the different things you're\nimporting see if you need to change\nsomething and know what block you're\ngoing to add a future import to so again\nthey haven't done it exactly like I\nwould do it but this is pretty good they\nhave all of their third parties then\nthey have their built-ins I would put\nthis one line down just to have third\nparties built in and then I have all of\nmy local Imports or relative Imports so\njust to continue to test these guys and\nsee if they've been consistent here\nlet's go into another file and okay so\nhere I already notice a few\ninconsistencies so these are local files\nthen we have another local file then we\nhave our built-in which is typing then\nthen we have our third party module then\nwe have a local file then we have\nanother local file now maybe they've\norganized it in this way for some reason\nthat I'm not familiar with or that I\njust don't understand because again I\ndon't write this code this is not my\ncode base to maintain uh but what I\nwould have done is SW swapped it around\nso it was in the order I said third\nparty built-in and then your local files\nhowever again there's always exceptions\nand you can always make debates this is\nnot a strict rule these are just tips\nthat for me I find helpful and well\nhopefully they helped you with that said\nI will wrap up the video here if you\nguys enjoyed make sure leave a like\nsubscribe to the channel check out\nprogramming expert if you want to learn\nmore about this topic and I will see you\nin another YouTube video\n[Music]\n",
  "words": [
    "video",
    "share",
    "five",
    "tips",
    "better",
    "organize",
    "python",
    "code",
    "going",
    "going",
    "software",
    "design",
    "software",
    "architecture",
    "simple",
    "things",
    "implement",
    "make",
    "code",
    "much",
    "readable",
    "easier",
    "navigate",
    "said",
    "let",
    "get",
    "tip",
    "number",
    "music",
    "one",
    "right",
    "tip",
    "number",
    "one",
    "use",
    "modules",
    "packages",
    "module",
    "individual",
    "python",
    "file",
    "package",
    "directory",
    "containing",
    "multiple",
    "python",
    "modules",
    "best",
    "way",
    "organize",
    "python",
    "code",
    "whenever",
    "working",
    "relatively",
    "large",
    "project",
    "definitely",
    "want",
    "utilize",
    "things",
    "right",
    "give",
    "quick",
    "tutorial",
    "work",
    "want",
    "learn",
    "learn",
    "software",
    "design",
    "particular",
    "check",
    "course",
    "programming",
    "expert",
    "leave",
    "link",
    "description",
    "use",
    "discount",
    "code",
    "tim",
    "interested",
    "regardless",
    "let",
    "look",
    "see",
    "physics",
    "package",
    "makes",
    "package",
    "fact",
    "knit",
    "pi",
    "file",
    "inside",
    "whenever",
    "want",
    "make",
    "package",
    "directory",
    "put",
    "python",
    "modules",
    "whatever",
    "want",
    "want",
    "put",
    "underscore",
    "uncore",
    "nitor",
    "dop",
    "special",
    "file",
    "talk",
    "works",
    "second",
    "makes",
    "uh",
    "folder",
    "package",
    "okay",
    "done",
    "come",
    "say",
    "import",
    "import",
    "name",
    "directory",
    "notice",
    "run",
    "code",
    "error",
    "able",
    "import",
    "successfully",
    "let",
    "look",
    "something",
    "cool",
    "go",
    "inside",
    "knit",
    "piy",
    "run",
    "code",
    "print",
    "hello",
    "world",
    "come",
    "run",
    "notice",
    "hello",
    "world",
    "prints",
    "print",
    "anything",
    "imported",
    "physics",
    "package",
    "happens",
    "whatever",
    "inside",
    "nit",
    "dopy",
    "going",
    "run",
    "exactly",
    "one",
    "time",
    "first",
    "time",
    "package",
    "imported",
    "main",
    "file",
    "import",
    "package",
    "whatever",
    "inside",
    "runs",
    "exactly",
    "power",
    "initialization",
    "code",
    "inside",
    "package",
    "also",
    "import",
    "things",
    "nitpy",
    "allows",
    "import",
    "without",
    "knowing",
    "inside",
    "package",
    "see",
    "mean",
    "class",
    "uh",
    "let",
    "actually",
    "go",
    "forces",
    "okay",
    "forces",
    "class",
    "go",
    "nitpy",
    "say",
    "something",
    "like",
    "dot",
    "forces",
    "import",
    "forces",
    "okay",
    "continue",
    "print",
    "low",
    "world",
    "allows",
    "say",
    "physics",
    "import",
    "import",
    "forces",
    "reason",
    "imported",
    "remove",
    "line",
    "let",
    "actually",
    "remove",
    "try",
    "run",
    "notice",
    "says",
    "forces",
    "module",
    "package",
    "physics",
    "sorry",
    "ca",
    "find",
    "okay",
    "let",
    "clear",
    "let",
    "go",
    "back",
    "let",
    "reimport",
    "let",
    "run",
    "notice",
    "prints",
    "hello",
    "world",
    "could",
    "also",
    "use",
    "forces",
    "want",
    "could",
    "say",
    "forces",
    "like",
    "initialize",
    "prints",
    "something",
    "let",
    "initialize",
    "let",
    "run",
    "get",
    "hello",
    "world",
    "forces",
    "really",
    "power",
    "modules",
    "packages",
    "put",
    "packages",
    "inside",
    "packages",
    "nitpy",
    "something",
    "called",
    "relative",
    "import",
    "importing",
    "current",
    "package",
    "single",
    "dot",
    "means",
    "uh",
    "forces",
    "file",
    "forces",
    "file",
    "importing",
    "forces",
    "class",
    "anyways",
    "tip",
    "number",
    "one",
    "use",
    "modules",
    "packages",
    "afraid",
    "separate",
    "code",
    "one",
    "large",
    "file",
    "containing",
    "multiple",
    "classes",
    "multiple",
    "functions",
    "kinds",
    "stuff",
    "make",
    "sense",
    "one",
    "place",
    "separate",
    "multiple",
    "modules",
    "separate",
    "multiple",
    "packages",
    "write",
    "appropriate",
    "import",
    "statements",
    "bring",
    "everything",
    "file",
    "need",
    "right",
    "tip",
    "number",
    "two",
    "may",
    "slightly",
    "controversial",
    "let",
    "know",
    "comments",
    "disagree",
    "course",
    "exceptions",
    "everything",
    "saying",
    "going",
    "place",
    "single",
    "class",
    "single",
    "file",
    "may",
    "exceptions",
    "people",
    "may",
    "say",
    "writing",
    "primarily",
    "objectoriented",
    "style",
    "code",
    "python",
    "like",
    "place",
    "classes",
    "individual",
    "file",
    "case",
    "angular",
    "momentum",
    "class",
    "obviously",
    "simple",
    "example",
    "video",
    "placed",
    "file",
    "f",
    "called",
    "angular",
    "momentum",
    "another",
    "thing",
    "note",
    "naming",
    "files",
    "python",
    "convention",
    "snake",
    "case",
    "snake",
    "case",
    "lowercase",
    "letters",
    "capitals",
    "want",
    "space",
    "underscore",
    "naming",
    "class",
    "want",
    "pascal",
    "case",
    "pascal",
    "case",
    "means",
    "capital",
    "first",
    "word",
    "capital",
    "words",
    "spaces",
    "underscores",
    "looks",
    "little",
    "bit",
    "weird",
    "different",
    "file",
    "name",
    "convention",
    "python",
    "supposed",
    "according",
    "pep",
    "8",
    "anyways",
    "saying",
    "tip",
    "place",
    "class",
    "individual",
    "file",
    "find",
    "makes",
    "code",
    "organized",
    "easy",
    "find",
    "different",
    "classes",
    "need",
    "use",
    "class",
    "another",
    "class",
    "import",
    "right",
    "tip",
    "number",
    "two",
    "right",
    "tip",
    "number",
    "three",
    "group",
    "related",
    "functionality",
    "together",
    "organization",
    "github",
    "page",
    "leave",
    "description",
    "want",
    "contribute",
    "open",
    "source",
    "projects",
    "please",
    "check",
    "stuff",
    "done",
    "volunteers",
    "written",
    "single",
    "line",
    "code",
    "organized",
    "facilitated",
    "discord",
    "server",
    "wt",
    "leave",
    "link",
    "description",
    "like",
    "members",
    "please",
    "join",
    "want",
    "part",
    "also",
    "ask",
    "people",
    "set",
    "repositories",
    "hey",
    "structure",
    "code",
    "curious",
    "anyways",
    "going",
    "go",
    "api",
    "directory",
    "know",
    "lot",
    "stuff",
    "read",
    "code",
    "volunteers",
    "going",
    "show",
    "kind",
    "structured",
    "different",
    "repositories",
    "uh",
    "see",
    "easy",
    "navigate",
    "everything",
    "someone",
    "like",
    "really",
    "never",
    "looked",
    "easily",
    "figure",
    "different",
    "code",
    "tip",
    "reminder",
    "group",
    "related",
    "functionality",
    "together",
    "immediately",
    "looking",
    "see",
    "bunch",
    "random",
    "files",
    "files",
    "fine",
    "main",
    "directory",
    "kind",
    "unrelated",
    "since",
    "things",
    "unrelated",
    "place",
    "grouping",
    "unrelated",
    "things",
    "together",
    "know",
    "turn",
    "groups",
    "related",
    "things",
    "together",
    "uh",
    "anyways",
    "utils",
    "test",
    "docs",
    "api",
    "immediately",
    "four",
    "packages",
    "four",
    "directories",
    "separating",
    "main",
    "things",
    "application",
    "go",
    "utils",
    "see",
    "get",
    "utilities",
    "notice",
    "inside",
    "importing",
    "things",
    "saying",
    "equal",
    "another",
    "python",
    "convention",
    "wo",
    "really",
    "talk",
    "come",
    "test",
    "bunch",
    "different",
    "tests",
    "test",
    "utilities",
    "utilities",
    "test",
    "separate",
    "uh",
    "guess",
    "could",
    "call",
    "package",
    "although",
    "file",
    "fine",
    "still",
    "kind",
    "call",
    "package",
    "uh",
    "continuing",
    "docs",
    "okay",
    "documentation",
    "md",
    "file",
    "markdown",
    "file",
    "actually",
    "run",
    "different",
    "things",
    "going",
    "back",
    "api",
    "inside",
    "api",
    "models",
    "services",
    "versions",
    "go",
    "services",
    "uh",
    "different",
    "services",
    "go",
    "versions",
    "version",
    "v1",
    "okay",
    "getting",
    "super",
    "complicated",
    "ton",
    "stuff",
    "think",
    "logically",
    "stuff",
    "makes",
    "sense",
    "together",
    "put",
    "together",
    "case",
    "thought",
    "api",
    "documentation",
    "tests",
    "utils",
    "main",
    "group",
    "stuff",
    "okay",
    "stuff",
    "related",
    "goes",
    "inside",
    "package",
    "specific",
    "stuff",
    "within",
    "say",
    "api",
    "within",
    "docs",
    "make",
    "new",
    "package",
    "folder",
    "good",
    "go",
    "right",
    "next",
    "tip",
    "quick",
    "one",
    "place",
    "utilities",
    "single",
    "place",
    "either",
    "single",
    "file",
    "single",
    "package",
    "lot",
    "times",
    "writing",
    "kind",
    "helper",
    "function",
    "function",
    "functions",
    "belong",
    "certain",
    "class",
    "belong",
    "certain",
    "file",
    "really",
    "know",
    "put",
    "example",
    "maybe",
    "want",
    "convert",
    "date",
    "date",
    "time",
    "object",
    "string",
    "maybe",
    "want",
    "know",
    "figure",
    "distance",
    "two",
    "points",
    "whatever",
    "random",
    "kind",
    "helper",
    "functions",
    "easily",
    "classified",
    "class",
    "file",
    "part",
    "already",
    "exists",
    "application",
    "case",
    "want",
    "create",
    "utility",
    "package",
    "utility",
    "module",
    "say",
    "three",
    "four",
    "functions",
    "using",
    "dump",
    "like",
    "saying",
    "stuff",
    "related",
    "together",
    "stuff",
    "related",
    "put",
    "one",
    "place",
    "relates",
    "fact",
    "related",
    "something",
    "else",
    "know",
    "little",
    "bit",
    "backwards",
    "want",
    "show",
    "codebase",
    "utils",
    "package",
    "right",
    "inside",
    "utils",
    "things",
    "related",
    "permissions",
    "going",
    "used",
    "multiple",
    "places",
    "make",
    "sense",
    "anywhere",
    "permissions",
    "file",
    "right",
    "thing",
    "response",
    "stuff",
    "related",
    "response",
    "json",
    "response",
    "class",
    "time",
    "py",
    "okay",
    "stuff",
    "time",
    "snowflake",
    "time",
    "whatever",
    "know",
    "exactly",
    "going",
    "point",
    "way",
    "named",
    "organized",
    "easy",
    "go",
    "see",
    "utilities",
    "used",
    "way",
    "clogging",
    "different",
    "files",
    "want",
    "add",
    "something",
    "change",
    "something",
    "one",
    "place",
    "utils",
    "package",
    "utils",
    "file",
    "tip",
    "let",
    "move",
    "number",
    "five",
    "right",
    "last",
    "tip",
    "organize",
    "import",
    "statements",
    "know",
    "done",
    "exactly",
    "way",
    "going",
    "recommend",
    "code",
    "base",
    "already",
    "see",
    "uh",
    "done",
    "decently",
    "becomes",
    "important",
    "ton",
    "different",
    "imports",
    "large",
    "project",
    "see",
    "lot",
    "python",
    "files",
    "like",
    "20",
    "imports",
    "30",
    "imports",
    "case",
    "11",
    "imports",
    "really",
    "nice",
    "easy",
    "actually",
    "organize",
    "sort",
    "imports",
    "go",
    "whatever",
    "style",
    "want",
    "long",
    "uh",
    "consistent",
    "across",
    "project",
    "like",
    "import",
    "third",
    "party",
    "libraries",
    "first",
    "actually",
    "done",
    "using",
    "fast",
    "api",
    "take",
    "stuff",
    "fast",
    "api",
    "fake",
    "reies",
    "aoh",
    "http",
    "logging",
    "although",
    "logging",
    "actually",
    "module",
    "python",
    "would",
    "put",
    "exactly",
    "anyways",
    "like",
    "go",
    "thirdparty",
    "imports",
    "like",
    "go",
    "imports",
    "something",
    "like",
    "os",
    "json",
    "logging",
    "stuff",
    "install",
    "built",
    "python",
    "like",
    "go",
    "local",
    "files",
    "relative",
    "imports",
    "case",
    "local",
    "files",
    "coded",
    "utils",
    "response",
    "uh",
    "api",
    "config",
    "lastly",
    "like",
    "alphabetically",
    "order",
    "imports",
    "although",
    "little",
    "bit",
    "challenging",
    "sometimes",
    "ask",
    "alphabetically",
    "name",
    "package",
    "example",
    "name",
    "module",
    "importing",
    "one",
    "important",
    "anyways",
    "makes",
    "really",
    "easy",
    "quickly",
    "go",
    "locate",
    "different",
    "things",
    "importing",
    "see",
    "need",
    "change",
    "something",
    "know",
    "block",
    "going",
    "add",
    "future",
    "import",
    "done",
    "exactly",
    "like",
    "would",
    "pretty",
    "good",
    "third",
    "parties",
    "would",
    "put",
    "one",
    "line",
    "third",
    "parties",
    "built",
    "local",
    "imports",
    "relative",
    "imports",
    "continue",
    "test",
    "guys",
    "see",
    "consistent",
    "let",
    "go",
    "another",
    "file",
    "okay",
    "already",
    "notice",
    "inconsistencies",
    "local",
    "files",
    "another",
    "local",
    "file",
    "typing",
    "third",
    "party",
    "module",
    "local",
    "file",
    "another",
    "local",
    "file",
    "maybe",
    "organized",
    "way",
    "reason",
    "familiar",
    "understand",
    "write",
    "code",
    "code",
    "base",
    "maintain",
    "uh",
    "would",
    "done",
    "sw",
    "swapped",
    "around",
    "order",
    "said",
    "third",
    "party",
    "local",
    "files",
    "however",
    "always",
    "exceptions",
    "always",
    "make",
    "debates",
    "strict",
    "rule",
    "tips",
    "find",
    "helpful",
    "well",
    "hopefully",
    "helped",
    "said",
    "wrap",
    "video",
    "guys",
    "enjoyed",
    "make",
    "sure",
    "leave",
    "like",
    "subscribe",
    "channel",
    "check",
    "programming",
    "expert",
    "want",
    "learn",
    "topic",
    "see",
    "another",
    "youtube",
    "video",
    "music"
  ],
  "keywords": [
    "video",
    "organize",
    "python",
    "code",
    "going",
    "software",
    "things",
    "make",
    "said",
    "let",
    "get",
    "tip",
    "number",
    "one",
    "right",
    "use",
    "modules",
    "packages",
    "module",
    "individual",
    "file",
    "package",
    "directory",
    "multiple",
    "way",
    "large",
    "project",
    "want",
    "learn",
    "check",
    "leave",
    "description",
    "see",
    "physics",
    "makes",
    "inside",
    "put",
    "whatever",
    "uh",
    "okay",
    "done",
    "come",
    "say",
    "import",
    "name",
    "notice",
    "run",
    "something",
    "go",
    "print",
    "hello",
    "world",
    "prints",
    "imported",
    "exactly",
    "time",
    "first",
    "main",
    "also",
    "nitpy",
    "class",
    "actually",
    "forces",
    "like",
    "line",
    "find",
    "could",
    "really",
    "relative",
    "importing",
    "single",
    "anyways",
    "separate",
    "classes",
    "functions",
    "stuff",
    "sense",
    "place",
    "everything",
    "need",
    "two",
    "may",
    "know",
    "exceptions",
    "saying",
    "case",
    "example",
    "another",
    "files",
    "convention",
    "little",
    "bit",
    "different",
    "organized",
    "easy",
    "group",
    "related",
    "together",
    "api",
    "lot",
    "kind",
    "unrelated",
    "utils",
    "test",
    "docs",
    "four",
    "utilities",
    "although",
    "services",
    "maybe",
    "already",
    "response",
    "imports",
    "third",
    "party",
    "logging",
    "would",
    "local"
  ]
}