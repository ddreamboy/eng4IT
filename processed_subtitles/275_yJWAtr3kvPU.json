{
  "text": "hello everyone in this video I will show\nyou how to use deep learning for\nfootball analysis based on game\nrecordings so the main idea is to\nextract useful information from video\nrecordings of football games and more\nprecisely the ultimate goal is to track\neach object of Interest such as the\nplayers and the ball and to capture the\ncoordinates of each tracked object at\nany given frame with relatively high\naccuracy and this would certainly allow\nus to calculate many useful statistics\nsuch as ball possession rate players\ntraveled distances the ball and players\naverage speed and many other statistics\nhowever as you can imagine there are\nmany challenges that we need to overcome\nin order to achieve that goal so the\napplication we have today presents the\nfirst step and its main functionality is\nto detect the players the referee and\nthe ball then seamlessly project their\ncoordinates on a tactical map\nrepresentation of the football field\nokay so now let's start with the demo\nfor the web application and then I'll be\nexplaining the different functional\nities and the reasoning behind their\nimplementation and finally we'll do a\nsimple code work through and of course\nyou can find the different files for\nthis project in the GitHub repository\nwhich you can access through the link in\nthe description one last thing I need to\nadd before we start the demo is that uh\nwhen training the object detection\nmodels I use the Tactical recordings of\nuh football games and that's because if\nyou want to achieve a highly accurate\ntactical map representation we need\neither a fixed camera or a camera that\ndoesn't move too much that's why I\ndecided not to use the regular TV\npodcast recordings of football games\nokay so without further Ado let's start\nwith the web application\ndemo okay so here we have the web app\nfor football players detection with Team\nprediction and tactical map\nrepresentation so the first page here is\nthe how to use page you can follow the\ndifferent steps here in order to\nnavigate the app and learn how to use it\nbut I'll show you how in this quick demo\nso first of all we start with the main\nsettings we need to select a demo video\nwe have two options here and here we\nhave the first one selected but of\ncourse if you want to use your own video\nyou can upload it using this button and\nthen you can preview your uploaded video\nover here so let me show you this is the\nfirst demo video it's a tactical camera\nrecording for the game between France\nand Switzerland so the next step is to\nset the team names so the first team\nhere is France and the second team is\nSwitzerland then we need to move on to\nthe team colors Tab and here we need to\nset the different team colors that will\nbe used afterwards for team predictions\nso here we have a select frame slider\nand we need to select frame where every\nplayer is detected for example here in\nthe first frame we don't see the\ngoalkeeper of the Switzerland national\nteam detected so we need to choose\nanother frame for example in the second\nframe we can see that both both\ngoalkeepers of the two teams are\ndetected and we can work with this Frame\nand then we need to select the different\ncolors for both teams so for each team\nwe have two colors one for the players\nand one for the goalkeeper and to select\nthe colors we simply need to click on\nwhich color we need to select and then\nclick on the detection images here so\nfor example for the France uh players\ncolor we simply click for example on\nthis uh pixel and the picket color will\nbe shown in the box below now let's\nselect the color for the France\ngoalkeeper and we repeat the same\nprocess we pick color and it will be\nshown\nhere we can do the same thing for the\nSwitzerland team first the players\ncolor and finally the goalkeeper color\nof course you don't need to do this for\nthe demo videos because the different\ncolors are predefined but if you if you\nwant to upload your own video you need\nto perform this step in order to get uh\na correct or an accurate tee prediction\nuh once we have the different colors set\nwe can move on to the last tab which is\nthe model hyperparameters and\ndetection okay so the different\nparameters here will be discussed later\non but here we have uh annotation\noptions which are detection options so\nif you want to show the key points\ndetection the players detection the\ncolor pallets or the ball tracks you can\ntoggle these um options and you can save\nthe output video if you check this uh\nbox and of course you can enter the file\nname which is optional if you don't want\nto enter a file name one will be\ngenerated and you can find of course the\noutput video in the output uh folder\nlet's start with the player detection\noption all right as you can see here we\nhave the different players detected and\nand we have the team prediction for\nFrance and Switzerland and here we have\neach player with the color palette\ndetected which is used for the team\nprediction and of course here we have\nthe Tactical map with the ball track\nrepresentation now the FPS here is low\nis around four on average but if we run\nthe same code on a Jupiter notebook we\ncan get it up to8 FPS but of course uh\nmany more optimization steps can be\ntaken in order to improve the\nFPS all right now let's stop the\ndetection and add the uh show key Point\ndetection option let's start again now\nit will show you the different field key\npoints that were detected and these key\npoints are used to build the Tactical\nmap\nrepresentation and as you can see here\nwe have an efficient and accurate key\nPoint detection all right now let's move\non to the second demo\nvideo so we simply need to select the\ndemo two op option on the main settings\nand everything else will be changed\naccordingly from the team names to the\nteam\ncolors so we only need to uh click on\nstart\ndetection all right so here we have two\nteams with quite similar colors and\nthat's why the team prediction isn't as\naccurate and we will discuss later on\nwhat can be done to improve on that and\nif you've noticed it as well in the\nbeginning the Tactical map\nrepresentation was wasn't accurate but\nthen it got corrected when the camera\nstarted\nmoving and that's another functionality\nimplemented to correct the different uh\nrepresentation based on the camera\nmovement okay so that's it for the demo\nlet's stop the detection and let's\ndiscuss how the different\nfunctionalities were implemented okay so\nhere we have a flowchart of the football\nanalysis web application and we start\nhere with an input video of course which\nis passed to two object detect ction\nmodels as you can see here so the first\nfunctionality in this web app and the\nmost crucial one is the detection of the\ndifferent objects of interest in the\ninput video and here I trained two\nmodels one for the player the referee\nand the ball detection and the other one\nis for the field key points so the\nmodels I trained are YOLO V8 models\nwhich were trained on a custom data set\nthat I labeled manually each data set\ncontains about 500 images and as I said\nearlier I used tactical map recordings\nof football games in order to create\nthese uh data sets and I used free\nannotation tools label me and Cat for\nThe annotation of the data sets now I\nwon't go into details on how to install\nand use these tools but you can find\ndifferent guides on the internet and in\ntheir uh respective GitHub repositories\nwhich you can find the links for in the\ndescription so now that we have the data\nsets we can train uh the YOLO models and\nI've used hyperparameter tune technique\nimplemented in Yolo V8 to achieve great\nresults even with these small custom\ndata sets that I've have created so as\nwe can see here the confusion matrices\nshows that we have achieved relatively\ngreat results for all the different\nclasses uh in both models except for the\nball class where it only predicted 25%\nof the balls present in the validation\nset so we have low recall for the ball\nclass and that's expected of course\nbecause the ball class was was\nunderrepresented in the data set which\nis also true for other field key points\nand as we've seen that class imbalance\naffects especially the recall for those\nclasses meaning that the object won't be\ndetected as much as we want to and this\nissue can be addressed using larger data\nsets or through data augmentation\ntechniques but for the time being I'm\nsatisfied with the current models\nresults but if you want to train a more\naccurate YOLO V8 model it is recommended\nthat you use at least 1 ,500 images per\nclass and you can find the different\ntips on how to create a good custom data\nset on the ulo V8 documentation page and\nyou can also find the link for that in\nthe description all right so now we have\nthe models we need that pretty much\nrepresents all the machine learning\npresent in this application and all the\nremaining functionalities are simple\ncomputer vision algorithms that uses the\nresults obtained from these detection\nmodels so the results from the players\ndetection model are used first to\nextract the color pet for each detected\nplayer this extracted color palette will\nbe used later on to predict the team of\nthe detected player and the result from\nthe keypoint detection model is used to\ncalculate a homography matrix which is a\nmatrix that Maps the key points position\non the Tactical map and the position of\nthe detected key points on the video so\nonce we have the homography Matrix we\ncan map each point on the frame to a\npoint on the Tactical map map and that\nis indeed the next functionality which\nis calculating the player's position on\nthe Tactical map so once we have the\nbounding boxes for each detected player\nwe can get the coordinate of each player\non the frame and then using the\nhomography Matrix we can map that\ncoordinate to the Tactical map and\nthat's basically how we get the\nrepresentation now once we have the team\npredictions for the detected players we\ncan add that as well as the ball tracks\nrepresentation on the Tactical map in\norder to generate the output video all\nright so now let's discuss a little bit\nfurther the algorithm used for the team\nprediction as well as the homography\ntransformation for the team prediction\nalgorithm I was first thinking about\nusing a clustering algorithm or\nclustering model with two clusters let's\nsay for example team a and Team B and\nthat way I thought we could distinguish\nuh both teams so I tried this idea and\nhere we have for example for this Frame\nwe need to extract all the players\nbounding boxes after that I wanted to\nuse the extracted images of the players\nto train train the clustering algorithms\nI tried K means and DB scan well\nobviously we need to train a model every\nsingle frame since we will not be\ntracking the players that's exactly why\nwe can't be using the images as a whole\nfor the training process of the\nclustering algorithm as it will make the\napp very slow but I tried multiple\nfeature extraction methods such as using\na pre-trained CNN or averaging the\ncolors present in each image or\nextracting the dominant colors palette\nthese extracted features I tried to use\nthem for the uh training of the\nclustering model however no matter what\nfeature extraction method we use I\nobtained very poor results regarding the\ninstantaneous team prediction and to\nillustrate the main issues regarding\nthis approach let's check this example\nso here we have a random frame where we\nhave successfully detected the different\nplayers and calculated the average color\nfor each player in this image and here\nwe have the position of each player in\nthe RGB space now we can see clearly\nthat we have a player far away from all\nthe others and that's because we\ndetected the goalkeeper in this Frame\nthat is wearing a reddish colored kit so\nusing DP scan is expected to fail in\nthis case but even if we remove the\ngoalkeepers from this equation we still\ndon't see a clear separation between\nboth teams that's understandable since\nboth teams are wearing shade of blue so\nI figured let's use a rather\nstraightforward solution without any\nmachine learning model and that is by\ndefining from the start the colors of\neach team and then each time we detect a\nplayer we can extract its pette of\ndominant colors and then calculate the\ndistance between those colors and the\npredefined team colors and as such we\ncan assign each player to its team more\naccurately but since we have the green\ngrasp present in almost every image of\ndetected players we can expect that the\ngreen color will always be present in\nthe color palette we extract which is\nnot very useful for the team prediction\nso that's why I decided to use a smaller\ncentered rectangle to extract the color\npalette as shown here and that indeed\nimproved dramatically the accuracy of\nthe team prediction algorithm one last\nthing I need to note before move on to\nthe next functionality algorithm is that\nthe distances between the extracted\ncolor palette and the predefined colors\nare calculated in the lab space not the\nRGB space and that's because it is\nreported that the distances in that\nspace are more meaningful and are much\ncloser to the perception of the human\neye and that's what we want okay so now\nlet's move on to the next functionality\nwhich is transforming the coordinates of\nthe detected players from the frame\nplane to the Tactical map plane now as I\nsaid to achieve this transformation we\nwill be using something called The\nhomography Matrix which is a commonly\nused Matrix to shift perspective so as\nIllustrated in this image we can use it\nto look to the same scene from different\npoint of views and the transformation\nfrom one POV to the other is obtained\nthrough this homography Matrix so this\nis exactly the transformation we need to\nuse in this application and to achieve\nthat we need to map at least four points\nfrom the first point of view to the\nsecond point of view and in our case we\nhave a tactical map in which we defined\nthe certain number of key points and\nsave their coordinates now when we\ndetect at least four key points on any\ngiven frame we can calculate a\nhomography matrix and as you can see in\nthis example one thing I noticed is that\nwith EXA L four key points we can have\n100% accuracy of POV shift using the\nhomography Matrix or the homography\ntransformation especially in the\nproximity of these four points however\nwhen we increase the number of key\npoints the accuracy will decrease and\nthat can be due to a slight warp in the\ncamera recording or in case the points\nare not in the same 3D planner as I\nfound mentioned in this stack Overflow\npost and after some trials I figured\nthat the error from the homography\ntransformation is not that big so we can\nwork with it for now but the main issue\nwas the shaky and jumpy behavior of the\ncoordinates on the Tactical map which is\ndue basically to the fact that we're\ncalculating the homography uh Matrix in\nevery single frame where we detect more\nthan four key points and that's why I\nintroduced a homography matrix update\ncondition that is used to determine in\nevery single frame whether to update the\nhomography Matrix or to use the last one\nand this would obviously reduce the\ncomputational cost which will improve a\nlittle bit the frame rate and also make\nthe Tactical map representation much\nsmoother and the condition I set is a\nrather simple one where in each frame if\nwe detect more than a certain number of\nkey points that were detected in the\nprevious frame we calculate if those\ncommon key points have moved on average\nBeyond a certain threshold and if that's\nthe case we need to update the\nhomography Matrix and if not we will\nkeep using the last calculated one so\nthe number of the common key points as\nwell as the distance threshold are hyper\nparameters that should be set carefully\nnow once we have the coordinates of the\nplayers and the ball on the Tactical map\nwe can easily track the ball movement\nsince we only have one ball present in\nthe field at each frame and that indeed\npresents the last functionality of this\napplication and finally the annotated\nframe is displayed and as we've seen in\nthe demo at the beginning of this video\nwe have on average 4 FPS but as we can\nsee here if we run the same code on a\nnotebook we can improve that FPS up to\neight on average all right so now let's\ngo over the code for the different\nfunctionalities that we discussed so\nfirst we need to get the labels as\ndefined for the two data sets and as we\ncan see we have them stored in these\nyaml configuration files that were used\nto train the YOLO V8 models so now we\nhave both the numerical and alphabetical\nrepresentation of the different labels\nand we will be using that to identify\nthe objects we detect so then we need to\nset the video paths as well as the team\ncolors parameters and as as I mentioned\nearlier we convert the colors to the lab\nformat in order to calculate the\ndistances for the team prediction then\nwe need to import the YOLO models so we\nhave two models for the player detection\nand for the key points uh detection\nafter that we set some hyper parameters\nsuch as the confidence threshold for\nboth models and the keyo displacement\nthreshold and then we start the capture\nLoop so in this Loop we will process\neach frame so here we first increment\nthe frame counter and we read the frame\nfrom the capture so in each frame we\ncreate a new copy of the Tactical map so\nwe can display the uh detected objects\nuh coordinates and then here we set the\nball tracking history variable in case\nwe exceeded a certain number of frames\nwithout detecting any ball object so the\nfirst part in this uh code is the object\ndetection and coordinate transformation\nso here we get the uh result from both\nmodels detections and we can see we have\nthe results stored here here for the\nbounding boxes for both models as well\nas the labels and then we can extract\nthe alphabetical representation of the\ndetected labels after that we need to\nget the detected key points or field key\npoints uh coordinates on both the\nTactical map which are predefined\ncoordinates and the coordinates on the\ncurrent frame we will be using those\ncoordinates of course to calculate the\nhomography Matrix so here if we detected\nmore than three labels meaning four or\nmore key points we will check the update\ncondition and here we have the frame\nnumber bigger than one meaning that if\nwe're on the first frame we of course\nneed to calculate the homography without\nchecking the condition because we don't\nhave a previously calculated homography\nMatrix but if the frame number is bigger\nthan one we need first to check how many\ncommon key points are detected so if we\nhave more than three common key points\ndetected we need to calculate the error\nbetween the position of the uh detected\nkey points on this Frame and on the\nprevious uh frame so here we used the\nmean squared error and if that error\nexceeds a certain predefined tolerance\nwe need to update the homography Matrix\nnow the homography Matrix is calculated\nusing this function find homography from\nopen CV and I forget to mention that\nthere are other methods to calculate the\nhomography Matrix or to perform\nrespective shift and there are uh ones\nthat involves deep learning or machine\nlearning but I wanted to keep things\nsimple for this application and using\nthis uh function from open CV we can\nobtain relatively good results so once\nwe have the homography Matrix we can uh\ntransform the coordinates of the\ndetected players from the frame to the\nTactical map and we can achieve that\nusing a simple matrix multiplication as\nshown here so then we need to transform\nthe ball coordinates as well and as a\nfinal step we update the ball tracking\nhistory so we uh save the uh position of\nthe ball on both the Tactical map and\nthe frame but we will only display the\ntracks on the Tactical map since the\ntracks on the input video are not\nrelevant since the camera is moving so\nthe tracks won't be uh reliable and we\nhave here set some conditions for the\ntrack history so for instance this first\ncondition would create new track for the\nball if it moved dramatically from the\nprevious position and this condition\nhere would prevent the ball tracking\nhistory from surpassing Max length that\nwe defined earlier so the second part of\nthis algorithm is the Players team\nprediction so first of all we need to\nconvert the frame from BGR to RGB since\nwe're using open CV and it uses uh as\ndefault the BGR setting then we have\nthis Loop which will extract the color\npalette from each detected player so the\nfirst part here is to extract a centered\nand much smaller rectangle instead of\nthe whole bounding box of each player\nand this cented filter would be used to\nextract the color palette so so the\ncolor palette extraction is performed\nusing this function from the pillow\nlibrary and once we have the color\npalette extracted we need to get the top\ndominant colors so here we calculate the\nredundance of each color and we sort the\nvalues then we can get for example the\ntop three dominant colors which are\ndefined in this pallette interval\nvariable from 0 to 5 all right so once\nwe have the color palette we can append\nit to this list and then we can use the\nlist of extracted color palettes to\npredict the team for each player so as I\nsaid we will be using the distance in\nthe lab uh color space so that's why we\nfirst need to convert the detected color\npallet from RGB to lab and then here we\ncalculate the distance using this method\nfrom SK image which calculat the ukian\ndistance in the lab color space so in\nthis Loop for each color in each color\npalette we calculate its distance from\nthe four predefined colors and then we\ncan assign each color to the\ncorresponding team which is closer to\nthat color so here for instance we have\na palette of five colors and each color\nwill be assigned a team and then using a\nsimple voting mechanism we can get the\nteam prediction for each player which is\nuh performed in this Loop so we Loop\nover the different player distances and\nthen we uh predict the the players team\nby vote counting and that's how we\nperform the team players prediction and\nnow moving on to the last part which is\nto annotate the current frame and the\nTactical map so first we Loop over all\nthe detected objects by the player\ndetection model and we display the color\npalette next to each detected object\nbounding box and then we annotate the\nTactical map with the player position\nfor each team with the corresponding\ncolor and then we add The annotation of\ncourse for the referee bounding box as\nwell as the ball bounding box and then\nwe add the ball tracking line on the\nTactical map and as a final step we\ncombine all The annotation in one single\nuh output frame and then we display the\noutput frame and we move on to the next\niteration all right so let me now run\nthis code to show you what is the\nexpected\nresult all right and as you can see here\nwe have a higher frame rate and you can\nsee all the different annotation s uh\nthat we discussed and you can click on P\nto pose uh the detection or Q to quit\nthe detection all right so that's it for\nthis application as I said you can find\nthe code for this project in the GitHub\nrepository uh through the link in the\ndescription and that's it for this video\nso see you next\ntime\n",
  "words": [
    "hello",
    "everyone",
    "video",
    "show",
    "use",
    "deep",
    "learning",
    "football",
    "analysis",
    "based",
    "game",
    "recordings",
    "main",
    "idea",
    "extract",
    "useful",
    "information",
    "video",
    "recordings",
    "football",
    "games",
    "precisely",
    "ultimate",
    "goal",
    "track",
    "object",
    "interest",
    "players",
    "ball",
    "capture",
    "coordinates",
    "tracked",
    "object",
    "given",
    "frame",
    "relatively",
    "high",
    "accuracy",
    "would",
    "certainly",
    "allow",
    "us",
    "calculate",
    "many",
    "useful",
    "statistics",
    "ball",
    "possession",
    "rate",
    "players",
    "traveled",
    "distances",
    "ball",
    "players",
    "average",
    "speed",
    "many",
    "statistics",
    "however",
    "imagine",
    "many",
    "challenges",
    "need",
    "overcome",
    "order",
    "achieve",
    "goal",
    "application",
    "today",
    "presents",
    "first",
    "step",
    "main",
    "functionality",
    "detect",
    "players",
    "referee",
    "ball",
    "seamlessly",
    "project",
    "coordinates",
    "tactical",
    "map",
    "representation",
    "football",
    "field",
    "okay",
    "let",
    "start",
    "demo",
    "web",
    "application",
    "explaining",
    "different",
    "functional",
    "ities",
    "reasoning",
    "behind",
    "implementation",
    "finally",
    "simple",
    "code",
    "work",
    "course",
    "find",
    "different",
    "files",
    "project",
    "github",
    "repository",
    "access",
    "link",
    "description",
    "one",
    "last",
    "thing",
    "need",
    "add",
    "start",
    "demo",
    "uh",
    "training",
    "object",
    "detection",
    "models",
    "use",
    "tactical",
    "recordings",
    "uh",
    "football",
    "games",
    "want",
    "achieve",
    "highly",
    "accurate",
    "tactical",
    "map",
    "representation",
    "need",
    "either",
    "fixed",
    "camera",
    "camera",
    "move",
    "much",
    "decided",
    "use",
    "regular",
    "tv",
    "podcast",
    "recordings",
    "football",
    "games",
    "okay",
    "without",
    "ado",
    "let",
    "start",
    "web",
    "application",
    "demo",
    "okay",
    "web",
    "app",
    "football",
    "players",
    "detection",
    "team",
    "prediction",
    "tactical",
    "map",
    "representation",
    "first",
    "page",
    "use",
    "page",
    "follow",
    "different",
    "steps",
    "order",
    "navigate",
    "app",
    "learn",
    "use",
    "show",
    "quick",
    "demo",
    "first",
    "start",
    "main",
    "settings",
    "need",
    "select",
    "demo",
    "video",
    "two",
    "options",
    "first",
    "one",
    "selected",
    "course",
    "want",
    "use",
    "video",
    "upload",
    "using",
    "button",
    "preview",
    "uploaded",
    "video",
    "let",
    "show",
    "first",
    "demo",
    "video",
    "tactical",
    "camera",
    "recording",
    "game",
    "france",
    "switzerland",
    "next",
    "step",
    "set",
    "team",
    "names",
    "first",
    "team",
    "france",
    "second",
    "team",
    "switzerland",
    "need",
    "move",
    "team",
    "colors",
    "tab",
    "need",
    "set",
    "different",
    "team",
    "colors",
    "used",
    "afterwards",
    "team",
    "predictions",
    "select",
    "frame",
    "slider",
    "need",
    "select",
    "frame",
    "every",
    "player",
    "detected",
    "example",
    "first",
    "frame",
    "see",
    "goalkeeper",
    "switzerland",
    "national",
    "team",
    "detected",
    "need",
    "choose",
    "another",
    "frame",
    "example",
    "second",
    "frame",
    "see",
    "goalkeepers",
    "two",
    "teams",
    "detected",
    "work",
    "frame",
    "need",
    "select",
    "different",
    "colors",
    "teams",
    "team",
    "two",
    "colors",
    "one",
    "players",
    "one",
    "goalkeeper",
    "select",
    "colors",
    "simply",
    "need",
    "click",
    "color",
    "need",
    "select",
    "click",
    "detection",
    "images",
    "example",
    "france",
    "uh",
    "players",
    "color",
    "simply",
    "click",
    "example",
    "uh",
    "pixel",
    "picket",
    "color",
    "shown",
    "box",
    "let",
    "select",
    "color",
    "france",
    "goalkeeper",
    "repeat",
    "process",
    "pick",
    "color",
    "shown",
    "thing",
    "switzerland",
    "team",
    "first",
    "players",
    "color",
    "finally",
    "goalkeeper",
    "color",
    "course",
    "need",
    "demo",
    "videos",
    "different",
    "colors",
    "predefined",
    "want",
    "upload",
    "video",
    "need",
    "perform",
    "step",
    "order",
    "get",
    "uh",
    "correct",
    "accurate",
    "tee",
    "prediction",
    "uh",
    "different",
    "colors",
    "set",
    "move",
    "last",
    "tab",
    "model",
    "hyperparameters",
    "detection",
    "okay",
    "different",
    "parameters",
    "discussed",
    "later",
    "uh",
    "annotation",
    "options",
    "detection",
    "options",
    "want",
    "show",
    "key",
    "points",
    "detection",
    "players",
    "detection",
    "color",
    "pallets",
    "ball",
    "tracks",
    "toggle",
    "um",
    "options",
    "save",
    "output",
    "video",
    "check",
    "uh",
    "box",
    "course",
    "enter",
    "file",
    "name",
    "optional",
    "want",
    "enter",
    "file",
    "name",
    "one",
    "generated",
    "find",
    "course",
    "output",
    "video",
    "output",
    "uh",
    "folder",
    "let",
    "start",
    "player",
    "detection",
    "option",
    "right",
    "see",
    "different",
    "players",
    "detected",
    "team",
    "prediction",
    "france",
    "switzerland",
    "player",
    "color",
    "palette",
    "detected",
    "used",
    "team",
    "prediction",
    "course",
    "tactical",
    "map",
    "ball",
    "track",
    "representation",
    "fps",
    "low",
    "around",
    "four",
    "average",
    "run",
    "code",
    "jupiter",
    "notebook",
    "get",
    "to8",
    "fps",
    "course",
    "uh",
    "many",
    "optimization",
    "steps",
    "taken",
    "order",
    "improve",
    "fps",
    "right",
    "let",
    "stop",
    "detection",
    "add",
    "uh",
    "show",
    "key",
    "point",
    "detection",
    "option",
    "let",
    "start",
    "show",
    "different",
    "field",
    "key",
    "points",
    "detected",
    "key",
    "points",
    "used",
    "build",
    "tactical",
    "map",
    "representation",
    "see",
    "efficient",
    "accurate",
    "key",
    "point",
    "detection",
    "right",
    "let",
    "move",
    "second",
    "demo",
    "video",
    "simply",
    "need",
    "select",
    "demo",
    "two",
    "op",
    "option",
    "main",
    "settings",
    "everything",
    "else",
    "changed",
    "accordingly",
    "team",
    "names",
    "team",
    "colors",
    "need",
    "uh",
    "click",
    "start",
    "detection",
    "right",
    "two",
    "teams",
    "quite",
    "similar",
    "colors",
    "team",
    "prediction",
    "accurate",
    "discuss",
    "later",
    "done",
    "improve",
    "noticed",
    "well",
    "beginning",
    "tactical",
    "map",
    "representation",
    "accurate",
    "got",
    "corrected",
    "camera",
    "started",
    "moving",
    "another",
    "functionality",
    "implemented",
    "correct",
    "different",
    "uh",
    "representation",
    "based",
    "camera",
    "movement",
    "okay",
    "demo",
    "let",
    "stop",
    "detection",
    "let",
    "discuss",
    "different",
    "functionalities",
    "implemented",
    "okay",
    "flowchart",
    "football",
    "analysis",
    "web",
    "application",
    "start",
    "input",
    "video",
    "course",
    "passed",
    "two",
    "object",
    "detect",
    "ction",
    "models",
    "see",
    "first",
    "functionality",
    "web",
    "app",
    "crucial",
    "one",
    "detection",
    "different",
    "objects",
    "interest",
    "input",
    "video",
    "trained",
    "two",
    "models",
    "one",
    "player",
    "referee",
    "ball",
    "detection",
    "one",
    "field",
    "key",
    "points",
    "models",
    "trained",
    "yolo",
    "v8",
    "models",
    "trained",
    "custom",
    "data",
    "set",
    "labeled",
    "manually",
    "data",
    "set",
    "contains",
    "500",
    "images",
    "said",
    "earlier",
    "used",
    "tactical",
    "map",
    "recordings",
    "football",
    "games",
    "order",
    "create",
    "uh",
    "data",
    "sets",
    "used",
    "free",
    "annotation",
    "tools",
    "label",
    "cat",
    "annotation",
    "data",
    "sets",
    "wo",
    "go",
    "details",
    "install",
    "use",
    "tools",
    "find",
    "different",
    "guides",
    "internet",
    "uh",
    "respective",
    "github",
    "repositories",
    "find",
    "links",
    "description",
    "data",
    "sets",
    "train",
    "uh",
    "yolo",
    "models",
    "used",
    "hyperparameter",
    "tune",
    "technique",
    "implemented",
    "yolo",
    "v8",
    "achieve",
    "great",
    "results",
    "even",
    "small",
    "custom",
    "data",
    "sets",
    "created",
    "see",
    "confusion",
    "matrices",
    "shows",
    "achieved",
    "relatively",
    "great",
    "results",
    "different",
    "classes",
    "uh",
    "models",
    "except",
    "ball",
    "class",
    "predicted",
    "25",
    "balls",
    "present",
    "validation",
    "set",
    "low",
    "recall",
    "ball",
    "class",
    "expected",
    "course",
    "ball",
    "class",
    "underrepresented",
    "data",
    "set",
    "also",
    "true",
    "field",
    "key",
    "points",
    "seen",
    "class",
    "imbalance",
    "affects",
    "especially",
    "recall",
    "classes",
    "meaning",
    "object",
    "wo",
    "detected",
    "much",
    "want",
    "issue",
    "addressed",
    "using",
    "larger",
    "data",
    "sets",
    "data",
    "augmentation",
    "techniques",
    "time",
    "satisfied",
    "current",
    "models",
    "results",
    "want",
    "train",
    "accurate",
    "yolo",
    "v8",
    "model",
    "recommended",
    "use",
    "least",
    "1",
    "images",
    "per",
    "class",
    "find",
    "different",
    "tips",
    "create",
    "good",
    "custom",
    "data",
    "set",
    "ulo",
    "v8",
    "documentation",
    "page",
    "also",
    "find",
    "link",
    "description",
    "right",
    "models",
    "need",
    "pretty",
    "much",
    "represents",
    "machine",
    "learning",
    "present",
    "application",
    "remaining",
    "functionalities",
    "simple",
    "computer",
    "vision",
    "algorithms",
    "uses",
    "results",
    "obtained",
    "detection",
    "models",
    "results",
    "players",
    "detection",
    "model",
    "used",
    "first",
    "extract",
    "color",
    "pet",
    "detected",
    "player",
    "extracted",
    "color",
    "palette",
    "used",
    "later",
    "predict",
    "team",
    "detected",
    "player",
    "result",
    "keypoint",
    "detection",
    "model",
    "used",
    "calculate",
    "homography",
    "matrix",
    "matrix",
    "maps",
    "key",
    "points",
    "position",
    "tactical",
    "map",
    "position",
    "detected",
    "key",
    "points",
    "video",
    "homography",
    "matrix",
    "map",
    "point",
    "frame",
    "point",
    "tactical",
    "map",
    "map",
    "indeed",
    "next",
    "functionality",
    "calculating",
    "player",
    "position",
    "tactical",
    "map",
    "bounding",
    "boxes",
    "detected",
    "player",
    "get",
    "coordinate",
    "player",
    "frame",
    "using",
    "homography",
    "matrix",
    "map",
    "coordinate",
    "tactical",
    "map",
    "basically",
    "get",
    "representation",
    "team",
    "predictions",
    "detected",
    "players",
    "add",
    "well",
    "ball",
    "tracks",
    "representation",
    "tactical",
    "map",
    "order",
    "generate",
    "output",
    "video",
    "right",
    "let",
    "discuss",
    "little",
    "bit",
    "algorithm",
    "used",
    "team",
    "prediction",
    "well",
    "homography",
    "transformation",
    "team",
    "prediction",
    "algorithm",
    "first",
    "thinking",
    "using",
    "clustering",
    "algorithm",
    "clustering",
    "model",
    "two",
    "clusters",
    "let",
    "say",
    "example",
    "team",
    "team",
    "b",
    "way",
    "thought",
    "could",
    "distinguish",
    "uh",
    "teams",
    "tried",
    "idea",
    "example",
    "frame",
    "need",
    "extract",
    "players",
    "bounding",
    "boxes",
    "wanted",
    "use",
    "extracted",
    "images",
    "players",
    "train",
    "train",
    "clustering",
    "algorithms",
    "tried",
    "k",
    "means",
    "db",
    "scan",
    "well",
    "obviously",
    "need",
    "train",
    "model",
    "every",
    "single",
    "frame",
    "since",
    "tracking",
    "players",
    "exactly",
    "ca",
    "using",
    "images",
    "whole",
    "training",
    "process",
    "clustering",
    "algorithm",
    "make",
    "app",
    "slow",
    "tried",
    "multiple",
    "feature",
    "extraction",
    "methods",
    "using",
    "cnn",
    "averaging",
    "colors",
    "present",
    "image",
    "extracting",
    "dominant",
    "colors",
    "palette",
    "extracted",
    "features",
    "tried",
    "use",
    "uh",
    "training",
    "clustering",
    "model",
    "however",
    "matter",
    "feature",
    "extraction",
    "method",
    "use",
    "obtained",
    "poor",
    "results",
    "regarding",
    "instantaneous",
    "team",
    "prediction",
    "illustrate",
    "main",
    "issues",
    "regarding",
    "approach",
    "let",
    "check",
    "example",
    "random",
    "frame",
    "successfully",
    "detected",
    "different",
    "players",
    "calculated",
    "average",
    "color",
    "player",
    "image",
    "position",
    "player",
    "rgb",
    "space",
    "see",
    "clearly",
    "player",
    "far",
    "away",
    "others",
    "detected",
    "goalkeeper",
    "frame",
    "wearing",
    "reddish",
    "colored",
    "kit",
    "using",
    "dp",
    "scan",
    "expected",
    "fail",
    "case",
    "even",
    "remove",
    "goalkeepers",
    "equation",
    "still",
    "see",
    "clear",
    "separation",
    "teams",
    "understandable",
    "since",
    "teams",
    "wearing",
    "shade",
    "blue",
    "figured",
    "let",
    "use",
    "rather",
    "straightforward",
    "solution",
    "without",
    "machine",
    "learning",
    "model",
    "defining",
    "start",
    "colors",
    "team",
    "time",
    "detect",
    "player",
    "extract",
    "pette",
    "dominant",
    "colors",
    "calculate",
    "distance",
    "colors",
    "predefined",
    "team",
    "colors",
    "assign",
    "player",
    "team",
    "accurately",
    "since",
    "green",
    "grasp",
    "present",
    "almost",
    "every",
    "image",
    "detected",
    "players",
    "expect",
    "green",
    "color",
    "always",
    "present",
    "color",
    "palette",
    "extract",
    "useful",
    "team",
    "prediction",
    "decided",
    "use",
    "smaller",
    "centered",
    "rectangle",
    "extract",
    "color",
    "palette",
    "shown",
    "indeed",
    "improved",
    "dramatically",
    "accuracy",
    "team",
    "prediction",
    "algorithm",
    "one",
    "last",
    "thing",
    "need",
    "note",
    "move",
    "next",
    "functionality",
    "algorithm",
    "distances",
    "extracted",
    "color",
    "palette",
    "predefined",
    "colors",
    "calculated",
    "lab",
    "space",
    "rgb",
    "space",
    "reported",
    "distances",
    "space",
    "meaningful",
    "much",
    "closer",
    "perception",
    "human",
    "eye",
    "want",
    "okay",
    "let",
    "move",
    "next",
    "functionality",
    "transforming",
    "coordinates",
    "detected",
    "players",
    "frame",
    "plane",
    "tactical",
    "map",
    "plane",
    "said",
    "achieve",
    "transformation",
    "using",
    "something",
    "called",
    "homography",
    "matrix",
    "commonly",
    "used",
    "matrix",
    "shift",
    "perspective",
    "illustrated",
    "image",
    "use",
    "look",
    "scene",
    "different",
    "point",
    "views",
    "transformation",
    "one",
    "pov",
    "obtained",
    "homography",
    "matrix",
    "exactly",
    "transformation",
    "need",
    "use",
    "application",
    "achieve",
    "need",
    "map",
    "least",
    "four",
    "points",
    "first",
    "point",
    "view",
    "second",
    "point",
    "view",
    "case",
    "tactical",
    "map",
    "defined",
    "certain",
    "number",
    "key",
    "points",
    "save",
    "coordinates",
    "detect",
    "least",
    "four",
    "key",
    "points",
    "given",
    "frame",
    "calculate",
    "homography",
    "matrix",
    "see",
    "example",
    "one",
    "thing",
    "noticed",
    "exa",
    "l",
    "four",
    "key",
    "points",
    "100",
    "accuracy",
    "pov",
    "shift",
    "using",
    "homography",
    "matrix",
    "homography",
    "transformation",
    "especially",
    "proximity",
    "four",
    "points",
    "however",
    "increase",
    "number",
    "key",
    "points",
    "accuracy",
    "decrease",
    "due",
    "slight",
    "warp",
    "camera",
    "recording",
    "case",
    "points",
    "3d",
    "planner",
    "found",
    "mentioned",
    "stack",
    "overflow",
    "post",
    "trials",
    "figured",
    "error",
    "homography",
    "transformation",
    "big",
    "work",
    "main",
    "issue",
    "shaky",
    "jumpy",
    "behavior",
    "coordinates",
    "tactical",
    "map",
    "due",
    "basically",
    "fact",
    "calculating",
    "homography",
    "uh",
    "matrix",
    "every",
    "single",
    "frame",
    "detect",
    "four",
    "key",
    "points",
    "introduced",
    "homography",
    "matrix",
    "update",
    "condition",
    "used",
    "determine",
    "every",
    "single",
    "frame",
    "whether",
    "update",
    "homography",
    "matrix",
    "use",
    "last",
    "one",
    "would",
    "obviously",
    "reduce",
    "computational",
    "cost",
    "improve",
    "little",
    "bit",
    "frame",
    "rate",
    "also",
    "make",
    "tactical",
    "map",
    "representation",
    "much",
    "smoother",
    "condition",
    "set",
    "rather",
    "simple",
    "one",
    "frame",
    "detect",
    "certain",
    "number",
    "key",
    "points",
    "detected",
    "previous",
    "frame",
    "calculate",
    "common",
    "key",
    "points",
    "moved",
    "average",
    "beyond",
    "certain",
    "threshold",
    "case",
    "need",
    "update",
    "homography",
    "matrix",
    "keep",
    "using",
    "last",
    "calculated",
    "one",
    "number",
    "common",
    "key",
    "points",
    "well",
    "distance",
    "threshold",
    "hyper",
    "parameters",
    "set",
    "carefully",
    "coordinates",
    "players",
    "ball",
    "tactical",
    "map",
    "easily",
    "track",
    "ball",
    "movement",
    "since",
    "one",
    "ball",
    "present",
    "field",
    "frame",
    "indeed",
    "presents",
    "last",
    "functionality",
    "application",
    "finally",
    "annotated",
    "frame",
    "displayed",
    "seen",
    "demo",
    "beginning",
    "video",
    "average",
    "4",
    "fps",
    "see",
    "run",
    "code",
    "notebook",
    "improve",
    "fps",
    "eight",
    "average",
    "right",
    "let",
    "go",
    "code",
    "different",
    "functionalities",
    "discussed",
    "first",
    "need",
    "get",
    "labels",
    "defined",
    "two",
    "data",
    "sets",
    "see",
    "stored",
    "yaml",
    "configuration",
    "files",
    "used",
    "train",
    "yolo",
    "v8",
    "models",
    "numerical",
    "alphabetical",
    "representation",
    "different",
    "labels",
    "using",
    "identify",
    "objects",
    "detect",
    "need",
    "set",
    "video",
    "paths",
    "well",
    "team",
    "colors",
    "parameters",
    "mentioned",
    "earlier",
    "convert",
    "colors",
    "lab",
    "format",
    "order",
    "calculate",
    "distances",
    "team",
    "prediction",
    "need",
    "import",
    "yolo",
    "models",
    "two",
    "models",
    "player",
    "detection",
    "key",
    "points",
    "uh",
    "detection",
    "set",
    "hyper",
    "parameters",
    "confidence",
    "threshold",
    "models",
    "keyo",
    "displacement",
    "threshold",
    "start",
    "capture",
    "loop",
    "loop",
    "process",
    "frame",
    "first",
    "increment",
    "frame",
    "counter",
    "read",
    "frame",
    "capture",
    "frame",
    "create",
    "new",
    "copy",
    "tactical",
    "map",
    "display",
    "uh",
    "detected",
    "objects",
    "uh",
    "coordinates",
    "set",
    "ball",
    "tracking",
    "history",
    "variable",
    "case",
    "exceeded",
    "certain",
    "number",
    "frames",
    "without",
    "detecting",
    "ball",
    "object",
    "first",
    "part",
    "uh",
    "code",
    "object",
    "detection",
    "coordinate",
    "transformation",
    "get",
    "uh",
    "result",
    "models",
    "detections",
    "see",
    "results",
    "stored",
    "bounding",
    "boxes",
    "models",
    "well",
    "labels",
    "extract",
    "alphabetical",
    "representation",
    "detected",
    "labels",
    "need",
    "get",
    "detected",
    "key",
    "points",
    "field",
    "key",
    "points",
    "uh",
    "coordinates",
    "tactical",
    "map",
    "predefined",
    "coordinates",
    "coordinates",
    "current",
    "frame",
    "using",
    "coordinates",
    "course",
    "calculate",
    "homography",
    "matrix",
    "detected",
    "three",
    "labels",
    "meaning",
    "four",
    "key",
    "points",
    "check",
    "update",
    "condition",
    "frame",
    "number",
    "bigger",
    "one",
    "meaning",
    "first",
    "frame",
    "course",
    "need",
    "calculate",
    "homography",
    "without",
    "checking",
    "condition",
    "previously",
    "calculated",
    "homography",
    "matrix",
    "frame",
    "number",
    "bigger",
    "one",
    "need",
    "first",
    "check",
    "many",
    "common",
    "key",
    "points",
    "detected",
    "three",
    "common",
    "key",
    "points",
    "detected",
    "need",
    "calculate",
    "error",
    "position",
    "uh",
    "detected",
    "key",
    "points",
    "frame",
    "previous",
    "uh",
    "frame",
    "used",
    "mean",
    "squared",
    "error",
    "error",
    "exceeds",
    "certain",
    "predefined",
    "tolerance",
    "need",
    "update",
    "homography",
    "matrix",
    "homography",
    "matrix",
    "calculated",
    "using",
    "function",
    "find",
    "homography",
    "open",
    "cv",
    "forget",
    "mention",
    "methods",
    "calculate",
    "homography",
    "matrix",
    "perform",
    "respective",
    "shift",
    "uh",
    "ones",
    "involves",
    "deep",
    "learning",
    "machine",
    "learning",
    "wanted",
    "keep",
    "things",
    "simple",
    "application",
    "using",
    "uh",
    "function",
    "open",
    "cv",
    "obtain",
    "relatively",
    "good",
    "results",
    "homography",
    "matrix",
    "uh",
    "transform",
    "coordinates",
    "detected",
    "players",
    "frame",
    "tactical",
    "map",
    "achieve",
    "using",
    "simple",
    "matrix",
    "multiplication",
    "shown",
    "need",
    "transform",
    "ball",
    "coordinates",
    "well",
    "final",
    "step",
    "update",
    "ball",
    "tracking",
    "history",
    "uh",
    "save",
    "uh",
    "position",
    "ball",
    "tactical",
    "map",
    "frame",
    "display",
    "tracks",
    "tactical",
    "map",
    "since",
    "tracks",
    "input",
    "video",
    "relevant",
    "since",
    "camera",
    "moving",
    "tracks",
    "wo",
    "uh",
    "reliable",
    "set",
    "conditions",
    "track",
    "history",
    "instance",
    "first",
    "condition",
    "would",
    "create",
    "new",
    "track",
    "ball",
    "moved",
    "dramatically",
    "previous",
    "position",
    "condition",
    "would",
    "prevent",
    "ball",
    "tracking",
    "history",
    "surpassing",
    "max",
    "length",
    "defined",
    "earlier",
    "second",
    "part",
    "algorithm",
    "players",
    "team",
    "prediction",
    "first",
    "need",
    "convert",
    "frame",
    "bgr",
    "rgb",
    "since",
    "using",
    "open",
    "cv",
    "uses",
    "uh",
    "default",
    "bgr",
    "setting",
    "loop",
    "extract",
    "color",
    "palette",
    "detected",
    "player",
    "first",
    "part",
    "extract",
    "centered",
    "much",
    "smaller",
    "rectangle",
    "instead",
    "whole",
    "bounding",
    "box",
    "player",
    "cented",
    "filter",
    "would",
    "used",
    "extract",
    "color",
    "palette",
    "color",
    "palette",
    "extraction",
    "performed",
    "using",
    "function",
    "pillow",
    "library",
    "color",
    "palette",
    "extracted",
    "need",
    "get",
    "top",
    "dominant",
    "colors",
    "calculate",
    "redundance",
    "color",
    "sort",
    "values",
    "get",
    "example",
    "top",
    "three",
    "dominant",
    "colors",
    "defined",
    "pallette",
    "interval",
    "variable",
    "0",
    "5",
    "right",
    "color",
    "palette",
    "append",
    "list",
    "use",
    "list",
    "extracted",
    "color",
    "palettes",
    "predict",
    "team",
    "player",
    "said",
    "using",
    "distance",
    "lab",
    "uh",
    "color",
    "space",
    "first",
    "need",
    "convert",
    "detected",
    "color",
    "pallet",
    "rgb",
    "lab",
    "calculate",
    "distance",
    "using",
    "method",
    "sk",
    "image",
    "calculat",
    "ukian",
    "distance",
    "lab",
    "color",
    "space",
    "loop",
    "color",
    "color",
    "palette",
    "calculate",
    "distance",
    "four",
    "predefined",
    "colors",
    "assign",
    "color",
    "corresponding",
    "team",
    "closer",
    "color",
    "instance",
    "palette",
    "five",
    "colors",
    "color",
    "assigned",
    "team",
    "using",
    "simple",
    "voting",
    "mechanism",
    "get",
    "team",
    "prediction",
    "player",
    "uh",
    "performed",
    "loop",
    "loop",
    "different",
    "player",
    "distances",
    "uh",
    "predict",
    "players",
    "team",
    "vote",
    "counting",
    "perform",
    "team",
    "players",
    "prediction",
    "moving",
    "last",
    "part",
    "annotate",
    "current",
    "frame",
    "tactical",
    "map",
    "first",
    "loop",
    "detected",
    "objects",
    "player",
    "detection",
    "model",
    "display",
    "color",
    "palette",
    "next",
    "detected",
    "object",
    "bounding",
    "box",
    "annotate",
    "tactical",
    "map",
    "player",
    "position",
    "team",
    "corresponding",
    "color",
    "add",
    "annotation",
    "course",
    "referee",
    "bounding",
    "box",
    "well",
    "ball",
    "bounding",
    "box",
    "add",
    "ball",
    "tracking",
    "line",
    "tactical",
    "map",
    "final",
    "step",
    "combine",
    "annotation",
    "one",
    "single",
    "uh",
    "output",
    "frame",
    "display",
    "output",
    "frame",
    "move",
    "next",
    "iteration",
    "right",
    "let",
    "run",
    "code",
    "show",
    "expected",
    "result",
    "right",
    "see",
    "higher",
    "frame",
    "rate",
    "see",
    "different",
    "annotation",
    "uh",
    "discussed",
    "click",
    "p",
    "pose",
    "uh",
    "detection",
    "q",
    "quit",
    "detection",
    "right",
    "application",
    "said",
    "find",
    "code",
    "project",
    "github",
    "repository",
    "uh",
    "link",
    "description",
    "video",
    "see",
    "next",
    "time"
  ],
  "keywords": [
    "video",
    "show",
    "use",
    "learning",
    "football",
    "recordings",
    "main",
    "extract",
    "games",
    "track",
    "object",
    "players",
    "ball",
    "coordinates",
    "frame",
    "accuracy",
    "would",
    "calculate",
    "many",
    "distances",
    "average",
    "need",
    "order",
    "achieve",
    "application",
    "first",
    "step",
    "functionality",
    "detect",
    "tactical",
    "map",
    "representation",
    "field",
    "okay",
    "let",
    "start",
    "demo",
    "web",
    "different",
    "simple",
    "code",
    "course",
    "find",
    "description",
    "one",
    "last",
    "thing",
    "add",
    "uh",
    "detection",
    "models",
    "want",
    "accurate",
    "camera",
    "move",
    "much",
    "without",
    "app",
    "team",
    "prediction",
    "select",
    "two",
    "options",
    "using",
    "france",
    "switzerland",
    "next",
    "set",
    "second",
    "colors",
    "used",
    "every",
    "player",
    "detected",
    "example",
    "see",
    "goalkeeper",
    "teams",
    "click",
    "color",
    "images",
    "shown",
    "box",
    "predefined",
    "get",
    "model",
    "parameters",
    "annotation",
    "key",
    "points",
    "tracks",
    "output",
    "check",
    "right",
    "palette",
    "fps",
    "four",
    "improve",
    "point",
    "well",
    "objects",
    "yolo",
    "v8",
    "data",
    "said",
    "create",
    "sets",
    "train",
    "results",
    "class",
    "present",
    "extracted",
    "homography",
    "matrix",
    "position",
    "bounding",
    "algorithm",
    "transformation",
    "clustering",
    "tried",
    "single",
    "since",
    "tracking",
    "image",
    "dominant",
    "calculated",
    "rgb",
    "space",
    "case",
    "distance",
    "lab",
    "defined",
    "certain",
    "number",
    "error",
    "update",
    "condition",
    "common",
    "threshold",
    "labels",
    "loop",
    "display",
    "history",
    "part"
  ]
}