{
  "text": "hey my name is Felipe and welcome to my \nchannel in this video we are going to make  \nan image classifier. Image classification involves \nclassifying an image into different categories and  \nis one of the most important fields in computer \nvision I'm going to show you how to make an image  \nclassifier which is very simple, very robust and \nit works 100% in Python, I'm going to walk you step  \nby step through the entire process how to prepare \nthe data how to train the classifier and how to  \ntest its performance so following the steps of \nthis tutorial you will be able to build a very  \nrobust image classifier in only a few minutes \nso let's get started so this is the process in  \nwhich we are going to be working today in today's \ntutorial you can see that this is a four steps  \nprocess so training this image classifier will \ntake only four steps this will be a very easy  \nand a very straightforward process now let me \nshow you the requirements we are going to use  \nin this project we are going to use scikit learn, \nscikit image and numpy and the image classifier  \nwe're going to use comes from the library scikit \nlearn this is the library which is very popular to  \nsolve machine learning related problems and \nif you want to work with computer vision or with  \nmachine learning you will definitely need to be \nfamiliar with scikit learn so this will be a very  \ngood example this will be a very good opportunity \nin order to get more familiar with scikit learn  \nnow let's start with this project let's start with \nthis tutorial and the first step is preparing the  \ndata we are going to use in order to train this \nimage classifier and now let me show you the data  \nwe are going to use in today's tutorial this \nis the data we are going to use you can see we  \nhave two different categories the categories are \nempty or not empty this sounds very strange but  \nlet me show you exactly how these two categories \nlook like or how the data in each one of these  \ncategories look like and you can see from the not \nempty category we have something that looks like  \nthis so basically we have cars these are images \nfrom cars and if I show you... if I show you many  \nmany different pictures you can see that in all \nof them we can see pretty much the same situation  \nit's like a car that's basically the not \nempty category and then if I show you the empty  \ncategory this is pretty much an empty something \nthis is pretty much all the images containing  \nempty...ness containing a completely empty... these are \ncompletely empty images in some of them there are  \nvery small objects but you can see that all of the \nimages are mostly empty and these are... this is  \nhow these two categories look like this \nis how these two categories look like and this  \ndata comes from one of my previous videos where \nI showed you how to create a parking slot detector  \nand counter using python and computer vision in \nthis other video I showed you how to take a video  \nexactly like this... a video from a huge parking \nlot like this and to make it look like this let  \nme execute the code I showed you how to build in \nthis tutorial and the idea was to go from here  \nto here the idea was to build something like this \nwhere we detect absolutely all the parking slots  \nand for each one of the parking slots we classify \nif the parking slot is empty or not and if it's  \nempty we plot it in green and if it's not empty we \nplot it in red so this is exactly where the data  \ncomes from the data we are going to use in today's \ntutorial you can see that for the not empty category  \nthis is how the data looks like these are \nimages from parking slots containing cars and from  \nthe empty category we have images from parking \nslots which are completely and absolutely empty  \nso this is the data we are going to use today \nand the image classifier I'm going to show you  \nhow to build in today's tutorial it's a very \nrobust classifier in situations like this in  \nsituations where the data we have in situations \nwhere the classification we want to make on our  \ndata it's very easy it's very simple right where \nthe different categories we want to tell apart the  \ndifferent categories we want to classify they are \nvisually super super super distinct they are super  \ndifferent right in this case we have images from \ncars and in this other category we have absolutely  \nempty images right, the image classifier I'm \ngoing to show you today it's very robust and it  \nworks super super well in situations like this \nand the reason I'm saying this is because this  \nmay not be a state-of-the-art image classifier \nif you look for papers or if you look for the  \nmost recent techniques obviously you are not going \nto find the classifier we are going to make today  \nwe're going to build today... and it's \ndefinitely not the most robust classifier in  \nthe machine learning industry but if you want to \nsolve like a very very simple problem like the one  \nwe are going to solve today this image specifier \nwill be more than enough and I'm going to show  \nyou exactly what's the performance we achieve \nwith this classifier but that's later on in this  \ntutorial now let's get started I already showed you \nthe data we are going to use and the first thing  \nI'm going to do is to import os which is a library \nwhich we definitely need in order to work with  \ndata and to read data and to load data from our \ncomputer so I'm going to define a directory  \nwhich is input directory and in this case I'm just \ngoing to hardcode where the input directory is  \nlocated which is here this will be something like \nthis and then I'm going to Define our categories  \nand I'm also going to hard code it and I'm going \nto say something like this our categories are empty  \nand not empty okay and then the only thing I'm \ngoing to do is to Define two lists which are  \nthe lists which are going to contain our data one \nof them will be data and then the other one will  \nbe labels and I'm going to show you exactly how \nwe're going to use these two objects later on  \nthis tutorial and now what we're going to do is \nto iterate in absolutely all the images in these  \ntwo directories and we are going to load these \nimages we are going to read these images and we  \nare going to format these images... this data in \na way that fits well the classifier we're going to  \nuse later today so let's start with it I'm going \nto say something like for category in categories  \nand then for file in something \nlike os listdir input dir\nand then I'm going to define the \nimage path like os path join and then  \ninput directory and category uh sorry this will \nbe os dot path dot join input dir and category  \nokay because we are walking in absolutely all \nthe files for each one of our categories right  \nsomething like this okay image path join input \ndir category and then file and then we have  \ndefined exactly what's the location of our images \nnow the only thing we need to do is to read our  \nimages and to save our images into this list so \nin order to read our images I am going to import  \nfrom scikit mage dot IO Import imread in this \nchannel in all the videos I had made so far we  \nusually used opencv as an image processing library \nand obviously opencv it's by far the most popular  \nand the most comprehensive of all image processing \nlibraries is the one I use the most in my projects  \nbut there are also other libraries which are \nmore convenient in different situations and for  \nexample in this case we are going to use scikit \nimage we're going to use this image processing  \nlibrary in order to read the images from our disk \nfrom our computer so I'm going to call imread  \nfrom image path and this will be image okay \nand now I'm going to resize this image and  \nfor that I am going to import another \nfunction from scikit image which is called  \nfrom scikit image dot transform import \nresize so I'm going to call resize  \nI need to input my image and I need to input \nthe new size... which... the new size I'm going  \nto resize all my images to which is 15 x 15 \nand this will be my image so I'm walking  \nthrough absolutely all the images in these two \ndirectories I'm taking these images I'm reading  \nthese images from my computer and I'm resizing \nthese images from this size to 15 x 15 okay  \nnow let's continue I have resized all of our \nimages and what I need to do now is to append this  \ndata into the list I have created \nin order to contain all my data so data.append and  \nwe're not going to append the image... like the \nimage we have read and we have resized, but we are  \ngoing to append the flatted image we are going \nto take our image and we are going to make it  \ninto an array right because currently our image \nis something like a matrix right it's something  \nlike a matrix of size for example in this \ncase 61 x 26 and three channels it's BGR  \nwe have resized this image now it's 15 x 15 \nand three channels now we want to take all  \nof that information and we want to make it into \nonly one very very long array right we want to  \nmake it unidimensional so that's why we are \ncalling flatted and the reason we are doing this  \nis because that's what we need to do in order to \nuse the image classifier we're going to use today  \nwhen we are working with machine learning you \nwill notice different classifiers and different  \nmodels and different libraries and different so on \ndifferent everything require different formats or  \nrequire we format the data differently in order \nto be fed into the machine learning model into  \nthe classifier or into the whatever we are using \nand in this particular case we need to flat the  \ndata we need to make the data into an array \nbefore we input this data into our classifier  \nso that's all for the data and we also need \nto append the category for this data the label  \nand in order to do that I'm going to walk through \nthe categories slightly in a slightly different  \nway I'm going to call this is category \nindex category in enumerate categories  \nand now I will append category index to these \nlabels arrray to this label list and that's  \npretty much all we need to do the only thing I'm \ngoing to do next is to cast each one of these  \nlists into a numpy array so I'm going to say asarray \nand then data okay and I'm going to do the same  \nwith labels np asarray labels I know what you're \nthinking hey Felipe this is not going to work  \nbecause you have not imported numpy and you're \ncompletely right so I am going to import numpy now  \nimport numpy as np okay so that is it that's all we \nneed to do in order to load our data and in order  \nto prepare our data to be fed into the classifier \nor in order to move to the next step that is it we  \nhave completed the first step in our process so \ncongratulations we are one step closer to reach  \nour goal of training our image classifier now in \norder to make sure everything works properly and  \nwe don't have any error I'm going to execute \nthe code as it is now and numpy has no flatted  \num maybe it's flatten I think it's flatten maybe \nI made a mistake so let's see what happens now it  \nseems we don't have any errors so yeah I made a \nmistake now we have to wait a few minutes because  \nremember we are walking through absolutely all \nthe images in these two directories and we have  \namong the two directories we have 6090 images so \nthis is going to take some time but yeah now it's  \ncompleted and now it's time to move to the next \nstep where we are going to split our data into two  \ndifferent sets we are going to create a training \nset and we are also going to create a test set the  \ntraining set is the one we are going to use in \norder to train our image classifier and then the  \ntest set is the one we're going to use to test \nthe performance of the classifier we are going  \nto train so we definitely need to split all of our \ndata into these two sets and this is the function  \nwe are going to use, we need to import another \nfunction from scikit learn and this function will  \nbe something like from scikit learn dot model \nselection if I'm not mistaken import train test  \nsplit yeah so this is how I'm going... we're going \nto use this function I'm just going to write some  \nthings and then I'm going to explain it so this \nwill be something like X train X test y train  \ny test... calling our data X and Y it's a very \npopular convention in machine learning so we are  \ngoing to do it too and this will be our train \ntest split function and we need to input data  \nlabels and then there will be other parameters \nas test size I'm going to set this in 20... in 0.2  \ndon't worry I'm going to explain exactly why \nI'm setting all these parameters in a couple  \nof minutes then another parameter is stratify \nthis will be according to labels and then Shuffle  \nI'm going to call Shuffle here and this will be \ntrue okay so I have called train test split I  \nhave input our data and our labels and then I have \nspecified a few parameters in order to show you  \nexactly what these parameters mean... I'm going to \nstart with test size I told you we were splitting  \nour data into two different sets the training \nset... and the test set now let  \nme show you an image to show you... what \nthis means, to show you exactly how this looks like  \nso this is an image I found online this is an \nimage I found on Google or actually on duckduckgo and  \nbasically you can see that we have an array which \nis called data which contains all of our data and  \nwe're creating two different arrays from it we are \ncreating X train and X test and we are specifying  \nthis size this split size which is 0.2 so what we \nare doing is creating two different sets which are  \ntraining set and test set from the total amount of \nour samples from all of our data we are splitting  \nall of our data into two different sets and the \nway we decide what's the size of the test set is  \nby specifying this parameter So currently we are \ntelling train test split to make this split in  \na way that 20% of all of our samples \nare in the test set right now moving  \nto the next argument Shuffle equal true this is \nsomething that we always want to do when we are  \ncreating data when we are preparing data in order \nto be fed into a machine learning classifier we  \ndefinitely want to shuffle this data first so we \ncan avoid absolutely every bias we had when we  \nwere reading the data when we were creating \nthese data arrays... we definitely want to shuffle  \nthe data first this is a very good practice \nsometimes there are some biases which we are  \nnot aware of sometimes the way we are reading \ndata or the way we are creating these arrays  \nwe we are making some mistakes or we are... I don't \nknow the way this walking is done maybe it's  \nalphabetical order or maybe it's whatever we \nalways want to shuffle the data first that's a  \nvery good practice to avoid any type of bias when \nwe were reading the data and creating these arrays  \nthen stratify equals labels I would say it's always \na good practice when we are splitting our  \ndata into two different sets to Define exactly how \nwe are stratifying this split and in order to  \nshow you exactly what stratify means I'm going to \nshow you this picture which I also found online on  \nduckduckgo and basically you can see that we have a \ndata set in this case is these 12 people and you  \ncan see three of these people are blue three \nof these people are green and then six of these  \npeople are red and in this example we are taking \na a sample of four elements of four people and  \nthe way this sampling is done is by stratifying \nby the different labels so if you look at the  \nsample you can see that two of these samples are \nred one of the samples is green and the other one  \nis blue so we are keeping the same proportion of \nthe different labels in our original data set... \nthat's exactly what we are doing when we are \nstratifying according to the labels it's like a  \nway to make sure that the all the different labels \nare going to be in exactly the same proportion as  \nin the original data set so it's definitely a good \npractice... this is something we always  \nalways want to do now let's continue and you can \nsee that we have completed the second step in our  \nprocess we are one step closer we have only two \nsteps left two steps to go we are one step closer  \nof training our image classifier and that's going \nto be all for splitting our data into a training  \nset and a test set now it's time to train our \nimage classifier now it's time to do like the  \nthe actual training and this is how we are going \nto do it I'm going to import another function  \nwhich is called... if I remember \ncorrectly from sklearn  \nI think it's model selection as well import  \ngridsearchcv then from sklearn dot svm import  \nSVC okay so the first thing I'm going to do is \nto Define an object which is called classifier  \nand this will be something like this this is \nthe classifier we are going to use uh it's SVC  \nlet's see if it's okay is sklearn svm import so I \nthink it's okay for some reason it didn't  \nfound it now I see what's the error SVC should \nbe in capital letters and now everything should  \nbe okay okay so what I'm doing here is creating \na new instance of this object and I'm calling  \nthis object classifier and this is the classifier \nwe are going to use in order to train our image  \nclassifier so what I'm going to do next is to \nDefine another object which is parameters and  \nthis will be something like this I'm just going to \nwrite it and I'm going to explain it in a couple  \nof minutes I'm going to define something like \na list of only one element which is going to  \nbe a dictionary with two keys one of these keys \nwill be gamma and then the other key will be C  \nand that's pretty much all and then I'm going \nto define a list for each one of these uh items  \nand for gamma it will be something like 0.01 \n0.001 and 0.0001 okay and for C I'm going to  \ndo something like 1 10 100 and 1000 okay and \nthen it's when I'm going to call grid search  \nI'm going to define a new object which is called grid \nsearch and this will be grid search cv and I'm going  \nto input these two objects I just created the \nclassifier and the parameters okay and now let  \nme show you exactly what I'm doing I'm creating a \nnew instance of SVC and I'm calling this instance  \nclassifier and this is the classifier we are \ngoing to use and I'm creating this object which  \nis called parameters which is a list containing \nonly a dictionary and this section has only two  \nkeys one of them is gamma and the other one is \nC and each one of these keys has a list of values  \nokay now I'm going to to show you the scikit \nlearn documentation and going to... and going back  \nto scikit learn and I'm going to show you how the \ndocumentation looks like for SVC for the object we  \nare using as our classifier and you may notice \nall the different parameters we have in this  \nclassifier we have C kernel degree gamma cov0 \nshrinking probability and many many many other  \nparameters we have many many many many different \nparameters to choose from but when we were  \ncreating our object we are just calling this empty \nConstructor we are not specifying absolutely any  \nparameter we are just using all the default values \nfor SVC okay and you may notice as well that we  \nare getting this other object and these two keys \nwe are creating are exactly two parameters from our...  \nfrom our object from the \nobject we are going to use as our classifier  \nso what we are going to do is we are not going \nto train only one image classifier we are going  \nto train many many many many different image \nclassifiers and we are going to train an image  \nclassifier for each one... for each combination we \nhave for C and Gamma so we have three values for  \ngamma and we have four values for C this means we \nare going to train 12 image classifiers right the  \nway this process is going to work is that we are \nnot going to train only one image classifier but  \nwe are going to train many many and as many as \ndifferent combinations we have for C and Gamma  \nin this case we have three values for gamma \nfour values for C three times four it's twelve  \nso we are going to train 12 image classifiers \nthat's the process we are going to take in this  \ntutorial and the way it works is that \nwe are going to choose the best of all of these  \ndifferent classifiers we are going to train so... \nand the way we are going to do this training the  \nway we are going to train as many classifiers \nat once is by calling grid search by  \ncalling this other object I have specified over \nhere so this is how we are going to use it   \nI have already defined this grid search and then the \nonly thing we need to do is to call grid search  \ndot fit and I'm going to input X train which \nis my training set and then y train which  \nis which are the labels of our training set and \nthat's pretty much all that's pretty much all in  \norder to train our image classifier that's pretty \nmuch all to train all these 12 image classifiers  \nright let's see what happens when I press play \nnow remember the way this works is that we are  \nloading the data first and this is going to take a \nfew minutes because ithis is a lot a lot of data  \nthese are a lot of images and then we are taking \nthis process now the training also takes some time  \nbecause remember we are training many many many \nmany different classifiers so this is going to  \ntake some time so I'm just going to wait a couple \nof minutes and I'm going to see if something  \nhappens or if the execution is successful okay \nso the execution is now completed we don't have  \nany errors so we can continue and and this was \nthe third step in our four steps process this  \nmeans we are pretty much there the only thing we \nneed to do now is to test the performance of the  \nmodel we trained but we are almost there we have \nalmost completed this process and most importantly  \nwe have already trained our image classifier, our \nimage classifier is now trained the only thing we  \nneed to do now is to test how it performs to see \nif we can use it or not okay and this is how we  \nare going to do I mentioned that we were training \nnot only... not only one image classifier but we are  \ntraining 12 different image classifiers one for \neach one of... one for each combination of C and gamma  \nso we are training many many different classifiers \nand the way we are going to select one of all of  \nthese image classifiers if is by calling a member \nof grid search which is called grid search dot  \nbase_estimator_ so by calling this \nmember is that we are going to get the best of  \nall the different image classifiers that were \ntrained right we are training 12 different  \nimage classifiers and we are just choosing the \nbest one and the way we are choosing for the  \nbest one is by calling this member of grid search \nthat's basically what we are doing so this is our  \nmodel this is our classifier best estimator this \nis our model now let's see how it performs let's  \nsee if it's really like a good classifier let's \nsee what's the performance of this classifier on  \nour... test data on the data we have created \nin order to test the performance of this algorithm  \nso what I'm going to do is to call base estimator \ndot predict and I'm going to input my test data  \nso I'm going to input X test and I'm going to call \nthe output from this prediction y prediction right  \nand then I need to import another function which \nis from sklearn dot metrics import accuracy score  \nand let's see what's our performance \nand I'm going to make a print I'm going  \nto Define another value which is score and \nscore will be accuracy score y prediction  \nand y test right I'm taking this which are the \nlabels of the test set and I'm just comparing  \nagainst our predictions and now I'm going to \nprint something like I'm going to format this  \nsuper super nicely so we get like a... like a very \nclear measure of how well this performs  \nso I'm going to express this as a percentage \nand I will say something like of samples were  \ncorrectly classified something like this and \nthis will be format string score times 100  \nright because score is going to give us a number \nwhich ranges between 0 and 1 and it's going to be a  \nmeasure of our score of how accurate our classifier \nis on the test set now this is a value between 0 and 1 \nand it's very very useful and that contains \nabsolutely all the information but what I'm going  \nto do is just reshaping where I'm going to do \nlike a reformat of this number into a percentage  \nright because it's going to be much much cleaner \nin order to see how it performs and all I have  \nto do now is to execute this code again and \nlet's see what happens let's see what's our  \nperformance so I'm just going to press play and \nI am going to wait a couple of minutes just like  \nbefore and I will come back with our results \nlet's see how it performs the execution is  \nnow completed and this is the accuracy we got \nwith the best estimator from all the different  \nimage classifiers we trained we are getting a \n99.9 percent accuracy this means that this is  \nabsolutely perfect this is a pretty much perfect \nclassifier a 99.9 accuracy is like a super super  \nhigh performance it's like a very good performance \nso we can definitely use this classifier later on  \nwe can definitely use this classifier in order \nto use it in our project so the only thing we  \nneed to do next the only thing we have to do \nnow in order to complete this tutorial is to  \nsave this classifier to save this model because \nwe want to load this model from another project  \nor we want to load this model in a different... \ncode or in a different whatever from a different  \nlocation we definitely want to save the weights \nor we want to save exactly all the information  \nwhich is related to this model so we can use it \nlater in a different project and the way we are  \ngoing to save this model is by using pickle which \nis another python Library so I'm going to import  \npickle and then I'm just going to call pickle dot \ndump and I'm going to specify the model I want to  \nto save the object I want to save and also I need \nto specify the file which is going to be something  \nlike model.p and then I need to open this file \nas wb okay and that's going to be pretty much  \nall in order to save our model in order to have a \nfile with our model so we can use it later on, on  \nour project or from our location or we can use \nthis file in whatever way we want so I'm going  \nto press play and that's going to be pretty much \nall after the training process is completed and  \nafter everything it's done we should have a file \nin exactly the location we have specified which in  \nmy case is here... we should have a file which \nis called model.p so this is it this is going to  \nbe all for this tutorial we have absolutely \ncompleted all these steps in our process we  \nhave completed all four steps in our process and \nwe have trained an image classifier using Python  \nand scikit learn so if you enjoyed this video \nI invite you to click the like button and I also  \ninvite you to write me a message in the comments \nsection below telling me what do you think about  \nthis video telling me what do you think about this \ntutorial and also telling me your ideas or your  \nrecommendations for other videos or other projects \nwe could work next on this channel my name is  \nFelipe I'm a computer vision developer and in this \nchannel I make tutorials coding tutorials exactly  \nlike this one and I also share my experience and \nmy resources the resources I use as a computer  \nvision developer so if these are the type of \nvideos you are into I invite you to subscribe  \nto my channel this is going to be all for today \nand see you on the next video \n",
  "words": [
    "hey",
    "name",
    "felipe",
    "welcome",
    "channel",
    "video",
    "going",
    "make",
    "image",
    "classifier",
    "image",
    "classification",
    "involves",
    "classifying",
    "image",
    "different",
    "categories",
    "one",
    "important",
    "fields",
    "computer",
    "vision",
    "going",
    "show",
    "make",
    "image",
    "classifier",
    "simple",
    "robust",
    "works",
    "100",
    "python",
    "going",
    "walk",
    "step",
    "step",
    "entire",
    "process",
    "prepare",
    "data",
    "train",
    "classifier",
    "test",
    "performance",
    "following",
    "steps",
    "tutorial",
    "able",
    "build",
    "robust",
    "image",
    "classifier",
    "minutes",
    "let",
    "get",
    "started",
    "process",
    "going",
    "working",
    "today",
    "today",
    "tutorial",
    "see",
    "four",
    "steps",
    "process",
    "training",
    "image",
    "classifier",
    "take",
    "four",
    "steps",
    "easy",
    "straightforward",
    "process",
    "let",
    "show",
    "requirements",
    "going",
    "use",
    "project",
    "going",
    "use",
    "scikit",
    "learn",
    "scikit",
    "image",
    "numpy",
    "image",
    "classifier",
    "going",
    "use",
    "comes",
    "library",
    "scikit",
    "learn",
    "library",
    "popular",
    "solve",
    "machine",
    "learning",
    "related",
    "problems",
    "want",
    "work",
    "computer",
    "vision",
    "machine",
    "learning",
    "definitely",
    "need",
    "familiar",
    "scikit",
    "learn",
    "good",
    "example",
    "good",
    "opportunity",
    "order",
    "get",
    "familiar",
    "scikit",
    "learn",
    "let",
    "start",
    "project",
    "let",
    "start",
    "tutorial",
    "first",
    "step",
    "preparing",
    "data",
    "going",
    "use",
    "order",
    "train",
    "image",
    "classifier",
    "let",
    "show",
    "data",
    "going",
    "use",
    "today",
    "tutorial",
    "data",
    "going",
    "use",
    "see",
    "two",
    "different",
    "categories",
    "categories",
    "empty",
    "empty",
    "sounds",
    "strange",
    "let",
    "show",
    "exactly",
    "two",
    "categories",
    "look",
    "like",
    "data",
    "one",
    "categories",
    "look",
    "like",
    "see",
    "empty",
    "category",
    "something",
    "looks",
    "like",
    "basically",
    "cars",
    "images",
    "cars",
    "show",
    "show",
    "many",
    "many",
    "different",
    "pictures",
    "see",
    "see",
    "pretty",
    "much",
    "situation",
    "like",
    "car",
    "basically",
    "empty",
    "category",
    "show",
    "empty",
    "category",
    "pretty",
    "much",
    "empty",
    "something",
    "pretty",
    "much",
    "images",
    "containing",
    "empty",
    "ness",
    "containing",
    "completely",
    "empty",
    "completely",
    "empty",
    "images",
    "small",
    "objects",
    "see",
    "images",
    "mostly",
    "empty",
    "two",
    "categories",
    "look",
    "like",
    "two",
    "categories",
    "look",
    "like",
    "data",
    "comes",
    "one",
    "previous",
    "videos",
    "showed",
    "create",
    "parking",
    "slot",
    "detector",
    "counter",
    "using",
    "python",
    "computer",
    "vision",
    "video",
    "showed",
    "take",
    "video",
    "exactly",
    "like",
    "video",
    "huge",
    "parking",
    "lot",
    "like",
    "make",
    "look",
    "like",
    "let",
    "execute",
    "code",
    "showed",
    "build",
    "tutorial",
    "idea",
    "go",
    "idea",
    "build",
    "something",
    "like",
    "detect",
    "absolutely",
    "parking",
    "slots",
    "one",
    "parking",
    "slots",
    "classify",
    "parking",
    "slot",
    "empty",
    "empty",
    "plot",
    "green",
    "empty",
    "plot",
    "red",
    "exactly",
    "data",
    "comes",
    "data",
    "going",
    "use",
    "today",
    "tutorial",
    "see",
    "empty",
    "category",
    "data",
    "looks",
    "like",
    "images",
    "parking",
    "slots",
    "containing",
    "cars",
    "empty",
    "category",
    "images",
    "parking",
    "slots",
    "completely",
    "absolutely",
    "empty",
    "data",
    "going",
    "use",
    "today",
    "image",
    "classifier",
    "going",
    "show",
    "build",
    "today",
    "tutorial",
    "robust",
    "classifier",
    "situations",
    "like",
    "situations",
    "data",
    "situations",
    "classification",
    "want",
    "make",
    "data",
    "easy",
    "simple",
    "right",
    "different",
    "categories",
    "want",
    "tell",
    "apart",
    "different",
    "categories",
    "want",
    "classify",
    "visually",
    "super",
    "super",
    "super",
    "distinct",
    "super",
    "different",
    "right",
    "case",
    "images",
    "cars",
    "category",
    "absolutely",
    "empty",
    "images",
    "right",
    "image",
    "classifier",
    "going",
    "show",
    "today",
    "robust",
    "works",
    "super",
    "super",
    "well",
    "situations",
    "like",
    "reason",
    "saying",
    "may",
    "image",
    "classifier",
    "look",
    "papers",
    "look",
    "recent",
    "techniques",
    "obviously",
    "going",
    "find",
    "classifier",
    "going",
    "make",
    "today",
    "going",
    "build",
    "today",
    "definitely",
    "robust",
    "classifier",
    "machine",
    "learning",
    "industry",
    "want",
    "solve",
    "like",
    "simple",
    "problem",
    "like",
    "one",
    "going",
    "solve",
    "today",
    "image",
    "specifier",
    "enough",
    "going",
    "show",
    "exactly",
    "performance",
    "achieve",
    "classifier",
    "later",
    "tutorial",
    "let",
    "get",
    "started",
    "already",
    "showed",
    "data",
    "going",
    "use",
    "first",
    "thing",
    "going",
    "import",
    "os",
    "library",
    "definitely",
    "need",
    "order",
    "work",
    "data",
    "read",
    "data",
    "load",
    "data",
    "computer",
    "going",
    "define",
    "directory",
    "input",
    "directory",
    "case",
    "going",
    "hardcode",
    "input",
    "directory",
    "located",
    "something",
    "like",
    "going",
    "define",
    "categories",
    "also",
    "going",
    "hard",
    "code",
    "going",
    "say",
    "something",
    "like",
    "categories",
    "empty",
    "empty",
    "okay",
    "thing",
    "going",
    "define",
    "two",
    "lists",
    "lists",
    "going",
    "contain",
    "data",
    "one",
    "data",
    "one",
    "labels",
    "going",
    "show",
    "exactly",
    "going",
    "use",
    "two",
    "objects",
    "later",
    "tutorial",
    "going",
    "iterate",
    "absolutely",
    "images",
    "two",
    "directories",
    "going",
    "load",
    "images",
    "going",
    "read",
    "images",
    "going",
    "format",
    "images",
    "data",
    "way",
    "fits",
    "well",
    "classifier",
    "going",
    "use",
    "later",
    "today",
    "let",
    "start",
    "going",
    "say",
    "something",
    "like",
    "category",
    "categories",
    "file",
    "something",
    "like",
    "os",
    "listdir",
    "input",
    "dir",
    "going",
    "define",
    "image",
    "path",
    "like",
    "os",
    "path",
    "join",
    "input",
    "directory",
    "category",
    "uh",
    "sorry",
    "os",
    "dot",
    "path",
    "dot",
    "join",
    "input",
    "dir",
    "category",
    "okay",
    "walking",
    "absolutely",
    "files",
    "one",
    "categories",
    "right",
    "something",
    "like",
    "okay",
    "image",
    "path",
    "join",
    "input",
    "dir",
    "category",
    "file",
    "defined",
    "exactly",
    "location",
    "images",
    "thing",
    "need",
    "read",
    "images",
    "save",
    "images",
    "list",
    "order",
    "read",
    "images",
    "going",
    "import",
    "scikit",
    "mage",
    "dot",
    "io",
    "import",
    "imread",
    "channel",
    "videos",
    "made",
    "far",
    "usually",
    "used",
    "opencv",
    "image",
    "processing",
    "library",
    "obviously",
    "opencv",
    "far",
    "popular",
    "comprehensive",
    "image",
    "processing",
    "libraries",
    "one",
    "use",
    "projects",
    "also",
    "libraries",
    "convenient",
    "different",
    "situations",
    "example",
    "case",
    "going",
    "use",
    "scikit",
    "image",
    "going",
    "use",
    "image",
    "processing",
    "library",
    "order",
    "read",
    "images",
    "disk",
    "computer",
    "going",
    "call",
    "imread",
    "image",
    "path",
    "image",
    "okay",
    "going",
    "resize",
    "image",
    "going",
    "import",
    "another",
    "function",
    "scikit",
    "image",
    "called",
    "scikit",
    "image",
    "dot",
    "transform",
    "import",
    "resize",
    "going",
    "call",
    "resize",
    "need",
    "input",
    "image",
    "need",
    "input",
    "new",
    "size",
    "new",
    "size",
    "going",
    "resize",
    "images",
    "15",
    "x",
    "15",
    "image",
    "walking",
    "absolutely",
    "images",
    "two",
    "directories",
    "taking",
    "images",
    "reading",
    "images",
    "computer",
    "resizing",
    "images",
    "size",
    "15",
    "x",
    "15",
    "okay",
    "let",
    "continue",
    "resized",
    "images",
    "need",
    "append",
    "data",
    "list",
    "created",
    "order",
    "contain",
    "data",
    "going",
    "append",
    "image",
    "like",
    "image",
    "read",
    "resized",
    "going",
    "append",
    "flatted",
    "image",
    "going",
    "take",
    "image",
    "going",
    "make",
    "array",
    "right",
    "currently",
    "image",
    "something",
    "like",
    "matrix",
    "right",
    "something",
    "like",
    "matrix",
    "size",
    "example",
    "case",
    "61",
    "x",
    "26",
    "three",
    "channels",
    "bgr",
    "resized",
    "image",
    "15",
    "x",
    "15",
    "three",
    "channels",
    "want",
    "take",
    "information",
    "want",
    "make",
    "one",
    "long",
    "array",
    "right",
    "want",
    "make",
    "unidimensional",
    "calling",
    "flatted",
    "reason",
    "need",
    "order",
    "use",
    "image",
    "classifier",
    "going",
    "use",
    "today",
    "working",
    "machine",
    "learning",
    "notice",
    "different",
    "classifiers",
    "different",
    "models",
    "different",
    "libraries",
    "different",
    "different",
    "everything",
    "require",
    "different",
    "formats",
    "require",
    "format",
    "data",
    "differently",
    "order",
    "fed",
    "machine",
    "learning",
    "model",
    "classifier",
    "whatever",
    "using",
    "particular",
    "case",
    "need",
    "flat",
    "data",
    "need",
    "make",
    "data",
    "array",
    "input",
    "data",
    "classifier",
    "data",
    "also",
    "need",
    "append",
    "category",
    "data",
    "label",
    "order",
    "going",
    "walk",
    "categories",
    "slightly",
    "slightly",
    "different",
    "way",
    "going",
    "call",
    "category",
    "index",
    "category",
    "enumerate",
    "categories",
    "append",
    "category",
    "index",
    "labels",
    "arrray",
    "label",
    "list",
    "pretty",
    "much",
    "need",
    "thing",
    "going",
    "next",
    "cast",
    "one",
    "lists",
    "numpy",
    "array",
    "going",
    "say",
    "asarray",
    "data",
    "okay",
    "going",
    "labels",
    "np",
    "asarray",
    "labels",
    "know",
    "thinking",
    "hey",
    "felipe",
    "going",
    "work",
    "imported",
    "numpy",
    "completely",
    "right",
    "going",
    "import",
    "numpy",
    "import",
    "numpy",
    "np",
    "okay",
    "need",
    "order",
    "load",
    "data",
    "order",
    "prepare",
    "data",
    "fed",
    "classifier",
    "order",
    "move",
    "next",
    "step",
    "completed",
    "first",
    "step",
    "process",
    "congratulations",
    "one",
    "step",
    "closer",
    "reach",
    "goal",
    "training",
    "image",
    "classifier",
    "order",
    "make",
    "sure",
    "everything",
    "works",
    "properly",
    "error",
    "going",
    "execute",
    "code",
    "numpy",
    "flatted",
    "um",
    "maybe",
    "flatten",
    "think",
    "flatten",
    "maybe",
    "made",
    "mistake",
    "let",
    "see",
    "happens",
    "seems",
    "errors",
    "yeah",
    "made",
    "mistake",
    "wait",
    "minutes",
    "remember",
    "walking",
    "absolutely",
    "images",
    "two",
    "directories",
    "among",
    "two",
    "directories",
    "6090",
    "images",
    "going",
    "take",
    "time",
    "yeah",
    "completed",
    "time",
    "move",
    "next",
    "step",
    "going",
    "split",
    "data",
    "two",
    "different",
    "sets",
    "going",
    "create",
    "training",
    "set",
    "also",
    "going",
    "create",
    "test",
    "set",
    "training",
    "set",
    "one",
    "going",
    "use",
    "order",
    "train",
    "image",
    "classifier",
    "test",
    "set",
    "one",
    "going",
    "use",
    "test",
    "performance",
    "classifier",
    "going",
    "train",
    "definitely",
    "need",
    "split",
    "data",
    "two",
    "sets",
    "function",
    "going",
    "use",
    "need",
    "import",
    "another",
    "function",
    "scikit",
    "learn",
    "function",
    "something",
    "like",
    "scikit",
    "learn",
    "dot",
    "model",
    "selection",
    "mistaken",
    "import",
    "train",
    "test",
    "split",
    "yeah",
    "going",
    "going",
    "use",
    "function",
    "going",
    "write",
    "things",
    "going",
    "explain",
    "something",
    "like",
    "x",
    "train",
    "x",
    "test",
    "train",
    "test",
    "calling",
    "data",
    "x",
    "popular",
    "convention",
    "machine",
    "learning",
    "going",
    "train",
    "test",
    "split",
    "function",
    "need",
    "input",
    "data",
    "labels",
    "parameters",
    "test",
    "size",
    "going",
    "set",
    "20",
    "worry",
    "going",
    "explain",
    "exactly",
    "setting",
    "parameters",
    "couple",
    "minutes",
    "another",
    "parameter",
    "stratify",
    "according",
    "labels",
    "shuffle",
    "going",
    "call",
    "shuffle",
    "true",
    "okay",
    "called",
    "train",
    "test",
    "split",
    "input",
    "data",
    "labels",
    "specified",
    "parameters",
    "order",
    "show",
    "exactly",
    "parameters",
    "mean",
    "going",
    "start",
    "test",
    "size",
    "told",
    "splitting",
    "data",
    "two",
    "different",
    "sets",
    "training",
    "set",
    "test",
    "set",
    "let",
    "show",
    "image",
    "show",
    "means",
    "show",
    "exactly",
    "looks",
    "like",
    "image",
    "found",
    "online",
    "image",
    "found",
    "google",
    "actually",
    "duckduckgo",
    "basically",
    "see",
    "array",
    "called",
    "data",
    "contains",
    "data",
    "creating",
    "two",
    "different",
    "arrays",
    "creating",
    "x",
    "train",
    "x",
    "test",
    "specifying",
    "size",
    "split",
    "size",
    "creating",
    "two",
    "different",
    "sets",
    "training",
    "set",
    "test",
    "set",
    "total",
    "amount",
    "samples",
    "data",
    "splitting",
    "data",
    "two",
    "different",
    "sets",
    "way",
    "decide",
    "size",
    "test",
    "set",
    "specifying",
    "parameter",
    "currently",
    "telling",
    "train",
    "test",
    "split",
    "make",
    "split",
    "way",
    "20",
    "samples",
    "test",
    "set",
    "right",
    "moving",
    "next",
    "argument",
    "shuffle",
    "equal",
    "true",
    "something",
    "always",
    "want",
    "creating",
    "data",
    "preparing",
    "data",
    "order",
    "fed",
    "machine",
    "learning",
    "classifier",
    "definitely",
    "want",
    "shuffle",
    "data",
    "first",
    "avoid",
    "absolutely",
    "every",
    "bias",
    "reading",
    "data",
    "creating",
    "data",
    "arrays",
    "definitely",
    "want",
    "shuffle",
    "data",
    "first",
    "good",
    "practice",
    "sometimes",
    "biases",
    "aware",
    "sometimes",
    "way",
    "reading",
    "data",
    "way",
    "creating",
    "arrays",
    "making",
    "mistakes",
    "know",
    "way",
    "walking",
    "done",
    "maybe",
    "alphabetical",
    "order",
    "maybe",
    "whatever",
    "always",
    "want",
    "shuffle",
    "data",
    "first",
    "good",
    "practice",
    "avoid",
    "type",
    "bias",
    "reading",
    "data",
    "creating",
    "arrays",
    "stratify",
    "equals",
    "labels",
    "would",
    "say",
    "always",
    "good",
    "practice",
    "splitting",
    "data",
    "two",
    "different",
    "sets",
    "define",
    "exactly",
    "stratifying",
    "split",
    "order",
    "show",
    "exactly",
    "stratify",
    "means",
    "going",
    "show",
    "picture",
    "also",
    "found",
    "online",
    "duckduckgo",
    "basically",
    "see",
    "data",
    "set",
    "case",
    "12",
    "people",
    "see",
    "three",
    "people",
    "blue",
    "three",
    "people",
    "green",
    "six",
    "people",
    "red",
    "example",
    "taking",
    "sample",
    "four",
    "elements",
    "four",
    "people",
    "way",
    "sampling",
    "done",
    "stratifying",
    "different",
    "labels",
    "look",
    "sample",
    "see",
    "two",
    "samples",
    "red",
    "one",
    "samples",
    "green",
    "one",
    "blue",
    "keeping",
    "proportion",
    "different",
    "labels",
    "original",
    "data",
    "set",
    "exactly",
    "stratifying",
    "according",
    "labels",
    "like",
    "way",
    "make",
    "sure",
    "different",
    "labels",
    "going",
    "exactly",
    "proportion",
    "original",
    "data",
    "set",
    "definitely",
    "good",
    "practice",
    "something",
    "always",
    "always",
    "want",
    "let",
    "continue",
    "see",
    "completed",
    "second",
    "step",
    "process",
    "one",
    "step",
    "closer",
    "two",
    "steps",
    "left",
    "two",
    "steps",
    "go",
    "one",
    "step",
    "closer",
    "training",
    "image",
    "classifier",
    "going",
    "splitting",
    "data",
    "training",
    "set",
    "test",
    "set",
    "time",
    "train",
    "image",
    "classifier",
    "time",
    "like",
    "actual",
    "training",
    "going",
    "going",
    "import",
    "another",
    "function",
    "called",
    "remember",
    "correctly",
    "sklearn",
    "think",
    "model",
    "selection",
    "well",
    "import",
    "gridsearchcv",
    "sklearn",
    "dot",
    "svm",
    "import",
    "svc",
    "okay",
    "first",
    "thing",
    "going",
    "define",
    "object",
    "called",
    "classifier",
    "something",
    "like",
    "classifier",
    "going",
    "use",
    "uh",
    "svc",
    "let",
    "see",
    "okay",
    "sklearn",
    "svm",
    "import",
    "think",
    "okay",
    "reason",
    "found",
    "see",
    "error",
    "svc",
    "capital",
    "letters",
    "everything",
    "okay",
    "okay",
    "creating",
    "new",
    "instance",
    "object",
    "calling",
    "object",
    "classifier",
    "classifier",
    "going",
    "use",
    "order",
    "train",
    "image",
    "classifier",
    "going",
    "next",
    "define",
    "another",
    "object",
    "parameters",
    "something",
    "like",
    "going",
    "write",
    "going",
    "explain",
    "couple",
    "minutes",
    "going",
    "define",
    "something",
    "like",
    "list",
    "one",
    "element",
    "going",
    "dictionary",
    "two",
    "keys",
    "one",
    "keys",
    "gamma",
    "key",
    "c",
    "pretty",
    "much",
    "going",
    "define",
    "list",
    "one",
    "uh",
    "items",
    "gamma",
    "something",
    "like",
    "okay",
    "c",
    "going",
    "something",
    "like",
    "1",
    "10",
    "100",
    "1000",
    "okay",
    "going",
    "call",
    "grid",
    "search",
    "going",
    "define",
    "new",
    "object",
    "called",
    "grid",
    "search",
    "grid",
    "search",
    "cv",
    "going",
    "input",
    "two",
    "objects",
    "created",
    "classifier",
    "parameters",
    "okay",
    "let",
    "show",
    "exactly",
    "creating",
    "new",
    "instance",
    "svc",
    "calling",
    "instance",
    "classifier",
    "classifier",
    "going",
    "use",
    "creating",
    "object",
    "called",
    "parameters",
    "list",
    "containing",
    "dictionary",
    "section",
    "two",
    "keys",
    "one",
    "gamma",
    "one",
    "c",
    "one",
    "keys",
    "list",
    "values",
    "okay",
    "going",
    "show",
    "scikit",
    "learn",
    "documentation",
    "going",
    "going",
    "back",
    "scikit",
    "learn",
    "going",
    "show",
    "documentation",
    "looks",
    "like",
    "svc",
    "object",
    "using",
    "classifier",
    "may",
    "notice",
    "different",
    "parameters",
    "classifier",
    "c",
    "kernel",
    "degree",
    "gamma",
    "cov0",
    "shrinking",
    "probability",
    "many",
    "many",
    "many",
    "parameters",
    "many",
    "many",
    "many",
    "many",
    "different",
    "parameters",
    "choose",
    "creating",
    "object",
    "calling",
    "empty",
    "constructor",
    "specifying",
    "absolutely",
    "parameter",
    "using",
    "default",
    "values",
    "svc",
    "okay",
    "may",
    "notice",
    "well",
    "getting",
    "object",
    "two",
    "keys",
    "creating",
    "exactly",
    "two",
    "parameters",
    "object",
    "object",
    "going",
    "use",
    "classifier",
    "going",
    "going",
    "train",
    "one",
    "image",
    "classifier",
    "going",
    "train",
    "many",
    "many",
    "many",
    "many",
    "different",
    "image",
    "classifiers",
    "going",
    "train",
    "image",
    "classifier",
    "one",
    "combination",
    "c",
    "gamma",
    "three",
    "values",
    "gamma",
    "four",
    "values",
    "c",
    "means",
    "going",
    "train",
    "12",
    "image",
    "classifiers",
    "right",
    "way",
    "process",
    "going",
    "work",
    "going",
    "train",
    "one",
    "image",
    "classifier",
    "going",
    "train",
    "many",
    "many",
    "many",
    "different",
    "combinations",
    "c",
    "gamma",
    "case",
    "three",
    "values",
    "gamma",
    "four",
    "values",
    "c",
    "three",
    "times",
    "four",
    "twelve",
    "going",
    "train",
    "12",
    "image",
    "classifiers",
    "process",
    "going",
    "take",
    "tutorial",
    "way",
    "works",
    "going",
    "choose",
    "best",
    "different",
    "classifiers",
    "going",
    "train",
    "way",
    "going",
    "training",
    "way",
    "going",
    "train",
    "many",
    "classifiers",
    "calling",
    "grid",
    "search",
    "calling",
    "object",
    "specified",
    "going",
    "use",
    "already",
    "defined",
    "grid",
    "search",
    "thing",
    "need",
    "call",
    "grid",
    "search",
    "dot",
    "fit",
    "going",
    "input",
    "x",
    "train",
    "training",
    "set",
    "train",
    "labels",
    "training",
    "set",
    "pretty",
    "much",
    "pretty",
    "much",
    "order",
    "train",
    "image",
    "classifier",
    "pretty",
    "much",
    "train",
    "12",
    "image",
    "classifiers",
    "right",
    "let",
    "see",
    "happens",
    "press",
    "play",
    "remember",
    "way",
    "works",
    "loading",
    "data",
    "first",
    "going",
    "take",
    "minutes",
    "ithis",
    "lot",
    "lot",
    "data",
    "lot",
    "images",
    "taking",
    "process",
    "training",
    "also",
    "takes",
    "time",
    "remember",
    "training",
    "many",
    "many",
    "many",
    "many",
    "different",
    "classifiers",
    "going",
    "take",
    "time",
    "going",
    "wait",
    "couple",
    "minutes",
    "going",
    "see",
    "something",
    "happens",
    "execution",
    "successful",
    "okay",
    "execution",
    "completed",
    "errors",
    "continue",
    "third",
    "step",
    "four",
    "steps",
    "process",
    "means",
    "pretty",
    "much",
    "thing",
    "need",
    "test",
    "performance",
    "model",
    "trained",
    "almost",
    "almost",
    "completed",
    "process",
    "importantly",
    "already",
    "trained",
    "image",
    "classifier",
    "image",
    "classifier",
    "trained",
    "thing",
    "need",
    "test",
    "performs",
    "see",
    "use",
    "okay",
    "going",
    "mentioned",
    "training",
    "one",
    "image",
    "classifier",
    "training",
    "12",
    "different",
    "image",
    "classifiers",
    "one",
    "one",
    "one",
    "combination",
    "c",
    "gamma",
    "training",
    "many",
    "many",
    "different",
    "classifiers",
    "way",
    "going",
    "select",
    "one",
    "image",
    "classifiers",
    "calling",
    "member",
    "grid",
    "search",
    "called",
    "grid",
    "search",
    "dot",
    "calling",
    "member",
    "going",
    "get",
    "best",
    "different",
    "image",
    "classifiers",
    "trained",
    "right",
    "training",
    "12",
    "different",
    "image",
    "classifiers",
    "choosing",
    "best",
    "one",
    "way",
    "choosing",
    "best",
    "one",
    "calling",
    "member",
    "grid",
    "search",
    "basically",
    "model",
    "classifier",
    "best",
    "estimator",
    "model",
    "let",
    "see",
    "performs",
    "let",
    "see",
    "really",
    "like",
    "good",
    "classifier",
    "let",
    "see",
    "performance",
    "classifier",
    "test",
    "data",
    "data",
    "created",
    "order",
    "test",
    "performance",
    "algorithm",
    "going",
    "call",
    "base",
    "estimator",
    "dot",
    "predict",
    "going",
    "input",
    "test",
    "data",
    "going",
    "input",
    "x",
    "test",
    "going",
    "call",
    "output",
    "prediction",
    "prediction",
    "right",
    "need",
    "import",
    "another",
    "function",
    "sklearn",
    "dot",
    "metrics",
    "import",
    "accuracy",
    "score",
    "let",
    "see",
    "performance",
    "going",
    "make",
    "print",
    "going",
    "define",
    "another",
    "value",
    "score",
    "score",
    "accuracy",
    "score",
    "prediction",
    "test",
    "right",
    "taking",
    "labels",
    "test",
    "set",
    "comparing",
    "predictions",
    "going",
    "print",
    "something",
    "like",
    "going",
    "format",
    "super",
    "super",
    "nicely",
    "get",
    "like",
    "like",
    "clear",
    "measure",
    "well",
    "performs",
    "going",
    "express",
    "percentage",
    "say",
    "something",
    "like",
    "samples",
    "correctly",
    "classified",
    "something",
    "like",
    "format",
    "string",
    "score",
    "times",
    "100",
    "right",
    "score",
    "going",
    "give",
    "us",
    "number",
    "ranges",
    "0",
    "1",
    "going",
    "measure",
    "score",
    "accurate",
    "classifier",
    "test",
    "set",
    "value",
    "0",
    "1",
    "useful",
    "contains",
    "absolutely",
    "information",
    "going",
    "reshaping",
    "going",
    "like",
    "reformat",
    "number",
    "percentage",
    "right",
    "going",
    "much",
    "much",
    "cleaner",
    "order",
    "see",
    "performs",
    "execute",
    "code",
    "let",
    "see",
    "happens",
    "let",
    "see",
    "performance",
    "going",
    "press",
    "play",
    "going",
    "wait",
    "couple",
    "minutes",
    "like",
    "come",
    "back",
    "results",
    "let",
    "see",
    "performs",
    "execution",
    "completed",
    "accuracy",
    "got",
    "best",
    "estimator",
    "different",
    "image",
    "classifiers",
    "trained",
    "getting",
    "percent",
    "accuracy",
    "means",
    "absolutely",
    "perfect",
    "pretty",
    "much",
    "perfect",
    "classifier",
    "accuracy",
    "like",
    "super",
    "super",
    "high",
    "performance",
    "like",
    "good",
    "performance",
    "definitely",
    "use",
    "classifier",
    "later",
    "definitely",
    "use",
    "classifier",
    "order",
    "use",
    "project",
    "thing",
    "need",
    "next",
    "thing",
    "order",
    "complete",
    "tutorial",
    "save",
    "classifier",
    "save",
    "model",
    "want",
    "load",
    "model",
    "another",
    "project",
    "want",
    "load",
    "model",
    "different",
    "code",
    "different",
    "whatever",
    "different",
    "location",
    "definitely",
    "want",
    "save",
    "weights",
    "want",
    "save",
    "exactly",
    "information",
    "related",
    "model",
    "use",
    "later",
    "different",
    "project",
    "way",
    "going",
    "save",
    "model",
    "using",
    "pickle",
    "another",
    "python",
    "library",
    "going",
    "import",
    "pickle",
    "going",
    "call",
    "pickle",
    "dot",
    "dump",
    "going",
    "specify",
    "model",
    "want",
    "save",
    "object",
    "want",
    "save",
    "also",
    "need",
    "specify",
    "file",
    "going",
    "something",
    "like",
    "need",
    "open",
    "file",
    "wb",
    "okay",
    "going",
    "pretty",
    "much",
    "order",
    "save",
    "model",
    "order",
    "file",
    "model",
    "use",
    "later",
    "project",
    "location",
    "use",
    "file",
    "whatever",
    "way",
    "want",
    "going",
    "press",
    "play",
    "going",
    "pretty",
    "much",
    "training",
    "process",
    "completed",
    "everything",
    "done",
    "file",
    "exactly",
    "location",
    "specified",
    "case",
    "file",
    "called",
    "going",
    "tutorial",
    "absolutely",
    "completed",
    "steps",
    "process",
    "completed",
    "four",
    "steps",
    "process",
    "trained",
    "image",
    "classifier",
    "using",
    "python",
    "scikit",
    "learn",
    "enjoyed",
    "video",
    "invite",
    "click",
    "like",
    "button",
    "also",
    "invite",
    "write",
    "message",
    "comments",
    "section",
    "telling",
    "think",
    "video",
    "telling",
    "think",
    "tutorial",
    "also",
    "telling",
    "ideas",
    "recommendations",
    "videos",
    "projects",
    "could",
    "work",
    "next",
    "channel",
    "name",
    "felipe",
    "computer",
    "vision",
    "developer",
    "channel",
    "make",
    "tutorials",
    "coding",
    "tutorials",
    "exactly",
    "like",
    "one",
    "also",
    "share",
    "experience",
    "resources",
    "resources",
    "use",
    "computer",
    "vision",
    "developer",
    "type",
    "videos",
    "invite",
    "subscribe",
    "channel",
    "going",
    "today",
    "see",
    "next",
    "video"
  ],
  "keywords": [
    "channel",
    "video",
    "going",
    "make",
    "image",
    "classifier",
    "different",
    "categories",
    "one",
    "computer",
    "vision",
    "show",
    "robust",
    "works",
    "step",
    "process",
    "data",
    "train",
    "test",
    "performance",
    "steps",
    "tutorial",
    "build",
    "minutes",
    "let",
    "get",
    "today",
    "see",
    "four",
    "training",
    "take",
    "use",
    "project",
    "scikit",
    "learn",
    "numpy",
    "library",
    "machine",
    "learning",
    "want",
    "work",
    "definitely",
    "need",
    "good",
    "order",
    "first",
    "two",
    "empty",
    "exactly",
    "look",
    "like",
    "category",
    "something",
    "basically",
    "images",
    "many",
    "pretty",
    "much",
    "parking",
    "using",
    "code",
    "absolutely",
    "situations",
    "right",
    "super",
    "case",
    "well",
    "later",
    "thing",
    "import",
    "read",
    "load",
    "define",
    "input",
    "also",
    "say",
    "okay",
    "labels",
    "way",
    "file",
    "path",
    "dot",
    "save",
    "list",
    "call",
    "another",
    "function",
    "called",
    "new",
    "size",
    "15",
    "x",
    "append",
    "array",
    "three",
    "calling",
    "classifiers",
    "model",
    "next",
    "completed",
    "think",
    "time",
    "split",
    "sets",
    "set",
    "parameters",
    "shuffle",
    "means",
    "creating",
    "samples",
    "always",
    "12",
    "people",
    "svc",
    "object",
    "keys",
    "gamma",
    "c",
    "grid",
    "search",
    "values",
    "best",
    "trained",
    "performs",
    "accuracy",
    "score"
  ]
}