{
  "text": "Everyone and welcome to this Python and open\nCV course. In this course, we'll be talking\nabout everything you need to know. To get\nstarted with open CV in Python, we're going\nto start off with the very basics that is\nreading images and video, manipulating those\nmedia files with image transformations, and\nhow to draw shapes and put text on those files.\nThen we're going to move on to the most advanced\nparts of open CV that is switching between\ncolor spaces bitwise operators, masking, histograms,\nedge detection and thresholding. And finally,\nto sum things up, we'll be talking about face\ndetection and face recognition in open CV,\nso how to detect and find faces in an image\nand how to recognize them using inbuilt methods.\nIn the last video, we'll be building a deep\ncomputer vision model to classify between\nthe characters in The Simpsons based off some\nimages. All material discussed will be available\non my GitHub page, and all relevant links\nwill be put up in the description below. If\nthat sounds exciting, don't forget to head\nover and subscribe to my channel. And I'll\nsee you in the course. Hey, everybody, and\nwelcome to this Python and urban TV coast.\nOver the next couple of videos, we're going\nto be talking about using the open CV library\nto perform all sorts of image and video related\nprocessing and manipulations. Now I won't\nbe delving into what open CV is really is.\nBut just be brief. It is a computer vision\nlibrary that is available in Python, c++ and\nJava. A computer vision is an application\nof deep learning that primarily focuses on\nderiving insights from media files, that is\nimages and video. Now, I'm going to assume\nthat you already have Python installed on\nyour system. And a good way to check this\nis by going to terminal and typing Python\ndash dash version. Now make sure you're running\na version of Python of at least 3.7 above\nwhatever we do in this post wonderly work\nin some older versions of Python, and especially\nPython two, so just make sure that you have\nthe latest version installed, go ahead to\npython.org and download the latest version\nfrom bet. Now assuming that you've done this,\nwe can proceed to installing the packages\nthat we require in this course. The first\none is open C. So go ahead and do a pip install\nOpen CV dash contrib dash Python. Now sometimes\nyou may find people telling you to install\njust open CV dash Python. Well, this open\nteam dash Python is basically the main package\nthe main module of open CV, open CV dash contract\ndash Python includes everything in the main\nmodule, as well as a contribution modules\nprovided by the community. So this is something\nI recommend you install as it includes all\nof open CV functionality. You may also notice\nthat urgency, we tried to install the NumPy\npackage. Now NumPy is kind of a scientific\ncomputing package in Python, that's extensively\nused in matrix an array manipulations, transformations,\nreshaping and things like that. Now, we'll\nbe using NumPy in some of the videos in this\ncourse. But don't worry if you've never used\nthem before. It's simple and relatively easy\nto get started with. Now the next package,\nI'd like you to install a sphere. So go ahead\nand do pip install seer. Now, slight disclaimer,\nthis is a package that I built to basically\nhelp you to speed up your workflow. Sierra\nis basically a set of utility functions that\nwill prove super useful to you in your computer\nvision journey. It has a ton of super useful\nhelper functions that will help speed up your\nworkflow. Now, although we're not going to\nbe using this for a good part of this course,\nin fact, we'll only begin to use this in our\nlast video of this course when we're building\na deep computer vision model. I recommend\nyou install it now so that you don't have\nto worry about the installation process later\non. If you're interested in contributing to\nthis package, or just simply want to explore\nthe codebase I'll leave a link to this GitHub\npage in the description below. Okay, that's\nit for this video. In the next video, we'll\nbe talking about how to read images and video\nin open CV. So I'll see you guys in the next\nvideo. Hey everybody, and welcome back to\nanother video. In this video, we're going\nto be talking about how to read images and\nvideo in open CV. So I have a bunch of images\nin this photos folder, and a couple of videos\nin this videos folder. In the first half of\nthis video, we'll be talking about how to\nread in images in open CV, and towards the\nend we'll be actually talking about how to\nread in videos. So let's start off by creating\na new file and call this reader dot p y. And\nthe first thing we have to do is actually\ninput CV two as CV. So the way we read in\nimages in open CV is by making use of the\ncv.im read method. Now this method basically\ntakes in a path to An image and returns that\nimage as a matrix of pixels. Specifically,\nwe're going to be trying to read this image\nof a cat here. So we're going to say photos\nslash cat dot jpg. And we're going to capture\nthis image in a variable called IMG. Now you\ncan also provide absolute paths. But since\nthis photos folder is inside my current working\ndirectory, I'm going to reference those images\nrelatively. Now once we've read in our image,\nwe can actually display this image by using\nthe cv.rm show method. Now this method basically\ndisplays the image as a new window. So the\ntwo parameters we need to pass into this method\nis actually the name of the window, in this\ncase is going to be kept and the actual matrix\nof pixels to display, which in this case is\nIMG. And before we actually move ahead, I\ndo want to add an additional line a CV dot\nwait key zero. Now the CV or wiki zero is\nbasically a keyboard binding function, it\nwaits for a specific delay, or time in milliseconds\nfor a key to be pressed. So if you pass in\nzero, it basically waits for an infinite amount\nof time for a keyboard key to be pressed.\nI didn't worry too much about this, it's not\nreally that important for this course. But\nwe will be discussing some parts of it towards\nthe end of this video. So let's actually save\nthis and run by saying Python, read dot p\ny, and the image is displayed in a new window.\nCool. Now this was a small image, this was\nan image of size 640 by 427. Now we're going\nto try and read in this image of the same\ncat, but a much larger version, a 2400 by\n1600 image. So we're gonna say Cat on a school\nlarge dot jpg. Let's save that and run. And\nas you can see, this image goes way off screen.\nThe reason for this is because the dimensions\nof this image were far greater than the dimensions\nof the monitor that I'm currently working\non. Now currently, open CV does not have an\ninbuilt way of dealing with images that are\nfar greater than your computer screen. There\nare ways to mitigate this issue. And we'll\nbe discussing them in the next video when\nwe talk about resizing and rescaling frames\nand images. But for now, just know that if\nyou have images, if you have large images,\nit's possibly going to go off screen. So that's\nit for reading images, we can then move on\nto reading videos in open CV. So that's called\nreading videos. So what we're going to do\nis we're actually going to read in this video\nof a dog, and the way we read in videos is\nby actually creating a capture variable and\nsetting this equal to CV dot video capture.\nNow this method either takes an integer arguments\nlike 0123, etc, or a path to a video file.\nNow you would provide an integer argument\nlike 012, and three, if you are using your\nwebcam or a camera that is connected to your\ncomputer. In most cases, your webcam would\nbe referenced by using the integer zero. But\nif you have multiple cameras connected to\nyour computer, you could reference them by\nusing the appropriate argument. For example,\nzero would reference your webcam, one would\nreference the first camera that is connected\nto your computer to would reference the second\ncamera and so on. But in this video, we'll\nbe actually looking at how to read an already\nexisting videos from a file path. Now specifically,\nwe'll be reading this dog, this video for\ndog here. And the way we do that is by providing\nthe path so videos, slash dog dot mp4. Now,\nhere's where reading videos is kind of like\ndifferent from reading images. In the case\nof reading and videos, we actually use a one\nloop and read the video frame by frame. So\nwe're going to say while true. And the first\nthing we want to do inside this loop is say\nis true. And frame is equal to capture dot\nread. Now this capture dot read basically\nreads in this video frame by frame, it returns\nthe frame and a Boolean that says whether\nthe frame was successfully read in or not.\nDo you display this video we can actually\ndisplay an individual frame. So we do this\nby saying TV on show and we call this video\nand we pass in the frame and finally for some\nway to stop the Do from playing indefinitely\nis by saying if CV don't wait, Ki 20 and 0x\nff is equal to equal to Ord of D. There we\nwant to break out of this while loop. And\nonce that's done, we can actually release\nthe capture pointer. And we can destroy all\nwindows. And we can get rid of this. So basically\njust to recap, the capture variable is an\ninstance of this video capture clause. Inside\nof while loop, we grab the video frame by\nframe. By utilizing the captured read method,\nwe display each frame of the video by using\nthe CV dot m show method. And finally, for\nsome way to break out of this while loop,\nwe say if See, we don't wait ki 20 if and\n0x f f is equal to or D, which basically says\nthat if the letter D is pressed, then break\nout of this loop and stop displaying the video.\nAnd finally, we release the capture device\nand we destroy all the windows since we don't\nneed them anymore. So let's save that and\nrun. And we get a video displayed in a window\nlike this. But once it's done, you will notice\nthat the video suddenly stops and you get\nthis error. More specifically a negative 215\nassertion failed error. Now if you ever get\nan error like this negative 215 assertion\nfailed. This would mean in almost all cases\nis that open CV could not find a media file\nat that particular location that you specified.\nNow, the reason why it happened in the video\nis because the video ran out of frames, open\nCV could not find any more frames after the\nlast frame in this video. So it unexpectedly\nbroke out of the while loop by itself by raising\na CV to error. And now you're gonna get the\nsame error. If we comment this out, we uncomment\nthis out. And we specify a wrong path to this\nimage. So I see me Oh wait, wait key, zero,\nsave that and run and we get the exact same\nerror. This basically again says that open\nCV could not find the image or the video frame\nat a particular location basically, it could\nnot be ready. That's what it's saying. So\nthat's pretty much it. For this video, we\ntalked about how to read any images in open\nCV and how to read in videos using the video\ncapture class. In the next video, we'll be\ntalking about how to rescale and resize images\nand video frames in open CV. So see you then.\nHey, everyone, and welcome back. In this video,\nwe're going to be talking about how to resize\nand rescale images and video frames in open\nCV. Now, we usually resize and rescale video\nfiles and images to prevent computational\nstrain. Large media files tend to store a\nlot of information in it and displaying it\ntakes up a lot of processing needs that your\ncomputer needs to assign. So by resizing and\nrescaling, we're actually trying to get rid\nof some of that information. rescaling video\nimplies modifying its height and width to\na particular height and width. Generally,\nit's always best practice to downscale or\nchange the width and height of your video\nfiles to a smaller value than the original\ndimensions. The reason for this is because\nwhile most cameras your webcam included, do\nnot support going higher than its maximum\ncapability. So for example, if a camera shoots\nin 720 P, chances are it's not going to be\nable to shoot in 1080 P or higher. So to rescale\na video frame or an image, we can create a\nfunction called def rescale frame. And we\ncan pass in the frame to be resized and scale\nthe value which by default we're going to\nset as point seven five. So what I'm going\nto do next is I'm going to say with is equal\nto frame dot shape of one of one times scale.\nAnd I'm going to copy this and do the same\nthing for the height. Now remember frame no\nshape of one is basically the width of your\nframe or your image and frame note shape of\nzero is basically the height of the image.\nNow since width and height are integers, I\ncan actually convert these floating point\nvalues to an integer by converting it to an\niron T. And what we're going to be doing is\nwe're going to create a variable called dimensions,\nand set this equal to a table of width, comma\nheight. And we can actually return CV don't\nresize the frame, the dimensions, and we can\npass in it interpolations of CV dot into on\nthe school area. Now we'll be talking about\nCV dot resize in an upcoming video. But for\nnow, just note that it resizes the frame to\na particular dimension. So that's all a function\ndoes, it takes in the frame, and it scales\nthat frame by a particular scalar value, which\nby default is point seven, five. So let's\nactually try to see this in action. Let's\ngo back to this readout p y, and grab this\ncode. And we can paste there, we don't need\nus for now. uncomment these out. Now what\nI'm going to do is after I've read in the\nframe, I'm going to create a new frame call\nframe on this go resized, and set this equal\nto rescale frame of frame. And let's leave\nthe scale value is point seven, five. And\nwe can actually display this video resized\nby passing a frame on the scope resized. Resize.\nSo let's save that and run Python rescale\ndel p why that was an error. Okay, we don't\nneed this. Let's close that out, Save and\nRun. And this was our original video. And\nthis is actually a resize the video with the\nvideo resize by point seven 570 5%. We can\nmodify this by changing the scale of value\nto to maybe point two, so we rescaling to\n20%. And we get an even smaller video in a\nnew window. So let's close that out. Now you\ncan also apply this on images. So let's uncomment\nthat out, change that to cat dot jpg. And\nwe can do receive our show. Image and pawson\nthe resized image. And we can create a resize\nimage by calling rescale frame and we could\npass in the IMG. So let's see that in Rome.\nAnd this is a small videos we're not concerned\nwith that. This is actually the big image\nthe large image. And this is the recent version\nof this image. So let's close that out. Now\nthere is another way of rescaling or resizing\nvideo frames specifically. And that's actually\nusing the capture dot set method. Now this\nis specifically for videos, and will work\nfor images. So let's go ahead and try to do\nthat. Let's call this depth change rez. So\nwe're changing we're changing the resolution\nof the image of video. And we can pass in\na width and a height. And what we're going\nto do is we're going to say capture, don't\nset three comma with and we're going to do\nthe same thing with capture dot set four comma\nheight. Now three info basically stands for\nthe properties of this capture class. So three\nreferences the width and full references the\nheight. You can also expand this to maybe\nchange the brightness in the image. And I\nthink you can reference that by setting this\nto 10. But for now we're going to be interested\nin the width and the height. Now, I do want\nto point out this, this method will work for\nimages, videos, and live video. Basically,\nfor everything you can use this rescale frame\nmethod. But the changes function only works\nfor live video. That is video you read in\nfrom an external camera or your webcam for\ninstance. So video that is going on currently,\nthis is not going to work on standalone video\nfiles, video files that already exist. It\njust doesn't work. So if you're trying to\nchange the resolution of live video, then\ngo with this function if you're trying to\nchange the resolution of an old already existing\nvideo, then go with this function. So that's\npretty much it for this video that we talked\nabout how to resize and rescale video frames\nand images in open CV. In the next video,\nwe'll be talking about how to draw shapes,\nand write text on an image. So that's everything.\nI'll see you guys in the next video. Hey,\neveryone, and welcome back to another video.\nIn this video, we're going to be talking about\nhow to draw and write on images. So go ahead\nand create a new file and call this draw dot\np y. We're going to input CV two and CV, we're\ngoing to input the NumPy package that open\nCV had installed previously. And we're going\nto input that as MP, we will read in an image\nby saying OMG is equal to cv.rm, read person\nphotos, photos slash cat dot jpg, we can display\nthat image in a new window. And we can do\nreceive out of weight key zero. Now there\nare two ways we can draw on images by actually\ndrawing on standalone images like this image\nof a cat to or we can create a dummy image\nor a blank image to work with. And the way\nin which we can create a blank image is by\nsaying blank is equal to NP dot zeros of shape\n500 by 500. And give it a data type of ui\n98. You ID eight is basically an image the\ndatatype of an image. So if you want to try\nand see this image, see what this image looks\nlike. We can say blank, and we can pass in\nlike save that and run Python drawed or p\ny. And this is basically the blank image that\nyou can draw on. So we're going to be using\nthat in instead of drawing this cat image.\nBut feel free to use this cat image if you'd\nlike. So the first thing we're going to do\nis try to paint is trying to paint the image\na certain color. And the way we do this is\nby saying blank and reference all the pixels\nand set this equal to zero comma 255 comma\nzero. So by painting the entire image green,\nand we can display this image by saying green\nin passing the blank image, save that and\nrun. Can I broadcast Yeah, okay, you need\nto give it a shape of three, basically, we\nare giving the shape of height, width, and\nthe number of color channels. So just keep\nthat in mind save up. And this is the green\nimage that we get cool, we can even change\nthis and try to change this to red zero comma\n255. Save that. And we get a red image over\nhere. Now you can also call a certain portion\nof the image by basically giving it a range\nof pixels. So we can say 200 to 300. And then\nfrom 300 to 400. Save that and run and you\ngot a Red Square in this image. The next thing\nwe're going to do is we're going to draw a\nrectangle. And the way we do this is by using\nthe CV don't rectangle method. This method\ntakes in an image to draw the rectangle over,\nwhich in this case is blank. And it takes\nin point 1.2, color, thickness and a line\ntype if you'd like. So the point one will\nspecifically be zero comma zero, which is\nthe origin. And we can go all the way across\nto 250 comma 250. Let's give it a color of\nzero comma 255 comma zero, which is green,\ngive it a thickness of let's say two, which\nis basically saying the thickness of the borders.\nAnd once that's done, we can display this\nimage by saying let's call this rectangle\nin passing and passing the blank image. We\ncan comment this out since we don't need this\nanymore. And we get a green rectangle that\ngoes all the way from the origin to 250 comma\n250. You can play around with it if you like\nso we can go from 250 to maybe 500. And it\ngoes all the way across the image. So you\nbasically divide the image in half. Now there\nis a way of filling in this image a certain\ncolor. And the way we do this is instead of\nsaying thickness is equal to two, we say thickness\nis equal to CV dot field. That basically fills\nin the rectangle to get this green rectangle.\nNow Alternatively, you can also specify this\nas negative one, negative one. And we get\nthe same result, what we can also do is, instead\nof giving it fixed values like 250, and 500,\nwhat we could do is we could say, IMG done\nshape of zero, of one divided by divided by\ntwo, and image dome shape of zero, divided\nby divided by two. Let's save that and run.\nimage is not in fact, God, this is blank,\nthis is blank, save that and run. And we get\na nice little rectangle, or square, if you\nwill, in this image, what it basically did\nis it scaled the rectangle from instead of\nbeing these, this entire square, this rectangle\nbasically has dimensions, half of that of\nthe original image. So moving on, let's try\nand draw a circle. Draw circle. This is also\nfairly straightforward, we do a CV dot circle.\nAnd we pass in the blank image. And we give\nit a center, which basically the coordinates\nof the center for now let's set this to the\nmidpoint of this image by saying 250 comma\n250. Alternatively, you could also get this\nlet's give it a radius of 40 pixels, give\nit a color of zero comma, zero comma 255,\nwhich is red BGR. And give it a thickness\nof let's say three. We can display this image,\nsay, circle is equal to blank. And we get\na nice little circle over here, that has its\ncenter at 250 km 250, and radius of 40 pixels.\nAgain, you can also fill in this image by\ngiving a thickness of negative one. Here,\nwe get a nice little dot here in the middle.\nCool. Now there's something else that I forgot.\nAnd that is how to draw a line a standalone\nline on the image. That again, is fairly straightforward,\nsay draw a line, we use a cv.in line method.\nAnd this takes in the image to draw the line\non and two points, that's just copy these\npoints, basically everything. And this basically\ndraws a point from zero comma zero to half\nthese image dimensions. So that's 252 50.\nAnd then it draws a line of color zero comma\n255, comma zero. Let's set this to full white\n2255, d 5255. And it's green thickness you\ncan specify as three. And we didn't display\nthis image. See you don't on show colas line,\nrule the line, blank image, and we get a line\nthat goes all across from zero comma, zero\ncomma zero to 250, comma 250. Let's try and\nplay around with this. And let's draw a line\nfrom 100 to maybe 250. And then it goes all\nthe way to 300 to 400, save that. And you've\ngot a line that goes from 100 100 to 300,\ncomma 400. Cool. And finally, the last thing\nthat we will discuss in this video is how\nto write text on an image that that's right\ntext on an image. Now, the way we do this\nis very straightforward. We see we do a CV\ndot put text. And this will put text on the\nblank image. We specify what we want to put\non. So let's say hello. We can give it an\norigin, which is basically where do we want\nto draw the image from? Let's set this to\n225 and 225. And we can also specify font\nface. Now open CV comes with inbuilt fonts.\nAnd we will be using the CV dot font unschool\nHershey ns go. We'll be using the triple x,\nyou have complex you have duplex you have\nplain. You have script simplex and a lot of\ninbuilt phones. But for now, let's use a triplex.\nLet's give this a font scale, which is basically\nhow much do you want to scale the font by,\nlet's set this to 1.0. We don't want to scale\na font, let's give it a color of zero comma\n255, comma zero, and give it a thickness of\ntwo. Commit that out. And we can display this\nimage. So you don't I'm show let's call this\ntext and pass in the blank image. And we get\nsome text that is placed on the image. You\nplay around with it and say, Hello, my name\nis Jason. Save and Run. And it goes off screen.\nI when we're dealing with large images, but\nwe can there's no way of actually handling\nthis except for maybe changing the margins\nhere a bit, too, we can do that by saying\nlet's say it's zero comma two to five. And\nit sounds from zero and says Hello, my name\nis yes. So that's it. For this video, we talked\nabout how to draw shapes, how to draw a lines,\nrectangles, circles and how to write text\non an image. Now in the next video, we'll\nbe talking about basic functions in open CV,\nthat you're most likely going to come across\nwhatever project in computer vision you end\nup doing. So if that's it, I'll see you guys\nin the next video. Hey, everyone, and welcome\nback to another video. In this video, we're\ngoing to be talking about the most basic functions\nin open CV that you're going to come across\nin whatever computer vision project you end\nup building. So let's start off with the first\nfunction. And that is converting an image\nto grayscale. So we've written an image, and\nwe've displayed that image in a new window.\nAnd currently, this is a BGR image, a three\nchannel blue, green and red image. Now there\nare ways in open CV to essentially convert\nthose BGR images to grayscale so that you\nonly see the intensity distribution of pixels\nrather than the color itself. So the way we\ndo that is by saying gray is equal to CV dot\nCBT color, we pass in the image that we want\nto convert from, which is IMG, and we specify\na color code. Now this kind of code is CV\ndealt kind of unskilled BGR. To great, since\nwe're converting a BGR image to a grayscale\nimage. And we can go ahead and display this\nimage by saying CV don't show passing gray\nand pass in the gray image. Save that and\nrun your Python basic.pi. And this was the\noriginal image. And this is the grayscale\nimage. Let's try this with another image.\nSlide with no this is the image of a park\nin Boston save and maybe change that to Boston.\nAnd this is the BGR image in open CV, and\nthis is its corresponding grayscale image.\nSo nothing too fancy. We've just converted\nfrom a BGR image to a grayscale image. The\nnext function we're going to discuss is how\nto blur an image. Now blurring an image essentially\nremoves some of the noise that exists in an\nimage. For example, in an image, there may\nbe some extra elements that were there because\nof bad lighting when the image was taken,\nor maybe some issues with the camera sensor\nand so on. And some of the ways we can actually\nreduce this noise is by applying a slight\nblur. There are way too many blurring techniques\nwhich we will get into in the advanced part\nof this goes. But for now we're just going\nto use the Gaussian Blur. So what we're going\nto do is we're going to create a blurred image.\nI think blur is equal to CV dot Gaussian Blur.\nAnd this image will take an associate image\nwhich is the IMG it will take in a kernel\nsize, which is actually a two by two tuple\nwhich is basically the window size that open\nCV uses to compute the blown the image. We'll\nget into this in the advanced part of the\nscope so don't worry too much about this,\njust know that this kernel size has to be\nan odd number. So So let's start a real simple\nand keep the kernel size to three by three.\nAnd another thing that we have to specify\nis CV dot border on school default. So go\nahead and try to display this image, the same\nblur, and pawson blue. Now, you will be able\nto notice some of the differences in this\nimage. And that is because of the blur that\nis applied on it. Right this people in the\nbackground are pretty clear on this image.\nAnd over here, they're slightly blurred. To\nincrease a blind his image, we can essentially\nincrease the kernel size from three by three\nto seven by seven, save that and run. And\nthis is the image that is way more blurred\nthan the previous image. So that's it. The\nnext function we're going to discuss is how\nto create an edge cascade, which is basically\ntrying to find the edges that are present\nin the image. Now again, there are many edge\ncascades that are available. But for this\nvideo, we're going to be using the canny edge\ndetector, which is pretty famous in the computer\nvision world. Essentially, it's a multi step\nprocess that involves a lot of blurring and\nthen involves a lot of grading computations\nand stuff like that. So we're gonna say, Kenny,\nKenny is equal to CV dot Kenny, we pass in\nthe image, we pass in to threshold values,\nwhich for now I'm going to say 125 and 175.\nLet's go ahead and try to display this image,\nget the Kenny images. And we can pass in county.\nSave that and run. And these were the edges\nthat were found in this image. As you can\nsee that it hardly any edges found in the\nsky. But a lot of features in the trees and\nthe buildings. And quite a few, you know features\nand edges in the grass and stuff. We can reduce\nsome of these edges by essentially blurring\nthe image. And the way we do that is instead\nof passing the IMG, we pass in the blur. See\nthat run. And as you can see that there were\nfar less edges that were found in the image.\nAnd this is a way you can basically reduce\nthe amount of edges that were found by a lot\nby applying a lot of blur, or get rid of some\nof the edges by applying a slight blur. Now\nthe next function we're going to discuss is\nhow to dilate an image using a specific structuring\nelement. Now the structuring element that\nwe are going to use is actually these edges,\nthe canny edges that were found, so we're\ngonna say dominating the image. And the way\nwe do that is by saying dilated is equal to\nCV dot dilate. And this will take in the structuring\nelement, which is basically the canny edges.\nAnd we'll take a kernel size, which we'll\nspecify as three by three for now. And it\nwill also take n iterations of one. Now, dilation\ncan be applied using several iterations of\nthe time, but for now, we're just going to\nstick with one. So go ahead and try to display\nthis image by saying CV dot m shope. Call\nthis dilated. And we can pass in David. Save\nthat and run. And if these were, if these\nwere edges, these are the dilated edges, we\ncan maybe increase the kernel size to maybe\nseven by seven and tried to see what that\ndoes hold on. And nothing much was done. Not\nmuch difference was that let's try to increase\nthe number of iterations to maybe three. And\nit's definitely way thicker. But you're gonna\nsee subtle differences with the amount of\nfeatures and edges that you find. Now there\nis a way of eroding this dilated image to\nget back this structuring element. Now, it's\nnot going to be perfect, but it will work\nin some cases. So we're gonna say, call this\nroading and we call this eroded is equal to\nCV don't erode, it will take in the dilated\nimage, pass and dilated, it will take a kernel\nsize of let's start off with three by three\nand given n iterations of one just for now.\nAnd we didn't display this image show coolest\nclothes eroded, eroded and if this was your\nstructuring element, and this was your dilate\nimage, this is basically the result you get\nfrom eroding this image. Now, it isn't the\nsame as a structural element. But you can\njust about to make the features that. But\nyou can see that between this and this, there\nis a subtle change in the edges and the thickness\nof these edges, we can maybe try to match\nthese values, so that we attempt so that there\nis an attempt to get back this edge cascade.\nAnd yes, we got the edges back there, as you\ncan see that you compare these two, they look\npretty much the same. And the edges are the\nsame. So essentially, if you follow the same\nsteps, you can, in most cases, get back the\nsame edge cascade. And probably the last function\nthat we're going to discuss is how to resize\nand crop an image. So we're going to start\nwith resize. So we come to resizing video\nframes and images in the previous video in\none of the previous videos. But we're just\ngoing to touch on the CBO resize function\njust a bit. So we're going to say resized,\nresized equal to CV dot resize, this will\ntake an image to be resized, and it will take\nin a destination size, which let's set this\nto 500 by 500. And so this essentially takes\nin this image of the park, and resize that\nimage to 500 by 500, ignoring the aspect ratio.\nSo we display this image by saying saved out\nI'm sure resized and resized. Save that and\nrun. And let's go back to this image. If this\nis the original image, this is the image that\nwas resized to 500 by 500. Now by default,\nthere is an interpolation that occurs in the\nbackground, and that is CV dot into on the\nscope area. Now this interpolation method\nis useful if you are shrinking the image to\ndimensions that are smaller than that of the\noriginal dimensions. But in some cases, if\nyou are trying to enlarge the image and scale\nthe image to a much larger dimensions, you\nwill probably use the inter underscore linear\nor the inter on scope cubic. Now cubic is\nthe slowest among them all. But the resulting\nimage that you get is of a much higher quality\nthan the inter on scope area or the inter\nunderscore linear. So let's touch on cropping.\nAnd that's basically by utilizing the fact\nthat images are arrays. And we can employ\nsomething called Array Slicing, we can select\na portion of the image on the basis of your\npixel values. So we can say cropped is equal\nto the image. And we can select a region from\n50 to 200. And from 200 to 400. And we can\ndisplay this image Cole is cropped, possibly\ncropped. And this is a cropped image of let's\ngo back here of this original image, you try\nto superimpose them, it's probably going to\nbe you. Yeah, it's basically this portion.\nSo that's pretty much it. For this video,\nwe talked about the most basic functions in\nopen CV, we talked about converting an image\nto grayscale by applying some blur by creating\nan edge cascade by dilating the image by eroding\nthat dilated image by resizing an image and\ntrying to crop an image using Array Slicing.\nIn the next video, we're going to be talking\nabout image transformations in open CV, that's\ntranslation, rotation, resizing, flipping\nand cropping, so if you have any questions,\nleave them in the comments below. Otherwise,\nI'll see you guys in the next video. Hey,\neveryone, and welcome back to this Python\nand open CV course. In this section, we're\ngoing to cover basic image transformations.\nNow these are common techniques that you would\nlikely apply to images, including translation,\nrotation, resizing, clipping and cropping.\nSo let's start off with translation. Translation\nis basically shifting an image along the x\nand y axis. So using translation, you can\nshift an image up, down, left, right, or with\nany combination of the above. So so to translate\nan image, we can create a translating function,\nwe're gonna call this def translate This translation\nfunction will take in an image to translate\nand take an x and y, x and y basically stands\nfor the number of pixels, you want to shift\nalong the x axis and the y axis respectively.\nSo do translate an image, we need to create\na translation matrix. So we're going to call\nthis transmit is equal to NP dot float 32.\nAnd this will take in a list with two lists\ninside of it. And the first list we're going\nto say, one comma zero comma x, and zero comma\none comma y. And since we're using NumPy,\nwe can import NumPy, import NumPy as NP. And\nonce we've created our translation matrix,\nwe can essentially get the dimensions of the\nimage saying dimensions, which is a tuple\nof image don't shave off one, which is the\nwidth an image dot shape of zero, which is\nthe height. And we can return CV dot warp\na fine. This will take in the image matrix\nto trans MIT animal taking the dimensions.\nAnd with that data, we can essentially translate\nour image. And before we do that, I do want\nto mention that if you have negative values\nfor x, you're essentially translating the\nimage to the left, negative negative y values\nimplies shifting up positive x values implies\nshifting to the right. And as you guessed,\npositive y values shifted down. So let's create\nour first translated image. We're setting\nthis equal to translate, we're going to pass\nin the image, the image and we're going to\nshift the image right by 100 pixels, and down\nby 100 pixels. That's to receive it on on\nthe show, translated and translate tip. Save\nthat and run Python krones formations dot\np y. And this is your translated image, it\nwas shifted down by 100 pixels and shifted\nto the right by 100 pixels. So let's change\nthat. Let's shift the image left by 100 pixels\nand down by 100 pixels. So we pass in negative\nvalues for x and it moved to the left. Feel\nfree to play around with these values as you\nsee fit. Just know that negative x shifts\nto the left, negative y shoves it up, x shifted\nto the right and positive y values shifted\ndown. Moving on, let's talk about rotation.\nrotation is exactly what it sounds like rotating\nan image by some angle. Open CV allows you\nto specify any point any rotation point that\nyou'd like to rotate the image around. Usually\nif the center but but with open CV, you could\nspecify any arbitrary point it could be any\ncorner, it could be 10 pixels to the right\n40 pixels down, and you can shift the image\naround that point. So to draw to rotate the\nimage, we can create a rotating function,\nlet's call this dev rotate. This will take\nan image angle to rotate around and a rotation\npoint which we're going to say which we're\ngoing to set is not so we're going to grab\nthe height and width of the image by pressing\nby setting this equal to IMG dot shape of\nthe first two values. Basically, if the rotation\npoint is none, we are going to assume that\nwe want to rotate around the center. So we're\ngoing to say rot point is equal to width divided\nby two divided by two in height divided by\ndivided by two. And we can essentially create\nthe rotation matrix like we did with the translation\nmatrix. By setting this equal to rot met is\nequal to CV dot get rotation matrix 2d. We're\ngoing to pass in the center the rotation point\nand angle to rotate around which is angle\nand a scale value. Now we're not interested\nin scaling the image when we've rotated so\nwe can set this to 1.0. value we can set a\ndimensions variable equal to the width and\nthe height and we can return the rotated image\nwhich is a CV don't warp a fine image rot\nmet the destination size which is dimensions.\nAnd that's it. That's all we need for this\nfunction. So we can create a rotated image\nby setting this equal to rotate, and we can\nrotate the original image by 45 degrees. So\nlet's display this image, call this rotated,\nand pass and rotated. Save that in rock. And\nthis is your rotated image. As you can see,\nit was rotated counterclockwise by 45 degrees.\nIf somehow you wanted to rotate this image\nclockwise, just specify negative values for\nthis angle, and it will rotate the image around\nrotated clockwise. Now you can also rotate\na rotated image that is take this image and\nrotated by 45 degrees further. So let's call\nthis rotated, rotated rotated is equal to\nrotate or rotate tid. And we can rotate this\nimage by another 45 degrees. So we're rotating\nit clockwise. And we can see the.on show called\nis rotated, rotated. And we can pause and\nrotated, rotated, whatever, rotate it. And\nthis is your rotate rotated image. Now the\nreason why these black lines were included\nis because if there's no image in it, if there's\nno part of the image in it, it's going to\nbe black by default. So when you took this\nimage and rotated it by 45 degrees, you essentially\nrotated the image, but introduce these black\ntriangles. Now if you tried to rotate this\nimage further by some angle, you are also\ntrying to rotate these black triangles along\nwith it. So that's why you get these kind\nof a skewed image. So there's additional triangles\nare included over here. But save yourself\nthe trouble and basically add up these angles\nand you will get the final angle. So we can\nchange that to 90 and retake the original\nimage by negative 90. And this is essentially\nthe image that we were trying to go for, take\nthis image rotated 45 degrees clockwise and\nrotate this 45 degrees image by further 45\ndegrees, save yourself the trouble and add\nthose two angle values. So so far, we've covered\ntwo image transformations, translation and\nrotation. Now we're going to explore how to\nresize an image. Now this is nothing too different\nfrom what we've discussed previously. But\nlet's touch on adjust a bit resizing. And\nwe can create a resized variable and set this\nequal to CV don't resize, we can pass in the\nimage to resize and the destination signs\nof maybe 500 by 500. And by default the interpolation\nis CV dot inter underscore area. You can maybe\nchange this to into underscore linear or inter\nunderscore cubic. Definitely a matter of preference\ndepending on whether you're enlarging or shrinking\nthe image. If you're shrinking the image,\nyou will probably go for into underscore area\nor stick with default. If you're enlarging\nthe image, you could probably use the inter\nunderscore linear or the dansko cubic cubic\nis slower, but the resulting image is better\nwith over high quality. Again, I think it's\nyou different from what we discussed before.\nSo we can display this image. I can resize\nand passing and resized. Save that run and\nwe've got a resized image. Next up we have\nflipping how to flip an image. So we don't\nneed to define a function for this, we just\nneed to create a variable and set this equal\nto CV dot flip. This will take in an image\nand a flipped code. Now this flip code could\neither be 01 or negative one. Zero basically\nimplies flipping the image of vertically that\nis over the x axis one specifies that you\nwant to flip the image horizontally or over\nthe y axis and negative one basically implies\nflipping the image both vertically as well\nas horizontally. So let's start off with zero\nclaiming it vertically. I'm show call this\nflip in Parson boop, Save and Run. And this\nis the image that was clipped vertically.\nLet's try out a horizontal clip how we get\na horizontal Flip, surely see whether it was\na horizontal flip, we can bring these two\nimages together. And if they looked like mirror\nimages, then it was flipped horizontally.\nThis is a kind of a symmetric image. So it's\nnot that obvious, but bring them together\nand you can maybe find out the difference.\nWe could also try to flip the image vertically\nand horizontally by specifying negative one\nas a flip code. And the image was flipped\nboth vertically, as well as horizontally mirror\nimages, but reverse mirror images. And the\nlast method is cropping now being discussed\ncropping again, I'm just going to touch on\nit, we can create a variable called corrupt\nand set this equal to IMG and perform some\nArray Slicing. So 200 to 403 100 to 400. Save\nthat and run. We didn't display the search.\nEven though I'm show it's cool as cropped,\npast and cropped, Save and Run. And this is\nthe cropped image we try to bring this together\ncan be brought together, cutting gram holders.\nOkay. So that's pretty much it. For this video,\nwe talked about translating an image, rotating\nthat image, resizing an image, flipping an\nimage and cropping those images, we are basically\njust covering the basics, basic image transformations.\nThere are of course, way mo transformation\nthat you could possibly do with open CV. But\njust to keep this go simple and beginner friendly,\nI'm only covering the basic transformations.\nSo that's it for this video. In the next video,\nwe're going to be talking about how to identify\ncountries in an image. So if you have any\nquestions, leave them in the comments below.\nOtherwise, I'll see you guys in the next video.\nHey everyone, and welcome back to another\nvideo. In this video, we're going to be talking\nabout how to identify contours in open CV.\nNow contours are basically the boundaries\nof objects, the line or curve that joins the\ncontinuous points along the boundary of an\nobject. Now from a mathematical point of view,\nthey're not the same as edges. For the most\npart, you can get away with thinking of contours\nas edges. But from a mathematical point of\nview, contours and edges are two different\nthings. contours are useful tools when you\nget into shape analysis and object detection\nand recognition. So in this video, I sort\nof want to introduce you to the idea of contours\nand how to identify them in open CV. So the\nfirst thing I've done is I've read in a file,\nan image file, and I've displayed that image\nusing the cv.rm show method. Then next thing\nI want to do is convert this image to grayscale\nby saying gray is equal to CV dot CVT color\nIMG CV dot color on this go BGR to great,\nand we can display this. So just know that\nwe're on the same footing. I'm going to run\nthis Python, Cantu's down p y. And we get\na gray image over here. Now after this, I\nwant to essentially grab the edges of the\nimage using the canny edge detector. So I'm\ngoing to say Kenny is equal to CV Kenny, we're\ngoing to pass in the IMG and we're going to\ngive it to threshold values. So 125 and 175.\nAnd we can display this image calling this\nKenny edges passing Kenny. I save that and\nrun it I didn't save it, save it in ROM and\nthese are the edges that were there in the\nimage. Now, the way we find the contours of\nthis image is by using the find contours method.\nNow this method basically returns two things,\ncontours and higher keys. And essentially\nthis is equal to CV dot find Cantu's. This\ntakes in the edges. So Kenny, it takes in\na mod in which to find the contents now this\nis either CV dot retter on a scope tree, if\nyou want all the hierarchical contours, or\nthe rhetoric external if you want only the\nexternal countries, or, or retter list if\nyou want all the cartoons in the image. The\nnext method we pass in is actually the cone\nto approximation method for now we're going\nto set this to CV dot chain, unscrew approx\nns go numb. So let's, let's just have a top\ndown look at what this function does. So essentially,\nthe CBO fund contours method looks at the\nstructuring element or the edges of a found\nin the image and returns to values, the contours,\nwhich is essentially a Python list of all\nthe coordinates of the contours that were\nfound in the image. And hierarchies, which\nis really out of the scope of this course.\nBut essentially, it refers to the hierarchical\nrepresentation of contours. So for example,\nif you have a rectangle, and inside the rectangle,\nif you have a square, and inside of that square,\nyou have a circle. So this hierarchy is essentially\nthe representation that open CV uses to find\nthese courtrooms. This even retinal list essentially\nis a mod in which this fine contries method\nreturns and finds the cuantos. Read a list\nessentially returns all the quantities that\nfind in the image. We also have Reto external\nthat we discussed radix download retrieves\nonly the external conduits to all the ones\non the outside, it returns those revenue underscore\ntree returns all the hierarchical contours,\nall the contours that are in a hierarchical\nsystem that is returned by record underscore\ntree. For now, I'm just going to set this\nto will list to return all the contours in\nthe image. The next one we have is the contour\napproximation method. This is basically how\nwe want to approximate the contour. So chain\napprox none does nothing, it just returns\nall of the contracts. Some people prefer to\nuse red chain approx symbol, which essentially\ncompresses all the quantities that are returned\nin the simple ones that make most sense. So\nfor example, if you have a line in an image,\nif you use chain approx none, you are essentially\ngoing to get all the contours all the coordinates\nof the points of that line, chain approx simple\nessentially takes all of those points of that\nline, compresses it into the two end points\nonly. Because that makes the most sense, a\nline is defined by only two end points, we\ndon't want all the points in between. That,\nin a nutshell is what this entire function\nis doing. So since cartoons is a list, we\ncan essentially find the number of cartoons\nthat were found by finding the length of this\nlist. So we can print print length of this\nlist. And we can say fair, we can say \nwe can say these many contused. Found. Okay,\nso let's say that and Ron. And we found 2794\nquantos in the image. And this is huge. This\nis a lot of code who's ever found in the image.\nSo let's do a couple of things. Let's try\nto change this chain approx symbol to chain\napprox none, and see what that does. See how\nthat affects our length. Now there isn't any\ndifference between those two, because I'm\nguessing that there were no points to compress\nand sin there are a lot of edges and points\nin this image. So there wasn't a lot of compression.\nSo let's change the back to symbol. And actually,\nwhat we want to do is I want to blow this\nimage before I find the edges. So let's do\nthis. Let's do a blue is equal to CV dot Gaussian\nBlur can pass in the gray image. And we can\ngive the kernel size of let's let's do a lot\nof blur. So five by five. And maybe we can\ngive it by the default of CV dot border on\ndisko default. And we can if you want to,\nand we can display this image, call this blur\nand pass an error we can find the edges on\nthis blurred image. So let's close below.\nAnd as you can see this significant reduction\nin the number of Quorn twos that were found\njust by blurring the image. So it went all\nthe way from 2794 to 380. That's closest seven\ntimes just by blurring the image with the\nkernel size of five by five. Okay, now there\nis another way of finding the corner shoes\nis that it's stead of using this canny edge\ndetector, we can use another function in open\nCV, and that is threshold. So I'm just going\nto comment this out. And down here, what I'm\ngoing to do is I'm going to say, ret Thresh\nis equal to CV don't threshold, this will\ntake in the gray image, and we've taken a\nthreshold value of 125 and a maximum value\nof 255. I don't worry too much about thresholding.\nFor now, just know that threshold essentially\nlooks at an image and tries to binarize that\nimage. So if a particular pixel is below 125,\nif the density of that pixel is below 125,\nit's going to be set to zero or blank. If\nit is above 125, it is set to white or two\nby five. That's all it does. And in the find\nquantities method, we can essentially pass\nin the thrush value. So let's save that. Let's\nclose this out and try to run that. Type.\nOkay. threshold missing. Okay, I think I forgot\none part, where to specify a threshold and\ntype. So this is CV dot Thresh. On this go,\nbinary, binary raising the image basically.\nOkay, let's run that. And there were 839 contours\nthat were found, we can visualize that let's\nprint ad to display this Thresh. Image, passing\nThresh. Same that run. And this was the thresholded\nimage you're using 125. close this out, using\n125 as our threshold value, and 255 as a maximum\nvalue, we got this thresholded image. And\nwhen we tried to find the current use on this\nimage, we got 839 concepts. Now don't worry\ntoo much about this thresholding business,\nwe'll discuss this in the advanced section\nof this goes more in depth just know that\nthresholding attempts to binarize an image,\ntake an image and convert it into binary form\nthat is either zero or black, or white, or\nto Vi five. Now what's cool in open CV is\nthat you can actually visualize the contours\nthat were found on the image by essentially\ndrawing over the image. So what do we do real\nquick is actually input NumPy NumPy as NP\nand after this, I'm going to create a blank\nvariable and set this equal to NP dot zeros\nof image dot shape of the first two values,\nand maybe give it a data type of I know you\nare 28 we can display this image because blank\npawsome blank, just to visualize and have\na blank image to work with. Let's save that\nand go to a blank image. This is of the same\ndimensions as our original accounts image.\nSo what I'm going to do is I'm going to draw\nthese contours on that blank image so that\nwe know what kind of contours that open CV\nfound. So the way we do that is by using the\nCV dot draw contours method, it takes in an\nimage to draw over fill blank, it takes in\nthe contours, which has to be a list, which\nin this case is just the quantities list.\nIt takes an account to index which are basically\nhow many countries do you want in the image.\nSince we want all of them since we want to\ndraw all of them, we can specify a negative\none, give it a color, let's add this to BGR.\nSo let's set this to red zero comma zero comma\n255. And we can give it a thickness of maybe\ntwo. And we can display the blank image. So\nlet's call this contused join. And we can\npass in blank. Save that and run. Okay, there\nwas an error I think this has to be shaped.\nOkay, so these were the cartoons that would\ndraw on the image. If you take a look at the\nthreshold value thresholded image, it's not\nthe same thing. What I believe it attempted\nto do is instead it found the edges of this\nimage all the edges of this image and attempted\nto draw it out on this blank image. Let's\nset this so let's set the thickness to maybe\none so that we have a crisper view Okay, so\nthese were the quantities that were drawn\nin the image. And in fact, if you try to visualize\nit with Kenny, let's actually visualize that\nwith Kenny uncomment. That out, run. blows\non the point undefined. Okay, that has to\nbe an image. Okay, let's look at Kenny, let's\nlook at this. Okay, it's not the same thing.\nAnd that makes sense, because our firing coaches\nmethod and use Kenny, as the basis of detecting\nand finding the controls. But we can do that.\nLet's not use a thresholding method. And instead,\nlet's use Kenny. So we can pass in Kenny here.\nSave that and run. And, okay, that pretty\nmuch the same thing, right? It's basically\na mirror image of these two, like I said,\nyou can get away with thinking of contours\nas edges. They're not the same thing. But,\nbut you can think of them as edges. Because\nfrom a programming point of view, they kind\nof like the edges of the image. Right? The\nother boundaries, they are curves that join\nthe points along the boundary, those are basically\nedges. So let's try to blow that image. Let's\nuncomment that out. Let's see what that does.\nI don't think that had any effect because\nwe didn't pass in blood. Okay, 380 countries\nhave found and mirror images of each other.\nSo generally, what I recommend is that you\nuse scanning method first, and then try to\nfind the corn who's using that, rather than\ntry to threshold the image and then find the\ncontours on that. Because like we will discuss\nin the advanced section, this type of thresholding.\nThe simple thresholding has its disadvantages.\nMaybe because we're passing in a simple, just\none value, dread binarize the image using\nthis threshold value, right? It's not the\nmost ideal, but in some cases, in most cases,\nit is most favored kind of thresholding because\nit's the simplest, and it does the job pretty\nwell. So that's pretty much it. For this video,\nwe talked about how to identify quantities\nin open CV. But in two methods first trying\nto find the edge cascades of the image using\nthe canny edge detector, and try to find the\nquantities using that and also trying to binarize\nthat image using the CV dot threshold and\nfinding the contours on that. So if you have\nany questions, leave them in the comments\nbelow. I'll be sure to check them out. Otherwise,\nas always, I'll see you guys in the next video.\nHey, everyone, and welcome back to another\nvideo. We are now at the advanced section\nof this course, where we are going to discuss\nthe advanced concepts in open CV. So what\nwe're going to be doing in this video is actually\ndiscussing how to switch between color spaces\nin urgency. Our color spaces, basically a\nspace of colors, a system of representing\nan array of pixel colors. RGB is a kind of\nspace grayscale is color space. We also have\nother color spaces like HSV, lamb, and many\nmore. So let's start off with trying to convert\nthis image to grayscale. So we're going to\nconvert from a BGR image which is open CV\nis default way of reading and images. And\nwe're going to convert that to grayscale.\nSo the way we do that is by saying gray is\nequal to CV dot CBT color. We pass in the\nimage and we specify a color code, which is\nCV dot color, underscore BGR to to grip since\nwe're converting from a BGR image format to\ngrayscale format, and we can display this\nimage I st gray and passing in grip. Let's\nsave that and run Python spaces dot p y. We\nhad a problem as a comma, Save and Run. And\nthis is the grayscale version of this BGR\nimage. Cool pretty cool. grayscale images\nbasically show you the distribution of pixel\nintensities at particular locations of your\nimage. So let's start off with trying to convert\nthis image to an HSV format. So from Jeff\nfrom vgr to HSV. HSV is also called hue saturation\nvalue and is kind of based on how humans think\nand conceive of color. So the way we conduct\nthat is by saying HSV is equal to CV dot CBT\ncolor, we pass in the IMG variable. And we\nspecify a color code, which is CV dot color,\nundergo BGR to HSV. And we can display the\nsyringe called as HSV and pass in HSV. Let's\nsave that. And this is the HSE version of\nthis BGR image. As you can see that there\nwas a lot of green in this era and the skies\nare reddish. Now we also have another kind\nof color space. And that is called the LA\nbe color space. So we're going to convert\nfrom BGR to L A, B. This is sometimes represented\nas L times A times B, but but v free to use\nwhatever you want. So lb is equal to CV dot\nCVT color, we pass the MG and the color on\nthe scope of BGR. to AB see that I'm sure\ncolas lamb pass and lamb is wrong that and\nthis is the LGB version of this BGR image.\nThis kind of looks like a washed down version\nof this BGR image. But hey, that's the lamb\nformat is more tuned to how humans perceive\ncolor. Now when I started off with this goes,\nI mentioned that open CV reads in images in\na BGR format that has blue, green and red.\nAnd that's not the current system that we\nuse to represent colors outside of open CV.\nOutside of open CV, we use the RGB format,\nwhich is kind of like the inverse of the BGR\nformat. Now if you try to display this IMG\nimage in a Python library that's not open\nCV, you're probably going to see an inversion\nof colors. And we can do there real quick.\nLet's try to input mat plot lib dot pie plot\nas PLT. And we can can, we can basically uncomment\ncommented that out. And we can try and display\nthis image variable. So we're gonna say PLT\ndot, I am show pass in the image. And we could\nsay a peak, or we could say PLT dot show,\nmaybe let's comment this out, save that and\nrun. And this is the image you get. Now, if\nyou compare with the image that open CV read,\nthis is completely different, these two are\ncompletely different images. And the reason\nfor this is because this image is a BGR image\nand open CV displays BGR images. But now if\nyou tried to take this BGR image and try to\ndisplay it in matplotlib, for instance, matplotlib\nhas no idea that this image is a BGR image\nand displays that image as if it were an RGB\nimage. So that's why you see an inversion\nof color. So where there's red over here,\nyou see a blue, where there's blue over here\nyou see a red, and there are ways to convert\nthis from BGR to RGB. And that is by using\nopen CV itself. So let's comment that out.\nAnd let's uncomment this all out. And right\nover here, let's say BGR to RGB. And what\nwe're going to say is our RGB is equal to\nCV dot CVT color, we can pass in the BGR image\noopsie, we can pass in the br image. And what\nwe're going to do is specify a color code,\nwhich you see without color on the scope BGR\nto RGB. And we can try to display this image\nin in open CV and see what that displays RGB.\nAnd we can also display this in matplotlib.\nSo I've passed in the RGB. And we can do PLT\ndot show, save that and go here it is you\nPython spaces dot p y. What I'm most interested\nin is this. And this. Now again, you see an\ninversion of colors, but this time in open\nCV because now you provided open CV and RGB\nimage. And it assumed it was a BGR image.\nAnd that's why there's an inversion of colors.\nBut we pass in the RGB image to matplotlib\nand matplotlib is default is RGB. So that's\nwhy I displayed the proper image. So just\nkeep this in mind when you're working with\nmultiple libraries, including open CV and\nmatplotlib for instance, because do keep in\nmind the inversion of colors that tends to\ntake place between these two libraries. So\nnow another thing that I want to do is we've\nessentially converted the BGR to grayscale,\nwe've essentially converted BGR, HSV BGR to\nRGB BGR to RGB, what we can do is we can do\nthe inverse of that, we can convert a grayscale\nimage to BGR, we can convert an HSV to BGR,\nwe can convert an LNB to BGR, and RGB to be\nGL, and so on. But here's one of the downsides.\nYou cannot convert grayscale image to HSV\ndirectly. If you wanted to do that, what do\nyou have to do is convert the grayscale to\nBGR. And then from video to HSV. So we're\ngonna do that real quick. So we're gonna say\nHSV, two BGR. Okay, so the first thing we\ndo is HSV, underscore vgr. Basically, converting\nfrom HSV to BGR is equal to CV dot CVT color,\nthis will take in the HSV image. And the color\ncode will be color on Cisco HSV, two BGR.\nAnd we can display this image, let's call\nthis HSV, two BGR and pass in HD on the scope\nBGR. On screw VR, save that and run. Okay,\nwe're not interested in this. So let's close\nthis out. But essentially, this is the HSV,\ntwo BGR image. If this was the HV image, we\nconverted this image to BGR. And we can try\nthis with lamb. So let's call this lamb to\nlamb, and of course, lamb. And let's copy\nthis and paste that. We can get rid of Mapplethorpe's\nit's been addressed in an email. So go out\nand run. Okay, that was a mistake. We said\nHSV, lamb to L baby to BGR. That was my mistake.\nCool. So if this was the lamb version, this\nis the lamb to BGR version back from BGR to\nlamb and from lamb to BGR. So that's pretty\nmuch it. For this video, we discussed how\nto convert, we discussed how to convert between\ncolor spaces from BGR to grayscale, HSV, LGB,\nand RGB. And if you want to convert from grayscale\nto nav, for instance, note that there is no\ndirect method, what you could do is convert\nthat grayscale to BGR. And then from BGR to\nand maybe that's possible. By directly. I\ndon't think there was a way to do that, if\nopen CV could come up with the feature like\nthat, it would be good, but it's not gonna\nhurt you to write extra lines of code, at\nleast two or three lines of code extra, moderately\nhard. In the next video, we will be talking\nabout how to split and merge color channels\nin open CV. If you have any questions, leave\nthem in the comments below. Otherwise, I'll\nsee you guys in the next video. Everyone and\nwelcome back to another video. In this video,\nwe're going to be talking about how to split\nand merge color channels in open CV. Now,\na color image basically consists of multiple\nchannels, red, green, and blue. All the images\nyou see around you all the BGR or the RGB\nimages are basically these three color channels\nmerged together. Now open CV allows you to\nsplit an image into its respective color channels.\nSo you can take a BGR image and split it into\nblue, green and red components. So that's\nwhat we're going to be doing in this video,\nwe're going to be taking this image of the\npark that we had seen in previous videos,\nand we're going to split that into its three\ncolor channels. So the way we do that is by\nsaying b comma g comma r, which stands for\nthe respective color channels, and set this\nequal to CV dot split split of the image.\nSo the CV dot split basically split the image\ninto blue, green and red. And we can display\nthis image by saying CV dot I'm sure, let's\ncall this blue and pass in blue. And let's\ndo the same for green image and pass in G\nand we can do the same for the red part two\nare and we can actually visualize the shape\nthe shapes of these images. So let's first\nprint the image node shape, and then print\nthe bead on shape. And then print the genome\nshape and then print the our dot shape. Basically,\nwe're printing the shapes and dimensions of\nthe image and the blue, green and red and\nwe're also displaying these images. So let's\nrun Python split merge dot p Why. And these\nare the images that you get back. This is\nthe blues, the blue image, this is the green\nimage. And this is the red image. Now these\nare depicted and displayed as grayscale images\nthat show the distribution of pixel intensities.\nregions where it's lighter showed that there\nis a far more concentration of those pixel\nvalues and regions where it's darker, represented\na little or even no pixels in that region.\nSo take a look at the blue pick the blue channel\nfirst. And if you can, if you compared with\nthe original image, you will see that the\nsky is kind of almost white, this basically\nshows you that there is a high concentration\nof blue in the sky, and not so much in the\nthe trees or the grass, let's take a look\nat the green. And there is a fairly even distribution\nof pixel intensities between the between the\ngrass, the trees, and some parts of the sky.\nAnd take a look at the red color channel.\nAnd you can see that parts of the trees that\nare red are whiter and the grass in the sky\nare not that white in this red image. So this\nmeans that there is not much red color in\nthose regions. Now coming back, let's take\na look at the shapes of the image. Now this\nstands for the original image, the BGR image,\nthe additional elements in the tuple here\nrepresents the number of color channels, three\nrepresents three color channels blue, green,\nand red. Now if we proceeded to display the\nshapes of BG and our components, we don't\nsee a three in the tuple. That's because the\nshape of that component is one. It's not mentioned\nhere, but it is one. That's why when you try\nto display this image using see even if I'm\nshow it displays it as a grayscale image,\nbecause grayscale images have a shape of one.\nNow, let's try and merge these color channels\ntogether. So the way we do that is by seeing\nthe merge image, merged images equal to CV\ndot merge. And what we do is we pass in a\nlist of blue of blue comma g comma r, I'd\nsave that in let's display that things either\non show call this them call this the merged\nimage. And we can pass in merged. So let's\nsave that and run. And we get back the merged\nimage by basically merging the three individual\ncolor channels red, green, and blue. Now there\nis a way an additional way of looking at the\nactual color there is in that channel. So\ninstead of showing you grayscale images, it\nshows you the actual color involved. So for\nthe blue image, you get the blue color channel\nfor the red channel, you get the red color\nfor that channel. And the way we do that is\nwe actually have to reconstruct the image.\nThe shapes of these images are basically grayscale\nimages. But what we can do is we can actually\ncreate a blank image, a blank image using\nNumPy. And essentially, what we're going to\ndo is we're going to say blank is equal to\nNP dot zeroes. And we're going to set this\nto the shape of the image, but only the first\ntwo values. And we can give it a data type\nof you iemt, eight, eight, which basically\nare for images. And to print the blue color\nchannel, what we're going to do is we're going\nto say, down here, we're going to say blue\nis equal to CV dot image, we're going to pass\nin the list of b comma, blank comma blink.\nAnd we're going to do the same thing for green\nand set is equal to CV dot merge of blank\ncomma g comma blank. And we're going to do\nthe same thing for red by setting this equal\nto CV dot merge of blank comma blink, comma,\ncomma red. Basically, what I've done is this\nblank image basically consists of the height\nand the width, not necessarily number of color\nchannels in the image. So by essentially merging\nthe blue image in its respective compartment,\nso blue, green and red, we are setting the\ngreen and the red components to black and\nonly displaying the blue channel. And we're\ndoing the same thing for the green by setting\nthe blue and the red components to black.\nAnd the same thing for red by setting the\nblue and the green components to black. And\nwe can display this by saying blue, green,\nand red. Let's save that and run and now you\nactually get the color in its respective color\nchannels. Take a look at this, you now be\nable to visualize the distribution much better.\nHere you can see lineup later portions represent\na high distribution. Lighter portions here\nrepresent the high distribution of red and\nhigher and wider regions represent a high\ndistribution of green. So essentially, if\nyou take these three images of these color\ntowns and merging them together, you essentially\nget back the merged image. That's the merged\nimage. So that's pretty much it. For this\nvideo, we discuss how to split an image into\nthree respective color channels, how to reconstruct\nthe image to display the actual color involved\nin that channel, and how to merge those color\nchannels back into its original image. In\nthe next video, we'll be talking about how\nto smooth and blur an image using various\nblurring techniques. If you have any questions,\nleave them in the comments below. Otherwise,\nI'll see you guys in the next video. Hey,\neveryone, and welcome back to another video.\nIn this video, we're gonna address the concepts\nof smoothing and blurring in urban CV. Now,\nbefore I mentioned that we generally smooth\nand image when it tends to have a lot of noise,\nand noise that's caused from camera sensors\nare basically problems in lighting when the\nimage was taken. And we can essentially smooth\nout the image or reduce some of the noise\nby applying some blurring method. Now Previously,\nwe discussed the Gaussian Blur method, which\nis kind of one of the most popular methods\nin blurring. But generally, you're going to\nsee that Gaussian Blur won't really suit some\nof your purposes. And that's why there are\nmany blurring techniques that we have. And\nthat's what we're going to address in this\nvideo. Now, before we actually do that, I\ndo want to address a couple of concepts. Well,\nlet's actually go to an image and discuss\nwhat exactly goes on when you try to apply\nblur. So essentially, the first thing that\nwe need to define is something called a kernel\nor window. And that is essentially this window\nthat you draw over an image that has two lines\nhere. Let's draw another line. So this is\nessentially a window that you draw over a\nspecific portion of an image. And something\nhappens on the pixels in this window. Let's\nchange it to blue. Yeah. So essentially, this\nwindow has a size, this size is called a kernel\nsize. Now kernel size is basically the number\nof rows and the number of columns. So over\nhere, we have three columns and three rows.\nSo the kernel size for this is three by three.\nNow, essentially, what happens here is that\nwe have multiple methods to apply some blue.\nSo essentially, blur is applied to the middle\npixel as a result of the pixels around it,\nalso called the surrounding pixels. Let's\nchange that to a different color. So something\nhappens here as a result of the pixels around\nthe surrounding pixels. So with that in mind,\nlet's go back and discuss the first method\nof blurring which is averaging. So essentially,\naveraging is we define a kernel window over\na specific portion of an image, this window\nwill essentially compute the pixel intensity\nof the middle pixel of the true center as\nthe average of the surrounding pixel intensities.\nSo if this was to green, suppose if this pixel\nintensity was one, this was maybe two, this\nis 345678, you get the point. Essentially,\nthe new pixel intensity for this region will\nbe the average of all the surrounding pixel\nintensity. So that's summing up one plus two\nplus three plus four plus five plus six plus\nseven plus eight, and dividing that by eight,\nwhich is essentially the number of surrounding\npixels. And we essentially use that result\nas the pixel intensity for the middle value,\nor the true center. And this process happens\nthroughout the image. So this window basically\nslides to the right. And once that's done,\nit slides down, and computed basically for\nall the pixels in the image. So let's try\nto apply and see what this does. So what we're\ngoing to do is we're going to say average,\nis equal to CV don't blur. The CV or blow\nmethod is a method in which we can apply averaging\nblur. So we define the source image which\nis IMG, we give it a kernel size of let's\nsay three by three. And that's it. We can\ndisplay this image called as average, average\nblur. Save that and run Python smoothing dot\np y net Gosh, we have to pass an average,\nsave that and run. And this is basically the\naverage blow that's applied. So what the algorithm\ndid in the background was essentially define\na candle window of a specified size three\nby three. And it computed the center value\nfor a pixel using the average of all the surrounding\npixel intensities. And the result of that\nis we get a blurred image. So the higher kernel\nsize we specified, the more blur there is\ngoing to be in the image. So let's increase\nthat to seven by seven and see what that does.\nAnd we get an image with way more blur. So\nlet's move on to the next method, which is\nthe Gaussian Blur. So Gaussian basically does\nthe same thing as averaging, except that instead\nof computing the average of all of this running\npixel intensity, each running pixel is given\na particular weight. And essentially, the\naverage of the products of those weights gives\nyou the value for the true center. Now using\nthis method, you tend to get less blurring\nthan compared to the averaging method. But\nthe Gaussian Blur is more natural as compared\nto averaging. So let's print that out. Let's\ncall this Yes. And set this equal to CV dot\nGaussian Blur. And this will take in the source\nimage, so IMG kernel size of seven by seven,\njust to compare with the averaging. And another\nparameter that we need to specify is sigma\nx, or basically the standard deviation in\nthe x direction, which for now, just going\nto set as zero. And we can put that out, call\nthis Gaussian Blur and pass in gaps, save\nthat and run. If you can bear with this, you\nsee that both of them use the same code size,\nbut this is less blurred as compared to the\naverage method. And the reason for this is\nbecause a certain weight value was added when\ncomputing the blur. Okay, so let's move on\nto the next method. And that is median blur.\nSo let's go back to our image. And medium\nblurring is basically the same thing as averaging,\nexcept that instead of finding the average\nof the surrounding pixels, it finds the median\nof the surrounding pixels. Generally, medium\nblurring tends to be more effective in reducing\nnoise in an image as compared to averaging\nand even Gaussian Blur. And it's pretty good\nat removing some salt and pepper noise that\nmay exist in the image. In general, people\ntend to use this image in advanced computer\nvision projects that tend to depend on the\nreduction of substantial amount of noise.\nSo let's go back here. And the way we apply\nthe blur is by saying, let's call this median\nand set the Z and set this equal to CV dot\nmedian, blue, we pass in the source image,\nand this kernel size will not be a tuple of\nthree by three, but instead, just an integer\nto three. And the reason for this is because\nopen CV automatically assumes that this kernel\nsize will be a three by three, just based\noff this integer. And we can print this out.\nLet's call this median, blue, and pass in\nmedian. And let's compare it with that. So\nI set that to seven. And comparing it with\nGaussian Blur, and averaging blur, you tend\nto look at this. And you can make up some\ndifferences between the two images. So it's\nlike as if this was your painting, and it\nwas still drawing. And you take something\nand smudge over the image and you get something\nlike this. Now generally, medium blurring\nis not meant for high Colonel sizes like seven\nor even five in some cases, and it's more\neffective in reducing some of the noise in\nthe image. So let's, let's change this all\nto three by three. Let's copy that, change\nthat to three by three. And we can change\nthat to three. And now let's have a comparison\nbetween the three. This is your Gaussian below.\nThis is your average in blue, this is your\nmedian love. So compared with these two, you\ncan see that there is kind of less blurring\nwhen Gaussian when you can sort of make out\nthe differences between the two Very subtle,\nbut there are a couple of differences between\nthe two. Finally, the last method we're going\nto discuss is bilateral blurring caused by\nnatural lateral. Now bilateral bearing is\nthe most effective, and sometimes used in\na lot of advanced computer vision projects,\nessentially because of how it blurs. Now traditional\nblurring methods basically blur the image\nwithout looking at whether you're, whether\nyou're reducing edges in the image or not.\nbilateral blurring applies blurring but retains\nthe edges in the image. So you have a blurred\nimage, but you get to retain the edges as\nwell. So let's call this bilateral and multilateral\nand set this equal to CV dot bilateral filter.\nAnd we pass in the image, we give it a diameter\nof the pixel neighborhood. Now notice this\nisn't a kernel size, but in fact, a diameter.\nSo let's set this to five for now, give it\na sigma color, which is basically the color\nsigma sigma color, a larger value for this\ncolor sigma means that there are more colors\nin the neighborhood, that will be considered\nwhen the blue is computed. So let's set this\nto 15. For now. And sigma space is basically\nyour space sigma. larger values of this space,\nsigma means that pixels further out from the\ncentral pixel will influence the blurring\ncalculation. So let's set this to 50. So let's\ntake a look at that sigma spacing. So for\nexample, in bilateral filtering, if this is\nthe value for this central pixel, or the true\ncenter is being computed, by giving a larger\nvalues for the Sigma space, you essentially\nare indicating that whether you want pixels\nfrom this far away, or maybe this far away,\nor even this far away from influencing this\nparticular calculation. So if you give like\na really huge numbers, then probably a pixel\nin this region might influence the computation\nof this pixel value. So let's set this to\n15. For now, and let's display this image.\nSo call the cv.on show is called as bilateral\nand pass on bilateral. Let's save that and\nrun. And this is your bilateral image. So\nlet's compare with all the previous ones that\nwe had. Compared with this. Much better compared\nwith averaging way much better. Let's compare\nwith median. The edges are slightly, it's\nslightly blurred. If you compare with the\noriginal image, they kind of look the same\nthing. Okay, it kind of looks like there's\nno blur applied. So maybe let's increase this\ndiameter to I know 10. And not much was done,\nthe edges are still there, it kind of looks\nlike the original image itself. So let's try\ninto one of the other parameters. Let's add\nthis to 3435. Let's set this dude 25. We're\nonly playing around with these with these\nvalues. And now you can basically make our\ngeneric that this is starting to look a lot\nlike median blow. We need even larger values.\nIt's starting to show you that this is more\nlooking like a smudged painting version of\nthis image, right, there's a lot of blur applied\nhere, but the council looking smudged. So\ndefinitely keep that in mind when you are\ntrying to apply blurring the image, especially\nwith the bilateral and median lowering, because\nhigher values of this basic mouth or bilateral\nor the kernel size for medium glowing, and\nyou tend to end up with a washed up smudged\nversion of this image. So definitely keep\nthat in mind. But that kind of summarizes\nwhatever we we've done in this video, we discussed\naveraging, Gaussian, median and bilateral\nblurring. So in the next video, we'll be talking\nabout bitwise operators in open CV. So again,\nlike always, if you have any questions, leave\nthem in the comments below. Otherwise, I'll\nsee you guys in the next video. Hey everyone,\nand welcome back to another video. In this\nvideo we're gonna be talking about bitwise\noperators in urban CV. Now, there are four\nbasic bitwise operators and or XOR and not.\nIf you've ever taken an introductory CS course,\nyou will probably find these terms familiar\nbitwise operators, and they are in fact used\na lot in image processing, especially when\nwe're working with masks like we'll do in\nthe next video. So at a very high level bitwise\noperators operate in a binary manner. So a\npixel is turned off if it has a value of zero,\nand is turned on if it has a value of one.\nSo let's actually go ahead and try to import\nNumPy as NP. And what I'm going to do is I'm\ngoing to create a blank variable and set this\nequal to NP dot zeros of size 400 by 400.\nAnd we can give it a datatype of you I empty\nit is what I'm going to do is I'm going to\nuse this blank variable as a basis to draw\na rectangle and draw a circle. So I'm going\nto say return angle is equal to CV dot rectangle,\nwe can say blink dot copy. And we can pass\nin the starting point. So let's give it a\nmargin of around 30 pixels on either side.\nSo we're going to start from 30, comma 30.\nAnd we can go all the way across to 370370.\nAnd we can give it a color. Since this is\nnot a color image, but rather binary image,\nwe can just give it one parameter, so 255.\nWhite, and give it a thickness of negative\none, because we want to fill this image. And\nthen I'm going to create another circle variable\nand set this equal to CV dot circle, we're\ngoing to say blank, don't copy, we are going\nto give it a center. So the center will be\nthe absolute center, so 200 by 200. And let's\ngive it a radius of give a radius of 200.\nAnd give it a color up to five, five, and\nlet's fill in the circle. So negative one.\nSo let's display this image and see what we've\nseen or we're working with. So we'll call\nthis rectangle and passing the rectangle.\nAnd we're going to do the same thing with\nthe circle, it's called a circle. And pass\nin the circle, save that and run Python bitwise\nr p y. So we have two images that we're going\nto work with this image of rectangle, and\nthis image of a circle. So let's start off\nwith the first basic bitwise operator, and\nthat is bitwise. And so before we actually\ndiscuss what bitwise ad really is, let me\nshow you what it does. So essentially, what\nI'm going to do is I want to say bitwise is\ngo and is equal to CV dot bitwise. And, and\nbasically what I have to do is pass in two\nsource images that are these two images, rectangle,\nand circle. Now we can display this image,\nlet's call this beautiful lines, and let's\npass in bitcoins and save, run. And essentially,\nyou get back this image. So essentially, what\nbitwise AND did was it took these two images,\nplaced them on top of each other, and basically\nreturned the intersection. Right, and you\ncan make out when you take this image, put\nit over this image, you have some triangles\nthat are common to both of these images. And\nso those are set to black zero, while the\ncommon regions are returned. So the next one\nis basically bitwise. Or now bitwise, or real\nsimply returns both the intersecting as well\nas the non intersecting regions. So let's\ntry this bitwise OR is equal to CB dot bitwise\nAND scope or you pass in rectangle, we pass\nin circle. Now we can print that, let's call\nthis bitwise OR pass in bitwise. Oops, that\nwas or save that and run and bitwise OR, okay,\nthere's a bitwise OR, by mistake. It's a bitwise\nOR basically return this funky looking this\nfunky looking shape. Essentially what it did\nis it took these two images, put them over\neach other from the common regions and also\nfound regions that are not common to both\nof these images and basically superimpose\nthem. So, basically, you can just put them\ntogether and find the resulting shape and\nthis is what you get, but this image over\nthis and you get this moving on. The next\none is bitwise XOR, which basically is good\nfor returning the non intersecting regions.\nSo this found the the intersecting oops, the\ninter setting regions this found the sky Brought\nback, the no one intersecting in interest\nselecting regions, and xR only finds the non\nintersecting regions. So let's do that I say\nbitwise call this XOR is equal to CV dot bitwise\nunderscore xR, we pass in the rectangle, passing\nthe rectangle when we pass in the circle,\nwe can display this CV and I'm sure close\nbitwise XOR. And we can pass in bitwise XOR.\nSave that and run. And here we have the non\nintersecting regions of these two images when\nyou put them over each other. Pretty cool.\nAnd just to recap, this bitwise AND AGAIN,\nreturns the intersection regions bitwise,\nor returns the knowledge second regions as\nwell as the intersecting regions bitwise XOR,\nreturns the knowledge second regions. So essentially,\nif you take this bitwise XOR, and subtract\nit from bitwise, or you get bitwise end. And\nconversely, if you subtract bitwise, and from\nthe device, or you get bitwise XOR. Just so\nessentially, that's a good way of visualizing\nwhat exactly happens with these bitcoins operators.\nAnd finally, the last method we can discuss\nis bitwise. Not essentially, it doesn't return\nanything. What it does is it inverts the binary\ncolor. So let's do that. So let's call this\nbitwise. Not is equal to CV dot bitwise. underscore\nnot. And this only takes in one source image.\nSo let's set this to the rectangle put out.\nAnd we can display this. Let's call this rec\ntangle not, we can pass in bitwise not see\nthat. And basically what it did is if you\nlook at this image, it found all the white\nregions, all the white pixels in the image\nand inverted them to black and all the black\nimages it inverted to white, essentially,\nit converted the white to black and from the\nads from black to white. So we can try that\nwith the circle. Let's call this circle, we\ncan pass in the circle here. Save and Run\nand the resultant the resulting circle, not\nthat you get is this. This is white hole.\nThis is a black hole for physicists out there.\nOkay, so that's pretty much it. For this video,\nI just wanted to introduce you all to the\nidea of bitwise operations and how it works.\nIn the next video, we'll be actually talking\nabout how to use these bitwise operations\nin a concept called masking. So if you have\nany questions, leave them in the comments\nbelow. Otherwise, I'll see you guys in the\nnext video. Hey, everyone, and welcome back.\nIn this video, we're going to be talking about\nmasking in open CV. Now in the previous video,\nwe discussed bitwise operations. And using\nthose bitwise operations, we can essentially\nperform masking in open CV masking essentially\nallows us to focus on certain parts of an\nimage that we'd like to focus on. So for example,\nif you have an image of people in it, and\nif you're interested in focusing on the faces\nof those people, you could essentially apply\nmasking and essentially mask over the people's\nfaces and remove all the unwanted parts of\nthe image. So that's basically our high level\nintuition behind this. So let's actually see\nhow this works in open CV. So I basically\nread in a file and display that image. The\nother thing I'm going to do is I'm going to\nimport NumPy NumPy as NP, what I'm going to\ndo is I'm going to say blank is equal to NP\ndot zeros of size of size image dot shape\nwith the first two values. Now this is extremely\nimportant, the dimensions of the mask have\nto be the same size as that of the image.\nIf it isn't, it's on good work. And we can\ngive it a data type of UI eight, you can see\nit if you want to display this, we can display\nthis. It's just going to be a black image,\nschools blank image and pawson blank. Essentially,\nwhat I'm going to do is I'm going to draw\na circle over this blank image and call that\nmy mask. So I'm going to say mask is equal\nto CV dot circle. We're going to draw the\nblank image on the blank image, we can give\nit a center of this image so let's say image\ndot shape of Have one divided by two divided\nby two, and image down shape of two image\na shape of zero divided by divided by two.\nAnd we can give it a radius of, I don't know,\nI'd say 100 pixels, give it a color of 255,\ngive it a thickness of negative one. And we\ncan visualize a mask as mask and passing mask.\nSo let's run that. Python masking dot p y.\nAnd this is essentially our mask. There's\nthe blank image we're working with. And this\nis the image that we want to mask over. So\nlet's actually create a masked image, we're\ngoing to say masked image is equal to CV dot\nbitwise. underscore and this source image.\nSo IMG, IMG, and we specify the parameter\nmask is equal to mask, which is this circle\nimage over here. And we can display this image,\ncall this masked image. And we can pass in\nmasked, save that and run. And this is essentially\nyour masked image, you took this image, you\ntook this image, you put this image over and\nfound the intersecting region. Okay, by optionally\npassing the mask is equal to mask. That's\nexactly what we're doing. Cool. That's right.\nAnd, you know, play around with this, let's\nmaybe move this by a couple of pixels around,\nlet's say 45. Save and Run moves down to zero,\nokay, this has to be 45 plus 45, save up and\nrunning. And we get the image of the cat,\nwe can draw, we can draw a circle, or we can\ndraw a rectangle instead. What's bottom blank,\nskip that. Let's give you that in draw, give\nit a static endpoint of let's copy this and\nadd a couple of pixels or maybe 100 pixels\nthis way, in 100 pixels. This way, we can\nget rid of this, we don't need that and say\nthat, right? This is this, this is the square.\nAnd this is essentially the masked image.\nSo let's actually try this with. So let's\nactually try this with a different image.\nSo we have got an image. Let's try it with\nmaybe these cats too. Let's go back to cats\nto save that run. And this is the mask that\nwe get by putting these two on each other.\nAnd essentially, you can play around with\nthese as you feel fit. You can maybe try different\nshapes, weird shapes. And the way you can\ndo get these weird shapes, essentially creating\na circle or rectangle and applying bid wise\nand you get this weird shape. And then you\ncan use that weird shape as your mask. So\nlet's just try that. Let's let's try that.\nOh, we're going to say let's, let's call this\ncircle and blanked out copy copy and create\na rectangle. Let's just grab it from this\nre read Where are we from bitvise Let's grab\nthis rectangle copy that piece over time the\ncopy 3030 Okay, blank, same shape. So let's\ncreate this weird weird shape is equal to\nCV dot bitcoins on the scope end of this circle\nthis rectangle and we don't need to specify\nanything else. um what's one of visualizes\nlet's close this out try to see see it on\non show call this the weird shape passing\nthe weird shape and wrong. masking undefined\nwas mask westmar Mosque Okay. Good. This is\nthe weird shape that we get. We're not really\ngoing for a half moon But hey, whatever. Let's\nclose this out. Use this weird shape is mask.\nSo use weird shape as a mask and let's see\nthe final mask image and this is essentially\nyour weird weird shape, masked image. Let's\ncall this a weird shape mask image, weird\nshaped mask damage. This little halfmoon here.\nAnd essentially you can, you can do pretty\nmuch anything you want with this, you can\nexperiment with various shapes and sizes and\nstuff like that. But just know that the size\nof your mask has to be at the same dimensions\nas that of your image. If you want to see\nwhy not maybe subtract 100 pixels possible,\nbut let's support it, though. So that's maybe\nlike subtract tubal on it. I don't know whether\nthat'll work. But guess what? Okay, so let's\njust say, image on shape of while I'm okay,\nlet's just give it a different size. What\nare we? Why are we even using image, let's\ngo this size of 300 by 300. Definitely not\nthe size of this. And we get this assertion\nfailed m time, blah, blah, blah, maskhadov,\nsame size, in function, whatever. So essentially,\nthese need to be at the same size, otherwise,\nit's going to fail and throw you an error.\nSo that's it for this video, we talked about\nmasking, again, nothing to do different. We've\nessentially used the concept of bitcoins and\nfrom the previous video, and you will see\nthat when we move on to computing histograms\nin the next video, where masking really comes\ninto play, and how masking really affects\nyour histograms. So if you have any questions\nagain, leave them in the comments below. Otherwise,\nI'll see you in the next video. Hey, everyone,\nand welcome back to another video. In this\nvideo, we're going to be talking about computing\nhistograms in open CV. Now histograms basically\nallow you to visualize the distribution of\npixel intensities in an image. So whether\nit's a color image, or whether it's a grayscale\nimage, you can visualize these pixel intensity\ndistributions with the help of a histogram,\nwhich is kind of like a graph or a plot that\nwill give you a high level intuition of the\npixel distribution in the image. So we can\ncompute a histogram for grayscale images and\ncompute a histogram for RGB images. So we're\ngonna start off with computing histograms\nfor grayscale images. And so let's just convert\nthis image to grayscale is activity don't\nCVD color, pass the image and give it a color\ncode of of color underscore BGR. To gray,\nit means read this image with gray and passing\nGreat. Now to actually compute the grayscale\nhistogram. What we need to do is essentially\ncall this gray underscore hist and set this\nequal to CV dot calc hist. This method will\nessentially compute the histogram for the\nthe image that we pass into. Now this images\nis a list, so we need to pass in a list of\nimages. Now since we're only interested in\ncomputing a histogram for one image, let's\njust pass in the the grayscale image, there\nthing we have to pass in is the number of\nchannels which basically specify the index\nof the channel we want to compute a histogram\nfor that since we are computing the histogram\nfor a grayscale image, let's wrap this as\na list and pass in zero. The next thing we\nhave to do is provide a mask do we want to\ncompute a histogram for a specific portion\nof an image, we will get to this later. But\nfor now just have this to num. His size is\nbasically the number of bins that we want\nto use for computing the histogram. Essentially,\nwhen we plot a histogram, I'll talk about\nthis concept of bins. But essentially, for\nnow, just set this to 256 wrapped as a list.\nAnd that's wrapped out as list. And the next\nthing I want to do is specify the range of\nthe range of all possible pixel values. Now\nfor our case, this will be 02256. And that's\nit. So to prop this image, let's actually\nuse matplotlib. So import map plot matplotlib.pi\nplot as PLT, and then we can instantiate of\nPLT dot figure, a PLC figure. Let's give it\na tidy, let's call this gray kale histogram.\nWe can essentially give it a label across\nthe x axis and we're going to call this bins.\nLet's give this a y label and set this equal\nto the number of pixels. The number Have pixels.\nAnd that's why label. And finally, we can\nplot by saying PLT dot plot the, the grayscale\nhistogram. And Valley, we can essentially\ngive it a limit across the x axis. So PLT\ndot x Lim have a list of 02256. And finally,\nwe can display this image. So PLT dot show,\nsave that and run Python histogram, dot p\ny. And this is the distribution of pixels\nin this image. As you can see, the number\nof bins across the x axis basically represent\nthe the intervals of pixel intensities. So\nas you can see that there is a peak at this\nregion, this means that this is close to 5060\nish. So this means that in this image, there\nare close to 4000 pixels that have an intensity\nof 60. And as you can see that there's a lot\nof, there's a lot of peeking in this region,\nso between probably 40 to 70, there is a peak\nof pixel intensities of close to 3000 pixel\nintensities in this image. So let's try this\nwith a different image. Let's try this with\na cants. I'm just going to save that and run.\nAnd there is a peaking of pixel values in\nbetween 202 25. And this makes sense because\nmost of the image is white. So given that\nreason, you can probably deduce that there\nwill be a peak into words white or 255. Five.\nSo this is essentially computing the grayscale\nhistogram for the entire image, what we can\ndo is we can essentially create a mask, and\nthen compute the histogram only on that particular\nmask. So let's do that. Let's go back to masking.\nLet's grab this, grab this. Let's go right\nup there. I set this to image dot shape of\nthe first two values the sizes of the same.\nLet's essentially draw a mask, which will\nbe CV dot circle of all blank. And we can\nget the center of image into a shape of one\nby by divided by two, image doing shape of\nzero divided by two over two, give it a radius\nof 100 pixels, give it a color of 245 give\nit a thickness of negative one, we can display\na mask let's call this let's call as mask\npolicy mask. And here's where things get interesting.\nWe can get the grayscale histogram for this\nmask. And the way we do that is by setting\nthis mask parameter to mask two instead of\nnone. We set this to mask and let's see what\nthat does to our histogram MPs and undefined\ngreat. And I couldn't make this kind of made\na mistake here. Oh, that's right. This is\nthe Masters not exactly the Masters is circle.\nThis is a this will be a circle circle. And\nessentially we need to mask out the image\nso we so the way we do that is by creating\na mask and setting this equal to CV dot Bitcoins.\nbitwise unscored, and we can pass in the grayscale\nimage the grayscale image, and we can pass\nin the mask which is equal to circle. Now\nwe can use that as the mask. So let's display\nthat x Sorry, I made a mistake, but hopefully\nthings should be fine right now. So this is\nthe mask and this is the histogram computed\nfor this particular mask. As you can see that\nthere is a peaking of pixel intensity values\nin this region. And there are smaller pickings\nin in these regions down below. Let's try\nthis with another image. Let's pass in the\ncats cats to the cats though jpg. This is\nour mask and this is the there is a peaking\nin this image towards 50. Okay, so that was\nit for computing grayscale histograms. Let's\nmove on to true To compute a color histogram,\nthat is to compute a histogram for a color\nimage to an RGB image. So let's call this\ncolor histogram. And the way we do that is,\ninstead of converting this image to grayscale,\nlet's comment all of this out. We will use\na mask later. That's come in all of this out.\nThere is mask will be for IMG, IMG. And yeah,\nthat's pretty much it. So let's start with\nthe color histogram. The way we do that is\nlet's define a tuple of colors, and set this\nequal to b, then tuple of G, a tuple element\nof R. And what I'm going to do next is I'm\ngoing to say for our common call in enumerate\nof colors. What I'm going to do is I'm going\nto say hist. So I'm going to plot the histogram\nby saying CV dot calc hist, we're going to\ncompute it over the image itself, the channels\nwill be I mean, this eye over here, we're\ngoing to provide a mask of none for now. Give\nit a his size of 256 and give it a ranges\nof 02256. And then let's do a PLT dot plot\nhist and give it a color equal to call. And\nonly we can do a PLT dot x Lim of 02202256.\nAnd for this purpose, we can essentially grab\nthis, copy that uncomment this out. And we\ncan do a PLT dot show. So this should work.\nWe're missing something Oh, no, don't think\nof him. We're not, we're not computing this\nhistogram for a mask, or we live there next.\nBut let's save that run. Oh, cool. And let's\nclose enough, I made a mistake, this is a\ncolor histogram shouldn't make much of a difference.\nSo this is the color histogram that we get\nfor the original image not for a mask. But\nin fact, this image. So as you can see that\nthis color image basically computed the plot\nfor blue channel, the red channel and the\ngreen channel as well. So using this, you\ncan basically make out that there is a peaking\nof blue pixels that have a pixel intensities\nof 30. There's a peaking of red, probably\naround 50, peaking of green, probably around\n8075 to 80. Cool and using this, you can basically\nmake up the distribution of pixel intensities\nof all three color channels. So let's try\nand apply a mask by setting this equal to\nmask. Let's see whether we have everything\nin order. It's a bit more than mass mass,\nmass mass mass masks. Masks are not the same\nsize, okay, I finally got the error. So basically,\nthe mass needs to be a binary format. So instead\nof passing in this mask, this will actually\nbe the masked marks image, Regan passes me\nfat mask, and we can change the circle to\nmask. Now this should work without any arrows.\nAnd we can change that to masked. Yeah, that's\naround that. And now we get the color histogram\nfor this particular mask, I made a mistake\nbecause I use this as my mask to compute the\nhistogram for one channel. The problem was\nthis masked image was actually a three channels\nand I attempted to use this s3 channeled mask\nto calculate the histogram per channel, which\nisn't allowed in open CV. So that was my mistake.\nWhat kind of use the wrong variable names\nso confused, but essentially, this is it,\nyou're computing the histogram for a particular\nsection of this image. And this is what you\nget there is a high peaking of red in this\narea, high peaking of blue in this era, and\nhigh peaking of greens I'm over here. So essentially,\nthat's it for this video. histograms actually\nallow you to analyze the distribution of pixel\nintensities, whether for a grayscale image\nor for a colored image. Now these are really\nhelpful in a lot of advanced computer vision\nprojects. When you actually trying to analyze\nthe image that you get, and maybe try to equalize\nthe image so that there's no peeking of pixel\nvalues here and there. In the next video,\nwe'll be talking about how to thresh hold\nan image and the different types of thresholding.\nAs always, if you have any questions, leave\nthem in the comments below. Otherwise, I'll\nsee you guys in the next video. Hey, everyone,\nand welcome back to another video. In this\nvideo, we're going to be talking about thresholding\nin open CV. Now, thresholding is a binary\nrealisation of an image. In general, we want\nto take an image and convert it to a binary\nimage that is an image where pixels are either\nzero or black, or 255, or white. Now, a very\nsimple example of thresholding would be to\ntake an image and take some particular value\nthat we're going to call the thresholding\nvalue. And compare each pixel of the image\nto this threshold of value. If that pixel\nintensity is less than the threshold value,\nwe set that pixel intensity to zero. And,\nand if it is above this threshold value, we\nset it to 255, or white. So in this sense,\nwe can essentially create a binary image just\nfrom a regular standalone image. So in this\nvideo, we're actually going to talk about\ntwo different types of thresholding, simple\nthresholding and adaptive thresholding. So\nlet's start off with simple thresholding.\nSo in essence, what I want to do is, before\nI talk about simple thresholding, is I want\nto convert this BGR image to grayscale. So\nI'm going to say gray is equal to CV dot CVT\ncolor, we pass in the image, we pass in the\ncolor code, which is vgr. To correct, we can\ndisplay this image called this gray, we can\npass in great. Cool. So let's start off with\nthe simple thresholding. So essentially to\nto apply this this idea of simple thresholding,\nwe essentially use the CV dot threshold function.\nNow this function returns a threshold, and\nThresh, which is equal to CV dot threshold.\nAnd this in essence takes in the grayscale\nimage, the grayscale image has to be passed\nin to this thresholding function, then what\nwe do is we pass in a threshold value. So\nlet's set this to 150 for now, and we have\nto specify something called a maximum value.\nSo if that pixel value is greater than is\ngreater than 150, what do you want to set\nit to, in this case, we want to binarize the\nimage. So we set it to 245. And finally, we\ncan specify a thresholding type. Now this\nthresholding type is essentially CV dot thrush\nunderscore binary. And what this does is basically\nit looks at the image compares each pixel\nvalue to this threshold value. And if it is\nabove this value, it sets it to 255. Otherwise,\nit infers that if it falls below, it sets\nit to zero. So essentially returns two things\ntrash, which is the thresholded image or the\nbinarized image and threshold, which is essentially\nthe same value that you passed 150, the same\nthreshold value you pass in, will be returned\nto this threshold value. So let's actually\ndisplay this image. So let's say cv.rm show,\nwe'll call this threshold. We'll call this\nsimple thresh hold dead, and we can pass in\nthrash. So let's save that and run Python\nthrash. Da p y in this is a thresholded image\nthat you get. Again, this is nothing too different\nfrom when we discussed thresholding in the\nin one of the previous videos, but this is\nessentially what you get. So let's play around\nwith these threshold values. Let's set this\nto 100. And let's see what that does. And\nas a result, both parts of the image have\nbecome white. So and of course, if you give\nit a higher value, less parts of the image\nwill be white. So let's set this to 225. And\nvery few pixels in this thresholded image\nactually have a pixel intensity of greater\nthan 225. So what we can do after this is\nessentially create an inverse thresholded\nimage. So what we could do is we could essentially\ncopy this and instead of saying Thresh, I'm\ngoing to say thrush underscore inverse, and\nI'm going to leave everything else the same.\nLet's set this to 150. And the same thing\nhere, and instead of passing in the type of\nthresholding, I'm going to say CV dot Thresh\nunderscore binary under scope inverse. And\nlet's call this thresholded inverse. And we\ncan pass in inverse. So let's save that and\nrun. And this is essentially the inverse of\nthis image, instead of setting pixel intensities\nthat are greater than 150 to 255, it sets\nwhatever values that are less than 150, to\n255. So that's essentially what you get. Right,\nall the black parts of this image will change\nto white, and all the white parts of the image\nwill change to black. Cool. So that's a simple\nthreshold. Let's move on now to adaptive threshold\ndata thresholds. Now, as you can imagine,\nwe got different images, when we provided\ndifferent threshold values. Now, kind of one\nof the downsides to this is that we have to\nmanually specify a specific threshold value.\nNow, some cases this might work, in more advanced\ncases, this will not work. So one of the things\nwe could do is we could essentially let the\ncomputer find the optimal threshold value\nby itself. And using that value that refines\nit binary rises over the image. So that's\nan essence the entire crux of adaptive thresholding.\nSo let's set up a variable called adaptive\non its growth Thresh. And set this equal to\nCV dot adaptive threshold. And inside I want\nto pass in a source image. So let's set this\nto gray, I'm going to pass in a maximum value,\nwhich is 255. Now notice there is no threshold\nvalue. adaption method basically tells machine\nwhich method to use when computing the optimal\nthreshold value. So for now, we're just going\nto set this to the mean of some neighborhood\nof pixels. So let's set this to CV dot adaptive\non the scope Thresh. And score mean underscore\nC. Next, we'll set up a threshold type. This\nis CV dot Thresh. underscore binary, which\nagain, I think do different from this from\nthe first example. And two other parameters\nthat I want to specify is the block size,\nwhich is essentially the neighborhood size\nof the kernel size, which open CV needs to\nuse to essentially compute mean to find the\noptimal threshold value. So for now, let's\nset this to 11. And finally, the last method\nwe have to specify is the c value. Now this\nc value is essentially an integer that is\nsubtracted from the mean, allowing us to essentially\nfine tune our threshold. So again, don't worry\ntoo much about this, you can set this to zero.\nBut for now, let's set this to three. And\nfinally, once that's done, we can go ahead\nand try to display this image. So let's call\nthis adaptive thresholding. And we can pass\nin adaptive cash. So let's save that and run.\nAnd this is essentially your adaptive thresholding\nmethod. So essentially, what we've done is\nwe've defined a kernel size or window that\nis drawn of this image. In our case, this\nis 11 by 11. And so what open CV does is it\nessentially computes a mean over those neighborhood\npixels, and finds the optimal threshold value\nfor that specific part. And then it slides\nover to the right, and it slides, it does\nthe same thing. And it's lines down and does\nthe same thing so that it essentially slides\nover every part of the image. So that's how\nadaptive thresholding works. If you wanted\nto fine tune this, we could change this to\na threshold, just go binary and scope inverse,\nyou're just to see what's really going on\nunder the hood. Cool. So all the white parts\nof the image will change the black and all\nblack parts of the image have changed white.\nSo let's play around with these values. Let's\nset this to probably 13 and see what that\ndoes. Okay, definitely some difference from\nthe previous hyper parameter. So let's try\nit. Let's go with let's set this to 11. And\nlet's set this to maybe one. Okay, definitely\nmore white. Let's set this to maybe five in\na row that you can play around with these\nvalues, right, the more you subtract from\nthe mean, the more accurate it is, right,\nyou can basically make out the edges now in\nthis basket. So let's maybe increase that\nto nine. And you get less white spots in the\nimage. But essentially, now you can make the\nfeatures better. Cool. So that was essentially\nadaptive thresholding, adaptive thresholding\nthat essentially can Did the optimal threshold\nvalue on the basis of the mean? Now we don't\nhave to stick with the mean, we can go with\nsomething else. So instead of mean, let's\nset this to Gaussian. So let's save that and\nsee what that does. And this is the thresholded\nimage using the Gaussian method. So the only\ndifference that Gaussian applied was essentially\nadd a weight to each pixel value, and computed\nthe mean across those pixels. So that's why\nwe were able to get a better image than when\nwe use the mean. But essentially, the adaptive\nthresholding mean works. In some cases, the\nGaussian works in other cases, there's no\nreal one size fits all. So really play around\nwith these values, see what you get. But that's\nessentially all we have to discuss. For this\nvideo, we talked about two different types\nof thresholding, simple thresholding and adaptive\nthresholding. In simple thresholding, we have\nto manually specify a threshold value. And\nin adaptive thresholding, open CV does that\nfor us using a specific block size, or current\nsize and other computing the threshold of\nvalue on the basis of the mean, or on the\nbasis of the Gaussian distribution. So in\nthe next video, the last video in the advanced\nsection of this goes, we're going to be discussing\nhow to compute gradients and edges in an image.\nSo if you have any questions, leave them in\nthe comments below. I'll be sure to check\nthem out. Otherwise, I'll see you guys in\nthe next video. Thanks for watching, everyone,\nand welcome back to another video. In this\nvideo, we're going to be talking about gradients\nand edge detection in urban CV. Now, you could\nthink of gradients as these edge like regions\nthat are present in an image. Now, they're\nnot the same thing gradients and edges are\ncompletely different things from a mathematical\npoint of view. But you can pretty much get\naway with thinking of gradients as edges from\na programming perspective only. So essentially,\nin the previous videos, we've discussed the\ncanny edge detector, which is essentially\nkind of an advanced edge detection algorithm.\nThat is essentially a multi step process.\nBut in this video, we're going to be talking\nabout two other ways to compute edges in an\nimage. And that is the lat placing and the\nSobel method. So let's start off with the\nleft place here. So the first thing I want\nto do is I want to convert this image to grayscale,\nrecalling the CVT. DVD to color color method,\nwe pass in the image, and we say CV color\non describe BGR to grip, we can display this\nimage is called as gray. And we can pass in\nevery pass. Great. So let's start with the\nLaplacian. So we're going to define a variable\ncalled lap and set this equal to CV dot lap\nlesion. And what this essentially will do\nis it will take in a source image, which is\ngreat now, and it will take in something called\na D depth or data depth. Now for now when\nwe set this to CV dot 64, F is for long with\nwhatever I do next, I'm going to say lap is\nequal to NP dot u 98. And instead I'm going\nto pass an NP dot absolute. And we can pass\nin lap. And since I'm using NumPy, I can actually\ngo ahead and import NumPy as NP and when I\ngo to display this image coil CV dot I'm sure\nmethod is called this lamp lesion. And we\ncan pass on lap lap Save and run a call this\nPython good radians dot p y invalid syntax\nCV dot Okay, it's cv.cv on score 64 F. Say\nthat. And this is essentially the law placing\nedges in the image kind of looks like an image\nthat is drawn over a chalkboard and then smudge\njust a bit. But anyway, this is the lab laser\nmethod. Let's try this with another image.\nLet's try this with this park called Boston.\nLet's call this the park. Save that in right.\nAnd this essentially looks like a pencil shading\noff this image. It's all the edges that exists\nin the image, or at least most of the edges\nin the image are essentially drawn over with\nthe pencil and then lightly submerged. So\nthat's essentially the left lacing edges you\ncould say. So again, don't worry too much\nabout why we converted this to in the UI and\nthen we computed the absolute value. But essentially\nthe Laplacian method computes the gradients\nof this image the grayscale image. Generally\nthis involves a lot of mathematics but Essentially,\nwhen you transition from black to white and\nwhite to black, that's considered a positive\nand a negative slope. Now, images itself cannot\nhave negative pixel values. So what we do\nis we essentially compute the absolute value\nof that image. So all the pixel values of\nthe image are converted to the absolute values.\nAnd then we convert that to a UI 28 to an\nimage specific datatype. So that's basically\nthe crux of what's going on right over here.\nSo let's move on to the next one. And that\nis the subtle gradient magnitude representation.\nSo essentially, the way this does is that\nSobel computes the gradients in two directions,\nthe x and y. So we're gonna say sobble x,\nwhich is the gradients that are computed along\nthe x axis, and Seth is equal to CV dot Sobel.\nAnd we can pass in the image, let's add this\nto the grayscale image, we pass in a data\ndepth, which is cv.cv on school 64 F. And\nwe can give it an x direction. So let's set\nthis to one and the y direction, we can set\nthat to zero. And let's copy this \nand call it soble. Why, and instead of one,\nzero, we can save zero comma one. And we can\nvisualize this let's print. Let's call this\nsymbol x, and we can pass in sub x. And we\ncan say it's either long show Sabo y and set\nthis to Sabo y. Call that and these are essentially\nthe gradients that are computed, this is over\nthe y axis. So you can see a lot of y horizontal\nspecific gradients and the sub x was computed\nacross the y axis. So you can see y axis specific\ngradients. Now we can essentially get the\ncombined Sobel image by essentially combining\nthese two Sobel x and Sobel why, and the way\nwe do that is we're gonna say combined on\ncombined underscore sobald and set this equal\nto CV dot bitwise. on school or, and we can\npass in Sabo x and symbol y. And we can display\nthis image, so let's call CV dot I'm show\nwe get to combined Sobel and we can pass in\nthe combined symbol. Let's run that. And this\nis essentially the combined sobble that you\nget. It isn't, let's go back here. So it essentially\ntook these two apply and CV dot bitwise OR,\nand essentially got this image. So if you\nwant to compare this with lat race in two\ncompletely different algorithms, so the results\nyou get will be completely different. Okay,\nso let's compare both of these left patient\nand the Sobel with the canny edge detector.\nSo let's go down here. Let's say Kenny is\nequal to CV, don't, Kenny. And we can pass\nin the image. So let's possible a grayscale\nimage. Let's give it to threshold values of\n150 and 175. And we're done. Let's display\nthis image. Let's call this Kenny, we can\npass in Kenny. So let's save that. And let's\nsee what that gives us. So let's compare that\nwith you. So that's essentially it. This is\nthe last place in gradient representation,\nwhich essentially returns kind of this pencil\nshading version of the image of the edges\nin the image, combined several computes the\ngradients in the X in the y direction. And\nwe can combine these two with bitwise OR,\nand Kenny is basically a more advanced algorithm\nthat actually uses Sobel in one of its stages.\nLike I mentioned, Kenny is a multi stage process,\nand one of its stages is using the symbol\nmethod to compute the gradients of the image.\nSo essentially, you see that the canny edge\ndetector is a more cleaner version of the\nedges that can be found in the image. So that's\nwhy in most cases, you're going to see the\nKenny used. But in more advanced cases, you're\nprobably going to see a Sobel use a lot. Not\nnecessarily lap racing. But so definitely.\nSo that's pretty much it for this video. And\nin fact, this video concludes the advanced\nsection of this course. Moving on to the next\nsection, we will be discussing face detection\nand face recognition in urban see, we're actually\ngoing to touch on using hard cascades To perform\nsome face detection, and face recognition,\nwe actually have two parts. Face Recognition\nwith open CV is built in face recognizer.\nAnd the second part will be actually building\nour own deep learning model to essentially\nrecognize some faces in an image. Again, like\nalways, if you have any questions, leave them\nin the comments below. Otherwise, I'll see\nyou guys in the next section. Hey, everyone,\nand welcome back to another video. We are\nnow with the last part of this Python and\nopen CV coasts, where we are going to talk\nabout face detection and face recognition\nin open CV. So what we're going to be doing\nin this video is actually discussing how to\ndetect faces in urban CV using something called\na har cascade. In the next video, we will\ntalk about how to recognize faces using open\nCV is built in face recognizer. And after\nthat, we will be implementing our own deep\nlearning model to recognize during the simpson\ncounters, we're going to create that from\nscratch and use open CV for all the pre processing\nand displaying of images and stuff like that.\nSo let's get into this video. Now, face detection\nis different from face recognition. Face Detection\nmerely detects the presence of a face in an\nimage, while face recognition involves identifying\nwhose face it is. Now, we'll talk more about\nthis later on in this course. But essentially,\nface detection is performed using classifiers.\nA classifier is essentially an algorithm that\ndecides whether a given image is positive\nor negative, whether a face is present or\nnot. Now classify needs to be trained on 1000s\nand 10s, of 1000s of images with and without\nfaces. But fortunately for us, open CV already\ncomes with a lot of pre trained classifiers\nthat we can use in any program. So essentially,\nthe two main classifiers that exist today\nare har cascades, and mo advanced classifiers\ncore local binary patterns, we're not going\nto talk about local binary patterns at all\nin this course. But essentially the most advanced\nhow cascade classifiers, they're not as prone\nto noise in an image as compared to the hard\ncascades. So I'm currently at the open CVS\nGitHub page where they store their whole cascade,\nthere are cascade classifiers. And as you\ncan see, there are plenty of hard cascades\nthat open CV makes available to the general\npublic. You have a hard cascade for an eye,\nfragile cat face, from face default, full\nbody, your left eye, a Russian license plate,\nRussian plate number, I think that's the same\nthing. How cascade to detect smile, Hawk cascade\nfor detection of the upper body, and things\nlike that. So feel free to use whatever you\nwant. But in this video, we're going to be\nperforming face detection. And for this, we're\ngoing to use the har cascade underscore frontal\nface underscore default dot XML. So when you\ngo ahead and open that, you're going to get\nabout 33,000 lines of XML code. So all of\nthis. So what do you have to do is essentially,\ngo to this role button, and you'll get all\nthis raw XML code, all you have to do is click\nCtrl A, or Command D if you're on a Mac, and\nclick Ctrl C, or Command C, and then go to\nyour VS code or your editor and create a new\nfile. And we're going to call this har unscrew\nface dot XML. And inside this, I want to paste\nin those 33,000 lines of XML code. Go ahead\nand save that and our classifier is ready.\nSo we can go ahead and close this out. So\nwe're going to be using this Hawk cascade\nclassifier to essentially detect faces that\nare present in an image. So in this file called\nface detect, face underscore detected py,\nI inputted open CV, I basically read in an\nimage of Lady a person, that is this image\nover here. And we can go real quick and display\nthis. So let's run Python face to face on\ndisco with detect dot p y, and we get an image\nin a new window. Cool. So let's actually implement\nour code. The first thing I want to do is\nconvert this image to grayscale. Now face\ndetection does not involve skin tone or the\ncolors that are present in the image. These\nhard cascades essentially look at an object\nin an image and using the edges tries to determine\nwhether it's a face or not. So We really don't\nneed color in our image. And we can go ahead\nand convert that to grayscale, TV dot CVT\ncolor, passing the image in CV dot color on\nBGR. To gray. And we can display this call\nthis gray of color is gray person, we can\npass in our name. Let's save them and run.\nAnd we have to pass in the gray. Okay, we\nhave a blu ray person over here. So let's\nmove on to essentially reading in this har\nunderscore face dot XML file. So the way we\ndo that is by essentially create a har cascade\nvariable. So let's set this to her underscore\ncascade. And we're going to set this equal\nto CV dot cascade classifier, in inside, what\nI essentially want to do is, is parsing the\npath to this har to this XML file. That is\nas simple as saying har en disco face dot\nXML. So this cascade classifier class will\nessentially read in those 33,000 lines of\nXML code and store that in a variable called\nhar underscore cascade. So now that we've\nread in all har cascade file, let's actually\ntry to detect the face in this image over\nhere. So what I'm going to do is essentially,\nsay faces on school rect is equal to har underscore\ncascade dot detect multi scale, and instead,\nwe're going to pass in the image that we want\nto detect based on. So this is great, we're\ngoing to pass in a scale factor. Now let's\nset this to 1.1. Give it a variable called\nminimum neighbors, which essentially is a\nparameter that specifies the number of neighbors\nrectangle should have to be called a face.\nSo let's set this to three for nap. So that's\nit. That's all we have to do. And essentially,\nwhat this does is this detect multiscale,\nan instance of the cascade classifier class\nwill essentially take this image, use these\nvariables called scale factor and minimum\nlabels to essentially detect a face and return\nessentially the rectangular coordinates of\nthat face as a list to faces on the score\nrec. That's exactly why we are giving it faces\non scope rect rect, to rectangle. So you can\nessentially print the number of faces that\nwere found in this image by essentially printing\nthe length of these faces on the score rect\nvariable. So let's do that. Let's print the\nnumber, number of faces found is equal to,\nwe can pass in the length of faces on school\nrect. So let's save that and run. And as you\ncan see that the number of faces that were\nfound one, and that's true, because there's\nonly one person in this image code. Now utilizing\nthe fact that this faces on school rec is\nessentially the rectangular coordinates for\nthe faces that are present in the image, what\nwe can do is we can essentially looping over\nthis list and essentially grab the coordinates\nof those images and draw a rectangle over\nthe detected faces. So let's do that. So the\nway we do that is by saying for x comma y\ncomma w comma H, H in faces underscore rect,\nwhat we're going to do is we're going to draw\na rectangle CV to a rectangle over the original\nimage. So IMG give the point one, this point\none is essentially x comma y. And point two\nis essentially x plus w comma y plus H. Let's\ngive it a color. Let's set this to green.\nSo zero comma 255 comma zero, give it a thickness\nof two. And that's it. And we can print this\nor we can display this image. So let's set\nthis to detected basis. And we can pass in\nOMG. And if you look at this image, you can\nessentially see the rectangle that was drawn\nover this image. So this in essence, is the\nface that open CV is hard cascades found in\nthis image. So let's try this with another\nimage. So what I have here are a couple of\npeople, a couple of other people then image\nof five people, so we're going to use that\nimage and try to see how many faces OBG these\nhard cascades could detect in this image.\nSo let's set this to group two. We can change\nthat to a group of five people. Save that\nclose, right people save and run. And I want\nto point real quick that the number of faces\nthat we found, were actually seven. Now we\nknow that there are five people in this image.\nSo let's actually see what open CV thought\nwas face. So we can go real quick. So actually\ndetected all the faces in this image, all\nthe five people, but it also detected two\nother guests a stomach and part of a neck.\nNow this is to be expected because her cascades\nare really sensitive to noise in an image.\nSo if you have something that pretty much\nlooks like a face, like a neck looks like\na face, it has the same structure as the typical\nface would have. I don't know why her stomach\nwas recognized as face. But again, this is\nto be expected. So one way we can try to minimize\nthe sensitivity to noise is essentially modifying\nthe scale factor in minimum neighbors. So\nlet's increase the minimum neighbors to maybe\nsix or seven. Save that in run. In as you\ncan see, now six faces were found. So I guess\nby increasing the minimum neighbors parameter,\nwe essentially stopped open open CV from detecting\nher stomach as face. So let's try this with\nanother more complex image, a couple of people\nin group one. So if I change that to group\none, save rock. Now, as you can see that the\nnumber of faces we've never found was six.\nAnd we know that this is not six. So let's\nactually change this minimum minimum neighbors\njust a bit. Let's change this first to three\nand see how many faces we'll found. Now we\ngot 14. Okay, some people at the back want\nchosen because either the faces are not perfectly\nperpendicular to the camera, or they're wearing\nsome accessories on the face, for example,\neyeglasses. This dude's wearing a hat, this\ndude ran on cap, and stuff like that. So let's\nactually change this to one. And let's see\nwhat that gets us to one. So, Ron, and now\nwe got 19 faces that were found in this image.\nSo it's about looping through these values\nby changing these values. by tweaking these\nvalues, you can essentially get a more robust\nresult. But of course by by minimizing these\nvalues, you're essentially making open CV\nsmall cascades more prone to noise. That's\nthe trade off you need to consider. Now, again,\nhard cascades are not the most effective in\ndetecting faces, they're popular, but they're\nnot the most advanced, they are probably not\nwhat you would use if you were to build more\nadvanced computer vision projects. I think\nfor that, dealings face recognizer is more\neffective and less sensitive to noise than\nopen CV is our cascades. It stands for your\nuse case hard cascades are most more popular.\nThey're easy to use, and they require minimal\nsetup. And if you wanted to extend this to\nvideos, you could all you have to do is essentially\ndetect hot cascades on each individual frame\nof a video. Now I'm skipping that because\nit's pretty self explanatory. So that's pretty\nmuch it. For this video, we discussed how\nto detect faces in open CV using open CV as\nhar cascades. In the next video, we will actually\ntalk about how to recognize faces in open\nCV using open CV is built in face recognizer.\nSo like always, if you have any questions,\ncomments, concerns, whatever, leave them in\nthe comments below. Otherwise, I'll see you\nin the next video. Hey everyone, and welcome\nback to another video. In this video, we will\nlearn how to build a face recognition model\nin open CV using open CV is built in face\nrecognizer. Now, on the previous video, we\ndealt with detecting faces in open CV using\nhard cascades. This video will actually cover\nhow to recognize faces in an image. So what\nI have you have five folders or five different\npeople. Inside each folder, I have about 20\nimages of that particular person. So Jerry\nhas 21 images. Anson has 17 Mindy kailyn has\n22 Ben Affleck has 14 and so. So what I'm\nessentially going to do is we're going to\nuse open CV is built in face recognizer. And\nwe're going to train that right now. So on\nall of these images in these five folders,\nnow this is sort of like building a mini sized,\ndeep learning model, except that we're not\ngoing to build any model from scratch, we're\ngoing to use open TVs built in face recognizer,\nor we're going to do is we're actually going\nto pass in these close 90 images. And we're\ngoing to train that recognizer on these 90\nimages. So let's create a new file. And we're\ngoing to call this faces ns, go train dog\np y, we're going to input always, we're going\nto input CV to our CV, and we're going to\nimport NumPy as NP. So the first thing I want\nto do is essentially create a list of all\nthe people in the image. So this is essentially\nthe names of the folders of these particular\npeople, what you could do is you can manually\ntype those in, or you could essentially create\nan empty list. Let's call this P. and we can\nloop over every folder in this folder, and\nlet's set this to an Austrian. And we can\nsay P dot append, I, or we can print P. Let's\nsave that and run Python beaters on skirt\non skirt trained on p y. And we get the same\nlist that we got over here. So that's one\nway of doing it. And what I'm going to do\nnext is I'm essentially going to create a\nvariable called dir, and set this equal to\nthis base folder, that is this folder which\nhas, which contains these five folders of\nthese people. Cool. So with that done, what\nwe can do is we can essentially create a function\ncalled def create unscrewed train, that will\nessentially loop over every folder in this\nbase folder. And inside that folder, it's\ngoing to loop over every image and essentially\ngrab the face in that image and essentially\nadd that to our training set. So our training\nset will consist of two lives. The first one\nis called features, which are essentially\nthe image arrays of faces. So let's set this\nto an empty list. And the second list will\nbe our corresponding labels. So for every\nface in this features list, what is its corresponding\nlabel, whose face does it belong to, like\none image could belong to Ben Affleck, the\nsecond image could belong to elton john, and\nso on. So let's create a function. So we're\ngoing to say we're going to loop over every\nperson in this people list, we're going to\ngrab the path for this person, so for every\nfolder in this base folder, going through\neach folder and grabbing the path to that\nfolder. So that's essentially as simple as\nsaying, Oh s dot path dot join the join. And\nwe can, we can join the der with person. And\nwhat I'm going to do is I'm gonna create a\nlabels label variable, and set this equal\nto people don't index of person. And now the\nway inside each folder, we're going to loop\nover every image in that folder. So we're\ngoing to say for image to image in our stock\nlist there. In path, we are going to grab\nthe image Park. So we're going to say image,\nunderscore path is equal to OS dot path dot\njoin. We're going to say join, we're going\nto join the PATH variable to the image. Now\nthat we have the path to an image, we're going\nto read in that image from this path. So we're\ngoing to create a variable called IMG underscore\nrain is equal to CV dot m read image on the\nscope path. We're going to convert this image\nto grayscale I think CVT color, pause and\nIMG. On scope right here we can pass in t\nv dot c, CV dot color on the screw BGR to\ngrip. Cool and now now with that done we can\nessentially trying to detect the faces in\nthis image. So let's go back to face underscore\ndetect and grab the whole cascade classifier\nvariable here. Let's paste that there. And\nwe can create a set of faces on school rect\nand set this equal to har underscore cascade\ndot detect multi scale this will take in the\ngray image scale factor of 1.1 and add a minimum\nneighbors of four. And we can loop over every\nevery face in this face rect. So for for x\ncomma y comma w comma each in faces rect,\nwe are going to grab the bases region of interest,\nand set this equal to and basically crop out\nthe face in the image. So we're going to say\ngray, y two y plus h, and x 2x plus W. And\nnow that we have a faces a face region of\ninterest, we can append that to the features\nlist. And we can append the corresponding\nlabel to the labels list. So we're going to\ndo features dot append, we're going to pass\nin faces on scope, or y. And we can do a labels\ndot append label. This label variable is essentially\nthe index of this list. Now the idea behind\nconverting a label to numerical values is\nessentially reducing the strain that your\ncomputer will have, by creating some sort\nof mapping between a string and the numerical\nlabel. Now the mapping of we are going to\ndo is essentially the index of that particular\nlist. So let's say that I grab the first image,\nwhich is an image of Ben Affleck, the label\nfor that would be zero, because Ben Affleck\nis at the zeroeth index of this people list.\nSimilarly, elton john, an image of elton john\nwould have a label of one because it is at\nthe second position or the first index in\nthis people's lists. So that's essentially\nthe idea behind this. Now, with that done,\nwe can essentially trying to run this and\nsee whether we got any errors or not. And\nwe can bring the length of the features. So\nlet's say length, length of the features list,\nis equal to the length of features. And we\ncan do the same thing. This was copy this\nlength of the labels list, set this to length\nof labels. So that shouldn't give us any error.\nSo let's run that. And we get the length of\nthe features 100 and length of labels 100.\nSo essentially, what we have 100 faces, and\n100 corresponding labels to this faces. So\nwe don't need this anymore. What we can do\nis we can essentially use this features and\nlabels list now that it's appended to train\nour recognizer on it. So the way we do that\nis we instantiate our face recognizer, call\nthis, as the instance of the cv.face.lb p\nh face recognizer underscore create class.\nAnd this will essentially instantiate the\nface right now. Now we can actually train\nthe recognizer on, on the features list, and\nthe labels and the labels list. So the way\nwe do that is by saying face underscore recognizer\ndot train, and we can pass in the features\nlist, and we can pass in the labels list.\nAnd before we actually do that, I do want\nto convert this features and labels list to\nNumPy arrays. So we're going to do so we're\ngoing to say, features is equal to NP dot\narray of features. And we can say of labels\nis equal to NP dot array of labels, and save\nthat and run. OK, data object. So let's add\nthis to the typed object. Horse in detail\ntype is equal to object. And we can actually\nprint when this is done, so let's say craning\ndon't. And we can actually go ahead and save\nthis features and labels list. And we're going\nto say NP dot save, we're going to call this\nfeatures.np y, and we can pass in features.\nAnd we can do NP dots, MP dot save labels\ndot nPy. And we can pass in the labels. So\nlet's save that and run cool. So essentially,\nnow the face recognizer is trained and we\nYou can now use this. But the problem here\nis that if we plan to use this face recognizer\nin another file, we'll have to separately\nand manually repeat this process, this whole\nprocess of adding those images to a list and\ngetting the corresponding labels, and then\nconverting that to NumPy rays, and then training\nall over again, what we can do and what open\nCV allows us to do is essentially save this\ntrained model so that we can use it in another\nfile in another directory in another part\nof the world just by using that particular\nYAML source file. So we're going to repeat\nthis process again. But the only change that\nI'm going to do is I'm going to say face recognizer\ndot save. And we're going to give the path\nto a YAML source file. So we're going to save\nface unscrewed trend, dot yamo. So let's repeat\nthis process, again, trainings down. And now\nyou'll notice that you have face on scope\ntrained a yamo file in this directory, as\nwell as faces, as well as features that nPy\nannal labels dot nPy. So let's actually use\nthis train model to recognize faces in an\nimage. So let's close this out. And create\na new file. And we're going to call this face\non school rec hig nition dot p y. Very simply,\nwe're going to import NumPy as MP and CV to\nsc V, we don't need us anymore, because we're\nnot looping over directories, we can essentially\ncreate our har underscore cascade file. So\nlet's do that. Let's go up here, grab this,\nwe can load our features and label rate using\nby saying features is equal to NP note load\nfeatures.np y. And we can say labels is equal\nto NP dot load with called as labels.np y.\nAnd we can essentially now read in this face\non the scope train that yamo file. So let's\ngo over here. Let's grab this line. And let's\nsay face recognizer dot read. And we're going\nto give it the path to this YAML source file.\nSo face unscrewed face on screw trained dot\nyamo. So that's pretty much all we need. Now\nwe need to get the mapping. So let's grab\nthis list as well. And so that's pretty much\nall we have to do. So let's create a variable\nimage that set this to save it out in read,\ngive it a path. Let's create eight. Let's\ngrab one from this validation and one from\nthis validation. I have one of Ben Affleck.\nSo let's try this with grab that piece on.\nAnd Graham, maybe this image from but I have\na piece out there. And that's a JPG file.\nAnd we can convert that image to grayscale\ntv.tv t color positive image CV no color,\nI'm just going to BG BGR to Great. So let's\njust play this image. See, Cole is the person\non identified person that's patient on the\nboard. So what we're going to do is we're\ngoing to first detect the face in the image.\nSo the way we do that is by saying faces on\nunderscore rect is equal to r on this go cascade\ndot detect multiscale we pass in the gray\nimage, we pass in the scale factor, which\nis 1.1 give it a minimum neighbors of foe\nand we can loop over every face in his faces\non score rect Sue, Sue for x comma y comma\nw comma H in faces basis on score rect. We\ncan grab the region of interest to what we're\ninterested in finding your Why two one plus\nH and x 2x plus H. And now we can predict\nusing this face recognizer to we get the label\nand a confidence value. And we say face recognizer\ndot predict And we predict on this faces on\nscope ROI, let's print. Let's call this label\nis equal to label with confidence, off color\nconfidence. And since we're using numerical\nvalues, we can probably we can probably say\npeople off label. Okay. And we can essentially\nwhat we can do is we can put some text on\nthis image just to show us what's really going\non, we can put this on the image, we can create\na string, variable of people of label. So\nthe person involved in that image, given an\norigin, let's say 10, let's say 20 by 20.\nGive it a font face of CV dot font, unscrew\nHershey on school complex. Give it a font\nscale of one point of 1.0 here to color of\nzero, comma 255 comma zero and give it a thickness\nof two. And we can draw a rectangle over the\nimage over the face. This is we draw this\nover the image, we give it x to y and x plus\ndelta t comma y plus H. We give it a color\nof zero comma two five comma zero, and we\ncan give it a thickness of two. So with that\ndone, we can find this display this image\ncalled as the detected bass. And we can pass\nthe image. And finally we can do a CV Delta\nWait, key zero. So let's save and see what\nwe get Python. Python face on school record,\nNish. nation dot p y. Cannot be alone in love\npickles equals false. Gosh, where's that?\nWe probably don't need this anymore. So let's\ncome up with that out. there if you wanted\nto use these again, you could essentially\nuse MP dot load. Since the data types are\nobjects, you can basically say allow pickle\nis equal to true. That's essentially but we're\nnot going to use it. So let's comment that\nout. Save. And okay, we get Ben Affleck with\na confidence of 60%. So that's pretty good.\n60% is good, given the fact that we only train\nthis recognizer on 100 images. So let's try\nthis with another image of Ben Affleck, maybe\nthis image, copy that go right across here.\nAnd this again, is Ben Affleck with the confidence\nof 94% pretty good. Let's go back. Let's go\nmaybe to an odd person. Let's go to Madonna.\nFor to grab this. It's a pain rally. But let's\nchange this to Madonna. And let's grab this\nperson, I'm not sure whether it will detect\na face because of the head. But let's face\nthat anyway. Now this is where you'll find\nthat obon TV's face recognizer built on face\nrecognizer is not the best. It currently detects\nit currently detects that this person in the\nimage is actually Jerry seinfield. And that\nwill be the confidence of 110%. Maybe there's\nan error somewhere. I'm not sure why that\nwent to 111. But pretty sure there's an error\nsomewhere. But essentially, this is where\nthe discrepancies lie. It's not the best so\nit's not going to give you accurate results.\nSo let's try this with another image. Let's\ngo about to maybe share image, copy that piece\nof paper. Okay, this is Madonna with the confidence\nof 96.8% Okay, let's move on to elton john\nWatson had problems with elton john. Given\nthe fact that he looked pretty similar to\nBen Affleck for some reason. Copy that chain\ngot to elton john just called john and print\nthat. Okay, elton john with the confidence\nof 67% pretty good. Okay, so not bad. This\nis more accurate than what I predicted. before\nfilming this video, I did a couple of trial\nruns, and I got very good results. For example,\nelton john was continually detected as Jerry\nseinfield or Ben Affleck. Madonna was detected\nas Ben Affleck, Ben Affleck was detected as\nMindy kaylin. Minnie kailyn was detected as\nelton john, and a whole bunch of weird results.\nSo I guess that we did something right. I\nmust have done something wrong in the trial\nruns. But hey, we get good results. And that's\npretty good. Now, I'm not sure why that gave\na confidence of 111%. Maybe there's an error\nsomewhere with the training sent. But I guess\nfor the most part, you can ignore that. Given\nthe fact that we get pretty good results.\nSo that's pretty much it. For this video,\nwe discussed face recognition. In open CV,\nwe essentially build a features list and a\nlabels list and we train a recognizer on those\ntwo lists. And we saved a model as a YAML\nsource file. In another file, we essentially\nread in that saved model saved YAML source\nfile. And we essentially make predictions\non an image. And so in the next video, which\nwill actually be the last video In this course,\nwe will discuss how to build a deep learning\nmodel to detect and classify between 10 Simson\ncharacters. So if you have any questions,\ncomments, concerns, whatever, leave them in\nthe comments below. Otherwise, I'll see you\nin the next video. Hey, everyone, and welcome\nto the last video in this Python and urban\nTV cuts. Previously, we've seen how to detect\nand recognize faces Pioli in open CV, and\nthe results we got were varied. Now, there\nare a couple of reasons for that. One is the\nfact that we only had 100 images to train\nthe recognizer on. Now, this is a significantly\nsmall number, especially when you're training\nrecognizes and building models. Ideally, you'd\nwant to have at least a couple of 1000 images\nper class. The second reason lies in the fact\nthat we want using a deep learning model.\nNow as you go deeper into especially computer\nvision, you will see that there are very few\nthings that can actually beat a deep learning\nmodel. So that's what we're going to be doing\nin this video. Building a deep computer vision\nmodel to classify between the sensing characters\nnow generate open CV GS for pre processing\nthe data that is performing some sort of image\nnormalization, mean subtraction, and things\nlike that. But in this video, we're going\nto be building a very simple model. So we're\nnot going to be using any of those techniques.\nIn fact, we'll only be using the open CV library\nto read an image and resize them to a particular\nsize before feeding it into the network. Now,\ndon't worry if you've never used a built a\ndeep learning model before. But this video\nwill be using tensor flows implementation\nof Kara's now I want to keep this video real\nsimple, just so you have an idea of what really\ngoes on in more advanced computer vision projects.\nAnd carers actually comes with a lot of boilerplate\ncode. So if you've never built a deep learning\nmodel before, don't worry, Cara's will handle\nthat for you. So kind of one of the prerequisites\nto building a deep learning model is actually\nhaving a GPU. Now GPU is basically a graphical\nprocessing unit that will help speed up the\ntraining process of a network. But if you\ndon't have one, again, don't worry, because\nwe'll be using candle, a platform, which actually\noffers free GPUs for us to use. So real simple,\nbefore we get started, we need a couple of\npackages installed. So if you haven't already\ninstalled Sierra at the beginning of this\ncourse, go ahead and do a pip install Sierra.\nThe next package you require is conero. And\nthis is a package that I built specifically\nfor deep learning models built with Kerris.\nAnd this will actually appear surprisingly\nuseful to you, if you're planning to go deeper\ninto building deep computer vision models.\nNow, installing this package on your system\nwill only make sense if you already have a\nGPU on your machine. If you don't, then you\ncan basically skip this part. So we can do\na pip install conero. And can our actually\ninstalls TensorFlow by default, so just keep\nthat in mind. So with all the installations\nout of the way, let's actually move on to\nthe data that we're going to be using. So\nthe data set that we're going to be using\nis the Simpsons character data set that's\navailable on kaggle. So the So the actual\ndata that we're interested in lies in this\ninstance on score data set folder. This basically\nconsists of a number of folders with several\nimages inside each subfolder. So Maggie Simpson\nhas about 12 128 images. Homer Simpson has\nabout 2200 images. Abraham has about 913 images.\nSo essentially, what we're going to do is\nwe are going to use these images and feed\nthem into our model to essentially classify\nbetween these characters. So first thing we\nwant to do is go to kaggle.com slash notebooks,\ngo ahead and create a new notebook. And under\nAdvanced Settings, make sure that the GPU\nis selected, since we're going to be using\nthe GPU off of that click Create. And we should\nget a notebook. So we're going to rename this\nto Simpsons. And one thing I want to do is\nenable the internet since we're going to be\ninstalling a couple of packages over the internet.\nSo do use the Simpsons character data set\nin our notebook, you need to go head to add\ndata search for Simpsons. And the first one\nby Alec city, I should pop up, go ahead and\nclick Add. And we can now use this data set\ninside a notebook. So the first thing I want\nto do is we're going to pip install, seer.\nAnd now, now the reason why I'm doing this\nyet again. Now the reason why I'm doing this,\nagain, is because candle does not come pre\ninstalled with Sierra and conero. Now I did\ntell her to install it on your machine. And\nthe reason for that is because y'all can work\nwith it and experiment with. So once that's\ndone, go ahead to a new cell. And let's import\nall the packages that we're going to need.\nSo we're going to input o s, we're going to\ninput seer, we're going to input conero. We're\ngoing to import NumPy. As NP we're going to\ninput CV to add CV, and we're going to input\nGC for garbage collection. Then next what\nwe want to do is in basically when building\ndeep computer vision models, your model expects\nall your data or your image data to be of\nthe same size. So since we're working with\nimage data, this size is the image size. So\nall the data or the images in our data set\nwill actually have to be resized to a particular\nscience before we can actually feed that into\nthe network. Now with a lot of experiments,\nI found that an image size of 80 by 80 works\nwell, especially for this Simpsons data set.\nOkay, the next variable we need is the channels.\nSo how many channels do we want in our image.\nAnd since we do not require color in our image,\nwe're going to set this to one basically grayscale.\nTo run back. What we need next is we're gonna\nsay car on the scope path is equal to the\nbase path where all the data where all the\nactual data lines, and that is in this Simpsons\non a school dataset, this is the base folder\nfor where all our images are stored in. So\nwe're going to copy this file path. And we're\ngoing to paste that in that. Cool. So essentially,\nwhat we're going to be doing now is, we're\nessentially going to grab the top 10 characters,\nwhich have the most number of images for that\nclass. And the way we're going to do that\nis we are going to go through every folder\ninside the Simpsons underscore data set, get\nthe number of images that are stored in that\ndata set, store all of that information inside\na dictionary, so that dictionary in descending\norder, and then grab the first 10 elements,\nfirst n elements in the dictionary, hope that\nmade sense. So what we're going to do is we're\ngoing to say create an empty dictionary. We're\ngoing to say for character in our stop list,\nder called car path, we are going to say car\nunderscore dict of car is equal to length\nof s dot list dir of Oh s dot path dot join.\nWe're going to join the car on a scope pump\nwith car. So essentially, all that we're doing\nis we're going through every folder or grabbing\nthe name of the folder, and we're getting\nthe number of images in that folder. And we're\nstoring all that information inside the dictionary\ncalled car underscore dict. Once that's done,\nwe can actually sort this dictionary in descending\norder. Sending order and the way we do that\nis with a car unscored dict is equal to car\ndot SOT unscored dict of car underscore dict.\nAnd we said descending equals to true. And\nfinally, we can print the dictionary that\nwe get. So this is the dictionary that we\nhave. As you can see, Homer Simpson has the\nmost number of images at close to 2300. And\nwe go all the way down to Lionel, who has\nonly three images in the data. So what we're\ngoing to do is now that we have this dictionary,\nwhat we're going to do is we are going to\ngrab the names of the first 10 elements in\nthis dictionary, and store that in a list\nof characters list. So we're gonna say characters.\nSo we're gonna say characters is equal to\nis equal to an empty list. And we're going\nto say, for i in car underscore dict. We're\ngoing to say characters, dot append, and we're\ngoing to append the name. So we say I have\nzero. And we say, if count is greater than\nor equal to 10, we can break it, we need to\nspecify a count of zero, and increment that\ncounts. Okay, once that's done, let's print\nwhat our characters looks like. So we've essentially\njust grabbed the names of the characters.\nSo with that done, we can actually go ahead\nand create the training data. And to create\na training data is as simple as saying train\nis equal to seer dot pre process. From there,\nwe pass in the car on scope, puff, the characters,\nthe number of channels, the image size, image\nsize, as we say, is shuffle equals true. So\nessentially, what this will do is it will\ngo through every folder inside car on the\nscope path, which is Simpsons underscore data\nset. And we'll look at every element inside\ncharacters. So essentially, it is going to\nlook for Homer Simpson, inside the Simpsons\nunderscore data set, it will find Homer Simpson,\nwhereas Homer Simpson, it even finds Homer\nSimpson is going to go through inside that\nfolder, and grab all the images inside that\nfolder, and essentially add them to our training\nset. Now, as you may recall, in the previous\nvideo, a training set was essentially a list.\nEach element in that list was another list\nof the imagery and the corresponding label.\nNow the label that we had was basically the\nindex of that particular string in the characters\nlist. So that's essentially the same type\nof mapping that we're going to use. So Homer\nSimpson is going to have a label of zero,\nNed will have label of one, Liza will have\nlabel of three, and so on. So once that's\ndone, go ahead and run this. Now, basically,\nto basically the progress is displayed at\nthe terminal. If you don't want anything outputted\nto the terminal, you can basically just set\nset the verbosity to zero. But I'm going to\nleave things just as it is, since there are\na lot of images inside this data set. This\nmay take a while depending on how powerful\nyour machine is. So that's only took about\na minute or so to pre process our data. So\nessentially, let's try to so let's essentially\ntry to see how many images there are in this\ntraining set. We do that by saying the length\nof trip. And we have 13,811 images inside\nthis training set. So let's actually try to\nvisualize the images that are present in this\ndataset. So we're going to import matplotlib.pi\nplot as PLT, we're going to do a PLT dot bigger.\nAnd we're going to give it and we're going\nto give it a big size of 30 by 30. Let's do\na plt.im show, we can pass in first. The first\nelement in this training sets are zero and\nthen zero. And we can give it a color map\noff gray. And we can display this image. Now\nthe reason why I'm not using open CV to display\nthis image is because for some reason, open\nCV does not display properly in Jupyter Notebook.\nSo that's why we're using matplotlib. So this\nis basically the image that we get somebody\nlegible, but to a machine. This is a valid\nimage. Okay, the next thing we want to do\nis we want to separate the training set into\nthe features and labels. Right now. The train\nThat basically is a list of 13,811 lists inside\nit. Inside each of that sub lists are two\nelements, the actual array and the labels\nitself. So we're going to separate the feature\nset, or the arrays and the labels into separate\nlists. And the way we do that is by saying\nfeature set and labels is equal to car dot\nzip on school train, we are going to separate\nthe training set and give it an image size\nof image size. And that's n equals two. So\nbasically, what this is going to do is going\nto separate the training set into the feature\nset and labels and also reshape this feature\nset into a four dimensional tensor, so that\nit can be fed into the model with no restrictions\nwhatsoever. So go ahead and run that. And\nonce that's done, let's actually try to normalize\nthe feature sets. So essentially, we are going\nto normalize the data to be in the range of\nto be the range of zero comma one. And the\nreason for this is because if you normalize\nthe data, the network will be able to learn\nthe features much faster than, you know, not\nnormalizing the data. So we're gonna say feature\nset is equal to square dot normalize, and\nwhen to pass in, peaches set. Now we don't\nhave to normalize the labels. But we do need\nto one hot encode them that is convert them\nfrom numerical integers to binary class vectors.\nAnd the way we do that is by saying from TensorFlow,\ndel Kara's dot EDU tools input to underscore\ncategorical. And we can say labels is equal\nto two categorical, and we get possible labels,\nand the number of categories, which is basically\nthe length of this characters list. Cool.\nSo once that's done, so once that's done,\nwe can actually move ahead and try to create\nour training and validation data. Now, don't\nworry too much if you don't know what these\nare. But basically, the model is going to\ntrain on the training data and test itself\non the validation data. And we're going to\nsay x underscore train x underscore Val and\ny underscore train and y underscore Val is\nequal to sere dog train, Val split. And we're\ngoing to split the feature set and the labels\nusing a particular validation ratio, which\nwe're going to set as point two. So that's\nbasically what we're doing, we're splitting\nthe feature set and labels into into training\nsets and validation sets with using a particular\nvalidation ratio to 20% of this data will\ngo to the validation set, and 80% will go\nto the training set. Okay. Now, just to save\non some memory, we can actually remove and\ndelete some of the variables and we're not\ngoing to be using. So we do that by saying\nDell crane, Dale feature sets, do labels,\nand we can collect this by saying GC dot collect.\nCool. Now moving on, we need to create an\nimage data generator. Now this is basically\nan image generator that will essentially synthesize\nnew images from already existing images to\nhelp introduce some randomness to our network\nand make it perform better. So we're gonna\nsay data, Gen is equal to can narrow down\ngenerators, dot image, data generator. And\nthis basically instantiates, a very simple\nimage generator from the caros using the Kara's\nlibrary. And once it's done, let's create\na training generator. By setting this equal\nto data Jim, don't float. And we can pass\nin extra rain and wind rain and give it a\nbatch size equal to batch size. So let's actually\ncreate some variables here. That's set my\nbatch size to 32. And maybe let's train the\nnetwork for 20 bucks. So once that's done,\nthat's wrong bet. So with that done, we can\nactually proceed to building our model. So\nlet's call this creating the model. And before\nmaking this video, I actually tried and tested\nout a couple of models found that one actually\nprovided me with highest level of accuracy.\nSo that's the same model, the same model architecture\nthat we're going to be using. So we're gonna\nsay model is equal to conero dot models dot\ncreate Simpsons model, we're going to pass\nin an image size, which is equal to the image\nsize, we're going to say set the number of\nchannels equal to the number of channels,\nwe're going to say, we're going to set the\noutput dimensions to the to 10, which is basically\nthe length of our characters, then we can,\nthen we can specify a loss, which is equal\nto binary binary cross entropy. There we get\nset a decay of E of e to the negative sixth\npower, we can set a learning rate equal to\npoint 001. We can set Oh momentum of point\nnine, and we can set Nesterov to true. So\nthis will essentially create the model using\nthe same architecture I built and will actually\ncompile the model so that we can use it. So\ngo ahead and run this. And we can go ahead\nand try to print the summary of this model.\nAnd so essentially, what we have is a functional\nmodel, since we're using Kerris as functional\nAPI. And this essentially has a bunch of layers,\nand about 17 million parameters to drain out.\nSo another thing that I want to do is create\nsomething called a callbacks list. Now this\ncallbacks list will contain something called\na learning rate shedule that will essentially\nsheduled the learning rate at specific intervals\nso that our network can essentially train\nbetter. So we're going to say call callbacks\nlist is equal to learning rate shedule. And\nwe're going to pass in conero.lr on SCO LR\nunderscore schedule. And since we're using\nlearning where shedule Let's go and input.\nSo from TensorFlow, Delve, Cara's no callbacks\ninput learning rate schedule. And that should\nabout do it. So let's actually go ahead and\ntrain the model. So we're gonna say training\nis equal to model dot fit, we're gonna pass\nin the train gin, we're going to say, steps\nper epoch is equal to the length of X on school\ntrain divided by divided by the batch size.\nWe're going to say epochs, is equal to epochs.\nWe're going to give the validation data validation\ndata equal to a tuple of x underscore Val,\nand y underscore Val. And we're going to say\nvalidation steps. Easy Steps is equal to the\nlength of y on school Val, divided by divided\nby the batch. batch size. And finally, we\ncan say callbacks, is equal to callbacks,\ncallbacks on school missed steps per epoch,\nthat steps for epoch. And that should begin\ntraining. And once that is done, we end up\nwith a baseline accuracy of close to 70%.\nSo here comes the exciting part, we're now\ngoing to use open CV to test how good our\nmodel is. So what we're going to do is we're\ngoing to use open CV to read in an image at\na particular file path. And we're going to\npass that to our network and see what the\nmodel spits out. So let's go ahead and go\nto this Simpson test set. So let's go ahead\nand try to search for all the way down here.\nLet's look at our characters. Let's just print\nthat out just to see what characters we trained\non. Okay, let's look for Bart Simpson. Probably\nbit irritating, but since data sent Okay,\nwe got an image of Bart Simpson. So click\nthis and random path, got a test path, set\nthis equal to our string. And what we're gonna\ndo is we're gonna say mg is equal to CV dot\nm read test on secure path. And, and just\nto display this image, we can use PLT dot\nm show, we can pass the image, pass in the\nimage and give it a column map of gray. And\nwe can do a PLT dot show. Okay, PLT show.\nAnd okay, so this is an image of Bart Simpson.\nSo what we're going to do is we are going\nto create a function called prepare, which\nwill basically prepare our image to be of\nthe same size and shapes and dimensions as\nthe images we use to prepare the model in.\nSo this will take in a new image. And what\nthis will do is we'll, we'll convert this\nimage to grayscale so we're gonna say injury\nis equal to CV dot, CVT color, and we're gonna\npass in the injury and we're gonna say CV\ndot color on scrub BGR. To gray, we can resize\nit to our image size. So we're going to say\nmg is equal to CV dot resize, we're going\nto resize the image to be image underscore\nwith size, I'm going to reshape this image.\nSo injury is equal to stare dot reshape, reshape\nof image. We want to reshape the image to\nbe of image size with channels equal to one.\nAnd we can return image. So let's run that.\nAnd let's go down here. And let's say predictions\nis equal to model dot predict and prepare\nimage. And we can visualize this predictions.\nSo let's print predictions. And essentially,\nthis is what we get. So to print the actual\nclass, what we can do is we can print their\ncharacters, BB NP dot arg Max, and we can\nsay predictions of zero. You're not trying\nto visualize this image so we can do a PLT\ndot m show. Let's pass in the image. And PLT\ndot show. Let's grab this and move this down.\nver. That's right. Yeah. Okay, so this is\nour image. And right now our model thinks\nthat buttons in is in fact, Lisa Simpson.\nLet's go. Lisa Simpson. Okay. Let's try another\nimage. Let's try probably this image is Bart\nSimpson 28. Let's go up they and maybe change\nthat to two, eight. run that. This is Bart\nSimpson. Let's run this. And let's and again,\nwe got Lisa Simpson. So let's try with a different\nimage. Yeah, we do. We did Charles Montgomery\nto copy this. All the way down there. We got\nCharles predict, and we get van Hughton. Okay,\ndefinitely not the best model that we could\nhave asked for. But hey, this is a model.\nRight now this base discounting has a baseline\naccuracy of 70%. Although I would have liked\nit to go to at least 85%. In my test, it had\ngone close to 90 92%. I'm not sure exactly\nwhy this went to 70%. But again, this is to\nbe expected into building deep computer vision\nmodels is a bit of an art. And it takes time\nto figure out what's the best model for your\nproject. So that's it for this Python and\nopen c because this goes to is basically kind\nof a general introduction to open CV and what\nit can do. And of course, we've only just\nscraped the surface and really this A whole\nnew world of computer vision now fair. Now,\nwhile we obviously can't cover every single\nthing that open CV can do, I've tried my best\nto teach you what's relevant today in computer\nvision. And really one of its most interesting\nparts, building deep learning models, which\nis in fact, where the future is self driving\nvehicles, medical diagnosis, and tons of other\nthings that computer vision is changing the\nworld. And so all the code and material that\nwas discussed throughout this course is available\non my GitHub page. And the link to this page\nwill be in the description below. And just\nbefore we close, I do want to mention that\nalthough I did recommend you installed Sierra\nin the beginning, we barely use it throughout\nthe coasts. Now, it's probably not going to\nmake sense to you right now. But if you plan\nto go deeper into computer vision into building\ncomputer vision models, Sierra lasher proved\nto be a powerful package for you. It has a\nlot of helper functions to do just about anything.\nNow I'm constantly updating this repository.\nAnd if you want to contribute to these efforts,\ndefinitely do that you can set a pull request\nwith your changes. And if it's helpful, it\nwill be merged into the official code base,\nand you'll be added as a contributor. If you\nwant to building deep learning models with\nKara's then conero will be useful to you.\nBut again, for the most part, it's usually\nsoftware that you'll be using. So anyway,\nwith that said, I think I'll close up this\ncourse, if this goes helped you in any way\nand God you're more interested in computer\nvision, then definitely like this video, subscribe\nto my channel, as I'll be putting up useful\nvideos on Python computer vision and deep\nlearning. So I guess that's it. I hope you\nenjoyed this post and I'll see you in another\nvideo.\n",
  "words": [
    "everyone",
    "welcome",
    "python",
    "open",
    "cv",
    "course",
    "course",
    "talking",
    "everything",
    "need",
    "know",
    "get",
    "started",
    "open",
    "cv",
    "python",
    "going",
    "start",
    "basics",
    "reading",
    "images",
    "video",
    "manipulating",
    "media",
    "files",
    "image",
    "transformations",
    "draw",
    "shapes",
    "put",
    "text",
    "files",
    "going",
    "move",
    "advanced",
    "parts",
    "open",
    "cv",
    "switching",
    "color",
    "spaces",
    "bitwise",
    "operators",
    "masking",
    "histograms",
    "edge",
    "detection",
    "thresholding",
    "finally",
    "sum",
    "things",
    "talking",
    "face",
    "detection",
    "face",
    "recognition",
    "open",
    "cv",
    "detect",
    "find",
    "faces",
    "image",
    "recognize",
    "using",
    "inbuilt",
    "methods",
    "last",
    "video",
    "building",
    "deep",
    "computer",
    "vision",
    "model",
    "classify",
    "characters",
    "simpsons",
    "based",
    "images",
    "material",
    "discussed",
    "available",
    "github",
    "page",
    "relevant",
    "links",
    "put",
    "description",
    "sounds",
    "exciting",
    "forget",
    "head",
    "subscribe",
    "channel",
    "see",
    "course",
    "hey",
    "everybody",
    "welcome",
    "python",
    "urban",
    "tv",
    "coast",
    "next",
    "couple",
    "videos",
    "going",
    "talking",
    "using",
    "open",
    "cv",
    "library",
    "perform",
    "sorts",
    "image",
    "video",
    "related",
    "processing",
    "manipulations",
    "wo",
    "delving",
    "open",
    "cv",
    "really",
    "brief",
    "computer",
    "vision",
    "library",
    "available",
    "python",
    "java",
    "computer",
    "vision",
    "application",
    "deep",
    "learning",
    "primarily",
    "focuses",
    "deriving",
    "insights",
    "media",
    "files",
    "images",
    "video",
    "going",
    "assume",
    "already",
    "python",
    "installed",
    "system",
    "good",
    "way",
    "check",
    "going",
    "terminal",
    "typing",
    "python",
    "dash",
    "dash",
    "version",
    "make",
    "sure",
    "running",
    "version",
    "python",
    "least",
    "whatever",
    "post",
    "wonderly",
    "work",
    "older",
    "versions",
    "python",
    "especially",
    "python",
    "two",
    "make",
    "sure",
    "latest",
    "version",
    "installed",
    "go",
    "ahead",
    "download",
    "latest",
    "version",
    "bet",
    "assuming",
    "done",
    "proceed",
    "installing",
    "packages",
    "require",
    "course",
    "first",
    "one",
    "open",
    "go",
    "ahead",
    "pip",
    "install",
    "open",
    "cv",
    "dash",
    "contrib",
    "dash",
    "python",
    "sometimes",
    "may",
    "find",
    "people",
    "telling",
    "install",
    "open",
    "cv",
    "dash",
    "python",
    "well",
    "open",
    "team",
    "dash",
    "python",
    "basically",
    "main",
    "package",
    "main",
    "module",
    "open",
    "cv",
    "open",
    "cv",
    "dash",
    "contract",
    "dash",
    "python",
    "includes",
    "everything",
    "main",
    "module",
    "well",
    "contribution",
    "modules",
    "provided",
    "community",
    "something",
    "recommend",
    "install",
    "includes",
    "open",
    "cv",
    "functionality",
    "may",
    "also",
    "notice",
    "urgency",
    "tried",
    "install",
    "numpy",
    "package",
    "numpy",
    "kind",
    "scientific",
    "computing",
    "package",
    "python",
    "extensively",
    "used",
    "matrix",
    "array",
    "manipulations",
    "transformations",
    "reshaping",
    "things",
    "like",
    "using",
    "numpy",
    "videos",
    "course",
    "worry",
    "never",
    "used",
    "simple",
    "relatively",
    "easy",
    "get",
    "started",
    "next",
    "package",
    "like",
    "install",
    "sphere",
    "go",
    "ahead",
    "pip",
    "install",
    "seer",
    "slight",
    "disclaimer",
    "package",
    "built",
    "basically",
    "help",
    "speed",
    "workflow",
    "sierra",
    "basically",
    "set",
    "utility",
    "functions",
    "prove",
    "super",
    "useful",
    "computer",
    "vision",
    "journey",
    "ton",
    "super",
    "useful",
    "helper",
    "functions",
    "help",
    "speed",
    "workflow",
    "although",
    "going",
    "using",
    "good",
    "part",
    "course",
    "fact",
    "begin",
    "use",
    "last",
    "video",
    "course",
    "building",
    "deep",
    "computer",
    "vision",
    "model",
    "recommend",
    "install",
    "worry",
    "installation",
    "process",
    "later",
    "interested",
    "contributing",
    "package",
    "simply",
    "want",
    "explore",
    "codebase",
    "leave",
    "link",
    "github",
    "page",
    "description",
    "okay",
    "video",
    "next",
    "video",
    "talking",
    "read",
    "images",
    "video",
    "open",
    "cv",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everybody",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "going",
    "talking",
    "read",
    "images",
    "video",
    "open",
    "cv",
    "bunch",
    "images",
    "photos",
    "folder",
    "couple",
    "videos",
    "videos",
    "folder",
    "first",
    "half",
    "video",
    "talking",
    "read",
    "images",
    "open",
    "cv",
    "towards",
    "end",
    "actually",
    "talking",
    "read",
    "videos",
    "let",
    "start",
    "creating",
    "new",
    "file",
    "call",
    "reader",
    "dot",
    "p",
    "first",
    "thing",
    "actually",
    "input",
    "cv",
    "two",
    "cv",
    "way",
    "read",
    "images",
    "open",
    "cv",
    "making",
    "use",
    "read",
    "method",
    "method",
    "basically",
    "takes",
    "path",
    "image",
    "returns",
    "image",
    "matrix",
    "pixels",
    "specifically",
    "going",
    "trying",
    "read",
    "image",
    "cat",
    "going",
    "say",
    "photos",
    "slash",
    "cat",
    "dot",
    "jpg",
    "going",
    "capture",
    "image",
    "variable",
    "called",
    "img",
    "also",
    "provide",
    "absolute",
    "paths",
    "since",
    "photos",
    "folder",
    "inside",
    "current",
    "working",
    "directory",
    "going",
    "reference",
    "images",
    "relatively",
    "read",
    "image",
    "actually",
    "display",
    "image",
    "using",
    "show",
    "method",
    "method",
    "basically",
    "displays",
    "image",
    "new",
    "window",
    "two",
    "parameters",
    "need",
    "pass",
    "method",
    "actually",
    "name",
    "window",
    "case",
    "going",
    "kept",
    "actual",
    "matrix",
    "pixels",
    "display",
    "case",
    "img",
    "actually",
    "move",
    "ahead",
    "want",
    "add",
    "additional",
    "line",
    "cv",
    "dot",
    "wait",
    "key",
    "zero",
    "cv",
    "wiki",
    "zero",
    "basically",
    "keyboard",
    "binding",
    "function",
    "waits",
    "specific",
    "delay",
    "time",
    "milliseconds",
    "key",
    "pressed",
    "pass",
    "zero",
    "basically",
    "waits",
    "infinite",
    "amount",
    "time",
    "keyboard",
    "key",
    "pressed",
    "worry",
    "much",
    "really",
    "important",
    "course",
    "discussing",
    "parts",
    "towards",
    "end",
    "video",
    "let",
    "actually",
    "save",
    "run",
    "saying",
    "python",
    "read",
    "dot",
    "p",
    "image",
    "displayed",
    "new",
    "window",
    "cool",
    "small",
    "image",
    "image",
    "size",
    "640",
    "going",
    "try",
    "read",
    "image",
    "cat",
    "much",
    "larger",
    "version",
    "2400",
    "1600",
    "image",
    "gon",
    "na",
    "say",
    "cat",
    "school",
    "large",
    "dot",
    "jpg",
    "let",
    "save",
    "run",
    "see",
    "image",
    "goes",
    "way",
    "screen",
    "reason",
    "dimensions",
    "image",
    "far",
    "greater",
    "dimensions",
    "monitor",
    "currently",
    "working",
    "currently",
    "open",
    "cv",
    "inbuilt",
    "way",
    "dealing",
    "images",
    "far",
    "greater",
    "computer",
    "screen",
    "ways",
    "mitigate",
    "issue",
    "discussing",
    "next",
    "video",
    "talk",
    "resizing",
    "rescaling",
    "frames",
    "images",
    "know",
    "images",
    "large",
    "images",
    "possibly",
    "going",
    "go",
    "screen",
    "reading",
    "images",
    "move",
    "reading",
    "videos",
    "open",
    "cv",
    "called",
    "reading",
    "videos",
    "going",
    "actually",
    "going",
    "read",
    "video",
    "dog",
    "way",
    "read",
    "videos",
    "actually",
    "creating",
    "capture",
    "variable",
    "setting",
    "equal",
    "cv",
    "dot",
    "video",
    "capture",
    "method",
    "either",
    "takes",
    "integer",
    "arguments",
    "like",
    "0123",
    "etc",
    "path",
    "video",
    "file",
    "would",
    "provide",
    "integer",
    "argument",
    "like",
    "012",
    "three",
    "using",
    "webcam",
    "camera",
    "connected",
    "computer",
    "cases",
    "webcam",
    "would",
    "referenced",
    "using",
    "integer",
    "zero",
    "multiple",
    "cameras",
    "connected",
    "computer",
    "could",
    "reference",
    "using",
    "appropriate",
    "argument",
    "example",
    "zero",
    "would",
    "reference",
    "webcam",
    "one",
    "would",
    "reference",
    "first",
    "camera",
    "connected",
    "computer",
    "would",
    "reference",
    "second",
    "camera",
    "video",
    "actually",
    "looking",
    "read",
    "already",
    "existing",
    "videos",
    "file",
    "path",
    "specifically",
    "reading",
    "dog",
    "video",
    "dog",
    "way",
    "providing",
    "path",
    "videos",
    "slash",
    "dog",
    "dot",
    "mp4",
    "reading",
    "videos",
    "kind",
    "like",
    "different",
    "reading",
    "images",
    "case",
    "reading",
    "videos",
    "actually",
    "use",
    "one",
    "loop",
    "read",
    "video",
    "frame",
    "frame",
    "going",
    "say",
    "true",
    "first",
    "thing",
    "want",
    "inside",
    "loop",
    "say",
    "true",
    "frame",
    "equal",
    "capture",
    "dot",
    "read",
    "capture",
    "dot",
    "read",
    "basically",
    "reads",
    "video",
    "frame",
    "frame",
    "returns",
    "frame",
    "boolean",
    "says",
    "whether",
    "frame",
    "successfully",
    "read",
    "display",
    "video",
    "actually",
    "display",
    "individual",
    "frame",
    "saying",
    "tv",
    "show",
    "call",
    "video",
    "pass",
    "frame",
    "finally",
    "way",
    "stop",
    "playing",
    "indefinitely",
    "saying",
    "cv",
    "wait",
    "ki",
    "20",
    "0x",
    "ff",
    "equal",
    "equal",
    "ord",
    "want",
    "break",
    "loop",
    "done",
    "actually",
    "release",
    "capture",
    "pointer",
    "destroy",
    "windows",
    "get",
    "rid",
    "basically",
    "recap",
    "capture",
    "variable",
    "instance",
    "video",
    "capture",
    "clause",
    "inside",
    "loop",
    "grab",
    "video",
    "frame",
    "frame",
    "utilizing",
    "captured",
    "read",
    "method",
    "display",
    "frame",
    "video",
    "using",
    "cv",
    "dot",
    "show",
    "method",
    "finally",
    "way",
    "break",
    "loop",
    "say",
    "see",
    "wait",
    "ki",
    "20",
    "0x",
    "f",
    "f",
    "equal",
    "basically",
    "says",
    "letter",
    "pressed",
    "break",
    "loop",
    "stop",
    "displaying",
    "video",
    "finally",
    "release",
    "capture",
    "device",
    "destroy",
    "windows",
    "since",
    "need",
    "anymore",
    "let",
    "save",
    "run",
    "get",
    "video",
    "displayed",
    "window",
    "like",
    "done",
    "notice",
    "video",
    "suddenly",
    "stops",
    "get",
    "error",
    "specifically",
    "negative",
    "215",
    "assertion",
    "failed",
    "error",
    "ever",
    "get",
    "error",
    "like",
    "negative",
    "215",
    "assertion",
    "failed",
    "would",
    "mean",
    "almost",
    "cases",
    "open",
    "cv",
    "could",
    "find",
    "media",
    "file",
    "particular",
    "location",
    "specified",
    "reason",
    "happened",
    "video",
    "video",
    "ran",
    "frames",
    "open",
    "cv",
    "could",
    "find",
    "frames",
    "last",
    "frame",
    "video",
    "unexpectedly",
    "broke",
    "loop",
    "raising",
    "cv",
    "error",
    "gon",
    "na",
    "get",
    "error",
    "comment",
    "uncomment",
    "specify",
    "wrong",
    "path",
    "image",
    "see",
    "oh",
    "wait",
    "wait",
    "key",
    "zero",
    "save",
    "run",
    "get",
    "exact",
    "error",
    "basically",
    "says",
    "open",
    "cv",
    "could",
    "find",
    "image",
    "video",
    "frame",
    "particular",
    "location",
    "basically",
    "could",
    "ready",
    "saying",
    "pretty",
    "much",
    "video",
    "talked",
    "read",
    "images",
    "open",
    "cv",
    "read",
    "videos",
    "using",
    "video",
    "capture",
    "class",
    "next",
    "video",
    "talking",
    "rescale",
    "resize",
    "images",
    "video",
    "frames",
    "open",
    "cv",
    "see",
    "hey",
    "everyone",
    "welcome",
    "back",
    "video",
    "going",
    "talking",
    "resize",
    "rescale",
    "images",
    "video",
    "frames",
    "open",
    "cv",
    "usually",
    "resize",
    "rescale",
    "video",
    "files",
    "images",
    "prevent",
    "computational",
    "strain",
    "large",
    "media",
    "files",
    "tend",
    "store",
    "lot",
    "information",
    "displaying",
    "takes",
    "lot",
    "processing",
    "needs",
    "computer",
    "needs",
    "assign",
    "resizing",
    "rescaling",
    "actually",
    "trying",
    "get",
    "rid",
    "information",
    "rescaling",
    "video",
    "implies",
    "modifying",
    "height",
    "width",
    "particular",
    "height",
    "width",
    "generally",
    "always",
    "best",
    "practice",
    "downscale",
    "change",
    "width",
    "height",
    "video",
    "files",
    "smaller",
    "value",
    "original",
    "dimensions",
    "reason",
    "cameras",
    "webcam",
    "included",
    "support",
    "going",
    "higher",
    "maximum",
    "capability",
    "example",
    "camera",
    "shoots",
    "720",
    "p",
    "chances",
    "going",
    "able",
    "shoot",
    "1080",
    "p",
    "higher",
    "rescale",
    "video",
    "frame",
    "image",
    "create",
    "function",
    "called",
    "def",
    "rescale",
    "frame",
    "pass",
    "frame",
    "resized",
    "scale",
    "value",
    "default",
    "going",
    "set",
    "point",
    "seven",
    "five",
    "going",
    "next",
    "going",
    "say",
    "equal",
    "frame",
    "dot",
    "shape",
    "one",
    "one",
    "times",
    "scale",
    "going",
    "copy",
    "thing",
    "height",
    "remember",
    "frame",
    "shape",
    "one",
    "basically",
    "width",
    "frame",
    "image",
    "frame",
    "note",
    "shape",
    "zero",
    "basically",
    "height",
    "image",
    "since",
    "width",
    "height",
    "integers",
    "actually",
    "convert",
    "floating",
    "point",
    "values",
    "integer",
    "converting",
    "iron",
    "going",
    "going",
    "create",
    "variable",
    "called",
    "dimensions",
    "set",
    "equal",
    "table",
    "width",
    "comma",
    "height",
    "actually",
    "return",
    "cv",
    "resize",
    "frame",
    "dimensions",
    "pass",
    "interpolations",
    "cv",
    "dot",
    "school",
    "area",
    "talking",
    "cv",
    "dot",
    "resize",
    "upcoming",
    "video",
    "note",
    "resizes",
    "frame",
    "particular",
    "dimension",
    "function",
    "takes",
    "frame",
    "scales",
    "frame",
    "particular",
    "scalar",
    "value",
    "default",
    "point",
    "seven",
    "five",
    "let",
    "actually",
    "try",
    "see",
    "action",
    "let",
    "go",
    "back",
    "readout",
    "p",
    "grab",
    "code",
    "paste",
    "need",
    "us",
    "uncomment",
    "going",
    "read",
    "frame",
    "going",
    "create",
    "new",
    "frame",
    "call",
    "frame",
    "go",
    "resized",
    "set",
    "equal",
    "rescale",
    "frame",
    "frame",
    "let",
    "leave",
    "scale",
    "value",
    "point",
    "seven",
    "five",
    "actually",
    "display",
    "video",
    "resized",
    "passing",
    "frame",
    "scope",
    "resized",
    "resize",
    "let",
    "save",
    "run",
    "python",
    "rescale",
    "del",
    "p",
    "error",
    "okay",
    "need",
    "let",
    "close",
    "save",
    "run",
    "original",
    "video",
    "actually",
    "resize",
    "video",
    "video",
    "resize",
    "point",
    "seven",
    "570",
    "5",
    "modify",
    "changing",
    "scale",
    "value",
    "maybe",
    "point",
    "two",
    "rescaling",
    "20",
    "get",
    "even",
    "smaller",
    "video",
    "new",
    "window",
    "let",
    "close",
    "also",
    "apply",
    "images",
    "let",
    "uncomment",
    "change",
    "cat",
    "dot",
    "jpg",
    "receive",
    "show",
    "image",
    "pawson",
    "resized",
    "image",
    "create",
    "resize",
    "image",
    "calling",
    "rescale",
    "frame",
    "could",
    "pass",
    "img",
    "let",
    "see",
    "rome",
    "small",
    "videos",
    "concerned",
    "actually",
    "big",
    "image",
    "large",
    "image",
    "recent",
    "version",
    "image",
    "let",
    "close",
    "another",
    "way",
    "rescaling",
    "resizing",
    "video",
    "frames",
    "specifically",
    "actually",
    "using",
    "capture",
    "dot",
    "set",
    "method",
    "specifically",
    "videos",
    "work",
    "images",
    "let",
    "go",
    "ahead",
    "try",
    "let",
    "call",
    "depth",
    "change",
    "rez",
    "changing",
    "changing",
    "resolution",
    "image",
    "video",
    "pass",
    "width",
    "height",
    "going",
    "going",
    "say",
    "capture",
    "set",
    "three",
    "comma",
    "going",
    "thing",
    "capture",
    "dot",
    "set",
    "four",
    "comma",
    "height",
    "three",
    "info",
    "basically",
    "stands",
    "properties",
    "capture",
    "class",
    "three",
    "references",
    "width",
    "full",
    "references",
    "height",
    "also",
    "expand",
    "maybe",
    "change",
    "brightness",
    "image",
    "think",
    "reference",
    "setting",
    "going",
    "interested",
    "width",
    "height",
    "want",
    "point",
    "method",
    "work",
    "images",
    "videos",
    "live",
    "video",
    "basically",
    "everything",
    "use",
    "rescale",
    "frame",
    "method",
    "changes",
    "function",
    "works",
    "live",
    "video",
    "video",
    "read",
    "external",
    "camera",
    "webcam",
    "instance",
    "video",
    "going",
    "currently",
    "going",
    "work",
    "standalone",
    "video",
    "files",
    "video",
    "files",
    "already",
    "exist",
    "work",
    "trying",
    "change",
    "resolution",
    "live",
    "video",
    "go",
    "function",
    "trying",
    "change",
    "resolution",
    "old",
    "already",
    "existing",
    "video",
    "go",
    "function",
    "pretty",
    "much",
    "video",
    "talked",
    "resize",
    "rescale",
    "video",
    "frames",
    "images",
    "open",
    "cv",
    "next",
    "video",
    "talking",
    "draw",
    "shapes",
    "write",
    "text",
    "image",
    "everything",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "going",
    "talking",
    "draw",
    "write",
    "images",
    "go",
    "ahead",
    "create",
    "new",
    "file",
    "call",
    "draw",
    "dot",
    "p",
    "going",
    "input",
    "cv",
    "two",
    "cv",
    "going",
    "input",
    "numpy",
    "package",
    "open",
    "cv",
    "installed",
    "previously",
    "going",
    "input",
    "mp",
    "read",
    "image",
    "saying",
    "omg",
    "equal",
    "read",
    "person",
    "photos",
    "photos",
    "slash",
    "cat",
    "dot",
    "jpg",
    "display",
    "image",
    "new",
    "window",
    "receive",
    "weight",
    "key",
    "zero",
    "two",
    "ways",
    "draw",
    "images",
    "actually",
    "drawing",
    "standalone",
    "images",
    "like",
    "image",
    "cat",
    "create",
    "dummy",
    "image",
    "blank",
    "image",
    "work",
    "way",
    "create",
    "blank",
    "image",
    "saying",
    "blank",
    "equal",
    "np",
    "dot",
    "zeros",
    "shape",
    "500",
    "give",
    "data",
    "type",
    "ui",
    "id",
    "eight",
    "basically",
    "image",
    "datatype",
    "image",
    "want",
    "try",
    "see",
    "image",
    "see",
    "image",
    "looks",
    "like",
    "say",
    "blank",
    "pass",
    "like",
    "save",
    "run",
    "python",
    "drawed",
    "p",
    "basically",
    "blank",
    "image",
    "draw",
    "going",
    "using",
    "instead",
    "drawing",
    "cat",
    "image",
    "feel",
    "free",
    "use",
    "cat",
    "image",
    "like",
    "first",
    "thing",
    "going",
    "try",
    "paint",
    "trying",
    "paint",
    "image",
    "certain",
    "color",
    "way",
    "saying",
    "blank",
    "reference",
    "pixels",
    "set",
    "equal",
    "zero",
    "comma",
    "255",
    "comma",
    "zero",
    "painting",
    "entire",
    "image",
    "green",
    "display",
    "image",
    "saying",
    "green",
    "passing",
    "blank",
    "image",
    "save",
    "run",
    "broadcast",
    "yeah",
    "okay",
    "need",
    "give",
    "shape",
    "three",
    "basically",
    "giving",
    "shape",
    "height",
    "width",
    "number",
    "color",
    "channels",
    "keep",
    "mind",
    "save",
    "green",
    "image",
    "get",
    "cool",
    "even",
    "change",
    "try",
    "change",
    "red",
    "zero",
    "comma",
    "save",
    "get",
    "red",
    "image",
    "also",
    "call",
    "certain",
    "portion",
    "image",
    "basically",
    "giving",
    "range",
    "pixels",
    "say",
    "200",
    "300",
    "save",
    "run",
    "got",
    "red",
    "square",
    "image",
    "next",
    "thing",
    "going",
    "going",
    "draw",
    "rectangle",
    "way",
    "using",
    "cv",
    "rectangle",
    "method",
    "method",
    "takes",
    "image",
    "draw",
    "rectangle",
    "case",
    "blank",
    "takes",
    "point",
    "color",
    "thickness",
    "line",
    "type",
    "like",
    "point",
    "one",
    "specifically",
    "zero",
    "comma",
    "zero",
    "origin",
    "go",
    "way",
    "across",
    "250",
    "comma",
    "let",
    "give",
    "color",
    "zero",
    "comma",
    "255",
    "comma",
    "zero",
    "green",
    "give",
    "thickness",
    "let",
    "say",
    "two",
    "basically",
    "saying",
    "thickness",
    "borders",
    "done",
    "display",
    "image",
    "saying",
    "let",
    "call",
    "rectangle",
    "passing",
    "passing",
    "blank",
    "image",
    "comment",
    "since",
    "need",
    "anymore",
    "get",
    "green",
    "rectangle",
    "goes",
    "way",
    "origin",
    "250",
    "comma",
    "play",
    "around",
    "like",
    "go",
    "250",
    "maybe",
    "goes",
    "way",
    "across",
    "image",
    "basically",
    "divide",
    "image",
    "half",
    "way",
    "filling",
    "image",
    "certain",
    "color",
    "way",
    "instead",
    "saying",
    "thickness",
    "equal",
    "two",
    "say",
    "thickness",
    "equal",
    "cv",
    "dot",
    "field",
    "basically",
    "fills",
    "rectangle",
    "get",
    "green",
    "rectangle",
    "alternatively",
    "also",
    "specify",
    "negative",
    "one",
    "negative",
    "one",
    "get",
    "result",
    "also",
    "instead",
    "giving",
    "fixed",
    "values",
    "like",
    "250",
    "500",
    "could",
    "could",
    "say",
    "img",
    "done",
    "shape",
    "zero",
    "one",
    "divided",
    "divided",
    "two",
    "image",
    "dome",
    "shape",
    "zero",
    "divided",
    "divided",
    "two",
    "let",
    "save",
    "run",
    "image",
    "fact",
    "god",
    "blank",
    "blank",
    "save",
    "run",
    "get",
    "nice",
    "little",
    "rectangle",
    "square",
    "image",
    "basically",
    "scaled",
    "rectangle",
    "instead",
    "entire",
    "square",
    "rectangle",
    "basically",
    "dimensions",
    "half",
    "original",
    "image",
    "moving",
    "let",
    "try",
    "draw",
    "circle",
    "draw",
    "circle",
    "also",
    "fairly",
    "straightforward",
    "cv",
    "dot",
    "circle",
    "pass",
    "blank",
    "image",
    "give",
    "center",
    "basically",
    "coordinates",
    "center",
    "let",
    "set",
    "midpoint",
    "image",
    "saying",
    "250",
    "comma",
    "alternatively",
    "could",
    "also",
    "get",
    "let",
    "give",
    "radius",
    "40",
    "pixels",
    "give",
    "color",
    "zero",
    "comma",
    "zero",
    "comma",
    "255",
    "red",
    "bgr",
    "give",
    "thickness",
    "let",
    "say",
    "three",
    "display",
    "image",
    "say",
    "circle",
    "equal",
    "blank",
    "get",
    "nice",
    "little",
    "circle",
    "center",
    "250",
    "km",
    "250",
    "radius",
    "40",
    "pixels",
    "also",
    "fill",
    "image",
    "giving",
    "thickness",
    "negative",
    "one",
    "get",
    "nice",
    "little",
    "dot",
    "middle",
    "cool",
    "something",
    "else",
    "forgot",
    "draw",
    "line",
    "standalone",
    "line",
    "image",
    "fairly",
    "straightforward",
    "say",
    "draw",
    "line",
    "use",
    "line",
    "method",
    "takes",
    "image",
    "draw",
    "line",
    "two",
    "points",
    "copy",
    "points",
    "basically",
    "everything",
    "basically",
    "draws",
    "point",
    "zero",
    "comma",
    "zero",
    "half",
    "image",
    "dimensions",
    "252",
    "draws",
    "line",
    "color",
    "zero",
    "comma",
    "255",
    "comma",
    "zero",
    "let",
    "set",
    "full",
    "white",
    "2255",
    "green",
    "thickness",
    "specify",
    "three",
    "display",
    "image",
    "see",
    "show",
    "colas",
    "line",
    "rule",
    "line",
    "blank",
    "image",
    "get",
    "line",
    "goes",
    "across",
    "zero",
    "comma",
    "zero",
    "comma",
    "zero",
    "250",
    "comma",
    "let",
    "try",
    "play",
    "around",
    "let",
    "draw",
    "line",
    "100",
    "maybe",
    "goes",
    "way",
    "300",
    "400",
    "save",
    "got",
    "line",
    "goes",
    "100",
    "100",
    "300",
    "comma",
    "cool",
    "finally",
    "last",
    "thing",
    "discuss",
    "video",
    "write",
    "text",
    "image",
    "right",
    "text",
    "image",
    "way",
    "straightforward",
    "see",
    "cv",
    "dot",
    "put",
    "text",
    "put",
    "text",
    "blank",
    "image",
    "specify",
    "want",
    "put",
    "let",
    "say",
    "hello",
    "give",
    "origin",
    "basically",
    "want",
    "draw",
    "image",
    "let",
    "set",
    "225",
    "also",
    "specify",
    "font",
    "face",
    "open",
    "cv",
    "comes",
    "inbuilt",
    "fonts",
    "using",
    "cv",
    "dot",
    "font",
    "unschool",
    "hershey",
    "ns",
    "go",
    "using",
    "triple",
    "x",
    "complex",
    "duplex",
    "plain",
    "script",
    "simplex",
    "lot",
    "inbuilt",
    "phones",
    "let",
    "use",
    "triplex",
    "let",
    "give",
    "font",
    "scale",
    "basically",
    "much",
    "want",
    "scale",
    "font",
    "let",
    "set",
    "want",
    "scale",
    "font",
    "let",
    "give",
    "color",
    "zero",
    "comma",
    "255",
    "comma",
    "zero",
    "give",
    "thickness",
    "two",
    "commit",
    "display",
    "image",
    "show",
    "let",
    "call",
    "text",
    "pass",
    "blank",
    "image",
    "get",
    "text",
    "placed",
    "image",
    "play",
    "around",
    "say",
    "hello",
    "name",
    "jason",
    "save",
    "run",
    "goes",
    "screen",
    "dealing",
    "large",
    "images",
    "way",
    "actually",
    "handling",
    "except",
    "maybe",
    "changing",
    "margins",
    "bit",
    "saying",
    "let",
    "say",
    "zero",
    "comma",
    "two",
    "five",
    "sounds",
    "zero",
    "says",
    "hello",
    "name",
    "yes",
    "video",
    "talked",
    "draw",
    "shapes",
    "draw",
    "lines",
    "rectangles",
    "circles",
    "write",
    "text",
    "image",
    "next",
    "video",
    "talking",
    "basic",
    "functions",
    "open",
    "cv",
    "likely",
    "going",
    "come",
    "across",
    "whatever",
    "project",
    "computer",
    "vision",
    "end",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "going",
    "talking",
    "basic",
    "functions",
    "open",
    "cv",
    "going",
    "come",
    "across",
    "whatever",
    "computer",
    "vision",
    "project",
    "end",
    "building",
    "let",
    "start",
    "first",
    "function",
    "converting",
    "image",
    "grayscale",
    "written",
    "image",
    "displayed",
    "image",
    "new",
    "window",
    "currently",
    "bgr",
    "image",
    "three",
    "channel",
    "blue",
    "green",
    "red",
    "image",
    "ways",
    "open",
    "cv",
    "essentially",
    "convert",
    "bgr",
    "images",
    "grayscale",
    "see",
    "intensity",
    "distribution",
    "pixels",
    "rather",
    "color",
    "way",
    "saying",
    "gray",
    "equal",
    "cv",
    "dot",
    "cbt",
    "color",
    "pass",
    "image",
    "want",
    "convert",
    "img",
    "specify",
    "color",
    "code",
    "kind",
    "code",
    "cv",
    "dealt",
    "kind",
    "unskilled",
    "bgr",
    "great",
    "since",
    "converting",
    "bgr",
    "image",
    "grayscale",
    "image",
    "go",
    "ahead",
    "display",
    "image",
    "saying",
    "cv",
    "show",
    "passing",
    "gray",
    "pass",
    "gray",
    "image",
    "save",
    "run",
    "python",
    "original",
    "image",
    "grayscale",
    "image",
    "let",
    "try",
    "another",
    "image",
    "slide",
    "image",
    "park",
    "boston",
    "save",
    "maybe",
    "change",
    "boston",
    "bgr",
    "image",
    "open",
    "cv",
    "corresponding",
    "grayscale",
    "image",
    "nothing",
    "fancy",
    "converted",
    "bgr",
    "image",
    "grayscale",
    "image",
    "next",
    "function",
    "going",
    "discuss",
    "blur",
    "image",
    "blurring",
    "image",
    "essentially",
    "removes",
    "noise",
    "exists",
    "image",
    "example",
    "image",
    "may",
    "extra",
    "elements",
    "bad",
    "lighting",
    "image",
    "taken",
    "maybe",
    "issues",
    "camera",
    "sensor",
    "ways",
    "actually",
    "reduce",
    "noise",
    "applying",
    "slight",
    "blur",
    "way",
    "many",
    "blurring",
    "techniques",
    "get",
    "advanced",
    "part",
    "goes",
    "going",
    "use",
    "gaussian",
    "blur",
    "going",
    "going",
    "create",
    "blurred",
    "image",
    "think",
    "blur",
    "equal",
    "cv",
    "dot",
    "gaussian",
    "blur",
    "image",
    "take",
    "associate",
    "image",
    "img",
    "take",
    "kernel",
    "size",
    "actually",
    "two",
    "two",
    "tuple",
    "basically",
    "window",
    "size",
    "open",
    "cv",
    "uses",
    "compute",
    "blown",
    "image",
    "get",
    "advanced",
    "part",
    "scope",
    "worry",
    "much",
    "know",
    "kernel",
    "size",
    "odd",
    "number",
    "let",
    "start",
    "real",
    "simple",
    "keep",
    "kernel",
    "size",
    "three",
    "three",
    "another",
    "thing",
    "specify",
    "cv",
    "dot",
    "border",
    "school",
    "default",
    "go",
    "ahead",
    "try",
    "display",
    "image",
    "blur",
    "pawson",
    "blue",
    "able",
    "notice",
    "differences",
    "image",
    "blur",
    "applied",
    "right",
    "people",
    "background",
    "pretty",
    "clear",
    "image",
    "slightly",
    "blurred",
    "increase",
    "blind",
    "image",
    "essentially",
    "increase",
    "kernel",
    "size",
    "three",
    "three",
    "seven",
    "seven",
    "save",
    "run",
    "image",
    "way",
    "blurred",
    "previous",
    "image",
    "next",
    "function",
    "going",
    "discuss",
    "create",
    "edge",
    "cascade",
    "basically",
    "trying",
    "find",
    "edges",
    "present",
    "image",
    "many",
    "edge",
    "cascades",
    "available",
    "video",
    "going",
    "using",
    "canny",
    "edge",
    "detector",
    "pretty",
    "famous",
    "computer",
    "vision",
    "world",
    "essentially",
    "multi",
    "step",
    "process",
    "involves",
    "lot",
    "blurring",
    "involves",
    "lot",
    "grading",
    "computations",
    "stuff",
    "like",
    "gon",
    "na",
    "say",
    "kenny",
    "kenny",
    "equal",
    "cv",
    "dot",
    "kenny",
    "pass",
    "image",
    "pass",
    "threshold",
    "values",
    "going",
    "say",
    "125",
    "let",
    "go",
    "ahead",
    "try",
    "display",
    "image",
    "get",
    "kenny",
    "images",
    "pass",
    "county",
    "save",
    "run",
    "edges",
    "found",
    "image",
    "see",
    "hardly",
    "edges",
    "found",
    "sky",
    "lot",
    "features",
    "trees",
    "buildings",
    "quite",
    "know",
    "features",
    "edges",
    "grass",
    "stuff",
    "reduce",
    "edges",
    "essentially",
    "blurring",
    "image",
    "way",
    "instead",
    "passing",
    "img",
    "pass",
    "blur",
    "see",
    "run",
    "see",
    "far",
    "less",
    "edges",
    "found",
    "image",
    "way",
    "basically",
    "reduce",
    "amount",
    "edges",
    "found",
    "lot",
    "applying",
    "lot",
    "blur",
    "get",
    "rid",
    "edges",
    "applying",
    "slight",
    "blur",
    "next",
    "function",
    "going",
    "discuss",
    "dilate",
    "image",
    "using",
    "specific",
    "structuring",
    "element",
    "structuring",
    "element",
    "going",
    "use",
    "actually",
    "edges",
    "canny",
    "edges",
    "found",
    "gon",
    "na",
    "say",
    "dominating",
    "image",
    "way",
    "saying",
    "dilated",
    "equal",
    "cv",
    "dot",
    "dilate",
    "take",
    "structuring",
    "element",
    "basically",
    "canny",
    "edges",
    "take",
    "kernel",
    "size",
    "specify",
    "three",
    "three",
    "also",
    "take",
    "n",
    "iterations",
    "one",
    "dilation",
    "applied",
    "using",
    "several",
    "iterations",
    "time",
    "going",
    "stick",
    "one",
    "go",
    "ahead",
    "try",
    "display",
    "image",
    "saying",
    "cv",
    "dot",
    "shope",
    "call",
    "dilated",
    "pass",
    "david",
    "save",
    "run",
    "edges",
    "dilated",
    "edges",
    "maybe",
    "increase",
    "kernel",
    "size",
    "maybe",
    "seven",
    "seven",
    "tried",
    "see",
    "hold",
    "nothing",
    "much",
    "done",
    "much",
    "difference",
    "let",
    "try",
    "increase",
    "number",
    "iterations",
    "maybe",
    "three",
    "definitely",
    "way",
    "thicker",
    "gon",
    "na",
    "see",
    "subtle",
    "differences",
    "amount",
    "features",
    "edges",
    "find",
    "way",
    "eroding",
    "dilated",
    "image",
    "get",
    "back",
    "structuring",
    "element",
    "going",
    "perfect",
    "work",
    "cases",
    "gon",
    "na",
    "say",
    "call",
    "roading",
    "call",
    "eroded",
    "equal",
    "cv",
    "erode",
    "take",
    "dilated",
    "image",
    "pass",
    "dilated",
    "take",
    "kernel",
    "size",
    "let",
    "start",
    "three",
    "three",
    "given",
    "n",
    "iterations",
    "one",
    "display",
    "image",
    "show",
    "coolest",
    "clothes",
    "eroded",
    "eroded",
    "structuring",
    "element",
    "dilate",
    "image",
    "basically",
    "result",
    "get",
    "eroding",
    "image",
    "structural",
    "element",
    "make",
    "features",
    "see",
    "subtle",
    "change",
    "edges",
    "thickness",
    "edges",
    "maybe",
    "try",
    "match",
    "values",
    "attempt",
    "attempt",
    "get",
    "back",
    "edge",
    "cascade",
    "yes",
    "got",
    "edges",
    "back",
    "see",
    "compare",
    "two",
    "look",
    "pretty",
    "much",
    "edges",
    "essentially",
    "follow",
    "steps",
    "cases",
    "get",
    "back",
    "edge",
    "cascade",
    "probably",
    "last",
    "function",
    "going",
    "discuss",
    "resize",
    "crop",
    "image",
    "going",
    "start",
    "resize",
    "come",
    "resizing",
    "video",
    "frames",
    "images",
    "previous",
    "video",
    "one",
    "previous",
    "videos",
    "going",
    "touch",
    "cbo",
    "resize",
    "function",
    "bit",
    "going",
    "say",
    "resized",
    "resized",
    "equal",
    "cv",
    "dot",
    "resize",
    "take",
    "image",
    "resized",
    "take",
    "destination",
    "size",
    "let",
    "set",
    "500",
    "essentially",
    "takes",
    "image",
    "park",
    "resize",
    "image",
    "500",
    "500",
    "ignoring",
    "aspect",
    "ratio",
    "display",
    "image",
    "saying",
    "saved",
    "sure",
    "resized",
    "resized",
    "save",
    "run",
    "let",
    "go",
    "back",
    "image",
    "original",
    "image",
    "image",
    "resized",
    "500",
    "default",
    "interpolation",
    "occurs",
    "background",
    "cv",
    "dot",
    "scope",
    "area",
    "interpolation",
    "method",
    "useful",
    "shrinking",
    "image",
    "dimensions",
    "smaller",
    "original",
    "dimensions",
    "cases",
    "trying",
    "enlarge",
    "image",
    "scale",
    "image",
    "much",
    "larger",
    "dimensions",
    "probably",
    "use",
    "inter",
    "underscore",
    "linear",
    "inter",
    "scope",
    "cubic",
    "cubic",
    "slowest",
    "among",
    "resulting",
    "image",
    "get",
    "much",
    "higher",
    "quality",
    "inter",
    "scope",
    "area",
    "inter",
    "underscore",
    "linear",
    "let",
    "touch",
    "cropping",
    "basically",
    "utilizing",
    "fact",
    "images",
    "arrays",
    "employ",
    "something",
    "called",
    "array",
    "slicing",
    "select",
    "portion",
    "image",
    "basis",
    "pixel",
    "values",
    "say",
    "cropped",
    "equal",
    "image",
    "select",
    "region",
    "50",
    "200",
    "display",
    "image",
    "cole",
    "cropped",
    "possibly",
    "cropped",
    "cropped",
    "image",
    "let",
    "go",
    "back",
    "original",
    "image",
    "try",
    "superimpose",
    "probably",
    "going",
    "yeah",
    "basically",
    "portion",
    "pretty",
    "much",
    "video",
    "talked",
    "basic",
    "functions",
    "open",
    "cv",
    "talked",
    "converting",
    "image",
    "grayscale",
    "applying",
    "blur",
    "creating",
    "edge",
    "cascade",
    "dilating",
    "image",
    "eroding",
    "dilated",
    "image",
    "resizing",
    "image",
    "trying",
    "crop",
    "image",
    "using",
    "array",
    "slicing",
    "next",
    "video",
    "going",
    "talking",
    "image",
    "transformations",
    "open",
    "cv",
    "translation",
    "rotation",
    "resizing",
    "flipping",
    "cropping",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "python",
    "open",
    "cv",
    "course",
    "section",
    "going",
    "cover",
    "basic",
    "image",
    "transformations",
    "common",
    "techniques",
    "would",
    "likely",
    "apply",
    "images",
    "including",
    "translation",
    "rotation",
    "resizing",
    "clipping",
    "cropping",
    "let",
    "start",
    "translation",
    "translation",
    "basically",
    "shifting",
    "image",
    "along",
    "x",
    "axis",
    "using",
    "translation",
    "shift",
    "image",
    "left",
    "right",
    "combination",
    "translate",
    "image",
    "create",
    "translating",
    "function",
    "gon",
    "na",
    "call",
    "def",
    "translate",
    "translation",
    "function",
    "take",
    "image",
    "translate",
    "take",
    "x",
    "x",
    "basically",
    "stands",
    "number",
    "pixels",
    "want",
    "shift",
    "along",
    "x",
    "axis",
    "axis",
    "respectively",
    "translate",
    "image",
    "need",
    "create",
    "translation",
    "matrix",
    "going",
    "call",
    "transmit",
    "equal",
    "np",
    "dot",
    "float",
    "take",
    "list",
    "two",
    "lists",
    "inside",
    "first",
    "list",
    "going",
    "say",
    "one",
    "comma",
    "zero",
    "comma",
    "x",
    "zero",
    "comma",
    "one",
    "comma",
    "since",
    "using",
    "numpy",
    "import",
    "numpy",
    "import",
    "numpy",
    "np",
    "created",
    "translation",
    "matrix",
    "essentially",
    "get",
    "dimensions",
    "image",
    "saying",
    "dimensions",
    "tuple",
    "image",
    "shave",
    "one",
    "width",
    "image",
    "dot",
    "shape",
    "zero",
    "height",
    "return",
    "cv",
    "dot",
    "warp",
    "fine",
    "take",
    "image",
    "matrix",
    "trans",
    "mit",
    "animal",
    "taking",
    "dimensions",
    "data",
    "essentially",
    "translate",
    "image",
    "want",
    "mention",
    "negative",
    "values",
    "x",
    "essentially",
    "translating",
    "image",
    "left",
    "negative",
    "negative",
    "values",
    "implies",
    "shifting",
    "positive",
    "x",
    "values",
    "implies",
    "shifting",
    "right",
    "guessed",
    "positive",
    "values",
    "shifted",
    "let",
    "create",
    "first",
    "translated",
    "image",
    "setting",
    "equal",
    "translate",
    "going",
    "pass",
    "image",
    "image",
    "going",
    "shift",
    "image",
    "right",
    "100",
    "pixels",
    "100",
    "pixels",
    "receive",
    "show",
    "translated",
    "translate",
    "tip",
    "save",
    "run",
    "python",
    "krones",
    "formations",
    "dot",
    "p",
    "translated",
    "image",
    "shifted",
    "100",
    "pixels",
    "shifted",
    "right",
    "100",
    "pixels",
    "let",
    "change",
    "let",
    "shift",
    "image",
    "left",
    "100",
    "pixels",
    "100",
    "pixels",
    "pass",
    "negative",
    "values",
    "x",
    "moved",
    "left",
    "feel",
    "free",
    "play",
    "around",
    "values",
    "see",
    "fit",
    "know",
    "negative",
    "x",
    "shifts",
    "left",
    "negative",
    "shoves",
    "x",
    "shifted",
    "right",
    "positive",
    "values",
    "shifted",
    "moving",
    "let",
    "talk",
    "rotation",
    "rotation",
    "exactly",
    "sounds",
    "like",
    "rotating",
    "image",
    "angle",
    "open",
    "cv",
    "allows",
    "specify",
    "point",
    "rotation",
    "point",
    "like",
    "rotate",
    "image",
    "around",
    "usually",
    "center",
    "open",
    "cv",
    "could",
    "specify",
    "arbitrary",
    "point",
    "could",
    "corner",
    "could",
    "10",
    "pixels",
    "right",
    "40",
    "pixels",
    "shift",
    "image",
    "around",
    "point",
    "draw",
    "rotate",
    "image",
    "create",
    "rotating",
    "function",
    "let",
    "call",
    "dev",
    "rotate",
    "take",
    "image",
    "angle",
    "rotate",
    "around",
    "rotation",
    "point",
    "going",
    "say",
    "going",
    "set",
    "going",
    "grab",
    "height",
    "width",
    "image",
    "pressing",
    "setting",
    "equal",
    "img",
    "dot",
    "shape",
    "first",
    "two",
    "values",
    "basically",
    "rotation",
    "point",
    "none",
    "going",
    "assume",
    "want",
    "rotate",
    "around",
    "center",
    "going",
    "say",
    "rot",
    "point",
    "equal",
    "width",
    "divided",
    "two",
    "divided",
    "two",
    "height",
    "divided",
    "divided",
    "two",
    "essentially",
    "create",
    "rotation",
    "matrix",
    "like",
    "translation",
    "matrix",
    "setting",
    "equal",
    "rot",
    "met",
    "equal",
    "cv",
    "dot",
    "get",
    "rotation",
    "matrix",
    "2d",
    "going",
    "pass",
    "center",
    "rotation",
    "point",
    "angle",
    "rotate",
    "around",
    "angle",
    "scale",
    "value",
    "interested",
    "scaling",
    "image",
    "rotated",
    "set",
    "value",
    "set",
    "dimensions",
    "variable",
    "equal",
    "width",
    "height",
    "return",
    "rotated",
    "image",
    "cv",
    "warp",
    "fine",
    "image",
    "rot",
    "met",
    "destination",
    "size",
    "dimensions",
    "need",
    "function",
    "create",
    "rotated",
    "image",
    "setting",
    "equal",
    "rotate",
    "rotate",
    "original",
    "image",
    "45",
    "degrees",
    "let",
    "display",
    "image",
    "call",
    "rotated",
    "pass",
    "rotated",
    "save",
    "rock",
    "rotated",
    "image",
    "see",
    "rotated",
    "counterclockwise",
    "45",
    "degrees",
    "somehow",
    "wanted",
    "rotate",
    "image",
    "clockwise",
    "specify",
    "negative",
    "values",
    "angle",
    "rotate",
    "image",
    "around",
    "rotated",
    "clockwise",
    "also",
    "rotate",
    "rotated",
    "image",
    "take",
    "image",
    "rotated",
    "45",
    "degrees",
    "let",
    "call",
    "rotated",
    "rotated",
    "rotated",
    "equal",
    "rotate",
    "rotate",
    "tid",
    "rotate",
    "image",
    "another",
    "45",
    "degrees",
    "rotating",
    "clockwise",
    "see",
    "show",
    "called",
    "rotated",
    "rotated",
    "pause",
    "rotated",
    "rotated",
    "whatever",
    "rotate",
    "rotate",
    "rotated",
    "image",
    "reason",
    "black",
    "lines",
    "included",
    "image",
    "part",
    "image",
    "going",
    "black",
    "default",
    "took",
    "image",
    "rotated",
    "45",
    "degrees",
    "essentially",
    "rotated",
    "image",
    "introduce",
    "black",
    "triangles",
    "tried",
    "rotate",
    "image",
    "angle",
    "also",
    "trying",
    "rotate",
    "black",
    "triangles",
    "along",
    "get",
    "kind",
    "skewed",
    "image",
    "additional",
    "triangles",
    "included",
    "save",
    "trouble",
    "basically",
    "add",
    "angles",
    "get",
    "final",
    "angle",
    "change",
    "90",
    "retake",
    "original",
    "image",
    "negative",
    "essentially",
    "image",
    "trying",
    "go",
    "take",
    "image",
    "rotated",
    "45",
    "degrees",
    "clockwise",
    "rotate",
    "45",
    "degrees",
    "image",
    "45",
    "degrees",
    "save",
    "trouble",
    "add",
    "two",
    "angle",
    "values",
    "far",
    "covered",
    "two",
    "image",
    "transformations",
    "translation",
    "rotation",
    "going",
    "explore",
    "resize",
    "image",
    "nothing",
    "different",
    "discussed",
    "previously",
    "let",
    "touch",
    "adjust",
    "bit",
    "resizing",
    "create",
    "resized",
    "variable",
    "set",
    "equal",
    "cv",
    "resize",
    "pass",
    "image",
    "resize",
    "destination",
    "signs",
    "maybe",
    "500",
    "default",
    "interpolation",
    "cv",
    "dot",
    "inter",
    "underscore",
    "area",
    "maybe",
    "change",
    "underscore",
    "linear",
    "inter",
    "underscore",
    "cubic",
    "definitely",
    "matter",
    "preference",
    "depending",
    "whether",
    "enlarging",
    "shrinking",
    "image",
    "shrinking",
    "image",
    "probably",
    "go",
    "underscore",
    "area",
    "stick",
    "default",
    "enlarging",
    "image",
    "could",
    "probably",
    "use",
    "inter",
    "underscore",
    "linear",
    "dansko",
    "cubic",
    "cubic",
    "slower",
    "resulting",
    "image",
    "better",
    "high",
    "quality",
    "think",
    "different",
    "discussed",
    "display",
    "image",
    "resize",
    "passing",
    "resized",
    "save",
    "run",
    "got",
    "resized",
    "image",
    "next",
    "flipping",
    "flip",
    "image",
    "need",
    "define",
    "function",
    "need",
    "create",
    "variable",
    "set",
    "equal",
    "cv",
    "dot",
    "flip",
    "take",
    "image",
    "flipped",
    "code",
    "flip",
    "code",
    "could",
    "either",
    "01",
    "negative",
    "one",
    "zero",
    "basically",
    "implies",
    "flipping",
    "image",
    "vertically",
    "x",
    "axis",
    "one",
    "specifies",
    "want",
    "flip",
    "image",
    "horizontally",
    "axis",
    "negative",
    "one",
    "basically",
    "implies",
    "flipping",
    "image",
    "vertically",
    "well",
    "horizontally",
    "let",
    "start",
    "zero",
    "claiming",
    "vertically",
    "show",
    "call",
    "flip",
    "parson",
    "boop",
    "save",
    "run",
    "image",
    "clipped",
    "vertically",
    "let",
    "try",
    "horizontal",
    "clip",
    "get",
    "horizontal",
    "flip",
    "surely",
    "see",
    "whether",
    "horizontal",
    "flip",
    "bring",
    "two",
    "images",
    "together",
    "looked",
    "like",
    "mirror",
    "images",
    "flipped",
    "horizontally",
    "kind",
    "symmetric",
    "image",
    "obvious",
    "bring",
    "together",
    "maybe",
    "find",
    "difference",
    "could",
    "also",
    "try",
    "flip",
    "image",
    "vertically",
    "horizontally",
    "specifying",
    "negative",
    "one",
    "flip",
    "code",
    "image",
    "flipped",
    "vertically",
    "well",
    "horizontally",
    "mirror",
    "images",
    "reverse",
    "mirror",
    "images",
    "last",
    "method",
    "cropping",
    "discussed",
    "cropping",
    "going",
    "touch",
    "create",
    "variable",
    "called",
    "corrupt",
    "set",
    "equal",
    "img",
    "perform",
    "array",
    "slicing",
    "200",
    "403",
    "100",
    "save",
    "run",
    "display",
    "search",
    "even",
    "though",
    "show",
    "cool",
    "cropped",
    "past",
    "cropped",
    "save",
    "run",
    "cropped",
    "image",
    "try",
    "bring",
    "together",
    "brought",
    "together",
    "cutting",
    "gram",
    "holders",
    "okay",
    "pretty",
    "much",
    "video",
    "talked",
    "translating",
    "image",
    "rotating",
    "image",
    "resizing",
    "image",
    "flipping",
    "image",
    "cropping",
    "images",
    "basically",
    "covering",
    "basics",
    "basic",
    "image",
    "transformations",
    "course",
    "way",
    "mo",
    "transformation",
    "could",
    "possibly",
    "open",
    "cv",
    "keep",
    "go",
    "simple",
    "beginner",
    "friendly",
    "covering",
    "basic",
    "transformations",
    "video",
    "next",
    "video",
    "going",
    "talking",
    "identify",
    "countries",
    "image",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "going",
    "talking",
    "identify",
    "contours",
    "open",
    "cv",
    "contours",
    "basically",
    "boundaries",
    "objects",
    "line",
    "curve",
    "joins",
    "continuous",
    "points",
    "along",
    "boundary",
    "object",
    "mathematical",
    "point",
    "view",
    "edges",
    "part",
    "get",
    "away",
    "thinking",
    "contours",
    "edges",
    "mathematical",
    "point",
    "view",
    "contours",
    "edges",
    "two",
    "different",
    "things",
    "contours",
    "useful",
    "tools",
    "get",
    "shape",
    "analysis",
    "object",
    "detection",
    "recognition",
    "video",
    "sort",
    "want",
    "introduce",
    "idea",
    "contours",
    "identify",
    "open",
    "cv",
    "first",
    "thing",
    "done",
    "read",
    "file",
    "image",
    "file",
    "displayed",
    "image",
    "using",
    "show",
    "method",
    "next",
    "thing",
    "want",
    "convert",
    "image",
    "grayscale",
    "saying",
    "gray",
    "equal",
    "cv",
    "dot",
    "cvt",
    "color",
    "img",
    "cv",
    "dot",
    "color",
    "go",
    "bgr",
    "great",
    "display",
    "know",
    "footing",
    "going",
    "run",
    "python",
    "cantu",
    "p",
    "get",
    "gray",
    "image",
    "want",
    "essentially",
    "grab",
    "edges",
    "image",
    "using",
    "canny",
    "edge",
    "detector",
    "going",
    "say",
    "kenny",
    "equal",
    "cv",
    "kenny",
    "going",
    "pass",
    "img",
    "going",
    "give",
    "threshold",
    "values",
    "125",
    "display",
    "image",
    "calling",
    "kenny",
    "edges",
    "passing",
    "kenny",
    "save",
    "run",
    "save",
    "save",
    "rom",
    "edges",
    "image",
    "way",
    "find",
    "contours",
    "image",
    "using",
    "find",
    "contours",
    "method",
    "method",
    "basically",
    "returns",
    "two",
    "things",
    "contours",
    "higher",
    "keys",
    "essentially",
    "equal",
    "cv",
    "dot",
    "find",
    "cantu",
    "takes",
    "edges",
    "kenny",
    "takes",
    "mod",
    "find",
    "contents",
    "either",
    "cv",
    "dot",
    "retter",
    "scope",
    "tree",
    "want",
    "hierarchical",
    "contours",
    "rhetoric",
    "external",
    "want",
    "external",
    "countries",
    "retter",
    "list",
    "want",
    "cartoons",
    "image",
    "next",
    "method",
    "pass",
    "actually",
    "cone",
    "approximation",
    "method",
    "going",
    "set",
    "cv",
    "dot",
    "chain",
    "unscrew",
    "approx",
    "ns",
    "go",
    "numb",
    "let",
    "let",
    "top",
    "look",
    "function",
    "essentially",
    "cbo",
    "fund",
    "contours",
    "method",
    "looks",
    "structuring",
    "element",
    "edges",
    "found",
    "image",
    "returns",
    "values",
    "contours",
    "essentially",
    "python",
    "list",
    "coordinates",
    "contours",
    "found",
    "image",
    "hierarchies",
    "really",
    "scope",
    "course",
    "essentially",
    "refers",
    "hierarchical",
    "representation",
    "contours",
    "example",
    "rectangle",
    "inside",
    "rectangle",
    "square",
    "inside",
    "square",
    "circle",
    "hierarchy",
    "essentially",
    "representation",
    "open",
    "cv",
    "uses",
    "find",
    "courtrooms",
    "even",
    "retinal",
    "list",
    "essentially",
    "mod",
    "fine",
    "contries",
    "method",
    "returns",
    "finds",
    "cuantos",
    "read",
    "list",
    "essentially",
    "returns",
    "quantities",
    "find",
    "image",
    "also",
    "reto",
    "external",
    "discussed",
    "radix",
    "download",
    "retrieves",
    "external",
    "conduits",
    "ones",
    "outside",
    "returns",
    "revenue",
    "underscore",
    "tree",
    "returns",
    "hierarchical",
    "contours",
    "contours",
    "hierarchical",
    "system",
    "returned",
    "record",
    "underscore",
    "tree",
    "going",
    "set",
    "list",
    "return",
    "contours",
    "image",
    "next",
    "one",
    "contour",
    "approximation",
    "method",
    "basically",
    "want",
    "approximate",
    "contour",
    "chain",
    "approx",
    "none",
    "nothing",
    "returns",
    "contracts",
    "people",
    "prefer",
    "use",
    "red",
    "chain",
    "approx",
    "symbol",
    "essentially",
    "compresses",
    "quantities",
    "returned",
    "simple",
    "ones",
    "make",
    "sense",
    "example",
    "line",
    "image",
    "use",
    "chain",
    "approx",
    "none",
    "essentially",
    "going",
    "get",
    "contours",
    "coordinates",
    "points",
    "line",
    "chain",
    "approx",
    "simple",
    "essentially",
    "takes",
    "points",
    "line",
    "compresses",
    "two",
    "end",
    "points",
    "makes",
    "sense",
    "line",
    "defined",
    "two",
    "end",
    "points",
    "want",
    "points",
    "nutshell",
    "entire",
    "function",
    "since",
    "cartoons",
    "list",
    "essentially",
    "find",
    "number",
    "cartoons",
    "found",
    "finding",
    "length",
    "list",
    "print",
    "print",
    "length",
    "list",
    "say",
    "fair",
    "say",
    "say",
    "many",
    "contused",
    "found",
    "okay",
    "let",
    "say",
    "ron",
    "found",
    "2794",
    "quantos",
    "image",
    "huge",
    "lot",
    "code",
    "ever",
    "found",
    "image",
    "let",
    "couple",
    "things",
    "let",
    "try",
    "change",
    "chain",
    "approx",
    "symbol",
    "chain",
    "approx",
    "none",
    "see",
    "see",
    "affects",
    "length",
    "difference",
    "two",
    "guessing",
    "points",
    "compress",
    "sin",
    "lot",
    "edges",
    "points",
    "image",
    "lot",
    "compression",
    "let",
    "change",
    "back",
    "symbol",
    "actually",
    "want",
    "want",
    "blow",
    "image",
    "find",
    "edges",
    "let",
    "let",
    "blue",
    "equal",
    "cv",
    "dot",
    "gaussian",
    "blur",
    "pass",
    "gray",
    "image",
    "give",
    "kernel",
    "size",
    "let",
    "let",
    "lot",
    "blur",
    "five",
    "five",
    "maybe",
    "give",
    "default",
    "cv",
    "dot",
    "border",
    "disko",
    "default",
    "want",
    "display",
    "image",
    "call",
    "blur",
    "pass",
    "error",
    "find",
    "edges",
    "blurred",
    "image",
    "let",
    "close",
    "see",
    "significant",
    "reduction",
    "number",
    "quorn",
    "twos",
    "found",
    "blurring",
    "image",
    "went",
    "way",
    "2794",
    "closest",
    "seven",
    "times",
    "blurring",
    "image",
    "kernel",
    "size",
    "five",
    "five",
    "okay",
    "another",
    "way",
    "finding",
    "corner",
    "shoes",
    "stead",
    "using",
    "canny",
    "edge",
    "detector",
    "use",
    "another",
    "function",
    "open",
    "cv",
    "threshold",
    "going",
    "comment",
    "going",
    "going",
    "say",
    "ret",
    "thresh",
    "equal",
    "cv",
    "threshold",
    "take",
    "gray",
    "image",
    "taken",
    "threshold",
    "value",
    "125",
    "maximum",
    "value",
    "worry",
    "much",
    "thresholding",
    "know",
    "threshold",
    "essentially",
    "looks",
    "image",
    "tries",
    "binarize",
    "image",
    "particular",
    "pixel",
    "125",
    "density",
    "pixel",
    "125",
    "going",
    "set",
    "zero",
    "blank",
    "125",
    "set",
    "white",
    "two",
    "five",
    "find",
    "quantities",
    "method",
    "essentially",
    "pass",
    "thrush",
    "value",
    "let",
    "save",
    "let",
    "close",
    "try",
    "run",
    "type",
    "okay",
    "threshold",
    "missing",
    "okay",
    "think",
    "forgot",
    "one",
    "part",
    "specify",
    "threshold",
    "type",
    "cv",
    "dot",
    "thresh",
    "go",
    "binary",
    "binary",
    "raising",
    "image",
    "basically",
    "okay",
    "let",
    "run",
    "839",
    "contours",
    "found",
    "visualize",
    "let",
    "print",
    "ad",
    "display",
    "thresh",
    "image",
    "passing",
    "thresh",
    "run",
    "thresholded",
    "image",
    "using",
    "close",
    "using",
    "125",
    "threshold",
    "value",
    "255",
    "maximum",
    "value",
    "got",
    "thresholded",
    "image",
    "tried",
    "find",
    "current",
    "use",
    "image",
    "got",
    "839",
    "concepts",
    "worry",
    "much",
    "thresholding",
    "business",
    "discuss",
    "advanced",
    "section",
    "goes",
    "depth",
    "know",
    "thresholding",
    "attempts",
    "binarize",
    "image",
    "take",
    "image",
    "convert",
    "binary",
    "form",
    "either",
    "zero",
    "black",
    "white",
    "vi",
    "five",
    "cool",
    "open",
    "cv",
    "actually",
    "visualize",
    "contours",
    "found",
    "image",
    "essentially",
    "drawing",
    "image",
    "real",
    "quick",
    "actually",
    "input",
    "numpy",
    "numpy",
    "np",
    "going",
    "create",
    "blank",
    "variable",
    "set",
    "equal",
    "np",
    "dot",
    "zeros",
    "image",
    "dot",
    "shape",
    "first",
    "two",
    "values",
    "maybe",
    "give",
    "data",
    "type",
    "know",
    "28",
    "display",
    "image",
    "blank",
    "pawsome",
    "blank",
    "visualize",
    "blank",
    "image",
    "work",
    "let",
    "save",
    "go",
    "blank",
    "image",
    "dimensions",
    "original",
    "accounts",
    "image",
    "going",
    "going",
    "draw",
    "contours",
    "blank",
    "image",
    "know",
    "kind",
    "contours",
    "open",
    "cv",
    "found",
    "way",
    "using",
    "cv",
    "dot",
    "draw",
    "contours",
    "method",
    "takes",
    "image",
    "draw",
    "fill",
    "blank",
    "takes",
    "contours",
    "list",
    "case",
    "quantities",
    "list",
    "takes",
    "account",
    "index",
    "basically",
    "many",
    "countries",
    "want",
    "image",
    "since",
    "want",
    "since",
    "want",
    "draw",
    "specify",
    "negative",
    "one",
    "give",
    "color",
    "let",
    "add",
    "bgr",
    "let",
    "set",
    "red",
    "zero",
    "comma",
    "zero",
    "comma",
    "give",
    "thickness",
    "maybe",
    "two",
    "display",
    "blank",
    "image",
    "let",
    "call",
    "contused",
    "join",
    "pass",
    "blank",
    "save",
    "run",
    "okay",
    "error",
    "think",
    "shaped",
    "okay",
    "cartoons",
    "would",
    "draw",
    "image",
    "take",
    "look",
    "threshold",
    "value",
    "thresholded",
    "image",
    "thing",
    "believe",
    "attempted",
    "instead",
    "found",
    "edges",
    "image",
    "edges",
    "image",
    "attempted",
    "draw",
    "blank",
    "image",
    "let",
    "set",
    "let",
    "set",
    "thickness",
    "maybe",
    "one",
    "crisper",
    "view",
    "okay",
    "quantities",
    "drawn",
    "image",
    "fact",
    "try",
    "visualize",
    "kenny",
    "let",
    "actually",
    "visualize",
    "kenny",
    "uncomment",
    "run",
    "blows",
    "point",
    "undefined",
    "okay",
    "image",
    "okay",
    "let",
    "look",
    "kenny",
    "let",
    "look",
    "okay",
    "thing",
    "makes",
    "sense",
    "firing",
    "coaches",
    "method",
    "use",
    "kenny",
    "basis",
    "detecting",
    "finding",
    "controls",
    "let",
    "use",
    "thresholding",
    "method",
    "instead",
    "let",
    "use",
    "kenny",
    "pass",
    "kenny",
    "save",
    "run",
    "okay",
    "pretty",
    "much",
    "thing",
    "right",
    "basically",
    "mirror",
    "image",
    "two",
    "like",
    "said",
    "get",
    "away",
    "thinking",
    "contours",
    "edges",
    "thing",
    "think",
    "edges",
    "programming",
    "point",
    "view",
    "kind",
    "like",
    "edges",
    "image",
    "right",
    "boundaries",
    "curves",
    "join",
    "points",
    "along",
    "boundary",
    "basically",
    "edges",
    "let",
    "try",
    "blow",
    "image",
    "let",
    "uncomment",
    "let",
    "see",
    "think",
    "effect",
    "pass",
    "blood",
    "okay",
    "380",
    "countries",
    "found",
    "mirror",
    "images",
    "generally",
    "recommend",
    "use",
    "scanning",
    "method",
    "first",
    "try",
    "find",
    "corn",
    "using",
    "rather",
    "try",
    "threshold",
    "image",
    "find",
    "contours",
    "like",
    "discuss",
    "advanced",
    "section",
    "type",
    "thresholding",
    "simple",
    "thresholding",
    "disadvantages",
    "maybe",
    "passing",
    "simple",
    "one",
    "value",
    "dread",
    "binarize",
    "image",
    "using",
    "threshold",
    "value",
    "right",
    "ideal",
    "cases",
    "cases",
    "favored",
    "kind",
    "thresholding",
    "simplest",
    "job",
    "pretty",
    "well",
    "pretty",
    "much",
    "video",
    "talked",
    "identify",
    "quantities",
    "open",
    "cv",
    "two",
    "methods",
    "first",
    "trying",
    "find",
    "edge",
    "cascades",
    "image",
    "using",
    "canny",
    "edge",
    "detector",
    "try",
    "find",
    "quantities",
    "using",
    "also",
    "trying",
    "binarize",
    "image",
    "using",
    "cv",
    "dot",
    "threshold",
    "finding",
    "contours",
    "questions",
    "leave",
    "comments",
    "sure",
    "check",
    "otherwise",
    "always",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "advanced",
    "section",
    "course",
    "going",
    "discuss",
    "advanced",
    "concepts",
    "open",
    "cv",
    "going",
    "video",
    "actually",
    "discussing",
    "switch",
    "color",
    "spaces",
    "urgency",
    "color",
    "spaces",
    "basically",
    "space",
    "colors",
    "system",
    "representing",
    "array",
    "pixel",
    "colors",
    "rgb",
    "kind",
    "space",
    "grayscale",
    "color",
    "space",
    "also",
    "color",
    "spaces",
    "like",
    "hsv",
    "lamb",
    "many",
    "let",
    "start",
    "trying",
    "convert",
    "image",
    "grayscale",
    "going",
    "convert",
    "bgr",
    "image",
    "open",
    "cv",
    "default",
    "way",
    "reading",
    "images",
    "going",
    "convert",
    "grayscale",
    "way",
    "saying",
    "gray",
    "equal",
    "cv",
    "dot",
    "cbt",
    "color",
    "pass",
    "image",
    "specify",
    "color",
    "code",
    "cv",
    "dot",
    "color",
    "underscore",
    "bgr",
    "grip",
    "since",
    "converting",
    "bgr",
    "image",
    "format",
    "grayscale",
    "format",
    "display",
    "image",
    "st",
    "gray",
    "passing",
    "grip",
    "let",
    "save",
    "run",
    "python",
    "spaces",
    "dot",
    "p",
    "problem",
    "comma",
    "save",
    "run",
    "grayscale",
    "version",
    "bgr",
    "image",
    "cool",
    "pretty",
    "cool",
    "grayscale",
    "images",
    "basically",
    "show",
    "distribution",
    "pixel",
    "intensities",
    "particular",
    "locations",
    "image",
    "let",
    "start",
    "trying",
    "convert",
    "image",
    "hsv",
    "format",
    "jeff",
    "vgr",
    "hsv",
    "hsv",
    "also",
    "called",
    "hue",
    "saturation",
    "value",
    "kind",
    "based",
    "humans",
    "think",
    "conceive",
    "color",
    "way",
    "conduct",
    "saying",
    "hsv",
    "equal",
    "cv",
    "dot",
    "cbt",
    "color",
    "pass",
    "img",
    "variable",
    "specify",
    "color",
    "code",
    "cv",
    "dot",
    "color",
    "undergo",
    "bgr",
    "hsv",
    "display",
    "syringe",
    "called",
    "hsv",
    "pass",
    "hsv",
    "let",
    "save",
    "hse",
    "version",
    "bgr",
    "image",
    "see",
    "lot",
    "green",
    "era",
    "skies",
    "reddish",
    "also",
    "another",
    "kind",
    "color",
    "space",
    "called",
    "la",
    "color",
    "space",
    "going",
    "convert",
    "bgr",
    "l",
    "sometimes",
    "represented",
    "l",
    "times",
    "times",
    "b",
    "v",
    "free",
    "use",
    "whatever",
    "want",
    "lb",
    "equal",
    "cv",
    "dot",
    "cvt",
    "color",
    "pass",
    "mg",
    "color",
    "scope",
    "bgr",
    "ab",
    "see",
    "sure",
    "colas",
    "lamb",
    "pass",
    "lamb",
    "wrong",
    "lgb",
    "version",
    "bgr",
    "image",
    "kind",
    "looks",
    "like",
    "washed",
    "version",
    "bgr",
    "image",
    "hey",
    "lamb",
    "format",
    "tuned",
    "humans",
    "perceive",
    "color",
    "started",
    "goes",
    "mentioned",
    "open",
    "cv",
    "reads",
    "images",
    "bgr",
    "format",
    "blue",
    "green",
    "red",
    "current",
    "system",
    "use",
    "represent",
    "colors",
    "outside",
    "open",
    "cv",
    "outside",
    "open",
    "cv",
    "use",
    "rgb",
    "format",
    "kind",
    "like",
    "inverse",
    "bgr",
    "format",
    "try",
    "display",
    "img",
    "image",
    "python",
    "library",
    "open",
    "cv",
    "probably",
    "going",
    "see",
    "inversion",
    "colors",
    "real",
    "quick",
    "let",
    "try",
    "input",
    "mat",
    "plot",
    "lib",
    "dot",
    "pie",
    "plot",
    "plt",
    "basically",
    "uncomment",
    "commented",
    "try",
    "display",
    "image",
    "variable",
    "gon",
    "na",
    "say",
    "plt",
    "dot",
    "show",
    "pass",
    "image",
    "could",
    "say",
    "peak",
    "could",
    "say",
    "plt",
    "dot",
    "show",
    "maybe",
    "let",
    "comment",
    "save",
    "run",
    "image",
    "get",
    "compare",
    "image",
    "open",
    "cv",
    "read",
    "completely",
    "different",
    "two",
    "completely",
    "different",
    "images",
    "reason",
    "image",
    "bgr",
    "image",
    "open",
    "cv",
    "displays",
    "bgr",
    "images",
    "tried",
    "take",
    "bgr",
    "image",
    "try",
    "display",
    "matplotlib",
    "instance",
    "matplotlib",
    "idea",
    "image",
    "bgr",
    "image",
    "displays",
    "image",
    "rgb",
    "image",
    "see",
    "inversion",
    "color",
    "red",
    "see",
    "blue",
    "blue",
    "see",
    "red",
    "ways",
    "convert",
    "bgr",
    "rgb",
    "using",
    "open",
    "cv",
    "let",
    "comment",
    "let",
    "uncomment",
    "right",
    "let",
    "say",
    "bgr",
    "rgb",
    "going",
    "say",
    "rgb",
    "equal",
    "cv",
    "dot",
    "cvt",
    "color",
    "pass",
    "bgr",
    "image",
    "oopsie",
    "pass",
    "br",
    "image",
    "going",
    "specify",
    "color",
    "code",
    "see",
    "without",
    "color",
    "scope",
    "bgr",
    "rgb",
    "try",
    "display",
    "image",
    "open",
    "cv",
    "see",
    "displays",
    "rgb",
    "also",
    "display",
    "matplotlib",
    "passed",
    "rgb",
    "plt",
    "dot",
    "show",
    "save",
    "go",
    "python",
    "spaces",
    "dot",
    "p",
    "interested",
    "see",
    "inversion",
    "colors",
    "time",
    "open",
    "cv",
    "provided",
    "open",
    "cv",
    "rgb",
    "image",
    "assumed",
    "bgr",
    "image",
    "inversion",
    "colors",
    "pass",
    "rgb",
    "image",
    "matplotlib",
    "matplotlib",
    "default",
    "rgb",
    "displayed",
    "proper",
    "image",
    "keep",
    "mind",
    "working",
    "multiple",
    "libraries",
    "including",
    "open",
    "cv",
    "matplotlib",
    "instance",
    "keep",
    "mind",
    "inversion",
    "colors",
    "tends",
    "take",
    "place",
    "two",
    "libraries",
    "another",
    "thing",
    "want",
    "essentially",
    "converted",
    "bgr",
    "grayscale",
    "essentially",
    "converted",
    "bgr",
    "hsv",
    "bgr",
    "rgb",
    "bgr",
    "rgb",
    "inverse",
    "convert",
    "grayscale",
    "image",
    "bgr",
    "convert",
    "hsv",
    "bgr",
    "convert",
    "lnb",
    "bgr",
    "rgb",
    "gl",
    "one",
    "downsides",
    "convert",
    "grayscale",
    "image",
    "hsv",
    "directly",
    "wanted",
    "convert",
    "grayscale",
    "bgr",
    "video",
    "hsv",
    "gon",
    "na",
    "real",
    "quick",
    "gon",
    "na",
    "say",
    "hsv",
    "two",
    "bgr",
    "okay",
    "first",
    "thing",
    "hsv",
    "underscore",
    "vgr",
    "basically",
    "converting",
    "hsv",
    "bgr",
    "equal",
    "cv",
    "dot",
    "cvt",
    "color",
    "take",
    "hsv",
    "image",
    "color",
    "code",
    "color",
    "cisco",
    "hsv",
    "two",
    "bgr",
    "display",
    "image",
    "let",
    "call",
    "hsv",
    "two",
    "bgr",
    "pass",
    "hd",
    "scope",
    "bgr",
    "screw",
    "vr",
    "save",
    "run",
    "okay",
    "interested",
    "let",
    "close",
    "essentially",
    "hsv",
    "two",
    "bgr",
    "image",
    "hv",
    "image",
    "converted",
    "image",
    "bgr",
    "try",
    "lamb",
    "let",
    "call",
    "lamb",
    "lamb",
    "course",
    "lamb",
    "let",
    "copy",
    "paste",
    "get",
    "rid",
    "mapplethorpe",
    "addressed",
    "email",
    "go",
    "run",
    "okay",
    "mistake",
    "said",
    "hsv",
    "lamb",
    "l",
    "baby",
    "bgr",
    "mistake",
    "cool",
    "lamb",
    "version",
    "lamb",
    "bgr",
    "version",
    "back",
    "bgr",
    "lamb",
    "lamb",
    "bgr",
    "pretty",
    "much",
    "video",
    "discussed",
    "convert",
    "discussed",
    "convert",
    "color",
    "spaces",
    "bgr",
    "grayscale",
    "hsv",
    "lgb",
    "rgb",
    "want",
    "convert",
    "grayscale",
    "nav",
    "instance",
    "note",
    "direct",
    "method",
    "could",
    "convert",
    "grayscale",
    "bgr",
    "bgr",
    "maybe",
    "possible",
    "directly",
    "think",
    "way",
    "open",
    "cv",
    "could",
    "come",
    "feature",
    "like",
    "would",
    "good",
    "gon",
    "na",
    "hurt",
    "write",
    "extra",
    "lines",
    "code",
    "least",
    "two",
    "three",
    "lines",
    "code",
    "extra",
    "moderately",
    "hard",
    "next",
    "video",
    "talking",
    "split",
    "merge",
    "color",
    "channels",
    "open",
    "cv",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "guys",
    "next",
    "video",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "going",
    "talking",
    "split",
    "merge",
    "color",
    "channels",
    "open",
    "cv",
    "color",
    "image",
    "basically",
    "consists",
    "multiple",
    "channels",
    "red",
    "green",
    "blue",
    "images",
    "see",
    "around",
    "bgr",
    "rgb",
    "images",
    "basically",
    "three",
    "color",
    "channels",
    "merged",
    "together",
    "open",
    "cv",
    "allows",
    "split",
    "image",
    "respective",
    "color",
    "channels",
    "take",
    "bgr",
    "image",
    "split",
    "blue",
    "green",
    "red",
    "components",
    "going",
    "video",
    "going",
    "taking",
    "image",
    "park",
    "seen",
    "previous",
    "videos",
    "going",
    "split",
    "three",
    "color",
    "channels",
    "way",
    "saying",
    "b",
    "comma",
    "g",
    "comma",
    "r",
    "stands",
    "respective",
    "color",
    "channels",
    "set",
    "equal",
    "cv",
    "dot",
    "split",
    "split",
    "image",
    "cv",
    "dot",
    "split",
    "basically",
    "split",
    "image",
    "blue",
    "green",
    "red",
    "display",
    "image",
    "saying",
    "cv",
    "dot",
    "sure",
    "let",
    "call",
    "blue",
    "pass",
    "blue",
    "let",
    "green",
    "image",
    "pass",
    "g",
    "red",
    "part",
    "two",
    "actually",
    "visualize",
    "shape",
    "shapes",
    "images",
    "let",
    "first",
    "print",
    "image",
    "node",
    "shape",
    "print",
    "bead",
    "shape",
    "print",
    "genome",
    "shape",
    "print",
    "dot",
    "shape",
    "basically",
    "printing",
    "shapes",
    "dimensions",
    "image",
    "blue",
    "green",
    "red",
    "also",
    "displaying",
    "images",
    "let",
    "run",
    "python",
    "split",
    "merge",
    "dot",
    "p",
    "images",
    "get",
    "back",
    "blues",
    "blue",
    "image",
    "green",
    "image",
    "red",
    "image",
    "depicted",
    "displayed",
    "grayscale",
    "images",
    "show",
    "distribution",
    "pixel",
    "intensities",
    "regions",
    "lighter",
    "showed",
    "far",
    "concentration",
    "pixel",
    "values",
    "regions",
    "darker",
    "represented",
    "little",
    "even",
    "pixels",
    "region",
    "take",
    "look",
    "blue",
    "pick",
    "blue",
    "channel",
    "first",
    "compared",
    "original",
    "image",
    "see",
    "sky",
    "kind",
    "almost",
    "white",
    "basically",
    "shows",
    "high",
    "concentration",
    "blue",
    "sky",
    "much",
    "trees",
    "grass",
    "let",
    "take",
    "look",
    "green",
    "fairly",
    "even",
    "distribution",
    "pixel",
    "intensities",
    "grass",
    "trees",
    "parts",
    "sky",
    "take",
    "look",
    "red",
    "color",
    "channel",
    "see",
    "parts",
    "trees",
    "red",
    "whiter",
    "grass",
    "sky",
    "white",
    "red",
    "image",
    "means",
    "much",
    "red",
    "color",
    "regions",
    "coming",
    "back",
    "let",
    "take",
    "look",
    "shapes",
    "image",
    "stands",
    "original",
    "image",
    "bgr",
    "image",
    "additional",
    "elements",
    "tuple",
    "represents",
    "number",
    "color",
    "channels",
    "three",
    "represents",
    "three",
    "color",
    "channels",
    "blue",
    "green",
    "red",
    "proceeded",
    "display",
    "shapes",
    "bg",
    "components",
    "see",
    "three",
    "tuple",
    "shape",
    "component",
    "one",
    "mentioned",
    "one",
    "try",
    "display",
    "image",
    "using",
    "see",
    "even",
    "show",
    "displays",
    "grayscale",
    "image",
    "grayscale",
    "images",
    "shape",
    "one",
    "let",
    "try",
    "merge",
    "color",
    "channels",
    "together",
    "way",
    "seeing",
    "merge",
    "image",
    "merged",
    "images",
    "equal",
    "cv",
    "dot",
    "merge",
    "pass",
    "list",
    "blue",
    "blue",
    "comma",
    "g",
    "comma",
    "r",
    "save",
    "let",
    "display",
    "things",
    "either",
    "show",
    "call",
    "call",
    "merged",
    "image",
    "pass",
    "merged",
    "let",
    "save",
    "run",
    "get",
    "back",
    "merged",
    "image",
    "basically",
    "merging",
    "three",
    "individual",
    "color",
    "channels",
    "red",
    "green",
    "blue",
    "way",
    "additional",
    "way",
    "looking",
    "actual",
    "color",
    "channel",
    "instead",
    "showing",
    "grayscale",
    "images",
    "shows",
    "actual",
    "color",
    "involved",
    "blue",
    "image",
    "get",
    "blue",
    "color",
    "channel",
    "red",
    "channel",
    "get",
    "red",
    "color",
    "channel",
    "way",
    "actually",
    "reconstruct",
    "image",
    "shapes",
    "images",
    "basically",
    "grayscale",
    "images",
    "actually",
    "create",
    "blank",
    "image",
    "blank",
    "image",
    "using",
    "numpy",
    "essentially",
    "going",
    "going",
    "say",
    "blank",
    "equal",
    "np",
    "dot",
    "zeroes",
    "going",
    "set",
    "shape",
    "image",
    "first",
    "two",
    "values",
    "give",
    "data",
    "type",
    "iemt",
    "eight",
    "eight",
    "basically",
    "images",
    "print",
    "blue",
    "color",
    "channel",
    "going",
    "going",
    "say",
    "going",
    "say",
    "blue",
    "equal",
    "cv",
    "dot",
    "image",
    "going",
    "pass",
    "list",
    "b",
    "comma",
    "blank",
    "comma",
    "blink",
    "going",
    "thing",
    "green",
    "set",
    "equal",
    "cv",
    "dot",
    "merge",
    "blank",
    "comma",
    "g",
    "comma",
    "blank",
    "going",
    "thing",
    "red",
    "setting",
    "equal",
    "cv",
    "dot",
    "merge",
    "blank",
    "comma",
    "blink",
    "comma",
    "comma",
    "red",
    "basically",
    "done",
    "blank",
    "image",
    "basically",
    "consists",
    "height",
    "width",
    "necessarily",
    "number",
    "color",
    "channels",
    "image",
    "essentially",
    "merging",
    "blue",
    "image",
    "respective",
    "compartment",
    "blue",
    "green",
    "red",
    "setting",
    "green",
    "red",
    "components",
    "black",
    "displaying",
    "blue",
    "channel",
    "thing",
    "green",
    "setting",
    "blue",
    "red",
    "components",
    "black",
    "thing",
    "red",
    "setting",
    "blue",
    "green",
    "components",
    "black",
    "display",
    "saying",
    "blue",
    "green",
    "red",
    "let",
    "save",
    "run",
    "actually",
    "get",
    "color",
    "respective",
    "color",
    "channels",
    "take",
    "look",
    "able",
    "visualize",
    "distribution",
    "much",
    "better",
    "see",
    "lineup",
    "later",
    "portions",
    "represent",
    "high",
    "distribution",
    "lighter",
    "portions",
    "represent",
    "high",
    "distribution",
    "red",
    "higher",
    "wider",
    "regions",
    "represent",
    "high",
    "distribution",
    "green",
    "essentially",
    "take",
    "three",
    "images",
    "color",
    "towns",
    "merging",
    "together",
    "essentially",
    "get",
    "back",
    "merged",
    "image",
    "merged",
    "image",
    "pretty",
    "much",
    "video",
    "discuss",
    "split",
    "image",
    "three",
    "respective",
    "color",
    "channels",
    "reconstruct",
    "image",
    "display",
    "actual",
    "color",
    "involved",
    "channel",
    "merge",
    "color",
    "channels",
    "back",
    "original",
    "image",
    "next",
    "video",
    "talking",
    "smooth",
    "blur",
    "image",
    "using",
    "various",
    "blurring",
    "techniques",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "gon",
    "na",
    "address",
    "concepts",
    "smoothing",
    "blurring",
    "urban",
    "cv",
    "mentioned",
    "generally",
    "smooth",
    "image",
    "tends",
    "lot",
    "noise",
    "noise",
    "caused",
    "camera",
    "sensors",
    "basically",
    "problems",
    "lighting",
    "image",
    "taken",
    "essentially",
    "smooth",
    "image",
    "reduce",
    "noise",
    "applying",
    "blurring",
    "method",
    "previously",
    "discussed",
    "gaussian",
    "blur",
    "method",
    "kind",
    "one",
    "popular",
    "methods",
    "blurring",
    "generally",
    "going",
    "see",
    "gaussian",
    "blur",
    "wo",
    "really",
    "suit",
    "purposes",
    "many",
    "blurring",
    "techniques",
    "going",
    "address",
    "video",
    "actually",
    "want",
    "address",
    "couple",
    "concepts",
    "well",
    "let",
    "actually",
    "go",
    "image",
    "discuss",
    "exactly",
    "goes",
    "try",
    "apply",
    "blur",
    "essentially",
    "first",
    "thing",
    "need",
    "define",
    "something",
    "called",
    "kernel",
    "window",
    "essentially",
    "window",
    "draw",
    "image",
    "two",
    "lines",
    "let",
    "draw",
    "another",
    "line",
    "essentially",
    "window",
    "draw",
    "specific",
    "portion",
    "image",
    "something",
    "happens",
    "pixels",
    "window",
    "let",
    "change",
    "blue",
    "yeah",
    "essentially",
    "window",
    "size",
    "size",
    "called",
    "kernel",
    "size",
    "kernel",
    "size",
    "basically",
    "number",
    "rows",
    "number",
    "columns",
    "three",
    "columns",
    "three",
    "rows",
    "kernel",
    "size",
    "three",
    "three",
    "essentially",
    "happens",
    "multiple",
    "methods",
    "apply",
    "blue",
    "essentially",
    "blur",
    "applied",
    "middle",
    "pixel",
    "result",
    "pixels",
    "around",
    "also",
    "called",
    "surrounding",
    "pixels",
    "let",
    "change",
    "different",
    "color",
    "something",
    "happens",
    "result",
    "pixels",
    "around",
    "surrounding",
    "pixels",
    "mind",
    "let",
    "go",
    "back",
    "discuss",
    "first",
    "method",
    "blurring",
    "averaging",
    "essentially",
    "averaging",
    "define",
    "kernel",
    "window",
    "specific",
    "portion",
    "image",
    "window",
    "essentially",
    "compute",
    "pixel",
    "intensity",
    "middle",
    "pixel",
    "true",
    "center",
    "average",
    "surrounding",
    "pixel",
    "intensities",
    "green",
    "suppose",
    "pixel",
    "intensity",
    "one",
    "maybe",
    "two",
    "345678",
    "get",
    "point",
    "essentially",
    "new",
    "pixel",
    "intensity",
    "region",
    "average",
    "surrounding",
    "pixel",
    "intensity",
    "summing",
    "one",
    "plus",
    "two",
    "plus",
    "three",
    "plus",
    "four",
    "plus",
    "five",
    "plus",
    "six",
    "plus",
    "seven",
    "plus",
    "eight",
    "dividing",
    "eight",
    "essentially",
    "number",
    "surrounding",
    "pixels",
    "essentially",
    "use",
    "result",
    "pixel",
    "intensity",
    "middle",
    "value",
    "true",
    "center",
    "process",
    "happens",
    "throughout",
    "image",
    "window",
    "basically",
    "slides",
    "right",
    "done",
    "slides",
    "computed",
    "basically",
    "pixels",
    "image",
    "let",
    "try",
    "apply",
    "see",
    "going",
    "going",
    "say",
    "average",
    "equal",
    "cv",
    "blur",
    "cv",
    "blow",
    "method",
    "method",
    "apply",
    "averaging",
    "blur",
    "define",
    "source",
    "image",
    "img",
    "give",
    "kernel",
    "size",
    "let",
    "say",
    "three",
    "three",
    "display",
    "image",
    "called",
    "average",
    "average",
    "blur",
    "save",
    "run",
    "python",
    "smoothing",
    "dot",
    "p",
    "net",
    "gosh",
    "pass",
    "average",
    "save",
    "run",
    "basically",
    "average",
    "blow",
    "applied",
    "algorithm",
    "background",
    "essentially",
    "define",
    "candle",
    "window",
    "specified",
    "size",
    "three",
    "three",
    "computed",
    "center",
    "value",
    "pixel",
    "using",
    "average",
    "surrounding",
    "pixel",
    "intensities",
    "result",
    "get",
    "blurred",
    "image",
    "higher",
    "kernel",
    "size",
    "specified",
    "blur",
    "going",
    "image",
    "let",
    "increase",
    "seven",
    "seven",
    "see",
    "get",
    "image",
    "way",
    "blur",
    "let",
    "move",
    "next",
    "method",
    "gaussian",
    "blur",
    "gaussian",
    "basically",
    "thing",
    "averaging",
    "except",
    "instead",
    "computing",
    "average",
    "running",
    "pixel",
    "intensity",
    "running",
    "pixel",
    "given",
    "particular",
    "weight",
    "essentially",
    "average",
    "products",
    "weights",
    "gives",
    "value",
    "true",
    "center",
    "using",
    "method",
    "tend",
    "get",
    "less",
    "blurring",
    "compared",
    "averaging",
    "method",
    "gaussian",
    "blur",
    "natural",
    "compared",
    "averaging",
    "let",
    "print",
    "let",
    "call",
    "yes",
    "set",
    "equal",
    "cv",
    "dot",
    "gaussian",
    "blur",
    "take",
    "source",
    "image",
    "img",
    "kernel",
    "size",
    "seven",
    "seven",
    "compare",
    "averaging",
    "another",
    "parameter",
    "need",
    "specify",
    "sigma",
    "x",
    "basically",
    "standard",
    "deviation",
    "x",
    "direction",
    "going",
    "set",
    "zero",
    "put",
    "call",
    "gaussian",
    "blur",
    "pass",
    "gaps",
    "save",
    "run",
    "bear",
    "see",
    "use",
    "code",
    "size",
    "less",
    "blurred",
    "compared",
    "average",
    "method",
    "reason",
    "certain",
    "weight",
    "value",
    "added",
    "computing",
    "blur",
    "okay",
    "let",
    "move",
    "next",
    "method",
    "median",
    "blur",
    "let",
    "go",
    "back",
    "image",
    "medium",
    "blurring",
    "basically",
    "thing",
    "averaging",
    "except",
    "instead",
    "finding",
    "average",
    "surrounding",
    "pixels",
    "finds",
    "median",
    "surrounding",
    "pixels",
    "generally",
    "medium",
    "blurring",
    "tends",
    "effective",
    "reducing",
    "noise",
    "image",
    "compared",
    "averaging",
    "even",
    "gaussian",
    "blur",
    "pretty",
    "good",
    "removing",
    "salt",
    "pepper",
    "noise",
    "may",
    "exist",
    "image",
    "general",
    "people",
    "tend",
    "use",
    "image",
    "advanced",
    "computer",
    "vision",
    "projects",
    "tend",
    "depend",
    "reduction",
    "substantial",
    "amount",
    "noise",
    "let",
    "go",
    "back",
    "way",
    "apply",
    "blur",
    "saying",
    "let",
    "call",
    "median",
    "set",
    "z",
    "set",
    "equal",
    "cv",
    "dot",
    "median",
    "blue",
    "pass",
    "source",
    "image",
    "kernel",
    "size",
    "tuple",
    "three",
    "three",
    "instead",
    "integer",
    "three",
    "reason",
    "open",
    "cv",
    "automatically",
    "assumes",
    "kernel",
    "size",
    "three",
    "three",
    "based",
    "integer",
    "print",
    "let",
    "call",
    "median",
    "blue",
    "pass",
    "median",
    "let",
    "compare",
    "set",
    "seven",
    "comparing",
    "gaussian",
    "blur",
    "averaging",
    "blur",
    "tend",
    "look",
    "make",
    "differences",
    "two",
    "images",
    "like",
    "painting",
    "still",
    "drawing",
    "take",
    "something",
    "smudge",
    "image",
    "get",
    "something",
    "like",
    "generally",
    "medium",
    "blurring",
    "meant",
    "high",
    "colonel",
    "sizes",
    "like",
    "seven",
    "even",
    "five",
    "cases",
    "effective",
    "reducing",
    "noise",
    "image",
    "let",
    "let",
    "change",
    "three",
    "three",
    "let",
    "copy",
    "change",
    "three",
    "three",
    "change",
    "three",
    "let",
    "comparison",
    "three",
    "gaussian",
    "average",
    "blue",
    "median",
    "love",
    "compared",
    "two",
    "see",
    "kind",
    "less",
    "blurring",
    "gaussian",
    "sort",
    "make",
    "differences",
    "two",
    "subtle",
    "couple",
    "differences",
    "two",
    "finally",
    "last",
    "method",
    "going",
    "discuss",
    "bilateral",
    "blurring",
    "caused",
    "natural",
    "lateral",
    "bilateral",
    "bearing",
    "effective",
    "sometimes",
    "used",
    "lot",
    "advanced",
    "computer",
    "vision",
    "projects",
    "essentially",
    "blurs",
    "traditional",
    "blurring",
    "methods",
    "basically",
    "blur",
    "image",
    "without",
    "looking",
    "whether",
    "whether",
    "reducing",
    "edges",
    "image",
    "bilateral",
    "blurring",
    "applies",
    "blurring",
    "retains",
    "edges",
    "image",
    "blurred",
    "image",
    "get",
    "retain",
    "edges",
    "well",
    "let",
    "call",
    "bilateral",
    "multilateral",
    "set",
    "equal",
    "cv",
    "dot",
    "bilateral",
    "filter",
    "pass",
    "image",
    "give",
    "diameter",
    "pixel",
    "neighborhood",
    "notice",
    "kernel",
    "size",
    "fact",
    "diameter",
    "let",
    "set",
    "five",
    "give",
    "sigma",
    "color",
    "basically",
    "color",
    "sigma",
    "sigma",
    "color",
    "larger",
    "value",
    "color",
    "sigma",
    "means",
    "colors",
    "neighborhood",
    "considered",
    "blue",
    "computed",
    "let",
    "set",
    "sigma",
    "space",
    "basically",
    "space",
    "sigma",
    "larger",
    "values",
    "space",
    "sigma",
    "means",
    "pixels",
    "central",
    "pixel",
    "influence",
    "blurring",
    "calculation",
    "let",
    "set",
    "let",
    "take",
    "look",
    "sigma",
    "spacing",
    "example",
    "bilateral",
    "filtering",
    "value",
    "central",
    "pixel",
    "true",
    "center",
    "computed",
    "giving",
    "larger",
    "values",
    "sigma",
    "space",
    "essentially",
    "indicating",
    "whether",
    "want",
    "pixels",
    "far",
    "away",
    "maybe",
    "far",
    "away",
    "even",
    "far",
    "away",
    "influencing",
    "particular",
    "calculation",
    "give",
    "like",
    "really",
    "huge",
    "numbers",
    "probably",
    "pixel",
    "region",
    "might",
    "influence",
    "computation",
    "pixel",
    "value",
    "let",
    "set",
    "let",
    "display",
    "image",
    "call",
    "show",
    "called",
    "bilateral",
    "pass",
    "bilateral",
    "let",
    "save",
    "run",
    "bilateral",
    "image",
    "let",
    "compare",
    "previous",
    "ones",
    "compared",
    "much",
    "better",
    "compared",
    "averaging",
    "way",
    "much",
    "better",
    "let",
    "compare",
    "median",
    "edges",
    "slightly",
    "slightly",
    "blurred",
    "compare",
    "original",
    "image",
    "kind",
    "look",
    "thing",
    "okay",
    "kind",
    "looks",
    "like",
    "blur",
    "applied",
    "maybe",
    "let",
    "increase",
    "diameter",
    "know",
    "much",
    "done",
    "edges",
    "still",
    "kind",
    "looks",
    "like",
    "original",
    "image",
    "let",
    "try",
    "one",
    "parameters",
    "let",
    "add",
    "let",
    "set",
    "dude",
    "playing",
    "around",
    "values",
    "basically",
    "make",
    "generic",
    "starting",
    "look",
    "lot",
    "like",
    "median",
    "blow",
    "need",
    "even",
    "larger",
    "values",
    "starting",
    "show",
    "looking",
    "like",
    "smudged",
    "painting",
    "version",
    "image",
    "right",
    "lot",
    "blur",
    "applied",
    "council",
    "looking",
    "smudged",
    "definitely",
    "keep",
    "mind",
    "trying",
    "apply",
    "blurring",
    "image",
    "especially",
    "bilateral",
    "median",
    "lowering",
    "higher",
    "values",
    "basic",
    "mouth",
    "bilateral",
    "kernel",
    "size",
    "medium",
    "glowing",
    "tend",
    "end",
    "washed",
    "smudged",
    "version",
    "image",
    "definitely",
    "keep",
    "mind",
    "kind",
    "summarizes",
    "whatever",
    "done",
    "video",
    "discussed",
    "averaging",
    "gaussian",
    "median",
    "bilateral",
    "blurring",
    "next",
    "video",
    "talking",
    "bitwise",
    "operators",
    "open",
    "cv",
    "like",
    "always",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "gon",
    "na",
    "talking",
    "bitwise",
    "operators",
    "urban",
    "cv",
    "four",
    "basic",
    "bitwise",
    "operators",
    "xor",
    "ever",
    "taken",
    "introductory",
    "cs",
    "course",
    "probably",
    "find",
    "terms",
    "familiar",
    "bitwise",
    "operators",
    "fact",
    "used",
    "lot",
    "image",
    "processing",
    "especially",
    "working",
    "masks",
    "like",
    "next",
    "video",
    "high",
    "level",
    "bitwise",
    "operators",
    "operate",
    "binary",
    "manner",
    "pixel",
    "turned",
    "value",
    "zero",
    "turned",
    "value",
    "one",
    "let",
    "actually",
    "go",
    "ahead",
    "try",
    "import",
    "numpy",
    "np",
    "going",
    "going",
    "create",
    "blank",
    "variable",
    "set",
    "equal",
    "np",
    "dot",
    "zeros",
    "size",
    "400",
    "give",
    "datatype",
    "empty",
    "going",
    "going",
    "use",
    "blank",
    "variable",
    "basis",
    "draw",
    "rectangle",
    "draw",
    "circle",
    "going",
    "say",
    "return",
    "angle",
    "equal",
    "cv",
    "dot",
    "rectangle",
    "say",
    "blink",
    "dot",
    "copy",
    "pass",
    "starting",
    "point",
    "let",
    "give",
    "margin",
    "around",
    "30",
    "pixels",
    "either",
    "side",
    "going",
    "start",
    "30",
    "comma",
    "go",
    "way",
    "across",
    "give",
    "color",
    "since",
    "color",
    "image",
    "rather",
    "binary",
    "image",
    "give",
    "one",
    "parameter",
    "white",
    "give",
    "thickness",
    "negative",
    "one",
    "want",
    "fill",
    "image",
    "going",
    "create",
    "another",
    "circle",
    "variable",
    "set",
    "equal",
    "cv",
    "dot",
    "circle",
    "going",
    "say",
    "blank",
    "copy",
    "going",
    "give",
    "center",
    "center",
    "absolute",
    "center",
    "200",
    "let",
    "give",
    "radius",
    "give",
    "radius",
    "give",
    "color",
    "five",
    "five",
    "let",
    "fill",
    "circle",
    "negative",
    "one",
    "let",
    "display",
    "image",
    "see",
    "seen",
    "working",
    "call",
    "rectangle",
    "passing",
    "rectangle",
    "going",
    "thing",
    "circle",
    "called",
    "circle",
    "pass",
    "circle",
    "save",
    "run",
    "python",
    "bitwise",
    "r",
    "p",
    "two",
    "images",
    "going",
    "work",
    "image",
    "rectangle",
    "image",
    "circle",
    "let",
    "start",
    "first",
    "basic",
    "bitwise",
    "operator",
    "bitwise",
    "actually",
    "discuss",
    "bitwise",
    "ad",
    "really",
    "let",
    "show",
    "essentially",
    "going",
    "want",
    "say",
    "bitwise",
    "go",
    "equal",
    "cv",
    "dot",
    "bitwise",
    "basically",
    "pass",
    "two",
    "source",
    "images",
    "two",
    "images",
    "rectangle",
    "circle",
    "display",
    "image",
    "let",
    "call",
    "beautiful",
    "lines",
    "let",
    "pass",
    "bitcoins",
    "save",
    "run",
    "essentially",
    "get",
    "back",
    "image",
    "essentially",
    "bitwise",
    "took",
    "two",
    "images",
    "placed",
    "top",
    "basically",
    "returned",
    "intersection",
    "right",
    "make",
    "take",
    "image",
    "put",
    "image",
    "triangles",
    "common",
    "images",
    "set",
    "black",
    "zero",
    "common",
    "regions",
    "returned",
    "next",
    "one",
    "basically",
    "bitwise",
    "bitwise",
    "real",
    "simply",
    "returns",
    "intersecting",
    "well",
    "non",
    "intersecting",
    "regions",
    "let",
    "try",
    "bitwise",
    "equal",
    "cb",
    "dot",
    "bitwise",
    "scope",
    "pass",
    "rectangle",
    "pass",
    "circle",
    "print",
    "let",
    "call",
    "bitwise",
    "pass",
    "bitwise",
    "oops",
    "save",
    "run",
    "bitwise",
    "okay",
    "bitwise",
    "mistake",
    "bitwise",
    "basically",
    "return",
    "funky",
    "looking",
    "funky",
    "looking",
    "shape",
    "essentially",
    "took",
    "two",
    "images",
    "put",
    "common",
    "regions",
    "also",
    "found",
    "regions",
    "common",
    "images",
    "basically",
    "superimpose",
    "basically",
    "put",
    "together",
    "find",
    "resulting",
    "shape",
    "get",
    "image",
    "get",
    "moving",
    "next",
    "one",
    "bitwise",
    "xor",
    "basically",
    "good",
    "returning",
    "non",
    "intersecting",
    "regions",
    "found",
    "intersecting",
    "oops",
    "inter",
    "setting",
    "regions",
    "found",
    "sky",
    "brought",
    "back",
    "one",
    "intersecting",
    "interest",
    "selecting",
    "regions",
    "xr",
    "finds",
    "non",
    "intersecting",
    "regions",
    "let",
    "say",
    "bitwise",
    "call",
    "xor",
    "equal",
    "cv",
    "dot",
    "bitwise",
    "underscore",
    "xr",
    "pass",
    "rectangle",
    "passing",
    "rectangle",
    "pass",
    "circle",
    "display",
    "cv",
    "sure",
    "close",
    "bitwise",
    "xor",
    "pass",
    "bitwise",
    "xor",
    "save",
    "run",
    "non",
    "intersecting",
    "regions",
    "two",
    "images",
    "put",
    "pretty",
    "cool",
    "recap",
    "bitwise",
    "returns",
    "intersection",
    "regions",
    "bitwise",
    "returns",
    "knowledge",
    "second",
    "regions",
    "well",
    "intersecting",
    "regions",
    "bitwise",
    "xor",
    "returns",
    "knowledge",
    "second",
    "regions",
    "essentially",
    "take",
    "bitwise",
    "xor",
    "subtract",
    "bitwise",
    "get",
    "bitwise",
    "end",
    "conversely",
    "subtract",
    "bitwise",
    "device",
    "get",
    "bitwise",
    "xor",
    "essentially",
    "good",
    "way",
    "visualizing",
    "exactly",
    "happens",
    "bitcoins",
    "operators",
    "finally",
    "last",
    "method",
    "discuss",
    "bitwise",
    "essentially",
    "return",
    "anything",
    "inverts",
    "binary",
    "color",
    "let",
    "let",
    "call",
    "bitwise",
    "equal",
    "cv",
    "dot",
    "bitwise",
    "underscore",
    "takes",
    "one",
    "source",
    "image",
    "let",
    "set",
    "rectangle",
    "put",
    "display",
    "let",
    "call",
    "rec",
    "tangle",
    "pass",
    "bitwise",
    "see",
    "basically",
    "look",
    "image",
    "found",
    "white",
    "regions",
    "white",
    "pixels",
    "image",
    "inverted",
    "black",
    "black",
    "images",
    "inverted",
    "white",
    "essentially",
    "converted",
    "white",
    "black",
    "ads",
    "black",
    "white",
    "try",
    "circle",
    "let",
    "call",
    "circle",
    "pass",
    "circle",
    "save",
    "run",
    "resultant",
    "resulting",
    "circle",
    "get",
    "white",
    "hole",
    "black",
    "hole",
    "physicists",
    "okay",
    "pretty",
    "much",
    "video",
    "wanted",
    "introduce",
    "idea",
    "bitwise",
    "operations",
    "works",
    "next",
    "video",
    "actually",
    "talking",
    "use",
    "bitwise",
    "operations",
    "concept",
    "called",
    "masking",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "video",
    "going",
    "talking",
    "masking",
    "open",
    "cv",
    "previous",
    "video",
    "discussed",
    "bitwise",
    "operations",
    "using",
    "bitwise",
    "operations",
    "essentially",
    "perform",
    "masking",
    "open",
    "cv",
    "masking",
    "essentially",
    "allows",
    "us",
    "focus",
    "certain",
    "parts",
    "image",
    "like",
    "focus",
    "example",
    "image",
    "people",
    "interested",
    "focusing",
    "faces",
    "people",
    "could",
    "essentially",
    "apply",
    "masking",
    "essentially",
    "mask",
    "people",
    "faces",
    "remove",
    "unwanted",
    "parts",
    "image",
    "basically",
    "high",
    "level",
    "intuition",
    "behind",
    "let",
    "actually",
    "see",
    "works",
    "open",
    "cv",
    "basically",
    "read",
    "file",
    "display",
    "image",
    "thing",
    "going",
    "going",
    "import",
    "numpy",
    "numpy",
    "np",
    "going",
    "going",
    "say",
    "blank",
    "equal",
    "np",
    "dot",
    "zeros",
    "size",
    "size",
    "image",
    "dot",
    "shape",
    "first",
    "two",
    "values",
    "extremely",
    "important",
    "dimensions",
    "mask",
    "size",
    "image",
    "good",
    "work",
    "give",
    "data",
    "type",
    "ui",
    "eight",
    "see",
    "want",
    "display",
    "display",
    "going",
    "black",
    "image",
    "schools",
    "blank",
    "image",
    "pawson",
    "blank",
    "essentially",
    "going",
    "going",
    "draw",
    "circle",
    "blank",
    "image",
    "call",
    "mask",
    "going",
    "say",
    "mask",
    "equal",
    "cv",
    "dot",
    "circle",
    "going",
    "draw",
    "blank",
    "image",
    "blank",
    "image",
    "give",
    "center",
    "image",
    "let",
    "say",
    "image",
    "dot",
    "shape",
    "one",
    "divided",
    "two",
    "divided",
    "two",
    "image",
    "shape",
    "two",
    "image",
    "shape",
    "zero",
    "divided",
    "divided",
    "two",
    "give",
    "radius",
    "know",
    "say",
    "100",
    "pixels",
    "give",
    "color",
    "255",
    "give",
    "thickness",
    "negative",
    "one",
    "visualize",
    "mask",
    "mask",
    "passing",
    "mask",
    "let",
    "run",
    "python",
    "masking",
    "dot",
    "p",
    "essentially",
    "mask",
    "blank",
    "image",
    "working",
    "image",
    "want",
    "mask",
    "let",
    "actually",
    "create",
    "masked",
    "image",
    "going",
    "say",
    "masked",
    "image",
    "equal",
    "cv",
    "dot",
    "bitwise",
    "underscore",
    "source",
    "image",
    "img",
    "img",
    "specify",
    "parameter",
    "mask",
    "equal",
    "mask",
    "circle",
    "image",
    "display",
    "image",
    "call",
    "masked",
    "image",
    "pass",
    "masked",
    "save",
    "run",
    "essentially",
    "masked",
    "image",
    "took",
    "image",
    "took",
    "image",
    "put",
    "image",
    "found",
    "intersecting",
    "region",
    "okay",
    "optionally",
    "passing",
    "mask",
    "equal",
    "mask",
    "exactly",
    "cool",
    "right",
    "know",
    "play",
    "around",
    "let",
    "maybe",
    "move",
    "couple",
    "pixels",
    "around",
    "let",
    "say",
    "save",
    "run",
    "moves",
    "zero",
    "okay",
    "45",
    "plus",
    "45",
    "save",
    "running",
    "get",
    "image",
    "cat",
    "draw",
    "draw",
    "circle",
    "draw",
    "rectangle",
    "instead",
    "bottom",
    "blank",
    "skip",
    "let",
    "give",
    "draw",
    "give",
    "static",
    "endpoint",
    "let",
    "copy",
    "add",
    "couple",
    "pixels",
    "maybe",
    "100",
    "pixels",
    "way",
    "100",
    "pixels",
    "way",
    "get",
    "rid",
    "need",
    "say",
    "right",
    "square",
    "essentially",
    "masked",
    "image",
    "let",
    "actually",
    "try",
    "let",
    "actually",
    "try",
    "different",
    "image",
    "got",
    "image",
    "let",
    "try",
    "maybe",
    "cats",
    "let",
    "go",
    "back",
    "cats",
    "save",
    "run",
    "mask",
    "get",
    "putting",
    "two",
    "essentially",
    "play",
    "around",
    "feel",
    "fit",
    "maybe",
    "try",
    "different",
    "shapes",
    "weird",
    "shapes",
    "way",
    "get",
    "weird",
    "shapes",
    "essentially",
    "creating",
    "circle",
    "rectangle",
    "applying",
    "bid",
    "wise",
    "get",
    "weird",
    "shape",
    "use",
    "weird",
    "shape",
    "mask",
    "let",
    "try",
    "let",
    "let",
    "try",
    "oh",
    "going",
    "say",
    "let",
    "let",
    "call",
    "circle",
    "blanked",
    "copy",
    "copy",
    "create",
    "rectangle",
    "let",
    "grab",
    "read",
    "bitvise",
    "let",
    "grab",
    "rectangle",
    "copy",
    "piece",
    "time",
    "copy",
    "3030",
    "okay",
    "blank",
    "shape",
    "let",
    "create",
    "weird",
    "weird",
    "shape",
    "equal",
    "cv",
    "dot",
    "bitcoins",
    "scope",
    "end",
    "circle",
    "rectangle",
    "need",
    "specify",
    "anything",
    "else",
    "um",
    "one",
    "visualizes",
    "let",
    "close",
    "try",
    "see",
    "see",
    "show",
    "call",
    "weird",
    "shape",
    "passing",
    "weird",
    "shape",
    "wrong",
    "masking",
    "undefined",
    "mask",
    "westmar",
    "mosque",
    "okay",
    "good",
    "weird",
    "shape",
    "get",
    "really",
    "going",
    "half",
    "moon",
    "hey",
    "whatever",
    "let",
    "close",
    "use",
    "weird",
    "shape",
    "mask",
    "use",
    "weird",
    "shape",
    "mask",
    "let",
    "see",
    "final",
    "mask",
    "image",
    "essentially",
    "weird",
    "weird",
    "shape",
    "masked",
    "image",
    "let",
    "call",
    "weird",
    "shape",
    "mask",
    "image",
    "weird",
    "shaped",
    "mask",
    "damage",
    "little",
    "halfmoon",
    "essentially",
    "pretty",
    "much",
    "anything",
    "want",
    "experiment",
    "various",
    "shapes",
    "sizes",
    "stuff",
    "like",
    "know",
    "size",
    "mask",
    "dimensions",
    "image",
    "want",
    "see",
    "maybe",
    "subtract",
    "100",
    "pixels",
    "possible",
    "let",
    "support",
    "though",
    "maybe",
    "like",
    "subtract",
    "tubal",
    "know",
    "whether",
    "work",
    "guess",
    "okay",
    "let",
    "say",
    "image",
    "shape",
    "okay",
    "let",
    "give",
    "different",
    "size",
    "even",
    "using",
    "image",
    "let",
    "go",
    "size",
    "300",
    "definitely",
    "size",
    "get",
    "assertion",
    "failed",
    "time",
    "blah",
    "blah",
    "blah",
    "maskhadov",
    "size",
    "function",
    "whatever",
    "essentially",
    "need",
    "size",
    "otherwise",
    "going",
    "fail",
    "throw",
    "error",
    "video",
    "talked",
    "masking",
    "nothing",
    "different",
    "essentially",
    "used",
    "concept",
    "bitcoins",
    "previous",
    "video",
    "see",
    "move",
    "computing",
    "histograms",
    "next",
    "video",
    "masking",
    "really",
    "comes",
    "play",
    "masking",
    "really",
    "affects",
    "histograms",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "going",
    "talking",
    "computing",
    "histograms",
    "open",
    "cv",
    "histograms",
    "basically",
    "allow",
    "visualize",
    "distribution",
    "pixel",
    "intensities",
    "image",
    "whether",
    "color",
    "image",
    "whether",
    "grayscale",
    "image",
    "visualize",
    "pixel",
    "intensity",
    "distributions",
    "help",
    "histogram",
    "kind",
    "like",
    "graph",
    "plot",
    "give",
    "high",
    "level",
    "intuition",
    "pixel",
    "distribution",
    "image",
    "compute",
    "histogram",
    "grayscale",
    "images",
    "compute",
    "histogram",
    "rgb",
    "images",
    "gon",
    "na",
    "start",
    "computing",
    "histograms",
    "grayscale",
    "images",
    "let",
    "convert",
    "image",
    "grayscale",
    "activity",
    "cvd",
    "color",
    "pass",
    "image",
    "give",
    "color",
    "code",
    "color",
    "underscore",
    "bgr",
    "gray",
    "means",
    "read",
    "image",
    "gray",
    "passing",
    "great",
    "actually",
    "compute",
    "grayscale",
    "histogram",
    "need",
    "essentially",
    "call",
    "gray",
    "underscore",
    "hist",
    "set",
    "equal",
    "cv",
    "dot",
    "calc",
    "hist",
    "method",
    "essentially",
    "compute",
    "histogram",
    "image",
    "pass",
    "images",
    "list",
    "need",
    "pass",
    "list",
    "images",
    "since",
    "interested",
    "computing",
    "histogram",
    "one",
    "image",
    "let",
    "pass",
    "grayscale",
    "image",
    "thing",
    "pass",
    "number",
    "channels",
    "basically",
    "specify",
    "index",
    "channel",
    "want",
    "compute",
    "histogram",
    "since",
    "computing",
    "histogram",
    "grayscale",
    "image",
    "let",
    "wrap",
    "list",
    "pass",
    "zero",
    "next",
    "thing",
    "provide",
    "mask",
    "want",
    "compute",
    "histogram",
    "specific",
    "portion",
    "image",
    "get",
    "later",
    "num",
    "size",
    "basically",
    "number",
    "bins",
    "want",
    "use",
    "computing",
    "histogram",
    "essentially",
    "plot",
    "histogram",
    "talk",
    "concept",
    "bins",
    "essentially",
    "set",
    "256",
    "wrapped",
    "list",
    "wrapped",
    "list",
    "next",
    "thing",
    "want",
    "specify",
    "range",
    "range",
    "possible",
    "pixel",
    "values",
    "case",
    "prop",
    "image",
    "let",
    "actually",
    "use",
    "matplotlib",
    "import",
    "map",
    "plot",
    "plot",
    "plt",
    "instantiate",
    "plt",
    "dot",
    "figure",
    "plc",
    "figure",
    "let",
    "give",
    "tidy",
    "let",
    "call",
    "gray",
    "kale",
    "histogram",
    "essentially",
    "give",
    "label",
    "across",
    "x",
    "axis",
    "going",
    "call",
    "bins",
    "let",
    "give",
    "label",
    "set",
    "equal",
    "number",
    "pixels",
    "number",
    "pixels",
    "label",
    "finally",
    "plot",
    "saying",
    "plt",
    "dot",
    "plot",
    "grayscale",
    "histogram",
    "valley",
    "essentially",
    "give",
    "limit",
    "across",
    "x",
    "axis",
    "plt",
    "dot",
    "x",
    "lim",
    "list",
    "finally",
    "display",
    "image",
    "plt",
    "dot",
    "show",
    "save",
    "run",
    "python",
    "histogram",
    "dot",
    "p",
    "distribution",
    "pixels",
    "image",
    "see",
    "number",
    "bins",
    "across",
    "x",
    "axis",
    "basically",
    "represent",
    "intervals",
    "pixel",
    "intensities",
    "see",
    "peak",
    "region",
    "means",
    "close",
    "5060",
    "ish",
    "means",
    "image",
    "close",
    "4000",
    "pixels",
    "intensity",
    "see",
    "lot",
    "lot",
    "peeking",
    "region",
    "probably",
    "40",
    "70",
    "peak",
    "pixel",
    "intensities",
    "close",
    "3000",
    "pixel",
    "intensities",
    "image",
    "let",
    "try",
    "different",
    "image",
    "let",
    "try",
    "cants",
    "going",
    "save",
    "run",
    "peaking",
    "pixel",
    "values",
    "202",
    "makes",
    "sense",
    "image",
    "white",
    "given",
    "reason",
    "probably",
    "deduce",
    "peak",
    "words",
    "white",
    "five",
    "essentially",
    "computing",
    "grayscale",
    "histogram",
    "entire",
    "image",
    "essentially",
    "create",
    "mask",
    "compute",
    "histogram",
    "particular",
    "mask",
    "let",
    "let",
    "go",
    "back",
    "masking",
    "let",
    "grab",
    "grab",
    "let",
    "go",
    "right",
    "set",
    "image",
    "dot",
    "shape",
    "first",
    "two",
    "values",
    "sizes",
    "let",
    "essentially",
    "draw",
    "mask",
    "cv",
    "dot",
    "circle",
    "blank",
    "get",
    "center",
    "image",
    "shape",
    "one",
    "divided",
    "two",
    "image",
    "shape",
    "zero",
    "divided",
    "two",
    "two",
    "give",
    "radius",
    "100",
    "pixels",
    "give",
    "color",
    "245",
    "give",
    "thickness",
    "negative",
    "one",
    "display",
    "mask",
    "let",
    "call",
    "let",
    "call",
    "mask",
    "policy",
    "mask",
    "things",
    "get",
    "interesting",
    "get",
    "grayscale",
    "histogram",
    "mask",
    "way",
    "setting",
    "mask",
    "parameter",
    "mask",
    "two",
    "instead",
    "none",
    "set",
    "mask",
    "let",
    "see",
    "histogram",
    "mps",
    "undefined",
    "great",
    "could",
    "make",
    "kind",
    "made",
    "mistake",
    "oh",
    "right",
    "masters",
    "exactly",
    "masters",
    "circle",
    "circle",
    "circle",
    "essentially",
    "need",
    "mask",
    "image",
    "way",
    "creating",
    "mask",
    "setting",
    "equal",
    "cv",
    "dot",
    "bitcoins",
    "bitwise",
    "unscored",
    "pass",
    "grayscale",
    "image",
    "grayscale",
    "image",
    "pass",
    "mask",
    "equal",
    "circle",
    "use",
    "mask",
    "let",
    "display",
    "x",
    "sorry",
    "made",
    "mistake",
    "hopefully",
    "things",
    "fine",
    "right",
    "mask",
    "histogram",
    "computed",
    "particular",
    "mask",
    "see",
    "peaking",
    "pixel",
    "intensity",
    "values",
    "region",
    "smaller",
    "pickings",
    "regions",
    "let",
    "try",
    "another",
    "image",
    "let",
    "pass",
    "cats",
    "cats",
    "cats",
    "though",
    "jpg",
    "mask",
    "peaking",
    "image",
    "towards",
    "okay",
    "computing",
    "grayscale",
    "histograms",
    "let",
    "move",
    "true",
    "compute",
    "color",
    "histogram",
    "compute",
    "histogram",
    "color",
    "image",
    "rgb",
    "image",
    "let",
    "call",
    "color",
    "histogram",
    "way",
    "instead",
    "converting",
    "image",
    "grayscale",
    "let",
    "comment",
    "use",
    "mask",
    "later",
    "come",
    "mask",
    "img",
    "img",
    "yeah",
    "pretty",
    "much",
    "let",
    "start",
    "color",
    "histogram",
    "way",
    "let",
    "define",
    "tuple",
    "colors",
    "set",
    "equal",
    "b",
    "tuple",
    "g",
    "tuple",
    "element",
    "going",
    "next",
    "going",
    "say",
    "common",
    "call",
    "enumerate",
    "colors",
    "going",
    "going",
    "say",
    "hist",
    "going",
    "plot",
    "histogram",
    "saying",
    "cv",
    "dot",
    "calc",
    "hist",
    "going",
    "compute",
    "image",
    "channels",
    "mean",
    "eye",
    "going",
    "provide",
    "mask",
    "none",
    "give",
    "size",
    "256",
    "give",
    "ranges",
    "let",
    "plt",
    "dot",
    "plot",
    "hist",
    "give",
    "color",
    "equal",
    "call",
    "plt",
    "dot",
    "x",
    "lim",
    "purpose",
    "essentially",
    "grab",
    "copy",
    "uncomment",
    "plt",
    "dot",
    "show",
    "work",
    "missing",
    "something",
    "oh",
    "think",
    "computing",
    "histogram",
    "mask",
    "live",
    "next",
    "let",
    "save",
    "run",
    "oh",
    "cool",
    "let",
    "close",
    "enough",
    "made",
    "mistake",
    "color",
    "histogram",
    "make",
    "much",
    "difference",
    "color",
    "histogram",
    "get",
    "original",
    "image",
    "mask",
    "fact",
    "image",
    "see",
    "color",
    "image",
    "basically",
    "computed",
    "plot",
    "blue",
    "channel",
    "red",
    "channel",
    "green",
    "channel",
    "well",
    "using",
    "basically",
    "make",
    "peaking",
    "blue",
    "pixels",
    "pixel",
    "intensities",
    "peaking",
    "red",
    "probably",
    "around",
    "50",
    "peaking",
    "green",
    "probably",
    "around",
    "8075",
    "cool",
    "using",
    "basically",
    "make",
    "distribution",
    "pixel",
    "intensities",
    "three",
    "color",
    "channels",
    "let",
    "try",
    "apply",
    "mask",
    "setting",
    "equal",
    "mask",
    "let",
    "see",
    "whether",
    "everything",
    "order",
    "bit",
    "mass",
    "mass",
    "mass",
    "mass",
    "mass",
    "masks",
    "masks",
    "size",
    "okay",
    "finally",
    "got",
    "error",
    "basically",
    "mass",
    "needs",
    "binary",
    "format",
    "instead",
    "passing",
    "mask",
    "actually",
    "masked",
    "marks",
    "image",
    "regan",
    "passes",
    "fat",
    "mask",
    "change",
    "circle",
    "mask",
    "work",
    "without",
    "arrows",
    "change",
    "masked",
    "yeah",
    "around",
    "get",
    "color",
    "histogram",
    "particular",
    "mask",
    "made",
    "mistake",
    "use",
    "mask",
    "compute",
    "histogram",
    "one",
    "channel",
    "problem",
    "masked",
    "image",
    "actually",
    "three",
    "channels",
    "attempted",
    "use",
    "s3",
    "channeled",
    "mask",
    "calculate",
    "histogram",
    "per",
    "channel",
    "allowed",
    "open",
    "cv",
    "mistake",
    "kind",
    "use",
    "wrong",
    "variable",
    "names",
    "confused",
    "essentially",
    "computing",
    "histogram",
    "particular",
    "section",
    "image",
    "get",
    "high",
    "peaking",
    "red",
    "area",
    "high",
    "peaking",
    "blue",
    "era",
    "high",
    "peaking",
    "greens",
    "essentially",
    "video",
    "histograms",
    "actually",
    "allow",
    "analyze",
    "distribution",
    "pixel",
    "intensities",
    "whether",
    "grayscale",
    "image",
    "colored",
    "image",
    "really",
    "helpful",
    "lot",
    "advanced",
    "computer",
    "vision",
    "projects",
    "actually",
    "trying",
    "analyze",
    "image",
    "get",
    "maybe",
    "try",
    "equalize",
    "image",
    "peeking",
    "pixel",
    "values",
    "next",
    "video",
    "talking",
    "thresh",
    "hold",
    "image",
    "different",
    "types",
    "thresholding",
    "always",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "guys",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "going",
    "talking",
    "thresholding",
    "open",
    "cv",
    "thresholding",
    "binary",
    "realisation",
    "image",
    "general",
    "want",
    "take",
    "image",
    "convert",
    "binary",
    "image",
    "image",
    "pixels",
    "either",
    "zero",
    "black",
    "255",
    "white",
    "simple",
    "example",
    "thresholding",
    "would",
    "take",
    "image",
    "take",
    "particular",
    "value",
    "going",
    "call",
    "thresholding",
    "value",
    "compare",
    "pixel",
    "image",
    "threshold",
    "value",
    "pixel",
    "intensity",
    "less",
    "threshold",
    "value",
    "set",
    "pixel",
    "intensity",
    "zero",
    "threshold",
    "value",
    "set",
    "255",
    "white",
    "sense",
    "essentially",
    "create",
    "binary",
    "image",
    "regular",
    "standalone",
    "image",
    "video",
    "actually",
    "going",
    "talk",
    "two",
    "different",
    "types",
    "thresholding",
    "simple",
    "thresholding",
    "adaptive",
    "thresholding",
    "let",
    "start",
    "simple",
    "thresholding",
    "essence",
    "want",
    "talk",
    "simple",
    "thresholding",
    "want",
    "convert",
    "bgr",
    "image",
    "grayscale",
    "going",
    "say",
    "gray",
    "equal",
    "cv",
    "dot",
    "cvt",
    "color",
    "pass",
    "image",
    "pass",
    "color",
    "code",
    "vgr",
    "correct",
    "display",
    "image",
    "called",
    "gray",
    "pass",
    "great",
    "cool",
    "let",
    "start",
    "simple",
    "thresholding",
    "essentially",
    "apply",
    "idea",
    "simple",
    "thresholding",
    "essentially",
    "use",
    "cv",
    "dot",
    "threshold",
    "function",
    "function",
    "returns",
    "threshold",
    "thresh",
    "equal",
    "cv",
    "dot",
    "threshold",
    "essence",
    "takes",
    "grayscale",
    "image",
    "grayscale",
    "image",
    "passed",
    "thresholding",
    "function",
    "pass",
    "threshold",
    "value",
    "let",
    "set",
    "150",
    "specify",
    "something",
    "called",
    "maximum",
    "value",
    "pixel",
    "value",
    "greater",
    "greater",
    "150",
    "want",
    "set",
    "case",
    "want",
    "binarize",
    "image",
    "set",
    "finally",
    "specify",
    "thresholding",
    "type",
    "thresholding",
    "type",
    "essentially",
    "cv",
    "dot",
    "thrush",
    "underscore",
    "binary",
    "basically",
    "looks",
    "image",
    "compares",
    "pixel",
    "value",
    "threshold",
    "value",
    "value",
    "sets",
    "otherwise",
    "infers",
    "falls",
    "sets",
    "zero",
    "essentially",
    "returns",
    "two",
    "things",
    "trash",
    "thresholded",
    "image",
    "binarized",
    "image",
    "threshold",
    "essentially",
    "value",
    "passed",
    "150",
    "threshold",
    "value",
    "pass",
    "returned",
    "threshold",
    "value",
    "let",
    "actually",
    "display",
    "image",
    "let",
    "say",
    "show",
    "call",
    "threshold",
    "call",
    "simple",
    "thresh",
    "hold",
    "dead",
    "pass",
    "thrash",
    "let",
    "save",
    "run",
    "python",
    "thrash",
    "da",
    "p",
    "thresholded",
    "image",
    "get",
    "nothing",
    "different",
    "discussed",
    "thresholding",
    "one",
    "previous",
    "videos",
    "essentially",
    "get",
    "let",
    "play",
    "around",
    "threshold",
    "values",
    "let",
    "set",
    "let",
    "see",
    "result",
    "parts",
    "image",
    "become",
    "white",
    "course",
    "give",
    "higher",
    "value",
    "less",
    "parts",
    "image",
    "white",
    "let",
    "set",
    "pixels",
    "thresholded",
    "image",
    "actually",
    "pixel",
    "intensity",
    "greater",
    "essentially",
    "create",
    "inverse",
    "thresholded",
    "image",
    "could",
    "could",
    "essentially",
    "copy",
    "instead",
    "saying",
    "thresh",
    "going",
    "say",
    "thrush",
    "underscore",
    "inverse",
    "going",
    "leave",
    "everything",
    "else",
    "let",
    "set",
    "thing",
    "instead",
    "passing",
    "type",
    "thresholding",
    "going",
    "say",
    "cv",
    "dot",
    "thresh",
    "underscore",
    "binary",
    "scope",
    "inverse",
    "let",
    "call",
    "thresholded",
    "inverse",
    "pass",
    "inverse",
    "let",
    "save",
    "run",
    "essentially",
    "inverse",
    "image",
    "instead",
    "setting",
    "pixel",
    "intensities",
    "greater",
    "150",
    "255",
    "sets",
    "whatever",
    "values",
    "less",
    "150",
    "essentially",
    "get",
    "right",
    "black",
    "parts",
    "image",
    "change",
    "white",
    "white",
    "parts",
    "image",
    "change",
    "black",
    "cool",
    "simple",
    "threshold",
    "let",
    "move",
    "adaptive",
    "threshold",
    "data",
    "thresholds",
    "imagine",
    "got",
    "different",
    "images",
    "provided",
    "different",
    "threshold",
    "values",
    "kind",
    "one",
    "downsides",
    "manually",
    "specify",
    "specific",
    "threshold",
    "value",
    "cases",
    "might",
    "work",
    "advanced",
    "cases",
    "work",
    "one",
    "things",
    "could",
    "could",
    "essentially",
    "let",
    "computer",
    "find",
    "optimal",
    "threshold",
    "value",
    "using",
    "value",
    "refines",
    "binary",
    "rises",
    "image",
    "essence",
    "entire",
    "crux",
    "adaptive",
    "thresholding",
    "let",
    "set",
    "variable",
    "called",
    "adaptive",
    "growth",
    "thresh",
    "set",
    "equal",
    "cv",
    "dot",
    "adaptive",
    "threshold",
    "inside",
    "want",
    "pass",
    "source",
    "image",
    "let",
    "set",
    "gray",
    "going",
    "pass",
    "maximum",
    "value",
    "notice",
    "threshold",
    "value",
    "adaption",
    "method",
    "basically",
    "tells",
    "machine",
    "method",
    "use",
    "computing",
    "optimal",
    "threshold",
    "value",
    "going",
    "set",
    "mean",
    "neighborhood",
    "pixels",
    "let",
    "set",
    "cv",
    "dot",
    "adaptive",
    "scope",
    "thresh",
    "score",
    "mean",
    "underscore",
    "next",
    "set",
    "threshold",
    "type",
    "cv",
    "dot",
    "thresh",
    "underscore",
    "binary",
    "think",
    "different",
    "first",
    "example",
    "two",
    "parameters",
    "want",
    "specify",
    "block",
    "size",
    "essentially",
    "neighborhood",
    "size",
    "kernel",
    "size",
    "open",
    "cv",
    "needs",
    "use",
    "essentially",
    "compute",
    "mean",
    "find",
    "optimal",
    "threshold",
    "value",
    "let",
    "set",
    "finally",
    "last",
    "method",
    "specify",
    "c",
    "value",
    "c",
    "value",
    "essentially",
    "integer",
    "subtracted",
    "mean",
    "allowing",
    "us",
    "essentially",
    "fine",
    "tune",
    "threshold",
    "worry",
    "much",
    "set",
    "zero",
    "let",
    "set",
    "three",
    "finally",
    "done",
    "go",
    "ahead",
    "try",
    "display",
    "image",
    "let",
    "call",
    "adaptive",
    "thresholding",
    "pass",
    "adaptive",
    "cash",
    "let",
    "save",
    "run",
    "essentially",
    "adaptive",
    "thresholding",
    "method",
    "essentially",
    "done",
    "defined",
    "kernel",
    "size",
    "window",
    "drawn",
    "image",
    "case",
    "11",
    "open",
    "cv",
    "essentially",
    "computes",
    "mean",
    "neighborhood",
    "pixels",
    "finds",
    "optimal",
    "threshold",
    "value",
    "specific",
    "part",
    "slides",
    "right",
    "slides",
    "thing",
    "lines",
    "thing",
    "essentially",
    "slides",
    "every",
    "part",
    "image",
    "adaptive",
    "thresholding",
    "works",
    "wanted",
    "fine",
    "tune",
    "could",
    "change",
    "threshold",
    "go",
    "binary",
    "scope",
    "inverse",
    "see",
    "really",
    "going",
    "hood",
    "cool",
    "white",
    "parts",
    "image",
    "change",
    "black",
    "black",
    "parts",
    "image",
    "changed",
    "white",
    "let",
    "play",
    "around",
    "values",
    "let",
    "set",
    "probably",
    "13",
    "see",
    "okay",
    "definitely",
    "difference",
    "previous",
    "hyper",
    "parameter",
    "let",
    "try",
    "let",
    "go",
    "let",
    "set",
    "let",
    "set",
    "maybe",
    "one",
    "okay",
    "definitely",
    "white",
    "let",
    "set",
    "maybe",
    "five",
    "row",
    "play",
    "around",
    "values",
    "right",
    "subtract",
    "mean",
    "accurate",
    "right",
    "basically",
    "make",
    "edges",
    "basket",
    "let",
    "maybe",
    "increase",
    "nine",
    "get",
    "less",
    "white",
    "spots",
    "image",
    "essentially",
    "make",
    "features",
    "better",
    "cool",
    "essentially",
    "adaptive",
    "thresholding",
    "adaptive",
    "thresholding",
    "essentially",
    "optimal",
    "threshold",
    "value",
    "basis",
    "mean",
    "stick",
    "mean",
    "go",
    "something",
    "else",
    "instead",
    "mean",
    "let",
    "set",
    "gaussian",
    "let",
    "save",
    "see",
    "thresholded",
    "image",
    "using",
    "gaussian",
    "method",
    "difference",
    "gaussian",
    "applied",
    "essentially",
    "add",
    "weight",
    "pixel",
    "value",
    "computed",
    "mean",
    "across",
    "pixels",
    "able",
    "get",
    "better",
    "image",
    "use",
    "mean",
    "essentially",
    "adaptive",
    "thresholding",
    "mean",
    "works",
    "cases",
    "gaussian",
    "works",
    "cases",
    "real",
    "one",
    "size",
    "fits",
    "really",
    "play",
    "around",
    "values",
    "see",
    "get",
    "essentially",
    "discuss",
    "video",
    "talked",
    "two",
    "different",
    "types",
    "thresholding",
    "simple",
    "thresholding",
    "adaptive",
    "thresholding",
    "simple",
    "thresholding",
    "manually",
    "specify",
    "threshold",
    "value",
    "adaptive",
    "thresholding",
    "open",
    "cv",
    "us",
    "using",
    "specific",
    "block",
    "size",
    "current",
    "size",
    "computing",
    "threshold",
    "value",
    "basis",
    "mean",
    "basis",
    "gaussian",
    "distribution",
    "next",
    "video",
    "last",
    "video",
    "advanced",
    "section",
    "goes",
    "going",
    "discussing",
    "compute",
    "gradients",
    "edges",
    "image",
    "questions",
    "leave",
    "comments",
    "sure",
    "check",
    "otherwise",
    "see",
    "guys",
    "next",
    "video",
    "thanks",
    "watching",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "going",
    "talking",
    "gradients",
    "edge",
    "detection",
    "urban",
    "cv",
    "could",
    "think",
    "gradients",
    "edge",
    "like",
    "regions",
    "present",
    "image",
    "thing",
    "gradients",
    "edges",
    "completely",
    "different",
    "things",
    "mathematical",
    "point",
    "view",
    "pretty",
    "much",
    "get",
    "away",
    "thinking",
    "gradients",
    "edges",
    "programming",
    "perspective",
    "essentially",
    "previous",
    "videos",
    "discussed",
    "canny",
    "edge",
    "detector",
    "essentially",
    "kind",
    "advanced",
    "edge",
    "detection",
    "algorithm",
    "essentially",
    "multi",
    "step",
    "process",
    "video",
    "going",
    "talking",
    "two",
    "ways",
    "compute",
    "edges",
    "image",
    "lat",
    "placing",
    "sobel",
    "method",
    "let",
    "start",
    "left",
    "place",
    "first",
    "thing",
    "want",
    "want",
    "convert",
    "image",
    "grayscale",
    "recalling",
    "cvt",
    "dvd",
    "color",
    "color",
    "method",
    "pass",
    "image",
    "say",
    "cv",
    "color",
    "describe",
    "bgr",
    "grip",
    "display",
    "image",
    "called",
    "gray",
    "pass",
    "every",
    "pass",
    "great",
    "let",
    "start",
    "laplacian",
    "going",
    "define",
    "variable",
    "called",
    "lap",
    "set",
    "equal",
    "cv",
    "dot",
    "lap",
    "lesion",
    "essentially",
    "take",
    "source",
    "image",
    "great",
    "take",
    "something",
    "called",
    "depth",
    "data",
    "depth",
    "set",
    "cv",
    "dot",
    "64",
    "f",
    "long",
    "whatever",
    "next",
    "going",
    "say",
    "lap",
    "equal",
    "np",
    "dot",
    "u",
    "instead",
    "going",
    "pass",
    "np",
    "dot",
    "absolute",
    "pass",
    "lap",
    "since",
    "using",
    "numpy",
    "actually",
    "go",
    "ahead",
    "import",
    "numpy",
    "np",
    "go",
    "display",
    "image",
    "coil",
    "cv",
    "dot",
    "sure",
    "method",
    "called",
    "lamp",
    "lesion",
    "pass",
    "lap",
    "lap",
    "save",
    "run",
    "call",
    "python",
    "good",
    "radians",
    "dot",
    "p",
    "invalid",
    "syntax",
    "cv",
    "dot",
    "okay",
    "score",
    "64",
    "say",
    "essentially",
    "law",
    "placing",
    "edges",
    "image",
    "kind",
    "looks",
    "like",
    "image",
    "drawn",
    "chalkboard",
    "smudge",
    "bit",
    "anyway",
    "lab",
    "laser",
    "method",
    "let",
    "try",
    "another",
    "image",
    "let",
    "try",
    "park",
    "called",
    "boston",
    "let",
    "call",
    "park",
    "save",
    "right",
    "essentially",
    "looks",
    "like",
    "pencil",
    "shading",
    "image",
    "edges",
    "exists",
    "image",
    "least",
    "edges",
    "image",
    "essentially",
    "drawn",
    "pencil",
    "lightly",
    "submerged",
    "essentially",
    "left",
    "lacing",
    "edges",
    "could",
    "say",
    "worry",
    "much",
    "converted",
    "ui",
    "computed",
    "absolute",
    "value",
    "essentially",
    "laplacian",
    "method",
    "computes",
    "gradients",
    "image",
    "grayscale",
    "image",
    "generally",
    "involves",
    "lot",
    "mathematics",
    "essentially",
    "transition",
    "black",
    "white",
    "white",
    "black",
    "considered",
    "positive",
    "negative",
    "slope",
    "images",
    "negative",
    "pixel",
    "values",
    "essentially",
    "compute",
    "absolute",
    "value",
    "image",
    "pixel",
    "values",
    "image",
    "converted",
    "absolute",
    "values",
    "convert",
    "ui",
    "28",
    "image",
    "specific",
    "datatype",
    "basically",
    "crux",
    "going",
    "right",
    "let",
    "move",
    "next",
    "one",
    "subtle",
    "gradient",
    "magnitude",
    "representation",
    "essentially",
    "way",
    "sobel",
    "computes",
    "gradients",
    "two",
    "directions",
    "x",
    "gon",
    "na",
    "say",
    "sobble",
    "x",
    "gradients",
    "computed",
    "along",
    "x",
    "axis",
    "seth",
    "equal",
    "cv",
    "dot",
    "sobel",
    "pass",
    "image",
    "let",
    "add",
    "grayscale",
    "image",
    "pass",
    "data",
    "depth",
    "school",
    "64",
    "give",
    "x",
    "direction",
    "let",
    "set",
    "one",
    "direction",
    "set",
    "zero",
    "let",
    "copy",
    "call",
    "soble",
    "instead",
    "one",
    "zero",
    "save",
    "zero",
    "comma",
    "one",
    "visualize",
    "let",
    "print",
    "let",
    "call",
    "symbol",
    "x",
    "pass",
    "sub",
    "say",
    "either",
    "long",
    "show",
    "sabo",
    "set",
    "sabo",
    "call",
    "essentially",
    "gradients",
    "computed",
    "axis",
    "see",
    "lot",
    "horizontal",
    "specific",
    "gradients",
    "sub",
    "x",
    "computed",
    "across",
    "axis",
    "see",
    "axis",
    "specific",
    "gradients",
    "essentially",
    "get",
    "combined",
    "sobel",
    "image",
    "essentially",
    "combining",
    "two",
    "sobel",
    "x",
    "sobel",
    "way",
    "gon",
    "na",
    "say",
    "combined",
    "combined",
    "underscore",
    "sobald",
    "set",
    "equal",
    "cv",
    "dot",
    "bitwise",
    "school",
    "pass",
    "sabo",
    "x",
    "symbol",
    "display",
    "image",
    "let",
    "call",
    "cv",
    "dot",
    "show",
    "get",
    "combined",
    "sobel",
    "pass",
    "combined",
    "symbol",
    "let",
    "run",
    "essentially",
    "combined",
    "sobble",
    "get",
    "let",
    "go",
    "back",
    "essentially",
    "took",
    "two",
    "apply",
    "cv",
    "dot",
    "bitwise",
    "essentially",
    "got",
    "image",
    "want",
    "compare",
    "lat",
    "race",
    "two",
    "completely",
    "different",
    "algorithms",
    "results",
    "get",
    "completely",
    "different",
    "okay",
    "let",
    "compare",
    "left",
    "patient",
    "sobel",
    "canny",
    "edge",
    "detector",
    "let",
    "go",
    "let",
    "say",
    "kenny",
    "equal",
    "cv",
    "kenny",
    "pass",
    "image",
    "let",
    "possible",
    "grayscale",
    "image",
    "let",
    "give",
    "threshold",
    "values",
    "150",
    "done",
    "let",
    "display",
    "image",
    "let",
    "call",
    "kenny",
    "pass",
    "kenny",
    "let",
    "save",
    "let",
    "see",
    "gives",
    "us",
    "let",
    "compare",
    "essentially",
    "last",
    "place",
    "gradient",
    "representation",
    "essentially",
    "returns",
    "kind",
    "pencil",
    "shading",
    "version",
    "image",
    "edges",
    "image",
    "combined",
    "several",
    "computes",
    "gradients",
    "x",
    "direction",
    "combine",
    "two",
    "bitwise",
    "kenny",
    "basically",
    "advanced",
    "algorithm",
    "actually",
    "uses",
    "sobel",
    "one",
    "stages",
    "like",
    "mentioned",
    "kenny",
    "multi",
    "stage",
    "process",
    "one",
    "stages",
    "using",
    "symbol",
    "method",
    "compute",
    "gradients",
    "image",
    "essentially",
    "see",
    "canny",
    "edge",
    "detector",
    "cleaner",
    "version",
    "edges",
    "found",
    "image",
    "cases",
    "going",
    "see",
    "kenny",
    "used",
    "advanced",
    "cases",
    "probably",
    "going",
    "see",
    "sobel",
    "use",
    "lot",
    "necessarily",
    "lap",
    "racing",
    "definitely",
    "pretty",
    "much",
    "video",
    "fact",
    "video",
    "concludes",
    "advanced",
    "section",
    "course",
    "moving",
    "next",
    "section",
    "discussing",
    "face",
    "detection",
    "face",
    "recognition",
    "urban",
    "see",
    "actually",
    "going",
    "touch",
    "using",
    "hard",
    "cascades",
    "perform",
    "face",
    "detection",
    "face",
    "recognition",
    "actually",
    "two",
    "parts",
    "face",
    "recognition",
    "open",
    "cv",
    "built",
    "face",
    "recognizer",
    "second",
    "part",
    "actually",
    "building",
    "deep",
    "learning",
    "model",
    "essentially",
    "recognize",
    "faces",
    "image",
    "like",
    "always",
    "questions",
    "leave",
    "comments",
    "otherwise",
    "see",
    "guys",
    "next",
    "section",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "last",
    "part",
    "python",
    "open",
    "cv",
    "coasts",
    "going",
    "talk",
    "face",
    "detection",
    "face",
    "recognition",
    "open",
    "cv",
    "going",
    "video",
    "actually",
    "discussing",
    "detect",
    "faces",
    "urban",
    "cv",
    "using",
    "something",
    "called",
    "har",
    "cascade",
    "next",
    "video",
    "talk",
    "recognize",
    "faces",
    "using",
    "open",
    "cv",
    "built",
    "face",
    "recognizer",
    "implementing",
    "deep",
    "learning",
    "model",
    "recognize",
    "simpson",
    "counters",
    "going",
    "create",
    "scratch",
    "use",
    "open",
    "cv",
    "pre",
    "processing",
    "displaying",
    "images",
    "stuff",
    "like",
    "let",
    "get",
    "video",
    "face",
    "detection",
    "different",
    "face",
    "recognition",
    "face",
    "detection",
    "merely",
    "detects",
    "presence",
    "face",
    "image",
    "face",
    "recognition",
    "involves",
    "identifying",
    "whose",
    "face",
    "talk",
    "later",
    "course",
    "essentially",
    "face",
    "detection",
    "performed",
    "using",
    "classifiers",
    "classifier",
    "essentially",
    "algorithm",
    "decides",
    "whether",
    "given",
    "image",
    "positive",
    "negative",
    "whether",
    "face",
    "present",
    "classify",
    "needs",
    "trained",
    "1000s",
    "10s",
    "1000s",
    "images",
    "without",
    "faces",
    "fortunately",
    "us",
    "open",
    "cv",
    "already",
    "comes",
    "lot",
    "pre",
    "trained",
    "classifiers",
    "use",
    "program",
    "essentially",
    "two",
    "main",
    "classifiers",
    "exist",
    "today",
    "har",
    "cascades",
    "mo",
    "advanced",
    "classifiers",
    "core",
    "local",
    "binary",
    "patterns",
    "going",
    "talk",
    "local",
    "binary",
    "patterns",
    "course",
    "essentially",
    "advanced",
    "cascade",
    "classifiers",
    "prone",
    "noise",
    "image",
    "compared",
    "hard",
    "cascades",
    "currently",
    "open",
    "cvs",
    "github",
    "page",
    "store",
    "whole",
    "cascade",
    "cascade",
    "classifiers",
    "see",
    "plenty",
    "hard",
    "cascades",
    "open",
    "cv",
    "makes",
    "available",
    "general",
    "public",
    "hard",
    "cascade",
    "eye",
    "fragile",
    "cat",
    "face",
    "face",
    "default",
    "full",
    "body",
    "left",
    "eye",
    "russian",
    "license",
    "plate",
    "russian",
    "plate",
    "number",
    "think",
    "thing",
    "cascade",
    "detect",
    "smile",
    "hawk",
    "cascade",
    "detection",
    "upper",
    "body",
    "things",
    "like",
    "feel",
    "free",
    "use",
    "whatever",
    "want",
    "video",
    "going",
    "performing",
    "face",
    "detection",
    "going",
    "use",
    "har",
    "cascade",
    "underscore",
    "frontal",
    "face",
    "underscore",
    "default",
    "dot",
    "xml",
    "go",
    "ahead",
    "open",
    "going",
    "get",
    "lines",
    "xml",
    "code",
    "essentially",
    "go",
    "role",
    "button",
    "get",
    "raw",
    "xml",
    "code",
    "click",
    "ctrl",
    "command",
    "mac",
    "click",
    "ctrl",
    "c",
    "command",
    "c",
    "go",
    "vs",
    "code",
    "editor",
    "create",
    "new",
    "file",
    "going",
    "call",
    "har",
    "unscrew",
    "face",
    "dot",
    "xml",
    "inside",
    "want",
    "paste",
    "lines",
    "xml",
    "code",
    "go",
    "ahead",
    "save",
    "classifier",
    "ready",
    "go",
    "ahead",
    "close",
    "going",
    "using",
    "hawk",
    "cascade",
    "classifier",
    "essentially",
    "detect",
    "faces",
    "present",
    "image",
    "file",
    "called",
    "face",
    "detect",
    "face",
    "underscore",
    "detected",
    "py",
    "inputted",
    "open",
    "cv",
    "basically",
    "read",
    "image",
    "lady",
    "person",
    "image",
    "go",
    "real",
    "quick",
    "display",
    "let",
    "run",
    "python",
    "face",
    "face",
    "disco",
    "detect",
    "dot",
    "p",
    "get",
    "image",
    "new",
    "window",
    "cool",
    "let",
    "actually",
    "implement",
    "code",
    "first",
    "thing",
    "want",
    "convert",
    "image",
    "grayscale",
    "face",
    "detection",
    "involve",
    "skin",
    "tone",
    "colors",
    "present",
    "image",
    "hard",
    "cascades",
    "essentially",
    "look",
    "object",
    "image",
    "using",
    "edges",
    "tries",
    "determine",
    "whether",
    "face",
    "really",
    "need",
    "color",
    "image",
    "go",
    "ahead",
    "convert",
    "grayscale",
    "tv",
    "dot",
    "cvt",
    "color",
    "passing",
    "image",
    "cv",
    "dot",
    "color",
    "bgr",
    "gray",
    "display",
    "call",
    "gray",
    "color",
    "gray",
    "person",
    "pass",
    "name",
    "let",
    "save",
    "run",
    "pass",
    "gray",
    "okay",
    "blu",
    "ray",
    "person",
    "let",
    "move",
    "essentially",
    "reading",
    "har",
    "underscore",
    "face",
    "dot",
    "xml",
    "file",
    "way",
    "essentially",
    "create",
    "har",
    "cascade",
    "variable",
    "let",
    "set",
    "underscore",
    "cascade",
    "going",
    "set",
    "equal",
    "cv",
    "dot",
    "cascade",
    "classifier",
    "inside",
    "essentially",
    "want",
    "parsing",
    "path",
    "har",
    "xml",
    "file",
    "simple",
    "saying",
    "har",
    "en",
    "disco",
    "face",
    "dot",
    "xml",
    "cascade",
    "classifier",
    "class",
    "essentially",
    "read",
    "lines",
    "xml",
    "code",
    "store",
    "variable",
    "called",
    "har",
    "underscore",
    "cascade",
    "read",
    "har",
    "cascade",
    "file",
    "let",
    "actually",
    "try",
    "detect",
    "face",
    "image",
    "going",
    "essentially",
    "say",
    "faces",
    "school",
    "rect",
    "equal",
    "har",
    "underscore",
    "cascade",
    "dot",
    "detect",
    "multi",
    "scale",
    "instead",
    "going",
    "pass",
    "image",
    "want",
    "detect",
    "based",
    "great",
    "going",
    "pass",
    "scale",
    "factor",
    "let",
    "set",
    "give",
    "variable",
    "called",
    "minimum",
    "neighbors",
    "essentially",
    "parameter",
    "specifies",
    "number",
    "neighbors",
    "rectangle",
    "called",
    "face",
    "let",
    "set",
    "three",
    "nap",
    "essentially",
    "detect",
    "multiscale",
    "instance",
    "cascade",
    "classifier",
    "class",
    "essentially",
    "take",
    "image",
    "use",
    "variables",
    "called",
    "scale",
    "factor",
    "minimum",
    "labels",
    "essentially",
    "detect",
    "face",
    "return",
    "essentially",
    "rectangular",
    "coordinates",
    "face",
    "list",
    "faces",
    "score",
    "rec",
    "exactly",
    "giving",
    "faces",
    "scope",
    "rect",
    "rect",
    "rectangle",
    "essentially",
    "print",
    "number",
    "faces",
    "found",
    "image",
    "essentially",
    "printing",
    "length",
    "faces",
    "score",
    "rect",
    "variable",
    "let",
    "let",
    "print",
    "number",
    "number",
    "faces",
    "found",
    "equal",
    "pass",
    "length",
    "faces",
    "school",
    "rect",
    "let",
    "save",
    "run",
    "see",
    "number",
    "faces",
    "found",
    "one",
    "true",
    "one",
    "person",
    "image",
    "code",
    "utilizing",
    "fact",
    "faces",
    "school",
    "rec",
    "essentially",
    "rectangular",
    "coordinates",
    "faces",
    "present",
    "image",
    "essentially",
    "looping",
    "list",
    "essentially",
    "grab",
    "coordinates",
    "images",
    "draw",
    "rectangle",
    "detected",
    "faces",
    "let",
    "way",
    "saying",
    "x",
    "comma",
    "comma",
    "w",
    "comma",
    "h",
    "h",
    "faces",
    "underscore",
    "rect",
    "going",
    "going",
    "draw",
    "rectangle",
    "cv",
    "rectangle",
    "original",
    "image",
    "img",
    "give",
    "point",
    "one",
    "point",
    "one",
    "essentially",
    "x",
    "comma",
    "point",
    "two",
    "essentially",
    "x",
    "plus",
    "w",
    "comma",
    "plus",
    "let",
    "give",
    "color",
    "let",
    "set",
    "green",
    "zero",
    "comma",
    "255",
    "comma",
    "zero",
    "give",
    "thickness",
    "two",
    "print",
    "display",
    "image",
    "let",
    "set",
    "detected",
    "basis",
    "pass",
    "omg",
    "look",
    "image",
    "essentially",
    "see",
    "rectangle",
    "drawn",
    "image",
    "essence",
    "face",
    "open",
    "cv",
    "hard",
    "cascades",
    "found",
    "image",
    "let",
    "try",
    "another",
    "image",
    "couple",
    "people",
    "couple",
    "people",
    "image",
    "five",
    "people",
    "going",
    "use",
    "image",
    "try",
    "see",
    "many",
    "faces",
    "obg",
    "hard",
    "cascades",
    "could",
    "detect",
    "image",
    "let",
    "set",
    "group",
    "two",
    "change",
    "group",
    "five",
    "people",
    "save",
    "close",
    "right",
    "people",
    "save",
    "run",
    "want",
    "point",
    "real",
    "quick",
    "number",
    "faces",
    "found",
    "actually",
    "seven",
    "know",
    "five",
    "people",
    "image",
    "let",
    "actually",
    "see",
    "open",
    "cv",
    "thought",
    "face",
    "go",
    "real",
    "quick",
    "actually",
    "detected",
    "faces",
    "image",
    "five",
    "people",
    "also",
    "detected",
    "two",
    "guests",
    "stomach",
    "part",
    "neck",
    "expected",
    "cascades",
    "really",
    "sensitive",
    "noise",
    "image",
    "something",
    "pretty",
    "much",
    "looks",
    "like",
    "face",
    "like",
    "neck",
    "looks",
    "like",
    "face",
    "structure",
    "typical",
    "face",
    "would",
    "know",
    "stomach",
    "recognized",
    "face",
    "expected",
    "one",
    "way",
    "try",
    "minimize",
    "sensitivity",
    "noise",
    "essentially",
    "modifying",
    "scale",
    "factor",
    "minimum",
    "neighbors",
    "let",
    "increase",
    "minimum",
    "neighbors",
    "maybe",
    "six",
    "seven",
    "save",
    "run",
    "see",
    "six",
    "faces",
    "found",
    "guess",
    "increasing",
    "minimum",
    "neighbors",
    "parameter",
    "essentially",
    "stopped",
    "open",
    "open",
    "cv",
    "detecting",
    "stomach",
    "face",
    "let",
    "try",
    "another",
    "complex",
    "image",
    "couple",
    "people",
    "group",
    "one",
    "change",
    "group",
    "one",
    "save",
    "rock",
    "see",
    "number",
    "faces",
    "never",
    "found",
    "six",
    "know",
    "six",
    "let",
    "actually",
    "change",
    "minimum",
    "minimum",
    "neighbors",
    "bit",
    "let",
    "change",
    "first",
    "three",
    "see",
    "many",
    "faces",
    "found",
    "got",
    "okay",
    "people",
    "back",
    "want",
    "chosen",
    "either",
    "faces",
    "perfectly",
    "perpendicular",
    "camera",
    "wearing",
    "accessories",
    "face",
    "example",
    "eyeglasses",
    "dude",
    "wearing",
    "hat",
    "dude",
    "ran",
    "cap",
    "stuff",
    "like",
    "let",
    "actually",
    "change",
    "one",
    "let",
    "see",
    "gets",
    "us",
    "one",
    "ron",
    "got",
    "19",
    "faces",
    "found",
    "image",
    "looping",
    "values",
    "changing",
    "values",
    "tweaking",
    "values",
    "essentially",
    "get",
    "robust",
    "result",
    "course",
    "minimizing",
    "values",
    "essentially",
    "making",
    "open",
    "cv",
    "small",
    "cascades",
    "prone",
    "noise",
    "trade",
    "need",
    "consider",
    "hard",
    "cascades",
    "effective",
    "detecting",
    "faces",
    "popular",
    "advanced",
    "probably",
    "would",
    "use",
    "build",
    "advanced",
    "computer",
    "vision",
    "projects",
    "think",
    "dealings",
    "face",
    "recognizer",
    "effective",
    "less",
    "sensitive",
    "noise",
    "open",
    "cv",
    "cascades",
    "stands",
    "use",
    "case",
    "hard",
    "cascades",
    "popular",
    "easy",
    "use",
    "require",
    "minimal",
    "setup",
    "wanted",
    "extend",
    "videos",
    "could",
    "essentially",
    "detect",
    "hot",
    "cascades",
    "individual",
    "frame",
    "video",
    "skipping",
    "pretty",
    "self",
    "explanatory",
    "pretty",
    "much",
    "video",
    "discussed",
    "detect",
    "faces",
    "open",
    "cv",
    "using",
    "open",
    "cv",
    "har",
    "cascades",
    "next",
    "video",
    "actually",
    "talk",
    "recognize",
    "faces",
    "open",
    "cv",
    "using",
    "open",
    "cv",
    "built",
    "face",
    "recognizer",
    "like",
    "always",
    "questions",
    "comments",
    "concerns",
    "whatever",
    "leave",
    "comments",
    "otherwise",
    "see",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "back",
    "another",
    "video",
    "video",
    "learn",
    "build",
    "face",
    "recognition",
    "model",
    "open",
    "cv",
    "using",
    "open",
    "cv",
    "built",
    "face",
    "recognizer",
    "previous",
    "video",
    "dealt",
    "detecting",
    "faces",
    "open",
    "cv",
    "using",
    "hard",
    "cascades",
    "video",
    "actually",
    "cover",
    "recognize",
    "faces",
    "image",
    "five",
    "folders",
    "five",
    "different",
    "people",
    "inside",
    "folder",
    "20",
    "images",
    "particular",
    "person",
    "jerry",
    "21",
    "images",
    "anson",
    "17",
    "mindy",
    "kailyn",
    "22",
    "ben",
    "affleck",
    "14",
    "essentially",
    "going",
    "going",
    "use",
    "open",
    "cv",
    "built",
    "face",
    "recognizer",
    "going",
    "train",
    "right",
    "images",
    "five",
    "folders",
    "sort",
    "like",
    "building",
    "mini",
    "sized",
    "deep",
    "learning",
    "model",
    "except",
    "going",
    "build",
    "model",
    "scratch",
    "going",
    "use",
    "open",
    "tvs",
    "built",
    "face",
    "recognizer",
    "going",
    "actually",
    "going",
    "pass",
    "close",
    "90",
    "images",
    "going",
    "train",
    "recognizer",
    "90",
    "images",
    "let",
    "create",
    "new",
    "file",
    "going",
    "call",
    "faces",
    "ns",
    "go",
    "train",
    "dog",
    "p",
    "going",
    "input",
    "always",
    "going",
    "input",
    "cv",
    "cv",
    "going",
    "import",
    "numpy",
    "np",
    "first",
    "thing",
    "want",
    "essentially",
    "create",
    "list",
    "people",
    "image",
    "essentially",
    "names",
    "folders",
    "particular",
    "people",
    "could",
    "manually",
    "type",
    "could",
    "essentially",
    "create",
    "empty",
    "list",
    "let",
    "call",
    "loop",
    "every",
    "folder",
    "folder",
    "let",
    "set",
    "austrian",
    "say",
    "p",
    "dot",
    "append",
    "print",
    "let",
    "save",
    "run",
    "python",
    "beaters",
    "skirt",
    "skirt",
    "trained",
    "p",
    "get",
    "list",
    "got",
    "one",
    "way",
    "going",
    "next",
    "essentially",
    "going",
    "create",
    "variable",
    "called",
    "dir",
    "set",
    "equal",
    "base",
    "folder",
    "folder",
    "contains",
    "five",
    "folders",
    "people",
    "cool",
    "done",
    "essentially",
    "create",
    "function",
    "called",
    "def",
    "create",
    "unscrewed",
    "train",
    "essentially",
    "loop",
    "every",
    "folder",
    "base",
    "folder",
    "inside",
    "folder",
    "going",
    "loop",
    "every",
    "image",
    "essentially",
    "grab",
    "face",
    "image",
    "essentially",
    "add",
    "training",
    "set",
    "training",
    "set",
    "consist",
    "two",
    "lives",
    "first",
    "one",
    "called",
    "features",
    "essentially",
    "image",
    "arrays",
    "faces",
    "let",
    "set",
    "empty",
    "list",
    "second",
    "list",
    "corresponding",
    "labels",
    "every",
    "face",
    "features",
    "list",
    "corresponding",
    "label",
    "whose",
    "face",
    "belong",
    "like",
    "one",
    "image",
    "could",
    "belong",
    "ben",
    "affleck",
    "second",
    "image",
    "could",
    "belong",
    "elton",
    "john",
    "let",
    "create",
    "function",
    "going",
    "say",
    "going",
    "loop",
    "every",
    "person",
    "people",
    "list",
    "going",
    "grab",
    "path",
    "person",
    "every",
    "folder",
    "base",
    "folder",
    "going",
    "folder",
    "grabbing",
    "path",
    "folder",
    "essentially",
    "simple",
    "saying",
    "oh",
    "dot",
    "path",
    "dot",
    "join",
    "join",
    "join",
    "der",
    "person",
    "going",
    "gon",
    "na",
    "create",
    "labels",
    "label",
    "variable",
    "set",
    "equal",
    "people",
    "index",
    "person",
    "way",
    "inside",
    "folder",
    "going",
    "loop",
    "every",
    "image",
    "folder",
    "going",
    "say",
    "image",
    "image",
    "stock",
    "list",
    "path",
    "going",
    "grab",
    "image",
    "park",
    "going",
    "say",
    "image",
    "underscore",
    "path",
    "equal",
    "os",
    "dot",
    "path",
    "dot",
    "join",
    "going",
    "say",
    "join",
    "going",
    "join",
    "path",
    "variable",
    "image",
    "path",
    "image",
    "going",
    "read",
    "image",
    "path",
    "going",
    "create",
    "variable",
    "called",
    "img",
    "underscore",
    "rain",
    "equal",
    "cv",
    "dot",
    "read",
    "image",
    "scope",
    "path",
    "going",
    "convert",
    "image",
    "grayscale",
    "think",
    "cvt",
    "color",
    "pause",
    "img",
    "scope",
    "right",
    "pass",
    "v",
    "dot",
    "c",
    "cv",
    "dot",
    "color",
    "screw",
    "bgr",
    "grip",
    "cool",
    "done",
    "essentially",
    "trying",
    "detect",
    "faces",
    "image",
    "let",
    "go",
    "back",
    "face",
    "underscore",
    "detect",
    "grab",
    "whole",
    "cascade",
    "classifier",
    "variable",
    "let",
    "paste",
    "create",
    "set",
    "faces",
    "school",
    "rect",
    "set",
    "equal",
    "har",
    "underscore",
    "cascade",
    "dot",
    "detect",
    "multi",
    "scale",
    "take",
    "gray",
    "image",
    "scale",
    "factor",
    "add",
    "minimum",
    "neighbors",
    "four",
    "loop",
    "every",
    "every",
    "face",
    "face",
    "rect",
    "x",
    "comma",
    "comma",
    "w",
    "comma",
    "faces",
    "rect",
    "going",
    "grab",
    "bases",
    "region",
    "interest",
    "set",
    "equal",
    "basically",
    "crop",
    "face",
    "image",
    "going",
    "say",
    "gray",
    "two",
    "plus",
    "h",
    "x",
    "2x",
    "plus",
    "faces",
    "face",
    "region",
    "interest",
    "append",
    "features",
    "list",
    "append",
    "corresponding",
    "label",
    "labels",
    "list",
    "going",
    "features",
    "dot",
    "append",
    "going",
    "pass",
    "faces",
    "scope",
    "labels",
    "dot",
    "append",
    "label",
    "label",
    "variable",
    "essentially",
    "index",
    "list",
    "idea",
    "behind",
    "converting",
    "label",
    "numerical",
    "values",
    "essentially",
    "reducing",
    "strain",
    "computer",
    "creating",
    "sort",
    "mapping",
    "string",
    "numerical",
    "label",
    "mapping",
    "going",
    "essentially",
    "index",
    "particular",
    "list",
    "let",
    "say",
    "grab",
    "first",
    "image",
    "image",
    "ben",
    "affleck",
    "label",
    "would",
    "zero",
    "ben",
    "affleck",
    "zeroeth",
    "index",
    "people",
    "list",
    "similarly",
    "elton",
    "john",
    "image",
    "elton",
    "john",
    "would",
    "label",
    "one",
    "second",
    "position",
    "first",
    "index",
    "people",
    "lists",
    "essentially",
    "idea",
    "behind",
    "done",
    "essentially",
    "trying",
    "run",
    "see",
    "whether",
    "got",
    "errors",
    "bring",
    "length",
    "features",
    "let",
    "say",
    "length",
    "length",
    "features",
    "list",
    "equal",
    "length",
    "features",
    "thing",
    "copy",
    "length",
    "labels",
    "list",
    "set",
    "length",
    "labels",
    "give",
    "us",
    "error",
    "let",
    "run",
    "get",
    "length",
    "features",
    "100",
    "length",
    "labels",
    "essentially",
    "100",
    "faces",
    "100",
    "corresponding",
    "labels",
    "faces",
    "need",
    "anymore",
    "essentially",
    "use",
    "features",
    "labels",
    "list",
    "appended",
    "train",
    "recognizer",
    "way",
    "instantiate",
    "face",
    "recognizer",
    "call",
    "instance",
    "p",
    "h",
    "face",
    "recognizer",
    "underscore",
    "create",
    "class",
    "essentially",
    "instantiate",
    "face",
    "right",
    "actually",
    "train",
    "recognizer",
    "features",
    "list",
    "labels",
    "labels",
    "list",
    "way",
    "saying",
    "face",
    "underscore",
    "recognizer",
    "dot",
    "train",
    "pass",
    "features",
    "list",
    "pass",
    "labels",
    "list",
    "actually",
    "want",
    "convert",
    "features",
    "labels",
    "list",
    "numpy",
    "arrays",
    "going",
    "going",
    "say",
    "features",
    "equal",
    "np",
    "dot",
    "array",
    "features",
    "say",
    "labels",
    "equal",
    "np",
    "dot",
    "array",
    "labels",
    "save",
    "run",
    "ok",
    "data",
    "object",
    "let",
    "add",
    "typed",
    "object",
    "horse",
    "detail",
    "type",
    "equal",
    "object",
    "actually",
    "print",
    "done",
    "let",
    "say",
    "craning",
    "actually",
    "go",
    "ahead",
    "save",
    "features",
    "labels",
    "list",
    "going",
    "say",
    "np",
    "dot",
    "save",
    "going",
    "call",
    "pass",
    "features",
    "np",
    "dots",
    "mp",
    "dot",
    "save",
    "labels",
    "dot",
    "npy",
    "pass",
    "labels",
    "let",
    "save",
    "run",
    "cool",
    "essentially",
    "face",
    "recognizer",
    "trained",
    "use",
    "problem",
    "plan",
    "use",
    "face",
    "recognizer",
    "another",
    "file",
    "separately",
    "manually",
    "repeat",
    "process",
    "whole",
    "process",
    "adding",
    "images",
    "list",
    "getting",
    "corresponding",
    "labels",
    "converting",
    "numpy",
    "rays",
    "training",
    "open",
    "cv",
    "allows",
    "us",
    "essentially",
    "save",
    "trained",
    "model",
    "use",
    "another",
    "file",
    "another",
    "directory",
    "another",
    "part",
    "world",
    "using",
    "particular",
    "yaml",
    "source",
    "file",
    "going",
    "repeat",
    "process",
    "change",
    "going",
    "going",
    "say",
    "face",
    "recognizer",
    "dot",
    "save",
    "going",
    "give",
    "path",
    "yaml",
    "source",
    "file",
    "going",
    "save",
    "face",
    "unscrewed",
    "trend",
    "dot",
    "yamo",
    "let",
    "repeat",
    "process",
    "trainings",
    "notice",
    "face",
    "scope",
    "trained",
    "yamo",
    "file",
    "directory",
    "well",
    "faces",
    "well",
    "features",
    "npy",
    "annal",
    "labels",
    "dot",
    "npy",
    "let",
    "actually",
    "use",
    "train",
    "model",
    "recognize",
    "faces",
    "image",
    "let",
    "close",
    "create",
    "new",
    "file",
    "going",
    "call",
    "face",
    "school",
    "rec",
    "hig",
    "nition",
    "dot",
    "p",
    "simply",
    "going",
    "import",
    "numpy",
    "mp",
    "cv",
    "sc",
    "v",
    "need",
    "us",
    "anymore",
    "looping",
    "directories",
    "essentially",
    "create",
    "har",
    "underscore",
    "cascade",
    "file",
    "let",
    "let",
    "go",
    "grab",
    "load",
    "features",
    "label",
    "rate",
    "using",
    "saying",
    "features",
    "equal",
    "np",
    "note",
    "load",
    "say",
    "labels",
    "equal",
    "np",
    "dot",
    "load",
    "called",
    "essentially",
    "read",
    "face",
    "scope",
    "train",
    "yamo",
    "file",
    "let",
    "go",
    "let",
    "grab",
    "line",
    "let",
    "say",
    "face",
    "recognizer",
    "dot",
    "read",
    "going",
    "give",
    "path",
    "yaml",
    "source",
    "file",
    "face",
    "unscrewed",
    "face",
    "screw",
    "trained",
    "dot",
    "yamo",
    "pretty",
    "much",
    "need",
    "need",
    "get",
    "mapping",
    "let",
    "grab",
    "list",
    "well",
    "pretty",
    "much",
    "let",
    "create",
    "variable",
    "image",
    "set",
    "save",
    "read",
    "give",
    "path",
    "let",
    "create",
    "eight",
    "let",
    "grab",
    "one",
    "validation",
    "one",
    "validation",
    "one",
    "ben",
    "affleck",
    "let",
    "try",
    "grab",
    "piece",
    "graham",
    "maybe",
    "image",
    "piece",
    "jpg",
    "file",
    "convert",
    "image",
    "grayscale",
    "color",
    "positive",
    "image",
    "cv",
    "color",
    "going",
    "bg",
    "bgr",
    "great",
    "let",
    "play",
    "image",
    "see",
    "cole",
    "person",
    "identified",
    "person",
    "patient",
    "board",
    "going",
    "going",
    "first",
    "detect",
    "face",
    "image",
    "way",
    "saying",
    "faces",
    "underscore",
    "rect",
    "equal",
    "r",
    "go",
    "cascade",
    "dot",
    "detect",
    "multiscale",
    "pass",
    "gray",
    "image",
    "pass",
    "scale",
    "factor",
    "give",
    "minimum",
    "neighbors",
    "foe",
    "loop",
    "every",
    "face",
    "faces",
    "score",
    "rect",
    "sue",
    "sue",
    "x",
    "comma",
    "comma",
    "w",
    "comma",
    "h",
    "faces",
    "basis",
    "score",
    "rect",
    "grab",
    "region",
    "interest",
    "interested",
    "finding",
    "two",
    "one",
    "plus",
    "h",
    "x",
    "2x",
    "plus",
    "predict",
    "using",
    "face",
    "recognizer",
    "get",
    "label",
    "confidence",
    "value",
    "say",
    "face",
    "recognizer",
    "dot",
    "predict",
    "predict",
    "faces",
    "scope",
    "roi",
    "let",
    "print",
    "let",
    "call",
    "label",
    "equal",
    "label",
    "confidence",
    "color",
    "confidence",
    "since",
    "using",
    "numerical",
    "values",
    "probably",
    "probably",
    "say",
    "people",
    "label",
    "okay",
    "essentially",
    "put",
    "text",
    "image",
    "show",
    "us",
    "really",
    "going",
    "put",
    "image",
    "create",
    "string",
    "variable",
    "people",
    "label",
    "person",
    "involved",
    "image",
    "given",
    "origin",
    "let",
    "say",
    "10",
    "let",
    "say",
    "20",
    "give",
    "font",
    "face",
    "cv",
    "dot",
    "font",
    "unscrew",
    "hershey",
    "school",
    "complex",
    "give",
    "font",
    "scale",
    "one",
    "point",
    "color",
    "zero",
    "comma",
    "255",
    "comma",
    "zero",
    "give",
    "thickness",
    "two",
    "draw",
    "rectangle",
    "image",
    "face",
    "draw",
    "image",
    "give",
    "x",
    "x",
    "plus",
    "delta",
    "comma",
    "plus",
    "give",
    "color",
    "zero",
    "comma",
    "two",
    "five",
    "comma",
    "zero",
    "give",
    "thickness",
    "two",
    "done",
    "find",
    "display",
    "image",
    "called",
    "detected",
    "bass",
    "pass",
    "image",
    "finally",
    "cv",
    "delta",
    "wait",
    "key",
    "zero",
    "let",
    "save",
    "see",
    "get",
    "python",
    "python",
    "face",
    "school",
    "record",
    "nish",
    "nation",
    "dot",
    "p",
    "alone",
    "love",
    "pickles",
    "equals",
    "false",
    "gosh",
    "probably",
    "need",
    "anymore",
    "let",
    "come",
    "wanted",
    "use",
    "could",
    "essentially",
    "use",
    "mp",
    "dot",
    "load",
    "since",
    "data",
    "types",
    "objects",
    "basically",
    "say",
    "allow",
    "pickle",
    "equal",
    "true",
    "essentially",
    "going",
    "use",
    "let",
    "comment",
    "save",
    "okay",
    "get",
    "ben",
    "affleck",
    "confidence",
    "60",
    "pretty",
    "good",
    "60",
    "good",
    "given",
    "fact",
    "train",
    "recognizer",
    "100",
    "images",
    "let",
    "try",
    "another",
    "image",
    "ben",
    "affleck",
    "maybe",
    "image",
    "copy",
    "go",
    "right",
    "across",
    "ben",
    "affleck",
    "confidence",
    "94",
    "pretty",
    "good",
    "let",
    "go",
    "back",
    "let",
    "go",
    "maybe",
    "odd",
    "person",
    "let",
    "go",
    "madonna",
    "grab",
    "pain",
    "rally",
    "let",
    "change",
    "madonna",
    "let",
    "grab",
    "person",
    "sure",
    "whether",
    "detect",
    "face",
    "head",
    "let",
    "face",
    "anyway",
    "find",
    "obon",
    "tv",
    "face",
    "recognizer",
    "built",
    "face",
    "recognizer",
    "best",
    "currently",
    "detects",
    "currently",
    "detects",
    "person",
    "image",
    "actually",
    "jerry",
    "seinfield",
    "confidence",
    "110",
    "maybe",
    "error",
    "somewhere",
    "sure",
    "went",
    "pretty",
    "sure",
    "error",
    "somewhere",
    "essentially",
    "discrepancies",
    "lie",
    "best",
    "going",
    "give",
    "accurate",
    "results",
    "let",
    "try",
    "another",
    "image",
    "let",
    "go",
    "maybe",
    "share",
    "image",
    "copy",
    "piece",
    "paper",
    "okay",
    "madonna",
    "confidence",
    "okay",
    "let",
    "move",
    "elton",
    "john",
    "watson",
    "problems",
    "elton",
    "john",
    "given",
    "fact",
    "looked",
    "pretty",
    "similar",
    "ben",
    "affleck",
    "reason",
    "copy",
    "chain",
    "got",
    "elton",
    "john",
    "called",
    "john",
    "print",
    "okay",
    "elton",
    "john",
    "confidence",
    "67",
    "pretty",
    "good",
    "okay",
    "bad",
    "accurate",
    "predicted",
    "filming",
    "video",
    "couple",
    "trial",
    "runs",
    "got",
    "good",
    "results",
    "example",
    "elton",
    "john",
    "continually",
    "detected",
    "jerry",
    "seinfield",
    "ben",
    "affleck",
    "madonna",
    "detected",
    "ben",
    "affleck",
    "ben",
    "affleck",
    "detected",
    "mindy",
    "kaylin",
    "minnie",
    "kailyn",
    "detected",
    "elton",
    "john",
    "whole",
    "bunch",
    "weird",
    "results",
    "guess",
    "something",
    "right",
    "must",
    "done",
    "something",
    "wrong",
    "trial",
    "runs",
    "hey",
    "get",
    "good",
    "results",
    "pretty",
    "good",
    "sure",
    "gave",
    "confidence",
    "111",
    "maybe",
    "error",
    "somewhere",
    "training",
    "sent",
    "guess",
    "part",
    "ignore",
    "given",
    "fact",
    "get",
    "pretty",
    "good",
    "results",
    "pretty",
    "much",
    "video",
    "discussed",
    "face",
    "recognition",
    "open",
    "cv",
    "essentially",
    "build",
    "features",
    "list",
    "labels",
    "list",
    "train",
    "recognizer",
    "two",
    "lists",
    "saved",
    "model",
    "yaml",
    "source",
    "file",
    "another",
    "file",
    "essentially",
    "read",
    "saved",
    "model",
    "saved",
    "yaml",
    "source",
    "file",
    "essentially",
    "make",
    "predictions",
    "image",
    "next",
    "video",
    "actually",
    "last",
    "video",
    "course",
    "discuss",
    "build",
    "deep",
    "learning",
    "model",
    "detect",
    "classify",
    "10",
    "simson",
    "characters",
    "questions",
    "comments",
    "concerns",
    "whatever",
    "leave",
    "comments",
    "otherwise",
    "see",
    "next",
    "video",
    "hey",
    "everyone",
    "welcome",
    "last",
    "video",
    "python",
    "urban",
    "tv",
    "cuts",
    "previously",
    "seen",
    "detect",
    "recognize",
    "faces",
    "pioli",
    "open",
    "cv",
    "results",
    "got",
    "varied",
    "couple",
    "reasons",
    "one",
    "fact",
    "100",
    "images",
    "train",
    "recognizer",
    "significantly",
    "small",
    "number",
    "especially",
    "training",
    "recognizes",
    "building",
    "models",
    "ideally",
    "want",
    "least",
    "couple",
    "1000",
    "images",
    "per",
    "class",
    "second",
    "reason",
    "lies",
    "fact",
    "want",
    "using",
    "deep",
    "learning",
    "model",
    "go",
    "deeper",
    "especially",
    "computer",
    "vision",
    "see",
    "things",
    "actually",
    "beat",
    "deep",
    "learning",
    "model",
    "going",
    "video",
    "building",
    "deep",
    "computer",
    "vision",
    "model",
    "classify",
    "sensing",
    "characters",
    "generate",
    "open",
    "cv",
    "gs",
    "pre",
    "processing",
    "data",
    "performing",
    "sort",
    "image",
    "normalization",
    "mean",
    "subtraction",
    "things",
    "like",
    "video",
    "going",
    "building",
    "simple",
    "model",
    "going",
    "using",
    "techniques",
    "fact",
    "using",
    "open",
    "cv",
    "library",
    "read",
    "image",
    "resize",
    "particular",
    "size",
    "feeding",
    "network",
    "worry",
    "never",
    "used",
    "built",
    "deep",
    "learning",
    "model",
    "video",
    "using",
    "tensor",
    "flows",
    "implementation",
    "kara",
    "want",
    "keep",
    "video",
    "real",
    "simple",
    "idea",
    "really",
    "goes",
    "advanced",
    "computer",
    "vision",
    "projects",
    "carers",
    "actually",
    "comes",
    "lot",
    "boilerplate",
    "code",
    "never",
    "built",
    "deep",
    "learning",
    "model",
    "worry",
    "cara",
    "handle",
    "kind",
    "one",
    "prerequisites",
    "building",
    "deep",
    "learning",
    "model",
    "actually",
    "gpu",
    "gpu",
    "basically",
    "graphical",
    "processing",
    "unit",
    "help",
    "speed",
    "training",
    "process",
    "network",
    "one",
    "worry",
    "using",
    "candle",
    "platform",
    "actually",
    "offers",
    "free",
    "gpus",
    "us",
    "use",
    "real",
    "simple",
    "get",
    "started",
    "need",
    "couple",
    "packages",
    "installed",
    "already",
    "installed",
    "sierra",
    "beginning",
    "course",
    "go",
    "ahead",
    "pip",
    "install",
    "sierra",
    "next",
    "package",
    "require",
    "conero",
    "package",
    "built",
    "specifically",
    "deep",
    "learning",
    "models",
    "built",
    "kerris",
    "actually",
    "appear",
    "surprisingly",
    "useful",
    "planning",
    "go",
    "deeper",
    "building",
    "deep",
    "computer",
    "vision",
    "models",
    "installing",
    "package",
    "system",
    "make",
    "sense",
    "already",
    "gpu",
    "machine",
    "basically",
    "skip",
    "part",
    "pip",
    "install",
    "conero",
    "actually",
    "installs",
    "tensorflow",
    "default",
    "keep",
    "mind",
    "installations",
    "way",
    "let",
    "actually",
    "move",
    "data",
    "going",
    "using",
    "data",
    "set",
    "going",
    "using",
    "simpsons",
    "character",
    "data",
    "set",
    "available",
    "kaggle",
    "actual",
    "data",
    "interested",
    "lies",
    "instance",
    "score",
    "data",
    "set",
    "folder",
    "basically",
    "consists",
    "number",
    "folders",
    "several",
    "images",
    "inside",
    "subfolder",
    "maggie",
    "simpson",
    "12",
    "128",
    "images",
    "homer",
    "simpson",
    "2200",
    "images",
    "abraham",
    "913",
    "images",
    "essentially",
    "going",
    "going",
    "use",
    "images",
    "feed",
    "model",
    "essentially",
    "classify",
    "characters",
    "first",
    "thing",
    "want",
    "go",
    "slash",
    "notebooks",
    "go",
    "ahead",
    "create",
    "new",
    "notebook",
    "advanced",
    "settings",
    "make",
    "sure",
    "gpu",
    "selected",
    "since",
    "going",
    "using",
    "gpu",
    "click",
    "create",
    "get",
    "notebook",
    "going",
    "rename",
    "simpsons",
    "one",
    "thing",
    "want",
    "enable",
    "internet",
    "since",
    "going",
    "installing",
    "couple",
    "packages",
    "internet",
    "use",
    "simpsons",
    "character",
    "data",
    "set",
    "notebook",
    "need",
    "go",
    "head",
    "add",
    "data",
    "search",
    "simpsons",
    "first",
    "one",
    "alec",
    "city",
    "pop",
    "go",
    "ahead",
    "click",
    "add",
    "use",
    "data",
    "set",
    "inside",
    "notebook",
    "first",
    "thing",
    "want",
    "going",
    "pip",
    "install",
    "seer",
    "reason",
    "yet",
    "reason",
    "candle",
    "come",
    "pre",
    "installed",
    "sierra",
    "conero",
    "tell",
    "install",
    "machine",
    "reason",
    "work",
    "experiment",
    "done",
    "go",
    "ahead",
    "new",
    "cell",
    "let",
    "import",
    "packages",
    "going",
    "need",
    "going",
    "input",
    "going",
    "input",
    "seer",
    "going",
    "input",
    "conero",
    "going",
    "import",
    "numpy",
    "np",
    "going",
    "input",
    "cv",
    "add",
    "cv",
    "going",
    "input",
    "gc",
    "garbage",
    "collection",
    "next",
    "want",
    "basically",
    "building",
    "deep",
    "computer",
    "vision",
    "models",
    "model",
    "expects",
    "data",
    "image",
    "data",
    "size",
    "since",
    "working",
    "image",
    "data",
    "size",
    "image",
    "size",
    "data",
    "images",
    "data",
    "set",
    "actually",
    "resized",
    "particular",
    "science",
    "actually",
    "feed",
    "network",
    "lot",
    "experiments",
    "found",
    "image",
    "size",
    "80",
    "80",
    "works",
    "well",
    "especially",
    "simpsons",
    "data",
    "set",
    "okay",
    "next",
    "variable",
    "need",
    "channels",
    "many",
    "channels",
    "want",
    "image",
    "since",
    "require",
    "color",
    "image",
    "going",
    "set",
    "one",
    "basically",
    "grayscale",
    "run",
    "back",
    "need",
    "next",
    "gon",
    "na",
    "say",
    "car",
    "scope",
    "path",
    "equal",
    "base",
    "path",
    "data",
    "actual",
    "data",
    "lines",
    "simpsons",
    "school",
    "dataset",
    "base",
    "folder",
    "images",
    "stored",
    "going",
    "copy",
    "file",
    "path",
    "going",
    "paste",
    "cool",
    "essentially",
    "going",
    "essentially",
    "going",
    "grab",
    "top",
    "10",
    "characters",
    "number",
    "images",
    "class",
    "way",
    "going",
    "going",
    "go",
    "every",
    "folder",
    "inside",
    "simpsons",
    "underscore",
    "data",
    "set",
    "get",
    "number",
    "images",
    "stored",
    "data",
    "set",
    "store",
    "information",
    "inside",
    "dictionary",
    "dictionary",
    "descending",
    "order",
    "grab",
    "first",
    "10",
    "elements",
    "first",
    "n",
    "elements",
    "dictionary",
    "hope",
    "made",
    "sense",
    "going",
    "going",
    "say",
    "create",
    "empty",
    "dictionary",
    "going",
    "say",
    "character",
    "stop",
    "list",
    "der",
    "called",
    "car",
    "path",
    "going",
    "say",
    "car",
    "underscore",
    "dict",
    "car",
    "equal",
    "length",
    "dot",
    "list",
    "dir",
    "oh",
    "dot",
    "path",
    "dot",
    "join",
    "going",
    "join",
    "car",
    "scope",
    "pump",
    "car",
    "essentially",
    "going",
    "every",
    "folder",
    "grabbing",
    "name",
    "folder",
    "getting",
    "number",
    "images",
    "folder",
    "storing",
    "information",
    "inside",
    "dictionary",
    "called",
    "car",
    "underscore",
    "dict",
    "done",
    "actually",
    "sort",
    "dictionary",
    "descending",
    "order",
    "sending",
    "order",
    "way",
    "car",
    "unscored",
    "dict",
    "equal",
    "car",
    "dot",
    "sot",
    "unscored",
    "dict",
    "car",
    "underscore",
    "dict",
    "said",
    "descending",
    "equals",
    "true",
    "finally",
    "print",
    "dictionary",
    "get",
    "dictionary",
    "see",
    "homer",
    "simpson",
    "number",
    "images",
    "close",
    "go",
    "way",
    "lionel",
    "three",
    "images",
    "data",
    "going",
    "dictionary",
    "going",
    "going",
    "grab",
    "names",
    "first",
    "10",
    "elements",
    "dictionary",
    "store",
    "list",
    "characters",
    "list",
    "gon",
    "na",
    "say",
    "characters",
    "gon",
    "na",
    "say",
    "characters",
    "equal",
    "equal",
    "empty",
    "list",
    "going",
    "say",
    "car",
    "underscore",
    "dict",
    "going",
    "say",
    "characters",
    "dot",
    "append",
    "going",
    "append",
    "name",
    "say",
    "zero",
    "say",
    "count",
    "greater",
    "equal",
    "10",
    "break",
    "need",
    "specify",
    "count",
    "zero",
    "increment",
    "counts",
    "okay",
    "done",
    "let",
    "print",
    "characters",
    "looks",
    "like",
    "essentially",
    "grabbed",
    "names",
    "characters",
    "done",
    "actually",
    "go",
    "ahead",
    "create",
    "training",
    "data",
    "create",
    "training",
    "data",
    "simple",
    "saying",
    "train",
    "equal",
    "seer",
    "dot",
    "pre",
    "process",
    "pass",
    "car",
    "scope",
    "puff",
    "characters",
    "number",
    "channels",
    "image",
    "size",
    "image",
    "size",
    "say",
    "shuffle",
    "equals",
    "true",
    "essentially",
    "go",
    "every",
    "folder",
    "inside",
    "car",
    "scope",
    "path",
    "simpsons",
    "underscore",
    "data",
    "set",
    "look",
    "every",
    "element",
    "inside",
    "characters",
    "essentially",
    "going",
    "look",
    "homer",
    "simpson",
    "inside",
    "simpsons",
    "underscore",
    "data",
    "set",
    "find",
    "homer",
    "simpson",
    "whereas",
    "homer",
    "simpson",
    "even",
    "finds",
    "homer",
    "simpson",
    "going",
    "go",
    "inside",
    "folder",
    "grab",
    "images",
    "inside",
    "folder",
    "essentially",
    "add",
    "training",
    "set",
    "may",
    "recall",
    "previous",
    "video",
    "training",
    "set",
    "essentially",
    "list",
    "element",
    "list",
    "another",
    "list",
    "imagery",
    "corresponding",
    "label",
    "label",
    "basically",
    "index",
    "particular",
    "string",
    "characters",
    "list",
    "essentially",
    "type",
    "mapping",
    "going",
    "use",
    "homer",
    "simpson",
    "going",
    "label",
    "zero",
    "ned",
    "label",
    "one",
    "liza",
    "label",
    "three",
    "done",
    "go",
    "ahead",
    "run",
    "basically",
    "basically",
    "progress",
    "displayed",
    "terminal",
    "want",
    "anything",
    "outputted",
    "terminal",
    "basically",
    "set",
    "set",
    "verbosity",
    "zero",
    "going",
    "leave",
    "things",
    "since",
    "lot",
    "images",
    "inside",
    "data",
    "set",
    "may",
    "take",
    "depending",
    "powerful",
    "machine",
    "took",
    "minute",
    "pre",
    "process",
    "data",
    "essentially",
    "let",
    "try",
    "let",
    "essentially",
    "try",
    "see",
    "many",
    "images",
    "training",
    "set",
    "saying",
    "length",
    "trip",
    "images",
    "inside",
    "training",
    "set",
    "let",
    "actually",
    "try",
    "visualize",
    "images",
    "present",
    "dataset",
    "going",
    "import",
    "plot",
    "plt",
    "going",
    "plt",
    "dot",
    "bigger",
    "going",
    "give",
    "going",
    "give",
    "big",
    "size",
    "30",
    "let",
    "show",
    "pass",
    "first",
    "first",
    "element",
    "training",
    "sets",
    "zero",
    "zero",
    "give",
    "color",
    "map",
    "gray",
    "display",
    "image",
    "reason",
    "using",
    "open",
    "cv",
    "display",
    "image",
    "reason",
    "open",
    "cv",
    "display",
    "properly",
    "jupyter",
    "notebook",
    "using",
    "matplotlib",
    "basically",
    "image",
    "get",
    "somebody",
    "legible",
    "machine",
    "valid",
    "image",
    "okay",
    "next",
    "thing",
    "want",
    "want",
    "separate",
    "training",
    "set",
    "features",
    "labels",
    "right",
    "train",
    "basically",
    "list",
    "lists",
    "inside",
    "inside",
    "sub",
    "lists",
    "two",
    "elements",
    "actual",
    "array",
    "labels",
    "going",
    "separate",
    "feature",
    "set",
    "arrays",
    "labels",
    "separate",
    "lists",
    "way",
    "saying",
    "feature",
    "set",
    "labels",
    "equal",
    "car",
    "dot",
    "zip",
    "school",
    "train",
    "going",
    "separate",
    "training",
    "set",
    "give",
    "image",
    "size",
    "image",
    "size",
    "n",
    "equals",
    "two",
    "basically",
    "going",
    "going",
    "separate",
    "training",
    "set",
    "feature",
    "set",
    "labels",
    "also",
    "reshape",
    "feature",
    "set",
    "four",
    "dimensional",
    "tensor",
    "fed",
    "model",
    "restrictions",
    "whatsoever",
    "go",
    "ahead",
    "run",
    "done",
    "let",
    "actually",
    "try",
    "normalize",
    "feature",
    "sets",
    "essentially",
    "going",
    "normalize",
    "data",
    "range",
    "range",
    "zero",
    "comma",
    "one",
    "reason",
    "normalize",
    "data",
    "network",
    "able",
    "learn",
    "features",
    "much",
    "faster",
    "know",
    "normalizing",
    "data",
    "gon",
    "na",
    "say",
    "feature",
    "set",
    "equal",
    "square",
    "dot",
    "normalize",
    "pass",
    "peaches",
    "set",
    "normalize",
    "labels",
    "need",
    "one",
    "hot",
    "encode",
    "convert",
    "numerical",
    "integers",
    "binary",
    "class",
    "vectors",
    "way",
    "saying",
    "tensorflow",
    "del",
    "kara",
    "dot",
    "edu",
    "tools",
    "input",
    "underscore",
    "categorical",
    "say",
    "labels",
    "equal",
    "two",
    "categorical",
    "get",
    "possible",
    "labels",
    "number",
    "categories",
    "basically",
    "length",
    "characters",
    "list",
    "cool",
    "done",
    "done",
    "actually",
    "move",
    "ahead",
    "try",
    "create",
    "training",
    "validation",
    "data",
    "worry",
    "much",
    "know",
    "basically",
    "model",
    "going",
    "train",
    "training",
    "data",
    "test",
    "validation",
    "data",
    "going",
    "say",
    "x",
    "underscore",
    "train",
    "x",
    "underscore",
    "val",
    "underscore",
    "train",
    "underscore",
    "val",
    "equal",
    "sere",
    "dog",
    "train",
    "val",
    "split",
    "going",
    "split",
    "feature",
    "set",
    "labels",
    "using",
    "particular",
    "validation",
    "ratio",
    "going",
    "set",
    "point",
    "two",
    "basically",
    "splitting",
    "feature",
    "set",
    "labels",
    "training",
    "sets",
    "validation",
    "sets",
    "using",
    "particular",
    "validation",
    "ratio",
    "20",
    "data",
    "go",
    "validation",
    "set",
    "80",
    "go",
    "training",
    "set",
    "okay",
    "save",
    "memory",
    "actually",
    "remove",
    "delete",
    "variables",
    "going",
    "using",
    "saying",
    "dell",
    "crane",
    "dale",
    "feature",
    "sets",
    "labels",
    "collect",
    "saying",
    "gc",
    "dot",
    "collect",
    "cool",
    "moving",
    "need",
    "create",
    "image",
    "data",
    "generator",
    "basically",
    "image",
    "generator",
    "essentially",
    "synthesize",
    "new",
    "images",
    "already",
    "existing",
    "images",
    "help",
    "introduce",
    "randomness",
    "network",
    "make",
    "perform",
    "better",
    "gon",
    "na",
    "say",
    "data",
    "gen",
    "equal",
    "narrow",
    "generators",
    "dot",
    "image",
    "data",
    "generator",
    "basically",
    "instantiates",
    "simple",
    "image",
    "generator",
    "caros",
    "using",
    "kara",
    "library",
    "done",
    "let",
    "create",
    "training",
    "generator",
    "setting",
    "equal",
    "data",
    "jim",
    "float",
    "pass",
    "extra",
    "rain",
    "wind",
    "rain",
    "give",
    "batch",
    "size",
    "equal",
    "batch",
    "size",
    "let",
    "actually",
    "create",
    "variables",
    "set",
    "batch",
    "size",
    "maybe",
    "let",
    "train",
    "network",
    "20",
    "bucks",
    "done",
    "wrong",
    "bet",
    "done",
    "actually",
    "proceed",
    "building",
    "model",
    "let",
    "call",
    "creating",
    "model",
    "making",
    "video",
    "actually",
    "tried",
    "tested",
    "couple",
    "models",
    "found",
    "one",
    "actually",
    "provided",
    "highest",
    "level",
    "accuracy",
    "model",
    "model",
    "architecture",
    "going",
    "using",
    "gon",
    "na",
    "say",
    "model",
    "equal",
    "conero",
    "dot",
    "models",
    "dot",
    "create",
    "simpsons",
    "model",
    "going",
    "pass",
    "image",
    "size",
    "equal",
    "image",
    "size",
    "going",
    "say",
    "set",
    "number",
    "channels",
    "equal",
    "number",
    "channels",
    "going",
    "say",
    "going",
    "set",
    "output",
    "dimensions",
    "10",
    "basically",
    "length",
    "characters",
    "specify",
    "loss",
    "equal",
    "binary",
    "binary",
    "cross",
    "entropy",
    "get",
    "set",
    "decay",
    "e",
    "e",
    "negative",
    "sixth",
    "power",
    "set",
    "learning",
    "rate",
    "equal",
    "point",
    "set",
    "oh",
    "momentum",
    "point",
    "nine",
    "set",
    "nesterov",
    "true",
    "essentially",
    "create",
    "model",
    "using",
    "architecture",
    "built",
    "actually",
    "compile",
    "model",
    "use",
    "go",
    "ahead",
    "run",
    "go",
    "ahead",
    "try",
    "print",
    "summary",
    "model",
    "essentially",
    "functional",
    "model",
    "since",
    "using",
    "kerris",
    "functional",
    "api",
    "essentially",
    "bunch",
    "layers",
    "17",
    "million",
    "parameters",
    "drain",
    "another",
    "thing",
    "want",
    "create",
    "something",
    "called",
    "callbacks",
    "list",
    "callbacks",
    "list",
    "contain",
    "something",
    "called",
    "learning",
    "rate",
    "shedule",
    "essentially",
    "sheduled",
    "learning",
    "rate",
    "specific",
    "intervals",
    "network",
    "essentially",
    "train",
    "better",
    "going",
    "say",
    "call",
    "callbacks",
    "list",
    "equal",
    "learning",
    "rate",
    "shedule",
    "going",
    "pass",
    "sco",
    "lr",
    "underscore",
    "schedule",
    "since",
    "using",
    "learning",
    "shedule",
    "let",
    "go",
    "input",
    "tensorflow",
    "delve",
    "cara",
    "callbacks",
    "input",
    "learning",
    "rate",
    "schedule",
    "let",
    "actually",
    "go",
    "ahead",
    "train",
    "model",
    "gon",
    "na",
    "say",
    "training",
    "equal",
    "model",
    "dot",
    "fit",
    "gon",
    "na",
    "pass",
    "train",
    "gin",
    "going",
    "say",
    "steps",
    "per",
    "epoch",
    "equal",
    "length",
    "x",
    "school",
    "train",
    "divided",
    "divided",
    "batch",
    "size",
    "going",
    "say",
    "epochs",
    "equal",
    "epochs",
    "going",
    "give",
    "validation",
    "data",
    "validation",
    "data",
    "equal",
    "tuple",
    "x",
    "underscore",
    "val",
    "underscore",
    "val",
    "going",
    "say",
    "validation",
    "steps",
    "easy",
    "steps",
    "equal",
    "length",
    "school",
    "val",
    "divided",
    "divided",
    "batch",
    "batch",
    "size",
    "finally",
    "say",
    "callbacks",
    "equal",
    "callbacks",
    "callbacks",
    "school",
    "missed",
    "steps",
    "per",
    "epoch",
    "steps",
    "epoch",
    "begin",
    "training",
    "done",
    "end",
    "baseline",
    "accuracy",
    "close",
    "70",
    "comes",
    "exciting",
    "part",
    "going",
    "use",
    "open",
    "cv",
    "test",
    "good",
    "model",
    "going",
    "going",
    "use",
    "open",
    "cv",
    "read",
    "image",
    "particular",
    "file",
    "path",
    "going",
    "pass",
    "network",
    "see",
    "model",
    "spits",
    "let",
    "go",
    "ahead",
    "go",
    "simpson",
    "test",
    "set",
    "let",
    "go",
    "ahead",
    "try",
    "search",
    "way",
    "let",
    "look",
    "characters",
    "let",
    "print",
    "see",
    "characters",
    "trained",
    "okay",
    "let",
    "look",
    "bart",
    "simpson",
    "probably",
    "bit",
    "irritating",
    "since",
    "data",
    "sent",
    "okay",
    "got",
    "image",
    "bart",
    "simpson",
    "click",
    "random",
    "path",
    "got",
    "test",
    "path",
    "set",
    "equal",
    "string",
    "gon",
    "na",
    "gon",
    "na",
    "say",
    "mg",
    "equal",
    "cv",
    "dot",
    "read",
    "test",
    "secure",
    "path",
    "display",
    "image",
    "use",
    "plt",
    "dot",
    "show",
    "pass",
    "image",
    "pass",
    "image",
    "give",
    "column",
    "map",
    "gray",
    "plt",
    "dot",
    "show",
    "okay",
    "plt",
    "show",
    "okay",
    "image",
    "bart",
    "simpson",
    "going",
    "going",
    "create",
    "function",
    "called",
    "prepare",
    "basically",
    "prepare",
    "image",
    "size",
    "shapes",
    "dimensions",
    "images",
    "use",
    "prepare",
    "model",
    "take",
    "new",
    "image",
    "convert",
    "image",
    "grayscale",
    "gon",
    "na",
    "say",
    "injury",
    "equal",
    "cv",
    "dot",
    "cvt",
    "color",
    "gon",
    "na",
    "pass",
    "injury",
    "gon",
    "na",
    "say",
    "cv",
    "dot",
    "color",
    "scrub",
    "bgr",
    "gray",
    "resize",
    "image",
    "size",
    "going",
    "say",
    "mg",
    "equal",
    "cv",
    "dot",
    "resize",
    "going",
    "resize",
    "image",
    "image",
    "underscore",
    "size",
    "going",
    "reshape",
    "image",
    "injury",
    "equal",
    "stare",
    "dot",
    "reshape",
    "reshape",
    "image",
    "want",
    "reshape",
    "image",
    "image",
    "size",
    "channels",
    "equal",
    "one",
    "return",
    "image",
    "let",
    "run",
    "let",
    "go",
    "let",
    "say",
    "predictions",
    "equal",
    "model",
    "dot",
    "predict",
    "prepare",
    "image",
    "visualize",
    "predictions",
    "let",
    "print",
    "predictions",
    "essentially",
    "get",
    "print",
    "actual",
    "class",
    "print",
    "characters",
    "bb",
    "np",
    "dot",
    "arg",
    "max",
    "say",
    "predictions",
    "zero",
    "trying",
    "visualize",
    "image",
    "plt",
    "dot",
    "show",
    "let",
    "pass",
    "image",
    "plt",
    "dot",
    "show",
    "let",
    "grab",
    "move",
    "ver",
    "right",
    "yeah",
    "okay",
    "image",
    "right",
    "model",
    "thinks",
    "buttons",
    "fact",
    "lisa",
    "simpson",
    "let",
    "go",
    "lisa",
    "simpson",
    "okay",
    "let",
    "try",
    "another",
    "image",
    "let",
    "try",
    "probably",
    "image",
    "bart",
    "simpson",
    "let",
    "go",
    "maybe",
    "change",
    "two",
    "eight",
    "run",
    "bart",
    "simpson",
    "let",
    "run",
    "let",
    "got",
    "lisa",
    "simpson",
    "let",
    "try",
    "different",
    "image",
    "yeah",
    "charles",
    "montgomery",
    "copy",
    "way",
    "got",
    "charles",
    "predict",
    "get",
    "van",
    "hughton",
    "okay",
    "definitely",
    "best",
    "model",
    "could",
    "asked",
    "hey",
    "model",
    "right",
    "base",
    "discounting",
    "baseline",
    "accuracy",
    "70",
    "although",
    "would",
    "liked",
    "go",
    "least",
    "85",
    "test",
    "gone",
    "close",
    "90",
    "92",
    "sure",
    "exactly",
    "went",
    "70",
    "expected",
    "building",
    "deep",
    "computer",
    "vision",
    "models",
    "bit",
    "art",
    "takes",
    "time",
    "figure",
    "best",
    "model",
    "project",
    "python",
    "open",
    "c",
    "goes",
    "basically",
    "kind",
    "general",
    "introduction",
    "open",
    "cv",
    "course",
    "scraped",
    "surface",
    "really",
    "whole",
    "new",
    "world",
    "computer",
    "vision",
    "fair",
    "obviously",
    "ca",
    "cover",
    "every",
    "single",
    "thing",
    "open",
    "cv",
    "tried",
    "best",
    "teach",
    "relevant",
    "today",
    "computer",
    "vision",
    "really",
    "one",
    "interesting",
    "parts",
    "building",
    "deep",
    "learning",
    "models",
    "fact",
    "future",
    "self",
    "driving",
    "vehicles",
    "medical",
    "diagnosis",
    "tons",
    "things",
    "computer",
    "vision",
    "changing",
    "world",
    "code",
    "material",
    "discussed",
    "throughout",
    "course",
    "available",
    "github",
    "page",
    "link",
    "page",
    "description",
    "close",
    "want",
    "mention",
    "although",
    "recommend",
    "installed",
    "sierra",
    "beginning",
    "barely",
    "use",
    "throughout",
    "coasts",
    "probably",
    "going",
    "make",
    "sense",
    "right",
    "plan",
    "go",
    "deeper",
    "computer",
    "vision",
    "building",
    "computer",
    "vision",
    "models",
    "sierra",
    "lasher",
    "proved",
    "powerful",
    "package",
    "lot",
    "helper",
    "functions",
    "anything",
    "constantly",
    "updating",
    "repository",
    "want",
    "contribute",
    "efforts",
    "definitely",
    "set",
    "pull",
    "request",
    "changes",
    "helpful",
    "merged",
    "official",
    "code",
    "base",
    "added",
    "contributor",
    "want",
    "building",
    "deep",
    "learning",
    "models",
    "kara",
    "conero",
    "useful",
    "part",
    "usually",
    "software",
    "using",
    "anyway",
    "said",
    "think",
    "close",
    "course",
    "goes",
    "helped",
    "way",
    "god",
    "interested",
    "computer",
    "vision",
    "definitely",
    "like",
    "video",
    "subscribe",
    "channel",
    "putting",
    "useful",
    "videos",
    "python",
    "computer",
    "vision",
    "deep",
    "learning",
    "guess",
    "hope",
    "enjoyed",
    "post",
    "see",
    "another",
    "video"
  ],
  "keywords": [
    "everyone",
    "welcome",
    "python",
    "open",
    "cv",
    "course",
    "talking",
    "need",
    "know",
    "get",
    "going",
    "start",
    "reading",
    "images",
    "video",
    "files",
    "image",
    "draw",
    "shapes",
    "put",
    "text",
    "move",
    "advanced",
    "parts",
    "color",
    "bitwise",
    "masking",
    "histograms",
    "edge",
    "detection",
    "thresholding",
    "finally",
    "things",
    "face",
    "recognition",
    "detect",
    "find",
    "faces",
    "recognize",
    "using",
    "last",
    "building",
    "deep",
    "computer",
    "vision",
    "model",
    "characters",
    "simpsons",
    "discussed",
    "channel",
    "see",
    "hey",
    "next",
    "couple",
    "videos",
    "really",
    "learning",
    "already",
    "good",
    "way",
    "dash",
    "version",
    "make",
    "sure",
    "whatever",
    "work",
    "two",
    "go",
    "ahead",
    "done",
    "first",
    "one",
    "install",
    "people",
    "well",
    "basically",
    "package",
    "something",
    "also",
    "numpy",
    "kind",
    "computing",
    "matrix",
    "array",
    "like",
    "worry",
    "simple",
    "built",
    "set",
    "part",
    "fact",
    "use",
    "process",
    "interested",
    "want",
    "leave",
    "okay",
    "read",
    "guys",
    "back",
    "another",
    "folder",
    "end",
    "actually",
    "let",
    "new",
    "file",
    "call",
    "dot",
    "p",
    "thing",
    "input",
    "method",
    "takes",
    "path",
    "returns",
    "pixels",
    "trying",
    "cat",
    "say",
    "capture",
    "variable",
    "called",
    "img",
    "since",
    "inside",
    "display",
    "show",
    "window",
    "pass",
    "case",
    "actual",
    "add",
    "line",
    "zero",
    "function",
    "specific",
    "much",
    "save",
    "run",
    "saying",
    "cool",
    "size",
    "try",
    "gon",
    "na",
    "school",
    "goes",
    "reason",
    "dimensions",
    "far",
    "talk",
    "resizing",
    "frames",
    "setting",
    "equal",
    "either",
    "would",
    "three",
    "camera",
    "cases",
    "could",
    "example",
    "second",
    "different",
    "loop",
    "frame",
    "true",
    "whether",
    "instance",
    "grab",
    "error",
    "negative",
    "mean",
    "particular",
    "uncomment",
    "specify",
    "oh",
    "pretty",
    "talked",
    "class",
    "rescale",
    "resize",
    "lot",
    "height",
    "width",
    "change",
    "value",
    "original",
    "higher",
    "create",
    "resized",
    "scale",
    "default",
    "point",
    "seven",
    "five",
    "shape",
    "copy",
    "convert",
    "values",
    "converting",
    "comma",
    "return",
    "code",
    "us",
    "passing",
    "scope",
    "close",
    "maybe",
    "even",
    "apply",
    "think",
    "person",
    "blank",
    "np",
    "give",
    "data",
    "type",
    "eight",
    "looks",
    "instead",
    "255",
    "green",
    "number",
    "channels",
    "keep",
    "red",
    "got",
    "rectangle",
    "thickness",
    "across",
    "250",
    "play",
    "around",
    "result",
    "divided",
    "circle",
    "center",
    "bgr",
    "points",
    "white",
    "100",
    "discuss",
    "right",
    "font",
    "x",
    "bit",
    "lines",
    "basic",
    "grayscale",
    "blue",
    "essentially",
    "intensity",
    "distribution",
    "gray",
    "great",
    "blur",
    "blurring",
    "noise",
    "many",
    "gaussian",
    "blurred",
    "take",
    "kernel",
    "tuple",
    "compute",
    "real",
    "increase",
    "previous",
    "cascade",
    "edges",
    "cascades",
    "canny",
    "kenny",
    "threshold",
    "found",
    "features",
    "less",
    "element",
    "definitely",
    "given",
    "compare",
    "look",
    "probably",
    "inter",
    "underscore",
    "basis",
    "pixel",
    "region",
    "translation",
    "rotation",
    "questions",
    "comments",
    "otherwise",
    "section",
    "axis",
    "left",
    "list",
    "import",
    "angle",
    "rotate",
    "10",
    "rotated",
    "45",
    "degrees",
    "black",
    "better",
    "high",
    "flip",
    "together",
    "contours",
    "cvt",
    "chain",
    "sense",
    "length",
    "print",
    "thresh",
    "binary",
    "visualize",
    "thresholded",
    "index",
    "join",
    "space",
    "colors",
    "rgb",
    "hsv",
    "lamb",
    "format",
    "intensities",
    "inverse",
    "plot",
    "plt",
    "matplotlib",
    "mistake",
    "feature",
    "hard",
    "split",
    "merge",
    "merged",
    "regions",
    "compared",
    "surrounding",
    "averaging",
    "average",
    "plus",
    "computed",
    "source",
    "sigma",
    "median",
    "bilateral",
    "xor",
    "intersecting",
    "mask",
    "masked",
    "weird",
    "histogram",
    "label",
    "peaking",
    "adaptive",
    "sets",
    "every",
    "gradients",
    "sobel",
    "recognizer",
    "har",
    "simpson",
    "trained",
    "xml",
    "detected",
    "rect",
    "minimum",
    "neighbors",
    "labels",
    "ben",
    "affleck",
    "train",
    "training",
    "elton",
    "john",
    "validation",
    "confidence",
    "models",
    "network",
    "car",
    "dictionary"
  ]
}