{
  "text": "[Music]\nwhat is blockchain and why so much of\nhype what if I say the next big thing in\nthe industry is blockchain as Internet\nhas affected all major industries in the\nsame thing blockchain will also be\naffecting it and that's for sure\nmaybe next two years or three or some in\nfive years the option will be there but\nwhat is blockchain and why it is so\nimportant so let's get started welcome\nback to aliens minus 720 and let's get\nstart with blockchain if you have heard\nabout bitcoins you might have heard\nabout blockchain as well so they work on\nBitcoin started in 2008 by a pseudo name\nit may be of one it may be one person or\nit may be a group of people and the\npseudonym is Satoshi Nakamoto so that\nperson or you can say see don't pseudo\nname has created bitcoins with\nblockchain so the technology behind bit\npoints is blockchain but what exactly\ndoctrine gives you now if you talk about\nbitcoins it is basically a digital\ncurrency right and it works on\npeer-to-peer network which is all you\ncan also call it as a distributed\nsystems so there's no central system\nexample when you wanted to ask for money\nnow you have a bank in between but in\nbitcoins you don't have any central bank\nright everything is distributed so when\nyou talk about distribute is one problem\nthe first problem is security and the\nsecond problem is trust how can you\ntrust this technology and how much\nsecurity now this one solution for\nsecurity we can use cryptography right\nso we can we can use a concept of\nasymmetric cryptography and we can\nachieve security but how what trust how\ndo you trust someone that you are\nsending data to or you're sending money\nto or how do you trust the data which is\navailable on the Internet because when\nyou say on the entire Internet if one\nperson is transferring the money to\nother person who is maintaining the\ndatabase that's a big issue right\nbecause it say if I transfer five\nbitcoins to you how can you sure that\nyou have five bitcoins\nI have and I don't have those five\nbitcoins which I have sent you who is\nmaintaining this system so that's where\nthis ledger comes into picture\nnow what is that later will it be a\nnormal database not thinking about it\nwhat if what we can do is we can have a\ncentral database oh that's a problem now\nbecause we are talking about distributed\nsystem right and in distributed why you\nneed something in central ok so that's\none problem so what if every node or\nwhat's node here so let's say if there\nare five people working with bitcoins or\nif you have five people in this network\nevery machine will be called as nodal so\ncan you maintain the ledger on every\nmachine we can do that but how can you\ntrust them because there's one problem\nif you have a ledger that anyone can\ntamper it with right now if you're\nconfusing it if you're getting confuse\nwith the ledger imagine a simple\ndatabase or you can imagine a simple\nfile excel file on any any file it's a\ntxt file because if you have a txt file\nanyone can change the data okay thing\nabout this let's say if you talk about\ngovernment okay so in let's say in\ngovernment we have got a production side\nand everyone want to stop corruptions\nand the one way to do that is look at\ntheir database so what do I did whatever\nthey have worked on everything will be\nstored in a database right so what if we\nas normal people can see the database we\ncan do that but they have the power to\nchange the debase right they can change\nthe history of the database okay so we\nwant something where it should not be\nchanged so we want a ledger which will\nbe available on every machine but no one\nshould be able to change it and that's\nwhere blockchain comes into picture\nso once you save data on blockchain and\nno one can change it and even if someone\nchanges it you will know that something\nhas changed but how\nso let's unless try to understand this\nconcept so what happens in blockchain is\nwe have the list of blocks okay so let's\ntalk about one block so if we talk about\nbitcoins in bitcoins we do a lot of\ntransactions all this transaction will\nbecome one block that's a Bitcoin why\ncan we use this thick this concept\nanywhere else yes we can we can also use\nthis data for your personal information\nwe can use this block for your over your\nFacebook data right we can store\nanything literally anything on this\nblock but for bitcoins we store\ntransactions right so for different\npurpose we can use this block we can use\nthis for bitcoins we can use this for\nhospitals we can use this for government\ninformation\nand that thing will be stored inside\nthis block okay now but now what I'm\nsaying is you cannot chase this block\nbut can be we can't change the block\nright because if you have a block anyone\ncan change it but that's not how Bitcoin\nworks oh won't be twice doers they use a\nconcept of hashing what is hashing now\nso hashing means we use different\nalgorithms to generate a simple hash key\nnow it can be any any algorithm we can\nuse we have md5 we have sha sha also we\nhave different different lengths sha so\nwhat we can do is we can use this\nalgorithm on a specific input let's say\nthe input is my name is 1120 so if this\nis the input you can perform the\noperation which will give you a key now\nthe awesome thing is it doesn't matter\nhow big your input is it it can be a\nsimple line as my name is my beam 20 or\nit can be entire Wikipedia database so\neven if you pick the entire we keep it a\ndatabase and if you apply the algorithm\nyou will can be a key length which is\ndepend upon what you use example if you\nare using sha-256 algorithm you will be\nthe same length key which is 256 bits so\neven if I apply a key on the mean Freddy\nyou will get the same length key but the\nkey will be different okay for every\ndata you will begin different keys and\nthat's the power of hashing because if\nyou perform at the hash on one input it\nwill give you the output which is\ndifferent from all different data so if\nyou have two different data you cannot\nhave you will not be having same hash\nsometimes we do have it and that's why\nwe say hash collision but then that's a\nvery rare kids so not only if you apply\nhashing on different data you will get\ndifferent keys but how that is useful\nthe important thing is if you have let's\nsay if I were text which is my name is\n720 and for that if I'm getting this key\nif I change a 1 1 later in my name for\nexample if I say my name is name in 20\nwhere I'm changing that I to double e\nnormally people do that for me which I\nwill be there the moment you make a\nsmall change then it will affect your\nkey as well so even if you change\nsomething in the data it will change the\nkey as well so you can imagine your key\nas your fingerprint right and your data\nis yourself so you are data and this is\nyour\nhashkee and advantages the moment you\nchange something from that body or\nsomething from data it will affect the\nhash as well so how do we know if\nsomeone has tempered your data just take\nthe key right because if key is\ndifferent of course there's a there's\nbeen some change in your data but how\nthat is useful in blockchain so what we\ndo is remember that block so we have a\nblock so what will you do is once you\ngot this block here you will apply hash\nso let's say for block ay we have a hash\nsomething hash there and then let's say\nyou have a next block now the next block\nwill have the data of course plus it\nwill also have a key of the previous\nblock or the hash of the previous block\nso let's say the block a and then we\nhave a key let's say K 1 then the second\nlog B will have K 1 which means if you\nfind a key or the hash of this block now\nit's a combination of the data and the\nand the previous key so now you will get\nK 2 so for a we got K 1 for B we got K 2\nand now let's say if you have third\nblock which is C you will have K 3\nremember linked list yeah so we have in\nlinnaeus what we do is one node so this\nsecond node knows about the previous\nnode of previous node next knows about\nthe next node right so that's how we\ncreate chain so what we have is we have\nnumber of blocks and all these blocks\nare connected with a chain and that's\nwhy we say this is called as this is\ncalled as basically a block chain\nbecause we have lot of blocks and\nthey're connected with the help with the\nhelp of hash value but you will see\nthat's that simple right but how can you\nmake sure that this these are trusts\ninvolve you and no one can change it now\nthink about this if you change data\nabout if you change let's say Block B\nthe thing is the moment you change one\nbit okay what if a small change in B it\nwill affect the key right and in in\nBlock C we have a key of B and now when\nyou compare the block of B and this\nblock and the key available in Block C\nis different that means someone has\ntampered with your data now you know\nthat someone has done some changes\nthat's why we say blockchain is safe now\nif you will you will be amazed to know\nthat till this point no one was able to\ncrack the blockchain database it's that\npowerful yeah\nthere has been some hacking on bitcoins\nbut that's not on drugs and that's the\nthe the ballot which you use so height\nwas done on the ballot not on the\nblockchain so it is secure it is safe\nand you can trust it now it is only for\nBitcoin on exactly you can use\nblockchain everywhere so in future for\ngovernment hospitals personal entity\nbitcoins everywhere you will be using\nblockchain and some banks and India all\nas well they have started using\nblockchain and most of the industries\nwhich have talked to they are doing POC\nwhich is proof of concept on blockchain\nif it is it is flexible for them to use\nblockchain they will be implementing it\nsoon so there are a lot of jobs\navailable into option for sure in future\nso if you want to learn something new\nnow start with dog chain so I hope\nyou've got some ideas about blockchain\nfrom this video\neveryone is talking about blockchain it\ndoesn't matter which industry you work\nfor all of them are trying to implement\nblockchain some of them are still doing\nPOC and some of them are actually\nimplementing it in fact last year when I\nwas talking to some of the companies\nthey were doing POC and now they're\nimplementing it look at the speed now\nand that's why everyone want to get into\nthis technology world now blockchain is\na cutting-edge technology which is\nchanging a lot of stuff light it is\nreplacing the old way of working and\nthen implementing a new way now there\nare three questions which we want to\nanswer in this video the first one is\nwhy blockchain why it is so famous in\nfact we already have a video on\nblockchain\nwhat is blockchain how it works if you\nhave not seen that video check the\ndescription area in this video we'll\ntalk about why is so famous second\nquestion we want to answer this who can\nget into blockchain technology because\nsome people feel they have to be into\nthe technical field to get into\nblockchain let's see how that works\nthe third question is what are the\nprerequisites\n[Music]\nwelcome back everyone my name is Ivan\nready and let's get started so the first\nquestion why blockchain now first of all\nthere are certain issues with the\ncurrent technology which you're working\nwith example let's say the Internet\nwhich we are using now it's amazing\ntechnology right it has changed the way\nbusiness work it has created different\ntypes of domains or businesses right\nthink about Google Facebook Amazon they\nare all running because of this feature\nof internet right now internet was meant\nto be open to everyone but now the\ninternet is actually controlled by few\ncompanies and we don't want that we\ndon't want to have central power because\nit is good as of now but what about the\nfuture the second issue is when you do\nonline transaction it's a bank\ntransaction so if you want to send money\nto someone we need a bank in between\nthat's not an issue with me that's fine\nso if I want to transfer me to someone\nelse and this bank says hey first you\nhave to link it from my side that's fine\nwith me but the amount of fees they are\ncharging for each transaction is\nsomething which are concerned about\nexample even if you do PayPal they\ncharge your own photos and per\ntransaction we don't want that right we\ndon't want a central server so that's\none issue right we have money issue the\nsecond one is the time so even if I do\ninternational transaction it does take\nsome days all ours right we don't want\nto wait for such time we want it to be\nfast right and that's why blockchain\nsays hey you can use our way of doing it\nwhich is decentralize applications you\ncan implement everything in a\ndecentralized way you don't want\nsomething in between you don't want a\ncentral server but then we have one\nissue here we could have implemented\ndigitization way before right because\nit's not a new term it's very old term\ninitially the column was even if you\nimplement everything in decentralized\nway can you trust someone as example\nlet's say if I want a class for mine to\nsomeone else and if I transfer to edge\nwhat if some day that guy says hey you\nhave not done that transaction how can\nit trust other parties and that's where\nblockchain also provides you trust okay\nbecause everything you do online will be\nsaved in one ledger now I can we'll talk\nabout that later in detail so everything\nwe will store in one ledger and that\nledger will be transparent so anyone can\nsee the transactions\nand that's where if you have a\ntransparency you can actually trust the\nsystem the next thing is the moment we\ntalk about that later no one can change\nit so the later which we create okay so\nlet's basically your database okay\nimagine a big database if you have a\nledger there and if you are storing lot\nof transactions we don't want it to be\nchanged right we want our transaction to\nbe saved in a same way for a longer time\nand it should not be changed so we want\nit to be immutable and blockchain does\nprovide that see how exactly all this\nthing works that we'll see later but\nthen it provides you a feature of\ndigitization it provides your feature of\ntrust and I provides your features of\nimmutability okay the next question\nwould be is it secured of course the\nentire blockchain system works on\ncryptography so yes the base itself is\nthe same right so you can trust\nblockchain that it is safe so these are\nthe reason why block sin is famous\nbecause it provides you all these\nfeatures and it is amazing okay so every\nindustry wanting different blockchain\njust because of these features the\nsecond question is who should get into\nblockchain do we need a technical\nbackground for that are not exactly\nsleep doctor is very new in the industry\nright so yes we need technical people\nwho can actually work on blockchain who\ncan build the blocks and applications we\nalso need people who will act as an\nadvisor now these people are more\ntowards business so they have a business\nmindset they understand business they\nunderstand how we can implement\nsomething for putting the application if\nyou understand how blocks in the works\nif you understand what are the use cases\nwe can work on on blockchain you can be\nan adviser so yes we have a blocking\ndeveloper who needs a technical skills\nwe also have a blockchain adviser when\nyou can pencil it companies and then we\nhave blocks and expert who are more\ntowards architect right who can actually\ndesign everything from start to end\nso yes we have different options but\nthen if you don't have a technical\nknowledge if you don't have a technical\nskills example if you are not good with\nprogramming we have not done it working\nbefore or not cryptography that's fine\nyou can still understand blockchain and\nyou can be an adviser and the third\nquestion which is very important the\nprerequisites what are the prerequisites\nfor blockchain to think about this it\ndoesn't matter what time of course you\ndo example if you want to be little\nmachine learning if you want to get into\npush development we need to have some\nsort of very positive example for\nmachine learning it should be good at\nmaths find some other concepts and now\nthey on the other hand if you want to be\ninto full stacks\nshould be doing about designing and\nother stuff right and then how exactly\nservo works and different stuff\nwhat about blockchain and yes some\ncourses do say you don't need certain\nknowledge to get into blockchain and the\nanswer is yes you can diagnose block\nchange from start and we will try to do\nthat in this course as well we don't\nexpect you to have any base knowledge to\nlearn blockchain\nbut is it twist year the twisters block\nchange will be easy or difficult for you\nis depend upon what you know already\nexample when I was learning blocks in\nfor the first time I was quite\ncomfortable for several reasons one I\nloved this technology and when you have\nsomething you feel comfortable second\nreason is the topic which is there is\ndocked an example cryptography\ndistributed computing because I used to\ntake lectures on this I have made some\nprojects based on these applications so\nI'm quite comfortable on cryptography\nI'm quite comfortable on distributed\ncomputing and that's where blockchain\njust played and that's what I'm\nexpecting from your side if you know\nsomething from the base and it will be\nalways helpful so example if you know\ncryptographic and if I'm talking about\nsome cryptographic concepts then you\nwill feel comfortable and that's why the\npier equals it's our cryptography and\ndistributed computing and here's we have\nsome more topics as well an example game\ntheory yes you can learn them by\nyourself just go to Google today and\nstart learning about them start\nsearching about cryptograph they start\nsearching about YouTube you to computing\nand also game theory the good news for\nus\neven before touching the blocks and\ntechnology we will be focusing on these\nbasic concepts okay so the next video we\nare going to implement will be on the\nprerequisites so if you don't know\nanything that's fine you can start from\ntoday or you can wait for the next video\nwhere we start with the actual\nprerequisites and then we will be\ntouching\nblockchain so I hope you are excited so\nblockchain anyone can learn it and it's\na new technology right we don't have\nmany people in the industry it's booming\nlike anything right as far as search in\nnext year we'll be having more vacancies\nfor blocks in developer than any other\nfield so yes it is booming so you can be\na part of faith and we will learn\nblockchain together so I hope you're\nexcited I'm excited to meet you in the\nnext video\nin this video we will talk about\ncryptography the blockchain works on\npeer-to-peer network which simply means\nyou have multiple nodes and we don't\nneed a central server whatever we do\nnowadays is based on some server by the\nexample if you are working on Facebook\nand if you want to communicate with your\nfriend we have a Facebook some in\nbetween same goes for transaction if you\nwant to send money to someone read a\nbank in between on the other hand we\ntalk about peer-to-peer we don't need a\ncentral server this is not something\nwhich is very new it's there from a long\ntime if you remember Napster it was\nbuilt on peer-to-peer network which\nsimply means you have multiple nodes or\npeople they want to share music for free\nof course the parted one and they can do\nit using peer-to-peer example let's say\nif you have four people here are four\nnodes a B C and D and if a and B they\nhave a music album with them the same\nmusic album and if C want the same album\nhe can download from a and B at the same\ntime so maybe half album from a half\nalbum from B and then at the same time C\ncan also upload the album so that D can\ndownload it and that's how peer-to-peer\nworks we don't need a central server in\nbetween torrent also works on\npeer-to-peer network if you have ever\nused torrent you know what I'm talking\nabout right we have seeds we have peers\nservice b2b is awesome but it doesn't\nmatter whatever network you work with we\nhave four big concerns the first concern\nis confidentiality the second one is\nintegrity third one is non repudiation\nand the fourth one is authentication so\nlet's talk about the first one which is\nconfidentiality so let's say if you are\nworking on this peer-to-peer network and\nif you have let's say a and B we also\nhave C and D let's talk about them later\nso we have a and B say a want to send a\nmessage to B now this message can be\nanything it can be a simple message\nlet's say hi hello all its it can be\nvery confidential let's say your bank\ndetails and if you are sharing those\ndetails on the network and it is open it\ncan be accessed by anyone but let's say\nwe have seen between IC say is hey a is\nsending a message to B and C can\nactually read it that's something which\nwe don't want right we want our data to\nbe confidential it can be a simple data\nor a varies\nbut everything should be confidential so\nthat's one thing we want to achieve the\nnext thing we want to achieve is\nintegrity\nso let's say if a is sending a message\nto B and of course we don't want anyone\nto see that message but let's save serve\na simple message and the message is hey\nlet's meet at 6 p.m. now if someone else\nis able to see that message that's fine\nwith me but let's say C comes in between\nI'd say hey I have read the message ok\nbut then I also want to modify it C\nmodifies the data by saying hey let's\nmeet at 5 p.m. that's what the vellum\nstarts right someone in between is\nchanging my data so the data which is\nreceived by B is different from what a\nis sending and that's where we have an\nissue of integrity we don't want our\ndata up to be modified all that work the\nthird one is non-repudiation which\nsimply means no one should say that you\nhave not done that I have not done that\nexample let's say if a sends a message\nto B as by saying hey let's meet at 6\np.m. and let's say if B showed up and is\nnot there after some time we will say\nhey I have not sent you any of that\nmessage so we don't want that if a is\nsending a message to be there should be\na prove that a has actually sent the\nmessage that's about not a variation the\nfourth one is authentication so let's\nsay B has received a packet and the\npacket with all the message is let's\nmeet at 6 p.m. and the message is sent\nby a what is it guarantee that a has\nactually sent a message it can be C as\nwell so maybe C has sent the message in\nthe name of a or maybe some other\nidentity and that's what it all starts\nright we don't want anyone else to send\na message on someone else behalf and\nthat's why we have an issue of\nauthentication so how do you solve this\nfor problem and that's where we have a\nconcept of cryptography now if you talk\nabout this term cryptography it's\nbasically had two terms the first one is\ncrypt and second one is grothy so\ngoodness basically means hidden or\nsecret and graph is basically writing so\nthat means when you send a message you\nhave to convert your message in such a\nway that someone else will not be able\nto read it now when I send someone else\nit should be readable only by the\nreceiver but not by anyone else what do\nwe do that so what we do basically here\nis we use a concept of encryption\nand decryption now what it means so\nlet's say if you have a and B if a want\nto send a message so that message will\nbe first encrypted and we will get\nsomething new known as a ciphertext now\nciphertext is basically unreadable\nformat and then this under table format\nciphertext will go to the receiver end\nlet's say B now B will be able to see\nthat but unfortunately the moment you\nencrypt a message you can read it only\nwhen you are decrypting it that means if\nyou won't read the message you have to\ndecrypt it how we'll do that the only\nway to encrypt and decrypt something is\nwith the help of a key so if a and B has\na key they can encrypt and then decrypt\nno one else can do that because it did\nwould have a key with them so based on\nthese keys we have two different types\nof cryptography\nthe first one is symmetric key\ncryptography the second one is a\nsymmetric key cryptography and what are\nthose that we'll discuss in the next\nvideo\nin this video we'll talk about types of\ncryptography so basically there are two\ntypes the first one is symmetric key\ncryptography the second one is all\nsymmetric key cryptography now as names\nsuch as the first one should be having\nsymmetric key and second one will have\ntwo different keys right so let's talk\nthe first one so let's say assume we\nhave a and B now a want to send a\nmessage to B what a will do Abel simply\nencrypt the message using a key so let's\nsay that key is K 1 so using a key K 1 a\nwill encrypt a message that message will\ngo to be the in fact even B cannot read\nthat message because it is encrypted\nformat so B has to decrypt it now which\nkey B will be using of course the same\nkey right we just gave one so a and B\nboth will have the same key which is k1\nthat's a different question\nhow will they share this key with each\nother of course not a network right at\nthe end we want them to have the same\nkey which is k1 so now let's say we have\none more we have a and C so of course we\nhave be there so if I want to send a\nmessage to see now what above key a\nshould use should a use k1 of course not\nright because b has k1 so if a want to\nsend a message to C or we should not be\ninterpreted by anyone else it will use a\ndifferent key now and let's say we will\nleave that as k2 so between a and B we\nhave k1 between a and C we have k2 let's\nsay B and C won't attract what key they\nwill use will they use k1 of course not\nwill they use k2 of course not\nthey will need a different key which is\nk3 whatever says as the number of user\nincreases we have to increase the number\nof keys and it will be difficult to\nmanage one example in my pocket I have\nto carry hundred keys because if I want\nto interact with hundred people I have\nto manage all the keys we don't want\nthat so that's one of the topic of\nsymmetric let's move towards asymmetric\nasymmetric cryptography also known as\npublic key cryptography so basically we\nuse two different keys here one is\nprivate key and one is public key so\nwhat is this public key and private key\nas names\njust everyone will have two kids let's\nsay a want to send a message to BB send\na message to C's so on this network we\nhave multiple nodes each node will have\ntwo keys the private key and a public\nkey so a will have its own private can\npublic key B will have its own time we\ncan public key C will have its own\nprivate can public key if you want to\nencrypt and decrypt the message you have\nto use both the case not one so to\nencrypt a message you can use public key\nbut to decrypt the message you have to\nuse private key if you are using a\nprivate key to encrypt the message then\nyou have to use a public key to decrypt\na message so you have to use both decay\nthe same time you can't simply say I\nwill link it with public and equate\npublic key that's not possible so we\nhave to use both so if you are\nencrypting with private you have to\ndecrypt with public yeah if you are\nencrypting with public every ticket with\nprivate how do you achieve security here\nso let's say if a want to send a message\nto B as we know the public key of B is\nknown to everyone public right so of\ncourse a will also know the public key\nof B so what I will do a will encrypt\nthe message with B's public key and then\nthat message goes to B of course\neveryone else on the network can see\nthat message the encrypted message but\nno one can decrypt it you know why\nbecause that message will be decrypted\nonly with B's private key and who has\nB's private key of course only be the\nprivate right so you will know your\nprivate key and everyone else will know\nyour public key so that's how you do it\nso how do I achieve security and click\nthe message with public key and to give\nthe message with private key let's do it\nagain so let's say C want to send a\nmessage to D so which public key si will\nuse so C will use a public key of D so C\nwill encrypt the message with this\npublic key and D will decrypt the\nmessage with its own private key so\nthat's how this\ncryptography works but now the question\nis what is that key is is it a number is\nit the text that we'll discuss in a\nseparate video\nin this video we'll talk about digital\nsignature why do we need it so let's go\nback to the previous video where we have\ntalked about four problems on the\nnetwork the first one was\nconfidentiality second one was integrity\nthird one was non repudiation and fourth\none is authentication so we have talked\nabout confidentiality right how do we\nachieve that with the elf of\ncryptography of course what we do is we\nuse a receivers public key to encrypt\nthe message and then the moment this\nmessage received at the receiver end the\nreceiver will decrypt the message with\nthe help of his own private key and\nthat's how it works and no one else can\nactually decrypt the message because no\none has the receivers private key so\nthat works right we have achieved\nconfidentiality\nwhat about authentication how do we\nachieve that and that's where we have a\nconcept of digital signature so let's\nimagine we have multiple nodes on this\nnetwork and one of them is a and the\nother one is B and B has received a\npacket or the message by saying let's\nmeet at 6 p.m. and packet claims that\nthis is coming from node and a and this\nsort of starts you know how can you be\nsure that this packet has came from node\na and how node a can say hey I have sent\nthat message so to solve this problem\nyou know in real world as well what we\ndo when we write a letter\nwe also sign the letters like that's\nyour signature which specifies that this\nletter has been sent by you or written\nby you how can we do that in the virtual\nworld of course we cannot use a pen well\nright and that's why we have to use a\ndigital signature how can we do that so\nlet's imagine we have two keys right so\neveryone will have two key a private key\nand a public key if I want to send a\nmessage so let's say a want to send a\nmessage to B and the messages let's meet\nat 6:00 p.m. now before sending that\nmessage what if a will encrypt the\nmessage with the help of a private key\nand then this message goes to the b and\nb is able if you decrypt it with a is\npublic key but then hold on a brick key\nwill be available to everyone right\nthat's the case we are not trying to\nachieve confidentiality here we are\ntrying to achieve signature the moment a\nis able to sign the message by his own\nprivate key\ndecrypted by a public key on the B's and\nnow be sure that this message is coming\nfrom a because this message was able to\ndecrypt with the help of a spa breeki\nand the only way you can do that is by\nif this message has been encrypted by a\nprivate key and now we have achieved\nauthentication right but then we are\nlosing confidentiality right how can we\nachieve that so what we normally do is\nfrom the azar itself\nso before sending the message a first\nwill encrypt the message using a s\nprivate key and then the same packet\nwill be again encrypted with the help of\nB is public key so we have double\nencryption using B's public key and then\na's private key well be received that\npackage it will first decrypt the\nmessage with the help of B's private key\nand then it will again to give the\nmessage using is public key and that's\ndone right now we got a message so we\nhave achieved two things here\nconfidentiality and second one is\nauthentication and that's how it works\nso even if you have seen between C\ncannot decrypt the message because it is\nencrypted with the help of it B is\npublic key right that's how we achieve\nsignature\nin this video we'll talk about nodes and\nthe blockchain system we have a concept\nof nodes now you can imagine a computer\nor mobile phone or network is known as\nnodal in fact the Internet which we are\nusing now the devices which we use are\nnodes right example it can be router it\ncan be desktop anything so in the same\nway in the blockchain network also we\nhave a concept of nodes\nnow this nodes can be again a computer\nor a mobile phone\nnow what this node does now based on the\ntype of node you have it perform\ndifferent operations now first of all we\nhave two different types of nodes the\nfirst one is full node or you can call\nthem as fully right ated node the second\ntype of node we have is partial node or\nyou can say light nodes so let's talk\nabout full node first now full node is\nbasically a computer which will have the\nentire blockchain so the current size of\nblockchain is 188 GP I'm talking about\ntoday's date which is 28th October 2018\nso it is 188 GB and every date is\nincreasing so all this data will be\nstored on full node this full node has\none more task of verifying the node so\nfirst it will store the entire\nblockchain second it will verify the\nblocks which is getting added so every\ntime the connected note says hey we got\nnew block now so this full node will\nverify the entire blockchain and once it\nverifies then only it will store it you\nknow something like let's say if the\nbeard node says hey node we got a new\nblock for you but this full node will\ncheck ok so you are giving me a new\nblock let me first verify it after\nverifying it then only it will add that\nblock in the full node now induction we\nhave one more table which is - now - I\nbasically mined the blocks now again how\nthat works that we discussed later we\nhave a concept of transactions the\ntransaction goes into a block a - will\nmine it we talk about that later a full\nnode can also be a miner basically if a\nfull rotor computer runs a mining\nsoftware then we can call them as mine\nas well it's not compulsion that a full\nnode should be miner as well okay so we\nhave two different things a full node\nand then we can have a full node with a\nminer now only thing is we talk about\nfull node we only need a huge amount of\nstorage which is approximately 188 GBS /\nnow what\nyou want to be a miner that's where you\nneed a huge computing power now when I\nsay huge computing power I'm talking\nabout stack of CPUs and huge amount of\nGPUs so - they use CPUs and GPUs as well\nyou can try those things with your\nlaptop but then you can never mind\nwith your laptop because it has a very\nlow power you need a huge amount of\npower and to run that machine you need\nelectricity as well so that's a huge\ninvestment so for the full note you\ndon't need a huge investment you can use\nyour normal computer provided you have\n200 GB free now but then if you want to\nbe a miner you need a huge amount of CPU\nand GPU power basically you need an\nentire Center with CPUs and GPUs\ninvestment right\nbut then as a miner you earn incentives\nas well so basically we have incentive\nmodel so every time you mind a new block\nyou do on the transaction fee and then\nsome bitcoins as well again that's only\nspecific to Bitcoin but again we'll talk\nabout that later but full node as a full\nnode you don't earn but then you can be\na miner to earn because they're\ninvesting a lot of money on the other\nhand we have a concept of partial nodes\nor light nodes example let's say if you\nwant to use Bitcoin if you want to use\nany ballot and if you want to do that on\nyour mobile phone of course your mobile\nphones need to have that software now of\ncourse this will also be a node now the\nmoment you install software\nthis becomes a node but then this will\nbe a partial node because I cannot\nsimply download the entire blocks on\nthis phone so this will have somewhat of\nblockchain so that it can't run so that\nit can you know send money to someone\nelse that's your light node or against a\npartial node so we have a concept of\nfull node who will verify the\ntransactions we will store the entire\nblockchain and then we have partial\nnodes who can only they use it for valid\npurpose so that's about no talking we'll\ntalk about in detail how exactly miner\nworks how exactly the gate blocks just\nto get the idea of nodes this is what\nnodes are\nand let's continue this series on\nblockchain and we are talking about the\nprerequisites for blockchain and one of\nthem is hashing so in this video we'll\ntalk about those terms like hashing hash\nfunction hash value so let's get started\nso basically hash function is a\nmathematical function which takes\narbitrary length of numerical data and\nconvert that into a fixed length\nnumerical data as I mentioned the input\nwill be of any length it can be a\nsmaller value it can be a bigger length\nvalue but the output will be of fixed\nsize now based on the algorithm which we\nare using to do that the output length\nwill change example we have a concept of\nmessage digests we have a concept of sha\nso based on what type of algorithm we\nuse we'll be getting a different set or\ndifferent lengths of hash value but your\ninput can be of any type it can range\nfrom one bit to thousands of millions of\nbits and that's the amazing part you\nknow so even if you're passing a huge\nchunk of data let's say 5 GB of data as\nan input you will get a fixed line size\nexample let's say if you take my name\nthere so my name is now in 26 if I type\nthat text you will get h value it's\ngoing in a function and that function\nreturns you this value the amazing thing\nis if I use a certain algorithm let's\nsay if I'm using sha-256\nand if I type my name then if I say -\nthat means ID doesn't matter at what\npoint I do that it doesn't matter how\nmany times I do that I will get the same\nhash value that means for the same input\nwe will be getting the same hash value\nevery time the next amazing thing we\nhave is even if you have a small change\nin your text it will change your hash\nvalue in a very different way you can\nsee even if I change my reddy from small\nr to capital all you can see the change\nnow it is changing the entire hash value\nit's not that someone can guess now\nright it's a very different thing\nthe third amazing thing is you cannot\nget the actual input from the hash value\nthat means that it was is not possible\nof course we convert the given data into\nhash which is very easy to do but it is\nvery difficult in fact it's almost\nimpossible to go back and just to remind\nyou hashing is not encryption because in\nthe encryption we can get it up back\nusing decryption\nbut that's not the case with hash\nbecause in hash once you get the hash\nvalue you cannot get the data\nback of course right how would it get it\nbecause when you do hashing you will\nlose lot of data let's say even if you\nhave your input as in jeebies the output\nwill be in bits right just of course you\nare losing a lot of your data so it's\nimpossible to get your data back what my\nimportant thing is for two different\nmessages you will be having two\ndifferent hash values you will never get\nthe same hash value if that happens we\nwill call them as collision now you\nmight be asking ok this is a theory\nright how do we implement that now first\nof all in block shall we use them okay\nso anyway implement blockchain we will\nbe using different algorithms we will\nnot be writing those algorithm by\nourselves if you want to know more about\nthe algorithm you can just check out\nsome other videos or I will try to make\na separate video on explaining how\nexactly to create that algorithm but as\nof now what we are doing is we are\ntaking the input and we are getting the\noutput we will be using this output will\nbe using this hash value in the\nblockchain so there are different\nalgorithms are believable you can try\nthem out so one of them is MD which is\nmessage digest and there are different\nversions of it we have M t2 and t3 and\nthen they just watchin b6 there's also\nmd5 but fevers back there was a tack on\nmd5 and it was compromised so that's why\npeople are not using md5 now so now they\nare moving towards sha which is secure\nhash algorithm which is built by NSA so\nagain that we have different versions\nfor it we have sha 0 sha-1 sha-2 and now\nwe have this 53 in block shouldn't we\nnormally use\nsha 2 in sha - as Ville is a family\nactually and we have different versions\nof it the popular - popular version we\nhave is sha-256 and sha-512 this numbers\nactually represent the output bit values\nexample if I say sha 256 it will be\nhaving output as 256 bits now if you say\n5 and 2 if of course it will be having\noutput as a 5 and 2 bits but how exactly\nyou will be using hash and blocks and\nand just a different concept so once we\nstart with blockchain you understand how\nexactly we can use hash there but again\nhashing is basically a very important\nconcept so let's take another example\nfor hashing which is not weighted -\nblockchain so let's say if you want to\ndownload Ubuntu now of course you can\njust go to Google search for the one -\nsound load and you can get it so it will\ntake you to the official website of it\nand from where you can download the file\nof around 1 GB and it will work right\nyou will get the file\nbut what if you\ndownload it from torrent because it\ngives you that feature right it gives\nyou multiple peers you can download it\nfrom multiple places so of course it\nwhen I prefer to download it from\nutorrent instead of going to the\nofficial website but there's one race\nwhat if this set up which you are\ndownloading from torrent it can be\nmalicious right so someone else have\nuploaded that set up and you're\ndownloading it and which will be having\nsome viruses or some malware right so\nhow do you verify the set of which we\nare downloading is official so what we\ncan do is it on the official website\nthey have a set up plus they also have a\nhash value of course we are not\ndownloading the set up from the official\nwebsite but we can get the hash value\neven copied now once you get this set up\nfrom the torrent you can generate the\nhash value for the particular setup so\nlet's say the set up is of 1gb you can\nuse on a surface which will give you the\nhash value of that set up and then you\ncan compare if the hash value of the\ngenerated one and the hash value from\nthe website is same that means the set\nup is official because even if some\nhacker has changed to one or two bits\nit will change the entire hash value\nright so of course that's how you can\nverify so yes we can use hash value in\nmultiple places of course in terms of\nsecurity but then we can use that\ninduction as well again how to use it\nthat we'll see in data\nin this video we talk about\nthree the way it comes to blockchain we\nhave got up blocks and then this blocks\nwill be connected with the help of hash\nvalue again how exactly that was a\nthat's a different thing\nevery block will have transactions now\nthis can be one transaction or thousands\nof transactions and then we also want to\nfind a hash of the block right so what\ndo you think will you just combine the\nentire block and find one hash or will\nyou find the hash of each transaction\nnow if you want to find the hash of each\ntransaction you have to store all the\nhashes right so one block will not have\none hash one block will have thousands\nof hash we don't want that we want to\nget only one hash one of the way to\nimplement that is with the help of local\ntree now first of all we'll try to\ncreate a tree here now when you look at\na tree a tree will have a root tree will\nhave leaves and a tree will have nodes\nso the end nodes they are normally\ncalled as leaves the nodes which has\nthis leaf nodes or the nodes in between\nthey will be called branches and then we\non the top we have root so how do you\nbuild this tree so let's imagine in one\nblock we have ten transactions now if\nyou will start gathering the hash of\neach transaction so let's say for ten\ntransaction you got then hash value now\nwhat you will do so you will find the\nhash value of first and second then you\nwill find the hash value of third and\nfourth and the list goes on so you will\nfind the hash of all this now once\nyou've got the hash of what I'm - you've\ngot the edge of three and four you got\nthe hash of five and six and this goes\non again you will combine the hash of\none two and three four right you will\nget the hash of one two three four and\nthen at the end you will combine\neverything to get a hash of one to ten\nthat's how we do it that's how you build\nthis tree so in this example you can see\nthe end is of even-numbered right you've\ngot to end transactions but what if you\nhave odd number because normally we talk\nabout Merkle tree it's actually a bunny\ntree so in binary it you need to have\neven numbers of nodes so at the end if\nyou have let's say nine transactions you\nwill at the end you will just repeat the\ntransaction so you will say nine nine\nrepeated right that's what you do so at\nthe end when you combine all these\nthings on the top you will get hash\nthat's a hash of the merkel root and\nthat's how you find a one hash of the\nentire block that is very useful when it\ncomes to\nsaying again going to start adoption you\nwill see how that works so that's the\nbasic idea about model 3\nand in this video we'll talk about\nblockchain architecture so we have\ntalked about the basics of it right we\nhave talked about hashing we have talked\nabout mobile tree now we know the P R\nequals it's for block change in this\nvideo let's focus on the architecture of\nit now unless the architecture I'm\ntalking about what exactly blockchain\nmeans and what is that inside each block\nso let's start with it now blockchain is\nsimply a database right of course none\nof people have a lot of expectations on\nblockchain they feel blockchain can\nsolve all the issues but not exactly\nblocks will solve issue based on data\nright so this issue nowadays we have is\nwe can manipulate data and plus we also\nwant to make sure it is distributed and\nthat's what we can achieve with\nblockchain when you say a block in block\nchain you have data so now what I did\nI'm talking about\nnow as blockchain type changes you know\nwe have different types of block change\nwhich we'll talk about that later in\ndetail but I want me to talk about\ndifferent blocks change they will have\ndifferent set of data now one of the\nblocks will which is very famous it's\npublic blockchain in which the example\nis Bitcoin right the first locks an\nimplementation now the Bitcoin block\nwill have what now we use Bitcoin to\nsend money right so of course it will\nhave from it will have to and the money\nas well now that is the data which you\nsave in a block now with this data you\nhave one more thing which is known as\nthe block header now why do we need a\nblock header the thing is you will be\nhaving out of blocks right so how can\nyou fail between each block and how\ncan you create that chain which I'm\ntalking about and that's where the blog\nheader comes to the picture so what this\nblock etre will have first thing we need\nis every block need a timestamp right\nthat's that's important right if you\ndon't have a times time how would you\nknow at what point on when this block\nwas created so we need a timestamp the\nsecond thing we need is a version right\nnow we have different versions of\nblockchain or the protocol which we use\nso that's one thing we'll be able to\nhave so you will have a timestamp you\nwill have a version and then we will\nalso have a muckle tree now a ribbon but\nwe have talked about mockery right so in\none particular blog we'll be having a\nlot of transactions and then you need\nonly one hash of it and that's why we\nwill need a merkel root so we need the x\ntime we need a version a number called\nroad now what else now we need two more\nthings now I'm going to talk about\npublic blockchain one of the algorithm\nwhich is very famous\nis proof-of-work again we'll talk about\nthat later but then we want to modify\nthe block we have to use P Oh W which is\nproof of work and to make it work we\nneed two more fields first one is the\ndifficulty target and second one is\nnouns so we'll talk about that later\nonce we talk about the proof of work but\nas of now we need these two fields as\nwell now we have talked about five\nfields so in a block you'll be having\nthis fight but we have one mole and that\nis your previous hash now what a hash\nI'm talking about every block will have\na hash right how will you create this\nchain every block will have the hash of\nthe previous block so example let's say\nif you have five blocks now the second\nblock will have the hash of the first\nblock the third block will have the hash\nof second block the fourth block will\nhave the hash of third block and that's\nhow you create a chain right\nyou can track backwards right so let's\nsay if you are on fifty-fifth the block\nnow if you want to know the previous\nblock of course you have to follow that\nchain right you have the hash of\nprevious blocks with you now the\nquestion is what is the advantage of it\nif you remember when we talked about\nblocks and we talked about immutability\nright which simply means once you create\na block in a block chain no one can\nchange it\nokay but I said no one can change it is\nit password predicted or something what\nif I say blocks is open anyone can\nmanipulate data from blockchain okay but\nwhy people say it is secure so let's\nthink about it now they talk about hash\nevery time you change a data it will\nchange the hash value as well so example\nlet's say if you have this five blocks\nand then the hash of fourth block is any\nfifth block right the hash of third\nblock is the end fourth block the moment\nyou change any block let's say I want to\nchange the second block here in that\ncase what will happen is the moment you\nchange the data of the second block it\nwill change the hash as well right now\nthe hash is changing right now it will\naffect the third block because you have\nchanged the hash value and that's what\nall of starts because if you change\nsecond one it will change the hash and\nthen it will affect third one and now\nagain you have to regenerate the hash\nfor third one to make it work right and\nthat's where it will affect the fourth\none again you have to do the same thing\nfor fourth and it will affect the fifth\none now the number of blocks which we\nhave in block is huge so of course if\nyou change any one block you have to\nchange all of those is it difficult\nof course not right we\ndevoid of supercomputer so what we can\ndo we can collect thousands of devices\nwith us and you can change the hash of\neach block it's not that impossible\nbut then how can you make it secure now\nthat's where the concept of P or W comes\nin the picture so every time you change\nsomething in a blockchain or if you want\nto add a new block it has to be\nvalidated I'm talking about the public\nblocks in now so without validation you\ncannot add a block that means you have\nto do some processing to add a block and\nthat's where we have a concept of PW\nwhich which says it will take at least\nten minutes for anyone to add a block in\na blockchain now when you say you even\nif you change one block and if you have\nfive blocks you have to wait for 15\nminutes to change the entire block okay\nthat's one thing it will take a lot of\ntime second your block chain will not be\nstored in one machine but it will be\nthere if it 21 people anyone can be a\npart of blockchain network this is not\njust a central server so example let's\nsay in this network if you have ten\npeople everyone will have their own copy\nof blockchain of course it is a full\nnode we have talked about that before so\nif you have ten people when you add a\nnew block in a blockchain it has to be\nverified by everyone right so everyone\nwill come in consensus to add that block\nin a blockchain and that's why we have a\nconcept of consensus algorithm to add\ndata in a blockchain and that's where\nyou are making your blocks insecure so\nfirst of all you need a supercomputer to\nchange the block and you have to weigh a\nlot of time plus even if you want to do\nthat you need a 50% majority in the\nblockchain Network which is almost\nimpossible to achieve right because to\nprocess that P or W you need a huge\namount of GPUs and CPUs you can't be\nthat rich to have the hold of 50% of the\ndoctor network in the world right and\nthat's how you make blockchain secure\nnow there's one more question\nevery block will have the hash of\nprevious blocks so fifth block will have\nthe hash of fourth fourth will have a\nhash of third what about the first block\nnow the first block is known as a\nGenesis block now Genesis block previous\nhashed value will be zero right because\nwe don't have any block before that in\nterms of Bitcoin it was created by\nSatoshi Nakamoto the Genesis block and\nthen\non that blog we got new blogs so that's\nsomething to remember so that's it\nthat's about the block structure in the\nblockchain architecture\nand this video will talk about types of\nblockchain no chain came into existence\nfor the Bitcoin right so they wanted to\nimplement Bitcoin and they wanted to\nmake it secure and that's where we have\nblockchain right on the other hand the\nindustries they looked at blockchain and\nthey thought we can implement this\ntechnology in our areas so whatever\ncolumn we are facing can be used locked\nin there so initially when you talk\nabout blockchain was majorly for crypto\ncurrencies we had Bitcoin and then we\ncame up with a theorem and then they a\nlot of coins available right so we have\naltered coins as well and some well they\nwere very happy with rock chain but what\nabout finance industry what if you talk\nabout education industry how they can\nuse blockchain now what are the issues\nwith the auction is some people say it's\nnot secure because all the transactions\nare open yes they are anonymous we don't\nknow who is sending what money to which\naddress but still you can see this stuff\nonline because all the data of Bitcoin\nblockchain is available openly that's\nwhy this name has the public blockchain\nit is open plus anyone can be a part of\nthis network so let's say we have ten\nnodes which is working on blockchain and\nnow if you want to be a part of it you\ncan do that you can have your own node\nand you can be a part of that open\nblockchain of course it can be a miner\nor you can just be a local node but then\nyou are able to join that public network\nso that's the issue which other company\ndon't want they want to have that old\nblockchain is it possible and yes that's\nwhy we have the next type of block sure\nwhich is private so private blockchain\nis specially for one company let's say\nif I feel hey this is my finance\nindustry or this is my company which\nworks with client data or money I don't\nwant this data to be shared with anyone\nelse I want to have my private\nblockchain I don't want anyone else to\ncontribute so the number of nodes who\nwill be validating my blockchain and the\nnumber of nodes who will be adding the\nblocks in my blockchain will be\ncontrolled and will be knowing about\neveryone and that's where we have this\nprivate blockchain the next one we have\nis federated blockchain\nnow this is where you'll be having group\nof people or group of companies they'll\nbe coming together to create a separate\nblockchain and of course there will be\nsomeone who will be leading it and but\nthen it will be group of people and you\nwill\nknowing everyone empty group so let's\nsay if you want to add a new block you\nwill be the known entity it's not like a\npublic ledger of public blockchain where\nanyone can be a part of that network\nright so basically we have three we have\npublic which is open to the entire world\nyou can be a part of the network second\nwe have private which is only limited to\none company or they might want to add\nthe transactions privately but it will\nbe having only right axis maybe you can\nallow public to read the data but then\nthe right thing will be restricted on\nthe other hand we have federated when\nyou have group of companies working\ntogether again we have on one more which\nis permissions or permission less blocks\nand we'll talk about that later but\nthese are the three types now the\nquestion is which is the best one is in\npublic private or Federation of course\nright public is best because anyone can\nbe a part of it\nnow since we are using proof of work\nwhich takes ten minutes for each block\nso it is slow on the other hand we talk\nabout private or federated is fast\nbecause we don't have to use P or W\nbecause all the entities here are known\nthere is one concept which is very\nfamous in the production world consensus\nso what is consensus so let's say we\nhave five mining nodes here now all\nthese nodes will be having a copy of a\nblockchain and all the copy will be of\nsame state so they are the exact copies\nhere now what if you got a new block so\nyeah we have done some transactions and\nyou got a new block here now this block\nis supposed to be added in a blockchain\nbut then which mining node will do it of\ncourse if you say hey let's give it to\nthe latest mining node later I'm a\nmining node five and notify will add\nthat in its own blockchain and with the\nhelp of the protocol we can just\nreplicate in all the block chains here\nin different nodes but is the problem\nhere what if note 5 is malicious so how\nyou make sure that all the nodes come to\nthe consensus and they will have the\nsame copy of it and that's where we have\nto follow some consensus algorithm now\nin the blockchain word we have so many\nconstants algorithms so using which you\ncan actually agree on one particular\nstate of a blockchain so if the new\nblock is added in a blockchain who will\nadd it that can be defined with the help\nof consensus now based on it is\npermission less or permission blockchain\nwe have different consensus algorithm\navailable the first one which is proof\nof work which is very famous thanks to\nBitcoin so Bitcoin uses P or W to\nachieve the consensus right now what is\nP or W in short let's say we have all\nthe nodes here now all this node will\nspend some computing power doing some\ncalculation and whoever wins the\ncalculation or whoever win the puzzle\nthey will add this block in a blockchain\nyes they will receive some bitcoins and\nthat's a different concept right but in\nP or W we have to make sure that the\nnode before adding the data in a\nblockchain is doing some computation and\nthat's how we can understand yes they\nhave spent some computing power so we\ncan trust them\nthat's dpow part we have some more in\nfact we have POS in the etherium world\nnow POS stands for proof of stake but\nwhy we need POS when you have P or W\nthat there is one issue with P o W we\nhave to spend huge amount of computing\npower do\nyou think we all that we are already\nshort of resources available and you're\nspending huge amount of resources the\npower resources on the blockchain same\nproof of stake you don't actually do a\nlot of computation it's more about stake\nso let's say if you are a minor and if\nyou want to add that block in a\nblockchain of course in a Bitcoin\nnetwork we didn't network you will\nreceive some bitcoins or some currency\nwhen you win it right but then before\napplying for that or before going into\nthat blockchain you will be putting some\nstake in that blockchain now when you\nsay you have a stake in that let's say\nI'm spending let's say five\ncryptocurrency of some type may be\nbitcoins or some other points so I'm\nsaying I'll be investing five coins\nthere but you might be thinking okay\nwhat's a big issue\nanyone can invest no if you if I\nmalicious I will not do that right\nbecause if a malicious if I do something\nwrong they will kick me out of the\nblockchain right and I'm secure now so\nwhen I say I'm spending five bitcoins or\nfive coins that means you can trust me\nso whoever has the highest stake they\nwill win the puzzle or they will win the\nblock there likewise we have so many\nother algorithms as well we have Bo\neighty which is proof of elapsed time\nbuilt by Intel then we have P or D which\nis proof of deposit so it's almost say\nmistake but here you are depositing\namount before entering to the blockchain\nthen we also have P or C not the proof\nof concept but proof of capacity now\nhere you're not actually going for the\ncomputing power which is CPU which which\nconsumes a lot of electricity power but\nhere you are consuming the hard drive\nspace so whoever has the huge capacity\nthey might win the block there so that's\nthe general concept of consensus so the\nidea is using consensus algorithm we can\nactually agree on one particular state\nof a blockchain in the entire network\nand in this video we talk about\nproof-of-work POWs if women were in the\nlast year we have talked about consensus\nor and who and why do we need consensus\nin blockchain now when it comes to proof\nof work\nit's an consensus algorithm just like\nPOS and then we have POC as well this is\none of them but this is famous because\nof one thing Bitcoin now first of all\nwhy do we need a P or W nothing about\nthis when you have a blockchain and of\ncourse in this blockchain network you'll\nbe having multiple nodes and all this\nnode will be having the same state of a\nblockchain but now let's say you have a\nnew block now who is responsible to add\nthis new block in a blockchain first of\nall we have to verify all the\ntransaction which is quite easy but who\nwill add this block in a blockchain it's\nimportant for us that that no it should\nnot be a malicious node because it can\nmanipulate data we don't want that every\nnode who is competing to add that block\nin a blockchain has to do some computing\nwork now what kind of computing work so\nthis is normally we say they will be\ngiven a mathematical calculation and\nwhoever solves that calculation will win\nalso any when you say they will win they\ncan add the block in a blockchain and\nthey will receive some points or some\nrewards now in Bitcoin network they will\nreceive bitcoins in some other network\nthey will have their own rules but the\nimportant thing is they will win and\nthey will add this block in a blockchain\nbut then why do we need it is because if\nyou are spending huge amount of\ncomputing power so this chances goes\ndown that you will be a malicious\nsoftware but you will be a malicious\nnode the second thing is let's say in a\nblockchain if you have 30 blocks and if\nyou want to change twenty fifth block it\nwill affect the hash of all the\nremaining blocks right so I can\nrecalculate right I can recalculate the\nhash of all the blocks it is easy right\nI should know because every time you\nmake a change every time you add a block\nin a blockchain you have to P or W which\nwill take some amount of time\nSamant of computing power if you are\nthat rich and if you have so much of\ntime you can do that but hold on the\nmoments you are doing that some other\nnodes or some other block will be\ngenerated which will be added in a\nblockchain so it makes your attack\nuseless but we have\none question here what is that\nmathematical calculation so of course\nevery node in a blockchain or every\nminer who want to compete will be\nsolving that mathematical problem\nso from video one to this video we have\nthe same question what is that\nmathematical problem now first of all\nthe complexity of that puzzle depend\nupon the network the size of the network\nhow many users are active and what's a\nblockchain size and all the other\nfactors now this can be easy example\nlet's say if I give you a number let's\nsay five twenty five you have to find\nthe factors of that number maybe I will\ngive you some extra logic as well you\nknow these two numbers should have a\ndifference of maybe at least fifty\nsomething like that okay now you will be\nspending your computing power to\ncalculate that now this is easy it can\nbe done in seconds but let's say if I\nmake it difficult if I talk about hash\nfunctions\nso just to recap about hash if you give\ninput to hash function it can be any\nlength input it will give you fixed size\nlength and the other thing part is if I\ngive you Naveen it will give you our\nunique hash but if I change something\nfrom the mean if I change that capital a\nto small it will give you a very\ndifferent hash value so you can't even\nguess okay so you have to generate so if\nI give you in fact if I give you the\noutput of a hash and you have to guess\nthe input and that's what you will be\ndoing lot of calculations right maybe I\nwill say there's a five digit number and\nyou have to find the input for this\nparticular output now maybe if I give\nyou there's a name of ten letters from\nthe dictionary you have to find it so\nsomething like that so they have to do\nthis computational power by Bruce forty\nbecause you can't apply logic here it's\nall Bruce force right so if you have\nhuge computing power you can do it\neasily but if you don't have that you\nmay lose and that's the mathematical\nequation which they do so do we have any\ndrawbacks of this yes we have drawbacks\ndon't you think we are wasting so much\nof energy here we are doing so much of\ncomputation which is useless so that's\none problem second one is the 51% attack\nso what if I have a network of 10 nodes\nso let's say there is a blocked a\nnetwork of 10 nodes and out of those 10\nover 6 nodes\nare malicious in this case you have more\nthan 51% of the network in your hand so\nof course this can be hacked that can\nyou can hack the introduction it work\nnow so that's two issues we have but\nthen that can dissolve with some\nadvanced things that's powr it is proof\nof work for you\nso what is etherium now let's go back to\nBitcoin so when we talked about Bitcoin\nwe said okay Bitcoin is a technology\nwhich is based on blockchain same goes\nfor aetherium but why do we need a\nTyrian when you have Bitcoin now think\nabout this when you say blockchain\ndoctrine will make internet\ndecentralized again okay when you say it\nwas centralized because of all these big\ncompanies whatever you do online goes\nthrough this big companies right we have\nGoogle Amazon Facebook they are managing\nthe entire internet now so we want to\nmake a decent rise and we said okay\nlet's use blockchain but the only thing\nwhich we know about the options was\nBitcoin but if we talk about Bitcoin\nBitcoin is only a peer-to-peer\nelectronic cash system so that's good so\nif you want to do transactions online we\ncan use Bitcoin so when you say a\nBitcoin blockchain every block will be\nhaving data right so all the transaction\ndata but what about software's think\nabout the current internet world what we\ndo we write apps right we create\nwebsites we have enterprise applications\nso all these applications are running on\ninternet which is centralized if you\nwant to make it decentralized we need a\nnetwork which can run applications which\nare decentralized and that's where we\ngot aetherium so thanks to Vitalik\nbetween who is the inventor of aetherium\nso in a theorem we have this amazing\nconcept known as a VM which is aetherium\nvirtual machine ok so if you are coming\nfrom a Java or.net background you know\nwhat I'm talking about right so to run\nany application to run the software in\nJava you need JVM to run which is Java\nVirtual Machine in the same way in the\nAthenian boil if you want to write\nsoftware's and if you want to run them\non the ATM network you need that virtual\nmachine ok so that means we have two\ndifferent concepts right we have Bitcoin\nbusiness mode for cryptocurrencies and\nthen we have etherium which is mode for\ndecentralized applications in fact in\nshort you can call them as gaps ok but\nthere is one question what about the\ncryptocurrency in this platform because\non this side we have Bitcoin so in the\nAtheneum platform first of all this is\nnot a sector currency it's a platform in\nthis platform if you want to use a\ncurrency we have ether because if you\nwant to run this decentralized\napplication we do need the\ncryptocurrency there and that is eaten\nhere so we also have a concept of gas\nwhich we'll talk about later but as of\nnow we have a theorem which is a\nplatform basically it's a open software\nplatform so you can build an own\napplication on a theorem it is damaged\nto start with so we have a special\nlanguage which we using which you can\nbuild applications there but then it's\nquite easy so once you are familiar with\nPython or JavaScript learning that\nlanguage will be easier so once you know\nthat language you can simply go to\neternal network and you can build your\nown application you can use the existing\napplications or you can build your own\nyou might be thinking it would be\ndifficult of course not is that easy to\nstart with yes if you want to make\ncomplex projects that's where you have\nto apply some logic it will take some\ntime but starting with it is damn easy\nso just to recap a theorem is a platform\nwhere you can create a decentralized\napplications which is DAB's in this case\nso it also has its own cryptocurrency\nwhich is ether so that's the basics on a\ntheorem\nand in this video we talk about\ncontracts now if remember in the last\nvideo we have talked about it here iam\nsaying it is and it's a blockchain\nbasically where you can write codes you\ncan write programming codes now if that\nprogramming code it represents any type\nof contract we will call them as smart\ncontracts okay I know it's confusing\nright so just to keep it simple let's\ntake an example now if you talk about\nlot of online websites which are the\ne-commerce websites so most of the\nwebsite we don't trust or an example if\nI want to buy something online I have\nsome specific website in mind example in\nIndia Amazon tip card Snapdeal are quite\nfamous but I don't even try other\nwebsites example let's say there's a\nwebsite named as abc.com\nwhere you can buy stuff online maybe I\nwill not buy from them for one reason I\ndon't trust them second reason maybe\nit's not secured so how do you build a\ntrust and how do you make it secure so\nwhen you say I don't trust them what's\nwrong with them so let's say if I order\nsomething on abc.com as a prepaid order\nbut I'm paying the amount before getting\nthe product so what if the product is\nnot delivered so there's a trust\nresource on my side but what if abc.com\nis a trusted company but not the\ndelivery service so let's say XYZ is\nresponsible to take that product from\nABC and delay it to me what if they are\ndoing some fraud and so ABC will also\npay them right so when I pay let's say\n100 dollars for the product out of which\nmaybe there will be some Commission\nwhich this people will be getting right\nthe delivery company so there's a trust\nissue between two different parties\nright from my side to ABC from ABC to\nXYZ ok excited should trust me right\nbecause I belong here so to solve that\nproblem we can use smart contracts here\nso what if the entire payment system\nwill be automated example I will buy\nsomething from a be calm which will be\nprepaid but then ABC will not receive\nthat money they will receive the money\nonly when I receive the product so it is\nthat it's something like if-then right\nso in programming we do that so if you\ncan implement that programming in that\nsystem in that supply chain management\nthat is smart contracts so I am paying\nbut then it is not received by ABC it\nwill be received only when I get de\nproduct XY z-- it will receive the\ncommission from ABC only when they do\nthe product right so that's the smart\ncontracts in fact we can use this not\njust for supply chain management but\nalso for let's say if you buy a car we\nhave lot of middle person right so we\nhave a dealer we have a finance company\nin between who will give you a my\noptions so we can automate those stuff\nas well a lot of legal stuff going on so\nsmart contracts is efficient when it\ncomes to all this process making it fast\nso there are certain benefits of this\nwhich is fast it is secure because\nthey're using blockchain here and it\nbuilds trust which is very important so\nnot just Amazon flip card but all these\ncompanies all this ecommerce company if\nthey can implement smart contracts\npeople will trust them right because\ntrust is the issue here so that's the\nsmart contracts in simple terms smart\ncontracts are plan of codes which you\nrun on a theorem network but basically\nthey are built for contracts\nwhat's wrong with blockchain if you'll\nsee from the first video we are talking\nabout good things about blockchain not\njust on this channel if you go on\nyoutube search for any blockchain video\nthey will talk about amazing stuff you\ncan do with dog chain but as with every\ntechnology blockchain has some drawbacks\nyes there at least up Dom X we can go\nfor and in fact some people focus more\non those drawbacks and stop focusing on\nthe things it provides but in this video\nlet's try to focus on four drawbacks\nwhich is there in dog chain welcome back\neveryone my name is ivan vendee and\nlet's get started now when you say\nblockchain the auction has multiple\ntypes out of which the famous one is\npublic blockchain and private blockchain\nso the drawbacks which we are going to\ntalk about is more for public blocks and\nthen private blockchain again till this\npoint we have not talked about travitt\nblockchain and how that works we are\nonly focusing on public now when you say\npublic we have some examples right we\nhave Bitcoin we have one of the famous\none which is a theorem we have us so the\nfirst drawback is the option is complex\nmay not be the technology but the terms\nitself so the moment you start learning\nyes it is exciting it's amazing to start\nwhen you try to understand those terms\nwe have consensus we have changed we\nhave nodes - you know so all these\nthings actually create a lot of\nconfusion initially yes the moment you\nstart working on them it will make the\nconcept clear but initially it is\ncomplex the technology itself is damn\ncomplex right because you don't have a\ncentral server you have multiple\nmachines you have to provide\ncoordination there are different\nalgorithms available so in general the\nconcept of blockchain is complex but\nwhen you start working on it you know a\nlot of things will get clearer the\nsecond drawback now when you talk about\npublic blobs an example Bitcoin we have\na theorem the problem is this technology\npromises that they will replace banks\nthey will replace all the great cards\nand debit cards now think about this\nwhen you talk about visa these are can\nhandle thousands of transactions per\nsecond okay\nand that's amazing right every one of us\nuse Visa card and we know how far it is\non the other hand we talk about Bitcoin\nBitcoin uses proof-of-work as the\nalgorithm for consensus\nkento says around seven to ten\ntransactions per second now think about\nthis if you say Bitcoin technology will\nreplace the grade card you have to wait\nso the moment you use Bitcoin there you\nhave to wait for some time right because\nwe have millions of people doing\ntransactions every day so we have to\nhandle that right so Bitcoin cannot\nhandle that speed so the second drawback\nis slow okay I'm not talking about drive\nadoption here I'm focusing on public so\npublic blockchain is slow now the third\none now this is its only focus on\nBitcoin and it didn't because a theorem\nstill use this proof of work now they're\ngoing to talk about Bitcoin and a\ntheorem they are using proof of work\nright and we all know how much energy it\nconsumed to solve a given puzzle because\nnot only one node will be doing it right\nwe have thousands of miners and everyone\nis solving a given problem and the\nperson is of waste of time right because\nthe main thing is transaction we have to\nadd the block of transaction in a\nblockchain but for that we have to do 10\nminutes of work which will consume huge\namount of resources we don't want that\nwe don't want to waste resources so\nthat's the third drawback of blockchain\nlet's go over the fourth one the fourth\none is security or you can say privacy\nnow think about this when we talk about\nBitcoin which is a public blockchain the\nmoment you say public it means the\nblockchain is available for everyone\nanyone can see the blockchain data oh\nthat's scary so let's imagine Naveen is\nsending ten bitcoins to Rahul now in\nthis case everyone knows that nobody is\nsending ten bitcoins to Rahul because\nthat data is available in public\nblockchain see if we have the advantage\nthat the data will be there in the\nblockchain so no one can change it but\neveryone knows how much Bitcoin I have\nsent to Rahul but Bitcoin says hey you\ndon't have to worry about that because\nwe will not distorting Naveen and Rahul\nin the blockchain yes the ten bitcoins\nwill be dead but then Naveen and Rahul\nwill be having a different address and\nthat address will be anonymous so no one\nknows who is exactly sending data to who\nright but they know that some address is\nsending data or some address and I know\nthat some address is me and the whole\nknows that some address is this guy so\nthat's how it works right so it is still\nbut the data is there on the blockchain\nmaybe if you have a company data which\nis confidential it will be available in\npublic blockchain everyone can see that\nmaybe who has sent it to whom is not\ndealt but the data is there in the\nblockchain right so that's one issue\nwith the public blockchain ok and the\nfifth one which is very very important\nnow it is also a part of security now\neveryone sees right doctrine is\nimmutable no one can change it and we\nare safe now we are saying it is safe\nbecause let's say if you have a\nblockchain and if you have 10 - now this\n10 - are responsible to handle the\nblockchain right they will maintain the\nstate of fate we'll be using different\nconsensus algorithm here but what if we\nhave one malicious node ok the moment\nyou say you have one malicious node the\nlimiting 9 will say hey get out from the\nnetwork right because they have the\npower they are the majority but what if\nyou have 6 nodes which are malicious\nthat's where the law starts because\nmajority wins right and that's the one\nof the issue we have in the blockchain\nthat is 51% attack so if you have more\nthan 51% of the nodes which are\nmalicious and if you have the power to\nit they can attack blockchain and here's\nblockchain can be hacked if you have 51%\nstrand so these are the drawbacks of\nblockchain yes we have to focus on the\nbenefits but it's good to know the\ndrawbacks as well right and it will be\nuseful when you debate with some people\nbecause there are people in the world\nwho are saying blockchain is worse\nbecause of this drawbacks you can focus\non benefits and they will focus on\ndrawbacks doesn't matter so what's\nimportant is blockchain is awesome\nlimiting keeping this thing aside but\ndon't worry the drawbacks which we have\ntalked about is for public blockchain\nright on the other hand we also have a\nprivate blockchain and that will solve\nthis issue\nand this video will talk about - later\nnow in the Gosselin's world we have\nheard so many concepts right we have\ntalked about Bitcoin\nwe know the concept of a theorem and\nthen now we have something new which is\nhyper later in fact the amazing thing is\nbetween only three years and is so\nfamous all the big companies maybe Intel\nIBM they are putting their heart in this\nproject so what is hyper nature now as\nper definition on the official website\nit says hybrid ledger is open source\ncollaborative effort created to advance\ncross industry blockchain technologies\nit's a global collaboration hosted by\nLinux Foundation including leaders in\nfinance banking Internet of Things\nsupply chain manufacturing and\ntechnology now that's a big definition\nright so to understand it better you\nhave to understand what hyper ledger is\nnot first of all hyper ledger is not a\nblockchain it's not a company it's not a\ncryptocurrency as well now hyper ledger\nis a project so what happened you know\nwhen you talk about public blockchain we\nhave Bitcoin and we have a theorem now\nthis works because of it is public and\nthen we use a cryptocurrency concept as\nwell yes is a big debate should we use\nBitcoin or not but the thing is\nblockchain technology is solid right\neveryone want to use it so till this\npoint everyone was thinking about we can\nuse blockchain or we can use\ncryptocurrency to change the market but\nthey were talking about b2c which is\nbusiness to consumer but what about b2b\nwhat about enterprise market and of\ncourse right even enterprise market you\nwant to use blockchain how they will use\na theorem the problem is the moment you\ntalk about your theorem all Bitcoin\ntheir public blockchain not secure the\ntransaction is low so there's so many\nissues with public blockchain to solve\nthat problem we got this project which\nis hyper ledger and this is hosted by\nLinux Foundation now if you don't know\nabout Linux Foundation I would recommend\nyou to go to Google and search about it\nthere's so many technologies which are\npart of in us for nation and just\nbecause of them we are using all this\namazing technologies including hyper\nlaser now so hyper laser is new but then\nin just three years hyper laser got so\nmany members from different field may be\nbanking technology aviation\nnow all these companies came together\nand they are working on open source\nprojects so you can imagine hyper\nLedger's umbrella on a greenhouse for\nblockchain open source products now\nsince we have talked about projects\nhyper ledger\nliterally has multiple projects now they\ncan you can divide into do parts we have\nsome frameworks and some tools now if\nyou talk about frameworks we have this\nnumber of frameworks available and the\nmost famous out of this is two in fact\none from Intel sawtooth and the second\none is fabric fabric is one of the\npopular hyper ledger framework not just\nframework we also have tools available\nso you can use these frameworks and\ntools to make your block chain now\nspecifically this can be used to make a\nposition to block channel you can say\nprivate blockchain but then you can also\nviews them for public blockchain so\nthat's the introduction of hyper ledger\nso let me repeat hyper ledger is not a\nblockchain is not a cryptocurrency it is\nsomething different a project in which\nyou have different frameworks using\nwhich you can build block chains\nand in this video we'll talk about smart\ncontracts in fact we'll be writing our\nfirst smart contract so we will be doing\nthis in two videos the first video we\nwill try to set up the environment of\ncourse like if you want to write your\nsmart contracts you need a network not a\nnormal network but it didn't network so\nwe have to connect our machine with\ndetail network that means you have to\ncreate this machine as a full node oh\nthat will be a difficult task right so\nanyway we have to connect with the\nethier network or maybe a test network I\ncan will discuss why do we need a test\nnetwork there so we'll do that first\nthen in the second video we will write\nour first smart point lag not a\ndifficult one a simple one because you\nhave to understand how do you write a\nsmart contract so let's get started so\nthe first thing that we do is we have to\nset up this machine so that you can\nconnect with the etherium Network now in\nyouth in immense well if you want to\nconnect with a 10 Network and if you\nwant to do transactions you have to pay\nsome gas fee ok now it is gas fee so\nwhenever you do a transaction of course\nthe miners want to get rewarded so you\nhave to pay our transition fee and\nnormally we can call them as gas okay so\nthat means before doing any transaction\nonly here network you need ethers you\nhave to buy ethers and then that damn\ncost you to buy now so what to do we\ndon't want to buy anything because we\nare learning what is not contract so in\nthis case what you can do is you can\nwork on test networks so on the test\nnetwork it is not a main network so you\ncan you can use you can use a test\nnetwork here and the advantages you\ndon't have to pay to do the transaction\nbecause we are learning so of course if\nyou want to do real transaction you have\nto move to the Ethernet work not on the\ntest network now what a test network\noption we have but before that you have\nto understand how do you connect this\nmachine to the network it does not\nmatter is it a main network or a test\nnetwork now first of all we have a\nbrowser here right and browser\nnormally works with the centralized\nsystems which we have but what if you\nwant to connect your browser what if you\nwant to run make your browser as a\ndistributed app in this case you have to\nuse a extension so you can see we have a\nbrowser here which is Firefox you can\nuse any browser if you want Chrome or\nopera or\nfolks you have to add a plug-in now\nwhich plug-in I'm talking about this one\nso we have to add a meta mask plug-in\nfor the extension okay so you can see\nthis is me Tomas this that this is the\nofficial website and it says bring it\ninto your browser and that's what take\nnice tagline so we can add add on on\nfirefox or on probe auto para in fact we\nhave this amazing new browser which is\nbrave browser which i'm trying out now\ni'm using it from quite some time now\nthis is good you can also try this and\nthis is this is there some information\nwe have so it's a meta box is a page\nthat allows you to visit the distributed\nweb of tomorrow in your browser today so\nthat's not amazing lines they have but\nthe idea is you can build e apps and you\ncan deploy them with the help of this ok\nbut we do how do we add the plug-in so\nas everyone knows you can simply go to\nhere and you can search for add-ons so\nwe have to go to extensions and we have\nto search for meta masks it will take\nyou to the or it will search for the all\nthe thing and you can see we got I'm a\ndumbass plug-in here or the extension\njust you have to click on add to Firefox\nit will take some time and then you have\nto click on this add so it will add the\nextension to your browser and you can\nsee we got meta mask here so it says\nwelcome to my Tomas so let's continue\nwith this process let's say get started\nnow this is amazing it says new to meta\nmask and the answer is yes so for us we\nare new to meta mask yes I have a meta\nmass account as well but let's do it\nfresh so you can see on the left inside\nit says no I already have a seat for\nphrase you can import your wallet so I\nhave a meta mask on the other machine I\ncan simply import the ethers which I\nhave on that machine so you can click on\nimport here if you have a meta masks\naccount initially if you have it it will\ngive it will ask you for 12 words seed\nphrase which you have to click so they\nwill give you option you have to click\non that since we don't have it so we\nclick we click on create wallet so it\nsays help us improve the meta mas we\ndon't want to do that now you can you\ncan say I agree let's do that here you\ncan still say no thanks but let's let's\ndo that now I'm going to ask you for the\npassword let's keep it simple\nI will use my password here then we have\nto click on create let's just save the\npassword for me and you can see this is\nvery important this is a secret backup\nphrase now this phrase\nvery important because we don't have a\nconcept of it's a to verification so\npassword plus the phrase you can use\nthis too if you want to import the\nwallet or something now I will not be\nclicking on this for you so I will be\npausing this video but you will get a\ntext okay so you might you might get 12\nwords you just have to remember the\nsequence of those words okay so I got\nthose words here and then you can see\nbelow we got this words so those are\nblurred because I don't want to show you\nmy phrase because it is different for\neveryone you know you have to choose\nthose things in a sequence format so you\nthat's what easy thing right so let me\njust say that means do that quickly and\nthen once you are done with this again\nsimply click on current form and that's\nit you got your meta mask account click\nall done and you can see we are\nconnected with the main Network so\nthat's that's done right we are this\nmachine is connected with the e theorem\nmain network how you confirm that you\ncan see we have it here it says main\ntheorem Network and this is your account\ndetails so this is your public address\nwe simply copy this that's what it was\nbasically you can also click on details\nthis is your QR code Vista gave you the\namazing thing is we have this amazing\nwebsite which is a task and dot IO where\nyou can track all your activities by\nusing your address or some other details\nlet's click on this we account on it'll\nscan and you can see this is a fresh new\naccount we don't have any transactions\nso that's great so this is the current\nprice of ether I guess so let's go back\nhere we don't want to do that now how\nwill you get some money because we want\nsome heat all right you can see we got 0\nethos here so you have to buy it if we\ndon't want to do any investment now so\nwhat you do is ensure of working on the\nmain Network we can actually work on\nthis test networks out of all this let's\ngo for incubate test Network let's click\non this and still I got a zero ether\nthat's bad we don't have anything here\nso how do you get ethers ear it's very\nsimple actually you can see we have an\noption of deposit when you click on this\nit will say I want to go for test faucet\nlet's use it for tests obvious again\nether okay do you have to pay not\nexactly so you can see it will show you\nit will could take to take you to the\nwebsite or it has some data here we\ndon't want this let's click on this\ncrypto faucet so this is how you will\nget your free ethers basically so it\nsays if you want to get the eighth\nyou have to share your address on the\nsocial network it can be Twitter Google+\nor Facebook I guess Google+ is not\nrunning anymore so it is Twitter and\nFacebook so let's use that so I use\nFacebook a lot so let's do that okay so\nwhat you do is you just have to copy\nyour network address and you can see for\nme it's here so copy that's my address\nand then I have to go to Facebook so so\nthat's what Facebook account what I will\ndo is I will say I need some it'll you\ncan type anything you want okay they\ndon't get about your text what the kid\nis about your address so let's do that\nin fact I will keep this post for use\nyou can just go to my Facebook and you\ncan check if I have that post there so\nthat's my address and I will click on\nshare so I'm sharing this on Facebook\nlet me just get the address of it one\nway I know about this is how you can get\nthe pols address so you can see we got\nthe address on the bar so that's the\naddress let me just copy it go back to\nyour thing be and this is where you have\nto paste it so let's paste it and click\non give me a third so I want let's say\n80 ethers for three days click on that\nnow it's time for capture it looks like\nI got my ether then just go back to my\ndoing this link be refresh something is\nnot working here because yesterday\nitself I got some it''s on my different\naccount so maybe on one account they\nprovide you it was only for that little\nbit days so I've asked for three days\neither there so I it is not working here\nso what I'm going to do is once this\nvideo gets over I will import that here\nbut then this will work so you try it\nout you will get some eaters here this\nis how you set up your meta mask and you\nwill be getting some it as well here\nwe're getting at approximately 88 Oz or\nyou can use that so you can you can try\nit only Network here you can use R in\nlink be or lob stone so you can just try\nit out now once you got yourself once\nyou got meta mask\nthe next thing is how will you write\nyour code of course we want to write our\ncode somewhere so there is missing\nwebsite you can use here which is so\nresearch for remix etherium this is the\nwebsite you have to go to is a solidity\nIDE which we want we want to write our\nsoy decode right and you can say this\nwill give you a code here which we don't\nwant in fact in the next video we will\nwrite our first mat contract and we will\nbe plating our first excel file which is\nsolid ad programming\nso this is where you can add new files\nyou can see they have two files here we\nwill delete we will delete this and\nwe'll create our own so that's how you\ndo a setup you have you need a meta mask\nbecause you need ethers you need a way\nto connect with a turn Network and the\nsecond thing you'll need IDE so we are\nusing remix the online IDE for salty\nin this video was like all forth\nmy contract in the earlier video we have\ntalked about how can you do the setup\nfor me Tomas and then how do you get\nthat those eaters now there was some\nissue with the eaters we have not\nreceived on this machine but if you have\ntried the same steps you will receive\nsome eaters the problem was two days\nback I have asked for the eaters with\nthe same Facebook account\nmaybe that's the issue so now I did with\nTwitter so I got three eaters I guess if\nI go to my Thomas you can see we got\nthree eaters and tagged to entrain B\nNetwork so that's great let's use that\nokay so let's go to the remix IDE and\nyou can see the font is not that visible\nfirst of all I will delete these two\nthings we don't want their code we want\nto get our oh one so let's do that and\nyou can see the it's clean so we got a\nclean slate it's just that how do we\nincrease the font size for this but\nthere's a way here you can see we can\nsee plus sign and you can now another\nthink it is visible let's create our\nfirst file but then what we will be\ndoing in this let's make a bank balance\non bank account so what you doing bank\naccount is you add money and you\nwithdraw money that's what we want to do\na simple task so we'll be having a bank\naccount where you'll be having a balance\nand then we might add a balance of a we\nmight withdraw the balance so we can say\ndeposit or withdraw let's do that so\nlet's create our first file so we'll\nclick on plus here and we'll give them\nname as let's say Bank dot s o L so I\nsaw is for Sol for sorry D let's click\non OK and you can see we call our file\nhere we can type a code now okay so what\nto do now first of all we have to set up\ncompiler levels\nnow this compiled level here as we get\nnew updates possibility the syntax might\nchange we might get some new features\nbut let's stick to the older version of\ncompiler which always works and then how\ndo you decide that so the way you can do\nthat is by saying drag drag mouth and\nthen you have to mention the language\nname which is we are using solidity and\nthen if you have to mention the version\nnumber if I go back here you can see we\nhave a list of compiler we can use from\nwe have five point zero point seven all\nthis thing will work but let's stick to\nthose things which everyone uses\nnowadays which is zero point four point\ntwo five or so let's mention that 0.4\npoint two five okay so we have defining\nthe compile level now the next thing is\nwe have to\nour contract that's what you want to do\nright but then what witness syntax of it\nnow first of all solidity is derived\nfrom JavaScript so if you know\nJavaScript well this is damn easy even\nif you know Java it's almost same as\ngetting a class so let's go with that\nthose steps so let's create our first\ncontract so let's say if you want to say\ncontract you have to say contract then\nwe have to mention the name of the\ncontract so in this case I will stick\nwith bank let's create a contract for\nbank or we can say bank transaction\nthere is no need to have a same name as\nyour file name here we can have any name\ndoesn't matter ok now we need a variable\nnow why do we need a variable so when a\nname is the place where you can hold a\ndata now first of all if you say bank we\nwill be having an account there and\nevery account will have a balance so\nlet's say ain't bad or we can say\nbalanced state is a datatype so the\nbalance of balances of time 8 we can\nalso go for it double if you have it if\nyou can if you want that let's stick to\nInc here now once we got a contract once\nwe got a variable ain't now if you go\nfrom job background or JavaScript\nbackground sorry I mean I'm assuming\nthat you know at least one\nobject-oriented programming language it\ncan be too sharp JavaScript Java PHP\nPython that's your choice\nso here what do I do is I'm going to\ncreate a punch structure again not\ncompulsory but let's do that so we'll do\nis I would say constructor now how do we\ncreate a constructor in Java and in\nother language what we do is we use a\nclass thing but here we have to say\nconstructor and then you have to give a\npackage we have to also mention the\nspecifier or the access level of this so\nwhen you say public it is accessible\nfrom anywhere and that's real because\nJava in Java we write it on left-hand\nside and that makes much more sense\nright you will get used to it and let me\njust set the balance necessary to let's\nsay 1 so I want everyone to have a\nbalance at least off one dollar or one\nrupee whatever ok so once you get a\nconstructor we need to get a method\nnothing about this when you say a\nbalance of course we get an option of\ndepositing the money we draw the money\nall we want to check the balance right\nso let's create those functions now if\nyou want to perform those operations we\nhave to get functions okay so three\nfunctions right let's create done if you\nwant to be the function you have to say\nfunction ok but what should use function\nname\ninitially I want to get the balance so\nlet's do that so we'll say get balance\nI'm just using canvassing rules here\nbecause I'm confirm job\nlet's save the function name and this\nfunction will get down balance it look\nlike a normal programming language right\nwe have done this before so we can\nsimply save returns ballad written\nbalanced that's one method we have our\nfunction we have let's get one more\nfunction which is for we draw so I will\nsay withdraw now when you say we draw of\ncourse we have to also pass the amount\nlike how much amount you want to\nwithdraw so in this case I would say H\namount that's my variable name and here\nas well we'll say balance is equal to\nbalance we have to be able to analyze\nthat we have to remove the money so it's\na balance equal to balance - amount but\nare we missing something yes every\nmethod or every function need to have a\nspecify so it's a public and here as\nwell I will say public that's done now\nhere we have to create one more method\nwhich is for depositing money so I will\nsay function deposit again if you have\nto specify the amount because how much I\nmoney when you put deposit let's mention\npublic there which is this specifier and\nhere I will say balance is equal to\nbalance because when you say deposit\nyou're adding the money right so we'll\nsay balance plus amount a very simple\none right\nbut will this work there are certain\nchanges the first one is when you say\nthese two methods withdraw and deposit\nthey are changing the value of your\nobject now maybe when you look at these\ntwo function which is withdraw and\ndeposit they are changing the value of\nyour balance that means they are doing\nsome operations there but what about\nthis get balance so this get balance is\nnot changing any value right so in this\ncase what you can do is you can mention\nthis as of view so when you say view it\nmeans this is only for fetching value\nthis will not be mind updating the data\nso we can save you and then since it\nalso returns the value what you can do\nhere is we can say returns we have to\nalso mention the type what it return so\nwe're to say turns Inc\nand that's done nothing mode here this\none over here which says we have to\nchange it to pragma zero zero point four\npoint so it said let's change the\ncompile number here and we'll set zero\npoint four point two five so tournesol\nthat was the issue with the new version\nso you can see the older version we have\nzero point four point two five in fact\nwe will also use the newer versions in\nthe later videos but here this one works\nyou can see there is no compile time\nerror now once you have done with the\ncode it's time to come by\nthat's how you convert your according to\na bite good on our opcode this opcode\nwill work on your virtual machine or on\nthe attend Network so whatever we do is\nI will say start to compile and this\nwill come bad it I don't think there is\na issue here\nI may be able simply use auto compile\nthis should work I guess it is compile\nthere is no issue now how do you run\nthis code put on this code we have to\nclick on this run tab and you can see\nthe moment you click on run tab we have\nan option here so you can see\nenvironment the first environment here\nis JavaScript via now at this VM so this\nVM will work run on your browser itself\nand that's what we said you know you can\nuse meta mas to create environment in\nyour machine itself so you can see\nwhatever code you are I think here will\nrun on the same machine now once you\nselect your VM you have to also select\nthe file you're working with so you can\nsee we are working with bank you might\nhave multiple files here and then click\nyou have to click on deploy the moment\nyou click on deploy here you can see we\ngot some options here when you grows\nwhen you scroll up it will mention\neverything the hash value from to then\nthe gas it requires for the transaction\nand everything so you can see we've got\nall the tails here\nokay that means your app is deployed but\nwe have to run this right how do you\nlearn this so you can see we have an\noption here of deployed contracts let's\nexpand it and you can see we got three\nbuttons out of which this two has a same\ncolor because they are changing the\nvalue of balance and this one is not\nchanging the value that's why it is a\ndifferent color first of all let me\nclick on get balance and you can see the\nbalance is one o y1 because the default\nvalue we are given is 1 that's great\nlet's deposit some money before we're\ndrawing let me deposit 100 click on\ndeposit I don't know if it is done or\nnot let's look let's click on balance\nand you can see we call it the balance\nthat is 1 0 1 that's great let me just\nredraw some amount let me withdraw 80\nclick ok first you have to click on\nwithdraw we do not done get balance 21\nand if you can see everything is\nhappening so fast because everything is\nhappening in your machine not on the\nmain Network the moment you do that may\nnot work it will take some time okay so\nhere you can see every time you face the\nbalance it will do some transaction and\none more thing every time you do some\ncalculations here example if I add 400\nif I say deposit it is consuming some\ngas ok it is it is charging some gas\nin your machine it is your environment\nyou're the boss that's what is\neverything is working\nin this video we'll continue from where\nwe left in the last video so the last\nway we have talked about the smart\ncontract right in fact we have written\nour first smart contract and then it was\nrunning on the local JavaScript virtual\nmachine so if you look at the\nenvironment we have Java JavaScript\nvirtual machine and then if you are\ngetting some addresses we will record\nsome five address and then we can use\nany of it to deploy the application and\nonce you deploy it you can just test it\nby depositing money or by withdrawing\nmoney but how about if you want to run\nthe same thing on the test network so I\ndon't want to run this on the JavaScript\nVM because that's a local we want to run\nthat on a test network or maybe on the\nmain network so if you want to achieve\nthat we have to use injected web 3 the\nmoment you select that you can see the\ndefault option which I've got here is\nring B why is because in the meta mask\nthese accounts are actually getting\nfetched from the meta mask right so if\nyou expand this meta mask you can see we\nhave link bit text network here let me\nswitch the account so you can see this\nis winged bit test network and I have\nthree ethers here I can use this for the\ntransactions in fact you can also move\nfrom ring B to main network the moment\nyou do that you can see it will ask you\nfor the reloading of the page so let's\nreload the page and here against done\nlet's go back to run and you can see in\nthe web 3 if we select in jQuery you got\none address because this is your main\nnetwork now so that's how you can switch\nso you just have to switch from it amass\nthat's the only option you have so go\nback here we don't want to work on main\nit work because we don't have the\ncurrency so let's switch to language\nNetwork let's reload it yeah that's the\ninject web 3 and they say they account\nso you've got only one address because I\nonly have one Accord I guess I have two\naccounts but you can say which one you\nwant ok now I want to deploy this on a\nlink be test network so if you want to\nachieve that you have to select the code\nwe are working with we are working with\nbank let's click on deploy the moment\nyou deploy it it will be done on the\ntest network right which is running or\nas a actual network so of course you\nhave to spend it's some ethers\nokay you are not buying those eaters by\nthe way we are using the theatres if you\nremember so we had to spend those ethers\neven for deployment so when you deploy\nit you have to pay the eaters but then\nevery time someone else is using your\nnetwork they will pay for the ethers if\nevery time they do transactions with\nyour application they will be paying for\nthe gas fee\nso here the moment you do that it will\npop up the meta meta mass notification\nwe will say okay I confirm this let's\nclick on confirm and you can see it will\nget deployed on this address so let's\nclick on this address here it will take\nyou to it as scan dot IO and you can see\nthis is a test network so you can set up\na way to do that it was it still says it\nis pending because it takes some time\nfor it to get mind I guess it is done\nlet me just refresh this page you can\nsee these success now so it was\ninitially it was pending now it is\nsuccess is you god this is the address\nfrom - you will see all the it will see\nthat's a block number anything else this\nis your hash let's go back to the mix\nand you can see it is deployed so this\nis your deploy point right so let's go\nback here\nand we can perform operation get\nbalanced will not not charge you\nanything so you can see balance is one\nthat's what we have done in the code let\nme just zoom a code a so it is\nthat's one that's your balance but if I\nwant to deposit some money let's say I\nwant to deposit 300 the moment I click\non deposit here again it will charge you\nright because you are doing that\ntransaction which will change values so\nyou have to pay the gas phase so you\nhave to click on confirm so this is\nimportant right it will give you a\nnotification but in case if you have\nnotifications blocked in your browser\nsometime it happens with me as well so\nyou have to just go here and it will\nshow to confirm or not but since it is\nworking on my machine I will do that so\nI was a deposit I was a confirm and it\nshould be done again it takes some time\nyou can see if I say get balance now\nstill the balance is 1 because it takes\nsome time to deploy so you can see we\ngot the consumption now so let's click\non get balance and you can see this 3 0\n1 now you can also do a bit draw let's\nsay I want to be draw 1 0 1 let's click\non fit draw again as you can guess if\nyou have to pay for the gas fee let's do\nthat ok again it will take some time\nlet's verify if it is still pending or\ndone so you can sit is it says it is\npending you will get this link in the\nconsole just\non that and you will see this page in\nfact your browser will also give you\nnotification once it is confirmed so\nlet's wait okay so when you click on get\n- now we got 200 so that's how it works\nthat's how you can use your test network\nthe only thing is we will not we don't\nwant to spend money on the main network\nand that's why we are using ring B but\nthe same thing will work on the main\nNetwork if you consider that so just go\nback to meta mask switch back to main\nnetwork buy some meters and you're good\nto go and if you can see initially we\nwill having around 3 this and now we\nhave 2 point 9 9 9 8 eaters so yes we\nhave spent some ether 0 so that's what\nwe can use ring B Network to test the\napplication so I hope you got some idea\nin this video how do you work with ring\nbe with your remix in the next video\nwe'll do something amazing in fact in\nthe next video we'll try to connect the\nfront end with this blockchain so when\nyou say front end the normal web page\nmay be a simple web page which will\nconnect with this blockchain\nand this video is trying to connect the\nsmart contract which we have done before\nwith the front end so when you say\ntrying 10 it can be a normal search page\nor it can be a Android application but\nas of now just to keep it simple because\nit isn't supports that let's stick to\nthe webpage development so if we will\ncreate a simple web page and we'll try\nto connect that to a smart contract but\nwhy nothing about this thing when you\nsay blockchain we'll be replacing a lot\nof different technologies right\ncompanies are moving from this\ncentralized system to distributed\nsystems so yes it is changing a lot in\nterms of enterprise network it is\nchanging in terms of currency market but\nwhat about normal companies so let's\ntalk about Facebook so if you think\nabout Facebook Facebook has a server\nright as AI user what we do we we access\nthose pages so on our laptop we see a\nscreen which is maybe a login page or\nthe messages page or the feeds and then\nthose data is actually coming from the\nactual server so what our processing is\nhappening is on this server right but\nthe amazing thing is as a user we don't\neven know what technology they are using\nin the backend are they using node.js\nwe are not sure are they using PHP Java\nISP we don't care what we care is as a\nuser we are able to access of a data now\neven if in future Facebook is changing\nthat technology the centralized\napplication to a distributed system will\nit affect us that's the question because\nthe moment you change the server's the\nmoment you talk about you know all the\nfirst thing will be done on smart\ncontracts on blockchain\nso as a user do we get the same page or\nthe different page and that's the\nquestion I was having in my mind from a\nlong time and the answer is you will get\nthe same page because the front-end will\nnot change the only the backend part is\nchanging so in this example I will try\nto prove that so whatever we are doing\nhere so if you see this cost pot\ncontract what we are doing is we are\ntrying to withdraw the money we are\ntrying to deposit the money we are\ntrying to get the balance but then we\nare able to access this functionality\nwith this buttons right but think about\na normal application as a user you want\nto access a web page where you will do\nall this operation not on this type of\nscreen where you can see the code as\nwell\nso I want to be just a fit page where I\ncan see this let's get started\nso the first thing you need is you have\nto understand certain terms the first\none is if you go to compile we have a\nconcept of API here and if you click on\ndetails you can see we have ABI and this\na B highs it has certain jason codes if\nyou can see that this is a basic\nadjacent code when you expand it so we\nwill need this thing when you want to\nconnect your webpage with the with the\nsmart contract so we require two things\nthe first one we need is API and the\nsecond thing we'll need is if you go to\nrun this address I have deployed in and\nring B so if you have nots in the\nprevious video I would suggest do that\nbecause we have created your smart\ncontract if we have connected with this\nduring the test network so we got decide\nto assign so this is important so we\nneed two things the API and this\nparticular address now once you have\nthat let's get started but before that\nwe have we need one more thing in fact\nwe need some certain things we need a\ngood IDE so you can use any HTML ID you\nwant you can use Visual Studio code you\ncan use Act item you can use sublime\nthat's your choice I'll be using we just\nrodeo here so let me open vs so that's\nmy visual studio goal so if you don't\nhave this idea in your machine in fact\nyou can use any idea you boy you can\nalso use eclipse netbeans if you have\nyou also need a server because we will\nbe running the page like so we got a\nvisual studio code if you don't have it\nyou can simply go to google and search\nfor visual studio code download and this\nis where you will get the setup this\ndoesn't matter as it Mac Linux or\nWindows have it has all the options but\nnot difficult just say next next next\nwill here work will return so once this\nis done the next thing you need is NPM\nbecause see this when you type the code\nyou also want to run it right so you\nwant to run your HTML which will be also\nhaving jQuery so if you want to run that\nyou need a simple server where you can\nhost it you can also have a web server\non the web server or the actual web\nserver or you can also have that on your\nlocal machine so you can use different\nservers available we have light so we\nhave HTTP server so you can install HTTP\nserver here but then for that I'll be\nusing NPM so\ninstall NPM so you can just go here and\nsearch for NPM download and you can just\ngo here you can\nit depend upon which you have again and\neasy setup nothing - nothing to worry\nabout the only thing is once you have\ndownloaded it just go to Program Files\ngo to that software NPM our node copy\nthe path and go back to environment\nvariables and set the path I hope you\nknow how to do that it's very simple\nactually you can just google it now once\nyou have your visual studio and NPM\nready let's install the HTTP server so\ngo back to visual studio now how do we\ninstall this server so we can use NPM\nright and then I have also set the path\nmake sure that after it after setting\nthe path restart your vision studio\nso just click on terminal click on new\nterminal and this is where you will see\nthe terminal area now based on what OS\nyou are using if you're using Mac on the\nnext you will see terminal actual\nterminal this is a command prompt which\nwe are they calling terminal doesn't\nmatter\nin fact Oh before opening terminal make\nsure you create a folder so in your on\nyour desktop or on the in documents make\nsure you have a folder where you will\nput this file so I do have a folder i've\ncreated a folder which is Bank web app a\nblank folder empty folder so you can see\nI have a folder which is web a bank web\napp just like that you can see it's\nempty now once I got this folder in this\nfolder I want to create a page right so\nwe'll do that but then you can see we\ngot a terminal so I wanted that path\nhere so I don't want to go there go\nthere manually so we got a path we got a\nfolder this is where you will write a\ncode right this is where I want to\ninstall HTTP server so I will say npm\ninstall so i want to make it globally\nand the software name is actually pasaba\nlet's say click now the amazing thing is\nI do have this set up so it will take\nless time for you it make it might take\nmore time once we go out here and\nactually PC server the next step is you\nhave to start it so the way you do that\nis by saying HTTP server the moment you\nsay enter it will take some time and you\ncan see your server has started and it\nis started on this URL which is\nlocalhost colon 8080 so in order to\naccess that just go to your browser I\nwill say localhost colon 8080\nok you can see the server is running\nthat's your node server but I want to\nreplace this with my page so let's go\nback here and let's create a simple file\nclick on this and\nI want to find them to be index dot HTML\nyou can have any phylum doesn't matter\nactually and let's get started the first\nthing you need is HTML tags the type of\nUI we need is we need a text field where\nyou can enter the amount and then you\nwill be getting Witten's like withdraw\nor deposit i had this code with me so\njust pasted it here just to save time so\nyou can see we got an input text field\nand then we got three tank where you can\nshow the balance and then we got two\nbuttons deposit and we draw now once you\nhave this body with you it's time to\nperform operations so let's see this is\ncoming as a normal text so if you live\nfish now you can see we got a different\nUI in fact the balance is empty that's\nwhat you can't see anything but you can\nenter some values and you can click on\ndeposit nothing will happen because we\nhave not put it right so we will click\ndeposit\nit should be deposited in the actual\nsmart contract which we are running this\none and then we can be dropped from that\nso let's do that but then we will be\nperforming operations on the buttons\nright so that's why we need to you walk\nwith jQuery so that's one thing second\nthing is how will you connect your web\napplication or your web page with the\nepin of blockchain and that's where we\ngot this amazing library named as web 3\nso if you can just go to google and\nsearch for web 3 so this is the web play\ngithub link and they have the notes as\nwell so you can see it's an API between\nthe atheneum blockchain and your\napplication so we can use it in fact you\ncan also install this on your machine\nusing NPM odd we can use it as your\nJavaScript library so in this example I\nwill use the JavaScript library which\nthey provide in order to do that what\nyou can do is you can say download web\n3.0 so when you click on download you\ncan it will take you to the link you can\ndownload it from there or in fact this\nis also issue with the proper version\nyou know if you have to cover 1.0 or we\nwill be going for developer version so\nthat's one thing otherwise what you can\ndo is I will provide you the link Sirian\nfor the web 3 you can use that because\nthat is working I don't know this was\nnot working when I tried it the download\nmaybe there were some works you have to\nyou know maybe when you are trying it it\nwill work because they are always doing\nsome updates and there might be some bug\nwhen I tried it you can try mining which\nis working\nthose two script one for jQuery and one\nfor web three so that's done I have to\nadd a to script here one for you can see\none is for web three and second is for\nthe jQuery now once we have done that we\nneed to perform certain operations now\nthe first one we need is the moment you\nload this page I want to show the\nbalance whatever balance is there in the\nblockchain right in fact it gives check\nonce what is the balance I have there so\nif you can go here and if I say get\nbalance so the current balance is 200 I\nwant to fetch this so how do we do it\nthe first thing you need is a script tag\nso I will say script and inside this\nprepped now if you want to connect with\na contractor smart contract let's create\nan object which will hold it so I will\nsay contract and then I'm going to fetch\nthe contract details only when the page\nis loaded and the way you do that is by\nsaying dollar document ready so anyway\nit is ready let's perform the function\nlet's perform the operations here so\nwhat we need whenever the function\nwhenever your page is ready I want to\nfirst create the object all I have to\ninitialize the object of web click OK\nbut then from where you will get this so\nin the insert the syntax is very simple\nits web 3 is equal to we have to say new\nweb 3 because that's how you instantiate\nthe objects and in bracket we have to\nspecify the current provider because we\nare using my Tomas which is connected\nwith the ring B so that's all provided\nright so let's use that so I will say\nweb 3.1 provider it depends what you are\nusing here so if you are using injected\nprovider you can use this in fact if you\nsee we have other options as well so if\nyou click on this you can see we have\none more option of web 3 provider that's\nwhere you you can use Ganesh as a CLI\nbut as of now let's stick to current\nprovider now this object which is web\ntree here you know that's a confusion\npart right we have object initialization\nhere and then we are creating the object\nso this Web is actually coming from the\nlibrary which we have used about ok now\nonce we have done this the next thing we\nneed to issue eyes is the contract right\nwe have also be able to do using\ncontract here so we have to initialize\nthis particular object and the way you\ndo that is by saying new we have the\nobject which is web 3 in this you can\nsimply say it which is theorem and then\ndot you have to say contract that's how\nyou create the object so contract is a\nclass of which are getting object here\nbut unfortunately or D fortunately this\ncontract will ask you for two parameters\nremember we have talked about this\nbefore you need a bi and you need the\naddress of course I'd which smart want\nto get talking about so this particular\napplication will work with our smart\n right so if they specify two things\nthe ABI and the address so what I will\ndo here is I will create two variables\nfirst variable I will say address but\nfrom value we get this address so I will\nbe getting this address from here so go\nback to a smart contract just pop it you\ncan see we have an option of copy go\nback here and say paste so that's what\naddress\nthe next thing we need is a bi and from\nwhere you will get the ABI so you will\nget it from here so go back to compile\ndetails and you can simply click on copy\nhere you don't have to exactly expand\nthis and copy say copy go back here and\npaste before the semicolon and I guess\nour job is done no I should be\nminimizing it so that it will not waste\none of lines so yeah you can see we have\naddress and we got ABI and we just have\nto pass it here so the first thing you\nhave to pass is ABI and the second thing\nhave to pass is address done so we have\ndone two things though ABI is done\naddress is done now what next see once\nwe got the contact object now we have to\nfetch the balance in the contract how\nwill you do that so in order to do that\nwe will be saying contract dot now this\ncontract will have such methods right we\nhave three methods actually so let's say\nmethods dot so if you want to fetch data\nthe method which we have used here if I\ngo back to code so if the method name is\nget balance where you have to call this\nmethod so I will go back to methods I\nwill say get balance\nnow this get balance if you want to call\nit there's a method which is named as\ncalled because you're calling it right\nand you're expecting a value so you will\nsay call and then here actually this\nthis call will to return you a promise\nand if you want to fetch the value if\nyou have to set then and then whatever\nvalue it is returning it will go into a\nfunction this is basically a JavaScript\ncode so I'm not here to explain it\noutside if you want to know more about\nJavaScript just go to this channel we\nhave a JavaScript ladies just watch that\nbut here the idea is this will give you\na promise and if you want to face data\nyou have to set then and in this\nfunction you have to say you can use any\nvariable I will say balance whatever\nwhatever variable name you can use okay\nso in this I'll be fetching the balance\nright so once we've got the bag\nwe will assign that to this particular\nidea which is balanced right so if you\nwant to do that you will just come here\nand and say dollar let's fetch that\nparticular ID and the way to do that is\nby saying hash balance dot HTML and in\nthis you will pass the balance that's it\nthat's the only thing you have to do\nonce your page is loaded you just want\nto face the balance right that's what we\nwanted just save this I hope this will\nwork otherwise we have to debug the\napplication that's what we do always\nlet's refresh this page and something is\nhappening okay so that we got 200 right\nthat's an amazing thing right let's say\ninspect element let's go to console and\nlet's see what is happening there so\nI'll go back here I will say refresh you\ncan see there is no error and you got\nyour 200 so that's great\nthis value is actually coming from the\nblob chain or the this mark point right\nso this is working but what about\ndepositing and withdrawal so let's say\nif I say 300 if I click on deposit I\nwant this 20 to go to the smart contract\nsave the data add a block in the\nblockchain and then the value here it\nshould be 500 how do you do that that\nyou will say in the next video\nlet's complete the code which we have\nstarted earlier so till this point what\nwe have done is if you go back here you\ncan see many would you try to reference\nthis page it will fetch the balance from\nthe blockchain so we have a smart\ncontract here and the current value if\nyou can see if I say get balance it is\n200 but what I want here is if I go back\nand if I say hey I want to add another\n300 so I want to deposit that money it\nshould work right so if I go back here\nand if I say hey get me the balance it\nshould say 500 but how do you do that so\nyou know how to achieve that we have to\ngo back here in fact in the smart\ncontract we have a method which is\ndeposit so the thing is whenever you\nclick that button on the front end so\nwhen you click on this button I want to\ncall this particular method here or\nfunction here so in order to achieve\nthat we have to make that particular\nbutton work so the button name here is\nthe button ID here is deposit so we want\nto perform the operation when you click\non this one and in jaskate if you want\nto achieve that it's very simple you\njust have to say dollar and the idea\nhere is deposit so we are clicking all\nthat rent so we said click and then when\nyou click on this it will perform or\nfunction it will call the function so we\nsay function and in this function let's\ndo that operation so whenever you click\non this button deposit it will call this\nparticular function now in this function\nwhat we want is first of all we want to\nfetch the value which is entered in a\ntext field right if you remember we have\na text field here which is our text box\nhere which is amount I want to fetch\ndata from that and of course we have to\nsave it somewhere so let's save it in\namount initially the amount will be 0\nnow before fetching the value in fact we\ncan fetch the value you say amount equal\nto so we'll say Pass inch and in bracket\nwe have to pass that particular ID so\nwe'll say dollar hash amount and here\nyou will say Val that's how you face the\nvalue we have to also convert that into\ninteger and that's why we are saying\npercent so once we got the value once we\nhave converted into a amount so we got\namount right but now I want to call a\nparticular function now even before\ncalling a function we to get B hold on\nthe accounts of course right when you\nsay we draw when you say deposit you\nread the whole on the account in order\nto do that we'll simply say web dot of a\nplease web 3.0 say eth dot so the method\nname is get account now this get\naccounts will give you the accounts but\nthat will be a promise and if you want\nto face the value you will say then and\nthen you will create a function we want\nanonymous function and this function\nwill it get all the accounts so let's\nsay if you have five icons it will get\nall the accounts but we don't want all\nthe accounts so why do we want only one\nso let's fetch that one so out of all\nthe accounts it will provide you we want\nto get the first account and the way you\ndo that is by saying where let's get\naccount ACC equal to and the way you\nFrench that is by saying accounts we\nwant the first one so we can use an\nadder because normally this accounts\nwill be having an array so we want the\nfirst account here now once we got the\naccount we just need to call our method\nwhich is deposit okay so it's very\nsimple in fact the thing is this is a\ncallback function so we have to say\nreturn contract as the object we have\ncontract dots and we have done this\nbefore right so if you want to call this\nmethods we have to say contract dot\nmethods dot the method name which we are\nworking with is deposit let's use that\nand in this deposit we have to pass the\namount remember we have this amount\nvariable here 50 pass it here and then\ninstead of saying all we have to say\nsend and in this send you have to also\nmention the account from which account\nyou want to send and so within the\ncountry packets you will say from : and\nyou will say account because that's\nimportant right the account number and I\nguess it is done so yeah so this one\nthis one will give you the accounts and\nfrom that account you are sending it but\nwhat will happen when you send it there\nshould be some response right it should\nreturn you something so it will return\nyou a promise so if you want to face the\nvalue from that you will say in fact in\nthat promise you will be having two\nthings either it will be success or it\nwill be a failure right I mean errors so\nin the success case we'll say then\nfunction of course we will get something\nso I will say we got some data will be a\ntransition heater service ATX so once we\ngot this function now what we want we\nwant to print whatever transition\nhappens in the console so we can say\nconsole dot log and here we'll say TX so\nI just want to log it\nwhatever happened now once that is done\nI also want to go for the worst case\nscenario which is sketch what if what if\nsomething goes wrong in this case also\nwill write a function T X and this will\nsay console dot log and this will be T X\nthat's it so we are sending the request\nhere we are sending that method we are\nsending the amount as well and then we\nare and we are accepting the value we\nare accepting errors so that's great\nlet's save this code I think it's done\nthat's now deposit works let's go back\nto the browser\nand here let's say refresh and you can\nsee that's the balance is the balance is\n200 let's say 3 or 300 I want to deposit\nthat amount and that's great something\nis working you can see it is asking you\nfor the permission that means the\ndeposit button is working but will it\nget success on this server that's\nimportant to know you can see nothing is\nhappening everything is hanged okay the\nthing is when you do this the the\ntransaction is in in the pending state\nright it will go there it will get the\nblock it will it will get mined by the\nminer so it will take some time so we\njust have to wait for it and of course\nwe will get your result in the console\nand you can see that we got it here so\nwe got the block hash block number we\ngot all the digits which we wanted and\nnow if i refresh this page look at the\nbalance we got 500 in fact you can\nverify by going to solid e and you can\nsay get balance and that's 504 you it's\nquite simple white now what about\nwithdraw we want to make it make that\none work as well so I want to make this\nwith your work so when I say hundred and\nif I say we draw it should remove that\namount in order to do that we can simply\ncopy paste this because that's where we\nare expert off so let's copy and paste\nit and this is where you will say hey\nthis is not deposit this is for withdraw\nthe amount thing will be same we need to\nget the accounts we need to pause the\naccount the method name will be withdraw\nof course and I guess job is done so\nthat was the deposit and this is\nwithdraw almost same code right let's\nsave this and go back to the server and\nclick on maybe just have to refresh it\nonce and click on 100 click on withdraw\nok so you're asking for the permission\nthat is meta master\nvacation which we love click on confirm\nproblem solved I guess yes it is it is\nit went to this server I mean the\nblockchain or the server that's a long\nterm here it went to the blockchain\nNetwork which is ringman Network and\nthen record the recording mind block and\nthat's the new block which you got ok\nbut the question is do have you got the\nupdated value let's refresh and yes we\ngot 400 that's so easy right we just\nhave we're just we have a smart contract\nhere and we created this front-end with\ntwo buttons deposit and withdraw and we\nare able to perform that and that's the\nbeauty right as a client we don't even\nknow that what is happening behind the\nscene is it Facebook or something we're\nnot we don't care about it so that's how\nyou work with this smart contract with a\nfront-end so I hope you are enjoying\nthis is written in the comment section\nand do subscribe for other videos\n",
  "words": [
    "music",
    "blockchain",
    "much",
    "hype",
    "say",
    "next",
    "big",
    "thing",
    "industry",
    "blockchain",
    "internet",
    "affected",
    "major",
    "industries",
    "thing",
    "blockchain",
    "also",
    "affecting",
    "sure",
    "maybe",
    "next",
    "two",
    "years",
    "three",
    "five",
    "years",
    "option",
    "blockchain",
    "important",
    "let",
    "get",
    "started",
    "welcome",
    "back",
    "aliens",
    "minus",
    "720",
    "let",
    "get",
    "start",
    "blockchain",
    "heard",
    "bitcoins",
    "might",
    "heard",
    "blockchain",
    "well",
    "work",
    "bitcoin",
    "started",
    "2008",
    "pseudo",
    "name",
    "may",
    "one",
    "may",
    "one",
    "person",
    "may",
    "group",
    "people",
    "pseudonym",
    "satoshi",
    "nakamoto",
    "person",
    "say",
    "see",
    "pseudo",
    "name",
    "created",
    "bitcoins",
    "blockchain",
    "technology",
    "behind",
    "bit",
    "points",
    "blockchain",
    "exactly",
    "doctrine",
    "gives",
    "talk",
    "bitcoins",
    "basically",
    "digital",
    "currency",
    "right",
    "works",
    "network",
    "also",
    "call",
    "distributed",
    "systems",
    "central",
    "system",
    "example",
    "wanted",
    "ask",
    "money",
    "bank",
    "bitcoins",
    "central",
    "bank",
    "right",
    "everything",
    "distributed",
    "talk",
    "distribute",
    "one",
    "problem",
    "first",
    "problem",
    "security",
    "second",
    "problem",
    "trust",
    "trust",
    "technology",
    "much",
    "security",
    "one",
    "solution",
    "security",
    "use",
    "cryptography",
    "right",
    "use",
    "concept",
    "asymmetric",
    "cryptography",
    "achieve",
    "security",
    "trust",
    "trust",
    "someone",
    "sending",
    "data",
    "sending",
    "money",
    "trust",
    "data",
    "available",
    "internet",
    "say",
    "entire",
    "internet",
    "one",
    "person",
    "transferring",
    "money",
    "person",
    "maintaining",
    "database",
    "big",
    "issue",
    "right",
    "say",
    "transfer",
    "five",
    "bitcoins",
    "sure",
    "five",
    "bitcoins",
    "five",
    "bitcoins",
    "sent",
    "maintaining",
    "system",
    "ledger",
    "comes",
    "picture",
    "later",
    "normal",
    "database",
    "thinking",
    "central",
    "database",
    "oh",
    "problem",
    "talking",
    "distributed",
    "system",
    "right",
    "distributed",
    "need",
    "something",
    "central",
    "ok",
    "one",
    "problem",
    "every",
    "node",
    "node",
    "let",
    "say",
    "five",
    "people",
    "working",
    "bitcoins",
    "five",
    "people",
    "network",
    "every",
    "machine",
    "called",
    "nodal",
    "maintain",
    "ledger",
    "every",
    "machine",
    "trust",
    "one",
    "problem",
    "ledger",
    "anyone",
    "tamper",
    "right",
    "confusing",
    "getting",
    "confuse",
    "ledger",
    "imagine",
    "simple",
    "database",
    "imagine",
    "simple",
    "file",
    "excel",
    "file",
    "file",
    "txt",
    "file",
    "txt",
    "file",
    "anyone",
    "change",
    "data",
    "okay",
    "thing",
    "let",
    "say",
    "talk",
    "government",
    "okay",
    "let",
    "say",
    "government",
    "got",
    "production",
    "side",
    "everyone",
    "want",
    "stop",
    "corruptions",
    "one",
    "way",
    "look",
    "database",
    "whatever",
    "worked",
    "everything",
    "stored",
    "database",
    "right",
    "normal",
    "people",
    "see",
    "database",
    "power",
    "change",
    "debase",
    "right",
    "change",
    "history",
    "database",
    "okay",
    "want",
    "something",
    "changed",
    "want",
    "ledger",
    "available",
    "every",
    "machine",
    "one",
    "able",
    "change",
    "blockchain",
    "comes",
    "picture",
    "save",
    "data",
    "blockchain",
    "one",
    "change",
    "even",
    "someone",
    "changes",
    "know",
    "something",
    "changed",
    "let",
    "unless",
    "try",
    "understand",
    "concept",
    "happens",
    "blockchain",
    "list",
    "blocks",
    "okay",
    "let",
    "talk",
    "one",
    "block",
    "talk",
    "bitcoins",
    "bitcoins",
    "lot",
    "transactions",
    "transaction",
    "become",
    "one",
    "block",
    "bitcoin",
    "use",
    "thick",
    "concept",
    "anywhere",
    "else",
    "yes",
    "also",
    "use",
    "data",
    "personal",
    "information",
    "use",
    "block",
    "facebook",
    "data",
    "right",
    "store",
    "anything",
    "literally",
    "anything",
    "block",
    "bitcoins",
    "store",
    "transactions",
    "right",
    "different",
    "purpose",
    "use",
    "block",
    "use",
    "bitcoins",
    "use",
    "hospitals",
    "use",
    "government",
    "information",
    "thing",
    "stored",
    "inside",
    "block",
    "okay",
    "saying",
    "chase",
    "block",
    "ca",
    "change",
    "block",
    "right",
    "block",
    "anyone",
    "change",
    "bitcoin",
    "works",
    "oh",
    "wo",
    "twice",
    "doers",
    "use",
    "concept",
    "hashing",
    "hashing",
    "hashing",
    "means",
    "use",
    "different",
    "algorithms",
    "generate",
    "simple",
    "hash",
    "key",
    "algorithm",
    "use",
    "md5",
    "sha",
    "sha",
    "also",
    "different",
    "different",
    "lengths",
    "sha",
    "use",
    "algorithm",
    "specific",
    "input",
    "let",
    "say",
    "input",
    "name",
    "1120",
    "input",
    "perform",
    "operation",
    "give",
    "key",
    "awesome",
    "thing",
    "matter",
    "big",
    "input",
    "simple",
    "line",
    "name",
    "beam",
    "20",
    "entire",
    "wikipedia",
    "database",
    "even",
    "pick",
    "entire",
    "keep",
    "database",
    "apply",
    "algorithm",
    "key",
    "length",
    "depend",
    "upon",
    "use",
    "example",
    "using",
    "algorithm",
    "length",
    "key",
    "256",
    "bits",
    "even",
    "apply",
    "key",
    "mean",
    "freddy",
    "get",
    "length",
    "key",
    "key",
    "different",
    "okay",
    "every",
    "data",
    "begin",
    "different",
    "keys",
    "power",
    "hashing",
    "perform",
    "hash",
    "one",
    "input",
    "give",
    "output",
    "different",
    "different",
    "data",
    "two",
    "different",
    "data",
    "hash",
    "sometimes",
    "say",
    "hash",
    "collision",
    "rare",
    "kids",
    "apply",
    "hashing",
    "different",
    "data",
    "get",
    "different",
    "keys",
    "useful",
    "important",
    "thing",
    "let",
    "say",
    "text",
    "name",
    "720",
    "getting",
    "key",
    "change",
    "1",
    "1",
    "later",
    "name",
    "example",
    "say",
    "name",
    "name",
    "20",
    "changing",
    "double",
    "e",
    "normally",
    "people",
    "moment",
    "make",
    "small",
    "change",
    "affect",
    "key",
    "well",
    "even",
    "change",
    "something",
    "data",
    "change",
    "key",
    "well",
    "imagine",
    "key",
    "fingerprint",
    "right",
    "data",
    "data",
    "hashkee",
    "advantages",
    "moment",
    "change",
    "something",
    "body",
    "something",
    "data",
    "affect",
    "hash",
    "well",
    "know",
    "someone",
    "tempered",
    "data",
    "take",
    "key",
    "right",
    "key",
    "different",
    "course",
    "change",
    "data",
    "useful",
    "blockchain",
    "remember",
    "block",
    "block",
    "got",
    "block",
    "apply",
    "hash",
    "let",
    "say",
    "block",
    "ay",
    "hash",
    "something",
    "hash",
    "let",
    "say",
    "next",
    "block",
    "next",
    "block",
    "data",
    "course",
    "plus",
    "also",
    "key",
    "previous",
    "block",
    "hash",
    "previous",
    "block",
    "let",
    "say",
    "block",
    "key",
    "let",
    "say",
    "k",
    "1",
    "second",
    "log",
    "b",
    "k",
    "1",
    "means",
    "find",
    "key",
    "hash",
    "block",
    "combination",
    "data",
    "previous",
    "key",
    "get",
    "k",
    "2",
    "got",
    "k",
    "1",
    "b",
    "got",
    "k",
    "2",
    "let",
    "say",
    "third",
    "block",
    "c",
    "k",
    "3",
    "remember",
    "linked",
    "list",
    "yeah",
    "linnaeus",
    "one",
    "node",
    "second",
    "node",
    "knows",
    "previous",
    "node",
    "previous",
    "node",
    "next",
    "knows",
    "next",
    "node",
    "right",
    "create",
    "chain",
    "number",
    "blocks",
    "blocks",
    "connected",
    "chain",
    "say",
    "called",
    "called",
    "basically",
    "block",
    "chain",
    "lot",
    "blocks",
    "connected",
    "help",
    "help",
    "hash",
    "value",
    "see",
    "simple",
    "right",
    "make",
    "sure",
    "trusts",
    "involve",
    "one",
    "change",
    "think",
    "change",
    "data",
    "change",
    "let",
    "say",
    "block",
    "b",
    "thing",
    "moment",
    "change",
    "one",
    "bit",
    "okay",
    "small",
    "change",
    "b",
    "affect",
    "key",
    "right",
    "block",
    "c",
    "key",
    "b",
    "compare",
    "block",
    "b",
    "block",
    "key",
    "available",
    "block",
    "c",
    "different",
    "means",
    "someone",
    "tampered",
    "data",
    "know",
    "someone",
    "done",
    "changes",
    "say",
    "blockchain",
    "safe",
    "amazed",
    "know",
    "till",
    "point",
    "one",
    "able",
    "crack",
    "blockchain",
    "database",
    "powerful",
    "yeah",
    "hacking",
    "bitcoins",
    "drugs",
    "ballot",
    "use",
    "height",
    "done",
    "ballot",
    "blockchain",
    "secure",
    "safe",
    "trust",
    "bitcoin",
    "exactly",
    "use",
    "blockchain",
    "everywhere",
    "future",
    "government",
    "hospitals",
    "personal",
    "entity",
    "bitcoins",
    "everywhere",
    "using",
    "blockchain",
    "banks",
    "india",
    "well",
    "started",
    "using",
    "blockchain",
    "industries",
    "talked",
    "poc",
    "proof",
    "concept",
    "blockchain",
    "flexible",
    "use",
    "blockchain",
    "implementing",
    "soon",
    "lot",
    "jobs",
    "available",
    "option",
    "sure",
    "future",
    "want",
    "learn",
    "something",
    "new",
    "start",
    "dog",
    "chain",
    "hope",
    "got",
    "ideas",
    "blockchain",
    "video",
    "everyone",
    "talking",
    "blockchain",
    "matter",
    "industry",
    "work",
    "trying",
    "implement",
    "blockchain",
    "still",
    "poc",
    "actually",
    "implementing",
    "fact",
    "last",
    "year",
    "talking",
    "companies",
    "poc",
    "implementing",
    "look",
    "speed",
    "everyone",
    "want",
    "get",
    "technology",
    "world",
    "blockchain",
    "technology",
    "changing",
    "lot",
    "stuff",
    "light",
    "replacing",
    "old",
    "way",
    "working",
    "implementing",
    "new",
    "way",
    "three",
    "questions",
    "want",
    "answer",
    "video",
    "first",
    "one",
    "blockchain",
    "famous",
    "fact",
    "already",
    "video",
    "blockchain",
    "blockchain",
    "works",
    "seen",
    "video",
    "check",
    "description",
    "area",
    "video",
    "talk",
    "famous",
    "second",
    "question",
    "want",
    "answer",
    "get",
    "blockchain",
    "technology",
    "people",
    "feel",
    "technical",
    "field",
    "get",
    "blockchain",
    "let",
    "see",
    "works",
    "third",
    "question",
    "prerequisites",
    "music",
    "welcome",
    "back",
    "everyone",
    "name",
    "ivan",
    "ready",
    "let",
    "get",
    "started",
    "first",
    "question",
    "blockchain",
    "first",
    "certain",
    "issues",
    "current",
    "technology",
    "working",
    "example",
    "let",
    "say",
    "internet",
    "using",
    "amazing",
    "technology",
    "right",
    "changed",
    "way",
    "business",
    "work",
    "created",
    "different",
    "types",
    "domains",
    "businesses",
    "right",
    "think",
    "google",
    "facebook",
    "amazon",
    "running",
    "feature",
    "internet",
    "right",
    "internet",
    "meant",
    "open",
    "everyone",
    "internet",
    "actually",
    "controlled",
    "companies",
    "want",
    "want",
    "central",
    "power",
    "good",
    "future",
    "second",
    "issue",
    "online",
    "transaction",
    "bank",
    "transaction",
    "want",
    "send",
    "money",
    "someone",
    "need",
    "bank",
    "issue",
    "fine",
    "want",
    "transfer",
    "someone",
    "else",
    "bank",
    "says",
    "hey",
    "first",
    "link",
    "side",
    "fine",
    "amount",
    "fees",
    "charging",
    "transaction",
    "something",
    "concerned",
    "example",
    "even",
    "paypal",
    "charge",
    "photos",
    "per",
    "transaction",
    "want",
    "right",
    "want",
    "central",
    "server",
    "one",
    "issue",
    "right",
    "money",
    "issue",
    "second",
    "one",
    "time",
    "even",
    "international",
    "transaction",
    "take",
    "days",
    "right",
    "want",
    "wait",
    "time",
    "want",
    "fast",
    "right",
    "blockchain",
    "says",
    "hey",
    "use",
    "way",
    "decentralize",
    "applications",
    "implement",
    "everything",
    "decentralized",
    "way",
    "want",
    "something",
    "want",
    "central",
    "server",
    "one",
    "issue",
    "could",
    "implemented",
    "digitization",
    "way",
    "right",
    "new",
    "term",
    "old",
    "term",
    "initially",
    "column",
    "even",
    "implement",
    "everything",
    "decentralized",
    "way",
    "trust",
    "someone",
    "example",
    "let",
    "say",
    "want",
    "class",
    "mine",
    "someone",
    "else",
    "transfer",
    "edge",
    "day",
    "guy",
    "says",
    "hey",
    "done",
    "transaction",
    "trust",
    "parties",
    "blockchain",
    "also",
    "provides",
    "trust",
    "okay",
    "everything",
    "online",
    "saved",
    "one",
    "ledger",
    "talk",
    "later",
    "detail",
    "everything",
    "store",
    "one",
    "ledger",
    "ledger",
    "transparent",
    "anyone",
    "see",
    "transactions",
    "transparency",
    "actually",
    "trust",
    "system",
    "next",
    "thing",
    "moment",
    "talk",
    "later",
    "one",
    "change",
    "later",
    "create",
    "okay",
    "let",
    "basically",
    "database",
    "okay",
    "imagine",
    "big",
    "database",
    "ledger",
    "storing",
    "lot",
    "transactions",
    "want",
    "changed",
    "right",
    "want",
    "transaction",
    "saved",
    "way",
    "longer",
    "time",
    "changed",
    "want",
    "immutable",
    "blockchain",
    "provide",
    "see",
    "exactly",
    "thing",
    "works",
    "see",
    "later",
    "provides",
    "feature",
    "digitization",
    "provides",
    "feature",
    "trust",
    "provides",
    "features",
    "immutability",
    "okay",
    "next",
    "question",
    "would",
    "secured",
    "course",
    "entire",
    "blockchain",
    "system",
    "works",
    "cryptography",
    "yes",
    "base",
    "right",
    "trust",
    "blockchain",
    "safe",
    "reason",
    "block",
    "sin",
    "famous",
    "provides",
    "features",
    "amazing",
    "okay",
    "every",
    "industry",
    "wanting",
    "different",
    "blockchain",
    "features",
    "second",
    "question",
    "get",
    "blockchain",
    "need",
    "technical",
    "background",
    "exactly",
    "sleep",
    "doctor",
    "new",
    "industry",
    "right",
    "yes",
    "need",
    "technical",
    "people",
    "actually",
    "work",
    "blockchain",
    "build",
    "blocks",
    "applications",
    "also",
    "need",
    "people",
    "act",
    "advisor",
    "people",
    "towards",
    "business",
    "business",
    "mindset",
    "understand",
    "business",
    "understand",
    "implement",
    "something",
    "putting",
    "application",
    "understand",
    "blocks",
    "works",
    "understand",
    "use",
    "cases",
    "work",
    "blockchain",
    "adviser",
    "yes",
    "blocking",
    "developer",
    "needs",
    "technical",
    "skills",
    "also",
    "blockchain",
    "adviser",
    "pencil",
    "companies",
    "blocks",
    "expert",
    "towards",
    "architect",
    "right",
    "actually",
    "design",
    "everything",
    "start",
    "end",
    "yes",
    "different",
    "options",
    "technical",
    "knowledge",
    "technical",
    "skills",
    "example",
    "good",
    "programming",
    "done",
    "working",
    "cryptography",
    "fine",
    "still",
    "understand",
    "blockchain",
    "adviser",
    "third",
    "question",
    "important",
    "prerequisites",
    "prerequisites",
    "blockchain",
    "think",
    "matter",
    "time",
    "course",
    "example",
    "want",
    "little",
    "machine",
    "learning",
    "want",
    "get",
    "push",
    "development",
    "need",
    "sort",
    "positive",
    "example",
    "machine",
    "learning",
    "good",
    "maths",
    "find",
    "concepts",
    "hand",
    "want",
    "full",
    "stacks",
    "designing",
    "stuff",
    "right",
    "exactly",
    "servo",
    "works",
    "different",
    "stuff",
    "blockchain",
    "yes",
    "courses",
    "say",
    "need",
    "certain",
    "knowledge",
    "get",
    "blockchain",
    "answer",
    "yes",
    "diagnose",
    "block",
    "change",
    "start",
    "try",
    "course",
    "well",
    "expect",
    "base",
    "knowledge",
    "learn",
    "blockchain",
    "twist",
    "year",
    "twisters",
    "block",
    "change",
    "easy",
    "difficult",
    "depend",
    "upon",
    "know",
    "already",
    "example",
    "learning",
    "blocks",
    "first",
    "time",
    "quite",
    "comfortable",
    "several",
    "reasons",
    "one",
    "loved",
    "technology",
    "something",
    "feel",
    "comfortable",
    "second",
    "reason",
    "topic",
    "docked",
    "example",
    "cryptography",
    "distributed",
    "computing",
    "used",
    "take",
    "lectures",
    "made",
    "projects",
    "based",
    "applications",
    "quite",
    "comfortable",
    "cryptography",
    "quite",
    "comfortable",
    "distributed",
    "computing",
    "blockchain",
    "played",
    "expecting",
    "side",
    "know",
    "something",
    "base",
    "always",
    "helpful",
    "example",
    "know",
    "cryptographic",
    "talking",
    "cryptographic",
    "concepts",
    "feel",
    "comfortable",
    "pier",
    "equals",
    "cryptography",
    "distributed",
    "computing",
    "topics",
    "well",
    "example",
    "game",
    "theory",
    "yes",
    "learn",
    "go",
    "google",
    "today",
    "start",
    "learning",
    "start",
    "searching",
    "cryptograph",
    "start",
    "searching",
    "youtube",
    "computing",
    "also",
    "game",
    "theory",
    "good",
    "news",
    "us",
    "even",
    "touching",
    "blocks",
    "technology",
    "focusing",
    "basic",
    "concepts",
    "okay",
    "next",
    "video",
    "going",
    "implement",
    "prerequisites",
    "know",
    "anything",
    "fine",
    "start",
    "today",
    "wait",
    "next",
    "video",
    "start",
    "actual",
    "prerequisites",
    "touching",
    "blockchain",
    "hope",
    "excited",
    "blockchain",
    "anyone",
    "learn",
    "new",
    "technology",
    "right",
    "many",
    "people",
    "industry",
    "booming",
    "like",
    "anything",
    "right",
    "far",
    "search",
    "next",
    "year",
    "vacancies",
    "blocks",
    "developer",
    "field",
    "yes",
    "booming",
    "part",
    "faith",
    "learn",
    "blockchain",
    "together",
    "hope",
    "excited",
    "excited",
    "meet",
    "next",
    "video",
    "video",
    "talk",
    "cryptography",
    "blockchain",
    "works",
    "network",
    "simply",
    "means",
    "multiple",
    "nodes",
    "need",
    "central",
    "server",
    "whatever",
    "nowadays",
    "based",
    "server",
    "example",
    "working",
    "facebook",
    "want",
    "communicate",
    "friend",
    "facebook",
    "goes",
    "transaction",
    "want",
    "send",
    "money",
    "someone",
    "read",
    "bank",
    "hand",
    "talk",
    "need",
    "central",
    "server",
    "something",
    "new",
    "long",
    "time",
    "remember",
    "napster",
    "built",
    "network",
    "simply",
    "means",
    "multiple",
    "nodes",
    "people",
    "want",
    "share",
    "music",
    "free",
    "course",
    "parted",
    "one",
    "using",
    "example",
    "let",
    "say",
    "four",
    "people",
    "four",
    "nodes",
    "b",
    "c",
    "b",
    "music",
    "album",
    "music",
    "album",
    "c",
    "want",
    "album",
    "download",
    "b",
    "time",
    "maybe",
    "half",
    "album",
    "half",
    "album",
    "b",
    "time",
    "c",
    "also",
    "upload",
    "album",
    "download",
    "works",
    "need",
    "central",
    "server",
    "torrent",
    "also",
    "works",
    "network",
    "ever",
    "used",
    "torrent",
    "know",
    "talking",
    "right",
    "seeds",
    "peers",
    "service",
    "b2b",
    "awesome",
    "matter",
    "whatever",
    "network",
    "work",
    "four",
    "big",
    "concerns",
    "first",
    "concern",
    "confidentiality",
    "second",
    "one",
    "integrity",
    "third",
    "one",
    "non",
    "repudiation",
    "fourth",
    "one",
    "authentication",
    "let",
    "talk",
    "first",
    "one",
    "confidentiality",
    "let",
    "say",
    "working",
    "network",
    "let",
    "say",
    "b",
    "also",
    "c",
    "let",
    "talk",
    "later",
    "b",
    "say",
    "want",
    "send",
    "message",
    "b",
    "message",
    "anything",
    "simple",
    "message",
    "let",
    "say",
    "hi",
    "hello",
    "confidential",
    "let",
    "say",
    "bank",
    "details",
    "sharing",
    "details",
    "network",
    "open",
    "accessed",
    "anyone",
    "let",
    "say",
    "seen",
    "ic",
    "say",
    "hey",
    "sending",
    "message",
    "b",
    "c",
    "actually",
    "read",
    "something",
    "want",
    "right",
    "want",
    "data",
    "confidential",
    "simple",
    "data",
    "varies",
    "everything",
    "confidential",
    "one",
    "thing",
    "want",
    "achieve",
    "next",
    "thing",
    "want",
    "achieve",
    "integrity",
    "let",
    "say",
    "sending",
    "message",
    "b",
    "course",
    "want",
    "anyone",
    "see",
    "message",
    "let",
    "save",
    "serve",
    "simple",
    "message",
    "message",
    "hey",
    "let",
    "meet",
    "6",
    "someone",
    "else",
    "able",
    "see",
    "message",
    "fine",
    "let",
    "say",
    "c",
    "comes",
    "say",
    "hey",
    "read",
    "message",
    "ok",
    "also",
    "want",
    "modify",
    "c",
    "modifies",
    "data",
    "saying",
    "hey",
    "let",
    "meet",
    "5",
    "vellum",
    "starts",
    "right",
    "someone",
    "changing",
    "data",
    "data",
    "received",
    "b",
    "different",
    "sending",
    "issue",
    "integrity",
    "want",
    "data",
    "modified",
    "work",
    "third",
    "one",
    "simply",
    "means",
    "one",
    "say",
    "done",
    "done",
    "example",
    "let",
    "say",
    "sends",
    "message",
    "b",
    "saying",
    "hey",
    "let",
    "meet",
    "6",
    "let",
    "say",
    "b",
    "showed",
    "time",
    "say",
    "hey",
    "sent",
    "message",
    "want",
    "sending",
    "message",
    "prove",
    "actually",
    "sent",
    "message",
    "variation",
    "fourth",
    "one",
    "authentication",
    "let",
    "say",
    "b",
    "received",
    "packet",
    "packet",
    "message",
    "let",
    "meet",
    "6",
    "message",
    "sent",
    "guarantee",
    "actually",
    "sent",
    "message",
    "c",
    "well",
    "maybe",
    "c",
    "sent",
    "message",
    "name",
    "maybe",
    "identity",
    "starts",
    "right",
    "want",
    "anyone",
    "else",
    "send",
    "message",
    "someone",
    "else",
    "behalf",
    "issue",
    "authentication",
    "solve",
    "problem",
    "concept",
    "cryptography",
    "talk",
    "term",
    "cryptography",
    "basically",
    "two",
    "terms",
    "first",
    "one",
    "crypt",
    "second",
    "one",
    "grothy",
    "goodness",
    "basically",
    "means",
    "hidden",
    "secret",
    "graph",
    "basically",
    "writing",
    "means",
    "send",
    "message",
    "convert",
    "message",
    "way",
    "someone",
    "else",
    "able",
    "read",
    "send",
    "someone",
    "else",
    "readable",
    "receiver",
    "anyone",
    "else",
    "basically",
    "use",
    "concept",
    "encryption",
    "decryption",
    "means",
    "let",
    "say",
    "b",
    "want",
    "send",
    "message",
    "message",
    "first",
    "encrypted",
    "get",
    "something",
    "new",
    "known",
    "ciphertext",
    "ciphertext",
    "basically",
    "unreadable",
    "format",
    "table",
    "format",
    "ciphertext",
    "go",
    "receiver",
    "end",
    "let",
    "say",
    "b",
    "b",
    "able",
    "see",
    "unfortunately",
    "moment",
    "encrypt",
    "message",
    "read",
    "decrypting",
    "means",
    "wo",
    "read",
    "message",
    "decrypt",
    "way",
    "encrypt",
    "decrypt",
    "something",
    "help",
    "key",
    "b",
    "key",
    "encrypt",
    "decrypt",
    "one",
    "else",
    "would",
    "key",
    "based",
    "keys",
    "two",
    "different",
    "types",
    "cryptography",
    "first",
    "one",
    "symmetric",
    "key",
    "cryptography",
    "second",
    "one",
    "symmetric",
    "key",
    "cryptography",
    "discuss",
    "next",
    "video",
    "video",
    "talk",
    "types",
    "cryptography",
    "basically",
    "two",
    "types",
    "first",
    "one",
    "symmetric",
    "key",
    "cryptography",
    "second",
    "one",
    "symmetric",
    "key",
    "cryptography",
    "names",
    "first",
    "one",
    "symmetric",
    "key",
    "second",
    "one",
    "two",
    "different",
    "keys",
    "right",
    "let",
    "talk",
    "first",
    "one",
    "let",
    "say",
    "assume",
    "b",
    "want",
    "send",
    "message",
    "b",
    "abel",
    "simply",
    "encrypt",
    "message",
    "using",
    "key",
    "let",
    "say",
    "key",
    "k",
    "1",
    "using",
    "key",
    "k",
    "1",
    "encrypt",
    "message",
    "message",
    "go",
    "fact",
    "even",
    "b",
    "read",
    "message",
    "encrypted",
    "format",
    "b",
    "decrypt",
    "key",
    "b",
    "using",
    "course",
    "key",
    "right",
    "gave",
    "one",
    "b",
    "key",
    "k1",
    "different",
    "question",
    "share",
    "key",
    "course",
    "network",
    "right",
    "end",
    "want",
    "key",
    "k1",
    "let",
    "say",
    "one",
    "c",
    "course",
    "want",
    "send",
    "message",
    "see",
    "key",
    "use",
    "use",
    "k1",
    "course",
    "right",
    "b",
    "k1",
    "want",
    "send",
    "message",
    "c",
    "interpreted",
    "anyone",
    "else",
    "use",
    "different",
    "key",
    "let",
    "say",
    "leave",
    "k2",
    "b",
    "k1",
    "c",
    "k2",
    "let",
    "say",
    "b",
    "c",
    "wo",
    "attract",
    "key",
    "use",
    "use",
    "k1",
    "course",
    "use",
    "k2",
    "course",
    "need",
    "different",
    "key",
    "k3",
    "whatever",
    "says",
    "number",
    "user",
    "increases",
    "increase",
    "number",
    "keys",
    "difficult",
    "manage",
    "one",
    "example",
    "pocket",
    "carry",
    "hundred",
    "keys",
    "want",
    "interact",
    "hundred",
    "people",
    "manage",
    "keys",
    "want",
    "one",
    "topic",
    "symmetric",
    "let",
    "move",
    "towards",
    "asymmetric",
    "asymmetric",
    "cryptography",
    "also",
    "known",
    "public",
    "key",
    "cryptography",
    "basically",
    "use",
    "two",
    "different",
    "keys",
    "one",
    "private",
    "key",
    "one",
    "public",
    "key",
    "public",
    "key",
    "private",
    "key",
    "names",
    "everyone",
    "two",
    "kids",
    "let",
    "say",
    "want",
    "send",
    "message",
    "bb",
    "send",
    "message",
    "c",
    "network",
    "multiple",
    "nodes",
    "node",
    "two",
    "keys",
    "private",
    "key",
    "public",
    "key",
    "private",
    "public",
    "key",
    "b",
    "time",
    "public",
    "key",
    "c",
    "private",
    "public",
    "key",
    "want",
    "encrypt",
    "decrypt",
    "message",
    "use",
    "case",
    "one",
    "encrypt",
    "message",
    "use",
    "public",
    "key",
    "decrypt",
    "message",
    "use",
    "private",
    "key",
    "using",
    "private",
    "key",
    "encrypt",
    "message",
    "use",
    "public",
    "key",
    "decrypt",
    "message",
    "use",
    "decay",
    "time",
    "ca",
    "simply",
    "say",
    "link",
    "public",
    "equate",
    "public",
    "key",
    "possible",
    "use",
    "encrypting",
    "private",
    "decrypt",
    "public",
    "yeah",
    "encrypting",
    "public",
    "every",
    "ticket",
    "private",
    "achieve",
    "security",
    "let",
    "say",
    "want",
    "send",
    "message",
    "b",
    "know",
    "public",
    "key",
    "b",
    "known",
    "everyone",
    "public",
    "right",
    "course",
    "also",
    "know",
    "public",
    "key",
    "b",
    "encrypt",
    "message",
    "b",
    "public",
    "key",
    "message",
    "goes",
    "b",
    "course",
    "everyone",
    "else",
    "network",
    "see",
    "message",
    "encrypted",
    "message",
    "one",
    "decrypt",
    "know",
    "message",
    "decrypted",
    "b",
    "private",
    "key",
    "b",
    "private",
    "key",
    "course",
    "private",
    "right",
    "know",
    "private",
    "key",
    "everyone",
    "else",
    "know",
    "public",
    "key",
    "achieve",
    "security",
    "click",
    "message",
    "public",
    "key",
    "give",
    "message",
    "private",
    "key",
    "let",
    "let",
    "say",
    "c",
    "want",
    "send",
    "message",
    "public",
    "key",
    "si",
    "use",
    "c",
    "use",
    "public",
    "key",
    "c",
    "encrypt",
    "message",
    "public",
    "key",
    "decrypt",
    "message",
    "private",
    "key",
    "cryptography",
    "works",
    "question",
    "key",
    "number",
    "text",
    "discuss",
    "separate",
    "video",
    "video",
    "talk",
    "digital",
    "signature",
    "need",
    "let",
    "go",
    "back",
    "previous",
    "video",
    "talked",
    "four",
    "problems",
    "network",
    "first",
    "one",
    "confidentiality",
    "second",
    "one",
    "integrity",
    "third",
    "one",
    "non",
    "repudiation",
    "fourth",
    "one",
    "authentication",
    "talked",
    "confidentiality",
    "right",
    "achieve",
    "elf",
    "cryptography",
    "course",
    "use",
    "receivers",
    "public",
    "key",
    "encrypt",
    "message",
    "moment",
    "message",
    "received",
    "receiver",
    "end",
    "receiver",
    "decrypt",
    "message",
    "help",
    "private",
    "key",
    "works",
    "one",
    "else",
    "actually",
    "decrypt",
    "message",
    "one",
    "receivers",
    "private",
    "key",
    "works",
    "right",
    "achieved",
    "confidentiality",
    "authentication",
    "achieve",
    "concept",
    "digital",
    "signature",
    "let",
    "imagine",
    "multiple",
    "nodes",
    "network",
    "one",
    "one",
    "b",
    "b",
    "received",
    "packet",
    "message",
    "saying",
    "let",
    "meet",
    "6",
    "packet",
    "claims",
    "coming",
    "node",
    "sort",
    "starts",
    "know",
    "sure",
    "packet",
    "came",
    "node",
    "node",
    "say",
    "hey",
    "sent",
    "message",
    "solve",
    "problem",
    "know",
    "real",
    "world",
    "well",
    "write",
    "letter",
    "also",
    "sign",
    "letters",
    "like",
    "signature",
    "specifies",
    "letter",
    "sent",
    "written",
    "virtual",
    "world",
    "course",
    "use",
    "pen",
    "well",
    "right",
    "use",
    "digital",
    "signature",
    "let",
    "imagine",
    "two",
    "keys",
    "right",
    "everyone",
    "two",
    "key",
    "private",
    "key",
    "public",
    "key",
    "want",
    "send",
    "message",
    "let",
    "say",
    "want",
    "send",
    "message",
    "b",
    "messages",
    "let",
    "meet",
    "sending",
    "message",
    "encrypt",
    "message",
    "help",
    "private",
    "key",
    "message",
    "goes",
    "b",
    "b",
    "able",
    "decrypt",
    "public",
    "key",
    "hold",
    "brick",
    "key",
    "available",
    "everyone",
    "right",
    "case",
    "trying",
    "achieve",
    "confidentiality",
    "trying",
    "achieve",
    "signature",
    "moment",
    "able",
    "sign",
    "message",
    "private",
    "key",
    "decrypted",
    "public",
    "key",
    "b",
    "sure",
    "message",
    "coming",
    "message",
    "able",
    "decrypt",
    "help",
    "spa",
    "breeki",
    "way",
    "message",
    "encrypted",
    "private",
    "key",
    "achieved",
    "authentication",
    "right",
    "losing",
    "confidentiality",
    "right",
    "achieve",
    "normally",
    "azar",
    "sending",
    "message",
    "first",
    "encrypt",
    "message",
    "using",
    "private",
    "key",
    "packet",
    "encrypted",
    "help",
    "b",
    "public",
    "key",
    "double",
    "encryption",
    "using",
    "b",
    "public",
    "key",
    "private",
    "key",
    "well",
    "received",
    "package",
    "first",
    "decrypt",
    "message",
    "help",
    "b",
    "private",
    "key",
    "give",
    "message",
    "using",
    "public",
    "key",
    "done",
    "right",
    "got",
    "message",
    "achieved",
    "two",
    "things",
    "confidentiality",
    "second",
    "one",
    "authentication",
    "works",
    "even",
    "seen",
    "c",
    "decrypt",
    "message",
    "encrypted",
    "help",
    "b",
    "public",
    "key",
    "right",
    "achieve",
    "signature",
    "video",
    "talk",
    "nodes",
    "blockchain",
    "system",
    "concept",
    "nodes",
    "imagine",
    "computer",
    "mobile",
    "phone",
    "network",
    "known",
    "nodal",
    "fact",
    "internet",
    "using",
    "devices",
    "use",
    "nodes",
    "right",
    "example",
    "router",
    "desktop",
    "anything",
    "way",
    "blockchain",
    "network",
    "also",
    "concept",
    "nodes",
    "nodes",
    "computer",
    "mobile",
    "phone",
    "node",
    "based",
    "type",
    "node",
    "perform",
    "different",
    "operations",
    "first",
    "two",
    "different",
    "types",
    "nodes",
    "first",
    "one",
    "full",
    "node",
    "call",
    "fully",
    "right",
    "ated",
    "node",
    "second",
    "type",
    "node",
    "partial",
    "node",
    "say",
    "light",
    "nodes",
    "let",
    "talk",
    "full",
    "node",
    "first",
    "full",
    "node",
    "basically",
    "computer",
    "entire",
    "blockchain",
    "current",
    "size",
    "blockchain",
    "188",
    "gp",
    "talking",
    "today",
    "date",
    "28th",
    "october",
    "2018",
    "188",
    "gb",
    "every",
    "date",
    "increasing",
    "data",
    "stored",
    "full",
    "node",
    "full",
    "node",
    "one",
    "task",
    "verifying",
    "node",
    "first",
    "store",
    "entire",
    "blockchain",
    "second",
    "verify",
    "blocks",
    "getting",
    "added",
    "every",
    "time",
    "connected",
    "note",
    "says",
    "hey",
    "got",
    "new",
    "block",
    "full",
    "node",
    "verify",
    "entire",
    "blockchain",
    "verifies",
    "store",
    "know",
    "something",
    "like",
    "let",
    "say",
    "beard",
    "node",
    "says",
    "hey",
    "node",
    "got",
    "new",
    "block",
    "full",
    "node",
    "check",
    "ok",
    "giving",
    "new",
    "block",
    "let",
    "first",
    "verify",
    "verifying",
    "add",
    "block",
    "full",
    "node",
    "induction",
    "one",
    "table",
    "basically",
    "mined",
    "blocks",
    "works",
    "discussed",
    "later",
    "concept",
    "transactions",
    "transaction",
    "goes",
    "block",
    "mine",
    "talk",
    "later",
    "full",
    "node",
    "also",
    "miner",
    "basically",
    "full",
    "rotor",
    "computer",
    "runs",
    "mining",
    "software",
    "call",
    "mine",
    "well",
    "compulsion",
    "full",
    "node",
    "miner",
    "well",
    "okay",
    "two",
    "different",
    "things",
    "full",
    "node",
    "full",
    "node",
    "miner",
    "thing",
    "talk",
    "full",
    "node",
    "need",
    "huge",
    "amount",
    "storage",
    "approximately",
    "188",
    "gbs",
    "want",
    "miner",
    "need",
    "huge",
    "computing",
    "power",
    "say",
    "huge",
    "computing",
    "power",
    "talking",
    "stack",
    "cpus",
    "huge",
    "amount",
    "gpus",
    "use",
    "cpus",
    "gpus",
    "well",
    "try",
    "things",
    "laptop",
    "never",
    "mind",
    "laptop",
    "low",
    "power",
    "need",
    "huge",
    "amount",
    "power",
    "run",
    "machine",
    "need",
    "electricity",
    "well",
    "huge",
    "investment",
    "full",
    "note",
    "need",
    "huge",
    "investment",
    "use",
    "normal",
    "computer",
    "provided",
    "200",
    "gb",
    "free",
    "want",
    "miner",
    "need",
    "huge",
    "amount",
    "cpu",
    "gpu",
    "power",
    "basically",
    "need",
    "entire",
    "center",
    "cpus",
    "gpus",
    "investment",
    "right",
    "miner",
    "earn",
    "incentives",
    "well",
    "basically",
    "incentive",
    "model",
    "every",
    "time",
    "mind",
    "new",
    "block",
    "transaction",
    "fee",
    "bitcoins",
    "well",
    "specific",
    "bitcoin",
    "talk",
    "later",
    "full",
    "node",
    "full",
    "node",
    "earn",
    "miner",
    "earn",
    "investing",
    "lot",
    "money",
    "hand",
    "concept",
    "partial",
    "nodes",
    "light",
    "nodes",
    "example",
    "let",
    "say",
    "want",
    "use",
    "bitcoin",
    "want",
    "use",
    "ballot",
    "want",
    "mobile",
    "phone",
    "course",
    "mobile",
    "phones",
    "need",
    "software",
    "course",
    "also",
    "node",
    "moment",
    "install",
    "software",
    "becomes",
    "node",
    "partial",
    "node",
    "simply",
    "download",
    "entire",
    "blocks",
    "phone",
    "somewhat",
    "blockchain",
    "ca",
    "run",
    "know",
    "send",
    "money",
    "someone",
    "else",
    "light",
    "node",
    "partial",
    "node",
    "concept",
    "full",
    "node",
    "verify",
    "transactions",
    "store",
    "entire",
    "blockchain",
    "partial",
    "nodes",
    "use",
    "valid",
    "purpose",
    "talking",
    "talk",
    "detail",
    "exactly",
    "miner",
    "works",
    "exactly",
    "gate",
    "blocks",
    "get",
    "idea",
    "nodes",
    "nodes",
    "let",
    "continue",
    "series",
    "blockchain",
    "talking",
    "prerequisites",
    "blockchain",
    "one",
    "hashing",
    "video",
    "talk",
    "terms",
    "like",
    "hashing",
    "hash",
    "function",
    "hash",
    "value",
    "let",
    "get",
    "started",
    "basically",
    "hash",
    "function",
    "mathematical",
    "function",
    "takes",
    "arbitrary",
    "length",
    "numerical",
    "data",
    "convert",
    "fixed",
    "length",
    "numerical",
    "data",
    "mentioned",
    "input",
    "length",
    "smaller",
    "value",
    "bigger",
    "length",
    "value",
    "output",
    "fixed",
    "size",
    "based",
    "algorithm",
    "using",
    "output",
    "length",
    "change",
    "example",
    "concept",
    "message",
    "digests",
    "concept",
    "sha",
    "based",
    "type",
    "algorithm",
    "use",
    "getting",
    "different",
    "set",
    "different",
    "lengths",
    "hash",
    "value",
    "input",
    "type",
    "range",
    "one",
    "bit",
    "thousands",
    "millions",
    "bits",
    "amazing",
    "part",
    "know",
    "even",
    "passing",
    "huge",
    "chunk",
    "data",
    "let",
    "say",
    "5",
    "gb",
    "data",
    "input",
    "get",
    "fixed",
    "line",
    "size",
    "example",
    "let",
    "say",
    "take",
    "name",
    "name",
    "26",
    "type",
    "text",
    "get",
    "h",
    "value",
    "going",
    "function",
    "function",
    "returns",
    "value",
    "amazing",
    "thing",
    "use",
    "certain",
    "algorithm",
    "let",
    "say",
    "using",
    "type",
    "name",
    "say",
    "means",
    "id",
    "matter",
    "point",
    "matter",
    "many",
    "times",
    "get",
    "hash",
    "value",
    "means",
    "input",
    "getting",
    "hash",
    "value",
    "every",
    "time",
    "next",
    "amazing",
    "thing",
    "even",
    "small",
    "change",
    "text",
    "change",
    "hash",
    "value",
    "different",
    "way",
    "see",
    "even",
    "change",
    "reddy",
    "small",
    "r",
    "capital",
    "see",
    "change",
    "changing",
    "entire",
    "hash",
    "value",
    "someone",
    "guess",
    "right",
    "different",
    "thing",
    "third",
    "amazing",
    "thing",
    "get",
    "actual",
    "input",
    "hash",
    "value",
    "means",
    "possible",
    "course",
    "convert",
    "given",
    "data",
    "hash",
    "easy",
    "difficult",
    "fact",
    "almost",
    "impossible",
    "go",
    "back",
    "remind",
    "hashing",
    "encryption",
    "encryption",
    "get",
    "back",
    "using",
    "decryption",
    "case",
    "hash",
    "hash",
    "get",
    "hash",
    "value",
    "get",
    "data",
    "back",
    "course",
    "right",
    "would",
    "get",
    "hashing",
    "lose",
    "lot",
    "data",
    "let",
    "say",
    "even",
    "input",
    "jeebies",
    "output",
    "bits",
    "right",
    "course",
    "losing",
    "lot",
    "data",
    "impossible",
    "get",
    "data",
    "back",
    "important",
    "thing",
    "two",
    "different",
    "messages",
    "two",
    "different",
    "hash",
    "values",
    "never",
    "get",
    "hash",
    "value",
    "happens",
    "call",
    "collision",
    "might",
    "asking",
    "ok",
    "theory",
    "right",
    "implement",
    "first",
    "block",
    "shall",
    "use",
    "okay",
    "anyway",
    "implement",
    "blockchain",
    "using",
    "different",
    "algorithms",
    "writing",
    "algorithm",
    "want",
    "know",
    "algorithm",
    "check",
    "videos",
    "try",
    "make",
    "separate",
    "video",
    "explaining",
    "exactly",
    "create",
    "algorithm",
    "taking",
    "input",
    "getting",
    "output",
    "using",
    "output",
    "using",
    "hash",
    "value",
    "blockchain",
    "different",
    "algorithms",
    "believable",
    "try",
    "one",
    "md",
    "message",
    "digest",
    "different",
    "versions",
    "t2",
    "t3",
    "watchin",
    "b6",
    "also",
    "md5",
    "fevers",
    "back",
    "tack",
    "md5",
    "compromised",
    "people",
    "using",
    "md5",
    "moving",
    "towards",
    "sha",
    "secure",
    "hash",
    "algorithm",
    "built",
    "nsa",
    "different",
    "versions",
    "sha",
    "0",
    "53",
    "block",
    "normally",
    "use",
    "sha",
    "2",
    "sha",
    "ville",
    "family",
    "actually",
    "different",
    "versions",
    "popular",
    "popular",
    "version",
    "numbers",
    "actually",
    "represent",
    "output",
    "bit",
    "values",
    "example",
    "say",
    "sha",
    "256",
    "output",
    "256",
    "bits",
    "say",
    "5",
    "2",
    "course",
    "output",
    "5",
    "2",
    "bits",
    "exactly",
    "using",
    "hash",
    "blocks",
    "different",
    "concept",
    "start",
    "blockchain",
    "understand",
    "exactly",
    "use",
    "hash",
    "hashing",
    "basically",
    "important",
    "concept",
    "let",
    "take",
    "another",
    "example",
    "hashing",
    "weighted",
    "blockchain",
    "let",
    "say",
    "want",
    "download",
    "ubuntu",
    "course",
    "go",
    "google",
    "search",
    "one",
    "sound",
    "load",
    "get",
    "take",
    "official",
    "website",
    "download",
    "file",
    "around",
    "1",
    "gb",
    "work",
    "right",
    "get",
    "file",
    "download",
    "torrent",
    "gives",
    "feature",
    "right",
    "gives",
    "multiple",
    "peers",
    "download",
    "multiple",
    "places",
    "course",
    "prefer",
    "download",
    "utorrent",
    "instead",
    "going",
    "official",
    "website",
    "one",
    "race",
    "set",
    "downloading",
    "torrent",
    "malicious",
    "right",
    "someone",
    "else",
    "uploaded",
    "set",
    "downloading",
    "viruses",
    "malware",
    "right",
    "verify",
    "set",
    "downloading",
    "official",
    "official",
    "website",
    "set",
    "plus",
    "also",
    "hash",
    "value",
    "course",
    "downloading",
    "set",
    "official",
    "website",
    "get",
    "hash",
    "value",
    "even",
    "copied",
    "get",
    "set",
    "torrent",
    "generate",
    "hash",
    "value",
    "particular",
    "setup",
    "let",
    "say",
    "set",
    "1gb",
    "use",
    "surface",
    "give",
    "hash",
    "value",
    "set",
    "compare",
    "hash",
    "value",
    "generated",
    "one",
    "hash",
    "value",
    "website",
    "means",
    "set",
    "official",
    "even",
    "hacker",
    "changed",
    "one",
    "two",
    "bits",
    "change",
    "entire",
    "hash",
    "value",
    "right",
    "course",
    "verify",
    "yes",
    "use",
    "hash",
    "value",
    "multiple",
    "places",
    "course",
    "terms",
    "security",
    "use",
    "induction",
    "well",
    "use",
    "see",
    "data",
    "video",
    "talk",
    "three",
    "way",
    "comes",
    "blockchain",
    "got",
    "blocks",
    "blocks",
    "connected",
    "help",
    "hash",
    "value",
    "exactly",
    "different",
    "thing",
    "every",
    "block",
    "transactions",
    "one",
    "transaction",
    "thousands",
    "transactions",
    "also",
    "want",
    "find",
    "hash",
    "block",
    "right",
    "think",
    "combine",
    "entire",
    "block",
    "find",
    "one",
    "hash",
    "find",
    "hash",
    "transaction",
    "want",
    "find",
    "hash",
    "transaction",
    "store",
    "hashes",
    "right",
    "one",
    "block",
    "one",
    "hash",
    "one",
    "block",
    "thousands",
    "hash",
    "want",
    "want",
    "get",
    "one",
    "hash",
    "one",
    "way",
    "implement",
    "help",
    "local",
    "tree",
    "first",
    "try",
    "create",
    "tree",
    "look",
    "tree",
    "tree",
    "root",
    "tree",
    "leaves",
    "tree",
    "nodes",
    "end",
    "nodes",
    "normally",
    "called",
    "leaves",
    "nodes",
    "leaf",
    "nodes",
    "nodes",
    "called",
    "branches",
    "top",
    "root",
    "build",
    "tree",
    "let",
    "imagine",
    "one",
    "block",
    "ten",
    "transactions",
    "start",
    "gathering",
    "hash",
    "transaction",
    "let",
    "say",
    "ten",
    "transaction",
    "got",
    "hash",
    "value",
    "find",
    "hash",
    "value",
    "first",
    "second",
    "find",
    "hash",
    "value",
    "third",
    "fourth",
    "list",
    "goes",
    "find",
    "hash",
    "got",
    "hash",
    "got",
    "edge",
    "three",
    "four",
    "got",
    "hash",
    "five",
    "six",
    "goes",
    "combine",
    "hash",
    "one",
    "two",
    "three",
    "four",
    "right",
    "get",
    "hash",
    "one",
    "two",
    "three",
    "four",
    "end",
    "combine",
    "everything",
    "get",
    "hash",
    "one",
    "ten",
    "build",
    "tree",
    "example",
    "see",
    "end",
    "right",
    "got",
    "end",
    "transactions",
    "odd",
    "number",
    "normally",
    "talk",
    "merkle",
    "tree",
    "actually",
    "bunny",
    "tree",
    "binary",
    "need",
    "even",
    "numbers",
    "nodes",
    "end",
    "let",
    "say",
    "nine",
    "transactions",
    "end",
    "repeat",
    "transaction",
    "say",
    "nine",
    "nine",
    "repeated",
    "right",
    "end",
    "combine",
    "things",
    "top",
    "get",
    "hash",
    "hash",
    "merkel",
    "root",
    "find",
    "one",
    "hash",
    "entire",
    "block",
    "useful",
    "comes",
    "saying",
    "going",
    "start",
    "adoption",
    "see",
    "works",
    "basic",
    "idea",
    "model",
    "3",
    "video",
    "talk",
    "blockchain",
    "architecture",
    "talked",
    "basics",
    "right",
    "talked",
    "hashing",
    "talked",
    "mobile",
    "tree",
    "know",
    "p",
    "r",
    "equals",
    "block",
    "change",
    "video",
    "let",
    "focus",
    "architecture",
    "unless",
    "architecture",
    "talking",
    "exactly",
    "blockchain",
    "means",
    "inside",
    "block",
    "let",
    "start",
    "blockchain",
    "simply",
    "database",
    "right",
    "course",
    "none",
    "people",
    "lot",
    "expectations",
    "blockchain",
    "feel",
    "blockchain",
    "solve",
    "issues",
    "exactly",
    "blocks",
    "solve",
    "issue",
    "based",
    "data",
    "right",
    "issue",
    "nowadays",
    "manipulate",
    "data",
    "plus",
    "also",
    "want",
    "make",
    "sure",
    "distributed",
    "achieve",
    "blockchain",
    "say",
    "block",
    "block",
    "chain",
    "data",
    "talking",
    "blockchain",
    "type",
    "changes",
    "know",
    "different",
    "types",
    "block",
    "change",
    "talk",
    "later",
    "detail",
    "want",
    "talk",
    "different",
    "blocks",
    "change",
    "different",
    "set",
    "data",
    "one",
    "blocks",
    "famous",
    "public",
    "blockchain",
    "example",
    "bitcoin",
    "right",
    "first",
    "locks",
    "implementation",
    "bitcoin",
    "block",
    "use",
    "bitcoin",
    "send",
    "money",
    "right",
    "course",
    "money",
    "well",
    "data",
    "save",
    "block",
    "data",
    "one",
    "thing",
    "known",
    "block",
    "header",
    "need",
    "block",
    "header",
    "thing",
    "blocks",
    "right",
    "fail",
    "block",
    "create",
    "chain",
    "talking",
    "blog",
    "header",
    "comes",
    "picture",
    "block",
    "etre",
    "first",
    "thing",
    "need",
    "every",
    "block",
    "need",
    "timestamp",
    "right",
    "important",
    "right",
    "times",
    "time",
    "would",
    "know",
    "point",
    "block",
    "created",
    "need",
    "timestamp",
    "second",
    "thing",
    "need",
    "version",
    "right",
    "different",
    "versions",
    "blockchain",
    "protocol",
    "use",
    "one",
    "thing",
    "able",
    "timestamp",
    "version",
    "also",
    "muckle",
    "tree",
    "ribbon",
    "talked",
    "mockery",
    "right",
    "one",
    "particular",
    "blog",
    "lot",
    "transactions",
    "need",
    "one",
    "hash",
    "need",
    "merkel",
    "root",
    "need",
    "x",
    "time",
    "need",
    "version",
    "number",
    "called",
    "road",
    "else",
    "need",
    "two",
    "things",
    "going",
    "talk",
    "public",
    "blockchain",
    "one",
    "algorithm",
    "famous",
    "talk",
    "later",
    "want",
    "modify",
    "block",
    "use",
    "p",
    "oh",
    "w",
    "proof",
    "work",
    "make",
    "work",
    "need",
    "two",
    "fields",
    "first",
    "one",
    "difficulty",
    "target",
    "second",
    "one",
    "nouns",
    "talk",
    "later",
    "talk",
    "proof",
    "work",
    "need",
    "two",
    "fields",
    "well",
    "talked",
    "five",
    "fields",
    "block",
    "fight",
    "one",
    "mole",
    "previous",
    "hash",
    "hash",
    "talking",
    "every",
    "block",
    "hash",
    "right",
    "create",
    "chain",
    "every",
    "block",
    "hash",
    "previous",
    "block",
    "example",
    "let",
    "say",
    "five",
    "blocks",
    "second",
    "block",
    "hash",
    "first",
    "block",
    "third",
    "block",
    "hash",
    "second",
    "block",
    "fourth",
    "block",
    "hash",
    "third",
    "block",
    "create",
    "chain",
    "right",
    "track",
    "backwards",
    "right",
    "let",
    "say",
    "block",
    "want",
    "know",
    "previous",
    "block",
    "course",
    "follow",
    "chain",
    "right",
    "hash",
    "previous",
    "blocks",
    "question",
    "advantage",
    "remember",
    "talked",
    "blocks",
    "talked",
    "immutability",
    "right",
    "simply",
    "means",
    "create",
    "block",
    "block",
    "chain",
    "one",
    "change",
    "okay",
    "said",
    "one",
    "change",
    "password",
    "predicted",
    "something",
    "say",
    "blocks",
    "open",
    "anyone",
    "manipulate",
    "data",
    "blockchain",
    "okay",
    "people",
    "say",
    "secure",
    "let",
    "think",
    "talk",
    "hash",
    "every",
    "time",
    "change",
    "data",
    "change",
    "hash",
    "value",
    "well",
    "example",
    "let",
    "say",
    "five",
    "blocks",
    "hash",
    "fourth",
    "block",
    "fifth",
    "block",
    "right",
    "hash",
    "third",
    "block",
    "end",
    "fourth",
    "block",
    "moment",
    "change",
    "block",
    "let",
    "say",
    "want",
    "change",
    "second",
    "block",
    "case",
    "happen",
    "moment",
    "change",
    "data",
    "second",
    "block",
    "change",
    "hash",
    "well",
    "right",
    "hash",
    "changing",
    "right",
    "affect",
    "third",
    "block",
    "changed",
    "hash",
    "value",
    "starts",
    "change",
    "second",
    "one",
    "change",
    "hash",
    "affect",
    "third",
    "one",
    "regenerate",
    "hash",
    "third",
    "one",
    "make",
    "work",
    "right",
    "affect",
    "fourth",
    "one",
    "thing",
    "fourth",
    "affect",
    "fifth",
    "one",
    "number",
    "blocks",
    "block",
    "huge",
    "course",
    "change",
    "one",
    "block",
    "change",
    "difficult",
    "course",
    "right",
    "devoid",
    "supercomputer",
    "collect",
    "thousands",
    "devices",
    "us",
    "change",
    "hash",
    "block",
    "impossible",
    "make",
    "secure",
    "concept",
    "p",
    "w",
    "comes",
    "picture",
    "every",
    "time",
    "change",
    "something",
    "blockchain",
    "want",
    "add",
    "new",
    "block",
    "validated",
    "talking",
    "public",
    "blocks",
    "without",
    "validation",
    "add",
    "block",
    "means",
    "processing",
    "add",
    "block",
    "concept",
    "pw",
    "says",
    "take",
    "least",
    "ten",
    "minutes",
    "anyone",
    "add",
    "block",
    "blockchain",
    "say",
    "even",
    "change",
    "one",
    "block",
    "five",
    "blocks",
    "wait",
    "15",
    "minutes",
    "change",
    "entire",
    "block",
    "okay",
    "one",
    "thing",
    "take",
    "lot",
    "time",
    "second",
    "block",
    "chain",
    "stored",
    "one",
    "machine",
    "21",
    "people",
    "anyone",
    "part",
    "blockchain",
    "network",
    "central",
    "server",
    "example",
    "let",
    "say",
    "network",
    "ten",
    "people",
    "everyone",
    "copy",
    "blockchain",
    "course",
    "full",
    "node",
    "talked",
    "ten",
    "people",
    "add",
    "new",
    "block",
    "blockchain",
    "verified",
    "everyone",
    "right",
    "everyone",
    "come",
    "consensus",
    "add",
    "block",
    "blockchain",
    "concept",
    "consensus",
    "algorithm",
    "add",
    "data",
    "blockchain",
    "making",
    "blocks",
    "insecure",
    "first",
    "need",
    "supercomputer",
    "change",
    "block",
    "weigh",
    "lot",
    "time",
    "plus",
    "even",
    "want",
    "need",
    "50",
    "majority",
    "blockchain",
    "network",
    "almost",
    "impossible",
    "achieve",
    "right",
    "process",
    "p",
    "w",
    "need",
    "huge",
    "amount",
    "gpus",
    "cpus",
    "ca",
    "rich",
    "hold",
    "50",
    "doctor",
    "network",
    "world",
    "right",
    "make",
    "blockchain",
    "secure",
    "one",
    "question",
    "every",
    "block",
    "hash",
    "previous",
    "blocks",
    "fifth",
    "block",
    "hash",
    "fourth",
    "fourth",
    "hash",
    "third",
    "first",
    "block",
    "first",
    "block",
    "known",
    "genesis",
    "block",
    "genesis",
    "block",
    "previous",
    "hashed",
    "value",
    "zero",
    "right",
    "block",
    "terms",
    "bitcoin",
    "created",
    "satoshi",
    "nakamoto",
    "genesis",
    "block",
    "blog",
    "got",
    "new",
    "blogs",
    "something",
    "remember",
    "block",
    "structure",
    "blockchain",
    "architecture",
    "video",
    "talk",
    "types",
    "blockchain",
    "chain",
    "came",
    "existence",
    "bitcoin",
    "right",
    "wanted",
    "implement",
    "bitcoin",
    "wanted",
    "make",
    "secure",
    "blockchain",
    "right",
    "hand",
    "industries",
    "looked",
    "blockchain",
    "thought",
    "implement",
    "technology",
    "areas",
    "whatever",
    "column",
    "facing",
    "used",
    "locked",
    "initially",
    "talk",
    "blockchain",
    "majorly",
    "crypto",
    "currencies",
    "bitcoin",
    "came",
    "theorem",
    "lot",
    "coins",
    "available",
    "right",
    "altered",
    "coins",
    "well",
    "well",
    "happy",
    "rock",
    "chain",
    "finance",
    "industry",
    "talk",
    "education",
    "industry",
    "use",
    "blockchain",
    "issues",
    "auction",
    "people",
    "say",
    "secure",
    "transactions",
    "open",
    "yes",
    "anonymous",
    "know",
    "sending",
    "money",
    "address",
    "still",
    "see",
    "stuff",
    "online",
    "data",
    "bitcoin",
    "blockchain",
    "available",
    "openly",
    "name",
    "public",
    "blockchain",
    "open",
    "plus",
    "anyone",
    "part",
    "network",
    "let",
    "say",
    "ten",
    "nodes",
    "working",
    "blockchain",
    "want",
    "part",
    "node",
    "part",
    "open",
    "blockchain",
    "course",
    "miner",
    "local",
    "node",
    "able",
    "join",
    "public",
    "network",
    "issue",
    "company",
    "want",
    "want",
    "old",
    "blockchain",
    "possible",
    "yes",
    "next",
    "type",
    "block",
    "sure",
    "private",
    "private",
    "blockchain",
    "specially",
    "one",
    "company",
    "let",
    "say",
    "feel",
    "hey",
    "finance",
    "industry",
    "company",
    "works",
    "client",
    "data",
    "money",
    "want",
    "data",
    "shared",
    "anyone",
    "else",
    "want",
    "private",
    "blockchain",
    "want",
    "anyone",
    "else",
    "contribute",
    "number",
    "nodes",
    "validating",
    "blockchain",
    "number",
    "nodes",
    "adding",
    "blocks",
    "blockchain",
    "controlled",
    "knowing",
    "everyone",
    "private",
    "blockchain",
    "next",
    "one",
    "federated",
    "blockchain",
    "group",
    "people",
    "group",
    "companies",
    "coming",
    "together",
    "create",
    "separate",
    "blockchain",
    "course",
    "someone",
    "leading",
    "group",
    "people",
    "knowing",
    "everyone",
    "empty",
    "group",
    "let",
    "say",
    "want",
    "add",
    "new",
    "block",
    "known",
    "entity",
    "like",
    "public",
    "ledger",
    "public",
    "blockchain",
    "anyone",
    "part",
    "network",
    "right",
    "basically",
    "three",
    "public",
    "open",
    "entire",
    "world",
    "part",
    "network",
    "second",
    "private",
    "limited",
    "one",
    "company",
    "might",
    "want",
    "add",
    "transactions",
    "privately",
    "right",
    "axis",
    "maybe",
    "allow",
    "public",
    "read",
    "data",
    "right",
    "thing",
    "restricted",
    "hand",
    "federated",
    "group",
    "companies",
    "working",
    "together",
    "one",
    "permissions",
    "permission",
    "less",
    "blocks",
    "talk",
    "later",
    "three",
    "types",
    "question",
    "best",
    "one",
    "public",
    "private",
    "federation",
    "course",
    "right",
    "public",
    "best",
    "anyone",
    "part",
    "since",
    "using",
    "proof",
    "work",
    "takes",
    "ten",
    "minutes",
    "block",
    "slow",
    "hand",
    "talk",
    "private",
    "federated",
    "fast",
    "use",
    "p",
    "w",
    "entities",
    "known",
    "one",
    "concept",
    "famous",
    "production",
    "world",
    "consensus",
    "consensus",
    "let",
    "say",
    "five",
    "mining",
    "nodes",
    "nodes",
    "copy",
    "blockchain",
    "copy",
    "state",
    "exact",
    "copies",
    "got",
    "new",
    "block",
    "yeah",
    "done",
    "transactions",
    "got",
    "new",
    "block",
    "block",
    "supposed",
    "added",
    "blockchain",
    "mining",
    "node",
    "course",
    "say",
    "hey",
    "let",
    "give",
    "latest",
    "mining",
    "node",
    "later",
    "mining",
    "node",
    "five",
    "notify",
    "add",
    "blockchain",
    "help",
    "protocol",
    "replicate",
    "block",
    "chains",
    "different",
    "nodes",
    "problem",
    "note",
    "5",
    "malicious",
    "make",
    "sure",
    "nodes",
    "come",
    "consensus",
    "copy",
    "follow",
    "consensus",
    "algorithm",
    "blockchain",
    "word",
    "many",
    "constants",
    "algorithms",
    "using",
    "actually",
    "agree",
    "one",
    "particular",
    "state",
    "blockchain",
    "new",
    "block",
    "added",
    "blockchain",
    "add",
    "defined",
    "help",
    "consensus",
    "based",
    "permission",
    "less",
    "permission",
    "blockchain",
    "different",
    "consensus",
    "algorithm",
    "available",
    "first",
    "one",
    "proof",
    "work",
    "famous",
    "thanks",
    "bitcoin",
    "bitcoin",
    "uses",
    "p",
    "w",
    "achieve",
    "consensus",
    "right",
    "p",
    "w",
    "short",
    "let",
    "say",
    "nodes",
    "node",
    "spend",
    "computing",
    "power",
    "calculation",
    "whoever",
    "wins",
    "calculation",
    "whoever",
    "win",
    "puzzle",
    "add",
    "block",
    "blockchain",
    "yes",
    "receive",
    "bitcoins",
    "different",
    "concept",
    "right",
    "p",
    "w",
    "make",
    "sure",
    "node",
    "adding",
    "data",
    "blockchain",
    "computation",
    "understand",
    "yes",
    "spent",
    "computing",
    "power",
    "trust",
    "dpow",
    "part",
    "fact",
    "pos",
    "etherium",
    "world",
    "pos",
    "stands",
    "proof",
    "stake",
    "need",
    "pos",
    "p",
    "w",
    "one",
    "issue",
    "p",
    "w",
    "spend",
    "huge",
    "amount",
    "computing",
    "power",
    "think",
    "already",
    "short",
    "resources",
    "available",
    "spending",
    "huge",
    "amount",
    "resources",
    "power",
    "resources",
    "blockchain",
    "proof",
    "stake",
    "actually",
    "lot",
    "computation",
    "stake",
    "let",
    "say",
    "minor",
    "want",
    "add",
    "block",
    "blockchain",
    "course",
    "bitcoin",
    "network",
    "network",
    "receive",
    "bitcoins",
    "currency",
    "win",
    "right",
    "applying",
    "going",
    "blockchain",
    "putting",
    "stake",
    "blockchain",
    "say",
    "stake",
    "let",
    "say",
    "spending",
    "let",
    "say",
    "five",
    "cryptocurrency",
    "type",
    "may",
    "bitcoins",
    "points",
    "saying",
    "investing",
    "five",
    "coins",
    "might",
    "thinking",
    "okay",
    "big",
    "issue",
    "anyone",
    "invest",
    "malicious",
    "right",
    "malicious",
    "something",
    "wrong",
    "kick",
    "blockchain",
    "right",
    "secure",
    "say",
    "spending",
    "five",
    "bitcoins",
    "five",
    "coins",
    "means",
    "trust",
    "whoever",
    "highest",
    "stake",
    "win",
    "puzzle",
    "win",
    "block",
    "likewise",
    "many",
    "algorithms",
    "well",
    "bo",
    "eighty",
    "proof",
    "elapsed",
    "time",
    "built",
    "intel",
    "p",
    "proof",
    "deposit",
    "almost",
    "say",
    "mistake",
    "depositing",
    "amount",
    "entering",
    "blockchain",
    "also",
    "p",
    "c",
    "proof",
    "concept",
    "proof",
    "capacity",
    "actually",
    "going",
    "computing",
    "power",
    "cpu",
    "consumes",
    "lot",
    "electricity",
    "power",
    "consuming",
    "hard",
    "drive",
    "space",
    "whoever",
    "huge",
    "capacity",
    "might",
    "win",
    "block",
    "general",
    "concept",
    "consensus",
    "idea",
    "using",
    "consensus",
    "algorithm",
    "actually",
    "agree",
    "one",
    "particular",
    "state",
    "blockchain",
    "entire",
    "network",
    "video",
    "talk",
    "pows",
    "women",
    "last",
    "year",
    "talked",
    "consensus",
    "need",
    "consensus",
    "blockchain",
    "comes",
    "proof",
    "work",
    "consensus",
    "algorithm",
    "like",
    "pos",
    "poc",
    "well",
    "one",
    "famous",
    "one",
    "thing",
    "bitcoin",
    "first",
    "need",
    "p",
    "w",
    "nothing",
    "blockchain",
    "course",
    "blockchain",
    "network",
    "multiple",
    "nodes",
    "node",
    "state",
    "blockchain",
    "let",
    "say",
    "new",
    "block",
    "responsible",
    "add",
    "new",
    "block",
    "blockchain",
    "first",
    "verify",
    "transaction",
    "quite",
    "easy",
    "add",
    "block",
    "blockchain",
    "important",
    "us",
    "malicious",
    "node",
    "manipulate",
    "data",
    "want",
    "every",
    "node",
    "competing",
    "add",
    "block",
    "blockchain",
    "computing",
    "work",
    "kind",
    "computing",
    "work",
    "normally",
    "say",
    "given",
    "mathematical",
    "calculation",
    "whoever",
    "solves",
    "calculation",
    "win",
    "also",
    "say",
    "win",
    "add",
    "block",
    "blockchain",
    "receive",
    "points",
    "rewards",
    "bitcoin",
    "network",
    "receive",
    "bitcoins",
    "network",
    "rules",
    "important",
    "thing",
    "win",
    "add",
    "block",
    "blockchain",
    "need",
    "spending",
    "huge",
    "amount",
    "computing",
    "power",
    "chances",
    "goes",
    "malicious",
    "software",
    "malicious",
    "node",
    "second",
    "thing",
    "let",
    "say",
    "blockchain",
    "30",
    "blocks",
    "want",
    "change",
    "twenty",
    "fifth",
    "block",
    "affect",
    "hash",
    "remaining",
    "blocks",
    "right",
    "recalculate",
    "right",
    "recalculate",
    "hash",
    "blocks",
    "easy",
    "right",
    "know",
    "every",
    "time",
    "make",
    "change",
    "every",
    "time",
    "add",
    "block",
    "blockchain",
    "p",
    "w",
    "take",
    "amount",
    "time",
    "samant",
    "computing",
    "power",
    "rich",
    "much",
    "time",
    "hold",
    "moments",
    "nodes",
    "block",
    "generated",
    "added",
    "blockchain",
    "makes",
    "attack",
    "useless",
    "one",
    "question",
    "mathematical",
    "calculation",
    "course",
    "every",
    "node",
    "blockchain",
    "every",
    "miner",
    "want",
    "compete",
    "solving",
    "mathematical",
    "problem",
    "video",
    "one",
    "video",
    "question",
    "mathematical",
    "problem",
    "first",
    "complexity",
    "puzzle",
    "depend",
    "upon",
    "network",
    "size",
    "network",
    "many",
    "users",
    "active",
    "blockchain",
    "size",
    "factors",
    "easy",
    "example",
    "let",
    "say",
    "give",
    "number",
    "let",
    "say",
    "five",
    "twenty",
    "five",
    "find",
    "factors",
    "number",
    "maybe",
    "give",
    "extra",
    "logic",
    "well",
    "know",
    "two",
    "numbers",
    "difference",
    "maybe",
    "least",
    "fifty",
    "something",
    "like",
    "okay",
    "spending",
    "computing",
    "power",
    "calculate",
    "easy",
    "done",
    "seconds",
    "let",
    "say",
    "make",
    "difficult",
    "talk",
    "hash",
    "functions",
    "recap",
    "hash",
    "give",
    "input",
    "hash",
    "function",
    "length",
    "input",
    "give",
    "fixed",
    "size",
    "length",
    "thing",
    "part",
    "give",
    "naveen",
    "give",
    "unique",
    "hash",
    "change",
    "something",
    "mean",
    "change",
    "capital",
    "small",
    "give",
    "different",
    "hash",
    "value",
    "ca",
    "even",
    "guess",
    "okay",
    "generate",
    "give",
    "fact",
    "give",
    "output",
    "hash",
    "guess",
    "input",
    "lot",
    "calculations",
    "right",
    "maybe",
    "say",
    "five",
    "digit",
    "number",
    "find",
    "input",
    "particular",
    "output",
    "maybe",
    "give",
    "name",
    "ten",
    "letters",
    "dictionary",
    "find",
    "something",
    "like",
    "computational",
    "power",
    "bruce",
    "forty",
    "ca",
    "apply",
    "logic",
    "bruce",
    "force",
    "right",
    "huge",
    "computing",
    "power",
    "easily",
    "may",
    "lose",
    "mathematical",
    "equation",
    "drawbacks",
    "yes",
    "drawbacks",
    "think",
    "wasting",
    "much",
    "energy",
    "much",
    "computation",
    "useless",
    "one",
    "problem",
    "second",
    "one",
    "51",
    "attack",
    "network",
    "10",
    "nodes",
    "let",
    "say",
    "blocked",
    "network",
    "10",
    "nodes",
    "10",
    "6",
    "nodes",
    "malicious",
    "case",
    "51",
    "network",
    "hand",
    "course",
    "hacked",
    "hack",
    "introduction",
    "work",
    "two",
    "issues",
    "dissolve",
    "advanced",
    "things",
    "powr",
    "proof",
    "work",
    "etherium",
    "let",
    "go",
    "back",
    "bitcoin",
    "talked",
    "bitcoin",
    "said",
    "okay",
    "bitcoin",
    "technology",
    "based",
    "blockchain",
    "goes",
    "aetherium",
    "need",
    "tyrian",
    "bitcoin",
    "think",
    "say",
    "blockchain",
    "doctrine",
    "make",
    "internet",
    "decentralized",
    "okay",
    "say",
    "centralized",
    "big",
    "companies",
    "whatever",
    "online",
    "goes",
    "big",
    "companies",
    "right",
    "google",
    "amazon",
    "facebook",
    "managing",
    "entire",
    "internet",
    "want",
    "make",
    "decent",
    "rise",
    "said",
    "okay",
    "let",
    "use",
    "blockchain",
    "thing",
    "know",
    "options",
    "bitcoin",
    "talk",
    "bitcoin",
    "bitcoin",
    "electronic",
    "cash",
    "system",
    "good",
    "want",
    "transactions",
    "online",
    "use",
    "bitcoin",
    "say",
    "bitcoin",
    "blockchain",
    "every",
    "block",
    "data",
    "right",
    "transaction",
    "data",
    "software",
    "think",
    "current",
    "internet",
    "world",
    "write",
    "apps",
    "right",
    "create",
    "websites",
    "enterprise",
    "applications",
    "applications",
    "running",
    "internet",
    "centralized",
    "want",
    "make",
    "decentralized",
    "need",
    "network",
    "run",
    "applications",
    "decentralized",
    "got",
    "aetherium",
    "thanks",
    "vitalik",
    "inventor",
    "aetherium",
    "theorem",
    "amazing",
    "concept",
    "known",
    "vm",
    "aetherium",
    "virtual",
    "machine",
    "ok",
    "coming",
    "java",
    "background",
    "know",
    "talking",
    "right",
    "run",
    "application",
    "run",
    "software",
    "java",
    "need",
    "jvm",
    "run",
    "java",
    "virtual",
    "machine",
    "way",
    "athenian",
    "boil",
    "want",
    "write",
    "software",
    "want",
    "run",
    "atm",
    "network",
    "need",
    "virtual",
    "machine",
    "ok",
    "means",
    "two",
    "different",
    "concepts",
    "right",
    "bitcoin",
    "business",
    "mode",
    "cryptocurrencies",
    "etherium",
    "mode",
    "decentralized",
    "applications",
    "fact",
    "short",
    "call",
    "gaps",
    "ok",
    "one",
    "question",
    "cryptocurrency",
    "platform",
    "side",
    "bitcoin",
    "atheneum",
    "platform",
    "first",
    "sector",
    "currency",
    "platform",
    "platform",
    "want",
    "use",
    "currency",
    "ether",
    "want",
    "run",
    "decentralized",
    "application",
    "need",
    "cryptocurrency",
    "eaten",
    "also",
    "concept",
    "gas",
    "talk",
    "later",
    "theorem",
    "platform",
    "basically",
    "open",
    "software",
    "platform",
    "build",
    "application",
    "theorem",
    "damaged",
    "start",
    "special",
    "language",
    "using",
    "build",
    "applications",
    "quite",
    "easy",
    "familiar",
    "python",
    "javascript",
    "learning",
    "language",
    "easier",
    "know",
    "language",
    "simply",
    "go",
    "eternal",
    "network",
    "build",
    "application",
    "use",
    "existing",
    "applications",
    "build",
    "might",
    "thinking",
    "would",
    "difficult",
    "course",
    "easy",
    "start",
    "yes",
    "want",
    "make",
    "complex",
    "projects",
    "apply",
    "logic",
    "take",
    "time",
    "starting",
    "damn",
    "easy",
    "recap",
    "theorem",
    "platform",
    "create",
    "decentralized",
    "applications",
    "dab",
    "case",
    "also",
    "cryptocurrency",
    "ether",
    "basics",
    "theorem",
    "video",
    "talk",
    "contracts",
    "remember",
    "last",
    "video",
    "talked",
    "iam",
    "saying",
    "blockchain",
    "basically",
    "write",
    "codes",
    "write",
    "programming",
    "codes",
    "programming",
    "code",
    "represents",
    "type",
    "contract",
    "call",
    "smart",
    "contracts",
    "okay",
    "know",
    "confusing",
    "right",
    "keep",
    "simple",
    "let",
    "take",
    "example",
    "talk",
    "lot",
    "online",
    "websites",
    "websites",
    "website",
    "trust",
    "example",
    "want",
    "buy",
    "something",
    "online",
    "specific",
    "website",
    "mind",
    "example",
    "india",
    "amazon",
    "tip",
    "card",
    "snapdeal",
    "quite",
    "famous",
    "even",
    "try",
    "websites",
    "example",
    "let",
    "say",
    "website",
    "named",
    "buy",
    "stuff",
    "online",
    "maybe",
    "buy",
    "one",
    "reason",
    "trust",
    "second",
    "reason",
    "maybe",
    "secured",
    "build",
    "trust",
    "make",
    "secure",
    "say",
    "trust",
    "wrong",
    "let",
    "say",
    "order",
    "something",
    "prepaid",
    "order",
    "paying",
    "amount",
    "getting",
    "product",
    "product",
    "delivered",
    "trust",
    "resource",
    "side",
    "trusted",
    "company",
    "delivery",
    "service",
    "let",
    "say",
    "xyz",
    "responsible",
    "take",
    "product",
    "abc",
    "delay",
    "fraud",
    "abc",
    "also",
    "pay",
    "right",
    "pay",
    "let",
    "say",
    "100",
    "dollars",
    "product",
    "maybe",
    "commission",
    "people",
    "getting",
    "right",
    "delivery",
    "company",
    "trust",
    "issue",
    "two",
    "different",
    "parties",
    "right",
    "side",
    "abc",
    "abc",
    "xyz",
    "ok",
    "excited",
    "trust",
    "right",
    "belong",
    "solve",
    "problem",
    "use",
    "smart",
    "contracts",
    "entire",
    "payment",
    "system",
    "automated",
    "example",
    "buy",
    "something",
    "calm",
    "prepaid",
    "abc",
    "receive",
    "money",
    "receive",
    "money",
    "receive",
    "product",
    "something",
    "like",
    "right",
    "programming",
    "implement",
    "programming",
    "system",
    "supply",
    "chain",
    "management",
    "smart",
    "contracts",
    "paying",
    "received",
    "abc",
    "received",
    "get",
    "de",
    "product",
    "xy",
    "z",
    "receive",
    "commission",
    "abc",
    "product",
    "right",
    "smart",
    "contracts",
    "fact",
    "use",
    "supply",
    "chain",
    "management",
    "also",
    "let",
    "say",
    "buy",
    "car",
    "lot",
    "middle",
    "person",
    "right",
    "dealer",
    "finance",
    "company",
    "give",
    "options",
    "automate",
    "stuff",
    "well",
    "lot",
    "legal",
    "stuff",
    "going",
    "smart",
    "contracts",
    "efficient",
    "comes",
    "process",
    "making",
    "fast",
    "certain",
    "benefits",
    "fast",
    "secure",
    "using",
    "blockchain",
    "builds",
    "trust",
    "important",
    "amazon",
    "flip",
    "card",
    "companies",
    "ecommerce",
    "company",
    "implement",
    "smart",
    "contracts",
    "people",
    "trust",
    "right",
    "trust",
    "issue",
    "smart",
    "contracts",
    "simple",
    "terms",
    "smart",
    "contracts",
    "plan",
    "codes",
    "run",
    "theorem",
    "network",
    "basically",
    "built",
    "contracts",
    "wrong",
    "blockchain",
    "see",
    "first",
    "video",
    "talking",
    "good",
    "things",
    "blockchain",
    "channel",
    "go",
    "youtube",
    "search",
    "blockchain",
    "video",
    "talk",
    "amazing",
    "stuff",
    "dog",
    "chain",
    "every",
    "technology",
    "blockchain",
    "drawbacks",
    "yes",
    "least",
    "dom",
    "x",
    "go",
    "fact",
    "people",
    "focus",
    "drawbacks",
    "stop",
    "focusing",
    "things",
    "provides",
    "video",
    "let",
    "try",
    "focus",
    "four",
    "drawbacks",
    "dog",
    "chain",
    "welcome",
    "back",
    "everyone",
    "name",
    "ivan",
    "vendee",
    "let",
    "get",
    "started",
    "say",
    "blockchain",
    "auction",
    "multiple",
    "types",
    "famous",
    "one",
    "public",
    "blockchain",
    "private",
    "blockchain",
    "drawbacks",
    "going",
    "talk",
    "public",
    "blocks",
    "private",
    "blockchain",
    "till",
    "point",
    "talked",
    "travitt",
    "blockchain",
    "works",
    "focusing",
    "public",
    "say",
    "public",
    "examples",
    "right",
    "bitcoin",
    "one",
    "famous",
    "one",
    "theorem",
    "us",
    "first",
    "drawback",
    "option",
    "complex",
    "may",
    "technology",
    "terms",
    "moment",
    "start",
    "learning",
    "yes",
    "exciting",
    "amazing",
    "start",
    "try",
    "understand",
    "terms",
    "consensus",
    "changed",
    "nodes",
    "know",
    "things",
    "actually",
    "create",
    "lot",
    "confusion",
    "initially",
    "yes",
    "moment",
    "start",
    "working",
    "make",
    "concept",
    "clear",
    "initially",
    "complex",
    "technology",
    "damn",
    "complex",
    "right",
    "central",
    "server",
    "multiple",
    "machines",
    "provide",
    "coordination",
    "different",
    "algorithms",
    "available",
    "general",
    "concept",
    "blockchain",
    "complex",
    "start",
    "working",
    "know",
    "lot",
    "things",
    "get",
    "clearer",
    "second",
    "drawback",
    "talk",
    "public",
    "blobs",
    "example",
    "bitcoin",
    "theorem",
    "problem",
    "technology",
    "promises",
    "replace",
    "banks",
    "replace",
    "great",
    "cards",
    "debit",
    "cards",
    "think",
    "talk",
    "visa",
    "handle",
    "thousands",
    "transactions",
    "per",
    "second",
    "okay",
    "amazing",
    "right",
    "every",
    "one",
    "us",
    "use",
    "visa",
    "card",
    "know",
    "far",
    "hand",
    "talk",
    "bitcoin",
    "bitcoin",
    "uses",
    "algorithm",
    "consensus",
    "kento",
    "says",
    "around",
    "seven",
    "ten",
    "transactions",
    "per",
    "second",
    "think",
    "say",
    "bitcoin",
    "technology",
    "replace",
    "grade",
    "card",
    "wait",
    "moment",
    "use",
    "bitcoin",
    "wait",
    "time",
    "right",
    "millions",
    "people",
    "transactions",
    "every",
    "day",
    "handle",
    "right",
    "bitcoin",
    "handle",
    "speed",
    "second",
    "drawback",
    "slow",
    "okay",
    "talking",
    "drive",
    "adoption",
    "focusing",
    "public",
    "public",
    "blockchain",
    "slow",
    "third",
    "one",
    "focus",
    "bitcoin",
    "theorem",
    "still",
    "use",
    "proof",
    "work",
    "going",
    "talk",
    "bitcoin",
    "theorem",
    "using",
    "proof",
    "work",
    "right",
    "know",
    "much",
    "energy",
    "consumed",
    "solve",
    "given",
    "puzzle",
    "one",
    "node",
    "right",
    "thousands",
    "miners",
    "everyone",
    "solving",
    "given",
    "problem",
    "person",
    "waste",
    "time",
    "right",
    "main",
    "thing",
    "transaction",
    "add",
    "block",
    "transaction",
    "blockchain",
    "10",
    "minutes",
    "work",
    "consume",
    "huge",
    "amount",
    "resources",
    "want",
    "want",
    "waste",
    "resources",
    "third",
    "drawback",
    "blockchain",
    "let",
    "go",
    "fourth",
    "one",
    "fourth",
    "one",
    "security",
    "say",
    "privacy",
    "think",
    "talk",
    "bitcoin",
    "public",
    "blockchain",
    "moment",
    "say",
    "public",
    "means",
    "blockchain",
    "available",
    "everyone",
    "anyone",
    "see",
    "blockchain",
    "data",
    "oh",
    "scary",
    "let",
    "imagine",
    "naveen",
    "sending",
    "ten",
    "bitcoins",
    "rahul",
    "case",
    "everyone",
    "knows",
    "nobody",
    "sending",
    "ten",
    "bitcoins",
    "rahul",
    "data",
    "available",
    "public",
    "blockchain",
    "see",
    "advantage",
    "data",
    "blockchain",
    "one",
    "change",
    "everyone",
    "knows",
    "much",
    "bitcoin",
    "sent",
    "rahul",
    "bitcoin",
    "says",
    "hey",
    "worry",
    "distorting",
    "naveen",
    "rahul",
    "blockchain",
    "yes",
    "ten",
    "bitcoins",
    "dead",
    "naveen",
    "rahul",
    "different",
    "address",
    "address",
    "anonymous",
    "one",
    "knows",
    "exactly",
    "sending",
    "data",
    "right",
    "know",
    "address",
    "sending",
    "data",
    "address",
    "know",
    "address",
    "whole",
    "knows",
    "address",
    "guy",
    "works",
    "right",
    "still",
    "data",
    "blockchain",
    "maybe",
    "company",
    "data",
    "confidential",
    "available",
    "public",
    "blockchain",
    "everyone",
    "see",
    "maybe",
    "sent",
    "dealt",
    "data",
    "blockchain",
    "right",
    "one",
    "issue",
    "public",
    "blockchain",
    "ok",
    "fifth",
    "one",
    "important",
    "also",
    "part",
    "security",
    "everyone",
    "sees",
    "right",
    "doctrine",
    "immutable",
    "one",
    "change",
    "safe",
    "saying",
    "safe",
    "let",
    "say",
    "blockchain",
    "10",
    "10",
    "responsible",
    "handle",
    "blockchain",
    "right",
    "maintain",
    "state",
    "fate",
    "using",
    "different",
    "consensus",
    "algorithm",
    "one",
    "malicious",
    "node",
    "ok",
    "moment",
    "say",
    "one",
    "malicious",
    "node",
    "limiting",
    "9",
    "say",
    "hey",
    "get",
    "network",
    "right",
    "power",
    "majority",
    "6",
    "nodes",
    "malicious",
    "law",
    "starts",
    "majority",
    "wins",
    "right",
    "one",
    "issue",
    "blockchain",
    "51",
    "attack",
    "51",
    "nodes",
    "malicious",
    "power",
    "attack",
    "blockchain",
    "blockchain",
    "hacked",
    "51",
    "strand",
    "drawbacks",
    "blockchain",
    "yes",
    "focus",
    "benefits",
    "good",
    "know",
    "drawbacks",
    "well",
    "right",
    "useful",
    "debate",
    "people",
    "people",
    "world",
    "saying",
    "blockchain",
    "worse",
    "drawbacks",
    "focus",
    "benefits",
    "focus",
    "drawbacks",
    "matter",
    "important",
    "blockchain",
    "awesome",
    "limiting",
    "keeping",
    "thing",
    "aside",
    "worry",
    "drawbacks",
    "talked",
    "public",
    "blockchain",
    "right",
    "hand",
    "also",
    "private",
    "blockchain",
    "solve",
    "issue",
    "video",
    "talk",
    "later",
    "gosselin",
    "world",
    "heard",
    "many",
    "concepts",
    "right",
    "talked",
    "bitcoin",
    "know",
    "concept",
    "theorem",
    "something",
    "new",
    "hyper",
    "later",
    "fact",
    "amazing",
    "thing",
    "three",
    "years",
    "famous",
    "big",
    "companies",
    "maybe",
    "intel",
    "ibm",
    "putting",
    "heart",
    "project",
    "hyper",
    "nature",
    "per",
    "definition",
    "official",
    "website",
    "says",
    "hybrid",
    "ledger",
    "open",
    "source",
    "collaborative",
    "effort",
    "created",
    "advance",
    "cross",
    "industry",
    "blockchain",
    "technologies",
    "global",
    "collaboration",
    "hosted",
    "linux",
    "foundation",
    "including",
    "leaders",
    "finance",
    "banking",
    "internet",
    "things",
    "supply",
    "chain",
    "manufacturing",
    "technology",
    "big",
    "definition",
    "right",
    "understand",
    "better",
    "understand",
    "hyper",
    "ledger",
    "first",
    "hyper",
    "ledger",
    "blockchain",
    "company",
    "cryptocurrency",
    "well",
    "hyper",
    "ledger",
    "project",
    "happened",
    "know",
    "talk",
    "public",
    "blockchain",
    "bitcoin",
    "theorem",
    "works",
    "public",
    "use",
    "cryptocurrency",
    "concept",
    "well",
    "yes",
    "big",
    "debate",
    "use",
    "bitcoin",
    "thing",
    "blockchain",
    "technology",
    "solid",
    "right",
    "everyone",
    "want",
    "use",
    "till",
    "point",
    "everyone",
    "thinking",
    "use",
    "blockchain",
    "use",
    "cryptocurrency",
    "change",
    "market",
    "talking",
    "b2c",
    "business",
    "consumer",
    "b2b",
    "enterprise",
    "market",
    "course",
    "right",
    "even",
    "enterprise",
    "market",
    "want",
    "use",
    "blockchain",
    "use",
    "theorem",
    "problem",
    "moment",
    "talk",
    "theorem",
    "bitcoin",
    "public",
    "blockchain",
    "secure",
    "transaction",
    "low",
    "many",
    "issues",
    "public",
    "blockchain",
    "solve",
    "problem",
    "got",
    "project",
    "hyper",
    "ledger",
    "hosted",
    "linux",
    "foundation",
    "know",
    "linux",
    "foundation",
    "would",
    "recommend",
    "go",
    "google",
    "search",
    "many",
    "technologies",
    "part",
    "us",
    "nation",
    "using",
    "amazing",
    "technologies",
    "including",
    "hyper",
    "laser",
    "hyper",
    "laser",
    "new",
    "three",
    "years",
    "hyper",
    "laser",
    "got",
    "many",
    "members",
    "different",
    "field",
    "may",
    "banking",
    "technology",
    "aviation",
    "companies",
    "came",
    "together",
    "working",
    "open",
    "source",
    "projects",
    "imagine",
    "hyper",
    "ledger",
    "umbrella",
    "greenhouse",
    "blockchain",
    "open",
    "source",
    "products",
    "since",
    "talked",
    "projects",
    "hyper",
    "ledger",
    "literally",
    "multiple",
    "projects",
    "divide",
    "parts",
    "frameworks",
    "tools",
    "talk",
    "frameworks",
    "number",
    "frameworks",
    "available",
    "famous",
    "two",
    "fact",
    "one",
    "intel",
    "sawtooth",
    "second",
    "one",
    "fabric",
    "fabric",
    "one",
    "popular",
    "hyper",
    "ledger",
    "framework",
    "framework",
    "also",
    "tools",
    "available",
    "use",
    "frameworks",
    "tools",
    "make",
    "block",
    "chain",
    "specifically",
    "used",
    "make",
    "position",
    "block",
    "channel",
    "say",
    "private",
    "blockchain",
    "also",
    "views",
    "public",
    "blockchain",
    "introduction",
    "hyper",
    "ledger",
    "let",
    "repeat",
    "hyper",
    "ledger",
    "blockchain",
    "cryptocurrency",
    "something",
    "different",
    "project",
    "different",
    "frameworks",
    "using",
    "build",
    "block",
    "chains",
    "video",
    "talk",
    "smart",
    "contracts",
    "fact",
    "writing",
    "first",
    "smart",
    "contract",
    "two",
    "videos",
    "first",
    "video",
    "try",
    "set",
    "environment",
    "course",
    "like",
    "want",
    "write",
    "smart",
    "contracts",
    "need",
    "network",
    "normal",
    "network",
    "network",
    "connect",
    "machine",
    "detail",
    "network",
    "means",
    "create",
    "machine",
    "full",
    "node",
    "oh",
    "difficult",
    "task",
    "right",
    "anyway",
    "connect",
    "ethier",
    "network",
    "maybe",
    "test",
    "network",
    "discuss",
    "need",
    "test",
    "network",
    "first",
    "second",
    "video",
    "write",
    "first",
    "smart",
    "point",
    "lag",
    "difficult",
    "one",
    "simple",
    "one",
    "understand",
    "write",
    "smart",
    "contract",
    "let",
    "get",
    "started",
    "first",
    "thing",
    "set",
    "machine",
    "connect",
    "etherium",
    "network",
    "youth",
    "immense",
    "well",
    "want",
    "connect",
    "10",
    "network",
    "want",
    "transactions",
    "pay",
    "gas",
    "fee",
    "ok",
    "gas",
    "fee",
    "whenever",
    "transaction",
    "course",
    "miners",
    "want",
    "get",
    "rewarded",
    "pay",
    "transition",
    "fee",
    "normally",
    "call",
    "gas",
    "okay",
    "means",
    "transaction",
    "network",
    "need",
    "ethers",
    "buy",
    "ethers",
    "damn",
    "cost",
    "buy",
    "want",
    "buy",
    "anything",
    "learning",
    "contract",
    "case",
    "work",
    "test",
    "networks",
    "test",
    "network",
    "main",
    "network",
    "use",
    "use",
    "test",
    "network",
    "advantages",
    "pay",
    "transaction",
    "learning",
    "course",
    "want",
    "real",
    "transaction",
    "move",
    "ethernet",
    "work",
    "test",
    "network",
    "test",
    "network",
    "option",
    "understand",
    "connect",
    "machine",
    "network",
    "matter",
    "main",
    "network",
    "test",
    "network",
    "first",
    "browser",
    "right",
    "browser",
    "normally",
    "works",
    "centralized",
    "systems",
    "want",
    "connect",
    "browser",
    "want",
    "run",
    "make",
    "browser",
    "distributed",
    "app",
    "case",
    "use",
    "extension",
    "see",
    "browser",
    "firefox",
    "use",
    "browser",
    "want",
    "chrome",
    "opera",
    "folks",
    "add",
    "talking",
    "one",
    "add",
    "meta",
    "mask",
    "extension",
    "okay",
    "see",
    "tomas",
    "official",
    "website",
    "says",
    "bring",
    "browser",
    "take",
    "nice",
    "tagline",
    "add",
    "add",
    "firefox",
    "probe",
    "auto",
    "para",
    "fact",
    "amazing",
    "new",
    "browser",
    "brave",
    "browser",
    "trying",
    "using",
    "quite",
    "time",
    "good",
    "also",
    "try",
    "information",
    "meta",
    "box",
    "page",
    "allows",
    "visit",
    "distributed",
    "web",
    "tomorrow",
    "browser",
    "today",
    "amazing",
    "lines",
    "idea",
    "build",
    "e",
    "apps",
    "deploy",
    "help",
    "ok",
    "add",
    "everyone",
    "knows",
    "simply",
    "go",
    "search",
    "go",
    "extensions",
    "search",
    "meta",
    "masks",
    "take",
    "search",
    "thing",
    "see",
    "got",
    "dumbass",
    "extension",
    "click",
    "add",
    "firefox",
    "take",
    "time",
    "click",
    "add",
    "add",
    "extension",
    "browser",
    "see",
    "got",
    "meta",
    "mask",
    "says",
    "welcome",
    "tomas",
    "let",
    "continue",
    "process",
    "let",
    "say",
    "get",
    "started",
    "amazing",
    "says",
    "new",
    "meta",
    "mask",
    "answer",
    "yes",
    "us",
    "new",
    "meta",
    "mask",
    "yes",
    "meta",
    "mass",
    "account",
    "well",
    "let",
    "fresh",
    "see",
    "left",
    "inside",
    "says",
    "already",
    "seat",
    "phrase",
    "import",
    "wallet",
    "meta",
    "mask",
    "machine",
    "simply",
    "import",
    "ethers",
    "machine",
    "click",
    "import",
    "meta",
    "masks",
    "account",
    "initially",
    "give",
    "ask",
    "12",
    "words",
    "seed",
    "phrase",
    "click",
    "give",
    "option",
    "click",
    "since",
    "click",
    "click",
    "create",
    "wallet",
    "says",
    "help",
    "us",
    "improve",
    "meta",
    "mas",
    "want",
    "say",
    "agree",
    "let",
    "still",
    "say",
    "thanks",
    "let",
    "let",
    "going",
    "ask",
    "password",
    "let",
    "keep",
    "simple",
    "use",
    "password",
    "click",
    "create",
    "let",
    "save",
    "password",
    "see",
    "important",
    "secret",
    "backup",
    "phrase",
    "phrase",
    "important",
    "concept",
    "verification",
    "password",
    "plus",
    "phrase",
    "use",
    "want",
    "import",
    "wallet",
    "something",
    "clicking",
    "pausing",
    "video",
    "get",
    "text",
    "okay",
    "might",
    "might",
    "get",
    "12",
    "words",
    "remember",
    "sequence",
    "words",
    "okay",
    "got",
    "words",
    "see",
    "got",
    "words",
    "blurred",
    "want",
    "show",
    "phrase",
    "different",
    "everyone",
    "know",
    "choose",
    "things",
    "sequence",
    "format",
    "easy",
    "thing",
    "right",
    "let",
    "say",
    "means",
    "quickly",
    "done",
    "simply",
    "click",
    "current",
    "form",
    "got",
    "meta",
    "mask",
    "account",
    "click",
    "done",
    "see",
    "connected",
    "main",
    "network",
    "done",
    "right",
    "machine",
    "connected",
    "e",
    "theorem",
    "main",
    "network",
    "confirm",
    "see",
    "says",
    "main",
    "theorem",
    "network",
    "account",
    "details",
    "public",
    "address",
    "simply",
    "copy",
    "basically",
    "also",
    "click",
    "details",
    "qr",
    "code",
    "vista",
    "gave",
    "amazing",
    "thing",
    "amazing",
    "website",
    "task",
    "dot",
    "io",
    "track",
    "activities",
    "using",
    "address",
    "details",
    "let",
    "click",
    "account",
    "scan",
    "see",
    "fresh",
    "new",
    "account",
    "transactions",
    "great",
    "current",
    "price",
    "ether",
    "guess",
    "let",
    "go",
    "back",
    "want",
    "get",
    "money",
    "want",
    "heat",
    "right",
    "see",
    "got",
    "0",
    "ethos",
    "buy",
    "want",
    "investment",
    "ensure",
    "working",
    "main",
    "network",
    "actually",
    "work",
    "test",
    "networks",
    "let",
    "go",
    "incubate",
    "test",
    "network",
    "let",
    "click",
    "still",
    "got",
    "zero",
    "ether",
    "bad",
    "anything",
    "get",
    "ethers",
    "ear",
    "simple",
    "actually",
    "see",
    "option",
    "deposit",
    "click",
    "say",
    "want",
    "go",
    "test",
    "faucet",
    "let",
    "use",
    "tests",
    "obvious",
    "ether",
    "okay",
    "pay",
    "exactly",
    "see",
    "show",
    "could",
    "take",
    "take",
    "website",
    "data",
    "want",
    "let",
    "click",
    "crypto",
    "faucet",
    "get",
    "free",
    "ethers",
    "basically",
    "says",
    "want",
    "get",
    "eighth",
    "share",
    "address",
    "social",
    "network",
    "twitter",
    "facebook",
    "guess",
    "running",
    "anymore",
    "twitter",
    "facebook",
    "let",
    "use",
    "use",
    "facebook",
    "lot",
    "let",
    "okay",
    "copy",
    "network",
    "address",
    "see",
    "copy",
    "address",
    "go",
    "facebook",
    "facebook",
    "account",
    "say",
    "need",
    "type",
    "anything",
    "want",
    "okay",
    "get",
    "text",
    "kid",
    "address",
    "let",
    "fact",
    "keep",
    "post",
    "use",
    "go",
    "facebook",
    "check",
    "post",
    "address",
    "click",
    "share",
    "sharing",
    "facebook",
    "let",
    "get",
    "address",
    "one",
    "way",
    "know",
    "get",
    "pols",
    "address",
    "see",
    "got",
    "address",
    "bar",
    "address",
    "let",
    "copy",
    "go",
    "back",
    "thing",
    "paste",
    "let",
    "paste",
    "click",
    "give",
    "third",
    "want",
    "let",
    "say",
    "80",
    "ethers",
    "three",
    "days",
    "click",
    "time",
    "capture",
    "looks",
    "like",
    "got",
    "ether",
    "go",
    "back",
    "link",
    "refresh",
    "something",
    "working",
    "yesterday",
    "got",
    "different",
    "account",
    "maybe",
    "one",
    "account",
    "provide",
    "little",
    "bit",
    "days",
    "asked",
    "three",
    "days",
    "either",
    "working",
    "going",
    "video",
    "gets",
    "import",
    "work",
    "try",
    "get",
    "eaters",
    "set",
    "meta",
    "mask",
    "getting",
    "well",
    "getting",
    "approximately",
    "88",
    "oz",
    "use",
    "try",
    "network",
    "use",
    "r",
    "link",
    "lob",
    "stone",
    "try",
    "got",
    "got",
    "meta",
    "mask",
    "next",
    "thing",
    "write",
    "code",
    "course",
    "want",
    "write",
    "code",
    "somewhere",
    "missing",
    "website",
    "use",
    "research",
    "remix",
    "etherium",
    "website",
    "go",
    "solidity",
    "ide",
    "want",
    "want",
    "write",
    "soy",
    "decode",
    "right",
    "say",
    "give",
    "code",
    "want",
    "fact",
    "next",
    "video",
    "write",
    "first",
    "mat",
    "contract",
    "plating",
    "first",
    "excel",
    "file",
    "solid",
    "ad",
    "programming",
    "add",
    "new",
    "files",
    "see",
    "two",
    "files",
    "delete",
    "delete",
    "create",
    "setup",
    "need",
    "meta",
    "mask",
    "need",
    "ethers",
    "need",
    "way",
    "connect",
    "turn",
    "network",
    "second",
    "thing",
    "need",
    "ide",
    "using",
    "remix",
    "online",
    "ide",
    "salty",
    "video",
    "like",
    "forth",
    "contract",
    "earlier",
    "video",
    "talked",
    "setup",
    "tomas",
    "get",
    "eaters",
    "issue",
    "eaters",
    "received",
    "machine",
    "tried",
    "steps",
    "receive",
    "eaters",
    "problem",
    "two",
    "days",
    "back",
    "asked",
    "eaters",
    "facebook",
    "account",
    "maybe",
    "issue",
    "twitter",
    "got",
    "three",
    "eaters",
    "guess",
    "go",
    "thomas",
    "see",
    "got",
    "three",
    "eaters",
    "tagged",
    "entrain",
    "b",
    "network",
    "great",
    "let",
    "use",
    "okay",
    "let",
    "go",
    "remix",
    "ide",
    "see",
    "font",
    "visible",
    "first",
    "delete",
    "two",
    "things",
    "want",
    "code",
    "want",
    "get",
    "oh",
    "one",
    "let",
    "see",
    "clean",
    "got",
    "clean",
    "slate",
    "increase",
    "font",
    "size",
    "way",
    "see",
    "see",
    "plus",
    "sign",
    "another",
    "think",
    "visible",
    "let",
    "create",
    "first",
    "file",
    "let",
    "make",
    "bank",
    "balance",
    "bank",
    "account",
    "bank",
    "account",
    "add",
    "money",
    "withdraw",
    "money",
    "want",
    "simple",
    "task",
    "bank",
    "account",
    "balance",
    "might",
    "add",
    "balance",
    "might",
    "withdraw",
    "balance",
    "say",
    "deposit",
    "withdraw",
    "let",
    "let",
    "create",
    "first",
    "file",
    "click",
    "plus",
    "give",
    "name",
    "let",
    "say",
    "bank",
    "dot",
    "l",
    "saw",
    "sol",
    "sorry",
    "let",
    "click",
    "ok",
    "see",
    "call",
    "file",
    "type",
    "code",
    "okay",
    "first",
    "set",
    "compiler",
    "levels",
    "compiled",
    "level",
    "get",
    "new",
    "updates",
    "possibility",
    "syntax",
    "might",
    "change",
    "might",
    "get",
    "new",
    "features",
    "let",
    "stick",
    "older",
    "version",
    "compiler",
    "always",
    "works",
    "decide",
    "way",
    "saying",
    "drag",
    "drag",
    "mouth",
    "mention",
    "language",
    "name",
    "using",
    "solidity",
    "mention",
    "version",
    "number",
    "go",
    "back",
    "see",
    "list",
    "compiler",
    "use",
    "five",
    "point",
    "zero",
    "point",
    "seven",
    "thing",
    "work",
    "let",
    "stick",
    "things",
    "everyone",
    "uses",
    "nowadays",
    "zero",
    "point",
    "four",
    "point",
    "two",
    "five",
    "let",
    "mention",
    "point",
    "two",
    "five",
    "okay",
    "defining",
    "compile",
    "level",
    "next",
    "thing",
    "contract",
    "want",
    "right",
    "witness",
    "syntax",
    "first",
    "solidity",
    "derived",
    "javascript",
    "know",
    "javascript",
    "well",
    "damn",
    "easy",
    "even",
    "know",
    "java",
    "almost",
    "getting",
    "class",
    "let",
    "go",
    "steps",
    "let",
    "create",
    "first",
    "contract",
    "let",
    "say",
    "want",
    "say",
    "contract",
    "say",
    "contract",
    "mention",
    "name",
    "contract",
    "case",
    "stick",
    "bank",
    "let",
    "create",
    "contract",
    "bank",
    "say",
    "bank",
    "transaction",
    "need",
    "name",
    "file",
    "name",
    "name",
    "matter",
    "ok",
    "need",
    "variable",
    "need",
    "variable",
    "name",
    "place",
    "hold",
    "data",
    "first",
    "say",
    "bank",
    "account",
    "every",
    "account",
    "balance",
    "let",
    "say",
    "ai",
    "bad",
    "say",
    "balanced",
    "state",
    "datatype",
    "balance",
    "balances",
    "time",
    "8",
    "also",
    "go",
    "double",
    "want",
    "let",
    "stick",
    "inc",
    "got",
    "contract",
    "got",
    "variable",
    "ai",
    "go",
    "job",
    "background",
    "javascript",
    "background",
    "sorry",
    "mean",
    "assuming",
    "know",
    "least",
    "one",
    "programming",
    "language",
    "sharp",
    "javascript",
    "java",
    "php",
    "python",
    "choice",
    "going",
    "create",
    "punch",
    "structure",
    "compulsory",
    "let",
    "would",
    "say",
    "constructor",
    "create",
    "constructor",
    "java",
    "language",
    "use",
    "class",
    "thing",
    "say",
    "constructor",
    "give",
    "package",
    "also",
    "mention",
    "specifier",
    "access",
    "level",
    "say",
    "public",
    "accessible",
    "anywhere",
    "real",
    "java",
    "java",
    "write",
    "side",
    "makes",
    "much",
    "sense",
    "right",
    "get",
    "used",
    "let",
    "set",
    "balance",
    "necessary",
    "let",
    "say",
    "1",
    "want",
    "everyone",
    "balance",
    "least",
    "one",
    "dollar",
    "one",
    "rupee",
    "whatever",
    "ok",
    "get",
    "constructor",
    "need",
    "get",
    "method",
    "nothing",
    "say",
    "balance",
    "course",
    "get",
    "option",
    "depositing",
    "money",
    "draw",
    "money",
    "want",
    "check",
    "balance",
    "right",
    "let",
    "create",
    "functions",
    "want",
    "perform",
    "operations",
    "get",
    "functions",
    "okay",
    "three",
    "functions",
    "right",
    "let",
    "create",
    "done",
    "want",
    "function",
    "say",
    "function",
    "ok",
    "use",
    "function",
    "name",
    "initially",
    "want",
    "get",
    "balance",
    "let",
    "say",
    "get",
    "balance",
    "using",
    "canvassing",
    "rules",
    "confirm",
    "job",
    "let",
    "save",
    "function",
    "name",
    "function",
    "get",
    "balance",
    "look",
    "like",
    "normal",
    "programming",
    "language",
    "right",
    "done",
    "simply",
    "save",
    "returns",
    "ballad",
    "written",
    "balanced",
    "one",
    "method",
    "function",
    "let",
    "get",
    "one",
    "function",
    "draw",
    "say",
    "withdraw",
    "say",
    "draw",
    "course",
    "also",
    "pass",
    "amount",
    "like",
    "much",
    "amount",
    "want",
    "withdraw",
    "case",
    "would",
    "say",
    "h",
    "amount",
    "variable",
    "name",
    "well",
    "say",
    "balance",
    "equal",
    "balance",
    "able",
    "analyze",
    "remove",
    "money",
    "balance",
    "equal",
    "balance",
    "amount",
    "missing",
    "something",
    "yes",
    "every",
    "method",
    "every",
    "function",
    "need",
    "specify",
    "public",
    "well",
    "say",
    "public",
    "done",
    "create",
    "one",
    "method",
    "depositing",
    "money",
    "say",
    "function",
    "deposit",
    "specify",
    "amount",
    "much",
    "money",
    "put",
    "deposit",
    "let",
    "mention",
    "public",
    "specifier",
    "say",
    "balance",
    "equal",
    "balance",
    "say",
    "deposit",
    "adding",
    "money",
    "right",
    "say",
    "balance",
    "plus",
    "amount",
    "simple",
    "one",
    "right",
    "work",
    "certain",
    "changes",
    "first",
    "one",
    "say",
    "two",
    "methods",
    "withdraw",
    "deposit",
    "changing",
    "value",
    "object",
    "maybe",
    "look",
    "two",
    "function",
    "withdraw",
    "deposit",
    "changing",
    "value",
    "balance",
    "means",
    "operations",
    "get",
    "balance",
    "get",
    "balance",
    "changing",
    "value",
    "right",
    "case",
    "mention",
    "view",
    "say",
    "view",
    "means",
    "fetching",
    "value",
    "mind",
    "updating",
    "data",
    "save",
    "since",
    "also",
    "returns",
    "value",
    "say",
    "returns",
    "also",
    "mention",
    "type",
    "return",
    "say",
    "turns",
    "inc",
    "done",
    "nothing",
    "mode",
    "one",
    "says",
    "change",
    "pragma",
    "zero",
    "zero",
    "point",
    "four",
    "point",
    "said",
    "let",
    "change",
    "compile",
    "number",
    "set",
    "zero",
    "point",
    "four",
    "point",
    "two",
    "five",
    "tournesol",
    "issue",
    "new",
    "version",
    "see",
    "older",
    "version",
    "zero",
    "point",
    "four",
    "point",
    "two",
    "five",
    "fact",
    "also",
    "use",
    "newer",
    "versions",
    "later",
    "videos",
    "one",
    "works",
    "see",
    "compile",
    "time",
    "error",
    "done",
    "code",
    "time",
    "come",
    "convert",
    "according",
    "bite",
    "good",
    "opcode",
    "opcode",
    "work",
    "virtual",
    "machine",
    "attend",
    "network",
    "whatever",
    "say",
    "start",
    "compile",
    "come",
    "bad",
    "think",
    "issue",
    "may",
    "able",
    "simply",
    "use",
    "auto",
    "compile",
    "work",
    "guess",
    "compile",
    "issue",
    "run",
    "code",
    "put",
    "code",
    "click",
    "run",
    "tab",
    "see",
    "moment",
    "click",
    "run",
    "tab",
    "option",
    "see",
    "environment",
    "first",
    "environment",
    "javascript",
    "via",
    "vm",
    "vm",
    "work",
    "run",
    "browser",
    "said",
    "know",
    "use",
    "meta",
    "mas",
    "create",
    "environment",
    "machine",
    "see",
    "whatever",
    "code",
    "think",
    "run",
    "machine",
    "select",
    "vm",
    "also",
    "select",
    "file",
    "working",
    "see",
    "working",
    "bank",
    "might",
    "multiple",
    "files",
    "click",
    "click",
    "deploy",
    "moment",
    "click",
    "deploy",
    "see",
    "got",
    "options",
    "grows",
    "scroll",
    "mention",
    "everything",
    "hash",
    "value",
    "gas",
    "requires",
    "transaction",
    "everything",
    "see",
    "got",
    "tails",
    "okay",
    "means",
    "app",
    "deployed",
    "run",
    "right",
    "learn",
    "see",
    "option",
    "deployed",
    "contracts",
    "let",
    "expand",
    "see",
    "got",
    "three",
    "buttons",
    "two",
    "color",
    "changing",
    "value",
    "balance",
    "one",
    "changing",
    "value",
    "different",
    "color",
    "first",
    "let",
    "click",
    "get",
    "balance",
    "see",
    "balance",
    "one",
    "y1",
    "default",
    "value",
    "given",
    "1",
    "great",
    "let",
    "deposit",
    "money",
    "drawing",
    "let",
    "deposit",
    "100",
    "click",
    "deposit",
    "know",
    "done",
    "let",
    "look",
    "let",
    "click",
    "balance",
    "see",
    "call",
    "balance",
    "1",
    "0",
    "1",
    "great",
    "let",
    "redraw",
    "amount",
    "let",
    "withdraw",
    "80",
    "click",
    "ok",
    "first",
    "click",
    "withdraw",
    "done",
    "get",
    "balance",
    "21",
    "see",
    "everything",
    "happening",
    "fast",
    "everything",
    "happening",
    "machine",
    "main",
    "network",
    "moment",
    "may",
    "work",
    "take",
    "time",
    "okay",
    "see",
    "every",
    "time",
    "face",
    "balance",
    "transaction",
    "one",
    "thing",
    "every",
    "time",
    "calculations",
    "example",
    "add",
    "400",
    "say",
    "deposit",
    "consuming",
    "gas",
    "ok",
    "charging",
    "gas",
    "machine",
    "environment",
    "boss",
    "everything",
    "working",
    "video",
    "continue",
    "left",
    "last",
    "video",
    "last",
    "way",
    "talked",
    "smart",
    "contract",
    "right",
    "fact",
    "written",
    "first",
    "smart",
    "contract",
    "running",
    "local",
    "javascript",
    "virtual",
    "machine",
    "look",
    "environment",
    "java",
    "javascript",
    "virtual",
    "machine",
    "getting",
    "addresses",
    "record",
    "five",
    "address",
    "use",
    "deploy",
    "application",
    "deploy",
    "test",
    "depositing",
    "money",
    "withdrawing",
    "money",
    "want",
    "run",
    "thing",
    "test",
    "network",
    "want",
    "run",
    "javascript",
    "vm",
    "local",
    "want",
    "run",
    "test",
    "network",
    "maybe",
    "main",
    "network",
    "want",
    "achieve",
    "use",
    "injected",
    "web",
    "3",
    "moment",
    "select",
    "see",
    "default",
    "option",
    "got",
    "ring",
    "b",
    "meta",
    "mask",
    "accounts",
    "actually",
    "getting",
    "fetched",
    "meta",
    "mask",
    "right",
    "expand",
    "meta",
    "mask",
    "see",
    "link",
    "bit",
    "text",
    "network",
    "let",
    "switch",
    "account",
    "see",
    "winged",
    "bit",
    "test",
    "network",
    "three",
    "ethers",
    "use",
    "transactions",
    "fact",
    "also",
    "move",
    "ring",
    "b",
    "main",
    "network",
    "moment",
    "see",
    "ask",
    "reloading",
    "page",
    "let",
    "reload",
    "page",
    "done",
    "let",
    "go",
    "back",
    "run",
    "see",
    "web",
    "3",
    "select",
    "jquery",
    "got",
    "one",
    "address",
    "main",
    "network",
    "switch",
    "switch",
    "amass",
    "option",
    "go",
    "back",
    "want",
    "work",
    "main",
    "work",
    "currency",
    "let",
    "switch",
    "language",
    "network",
    "let",
    "reload",
    "yeah",
    "inject",
    "web",
    "3",
    "say",
    "account",
    "got",
    "one",
    "address",
    "one",
    "accord",
    "guess",
    "two",
    "accounts",
    "say",
    "one",
    "want",
    "ok",
    "want",
    "deploy",
    "link",
    "test",
    "network",
    "want",
    "achieve",
    "select",
    "code",
    "working",
    "working",
    "bank",
    "let",
    "click",
    "deploy",
    "moment",
    "deploy",
    "done",
    "test",
    "network",
    "right",
    "running",
    "actual",
    "network",
    "course",
    "spend",
    "ethers",
    "okay",
    "buying",
    "eaters",
    "way",
    "using",
    "theatres",
    "remember",
    "spend",
    "ethers",
    "even",
    "deployment",
    "deploy",
    "pay",
    "eaters",
    "every",
    "time",
    "someone",
    "else",
    "using",
    "network",
    "pay",
    "ethers",
    "every",
    "time",
    "transactions",
    "application",
    "paying",
    "gas",
    "fee",
    "moment",
    "pop",
    "meta",
    "meta",
    "mass",
    "notification",
    "say",
    "okay",
    "confirm",
    "let",
    "click",
    "confirm",
    "see",
    "get",
    "deployed",
    "address",
    "let",
    "click",
    "address",
    "take",
    "scan",
    "dot",
    "io",
    "see",
    "test",
    "network",
    "set",
    "way",
    "still",
    "says",
    "pending",
    "takes",
    "time",
    "get",
    "mind",
    "guess",
    "done",
    "let",
    "refresh",
    "page",
    "see",
    "success",
    "initially",
    "pending",
    "success",
    "god",
    "address",
    "see",
    "see",
    "block",
    "number",
    "anything",
    "else",
    "hash",
    "let",
    "go",
    "back",
    "mix",
    "see",
    "deployed",
    "deploy",
    "point",
    "right",
    "let",
    "go",
    "back",
    "perform",
    "operation",
    "get",
    "balanced",
    "charge",
    "anything",
    "see",
    "balance",
    "one",
    "done",
    "code",
    "let",
    "zoom",
    "code",
    "one",
    "balance",
    "want",
    "deposit",
    "money",
    "let",
    "say",
    "want",
    "deposit",
    "300",
    "moment",
    "click",
    "deposit",
    "charge",
    "right",
    "transaction",
    "change",
    "values",
    "pay",
    "gas",
    "phase",
    "click",
    "confirm",
    "important",
    "right",
    "give",
    "notification",
    "case",
    "notifications",
    "blocked",
    "browser",
    "sometime",
    "happens",
    "well",
    "go",
    "show",
    "confirm",
    "since",
    "working",
    "machine",
    "deposit",
    "confirm",
    "done",
    "takes",
    "time",
    "see",
    "say",
    "get",
    "balance",
    "still",
    "balance",
    "1",
    "takes",
    "time",
    "deploy",
    "see",
    "got",
    "consumption",
    "let",
    "click",
    "get",
    "balance",
    "see",
    "3",
    "0",
    "1",
    "also",
    "bit",
    "draw",
    "let",
    "say",
    "want",
    "draw",
    "1",
    "0",
    "1",
    "let",
    "click",
    "fit",
    "draw",
    "guess",
    "pay",
    "gas",
    "fee",
    "let",
    "ok",
    "take",
    "time",
    "let",
    "verify",
    "still",
    "pending",
    "done",
    "sit",
    "says",
    "pending",
    "get",
    "link",
    "console",
    "see",
    "page",
    "fact",
    "browser",
    "also",
    "give",
    "notification",
    "confirmed",
    "let",
    "wait",
    "okay",
    "click",
    "get",
    "got",
    "200",
    "works",
    "use",
    "test",
    "network",
    "thing",
    "want",
    "spend",
    "money",
    "main",
    "network",
    "using",
    "ring",
    "b",
    "thing",
    "work",
    "main",
    "network",
    "consider",
    "go",
    "back",
    "meta",
    "mask",
    "switch",
    "back",
    "main",
    "network",
    "buy",
    "meters",
    "good",
    "go",
    "see",
    "initially",
    "around",
    "3",
    "2",
    "point",
    "9",
    "9",
    "9",
    "8",
    "eaters",
    "yes",
    "spent",
    "ether",
    "0",
    "use",
    "ring",
    "b",
    "network",
    "test",
    "application",
    "hope",
    "got",
    "idea",
    "video",
    "work",
    "ring",
    "remix",
    "next",
    "video",
    "something",
    "amazing",
    "fact",
    "next",
    "video",
    "try",
    "connect",
    "front",
    "end",
    "blockchain",
    "say",
    "front",
    "end",
    "normal",
    "web",
    "page",
    "may",
    "simple",
    "web",
    "page",
    "connect",
    "blockchain",
    "video",
    "trying",
    "connect",
    "smart",
    "contract",
    "done",
    "front",
    "end",
    "say",
    "trying",
    "10",
    "normal",
    "search",
    "page",
    "android",
    "application",
    "keep",
    "simple",
    "supports",
    "let",
    "stick",
    "webpage",
    "development",
    "create",
    "simple",
    "web",
    "page",
    "try",
    "connect",
    "smart",
    "contract",
    "nothing",
    "thing",
    "say",
    "blockchain",
    "replacing",
    "lot",
    "different",
    "technologies",
    "right",
    "companies",
    "moving",
    "centralized",
    "system",
    "distributed",
    "systems",
    "yes",
    "changing",
    "lot",
    "terms",
    "enterprise",
    "network",
    "changing",
    "terms",
    "currency",
    "market",
    "normal",
    "companies",
    "let",
    "talk",
    "facebook",
    "think",
    "facebook",
    "facebook",
    "server",
    "right",
    "ai",
    "user",
    "access",
    "pages",
    "laptop",
    "see",
    "screen",
    "maybe",
    "login",
    "page",
    "messages",
    "page",
    "feeds",
    "data",
    "actually",
    "coming",
    "actual",
    "server",
    "processing",
    "happening",
    "server",
    "right",
    "amazing",
    "thing",
    "user",
    "even",
    "know",
    "technology",
    "using",
    "backend",
    "using",
    "sure",
    "using",
    "php",
    "java",
    "isp",
    "care",
    "care",
    "user",
    "able",
    "access",
    "data",
    "even",
    "future",
    "facebook",
    "changing",
    "technology",
    "centralized",
    "application",
    "distributed",
    "system",
    "affect",
    "us",
    "question",
    "moment",
    "change",
    "server",
    "moment",
    "talk",
    "know",
    "first",
    "thing",
    "done",
    "smart",
    "contracts",
    "blockchain",
    "user",
    "get",
    "page",
    "different",
    "page",
    "question",
    "mind",
    "long",
    "time",
    "answer",
    "get",
    "page",
    "change",
    "backend",
    "part",
    "changing",
    "example",
    "try",
    "prove",
    "whatever",
    "see",
    "cost",
    "pot",
    "contract",
    "trying",
    "withdraw",
    "money",
    "trying",
    "deposit",
    "money",
    "trying",
    "get",
    "balance",
    "able",
    "access",
    "functionality",
    "buttons",
    "right",
    "think",
    "normal",
    "application",
    "user",
    "want",
    "access",
    "web",
    "page",
    "operation",
    "type",
    "screen",
    "see",
    "code",
    "well",
    "want",
    "fit",
    "page",
    "see",
    "let",
    "get",
    "started",
    "first",
    "thing",
    "need",
    "understand",
    "certain",
    "terms",
    "first",
    "one",
    "go",
    "compile",
    "concept",
    "api",
    "click",
    "details",
    "see",
    "abi",
    "b",
    "highs",
    "certain",
    "jason",
    "codes",
    "see",
    "basic",
    "adjacent",
    "code",
    "expand",
    "need",
    "thing",
    "want",
    "connect",
    "webpage",
    "smart",
    "contract",
    "require",
    "two",
    "things",
    "first",
    "one",
    "need",
    "api",
    "second",
    "thing",
    "need",
    "go",
    "run",
    "address",
    "deployed",
    "ring",
    "b",
    "nots",
    "previous",
    "video",
    "would",
    "suggest",
    "created",
    "smart",
    "contract",
    "connected",
    "test",
    "network",
    "got",
    "decide",
    "assign",
    "important",
    "need",
    "two",
    "things",
    "api",
    "particular",
    "address",
    "let",
    "get",
    "started",
    "need",
    "one",
    "thing",
    "fact",
    "need",
    "certain",
    "things",
    "need",
    "good",
    "ide",
    "use",
    "html",
    "id",
    "want",
    "use",
    "visual",
    "studio",
    "code",
    "use",
    "act",
    "item",
    "use",
    "sublime",
    "choice",
    "using",
    "rodeo",
    "let",
    "open",
    "vs",
    "visual",
    "studio",
    "goal",
    "idea",
    "machine",
    "fact",
    "use",
    "idea",
    "boy",
    "also",
    "use",
    "eclipse",
    "netbeans",
    "also",
    "need",
    "server",
    "running",
    "page",
    "like",
    "got",
    "visual",
    "studio",
    "code",
    "simply",
    "go",
    "google",
    "search",
    "visual",
    "studio",
    "code",
    "download",
    "get",
    "setup",
    "matter",
    "mac",
    "linux",
    "windows",
    "options",
    "difficult",
    "say",
    "next",
    "next",
    "next",
    "work",
    "return",
    "done",
    "next",
    "thing",
    "need",
    "npm",
    "see",
    "type",
    "code",
    "also",
    "want",
    "run",
    "right",
    "want",
    "run",
    "html",
    "also",
    "jquery",
    "want",
    "run",
    "need",
    "simple",
    "server",
    "host",
    "also",
    "web",
    "server",
    "web",
    "server",
    "actual",
    "web",
    "server",
    "also",
    "local",
    "machine",
    "use",
    "different",
    "servers",
    "available",
    "light",
    "http",
    "server",
    "install",
    "http",
    "server",
    "using",
    "npm",
    "install",
    "npm",
    "go",
    "search",
    "npm",
    "download",
    "go",
    "depend",
    "upon",
    "easy",
    "setup",
    "nothing",
    "nothing",
    "worry",
    "thing",
    "downloaded",
    "go",
    "program",
    "files",
    "go",
    "software",
    "npm",
    "node",
    "copy",
    "path",
    "go",
    "back",
    "environment",
    "variables",
    "set",
    "path",
    "hope",
    "know",
    "simple",
    "actually",
    "google",
    "visual",
    "studio",
    "npm",
    "ready",
    "let",
    "install",
    "http",
    "server",
    "go",
    "back",
    "visual",
    "studio",
    "install",
    "server",
    "use",
    "npm",
    "right",
    "also",
    "set",
    "path",
    "make",
    "sure",
    "setting",
    "path",
    "restart",
    "vision",
    "studio",
    "click",
    "terminal",
    "click",
    "new",
    "terminal",
    "see",
    "terminal",
    "area",
    "based",
    "os",
    "using",
    "using",
    "mac",
    "next",
    "see",
    "terminal",
    "actual",
    "terminal",
    "command",
    "prompt",
    "calling",
    "terminal",
    "matter",
    "fact",
    "oh",
    "opening",
    "terminal",
    "make",
    "sure",
    "create",
    "folder",
    "desktop",
    "documents",
    "make",
    "sure",
    "folder",
    "put",
    "file",
    "folder",
    "created",
    "folder",
    "bank",
    "web",
    "app",
    "blank",
    "folder",
    "empty",
    "folder",
    "see",
    "folder",
    "web",
    "bank",
    "web",
    "app",
    "like",
    "see",
    "empty",
    "got",
    "folder",
    "folder",
    "want",
    "create",
    "page",
    "right",
    "see",
    "got",
    "terminal",
    "wanted",
    "path",
    "want",
    "go",
    "go",
    "manually",
    "got",
    "path",
    "got",
    "folder",
    "write",
    "code",
    "right",
    "want",
    "install",
    "http",
    "server",
    "say",
    "npm",
    "install",
    "want",
    "make",
    "globally",
    "software",
    "name",
    "actually",
    "pasaba",
    "let",
    "say",
    "click",
    "amazing",
    "thing",
    "set",
    "take",
    "less",
    "time",
    "make",
    "might",
    "take",
    "time",
    "go",
    "actually",
    "pc",
    "server",
    "next",
    "step",
    "start",
    "way",
    "saying",
    "http",
    "server",
    "moment",
    "say",
    "enter",
    "take",
    "time",
    "see",
    "server",
    "started",
    "started",
    "url",
    "localhost",
    "colon",
    "8080",
    "order",
    "access",
    "go",
    "browser",
    "say",
    "localhost",
    "colon",
    "8080",
    "ok",
    "see",
    "server",
    "running",
    "node",
    "server",
    "want",
    "replace",
    "page",
    "let",
    "go",
    "back",
    "let",
    "create",
    "simple",
    "file",
    "click",
    "want",
    "find",
    "index",
    "dot",
    "html",
    "phylum",
    "matter",
    "actually",
    "let",
    "get",
    "started",
    "first",
    "thing",
    "need",
    "html",
    "tags",
    "type",
    "ui",
    "need",
    "need",
    "text",
    "field",
    "enter",
    "amount",
    "getting",
    "witten",
    "like",
    "withdraw",
    "deposit",
    "code",
    "pasted",
    "save",
    "time",
    "see",
    "got",
    "input",
    "text",
    "field",
    "got",
    "three",
    "tank",
    "show",
    "balance",
    "got",
    "two",
    "buttons",
    "deposit",
    "draw",
    "body",
    "time",
    "perform",
    "operations",
    "let",
    "see",
    "coming",
    "normal",
    "text",
    "live",
    "fish",
    "see",
    "got",
    "different",
    "ui",
    "fact",
    "balance",
    "empty",
    "ca",
    "see",
    "anything",
    "enter",
    "values",
    "click",
    "deposit",
    "nothing",
    "happen",
    "put",
    "right",
    "click",
    "deposit",
    "deposited",
    "actual",
    "smart",
    "contract",
    "running",
    "one",
    "dropped",
    "let",
    "performing",
    "operations",
    "buttons",
    "right",
    "need",
    "walk",
    "jquery",
    "one",
    "thing",
    "second",
    "thing",
    "connect",
    "web",
    "application",
    "web",
    "page",
    "epin",
    "blockchain",
    "got",
    "amazing",
    "library",
    "named",
    "web",
    "3",
    "go",
    "google",
    "search",
    "web",
    "3",
    "web",
    "play",
    "github",
    "link",
    "notes",
    "well",
    "see",
    "api",
    "atheneum",
    "blockchain",
    "application",
    "use",
    "fact",
    "also",
    "install",
    "machine",
    "using",
    "npm",
    "odd",
    "use",
    "javascript",
    "library",
    "example",
    "use",
    "javascript",
    "library",
    "provide",
    "order",
    "say",
    "download",
    "web",
    "click",
    "download",
    "take",
    "link",
    "download",
    "fact",
    "also",
    "issue",
    "proper",
    "version",
    "know",
    "cover",
    "going",
    "developer",
    "version",
    "one",
    "thing",
    "otherwise",
    "provide",
    "link",
    "sirian",
    "web",
    "3",
    "use",
    "working",
    "know",
    "working",
    "tried",
    "download",
    "maybe",
    "works",
    "know",
    "maybe",
    "trying",
    "work",
    "always",
    "updates",
    "might",
    "bug",
    "tried",
    "try",
    "mining",
    "working",
    "two",
    "script",
    "one",
    "jquery",
    "one",
    "web",
    "three",
    "done",
    "add",
    "script",
    "one",
    "see",
    "one",
    "web",
    "three",
    "second",
    "jquery",
    "done",
    "need",
    "perform",
    "certain",
    "operations",
    "first",
    "one",
    "need",
    "moment",
    "load",
    "page",
    "want",
    "show",
    "balance",
    "whatever",
    "balance",
    "blockchain",
    "right",
    "fact",
    "gives",
    "check",
    "balance",
    "go",
    "say",
    "get",
    "balance",
    "current",
    "balance",
    "200",
    "want",
    "fetch",
    "first",
    "thing",
    "need",
    "script",
    "tag",
    "say",
    "script",
    "inside",
    "prepped",
    "want",
    "connect",
    "contractor",
    "smart",
    "contract",
    "let",
    "create",
    "object",
    "hold",
    "say",
    "contract",
    "going",
    "fetch",
    "contract",
    "details",
    "page",
    "loaded",
    "way",
    "saying",
    "dollar",
    "document",
    "ready",
    "anyway",
    "ready",
    "let",
    "perform",
    "function",
    "let",
    "perform",
    "operations",
    "need",
    "whenever",
    "function",
    "whenever",
    "page",
    "ready",
    "want",
    "first",
    "create",
    "object",
    "initialize",
    "object",
    "web",
    "click",
    "ok",
    "get",
    "insert",
    "syntax",
    "simple",
    "web",
    "3",
    "equal",
    "say",
    "new",
    "web",
    "3",
    "instantiate",
    "objects",
    "bracket",
    "specify",
    "current",
    "provider",
    "using",
    "tomas",
    "connected",
    "ring",
    "b",
    "provided",
    "right",
    "let",
    "use",
    "say",
    "web",
    "provider",
    "depends",
    "using",
    "using",
    "injected",
    "provider",
    "use",
    "fact",
    "see",
    "options",
    "well",
    "click",
    "see",
    "one",
    "option",
    "web",
    "3",
    "provider",
    "use",
    "ganesh",
    "cli",
    "let",
    "stick",
    "current",
    "provider",
    "object",
    "web",
    "tree",
    "know",
    "confusion",
    "part",
    "right",
    "object",
    "initialization",
    "creating",
    "object",
    "web",
    "actually",
    "coming",
    "library",
    "used",
    "ok",
    "done",
    "next",
    "thing",
    "need",
    "issue",
    "eyes",
    "contract",
    "right",
    "also",
    "able",
    "using",
    "contract",
    "initialize",
    "particular",
    "object",
    "way",
    "saying",
    "new",
    "object",
    "web",
    "3",
    "simply",
    "say",
    "theorem",
    "dot",
    "say",
    "contract",
    "create",
    "object",
    "contract",
    "class",
    "getting",
    "object",
    "unfortunately",
    "fortunately",
    "contract",
    "ask",
    "two",
    "parameters",
    "remember",
    "talked",
    "need",
    "bi",
    "need",
    "address",
    "course",
    "smart",
    "want",
    "get",
    "talking",
    "particular",
    "application",
    "work",
    "smart",
    "right",
    "specify",
    "two",
    "things",
    "abi",
    "address",
    "create",
    "two",
    "variables",
    "first",
    "variable",
    "say",
    "address",
    "value",
    "get",
    "address",
    "getting",
    "address",
    "go",
    "back",
    "smart",
    "contract",
    "pop",
    "see",
    "option",
    "copy",
    "go",
    "back",
    "say",
    "paste",
    "address",
    "next",
    "thing",
    "need",
    "bi",
    "get",
    "abi",
    "get",
    "go",
    "back",
    "compile",
    "details",
    "simply",
    "click",
    "copy",
    "exactly",
    "expand",
    "copy",
    "say",
    "copy",
    "go",
    "back",
    "paste",
    "semicolon",
    "guess",
    "job",
    "done",
    "minimizing",
    "waste",
    "one",
    "lines",
    "yeah",
    "see",
    "address",
    "got",
    "abi",
    "pass",
    "first",
    "thing",
    "pass",
    "abi",
    "second",
    "thing",
    "pass",
    "address",
    "done",
    "done",
    "two",
    "things",
    "though",
    "abi",
    "done",
    "address",
    "done",
    "next",
    "see",
    "got",
    "contact",
    "object",
    "fetch",
    "balance",
    "contract",
    "order",
    "saying",
    "contract",
    "dot",
    "contract",
    "methods",
    "right",
    "three",
    "methods",
    "actually",
    "let",
    "say",
    "methods",
    "dot",
    "want",
    "fetch",
    "data",
    "method",
    "used",
    "go",
    "back",
    "code",
    "method",
    "name",
    "get",
    "balance",
    "call",
    "method",
    "go",
    "back",
    "methods",
    "say",
    "get",
    "balance",
    "get",
    "balance",
    "want",
    "call",
    "method",
    "named",
    "called",
    "calling",
    "right",
    "expecting",
    "value",
    "say",
    "call",
    "actually",
    "call",
    "return",
    "promise",
    "want",
    "fetch",
    "value",
    "set",
    "whatever",
    "value",
    "returning",
    "go",
    "function",
    "basically",
    "javascript",
    "code",
    "explain",
    "outside",
    "want",
    "know",
    "javascript",
    "go",
    "channel",
    "javascript",
    "ladies",
    "watch",
    "idea",
    "give",
    "promise",
    "want",
    "face",
    "data",
    "set",
    "function",
    "say",
    "use",
    "variable",
    "say",
    "balance",
    "whatever",
    "whatever",
    "variable",
    "name",
    "use",
    "okay",
    "fetching",
    "balance",
    "right",
    "got",
    "bag",
    "assign",
    "particular",
    "idea",
    "balanced",
    "right",
    "want",
    "come",
    "say",
    "dollar",
    "let",
    "fetch",
    "particular",
    "id",
    "way",
    "saying",
    "hash",
    "balance",
    "dot",
    "html",
    "pass",
    "balance",
    "thing",
    "page",
    "loaded",
    "want",
    "face",
    "balance",
    "right",
    "wanted",
    "save",
    "hope",
    "work",
    "otherwise",
    "debug",
    "application",
    "always",
    "let",
    "refresh",
    "page",
    "something",
    "happening",
    "okay",
    "got",
    "200",
    "right",
    "amazing",
    "thing",
    "right",
    "let",
    "say",
    "inspect",
    "element",
    "let",
    "go",
    "console",
    "let",
    "see",
    "happening",
    "go",
    "back",
    "say",
    "refresh",
    "see",
    "error",
    "got",
    "200",
    "great",
    "value",
    "actually",
    "coming",
    "blob",
    "chain",
    "mark",
    "point",
    "right",
    "working",
    "depositing",
    "withdrawal",
    "let",
    "say",
    "say",
    "300",
    "click",
    "deposit",
    "want",
    "20",
    "go",
    "smart",
    "contract",
    "save",
    "data",
    "add",
    "block",
    "blockchain",
    "value",
    "500",
    "say",
    "next",
    "video",
    "let",
    "complete",
    "code",
    "started",
    "earlier",
    "till",
    "point",
    "done",
    "go",
    "back",
    "see",
    "many",
    "would",
    "try",
    "reference",
    "page",
    "fetch",
    "balance",
    "blockchain",
    "smart",
    "contract",
    "current",
    "value",
    "see",
    "say",
    "get",
    "balance",
    "200",
    "want",
    "go",
    "back",
    "say",
    "hey",
    "want",
    "add",
    "another",
    "300",
    "want",
    "deposit",
    "money",
    "work",
    "right",
    "go",
    "back",
    "say",
    "hey",
    "get",
    "balance",
    "say",
    "500",
    "know",
    "achieve",
    "go",
    "back",
    "fact",
    "smart",
    "contract",
    "method",
    "deposit",
    "thing",
    "whenever",
    "click",
    "button",
    "front",
    "end",
    "click",
    "button",
    "want",
    "call",
    "particular",
    "method",
    "function",
    "order",
    "achieve",
    "make",
    "particular",
    "button",
    "work",
    "button",
    "name",
    "button",
    "id",
    "deposit",
    "want",
    "perform",
    "operation",
    "click",
    "one",
    "jaskate",
    "want",
    "achieve",
    "simple",
    "say",
    "dollar",
    "idea",
    "deposit",
    "clicking",
    "rent",
    "said",
    "click",
    "click",
    "perform",
    "function",
    "call",
    "function",
    "say",
    "function",
    "function",
    "let",
    "operation",
    "whenever",
    "click",
    "button",
    "deposit",
    "call",
    "particular",
    "function",
    "function",
    "want",
    "first",
    "want",
    "fetch",
    "value",
    "entered",
    "text",
    "field",
    "right",
    "remember",
    "text",
    "field",
    "text",
    "box",
    "amount",
    "want",
    "fetch",
    "data",
    "course",
    "save",
    "somewhere",
    "let",
    "save",
    "amount",
    "initially",
    "amount",
    "0",
    "fetching",
    "value",
    "fact",
    "fetch",
    "value",
    "say",
    "amount",
    "equal",
    "say",
    "pass",
    "inch",
    "bracket",
    "pass",
    "particular",
    "id",
    "say",
    "dollar",
    "hash",
    "amount",
    "say",
    "val",
    "face",
    "value",
    "also",
    "convert",
    "integer",
    "saying",
    "percent",
    "got",
    "value",
    "converted",
    "amount",
    "got",
    "amount",
    "right",
    "want",
    "call",
    "particular",
    "function",
    "even",
    "calling",
    "function",
    "get",
    "b",
    "hold",
    "accounts",
    "course",
    "right",
    "say",
    "draw",
    "say",
    "deposit",
    "read",
    "whole",
    "account",
    "order",
    "simply",
    "say",
    "web",
    "dot",
    "please",
    "web",
    "say",
    "eth",
    "dot",
    "method",
    "name",
    "get",
    "account",
    "get",
    "accounts",
    "give",
    "accounts",
    "promise",
    "want",
    "face",
    "value",
    "say",
    "create",
    "function",
    "want",
    "anonymous",
    "function",
    "function",
    "get",
    "accounts",
    "let",
    "say",
    "five",
    "icons",
    "get",
    "accounts",
    "want",
    "accounts",
    "want",
    "one",
    "let",
    "fetch",
    "one",
    "accounts",
    "provide",
    "want",
    "get",
    "first",
    "account",
    "way",
    "saying",
    "let",
    "get",
    "account",
    "acc",
    "equal",
    "way",
    "french",
    "saying",
    "accounts",
    "want",
    "first",
    "one",
    "use",
    "adder",
    "normally",
    "accounts",
    "array",
    "want",
    "first",
    "account",
    "got",
    "account",
    "need",
    "call",
    "method",
    "deposit",
    "okay",
    "simple",
    "fact",
    "thing",
    "callback",
    "function",
    "say",
    "return",
    "contract",
    "object",
    "contract",
    "dots",
    "done",
    "right",
    "want",
    "call",
    "methods",
    "say",
    "contract",
    "dot",
    "methods",
    "dot",
    "method",
    "name",
    "working",
    "deposit",
    "let",
    "use",
    "deposit",
    "pass",
    "amount",
    "remember",
    "amount",
    "variable",
    "50",
    "pass",
    "instead",
    "saying",
    "say",
    "send",
    "send",
    "also",
    "mention",
    "account",
    "account",
    "want",
    "send",
    "within",
    "country",
    "packets",
    "say",
    "say",
    "account",
    "important",
    "right",
    "account",
    "number",
    "guess",
    "done",
    "yeah",
    "one",
    "one",
    "give",
    "accounts",
    "account",
    "sending",
    "happen",
    "send",
    "response",
    "right",
    "return",
    "something",
    "return",
    "promise",
    "want",
    "face",
    "value",
    "say",
    "fact",
    "promise",
    "two",
    "things",
    "either",
    "success",
    "failure",
    "right",
    "mean",
    "errors",
    "success",
    "case",
    "say",
    "function",
    "course",
    "get",
    "something",
    "say",
    "got",
    "data",
    "transition",
    "heater",
    "service",
    "atx",
    "got",
    "function",
    "want",
    "want",
    "print",
    "whatever",
    "transition",
    "happens",
    "console",
    "say",
    "console",
    "dot",
    "log",
    "say",
    "tx",
    "want",
    "log",
    "whatever",
    "happened",
    "done",
    "also",
    "want",
    "go",
    "worst",
    "case",
    "scenario",
    "sketch",
    "something",
    "goes",
    "wrong",
    "case",
    "also",
    "write",
    "function",
    "x",
    "say",
    "console",
    "dot",
    "log",
    "x",
    "sending",
    "request",
    "sending",
    "method",
    "sending",
    "amount",
    "well",
    "accepting",
    "value",
    "accepting",
    "errors",
    "great",
    "let",
    "save",
    "code",
    "think",
    "done",
    "deposit",
    "works",
    "let",
    "go",
    "back",
    "browser",
    "let",
    "say",
    "refresh",
    "see",
    "balance",
    "balance",
    "200",
    "let",
    "say",
    "3",
    "300",
    "want",
    "deposit",
    "amount",
    "great",
    "something",
    "working",
    "see",
    "asking",
    "permission",
    "means",
    "deposit",
    "button",
    "working",
    "get",
    "success",
    "server",
    "important",
    "know",
    "see",
    "nothing",
    "happening",
    "everything",
    "hanged",
    "okay",
    "thing",
    "transaction",
    "pending",
    "state",
    "right",
    "go",
    "get",
    "block",
    "get",
    "mined",
    "miner",
    "take",
    "time",
    "wait",
    "course",
    "get",
    "result",
    "console",
    "see",
    "got",
    "got",
    "block",
    "hash",
    "block",
    "number",
    "got",
    "digits",
    "wanted",
    "refresh",
    "page",
    "look",
    "balance",
    "got",
    "500",
    "fact",
    "verify",
    "going",
    "solid",
    "e",
    "say",
    "get",
    "balance",
    "504",
    "quite",
    "simple",
    "white",
    "withdraw",
    "want",
    "make",
    "make",
    "one",
    "work",
    "well",
    "want",
    "make",
    "work",
    "say",
    "hundred",
    "say",
    "draw",
    "remove",
    "amount",
    "order",
    "simply",
    "copy",
    "paste",
    "expert",
    "let",
    "copy",
    "paste",
    "say",
    "hey",
    "deposit",
    "withdraw",
    "amount",
    "thing",
    "need",
    "get",
    "accounts",
    "need",
    "pause",
    "account",
    "method",
    "name",
    "withdraw",
    "course",
    "guess",
    "job",
    "done",
    "deposit",
    "withdraw",
    "almost",
    "code",
    "right",
    "let",
    "save",
    "go",
    "back",
    "server",
    "click",
    "maybe",
    "refresh",
    "click",
    "100",
    "click",
    "withdraw",
    "ok",
    "asking",
    "permission",
    "meta",
    "master",
    "vacation",
    "love",
    "click",
    "confirm",
    "problem",
    "solved",
    "guess",
    "yes",
    "went",
    "server",
    "mean",
    "blockchain",
    "server",
    "long",
    "term",
    "went",
    "blockchain",
    "network",
    "ringman",
    "network",
    "record",
    "recording",
    "mind",
    "block",
    "new",
    "block",
    "got",
    "ok",
    "question",
    "got",
    "updated",
    "value",
    "let",
    "refresh",
    "yes",
    "got",
    "400",
    "easy",
    "right",
    "smart",
    "contract",
    "created",
    "two",
    "buttons",
    "deposit",
    "withdraw",
    "able",
    "perform",
    "beauty",
    "right",
    "client",
    "even",
    "know",
    "happening",
    "behind",
    "scene",
    "facebook",
    "something",
    "care",
    "work",
    "smart",
    "contract",
    "hope",
    "enjoying",
    "written",
    "comment",
    "section",
    "subscribe",
    "videos"
  ],
  "keywords": [
    "blockchain",
    "much",
    "say",
    "next",
    "big",
    "thing",
    "industry",
    "internet",
    "also",
    "sure",
    "maybe",
    "two",
    "three",
    "five",
    "option",
    "important",
    "let",
    "get",
    "started",
    "back",
    "start",
    "bitcoins",
    "might",
    "well",
    "work",
    "bitcoin",
    "name",
    "may",
    "one",
    "people",
    "see",
    "created",
    "technology",
    "bit",
    "exactly",
    "talk",
    "basically",
    "right",
    "works",
    "network",
    "call",
    "distributed",
    "central",
    "system",
    "example",
    "money",
    "bank",
    "everything",
    "problem",
    "first",
    "security",
    "second",
    "trust",
    "use",
    "cryptography",
    "concept",
    "achieve",
    "someone",
    "sending",
    "data",
    "available",
    "entire",
    "database",
    "issue",
    "sent",
    "ledger",
    "comes",
    "later",
    "normal",
    "oh",
    "talking",
    "need",
    "something",
    "ok",
    "every",
    "node",
    "working",
    "machine",
    "called",
    "anyone",
    "getting",
    "imagine",
    "simple",
    "file",
    "change",
    "okay",
    "got",
    "side",
    "everyone",
    "want",
    "way",
    "look",
    "whatever",
    "power",
    "changed",
    "able",
    "save",
    "even",
    "know",
    "try",
    "understand",
    "blocks",
    "block",
    "lot",
    "transactions",
    "transaction",
    "else",
    "yes",
    "facebook",
    "store",
    "anything",
    "different",
    "saying",
    "ca",
    "hashing",
    "means",
    "hash",
    "key",
    "algorithm",
    "sha",
    "input",
    "perform",
    "give",
    "matter",
    "length",
    "using",
    "keys",
    "output",
    "text",
    "1",
    "changing",
    "normally",
    "moment",
    "make",
    "affect",
    "take",
    "course",
    "remember",
    "plus",
    "previous",
    "k",
    "b",
    "find",
    "third",
    "c",
    "3",
    "yeah",
    "knows",
    "create",
    "chain",
    "number",
    "connected",
    "help",
    "value",
    "think",
    "done",
    "point",
    "secure",
    "talked",
    "proof",
    "new",
    "hope",
    "video",
    "trying",
    "implement",
    "still",
    "actually",
    "fact",
    "companies",
    "world",
    "stuff",
    "famous",
    "question",
    "field",
    "certain",
    "current",
    "amazing",
    "types",
    "google",
    "running",
    "open",
    "good",
    "online",
    "send",
    "says",
    "hey",
    "link",
    "amount",
    "server",
    "time",
    "wait",
    "applications",
    "decentralized",
    "initially",
    "would",
    "build",
    "application",
    "end",
    "programming",
    "learning",
    "hand",
    "full",
    "easy",
    "difficult",
    "quite",
    "computing",
    "used",
    "based",
    "go",
    "us",
    "going",
    "actual",
    "many",
    "like",
    "search",
    "part",
    "meet",
    "simply",
    "multiple",
    "nodes",
    "goes",
    "read",
    "four",
    "download",
    "confidentiality",
    "fourth",
    "authentication",
    "message",
    "details",
    "received",
    "solve",
    "terms",
    "known",
    "encrypt",
    "decrypt",
    "public",
    "private",
    "case",
    "click",
    "coming",
    "write",
    "virtual",
    "things",
    "type",
    "operations",
    "size",
    "verify",
    "add",
    "miner",
    "software",
    "huge",
    "mind",
    "run",
    "200",
    "install",
    "idea",
    "function",
    "set",
    "guess",
    "0",
    "version",
    "official",
    "website",
    "malicious",
    "particular",
    "tree",
    "ten",
    "p",
    "focus",
    "w",
    "copy",
    "consensus",
    "zero",
    "theorem",
    "address",
    "company",
    "state",
    "win",
    "receive",
    "cryptocurrency",
    "deposit",
    "nothing",
    "drawbacks",
    "10",
    "java",
    "platform",
    "ether",
    "gas",
    "language",
    "javascript",
    "contracts",
    "code",
    "contract",
    "smart",
    "buy",
    "order",
    "product",
    "abc",
    "pay",
    "great",
    "main",
    "hyper",
    "environment",
    "connect",
    "test",
    "ethers",
    "browser",
    "meta",
    "mask",
    "page",
    "web",
    "deploy",
    "account",
    "confirm",
    "dot",
    "refresh",
    "eaters",
    "balance",
    "withdraw",
    "mention",
    "compile",
    "variable",
    "method",
    "draw",
    "pass",
    "methods",
    "object",
    "happening",
    "ring",
    "accounts",
    "studio",
    "npm",
    "terminal",
    "folder",
    "fetch",
    "button"
  ]
}