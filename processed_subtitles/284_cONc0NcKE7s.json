{
  "text": "today i'm going to talk about the\nmysterious init.pie\nfile and what it is used for in short it\nis used to make directories appear as\nlibraries that way i can import them and\nall of the things within them\nwith simpler commands so in this\nresources folder\ni have two objects that i've created\nobject one\nis just a class called one that will\nprint out object one\nonce it's instantiated and object two is\nthe same thing just printing\nobject two and let's say i want to use\nthose two\nobjects in the other directory or\noutside directory\nin tutorial.pi so let's just see what\nhappens if i try to\nimport resources\nso i'll say python 3 tutorial\ndot pi and what we can see is this\nactually runs with no problems\nso python has no problem importing a\ndirectory\nbut let's see what happens when i try to\nactually access one of the objects\nso let's say o equals\nresources dot object\none dot one\nso i'm saying that this is the directory\nhere is the file\nhousing the class and this is the class\nif we remember over here we have\nresources\nobject one and then the class one\nnow what happens if we run this\nwe get an error that the module\nresources has no attribute object 1.\nso even though python has imported the\nresources directory it's not noticing\nany of these python files within it\nso what i actually have to do is clear\nthis out and say\nfrom resources\ndot object one\nimport one now this is saying\nfrom which is specifying the directory\nand the file\ni am telling that to import from that\nfile\nthis class so now when i run it\nwe have no problem we have imported\nobject one\nand then for object two i have to do the\nsame thing\nfrom resources dot object\nto import two and i could say\nt equals 2.\nwe'll run this and we get object 1\nobject 2.\nso if you just want to import things\nfrom subdirectories this is how you have\nto do it you have to say\nfrom path to the object file\nthe file itself then you have to tell it\nto import\nthe particular thing you want from that\nfile\nand this becomes tedious if you have\nmultiple files from which you want to\nimport from and also multiple objects\nyou want to import\nfrom that file so what we can do is\ncreate an\ninit.pi file to take care of some of\nthis for us\nso i'm going to come back to my command\nline and i'm going to use the touch\ncommand\nto create this file and i'll say\nresources\nslash underscore underscore in it\ndot pi\nnow what i can do is clear all of this\nout\nand i can simply import resources\nnow just like the init function in a\nclass\nover here which runs automatically as\nsoon as the class is instantiated\nthe init.pi file runs automatically as\nsoon as a library is imported\nso as soon as i say import resources it\nlooks for and\nruns this init.pi file but at the moment\ninit.pi is blank and what we want\nis for our resources library to\nautomatically have access to\nobject one and object two so i'm going\nto in this init\nfile say from resources\ndot object one import\none and then from resources dot\nobject to import\nto so what's going to happen is\nwhen i run this file it will import\nresources which is automatically going\nto run\ninit.pi and init.pi is going to\nimport the one and two object itself\nso when i come back here i can actually\nreference\nresources dot one\nand resources dot two so if i run this\nwe can see object one and object two\nso by creating this init.pi file and\npopulating it with these\nimport statements i can turn a set of\nindividual\nfiles into one library called\nresources without init.pi i will have to\nimport everything one by one in these\nimport statements\nbut with it i can simplify the process\nand make it repeatable\nso we can imagine these object 1 and\nobject 2\nclasses being much more useful than they\nare and much more generic\nsuch that i might want to import them\ninto other projects\nby having this init.pi file i am able to\nsimply copy and paste my resources\ndirectory wherever i want\nand i'll have access to all the same\nfunctionalities simply by saying\nimport resources so the init.pi file is\nused to make a directory into a library\nby automatically running this file\nwhen you import the directory and\nin this file you will specify all the\nthings you want in the library that\nexists\nin the directory so if this video was\nuseful for you please leave a like\nit helps me grow the channel and it will\nhelp other people find the video\nand again if you would like to see these\ntools used in a broader context\ni recommend checking out my developer\ndiary series where i am working long\nterm on big projects and actually\nputting these tools to use\nso thank you for watching i hope you\nlearned something and i will see you in\nthe next one\nyou\n",
  "words": [
    "today",
    "going",
    "talk",
    "mysterious",
    "file",
    "used",
    "short",
    "used",
    "make",
    "directories",
    "appear",
    "libraries",
    "way",
    "import",
    "things",
    "within",
    "simpler",
    "commands",
    "resources",
    "folder",
    "two",
    "objects",
    "created",
    "object",
    "one",
    "class",
    "called",
    "one",
    "print",
    "object",
    "one",
    "instantiated",
    "object",
    "two",
    "thing",
    "printing",
    "object",
    "two",
    "let",
    "say",
    "want",
    "use",
    "two",
    "objects",
    "directory",
    "outside",
    "directory",
    "let",
    "see",
    "happens",
    "try",
    "import",
    "resources",
    "say",
    "python",
    "3",
    "tutorial",
    "dot",
    "pi",
    "see",
    "actually",
    "runs",
    "problems",
    "python",
    "problem",
    "importing",
    "directory",
    "let",
    "see",
    "happens",
    "try",
    "actually",
    "access",
    "one",
    "objects",
    "let",
    "say",
    "equals",
    "resources",
    "dot",
    "object",
    "one",
    "dot",
    "one",
    "saying",
    "directory",
    "file",
    "housing",
    "class",
    "class",
    "remember",
    "resources",
    "object",
    "one",
    "class",
    "one",
    "happens",
    "run",
    "get",
    "error",
    "module",
    "resources",
    "attribute",
    "object",
    "even",
    "though",
    "python",
    "imported",
    "resources",
    "directory",
    "noticing",
    "python",
    "files",
    "within",
    "actually",
    "clear",
    "say",
    "resources",
    "dot",
    "object",
    "one",
    "import",
    "one",
    "saying",
    "specifying",
    "directory",
    "file",
    "telling",
    "import",
    "file",
    "class",
    "run",
    "problem",
    "imported",
    "object",
    "one",
    "object",
    "two",
    "thing",
    "resources",
    "dot",
    "object",
    "import",
    "two",
    "could",
    "say",
    "equals",
    "run",
    "get",
    "object",
    "1",
    "object",
    "want",
    "import",
    "things",
    "subdirectories",
    "say",
    "path",
    "object",
    "file",
    "file",
    "tell",
    "import",
    "particular",
    "thing",
    "want",
    "file",
    "becomes",
    "tedious",
    "multiple",
    "files",
    "want",
    "import",
    "also",
    "multiple",
    "objects",
    "want",
    "import",
    "file",
    "create",
    "file",
    "take",
    "care",
    "us",
    "going",
    "come",
    "back",
    "command",
    "line",
    "going",
    "use",
    "touch",
    "command",
    "create",
    "file",
    "say",
    "resources",
    "slash",
    "underscore",
    "underscore",
    "dot",
    "pi",
    "clear",
    "simply",
    "import",
    "resources",
    "like",
    "init",
    "function",
    "class",
    "runs",
    "automatically",
    "soon",
    "class",
    "instantiated",
    "file",
    "runs",
    "automatically",
    "soon",
    "library",
    "imported",
    "soon",
    "say",
    "import",
    "resources",
    "looks",
    "runs",
    "file",
    "moment",
    "blank",
    "want",
    "resources",
    "library",
    "automatically",
    "access",
    "object",
    "one",
    "object",
    "two",
    "going",
    "init",
    "file",
    "say",
    "resources",
    "dot",
    "object",
    "one",
    "import",
    "one",
    "resources",
    "dot",
    "object",
    "import",
    "going",
    "happen",
    "run",
    "file",
    "import",
    "resources",
    "automatically",
    "going",
    "run",
    "going",
    "import",
    "one",
    "two",
    "object",
    "come",
    "back",
    "actually",
    "reference",
    "resources",
    "dot",
    "one",
    "resources",
    "dot",
    "two",
    "run",
    "see",
    "object",
    "one",
    "object",
    "two",
    "creating",
    "file",
    "populating",
    "import",
    "statements",
    "turn",
    "set",
    "individual",
    "files",
    "one",
    "library",
    "called",
    "resources",
    "without",
    "import",
    "everything",
    "one",
    "one",
    "import",
    "statements",
    "simplify",
    "process",
    "make",
    "repeatable",
    "imagine",
    "object",
    "1",
    "object",
    "2",
    "classes",
    "much",
    "useful",
    "much",
    "generic",
    "might",
    "want",
    "import",
    "projects",
    "file",
    "able",
    "simply",
    "copy",
    "paste",
    "resources",
    "directory",
    "wherever",
    "want",
    "access",
    "functionalities",
    "simply",
    "saying",
    "import",
    "resources",
    "file",
    "used",
    "make",
    "directory",
    "library",
    "automatically",
    "running",
    "file",
    "import",
    "directory",
    "file",
    "specify",
    "things",
    "want",
    "library",
    "exists",
    "directory",
    "video",
    "useful",
    "please",
    "leave",
    "like",
    "helps",
    "grow",
    "channel",
    "help",
    "people",
    "find",
    "video",
    "would",
    "like",
    "see",
    "tools",
    "used",
    "broader",
    "context",
    "recommend",
    "checking",
    "developer",
    "diary",
    "series",
    "working",
    "long",
    "term",
    "big",
    "projects",
    "actually",
    "putting",
    "tools",
    "use",
    "thank",
    "watching",
    "hope",
    "learned",
    "something",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "going",
    "file",
    "used",
    "make",
    "import",
    "things",
    "resources",
    "two",
    "objects",
    "object",
    "one",
    "class",
    "thing",
    "let",
    "say",
    "want",
    "use",
    "directory",
    "see",
    "happens",
    "python",
    "dot",
    "actually",
    "runs",
    "access",
    "saying",
    "run",
    "imported",
    "files",
    "simply",
    "like",
    "automatically",
    "soon",
    "library"
  ]
}