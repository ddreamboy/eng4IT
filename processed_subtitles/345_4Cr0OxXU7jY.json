{
  "text": "[Music]\nlet me ask you a question are you\nintrigued by the complexity of the tech\nworld\nwell at the roots of this tech world the\ntwo components that constitute every\ntechnology are software and hardware and\nthese require vigorous development\nthrough a tested and approved cycle of\nprocesses hello everyone and welcome to\nthis video by intellipaat in this video\ni will discuss the software development\nlifecycle but before we begin please\nmake sure to subscribe to our channel\nand hit that bell icon for regular\nupdates now let's take a look at the\nagenda firstly we will see what is meant\nby software then we will see what is\nsdlc then the need of sdlc then we'll\nmove on to the steps involved that is we\nwill discuss the sdlc life cycle and the\nphases then we'll see what models can be\nused for sdlc and lastly a conclusion\nnow let's see our first agenda that is\nwhat is meant by software\nsoftware is a collection of instructions\ndata or computer programs that are used\nto run machines and carry out particular\nactivities it is the antithesis of\nhardware which refers to a computer\nexternal components a device's running\nprograms scripts and applications are\ncollectively referred to as software in\nthis context next we'll see what is sdlc\nwell sdlc stands for software\ndevelopment lifecycle it outlines the\nnumerous steps needed in creating\nsoftware to produce a high quality end\nproduct the stages of the sdlc encompass\nthe entire life cycle of a piece of\nsoftware from conception to retirement\nfollowing the sdlc process results in\nthe software being developed in a\ncontrolled manner next we'll see the\nneed of sdlc the development team must\nchoose a lifecycle model that is\nappropriate for a specific strategy and\nthen adhere to it the creation of a\nsoftware product would not be systematic\nand disciplined without the use of a\nprecise life cycle model there needs to\nbe agreement among team members\nregarding when and what to do when\nproducing a software product if not it\nwould be an indication of disorder and\nproject failure the criteria for\nentering and leaving each phase are\ndescribed in a software lifecycle model\nonly if the stage energy requirements\nhave been met can a phase start\ntherefore it is impossible to detect the\nentry and exit criteria for a stage\nwithout a software lifecycle model it\nbecomes difficult for software project\nmanagers to keep track of the project's\ndevelopment without software lifecycle\nmodels now let's take a look at the\ndevelopment steps involved firstly we\nhave planning and requirement analysis\nthen we have specifying the needs\nfollowing which we have creating or\ndesigning the software then project\ndevelopment testing deployment and\nmaintenance let's have a brief\ndescription about each of these stages\nand this is the cycle that the sdlc\nfollows so about stage one the level of\nsdlc that is most crucial and essential\nis requirement analysis with input from\nall the stakeholders domain experts and\nsmes in the industry the senior team\nmembers carry it out at this point\nplanning is also done for the\nrequirements for quality assurance and\nfor the identification of project\nrelated risks so a meeting is scheduled\nwith the client by the business analyst\nand project manager to obtain all the\nnecessary information such as what the\ncustomer wants to construct who will be\nthe end user and what the products goal\nis a fundamental knowledge of\nunderstanding of the product is crucial\nbefore constructing it for example a\nclient requests a financial transaction\nrelated application this approach\nrequires specific requirements such as\nwhat operations will be performed how\nthey will be performed in what currency\nthey will be performed etc once the\nnecessary task has been completed the\nanalysis of the viability of a product's\ngrowth is finished there is a signal set\nup for additional discussion in the\nevent of any ambiguity the srs that is\nsoftware requirement specification\ndocument is prepared once the\nrequirement has been comprehended this\ndocument should be carefully followed by\nthe developers and should also be\nreviewed by the client for future\nreference next we have specifying the\nneeds the process of representing\ndocumenting and getting the project\nstakeholders to approve the software\nrequirements follows the completion of\nthe requirement analysis this is done by\nusing the srs document which contains\nall the product requirements that must\nbe created and developed during the\nproject life cycle\nstage 3 is creating or designing the\nsoftware the knowledge of the software\nproject's needs analysis and design will\nall be revealed in the upcoming phase\nthis phase is the result of the previous\ntwo such as requirement analysis and\nclient input\nstage four is project development the\nactual development phase of the sdlc\nstarts here and programming is created\ncoding represents the start design\nimplementation programming tools\nincluding compilers interpreters\ndebuggers\nand other similar tools are used to\ngenerate and implement the code and\ndevelopers must adhere to the coding\nstandards outlined by the management\nstage 5 is called testing\nfollowing the generation of the code it\nis compared to the requirements to\nensure that the solutions are satisfying\nthe demands identified and acquired\nduring the requirement stage\nunit testing integration testing system\ntesting and acceptability testing are\ncarried out at this level stage six is\ndeployment when the software has been\ncertified and no defects or mistakes\nhave been reported it is put into use\nthe software may then be delivered as is\nor with proposed improvements in the\nobject portion depending on the\nassessment the maintenance of the\nsoftware starts once it has been\ndeployed state 7 is maintenance when the\ncustomer begins utilizing the\ntechnologies that have been designed the\ntrue problems and ongoing needs become\napparent maintenance is the process when\nthe developed product is given attention\nnext we'll talk about the sdlc models\nnamely there are seven\nand\nfirst one is waterfall model then we\nhave v-shaped prototype spiral iterative\nincremental big bang and lastly the\nagile model\nlet's have a brief description about all\nof these models\nthe first model utilized in the sdlc is\nthe waterfall model it is also known as\nlinear sequential model the results of\none phase in this model serve as the\ninput for the following phase only after\nthe preceding phase is finished\ndeveloping can the new phase begin let's\ntake a look at the cycle itself\nfirst requirements are gathered and\nanalyzed only once the requirements have\nbeen set in stone can system design\nbegin\nthe srs document produced in this case\nserves as both an input and\nan output for system design phase\nthen documents that serves as an input\nfrom the following phase implementation\nand coding are prepared throughout the\nsystem design and software architecture\nphases then coding is completed in the\nimplementation phase and the software\ncreated serves as the input for the\ntesting step that follows the developed\ncode is rigorously tested throughout the\ntesting process to find any software\nflaws when a fault is repaired it is\nretested and entered into the defect\ntracking tool\nbug logging retesting and regression\ntesting continues until the software is\nready for use following the customer's\napproval the developed code is put into\nproduction during the deployment phase\nthe developers are responsible for\nfixing any problem that arise in the\nproduction environment\nand fall under maintenance\nnow advantages and disadvantages the\nwaterfall paradigm is an understandably\nstraightforward one in which all steps\nare carried out sequentially each phase\nis deliverables are well specified which\nprevents complexity and makes the\nproject simple to manage not\ndisadvantages the waterfall approach\nrequires a lot of time and cannot be\nutilized for projects with a short\nlifespan because a new phase cannot be\nstarted until the current phase is\nfinished this model expects the\nrequirement to be clear in the\nrequirement analysis phase itself and\nany change in the latest stages would\nresult in higher costs as the changes\nwould be required in all the phases as a\nresult it cannot be used for projects\nwith uncertain requirements or whether\nrequirements keep changing next we'll\ntalk about the v-shaped model\nverification and validation model is\nanother name for this specific model in\nthis methodology development and testing\ngo concurrently and verification and\nvalidation go hand in hand the only\ndifference between the v model and the\nwaterfall model is that in the v model\ntesting and test planning begin earlier\nlet's take a look at the cycle in this\nmodel we have two phases\nthat is the verification phase and the\nvalidation phase under verification\nphase we have requirement analysis that\nis all necessary data is acquired and\nanalyzed in this step examining the\nspecifications is one of the\nverification activities then we have\nsystem design once the requirements are\ndefined a system is designed or the\nproduct's architecture and its\ncomponents are made and recorded in a\ndesign document then we have high level\ndesign the architecture and design of\nmodules are specified by high level\ndesign it specifies how the two modules\nwork together then we have low level\ndesign the individual component\narchitecture and design are described by\nlow level design\nlastly in this phase we have coding in\nthis phase code development is completed\nin the validation phase firstly we have\nunit testing utilizing the unit testing\ncases created during the low level\ndesign phase unit testing is carried out\nin-house unit testing is done by the\ndeveloper it is carried out on\nindividual components which helps find\neffects quickly\nthen we have integration testing\nduring the high level design phase\nintegration testing is carried out\nutilizing integration test cases the\ntesting carried out on integrated\nmodules is known as integration testing\nnext up we have system testing during\nthe system design phase system testing\nis carried out this step involves\ntesting the entire system including\nevery aspect of its functionality lastly\nwe have acceptance testing acceptance\ntesting is carried out in the customer's\nenvironment and is connected to the\nrequirement analysis process now we have\nadvantages and disadvantages for\nadvantages it is a straightforward and\nsimple model smaller projects with\nstated requirements that freeze in the\nearly stages benefit from the v-model\napproach it is a disciplined approach\nthat yields a high quality end product\nfor disadvantages for ongoing projects a\nv-shaped model is not recommended later\nrequirement changes would be\nprohibitively expensive now we'll talk\nabout prototype model the prototype\nmodel is a model in which the software\nprototype is created first comparing\nprototype models to the actual software\nreveals that they perform poorly and\nhave limited functional capabilities\nprototypes are built with dummy\nfunctionalities this is a useful tool\nfor figuring out what the customer\nactually wants let's take a look at the\ncycle to obtain useful user feedback\nsoftware prototypes are created before\nthe final product\nafter taking into account user feedback\nthe prototype is once more examined by\nthe client\nup until the consumer accepts the model\nthis process continues after gathering\nrequirements a rapid design is made and\na prototype is developed\nbefore being delivered to the customer\nfor review the prototype is modified in\nresponse to client comments and the\nclarified requirement then represented\nto the client for review the customer\nmust accept the prototype before the\ngenuine program can be developed the\nwaterfall model approach is used to\nconstruct the actual software now let's\nsee the advantages and disadvantages\nfor advantages because flaws are\ndiscovered considerably earlier during\nprototype models develop costs and time\nare reduced a change in requirement a\nmissing feature or a lack of\nfunctionality can all be found during\nthe assessment process and added to the\nfinalized prototype a customer's\ninvolvement from the beginning clears up\nany misunderstandings about the\nfunctionality's requirements and for the\ndisadvantage the customer can alter the\nrequirements for the finished product\nbecause they're involved in every stage\nof the process which makes the scope\nmore difficult and could extend the time\nit takes to deliver the product\nnext we will talk about the spiral model\niterative and prototype approaches are\npart of the spiral model the iterations\nadhere to the stages of the spiral model\nthe innermost loop in the model is for\nrequirement collecting and analysis\nwhich is followed by planning risk\nanalysis development and evaluation the\nloops in the model represent the phases\nof the sdlc process designing is the\nsecond loop followed by implementation\nand testing now there are four phases in\nthis model let's take a look at the\ncycle\nwe have planning risk analysis\nengineering and evaluation firstly\nplanning gathering requirements is a\npart of the planning step during which\nthe customer is asked for all the\nnecessary information and it is recorded\nthe following phase begins with the\ncreation of software requirement\nspecification document then comes risk\nanalysis the best solution is chosen for\nthe risks involved in this phase and\nanalysis is completed by creating the\nprototype as an illustration there is a\nchance that the data access rate from a\nremote database will be excessively slow\nbuilding a prototype of the data access\nsubsystem will eliminate the risk\nthen we have engineering coding and\ntesting are completed after the risk\nanalysis is done\nand lastly we have evaluation the\ncustomer assesses the system created and\nmakes plans for the following iteration\nlet's talk advantages and disadvantages\nfor advantages the prototype models\nare extensively used for risk analysis\nand the following iteration can include\nany functionality changes or\nimprovements and for disadvantages\nonly huge projects are the greatest\ncandidates for the spiral model and as\nit may require numerous iterations and\ntake a long time to produce the desired\nresult the cost may be substantial\nnext we will talk about the iterative\nincremental model the product is divided\ninto manageable pieces\nby the iterative incremental model for\ninstance a feature that will be created\nduring the iteration is chosen and put\ninto practice phases such as requirement\nanalysis design coding and testing are\ncompleted throughout each iteration\niterations do not require extensive\nforce let's take a look at the cycle\nafter each iteration is finished a\nproject is confirmed and sent to the\nclient for review and feedback the newly\nincorporated feature is combined with\ncustomer feedback in the following\niteration as a result the product gains\nfeatures as iterations go and the final\nbuild has all of the products features\nnow there are four phases in this model\ncalled inception\nelaboration construction and transition\nin inception phase\nthe project's requirements and scopes\nare included in elaboration phase a\nproduct's working architecture which\naddresses the risks\nnoted during the inception phase and\nalso satisfies the non-functional\ncriteria\nduring construction phase\nthe construction phase\nincludes\nof the following the architecture is\nfilled out with deployable code during\nthe construction phase which is\naccomplished\nthrough functional requirement analysis\ndesign implementation and testing\nthen comes the transition phase the\nproduct is introduced into the\nproduction environment\nduring the transition phase\nnow advantages and disadvantages\nany change in the requirement can be\neasily done and would not cost as there\nis a scope of incorporating the new\nrequirement in the next iteration\nrisk is analyzed and identified in the\niterations\ndefects are detected at an early stage\nas the product is divided into smaller\nchunks it is easy to manage the product\nnow disadvantages to break down and\ndevelop progressively a complete grasp\nof a product is necessary\nnow we'll talk about the big bang model\nthe big bang model has no established\nprocess input and output consists of\nmoney and labor and the result is a\ndeveloped good that may or may not be\nwhat the client requires\nlet's take a look at the cycle\nbig bang model doesn't need a lot of\nschedule or planning the developer\nanalyzes the requirements writes the\ncode and creates the product in\naccordance with this knowledge\nthis model is only applied to modest\nprojects the absence of a testing team\nand the absence of formal testing could\nlead to the project's failure\nnow advantages and disadvantages\nfor advantages\nit is an extremely basic model there is\nless need for scheduling and planning\nthe developer has the freedom to create\ntheir own software\nnow for the disadvantage\nlarge ongoing and sophisticated projects\ncannot be handled with big bang model\nand it is highly uncertain and dangerous\nlastly we have the agile model\nincremental and iterative models are\ncombined to create the age oil paradigm\nthis paradigm emphasizes flexibility\nthroughout product development more so\nthan requirements\na product is divided into manageable\nincremental bills in age oil it is not\ncreated in its entirety in one sitting\nthe number of features increases with\neach build the upcoming update expands\nupon earlier features\nlet's take a look at the cycle\nsprints are the term used\nfor iterations in age oil a sprint lasts\nabout two to four weeks each print ends\nwith the product owner verifying it\nbefore it is provisioned to the client\nwith his or her permission customer\nfeedback is used to make improvements\nand the following sprint will focus on\nhis recommendations and enhancements\nnow let's take a look at the advantages\nand disadvantages\nfor advantages it gives you more freedom\nto adjust to the changes the new feature\nis simple to add customer satisfaction\nbecause consider their comments and\nrecommendations at every level\nand for disadvantages there's inadequate\ndocumentation agile requires highly\nqualified and experienced personnel the\nproject would fail if the customer was\nunsure of exactly\nhow they wanted the final result to be\nnow we have come to the conclusion\nfor the project to be successfully\nfinished adherence to an appropriate\nlife cycle is crucial in turn this\nfacilitates management\neach model of the software development\nlifecycle has pros and cons of its own\nthe elements like requirement\nsystem complexity project size\ncost skill limitation etc can help\nestablish the optimal model for any\nproject\nspiral and agile models for instance are\nthe best to utilize when a requirement\nis uncertain because the necessary\nadjustment may be easily accommodated at\nany stage\nand that's it for this video thank you\njust a quick info guys if you want to\nmake a career in software engineering\nthen intellipaat provides an advanced\ncertification program on software\nengineering and application development\nby eni city council of iit guate and it\nis taught by iit guati professors and\nindustry experts this course is designed\nto upskill and land your dream job\nyou\n",
  "words": [
    "music",
    "let",
    "ask",
    "question",
    "intrigued",
    "complexity",
    "tech",
    "world",
    "well",
    "roots",
    "tech",
    "world",
    "two",
    "components",
    "constitute",
    "every",
    "technology",
    "software",
    "hardware",
    "require",
    "vigorous",
    "development",
    "tested",
    "approved",
    "cycle",
    "processes",
    "hello",
    "everyone",
    "welcome",
    "video",
    "intellipaat",
    "video",
    "discuss",
    "software",
    "development",
    "lifecycle",
    "begin",
    "please",
    "make",
    "sure",
    "subscribe",
    "channel",
    "hit",
    "bell",
    "icon",
    "regular",
    "updates",
    "let",
    "take",
    "look",
    "agenda",
    "firstly",
    "see",
    "meant",
    "software",
    "see",
    "sdlc",
    "need",
    "sdlc",
    "move",
    "steps",
    "involved",
    "discuss",
    "sdlc",
    "life",
    "cycle",
    "phases",
    "see",
    "models",
    "used",
    "sdlc",
    "lastly",
    "conclusion",
    "let",
    "see",
    "first",
    "agenda",
    "meant",
    "software",
    "software",
    "collection",
    "instructions",
    "data",
    "computer",
    "programs",
    "used",
    "run",
    "machines",
    "carry",
    "particular",
    "activities",
    "antithesis",
    "hardware",
    "refers",
    "computer",
    "external",
    "components",
    "device",
    "running",
    "programs",
    "scripts",
    "applications",
    "collectively",
    "referred",
    "software",
    "context",
    "next",
    "see",
    "sdlc",
    "well",
    "sdlc",
    "stands",
    "software",
    "development",
    "lifecycle",
    "outlines",
    "numerous",
    "steps",
    "needed",
    "creating",
    "software",
    "produce",
    "high",
    "quality",
    "end",
    "product",
    "stages",
    "sdlc",
    "encompass",
    "entire",
    "life",
    "cycle",
    "piece",
    "software",
    "conception",
    "retirement",
    "following",
    "sdlc",
    "process",
    "results",
    "software",
    "developed",
    "controlled",
    "manner",
    "next",
    "see",
    "need",
    "sdlc",
    "development",
    "team",
    "must",
    "choose",
    "lifecycle",
    "model",
    "appropriate",
    "specific",
    "strategy",
    "adhere",
    "creation",
    "software",
    "product",
    "would",
    "systematic",
    "disciplined",
    "without",
    "use",
    "precise",
    "life",
    "cycle",
    "model",
    "needs",
    "agreement",
    "among",
    "team",
    "members",
    "regarding",
    "producing",
    "software",
    "product",
    "would",
    "indication",
    "disorder",
    "project",
    "failure",
    "criteria",
    "entering",
    "leaving",
    "phase",
    "described",
    "software",
    "lifecycle",
    "model",
    "stage",
    "energy",
    "requirements",
    "met",
    "phase",
    "start",
    "therefore",
    "impossible",
    "detect",
    "entry",
    "exit",
    "criteria",
    "stage",
    "without",
    "software",
    "lifecycle",
    "model",
    "becomes",
    "difficult",
    "software",
    "project",
    "managers",
    "keep",
    "track",
    "project",
    "development",
    "without",
    "software",
    "lifecycle",
    "models",
    "let",
    "take",
    "look",
    "development",
    "steps",
    "involved",
    "firstly",
    "planning",
    "requirement",
    "analysis",
    "specifying",
    "needs",
    "following",
    "creating",
    "designing",
    "software",
    "project",
    "development",
    "testing",
    "deployment",
    "maintenance",
    "let",
    "brief",
    "description",
    "stages",
    "cycle",
    "sdlc",
    "follows",
    "stage",
    "one",
    "level",
    "sdlc",
    "crucial",
    "essential",
    "requirement",
    "analysis",
    "input",
    "stakeholders",
    "domain",
    "experts",
    "smes",
    "industry",
    "senior",
    "team",
    "members",
    "carry",
    "point",
    "planning",
    "also",
    "done",
    "requirements",
    "quality",
    "assurance",
    "identification",
    "project",
    "related",
    "risks",
    "meeting",
    "scheduled",
    "client",
    "business",
    "analyst",
    "project",
    "manager",
    "obtain",
    "necessary",
    "information",
    "customer",
    "wants",
    "construct",
    "end",
    "user",
    "products",
    "goal",
    "fundamental",
    "knowledge",
    "understanding",
    "product",
    "crucial",
    "constructing",
    "example",
    "client",
    "requests",
    "financial",
    "transaction",
    "related",
    "application",
    "approach",
    "requires",
    "specific",
    "requirements",
    "operations",
    "performed",
    "performed",
    "currency",
    "performed",
    "etc",
    "necessary",
    "task",
    "completed",
    "analysis",
    "viability",
    "product",
    "growth",
    "finished",
    "signal",
    "set",
    "additional",
    "discussion",
    "event",
    "ambiguity",
    "srs",
    "software",
    "requirement",
    "specification",
    "document",
    "prepared",
    "requirement",
    "comprehended",
    "document",
    "carefully",
    "followed",
    "developers",
    "also",
    "reviewed",
    "client",
    "future",
    "reference",
    "next",
    "specifying",
    "needs",
    "process",
    "representing",
    "documenting",
    "getting",
    "project",
    "stakeholders",
    "approve",
    "software",
    "requirements",
    "follows",
    "completion",
    "requirement",
    "analysis",
    "done",
    "using",
    "srs",
    "document",
    "contains",
    "product",
    "requirements",
    "must",
    "created",
    "developed",
    "project",
    "life",
    "cycle",
    "stage",
    "3",
    "creating",
    "designing",
    "software",
    "knowledge",
    "software",
    "project",
    "needs",
    "analysis",
    "design",
    "revealed",
    "upcoming",
    "phase",
    "phase",
    "result",
    "previous",
    "two",
    "requirement",
    "analysis",
    "client",
    "input",
    "stage",
    "four",
    "project",
    "development",
    "actual",
    "development",
    "phase",
    "sdlc",
    "starts",
    "programming",
    "created",
    "coding",
    "represents",
    "start",
    "design",
    "implementation",
    "programming",
    "tools",
    "including",
    "compilers",
    "interpreters",
    "debuggers",
    "similar",
    "tools",
    "used",
    "generate",
    "implement",
    "code",
    "developers",
    "must",
    "adhere",
    "coding",
    "standards",
    "outlined",
    "management",
    "stage",
    "5",
    "called",
    "testing",
    "following",
    "generation",
    "code",
    "compared",
    "requirements",
    "ensure",
    "solutions",
    "satisfying",
    "demands",
    "identified",
    "acquired",
    "requirement",
    "stage",
    "unit",
    "testing",
    "integration",
    "testing",
    "system",
    "testing",
    "acceptability",
    "testing",
    "carried",
    "level",
    "stage",
    "six",
    "deployment",
    "software",
    "certified",
    "defects",
    "mistakes",
    "reported",
    "put",
    "use",
    "software",
    "may",
    "delivered",
    "proposed",
    "improvements",
    "object",
    "portion",
    "depending",
    "assessment",
    "maintenance",
    "software",
    "starts",
    "deployed",
    "state",
    "7",
    "maintenance",
    "customer",
    "begins",
    "utilizing",
    "technologies",
    "designed",
    "true",
    "problems",
    "ongoing",
    "needs",
    "become",
    "apparent",
    "maintenance",
    "process",
    "developed",
    "product",
    "given",
    "attention",
    "next",
    "talk",
    "sdlc",
    "models",
    "namely",
    "seven",
    "first",
    "one",
    "waterfall",
    "model",
    "prototype",
    "spiral",
    "iterative",
    "incremental",
    "big",
    "bang",
    "lastly",
    "agile",
    "model",
    "let",
    "brief",
    "description",
    "models",
    "first",
    "model",
    "utilized",
    "sdlc",
    "waterfall",
    "model",
    "also",
    "known",
    "linear",
    "sequential",
    "model",
    "results",
    "one",
    "phase",
    "model",
    "serve",
    "input",
    "following",
    "phase",
    "preceding",
    "phase",
    "finished",
    "developing",
    "new",
    "phase",
    "begin",
    "let",
    "take",
    "look",
    "cycle",
    "first",
    "requirements",
    "gathered",
    "analyzed",
    "requirements",
    "set",
    "stone",
    "system",
    "design",
    "begin",
    "srs",
    "document",
    "produced",
    "case",
    "serves",
    "input",
    "output",
    "system",
    "design",
    "phase",
    "documents",
    "serves",
    "input",
    "following",
    "phase",
    "implementation",
    "coding",
    "prepared",
    "throughout",
    "system",
    "design",
    "software",
    "architecture",
    "phases",
    "coding",
    "completed",
    "implementation",
    "phase",
    "software",
    "created",
    "serves",
    "input",
    "testing",
    "step",
    "follows",
    "developed",
    "code",
    "rigorously",
    "tested",
    "throughout",
    "testing",
    "process",
    "find",
    "software",
    "flaws",
    "fault",
    "repaired",
    "retested",
    "entered",
    "defect",
    "tracking",
    "tool",
    "bug",
    "logging",
    "retesting",
    "regression",
    "testing",
    "continues",
    "software",
    "ready",
    "use",
    "following",
    "customer",
    "approval",
    "developed",
    "code",
    "put",
    "production",
    "deployment",
    "phase",
    "developers",
    "responsible",
    "fixing",
    "problem",
    "arise",
    "production",
    "environment",
    "fall",
    "maintenance",
    "advantages",
    "disadvantages",
    "waterfall",
    "paradigm",
    "understandably",
    "straightforward",
    "one",
    "steps",
    "carried",
    "sequentially",
    "phase",
    "deliverables",
    "well",
    "specified",
    "prevents",
    "complexity",
    "makes",
    "project",
    "simple",
    "manage",
    "disadvantages",
    "waterfall",
    "approach",
    "requires",
    "lot",
    "time",
    "utilized",
    "projects",
    "short",
    "lifespan",
    "new",
    "phase",
    "started",
    "current",
    "phase",
    "finished",
    "model",
    "expects",
    "requirement",
    "clear",
    "requirement",
    "analysis",
    "phase",
    "change",
    "latest",
    "stages",
    "would",
    "result",
    "higher",
    "costs",
    "changes",
    "would",
    "required",
    "phases",
    "result",
    "used",
    "projects",
    "uncertain",
    "requirements",
    "whether",
    "requirements",
    "keep",
    "changing",
    "next",
    "talk",
    "model",
    "verification",
    "validation",
    "model",
    "another",
    "name",
    "specific",
    "model",
    "methodology",
    "development",
    "testing",
    "go",
    "concurrently",
    "verification",
    "validation",
    "go",
    "hand",
    "hand",
    "difference",
    "v",
    "model",
    "waterfall",
    "model",
    "v",
    "model",
    "testing",
    "test",
    "planning",
    "begin",
    "earlier",
    "let",
    "take",
    "look",
    "cycle",
    "model",
    "two",
    "phases",
    "verification",
    "phase",
    "validation",
    "phase",
    "verification",
    "phase",
    "requirement",
    "analysis",
    "necessary",
    "data",
    "acquired",
    "analyzed",
    "step",
    "examining",
    "specifications",
    "one",
    "verification",
    "activities",
    "system",
    "design",
    "requirements",
    "defined",
    "system",
    "designed",
    "product",
    "architecture",
    "components",
    "made",
    "recorded",
    "design",
    "document",
    "high",
    "level",
    "design",
    "architecture",
    "design",
    "modules",
    "specified",
    "high",
    "level",
    "design",
    "specifies",
    "two",
    "modules",
    "work",
    "together",
    "low",
    "level",
    "design",
    "individual",
    "component",
    "architecture",
    "design",
    "described",
    "low",
    "level",
    "design",
    "lastly",
    "phase",
    "coding",
    "phase",
    "code",
    "development",
    "completed",
    "validation",
    "phase",
    "firstly",
    "unit",
    "testing",
    "utilizing",
    "unit",
    "testing",
    "cases",
    "created",
    "low",
    "level",
    "design",
    "phase",
    "unit",
    "testing",
    "carried",
    "unit",
    "testing",
    "done",
    "developer",
    "carried",
    "individual",
    "components",
    "helps",
    "find",
    "effects",
    "quickly",
    "integration",
    "testing",
    "high",
    "level",
    "design",
    "phase",
    "integration",
    "testing",
    "carried",
    "utilizing",
    "integration",
    "test",
    "cases",
    "testing",
    "carried",
    "integrated",
    "modules",
    "known",
    "integration",
    "testing",
    "next",
    "system",
    "testing",
    "system",
    "design",
    "phase",
    "system",
    "testing",
    "carried",
    "step",
    "involves",
    "testing",
    "entire",
    "system",
    "including",
    "every",
    "aspect",
    "functionality",
    "lastly",
    "acceptance",
    "testing",
    "acceptance",
    "testing",
    "carried",
    "customer",
    "environment",
    "connected",
    "requirement",
    "analysis",
    "process",
    "advantages",
    "disadvantages",
    "advantages",
    "straightforward",
    "simple",
    "model",
    "smaller",
    "projects",
    "stated",
    "requirements",
    "freeze",
    "early",
    "stages",
    "benefit",
    "approach",
    "disciplined",
    "approach",
    "yields",
    "high",
    "quality",
    "end",
    "product",
    "disadvantages",
    "ongoing",
    "projects",
    "model",
    "recommended",
    "later",
    "requirement",
    "changes",
    "would",
    "prohibitively",
    "expensive",
    "talk",
    "prototype",
    "model",
    "prototype",
    "model",
    "model",
    "software",
    "prototype",
    "created",
    "first",
    "comparing",
    "prototype",
    "models",
    "actual",
    "software",
    "reveals",
    "perform",
    "poorly",
    "limited",
    "functional",
    "capabilities",
    "prototypes",
    "built",
    "dummy",
    "functionalities",
    "useful",
    "tool",
    "figuring",
    "customer",
    "actually",
    "wants",
    "let",
    "take",
    "look",
    "cycle",
    "obtain",
    "useful",
    "user",
    "feedback",
    "software",
    "prototypes",
    "created",
    "final",
    "product",
    "taking",
    "account",
    "user",
    "feedback",
    "prototype",
    "examined",
    "client",
    "consumer",
    "accepts",
    "model",
    "process",
    "continues",
    "gathering",
    "requirements",
    "rapid",
    "design",
    "made",
    "prototype",
    "developed",
    "delivered",
    "customer",
    "review",
    "prototype",
    "modified",
    "response",
    "client",
    "comments",
    "clarified",
    "requirement",
    "represented",
    "client",
    "review",
    "customer",
    "must",
    "accept",
    "prototype",
    "genuine",
    "program",
    "developed",
    "waterfall",
    "model",
    "approach",
    "used",
    "construct",
    "actual",
    "software",
    "let",
    "see",
    "advantages",
    "disadvantages",
    "advantages",
    "flaws",
    "discovered",
    "considerably",
    "earlier",
    "prototype",
    "models",
    "develop",
    "costs",
    "time",
    "reduced",
    "change",
    "requirement",
    "missing",
    "feature",
    "lack",
    "functionality",
    "found",
    "assessment",
    "process",
    "added",
    "finalized",
    "prototype",
    "customer",
    "involvement",
    "beginning",
    "clears",
    "misunderstandings",
    "functionality",
    "requirements",
    "disadvantage",
    "customer",
    "alter",
    "requirements",
    "finished",
    "product",
    "involved",
    "every",
    "stage",
    "process",
    "makes",
    "scope",
    "difficult",
    "could",
    "extend",
    "time",
    "takes",
    "deliver",
    "product",
    "next",
    "talk",
    "spiral",
    "model",
    "iterative",
    "prototype",
    "approaches",
    "part",
    "spiral",
    "model",
    "iterations",
    "adhere",
    "stages",
    "spiral",
    "model",
    "innermost",
    "loop",
    "model",
    "requirement",
    "collecting",
    "analysis",
    "followed",
    "planning",
    "risk",
    "analysis",
    "development",
    "evaluation",
    "loops",
    "model",
    "represent",
    "phases",
    "sdlc",
    "process",
    "designing",
    "second",
    "loop",
    "followed",
    "implementation",
    "testing",
    "four",
    "phases",
    "model",
    "let",
    "take",
    "look",
    "cycle",
    "planning",
    "risk",
    "analysis",
    "engineering",
    "evaluation",
    "firstly",
    "planning",
    "gathering",
    "requirements",
    "part",
    "planning",
    "step",
    "customer",
    "asked",
    "necessary",
    "information",
    "recorded",
    "following",
    "phase",
    "begins",
    "creation",
    "software",
    "requirement",
    "specification",
    "document",
    "comes",
    "risk",
    "analysis",
    "best",
    "solution",
    "chosen",
    "risks",
    "involved",
    "phase",
    "analysis",
    "completed",
    "creating",
    "prototype",
    "illustration",
    "chance",
    "data",
    "access",
    "rate",
    "remote",
    "database",
    "excessively",
    "slow",
    "building",
    "prototype",
    "data",
    "access",
    "subsystem",
    "eliminate",
    "risk",
    "engineering",
    "coding",
    "testing",
    "completed",
    "risk",
    "analysis",
    "done",
    "lastly",
    "evaluation",
    "customer",
    "assesses",
    "system",
    "created",
    "makes",
    "plans",
    "following",
    "iteration",
    "let",
    "talk",
    "advantages",
    "disadvantages",
    "advantages",
    "prototype",
    "models",
    "extensively",
    "used",
    "risk",
    "analysis",
    "following",
    "iteration",
    "include",
    "functionality",
    "changes",
    "improvements",
    "disadvantages",
    "huge",
    "projects",
    "greatest",
    "candidates",
    "spiral",
    "model",
    "may",
    "require",
    "numerous",
    "iterations",
    "take",
    "long",
    "time",
    "produce",
    "desired",
    "result",
    "cost",
    "may",
    "substantial",
    "next",
    "talk",
    "iterative",
    "incremental",
    "model",
    "product",
    "divided",
    "manageable",
    "pieces",
    "iterative",
    "incremental",
    "model",
    "instance",
    "feature",
    "created",
    "iteration",
    "chosen",
    "put",
    "practice",
    "phases",
    "requirement",
    "analysis",
    "design",
    "coding",
    "testing",
    "completed",
    "throughout",
    "iteration",
    "iterations",
    "require",
    "extensive",
    "force",
    "let",
    "take",
    "look",
    "cycle",
    "iteration",
    "finished",
    "project",
    "confirmed",
    "sent",
    "client",
    "review",
    "feedback",
    "newly",
    "incorporated",
    "feature",
    "combined",
    "customer",
    "feedback",
    "following",
    "iteration",
    "result",
    "product",
    "gains",
    "features",
    "iterations",
    "go",
    "final",
    "build",
    "products",
    "features",
    "four",
    "phases",
    "model",
    "called",
    "inception",
    "elaboration",
    "construction",
    "transition",
    "inception",
    "phase",
    "project",
    "requirements",
    "scopes",
    "included",
    "elaboration",
    "phase",
    "product",
    "working",
    "architecture",
    "addresses",
    "risks",
    "noted",
    "inception",
    "phase",
    "also",
    "satisfies",
    "criteria",
    "construction",
    "phase",
    "construction",
    "phase",
    "includes",
    "following",
    "architecture",
    "filled",
    "deployable",
    "code",
    "construction",
    "phase",
    "accomplished",
    "functional",
    "requirement",
    "analysis",
    "design",
    "implementation",
    "testing",
    "comes",
    "transition",
    "phase",
    "product",
    "introduced",
    "production",
    "environment",
    "transition",
    "phase",
    "advantages",
    "disadvantages",
    "change",
    "requirement",
    "easily",
    "done",
    "would",
    "cost",
    "scope",
    "incorporating",
    "new",
    "requirement",
    "next",
    "iteration",
    "risk",
    "analyzed",
    "identified",
    "iterations",
    "defects",
    "detected",
    "early",
    "stage",
    "product",
    "divided",
    "smaller",
    "chunks",
    "easy",
    "manage",
    "product",
    "disadvantages",
    "break",
    "develop",
    "progressively",
    "complete",
    "grasp",
    "product",
    "necessary",
    "talk",
    "big",
    "bang",
    "model",
    "big",
    "bang",
    "model",
    "established",
    "process",
    "input",
    "output",
    "consists",
    "money",
    "labor",
    "result",
    "developed",
    "good",
    "may",
    "may",
    "client",
    "requires",
    "let",
    "take",
    "look",
    "cycle",
    "big",
    "bang",
    "model",
    "need",
    "lot",
    "schedule",
    "planning",
    "developer",
    "analyzes",
    "requirements",
    "writes",
    "code",
    "creates",
    "product",
    "accordance",
    "knowledge",
    "model",
    "applied",
    "modest",
    "projects",
    "absence",
    "testing",
    "team",
    "absence",
    "formal",
    "testing",
    "could",
    "lead",
    "project",
    "failure",
    "advantages",
    "disadvantages",
    "advantages",
    "extremely",
    "basic",
    "model",
    "less",
    "need",
    "scheduling",
    "planning",
    "developer",
    "freedom",
    "create",
    "software",
    "disadvantage",
    "large",
    "ongoing",
    "sophisticated",
    "projects",
    "handled",
    "big",
    "bang",
    "model",
    "highly",
    "uncertain",
    "dangerous",
    "lastly",
    "agile",
    "model",
    "incremental",
    "iterative",
    "models",
    "combined",
    "create",
    "age",
    "oil",
    "paradigm",
    "paradigm",
    "emphasizes",
    "flexibility",
    "throughout",
    "product",
    "development",
    "requirements",
    "product",
    "divided",
    "manageable",
    "incremental",
    "bills",
    "age",
    "oil",
    "created",
    "entirety",
    "one",
    "sitting",
    "number",
    "features",
    "increases",
    "build",
    "upcoming",
    "update",
    "expands",
    "upon",
    "earlier",
    "features",
    "let",
    "take",
    "look",
    "cycle",
    "sprints",
    "term",
    "used",
    "iterations",
    "age",
    "oil",
    "sprint",
    "lasts",
    "two",
    "four",
    "weeks",
    "print",
    "ends",
    "product",
    "owner",
    "verifying",
    "provisioned",
    "client",
    "permission",
    "customer",
    "feedback",
    "used",
    "make",
    "improvements",
    "following",
    "sprint",
    "focus",
    "recommendations",
    "enhancements",
    "let",
    "take",
    "look",
    "advantages",
    "disadvantages",
    "advantages",
    "gives",
    "freedom",
    "adjust",
    "changes",
    "new",
    "feature",
    "simple",
    "add",
    "customer",
    "satisfaction",
    "consider",
    "comments",
    "recommendations",
    "every",
    "level",
    "disadvantages",
    "inadequate",
    "documentation",
    "agile",
    "requires",
    "highly",
    "qualified",
    "experienced",
    "personnel",
    "project",
    "would",
    "fail",
    "customer",
    "unsure",
    "exactly",
    "wanted",
    "final",
    "result",
    "come",
    "conclusion",
    "project",
    "successfully",
    "finished",
    "adherence",
    "appropriate",
    "life",
    "cycle",
    "crucial",
    "turn",
    "facilitates",
    "management",
    "model",
    "software",
    "development",
    "lifecycle",
    "pros",
    "cons",
    "elements",
    "like",
    "requirement",
    "system",
    "complexity",
    "project",
    "size",
    "cost",
    "skill",
    "limitation",
    "etc",
    "help",
    "establish",
    "optimal",
    "model",
    "project",
    "spiral",
    "agile",
    "models",
    "instance",
    "best",
    "utilize",
    "requirement",
    "uncertain",
    "necessary",
    "adjustment",
    "may",
    "easily",
    "accommodated",
    "stage",
    "video",
    "thank",
    "quick",
    "info",
    "guys",
    "want",
    "make",
    "career",
    "software",
    "engineering",
    "intellipaat",
    "provides",
    "advanced",
    "certification",
    "program",
    "software",
    "engineering",
    "application",
    "development",
    "eni",
    "city",
    "council",
    "iit",
    "guate",
    "taught",
    "iit",
    "guati",
    "professors",
    "industry",
    "experts",
    "course",
    "designed",
    "upskill",
    "land",
    "dream",
    "job"
  ],
  "keywords": [
    "let",
    "complexity",
    "well",
    "two",
    "components",
    "every",
    "software",
    "require",
    "development",
    "cycle",
    "video",
    "lifecycle",
    "begin",
    "make",
    "take",
    "look",
    "firstly",
    "see",
    "sdlc",
    "need",
    "steps",
    "involved",
    "life",
    "phases",
    "models",
    "used",
    "lastly",
    "first",
    "data",
    "next",
    "creating",
    "high",
    "quality",
    "end",
    "product",
    "stages",
    "following",
    "process",
    "developed",
    "team",
    "must",
    "model",
    "specific",
    "adhere",
    "would",
    "without",
    "use",
    "needs",
    "project",
    "criteria",
    "phase",
    "stage",
    "requirements",
    "planning",
    "requirement",
    "analysis",
    "designing",
    "testing",
    "deployment",
    "maintenance",
    "follows",
    "one",
    "level",
    "crucial",
    "input",
    "also",
    "done",
    "risks",
    "client",
    "necessary",
    "customer",
    "user",
    "knowledge",
    "approach",
    "requires",
    "performed",
    "completed",
    "finished",
    "srs",
    "document",
    "followed",
    "developers",
    "created",
    "design",
    "result",
    "four",
    "actual",
    "coding",
    "implementation",
    "code",
    "unit",
    "integration",
    "system",
    "carried",
    "put",
    "may",
    "improvements",
    "utilizing",
    "designed",
    "ongoing",
    "talk",
    "waterfall",
    "prototype",
    "spiral",
    "iterative",
    "incremental",
    "big",
    "bang",
    "agile",
    "new",
    "analyzed",
    "serves",
    "throughout",
    "architecture",
    "step",
    "production",
    "environment",
    "advantages",
    "disadvantages",
    "paradigm",
    "makes",
    "simple",
    "time",
    "projects",
    "change",
    "changes",
    "uncertain",
    "verification",
    "validation",
    "go",
    "earlier",
    "modules",
    "low",
    "developer",
    "functionality",
    "feedback",
    "final",
    "review",
    "feature",
    "iterations",
    "risk",
    "evaluation",
    "engineering",
    "iteration",
    "cost",
    "divided",
    "features",
    "inception",
    "construction",
    "transition",
    "age",
    "oil"
  ]
}