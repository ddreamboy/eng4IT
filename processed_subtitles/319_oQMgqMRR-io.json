{
  "text": "[MUSIC PLAYING]\nPOLONG LIN: Hi, I'm Polong.\nZACK AKIL: And I'm Zack.\nPOLONG LIN: And we're\ngoing to show you\n10 ways of using machine\nlearning with Google Cloud.\nZACK AKIL: We're going to\ncover beginner, intermediate,\nand advanced ways of\ndoing machine learning.\nPOLONG LIN: Beginner is\nperfect for those brand\nnew to machine learning\nand who want to use it\nwithout the expertise.\nZACK AKIL: And\nintermediate is for those\nthat have some knowledge\nof machine learning\nbut may want to\ncustomize their models.\nPOLONG LIN: Advanced is\nfor the ML engineer who\nwants to take their\nskills or knowledge\nto the next level with\nfull customizability\nand at the enterprise\ngrade scale.\nZACK AKIL: And we're\ngoing to give you\nlinks for each of these tools\nwhere you can learn more.\nLet's get started.\nPOLONG LIN: Hey, Zack.\nI'm trying to build a\nprototype to classify images,\nspecifically for identifying\nflower species based\non some photos I have.\nI don't have a\nlot of photos yet.\nBut I really just\nwant the fastest way\nto get a quick proof of\nconcept out the door.\nWhat could I use?\nZACK AKIL: That sounds\nlike a perfect use\ncase for Teachable Machine.\nIt's a browser-based tool that\nlets you build image or audio\nclassifiers in just\na couple of minutes.\nAnd what's really\ngreat about it is\nthat you can capture training\ndata directly from your webcam\nor microphone right away.\nYou can see here we're\nuploading our flower images\nand training a brand new\nmodel right in the browser.\nAnd once the model\nis trained, we\ncan make predictions right in\nthe browser to test it out.\nAlso, by the end of this, we'll\nhave a full machine learning\nmodel that we can export.\nAnd this model is a\nTensorFlow Lite model,\nwhich means we can deploy it\nanywhere, like mobile, web,\nor even in the Cloud.\nSo that's Teachable\nMachine, the perfect tool\nfor your prototypes.\nPOLONG LIN: All right, Zack.\nI'm trying to build an\nenterprise grade image\nclassification model.\nBut I don't really\nhave the expertise.\nAnd my model needs to be\nreally accurate and scale well.\nI'm not a data scientist\nor ML engineer.\nBut I already have a label\ndata set ready to go.\nWhat can I use?\nZACK AKIL: Ah, now that\nsounds like a perfect use case\nfor AutoML in Vertex AI.\nIt's a machine-learning tool for\ndevelopers on Google Cloud that\nallows you to train custom\nenterprise grade models based\non your own data.\nYou can use it to\nbuild models to predict\non your images, video,\ntext, or even tabular data.\nAnd because it's\npart of Vertex AI,\nyou can easily deploy your\nmodels for large scale batch\nand real time predictions.\nPOLONG LIN: Hey, Mr.\nZack, I'm a developer.\nAnd I have an app where I\nwant to add some ML powered\ncapabilities without\nneeding to build or deploy\nany models myself--\nspecific tasks like\nimage-labeling,\nsentiment analysis, or\ntext classification.\nWhat can I use that just\nworks out of the box?\nZACK AKIL: Ah,\nexcellent question.\nI think some of the pre-trained\nML APIs would be perfect.\nThese are powerful\npre-trained models\nthat allow you to embed machine\nlearning capabilities directly\ninto your applications with\njust a single API call.\nYou can see here how there\nare great common tasks\nlike sentiment analysis\nin text, object and person\ndetection in video, and\neven some really cool things\nlike landmark\ndetection in photos.\nAnd there's loads\nof other features\nthat I haven't even mentioned.\nSo definitely check out\nthe ML APIs in Vertex AI.\nPOLONG LIN: Hey, Zack.\nI want to generate\nimages and text.\nWhere can I begin?\nZACK AKIL: Now that\nsounds like a perfect use\ncase for Generative AI Studio.\nIt is a managed\nenvironment in Vertex AI\nthat makes it easy to\ndeploy, interact with,\nand tune generative\nmodels to production.\nIt's got a simple interface\nfor prompt design, tuning,\nand deployment for\ndevelopers to get\nstarted building\nwith generative AI.\nLet's walk through an example.\nLet's say I have some blog\ncontent around healthy granola\nbars.\nAnd I want to generate a\nmultimedia marketing campaign\naround this.\nUsing just the\nblog content, I can\nwrite a prompt and Generative\nAI Studio will generate a blog\ntitle, headline, and Instagram\ncaption with hashtags\nfor a marketing campaign.\nAnd there you have a blog\nheadline, a blog post,\nand an Instagram content\nfor our campaign.\nNo ML expertise required.\nAnd you can also view the\nAPI code to use Generative AI\nStudio programmatically.\nWe can also use Vertex's\ngenerative vision AI\ncapabilities.\nWith our image\ngeneration model, I\ncan use the simple text\nprompts to generate\nimages that go along with\nmy marketing campaign.\nYou can see here a\nprompt being used\nto generate multiple images of a\ngranola bar on a kitchen table.\nAnd then we can then\nuse these images\nin our marketing campaign.\nAnd that's just one\nexample of how you\ncan use Generative AI Studio.\nBut note, you can also tune\nthe foundation model as well.\nHey, Polong, I'm looking\nfor a single place\nwhere I can search,\ndiscover, and use\nmodels that might be available\nto me on Google Cloud.\nWhere can I go for this?\nPOLONG LIN: Ah,\nfor that use case,\nyou might really like\nVertex AI Model Garden.\nIt provides a single\nenvironment to search, discover,\nand interact with curated\nmodels both from Google\nand open source.\nFor Model Garden, you can kick\noff a variety of workflows,\nincluding using the\nmodel directly as an API,\ntuning the model in\nGenerative AI Studio,\nor deploying the model\ndirectly to a data science\nnotebook in Vertex AI.\nWe've also just\nlaunched four new APIs\nthat will be available\nin the Model Garden.\nWe've announced our code\ngeneration and completion\nmodels, which can help\nwith software development.\nWe've also announced an\nimage generation model,\nwhich includes the ability\nto edit and iterate over\nimages you've generated.\nWe've also announced\nour universal speech\nmodel, which is the next\ngeneration of speech to text.\nAnd then we've also\nannounced an embedding model,\nwhich lets you\nextract embeddings\nfrom unstructured data.\nZACK AKIL: Hey, Polong.\nI wish I had a way to tune\nmy models to understand\nmy preferences in the way\nthat they respond to me.\nWhat should I do?\nPOLONG LIN: Well, I heard\nthat GCP is coming out\nwith a new capability\ncalled reinforcement\nlearning from human\nfeedback, or RLHF for short.\nWith RLHF, you can\ntune your models\nto learn directly from\npositive or negative feedback\nand use that to optimize the\nperformance of your models.\nBe on the lookout for more news\nabout this exciting capability\nlater this year.\nZACK AKIL: Hey, Polong.\nI've already got a lot\nof data in BigQuery.\nAnd ideally, I'd like to\nuse this data to train\nmy own machine learning models.\nBut I'm not quite\nsure where to begin.\nPOLONG LIN: Well, that\nsounds like a perfect use\ncase for BigQuery ML.\nUsing just SQL, you can train,\nevaluate, make predictions,\nall within BigQuery without\nneeding to move your data out\nof your data warehouse.\nSo in this example, you can\ncreate a classification model\nin SQL with a create\nmodel statement,\nthen make predictions\nusing an ML.predict query.\nYou can even use\nBigQuery ML directly\non your unstructured data via an\nexciting new capability called\nBigQuery ML inference engine.\nSo say you have\nunstructured data\nlike image files stored\nin Google Cloud Storage,\nbut your primary workflow\nis all through BigQuery,\nso now using BigQuery\nML inference engine,\nyou can run inference directly\non data stored in Cloud Storage\nthrough BigQuery.\nYour models could be\nimported TensorFlow models,\nXG boost models, ONNX models,\nor even a custom Vertex AI\nendpoint that you have deployed.\nAnd if you don't\nhave a model at hand,\nyou can use the\npre-trained ML APIs\nlike the vision, natural\nlanguage, and translate APIs.\nCheck out the BigQuery ML\nlink for more information.\nZACK AKIL: Yo, Polong, I\nwant to get my hands dirty\nand play around with machine\nlearning libraries in Python.\nHow do I get started\nas quick as possible?\nPOLONG LIN: As\nquick as possible?\nThat sounds like a perfect\nuse case for Colab.\nIn seconds, you can\ncreate a Colab notebook\nand start using Python\ndirectly in the browser.\nYou can import or install\nyour favorite libraries.\nAnd you can even load notebooks\nor code that you found online\nor check out some of\nthese sample notebooks.\nYou can also use Colab\nwith Google Cloud\nlike reading data from BigQuery.\nSo check out Colab\nin the link below.\nZACK AKIL: All right, Polong.\nI've played around with Colab,\nand I'm loving the notebook\nenvironment.\nBut I'm an enterprise developer.\nAnd now I want to think\nabout production workloads.\nAnd I also want to\nthink about integrations\nwith the rest of Google Cloud.\nWhat can I do?\nPOLONG LIN: That's\na great question.\nAnd it sounds like you\nmight get a kick out\nof Vertex AI Workbench.\nYou can create and customize\nJupyterLab instances\non Google Cloud.\nSo here you can\nsee some instances\nwith just Python and others\nwith TensorFlow or PyTorch\npre-installed with\nGPUs attached.\nAnd as you open\nan instance, it's\nthe familiar Jupyter\nNotebook interface.\nYou can create new instances\nand customize things\nlike the size of your machine\nand location and permissions.\nAnd it's got great integrations\nwith the rest of Google Cloud\nbecause it's part\nof Google Cloud.\nZACK AKIL: I'm a\nmachiner and engineer.\nAnd I need an enterprise grade\nway to train my custom models\nat scale.\nWhat can I use?\nPOLONG LIN: Well,\nZack, might I say\nthat is a perfect use case\nfor Vertex AI custom training.\nYou can bring your ML\ncode and run it in a Cloud\nwith Vertex AI.\nYou can keep track of\nyour model experiments,\nuse automated\nhyperparameter tuning,\nand leverage ML op's\ncapabilities of Vertex AI\nlike orchestrating your\nmodel training and deployment\nworkflows with\nVertex AI pipelines.\nSo imagine that I\nhave a model that I've\nbeen training in a\nnotebook environment\nfor experimentation.\nAnd maybe once I'm\ncloser to production,\nor if I have really\nheavy training workloads,\nthen I might just\ntrain directly using\nVertex AI custom training.\nSo I containerized my\ncode, then submit it\nto Vertex AI custom training\nto run it for me in a managed\nand repeatable way.\nSo find out more about\nVertex AI custom training\nin the link on the screen.\nHey, Zack.\nI'm an enterprise developer.\nAnd I want to build\na fast AI powered\nsearch based on unstructured\ndata, using embeddings.\nWhat can I use?\nZACK AKIL: Ah, embeddings, that\nsounds like a perfect use case\nfor Vertex AI matching engine.\nIt's our highly optimized vector\ndatabase that stores and does\nfast lookups of embeddings.\nBut what does this mean?\nWell, in this example, we have\ntwo million random images.\nAnd we want to search for\nthe images that look the most\nsimilar to this yellow car.\nSo the matching engine will\ndo an extremely fast lookup\nby finding the nearest\nembeddings to the embedding\nof this yellow car.\nAnd then it's going to return\nthe results in milliseconds.\nBecause it's embeddings, we\ncan use a variety of data types\nlike text, images, video,\naudio, or anything else\nthat you can convert\ninto embeddings.\nVertex AI matching engine even\nsupports real time updates\nso that you can make\nnew data immediately\nsearchable without needing to\nreindex the entire database.\nPOLONG LIN: Awesome.\nSo that was the final\nitem on our list\nof 10 ways of doing machine\nlearning with Google Cloud.\nCheck out the links to learn\nmore about each of the 10 ways.\nZACK AKIL: Thank you\nso much for watching.\nAnd enjoy the rest\nof Google I/O.\n[MUSIC PLAYING]\n",
  "words": [
    "music",
    "playing",
    "polong",
    "lin",
    "hi",
    "polong",
    "zack",
    "akil",
    "zack",
    "polong",
    "lin",
    "going",
    "show",
    "10",
    "ways",
    "using",
    "machine",
    "learning",
    "google",
    "cloud",
    "zack",
    "akil",
    "going",
    "cover",
    "beginner",
    "intermediate",
    "advanced",
    "ways",
    "machine",
    "learning",
    "polong",
    "lin",
    "beginner",
    "perfect",
    "brand",
    "new",
    "machine",
    "learning",
    "want",
    "use",
    "without",
    "expertise",
    "zack",
    "akil",
    "intermediate",
    "knowledge",
    "machine",
    "learning",
    "may",
    "want",
    "customize",
    "models",
    "polong",
    "lin",
    "advanced",
    "ml",
    "engineer",
    "wants",
    "take",
    "skills",
    "knowledge",
    "next",
    "level",
    "full",
    "customizability",
    "enterprise",
    "grade",
    "scale",
    "zack",
    "akil",
    "going",
    "give",
    "links",
    "tools",
    "learn",
    "let",
    "get",
    "started",
    "polong",
    "lin",
    "hey",
    "zack",
    "trying",
    "build",
    "prototype",
    "classify",
    "images",
    "specifically",
    "identifying",
    "flower",
    "species",
    "based",
    "photos",
    "lot",
    "photos",
    "yet",
    "really",
    "want",
    "fastest",
    "way",
    "get",
    "quick",
    "proof",
    "concept",
    "door",
    "could",
    "use",
    "zack",
    "akil",
    "sounds",
    "like",
    "perfect",
    "use",
    "case",
    "teachable",
    "machine",
    "tool",
    "lets",
    "build",
    "image",
    "audio",
    "classifiers",
    "couple",
    "minutes",
    "really",
    "great",
    "capture",
    "training",
    "data",
    "directly",
    "webcam",
    "microphone",
    "right",
    "away",
    "see",
    "uploading",
    "flower",
    "images",
    "training",
    "brand",
    "new",
    "model",
    "right",
    "browser",
    "model",
    "trained",
    "make",
    "predictions",
    "right",
    "browser",
    "test",
    "also",
    "end",
    "full",
    "machine",
    "learning",
    "model",
    "export",
    "model",
    "tensorflow",
    "lite",
    "model",
    "means",
    "deploy",
    "anywhere",
    "like",
    "mobile",
    "web",
    "even",
    "cloud",
    "teachable",
    "machine",
    "perfect",
    "tool",
    "prototypes",
    "polong",
    "lin",
    "right",
    "zack",
    "trying",
    "build",
    "enterprise",
    "grade",
    "image",
    "classification",
    "model",
    "really",
    "expertise",
    "model",
    "needs",
    "really",
    "accurate",
    "scale",
    "well",
    "data",
    "scientist",
    "ml",
    "engineer",
    "already",
    "label",
    "data",
    "set",
    "ready",
    "go",
    "use",
    "zack",
    "akil",
    "ah",
    "sounds",
    "like",
    "perfect",
    "use",
    "case",
    "automl",
    "vertex",
    "ai",
    "tool",
    "developers",
    "google",
    "cloud",
    "allows",
    "train",
    "custom",
    "enterprise",
    "grade",
    "models",
    "based",
    "data",
    "use",
    "build",
    "models",
    "predict",
    "images",
    "video",
    "text",
    "even",
    "tabular",
    "data",
    "part",
    "vertex",
    "ai",
    "easily",
    "deploy",
    "models",
    "large",
    "scale",
    "batch",
    "real",
    "time",
    "predictions",
    "polong",
    "lin",
    "hey",
    "zack",
    "developer",
    "app",
    "want",
    "add",
    "ml",
    "powered",
    "capabilities",
    "without",
    "needing",
    "build",
    "deploy",
    "models",
    "specific",
    "tasks",
    "like",
    "sentiment",
    "analysis",
    "text",
    "classification",
    "use",
    "works",
    "box",
    "zack",
    "akil",
    "ah",
    "excellent",
    "question",
    "think",
    "ml",
    "apis",
    "would",
    "perfect",
    "powerful",
    "models",
    "allow",
    "embed",
    "machine",
    "learning",
    "capabilities",
    "directly",
    "applications",
    "single",
    "api",
    "call",
    "see",
    "great",
    "common",
    "tasks",
    "like",
    "sentiment",
    "analysis",
    "text",
    "object",
    "person",
    "detection",
    "video",
    "even",
    "really",
    "cool",
    "things",
    "like",
    "landmark",
    "detection",
    "photos",
    "loads",
    "features",
    "even",
    "mentioned",
    "definitely",
    "check",
    "ml",
    "apis",
    "vertex",
    "ai",
    "polong",
    "lin",
    "hey",
    "zack",
    "want",
    "generate",
    "images",
    "text",
    "begin",
    "zack",
    "akil",
    "sounds",
    "like",
    "perfect",
    "use",
    "case",
    "generative",
    "ai",
    "studio",
    "managed",
    "environment",
    "vertex",
    "ai",
    "makes",
    "easy",
    "deploy",
    "interact",
    "tune",
    "generative",
    "models",
    "production",
    "got",
    "simple",
    "interface",
    "prompt",
    "design",
    "tuning",
    "deployment",
    "developers",
    "get",
    "started",
    "building",
    "generative",
    "ai",
    "let",
    "walk",
    "example",
    "let",
    "say",
    "blog",
    "content",
    "around",
    "healthy",
    "granola",
    "bars",
    "want",
    "generate",
    "multimedia",
    "marketing",
    "campaign",
    "around",
    "using",
    "blog",
    "content",
    "write",
    "prompt",
    "generative",
    "ai",
    "studio",
    "generate",
    "blog",
    "title",
    "headline",
    "instagram",
    "caption",
    "hashtags",
    "marketing",
    "campaign",
    "blog",
    "headline",
    "blog",
    "post",
    "instagram",
    "content",
    "campaign",
    "ml",
    "expertise",
    "required",
    "also",
    "view",
    "api",
    "code",
    "use",
    "generative",
    "ai",
    "studio",
    "programmatically",
    "also",
    "use",
    "vertex",
    "generative",
    "vision",
    "ai",
    "capabilities",
    "image",
    "generation",
    "model",
    "use",
    "simple",
    "text",
    "prompts",
    "generate",
    "images",
    "go",
    "along",
    "marketing",
    "campaign",
    "see",
    "prompt",
    "used",
    "generate",
    "multiple",
    "images",
    "granola",
    "bar",
    "kitchen",
    "table",
    "use",
    "images",
    "marketing",
    "campaign",
    "one",
    "example",
    "use",
    "generative",
    "ai",
    "studio",
    "note",
    "also",
    "tune",
    "foundation",
    "model",
    "well",
    "hey",
    "polong",
    "looking",
    "single",
    "place",
    "search",
    "discover",
    "use",
    "models",
    "might",
    "available",
    "google",
    "cloud",
    "go",
    "polong",
    "lin",
    "ah",
    "use",
    "case",
    "might",
    "really",
    "like",
    "vertex",
    "ai",
    "model",
    "garden",
    "provides",
    "single",
    "environment",
    "search",
    "discover",
    "interact",
    "curated",
    "models",
    "google",
    "open",
    "source",
    "model",
    "garden",
    "kick",
    "variety",
    "workflows",
    "including",
    "using",
    "model",
    "directly",
    "api",
    "tuning",
    "model",
    "generative",
    "ai",
    "studio",
    "deploying",
    "model",
    "directly",
    "data",
    "science",
    "notebook",
    "vertex",
    "ai",
    "also",
    "launched",
    "four",
    "new",
    "apis",
    "available",
    "model",
    "garden",
    "announced",
    "code",
    "generation",
    "completion",
    "models",
    "help",
    "software",
    "development",
    "also",
    "announced",
    "image",
    "generation",
    "model",
    "includes",
    "ability",
    "edit",
    "iterate",
    "images",
    "generated",
    "also",
    "announced",
    "universal",
    "speech",
    "model",
    "next",
    "generation",
    "speech",
    "text",
    "also",
    "announced",
    "embedding",
    "model",
    "lets",
    "extract",
    "embeddings",
    "unstructured",
    "data",
    "zack",
    "akil",
    "hey",
    "polong",
    "wish",
    "way",
    "tune",
    "models",
    "understand",
    "preferences",
    "way",
    "respond",
    "polong",
    "lin",
    "well",
    "heard",
    "gcp",
    "coming",
    "new",
    "capability",
    "called",
    "reinforcement",
    "learning",
    "human",
    "feedback",
    "rlhf",
    "short",
    "rlhf",
    "tune",
    "models",
    "learn",
    "directly",
    "positive",
    "negative",
    "feedback",
    "use",
    "optimize",
    "performance",
    "models",
    "lookout",
    "news",
    "exciting",
    "capability",
    "later",
    "year",
    "zack",
    "akil",
    "hey",
    "polong",
    "already",
    "got",
    "lot",
    "data",
    "bigquery",
    "ideally",
    "like",
    "use",
    "data",
    "train",
    "machine",
    "learning",
    "models",
    "quite",
    "sure",
    "begin",
    "polong",
    "lin",
    "well",
    "sounds",
    "like",
    "perfect",
    "use",
    "case",
    "bigquery",
    "ml",
    "using",
    "sql",
    "train",
    "evaluate",
    "make",
    "predictions",
    "within",
    "bigquery",
    "without",
    "needing",
    "move",
    "data",
    "data",
    "warehouse",
    "example",
    "create",
    "classification",
    "model",
    "sql",
    "create",
    "model",
    "statement",
    "make",
    "predictions",
    "using",
    "query",
    "even",
    "use",
    "bigquery",
    "ml",
    "directly",
    "unstructured",
    "data",
    "via",
    "exciting",
    "new",
    "capability",
    "called",
    "bigquery",
    "ml",
    "inference",
    "engine",
    "say",
    "unstructured",
    "data",
    "like",
    "image",
    "files",
    "stored",
    "google",
    "cloud",
    "storage",
    "primary",
    "workflow",
    "bigquery",
    "using",
    "bigquery",
    "ml",
    "inference",
    "engine",
    "run",
    "inference",
    "directly",
    "data",
    "stored",
    "cloud",
    "storage",
    "bigquery",
    "models",
    "could",
    "imported",
    "tensorflow",
    "models",
    "xg",
    "boost",
    "models",
    "onnx",
    "models",
    "even",
    "custom",
    "vertex",
    "ai",
    "endpoint",
    "deployed",
    "model",
    "hand",
    "use",
    "ml",
    "apis",
    "like",
    "vision",
    "natural",
    "language",
    "translate",
    "apis",
    "check",
    "bigquery",
    "ml",
    "link",
    "information",
    "zack",
    "akil",
    "yo",
    "polong",
    "want",
    "get",
    "hands",
    "dirty",
    "play",
    "around",
    "machine",
    "learning",
    "libraries",
    "python",
    "get",
    "started",
    "quick",
    "possible",
    "polong",
    "lin",
    "quick",
    "possible",
    "sounds",
    "like",
    "perfect",
    "use",
    "case",
    "colab",
    "seconds",
    "create",
    "colab",
    "notebook",
    "start",
    "using",
    "python",
    "directly",
    "browser",
    "import",
    "install",
    "favorite",
    "libraries",
    "even",
    "load",
    "notebooks",
    "code",
    "found",
    "online",
    "check",
    "sample",
    "notebooks",
    "also",
    "use",
    "colab",
    "google",
    "cloud",
    "like",
    "reading",
    "data",
    "bigquery",
    "check",
    "colab",
    "link",
    "zack",
    "akil",
    "right",
    "polong",
    "played",
    "around",
    "colab",
    "loving",
    "notebook",
    "environment",
    "enterprise",
    "developer",
    "want",
    "think",
    "production",
    "workloads",
    "also",
    "want",
    "think",
    "integrations",
    "rest",
    "google",
    "cloud",
    "polong",
    "lin",
    "great",
    "question",
    "sounds",
    "like",
    "might",
    "get",
    "kick",
    "vertex",
    "ai",
    "workbench",
    "create",
    "customize",
    "jupyterlab",
    "instances",
    "google",
    "cloud",
    "see",
    "instances",
    "python",
    "others",
    "tensorflow",
    "pytorch",
    "gpus",
    "attached",
    "open",
    "instance",
    "familiar",
    "jupyter",
    "notebook",
    "interface",
    "create",
    "new",
    "instances",
    "customize",
    "things",
    "like",
    "size",
    "machine",
    "location",
    "permissions",
    "got",
    "great",
    "integrations",
    "rest",
    "google",
    "cloud",
    "part",
    "google",
    "cloud",
    "zack",
    "akil",
    "machiner",
    "engineer",
    "need",
    "enterprise",
    "grade",
    "way",
    "train",
    "custom",
    "models",
    "scale",
    "use",
    "polong",
    "lin",
    "well",
    "zack",
    "might",
    "say",
    "perfect",
    "use",
    "case",
    "vertex",
    "ai",
    "custom",
    "training",
    "bring",
    "ml",
    "code",
    "run",
    "cloud",
    "vertex",
    "ai",
    "keep",
    "track",
    "model",
    "experiments",
    "use",
    "automated",
    "hyperparameter",
    "tuning",
    "leverage",
    "ml",
    "op",
    "capabilities",
    "vertex",
    "ai",
    "like",
    "orchestrating",
    "model",
    "training",
    "deployment",
    "workflows",
    "vertex",
    "ai",
    "pipelines",
    "imagine",
    "model",
    "training",
    "notebook",
    "environment",
    "experimentation",
    "maybe",
    "closer",
    "production",
    "really",
    "heavy",
    "training",
    "workloads",
    "might",
    "train",
    "directly",
    "using",
    "vertex",
    "ai",
    "custom",
    "training",
    "containerized",
    "code",
    "submit",
    "vertex",
    "ai",
    "custom",
    "training",
    "run",
    "managed",
    "repeatable",
    "way",
    "find",
    "vertex",
    "ai",
    "custom",
    "training",
    "link",
    "screen",
    "hey",
    "zack",
    "enterprise",
    "developer",
    "want",
    "build",
    "fast",
    "ai",
    "powered",
    "search",
    "based",
    "unstructured",
    "data",
    "using",
    "embeddings",
    "use",
    "zack",
    "akil",
    "ah",
    "embeddings",
    "sounds",
    "like",
    "perfect",
    "use",
    "case",
    "vertex",
    "ai",
    "matching",
    "engine",
    "highly",
    "optimized",
    "vector",
    "database",
    "stores",
    "fast",
    "lookups",
    "embeddings",
    "mean",
    "well",
    "example",
    "two",
    "million",
    "random",
    "images",
    "want",
    "search",
    "images",
    "look",
    "similar",
    "yellow",
    "car",
    "matching",
    "engine",
    "extremely",
    "fast",
    "lookup",
    "finding",
    "nearest",
    "embeddings",
    "embedding",
    "yellow",
    "car",
    "going",
    "return",
    "results",
    "milliseconds",
    "embeddings",
    "use",
    "variety",
    "data",
    "types",
    "like",
    "text",
    "images",
    "video",
    "audio",
    "anything",
    "else",
    "convert",
    "embeddings",
    "vertex",
    "ai",
    "matching",
    "engine",
    "even",
    "supports",
    "real",
    "time",
    "updates",
    "make",
    "new",
    "data",
    "immediately",
    "searchable",
    "without",
    "needing",
    "reindex",
    "entire",
    "database",
    "polong",
    "lin",
    "awesome",
    "final",
    "item",
    "list",
    "10",
    "ways",
    "machine",
    "learning",
    "google",
    "cloud",
    "check",
    "links",
    "learn",
    "10",
    "ways",
    "zack",
    "akil",
    "thank",
    "much",
    "watching",
    "enjoy",
    "rest",
    "google",
    "music",
    "playing"
  ],
  "keywords": [
    "polong",
    "lin",
    "zack",
    "akil",
    "going",
    "10",
    "ways",
    "using",
    "machine",
    "learning",
    "google",
    "cloud",
    "perfect",
    "new",
    "want",
    "use",
    "without",
    "expertise",
    "customize",
    "models",
    "ml",
    "engineer",
    "enterprise",
    "grade",
    "scale",
    "learn",
    "let",
    "get",
    "started",
    "hey",
    "build",
    "images",
    "based",
    "photos",
    "really",
    "way",
    "quick",
    "sounds",
    "like",
    "case",
    "tool",
    "image",
    "great",
    "training",
    "data",
    "directly",
    "right",
    "see",
    "model",
    "browser",
    "make",
    "predictions",
    "also",
    "tensorflow",
    "deploy",
    "even",
    "classification",
    "well",
    "go",
    "ah",
    "vertex",
    "ai",
    "train",
    "custom",
    "video",
    "text",
    "developer",
    "capabilities",
    "needing",
    "think",
    "apis",
    "single",
    "api",
    "check",
    "generate",
    "generative",
    "studio",
    "environment",
    "tune",
    "production",
    "got",
    "prompt",
    "tuning",
    "example",
    "say",
    "blog",
    "content",
    "around",
    "marketing",
    "campaign",
    "code",
    "generation",
    "search",
    "might",
    "garden",
    "notebook",
    "announced",
    "embeddings",
    "unstructured",
    "capability",
    "bigquery",
    "create",
    "inference",
    "engine",
    "run",
    "link",
    "python",
    "colab",
    "rest",
    "instances",
    "fast",
    "matching"
  ]
}