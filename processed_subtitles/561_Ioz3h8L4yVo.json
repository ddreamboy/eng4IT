{
  "text": "what if we see some rest is for first\ngrade student in one poem Jupiter is the\nfifth from the sun it's the biggest in\nthe solar system it is the brightest of\nthem all the Romans named it after they\ngot Jupiter\nis it really doing this rhymes\nhey what is up everybody Ivan from\nweights and biases here and in this\nvideo I'll show you a really quick and a\nreally simple way that you can start\nusing opening eyes really cool Jupiter 3\nmodels in Python and if you have fine\ntune the gpt3 model and wondering how\nyou can use your fine tune gupt3 model\nI'll also show you how you can do that\nin the video let's get started so I\nwould say the main reason as to why you\nwould want to deploy gpt3 in Python is\nif you wanted to build some sort of\napplication uh using the magic of this\nreally really cool large language model\nso maybe you're coming into this video\nafter you've played around with Chad GPT\nwhich has very much taken the Internet\nby storm in the last couple months and\ntragic is essentially an application a a\nnicer way to ask questions from gbg3 and\nessentially like a gpt3 with a nicer UI\nand couple tweaks that that make it\npossible but the actual thing that\ngenerates text is still like very\ncreation of the gpt3 model that they're\nusing for chat GPT and so if you want to\ndo cool stuff the gpt3 that's what we're\ngonna learn about using in this video\nand hopefully we'll build some cool\napplications for it and this is going to\nbe a series of videos where in this one\nwe'll cover\nsetting it up in Python but in the next\nvideos we'll actually cover what kind of\napplications you can build with it so\nstay stay tuned for that and now let's\njump into setting up an open AI account\nand getting the API keys and all that\ngood stuff that we need to actually\nstart using it in Python so I am on the\nopening a website right now and Tuesday\nAPI we click on API and that's the part\nwhere you need to either create a new\naccount within openai or log into an\nexisting one I already have an account\num but but it's a fairly simple way to\ncreate it so just like go ahead click\nclick sign up and put in your details\nand you know get you an account I'm\ngoing to log into mine right now\nall right now I've logged into the open\nAI API part of the open AIS website so\nhere's a few things that we can do right\noff the bat for example you can go to\nthe playground here and here you can\nactually try the goose gpt3 essentially\nlike the same\num results that we'll get in this web\nclient will be getting uh in Python via\nthe API so for example maybe we want to\nhere's a poem about openai API so maybe\nwe'll ask you to write a poem about open\nAPI\nit's definitely it's definitely not the\nmost\num humble\nAI system that I've seen but\num I don't I don't think it's I don't\nthink it's very wrong uh what's it\nsaying here\nso um as you can see it works and that's\nwhat we'll be getting to use in Python\nand to use it in Python we need to get\nan API key\num so API key is essentially what will\nallow\num open AI to know that\na particular Python program that's\ncoloring the API is attached to our\naccount and this is the way they can you\nknow charge you money if you're using it\na lot and things like that and if you're\ncurious about prices I'm showing you\nsome on screen right now as you can see\nlike the prices vary by how powerful is\nthe model uh and also by how much text\nyou're generating with it so here\nthey're saying that the prices are per\n1000 tokens you can think of tokens as\npieces of words where thousand tokens is\nabout 750 words and as you can see you\ncan start experimenting for free using\n18 of free credits which you can use in\nyour first three months of using it and\nthen you can pay as you go and uh you\nknow you can choose your model but we've\nalready talked about the fact that you\ncan choose your model so yeah refer to\nopenai.com API pricing for the most\nrelevant pricing information but this is\njust for me to give you like an overview\nof uh what you can expect when you first\nstarted using the the API so now we're\ngonna go and get our API keys to do that\nwe'll click on our account we'll click\non view API keys\nso here we can see the existing API keys\nthat have been tied to our account and\nwhen they've been last used\nand I'm gonna create one right now to\nshow in this video but don't worry\nthough uh obviously after I've finished\nediting and making this video I'll click\non delete this API key and you know it's\nit's it's a\nI'm going to show you an example but\ndon't think that you can go and use it\nthen\num because I've revoked it so let's\nclick on this button to create a new\nsecret key API key generated so here\nit's saying that it's only showing us\nthe API key once and once we've copied\nit and saved it somewhere safe it's not\ngoing to show it to us again it's okay\nI'll copy it to clipboard and press ok\nnow we have a new API key that we'll use\nin the code and\nto do that let's obviously jump in the\ncode\nso the first thing we will do here is\nwe'll paste our very secret API key\num here which will essentially set up an\nenvironmental variable uh with the open\nAI key and that'll in the future will\nlet the open AI python client know what\nour API key is so let's do that so we've\npasted the API key here we run the self\ncode and the variable is defined so\nwe'll install openai which is Open the\nEyes python library and we'll install\nydb which is the weights and biases\npython library and waits and biases if\nyou're not familiar is an mlapse\nplatform which helps you with a lot of\nthe machine learning uh pipeline things\nlike tracking your data training your\nmodels optimizing the hyper parameters\nand all of that and since we're looking\nat this video as an example of a use\ncase where you want to go and develop\nsome sort of application using gpt3 it\nbecomes really important that you have a\nway to keep track of your prompts\nbecause a really important part of\nbuilding on top of a gpk3 is prompt\nengineering we're just kind of like\nfiguring out a nice way to almost like\nask the gpt3 to give you a desired\noutcome and and for that it's very vital\nthat you have a way to keep track while\nyou're experimenting of your prompts and\nthe completions that you're getting so\nthat you would not lose the best\nperforming prompts for example and that\nis what we're going to use weights and\nbiases for in this video so let's click\non the cell and install the libraries\nand kind of like an additional fun fact\nabout the two companies is that open AI\nis the first customer of weights and\nbiases and they actually use wnb to\ntrain all of this amazing GPT models and\nwhen it comes to fine-tuning wmbs also\nintegrated into openai so that you can\nget like with one line of code all of\nthe training metrics from your fine\ntunes and the weights and biases and all\nthat good stuff and all that is to kind\nof say that there's a lot of Merit using\nthe two products together so next up\nwe'll import some libraries and pass the\nAPI key to open Ai and so next up we're\ngoing to go and Define a new which\ndevices run inside a project that will\nname gpt3 app in Python and we'll also\nDefine the new weights and biases table\nwith two columns for prompt and\ncompletion\nas we want to keep track of that and wmb\ntables is a product inside wnb that lets\nyou interactively query and explore\ntabular data which is what we're going\nto do in this video with all the cool\npredictions\nand so now in the next cell we'll\nactually perform inference on our prompt\nusing gpt3 uh using the API so here let\nme make a larger so here's the command\nin the python that we're using to access\ngpt3 it's open AI that completion.create\nand here we pass the name of the engine\nwhich is as you remember there's couple\nvariations of GPU threes there's\ndifferent like\nDaVinci models and different versions of\nthese models for this one we're going to\nuse the most powerful as of right now\ntext DaVinci version 3 Model uh then we\npass our prompt as you can see our\nprompt is we Define it here and our\nprompt is to correct this to Standard\nEnglish she know when to the market so\nit's gonna do like some grammar\ncorrection stuff\num so we passed another prompt then we\nDefine temperature and temperature is a\nhyper parameter uh that is responsible\nfor how random the predictions that gpt3\ngives us are if it's like zero it's\nalways going to be the same thing if\nit's if it's uh closer to one it's\nactually gonna throw in some different\nstuff occasionally there and then Max\ntokens is for how many tokens do we want\nto run our predictions so the more\ntokens we have the more tax Deputy 3 can\ngenerate but the key word here is May\nbecause so for example when it finishes\ncorrecting this sentence to proper\ngrammar it'll output like a stop\nsequence which means the gpt3 is done\nwith uh with the with the predictions\nbecause if you think about it it's just\nimportant for the model to know when to\nstop its uh Generations as to be able to\ngenerate in general and that is me\nessentially trying to say that this type\nof parameter controls how many tokens\nthe model can predict in our case uh but\nit does not mean that it will always be\n256 tokens yeah that makes sense because\nsometimes it'll run into that like stop\nsequence and then there's tap and then\nthere's tab B frequency penalty and\npresence penalty which also we kind of\nused to guide the predictions a little\nbit and then it prints out the response\nand we added the wmb table our prompt in\nthe first column in the second column\nthe response to the gp3 gave us so let's\nlet's finally run the cell and see what\nit gives us\num so as you can see we had she know\nwhen to the market it transformed into\nshe did not go to the market which is\ncorrect if you ask me and the logic\neverything wmb tables in this case is\nthat we can go and we can run the cell\nwith like different prompts for a little\nbit so for example we'll ask it to\ncorrect he know when to\nlike say the store instead of the market\nright it'll give us the prediction\num he did not go to the store\num all that stuff gets added to the\ndoubling B tables in this case and then\nonce we're done with the predictions we\ncan call wnb.blog to lock this\num predictions table and call WB that\nfinish to kind of finish our particular\nrun and I'll kind of show you what that\ngives us right now\nand so it gives us a link now to our\nproject page and to this run the which\nwe've logged this table so we can go and\nwe can see here in the table\num our predictions she now went to the\nmarket you know in the market one time I\ndid this like off camera to test it and\nhe you know went to the store he did not\ngo to the store so\num there we have it so the usage here is\nthat you go you try different prompts\nyou log into the table once you're done\nyou lock the table and then you can\nexplore your prompt and by the way you\ncan find more information about these\nhyper parameters in the open AI docs\nI'll leave a link to them in the video\ndescription and if you want some\ninspiration for all the cool tasks that\nyou can do with gbt3 you can go to\num overview then you can go to like it's\non the opening I API website right so\nyou go to overview and then here you can\nclick on examples and an example here we\nhave all sorts of different tasks and by\nthe way I've taken the grammar one uh\nright here it's an example\num like it's an example right here in\ntheir in their docs in this way and as\nyou can see it has all sorts of tasks it\nhas SQL translate classification so here\nfor example we have this like task\nexamples summarize for a second Creator\nso we go here um The Prompt is summarize\nthis for a second grade student\num here's some information about Jupiter\nand we can go here look at the code look\nat the prompt\nokay so let's say for example we want to\nwork closely with this task so what I'll\ndo is I'll go and I'll start a new\nrandom awaits and buy something new\ntable because our previous round was\naround this task of correcting grammar\nso I'll start a new one and then I'll go\nand I'll update our prompt so I'll copy\nthis\nand paste it\nhere as I prompt and then there is also\nsome hyper parameter difference here\nthat open AI people have put for this\ntask so also copy and paste the highway\nparameters for this task right here\nand let's try running it\nso Jupiter is the fifth planet from the\nsun and the biggest in our solar system\nit is so bad that it can cast Shadows on\nEarth it is named after the Roman god\nJupiter also and has been known to\npeople since before recorded history\nand we've started with\num sunrise for second graders is done\nit has a lot of math stuff\nyeah so it's noticeably less complex\nthan what we've started with I would say\nand let's say maybe we want to vary this\na little bit so let's try\num summarize this for let's say first\ngrade student in uh one sentence\nso let's say we'll make it like even\nsimpler we'll share this prompt\nso it just gives us Jupiter is the fifth\nplanet from the sun and it's very bright\nand big named after the Roman god\nJupiter okay so maybe we want to vary\nthis prompt even more what if we see\nsome races for first grade student in\none poem\nbecause gpt3 in recent update it's\ngotten really good with rhyming so\num\nokay Jupiter is the fifth Jupiter is the\nfifth from the sun it's the biggest in\nthe solar system\nit is the brightest of them all the\nRomans named it after they got Jupiter\nis it really doing this Rhymes so we\nknow it by that name\nit's so bad that you can it's so bright\nthat you can cast Shadows with its light\nit's the third brightest in the night\nwow like this is pretty cool yeah it's\nquite fun and you can do a lot of\nvariability with this promise and also\nlike this rhymes like if it's really\npulling up its Rhymes Sun System like\nthere's some cool rhymes\nand uh keep in mind we've been uh\nlagging all of this like prompting\ncompletion pairs wmb table so that we if\nwe stumble on some of this like cool\nprompt and yes we're not losing them and\nwe can go and lock them to weights and\nbiases now and then click the link to\nnavigate to our run page to which we've\nlocked the table and then see our uh\nprompts and completions\nso here's the yeah so here's the latest\none summarizes for\nour first grade students in the poem and\nhear our previous ones this way you can\nkeep track of all that good stuff\nand the last thing I wanted to show you\nis how you can use a fine tune gpt3\nmodel in Python using the API as well in\nthe video which will pop up somewhere in\none of the corners I find tune gpt3 to\ngenerate new\num Doctor Who episodes not so to like\ncome up with new Sci-Fi TV show ideas\nand I'm gonna show you how you can use\nthose types of fine-tuned models in the\nAPI as well so a couple things you need\nto change so in that video like I've\ndone a detailed explanation of all the\nsteps there so go and watch that video\nto learn how I fine-tuned it and all\nthat good stuff and so to use a fine\ntune model you need to know the name of\nthat fine tune and in that video we use\nthe opening W and B integration so I've\nbeen logging all that stuff to weights\nand biases and here for example let's\nsay I want to use this model with its\nname Curry FG 1GB\netc etc\nI go and you know I copy the name of the\nfine tune and then I place the name of\nthe fine tune in the name of the engine\nuh like\nlet's let's see I do it like this\nbecause that's like our engine and\nthat's the you know name of the model\nand then move our fine tune on that\nmodel\nand if that function is in your open AI\naccount it'll be able to access it via\nthe API in this way and then we also\nneed to we can play with time parameters\nbut I don't think that's necessary I\nmean maybe we'll give it more tokens to\ngenerate with maybe a temperature seems\ngood and we also need to\nchange your prompt to the type of prompt\ncompletion structure that we've used for\nfine tuning so for example in the Doctor\nWho fine-tunes I've used imaginary name\nof an episode so let's for example try\ninvasion of alien fish and then this\nlike arrow symbol to know the transition\nfrom where the prompt ends to where the\ncompletion should begin that's that's\nlike the fine tuning stuff like\nwatch that video I go into way more\ndepth on this particular topic so now\nthat we've done that I'll go and I'll\nstart a new weights and biases run and\nwe'll run this cell to perform inference\non our prompt using the fine-tuned model\nso here we can see the results the\ncompletion for the prompt invasion of\nalien fish and ancient race of\namphibious creatures known only as the\ninvasions have taken over the British\nCoastline and are now in a bit to take\nover the world their leader in Grid has\nkidnapped the doctor's companion Joe\nGrant and the first doctor to come their\naid doctor must then go on a dangerous\nmission to defeat the Invaders but will\nhe returned with news of Ingrid's\nweakness ending credits followed by the\nepilogue uh uh yeah it goes a bit off\nthe rail here with the Indians so I\nthink it may benefit here if we also add\nstop sequence so as you can see in the\nlast example it kind of went all the\nrails at the end because I forgot to\ninclude a stop sequence so here in the\nDucks I found that we can pass the\nagreement stop and so here I'll put the\nstop sequence I think it was just and\nfor that particular fine tune and let's\ntry to generate some more\nlink towards the futuristic factor in\nEarth yada\nand yeah as you can see now it ends\nnormally when the factory explodes and\ndestroys a life on Earth well not\nnormally in the synopsis sense but\nnormally in the sense that it's not\nspamming all of like and and then then\nstep sequences and it actually stops\ngeneration when it stumbles into an end\nso that's like a useful one to know uh\nwhen using this uh when using your fine\ntune models with the opening API in\nPython and in the end we'll uh lock the\ntable and uh call 1GB that finish\nand here we can see all the prompt and\ntheir completions that we've tried this\ntime so thank you so much for watching\nthis video we've covered all the stuff\nthat I could think of that can be useful\nwhen deploying gpt3 and python with the\nopen air API and if you have any\nquestions uh please feel free to leave\nthem in the comment section down below\nand I'll be happy to answer you and if\nyou like this video consider smashing\nthe like button and subscribing to our\nchannel to see more tutorials interviews\nand talks and yeah thank you so much for\nwatching this video I really hope you\nenjoyed it and found it useful\n",
  "words": [
    "see",
    "rest",
    "first",
    "grade",
    "student",
    "one",
    "poem",
    "jupiter",
    "fifth",
    "sun",
    "biggest",
    "solar",
    "system",
    "brightest",
    "romans",
    "named",
    "got",
    "jupiter",
    "really",
    "rhymes",
    "hey",
    "everybody",
    "ivan",
    "weights",
    "biases",
    "video",
    "show",
    "really",
    "quick",
    "really",
    "simple",
    "way",
    "start",
    "using",
    "opening",
    "eyes",
    "really",
    "cool",
    "jupiter",
    "3",
    "models",
    "python",
    "fine",
    "tune",
    "gpt3",
    "model",
    "wondering",
    "use",
    "fine",
    "tune",
    "gupt3",
    "model",
    "also",
    "show",
    "video",
    "let",
    "get",
    "started",
    "would",
    "say",
    "main",
    "reason",
    "would",
    "want",
    "deploy",
    "gpt3",
    "python",
    "wanted",
    "build",
    "sort",
    "application",
    "uh",
    "using",
    "magic",
    "really",
    "really",
    "cool",
    "large",
    "language",
    "model",
    "maybe",
    "coming",
    "video",
    "played",
    "around",
    "chad",
    "gpt",
    "much",
    "taken",
    "internet",
    "storm",
    "last",
    "couple",
    "months",
    "tragic",
    "essentially",
    "application",
    "nicer",
    "way",
    "ask",
    "questions",
    "gbg3",
    "essentially",
    "like",
    "gpt3",
    "nicer",
    "ui",
    "couple",
    "tweaks",
    "make",
    "possible",
    "actual",
    "thing",
    "generates",
    "text",
    "still",
    "like",
    "creation",
    "gpt3",
    "model",
    "using",
    "chat",
    "gpt",
    "want",
    "cool",
    "stuff",
    "gpt3",
    "gon",
    "na",
    "learn",
    "using",
    "video",
    "hopefully",
    "build",
    "cool",
    "applications",
    "going",
    "series",
    "videos",
    "one",
    "cover",
    "setting",
    "python",
    "next",
    "videos",
    "actually",
    "cover",
    "kind",
    "applications",
    "build",
    "stay",
    "stay",
    "tuned",
    "let",
    "jump",
    "setting",
    "open",
    "ai",
    "account",
    "getting",
    "api",
    "keys",
    "good",
    "stuff",
    "need",
    "actually",
    "start",
    "using",
    "python",
    "opening",
    "website",
    "right",
    "tuesday",
    "api",
    "click",
    "api",
    "part",
    "need",
    "either",
    "create",
    "new",
    "account",
    "within",
    "openai",
    "log",
    "existing",
    "one",
    "already",
    "account",
    "um",
    "fairly",
    "simple",
    "way",
    "create",
    "like",
    "go",
    "ahead",
    "click",
    "click",
    "sign",
    "put",
    "details",
    "know",
    "get",
    "account",
    "going",
    "log",
    "mine",
    "right",
    "right",
    "logged",
    "open",
    "ai",
    "api",
    "part",
    "open",
    "ais",
    "website",
    "things",
    "right",
    "bat",
    "example",
    "go",
    "playground",
    "actually",
    "try",
    "goose",
    "gpt3",
    "essentially",
    "like",
    "um",
    "results",
    "get",
    "web",
    "client",
    "getting",
    "uh",
    "python",
    "via",
    "api",
    "example",
    "maybe",
    "want",
    "poem",
    "openai",
    "api",
    "maybe",
    "ask",
    "write",
    "poem",
    "open",
    "api",
    "definitely",
    "definitely",
    "um",
    "humble",
    "ai",
    "system",
    "seen",
    "um",
    "think",
    "think",
    "wrong",
    "uh",
    "saying",
    "um",
    "see",
    "works",
    "getting",
    "use",
    "python",
    "use",
    "python",
    "need",
    "get",
    "api",
    "key",
    "um",
    "api",
    "key",
    "essentially",
    "allow",
    "um",
    "open",
    "ai",
    "know",
    "particular",
    "python",
    "program",
    "coloring",
    "api",
    "attached",
    "account",
    "way",
    "know",
    "charge",
    "money",
    "using",
    "lot",
    "things",
    "like",
    "curious",
    "prices",
    "showing",
    "screen",
    "right",
    "see",
    "like",
    "prices",
    "vary",
    "powerful",
    "model",
    "uh",
    "also",
    "much",
    "text",
    "generating",
    "saying",
    "prices",
    "per",
    "1000",
    "tokens",
    "think",
    "tokens",
    "pieces",
    "words",
    "thousand",
    "tokens",
    "750",
    "words",
    "see",
    "start",
    "experimenting",
    "free",
    "using",
    "18",
    "free",
    "credits",
    "use",
    "first",
    "three",
    "months",
    "using",
    "pay",
    "go",
    "uh",
    "know",
    "choose",
    "model",
    "already",
    "talked",
    "fact",
    "choose",
    "model",
    "yeah",
    "refer",
    "api",
    "pricing",
    "relevant",
    "pricing",
    "information",
    "give",
    "like",
    "overview",
    "uh",
    "expect",
    "first",
    "started",
    "using",
    "api",
    "gon",
    "na",
    "go",
    "get",
    "api",
    "keys",
    "click",
    "account",
    "click",
    "view",
    "api",
    "keys",
    "see",
    "existing",
    "api",
    "keys",
    "tied",
    "account",
    "last",
    "used",
    "gon",
    "na",
    "create",
    "one",
    "right",
    "show",
    "video",
    "worry",
    "though",
    "uh",
    "obviously",
    "finished",
    "editing",
    "making",
    "video",
    "click",
    "delete",
    "api",
    "key",
    "know",
    "going",
    "show",
    "example",
    "think",
    "go",
    "use",
    "um",
    "revoked",
    "let",
    "click",
    "button",
    "create",
    "new",
    "secret",
    "key",
    "api",
    "key",
    "generated",
    "saying",
    "showing",
    "us",
    "api",
    "key",
    "copied",
    "saved",
    "somewhere",
    "safe",
    "going",
    "show",
    "us",
    "okay",
    "copy",
    "clipboard",
    "press",
    "ok",
    "new",
    "api",
    "key",
    "use",
    "code",
    "let",
    "obviously",
    "jump",
    "code",
    "first",
    "thing",
    "paste",
    "secret",
    "api",
    "key",
    "um",
    "essentially",
    "set",
    "environmental",
    "variable",
    "uh",
    "open",
    "ai",
    "key",
    "future",
    "let",
    "open",
    "ai",
    "python",
    "client",
    "know",
    "api",
    "key",
    "let",
    "pasted",
    "api",
    "key",
    "run",
    "self",
    "code",
    "variable",
    "defined",
    "install",
    "openai",
    "open",
    "eyes",
    "python",
    "library",
    "install",
    "ydb",
    "weights",
    "biases",
    "python",
    "library",
    "waits",
    "biases",
    "familiar",
    "mlapse",
    "platform",
    "helps",
    "lot",
    "machine",
    "learning",
    "uh",
    "pipeline",
    "things",
    "like",
    "tracking",
    "data",
    "training",
    "models",
    "optimizing",
    "hyper",
    "parameters",
    "since",
    "looking",
    "video",
    "example",
    "use",
    "case",
    "want",
    "go",
    "develop",
    "sort",
    "application",
    "using",
    "gpt3",
    "becomes",
    "really",
    "important",
    "way",
    "keep",
    "track",
    "prompts",
    "really",
    "important",
    "part",
    "building",
    "top",
    "gpk3",
    "prompt",
    "engineering",
    "kind",
    "like",
    "figuring",
    "nice",
    "way",
    "almost",
    "like",
    "ask",
    "gpt3",
    "give",
    "desired",
    "outcome",
    "vital",
    "way",
    "keep",
    "track",
    "experimenting",
    "prompts",
    "completions",
    "getting",
    "would",
    "lose",
    "best",
    "performing",
    "prompts",
    "example",
    "going",
    "use",
    "weights",
    "biases",
    "video",
    "let",
    "click",
    "cell",
    "install",
    "libraries",
    "kind",
    "like",
    "additional",
    "fun",
    "fact",
    "two",
    "companies",
    "open",
    "ai",
    "first",
    "customer",
    "weights",
    "biases",
    "actually",
    "use",
    "wnb",
    "train",
    "amazing",
    "gpt",
    "models",
    "comes",
    "wmbs",
    "also",
    "integrated",
    "openai",
    "get",
    "like",
    "one",
    "line",
    "code",
    "training",
    "metrics",
    "fine",
    "tunes",
    "weights",
    "biases",
    "good",
    "stuff",
    "kind",
    "say",
    "lot",
    "merit",
    "using",
    "two",
    "products",
    "together",
    "next",
    "import",
    "libraries",
    "pass",
    "api",
    "key",
    "open",
    "ai",
    "next",
    "going",
    "go",
    "define",
    "new",
    "devices",
    "run",
    "inside",
    "project",
    "name",
    "gpt3",
    "app",
    "python",
    "also",
    "define",
    "new",
    "weights",
    "biases",
    "table",
    "two",
    "columns",
    "prompt",
    "completion",
    "want",
    "keep",
    "track",
    "wmb",
    "tables",
    "product",
    "inside",
    "wnb",
    "lets",
    "interactively",
    "query",
    "explore",
    "tabular",
    "data",
    "going",
    "video",
    "cool",
    "predictions",
    "next",
    "cell",
    "actually",
    "perform",
    "inference",
    "prompt",
    "using",
    "gpt3",
    "uh",
    "using",
    "api",
    "let",
    "make",
    "larger",
    "command",
    "python",
    "using",
    "access",
    "gpt3",
    "open",
    "ai",
    "pass",
    "name",
    "engine",
    "remember",
    "couple",
    "variations",
    "gpu",
    "threes",
    "different",
    "like",
    "davinci",
    "models",
    "different",
    "versions",
    "models",
    "one",
    "going",
    "use",
    "powerful",
    "right",
    "text",
    "davinci",
    "version",
    "3",
    "model",
    "uh",
    "pass",
    "prompt",
    "see",
    "prompt",
    "define",
    "prompt",
    "correct",
    "standard",
    "english",
    "know",
    "market",
    "gon",
    "na",
    "like",
    "grammar",
    "correction",
    "stuff",
    "um",
    "passed",
    "another",
    "prompt",
    "define",
    "temperature",
    "temperature",
    "hyper",
    "parameter",
    "uh",
    "responsible",
    "random",
    "predictions",
    "gpt3",
    "gives",
    "us",
    "like",
    "zero",
    "always",
    "going",
    "thing",
    "uh",
    "closer",
    "one",
    "actually",
    "gon",
    "na",
    "throw",
    "different",
    "stuff",
    "occasionally",
    "max",
    "tokens",
    "many",
    "tokens",
    "want",
    "run",
    "predictions",
    "tokens",
    "tax",
    "deputy",
    "3",
    "generate",
    "key",
    "word",
    "may",
    "example",
    "finishes",
    "correcting",
    "sentence",
    "proper",
    "grammar",
    "output",
    "like",
    "stop",
    "sequence",
    "means",
    "gpt3",
    "done",
    "uh",
    "predictions",
    "think",
    "important",
    "model",
    "know",
    "stop",
    "uh",
    "generations",
    "able",
    "generate",
    "general",
    "essentially",
    "trying",
    "say",
    "type",
    "parameter",
    "controls",
    "many",
    "tokens",
    "model",
    "predict",
    "case",
    "uh",
    "mean",
    "always",
    "256",
    "tokens",
    "yeah",
    "makes",
    "sense",
    "sometimes",
    "run",
    "like",
    "stop",
    "sequence",
    "tap",
    "tab",
    "b",
    "frequency",
    "penalty",
    "presence",
    "penalty",
    "also",
    "kind",
    "used",
    "guide",
    "predictions",
    "little",
    "bit",
    "prints",
    "response",
    "added",
    "wmb",
    "table",
    "prompt",
    "first",
    "column",
    "second",
    "column",
    "response",
    "gp3",
    "gave",
    "us",
    "let",
    "let",
    "finally",
    "run",
    "cell",
    "see",
    "gives",
    "us",
    "um",
    "see",
    "know",
    "market",
    "transformed",
    "go",
    "market",
    "correct",
    "ask",
    "logic",
    "everything",
    "wmb",
    "tables",
    "case",
    "go",
    "run",
    "cell",
    "like",
    "different",
    "prompts",
    "little",
    "bit",
    "example",
    "ask",
    "correct",
    "know",
    "like",
    "say",
    "store",
    "instead",
    "market",
    "right",
    "give",
    "us",
    "prediction",
    "um",
    "go",
    "store",
    "um",
    "stuff",
    "gets",
    "added",
    "doubling",
    "b",
    "tables",
    "case",
    "done",
    "predictions",
    "call",
    "lock",
    "um",
    "predictions",
    "table",
    "call",
    "wb",
    "finish",
    "kind",
    "finish",
    "particular",
    "run",
    "kind",
    "show",
    "gives",
    "us",
    "right",
    "gives",
    "us",
    "link",
    "project",
    "page",
    "run",
    "logged",
    "table",
    "go",
    "see",
    "table",
    "um",
    "predictions",
    "went",
    "market",
    "know",
    "market",
    "one",
    "time",
    "like",
    "camera",
    "test",
    "know",
    "went",
    "store",
    "go",
    "store",
    "um",
    "usage",
    "go",
    "try",
    "different",
    "prompts",
    "log",
    "table",
    "done",
    "lock",
    "table",
    "explore",
    "prompt",
    "way",
    "find",
    "information",
    "hyper",
    "parameters",
    "open",
    "ai",
    "docs",
    "leave",
    "link",
    "video",
    "description",
    "want",
    "inspiration",
    "cool",
    "tasks",
    "gbt3",
    "go",
    "um",
    "overview",
    "go",
    "like",
    "opening",
    "api",
    "website",
    "right",
    "go",
    "overview",
    "click",
    "examples",
    "example",
    "sorts",
    "different",
    "tasks",
    "way",
    "taken",
    "grammar",
    "one",
    "uh",
    "right",
    "example",
    "um",
    "like",
    "example",
    "right",
    "docs",
    "way",
    "see",
    "sorts",
    "tasks",
    "sql",
    "translate",
    "classification",
    "example",
    "like",
    "task",
    "examples",
    "summarize",
    "second",
    "creator",
    "go",
    "um",
    "prompt",
    "summarize",
    "second",
    "grade",
    "student",
    "um",
    "information",
    "jupiter",
    "go",
    "look",
    "code",
    "look",
    "prompt",
    "okay",
    "let",
    "say",
    "example",
    "want",
    "work",
    "closely",
    "task",
    "go",
    "start",
    "new",
    "random",
    "awaits",
    "buy",
    "something",
    "new",
    "table",
    "previous",
    "round",
    "around",
    "task",
    "correcting",
    "grammar",
    "start",
    "new",
    "one",
    "go",
    "update",
    "prompt",
    "copy",
    "paste",
    "prompt",
    "also",
    "hyper",
    "parameter",
    "difference",
    "open",
    "ai",
    "people",
    "put",
    "task",
    "also",
    "copy",
    "paste",
    "highway",
    "parameters",
    "task",
    "right",
    "let",
    "try",
    "running",
    "jupiter",
    "fifth",
    "planet",
    "sun",
    "biggest",
    "solar",
    "system",
    "bad",
    "cast",
    "shadows",
    "earth",
    "named",
    "roman",
    "god",
    "jupiter",
    "also",
    "known",
    "people",
    "since",
    "recorded",
    "history",
    "started",
    "um",
    "sunrise",
    "second",
    "graders",
    "done",
    "lot",
    "math",
    "stuff",
    "yeah",
    "noticeably",
    "less",
    "complex",
    "started",
    "would",
    "say",
    "let",
    "say",
    "maybe",
    "want",
    "vary",
    "little",
    "bit",
    "let",
    "try",
    "um",
    "summarize",
    "let",
    "say",
    "first",
    "grade",
    "student",
    "uh",
    "one",
    "sentence",
    "let",
    "say",
    "make",
    "like",
    "even",
    "simpler",
    "share",
    "prompt",
    "gives",
    "us",
    "jupiter",
    "fifth",
    "planet",
    "sun",
    "bright",
    "big",
    "named",
    "roman",
    "god",
    "jupiter",
    "okay",
    "maybe",
    "want",
    "vary",
    "prompt",
    "even",
    "see",
    "races",
    "first",
    "grade",
    "student",
    "one",
    "poem",
    "gpt3",
    "recent",
    "update",
    "gotten",
    "really",
    "good",
    "rhyming",
    "um",
    "okay",
    "jupiter",
    "fifth",
    "jupiter",
    "fifth",
    "sun",
    "biggest",
    "solar",
    "system",
    "brightest",
    "romans",
    "named",
    "got",
    "jupiter",
    "really",
    "rhymes",
    "know",
    "name",
    "bad",
    "bright",
    "cast",
    "shadows",
    "light",
    "third",
    "brightest",
    "night",
    "wow",
    "like",
    "pretty",
    "cool",
    "yeah",
    "quite",
    "fun",
    "lot",
    "variability",
    "promise",
    "also",
    "like",
    "rhymes",
    "like",
    "really",
    "pulling",
    "rhymes",
    "sun",
    "system",
    "like",
    "cool",
    "rhymes",
    "uh",
    "keep",
    "mind",
    "uh",
    "lagging",
    "like",
    "prompting",
    "completion",
    "pairs",
    "wmb",
    "table",
    "stumble",
    "like",
    "cool",
    "prompt",
    "yes",
    "losing",
    "go",
    "lock",
    "weights",
    "biases",
    "click",
    "link",
    "navigate",
    "run",
    "page",
    "locked",
    "table",
    "see",
    "uh",
    "prompts",
    "completions",
    "yeah",
    "latest",
    "one",
    "summarizes",
    "first",
    "grade",
    "students",
    "poem",
    "hear",
    "previous",
    "ones",
    "way",
    "keep",
    "track",
    "good",
    "stuff",
    "last",
    "thing",
    "wanted",
    "show",
    "use",
    "fine",
    "tune",
    "gpt3",
    "model",
    "python",
    "using",
    "api",
    "well",
    "video",
    "pop",
    "somewhere",
    "one",
    "corners",
    "find",
    "tune",
    "gpt3",
    "generate",
    "new",
    "um",
    "doctor",
    "episodes",
    "like",
    "come",
    "new",
    "tv",
    "show",
    "ideas",
    "gon",
    "na",
    "show",
    "use",
    "types",
    "models",
    "api",
    "well",
    "couple",
    "things",
    "need",
    "change",
    "video",
    "like",
    "done",
    "detailed",
    "explanation",
    "steps",
    "go",
    "watch",
    "video",
    "learn",
    "good",
    "stuff",
    "use",
    "fine",
    "tune",
    "model",
    "need",
    "know",
    "name",
    "fine",
    "tune",
    "video",
    "use",
    "opening",
    "w",
    "b",
    "integration",
    "logging",
    "stuff",
    "weights",
    "biases",
    "example",
    "let",
    "say",
    "want",
    "use",
    "model",
    "name",
    "curry",
    "fg",
    "1gb",
    "etc",
    "etc",
    "go",
    "know",
    "copy",
    "name",
    "fine",
    "tune",
    "place",
    "name",
    "fine",
    "tune",
    "name",
    "engine",
    "uh",
    "like",
    "let",
    "let",
    "see",
    "like",
    "like",
    "engine",
    "know",
    "name",
    "model",
    "move",
    "fine",
    "tune",
    "model",
    "function",
    "open",
    "ai",
    "account",
    "able",
    "access",
    "via",
    "api",
    "way",
    "also",
    "need",
    "play",
    "time",
    "parameters",
    "think",
    "necessary",
    "mean",
    "maybe",
    "give",
    "tokens",
    "generate",
    "maybe",
    "temperature",
    "seems",
    "good",
    "also",
    "need",
    "change",
    "prompt",
    "type",
    "prompt",
    "completion",
    "structure",
    "used",
    "fine",
    "tuning",
    "example",
    "doctor",
    "used",
    "imaginary",
    "name",
    "episode",
    "let",
    "example",
    "try",
    "invasion",
    "alien",
    "fish",
    "like",
    "arrow",
    "symbol",
    "know",
    "transition",
    "prompt",
    "ends",
    "completion",
    "begin",
    "like",
    "fine",
    "tuning",
    "stuff",
    "like",
    "watch",
    "video",
    "go",
    "way",
    "depth",
    "particular",
    "topic",
    "done",
    "go",
    "start",
    "new",
    "weights",
    "biases",
    "run",
    "run",
    "cell",
    "perform",
    "inference",
    "prompt",
    "using",
    "model",
    "see",
    "results",
    "completion",
    "prompt",
    "invasion",
    "alien",
    "fish",
    "ancient",
    "race",
    "amphibious",
    "creatures",
    "known",
    "invasions",
    "taken",
    "british",
    "coastline",
    "bit",
    "take",
    "world",
    "leader",
    "grid",
    "kidnapped",
    "doctor",
    "companion",
    "joe",
    "grant",
    "first",
    "doctor",
    "come",
    "aid",
    "doctor",
    "must",
    "go",
    "dangerous",
    "mission",
    "defeat",
    "invaders",
    "returned",
    "news",
    "ingrid",
    "weakness",
    "ending",
    "credits",
    "followed",
    "epilogue",
    "uh",
    "uh",
    "yeah",
    "goes",
    "bit",
    "rail",
    "indians",
    "think",
    "may",
    "benefit",
    "also",
    "add",
    "stop",
    "sequence",
    "see",
    "last",
    "example",
    "kind",
    "went",
    "rails",
    "end",
    "forgot",
    "include",
    "stop",
    "sequence",
    "ducks",
    "found",
    "pass",
    "agreement",
    "stop",
    "put",
    "stop",
    "sequence",
    "think",
    "particular",
    "fine",
    "tune",
    "let",
    "try",
    "generate",
    "link",
    "towards",
    "futuristic",
    "factor",
    "earth",
    "yada",
    "yeah",
    "see",
    "ends",
    "normally",
    "factory",
    "explodes",
    "destroys",
    "life",
    "earth",
    "well",
    "normally",
    "synopsis",
    "sense",
    "normally",
    "sense",
    "spamming",
    "like",
    "step",
    "sequences",
    "actually",
    "stops",
    "generation",
    "stumbles",
    "end",
    "like",
    "useful",
    "one",
    "know",
    "uh",
    "using",
    "uh",
    "using",
    "fine",
    "tune",
    "models",
    "opening",
    "api",
    "python",
    "end",
    "uh",
    "lock",
    "table",
    "uh",
    "call",
    "1gb",
    "finish",
    "see",
    "prompt",
    "completions",
    "tried",
    "time",
    "thank",
    "much",
    "watching",
    "video",
    "covered",
    "stuff",
    "could",
    "think",
    "useful",
    "deploying",
    "gpt3",
    "python",
    "open",
    "air",
    "api",
    "questions",
    "uh",
    "please",
    "feel",
    "free",
    "leave",
    "comment",
    "section",
    "happy",
    "answer",
    "like",
    "video",
    "consider",
    "smashing",
    "like",
    "button",
    "subscribing",
    "channel",
    "see",
    "tutorials",
    "interviews",
    "talks",
    "yeah",
    "thank",
    "much",
    "watching",
    "video",
    "really",
    "hope",
    "enjoyed",
    "found",
    "useful"
  ],
  "keywords": [
    "see",
    "first",
    "grade",
    "student",
    "one",
    "poem",
    "jupiter",
    "fifth",
    "sun",
    "biggest",
    "solar",
    "system",
    "brightest",
    "named",
    "really",
    "rhymes",
    "weights",
    "biases",
    "video",
    "show",
    "way",
    "start",
    "using",
    "opening",
    "cool",
    "3",
    "models",
    "python",
    "fine",
    "tune",
    "gpt3",
    "model",
    "use",
    "also",
    "let",
    "get",
    "started",
    "would",
    "say",
    "want",
    "build",
    "application",
    "uh",
    "maybe",
    "gpt",
    "much",
    "taken",
    "last",
    "couple",
    "essentially",
    "ask",
    "like",
    "make",
    "thing",
    "text",
    "stuff",
    "gon",
    "na",
    "going",
    "next",
    "actually",
    "kind",
    "open",
    "ai",
    "account",
    "getting",
    "api",
    "keys",
    "good",
    "need",
    "website",
    "right",
    "click",
    "part",
    "create",
    "new",
    "openai",
    "log",
    "um",
    "go",
    "put",
    "know",
    "things",
    "example",
    "try",
    "think",
    "saying",
    "key",
    "particular",
    "lot",
    "prices",
    "vary",
    "tokens",
    "free",
    "yeah",
    "information",
    "give",
    "overview",
    "used",
    "us",
    "okay",
    "copy",
    "code",
    "paste",
    "run",
    "install",
    "hyper",
    "parameters",
    "case",
    "important",
    "keep",
    "track",
    "prompts",
    "prompt",
    "completions",
    "cell",
    "two",
    "pass",
    "define",
    "name",
    "table",
    "completion",
    "wmb",
    "tables",
    "predictions",
    "engine",
    "different",
    "correct",
    "market",
    "grammar",
    "temperature",
    "parameter",
    "gives",
    "generate",
    "stop",
    "sequence",
    "done",
    "sense",
    "b",
    "little",
    "bit",
    "second",
    "store",
    "call",
    "lock",
    "finish",
    "link",
    "went",
    "time",
    "tasks",
    "task",
    "summarize",
    "earth",
    "well",
    "doctor",
    "end",
    "normally",
    "useful"
  ]
}