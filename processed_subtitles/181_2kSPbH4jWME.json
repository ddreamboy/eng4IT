{
  "text": "hi my name is vic and today we are going to \nbuild a live speech recognition system that  \nworks with your microphone so you're going to \nbe able to press a button and record some audio  \nand then have that audio be automatically \nconverted into a text transcript and the  \namazing thing is it's all going to run on your \nlocal machine and it's going to use your cpu  \nso you're not going to need a fancy computer \nor a gpu to make this work so we'll start out  \nbuilding a jupiter widget that lets you press a \nbutton to start and stop recording audio and then  \nwe'll build a voice recognition pipeline that \ncan take that audio and convert it into a text  \ntranscript let's get started we'll end up with a \njupiter notebook that has two interactive buttons  \none that says record and one that says stop \nwhen we click the record button like i just did  \nthe system will actually start recording your \nmicrophone and transcribing it live and as you  \ncan see the transcript has appeared and as i keep \ntalking it will continue to add to the transcript  \nand when i'm done talking i can just go ahead and \nhit stop and the live transcription will stop so  \nthis system can be used for almost anything where \nyou want to record your microphone so you can use  \nit for live events you can use it for meeting \nnotes or you can use it to record interviews\nand to create the system we're going to do three \nthings first we're going to create jupiter widgets  \nlike i mentioned interactive buttons and an output \narea then we're going to install a library called  \npi audio that we can use to actually \nrecord our microphone in the background  \nthen we're going to install a library called \nvosk that will be able to do speech recognition  \nfor us and we'll add in the output of speech \nrecognition to our jupiter widget and these  \nthree components together will give us the \nsystem that i just showed you to generate live  \ntranscripts of your microphone audio so \nenough setup let's go ahead and dive in\ni've gone ahead and created a fresh jupiter \nnotebook inside of jupiter lab to actually  \ncode this you can use jupyter notebook or jupyter \nlab or any other id that lets you create notebooks  \nyou can't unfortunately run this on google collab \nor anywhere in the cloud since it does need access  \nto your local microphone the first thing we're \ngoing to do is we're going to do pip install  \nipi widgets so these are the interactive widgets \nthat actually create the buttons for us so i'll  \ngo ahead and run that you can see i've already \ninstalled it so i'll go ahead and delete this cell  \nthen we can go ahead and import it so we'll say \nimport ipi widgets as widgets then what we'll do  \nis we'll create our first button so we'll say \nrecord button equals widgets dot button and  \ndescription will be the text that appears on \nthe button so this text is going to be record  \nwe'll say disabled equals false since we want the \nbutton to be enabled and then we'll say button  \nstyle equals success and this determines the \ncolor of the button oh this will make it green  \nand then we'll add a little icon to \nthe button that looks like a microphone  \nthen what we need to do is import a function that \nwill actually display this widget for us so from  \nipython.display we can import display and then \nwhat we do is we call the display function and  \npass in our widget and this will actually render \nthe widget for us so we now have a record button  \nand we can click it but it doesn't do anything \nyet because we didn't wire up anything to run  \nwhen we click on it we will do that in a little \nbit but first let's set up our other widgets  \nthe next widget we need to set \nup is actually our stop button  \nso we're actually going to set that up in a very \nsimilar way so i'll copy and paste this code  \ni'll rename this to stop button and \nthen i will just change the description  \nso we'll call it a stop button instead of a \nsuccess style we're going to have a warning  \nstyle which is going to give it that orange \ncolor and then the icon will be a stop icon\nthen we can go ahead and pass this in as well to \nrender it and if we run this cell again we now  \nsee both buttons we also need an output widget so \nthis is the widget that's actually going to show  \nthe transcript as it is generated and this widget \nwe will create by calling widgets.output and that  \nwill create an instance of an output widget and \nwe can pass that into the display function as well  \nso you can't really see the output widget \nthere's no text in it right now but it's  \nright below the stop button so we now have all of \nthe widgets we need they just don't do anything  \nand the fun part of this project is actually \nmaking them do something so we need to write two  \nfunctions one that will run when we click record \nand another that will run when we stop recording  \nso we'll call this start recording and we're \ngoing to have a data argument to this function  \nwhen you click on record and you call a function \nipython jupiter automatically passes in this data  \nparameter so that's why we have it in the function \nand i'll just say pass and then we'll have stop  \nrecording data and we'll pass on that too and \nthen we'll wire up these widgets to actually call  \nthose functions when we click on so record button \ndot on click we'll call start recording so when  \nwe click on the record button it will call this \nfunction and then when we click on the stop button\nwe'll call stop recording all right so i'll go \nahead and run this and if you click record it now  \ncalls this function although the function \ndoesn't do anything so nothing happens  \nand when you click on stop it will call \nthis stop recording function now we need to  \nmake these functions actually do something so \nwhat we're going to do is in a normal program  \nin a normal python program where let's say you're \nassigning a value to x and then you're printing x  \neach line of code is executed sequentially \nso you'll run this line of code then  \nthis line of code and then the program is \nfinished after those two lines of code run  \nso that's the typical way we execute programs \nnow for this we actually need to listen to the  \nmicrophone in the background and transcribe in \nthe background so we actually need to perform two  \ntasks at the same time one task to continuously \nrecord the microphone and another task to actually  \ntranscribe the audio into text so to do this we \nactually need to create threads so threads are a  \npython concept they're essentially functions that \nrun in the background so they don't interrupt your  \nmain function but they can just do something like \nrecord audio continuously so in order to use them  \nwe're going to import from threading we're going \nto import thread which will let us create a thread  \nin the background we're also going to need to \npass some messages to the threads so when we want  \nthe thread to stop we're going to need to send a \nmessage to it and then the thread that's recording  \nthe microphone is going to need to pass the data \nit records to the thread that's actually doing  \nthe transcription so we need to import something \nelse called a queue so we'll say from q import q  \nand a q will let us actually pass messages between \nthreads and we'll create two cues to actually  \npass the messages so we'll create one queue called \nmessages which will basically tell the thread  \nwhen to stop when to stop recording and when to \nstop transcribing and we'll create another one  \ncalled recordings and this will actually store the \naudio data that we record from the microphone and  \npass it to the transcription now we can actually \nwrite some code in the start recording function  \nso we'll say messages dot put true so this will \njust tell we're going to write the thread logic in  \na second but this will basically tell the thread \nto keep running and keep recording the microphone  \nand then we'll say with output so using this \ncontext manager enables us to write print data  \ndirectly into that output widget that we created \nso we'll say display starting and that will  \ndisplay starting into the output widget then \nwhat we'll do is we'll say record equals thread  \ntarget equals record microphone we have not \nwritten this function yet we need to write it  \nbut basically what this is doing is it's \ncreating a thread that will record the microphone  \nand then we'll say record dot start that \nwill start the thread and have it run in  \nthe background so we'll continuously listen to the \nmicrophone and record it then we'll create another  \nthread called transcribe and this one is going \nto have its target as a function called speech  \nrecognition we have not written this function \nyet so this code won't work but i we need to just  \nwrite the code before we write the function \njust so you can see how it works so we'll  \nwrite transcribe.start so what this function \nis going to do is it is going to put a message  \non this messages queue and that message is going \nto tell these threads to keep running and if you  \nif that's not super clear yet don't worry about \nit when we actually write the code for these  \nrecord microphone and speech recognition functions \nyou'll see what this messages queue is doing then  \nwe're going to create two threads and run them in \nthe background one to record our microphone audio  \nand another to actually transcribe the audio \ninto text then for stop recording what we're  \ngoing to do is we're going to say with output \nagain and we're going to say messages.get  \nthis will actually take the message off the queue \nso this puts a message on the queue called true  \nand this just takes the message off the queue \nand then what we'll say is display stopped\nall right let me comment these \nlines out and you can see  \nhow this code actually works so i'll hit run and \nthen when we hit record we'll see starting when  \nwe hit stop we'll see stopped and basically when \nwe're clicking record we're running this function  \nand when we're clicking stop we're running this \nfunction all right so that is basically everything  \nwe have to do to get the jupiter widgets to work \nand now our goal is to do the next two pieces  \nwhich is to write this record microphone function \nand to write the speech recognition function  \nso let me go ahead and run this and next we \nwill go on and write our microphone functions\nto do this we're going to need \nto use a library called pi  \naudio and let me show you that library real quick  \nso this library lets you actually interact with \nsystem audio devices like your speaker or your  \nmicrophone so if you wanted to play a sound on \nyour computer speaker or record your microphone  \nwhich is what we want to do then pi audio will \nhelp you do it and the installation is a little  \nbit different depending on which os you're using i \nuse mac so for me i follow these instructions here  \nif you're using windows they're instructions if \nyou're using linux they're instructions as well  \nso just keep in mind that it'll be a little \nbit different based on what os you're using\nso for me on mac what i'm going to do is i'm going \nto hit exclamation mark which means run a command  \nin the terminal and i'm going to type brew install \nport audio i've already installed this so i'm not  \ngoing to run it and then after i do that i will \ntype pip install pi audio which will go ahead  \nand install the pi audio package after i do this \nwe need to actually figure out which of our sound  \ndevices is the microphone that we want so in order \nto to do this we need to first import pi audio  \nthen we need to initialize our pi audio interface\nmiss the capital so this will actually \ninitialize our pi audio connection to our system  \nsound devices then what we want to do is we \nwant to loop through all of the sound devices  \non our system and print out the info for them \nso we'll say 4i in range p.get device count  \nso get device count is just going to show how \nmany audio devices are connected to our system  \nand we're going to print out get \ndevice info by index for each of those  \nand when we're finished we're going to run \np.terminate this just terminates our pi audio  \nconnection to all of our audio devices so let's \ngo ahead and run this and we can see i have all  \nof these audio devices connected to my computer \nthe first is my monitor which has speakers  \nthe second is my cam link which i use to connect \nto my webcam then i have my microphone so this  \nis the microphone that i want to use to record \nand the index is two so just remember the index  \nthat you want and ignore some of the other devices \nthat you don't need just get grab the microphone  \nthat you want to record from and remember \nthe index we'll be using that in a second\nnow we can actually go ahead and write the \nfunction that will record our microphone before  \nwe actually do there's a couple of constants we \nneed to define so these just define how our audio  \nis going to be recorded and all of these are just \nvalues that are optimal for speech recognition so  \naudio can be recorded in multiple channels if you \nlisten to headphones you might notice your left  \nheadphone sounds a little bit different from your \nright headphone because they're different audio  \nchannels but speech recognition works best with \none channel audio so i'm going to set channels  \nto one and then frame rate determines how high \nquality the recording is it's how quickly your  \naudio signal is sampled i'm going to set frame \nrate to 16 000 again that's a good default for  \nspeech recognition then i'm going to set something \ncalled record seconds so this is how many seconds  \nwe want to record audio for before we send \nit off for transcription so every 20 seconds  \nwe will generate a transcript and i will talk a \nlittle bit about how you can get this closer to  \nexactly live there's going to be a little bit \nof a delay now between you saying something and  \nit being transcribed but if you want it to be \ntotally live there's a couple things you can do  \nto fix that and i'll talk about that at the end \nand then we're going to define the audio format  \nso this is the format that we're \ngoing to record our audio in  \nand i'm just going to use this pi audio dot \npan16 which is again what we're going to use  \nwith our speech recognition engine \nand then we will define sample size  \nand then we can go ahead and write our function to \nrecord from our microphone and we're going to pass  \nin a parameter called chunk which just defines \nhow often we're going to read from the microphone\nall right so we're going to \nagain initialize pi audio\nthen what we're going to do is we're going to \ncreate a stream and this is going to connect  \nto our microphone and record so we're \ngoing to say format equals audio format  \nchannels equals channels rate equals frame \nrate this is just specifying all the options  \nfor how we want to record we're going to pass \na parameter called input equals true which just  \nspecifies we're recording from a microphone and \nthen our input device index so you should use the  \nindex of your microphone so my microphone \nwas at index 2 so you should use whatever  \nindex is there for your microphone and then \nwe're going to say frames per buffer equals chunk  \nso that just determines how often we're going to \nread data from our microphone so read our audio  \nthen we're going to create a list called frames \nand this is actually going to store all of our  \naudio that's recorded from our microphone and \nwhat we'll say is while not messages dot empty  \nand what this is doing is you'll recall earlier \nwhen we started and stopped recording we actually  \nput data onto this messages queue and took \ndata off so what this function is going to  \ndo is as long as there is a message in the \nmessages queue we're going to keep recording  \nbut once the message comes off the queue we'll \nstop recording so what this stop recording  \nbutton is doing is it's taking the message \noff the queue which means recording will stop  \ncommunicating between threads is tough which \nis why we kind of have to use the cue to do it  \nso what we'll do is we'll say stream.read chunk \nso we're going to read 1024 audio frames at a time  \nfrom our microphone and then we'll add that to \nour frames list and then what we're going to  \nsay is we're going to say if the length of the \nframes is greater than or equal to frame rate  \nso this is the number of frames you record per \nsecond times record seconds divided by chunk\nthen add\nthen add our audio data to our recordings queue \nand then we're going to say frames equals is empty  \nall right let me just talk through and \nexplain what this is doing so this is  \nsaying if we've recorded more than 20 \nseconds of audio so you'll remember  \nwe want to send our audio out to be transcribed \nevery 20 seconds so if we've recorded more than  \n20 seconds of audio then we're going to \nadd our audio data to this recordings queue  \nand it'll be picked up from that cube by our other \nthread and we're going to put a copy of frames on  \nthat queue and then we are going to empty out \nour frames list so basically every 20 seconds  \nwe are going to pass our audio data that we've \nrecorded to our transcription engine and then  \nstart recording another 20 seconds of audio as \nlong as we haven't told it to stop recording  \nand then once we have told it to stop recording \nwe're going to say stream dot stop stream  \nstream dot close and then p dot terminate \nit's really important to add these three  \nlines because pi audio actually opens \nup a connection to your microphone  \nand if you don't close that connection it can \ncause some weird system issues that are hard to  \ndebug so just make sure you write these lines \nand then we can go ahead and run this and we  \nnow have a function to record our microphone \naudio so when we click record this thread will  \nactually run that function in the background \nit'll run the record microphone function\nnow all we have to do is write the transcribe \nfunction and that function will actually turn  \nthe audio into text let's go ahead and \ndo that and in order to do that we'll be  \nusing a couple of libraries so let me talk \nyou through what we will be doing we're  \ngoing to use a python library called vosk in \norder to actually do our speech recognition  \nand vosk has pre-trained models that support \n20-plus languages and dialects we're going to  \nbe using english language models because \nwe're going to be recording english audio  \nbut feel free to use a different model if if \nyou if you'd like the amazing thing about vosk  \nis it works offline so all the speech recognition \nwill happen on your own computer and you can run  \nit even on devices that don't have a gpu so it \ncan even run on a raspberry pi or an android phone  \nin this case we'll be running it on a \ncomputer but you don't need a really fancy  \nmachine or a gpu to actually run this and it \ninstalls pretty easily with just pip install vosk  \nso looking at ma vosk models you can see \nthere's a several different models for  \nevery language for english there's three models \nwe're going to be using this model in the video  \nit is a it is a really big model so if you \ndon't feel like downloading a 1.8 gigabyte file  \nyou can feel free to use this model and i'll \nshow you how to use it when we get to that code  \nthe unfortunate thing about vosk is it outputs \ntranscripts without any punctuation with no  \ncapitalization no periods or anything so we \nneed to use another model to actually add in  \nthe punctuation so if you scroll down on this \nmodels page and you go to punctuation you can  \nsee that there is this vosk recase punk model so \nif you want to add punctuation you'll also need to  \ndownload this it's not necessary right if you're \nokay with the transcript without punctuation  \nyou don't need to do this but i'm i'm going to \nshow you how to do it and i recommend doing it  \nso that's just you'll have to \nclick right here to download that  \nokay let's head back over to our notebook and \nwe will actually install all of the packages  \nand actually run our speech recognition so \nthe first thing you'll need to do is pip  \ninstall vosk which i've already done then \nyou'll need to run pip install transformers  \nwhich this is needed for that recase punk that \nadds the punctuation back into the transcript  \nand then you'll need to install pi torch using pip \ninstall torch and this is a requirement for that  \nrecase punk model so those are the \nthree things you'll have to install  \nand then we're going to go ahead and import a \nfew packages so import sub process we're going  \nto use this to call our punctuation model it's \nbasically a python package that creates a separate  \nprocess that lets you call commands on the command \nline we're going to import json and then we're  \ngoing to import from vosk we're going to import \nmodel and call the recognizer and then what we  \ncan say is we can say model equals model model \nname equals and i'll just copy and paste this in\nvosk model en us so this is that 1.8 \ngigabyte model but if you want to use  \na smaller one you just use the name of \nthe smaller one instead of this name  \nso there was that small 40 megabyte model \nyou can definitely use the name of that model  \ninstead and for me on mac with the latest version \nof vosk as of now it will automatically download  \nthe model when i pass in model name if \nit doesn't automatically download the  \nmodel for you you may have to actually go \nback to that models page and download it  \nso let's go ahead and do that and then what we'll \nneed to do is create a recognizer so this will use  \nthe model to actually do the speech recognition \nso we'll pass in our model and we'll pass in the  \nframe rate of our audio which was 16 000 hertz \nand then we're going to say rec.set words true  \nso this will give us confidence levels for each \nindividual word so for example if i say a word and  \nthe system is not confident that i actually said \nthe word that it thinks i said it'll give you a  \nprobability that it's the transcription is correct \nnow we can write our speech recognition function  \nand this function is going to take in the output \nwidget that we created earlier if you remember  \nwe created it up here and this widget is is what \nwe're going to use to display that transcript live\nso what we'll say is while not messages dot empty\nframes equals recordings dot get so messages dot \nempty this is just making sure that we have not  \nclicked stop recording once we click stop \nrecording that messages queue will be empty  \nand this will not run and recordings.get so \nyou'll remember in this record microphone function  \nwe are putting our audio data into this \nrecordings queue so this is essentially  \npulling the data out of the queue so it's grabbing \nour microphone audio from the other function  \nso we can use it in our speech recognition engine \nthen we're going to say rec.accept waveform  \nand our frames are going to be several different \nchunks you'll remember we're reading 1024 frames  \nat a time from a microphone so this is just \njoining all of the chunks together into one single  \nbinary string so we're passing that in and then \nwe're going to say result equals rec.result  \nand then we'll say text equals json.loadsresult\ntext for whatever reason vosk actually \nreturns its results in a json format so  \nwe need to use the json library to load the \nresult and get the text key the next thing we  \nneed to do is actually add punctuation into our \ntranscript so i'm going to open up my files here  \nso earlier you saw that i showed you that recase \npunk model on the vosk models page i extracted it  \ninto the recase punk folder and you can see the \nnotebook i'm working from is called microphone 2  \nand the recase punk folder is here so make sure \nit's in the same directory as your notebook  \nand when i click in i should see at least this \ncheckpoint file which is the actual model we're  \ngoing to be using to add in punctuation and this \nrecase punk dot py file which is what we're going  \nto be calling to actually run it run the model \nfor us so make sure you see these two files  \nand this is optional if you don't \nfeel like downloading it just  \nignore the next couple of lines of code so \nwhat we'll say is case equals subprocess  \ndot check output and what we'll say is \npython recase punk recase punk dot py  \nand then we'll pass in our checkpoint which \nis the trained model recase punk checkpoint\nand we're gonna we're gonna run it in the shell \nso we'll say shell equals true we're running it  \nin the user shell we're going to say text \nequals true which means i'm going to pass  \nin some text as input and then my input will \nbe the actual transcript so this text variable  \nso this will go ahead and take our transcript with \nno punctuation and add punctuation so the reason  \ni'm using subprocess dot check output is because \ni don't want to write a lot of code to actually do  \nthe re-casing and this file has already been \ncreated to do it so if you call this file on the  \ncommand line it will do the re-casing but if we \nclick into recase punk on the left and you click  \non recasepunk.py you can see that it's a python \nfile so if you wanted to make this code that we're  \nwriting a little bit more efficient you could \nactually import the same modules as that file and  \nactually preload the model so we're not loading \nand running it every time because right now every  \ntime we do our 20 seconds of speech recognition \nwe're actually reloading the model reinitializing  \neverything and that's that's not super efficient \nso if you if you actually instead of calling this  \nas a command line command if you actually just \nwrote the python to do the recasing it would be a  \nlot faster and you could you could reduce this uh \nrecord settings second setting you could probably  \nget it closer to three two or three which would \nfeel a lot more live in terms of the transcription\nokay so we're going to add in our casing and \nthen what we'll do is we'll say output dot append  \nstd out cased and what this is doing is it's \nit's adding our transcript into our output widget\nall right so that is actually all the code we \nneed so i'm going to go ahead and run these two  \nfunctions and what this is doing is it's just vast \nloading the pre-trained speech recognition models\nand i can go back up here run this again\nand now when i hit record it should say starting \nand as i talk it will start actually transcribing  \nwhat i'm saying live which is really really cool \nso let's let's go ahead and see that starting  \nwhile we're waiting let me go ahead \nand just explain all of this code again  \nwhat we started out doing was we started \nout creating jupiter widgets so widgets  \nare just interactive elements that we can add to \nnotebooks in this case we created a record button  \nthat we can click to actually start our recording \na stop button that we can click to stop recording  \nand an output widget that will show our live \ntranscription we then wrote a function called  \nstart recording that actually initializes two \nbackground threads one to record our microphone  \ncontinuously and the other to actually transcribe \nthe audio from our microphone into text and  \nthese two need to be threads because they both \nneed to run at the same time in the background  \nand then we created this messages queue \nthat we added a value to so when we  \nput a value onto the queue that means that we \nwant our recording and our transcription to run  \nwhen we click stop we actually take the value \nout of the queue which signals to these two  \nthreads to stop running then we hooked up our \nour widgets properly so when you click on them  \nthey start recording and stop recording \nand you can see our transcript is actually  \nshowing up as i'm talking which is really \ncool and it's actually pretty accurate  \nalso very cool then what we did is we used pi \naudio to actually find the microphone that we need  \nto record from in my case it was index two then \nwe wrote a function called record microphone that  \nopened up a stream to our microphone and records \naudio frames from a microphone until we click  \nstop recording it reads at 1024 frames at \na time once we have 20 seconds of audio it  \nuh it passes our recording over to the next \nfunction which does the speech recognition  \nthen we used vosk to actually do the speech \nrecognition so again while our cue is not empty  \nwe are continuously grabbing our recordings from \nthe queue then we're passing them into our speech  \nrecognition engine and we're adding them to \nour output widget using this output.appendstdl\nalright so there's a lot you can do \nwith this if you want to continue  \nextending it and adding to it the first thing you \ncan do is make it more efficient so it's not quite  \nreal time now and a big reason for that is because \nthis command has to reload the model every time  \nso i mentioned how you can make this more \nefficient you could also just leave this out  \nif you want to to not worry about adding in \ncasing and it would run a lot faster in that case\nanother thing you could do is you could aim to do \nsome sort of live translation so you could add in  \na translation model here to translate from \nenglish into another language or vice versa  \nand we installed a library \ncalled transformers earlier  \nand you can actually use that library to do \ntranslation as well so if we jump over here  \nto hugging face hub this is connected \nto the transformers python library  \nyou can see that they have a lot of different \nmodels that do translation and one of those models  \nis t5 base so you could use a model like this to \nactually translate between different languages  \nso if you click translation here you can see a \nlot of different translation models you can try  \nso you could actually build a live translation \nsystem in a previous video i also showed you  \nhow you can do live summarization so one extension \nyou could do is you could actually summarize what  \npeople are saying in in real time which is \nvery cool so if you if you're listening to  \na long lecture and you want to catch up on what \nhappened earlier or you're you're listening to  \na long interview it gives you something \nquick you can scan and get a summary  \nso there's a lot you can do with this \nand i hope this was a good overview that  \nshowed you everything that you need \nto actually get started and run this\n",
  "words": [
    "hi",
    "name",
    "vic",
    "today",
    "going",
    "build",
    "live",
    "speech",
    "recognition",
    "system",
    "works",
    "microphone",
    "going",
    "able",
    "press",
    "button",
    "record",
    "audio",
    "audio",
    "automatically",
    "converted",
    "text",
    "transcript",
    "amazing",
    "thing",
    "going",
    "run",
    "local",
    "machine",
    "going",
    "use",
    "cpu",
    "going",
    "need",
    "fancy",
    "computer",
    "gpu",
    "make",
    "work",
    "start",
    "building",
    "jupiter",
    "widget",
    "lets",
    "press",
    "button",
    "start",
    "stop",
    "recording",
    "audio",
    "build",
    "voice",
    "recognition",
    "pipeline",
    "take",
    "audio",
    "convert",
    "text",
    "transcript",
    "let",
    "get",
    "started",
    "end",
    "jupiter",
    "notebook",
    "two",
    "interactive",
    "buttons",
    "one",
    "says",
    "record",
    "one",
    "says",
    "stop",
    "click",
    "record",
    "button",
    "like",
    "system",
    "actually",
    "start",
    "recording",
    "microphone",
    "transcribing",
    "live",
    "see",
    "transcript",
    "appeared",
    "keep",
    "talking",
    "continue",
    "add",
    "transcript",
    "done",
    "talking",
    "go",
    "ahead",
    "hit",
    "stop",
    "live",
    "transcription",
    "stop",
    "system",
    "used",
    "almost",
    "anything",
    "want",
    "record",
    "microphone",
    "use",
    "live",
    "events",
    "use",
    "meeting",
    "notes",
    "use",
    "record",
    "interviews",
    "create",
    "system",
    "going",
    "three",
    "things",
    "first",
    "going",
    "create",
    "jupiter",
    "widgets",
    "like",
    "mentioned",
    "interactive",
    "buttons",
    "output",
    "area",
    "going",
    "install",
    "library",
    "called",
    "pi",
    "audio",
    "use",
    "actually",
    "record",
    "microphone",
    "background",
    "going",
    "install",
    "library",
    "called",
    "vosk",
    "able",
    "speech",
    "recognition",
    "us",
    "add",
    "output",
    "speech",
    "recognition",
    "jupiter",
    "widget",
    "three",
    "components",
    "together",
    "give",
    "us",
    "system",
    "showed",
    "generate",
    "live",
    "transcripts",
    "microphone",
    "audio",
    "enough",
    "setup",
    "let",
    "go",
    "ahead",
    "dive",
    "gone",
    "ahead",
    "created",
    "fresh",
    "jupiter",
    "notebook",
    "inside",
    "jupiter",
    "lab",
    "actually",
    "code",
    "use",
    "jupyter",
    "notebook",
    "jupyter",
    "lab",
    "id",
    "lets",
    "create",
    "notebooks",
    "ca",
    "unfortunately",
    "run",
    "google",
    "collab",
    "anywhere",
    "cloud",
    "since",
    "need",
    "access",
    "local",
    "microphone",
    "first",
    "thing",
    "going",
    "going",
    "pip",
    "install",
    "ipi",
    "widgets",
    "interactive",
    "widgets",
    "actually",
    "create",
    "buttons",
    "us",
    "go",
    "ahead",
    "run",
    "see",
    "already",
    "installed",
    "go",
    "ahead",
    "delete",
    "cell",
    "go",
    "ahead",
    "import",
    "say",
    "import",
    "ipi",
    "widgets",
    "widgets",
    "create",
    "first",
    "button",
    "say",
    "record",
    "button",
    "equals",
    "widgets",
    "dot",
    "button",
    "description",
    "text",
    "appears",
    "button",
    "text",
    "going",
    "record",
    "say",
    "disabled",
    "equals",
    "false",
    "since",
    "want",
    "button",
    "enabled",
    "say",
    "button",
    "style",
    "equals",
    "success",
    "determines",
    "color",
    "button",
    "oh",
    "make",
    "green",
    "add",
    "little",
    "icon",
    "button",
    "looks",
    "like",
    "microphone",
    "need",
    "import",
    "function",
    "actually",
    "display",
    "widget",
    "us",
    "import",
    "display",
    "call",
    "display",
    "function",
    "pass",
    "widget",
    "actually",
    "render",
    "widget",
    "us",
    "record",
    "button",
    "click",
    "anything",
    "yet",
    "wire",
    "anything",
    "run",
    "click",
    "little",
    "bit",
    "first",
    "let",
    "set",
    "widgets",
    "next",
    "widget",
    "need",
    "set",
    "actually",
    "stop",
    "button",
    "actually",
    "going",
    "set",
    "similar",
    "way",
    "copy",
    "paste",
    "code",
    "rename",
    "stop",
    "button",
    "change",
    "description",
    "call",
    "stop",
    "button",
    "instead",
    "success",
    "style",
    "going",
    "warning",
    "style",
    "going",
    "give",
    "orange",
    "color",
    "icon",
    "stop",
    "icon",
    "go",
    "ahead",
    "pass",
    "well",
    "render",
    "run",
    "cell",
    "see",
    "buttons",
    "also",
    "need",
    "output",
    "widget",
    "widget",
    "actually",
    "going",
    "show",
    "transcript",
    "generated",
    "widget",
    "create",
    "calling",
    "create",
    "instance",
    "output",
    "widget",
    "pass",
    "display",
    "function",
    "well",
    "ca",
    "really",
    "see",
    "output",
    "widget",
    "text",
    "right",
    "right",
    "stop",
    "button",
    "widgets",
    "need",
    "anything",
    "fun",
    "part",
    "project",
    "actually",
    "making",
    "something",
    "need",
    "write",
    "two",
    "functions",
    "one",
    "run",
    "click",
    "record",
    "another",
    "run",
    "stop",
    "recording",
    "call",
    "start",
    "recording",
    "going",
    "data",
    "argument",
    "function",
    "click",
    "record",
    "call",
    "function",
    "ipython",
    "jupiter",
    "automatically",
    "passes",
    "data",
    "parameter",
    "function",
    "say",
    "pass",
    "stop",
    "recording",
    "data",
    "pass",
    "wire",
    "widgets",
    "actually",
    "call",
    "functions",
    "click",
    "record",
    "button",
    "dot",
    "click",
    "call",
    "start",
    "recording",
    "click",
    "record",
    "button",
    "call",
    "function",
    "click",
    "stop",
    "button",
    "call",
    "stop",
    "recording",
    "right",
    "go",
    "ahead",
    "run",
    "click",
    "record",
    "calls",
    "function",
    "although",
    "function",
    "anything",
    "nothing",
    "happens",
    "click",
    "stop",
    "call",
    "stop",
    "recording",
    "function",
    "need",
    "make",
    "functions",
    "actually",
    "something",
    "going",
    "normal",
    "program",
    "normal",
    "python",
    "program",
    "let",
    "say",
    "assigning",
    "value",
    "x",
    "printing",
    "x",
    "line",
    "code",
    "executed",
    "sequentially",
    "run",
    "line",
    "code",
    "line",
    "code",
    "program",
    "finished",
    "two",
    "lines",
    "code",
    "run",
    "typical",
    "way",
    "execute",
    "programs",
    "actually",
    "need",
    "listen",
    "microphone",
    "background",
    "transcribe",
    "background",
    "actually",
    "need",
    "perform",
    "two",
    "tasks",
    "time",
    "one",
    "task",
    "continuously",
    "record",
    "microphone",
    "another",
    "task",
    "actually",
    "transcribe",
    "audio",
    "text",
    "actually",
    "need",
    "create",
    "threads",
    "threads",
    "python",
    "concept",
    "essentially",
    "functions",
    "run",
    "background",
    "interrupt",
    "main",
    "function",
    "something",
    "like",
    "record",
    "audio",
    "continuously",
    "order",
    "use",
    "going",
    "import",
    "threading",
    "going",
    "import",
    "thread",
    "let",
    "us",
    "create",
    "thread",
    "background",
    "also",
    "going",
    "need",
    "pass",
    "messages",
    "threads",
    "want",
    "thread",
    "stop",
    "going",
    "need",
    "send",
    "message",
    "thread",
    "recording",
    "microphone",
    "going",
    "need",
    "pass",
    "data",
    "records",
    "thread",
    "actually",
    "transcription",
    "need",
    "import",
    "something",
    "else",
    "called",
    "queue",
    "say",
    "q",
    "import",
    "q",
    "q",
    "let",
    "us",
    "actually",
    "pass",
    "messages",
    "threads",
    "create",
    "two",
    "cues",
    "actually",
    "pass",
    "messages",
    "create",
    "one",
    "queue",
    "called",
    "messages",
    "basically",
    "tell",
    "thread",
    "stop",
    "stop",
    "recording",
    "stop",
    "transcribing",
    "create",
    "another",
    "one",
    "called",
    "recordings",
    "actually",
    "store",
    "audio",
    "data",
    "record",
    "microphone",
    "pass",
    "transcription",
    "actually",
    "write",
    "code",
    "start",
    "recording",
    "function",
    "say",
    "messages",
    "dot",
    "put",
    "true",
    "tell",
    "going",
    "write",
    "thread",
    "logic",
    "second",
    "basically",
    "tell",
    "thread",
    "keep",
    "running",
    "keep",
    "recording",
    "microphone",
    "say",
    "output",
    "using",
    "context",
    "manager",
    "enables",
    "us",
    "write",
    "print",
    "data",
    "directly",
    "output",
    "widget",
    "created",
    "say",
    "display",
    "starting",
    "display",
    "starting",
    "output",
    "widget",
    "say",
    "record",
    "equals",
    "thread",
    "target",
    "equals",
    "record",
    "microphone",
    "written",
    "function",
    "yet",
    "need",
    "write",
    "basically",
    "creating",
    "thread",
    "record",
    "microphone",
    "say",
    "record",
    "dot",
    "start",
    "start",
    "thread",
    "run",
    "background",
    "continuously",
    "listen",
    "microphone",
    "record",
    "create",
    "another",
    "thread",
    "called",
    "transcribe",
    "one",
    "going",
    "target",
    "function",
    "called",
    "speech",
    "recognition",
    "written",
    "function",
    "yet",
    "code",
    "wo",
    "work",
    "need",
    "write",
    "code",
    "write",
    "function",
    "see",
    "works",
    "write",
    "function",
    "going",
    "going",
    "put",
    "message",
    "messages",
    "queue",
    "message",
    "going",
    "tell",
    "threads",
    "keep",
    "running",
    "super",
    "clear",
    "yet",
    "worry",
    "actually",
    "write",
    "code",
    "record",
    "microphone",
    "speech",
    "recognition",
    "functions",
    "see",
    "messages",
    "queue",
    "going",
    "create",
    "two",
    "threads",
    "run",
    "background",
    "one",
    "record",
    "microphone",
    "audio",
    "another",
    "actually",
    "transcribe",
    "audio",
    "text",
    "stop",
    "recording",
    "going",
    "going",
    "say",
    "output",
    "going",
    "say",
    "actually",
    "take",
    "message",
    "queue",
    "puts",
    "message",
    "queue",
    "called",
    "true",
    "takes",
    "message",
    "queue",
    "say",
    "display",
    "stopped",
    "right",
    "let",
    "comment",
    "lines",
    "see",
    "code",
    "actually",
    "works",
    "hit",
    "run",
    "hit",
    "record",
    "see",
    "starting",
    "hit",
    "stop",
    "see",
    "stopped",
    "basically",
    "clicking",
    "record",
    "running",
    "function",
    "clicking",
    "stop",
    "running",
    "function",
    "right",
    "basically",
    "everything",
    "get",
    "jupiter",
    "widgets",
    "work",
    "goal",
    "next",
    "two",
    "pieces",
    "write",
    "record",
    "microphone",
    "function",
    "write",
    "speech",
    "recognition",
    "function",
    "let",
    "go",
    "ahead",
    "run",
    "next",
    "go",
    "write",
    "microphone",
    "functions",
    "going",
    "need",
    "use",
    "library",
    "called",
    "pi",
    "audio",
    "let",
    "show",
    "library",
    "real",
    "quick",
    "library",
    "lets",
    "actually",
    "interact",
    "system",
    "audio",
    "devices",
    "like",
    "speaker",
    "microphone",
    "wanted",
    "play",
    "sound",
    "computer",
    "speaker",
    "record",
    "microphone",
    "want",
    "pi",
    "audio",
    "help",
    "installation",
    "little",
    "bit",
    "different",
    "depending",
    "os",
    "using",
    "use",
    "mac",
    "follow",
    "instructions",
    "using",
    "windows",
    "instructions",
    "using",
    "linux",
    "instructions",
    "well",
    "keep",
    "mind",
    "little",
    "bit",
    "different",
    "based",
    "os",
    "using",
    "mac",
    "going",
    "going",
    "hit",
    "exclamation",
    "mark",
    "means",
    "run",
    "command",
    "terminal",
    "going",
    "type",
    "brew",
    "install",
    "port",
    "audio",
    "already",
    "installed",
    "going",
    "run",
    "type",
    "pip",
    "install",
    "pi",
    "audio",
    "go",
    "ahead",
    "install",
    "pi",
    "audio",
    "package",
    "need",
    "actually",
    "figure",
    "sound",
    "devices",
    "microphone",
    "want",
    "order",
    "need",
    "first",
    "import",
    "pi",
    "audio",
    "need",
    "initialize",
    "pi",
    "audio",
    "interface",
    "miss",
    "capital",
    "actually",
    "initialize",
    "pi",
    "audio",
    "connection",
    "system",
    "sound",
    "devices",
    "want",
    "want",
    "loop",
    "sound",
    "devices",
    "system",
    "print",
    "info",
    "say",
    "4i",
    "range",
    "device",
    "count",
    "get",
    "device",
    "count",
    "going",
    "show",
    "many",
    "audio",
    "devices",
    "connected",
    "system",
    "going",
    "print",
    "get",
    "device",
    "info",
    "index",
    "finished",
    "going",
    "run",
    "terminates",
    "pi",
    "audio",
    "connection",
    "audio",
    "devices",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "audio",
    "devices",
    "connected",
    "computer",
    "first",
    "monitor",
    "speakers",
    "second",
    "cam",
    "link",
    "use",
    "connect",
    "webcam",
    "microphone",
    "microphone",
    "want",
    "use",
    "record",
    "index",
    "two",
    "remember",
    "index",
    "want",
    "ignore",
    "devices",
    "need",
    "get",
    "grab",
    "microphone",
    "want",
    "record",
    "remember",
    "index",
    "using",
    "second",
    "actually",
    "go",
    "ahead",
    "write",
    "function",
    "record",
    "microphone",
    "actually",
    "couple",
    "constants",
    "need",
    "define",
    "define",
    "audio",
    "going",
    "recorded",
    "values",
    "optimal",
    "speech",
    "recognition",
    "audio",
    "recorded",
    "multiple",
    "channels",
    "listen",
    "headphones",
    "might",
    "notice",
    "left",
    "headphone",
    "sounds",
    "little",
    "bit",
    "different",
    "right",
    "headphone",
    "different",
    "audio",
    "channels",
    "speech",
    "recognition",
    "works",
    "best",
    "one",
    "channel",
    "audio",
    "going",
    "set",
    "channels",
    "one",
    "frame",
    "rate",
    "determines",
    "high",
    "quality",
    "recording",
    "quickly",
    "audio",
    "signal",
    "sampled",
    "going",
    "set",
    "frame",
    "rate",
    "16",
    "000",
    "good",
    "default",
    "speech",
    "recognition",
    "going",
    "set",
    "something",
    "called",
    "record",
    "seconds",
    "many",
    "seconds",
    "want",
    "record",
    "audio",
    "send",
    "transcription",
    "every",
    "20",
    "seconds",
    "generate",
    "transcript",
    "talk",
    "little",
    "bit",
    "get",
    "closer",
    "exactly",
    "live",
    "going",
    "little",
    "bit",
    "delay",
    "saying",
    "something",
    "transcribed",
    "want",
    "totally",
    "live",
    "couple",
    "things",
    "fix",
    "talk",
    "end",
    "going",
    "define",
    "audio",
    "format",
    "format",
    "going",
    "record",
    "audio",
    "going",
    "use",
    "pi",
    "audio",
    "dot",
    "pan16",
    "going",
    "use",
    "speech",
    "recognition",
    "engine",
    "define",
    "sample",
    "size",
    "go",
    "ahead",
    "write",
    "function",
    "record",
    "microphone",
    "going",
    "pass",
    "parameter",
    "called",
    "chunk",
    "defines",
    "often",
    "going",
    "read",
    "microphone",
    "right",
    "going",
    "initialize",
    "pi",
    "audio",
    "going",
    "going",
    "create",
    "stream",
    "going",
    "connect",
    "microphone",
    "record",
    "going",
    "say",
    "format",
    "equals",
    "audio",
    "format",
    "channels",
    "equals",
    "channels",
    "rate",
    "equals",
    "frame",
    "rate",
    "specifying",
    "options",
    "want",
    "record",
    "going",
    "pass",
    "parameter",
    "called",
    "input",
    "equals",
    "true",
    "specifies",
    "recording",
    "microphone",
    "input",
    "device",
    "index",
    "use",
    "index",
    "microphone",
    "microphone",
    "index",
    "2",
    "use",
    "whatever",
    "index",
    "microphone",
    "going",
    "say",
    "frames",
    "per",
    "buffer",
    "equals",
    "chunk",
    "determines",
    "often",
    "going",
    "read",
    "data",
    "microphone",
    "read",
    "audio",
    "going",
    "create",
    "list",
    "called",
    "frames",
    "actually",
    "going",
    "store",
    "audio",
    "recorded",
    "microphone",
    "say",
    "messages",
    "dot",
    "empty",
    "recall",
    "earlier",
    "started",
    "stopped",
    "recording",
    "actually",
    "put",
    "data",
    "onto",
    "messages",
    "queue",
    "took",
    "data",
    "function",
    "going",
    "long",
    "message",
    "messages",
    "queue",
    "going",
    "keep",
    "recording",
    "message",
    "comes",
    "queue",
    "stop",
    "recording",
    "stop",
    "recording",
    "button",
    "taking",
    "message",
    "queue",
    "means",
    "recording",
    "stop",
    "communicating",
    "threads",
    "tough",
    "kind",
    "use",
    "cue",
    "say",
    "chunk",
    "going",
    "read",
    "1024",
    "audio",
    "frames",
    "time",
    "microphone",
    "add",
    "frames",
    "list",
    "going",
    "say",
    "going",
    "say",
    "length",
    "frames",
    "greater",
    "equal",
    "frame",
    "rate",
    "number",
    "frames",
    "record",
    "per",
    "second",
    "times",
    "record",
    "seconds",
    "divided",
    "chunk",
    "add",
    "add",
    "audio",
    "data",
    "recordings",
    "queue",
    "going",
    "say",
    "frames",
    "equals",
    "empty",
    "right",
    "let",
    "talk",
    "explain",
    "saying",
    "recorded",
    "20",
    "seconds",
    "audio",
    "remember",
    "want",
    "send",
    "audio",
    "transcribed",
    "every",
    "20",
    "seconds",
    "recorded",
    "20",
    "seconds",
    "audio",
    "going",
    "add",
    "audio",
    "data",
    "recordings",
    "queue",
    "picked",
    "cube",
    "thread",
    "going",
    "put",
    "copy",
    "frames",
    "queue",
    "going",
    "empty",
    "frames",
    "list",
    "basically",
    "every",
    "20",
    "seconds",
    "going",
    "pass",
    "audio",
    "data",
    "recorded",
    "transcription",
    "engine",
    "start",
    "recording",
    "another",
    "20",
    "seconds",
    "audio",
    "long",
    "told",
    "stop",
    "recording",
    "told",
    "stop",
    "recording",
    "going",
    "say",
    "stream",
    "dot",
    "stop",
    "stream",
    "stream",
    "dot",
    "close",
    "p",
    "dot",
    "terminate",
    "really",
    "important",
    "add",
    "three",
    "lines",
    "pi",
    "audio",
    "actually",
    "opens",
    "connection",
    "microphone",
    "close",
    "connection",
    "cause",
    "weird",
    "system",
    "issues",
    "hard",
    "debug",
    "make",
    "sure",
    "write",
    "lines",
    "go",
    "ahead",
    "run",
    "function",
    "record",
    "microphone",
    "audio",
    "click",
    "record",
    "thread",
    "actually",
    "run",
    "function",
    "background",
    "run",
    "record",
    "microphone",
    "function",
    "write",
    "transcribe",
    "function",
    "function",
    "actually",
    "turn",
    "audio",
    "text",
    "let",
    "go",
    "ahead",
    "order",
    "using",
    "couple",
    "libraries",
    "let",
    "talk",
    "going",
    "use",
    "python",
    "library",
    "called",
    "vosk",
    "order",
    "actually",
    "speech",
    "recognition",
    "vosk",
    "models",
    "support",
    "languages",
    "dialects",
    "going",
    "using",
    "english",
    "language",
    "models",
    "going",
    "recording",
    "english",
    "audio",
    "feel",
    "free",
    "use",
    "different",
    "model",
    "like",
    "amazing",
    "thing",
    "vosk",
    "works",
    "offline",
    "speech",
    "recognition",
    "happen",
    "computer",
    "run",
    "even",
    "devices",
    "gpu",
    "even",
    "run",
    "raspberry",
    "pi",
    "android",
    "phone",
    "case",
    "running",
    "computer",
    "need",
    "really",
    "fancy",
    "machine",
    "gpu",
    "actually",
    "run",
    "installs",
    "pretty",
    "easily",
    "pip",
    "install",
    "vosk",
    "looking",
    "vosk",
    "models",
    "see",
    "several",
    "different",
    "models",
    "every",
    "language",
    "english",
    "three",
    "models",
    "going",
    "using",
    "model",
    "video",
    "really",
    "big",
    "model",
    "feel",
    "like",
    "downloading",
    "gigabyte",
    "file",
    "feel",
    "free",
    "use",
    "model",
    "show",
    "use",
    "get",
    "code",
    "unfortunate",
    "thing",
    "vosk",
    "outputs",
    "transcripts",
    "without",
    "punctuation",
    "capitalization",
    "periods",
    "anything",
    "need",
    "use",
    "another",
    "model",
    "actually",
    "add",
    "punctuation",
    "scroll",
    "models",
    "page",
    "go",
    "punctuation",
    "see",
    "vosk",
    "recase",
    "punk",
    "model",
    "want",
    "add",
    "punctuation",
    "also",
    "need",
    "download",
    "necessary",
    "right",
    "okay",
    "transcript",
    "without",
    "punctuation",
    "need",
    "going",
    "show",
    "recommend",
    "click",
    "right",
    "download",
    "okay",
    "let",
    "head",
    "back",
    "notebook",
    "actually",
    "install",
    "packages",
    "actually",
    "run",
    "speech",
    "recognition",
    "first",
    "thing",
    "need",
    "pip",
    "install",
    "vosk",
    "already",
    "done",
    "need",
    "run",
    "pip",
    "install",
    "transformers",
    "needed",
    "recase",
    "punk",
    "adds",
    "punctuation",
    "back",
    "transcript",
    "need",
    "install",
    "pi",
    "torch",
    "using",
    "pip",
    "install",
    "torch",
    "requirement",
    "recase",
    "punk",
    "model",
    "three",
    "things",
    "install",
    "going",
    "go",
    "ahead",
    "import",
    "packages",
    "import",
    "sub",
    "process",
    "going",
    "use",
    "call",
    "punctuation",
    "model",
    "basically",
    "python",
    "package",
    "creates",
    "separate",
    "process",
    "lets",
    "call",
    "commands",
    "command",
    "line",
    "going",
    "import",
    "json",
    "going",
    "import",
    "vosk",
    "going",
    "import",
    "model",
    "call",
    "recognizer",
    "say",
    "say",
    "model",
    "equals",
    "model",
    "model",
    "name",
    "equals",
    "copy",
    "paste",
    "vosk",
    "model",
    "en",
    "us",
    "gigabyte",
    "model",
    "want",
    "use",
    "smaller",
    "one",
    "use",
    "name",
    "smaller",
    "one",
    "instead",
    "name",
    "small",
    "40",
    "megabyte",
    "model",
    "definitely",
    "use",
    "name",
    "model",
    "instead",
    "mac",
    "latest",
    "version",
    "vosk",
    "automatically",
    "download",
    "model",
    "pass",
    "model",
    "name",
    "automatically",
    "download",
    "model",
    "may",
    "actually",
    "go",
    "back",
    "models",
    "page",
    "download",
    "let",
    "go",
    "ahead",
    "need",
    "create",
    "recognizer",
    "use",
    "model",
    "actually",
    "speech",
    "recognition",
    "pass",
    "model",
    "pass",
    "frame",
    "rate",
    "audio",
    "16",
    "000",
    "hertz",
    "going",
    "say",
    "words",
    "true",
    "give",
    "us",
    "confidence",
    "levels",
    "individual",
    "word",
    "example",
    "say",
    "word",
    "system",
    "confident",
    "actually",
    "said",
    "word",
    "thinks",
    "said",
    "give",
    "probability",
    "transcription",
    "correct",
    "write",
    "speech",
    "recognition",
    "function",
    "function",
    "going",
    "take",
    "output",
    "widget",
    "created",
    "earlier",
    "remember",
    "created",
    "widget",
    "going",
    "use",
    "display",
    "transcript",
    "live",
    "say",
    "messages",
    "dot",
    "empty",
    "frames",
    "equals",
    "recordings",
    "dot",
    "get",
    "messages",
    "dot",
    "empty",
    "making",
    "sure",
    "clicked",
    "stop",
    "recording",
    "click",
    "stop",
    "recording",
    "messages",
    "queue",
    "empty",
    "run",
    "remember",
    "record",
    "microphone",
    "function",
    "putting",
    "audio",
    "data",
    "recordings",
    "queue",
    "essentially",
    "pulling",
    "data",
    "queue",
    "grabbing",
    "microphone",
    "audio",
    "function",
    "use",
    "speech",
    "recognition",
    "engine",
    "going",
    "say",
    "waveform",
    "frames",
    "going",
    "several",
    "different",
    "chunks",
    "remember",
    "reading",
    "1024",
    "frames",
    "time",
    "microphone",
    "joining",
    "chunks",
    "together",
    "one",
    "single",
    "binary",
    "string",
    "passing",
    "going",
    "say",
    "result",
    "equals",
    "say",
    "text",
    "equals",
    "text",
    "whatever",
    "reason",
    "vosk",
    "actually",
    "returns",
    "results",
    "json",
    "format",
    "need",
    "use",
    "json",
    "library",
    "load",
    "result",
    "get",
    "text",
    "key",
    "next",
    "thing",
    "need",
    "actually",
    "add",
    "punctuation",
    "transcript",
    "going",
    "open",
    "files",
    "earlier",
    "saw",
    "showed",
    "recase",
    "punk",
    "model",
    "vosk",
    "models",
    "page",
    "extracted",
    "recase",
    "punk",
    "folder",
    "see",
    "notebook",
    "working",
    "called",
    "microphone",
    "2",
    "recase",
    "punk",
    "folder",
    "make",
    "sure",
    "directory",
    "notebook",
    "click",
    "see",
    "least",
    "checkpoint",
    "file",
    "actual",
    "model",
    "going",
    "using",
    "add",
    "punctuation",
    "recase",
    "punk",
    "dot",
    "py",
    "file",
    "going",
    "calling",
    "actually",
    "run",
    "run",
    "model",
    "us",
    "make",
    "sure",
    "see",
    "two",
    "files",
    "optional",
    "feel",
    "like",
    "downloading",
    "ignore",
    "next",
    "couple",
    "lines",
    "code",
    "say",
    "case",
    "equals",
    "subprocess",
    "dot",
    "check",
    "output",
    "say",
    "python",
    "recase",
    "punk",
    "recase",
    "punk",
    "dot",
    "py",
    "pass",
    "checkpoint",
    "trained",
    "model",
    "recase",
    "punk",
    "checkpoint",
    "gon",
    "na",
    "gon",
    "na",
    "run",
    "shell",
    "say",
    "shell",
    "equals",
    "true",
    "running",
    "user",
    "shell",
    "going",
    "say",
    "text",
    "equals",
    "true",
    "means",
    "going",
    "pass",
    "text",
    "input",
    "input",
    "actual",
    "transcript",
    "text",
    "variable",
    "go",
    "ahead",
    "take",
    "transcript",
    "punctuation",
    "add",
    "punctuation",
    "reason",
    "using",
    "subprocess",
    "dot",
    "check",
    "output",
    "want",
    "write",
    "lot",
    "code",
    "actually",
    "file",
    "already",
    "created",
    "call",
    "file",
    "command",
    "line",
    "click",
    "recase",
    "punk",
    "left",
    "click",
    "see",
    "python",
    "file",
    "wanted",
    "make",
    "code",
    "writing",
    "little",
    "bit",
    "efficient",
    "could",
    "actually",
    "import",
    "modules",
    "file",
    "actually",
    "preload",
    "model",
    "loading",
    "running",
    "every",
    "time",
    "right",
    "every",
    "time",
    "20",
    "seconds",
    "speech",
    "recognition",
    "actually",
    "reloading",
    "model",
    "reinitializing",
    "everything",
    "super",
    "efficient",
    "actually",
    "instead",
    "calling",
    "command",
    "line",
    "command",
    "actually",
    "wrote",
    "python",
    "recasing",
    "would",
    "lot",
    "faster",
    "could",
    "could",
    "reduce",
    "uh",
    "record",
    "settings",
    "second",
    "setting",
    "could",
    "probably",
    "get",
    "closer",
    "three",
    "two",
    "three",
    "would",
    "feel",
    "lot",
    "live",
    "terms",
    "transcription",
    "okay",
    "going",
    "add",
    "casing",
    "say",
    "output",
    "dot",
    "append",
    "std",
    "cased",
    "adding",
    "transcript",
    "output",
    "widget",
    "right",
    "actually",
    "code",
    "need",
    "going",
    "go",
    "ahead",
    "run",
    "two",
    "functions",
    "vast",
    "loading",
    "speech",
    "recognition",
    "models",
    "go",
    "back",
    "run",
    "hit",
    "record",
    "say",
    "starting",
    "talk",
    "start",
    "actually",
    "transcribing",
    "saying",
    "live",
    "really",
    "really",
    "cool",
    "let",
    "let",
    "go",
    "ahead",
    "see",
    "starting",
    "waiting",
    "let",
    "go",
    "ahead",
    "explain",
    "code",
    "started",
    "started",
    "creating",
    "jupiter",
    "widgets",
    "widgets",
    "interactive",
    "elements",
    "add",
    "notebooks",
    "case",
    "created",
    "record",
    "button",
    "click",
    "actually",
    "start",
    "recording",
    "stop",
    "button",
    "click",
    "stop",
    "recording",
    "output",
    "widget",
    "show",
    "live",
    "transcription",
    "wrote",
    "function",
    "called",
    "start",
    "recording",
    "actually",
    "initializes",
    "two",
    "background",
    "threads",
    "one",
    "record",
    "microphone",
    "continuously",
    "actually",
    "transcribe",
    "audio",
    "microphone",
    "text",
    "two",
    "need",
    "threads",
    "need",
    "run",
    "time",
    "background",
    "created",
    "messages",
    "queue",
    "added",
    "value",
    "put",
    "value",
    "onto",
    "queue",
    "means",
    "want",
    "recording",
    "transcription",
    "run",
    "click",
    "stop",
    "actually",
    "take",
    "value",
    "queue",
    "signals",
    "two",
    "threads",
    "stop",
    "running",
    "hooked",
    "widgets",
    "properly",
    "click",
    "start",
    "recording",
    "stop",
    "recording",
    "see",
    "transcript",
    "actually",
    "showing",
    "talking",
    "really",
    "cool",
    "actually",
    "pretty",
    "accurate",
    "also",
    "cool",
    "used",
    "pi",
    "audio",
    "actually",
    "find",
    "microphone",
    "need",
    "record",
    "case",
    "index",
    "two",
    "wrote",
    "function",
    "called",
    "record",
    "microphone",
    "opened",
    "stream",
    "microphone",
    "records",
    "audio",
    "frames",
    "microphone",
    "click",
    "stop",
    "recording",
    "reads",
    "1024",
    "frames",
    "time",
    "20",
    "seconds",
    "audio",
    "uh",
    "passes",
    "recording",
    "next",
    "function",
    "speech",
    "recognition",
    "used",
    "vosk",
    "actually",
    "speech",
    "recognition",
    "cue",
    "empty",
    "continuously",
    "grabbing",
    "recordings",
    "queue",
    "passing",
    "speech",
    "recognition",
    "engine",
    "adding",
    "output",
    "widget",
    "using",
    "alright",
    "lot",
    "want",
    "continue",
    "extending",
    "adding",
    "first",
    "thing",
    "make",
    "efficient",
    "quite",
    "real",
    "time",
    "big",
    "reason",
    "command",
    "reload",
    "model",
    "every",
    "time",
    "mentioned",
    "make",
    "efficient",
    "could",
    "also",
    "leave",
    "want",
    "worry",
    "adding",
    "casing",
    "would",
    "run",
    "lot",
    "faster",
    "case",
    "another",
    "thing",
    "could",
    "could",
    "aim",
    "sort",
    "live",
    "translation",
    "could",
    "add",
    "translation",
    "model",
    "translate",
    "english",
    "another",
    "language",
    "vice",
    "versa",
    "installed",
    "library",
    "called",
    "transformers",
    "earlier",
    "actually",
    "use",
    "library",
    "translation",
    "well",
    "jump",
    "hugging",
    "face",
    "hub",
    "connected",
    "transformers",
    "python",
    "library",
    "see",
    "lot",
    "different",
    "models",
    "translation",
    "one",
    "models",
    "t5",
    "base",
    "could",
    "use",
    "model",
    "like",
    "actually",
    "translate",
    "different",
    "languages",
    "click",
    "translation",
    "see",
    "lot",
    "different",
    "translation",
    "models",
    "try",
    "could",
    "actually",
    "build",
    "live",
    "translation",
    "system",
    "previous",
    "video",
    "also",
    "showed",
    "live",
    "summarization",
    "one",
    "extension",
    "could",
    "could",
    "actually",
    "summarize",
    "people",
    "saying",
    "real",
    "time",
    "cool",
    "listening",
    "long",
    "lecture",
    "want",
    "catch",
    "happened",
    "earlier",
    "listening",
    "long",
    "interview",
    "gives",
    "something",
    "quick",
    "scan",
    "get",
    "summary",
    "lot",
    "hope",
    "good",
    "overview",
    "showed",
    "everything",
    "need",
    "actually",
    "get",
    "started",
    "run"
  ],
  "keywords": [
    "name",
    "going",
    "live",
    "speech",
    "recognition",
    "system",
    "works",
    "microphone",
    "button",
    "record",
    "audio",
    "text",
    "transcript",
    "thing",
    "run",
    "use",
    "need",
    "computer",
    "make",
    "start",
    "jupiter",
    "widget",
    "stop",
    "recording",
    "take",
    "let",
    "get",
    "started",
    "notebook",
    "two",
    "one",
    "click",
    "like",
    "actually",
    "see",
    "keep",
    "add",
    "go",
    "ahead",
    "hit",
    "transcription",
    "anything",
    "want",
    "create",
    "three",
    "first",
    "widgets",
    "output",
    "install",
    "library",
    "called",
    "pi",
    "background",
    "vosk",
    "us",
    "created",
    "code",
    "pip",
    "import",
    "say",
    "equals",
    "dot",
    "little",
    "function",
    "display",
    "call",
    "pass",
    "bit",
    "set",
    "next",
    "also",
    "show",
    "really",
    "right",
    "something",
    "write",
    "functions",
    "another",
    "data",
    "python",
    "line",
    "lines",
    "transcribe",
    "time",
    "continuously",
    "threads",
    "thread",
    "messages",
    "message",
    "queue",
    "basically",
    "recordings",
    "put",
    "true",
    "second",
    "running",
    "using",
    "starting",
    "devices",
    "different",
    "command",
    "index",
    "remember",
    "recorded",
    "channels",
    "frame",
    "rate",
    "seconds",
    "every",
    "20",
    "talk",
    "format",
    "stream",
    "frames",
    "empty",
    "earlier",
    "models",
    "feel",
    "model",
    "case",
    "file",
    "punctuation",
    "recase",
    "punk",
    "download",
    "lot",
    "could",
    "translation"
  ]
}