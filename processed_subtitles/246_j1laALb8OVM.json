{
  "text": "In this course, you will learn all about JavaScript functions. As one of the foundational pillars\nof programming, understanding functions is crucial for every aspiring developer. This\ncourse will provide you a comprehensive overview of functions and JavaScript, breaking down\ncomplex concepts into digestible modules, from the essentials of what functions are\nand why they're indispensable to diving deep into terminologies, scopes, closures, and\nadvanced patterns like higher order functions and recursion. This video will help you become\nan expert at functions. Tapas has over 18 years of coding experience and has a passion\nfor teaching and creating open source communities. He's the teacher of this course. So let's\nget started. Hello, friends. How are you doing? What is this crash course about? The crash\ncourse is about JavaScript functions. So we'll be going through a bunch of details about\nJavaScript functions in and out and try to understand with lots of code, like how it\nworks fundamentally. One thing I keep saying, folks, is that the concept is much, much bigger\nthan the syntaxes while we'll be writing code, but we want to deep down in the concept first\nand then complete that with the syntaxes. I hope you enjoy this entire course. And if\nyou so, please like and share this video. If you have any doubts, comment below. I'm\ngoing to respond to you with all the doubts, clarifications, be assured about that. Okay,\nso a few things before we get started, how to take this course. This is a longer video\nbecause of course, it's a crash course, we have to fit in a lot of stuff within one video.\nBut if you follow certain patterns, you will be enjoying the entire journey of going through\neach and every topic that we're discussing in this video. Okay, so first thing, take\nbreaks, don't try to consume all the content at once, take adequate breaks, and then try\nto feel like what you have learned are just few seconds back. Second thing, after every\nlogical chapter within this course, try to understand whether you have completely got\nthe concept or not. If not, go back and try to relearn. No problem, any time go and try\nto relearn. I will be teaching a lot of exercises. So you have to do this exercise with me, but\ndon't type them as I am teaching. Okay, first, try to understand what I am teaching, try\nto completely get it in into yourself. And after that, pause the video, try to do this,\nyou know, those those quote, quote part by yourself. All the code examples are already\nthere on GitHub. And the link to that is there in the comment section for the description\nsection of this video, you can anytime pull it up and try to see like, you know, what\nis the code look like? So no worries about that. But don't type the code as I am teaching,\nbecause then you won't be focusing on what I'm teaching, rather focus on learning, and\nthen try the code out. So go repeat, come back, learn and everything. And in case there\nis nothing clear, feel free to comment. I'm going to respond to you. So without any further\ndelay, let us get started.\nLet's quickly talk about the concepts we'll be covering in this crash course. So first\nthing we'll be talking about JavaScript functions fundamentals, what is function what is it used\nabout a very, very basic level, right? I'm considering a beginner when they watch this\ncrash course, they will be able to understand what functions are and why they are used.\nThen we'll be clarifying few terminologies, there are a few terminologies, which are a\nbit confusing when you learn functions, for example, functions versus methods, parameters\nversus arguments, and there are many more such terminologies that we want to clarify.\nNext we want to talk about function declarations, we'll be talking about function executions,\nthen we'll get into call stack, we'll talk about arrow function nested function function\nscope, we'll talk about closure, we'll talk about callback functions, higher order functions,\npure functions, we'll talk about IIFE, we'll talk about recursion. So there are lots, lots,\nlots to learn, there are lots to talk about. That's why I told you like when we go to each\nof this chapter in this course, try to understand one chapter before you go to the next one,\nand please practice the chapter before you go to the next one. Alright, so take your\ntime and let's get started with the learning. The first one about JavaScript functions and\nits fundamentals. So what is JavaScript function? Before I get there, let me tell you a story.\nIt's the story of two friends. One of the frame actually trying to cook a dish, but\nshe doesn't know the recipe of how to cook it. So she called her friend who is sitting\nabroad over phone, try to ask for the recipe. The friend at the other end, she received\na call and told the recipe line by line saying that, Hey, if you want to cook this dish,\nyou have to follow this recipe like you have to put this first, then you have to put this\none, then you have to cook it for so long. And then finally, your dish is ready. Great.\nThe friend cooked the dish following the recipe that she got. But after a week, when she tried\nto cook it again, she felt like, okay, let me ring up my friend again and try to ask\nthe recipe. And the same thing happened. The friend gave the recipe over phone. She followed\nthe instruction, cooked the favorite dish. Next month, the story remains same. She calls\nher the friend again, again got the recipe, cooked the dish for a few months. It went\non like that. But after that, even though they are very best friend, the friend who\nis sitting abroad really got frustrated of it and just told, Hey, I have been telling\nyou this recipe for like four or five months now. Why don't you write it down somewhere\nso that you don't have to ask me again and again. And I don't have to perform this task\nof telling you again and again. Rather, wherever you're writing it, you probably can fetch\nit from there. Then what the friend did, she wrote every instruction in a diary. And next\ntime onwards, she never rang up the friend abroad, rather followed it from the diary.\nJavaScript functions a little bit like that. So it saves you from repeating the same task\nagain and again. Rather, you put the task somewhere, and then reuse that every time\nyou have to perform the same. Similarly, to that friend's story, who wanted to cook the\ndish, but finally, actually, instead of giving the task of her friend to tell it again and\nagain repeatedly, she fetched it from the diary, the friend never had to perform the\ntask again. Okay, so with this analogy in mind, like reducing the task, performing the\ntask again and again, rather, we will create something so that we can actually reuse it\nwhenever required in our programming. That's the very, very fundamental aspect of functions.\nNow you'll be getting into a graphics through which the similar kind of story will be putting\ninto the code in a visual way and try to understand what exactly function does programming. The\nyellow box you see on the screen, consider that is a program. And in that you have a\nbunch of lines of code. Now, just look at it a little bit closely, there is a color\ncoding, there are a bunch of black lines, then there is a green line, again, bunch of\nblack lines, then is a red, orange, blue, again, bunch of black lines, and then there\nis a white line, right? So what I try to mean here, those black lines are the kind of code\nthe same code has been repeated multiple times. So three black lines, then some other code,\nthen again, same three black lines have been repeated, then some other code, then again,\nsame three black lines got repeated like that, right? So there is a repetition exist. Now,\nwe want to bring in the concept of JavaScript functions here, so that we can reduce this\nrepetition. So what we do basically in this case, you know, going forward, is we first\nmark what are those lines that are getting repeated. So you see here, we have marked\nthose lines that are getting repeated. And the next thing that we do is like, how can\nwe make this code better, so that we don't repeat the same task, right, the same lines,\nrather than that, we kind of take those lines somewhere, give it a name, in this case, a\nname is like if you and fun. And then what we do is like the same code that we got, change\nit in such a way that instead of those line, we are going to use the same entity, the one\nwe had created before. So do you see this one, the number of lines of code has reduced\ndrastically. So what we did, instead of repeating the same task in your code, the first one,\nwe have now put the code in something which we call as function, given it a name call\nif you and fun, and then use that if you and fun in our code, instead of repeating those\nlines every time. So we are not only reducing the number of lines of code in, you know,\nin our total source code, but what we are also doing is basically we are reusing something\nagain and again. Now think about the case, like why, why do we need it, the best case\nprobably is, let's say there is a problem in these three lines, there is a bug in these\nthree lines. So in the previous case, if there is a bug, and you have to fix that bug, or\nyou have to fix that issue, you have to fix this issue at least three times. So you have\nto fix it in the first bunch of line, then again, the second bunch of lines, then again,\nthe third bunch of lines. But as we have put this thing into a function in a single place,\nand then reusing the same with its name in the multiple different places, if you have\nto fix the bug now, you have to fix it in one place, just inside that function's body\njust inside that function, and then rest of it will work. So functions are a bunch of\nblocks that you keep together to perform something which otherwise will be very, very repeated\nin your code function should ideally have a name, but it can be without a name also,\nin most of the cases, you will have function with a name, so that you can call the function\nwith that name. So you me, every human being has a name. And the purpose of the name is\nlike, we will be called by that name. And when someone will call us by that name will\nrespond and say, Hey, I am here. I am is the I am the person. Similarly, for the function,\nwhen we call the function by the name, function will say like, Hey, I am here. And inside\nthis, I have this bunch of code, go ahead and execute this code. Okay, so that's the\nbeauty of JavaScript function. I hope you understood it. I know this graphics and please\nkeep it in your brain. Because, you know, the rest of the crash course, we are going\nto use this terminology again and again, you know, for better understanding in programming,\nat times, terminologies are much more harder than the programming itself. And when a developer\ngets stuck on those terminologies, they feel so discouraged of learning that particular\nprogramming language, it happens. So that's where we are learning any programming language\nor an aspect of an programming language, we have to make sure that we understand certain\nterminologies very well. When you are learning JavaScript functions, there are a few terminologies\nthat you also need to know, and you have to differentiate between them very well. So some\nof the terminologies are functions and methods, what are the differences, we're going to talk\nabout that, then declaration and definitions, what is the difference, is there a difference\nbetween them, arguments and parameters, we'll be talking about that as well. And then callback\nand higher order functions, you will get confused often with these two, we'll be talking that\nalso deep down when you go in the course itself. So these terminologies, keep in your mind,\nlike when we are talking about it, make sure that in your head, these terminologies and\nthe differences or the similarities is completely chalked out, completely cleared. If not, go\nback and try to see like where I have explained this one. If you still have further questions,\nask them in your comment section, I'll get back to you.\nLet us now start creating functions and try to learn like how do we create functions.\nOkay, I think before that, so you can use any editor like you can use Visual Studio\nCode or any other editor of your choice while coding. What I'm using right now, I'm using\nbrowser's dev tools and the console tab, so that I can write the program here and execute\nthem there and there. If you want any other mechanism like you will be writing on Visual\nStudio Code and use the live server to run your program, most welcome, or you can actually\npractice them on the browser's dev tool. Just go press F12, open the dev tools, go to console\ntab and start writing your program and execute it because you're just practicing at this\npoint of time. So first, first thing first, what we'll be doing now is we'll be creating\nfunction. So we told that function is something which is going to help you to keep a bunch\nof instruction and code in a place so that you can reuse it again and again when you\nneed it. Now to declare or to define a function. So our first terminology, bang, declaration\nversus definition. So these two things are exactly same when it comes to function. Function\ndeclaration, function definitions, defining a function is kind of same. If somebody's\nsaying I'm declaring a function or another person saying I'm defining a function, they\nare actually talking about the same thing, which is nothing but creating a function with\nbunch of logic. So what we're going to do now, we're first going to create a function.\nSo to do that, I have to use a keyword call function. This is the keyword, and then I\nhave to give the function a name. I told just now the function may or may not have a name,\nbut most of the time the function will have a name so that we can call the function by\nits name, just like the human being has name. There are situations where the function may\nnot have a name and we'll talk about the situations in the in some time in this course. OK, so\nlet's first give a name. Let's give a name called print me and then give a, you know,\ncurly braces and then close that curly braces. So this is what you have declared or you have\ndefined a function. OK, so right now the function has a keyword, a name, a bunch of parentheses,\nand then curly braces open a curly braces end. Inside this curly braces, you are going to\nwrite every logic that you want this function to have so that you can reuse this logic anywhere\nyou want. For example, this particular function may just log certain thing into this console.\nSo you do console dot log console dot log console is like an, you know, something that\nyou already have with JavaScript on this particular debugger so that you can use it for your coding\npurpose for your debugging purpose. And on console, you have varieties of methods. One\nof the method is log through which you can log something in the console so that you know\nyou can actually read them or it's more for the debugging purpose that you can use. OK,\nso let us do something like printing something like this. OK, so I have created a function\nwith a function keyword and the name called print me and the instruction the function\nhas is is a log that I want to print in the console and that log says printing. That's\nit. So this is my function definition or function declaration. Now, as I have declared this\nfunction with a name, the next thing that I can do beautifully is by calling this function.\nSo to call this function, just type the name of the function, you know, print me over here,\nthere is autocomplete already. And then to call it, you have to give this parenthesis.\nOtherwise, you are just printing this particular function's name. And if you just do this,\nthe function is going to print its complete body itself. So if you just do print me the\nname itself, it is going to give you a string version of the entire function's definition\nor declaration that you have done just now. But to execute to call it specifically, you\nhave to give this parenthesis, you must give this parenthesis, and then you press enter,\nit will give its output. It's just log printing, because that's exactly what we asked this\nparticular function to do. So our function has worked. That's great. Now, as the function\nhas worked, I want to just do something more with this. OK, so this is where what I'm going\nto introduce something called parameter. Okay, so let's write the same function function.\nAnd we will say the name is print this. And we will pass something over here, which we\ncall as parameter, I'll get into it in a minute. And then I'll close this function's body.\nAnd inside this, what I'm going to do, I am going to write like console dot log, param.\nSo what is it? What does it mean? What what I have done here? Okay, so I have first, similarly\ncreated a function with the function keyword and the function name. Here, I have not done\nanything between these two parentheses. But in this case, I have done something in the\nparenthesis. So whatever you put inside this parenthesis of a function, it's called parameters.\nOkay, whatever you put inside this parenthesis is called parameters, you can put as many\nparameters that you wish to, as long as you need in your programming logic. So if I am\npassing param is going to just, you know, I can use this param anywhere inside this\nfunction, so that I can do something with it. So for example, I can just now do print\nthis and pass this is going to print the thing that I have just given over here. So it means\nI can pass a value to a function, and that value actually get mapped to the parameter.\nAnd that's something that I can use, you know, inside the function to do anything that we\nwant. So again, there is a thing that I want to call out over here, there is a terminal\nlogic thing, a parameter versus argument, anything in the function definition you pass\ninside this parenthesis is a parameter. But when you call this function invoke this function,\nthe actual value that you're passing to this function is called argument. Okay, so that's\nthe difference. Sometime what happened that we call this also as parameter that I'm passing\nthe parameter, we call this as an argument that I'm passing the argument, that's not\nthe case. So parameter is something that you pass to a function while declaring or defining\nthe function, which is like this. But when you call or invoke this function, the actual\nvalue you pass to it, it's called the arguments. So I hope this is clear to you the parameter\nversus argument. Okay, great. So we have defined the function. And we have now know what is\nparameter we have now know what exactly is, you know, argument and things like that. Okay,\nso the next thing, we have defined the function, but there is one more way we can actually\ndeclare or define the function. That's called using the function expressions. Okay, so what\nis expression, let's learn. But before that, let me just clear it off all this thing that\nI have done, because I don't need it. So if I say const count equals 200, this is an expression,\nwhat this expression has, it has a variable name called count. It has like, you know,\nhow we have defined this variable, we are saying this variable is a constant, and then\nis a value of this particular variable. Okay, so const count equals 200 is an expression.\nExactly. Similarly, we can actually define a function. So let's take the print me function\nitself. So in the print me function, the print me is nothing but the function name, which\nwe can actually put as a variable over here. And then what we can do here, instead of that\n100 value, we can give function itself is a value. And then we give the functions body.\nAnd inside this function body, we can give whatever we need. Sorry, it's got executed\nmy bad, I'll just put it over here. You can give console dot log, they print, right. So\nthis is what I am done. So I have const print me equals to function and then this this thing.\nSo previously, what I have done previously, I have done this function, print me. Okay,\nand then I have done here console dot log, say, printing. So now, I have just defined\nthe function, but I have defined the function in the function expression way. So it means\nthat the name that I have used for function before, now it's a variable basically. And\nthen the variable what I have assigned is nothing but a function, I have assigned that\na function. So it means print me is nothing but a function. Now, when if I did const print\nme equals to 100, print me is nothing but a number, which value is 100. Now I have done\nconst print me equals to function, that means print me is a function. And then I should\nbe able to execute this function. So first, I'll define this, okay, print me as already\ndeclared, because I have used this, let's use some other name for now, say print me\nagain. Okay, so this is the name, and then I do print me again. And I have to execute\nme, so I have to do this parenthesis, and I got the print. So this is another way I\ncan actually define and declare a function, right. Now, in the same thing in the print\nme again, let's say print me again, and let's say with param, what I can do now I can actually\nput any parameter here, right, or this time I'll put two parameters a and b. And here\nafter coming, I'll be actually doing a and b. I have done now declared it. Now let's\nsay print me again with param, if I do 10 and 20 as an argument is going to print 10\n10 10 and 20. So I hope this is clear. And now you know like how we can actually define\na function or declare a function. There are two ways we have done. Okay, so one is with\nexpression and that is without expression. Let's learn how to return from a function.\nSo return is something you will be using very often when you work with functions. So far\nwhat we have done, we have created a function, but inside that we have just done a console\ndot lock statement, which is not enough. Usually what happened is like when you create a function,\nlet's say function x, and you have something over here, right. And then you will have say\nanother function, y. Okay, and you have something over here. And then each of these functions\nare supposed to do their own task, right. And in the entire program, our entire application\nis not like that you will have only one function, you will have multiple functions. And what\nwe'll be doing is like, if function x whatever is supposed to do, what you can use is basically\nyou can use it like the output value of function x, and take this into a variable like say\nlet p equals to this, and basically can use this p somewhere inside another function or\nanywhere else that in that matter. So basically, whatever the value of that x function that\nreturns, you can utilize that value anywhere else maybe in another function or anywhere\nin your programming, right. So that is that is that is very much feasible thing in and\nthe thing that you will be definitely doing. Now this thing to happen, if you see this\nexpression, let me remove everything over here. And just to put this for your consumption,\nthis particular expression, what we are doing, we are having a variable called p. And the\npiece value is what is not the function, but the value we get from executing a function,\nbecause we told a function name along with a parenthesis means executing calling invoking\na function of function name without a parenthesis means it just the string representation of\nthe function definition itself. This is a this is a difference that you have to keep\nin mind. So in this case, we have parenthesis means the function will execute function will\nbe called or function will be invoked. And within that if the function is returning any\nvalue, if the function is returning any value, that value will be assigned to this variable.\nWhat if the function doesn't return any value? What if it just has a console.log like we\nhave seen the function so far, in that case, simply the function execution will return\nsomething very special, which is called undefined. Okay, it means that something that is not\ndefined yet is something called undefined. Okay, so now let us create a function that\nreturns something. So for that, we'll create a function, say sum, and we'll do a summation\naddition of two things. So we'll take a and b as two parameters, terminology matters.\nAnd what we'll do is like we'll do return of a plus b, simple, which means that this\nis a function whose name is sum takes two parameters a and b, it sum up those two parameter\nwith this arithmetic operation, and the result it returns, you know, back. So let's execute\nsum, it takes two arguments. Now, let's put two and three. It means we are expecting a\nfive is returning a five. The same method, we can actually write a little bit differently\nhow let's write the same method function, sum, we will do again a comma b. And in this\ncase, we just did return of a plus b, instead of that, sometime, you might want to do this\nalso, like let return a variable a plus b, and then return that particular variable itself.\nThat is also same thing, same as you know, we have done whatever we have done before\nlike returning a plus b directly, right. So if it is just a simple calculation, returning\nit directly itself will be a shorter amount of code that people does. So please follow\nthat. This is about returning returning from a function, it means everything that you do\ninside a function, all the tasks, all the logic, all the operations, and at the end\nof it, if you want the function to return a value, so that that value can be utilized\nelsewhere, you have to use a return statement, followed by what you want to return. I hope\nthis is clear.\nWhat is default parameter? When you define a function, we know how to define a function.\nSo let's define a function function will take the same. Okay, little bit different function,\nlet's say calc is a function, and it takes a two parameters a and b. And what we do,\nwe will return some value and the value that we want to return is something like two into\na plus b. Okay, this is the value we are planning to return. So what does this function do a\nsimple function, a function whose name is calc, takes two parameters a and b, what it\nreturns is for sum up these two parameters value, then multiply it with two, and then\nreturn something back a value back. So let's execute this, let's call this function with\ntwo comma three. Alright, so what it gives you, it gives you 10. Yeah, of course, because\ntwo plus three is five, five into two is 10. Similarly, you can do three into three, what\nis going to give you 12, three plus three is six into two is 12. Now let's say someone\nin the team forgot to pass this second argument, what you get, you get not a number. Why do\nyou get an order number? Because when you don't pass an argument for a parameter for\nthe function, the parameter value will be undefined. We told about that. So it means\nthat in this case, you are not passing the second argument. So value basically, so then\nb will be undefined. Now a plus undefined on a will be three b is undefined, three plus\nundefined is not a number, of course, it returns not a number. Now on a situation like this,\ninstead of getting not a number, you might want to safeguard it with some kind of default\nvalue, right, some kind of default value of these parameters, so that at least this one\nfail like this, rather, you can safeguard them with some values of, you know, something\nthat you are liking. Okay, so what we're going to do the same function, I'm going to bring\nin again. And now I can actually default it to zero. Okay, it's a default value or default\nvalue for this parameter that I'm putting. So it means if someone is not passing a value\nfor this parameter using the argument, the value zero will be used instead. Okay, so\nlet's do this. Now I'm going to do Calc three again, if you see this now instead of no n\nn, not a number, it is actually returning a value which is six, which is let's do the\ncomputation a is three b is zero three plus zero is three three into two is six. Okay,\nso you can do a default parameter value for your function if it's required to. And in\nthat case, you can safeguard it from an unnatural value return value from the function like\nnot a number. And you can actually override the undefined value instead of having undefined,\nyou can now set certain value with the default parameter. Rest parameters. What is rest parameter?\nThe rest parameter is something that allows a function to accept any number of arguments\nas an array, any number of arguments. Okay, now theory is one side, let's do it with example,\nlet's create a function, let's say give a function name, we'll give a name call say\ncollect things. Okay. And we'll have two parameters of it first is x and then is y. Now we are\ntalking about rest parameters are different kind of special parameters, right, we know\nabout default parameters. Now, now we are learning about the rest parameters. And I\njust now say the rest parameter allows a function to accept any number and infinite number of\narguments as an array. Now to make sure the rest parameter accept an infinite number of\narguments, what we have to do, you have to give a special syntax to it, the syntax is\nwith three dots. So when we give three dots, what happened is like this, this, this particular\nparameter become rest parameter. Now here are two things I want to call out a function\ndefinition can have only one rest parameter. So it means that you cannot do x comma rest\nparameter y comma rest parameter z, you cannot do that. So it can have only one rest parameter.\nAnd the rest parameter must be the last parameter that you define for the function. These two\nrules, please keep in mind, I'll repeat again, a function definition can only have one rest\nparameter as we have over here with y. The rest parameter must be the last parameter\nlike how we have here. So you cannot have like you know, making this x as a rest parameter\nand then y as a normal parameter, you cannot have that rather you have to have like this,\nof course, the name suggests it means rest, rest means rest of it, rest of it means whatever\nis leftover. So that is where it goes at the end. Okay, now what I'm going to do, I'm going\nto do a console dot log of x. And then I'll go do console dot log of y, so that I can\nactually print and see like what exactly it prints. Now I have defined, let's just do\ncollect things, sorry, let's just do collect things, and then pass some arguments, any\nnumber 5, 6, 7, 8, 9, okay, 9 enough. Now what I'm going to do, I'm going to call collect\nthings with nine arguments, I can pass 100, 1000s, millions if I have time. Okay, so let's\ntest it with 9. So what will happen, the first argument that gets mapped to the first parameter,\nso x value will be 1, and the rest of it 2 to 9 goes to the rest parameter. So it means\ny will now accept from 2 to 9, but within an array. Okay, so if I just printing it,\nso if you see, the first sprints x is 1, and then rest of the 8 goes inside an array 2\nto 9, this subscript is an array notation 2 to 9, and then that get assigned, this entire\narray get assigned to this y parameter, that's why it's called rest parameter. Hope it was\nagain easy for you to understand, and you will try to practice a lot about the rest\nparameter.\nLet's learn about arrow function or fat arrow syntax. Alright, so we know how to define\na function, right? Let's do it again. But this time, let's repeat the one we did with\nfunction expression, const add equals to a function. And then we have two parameters\nover here. And then we have return of x plus y. And finally, we close this particular breast.\nSo that works, that's great, right? Now, what we can do over here to convert this one to\na arrow function or fat arrow syntax that a few adjustment that you have to do. So initially\nthe arrow function or the fat arrow syntax looks little weird. But how I tried to kind\nof remember writing it. And right now, what happened is like, I hardly write a function\nin the regular definition or declaration way, it's always about writing the function with\nthe fat arrow syntax or the arrow syntax. Okay, so let's convert it, if you're new to\nit, you will take some time to get a grip on it. But once you get a grip on it, I'm\nsure that you're going to write the arrow function again and again. Because now I'm\ncoming to the usage of it, because the best uses, you will write less number of code,\nyou will write lesser amount of code. And be it any framework or any library today in\nthe modern web development, I think the de facto, the very normal coding syntax for\nfunction is using arrow function. It doesn't mean that you cannot go with the traditional\nway of declaring and defining function or declare a different functions using expressions\nlike the one we see on the screen, you can always go with that. But if you use arrow\nfunction, or you use fat arrow syntax, it's like, you know, much more modern, is much\nmore less code. And of course, there is one more thing that is there which I won't be\ncovering in this crash course in the but the but in the following one, the relationship\nwith this keyword and arrow function, arrow functions, no binding to this keyword, that\nis what is another special case that comes but that will be covering into the this video\nthat this keyword video that I'll be making next. Okay, but let's now focus on how to\nconvert this one to arrow function. Okay, so to convert this one, what I have to do,\nsimple thing, one is I'm going to remove this function keyword. So you don't need function\nkeyword at all to make an arrow function. Next, we are talking about his arrow function.\nSo you need an arrow. So arrow is a combination of this equals key, and this get it done.\nSo if you have a greater than and the equals and the greater than key without any space\nside by side, you actually have an arrow like syntax. And this is what is making is an arrow\nfunction. So this is an arrow function, okay, const add, this is the parameter that we are\ntaking. And then what is happening, basically, I am having an arrow and then the definition\nof the function. That's all about the arrow function. So I'm not using the function keyword\nat all. So let's just make sure that it runs to comma three, it runs five. Okay, very good.\nBut one more thing that I can do, if the arrow function body the arrow functions declaration,\nhaving only one statement, just one line and one and returning something, you don't have\nto even give this, you know, curly braces. So this one you can very well define, like,\nyou don't need this, just get rid of it. And then you get rid of it, that's it. So this\nsyntax compared to this one, you know, the with the function keyword, this is much, much\nsimpler, isn't it? So if you have a syntax like this, it is it is way, way easy for you.\nAnd if it is something like, you know, you have dependency with just one parameter over\nhere, you don't have to give this parenthesis, you can actually do things like this. So if\nyou have, you know, just one line stuff over here, so it's much, much simpler. So this\nis the reason why arrow function is very well depreciated, very well appreciated by the\ndeveloper community, it is very well received by developer community, because you will be\nwriting very less syntax is very less code. And in all the modern web development, you\nknow, area that a function is used very heavily. So please practice writing arrow function.\nAnd I hope that you keep writing more and more arrow function in your code, then writing\nthe function more traditional way.\nAll right, so nested function, what does nesting means? We know how to create a function, let's\nsay we create a function called outer. And that function has a body. And it can have\ncertain instruction, like what is this function supposed to do? Maybe in this case, a function\nis supposed to print something called outer into the log. Now, JavaScript allows you to\ncreate a function to define a function within within another function. Okay, it might sound\na little bit strange if you're new to it. But this is a very, very powerful feature.\nAnd this is the first basic thing towards understanding the concept of closure, the\nconcept of closure in functions in JavaScript function equals to the understanding of nested\nfunction, plus function scope. So if you want to understand closure deeply, I want your\nattention over here first understand what nested function is, how does it work? Up next\nwe'll be talking about function scope. And then we'll be talking about closure so that\neverything is very, very clear to you and is very straightforward to you. All right,\nso nested function. So function within a function, this means I can create another function over\nhere, give it a name, maybe for simplicity, I'm giving it an inner. And I can give a console.log.\nAs I've defined this function using the outer function, this function is called a nested\nfunction. And this nested function as I've defined outside, you know, inside this outer\nfunction, I have to call this one inside the outer function itself. Okay, so like this.\nSo right now, if I have defined it this way, and if I call the outer function, what will\nhappen? The outer function will be invoked, it will print this console.log, then it will\nsee this inner function has been defined, the definition happened. And after that it\nwill invoke the inner function also. So what will be the output if I do this outer over\nhere? Okay, so the output is outer and then the inner. So it first print the log outer,\nand then the definition happened, the inner get executed, and this this inner actually\ngets printed out. So you can have nesting to any level in JavaScript functions. However,\nyou won't see in practice, you know, too much level of nesting, but you definitely will\nsee now if you go back and see the code, the various JavaScript code, you'll definitely\nwill see some level of nesting, some level of defining one function, another inside another\nfunction happening. And it's a very powerful feature, we'll be able to see this in a moment.\nJust now we have seen what nested function is. And now we are stepping into understanding\nfunction scope. Okay, these two are a bit interrelated, because you have to understand\nthe concept of nested function, you can define a function within another function. And then\nthe function scope is important to understand who can access what? Okay. Now, there are\ncertain generic rules. But to understand those rules, I thought a graphical picture will\nbe much more important. So please pay attention to this graphic over here. So let's say there\nis a JavaScript file, you know, and a function is defined inside that. So the function is\nrunning globally, it means that the function is not inside any other function. So this\nblue one is a function, this particular function is not inside any other function, okay, the\nfunction is just defined globally. Now what happened, there are there are actually two\nrules, two primary rules that you have to keep in mind. And these two rules are very\nimportant if you understand, I want to understand closure. Okay. So the first rule over here\nis variable that are defined inside a function, the variable that are defined inside a function\nthat cannot be accessed anywhere outside of the function. Okay, so the variable that this\none is defined inside this function cannot be accessed from anywhere outside of the function.\nOkay, so anything defined in this blue box cannot be accessed outside of the blue box.\nUnderstood first principle, okay, of variable defined inside a function cannot be accessed\nanywhere outside of the function. Second principle, the opposite of it, a function can access\nall the variables inside the scope it is defined. A function can access all the variable inside\nthe scope it is defined. So it means this blue function can access all the variables\nthat is defined, you know, in the scope, the function is defined in the global scope. So\ninside the global scope, if I am defining, I'm having any variable, I will be able to\naccess that from this function, but the reverse is not true. From the outside, you cannot\naccess the thing which is inside. Understood this rule, let's repeat this rule again because\nit's very important for us to understand closure. Variables defined inside a function cannot\nbe accessed anywhere outside of the function. First rule. Second, a function can access all\nthe variables inside the scope that it is defined. So this blue box is defined in the\nglobal scope. In the global scope, if there are any variables from this blue box, from\nthe blue function, I should be able to access it. Great. Now we have learned about nested\nfunction, no? So just replace this global with a function and this function one with\na nested function, okay, inner function. So the global is outer function and this function\nis an inner function. In this case also, then the formula remains same. The rule applicable\nover here also. So it means your outer function cannot access anything from the inner function\nas the inner function is defined in this outer function. So it means the inner function will\nbe able to access anything that is defined in this outer function because inner function\nis defined in the outer function scope. Very simple, right? So now if it goes keep going\nnesting, like if there is another function inside, there is another function inside.\nSame rule applicable. We have the same rule applied over there. So this is how it works.\nSo you have to keep this thing in your mind. Now we are going to see with some code example\nhere, okay. We'll be seeing some code example over here. But you have to really remember\nthis rule that a variable defined inside a function cannot access anywhere outside of\nthe function, you know, from outside of the function. A function can access all the variables\ninside the scope that it is defined. So these arrows and these things, if you keep it in\nyour mind, I think things will be very clear. Okay, so let's move on and try to see like\nhow the things works code wise, we'll be doing some coding now. So based on the rules that\nwe have learned so far, we are going to write the code so that we understand this thing\nclearly, right? Let's create a function, let's create a function called a do something. Okay.\nAnd what is this function doing? It's basically, let's create a few variables inside that.\nSo let's do let x equals to 10, const y equals to 20. And then let const, okay, let's get\nvar z equals to 30. Okay. And then simply we'll do a console dot log of x comma y comma\nz. Okay. So we know if I now do do something, I just call this function, I know what will\nbe the output is 10 2030 very, very straightforward things that we have created over here. Okay.\nSo but this is where our rule number one comes into the picture, what was the rule number\none variable defined inside a function cannot be accessed from outside. Right. So it means\nI have defined let x const y var z inside the do something function and I've executed\ndo something it executed this console dot log x y z. Now if I try to take this console\ndot log and try to execute outside, what is going to happen? Do you see that? He says\nx is not defined. Okay, x is not defined, maybe x is late, so it's not able to define.\nWhy also is cause not able how about a var? No, even if it is var, and it is defined within\na function, you cannot access this variable outside a scope outside of this function,\nyou cannot access that is the first principle that we have learned just now. Right. Now,\nsecond principle, what was the second principle? Do you remember? The second principle was\nabout if the function basically now can access anything and everything from its scope, basically\nthe scope where it is defined. Okay, so let's see the second rule. Now what will be doing?\nWe'll be defining var x equals to 10, const y equals to 20, let z equals to 30. Okay.\nNow if I do function, do something and do a console dot log of x comma y comma z, what\ndo you think will happen? If I just execute do something, what will happen? Do you think\nit is going to give an error or is going to print is going to print successfully? Why?\nBecause our second rule say, wherever the function, whatever the scope the function\nis defined in that scope, if there are variables declared, the function can access this variable,\nthis function is declared in the global scope, it means that function is not inside another\nfunction. So it means if the global scope is having any variables, so the function will\nbe able to access those variables inside the function itself. But when we did the thing\nother way around, we have declared all this thing inside the function and tried to access\nthem from outside, it doesn't work. So these two rules define the functional scope, the\nscope that we are talking about is the functional scope, you have to remember what is accessible\nwhere simple thing if it is in the outer scope, if it is if it is defined in the same scope\nwhere the function is defined, it is accessible within the function. But if it is defined\nwithin the function, it is not accessible from outside, even if it is a var that is\ndeclared and defined inside the function. Clear about it. Great. So ask a developer\nabout a complex JavaScript topic. There are higher chances that we'll hear back closures.\nThis is because the closures are not understood fundamentally by connecting the dots. Okay,\nfrom connecting the dots point of view. If you don't know about connecting the dots and\ncreating a mind map to learn a complex topic, I have created a video on how to learn JavaScript\nby connecting the dots, please go ahead and take a look. Now, coming back to closures,\nif you learn closures by connecting the dots, you will find closures understanding much\neasy, if you just jump into closure and trying to understand you may not understand it well.\nBut if you come from the background of nested function, then function scope, you will be\nable to understand closure very easily. Okay, so let's get into understanding closures,\nso that we can actually feel it, it's easy. Take a look into this picture on your screen.\nSo there is a box inside that there is another box, consider this one as an outer function,\nand this one as an inner function, we have learned about the nested function already,\nright? So let's give them a name. For example, I'll give them give the for this one as f\none as a function one, or we'll I'll give it as a name, the outer, to be very sure that\nthey're out, this is outer, and this one, of course, inner. Now, you know, if I define\na variable over here, say a, this variable is not accessible from outside. But if I define\na variable over here, say b, this variable is accessible from inside the inner function.\nSo we have learned this in the nested function and the function scope very clearly. Okay.\nNow, what is closure? The nested function is a closure, this inner function is nothing\nbut a closure, okay, as simple as that. So if anybody asked you a definition of closure,\nyou can tell this nested function is a closure. Now, if you go for a bookish, you know, closure\nand for example, if you go to MDN, and try to look for what is closure, you will get\na definition like a closure is a function that can have free variables together with\nan environment that can run that variable, okay, which means it the environment is nothing\nbut this inner function. And the variable means every variable that is defined inside\nthat inner function. And there is an ability through which you will be able to run things\nwhich is in this inner function. So this inner function is basically is a closure. Okay,\nthis is how we should be understanding closure. Now, let me summarize. The inner function\ncan be accessed only from the statements in the outer function, correct, we'll see it\nin code also. And the inner function from a closure, it means the inner function can\nuse the variables, the arguments, everything from the outer function, while the outer function\ncannot use the arguments and the variable from the inner function here. With this one,\nif we understand like what is closure, the closure is nothing but the nested function,\nbecause it provides an environment, you know, to the outer world. So this nested function\ncan leave in a longer, the nested function can leave longer for execution. And it can\nactually perform the all the required operation. Right, so let's write a function will give\nthe team as outer. And let's take a parameter of this one outer function. And then let's\ntake another function nested function, which is like inner, we will also take a parameter\nover here. And what we can do here, this is the beauty of it, the inner function can access\nthe outer functions variable and argument. So I can do return x plus y, correct, inner\nfunction can access the outer functions argument or any variable that is declared inside outer\nfunction. So I can do return x plus y pretty well over here. Okay. And then finally, what\nI can do, I can do return inner. Okay, I am returning this inner function as well. Okay.\nNow since the inner function, the inner function is which one this one forms the closure, this\nis what is closure. Okay. Now, what I can do basically, I can call this outer function.\nOkay, and specify the argument, and then leverage both outer and inner together. That's the\nadvantage. Okay. So let me see, how can I do this? I'll just press enter. Now first,\nwhat I can do const outer return equals to outer, let's give 10. What do you think will\nbe returned over here? This is this is this is the most interesting part, what will return.\nSo once we call this outer function, outer function, return nothing but a function, which\nis like an inner function. Now when the function execution is over, the call is over, that\nfunction is over, right? That function is nowhere in the picture. So if I press and\nenter over here, outer is just over, it is nowhere in the picture. But the beauty of\nit, the beauty of it is the argument I have passed to outer is still leaves, where is\nstill leaves inside inner because this 10 was passed over here, this 10 is still used\nover here and this still leaves, even after the outer execution because outer returns\nthe inner, the inner is actually over here outer return. So let me just if I just do\nouter return for you, if I just do this one and print this for you, what it returns is\nreturns inner y return x plus y, which is written this function, where x is nothing\nbut this 10 that I have passed. So though the execution of outer is over, but the value\nthat we have passed through outer still leaves within inner. So it means, it means if I just\nexecute outer outer return now, oh, you to your outer return now, with a parameter set\ntwo is going to give me the output of 12. Why? Because outer return is nothing but this\ninner function, inner function expects a parameter over here, the parameter that I have passed\nas the no pass the argument over here. But what it did it actually use this two with\na variable that I have passed long back and the execution is over. That's why this is\ncalled closure. This is created a closure closure is nothing but the variables and an\nenvironment that you can actually execute freely. What do you mean by freely? It means\nusually in functions whenever the function execution is completely over, this is done\nany variable that is that is actually created inside that that's all gone is basically you\nare not going to get it anymore. But in this case, though outer is executed long back,\nbut the argument of the parameter we have passed through outer is still leaves within\ninner because inner is a closure, and I can actually utilize it, you know, at a later\npoint of time. So this is what the concept of closure that you need to understand. This\nis what you need to understand is like, why closure is really handy method, why closure\nis really useful. So you can use closure for various use cases. One of the use cases that\nI have seen over here is like preserving the variable. So I have passed 10 though the function\nexecution is over, but still 10 is preserved over here. And as it is preserved over here,\nit can be utilized with another value to compute something and return, right? That's why the\nclosure is useful. In the video that I'll be creating focusing on closure, only there\nI'll be talking about much more real life examples and the use case that you can actually\nbuild with closure. So as you understand closure fundamentally right now, start practicing,\nstart creating this kind of a small example where you have a outer function inner function,\nouter inner both takes some argument, you return the inner function from the outer function\nand see after outer execution gets over how the value that you pass through outer you\ncan still used inside inner at a later point of time. So this kind of thing, the example\nthat you're seeing over here, try to find out this example over internet or try to cook\nsomething by yourself and try to practice it more use case oriented example like real\nlife use case oriented example of closure that will come in a dedicated video. I hope\nthis clarify your concept. Now just to recap it once the closure understanding is depending\non your understanding of nested function plus function scope. We know by nested function\nthat a function can define one more function within it. We know why the function scope\nis like the outer function cannot access any variable inside the inner function. However,\ninner function can access any variable and the argument of the outer function. This ability\ngives us a very powerful feature called closure through which even if the outer function execution\nis over, but we can persist certain values which was passed to the outer function within\ninner function and compute it at a later point of time. That becomes a powerful feature itself\na powerful design pattern itself in JavaScript, which is called closure. I hope this is clear\nto you.\nNow we learn about callback functions. What is callback? Okay, so everything is in the\nname itself callback. It means call it back some point of time. But let's understand with\nsome example. Now in JavaScript function is a first class citizen. What do you what do\nyou mean by that? It means that we can create a function we have seen function definition\nwe can assign a function we have seen like when you do const x equals to function and\nthen basically we can assign this function to a variable. We can assign a function we\ncan return we can define a function within another function. We have seen this from the\nnested function. Now the next thing that we are going to see is like we can pass function\nas a parameter to another function. Okay, that is where the callback function comes\ninto picture and we'll see what is use cases are. Okay, first, let's define a function\ncalled foo. Okay, and this is the foo function. What is this foo function doing over here?\nLet's assume that foo function can take another function as a parameter. Let's pass another\nfunction function as a parameter called foo or let's call bar because that's foo bar\nbus are the things that we usually use these names for example. Now as this function takes\nan argument which is nothing but another function. So it means I can capture it as a bar parameter\nand assume that this bar is nothing but another function. So it means that inside this I should\nbe able to execute this function. Very simple. If it was a string I could have printed the\nstring or concatenated with something else or done something with the screen. If it is\na number I would have done something with a number. If it is a function I'll simply\nexecute this function. Now to execute this function we know that we have to give this\nparenthesis to call this function or execute this function. This particular function is\ncalled a callback. This particular function is called a callback. But why? We'll come\nto that. But first I want to execute this. How do we execute this one? I have defined\nit. Now if I have to execute this I know that foo takes a function. So I can actually pass\na function to it. Ok. And let's do something like this. So what I did? foo takes a function.\nOf course we told foo takes a function. The bar is a function. And we execute it inside.\nThis means that I can pass a function as an argument to foo. So I have passed a function.\nDo you guys realize one thing over here? I have created a function which doesn't have\na name. So this function is called anonymous function. The function that doesn't have a\nname is called anonymous function because it doesn't have a name. And as I will be using\nthis function instantly over here I didn't bother about creating it again. Ok. So if\nI just execute this one. This function get passed over here and then it gets executed\nin this line. Once it get executed in this line this console.log get executed and it\nprints bar. Same thing what I can do instead of doing this line for you to understand this\nbetter I can create a function with a name. For example function named and instead of\nthat I can actually say console.log of bar again. Same thing like the previous function\ninstead of passing it directly. Now I can do foo of named. Right. It's exactly the same\nthing that whatever instead of again declaring the function with a name function and then\npassing the function over here I just pass the function directly over there. That's the\nonly difference but output is same. Ok. So now you know a function can take a function\nas an argument and I can actually do that. And the function which is passed as a parameter\nand I am using it you know inside it at a later point of time is called callback function.\nBut why it's called callback function. That's the thing. Let's go from the beginning again\nto understand why it's called a callback function. So again we'll be defining function foo take\nanother function bar and let's say I have some condition. Condition is if it's night\nconsider that it's night is a boolean variable it can be true or false. In that case you\ncall bar. Ok. Usually at the night only like you know bars will be like flourishing everywhere\nor let's say another condition is there if is drinks over check online in this case only\nok. Pelling mistake check online in this case itself you call bar. So we have two conditions\nwhere we want to call this particular function call bar. The one condition is if it is night\nthen call bar function or maybe do an online call or network call to check whether the\ndrinks is over then only you call bar. So it means that calling back bar is based on\ncertain kind of conditions that is happening within this function. This is a case where\nyou actually want to call this function as a callback function. You are calling it back\nbased on certain conditions based on certain things. It is so so amazingly powerful because\nyou can pass any function to another function and call this passed function based on any\ncondition at a later point of time. That's why it is called call back. Now if you want\nto understand this concept with much deeper example. I have created an example with the\npizza hub or the pizza hub and a little boy story. It's like a storytelling so that anybody\ncan understand. That video is already out there. Go ahead and check out that video.\nThe link of that video is in the description of this video. You can check out and find\nout like you know how in a real life application you can use call back you know effortlessly.\nSo I hope the callback functions is clear to you now.\nNow we learn about higher order function higher order function or HOF. OK. What is higher\norder function. A higher order function by definition is a regular function is a normal\nfunction that takes one or more function as an argument and or returns of function as\na value of it. OK. Let's write it down. It's a bit complex in that way. So one condition\nis like it takes one or more functions as argument. OK. This is the first thing. And\nthen the second thing. It may return a function. OK. So not necessarily both the conditions\nhas to be made for a higher order function. If any of the condition meets it's actually\na higher order function. Now we just now spoke about a callback function right. What is told\nabout callback function. A callback function is a function which takes a function as an\nargument based on certain conditions or something. Whatever the function we are passing as an\nargument it is going to invoke that function inside. Now in the first case of the HOF higher\norder function is about taking one or more function as an argument. So it means there\nis a relationship between a higher order function and a callback function. And that is where\nsometime in interviews interviewers put some tricky question is HOF and callback are same.\nNo HOF and callback are not exactly same because for callback functions it is not mandatory\nfor the main function to return any function. It can accept the function as a argument.\nDo something with it. But it is not necessary that it has to return a function. Whereas\nin higher order function if the function return another function it calls a higher order function.\nIn that case also it calls higher order function. OK. So it means that if I am just taking like\na function. OK. Let's take a function. Let's give it the name call gate capture and let's\ntake a parameter called camera. OK. Now if I am doing like this. This is a higher order\nfunction. Why because camera is a function and I'm executing this one over here. So I\ncan actually call get capture over here. I can call. Sorry about that. I can call get\ncapture over here. And pass a function to it. I can say function. OK. Do a console console\ndot log. Say can on. OK. So it execute. This is what we have seen when we understood a\ncallback function. Now we can do the other part also like a function returning another\nfunction which is also called a higher order function. So how it will be. We can actually\ndo like function return the f n and it can return a function with say a console dot log\nof returning something we are printing over here to prove that it works. Now how am I\ngoing to execute this multiple ways to execute it. For example. Const. Say f n equals to\nI can do return f n. To return f n. When I return f n what it does it return a function\nright now. So if I do this. So f n is now nothing but a function. If you see that the\nmoment I'm typing f n it is giving f. If I just do a printout over here. It is running\na function to execute this one. It means I need the parenthesis. OK. So it will execute\nthis one. So this is one way that I actually can execute this thing. So I hope this is\nquite clear. Now do you. If you are working on JavaScript for some time you are already\nusing some of the higher order function. You know already. And the higher order function\nis extremely extremely useful for you know your core reliability predictability aspects\nof it. You are already using some of those things called array functions like map filter\nreduce find all this method that you have right on the arrays are all higher order functions\nbecause they are also you write a code like you know one if I take like one comma two\ncomma three and on this array you do something like filter and in here you pass a function\nright your filter condition you pass over here if you are using array already you will\nknow that and this is where you actually put your condition like based on which condition\nyou want to filter this one out right you get this like element and if the element greater\nthan two greater than three you know you actually write conditions like that and based on that\nyou filter the things out. So this is an example of a higher order function like how why exactly\nfor higher order function and where you use the higher. Now again if you want to get a\nvery very deep look of higher order function as it is crash course we are not getting into\ntoo much deep but you want to get a very good deep of a higher order function. I have already\ncreated a video for it. Please take a look at it. I'm sure that you will enjoy learning\nhigher order function and try to understand what are the different use cases apart from\nbuilt in JavaScript functions whenever you are coding in what cases you will be using\nhigher order functions. Please take a look. Let's see what a pure function is. In JavaScript\nwhen you are dealing with function you deal with lot of pure functions you also deal with\nlot of impure functions. By definition a pure function is a function that produces the same\noutput for the same input. So function say greeting input is name and what is going to\ndo is going to return a greeting message. So return hello and this kind of greeting\nmessage is going to return. Fair enough. So if I call say greeting and pass my name is\ngoing to return hello tapas. So for same input is going to return same output. If I as many\ntimes I am going to input tapas that many times it is going to return hello tapas. If\nI do hello YouTube it is going to return hello YouTube. As many times I am going to input\nYouTube that many times it is going to output hello YouTube. Pure function. This is pure\nfunction. Pure function helps in predictability. It means that if the input is same output\nwill be always same. So this is very very predictable. What is impure function? Just\nthe opposite of that. It means that for the same input it is not going to create the same\noutput. So same function if I just do a little bit different way. So for example let me create\na variable called greeting and what I did now initialized with hello. Now I have a function\nlike function you know this guy. I will just copy this so that I can utilize it. But I\nwill change a little bit. What I will be changing instead of this hello. Heartcoding hello.\nNow I am taking this greeting from here. Alright so if I now say greeting tapas it will give\nhello tapas. Fair enough. If I give tapas again it will give hello tapas. Fair enough.\nBut if I change this greeting variable value to from hello to hola. Hello to hola. And\nthen I do it again for the same input tapas the output become hola tapas. So from hello\ntapas it become hola tapas. It means say greeting is not producing the same output for the same\ninput. Right. No. Because it is depending on something and that something is called\nside effect. What is a side effect? The side effect is nothing but a variable which is\noutside of the scope of say greeting function and say greeting cannot control this particular\nvariable. Any anyone can change which can create a side effect such that this particular\nfunction is no more appear function. It is no more returning the same output for the\nsame input. So this is the difference between pure versus impure function. Can you write\nall the functions as pure function in your application may not be you may not be able\nto write you know all the functions as a pure functions because there will be side effects\nyou need things like that you have to make network call you have to probably write something\non the console log everything is side effect. But as much as possible if you can make certain\nthings as pure you have more more predictability for those cases. So look out for this thing.\nAgain if you want to get deeper to pure function you want to learn like the real life use case\nof pure function where exactly we use where can we make use of it. I have created an extensive\nvideo for pure function. Take a look at it so that you can learn and practice it much\nmore. All right. So I hope now you got the basic fundamental understanding of a pure\nand impure function. All right friends. So let's learn IFE. What is IFE. It's an abbreviation\nof the term immediately invoked function expressions I for immediately then I for invoked then\nif for function if or expression immediately invoked function expression what does it mean.\nIt means it's a function expression that's where the code inside the function gets executed\nimmediately after it's been defined. Now let's take a function for example function X is\nthe function right which is having a name X. Now if I have to execute this function\nat a later point of time whenever I want in my code what I'll do I'll just use this name\nwith the parenthesis and execute this function. OK that's great. Now the only reason why this\nname exists the X for this function is because I can use this name to execute this function\nat a later point of time. Maybe wherever I have defined this function after two hundred\nlines after that based on certain logic I am executing I'm calling I'm invoking this\nfunction. All right. But IFE says the use of IFE is to execute the function immediately\nafter it's been defined. So if I have to do that I don't need the name of the function\nbecause the moment I define right after defining the function I want to execute it. So I don't\nneed a name. So let's start with something which doesn't have a name. I did function\nX before I don't give any X now rather I have created something like this. But if I try\nto run this it's going to give me a problem saying that function statement require a function\nname. OK. So now I cannot create an anonymous function like this and let's just keep it\nas it is because it's require a function name. OK. Now let me introduce an operator called\ngroup operator which is nothing but a bunch of parenthesis. Now if I put this anonymous\nfunction the function without a name inside this group you know operator what happened\nif I just give an enter it actually gives me the string representation of this particular\nfunction itself. The string representation of this function itself. Correct. Without any\nname but string representation. In previous chapters we have seen whenever we get a string\nrepresentation of this function itself it means it's a function. So it means I can actually\ngive the parenthesis after that to execute it. So it means if I take this guy and just\nput a parenthesis around this it means it will be executed. Yeah. So I have got a proper\nfunction that's got executed. So this is what is IIFE. So now let me write a few code inside\nthis so that you know that it gets executed. So console dot log IIFP. If I just try to\nexecute this you see that IIFE got printed. So the function when I am defining at the\nsame time I am also executing this function that is what is IIFE that is what is immediately\ninvoke function expressions. Now if you ask why does it exist there are a few reason why\nit exists. Before ES6 I mean before we had like late const all this better way of managing\naccessibility of a variable like where it where what can be accessed where where things\ncannot get polluted where you have you know before ES6 where you had only var like the\nchance of your global variable gets polluted you had no other option that using IIFE to\nprotect them. OK. Also another reason is like a very normal reason is like when you create\na function with a function name it means the function name unless it is a like nested function\nor inner function the function name basically exists in the global context and the globally\nit is not inside any other function. So it means there are chances that somebody else\nmight be using the similar function name somewhere else might there is a chance of kind or a\nvariable name with the same name as the function name and the chance of getting it polluted.\nSo for that not to happen the IIFE can be used. So IIFE can be used for various different\nuse cases but the concept of IIFE is this that whenever you actually define the function\nimmediately after that you want to execute it. Only in this case you use the syntax and\nuse that IIFE. I hope the syntax breakdown also makes sense to you because it doesn't\nneed a name. So we started with an anonymous function then we actually used a group operator\naround that so that we get a function definition and then the last parenthesis basically a\npair of parenthesis used always to call or the invoke the function we use it along with\nit and we got an IIFE result then and there. I hope it was useful. Thanks for watching.\nSo we are going to understand call stack but before understanding call stack we have to\nunderstand function executions very well. OK. So first we'll understand what call stack\nis and also we'll understand what is function execution so that you get a complete clear\npicture about it. The element that gets inside the stack first it comes out last. Right.\nSo here consider there are three elements like F1 F2 F3. They went in like first F1\nthen F2 then F3 but when it had to come out the F3 come out first then F2 and then F1.\nThat's how the stack stack works. Now instead of normal variable if a function gets inside\na stack then it will be like similar way like first F1 F2 F3 gets in and then F3 F2 F1 it\ncomes out in this sequence. So when a function gets executed there is a stack that JavaScript\nengine maintains. OK. And in that stack it defines like how the execution of this particular\nfunction takes place. Whenever JavaScript interpreter go line by line and encounter\na function call or a function invocation it puts that function inside a stack executed\nand once the execution is over it takes it out from the stack. The reason for doing this\nthere is a proper sequence of how the functions are getting executed can be maintained through\nthe stack data structure. We are going to see that with example. All right. So the first\nexample that we are going to take there are three functions F1 F2 F3 you are able to see\non the screen. Each of this function have bunch of code that can be executed whenever\nwe are invoking or calling this function. We are calling these functions first F1 first\nthen F2 then F3. Right side we have a function execution stack or call stack. So call stack\nand function execution stack are the same. What we're going to see like when these functions\nare getting executed like first F1 gets called what happened to call stack then F2 what happened\nto call stack then F3 what happens to call stack. That's what we want to learn. OK. So\nplease pay an attention to this call stack and also how the code is getting executed.\nThe first thing first F1 F1 gets executed F1 gets inside the call stack or the function\nexecution stack inside F1 bunch of code. OK all done done done getting executed. There\nis no function inside it. So nothing else to put at this point of time inside the stack.\nThen F1 execution is over. Take out F1 from it. Next F2 gets executed. Put F2 similarly\nover there. There is no function inside it but execute all the code. Execute F2 take\nit out. Then goes to F3. Again put F3 inside the stack. Execution is done. There is no\nfunction bunch of code. Get it get it executed. It's out. It's very simple F1 F2 F3 has got\nexecuted. Now let's take a little bit complex scenario with this code. So what is happening\nhere you have F1 your bunch of code. There is no function in it. Then you have F2 a bunch\nof code but there is a function F1 which you have defined before we are invoking over here.\nYou remember a function can have another function inside it. A function can invoke another function\ninside it. Yes. This is an example. So F2 basically invoke F1 or call F1 inside it along\nwith a bunch of code. F3 there is no other code other than it is executing F2. It's like\na chain. Right. So any invoke F3 it is actually invoking F2. F2 executing a bunch of code\nand invoking F1. F1 executing a bunch of code but no function invocation inside F1. Now\nhow this can be depicted into call stack or the function execution stack. That's what\nyou're going to see. So again pay attention to the right side. First what happened when\nF3 executes. When F3 executes it finds F2. But before that F3 has to go inside the call\nstack because of function has to go inside call stack to get executed. So now F3 get\nexecuted it finds F2. Oh yeah. F2 another function. So before I take out F3 out of it\nbecause F3 will be taken out only when F3 is complete execution is over. But it's not\nover now the cursor is at F2. So it has to put F2 inside. F2 came inside. The F2's execution\ngets started but F3 is still in the call stack. So F2's execution a bunch of code is executed\nthis line get executed this line get executed. Oh now it encountered F1 which is also a function.\nIt's time to put it in the call stack. The F1 got into the call stack. Now if you see\nin the call stack or the function execution stack you have F1 F2 F3. But in the reverse\norder of how they have got entered right. Now we are the F1. F1 a bunch of line of code\nare there. Let's execute them one by one. But there is no function. So nothing else\nto put into the call stack. But execution when it is over for F1 we have to take it\nout from the call stack F1 is over. Now our cursor is over here. So F1's execution is\nover. That means F2's execution is also now over take out F2. So cursor is over here.\nF2's execution is over. The next line there is no more code. That means F3 time to take\nit out. Isn't that awesome. So this is exactly what function execution stack or call stack.\nThat's how it works. That's how JavaScript engine maintains at what sequence your function\nshould be executed. I hope it is very clear to you right now. Now this particular concept\nis very very important if you want to learn JavaScript asynchronous programming deeply.\nI have a complete series created for JavaScript asynchronous programming. If you were interested\ngo ahead and take that series. I'm sure that you will be able to master that concept very\nvery quickly. All right. Thank you for watching. Hello friends. Let's talk about recursion.\nWhat is recursion. Recursion means a function that refer or call itself. OK. What does it\nmean. Let's create a function. Let's say function foo. And inside that we create we do we OK\nfunction foo. Inside that we do a console dot log. Let's say foo. And then we say that\na recursion is something where the function can refer or call itself. In this case we'll\ncall itself. What happened when we invoke this. So we invoke foo. OK. Are you with me.\nWhat is going to happen. Do you see what happened. The function is keep calling keep calling keep\ncalling keep calling and after some point of time is going to say maximum call stack\nsize exceeds. So if you know about function call stack now it means that foo is going\nto put itself multiple times into the call stack call stack call stack multiple times\nand once will happen the call stack has a max size defined when the max size limit the\nthreshold limit reached is going to give the error call maximum call stack call stack exceeds.\nThat's the error that we are getting. OK. But if you're getting an error what is the\nuse of recursion. OK. We'll come to that. Just a second. But before that this is one\nway that we can actually define recursion like a function is actually invoking itself.\nLet's do another way. That's how the recursion can be done. For example const foo equals\nto function bus and then inside this what I'm going to do I can call foo like this.\nWhat will happen. So in this case I have created a function and the function is assigned to\na variable call foo. So that means foo itself is a function. So in this case foo and bus\nare almost same. So whether you call foo here or you call bus here whatever it is you are\nactually creating a recursion here because now you are referring to this particular function\neither with foo or with bus whatever name it is it's the same function. So that's the\nanother way you create the recursion. So in this case also it will just OK who is already\nexists because I use this name before. So if you actually use it it is going to actually\ncreate the recursion for you. OK. Both the cases are same. Now we saw like with recursion\nwhat was happening. It was just creating it was calling itself calling itself calling\nitself and then it hits the maximum heap size and the error out. Then why should we use\nrecursion. OK so one thing is like whenever you are using recursion you have to make sure\nthat you have something called base condition. OK. This is very important. So recursion without\na base condition is not of much use base condition means under which condition you have to stop\nthe recursion. You have to stop the recursion at some point of time because you want to\nstop the execution of that function to execute itself at some point of time so that you can\nexit it out or do something else. So that condition is called base condition. OK. So\nusually how you will be writing things in recursion in a recursion program. So you'll\nwrite writing something like function recurse function recurse if it is a base condition\nif base condition in that case you probably do something and after that you return otherwise\ncontinue to recurse. So this is how you actually do recursion. You should have a base condition\nand if there is a base condition you do something and then return from it. Otherwise you continue\nto recurse. OK. Let's write a program so that we can actually understand in a much better\nway. OK. So the program that we'll be writing is about let's say we'll be fetching water\nmultiple times. So let's call a function. Create a function called fetch water and let's\ntake a parameter called count like how many times you want to fetch the water and we say\nif the count is zero this is our base condition. OK. We have written the base condition. In\nthat case you do something. Maybe I'll do like console dot log and say like no more\nwater left. So sad. OK. Done. And then I will return. Otherwise keep fetching the water\nand I will do like count minus one and we can do a console dot log here also saying\nconsole dot log fetching water. OK. We'll see the enter code and then after fetching\nwater we'll do that line got deleted somehow. Fetch water count minus one. All right. So\nlet's read this code once more. What we are doing. We have a fetch water. We are calling\nfetch water again. Here is a recursion of course but we have a base condition also.\nThe base condition is when we'll be exiting from the recursion. Our base condition says\nwhen the count is zero then I'm saying no more water left and break this recursion but\nuntil count is zero I'm just recursing it just fetching the water. Correct. So now if\nI say fetch water five times what will happen. It will go count is five is equals to zero\nno it won't go inside that base condition doesn't meet. Fetch the water become count\nfour. So count four means again call the same function with count four. So count four comes\nhere is four is equals to zero no again base condition doesn't meet. Again fetch the water.\nNow call the same fetch water with four minus one that is three. Keep doing this until count\nis zero. Once the count is zero no more water left and you exit from the recursion. Right.\nWe'll do. So fetching water fetching water fetching water fetching water fetching water\nand then no water left. So we have written a program using recursion and we also have\nthe base condition through which we exit this recursion. Right. Now the same thing you could\nhave done with for loop isn't it. The same function same functionality would you could\nhave done with for loop. So there is always some debate like whether you should be using\nrecursion versus using for loop. Wherever the for loop applicable maybe you should be\nusing for loop. But in some cases for example you want to create the factorial of a number\nfactorial means factorial of n or factorial of five means five into four into two three\ninto two into one. Right. So the if you want to do a factorial maybe the recursion is the\nright way to go because it makes the code much more readable than doing a factorial\nusing for loop. Right. So readability is one of the factor that you want to probably take\nit into account when you use recursion over for loop wherever recursion is applicable.\nSo that's all about recursion. Whenever somebody is asking about your recursion please also\nmention that you have a best condition where you can exit out from recursion. I hope it\nwas useful. It's all right friends. Everything has to come to an end. So our this crash course\nalso has to come to an end. I hope you enjoyed learning all about the functions all the things\nabout functions. Some of them at a very high level. Some of them in depth. But the purpose\nof this course was to do a crash course where we can run through all the aspects of JavaScript\nfunctions and give you an idea give you the confidence that you can learn some of these\nconcepts if you learn incrementally if you learn by connecting the dots. So we started\nwith very basic things like how to create a function and ended with recursion in between\nwe touch nested function function scope closure pure function call back all these various\naspects. But your learning should not stop here. You need to keep practicing each of\nthis concept much deep by with your hands on. And I have videos for some of this concept\nto teach much more deeper way. For example call back pure function HOF you know a lot\nof these things are having in-depth real life use case scenario videos. Please go and watch\nthem if you're interested or if you want to read it from somewhere or from some other\nYouTube channel. Please feel free to do that. But the learning should not stop here. This\ncrash course purpose was to give you a start give you the required confidence so that you\ncan now keep learning. All right. All the best. And again a simple and small request\nplease subscribe to the channel if you have not done already and hit the bell button so\nthat whenever I publish a new video you get a notification of. All right. Take care of\nyourself. I'll come back. Another video. Thank you.\n",
  "words": [
    "course",
    "learn",
    "javascript",
    "functions",
    "one",
    "foundational",
    "pillars",
    "programming",
    "understanding",
    "functions",
    "crucial",
    "every",
    "aspiring",
    "developer",
    "course",
    "provide",
    "comprehensive",
    "overview",
    "functions",
    "javascript",
    "breaking",
    "complex",
    "concepts",
    "digestible",
    "modules",
    "essentials",
    "functions",
    "indispensable",
    "diving",
    "deep",
    "terminologies",
    "scopes",
    "closures",
    "advanced",
    "patterns",
    "like",
    "higher",
    "order",
    "functions",
    "recursion",
    "video",
    "help",
    "become",
    "expert",
    "functions",
    "tapas",
    "18",
    "years",
    "coding",
    "experience",
    "passion",
    "teaching",
    "creating",
    "open",
    "source",
    "communities",
    "teacher",
    "course",
    "let",
    "get",
    "started",
    "hello",
    "friends",
    "crash",
    "course",
    "crash",
    "course",
    "javascript",
    "functions",
    "going",
    "bunch",
    "details",
    "javascript",
    "functions",
    "try",
    "understand",
    "lots",
    "code",
    "like",
    "works",
    "fundamentally",
    "one",
    "thing",
    "keep",
    "saying",
    "folks",
    "concept",
    "much",
    "much",
    "bigger",
    "syntaxes",
    "writing",
    "code",
    "want",
    "deep",
    "concept",
    "first",
    "complete",
    "syntaxes",
    "hope",
    "enjoy",
    "entire",
    "course",
    "please",
    "like",
    "share",
    "video",
    "doubts",
    "comment",
    "going",
    "respond",
    "doubts",
    "clarifications",
    "assured",
    "okay",
    "things",
    "get",
    "started",
    "take",
    "course",
    "longer",
    "video",
    "course",
    "crash",
    "course",
    "fit",
    "lot",
    "stuff",
    "within",
    "one",
    "video",
    "follow",
    "certain",
    "patterns",
    "enjoying",
    "entire",
    "journey",
    "going",
    "every",
    "topic",
    "discussing",
    "video",
    "okay",
    "first",
    "thing",
    "take",
    "breaks",
    "try",
    "consume",
    "content",
    "take",
    "adequate",
    "breaks",
    "try",
    "feel",
    "like",
    "learned",
    "seconds",
    "back",
    "second",
    "thing",
    "every",
    "logical",
    "chapter",
    "within",
    "course",
    "try",
    "understand",
    "whether",
    "completely",
    "got",
    "concept",
    "go",
    "back",
    "try",
    "relearn",
    "problem",
    "time",
    "go",
    "try",
    "relearn",
    "teaching",
    "lot",
    "exercises",
    "exercise",
    "type",
    "teaching",
    "okay",
    "first",
    "try",
    "understand",
    "teaching",
    "try",
    "completely",
    "get",
    "pause",
    "video",
    "try",
    "know",
    "quote",
    "quote",
    "part",
    "code",
    "examples",
    "already",
    "github",
    "link",
    "comment",
    "section",
    "description",
    "section",
    "video",
    "anytime",
    "pull",
    "try",
    "see",
    "like",
    "know",
    "code",
    "look",
    "like",
    "worries",
    "type",
    "code",
    "teaching",
    "wo",
    "focusing",
    "teaching",
    "rather",
    "focus",
    "learning",
    "try",
    "code",
    "go",
    "repeat",
    "come",
    "back",
    "learn",
    "everything",
    "case",
    "nothing",
    "clear",
    "feel",
    "free",
    "comment",
    "going",
    "respond",
    "without",
    "delay",
    "let",
    "us",
    "get",
    "started",
    "let",
    "quickly",
    "talk",
    "concepts",
    "covering",
    "crash",
    "course",
    "first",
    "thing",
    "talking",
    "javascript",
    "functions",
    "fundamentals",
    "function",
    "used",
    "basic",
    "level",
    "right",
    "considering",
    "beginner",
    "watch",
    "crash",
    "course",
    "able",
    "understand",
    "functions",
    "used",
    "clarifying",
    "terminologies",
    "terminologies",
    "bit",
    "confusing",
    "learn",
    "functions",
    "example",
    "functions",
    "versus",
    "methods",
    "parameters",
    "versus",
    "arguments",
    "many",
    "terminologies",
    "want",
    "clarify",
    "next",
    "want",
    "talk",
    "function",
    "declarations",
    "talking",
    "function",
    "executions",
    "get",
    "call",
    "stack",
    "talk",
    "arrow",
    "function",
    "nested",
    "function",
    "function",
    "scope",
    "talk",
    "closure",
    "talk",
    "callback",
    "functions",
    "higher",
    "order",
    "functions",
    "pure",
    "functions",
    "talk",
    "iife",
    "talk",
    "recursion",
    "lots",
    "lots",
    "lots",
    "learn",
    "lots",
    "talk",
    "told",
    "like",
    "go",
    "chapter",
    "course",
    "try",
    "understand",
    "one",
    "chapter",
    "go",
    "next",
    "one",
    "please",
    "practice",
    "chapter",
    "go",
    "next",
    "one",
    "alright",
    "take",
    "time",
    "let",
    "get",
    "started",
    "learning",
    "first",
    "one",
    "javascript",
    "functions",
    "fundamentals",
    "javascript",
    "function",
    "get",
    "let",
    "tell",
    "story",
    "story",
    "two",
    "friends",
    "one",
    "frame",
    "actually",
    "trying",
    "cook",
    "dish",
    "know",
    "recipe",
    "cook",
    "called",
    "friend",
    "sitting",
    "abroad",
    "phone",
    "try",
    "ask",
    "recipe",
    "friend",
    "end",
    "received",
    "call",
    "told",
    "recipe",
    "line",
    "line",
    "saying",
    "hey",
    "want",
    "cook",
    "dish",
    "follow",
    "recipe",
    "like",
    "put",
    "first",
    "put",
    "one",
    "cook",
    "long",
    "finally",
    "dish",
    "ready",
    "great",
    "friend",
    "cooked",
    "dish",
    "following",
    "recipe",
    "got",
    "week",
    "tried",
    "cook",
    "felt",
    "like",
    "okay",
    "let",
    "ring",
    "friend",
    "try",
    "ask",
    "recipe",
    "thing",
    "happened",
    "friend",
    "gave",
    "recipe",
    "phone",
    "followed",
    "instruction",
    "cooked",
    "favorite",
    "dish",
    "next",
    "month",
    "story",
    "remains",
    "calls",
    "friend",
    "got",
    "recipe",
    "cooked",
    "dish",
    "months",
    "went",
    "like",
    "even",
    "though",
    "best",
    "friend",
    "friend",
    "sitting",
    "abroad",
    "really",
    "got",
    "frustrated",
    "told",
    "hey",
    "telling",
    "recipe",
    "like",
    "four",
    "five",
    "months",
    "write",
    "somewhere",
    "ask",
    "perform",
    "task",
    "telling",
    "rather",
    "wherever",
    "writing",
    "probably",
    "fetch",
    "friend",
    "wrote",
    "every",
    "instruction",
    "diary",
    "next",
    "time",
    "onwards",
    "never",
    "rang",
    "friend",
    "abroad",
    "rather",
    "followed",
    "diary",
    "javascript",
    "functions",
    "little",
    "bit",
    "like",
    "saves",
    "repeating",
    "task",
    "rather",
    "put",
    "task",
    "somewhere",
    "reuse",
    "every",
    "time",
    "perform",
    "similarly",
    "friend",
    "story",
    "wanted",
    "cook",
    "dish",
    "finally",
    "actually",
    "instead",
    "giving",
    "task",
    "friend",
    "tell",
    "repeatedly",
    "fetched",
    "diary",
    "friend",
    "never",
    "perform",
    "task",
    "okay",
    "analogy",
    "mind",
    "like",
    "reducing",
    "task",
    "performing",
    "task",
    "rather",
    "create",
    "something",
    "actually",
    "reuse",
    "whenever",
    "required",
    "programming",
    "fundamental",
    "aspect",
    "functions",
    "getting",
    "graphics",
    "similar",
    "kind",
    "story",
    "putting",
    "code",
    "visual",
    "way",
    "try",
    "understand",
    "exactly",
    "function",
    "programming",
    "yellow",
    "box",
    "see",
    "screen",
    "consider",
    "program",
    "bunch",
    "lines",
    "code",
    "look",
    "little",
    "bit",
    "closely",
    "color",
    "coding",
    "bunch",
    "black",
    "lines",
    "green",
    "line",
    "bunch",
    "black",
    "lines",
    "red",
    "orange",
    "blue",
    "bunch",
    "black",
    "lines",
    "white",
    "line",
    "right",
    "try",
    "mean",
    "black",
    "lines",
    "kind",
    "code",
    "code",
    "repeated",
    "multiple",
    "times",
    "three",
    "black",
    "lines",
    "code",
    "three",
    "black",
    "lines",
    "repeated",
    "code",
    "three",
    "black",
    "lines",
    "got",
    "repeated",
    "like",
    "right",
    "repetition",
    "exist",
    "want",
    "bring",
    "concept",
    "javascript",
    "functions",
    "reduce",
    "repetition",
    "basically",
    "case",
    "know",
    "going",
    "forward",
    "first",
    "mark",
    "lines",
    "getting",
    "repeated",
    "see",
    "marked",
    "lines",
    "getting",
    "repeated",
    "next",
    "thing",
    "like",
    "make",
    "code",
    "better",
    "repeat",
    "task",
    "right",
    "lines",
    "rather",
    "kind",
    "take",
    "lines",
    "somewhere",
    "give",
    "name",
    "case",
    "name",
    "like",
    "fun",
    "like",
    "code",
    "got",
    "change",
    "way",
    "instead",
    "line",
    "going",
    "use",
    "entity",
    "one",
    "created",
    "see",
    "one",
    "number",
    "lines",
    "code",
    "reduced",
    "drastically",
    "instead",
    "repeating",
    "task",
    "code",
    "first",
    "one",
    "put",
    "code",
    "something",
    "call",
    "function",
    "given",
    "name",
    "call",
    "fun",
    "use",
    "fun",
    "code",
    "instead",
    "repeating",
    "lines",
    "every",
    "time",
    "reducing",
    "number",
    "lines",
    "code",
    "know",
    "total",
    "source",
    "code",
    "also",
    "basically",
    "reusing",
    "something",
    "think",
    "case",
    "like",
    "need",
    "best",
    "case",
    "probably",
    "let",
    "say",
    "problem",
    "three",
    "lines",
    "bug",
    "three",
    "lines",
    "previous",
    "case",
    "bug",
    "fix",
    "bug",
    "fix",
    "issue",
    "fix",
    "issue",
    "least",
    "three",
    "times",
    "fix",
    "first",
    "bunch",
    "line",
    "second",
    "bunch",
    "lines",
    "third",
    "bunch",
    "lines",
    "put",
    "thing",
    "function",
    "single",
    "place",
    "reusing",
    "name",
    "multiple",
    "different",
    "places",
    "fix",
    "bug",
    "fix",
    "one",
    "place",
    "inside",
    "function",
    "body",
    "inside",
    "function",
    "rest",
    "work",
    "functions",
    "bunch",
    "blocks",
    "keep",
    "together",
    "perform",
    "something",
    "otherwise",
    "repeated",
    "code",
    "function",
    "ideally",
    "name",
    "without",
    "name",
    "also",
    "cases",
    "function",
    "name",
    "call",
    "function",
    "name",
    "every",
    "human",
    "name",
    "purpose",
    "name",
    "like",
    "called",
    "name",
    "someone",
    "call",
    "us",
    "name",
    "respond",
    "say",
    "hey",
    "person",
    "similarly",
    "function",
    "call",
    "function",
    "name",
    "function",
    "say",
    "like",
    "hey",
    "inside",
    "bunch",
    "code",
    "go",
    "ahead",
    "execute",
    "code",
    "okay",
    "beauty",
    "javascript",
    "function",
    "hope",
    "understood",
    "know",
    "graphics",
    "please",
    "keep",
    "brain",
    "know",
    "rest",
    "crash",
    "course",
    "going",
    "use",
    "terminology",
    "know",
    "better",
    "understanding",
    "programming",
    "times",
    "terminologies",
    "much",
    "harder",
    "programming",
    "developer",
    "gets",
    "stuck",
    "terminologies",
    "feel",
    "discouraged",
    "learning",
    "particular",
    "programming",
    "language",
    "happens",
    "learning",
    "programming",
    "language",
    "aspect",
    "programming",
    "language",
    "make",
    "sure",
    "understand",
    "certain",
    "terminologies",
    "well",
    "learning",
    "javascript",
    "functions",
    "terminologies",
    "also",
    "need",
    "know",
    "differentiate",
    "well",
    "terminologies",
    "functions",
    "methods",
    "differences",
    "going",
    "talk",
    "declaration",
    "definitions",
    "difference",
    "difference",
    "arguments",
    "parameters",
    "talking",
    "well",
    "callback",
    "higher",
    "order",
    "functions",
    "get",
    "confused",
    "often",
    "two",
    "talking",
    "also",
    "deep",
    "go",
    "course",
    "terminologies",
    "keep",
    "mind",
    "like",
    "talking",
    "make",
    "sure",
    "head",
    "terminologies",
    "differences",
    "similarities",
    "completely",
    "chalked",
    "completely",
    "cleared",
    "go",
    "back",
    "try",
    "see",
    "like",
    "explained",
    "one",
    "still",
    "questions",
    "ask",
    "comment",
    "section",
    "get",
    "back",
    "let",
    "us",
    "start",
    "creating",
    "functions",
    "try",
    "learn",
    "like",
    "create",
    "functions",
    "okay",
    "think",
    "use",
    "editor",
    "like",
    "use",
    "visual",
    "studio",
    "code",
    "editor",
    "choice",
    "coding",
    "using",
    "right",
    "using",
    "browser",
    "dev",
    "tools",
    "console",
    "tab",
    "write",
    "program",
    "execute",
    "want",
    "mechanism",
    "like",
    "writing",
    "visual",
    "studio",
    "code",
    "use",
    "live",
    "server",
    "run",
    "program",
    "welcome",
    "actually",
    "practice",
    "browser",
    "dev",
    "tool",
    "go",
    "press",
    "f12",
    "open",
    "dev",
    "tools",
    "go",
    "console",
    "tab",
    "start",
    "writing",
    "program",
    "execute",
    "practicing",
    "point",
    "time",
    "first",
    "first",
    "thing",
    "first",
    "creating",
    "function",
    "told",
    "function",
    "something",
    "going",
    "help",
    "keep",
    "bunch",
    "instruction",
    "code",
    "place",
    "reuse",
    "need",
    "declare",
    "define",
    "function",
    "first",
    "terminology",
    "bang",
    "declaration",
    "versus",
    "definition",
    "two",
    "things",
    "exactly",
    "comes",
    "function",
    "function",
    "declaration",
    "function",
    "definitions",
    "defining",
    "function",
    "kind",
    "somebody",
    "saying",
    "declaring",
    "function",
    "another",
    "person",
    "saying",
    "defining",
    "function",
    "actually",
    "talking",
    "thing",
    "nothing",
    "creating",
    "function",
    "bunch",
    "logic",
    "going",
    "first",
    "going",
    "create",
    "function",
    "use",
    "keyword",
    "call",
    "function",
    "keyword",
    "give",
    "function",
    "name",
    "told",
    "function",
    "may",
    "may",
    "name",
    "time",
    "function",
    "name",
    "call",
    "function",
    "name",
    "like",
    "human",
    "name",
    "situations",
    "function",
    "may",
    "name",
    "talk",
    "situations",
    "time",
    "course",
    "ok",
    "let",
    "first",
    "give",
    "name",
    "let",
    "give",
    "name",
    "called",
    "print",
    "give",
    "know",
    "curly",
    "braces",
    "close",
    "curly",
    "braces",
    "declared",
    "defined",
    "function",
    "ok",
    "right",
    "function",
    "keyword",
    "name",
    "bunch",
    "parentheses",
    "curly",
    "braces",
    "open",
    "curly",
    "braces",
    "end",
    "inside",
    "curly",
    "braces",
    "going",
    "write",
    "every",
    "logic",
    "want",
    "function",
    "reuse",
    "logic",
    "anywhere",
    "want",
    "example",
    "particular",
    "function",
    "may",
    "log",
    "certain",
    "thing",
    "console",
    "console",
    "dot",
    "log",
    "console",
    "dot",
    "log",
    "console",
    "like",
    "know",
    "something",
    "already",
    "javascript",
    "particular",
    "debugger",
    "use",
    "coding",
    "purpose",
    "debugging",
    "purpose",
    "console",
    "varieties",
    "methods",
    "one",
    "method",
    "log",
    "log",
    "something",
    "console",
    "know",
    "actually",
    "read",
    "debugging",
    "purpose",
    "use",
    "ok",
    "let",
    "us",
    "something",
    "like",
    "printing",
    "something",
    "like",
    "ok",
    "created",
    "function",
    "function",
    "keyword",
    "name",
    "called",
    "print",
    "instruction",
    "function",
    "log",
    "want",
    "print",
    "console",
    "log",
    "says",
    "printing",
    "function",
    "definition",
    "function",
    "declaration",
    "declared",
    "function",
    "name",
    "next",
    "thing",
    "beautifully",
    "calling",
    "function",
    "call",
    "function",
    "type",
    "name",
    "function",
    "know",
    "print",
    "autocomplete",
    "already",
    "call",
    "give",
    "parenthesis",
    "otherwise",
    "printing",
    "particular",
    "function",
    "name",
    "function",
    "going",
    "print",
    "complete",
    "body",
    "print",
    "name",
    "going",
    "give",
    "string",
    "version",
    "entire",
    "function",
    "definition",
    "declaration",
    "done",
    "execute",
    "call",
    "specifically",
    "give",
    "parenthesis",
    "must",
    "give",
    "parenthesis",
    "press",
    "enter",
    "give",
    "output",
    "log",
    "printing",
    "exactly",
    "asked",
    "particular",
    "function",
    "function",
    "worked",
    "great",
    "function",
    "worked",
    "want",
    "something",
    "ok",
    "going",
    "introduce",
    "something",
    "called",
    "parameter",
    "okay",
    "let",
    "write",
    "function",
    "function",
    "say",
    "name",
    "print",
    "pass",
    "something",
    "call",
    "parameter",
    "get",
    "minute",
    "close",
    "function",
    "body",
    "inside",
    "going",
    "going",
    "write",
    "like",
    "console",
    "dot",
    "log",
    "param",
    "mean",
    "done",
    "okay",
    "first",
    "similarly",
    "created",
    "function",
    "function",
    "keyword",
    "function",
    "name",
    "done",
    "anything",
    "two",
    "parentheses",
    "case",
    "done",
    "something",
    "parenthesis",
    "whatever",
    "put",
    "inside",
    "parenthesis",
    "function",
    "called",
    "parameters",
    "okay",
    "whatever",
    "put",
    "inside",
    "parenthesis",
    "called",
    "parameters",
    "put",
    "many",
    "parameters",
    "wish",
    "long",
    "need",
    "programming",
    "logic",
    "passing",
    "param",
    "going",
    "know",
    "use",
    "param",
    "anywhere",
    "inside",
    "function",
    "something",
    "example",
    "print",
    "pass",
    "going",
    "print",
    "thing",
    "given",
    "means",
    "pass",
    "value",
    "function",
    "value",
    "actually",
    "get",
    "mapped",
    "parameter",
    "something",
    "use",
    "know",
    "inside",
    "function",
    "anything",
    "want",
    "thing",
    "want",
    "call",
    "terminal",
    "logic",
    "thing",
    "parameter",
    "versus",
    "argument",
    "anything",
    "function",
    "definition",
    "pass",
    "inside",
    "parenthesis",
    "parameter",
    "call",
    "function",
    "invoke",
    "function",
    "actual",
    "value",
    "passing",
    "function",
    "called",
    "argument",
    "okay",
    "difference",
    "sometime",
    "happened",
    "call",
    "also",
    "parameter",
    "passing",
    "parameter",
    "call",
    "argument",
    "passing",
    "argument",
    "case",
    "parameter",
    "something",
    "pass",
    "function",
    "declaring",
    "defining",
    "function",
    "like",
    "call",
    "invoke",
    "function",
    "actual",
    "value",
    "pass",
    "called",
    "arguments",
    "hope",
    "clear",
    "parameter",
    "versus",
    "argument",
    "okay",
    "great",
    "defined",
    "function",
    "know",
    "parameter",
    "know",
    "exactly",
    "know",
    "argument",
    "things",
    "like",
    "okay",
    "next",
    "thing",
    "defined",
    "function",
    "one",
    "way",
    "actually",
    "declare",
    "define",
    "function",
    "called",
    "using",
    "function",
    "expressions",
    "okay",
    "expression",
    "let",
    "learn",
    "let",
    "clear",
    "thing",
    "done",
    "need",
    "say",
    "const",
    "count",
    "equals",
    "200",
    "expression",
    "expression",
    "variable",
    "name",
    "called",
    "count",
    "like",
    "know",
    "defined",
    "variable",
    "saying",
    "variable",
    "constant",
    "value",
    "particular",
    "variable",
    "okay",
    "const",
    "count",
    "equals",
    "200",
    "expression",
    "exactly",
    "similarly",
    "actually",
    "define",
    "function",
    "let",
    "take",
    "print",
    "function",
    "print",
    "function",
    "print",
    "nothing",
    "function",
    "name",
    "actually",
    "put",
    "variable",
    "instead",
    "100",
    "value",
    "give",
    "function",
    "value",
    "give",
    "functions",
    "body",
    "inside",
    "function",
    "body",
    "give",
    "whatever",
    "need",
    "sorry",
    "got",
    "executed",
    "bad",
    "put",
    "give",
    "console",
    "dot",
    "log",
    "print",
    "right",
    "done",
    "const",
    "print",
    "equals",
    "function",
    "thing",
    "previously",
    "done",
    "previously",
    "done",
    "function",
    "print",
    "okay",
    "done",
    "console",
    "dot",
    "log",
    "say",
    "printing",
    "defined",
    "function",
    "defined",
    "function",
    "function",
    "expression",
    "way",
    "means",
    "name",
    "used",
    "function",
    "variable",
    "basically",
    "variable",
    "assigned",
    "nothing",
    "function",
    "assigned",
    "function",
    "means",
    "print",
    "nothing",
    "function",
    "const",
    "print",
    "equals",
    "100",
    "print",
    "nothing",
    "number",
    "value",
    "done",
    "const",
    "print",
    "equals",
    "function",
    "means",
    "print",
    "function",
    "able",
    "execute",
    "function",
    "first",
    "define",
    "okay",
    "print",
    "already",
    "declared",
    "used",
    "let",
    "use",
    "name",
    "say",
    "print",
    "okay",
    "name",
    "print",
    "execute",
    "parenthesis",
    "got",
    "print",
    "another",
    "way",
    "actually",
    "define",
    "declare",
    "function",
    "right",
    "thing",
    "print",
    "let",
    "say",
    "print",
    "let",
    "say",
    "param",
    "actually",
    "put",
    "parameter",
    "right",
    "time",
    "put",
    "two",
    "parameters",
    "coming",
    "actually",
    "done",
    "declared",
    "let",
    "say",
    "print",
    "param",
    "10",
    "20",
    "argument",
    "going",
    "print",
    "10",
    "10",
    "10",
    "hope",
    "clear",
    "know",
    "like",
    "actually",
    "define",
    "function",
    "declare",
    "function",
    "two",
    "ways",
    "done",
    "okay",
    "one",
    "expression",
    "without",
    "expression",
    "let",
    "learn",
    "return",
    "function",
    "return",
    "something",
    "using",
    "often",
    "work",
    "functions",
    "far",
    "done",
    "created",
    "function",
    "inside",
    "done",
    "console",
    "dot",
    "lock",
    "statement",
    "enough",
    "usually",
    "happened",
    "like",
    "create",
    "function",
    "let",
    "say",
    "function",
    "x",
    "something",
    "right",
    "say",
    "another",
    "function",
    "okay",
    "something",
    "functions",
    "supposed",
    "task",
    "right",
    "entire",
    "program",
    "entire",
    "application",
    "like",
    "one",
    "function",
    "multiple",
    "functions",
    "like",
    "function",
    "x",
    "whatever",
    "supposed",
    "use",
    "basically",
    "use",
    "like",
    "output",
    "value",
    "function",
    "x",
    "take",
    "variable",
    "like",
    "say",
    "let",
    "p",
    "equals",
    "basically",
    "use",
    "p",
    "somewhere",
    "inside",
    "another",
    "function",
    "anywhere",
    "else",
    "matter",
    "basically",
    "whatever",
    "value",
    "x",
    "function",
    "returns",
    "utilize",
    "value",
    "anywhere",
    "else",
    "maybe",
    "another",
    "function",
    "anywhere",
    "programming",
    "right",
    "much",
    "feasible",
    "thing",
    "thing",
    "definitely",
    "thing",
    "happen",
    "see",
    "expression",
    "let",
    "remove",
    "everything",
    "put",
    "consumption",
    "particular",
    "expression",
    "variable",
    "called",
    "piece",
    "value",
    "function",
    "value",
    "get",
    "executing",
    "function",
    "told",
    "function",
    "name",
    "along",
    "parenthesis",
    "means",
    "executing",
    "calling",
    "invoking",
    "function",
    "function",
    "name",
    "without",
    "parenthesis",
    "means",
    "string",
    "representation",
    "function",
    "definition",
    "difference",
    "keep",
    "mind",
    "case",
    "parenthesis",
    "means",
    "function",
    "execute",
    "function",
    "called",
    "function",
    "invoked",
    "within",
    "function",
    "returning",
    "value",
    "function",
    "returning",
    "value",
    "value",
    "assigned",
    "variable",
    "function",
    "return",
    "value",
    "like",
    "seen",
    "function",
    "far",
    "case",
    "simply",
    "function",
    "execution",
    "return",
    "something",
    "special",
    "called",
    "undefined",
    "okay",
    "means",
    "something",
    "defined",
    "yet",
    "something",
    "called",
    "undefined",
    "okay",
    "let",
    "us",
    "create",
    "function",
    "returns",
    "something",
    "create",
    "function",
    "say",
    "sum",
    "summation",
    "addition",
    "two",
    "things",
    "take",
    "b",
    "two",
    "parameters",
    "terminology",
    "matters",
    "like",
    "return",
    "plus",
    "b",
    "simple",
    "means",
    "function",
    "whose",
    "name",
    "sum",
    "takes",
    "two",
    "parameters",
    "b",
    "sum",
    "two",
    "parameter",
    "arithmetic",
    "operation",
    "result",
    "returns",
    "know",
    "back",
    "let",
    "execute",
    "sum",
    "takes",
    "two",
    "arguments",
    "let",
    "put",
    "two",
    "three",
    "means",
    "expecting",
    "five",
    "returning",
    "five",
    "method",
    "actually",
    "write",
    "little",
    "bit",
    "differently",
    "let",
    "write",
    "method",
    "function",
    "sum",
    "comma",
    "case",
    "return",
    "plus",
    "b",
    "instead",
    "sometime",
    "might",
    "want",
    "also",
    "like",
    "let",
    "return",
    "variable",
    "plus",
    "b",
    "return",
    "particular",
    "variable",
    "also",
    "thing",
    "know",
    "done",
    "whatever",
    "done",
    "like",
    "returning",
    "plus",
    "b",
    "directly",
    "right",
    "simple",
    "calculation",
    "returning",
    "directly",
    "shorter",
    "amount",
    "code",
    "people",
    "please",
    "follow",
    "returning",
    "returning",
    "function",
    "means",
    "everything",
    "inside",
    "function",
    "tasks",
    "logic",
    "operations",
    "end",
    "want",
    "function",
    "return",
    "value",
    "value",
    "utilized",
    "elsewhere",
    "use",
    "return",
    "statement",
    "followed",
    "want",
    "return",
    "hope",
    "clear",
    "default",
    "parameter",
    "define",
    "function",
    "know",
    "define",
    "function",
    "let",
    "define",
    "function",
    "function",
    "take",
    "okay",
    "little",
    "bit",
    "different",
    "function",
    "let",
    "say",
    "calc",
    "function",
    "takes",
    "two",
    "parameters",
    "return",
    "value",
    "value",
    "want",
    "return",
    "something",
    "like",
    "two",
    "plus",
    "okay",
    "value",
    "planning",
    "return",
    "function",
    "simple",
    "function",
    "function",
    "whose",
    "name",
    "calc",
    "takes",
    "two",
    "parameters",
    "b",
    "returns",
    "sum",
    "two",
    "parameters",
    "value",
    "multiply",
    "two",
    "return",
    "something",
    "back",
    "value",
    "back",
    "let",
    "execute",
    "let",
    "call",
    "function",
    "two",
    "comma",
    "three",
    "alright",
    "gives",
    "gives",
    "yeah",
    "course",
    "two",
    "plus",
    "three",
    "five",
    "five",
    "two",
    "similarly",
    "three",
    "three",
    "going",
    "give",
    "12",
    "three",
    "plus",
    "three",
    "six",
    "two",
    "let",
    "say",
    "someone",
    "team",
    "forgot",
    "pass",
    "second",
    "argument",
    "get",
    "get",
    "number",
    "get",
    "order",
    "number",
    "pass",
    "argument",
    "parameter",
    "function",
    "parameter",
    "value",
    "undefined",
    "told",
    "means",
    "case",
    "passing",
    "second",
    "argument",
    "value",
    "basically",
    "b",
    "undefined",
    "plus",
    "undefined",
    "three",
    "b",
    "undefined",
    "three",
    "plus",
    "undefined",
    "number",
    "course",
    "returns",
    "number",
    "situation",
    "like",
    "instead",
    "getting",
    "number",
    "might",
    "want",
    "safeguard",
    "kind",
    "default",
    "value",
    "right",
    "kind",
    "default",
    "value",
    "parameters",
    "least",
    "one",
    "fail",
    "like",
    "rather",
    "safeguard",
    "values",
    "know",
    "something",
    "liking",
    "okay",
    "going",
    "function",
    "going",
    "bring",
    "actually",
    "default",
    "zero",
    "okay",
    "default",
    "value",
    "default",
    "value",
    "parameter",
    "putting",
    "means",
    "someone",
    "passing",
    "value",
    "parameter",
    "using",
    "argument",
    "value",
    "zero",
    "used",
    "instead",
    "okay",
    "let",
    "going",
    "calc",
    "three",
    "see",
    "instead",
    "n",
    "n",
    "number",
    "actually",
    "returning",
    "value",
    "six",
    "let",
    "computation",
    "three",
    "b",
    "zero",
    "three",
    "plus",
    "zero",
    "three",
    "three",
    "two",
    "six",
    "okay",
    "default",
    "parameter",
    "value",
    "function",
    "required",
    "case",
    "safeguard",
    "unnatural",
    "value",
    "return",
    "value",
    "function",
    "like",
    "number",
    "actually",
    "override",
    "undefined",
    "value",
    "instead",
    "undefined",
    "set",
    "certain",
    "value",
    "default",
    "parameter",
    "rest",
    "parameters",
    "rest",
    "parameter",
    "rest",
    "parameter",
    "something",
    "allows",
    "function",
    "accept",
    "number",
    "arguments",
    "array",
    "number",
    "arguments",
    "okay",
    "theory",
    "one",
    "side",
    "let",
    "example",
    "let",
    "create",
    "function",
    "let",
    "say",
    "give",
    "function",
    "name",
    "give",
    "name",
    "call",
    "say",
    "collect",
    "things",
    "okay",
    "two",
    "parameters",
    "first",
    "x",
    "talking",
    "rest",
    "parameters",
    "different",
    "kind",
    "special",
    "parameters",
    "right",
    "know",
    "default",
    "parameters",
    "learning",
    "rest",
    "parameters",
    "say",
    "rest",
    "parameter",
    "allows",
    "function",
    "accept",
    "number",
    "infinite",
    "number",
    "arguments",
    "array",
    "make",
    "sure",
    "rest",
    "parameter",
    "accept",
    "infinite",
    "number",
    "arguments",
    "give",
    "special",
    "syntax",
    "syntax",
    "three",
    "dots",
    "give",
    "three",
    "dots",
    "happened",
    "like",
    "particular",
    "parameter",
    "become",
    "rest",
    "parameter",
    "two",
    "things",
    "want",
    "call",
    "function",
    "definition",
    "one",
    "rest",
    "parameter",
    "means",
    "x",
    "comma",
    "rest",
    "parameter",
    "comma",
    "rest",
    "parameter",
    "z",
    "one",
    "rest",
    "parameter",
    "rest",
    "parameter",
    "must",
    "last",
    "parameter",
    "define",
    "function",
    "two",
    "rules",
    "please",
    "keep",
    "mind",
    "repeat",
    "function",
    "definition",
    "one",
    "rest",
    "parameter",
    "rest",
    "parameter",
    "must",
    "last",
    "parameter",
    "like",
    "like",
    "know",
    "making",
    "x",
    "rest",
    "parameter",
    "normal",
    "parameter",
    "rather",
    "like",
    "course",
    "name",
    "suggests",
    "means",
    "rest",
    "rest",
    "means",
    "rest",
    "rest",
    "means",
    "whatever",
    "leftover",
    "goes",
    "end",
    "okay",
    "going",
    "going",
    "console",
    "dot",
    "log",
    "go",
    "console",
    "dot",
    "log",
    "actually",
    "print",
    "see",
    "like",
    "exactly",
    "prints",
    "defined",
    "let",
    "collect",
    "things",
    "sorry",
    "let",
    "collect",
    "things",
    "pass",
    "arguments",
    "number",
    "5",
    "6",
    "7",
    "8",
    "9",
    "okay",
    "9",
    "enough",
    "going",
    "going",
    "call",
    "collect",
    "things",
    "nine",
    "arguments",
    "pass",
    "100",
    "1000s",
    "millions",
    "time",
    "okay",
    "let",
    "test",
    "happen",
    "first",
    "argument",
    "gets",
    "mapped",
    "first",
    "parameter",
    "x",
    "value",
    "1",
    "rest",
    "2",
    "9",
    "goes",
    "rest",
    "parameter",
    "means",
    "accept",
    "2",
    "9",
    "within",
    "array",
    "okay",
    "printing",
    "see",
    "first",
    "sprints",
    "x",
    "1",
    "rest",
    "8",
    "goes",
    "inside",
    "array",
    "2",
    "9",
    "subscript",
    "array",
    "notation",
    "2",
    "9",
    "get",
    "assigned",
    "entire",
    "array",
    "get",
    "assigned",
    "parameter",
    "called",
    "rest",
    "parameter",
    "hope",
    "easy",
    "understand",
    "try",
    "practice",
    "lot",
    "rest",
    "parameter",
    "let",
    "learn",
    "arrow",
    "function",
    "fat",
    "arrow",
    "syntax",
    "alright",
    "know",
    "define",
    "function",
    "right",
    "let",
    "time",
    "let",
    "repeat",
    "one",
    "function",
    "expression",
    "const",
    "add",
    "equals",
    "function",
    "two",
    "parameters",
    "return",
    "x",
    "plus",
    "finally",
    "close",
    "particular",
    "breast",
    "works",
    "great",
    "right",
    "convert",
    "one",
    "arrow",
    "function",
    "fat",
    "arrow",
    "syntax",
    "adjustment",
    "initially",
    "arrow",
    "function",
    "fat",
    "arrow",
    "syntax",
    "looks",
    "little",
    "weird",
    "tried",
    "kind",
    "remember",
    "writing",
    "right",
    "happened",
    "like",
    "hardly",
    "write",
    "function",
    "regular",
    "definition",
    "declaration",
    "way",
    "always",
    "writing",
    "function",
    "fat",
    "arrow",
    "syntax",
    "arrow",
    "syntax",
    "okay",
    "let",
    "convert",
    "new",
    "take",
    "time",
    "get",
    "grip",
    "get",
    "grip",
    "sure",
    "going",
    "write",
    "arrow",
    "function",
    "coming",
    "usage",
    "best",
    "uses",
    "write",
    "less",
    "number",
    "code",
    "write",
    "lesser",
    "amount",
    "code",
    "framework",
    "library",
    "today",
    "modern",
    "web",
    "development",
    "think",
    "de",
    "facto",
    "normal",
    "coding",
    "syntax",
    "function",
    "using",
    "arrow",
    "function",
    "mean",
    "go",
    "traditional",
    "way",
    "declaring",
    "defining",
    "function",
    "declare",
    "different",
    "functions",
    "using",
    "expressions",
    "like",
    "one",
    "see",
    "screen",
    "always",
    "go",
    "use",
    "arrow",
    "function",
    "use",
    "fat",
    "arrow",
    "syntax",
    "like",
    "know",
    "much",
    "modern",
    "much",
    "less",
    "code",
    "course",
    "one",
    "thing",
    "wo",
    "covering",
    "crash",
    "course",
    "following",
    "one",
    "relationship",
    "keyword",
    "arrow",
    "function",
    "arrow",
    "functions",
    "binding",
    "keyword",
    "another",
    "special",
    "case",
    "comes",
    "covering",
    "video",
    "keyword",
    "video",
    "making",
    "next",
    "okay",
    "let",
    "focus",
    "convert",
    "one",
    "arrow",
    "function",
    "okay",
    "convert",
    "one",
    "simple",
    "thing",
    "one",
    "going",
    "remove",
    "function",
    "keyword",
    "need",
    "function",
    "keyword",
    "make",
    "arrow",
    "function",
    "next",
    "talking",
    "arrow",
    "function",
    "need",
    "arrow",
    "arrow",
    "combination",
    "equals",
    "key",
    "get",
    "done",
    "greater",
    "equals",
    "greater",
    "key",
    "without",
    "space",
    "side",
    "side",
    "actually",
    "arrow",
    "like",
    "syntax",
    "making",
    "arrow",
    "function",
    "arrow",
    "function",
    "okay",
    "const",
    "add",
    "parameter",
    "taking",
    "happening",
    "basically",
    "arrow",
    "definition",
    "function",
    "arrow",
    "function",
    "using",
    "function",
    "keyword",
    "let",
    "make",
    "sure",
    "runs",
    "comma",
    "three",
    "runs",
    "five",
    "okay",
    "good",
    "one",
    "thing",
    "arrow",
    "function",
    "body",
    "arrow",
    "functions",
    "declaration",
    "one",
    "statement",
    "one",
    "line",
    "one",
    "returning",
    "something",
    "even",
    "give",
    "know",
    "curly",
    "braces",
    "one",
    "well",
    "define",
    "like",
    "need",
    "get",
    "rid",
    "get",
    "rid",
    "syntax",
    "compared",
    "one",
    "know",
    "function",
    "keyword",
    "much",
    "much",
    "simpler",
    "syntax",
    "like",
    "way",
    "way",
    "easy",
    "something",
    "like",
    "know",
    "dependency",
    "one",
    "parameter",
    "give",
    "parenthesis",
    "actually",
    "things",
    "like",
    "know",
    "one",
    "line",
    "stuff",
    "much",
    "much",
    "simpler",
    "reason",
    "arrow",
    "function",
    "well",
    "depreciated",
    "well",
    "appreciated",
    "developer",
    "community",
    "well",
    "received",
    "developer",
    "community",
    "writing",
    "less",
    "syntax",
    "less",
    "code",
    "modern",
    "web",
    "development",
    "know",
    "area",
    "function",
    "used",
    "heavily",
    "please",
    "practice",
    "writing",
    "arrow",
    "function",
    "hope",
    "keep",
    "writing",
    "arrow",
    "function",
    "code",
    "writing",
    "function",
    "traditional",
    "way",
    "right",
    "nested",
    "function",
    "nesting",
    "means",
    "know",
    "create",
    "function",
    "let",
    "say",
    "create",
    "function",
    "called",
    "outer",
    "function",
    "body",
    "certain",
    "instruction",
    "like",
    "function",
    "supposed",
    "maybe",
    "case",
    "function",
    "supposed",
    "print",
    "something",
    "called",
    "outer",
    "log",
    "javascript",
    "allows",
    "create",
    "function",
    "define",
    "function",
    "within",
    "within",
    "another",
    "function",
    "okay",
    "might",
    "sound",
    "little",
    "bit",
    "strange",
    "new",
    "powerful",
    "feature",
    "first",
    "basic",
    "thing",
    "towards",
    "understanding",
    "concept",
    "closure",
    "concept",
    "closure",
    "functions",
    "javascript",
    "function",
    "equals",
    "understanding",
    "nested",
    "function",
    "plus",
    "function",
    "scope",
    "want",
    "understand",
    "closure",
    "deeply",
    "want",
    "attention",
    "first",
    "understand",
    "nested",
    "function",
    "work",
    "next",
    "talking",
    "function",
    "scope",
    "talking",
    "closure",
    "everything",
    "clear",
    "straightforward",
    "right",
    "nested",
    "function",
    "function",
    "within",
    "function",
    "means",
    "create",
    "another",
    "function",
    "give",
    "name",
    "maybe",
    "simplicity",
    "giving",
    "inner",
    "give",
    "defined",
    "function",
    "using",
    "outer",
    "function",
    "function",
    "called",
    "nested",
    "function",
    "nested",
    "function",
    "defined",
    "outside",
    "know",
    "inside",
    "outer",
    "function",
    "call",
    "one",
    "inside",
    "outer",
    "function",
    "okay",
    "like",
    "right",
    "defined",
    "way",
    "call",
    "outer",
    "function",
    "happen",
    "outer",
    "function",
    "invoked",
    "print",
    "see",
    "inner",
    "function",
    "defined",
    "definition",
    "happened",
    "invoke",
    "inner",
    "function",
    "also",
    "output",
    "outer",
    "okay",
    "output",
    "outer",
    "inner",
    "first",
    "print",
    "log",
    "outer",
    "definition",
    "happened",
    "inner",
    "get",
    "executed",
    "inner",
    "actually",
    "gets",
    "printed",
    "nesting",
    "level",
    "javascript",
    "functions",
    "however",
    "wo",
    "see",
    "practice",
    "know",
    "much",
    "level",
    "nesting",
    "definitely",
    "see",
    "go",
    "back",
    "see",
    "code",
    "various",
    "javascript",
    "code",
    "definitely",
    "see",
    "level",
    "nesting",
    "level",
    "defining",
    "one",
    "function",
    "another",
    "inside",
    "another",
    "function",
    "happening",
    "powerful",
    "feature",
    "able",
    "see",
    "moment",
    "seen",
    "nested",
    "function",
    "stepping",
    "understanding",
    "function",
    "scope",
    "okay",
    "two",
    "bit",
    "interrelated",
    "understand",
    "concept",
    "nested",
    "function",
    "define",
    "function",
    "within",
    "another",
    "function",
    "function",
    "scope",
    "important",
    "understand",
    "access",
    "okay",
    "certain",
    "generic",
    "rules",
    "understand",
    "rules",
    "thought",
    "graphical",
    "picture",
    "much",
    "important",
    "please",
    "pay",
    "attention",
    "graphic",
    "let",
    "say",
    "javascript",
    "file",
    "know",
    "function",
    "defined",
    "inside",
    "function",
    "running",
    "globally",
    "means",
    "function",
    "inside",
    "function",
    "blue",
    "one",
    "function",
    "particular",
    "function",
    "inside",
    "function",
    "okay",
    "function",
    "defined",
    "globally",
    "happened",
    "actually",
    "two",
    "rules",
    "two",
    "primary",
    "rules",
    "keep",
    "mind",
    "two",
    "rules",
    "important",
    "understand",
    "want",
    "understand",
    "closure",
    "okay",
    "first",
    "rule",
    "variable",
    "defined",
    "inside",
    "function",
    "variable",
    "defined",
    "inside",
    "function",
    "accessed",
    "anywhere",
    "outside",
    "function",
    "okay",
    "variable",
    "one",
    "defined",
    "inside",
    "function",
    "accessed",
    "anywhere",
    "outside",
    "function",
    "okay",
    "anything",
    "defined",
    "blue",
    "box",
    "accessed",
    "outside",
    "blue",
    "box",
    "understood",
    "first",
    "principle",
    "okay",
    "variable",
    "defined",
    "inside",
    "function",
    "accessed",
    "anywhere",
    "outside",
    "function",
    "second",
    "principle",
    "opposite",
    "function",
    "access",
    "variables",
    "inside",
    "scope",
    "defined",
    "function",
    "access",
    "variable",
    "inside",
    "scope",
    "defined",
    "means",
    "blue",
    "function",
    "access",
    "variables",
    "defined",
    "know",
    "scope",
    "function",
    "defined",
    "global",
    "scope",
    "inside",
    "global",
    "scope",
    "defining",
    "variable",
    "able",
    "access",
    "function",
    "reverse",
    "true",
    "outside",
    "access",
    "thing",
    "inside",
    "understood",
    "rule",
    "let",
    "repeat",
    "rule",
    "important",
    "us",
    "understand",
    "closure",
    "variables",
    "defined",
    "inside",
    "function",
    "accessed",
    "anywhere",
    "outside",
    "function",
    "first",
    "rule",
    "second",
    "function",
    "access",
    "variables",
    "inside",
    "scope",
    "defined",
    "blue",
    "box",
    "defined",
    "global",
    "scope",
    "global",
    "scope",
    "variables",
    "blue",
    "box",
    "blue",
    "function",
    "able",
    "access",
    "great",
    "learned",
    "nested",
    "function",
    "replace",
    "global",
    "function",
    "function",
    "one",
    "nested",
    "function",
    "okay",
    "inner",
    "function",
    "global",
    "outer",
    "function",
    "function",
    "inner",
    "function",
    "case",
    "also",
    "formula",
    "remains",
    "rule",
    "applicable",
    "also",
    "means",
    "outer",
    "function",
    "access",
    "anything",
    "inner",
    "function",
    "inner",
    "function",
    "defined",
    "outer",
    "function",
    "means",
    "inner",
    "function",
    "able",
    "access",
    "anything",
    "defined",
    "outer",
    "function",
    "inner",
    "function",
    "defined",
    "outer",
    "function",
    "scope",
    "simple",
    "right",
    "goes",
    "keep",
    "going",
    "nesting",
    "like",
    "another",
    "function",
    "inside",
    "another",
    "function",
    "inside",
    "rule",
    "applicable",
    "rule",
    "applied",
    "works",
    "keep",
    "thing",
    "mind",
    "going",
    "see",
    "code",
    "example",
    "okay",
    "seeing",
    "code",
    "example",
    "really",
    "remember",
    "rule",
    "variable",
    "defined",
    "inside",
    "function",
    "access",
    "anywhere",
    "outside",
    "function",
    "know",
    "outside",
    "function",
    "function",
    "access",
    "variables",
    "inside",
    "scope",
    "defined",
    "arrows",
    "things",
    "keep",
    "mind",
    "think",
    "things",
    "clear",
    "okay",
    "let",
    "move",
    "try",
    "see",
    "like",
    "things",
    "works",
    "code",
    "wise",
    "coding",
    "based",
    "rules",
    "learned",
    "far",
    "going",
    "write",
    "code",
    "understand",
    "thing",
    "clearly",
    "right",
    "let",
    "create",
    "function",
    "let",
    "create",
    "function",
    "called",
    "something",
    "okay",
    "function",
    "basically",
    "let",
    "create",
    "variables",
    "inside",
    "let",
    "let",
    "x",
    "equals",
    "10",
    "const",
    "equals",
    "let",
    "const",
    "okay",
    "let",
    "get",
    "var",
    "z",
    "equals",
    "okay",
    "simply",
    "console",
    "dot",
    "log",
    "x",
    "comma",
    "comma",
    "okay",
    "know",
    "something",
    "call",
    "function",
    "know",
    "output",
    "10",
    "2030",
    "straightforward",
    "things",
    "created",
    "okay",
    "rule",
    "number",
    "one",
    "comes",
    "picture",
    "rule",
    "number",
    "one",
    "variable",
    "defined",
    "inside",
    "function",
    "accessed",
    "outside",
    "right",
    "means",
    "defined",
    "let",
    "x",
    "const",
    "var",
    "z",
    "inside",
    "something",
    "function",
    "executed",
    "something",
    "executed",
    "console",
    "dot",
    "log",
    "x",
    "try",
    "take",
    "console",
    "dot",
    "log",
    "try",
    "execute",
    "outside",
    "going",
    "happen",
    "see",
    "says",
    "x",
    "defined",
    "okay",
    "x",
    "defined",
    "maybe",
    "x",
    "late",
    "able",
    "define",
    "also",
    "cause",
    "able",
    "var",
    "even",
    "var",
    "defined",
    "within",
    "function",
    "access",
    "variable",
    "outside",
    "scope",
    "outside",
    "function",
    "access",
    "first",
    "principle",
    "learned",
    "right",
    "second",
    "principle",
    "second",
    "principle",
    "remember",
    "second",
    "principle",
    "function",
    "basically",
    "access",
    "anything",
    "everything",
    "scope",
    "basically",
    "scope",
    "defined",
    "okay",
    "let",
    "see",
    "second",
    "rule",
    "defining",
    "var",
    "x",
    "equals",
    "10",
    "const",
    "equals",
    "20",
    "let",
    "z",
    "equals",
    "okay",
    "function",
    "something",
    "console",
    "dot",
    "log",
    "x",
    "comma",
    "comma",
    "z",
    "think",
    "happen",
    "execute",
    "something",
    "happen",
    "think",
    "going",
    "give",
    "error",
    "going",
    "print",
    "going",
    "print",
    "successfully",
    "second",
    "rule",
    "say",
    "wherever",
    "function",
    "whatever",
    "scope",
    "function",
    "defined",
    "scope",
    "variables",
    "declared",
    "function",
    "access",
    "variable",
    "function",
    "declared",
    "global",
    "scope",
    "means",
    "function",
    "inside",
    "another",
    "function",
    "means",
    "global",
    "scope",
    "variables",
    "function",
    "able",
    "access",
    "variables",
    "inside",
    "function",
    "thing",
    "way",
    "around",
    "declared",
    "thing",
    "inside",
    "function",
    "tried",
    "access",
    "outside",
    "work",
    "two",
    "rules",
    "define",
    "functional",
    "scope",
    "scope",
    "talking",
    "functional",
    "scope",
    "remember",
    "accessible",
    "simple",
    "thing",
    "outer",
    "scope",
    "defined",
    "scope",
    "function",
    "defined",
    "accessible",
    "within",
    "function",
    "defined",
    "within",
    "function",
    "accessible",
    "outside",
    "even",
    "var",
    "declared",
    "defined",
    "inside",
    "function",
    "clear",
    "great",
    "ask",
    "developer",
    "complex",
    "javascript",
    "topic",
    "higher",
    "chances",
    "hear",
    "back",
    "closures",
    "closures",
    "understood",
    "fundamentally",
    "connecting",
    "dots",
    "okay",
    "connecting",
    "dots",
    "point",
    "view",
    "know",
    "connecting",
    "dots",
    "creating",
    "mind",
    "map",
    "learn",
    "complex",
    "topic",
    "created",
    "video",
    "learn",
    "javascript",
    "connecting",
    "dots",
    "please",
    "go",
    "ahead",
    "take",
    "look",
    "coming",
    "back",
    "closures",
    "learn",
    "closures",
    "connecting",
    "dots",
    "find",
    "closures",
    "understanding",
    "much",
    "easy",
    "jump",
    "closure",
    "trying",
    "understand",
    "may",
    "understand",
    "well",
    "come",
    "background",
    "nested",
    "function",
    "function",
    "scope",
    "able",
    "understand",
    "closure",
    "easily",
    "okay",
    "let",
    "get",
    "understanding",
    "closures",
    "actually",
    "feel",
    "easy",
    "take",
    "look",
    "picture",
    "screen",
    "box",
    "inside",
    "another",
    "box",
    "consider",
    "one",
    "outer",
    "function",
    "one",
    "inner",
    "function",
    "learned",
    "nested",
    "function",
    "already",
    "right",
    "let",
    "give",
    "name",
    "example",
    "give",
    "give",
    "one",
    "f",
    "one",
    "function",
    "one",
    "give",
    "name",
    "outer",
    "sure",
    "outer",
    "one",
    "course",
    "inner",
    "know",
    "define",
    "variable",
    "say",
    "variable",
    "accessible",
    "outside",
    "define",
    "variable",
    "say",
    "b",
    "variable",
    "accessible",
    "inside",
    "inner",
    "function",
    "learned",
    "nested",
    "function",
    "function",
    "scope",
    "clearly",
    "okay",
    "closure",
    "nested",
    "function",
    "closure",
    "inner",
    "function",
    "nothing",
    "closure",
    "okay",
    "simple",
    "anybody",
    "asked",
    "definition",
    "closure",
    "tell",
    "nested",
    "function",
    "closure",
    "go",
    "bookish",
    "know",
    "closure",
    "example",
    "go",
    "mdn",
    "try",
    "look",
    "closure",
    "get",
    "definition",
    "like",
    "closure",
    "function",
    "free",
    "variables",
    "together",
    "environment",
    "run",
    "variable",
    "okay",
    "means",
    "environment",
    "nothing",
    "inner",
    "function",
    "variable",
    "means",
    "every",
    "variable",
    "defined",
    "inside",
    "inner",
    "function",
    "ability",
    "able",
    "run",
    "things",
    "inner",
    "function",
    "inner",
    "function",
    "basically",
    "closure",
    "okay",
    "understanding",
    "closure",
    "let",
    "summarize",
    "inner",
    "function",
    "accessed",
    "statements",
    "outer",
    "function",
    "correct",
    "see",
    "code",
    "also",
    "inner",
    "function",
    "closure",
    "means",
    "inner",
    "function",
    "use",
    "variables",
    "arguments",
    "everything",
    "outer",
    "function",
    "outer",
    "function",
    "use",
    "arguments",
    "variable",
    "inner",
    "function",
    "one",
    "understand",
    "like",
    "closure",
    "closure",
    "nothing",
    "nested",
    "function",
    "provides",
    "environment",
    "know",
    "outer",
    "world",
    "nested",
    "function",
    "leave",
    "longer",
    "nested",
    "function",
    "leave",
    "longer",
    "execution",
    "actually",
    "perform",
    "required",
    "operation",
    "right",
    "let",
    "write",
    "function",
    "give",
    "team",
    "outer",
    "let",
    "take",
    "parameter",
    "one",
    "outer",
    "function",
    "let",
    "take",
    "another",
    "function",
    "nested",
    "function",
    "like",
    "inner",
    "also",
    "take",
    "parameter",
    "beauty",
    "inner",
    "function",
    "access",
    "outer",
    "functions",
    "variable",
    "argument",
    "return",
    "x",
    "plus",
    "correct",
    "inner",
    "function",
    "access",
    "outer",
    "functions",
    "argument",
    "variable",
    "declared",
    "inside",
    "outer",
    "function",
    "return",
    "x",
    "plus",
    "pretty",
    "well",
    "okay",
    "finally",
    "return",
    "inner",
    "okay",
    "returning",
    "inner",
    "function",
    "well",
    "okay",
    "since",
    "inner",
    "function",
    "inner",
    "function",
    "one",
    "one",
    "forms",
    "closure",
    "closure",
    "okay",
    "basically",
    "call",
    "outer",
    "function",
    "okay",
    "specify",
    "argument",
    "leverage",
    "outer",
    "inner",
    "together",
    "advantage",
    "okay",
    "let",
    "see",
    "press",
    "enter",
    "first",
    "const",
    "outer",
    "return",
    "equals",
    "outer",
    "let",
    "give",
    "think",
    "returned",
    "interesting",
    "part",
    "return",
    "call",
    "outer",
    "function",
    "outer",
    "function",
    "return",
    "nothing",
    "function",
    "like",
    "inner",
    "function",
    "function",
    "execution",
    "call",
    "function",
    "right",
    "function",
    "nowhere",
    "picture",
    "press",
    "enter",
    "outer",
    "nowhere",
    "picture",
    "beauty",
    "beauty",
    "argument",
    "passed",
    "outer",
    "still",
    "leaves",
    "still",
    "leaves",
    "inside",
    "inner",
    "10",
    "passed",
    "10",
    "still",
    "used",
    "still",
    "leaves",
    "even",
    "outer",
    "execution",
    "outer",
    "returns",
    "inner",
    "inner",
    "actually",
    "outer",
    "return",
    "let",
    "outer",
    "return",
    "one",
    "print",
    "returns",
    "returns",
    "inner",
    "return",
    "x",
    "plus",
    "written",
    "function",
    "x",
    "nothing",
    "10",
    "passed",
    "though",
    "execution",
    "outer",
    "value",
    "passed",
    "outer",
    "still",
    "leaves",
    "within",
    "inner",
    "means",
    "means",
    "execute",
    "outer",
    "outer",
    "return",
    "oh",
    "outer",
    "return",
    "parameter",
    "set",
    "two",
    "going",
    "give",
    "output",
    "outer",
    "return",
    "nothing",
    "inner",
    "function",
    "inner",
    "function",
    "expects",
    "parameter",
    "parameter",
    "passed",
    "pass",
    "argument",
    "actually",
    "use",
    "two",
    "variable",
    "passed",
    "long",
    "back",
    "execution",
    "called",
    "closure",
    "created",
    "closure",
    "closure",
    "nothing",
    "variables",
    "environment",
    "actually",
    "execute",
    "freely",
    "mean",
    "freely",
    "means",
    "usually",
    "functions",
    "whenever",
    "function",
    "execution",
    "completely",
    "done",
    "variable",
    "actually",
    "created",
    "inside",
    "gone",
    "basically",
    "going",
    "get",
    "anymore",
    "case",
    "though",
    "outer",
    "executed",
    "long",
    "back",
    "argument",
    "parameter",
    "passed",
    "outer",
    "still",
    "leaves",
    "within",
    "inner",
    "inner",
    "closure",
    "actually",
    "utilize",
    "know",
    "later",
    "point",
    "time",
    "concept",
    "closure",
    "need",
    "understand",
    "need",
    "understand",
    "like",
    "closure",
    "really",
    "handy",
    "method",
    "closure",
    "really",
    "useful",
    "use",
    "closure",
    "various",
    "use",
    "cases",
    "one",
    "use",
    "cases",
    "seen",
    "like",
    "preserving",
    "variable",
    "passed",
    "10",
    "though",
    "function",
    "execution",
    "still",
    "10",
    "preserved",
    "preserved",
    "utilized",
    "another",
    "value",
    "compute",
    "something",
    "return",
    "right",
    "closure",
    "useful",
    "video",
    "creating",
    "focusing",
    "closure",
    "talking",
    "much",
    "real",
    "life",
    "examples",
    "use",
    "case",
    "actually",
    "build",
    "closure",
    "understand",
    "closure",
    "fundamentally",
    "right",
    "start",
    "practicing",
    "start",
    "creating",
    "kind",
    "small",
    "example",
    "outer",
    "function",
    "inner",
    "function",
    "outer",
    "inner",
    "takes",
    "argument",
    "return",
    "inner",
    "function",
    "outer",
    "function",
    "see",
    "outer",
    "execution",
    "gets",
    "value",
    "pass",
    "outer",
    "still",
    "used",
    "inside",
    "inner",
    "later",
    "point",
    "time",
    "kind",
    "thing",
    "example",
    "seeing",
    "try",
    "find",
    "example",
    "internet",
    "try",
    "cook",
    "something",
    "try",
    "practice",
    "use",
    "case",
    "oriented",
    "example",
    "like",
    "real",
    "life",
    "use",
    "case",
    "oriented",
    "example",
    "closure",
    "come",
    "dedicated",
    "video",
    "hope",
    "clarify",
    "concept",
    "recap",
    "closure",
    "understanding",
    "depending",
    "understanding",
    "nested",
    "function",
    "plus",
    "function",
    "scope",
    "know",
    "nested",
    "function",
    "function",
    "define",
    "one",
    "function",
    "within",
    "know",
    "function",
    "scope",
    "like",
    "outer",
    "function",
    "access",
    "variable",
    "inside",
    "inner",
    "function",
    "however",
    "inner",
    "function",
    "access",
    "variable",
    "argument",
    "outer",
    "function",
    "ability",
    "gives",
    "us",
    "powerful",
    "feature",
    "called",
    "closure",
    "even",
    "outer",
    "function",
    "execution",
    "persist",
    "certain",
    "values",
    "passed",
    "outer",
    "function",
    "within",
    "inner",
    "function",
    "compute",
    "later",
    "point",
    "time",
    "becomes",
    "powerful",
    "feature",
    "powerful",
    "design",
    "pattern",
    "javascript",
    "called",
    "closure",
    "hope",
    "clear",
    "learn",
    "callback",
    "functions",
    "callback",
    "okay",
    "everything",
    "name",
    "callback",
    "means",
    "call",
    "back",
    "point",
    "time",
    "let",
    "understand",
    "example",
    "javascript",
    "function",
    "first",
    "class",
    "citizen",
    "mean",
    "means",
    "create",
    "function",
    "seen",
    "function",
    "definition",
    "assign",
    "function",
    "seen",
    "like",
    "const",
    "x",
    "equals",
    "function",
    "basically",
    "assign",
    "function",
    "variable",
    "assign",
    "function",
    "return",
    "define",
    "function",
    "within",
    "another",
    "function",
    "seen",
    "nested",
    "function",
    "next",
    "thing",
    "going",
    "see",
    "like",
    "pass",
    "function",
    "parameter",
    "another",
    "function",
    "okay",
    "callback",
    "function",
    "comes",
    "picture",
    "see",
    "use",
    "cases",
    "okay",
    "first",
    "let",
    "define",
    "function",
    "called",
    "foo",
    "okay",
    "foo",
    "function",
    "foo",
    "function",
    "let",
    "assume",
    "foo",
    "function",
    "take",
    "another",
    "function",
    "parameter",
    "let",
    "pass",
    "another",
    "function",
    "function",
    "parameter",
    "called",
    "foo",
    "let",
    "call",
    "bar",
    "foo",
    "bar",
    "bus",
    "things",
    "usually",
    "use",
    "names",
    "example",
    "function",
    "takes",
    "argument",
    "nothing",
    "another",
    "function",
    "means",
    "capture",
    "bar",
    "parameter",
    "assume",
    "bar",
    "nothing",
    "another",
    "function",
    "means",
    "inside",
    "able",
    "execute",
    "function",
    "simple",
    "string",
    "could",
    "printed",
    "string",
    "concatenated",
    "something",
    "else",
    "done",
    "something",
    "screen",
    "number",
    "would",
    "done",
    "something",
    "number",
    "function",
    "simply",
    "execute",
    "function",
    "execute",
    "function",
    "know",
    "give",
    "parenthesis",
    "call",
    "function",
    "execute",
    "function",
    "particular",
    "function",
    "called",
    "callback",
    "particular",
    "function",
    "called",
    "callback",
    "come",
    "first",
    "want",
    "execute",
    "execute",
    "one",
    "defined",
    "execute",
    "know",
    "foo",
    "takes",
    "function",
    "actually",
    "pass",
    "function",
    "let",
    "something",
    "like",
    "foo",
    "takes",
    "function",
    "course",
    "told",
    "foo",
    "takes",
    "function",
    "bar",
    "function",
    "execute",
    "inside",
    "means",
    "pass",
    "function",
    "argument",
    "foo",
    "passed",
    "function",
    "guys",
    "realize",
    "one",
    "thing",
    "created",
    "function",
    "name",
    "function",
    "called",
    "anonymous",
    "function",
    "function",
    "name",
    "called",
    "anonymous",
    "function",
    "name",
    "using",
    "function",
    "instantly",
    "bother",
    "creating",
    "execute",
    "one",
    "function",
    "get",
    "passed",
    "gets",
    "executed",
    "line",
    "get",
    "executed",
    "line",
    "get",
    "executed",
    "prints",
    "bar",
    "thing",
    "instead",
    "line",
    "understand",
    "better",
    "create",
    "function",
    "name",
    "example",
    "function",
    "named",
    "instead",
    "actually",
    "say",
    "bar",
    "thing",
    "like",
    "previous",
    "function",
    "instead",
    "passing",
    "directly",
    "foo",
    "named",
    "right",
    "exactly",
    "thing",
    "whatever",
    "instead",
    "declaring",
    "function",
    "name",
    "function",
    "passing",
    "function",
    "pass",
    "function",
    "directly",
    "difference",
    "output",
    "know",
    "function",
    "take",
    "function",
    "argument",
    "actually",
    "function",
    "passed",
    "parameter",
    "using",
    "know",
    "inside",
    "later",
    "point",
    "time",
    "called",
    "callback",
    "function",
    "called",
    "callback",
    "function",
    "thing",
    "let",
    "go",
    "beginning",
    "understand",
    "called",
    "callback",
    "function",
    "defining",
    "function",
    "foo",
    "take",
    "another",
    "function",
    "bar",
    "let",
    "say",
    "condition",
    "condition",
    "night",
    "consider",
    "night",
    "boolean",
    "variable",
    "true",
    "false",
    "case",
    "call",
    "bar",
    "usually",
    "night",
    "like",
    "know",
    "bars",
    "like",
    "flourishing",
    "everywhere",
    "let",
    "say",
    "another",
    "condition",
    "drinks",
    "check",
    "online",
    "case",
    "pelling",
    "mistake",
    "check",
    "online",
    "case",
    "call",
    "bar",
    "two",
    "conditions",
    "want",
    "call",
    "particular",
    "function",
    "call",
    "bar",
    "one",
    "condition",
    "night",
    "call",
    "bar",
    "function",
    "maybe",
    "online",
    "call",
    "network",
    "call",
    "check",
    "whether",
    "drinks",
    "call",
    "bar",
    "means",
    "calling",
    "back",
    "bar",
    "based",
    "certain",
    "kind",
    "conditions",
    "happening",
    "within",
    "function",
    "case",
    "actually",
    "want",
    "call",
    "function",
    "callback",
    "function",
    "calling",
    "back",
    "based",
    "certain",
    "conditions",
    "based",
    "certain",
    "things",
    "amazingly",
    "powerful",
    "pass",
    "function",
    "another",
    "function",
    "call",
    "passed",
    "function",
    "based",
    "condition",
    "later",
    "point",
    "time",
    "called",
    "call",
    "back",
    "want",
    "understand",
    "concept",
    "much",
    "deeper",
    "example",
    "created",
    "example",
    "pizza",
    "hub",
    "pizza",
    "hub",
    "little",
    "boy",
    "story",
    "like",
    "storytelling",
    "anybody",
    "understand",
    "video",
    "already",
    "go",
    "ahead",
    "check",
    "video",
    "link",
    "video",
    "description",
    "video",
    "check",
    "find",
    "like",
    "know",
    "real",
    "life",
    "application",
    "use",
    "call",
    "back",
    "know",
    "effortlessly",
    "hope",
    "callback",
    "functions",
    "clear",
    "learn",
    "higher",
    "order",
    "function",
    "higher",
    "order",
    "function",
    "hof",
    "higher",
    "order",
    "function",
    "higher",
    "order",
    "function",
    "definition",
    "regular",
    "function",
    "normal",
    "function",
    "takes",
    "one",
    "function",
    "argument",
    "returns",
    "function",
    "value",
    "let",
    "write",
    "bit",
    "complex",
    "way",
    "one",
    "condition",
    "like",
    "takes",
    "one",
    "functions",
    "argument",
    "first",
    "thing",
    "second",
    "thing",
    "may",
    "return",
    "function",
    "necessarily",
    "conditions",
    "made",
    "higher",
    "order",
    "function",
    "condition",
    "meets",
    "actually",
    "higher",
    "order",
    "function",
    "spoke",
    "callback",
    "function",
    "right",
    "told",
    "callback",
    "function",
    "callback",
    "function",
    "function",
    "takes",
    "function",
    "argument",
    "based",
    "certain",
    "conditions",
    "something",
    "whatever",
    "function",
    "passing",
    "argument",
    "going",
    "invoke",
    "function",
    "inside",
    "first",
    "case",
    "hof",
    "higher",
    "order",
    "function",
    "taking",
    "one",
    "function",
    "argument",
    "means",
    "relationship",
    "higher",
    "order",
    "function",
    "callback",
    "function",
    "sometime",
    "interviews",
    "interviewers",
    "put",
    "tricky",
    "question",
    "hof",
    "callback",
    "hof",
    "callback",
    "exactly",
    "callback",
    "functions",
    "mandatory",
    "main",
    "function",
    "return",
    "function",
    "accept",
    "function",
    "argument",
    "something",
    "necessary",
    "return",
    "function",
    "whereas",
    "higher",
    "order",
    "function",
    "function",
    "return",
    "another",
    "function",
    "calls",
    "higher",
    "order",
    "function",
    "case",
    "also",
    "calls",
    "higher",
    "order",
    "function",
    "means",
    "taking",
    "like",
    "function",
    "let",
    "take",
    "function",
    "let",
    "give",
    "name",
    "call",
    "gate",
    "capture",
    "let",
    "take",
    "parameter",
    "called",
    "camera",
    "like",
    "higher",
    "order",
    "function",
    "camera",
    "function",
    "executing",
    "one",
    "actually",
    "call",
    "get",
    "capture",
    "call",
    "sorry",
    "call",
    "get",
    "capture",
    "pass",
    "function",
    "say",
    "function",
    "console",
    "console",
    "dot",
    "log",
    "say",
    "execute",
    "seen",
    "understood",
    "callback",
    "function",
    "part",
    "also",
    "like",
    "function",
    "returning",
    "another",
    "function",
    "also",
    "called",
    "higher",
    "order",
    "function",
    "actually",
    "like",
    "function",
    "return",
    "f",
    "n",
    "return",
    "function",
    "say",
    "console",
    "dot",
    "log",
    "returning",
    "something",
    "printing",
    "prove",
    "works",
    "going",
    "execute",
    "multiple",
    "ways",
    "execute",
    "example",
    "const",
    "say",
    "f",
    "n",
    "equals",
    "return",
    "f",
    "return",
    "f",
    "return",
    "f",
    "n",
    "return",
    "function",
    "right",
    "f",
    "n",
    "nothing",
    "function",
    "see",
    "moment",
    "typing",
    "f",
    "n",
    "giving",
    "printout",
    "running",
    "function",
    "execute",
    "one",
    "means",
    "need",
    "parenthesis",
    "execute",
    "one",
    "one",
    "way",
    "actually",
    "execute",
    "thing",
    "hope",
    "quite",
    "clear",
    "working",
    "javascript",
    "time",
    "already",
    "using",
    "higher",
    "order",
    "function",
    "know",
    "already",
    "higher",
    "order",
    "function",
    "extremely",
    "extremely",
    "useful",
    "know",
    "core",
    "reliability",
    "predictability",
    "aspects",
    "already",
    "using",
    "things",
    "called",
    "array",
    "functions",
    "like",
    "map",
    "filter",
    "reduce",
    "find",
    "method",
    "right",
    "arrays",
    "higher",
    "order",
    "functions",
    "also",
    "write",
    "code",
    "like",
    "know",
    "one",
    "take",
    "like",
    "one",
    "comma",
    "two",
    "comma",
    "three",
    "array",
    "something",
    "like",
    "filter",
    "pass",
    "function",
    "right",
    "filter",
    "condition",
    "pass",
    "using",
    "array",
    "already",
    "know",
    "actually",
    "put",
    "condition",
    "like",
    "based",
    "condition",
    "want",
    "filter",
    "one",
    "right",
    "get",
    "like",
    "element",
    "element",
    "greater",
    "two",
    "greater",
    "three",
    "know",
    "actually",
    "write",
    "conditions",
    "like",
    "based",
    "filter",
    "things",
    "example",
    "higher",
    "order",
    "function",
    "like",
    "exactly",
    "higher",
    "order",
    "function",
    "use",
    "higher",
    "want",
    "get",
    "deep",
    "look",
    "higher",
    "order",
    "function",
    "crash",
    "course",
    "getting",
    "much",
    "deep",
    "want",
    "get",
    "good",
    "deep",
    "higher",
    "order",
    "function",
    "already",
    "created",
    "video",
    "please",
    "take",
    "look",
    "sure",
    "enjoy",
    "learning",
    "higher",
    "order",
    "function",
    "try",
    "understand",
    "different",
    "use",
    "cases",
    "apart",
    "built",
    "javascript",
    "functions",
    "whenever",
    "coding",
    "cases",
    "using",
    "higher",
    "order",
    "functions",
    "please",
    "take",
    "look",
    "let",
    "see",
    "pure",
    "function",
    "javascript",
    "dealing",
    "function",
    "deal",
    "lot",
    "pure",
    "functions",
    "also",
    "deal",
    "lot",
    "impure",
    "functions",
    "definition",
    "pure",
    "function",
    "function",
    "produces",
    "output",
    "input",
    "function",
    "say",
    "greeting",
    "input",
    "name",
    "going",
    "going",
    "return",
    "greeting",
    "message",
    "return",
    "hello",
    "kind",
    "greeting",
    "message",
    "going",
    "return",
    "fair",
    "enough",
    "call",
    "say",
    "greeting",
    "pass",
    "name",
    "going",
    "return",
    "hello",
    "tapas",
    "input",
    "going",
    "return",
    "output",
    "many",
    "times",
    "going",
    "input",
    "tapas",
    "many",
    "times",
    "going",
    "return",
    "hello",
    "tapas",
    "hello",
    "youtube",
    "going",
    "return",
    "hello",
    "youtube",
    "many",
    "times",
    "going",
    "input",
    "youtube",
    "many",
    "times",
    "going",
    "output",
    "hello",
    "youtube",
    "pure",
    "function",
    "pure",
    "function",
    "pure",
    "function",
    "helps",
    "predictability",
    "means",
    "input",
    "output",
    "always",
    "predictable",
    "impure",
    "function",
    "opposite",
    "means",
    "input",
    "going",
    "create",
    "output",
    "function",
    "little",
    "bit",
    "different",
    "way",
    "example",
    "let",
    "create",
    "variable",
    "called",
    "greeting",
    "initialized",
    "hello",
    "function",
    "like",
    "function",
    "know",
    "guy",
    "copy",
    "utilize",
    "change",
    "little",
    "bit",
    "changing",
    "instead",
    "hello",
    "heartcoding",
    "hello",
    "taking",
    "greeting",
    "alright",
    "say",
    "greeting",
    "tapas",
    "give",
    "hello",
    "tapas",
    "fair",
    "enough",
    "give",
    "tapas",
    "give",
    "hello",
    "tapas",
    "fair",
    "enough",
    "change",
    "greeting",
    "variable",
    "value",
    "hello",
    "hola",
    "hello",
    "hola",
    "input",
    "tapas",
    "output",
    "become",
    "hola",
    "tapas",
    "hello",
    "tapas",
    "become",
    "hola",
    "tapas",
    "means",
    "say",
    "greeting",
    "producing",
    "output",
    "input",
    "right",
    "depending",
    "something",
    "something",
    "called",
    "side",
    "effect",
    "side",
    "effect",
    "side",
    "effect",
    "nothing",
    "variable",
    "outside",
    "scope",
    "say",
    "greeting",
    "function",
    "say",
    "greeting",
    "control",
    "particular",
    "variable",
    "anyone",
    "change",
    "create",
    "side",
    "effect",
    "particular",
    "function",
    "appear",
    "function",
    "returning",
    "output",
    "input",
    "difference",
    "pure",
    "versus",
    "impure",
    "function",
    "write",
    "functions",
    "pure",
    "function",
    "application",
    "may",
    "may",
    "able",
    "write",
    "know",
    "functions",
    "pure",
    "functions",
    "side",
    "effects",
    "need",
    "things",
    "like",
    "make",
    "network",
    "call",
    "probably",
    "write",
    "something",
    "console",
    "log",
    "everything",
    "side",
    "effect",
    "much",
    "possible",
    "make",
    "certain",
    "things",
    "pure",
    "predictability",
    "cases",
    "look",
    "thing",
    "want",
    "get",
    "deeper",
    "pure",
    "function",
    "want",
    "learn",
    "like",
    "real",
    "life",
    "use",
    "case",
    "pure",
    "function",
    "exactly",
    "use",
    "make",
    "use",
    "created",
    "extensive",
    "video",
    "pure",
    "function",
    "take",
    "look",
    "learn",
    "practice",
    "much",
    "right",
    "hope",
    "got",
    "basic",
    "fundamental",
    "understanding",
    "pure",
    "impure",
    "function",
    "right",
    "friends",
    "let",
    "learn",
    "ife",
    "ife",
    "abbreviation",
    "term",
    "immediately",
    "invoked",
    "function",
    "expressions",
    "immediately",
    "invoked",
    "function",
    "expression",
    "immediately",
    "invoked",
    "function",
    "expression",
    "mean",
    "means",
    "function",
    "expression",
    "code",
    "inside",
    "function",
    "gets",
    "executed",
    "immediately",
    "defined",
    "let",
    "take",
    "function",
    "example",
    "function",
    "x",
    "function",
    "right",
    "name",
    "execute",
    "function",
    "later",
    "point",
    "time",
    "whenever",
    "want",
    "code",
    "use",
    "name",
    "parenthesis",
    "execute",
    "function",
    "ok",
    "great",
    "reason",
    "name",
    "exists",
    "x",
    "function",
    "use",
    "name",
    "execute",
    "function",
    "later",
    "point",
    "time",
    "maybe",
    "wherever",
    "defined",
    "function",
    "two",
    "hundred",
    "lines",
    "based",
    "certain",
    "logic",
    "executing",
    "calling",
    "invoking",
    "function",
    "right",
    "ife",
    "says",
    "use",
    "ife",
    "execute",
    "function",
    "immediately",
    "defined",
    "need",
    "name",
    "function",
    "moment",
    "define",
    "right",
    "defining",
    "function",
    "want",
    "execute",
    "need",
    "name",
    "let",
    "start",
    "something",
    "name",
    "function",
    "x",
    "give",
    "x",
    "rather",
    "created",
    "something",
    "like",
    "try",
    "run",
    "going",
    "give",
    "problem",
    "saying",
    "function",
    "statement",
    "require",
    "function",
    "name",
    "create",
    "anonymous",
    "function",
    "like",
    "let",
    "keep",
    "require",
    "function",
    "name",
    "let",
    "introduce",
    "operator",
    "called",
    "group",
    "operator",
    "nothing",
    "bunch",
    "parenthesis",
    "put",
    "anonymous",
    "function",
    "function",
    "without",
    "name",
    "inside",
    "group",
    "know",
    "operator",
    "happened",
    "give",
    "enter",
    "actually",
    "gives",
    "string",
    "representation",
    "particular",
    "function",
    "string",
    "representation",
    "function",
    "correct",
    "without",
    "name",
    "string",
    "representation",
    "previous",
    "chapters",
    "seen",
    "whenever",
    "get",
    "string",
    "representation",
    "function",
    "means",
    "function",
    "means",
    "actually",
    "give",
    "parenthesis",
    "execute",
    "means",
    "take",
    "guy",
    "put",
    "parenthesis",
    "around",
    "means",
    "executed",
    "yeah",
    "got",
    "proper",
    "function",
    "got",
    "executed",
    "iife",
    "let",
    "write",
    "code",
    "inside",
    "know",
    "gets",
    "executed",
    "console",
    "dot",
    "log",
    "iifp",
    "try",
    "execute",
    "see",
    "iife",
    "got",
    "printed",
    "function",
    "defining",
    "time",
    "also",
    "executing",
    "function",
    "iife",
    "immediately",
    "invoke",
    "function",
    "expressions",
    "ask",
    "exist",
    "reason",
    "exists",
    "es6",
    "mean",
    "like",
    "late",
    "const",
    "better",
    "way",
    "managing",
    "accessibility",
    "variable",
    "like",
    "accessed",
    "things",
    "get",
    "polluted",
    "know",
    "es6",
    "var",
    "like",
    "chance",
    "global",
    "variable",
    "gets",
    "polluted",
    "option",
    "using",
    "iife",
    "protect",
    "also",
    "another",
    "reason",
    "like",
    "normal",
    "reason",
    "like",
    "create",
    "function",
    "function",
    "name",
    "means",
    "function",
    "name",
    "unless",
    "like",
    "nested",
    "function",
    "inner",
    "function",
    "function",
    "name",
    "basically",
    "exists",
    "global",
    "context",
    "globally",
    "inside",
    "function",
    "means",
    "chances",
    "somebody",
    "else",
    "might",
    "using",
    "similar",
    "function",
    "name",
    "somewhere",
    "else",
    "might",
    "chance",
    "kind",
    "variable",
    "name",
    "name",
    "function",
    "name",
    "chance",
    "getting",
    "polluted",
    "happen",
    "iife",
    "used",
    "iife",
    "used",
    "various",
    "different",
    "use",
    "cases",
    "concept",
    "iife",
    "whenever",
    "actually",
    "define",
    "function",
    "immediately",
    "want",
    "execute",
    "case",
    "use",
    "syntax",
    "use",
    "iife",
    "hope",
    "syntax",
    "breakdown",
    "also",
    "makes",
    "sense",
    "need",
    "name",
    "started",
    "anonymous",
    "function",
    "actually",
    "used",
    "group",
    "operator",
    "around",
    "get",
    "function",
    "definition",
    "last",
    "parenthesis",
    "basically",
    "pair",
    "parenthesis",
    "used",
    "always",
    "call",
    "invoke",
    "function",
    "use",
    "along",
    "got",
    "iife",
    "result",
    "hope",
    "useful",
    "thanks",
    "watching",
    "going",
    "understand",
    "call",
    "stack",
    "understanding",
    "call",
    "stack",
    "understand",
    "function",
    "executions",
    "well",
    "first",
    "understand",
    "call",
    "stack",
    "also",
    "understand",
    "function",
    "execution",
    "get",
    "complete",
    "clear",
    "picture",
    "element",
    "gets",
    "inside",
    "stack",
    "first",
    "comes",
    "last",
    "right",
    "consider",
    "three",
    "elements",
    "like",
    "f1",
    "f2",
    "f3",
    "went",
    "like",
    "first",
    "f1",
    "f2",
    "f3",
    "come",
    "f3",
    "come",
    "first",
    "f2",
    "f1",
    "stack",
    "stack",
    "works",
    "instead",
    "normal",
    "variable",
    "function",
    "gets",
    "inside",
    "stack",
    "like",
    "similar",
    "way",
    "like",
    "first",
    "f1",
    "f2",
    "f3",
    "gets",
    "f3",
    "f2",
    "f1",
    "comes",
    "sequence",
    "function",
    "gets",
    "executed",
    "stack",
    "javascript",
    "engine",
    "maintains",
    "stack",
    "defines",
    "like",
    "execution",
    "particular",
    "function",
    "takes",
    "place",
    "whenever",
    "javascript",
    "interpreter",
    "go",
    "line",
    "line",
    "encounter",
    "function",
    "call",
    "function",
    "invocation",
    "puts",
    "function",
    "inside",
    "stack",
    "executed",
    "execution",
    "takes",
    "stack",
    "reason",
    "proper",
    "sequence",
    "functions",
    "getting",
    "executed",
    "maintained",
    "stack",
    "data",
    "structure",
    "going",
    "see",
    "example",
    "right",
    "first",
    "example",
    "going",
    "take",
    "three",
    "functions",
    "f1",
    "f2",
    "f3",
    "able",
    "see",
    "screen",
    "function",
    "bunch",
    "code",
    "executed",
    "whenever",
    "invoking",
    "calling",
    "function",
    "calling",
    "functions",
    "first",
    "f1",
    "first",
    "f2",
    "f3",
    "right",
    "side",
    "function",
    "execution",
    "stack",
    "call",
    "stack",
    "call",
    "stack",
    "function",
    "execution",
    "stack",
    "going",
    "see",
    "like",
    "functions",
    "getting",
    "executed",
    "like",
    "first",
    "f1",
    "gets",
    "called",
    "happened",
    "call",
    "stack",
    "f2",
    "happened",
    "call",
    "stack",
    "f3",
    "happens",
    "call",
    "stack",
    "want",
    "learn",
    "please",
    "pay",
    "attention",
    "call",
    "stack",
    "also",
    "code",
    "getting",
    "executed",
    "first",
    "thing",
    "first",
    "f1",
    "f1",
    "gets",
    "executed",
    "f1",
    "gets",
    "inside",
    "call",
    "stack",
    "function",
    "execution",
    "stack",
    "inside",
    "f1",
    "bunch",
    "code",
    "ok",
    "done",
    "done",
    "done",
    "getting",
    "executed",
    "function",
    "inside",
    "nothing",
    "else",
    "put",
    "point",
    "time",
    "inside",
    "stack",
    "f1",
    "execution",
    "take",
    "f1",
    "next",
    "f2",
    "gets",
    "executed",
    "put",
    "f2",
    "similarly",
    "function",
    "inside",
    "execute",
    "code",
    "execute",
    "f2",
    "take",
    "goes",
    "f3",
    "put",
    "f3",
    "inside",
    "stack",
    "execution",
    "done",
    "function",
    "bunch",
    "code",
    "get",
    "get",
    "executed",
    "simple",
    "f1",
    "f2",
    "f3",
    "got",
    "executed",
    "let",
    "take",
    "little",
    "bit",
    "complex",
    "scenario",
    "code",
    "happening",
    "f1",
    "bunch",
    "code",
    "function",
    "f2",
    "bunch",
    "code",
    "function",
    "f1",
    "defined",
    "invoking",
    "remember",
    "function",
    "another",
    "function",
    "inside",
    "function",
    "invoke",
    "another",
    "function",
    "inside",
    "yes",
    "example",
    "f2",
    "basically",
    "invoke",
    "f1",
    "call",
    "f1",
    "inside",
    "along",
    "bunch",
    "code",
    "f3",
    "code",
    "executing",
    "f2",
    "like",
    "chain",
    "right",
    "invoke",
    "f3",
    "actually",
    "invoking",
    "f2",
    "f2",
    "executing",
    "bunch",
    "code",
    "invoking",
    "f1",
    "f1",
    "executing",
    "bunch",
    "code",
    "function",
    "invocation",
    "inside",
    "f1",
    "depicted",
    "call",
    "stack",
    "function",
    "execution",
    "stack",
    "going",
    "see",
    "pay",
    "attention",
    "right",
    "side",
    "first",
    "happened",
    "f3",
    "executes",
    "f3",
    "executes",
    "finds",
    "f2",
    "f3",
    "go",
    "inside",
    "call",
    "stack",
    "function",
    "go",
    "inside",
    "call",
    "stack",
    "get",
    "executed",
    "f3",
    "get",
    "executed",
    "finds",
    "f2",
    "oh",
    "yeah",
    "f2",
    "another",
    "function",
    "take",
    "f3",
    "f3",
    "taken",
    "f3",
    "complete",
    "execution",
    "cursor",
    "f2",
    "put",
    "f2",
    "inside",
    "f2",
    "came",
    "inside",
    "f2",
    "execution",
    "gets",
    "started",
    "f3",
    "still",
    "call",
    "stack",
    "f2",
    "execution",
    "bunch",
    "code",
    "executed",
    "line",
    "get",
    "executed",
    "line",
    "get",
    "executed",
    "oh",
    "encountered",
    "f1",
    "also",
    "function",
    "time",
    "put",
    "call",
    "stack",
    "f1",
    "got",
    "call",
    "stack",
    "see",
    "call",
    "stack",
    "function",
    "execution",
    "stack",
    "f1",
    "f2",
    "f3",
    "reverse",
    "order",
    "got",
    "entered",
    "right",
    "f1",
    "f1",
    "bunch",
    "line",
    "code",
    "let",
    "execute",
    "one",
    "one",
    "function",
    "nothing",
    "else",
    "put",
    "call",
    "stack",
    "execution",
    "f1",
    "take",
    "call",
    "stack",
    "f1",
    "cursor",
    "f1",
    "execution",
    "means",
    "f2",
    "execution",
    "also",
    "take",
    "f2",
    "cursor",
    "f2",
    "execution",
    "next",
    "line",
    "code",
    "means",
    "f3",
    "time",
    "take",
    "awesome",
    "exactly",
    "function",
    "execution",
    "stack",
    "call",
    "stack",
    "works",
    "javascript",
    "engine",
    "maintains",
    "sequence",
    "function",
    "executed",
    "hope",
    "clear",
    "right",
    "particular",
    "concept",
    "important",
    "want",
    "learn",
    "javascript",
    "asynchronous",
    "programming",
    "deeply",
    "complete",
    "series",
    "created",
    "javascript",
    "asynchronous",
    "programming",
    "interested",
    "go",
    "ahead",
    "take",
    "series",
    "sure",
    "able",
    "master",
    "concept",
    "quickly",
    "right",
    "thank",
    "watching",
    "hello",
    "friends",
    "let",
    "talk",
    "recursion",
    "recursion",
    "recursion",
    "means",
    "function",
    "refer",
    "call",
    "mean",
    "let",
    "create",
    "function",
    "let",
    "say",
    "function",
    "foo",
    "inside",
    "create",
    "ok",
    "function",
    "foo",
    "inside",
    "console",
    "dot",
    "log",
    "let",
    "say",
    "foo",
    "say",
    "recursion",
    "something",
    "function",
    "refer",
    "call",
    "case",
    "call",
    "happened",
    "invoke",
    "invoke",
    "foo",
    "going",
    "happen",
    "see",
    "happened",
    "function",
    "keep",
    "calling",
    "keep",
    "calling",
    "keep",
    "calling",
    "keep",
    "calling",
    "point",
    "time",
    "going",
    "say",
    "maximum",
    "call",
    "stack",
    "size",
    "exceeds",
    "know",
    "function",
    "call",
    "stack",
    "means",
    "foo",
    "going",
    "put",
    "multiple",
    "times",
    "call",
    "stack",
    "call",
    "stack",
    "call",
    "stack",
    "multiple",
    "times",
    "happen",
    "call",
    "stack",
    "max",
    "size",
    "defined",
    "max",
    "size",
    "limit",
    "threshold",
    "limit",
    "reached",
    "going",
    "give",
    "error",
    "call",
    "maximum",
    "call",
    "stack",
    "call",
    "stack",
    "exceeds",
    "error",
    "getting",
    "getting",
    "error",
    "use",
    "recursion",
    "come",
    "second",
    "one",
    "way",
    "actually",
    "define",
    "recursion",
    "like",
    "function",
    "actually",
    "invoking",
    "let",
    "another",
    "way",
    "recursion",
    "done",
    "example",
    "const",
    "foo",
    "equals",
    "function",
    "bus",
    "inside",
    "going",
    "call",
    "foo",
    "like",
    "happen",
    "case",
    "created",
    "function",
    "function",
    "assigned",
    "variable",
    "call",
    "foo",
    "means",
    "foo",
    "function",
    "case",
    "foo",
    "bus",
    "almost",
    "whether",
    "call",
    "foo",
    "call",
    "bus",
    "whatever",
    "actually",
    "creating",
    "recursion",
    "referring",
    "particular",
    "function",
    "either",
    "foo",
    "bus",
    "whatever",
    "name",
    "function",
    "another",
    "way",
    "create",
    "recursion",
    "case",
    "also",
    "ok",
    "already",
    "exists",
    "use",
    "name",
    "actually",
    "use",
    "going",
    "actually",
    "create",
    "recursion",
    "cases",
    "saw",
    "like",
    "recursion",
    "happening",
    "creating",
    "calling",
    "calling",
    "calling",
    "hits",
    "maximum",
    "heap",
    "size",
    "error",
    "use",
    "recursion",
    "ok",
    "one",
    "thing",
    "like",
    "whenever",
    "using",
    "recursion",
    "make",
    "sure",
    "something",
    "called",
    "base",
    "condition",
    "important",
    "recursion",
    "without",
    "base",
    "condition",
    "much",
    "use",
    "base",
    "condition",
    "means",
    "condition",
    "stop",
    "recursion",
    "stop",
    "recursion",
    "point",
    "time",
    "want",
    "stop",
    "execution",
    "function",
    "execute",
    "point",
    "time",
    "exit",
    "something",
    "else",
    "condition",
    "called",
    "base",
    "condition",
    "usually",
    "writing",
    "things",
    "recursion",
    "recursion",
    "program",
    "write",
    "writing",
    "something",
    "like",
    "function",
    "recurse",
    "function",
    "recurse",
    "base",
    "condition",
    "base",
    "condition",
    "case",
    "probably",
    "something",
    "return",
    "otherwise",
    "continue",
    "recurse",
    "actually",
    "recursion",
    "base",
    "condition",
    "base",
    "condition",
    "something",
    "return",
    "otherwise",
    "continue",
    "recurse",
    "let",
    "write",
    "program",
    "actually",
    "understand",
    "much",
    "better",
    "way",
    "program",
    "writing",
    "let",
    "say",
    "fetching",
    "water",
    "multiple",
    "times",
    "let",
    "call",
    "function",
    "create",
    "function",
    "called",
    "fetch",
    "water",
    "let",
    "take",
    "parameter",
    "called",
    "count",
    "like",
    "many",
    "times",
    "want",
    "fetch",
    "water",
    "say",
    "count",
    "zero",
    "base",
    "condition",
    "written",
    "base",
    "condition",
    "case",
    "something",
    "maybe",
    "like",
    "console",
    "dot",
    "log",
    "say",
    "like",
    "water",
    "left",
    "sad",
    "done",
    "return",
    "otherwise",
    "keep",
    "fetching",
    "water",
    "like",
    "count",
    "minus",
    "one",
    "console",
    "dot",
    "log",
    "also",
    "saying",
    "console",
    "dot",
    "log",
    "fetching",
    "water",
    "see",
    "enter",
    "code",
    "fetching",
    "water",
    "line",
    "got",
    "deleted",
    "somehow",
    "fetch",
    "water",
    "count",
    "minus",
    "one",
    "right",
    "let",
    "read",
    "code",
    "fetch",
    "water",
    "calling",
    "fetch",
    "water",
    "recursion",
    "course",
    "base",
    "condition",
    "also",
    "base",
    "condition",
    "exiting",
    "recursion",
    "base",
    "condition",
    "says",
    "count",
    "zero",
    "saying",
    "water",
    "left",
    "break",
    "recursion",
    "count",
    "zero",
    "recursing",
    "fetching",
    "water",
    "correct",
    "say",
    "fetch",
    "water",
    "five",
    "times",
    "happen",
    "go",
    "count",
    "five",
    "equals",
    "zero",
    "wo",
    "go",
    "inside",
    "base",
    "condition",
    "meet",
    "fetch",
    "water",
    "become",
    "count",
    "four",
    "count",
    "four",
    "means",
    "call",
    "function",
    "count",
    "four",
    "count",
    "four",
    "comes",
    "four",
    "equals",
    "zero",
    "base",
    "condition",
    "meet",
    "fetch",
    "water",
    "call",
    "fetch",
    "water",
    "four",
    "minus",
    "one",
    "three",
    "keep",
    "count",
    "zero",
    "count",
    "zero",
    "water",
    "left",
    "exit",
    "recursion",
    "right",
    "fetching",
    "water",
    "fetching",
    "water",
    "fetching",
    "water",
    "fetching",
    "water",
    "fetching",
    "water",
    "water",
    "left",
    "written",
    "program",
    "using",
    "recursion",
    "also",
    "base",
    "condition",
    "exit",
    "recursion",
    "right",
    "thing",
    "could",
    "done",
    "loop",
    "function",
    "functionality",
    "would",
    "could",
    "done",
    "loop",
    "always",
    "debate",
    "like",
    "whether",
    "using",
    "recursion",
    "versus",
    "using",
    "loop",
    "wherever",
    "loop",
    "applicable",
    "maybe",
    "using",
    "loop",
    "cases",
    "example",
    "want",
    "create",
    "factorial",
    "number",
    "factorial",
    "means",
    "factorial",
    "n",
    "factorial",
    "five",
    "means",
    "five",
    "four",
    "two",
    "three",
    "two",
    "one",
    "right",
    "want",
    "factorial",
    "maybe",
    "recursion",
    "right",
    "way",
    "go",
    "makes",
    "code",
    "much",
    "readable",
    "factorial",
    "using",
    "loop",
    "right",
    "readability",
    "one",
    "factor",
    "want",
    "probably",
    "take",
    "account",
    "use",
    "recursion",
    "loop",
    "wherever",
    "recursion",
    "applicable",
    "recursion",
    "whenever",
    "somebody",
    "asking",
    "recursion",
    "please",
    "also",
    "mention",
    "best",
    "condition",
    "exit",
    "recursion",
    "hope",
    "useful",
    "right",
    "friends",
    "everything",
    "come",
    "end",
    "crash",
    "course",
    "also",
    "come",
    "end",
    "hope",
    "enjoyed",
    "learning",
    "functions",
    "things",
    "functions",
    "high",
    "level",
    "depth",
    "purpose",
    "course",
    "crash",
    "course",
    "run",
    "aspects",
    "javascript",
    "functions",
    "give",
    "idea",
    "give",
    "confidence",
    "learn",
    "concepts",
    "learn",
    "incrementally",
    "learn",
    "connecting",
    "dots",
    "started",
    "basic",
    "things",
    "like",
    "create",
    "function",
    "ended",
    "recursion",
    "touch",
    "nested",
    "function",
    "function",
    "scope",
    "closure",
    "pure",
    "function",
    "call",
    "back",
    "various",
    "aspects",
    "learning",
    "stop",
    "need",
    "keep",
    "practicing",
    "concept",
    "much",
    "deep",
    "hands",
    "videos",
    "concept",
    "teach",
    "much",
    "deeper",
    "way",
    "example",
    "call",
    "back",
    "pure",
    "function",
    "hof",
    "know",
    "lot",
    "things",
    "real",
    "life",
    "use",
    "case",
    "scenario",
    "videos",
    "please",
    "go",
    "watch",
    "interested",
    "want",
    "read",
    "somewhere",
    "youtube",
    "channel",
    "please",
    "feel",
    "free",
    "learning",
    "stop",
    "crash",
    "course",
    "purpose",
    "give",
    "start",
    "give",
    "required",
    "confidence",
    "keep",
    "learning",
    "right",
    "best",
    "simple",
    "small",
    "request",
    "please",
    "subscribe",
    "channel",
    "done",
    "already",
    "hit",
    "bell",
    "button",
    "whenever",
    "publish",
    "new",
    "video",
    "get",
    "notification",
    "right",
    "take",
    "care",
    "come",
    "back",
    "another",
    "video",
    "thank"
  ],
  "keywords": [
    "course",
    "learn",
    "javascript",
    "functions",
    "one",
    "programming",
    "understanding",
    "every",
    "terminologies",
    "like",
    "higher",
    "order",
    "recursion",
    "video",
    "tapas",
    "creating",
    "let",
    "get",
    "hello",
    "crash",
    "going",
    "bunch",
    "try",
    "understand",
    "code",
    "thing",
    "keep",
    "saying",
    "concept",
    "much",
    "writing",
    "want",
    "first",
    "hope",
    "please",
    "okay",
    "things",
    "take",
    "within",
    "certain",
    "back",
    "second",
    "got",
    "go",
    "time",
    "know",
    "already",
    "see",
    "look",
    "rather",
    "learning",
    "come",
    "everything",
    "case",
    "nothing",
    "clear",
    "without",
    "talk",
    "talking",
    "function",
    "used",
    "right",
    "able",
    "bit",
    "example",
    "parameters",
    "arguments",
    "next",
    "call",
    "stack",
    "arrow",
    "nested",
    "scope",
    "closure",
    "callback",
    "pure",
    "iife",
    "told",
    "two",
    "actually",
    "recipe",
    "called",
    "friend",
    "line",
    "put",
    "happened",
    "four",
    "five",
    "write",
    "task",
    "fetch",
    "little",
    "instead",
    "mind",
    "create",
    "something",
    "whenever",
    "getting",
    "kind",
    "way",
    "exactly",
    "program",
    "lines",
    "blue",
    "mean",
    "times",
    "three",
    "basically",
    "make",
    "give",
    "name",
    "use",
    "created",
    "number",
    "also",
    "need",
    "say",
    "inside",
    "rest",
    "cases",
    "execute",
    "gets",
    "particular",
    "sure",
    "well",
    "still",
    "using",
    "console",
    "point",
    "define",
    "definition",
    "defining",
    "another",
    "keyword",
    "may",
    "ok",
    "print",
    "declared",
    "defined",
    "anywhere",
    "log",
    "dot",
    "calling",
    "parenthesis",
    "string",
    "done",
    "output",
    "parameter",
    "pass",
    "whatever",
    "passing",
    "means",
    "value",
    "argument",
    "invoke",
    "expression",
    "const",
    "count",
    "equals",
    "variable",
    "executed",
    "10",
    "return",
    "x",
    "else",
    "returns",
    "maybe",
    "happen",
    "executing",
    "returning",
    "seen",
    "execution",
    "undefined",
    "b",
    "plus",
    "simple",
    "takes",
    "comma",
    "default",
    "zero",
    "n",
    "array",
    "side",
    "syntax",
    "dots",
    "rules",
    "outer",
    "inner",
    "outside",
    "access",
    "rule",
    "accessed",
    "variables",
    "global",
    "based",
    "f",
    "passed",
    "foo",
    "bar",
    "condition",
    "input",
    "greeting",
    "f1",
    "f2",
    "f3",
    "base",
    "fetching",
    "water"
  ]
}