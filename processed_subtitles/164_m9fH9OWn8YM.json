{
  "text": "hey my name is Felipe and welcome to my channel \nin this video we are going to train an object  \ndetector using yolo V8 and I'm going to walk you \nstep by step through the entire process from how  \nto collect the data you need in order to train an \nobject detector how to annotate the data using a  \ncomputer vision annotation tool how to structure \nthe data into the exact format you need in order  \nto use yolo V8, how to do the training and \nI'm going to show you two different ways to  \ndo it; from your local environment and also from \na Google collab and how to test the performance  \nofthea model you trained so this is going to be \na super comprehensive step-by-step guide of  \neverything you need to know in order to train \nan object detector using yolo v8 on your own  \ncustom data set so let's get started so let's \nstart with this tutorial let's start with this  \nprocess and the first thing we need to do is to \ncollect data the data collection is the first step  \nin this process remember that if you want to train \nan object detector or any type of machine learning  \nmodel you definitely need data, the algorithm, the\nspecific algorithm you're going to use in this  \ncase yolo V8 is very very important but the data \nis as important as the algorithm if you don't have  \ndata you cannot train any machine learning model \nthat's very important so let me show you the data  \nI am going to use in this process these are some \nimages I have  \ndownloaded and which I'm going to use in order \nto train this object detector and let me show  \nyou a few of them these are some images of alpacas \nthis is an alpaca data set I have downloaded for  \ntoday's tutorial and you can see these are all \nimages containing alpacas in different postures  \nand in different situations right so this is \nexactly the data I am going to use in this process  \nbut obviously you could use whatever data set you \nwant you could use exactly the same data set I am  \ngoing to use or you can just collect the data \nyourself you could just take your cell phone or  \nyour camera or whatever and you can just take the \npictures the photos the images you are going  \nto use you can just do your own data collection \nor something else you could do is to just use a  \na publicly available data set so let \nme show you this data set this is the open image  \ndataset version 7 and this is a dataset which is \npublicly available and you can definitely use it  \nin order to work on today's tutorial in order to \ntrain the object detector we are going to train  \non todays tutorial so let me show you how it looks \nlike if I go to explore and I select detection  \nuh you can see that I'm going to unselect all \nthese options you can see that this is a huge  \ndata set containing many many many many many \nmany many many categories I don't know how  \nmany but they are many this is a huge data set \nit contains millions of images, hundreds of  \nthousands if not millions of annotations thousands \nof categories this is a super super huge data set  \nand you can see that you have many many different \ncategories now we are looking at trumpet and you  \ncan see these are different images with trumpets \nand from each one of these images we have a  \nbounding box around the trumpet and if I show you \nanother one for example we also have Beetle and in  \nthis category you can see we have many different \nimages from many different type of beetles so  \nthis is another example or if I show you this one \nwhich is bottle and we have many different images  \ncontaining bottles for example there you can see \nmany different type of bottles and in all cases we  \nhave a bounding box around the bottle and I could\nshow you I don't know how many examples because  \nthere are many many many different categories \nso remember the first step in this process is  \nthe data collection this is the data I am going \nto to use in this project which is a dataset  \nof alpacas and you can use the exact same data \nI am using if you want to you can use the same  \ndata set of alpacas or you can just collect your \nown data set by using your cell phone your camera  \nor something like that or you can also download \nthe images from a publicly available dataset  \nfor example the open images dataset version 7. if you \ndecide to use open images dataset version 7 let  \nme show you another category which is alpaca this \nis exactly from where I have downloaded all of the  \nimages of alpacas so if in case you decide to use \nthis publicly available data set I can provide you  \nwith a couple of scripts I have used in order to \ndownload all this data in order to parse through  \nall the different annotations and to \nformat this data in the exact format we need  \nin order to work on today's tutorial so in case \nyou decide to use open image data set I am going  \nto give you a couple of scripts which are going to \nbe super super useful for you so that's that's all  \nI can say about the data collection remember you \nneed to collect data if you want to train an object  \ndetector and you have all those different ways \nto do it and all these different categories and  \nall these different options so now let's move on \nto the next step and now let's continue with the  \ndata annotation you have collected a lot of images \nas I have over here you have a lot of images which  \nyou have collected yourself or maybe you have \ndownloaded this data from a publicly available  \ndata set and now it's the time to annotate this \ndata set maybe you were lucky enough when you were  \ncreating the dataset and maybe this data set you \nare using is already annotated maybe you already  \nhave all the bounding boxes from all of your \nobjects from all your categories maybe that's  \nthe case so you don't really need to annotate your \ndata but in any other case for example if you were  \nusing a custom data set, a dataset you have collected \nyourself with your own cell phone your camera and  \nso on something you have collected in that case \nyou definitely need to annotate your data so in  \norder to make this process more comprehensive in \norder to show you like the entire process let me  \nshow you as well how to annotate data so we are \ngoing to use this tool which is CVAT this is a  \nlabeling tool I have used it many many times in \nmany projects I would say it's one of my favorite  \ntools I have used pretty much absolutely all \nthe object detection computer vision related  \nannotation tools I have used maybe I haven't used \nthem all but I have used many many of them and if  \nyou are familiar with annotation tools you would \nknow that there are many many of them and none of  \nthem is perfect I will say all of the different \nannotation tools have their advantages and their  \ndisadvantages and for some situations you prefer \nto use one of them and for other situations it's  \nbetter to use another one CVAT has many advantages \nand it also has a few disadvantages I'm not saying  \nit's perfect but nevertheless this is a tool I \nhave used in many projects and I really really  \nlike it so let me show you how to use it you \nhave to go to cvat.ai and then you select try  \nfor free there are different pricing options \nbut if you are going to work on your own or or  \nin a very small team you \ncan definitely use the free version so I have  \nalready logged in this is already logged into my \naccount but if you don't have an account then you  \nwill have to create a new one  so you \nyou're going to see like a sign up page and you  \ncan just create a new account and then you can \njust logged in into that account so once you are  \nlogged into this annotation tool you need to \ngo to projects and then create a new one I'm  \ngoing to create a project which is called alpaca \ndetector because this is the project I am going  \nto be working in and I'm going to add a label \nwhich in my case is going to be only one label  \nwhich is alpaca and then that's pretty much all \nsubmit and open I have created the project it has  \none label which is alpaca remember if your project \nhas many many different labels add all the labels  \nyou need, and then I will go here which is create \na new task I am going to create a new annotation  \ntask and I'm going to call this task something \nlike alpaca detector annotation task zero zero one  \nthis is from the project alpaca detector and this \nwill take all the labels from that project now  \nyou need to upload all the images you are going to \nannotate so in my case I'm obviously not going to  \nannotate all the images because you can see these \nare too many images and it doesn't make any sense  \nto annotate all these images in this video These \nare 452 images so I'm not going to annotate them  \nall but I'm going to select a few in order to show \nyou how exactly this annotation tool works and how  \nexactly you can use it in your project also in my \ncase as I have already as I have downloaded these  \nimages from a publicly available data set from \nthe open images dataset version 7 I already  \nhave the annotations I already have all the \nbounding boxes so in my case I don't really need  \nto annotate this data because I already have the \nannotations but I'm going to pretend I don't so  \nI can just label a few images and I can show you \nhow it works so now I go back here and I'm just  \ngoing to select something like this many images \nright yeah I'm just going to select this many  \nimages I'm going to open these images and then \nI'm going to click on submit and open right so  \nthis is going to create this task and at the same \ntime it's going to open this task so we can start  \nworking on our annotation process okay so this is \nthe task I have just created I'm going to click  \nhere in job number and this and the job number \nand this will open all the images and now I'm  \ngoing to start annotating all these images so we \nare working on an object detection problem so we  \nare going to annotate bounding boxes we need to \ngo here and for example if we will be detecting  \nmany different categories we would select what \nis the category we are going to label now and and that's  \nit in my case I'm going to label always the same \ncategory which is alpaca so I don't really need to  \ndo anything here so I'm going to select shape \nand let me show you how I do it I'm going to  \nclick in the upper left corner and then in the \nbottom right corner so the idea is to enclose the  \nobject and only the object right the idea is to \ndraw a bonding box around the object \nyou only want to enclose this object \nand you can see that we have other animals in the  \nback right we have other alpacas so I'm just going \nto label them too and there is a shortcut which is  \npressing the letter N and you can just create \na new bounding box so that's another one this  \nis another one this is another alpaca and this is \nthe last one okay that's pretty much all so once  \nyou're ready you can just press Ctrl s that's \ngoing to save the annotations I recommend you  \nto press Ctrl S as often as possible because it's \nalways a good practice so now everything is saved  \nI can just continue to the next image now we are \ngoing to annotate this alpaca and I'm going to do  \nexactly the same process I can start here obviously \nyou can just start in whatever corner you want  \nand I'm going to do something like this okay \nthis image is completely annotated I'm going to  \ncontinue to the next image in this case I am going \nto annotate this alpaca too. this is not a real  \nalpaca but I want my object detector to be able \nto detect these type of objects too so I'm going  \nto annotate it as well this is going to be a very \ngood exercise because if you want to work  \nas a machine learning engineer or as a computer \nvisual engineer annotating data is something  \nyou have to do very often, actually training \nmachine learning models is something you have to  \ndo very often so usually the data annotation is \ndone by other people, right, it is done by annotator s \nthere are different \nservices you can hire in order to annotate data  \nbut in whatever case whatever service you use \nit's always a very good practice to annotate  \nsome of the images yourself right because if \nyou annotate some of the images yourself  \nyou are going to be more familiar with the data \nand you're also going to be more familiar on how  \nto instruct the annotators on how to annotate this \nparticular data for example in this case it's not  \nreally challenging we just have to annotate these \ntwo objects but let me show you there will be  \nother cases because there will be always situations \nwhich are a little confusing in this case it's not  \nconfusing either I have just to I have to label \nthat object but for example a few images ago  \nwhen we were annotating this image if an annotator \nis working on this image that person is going  \nto ask you what do I do here should I annotate \nthis image or not right if an annotator is working  \non this image and the instructions you provide \nare not clear enough the person is going  \nto ask you hey what do I do here should I annotate \nthis image or not is this an alpaca or not so for  \nexample that situation, another situation will be \nwhat happened here which we had many different  \nalpacas in the background and some of them for \nexample this one is a little occluded so there  \ncould be an annotator someone who ask you hey do \nyou want me to annotate absolutely every single  \nalpaca or maybe I can just draw a huge bonding box \nhere in the background and just say everything  \nin the background is an alpaca it's something that \nwhen an annotator is working on the images they  \nare going to have many many different questions \nregarding how to annotate the data and they are  \nall perfect questions and very good questions \nbecause this is exactly what's about I mean when  \nyou are annotating data you are defining exactly \nwhat are the objects you are going to detect right  \nso um what I'm going is that if you annotate some \nof the images yourself you are going to be more  \nfamiliar on what are all the different situations \nand what exactly is going on with your data so you  \nare more clear in exactly what are the objects \nyou want to detect right so let's continue this  \nis only to show a few examples this is another \nsituation in my case I want to say that both of  \nthem are alpacas so I'm just going to say \nsomething like this but there could be another person  \nwho says no this is only one annotation \nis something like this right I'm just going  \nto draw one bonding box enclosing both of them \nsomething that and it will be a good criteria I  \nmean it will be a criteria which I guess it would \nbe fine but uh whatever your criteria would be \nyou need one right you need a criteria so while you \nare annotating some of the images is that you  \nare going to further understand what exactly is \nan alpaca what exactly is the object you want to  \nconsider as alpaca so I'm just going to continue \nthis is another case which may not be clear but  \nI'm just going to say this is an alpaca this \nblack one which we can only see this part and  \nwe don't really see the head but I'm going to \nsay it's an alpaca anyway  \nthis one too this one too this one too also this \nis something that always happens to me when I am  \nworking when I am annotating images that I am more \naware of all the diversity of all these images for  \nexample this is a perfect perfect example because \nwe have an alpaca which is being reflected on a  \nmirror and it's only like a very small \nsection of the alpaca it's only like a  \nvery small uh piece of the alpacas face so what \ndo we do here I am going to annotate this one too  \nbecause yeah that's my criteria but another person \ncould say no this is not the object I want to detect  \nthis is only the object I want to detect and maybe \nanother person would say no this is not an alpaca  \nalpacas don't really apply makeup on them this is \nnot real so I'm not going to annotate this image  \nyou get the idea right there could be many different \nsituations and the only way you get familiar  \nwith all the different type of situations \nis if you annotate some of the images yourself  \nso now let's continue in my case I'm going \nto do something like this  \nbecause yeah I would say the most important \nobject is this one and then other ones are like...  \nyeah it's not really that important if we detect \nthem or not okay so let's continue this is very  \nsimilar to another image I don't know how many I have \nselected but I think we have only a few left\nI don't know if this type of animals are natural... I'm very surprised about this like  \nthe head right it's like it has a lot of \nhair over here and then it's completely  \nhairless the entire body I mean I don't know I'm \nsurprised maybe they are made like that or maybe  \nit's like a natural alpaca who cares who cares... \nlet's continue so we have let's see how many  \nwe have only a few left so let's continue uh let's \nsee if we find any other strange situation which  \nwe have to Define if that's an alpaca or not so \nI can show you an additional example also when you  \nare annotating you could Define your bounding box \nin many many different ways for example in this  \ncase we could Define it like this we could Define \nit like this I mean we could Define it super super  \nfit to the object something like this super super \nfit and we could enclose exactly the object or we  \ncould be a little more relaxed right for example \nsomething like this would be okay too and if we want  \nto do it like this it will be okay too right you \ndon't have to be super super super accurate you  \ncould be like a little more relaxed and it's \ngoing to work anyway uh now in this last one\nand that's pretty much all \nand this is the last one okay\nI'm going to do something like this now I'm \ngoing to take this I think this is also alpaca  \nbut anyway I'm just going to annotate this part \nso that's pretty much all, I'm going to save and  \nthose are the few images I have selected in order \nto show you how to use this annotation tool so  \nthat's pretty much all for the data annotation and \nremember this is also a very important step this  \nis a very important task in this process because \nif we want to train an object detector we need  \ndata and we need annotated data so this is a very \nvery important part in this process remember this  \ntools cvat this is only one of the many many \nmany available image annotation tools, you  \ncan definitely use another one if you want it's \nperfectly fine it's not like you have to use this  \none, at all, you can use whatever annotation tool \nyou want but this is a tool I think it's very easy  \nto use I like the fact it's very easy to use it's \nalso a web application so you don't really need  \nto download anything to your computer you can \njust go ahead and use it from the web that's also  \none of its advantages so yeah so this is a \ntool I showed you in this video how to use in order  \nto train this object detector so this is going \nto be all for this step and now let's continue  \nwith the next part in this process and now that \nwe have collected and annotated all of our data  \nnow it comes the time to format this data to \nstructure this data into the format we need  \nin order to train an object detector using yolo V8 \nwhen you're working in machine learning and you're  \ntraining a machine learning model every single \nalgorithm you work with it's going to have its own  \nrequirements on how to input the data that's going \nto happen with absolutely every single algorithm  \nyou will work with it's going to happen with yolo \nwith all the different YOLO versions and it's  \ngoing to happen with absolutely every single \nalgorithm you are working with so especially yolov8\nneeds the data in a very specific format so \nI created this step in this process so we can  \njust take all the data we have generated all the \nimages and all the annotations and we can convert  \nall these images into the format we need in order \nto input this data into yolo V8 so let me show  \nyou exactly how we are going to do that if you \nhave annotated data using cvat you have to go to  \ntasks and then you have to select this option and \nit's export task data set it's going to ask you  \nthe export format so you can export this data into \nmany different formats and you're going to choose  \nyou're going to scroll all the way down and you're \ngoing to choose YOLO 1.1 right then you can also  \nsave the images but in this case it's not really \nneeded we don't really need the images we already  \nhave the images and you're just going to click ok \nnow if you wait a few seconds or a few minutes if  \nyou have a very large data set you are going to \ndownload a file like this and if I open this file  \nyou are going to see all these different files \nright you can see we have four different files so  \nactually three files and a directory and if I open \nthe directory this is what you are going to see  \nwhich is many many different file names and if I \ngo back to the images directory you will see that  \nall these images file names they all look pretty \nmuch the same right you can see that the file name  \nthe structure for this file name looks pretty \nmuch the same as the one with as the ones we have  \njust downloaded from cvat so basically the way \nit works is that when you are downloading this  \ndata into this format into the YOLO format every \nsingle annotation file is going to be downloaded  \nwith the same name as the image you have annotated \nbut with a different extension so if you have an  \nimage which was called something.jpg then The \nannotation file for that specific image will be  \nsomething.txt right so that's the way it works \nand if I open this image you are going to see  \nsomething like this you're going to see in this \ncase only one row but let me show you another  \none which contains more than one annotation I \nremember there were many for example this one  \nwhich contains two different rows and each one of \nthese rows is a different object in my case as I  \nonly have alpacas in this data set each one of \nthese rows is a different alpaca and this is how  \nyou can make sense of this information the first \ncharacter is the class, the class you are detecting  \nI wanted to enlarge the entire file and \nI don't know what I'm doing there okay\nokay the first number is the class you are \ndetecting in in my case I only have one so  \nit's only a zero because it's my only class and \nthen these four numbers which Define the bounding  \nbox right this is encoded in the YOLO format which \nmeans that the first two numbers are the position  \nof the center of the bounding box then you have \nthe width of your bounding box and then the  \nheight of your bounding box, you will notice \nthese are all float numbers and this basically  \nmeans that it's relative to the entire size of \nthe image so these are the annotations we have  \ndownloaded and this is in the exact same format \nwe need in order to train this object detector  \nso remember when I was downloading these \nannotations we noticed there were many many many  \ndifferent options all of these different options \nare different formats in which we could save the  \nannotations and this is very important because you \ndefinitely need to download YOLO because we are  \ngoing to work with yolo and everything it's pretty \nmuch ready as we need it in order to input into  \nyolo V8 right if you select YOLO that's exactly \nthe same format you need in order to continue with  \nthe next steps and if you have your data into \na different format maybe if you have already  \ncollected and annotate your data and you have your \ndata in whatever other format please remember you  \nwill need to convert these images or actually to \nconvert these annotations into the YOLO format  \nnow this is one of the things we need for \nthe data this is one of the things we need in  \norder to we need to format in order to structure \nthe data in a way we can use this object detector  \nwith yolo V8 but another thing we should do is \nto create very specific directories containing this  \ndata right we are going to need two directories \none of them should be called images and the other  \none should be called labels you definitely need \nto input these names you cannot choose whatever  \nname you want you need to choose these two names \nright the images should be located in an directory  \ncalled images and the labels should be located in \na directory called labels that's the way yolo V8  \nworks so you need to create these two directories \nwithin your image directory is where you are going  \nto have your images if I click here you can \nsee that these are all my images they are all  \nwithin the images directory they are all within \nthe train directory which is within the images  \ndirectory this directry is not absolutely needed \nright you could perfectly take all your images all  \nthese images and you could just paste all your \nimages here right in the images directory and  \neverything will be just fine but if you want you \ncould do something exactly as I did over here and  \nyou could have an additional directory which is \nin between images and your images  \nand you can call this whatever way you want this \nis a very good strategy in case you want to have  \nfor example a train directory containing all the \ntraining images and then another directory which  \ncould be called validation for example and this \nis where you are going to have many images in  \norder to validate your process your training \nprocess your algorithm and you could do the  \nsame with an additional directory which could be \ncalled test for example or you can just use these  \ndirectories in order to label the data right \nto create different versions of your data which is  \nanother thing which is very commonly done so you \ncould create many directories for many different  \npurposes and that will be perfectly fine but you \ncould also just paste all the images here and  \nthat's also perfectly fine and you can see that \nfor the labels directory I did exactly the same we  \nhave a directory which is called train and within \nthis directory is that we have all these different  \nfiles and for each one of these files let me \nshow you like this it's going to be much better\nfor each one of these files for each one of \nthese txt files we will have an image in the  \nimages directory which is called exactly the \nsame exactly the same file name but a different  \nextension right so in this case this one is called \n .txt and this one is called .jpg but you can  \nsee that it's exactly exactly the same file name \nfor example the first image is called oa2ea8f  \nand so on and that's exactly the same name as \nfor the first image in the images directory  \nwhich is called oa2ea8f and so on so basically for \nabsolutely every image in your images directory  \nyou need to have an annotations file and a file in \nthe labels directory which is called exactly the  \nsame exactly the same but with a different extension \nif your images are .jpg your annotations files  \nare .txt so that's another thing which also \ndefines the structure you'll need for your data  \nand that's pretty much all so remember you need \nto have two directories one of them is called  \nimages, the other one is called labels within the images \ndirectories is where you're going to have all your  \nimages and within your labels directories is where \nyou will have all your annotations, all your labels  \nand for absolutely every single image in your \nimages directory you will need to have a file  \nin the labels directory which is called exactly \nthe same but with a different extension if  \nyour images are .jpg your annotation files should \nbe .txt and the labels should be expressed in  \nthe yolo format which is as many rows as \nobjects in that image and every single one  \nof these rows should have the same structure you \nare going to have five terms the first one of them  \nis the class ID in my case I only have one class \nID I'm only detecting alpacas so in my case this  \nnumber will always be zero but if you're detecting \nmore than one class then you will have different  \nnumbers then you have the position the X and Y \nposition of the center of the bounding box and  \nthen you will have the width and then you will \nhave the height and everything will be expressed  \nin relative coordinates so basically this is \nthe structure you need for your data  \nand this is what this step is about so that's \npretty much all about converting the data or about  \nformatting the data and now let's move on to the \ntraining now it's where we are going to take all  \nthis data and we are going to train our object \ndetector using yolo V8 so now that we have  \ntaken the data into the format we need in order to \ntrain yolo v8 now comes the time for the training  \nnow it comes the time where we are going to take \nthis custom data set and we are going to train an  \nobject detector using yolo V8 so this is yolo \nV8 official repository one of the things  \nI like the most about YOLO V8 is that in order \nto train an object detector we can do it either  \nwith python with only a few python \ninstructions or we can also use a command line  \nutility let me see if I find it over here we can \nalso execute a command like this in our terminal  \nsomething that looks like this and that's pretty \nmuch all we need to do in order to train this  \nobject detector that's something I really really \nliked that's something I'm definitely going to  \nuse in our projects from now on because I think \nit's a very very convenient and a very easy way  \nto train an object detector or a machine learning \nmodel so this is the first thing we should notice  \nabout yolo V8 there are two different ways \nin which we can train an object detector we  \ncan either do it in python as we usually do or \nwe can run a command in our terminal I'm going  \nto show you both ways so you're familiar with both \nways and also I mentioned that I am going to show  \nyou the entire process on a local environment in a \npython project and I'm also going to show you this  \nprocess in a google colab so I I know there are \npeople who prefer to work in a local environment I  \nam one of those people and I know that there are \nother people who prefer to work on a Google colab  \nso depending on in which group are you I \nam going to show you both ways to do it so you  \ncan just choose the one you like the most so let's \nstart with it and now let's go to pycharm this is  \na pycharm project I created for this training and \nthis is the file we are going to edit in order to  \ntrain the object detector so the first thing I'm \ngoing to do is to just copy a few lines I'm just  \ngoing to copy everything and I'm going to remove \neverything we don't need copy and paste so we want  \nto build a new model from scratch so we are going \nto keep this sentence and then we are going  \nto train a model so we are just going to remove \neverything but the first sentence and that's all  \nright these are the two lines we need in order to \ntrain an object detector using yolo V8 now we are  \ngoing to do some adjustments, obviously the \nfirst thing we need to do is to import  \nultralytics which is a library we need to use in \norder to import yolo, in order to train a yolo  \nV8 model and this is a python Library we need to \ninstall as we usually do we go to our terminal and  \nwe do something like pip install and the library \nname in my case nothing is going to happen because  \nI have already installed this library but please \nremember to install it and also please mind that  \nwhen you are installing this Library this library \nhas many many dependencies so you are going to  \ninstall many many many many different python \npackages so it's going to take a lot of space  \nso definitely please be ready for that because you \nneed a lot of available space in order to install  \nthis library and it's also going to take \nsome time because you are installing many many  \nmany different packages but anyway let's continue \nplease remember to install this library and these  \nare the two sentences we need in order to run \nthis training from a python script  \nso this sentence we're just going to leave it as \nit is this is where we are loading the specific  \nyolo V8 architecture the specific yolo V8  model we are going to use you can see that  \nwe can choose from any of all of these different \nmodels these are different versions or these are  \ndifferent sizes for yolo V8 you can see we have \nNano small medium large or extra large we are  \nusing the Nano version which is the smallest one \nor is the lightest one, so this is the one we are going  \nto use, the yolo V8 Nano, the yolo V8 n then about \nthe training about this other sentence we need to  \nedit this file right we need a yaml file which \nis going to contain all the configuration for our  \ntraining so I have created this file and I have \nnamed this file config.yaml I'm not sure if this  \nis the most appropriate name but anyway this is \nthe name I have chosen for this file so what I'm  \ngoing to do is just edit this parameter and I'm \ngoing to input config.yaml this is where the  \nconfig.yaml is located this is where the main.pi \nis located, they are in the same directory so if I do  \nthis it's going to work just fine and then let \nme show you the structure for this config.yaml  \nyou can see that this is a very very very simple \nconfiguration file we only have a few Keys which  \nare PATH train val and then names right let's \nstart with the names let's start with this this  \nis where you are going to set all your different \nclasses right you are training an object detector  \nyou are detecting many different categories many \ndifferent classes and this is where you are going  \nto input is where you're going to type all of \nthose different classes in my case I'm  \njust detecting alpacas that's the only class \nI am detecting so I only have one class, is the  \nnumber zero and it's called alpaca but if you are \ndetecting additional objects please remember to  \ninclude all the list of all the objects you are \ndetecting, then about these three parameters these  \nthree arguments the path is the absolute path to \nyour directory containing images and annotations  \nand please remember to include the absolute path. \nI ran some issues when I was trying to specify  \na relative path relative from this directory from \nmy current directory where this project is created  \nto the directory where my data is located when \nI was using a relative path I had some issues  \nand then I noticed that there were other people \nhaving issues as well I noticed that in the GitHub  \nrepository from YOLO V8 I noticed this is in the \nthe issues section there were other people having  \nissues when they were specifying a relative path \nso the way I fixed it and it's a very good way to  \nfix it it's a very easy way to fix it it's just \nspecifying an absolute path remember this should  \nbe an absolute path so this is the path to this \ndirectory to the directory contain the images  \nand the labels directories so this is this is the \npath you need to specify here and then you have to  \nspecify the relative path from this location to \nwhere your images are located like the specific  \nimages are located right in my case they are in \nimages/train relative to this path if I show you  \nthis location which is my root directory then if \nI go to images/train this is where my images are  \nlocated right so that's exactly what I need to \nspecify and then you can see that this is the  \ntrain data this is the data the algorithm is going \nto use as training data and then we have another  \nkeyword which is val right the validation dataset \nin this case we are going to specify the  \nsame data as we used for training and the reason \nI'm doing this is because we want to keep things  \nsimple in this tutorial I'm just going to show \nyou the entire process of how to train an object  \ndetector using yolo V8 on a custom data set \nI want to keep things simple so I'm just going  \nto use the same data so that's pretty much all \nfor this configuration file now going back to  \nmain that's pretty much all we need in order to \ntrain an object detector using yolo V8  \nfrom python that's how simple it is so now I'm \ngoing to execute this file I'm going to change the  \nnumber of epochs I'm going to do this for only \none Epoch because the only thing I'm going to  \nshow you for now is how it is executed, I'm going to \nshow you the entire process and once we notice  \nhow everything is working once we know\neverything is up and running everything is  \nworking fine we can just continue but let's just \ndo this process let's just do this training for  \nonly one Epoch so we can continue you can see that \nnow it's loading the data it has already loaded \nthe data you can make use of all the different \ninformation of this debugging  \ninformation we can see here you can see now \nwe were loading 452 images and we were able  \nto load all the images right 452 from 452 and if \nI scroll down you can see that we have additional  \ninformation additional values which are related \nto the training process this is how the training  \nprocess is going right we are training this object \ndetector and this additional information which we  \nare given through this process so for now the \nonly thing we have to do is only waiting we  \nhave to wait until this process is completed so \nI am going to stop this video now and I'm going  \nto fast forward this video until the end of this \ntraining and let's see what happens okay so the  \ntraining is now completed and you can see that \nwe have an output which says results saved to  \nruns/detect/train39 so if I go to that directory \nruns/detect and train39 you can see that we have  \nmany many different files and these files are related to how the training process  \nwas done right for example if I show you these \nimages these are a few batches of images which  \nwere used in order to train this algorithm \nyou can see the name is train batch0  \nand train batch1 I think we have a train batch2 so we have a lot of different images of a lot  \nof different alpacas of different images we used \nfor training and they were all put together they  \nwere all concatenated into these huge images so \nwe can see exactly the images which were used for  \ntraining and The annotation on top of them right \nthe bonding boxes on top of them and we also have  \nsimilar images but for the validation dataset \nright remember in this case we are using the same  \ndata as validation as we use for training so it's \nexactly the same data it's not different data but  \nthese were the labels in the validation data set \nwhich is the training data set and these were the  \npredictions on the same images right you can see \nthat we are not detecting anything we don't have  \nabsolutely any prediction we don't have absolutely \nany bounding box this is because we are doing a  \nvery shallow training we are doing a very dummy \ntraining we are training this algorithm only for one epoch \nthis was only an example to show you the output \nhow it looks like to show you the entire process  \nbut it is not a real training but nevertheless \nthese are some files I'm going to  \nshow you better when we are in the next step \nfor now let me show you how the training is done  \nfrom the command line from the terminal using the \ncommand I showed you over here using a command like  \nthis and also let me show you how this training \nis done on a Google colab so going to the terminal  \nif we type something like this yolo detect train \ndata I have to specify the configuration file  \nwhich is config.yaml and then model yolov8n.yaml  \nand then the number of epochs this  \nit's exactly the same as we did here exactly the \nsame is going to produce exactly the same output  \nI'm just going to change the number of epochs for \none so we make it exactly the same and let's see  \nwhat happens you can see that it we have exactly \nthe same output we have loaded all the images and  \nnow we are starting a new training process and \nafter this training process we are going to have  \na new run which we have already created the new \ndirectory which is train40 and this is where  \nwe are going to save all the information related \nto this training process so I'm not going to do  \nit because it's going to be exactly the same as \nas the one we did before but this is exactly how  \nyou should use the command line or how you \ncan use this utility in order to do this training  \nfrom the terminal you can see how simple it is \nit's amazing how simple it is it's just amazing  \nand now let me show you how everything is done \nfrom a Google colab so now let's go back to the  \nbrowser so I can show you this notebook I created \nin order to train yolo V8 from a Google colab  \nif you're not familiar with Google collab the way \nyou can create a new notebook is going to Google  \nDrive you can click new more and you select \nthe option Google collaboratory this is going  \nto create a new google colab notebook and you \ncan just use that notebook to train this object  \ndetector now let me show you this notebook and \nyou can see that it contains only one two three  \nfour five cells this is how simple this will \nbe the first thing you need to do is to upload  \nthe data you are going to use in order to train \nthis detector it's going to be exactly the same  \ndata as we used before so these are exactly \nthe same directories the images directory and  \nthe label directory we used before and then \nthe first thing we need to do is to  \nexecute this cell which mounts Google Drive into \nthis instance of google collab so the only  \nthing I'm doing is just I just pressed \nenter into this cell and this may take some time  \nbut it's basically the only thing it does is \nto connect to Google Drive so we can just access  \nthe data we have in Google Drive so I'm going to \nselect my account and then allow and that's pretty  \nmuch all then it all comes to where you have the \ndata in your Google drive right in the specific  \ndirectory where you have uploaded the data in \nmy case my data is located in this path right  \nthis is my home in Google Drive and then this \nis the relative path to the location of where  \nI have the data and where I have all the files \nrelated to this project so remember to specify this  \nroot directory as the directory where you have \nuploaded your data and that's pretty much all  \nand then I'm just going to execute this cell \nso I save this variable I'm going to execute  \nthis other cell which is pip install ultralytics the \nsame command I ran from the terminal in my local  \nenvironment now I'm going to run it in Google \ncollab remember you have to start this command by  \nthe exclamation mark which means you are running \na command in the terminal where this process is  \nbeing executed or where this notebook is being \nlaunched so remember to include the exclamation  \nmark everything seems to be okay everything \nseems to be ready and now we can continue to  \nthe next cell which is this one you can see that \nwe have done exactly the same structure we have  \ninput exactly the same lines as in our \nlocal environment if I show you this again you  \ncan see we have imported ultralytics then we have \ndefined this yolo object and then we have called  \nmodel.train and this is exactly the same as we are \ndoing here obviously we are going to need another  \nyaml file we are going to need a yaml file in our \nGoogle Drive and this is the file I have specified  \nwhich it's like exactly the same \nconfiguration as in the um as in the in the  \nyaml file I showed you in my local environment is \nexactly the same idea so this is exactly what you  \nshould do now you should specify an absolute \npath to your Google Drive directory that's the  \nonly difference so that's the only difference \nand I see I have a very small mistake because  \nI see I have data here and here I have just \nuploaded images and labels in the directory  \nbut they are not within another rectory which \nis called Data so let me do something I'm going  \nto create a new directory which is called Data \nimages labels I'm just going to put everything  \nhere right so everything is consistent so now \neverything is okay images then train and then the  \nimages are within this directory so everything \nis okay now let's go back to the Google collab  \nevery time you make an edit or every time you do \nsomething on Google Drive it's always a good idea to  \nrestart your runtime so that's what I'm going \nto do I'm going to execute the commands again  \nI don't really need to pip install this Library \nagain because it's already installed into this  \nenvironment and then I'm going to execute this \nfile I think I have to do an additional edit which  \nis uh this file now it's called google_colab_config.yaml and that's pretty much all I'm just going  \nto run it for one Epoch so everything is exactly \nthe same as we did in our local environment and  \nnow let's see what happens so you can see that \nwe are doing exactly the same process everything  \nlooks pretty much the same as it did before we \nare loading the data we are just loading the  \nmodels everything it's going fine and \nthis is going to be pretty much the same process  \nas before you can see that now it takes \nsome additional time to load the data because now  \nyou have... you are running this environment you're \nrunning this notebook in a given environment and  \nyou're taking the data from your Google Drive so \nit takes some time it's it's a slower process but  \nit's definitely the same idea so the only thing we \nneed to do now is just to wait until all this uh  \nprocess to be completed and that's pretty much all \nI think it doesn't really make any sense to wait  \nbecause it's like it's going to be exactly the \nsame process we did from our local environment  \nat the end of this execution we are going to have \nall the results in a given directory which is the  \ndirectory of the notebook which is running this \nprocess so at the end of this process please  \nremember to execute this command which is going \nto take all the files you have defined in this  \nruns directory which contains all the runs you \nhave made all the results you have produced and  \nit's going to take all this directory \ninto the directory you have chosen for your files  \nand your data and your google collab and so on \nplease remember to do this because otherwise  \nyou would not be able to access this data and \nthis data which contains all the results and  \neverything you have just trained so this is how \nyou can train an object detector  \nusing yolo V8 in a Google collab and you can \nsee that the process is very straightforward and  \nit's pretty much exactly the same process exactly \nthe same idea as we did you in our local environment  \nand that's it so that's how easy it is to train \nan object detector using yolo Y8 once you have  \ndone everything we did with the data right once \nyou have collected the data you have annotated  \ndata you have taken everything into the format \nyolo V8 needs in order to train an object  \ndetector once everything is completed then \nrunning this process running this training  \nis super straightforward so that's going to be \nall about this training process and now let's  \ncontinue with the testing now let's see how these \nmodels we have trained how they performed right  \nlet's move to the next step and this is the last \nstep in this process this is where we are going  \nto take the model we produced in the training \nstep and we're going to test how it performs  \nthis is the last step in this process this is how \nwe are going to complete this training of an object  \ndetector using yolo v8, so once we have trained \na model we go to the uh to this directory remember  \nto the directory I showed you before regarding... the \ndirectory where all the information was saved  \nwhere all the information regarding this training \nprocess was saved and obviously I I'm not going to  \nshow you the training we just did because it was \nlike a very shallow training like a very dummy  \ntraining but instead I'm going to show you the \nresults from another training I did when I Was  \npreparing this video where I conducted exactly the \nsame process but the training process was done for  \n100 epochs so it was like a more deeper training \nright so let me show you all the files we have  \nproduced so you know what are all the different \ntools you have in order to test the performance of  \nthe model you have trained so basically you have \na confusion Matrix which is going to give you a  \nlot of information regarding how the different \nclasses are predicted or how all the different  \nclasses are confused right if you are familiar \nwith how a confusion Matrix looks like or it  \nshould look like then you will know how to read \nthis information basically this is going to give  \nyou information regarding how all the different \nclasses were confused in my case I only have  \none class which is alpaca but you can see that \nthis generates another category which is like  \nuh the default category which is background and we \nhave some information here it doesn't really say  \nmuch it says how these classes are confused but \ngiven that this is an object detector I think the  \nmost valuable information it's in other metrics in \nother outputs so we are not really going to mind  \nthis confusion Matrix then you have some plots \nsome curves for example this is the F1 confidence  \ncurve we are not going to mind this plot either \nremember we are just starting to train an  \nobject detector using yolo V8 the idea for this \ntutorial is to make it like a very introductory training  \na very introductory process so we are not going to \nmind in all these different uh plots we have over  \nhere because it involves a lot of knowledge and \na lot of expertise to extract all the information  \nfrom these plots and it's not really the idea for \nthis tutorial let's do things differently let's  \nfocus on this plot which is also available in \nthe results which were saved into this directory  \nand you can see that we have many many many \ndifferent plots you can definitely go crazy  \nanalyzing all the information you have here \nbecause you have one two three four five  \nten different plots you could knock yourself out \nanalyzing and just extracting all the information  \nfrom all these different plots but again the idea \nis to make it a very introductory video and a very  \nintroductory tutorial so long story short I'm \njust going to give you one tip of something the  \none thing you should focus on these plots for now \nif you're going to take something from this video  \nfrom how to test the performance of a model \nyou have just trained using yolo v8 to train an object  \ndetector is this make sure your loss is going \ndown right you have many plots some of them are  \nrelated to the loss function which are this one this \none and this one this is for the training set and  \nthese are related to the validation set make \nsure all of your losses are going down right this  \nis like a very I would say a very simple way to \nanalyze these functions or to analyze these plots  \nbut that's... I will say that that's more powerful \nthat it would appear make sure all your losses are  \ngoing down because given the loss function we \ncould have many different situations we could  \nhave a loss function which is going down which \nI would say it's a very good situation we could  \nhave a loss function which started to go down and \nthen just it looks something like a flat line and  \nif we are in something that looks like a flat line \nit means that our training process has stuck so it  \ncould be a good thing because maybe the the \nalgorithm the machine learning model really  \nlearned everything he had to learn about this \ndata so maybe a flat line is not really a bad  \nthing maybe I don't know you you would have to \nanalyze other stuff or if you look at your loss  \nfunction you could also have a situation \nwhere your loss function is going up right  \nthat's the other situation and if you my friend \nhave a loss function which is going up then you  \nhave a huge problem then something is obviously \nnot right with your training and that's why I'm  \nsaying that analyzing your loss function what \nhappens with your loss is going to give you a  \nlot of information ideally it should go down if \nit's going down then everything is going well  \nmost likely, if its something like a flatline \nwell it could be a good thing or a bad thing I  \ndon't know we could be in different situations \nbut if it's going up you have done something  \nsuper super wrong I don't know what's going on \nin your code I don't know what's going on in  \nyour training process but something is obviously \nwrong right so that's like a very simple and a  \nvery naive way to analyze all this information \nbut trust me that's going to give you a lot a  \nlot of information you know or to start working \non this testing the performance of this model  \nbut I would say that looking at the plots and analyzing \nall this information and so on I would say that's  \nmore about research, that's what people \nwho do research like to do and I'm more like  \na freelancer I don't really do  research so \nI'm going to show you another way to analyze this  \nperformance, the model we have just \ntrained which from my perspective it's a more...  \nit makes more sense to analyze it like this and it \ninvolves to see how it performs with real \ndata right how it performs with data you have \nused in order to make your inferences and to  \nsee what happens so the first step in this more \npractical more visual evaluation of this model of  \nhow this model performs is looking at these images \nand remember that before when we looked at these  \nimages we had this one which was regarding the \nlabels in the validation set and then this other  \none which were the predictions were completely \nempty now you can see that the the predictions  \nwe have produced they are not completely empty \nand we are detecting the position of our alpacas  \nsuper super accurately we have some mistakes \nactually for example here we are detecting  \na person as an alpaca here we are detecting also \na person as  an alpaca and we have some missdetections  \nfor example this should be in alpaca and it's not \nbeing detected so we have some missdetections but you  \ncan see that the the results are pretty much okay \nright everything looks pretty much okay the same  \nabout here if we go here we are detecting pretty \nmuch everything we have a Missdetection here we  \nhave an error over here because we are detecting \nan alpaca where there is actually nothing so things are  \nnot perfect but everything seems to be pretty much \nokay that's the first way in which we are going to  \nanalyze the performance of this model which is \na lot because this is like a very visual way to  \nsee how it performs we are not looking at plots we \nare not looking at metrics right we are looking at  \nreal examples and to see how this model performs \non real data maybe I am biased to analyze things  \nlike this because I'm a freelancer and the way it \nusually works when you are a freelancer is that  \nif you are building this model to deliver this \nproject for a client and you tell your client oh  \nyeah the model was perfect take a look at all \nthese plots take a look at all these metrics  \neverything was just amazing and then your client \ntests the model and it doesn't work the client  \nwill not care about all the pretty plots and so \non right so that's why I don't really mind a lot  \nabout these plots maybe I am biased because I am a \nfreelancer and that's how freelancing works but I  \nprefer to do like a more visual evaluation \nso that's the first step we will do and we  \ncan notice already we are having a better \nperformance we are having an okay performance  \nbut this data we are currently looking at right \nnow remember the validation data it was pretty  \nmuch the same data we use as training so this \ndoesn't really say much I'm going to show you  \nhow it performs on data which the algorithm have \nnever seen with completely and absolutely unseen  \ndata and this is a very good practice if you \nwant to test the performance of a model, so I have  \nprepared a few videos so let me show you these \nvideos they are basically... remember this is  \ncompletely unseen data and this is the first video \nyou can see that this is an alpaca which is just  \nbeing an alpaca which is just walking around \nit's doing its alpaca stuff it's having an  \nalpaca everyday life it's just being an alpaca \nright it's walking around from one place to  \nthe other doing uh doing nothing no it's doing \nits alpaca stuff which is a lot this is one of  \nthe videos I have prepared this is another video \nwhich is also an alpaca doing alpaca related stuff  \num so this is another video we are going to \nsee remember this is completely unseen data and  \nI also have another video over here so I'm \ngoing to show you how the model performs on these  \nthree videos I have made a script in Python \nwhich loads these videos and just calls the  \npredict method from yolo v8, we \nare loading the model we have trained and we are  \napplying all the predictions to this model and \nwe are seeing how it performs on these videos  \nso this is the first video I showed you and these \nare the detections we are getting you can see  \nwe are getting an absolutely perfect detection \nremember this is completely unseen data and we are  \ngetting I'm not going to say 100 perfect detection \nbecause we're not but I would say it's pretty good  \nI will say it's pretty pretty good in order to \nstart working on this training process uh yeah  \nI would say it's pretty good so this is one of \nthe examples then let me show you another example  \nwhich is this one and this is the other video \nI showed you and you can see that we are also  \ndetecting exactly the position of the alpaca \nin some cases the text is going outside of the  \nframe because we don't really have space but \neverything seems to be okay in this video too  \nso we are taking exactly the position of this uh \nalpaca the bonding box in some cases is not really  \nfit to the alpaca face but yeah but everything \nseems to be working fine and then the other video  \nI showed you you can see in this case the detection \nis a little broken we have many missdetections  \nbut now everything is much better and yeah in \nthis case it's working better too it's working  \nwell I would say in these three examples this one \nit's the one that's performing better and then the  \nother one I really like how it performed too in \nthis case where the alpaca was like starting its  \nalpaca Journey... we have like a very \ngood detection and a very stable detection then it  \nlike breaks a little but nevertheless I would say \nit's okay it's also detecting this alpaca over  \nhere so uh I will say it's working pretty much \nokay so this is pretty much how we are going to  \ndo the testing in this phase remember that if you \nwant to test the performance of the model you have  \njust trained using yellow V8 you will have a lot \nof information in this directory which is created  \nwhen you are yolo the model at the end of your \ntraining process you will have all of these files  \nand you will have a lot of information to knock \nyourself out to go crazy analyzing all these  \ndifferent plots and so on or you can just keep it \nsimple and just take a look at what happened with  \nthe training loss and the validation \nloss and so on all the loss functions make sure  \nthey are going down that's the very least thing \nyou need to make sure of and then you can just  \nsee how it performs with a few images or with \na few videos, take a look how it performs  \nwith unseen data and you can make decisions from \nthere maybe you can just use the model as it is  \nor you can just decide to train it again in this \ncase if I analyze all this information I see that  \nthe loss functions are going down and not \nonly they are going down but I notice that there  \nis a lot of space to to improve this training, to \nimprove the performance because we haven't reached  \nthat moment where everything just appears to be \nstuck right like that a flat line we are very far  \naway from there so that's something I would do \nI would do a new deeper training so we can just  \ncontinue learning about this process also I w \nchange the validation data for something that's  \ncompletely different from the training \ndata so we have even more information and that's  \npretty much what I would do in order to iterate in \norder to make a better model and a more powerful  \nmodel so it is going to be all for today my name \nis Felipe I'm a computer region engineer if you  \nenjoyed this video please remember to click the \nlike button it's going to help me a lot it's going  \nto help the channel and you know how it is so this \nis going to be all for today in this channel I  \nmake tutorials, coding tutorials which are related \nto computer vision and machine learning I also  \nshare my experience as a computer vision engineer \nI talk about different things related to computer  \nvision or machine learning so if you're curious \nto know more about these topics please consider to  \nsubscribe to my channel this is going to be all \nfor today and see you on the next video\n",
  "words": [
    "hey",
    "name",
    "felipe",
    "welcome",
    "channel",
    "video",
    "going",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "going",
    "walk",
    "step",
    "step",
    "entire",
    "process",
    "collect",
    "data",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "annotate",
    "data",
    "using",
    "computer",
    "vision",
    "annotation",
    "tool",
    "structure",
    "data",
    "exact",
    "format",
    "need",
    "order",
    "use",
    "yolo",
    "v8",
    "training",
    "going",
    "show",
    "two",
    "different",
    "ways",
    "local",
    "environment",
    "also",
    "google",
    "collab",
    "test",
    "performance",
    "ofthea",
    "model",
    "trained",
    "going",
    "super",
    "comprehensive",
    "guide",
    "everything",
    "need",
    "know",
    "order",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "custom",
    "data",
    "set",
    "let",
    "get",
    "started",
    "let",
    "start",
    "tutorial",
    "let",
    "start",
    "process",
    "first",
    "thing",
    "need",
    "collect",
    "data",
    "data",
    "collection",
    "first",
    "step",
    "process",
    "remember",
    "want",
    "train",
    "object",
    "detector",
    "type",
    "machine",
    "learning",
    "model",
    "definitely",
    "need",
    "data",
    "algorithm",
    "specific",
    "algorithm",
    "going",
    "use",
    "case",
    "yolo",
    "v8",
    "important",
    "data",
    "important",
    "algorithm",
    "data",
    "train",
    "machine",
    "learning",
    "model",
    "important",
    "let",
    "show",
    "data",
    "going",
    "use",
    "process",
    "images",
    "downloaded",
    "going",
    "use",
    "order",
    "train",
    "object",
    "detector",
    "let",
    "show",
    "images",
    "alpacas",
    "alpaca",
    "data",
    "set",
    "downloaded",
    "today",
    "tutorial",
    "see",
    "images",
    "containing",
    "alpacas",
    "different",
    "postures",
    "different",
    "situations",
    "right",
    "exactly",
    "data",
    "going",
    "use",
    "process",
    "obviously",
    "could",
    "use",
    "whatever",
    "data",
    "set",
    "want",
    "could",
    "use",
    "exactly",
    "data",
    "set",
    "going",
    "use",
    "collect",
    "data",
    "could",
    "take",
    "cell",
    "phone",
    "camera",
    "whatever",
    "take",
    "pictures",
    "photos",
    "images",
    "going",
    "use",
    "data",
    "collection",
    "something",
    "else",
    "could",
    "use",
    "publicly",
    "available",
    "data",
    "set",
    "let",
    "show",
    "data",
    "set",
    "open",
    "image",
    "dataset",
    "version",
    "7",
    "dataset",
    "publicly",
    "available",
    "definitely",
    "use",
    "order",
    "work",
    "today",
    "tutorial",
    "order",
    "train",
    "object",
    "detector",
    "going",
    "train",
    "todays",
    "tutorial",
    "let",
    "show",
    "looks",
    "like",
    "go",
    "explore",
    "select",
    "detection",
    "uh",
    "see",
    "going",
    "unselect",
    "options",
    "see",
    "huge",
    "data",
    "set",
    "containing",
    "many",
    "many",
    "many",
    "many",
    "many",
    "many",
    "many",
    "many",
    "categories",
    "know",
    "many",
    "many",
    "huge",
    "data",
    "set",
    "contains",
    "millions",
    "images",
    "hundreds",
    "thousands",
    "millions",
    "annotations",
    "thousands",
    "categories",
    "super",
    "super",
    "huge",
    "data",
    "set",
    "see",
    "many",
    "many",
    "different",
    "categories",
    "looking",
    "trumpet",
    "see",
    "different",
    "images",
    "trumpets",
    "one",
    "images",
    "bounding",
    "box",
    "around",
    "trumpet",
    "show",
    "another",
    "one",
    "example",
    "also",
    "beetle",
    "category",
    "see",
    "many",
    "different",
    "images",
    "many",
    "different",
    "type",
    "beetles",
    "another",
    "example",
    "show",
    "one",
    "bottle",
    "many",
    "different",
    "images",
    "containing",
    "bottles",
    "example",
    "see",
    "many",
    "different",
    "type",
    "bottles",
    "cases",
    "bounding",
    "box",
    "around",
    "bottle",
    "could",
    "show",
    "know",
    "many",
    "examples",
    "many",
    "many",
    "many",
    "different",
    "categories",
    "remember",
    "first",
    "step",
    "process",
    "data",
    "collection",
    "data",
    "going",
    "use",
    "project",
    "dataset",
    "alpacas",
    "use",
    "exact",
    "data",
    "using",
    "want",
    "use",
    "data",
    "set",
    "alpacas",
    "collect",
    "data",
    "set",
    "using",
    "cell",
    "phone",
    "camera",
    "something",
    "like",
    "also",
    "download",
    "images",
    "publicly",
    "available",
    "dataset",
    "example",
    "open",
    "images",
    "dataset",
    "version",
    "decide",
    "use",
    "open",
    "images",
    "dataset",
    "version",
    "7",
    "let",
    "show",
    "another",
    "category",
    "alpaca",
    "exactly",
    "downloaded",
    "images",
    "alpacas",
    "case",
    "decide",
    "use",
    "publicly",
    "available",
    "data",
    "set",
    "provide",
    "couple",
    "scripts",
    "used",
    "order",
    "download",
    "data",
    "order",
    "parse",
    "different",
    "annotations",
    "format",
    "data",
    "exact",
    "format",
    "need",
    "order",
    "work",
    "today",
    "tutorial",
    "case",
    "decide",
    "use",
    "open",
    "image",
    "data",
    "set",
    "going",
    "give",
    "couple",
    "scripts",
    "going",
    "super",
    "super",
    "useful",
    "say",
    "data",
    "collection",
    "remember",
    "need",
    "collect",
    "data",
    "want",
    "train",
    "object",
    "detector",
    "different",
    "ways",
    "different",
    "categories",
    "different",
    "options",
    "let",
    "move",
    "next",
    "step",
    "let",
    "continue",
    "data",
    "annotation",
    "collected",
    "lot",
    "images",
    "lot",
    "images",
    "collected",
    "maybe",
    "downloaded",
    "data",
    "publicly",
    "available",
    "data",
    "set",
    "time",
    "annotate",
    "data",
    "set",
    "maybe",
    "lucky",
    "enough",
    "creating",
    "dataset",
    "maybe",
    "data",
    "set",
    "using",
    "already",
    "annotated",
    "maybe",
    "already",
    "bounding",
    "boxes",
    "objects",
    "categories",
    "maybe",
    "case",
    "really",
    "need",
    "annotate",
    "data",
    "case",
    "example",
    "using",
    "custom",
    "data",
    "set",
    "dataset",
    "collected",
    "cell",
    "phone",
    "camera",
    "something",
    "collected",
    "case",
    "definitely",
    "need",
    "annotate",
    "data",
    "order",
    "make",
    "process",
    "comprehensive",
    "order",
    "show",
    "like",
    "entire",
    "process",
    "let",
    "show",
    "well",
    "annotate",
    "data",
    "going",
    "use",
    "tool",
    "cvat",
    "labeling",
    "tool",
    "used",
    "many",
    "many",
    "times",
    "many",
    "projects",
    "would",
    "say",
    "one",
    "favorite",
    "tools",
    "used",
    "pretty",
    "much",
    "absolutely",
    "object",
    "detection",
    "computer",
    "vision",
    "related",
    "annotation",
    "tools",
    "used",
    "maybe",
    "used",
    "used",
    "many",
    "many",
    "familiar",
    "annotation",
    "tools",
    "would",
    "know",
    "many",
    "many",
    "none",
    "perfect",
    "say",
    "different",
    "annotation",
    "tools",
    "advantages",
    "disadvantages",
    "situations",
    "prefer",
    "use",
    "one",
    "situations",
    "better",
    "use",
    "another",
    "one",
    "cvat",
    "many",
    "advantages",
    "also",
    "disadvantages",
    "saying",
    "perfect",
    "nevertheless",
    "tool",
    "used",
    "many",
    "projects",
    "really",
    "really",
    "like",
    "let",
    "show",
    "use",
    "go",
    "select",
    "try",
    "free",
    "different",
    "pricing",
    "options",
    "going",
    "work",
    "small",
    "team",
    "definitely",
    "use",
    "free",
    "version",
    "already",
    "logged",
    "already",
    "logged",
    "account",
    "account",
    "create",
    "new",
    "one",
    "going",
    "see",
    "like",
    "sign",
    "page",
    "create",
    "new",
    "account",
    "logged",
    "account",
    "logged",
    "annotation",
    "tool",
    "need",
    "go",
    "projects",
    "create",
    "new",
    "one",
    "going",
    "create",
    "project",
    "called",
    "alpaca",
    "detector",
    "project",
    "going",
    "working",
    "going",
    "add",
    "label",
    "case",
    "going",
    "one",
    "label",
    "alpaca",
    "pretty",
    "much",
    "submit",
    "open",
    "created",
    "project",
    "one",
    "label",
    "alpaca",
    "remember",
    "project",
    "many",
    "many",
    "different",
    "labels",
    "add",
    "labels",
    "need",
    "go",
    "create",
    "new",
    "task",
    "going",
    "create",
    "new",
    "annotation",
    "task",
    "going",
    "call",
    "task",
    "something",
    "like",
    "alpaca",
    "detector",
    "annotation",
    "task",
    "zero",
    "zero",
    "one",
    "project",
    "alpaca",
    "detector",
    "take",
    "labels",
    "project",
    "need",
    "upload",
    "images",
    "going",
    "annotate",
    "case",
    "obviously",
    "going",
    "annotate",
    "images",
    "see",
    "many",
    "images",
    "make",
    "sense",
    "annotate",
    "images",
    "video",
    "452",
    "images",
    "going",
    "annotate",
    "going",
    "select",
    "order",
    "show",
    "exactly",
    "annotation",
    "tool",
    "works",
    "exactly",
    "use",
    "project",
    "also",
    "case",
    "already",
    "downloaded",
    "images",
    "publicly",
    "available",
    "data",
    "set",
    "open",
    "images",
    "dataset",
    "version",
    "7",
    "already",
    "annotations",
    "already",
    "bounding",
    "boxes",
    "case",
    "really",
    "need",
    "annotate",
    "data",
    "already",
    "annotations",
    "going",
    "pretend",
    "label",
    "images",
    "show",
    "works",
    "go",
    "back",
    "going",
    "select",
    "something",
    "like",
    "many",
    "images",
    "right",
    "yeah",
    "going",
    "select",
    "many",
    "images",
    "going",
    "open",
    "images",
    "going",
    "click",
    "submit",
    "open",
    "right",
    "going",
    "create",
    "task",
    "time",
    "going",
    "open",
    "task",
    "start",
    "working",
    "annotation",
    "process",
    "okay",
    "task",
    "created",
    "going",
    "click",
    "job",
    "number",
    "job",
    "number",
    "open",
    "images",
    "going",
    "start",
    "annotating",
    "images",
    "working",
    "object",
    "detection",
    "problem",
    "going",
    "annotate",
    "bounding",
    "boxes",
    "need",
    "go",
    "example",
    "detecting",
    "many",
    "different",
    "categories",
    "would",
    "select",
    "category",
    "going",
    "label",
    "case",
    "going",
    "label",
    "always",
    "category",
    "alpaca",
    "really",
    "need",
    "anything",
    "going",
    "select",
    "shape",
    "let",
    "show",
    "going",
    "click",
    "upper",
    "left",
    "corner",
    "bottom",
    "right",
    "corner",
    "idea",
    "enclose",
    "object",
    "object",
    "right",
    "idea",
    "draw",
    "bonding",
    "box",
    "around",
    "object",
    "want",
    "enclose",
    "object",
    "see",
    "animals",
    "back",
    "right",
    "alpacas",
    "going",
    "label",
    "shortcut",
    "pressing",
    "letter",
    "n",
    "create",
    "new",
    "bounding",
    "box",
    "another",
    "one",
    "another",
    "one",
    "another",
    "alpaca",
    "last",
    "one",
    "okay",
    "pretty",
    "much",
    "ready",
    "press",
    "ctrl",
    "going",
    "save",
    "annotations",
    "recommend",
    "press",
    "ctrl",
    "often",
    "possible",
    "always",
    "good",
    "practice",
    "everything",
    "saved",
    "continue",
    "next",
    "image",
    "going",
    "annotate",
    "alpaca",
    "going",
    "exactly",
    "process",
    "start",
    "obviously",
    "start",
    "whatever",
    "corner",
    "want",
    "going",
    "something",
    "like",
    "okay",
    "image",
    "completely",
    "annotated",
    "going",
    "continue",
    "next",
    "image",
    "case",
    "going",
    "annotate",
    "alpaca",
    "real",
    "alpaca",
    "want",
    "object",
    "detector",
    "able",
    "detect",
    "type",
    "objects",
    "going",
    "annotate",
    "well",
    "going",
    "good",
    "exercise",
    "want",
    "work",
    "machine",
    "learning",
    "engineer",
    "computer",
    "visual",
    "engineer",
    "annotating",
    "data",
    "something",
    "often",
    "actually",
    "training",
    "machine",
    "learning",
    "models",
    "something",
    "often",
    "usually",
    "data",
    "annotation",
    "done",
    "people",
    "right",
    "done",
    "annotator",
    "different",
    "services",
    "hire",
    "order",
    "annotate",
    "data",
    "whatever",
    "case",
    "whatever",
    "service",
    "use",
    "always",
    "good",
    "practice",
    "annotate",
    "images",
    "right",
    "annotate",
    "images",
    "going",
    "familiar",
    "data",
    "also",
    "going",
    "familiar",
    "instruct",
    "annotators",
    "annotate",
    "particular",
    "data",
    "example",
    "case",
    "really",
    "challenging",
    "annotate",
    "two",
    "objects",
    "let",
    "show",
    "cases",
    "always",
    "situations",
    "little",
    "confusing",
    "case",
    "confusing",
    "either",
    "label",
    "object",
    "example",
    "images",
    "ago",
    "annotating",
    "image",
    "annotator",
    "working",
    "image",
    "person",
    "going",
    "ask",
    "annotate",
    "image",
    "right",
    "annotator",
    "working",
    "image",
    "instructions",
    "provide",
    "clear",
    "enough",
    "person",
    "going",
    "ask",
    "hey",
    "annotate",
    "image",
    "alpaca",
    "example",
    "situation",
    "another",
    "situation",
    "happened",
    "many",
    "different",
    "alpacas",
    "background",
    "example",
    "one",
    "little",
    "occluded",
    "could",
    "annotator",
    "someone",
    "ask",
    "hey",
    "want",
    "annotate",
    "absolutely",
    "every",
    "single",
    "alpaca",
    "maybe",
    "draw",
    "huge",
    "bonding",
    "box",
    "background",
    "say",
    "everything",
    "background",
    "alpaca",
    "something",
    "annotator",
    "working",
    "images",
    "going",
    "many",
    "many",
    "different",
    "questions",
    "regarding",
    "annotate",
    "data",
    "perfect",
    "questions",
    "good",
    "questions",
    "exactly",
    "mean",
    "annotating",
    "data",
    "defining",
    "exactly",
    "objects",
    "going",
    "detect",
    "right",
    "um",
    "going",
    "annotate",
    "images",
    "going",
    "familiar",
    "different",
    "situations",
    "exactly",
    "going",
    "data",
    "clear",
    "exactly",
    "objects",
    "want",
    "detect",
    "right",
    "let",
    "continue",
    "show",
    "examples",
    "another",
    "situation",
    "case",
    "want",
    "say",
    "alpacas",
    "going",
    "say",
    "something",
    "like",
    "could",
    "another",
    "person",
    "says",
    "one",
    "annotation",
    "something",
    "like",
    "right",
    "going",
    "draw",
    "one",
    "bonding",
    "box",
    "enclosing",
    "something",
    "good",
    "criteria",
    "mean",
    "criteria",
    "guess",
    "would",
    "fine",
    "uh",
    "whatever",
    "criteria",
    "would",
    "need",
    "one",
    "right",
    "need",
    "criteria",
    "annotating",
    "images",
    "going",
    "understand",
    "exactly",
    "alpaca",
    "exactly",
    "object",
    "want",
    "consider",
    "alpaca",
    "going",
    "continue",
    "another",
    "case",
    "may",
    "clear",
    "going",
    "say",
    "alpaca",
    "black",
    "one",
    "see",
    "part",
    "really",
    "see",
    "head",
    "going",
    "say",
    "alpaca",
    "anyway",
    "one",
    "one",
    "one",
    "also",
    "something",
    "always",
    "happens",
    "working",
    "annotating",
    "images",
    "aware",
    "diversity",
    "images",
    "example",
    "perfect",
    "perfect",
    "example",
    "alpaca",
    "reflected",
    "mirror",
    "like",
    "small",
    "section",
    "alpaca",
    "like",
    "small",
    "uh",
    "piece",
    "alpacas",
    "face",
    "going",
    "annotate",
    "one",
    "yeah",
    "criteria",
    "another",
    "person",
    "could",
    "say",
    "object",
    "want",
    "detect",
    "object",
    "want",
    "detect",
    "maybe",
    "another",
    "person",
    "would",
    "say",
    "alpaca",
    "alpacas",
    "really",
    "apply",
    "makeup",
    "real",
    "going",
    "annotate",
    "image",
    "get",
    "idea",
    "right",
    "could",
    "many",
    "different",
    "situations",
    "way",
    "get",
    "familiar",
    "different",
    "type",
    "situations",
    "annotate",
    "images",
    "let",
    "continue",
    "case",
    "going",
    "something",
    "like",
    "yeah",
    "would",
    "say",
    "important",
    "object",
    "one",
    "ones",
    "like",
    "yeah",
    "really",
    "important",
    "detect",
    "okay",
    "let",
    "continue",
    "similar",
    "another",
    "image",
    "know",
    "many",
    "selected",
    "think",
    "left",
    "know",
    "type",
    "animals",
    "natural",
    "surprised",
    "like",
    "head",
    "right",
    "like",
    "lot",
    "hair",
    "completely",
    "hairless",
    "entire",
    "body",
    "mean",
    "know",
    "surprised",
    "maybe",
    "made",
    "like",
    "maybe",
    "like",
    "natural",
    "alpaca",
    "cares",
    "cares",
    "let",
    "continue",
    "let",
    "see",
    "many",
    "left",
    "let",
    "continue",
    "uh",
    "let",
    "see",
    "find",
    "strange",
    "situation",
    "define",
    "alpaca",
    "show",
    "additional",
    "example",
    "also",
    "annotating",
    "could",
    "define",
    "bounding",
    "box",
    "many",
    "many",
    "different",
    "ways",
    "example",
    "case",
    "could",
    "define",
    "like",
    "could",
    "define",
    "like",
    "mean",
    "could",
    "define",
    "super",
    "super",
    "fit",
    "object",
    "something",
    "like",
    "super",
    "super",
    "fit",
    "could",
    "enclose",
    "exactly",
    "object",
    "could",
    "little",
    "relaxed",
    "right",
    "example",
    "something",
    "like",
    "would",
    "okay",
    "want",
    "like",
    "okay",
    "right",
    "super",
    "super",
    "super",
    "accurate",
    "could",
    "like",
    "little",
    "relaxed",
    "going",
    "work",
    "anyway",
    "uh",
    "last",
    "one",
    "pretty",
    "much",
    "last",
    "one",
    "okay",
    "going",
    "something",
    "like",
    "going",
    "take",
    "think",
    "also",
    "alpaca",
    "anyway",
    "going",
    "annotate",
    "part",
    "pretty",
    "much",
    "going",
    "save",
    "images",
    "selected",
    "order",
    "show",
    "use",
    "annotation",
    "tool",
    "pretty",
    "much",
    "data",
    "annotation",
    "remember",
    "also",
    "important",
    "step",
    "important",
    "task",
    "process",
    "want",
    "train",
    "object",
    "detector",
    "need",
    "data",
    "need",
    "annotated",
    "data",
    "important",
    "part",
    "process",
    "remember",
    "tools",
    "cvat",
    "one",
    "many",
    "many",
    "many",
    "available",
    "image",
    "annotation",
    "tools",
    "definitely",
    "use",
    "another",
    "one",
    "want",
    "perfectly",
    "fine",
    "like",
    "use",
    "one",
    "use",
    "whatever",
    "annotation",
    "tool",
    "want",
    "tool",
    "think",
    "easy",
    "use",
    "like",
    "fact",
    "easy",
    "use",
    "also",
    "web",
    "application",
    "really",
    "need",
    "download",
    "anything",
    "computer",
    "go",
    "ahead",
    "use",
    "web",
    "also",
    "one",
    "advantages",
    "yeah",
    "tool",
    "showed",
    "video",
    "use",
    "order",
    "train",
    "object",
    "detector",
    "going",
    "step",
    "let",
    "continue",
    "next",
    "part",
    "process",
    "collected",
    "annotated",
    "data",
    "comes",
    "time",
    "format",
    "data",
    "structure",
    "data",
    "format",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "working",
    "machine",
    "learning",
    "training",
    "machine",
    "learning",
    "model",
    "every",
    "single",
    "algorithm",
    "work",
    "going",
    "requirements",
    "input",
    "data",
    "going",
    "happen",
    "absolutely",
    "every",
    "single",
    "algorithm",
    "work",
    "going",
    "happen",
    "yolo",
    "different",
    "yolo",
    "versions",
    "going",
    "happen",
    "absolutely",
    "every",
    "single",
    "algorithm",
    "working",
    "especially",
    "yolov8",
    "needs",
    "data",
    "specific",
    "format",
    "created",
    "step",
    "process",
    "take",
    "data",
    "generated",
    "images",
    "annotations",
    "convert",
    "images",
    "format",
    "need",
    "order",
    "input",
    "data",
    "yolo",
    "v8",
    "let",
    "show",
    "exactly",
    "going",
    "annotated",
    "data",
    "using",
    "cvat",
    "go",
    "tasks",
    "select",
    "option",
    "export",
    "task",
    "data",
    "set",
    "going",
    "ask",
    "export",
    "format",
    "export",
    "data",
    "many",
    "different",
    "formats",
    "going",
    "choose",
    "going",
    "scroll",
    "way",
    "going",
    "choose",
    "yolo",
    "right",
    "also",
    "save",
    "images",
    "case",
    "really",
    "needed",
    "really",
    "need",
    "images",
    "already",
    "images",
    "going",
    "click",
    "ok",
    "wait",
    "seconds",
    "minutes",
    "large",
    "data",
    "set",
    "going",
    "download",
    "file",
    "like",
    "open",
    "file",
    "going",
    "see",
    "different",
    "files",
    "right",
    "see",
    "four",
    "different",
    "files",
    "actually",
    "three",
    "files",
    "directory",
    "open",
    "directory",
    "going",
    "see",
    "many",
    "many",
    "different",
    "file",
    "names",
    "go",
    "back",
    "images",
    "directory",
    "see",
    "images",
    "file",
    "names",
    "look",
    "pretty",
    "much",
    "right",
    "see",
    "file",
    "name",
    "structure",
    "file",
    "name",
    "looks",
    "pretty",
    "much",
    "one",
    "ones",
    "downloaded",
    "cvat",
    "basically",
    "way",
    "works",
    "downloading",
    "data",
    "format",
    "yolo",
    "format",
    "every",
    "single",
    "annotation",
    "file",
    "going",
    "downloaded",
    "name",
    "image",
    "annotated",
    "different",
    "extension",
    "image",
    "called",
    "annotation",
    "file",
    "specific",
    "image",
    "right",
    "way",
    "works",
    "open",
    "image",
    "going",
    "see",
    "something",
    "like",
    "going",
    "see",
    "case",
    "one",
    "row",
    "let",
    "show",
    "another",
    "one",
    "contains",
    "one",
    "annotation",
    "remember",
    "many",
    "example",
    "one",
    "contains",
    "two",
    "different",
    "rows",
    "one",
    "rows",
    "different",
    "object",
    "case",
    "alpacas",
    "data",
    "set",
    "one",
    "rows",
    "different",
    "alpaca",
    "make",
    "sense",
    "information",
    "first",
    "character",
    "class",
    "class",
    "detecting",
    "wanted",
    "enlarge",
    "entire",
    "file",
    "know",
    "okay",
    "okay",
    "first",
    "number",
    "class",
    "detecting",
    "case",
    "one",
    "zero",
    "class",
    "four",
    "numbers",
    "define",
    "bounding",
    "box",
    "right",
    "encoded",
    "yolo",
    "format",
    "means",
    "first",
    "two",
    "numbers",
    "position",
    "center",
    "bounding",
    "box",
    "width",
    "bounding",
    "box",
    "height",
    "bounding",
    "box",
    "notice",
    "float",
    "numbers",
    "basically",
    "means",
    "relative",
    "entire",
    "size",
    "image",
    "annotations",
    "downloaded",
    "exact",
    "format",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "remember",
    "downloading",
    "annotations",
    "noticed",
    "many",
    "many",
    "many",
    "different",
    "options",
    "different",
    "options",
    "different",
    "formats",
    "could",
    "save",
    "annotations",
    "important",
    "definitely",
    "need",
    "download",
    "yolo",
    "going",
    "work",
    "yolo",
    "everything",
    "pretty",
    "much",
    "ready",
    "need",
    "order",
    "input",
    "yolo",
    "v8",
    "right",
    "select",
    "yolo",
    "exactly",
    "format",
    "need",
    "order",
    "continue",
    "next",
    "steps",
    "data",
    "different",
    "format",
    "maybe",
    "already",
    "collected",
    "annotate",
    "data",
    "data",
    "whatever",
    "format",
    "please",
    "remember",
    "need",
    "convert",
    "images",
    "actually",
    "convert",
    "annotations",
    "yolo",
    "format",
    "one",
    "things",
    "need",
    "data",
    "one",
    "things",
    "need",
    "order",
    "need",
    "format",
    "order",
    "structure",
    "data",
    "way",
    "use",
    "object",
    "detector",
    "yolo",
    "v8",
    "another",
    "thing",
    "create",
    "specific",
    "directories",
    "containing",
    "data",
    "right",
    "going",
    "need",
    "two",
    "directories",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "definitely",
    "need",
    "input",
    "names",
    "choose",
    "whatever",
    "name",
    "want",
    "need",
    "choose",
    "two",
    "names",
    "right",
    "images",
    "located",
    "directory",
    "called",
    "images",
    "labels",
    "located",
    "directory",
    "called",
    "labels",
    "way",
    "yolo",
    "v8",
    "works",
    "need",
    "create",
    "two",
    "directories",
    "within",
    "image",
    "directory",
    "going",
    "images",
    "click",
    "see",
    "images",
    "within",
    "images",
    "directory",
    "within",
    "train",
    "directory",
    "within",
    "images",
    "directory",
    "directry",
    "absolutely",
    "needed",
    "right",
    "could",
    "perfectly",
    "take",
    "images",
    "images",
    "could",
    "paste",
    "images",
    "right",
    "images",
    "directory",
    "everything",
    "fine",
    "want",
    "could",
    "something",
    "exactly",
    "could",
    "additional",
    "directory",
    "images",
    "images",
    "call",
    "whatever",
    "way",
    "want",
    "good",
    "strategy",
    "case",
    "want",
    "example",
    "train",
    "directory",
    "containing",
    "training",
    "images",
    "another",
    "directory",
    "could",
    "called",
    "validation",
    "example",
    "going",
    "many",
    "images",
    "order",
    "validate",
    "process",
    "training",
    "process",
    "algorithm",
    "could",
    "additional",
    "directory",
    "could",
    "called",
    "test",
    "example",
    "use",
    "directories",
    "order",
    "label",
    "data",
    "right",
    "create",
    "different",
    "versions",
    "data",
    "another",
    "thing",
    "commonly",
    "done",
    "could",
    "create",
    "many",
    "directories",
    "many",
    "different",
    "purposes",
    "perfectly",
    "fine",
    "could",
    "also",
    "paste",
    "images",
    "also",
    "perfectly",
    "fine",
    "see",
    "labels",
    "directory",
    "exactly",
    "directory",
    "called",
    "train",
    "within",
    "directory",
    "different",
    "files",
    "one",
    "files",
    "let",
    "show",
    "like",
    "going",
    "much",
    "better",
    "one",
    "files",
    "one",
    "txt",
    "files",
    "image",
    "images",
    "directory",
    "called",
    "exactly",
    "exactly",
    "file",
    "name",
    "different",
    "extension",
    "right",
    "case",
    "one",
    "called",
    "one",
    "called",
    "see",
    "exactly",
    "exactly",
    "file",
    "name",
    "example",
    "first",
    "image",
    "called",
    "oa2ea8f",
    "exactly",
    "name",
    "first",
    "image",
    "images",
    "directory",
    "called",
    "oa2ea8f",
    "basically",
    "absolutely",
    "every",
    "image",
    "images",
    "directory",
    "need",
    "annotations",
    "file",
    "file",
    "labels",
    "directory",
    "called",
    "exactly",
    "exactly",
    "different",
    "extension",
    "images",
    "annotations",
    "files",
    "another",
    "thing",
    "also",
    "defines",
    "structure",
    "need",
    "data",
    "pretty",
    "much",
    "remember",
    "need",
    "two",
    "directories",
    "one",
    "called",
    "images",
    "one",
    "called",
    "labels",
    "within",
    "images",
    "directories",
    "going",
    "images",
    "within",
    "labels",
    "directories",
    "annotations",
    "labels",
    "absolutely",
    "every",
    "single",
    "image",
    "images",
    "directory",
    "need",
    "file",
    "labels",
    "directory",
    "called",
    "exactly",
    "different",
    "extension",
    "images",
    "annotation",
    "files",
    "labels",
    "expressed",
    "yolo",
    "format",
    "many",
    "rows",
    "objects",
    "image",
    "every",
    "single",
    "one",
    "rows",
    "structure",
    "going",
    "five",
    "terms",
    "first",
    "one",
    "class",
    "id",
    "case",
    "one",
    "class",
    "id",
    "detecting",
    "alpacas",
    "case",
    "number",
    "always",
    "zero",
    "detecting",
    "one",
    "class",
    "different",
    "numbers",
    "position",
    "x",
    "position",
    "center",
    "bounding",
    "box",
    "width",
    "height",
    "everything",
    "expressed",
    "relative",
    "coordinates",
    "basically",
    "structure",
    "need",
    "data",
    "step",
    "pretty",
    "much",
    "converting",
    "data",
    "formatting",
    "data",
    "let",
    "move",
    "training",
    "going",
    "take",
    "data",
    "going",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "taken",
    "data",
    "format",
    "need",
    "order",
    "train",
    "yolo",
    "v8",
    "comes",
    "time",
    "training",
    "comes",
    "time",
    "going",
    "take",
    "custom",
    "data",
    "set",
    "going",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "yolo",
    "v8",
    "official",
    "repository",
    "one",
    "things",
    "like",
    "yolo",
    "v8",
    "order",
    "train",
    "object",
    "detector",
    "either",
    "python",
    "python",
    "instructions",
    "also",
    "use",
    "command",
    "line",
    "utility",
    "let",
    "see",
    "find",
    "also",
    "execute",
    "command",
    "like",
    "terminal",
    "something",
    "looks",
    "like",
    "pretty",
    "much",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "something",
    "really",
    "really",
    "liked",
    "something",
    "definitely",
    "going",
    "use",
    "projects",
    "think",
    "convenient",
    "easy",
    "way",
    "train",
    "object",
    "detector",
    "machine",
    "learning",
    "model",
    "first",
    "thing",
    "notice",
    "yolo",
    "v8",
    "two",
    "different",
    "ways",
    "train",
    "object",
    "detector",
    "either",
    "python",
    "usually",
    "run",
    "command",
    "terminal",
    "going",
    "show",
    "ways",
    "familiar",
    "ways",
    "also",
    "mentioned",
    "going",
    "show",
    "entire",
    "process",
    "local",
    "environment",
    "python",
    "project",
    "also",
    "going",
    "show",
    "process",
    "google",
    "colab",
    "know",
    "people",
    "prefer",
    "work",
    "local",
    "environment",
    "one",
    "people",
    "know",
    "people",
    "prefer",
    "work",
    "google",
    "colab",
    "depending",
    "group",
    "going",
    "show",
    "ways",
    "choose",
    "one",
    "like",
    "let",
    "start",
    "let",
    "go",
    "pycharm",
    "pycharm",
    "project",
    "created",
    "training",
    "file",
    "going",
    "edit",
    "order",
    "train",
    "object",
    "detector",
    "first",
    "thing",
    "going",
    "copy",
    "lines",
    "going",
    "copy",
    "everything",
    "going",
    "remove",
    "everything",
    "need",
    "copy",
    "paste",
    "want",
    "build",
    "new",
    "model",
    "scratch",
    "going",
    "keep",
    "sentence",
    "going",
    "train",
    "model",
    "going",
    "remove",
    "everything",
    "first",
    "sentence",
    "right",
    "two",
    "lines",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "going",
    "adjustments",
    "obviously",
    "first",
    "thing",
    "need",
    "import",
    "ultralytics",
    "library",
    "need",
    "use",
    "order",
    "import",
    "yolo",
    "order",
    "train",
    "yolo",
    "v8",
    "model",
    "python",
    "library",
    "need",
    "install",
    "usually",
    "go",
    "terminal",
    "something",
    "like",
    "pip",
    "install",
    "library",
    "name",
    "case",
    "nothing",
    "going",
    "happen",
    "already",
    "installed",
    "library",
    "please",
    "remember",
    "install",
    "also",
    "please",
    "mind",
    "installing",
    "library",
    "library",
    "many",
    "many",
    "dependencies",
    "going",
    "install",
    "many",
    "many",
    "many",
    "many",
    "different",
    "python",
    "packages",
    "going",
    "take",
    "lot",
    "space",
    "definitely",
    "please",
    "ready",
    "need",
    "lot",
    "available",
    "space",
    "order",
    "install",
    "library",
    "also",
    "going",
    "take",
    "time",
    "installing",
    "many",
    "many",
    "many",
    "different",
    "packages",
    "anyway",
    "let",
    "continue",
    "please",
    "remember",
    "install",
    "library",
    "two",
    "sentences",
    "need",
    "order",
    "run",
    "training",
    "python",
    "script",
    "sentence",
    "going",
    "leave",
    "loading",
    "specific",
    "yolo",
    "v8",
    "architecture",
    "specific",
    "yolo",
    "v8",
    "model",
    "going",
    "use",
    "see",
    "choose",
    "different",
    "models",
    "different",
    "versions",
    "different",
    "sizes",
    "yolo",
    "v8",
    "see",
    "nano",
    "small",
    "medium",
    "large",
    "extra",
    "large",
    "using",
    "nano",
    "version",
    "smallest",
    "one",
    "lightest",
    "one",
    "one",
    "going",
    "use",
    "yolo",
    "v8",
    "nano",
    "yolo",
    "v8",
    "n",
    "training",
    "sentence",
    "need",
    "edit",
    "file",
    "right",
    "need",
    "yaml",
    "file",
    "going",
    "contain",
    "configuration",
    "training",
    "created",
    "file",
    "named",
    "file",
    "sure",
    "appropriate",
    "name",
    "anyway",
    "name",
    "chosen",
    "file",
    "going",
    "edit",
    "parameter",
    "going",
    "input",
    "located",
    "located",
    "directory",
    "going",
    "work",
    "fine",
    "let",
    "show",
    "structure",
    "see",
    "simple",
    "configuration",
    "file",
    "keys",
    "path",
    "train",
    "val",
    "names",
    "right",
    "let",
    "start",
    "names",
    "let",
    "start",
    "going",
    "set",
    "different",
    "classes",
    "right",
    "training",
    "object",
    "detector",
    "detecting",
    "many",
    "different",
    "categories",
    "many",
    "different",
    "classes",
    "going",
    "input",
    "going",
    "type",
    "different",
    "classes",
    "case",
    "detecting",
    "alpacas",
    "class",
    "detecting",
    "one",
    "class",
    "number",
    "zero",
    "called",
    "alpaca",
    "detecting",
    "additional",
    "objects",
    "please",
    "remember",
    "include",
    "list",
    "objects",
    "detecting",
    "three",
    "parameters",
    "three",
    "arguments",
    "path",
    "absolute",
    "path",
    "directory",
    "containing",
    "images",
    "annotations",
    "please",
    "remember",
    "include",
    "absolute",
    "path",
    "ran",
    "issues",
    "trying",
    "specify",
    "relative",
    "path",
    "relative",
    "directory",
    "current",
    "directory",
    "project",
    "created",
    "directory",
    "data",
    "located",
    "using",
    "relative",
    "path",
    "issues",
    "noticed",
    "people",
    "issues",
    "well",
    "noticed",
    "github",
    "repository",
    "yolo",
    "v8",
    "noticed",
    "issues",
    "section",
    "people",
    "issues",
    "specifying",
    "relative",
    "path",
    "way",
    "fixed",
    "good",
    "way",
    "fix",
    "easy",
    "way",
    "fix",
    "specifying",
    "absolute",
    "path",
    "remember",
    "absolute",
    "path",
    "path",
    "directory",
    "directory",
    "contain",
    "images",
    "labels",
    "directories",
    "path",
    "need",
    "specify",
    "specify",
    "relative",
    "path",
    "location",
    "images",
    "located",
    "like",
    "specific",
    "images",
    "located",
    "right",
    "case",
    "relative",
    "path",
    "show",
    "location",
    "root",
    "directory",
    "go",
    "images",
    "located",
    "right",
    "exactly",
    "need",
    "specify",
    "see",
    "train",
    "data",
    "data",
    "algorithm",
    "going",
    "use",
    "training",
    "data",
    "another",
    "keyword",
    "val",
    "right",
    "validation",
    "dataset",
    "case",
    "going",
    "specify",
    "data",
    "used",
    "training",
    "reason",
    "want",
    "keep",
    "things",
    "simple",
    "tutorial",
    "going",
    "show",
    "entire",
    "process",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "custom",
    "data",
    "set",
    "want",
    "keep",
    "things",
    "simple",
    "going",
    "use",
    "data",
    "pretty",
    "much",
    "configuration",
    "file",
    "going",
    "back",
    "main",
    "pretty",
    "much",
    "need",
    "order",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "python",
    "simple",
    "going",
    "execute",
    "file",
    "going",
    "change",
    "number",
    "epochs",
    "going",
    "one",
    "epoch",
    "thing",
    "going",
    "show",
    "executed",
    "going",
    "show",
    "entire",
    "process",
    "notice",
    "everything",
    "working",
    "know",
    "everything",
    "running",
    "everything",
    "working",
    "fine",
    "continue",
    "let",
    "process",
    "let",
    "training",
    "one",
    "epoch",
    "continue",
    "see",
    "loading",
    "data",
    "already",
    "loaded",
    "data",
    "make",
    "use",
    "different",
    "information",
    "debugging",
    "information",
    "see",
    "see",
    "loading",
    "452",
    "images",
    "able",
    "load",
    "images",
    "right",
    "452",
    "452",
    "scroll",
    "see",
    "additional",
    "information",
    "additional",
    "values",
    "related",
    "training",
    "process",
    "training",
    "process",
    "going",
    "right",
    "training",
    "object",
    "detector",
    "additional",
    "information",
    "given",
    "process",
    "thing",
    "waiting",
    "wait",
    "process",
    "completed",
    "going",
    "stop",
    "video",
    "going",
    "fast",
    "forward",
    "video",
    "end",
    "training",
    "let",
    "see",
    "happens",
    "okay",
    "training",
    "completed",
    "see",
    "output",
    "says",
    "results",
    "saved",
    "go",
    "directory",
    "train39",
    "see",
    "many",
    "many",
    "different",
    "files",
    "files",
    "related",
    "training",
    "process",
    "done",
    "right",
    "example",
    "show",
    "images",
    "batches",
    "images",
    "used",
    "order",
    "train",
    "algorithm",
    "see",
    "name",
    "train",
    "batch0",
    "train",
    "batch1",
    "think",
    "train",
    "batch2",
    "lot",
    "different",
    "images",
    "lot",
    "different",
    "alpacas",
    "different",
    "images",
    "used",
    "training",
    "put",
    "together",
    "concatenated",
    "huge",
    "images",
    "see",
    "exactly",
    "images",
    "used",
    "training",
    "annotation",
    "top",
    "right",
    "bonding",
    "boxes",
    "top",
    "also",
    "similar",
    "images",
    "validation",
    "dataset",
    "right",
    "remember",
    "case",
    "using",
    "data",
    "validation",
    "use",
    "training",
    "exactly",
    "data",
    "different",
    "data",
    "labels",
    "validation",
    "data",
    "set",
    "training",
    "data",
    "set",
    "predictions",
    "images",
    "right",
    "see",
    "detecting",
    "anything",
    "absolutely",
    "prediction",
    "absolutely",
    "bounding",
    "box",
    "shallow",
    "training",
    "dummy",
    "training",
    "training",
    "algorithm",
    "one",
    "epoch",
    "example",
    "show",
    "output",
    "looks",
    "like",
    "show",
    "entire",
    "process",
    "real",
    "training",
    "nevertheless",
    "files",
    "going",
    "show",
    "better",
    "next",
    "step",
    "let",
    "show",
    "training",
    "done",
    "command",
    "line",
    "terminal",
    "using",
    "command",
    "showed",
    "using",
    "command",
    "like",
    "also",
    "let",
    "show",
    "training",
    "done",
    "google",
    "colab",
    "going",
    "terminal",
    "type",
    "something",
    "like",
    "yolo",
    "detect",
    "train",
    "data",
    "specify",
    "configuration",
    "file",
    "model",
    "number",
    "epochs",
    "exactly",
    "exactly",
    "going",
    "produce",
    "exactly",
    "output",
    "going",
    "change",
    "number",
    "epochs",
    "one",
    "make",
    "exactly",
    "let",
    "see",
    "happens",
    "see",
    "exactly",
    "output",
    "loaded",
    "images",
    "starting",
    "new",
    "training",
    "process",
    "training",
    "process",
    "going",
    "new",
    "run",
    "already",
    "created",
    "new",
    "directory",
    "train40",
    "going",
    "save",
    "information",
    "related",
    "training",
    "process",
    "going",
    "going",
    "exactly",
    "one",
    "exactly",
    "use",
    "command",
    "line",
    "use",
    "utility",
    "order",
    "training",
    "terminal",
    "see",
    "simple",
    "amazing",
    "simple",
    "amazing",
    "let",
    "show",
    "everything",
    "done",
    "google",
    "colab",
    "let",
    "go",
    "back",
    "browser",
    "show",
    "notebook",
    "created",
    "order",
    "train",
    "yolo",
    "v8",
    "google",
    "colab",
    "familiar",
    "google",
    "collab",
    "way",
    "create",
    "new",
    "notebook",
    "going",
    "google",
    "drive",
    "click",
    "new",
    "select",
    "option",
    "google",
    "collaboratory",
    "going",
    "create",
    "new",
    "google",
    "colab",
    "notebook",
    "use",
    "notebook",
    "train",
    "object",
    "detector",
    "let",
    "show",
    "notebook",
    "see",
    "contains",
    "one",
    "two",
    "three",
    "four",
    "five",
    "cells",
    "simple",
    "first",
    "thing",
    "need",
    "upload",
    "data",
    "going",
    "use",
    "order",
    "train",
    "detector",
    "going",
    "exactly",
    "data",
    "used",
    "exactly",
    "directories",
    "images",
    "directory",
    "label",
    "directory",
    "used",
    "first",
    "thing",
    "need",
    "execute",
    "cell",
    "mounts",
    "google",
    "drive",
    "instance",
    "google",
    "collab",
    "thing",
    "pressed",
    "enter",
    "cell",
    "may",
    "take",
    "time",
    "basically",
    "thing",
    "connect",
    "google",
    "drive",
    "access",
    "data",
    "google",
    "drive",
    "going",
    "select",
    "account",
    "allow",
    "pretty",
    "much",
    "comes",
    "data",
    "google",
    "drive",
    "right",
    "specific",
    "directory",
    "uploaded",
    "data",
    "case",
    "data",
    "located",
    "path",
    "right",
    "home",
    "google",
    "drive",
    "relative",
    "path",
    "location",
    "data",
    "files",
    "related",
    "project",
    "remember",
    "specify",
    "root",
    "directory",
    "directory",
    "uploaded",
    "data",
    "pretty",
    "much",
    "going",
    "execute",
    "cell",
    "save",
    "variable",
    "going",
    "execute",
    "cell",
    "pip",
    "install",
    "ultralytics",
    "command",
    "ran",
    "terminal",
    "local",
    "environment",
    "going",
    "run",
    "google",
    "collab",
    "remember",
    "start",
    "command",
    "exclamation",
    "mark",
    "means",
    "running",
    "command",
    "terminal",
    "process",
    "executed",
    "notebook",
    "launched",
    "remember",
    "include",
    "exclamation",
    "mark",
    "everything",
    "seems",
    "okay",
    "everything",
    "seems",
    "ready",
    "continue",
    "next",
    "cell",
    "one",
    "see",
    "done",
    "exactly",
    "structure",
    "input",
    "exactly",
    "lines",
    "local",
    "environment",
    "show",
    "see",
    "imported",
    "ultralytics",
    "defined",
    "yolo",
    "object",
    "called",
    "exactly",
    "obviously",
    "going",
    "need",
    "another",
    "yaml",
    "file",
    "going",
    "need",
    "yaml",
    "file",
    "google",
    "drive",
    "file",
    "specified",
    "like",
    "exactly",
    "configuration",
    "um",
    "yaml",
    "file",
    "showed",
    "local",
    "environment",
    "exactly",
    "idea",
    "exactly",
    "specify",
    "absolute",
    "path",
    "google",
    "drive",
    "directory",
    "difference",
    "difference",
    "see",
    "small",
    "mistake",
    "see",
    "data",
    "uploaded",
    "images",
    "labels",
    "directory",
    "within",
    "another",
    "rectory",
    "called",
    "data",
    "let",
    "something",
    "going",
    "create",
    "new",
    "directory",
    "called",
    "data",
    "images",
    "labels",
    "going",
    "put",
    "everything",
    "right",
    "everything",
    "consistent",
    "everything",
    "okay",
    "images",
    "train",
    "images",
    "within",
    "directory",
    "everything",
    "okay",
    "let",
    "go",
    "back",
    "google",
    "collab",
    "every",
    "time",
    "make",
    "edit",
    "every",
    "time",
    "something",
    "google",
    "drive",
    "always",
    "good",
    "idea",
    "restart",
    "runtime",
    "going",
    "going",
    "execute",
    "commands",
    "really",
    "need",
    "pip",
    "install",
    "library",
    "already",
    "installed",
    "environment",
    "going",
    "execute",
    "file",
    "think",
    "additional",
    "edit",
    "uh",
    "file",
    "called",
    "pretty",
    "much",
    "going",
    "run",
    "one",
    "epoch",
    "everything",
    "exactly",
    "local",
    "environment",
    "let",
    "see",
    "happens",
    "see",
    "exactly",
    "process",
    "everything",
    "looks",
    "pretty",
    "much",
    "loading",
    "data",
    "loading",
    "models",
    "everything",
    "going",
    "fine",
    "going",
    "pretty",
    "much",
    "process",
    "see",
    "takes",
    "additional",
    "time",
    "load",
    "data",
    "running",
    "environment",
    "running",
    "notebook",
    "given",
    "environment",
    "taking",
    "data",
    "google",
    "drive",
    "takes",
    "time",
    "slower",
    "process",
    "definitely",
    "idea",
    "thing",
    "need",
    "wait",
    "uh",
    "process",
    "completed",
    "pretty",
    "much",
    "think",
    "really",
    "make",
    "sense",
    "wait",
    "like",
    "going",
    "exactly",
    "process",
    "local",
    "environment",
    "end",
    "execution",
    "going",
    "results",
    "given",
    "directory",
    "directory",
    "notebook",
    "running",
    "process",
    "end",
    "process",
    "please",
    "remember",
    "execute",
    "command",
    "going",
    "take",
    "files",
    "defined",
    "runs",
    "directory",
    "contains",
    "runs",
    "made",
    "results",
    "produced",
    "going",
    "take",
    "directory",
    "directory",
    "chosen",
    "files",
    "data",
    "google",
    "collab",
    "please",
    "remember",
    "otherwise",
    "would",
    "able",
    "access",
    "data",
    "data",
    "contains",
    "results",
    "everything",
    "trained",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "google",
    "collab",
    "see",
    "process",
    "straightforward",
    "pretty",
    "much",
    "exactly",
    "process",
    "exactly",
    "idea",
    "local",
    "environment",
    "easy",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "y8",
    "done",
    "everything",
    "data",
    "right",
    "collected",
    "data",
    "annotated",
    "data",
    "taken",
    "everything",
    "format",
    "yolo",
    "v8",
    "needs",
    "order",
    "train",
    "object",
    "detector",
    "everything",
    "completed",
    "running",
    "process",
    "running",
    "training",
    "super",
    "straightforward",
    "going",
    "training",
    "process",
    "let",
    "continue",
    "testing",
    "let",
    "see",
    "models",
    "trained",
    "performed",
    "right",
    "let",
    "move",
    "next",
    "step",
    "last",
    "step",
    "process",
    "going",
    "take",
    "model",
    "produced",
    "training",
    "step",
    "going",
    "test",
    "performs",
    "last",
    "step",
    "process",
    "going",
    "complete",
    "training",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "trained",
    "model",
    "go",
    "uh",
    "directory",
    "remember",
    "directory",
    "showed",
    "regarding",
    "directory",
    "information",
    "saved",
    "information",
    "regarding",
    "training",
    "process",
    "saved",
    "obviously",
    "going",
    "show",
    "training",
    "like",
    "shallow",
    "training",
    "like",
    "dummy",
    "training",
    "instead",
    "going",
    "show",
    "results",
    "another",
    "training",
    "preparing",
    "video",
    "conducted",
    "exactly",
    "process",
    "training",
    "process",
    "done",
    "100",
    "epochs",
    "like",
    "deeper",
    "training",
    "right",
    "let",
    "show",
    "files",
    "produced",
    "know",
    "different",
    "tools",
    "order",
    "test",
    "performance",
    "model",
    "trained",
    "basically",
    "confusion",
    "matrix",
    "going",
    "give",
    "lot",
    "information",
    "regarding",
    "different",
    "classes",
    "predicted",
    "different",
    "classes",
    "confused",
    "right",
    "familiar",
    "confusion",
    "matrix",
    "looks",
    "like",
    "look",
    "like",
    "know",
    "read",
    "information",
    "basically",
    "going",
    "give",
    "information",
    "regarding",
    "different",
    "classes",
    "confused",
    "case",
    "one",
    "class",
    "alpaca",
    "see",
    "generates",
    "another",
    "category",
    "like",
    "uh",
    "default",
    "category",
    "background",
    "information",
    "really",
    "say",
    "much",
    "says",
    "classes",
    "confused",
    "given",
    "object",
    "detector",
    "think",
    "valuable",
    "information",
    "metrics",
    "outputs",
    "really",
    "going",
    "mind",
    "confusion",
    "matrix",
    "plots",
    "curves",
    "example",
    "f1",
    "confidence",
    "curve",
    "going",
    "mind",
    "plot",
    "either",
    "remember",
    "starting",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "idea",
    "tutorial",
    "make",
    "like",
    "introductory",
    "training",
    "introductory",
    "process",
    "going",
    "mind",
    "different",
    "uh",
    "plots",
    "involves",
    "lot",
    "knowledge",
    "lot",
    "expertise",
    "extract",
    "information",
    "plots",
    "really",
    "idea",
    "tutorial",
    "let",
    "things",
    "differently",
    "let",
    "focus",
    "plot",
    "also",
    "available",
    "results",
    "saved",
    "directory",
    "see",
    "many",
    "many",
    "many",
    "different",
    "plots",
    "definitely",
    "go",
    "crazy",
    "analyzing",
    "information",
    "one",
    "two",
    "three",
    "four",
    "five",
    "ten",
    "different",
    "plots",
    "could",
    "knock",
    "analyzing",
    "extracting",
    "information",
    "different",
    "plots",
    "idea",
    "make",
    "introductory",
    "video",
    "introductory",
    "tutorial",
    "long",
    "story",
    "short",
    "going",
    "give",
    "one",
    "tip",
    "something",
    "one",
    "thing",
    "focus",
    "plots",
    "going",
    "take",
    "something",
    "video",
    "test",
    "performance",
    "model",
    "trained",
    "using",
    "yolo",
    "v8",
    "train",
    "object",
    "detector",
    "make",
    "sure",
    "loss",
    "going",
    "right",
    "many",
    "plots",
    "related",
    "loss",
    "function",
    "one",
    "one",
    "one",
    "training",
    "set",
    "related",
    "validation",
    "set",
    "make",
    "sure",
    "losses",
    "going",
    "right",
    "like",
    "would",
    "say",
    "simple",
    "way",
    "analyze",
    "functions",
    "analyze",
    "plots",
    "say",
    "powerful",
    "would",
    "appear",
    "make",
    "sure",
    "losses",
    "going",
    "given",
    "loss",
    "function",
    "could",
    "many",
    "different",
    "situations",
    "could",
    "loss",
    "function",
    "going",
    "would",
    "say",
    "good",
    "situation",
    "could",
    "loss",
    "function",
    "started",
    "go",
    "looks",
    "something",
    "like",
    "flat",
    "line",
    "something",
    "looks",
    "like",
    "flat",
    "line",
    "means",
    "training",
    "process",
    "stuck",
    "could",
    "good",
    "thing",
    "maybe",
    "algorithm",
    "machine",
    "learning",
    "model",
    "really",
    "learned",
    "everything",
    "learn",
    "data",
    "maybe",
    "flat",
    "line",
    "really",
    "bad",
    "thing",
    "maybe",
    "know",
    "would",
    "analyze",
    "stuff",
    "look",
    "loss",
    "function",
    "could",
    "also",
    "situation",
    "loss",
    "function",
    "going",
    "right",
    "situation",
    "friend",
    "loss",
    "function",
    "going",
    "huge",
    "problem",
    "something",
    "obviously",
    "right",
    "training",
    "saying",
    "analyzing",
    "loss",
    "function",
    "happens",
    "loss",
    "going",
    "give",
    "lot",
    "information",
    "ideally",
    "go",
    "going",
    "everything",
    "going",
    "well",
    "likely",
    "something",
    "like",
    "flatline",
    "well",
    "could",
    "good",
    "thing",
    "bad",
    "thing",
    "know",
    "could",
    "different",
    "situations",
    "going",
    "done",
    "something",
    "super",
    "super",
    "wrong",
    "know",
    "going",
    "code",
    "know",
    "going",
    "training",
    "process",
    "something",
    "obviously",
    "wrong",
    "right",
    "like",
    "simple",
    "naive",
    "way",
    "analyze",
    "information",
    "trust",
    "going",
    "give",
    "lot",
    "lot",
    "information",
    "know",
    "start",
    "working",
    "testing",
    "performance",
    "model",
    "would",
    "say",
    "looking",
    "plots",
    "analyzing",
    "information",
    "would",
    "say",
    "research",
    "people",
    "research",
    "like",
    "like",
    "freelancer",
    "really",
    "research",
    "going",
    "show",
    "another",
    "way",
    "analyze",
    "performance",
    "model",
    "trained",
    "perspective",
    "makes",
    "sense",
    "analyze",
    "like",
    "involves",
    "see",
    "performs",
    "real",
    "data",
    "right",
    "performs",
    "data",
    "used",
    "order",
    "make",
    "inferences",
    "see",
    "happens",
    "first",
    "step",
    "practical",
    "visual",
    "evaluation",
    "model",
    "model",
    "performs",
    "looking",
    "images",
    "remember",
    "looked",
    "images",
    "one",
    "regarding",
    "labels",
    "validation",
    "set",
    "one",
    "predictions",
    "completely",
    "empty",
    "see",
    "predictions",
    "produced",
    "completely",
    "empty",
    "detecting",
    "position",
    "alpacas",
    "super",
    "super",
    "accurately",
    "mistakes",
    "actually",
    "example",
    "detecting",
    "person",
    "alpaca",
    "detecting",
    "also",
    "person",
    "alpaca",
    "missdetections",
    "example",
    "alpaca",
    "detected",
    "missdetections",
    "see",
    "results",
    "pretty",
    "much",
    "okay",
    "right",
    "everything",
    "looks",
    "pretty",
    "much",
    "okay",
    "go",
    "detecting",
    "pretty",
    "much",
    "everything",
    "missdetection",
    "error",
    "detecting",
    "alpaca",
    "actually",
    "nothing",
    "things",
    "perfect",
    "everything",
    "seems",
    "pretty",
    "much",
    "okay",
    "first",
    "way",
    "going",
    "analyze",
    "performance",
    "model",
    "lot",
    "like",
    "visual",
    "way",
    "see",
    "performs",
    "looking",
    "plots",
    "looking",
    "metrics",
    "right",
    "looking",
    "real",
    "examples",
    "see",
    "model",
    "performs",
    "real",
    "data",
    "maybe",
    "biased",
    "analyze",
    "things",
    "like",
    "freelancer",
    "way",
    "usually",
    "works",
    "freelancer",
    "building",
    "model",
    "deliver",
    "project",
    "client",
    "tell",
    "client",
    "oh",
    "yeah",
    "model",
    "perfect",
    "take",
    "look",
    "plots",
    "take",
    "look",
    "metrics",
    "everything",
    "amazing",
    "client",
    "tests",
    "model",
    "work",
    "client",
    "care",
    "pretty",
    "plots",
    "right",
    "really",
    "mind",
    "lot",
    "plots",
    "maybe",
    "biased",
    "freelancer",
    "freelancing",
    "works",
    "prefer",
    "like",
    "visual",
    "evaluation",
    "first",
    "step",
    "notice",
    "already",
    "better",
    "performance",
    "okay",
    "performance",
    "data",
    "currently",
    "looking",
    "right",
    "remember",
    "validation",
    "data",
    "pretty",
    "much",
    "data",
    "use",
    "training",
    "really",
    "say",
    "much",
    "going",
    "show",
    "performs",
    "data",
    "algorithm",
    "never",
    "seen",
    "completely",
    "absolutely",
    "unseen",
    "data",
    "good",
    "practice",
    "want",
    "test",
    "performance",
    "model",
    "prepared",
    "videos",
    "let",
    "show",
    "videos",
    "basically",
    "remember",
    "completely",
    "unseen",
    "data",
    "first",
    "video",
    "see",
    "alpaca",
    "alpaca",
    "walking",
    "around",
    "alpaca",
    "stuff",
    "alpaca",
    "everyday",
    "life",
    "alpaca",
    "right",
    "walking",
    "around",
    "one",
    "place",
    "uh",
    "nothing",
    "alpaca",
    "stuff",
    "lot",
    "one",
    "videos",
    "prepared",
    "another",
    "video",
    "also",
    "alpaca",
    "alpaca",
    "related",
    "stuff",
    "um",
    "another",
    "video",
    "going",
    "see",
    "remember",
    "completely",
    "unseen",
    "data",
    "also",
    "another",
    "video",
    "going",
    "show",
    "model",
    "performs",
    "three",
    "videos",
    "made",
    "script",
    "python",
    "loads",
    "videos",
    "calls",
    "predict",
    "method",
    "yolo",
    "v8",
    "loading",
    "model",
    "trained",
    "applying",
    "predictions",
    "model",
    "seeing",
    "performs",
    "videos",
    "first",
    "video",
    "showed",
    "detections",
    "getting",
    "see",
    "getting",
    "absolutely",
    "perfect",
    "detection",
    "remember",
    "completely",
    "unseen",
    "data",
    "getting",
    "going",
    "say",
    "100",
    "perfect",
    "detection",
    "would",
    "say",
    "pretty",
    "good",
    "say",
    "pretty",
    "pretty",
    "good",
    "order",
    "start",
    "working",
    "training",
    "process",
    "uh",
    "yeah",
    "would",
    "say",
    "pretty",
    "good",
    "one",
    "examples",
    "let",
    "show",
    "another",
    "example",
    "one",
    "video",
    "showed",
    "see",
    "also",
    "detecting",
    "exactly",
    "position",
    "alpaca",
    "cases",
    "text",
    "going",
    "outside",
    "frame",
    "really",
    "space",
    "everything",
    "seems",
    "okay",
    "video",
    "taking",
    "exactly",
    "position",
    "uh",
    "alpaca",
    "bonding",
    "box",
    "cases",
    "really",
    "fit",
    "alpaca",
    "face",
    "yeah",
    "everything",
    "seems",
    "working",
    "fine",
    "video",
    "showed",
    "see",
    "case",
    "detection",
    "little",
    "broken",
    "many",
    "missdetections",
    "everything",
    "much",
    "better",
    "yeah",
    "case",
    "working",
    "better",
    "working",
    "well",
    "would",
    "say",
    "three",
    "examples",
    "one",
    "one",
    "performing",
    "better",
    "one",
    "really",
    "like",
    "performed",
    "case",
    "alpaca",
    "like",
    "starting",
    "alpaca",
    "journey",
    "like",
    "good",
    "detection",
    "stable",
    "detection",
    "like",
    "breaks",
    "little",
    "nevertheless",
    "would",
    "say",
    "okay",
    "also",
    "detecting",
    "alpaca",
    "uh",
    "say",
    "working",
    "pretty",
    "much",
    "okay",
    "pretty",
    "much",
    "going",
    "testing",
    "phase",
    "remember",
    "want",
    "test",
    "performance",
    "model",
    "trained",
    "using",
    "yellow",
    "v8",
    "lot",
    "information",
    "directory",
    "created",
    "yolo",
    "model",
    "end",
    "training",
    "process",
    "files",
    "lot",
    "information",
    "knock",
    "go",
    "crazy",
    "analyzing",
    "different",
    "plots",
    "keep",
    "simple",
    "take",
    "look",
    "happened",
    "training",
    "loss",
    "validation",
    "loss",
    "loss",
    "functions",
    "make",
    "sure",
    "going",
    "least",
    "thing",
    "need",
    "make",
    "sure",
    "see",
    "performs",
    "images",
    "videos",
    "take",
    "look",
    "performs",
    "unseen",
    "data",
    "make",
    "decisions",
    "maybe",
    "use",
    "model",
    "decide",
    "train",
    "case",
    "analyze",
    "information",
    "see",
    "loss",
    "functions",
    "going",
    "going",
    "notice",
    "lot",
    "space",
    "improve",
    "training",
    "improve",
    "performance",
    "reached",
    "moment",
    "everything",
    "appears",
    "stuck",
    "right",
    "like",
    "flat",
    "line",
    "far",
    "away",
    "something",
    "would",
    "would",
    "new",
    "deeper",
    "training",
    "continue",
    "learning",
    "process",
    "also",
    "w",
    "change",
    "validation",
    "data",
    "something",
    "completely",
    "different",
    "training",
    "data",
    "even",
    "information",
    "pretty",
    "much",
    "would",
    "order",
    "iterate",
    "order",
    "make",
    "better",
    "model",
    "powerful",
    "model",
    "going",
    "today",
    "name",
    "felipe",
    "computer",
    "region",
    "engineer",
    "enjoyed",
    "video",
    "please",
    "remember",
    "click",
    "like",
    "button",
    "going",
    "help",
    "lot",
    "going",
    "help",
    "channel",
    "know",
    "going",
    "today",
    "channel",
    "make",
    "tutorials",
    "coding",
    "tutorials",
    "related",
    "computer",
    "vision",
    "machine",
    "learning",
    "also",
    "share",
    "experience",
    "computer",
    "vision",
    "engineer",
    "talk",
    "different",
    "things",
    "related",
    "computer",
    "vision",
    "machine",
    "learning",
    "curious",
    "know",
    "topics",
    "please",
    "consider",
    "subscribe",
    "channel",
    "going",
    "today",
    "see",
    "next",
    "video"
  ],
  "keywords": [
    "name",
    "video",
    "going",
    "train",
    "object",
    "detector",
    "using",
    "yolo",
    "v8",
    "step",
    "entire",
    "process",
    "data",
    "need",
    "order",
    "annotate",
    "computer",
    "annotation",
    "tool",
    "structure",
    "format",
    "use",
    "training",
    "show",
    "two",
    "different",
    "ways",
    "local",
    "environment",
    "also",
    "google",
    "collab",
    "test",
    "performance",
    "model",
    "trained",
    "super",
    "everything",
    "know",
    "set",
    "let",
    "start",
    "tutorial",
    "first",
    "thing",
    "remember",
    "want",
    "type",
    "machine",
    "learning",
    "definitely",
    "algorithm",
    "specific",
    "case",
    "important",
    "images",
    "downloaded",
    "alpacas",
    "alpaca",
    "see",
    "situations",
    "right",
    "exactly",
    "obviously",
    "could",
    "whatever",
    "take",
    "cell",
    "something",
    "available",
    "open",
    "image",
    "dataset",
    "work",
    "looks",
    "like",
    "go",
    "select",
    "detection",
    "uh",
    "many",
    "categories",
    "annotations",
    "looking",
    "one",
    "bounding",
    "box",
    "another",
    "example",
    "project",
    "used",
    "say",
    "next",
    "continue",
    "collected",
    "lot",
    "maybe",
    "time",
    "already",
    "annotated",
    "objects",
    "really",
    "make",
    "would",
    "tools",
    "pretty",
    "much",
    "absolutely",
    "related",
    "familiar",
    "perfect",
    "better",
    "create",
    "new",
    "called",
    "working",
    "label",
    "created",
    "labels",
    "task",
    "works",
    "yeah",
    "click",
    "okay",
    "number",
    "annotating",
    "detecting",
    "always",
    "idea",
    "good",
    "completely",
    "detect",
    "done",
    "people",
    "person",
    "situation",
    "every",
    "single",
    "fine",
    "way",
    "think",
    "additional",
    "showed",
    "input",
    "file",
    "files",
    "three",
    "directory",
    "look",
    "basically",
    "information",
    "class",
    "relative",
    "please",
    "things",
    "directories",
    "located",
    "within",
    "validation",
    "python",
    "command",
    "line",
    "execute",
    "terminal",
    "library",
    "install",
    "simple",
    "path",
    "classes",
    "specify",
    "running",
    "results",
    "notebook",
    "drive",
    "performs",
    "plots",
    "loss",
    "function",
    "analyze",
    "videos"
  ]
}