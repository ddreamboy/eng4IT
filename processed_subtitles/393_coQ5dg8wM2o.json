{
  "text": "hey everybody this is gregory from dapp\nuniversity so today i'm going to show\nyou how to write your first blockchain\napplication i'll show you how to create\na to-do list that's powered by ethereum\nsmart contracts i'll show you how to\ncreate your first ethereum smart\ncontract with a solidity programming\nlanguage or write tests against the\nsmart contract deploy it to a blockchain\nand we'll also create a client side\napplication for the to-do list so if\nyou're new around here be sure to\nsubscribe to this channel and click the\nlike button down below and also you can\ndownload my courses for free on my\nwebsite over at dap university dot com\nforward slash free download i've got a\nlink to that down in the description\nbelow and also on my website you can\nfind a full-length article to accompany\nthis video you can actually follow that\nstep by step as you're following this\ntutorial and i've also got a link to\nthat in the video description so before\nwe start actually building the\napplication let's get a high level\noverview of how a blockchain application\npowered by smart contracts actually\nworks so how does a blockchain work and\nhow does a blockchain application work\nwell i've chosen a to-do list for this\ntutorial because that's a really common\nway to learn any new technology and i\nwant to use that to show you how a\nblockchain application works so first\nlet's look at how a to-do list would\nwork as a web application and then i'll\nshow you how it would work as a\nblockchain application so i'll put my\nwhiteboard up here to demonstrate\nso normally whenever you access a web\napplication like a to-do list for\nexample\nyou use a web browser and you connect to\na web server over the internet\nand you access you know all the code and\nall the data from this web server\nso like this you basically\nconnect from your web browser to the\nserver and on the server it contains all\nthe you know client-side files like html\ncss and javascript\nit you know contains all of the back-end\ncode for the server right any business\nlogic you might write and any data\nthat's stored in your application is\nstored in a database right\nand pretty much any other to-do list\ntutorial that's out there is going to\nshow you how to write you know a\nclient-side application and html and css\nand javascript and then it's going to\nshow you how to basically\ndo some business logic on a web backend\nthat you know creates reads writes\nupdates to do's and it puts them inside\nof a database like this right\nand all that's you know on a central\nserver and that's how you build a to-do\nlist on a web application\nso how would you build a to-do list on a\nblockchain well it would work a little\nbit differently so instead of connecting\ndirectly to a server you know we're\ngonna access our to-do list via a\nbrowser\nand we're gonna you know connect to\na client-side application that we will\nbuild and this will just be a simple\nclient-side application on a web server\nbut this client-side application isn't\ngonna talk to a web backend in a\ndatabase instead it's going to actually\ntalk directly to the blockchain and on\nthe blockchain we're going to have code\nthat's going to be written with ethereum\nsmart contracts\nthat will contain all of the business\nlogic for our to-do list\nand all the to-do items are going to be\nstored on the blockchain itself\nand that's fundamentally how a\nblockchain application would work and\nhow it's different from a traditional\nweb application\nso that might bring up a lot of\nquestions like well how do we connect to\na blockchain and how does the blockchain\nwork like what even is a blockchain\nwell i'll pause here and tell you a\nlittle bit more about that so what even\nis a blockchain right or client-side\napplication is actually talking to a\nblockchain right here\nso it's actually a separate network okay\nand a blockchain is a peer-to-peer\nnetwork of nodes that all talk to one\nanother it's a distributed network so\nthere's actually different computers\ndifferent machines that talk to one\nanother and we can connect to an\nindividual node on the blockchain in\norder to use it that's what our web\napplication is doing here\nso\nall the nodes on the network participate\nin running the network they all contain\na copy of the code on the blockchain and\nall of the data on the blockchain\nand all of the data on the blockchain is\ncontained in bundles of records called\nblocks which are chained together to\nmake up the blockchain and all the nodes\non the network also participate in\nensuring that the data on the blockchain\nthe public ledger is secure and\nunchangeable and that's what makes the\nblockchain so powerful and so what about\nthe code on the blockchain\nwell all the code on the blockchain is\ncontained in smart contracts\nso smart contracts are basically just\nprograms that run on the blockchain and\nthey're going to be the building blocks\nof blockchain applications and that's\nwhat we're going to build our to-do list\nout of we're going to write a smart\ncontract that will contain all the tasks\nin the to-do list and allow us to add\nnew ones and complete them and things\nlike that so smart contracts are written\nin a programming language called\nsolidity\nand all the code in the smart contract\nis immutable which that means it's\nunchangeable whenever we deploy to the\nblockchain we won't be able to update\nthat code and that's important to\nunderstand because that's what makes the\nblockchain so secure whenever we put\ncode on the blockchain we know we can\ntrust it at that point it's called\ntrustless for a reason\nwhenever it's on the blockchain we know\nthat no one will change it and therefore\nwe know the to-do list will behave the\nsame way every time and sometimes i\nactually think about smart contracts\nkind of like microservices on the web\nthey're on the blockchain and they read\nand write data from the blockchain and\nthey do stuff with it you know they\nexecute business logic all right now go\nback to the drawing board and kind of\ngive you a refresher about how our\napplication is going to work\nagain we're going to connect the\napplication with a web browser and we're\ngoing to build a client-side application\nin html css and javascript\nand that client-side application is\ngoing to talk directly to the blockchain\nand that's where we're going to put our\nsmart contract we'll create the to-do\nlist with an ethereum smart contract\nwritten in solidity and we'll compile it\nand deploy it to the blockchain it will\nalso connect to the blockchain network\nwith our personal account with an\nethereum wallet in our browser and i'll\nshow you how to get that set up in this\ntutorial as well so now we've seen how\nblockchain works and how we can build\nour to-do list application on the\nblockchain so let's jump in and start\nprogramming here's a preview of the\napplication that will develop in this\ntutorial this will be a to-do list\npowered by an ethereum smart contract\nwhere we'll be able to add new to-do\nitems and we'll be able to check items\noff of the to-do list and before you get\nstarted you need to make sure you have\nnode.js already installed on your\ncomputer you can see if you have node\ninstalled by going to your terminal and\ntyping node v you can install node with\na package manager like homebrew or you\ncan download it directly from the\nnode.js website the first item in the\nblockchain developer toolkit is a\npersonal blockchain we're going to use\nganache as our personal blockchain for\nthis tutorial you can head over to\ntruffleframework.com forward slash\nganache to download it you can click\nthis download link and whenever you've\ndownloaded it make sure you install it\nand when you open it you've got a local\nblockchain running\nso what is ganache you know what is a\npersonal blockchain well a personal\nblockchain is like a real blockchain\nnetwork you know that's connected to the\npublic or anyone can connect to it but\nit runs on a computer it's you know a\nclosed network and ganache basically you\nknow is a process that runs on a\ncomputer that spins up this blockchain\nand runs on a server\nso we can use this to develop smart\ncontracts we can run tests against it we\ncan run scripts against the network\ndevelop applications that actually talk\nto this blockchain and it's really\nhelpful and it's an invaluable tool in\nthe blockchain developer toolkit\nso\num if you open ganache you'll see you\nknow 10 accounts listed here these are\nthe addresses to each account on the\nside and you'll see you know these\nbalances you'll see 100 ether and this\nis the ethereum cryptocurrency that each\naccount has and it's you know required\nto you know pay gas fees in the network\nand stuff like that all right so that's\nan overview of the ganache personal\nblockchain network and we're going to\nleave ganache here set up in our project\nbecause we're going to need it uh\nrunning in order to develop our project\nthe next dependency is the truffle\nframework we're going to use the truffle\nframework to develop ethereum smart\ncontracts with the solidity programming\nlanguage you can install truffle by\ngoing to your terminal and typing npm\ninstall\ng truffle at\n5.0.2 and it's important that you use\nthis exact version in order to follow\nalong with this tutorial so truffle is a\nsuite of tools that allows us to you\nknow develop smart contracts write tests\nagainst smart contracts deploy smart\ncontracts to the blockchain it gives us\ndevelopment console and that also allows\nus to develop client-side applications\ninside of our project so it does a lot\nand i'm going to show off all those\nfeatures in this tutorial the next\ndependency is the meta mask extension\nfor google chrome\nremember that the ethereum blockchain is\na network\nand we need a special browser extension\nin order to connect to that network and\nthat's where metamask comes into play\nmetamask will allow us to connect to the\nblockchain with our personal account and\nactually interact with the smart\ncontract that will develop in this\ntutorial\nyou can install metamask by going to the\ngoogle chrome web store and searching\nfor metamask and clicking install\nand once you've installed it just make\nsure that you enable it inside of your\nchrome extensions like this you can also\nsee the little fox icon in your\nextensions tab\nnow let's create the project i'll start\nby creating a directory for our project\nlike this\neth just stands for ethereum so i'll\nenter into that newly created directory\nand now once we're inside of here we'll\nactually create a new truffle project\nbut before we do that i just want to\nmake sure that you're using the correct\ntruffle version you can check your\ntruffle version like this\ntruffle version\nand you want to ensure that your version\nis the same as mine which is\n5.0.2 so it's not go ahead and check out\nthe dependencies section of this video\nto see how to install the specific\nversion of truffle\nso now we'll initialize a new truffle\nproject like this we'll just say truffle\ninit\nall right and now we've successfully\nunboxed a new travel project and now i'm\ngoing to actually create a package.json\nfile in order to you know pull in some\ndevelopment dependencies for the project\nso i'll say touch\npackage dot json\nall right and now i'm going to open this\nproject inside of sublime text that's\nthe text editor i'm using\nso let's go to the package.json file we\ncan actually see the project directory\nover here and we can see the newly\ncreated package.json file and it's empty\ni'm going to paste in the contents of\nthis file that we'll use for this\ntutorial and you can actually\nget this package.json file by cloning\nthis repository on the github link in\nthe description down below all right so\nhere's the dependencies for the project\ni'm just going to go ahead and save this\nlike i said i just pasted these in here\nand you can see we have a few\ndependencies like the bootstrap\nframework we'll use this for building\nout um the client-side application we've\ngot some dependencies for testing the\nsmart contracts a server for running the\nclient-side application\nand you know some other truffle specific\ndevelopment dependencies and i've locked\nthese versions um so that you can keep\nfollowing this tutorial in the future so\nmake sure that all these versions match\nwhat i have here\nso now i'm actually going to install the\ndependencies for the project like this\nso i'll just say npm install all right\nso now they're installed\nnow let's go back into our project and\nactually create the smart contract file\nthat we'll use to build the to-do list\nwe'll do that by going to the contracts\ndirectory and you can see there's a\nsmart contract that exists inside of\nhere this is actually a smart contract\nthat comes bundled with truffle that\nmanages migrations to the network and\ni'll explain that here in a little bit\nand now i'll create a new file inside\nthis directory called to do list\ndot sol\nso we can see that to-do list is\ncapitalized to do list\nand it's in the same project directory\nhere\nso now let's actually create the smart\ncontract that will manage the to-do list\nfor the application the first thing we\nwant to do inside this file is actually\ndeclare the version of the solidity\nprogramming language that we want to use\nwe'll do that like this we'll say pragma\nsolidity\nwe'll use a carrot\ni'm going to say\nversion 0.5.0\nand we'll end this line with a semicolon\nall right\nnow the next thing we do is actually\ndeclare the smart contract we do that\nwith the contract keyword say contract\nand we want to call this contract a\nto-do list which is the same name as the\nfile say to-do list\nand we follow that with some opening and\nclosing curly braces\nand inside of here is where we actually\nwrite all of the code for the smart\ncontract now i'll go ahead and bump the\nfont up so you all can see this a little\nbetter\nso the first thing that we'll do inside\nof here is just keep track of the number\nof tasks that are in the to-do list\nand we'll store this value inside the\nsmart contract as a way to kind of get\nstarted and just make sure that\neverything is set up properly in our\nproject we'll deploy this simple smart\ncontract to the blockchain and actually\nsee if we can connect to it before we\nyou know do anything any more\ncomplicated than that\nso first we'll keep track of the number\nof to-do lists inside of the smart\ncontract with a variable and it'll be a\nspecial kind of variable and solidity\ncalled a state variable\nand we can declare a state variable like\nthis we'll say unt\ntask count\nso state variables inside of solidity\nare actually written to the blockchain\nand that's what they're called state\nvariables they actually represent the\nstate of this smart contract on the\nblockchain\nand the state of the smart contract is\ngoing to change anytime this task count\nchanges and these are a lot like you\nknow class variables in an\nobject-oriented context where you know\nthe scope of the variable belongs to the\nentire smart contract not necessarily\nlike a function or something like that\nwe'll see that more as we continue on\nthrough this tutorial\nbut initially we can set this value to\nzero like this\nall right we just say equal zero\nand we can also\ncreate a way to read this value from the\nsmart contract with a keyword called\npublic\nall right and what that does is actually\nprovides some a function for us\nthat allows us to read the value task\ncount from the to-do list and solidity\nkind of just magically gives us a\nfunction whenever we use this public\nkeyword\nall right that's all we'll do for our\nbasic smart contract in order to\nset this project up and actually deploy\nthis to the blockchain and make sure\nthat everything's set up correctly we'll\ncome back and you know build this out\nthroughout this tutorial but for now we\njust want to do a simple check to make\nsure everything works properly now let's\nactually compile this smart contract\nbefore it goes to the blockchain and\nmake sure that we wrote all our code\ncorrectly we'll go to the terminal and\ntype truffle\ncompile\nand we can see that it actually created\nsome new files here i'll show you that\nin the project if you go to the build\ndirectory and then contracts we'll see\nmigrations and to-do lists.json\nso this is actually a json\nrepresentation of the smart contract\nthat's created by truffle\nand it contains some information that's\nuseful to us this is the smart contract\nabi which is the abstract binary\ninterface we'll actually use this\nlater in the tutorial when we talk to\nour\nsmart contract in javascript we can see\nthe byte code that was created by the\nsmart contract\nthis is actually the byte code that gets\nrun on the ethereum virtual machine\nand yeah there's a lot more useful\ninformation inside of here but i just\nwanted to show you that initially now in\norder to actually put this smart\ncontract on the blockchain we want to\ncreate a few more files and i'll kind of\ngive you a tour of the rest of the\nproject structure here as we do that\nin order to connect to the blockchain\nwe'll actually need to update this\ntruffle dash config\nfile all right and i'm actually going to\njust paste some code inside of here\nagain you can get this code from the\nrepository uh for this project the\ngithub repo that i've got down in the\ndescription below you just check out\nthat link\nall right i'm just going to save this\nand i'll explain what's going on here\nbasically inside of this configuration\nfile we have the network's key inside of\nthis object right so what that does is\nallows to specify several different\nnetworks but here we have a development\nnetwork um that's actually connecting to\nganache so this is localhost and this is\nthe port that ganache is running on so\nwhile we're here let's go ahead and\nactually make sure that ganache is\nrunning\nso you can open ganache find wherever\nyou installed it make sure it's open\nand we can see that the port is 7545\nright and we can see it's localhost\n127.0.0.1.7545.\nso now that we have this filled out um\nthis is actually talking to the local\nblockchain now let's create a migration\nfile in order to get the smart contract\nonto the blockchain\nso if you go to your migrations\ndirectory you'll see a file inside of\nhere it's called initial migrations\nso i'm actually going to copy the\ncontents of this and actually create a\nnew file in the same directory\nand i'll call it uh\ntwo\nwe'll say deploy\ncontracts\ndot js okay\nwhat's inside of this directory well\nthese are migrations i'm just going to\npaste this code in here so what is a\nmigration well if you've come from\nanother development background where\nyou've used a database you might have\nhad to change the state of that database\nby adding new tables or adding columns\nto the tables\nand that's because you're changing the\nstate of the database\nthe structure right the schema and\nthat's essentially what you're doing\nin this project right here with a\nmigration whenever you're deploying a\nsmart contract to the blockchain you're\nactually changing the blockchain state\nremember the blockchain basically is\njust a big database in one sense and\nwhenever you put the smart contract on\nthe blockchain you're updating the state\nand thereby you need a migration in\norder to do that okay\nand you'll see these migration files\nover here are numbered and that tells\ntruffle what order they need to be run\nin so make sure your starts number two\nand inside of here what we'll do is\nactually change this we'll change\nmigrations to be a to-do list\nso to-do lists from artifact require\ntruffle creates a an artifact\nout of this to-do list.json that we saw\na second ago\nand that's going to be just a an\nabstraction of the smart contract that\nit understands in order to put in the\nblockchain now let's actually run the\nmigration and deploy the smart contract\nto the blockchain\nso first again make sure that ganache is\nrunning make sure that you've you know\nconfigured this correctly and we'll run\nthe migration like this we'll just say\ntruffle\nmigrate\nall right it looks like it was\nsuccessful so what we've done is\nactually deployed the smart contract to\nthe blockchain and if you open ganache\nyou'll see\nthat something has changed you know with\nthis first account we'll see that the\nbalance of ether you know the ethereum\ncryptocurrency balance has actually gone\ndown by a little bit that's because\ndeploying smart contracts to the\nblockchain actually costs ether it costs\ngas and we can see that this account has\ndone that it's actually paid the gas fee\nin order to deploy the smart contract to\nthe blockchain and truffle by default\nuses the first account inside this\nwallet in order to pay those fees\nnow let's open the truffle console in\norder to check the smart contract that\nwe deployed to the blockchain we'll do\nthat like this we'll say truffle\nconsole\nnow we'll retrieve the smart contract\nfrom the blockchain like this we'll say\nto-do list\nequals await\nto-do list\ndot deployed\nso to-do list is the name of the uh\nsmart contract that we created in the\nmigration we go back to project and see\nyou know this to-do list right\nwe've actually retrieved\nthe smart contract a deployed copy of it\nfrom the blockchain and assigned it to\nthis variable to-do list and you'll see\nthis await keyword here so let me\nexplain that we must interact with the\nblockchain in an asynchronous fashion\nand if you've ever developed other\njavascript applications you would know\nthat there's a lot of different\nstrategies for handling asynchronous\nactions right you can use promises\nthere's a lot of different ways to do it\nbut with truffle version five we've\nactually\nbeen able to use the async await pattern\ninside the console which is really nice\nyou can just do things in a simple one\nline like this basically this is just\nsaying you know wait for this finished\nresult\nand whatever the result is assigned to\nthis variable\nso we can actually look at that we say\nto-do lists\nall right you can actually see the\nresult as the smart contract here\nand i'll just pull this up so you can\nsee\nlet's actually get the address the\ncontract we'll say to-do list\naddress\nall right\nand we can see this is the address of\nthe smart contract that's deployed to\nthe blockchain this is just where it's\nlocated\nand now we can actually see the count of\ntasks that we created in the smart\ncontract so we'll say to do list\ndot count\nlike this or sorry task account that's\nwhat we called it\nall right we can see that is zero and\nnow truffle actually stores that as a\nbig number whenever we retrieve it we\ncould convert it to a number like this\nwe could just say uh\ntask account\nassign it to a variable and say a weight\nall right we could say task count two\nnumber\nand i see that it's zero all right so\nthat's a good check to see that\neverything is set up properly if you've\nbeen able to complete all this so far\nyou know you've been able to create a\nsmart contract create a new truffle\nproject you know connect it to a\nblockchain and actually to put the smart\ncontract on the blockchain and talk to\nit if you have any trouble just you know\nrewind the video and try to see where\nyou might have gone wrong what we want\nto do now is actually pause and commit\nsome of these changes i'm going to\ncreate a new git repository i'll say git\ninit\nand inside of here i'm actually going to\ncreate a\ngit ignore file you don't necessarily\nhave to follow along with all these\nsteps but i'm just going to do them so\nthat you all can see\nwhat i'm going to do inside of here is\ncreate this git ignore file that ignores\nthe node modules directory so that we\ndon't commit all the node modules to\nsource\nall right i'm going to say git add\ni'm not sure what all these errors are\nsorry i'm going to get commit\ni'll say project\nsetup\nall right so that's it for the first\npart of this tutorial where we've\nactually set the project up in the next\nsection we're actually going to list out\nthe tasks in the to-do list\nnow let's list out the tasks inside of\nthis to-do list\ni'll show you the steps that we'll\nfollow\nfirst we'll list the tasks in the smart\ncontract\nand then we'll do that in the console\nand next we'll actually wire up the\nclient side application and list the\ntasks there\nand finally we'll write some tests that\nmake sure that the smart contract is\nlisting the tasks correctly\nso first\nwe'll go to our smart contract that\nwe've been working on to-do lists\nand we'll actually write the code to\nlist out the tasks in the to-do list\nhere\nso first we'll need a way to\nactually model the task\nwe'll do that with something called a\nstruct solidity allows us to define our\nown data types of structs\nand we can create a new struct like this\nwe can say struct task follows with\ncurly braces\nand we'll actually give this some more\nattributes in a second\nlet me pause and explain uh some more\nfeatures of solidity right solidity is a\nstatically typed language in fact you\ncan see the data types listed here you\nknow uint this is an unsigned integer\nwhich basically just means that it's an\ninteger uh that can't be negative right\nso integers can be positive or negative\nwith a minus sign you know a sign in\nfront of it or a positive sign and so\nsolidity allows us to define this uh\nstruct task here\nand we can give it some attributes like\nthis we can say uint\nid this will be the id of the task this\nis going to be an unsigned integer which\nbasically just means an integer that\ncan't be negative right if it was a\nnegative integer would have a sign in\nfront of it that'd be a sign integer but\nthis is unsigned\nand the next thing will be a string and\nwe'll say the content this will just be\nyou know the text and next will be a\nboolean and that will be completed\nand that will represent the checkbox\nstate of the to-do list you know whether\nthe item has been checked off or not\nall right so that's how we'll actually\nmodel a task on the to-do list with this\ndata structure\nand now we need a place to put these\ntasks so where will they go\nwell we effectively want to put these in\nstorage on the blockchain so how do we\ndo that how do we access the storage\nwe need to create a new state variable\nlike we did here with task account\nremember task account is getting written\nto storage it's a state variable it's\nrepresenting the state of the smart\ncontract which is written to the\nblockchain the actual data storage\nand we'll actually want to create a\nstate variable called tasks here\nbut we don't want it to be you know an\nunsigned integer we want a different\ndata type\nwe want something called a mapping\nand this is going to take a key value\npair like this it'll say uint\nsay task\nokay now mapping and solidity is a lot\nlike an associative array or a hash in\nother programming languages where you\nstore a key value pair right\nand when we declare this mapping here\nwe declare the data type for the key\nwhich is an unsigned integer and the\ntask\nwhich is you know this struct that we\ndefined here\nand essentially this is going to be kind\nof like a database for us it'll have a\nuint an unsigned integer that will be\nthe id essentially of the task that\nwe'll store here\nso we can look for task you know one two\nthree and it'll return the tasks okay\nand we also want to make this public\njust like we did with a task account\nand that will give us a reader function\nfor free provided by solidity that will\nallow us to access the items out of this\nmapping\nall right now we have a way\nto create new tasks and actually put\nthem in the you know database or the\nblockchain in this case we'll be able to\nuse this task id reference here and\nstore the task like this\nso now we need a way to actually put\nthis task struct\ninside of this mapping\nto do that we'll create a function\ncalled create task say\nfunction\ncreate task\nand inside of here we'll provide a\nsingle argument which will just be the\ncontent of the task itself so we'll say\nstring\nmemory\nsay content\nlet's be public\nall right now inside of this we're going\nto write some code that puts this task\ninside of this mapping\nso the first thing we'll do is determine\nthe id of the task we're going to create\nright\nso that's why we're using task count\nand you see that each task struct has an\nid and we want to increment this task\ncount value anytime we're creating a new\ntask to put inside of this mapping\nso do that like this we'll just say task\ncount\nand we'll just use the increment\noperator you might find this uh to be\nsimilar to other programming languages\nwhere you're basically just changing\nthis value by one\nall\nright so once we've done that we'll have\na new task count which if this is zero\nand the first time we call this uh it'll\nchange to one and that means the first\ntask that we put inside of this mapping\nwhenever we call this create task\nfunction will be one and the next time\nit'll be two the next time it'd be three\nso now let's actually put it inside the\nmapping we do that like this we'll say\ntasks\nthat will reference the mapping\nand we'll say task account we can\nactually reference it by\nuh\nyou know the key which will be the\nunsigned integer here\nand we'll just say equals\nand we'll create a new task we'll do\nthat like this we just say you know task\njust copy this\nand\nwe say task\ncount\nwe just provide the arguments for the\nstructs so the id the content and\ncompleted so the task count is the new\nid\nthe content is the content being passed\nin\noops\nfrom the function\nand\nit's a new task so it's not completed\nyet so we'll just say false\nall right\nnow we have a way to actually put tasks\ninside the to-do list which we'll need\nas a prerequisite in order to list tasks\nyou know we'll need some tasks inside of\nthe to-do list in order to show them and\nthe next thing we want to actually do is\nyou know go ahead and populate our to-do\nlist so that when we you know call it up\non the client side it's already got some\nto-do items inside of it for us okay and\nwhat we can do is basically just add\nsome tasks to this list whenever this\nsmart contract is deployed\nso how do we do that\nwell we do that with something called\nthe constructor function for the smart\ncontract\nso if you've ever used another\nprogramming language that has like an\ninitialize function inside of a class or\nsome sort of object you know maybe init\nor new something like that\nyou've seen a constructor before\nso basically this is just going to be\na function that's called\nwhenever the smart contract is\nrun for the first time which in this\ncase is upon deployment all right\nso inside of this constructor function\nwe can actually add a default task to\nthe to-do list all right\nso we do that like this we'll just say\ncreate task\ntask\nand we'll just pass in uh check\nout\napp university\ndot com\nall right i'll put a semicolon here\nso now whenever we access the smart\ncontract for the first time\nit will have a default task inside of it\nso whenever we list the tasks out there\nwill be something they're forced to see\nand that way we'll know that this worked\nproperly whenever we look at this in the\nconsole and connect our client-side\napplication and write tests and things\nlike that\nall right now let's actually compile a\nsmart contract to make sure it worked we\ncould just say truffle pile\ni may have some syntax errors or\nsomething like that we'll see\nall right it worked so now let's\nactually open the console to see if it\nworked we'll say truffle console\nwell actually first before we do that\nlet's make sure we have ganache running\ni don't\nso let's pull it up\nall right so ganache is running and now\nwe actually need to migrate our smart\ncontracts we'll say truffle\nmigrate i'm just going to pass in the\nreset flag\nto be safe here in case you had ganache\nalready running so what does the reset\nflag do well that would deploy a new\ncopy of the smart contract to the\nblockchain if an existing one um is\nalready there\nso like if you go you know we change our\nsmart contract code here so if you added\nnew functions or something like that you\ncould migrate with the reset flag uh to\ndeploy a new copy so i'm gonna do that\njust in case you had ganache running\nalready\nall right now let's open the truffle\nconsole\nso i'll do it like this truffle console\nand what we'll do is actually list out\nthe to-do items so\nfirst i will just get a copy of the\nto-do list we'll say to-do list\nequals await to do list.deployed\nall right let's make sure the address is\nthere say to do\nthis to address\noops\nmisspelled that\nokay\nnow let's actually list out the items\nnow let me explain something about this\nmapping\nwe want to call this tasks function\nthat's provided by solidity\nto list out the task in the to-do list\nand remember we declare this public so\nsolidity gave us a tasks function for\nfree to reference this mapping\nbut whenever we call this function it\nwon't just return all the tasks in the\nlist\nand that's because solidity doesn't do\nthat for us this mapping is a dynamic\nsize there's no way\nyou know and natively to know how big it\nis inside the smart contract\num and so you can't iterate over it and\nyou can't just return the entire thing\nyou actually have to reference\nthe items out one by one\nand that's why we're using the task\naccount counter cache here\nso if we know that this task count is\none that means there's only one task in\nthe to-do list and we would just have to\ncall this function one time to get that\ntask and we would pass in the id which\nwould be one in this case and it would\nreturn the task if it were 10 we would\nhave to do this 10 times we'd call this\nfunction once with one and that would\nreturn task number one we'd call it the\nsecond time with two and that would\nreturn task number two et cetera et\ncetera until we get 10\nwhich case it will return task number\n10. so that's how we would do that and\nif you're doing that on the client side\nwe would use a for loop or something\nlike that which we'll\nget to whenever we reach that section\nso for now inside the console we can\njust reference you know the only to-do\nitem inside of here the only task is\nthis one\nso we can say\ntask equals await\nto do lists\ndot tasks\nand we'll say one\nall right let's see the task\nshe bumped this up\nall right there you go\nso there's the task we can see the\ncontent check out dapaniversity.com\nwe can see that it's completed as false\nwe can see the id is one it's a big\nnumber but we can actually do that\ninside here we can say task\nid\ntwo number\nright it's one\ntask content\nsorry it's not a function\nit's just an attribute\nall right so now we've actually migrated\nthis smart contract to the blockchain\nand we've been able to list tasks\ninside the console now let's create the\nclient side application and actually\nlist out the tasks there so in order to\ndo that\nwe'll need to create some new files\nfirst we'll create a directory to store\nthe client-side files we'll just say\nthis\nsay source so we see a new directory\ncame up here\nand we'll create a new file inside of\nhere called index.html\nsorry say touch\nsource index.html\nand we'll create an app.js file to store\nall the javascript code say touch source\napp.js\nokay\nstepping over the project and see\nwe have an empty app.js file and an\nempty index.html file\nand another file we actually want to\ncreate is um\na bs config file\nso bs config stands for browser sync\nconfiguration i mean browser sync is\nsomething that we use\nuh\nas a part of light server so if you go\nto your package\nuh json file you'll see this light\nserver dependency so this is the web\nserver that we're going to use in order\nto run the client side application we\nneed to configure the server to know\nabout a few different directories inside\nof our project we want to tell it where\nthe source directory is for the you know\nclient side files we want to tell it\nwhere\nthese contract the smart contract json\nfiles are we also want to tell it where\nour node modules are to pull out some\ndependencies for building out the front\nend so we'll do that like this\nwe'll actually create a new file say\ntouch bs config\ndot uh\njson\nokay\nso inside of this file i'm actually\ngoing to paste in some code\num and you can actually get this\nconfiguration\nfrom\nthe\nproject\nfrom github down in the description\nbelow\nlet's paste this inside of here\nand don't worry too much about this this\nis all just proprietary\nuh browser sync configuration so\nbasically we're just saying the server\nconfiguration is uh this\nand we're pulling the files in from the\nsource directory and also the build\ncontracts directory\nso basically it's saying expose all of\nthese directories\nto\nour our web server root and then also\nwe're going to mask a vendor with node\nmodules so any uh node modules that\nexist inside our project we can\nreference those at the vendor route\nall right so there's a server\nconfiguration\nand now we actually want to fill in the\nindex.html file\nnow likewise inside of here i don't want\nto spend a bunch of time writing html\nand css so i'm going to just paste in\nuh the code\nfrom the application and again you can\njust pull this source code from the\ngithub link down below\ni'm just going to paste this in like\nthis what we'll do is actually build out\nthe javascript part\nbut i don't want to spend too much time\nwriting the html\nall right\nso i'm going to paste this in here\ni'll explain you know what's going on um\nbasically you know we're pulling in the\ntwitter bootstrap framework to write the\nfront end so we don't have to write a\nbunch of css and ui elements ourself\num you know we can see this uh\nbootstrap that was what i showed you a\nsecond ago in bs config that's how i got\nthis vendor here\nand we can see some basic css that's\njust written inside the head tag\nand yeah we got some markup essentially\nwe have a simple loader to\nshow whatever the application is loading\na form that allows us to create a new\nto-do item and we will actually um\nhave a way to list out the tasks here\nso for now i'm going to just uh\ncomment out this form i think i think\nit'll run otherwise\nall right\nand let's actually just see if we can\nstart the server\nso i'll start the server in a new tab\ni'll say\nuh\nnpm\nrun\ndev i believe is the command\nall right yep that worked\nso you can see uh that we basically got\nsomething right we see it's loading\nthat's fine um if you open your console\ni'm sure you'll see some errors or\nsomething like that yeah failed the\nresource that's okay\ndon't worry about that just yet we will\nwire this up to actually work but for\nnow i just wanted to make sure that the\nserver is working properly that we can\nsee bootstrap right we see this nav bar\nup here we can see the dav diversity\nto-do list you actually click through\nthis link it'll take you to my website\nwhich is pretty cool\num but yeah so let's fill in the project\nand actually list out the to-do's in\nthis client-side application so to list\nthe to-do items we essentially\nwant to fill in\nuh this unordered list we've got two\nhere we have a list for\nthe tasks and then the completed tasks\nso if we have an uncompleted task it'll\ngo in this list and whenever we complete\nthem it'll go here but for now they're\nall uncompleted so they'll stay in this\ntask list\nall right so in order to do that we need\nto do several things inside this app.js\nfile this is where we'll actually create\num you know our javascript app that\ntalks to the blockchain so the first\nthing we'll do is actually create an app\nlike this let's say app\nthis is object\nokay and we'll create a load function\nand actually call this async\nwe're going to use a lot of async\nfunctions inside of this tutorial\ni've been using a lot of async await\npattern when loading data from the\nblockchain it seems to be pretty helpful\nso we'll fill this in\nand then in order to load the app let's\nactually do this console log\nuploading\nand in order to load the app whenever\nthe project loads we'll just say\nsay window\nwhen it loads\nwe'll just uh pass in a function\nsay app.load actually didn't mean to put\nthat inside this object\ndo it like this\nall right so let's reload\nall right so we see the app's actually\nloading\nall right now i'm actually put these\nwindows side by side and you can see\nthat this to-do list is actually\nresponsive which is cool we'll be able\nto see the tasks right here and be able\nto focus on the code while we're doing\nthis the first thing we want to do\ninside this load function is actually\nsay await\napp.load\nweb3\nwe want to load the web3 library in\norder to connect the blockchain now when\nwe load web 3 i'm actually just going to\nuse the configuration that's specified\nby metamask themselves right what we're\ndoing is creating a way to talk to the\nblockchain we want metamask which is\ngoing to be the browser extension that\nwe use to connect to our dap our\nblockchain application\nto talk to the blockchain with web3js\nand metamask actually suggests a way to\ndo that so i'm not going to reinvent the\nwheel here i'm just going to do what\nmetamask tells us to do\nso i'm going to actually just paste in\nthe configuration that they suggest and\ndon't worry if you don't understand\nwhat's going on here\njust know that this works and it's\ninside of the github repository then you\ncan find the code and link it with the\nlink in the description below\nso let me pause because i don't feel\nlike i've fully explained web3 js very\nwell and what's going on here okay\nso remember this to-do list application\nis backed by the blockchain\nand we want to actually connect to the\nblockchain to use it so a few things\nhave to happen\nwe have to connect our browser to the\nblockchain and that's what we'll use\nmetamask for\nright\nand then our client-side application\nneeds to actually connect to the\nblockchain and that's what web3js is for\nso inside of our project we'll use the\nweb3.js library to talk to the ethereum\nblockchain it'll actually allow us to\nconnect to it and you know read and\nwrite data from the blockchain inside of\nthe app\nand then metamask will allow us to\nyou know communicate with that client\nthat application with web3js and allow\nus to you know interact with it via our\nbrowser\nso what we did here was just loaded up\nweb3.js\nyou know loaded our blockchain\nconnection essentially we even call this\nlike connect to blockchain if we wanted\nto um\nand\nnow we'll actually use our browser to\nconnect to it with metamask\nso let's actually do that i will\nopen up ganache\nlet's actually find the private key here\nwe'll show the key\ncopy it\nall right\nwe'll go to metamask\nand make sure you've opened this if you\nhaven't already\nand what you want to do is connect to\nthe private network which is localhost\n7545\nright so you might see the main ethereum\nnetwork\nfirst but you want to change networks to\nlocalhost 7545 here\nand what you want to do is click this\naccounts menu you want to import account\nand you want to paste in the private key\nselect type private key and click paste\nand then import all right i've already\ndone this step so i'm not going to do it\nso i'll click cancel\nwhenever you've imported the account you\nknow from ganache you want to use this\nmake sure you use the first one because\nthat's the account that we deployed the\nsmart contract with okay\nyou'll actually be connected with that\naccount to the blockchain right so\nhere's your blockchain account and then\nyou can add it to your wallet in\nmetamask to connect to the blockchain\nwith your web browser and you'll specify\nthe blockchain by\nyou know picking\nthis local blockchain that we have\nrunning with ganache okay\nso refresh that all right and you've got\num your account connected to the network\nnow let's\ntake that account\num from ganache this one right here and\nlet's show it in our application to\nprove that we're actually connected to\nthe blockchain with it\nall right\nso\ni'll just say\nload account\nlike this\ncreate a load account function say load\naccount\nthis would be async\nand i'll say app.account\nequals\neach\ncounts\nzero\nokay\nso web3 here\nwas set by\nuh\nload web3\nand it has this eth object that's going\nto contain all the accounts which will\nbe an array once you get the first one\nwhich will be the account that we're\nconnected with inside of metamask\nand inside the load function i'll say\nawait\nload\naccount\napp.load account okay save that\nand now\ninside of the index.html file\num you'll see that we have a place for\nthe account here\nthis will be the\nplace where we can actually add the\naccount we'll do that in a second\nbut for now it's actually just\nconsole.log\nand see if it worked properly\nall right yep there we go we can see it\nhere\nwe can verify that's the same account in\nmetamask so e925a\nand that's e925a all right so we've\nsuccessfully retrieved the account from\nmetamask and we'll actually stick it\ninside the project in a little bit okay\nso we'll just clean that up\nnow let's actually load the smart\ncontract from the blockchain this will\nbe the to-do list\nthat we created so that we can list out\nthe tasks from the to-do lists\nuh in order to do that we'll say load\ncontract\nsay async\npass it a function\num and inside of here\nthe first thing we'll do is actually\npull out\num the smart contract json file say\nconst\nto-do list\nequals\na weight\nlet's say\njquery get json\nlet's be to-do-list\nokay\nso if you remember inside the bsconfig\nfile\nwe exposed the build contracts directory\nto the root of our project so we can\ncall this to-do list.json file we're\nactually pulling out this file right\nhere\nand we can log it\nwe can log it but in order to do that we\nneed to call this function say oh wait\ncontract\nokay\nall right we can see it here here's the\nto-do list uh file\nokay so next what we want to do is\nactually create a truffle contract so\ntruffle contract is just a javascript\nrepresentation the smart contract that\nwill allow us to you know call the\nfunctions on it and things like that\nso what we'll do is i'm just going to\npaste in some code that shows you how to\ndo that do like this\nokay\nso this will be\nuh we'll call truffle contract we'll\npass in this to-do list json file that's\nbasically gonna create a wrapper around\nthe json file that we created by truffle\nand it's gonna allow us to you know\ninteract with it and we'll set the\nprovider which is the web3 provider\nwhich we um\ncreated here\nand this is basically just going to give\nus a copy of the smart contract in\njavascript and it's going to tell us\nwhere it is on the blockchain and we're\ngoing to be able to do stuff like you\nknow call all the functions that we\ncoded inside of here like the tasks\nfunction the task account and things\nlike that so let's clear this out\nand just save and refresh and see if\neverything worked\nall right so to do list of undefined\nlet's change that so we actually need a\nplace to store this contract so i'll say\nthis\nlet's say contracts like this\nwe'll actually create an empty object\nokay\nwe'll refresh\nif you guys get stuck on any of these\nsteps feel free to clone the repository\nand see the code um\nbelow\nnow we want to actually you know\nget a deployed copy of the smart\ncontract like we did in the console\nremember we did you know to-do list\nequals like a wait to do list.deployed\nwe're going to do the same thing here\nso we'll say app.to-do list\nequals await\napp.contracts\nto-do list\ndeployed\nokay\nand you know this is really just uh\nand this is really just you know getting\nthe values from the blockchain so this\nis a live contract now\nthis is just like we did in the console\nall right now we should have loaded our\napp up with a lot of data we've\nconnected to the blockchain we've\nretrieved the account and we've\nretrieved the smart contract that we\ncreated you know in the previous section\nso we want to do now is actually render\nsome information on the page the first\nthing we'll do is actually\nrender out the account that we're\nconnected with so first we'll just say\nrender\nequals an async function\nand inside of here what i'm going to do\nis show\nthe account\nright inside of our html\nokay\nand remember we got this place to show\nthe account right here\nso that's exactly what i'm going to do\ni'm going to put the account inside of\nthis\nand i'm going to call the render\nfunction\nso after the contracts have loaded i'll\nsay a weight app dot render\nall right in order to see this change\nwe'll actually expand the window here\nall right\nyou can see that the account was put in\nhere\nso like i said earlier i created this as\na responsive application um and we can\nsee the account you know here\nbut whenever we resize the window we\ndon't want to see that anymore just to\nsave some space so we'll keep that down\nbut that works and if you want to code\nthis you know with your window all the\nway open feel free to do that i'm just\ngoing to use a smaller view um to save\nsome screen real estate so you guys can\nsee\nboth things happening as i'm doing the\ntutorial\nall right\nso let's do some more things inside this\nrender function what we actually want to\ndo is render the tasks\num\nbut i'm going to basically create some\nother logic inside of here uh to prevent\ndouble rendering\nall right\nso what we'll do\nis do a couple things\nwe will\nsay that the app is loading\nwe'll keep track of that like this\nlet's change this to false whenever it's\nrendering we'll save is loading stop\ncalling this function this will\nbasically prevent a double rendering\nproblem\nand while this is loading we'll actually\nset it to true and when it's finished\nwe'll put it back to false\nso let's actually create a set loading\nfunction like this i'm just going to\npaste some code in you can find this\ncode in the uh github repository\nso it's set loading basically it's just\ngoing to update it and we'll show the\nloader in the index.html file this will\nbe our simple loader that you see here\nloading\nthis is loading\nand i'm going to show it when it's\nloading right and i'm going to hide the\ncontent which is this this is actually\nthe to-do list itself\nall right i'm going to show the loader\nhide the content\nall right so let's save that and see if\nthere's any errors\nall right\nso that looks like the loader went away\nwhich is what we want\nall right now next we want to do is\nactually fill in\num\nthe\ntasks who actually want to render them\nso we'll list out the tasks inside of\nits own function like this we'll say\nrender\ntasks\nsay async\nso inside this function\nwe need to do a lot of things\nthe first thing we want to do is\nactually load the tasks from the\nblockchain\nand then the second thing we want to do\nis actually render out you know each\ntask\nwith the task template\nand we're gonna have to\nbasically render out each task one by\none\nand then we're gonna have to actually\nshow the task on the page\nokay\nthis is kind of a three-step process\nit's gonna be a little complicated but\njust bear with me i'll show you how it\nworks\nso what we're gonna do is fetch them\nfrom the blockchain and we're gonna\nactually use this template that's\ncreated down here this task template\nit's going to have a check box and the\ncontent\nwe're going to you know fetch this off\nthe page and create a new task with this\nokay\nso first what we think we need to do is\nfetch the number of tasks from the\nblockchain remember i said that we can't\nyou know just fetch all the tasks with\nthis mapping essentially we need to find\nout how many there are and we need to\nloop through\nthe items in this mapping and fetch them\nout one by one so if there's ten tasks\ninside of here we'll need to do one two\nthree four five six seven eight nine ten\nif there's one we just do this once so\nin this case there's just one\nbut that's what we need to do first we\nsay const task count\nequals a weight this is app.to-do list\ntask count\nokay\nand now we know how many there are\nand the next thing we want to do is\nactually fetch this template that we'll\nuse to list the task on the page\nsay const\ntask template\nequals\ntask\ntemplate\nokay\nand now we actually want to use this\ntask account to\num\nrender out each\ntask on the page in order to do that\nwe'll create a for loop in javascript\nlike this\nif you've written some javascript before\nit should look pretty familiar we're\nbasically just saying\nfor every number\nfrom\none\nall the way up to the task count\ndo this operation\nso that's what we want to do we start\nwith one because that's the first valid\nid\ninside of the mapping so from task\nnumber one all the way up to the maximum\nnumber of tasks which you know if it's\n10 we're going to do this 10 times you\nknow fetch each task so we'll actually\nread the value from this\nmapping with the id\nso i in this case is going to be the id\ninside the loop\nthe first thing we'll do is actually\nfetch all the values for the task we'll\ncall the task function\nand break out the attributes\nto the id the name and completed\ndo that like this\nso say task equals await\ndo list task i which is the id in this\ncase\nand so because of how truffle contract\nworks this is actually going to return\nan array\nand we have to reference these values by\neach item in the array so the first item\nwill be the task id the second id second\nitem\nwhich will be the task content the third\nitem which will be completed\nand remember this array is zero index\nthat's why the first item is zero second\nitem is one third item is two\nokay so now we'll have the task\num id content completed\nthe next thing that we'll do is actually\ncreate the html for the task like this\ni'm just going to paste in this\nall right\nso we'll do is actually get a new task\ntemplate we'll take this task template\nthat was you know fetched from the dom\nand we'll actually clone it right we'll\nget a new copy\nwe're going to find the content for this\ntemplate we're going to fill in the\ncontent from the task\nand we'll find the\ninput which will be the check box and\nwe're going to populate that with some\nvalues which will be the task id so\nbasically whenever we check this we'll\nlike you know turn it on and off\nand\nwhether it's completed or not\nwe'll just use that from the task\nand we want to wire up a uh\non click function which will be\ntoggle completed it will implement this\nlater we won't use it for now so we can\ncomment it out okay so the next thing we\nwant to do is actually put the task in\nthe crest list so i'm going to paste in\nsome code here too\nso what this does is check if it's\ncompleted\nand remember there's two lists here\nthere's a list for the completed tasks\nand a list for the um sorry here's the\ncompleted tasks and then the list for\nthe non-completed tasks\nand if the task's completed we'll put it\nin the right list\nand the last thing we want to do is\nactually show the task we'll do that\nlike this we'll just take the\nhidden task template that we've been\nmodifying let's show it like this\nokay\nall right so let's actually try to call\nthis render tasks function inside of the\nrender function\nso render task is here and then after we\nrender the account we want to run the\ntasks like this\nso let's save this and see what happens\nwe might have some errors but we can\njust address those as they come up\noh no there it is boom it worked\nso we've actually successfully listed\nthe tasks from the smart contract in the\nblockchain\ni can pull this out and we can see the\nfirst task inside of here which is check\nout dap university so i'm actually going\nto do that i'm going to right click and\ngo to dapuniversity.com\nawesome so it worked\nsee my social links here and get my\ntwitter\nit's pretty cool\nall right so i know we've covered a lot\nof ground but we have successfully\nlisted the tasks inside the client side\napplication okay\num i've commented a couple things out\nhere because we haven't implemented them\njust yet but if you get confused just go\nrewind the video and uh you know find\nwhat you might have gotten lost\nthe next step we want to do is actually\nwrite some tests to ensure that the\ntasks were listed out properly okay\nand we're actually going to use the moca\ntesting framework\nfrom javascript and the chai assertion\nlibrary in order to write our tests so\nyou can read more about these if you\nwant to we'll create a new file in the\ntest directory let's say test\nto-do list\ndot test.js\nif you go into the test directory you\ncan see the to-do list.test.js file here\nall right so let's actually write a\nbasic test to ensure that you know the\ncontract was initialized properly and\nthat actually lists out tasks\nthe first thing we want to do inside of\nhere is actually require the smart\ncontract like this\nthat's very similar to our migration\nfile pattern\nsay contract\nand we'll say to-do list\nwe'll pass in a function here\nall right and we'll write all of our\ntests inside of this callback function\nthis callback function is actually going\nto expose all the accounts uh in the\nblockchain right so all the accounts\nthat are connected to ganache all these\nare going to be injected inside of this\nvariable here this will be an array you\ncan read them out one by one\nso the first thing we'll do is actually\nget a deployed copy of the smart\ncontract with a before hook\nokay\nand we'll do that like this we'll\nbasically just say\nbefore\neach test runs that's essentially what\nthis means\nwe're going to pass an asynchronous\nfunction that should allow us to use the\nawait keyword let's say this dot to-do\nlist equals to-do list dot deployed\nokay\nand before each test runs we'll have a\ncopy of the to-do list is deployed to\nthe blockchain\nnow let's create our first test example\nwe'll just say it deploys successfully\nall right we'll use the async function\nbecause we want to use a weight inside\nof here\nand the first thing we'll do is actually\njust get the address like we did in the\nconsole earlier say const\naddress\ni'll wait this\nto do list address\nwe'll say\nwe basically just want to make sure that\nthe address exists\nso we want to check that it's not\num you know empty so we'll do that like\nthis\nsay assert\nnot equal\nthis address we don't want to be 0x0 we\ndon't want it to be an empty string we\ndon't want it to be null and we don't\nwant it to be undefined\nso we can check that and that'll just\nmake sure that the smart contract was\nactually put on the blockchain and that\nit has an address\nokay\nnow we can run this test inside of\nshuffle like this we just say truffle\ntest\nhit enter\nall right and it passes\nnow the next thing we want to do is\nactually list out the tasks and the test\nand make sure that it works\nso we'll say it\nlists\ntasks\npass this asic function\nso inside of here we'll just do a very\nsimple check we'll just basically make\nsure the count is correct and that we\ncan fetch you know a task by the count\nso first we'll just get the task count\nand we'll just do that and then next we\nwant to actually try to fetch the\ntask out of the mapping\nso we'll just make sure that a task\nexists where the task count is okay this\nwill be a simple test\nso do that\nand now we want to do is actually assert\nthat the id is equal to the task count\nright that it was set correctly so let's\ndo a basic test and just try to run it\nand see if it works\nall right it works\nso let's look at that we can see that\nwe're just getting the task we're\ncalling the id and making sure that it's\nequal to the same task count\nnext let's test some more values and\nmake sure that the content is correct\nthat completed is correct and that um\nthe task number is the same as we expect\nso let's just do that like this paste in\nsome examples we'll say assert equal the\ntask content is this that's the first\ntask we set whenever we initialize the\ncontract\nwe want to say that the completed is\nfalse right we want to say that the task\ncount is actually 1 we want to specify\nthat it's 1 in this case\nso let's say that run the tests\nall right passes all right so that\nconcludes this section where we've\nactually listed out the tasks in the\nto-do list i know that we covered a lot\nof ground\nwe actually created the tasks inside of\nthe smart contract we listed them out in\nthe console we had to wire up the client\nside application to list the tasks out\nthere and we wrote some tests so that's\na lot if you got confused about anything\nfeel free to rewind the video paste in\nthe code from the github repository down\nbelow\nand while we're here i'm going to go\nahead and commit these changes let's say\ngit add\ni'm going to say git commit\nall right so we've listed the tasks\nthe next item is to add tasks to the\nto-do list\nwe'll do this with a client-side\napplication and we'll write tests for it\nbut first we want to change this create\ntask function to\nadd some additional functionality\nso right now we're calling this create\ntask functions at the constructor to add\na default task to the to-do list like\nthis\nbut we want to you know call this\nfunction externally\nfrom the client side in order to create\ntasks that way we also do it in the\nconsole and things like that\nso what i'm going to do is actually add\na new line here\nand what i want to happen is to\nbroadcast an event\nthat this task was created\nlet me explain that\nsolidity allows us to create events that\nare triggered anytime you know something\nhappens inside of a smart contract and\nexternal consumers can subscribe to\nthese events to know uh whenever the\nevent happened and events are really\nuseful because\nyou know whatever we call this create\ntask function we don't always know when\nyou know the transaction actually\ncompleted we don't always know when it\nwas mined and things like that and it\ncan be really useful to listen to those\nevents uh in order to you know know that\nit was finished\nso we can create an event in solidity\nbefore we call it here we need to\nactually declare it inside of our smart\ncontract\nwe'll just do it like this\nwe'll go below this mapping we'll say\nevent we'll say task created\nand notice that's capitalized\nall right here's a semicolon here and\nwe'll just add some arguments to this\nevent we'll say uint id this will be the\nid the task that was created a string\nthis is the content\nand the\ncompleted\nproperty so boolean\ncompleted all right\nso that's how we create an event inside\nof solidity right this just means that\nyou know the task created event is\navailable to us inside of the smart\ncontract\nand i'll show you how we can actually\ncall it\nwe do like this we use the emit keyword\nemit\ntask\ncreated\nand we pass in the arguments so the id\nhere is\nthe task\ncount and the content\nwhich is passed in from the function\nand false\nbecause it's a new task and we haven't\ncompleted it yet and that's pretty easy\nthat's how you trigger events inside of\nsolidity and we can subscribe to these\nevents you know inside the client-side\napplication or you know anywhere that\ncan listen to events on a smart contract\nall right while we're here i'm going to\ngo ahead and actually write the tests\nfor creating the to-do item\nso i'll open the test file over here do\nthe side by side and i'll just create a\nnew example down here so below list\ntasks we'll say it creates tasks\ni'm just going to add some space so you\ncan see better\nso say it\ncreates tasks\nall right let's say async\npass in a function\nand first we'll say\nconstruct\nequals await this dot to-do list\ncreate task\nand i'll say a new task\nokay\nand we'll check the task count\noh wait this dot to-do list\ntask account\nall right we'll fetch that\nand first we'll check that the\ntask count is the same as we expect say\ntwo so that's the first thing we'll\ncheck on\nwe'll ensure that you know we created a\nnew task and the new count is actually\ntwo\nand now what we'll do is check that this\nevent this task created event was\nactually triggered\nand you know we'll dig into the logs\nuh and say that the id was the same the\ncontents the same and completed was the\nsame so that would be the actually you\nknow this new task that we created was\nyou know logged out so we can get the\nevent like this we're going to use this\nresult which was you know the result of\nthis\nfinished\ncreate task function right we use the\nasync weight pattern to get the result\nhere and the event is actually contained\ninside of that\nso we'll say const event equals\nresult\nlogs okay it's in their logs and it's\nthe first item\nokay\nand\nthe args\nkey basically is going to contain all\nthe values for the event\nand you could log this out like in\nganache\nyou could actually console log this\nevent in fact let's just do that right\nnow let's just say\nconsole.log\nresult\ngo to the terminal truffle\nwe'll show you the result and what it\nlooks like so you can see what we're\ndigging into\nall right this is loading okay so this\nis what the result looks like we see\nthere's a transaction hash here and it's\ngot a receipt\nand inside of here we have logs right\nand here is where the event\ninformation is contained\nright\nwe can see\nthis args key right here it's going to\nhave an object and granted we can't see\nexactly what's inside of here because\nit's not locking all the information\nbut this args key is going to contain\nall the values of this event that was\ntriggered whenever\nthis was created okay\nso i'll take out that result\nnow\ni will\ncheck to see that all the information is\nthere so let's say a search\nequal\nevent id\nwe'll say two number\nit's equal to\nwe'll say a search\nequal\nevent content\nis equal to a new task\nsearch equal\nevent completed\ni'll say false\nall right let's run the test\nand this time we won't see all this log\noutput it'll actually just run the test\nand hopefully it'll pass yep it passed\nall right so we can see that our event\nwas triggered whenever we\ncalled this create task function\nall right so i'm going to remove the\nspace\nand that's how you write tests uh for\nthis create task function and check on\nevents now let's go to the front end\napplication\nand create tasks that way now before you\njump back into this make sure a few\nthings are correct make sure that\nganache is running\nyour blockchain is running and make sure\nthat\nyour contracts are migrated that you're\nconnected with meta mask right here\nthings like that\nokay\nso what i'm going to do is actually\nenable this form\nthat i commented out from the previous\nsteps on the page\nso this form is going to have an on\nsubmit function create task which we'll\nbuild here in a second i haven't done\nthat just yet but i'll just refresh the\npage and show what it looks like all\nright\nso we'll see this add task\nfield and we'll actually type in a task\nhere and we'll hit enter\nthere's no button here just for\nsimplicity's sake we'll just use the\nenter key in order to create the task\nall right so\ni'll go back to the app.js file let's\nactually add the create task function\nwe'll do that like this\nlet's do it down here below the render\nfunction\nall right we can say oops\ncreate task\nthis will be an async function\nso what we'll do is say app dot set\nloading\nto true\nokay\nso whenever we call this we want to show\nthe loader\nand we'll do that const content equals\nnew task\nval\nokay and that's just the name of the\nform\nso if you go back to the index.html file\nyou'll see this uh you know sorry it's\nthe name of the the input it's on the\nform see on submit create task we're\ngonna fetch the value of\nthis input right here this input which\nis the id new task okay and we're gonna\nget the value which is gonna be what's\never filled out inside there\nso new task value\nand now we're actually gonna call the\nsmart contract function we're going to\ncall this create task function uh with\nwe know web3js with the truffle contract\nlibrary and talk to the blockchain in\norder to actually update it so we'll say\na white\napp.to-do list\nactually sorry this will be\ncreate task\nand we'll pass in the content from the\nvalue\nokay and whenever we do that\nwhenever this is finished\ni'm just going to do a shortcut and\nreload the page so that whenever this is\nactually done i'll just refresh the page\nand it'll go ahead and fetch\nall the tasks from the blockchain again\nand list them out on the page so instead\nof having to like you know listen maybe\nfor the event and then reload the page\nlike sometimes i can get into a double\nrendering problem so i'm just going to\num\nactually just reload so i'll say like\nwindow dot location no reload that's\njust a javascript thing to say refresh\nthe page\nokay\nso let's test it out and see if it works\ni'm going to open the console and see if\nthere's any errors\nnope we're good all right so we'll say a\nnew task\nor we'll say task number one\ntask\nnumber one\nand like i said there's no button here i\njust want to hit enter in order to make\nthis work so i'll hit enter\nand i didn't put a button on here just\nfor simplicity's sake\ni'll say confirm\nall right there we go\nso we successfully added a task we can\nsee task number one was added to the\nlist\nand and if you go and check ganache\nyou can see\nuh the same thing if you go back to your\ntransactions\nyou can see that a transaction was\ncreated right here\ni think it's the same one\nyeah looks like that's the same one\nand also you can go to your logs see the\nsame thing\nand scroll like crazy i think there's\nat the bottom right\nanyways that gives you an idea of you\nknow where you can look to find out more\ninformation about the blockchain\nwhenever you're doing this kind of stuff\nall right so we've successfully created\na new task on our to-do list and we've\nyou know done it inside the smart\ncontract we have done it on the client\nside and we've written tests to make\nsure that this works\nso that's it for this section i'm going\nto go ahead and commit these changes\ni'll say get ad dot\ngit commit\nlet's say three\ncreates tasks\nnow the last thing we're going to do in\nthis tutorial is actually check off the\ntasks from the to-do list whenever we do\nthat they'll appear in a completed list\ndown here and they'll be striked out\nso we'll do that like this\nfirst we're going to go to our to-do\nlist we'll create a new function\nwe'll call this toggle completed okay\nso i'm going to give you some space down\nhere\nsay function\ntoggle completed\nokay so what do you want this function\nto do\nso we want to take this uh you know\nstruct these task structs that are\ninside this mapping\nand we want to find a specific task\nand we want to change this value\nso if this value is already true when i\nchange it to false and it's already\nfalse when i change it to true so\nbasically if someone checked this item\nuh it would you know\nsay that it's completed and if it's on\nthe completed list we could check it and\nit would take it off the complete list\nand put it back in the you know not\ncompleted list\nokay\nso\nthis function will need a parameter\nit'll need an id of the task that we\nwant to actually toggle\nso we'll do that like this we'll say\nuint id\nall right we'll say public\nso first we will\nget the task out of the mapping all\nright\nso we need to read the task out of the\nmapping like this you can see task you\nknow tasks count we can do the same\nthing we say task and we can read the id\nlike this say id\nso that will actually fetch it out let's\nassign it to a variable\nwhenever we do this we want to\nactually\ndeclare this variable with the type task\nand we're actually going to do this just\nin memory\nso it looks kind of funny but this is\nhow we do that in solidity we say task\nthis is the data type that we declared\nright here task\nmemory\nand we say\ntask like this\nokay\nnow notice this underscore basically\njust means this is a local variable and\nnot a state variable um it's not\nnecessarily specific to solidity it's\njust a convention right you see this\nhere in fact i'm going to do this like\nthis as well id\nsee you know content is underscored here\nbecause that was a local variable that\nwas passed in the function\nid is the same way and i'm going to do\njust task like this because i don't want\nto assign it to the state\num there's nothing special about doing\nthat it just convention\nso now i'm going to say task\ndot completed\nand we basically want to do the opposite\nof whatever it was before\nso we can read the value of whatever it\nwas before like this we just say tasks\ncompleted but we want to say the\nopposite so we'll say bang oops bang\nright\nso if it was false this will turn into\ntrue and if it was true it'll turn into\nfalse\nwe're assigning that new value here\nall right next um we're going to put it\nback into the mapping\nso just like we did tasks task count\nequals this\nwe're going to put it back into the task\nmapping say tasks\nuh id\nequals\ntask\nall right\nso that's how we would create a function\nto toggle task completion\nnow i want to do a few more things\ninside of here before we move on\num i want to emit an event just like in\nthe create task function\nso first we'll declare an event\nwe'll just say\nevent\nlet's say task completed\nall right\nand we'll give this two arguments we'll\nsay unit id\nsay you\nwent or sorry bool\ncompleted\nall right\nand now i will trigger that event inside\nhere say emit\ntask completed\nid\ntask completed\nall right and that should work a lot\nlike our create task function where that\nwill emit an event anytime this\nfunction's called\nokay so let's actually write a test to\nmake sure this works before we you know\nwire up the client side application\nwe'll go to the uh test file right here\nand i'm actually going to split this\npane uh vertically all right so i've\njust split this pane\num we've got a test file down here and\nthe smart contract cut up here so i'm\njust going to focus on this we want to\njust test this function unit test this\ntoggle completed\nso i'm going to create a new function\ndown here and give ourselves some space\nor sorry new example\nthat will say that it toggles task is\ncompleted so i'll scroll down a little\nbit actually just uh\ncopy this and paste it again to give\nourselves some space and\nhave some boilerplate so we'll say it\ntoggles\ntask completion\nand i'll clear out all this\nactually let's do this let's say result\nequals this dot to-do list dot toggle\ncompleted\nand i'll pass in\nuh\none should be the first task\nand we'll get the task itself\nwe'll actually retrieve the task\nnow pass in id1\nall right\nand we want to assert that that's going\nto be equal to\ntask\ncompleted we want it to be true\nand we want to fetch the event just like\nwe did in the previous example\nand we want to ensure that the event id\nis equal to\none\nand that the event completed is equal to\ntrue\nall right does that make sense so\nbasically i know i modified a lot of\nthat code so that might be a little\ntricky\ni didn't just you know write it out as i\nwas thinking it i just changed what was\nthere from the previous example so let's\njust review\nso we're toggling completed we're\ncalling this function\npassing in the id of the first task we\nknow there's a task already in the to-do\nlist because we created one inside the\nconstructor right\nand\nwe waited for that to finish\ngot the result which we'll use to read\nout the logs here in a second\num\nbut the next thing we did was we got the\ntask right and we checked that it was\nactually completed right so that's true\nand now we want to make sure that this\nevent was triggered\nand we you know get the event by digging\ninto this result which we witnessed in\nthe previous section if you didn't check\nthat out go ahead and rewatch that part\num so we took the event and got the id\nmade sure it was 1 and then looked at\ncompleted and ensured that it was true\nall right so let's try to run the test\nall right it looks like i've had an\nerror\nlet's go back to this code we can see i\nforgot the underscore here\nlet's run it again\nall right it passes awesome\nokay so i'm going to remove this space\nsave this\nnow let's go to the client side\napplication and wire up the check boxes\nto toggle the tasks\nso go back to the app.js file and i'll\ncreate a new function down here\ni will call it\ntoggle completed i believe this is the\nsame name as the smart contract function\nso below create task we'll say toggle\ncompleted\ni'll say async\npass it a function\nand we'll do is similarly to create task\nwe will say the app is loading\nsay const\ntask id\nand actually inside of here this is\ngoing to be on a on click event because\nwhenever we click this check box uh\nwe're gonna you know have an event\nlistener that calls this function\nso i'm gonna pass in the actual event\nitself\nwe'll just use e for short\nand that event is gonna contain\nthe name of this check box\nwhich the name value is going to be set\nto\nthe actual task id\nso we'll say e target\nname\nand now i'll say\nawait we're actually going to call the\nsmart contract function to toggle this\ntask is completed say app\ndot to-do list\ntoggle completed\ni'm going to pass in the task id\nall right\nand then just like the create task\nfunction whenever that's finished i'm\njust going to reload uh the webpage\nsemicolon or sorry a comma there\nokay no errors\nbut if you remember in the previous\nsections\ni commented this out so i'm going to put\ni'm going to re-enable this this is\nwhere we actually wire up the on click\nhandler to do this so now\nwhenever we're rendering the tasks out\nwe found you know the check box and we\nwant to actually add the event handler\nwhenever it's clicked\nto call this function\nso everything looks good\nall right\nlet's try it out\ni'll try to check this off the list\nsee if it works\nall right looks like we got\na problem here\nall right we do have a problem and i'm\ngonna see if you can guess what it is\nit's something i forgot to do in the\nprevious step and i'm actually going to\nleave this in the recording because it\nkind of shows you the nature of\nblockchain development and all the\nthings you need to do\ndo you know what it is yet\nwell i'll tell you we forgot to run the\nmigrations\nso we added a new function to the smart\ncontract and it worked on the tests um\nbut we didn't actually deploy a new copy\nof the smart contract to the blockchain\nwith this new function\nso in order to do that we'll run truffle\nmigrate dash dash reset to deploy a new\ncopy of the smart contract to the\nblockchain\nand whenever we do that we're going to\nwant to refresh our web page to pick up\nthat change\nall right so let's try that again sorry\nguys i forgot that step like i said i\nwanted to leave that in the video just\nto show you you know something you might\nforget to do um and hopefully that'll\nhelp you remember\nall right so we'll refresh the page\nnow we see that our other task is gone\nnow why did that happen well that's\nbecause you know whenever we deploy a\nnew copy the smart contract all the\nstate of the smart contract is gone\nright it's a new smart contract whenever\nwe redeploy so all the old tasks we had\nin the smart contract have disappeared\nso we'll add a new one we'll say task\nnumber one\nabout a few\nwe'll just sign these really fast\ntask number two\ntask number three\nall right so now it's actually toggle\none is completed and we see the metamask\nconfirmation pop up we'll sign it\nconfirm\nand there we go\nwe've actually successfully uh checked\noff task number one from the list and we\ncan see that it was added to\num\nyou know the list down here below so we\ncan you know actually to do the to-do\nitem on task number two we can go to\ndappyuniversity.com\nall right we see it awesome we went\nthere\nand now we can go here and check that\nout the list because we actually did it\nconfirm\nand there we go\nall right so that's it guys that's\nactually the end of this tutorial you've\nsuccessfully created your own to-do list\non ethereum powered by smart contracts\nand you've created this client set\napplication to interact with it so\ncongratulations\ni hope you all like this tutorial\nagain be sure to subscribe to the\nchannel if you haven't already and also\ndon't forget you can download\nyou can just sign up for my email list\nto you know get my courses downloaded\nfor free and also you can you know keep\nup with me on twitter and stuff like\nthat for more daily updates\nso also guys\ni'm releasing a premium course like a\nfull decentralized blockchain\ndevelopment course\nsometime soon so you'll want to sign up\nfor that email list to find out more\nupdates about that it's going to be\nreally extensive it's going to be really\nawesome\nyou're going to want to learn about it\nso just stay in touch and also by the\ntime this video is out you'll be able to\nfind an article\nto accompany this video which you can\nfollow along step by step it'll be\nsomewhere on my website it'll probably\nbe in the video description below as\nwell you can see other articles on my\nwebsite here\num\nlike you know this is the uh ultimate\nethereum dap tutorial which i released\nlast year uh which is a pretty popular\ntutorial that shows you how to build\nyour first decentralized application i\nmean you can code your own\ncryptocurrency on ethereum\nyou know build an erc20 token and stuff\nlike that got some other deep dives on\ntopics like you know web3js which we\ntalked about some in this tutorial\num you know a lot more lessons on\nsolidity how to develop smart contracts\ni kind of go into more features of the\nlanguage and things like that so this is\na huge resource with a lot of free stuff\na lot of good information i also have\nsome tutorials on like how to build a\nreal world ico and things like that this\nis like a you know production ready ico\nthat you could use in the real world\nthis is pretty advanced you know and\nalso if you're looking for somebody to\nwork on your blockchain projects um you\nknow i am available my email address is\ndown below i do a lot of you know\nblockchain development a lot of\nconsultation and advising for people who\nare launching blockchain startups icos\nthings like that i've got a complete\nsolution for launching an ico like i\nsaid you can reach out to me via email\nmy email is on my website and also in\nthe description below some buttons here\nyou can contact me on the website like i\nsaid my twitter's here things like that\nso again i hope you all liked this\ntutorial until next time thanks for\nwatching dap university\n",
  "words": [
    "hey",
    "everybody",
    "gregory",
    "dapp",
    "university",
    "today",
    "going",
    "show",
    "write",
    "first",
    "blockchain",
    "application",
    "show",
    "create",
    "list",
    "powered",
    "ethereum",
    "smart",
    "contracts",
    "show",
    "create",
    "first",
    "ethereum",
    "smart",
    "contract",
    "solidity",
    "programming",
    "language",
    "write",
    "tests",
    "smart",
    "contract",
    "deploy",
    "blockchain",
    "also",
    "create",
    "client",
    "side",
    "application",
    "list",
    "new",
    "around",
    "sure",
    "subscribe",
    "channel",
    "click",
    "like",
    "button",
    "also",
    "download",
    "courses",
    "free",
    "website",
    "dap",
    "university",
    "dot",
    "com",
    "forward",
    "slash",
    "free",
    "download",
    "got",
    "link",
    "description",
    "also",
    "website",
    "find",
    "article",
    "accompany",
    "video",
    "actually",
    "follow",
    "step",
    "step",
    "following",
    "tutorial",
    "also",
    "got",
    "link",
    "video",
    "description",
    "start",
    "actually",
    "building",
    "application",
    "let",
    "get",
    "high",
    "level",
    "overview",
    "blockchain",
    "application",
    "powered",
    "smart",
    "contracts",
    "actually",
    "works",
    "blockchain",
    "work",
    "blockchain",
    "application",
    "work",
    "well",
    "chosen",
    "list",
    "tutorial",
    "really",
    "common",
    "way",
    "learn",
    "new",
    "technology",
    "want",
    "use",
    "show",
    "blockchain",
    "application",
    "works",
    "first",
    "let",
    "look",
    "list",
    "would",
    "work",
    "web",
    "application",
    "show",
    "would",
    "work",
    "blockchain",
    "application",
    "put",
    "whiteboard",
    "demonstrate",
    "normally",
    "whenever",
    "access",
    "web",
    "application",
    "like",
    "list",
    "example",
    "use",
    "web",
    "browser",
    "connect",
    "web",
    "server",
    "internet",
    "access",
    "know",
    "code",
    "data",
    "web",
    "server",
    "like",
    "basically",
    "connect",
    "web",
    "browser",
    "server",
    "server",
    "contains",
    "know",
    "files",
    "like",
    "html",
    "css",
    "javascript",
    "know",
    "contains",
    "code",
    "server",
    "right",
    "business",
    "logic",
    "might",
    "write",
    "data",
    "stored",
    "application",
    "stored",
    "database",
    "right",
    "pretty",
    "much",
    "list",
    "tutorial",
    "going",
    "show",
    "write",
    "know",
    "application",
    "html",
    "css",
    "javascript",
    "going",
    "show",
    "basically",
    "business",
    "logic",
    "web",
    "backend",
    "know",
    "creates",
    "reads",
    "writes",
    "updates",
    "puts",
    "inside",
    "database",
    "like",
    "right",
    "know",
    "central",
    "server",
    "build",
    "list",
    "web",
    "application",
    "would",
    "build",
    "list",
    "blockchain",
    "well",
    "would",
    "work",
    "little",
    "bit",
    "differently",
    "instead",
    "connecting",
    "directly",
    "server",
    "know",
    "gon",
    "na",
    "access",
    "list",
    "via",
    "browser",
    "gon",
    "na",
    "know",
    "connect",
    "application",
    "build",
    "simple",
    "application",
    "web",
    "server",
    "application",
    "gon",
    "na",
    "talk",
    "web",
    "backend",
    "database",
    "instead",
    "going",
    "actually",
    "talk",
    "directly",
    "blockchain",
    "blockchain",
    "going",
    "code",
    "going",
    "written",
    "ethereum",
    "smart",
    "contracts",
    "contain",
    "business",
    "logic",
    "list",
    "items",
    "going",
    "stored",
    "blockchain",
    "fundamentally",
    "blockchain",
    "application",
    "would",
    "work",
    "different",
    "traditional",
    "web",
    "application",
    "might",
    "bring",
    "lot",
    "questions",
    "like",
    "well",
    "connect",
    "blockchain",
    "blockchain",
    "work",
    "like",
    "even",
    "blockchain",
    "well",
    "pause",
    "tell",
    "little",
    "bit",
    "even",
    "blockchain",
    "right",
    "application",
    "actually",
    "talking",
    "blockchain",
    "right",
    "actually",
    "separate",
    "network",
    "okay",
    "blockchain",
    "network",
    "nodes",
    "talk",
    "one",
    "another",
    "distributed",
    "network",
    "actually",
    "different",
    "computers",
    "different",
    "machines",
    "talk",
    "one",
    "another",
    "connect",
    "individual",
    "node",
    "blockchain",
    "order",
    "use",
    "web",
    "application",
    "nodes",
    "network",
    "participate",
    "running",
    "network",
    "contain",
    "copy",
    "code",
    "blockchain",
    "data",
    "blockchain",
    "data",
    "blockchain",
    "contained",
    "bundles",
    "records",
    "called",
    "blocks",
    "chained",
    "together",
    "make",
    "blockchain",
    "nodes",
    "network",
    "also",
    "participate",
    "ensuring",
    "data",
    "blockchain",
    "public",
    "ledger",
    "secure",
    "unchangeable",
    "makes",
    "blockchain",
    "powerful",
    "code",
    "blockchain",
    "well",
    "code",
    "blockchain",
    "contained",
    "smart",
    "contracts",
    "smart",
    "contracts",
    "basically",
    "programs",
    "run",
    "blockchain",
    "going",
    "building",
    "blocks",
    "blockchain",
    "applications",
    "going",
    "build",
    "list",
    "going",
    "write",
    "smart",
    "contract",
    "contain",
    "tasks",
    "list",
    "allow",
    "us",
    "add",
    "new",
    "ones",
    "complete",
    "things",
    "like",
    "smart",
    "contracts",
    "written",
    "programming",
    "language",
    "called",
    "solidity",
    "code",
    "smart",
    "contract",
    "immutable",
    "means",
    "unchangeable",
    "whenever",
    "deploy",
    "blockchain",
    "wo",
    "able",
    "update",
    "code",
    "important",
    "understand",
    "makes",
    "blockchain",
    "secure",
    "whenever",
    "put",
    "code",
    "blockchain",
    "know",
    "trust",
    "point",
    "called",
    "trustless",
    "reason",
    "whenever",
    "blockchain",
    "know",
    "one",
    "change",
    "therefore",
    "know",
    "list",
    "behave",
    "way",
    "every",
    "time",
    "sometimes",
    "actually",
    "think",
    "smart",
    "contracts",
    "kind",
    "like",
    "microservices",
    "web",
    "blockchain",
    "read",
    "write",
    "data",
    "blockchain",
    "stuff",
    "know",
    "execute",
    "business",
    "logic",
    "right",
    "go",
    "back",
    "drawing",
    "board",
    "kind",
    "give",
    "refresher",
    "application",
    "going",
    "work",
    "going",
    "connect",
    "application",
    "web",
    "browser",
    "going",
    "build",
    "application",
    "html",
    "css",
    "javascript",
    "application",
    "going",
    "talk",
    "directly",
    "blockchain",
    "going",
    "put",
    "smart",
    "contract",
    "create",
    "list",
    "ethereum",
    "smart",
    "contract",
    "written",
    "solidity",
    "compile",
    "deploy",
    "blockchain",
    "also",
    "connect",
    "blockchain",
    "network",
    "personal",
    "account",
    "ethereum",
    "wallet",
    "browser",
    "show",
    "get",
    "set",
    "tutorial",
    "well",
    "seen",
    "blockchain",
    "works",
    "build",
    "list",
    "application",
    "blockchain",
    "let",
    "jump",
    "start",
    "programming",
    "preview",
    "application",
    "develop",
    "tutorial",
    "list",
    "powered",
    "ethereum",
    "smart",
    "contract",
    "able",
    "add",
    "new",
    "items",
    "able",
    "check",
    "items",
    "list",
    "get",
    "started",
    "need",
    "make",
    "sure",
    "already",
    "installed",
    "computer",
    "see",
    "node",
    "installed",
    "going",
    "terminal",
    "typing",
    "node",
    "v",
    "install",
    "node",
    "package",
    "manager",
    "like",
    "homebrew",
    "download",
    "directly",
    "website",
    "first",
    "item",
    "blockchain",
    "developer",
    "toolkit",
    "personal",
    "blockchain",
    "going",
    "use",
    "ganache",
    "personal",
    "blockchain",
    "tutorial",
    "head",
    "forward",
    "slash",
    "ganache",
    "download",
    "click",
    "download",
    "link",
    "whenever",
    "downloaded",
    "make",
    "sure",
    "install",
    "open",
    "got",
    "local",
    "blockchain",
    "running",
    "ganache",
    "know",
    "personal",
    "blockchain",
    "well",
    "personal",
    "blockchain",
    "like",
    "real",
    "blockchain",
    "network",
    "know",
    "connected",
    "public",
    "anyone",
    "connect",
    "runs",
    "computer",
    "know",
    "closed",
    "network",
    "ganache",
    "basically",
    "know",
    "process",
    "runs",
    "computer",
    "spins",
    "blockchain",
    "runs",
    "server",
    "use",
    "develop",
    "smart",
    "contracts",
    "run",
    "tests",
    "run",
    "scripts",
    "network",
    "develop",
    "applications",
    "actually",
    "talk",
    "blockchain",
    "really",
    "helpful",
    "invaluable",
    "tool",
    "blockchain",
    "developer",
    "toolkit",
    "um",
    "open",
    "ganache",
    "see",
    "know",
    "10",
    "accounts",
    "listed",
    "addresses",
    "account",
    "side",
    "see",
    "know",
    "balances",
    "see",
    "100",
    "ether",
    "ethereum",
    "cryptocurrency",
    "account",
    "know",
    "required",
    "know",
    "pay",
    "gas",
    "fees",
    "network",
    "stuff",
    "like",
    "right",
    "overview",
    "ganache",
    "personal",
    "blockchain",
    "network",
    "going",
    "leave",
    "ganache",
    "set",
    "project",
    "going",
    "need",
    "uh",
    "running",
    "order",
    "develop",
    "project",
    "next",
    "dependency",
    "truffle",
    "framework",
    "going",
    "use",
    "truffle",
    "framework",
    "develop",
    "ethereum",
    "smart",
    "contracts",
    "solidity",
    "programming",
    "language",
    "install",
    "truffle",
    "going",
    "terminal",
    "typing",
    "npm",
    "install",
    "g",
    "truffle",
    "important",
    "use",
    "exact",
    "version",
    "order",
    "follow",
    "along",
    "tutorial",
    "truffle",
    "suite",
    "tools",
    "allows",
    "us",
    "know",
    "develop",
    "smart",
    "contracts",
    "write",
    "tests",
    "smart",
    "contracts",
    "deploy",
    "smart",
    "contracts",
    "blockchain",
    "gives",
    "us",
    "development",
    "console",
    "also",
    "allows",
    "us",
    "develop",
    "applications",
    "inside",
    "project",
    "lot",
    "going",
    "show",
    "features",
    "tutorial",
    "next",
    "dependency",
    "meta",
    "mask",
    "extension",
    "google",
    "chrome",
    "remember",
    "ethereum",
    "blockchain",
    "network",
    "need",
    "special",
    "browser",
    "extension",
    "order",
    "connect",
    "network",
    "metamask",
    "comes",
    "play",
    "metamask",
    "allow",
    "us",
    "connect",
    "blockchain",
    "personal",
    "account",
    "actually",
    "interact",
    "smart",
    "contract",
    "develop",
    "tutorial",
    "install",
    "metamask",
    "going",
    "google",
    "chrome",
    "web",
    "store",
    "searching",
    "metamask",
    "clicking",
    "install",
    "installed",
    "make",
    "sure",
    "enable",
    "inside",
    "chrome",
    "extensions",
    "like",
    "also",
    "see",
    "little",
    "fox",
    "icon",
    "extensions",
    "tab",
    "let",
    "create",
    "project",
    "start",
    "creating",
    "directory",
    "project",
    "like",
    "eth",
    "stands",
    "ethereum",
    "enter",
    "newly",
    "created",
    "directory",
    "inside",
    "actually",
    "create",
    "new",
    "truffle",
    "project",
    "want",
    "make",
    "sure",
    "using",
    "correct",
    "truffle",
    "version",
    "check",
    "truffle",
    "version",
    "like",
    "truffle",
    "version",
    "want",
    "ensure",
    "version",
    "mine",
    "go",
    "ahead",
    "check",
    "dependencies",
    "section",
    "video",
    "see",
    "install",
    "specific",
    "version",
    "truffle",
    "initialize",
    "new",
    "truffle",
    "project",
    "like",
    "say",
    "truffle",
    "init",
    "right",
    "successfully",
    "unboxed",
    "new",
    "travel",
    "project",
    "going",
    "actually",
    "create",
    "file",
    "order",
    "know",
    "pull",
    "development",
    "dependencies",
    "project",
    "say",
    "touch",
    "package",
    "dot",
    "json",
    "right",
    "going",
    "open",
    "project",
    "inside",
    "sublime",
    "text",
    "text",
    "editor",
    "using",
    "let",
    "go",
    "file",
    "actually",
    "see",
    "project",
    "directory",
    "see",
    "newly",
    "created",
    "file",
    "empty",
    "going",
    "paste",
    "contents",
    "file",
    "use",
    "tutorial",
    "actually",
    "get",
    "file",
    "cloning",
    "repository",
    "github",
    "link",
    "description",
    "right",
    "dependencies",
    "project",
    "going",
    "go",
    "ahead",
    "save",
    "like",
    "said",
    "pasted",
    "see",
    "dependencies",
    "like",
    "bootstrap",
    "framework",
    "use",
    "building",
    "um",
    "application",
    "got",
    "dependencies",
    "testing",
    "smart",
    "contracts",
    "server",
    "running",
    "application",
    "know",
    "truffle",
    "specific",
    "development",
    "dependencies",
    "locked",
    "versions",
    "um",
    "keep",
    "following",
    "tutorial",
    "future",
    "make",
    "sure",
    "versions",
    "match",
    "actually",
    "going",
    "install",
    "dependencies",
    "project",
    "like",
    "say",
    "npm",
    "install",
    "right",
    "installed",
    "let",
    "go",
    "back",
    "project",
    "actually",
    "create",
    "smart",
    "contract",
    "file",
    "use",
    "build",
    "list",
    "going",
    "contracts",
    "directory",
    "see",
    "smart",
    "contract",
    "exists",
    "inside",
    "actually",
    "smart",
    "contract",
    "comes",
    "bundled",
    "truffle",
    "manages",
    "migrations",
    "network",
    "explain",
    "little",
    "bit",
    "create",
    "new",
    "file",
    "inside",
    "directory",
    "called",
    "list",
    "dot",
    "sol",
    "see",
    "list",
    "capitalized",
    "list",
    "project",
    "directory",
    "let",
    "actually",
    "create",
    "smart",
    "contract",
    "manage",
    "list",
    "application",
    "first",
    "thing",
    "want",
    "inside",
    "file",
    "actually",
    "declare",
    "version",
    "solidity",
    "programming",
    "language",
    "want",
    "use",
    "like",
    "say",
    "pragma",
    "solidity",
    "use",
    "carrot",
    "going",
    "say",
    "version",
    "end",
    "line",
    "semicolon",
    "right",
    "next",
    "thing",
    "actually",
    "declare",
    "smart",
    "contract",
    "contract",
    "keyword",
    "say",
    "contract",
    "want",
    "call",
    "contract",
    "list",
    "name",
    "file",
    "say",
    "list",
    "follow",
    "opening",
    "closing",
    "curly",
    "braces",
    "inside",
    "actually",
    "write",
    "code",
    "smart",
    "contract",
    "go",
    "ahead",
    "bump",
    "font",
    "see",
    "little",
    "better",
    "first",
    "thing",
    "inside",
    "keep",
    "track",
    "number",
    "tasks",
    "list",
    "store",
    "value",
    "inside",
    "smart",
    "contract",
    "way",
    "kind",
    "get",
    "started",
    "make",
    "sure",
    "everything",
    "set",
    "properly",
    "project",
    "deploy",
    "simple",
    "smart",
    "contract",
    "blockchain",
    "actually",
    "see",
    "connect",
    "know",
    "anything",
    "complicated",
    "first",
    "keep",
    "track",
    "number",
    "lists",
    "inside",
    "smart",
    "contract",
    "variable",
    "special",
    "kind",
    "variable",
    "solidity",
    "called",
    "state",
    "variable",
    "declare",
    "state",
    "variable",
    "like",
    "say",
    "unt",
    "task",
    "count",
    "state",
    "variables",
    "inside",
    "solidity",
    "actually",
    "written",
    "blockchain",
    "called",
    "state",
    "variables",
    "actually",
    "represent",
    "state",
    "smart",
    "contract",
    "blockchain",
    "state",
    "smart",
    "contract",
    "going",
    "change",
    "anytime",
    "task",
    "count",
    "changes",
    "lot",
    "like",
    "know",
    "class",
    "variables",
    "context",
    "know",
    "scope",
    "variable",
    "belongs",
    "entire",
    "smart",
    "contract",
    "necessarily",
    "like",
    "function",
    "something",
    "like",
    "see",
    "continue",
    "tutorial",
    "initially",
    "set",
    "value",
    "zero",
    "like",
    "right",
    "say",
    "equal",
    "zero",
    "also",
    "create",
    "way",
    "read",
    "value",
    "smart",
    "contract",
    "keyword",
    "called",
    "public",
    "right",
    "actually",
    "provides",
    "function",
    "us",
    "allows",
    "us",
    "read",
    "value",
    "task",
    "count",
    "list",
    "solidity",
    "kind",
    "magically",
    "gives",
    "us",
    "function",
    "whenever",
    "use",
    "public",
    "keyword",
    "right",
    "basic",
    "smart",
    "contract",
    "order",
    "set",
    "project",
    "actually",
    "deploy",
    "blockchain",
    "make",
    "sure",
    "everything",
    "set",
    "correctly",
    "come",
    "back",
    "know",
    "build",
    "throughout",
    "tutorial",
    "want",
    "simple",
    "check",
    "make",
    "sure",
    "everything",
    "works",
    "properly",
    "let",
    "actually",
    "compile",
    "smart",
    "contract",
    "goes",
    "blockchain",
    "make",
    "sure",
    "wrote",
    "code",
    "correctly",
    "go",
    "terminal",
    "type",
    "truffle",
    "compile",
    "see",
    "actually",
    "created",
    "new",
    "files",
    "show",
    "project",
    "go",
    "build",
    "directory",
    "contracts",
    "see",
    "migrations",
    "actually",
    "json",
    "representation",
    "smart",
    "contract",
    "created",
    "truffle",
    "contains",
    "information",
    "useful",
    "us",
    "smart",
    "contract",
    "abi",
    "abstract",
    "binary",
    "interface",
    "actually",
    "use",
    "later",
    "tutorial",
    "talk",
    "smart",
    "contract",
    "javascript",
    "see",
    "byte",
    "code",
    "created",
    "smart",
    "contract",
    "actually",
    "byte",
    "code",
    "gets",
    "run",
    "ethereum",
    "virtual",
    "machine",
    "yeah",
    "lot",
    "useful",
    "information",
    "inside",
    "wanted",
    "show",
    "initially",
    "order",
    "actually",
    "put",
    "smart",
    "contract",
    "blockchain",
    "want",
    "create",
    "files",
    "kind",
    "give",
    "tour",
    "rest",
    "project",
    "structure",
    "order",
    "connect",
    "blockchain",
    "actually",
    "need",
    "update",
    "truffle",
    "dash",
    "config",
    "file",
    "right",
    "actually",
    "going",
    "paste",
    "code",
    "inside",
    "get",
    "code",
    "repository",
    "uh",
    "project",
    "github",
    "repo",
    "got",
    "description",
    "check",
    "link",
    "right",
    "going",
    "save",
    "explain",
    "going",
    "basically",
    "inside",
    "configuration",
    "file",
    "network",
    "key",
    "inside",
    "object",
    "right",
    "allows",
    "specify",
    "several",
    "different",
    "networks",
    "development",
    "network",
    "um",
    "actually",
    "connecting",
    "ganache",
    "localhost",
    "port",
    "ganache",
    "running",
    "let",
    "go",
    "ahead",
    "actually",
    "make",
    "sure",
    "ganache",
    "running",
    "open",
    "ganache",
    "find",
    "wherever",
    "installed",
    "make",
    "sure",
    "open",
    "see",
    "port",
    "7545",
    "right",
    "see",
    "localhost",
    "filled",
    "um",
    "actually",
    "talking",
    "local",
    "blockchain",
    "let",
    "create",
    "migration",
    "file",
    "order",
    "get",
    "smart",
    "contract",
    "onto",
    "blockchain",
    "go",
    "migrations",
    "directory",
    "see",
    "file",
    "inside",
    "called",
    "initial",
    "migrations",
    "actually",
    "going",
    "copy",
    "contents",
    "actually",
    "create",
    "new",
    "file",
    "directory",
    "call",
    "uh",
    "two",
    "say",
    "deploy",
    "contracts",
    "dot",
    "js",
    "okay",
    "inside",
    "directory",
    "well",
    "migrations",
    "going",
    "paste",
    "code",
    "migration",
    "well",
    "come",
    "another",
    "development",
    "background",
    "used",
    "database",
    "might",
    "change",
    "state",
    "database",
    "adding",
    "new",
    "tables",
    "adding",
    "columns",
    "tables",
    "changing",
    "state",
    "database",
    "structure",
    "right",
    "schema",
    "essentially",
    "project",
    "right",
    "migration",
    "whenever",
    "deploying",
    "smart",
    "contract",
    "blockchain",
    "actually",
    "changing",
    "blockchain",
    "state",
    "remember",
    "blockchain",
    "basically",
    "big",
    "database",
    "one",
    "sense",
    "whenever",
    "put",
    "smart",
    "contract",
    "blockchain",
    "updating",
    "state",
    "thereby",
    "need",
    "migration",
    "order",
    "okay",
    "see",
    "migration",
    "files",
    "numbered",
    "tells",
    "truffle",
    "order",
    "need",
    "run",
    "make",
    "sure",
    "starts",
    "number",
    "two",
    "inside",
    "actually",
    "change",
    "change",
    "migrations",
    "list",
    "lists",
    "artifact",
    "require",
    "truffle",
    "creates",
    "artifact",
    "saw",
    "second",
    "ago",
    "going",
    "abstraction",
    "smart",
    "contract",
    "understands",
    "order",
    "put",
    "blockchain",
    "let",
    "actually",
    "run",
    "migration",
    "deploy",
    "smart",
    "contract",
    "blockchain",
    "first",
    "make",
    "sure",
    "ganache",
    "running",
    "make",
    "sure",
    "know",
    "configured",
    "correctly",
    "run",
    "migration",
    "like",
    "say",
    "truffle",
    "migrate",
    "right",
    "looks",
    "like",
    "successful",
    "done",
    "actually",
    "deployed",
    "smart",
    "contract",
    "blockchain",
    "open",
    "ganache",
    "see",
    "something",
    "changed",
    "know",
    "first",
    "account",
    "see",
    "balance",
    "ether",
    "know",
    "ethereum",
    "cryptocurrency",
    "balance",
    "actually",
    "gone",
    "little",
    "bit",
    "deploying",
    "smart",
    "contracts",
    "blockchain",
    "actually",
    "costs",
    "ether",
    "costs",
    "gas",
    "see",
    "account",
    "done",
    "actually",
    "paid",
    "gas",
    "fee",
    "order",
    "deploy",
    "smart",
    "contract",
    "blockchain",
    "truffle",
    "default",
    "uses",
    "first",
    "account",
    "inside",
    "wallet",
    "order",
    "pay",
    "fees",
    "let",
    "open",
    "truffle",
    "console",
    "order",
    "check",
    "smart",
    "contract",
    "deployed",
    "blockchain",
    "like",
    "say",
    "truffle",
    "console",
    "retrieve",
    "smart",
    "contract",
    "blockchain",
    "like",
    "say",
    "list",
    "equals",
    "await",
    "list",
    "dot",
    "deployed",
    "list",
    "name",
    "uh",
    "smart",
    "contract",
    "created",
    "migration",
    "go",
    "back",
    "project",
    "see",
    "know",
    "list",
    "right",
    "actually",
    "retrieved",
    "smart",
    "contract",
    "deployed",
    "copy",
    "blockchain",
    "assigned",
    "variable",
    "list",
    "see",
    "await",
    "keyword",
    "let",
    "explain",
    "must",
    "interact",
    "blockchain",
    "asynchronous",
    "fashion",
    "ever",
    "developed",
    "javascript",
    "applications",
    "would",
    "know",
    "lot",
    "different",
    "strategies",
    "handling",
    "asynchronous",
    "actions",
    "right",
    "use",
    "promises",
    "lot",
    "different",
    "ways",
    "truffle",
    "version",
    "five",
    "actually",
    "able",
    "use",
    "async",
    "await",
    "pattern",
    "inside",
    "console",
    "really",
    "nice",
    "things",
    "simple",
    "one",
    "line",
    "like",
    "basically",
    "saying",
    "know",
    "wait",
    "finished",
    "result",
    "whatever",
    "result",
    "assigned",
    "variable",
    "actually",
    "look",
    "say",
    "lists",
    "right",
    "actually",
    "see",
    "result",
    "smart",
    "contract",
    "pull",
    "see",
    "let",
    "actually",
    "get",
    "address",
    "contract",
    "say",
    "list",
    "address",
    "right",
    "see",
    "address",
    "smart",
    "contract",
    "deployed",
    "blockchain",
    "located",
    "actually",
    "see",
    "count",
    "tasks",
    "created",
    "smart",
    "contract",
    "say",
    "list",
    "dot",
    "count",
    "like",
    "sorry",
    "task",
    "account",
    "called",
    "right",
    "see",
    "zero",
    "truffle",
    "actually",
    "stores",
    "big",
    "number",
    "whenever",
    "retrieve",
    "could",
    "convert",
    "number",
    "like",
    "could",
    "say",
    "uh",
    "task",
    "account",
    "assign",
    "variable",
    "say",
    "weight",
    "right",
    "could",
    "say",
    "task",
    "count",
    "two",
    "number",
    "see",
    "zero",
    "right",
    "good",
    "check",
    "see",
    "everything",
    "set",
    "properly",
    "able",
    "complete",
    "far",
    "know",
    "able",
    "create",
    "smart",
    "contract",
    "create",
    "new",
    "truffle",
    "project",
    "know",
    "connect",
    "blockchain",
    "actually",
    "put",
    "smart",
    "contract",
    "blockchain",
    "talk",
    "trouble",
    "know",
    "rewind",
    "video",
    "try",
    "see",
    "might",
    "gone",
    "wrong",
    "want",
    "actually",
    "pause",
    "commit",
    "changes",
    "going",
    "create",
    "new",
    "git",
    "repository",
    "say",
    "git",
    "init",
    "inside",
    "actually",
    "going",
    "create",
    "git",
    "ignore",
    "file",
    "necessarily",
    "follow",
    "along",
    "steps",
    "going",
    "see",
    "going",
    "inside",
    "create",
    "git",
    "ignore",
    "file",
    "ignores",
    "node",
    "modules",
    "directory",
    "commit",
    "node",
    "modules",
    "source",
    "right",
    "going",
    "say",
    "git",
    "add",
    "sure",
    "errors",
    "sorry",
    "going",
    "get",
    "commit",
    "say",
    "project",
    "setup",
    "right",
    "first",
    "part",
    "tutorial",
    "actually",
    "set",
    "project",
    "next",
    "section",
    "actually",
    "going",
    "list",
    "tasks",
    "list",
    "let",
    "list",
    "tasks",
    "inside",
    "list",
    "show",
    "steps",
    "follow",
    "first",
    "list",
    "tasks",
    "smart",
    "contract",
    "console",
    "next",
    "actually",
    "wire",
    "client",
    "side",
    "application",
    "list",
    "tasks",
    "finally",
    "write",
    "tests",
    "make",
    "sure",
    "smart",
    "contract",
    "listing",
    "tasks",
    "correctly",
    "first",
    "go",
    "smart",
    "contract",
    "working",
    "lists",
    "actually",
    "write",
    "code",
    "list",
    "tasks",
    "list",
    "first",
    "need",
    "way",
    "actually",
    "model",
    "task",
    "something",
    "called",
    "struct",
    "solidity",
    "allows",
    "us",
    "define",
    "data",
    "types",
    "structs",
    "create",
    "new",
    "struct",
    "like",
    "say",
    "struct",
    "task",
    "follows",
    "curly",
    "braces",
    "actually",
    "give",
    "attributes",
    "second",
    "let",
    "pause",
    "explain",
    "uh",
    "features",
    "solidity",
    "right",
    "solidity",
    "statically",
    "typed",
    "language",
    "fact",
    "see",
    "data",
    "types",
    "listed",
    "know",
    "uint",
    "unsigned",
    "integer",
    "basically",
    "means",
    "integer",
    "uh",
    "ca",
    "negative",
    "right",
    "integers",
    "positive",
    "negative",
    "minus",
    "sign",
    "know",
    "sign",
    "front",
    "positive",
    "sign",
    "solidity",
    "allows",
    "us",
    "define",
    "uh",
    "struct",
    "task",
    "give",
    "attributes",
    "like",
    "say",
    "uint",
    "id",
    "id",
    "task",
    "going",
    "unsigned",
    "integer",
    "basically",
    "means",
    "integer",
    "ca",
    "negative",
    "right",
    "negative",
    "integer",
    "would",
    "sign",
    "front",
    "sign",
    "integer",
    "unsigned",
    "next",
    "thing",
    "string",
    "say",
    "content",
    "know",
    "text",
    "next",
    "boolean",
    "completed",
    "represent",
    "checkbox",
    "state",
    "list",
    "know",
    "whether",
    "item",
    "checked",
    "right",
    "actually",
    "model",
    "task",
    "list",
    "data",
    "structure",
    "need",
    "place",
    "put",
    "tasks",
    "go",
    "well",
    "effectively",
    "want",
    "put",
    "storage",
    "blockchain",
    "access",
    "storage",
    "need",
    "create",
    "new",
    "state",
    "variable",
    "like",
    "task",
    "account",
    "remember",
    "task",
    "account",
    "getting",
    "written",
    "storage",
    "state",
    "variable",
    "representing",
    "state",
    "smart",
    "contract",
    "written",
    "blockchain",
    "actual",
    "data",
    "storage",
    "actually",
    "want",
    "create",
    "state",
    "variable",
    "called",
    "tasks",
    "want",
    "know",
    "unsigned",
    "integer",
    "want",
    "different",
    "data",
    "type",
    "want",
    "something",
    "called",
    "mapping",
    "going",
    "take",
    "key",
    "value",
    "pair",
    "like",
    "say",
    "uint",
    "say",
    "task",
    "okay",
    "mapping",
    "solidity",
    "lot",
    "like",
    "associative",
    "array",
    "hash",
    "programming",
    "languages",
    "store",
    "key",
    "value",
    "pair",
    "right",
    "declare",
    "mapping",
    "declare",
    "data",
    "type",
    "key",
    "unsigned",
    "integer",
    "task",
    "know",
    "struct",
    "defined",
    "essentially",
    "going",
    "kind",
    "like",
    "database",
    "us",
    "uint",
    "unsigned",
    "integer",
    "id",
    "essentially",
    "task",
    "store",
    "look",
    "task",
    "know",
    "one",
    "two",
    "three",
    "return",
    "tasks",
    "okay",
    "also",
    "want",
    "make",
    "public",
    "like",
    "task",
    "account",
    "give",
    "us",
    "reader",
    "function",
    "free",
    "provided",
    "solidity",
    "allow",
    "us",
    "access",
    "items",
    "mapping",
    "right",
    "way",
    "create",
    "new",
    "tasks",
    "actually",
    "put",
    "know",
    "database",
    "blockchain",
    "case",
    "able",
    "use",
    "task",
    "id",
    "reference",
    "store",
    "task",
    "like",
    "need",
    "way",
    "actually",
    "put",
    "task",
    "struct",
    "inside",
    "mapping",
    "create",
    "function",
    "called",
    "create",
    "task",
    "say",
    "function",
    "create",
    "task",
    "inside",
    "provide",
    "single",
    "argument",
    "content",
    "task",
    "say",
    "string",
    "memory",
    "say",
    "content",
    "let",
    "public",
    "right",
    "inside",
    "going",
    "write",
    "code",
    "puts",
    "task",
    "inside",
    "mapping",
    "first",
    "thing",
    "determine",
    "id",
    "task",
    "going",
    "create",
    "right",
    "using",
    "task",
    "count",
    "see",
    "task",
    "struct",
    "id",
    "want",
    "increment",
    "task",
    "count",
    "value",
    "anytime",
    "creating",
    "new",
    "task",
    "put",
    "inside",
    "mapping",
    "like",
    "say",
    "task",
    "count",
    "use",
    "increment",
    "operator",
    "might",
    "find",
    "uh",
    "similar",
    "programming",
    "languages",
    "basically",
    "changing",
    "value",
    "one",
    "right",
    "done",
    "new",
    "task",
    "count",
    "zero",
    "first",
    "time",
    "call",
    "uh",
    "change",
    "one",
    "means",
    "first",
    "task",
    "put",
    "inside",
    "mapping",
    "whenever",
    "call",
    "create",
    "task",
    "function",
    "one",
    "next",
    "time",
    "two",
    "next",
    "time",
    "three",
    "let",
    "actually",
    "put",
    "inside",
    "mapping",
    "like",
    "say",
    "tasks",
    "reference",
    "mapping",
    "say",
    "task",
    "account",
    "actually",
    "reference",
    "uh",
    "know",
    "key",
    "unsigned",
    "integer",
    "say",
    "equals",
    "create",
    "new",
    "task",
    "like",
    "say",
    "know",
    "task",
    "copy",
    "say",
    "task",
    "count",
    "provide",
    "arguments",
    "structs",
    "id",
    "content",
    "completed",
    "task",
    "count",
    "new",
    "id",
    "content",
    "content",
    "passed",
    "oops",
    "function",
    "new",
    "task",
    "completed",
    "yet",
    "say",
    "false",
    "right",
    "way",
    "actually",
    "put",
    "tasks",
    "inside",
    "list",
    "need",
    "prerequisite",
    "order",
    "list",
    "tasks",
    "know",
    "need",
    "tasks",
    "inside",
    "list",
    "order",
    "show",
    "next",
    "thing",
    "want",
    "actually",
    "know",
    "go",
    "ahead",
    "populate",
    "list",
    "know",
    "call",
    "client",
    "side",
    "already",
    "got",
    "items",
    "inside",
    "us",
    "okay",
    "basically",
    "add",
    "tasks",
    "list",
    "whenever",
    "smart",
    "contract",
    "deployed",
    "well",
    "something",
    "called",
    "constructor",
    "function",
    "smart",
    "contract",
    "ever",
    "used",
    "another",
    "programming",
    "language",
    "like",
    "initialize",
    "function",
    "inside",
    "class",
    "sort",
    "object",
    "know",
    "maybe",
    "init",
    "new",
    "something",
    "like",
    "seen",
    "constructor",
    "basically",
    "going",
    "function",
    "called",
    "whenever",
    "smart",
    "contract",
    "run",
    "first",
    "time",
    "case",
    "upon",
    "deployment",
    "right",
    "inside",
    "constructor",
    "function",
    "actually",
    "add",
    "default",
    "task",
    "list",
    "right",
    "like",
    "say",
    "create",
    "task",
    "task",
    "pass",
    "uh",
    "check",
    "app",
    "university",
    "dot",
    "com",
    "right",
    "put",
    "semicolon",
    "whenever",
    "access",
    "smart",
    "contract",
    "first",
    "time",
    "default",
    "task",
    "inside",
    "whenever",
    "list",
    "tasks",
    "something",
    "forced",
    "see",
    "way",
    "know",
    "worked",
    "properly",
    "whenever",
    "look",
    "console",
    "connect",
    "application",
    "write",
    "tests",
    "things",
    "like",
    "right",
    "let",
    "actually",
    "compile",
    "smart",
    "contract",
    "make",
    "sure",
    "worked",
    "could",
    "say",
    "truffle",
    "pile",
    "may",
    "syntax",
    "errors",
    "something",
    "like",
    "see",
    "right",
    "worked",
    "let",
    "actually",
    "open",
    "console",
    "see",
    "worked",
    "say",
    "truffle",
    "console",
    "well",
    "actually",
    "first",
    "let",
    "make",
    "sure",
    "ganache",
    "running",
    "let",
    "pull",
    "right",
    "ganache",
    "running",
    "actually",
    "need",
    "migrate",
    "smart",
    "contracts",
    "say",
    "truffle",
    "migrate",
    "going",
    "pass",
    "reset",
    "flag",
    "safe",
    "case",
    "ganache",
    "already",
    "running",
    "reset",
    "flag",
    "well",
    "would",
    "deploy",
    "new",
    "copy",
    "smart",
    "contract",
    "blockchain",
    "existing",
    "one",
    "um",
    "already",
    "like",
    "go",
    "know",
    "change",
    "smart",
    "contract",
    "code",
    "added",
    "new",
    "functions",
    "something",
    "like",
    "could",
    "migrate",
    "reset",
    "flag",
    "uh",
    "deploy",
    "new",
    "copy",
    "gon",
    "na",
    "case",
    "ganache",
    "running",
    "already",
    "right",
    "let",
    "open",
    "truffle",
    "console",
    "like",
    "truffle",
    "console",
    "actually",
    "list",
    "items",
    "first",
    "get",
    "copy",
    "list",
    "say",
    "list",
    "equals",
    "await",
    "right",
    "let",
    "make",
    "sure",
    "address",
    "say",
    "address",
    "oops",
    "misspelled",
    "okay",
    "let",
    "actually",
    "list",
    "items",
    "let",
    "explain",
    "something",
    "mapping",
    "want",
    "call",
    "tasks",
    "function",
    "provided",
    "solidity",
    "list",
    "task",
    "list",
    "remember",
    "declare",
    "public",
    "solidity",
    "gave",
    "us",
    "tasks",
    "function",
    "free",
    "reference",
    "mapping",
    "whenever",
    "call",
    "function",
    "wo",
    "return",
    "tasks",
    "list",
    "solidity",
    "us",
    "mapping",
    "dynamic",
    "size",
    "way",
    "know",
    "natively",
    "know",
    "big",
    "inside",
    "smart",
    "contract",
    "um",
    "ca",
    "iterate",
    "ca",
    "return",
    "entire",
    "thing",
    "actually",
    "reference",
    "items",
    "one",
    "one",
    "using",
    "task",
    "account",
    "counter",
    "cache",
    "know",
    "task",
    "count",
    "one",
    "means",
    "one",
    "task",
    "list",
    "would",
    "call",
    "function",
    "one",
    "time",
    "get",
    "task",
    "would",
    "pass",
    "id",
    "would",
    "one",
    "case",
    "would",
    "return",
    "task",
    "10",
    "would",
    "10",
    "times",
    "call",
    "function",
    "one",
    "would",
    "return",
    "task",
    "number",
    "one",
    "call",
    "second",
    "time",
    "two",
    "would",
    "return",
    "task",
    "number",
    "two",
    "et",
    "cetera",
    "et",
    "cetera",
    "get",
    "10",
    "case",
    "return",
    "task",
    "number",
    "would",
    "client",
    "side",
    "would",
    "use",
    "loop",
    "something",
    "like",
    "get",
    "whenever",
    "reach",
    "section",
    "inside",
    "console",
    "reference",
    "know",
    "item",
    "inside",
    "task",
    "one",
    "say",
    "task",
    "equals",
    "await",
    "lists",
    "dot",
    "tasks",
    "say",
    "one",
    "right",
    "let",
    "see",
    "task",
    "bumped",
    "right",
    "go",
    "task",
    "see",
    "content",
    "check",
    "see",
    "completed",
    "false",
    "see",
    "id",
    "one",
    "big",
    "number",
    "actually",
    "inside",
    "say",
    "task",
    "id",
    "two",
    "number",
    "right",
    "one",
    "task",
    "content",
    "sorry",
    "function",
    "attribute",
    "right",
    "actually",
    "migrated",
    "smart",
    "contract",
    "blockchain",
    "able",
    "list",
    "tasks",
    "inside",
    "console",
    "let",
    "create",
    "client",
    "side",
    "application",
    "actually",
    "list",
    "tasks",
    "order",
    "need",
    "create",
    "new",
    "files",
    "first",
    "create",
    "directory",
    "store",
    "files",
    "say",
    "say",
    "source",
    "see",
    "new",
    "directory",
    "came",
    "create",
    "new",
    "file",
    "inside",
    "called",
    "sorry",
    "say",
    "touch",
    "source",
    "create",
    "file",
    "store",
    "javascript",
    "code",
    "say",
    "touch",
    "source",
    "okay",
    "stepping",
    "project",
    "see",
    "empty",
    "file",
    "empty",
    "file",
    "another",
    "file",
    "actually",
    "want",
    "create",
    "um",
    "bs",
    "config",
    "file",
    "bs",
    "config",
    "stands",
    "browser",
    "sync",
    "configuration",
    "mean",
    "browser",
    "sync",
    "something",
    "use",
    "uh",
    "part",
    "light",
    "server",
    "go",
    "package",
    "uh",
    "json",
    "file",
    "see",
    "light",
    "server",
    "dependency",
    "web",
    "server",
    "going",
    "use",
    "order",
    "run",
    "client",
    "side",
    "application",
    "need",
    "configure",
    "server",
    "know",
    "different",
    "directories",
    "inside",
    "project",
    "want",
    "tell",
    "source",
    "directory",
    "know",
    "client",
    "side",
    "files",
    "want",
    "tell",
    "contract",
    "smart",
    "contract",
    "json",
    "files",
    "also",
    "want",
    "tell",
    "node",
    "modules",
    "pull",
    "dependencies",
    "building",
    "front",
    "end",
    "like",
    "actually",
    "create",
    "new",
    "file",
    "say",
    "touch",
    "bs",
    "config",
    "dot",
    "uh",
    "json",
    "okay",
    "inside",
    "file",
    "actually",
    "going",
    "paste",
    "code",
    "um",
    "actually",
    "get",
    "configuration",
    "project",
    "github",
    "description",
    "let",
    "paste",
    "inside",
    "worry",
    "much",
    "proprietary",
    "uh",
    "browser",
    "sync",
    "configuration",
    "basically",
    "saying",
    "server",
    "configuration",
    "uh",
    "pulling",
    "files",
    "source",
    "directory",
    "also",
    "build",
    "contracts",
    "directory",
    "basically",
    "saying",
    "expose",
    "directories",
    "web",
    "server",
    "root",
    "also",
    "going",
    "mask",
    "vendor",
    "node",
    "modules",
    "uh",
    "node",
    "modules",
    "exist",
    "inside",
    "project",
    "reference",
    "vendor",
    "route",
    "right",
    "server",
    "configuration",
    "actually",
    "want",
    "fill",
    "file",
    "likewise",
    "inside",
    "want",
    "spend",
    "bunch",
    "time",
    "writing",
    "html",
    "css",
    "going",
    "paste",
    "uh",
    "code",
    "application",
    "pull",
    "source",
    "code",
    "github",
    "link",
    "going",
    "paste",
    "like",
    "actually",
    "build",
    "javascript",
    "part",
    "want",
    "spend",
    "much",
    "time",
    "writing",
    "html",
    "right",
    "going",
    "paste",
    "explain",
    "know",
    "going",
    "um",
    "basically",
    "know",
    "pulling",
    "twitter",
    "bootstrap",
    "framework",
    "write",
    "front",
    "end",
    "write",
    "bunch",
    "css",
    "ui",
    "elements",
    "ourself",
    "um",
    "know",
    "see",
    "uh",
    "bootstrap",
    "showed",
    "second",
    "ago",
    "bs",
    "config",
    "got",
    "vendor",
    "see",
    "basic",
    "css",
    "written",
    "inside",
    "head",
    "tag",
    "yeah",
    "got",
    "markup",
    "essentially",
    "simple",
    "loader",
    "show",
    "whatever",
    "application",
    "loading",
    "form",
    "allows",
    "us",
    "create",
    "new",
    "item",
    "actually",
    "um",
    "way",
    "list",
    "tasks",
    "going",
    "uh",
    "comment",
    "form",
    "think",
    "think",
    "run",
    "otherwise",
    "right",
    "let",
    "actually",
    "see",
    "start",
    "server",
    "start",
    "server",
    "new",
    "tab",
    "say",
    "uh",
    "npm",
    "run",
    "dev",
    "believe",
    "command",
    "right",
    "yep",
    "worked",
    "see",
    "uh",
    "basically",
    "got",
    "something",
    "right",
    "see",
    "loading",
    "fine",
    "um",
    "open",
    "console",
    "sure",
    "see",
    "errors",
    "something",
    "like",
    "yeah",
    "failed",
    "resource",
    "okay",
    "worry",
    "yet",
    "wire",
    "actually",
    "work",
    "wanted",
    "make",
    "sure",
    "server",
    "working",
    "properly",
    "see",
    "bootstrap",
    "right",
    "see",
    "nav",
    "bar",
    "see",
    "dav",
    "diversity",
    "list",
    "actually",
    "click",
    "link",
    "take",
    "website",
    "pretty",
    "cool",
    "um",
    "yeah",
    "let",
    "fill",
    "project",
    "actually",
    "list",
    "application",
    "list",
    "items",
    "essentially",
    "want",
    "fill",
    "uh",
    "unordered",
    "list",
    "got",
    "two",
    "list",
    "tasks",
    "completed",
    "tasks",
    "uncompleted",
    "task",
    "go",
    "list",
    "whenever",
    "complete",
    "go",
    "uncompleted",
    "stay",
    "task",
    "list",
    "right",
    "order",
    "need",
    "several",
    "things",
    "inside",
    "file",
    "actually",
    "create",
    "um",
    "know",
    "javascript",
    "app",
    "talks",
    "blockchain",
    "first",
    "thing",
    "actually",
    "create",
    "app",
    "like",
    "let",
    "say",
    "app",
    "object",
    "okay",
    "create",
    "load",
    "function",
    "actually",
    "call",
    "async",
    "going",
    "use",
    "lot",
    "async",
    "functions",
    "inside",
    "tutorial",
    "using",
    "lot",
    "async",
    "await",
    "pattern",
    "loading",
    "data",
    "blockchain",
    "seems",
    "pretty",
    "helpful",
    "fill",
    "order",
    "load",
    "app",
    "let",
    "actually",
    "console",
    "log",
    "uploading",
    "order",
    "load",
    "app",
    "whenever",
    "project",
    "loads",
    "say",
    "say",
    "window",
    "loads",
    "uh",
    "pass",
    "function",
    "say",
    "actually",
    "mean",
    "put",
    "inside",
    "object",
    "like",
    "right",
    "let",
    "reload",
    "right",
    "see",
    "app",
    "actually",
    "loading",
    "right",
    "actually",
    "put",
    "windows",
    "side",
    "side",
    "see",
    "list",
    "actually",
    "responsive",
    "cool",
    "able",
    "see",
    "tasks",
    "right",
    "able",
    "focus",
    "code",
    "first",
    "thing",
    "want",
    "inside",
    "load",
    "function",
    "actually",
    "say",
    "await",
    "web3",
    "want",
    "load",
    "web3",
    "library",
    "order",
    "connect",
    "blockchain",
    "load",
    "web",
    "3",
    "actually",
    "going",
    "use",
    "configuration",
    "specified",
    "metamask",
    "right",
    "creating",
    "way",
    "talk",
    "blockchain",
    "want",
    "metamask",
    "going",
    "browser",
    "extension",
    "use",
    "connect",
    "dap",
    "blockchain",
    "application",
    "talk",
    "blockchain",
    "web3js",
    "metamask",
    "actually",
    "suggests",
    "way",
    "going",
    "reinvent",
    "wheel",
    "going",
    "metamask",
    "tells",
    "us",
    "going",
    "actually",
    "paste",
    "configuration",
    "suggest",
    "worry",
    "understand",
    "going",
    "know",
    "works",
    "inside",
    "github",
    "repository",
    "find",
    "code",
    "link",
    "link",
    "description",
    "let",
    "pause",
    "feel",
    "like",
    "fully",
    "explained",
    "web3",
    "js",
    "well",
    "going",
    "okay",
    "remember",
    "list",
    "application",
    "backed",
    "blockchain",
    "want",
    "actually",
    "connect",
    "blockchain",
    "use",
    "things",
    "happen",
    "connect",
    "browser",
    "blockchain",
    "use",
    "metamask",
    "right",
    "application",
    "needs",
    "actually",
    "connect",
    "blockchain",
    "web3js",
    "inside",
    "project",
    "use",
    "library",
    "talk",
    "ethereum",
    "blockchain",
    "actually",
    "allow",
    "us",
    "connect",
    "know",
    "read",
    "write",
    "data",
    "blockchain",
    "inside",
    "app",
    "metamask",
    "allow",
    "us",
    "know",
    "communicate",
    "client",
    "application",
    "web3js",
    "allow",
    "us",
    "know",
    "interact",
    "via",
    "browser",
    "loaded",
    "know",
    "loaded",
    "blockchain",
    "connection",
    "essentially",
    "even",
    "call",
    "like",
    "connect",
    "blockchain",
    "wanted",
    "um",
    "actually",
    "use",
    "browser",
    "connect",
    "metamask",
    "let",
    "actually",
    "open",
    "ganache",
    "let",
    "actually",
    "find",
    "private",
    "key",
    "show",
    "key",
    "copy",
    "right",
    "go",
    "metamask",
    "make",
    "sure",
    "opened",
    "already",
    "want",
    "connect",
    "private",
    "network",
    "localhost",
    "7545",
    "right",
    "might",
    "see",
    "main",
    "ethereum",
    "network",
    "first",
    "want",
    "change",
    "networks",
    "localhost",
    "7545",
    "want",
    "click",
    "accounts",
    "menu",
    "want",
    "import",
    "account",
    "want",
    "paste",
    "private",
    "key",
    "select",
    "type",
    "private",
    "key",
    "click",
    "paste",
    "import",
    "right",
    "already",
    "done",
    "step",
    "going",
    "click",
    "cancel",
    "whenever",
    "imported",
    "account",
    "know",
    "ganache",
    "want",
    "use",
    "make",
    "sure",
    "use",
    "first",
    "one",
    "account",
    "deployed",
    "smart",
    "contract",
    "okay",
    "actually",
    "connected",
    "account",
    "blockchain",
    "right",
    "blockchain",
    "account",
    "add",
    "wallet",
    "metamask",
    "connect",
    "blockchain",
    "web",
    "browser",
    "specify",
    "blockchain",
    "know",
    "picking",
    "local",
    "blockchain",
    "running",
    "ganache",
    "okay",
    "refresh",
    "right",
    "got",
    "um",
    "account",
    "connected",
    "network",
    "let",
    "take",
    "account",
    "um",
    "ganache",
    "one",
    "right",
    "let",
    "show",
    "application",
    "prove",
    "actually",
    "connected",
    "blockchain",
    "right",
    "say",
    "load",
    "account",
    "like",
    "create",
    "load",
    "account",
    "function",
    "say",
    "load",
    "account",
    "would",
    "async",
    "say",
    "equals",
    "counts",
    "zero",
    "okay",
    "web3",
    "set",
    "uh",
    "load",
    "web3",
    "eth",
    "object",
    "going",
    "contain",
    "accounts",
    "array",
    "get",
    "first",
    "one",
    "account",
    "connected",
    "inside",
    "metamask",
    "inside",
    "load",
    "function",
    "say",
    "await",
    "load",
    "account",
    "account",
    "okay",
    "save",
    "inside",
    "file",
    "um",
    "see",
    "place",
    "account",
    "place",
    "actually",
    "add",
    "account",
    "second",
    "actually",
    "see",
    "worked",
    "properly",
    "right",
    "yep",
    "go",
    "see",
    "verify",
    "account",
    "metamask",
    "e925a",
    "e925a",
    "right",
    "successfully",
    "retrieved",
    "account",
    "metamask",
    "actually",
    "stick",
    "inside",
    "project",
    "little",
    "bit",
    "okay",
    "clean",
    "let",
    "actually",
    "load",
    "smart",
    "contract",
    "blockchain",
    "list",
    "created",
    "list",
    "tasks",
    "lists",
    "uh",
    "order",
    "say",
    "load",
    "contract",
    "say",
    "async",
    "pass",
    "function",
    "um",
    "inside",
    "first",
    "thing",
    "actually",
    "pull",
    "um",
    "smart",
    "contract",
    "json",
    "file",
    "say",
    "const",
    "list",
    "equals",
    "weight",
    "let",
    "say",
    "jquery",
    "get",
    "json",
    "let",
    "okay",
    "remember",
    "inside",
    "bsconfig",
    "file",
    "exposed",
    "build",
    "contracts",
    "directory",
    "root",
    "project",
    "call",
    "file",
    "actually",
    "pulling",
    "file",
    "right",
    "log",
    "log",
    "order",
    "need",
    "call",
    "function",
    "say",
    "oh",
    "wait",
    "contract",
    "okay",
    "right",
    "see",
    "list",
    "uh",
    "file",
    "okay",
    "next",
    "want",
    "actually",
    "create",
    "truffle",
    "contract",
    "truffle",
    "contract",
    "javascript",
    "representation",
    "smart",
    "contract",
    "allow",
    "us",
    "know",
    "call",
    "functions",
    "things",
    "like",
    "going",
    "paste",
    "code",
    "shows",
    "like",
    "okay",
    "uh",
    "call",
    "truffle",
    "contract",
    "pass",
    "list",
    "json",
    "file",
    "basically",
    "gon",
    "na",
    "create",
    "wrapper",
    "around",
    "json",
    "file",
    "created",
    "truffle",
    "gon",
    "na",
    "allow",
    "us",
    "know",
    "interact",
    "set",
    "provider",
    "web3",
    "provider",
    "um",
    "created",
    "basically",
    "going",
    "give",
    "us",
    "copy",
    "smart",
    "contract",
    "javascript",
    "going",
    "tell",
    "us",
    "blockchain",
    "going",
    "able",
    "stuff",
    "like",
    "know",
    "call",
    "functions",
    "coded",
    "inside",
    "like",
    "tasks",
    "function",
    "task",
    "account",
    "things",
    "like",
    "let",
    "clear",
    "save",
    "refresh",
    "see",
    "everything",
    "worked",
    "right",
    "list",
    "undefined",
    "let",
    "change",
    "actually",
    "need",
    "place",
    "store",
    "contract",
    "say",
    "let",
    "say",
    "contracts",
    "like",
    "actually",
    "create",
    "empty",
    "object",
    "okay",
    "refresh",
    "guys",
    "get",
    "stuck",
    "steps",
    "feel",
    "free",
    "clone",
    "repository",
    "see",
    "code",
    "um",
    "want",
    "actually",
    "know",
    "get",
    "deployed",
    "copy",
    "smart",
    "contract",
    "like",
    "console",
    "remember",
    "know",
    "list",
    "equals",
    "like",
    "wait",
    "going",
    "thing",
    "say",
    "list",
    "equals",
    "await",
    "list",
    "deployed",
    "okay",
    "know",
    "really",
    "uh",
    "really",
    "know",
    "getting",
    "values",
    "blockchain",
    "live",
    "contract",
    "like",
    "console",
    "right",
    "loaded",
    "app",
    "lot",
    "data",
    "connected",
    "blockchain",
    "retrieved",
    "account",
    "retrieved",
    "smart",
    "contract",
    "created",
    "know",
    "previous",
    "section",
    "want",
    "actually",
    "render",
    "information",
    "page",
    "first",
    "thing",
    "actually",
    "render",
    "account",
    "connected",
    "first",
    "say",
    "render",
    "equals",
    "async",
    "function",
    "inside",
    "going",
    "show",
    "account",
    "right",
    "inside",
    "html",
    "okay",
    "remember",
    "got",
    "place",
    "show",
    "account",
    "right",
    "exactly",
    "going",
    "going",
    "put",
    "account",
    "inside",
    "going",
    "call",
    "render",
    "function",
    "contracts",
    "loaded",
    "say",
    "weight",
    "app",
    "dot",
    "render",
    "right",
    "order",
    "see",
    "change",
    "actually",
    "expand",
    "window",
    "right",
    "see",
    "account",
    "put",
    "like",
    "said",
    "earlier",
    "created",
    "responsive",
    "application",
    "um",
    "see",
    "account",
    "know",
    "whenever",
    "resize",
    "window",
    "want",
    "see",
    "anymore",
    "save",
    "space",
    "keep",
    "works",
    "want",
    "code",
    "know",
    "window",
    "way",
    "open",
    "feel",
    "free",
    "going",
    "use",
    "smaller",
    "view",
    "um",
    "save",
    "screen",
    "real",
    "estate",
    "guys",
    "see",
    "things",
    "happening",
    "tutorial",
    "right",
    "let",
    "things",
    "inside",
    "render",
    "function",
    "actually",
    "want",
    "render",
    "tasks",
    "um",
    "going",
    "basically",
    "create",
    "logic",
    "inside",
    "uh",
    "prevent",
    "double",
    "rendering",
    "right",
    "couple",
    "things",
    "say",
    "app",
    "loading",
    "keep",
    "track",
    "like",
    "let",
    "change",
    "false",
    "whenever",
    "rendering",
    "save",
    "loading",
    "stop",
    "calling",
    "function",
    "basically",
    "prevent",
    "double",
    "rendering",
    "problem",
    "loading",
    "actually",
    "set",
    "true",
    "finished",
    "put",
    "back",
    "false",
    "let",
    "actually",
    "create",
    "set",
    "loading",
    "function",
    "like",
    "going",
    "paste",
    "code",
    "find",
    "code",
    "uh",
    "github",
    "repository",
    "set",
    "loading",
    "basically",
    "going",
    "update",
    "show",
    "loader",
    "file",
    "simple",
    "loader",
    "see",
    "loading",
    "loading",
    "going",
    "show",
    "loading",
    "right",
    "going",
    "hide",
    "content",
    "actually",
    "list",
    "right",
    "going",
    "show",
    "loader",
    "hide",
    "content",
    "right",
    "let",
    "save",
    "see",
    "errors",
    "right",
    "looks",
    "like",
    "loader",
    "went",
    "away",
    "want",
    "right",
    "next",
    "want",
    "actually",
    "fill",
    "um",
    "tasks",
    "actually",
    "want",
    "render",
    "list",
    "tasks",
    "inside",
    "function",
    "like",
    "say",
    "render",
    "tasks",
    "say",
    "async",
    "inside",
    "function",
    "need",
    "lot",
    "things",
    "first",
    "thing",
    "want",
    "actually",
    "load",
    "tasks",
    "blockchain",
    "second",
    "thing",
    "want",
    "actually",
    "render",
    "know",
    "task",
    "task",
    "template",
    "gon",
    "na",
    "basically",
    "render",
    "task",
    "one",
    "one",
    "gon",
    "na",
    "actually",
    "show",
    "task",
    "page",
    "okay",
    "kind",
    "process",
    "gon",
    "na",
    "little",
    "complicated",
    "bear",
    "show",
    "works",
    "gon",
    "na",
    "fetch",
    "blockchain",
    "gon",
    "na",
    "actually",
    "use",
    "template",
    "created",
    "task",
    "template",
    "going",
    "check",
    "box",
    "content",
    "going",
    "know",
    "fetch",
    "page",
    "create",
    "new",
    "task",
    "okay",
    "first",
    "think",
    "need",
    "fetch",
    "number",
    "tasks",
    "blockchain",
    "remember",
    "said",
    "ca",
    "know",
    "fetch",
    "tasks",
    "mapping",
    "essentially",
    "need",
    "find",
    "many",
    "need",
    "loop",
    "items",
    "mapping",
    "fetch",
    "one",
    "one",
    "ten",
    "tasks",
    "inside",
    "need",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten",
    "one",
    "case",
    "one",
    "need",
    "first",
    "say",
    "const",
    "task",
    "count",
    "equals",
    "weight",
    "list",
    "task",
    "count",
    "okay",
    "know",
    "many",
    "next",
    "thing",
    "want",
    "actually",
    "fetch",
    "template",
    "use",
    "list",
    "task",
    "page",
    "say",
    "const",
    "task",
    "template",
    "equals",
    "task",
    "template",
    "okay",
    "actually",
    "want",
    "use",
    "task",
    "account",
    "um",
    "render",
    "task",
    "page",
    "order",
    "create",
    "loop",
    "javascript",
    "like",
    "written",
    "javascript",
    "look",
    "pretty",
    "familiar",
    "basically",
    "saying",
    "every",
    "number",
    "one",
    "way",
    "task",
    "count",
    "operation",
    "want",
    "start",
    "one",
    "first",
    "valid",
    "id",
    "inside",
    "mapping",
    "task",
    "number",
    "one",
    "way",
    "maximum",
    "number",
    "tasks",
    "know",
    "10",
    "going",
    "10",
    "times",
    "know",
    "fetch",
    "task",
    "actually",
    "read",
    "value",
    "mapping",
    "id",
    "case",
    "going",
    "id",
    "inside",
    "loop",
    "first",
    "thing",
    "actually",
    "fetch",
    "values",
    "task",
    "call",
    "task",
    "function",
    "break",
    "attributes",
    "id",
    "name",
    "completed",
    "like",
    "say",
    "task",
    "equals",
    "await",
    "list",
    "task",
    "id",
    "case",
    "truffle",
    "contract",
    "works",
    "actually",
    "going",
    "return",
    "array",
    "reference",
    "values",
    "item",
    "array",
    "first",
    "item",
    "task",
    "id",
    "second",
    "id",
    "second",
    "item",
    "task",
    "content",
    "third",
    "item",
    "completed",
    "remember",
    "array",
    "zero",
    "index",
    "first",
    "item",
    "zero",
    "second",
    "item",
    "one",
    "third",
    "item",
    "two",
    "okay",
    "task",
    "um",
    "id",
    "content",
    "completed",
    "next",
    "thing",
    "actually",
    "create",
    "html",
    "task",
    "like",
    "going",
    "paste",
    "right",
    "actually",
    "get",
    "new",
    "task",
    "template",
    "take",
    "task",
    "template",
    "know",
    "fetched",
    "dom",
    "actually",
    "clone",
    "right",
    "get",
    "new",
    "copy",
    "going",
    "find",
    "content",
    "template",
    "going",
    "fill",
    "content",
    "task",
    "find",
    "input",
    "check",
    "box",
    "going",
    "populate",
    "values",
    "task",
    "id",
    "basically",
    "whenever",
    "check",
    "like",
    "know",
    "turn",
    "whether",
    "completed",
    "use",
    "task",
    "want",
    "wire",
    "uh",
    "click",
    "function",
    "toggle",
    "completed",
    "implement",
    "later",
    "wo",
    "use",
    "comment",
    "okay",
    "next",
    "thing",
    "want",
    "actually",
    "put",
    "task",
    "crest",
    "list",
    "going",
    "paste",
    "code",
    "check",
    "completed",
    "remember",
    "two",
    "lists",
    "list",
    "completed",
    "tasks",
    "list",
    "um",
    "sorry",
    "completed",
    "tasks",
    "list",
    "tasks",
    "task",
    "completed",
    "put",
    "right",
    "list",
    "last",
    "thing",
    "want",
    "actually",
    "show",
    "task",
    "like",
    "take",
    "hidden",
    "task",
    "template",
    "modifying",
    "let",
    "show",
    "like",
    "okay",
    "right",
    "let",
    "actually",
    "try",
    "call",
    "render",
    "tasks",
    "function",
    "inside",
    "render",
    "function",
    "render",
    "task",
    "render",
    "account",
    "want",
    "run",
    "tasks",
    "like",
    "let",
    "save",
    "see",
    "happens",
    "might",
    "errors",
    "address",
    "come",
    "oh",
    "boom",
    "worked",
    "actually",
    "successfully",
    "listed",
    "tasks",
    "smart",
    "contract",
    "blockchain",
    "pull",
    "see",
    "first",
    "task",
    "inside",
    "check",
    "dap",
    "university",
    "actually",
    "going",
    "going",
    "right",
    "click",
    "go",
    "awesome",
    "worked",
    "see",
    "social",
    "links",
    "get",
    "twitter",
    "pretty",
    "cool",
    "right",
    "know",
    "covered",
    "lot",
    "ground",
    "successfully",
    "listed",
    "tasks",
    "inside",
    "client",
    "side",
    "application",
    "okay",
    "um",
    "commented",
    "couple",
    "things",
    "implemented",
    "yet",
    "get",
    "confused",
    "go",
    "rewind",
    "video",
    "uh",
    "know",
    "find",
    "might",
    "gotten",
    "lost",
    "next",
    "step",
    "want",
    "actually",
    "write",
    "tests",
    "ensure",
    "tasks",
    "listed",
    "properly",
    "okay",
    "actually",
    "going",
    "use",
    "moca",
    "testing",
    "framework",
    "javascript",
    "chai",
    "assertion",
    "library",
    "order",
    "write",
    "tests",
    "read",
    "want",
    "create",
    "new",
    "file",
    "test",
    "directory",
    "let",
    "say",
    "test",
    "list",
    "dot",
    "go",
    "test",
    "directory",
    "see",
    "file",
    "right",
    "let",
    "actually",
    "write",
    "basic",
    "test",
    "ensure",
    "know",
    "contract",
    "initialized",
    "properly",
    "actually",
    "lists",
    "tasks",
    "first",
    "thing",
    "want",
    "inside",
    "actually",
    "require",
    "smart",
    "contract",
    "like",
    "similar",
    "migration",
    "file",
    "pattern",
    "say",
    "contract",
    "say",
    "list",
    "pass",
    "function",
    "right",
    "write",
    "tests",
    "inside",
    "callback",
    "function",
    "callback",
    "function",
    "actually",
    "going",
    "expose",
    "accounts",
    "uh",
    "blockchain",
    "right",
    "accounts",
    "connected",
    "ganache",
    "going",
    "injected",
    "inside",
    "variable",
    "array",
    "read",
    "one",
    "one",
    "first",
    "thing",
    "actually",
    "get",
    "deployed",
    "copy",
    "smart",
    "contract",
    "hook",
    "okay",
    "like",
    "basically",
    "say",
    "test",
    "runs",
    "essentially",
    "means",
    "going",
    "pass",
    "asynchronous",
    "function",
    "allow",
    "us",
    "use",
    "await",
    "keyword",
    "let",
    "say",
    "dot",
    "list",
    "equals",
    "list",
    "dot",
    "deployed",
    "okay",
    "test",
    "runs",
    "copy",
    "list",
    "deployed",
    "blockchain",
    "let",
    "create",
    "first",
    "test",
    "example",
    "say",
    "deploys",
    "successfully",
    "right",
    "use",
    "async",
    "function",
    "want",
    "use",
    "weight",
    "inside",
    "first",
    "thing",
    "actually",
    "get",
    "address",
    "like",
    "console",
    "earlier",
    "say",
    "const",
    "address",
    "wait",
    "list",
    "address",
    "say",
    "basically",
    "want",
    "make",
    "sure",
    "address",
    "exists",
    "want",
    "check",
    "um",
    "know",
    "empty",
    "like",
    "say",
    "assert",
    "equal",
    "address",
    "want",
    "0x0",
    "want",
    "empty",
    "string",
    "want",
    "null",
    "want",
    "undefined",
    "check",
    "make",
    "sure",
    "smart",
    "contract",
    "actually",
    "put",
    "blockchain",
    "address",
    "okay",
    "run",
    "test",
    "inside",
    "shuffle",
    "like",
    "say",
    "truffle",
    "test",
    "hit",
    "enter",
    "right",
    "passes",
    "next",
    "thing",
    "want",
    "actually",
    "list",
    "tasks",
    "test",
    "make",
    "sure",
    "works",
    "say",
    "lists",
    "tasks",
    "pass",
    "asic",
    "function",
    "inside",
    "simple",
    "check",
    "basically",
    "make",
    "sure",
    "count",
    "correct",
    "fetch",
    "know",
    "task",
    "count",
    "first",
    "get",
    "task",
    "count",
    "next",
    "want",
    "actually",
    "try",
    "fetch",
    "task",
    "mapping",
    "make",
    "sure",
    "task",
    "exists",
    "task",
    "count",
    "okay",
    "simple",
    "test",
    "want",
    "actually",
    "assert",
    "id",
    "equal",
    "task",
    "count",
    "right",
    "set",
    "correctly",
    "let",
    "basic",
    "test",
    "try",
    "run",
    "see",
    "works",
    "right",
    "works",
    "let",
    "look",
    "see",
    "getting",
    "task",
    "calling",
    "id",
    "making",
    "sure",
    "equal",
    "task",
    "count",
    "next",
    "let",
    "test",
    "values",
    "make",
    "sure",
    "content",
    "correct",
    "completed",
    "correct",
    "um",
    "task",
    "number",
    "expect",
    "let",
    "like",
    "paste",
    "examples",
    "say",
    "assert",
    "equal",
    "task",
    "content",
    "first",
    "task",
    "set",
    "whenever",
    "initialize",
    "contract",
    "want",
    "say",
    "completed",
    "false",
    "right",
    "want",
    "say",
    "task",
    "count",
    "actually",
    "1",
    "want",
    "specify",
    "1",
    "case",
    "let",
    "say",
    "run",
    "tests",
    "right",
    "passes",
    "right",
    "concludes",
    "section",
    "actually",
    "listed",
    "tasks",
    "list",
    "know",
    "covered",
    "lot",
    "ground",
    "actually",
    "created",
    "tasks",
    "inside",
    "smart",
    "contract",
    "listed",
    "console",
    "wire",
    "client",
    "side",
    "application",
    "list",
    "tasks",
    "wrote",
    "tests",
    "lot",
    "got",
    "confused",
    "anything",
    "feel",
    "free",
    "rewind",
    "video",
    "paste",
    "code",
    "github",
    "repository",
    "going",
    "go",
    "ahead",
    "commit",
    "changes",
    "let",
    "say",
    "git",
    "add",
    "going",
    "say",
    "git",
    "commit",
    "right",
    "listed",
    "tasks",
    "next",
    "item",
    "add",
    "tasks",
    "list",
    "application",
    "write",
    "tests",
    "first",
    "want",
    "change",
    "create",
    "task",
    "function",
    "add",
    "additional",
    "functionality",
    "right",
    "calling",
    "create",
    "task",
    "functions",
    "constructor",
    "add",
    "default",
    "task",
    "list",
    "like",
    "want",
    "know",
    "call",
    "function",
    "externally",
    "client",
    "side",
    "order",
    "create",
    "tasks",
    "way",
    "also",
    "console",
    "things",
    "like",
    "going",
    "actually",
    "add",
    "new",
    "line",
    "want",
    "happen",
    "broadcast",
    "event",
    "task",
    "created",
    "let",
    "explain",
    "solidity",
    "allows",
    "us",
    "create",
    "events",
    "triggered",
    "anytime",
    "know",
    "something",
    "happens",
    "inside",
    "smart",
    "contract",
    "external",
    "consumers",
    "subscribe",
    "events",
    "know",
    "uh",
    "whenever",
    "event",
    "happened",
    "events",
    "really",
    "useful",
    "know",
    "whatever",
    "call",
    "create",
    "task",
    "function",
    "always",
    "know",
    "know",
    "transaction",
    "actually",
    "completed",
    "always",
    "know",
    "mined",
    "things",
    "like",
    "really",
    "useful",
    "listen",
    "events",
    "uh",
    "order",
    "know",
    "know",
    "finished",
    "create",
    "event",
    "solidity",
    "call",
    "need",
    "actually",
    "declare",
    "inside",
    "smart",
    "contract",
    "like",
    "go",
    "mapping",
    "say",
    "event",
    "say",
    "task",
    "created",
    "notice",
    "capitalized",
    "right",
    "semicolon",
    "add",
    "arguments",
    "event",
    "say",
    "uint",
    "id",
    "id",
    "task",
    "created",
    "string",
    "content",
    "completed",
    "property",
    "boolean",
    "completed",
    "right",
    "create",
    "event",
    "inside",
    "solidity",
    "right",
    "means",
    "know",
    "task",
    "created",
    "event",
    "available",
    "us",
    "inside",
    "smart",
    "contract",
    "show",
    "actually",
    "call",
    "like",
    "use",
    "emit",
    "keyword",
    "emit",
    "task",
    "created",
    "pass",
    "arguments",
    "id",
    "task",
    "count",
    "content",
    "passed",
    "function",
    "false",
    "new",
    "task",
    "completed",
    "yet",
    "pretty",
    "easy",
    "trigger",
    "events",
    "inside",
    "solidity",
    "subscribe",
    "events",
    "know",
    "inside",
    "application",
    "know",
    "anywhere",
    "listen",
    "events",
    "smart",
    "contract",
    "right",
    "going",
    "go",
    "ahead",
    "actually",
    "write",
    "tests",
    "creating",
    "item",
    "open",
    "test",
    "file",
    "side",
    "side",
    "create",
    "new",
    "example",
    "list",
    "tasks",
    "say",
    "creates",
    "tasks",
    "going",
    "add",
    "space",
    "see",
    "better",
    "say",
    "creates",
    "tasks",
    "right",
    "let",
    "say",
    "async",
    "pass",
    "function",
    "first",
    "say",
    "construct",
    "equals",
    "await",
    "dot",
    "list",
    "create",
    "task",
    "say",
    "new",
    "task",
    "okay",
    "check",
    "task",
    "count",
    "oh",
    "wait",
    "dot",
    "list",
    "task",
    "account",
    "right",
    "fetch",
    "first",
    "check",
    "task",
    "count",
    "expect",
    "say",
    "two",
    "first",
    "thing",
    "check",
    "ensure",
    "know",
    "created",
    "new",
    "task",
    "new",
    "count",
    "actually",
    "two",
    "check",
    "event",
    "task",
    "created",
    "event",
    "actually",
    "triggered",
    "know",
    "dig",
    "logs",
    "uh",
    "say",
    "id",
    "contents",
    "completed",
    "would",
    "actually",
    "know",
    "new",
    "task",
    "created",
    "know",
    "logged",
    "get",
    "event",
    "like",
    "going",
    "use",
    "result",
    "know",
    "result",
    "finished",
    "create",
    "task",
    "function",
    "right",
    "use",
    "async",
    "weight",
    "pattern",
    "get",
    "result",
    "event",
    "actually",
    "contained",
    "inside",
    "say",
    "const",
    "event",
    "equals",
    "result",
    "logs",
    "okay",
    "logs",
    "first",
    "item",
    "okay",
    "args",
    "key",
    "basically",
    "going",
    "contain",
    "values",
    "event",
    "could",
    "log",
    "like",
    "ganache",
    "could",
    "actually",
    "console",
    "log",
    "event",
    "fact",
    "let",
    "right",
    "let",
    "say",
    "result",
    "go",
    "terminal",
    "truffle",
    "show",
    "result",
    "looks",
    "like",
    "see",
    "digging",
    "right",
    "loading",
    "okay",
    "result",
    "looks",
    "like",
    "see",
    "transaction",
    "hash",
    "got",
    "receipt",
    "inside",
    "logs",
    "right",
    "event",
    "information",
    "contained",
    "right",
    "see",
    "args",
    "key",
    "right",
    "going",
    "object",
    "granted",
    "ca",
    "see",
    "exactly",
    "inside",
    "locking",
    "information",
    "args",
    "key",
    "going",
    "contain",
    "values",
    "event",
    "triggered",
    "whenever",
    "created",
    "okay",
    "take",
    "result",
    "check",
    "see",
    "information",
    "let",
    "say",
    "search",
    "equal",
    "event",
    "id",
    "say",
    "two",
    "number",
    "equal",
    "say",
    "search",
    "equal",
    "event",
    "content",
    "equal",
    "new",
    "task",
    "search",
    "equal",
    "event",
    "completed",
    "say",
    "false",
    "right",
    "let",
    "run",
    "test",
    "time",
    "wo",
    "see",
    "log",
    "output",
    "actually",
    "run",
    "test",
    "hopefully",
    "pass",
    "yep",
    "passed",
    "right",
    "see",
    "event",
    "triggered",
    "whenever",
    "called",
    "create",
    "task",
    "function",
    "right",
    "going",
    "remove",
    "space",
    "write",
    "tests",
    "uh",
    "create",
    "task",
    "function",
    "check",
    "events",
    "let",
    "go",
    "front",
    "end",
    "application",
    "create",
    "tasks",
    "way",
    "jump",
    "back",
    "make",
    "sure",
    "things",
    "correct",
    "make",
    "sure",
    "ganache",
    "running",
    "blockchain",
    "running",
    "make",
    "sure",
    "contracts",
    "migrated",
    "connected",
    "meta",
    "mask",
    "right",
    "things",
    "like",
    "okay",
    "going",
    "actually",
    "enable",
    "form",
    "commented",
    "previous",
    "steps",
    "page",
    "form",
    "going",
    "submit",
    "function",
    "create",
    "task",
    "build",
    "second",
    "done",
    "yet",
    "refresh",
    "page",
    "show",
    "looks",
    "like",
    "right",
    "see",
    "add",
    "task",
    "field",
    "actually",
    "type",
    "task",
    "hit",
    "enter",
    "button",
    "simplicity",
    "sake",
    "use",
    "enter",
    "key",
    "order",
    "create",
    "task",
    "right",
    "go",
    "back",
    "file",
    "let",
    "actually",
    "add",
    "create",
    "task",
    "function",
    "like",
    "let",
    "render",
    "function",
    "right",
    "say",
    "oops",
    "create",
    "task",
    "async",
    "function",
    "say",
    "app",
    "dot",
    "set",
    "loading",
    "true",
    "okay",
    "whenever",
    "call",
    "want",
    "show",
    "loader",
    "const",
    "content",
    "equals",
    "new",
    "task",
    "val",
    "okay",
    "name",
    "form",
    "go",
    "back",
    "file",
    "see",
    "uh",
    "know",
    "sorry",
    "name",
    "input",
    "form",
    "see",
    "submit",
    "create",
    "task",
    "gon",
    "na",
    "fetch",
    "value",
    "input",
    "right",
    "input",
    "id",
    "new",
    "task",
    "okay",
    "gon",
    "na",
    "get",
    "value",
    "gon",
    "na",
    "ever",
    "filled",
    "inside",
    "new",
    "task",
    "value",
    "actually",
    "gon",
    "na",
    "call",
    "smart",
    "contract",
    "function",
    "going",
    "call",
    "create",
    "task",
    "function",
    "uh",
    "know",
    "web3js",
    "truffle",
    "contract",
    "library",
    "talk",
    "blockchain",
    "order",
    "actually",
    "update",
    "say",
    "white",
    "list",
    "actually",
    "sorry",
    "create",
    "task",
    "pass",
    "content",
    "value",
    "okay",
    "whenever",
    "whenever",
    "finished",
    "going",
    "shortcut",
    "reload",
    "page",
    "whenever",
    "actually",
    "done",
    "refresh",
    "page",
    "go",
    "ahead",
    "fetch",
    "tasks",
    "blockchain",
    "list",
    "page",
    "instead",
    "like",
    "know",
    "listen",
    "maybe",
    "event",
    "reload",
    "page",
    "like",
    "sometimes",
    "get",
    "double",
    "rendering",
    "problem",
    "going",
    "um",
    "actually",
    "reload",
    "say",
    "like",
    "window",
    "dot",
    "location",
    "reload",
    "javascript",
    "thing",
    "say",
    "refresh",
    "page",
    "okay",
    "let",
    "test",
    "see",
    "works",
    "going",
    "open",
    "console",
    "see",
    "errors",
    "nope",
    "good",
    "right",
    "say",
    "new",
    "task",
    "say",
    "task",
    "number",
    "one",
    "task",
    "number",
    "one",
    "like",
    "said",
    "button",
    "want",
    "hit",
    "enter",
    "order",
    "make",
    "work",
    "hit",
    "enter",
    "put",
    "button",
    "simplicity",
    "sake",
    "say",
    "confirm",
    "right",
    "go",
    "successfully",
    "added",
    "task",
    "see",
    "task",
    "number",
    "one",
    "added",
    "list",
    "go",
    "check",
    "ganache",
    "see",
    "uh",
    "thing",
    "go",
    "back",
    "transactions",
    "see",
    "transaction",
    "created",
    "right",
    "think",
    "one",
    "yeah",
    "looks",
    "like",
    "one",
    "also",
    "go",
    "logs",
    "see",
    "thing",
    "scroll",
    "like",
    "crazy",
    "think",
    "bottom",
    "right",
    "anyways",
    "gives",
    "idea",
    "know",
    "look",
    "find",
    "information",
    "blockchain",
    "whenever",
    "kind",
    "stuff",
    "right",
    "successfully",
    "created",
    "new",
    "task",
    "list",
    "know",
    "done",
    "inside",
    "smart",
    "contract",
    "done",
    "client",
    "side",
    "written",
    "tests",
    "make",
    "sure",
    "works",
    "section",
    "going",
    "go",
    "ahead",
    "commit",
    "changes",
    "say",
    "get",
    "ad",
    "dot",
    "git",
    "commit",
    "let",
    "say",
    "three",
    "creates",
    "tasks",
    "last",
    "thing",
    "going",
    "tutorial",
    "actually",
    "check",
    "tasks",
    "list",
    "whenever",
    "appear",
    "completed",
    "list",
    "striked",
    "like",
    "first",
    "going",
    "go",
    "list",
    "create",
    "new",
    "function",
    "call",
    "toggle",
    "completed",
    "okay",
    "going",
    "give",
    "space",
    "say",
    "function",
    "toggle",
    "completed",
    "okay",
    "want",
    "function",
    "want",
    "take",
    "uh",
    "know",
    "struct",
    "task",
    "structs",
    "inside",
    "mapping",
    "want",
    "find",
    "specific",
    "task",
    "want",
    "change",
    "value",
    "value",
    "already",
    "true",
    "change",
    "false",
    "already",
    "false",
    "change",
    "true",
    "basically",
    "someone",
    "checked",
    "item",
    "uh",
    "would",
    "know",
    "say",
    "completed",
    "completed",
    "list",
    "could",
    "check",
    "would",
    "take",
    "complete",
    "list",
    "put",
    "back",
    "know",
    "completed",
    "list",
    "okay",
    "function",
    "need",
    "parameter",
    "need",
    "id",
    "task",
    "want",
    "actually",
    "toggle",
    "like",
    "say",
    "uint",
    "id",
    "right",
    "say",
    "public",
    "first",
    "get",
    "task",
    "mapping",
    "right",
    "need",
    "read",
    "task",
    "mapping",
    "like",
    "see",
    "task",
    "know",
    "tasks",
    "count",
    "thing",
    "say",
    "task",
    "read",
    "id",
    "like",
    "say",
    "id",
    "actually",
    "fetch",
    "let",
    "assign",
    "variable",
    "whenever",
    "want",
    "actually",
    "declare",
    "variable",
    "type",
    "task",
    "actually",
    "going",
    "memory",
    "looks",
    "kind",
    "funny",
    "solidity",
    "say",
    "task",
    "data",
    "type",
    "declared",
    "right",
    "task",
    "memory",
    "say",
    "task",
    "like",
    "okay",
    "notice",
    "underscore",
    "basically",
    "means",
    "local",
    "variable",
    "state",
    "variable",
    "um",
    "necessarily",
    "specific",
    "solidity",
    "convention",
    "right",
    "see",
    "fact",
    "going",
    "like",
    "well",
    "id",
    "see",
    "know",
    "content",
    "underscored",
    "local",
    "variable",
    "passed",
    "function",
    "id",
    "way",
    "going",
    "task",
    "like",
    "want",
    "assign",
    "state",
    "um",
    "nothing",
    "special",
    "convention",
    "going",
    "say",
    "task",
    "dot",
    "completed",
    "basically",
    "want",
    "opposite",
    "whatever",
    "read",
    "value",
    "whatever",
    "like",
    "say",
    "tasks",
    "completed",
    "want",
    "say",
    "opposite",
    "say",
    "bang",
    "oops",
    "bang",
    "right",
    "false",
    "turn",
    "true",
    "true",
    "turn",
    "false",
    "assigning",
    "new",
    "value",
    "right",
    "next",
    "um",
    "going",
    "put",
    "back",
    "mapping",
    "like",
    "tasks",
    "task",
    "count",
    "equals",
    "going",
    "put",
    "back",
    "task",
    "mapping",
    "say",
    "tasks",
    "uh",
    "id",
    "equals",
    "task",
    "right",
    "would",
    "create",
    "function",
    "toggle",
    "task",
    "completion",
    "want",
    "things",
    "inside",
    "move",
    "um",
    "want",
    "emit",
    "event",
    "like",
    "create",
    "task",
    "function",
    "first",
    "declare",
    "event",
    "say",
    "event",
    "let",
    "say",
    "task",
    "completed",
    "right",
    "give",
    "two",
    "arguments",
    "say",
    "unit",
    "id",
    "say",
    "went",
    "sorry",
    "bool",
    "completed",
    "right",
    "trigger",
    "event",
    "inside",
    "say",
    "emit",
    "task",
    "completed",
    "id",
    "task",
    "completed",
    "right",
    "work",
    "lot",
    "like",
    "create",
    "task",
    "function",
    "emit",
    "event",
    "anytime",
    "function",
    "called",
    "okay",
    "let",
    "actually",
    "write",
    "test",
    "make",
    "sure",
    "works",
    "know",
    "wire",
    "client",
    "side",
    "application",
    "go",
    "uh",
    "test",
    "file",
    "right",
    "actually",
    "going",
    "split",
    "pane",
    "uh",
    "vertically",
    "right",
    "split",
    "pane",
    "um",
    "got",
    "test",
    "file",
    "smart",
    "contract",
    "cut",
    "going",
    "focus",
    "want",
    "test",
    "function",
    "unit",
    "test",
    "toggle",
    "completed",
    "going",
    "create",
    "new",
    "function",
    "give",
    "space",
    "sorry",
    "new",
    "example",
    "say",
    "toggles",
    "task",
    "completed",
    "scroll",
    "little",
    "bit",
    "actually",
    "uh",
    "copy",
    "paste",
    "give",
    "space",
    "boilerplate",
    "say",
    "toggles",
    "task",
    "completion",
    "clear",
    "actually",
    "let",
    "let",
    "say",
    "result",
    "equals",
    "dot",
    "list",
    "dot",
    "toggle",
    "completed",
    "pass",
    "uh",
    "one",
    "first",
    "task",
    "get",
    "task",
    "actually",
    "retrieve",
    "task",
    "pass",
    "id1",
    "right",
    "want",
    "assert",
    "going",
    "equal",
    "task",
    "completed",
    "want",
    "true",
    "want",
    "fetch",
    "event",
    "like",
    "previous",
    "example",
    "want",
    "ensure",
    "event",
    "id",
    "equal",
    "one",
    "event",
    "completed",
    "equal",
    "true",
    "right",
    "make",
    "sense",
    "basically",
    "know",
    "modified",
    "lot",
    "code",
    "might",
    "little",
    "tricky",
    "know",
    "write",
    "thinking",
    "changed",
    "previous",
    "example",
    "let",
    "review",
    "toggling",
    "completed",
    "calling",
    "function",
    "passing",
    "id",
    "first",
    "task",
    "know",
    "task",
    "already",
    "list",
    "created",
    "one",
    "inside",
    "constructor",
    "right",
    "waited",
    "finish",
    "got",
    "result",
    "use",
    "read",
    "logs",
    "second",
    "um",
    "next",
    "thing",
    "got",
    "task",
    "right",
    "checked",
    "actually",
    "completed",
    "right",
    "true",
    "want",
    "make",
    "sure",
    "event",
    "triggered",
    "know",
    "get",
    "event",
    "digging",
    "result",
    "witnessed",
    "previous",
    "section",
    "check",
    "go",
    "ahead",
    "rewatch",
    "part",
    "um",
    "took",
    "event",
    "got",
    "id",
    "made",
    "sure",
    "1",
    "looked",
    "completed",
    "ensured",
    "true",
    "right",
    "let",
    "try",
    "run",
    "test",
    "right",
    "looks",
    "like",
    "error",
    "let",
    "go",
    "back",
    "code",
    "see",
    "forgot",
    "underscore",
    "let",
    "run",
    "right",
    "passes",
    "awesome",
    "okay",
    "going",
    "remove",
    "space",
    "save",
    "let",
    "go",
    "client",
    "side",
    "application",
    "wire",
    "check",
    "boxes",
    "toggle",
    "tasks",
    "go",
    "back",
    "file",
    "create",
    "new",
    "function",
    "call",
    "toggle",
    "completed",
    "believe",
    "name",
    "smart",
    "contract",
    "function",
    "create",
    "task",
    "say",
    "toggle",
    "completed",
    "say",
    "async",
    "pass",
    "function",
    "similarly",
    "create",
    "task",
    "say",
    "app",
    "loading",
    "say",
    "const",
    "task",
    "id",
    "actually",
    "inside",
    "going",
    "click",
    "event",
    "whenever",
    "click",
    "check",
    "box",
    "uh",
    "gon",
    "na",
    "know",
    "event",
    "listener",
    "calls",
    "function",
    "gon",
    "na",
    "pass",
    "actual",
    "event",
    "use",
    "e",
    "short",
    "event",
    "gon",
    "na",
    "contain",
    "name",
    "check",
    "box",
    "name",
    "value",
    "going",
    "set",
    "actual",
    "task",
    "id",
    "say",
    "e",
    "target",
    "name",
    "say",
    "await",
    "actually",
    "going",
    "call",
    "smart",
    "contract",
    "function",
    "toggle",
    "task",
    "completed",
    "say",
    "app",
    "dot",
    "list",
    "toggle",
    "completed",
    "going",
    "pass",
    "task",
    "id",
    "right",
    "like",
    "create",
    "task",
    "function",
    "whenever",
    "finished",
    "going",
    "reload",
    "uh",
    "webpage",
    "semicolon",
    "sorry",
    "comma",
    "okay",
    "errors",
    "remember",
    "previous",
    "sections",
    "commented",
    "going",
    "put",
    "going",
    "actually",
    "wire",
    "click",
    "handler",
    "whenever",
    "rendering",
    "tasks",
    "found",
    "know",
    "check",
    "box",
    "want",
    "actually",
    "add",
    "event",
    "handler",
    "whenever",
    "clicked",
    "call",
    "function",
    "everything",
    "looks",
    "good",
    "right",
    "let",
    "try",
    "try",
    "check",
    "list",
    "see",
    "works",
    "right",
    "looks",
    "like",
    "got",
    "problem",
    "right",
    "problem",
    "gon",
    "na",
    "see",
    "guess",
    "something",
    "forgot",
    "previous",
    "step",
    "actually",
    "going",
    "leave",
    "recording",
    "kind",
    "shows",
    "nature",
    "blockchain",
    "development",
    "things",
    "need",
    "know",
    "yet",
    "well",
    "tell",
    "forgot",
    "run",
    "migrations",
    "added",
    "new",
    "function",
    "smart",
    "contract",
    "worked",
    "tests",
    "um",
    "actually",
    "deploy",
    "new",
    "copy",
    "smart",
    "contract",
    "blockchain",
    "new",
    "function",
    "order",
    "run",
    "truffle",
    "migrate",
    "dash",
    "dash",
    "reset",
    "deploy",
    "new",
    "copy",
    "smart",
    "contract",
    "blockchain",
    "whenever",
    "going",
    "want",
    "refresh",
    "web",
    "page",
    "pick",
    "change",
    "right",
    "let",
    "try",
    "sorry",
    "guys",
    "forgot",
    "step",
    "like",
    "said",
    "wanted",
    "leave",
    "video",
    "show",
    "know",
    "something",
    "might",
    "forget",
    "um",
    "hopefully",
    "help",
    "remember",
    "right",
    "refresh",
    "page",
    "see",
    "task",
    "gone",
    "happen",
    "well",
    "know",
    "whenever",
    "deploy",
    "new",
    "copy",
    "smart",
    "contract",
    "state",
    "smart",
    "contract",
    "gone",
    "right",
    "new",
    "smart",
    "contract",
    "whenever",
    "redeploy",
    "old",
    "tasks",
    "smart",
    "contract",
    "disappeared",
    "add",
    "new",
    "one",
    "say",
    "task",
    "number",
    "one",
    "sign",
    "really",
    "fast",
    "task",
    "number",
    "two",
    "task",
    "number",
    "three",
    "right",
    "actually",
    "toggle",
    "one",
    "completed",
    "see",
    "metamask",
    "confirmation",
    "pop",
    "sign",
    "confirm",
    "go",
    "actually",
    "successfully",
    "uh",
    "checked",
    "task",
    "number",
    "one",
    "list",
    "see",
    "added",
    "um",
    "know",
    "list",
    "know",
    "actually",
    "item",
    "task",
    "number",
    "two",
    "go",
    "right",
    "see",
    "awesome",
    "went",
    "go",
    "check",
    "list",
    "actually",
    "confirm",
    "go",
    "right",
    "guys",
    "actually",
    "end",
    "tutorial",
    "successfully",
    "created",
    "list",
    "ethereum",
    "powered",
    "smart",
    "contracts",
    "created",
    "client",
    "set",
    "application",
    "interact",
    "congratulations",
    "hope",
    "like",
    "tutorial",
    "sure",
    "subscribe",
    "channel",
    "already",
    "also",
    "forget",
    "download",
    "sign",
    "email",
    "list",
    "know",
    "get",
    "courses",
    "downloaded",
    "free",
    "also",
    "know",
    "keep",
    "twitter",
    "stuff",
    "like",
    "daily",
    "updates",
    "also",
    "guys",
    "releasing",
    "premium",
    "course",
    "like",
    "full",
    "decentralized",
    "blockchain",
    "development",
    "course",
    "sometime",
    "soon",
    "want",
    "sign",
    "email",
    "list",
    "find",
    "updates",
    "going",
    "really",
    "extensive",
    "going",
    "really",
    "awesome",
    "going",
    "want",
    "learn",
    "stay",
    "touch",
    "also",
    "time",
    "video",
    "able",
    "find",
    "article",
    "accompany",
    "video",
    "follow",
    "along",
    "step",
    "step",
    "somewhere",
    "website",
    "probably",
    "video",
    "description",
    "well",
    "see",
    "articles",
    "website",
    "um",
    "like",
    "know",
    "uh",
    "ultimate",
    "ethereum",
    "dap",
    "tutorial",
    "released",
    "last",
    "year",
    "uh",
    "pretty",
    "popular",
    "tutorial",
    "shows",
    "build",
    "first",
    "decentralized",
    "application",
    "mean",
    "code",
    "cryptocurrency",
    "ethereum",
    "know",
    "build",
    "erc20",
    "token",
    "stuff",
    "like",
    "got",
    "deep",
    "dives",
    "topics",
    "like",
    "know",
    "web3js",
    "talked",
    "tutorial",
    "um",
    "know",
    "lot",
    "lessons",
    "solidity",
    "develop",
    "smart",
    "contracts",
    "kind",
    "go",
    "features",
    "language",
    "things",
    "like",
    "huge",
    "resource",
    "lot",
    "free",
    "stuff",
    "lot",
    "good",
    "information",
    "also",
    "tutorials",
    "like",
    "build",
    "real",
    "world",
    "ico",
    "things",
    "like",
    "like",
    "know",
    "production",
    "ready",
    "ico",
    "could",
    "use",
    "real",
    "world",
    "pretty",
    "advanced",
    "know",
    "also",
    "looking",
    "somebody",
    "work",
    "blockchain",
    "projects",
    "um",
    "know",
    "available",
    "email",
    "address",
    "lot",
    "know",
    "blockchain",
    "development",
    "lot",
    "consultation",
    "advising",
    "people",
    "launching",
    "blockchain",
    "startups",
    "icos",
    "things",
    "like",
    "got",
    "complete",
    "solution",
    "launching",
    "ico",
    "like",
    "said",
    "reach",
    "via",
    "email",
    "email",
    "website",
    "also",
    "description",
    "buttons",
    "contact",
    "website",
    "like",
    "said",
    "twitter",
    "things",
    "like",
    "hope",
    "liked",
    "tutorial",
    "next",
    "time",
    "thanks",
    "watching",
    "dap",
    "university"
  ],
  "keywords": [
    "going",
    "show",
    "write",
    "first",
    "blockchain",
    "application",
    "create",
    "list",
    "ethereum",
    "smart",
    "contracts",
    "contract",
    "solidity",
    "programming",
    "tests",
    "deploy",
    "also",
    "client",
    "side",
    "new",
    "sure",
    "click",
    "like",
    "free",
    "website",
    "dot",
    "got",
    "link",
    "description",
    "find",
    "video",
    "actually",
    "step",
    "tutorial",
    "let",
    "get",
    "works",
    "work",
    "well",
    "really",
    "way",
    "want",
    "use",
    "would",
    "web",
    "put",
    "whenever",
    "browser",
    "connect",
    "server",
    "know",
    "code",
    "data",
    "basically",
    "files",
    "javascript",
    "right",
    "might",
    "database",
    "pretty",
    "inside",
    "build",
    "little",
    "gon",
    "na",
    "simple",
    "talk",
    "written",
    "items",
    "different",
    "lot",
    "network",
    "okay",
    "one",
    "node",
    "order",
    "running",
    "copy",
    "called",
    "make",
    "public",
    "run",
    "tasks",
    "allow",
    "us",
    "add",
    "things",
    "means",
    "able",
    "change",
    "time",
    "kind",
    "read",
    "go",
    "back",
    "give",
    "account",
    "set",
    "develop",
    "check",
    "need",
    "already",
    "see",
    "install",
    "item",
    "ganache",
    "open",
    "connected",
    "um",
    "listed",
    "project",
    "uh",
    "next",
    "truffle",
    "version",
    "allows",
    "development",
    "console",
    "remember",
    "metamask",
    "store",
    "directory",
    "created",
    "ahead",
    "dependencies",
    "say",
    "successfully",
    "file",
    "json",
    "paste",
    "save",
    "thing",
    "declare",
    "call",
    "name",
    "number",
    "value",
    "properly",
    "lists",
    "variable",
    "state",
    "task",
    "count",
    "function",
    "something",
    "zero",
    "equal",
    "information",
    "configuration",
    "key",
    "migration",
    "two",
    "essentially",
    "second",
    "looks",
    "done",
    "deployed",
    "equals",
    "await",
    "async",
    "result",
    "address",
    "sorry",
    "could",
    "try",
    "git",
    "struct",
    "integer",
    "sign",
    "id",
    "content",
    "completed",
    "mapping",
    "take",
    "return",
    "case",
    "reference",
    "false",
    "pass",
    "app",
    "worked",
    "loading",
    "load",
    "refresh",
    "render",
    "page",
    "true",
    "template",
    "fetch",
    "toggle",
    "test",
    "event",
    "events"
  ]
}