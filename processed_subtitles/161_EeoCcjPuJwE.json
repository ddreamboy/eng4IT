{
  "text": "what is going on guys welcome back in\nthis video today we're going to learn\nhow to do Financial text sentiment\nanalysis in Python using a language\nmodel from hugging face so let us get\nright into it\n[Music]\nnot all right so we're going to learn\nhow to do Financial Tech sentiment\nanalysis in Python today which means\nwe're going to take a look at the most\nrecent Financial article surrounding a\nspecific topic and we're going to\nanalyze these articles in terms of their\nsentiments so we're going to use a\nlanguage model to tell us whether the\narticles are positive negative or\nneutral we're going to then aggregate\nthe results for multiple articles and\ncome up with an overall sentiment about\nthis topic at this point in time now\nthis can be used in a number of\ndifferent ways one very simple way to\nuse it is to just incorporate the\ninformation into your decision-making\nprocess into your analysis of a stock or\na commodity for example uh so for\nexample if you see that the sentiment is\nvery positive but getting more and more\nnegative over time that might be\nsomething that you might want to\nconsider if it gets more and more\npositive over time if it stays the same\nbut it's very positive or very negative\nthis might also be interesting so that\nis one way to use that uh but in this\nvideo what I want to mention is that\nnone of the things I'm saying here are\nFinancial advice I'm not a financial\nprofessional so whatever I show you here\nis just programming advice how you can\ndo that I'm showing you how you can\nbuild this tool for yourself whatever\nyou do with it is up to you none of the\ninformation here is a call to action or\na recommendation on how to invest I'm\njust showing you how to build a tool\nthat could be useful maybe in your\ndecision process or in your analysis so\nhaving said all that the model that\nwe're going to use in this video today\nis called finbert you can find it on\nhugging face it's by process Ai and it's\na pre-trained NLP so natural language\nprocessing model that analyzes the\nsentiment of financial text now this\nspecialization here is very important\nbecause certain terms can have different\nmeanings in different context different\nconnotations so a term might be very\npositive or negative only in a financial\ncontext in it can be neutral or the\nopposite uh in another context so we\nwant to have a model that is trained on\nfinancial text and not on text in\ngeneral now if you want to play around\nwith this model before actually using it\nyou can use it here in the inference API\nor you can test it here in the inference\nAPI you can just type in some text and\ncompute the sentiment in this case we\nhave stocks rallied and the British\npound gained which is 89.8% positive uh\n6.7% neutral and 3.4% negative all of\nthis obviously adds up to one because it\nhas to be 100% so you can uh play around\nwith it to see how well it works and\nthen if you want to use it you can click\nhere on use this model to get some\nsample code for the Transformers package\nin Python in this case we're going to\nuse uh this part here where we can\nimport a pipeline um and uh load the\nmodel here as a pipeline so we just have\nto feed an text into the pipeline object\nin addition to that we need to have new\nsources so we need to have either an API\nor a feed or we need to do some scraping\nor something to get articles into our\ncode so that we can analyze the\nsentiment of the Articles now for this I\nwant to show you a um or I want to show\nyou two different approaches just so\nyou're not just familiar with one of\nthem so you have a more\nversatile uh set of sample code here so\nthe first one is going to be the Yahoo\nfinance news um which is going to be an\nRSS feed so in the first example we're\ngoing to parse an RSS feed in the second\none we're going to use news API for no\nspecial reason they're not sponsoring\nthe video or anything it's just a simple\nAPI you can get a free API key and\naccess to news data uh and in this case\nwe're not going to parse an RSS feed\nwe're going to actually use an API key\nto send requests and get results um as a\nresponse so these are going to be the\ntwo examples today uh what we're going\nto do first is we're going to open up a\ncommand line and we're going to install\nthe packages necessary for these two um\nprojects or codes uh the first one is\ngoing to be obviously Transformers for\nloading into using the model the second\none is going to be feed parser which is\nonly necessary if you want to use an RSS\nfeed and the third one is going to be\nthe requests package which is necessary\nfor sending uh and processing HTP\nrequests easily in Python so once you\nhave these three packages installed we\ncan start with the first script which is\ngoing to start by importing the feed\nparser package and then we're going to\nalso use the sample code here so just\nuse this model copy this paste it into\nyour code and now you have the uh finish\ninvert pipeline ready to use so what you\ncan do now is you can actually also just\ncopy this text here and see how this\nworks we can just go ahead and say print\npipe and then the text here from the\nexample I can run this and I will get a\nresponse now you can see I get some\nwarnings here because I have a messed up\nuh setup here when it comes to\ntensorflow and Cuda and so on uh but\nwhat you can see here is I already get a\nresult with a label positive and a score\nof\n0.898 which which is exactly the same I\nget in the browser uh we only get a top\nresult so we only get uh positive we\ndon't get the score for the other\noptions but um the first time you run\nthis it will take some time it has to\ndownload all the dependencies or all the\nmodels onto your system and you also\nneed to have Hardware that's capable of\nrunning all this but after the first\ntime it should be faster and you should\nget a result quite quickly so in this\ncase you can see I passed the text I got\nthe label positive and the score 0.8\n898 um so this is what we're going to do\ninstead of feeding in static text we're\ngoing to load text from the Yahoo\nfinance RSS feed and we're going to feed\nit into the pipeline to get the\nsentiment we're going to do that for a\ncouple of Articles and then we're going\nto aggregate the results to get an\noverall score so the first thing is we\nneed to define the RSS URL so RSS URL is\ngoing to be equal to https\ncolf finance.\nyahoo.com RSS slash\nheadline equals or actually question\nmark s equals and then a term that we\nwant to search for so we're actually\nsaying I want to get the Articles from\nthe RSS feed where the headline um\ncontains a certain query now what we're\ngoing to do here is we're going to\nDefine two variables first of all the\nticker and second of all the\nkeyword now for some reason um this only\nworks when I pass an actual ticker\nsymbol so if I pass something like like\nuh Nvidia it's not going to find it I\nhave to pass nvda so the ticker symbol\nof Nvidia if I pass Goldman Sachs it's\nnot going to work I have to pass GS I\ndon't know why uh maybe there is some\ndifferent setting that you can use here\nto get uh different results so what\nwe're going to do here is we're going to\nprovide a ticker symbol for example meta\nwhich is the name and a ticker symbol um\nand then we also can provide a keyword\nnow this keyword will not be part of the\nURL it will be part of our filtering\nprocess because the problem is or not\nnecessarily the problem but the thing\nwith this API or with this RSS feed I\nshould say is that some of the Articles\num come up when you type a certain\nticker symbol but they're not really\nabout that ticker symbol so you might\ntype meta as a ticker symbol and you\nmight get an article describing the top\n20 AI companies right now uh which is a\na post that is not really about meta so\nit might be not the best source to\nanalyze the sentiment about about meta\nbecause 19 other stocks are in there\nwith positive or negative statements so\nwe might want to also check if a certain\nkeyword is present um in the summary or\nin the title of the article so we can\nsay meta here as\nwell uh the important thing is here we\nonly want to introduce our ticker symbol\nso we need to actually make this an F\nstring we put an F before the string and\nthen we put ticker in curly brackets so\nthat it's part of the string now this\nRSS URL we now feed into a feed parser\nso we say that the feed is going to be\nequal to feed parser dop pars RSS\nURL and now what I want to do is I want\nto keep track of a total score which is\ngoing to start at zero and I want to\nkeep track of the number of articles\nthat I'm using because as I said we're\nnot going to use all the articles that\ncome up we want to filter them based on\na keyword for example I'm going to say\nzero here as well and then we're going\nto iterate over the individual entries\nof the feed so I'm going to say for I\nentry in\nenumerate feed.\nentries and here I'm going to do the\nfiltering now if keyword\nlower is part of entry.\nsummary. lower so if the keyword that\nI'm looking for meta in this case uh\nregardless of the case occurs in the\nsummary then I want to look at that\narticle because if the article is top\n28i companies probably meta is not going\nto be necessarily part of the most uh\ndense summary of that article so in that\ncase I don't want to in this case I want\nto look at the art or in this case I\ndon't want to look at the article if it\nis in the summary I want to look at the\narticle uh because I assume that the\npost is focused on metaden now you can\nalso go and more extreme way and filter\nfor the title so you can say if the\nkeyword is in the title but then you're\ngoing to get uh fewer articles to look\nat so that's a trade-off here if that's\nthe case however so if the keyword is um\nor I should say if the keyword is not in\nthe summary I want to continue so I want\nto skip this iteration otherwise I'm\ngoing to do the following I can print\nsome information here let's use an F\nstring let's say the title is entry.\ntile and let's do that now for link and\npublished and\nsummary\nand let's also use the respective Fields\nhere\njust so we can see what the article is\nabout and then what we want to do is we\nwant to calculate the sentiment uh from\nour or we want to get the sentiment from\nour language model so I'm going to say\nsentiment is equal to pipe\nentry. summary so I want to use the\nsummary of the entry as basis here for\nthe analysis and we saw earlier that we\nget a list of dictionaries even though\nit's just one dictionary in there we\nhave to select the zero index to get the\none object that's in the list and this\nsentiment object has remember a label\nand a score so we're going to print here\nuh sentiment is going to be\nsentiment label and score is going to\n[Music]\nbe uh\nsentiment\nscore all right uh and then we can print\nsome some separator here so something\nlike this 40 times\num and this is just going to print\ninformation now what we also want to do\nis we want to add or remove from the\ntotal score now you can come up with\nsome more reasonable metric here for\ndemonstration purposes I'm going to keep\nit very simply I'm going to just look at\nthe label so if it's positive I'm going\nto add to the score if it's negative I'm\ngoing to remove from the score uh or I'm\ngoing to subtract from the\nscore uh and how much I add or subtract\nwill just be the confidence so the score\nuh so I'm going to say uh if the\nsentiment\nlabel if that is equal to positive what\nI'm going to do is I'm going to say\ntotal score plus\nequals uh\nsentiment score otherwise if the\nsentiment label is equal\nto uh\nnegative I'm going to subtract the score\nnow we also have the possibility of\nneutral in this case I don't want to do\nanything uh but I want to make sure that\nI only increase the number of Articles\num which I misspelled here um I want to\nincrease the number of Articles only if\nit's either positive or negative I don't\nwant to consider the neutral one so I'm\ngoing to say plus equals 1 here and plus\nequals 1 here and that's basically it at\nthe end of the loop what I want to do is\nI want to calculate the final score I\nwant to say final score is equal to\ntotal score divided by the number of\nArticles so an average score if you want\nand then I'm going to print print um the\noverall\nsentiment and for this here I'm going to\nsay it's going to\nbe\npositive if the total score exceeds or\nis equal to\n0.15 else I want to use\nnegative I need to use double quotations\nnegative if the total score is below\nor equal to netive\n0.15 and in all other\ncases it's going to be\nneutral and we also want to print the\nfinal score\nitself all right so that is our code um\nlet's see by running it if it produces\nsome problems if not I can go through it\nagain to explain what we did um so there\nyou go you can see it loads some article\nLes here is meta stock a buy as Facebook\nparent bounces back from July slum um\nnow in this case here we have\nMagnificent Seven stocks but meta is uh\npart of the title and part of the\nsummary which is why this is still\nincluded but you can see we get a\nsentiment for each of those and a score\nso how confident it is that it's that\nsentiment so this one is uh positive and\nvery confident so it says meta stocks\nclimbing back toward record highs from\nearly July which is obviously very\npositive and so on and the overall\nsentiment is positive now I can do the\nsame thing for a different ticker symbol\nfor example for let's go uh Goldman\nSachs or actually let's go with Boeing\nthey had some controversy so I'm not\nsure if this is going to matter but\nlet's go and look for uh\nBoeing which is\nba um and here we get a negative\nsentiment at least right now um and you\ncan also scroll through these articles\nto see why this might be the case uh\nyeah you can see that most of the\narticles are not very positive uh we can\nalso go for something like gold which I\nthink recently has decreased in value\nI'm not sure uh but for gold what we\nwould have to do is um we would have to\nuse the ticker symbol I have it here on\nmy second screen GC equals F and the\nkeyword would be gold uh these are just\nthe ticker symbols of the Yahoo finance\nAPI you can look them up at Yahoo\nfinance or you can just Google them or\nyou know know them um but here now the\nsentiment for gold is slightly positive\nuh with\n0.07 actually this is a problem\nbecause actually we should go with final\nscore not total score because the final\nscor is what we're interested\nin and then it should be neutral I guess\nbecause it was\n0.07 yeah uh a couple of days ago it was\nnegative now it's neut so this is as I\nsaid this can also be used to analyze uh\nthe development over time so if it's\nvery negative for a long time and then\nit becomes positive this might be a good\nuh indication that uh yeah things are\ngetting better maybe you want to buy\nagain not Financial advice just\nexploring a possibility uh but this is\nhow you can do that with the Yahoo\nfinance API again you have an RSS feed\nyou load the feed or you parse the feed\nyou iterate over the individual articles\nyou get the summary you calculate the\nsentiment and then we summarize it or we\nwe aggregate it and and get an overall\nscore uh which we divide by the number\nof Articles and yeah this can be used\nlike this now the Second Source will be\nnews API so news API is this website\nhere again not in any way affiliated\nit's just a simple news API where you\ncan get an API key for free um and I\nwill probably have to censor the API\nKeys here which is unfortunate because I\nnow showed the website it doesn't matter\num but the idea here is that uh we're\nnot going to load it from an RSS feed\nwe're going to use a request to send an\num an API request to\nthis platform and we're going to analyze\ntheir news articles again the only\nreason I'm showing two approaches here\nis that you're not uh fixated on only\none way to do that there are multiple\nnew sources there also new sources that\nhave their own python package so there's\na number of different ways you can also\ndownload them you can scrape them\nyourself it doesn't really matter you\njust need some articles that you can\nlook at and some text that you can\nperform sentiment analysis on some\nFinancial text so what we're going to do\nnow is I'm going to copy this I'm going\nto call this Main 2py and we're going to\nadjust the code so that it works with\nthe news API now how how are we going to\ndo that we're going to do that in this\ncase by defining only a keyword and a\ndate the reason here is that we're not\nusing uh specifically just uh a finance\nAPI we're using actually a news API the\ntext is still going to be Financial when\nwe talk about stocks and go and so on\nfor the most part but\num yeah this is why we don't have a\nticker symbol we just have a keyword\nthat we search for and a date that we're\ninterested in so I'm going to say the\ndate here is going to be um the 18th of\nAugust 2024 the reason I'm using a past\ndate is because with the free version\nwhere you have the API key for free uh\nyou get the data delayed by one day so I\ncould actually also go with uh 20th or\n21st but I'm going to just go with the\n18th\num and what we need to change now is we\nneed to change this part we're no longer\ngoing to use feed parser we're going to\nuse the request package um and we're\ngoing to define the URL as a string as\nfollows we're going to use this feature\nof python where we can use uh\nparenthesis to combine strings over\nmultiple lines we're going to say\nhttps uh col newsapi.org\nSL verion 2 or V2 SL everything question\nmark and then we're going to use an F\nstring where we're going to say Q equals\nand then keyword so this is our search\nquery so to say um then we're going to\nuse another FST string which is going to\nbe\nfrom which is going to be the date so\nfrom the specified date then we're going\nto say sort by is equal to popularity so\nwe want to have the most popular\narticles first and then we want to use\nan API\nkey is equal to and then I'm going to\nload the API key here from a file API\nkey is going to be equal to\nopen I already have it in a file here\nAPI key\nre I'm going to pass it here um make\nthis of course an FST string and then we\nhave our URL now the response is going\nto be equal to\nrequests.get\nURL and the articles are going to be\npart of the resulting Json object so\narticles is going to be equal to\nresponse. Json and then from here we\nwant to have the field articles and then\nwe want to say that the\narticles are going to be the following\nlist comprehension article for\narticle in\narticles if uh keyword\nlower is part of article\ntitle or keyword.\nlower is part of\narticle uh\ndescription do\nlower we shouldn't forget\nthat so we want all of this to be not\ncase\nsensitive all right so we get all the\nArticles and then we say articles is\nequal to article for article and\narticles and uh when we have that the\nrest of the code is actually almost the\nsame just at this time now we have for\nthis In Articles and we change entry\nhere we replace entry with\narticles or\narticle and uh we also don't want to\nhave title link published in summary we\nwant to have article title is actually\nstill\nvalid uh then we also want to have\narticle URL not link and\narticle\ndescription here um and we obviously\napply all of this not onto the summary\nwe apply this time onto content so onto\nthe full content of the article so\nsentiment is pipe article content um and\nthat then is going to result in the\nexact same thing as before so we don't\nneed to change anything else the only\nthing we Chang is how we get the\ninformation we use the news API we have\nan API key um what exactly is\nthis from prepared I actually imported\nsomething from my prepared videos okay\num but now we have the same process we\njust have a different format we have\ndifferent keys and different values and\nnow when I run this we're going to see\nthat I get a similar result so it's\ngoing to load no I have no articles so\nlet's use a different uh keyword let's\ngo with something\nlike or actually I I think that this\nshould not be a problem so maybe the\nproblem is somewhere else let me just\nsee we have\nkeyword oh sorry the problem is I need\nto use an and at the end of each of\nthese uh F\nstrings so now it should work\nno okay we're still using summary\nsomewhere where is that oh we don't need\nthis check here obviously because we're\ndoing it in the list\ncomprehension but\nnow there you go we have the Articles we\nhave the title and we have uh actually\nthis should be called description not\npublished but it doesn't really matter\nnow uh and we get the overall sentiment\nat this particular point in time was uh\nnegative quite negative now let's see if\nit changed if we look at\nyesterday\nmaybe okay now it's neutral so it seems\nto have changed over the last couple of\ndays but this is how you can do that\nwith a different new source you can do\nthat now with any new source you can do\nthat with a Statics historic data set if\nyou want to back test something uh if\nyou want to build a trading strategy on\nbased on this and you have a to\nfinancial historic data or uh Financial\narticles historic articles um but yeah\nthis is how you can do Financial text\nsentiment analysis in Python so that's\nit for today's video I hope you enjoyed\nit and hope you learned something if so\nlet me know by hitting a like button and\nleaving a comment in the comment section\ndown below and of course don't forget to\nsubscribe to this Channel and hit the\nnotification Bell to not miss a single\nfuture video for free other than that\nthank you much for watching see you in\nthe next video and\nbye for\n",
  "words": [
    "going",
    "guys",
    "welcome",
    "back",
    "video",
    "today",
    "going",
    "learn",
    "financial",
    "text",
    "sentiment",
    "analysis",
    "python",
    "using",
    "language",
    "model",
    "hugging",
    "face",
    "let",
    "us",
    "get",
    "right",
    "music",
    "right",
    "going",
    "learn",
    "financial",
    "tech",
    "sentiment",
    "analysis",
    "python",
    "today",
    "means",
    "going",
    "take",
    "look",
    "recent",
    "financial",
    "article",
    "surrounding",
    "specific",
    "topic",
    "going",
    "analyze",
    "articles",
    "terms",
    "sentiments",
    "going",
    "use",
    "language",
    "model",
    "tell",
    "us",
    "whether",
    "articles",
    "positive",
    "negative",
    "neutral",
    "going",
    "aggregate",
    "results",
    "multiple",
    "articles",
    "come",
    "overall",
    "sentiment",
    "topic",
    "point",
    "time",
    "used",
    "number",
    "different",
    "ways",
    "one",
    "simple",
    "way",
    "use",
    "incorporate",
    "information",
    "process",
    "analysis",
    "stock",
    "commodity",
    "example",
    "uh",
    "example",
    "see",
    "sentiment",
    "positive",
    "getting",
    "negative",
    "time",
    "might",
    "something",
    "might",
    "want",
    "consider",
    "gets",
    "positive",
    "time",
    "stays",
    "positive",
    "negative",
    "might",
    "also",
    "interesting",
    "one",
    "way",
    "use",
    "uh",
    "video",
    "want",
    "mention",
    "none",
    "things",
    "saying",
    "financial",
    "advice",
    "financial",
    "professional",
    "whatever",
    "show",
    "programming",
    "advice",
    "showing",
    "build",
    "tool",
    "whatever",
    "none",
    "information",
    "call",
    "action",
    "recommendation",
    "invest",
    "showing",
    "build",
    "tool",
    "could",
    "useful",
    "maybe",
    "decision",
    "process",
    "analysis",
    "said",
    "model",
    "going",
    "use",
    "video",
    "today",
    "called",
    "finbert",
    "find",
    "hugging",
    "face",
    "process",
    "ai",
    "nlp",
    "natural",
    "language",
    "processing",
    "model",
    "analyzes",
    "sentiment",
    "financial",
    "text",
    "specialization",
    "important",
    "certain",
    "terms",
    "different",
    "meanings",
    "different",
    "context",
    "different",
    "connotations",
    "term",
    "might",
    "positive",
    "negative",
    "financial",
    "context",
    "neutral",
    "opposite",
    "uh",
    "another",
    "context",
    "want",
    "model",
    "trained",
    "financial",
    "text",
    "text",
    "general",
    "want",
    "play",
    "around",
    "model",
    "actually",
    "using",
    "use",
    "inference",
    "api",
    "test",
    "inference",
    "api",
    "type",
    "text",
    "compute",
    "sentiment",
    "case",
    "stocks",
    "rallied",
    "british",
    "pound",
    "gained",
    "positive",
    "uh",
    "neutral",
    "negative",
    "obviously",
    "adds",
    "one",
    "100",
    "uh",
    "play",
    "around",
    "see",
    "well",
    "works",
    "want",
    "use",
    "click",
    "use",
    "model",
    "get",
    "sample",
    "code",
    "transformers",
    "package",
    "python",
    "case",
    "going",
    "use",
    "uh",
    "part",
    "import",
    "pipeline",
    "um",
    "uh",
    "load",
    "model",
    "pipeline",
    "feed",
    "text",
    "pipeline",
    "object",
    "addition",
    "need",
    "new",
    "sources",
    "need",
    "either",
    "api",
    "feed",
    "need",
    "scraping",
    "something",
    "get",
    "articles",
    "code",
    "analyze",
    "sentiment",
    "articles",
    "want",
    "show",
    "um",
    "want",
    "show",
    "two",
    "different",
    "approaches",
    "familiar",
    "one",
    "versatile",
    "uh",
    "set",
    "sample",
    "code",
    "first",
    "one",
    "going",
    "yahoo",
    "finance",
    "news",
    "um",
    "going",
    "rss",
    "feed",
    "first",
    "example",
    "going",
    "parse",
    "rss",
    "feed",
    "second",
    "one",
    "going",
    "use",
    "news",
    "api",
    "special",
    "reason",
    "sponsoring",
    "video",
    "anything",
    "simple",
    "api",
    "get",
    "free",
    "api",
    "key",
    "access",
    "news",
    "data",
    "uh",
    "case",
    "going",
    "parse",
    "rss",
    "feed",
    "going",
    "actually",
    "use",
    "api",
    "key",
    "send",
    "requests",
    "get",
    "results",
    "um",
    "response",
    "going",
    "two",
    "examples",
    "today",
    "uh",
    "going",
    "first",
    "going",
    "open",
    "command",
    "line",
    "going",
    "install",
    "packages",
    "necessary",
    "two",
    "um",
    "projects",
    "codes",
    "uh",
    "first",
    "one",
    "going",
    "obviously",
    "transformers",
    "loading",
    "using",
    "model",
    "second",
    "one",
    "going",
    "feed",
    "parser",
    "necessary",
    "want",
    "use",
    "rss",
    "feed",
    "third",
    "one",
    "going",
    "requests",
    "package",
    "necessary",
    "sending",
    "uh",
    "processing",
    "htp",
    "requests",
    "easily",
    "python",
    "three",
    "packages",
    "installed",
    "start",
    "first",
    "script",
    "going",
    "start",
    "importing",
    "feed",
    "parser",
    "package",
    "going",
    "also",
    "use",
    "sample",
    "code",
    "use",
    "model",
    "copy",
    "paste",
    "code",
    "uh",
    "finish",
    "invert",
    "pipeline",
    "ready",
    "use",
    "actually",
    "also",
    "copy",
    "text",
    "see",
    "works",
    "go",
    "ahead",
    "say",
    "print",
    "pipe",
    "text",
    "example",
    "run",
    "get",
    "response",
    "see",
    "get",
    "warnings",
    "messed",
    "uh",
    "setup",
    "comes",
    "tensorflow",
    "cuda",
    "uh",
    "see",
    "already",
    "get",
    "result",
    "label",
    "positive",
    "score",
    "exactly",
    "get",
    "browser",
    "uh",
    "get",
    "top",
    "result",
    "get",
    "uh",
    "positive",
    "get",
    "score",
    "options",
    "um",
    "first",
    "time",
    "run",
    "take",
    "time",
    "download",
    "dependencies",
    "models",
    "onto",
    "system",
    "also",
    "need",
    "hardware",
    "capable",
    "running",
    "first",
    "time",
    "faster",
    "get",
    "result",
    "quite",
    "quickly",
    "case",
    "see",
    "passed",
    "text",
    "got",
    "label",
    "positive",
    "score",
    "898",
    "um",
    "going",
    "instead",
    "feeding",
    "static",
    "text",
    "going",
    "load",
    "text",
    "yahoo",
    "finance",
    "rss",
    "feed",
    "going",
    "feed",
    "pipeline",
    "get",
    "sentiment",
    "going",
    "couple",
    "articles",
    "going",
    "aggregate",
    "results",
    "get",
    "overall",
    "score",
    "first",
    "thing",
    "need",
    "define",
    "rss",
    "url",
    "rss",
    "url",
    "going",
    "equal",
    "https",
    "colf",
    "finance",
    "rss",
    "slash",
    "headline",
    "equals",
    "actually",
    "question",
    "mark",
    "equals",
    "term",
    "want",
    "search",
    "actually",
    "saying",
    "want",
    "get",
    "articles",
    "rss",
    "feed",
    "headline",
    "um",
    "contains",
    "certain",
    "query",
    "going",
    "going",
    "define",
    "two",
    "variables",
    "first",
    "ticker",
    "second",
    "keyword",
    "reason",
    "um",
    "works",
    "pass",
    "actual",
    "ticker",
    "symbol",
    "pass",
    "something",
    "like",
    "like",
    "uh",
    "nvidia",
    "going",
    "find",
    "pass",
    "nvda",
    "ticker",
    "symbol",
    "nvidia",
    "pass",
    "goldman",
    "sachs",
    "going",
    "work",
    "pass",
    "gs",
    "know",
    "uh",
    "maybe",
    "different",
    "setting",
    "use",
    "get",
    "uh",
    "different",
    "results",
    "going",
    "going",
    "provide",
    "ticker",
    "symbol",
    "example",
    "meta",
    "name",
    "ticker",
    "symbol",
    "um",
    "also",
    "provide",
    "keyword",
    "keyword",
    "part",
    "url",
    "part",
    "filtering",
    "process",
    "problem",
    "necessarily",
    "problem",
    "thing",
    "api",
    "rss",
    "feed",
    "say",
    "articles",
    "um",
    "come",
    "type",
    "certain",
    "ticker",
    "symbol",
    "really",
    "ticker",
    "symbol",
    "might",
    "type",
    "meta",
    "ticker",
    "symbol",
    "might",
    "get",
    "article",
    "describing",
    "top",
    "20",
    "ai",
    "companies",
    "right",
    "uh",
    "post",
    "really",
    "meta",
    "might",
    "best",
    "source",
    "analyze",
    "sentiment",
    "meta",
    "19",
    "stocks",
    "positive",
    "negative",
    "statements",
    "might",
    "want",
    "also",
    "check",
    "certain",
    "keyword",
    "present",
    "um",
    "summary",
    "title",
    "article",
    "say",
    "meta",
    "well",
    "uh",
    "important",
    "thing",
    "want",
    "introduce",
    "ticker",
    "symbol",
    "need",
    "actually",
    "make",
    "f",
    "string",
    "put",
    "f",
    "string",
    "put",
    "ticker",
    "curly",
    "brackets",
    "part",
    "string",
    "rss",
    "url",
    "feed",
    "feed",
    "parser",
    "say",
    "feed",
    "going",
    "equal",
    "feed",
    "parser",
    "dop",
    "pars",
    "rss",
    "url",
    "want",
    "want",
    "keep",
    "track",
    "total",
    "score",
    "going",
    "start",
    "zero",
    "want",
    "keep",
    "track",
    "number",
    "articles",
    "using",
    "said",
    "going",
    "use",
    "articles",
    "come",
    "want",
    "filter",
    "based",
    "keyword",
    "example",
    "going",
    "say",
    "zero",
    "well",
    "going",
    "iterate",
    "individual",
    "entries",
    "feed",
    "going",
    "say",
    "entry",
    "enumerate",
    "feed",
    "entries",
    "going",
    "filtering",
    "keyword",
    "lower",
    "part",
    "entry",
    "summary",
    "lower",
    "keyword",
    "looking",
    "meta",
    "case",
    "uh",
    "regardless",
    "case",
    "occurs",
    "summary",
    "want",
    "look",
    "article",
    "article",
    "top",
    "28i",
    "companies",
    "probably",
    "meta",
    "going",
    "necessarily",
    "part",
    "uh",
    "dense",
    "summary",
    "article",
    "case",
    "want",
    "case",
    "want",
    "look",
    "art",
    "case",
    "want",
    "look",
    "article",
    "summary",
    "want",
    "look",
    "article",
    "uh",
    "assume",
    "post",
    "focused",
    "metaden",
    "also",
    "go",
    "extreme",
    "way",
    "filter",
    "title",
    "say",
    "keyword",
    "title",
    "going",
    "get",
    "uh",
    "fewer",
    "articles",
    "look",
    "case",
    "however",
    "keyword",
    "um",
    "say",
    "keyword",
    "summary",
    "want",
    "continue",
    "want",
    "skip",
    "iteration",
    "otherwise",
    "going",
    "following",
    "print",
    "information",
    "let",
    "use",
    "f",
    "string",
    "let",
    "say",
    "title",
    "entry",
    "tile",
    "let",
    "link",
    "published",
    "summary",
    "let",
    "also",
    "use",
    "respective",
    "fields",
    "see",
    "article",
    "want",
    "want",
    "calculate",
    "sentiment",
    "uh",
    "want",
    "get",
    "sentiment",
    "language",
    "model",
    "going",
    "say",
    "sentiment",
    "equal",
    "pipe",
    "entry",
    "summary",
    "want",
    "use",
    "summary",
    "entry",
    "basis",
    "analysis",
    "saw",
    "earlier",
    "get",
    "list",
    "dictionaries",
    "even",
    "though",
    "one",
    "dictionary",
    "select",
    "zero",
    "index",
    "get",
    "one",
    "object",
    "list",
    "sentiment",
    "object",
    "remember",
    "label",
    "score",
    "going",
    "print",
    "uh",
    "sentiment",
    "going",
    "sentiment",
    "label",
    "score",
    "going",
    "music",
    "uh",
    "sentiment",
    "score",
    "right",
    "uh",
    "print",
    "separator",
    "something",
    "like",
    "40",
    "times",
    "um",
    "going",
    "print",
    "information",
    "also",
    "want",
    "want",
    "add",
    "remove",
    "total",
    "score",
    "come",
    "reasonable",
    "metric",
    "demonstration",
    "purposes",
    "going",
    "keep",
    "simply",
    "going",
    "look",
    "label",
    "positive",
    "going",
    "add",
    "score",
    "negative",
    "going",
    "remove",
    "score",
    "uh",
    "going",
    "subtract",
    "score",
    "uh",
    "much",
    "add",
    "subtract",
    "confidence",
    "score",
    "uh",
    "going",
    "say",
    "uh",
    "sentiment",
    "label",
    "equal",
    "positive",
    "going",
    "going",
    "say",
    "total",
    "score",
    "plus",
    "equals",
    "uh",
    "sentiment",
    "score",
    "otherwise",
    "sentiment",
    "label",
    "equal",
    "uh",
    "negative",
    "going",
    "subtract",
    "score",
    "also",
    "possibility",
    "neutral",
    "case",
    "want",
    "anything",
    "uh",
    "want",
    "make",
    "sure",
    "increase",
    "number",
    "articles",
    "um",
    "misspelled",
    "um",
    "want",
    "increase",
    "number",
    "articles",
    "either",
    "positive",
    "negative",
    "want",
    "consider",
    "neutral",
    "one",
    "going",
    "say",
    "plus",
    "equals",
    "1",
    "plus",
    "equals",
    "1",
    "basically",
    "end",
    "loop",
    "want",
    "want",
    "calculate",
    "final",
    "score",
    "want",
    "say",
    "final",
    "score",
    "equal",
    "total",
    "score",
    "divided",
    "number",
    "articles",
    "average",
    "score",
    "want",
    "going",
    "print",
    "print",
    "um",
    "overall",
    "sentiment",
    "going",
    "say",
    "going",
    "positive",
    "total",
    "score",
    "exceeds",
    "equal",
    "else",
    "want",
    "use",
    "negative",
    "need",
    "use",
    "double",
    "quotations",
    "negative",
    "total",
    "score",
    "equal",
    "netive",
    "cases",
    "going",
    "neutral",
    "also",
    "want",
    "print",
    "final",
    "score",
    "right",
    "code",
    "um",
    "let",
    "see",
    "running",
    "produces",
    "problems",
    "go",
    "explain",
    "um",
    "go",
    "see",
    "loads",
    "article",
    "les",
    "meta",
    "stock",
    "buy",
    "facebook",
    "parent",
    "bounces",
    "back",
    "july",
    "slum",
    "um",
    "case",
    "magnificent",
    "seven",
    "stocks",
    "meta",
    "uh",
    "part",
    "title",
    "part",
    "summary",
    "still",
    "included",
    "see",
    "get",
    "sentiment",
    "score",
    "confident",
    "sentiment",
    "one",
    "uh",
    "positive",
    "confident",
    "says",
    "meta",
    "stocks",
    "climbing",
    "back",
    "toward",
    "record",
    "highs",
    "early",
    "july",
    "obviously",
    "positive",
    "overall",
    "sentiment",
    "positive",
    "thing",
    "different",
    "ticker",
    "symbol",
    "example",
    "let",
    "go",
    "uh",
    "goldman",
    "sachs",
    "actually",
    "let",
    "go",
    "boeing",
    "controversy",
    "sure",
    "going",
    "matter",
    "let",
    "go",
    "look",
    "uh",
    "boeing",
    "ba",
    "um",
    "get",
    "negative",
    "sentiment",
    "least",
    "right",
    "um",
    "also",
    "scroll",
    "articles",
    "see",
    "might",
    "case",
    "uh",
    "yeah",
    "see",
    "articles",
    "positive",
    "uh",
    "also",
    "go",
    "something",
    "like",
    "gold",
    "think",
    "recently",
    "decreased",
    "value",
    "sure",
    "uh",
    "gold",
    "would",
    "um",
    "would",
    "use",
    "ticker",
    "symbol",
    "second",
    "screen",
    "gc",
    "equals",
    "f",
    "keyword",
    "would",
    "gold",
    "uh",
    "ticker",
    "symbols",
    "yahoo",
    "finance",
    "api",
    "look",
    "yahoo",
    "finance",
    "google",
    "know",
    "know",
    "um",
    "sentiment",
    "gold",
    "slightly",
    "positive",
    "uh",
    "actually",
    "problem",
    "actually",
    "go",
    "final",
    "score",
    "total",
    "score",
    "final",
    "scor",
    "interested",
    "neutral",
    "guess",
    "yeah",
    "uh",
    "couple",
    "days",
    "ago",
    "negative",
    "neut",
    "said",
    "also",
    "used",
    "analyze",
    "uh",
    "development",
    "time",
    "negative",
    "long",
    "time",
    "becomes",
    "positive",
    "might",
    "good",
    "uh",
    "indication",
    "uh",
    "yeah",
    "things",
    "getting",
    "better",
    "maybe",
    "want",
    "buy",
    "financial",
    "advice",
    "exploring",
    "possibility",
    "uh",
    "yahoo",
    "finance",
    "api",
    "rss",
    "feed",
    "load",
    "feed",
    "parse",
    "feed",
    "iterate",
    "individual",
    "articles",
    "get",
    "summary",
    "calculate",
    "sentiment",
    "summarize",
    "aggregate",
    "get",
    "overall",
    "score",
    "uh",
    "divide",
    "number",
    "articles",
    "yeah",
    "used",
    "like",
    "second",
    "source",
    "news",
    "api",
    "news",
    "api",
    "website",
    "way",
    "affiliated",
    "simple",
    "news",
    "api",
    "get",
    "api",
    "key",
    "free",
    "um",
    "probably",
    "censor",
    "api",
    "keys",
    "unfortunate",
    "showed",
    "website",
    "matter",
    "um",
    "idea",
    "uh",
    "going",
    "load",
    "rss",
    "feed",
    "going",
    "use",
    "request",
    "send",
    "um",
    "api",
    "request",
    "platform",
    "going",
    "analyze",
    "news",
    "articles",
    "reason",
    "showing",
    "two",
    "approaches",
    "uh",
    "fixated",
    "one",
    "way",
    "multiple",
    "new",
    "sources",
    "also",
    "new",
    "sources",
    "python",
    "package",
    "number",
    "different",
    "ways",
    "also",
    "download",
    "scrape",
    "really",
    "matter",
    "need",
    "articles",
    "look",
    "text",
    "perform",
    "sentiment",
    "analysis",
    "financial",
    "text",
    "going",
    "going",
    "copy",
    "going",
    "call",
    "main",
    "2py",
    "going",
    "adjust",
    "code",
    "works",
    "news",
    "api",
    "going",
    "going",
    "case",
    "defining",
    "keyword",
    "date",
    "reason",
    "using",
    "uh",
    "specifically",
    "uh",
    "finance",
    "api",
    "using",
    "actually",
    "news",
    "api",
    "text",
    "still",
    "going",
    "financial",
    "talk",
    "stocks",
    "go",
    "part",
    "um",
    "yeah",
    "ticker",
    "symbol",
    "keyword",
    "search",
    "date",
    "interested",
    "going",
    "say",
    "date",
    "going",
    "um",
    "18th",
    "august",
    "2024",
    "reason",
    "using",
    "past",
    "date",
    "free",
    "version",
    "api",
    "key",
    "free",
    "uh",
    "get",
    "data",
    "delayed",
    "one",
    "day",
    "could",
    "actually",
    "also",
    "go",
    "uh",
    "20th",
    "21st",
    "going",
    "go",
    "18th",
    "um",
    "need",
    "change",
    "need",
    "change",
    "part",
    "longer",
    "going",
    "use",
    "feed",
    "parser",
    "going",
    "use",
    "request",
    "package",
    "um",
    "going",
    "define",
    "url",
    "string",
    "follows",
    "going",
    "use",
    "feature",
    "python",
    "use",
    "uh",
    "parenthesis",
    "combine",
    "strings",
    "multiple",
    "lines",
    "going",
    "say",
    "https",
    "uh",
    "col",
    "sl",
    "verion",
    "2",
    "v2",
    "sl",
    "everything",
    "question",
    "mark",
    "going",
    "use",
    "f",
    "string",
    "going",
    "say",
    "q",
    "equals",
    "keyword",
    "search",
    "query",
    "say",
    "um",
    "going",
    "use",
    "another",
    "fst",
    "string",
    "going",
    "going",
    "date",
    "specified",
    "date",
    "going",
    "say",
    "sort",
    "equal",
    "popularity",
    "want",
    "popular",
    "articles",
    "first",
    "want",
    "use",
    "api",
    "key",
    "equal",
    "going",
    "load",
    "api",
    "key",
    "file",
    "api",
    "key",
    "going",
    "equal",
    "open",
    "already",
    "file",
    "api",
    "key",
    "going",
    "pass",
    "um",
    "make",
    "course",
    "fst",
    "string",
    "url",
    "response",
    "going",
    "equal",
    "url",
    "articles",
    "going",
    "part",
    "resulting",
    "json",
    "object",
    "articles",
    "going",
    "equal",
    "response",
    "json",
    "want",
    "field",
    "articles",
    "want",
    "say",
    "articles",
    "going",
    "following",
    "list",
    "comprehension",
    "article",
    "article",
    "articles",
    "uh",
    "keyword",
    "lower",
    "part",
    "article",
    "title",
    "keyword",
    "lower",
    "part",
    "article",
    "uh",
    "description",
    "lower",
    "forget",
    "want",
    "case",
    "sensitive",
    "right",
    "get",
    "articles",
    "say",
    "articles",
    "equal",
    "article",
    "article",
    "articles",
    "uh",
    "rest",
    "code",
    "actually",
    "almost",
    "time",
    "articles",
    "change",
    "entry",
    "replace",
    "entry",
    "articles",
    "article",
    "uh",
    "also",
    "want",
    "title",
    "link",
    "published",
    "summary",
    "want",
    "article",
    "title",
    "actually",
    "still",
    "valid",
    "uh",
    "also",
    "want",
    "article",
    "url",
    "link",
    "article",
    "description",
    "um",
    "obviously",
    "apply",
    "onto",
    "summary",
    "apply",
    "time",
    "onto",
    "content",
    "onto",
    "full",
    "content",
    "article",
    "sentiment",
    "pipe",
    "article",
    "content",
    "um",
    "going",
    "result",
    "exact",
    "thing",
    "need",
    "change",
    "anything",
    "else",
    "thing",
    "chang",
    "get",
    "information",
    "use",
    "news",
    "api",
    "api",
    "key",
    "um",
    "exactly",
    "prepared",
    "actually",
    "imported",
    "something",
    "prepared",
    "videos",
    "okay",
    "um",
    "process",
    "different",
    "format",
    "different",
    "keys",
    "different",
    "values",
    "run",
    "going",
    "see",
    "get",
    "similar",
    "result",
    "going",
    "load",
    "articles",
    "let",
    "use",
    "different",
    "uh",
    "keyword",
    "let",
    "go",
    "something",
    "like",
    "actually",
    "think",
    "problem",
    "maybe",
    "problem",
    "somewhere",
    "else",
    "let",
    "see",
    "keyword",
    "oh",
    "sorry",
    "problem",
    "need",
    "use",
    "end",
    "uh",
    "f",
    "strings",
    "work",
    "okay",
    "still",
    "using",
    "summary",
    "somewhere",
    "oh",
    "need",
    "check",
    "obviously",
    "list",
    "comprehension",
    "go",
    "articles",
    "title",
    "uh",
    "actually",
    "called",
    "description",
    "published",
    "really",
    "matter",
    "uh",
    "get",
    "overall",
    "sentiment",
    "particular",
    "point",
    "time",
    "uh",
    "negative",
    "quite",
    "negative",
    "let",
    "see",
    "changed",
    "look",
    "yesterday",
    "maybe",
    "okay",
    "neutral",
    "seems",
    "changed",
    "last",
    "couple",
    "days",
    "different",
    "new",
    "source",
    "new",
    "source",
    "statics",
    "historic",
    "data",
    "set",
    "want",
    "back",
    "test",
    "something",
    "uh",
    "want",
    "build",
    "trading",
    "strategy",
    "based",
    "financial",
    "historic",
    "data",
    "uh",
    "financial",
    "articles",
    "historic",
    "articles",
    "um",
    "yeah",
    "financial",
    "text",
    "sentiment",
    "analysis",
    "python",
    "today",
    "video",
    "hope",
    "enjoyed",
    "hope",
    "learned",
    "something",
    "let",
    "know",
    "hitting",
    "like",
    "button",
    "leaving",
    "comment",
    "comment",
    "section",
    "course",
    "forget",
    "subscribe",
    "channel",
    "hit",
    "notification",
    "bell",
    "miss",
    "single",
    "future",
    "video",
    "free",
    "thank",
    "much",
    "watching",
    "see",
    "next",
    "video",
    "bye"
  ],
  "keywords": [
    "going",
    "back",
    "video",
    "today",
    "financial",
    "text",
    "sentiment",
    "analysis",
    "python",
    "using",
    "language",
    "model",
    "let",
    "get",
    "right",
    "look",
    "article",
    "analyze",
    "articles",
    "use",
    "positive",
    "negative",
    "neutral",
    "results",
    "come",
    "overall",
    "time",
    "number",
    "different",
    "one",
    "way",
    "information",
    "process",
    "example",
    "uh",
    "see",
    "might",
    "something",
    "want",
    "also",
    "maybe",
    "certain",
    "actually",
    "api",
    "case",
    "stocks",
    "obviously",
    "works",
    "code",
    "package",
    "part",
    "pipeline",
    "um",
    "load",
    "feed",
    "object",
    "need",
    "new",
    "two",
    "first",
    "yahoo",
    "finance",
    "news",
    "rss",
    "second",
    "reason",
    "free",
    "key",
    "data",
    "response",
    "parser",
    "go",
    "say",
    "print",
    "result",
    "label",
    "score",
    "onto",
    "thing",
    "url",
    "equal",
    "equals",
    "ticker",
    "keyword",
    "pass",
    "symbol",
    "like",
    "know",
    "meta",
    "problem",
    "really",
    "source",
    "summary",
    "title",
    "f",
    "string",
    "total",
    "entry",
    "lower",
    "list",
    "final",
    "still",
    "matter",
    "yeah",
    "gold",
    "date",
    "change"
  ]
}